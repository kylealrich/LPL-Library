ProcurementCostDefault is a Field

    Representation
        Group Fields
        	InCompany					is a PurchasingCompany
        	InRequestingCompany			is like InventoryCompany
        	InItem						is an Item
        	InQuantity					is a Quantity
        	InItemType					is an ItemType
        	InQuantityUOM				is a UnitOfMeasure
        	InCostOption				is a CostOption
        	InContract					is a Contract
        	Requisition
        	PurchaseOrder
        	InDescription				is a Description
			InServiceCode				is a ServiceCode
			InTier						is like ContractTier
			InVendor					is a Vendor
			InVendorItem				is a VendorItem
	        	classic name is IN-VENDOR-ITEM
			InUnitCost					is a UnitCost
			InCurrencyCode				is a Currency
			InOverrideLastCostOrLastPO	is Boolean
			InOverrideContract			is Boolean
			InRequesterOverrideAllowed	is Boolean
			InCostUOM					is a UnitOfMeasureEdit
			InProcurementGroup			is like ProcurementGroup
	    	InContractType				is like ContractType
	    	InRetainageTracking			is Numeric size 1
				States
					NoRetainage					value is 0
					HeaderLevel					value is 1
					LineLevel					value is 2
					Contract					value is 3
	        InContractGroup				is like ContractGroup
	        	classic name is IN-AGREEMENT-REF
	        InContractLine				is like ContractLine
	        InPurchaseFromLocation		is a PurchaseFromLocation
	        InLocation					is an InventoryLocation
	        InRequestingLocation		is a RequestingLocation
	        InPurchaseOrder				is like PurchaseOrder
	        
	        InTransactionCurrencyCode	is a Currency
	        InRequisitionCurrencyCode	is a Currency
	        InOverrideCost				is Boolean
	        InSystem					is a GeneralLedgerSystemCode
	        InUnitCostFromRqAndPunchout	is Boolean
	        	classic name is IN-GLOM-COST-FL
	        InFromStrategicSourcing		is Boolean
	        InFromItemList				is Boolean
	        InFromConsignment			is Boolean
	        InManufacturerCode			is a ManufacturerCode
	        InManufacturerDivision		is a ManufacturerDivision
	        InManufacturerNumber		is a ManufacturerNumber
	        InSourceUnitOfMeasure		is a UnitOfMeasure
	        InStockless					is Boolean
	        InIgnoreStockless			is Boolean
	        InTaxable					is Boolean
	        InTaxCode					is like TaxCode
	        InItemSource				is Alpha size 1
	        InDate						is Date
	        InIsConsignment				is Boolean
	        InGetPreferredManufacturer	is Boolean
	        InPreference				is Numeric size 1
				States
					None					value is 0
					Contract				value is 1
					Manufacturer			value is 2
					ManufacturerAndContract	value is 3
			InSkipZeroCostContractLine	is Boolean
			InDoUpdates					is Boolean
			InDoNotConvertCurrency		is Boolean
			InBypassQuantityConversion	is Boolean
			InBypassUseContractUOM		is Boolean
			InDoContractOnly			is Boolean
			InDoDebug					is Boolean
			InDoNotIgnoreNoCharge		is Boolean
			InSkipUOMMatching			is Boolean
			InCapitatedContract         is Boolean 
			InCapitatedProcedureLine    is like ContractLine 
			InCapitatedComponentGroup   is Numeric 2
			InCapitatedProcedureLevel   is Numeric size 1
				States 
					NotApplicable               value is 0
					Primary                     value is 1
					Revision                    value is 2	           

	Transient Fields
		OutputSourceUOM					is a UnitOfMeasure
		OutputCostCode					is a CostCode
		OutputCostUOM					is a UnitOfMeasure
		OutputQuantity					is a Quantity
		OutputQuantityUOM				is a UnitOfMeasure
		OutputContract					is like Contract
		OutputPurchaseFromLocation		is like PurchaseFromLocation
		OutputPurchaseFromLocationName	is like VendorName
		OutputVendorItem				is like VendorItem
		OutputNoCharge					is Boolean
		OutputServiceCode				is a ServiceCode
		OutputRetainageTracking			is Numeric size 1
			States
				NoRetainage                 value is 0
				HeaderLevel					value is 1
				LineLevel					value is 2
		OutputVendor					is like Vendor
		OutputVendorName				is like VendorName
		OutputCostOption				is a CostOption
		OutputUnitCost					is a UnitCost
		OutputDescription				is a Description
		OutputOverrideUOM				is Boolean
		OutputMatchUOM					is Boolean
		OutputTaxable					is Boolean
		OutputTaxCode					is like TaxCode
		OutputContractLine				is a ContractLine
		OutputItemType					is an ItemType
		OutputItemSource				is Alpha size 1
		OutputFoundCost					is a UnitCost
		OutputFoundUOM					is a UnitOfMeasure
		OutputPreference				is Numeric size 1
			States
				None					value is 0
				Contract				value is 1
				Manufacturer			value is 2
				ManufacturerAndContract	value is 3
		OutputContractGroup				is like ContractGroup
		OutputMfgContractTierInfo		is like Tier
		OutputCurrencyCode				is like Currency
		
		RetrievedPreferredContract		is like Contract
		RetrievedPreferredManuf			is like Manufacturer
		RetrievedContractLine			is like ContractLine
		LineView						is a ContractLine view
		MemberView						is a ContractLineMember view
		
	Local Fields
		LocalContractGroupForContractPricing	is like ContractGroup
		LocalContractForContractPricing			is like Contract
		LocalCurrencyExchange					is a CurrencyExchange
		LocalFromCurrency						is a FromCurrency
		LocalExchangeDate						is a ExchangeDate
		LocalTransactionAmount					is a CurrencyAmount
		LocalToCurrency							is a ToCurrency
		DefaultingSequence
		UOMCalculation
		UnitOfMeasureEdit
		RoundedValue
		CostDefaultingOrder
		OrderTable
		LocalCompany							is like PurchasingCompany
		LocalContractGroup						is like ContractGroup
		LocalCostCode							is a CostCode
		LocalCostOption							is a CostOption
		LocalCurrencyCode						is a Currency
		LocalContract							is like Contract
		LocalVendorItem							is like VendorItem
		LocalVendorGroup						is like VendorGroup
		LocalVendor								is like Vendor
		LocalPurchaseFromLocation				is like PurchaseFromLocation
		LocalUnitCost							is a UnitCost
		LocalUnitCostInContractUOM              is a UnitCost
		LocalTierUnitCost						is a UnitCost
		LocalTierCostUOM						is a UnitOfMeasureEdit
		LocalOverrideUOM						is Boolean
		LocalCostUOM							is a UnitOfMeasureEdit
		LocalQuantityUOM						is a UnitOfMeasure
		LocalQuantity							is a Quantity
		LocalItemType							is an ItemType
		LocalDescription						is a Description
		LocalServiceCode						is a ServiceCode
		LocalMatchUOM							is Boolean
		LocalTaxable							is Boolean
		LocalTaxCode							is like TaxCode
		LocalContractLine						is a ContractLine
		Execute									is Boolean
		LocalPreference							is Numeric size 1
			States	
				None								value is 0
				Contract							value is 1
				Manufacturer						value is 2
				ManufacturerAndContract				value is 3
		LocalOrderNumber						is Numeric size 2
		LocalContractType						is Numeric size 1
    		States		
    			Contract     						value is 1
    			Blanket      						value is 2
    			Standing     						value is 3
    			CatalogQuote 						value is 4
    			Service 	 						value is 5
    	CompareQuantity							is a Quantity
    	CompareAmount							is a UnitCost
    	LocalLineBreakQuantityAmount			is an InternationalCost
    	LocalLineBreakPercent					is Percent size 6.3
    	LocalLineBreakCost						is a UnitCost
    	LocalBreakLevel							is Alpha size 1
    		States		
    			Line								value is "L"
    			Header								value is "H"
    	LocalPercent							is Percent size 6.3
    	LocalCostDifference						is an InternationalCost
    	LocalBreakAmount						is an InternationalCost
    	LocalBreakPercent						is Percent size 6.3
    	LocalRemainder							is Decimal size 2
		LocalMfgContractTierInfo				is like ContractTier
		LocalLowestCost							is a UnitCost
		CompareValue							is a UnitCost
		BreaksOn								is Numeric size 1
			States	
				Quantity							value is 1
				Amount								value is 2
		LocalLocation							is like InventoryLocation
		LocalRequestingLocation					is like RequestingLocation
		SkipRecord								is Boolean
		OriginalUnitCost						is a UnitCost
		OriginalCostUOM							is a UnitOfMeasureEdit
		LocalValidForLinePriceBreak 			is Boolean	
		LocalPricingGroup						is like PricingGroup
		LocalHasContractParticipant				is Boolean
		LocalContractParticipantMatch			is Boolean
		LocalFoundCost							is Boolean
		LocalFoundStandardCost					is Boolean
		LocalNormalPriority						is Numeric size 1
		LocalTierPriority						is Numeric size 1
		LocalHighestPriority					is Numeric size 1
		LocalPreferredItem						is like Item
		LocalPreferredVendorItem				is like VendorItem
		LocalContractIsPreferred				is Boolean
		LocalSkipVendorLocationMatching			is Boolean
		
		LocalSkipContractRelatedLookup			is Boolean
		
	Patterns
		disable StaticTranslations

	Conditions
		CostCodeFromContracts
			when (ContractOrBlanketOrCatalogQuoteOrStanding
			or    TierParticipant)

		UOMsCanBeConverted
			when (InItemType.Inventoried
			or    InItemType.NonStock)
	
		LinePriceBreaks
			when (not InIsConsignment
			and BreaksOn entered)
	
		ConsignmentPriceBreaks
			when (InIsConsignment
			and BreaksOn entered)
	
		EligibleForNonContractDefaulting
			when (NotPreferredAndFoundCostCode
			and  (FoundCostFromContracts
			and   OutputUnitCost < LocalUnitCost)
			or    LocalCostCode not entered
			and  (LocalUnitCost entered
			or    LocalCostOptionCannotBeEntered))

		LocalCostOptionCannotBeEntered
			when (LocalCostOption.NoCharge
			or    LocalCostOption.VendorDetermined)
		
		FoundCostNotEligible
			when (OutputCostCode entered
			and  (OutputCostOption.NoCharge
			or	  OutputCostOption.VendorDetermined))
		
		
		NotPreferredAndFoundCostCode
			when (LocalPreference.None
			and OutputCostCode entered)
		
		ContractCostAllowedToOverride
			when (UnitCostIsValid
			and   RqOverrideOrAllowedToOverride) 
		
		UnitCostIsValid
			when (UnitCostEntered
			or    UnitCostEnteredAndChanged
			or    UnitCostChangedAndCannotBeEntered)
		
		RqOverrideOrAllowedToOverride
			when (RequisitionOverrideCost
			or	  AllowedToOverrideButNotOverrideCost
			or   (InSystem != "RQ"))
		
		AllowedToOverrideButNotOverrideCost
			when (not InOverrideCost
			and   InRequesterOverrideAllowed)
		
		UnitCostEntered
			when (InUnitCost entered)
		
		UnitCostEnteredAndChanged
			when (InUnitCost entered
			and   UnitCostChanged)
		
		UnitCostChangedAndCannotBeEntered
			when (UnitCostChanged
			and   UnitCostCannotBeEntered)
		
		UnitCostChanged
			when (InUnitCost changed)
		
		NotEligibleForContractDefaulting
			when ((OverrideContractWithCost
			and   OverrideIsAllowed)
			or   (InRetainageTracking.HeaderLevel 
			or 	  InRetainageTracking.LineLevel))
		
		OverrideContractWithCost
			when (InOverrideContract
			and  (InUnitCost entered
			or    UnitCostCannotBeEntered))
		
		OverrideIsAllowed
			when (RequisitionOverrideCost
			or    RequesterOverride)
		
		RequesterOverride
			when (InRequesterOverrideAllowed
			and	  RequisitionOverrideCost)
	
		RequisitionOverrideCost
			when (InSystem = "RQ"
			and	  InOverrideCost)
	
		LastCostOrPO
			when (OutputCostCode.LastPoCreated 
			or 	  OutputCostCode.LastCost)
		
		ContractOrBlanketOrCatalogQuoteOrStanding
			when (OutputCostCode.Contract
			or	  OutputCostCode.Blanket
			or	  OutputCostCode.CatalogQuote
			or    OutputCostCode.Standing)
		
		TierParticipant
			when (OutputCostCode.TierReqLocParticipant
			or	  OutputCostCode.TierIcLocationParticipant
			or	  OutputCostCode.TierCompanyParticipant)
		
		IsStrategicSourcing
			when (OutputCostCode.StrategicSourcing)
			
		HasItemmast
			when (InItemType.Inventoried
			or	  InItemType.NonStock)
		
		SpecialOrService
			when (InItemType.Special
			or	  InItemType.Service)
		
		ContractTypeNotBlanketAndStanding		
			when (InContract.ContractType.PurchaseType.Blanket
			and	  InContract.ContractType.PurchaseType.Standing)
			
		FoundCostFromContracts
			when (LocalCostCode.Contract
			or	  LocalCostCode.CatalogQuote
			or    LocalCostCode.Blanket)
			
		UnitCostCannotBeEntered
			when (InCostOption.NoCharge
			or    InCostOption.VendorDetermined)
		
		ContractLineIsFound
			when (LocalContractGroup entered
			and LocalContract entered
			and LocalContractLine entered)

	Relations
		OutputContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup		= OutputContractGroup
				related.Contract			= OutputContract
		
		ContractPricingRel
			one-to-many relation to ContractPricing
			Field Mapping uses ByDateDescend
				related.ContractGroup		= LocalContractGroupForContractPricing
				related.Contract			= LocalContractForContractPricing
			Instance Selection
				where (related.ContractPricing <= current corporate date)
	
	
		InputContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup		= InContractGroup
				related.Contract			= InContract
				related.ContractLine		= InContractLine
				
		OutputContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup		= LocalContractGroup
				related.Contract			= LocalContract
				related.ContractLine		= LocalContractLine
		
		RequestingLocationRel
			one-to-one relation to RequestingLocation
			Field Mapping uses symbolic key
				related.Company				= InRequestingCompany
				related.RequestingLocation	= InRequestingLocation

		LowestTierRel
			one-to-many relation to ContractLineMember
			Field Mapping uses ByAvailableItem
				related.ProcurementGroup								= InProcurementGroup
				related.ItemNumber										= InItem
			Instance Selection
				where ((InContract not entered or (InContract = related.Contract))
				and    (RetrievedPreferredContract not entered or related.Contract = RetrievedPreferredContract)
				and    (related.Contract.PurchaseType = LocalContractType)
				and		LocalCompany 			 = related.ContractLineMember.Company
				and		LocalRequestingLocation  = related.ContractLineMember.RequestingLocation
				and		LocalLocation 			 = related.ContractLineMember.Location
				and		LocalPricingGroup 		 = related.ContractLineMember.PricingGroup
				and    (InCostUOM.UnitOfMeasure not entered or not related.ContractLine.UsesUOMSMustMatch or (related.UOM.UnitOfMeasure = InCostUOM.UnitOfMeasure))
				and    (InIgnoreStockless
				or     (not InStockless and not related.ContractLine.StocklessForCostDefaulting)   
				or     (    InStockless and     related.ContractLine.StocklessForCostDefaulting))
				and   ((InVendor not entered or InVendor = related.Contract.Vendor)
				and    (LocalSkipVendorLocationMatching
				or      related.Contract.ApPoPurchaseFrom not entered
				or     (related.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.PurchaseFromLocation)
				or     (related.Contract.ApPoPurchaseFrom.VendorLocation       entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.VendorLocation))
				and    (InVendorItem not entered or InVendorItem = related.VendorItem))
				and     InDate >= related.ContractLine.EffectiveDate
				and    (related.ContractLine.ExpirationDate not entered or InDate <= related.ContractLine.ExpirationDate)
				and    (related.ContractLine.ContractLineState.Active or related.ContractLine.ContractLineState.Amendment)
				and    (InItemType not entered or related.ContractLine.ItemType = DerivedContractItemType)
				and	   (not InSkipZeroCostContractLine or related.ContractLine.BaseCost entered))

		ContractPreferredManufacturerRel
			one-to-many relation to ContractPreferredManufacturer
			Field Mapping uses ByItemForDefault
				related.ContractPreferredManufacturer.InventoryCompany	= LocalCompany
				related.ContractPreferredManufacturer.ItemNumber		= LocalPreferredItem
				related.ContractPreferredManufacturer.Location 			= LocalLocation
				related.ContractPreferredManufacturer.ReqLocation 		= LocalRequestingLocation
				related.ContractPreferredManufacturer.PricingGroup		= LocalPricingGroup
			Instance Selection
				where (((InContract 		not entered or InContract = related.Contract)
				or      (related.Contract 	not entered
				and      InManufacturerCode = related.ManufacturerCode.ManufacturerCode
				and      InManufacturerDivision = related.ManufacturerCode.ManufacturerDivision))
				and    (InVendor 				 not entered or InVendor				 = related.Contract.Vendor)
				and    (LocalSkipVendorLocationMatching
				or      related.Contract.ApPoPurchaseFrom not entered
				or     (related.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.PurchaseFromLocation)
				or     (related.Contract.ApPoPurchaseFrom.VendorLocation       entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.VendorLocation))
				and    (LocalPreferredVendorItem not entered or LocalPreferredVendorItem = related.ContractPreferredManufacturer.VendorItem))

		AvailableContractLinesRel
			one-to-many relation to ContractLine
			Field Mapping uses ByCostDefaultingOrder
				related.ContractGroup			= InProcurementGroup
				related.ItemNumber				= InItem
			Instance Selection
				where (((InContract not entered or (InContract = related.Contract))
				and    ((RetrievedPreferredContract not entered or related.Contract	= RetrievedPreferredContract) and (RetrievedPreferredManuf not entered or related.Manufacturer = RetrievedPreferredManuf)  and (RetrievedContractLine not entered or related.ContractLine = RetrievedContractLine)))
				and    related.Contract.PurchaseType = LocalContractType
				and 	(InDate >= related.EffectiveDate
				and 	(related.ExpirationDate not entered or InDate <= related.ExpirationDate))
			 	and 	(InCostUOM.UnitOfMeasure not entered or (not related.UsesUOMSMustMatch or (related.UOM.UnitOfMeasure = InCostUOM.UnitOfMeasure)))
			 	and    (InIgnoreStockless
			 	or      (not InStockless and not related.StocklessForCostDefaulting)
			 	or      (    InStockless and     related.StocklessForCostDefaulting))
			 	and    ((InVendor not entered or InVendor = related.Contract.Vendor)
			 	and     (LocalSkipVendorLocationMatching
			 	or       related.Contract.ApPoPurchaseFrom not entered
				or      (related.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.PurchaseFromLocation)
				or      (related.Contract.ApPoPurchaseFrom.VendorLocation       entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.VendorLocation))
		 		and 	(InVendorItem not entered or InVendorItem = related.VendorItem))
		 		and    (InItemType not entered or related.ItemType = DerivedContractItemType)
				and	   (not InSkipZeroCostContractLine or related.BaseCost entered))

		ContractLinesExistenceRel
			one-to-many relation to ContractLine
			Field Mapping uses ByCostDefaultingOrder
				related.ContractGroup			= InProcurementGroup
				related.ItemNumber				= InItem
				
		ContractLineMembersExistenceRel
			one-to-many relation to ContractLineMember
			Field Mapping uses ByAvailableItem
				related.ProcurementGroup		= InProcurementGroup
				related.ItemNumber				= InItem
		
		AvailableContractLinesWithMatchingPriorityRel
			one-to-many relation to ContractLine
			Field Mapping uses ByCostDefaultingOrder
				related.ContractGroup			= InProcurementGroup
				related.ItemNumber				= InItem
			Instance Selection
				where (((InContract not entered or (InContract = related.Contract))
				and    ((RetrievedPreferredContract not entered or related.Contract	= RetrievedPreferredContract) and (RetrievedPreferredManuf not entered or related.Manufacturer = RetrievedPreferredManuf)  and (RetrievedContractLine not entered or related.ContractLine = RetrievedContractLine)))
				and    related.Contract.PurchaseType = LocalContractType
				and   !related.Contract.CapitatedContract
				and 	(InDate >= related.EffectiveDate
				and 	(related.ExpirationDate not entered or InDate <= related.ExpirationDate))
			 	and 	(InCostUOM.UnitOfMeasure not entered or (not related.UsesUOMSMustMatch or (related.UOM.UnitOfMeasure = InCostUOM.UnitOfMeasure)))
			 	and    (InIgnoreStockless
			 	or      (not InStockless and not related.StocklessForCostDefaulting)
			 	or      (    InStockless and     related.StocklessForCostDefaulting))
			 	and    ((InVendor not entered or InVendor = related.Contract.Vendor)
			 	and     (LocalSkipVendorLocationMatching
			 	or       related.Contract.ApPoPurchaseFrom not entered
				or      (related.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.PurchaseFromLocation)
				or      (related.Contract.ApPoPurchaseFrom.VendorLocation       entered and InPurchaseFromLocation = related.Contract.ApPoPurchaseFrom.VendorLocation))
		 		and 	(InVendorItem not entered or InVendorItem = related.VendorItem))
		 		and    (LocalHighestPriority = related.Priority)
		 		and    not related.HasLineMembers
				and	   (not InSkipZeroCostContractLine or related.BaseCost entered))
		
        ItemLocationRel
            one-to-one relation to ItemLocation
            Field Mapping uses symbolic key
                related.Company           = InCompany
                related.InventoryLocation = InLocation
                related.Item              = InItem
		
		ContractRequestingLocationPurchaseFromRel
			one-to-many relation to ContractPurchaseFrom
			Field Mapping uses symbolic key
				related.ContractGroup												= LocalContractGroup
				related.Contract													= LocalContract
				related.ContractPurchaseFrom.ParticipantLocation.Company            = InCompany			
				related.ContractPurchaseFrom.ParticipantLocation.Location     		= blank
				related.ContractPurchaseFrom.ParticipantLocation.RequestingLocation = InRequestingLocation
				related.ContractPurchaseFrom.ParticipantLocation.PricingGroup 		= blank
			Instance Selection
				where (related.PayablesVendorLocationActive)
				
		ContractLocationPurchaseFromRel
			one-to-many relation to ContractPurchaseFrom
			Field Mapping uses symbolic key
				related.ContractGroup												= LocalContractGroup
				related.Contract													= LocalContract
				related.ContractPurchaseFrom.ParticipantLocation.Company            = InCompany			
				related.ContractPurchaseFrom.ParticipantLocation.Location     		= InLocation
				related.ContractPurchaseFrom.ParticipantLocation.RequestingLocation = blank
				related.ContractPurchaseFrom.ParticipantLocation.PricingGroup 		= blank
			Instance Selection
				where (related.PayablesVendorLocationActive)
				
		ContractCompanyPurchaseFromRel
			one-to-many relation to ContractPurchaseFrom
			Field Mapping uses symbolic key
				related.ContractGroup												= LocalContractGroup
				related.Contract													= LocalContract
				related.ContractPurchaseFrom.ParticipantLocation.Company            = InCompany			
				related.ContractPurchaseFrom.ParticipantLocation.Location     		= blank
				related.ContractPurchaseFrom.ParticipantLocation.RequestingLocation = blank
				related.ContractPurchaseFrom.ParticipantLocation.PricingGroup 		= blank
			Instance Selection
				where (related.PayablesVendorLocationActive)
		
		RecentlyCreatedPurchaseOrderLine
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses Set6
				related.Company				= InCompany
				related.Item				= InItem
				related.ShipToLocation		= InLocation
			Instance Selection
				where	((InVendor not entered or related.Vendor = InVendor)
				and		 not related.PurchaseOrder = PurchaseOrder
				and		(InItemType not entered
				or		(related.InventoriedOrNonstock and not InItemType.Service)
				or 		(related.ItemType.Special and InItemType.Special)
				or 		(related.ItemType.Service and InItemType.Service)))

		OutputVendorRel
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
                related.VendorGroup		= LocalVendorGroup
                related.Vendor 			= OutputVendor

		OutputPurchaseFromLocationRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
                related.VendorGroup		= LocalVendorGroup
                related.Vendor 			= OutputVendor
                related.VendorLocation	= OutputPurchaseFromLocation

		ContractCapitatedComponentGroupItemRel 
			one-to-many relation to ContractCapitatedComponentGroupItem 
			Field Mapping uses ByContractLine  
				related.ContractGroup 					= InContractGroup 
				related.Contract                    	= InContract 
				related.ComponentContractLine       	= InContractLine 	
		 		related.ContractLine 					= InCapitatedProcedureLine 						
				related.ContractCapitatedComponentGroup	= InCapitatedComponentGroup			

		ContractCapitatedComponentGroupCompanyRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByComponentLine  
				related.ContractGroup 						= InContractGroup 
				related.Contract                    		= InContract 
		 		related.ContractLine 						= InCapitatedProcedureLine 
				related.ContractCapitatedComponentGroup		= InCapitatedComponentGroup
				related.ComponentContractLine           	= InContractLine 	
				related.Company                             = InCompany

		ContractCapitatedComponentGroupLocationRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByComponentLine  
				related.ContractGroup 						= InContractGroup 
				related.Contract                    		= InContract 
		 		related.ContractLine 						= InCapitatedProcedureLine 
				related.ContractCapitatedComponentGroup		= InCapitatedComponentGroup
				related.ComponentContractLine           	= InContractLine 							
				related.Company                             = InCompany
				related.Location                            = InLocation 					

	Derived Fields

		DerivedContractItemType is a DerivedField
			type is Numeric size 1
			if (InItemType.Inventoried or InItemType.NonStock)
				return ContractLine.ItemType.Itemmast
			else
				if (InItemType.Special)
					return ContractLine.ItemType.Special
				else
					return ContractLine.ItemType.Service
		
		DoStocklessContracts is a DerivedField
			type is Boolean
			
			if (InDoDebug)
				display "DoStocklessContracts"
				
			if (InVendor entered)
				initialize LocalSkipVendorLocationMatching
			else
				LocalSkipVendorLocationMatching = true
			
			if (InStockless)
				Execute = DoContract
				
				if (LocalFoundCost)
					if (not DoOutput)
						Execute = DoOutput
				else
					if (InDoDebug)
						display "StocklessContractNotFound"
						display "ExitingDoStocklessContracts"
					return false
			else
				if (InDoDebug)
					display "RequestingLocationIsNotStockless"
					display "ExitingDoStocklessContracts"
				return false
				
			if (InDoDebug)
				display "ExitingDoStocklessContracts"
			
			return true
		
		DoConvertQuantity is a DerivedField		
			type is Boolean
			
			if (InDoDebug)
				display "DoConvertQuantity"
			
			initialize UnitOfMeasureEdit
			UnitOfMeasureEdit.UnitOfMeasure	= InQuantityUOM
			if (not UnitOfMeasureEdit.ValidForBuying)
				initialize UOMCalculation
   				UOMCalculation.InputUOM			= InQuantityUOM
				UOMCalculation.InputToUOM		= LocalContractLine.UOM.UnitOfMeasure
				UOMCalculation.InputQuantity	= InQuantity
				UOMCalculation.DoRounding		= false
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate	
   				LocalRemainder					= UOMCalculation.OutputQuantity
   				OutputQuantity					= LocalRemainder
   				OutputQuantityUOM				= LocalContractLine.UOM.UnitOfMeasure
   				OutputCostUOM					= LocalContractLine.UOM.UnitOfMeasure
   				LocalRemainder	= LocalRemainder - OutputQuantity 
   				if (LocalRemainder > 0)
   					OutputQuantity	+= 1
   			
   			if (InDoDebug)
				display "ExitingDoConvertQuantity"

		DoNoCharge is a DerivedField
			type is Boolean
			
			if (InDoDebug)
				display "DoNoCharge"
			
			if (InStockless)
				if (InDoDebug)
					display "InStockless-ExitingDoNoCharge"
				return false
			if (not InItemType.Inventoried)
				if (InDoDebug)
					display "ItemTypeIsNotInventoried-ExitingDoNoCharge"
				return false
			if (ItemLocationRel not exists)
				if (InDoDebug)
					display "ItemLocationDoesNotExist-ExitingDoNoCharge"
				return false
			if (not ItemLocationRel.NoCharge)
				if (InDoDebug)
					display "ItemLocationIsChargeable-ExitingDoNoCharge"
				return false
			LocalUnitCost	= 0
			OutputFoundCost	= 0
			LocalCostOption	= LocalCostOption.NoCharge
			LocalCostCode   = CostCode.Entered 
			LocalFoundCost  = true
			OutputNoCharge  = true
			
			if (InDoDebug)
				display "NoChargeFound-ExitingDoNoCharge"
			
			return true
			

		DoLastPO is a DerivedField
			type is Boolean
			
			if (InDoDebug)
				display "DoLastPO"
			
			if (InStockless)
				if (InDoDebug)
					display "InStockless-ExitingDoLastPO"
				return false
			if (first RecentlyCreatedPurchaseOrderLine exists)
				LocalUnitCost	= first RecentlyCreatedPurchaseOrderLine.VendorBuyUnitCost
				LocalFoundCost = true
				LocalCostUOM.UnitOfMeasure	= first RecentlyCreatedPurchaseOrderLine.EnteredBuyUOM
				LocalCurrencyCode	= first RecentlyCreatedPurchaseOrderLine.PurchaseOrder.Currency
				if (InContract not entered
				or  not LocalCostCode.Blanket)
					LocalCostCode	= LocalCostCode.LastPoCreated
				LocalCostOption	= first RecentlyCreatedPurchaseOrderLine.CostOption
				LocalVendor	= first RecentlyCreatedPurchaseOrderLine.Vendor
				if (InPurchaseFromLocation not entered)
					LocalPurchaseFromLocation	= first RecentlyCreatedPurchaseOrderLine.PurchaseFromLocation
				if (InDoDebug)
					display "FoundLastPO-ExitingDoLastPO"
			else			
				if (InDoDebug)
					display "NoLastPOFound-ExitingDoLastPO"
					
			return true

		DoLastCost is a DerivedField
			type is Boolean
			
			if (InDoDebug)
				display "DoLastCost"
			
			if (InStockless or InItemType.Special)
				if (InDoDebug)
					display "InStockless-ExitingDoLastCost"
				return false
			LocalUnitCost	= ItemLocationRel.LastReceiptCost
			OutputFoundCost	= ItemLocationRel.LastReceiptCost
			if (LocalUnitCost entered)
				LocalCostOption	= LocalCostOption.CostRequired
				LocalFoundCost = true
   				LocalCurrencyCode = InCompany.Currency
			LocalCostUOM.UnitOfMeasure	= ItemLocationRel.Item.StockUOM
			if (InCostUOM.UnitOfMeasure not entered)
				OutputFoundUOM	= LocalCostUOM.UnitOfMeasure
   			if ((InContract not entered
   			or  not LocalCostCode.Blanket)
   			and OutputFoundCost > 0)
   				LocalCostCode	= LocalCostCode.LastCost
   			
   			if (InDoDebug)
   				if (LocalFoundCost)
					display "FoundLastCost-ExitingDoLastCost"
				else
					display "NoLastCostFound-ExitingDoLastCost"	
   				
   			return true

		DoBlanket is a DerivedField
			type is Boolean
			
			if (LocalSkipContractRelatedLookup)
				return false
			
			if (InDoDebug)
				display "_"
				display "DoBlanket"
			
			if (InStockless)
				if (InDoDebug)
					display "InStockless-ExitingDoBlanket"
				return false
			if (NotEligibleForContractDefaulting)
				if (InDoDebug)
					display "NotEligibleForContractDefaulting-ExitingDoBlanket"
				return false
			if (InOverrideContract
			and ContractCostAllowedToOverride)
				if (UnitCostEnteredAndChanged)
					initialize InContract
					initialize InContractGroup
					initialize InPreference
					initialize OutputMfgContractTierInfo
				if (InDoDebug)
					display "InOverrideContractAndContractCostAllowedToOverride-ExitingDoBlanket"
				return false
			if (InSystem = "PO")
				if (InDoDebug)
					display "InSystemPO-ExitingDoBlanket"
				return false
			LocalContractType	= LocalContractType.Blanket
			Execute	= FindContractLine
			
			if (InDoDebug)
   				if (LocalFoundCost)
					display "FoundCostFromBlanket-ExitingDoBlanket"
				else
					display "NoCostFoundFromBlanket-ExitingDoBlanket"
				
			return true

		DoCatalog is a DerivedField
			type is Boolean
			
			if (LocalSkipContractRelatedLookup)
				return false

			if (InDoDebug)
				display "_"
				display "DoCatalog"
			
			if (InStockless)
				if (InDoDebug)
					display "InStockless-ExitingDoCatalog"
				return false
			if (NotEligibleForContractDefaulting)
				if (InDoDebug)
					display "NotEligibleForContractDefaulting-ExitingDoCatalog"
				return false
			LocalContractType	= LocalContractType.CatalogQuote
			Execute	= FindContractLine
			
			if (InDoDebug)
   				if (LocalFoundCost)
					display "FoundCostFromCatalog-ExitingDoCatalog"
				else
					display "NoCostFoundFromCatalog-ExitingDoCatalog"	
				
			return true

		DoContract is a DerivedField
			type is Boolean
			
			if (LocalSkipContractRelatedLookup)
				return false
			
			if (InDoDebug)
				display "_"
				display "DoContract"
			
			if (NotEligibleForContractDefaulting)
				if (InDoDebug)
					display "NotEligibleForContractDefaulting-ExitingDoContract"
				return false
			if (InOverrideContract
			and ContractCostAllowedToOverride)
				if (UnitCostEnteredAndChanged)
					initialize InContract
					initialize InContractGroup
					initialize InPreference
					initialize OutputMfgContractTierInfo
				if (InDoDebug)
					display "InOverrideContractAndContractCostAllowedToOverride-ExitingDoContract"
				return false

			LocalContractType	= LocalContractType.Contract
			Execute	= FindContractLine
				
			if (InDoDebug)
   				if (LocalFoundCost)
					display "FoundCostFromContract-ExitingDoContract"
				else
					display "NoCostFoundFromContract-ExitingDoContract"
			
			return true


		GetTierCost is a DerivedField
			type is Boolean
			
			if (InDoDebug)
				display "_"
				display "GetTierCost"
			
			initialize LocalTierPriority
			for each LowestTierRel
				if (InDoDebug)
					display "LowestTierRelExists"
				if (LocalTierPriority not entered)
					LocalTierPriority = each.Priority
				if (each.Priority != LocalTierPriority)
					end for each
				if ((each.NetCostOverride < LocalUnitCost)
				or	LocalUnitCost not entered)
					MemberView = each.ContractLineMember
					
					if (InDoDebug)
						display "MemberView:_<MemberView>"
						display "NetCostOverride:_<each.NetCostOverride>"
					
					OutputFoundCost				= each.NetCostOverride
					OutputUnitCost				= each.NetCostOverride
					LocalUnitCost				= each.NetCostOverride
					OriginalUnitCost			= each.NetCostOverride
					OriginalCostUOM				= each.UOM
					
					if (LocalUnitCost entered)
						LocalCostOption 		= CostOption.CostRequired
					else
						if (each.ContractLine.CostOption.VendorDetermined)
							LocalCostOption 	= CostOption.VendorDetermined
						else
							LocalCostOption 	= CostOption.NoCharge
					
					LocalContractGroup			= each.ContractGroup
					LocalContract				= each.Contract
					LocalContractLine			= each.ContractLine
					LocalTierPriority	 		= each.Priority
					LocalFoundCost 				= true
					
					initialize OutputPreference
					if (each.ContractLine.Contract.ApPoPurchaseFrom entered)
						if (each.ContractLine.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered)
							LocalPurchaseFromLocation	= each.ContractLine.Contract.ApPoPurchaseFrom.PurchaseFromLocation
						else
							LocalPurchaseFromLocation	= each.ContractLine.Contract.ApPoPurchaseFrom.VendorLocation
					if (LocalPurchaseFromLocation !entered)
						if (ContractRequestingLocationPurchaseFromRel exists)
							if (ContractRequestingLocationPurchaseFromRel.AllItemTypes.AllItemTypes
							or (ContractRequestingLocationPurchaseFromRel.AllItemTypes.SpecialsOnly
							and SpecialOrService))
								LocalPurchaseFromLocation = first ContractRequestingLocationPurchaseFromRel.PurchaseFrom
					if (LocalPurchaseFromLocation !entered)
						if (ContractLocationPurchaseFromRel exists)
							if (ContractLocationPurchaseFromRel.AllItemTypes.AllItemTypes
							or (ContractLocationPurchaseFromRel.AllItemTypes.SpecialsOnly
							and SpecialOrService))
								LocalPurchaseFromLocation = first ContractLocationPurchaseFromRel.PurchaseFrom
					if (LocalPurchaseFromLocation !entered)
						if (ContractCompanyPurchaseFromRel exists)
							if (ContractCompanyPurchaseFromRel.AllItemTypes.AllItemTypes
							or (ContractCompanyPurchaseFromRel.AllItemTypes.SpecialsOnly
							and SpecialOrService))
								LocalPurchaseFromLocation = first ContractCompanyPurchaseFromRel.PurchaseFrom
					LocalCostUOM	= each.UOM
					OutputFoundUOM	= each.UOM.UnitOfMeasure
					LocalVendorItem		= each.VendorItem
					if (each.Vendor entered)
						LocalVendor			= each.Vendor
					else 
						LocalVendor			= each.Contract.Vendor
					LocalTaxCode		= each.ContractLine.TaxCode
					LocalTaxable		= each.ContractLine.Taxable
					LocalMfgContractTierInfo	= each.MfgContractTierInfo.Tier
					LocalCurrencyCode	= each.Contract.CurrencyCode
					
			if (InDoDebug)
				display "LocalFoundCostFromGetTier:_<LocalFoundCost>"
				display "LocalUnitCost:_<LocalUnitCost>"
				display "LocalCostOption:_<LocalCostOption>"
				display "ExitingGetTierCost"		
					
			return true
	
	

		FindCostOnContractLine is a DerivedField
			type is Boolean
			
			if (LocalSkipContractRelatedLookup)
				return false

			if (InDoDebug)
				display "----------------------------------------"
				display "FindCostOnContractLine"
				display "----------------------------------------"
				display "LocalContractType:_<LocalContractType>"
				display "InContract.ContractType:_<InContract.ContractType.PurchaseType>"
				display "InCompany.ProcurementGroup:_<InProcurementGroup>"
				display "InItem:_<InItem>"
				display "InContract:_<InContract>"
				display "RetrievedPreferredContract:_<RetrievedPreferredContract>"
				display "RetrievedPreferredManuf:_<RetrievedPreferredManuf>"
				display "RetrievedContractLine:_<RetrievedContractLine>"
				display "LocalContractType:_<LocalContractType>"
				display "InCostUOM.UnitOfMeasure:_<InCostUOM.UnitOfMeasure>"
				display "InVendor:_<InVendor>"
				display "InVendorItem:_<InVendorItem>"
				display "InCompany:_<InCompany>"
				display "InRequestingCompany:_<InRequestingCompany>"
				display "InRequestingLocation:_<InRequestingLocation>"
				display "InLocation:_<InLocation>"
				display "InDate:_<InDate>"	
				display "LocalSkipVendorLocationMatching:<LocalSkipVendorLocationMatching>"	
				display "_"
			
			initialize LocalUnitCost
			initialize LocalCostUOM
			
			initialize LocalNormalPriority
			initialize LocalTierPriority
			initialize LocalHighestPriority



			for each AvailableContractLinesRel
				if (InDoDebug)
					display "AvailableContractLinesRelExists"
					display "Contract:<each.Contract>:_Line:<each.ContractLine>"
				
				initialize LocalHasContractParticipant
				initialize LocalContractParticipantMatch
				initialize SkipRecord
				
				for each each.ContractParticipantRels
					LocalHasContractParticipant			= true
					
					if ((InCompany = each.ContractParticipant.ParticipantLocation.Company and each.ContractParticipant.ParticipantLocation.RequestingLocation not entered
					and (each.ContractParticipant.ParticipantLocation.Location not entered or InLocation = each.ContractParticipant.ParticipantLocation.Location))
					or  (InRequestingCompany = each.ContractParticipant.ParticipantLocation.Company and InRequestingLocation entered and InRequestingLocation = each.ContractParticipant.ParticipantLocation.RequestingLocation)
					or  (each.ContractParticipant.ParticipantLocation.PricingGroup entered
					and (RequestingLocationRel.PricingGroup 		= each.ContractParticipant.ParticipantLocation.PricingGroup
					or 	 InLocation.PricingGroup 					= each.ContractParticipant.ParticipantLocation.PricingGroup
					or	 InCompany.InventoryCompanyRel.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup)))
						LocalContractParticipantMatch	= true
						if (InDoDebug)
							display "FoundMatchingParticipant1"
						end for each
				
				if (LocalHasContractParticipant)
					if (!LocalContractParticipantMatch)
						SkipRecord = true
				if (not SkipRecord)
					LocalNormalPriority = each.Priority
					end for each

			initialize LocalRequestingLocation
			initialize LocalLocation
			if (InRequestingLocation entered)
				LocalCompany			= InRequestingCompany
				LocalRequestingLocation = InRequestingLocation
				LocalLocation			= blank
				LocalPricingGroup		= blank
				if (InDoDebug)
					display "RequestingLocationSearch"
				if (LowestTierRel exists)
					if (InDoDebug)
						display "RequestingLocationTierFound!"
					LocalTierPriority 	= first LowestTierRel.Priority
					LocalCostCode 		= LocalCostCode.TierReqLocParticipant
				else
					if (InDoDebug)
						display "RequestingLocationTierNotFound"
					if (RequestingLocationRel.PricingGroup entered)
						LocalCompany			= blank
						LocalRequestingLocation = blank
						LocalLocation			= blank
						LocalPricingGroup		= RequestingLocationRel.PricingGroup
						if (LowestTierRel exists)
							if (InDoDebug)
								display "ReqLocPricingGroupTiersRelExistsFor:<LocalPricingGroup>"
							LocalTierPriority 	= first LowestTierRel.Priority
							LocalCostCode		= LocalCostCode.TierReqLocParticipant

			if (LocalTierPriority not entered
			and InLocation entered)
				LocalCompany			= InCompany
				LocalRequestingLocation = blank
				LocalLocation			= InLocation
				LocalPricingGroup		= blank
				if (InDoDebug)
					display "LocationSearch"
				if (LowestTierRel exists)
					if (InDoDebug)
						display "LocationTierFound!"
					LocalTierPriority 	= first LowestTierRel.Priority
					LocalCostCode		= LocalCostCode.TierIcLocationParticipant
				else
					if (InDoDebug)
						display "LTierNotFound"
					if (InLocation.PricingGroup entered)
						LocalCompany			= blank
						LocalRequestingLocation = blank
						LocalLocation			= blank
						LocalPricingGroup		= InLocation.PricingGroup
						if (LowestTierRel exists)
							if (InDoDebug)
								display "LocPricingGroupTiersRelExistsFor:<LocalPricingGroup>"
							LocalTierPriority 	= first LowestTierRel.Priority
							LocalCostCode 		= LocalCostCode.TierIcLocationParticipant

			if (LocalTierPriority not entered)
				LocalCompany			= InCompany
				LocalRequestingLocation = blank
				LocalLocation			= blank
				LocalPricingGroup		= blank
				if (InDoDebug)
					display "CompanyTierSearch"
				if (LowestTierRel exists)
					if (InDoDebug)
						display "CompanyTierFound!"
					LocalTierPriority 	= first LowestTierRel.Priority
					LocalCostCode		= LocalCostCode.TierCompanyParticipant
				else
					if (InDoDebug)
						display "CTierNotFound"
					if (InCompany.InventoryCompanyRel.PricingGroup entered)
						LocalCompany			= blank
						LocalRequestingLocation = blank
						LocalLocation			= blank
						LocalPricingGroup		= InCompany.InventoryCompanyRel.PricingGroup
						if (LowestTierRel exists)
							if (InDoDebug)
								display "CompanyPricingGroupTiersRelExistsFor:<LocalPricingGroup>"
							LocalTierPriority = first LowestTierRel.Priority
							LocalCostCode		= LocalCostCode.TierCompanyParticipant
			if (InDoDebug)
				display "NormalContractPriority:_<LocalNormalPriority>"
				display "TieredContractPriority:_<LocalTierPriority>"
				
			if  (LocalTierPriority entered 
            and (LocalNormalPriority not entered  
            or   LocalTierPriority <= LocalNormalPriority))
            	if (InDoDebug)
					display "UsingTieredCosts"
				LocalHighestPriority = LocalTierPriority
				initialize LocalTierUnitCost
				initialize LocalTierCostUOM
				Execute = GetTierCost
				if (InDoDebug)
					display "AfterGettingTierCost"
					display "LocalFoundCost:_<LocalFoundCost>"
					display "InItemType:_<InItemType>"
					display "LocalCostUOM:_<LocalCostUOM>"
					display "InCostUOM:_<InCostUOM>"
				if (LocalFoundCost)
					LocalTierUnitCost = LocalUnitCost
					LocalTierCostUOM  = LocalCostUOM
					
					if (LocalCostUOM = InCostUOM
					or  InItemType.Special)
						LocalLowestCost 				= LocalTierUnitCost
					else
						initialize UOMCalculation
						UOMCalculation.InputUOM			= LocalCostUOM
						UOMCalculation.InputToUOM		= InCostUOM
	        			UOMCalculation.InputUnitCost	= LocalUnitCost
						UOMCalculation.DoRounding		= false
						UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
						LocalLowestCost 				= UOMCalculation.OutputUnitCost
			else
				LocalHighestPriority = LocalNormalPriority
			
			if (InDoDebug)
				display "LocalLowestCost:_<LocalLowestCost>"
				display "AfterTierTest"
			
			initialize LocalFoundStandardCost
			if (!InCapitatedContract)
				for each AvailableContractLinesWithMatchingPriorityRel 


					LineView = each.ContractLine
					if (InDoDebug)
						display "AvailableContractLinesWithMatchingPriorityRelExists"
						display "LineView:_<LineView>"
					
					initialize LocalHasContractParticipant
					initialize LocalContractParticipantMatch
					initialize SkipRecord
					
					for each each.ContractParticipantRels
						LocalHasContractParticipant		= true
						
						if ((InCompany = each.ContractParticipant.ParticipantLocation.Company and each.ContractParticipant.ParticipantLocation.RequestingLocation not entered
						and (each.ContractParticipant.ParticipantLocation.Location not entered or InLocation = each.ContractParticipant.ParticipantLocation.Location))
						or  (InRequestingCompany = each.ContractParticipant.ParticipantLocation.Company and InRequestingLocation entered and InRequestingLocation = each.ContractParticipant.ParticipantLocation.RequestingLocation)
						or  (each.ContractParticipant.ParticipantLocation.PricingGroup entered
						and (RequestingLocationRel.PricingGroup 		= each.ContractParticipant.ParticipantLocation.PricingGroup
						or 	 InLocation.PricingGroup 					= each.ContractParticipant.ParticipantLocation.PricingGroup
						or	 InCompany.InventoryCompanyRel.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup)))
							if (InDoDebug)
								display "FoundMatchingParticipant2"
							LocalContractParticipantMatch	= true
					
					if (LocalHasContractParticipant)
						if (!LocalContractParticipantMatch)
							SkipRecord = true
					if (not SkipRecord)
						LocalUnitCost	= each.BaseCost
						OutputFoundCost	= each.BaseCost
						LocalCostUOM.UnitOfMeasure	= each.UOM
						OutputFoundUOM	= each.UOM
						
						initialize LocalValidForLinePriceBreak
						
						if (InIsConsignment)
							if (each.ConsignmentLinePriceBreakOn.Quantity)
								BreaksOn = BreaksOn.Quantity
								if (each.ConsignmentQuantityOrdered > 0)
									LocalValidForLinePriceBreak = true
							else
								BreaksOn = BreaksOn.Amount
						else
							if (each.LinePriceBreakOn.Quantity)
								BreaksOn = BreaksOn.Quantity
								if (each.Contract.LineLevelBreaks.OrderTotals
								or (each.Contract.LineLevelBreaks.ContractTotals and each.QuantityOrdered > 0))
									LocalValidForLinePriceBreak = true
							else
								BreaksOn = BreaksOn.Amount

						if (BreaksOn.Quantity)
							if (each.Contract.LineLevelBreaks.ContractTotals)
								if (InIsConsignment)
									CompareQuantity = each.ConsignmentQuantityOrdered
								else
									CompareQuantity = each.QuantityOrdered
							else
								if (LocalValidForLinePriceBreak) 
									if (InQuantityUOM not entered
									or  InQuantityUOM	= each.UOM)
										CompareQuantity	= InQuantity
									else
										initialize UOMCalculation
										UOMCalculation.InputUOM			= InQuantityUOM
										UOMCalculation.InputQuantity	= InQuantity
										UOMCalculation.InputToUOM		= each.UOM
										UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
										CompareQuantity	= UOMCalculation.OutputQuantity
							CompareValue = CompareQuantity
						else
							if (each.Contract.LineLevelBreaks.ContractTotals)
								if (InIsConsignment)
									CompareAmount = each.ConsignmentAmountOrdered
								else
									CompareAmount = each.AmountOrdered
							CompareValue = CompareAmount
							
						if (ConsignmentPriceBreaks)
							for each each.ConsignmentPriceBreak.QuantityPercentPrice
								if (each.Quantity entered
								and CompareValue >= each.Quantity)
									LocalLineBreakQuantityAmount	= each.Quantity
									LocalLineBreakPercent			= each.UnitPercent
									LocalLineBreakCost				= each.UnitPrice
						else
							if (LinePriceBreaks)
								for each each.PriceBreak.QuantityPercentPrice
									if (each.Quantity entered
									and CompareValue >= each.Quantity)
										LocalLineBreakQuantityAmount	= each.Quantity
										LocalLineBreakPercent			= each.UnitPercent
										LocalLineBreakCost				= each.UnitPrice
						if (LocalLineBreakCost > 0)
							LocalUnitCost	= LocalLineBreakCost
							LocalBreakLevel	= LocalBreakLevel.Line
						else
							if (LocalLineBreakPercent > 0)
								LocalPercent	= LocalLineBreakPercent
								LocalCostDifference	= LocalUnitCost * LocalPercent
								if (each.PricingMarkupOrDiscount.Markup)
									LocalUnitCost	+= LocalCostDifference
								else
									LocalUnitCost	-= LocalCostDifference
								LocalBreakLevel	= LocalBreakLevel.Line
							else
								initialize LocalBreakAmount
								initialize LocalBreakPercent
								
								LocalContractGroupForContractPricing = each.ContractGroup
								LocalContractForContractPricing = each.Contract
								
								for each ContractPricingRel
									if (each.PriceBreakAmount1 entered
									and each.AmountOrdered >= each.PriceBreakAmount1)
										LocalBreakAmount	= each.PriceBreakAmount1
										LocalBreakPercent	= each.PriceBreakPercent1
									
									if (each.PriceBreakAmount2 entered
									and each.AmountOrdered >= each.PriceBreakAmount2)
										LocalBreakAmount	= each.PriceBreakAmount2
										LocalBreakPercent	= each.PriceBreakPercent2
									
									if (each.PriceBreakAmount3 entered
									and each.AmountOrdered >= each.PriceBreakAmount3)
										LocalBreakAmount	= each.PriceBreakAmount3
										LocalBreakPercent	= each.PriceBreakPercent3
									
									if (each.PriceBreakAmount4 entered
									and each.AmountOrdered >= each.PriceBreakAmount4)
										LocalBreakAmount	= each.PriceBreakAmount4
										LocalBreakPercent	= each.PriceBreakPercent4
									
									if (each.PriceBreakAmount5 entered
									and each.AmountOrdered >= each.PriceBreakAmount5)
										LocalBreakAmount	= each.PriceBreakAmount5
										LocalBreakPercent	= each.PriceBreakPercent5
									
									if (LocalBreakPercent not entered)
										LocalBreakPercent	= each.PricingBasePercent
									
									if (LocalBreakPercent > 0)
										LocalPercent	= LocalBreakPercent
										LocalCostDifference	= LocalUnitCost * LocalPercent
										
										if (each.PricingMarkupDiscount.Markup)
											LocalUnitCost	+= LocalCostDifference
										else
											LocalUnitCost	-= LocalCostDifference
									
									display "EXITING:_for_each_ContractPricingRel"
									end for each 
								
								LocalBreakLevel	= LocalBreakLevel.Header
						LocalUnitCostInContractUOM  = LocalUnitCost
						if (UOMsCanBeConverted)
							if (InCostUOM.UnitOfMeasure entered
							and InCostUOM.UnitOfMeasure != each.UOM.UnitOfMeasure)
								initialize UOMCalculation
								UOMCalculation.InputUOM							= each.UOM
								UOMCalculation.InputToUOM						= InCostUOM
								UOMCalculation.InputUnitCost					= LocalUnitCost
								UOMCalculation.DoRounding						= false
								UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate	
								LocalUnitCost									= UOMCalculation.OutputUnitCost
						if (LocalLowestCost = 0
						or (LocalUnitCost < LocalLowestCost))
							if (LocalTierPriority entered)
								initialize LocalTierPriority
								initialize LocalMfgContractTierInfo
								initialize LocalCostCode
							OriginalUnitCost		= LocalUnitCostInContractUOM 
							OriginalCostUOM			= each.UOM
							LocalLowestCost			= LocalUnitCost
							LocalContractLine		= each.ContractLine
							LocalContract			= each.Contract
							LocalContractGroup		= each.Contract.ContractGroup
							LocalVendorItem			= each.VendorItem
							LocalVendor				= each.Contract.Vendor
							if (each.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered)
								LocalPurchaseFromLocation	= each.Contract.ApPoPurchaseFrom.PurchaseFromLocation
							else
								LocalPurchaseFromLocation	= each.Contract.ApPoPurchaseFrom.VendorLocation
							if (LocalPurchaseFromLocation !entered)
								if (ContractRequestingLocationPurchaseFromRel exists)
									if (ContractRequestingLocationPurchaseFromRel.AllItemTypes.AllItemTypes
									or (ContractRequestingLocationPurchaseFromRel.AllItemTypes.SpecialsOnly
									and SpecialOrService))
										LocalPurchaseFromLocation = first ContractRequestingLocationPurchaseFromRel.PurchaseFrom
							if (LocalPurchaseFromLocation !entered)
								if (ContractLocationPurchaseFromRel exists)
									if (ContractLocationPurchaseFromRel.AllItemTypes.AllItemTypes
									or (ContractLocationPurchaseFromRel.AllItemTypes.SpecialsOnly
									and SpecialOrService))
										LocalPurchaseFromLocation = first ContractLocationPurchaseFromRel.PurchaseFrom
							if (LocalPurchaseFromLocation !entered)
								if (ContractCompanyPurchaseFromRel exists)
									if (ContractCompanyPurchaseFromRel.AllItemTypes.AllItemTypes
									or (ContractCompanyPurchaseFromRel.AllItemTypes.SpecialsOnly
									and SpecialOrService))
										LocalPurchaseFromLocation = first ContractCompanyPurchaseFromRel.PurchaseFrom
							LocalTaxCode		= each.TaxCode
							LocalTaxable		= each.Taxable
							LocalCostOption		= each.CostOption
							if (each.ItemType.Service)
								LocalOverrideUOM 	= true
								LocalServiceCode	= each.ServiceCode
							LocalDescription	= each.ItemDescription
							LocalCurrencyCode	= each.Contract.CurrencyCode
							LocalFoundCost = true
							LocalFoundStandardCost = true
			
			else 
			if (InCapitatedContract)
				if (InCapitatedProcedureLevel > 0
				and InCapitatedProcedureLine = 0)
					if (InCapitatedProcedureLevel = 1)
						LocalLowestCost = InputContractLineRel.BaseCost 
					else 
					if (InCapitatedProcedureLevel = 2)
						LocalLowestCost = InputContractLineRel.RevisionProcedureCost
				if (InCapitatedComponentGroup entered
				and InCostOption != 2)
					if (InCapitatedProcedureLevel = 1)
						if (ContractCapitatedComponentGroupLocationRel exists)
							LocalLowestCost = first ContractCapitatedComponentGroupLocationRel.PrimaryFinalCost
						else 
						if (ContractCapitatedComponentGroupCompanyRel exists)
							LocalLowestCost = first ContractCapitatedComponentGroupCompanyRel.PrimaryFinalCost
						else
							LocalLowestCost = first ContractCapitatedComponentGroupItemRel.PrimaryFinalCost 
					else 
					if (InCapitatedProcedureLevel = 2)
						if (ContractCapitatedComponentGroupLocationRel exists)
							LocalLowestCost = first ContractCapitatedComponentGroupLocationRel.RevisionFinalCost
						else 
						if (ContractCapitatedComponentGroupCompanyRel exists)
							LocalLowestCost = first ContractCapitatedComponentGroupCompanyRel.RevisionFinalCost
						else
							LocalLowestCost = first ContractCapitatedComponentGroupItemRel.RevisionFinalCost 

			if (LocalFoundCost and not LocalFoundStandardCost)
				LocalUnitCost = LocalTierUnitCost
				LocalCostUOM  = LocalTierCostUOM
				Execute = DoOutput
				if (InDoDebug)
					display "ExitingFindCostOnContractLineAfterDoOutput"
				return
			
			LocalUnitCost = LocalLowestCost
			LocalCostUOM  = InCostUOM
			
			
			if (InDoUpdates 
			and ContractLineIsFound
			and LocalUnitCost != OutputContractLineRel.CurrentNetCost)
				if (InDoDebug)
					display "WillUpdateFoundContractLine"
				invoke FastUpdateCosts OutputContractLineRel
					invoked.NewCost    = LocalUnitCostInContractUOM
					invoked.NewPercent = LocalPercent
			
			if (InContract.PurchaseType.Blanket		
			and InContract.AllowReferenceOfItemsNotOnContract)
				LocalCostCode = LocalCostCode.Blanket
			
			if (LocalFoundCost
			and LocalCostCode not entered)
				if (LocalContractType.Contract)
					LocalCostCode	= LocalCostCode.Contract
				else
					if (LocalContractType.Blanket)
						LocalCostCode = LocalCostCode.Blanket
					else
						if (LocalContractType.CatalogQuote)
							LocalCostCode	= LocalCostCode.CatalogQuote
			
			if (InDoDebug)
				display "ExitingFindCostOnContractLine"		
					
			return true
	
		FindPreferredContractPricing is a DerivedField 
			type is Boolean 
			
			if (LocalSkipContractRelatedLookup)
				return false
				
			if (InDoDebug)
				display "_"
				display "FindPreferredContractPricing"
			
			
			initialize LocalPreferredItem
			initialize LocalPreferredVendorItem
			
			if (InDoDebug)
				display "TryingToFindAPreferredContract"
				display "------------------------------------------"
				display "InVendorItem:_<InVendorItem>"
				display "InCompany:_<InCompany>"
				display "InRequestingCompany:_<InRequestingCompany>"
				display "InRequestingLocation:_<InRequestingLocation>"
				display "InLocation:_<InLocation>"
				display "InItem:_<InItem>"
				display "------------------------------------------"
				display "RLocSearch"

			LocalPreferredItem 			= InItem
			LocalPreferredVendorItem 	= InVendorItem
			
			if (LocalRequestingLocation entered)
				if (InDoDebug)
					display "RequestingLocationPreferredSearch"
				LocalRequestingLocation 	= InRequestingLocation
				LocalLocation				= blank
				LocalCompany				= InCompany
				LocalPricingGroup			= blank
				if (ContractPreferredManufacturerRel exists)
					if (InDoDebug)
						display "FoundPreferredRLoc!"
					LocalCostCode			= LocalCostCode.TierReqLocParticipant
				else
				if (RequestingLocationRel.PricingGroup entered)
					if (InDoDebug)
						display "LocationPreferredPricingGroupSearch"
					LocalRequestingLocation = blank
					LocalLocation			= blank
					LocalCompany			= blank
					LocalPricingGroup		= RequestingLocationRel.PricingGroup
					if (ContractPreferredManufacturerRel exists)
						LocalCostCode		= LocalCostCode.TierReqLocParticipant
			if (LocalCostCode not entered
			and InLocation entered)
				if (InDoDebug)
					display "LocationPreferredSearch"
				LocalRequestingLocation 	= blank
				LocalLocation				= InLocation
				LocalCompany				= InCompany
				LocalPricingGroup			= blank
				if (ContractPreferredManufacturerRel exists)
					if (InDoDebug)
						display "FoundPreferredLocation!"
					LocalCostCode			= LocalCostCode.TierIcLocationParticipant
				else
				if (InLocation.PricingGroup entered)
					if (InDoDebug)
						display "LocationPreferredPricingGroupSearch"
					LocalRequestingLocation = blank
					LocalLocation 			= blank
					LocalCompany			= blank
					LocalPricingGroup		= InLocation.PricingGroup
					if (ContractPreferredManufacturerRel exists)
						LocalCostCode		= LocalCostCode.TierReqLocParticipant
			if (LocalCostCode not entered)
				if (InDoDebug)
					display "CompanyPreferredSSearch"
				LocalRequestingLocation		= blank
				LocalLocation				= blank
				LocalCompany				= InCompany
				LocalPricingGroup			= blank
				if (ContractPreferredManufacturerRel exists)
					if (InDoDebug)	
						display "FoundCompany!"
					LocalCostCode			= LocalCostCode.TierCompanyParticipant
				else
				if (InCompany.InventoryCompanyRel.PricingGroup entered)
					if (InDoDebug)	
						display "LocationPreferredPricingGroupSearch"
					LocalRequestingLocation	= blank
					LocalLocation			= blank
					LocalCompany			= blank
					LocalPricingGroup		= InCompany.InventoryCompanyRel.PricingGroup
					if (ContractPreferredManufacturerRel exists)
						LocalCostCode		= LocalCostCode.TierReqLocParticipant
			if (LocalCostCode not entered)
				if (InDoDebug)	
					display "NotPreferredInAnyCase"
				return false
			
			initialize LocalCostCode
				
			if (first ContractPreferredManufacturerRel.Contract.OnHold)
				if (InDoDebug)
					display "PreferredContractOnHold-ExitingFindPreferredContractPricing"
				return false
			
			RetrievedPreferredContract 	= first ContractPreferredManufacturerRel.Contract
			LocalContractIsPreferred	= first ContractPreferredManufacturerRel.Contract.PreferredContract
			
			if (InManufacturerCode not entered
			or (InManufacturerCode 			= first ContractPreferredManufacturerRel.ManufacturerCode.ManufacturerCode
			and	InManufacturerDivision 		= first ContractPreferredManufacturerRel.ManufacturerCode.ManufacturerDivision))
				RetrievedPreferredManuf 	= first ContractPreferredManufacturerRel.ManufacturerCode 
			
			if (LocalContractType not entered)
				LocalContractType			= first ContractPreferredManufacturerRel.Contract.PurchaseType
			
			if (AvailableContractLinesRel exists or LowestTierRel exists)
				Execute = FindCostOnContractLine
				if (InDoDebug)
					display "AvailablePreferredContractLineFound"
					display "FindingCostFromPreferredContract"
					display "LocalCostCode:_<LocalCostCode>"
					display "LocalFoundCost:_<LocalFoundCost>"
			
			if (LocalFoundCost)
				if (RetrievedPreferredContract entered and LocalContractIsPreferred)
					if (RetrievedPreferredManuf entered)
						LocalPreference = LocalPreference.ManufacturerAndContract
					else
						LocalPreference = LocalPreference.Contract
				else 
					if (RetrievedPreferredManuf entered)
						LocalPreference = LocalPreference.Manufacturer
			else
				initialize RetrievedPreferredContract
				initialize RetrievedPreferredManuf
				initialize RetrievedContractLine
						
			if (InDoDebug)
				display "FoundCostFromPreferred:_<LocalFoundCost>"
				display "ExitingFindPreferredContractPricing"
			
			return true

		FindContractLine is a DerivedField
			type is Boolean
			
			if (LocalSkipContractRelatedLookup)
				return false

			if (InDoDebug)
				display "FindContractLine"
			
			initialize LocalUnitCost
			InContractType 	= LocalContractType
			InContractGroup	= InProcurementGroup
			
			if (InStockless)
				if (OverrideContractWithCost)
					if (RequisitionOverrideCost
					or  RequesterOverride)
						return false
			else
				Execute	= FindPreferredContractPricing
				if (LocalFoundCost)
					return true 
			
			initialize LocalContractGroup
			initialize LocalContract
			initialize LocalContractLine
			initialize LocalVendor
			initialize LocalPurchaseFromLocation
			initialize LocalVendorItem
			initialize LocalLowestCost
			initialize LocalTaxable
			initialize LocalTaxCode
			
			
			Execute = FindCostOnContractLine
			
			if (InDoDebug)
				display "ExitingFindContractLine"
			
			return true
						
		DoEdits	is a DerivedField
			type is Boolean
			
			if (InDoDebug)
				display "DoEdits"

			if (InVendor entered)
				initialize LocalSkipVendorLocationMatching
			else
				LocalSkipVendorLocationMatching = true
			
			if (InUnitCostFromRqAndPunchout)
				LocalCostCode	= LocalCostCode.Punchout 
				Execute	= DoOutput
				return true

			if (InContract not entered)
				LocalOrderNumber = 0
				
				if (InDoDebug)
					display "InContractNotEntered"
				
				for each OrderTable.Sequence
					if  (LocalFoundCost)
						if (InDoDebug)	
							display "FoundCost:_<LocalCostCode>"
							display "EndingLoopForCostDefaulting"
						end for each
					if (InDoDebug)
						display "LoopingThroughOrderTable.IndexAt:_<each>"
					if  (not InDoNotIgnoreNoCharge
					and (InCostOption.NoCharge
					or   InCostOption.VendorDetermined))
						display "EndingLoopForCostDefaultingForCostOption<InCostOption>"
						end for each	
					if (each entered)
						if (each = DefaultingSequence.Contract)
							Execute	= DoContract
						else
							if (each = DefaultingSequence.CatalogQuote)
								Execute	= DoCatalog
							else	
								if (each = DefaultingSequence.Blanket)
									Execute	= DoBlanket
								else
									if (each = DefaultingSequence.LastCost)
										Execute	= DoLastCost
									else
										if (each = DefaultingSequence.LastPO)
											Execute	= DoLastPO
										else
											if (each = DefaultingSequence.NoCharge)
												Execute	= DoNoCharge
			else
			
				if (InDoDebug)
					display "InContractEntered"
			
				LocalContractType = InContract.PurchaseType
				Execute	= FindContractLine
				
				if (EligibleForNonContractDefaulting)
					for each OrderTable.Sequence
						if (LocalUnitCost entered
						or  LocalCostOptionCannotBeEntered)
							end for each
						if (each entered)
							if (each = DefaultingSequence.LastCost)
								Execute	= DoLastCost
							else
								if (each = DefaultingSequence.LastPO)
									Execute	= DoLastPO
								else
									if (each = DefaultingSequence.NoCharge)
										Execute	= DoNoCharge
			if (LocalCostOption not entered)
				LocalCostOption	= InCostOption
			Execute	= DoOutput
			
			if (InDoDebug)
				display "ExitingDoEdits"
			
			return true
			
		DoOutput is a DerivedField
			type is Boolean

			if (InDoDebug)
				display "_"
				display "DoOutput"

			if (LocalPreference entered)
				OutputPreference = LocalPreference
			else
				OutputPreference = InPreference
			if (LocalCostCode not entered)
				if (not InStockless
				or (InUnitCost changed))
					OutputCostCode	= OutputCostCode.Entered
			else
				OutputCostCode = LocalCostCode
			if (LocalContract not entered)
				OutputContract		= InContract
			else
				OutputContract		= LocalContract
			if (LocalContractGroup not entered)
				OutputContractGroup	= InContractGroup
			else
				OutputContractGroup	= LocalContractGroup
			if (LocalVendorItem not entered)
				OutputVendorItem	= InVendorItem
			else
				OutputVendorItem	= LocalVendorItem
			if (InCompany entered)
				LocalVendorGroup = InCompany.ProcurementGroup
			else
				if (InContractGroup entered)
					LocalVendorGroup = InContractGroup
				else
					if (InProcurementGroup entered)
						LocalVendorGroup = InProcurementGroup

			if (LocalVendor not entered)
				OutputVendor		= InVendor
			else
				OutputVendor		= LocalVendor
			OutputVendorName 		= OutputVendorRel.VendorName
			if (InPurchaseFromLocation entered)
				OutputPurchaseFromLocation	= InPurchaseFromLocation
			else
				OutputPurchaseFromLocation	= LocalPurchaseFromLocation
			OutputPurchaseFromLocationName 	= OutputPurchaseFromLocationRel.VendorName
			if (LocalCostOption.NoCharge)
				initialize OutputUnitCost
				OutputCostOption	= OutputCostOption.NoCharge
			else
				if (LocalCostOption.VendorDetermined)
					OutputCostOption	= OutputCostOption.VendorDetermined
					if (LastCostOrPO
					and not InOverrideLastCostOrLastPO
					or (ContractOrBlanketOrCatalogQuoteOrStanding)
					and not InOverrideContract)
						OutputUnitCost	= LocalUnitCost
					else
						if (InUnitCost entered)
							OutputUnitCost	= InUnitCost
						else
							initialize OutputUnitCost
				else
					if (LocalUnitCost not entered)
						OutputUnitCost		= InUnitCost
						OutputCostOption	= OutputCostOption.CostRequired

						if (LocalCostCode.Punchout
						and OutputUnitCost not entered
						or InCostOption.NoCharge)
							OutputCostOption	= OutputCostOption.NoCharge
					else
						OutputUnitCost		= LocalUnitCost
						OutputCostOption	= OutputCostOption.CostRequired
			
			if (LocalOverrideUOM) 
				OutputCostUOM	= OriginalCostUOM.UnitOfMeasure
			else
				OutputCostUOM	= InCostUOM.UnitOfMeasure
			
			if (LocalOverrideUOM
			and LocalQuantityUOM entered
			and InCostUOM.UnitOfMeasure != OutputCostUOM)
				OutputQuantity		= LocalQuantity
				OutputQuantityUOM	= LocalQuantityUOM
			else
				OutputQuantity		= InQuantity
				OutputQuantityUOM	= InQuantityUOM
			if (InSystem = "RQ"
			and InStockless
			and InContract.Stockless
			and OutputCostCode.Contract
			and InQuantityUOM entered)
				if (InItem.NumberOfDecimalsQuantity.0Decimals)
					Execute	= DoConvertQuantity
				else
					initialize UnitOfMeasureEdit
					UnitOfMeasureEdit.UnitOfMeasure	= OutputQuantityUOM
					if (!UnitOfMeasureEdit.ValidForBuying
					and LocalCostUOM.UnitOfMeasure entered)
						UOMCalculation.InputUOM			= OutputQuantityUOM
						UOMCalculation.InputToUOM		= LocalCostUOM
						UOMCalculation.InputQuantity	= OutputQuantity
						UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
						OutputQuantityUOM				= LocalCostUOM.UnitOfMeasure
						OutputCostUOM					= LocalCostUOM.UnitOfMeasure
						OutputQuantity					= UOMCalculation.OutputQuantity
			if (InSystem = "RQ"
			and InQuantityUOM not entered
			and LocalQuantityUOM entered)
				OutputQuantityUOM	= LocalQuantityUOM
				if (LocalQuantity entered)
					OutputQuantity	= LocalQuantity
			if  (InSystem = "PO"
			and  HasItemmast
			and  InContract.UOMSMustMatch
			and (OutputContract = InContract)
			and  OutputContract entered
			and  not LocalOverrideUOM
			and  InCostUOM.UnitOfMeasure not entered
			and  InItem.DefaultBuyUOM entered)
				OutputCostUOM	= InItem.DefaultBuyUOM
			
			initialize UOMCalculation
			if (UOMsCanBeConverted) 
				if (InCostUOM.UnitOfMeasure entered)
					if (OutputContractRel.Contract.UseContractUOM and not InBypassUseContractUOM)
						OutputCostUOM 	= OriginalCostUOM
						OutputUnitCost	= OriginalUnitCost
						if (not InBypassQuantityConversion
						and InCostUOM not = OriginalCostUOM)
							initialize UOMCalculation
							UOMCalculation.InputUOM 			= InCostUOM
							UOMCalculation.InputToUOM 			= OriginalCostUOM
							UOMCalculation.Method 				= UOMCalculation.Method.ConvertToAlternate
							UOMCalculation.InputQuantity 		= OutputQuantity
							if (InItem.NumberOfDecimalsQuantity.0Decimals)
								UOMCalculation.ValidateDecimal	 = true
								UOMCalculation.LocalErrorMessage = ConvertErrorMessageContractUOM
							else
								UOMCalculation.DoRounding		= true
							OutputQuantity 						= UOMCalculation.OutputQuantity		

					else
						if (LocalUnitCost entered and LocalCostUOM entered)
							if (InCostUOM != LocalCostUOM)
								UOMCalculation.InputUOM.UnitOfMeasure		= LocalCostUOM.UnitOfMeasure
								UOMCalculation.InputUnitCost				= LocalUnitCost
								UOMCalculation.InputToUOM.UnitOfMeasure		= InCostUOM.UnitOfMeasure
								UOMCalculation.DoRounding					= false
								UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
								OutputUnitCost 								= UOMCalculation.OutputUnitCost
								OutputCostUOM 								= InCostUOM
							else
								OutputUnitCost	= LocalUnitCost
								OutputCostUOM	= LocalCostUOM
					
			if (OutputCostCode.StrategicSourcing
			and OutputUnitCost entered
			and InRequisitionCurrencyCode entered)
				LocalCurrencyCode	= InRequisitionCurrencyCode
			if (OutputCostCode.Entered
			and OutputUnitCost entered
			and InRequisitionCurrencyCode entered)
				LocalCurrencyCode	= InRequisitionCurrencyCode
			RoundedValue.RoundInput	= OutputUnitCost
			RoundedValue.RoundTo	= OutputUnitCost
			if (LocalItemType not entered)
				OutputItemType	= InItemType
			else
				OutputItemType	= LocalItemType
			OutputDescription	= LocalDescription
			OutputServiceCode	= LocalServiceCode
			OutputMatchUOM		= LocalMatchUOM
			OutputOverrideUOM	= LocalOverrideUOM
			if (LocalTaxable not entered)
				OutputTaxable	= InTaxable
			else
				OutputTaxable	= LocalTaxable
			if (LocalTaxCode not entered)
				OutputTaxCode	= InTaxCode
			else
				OutputTaxCode	= LocalTaxCode
			OutputContractLine	= LocalContractLine
			OutputMfgContractTierInfo	= LocalMfgContractTierInfo
			
			if (LocalCurrencyCode entered)
				OutputCurrencyCode = LocalCurrencyCode
			
			if (InDoDebug)	
				display "BeforeInConvertCurrency"
				display "InCurrencyCode:<InCurrencyCode>"
				display "LocalCurrencyCode:<LocalCurrencyCode>"
				display "InRequisitionCurrencyCode:_<InRequisitionCurrencyCode>"
				display "OutputUnitCost:_<OutputUnitCost>"
				display "InSystem:<InSystem>"
				display "InDoNotConvertCurr:<InDoNotConvertCurrency>"
			
			if (LocalCurrencyCode != InCurrencyCode 	
			and InCurrencyCode entered
			and LocalCurrencyCode entered
			and InSystem != "RQ"
			and not InDoNotConvertCurrency)
				if (InDoDebug)
					display "InConvertCurrency"
				initialize LocalCurrencyExchange
				LocalFromCurrency			= LocalCurrencyCode
				LocalExchangeDate			= InDate
				LocalTransactionAmount		= OutputUnitCost
				LocalToCurrency				= InCurrencyCode
				OutputUnitCost				= LocalCurrencyExchange.OutputCurrencyAmount
				if (InDoDebug)
					display "ConvertedOutputUnitCost:_<OutputUnitCost>"
					display "ExitingCurrencyConversion"
			
			if (InDoDebug)	
				display "***************************"
				display "OutputFoundCost:_<OutputUnitCost>"
				display "OutputContract:_<OutputContract>"
				display "OutputContractLine:_<OutputContractLine>"
				display "OutputCostCode:_<OutputCostCode>"
				display "OutputCostOption:_<OutputCostOption>"
				display "OutputCostUOM:_<OutputCostUOM>"
				display "OutputVendor:<OutputVendor>"
				display "OutputPurchFrom:<OutputPurchaseFromLocation>"
				display "ExitingDoOutput"
				display "***************************"
			return true

		ConvertErrorMessageContractUOM is a MessageField 
			"CannotOrderPartialPurchaseUOM,UseContractLineUOM:<OriginalCostUOM>"
	
		DefaultUnitCost is a DerivedField
			type is Boolean
			
			if (InDoDebug)	
				display "----------------------------------------"
				display "ProcurementCostDefault:_DefaultUnitCost"
				display "----------------------------------------"
				display "StocklessSearch:_<InStockless>"
			if (InCostUOM.UnitOfMeasure not entered)
				InCostUOM.UnitOfMeasure 	= InQuantityUOM
			LocalCostOption				= InCostOption
			LocalDescription			= InDescription
			LocalServiceCode			= InServiceCode
			LocalMfgContractTierInfo	= InTier
			
			if (InDate not entered)
				InDate = current date
			if (Requisition entered)
				InOverrideLastCostOrLastPO = Requisition.Requester.OverrideLastPOLastCost
				InOverrideContract = Requisition.Requester.OverrideContractCost
				InRequesterOverrideAllowed = Requisition.Requester.ManualOverrideAllowed
				InSystem	= "RQ"
				
			if (PurchaseOrder entered)
				InCurrencyCode	= PurchaseOrder.Currency
				InOverrideLastCostOrLastPO	= PurchaseOrder.Buyer.OverrideLastPOLastCost
				InOverrideContract	= PurchaseOrder.Buyer.OverrideContractCost
				InRequesterOverrideAllowed	= PurchaseOrder.Buyer.ManualOverrideAllowed
				InSystem	= "PO"

			if (ItemLocationRel.Consignment
			or (ItemLocationRel not exists and InItem.Consignment))			
				InIsConsignment = true
			
			if (InItemType.Service)
				if (InContractLine entered and InputContractLineRel exists)
					if (InDoDebug)
						display "FindingContractLineUsingInContractLineForServiceItem"
					
					LineView = InputContractLineRel.ContractLine
					if (InDoDebug)
						display "LineView:_<LineView>"
						
					initialize LocalHasContractParticipant
					initialize LocalContractParticipantMatch
					
					for each InputContractLineRel.ContractParticipantRels
						LocalHasContractParticipant = true
						if (InDoDebug)
							display "FoundMatchingParticipant"
						
						if ((InCompany = each.ContractParticipant.ParticipantLocation.Company and each.ContractParticipant.ParticipantLocation.RequestingLocation not entered
						and (each.ContractParticipant.ParticipantLocation.Location not entered or InLocation = each.ContractParticipant.ParticipantLocation.Location))
						or  (InRequestingCompany = each.ContractParticipant.ParticipantLocation.Company and InRequestingLocation entered and InRequestingLocation = each.ContractParticipant.ParticipantLocation.RequestingLocation)
						or  (each.ContractParticipant.ParticipantLocation.PricingGroup entered
						and (RequestingLocationRel.PricingGroup 		= each.ContractParticipant.ParticipantLocation.PricingGroup
						or	 InLocation.PricingGroup 					= each.ContractParticipant.ParticipantLocation.PricingGroup
						or	 InCompany.InventoryCompanyRel.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup)))
							LocalContractParticipantMatch = true
							end for each
							
					if (not LocalHasContractParticipant or LocalContractParticipantMatch)
						LocalUnitCost	= InputContractLineRel.BaseCost
						OutputFoundCost	= InputContractLineRel.BaseCost
						LocalCostUOM.UnitOfMeasure	= InputContractLineRel.UOM
						OutputFoundUOM	= InputContractLineRel.UOM
						
						initialize LocalValidForLinePriceBreak
						
						if (InputContractLineRel.LinePriceBreakOn.Quantity)
							BreaksOn = BreaksOn.Quantity
							if (InputContractLineRel.Contract.LineLevelBreaks.OrderTotals
							or (InputContractLineRel.Contract.LineLevelBreaks.ContractTotals and InputContractLineRel.QuantityOrdered > 0))
								LocalValidForLinePriceBreak = true
						else
							BreaksOn = BreaksOn.Amount
	
						if (BreaksOn.Quantity)
							if (InputContractLineRel.Contract.LineLevelBreaks.ContractTotals)
								CompareQuantity = InputContractLineRel.QuantityOrdered
							else
								if (LocalValidForLinePriceBreak) 
									if (InQuantityUOM not entered
									or  InQuantityUOM	= InputContractLineRel.UOM)
										CompareQuantity	= InQuantity
									else
										initialize UOMCalculation
										UOMCalculation.InputUOM			= InQuantityUOM
										UOMCalculation.InputQuantity	= InQuantity
										UOMCalculation.InputToUOM		= InputContractLineRel.UOM
										UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
										CompareQuantity	= UOMCalculation.OutputQuantity
							CompareValue = CompareQuantity
						else
							if (InputContractLineRel.Contract.LineLevelBreaks.ContractTotals)
								CompareAmount = InputContractLineRel.AmountOrdered
							CompareValue = CompareAmount
							
						if (LinePriceBreaks)
							for each InputContractLineRel.PriceBreak.QuantityPercentPrice
								if (each.Quantity entered
								and CompareValue >= each.Quantity)
									LocalLineBreakQuantityAmount	= each.Quantity
									LocalLineBreakPercent			= each.UnitPercent
									LocalLineBreakCost				= each.UnitPrice
						
						if (LocalLineBreakCost > 0)
							LocalUnitCost	= LocalLineBreakCost
							LocalBreakLevel	= LocalBreakLevel.Line
							LocalFoundCost 	= true
						else
							if (LocalLineBreakPercent > 0)
								LocalPercent	= LocalLineBreakPercent
								LocalCostDifference	= LocalUnitCost * LocalPercent
								if (InputContractLineRel.PricingMarkupOrDiscount.Markup)
									LocalUnitCost	+= LocalCostDifference
								else
									LocalUnitCost	-= LocalCostDifference
								LocalBreakLevel	= LocalBreakLevel.Line
								LocalFoundCost 		 = true
							else
								initialize LocalBreakAmount
								initialize LocalBreakPercent
								
								LocalContractGroupForContractPricing = InputContractLineRel.ContractGroup
								LocalContractForContractPricing = InputContractLineRel.Contract
								
								for each ContractPricingRel
									if (each.PriceBreakAmount1 entered
									and each.AmountOrdered >= each.PriceBreakAmount1)
										LocalBreakAmount	= each.PriceBreakAmount1
										LocalBreakPercent	= each.PriceBreakPercent1
									
									if (each.PriceBreakAmount2 entered
									and each.AmountOrdered >= each.PriceBreakAmount2)
										LocalBreakAmount	= each.PriceBreakAmount2
										LocalBreakPercent	= each.PriceBreakPercent2
									
									if (each.PriceBreakAmount3 entered
									and each.AmountOrdered >= each.PriceBreakAmount3)
										LocalBreakAmount	= each.PriceBreakAmount3
										LocalBreakPercent	= each.PriceBreakPercent3
									
									if (each.PriceBreakAmount4 entered
									and each.AmountOrdered >= each.PriceBreakAmount4)
										LocalBreakAmount	= each.PriceBreakAmount4
										LocalBreakPercent	= each.PriceBreakPercent4
									
									if (each.PriceBreakAmount5 entered
									and each.AmountOrdered >= each.PriceBreakAmount5)
										LocalBreakAmount	= each.PriceBreakAmount5
										LocalBreakPercent	= each.PriceBreakPercent5
									
									if (LocalBreakPercent not entered)
										LocalBreakPercent	= each.PricingBasePercent
									
									if (LocalBreakPercent > 0)
										LocalPercent	= LocalBreakPercent
										LocalCostDifference	= LocalUnitCost * LocalPercent
										
										if (each.PricingMarkupDiscount.Markup)
											LocalUnitCost	+= LocalCostDifference
										else
											LocalUnitCost	-= LocalCostDifference
										LocalFoundCost 		 = true
									
									display "EXITING:_for_each_ContractPricingRelService"
									end for each 
								
								LocalBreakLevel	= LocalBreakLevel.Header
								
						LocalContractGroup		= InContractGroup
						LocalContract			= InContract
						LocalContractLine 		= InContractLine
						LocalContractType		= InputContractLineRel.Contract.PurchaseType
						LocalVendorItem			= InputContractLineRel.VendorItem
						LocalVendor				= InputContractLineRel.Contract.Vendor
						if (InputContractLineRel.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered)
							LocalPurchaseFromLocation	= InputContractLineRel.Contract.ApPoPurchaseFrom.PurchaseFromLocation
						else
							LocalPurchaseFromLocation	= InputContractLineRel.Contract.ApPoPurchaseFrom.VendorLocation
						if (LocalPurchaseFromLocation !entered)
							if (ContractRequestingLocationPurchaseFromRel exists)
								LocalPurchaseFromLocation = first ContractRequestingLocationPurchaseFromRel.PurchaseFrom
						if (LocalPurchaseFromLocation !entered)
							if (ContractLocationPurchaseFromRel exists)
								LocalPurchaseFromLocation = first ContractLocationPurchaseFromRel.PurchaseFrom
						if (LocalPurchaseFromLocation !entered)
							if (ContractCompanyPurchaseFromRel exists)
								LocalPurchaseFromLocation = first ContractCompanyPurchaseFromRel.PurchaseFrom
						LocalTaxCode			= InputContractLineRel.TaxCode
						LocalTaxable			= InputContractLineRel.Taxable
						LocalCostOption			= InputContractLineRel.CostOption
						if (InputContractLineRel.ItemType.Service)
							LocalOverrideUOM 	= true
							LocalServiceCode	= InputContractLineRel.ServiceCode
							LocalCostUOM		= InputContractLineRel.UOM
							OriginalCostUOM		= InputContractLineRel.UOM
						LocalDescription		= InputContractLineRel.ItemDescription
						if (not LocalFoundCost)
							LocalUnitCost			= InputContractLineRel.BaseCost
							OriginalUnitCost		= InputContractLineRel.BaseCost
							LocalFoundCost			= true
						LocalCurrencyCode		= InputContractLineRel.Contract.CurrencyCode
						
				
					if (LocalFoundCost)
						if (LocalContractType.Contract)
							LocalCostCode	= LocalCostCode.Contract
						else
							if (LocalContractType.Blanket)
								LocalCostCode = LocalCostCode.Blanket
							else
								if (LocalContractType.CatalogQuote)
									LocalCostCode	= LocalCostCode.CatalogQuote
				
				Execute = DoOutput
				if (InDoDebug)
					display "ServiceItem-ExitingDefaultUnitCost"
				return true
			
			if (InContract not entered
			and InProcurementGroup entered
			and InItem entered
			and ContractLinesExistenceRel not exists
			and ContractLineMembersExistenceRel not exists)
				LocalSkipContractRelatedLookup = true
			
			if (InContract not entered
			and InManufacturerNumber not entered)
				InGetPreferredManufacturer	= true
				Execute	= FindPreferredContractPricing
				initialize InGetPreferredManufacturer
				if (InDoDebug)
					display "FoundCostFromFirstPrefContract:_<LocalFoundCost>"
				if (OutputCostCode not entered
				and OutputPreference entered
				and OutputVendorItem entered)
					InVendor		= OutputVendor
					InPreference	= OutputPreference
					InVendorItem	= OutputVendorItem
					
			if (InCompany.CostDefaultingOrder.Contract entered
			and InCompany.CostDefaultingOrder.ProperOrderSelected)
				OrderTable.Sequence[InCompany.CostDefaultingOrder.Contract]	= DefaultingSequence.Contract
			if (InCompany.CostDefaultingOrder.Catalog entered
			and InCompany.CostDefaultingOrder.ProperOrderSelected)
				OrderTable.Sequence[InCompany.CostDefaultingOrder.Catalog]	= DefaultingSequence.CatalogQuote
			if (InCompany.CostDefaultingOrder.Blanket entered
			and InCompany.CostDefaultingOrder.ProperOrderSelected)
				OrderTable.Sequence[InCompany.CostDefaultingOrder.Blanket]	= DefaultingSequence.Blanket
			if (not InDoContractOnly)	
				if (InCompany.CostDefaultingOrder.LastCost entered
				and	InCompany.CostDefaultingOrder.ProperOrderSelected)
					OrderTable.Sequence[InCompany.CostDefaultingOrder.LastCost]	= DefaultingSequence.LastCost
				if (InCompany.CostDefaultingOrder.LastPO entered
				and InCompany.CostDefaultingOrder.ProperOrderSelected)
					OrderTable.Sequence[InCompany.CostDefaultingOrder.LastPO]	= DefaultingSequence.LastPO
				if (InCompany.CostDefaultingOrder.InventoryNoCharge entered
				and InCompany.CostDefaultingOrder.ProperOrderSelected)
					OrderTable.Sequence[InCompany.CostDefaultingOrder.InventoryNoCharge]	= DefaultingSequence.NoCharge
			if (InSystem = "RQ"
			and InSourceUnitOfMeasure entered)
				OutputSourceUOM		= InSourceUnitOfMeasure
			else
				if (InSourceUnitOfMeasure entered)
					OutputSourceUOM	= InSourceUnitOfMeasure
			Execute	= DoEdits
			
				
			if (InDoDebug)
				display "ExitingDefaultUnitCost"
				
			return true 

		DerivedVendorLocationForService is a DerivedField
			type is Boolean

			if (InItemType.Service)
				if (InContractLine entered and InputContractLineRel exists)
					if (InDoDebug)
						display "_"
						display "FindingContractLineUsingInContractLineForServiceItem"
					
					LineView = InputContractLineRel.ContractLine
					if (InDoDebug)
						display "LineView:_<LineView>"
						
					LocalContractGroup		= InContractGroup
					LocalContract			= InContract
					LocalContractLine 		= InContractLine
					LocalContractType		= InputContractLineRel.Contract.PurchaseType
					LocalVendor				= InputContractLineRel.Contract.Vendor

					if (InputContractLineRel.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered)
						LocalPurchaseFromLocation	= InputContractLineRel.Contract.ApPoPurchaseFrom.PurchaseFromLocation
					else
						LocalPurchaseFromLocation	= InputContractLineRel.Contract.ApPoPurchaseFrom.VendorLocation
				else
				if (InContract 		entered 
				and InContractLine 	not entered
				and InContract.AllowReferenceOfItemsNotOnContract)
					if (InDoDebug)
						display "FindingContractLineUsingInContractForServiceItem"					
					LocalContractGroup		= InContractGroup
					LocalContract			= InContract
					LocalContractType		= InContract.PurchaseType
					LocalVendor				= InContract.Vendor

					if (InContract.ApPoPurchaseFrom.PurchaseFromLocation entered)
						LocalPurchaseFromLocation	= InContract.ApPoPurchaseFrom.PurchaseFromLocation
					else
						LocalPurchaseFromLocation	= InContract.ApPoPurchaseFrom.VendorLocation

				if (LocalContract entered)
					if (LocalPurchaseFromLocation !entered)
						if (ContractRequestingLocationPurchaseFromRel exists)
							LocalPurchaseFromLocation = first ContractRequestingLocationPurchaseFromRel.PurchaseFrom
					if (LocalPurchaseFromLocation !entered)
						if (ContractLocationPurchaseFromRel exists)
							LocalPurchaseFromLocation = first ContractLocationPurchaseFromRel.PurchaseFrom
					if (LocalPurchaseFromLocation !entered)
						if (ContractCompanyPurchaseFromRel exists)
							LocalPurchaseFromLocation = first ContractCompanyPurchaseFromRel.PurchaseFrom

				if (LocalVendor not entered)
					OutputVendor		= InVendor
				else
					OutputVendor		= LocalVendor
				
				if (InDoDebug)
					display "InVendor:_<InVendor>"
					display "LocalVendor:_<LocalVendor>"
					display "OutputVendor:_<OutputVendor>"
				
				if (LocalPurchaseFromLocation not entered)
					OutputPurchaseFromLocation	= InPurchaseFromLocation
				else
					OutputPurchaseFromLocation	= LocalPurchaseFromLocation
				
				if (InDoDebug)
					display "InPurchaseFromLocation:_<InPurchaseFromLocation>"
					display "LocalPurchaseFromLocation:_<LocalPurchaseFromLocation>"
					display "OutputPurchaseFromLocation:_<OutputPurchaseFromLocation>"
					
				Execute = DoOutput
				if (InDoDebug)
					display "ExitingDerivedVendorAndLocation"
				return true

		DerivedVendorAndLocation is a DerivedField
			type is Boolean
			
			if (InDoDebug)
				display "_"
				display "DerivedVendorAndLocationSearch"
			
			LocalSkipVendorLocationMatching = true
			
			if (InCompany.CostDefaultingOrder.Contract entered
			and InCompany.CostDefaultingOrder.ProperOrderSelected)
				OrderTable.Sequence[InCompany.CostDefaultingOrder.Contract]	= DefaultingSequence.Contract
			if (InCompany.CostDefaultingOrder.Catalog entered
			and InCompany.CostDefaultingOrder.ProperOrderSelected)
				OrderTable.Sequence[InCompany.CostDefaultingOrder.Catalog]	= DefaultingSequence.CatalogQuote
			if (InCompany.CostDefaultingOrder.Blanket entered
			and InCompany.CostDefaultingOrder.ProperOrderSelected)
				OrderTable.Sequence[InCompany.CostDefaultingOrder.Blanket]	= DefaultingSequence.Blanket
			for each OrderTable.Sequence
				if (LocalFoundCost)
					Execute = DoOutput
					end for each
				if (each entered)

					if (each = DefaultingSequence.Contract)
						Execute	= DoContract
					else
						if (each = DefaultingSequence.CatalogQuote)
							Execute	= DoCatalog
						else	
							if (each = DefaultingSequence.Blanket)
								Execute	= DoBlanket
				
				if (LocalVendor not entered)
					OutputVendor		= InVendor
				else
					OutputVendor		= LocalVendor
				
				if (InDoDebug)
					display "InVendor:_<InVendor>"
					display "LocalVendor:_<LocalVendor>"
					display "OutputVendor:_<OutputVendor>"
				
				if (LocalPurchaseFromLocation not entered)
					OutputPurchaseFromLocation	= InPurchaseFromLocation
				else
					OutputPurchaseFromLocation	= LocalPurchaseFromLocation
				
				if (InDoDebug)
					display "InPurchaseFromLocation:_<InPurchaseFromLocation>"
					display "LocalPurchaseFromLocation:_<LocalPurchaseFromLocation>"
					display "OutputPurchaseFromLocation:_<OutputPurchaseFromLocation>"
					
			if (InDoDebug)
				display "ExitingDerivedVendorAndLocation"
					
			return true

