ProcessTaxHistory is a Field

    Representation
        Group Fields
			TaxTransFunction			is AlphaUpper 1				
				States
			        Add		   			value is "A"				
			        Update				value is "U"				
					Delete	            value is "D"				
			HistoryType		            is AlphaUpper 1				
				States
			        Normal	   			value is "N"				 
			        Override			value is "O"				 
   			TaxEntity
			InvoiceCompany				is like Company  
			TaxCode						
			FromTaxCode					is like TaxCode
   			ToAddress					is a PostalAddressV2	
   				holds pii
   			ToCountryCode				is like Country 
			BillToTaxCode				is like TaxCode				
   			BillToAddress				is a PostalAddressV2	
   				holds pii
   			BillToCurrency				is like Currency 
   			BillToCurrencyRate			is like CurrencyRate		
   			FromAddress					is a PostalAddressV2	
   				holds pii
   			FromCountryCode				is like Country 
   			FromCurrencyRate			is like CurrencyRate
			POATaxCode					is like TaxCode
   			POAAddress					is a PostalAddressV2	
   				holds pii
   			POACountryCode				is like Country 
	        POACurrencyRate				is a CurrencyRate			
	        POACurrency 				is like Currency 
			SystemCode					is a GeneralLedgerSystemCode
			VendorCustomer				is like Vendor				
			Customer					is like Customer
			TaxID		
			ProductTaxCategory	
			Invoice						 
			Suffix						 
			CancelSequence				is Numeric 4
			PostToCompany				is like Company  
			TaxTransactionAccount	    is a FinanceCodeBlock 
			VendorOrCustomerName		is a VendorName 
				holds pii
			VoucherNumber				is like VoucherNumber 
			DocumentSequenceNumber		is a VertexDocumentSequenceId
			TaxPointDate				is Date		
			InvoiceDate					is Date
			PostDate					is Date
		    BaseCurrency         		is like Currency 
		    TransactionCurrency         is like Currency 
		    TransactionInvoiceAmount    is an InternationalAmount
		    TransactionTaxableAmount    is an InternationalAmount
		    TransactionTaxAmount        is an InternationalAmount
		    ChargedTaxAmount			is an InternationalAmount	
		    TransactionNumberOfDecimals is an AcctNd
		    BaseInvoiceAmount           is an InternationalAmount
		    BaseTaxable                 is an InternationalAmount
		    BaseTaxAmount               is an InternationalAmount
			RelatedObjectReference		is BusinessObjectReference 
			UniqueIdOfRelatedObject 	is UniqueID	
			InputTaxLineItemSequence	is Numeric 6	 
	        CurrencyRate
			MultiplyOrDivide			is a MultDiv	       											
		    BaseNumberOfDecimals    
	        NumberOfDecimals		    
		    TaxRate                     is like ChrgRate	
		    AccruedOrInvoiced           is AlphaUpper size 1
		        States
		            Invoiced value is "I"
		            Accrued  value is "A"
		    ProcessLevel                
		    Location					is like InventoryLocation
		    CustomerExempt        		is AlphaUpper size 1	
			LineNumber
	        Quantity
			UnitCost					
	        ProductIsExempt				is AlphaUpper size 1
	       		States
	                Exempt  			value is "E"	 
	                Taxable 			value is "T"	        			
	        TransactionType             is AlphaUpper size 1
	            States
	                Sale  				value is "S"	 
	                Purchase 			value is "P"	
	                Lease  				value is "L"	 
	                Rental 				value is "R"	  
	        TransactionSubType          is AlphaUpper 3
	            States
	                Freight  			value is "FRT"	 
		    InvoicedOrCreditMemo        is AlphaUpper size 1
		        States
		            Invoice    value is "I"
		            CreditMemo value is "C"
		    TaxTransactionCanceled      is Boolean
			InTransactionId				is like TransactionIDNumber 
			
		    VATRegistrationCountry      is like Country 
		    VATRegistrationNumber
	        FromVATRegistrationCountry  is like Country 
	        FromVATRegistrationNumber	is a VATRegistrationNumber
		    TransactionSource           is AlphaUpper size 1
		        States
		            InputAp  value is "I"
		            OutputAr value is "O"
		    TaxUsageCode				
			VATInputTaxAmount			is an InternationalAmount	 
			RecoverableTaxAreaId		is like TaxCode 
			RecoverableJurisLevel 		is a VertexJurisdictionLevel
	  		RecoverableImpositionType 	is a VertexImpositionType
			RecoverablePercent  		is a TaxRateValue	
			RecoverableAmount 			is an InternationalAmount
			UnrecoverableAmount 		is an InternationalAmount			 
	  		RecoverableDate  			is Date
			BlockingOverridePercent  	is a TaxRateValue	 
			PartialExemptRecvblOvrdPct 	is a TaxRateValue	 
			VertexSimplificationCode	is a SimplificationCode	
			DefaultFilingCurrency 		is like Currency 
			DeliveryTerms				is like ShipTerm
			VertexVATType				is a VatType	 	
		    TaxYear
		    TaxPeriod
		    PurchaseOrSalesReport       is AlphaUpper size 1
			Comment						is a Text
			SabrixMessages				is a CommentText
			CommodityCode				is a ICNCode			
			MaterialCode				is Alpha 40	
			MaterialOrigin				is Alpha 60	
			TaxingJurisdiction			
			ReturnedErpTaxCode			is like TaxCode				
			VertexFlexibleFields		is a FlexibleFields	
			SendMultLineItems			is Boolean
			UserTemplateEnabled			is Boolean
			Division					is Alpha 40
			Department					is Alpha 40
			LineItemNumber				is Alpha 3
			Description       							 
			UniqueLineNumber 			is a UniqueID		
			EachLineUniqueID 			is UniqueID			 	 				 
			ItemNumber 					is like Item  		 
			JurisdictionResultsKey		is Alpha 100
			DocumentType				is Alpha 50				
			EndUser						is an Actor				
			OneSourceTaxAttribute50		is a TaxAttributeGroup50			
			UserElementLevel			is Alpha 1
				States
					Invoice				value is blank
					Line				value is "L"
					LineOnly			value is "O"
			ProcessResponseUsingPartialXpath is Boolean				
			VertexAttributes			is a VertexAttributeGroup	
			CommodityCodeType			is Alpha 60					
				States
					UNSPSC					value is "UNSPSC"				 
					NCM						value is "NCM"					 
					Service					value is "Service"				 
					HSN                     value is "HSN"
			ExemptAmount				is an InternationalAmount	
			BaseInvoiceAmountGroup 		is a CurrencyExchangeGroup
			BaseTaxableAmountGroup 		is a CurrencyExchangeGroup
			BaseTaxAmountGroup 			is a CurrencyExchangeGroup
			PointOfTitleTransfer 		is AlphaUpper 1    		
				States
					None          value is blank
					Destination   value is "D"
					Origin        value is "O"
					InTransit     value is "I"	 
			GeneralLedgerAccount is Alpha 40 			
			CostCenter 			 is Alpha 40 			
			VendorSKU			 is Alpha 40 			
        	ProductClass		 is AlphaUpper 40		
			PayablesCompany 
			PayablesInvoice 
			PayablesInvoiceDistribution 

			UNSPSCCode  is Alpha 8  
			HSNSACCode				
	Transient Fields			 
		OutputTransactionId				is like TransactionIDNumber 
		ReturnedTaxAreaId				is a VertexTaxAreaID
		ReturnedTotalTax 				is an InternationalAmount
		ReturnedInvoiceTotal			is an InternationalAmount	
		ReturnedTaxable					is an InternationalAmount
		ReturnedSubTotalTax				is an InternationalAmount
		ReturnedTotalRate				is Percent size 7.5
		ReturnedVertexStatus			is Alpha 100
		VertexTaxResult 				is Alpha size 50
		TaxHistoryTrace					is Alpha 1000
		DisplayOn						is Boolean
		VertexReportToRun				is like Description	
		OutputRequestExecuted			is like Description	
		CapturedXml  					is Text			
		RichTextDisplayCalcTax 			is RichText
		VertexRequestExecuted			is Alpha 30	
		VertexRoutineExecuted			is Alpha 50	
		CountTaxLineItems       		is Numeric 6	
		SabrixErrorSeverity				is Alpha 1
			States
				Informational	value is "0"
				Warning			value is "1"
				Severe			value is "2"	
		ReturnedIsAudited				is Boolean		
		NewTaxTransaction				is like TaxTransaction 		

	Context Fields
		FinanceEnterpriseGroup

	Local Fields
		LocalTransactionId				is like TransactionIDNumber 
		LocalTaxCode					is a TaxCode
		LocalErrorNumber				is Numeric 3
  		LocalToCountrySize				is like Country 
  		LocalFromCountrySize			is like Country 
  		LocalTrigger					is Alpha 1
  		LocalNumericTrigger				is Numeric 3
  		VertexResponse 					is a SEnvelopeVertex
  		ResultsCount					is Numeric size 3
  		LocalCalculateTax				is a CalculateTax
  		SaveMessageLogKey				is Alpha 100
  		ResultsLastSeq					is a LastSequence
  		LoadLogText 					is AlphaUpper 1				 
			States
				Default					value is blank	
				Input					value is "I"			 
				Output		   			value is "O"
				Both					value is "B"			 
  		SaveLogHeaderMsg				is RichText
  		TotalElapsedTime				is Numeric 4 			 
		TimeStarted						is TimeStamp					 
		TimeEnded						is TimeStamp
		OriginatingCallingModule		is a Description
		DisplayLocalTrace				is Alpha 1000
		TraceLogRichText				is RichText
		DisplayTimestamp				is TimeStamp
		VertexReturnedPostToJrnl		is Boolean
		LocalText               		is Alpha 150
        LocalTextSource         		is Alpha 150
        LocalNonBlankChar       		is Boolean
        LocalCounter            		is Numeric size 4
		DebugMode						is Boolean	
		TextString	 					is Text
		LocalCapturedXml  				is Text			
		Idx								is Numeric 3	
		StringTableValues	 			is Text			
		ReturnedErrorNumber				is Numeric 3		
		ReturnedErrorMessage 			is Text				
		SabrixReturnMessage 			is Alpha size 50
		ReturnedTaxingJurisdiction	    is a TaxingJurisdiction	
		LocalTaxTable					is a TaxTableField
		UserFieldLevel 					is Alpha 1			  
            States
            	Header			value is "H"
                Line			value is "L"
		FieldIdAlpha 			is Alpha 3
		BlankSpace				is Alpha 8
		FlexNumericNbrOfDec		is Alpha 2
		IdxAlpha				is Alpha 2	
		FieldId 	 			is Numeric 3		 
		FlexValue	 			is Alpha 250	
 		PasswordTypeUsed			is Numeric 1		
			States
				TextValue		value is 0
				EncryptedValue	value is 1
		StringBaseAmountsGroup	 		is Text			
		LocalCommodityCode		is like ICNCode			
		LocalCompany 			is like Company 
		LocalPurchaseOrder		is like PurchaseOrder
		LocalAOCPurchaseOrderLine	is like PurchaseOrderLine
		LocalMissingMessage				is Alpha 30
		LocalInventoryLocation      is like InventoryLocation 
		LocalOriginalDistribution	is like PayablesInvoiceDistribution		
		LocalRelatedLineItemUniqueId is like UniqueID 
		
    Relations
 
        EntityTaxCodeDetailRel	 
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= TaxEntity.FinanceEnterpriseGroup            
                related.TaxEntity 				= TaxEntity
                related.TaxCode					= LocalTaxCode   
                
        TaxTransactionRel
            one-to-one relation to TaxTransaction
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= TaxEntity.FinanceEnterpriseGroup
				related.TaxEntity 				= TaxEntity
                related.TaxCode 				= LocalTaxCode
                related.TaxTransaction 			= InTransactionId

        GetLastTaxTransactionRel				
            one-to-many relation to TaxTransaction
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= TaxEntity.FinanceEnterpriseGroup
				related.TaxEntity 				= TaxEntity
                related.TaxCode 				= TaxCode
                
       	GeneralLedgerCompanyRel
            one-to-one relation to GeneralLedgerCompany
            Field Mapping uses symbolic key
                related.Company = InvoiceCompany 

  		VertexConfigRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig = TaxEntity.FinanceEnterpriseGroup		 
 			
		VertexConfigVersionRel
        	one-to-many relation to VertexConfigVersion
        	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= TaxEntity.FinanceEnterpriseGroup 
			Instance Selection
				where (related.VertexConfigVersion.Version 			= VertexConfigRel.DefaultVersion.Version
				and	   related.VertexConfigVersion.ServiceRelease 	= VertexConfigRel.DefaultVersion.ServiceRelease
				and	   related.VertexConfigVersion.ServerName 		= VertexConfigRel.DefaultVersion.ServerName)

		TaxLogHeaderRel	 
			one-to-one relation to TaxLogHeader
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= TaxEntity.FinanceEnterpriseGroup 
				related.TaxLogHeader 			= SaveMessageLogKey	

  		TaxConfigurationRel
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration		= TaxEntity.FinanceEnterpriseGroup

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.TaxLineItem.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				and    related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject)

		InputTaxLineItemRel
			one-to-one relation to TaxLineItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 						= FinanceEnterpriseGroup	 
 				related.TaxLineItem.UniqueIdOfRelatedObject			= UniqueIdOfRelatedObject
				related.TaxLineItem.Sequence						= InputTaxLineItemSequence

		LocalInventoryLocationRel  
		    one-to-one relation to InventoryLocation
		    Field Mapping uses symbolic key
				related.Company						= LocalCompany
				related.InventoryLocation			= LocalInventoryLocation

		LocalAOCPurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.PurchaseOrder			= LocalPurchaseOrder
				related.PurchaseOrderLine		= LocalAOCPurchaseOrderLine

		PayablesInvoiceDistributionRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses NewSet10 
				related.Company					= PayablesCompany
				related.Vendor					= VendorCustomer
				related.PayablesInvoice			= PayablesInvoice
				related.OriginalDistribution	= LocalOriginalDistribution

		PayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail 
			Field Mapping uses symbolic key 
				related.Company					= PayablesCompany
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection 
				where (related.UniqueID 		= LocalRelatedLineItemUniqueId)

		PayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge 
			Field Mapping uses symbolic key 
				related.Company					= PayablesCompany
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection 
				where (related.UniqueID 		= LocalRelatedLineItemUniqueId)

	Derived Fields	
		DerivedExemptFlag is a DerivedField
			type is AlphaUpper 1
			if (CustomerExempt not entered)
				return blank
			if (CustomerExempt = "Y"
			or  CustomerExempt = "T")		
				return "Y"
				
			return "N"
			
		DerivedOriginatingCallingModule is a DerivedField
		  	type is like Description
		  	initialize LocalText
		  	initialize LocalCounter
		 	LocalNonBlankChar = false
		  	LocalCounter = 1
			LocalTextSource = RelatedObjectReference
		 	while (LocalCounter <= LocalTextSource size)
		    	if (!LocalNonBlankChar)
		     		if (LocalTextSource[LocalCounter] != " ")
		         		LocalNonBlankChar = true
		   		if (LocalNonBlankChar)
		      		LocalText += LocalTextSource[LocalCounter]
		        LocalCounter += 1
			return LocalText

        LastTaxTransaction is a DerivedField		
            type is like TaxTransaction
            return last GetLastTaxTransactionRel.TaxTransaction

		TaxHistoryProcessed is a DerivedField    
			type is AlphaUpper 1
			TimeStarted = current timestamp
			TaxHistoryTrace = "BeginTraceLog:TaxHistoryProcessed..."
			if (VertexConfigRel.DisplayOn					 
			or  TaxConfigurationRel.DisplayOn)
				DisplayOn = true	
							
			if (DisplayOn)
				display "-----------------------------------------------------"
				display "......BeginExecutingProcessTaxHistory................"
				display "-----------------------------------------------------"
				display "<DisplayRichText>"
				LocalTrigger = DisplayInput

			LocalTaxCode = TaxCode
			if (TaxEntity not entered								 
			and InvoiceCompany entered)									 
				TaxEntity = GeneralLedgerCompanyRel.AccountingEntity				 
								
			if (TaxTransFunction not entered)
				TaxTransFunction = "A"
			if (RelatedObjectReference entered)	
				OriginatingCallingModule = DerivedOriginatingCallingModule
			LocalNumericTrigger = HasEditErrors 
			if (HasEditErrors > 0 
			or 	LocalErrorNumber entered)
				return "N"

			if (TaxEntity.ThirdParty.VertexOSeries								 
			and VertexConfigRel.DefaultVersion.Version[1:1]	= "9")		
				UserTemplateEnabled = true								

		
 			if (TaxEntity.ThirdParty.Sabrix
 			and TaxEntity.OneSourceVersionType.Generic)
				display "777;PTH;PopulateAttributes;Dist<PayablesInvoiceDistribution>;ChargedTax<ChargedTaxAmount>Commodity<CommodityCode>ItemNumber<ItemNumber>"
				if (SystemCode = "AP")
					LocalTrigger = PopulateOneSourceAttributesForPayables 
				display "777;PTH;WriteToOneSource"
 				LocalTrigger = WriteToOneSource
	 				
			if (TaxEntity.ThirdParty.InforTax
			or  TaxEntity.ThirdParty.Sabrix)
				if (TaxEntity.ThirdParty.Sabrix
				and SendMultLineItems)
					LocalTrigger = true 
				else
	            if (TaxTransFunction.Delete)
	            	invoke Delete TaxTransactionRel		 
				else
				if (TaxTransFunction.Update)
	            	LocalTrigger = UpdateTaxTransaction
	            else				
				if (TaxTransFunction.Add)
					invoke Create TaxTransaction
						invoked.InvoiceCompany				= InvoiceCompany	
						invoked.FinanceEnterpriseGroup 		= TaxEntity.FinanceEnterpriseGroup	
						invoked.TaxEntity					= TaxEntity	    
						invoked.TaxCode						= TaxCode
						invoked.ProductTaxCategory			= ProductTaxCategory
						invoked.ProcessLevel				= ProcessLevel
						invoked.ManuallyEntered				= false
						invoked.TaxRate						= TaxRate
						invoked.InvoiceDate 				= InvoiceDate
						invoked.TaxPointDate				= TaxPointDate
						invoked.PostDate					= PostDate
						invoked.TransactionTaxableAmount	= TransactionTaxableAmount
						invoked.TransactionTaxAmount		= TransactionTaxAmount
						invoked.VoucherNumber				= VoucherNumber
						invoked.SystemCode					= SystemCode
						invoked.VendorCustomer				= VendorCustomer
						invoked.TaxID						= TaxID
						invoked.AccruedOrInvoiced			= AccruedOrInvoiced
						invoked.Name						= VendorOrCustomerName
						invoked.Invoice						= Invoice
						invoked.Suffix						= Suffix
						invoked.CancelSequence				= CancelSequence
						invoked.TransactionTaxableAmount	= TransactionTaxableAmount
						invoked.TransactionInvoiceAmount	= TransactionInvoiceAmount
						invoked.TransactionCurrency			= TransactionCurrency
						

						invoked.BaseInvoiceAmount			= BaseInvoiceAmount
						invoked.BaseTaxable 				= BaseTaxable
						invoked.BaseTaxAmount 				= BaseTaxAmount


						invoked.BaseNumberOfDecimals		= BaseNumberOfDecimals
						invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
						invoked.CurrencyRate				= CurrencyRate
						invoked.TaxUsageCode				= TaxUsageCode
						invoked.TransactionSource			= TransactionSource
						invoked.InvoicedOrCreditMemo		= InvoicedOrCreditMemo
						invoked.InvoiceCompany				= InvoiceCompany		
						invoked.TaxTransactionAccount		= TaxTransactionAccount
						invoked.PostDate					= PostDate
						invoked.TaxYear						= TaxYear
						invoked.TaxPeriod					= TaxPeriod
						if (TransactionSource not entered)
							if (SystemCode 					= "AP")
	            				TransactionSource 			= "I"       
	          			 	else
	          			 	if (SystemCode 					= "AR")
	              			 	TransactionSource 			= "O"
	              			 	
	    				if (TaxEntity.ThirdParty.Sabrix)
							TransactionSource				= "I"
	            			invoked.TaxCalculationSource	= "S"
							invoked.ReturnedErpTaxCode		= ReturnedErpTaxCode	
	            			invoked.Comment					= Comment
	            		else
	            			invoked.TaxCalculationSource	= blank	
	            		invoked.ExemptAmount 				= ExemptAmount 			
	            		if (TaxEntity.ThirdParty.Sabrix					
	            		and TaxEntity.OneSourceVersionType.Generic)	
							invoked.OneSourceVersionType	= "G" 		
						invoked.CommodityCode				= CommodityCode					
			         	invoked.FromVATRegistrationCountry  = FromVATRegistrationCountry
		      			invoked.FromVATRegistrationNbr		= FromVATRegistrationNumber
		      			invoked.FromTaxCode    				= FromTaxCode
		      			invoked.FromCurrency				= TransactionCurrency
						invoked.CallingTransactionUID		= UniqueIdOfRelatedObject
						invoked.VATRegistrationCountry  	= VATRegistrationCountry     
			    		invoked.VATRegistrationNumber		= VATRegistrationNumber
			    		if (TaxingJurisdiction not entered
			    		and ReturnedTaxingJurisdiction entered)
			    			TaxingJurisdiction 				= ReturnedTaxingJurisdiction			    		
			    		invoked.TaxingJurisdiction 			= TaxingJurisdiction
			    		if (TaxEntity.ThirdParty.Sabrix)									
				   			invoked.WebserviceResults		= LocalCapturedXml				
				   			invoked.SabrixReturnMessages	= ReturnErrorMessages 
				    		if (LocalErrorNumber entered)									
				    			invoked.Status				= 3								
				    		else															
				    			invoked.Status				= 0								
						if (VATRegistrationCountry entered)
							invoked.VATRegistrationCountry	= VATRegistrationCountry 
						else
							invoked.VATRegistrationCountry	= TaxEntity.VATRegistrationCountry
							
						if (VATRegistrationNumber entered)		
			    			invoked.VATRegistrationNumber	= VATRegistrationNumber
			    		else
			    			invoked.VATRegistrationNumber	= TaxEntity.VATRegistrationNumber	
			    		if (TaxEntity.UseTaxCodeAccounts						
			    		and EntityTaxCodeDetailRel.VATReverseIndicator)			
			    			invoked.Comment					= VATReverseText	
						invoked.RelatedObjectReference		= RelatedObjectReference

						if (TaxTransFunction.Add
						and InTransactionId not entered)
							display "TaxTransactionWillBeAutosequenced"
						else
							LocalTransactionId				= InTransactionId
							invoked.TaxTransaction			= LocalTransactionId		

					NewTaxTransaction = LastTaxTransaction								
					if (OutputTransactionId not entered)
						if (NewTaxTransaction entered)									
							OutputTransactionId	= NewTaxTransaction						
						else															
							OutputTransactionId	= LocalTransactionId

 
 				if (TaxEntity.ThirdParty.InforTax)
					TimeEnded = current timestamp	
					TotalElapsedTime = TimeEnded - TimeStarted
					if (TaxConfigurationRel.WriteToLogFile)
						LoadLogText = "B"					
						LocalTrigger = CreateTaxToLogFile	
					return "Y"	

			if (TaxEntity.ThirdParty.VertexOSeries)
			 	LocalTrigger = WriteToVertexJournal            	 

				TimeEnded = current timestamp	
				TotalElapsedTime = TimeEnded - TimeStarted
				return "Y"	
					 
			if (DisplayOn)
				display "<OutputFromCalculateTax>"
				display "-----------------------------------------------------"
				display ".................EndProcessTaxHistory................"
				display "-----------------------------------------------------"

				
			return "N"	

		HasEditErrors is a DerivedField
			type is Numeric 3
			TaxHistoryTrace = TaxHistoryTrace + "HasEditErrors..."			
			if (TaxEntity not entered)
				LocalErrorNumber = 901			
				return LocalErrorNumber
								
			if (TaxEntity not entered)				
				LocalErrorNumber = 100			
				return LocalErrorNumber
			else
			if (TaxCode not entered)	
				if (!TaxEntity.ThirdParty.VertexOSeries)
					LocalErrorNumber = 101			
					return LocalErrorNumber	
				else						
				if (TaxEntity.ThirdParty.VertexOSeries	
				and ToAddress.Country not entered)		
					LocalErrorNumber = 800				
					return LocalErrorNumber
			
			if (TaxTransFunction.Update
			and InTransactionId not entered)
				LocalErrorNumber = 900			
				return LocalErrorNumber		

			if (TaxEntity.ThirdParty.Sabrix
			and TaxEntity.OneSourceVersionType.Generic)
				if (InvoiceDate not entered)
					LocalErrorNumber = 102			
					return LocalErrorNumber					

		LoadDefaultCountryCode is a DerivedField
			type is Alpha 3
			TaxHistoryTrace = TaxHistoryTrace + "LoadDefaultCountryCode..."	
			if (ToCountryCode not entered)
				LocalToCountrySize 		= ToAddress.Country size
				if (LocalToCountrySize 	< 4)
					ToCountryCode		= ToAddress.Country

			if (FromCountryCode not entered)
				if (LocalFromCountrySize < 4)
					LocalFromCountrySize 	= FromAddress.Country size
					FromCountryCode		= FromAddress.Country			

		GetNextTransactionId	is a DerivedField	  
			type is like TransactionId
			TaxHistoryTrace = TaxHistoryTrace + "GetNextTransactionId..."
			return 0

		LastTransactionId is a DerivedField	  
			type is like TransactionId
			if (TaxEntity.UseTaxCodeAccounts)
				return EntityTaxCodeDetailRel.LastTransactionID 
			else
				return TaxEntity.LastTransactionID 			

		UpdateTaxTransaction  is a DerivedField	  
			type is Alpha 1
			display "ToDo:FinishThis"
	        invoke Update TaxTransactionRel				
				invoked.InvoiceCompany				= InvoiceCompany	 				
				invoked.ProductTaxCategory			= ProductTaxCategory
				invoked.ProcessLevel				= ProcessLevel
				invoked.TaxRate						= TaxRate
				invoked.InvoiceDate 				= InvoiceDate
				invoked.TaxPointDate				= TaxPointDate
				invoked.PostDate					= PostDate
				invoked.TransactionTaxableAmount	= TransactionTaxableAmount
				invoked.TransactionTaxAmount		= TransactionTaxAmount
				invoked.VoucherNumber				= VoucherNumber
				invoked.SystemCode					= SystemCode
				invoked.VendorCustomer				= VendorCustomer
				invoked.TaxID						= TaxID
				invoked.AccruedOrInvoiced			= AccruedOrInvoiced
				invoked.Name						= VendorOrCustomerName
				invoked.Invoice						= Invoice
				invoked.Suffix						= Suffix
				invoked.CancelSequence				= CancelSequence
				invoked.TransactionTaxableAmount	= TransactionTaxableAmount
				invoked.TransactionInvoiceAmount	= TransactionInvoiceAmount
				invoked.TransactionCurrency			= TransactionCurrency


				invoked.BaseInvoiceAmount			= BaseInvoiceAmount
				invoked.BaseTaxable 				= BaseTaxable
				invoked.BaseTaxAmount 				= BaseTaxAmount


				invoked.BaseNumberOfDecimals		= BaseNumberOfDecimals
				invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
				invoked.CurrencyRate				= CurrencyRate
				invoked.TaxUsageCode				= TaxUsageCode
				invoked.TransactionSource			= TransactionSource
				invoked.InvoicedOrCreditMemo		= InvoicedOrCreditMemo
				invoked.InvoiceCompany				= InvoiceCompany		 
				invoked.TaxTransactionAccount		= TaxTransactionAccount
				invoked.PostDate					= PostDate
				invoked.TaxYear						= TaxYear
				invoked.TaxPeriod					= TaxPeriod		
				invoked.CommodityCode				= CommodityCode					 	            				            	
	         	invoked.FromVATRegistrationCountry  = FromVATRegistrationCountry
      			invoked.FromVATRegistrationNbr		= FromVATRegistrationNumber
      			invoked.FromTaxCode    				= FromTaxCode
      			invoked.FromCurrency				= TransactionCurrency
				invoked.CallingTransactionUID		= UniqueIdOfRelatedObject
				invoked.VATRegistrationCountry  	= VATRegistrationCountry     
	    		invoked.VATRegistrationNumber		= VATRegistrationNumber
	    		if (TaxingJurisdiction not entered
	    		and ReturnedTaxingJurisdiction entered)
	    			TaxingJurisdiction 				= ReturnedTaxingJurisdiction
	    		invoked.TaxingJurisdiction 			= TaxingJurisdiction
	    		if (TaxEntity.ThirdParty.Sabrix)									
		   			invoked.WebserviceResults		= LocalCapturedXml				
		   			invoked.SabrixReturnMessages	= ReturnErrorMessages           
		    		if (LocalErrorNumber entered)									
		    			invoked.Status				= 3								
		    		else															
		    			invoked.Status				= 0								
			OutputTransactionId	= LocalTransactionId			
			return blank 	

		CreateTaxTransactionForInputTaxLineItem is a DerivedField 
			type is Alpha 1
			if (!TaxEntity.ThirdParty.Sabrix)
				return blank
			
			if (InputTaxLineItemRel.ShipToTaxCode entered)
				TaxCode = InputTaxLineItemRel.ShipToTaxCode

			LocalTaxCode = TaxCode

			invoke Create TaxTransaction
				invoked.InvoiceCompany				= InvoiceCompany	
				invoked.FinanceEnterpriseGroup 		= TaxEntity.FinanceEnterpriseGroup	
				invoked.TaxEntity					= TaxEntity	    
				invoked.TaxCode						= TaxCode
				invoked.ProductTaxCategory			= InputTaxLineItemRel.ProductTaxCategory
				invoked.ProcessLevel				= ProcessLevel
				invoked.ManuallyEntered				= false
				invoked.TaxRate						= InputTaxLineItemRel.TaxRate
				invoked.InvoiceDate 				= InvoiceDate
				invoked.TaxPointDate				= TaxPointDate
				invoked.PostDate					= PostDate
				invoked.TransactionTaxableAmount	= InputTaxLineItemRel.TaxableAmount
				if (PayablesInvoice.MatchProcessType entered 
				and !PayablesInvoice.MatchProcessType.Expense)
					LocalRelatedLineItemUniqueId			= InputTaxLineItemRel.RelatedLineItemUniqueId
					if (InputTaxLineItemRel.RelatedObjectReference.BusinessClassName = "PayablesInvoiceAddOnCharge")
						for each PayablesInvoiceAddOnChargeRel
							if (each.AccruedTaxAmount entered)
								invoked.TransactionTaxAmount	= each.AccruedTaxAmount
								invoked.TaxRate					= each.AccruedTaxAmount / each.TotalDistributionAmount 	
							else 
								invoked.TransactionTaxAmount	= each.TaxAmount
								invoked.TaxRate					= each.TaxAmount / each.TotalDistributionAmount 	
					else 
						for each PayablesInvoiceDetailRel
							if (each.AccruedTaxAmount entered)
								invoked.TransactionTaxAmount	= each.AccruedTaxAmount
								invoked.TaxRate					= each.AccruedTaxAmount / each.TotalDistributionAmount 
							else 
								invoked.TransactionTaxAmount	= each.TaxAmount
								invoked.TaxRate					= each.TaxAmount / each.TotalDistributionAmount 
				else
				if (SystemCode = "AP")														
					LocalOriginalDistribution		= InputTaxLineItemRel.LineItemNumber	
					invoked.TransactionTaxAmount	= first PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount	
					invoked.TaxRate					= first PayablesInvoiceDistributionRel.TaxRate		
				else
					invoked.TransactionTaxAmount	= InputTaxLineItemRel.CalculatedTaxAmt
				invoked.TransactionInvoiceAmount 	= TransactionInvoiceAmount		
				invoked.VoucherNumber				= VoucherNumber
				invoked.SystemCode					= SystemCode
				if (Customer entered)
					invoked.VendorCustomer			= Customer
				else
					invoked.VendorCustomer			= VendorCustomer
				invoked.TaxID						= TaxID
				invoked.AccruedOrInvoiced			= AccruedOrInvoiced
				invoked.Name						= VendorOrCustomerName
				invoked.Invoice						= Invoice
				invoked.Suffix						= Suffix
				invoked.CancelSequence				= CancelSequence
				invoked.TransactionCurrency			= TransactionCurrency
				invoked.BaseNumberOfDecimals		= BaseNumberOfDecimals
				invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
				invoked.CurrencyRate				= CurrencyRate
				invoked.TaxUsageCode				= InputTaxLineItemRel.Usage
				invoked.InvoicedOrCreditMemo		= InvoicedOrCreditMemo
				invoked.TaxTransactionAccount		= TaxTransactionAccount
				invoked.TaxYear						= TaxYear
				invoked.TaxPeriod					= TaxPeriod
				if (TransactionSource not entered)
					if (SystemCode 					= "AP")
						TransactionSource 			= "I"       
					else
					if (SystemCode 					= "AR"
					or  SystemCode 					= "BL")
						TransactionSource 			= "O"
				invoked.TransactionSource			= TransactionSource
				if (TaxEntity.ThirdParty.Sabrix)
					invoked.TaxCalculationSource	= "S"
					invoked.ReturnedErpTaxCode		= InputTaxLineItemRel.ReturnedErpTaxCode	
					invoked.Comment					= Comment
				else
					invoked.TaxCalculationSource	= blank	
				invoked.ExemptAmount 				= InputTaxLineItemRel.ReturnedExemptTaxable		
				if (TaxEntity.ThirdParty.Sabrix					
				and TaxEntity.OneSourceVersionType.Generic)	
					invoked.OneSourceVersionType	= "G" 		
				invoked.CommodityCode				= InputTaxLineItemRel.CommodityCode					
				invoked.FromVATRegistrationCountry  = FromVATRegistrationCountry
				invoked.FromVATRegistrationNbr		= FromVATRegistrationNumber
				invoked.FromTaxCode    				= FromTaxCode
				invoked.FromCurrency				= TransactionCurrency
				invoked.CallingTransactionUID		= UniqueIdOfRelatedObject
				invoked.VATRegistrationCountry  	= VATRegistrationCountry     
				invoked.VATRegistrationNumber		= VATRegistrationNumber
				if (InputTaxLineItemRel.TaxingJurisdiction entered)
					TaxingJurisdiction 				= InputTaxLineItemRel.TaxingJurisdiction		    		
				invoked.TaxingJurisdiction 			= TaxingJurisdiction
				if (TaxEntity.ThirdParty.Sabrix)									
					invoked.WebserviceResults		= InputTaxLineItemRel.CapturedXml				
					invoked.SabrixReturnMessages	= InputTaxLineItemRel.MoreResults 
					if (LocalErrorNumber entered)									
						invoked.Status				= 3								
					else															
						invoked.Status				= 0								
				if (VATRegistrationCountry entered)
					invoked.VATRegistrationCountry	= VATRegistrationCountry 
				else
					invoked.VATRegistrationCountry	= TaxEntity.VATRegistrationCountry
				if (VATRegistrationNumber entered)		
					invoked.VATRegistrationNumber	= VATRegistrationNumber
				else
					invoked.VATRegistrationNumber	= TaxEntity.VATRegistrationNumber	
				if (TaxEntity.UseTaxCodeAccounts						
				and EntityTaxCodeDetailRel.VATReverseIndicator)			
					invoked.Comment					= VATReverseText	
				invoked.RelatedObjectReference		= RelatedObjectReference
				invoked.TaxTransaction		= LocalTransactionId

			return blank

		WriteToVertexJournal is a DerivedField		
			type is Alpha 1
			TaxHistoryTrace = TaxHistoryTrace + "WriteToVertexJournal..."
			if (ToAddress not entered
			and FromAddress not entered
			and TaxCode	not entered)	
				LocalErrorNumber	= 800
				return blank
			if (TransactionInvoiceAmount not entered
			and TransactionTaxableAmount not entered)
				LocalErrorNumber	= 801
				return blank

			if (VertexConfigRel.WriteToLogFile
			or  TaxConfigurationRel.WriteToLogFile)
				LoadLogText = "I"
				LocalTrigger = CreateTaxToLogFile	
			LocalCalculateTax.CallingModule				= "ProcessTaxHistory"
			if (VertexConfigRel.DebugMode)
				LocalCalculateTax.TransferTrace			= TaxHistoryTrace
			else	
				LocalCalculateTax.TransferTrace			= blank
			LocalCalculateTax.TransferTrace				= TaxHistoryTrace
			LocalCalculateTax.MessageLogKey				= SaveMessageLogKey	 
			LocalCalculateTax.MessageLogSequence		= ResultsLastSeq
			LocalCalculateTax.RelatedObjectReference	= RelatedObjectReference	
			LocalCalculateTax.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject		
			LocalCalculateTax.JurisdictionResultsKey	= JurisdictionResultsKey		
			LocalCalculateTax.ProcessLevel				= ProcessLevel
			LocalCalculateTax.System					= SystemCode
			LocalCalculateTax.TaxEntity					= TaxEntity
			LocalCalculateTax.InvoiceCompany			= InvoiceCompany
			LocalCalculateTax.Vendor					= VendorCustomer
			LocalCalculateTax.Customer					= Customer
			LocalCalculateTax.Location					= Location
			LocalCalculateTax.Invoice					= Invoice
			LocalCalculateTax.TaxCode					= TaxCode
			LocalCalculateTax.FromTaxCode				= FromTaxCode
			LocalCalculateTax.TaxID						= TaxID	
			LocalCalculateTax.ProductTaxCategory		= ProductTaxCategory
			LocalCalculateTax.Invoice					= Invoice						 
			LocalCalculateTax.Suffix					= Suffix						 
			LocalCalculateTax.CancelSequence			= CancelSequence				 
			LocalCalculateTax.TaxCodeAccount			= TaxTransactionAccount	     
			LocalCalculateTax.Name						= VendorOrCustomerName		 						 		
			LocalCalculateTax.VoucherNumber				= VoucherNumber				 
			LocalCalculateTax.TaxPointDate				= TaxPointDate				 
			LocalCalculateTax.InvoiceDate				= InvoiceDate					 
			LocalCalculateTax.PostDate					= PostDate					 
		    LocalCalculateTax.BaseCurrency				= BaseCurrency  
		    LocalCalculateTax.TaxRate     				= TaxRate  		 				 
		    LocalCalculateTax.TransactionCurrency		= TransactionCurrency          		
			LocalCalculateTax.InvoiceAmount				= TransactionInvoiceAmount
			LocalCalculateTax.TaxableAmount				= TransactionTaxableAmount
			LocalCalculateTax.ChargedTaxAmount			= ChargedTaxAmount
			LocalCalculateTax.TaxAmount					= TransactionTaxAmount
			LocalCalculateTax.Quantity					= Quantity		
			LocalCalculateTax.LineNumber				= LineNumber	
			LocalCalculateTax.UnitCost					= UnitCost		
			LocalCalculateTax.Exempt					= DerivedExemptFlag	
			LocalCalculateTax.ProductIsExempt			= ProductIsExempt
			LocalCalculateTax.PostalAddress				= ToAddress				
			LocalCalculateTax.BaseCurrency				= BaseCurrency			
			LocalCalculateTax.CurrencyRate				= CurrencyRate
			LocalCalculateTax.FromPostalAddress			= FromAddress			
			LocalCalculateTax.FromCurrencyRate			= FromCurrencyRate		
			LocalCalculateTax.BuyerAdminDestAddress		= BillToAddress			
	        LocalCalculateTax.BuyerAdminDestTaxCode		= BillToTaxCode			
	        LocalCalculateTax.BuyerAdminCurrency 		= BillToCurrency		
	        LocalCalculateTax.BuyerAdminCurrencyRate	= BillToCurrencyRate	
			LocalCalculateTax.POAAddress				= POAAddress			
			LocalCalculateTax.POATaxCode				= POATaxCode			
			LocalCalculateTax.POACurrency				= POACurrency			
			LocalCalculateTax.POACurrencyRate			= POACurrencyRate		
			LocalCalculateTax.VATInputTaxAmount			= VATInputTaxAmount			
			LocalCalculateTax.RecoverableTaxAreaId		= RecoverableTaxAreaId		
			LocalCalculateTax.RecoverableJurisLevel 	= RecoverableJurisLevel 		
		  	LocalCalculateTax.RecoverableImpositionType = RecoverableImpositionType 	
			LocalCalculateTax.RecoverablePercent  		= RecoverablePercent  		
			LocalCalculateTax.RecoverableAmount 		= RecoverableAmount 			
			LocalCalculateTax.UnrecoverableAmount 		= UnrecoverableAmount 		
		  	LocalCalculateTax.RecoverableDate  			= RecoverableDate  			
			LocalCalculateTax.BlockingOverridePercent  	= BlockingOverridePercent  	
			LocalCalculateTax.PartialExemptRecvblOvrdPct = PartialExemptRecvblOvrdPct 	
			LocalCalculateTax.VertexSimplificationCode	= VertexSimplificationCode	
			LocalCalculateTax.DefaultFilingCurrency 	= DefaultFilingCurrency 		
			LocalCalculateTax.DeliveryTerms				= DeliveryTerms	
			LocalCalculateTax.TaxUsageCode				= TaxUsageCode	
			LocalCalculateTax.VATRegistrationCountry	= VATRegistrationCountry	 
			LocalCalculateTax.VATRegistrationNumber		= VATRegistrationNumber	 					
			LocalCalculateTax.FromVATRegistrationCountry = FromVATRegistrationCountry	 
			LocalCalculateTax.FromVATRegistrationNumber	= FromVATRegistrationNumber	 	
    		LocalCalculateTax.MaterialCode				= MaterialCode
	        LocalCalculateTax.MaterialOrigin			= MaterialOrigin	
			LocalCalculateTax.VertexFlexibleFields		= VertexFlexibleFields		
			LocalCalculateTax.VertexAttributes			= VertexAttributes			
			LocalCalculateTax.BypassEditing				= true
			LocalCalculateTax.BypassEditingTaxCode		= true
			LocalCalculateTax.SendMultLineItems			= SendMultLineItems	
			LocalCalculateTax.UpdateLineItems			= false
			LocalCalculateTax.ReturnOneSourceTaxIn		= blank
			LocalCalculateTax.UserTemplateEnabled		= UserTemplateEnabled	
			LocalCalculateTax.Division					= Division			
			LocalCalculateTax.Department				= Department			
			LocalCalculateTax.LineItemNumber			= LineItemNumber	
			LocalCalculateTax.GeneralLedgerAccount   	= GeneralLedgerAccount  
			LocalCalculateTax.CostCenter 			 	= CostCenter  			
			LocalCalculateTax.VendorSKU			   		= VendorSKU   			
			LocalCalculateTax.DocumentType		   		= DocumentType 			
        	LocalCalculateTax.ProductClass		  		= ProductClass 			
			if (RecoverableImpositionType = "VAT")
				LocalCalculateTax.VATProcess			= true
			else
				LocalCalculateTax.VATProcess			= false			
			LocalCalculateTax.CommodityCode				= CommodityCode	
			LocalCalculateTax.CommodityCodeType 		= CommodityCodeType		
			initialize LocalCommodityCode										
			if (CommodityCodeType entered)										
				LocalTrigger = DeriveVertexCommodityCode 						
				if (LocalCommodityCode entered) 								
					LocalCalculateTax.CommodityCode		= LocalCommodityCode	
			LocalCalculateTax.UNSPSCCode     			= UNSPSCCode 			
			LocalCalculateTax.HSNSACCode				= HSNSACCode			
			LocalCalculateTax.PostToJournal				= true
			LocalCalculateTax.ThirdPartyFunction    	= "O"
			LocalCalculateTax.ProcessResponseUsingPartialXpath = ProcessResponseUsingPartialXpath
			LocalTrigger								= LocalCalculateTax.5500DoThirdParty	
	      	LocalErrorNumber							= LocalCalculateTax.ReturnedErrorNumber 
			VertexTaxResult								= LocalCalculateTax.VertexTaxResult
			ReturnedTaxAreaId							= LocalCalculateTax.OutputGeoCode				
			ReturnedTotalTax 							= LocalCalculateTax.ReturnedTotalTax
			ReturnedInvoiceTotal						= LocalCalculateTax.ReturnedInvoiceTotal	
			ReturnedTaxable								= LocalCalculateTax.TaxableAmount
			ReturnedSubTotalTax							= LocalCalculateTax.TaxableAmount 
			ReturnedTotalRate							= LocalCalculateTax.OutputTaxRate
			ReturnedVertexStatus						= LocalCalculateTax.VertexTaxResult 	 
			VertexTaxResult 							= LocalCalculateTax.VertexTaxResult
			VertexReportToRun							= LocalCalculateTax.OutputVertexReporting	
			VertexRequestExecuted						= LocalCalculateTax.RequestReference
			VertexRoutineExecuted						= LocalCalculateTax.VertexRoutineExecuted
			if (VertexRequestExecuted not entered)
				VertexRequestExecuted					= LocalCalculateTax.VertexRequestExecuted	
			OutputRequestExecuted						= LocalCalculateTax.VertexRequestExecuted	
			VertexReturnedPostToJrnl					= LocalCalculateTax.PostToJournal
			CapturedXml									= LocalCalculateTax.CapturedXml
			LocalCapturedXml  							= LocalCalculateTax.CapturedXml
			CountTaxLineItems       					= LocalCalculateTax.CountTaxLineItems    
			RichTextDisplayCalcTax						= InputLogText + OutputFromCalculateTax 	
			if (DisplayOn)
				display "[TLC]TaxHist:AfterCalculateTaxCall.........."
				display "[TLC]TaxHist:VertexRequestExecuted..........:<VertexRequestExecuted>"
				display "[TLC]TaxHist:CalculateTax.RequestReference..:<LocalCalculateTax.RequestReference>"
				display "[TLC]TaxHist:VertexReportToRun..............:<VertexReportToRun>"
				display "[TLC]TaxHist:VertexReturnedPostToJrnl.......:<VertexReturnedPostToJrnl>"
				display "[TLC]TaxHist:LocalCalculateTax.PostToJournal:<LocalCalculateTax.PostToJournal>"
			
			if (VertexConfigRel.WriteToLogFile
			or  TaxConfigurationRel.WriteToLogFile)
				TimeEnded = current timestamp	
				TotalElapsedTime = TimeEnded - TimeStarted
				LoadLogText = "O"
				LocalTrigger = CreateTaxToLogFile	
									
			return blank				

		WriteToOneSource is a DerivedField		 	 
			type is Alpha 1
			display "777;WriteToOneSourceFromPrTxHist;Pott<PointOfTitleTransfer>"
			TaxHistoryTrace = TaxHistoryTrace + "WriteToOneSourceAudit..."
			if (ToAddress not entered
			and FromAddress not entered
			and TaxCode	not entered)	
				LocalErrorNumber	= 800
				return blank
			if (TransactionInvoiceAmount not entered
			and TransactionTaxableAmount not entered)
				LocalErrorNumber	= 801
				return blank

			if (TaxConfigurationRel.WriteToLogFile)		
				LoadLogText = "I"
				LocalTrigger = CreateTaxToLogFile	
			LocalCalculateTax.CallingModule				= "ProcessTaxHistory"
			if (VertexConfigRel.DebugMode)
				LocalCalculateTax.TransferTrace			= TaxHistoryTrace
			else	
				LocalCalculateTax.TransferTrace			= blank
			LocalCalculateTax.TransferTrace				= TaxHistoryTrace
			LocalCalculateTax.MessageLogKey				= SaveMessageLogKey	 
			LocalCalculateTax.MessageLogSequence		= ResultsLastSeq
			LocalCalculateTax.RelatedObjectReference	= RelatedObjectReference	
			LocalCalculateTax.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject		 
			LocalCalculateTax.JurisdictionResultsKey	= JurisdictionResultsKey		 
			LocalCalculateTax.ProcessLevel				= ProcessLevel
			LocalCalculateTax.System					= SystemCode
			LocalCalculateTax.TransactionType			= TransactionType
			LocalCalculateTax.TaxEntity					= TaxEntity
			LocalCalculateTax.InvoiceCompany			= InvoiceCompany
			LocalCalculateTax.Vendor					= VendorCustomer
			LocalCalculateTax.Customer					= Customer
			LocalCalculateTax.VendorCustomerName		= VendorOrCustomerName
			LocalCalculateTax.Location					= Location
			LocalCalculateTax.Invoice					= Invoice
			LocalCalculateTax.TaxCode					= TaxCode
			LocalCalculateTax.FromTaxCode				= FromTaxCode
			LocalCalculateTax.TaxID						= TaxID	
			LocalCalculateTax.ProductTaxCategory		= ProductTaxCategory
			LocalCalculateTax.Invoice					= Invoice						 
			LocalCalculateTax.Suffix					= Suffix						 
			LocalCalculateTax.CancelSequence			= CancelSequence				 
			LocalCalculateTax.TaxCodeAccount			= TaxTransactionAccount	     
			LocalCalculateTax.Name						= VendorOrCustomerName		 						 		
			LocalCalculateTax.VoucherNumber				= VoucherNumber				 
			LocalCalculateTax.TaxPointDate				= TaxPointDate				 
			LocalCalculateTax.InvoiceDate				= InvoiceDate					 
			LocalCalculateTax.PostDate					= PostDate					 
		    LocalCalculateTax.BaseCurrency				= BaseCurrency  
		    LocalCalculateTax.TaxRate     				= TaxRate  		 				 
		    LocalCalculateTax.TransactionCurrency		= TransactionCurrency          		
			LocalCalculateTax.InvoiceAmount				= TransactionInvoiceAmount
			LocalCalculateTax.TaxableAmount				= TransactionTaxableAmount
			LocalCalculateTax.ChargedTaxAmount			= ChargedTaxAmount
			LocalCalculateTax.InvoicedOrCreditMemo		= InvoicedOrCreditMemo
			LocalCalculateTax.TaxAmount					= TransactionTaxAmount
			LocalCalculateTax.Quantity					= Quantity
			LocalCalculateTax.LineNumber				= LineNumber
			LocalCalculateTax.Exempt					= DerivedExemptFlag	 
			LocalCalculateTax.ProductIsExempt			= ProductIsExempt
			LocalCalculateTax.PostalAddress				= ToAddress				 
			LocalCalculateTax.BaseCurrency				= BaseCurrency			 
			LocalCalculateTax.CurrencyRate				= CurrencyRate           
			LocalCalculateTax.FromPostalAddress			= FromAddress			 
			LocalCalculateTax.FromCurrencyRate			= FromCurrencyRate		 
			LocalCalculateTax.BuyerAdminDestAddress		= BillToAddress			 
	        LocalCalculateTax.BuyerAdminDestTaxCode		= BillToTaxCode			 
	        LocalCalculateTax.BuyerAdminCurrency 		= BillToCurrency		 
	        LocalCalculateTax.BuyerAdminCurrencyRate	= BillToCurrencyRate	 
			LocalCalculateTax.POAAddress				= POAAddress			 
			LocalCalculateTax.POATaxCode				= POATaxCode			 
			LocalCalculateTax.POACurrency				= POACurrency			 
			LocalCalculateTax.POACurrencyRate			= POACurrencyRate		 
			LocalCalculateTax.DefaultFilingCurrency 	= DefaultFilingCurrency 		
			LocalCalculateTax.DeliveryTerms				= DeliveryTerms	
			LocalCalculateTax.TaxUsageCode				= TaxUsageCode	
			LocalCalculateTax.VATRegistrationCountry	= VATRegistrationCountry	 
			LocalCalculateTax.VATRegistrationNumber		= VATRegistrationNumber	 					
			LocalCalculateTax.FromVATRegistrationCountry = FromVATRegistrationCountry	 
			LocalCalculateTax.FromVATRegistrationNumber	= FromVATRegistrationNumber	 	
			LocalCalculateTax.BypassEditing				= true
			LocalCalculateTax.BypassEditingTaxCode		= true
			LocalCalculateTax.SendMultLineItems			= SendMultLineItems	
			LocalCalculateTax.UpdateLineItems			= false
			LocalCalculateTax.ReturnOneSourceTaxIn		= blank 
			LocalCalculateTax.LineItemNumber			= LineItemNumber		 			
			LocalCalculateTax.Description				= Description
			LocalCalculateTax.UniqueLineNumber			= UniqueLineNumber
			LocalCalculateTax.ItemNumber 				= ItemNumber
			LocalCalculateTax.ProductClass 				= ProductClass 
			LocalCalculateTax.CommodityCode				= CommodityCode	
			LocalCalculateTax.CommodityCodeType 		= CommodityCodeType		
			LocalCalculateTax.DocumentType				= DocumentType				 				 
			LocalCalculateTax.EndUser					= EndUser					 		 		 
			LocalCalculateTax.OneSourceTaxAttribute50	= OneSourceTaxAttribute50	 
			LocalCalculateTax.UserElementLevel 			= UserElementLevel
			LocalCalculateTax.IsAudited 				= true
			LocalCalculateTax.LocalOneSourceUserName 	= TaxConfigurationRel.SabrixVersion.UserName	 		
			if (TaxConfigurationRel.SabrixVersion.OneSourcePassword entered)		 
				PasswordTypeUsed = 0
				LocalCalculateTax.LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.EncryptedPassword	
			else 																								
				PasswordTypeUsed = 1
				LocalCalculateTax.LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.Password			
			LocalCalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer									
			LocalCalculateTax.GeneralLedgerAccount   	= GeneralLedgerAccount 
			LocalCalculateTax.CostCenter 			 	= CostCenter  
			LocalCalculateTax.VendorSKU			   		= VendorSKU   
			LocalCalculateTax.DocumentType		   		= DocumentType 
        	LocalCalculateTax.ProductClass		  		= ProductClass 
			LocalTrigger								= LocalCalculateTax.SabrixThirdParty				 		 
			ReturnedErrorNumber							= LocalCalculateTax.ReturnedErrorNumber	
			ReturnedErrorMessage 						= LocalCalculateTax.OutputErrorMessage	
			LocalErrorNumber							= LocalCalculateTax.ReturnedErrorNumber
	      	SabrixReturnMessage							= LocalCalculateTax.OutputErrorMessage 
			SabrixErrorSeverity							= LocalCalculateTax.SabrixErrorSeverity
			SabrixReturnMessage							= LocalCalculateTax.SabrixReturnMessage
			if (ReturnedErrorNumber not entered
			and LocalErrorNumber entered)
				ReturnedErrorNumber = LocalErrorNumber
			ReturnedTaxingJurisdiction					= LocalCalculateTax.TaxingJurisdiction
			ReturnedTaxAreaId							= LocalCalculateTax.SabrixReturnedTaxCode	
			ReturnedTotalTax 							= LocalCalculateTax.ReturnedTotalTax
			ReturnedInvoiceTotal						= LocalCalculateTax.ReturnedInvoiceTotal	
			ReturnedTaxable								= LocalCalculateTax.TaxableAmount
			ReturnedSubTotalTax							= LocalCalculateTax.TaxableAmount 
			ReturnedTotalRate							= LocalCalculateTax.OutputTaxRate
			ReturnedIsAudited							= LocalCalculateTax.IsAudited
			CapturedXml									= LocalCalculateTax.CapturedXml
			LocalCapturedXml  							= LocalCalculateTax.CapturedXml 
			CountTaxLineItems       					= LocalCalculateTax.CountTaxLineItems 
			LocalTaxTable								= LocalCalculateTax.TaxTable   
			if (TaxConfigurationRel.WriteToLogFile)			
				TimeEnded = current timestamp	
				TotalElapsedTime = TimeEnded - TimeStarted
				LoadLogText = "O"
				LocalTrigger = CreateTaxToLogFile	
									
			return blank
			
		ReturnErrorMessages is a LabelField
			"ProcessTaxHistory-Function:<TaxTransFunction>,ErrorNumber:<LocalErrorNumber>,Message:<ReturnedErrorMessage>"	
			
		OutputErrorNumber is a DerivedField	 			 
			type is Numeric 3
			TaxHistoryTrace = TaxHistoryTrace + "OutputErrorNumber..."
			return LocalErrorNumber  			

		OutputErrorMessage is a DerivedField	  
			type is MessageField
			TaxHistoryTrace = TaxHistoryTrace + "OutputErrorMessage..."
			if (ReturnedErrorNumber entered)					
				if (ReturnedErrorMessage entered)				
					return ReturnedErrorMessage					
				else											
					return LocalCalculateTax.OutputErrorMessage	
			if (DisplayOn)			
				display "[TLC:TaxHist1]TaxEntity.ThirdParty.....:<TaxEntity.ThirdParty>"
				display "[TLC:TaxHist1]LocalErrorNumber.........:<LocalErrorNumber>"
				display "[TLC:TaxHist1]DebugMode................:<DebugMode>"
				display "[TLC:TaxHist1]ReturnErrorMessages......:<ReturnErrorMessages>"
				display "[TLC:TaxHist1]TransactionInvoiceAmount.:<TransactionInvoiceAmount>" 
				display "[TLC:TaxHist1]TransactionTaxableAmount.:<TransactionTaxableAmount>"  
			if (DebugMode)
				return ReturnErrorMessages  
				
			return OutputErrorText	
																					
		OutputErrorText	is a DerivedField  
			type is MessageField
			TaxHistoryTrace = TaxHistoryTrace + "OutputErrorMessage..."
			if (ReturnedErrorNumber entered)	
				return ReturnedErrorMessage		
			if (LocalErrorNumber = 100)
				return Msg100	
			if (LocalErrorNumber = 101)
				return Msg101		
			if (LocalErrorNumber = 102)		
				return Msg102							
			if (LocalErrorNumber = 900)
				return Msg900																			
 			if (LocalErrorNumber = 800)
				return Msg800		
 			if (LocalErrorNumber = 801)
				return Msg801
															 	
			return blank	

		Msg100 is a MessageField
			"TaxEntityIsRequired"		 
		Msg101 is a MessageField
			"TaxCodeIsRequired"	
		Msg102 is a MessageField
			"InvoiceDateRequireFor/One/Source"			
		Msg800 is a MessageField
			"AtMinimum,AddressOrTaxCodeIsRequired"	
		Msg801 is a MessageField
			"AtMinimum,InvoiceAmountOrTaxableRequired"				
		Msg900 is a MessageField
			"TransactionIdRequiredFor"		
		Msg901 is a MessageField
			"TaxEntityRequired"									

		VATReverseText is a MessageField
			"VATReverseCharge"	
		CurrentTimestamp is a DerivedField
			type is Alpha 20
			return current timestamp
			
		MessageLogHeaderKey is a DerivedField			 
			type is Alpha 100
			TaxHistoryTrace = TaxHistoryTrace + "MessageLogHeaderKey..."
			if (Invoice entered 
			and SystemCode entered)
				return SystemCode + ":" + Invoice + ":" + CurrentTimestamp
			else
			if (SystemCode entered)
				return SystemCode + CurrentTimestamp
			
			return "ProcessTaxHistory" + CurrentTimestamp	

		DisplayRichText is a DerivedField
			type is Text
			if (VertexConfigRel.DebugMode)
				DisplayLocalTrace	= TaxHistoryTrace
			else	
				DisplayLocalTrace	= TraceDebugMessage
							
			if (LoadLogText.Output)
				return OutputFromCalculateTax 
			if (LoadLogText.Both)
				return InputLogText + OutputFromCalculateTax 	
							
			return InputLogText 

		TraceDebugMessage is a MessageField	
			"DebugIsTurnedOffOn_\Vertex\Config"
						
		InputLogText is a StringField	 
			type is Text	 
			"<pre>"	
			"-------------------------------------------------------------------------- <br>"
			" <b>                   Begin Executing ProcessTaxHistory              </b> <br>"
			"-------------------------------------------------------------------------- <br>"
			"-------------------------------------------------------------------------- <br>"
			"---------------------------------- I N P U T ----------------------------- <br>"
			"ProcTaxHist:Timestamp.................:" DisplayTimestamp 			    	"<br>"	
			"ProcTaxHist:OriginatingCallingModule..:" OriginatingCallingModule 			"<br>"
			"ProcTaxHist:FinanceEnterpriseGroup....:" TaxEntity.FinanceEnterpriseGroup 	"<br>"	
			"ProcTaxHist:CalculateTax.Function.....:" LocalCalculateTax.Function        "<br>"
			"ProcTaxHist:TaxTransFunction..........:" TaxTransFunction 	 			 	"<br>"
			"ProcTaxHist:SystemCode................:" SystemCode 					 	"<br>"
			"ProcTaxHist:TaxEntity.................:" TaxEntity 						"<br>"
			"ProcTaxHist:ThirdParty................:" TaxEntity.ThirdParty 				"<br>"
			"ProcTaxHist:UseTaxCodeAccounts........:" TaxEntity.UseTaxCodeAccounts 		"<br>"											 
			"ProcTaxHist:InvoiceCompany............:" InvoiceCompany 					"<br>"				 
			"ProcTaxHist:VendorCustomer............:" VendorCustomer 					"<br>"
			"ProcTaxHist:Customer..................:" Customer							"<br>"
			"ProcTaxHist:ExemptFlag................:" CustomerExempt 					"<br>"
			"ProcTaxHist:Invoice...................:" Invoice 							"<br>"
			"ProcTaxHist:VoucherNumber.............:" VoucherNumber						"<br>"
			"ProcTaxHist:DocumentSequenceNumber....:" DocumentSequenceNumber			"<br>"
			"ProcTaxHist:FromTaxCode(ShipTo).......:" FromTaxCode 						"<br>"
			"ProcTaxHist:TaxCode(ShipTo)...........:" TaxCode 							"<br>"
			"ProcTaxHist:ProductTaxCategory........:" ProductTaxCategory 				"<br>"
			"ProcTaxHist:TaxUsageCode..............:" TaxUsageCode		 				"<br>"
			"ProcTaxHist:ProductTaxCategory........:" ProductTaxCategory 				"<br>"
			"ProcTaxHist:ProductClass..............:" ProductClass						"<br>"	
			"ProcTaxHist:CostCenter................:" CostCenter						"<br>"	
			"ProcTaxHist:VendorSKU.................:" VendorSKU 						"<br>"	
			"ProcTaxHist:DocumentType..............:" DocumentType						"<br>"	
			"ProcTaxHist:GeneralLedgerAccount......:" GeneralLedgerAccount				"<br>"	
			"ProcTaxHist:LocationCode..............:" Location   						"<br>"	
			"ProcTaxHist:PointOfTitleTransfer......:" PointOfTitleTransfer 				"<br>" 
			"ProcTaxHist:TaxableAmount.............:" TransactionTaxableAmount 			"<br>"				 
			"ProcTaxHist:InvoiceAmount.............:" TransactionInvoiceAmount 			"<br>" 				 
			"ProcTaxHist:TaxAmount.................:" TransactionTaxAmount 				"<br>"	
			"ProcTaxHist:Quantity..................:" Quantity                          "<br>"	
			"ProcTaxHist:UnitCost..................:" UnitCost                          "<br>"	
			"ProcTaxHist:ChargedTaxAmount..........:" ChargedTaxAmount 	                "<br>"	
			"ProcTaxHist:TaxRate...................:" TaxRate 	                		"<br>"	
			"ProcTaxHist:InvoiceDate...............:" InvoiceDate 						"<br>"					 
			"ProcTaxHist:TaxPointDate..............:" TaxPointDate 						"<br>"				 
			"ProcTaxHist:PostDate..................:" PostDate 							"<br>"	
			"ProcTaxHist:ReceivablesTaxingLocation.:" TaxEntity.ReceivablesTaxingLocation "<br>"	
			"ProcTaxHist:PayablesTaxingLocation....:" TaxEntity.PayablesTaxingLocation  "<br>"			 			
			"ProcTaxHist:-----------------------[InputBaseAmounts]-----------------------<br>"
			"ProcTaxHist:BaseInvoiceAmount.........:" BaseInvoiceAmount			        "<br>"
			"ProcTaxHist:BaseTaxableAmount.........:" BaseTaxable			       	    "<br>"
			"ProcTaxHist:BaseTaxAmount.............:" BaseTaxAmount				        "<br>"	
			"ProcTaxHist:CurrencyRate..............:" CurrencyRate				        "<br>"				
			"ProcTaxHist:======================[Infor/LawsonTax]=========================<br>"
			"ProcTaxHist:InTransactionId...........:" InTransactionId 			    	"<br>"
			"ProcTaxHist:LastTransactionId.........:" LastTransactionId 		    	"<br>" 
			"ProcTaxHist:======================[GlobalVariables]=========================<br>"
			"ProcTaxHist:TaxCode(ShipTo)...........:" TaxCode 							"<br>"
			"ProcTaxHist:PostalAddress(ShipTo).....:" ToAddress 						"<br>"
			"ProcTaxHist:BillTo/AdminDest.TaxCode..:" BillToTaxCode						"<br>"
			"ProcTaxHist:BillTo/AdminDest..........:" BillToAddress 					"<br>"
			"ProcTaxHist:FromTaxCode(ShipFrom).....:" FromTaxCode 						"<br>"			
			"ProcTaxHist:FromPostalAddress.........:" FromAddress 						"<br>"
			"ProcTaxHist:BillFrom/POATaxCode.......:" POATaxCode 						"<br>"			
			"ProcTaxHist:BillFrom/POAAddress.......:" POAAddress 						"<br>"					
			"ProcTaxHist:DefaultFilingCurrency.....:" DefaultFilingCurrency 			"<br>" 			
		    "ProcTaxHist:BaseCurrency..............:" BaseCurrency         				"<br>"			
		    "ProcTaxHist:TransactionCurrency.......:" TransactionCurrency         		"<br>"			
			"ProcTaxHist:VATInputTaxAmount.........:" VATInputTaxAmount			 	 	"<br>"
			"ProcTaxHist:VertexVATType.............:" VertexVATType 					"<br>"
			"ProcTaxHist:RecoverableTaxAreaId......:" RecoverableTaxAreaId		 		"<br>"
			"ProcTaxHist:RecoverableJurisLevel.....:" RecoverableJurisLevel 			"<br>" 
	  		"ProcTaxHist:RecoverableImpositionType.:" RecoverableImpositionType 		"<br>" 
			"ProcTaxHist:RecoverablePercent........:" RecoverablePercent  				"<br>" 
			"ProcTaxHist:RecoverableAmount.........:" RecoverableAmount 				"<br>" 
			"ProcTaxHist:UnrecoverableAmount.......:" UnrecoverableAmount 				"<br>" 			 
	  		"ProcTaxHist:RecoverableDate...........:" RecoverableDate  					"<br>" 
			"ProcTaxHist:BlockingOverridePercent...:" BlockingOverridePercent  			"<br>"  
			"ProcTaxHist:PartialExemptRecvblOvrdPct:" PartialExemptRecvblOvrdPct 		"<br>" 	 
			"ProcTaxHist:VertexSimplificationCode..:" VertexSimplificationCode			"<br>" 	
		    "ProcTaxHist:VATRegistrationCountry....:" VATRegistrationCountry      		"<br>" 
		    "ProcTaxHist:VATRegistrationNumber.....:" VATRegistrationNumber				"<br>" 
	        "ProcTaxHist:FromVATRegistrationCountry:" FromVATRegistrationCountry  		"<br>" 
	        "ProcTaxHist:FromVATRegistrationNumber.:" FromVATRegistrationNumber  		"<br>" 
	        "ProcTaxHist:MaterialCode..............:" MaterialCode	            		"<br>" 	        
	        "ProcTaxHist:MaterialOrigin............:" MaterialOrigin			        "<br>" 
		    "ProcTaxHist:TransactionSource.........:" TransactionSource           		"<br>" 
			"ProcTaxHist:CommodityCode.............:" CommodityCode	 			        "<br>"
			"ProcTaxHist:CommodityCodeType.........:" CommodityCodeType			        "<br>"  
			"ProcTaxHist:HSNSACCode................:" HSNSACCode	 			        "<br>"	
			"ProcTaxHist:UNSPSCCode................:" UNSPSCCode      			        "<br>"  
			"ProcTaxHist:======================[Sabrix/OneSource]========================<br>"
			"ProcTaxHist:CommodityCodeExcludeFlag..:" CommodityCode.ExcludeFromTaxEstimate "<br>"
			"ProcTaxHist:TaxingJurisdiction........:" TaxingJurisdiction 			    "<br>" 	
			"ProcTaxHist:DocumentType..............:" DocumentType		 			    "<br>" 	
			"ProcTaxHist:EndUser...................:" EndUser 			    			"<br>" 	
			"ProcTaxHist:PostDate..................:" PostDate 			    			"<br>" 	
		    "ProcTaxHist:OneSourceVersionType......:" TaxEntity.OneSourceVersionType    "<br>"  
		    "ProcTaxHist:UserElementLevel..........:" UserElementLevel                  "<br>"  
			"ProcTaxHist:=======================[Misc Reference]=========================<br>"
			"ProcTaxHist:UserTemplateEnabled.......:" UserTemplateEnabled	 	        "<br>"
			"ProcTaxHist:SendMultLineItems.........:" SendMultLineItems 				"<br>"
  			"ProcTaxHist:LoadLogText...............:" LoadLogText 				    	"<br>"				
			"ProcTaxHist:UsingPartialXpath.........:" ProcessResponseUsingPartialXpath  "<br>"
			DisplayInvoiceLevelFlexibleFields
			DerviedSabrixElementsLineLevel
			DisplayBaseAmountsGroup		
			"</pre>"


		OutputFromCalculateTax is a StringField
			type is Text	
			"<pre>"	
			"----------------------------------------------------------------------- <br>"
			" <b>              P r o c e s s  T a x   H i s t o r y             </b> <br>"
			"----------------------------------------------------------------------- <br>"
			"------------------------------- O U T P U T --------------------------- <br>"
			"Output returned from CalculateTax.....:" DisplayTimestamp               "<br>"
			"ProcTaxHist:LocalErrorNumber..........:" LocalErrorNumber    		    "<br>"
			"ProcTaxHist:ReturnedErrorNumber.......:" ReturnedErrorNumber  		    "<br>"
			"ProcTaxHist:ReturnErrorMessages.......:" ReturnErrorMessages			"<br>"
			"ProcTaxHist:ReturnedTaxAreaId.........:" ReturnedTaxAreaId				"<br>"			
			"ProcTaxHist:ReturnedTotalTax..........:" ReturnedTotalTax 				"<br>"
			"ProcTaxHist:ReturnedInvoiceTotal......:" ReturnedInvoiceTotal			"<br>"	
			"ProcTaxHist:ReturnedTaxable...........:" ReturnedTaxable				"<br>"
			"ProcTaxHist:ReturnedSubTotalTax.......:" ReturnedSubTotalTax			"<br>"
			"ProcTaxHist:ReturnedTotalRate.........:" ReturnedTotalRate				"<br>"
			"ProcTaxHist:OutputTransactionId.......:" OutputTransactionId 			"<br>"
			"ProcTaxHist:NewTaxTransaction.........:" NewTaxTransaction 			"<br>"
			"ProcTaxHist:ReturnedIsAudited.........:" ReturnedIsAudited		       	"<br>"
			"ProcTaxHist:=========================[Vertex]===========================<br>"
			"ProcTaxHist:VertexRequestExecuted.....:" VertexRequestExecuted	 		"<br>"
			"ProcTaxHist:VertexRoutineExecuted.....:" VertexRoutineExecuted	 		"<br>"
			"ProcTaxHist:VertexReportToRun.........:" VertexReportToRun 			"<br>"
			"ProcTaxHist:TaxPostingsForPayables....:" TaxConfigurationRel.VertexTaxPostingsForPayables "<br>"
			"ProcTaxHist:=========================[Global]===========================<br>"			
		    "ProcTaxHist:VATRegistrationCountry....:" VATRegistrationCountry      	"<br>" 
		    "ProcTaxHist:VATRegistrationNumber.....:" VATRegistrationNumber			"<br>" 
	        "ProcTaxHist:FromVATRegistrationCountry:" FromVATRegistrationCountry  	"<br>" 
	        "ProcTaxHist:FromVATRegistrationNumber.:" FromVATRegistrationNumber  	"<br>" 
	        "ProcTaxHist:MaterialCode..............:" MaterialCode	            	"<br>" 	        
	        "ProcTaxHist:MaterialOrigin............:" MaterialOrigin			    "<br>" 
			"ProcTaxHist:============================================================<br>"			
			"<b>Misc Processing fields.............  						    </b> <br>"
			"ProcTaxHist:CallingModule.............:" OriginatingCallingModule		"<br>"
  			"ProcTaxHist:SaveMessageLogKey.........:" SaveMessageLogKey 			"<br>"
  			"ProcTaxHist:ResultsLastSeq............:" ResultsLastSeq 				"<br>"
  			"ProcTaxHist:LoadLogText...............:" LoadLogText 					"<br>"
  			"ProcTaxHist:SendMultLineItems.........:" SendMultLineItems 			"<br>"
  			"ProcTaxHist:CountTaxLineItems.........:" CountTaxLineItems 			"<br>"
 			"ProcTaxHist:ReturnedTaxingJurisdiction:" ReturnedTaxingJurisdiction  	"<br>" 
 			"ProcTaxHist:PasswordTypeUsed..........:" PasswordTypeUsedText	        "<br>" 							
			"</pre>"	
								
		DisplayInput is a DerivedField
			type is Alpha 1
			default label is untranslatable
			TaxHistoryTrace = TaxHistoryTrace + "DisplayInput..."
			if (DisplayOn)
				display "ProcTaxHist:-Timestamp.....:<current timestamp>"
				display "ProcTaxHist:FinanceEnterpriseGroup:<TaxEntity.FinanceEnterpriseGroup>"	 
				display "--------------------------------------------------------------------"
				display "ProcTaxHist:.........................:Function=<TaxTransFunction>"
				display "--------------------------------------------------------------------"
				display "ProcTaxHist:CallingModule............:<OriginatingCallingModule>"
				display "ProcTaxHist:SystemCode...............:<SystemCode>"
				display "ProcTaxHist:TaxEntity................:<TaxEntity>"
				display "ProcTaxHist:ThirdParty...............:<TaxEntity.ThirdParty>"
				display "ProcTaxHist:UseTaxCodeAccounts.......:<TaxEntity.UseTaxCodeAccounts>"											 
				display "ProcTaxHist:InvoiceCompany...........:<InvoiceCompany>"				 
				display "ProcTaxHist:VendorCustomer...........:<VendorCustomer>"
				display "ProcTaxHist:Customer.................:<Customer>"
				display "ProcTaxHist:ExemptFlag...............:<CustomerExempt>"
				display "ProcTaxHist:Invoice..................:<Invoice>"
				display "ProcTaxHist:TaxCode(ShipTo)..........:<TaxCode>"
				display "ProcTaxHist:FromTaxCode(ShipFrom)....:<FromTaxCode>"
				display "ProcTaxHist:ProductTaxCategory.......:<ProductTaxCategory>"
				display "ProcTaxHist:TaxUsageCode.............:<TaxUsageCode>"
				display "ProcTaxHist:TaxableAmount............:<TransactionTaxableAmount>"				 
				display "ProcTaxHist:InvoiceAmount............:<TransactionInvoiceAmount>" 				 
				display "ProcTaxHist:TaxAmount................:<TransactionTaxAmount>"	
				display "ProcTaxHist:Quantity.................:<Quantity>"						
				display "ProcTaxHist:UnitCost.................:<UnitCost>"						
				display "ProcTaxHist:InvoiceDate..............:<InvoiceDate>"					 
				display "ProcTaxHist:TaxPointDate.............:<TaxPointDate>"				 
				display "ProcTaxHist:PostDate.................:<PostDate>"					 
				display "ProcTaxHist:ReceivablesTaxingLocation:<TaxEntity.ReceivablesTaxingLocation>"		
				display "ProcTaxHist:PayablesTaxingLocation...:<TaxEntity.PayablesTaxingLocation>"				 
				display "ProcTaxHist:======================[UsedForVertex]========================"
				display "ProcTaxHist:PostalAddress............:<ToAddress>"
				display "ProcTaxHist:FromPostalAddress........:<FromAddress>"
				display "ProcTaxHist:BillTo/AdminDest.........:<BillToAddress>"
				display "ProcTaxHist:BillFrom/POAAddress......:<POAAddress>"	
				display "ProcTaxHist:JurisdictionResultsKey:<JurisdictionResultsKey>"		
			return blank					

		CreateTaxToLogFile is a DerivedField
			type is Alpha 1
			default label is untranslatable
			TaxHistoryTrace = TaxHistoryTrace + "CreateTaxToLogFile..."
			DisplayTimestamp	= current timestamp
			if (DisplayOn)
				display "[TLC:TaxHist]CreateTaxToLogFile..."	
				display "[TLC:TaxHist]TaxEntity:<TaxEntity>"
				display "[TLC:TaxHist]FEG:<TaxEntity.FinanceEnterpriseGroup>"
				display "[TLC:TaxHist]TaxHist:LocalCalculateTax.PostToJournal:<LocalCalculateTax.PostToJournal>"
			if (VertexConfigRel.WriteToLogFile
			or  TaxConfigurationRel.WriteToLogFile)		
				if (SaveMessageLogKey not entered)
					if (DisplayOn)
						display "[TLC:TaxHist]CreateTaxToLogFile_\A.2..."	
					SaveMessageLogKey 					= MessageLogHeaderKey
				if (DisplayOn)
					display "[TLC:TaxHist]SaveMessageLogKey:<SaveMessageLogKey>"	
				if (ResultsLastSeq not entered)
					ResultsLastSeq = VertexConfigRel.LastSequence + 1

				if (TaxLogHeaderRel exist)	
					if (DisplayOn)
						display "[TLC:TaxHist]LogHeaderExists:<SaveMessageLogKey>"
						display "[TLC:TaxHist]01a:VertexRequestExecuted:<VertexRequestExecuted>"
						display "[TLC:TaxHist]01b:VertexReturnedPostToJrnl:<VertexReturnedPostToJrnl>"	 
					SaveLogHeaderMsg					= TaxLogHeaderRel.MessageRichText	
					invoke Update TaxLogHeaderRel
						invoked.MessageRichText			= SaveLogHeaderMsg + DisplayRichText
						invoked.VertexRequestExecuted	= LocalCalculateTax.VertexRequestExecuted	
						invoked.LogPostToJournal		= VertexReturnedPostToJrnl 							
						invoked.LogCreatedTimestamp 	= current timestamp 
						if (invoked.HTTPInfo not entered)		
							invoked.HTTPInfo			= "[A1]" + CapturedXml	
						if (invoked.HTTPInfo not entered)		
							invoked.HTTPInfo			= "[A2]" + LocalCapturedXml	
						invoked.UniqueIdOfRelatedObject = UniqueIdOfRelatedObject 
						invoked.LogIsAudited			= ReturnedIsAudited		  
						if (LocalErrorNumber entered)
					        invoked.WebServiceError 	= true
							invoked.WebServiceErrorMessage 	= "TaxHist-1:" + ReturnErrorMessages
							invoked.LogIsAudited		= false																			
				else
					if (DisplayOn)
						display "[TLC:TaxHist]LogHeaderDidNotExists:<SaveMessageLogKey>"	
						display "[TLC:TaxHist]02a:VertexRequestExecuted:<VertexRequestExecuted>"
						display "[TLC:TaxHist]02b:VertexReturnedPostToJrnl:<VertexReturnedPostToJrnl>"						 						
		            invoke Create TaxLogHeader
		                invoked.FinanceEnterpriseGroup 	= TaxEntity.FinanceEnterpriseGroup
		                invoked.TaxLogHeader			= SaveMessageLogKey
		                invoked.SystemCode				= SystemCode   
		                invoked.LogThirdParty			= TaxEntity.ThirdParty
		                invoked.LogTaxEntity			= TaxEntity
		                invoked.LogCompany				= InvoiceCompany
		                invoked.LogVendor				= VendorCustomer
		                invoked.LogCustomer				= VendorCustomer
		                invoked.LogInvoice				= Invoice
		                invoked.LogLocation             = Location
		                invoked.LogToAddress 			= ToAddress
		                invoked.LogFromAddress 			= FromAddress
		                if (JurisdictionResultsKey entered)								
		                	invoked.JurisdictionResultsKey	= JurisdictionResultsKey	
		                else															
		                	invoked.JurisdictionResultsKey	= VertexConfigRel.LastSequence + 1
		               	invoked.MessageRichText			= DisplayRichText	
		               	if (VertexRequestExecuted entered)
		               		invoked.VertexRequestExecuted = VertexRequestExecuted	
		               	else		 
     						invoked.VertexRequestExecuted	= LocalCalculateTax.VertexRequestExecuted 
						invoked.LogPostToJournal		= VertexReturnedPostToJrnl 							
      					invoked.LogCreatedTimestamp 	= current timestamp 								
      					invoked.LogVoucherNumber		= VoucherNumber 									
						invoked.LogDocumentSequenceId	= DocumentSequenceNumber							
						invoked.LogToTaxCode			= TaxCode	  										
						invoked.LogFromTaxCode		    = FromTaxCode										
						invoked.LogCallingRoutine	 	= "ProcessTaxHistory:" + OriginatingCallingModule 	
						invoked.UniqueIdOfRelatedObject = UniqueIdOfRelatedObject 
						if (invoked.HTTPInfo not entered)		
							invoked.HTTPInfo			= "[B1]" + CapturedXml
						invoked.LogIsAudited			= ReturnedIsAudited		 
						invoked.LogOneSourceVersionType = TaxEntity.OneSourceVersionType   
						if (LocalErrorNumber entered)
					        invoked.WebServiceError 	= true
							invoked.WebServiceErrorMessage = "TaxHist-2:" + ReturnErrorMessages
							invoked.LogIsAudited		= false								
		DerivedCapturedXml is a DerivedField
			type is Text
			default label is untranslatable
			initialize TextString
			if (!TaxConfigurationRel.TestingMode)
				return blank
			if (TaxEntity.ThirdParty.VertexOSeries
			or  TaxEntity.ThirdParty.Sabrix)
				TextString = "[ProcessTaxHistory]================================================ X M L ============================================================<br>"
				TextString = TextString + CapturedXml + "[ProcessTaxHistory-1]<br>"			
				TextString = TextString + LocalCapturedXml + "[ProcessTaxHistory-2]<br>"	
				
			return TextString
			
		HeaderFlexbibleFieldsExist is a DerivedField			 
			type is Boolean
			if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[1] entered
			or  VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[1] entered
			or  VertexFlexibleFields.FlexibleDates.FlexibleDateField[1] entered)
				return true
			return false	

		HeaderFlexbibleFields250Exist is a DerivedField						 
			type is Boolean
			restricted
			if (VertexAttributes.VertexCodes.FlexibleCode[1] entered
			or  VertexAttributes.VertexNumerics.FlexibleNumeric[1] entered
			or  VertexAttributes.VertexDates.FlexibleDate[1] entered)
				return true				
			return false	

						
		TableStyle2 is a StringField	  
			type is Text
			"	<style>                                    "
			"	table {                                    "
			"		font-family: courier, serif;           "
			"		border-collapse: collapse;             "
			"	}                                          "
			"	</style>                                   "
		BeginFlexibleFields is a StringField	 
			type is Text   
			TableStyle2											 
			"<table>"          		
			" <h1> "
			"  <tr>                                        "
			"	<th colspan=4>Vertex Flexible Fields " + UserFieldLevelLabel + "</th>"	 
			"  </tr>                                       "
			" </h1> "
		FlexibleCodesHeader is a StringField	 
			type is Text  
			" <h2> "
			"  <tr>                                        "
			"	<th>Codes</th>"	 
			"	<th>FieldId</th>"	 			
			"	<th>FieldValue</th>"	 						
			"	<th> </th>"	 			
			"  </tr>                                       "
			" </h2> "	
		FlexibleNumericsHeader is a StringField	 
			type is Text    		
			" <h2> "
			"  <tr>                                        "
			"	<th>Numerics</th>"				
			"	<th> </th>"	 
			"	<th> </th>"	 
			"	<th>Decimals</th>"	 						
			"  </tr>                                       "
			" </h2> "		
		FlexibleDatesHeader is a StringField	 
			type is Text      		
			" <h1> "
			"  <tr>                                        "
			"	<th>Dates</th>"	 
			"	<th> </th>"	 			
			"	<th> </th>"	 			
			"	<th> </th>"	 						
			"  </tr>                                       "
			" </h2> "						
		DetailHeader is a StringField	 
			type is Text   
			"  <tr>                                        	"		
			"	<td>       </td>                			"			
			"	<td>FieldId</td>                  			"
			"	<td>FieldValue</td>                			"
			"	<td>       </td>             			"			
			"  </tr>                                       	"
		FlexibleFieldDetail is a StringField	 
			type is Text  
			"  <tr>                            	"
			"	<td>" BlankSpace		  "</td> "				
			"	<td>" FieldIdAlpha		  "</td> "
			"	<td>" FlexValue			  "</td> "
			"	<td>" FlexNumericNbrOfDec "</td> "			
			"  </tr>    					    "
		EndFlexFieldsTable is a StringField	 
			type is Text 
			"</table>"

		UserFieldLevelLabel  is a DerivedField 					
			type is MessageField
			if (UserFieldLevel.Header)	
				return HeaderLabel
			return TaxLineLevelLabel	 

		TaxLineLevelLabel is a MessageField                    	
			"LineItemLevel"		

		HeaderLabel is a MessageField							
			"HeaderLevel" 		 

		PasswordTypeUsedText  is a DerivedField	  
			type is MessageField
			default label is untranslatable
			restricted
			if (PasswordTypeUsed.TextValue)
				return PasswordTypeTextValue  
			else	
				return PasswordTypeEncrypted
				
		PasswordTypeTextValue is a MessageField	 
			"PasswordTypeTextValue"					
		PasswordTypeEncrypted is a MessageField	 
			"PasswordTypeEncrypted"	
			
		DeriveVertexCommodityCode is a DerivedField 
			type is Alpha 1			
			if (CommodityCodeType.UNSPSC)
				LocalCommodityCode = UNSPSCCode
			else
			if (CommodityCodeType.HSN)
				LocalCommodityCode = HSNSACCode 
			
			if (CommodityCodeType entered
			and LocalCommodityCode not entered)
				LocalCommodityCode = CommodityCode

			return blank

		DerviedFlexibleFields is a DerivedField		
			type is Text
			default label is untranslatable
			initialize TextString
			if (TaxEntity.ThirdParty.VertexOSeries)
				if (HeaderFlexbibleFieldsExist)
					Idx = 0
					TextString = TextString + "<pre>" 
					TextString = TextString + "===================================== Vertex Flexible Fields (40) ==================================== <br>" 				
					TextString = TextString + "======= [Codes] ======= <br>" 				
					while (Idx < 25)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId entered)													
							TextString = TextString + "[" + Idx + "] <br>" 
							TextString = TextString + "FieldId:" + VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId + "<br>"	
							TextString = TextString + "Code...:" + VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code	+ "<br>"	
	
					Idx = 0
					TextString = TextString + "======= [Numbers] ======= <br>" 				
					while (Idx < 10)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId entered)													
							TextString = TextString + "[" + Idx + "] <br>" 
							TextString = TextString + "FieldId:" + VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId + "<br>"	
							TextString = TextString + "Number.:" + VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue + "<br>"	
	
					Idx = 0
					TextString = TextString + "======= [Dates] ======= <br>" 				
					while (Idx < 5)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId entered)													
							TextString = TextString + "[" + Idx + "] <br>" 
							TextString = TextString + "FieldId:" + VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId + "<br>"	
							TextString = TextString + "Date...:" + VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue + "<br>"	

					TextString = TextString + "</pre>"
					
				if (HeaderFlexbibleFields250Exist)
					Idx = 0
					TextString = TextString + "<pre>" 
					TextString = TextString + "===================================== Vertex Flexible Fields (250) ==================================== <br>" 				
					TextString = TextString + "======= [Codes] ======= <br>" 				
					while (Idx < 25)
						Idx +=1   
						if (VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId entered)													
							TextString = TextString + "[" + Idx + "] <br>" 
							TextString = TextString + "FieldId:" + VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId + "<br>"	
							TextString = TextString + "Code...:" + VertexAttributes.VertexCodes.FlexibleCode[Idx].Code	+ "<br>"	
	
					Idx = 0
					TextString = TextString + "======= [Numbers] ======= <br>" 				
					while (Idx < 10)
						Idx +=1   
						if (VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId entered)													
							TextString = TextString + "[" + Idx + "] <br>" 
							TextString = TextString + "FieldId:" + VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId + "<br>"	
							TextString = TextString + "Number.:" + VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue + "<br>"	
	
					Idx = 0
					TextString = TextString + "======= [Dates] ======= <br>" 				
					while (Idx < 5)
						Idx +=1   
						if (VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId entered)													
							TextString = TextString + "[" + Idx + "] <br>" 
							TextString = TextString + "FieldId:" + VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId + "<br>"	
							TextString = TextString + "Date...:" + VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue + "<br>"	

					TextString = TextString + "</pre>"     
																				
			return TextString					

		DisplayInvoiceLevelFlexibleFields is a DerivedField	
			type is Text
			default label is untranslatable			
			initialize StringTableValues
			UserFieldLevel = "H"
			if (TaxEntity.ThirdParty.VertexOSeries)
				if (HeaderFlexbibleFields250Exist)
					Idx = 0
					StringTableValues = StringTableValues + BeginFlexibleFields				
					StringTableValues = StringTableValues + FlexibleCodesHeader						
					while (Idx < 25)
						Idx +=1   
						if (VertexAttributes.VertexCodes.FlexibleCode[Idx].Code entered)			
							IdxAlpha = Idx
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId
							FlexValue = VertexAttributes.VertexCodes.FlexibleCode[Idx].Code
							StringTableValues = StringTableValues + FlexibleFieldDetail
					
					Idx = 0
					StringTableValues = StringTableValues + FlexibleDatesHeader	 				
					while (Idx < 5)
						Idx +=1   
						if (VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue entered)
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId
							FlexValue = VertexAttributes.VertexDates.FlexibleDate[Idx].DateAlpha10MMDDCCYY		
							StringTableValues = StringTableValues + FlexibleFieldDetail										
	
					Idx = 0
					StringTableValues = StringTableValues + FlexibleNumericsHeader				
					while (Idx < 10)
						Idx +=1   
						if (VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue entered)		
							FieldIdAlpha = VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId
							FlexValue = VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].DerivedDecimalValue	
							FlexNumericNbrOfDec = VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals
							StringTableValues = StringTableValues + FlexibleFieldDetail					
											
					StringTableValues = StringTableValues + EndFlexFieldsTable  					
				else	
				if (HeaderFlexbibleFieldsExist)			
					Idx = 0
					StringTableValues = StringTableValues + BeginFlexibleFields				
					StringTableValues = StringTableValues + FlexibleCodesHeader						
					while (Idx < 25)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code entered)			
							IdxAlpha = Idx
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId
							FlexValue = VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code
							StringTableValues = StringTableValues + FlexibleFieldDetail
					
					Idx = 0
					StringTableValues = StringTableValues + FlexibleDatesHeader	 				
					while (Idx < 5)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue entered)
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId
							FlexValue = VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateAlpha10MMDDCCYY		
							StringTableValues = StringTableValues + FlexibleFieldDetail										
	
					Idx = 0
					StringTableValues = StringTableValues + FlexibleNumericsHeader				
					while (Idx < 10)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue entered)		
							FieldIdAlpha = VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId
							FlexValue = VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].DerivedDecimalValue	
							FlexNumericNbrOfDec = VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals
							StringTableValues = StringTableValues + FlexibleFieldDetail					
											
					StringTableValues = StringTableValues + EndFlexFieldsTable  
																				
			return StringTableValues			
						
						
		DerviedSabrixElementsLineLevel is a DerivedField	
			type is Text
			restricted
			initialize StringTableValues					
			if (TaxEntity.ThirdParty.Sabrix)
				Idx = 0
				StringTableValues = StringTableValues + "<pre>" 
				StringTableValues = StringTableValues + "======================= Input - Line Item User Elements ========================= <br>" 
				StringTableValues = StringTableValues + "=======================" + UserElementLevel + "========================= <br>" 
				while (Idx < 50)  
					Idx +=1   
					if (OneSourceTaxAttribute50.UserElement[Idx].Number entered)													
						StringTableValues = StringTableValues + "[" + Idx + "] <br>" 
						StringTableValues = StringTableValues + "ElementNumber:" + OneSourceTaxAttribute50.UserElement[Idx].Number  + "<br>"	
						StringTableValues = StringTableValues + "ElementName..:" + OneSourceTaxAttribute50.UserElement[Idx].Name	+ "<br>"	
						StringTableValues = StringTableValues + "ElementValue.:" + OneSourceTaxAttribute50.UserElement[Idx].Value	+ "<br>"			 	           																 
					else
					if (OneSourceTaxAttribute50.UserElement[Idx].Number not entered)
						StringTableValues = StringTableValues + "</pre>"  
						end while   
				
			return StringTableValues

		DisplayBaseAmountsGroup is a DerivedField	
			type is Text
			default label is untranslatable
			restricted
			initialize StringBaseAmountsGroup	
			StringBaseAmountsGroup = StringBaseAmountsGroup + "<pre>" 	
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:-------------DisplayInputBaseAmountGroups------------------"  	 	 								+ "<br>" 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:========BaseInvoiceAmountGroup==========:"															+ "<br>" 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseInvoiceAmountGroup.TransactionAmount:" + BaseInvoiceAmountGroup.TransactionAmount                + "<br>" 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.FromCurrency.................:" + BaseInvoiceAmountGroup.BaseAmount.FromCurrency 			+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.ToCurrency...................:" + BaseInvoiceAmountGroup.BaseAmount.ToCurrency			+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.CurrencyTable................:" + BaseInvoiceAmountGroup.BaseAmount.CurrencyTable 		+ "<br>"	
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.TransactionAmount............:" + BaseInvoiceAmountGroup.BaseAmount.TransactionAmount		+ "<br>"		 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.ExchangeDate.................:" + BaseInvoiceAmountGroup.BaseAmount.ExchangeDate 			+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.EnteredCurrencyRate..........:" + BaseInvoiceAmountGroup.BaseAmount.EnteredCurrencyRate 	+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.EnteredCurrencyAmount........:" + BaseInvoiceAmountGroup.BaseAmount.EnteredCurrencyAmount + "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:========BaseTaxableAmountGroup==========:"															+ "<br>" 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseTaxableAmountGroup.TransactionAmount:" + BaseTaxableAmountGroup.TransactionAmount                + "<br>" 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.FromCurrency.................:" + BaseTaxableAmountGroup.BaseAmount.FromCurrency 			+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.ToCurrency...................:" + BaseTaxableAmountGroup.BaseAmount.ToCurrency			+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.CurrencyTable................:" + BaseTaxableAmountGroup.BaseAmount.CurrencyTable 		+ "<br>"	
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.TransactionAmount............:" + BaseTaxableAmountGroup.BaseAmount.TransactionAmount		+ "<br>"		 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.ExchangeDate.................:" + BaseTaxableAmountGroup.BaseAmount.ExchangeDate 			+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.EnteredCurrencyRate..........:" + BaseTaxableAmountGroup.BaseAmount.EnteredCurrencyRate   + "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.EnteredCurrencyAmount........:" + BaseTaxableAmountGroup.BaseAmount.EnteredCurrencyAmount + "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:===========BaseTaxAmountGroup===========:"															+ "<br>" 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseTaxAmountGroup.TransactionAmount....:" + BaseTaxAmountGroup.TransactionAmount                	+ "<br>" 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.FromCurrency.................:" + BaseTaxAmountGroup.BaseAmount.FromCurrency 				+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.ToCurrency...................:" + BaseTaxAmountGroup.BaseAmount.ToCurrency				+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.CurrencyTable................:" + BaseTaxAmountGroup.BaseAmount.CurrencyTable 			+ "<br>"	
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.TransactionAmount............:" + BaseTaxAmountGroup.BaseAmount.TransactionAmount			+ "<br>"		 
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.ExchangeDate.................:" + BaseTaxAmountGroup.BaseAmount.ExchangeDate 				+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.EnteredCurrencyRate..........:" + BaseTaxAmountGroup.BaseAmount.EnteredCurrencyRate 		+ "<br>"
			StringBaseAmountsGroup = StringBaseAmountsGroup + "ProcTaxHist:BaseAmount.EnteredCurrencyAmount........:" + BaseTaxAmountGroup.BaseAmount.EnteredCurrencyAmount 	+ "<br>"						
			StringBaseAmountsGroup = StringBaseAmountsGroup + "</pre>"	
			return StringBaseAmountsGroup


		PopulateOneSourceAttributesForPayables is a DerivedField	
			type is Text
			restricted

			display "777;PTH;PopulateAttributesForDist<PayablesInvoiceDistribution>Amt<PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount>"
			LocalCalculateTax.SabrixUserElement.UserElement[1].Number 			= 1
			LocalCalculateTax.SabrixUserElement.UserElement[1].Name				= "ATTRIBUTE1"
			LocalCalculateTax.SabrixUserElement.UserElement[1].Value			= "INVC"

			LocalCalculateTax.SabrixUserElement.UserElement[2].Number 			= 2
			LocalCalculateTax.SabrixUserElement.UserElement[2].Name				= "ATTRIBUTE3"
			LocalCalculateTax.SabrixUserElement.UserElement[2].Value			= PayablesInvoice.FirstPurchaseOrder		

			if  (PayablesInvoice.FirstPurchaseOrder.AribaPOType entered)
				LocalCalculateTax.SabrixUserElement.UserElement[3].Number 		= 3
				LocalCalculateTax.SabrixUserElement.UserElement[3].Name			= "ATTRIBUTE4"
				LocalCalculateTax.SabrixUserElement.UserElement[3].Value		= PayablesInvoice.FirstPurchaseOrder.AribaPOType		

			if (PayablesInvoiceDistribution exists
			and ProcessTaxHistory.TransactionInvoiceAmount > 0
			and PayablesInvoiceDistribution.PayablesInvoiceDetail entered 
			and PayablesInvoiceDistribution.AddOnCharge entered
			and PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.OneCallTaxLineItemRel2 exists)
				display "777;PTH;UsingElementsFromTaxLineItemForAddOnCharge<PayablesInvoiceDistribution.AddOnCharge>"
				for each PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.OneCallTaxLineItemRel2 				
					OneSourceTaxAttribute50 = each.LineItemUserFieldsRel.UserElementGroup
					end for each 
			else 
			if (PayablesInvoiceDistribution exists
			and ProcessTaxHistory.TransactionInvoiceAmount > 0
			and PayablesInvoiceDistribution.PayablesInvoiceDetail entered 
			and PayablesInvoiceDistribution.PayablesInvoiceDetail.OneCallTaxLineItemRel2 exists)
				display "777;PTH;UsingElementsFromTaxLineItemForInvoiceDetailLine<PayablesInvoiceDistribution.PurchaseOrderLine>"				
				for each PayablesInvoiceDistribution.PayablesInvoiceDetail.OneCallTaxLineItemRel2 				
					OneSourceTaxAttribute50 = each.LineItemUserFieldsRel.UserElementGroup
					end for each 
			else 
			if (PayablesInvoiceDistribution exists
			and ProcessTaxHistory.TransactionInvoiceAmount > 0
			and PayablesInvoiceDistribution.TaxLineItemRel exists)
				display "777;PTH;UsingElementsFromTaxLineItemForDistrib"	
				for each PayablesInvoiceDistribution.TaxLineItemRel 				
					OneSourceTaxAttribute50 = each.LineItemUserFieldsRel.UserElementGroup
					end for each 
			else 
			if (PayablesInvoiceDistribution exists)
				display "777;PTH;DistribExists;GettingElements"				

				initialize Idx 

				LocalCompany 						= PayablesInvoiceDistribution.Company 
				LocalPurchaseOrder 					= PayablesInvoiceDistribution.PurchaseOrder
				if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered
				and PayablesInvoiceDistribution.AddOnCharge entered)
					if (PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.PurchaseOrderLine entered)
						LocalAOCPurchaseOrderLine 					= PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.PurchaseOrderLine
					else
						LocalAOCPurchaseOrderLine 					= PayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLine set.PurchaseOrderLine

				if (PayablesInvoice.TaxConfigurationRel.AttributeMissingProcess.MissingMessage)
					if (PayablesInvoice.TaxConfigurationRel.AttributeMissingMessage entered)
						LocalMissingMessage	= PayablesInvoice.TaxConfigurationRel.AttributeMissingMessage
					else
						LocalMissingMessage = "MissingAttributeAndMessage"

				for each PayablesInvoiceDistribution.TaxAttributesRel.OneSourceTaxAttributeRel

					if ((each.LoadDynamicField.System	= "AP"
					or   each.LoadDynamicField.System not entered)
					and Idx < 50)

						if (each.LoadDynamicField.ValueIs.TaxEntity)
							increment Idx
							OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
							OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
							OneSourceTaxAttribute50.UserElement[Idx].Value		= TaxEntity
						else
						if (each.LoadDynamicField.ValueIs.Company)
							increment Idx
							OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
							OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
							OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.Company
						else
						if (each.LoadDynamicField.ValueIs.Vendor)
							increment Idx
							OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
							OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
							OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.Vendor
						else
						if (each.LoadDynamicField.ValueIs.PostingDate)
							increment Idx
							OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
							OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
							OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionDate
						else
						if (each.LoadDynamicField.ValueIs.TaxDate)
							increment Idx
							OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
							OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
							OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoice.DerivedTaxPointDate
						else
						if (each.LoadDynamicField.ValueIs.GLAccount)
							increment Idx
							OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
							OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
							OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.GeneralLedgerChartAccount
						else
						if (each.LoadDynamicField.ValueIs.Location)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered)
								if  (PayablesInvoiceDistribution.AddOnCharge entered
								and  PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location entered)																
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location
								else
								if  (!PayablesInvoiceDistribution.AddOnCharge entered
								and  PayablesInvoiceDistribution.PayablesInvoiceDetail.Location entered)																
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoiceDistribution.PayablesInvoiceDetail.Location
								else
								if (PayablesInvoice.Location entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoice.Location
							else 
							if (PayablesInvoice.RemitToCode entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoice.RemitToCode
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage

						else
						if (each.LoadDynamicField.ValueIs.Currency)
							increment Idx
							OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
							OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
							OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoice.InvoiceCurrency
						else
						if (each.LoadDynamicField.ValueIs.DiscountAmount)
							if (PayablesInvoice.DiscountAmount.CurrencyAmount entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoice.DiscountAmount.CurrencyAmount
						else
						if (each.LoadDynamicField.ValueIs.UnitCost)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail not entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DerivedUnitCost
							else 
							if  (!PayablesInvoiceDistribution.AddOnCharge entered
							and PayablesInvoiceDistribution.PayablesInvoiceDetail.EnteredUnitCost entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EnteredUnitCost
							else
							if  (PayablesInvoiceDistribution.AddOnCharge entered
							and PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.EnteredUnitCost entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.EnteredUnitCost
						else
						if (each.LoadDynamicField.ValueIs.ContractType)
							if (PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.WorkType)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered)
								if (PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else 
								if (PayablesInvoiceDistribution.DistributionAccount.Project.WorkType entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoiceDistribution.DistributionAccount.Project.WorkType
								else
								if (LocalMissingMessage entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.AccountSubType)
							if (PayablesInvoiceDistribution.DistributionAccount.GeneralLedgerChartAccount.AccountSubType entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.ServiceType)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered)
								if (PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else 
								if (PayablesInvoiceDistribution.DistributionAccount.Project.ServiceType entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoiceDistribution.DistributionAccount.Project.ServiceType
								else
								if (LocalMissingMessage entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.UsageType)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered)
								if (PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
								if (PayablesInvoiceDistribution.DistributionAccount.Project.UsageType entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoiceDistribution.DistributionAccount.Project.UsageType
								else
								if (LocalMissingMessage entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.CustomerType)
							if (PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.Project)
							if (PayablesInvoiceDistribution.DistributionAccount.Project entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.Project
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension1)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension1 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension1
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension2)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension2 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension2
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension3)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension3 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension3
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension4)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension4 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension4
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension5)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension5 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension5
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension6)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension6 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension6
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension7)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension7 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension7
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension8)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension8 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension8
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension9)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension9 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension9
						else
						if (each.LoadDynamicField.ValueIs.FinanceDimension10)
							if (PayablesInvoiceDistribution.DistributionAccount.FinanceDimension10 entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.DistributionAccount.FinanceDimension10
						else

						if (each.LoadDynamicField.ValueIs.CommodityCode)
							if (PayablesInvoice.VendorReturn entered)				
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PurchaseOrderLine.CommodityCode
							else
							if (PayablesInvoiceDistribution.AddOnCharge entered										
							and PayablesInvoiceDistribution.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode	
							and PayablesInvoiceDistribution.AddOnCharge.CommodityCode entered)						
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.AddOnCharge.CommodityCode
							else
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail.CommodityCode entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.CommodityCode
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.UNSPSC)
							if (PayablesInvoice.VendorReturn entered
							and PayablesInvoiceDistribution.PurchaseOrderLine.UNSPSCCode entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (PayablesInvoiceDistribution.AddOnCharge entered									
							and PayablesInvoiceDistribution.AddOnCharge.OneSourceTaxCallOverride.UseUNSPSCCode	
							and PayablesInvoiceDistribution.AddOnCharge.UNSPSCCode entered)						
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail.PurchaseOrderLine.UNSPSCCode entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= PayablesInvoiceDistribution.PayablesInvoiceDetail.PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)		
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered 
							and PayablesInvoiceDistribution.AddOnCharge entered
							and PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.ProductTaxCategory entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.ProductTaxCategory
							else 
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered 
							and !PayablesInvoiceDistribution.AddOnCharge entered
							and PayablesInvoiceDistribution.PayablesInvoiceDetail.ProductTaxCategory entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.ProductTaxCategory
							else
							if (ProductTaxCategory entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.ProductTaxCategory
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.TaxUsageCode)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered 
							and !PayablesInvoiceDistribution.AddOnCharge entered
							and PayablesInvoiceDistribution.PayablesInvoiceDetail.TaxUsageCode entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.TaxUsageCode
							else
							if (PayablesInvoiceDistribution.AddOnCharge entered
							and PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.TaxUsageCode entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.TaxUsageCode
							else 
							if (TaxUsageCode entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.TaxUsageCode
							else
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.Longitude)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder entered)
										LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
									else
									if (PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location entered)
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location
									else
										LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.ShipToLocation
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder entered)
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
									else
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.Location

								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.GeoLongitude entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalInventoryLocationRel.PostalAddress.GeoLongitude
							else 
								if (PayablesInvoice.Location.PostalAddress.GeoLongitude entered)	
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoice.Location.PostalAddress.GeoLongitude
								else
								if (LocalMissingMessage entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.Latitude)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder entered)
										LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
									else
									if (PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location entered)
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location
									else
										LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.ShipToLocation
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder entered)
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
									else
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.Location

								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.GeoLatitude entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalInventoryLocationRel.PostalAddress.GeoLatitude
							else 
								if (PayablesInvoice.Location.PostalAddress.GeoLatitude entered)	
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoice.Location.PostalAddress.GeoLatitude
								else
								if (LocalMissingMessage entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.Altitude)
							if (PayablesInvoiceDistribution.PayablesInvoiceDetail entered)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder entered)
										LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
									else
									if (PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location entered)
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceAddOnChargeRel.Location
									else
										LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.ShipToLocation
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder entered)
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
									else
										LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.Location

								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.GeoAltitude entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalInventoryLocationRel.PostalAddress.GeoAltitude
							else
								if (PayablesInvoice.Location.PostalAddress.GeoAltitude entered)	
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoice.Location.PostalAddress.GeoAltitude
								else
								if (LocalMissingMessage entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else
						if (each.LoadDynamicField.ValueIs.AddOnCharge)
							if  (PayablesInvoiceDistribution.AddOnCharge entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.AddOnCharge
							else 
							if (LocalMissingMessage entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number = Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalMissingMessage
						else

						if (PayablesInvoiceDistribution.PayablesInvoiceDetail not entered)


							if (each.Value entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 		= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name			= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value			= each.Value
						else 
							
							if (each.LoadDynamicField.ValueIs.EAMManufacturingIndicator)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1] = blank)
										OneSourceTaxAttribute50.UserElement[Idx].Value 	= "N"
								else
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 		= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name			= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1] = blank)
										OneSourceTaxAttribute50.UserElement[Idx].Value 	= "N"
							else
							if (each.LoadDynamicField.ValueIs.EAMProjectID)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.ProjectID != blank)
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.ProjectID
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.ProjectID != blank)
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.ProjectID
							else
							if (each.LoadDynamicField.ValueIs.EAMProjectType)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23] != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]	
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23] != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]	
							else
							if (each.LoadDynamicField.ValueIs.EAMTypeCode)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.TypeCode != blank)		
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.TypeCode		
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.TypeCode != blank)		
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.TypeCode		
							else
							if (each.LoadDynamicField.ValueIs.EAMPositionFacility)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.PositionFacility != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.PositionFacility	
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.PositionFacility != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.PositionFacility	
							else
							if (each.LoadDynamicField.ValueIs.EAMUserField30)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30] != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value	= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]	
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30] != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]	
							else
							if (each.LoadDynamicField.ValueIs.EAMUserField24)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24] != blank)		
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]		
								else
									if  (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24] != blank)		
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]		
							else
							if (each.LoadDynamicField.ValueIs.EAMWorkOrderShipTo)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]	
								else
									if (PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] != blank)	
										increment Idx
										OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
										OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
										OneSourceTaxAttribute50.UserElement[Idx].Value		= PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]	
							else
							if (each.LoadDynamicField.ValueIs.EAMWorkOrderCountry)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
								else
									LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  

								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.Country entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalInventoryLocationRel.PostalAddress.Country
							else
							if (each.LoadDynamicField.ValueIs.EAMWorkOrderState)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
								else
									LocalInventoryLocation = PayablesInvoiceDistribution.PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  

								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.StateProvince entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									OneSourceTaxAttribute50.UserElement[Idx].Value		= LocalInventoryLocationRel.PostalAddress.StateProvince
							else 
							if (each.LoadDynamicField.ValueIs.AddOnChargeOnly)
								if  (PayablesInvoiceDistribution.AddOnCharge entered)
									increment Idx
									OneSourceTaxAttribute50.UserElement[Idx].Number 	= Idx
									OneSourceTaxAttribute50.UserElement[Idx].Name		= each.UserAttributeName
									if (PayablesInvoice.MatchProcessType.AOCOnly)
										OneSourceTaxAttribute50.UserElement[Idx].Value	= "Y"
									else
										OneSourceTaxAttribute50.UserElement[Idx].Value	= "N"
							else
							if (each.Value entered)
								increment Idx
								OneSourceTaxAttribute50.UserElement[Idx].Number 		= Idx
								OneSourceTaxAttribute50.UserElement[Idx].Name			= each.UserAttributeName
								OneSourceTaxAttribute50.UserElement[Idx].Value			= each.Value


