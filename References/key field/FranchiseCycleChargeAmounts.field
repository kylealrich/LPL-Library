FranchiseCycleChargeAmounts is a Field

    Representation
        Group Fields
			EditFunctionCode			is Alpha 1
				States	
					Add				value is "A"
					Change			value is "C"
					Release			value is "R"
					Delete			value is "D"	
            EditFranchiseCompany		is a FranchiseCompany
           	EditShipTo					is a CustomerShipTo		
           	EditFranchiseCustomer		is a Customer	
           	EditFranchiseContract		is a FranchiseContract		
           	EditSalesType				is a SalesType	
			EditDate					is Date
			EditAdjustmentNumber		is Numeric 3
			EditFranchiseContractCharge	is a FranchiseContractCharge	
			EditCharge					is Alpha 8	 
			EditNetSales				is an InternationalAmount
			EditLineTotalAmt			is an InternationalAmount
			EditSequence				is like FranchiseContractCharge
        	EditEnterChargeFlag   		is AlphaUpper size 1
	            States
	                Yes value is "Y"
	                No  value is "N"			

 	Local Fields
 		LocalCalculatedAmount			is an InternationalAmount
 		LocalBeginningNoteBalance		is an InternationalAmount
		LocalEndingNoteBalance			is an InternationalAmount
 		LocalPrincipal 					is an InternationalAmount
 		LocalInterest					is an InternationalAmount
 		LocalNextPeriodDate				is Date
		LocalSalesType					is Alpha 1				
 		LocalAmount						is an InternationalAmount
		LocalCounter					is Numeric 3
		LocalSalesTax					is an InternationalAmount
		LocalMaxAmount 					is an InternationalAmount		
		LocalHoldSalesType				is Alpha 1
		LocalFranchiseSalesFlag			is Boolean
		LocalFranchiseSalesFound		is Boolean
		
	Transient Fields
    	ErrorMessage							is Alpha 100


	Conditions
		HasCycleCharges
			when (FranchiseCycleChargeRel exists)
	   	        
    Derived Fields	

    	FranchiseCycleAmount is a DerivedField
    		type is like InternationalAmount  
			initialize LocalCalculatedAmount
			initialize LocalBeginningNoteBalance
			initialize LocalPrincipal
			initialize LocalInterest
			initialize LocalEndingNoteBalance
			initialize LocalCounter
			initialize LocalSalesTax
			initialize LocalMaxAmount
			initialize ErrorMessage
			if (FranchiseContractChargeRel exists)  				
				if (FranchiseContractChargeRel.ChargeType.SalesBased)
					initialize LocalCounter
					LocalCounter = 1
					if (FranchiseContractChargeRel.MaximumAmount entered)
						LocalMaxAmount = FranchiseContractChargeRel.MaximumAmount
					else 
						LocalMaxAmount = high value

					if (!FranchiseContractChargeRel.StepLimits.StepLimit[LocalCounter] entered)  
						LocalCalculatedAmount = ((EditNetSales * FranchiseContractChargeRel.PercentOfSales) + FranchiseContractChargeRel.BaseAmount + FranchiseCycleChargeRel.LineTotalAmount)		
					
						if (LocalCalculatedAmount < FranchiseContractChargeRel.MinimumAmount)
							LocalCalculatedAmount = (FranchiseContractChargeRel.MinimumAmount - FranchiseCycleChargeRel.LineTotalAmount)
						if (LocalCalculatedAmount > LocalMaxAmount)
							LocalCalculatedAmount = (LocalMaxAmount - FranchiseCycleChargeRel.LineTotalAmount)
						else 
							LocalCalculatedAmount = ((EditNetSales * FranchiseContractChargeRel.PercentOfSales) + FranchiseContractChargeRel.BaseAmount)
					else
						if (FranchiseContractChargeRel.StepOperand = 1)
							while (LocalCounter < 10) 
								if (FranchiseContractChargeRel.StepLimits.StepLimit[LocalCounter] > EditNetSales)
									LocalCalculatedAmount = ((EditNetSales * FranchiseContractChargeRel.StepPercents.StepPercent[LocalCounter]) + FranchiseContractChargeRel.BaseAmount)
											
									if (LocalCalculatedAmount < FranchiseContractChargeRel.MinimumAmount)
										LocalCalculatedAmount = FranchiseContractChargeRel.MinimumAmount 
									if (LocalCalculatedAmount > LocalMaxAmount)
										LocalCalculatedAmount = LocalMaxAmount
									else 
										LocalCalculatedAmount = ((EditNetSales * FranchiseContractChargeRel.PercentOfSales) + FranchiseContractChargeRel.BaseAmount)
									LocalCounter = 10
								else
									LocalCounter += 1
									
									
									
						if (FranchiseContractChargeRel.StepOperand = 2)	
 							initialize LocalCalculatedAmount
 							initialize LocalAmount											
							LocalCounter = 1
							while (LocalCounter < 10
							and FranchiseContractChargeRel.StepLimits.StepLimit[LocalCounter] > EditNetSales)

								LocalCalculatedAmount = LocalCalculatedAmount + (FranchiseContractChargeRel.StepPercents.StepPercent[LocalCounter] * (FranchiseContractChargeRel.StepLimits.StepLimit[LocalCounter] - LocalAmount))
								LocalAmount = FranchiseContractChargeRel.StepLimits.StepLimit[LocalCounter]
									
								LocalCalculatedAmount = (((EditNetSales - LocalAmount) * FranchiseContractChargeRel.StepPercents.StepPercent[LocalCounter]) + (LocalCalculatedAmount) + (FranchiseContractChargeRel.BaseAmount))
			
								if (LocalCalculatedAmount < FranchiseContractChargeRel.MinimumAmount)
									LocalCalculatedAmount = FranchiseContractChargeRel.MinimumAmount 
								else 
									if (LocalCalculatedAmount > FranchiseContractChargeRel.MaximumAmount)	
										LocalCalculatedAmount = FranchiseContractChargeRel.MaximumAmount
										LocalCounter = 10
									else
										LocalCounter += 1
									
				if (FranchiseContractChargeRel.ChargeType.NoteBased)
		
		    		if (EditFunctionCode.Add)  	
						if (!EditSalesType.Callinestimate)
		    				LocalSalesType	= "C"
							if (FranchiseCycleChargeRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "C"		
						if (!EditSalesType.Estimatedinvoice)		
		    				LocalSalesType	= "E"
							if (FranchiseCycleChargeRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "E"		
						if (!EditSalesType.Actualinvoice)		
		    				LocalSalesType	= "A"
							if (FranchiseCycleChargeRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "A"	
								
						if (EditSalesType.Actualinvoice)		
		    				LocalSalesType	= "C"
							if (FranchiseSalesRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "C"	
		    					LocalSalesType	= "E"
							if (FranchiseSalesRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "E"			

						if (EditSalesType.Callinestimate)
		    				LocalSalesType	= "A"
							if (FranchiseSalesRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "A"						
		    					LocalSalesType	= "E"
							if (FranchiseSalesRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "E"

						if (EditSalesType.Estimatedinvoice)
		    				LocalSalesType	= "A"
							if (FranchiseSalesRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "A"						
		    					LocalSalesType	= "C"
							if (FranchiseSalesRel exists)
								LocalFranchiseSalesFlag	= true
								LocalHoldSalesType = "C"

						
													
					if (EditFunctionCode.Change)
						LocalSalesType			= EditSalesType
 						LocalCalculatedAmount	= FranchiseCycleChargeRel.CalculatedAmount		
 						LocalBeginningNoteBalance	= FranchiseCycleChargeRel.BeginningNoteBalance		
						LocalEndingNoteBalance	= FranchiseCycleChargeRel.EndingNoteBalance			
				 		LocalPrincipal 			= FranchiseCycleChargeRel.Principal			
				 		LocalInterest			= FranchiseContractChargeRel.PaymentAmount			
						
					else
						if (LocalFranchiseSalesFound)
							LocalSalesType			= LocalHoldSalesType 
	 						LocalCalculatedAmount	= FranchiseCycleChargeRel.CalculatedAmount		
	 						LocalBeginningNoteBalance	= FranchiseCycleChargeRel.BeginningNoteBalance		
							LocalEndingNoteBalance	= FranchiseCycleChargeRel.EndingNoteBalance			
					 		LocalPrincipal 			= FranchiseCycleChargeRel.Principal			
					 		LocalInterest			= FranchiseContractChargeRel.PaymentAmount								
					if (EditFunctionCode.Add 
					or EditFunctionCode.Release)
						for each CYCalendarDatesRel
				    		LocalCounter = 1
				    		while (LocalCounter <= 53
				    		and each.Dates.Date[LocalCounter] entered)  
				    			if (each.Dates.Date[LocalCounter] = EditDate)
				    				if (each.Dates.Date[LocalCounter + 1] entered)
				    					LocalNextPeriodDate = (each.Dates.Date[LocalCounter + 1])
				    				else 
				    					LocalNextPeriodDate = (each.NextYearCalendarDatesRel.Dates.Date[1])
				    				LocalCounter = 54
				    			else 
				    				if (each.Dates.Date[LocalCounter + 1] entered)
				    					LocalCounter += 1
				    			
				    				else 
				    					LocalCounter = 54	
						for each LYCalendarDatesRel			    								
				    		LocalCounter = 1
				    		while (LocalCounter <= 53
				    		and each.Dates.Date[LocalCounter] entered)  
				    			if (each.Dates.Date[LocalCounter] = EditDate)
				    				if (each.Dates.Date[LocalCounter + 1] entered)
				    					LocalNextPeriodDate = (each.Dates.Date[LocalCounter + 1])
				    				else 
				    					LocalNextPeriodDate = (each.NextYearCalendarDatesRel.Dates.Date[1])
				    				LocalCounter = 54
				    			else 
				    				if (each.Dates.Date[LocalCounter + 1] entered)
				    					LocalCounter += 1
				    				else 
				    					LocalCounter = 54	
								
									


									
						
		
		
		ErrorNumber is a DerivedField
			type is Numeric 3
			initialize ErrorNumber
			if (!EditFunctionCode.Add
			and !EditFunctionCode.Change
			and !EditFunctionCode.Release
			and !EditFunctionCode.Delete)
				ErrorMessage = 100
				return 100

	            					
		Msg100 is a MessageField
			"EditFunctionCode<EditFunctionCode>IsNotValid"

		DerivedTotalCycleCharges is a DerivedField
			type is like InternationalAmount
			return (sum FranchiseCycleChargeRel.CalculatedAmount)
		
		
	Field Rules
		EditFunctionCode
			required

        EditFranchiseCompany		
			required
       	
       	EditShipTo						
			required
       	
       	EditFranchiseCustomer		
			required
			
       	EditFranchiseContract				
			required  
			     	
       	EditSalesType		
			required
			       		
		EditDate		
			required
							
		EditAdjustmentNumber	
			required
									
	Relations
		FranchiseContractRel
			one-to-many relation to FranchiseContract
			Field Mapping uses symbolic key
                related.Company					= EditFranchiseCompany
                related.Customer				= EditFranchiseCustomer
                related.CustomerShipTo			= EditShipTo
                			
		FranchiseContractChargeRel
			one-to-one relation to FranchiseContractCharge
			Field Mapping uses ByFranchiseContractCharge	
                related.Company					= EditFranchiseCompany
                related.Customer				= EditFranchiseCustomer
                related.CustomerShipTo			= EditShipTo
                related.FranchiseContract		= EditFranchiseContract
                related.FranchiseContractCharge	= EditFranchiseContractCharge
                
        FranchiseSalesRel
            one-to-one relation to FranchiseSales
            required
            Field Mapping uses Set9
                related.Company           				= EditFranchiseCompany
                related.Customer          				= EditFranchiseCustomer
                related.CustomerShipTo    				= EditShipTo
                related.FranchiseContract 				= EditFranchiseContract
                related.FranchiseSales.Date 			= EditDate
                related.FranchiseSales.SalesType		= LocalSalesType
                related.FranchiseSales.AdjustmentNumber	= EditAdjustmentNumber

		FranchiseCycleChargeRel
			one-to-one relation to FranchiseCycleCharge
			Field Mapping uses Set2	
                related.Company							= EditFranchiseCompany
                related.Customer						= EditFranchiseCustomer
                related.CustomerShipTo					= EditShipTo
                related.FranchiseContract				= EditFranchiseContract
                related.FranchiseContractCharge			= EditFranchiseContractCharge
                related.FranchiseSales.AdjustmentNumber	= EditAdjustmentNumber
                related.FranchiseSales.SalesType		= LocalSalesType
                related.FranchiseSales.Date             = EditDate   
                
    	CYCalendarDatesRel
    		one-to-many relation to FranchiseCalendarDates
    		Field Mapping uses CalendarDatesByYear
    			related.Company						= EditFranchiseCompany
    			related.FranchiseCalendar			= EditFranchiseCompany.FranchiseCalendar
    			related.FranchiseCalendarDates.Year = EditFranchiseCompany.CurrentYear		
    	
    	LYCalendarDatesRel
    		one-to-many relation to FranchiseCalendarDates
    		Field Mapping uses CalendarDatesByYear
    			related.Company						= EditFranchiseCompany
    			related.FranchiseCalendar			= EditFranchiseCompany.FranchiseCalendar
    			related.FranchiseCalendarDates.Year = EditFranchiseCompany.CurrentYear - 1	   	


  						
  			  	
    	
    	
    	    	        	
