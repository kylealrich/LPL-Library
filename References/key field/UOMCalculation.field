UOMCalculation is a Field

    Representation
        Group Fields
        	InputUOM			 is a UnitOfMeasureEdit
            InputUOMConversion   is a UOMConversion
            InputToUOM           is a UnitOfMeasureEdit
            InputToUOMConversion is a UOMConversion
            InputQuantity        is a Quantity
            InputUnitCost        is an InternationalCost
            InputDecimal		 is a Quantity
			InputRoundType		 is a RoundingType
            Method               is Numeric size 2
            	States
            		ConvertToStock			value is 1
            		ConvertToBuy			value is 2
            		ConvertToAlternate		value is 3
            		ConvertToTransaction	value is 4
            		ConvertToSell			value is 5
            		ConvertToSellPrice		value is 6
            		ConvertToPrice			value is 7
            DoRounding			is Boolean
            ValidateDecimal		is Boolean
            
	Context Fields
		Item
			required
		Vendor
		VendorItem

	Local Fields
		ConvertQuantity				is a Quantity
		ConvertUnitCost				is an InternationalCost
		ConvertUOMConversion		is a UOMConversion
		ConvertToUOMConversion		is a UOMConversion
		RoundedValue
		LocalErrorMessage			is Alpha size 200
				
	Derived Fields
		DerivedQtyRoundTo is a DerivedField
			type is like Quantity
			if (Item.NumberOfDecimalsQuantity = 4
			or  InputDecimal = 4)
				return .0001
			else
			if (Item.NumberOfDecimalsQuantity = 3
			or  InputDecimal = 3)
				return .001
			else
			if (Item.NumberOfDecimalsQuantity = 2
			or  InputDecimal = 2)
				return .01
			else
			if (Item.NumberOfDecimalsQuantity = 1
			or  InputDecimal = 1)
				return .1
			else
			if (Item.NumberOfDecimalsQuantity = 0
			or  InputDecimal = 0)
				return 1
			else
				return 0

		DerivedCostRoundTo is a DerivedField
			type is like InternationalCost
			if (Item.NumberOfDecimalsCost = 8)
				return .00000001
			else
			if (Item.NumberOfDecimalsCost = 7)
				return .0000001
			else
			if (Item.NumberOfDecimalsCost = 6)
				return .000001
			else
			if (Item.NumberOfDecimalsCost = 5)
				return .00001
			else
			if (Item.NumberOfDecimalsCost = 4)
				return .0001
			else
			if (Item.NumberOfDecimalsCost = 3)
				return .001
			else
			if (Item.NumberOfDecimalsCost = 2)
				return .01
			else
			if (Item.NumberOfDecimalsCost = 1)
				return .1
			else
			if (Item.NumberOfDecimalsCost = 0)
				return 1
			else
				return 0
	
		OutputQuantity is a DerivedField
			type is like Quantity
			if (InputUOMConversion	entered)
				ConvertUOMConversion	= InputUOMConversion
			else
				ConvertUOMConversion	= InputUOM.UOMConversion
			if (Method.ConvertToBuy)
				if (InputToUOMConversion entered)
					ConvertToUOMConversion	= InputToUOMConversion
				else
					if (InputToUOM not entered)
						if (VendorItem		in context
						and VendorItem.VendorBuyUOM	entered)
							ConvertToUOMConversion	= VendorItem.VendorBuyUOM.UOMConversion
						else
							ConvertToUOMConversion	= Item.first DefaultBuyUOMRel.UOMConversion
					else
						ConvertToUOMConversion	= InputToUOM.UOMConversion
				if (ConvertToUOMConversion entered)
					ConvertQuantity = (InputQuantity * (ConvertUOMConversion / ConvertToUOMConversion))
				else
					ConvertQuantity = (InputQuantity * ConvertUOMConversion)
					
			if (Method.ConvertToAlternate)
				if (InputToUOM entered
				and InputUOM entered
				and InputToUOM.UnitOfMeasure 	= InputUOM.UnitOfMeasure)
					ConvertQuantity = InputQuantity
				if (InputToUOMConversion entered)
					ConvertToUOMConversion	= InputToUOMConversion
				else
					ConvertToUOMConversion	= InputToUOM.UOMConversion
				if (ConvertToUOMConversion entered)
					ConvertQuantity = (InputQuantity * (ConvertUOMConversion / ConvertToUOMConversion))
				else
					ConvertQuantity = (InputQuantity * ConvertUOMConversion)
					
			if (Method.ConvertToStock)
				ConvertQuantity = (InputQuantity * ConvertUOMConversion)
									
			if (DoRounding or ValidateDecimal)
				initialize RoundedValue
				RoundedValue.RoundInput			= ConvertQuantity
				if (InputRoundType.High)
					RoundedValue.RoundingType	= RoundedValue.RoundingType.High
				else
					RoundedValue.RoundingType	= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedQtyRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				OutputQuantity = RoundedValue.RoundResult
				if (ValidateDecimal)
					constraint (ConvertQuantity = OutputQuantity)
						"<ConvertErrorMessage>"
			else
				OutputQuantity = ConvertQuantity


		OutputUnitCost is a DerivedField
			type is like InternationalCost
			if (InputUOMConversion	entered)
				ConvertUOMConversion	= InputUOMConversion
			else
				ConvertUOMConversion	= InputUOM.UOMConversion
				
			if (Method.ConvertToBuy)
				if (InputToUOMConversion entered)
					ConvertToUOMConversion	= InputToUOMConversion
				else
					if (InputToUOM not entered)
						if (VendorItem	in context)
							ConvertToUOMConversion	= VendorItem.VendorBuyUOM.UOMConversion
						else
							ConvertToUOMConversion	= Item.first DefaultBuyUOMRel.UOMConversion
					else
						ConvertToUOMConversion	= InputToUOM.UOMConversion
				if (ConvertUOMConversion entered)
					ConvertUnitCost = (InputUnitCost * (ConvertToUOMConversion / ConvertUOMConversion))
				else
					ConvertUnitCost = (InputUnitCost * ConvertToUOMConversion)
					
			if (Method.ConvertToAlternate)
				if (InputToUOM entered
				and InputToUOM.UnitOfMeasure 	= InputUOM.UnitOfMeasure)
					ConvertUnitCost = InputUnitCost

				if (InputToUOMConversion entered)
					ConvertToUOMConversion	= InputToUOMConversion
				else
					ConvertToUOMConversion	= InputToUOM.UOMConversion
				if (ConvertUOMConversion entered)
					ConvertUnitCost = (InputUnitCost * (ConvertToUOMConversion / ConvertUOMConversion))
				else
					ConvertUnitCost = (InputUnitCost * ConvertToUOMConversion)
					
			if (Method.ConvertToStock)
				if (ConvertUOMConversion entered)
					ConvertUnitCost = (InputUnitCost / ConvertUOMConversion)
				else
					ConvertUnitCost = InputUnitCost
			
			if (DoRounding)
				initialize RoundedValue
				RoundedValue.RoundInput			= ConvertUnitCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedCostRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				OutputUnitCost = RoundedValue.RoundResult
			else
				OutputUnitCost = ConvertUnitCost
				
		ConvertMessage is a MessageField
			"CannotConvertQuantityCleanlyFor0DecimalItem;Use<InputToUOM>UOM"
			
		ConvertErrorMessage is a DerivedField
			type is MessageField
			if (LocalErrorMessage entered)
				return LocalErrorMessage
			else
				return ConvertMessage

								
	Field Rules
		InputToUOM
			if (Method.ConvertToAlternate)
				if (InputToUOMConversion not entered)
					required
					
		InputUOM
			if (InputUOMConversion not entered)
				required
