UnitCostCurrencyExchange is a Field

    Representation
        Group Fields
			ToCurrency
			EnteredCurrencyRate		is a CurrencyExchangeRate						
			EnteredCurrencyUnitCost	is an InternationalCost		
				precision is OutputNumberOfDecimals 
		        
	Patterns
		implements CompactFormat
		        
    Context Fields
		FinanceEnterpriseGroup
		FromCurrency
		TransactionUnitCost		is a UnitCost
		ExchangeDate
		ContextToCurrency		is a ToCurrency
		ItemGroup
		InventoryCompany
		Item
		ItemType	
	
	Local Fields
		LocalToCurrency			is a ToCurrency
		TranCurrRelationship	is a CurrencyRelationship
		TriangulateFrRel		is a CurrencyRelationship
		TriangulateToRel		is a CurrencyRelationship
		TranCurrExchangeRate    is a CurrExchangeRate
			version is ExchangeDate
		TriangFrExchangeRate    is a CurrExchangeRate
			version is ExchangeDate
		TriangToExchangeRate    is a CurrExchangeRate
			version is ExchangeDate
		LocalSellRate           is Decimal 31.15
		FiveDecimal				is an InternationalCost
		FourDecimal				is Decimal 18.4
		ThreeDecimal			is Decimal 18.3
		TwoDecimal              is an InternationalAmount
		OneDecimal				is Decimal 18.1
		NoDecimal				is Decimal 18

	Derived Fields
			
		OutputCurrencyUnitCost		is a DerivedField
			type is like InternationalCost
				precision is OutputNumberOfDecimals
			if (ToCurrency entered)
				LocalToCurrency = ToCurrency
			else
				LocalToCurrency = ContextToCurrency
			if (LocalToCurrency not entered)
				LocalToCurrency = FromCurrency
							
			if (FromCurrency = LocalToCurrency)
				OutputCurrencyUnitCost = TransactionUnitCost
			else				
			if (EnteredCurrencyUnitCost entered)
				OutputCurrencyUnitCost = EnteredCurrencyUnitCost
			else
				TranCurrRelationship.FromCurrency	      = FromCurrency
				TranCurrRelationship.ToCurrency		      = LocalToCurrency
				TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship
				if (TranCurrRelationship.MultDiv.Multiply)
					OutputCurrencyUnitCost = (TransactionUnitCost * OutputCurrencyRate)
				else				
					OutputCurrencyUnitCost = (TransactionUnitCost / OutputCurrencyRate)
			
			if (OutputNumberOfDecimals = 5)
				FiveDecimal = OutputCurrencyUnitCost
				return FiveDecimal
			else			
			if (OutputNumberOfDecimals = 4)
				FourDecimal = OutputCurrencyUnitCost
				return FourDecimal
			else
			if (OutputNumberOfDecimals = 3)
				ThreeDecimal = OutputCurrencyUnitCost
				return ThreeDecimal
			else						
			if (OutputNumberOfDecimals = 2)
				TwoDecimal = OutputCurrencyUnitCost
				return TwoDecimal
			else
			if (OutputNumberOfDecimals = 1)
				OneDecimal = OutputCurrencyUnitCost
				return OneDecimal
			else			
				NoDecimal = OutputCurrencyUnitCost
				return NoDecimal				
				
		OutputCurrencyRate			is a DerivedField
			type is Decimal size 31.15
			if (FromCurrency not entered)
				return 1

			if (ToCurrency entered)
				LocalToCurrency = ToCurrency
			else
				LocalToCurrency = ContextToCurrency
			if (LocalToCurrency not entered)
				LocalToCurrency = FromCurrency	
			if (FromCurrency = LocalToCurrency)
				return 1

			if (EnteredCurrencyRate entered)
				return EnteredCurrencyRate 

			if (EnteredCurrencyUnitCost	not entered)
				return CurrencySellRate 

			TranCurrRelationship.FromCurrency	      = FromCurrency
			TranCurrRelationship.ToCurrency		      = LocalToCurrency
			TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship
			if (!TranCurrRelationship exists)
				return 1

			if (TranCurrRelationship.MultDiv.Multiply)
				return (EnteredCurrencyUnitCost / TransactionUnitCost) 
			else
				return (TransactionUnitCost / EnteredCurrencyUnitCost) 
				
		CurrencySellRate			is a DerivedField
			type is Decimal size 31.15		
			if (FromCurrency not entered)
				return 1			

			if (ToCurrency entered)
				LocalToCurrency = ToCurrency
			else
				LocalToCurrency = ContextToCurrency
			if (LocalToCurrency not entered)
				LocalToCurrency = FromCurrency	
			if (FromCurrency = LocalToCurrency)
				return 1
		
			TranCurrRelationship.FromCurrency	      = FromCurrency
			TranCurrRelationship.ToCurrency		      = LocalToCurrency
			TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship
			if (!TranCurrRelationship exists)
				return 1	

			if (TranCurrRelationship.Triangulate)			
				TriangulateFrRel.FromCurrency	            = FromCurrency
				TriangulateFrRel.ToCurrency		            = TranCurrRelationship.TriangulateVia
				TriangulateToRel.FromCurrency	            = TranCurrRelationship.TriangulateVia
				TriangulateToRel.ToCurrency		            = LocalToCurrency
				TriangFrExchangeRate.CurrencyRelationship	= TriangulateFrRel		
				TriangToExchangeRate.CurrencyRelationship	= TriangulateToRel
				return TriangulateCurrRate
			else
 				LocalSellRate = TranCurrExchangeRate.Rate
 				return LocalSellRate

		TriangulateFrRate			is a DerivedField		
			type is Decimal size 31.15
			return TriangFrExchangeRate.Rate

		TriangulateToRate			is a DerivedField		
			type is Decimal size 31.15
			return TriangToExchangeRate.Rate
			
		RelationshipOverrideTolerance is a DerivedField
			type is Numeric size 3
			return TranCurrRelationship.OverrideTolerance

		RateToleranceLoLimit		is a ComputeField
			type is Decimal size 31.15
			(CurrencySellRate - (CurrencySellRate * RelationshipOverrideTolerance / 100))
			
		RateToleranceHiLimit		is a ComputeField
			type is Decimal size 31.15
			(CurrencySellRate + (CurrencySellRate * RelationshipOverrideTolerance / 100))
			
		TriangulateCurrRate			is a ConditionalField
			type is Decimal size 31.15
			if  (TriangulateFrRel.MultDiv.Multiply)
				if  (TriangulateToRel.MultDiv.Multiply)
					(TriangulateFrRate * TriangulateToRate)
				else
					(TriangulateFrRate / TriangulateToRate)
			else
 			if  (TriangulateToRel.MultDiv.Multiply)
				(TriangulateToRate / TriangulateFrRate)
			else
				(1 / (TriangulateFrRate * TriangulateToRate))
 
 		OutputNumberOfDecimals is a DerivedField
 			type is Numeric size 1

			if (ItemType.Inventoried or	ItemType.NonStock)
				return Item.NumberOfDecimalsCost

			if (ItemType.Special or	ItemType.Service)
				if (InventoryCompany in context)
					return InventoryCompany.NumberOfDecimalsCost
				else
				if (ItemGroup in context)
					return ItemGroup.DefaultNumberOfDecimalsCost

			return 5
 			
	Conditions
		WithinRateTolerance
			when (EnteredCurrencyRate >= RateToleranceLoLimit
			and	  EnteredCurrencyRate <= RateToleranceHiLimit)
 			
	Field Rules
			
		ToCurrency
			default to ContextToCurrency		
			default to FromCurrency
			required
			
			if (FromCurrency != ToCurrency
			and FromCurrency entered)
				TranCurrRelationship.FromCurrency	      = FromCurrency
				TranCurrRelationship.ToCurrency		      = ToCurrency
				TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship
				constraint (TranCurrRelationship exists)
					"CurrencyRelationship<FromCurrency>-<ToCurrency>DoesNotExist"

				if (TranCurrRelationship.Triangulate)
					TriangulateFrRel.FromCurrency	            = FromCurrency
					TriangulateFrRel.ToCurrency		            = TranCurrRelationship.TriangulateVia
					TriangulateToRel.FromCurrency	            = TranCurrRelationship.TriangulateVia
					TriangulateToRel.ToCurrency		            = ToCurrency
					TriangFrExchangeRate.CurrencyRelationship	= TriangulateFrRel
					TriangToExchangeRate.CurrencyRelationship	= TriangulateToRel
					constraint (TriangulateFrRate != 0)
						"CurrencyRateDoesNotExistBetween<FromCurrency>To<TranCurrRelationship.TriangulateVia>"
					constraint (TriangulateToRate != 0)
						"CurrencyRateDoesNotExistBetween<TranCurrRelationship.TriangulateVia>To<ToCurrency>"
				else
					constraint (CurrencySellRate  != 0)
						"CurrencyRateDoesNotExistBetween<FromCurrency>To<ToCurrency>"

			if	(EnteredCurrencyRate entered
			and	 TranCurrRelationship.OverrideProtection)
				constraint	(EnteredCurrencyRate = CurrencySellRate)
					"CannotOverrideCurrencyRate"			

			if	(EnteredCurrencyRate entered
			and  TranCurrRelationship.OverrideTolerance	entered)
				constraint (WithinRateTolerance)
					"RateIsNotWithinToleranceRange"

		TransactionUnitCost
			required
						
		EnteredCurrencyUnitCost
			
			EnteredCurrencyUnitCost = OutputCurrencyUnitCost

			constraint (EnteredCurrencyUnitCost decimals <= OutputNumberOfDecimals)
				"TooManyDecimalsEntered"							

		EnteredCurrencyRate
			EnteredCurrencyRate = OutputCurrencyRate
			
			if (TranCurrRelationship.OverrideProtection)
				constraint (EnteredCurrencyRate = CurrencySellRate)
					"CannotOverrideCurrencyRate"
			
			if (TranCurrRelationship.OverrideTolerance entered)
				constraint (WithinRateTolerance)
					"RateIsNotWithinToleranceRange"
		
                    
