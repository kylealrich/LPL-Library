CreditTransaction is a Field

    Representation
        Group Fields
	        CreditCompany                is a ReceivableCompany
	        CreditCustomer               is a Customer
	        CreditBatch                  is a CrBatch
	        CreditSequence               is a CrPymntSeq
	        CreditType                   is a CrType
	        CreditNumber                 is a CrNbr	 
	        	holds pii
	        CreditSuffix                 is a Suffix
	        CreditApplicationAmount is a FinanceCurrencyAmountGroup 
	        	sql prefix is CrAPA 

	Context Fields
		AccountingEntity
		ReceivableApplication
	Transient Fields
		CreditCurrency			is a FromCurrency
			derive value from DerivedCreditCurrency

	Derived Fields
		DerivedCreditCurrency is a DerivedField
			type is like Currency			
			if (CreditType.Payment)
				return ReceivablePaymentRel.OriginalCurrency
			else
				return ReceivableCreditInvoiceDetailRel.OriginalCurrency


    Patterns
        implements CompactFormat

	Relations
        ReceivablePaymentRel
            one-to-one relation to ReceivablePayment
            valid when (CreditType.Payment)
            required
            Field Mapping uses symbolic key
                related.Company                 = CreditCompany
                related.ReceivablePaymentHeader = CreditBatch
                related.ReceivablePayment       = CreditSequence
	
        ReceivableCreditInvoiceDetailRel
            one-to-one relation to ReceivableInvoiceDetail
            Field Mapping uses symbolic key
                related.Company                									= CreditCompany
                related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType  	= CreditType
                related.ReceivableInvoiceDetail.Invoice       					= CreditNumber
                related.ReceivableInvoiceDetail.PaymentSeq 						= CreditSequence

	Field Rules
	
		CreditApplicationAmount
			CreditCurrency = DerivedCreditCurrency
			if (CreditApplicationAmount.CurrencyAmount not entered)
				if  (ReceivableApplication.EnteredAmount entered)
					CreditApplicationAmount.CurrencyAmount	= ReceivableApplication.EnteredAmount
				else
				if  (ReceivableApplication.DerivedDebitCurrency = DerivedCreditCurrency)
					CreditApplicationAmount.CurrencyAmount	= ReceivableApplication.ApplicationAmount.CurrencyAmount

			if (CreditType.Payment)
				CreditApplicationAmount.FunctionalAmount.ToCurrency 			= ReceivablePaymentRel.OriginalCurrency
				CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
	        	CreditApplicationAmount.ExchangeDate 							= ReceivablePaymentRel.DepositDate
			else
				CreditApplicationAmount.FunctionalAmount.ToCurrency 			= ReceivableCreditInvoiceDetailRel.OriginalCurrency
				CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
	        	CreditApplicationAmount.ExchangeDate 							= ReceivableCreditInvoiceDetailRel.TransactionDate

			if (ReceivableApplication.Company != ReceivableApplication.CreditTransaction.CreditCompany)
				initialize CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate

        	CreditApplicationAmount.KeepRateOnly							= true

	        	
