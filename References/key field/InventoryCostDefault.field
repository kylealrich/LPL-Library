InventoryCostDefault is a Field
	Representation
        Group Fields
        	InCompany								is an InventoryCompany
        	InInventoryLocation						is an InventoryLocation
        	InItem									is an Item
        	InQuantity								is a Quantity

	Local Fields
		LocalRemainingQuantity						is like Quantity 
		LocalInventoryCostHistoryCost				is like UnitCost
		LocalTotalUnitCost							is a UnitCost
		LocalTotalInventoryHistoryCost				is like UnitCost
		LocalInventoryCostHistoryQuantity			is like Quantity
		LocalInventoryCostHistoryRemainingQuantity 	is like Quantity 
		
				
	Relations 
    	InventoryCostHistoryFIFORel
    		one-to-many relation to InventoryCostHistory
    		Field Mapping uses Set3
    			related.Company				= InCompany
    			related.InventoryLocation	= InInventoryLocation
    			related.Item				= InItem
    			
    	InventoryCostHistoryLIFORel
    		one-to-many relation to InventoryCostHistory
    		Field Mapping uses Set5
    			related.Company				= InCompany
    			related.InventoryLocation	= InInventoryLocation
    			related.Item				= InItem
	
        ItemLocationRel
            one-to-one relation to ItemLocation
            Field Mapping uses symbolic key
                related.Company           = InCompany
                related.InventoryLocation = InInventoryLocation
                related.Item              = InItem
	
	Derived Fields
		DefaultInventoryCost is a DerivedField
			type is like UnitCost
			
			initialize LocalRemainingQuantity
			initialize LocalInventoryCostHistoryCost
			initialize LocalTotalUnitCost
			initialize LocalTotalInventoryHistoryCost
			initialize LocalInventoryCostHistoryQuantity
			initialize LocalInventoryCostHistoryRemainingQuantity			
			
			if (InCompany.CostingMethod.AverageCosting)
				LocalTotalUnitCost = ItemLocationRel.DerivedItemAverageCost
			else
			if (InCompany.CostingMethod.StandardCosting)
				LocalTotalUnitCost = ItemLocationRel.StandardCost
			else
			if (InCompany.CostingMethod.FirstInFirstOut)
				LocalRemainingQuantity = InQuantity
				for each InventoryCostHistoryFIFORel
					LocalInventoryCostHistoryRemainingQuantity = each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity
					if (LocalRemainingQuantity <= LocalInventoryCostHistoryRemainingQuantity)
						LocalInventoryCostHistoryQuantity = LocalRemainingQuantity
					else
						LocalInventoryCostHistoryQuantity = LocalInventoryCostHistoryRemainingQuantity
					LocalInventoryCostHistoryCost	 = LocalInventoryCostHistoryQuantity * each.UnitCost
					LocalTotalInventoryHistoryCost  += LocalInventoryCostHistoryCost
					LocalRemainingQuantity 			-= LocalInventoryCostHistoryQuantity
					if (LocalRemainingQuantity = 0)
						end for each
				LocalTotalUnitCost = LocalTotalInventoryHistoryCost / InQuantity
			else
			if (InCompany.CostingMethod.LastInFirstOut)
				LocalRemainingQuantity = InQuantity
				for each InventoryCostHistoryLIFORel
					LocalInventoryCostHistoryRemainingQuantity = each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity
					if (LocalRemainingQuantity <= LocalInventoryCostHistoryRemainingQuantity)
						LocalInventoryCostHistoryQuantity = LocalRemainingQuantity
					else
						LocalInventoryCostHistoryQuantity = LocalInventoryCostHistoryRemainingQuantity
					LocalInventoryCostHistoryCost	 = LocalInventoryCostHistoryQuantity * each.UnitCost
					LocalTotalInventoryHistoryCost  += LocalInventoryCostHistoryCost
					LocalRemainingQuantity 			-= LocalInventoryCostHistoryQuantity
					if (LocalRemainingQuantity = 0)
						end for each
				LocalTotalUnitCost = LocalTotalInventoryHistoryCost / InQuantity		
			
			return LocalTotalUnitCost
	
