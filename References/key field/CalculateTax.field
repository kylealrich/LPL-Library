CalculateTax is a Field

   	Representation
		Group Fields
			Function					is AlphaUpper 1				
				States
			        DoThirdPartyFunction	value is blank			
			        CalculateTax		   	value is "C"			
			        Inquire				   	value is "I"			
					VerifyTax	            value is "V"			
			        CalculateTaxable		value is "T"			
			        CalculateTaxRate		value is "R"			
			InFinanceEnterpriseGroup	is like FinanceEnterpriseGroup	 
				disable surrogates
			TaxEntity												
			InvoiceCompany				is a GeneralLedgerCompany		
			TaxableAmount				is an InternationalAmount	
			InvoiceAmount 				is an InternationalAmount	
			TaxAmount					is an InternationalAmount	
			ChargedTaxAmount			is an InternationalAmount	
			InvoiceDate					is Date
			ShipmentDate				is Date
			PaymentDate					is Date
			TaxDate						is Date						
			TaxCodeAccount    		    is like  FinanceCodeBlock		
	        CurrencyRate											
			MultDiv	       											
	        BaseCurrency 				is like ToCurrency				
	        TransactionCurrency 		is like FromCurrency		
	        NumberOfDecimals
	        FromCurrencyRate			is a CurrencyRate			
			CallingModule				is like Description			
			ProductClass				is AlphaUpper 40
			ProductTaxCategory	 		is like ProductTaxCategory       
			ProcessingTaxLineItem	    is Boolean					
			BypassEditingTaxCode		is Boolean					
    		BypassMemberEdit			is Boolean					

			TaxTransFunction			is AlphaUpper 1				
				States
			        Add		   			value is "A"				
			        Change				value is "C"				
					Delete	            value is "D"				
			PostDate			   		is Date
			TaxPointDate			    is Date						
			GeneralLedgerDate			is Date
				default label is "GlobalLedgerDate"
			TaxRate						is Percent 7.5	        
			BaseInvoiceAmount 			is an InternationalAmount
			BaseTaxableAmt 				is an InternationalAmount	
			BaseTaxAmt 					is an InternationalAmount
			BaseNbrOfDecimals			is Numeric size 1								
			Name						is like VendorName 
				holds pii
			TaxID
			VoucherNumber				is like VoucherNbrWithPrefix 
			Invoice						
			Suffix						 
			CancelSequence				is Numeric 4
			DocumentSequenceNumber		is a VertexDocumentSequenceId
			DistributionCompany			is Numeric size 4  
			NbrOfDecimals				is Numeric size 1
	        TransactionSource           is AlphaUpper size 1
	            States
	                InputAp  value is "I"	
	                OutputAr value is "O"	
	     	AccruedOrInvoiced           is AlphaUpper size 1
	            States
	                Invoiced value is "I"
	                Accrued  value is "A"
	        InvoicedOrCreditMemo        is AlphaUpper size 1
	            States
	                Invoice	 value is "I"
	                Credit	 value is "C"

			ThirdPartyFunction			is Alpha 1					
				States
			        Calculate			   	value is "I"			
			        CalculateAndWrite		value is "R"			
			        WriteToRegisterOnly		value is "O"			
			VertexQuantumOption			is Alpha 1					
				States
			        TaxComputation		   	value is "C"			
			        EditTaxCompany			value is "E"			
			        Inquire					value is "I"			
					GeoCodeLookup			value is "G"			
			InputVertexRequest				is AlphaUpper 1			
				States
					None						value is blank
					QuotationRequest 			value is "Q"
					AccrualRequest				value is "A"
					InvoiceRequest				value is "I"
					InvoiceVerificationRequest	value is "V"
					PurchaseOrderRequest		value is "P"
					LookupTaxAreaId				value is "L"
					DontCallVertex              value is "X"
			DontCreateResultFiles		is Boolean					
			DontCreateLogFile			is Boolean		
			System						is like GeneralLedgerSystemCode	
			ProcessLevel
			Customer												
			CustomerGrp					is like CustomerGroup
			VendorGrp					is like VendorGroup
			Vendor 						is like Vendor													
			CustomerClass				is Alpha 4
	        Exempt
			TaxCode						
	        PostalAddress				is a PostalAddressV2	
	        	holds pii
	        ToCountryCode				is like Country 		
	        BuyerAdminDestTaxCode		is like TaxCode				
	        BuyerAdminDestAddress		is a PostalAddressV2	
	        	holds pii
	        BuyerAdminDestCountryCode	is like Country 				
	        BuyerAdminCurrencyRate		is a CurrencyRate			
	        BuyerAdminCurrency 			is like Currency				
	        FromPostalAddress			is a PostalAddressV2	
	        	holds pii
	        FromCountryCode				is like Country	 		
	        FromTaxCode					is like TaxCode
	        POAAddress					is a PostalAddressV2	
	        	holds pii
	        POACountryCode				is like Country	 			
	        POATaxCode					is like TaxCode				
	        POACurrencyRate				is a CurrencyRate			
	        POACurrency 				is like Currency			
			LineNumber
	        Quantity
	        UnitCost
	        QuantityAmount				is an InternationalAmount
	    	UnitOfMeasure   			is AlphaUpper 4		        
	        ProductIsExempt				is AlphaUpper size 1
	       		States
	                Exempt  			value is "E"	 
	                Taxable 			value is "T"				
	        TransactionType             is AlphaUpper size 1
	            States
	                Sale  				value is "S"	 
	                Purchase 			value is "P"
	                Lease  				value is "L"	 
	                Rental 				value is "R"	                	
	        TransactionSubType          is AlphaUpper 3
	            States
	                Freight  			value is "FRT"	 
	                	        
	        Status                      is Numeric size 1
	            States
	                Created  value is 0
	                Reported value is 1
			VATProcess					is Boolean	
			RecoverableTaxAreaId		is like TaxCode 
			RecoverableJurisLevel 		is a VertexJurisdictionLevel	
			RecoverableImpositionType 	is a VertexImpositionType	
			BlockingOverridePercent		is a Percent	
			PartialExemptRecvblOvrdPct	is a Percent
	        VATRegistrationCountry      is like Country				
	        VATRegistrationNumber	
			ToHasPhysicalPresenceInd 	is Boolean		        	 
	        FromVATRegistrationCountry  is like Country				
	        FromVATRegistrationNumber	is a VATRegistrationNumber
			FromHasPhysicalPresenceInd 	is Boolean		
			OverrideHasPhysicalPresenceInd	is Boolean				
			CalculateVendorTaxIndicator	is Boolean					
	       	DefaultFilingCurrency 		is like Currency			
	        TaxUsageCode	
			DeliveryTerms				is like ShipTerm
			VATInputTaxAmount			is an InternationalAmount	
			VertexVATType				is a VatType	
  			RecoverableDate  			is Date
			FreightAmount 				is an InternationalAmount
			VertexSimplificationCode	is a SimplificationCode	
			VATReverseIndicator			is Boolean
	        TaxYear
	        TaxPeriod
	        Location					is like InventoryLocation
			CountryCode					is like Country	 			
			VertexResponse 				is a SEnvelopeVertex		
			ResultsCount				is Numeric 6			
			JurisSeq					is Numeric size 3			
			TableIdx					is Numeric 3
				default label is untranslatable
			Idx							is Numeric size 3			
			Idx2						is Numeric size 3
			RelatedObjectReference		is BusinessObjectReference 	
			UniqueIdOfRelatedObject 	is UniqueID					
			JurisdictionResultsKey		is Alpha 100				
			ResponseBusclassKey			is a LastSequence 			
			MessageLogKey				is Alpha 100				
			MessageLogSequence			is Numeric size 3	
			TaxAreaResultSeq			is Numeric size 3			
			PostalAddressResultSeq		is Numeric size 3			
			JurisResultSeq				is Numeric size 3			
			StatusResultSeq				is Numeric size 3			
			TurnDisplaySw				is Numeric 1
				States
					Off					value is 0
					On					value is 1
					
			LoadPostalAddressResults	is AlphaUpper 1
				States
					Yes					value is "Y"
					No					value is blank	
			LoadJurisResults			is AlphaUpper 1
				States
					Yes					value is "Y"
					No					value is blank					 
			LoadStatusResults			is AlphaUpper 1
				States
					Yes					value is "Y"
					No					value is blank					 
			IntercompanyBilling			is Boolean		
			AppendToJurisFile			is Boolean
			DisplayOn					is Boolean
			InputReference				is Alpha 40		
			IsMulticomponent 			is Boolean	
			TaxStructure				is Alpha 20
				States	 
					Bracket 	value is "BRACKET"		
					FlatTax 	value is "FLAT_TAX"		
					Quantity	value is "QUANTITY"		
					SingleRate	value is "SINGLE_RATE"	
					Tiered		value is "TIERED"		
			EntityTaxCodeDefault		is like TaxCode	
			MaterialCode				is Alpha 40	
			MaterialOrigin				is Alpha 60	
			ReceivablesTaxingLocation	is a TaxingLocation	 			  
			PayablesTaxingLocation	is a TaxingLocation	
			TaxingLocation				
			UserElementLevel			is Alpha 1
				States
					Invoice				value is blank
					Line				value is "L"
					LineOnly			value is "O"
			SabrixUserElement			is a UserElementGroup			
			OneSourceTaxAttribute50		is a TaxAttributeGroup50		
			BypassEditing				is Boolean
			VendorCustomerName			is a VendorName 
				holds pii
			CommodityCode				is like ICNCode 
			EAMCommodityCode							
			ReceiptSite					is Text	
			Pos1                        is Numeric 2
			Pos2                        is Numeric 2
			Pos3                        is Numeric 2
			Pos4                        is Numeric 2	
			Pos5						is Numeric 2	
			NbrOfRightSlashes			is Numeric 4
			LoadValueFor				is Numeric 1
				States
					City				value is 0
					County				value is 1	
					State				value is 2	
			BegCounty                   is Numeric 2
				default label is untranslatable
			BegState                    is Numeric 2
				default label is untranslatable
			BegCountry                  is Numeric 2
				default label is untranslatable
			EndCountry					is Numeric 2
				default label is untranslatable
			ShipToCountry				is like Country
			CharPos						is Numeric 4
			BegPos						is Numeric 4
			EndPos						is Numeric 4
			VertexFlexibleFields		is a FlexibleFields			
			VertexAttributes			is a VertexAttributeGroup	
			InputReturnVertexTaxIn		is Alpha 1				
				default label is untranslatable
				States
					Default				value is blank	 
					Summary				value is "S"	 			 
					Detail				value is "D"	
						default label is "Detail"
			InputTaxDistributionCode	is like TaxDistributionCode	
			OriginalInvoiceNumber 	is like Invoice	 
			IsCancelled           	is Boolean  	 
			Description       							 
			UniqueLineNumber 		is a UniqueID		
			EachLineUniqueID 		is UniqueID			
			ItemNumber 				is like Item  		 
			ReturnOneSourceTaxIn	is Alpha 1				 			 
				States
					Default				value is blank	 
					Summary				value is "S"	 			 
					Detail				value is "D"	
						default label is "Detail"
			OutputUserElementLoaded	is Alpha 1	
				States
					NoUserElements		value is blank
					InvoiceLevel		value is "I"
					LineLevel			value is "L"
			SendMultLineItems		is Boolean					
			UpdateLineItems			is Boolean					
			TestEncryptedPasswords	is Boolean
			UserTemplateEnabled		is Boolean					
			CreateTaxLogMessage 	is Boolean					
			Division				
			Department				is Alpha 40
			LineItemNumber			is Alpha 3
			ValidateConnection	 	is Boolean					
			PassedInTrustedId		is Password					
			DeleteJurisdictionResultsFromExternal	is Boolean
			VertexVersion			is Numeric 1
				States
					Version7				value is 0
					Version7UT				value is 1
						default label is "Version7(UserTemplate)"
					Version8				value is 2
					Version9				value is 3
			OverrideTaxEntity			is like TaxEntity	
			NoHaltOnErrorOfTaxLineItem	is Boolean			
			OneSourceVersionType		is Alpha 1			
				States										
					Original			value is blank		
					Generic				value is "G"		
			ValidationPostalAddress		is a PostalAddressV2	
				holds pii
			PointOfTitleTransfer is AlphaUpper 1    		
    			States
					None          value is blank
					Destination   value is "D"
					Origin        value is "O"
					InTransit     value is "I"
			GeneralLedgerAccount	    is Alpha 40 
			VendorSKU	    			is Alpha 40 
			CostCenter				    is Alpha 40 
			LookupUsingTaxAreaId is Boolean						
			OverrideCalculateVendorTaxIndicator is Alpha 1		
				States
					Default				value is blank
					SetToTrue           value is "T"
					SetToFalse			value is "F"
			ValidateVertexRequest		is Alpha 1 					
				States
					Default     	value is blank		
					Quotation		value is "Q"
					PurchaseOrder	value is "P"	
			UNSPSCCode  is Alpha 8  
			HSNSACCode				
			VertexAccessType		is Numeric 1	   			
				States
					Basic		value is 0
					OAuth		value is 1	

	Transient Fields			 
		DoTaxCalculation				is Boolean				
		TaxType
		NumberOfTaxCodes				is Numeric 2
        TaxTable						is a TaxTableField		
        IntrastatUsed					is Boolean
        VerifiedOK						is Boolean
        TaxTransactionPosted			is Boolean
		UseTaxCodeAccounts				is Boolean
        OutputTaxRate					is Percent size 7.5
        OutputTotalTaxAmount			is an InternationalAmount
		OutputTotalTaxable				is an InternationalAmount
		OutputTotalTaxAmount5DP			is an InternationalCost
		OutputTotalTaxAmount8DP			is an InternationalCost
		OutputTotalLandedTaxAmount		is an InternationalAmount
		OutputTotalLandedTaxAmount5DP	is an InternationalCost
		OutputTotalLandedTaxAmount8DP	is an InternationalCost
		OutputInvoiceTotal			 	is an InternationalAmount
		OutputTaxCodeInError			is like TaxCode
		OutputErrorCategory				is Alpha 5
		ReturnedErrorNumber				is Numeric 3
		OutputTransactionId				is Numeric 10
		OutputlTaxToleranceDiff			is an InternationalAmount
		LocalTaxAmountDifference		is an InternationalAmount 
		ReturnedTaxInputAccount	    	is a FinanceCodeBlock				 
		ReturnedTaxOutputAccount	    is a FinanceCodeBlock	
		ReturnedTaxAccrualAccount	    is a FinanceCodeBlock		
		ReturnedTaxVariance				is an InternationalAmount
		ReturnedAdditionalTaxesDue		is an InternationalAmount
		ReturnedOutsideThreshold		is Boolean
		LineItemChargedTax		 		is an InternationalAmount	
		ReturnedTotalChargedTax  		is an InternationalAmount			
		OutputCurrencyRate				is a CurrencyRate
		ReturnedBaseTaxAmount			is a InternationalAmount
		ReturnedBaseTaxableAmount		is a InternationalAmount
 
		DocumentDate 					is Date 
		OutputGeoCode					is like TaxCode	
		Output1stTaxAreaId				is like TaxCode	
		OutputMultipleGeoCodes 			is a MultipleGeoCodes 
		MultipleTaxAreaIds				is Boolean
		OutputJurisdictions				is a JurisdictionTable						
		OutputTransactionType			is Alpha 8
		VertexTaxResult 				is Alpha size 50
		OutputThirdPartyProcessed		is a ThirdParty
		ResultsLookupKey 				is Alpha 100
		ResultsLookupKeySequence		is like Sequence
		WebServiceError 				is Boolean
		WebServiceErrorMessage 			is Text
		OutputVertexReporting			is like Description
		ReverseCharge					is Boolean				
		InvoiceTextCode					is a InvoiceTextCodeOut	 
		SummaryInvoiceText				is Alpha 200
		IsService						is Boolean
		RateClassificationText			is a RateClassification
		SellerRegistrationId			is Alpha 40	
		BuyerRegistrationId				is Alpha 40		
        RecoverableAccount        		is a FinanceCodeBlockFull   
        NonRecoverableAccount        	is a FinanceCodeBlockFull   	
   		ForeignRecoverableAccount  		is a FinanceCodeBlockFull  
        ForeignNonRecoverableAccount    is a FinanceCodeBlockFull  
		RecoverableAmount 				is an InternationalAmount
		RecoverablePercent  			is a TaxRateValue	
		UnrecoverableAmount 			is an InternationalAmount
		Imposition						is Alpha 40
		ReturnedTaxType					is Alpha 40
		InputOutputType					is Alpha 20
		ReturnedJurisLevel 				is a VertexJurisdictionLevel	
		ReturnedImpositionType 			is a VertexImpositionType
		FilingCurrencyConversion 	is a CurrencyExchangeRate	 
		FilingIsoCurrencyCodeAlpha 	is Alpha 3					 		 
		FilingIsoCurrencyCodeNum 	is Numeric 3				 		 
		FilingCalculatedTax 		is an InternationalAmount
		FilingExempt  				is an InternationalAmount
		FilingNonTaxable 			is an InternationalAmount
		FilingTaxable 				is an InternationalAmount
		FilingRecoverableAmount 	is an InternationalAmount
		FilingUnrecoverableAmount 	is an InternationalAmount
		TransferTrace					is Alpha 1500
		SaveJurisdictionResults     	is like JurisdictionResults
		ReturnedTotalTax 					is an InternationalCost
		ReturnedInvoiceTotal				is an InternationalAmount	
		ReturnedTaxable						is an InternationalCost
		ReturnedSubTotalTax					is an InternationalCost
		ReturnedTotalRate					is Percent size 7.5
		ReturnedVertexStatus				is Alpha 100
		ReturnedVertexTaxCode				is Text	
		ReturnedUserDefinedTaxCode			is a VertexUserDefinedTaxCode
		ReturnedVertexRequest				is Alpha 40
		ForeignIndicator					is Boolean
		ForeignOrDomestic					is Numeric 1
			States
				Domestic					value is 0
				Foreign						value is 1
		RequestReference					is Alpha 30	
		VertexRoutineExecuted				is Alpha 50	
		ReturnedPostToJournal				is Boolean
		ReturnedSitusLocation				is Alpha 26				  
       	SabrixResponse 						is a OneSourceTaxCalculationResponse
        SabrixRequest 						is a OneSourceTaxCalculation
		DisplayMonitor   					is RichText
		SuccessStatus 						is Boolean
		SabrixReturnMessage					is Text
		SabrixReturnedTaxCode				is like TaxCode
		SabrixErrorSeverity					is Alpha 1
			States
				Informational	value is "0"
				Warning			value is "1"
				Severe			value is "2"
		SabrixErrorLocation					is Text
		SabrixErrorCategory					is Text
		SabrixErrorCode						is Text
		ReturnedIsExempt					is Boolean	
		ExcludeFromTaxEstimate				is Boolean  
		TaxingJurisdiction
		OneSourceInformationMessage			is Text
		OutputTaxCodeDescription			is a Description	
		NotSentToSabrix 					is Boolean	
		CapturedXml  						is Text			
		NotRegisteredIndicator				is Boolean	
		ApprovalRequired					is Boolean	
		ReturnedUserElement					is a UserElementGroup	
		CreateOutputUserFieldFile			is Boolean				
		OutputConfIndicator		is Numeric 3
		OutputAddrCleansingCode	is Alpha 5
		OutputAddrCleansingMsg	is Alpha 25
		ReturnedInvoiceTextCode	is a InvoiceTextCodeOut
		TotalFlexibleFields		is Numeric 3
		NumberOfTaxesReturned	is Numeric 3
		NumberOfJurisdictions	is Numeric 3
		NumberOfTaxLineItems	is Numeric 6		
		NumberOfTaxAreaIdsReturned	is Numeric 3	
		NumberOfAddressesReturned	is Numeric 3
		NumberOfStatusesReturned	is Numeric 3		
		LineFlexFieldNbr		is Numeric 3
		LineFlexFieldCode		is Alpha 40		
		CapturedRequestXML		is Text
		CapturedResponseXML		is Text
		ShowXml					is XMLDocument		 
		ReturnedHTTPInfo		is a HTTPInfo
		HttpXmlNotCaptured		is Boolean
		FaultCode				is Alpha 30			
		ExceptionType			is Alpha 30			
		RootCause				is Alpha 60			
		Faultstring				is Alpha 60			
		TotalElapsedTime		is Decimal 12.2
		CountTaxLineItems       is Numeric 6
		CountTaxLineItemsExcluded is Numeric 6
		CountLineItemsInError	is Numeric 6
		TotalLineItemsProcessed is Numeric 6
		TaxLineItemShipToTaxCode is like TaxCode
		LineItemErrored			is Boolean
		DocumentType				is Alpha 50				
		EndUser						is an Actor				
		ExternalCompany				is a ExternalCompanyId 
		ExternalCompanyName			is a Description	 
     	CallingSystem				
		FilterGroupName				
		FilterGroupOwner			
		ProductMappingGroupName		
		ProductMappingGroupOwner	
		HostSystem					
		IsAudited					is Boolean	
		OutputTaxIncludedInd        is Boolean	
			default label is "OutputTaxIncludedIndicator"
		ReturnedValidationAddress 	is a PostalAddressV2	
			holds pii
		ReturnedRuleId					is Alpha 20			
	Context Fields							
		FinanceEnterpriseGroup
						
	Local Fields
		VtxIdx								is Numeric 2		
		LocalMessageLevel					is Alpha 6
		LocalTaxMessageGroup				is a TaxMessageGroup		   
		LocalExplaination					is Alpha 200
		MessageCategory						is Alpha 10	 				
		MessageCode							is Alpha 6	 
		TaxMessageText						is Alpha 200
		TaxMessageSeverity					is Alpha 1				 
			States
				Informational	value is "0"
				Warning			value is "1"
				Severe			value is "2"		
		LocalErrorCategory					is AlphaUpper 5
		LocalErrorNumber					is Numeric 3
		LocalTaxAmount						is an InternationalCost
		LocalWorkTaxAmount					is an InternationalCost
		LocalLandedTaxAmount				is an InternationalCost
		LocalTaxRate						is Percent 7.5
		LocalSecondaryRate					is like ChrgRate  
		LocalEffectiveDate2					is like EffectiveDate			 
		LocalAccumulatedTaxRate				is Percent 7.5
		LocalAccumulatedTableTaxRate 		is Percent 7.5
		LocalAccumulatedTaxable				is an InternationalAmount
		LocalAccumulatedTaxAmt				is an InternationalAmount
		LocalTaxCode						is a TaxCode
		LocalTableTaxCode					is a TaxCode
		LocalTableTaxAmount					is an InternationalAmount
		LocalTaxCodeInError					is like TaxCode
		LocalTaxTable						is like TaxCode	
 		LocalProductTaxCategory				is like ProductTaxCategory 
		LocalEffectiveDate    				is an EffectiveDate		
		SaveEffectiveDate    				is Date
		LocalInvoiceAmount 					is an InternationalAmount
		LocalTaxableAmount 					is an InternationalCost
		LocalCounter 						is Numeric size 2
		LocalCounter2 						is Numeric size 2
		LocalTransactionId					is Numeric 10
		LocalTaxTableBuilt					is AlphaUpper 1
			States
				Yes	value is "Y"
				No	value is "N"
		LocalTaxRatesLoaded					is AlphaUpper 1
		LocalSaveTaxPointDate			    is Date
		CSFToleranceSet						is Boolean	
		LocalFromRateLimit 					is Percent size 7.4
		LocalThruRateLimit					is Percent size 7.4
		LocalToleranceLimit 				is an InternationalAmount
		LocalToleranceAmount				is an InternationalAmount
		LocalBaseTaxAmount					is an InternationalAmount
		LocalPositiveTaxAmtDiff				is an InternationalAmount   
		LocalSaveTaxAmount 					is an InternationalAmount 				 				 
		LocalSaveTaxableAmount 				is an InternationalAmount
		LocalConvertTaxAmtToBase			is an InternationalAmount
		LocalConvertTaxableToBase			is an InternationalAmount
		InputTaxAmount						is an InternationalAmount
		LocalSaveTaxRate					is Percent size 7.4 
		LocalSaveTaxCode					is a TaxCode 			 
		UseNewTaxAmount						is Boolean
		LocalWorkTotalTax					is an InternationalCost
		LocalNextTaxableAmount 				is an InternationalCost
		LocalWorkTaxable					is an InternationalCost
		DerivedTaxable						is Boolean
		LocalWorkInvoiceAmount				is an InternationalAmount
		LocalWorkTaxableRounded				is an InternationalAmount
		LocalWorkInvoiceAmt					is an InternationalAmount
		LocalComputedTax					is an InternationalAmount
		LocalBeginTaxableAmount				is an InternationalAmount
		LocalWorkTotalTaxable				is an InternationalCost
		LocalComputedInvoiceAmt				is an InternationalAmount
		I9									is Numeric size 2					
		LocalCountryCode					is like Country			
		LocalCurrencyCode					is like Currency	
  		LocalToCountrySize					is Numeric 3
  		LocalFromCountrySize				is Numeric 3	
  		LocalPOACountrySize					is Numeric 3
  		LocalExecuteCheckCountryCode		is Numeric 3
    	FromEntity			 				is a AccountingEntity				
		LocalExchangeDate		 			is a ExchangeDate
		LocalTransactionAmount		 		is a CurrencyAmount
		LocalEnteredRate					is a CurrencyRate
		DisplayBaseAmount					is an InternationalAmount	
		LocalBaseAmount						is a CurrencyExchange
		LocalExecuteReturnBlank	  			is AlphaUpper 1	
		LocalExecuteReturnBlank2  			is AlphaUpper 1	
		ValidAccountsTrigger	  			is Alpha 1
		LocalTrigger					    is Alpha 1
		LocalTrigger2                       is Alpha 1
		TaxVerifiedTrigger	  				is AlphaUpper 1	
		SaveMessageLogKey					is Alpha 100
		LocalTrace							is Alpha 1500 
		DisplayLocalTrace					is Text	
		ResultsLastSeq						is a LastSequence 
		PostToJournal						is Boolean
		LocalRequestReference				is Alpha 30	
		LocalVertexRequest					is AlphaUpper 1
			States
				None						value is blank
				QuotationRequest 			value is "Q"
				AccrualRequest				value is "A"
				InvoiceRequest				value is "I"
				InvoiceVerificationRequest	value is "V"
				PurchaseOrderRequest		value is "P"
				LookupTaxAreaId				value is "L"
				DontCallVertex              value is "X"
		LocalCountryCityStateZip			is like Description	
		LocalCityCountyState				is like Description
		LocalCountryCityStateZipReturned	is like Description	
		LocalCityStateZip					is like Description
		LocalCityStateZipReturned			is like Description
		LocalCtryCityStateZipEntered		is like Description
		LocalStreetAddress1					is like Description
		LocalCity 					is Alpha 15
		LocalState					is Alpha 2
		LocalZip					is Alpha 10		
		LocalCountry				is Alpha 3	
		LocalCounty					is a Description
		LocalParsedCity 			is a Description
		LocalParsedState			is Alpha 2
		LocalParsedCounty			is a Description
		LocalParsedCountry			is Alpha 2	
		LocalEachTaxCode 			is like TaxCode
		LocalEachShipToAddress 		is a PostalAddressV2 
			holds pii
		EachXmlLine					is Numeric 6		
		EachLineItemSequence		is Numeric 6		
		EachLineId 					is Numeric 6		
		LineNbr						is Numeric 6
		EachLineItemNumber			is Numeric 6		
		EachLineTaxAmount			is an InternationalAmount		
		LocalExtendedPrice			is an InternationalAmount
		NewLookupKey 				is Alpha 100
		NewLookupKeySequence		is like Sequence
		ReturnedTaxAreaId			is like TaxCode
		LocalConfidenceInd			is Numeric 3
		ReturnedConfInd				is Numeric 3
		LocalContinue				is Boolean
		Initials					is Alpha 3		
		CreateLogFileHere			is Boolean
		StringTableValues	 		is Text
        ToISOCountryCode			is like Country 	
        FromISOCountryCode			is like Country	 	
        POAISOCountryCode			is like Country		
        BuyerAdminDestISOCountryCode is like Country 	
		LocalTestTaxTotal			is an InternationalAmount
		LocalCreateLogFile			is Boolean	
		JurisdictionHasBeenCreated	is Boolean
		LocalInvoiceTextCode		is a InvoiceTextCodeOut
		TaxIncludedIndicator		is Boolean
		SaveInputTaxableAmount		is an InternationalAmount
		LocalAccruedOrInvoiced		is AlphaUpper size 1
	            States
	                Invoiced value is "I"
	                Accrued  value is "A"
		LocalAccrualCode			is like PayablesAccrualCode			
		LocalVertexEventType		is AlphaUpper size 1	
	            States
	                Procurement 	value is "P"				 
	                Supplies      	value is "S"				 
	    LocalBuyerTaxRegistration	is a VATRegistrationNumber	
	    LocalSellerTaxRegistration	is a VATRegistrationNumber	
	    BypassWebserviceCall		is Boolean
	    TestingMode					is Boolean
	    DebugMode					is Boolean
		LocalContinueProcessing		is Boolean  
		LocalVertexVersionUsed		is Alpha 10 
		CommodityCodeExcludeFlag 	is Boolean
		LocalExcludeFromSabrixCall	is Boolean
		BypassNonUS					is Boolean		 
		ExcludeFromInvoiceAmount	is an InternationalAmount
		ExcludeToInvoiceAmount		is an InternationalAmount
		LocalInputOnly				is Boolean
		PostalCodeLast4				is Alpha 4
		PostalCodeFirst5			is Alpha 5
		TaxableCity 				is a Description
		TaxableState				is a Description
		TaxableCounty				is a Description
		LocalLineExcludeFromSabrixCall is Boolean
		LineShipToCountry			is like Country
		LineCommodityCode			is like ICNCode
		LineLevelExclusions 		is Text			
		MyVertexError			is a VertexEnvelopeError
		MyOneSourceError		is a OneSourceEnvelopeError		
		MyHTTPInfo 				is a HTTPInfo
		HttpStatusCode 			is Numeric 3	
		CheckHttpStatusCode      is Alpha 1   					
            States
            	Unknown			  value is "0"  
                Informational	  value is "1"	
				Successful        value is "2"	
				Redirection		  value is "3"	
				ClientError       value is "4"	
				ServerError       value is "5"  
		CapturedWebserviceError	is Text			
		FaultString 			is Alpha 60	
		VertexInvoiceVerificationRequest is Alpha 1	 				 
            States 
                Enabled  value is ""
                Disabled value is "D"
		VertexPurchaseOrderRequest is Alpha 1	 				 
            States
                Enabled  value is ""
                Disabled value is "D"
		LocalReturnVertexTaxIn				is Alpha 1				
				States
					Default				value is blank	 
					Summary				value is "S"	 			 
					Detail				value is "D"	
						default label is "Detail"	
		LocalReturnVertexTaxInLabel     is Alpha 10				
		LocalTaxDistributionCode		is like TaxDistributionCode	
		LocalTaxDistributionLevel		is a TaxDistributionLevel	
		LocalDistributionType			is a VertexImpositionType	
		LocalNoTaxDistributionRecFound	is Boolean					
		ZoneLevel           			is Alpha 30
		ZoneName						is Alpha 30
		ZoneLevelTaxAmount 				is an InternationalAmount
		TblIdx							is Numeric 2
		Attr							is Numeric 2
		LocalReturnedUserElement 		is a TaxAttributeGroup50	
		TaxAmountIsZero					is Boolean					
		DebugSpot                       is Alpha 4					
		LocalTaxLineItemsCount			is Numeric 6				
		TaxLineItemsExist				is Boolean					
		LocalTaxLineItem		is like DistributionSequence		
		RequestXML				is XMLDocument
		ResponseXML				is XMLDocument
		Counter					is Numeric 3
		Trigger					is Alpha 1
		LocalXml				is XMLDocument
		LocalBuildSingleLineXml is XMLDocument	
		LocalBuildMultilLineXml	is XMLDocument	
		LocalTransactionXml		is XMLDocument
		LocalRecoverableVatXml	is XMLDocument
		LocalDestAddressXml		is XMLDocument
		LocalFromAddressXml		is XMLDocument	
		LocalXmlString			is XMLDocument
		FlexFieldString250		is XMLDocument
		LocalLineFlexFldsXml	is XMLDocument	
		LocalVertexEnvelopeXml	is XMLDocument		
		FlexibleFieldTag 		is Numeric 1			  
            States
            	NotStarted		value is 0
                Started	 		value is 1
		LocalTaxingLocation		is AlphaUpper 26
		FirstLineItemNumberSeq	is Numeric 6
		LocalConvertDate		is Alpha 10				
		LocalAmount				is an InternationalAmount			
		LocalPercent			is Percent 6.3
		LineEffectiveRate		is Percent 6.3
		LineCalculatedTax		is an InternationalAmount
		Continue				is Boolean
		IUserName				is Alpha 64
		IPassword				is Alpha 64
		LocalTrustedId 			is Password				
		SecuredTrustedId		is a XMLElementPassword	
		ReturnAssistedParametersIndicator 	is Boolean
		CommodityCodeType			is Alpha 60							
			States
				UNSPSC					value is "UNSPSC"				
				NCM						value is "NCM"					
				Service					value is "Service"				
				Invalid					value is "InvalidType"			
				HSN                     value is "HSN"					
		FieldIdAlpha 			is Alpha 3
		BlankSpace				is Alpha 8
		FlexNumericNbrOfDec		is Alpha 2
		Flexible				is Alpha 8	
		IdxAlpha				is Alpha 2	
		FieldId 	 			is Numeric 3		 
		FlexValue	 			is Alpha 250	
		NumberOfInvoiceTextCodes   is Numeric 1
		NbrOfFilingCurrencyAmounts	is Numeric 3
		JurisIdx				is Numeric 2
		AddrIdx					is Numeric 2
		StatusIdx				is Numeric 2
		LineItemNbrIdx			is Numeric 6
		SkipThis				is Boolean
		InvoiceTextCodeArray	is a InvoiceTextCodesArray				
		LocalStartTimestamp		is TimeStamp 
		LocalStopTimestamp		is TimeStamp
		RequestStartTimestamp	is Time		 
		RequestStopTimestamp	is Time		
		ResponseStartTimestamp	is Time		 
		ResponseStopTimestamp	is Time				
		BuildStartTimestamp		is Time		 
		BuildStopTimestamp		is Time							
		EachLineTaxCode			is a TaxCode
		BypassOneSourceCall		is Boolean
		ProcessResponseUsingXpath		is Boolean					
		ProcessResponseUsingPartialXpath is Boolean					
		MyXMLDocument			is XMLDocument
		ResponseTrigger			is Alpha 1
		IsSuccess				is Boolean	
		IsPartialSuccess		is Boolean
		InvoiceIsSuccess		 	is Boolean	 		
		InvoiceIsPartialSuccess		is Boolean
		NbrOfInvoiceLevelMessages	is Numeric 4
		InvLevelUsrElements			is Numeric 3				
		LocalNbrInvLines			is Numeric 6
		LineIdx 				    is Numeric 6
		LineTaxIdx 					is Numeric 6
		DistLine 					is XMLDocument
		InputLineXml				is XMLDocument			
		DistLineTaxSummary			is Numeric 6 
		DistLineTaxableState		is Alpha 30
		DistLineTaxableCounty		is Alpha 30
        DistLineTaxableCity			is Alpha 30	
		InvoiceLines				is Numeric 6
		InvoiceLineId				is Numeric 6
		InvoiceLineNumber			is Numeric 6
		NbrOfInvoiceLineMessages	is Numeric 6
		InvoiceLineTotalTax			is an InternationalAmount
		NbrOfInvoiceLineTaxes		is Numeric 6
		NbrOfLineUserElements		is Numeric 3
		AdminZoneLevel				is Alpha 20
		AdminZoneLevelTaxRate		is a TaxRateValue 
		DistLineTaxMessages			is Numeric 6
		LineTaxMsgIdx				is Numeric 6
		DistLineTaxMessageText		is Alpha 60   
		LocalEachLineDestTaxAreaId  is like TaxCode   
		LineItemFlexibleFields		is a FlexibleFields	
		FlxLineIdx					is Numeric 3 
		UserFieldLevel 				is Alpha 1			  
            States
            	Header			value is "H"
                Line			value is "L"
		LocalUserAttributeName		is Alpha 40	
		LocalOneSourceTaxAttribute50 is a TaxAttributeGroup50
		LocalLineTaxAttribute50 	is a TaxAttributeGroup50
		UFldIdx						is Numeric 4	
		AttributeMissingProcess is Alpha 1
			States
				SkipAttribute		value is blank	
				MissingMessage      value is "M"	
				Halt				value is "H"	
				Allow               value is "A"	
					default label is "Allow-VertexOnly"
		AttributeMissingMessage		is Alpha 30
		LocalUserElement			is like UserAttributeName	
		LocalInvoiceNumberKey 		is Alpha 22				
		LocalLineNumberKey			is Numeric 6			
		LocalTypeKey				is Alpha 1				
		LocalAttributeNameKey		is Alpha 40				
		SkipCreateOfThisRecord		is Boolean				
		LocalPostalAddress			is a PostalAddressV2	 
			holds pii
		NbrOfAttributesSkipped      is Numeric 2			
		NbrOfLineAttributesSkipped  is Numeric 2			
		OneSourcePassword			is Alpha 16				
		LocalOneSourceUserName		is Alpha 60				
		LocalOneSourcePassword		is Password				
		StringVertexValues			is Text
		LocalVertexAttributes		is a VertexAttributeGroup	
		CompanyRole       			is AlphaUpper 1
		LocalVertexAttributesOut 	is a VertexAttributeGroup
		TotalFlexFieldsOut 			is Numeric 3
		CodeIdx						is Numeric 2			
		TotalFlexCodesOut 			is Numeric 3
		NumIdx						is Numeric 3			
		TotalFlexNumericsOut		is Numeric 3
		DateIdx						is Numeric 3
		TotalFlexDatesOut			is Numeric 3 
		LocalCodeValue				is Alpha 250
		LocalNumericValue			is Alpha 10	
		LocalDateValue				is Alpha 10	
		ReturnedFieldIdAlpha   	 	is Alpha 2
		ProcessType						is Numeric 1		
			States
				NonVAT		value is 0
				VAT			value is 1
		PasswordTypeUsed			is Numeric 1		
			States
				TextValue		value is 0
				EncryptedValue	value is 1
		TempInvoiceNumber		 is Alpha 100
		TempString				 is Alpha 100  
		TempVendorCustomerName	is Alpha 120
		TempString125			is Alpha 125 
		TempString32		    is Alpha 32						
		TempLineItemId			is Alpha 32						
		TempDescription			is Alpha 60						
		TempString60			is Alpha 60						
		LocalLineTaxCode 		is like TaxCode					
		EachLineTaxableBasis	is an InternationalAmount		
		EachLineTaxExempt		is an InternationalAmount		
		LocalTrigger1			is Alpha 1						
		LocalSpot				is Alpha 1						
		LocalLineItemNbr		is like DistributionSequence	
		DisplayLineInError  	is like DistributionSequence	
		IdxMax					is Numeric 2					
		VtxCodeIdx				is Numeric 2					
		VtxNumericIdx			is Numeric 2					
		VtxDateIdx				is Numeric 2					
		LocalSkip				is Boolean						
		FlexFieldInError		is Alpha 7						
		HaltProcess 			is Boolean 						
		LocalFlexCodeValue		is Alpha 250	           		
		LocalFlexNumericValue	is Decimal 18.8        			
		LocalFieldId			is Numeric 2					
		LocalValidateFlexibleDate 	is Date						
		LocalVertexLicense		is Numeric 1					
			States
				Both		value is 0
				Supply		value is 1
				Procurement	value is 2	
		LocalSkipAddingToDetail	is Boolean						
		LocalCalculatedTax		is an InternationalAmount		
		LocalCommodityCode		is like ICNCode					
		SendAddressOrTaxAreaId is Alpha 1					    
			States
				Both			value is blank			 
				AddressOnly		value is "A"
				TaxAreaIDOnly	value is "T"
	    LocalLoadTaxCode		is like TaxCode					
	    LocalLoadAddress		is a PostalAddressV2			
		LocalSkipThisEditIfOnlyValidating is Boolean			
		CountryIsCanada	is Boolean								

    Field Rules
    
 		TaxEntity
			if (TaxEntity not entered)				
				if (InvoiceCompany entered)
					TaxEntity = InvoiceCompany.AccountingEntity		
		OverrideTaxEntity
			if (OverrideTaxEntity entered)
				constraint (TaxEntity entered)
					"Tax\EntityRequiredToUseOverride\Tax\Entity"
				constraint (CallingModule[1:7] = "TestTax")
					"Override\Tax\EntityCanOnlyUsedForTestPrograms"
								
 		Quantity
			default to 1
			
		VATRegistrationCountry
			if (VATRegistrationCountry not entered)
				VATRegistrationCountry = TaxEntity.VATRegistrationCountry
			default to PostalAddress.Country.IsoCountryCode
			
		FromVATRegistrationNumber	
			if (FromVATRegistrationNumber entered
			and FromVATRegistrationCountry not entered								
			and FromPostalAddress.Country entered)
				FromVATRegistrationCountry = FromPostalAddress.Country
									
		VATRegistrationNumber
							
		DefaultFilingCurrency
			if (TaxEntity.ThirdParty.VertexOSeries)	
				DefaultFilingCurrency = TaxEntity.DefaultFilingCurrency
				
		CurrencyRate			
			default to 1.0
			if (CurrencyRate not entered)
				CurrencyRate = 1.0		
					        		
    Relations

        GetTaxRateRel
            one-to-many relation to TaxRate
            Field Mapping uses symbolic key	
                related.FinanceEnterpriseGroup			= LocalTaxCode.FinanceEnterpriseGroup             
				related.TaxCode 						= LocalTaxCode
                related.ProductTaxCategory 				= LocalProductTaxCategory 				           
            Instance Selection
                where (related.EffectiveDate 			<= LocalEffectiveDate)

       	GetTaxRateCatgNotFoundRel
            one-to-many relation to TaxRate
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup			= LocalTaxCode.FinanceEnterpriseGroup 
                related.TaxCode 						= LocalTaxCode					    
            Instance Selection
                where (related.EffectiveDate 			<= LocalEffectiveDate)	 
                
        GetTaxCategoryRateRel
            one-to-many relation to TaxRate
            Field Mapping uses Set2		
				related.FinanceEnterpriseGroup			= LocalTaxCode.FinanceEnterpriseGroup 	
				related.TaxCode 						= LocalTaxCode
                related.ProductTaxCategory 				= LocalProductTaxCategory			           
            Instance Selection
                where (related.EffectiveDate 			<= LocalEffectiveDate)
                
        GetAnyTaxRateRel
            one-to-many relation to TaxRate
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup			= LocalTaxCode.FinanceEnterpriseGroup 
                related.TaxCode 						= LocalTableTaxCode					    
            Instance Selection
                where (related.EffectiveDate 			<= LocalEffectiveDate)	 
 
 		GetTableTaxCategoryRateRel			
            one-to-many relation to TaxRate
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= LocalTaxCode.FinanceEnterpriseGroup 	
				related.TaxCode 						= LocalTableTaxCode
            Instance Selection
                where (related.ProductTaxCategory 		= LocalProductTaxCategory
                and    related.EffectiveDate 			<= LocalEffectiveDate)
        
 		TaxTableTaxCodeRel
			one-to-many relation to TaxTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup  	
				related.TaxCode							= LocalTaxTable
            Instance Selection
				where (related.EffectiveDate 			<= LocalEffectiveDate)   
				               


        CompanyTaxCodeDetailRel	 
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup  
                related.TaxEntity 						= TaxEntity
                related.TaxCode							= LocalTaxCode    

        DefaultEntityTaxCodeRel	 
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup  
                related.TaxEntity 						= TaxEntity
                related.TaxCode							= EntityTaxCodeDefault  
                
        NewEntityTaxCodeRel	 
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup  
                related.TaxEntity 						= TaxEntity
                related.TaxCode							= OutputGeoCode  
                              

       	CompanyTaxTableCodeRel
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup  
                related.TaxEntity 						= TaxEntity
                related.TaxCode							= LocalTableTaxCode        
                                
        TaxTransOneToOneRel
            one-to-one relation to TaxTransaction 
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup	
                related.TaxEntity 						= TaxEntity
                related.TaxCode 						= LocalTaxCode
                related.TaxTransaction  				= LocalTransactionId                 
  
 		PayablesAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses Set1
				related.VendorGroup						= VendorGrp
				related.Company							= InvoiceCompany
				related.PayablesAccrualCode				= LocalAccrualCode
				 
  		VertexConfigRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig 								= DerivedFinanceEnterpriseGroup	
 			
		VertexConfigVersionRel
        	one-to-many relation to VertexConfigVersion
        	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= DerivedFinanceEnterpriseGroup	
			Instance Selection
				where (related.VertexConfigVersion.Version 			= VertexConfigRel.DefaultVersion.Version
				and	   related.VertexConfigVersion.ServiceRelease 	= VertexConfigRel.DefaultVersion.ServiceRelease
				and	   related.VertexConfigVersion.ServerName 		= VertexConfigRel.DefaultVersion.ServerName)

		VertexConfigVersionRel1to1
        	one-to-one relation to VertexConfigVersion
        	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= DerivedFinanceEnterpriseGroup	 
				related.VertexConfigVersion.Version 		= VertexConfigRel.DefaultVersion.Version
				related.VertexConfigVersion.ServiceRelease 	= VertexConfigRel.DefaultVersion.ServiceRelease
				related.VertexConfigVersion.ServerName 		= VertexConfigRel.DefaultVersion.ServerName 


  		VertexConfigGroupRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig = DerivedFinanceEnterpriseGroup		 
 			
		VertexConfigVersionGroupRel
        	one-to-many relation to VertexConfigVersion
        	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= DerivedFinanceEnterpriseGroup 
			Instance Selection
				where (related.VertexConfigVersion.Version 			= VertexConfigGroupRel.DefaultVersion.Version
				and	   related.VertexConfigVersion.ServiceRelease 	= VertexConfigGroupRel.DefaultVersion.ServiceRelease
				and	   related.VertexConfigVersion.ServerName 		= VertexConfigGroupRel.DefaultVersion.ServerName)
			
		ReturnedTaxAreaIdRel
			one-to-one relation to TaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= DerivedFinanceEnterpriseGroup	
				related.TaxCode											= OutputGeoCode

   		VertexTaxAreaIdResultsRel
			one-to-many relation to VertexTaxAreaIdResults
			Field Mapping uses ByRelatedObjectReference	 
				related.VertexConfig									= DerivedFinanceEnterpriseGroup	
			Instance Selection	
				where (related.RelatedObjectReference					= RelatedObjectReference)	

  		GetLastJurisdictionResultsSeqRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses symbolic key
				related.VertexConfig									= DerivedFinanceEnterpriseGroup	
			Instance Selection	
				where (related.JurisdictionResults.CallingModuleKey 	= SaveMessageLogKey)
												 
  		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses symbolic key
				related.VertexConfig									= DerivedFinanceEnterpriseGroup	
			Instance Selection	
				where (related.JurisdictionResults.CallingModuleKey 	= SaveMessageLogKey
				and    related.JurisdictionResults.ResponseBusclassKey	= ResultsLastSeq
				and    related.CallingModuleKey                         = RelatedObjectReference)						                                                            					

  		JurisdictionResultsRel2
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey	 
				related.VertexConfig									= DerivedFinanceEnterpriseGroup	 	 
			Instance Selection	
				where (related.CallingModuleKey                         = RelatedObjectReference)	
				
  		JurisdictionResultsRel3											
			one-to-many relation to JurisdictionResults
			Field Mapping uses symbolic key
				related.VertexConfig									= DerivedFinanceEnterpriseGroup	  
			Instance Selection	
				where (related.JurisdictionResults.LookupKey			= SaveMessageLogKey)

		JurisdictionResultsRel4
			one-to-many relation to JurisdictionResults
			Field Mapping uses symbolic key
				related.VertexConfig									= DerivedFinanceEnterpriseGroup	 
			Instance Selection	
				where (related.JurisdictionResults.CallingModuleKey 	= SaveMessageLogKey)	 


  		JurisdictionResultsBORRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses symbolic key
				related.VertexConfig									= DerivedFinanceEnterpriseGroup	 
			Instance Selection	
				where (related.CallingModuleKey                         = RelatedObjectReference)		
				

		TaxLogHeaderRel	 
			one-to-one relation to TaxLogHeader
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
				related.TaxLogHeader 			= SaveMessageLogKey	

  		TaxConfigurationRel
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration		= DerivedFinanceEnterpriseGroup	

     	SabrixVersionValidationRel
        	one-to-many relation to TaxConfigVersion
        	Field Mapping uses symbolic key
				related.TaxConfiguration					= TaxConfigurationRel.TaxConfiguration
			Instance Selection
				where (related.TaxConfigVersion.ThirdParty 	= "S"
				and    related.TaxConfigVersion.Version 	= TaxConfigurationRel.SabrixVersion.Version
				and    related.TaxConfigVersion.Release 	= TaxConfigurationRel.SabrixVersion.Release)	

     	OneSourceUsernameAndPasswordRel						
        	one-to-many relation to TaxConfigVersion
        	Field Mapping uses symbolic key
				related.TaxConfiguration					= TaxConfigurationRel.TaxConfiguration
			Instance Selection
				where (related.TaxConfigVersion.ThirdParty 	= TaxConfigurationRel.ThirdParty
				and    related.TaxConfigVersion.Version 	= TaxConfigurationRel.SabrixVersion.Version
				and    related.TaxConfigVersion.Release 	= TaxConfigurationRel.SabrixVersion.Release
				and    related.TaxConfigVersion.UserName entered
				and   (related.TaxConfigVersion.OneSourcePassword entered
				or     related.TaxConfigVersion.Password entered)) 				
				 							 			
      	TaxDistributionCodeRel				
            one-to-one relation to TaxDistributionCode
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup 
				related.TaxEntity	   			= TaxEntity				             
                related.TaxDistributionCode		= LocalTaxDistributionCode			
 
		DefaultTaxDistributionCodeDetailRel	
            one-to-one relation to TaxDistributionCodeDetail
			Field Mapping uses ByTaxDistributionLevel
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup   
				related.TaxEntity	   			= TaxEntity					           
                related.TaxDistributionCode		= LocalTaxDistributionCode
                related.TaxDistributionLevel 	= "DEFAULT"
				related.DistributionType 	= blank									
				
     	TaxDistributionCodeDetailRel		
            one-to-one relation to TaxDistributionCodeDetail
			Field Mapping uses ByTaxDistributionLevel
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup  
				related.TaxEntity	   			= TaxEntity					            
                related.TaxDistributionCode		= LocalTaxDistributionCode
                related.TaxDistributionLevel	= LocalTaxDistributionLevel 		
				related.DistributionType 		= LocalDistributionType				

     	TaxDistributionCodeDetailRel2		
            one-to-one relation to TaxDistributionCodeDetail
			Field Mapping uses ByTaxDistributionLevel
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup  
				related.TaxEntity	   			= TaxEntity					            
              	related.TaxDistributionCode		= LocalTaxDistributionCode
              	related.TaxDistributionLevel	= LocalTaxDistributionLevel 		
				related.DistributionType 		= blank								
				
		AllTaxDistributionCodeDetailRel	
            one-to-many relation to TaxDistributionCodeDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup   
				related.TaxEntity	   			= TaxEntity					           
                related.TaxDistributionCode		= LocalTaxDistributionCode

		OutputUserAttributesRel 						
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject 				
 				and    related.OneSourceUserAttribute.Type 						= "O")		

		ThisOutputUserAttributeRel 	
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject
				and    related.OneSourceUserAttribute.LineNumber 				= LocalLineNumberKey							 
				and    related.OneSourceUserAttribute.Type						= "O"
				and    related.UserAttributeName								= LocalAttributeNameKey)	
				
		TaxLineItemsRel 
			one-to-many relation to TaxLineItem
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.TaxLineItem.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				and    related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject)

 		FirstTaxLineItemRel  
			one-to-many relation to TaxLineItem
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.TaxLineItem.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				and    related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject
				and    related.TaxLineItem.Sequence					= FirstLineItemNumberSeq)

		CurrentTaxLineItemRel  
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject	 
				related.FinanceEnterpriseGroup 				= FinanceEnterpriseGroup	 
 				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject			
 			Instance Selection	
				where (related.LineItemNumber				= ResponseBusclassKey)	
				

		Update1SourceTaxLineItemRel  
			one-to-many relation to TaxLineItem
			Field Mapping uses symbolic key	 
				related.FinanceEnterpriseGroup 				= FinanceEnterpriseGroup	 
 				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject	 
 				related.TaxLineItem.Sequence				= EachLineItemSequence			
 			Instance Selection	
				where (related.LineItemNumber				= EachLineItemNumber)	

		InputUserAttributesRel 	
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject 				
 				and    related.OneSourceUserAttribute.Type 						= blank)	

		CreateInputUserAttributeRel 											 					 
			one-to-one relation to OneSourceUserAttribute
			Field Mapping uses ByAttributeNameNoDups	 
 				related.FinanceEnterpriseGroup 							= FinanceEnterpriseGroup	 
 				related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject 				
 				related.OneSourceUserAttribute.LineNumber				= blank 
 				related.OneSourceUserAttribute.Type 					= blank	
				related.UserAttributeName								= LocalUserAttributeName

		VertexOutputFlexibleFieldsRel							 											
			one-to-one relation to VertexFlexibleFields
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 							= FinanceEnterpriseGroup
				related.VertexFlexibleFields.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject
				related.VertexFlexibleFields.TaxAttributeCode           = blank	
				related.VertexFlexibleFields.Type						= "O"	

		CurrencyRel			
			one-to-one relation to Currency
			Field Mapping uses symbolic key	 
 				related.Currency = LocalCurrencyCode 				
			
		CountryCodeRel			
			one-to-one relation to Country
			Field Mapping uses symbolic key 
 				related.Country	= LocalCountryCode 				

		FromCountryCodeRel			
			one-to-one relation to Country
			Field Mapping uses symbolic key 
 				related.Country	= FromCountryCode 		
 				
		ToCountryCodeRel 
			one-to-one relation to Country
			Field Mapping uses symbolic key 
 				related.Country	= ToCountryCode 	

		POACountryCodeRel 
			one-to-one relation to Country
			Field Mapping uses symbolic key 
 				related.Country = POACountryCode
	
		POAISOCountryCodeRel 
			one-to-one relation to Country
			Field Mapping uses symbolic key 
 				related.Country = POAISOCountryCode 	
 
 		BuyerAdminDestCountryCodeRel 
			one-to-one relation to Country
			Field Mapping uses symbolic key 
 				related.Country = BuyerAdminDestCountryCode 
 											
		InvoiceCompanyRel		
			one-to-one relation to GeneralLedgerCompany 
			Field Mapping uses symbolic key 
 				related.Company	= InvoiceCompany 	 

		CommodityCodeRel  		
			one-to-one relation to ICNCode
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
 				related.ICNCode	= CommodityCode 	 

		LineCommodityCodeRel	
			one-to-one relation to ICNCode
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
 				related.ICNCode	= LineCommodityCode 	
 	
 	 	TransactionCurrencyRel 	
			one-to-one relation to Currency
			Field Mapping uses symbolic key 
 				related.Currency	= TransactionCurrency 		

		BaseCurrencyRel  	
			one-to-one relation to Currency
			Field Mapping uses symbolic key 
 				related.Currency	= BaseCurrency 

		POACurrencyRel  	
			one-to-one relation to Currency
			Field Mapping uses symbolic key 
 				related.Currency = POACurrency 

		BuyerAdminCurrencyRel  
			one-to-one relation to Currency
			Field Mapping uses symbolic key 
 				related.Currency = BuyerAdminCurrency 
 				
 		DefaultFilingCurrencyRel 
			one-to-one relation to Currency
			Field Mapping uses symbolic key 
 				related.Currency = DefaultFilingCurrency
 																								 				                 	 				 				                 																			                                                            					
	Derived Fields	
		DerivedDebugSpot is a DerivedField
			type is Alpha 5
			return "-" + DebugSpot
			
		TurnDisplayOffOn is a DerivedField	 
			type is Alpha 1
			if (TurnDisplaySw.On							
			or  VertexConfigRel.DisplayOn)					
				DisplayOn = true
			else
				DisplayOn = false
			if (TurnDisplaySw.On							
			or  TaxConfigurationRel.DisplayOn)
				DisplayOn = true				
			return blank
			
		ExecuteCalculateTax	is a DerivedField	 
			type is Alpha 1
			LocalErrorCategory 		= "TXQNT" 
			LocalExecuteReturnBlank = TurnDisplayOffOn
			initialize SaveMessageLogKey
			initialize ReturnedAdditionalTaxesDue
			initialize ReturnedTaxVariance
			SaveInputTaxableAmount	= TaxableAmount
			LocalExecuteReturnBlank = InitializeOutputFields		
			ReturnedOutsideThreshold = false 
			WebServiceError			 = false
			WebServiceErrorMessage 	 = blank
			if (VertexConfigRel.WriteToLogFile
			or  TaxConfigurationRel.WriteToLogFile)	
				if (DontCreateLogFile)
					LocalCreateLogFile = false
				else		
					LocalCreateLogFile = true 
			if (TaxConfigurationRel.BypassWebserviceCall)		 
				BypassWebserviceCall = true						 
			if (TaxConfigurationRel.DebugMode)					 
				DebugMode			 = true						 
			if (TaxConfigurationRel.TestingMode)					 
				TestingMode			 = true		
			LocalTrace = "BeginTraceLog,ExecuteCalculateTax,"
			LocalExecuteReturnBlank = DisplayInput
			LocalExecuteCheckCountryCode = LoadDefaultCountryCode
  			OutputThirdPartyProcessed = TaxEntity.ThirdParty					 			
			initialize TaxTable
			LocalExecuteReturnBlank = CheckForErrors
			if (LocalExecuteReturnBlank = "Y"  
			or 	LocalErrorNumber entered)
				LocalExecuteReturnBlank = DisplayOutput
				DoTaxCalculation = false
				return "N"
			
			if (Function.Inquire)
				if (LocalErrorNumber entered)
					DoTaxCalculation = false
					LocalExecuteReturnBlank = DisplayOutput
					if (LocalCreateLogFile)
						LocalExecuteReturnBlank = CreateTaxToLogFile
					return "N"
				else
					if (TaxEntity.ThirdParty.Sabrix)
						LocalExecuteReturnBlank = SabrixThirdParty
						if (LocalCreateLogFile)
							LocalExecuteReturnBlank = CreateTaxToLogFile
						return "Y"	
					else						
					if (TaxEntity.ThirdParty.VertexOSeries)	
						LocalExecuteReturnBlank = 5500DoThirdParty
					else
						OutputTotalTaxAmount = DerivedTotalTaxAmount
						OutputTotalTaxAmount8DP = DerivedTotalTaxAmount8DP
						OutputTotalTaxAmount5DP = DerivedTotalTaxAmount5DP
					
					OutputTaxRate		 	= DerivedTaxRate
					TaxType		 		 	= DerivedTaxType
					if (LocalCreateLogFile)
						LocalExecuteReturnBlank = CreateTaxToLogFile
					return "Y"

			OutputTotalTaxAmount 			= DerivedTotalTaxAmount
			OutputTotalTaxAmount8DP 		= DerivedTotalTaxAmount8DP
			OutputTotalTaxAmount5DP 		= DerivedTotalTaxAmount5DP
			OutputTaxRate		 			= DerivedTaxRate
			TaxType		 		 			= DerivedTaxType
			
			LocalExecuteReturnBlank = CheckIfCSFHasTolerance	
			
			if (OutputTotalTaxAmount = TaxAmount
			or	Function.CalculateTax)
				VerifiedOK = true
			else
				display "CalTx:Main:11b:SettingVerifiedOK=false"
				VerifiedOK = false		
				if (TaxEntity.ThirdParty.VertexOSeries	
				and Function.VerifyTax					
				and !CSFToleranceSet)					
 					LocalSaveTaxAmount 			= TaxTable.TaxTableOutput[1].TaxAmount 				 				 
					LocalSaveTaxableAmount 		= TaxTable.TaxTableOutput[1].TaxableAmount
					LocalSaveTaxCode			= TaxTable.TaxTableOutput[1].TaxCode
					if (ReturnedOutsideThreshold)		
						LocalErrorCategory		= "TXQNT"
						LocalErrorNumber		= 804
					else	
					if (LocalErrorNumber entered						
					or ReturnedOutsideThreshold)						
						VerifiedOK = false
					else
						initialize LocalErrorNumber			
						VerifiedOK = true
				
          	if (!LocalTaxCode.TaxType.TaxTableCode
          	and Function.VerifyTax)

				if (TaxEntity.ThirdParty.VertexOSeries)  	
					LocalContinue = true
				else	
          		if (TaxAmount not entered				
           		and TaxTable.TaxTableOutput[1].TaxRate entered)
           			LocalErrorCategory 	= blank	
           			LocalErrorNumber = 200
           			DoTaxCalculation = false
					LocalExecuteReturnBlank = DisplayOutput
					if (LocalCreateLogFile)
						LocalExecuteReturnBlank = CreateTaxToLogFile
           			return "N"
           		
			if (Function.VerifyTax)
				TaxVerifiedTrigger = TaxVerified
				if (TaxVerifiedTrigger = "Y")
					VerifiedOK = true
				else
					VerifiedOK = false
			
			LocalExecuteReturnBlank = DisplayOutput 
			if (LocalErrorNumber entered)
				DoTaxCalculation = false
				if (LocalCreateLogFile)
					LocalExecuteReturnBlank = CreateTaxToLogFile
				return "N"
			
			DoTaxCalculation = true						
			if (LocalCreateLogFile)
				LocalExecuteReturnBlank = CreateTaxToLogFile
						
			return "Y"



									
		EffectiveDate    	 is a DerivedField			
			type is Date
			LocalTrace = LocalTrace + "EffectiveDate,"
			LocalTaxCode = TaxCode			

			if (TaxPointDate entered)	
				SaveEffectiveDate = TaxPointDate
				return SaveEffectiveDate

			if (TaxDate entered)
				SaveEffectiveDate = TaxDate					
			

			if (TaxEntity.UseTaxCodeAccounts)
				if (SaveEffectiveDate entered
				and !CompanyTaxCodeDetailRel.TaxPoint.GlDate)
					return SaveEffectiveDate
				else			
				if (CompanyTaxCodeDetailRel.TaxPoint.InvoiceDate)
					if (InvoiceDate not entered
					and Function.CalculateTax)
						LocalErrorNumber = 104
						return blank					 
					else
						SaveEffectiveDate = InvoiceDate	
				else
				if (CompanyTaxCodeDetailRel.TaxPoint.GlDate)	 
					if (SaveEffectiveDate not entered)
						if (InvoiceDate not entered
						and Function.CalculateTax)
							LocalErrorNumber = 104
							return blank					 
						else
							SaveEffectiveDate = InvoiceDate
					else
						LocalSaveTaxPointDate = GeneralLedgerDate				
				else		
				if (CompanyTaxCodeDetailRel.TaxPoint.PaymentDate)
					if (PaymentDate not entered
					and Function.CalculateTax)					
						LocalErrorNumber = 105
						return blank					 
					else
						SaveEffectiveDate = PaymentDate	
				else		
				if (CompanyTaxCodeDetailRel.TaxPoint.ShippingDate)
					if (ShipmentDate not entered
					and Function.CalculateTax)
						LocalErrorNumber = 106
						return blank					 
					else
						SaveEffectiveDate = ShipmentDate		
																
			if (!TaxEntity.UseTaxCodeAccounts
			and (SaveEffectiveDate not entered
			or TaxEntity.TaxPoint.GlDate))
				if (TaxEntity.TaxPoint.InvoiceDate)
					if (InvoiceDate not entered
					and Function.CalculateTax)
						LocalErrorNumber = 104
						return blank					 
					else
						SaveEffectiveDate = InvoiceDate	
				else
				if (TaxEntity.TaxPoint.GlDate)
					if (InvoiceDate not entered
					and Function.CalculateTax)
						LocalErrorNumber = 104
						return blank					 
					else
						SaveEffectiveDate = InvoiceDate	
						LocalSaveTaxPointDate = GeneralLedgerDate
				else	
				if (TaxEntity.TaxPoint.PaymentDate)
					if (PaymentDate not entered
					and Function.CalculateTax)
						LocalErrorNumber = 105
						return blank					 
					else
						SaveEffectiveDate = PaymentDate	
				else		
				if (TaxEntity.TaxPoint.ShippingDate)
					if (ShipmentDate not entered
					and Function.CalculateTax)
						LocalErrorNumber = 106
						return blank					 
					else
						SaveEffectiveDate = ShipmentDate		

																
			if (SaveEffectiveDate not entered)
				SaveEffectiveDate = current corporate date

			return SaveEffectiveDate		 			 
						
		DerivedTotalTaxAmount is a DerivedField
			type is like InternationalAmount
			LocalTrace = LocalTrace + "DerivedTotalTaxAmount,"
			initialize LocalTaxCodeInError
			
			if (TaxableAmount not entered					
			and InvoiceAmount not entered					
			and UnitCost entered)							
				if (Quantity not entered)
					TaxableAmount = UnitCost * 1
				else
					TaxableAmount = UnitCost * Quantity	
			
			LocalInvoiceAmount		= InvoiceAmount
			LocalWorkTaxable 		= TaxableAmount
			LocalWorkInvoiceAmount	= InvoiceAmount
			LocalWorkTaxAmount		= TaxAmount
			DerivedTaxable 			= false

			if (TaxTable.TaxTableOutput[1].AccrualFlag = "A"				
			and LocalWorkTaxable not entered)
				LocalWorkTaxable = 	LocalWorkInvoiceAmount
			else
				if (LocalWorkTaxable not entered)
					LocalWorkTaxable = DeriveBeginTaxableAmount			

			if (TaxEntity.ThirdParty.VertexOSeries)	
				LocalExecuteReturnBlank = 5500DoThirdParty
				return ReturnedTotalTax			

			if (TaxEntity.ThirdParty.Sabrix)
				LocalExecuteReturnBlank = SabrixThirdParty
				return ReturnedTotalTax			
							
			if (Function.CalculateTax
			or 	Function.VerifyTax)
				if (Function.CalculateTaxRate)				
					if (TaxableAmount not entered 
					and	TaxAmount not entered)
						LocalErrorNumber = 901
						return blank
					if (TaxCode not entered)				
						LocalErrorNumber = 100
						return blank						
					if (!TaxCode.TaxType.CalculatedRate)	
						LocalErrorNumber = 911
						return blank													
							
				if (TaxCode not entered)
					LocalErrorNumber = 100
					return blank
				initialize LocalTaxAmount
				initialize LocalTaxRate
				LocalTaxCode 			= TaxCode
				LocalProductTaxCategory = ProductTaxCategory
				if (TaxableAmount not entered)
					if (LocalWorkTaxable entered)
						LocalTaxableAmount = LocalWorkTaxable
					else
						LocalTaxableAmount = DeriveBeginTaxableAmount		
				else
					LocalTaxableAmount = TaxableAmount
						
				OutputTotalTaxable = LocalTaxableAmount
										
				TaxType 				= LocalTaxCode.TaxType 
				
                if (LocalTaxCode.TaxType.StandAlone
                or LocalTaxCode.TaxType.TableMember)
                	if (LocalProductTaxCategory entered)
                		if (GetTaxCategoryRateRel exist)
                			LocalTaxRate      = last GetTaxCategoryRateRel.Rate
                		else
                			LocalTaxRate      = last GetTaxRateCatgNotFoundRel.Rate	
                	else	
                		LocalTaxRate      = last GetTaxRateRel.Rate					
                	if (LocalTaxRate not entered)
                		if (OutputTaxRate not entered)
                			OutputTaxRate = DerivedTaxRate
                			LocalTaxRate  = OutputTaxRate
                    LocalTaxAmount    = LocalTaxableAmount * LocalTaxRate
                    TaxTable.TaxTableOutput[1].TaxCode 			= TaxCode
                    TaxTable.TaxTableOutput[1].TaxAmount 		= LocalTaxableAmount * LocalTaxRate 
                    TaxTable.TaxTableOutput[1].TaxableAmount 	= LocalTaxableAmount
                    TaxTable.TaxTableOutput[1].TaxAmount5DP 	= LocalTaxAmount
                    if (TaxTable.TaxTableOutput[1].LandCostFlag)
            			LocalLandedTaxAmount 					= LocalTaxAmount
            			OutputTotalLandedTaxAmount5DP			= LocalTaxAmount
						OutputTotalLandedTaxAmount8DP			= LocalTaxAmount
            		if (TaxableAmount not entered
            		and OutputTotalTaxable not entered
            		and LocalTaxableAmount entered)
            			OutputTotalTaxable = LocalTaxableAmount
                    return LocalTaxAmount


				LocalNextTaxableAmount = LocalTaxableAmount				
				if (LocalTaxCode.TaxType.TaxTableCode)
					initialize LocalTaxRate
					initialize LocalLandedTaxAmount  
					initialize LocalAccumulatedTableTaxRate
					initialize LocalAccumulatedTaxable
					initialize LocalAccumulatedTaxAmt
					initialize LocalTaxAmount	
					initialize LocalTaxTable
					initialize LocalTableTaxAmount
					LocalTaxTable			= LocalTaxCode
					
					LocalCounter = 1 
					initialize LocalTableTaxCode
					initialize LocalWorkTotalTax
					UseNewTaxAmount = false						 
					while (LocalCounter <= 8)
						if (TaxTable.TaxTableOutput[LocalCounter].TaxCode entered)
							TaxTable.TaxTableOutput[LocalCounter].InTaxAmount = TaxAmount
							LocalTableTaxCode 				= TaxTable.TaxTableOutput[LocalCounter].TaxCode
							if (TaxEntity.UseTaxCodeAccounts
							and CompanyTaxTableCodeRel not exist)
								LocalTaxCodeInError = LocalTableTaxCode
								LocalErrorNumber	= 109
							LocalTaxRate					= last GetTableTaxCategoryRateRel.Rate		
							LocalAccumulatedTableTaxRate 	+= LocalTaxRate
							TaxTable.TaxTableOutput[LocalCounter].TaxableAmount = LocalNextTaxableAmount
                           	LocalTaxAmount = CalculateTableTaxAmount
                           	TaxTable.TaxTableOutput[LocalCounter].TaxAmount = LocalTaxAmount
                            LocalAccumulatedTaxAmt = LocalAccumulatedTaxAmt + LocalLandedTaxAmount + TaxTable.TaxTableOutput[LocalCounter].TaxAmount 
							LocalTableTaxAmount += LocalTaxAmount
                            TaxTable.TaxTableOutput[LocalCounter].TaxAmount5DP = LocalTaxAmount
                            LocalNextTaxableAmount = LocalWorkTaxable
						LocalCounter += 1
								
					OutputTotalLandedTaxAmount5DP 	= DerivedTotalLandedTaxAmount5DP
					OutputTotalLandedTaxAmount8DP 	= DerivedTotalLandedTaxAmount8DP
					
					return LocalTableTaxAmount
			
			
            if (LocalTaxCode.TaxType.CalculatedRate)
            	if (LocalTaxableAmount not entered)
            		LocalTaxableAmount = LocalWorkTaxable
                LocalTaxRate = ((LocalInvoiceAmount / LocalTaxableAmount)-1)	
                LocalTaxAmount    = LocalTaxableAmount * LocalTaxRate
                TaxTable.TaxTableOutput[1].TaxCode = TaxCode
                TaxTable.TaxTableOutput[1].TaxAmount = LocalTaxAmount 
                TaxTable.TaxTableOutput[1].TaxableAmount = LocalTaxableAmount 
                return LocalTaxAmount   

           	if (Function.CalculateTaxRate)
				if (TaxableAmount not entered 
				and	TaxAmount not entered)
					LocalErrorNumber = 901
					return blank	
								           	
           		if (DerivedTaxRate entered)
					LocalTaxAmount  = TaxableAmount * LocalTaxRate
	                TaxTable.TaxTableOutput[1].TaxCode 			= TaxCode
	                TaxTable.TaxTableOutput[1].TaxAmount 		= LocalTaxAmount 
	                TaxTable.TaxTableOutput[1].TaxableAmount 	= TaxableAmount
	                return LocalTaxAmount   

			if (Function.CalculateTaxable)
				LocalCounter = 1
				initialize LocalTaxRate
				while (LocalCounter <= 8)
					if (TaxTable.TaxTableOutput[LocalCounter].TaxCode not entered)
						OutputTotalTaxable = CalculateTaxableAmount
						return LocalTaxAmount
					else
						if (TaxTable.TaxTableOutput[LocalCounter].TaxAmount entered)
							LocalTaxAmount = TaxTable.TaxTableOutput[LocalCounter].TaxAmount
						else
							LocalTaxAmount = TaxAmount
						LocalTaxRate += TaxTable.TaxTableOutput[LocalCounter].TaxRate
					LocalCounter += 1	
							
				OutputTotalTaxable = CalculateTaxableAmount

			return LocalTaxAmount

       	CalculateTableTaxAmount is a DerivedField
      		type is like InternationalCost 
      		LocalTrace = LocalTrace + "CalculateTableTaxAmount,"
           	LocalWorkTaxable = LocalNextTaxableAmount     
           	TaxTable.TaxTableOutput[LocalCounter].InTaxAmount = LocalTaxAmount

           	LocalWorkTaxAmount = LocalWorkTaxable * TaxTable.TaxTableOutput[LocalCounter].TaxRate
 
           	if (TaxTable.TaxTableOutput[LocalCounter].LandCostFlag)
            	LocalLandedTaxAmount += LocalWorkTaxAmount

			LocalWorkTotalTax += LocalWorkTaxAmount
			LocalWorkTotalTaxable += LocalWorkTaxable

 			if (TaxTable.TaxTableOutput[LocalCounter].Flag = "+")
 				UseNewTaxAmount = true
 				LocalNextTaxableAmount = LocalWorkTaxable + LocalWorkTaxAmount
 			else
 			if (TaxTable.TaxTableOutput[LocalCounter].Flag = "-")
 				UseNewTaxAmount = true
 				LocalNextTaxableAmount = LocalWorkTaxable - LocalWorkTaxAmount
 			else
 				LocalNextTaxableAmount = LocalWorkTaxable
 			
           	LocalWorkTaxable = LocalNextTaxableAmount
 			return LocalWorkTaxAmount	  				 				

		CheckIfCSFHasTolerance is a DerivedField  
			type is Alpha 1
			LocalTrace = LocalTrace + "CheckIfCSFHasTolerance,"
			CSFToleranceSet = false
			if (TaxEntity.UseTaxCodeAccounts)
				LocalFromRateLimit 		= CompanyTaxCodeDetailRel.FromRate		 
				LocalThruRateLimit 		= CompanyTaxCodeDetailRel.ThruRate
				LocalToleranceLimit 	= CompanyTaxCodeDetailRel.TaxToleranceLimit
				LocalToleranceAmount 	= CompanyTaxCodeDetailRel.TaxToleranceAmount
			else	
				LocalFromRateLimit 		= TaxEntity.FromRate
				LocalThruRateLimit		= TaxEntity.ThruRate
				LocalToleranceLimit 	= TaxEntity.TaxToleranceLimit
				LocalToleranceAmount 	= TaxEntity.TaxToleranceAmount

			if (LocalFromRateLimit 		entered
			or  LocalThruRateLimit 		entered
			or  LocalToleranceLimit 	entered
			or  LocalToleranceAmount 	entered)
				CSFToleranceSet		= true		
					
			return blank

 	                           				
		TaxVerified is a DerivedField
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "TaxVerified,"
			if (TaxEntity.ThirdParty.VertexOSeries
			and !CSFToleranceSet)											
				LocalContinue = true
				if (DisplayOn)
					display "[TLC]CalTx:TaxVerifiedRt:UsingVertex...LocalContinue:<LocalContinue>"
					display "[TLC]CalTx:TaxVerifiedRt:LocalTaxAmount......:<LocalTaxAmount>"
					display "[TLC]CalTx:TaxVerifiedRt:TaxAmt..............:<TaxAmount>"
					display "[TLC]CalTx:TaxVerifiedRt:OutputTotalTaxAmount:<OutputTotalTaxAmount>"
					display "[TLC]CalTx:TaxVerifiedRt:LocalVertexRequest..:<LocalVertexRequest>"
				if (LocalVertexRequest.InvoiceVerificationRequest			
				and ReturnedOutsideThreshold)								
					LocalErrorNumber = 804									
					VerifiedOK = false										
					return "N"												
				else														
					initialize LocalErrorNumber 							
					VerifiedOK = true										
					return "Y"		 										
	
			VerifiedOK = false
			
			if (TaxAmount not entered
			or (TaxAmount entered
			and RoundedTaxAmount = RoundedOutputTotalTaxAmount))	
				VerifiedOK = true
				return "Y"	
           	 	 			           	
					 
 			LocalCounter = 1
			while (LocalCounter < 9)
				if (TaxTable.TaxTableOutput[LocalCounter].TaxCode entered)
 					LocalSaveTaxAmount 		= TaxTable.TaxTableOutput[LocalCounter].TaxAmount 				 				 
					LocalSaveTaxableAmount 	= TaxTable.TaxTableOutput[LocalCounter].TaxableAmount
					LocalSaveTaxCode		= TaxTable.TaxTableOutput[LocalCounter].TaxCode
					InputTaxAmount 			= TaxAmount 
					ReturnedTotalTax		= TaxAmount								
					LocalExecuteReturnBlank = WithinTolerance
					if (LocalExecuteReturnBlank = "Y")
						TaxTable.TaxTableOutput[LocalCounter].TaxRate = LocalSaveTaxRate
					else	
						return "N"		
				
				LocalCounter += 1	
					           	
				return "Y"	 			
           		
		DerivedTaxRate is a DerivedField
			type is Percent size 7.5
			LocalTrace = LocalTrace + "DerivedTaxRate,"
			if (TaxEntity.ThirdParty.VertexOSeries
			or  TaxEntity.ThirdParty.Sabrix)
				LocalTaxRate 	= ReturnedTotalRate
				
           	if (Function.CalculateTaxRate)
 				LocalTaxRate 	= TaxAmount / TaxableAmount
                return LocalTaxRate   			
                
			if (LocalAccumulatedTableTaxRate entered)
				return LocalAccumulatedTableTaxRate

			if (LocalAccumulatedTableTaxRate not entered
			and LocalAccumulatedTaxRate entered)
				return LocalAccumulatedTaxRate
				
			if (LocalTaxRate not entered)
            	if (LocalProductTaxCategory entered)
            		if (GetTaxCategoryRateRel exist)
            			LocalTaxRate      = last GetTaxCategoryRateRel.Rate
            		else
            			LocalTaxRate      = last GetTaxRateCatgNotFoundRel.Rate
				else	
					LocalTaxRate	= last GetTaxRateCatgNotFoundRel.Rate
			
			return LocalTaxRate

		DerivedTaxType is a DerivedField
			type is Alpha 1
			LocalTrace = LocalTrace + "DerivedTaxType,"
			if (TaxEntity.ThirdParty entered)	
				return "S"

			if (TaxCode.TaxType.TaxTableCode)
				return "T"
			return LocalTaxCode.TaxType

		CalculateTaxableAmount is a DerivedField							
			type is like InternationalAmount
			LocalTrace = LocalTrace + "CalculateTaxableAmount,"
			return (LocalTaxAmount / LocalTaxRate)
										
		DeriveBeginTaxableAmount is a DerivedField				
			type is like InternationalAmount
			LocalTrace = LocalTrace + "DeriveBeginTaxableAmount,"
			if (TaxableAmount entered)
				return TaxableAmount

			if (TaxableAmount not entered
			and InvoiceAmount not entered
			and UnitCost entered)
				if (Quantity not entered)
					return UnitCost * 1
				else
					return UnitCost * Quantity	
						

			if (InvoiceAmount entered
			and	TaxAmount	  entered)
				return InvoiceAmount - TaxAmount
			else
				LocalWorkTaxableRounded = 1
				I9						= 1
				while (I9 < 13)
					if (LocalWorkInvoiceAmount > LocalWorkTaxableRounded)
						LocalWorkTaxableRounded *= 10
						I9 += 1	
					else	
						LocalWorkTaxableRounded = LocalWorkTaxableRounded / 10
						I9 = 13
		
			if (LocalWorkTaxableRounded not entered)
				LocalErrorNumber = 103
				return blank

			LocalCounter = 1	
			LocalNextTaxableAmount = LocalWorkTaxableRounded
			
			initialize LocalWorkTaxAmount
			initialize LocalLandedTaxAmount
			initialize LocalWorkTotalTaxable 	
			
			if (TaxTable.TaxTableOutput[2].TaxCode not entered)
				LocalComputedTax	= CalculateTableTaxAmount
			else
				while (LocalCounter < 9)
					if (TaxTable.TaxTableOutput[LocalCounter].TaxCode entered)
						LocalComputedTax	= LocalComputedTax + CalculateTableTaxAmount
					LocalCounter += 1		
				
			LocalWorkInvoiceAmt = LocalWorkTaxableRounded + LocalComputedTax
			LocalComputedInvoiceAmt = LocalInvoiceAmount * LocalWorkTaxableRounded
			LocalBeginTaxableAmount = LocalComputedInvoiceAmt / LocalWorkInvoiceAmt   					

			DerivedTaxable = true
			return LocalBeginTaxableAmount
				
		DerivedTotalTaxAmount5DP is a DerivedField
			type is like InternationalCost
			if (TaxEntity.ThirdParty.VertexOSeries)
				round ReturnedTotalTax to nearest .00001
				return ReturnedTotalTax
			else
				round LocalTaxAmount to nearest .00001
				return LocalTaxAmount
			
		DerivedTotalTaxAmount8DP is a DerivedField
			type is like InternationalCost
			if (TaxEntity.ThirdParty.VertexOSeries)
				round ReturnedTotalTax to nearest .00000001
				return ReturnedTotalTax
			else
				round LocalTaxAmount to nearest .00000001
				return LocalTaxAmount
		
		DerivedTotalLandedTaxAmount5DP is a DerivedField
			type is like InternationalCost
			LocalTrace = LocalTrace + "DerivedTotalLandedTaxAmount5DP,"
			round LocalLandedTaxAmount up to nearest .00001
			return LocalLandedTaxAmount    		    	

		DerivedTotalLandedTaxAmount8DP is a DerivedField
			type is like InternationalCost
			LocalTrace = LocalTrace + "DerivedTotalLandedTaxAmount8DP,"
			round LocalLandedTaxAmount up to nearest .00000001
			return LocalLandedTaxAmount    				
						
		DerivedInvoiceAmount  is a DerivedField	 
			type is like InternationalAmount
			return (LocalTaxableAmount - LocalTaxAmount)  

        OutputNumberOfDecimals is a DerivedField	
            type is Numeric 1
            if (TransactionCurrency entered)
                return TransactionCurrencyRel.NumberOfDecimals
            else
			if (actor.context.FinanceEnterpriseGroup.DefaultDecimalsOption entered)
				return actor.context.FinanceEnterpriseGroup.DefaultNumberOfDecimals
			else
				return 2

        DerivedRoundTo is a DerivedField	
            type is Decimal 5.4
            restricted
            if (OutputNumberOfDecimals = 2)
                return .01
            else
            if (OutputNumberOfDecimals = 0)
                return 1
            else
            if (OutputNumberOfDecimals = 3)
                return .001
            else
            if (OutputNumberOfDecimals = 4)
                return .0001

        RoundedOutputTotalTaxAmount is a DerivedField	
            type is like InternationalAmount        
            restricted
            if (OutputTotalTaxAmount entered)
                RoundedOutputTotalTaxAmount	= OutputTotalTaxAmount
                round RoundedOutputTotalTaxAmount to nearest DerivedRoundTo
                return RoundedOutputTotalTaxAmount
            else
                return 0

        RoundedTaxAmount is a DerivedField	
            type is like InternationalAmount        
            restricted
            if (TaxAmount entered)
                RoundedTaxAmount	= TaxAmount
                round RoundedTaxAmount to nearest DerivedRoundTo
                return RoundedTaxAmount
            else
                return 0

        ConvertTaxAmountDiffToPositive is a DerivedField			
            type is like InternationalAmount        				
            restricted
            if (LocalBaseTaxAmount < 0)								
                LocalPositiveTaxAmtDiff = LocalBaseTaxAmount * -1
                return LocalPositiveTaxAmtDiff
           
           	return LocalBaseTaxAmount
                
		WithinTolerance	is a DerivedField
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "WithinTolerance,"		
			
			if (TaxEntity.UseTaxCodeAccounts)
				LocalTaxCode 			= LocalSaveTaxCode
				LocalFromRateLimit 		= CompanyTaxCodeDetailRel.FromRate		 
				LocalThruRateLimit 		= CompanyTaxCodeDetailRel.ThruRate
				LocalToleranceLimit 	= CompanyTaxCodeDetailRel.TaxToleranceLimit
				LocalToleranceAmount 	= CompanyTaxCodeDetailRel.TaxToleranceAmount
			else	
				LocalFromRateLimit 		= TaxEntity.FromRate
				LocalThruRateLimit		= TaxEntity.ThruRate
				LocalToleranceLimit 	= TaxEntity.TaxToleranceLimit
				LocalToleranceAmount 	= TaxEntity.TaxToleranceAmount

			if (LocalErrorCategory = "TXQNT"		
			or  TaxEntity.ThirdParty.VertexOSeries 	
			or  TaxEntity.ThirdParty.Sabrix) 		
				LocalErrorCategory = blank			
			LocalTaxCodeInError 		= LocalSaveTaxCode
			if (LocalFromRateLimit 		not entered
			and LocalThruRateLimit 		not entered
			and LocalToleranceLimit 	not entered
			and LocalToleranceAmount 	not entered)
				LocalErrorNumber = 203					
				return "N"
			 		
			LocalConvertTaxAmtToBase = LocalSaveTaxAmount	 
			initialize LocalSaveTaxAmount
			LocalSaveTaxAmount = 5120ConvertTaxAmountToBase	
			
			if (LocalToleranceLimit entered)
				LocalConvertTaxableToBase = LocalSaveTaxableAmount
				initialize LocalSaveTaxableAmount
				LocalSaveTaxableAmount = 5110ConvertTaxableAmtToBase


			DisplayMonitor = DisplayMonitor = "TaxAmount.............:" + TaxAmount + "<br>"	
			DisplayMonitor = DisplayMonitor = "LocalSaveTaxableAmount:" + LocalSaveTaxableAmount + "<br>"	
			
          	LocalSaveTaxRate = TaxAmount / LocalSaveTaxableAmount				
			DisplayMonitor = DisplayMonitor = "LocalSaveTaxRate......:" + LocalSaveTaxRate + "<br>"
			DisplayMonitor = DisplayMonitor = "LocalTaxableAmount....:" + LocalTaxableAmount + "<br>"
			DisplayMonitor = DisplayMonitor = "LocalSaveTaxableAmount:" + LocalSaveTaxableAmount + "<br>"

			if (LocalFromRateLimit entered
			and LocalThruRateLimit entered
			and LocalTaxableAmount entered)	 
				if	(LocalSaveTaxRate < LocalFromRateLimit
				or	LocalSaveTaxRate  > LocalThruRateLimit)				
					LocalErrorNumber = 202				
					return "N"
					
					
           	if	(LocalToleranceLimit entered
           	and	LocalFromRateLimit not entered
           	and LocalThruRateLimit not entered)
            	if (LocalSaveTaxableAmount > LocalToleranceLimit)
                   	LocalErrorNumber = 204             
					return "N"

           	if (LocalSaveTaxAmount  entered
           	and LocalToleranceAmount  entered)
				OutputlTaxToleranceDiff = TaxAmount - LocalSaveTaxAmount		
               	LocalConvertTaxAmtToBase = OutputlTaxToleranceDiff				
               	LocalBaseTaxAmount = 5120ConvertTaxAmountToBase
               	if (LocalErrorNumber entered)
                	VerifiedOK = false
                   	return "N"
               	else
               		initialize DisplayMonitor
               		LocalTaxAmountDifference = ConvertTaxAmountDiffToPositive	
					if (LocalTaxAmountDifference <= LocalToleranceAmount)
						VerifiedOK = true
						return "Y"
					else		
	                	VerifiedOK = false
	                   	LocalErrorNumber = 205				
						return "N"
 			
			return "Y"	

		LoadCurrencyRateDefaults is a DerivedField
 			type is AlphaUpper 1
 			LocalTrace = LocalTrace + "LoadCurrencyRateDefaults,"
           	if (CurrencyRate not entered)
           		if (MultDiv	not entered)
           			MultDiv			= "M"
           		if (BaseCurrency not entered)
           			BaseCurrency = TransactionCurrency
           		if (TransactionCurrency = BaseCurrency)
	           		CurrencyRate 	= 1				
				else
					if (LocalEffectiveDate not entered)
						LocalEffectiveDate					= EffectiveDate

			return blank
						
		5110ConvertTaxableAmtToBase is a DerivedField	
			type is like InternationalAmount
			LocalTrace = LocalTrace + "5110ConvertTaxableAmtToBase,"
			LocalExecuteReturnBlank = LoadCurrencyRateDefaults
			if (LocalConvertTaxableToBase not entered)
				LocalConvertTaxableToBase = TaxableAmount

			if (DisplayOn)
				display "[<Initials>:CalcTax]5110ConvertTaxableAmountToBaseRoutine..."
				display "[<Initials>:CalcTax]LocalConvertTaxableToBase:<LocalConvertTaxableToBase>"
				display "[<Initials>:CalcTax]TaxableAmount:<TaxableAmount>"
				display "[<Initials>:CalcTax]CurrencyRate:<CurrencyRate>"
								
			LocalEnteredRate = CurrencyRate
           	
           	if (CurrencyRate not entered)
				if (BaseCurrency not entered)
					if (TransactionCurrency entered)
						BaseCurrency = TransactionCurrency
					else
           				CurrencyRate 		= 1				
	           			MultDiv				= "M"							
						
       		if (TransactionCurrency = BaseCurrency)
           		CurrencyRate 		= 1				
           		MultDiv				= "M"
           		return LocalConvertTaxableToBase
			else
				if (LocalEffectiveDate not entered)
					LocalEffectiveDate					= EffectiveDate
				FromEntity 								= TaxEntity.AccountingEntity  
				LocalExchangeDate 						= LocalEffectiveDate 		 
				LocalTransactionAmount					= TaxableAmount
				LocalTransactionAmount					= LocalConvertTaxableToBase
				LocalBaseAmount.EnteredCurrencyRate 	= CurrencyRate
				LocalBaseAmount.EnteredCurrencyAmount 	= blank
				if (BaseCurrency entered)
					LocalBaseAmount.ToCurrency			= BaseCurrency
				else
					LocalBaseAmount.ToCurrency			= TaxEntity.FunctionalCurrency	
				DisplayBaseAmount						= LocalBaseAmount.OutputCurrencyAmount	 
				ReturnedBaseTaxableAmount				= DisplayBaseAmount
				OutputCurrencyRate						= LocalBaseAmount.OutputCurrencyRate
				              			
			return LocalBaseAmount.OutputCurrencyAmount


		5120ConvertTaxAmountToBase is a DerivedField
			type is like InternationalAmount
			LocalTrace = LocalTrace + "5120ConvertTaxAmountToBase,"
			LocalExecuteReturnBlank = LoadCurrencyRateDefaults
			if (DisplayOn)
				display "[<Initials>:CalcTax]-----LocalTrace:<LocalTrace>,<DerivedTimestamp>---------"
				display "[<Initials>:CalcTax]EnteredCurrencyAmount:<LocalBaseAmount.EnteredCurrencyAmount>"
				display "[<Initials>:CalcTax]LocalConvertTaxAmtToBase:<LocalConvertTaxAmtToBase>"
				display "[<Initials>:CalcTax]CurrencyRate:<CurrencyRate>"
			if (LocalConvertTaxAmtToBase not entered)
				LocalConvertTaxAmtToBase = TaxAmount
							
			FromEntity 								= TaxEntity.AccountingEntity  
			LocalExchangeDate 						= LocalEffectiveDate 
			LocalTransactionAmount					= LocalConvertTaxAmtToBase
			LocalBaseAmount.EnteredCurrencyRate 	= CurrencyRate
			LocalBaseAmount.EnteredCurrencyAmount 	= blank
			if (BaseCurrency entered)
				LocalBaseAmount.ToCurrency			= BaseCurrency
			else
				LocalBaseAmount.ToCurrency			= TaxEntity.FunctionalCurrency	
			if (DisplayOn)
				display "[<Initials>:CalcTax]----------[FromFields]-------------------------"
				display "[<Initials>:CalcTax]---------[ContextFields]-----------------------"
				display "[<Initials>:CalcTax]FinanceEnterpriseGroup:<FinanceEnterpriseGroup>"
				display "[<Initials>:CalcTax]From-TransactionCurrency:<TransactionCurrency>"
				display "[<Initials>:CalcTax]From-LocalTransactionAmount:<LocalTransactionAmount>"
				display "[<Initials>:CalcTax]LocalEffectiveDate:<LocalEffectiveDate>"
				display "[<Initials>:CalcTax]-------------[ToFields]-----------------------"
				display "[<Initials>:CalcTax]ToCurrency-LocalEffectiveDate:<BaseCurrency>"
				display "[<Initials>:CalcTax]CurrencyRate:<CurrencyRate>"
				display "[<Initials>:CalcTax]EnteredCurrencyAmount:<LocalBaseAmount.EnteredCurrencyAmount>"		
			DisplayBaseAmount						= LocalBaseAmount.OutputCurrencyAmount	 
			ReturnedBaseTaxAmount					= DisplayBaseAmount
			OutputCurrencyRate						= LocalBaseAmount.OutputCurrencyRate
			if (DisplayOn)
				display "[<Initials>:CalcTax]DisplayBaseAmount:<DisplayBaseAmount>"
				display "[<Initials>:CalcTax]----------EndOfCalculateBaseAmountResults-------------------"   
              			
			return LocalBaseAmount.OutputCurrencyAmount
			
		
		CheckTaxCode is a DerivedField
			type is Boolean	
			LocalTrace = LocalTrace + "CheckTaxCode,"
			if (TaxEntity.ThirdParty entered					
			and !TaxEntity.UseTaxCodeAccounts)
				return false
			
			if (BypassEditingTaxCode)			
				return false								
					

			return true
			
		CheckForErrors is a DerivedField
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "CheckForErrors,"			
			initialize TaxTable
			LocalErrorCategory 	= blank				
			if (TaxEntity entered
			and TaxEntity not exist)
				LocalErrorNumber = 902			
				return "Y"		

			if (TaxEntity not entered)
				LocalErrorNumber = 906			
				return "Y" 	
				
			if (InvoiceCompany entered)
				if (InvoiceCompany not exist)			
					LocalErrorNumber = 908			
					return "Y" 
				else
					TaxEntity = InvoiceCompany.AccountingEntity			
							
			if (TaxEntity entered)	
				if (TaxEntity not exist)				
					LocalErrorNumber = 907			
					return "Y" 						

					
			if (TaxEntity.ThirdParty.VertexOSeries)
				if (TaxEntity.UseTaxCodeAccounts
				and  TaxCode not entered)
					LocalErrorNumber = 100			
					LocalTaxCodeInError = TaxCode
					return "Y"												

				
				
			if (CalculateTax.Function.CalculateTax			
			and CalculateTax.TaxEntity not entered)
				LocalErrorNumber = 107
				return "Y"


				
			if (CheckTaxCode)								
				if (!BypassMemberEdit
				and TaxCode.TaxType.TableMember)
					LocalErrorNumber = 108			
					LocalTaxCodeInError = TaxCode													
					return "Y" 
						
			if (Function.CalculateTaxable					
			and TaxCode.TaxType.TaxTableCode)
				LocalErrorNumber = 112			
				LocalTaxCodeInError = TaxCode													
				return "Y" 		

			if (System != "AP"						
			and TaxCode.TaxType.CalculatedRate)
				LocalErrorNumber = 113			
				LocalTaxCodeInError = TaxCode													
				return "Y"								


			if (TaxEntity.ThirdParty entered				
			and Function.CalculateTaxable)
				LocalErrorNumber = 111
				OutputTaxCodeInError		= blank													 
				return "Y" 				

			if (TaxCode not entered
			and TaxEntity.ThirdParty.InforTax)
				LocalErrorNumber = 100
				OutputTaxCodeInError		= LocalTaxCodeInError													 
				return "Y" 

			if (DisplayOn)
				display "[TLC]CalTx:B4Msg101:Line2005:-----------------------------"
				display "[TLC]CalTx:B4Msg101:Line2006:InvoiceAmount:<InvoiceAmount>"
				display "[TLC]CalTx:B4Msg101:Line2007:TaxableAmount:<TaxableAmount>"
				display "[TLC]CalTx:B4Msg101:Line2008:UnitCost.....:<UnitCost>"						
				
			if (Function.CalculateTax					
			and TaxableAmount not entered
			and InvoiceAmount not entered
			and UnitCost      not entered				
			and !TaxEntity.ThirdParty.Sabrix)
				LocalErrorNumber = 101				
				return "Y" 
				
			if (LocalTaxCode not entered)	
				LocalTaxCode = TaxCode

			LocalEffectiveDate	= EffectiveDate				
			LocalTaxRatesLoaded = TaxRatesLoaded		
			if (LocalTaxRatesLoaded = "N"
			or LocalEffectiveDate not entered)
				OutputTaxCodeInError		= LocalTaxCodeInError
				if (LocalErrorNumber not entered)
					LocalErrorNumber = 102
				return "Y" 

			if (LocalErrorNumber entered)
				OutputTaxCodeInError		= LocalTaxCodeInError
				return "Y" 

			if (TaxEntity.UseTaxCodeAccounts
			and LocalTaxCode.TaxType.TaxTableCode)
				LocalExecuteReturnBlank 		= CheckIfEntityTaxCodesExist		
				if (LocalErrorNumber entered)
					OutputTaxCodeInError		= LocalTaxCodeInError
					return "Y"
			
			if (TaxEntity.UseTaxCodeAccounts				
			and !CompanyTaxCodeDetailRel exist)				 
				if (SendMultLineItems						
				and TaxEntity.ThirdParty.Sabrix				
				and LocalTaxCode not entered)				
					LocalContinue = true					
				else
					LocalErrorNumber 			= 110					 
					LocalTaxCodeInError 		= TaxCode
					OutputTaxCodeInError		= LocalTaxCodeInError
					return "Y"

			if (Function.VerifyTax)
				if (TaxableAmount not entered 
				and	InvoiceAmount not entered)
					LocalErrorNumber 		= 201
					return "Y"
					
				if (TaxableAmount entered 
				and	TaxAmount entered
				and TaxableAmount = TaxAmount)
					LocalErrorNumber 		= 904
					return "Y"					 

			if (TaxEntity.ThirdParty.VertexOSeries)				
				LocalTrigger2 = EditAllTaxAccountsEntered		
				if (LocalErrorNumber entered)					
					return blank	

			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	
			and TaxCode not entered)
				LocalErrorCategory = "TXQNT"
				LocalErrorNumber = 826 					
			if (SendAddressOrTaxAreaId.AddressOnly	
			and PostalAddress.Country not entered)
				LocalErrorCategory = "TXQNT"
				LocalErrorNumber = 827	

			LocalTaxCodeInError = blank
			return "N"		
		ValidateThatTaxAreaIdIsNumeric  is a DerivedField		 
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "ValidateThatTaxAreaIdIsNumeric,"		  		

			if (SendAddressOrTaxAreaId.AddressOnly)		
				return blank

			if (TaxCode[1:9] entered)			
				if (TaxCode[1:9] is numeric)
					LocalContinue = true
				else
					LocalErrorNumber = 813
					
	  		if (FromTaxCode[1:9] entered)
		  		if (FromTaxCode[1:9] is numeric)
		  			LocalContinue = true
				else
					LocalErrorNumber = 814

	  		if (BuyerAdminDestTaxCode[1:9] entered)
				if (BuyerAdminDestTaxCode[1:9] is numeric)	  		
		  			LocalContinue = true
				else
					LocalErrorNumber = 815

	  		if (POATaxCode[1:9] entered)
				if (POATaxCode[1:9] is numeric)	  		
		  			LocalContinue = true
				else
					LocalErrorNumber = 816
														
			return blank	
		ValidateCountryCodes  is a DerivedField		 
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "ValidateCountryCodes,"
			LocalExecuteReturnBlank = LoadDefaultCountryCode
			if	(TaxEntity.ThirdParty.VertexOSeries) 
				if (FromISOCountryCode not entered
				and FromPostalAddress entered)	
					LocalErrorNumber 	= 805
					LocalErrorCategory 	= "TXQNT"	
					LocalCountryCode	= FromCountryCode
					return blank

				if (ToISOCountryCode not entered
				and PostalAddress entered)				
					LocalCountryCode	= ToCountryCode
					LocalErrorCategory 	= "TXQNT"
					LocalErrorNumber 	= 806	
					return blank

				if (POAISOCountryCode not entered
				and POAAddress entered)
					LocalCountryCode	= POACountryCode
					LocalErrorCategory 	= "TXQNT"
					LocalErrorNumber 	= 807	
					return blank

				if (BuyerAdminDestISOCountryCode not entered
				and BuyerAdminDestAddress entered)
					LocalCountryCode	= BuyerAdminDestCountryCode 
					LocalErrorCategory 	= "TXQNT"
					LocalErrorNumber 	= 807	
					return blank					

			return blank																		

		ValidateCurrencyISOCodes  is a DerivedField		 
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "ValidateCurrencyISOCodes,"
					

			return blank			
		CheckIfEntityTaxCodesExist is a DerivedField		 
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "CheckIfEntityTaxCodesExist,"
			if (TaxEntity.UseTaxCodeAccounts
			and LocalTaxCode.TaxType.TaxTableCode)
				initialize LocalTableTaxCode	
				LocalTableTaxCode = LocalTaxCode
				if (TaxTable.TaxTableOutput[1].TaxCode not entered
				or LocalTaxTableBuilt.No)
					LocalProductTaxCategory = ProductTaxCategory
					LocalTaxTableBuilt 		= BuildTaxTable
				
				LocalCounter2 = 1 	
				if (LocalTaxTableBuilt.Yes)	
					if (TaxTable.TaxTableOutput[LocalCounter2].TaxCode entered)
						while (LocalCounter2 <= 8)
							if (TaxTable.TaxTableOutput[LocalCounter2].TaxCode entered)
								TaxTable.TaxTableOutput[LocalCounter2].InTaxAmount = TaxAmount
								LocalTableTaxCode 		= TaxTable.TaxTableOutput[LocalCounter2].TaxCode
								if (CompanyTaxTableCodeRel not exist)
									LocalTaxCodeInError = LocalTableTaxCode
									LocalErrorNumber	= 109
									return blank
							LocalCounter2 += 1
														
			return blank
		TaxRatesLoaded is a DerivedField		
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "TaxRatesLoaded,"
			
			if	(TaxEntity.ThirdParty.VertexOSeries
			or  TaxEntity.ThirdParty.Sabrix)
				return "Y"		

			LocalProductTaxCategory = ProductTaxCategory
			LocalTaxTableBuilt = BuildTaxTable						
			LocalTaxCode = TaxCode
			
			if (LocalErrorNumber entered)
				LocalTaxCodeInError = TaxCode
				return "N"
			
			if (!LocalTaxCode.TaxType.TaxTableCode
			and !LocalTaxCode.TaxType.CalculatedRate)	
				if (LocalProductTaxCategory entered)
					if (GetTaxRateRel not exists)
						initialize LocalProductTaxCategory		
						
				if  (GetAnyTaxRateRel not exists)
					LocalTaxCodeInError = LocalTableTaxCode
					LocalErrorNumber = 102
					return "N"
				else	
                	
					if (GetTaxRateRel exist)										
            			LocalTaxRate      	= last GetTaxRateRel.Rate				
						LocalSecondaryRate	= last GetTaxRateRel.SecondaryRate		
						LocalEffectiveDate2	= last GetTaxRateRel.EffectiveDate		
            		else
            			LocalTaxRate      	= last GetAnyTaxRateRel.Rate	
						LocalSecondaryRate	= last GetAnyTaxRateRel.SecondaryRate				  
						LocalEffectiveDate2	= last GetAnyTaxRateRel.EffectiveDate
					LocalAccumulatedTaxRate	= LocalTaxRate
					TaxTable.TaxTableOutput[1].TaxCode 			= LocalTaxCode
					TaxTable.TaxTableOutput[1].TaxRate 			= LocalTaxRate
					TaxTable.TaxTableOutput[1].SecondaryRate 	= LocalSecondaryRate	
					TaxTable.TaxTableOutput[1].EffectiveDate 	= LocalEffectiveDate2	
					if (LocalSaveTaxPointDate entered)
						TaxTable.TaxTableOutput[1].TaxPointDate =  LocalSaveTaxPointDate
					else
						TaxTable.TaxTableOutput[1].TaxPointDate =  LocalEffectiveDate						
					return "Y"
			else
			if (LocalTaxCode.TaxType.TaxTableCode
			and LocalTaxTableBuilt.Yes)
				LocalTaxTable = LocalTaxCode
				LocalCounter = 1 
				initialize LocalTableTaxCode
				initialize LocalAccumulatedTaxRate		 
				while (LocalCounter <= 8)
					if (TaxTable.TaxTableOutput[1].TaxCode not entered)
						return "N"
					else			 
					if (TaxTable.TaxTableOutput[LocalCounter].TaxCode entered)
						LocalTableTaxCode 				= TaxTable.TaxTableOutput[LocalCounter].TaxCode
						if (GetAnyTaxRateRel not exists)
							LocalTaxCodeInError = LocalTableTaxCode
							LocalErrorNumber = 102
							return "N"
						else

		                	if (GetTableTaxCategoryRateRel exist)		
	                			TaxTable.TaxTableOutput[LocalCounter].TaxRate      	= last GetTableTaxCategoryRateRel.Rate				
								TaxTable.TaxTableOutput[LocalCounter].SecondaryRate	= last GetTableTaxCategoryRateRel.SecondaryRate		
								TaxTable.TaxTableOutput[LocalCounter].EffectiveDate	= last GetTableTaxCategoryRateRel.EffectiveDate		
							else																										
								TaxTable.TaxTableOutput[LocalCounter].TaxRate 		= last GetAnyTaxRateRel.Rate 		 
								TaxTable.TaxTableOutput[LocalCounter].EffectiveDate = last GetAnyTaxRateRel.EffectiveDate					
								TaxTable.TaxTableOutput[LocalCounter].SecondaryRate = last GetAnyTaxRateRel.SecondaryRate					
							
							if (LocalSaveTaxPointDate entered)
								TaxTable.TaxTableOutput[LocalCounter].TaxPointDate =  LocalSaveTaxPointDate
							else
								TaxTable.TaxTableOutput[LocalCounter].TaxPointDate =  LocalEffectiveDate	
							LocalAccumulatedTaxRate = LocalAccumulatedTaxRate + TaxTable.TaxTableOutput[LocalCounter].TaxRate
							
							
					LocalCounter += 1
				return "Y" 
				
			return "Y"		


		BuildTaxTable is a DerivedField			
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "BuildTaxTable,"
			initialize LocalErrorCategory
			LocalTaxCode 	= TaxCode
			LocalTaxTable 	= TaxCode
			if (!LocalTaxCode.TaxType.TaxTableCode)							
				TaxTable.TaxTableOutput[1].TaxCode 	= TaxCode
				TaxTable.TaxTableOutput[1].Flag		= blank
			else															
				if (TaxTableTaxCodeRel not exist)
					LocalErrorCategory = "TXTXT"
					LocalErrorNumber = 202 		
					return "N"
				else																		
					TaxTable.TaxTableOutput[1].TaxCode 	= last TaxTableTaxCodeRel.TaxCode1				
					TaxTable.TaxTableOutput[1].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable1
					TaxTable.TaxTableOutput[2].TaxCode 	= last TaxTableTaxCodeRel.TaxCode2
					TaxTable.TaxTableOutput[2].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable2
					TaxTable.TaxTableOutput[3].TaxCode 	= last TaxTableTaxCodeRel.TaxCode3
					TaxTable.TaxTableOutput[3].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable3
					TaxTable.TaxTableOutput[4].TaxCode 	= last TaxTableTaxCodeRel.TaxCode4
					TaxTable.TaxTableOutput[4].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable4
					TaxTable.TaxTableOutput[5].TaxCode 	= last TaxTableTaxCodeRel.TaxCode5
					TaxTable.TaxTableOutput[5].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable5
					TaxTable.TaxTableOutput[6].TaxCode 	= last TaxTableTaxCodeRel.TaxCode6
					TaxTable.TaxTableOutput[6].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable6
					TaxTable.TaxTableOutput[7].TaxCode 	= last TaxTableTaxCodeRel.TaxCode7
					TaxTable.TaxTableOutput[7].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable7
					TaxTable.TaxTableOutput[8].TaxCode 	= last TaxTableTaxCodeRel.TaxCode8
					TaxTable.TaxTableOutput[8].Flag		= last TaxTableTaxCodeRel.EffectOnTaxable8
	
			LocalExecuteReturnBlank = 5400LoadAccountInfo
			if (LocalErrorNumber entered)
				LocalTaxCodeInError = TaxCode
				return "N"
				
			
			return "Y"	

		5400LoadAccountInfo is a DerivedField
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "5400LoadAccountInfo,"	
			LocalCounter = 1 
			initialize LocalTableTaxCode		
			if (TaxEntity.ThirdParty.VertexOSeries)	
				IdxMax = 20
			else
				IdxMax = 8	
			while (LocalCounter <= IdxMax)
				if (TaxEntity.ThirdParty.VertexOSeries	
				or  TaxEntity.ThirdParty.Sabrix)		
					LocalContinue = true				
				else
				if (TaxTable.TaxTableOutput[1].TaxCode not entered)
					if (LocalTaxCode.TaxType.TaxTableCode)
						LocalErrorCategory = "TXTXT"
						LocalErrorNumber = 204 			
						return "N"
					else
						LocalErrorCategory = blank
						LocalErrorNumber = 100			
						return "N"							
				if (TaxTable.TaxTableOutput[LocalCounter].TaxCode entered)
					if (TaxEntity.ThirdParty.VertexOSeries
					or  TaxEntity.ThirdParty.Sabrix)
						LocalTableTaxCode 												= TaxTable.TaxTableOutput[LocalCounter].TaxCode	
						LocalTableTaxCode 												= OutputGeoCode 
					else	
						LocalTableTaxCode 												= TaxTable.TaxTableOutput[LocalCounter].TaxCode
						TaxTable.TaxTableOutput[LocalCounter].Description 				= LocalTableTaxCode.Description					 
						TaxTable.TaxTableOutput[LocalCounter].TaxPointDate 				= EffectiveDate
						TaxTable.TaxTableOutput[LocalCounter].InTaxAmount 				= TaxAmount
						TaxTable.TaxTableOutput[LocalCounter].TaxAmount 				= blank					
						TaxTable.TaxTableOutput[LocalCounter].TaxAmount5DP 				= blank					
						TaxTable.TaxTableOutput[LocalCounter].TaxableAmount 			= TaxableAmount
						TaxTable.TaxTableOutput[LocalCounter].TaxLevel 					= blank					
					
					if (LocalTableTaxCode not entered			
					and TaxEntity.UseTaxCodeAccounts)			
						if (OutputGeoCode entered)				
							LocalTableTaxCode = OutputGeoCode	
						else									
							LocalTableTaxCode = TaxCode			
					if (TaxEntity.UseTaxCodeAccounts)
						TaxTable.TaxTableOutput[LocalCounter].LandCostFlag				= CompanyTaxTableCodeRel.LandedCost
						TaxTable.TaxTableOutput[LocalCounter].AccrualFlag 				= CompanyTaxTableCodeRel.AccruedOrInvoiced  	 
						TaxTable.TaxTableOutput[LocalCounter].TaxTerms					= CompanyTaxTableCodeRel.TaxTerms
						TaxTable.TaxTableOutput[LocalCounter].TaxPoint 					= CompanyTaxTableCodeRel.TaxPoint 
						TaxTable.TaxTableOutput[LocalCounter].AllowAccountChange 		= CompanyTaxTableCodeRel.AllowAccountChanges
						TaxTable.TaxTableOutput[LocalCounter].TaxID 					= CompanyTaxTableCodeRel.TaxID
						TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount	 		= CompanyTaxTableCodeRel.TaxInputAccount			
						TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount		= CompanyTaxTableCodeRel.TaxInputDueAccount
						TaxTable.TaxTableOutput[LocalCounter].TaxOutputAccount	 		= CompanyTaxTableCodeRel.TaxOutputAccount
						TaxTable.TaxTableOutput[LocalCounter].TaxOutputDueAccount		= CompanyTaxTableCodeRel.TaxOutputDueAccount
						TaxTable.TaxTableOutput[LocalCounter].AccrualCode 				= CompanyTaxTableCodeRel.AccrualCode
	    				TaxTable.TaxTableOutput[LocalCounter].PostOption               	= CompanyTaxTableCodeRel.PostOption 	
					    TaxTable.TaxTableOutput[LocalCounter].TaxableToleranceLimit     = CompanyTaxTableCodeRel.TaxToleranceLimit
					    TaxTable.TaxTableOutput[LocalCounter].TaxToleranceAmount       	= CompanyTaxTableCodeRel.TaxToleranceAmount 
					    TaxTable.TaxTableOutput[LocalCounter].FromRate				 	= CompanyTaxTableCodeRel.FromRate
					    TaxTable.TaxTableOutput[LocalCounter].ThruRate                	= CompanyTaxTableCodeRel.ThruRate 
					    LocalTaxDistributionCode 										= CompanyTaxTableCodeRel.TaxDistributionCode 
					    TaxTable.TaxTableOutput[LocalCounter].TaxDistributionAccountCode = CompanyTaxTableCodeRel.TaxDistributionCode 
					    LocalExecuteReturnBlank2 = GetAccrualInfo
				    	TaxTable.TaxTableOutput[LocalCounter].AccrualCodeAccount   		= ReturnedTaxAccrualAccount
					    if (!TaxEntity.ThirdParty.VertexOSeries)
					    	ReverseCharge   											= CompanyTaxTableCodeRel.VATReverseIndicator	
					else
						TaxTable.TaxTableOutput[LocalCounter].LandCostFlag 				= TaxEntity.LandedCost
						TaxTable.TaxTableOutput[LocalCounter].AccrualFlag 				= TaxEntity.AccruedOrInvoiced  	 
						TaxTable.TaxTableOutput[LocalCounter].TaxTerms					= TaxEntity.TaxTerms
						TaxTable.TaxTableOutput[LocalCounter].TaxPoint 					= TaxEntity.TaxPoint 
						TaxTable.TaxTableOutput[LocalCounter].AllowAccountChange 		= TaxEntity.AllowAccountChanges
						TaxTable.TaxTableOutput[LocalCounter].TaxID 					= TaxEntity.TaxID
						TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount	 		= TaxEntity.TaxInputAccount
						TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount		= TaxEntity.TaxInputDueAccount
						TaxTable.TaxTableOutput[LocalCounter].TaxOutputAccount	 		= TaxEntity.TaxOutputAccount
						TaxTable.TaxTableOutput[LocalCounter].TaxOutputDueAccount		= TaxEntity.TaxOutputDueAccount
						TaxTable.TaxTableOutput[LocalCounter].AccrualCode 				= TaxEntity.AccrualCode
					    TaxTable.TaxTableOutput[LocalCounter].PostOption               	= TaxEntity.PostOption  
					    TaxTable.TaxTableOutput[LocalCounter].TaxableToleranceLimit     = TaxEntity.TaxToleranceLimit
					    TaxTable.TaxTableOutput[LocalCounter].TaxToleranceAmount       	= TaxEntity.TaxToleranceAmount 
					    TaxTable.TaxTableOutput[LocalCounter].FromRate				 	= TaxEntity.FromRate
					    TaxTable.TaxTableOutput[LocalCounter].ThruRate                	= TaxEntity.ThruRate
					    LocalTaxDistributionCode 										= TaxEntity.TaxDistributionCode  
					    TaxTable.TaxTableOutput[LocalCounter].TaxDistributionAccountCode = TaxEntity.TaxDistributionCode 
					    
						LocalExecuteReturnBlank2 = GetAccrualInfo					   
				    	TaxTable.TaxTableOutput[LocalCounter].AccrualCodeAccount   		= ReturnedTaxAccrualAccount	
					    if (!TaxEntity.ThirdParty.VertexOSeries)
					    	ReverseCharge   											= false 
					if (TaxEntity.ThirdParty.VertexOSeries)					
						LocalTrigger = GetTaxDistributionCodeAccounts		
						
					if (!TaxTable.TaxTableOutput[LocalCounter].AllowAccountChange)	 
						ValidAccountsTrigger = TaxAccountsValid
						if (ValidAccountsTrigger = "Y")															
							TaxTable.TaxTableOutput[LocalCounter].AccountError 			= false
						else
							TaxTable.TaxTableOutput[LocalCounter].AccountError 			= true			
				LocalCounter += 1
				if (LocalCounter > IdxMax)	
					end while				
				ReturnedTaxInputAccount		= TaxTable.TaxTableOutput[1].TaxInputAccount
				ReturnedTaxOutputAccount	= TaxTable.TaxTableOutput[1].TaxOutputAccount
			return "Y"		

		EditAllTaxAccountsEntered is a DerivedField	
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "EditAllTaxAccountsEntered,"	
			if (InputTaxDistributionCode entered)	
				LocalTaxDistributionCode 		= InputTaxDistributionCode 
              	if (AllTaxDistributionCodeDetailRel exist)
					for each AllTaxDistributionCodeDetailRel
						if (each.TaxInputAccount entered
						and each.TaxInputDueAccount entered
						and each.TaxOutputAccount entered
						and each.TaxOutputDueAccount entered)
							LocalErrorNumber = blank
							LocalContinue = true
						else
							LocalErrorNumber = 998
							LocalContinue = false	
							return blank
				
			return blank
			
		EditBlankTaxAccounts is a DerivedField	
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "EditBlankTaxAccounts,"	
			if (InputTaxDistributionCode entered	
			and TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount not entered)	
				LocalErrorNumber = 998
				LocalContinue = false
				return blank
			else
				LocalErrorNumber = blank
				LocalContinue = true								 

			return blank			
		GetTaxDistributionCodeAccounts is a DerivedField  			       
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "GetTaxDistributionCodeAccounts,"
			initialize LocalTaxDistributionLevel 
			initialize LocalDistributionType		
			if (InputTaxDistributionCode entered)	
				LocalTaxDistributionCode 		= InputTaxDistributionCode 
				LocalTaxDistributionLevel		= TaxTable.TaxTableOutput[LocalCounter].JurisdictionLevel
				LocalDistributionType			= TaxTable.TaxTableOutput[LocalCounter].ImpositionType 	 
				TaxTable.TaxTableOutput[LocalCounter].TaxDistributionAccountCode = InputTaxDistributionCode 
			else			
				LocalTaxDistributionLevel		= TaxTable.TaxTableOutput[LocalCounter].JurisdictionLevel
				LocalDistributionType			= TaxTable.TaxTableOutput[LocalCounter].ImpositionType 	 	  		
				
			if (LocalTaxDistributionCode entered)
				LocalNoTaxDistributionRecFound = false
				if (TaxDistributionCodeDetailRel exist)
					LocalNoTaxDistributionRecFound = false
					LocalTrigger = InitializeTableAccounts	 
					TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount	 				= TaxDistributionCodeDetailRel.TaxInputAccount			 
					TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount				= TaxDistributionCodeDetailRel.TaxInputDueAccount
					TaxTable.TaxTableOutput[LocalCounter].TaxOutputAccount	 				= TaxDistributionCodeDetailRel.TaxOutputAccount
					TaxTable.TaxTableOutput[LocalCounter].TaxOutputDueAccount				= TaxDistributionCodeDetailRel.TaxOutputDueAccount	
					TaxTable.TaxTableOutput[LocalCounter].RecoverableAccount        		= TaxDistributionCodeDetailRel.RecoverableAccount  				 
					TaxTable.TaxTableOutput[LocalCounter].NonRecoverableAccount       		= TaxDistributionCodeDetailRel.NonRecoverableAccount 			 
					TaxTable.TaxTableOutput[LocalCounter].ForeignRecoverableAccount 		= TaxDistributionCodeDetailRel.ForeignRecoverableAccount		 
					TaxTable.TaxTableOutput[LocalCounter].ForeignNonRecoverableAccount  	= TaxDistributionCodeDetailRel.ForeignNonRecoverableAccount 	 
				else
				if (TaxDistributionCodeDetailRel2 exist)	
					LocalNoTaxDistributionRecFound = false																									
					LocalTrigger = InitializeTableAccounts	 																								
					TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount	 				= TaxDistributionCodeDetailRel2.TaxInputAccount			 		
					TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount				= TaxDistributionCodeDetailRel2.TaxInputDueAccount				
					TaxTable.TaxTableOutput[LocalCounter].TaxOutputAccount	 				= TaxDistributionCodeDetailRel2.TaxOutputAccount				
					TaxTable.TaxTableOutput[LocalCounter].TaxOutputDueAccount				= TaxDistributionCodeDetailRel2.TaxOutputDueAccount				
					TaxTable.TaxTableOutput[LocalCounter].RecoverableAccount        		= TaxDistributionCodeDetailRel2.RecoverableAccount  			
					TaxTable.TaxTableOutput[LocalCounter].NonRecoverableAccount       		= TaxDistributionCodeDetailRel2.NonRecoverableAccount 			
					TaxTable.TaxTableOutput[LocalCounter].ForeignRecoverableAccount 		= TaxDistributionCodeDetailRel2.ForeignRecoverableAccount		
					TaxTable.TaxTableOutput[LocalCounter].ForeignNonRecoverableAccount  	= TaxDistributionCodeDetailRel2.ForeignNonRecoverableAccount 	
				else
					LocalTaxDistributionLevel = "DEFAULT"
					initialize LocalDistributionType 					
					LocalNoTaxDistributionRecFound = true
					if (DefaultTaxDistributionCodeDetailRel exist)
						LocalTrigger = InitializeTableAccounts		 
						TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount	 			= DefaultTaxDistributionCodeDetailRel.TaxInputAccount			 
						TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount			= DefaultTaxDistributionCodeDetailRel.TaxInputDueAccount
						TaxTable.TaxTableOutput[LocalCounter].TaxOutputAccount	 			= DefaultTaxDistributionCodeDetailRel.TaxOutputAccount
						TaxTable.TaxTableOutput[LocalCounter].TaxOutputDueAccount			= DefaultTaxDistributionCodeDetailRel.TaxOutputDueAccount	
						TaxTable.TaxTableOutput[LocalCounter].RecoverableAccount        	= DefaultTaxDistributionCodeDetailRel.RecoverableAccount  				 
						TaxTable.TaxTableOutput[LocalCounter].NonRecoverableAccount       	= DefaultTaxDistributionCodeDetailRel.NonRecoverableAccount 			 
						TaxTable.TaxTableOutput[LocalCounter].ForeignRecoverableAccount 	= DefaultTaxDistributionCodeDetailRel.ForeignRecoverableAccount		 
						TaxTable.TaxTableOutput[LocalCounter].ForeignNonRecoverableAccount  = DefaultTaxDistributionCodeDetailRel.ForeignNonRecoverableAccount 	 
			
				LocalTrigger2 = EditBlankTaxAccounts				 					

			return blank		

		InitializeTableAccounts is a DerivedField			
			type is AlphaUpper 1
			default label is untranslatable
			LocalTrace = LocalTrace + "InitializeAccount,"	
			TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount  	 			= blank		 		 
			TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount  			= blank 
			TaxTable.TaxTableOutput[LocalCounter].TaxOutputAccount		 		= blank	 
			TaxTable.TaxTableOutput[LocalCounter].TaxOutputDueAccount			= blank
			TaxTable.TaxTableOutput[LocalCounter].RecoverableAccount        	= blank		   				 
			TaxTable.TaxTableOutput[LocalCounter].NonRecoverableAccount       	= blank	  			 
			TaxTable.TaxTableOutput[LocalCounter].ForeignRecoverableAccount 	= blank	 		 
			TaxTable.TaxTableOutput[LocalCounter].ForeignNonRecoverableAccount  = blank	 	 
			TaxTable.TaxTableOutput[LocalCounter].VatSuspenseAccount  			= blank
			return blank						
		
		TaxAccountsValid is a DerivedField				
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "TaxAccountsValid,"	
			if (TaxCodeAccount entered)
				if (TaxTable.TaxTableOutput[LocalCounter].TaxPoint = "P")
					if (TaxCodeAccount not = TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount)				
						return "N"
					else
						return "Y"
				if (TaxCodeAccount not = TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount)
   					return "N"						 
			
			return "Y"

		LoadDefaultCountryCode is a DerivedField
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadDefaultCountryCode,"	
			if (LocalToCountrySize 	< 4)
				LocalToCountrySize 	= PostalAddress.Country size

			if (ToCountryCode not entered)
				ToCountryCode		= PostalAddress.Country

			if (ToCountryCode entered)										
				LocalCountryCode = ToCountryCode							
			if (CountryCodeRel exist)										
				if (CountryCodeRel.IsoCountryCode entered)					
					ToISOCountryCode	= CountryCodeRel.IsoCountryCode
				else
				if (CountryCodeRel.IsoCountryNumber entered)
					ToISOCountryCode	= CountryCodeRel.IsoCountryNumber
				
			if (LocalFromCountrySize < 4)
				LocalFromCountrySize	= FromPostalAddress.Country size

			if (FromCountryCode not entered)
				FromCountryCode	= FromPostalAddress.Country 

			if (FromCountryCodeRel.IsoCountryCode entered)								
				FromISOCountryCode			= FromCountryCodeRel.IsoCountryCode
			else
			if (FromCountryCodeRel.IsoCountryNumber entered)		
				FromISOCountryCode			= FromCountryCodeRel.IsoCountryNumber	

			if (LocalPOACountrySize < 4)
				LocalPOACountrySize = POAAddress.Country size
			if (POACountryCode not entered)
				POACountryCode		= POAAddress.Country
	
			if (POACountryCodeRel.IsoCountryCode entered)					
				POAISOCountryCode	= POACountryCodeRel.IsoCountryCode
			else
			if (POACountryCodeRel.IsoCountryNumber entered)	
				POAISOCountryCode	= POACountryCodeRel.IsoCountryNumber

			if (BuyerAdminDestCountryCode not entered)
				BuyerAdminDestCountryCode = BuyerAdminDestAddress.Country
				
			if (BuyerAdminDestCountryCodeRel.IsoCountryCode entered)	
				BuyerAdminDestISOCountryCode	= BuyerAdminDestCountryCodeRel.IsoCountryCode
			else
			if (BuyerAdminDestCountryCodeRel.IsoCountryNumber entered)	
				BuyerAdminDestISOCountryCode	= BuyerAdminDestCountryCodeRel.IsoCountryNumber			
			 	
																		
			return blank


		ValidateVertexDeliveryTerms is a DerivedField	 
  			type is Alpha 1													 
			if (UserTemplateEnabled									 
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")
				if (DeliveryTerms entered)	 
					if (DeliveryTerms = "EXW"	 
					or	DeliveryTerms = "FCA"	 
					or	DeliveryTerms = "FAS"	
					or	DeliveryTerms = "FOB"	
					or	DeliveryTerms = "CFR"	
					or	DeliveryTerms = "CIF"	
					or	DeliveryTerms = "CPT"	
					or	DeliveryTerms = "CIP"	
					or	DeliveryTerms = "DDP"	
					or	DeliveryTerms = "DAP"	
					or	DeliveryTerms = "DAT"	
					or	DeliveryTerms = "SUP"	
					or	DeliveryTerms = "CUS")	
						LocalContinue = true	
					else
						LocalErrorNumber = 818	
						return blank
					
			return blank	


		XmlEscapedInvoiceNumber is a DerivedField  
			type is Alpha 100
			default label is untranslatable
			initialize TempString
			initialize Counter
			Counter = 0
			TempString = ""
			
			while (Counter <= 100)
				Counter +=1
				if (TempInvoiceNumber[Counter] = "&")
					TempString = TempString + "&amp;"
				else
					TempString = TempString + TempInvoiceNumber[Counter]

			return TempString
		XmlEscapedVendorCustomerName is a DerivedField  
			type is Alpha 125
			default label is untranslatable
			initialize TempString125
			initialize Counter
			Counter = 0
			TempString125 = ""
			
			while (Counter <= 120)
				Counter +=1
				if (TempVendorCustomerName[Counter] = "&")
					TempString125 = TempString125 + "&amp;"
				else
					TempString125 = TempString125 + TempVendorCustomerName[Counter]

			return TempString125

		XmlEscapedLineItemID is a DerivedField  
			type is Alpha 32
			default label is untranslatable
			initialize TempString32
			initialize Counter
			Counter = 0
			TempString32 = ""
			
			while (Counter <= 32)
				Counter +=1
				if (TempLineItemId[Counter] = "&")
					TempString32 = TempString32 + "&amp;"
				else
					TempString32 = TempString32 + TempLineItemId[Counter]

			return TempString32
		XmlEscapedDescription is a DerivedField     
			type is like Description	
			default label is untranslatable
			initialize TempString60
			initialize Counter
			Counter = 0
			TempString60 = ""
			
			while (Counter <= 60)
				Counter +=1
				if (TempDescription[Counter] = "&")
					TempString60 = TempString60 + "&amp;"
				else
					TempString60 = TempString60 + TempDescription[Counter]

			return TempString60

  		CheckIfLogFileToBeCreated is a DerivedField	 
  			type is Alpha 1
			if (LocalTrace not entered)
				if (DontCreateLogFile)
					CreateLogFileHere = false
				else
					CreateLogFileHere = true	
  			return blank
  			  
  		5500DoThirdParty is a DerivedField	 
  			type is Alpha 1
  			LocalExecuteReturnBlank = CheckIfLogFileToBeCreated
  			LocalStartTimestamp	= DerivedTimestamp
  			LocalTrace = LocalTrace + "5500DoThirdParty,"
  			LocalExecuteReturnBlank = VertexOSeries
  			
  			LocalStopTimestamp = DerivedTimestamp	
			TotalElapsedTime = TimestampDiff	
			if (LocalErrorNumber entered)
				return blank
			
			RequestReference		= VertexRequestExecuted 
			LocalRequestReference	= VertexRequestExecuted	
			OutputVertexReporting 	= VertexReportingEvent
			ReturnedPostToJournal	= PostToJournal
			
			if (LocalCreateLogFile 
			and	CreateLogFileHere)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				
  			return blank
  			
		VertexOSeries is a DerivedField		
			type is Alpha 1
			LocalTrace = LocalTrace + "VertexOSeries,"
			if (!TaxEntity.ThirdParty.VertexOSeries)	
				LocalErrorNumber 	 = 104						
				return blank

			LocalErrorCategory = "TXQNT"
			if (TaxEntity.ThirdParty = "B")	
				LocalErrorNumber 	 = 999
				OutputTaxCodeInError = blank													 
				return blank 

			Trigger = CheckTrustedId					
			if (LocalErrorNumber entered)				
				return blank							

			VertexPurchaseOrderRequest 		 = TaxEntity.VertexPurchaseOrderRequest				
			VertexInvoiceVerificationRequest = TaxEntity.VertexInvoiceVerificationRequest		
			if (PayablesTaxingLocation not entered)														
				PayablesTaxingLocation				 = TaxEntity.PayablesTaxingLocation							
			if (ReceivablesTaxingLocation not entered)														
				ReceivablesTaxingLocation				 = TaxEntity.ReceivablesTaxingLocation	
																												
			LocalExecuteReturnBlank = GetAccrualInfo			
			LocalExecuteReturnBlank = SetVertexRequest
						
			if (VertexQuantumOption.EditTaxCompany)
				LocalExecuteReturnBlank = DoVertexEdits
				return blank				

			if (VertexQuantumOption.GeoCodeLookup)
				LocalVertexRequest = "L"	 
				OutputGeoCode = ReturnedGeoCode
				if (MultipleTaxAreaIds)
					LocalErrorNumber 	 = 803
				return blank
 
				
  			if (Function.CalculateTax									
  			or  Function.Inquire										
  			or  ThirdPartyFunction.Calculate							
  			or  VertexQuantumOption.TaxComputation)						
  				if LocalVertexRequest.DontCallVertex					
  					ReturnedVertexRequest = VertexRequestNotCalledLabel	
  					return blank
  			if (Function.VerifyTax										
  			and VertexInvoiceVerificationRequest.Enabled)				
  				PostToJournal = false									
  				LocalVertexRequest = "V"								
  				LocalExecuteReturnBlank = InvoiceVerificationRequest	
  				return blank											
  								
  			if (Function.CalculateTax
  			or  Function.Inquire
			or  Function.VerifyTax
  			or  ThirdPartyFunction.Calculate
  			or  VertexQuantumOption.TaxComputation)
  				PostToJournal = false
				if (LocalVertexRequest.QuotationRequest)  
  					LocalExecuteReturnBlank = QuotationRequest
  					return blank
  				else	
 				if (LocalVertexRequest.AccrualRequest)
 					LocalExecuteReturnBlank = AccrualRequest
  					return blank
  				else
 				if (LocalVertexRequest.PurchaseOrderRequest)
 					LocalExecuteReturnBlank = PurchaseOrderRequest
  					return blank
  				else														
 				if (LocalVertexRequest.InvoiceVerificationRequest)			
 					LocalExecuteReturnBlank = InvoiceVerificationRequest 	
  					return blank  											
  				else
  					LocalExecuteReturnBlank = QuotationRequest  
  					return blank	  

			if (ThirdPartyFunction.WriteToRegisterOnly
			or ThirdPartyFunction.CalculateAndWrite
			or CallingModule = "ProcessTaxHistory")
				PostToJournal = true	
 				if (LocalVertexRequest.AccrualRequest)
 					LocalExecuteReturnBlank = AccrualRequest
  					return blank
  				else	  
				if (LocalVertexRequest.InvoiceRequest)
					LocalExecuteReturnBlank = InvoiceRequest
  					return blank				  
  				else
 				if (LocalVertexRequest.InvoiceVerificationRequest)
 					LocalExecuteReturnBlank = InvoiceVerificationRequest
  					return blank
  				else
  					LocalExecuteReturnBlank = InvoiceRequest
  					
			return blank	 

 		DoVertexEdits is a DerivedField
 			type is Alpha 1
 			LocalTrace = LocalTrace + "DoVertexEdits,"
			if (TaxEntity entered
			and !VertexQuantumOption.GeoCodeLookup)
				LocalContinue = true
			else	
			if (VertexQuantumOption.GeoCodeLookup)
				if (TaxEntity entered)
					InFinanceEnterpriseGroup = TaxEntity.FinanceEnterpriseGroup
				if (InFinanceEnterpriseGroup not entered)						
					InFinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup	
				if (InFinanceEnterpriseGroup not entered)
					LocalErrorNumber = 910			
					return blank
				if (VertexConfigVersionGroupRel not exist)
					LocalErrorNumber = 909
					return blank
					
				if (PostalAddress not entered
				and TaxCode not entered)			
					LocalErrorNumber = 802
					return blank				

				return blank	
			 
			if (TaxEntity not entered				
			and InvoiceCompany entered)
				TaxEntity = InvoiceCompany.AccountingEntity		

			if (CallingModule = "VertexConfigVersion")  
				LocalSkipThisEditIfOnlyValidating = true
			else
 			if (TaxEntity not entered)		 
				LocalErrorNumber = 906			
				return blank	
 			
 			if (VertexConfigVersionRel not exist)
				LocalErrorNumber = 909
				return blank			

			if (VertexQuantumOption.GeoCodeLookup	
			and	PostalAddress not entered)
				LocalErrorNumber = 802
				return blank				
			
			if (PostalAddress not entered
			and TaxCode	not entered)	
				LocalErrorNumber = 800
				return blank
			if (DisplayOn)
				display "[TLC:CalcTax]DoVertexEdits:,VertexQuantumOption:<VertexQuantumOption>"
				display "[TLC:CalcTax]InvoiceAmount:<InvoiceAmount>"
				display "[TLC:CalcTax]TaxableAmount:<TaxableAmount>"
				display "[TLC:CalcTax]UnitCost.....:<UnitCost>"

			LocalTrigger2 = EditAllTaxAccountsEntered		
			if (LocalErrorNumber entered)					
				return blank								
								
			if (Function.CalculateTax						
			or  Function.VerifyTax	              
			or  Function.CalculateTaxRate		 				
			or  VertexQuantumOption.TaxComputation
			or  VertexQuantumOption.Inquire)					 			
				if (InvoiceAmount not entered
				and TaxableAmount not entered
				and UnitCost not entered)					
					LocalErrorNumber = 801	
					return blank
			
			LocalVertexLicense = VertexConfigVersionGroupRel.VertexLicense		

			return blank

		DerivedFinanceEnterpriseGroup is a DerivedField			 
			type is like FinanceEnterpriseGroup
			if (InFinanceEnterpriseGroup entered)
				return InFinanceEnterpriseGroup
			if (TaxEntity entered
			and TaxEntity.FinanceEnterpriseGroup entered)
				return TaxEntity.FinanceEnterpriseGroup
			
			return actor.context.FinanceEnterpriseGroup		 

		LoadEnteredAddress  is a DerivedField		
			type is like Description
			if (PostalAddress.Country entered)   
				LocalCtryCityStateZipEntered = PostalAddress.Country + " " + PostalAddress.Municipality + " " + PostalAddress.StateProvince + ", " + PostalAddress.PostalCode	
			else
				return PostalAddress.Country + " " + OutputGeoCode
				
			return LocalCtryCityStateZipEntered	 

		ReturnedGeoCode is a DerivedField		
			type is like TaxCode	
			VertexRoutineExecuted = "ReturnedGeoCode"
			LocalErrorCategory 	  = "TXQNT"				
			if (LocalTrace not entered)
				CreateLogFileHere = true
			else
				CreateLogFileHere = false	
			LocalTrace = LocalTrace + "ReturnedGeoCode,"
			MultipleTaxAreaIds 		= false
			WebServiceError	 		= false
			WebServiceErrorMessage 	= blank 
			if (LocalVertexRequest not entered)
				LocalVertexRequest = "L"
			LocalExecuteReturnBlank = LoadLookupKey
			LocalExecuteReturnBlank = DoVertexEdits
			display "[TLC]\Calculate\Tax_\Local\Error\Number:<LocalErrorNumber>"	
			if (LocalErrorNumber entered)
				display "[TLC]ReturnedGeoCodeErrorA.1...:<LocalErrorNumber>"
				return blank
				
			if (PostalAddress not entered
			and FromPostalAddress entered)
				PostalAddress	= FromPostalAddress
			
			ToCountryCode			= PostalAddress.Country
			if (ToCountryCodeRel.IsoCountryCode entered)
				ToISOCountryCode	= ToCountryCodeRel.IsoCountryCode
			else
			if (ToCountryCodeRel.IsoCountryNumber entered)
				ToISOCountryCode	= ToCountryCodeRel.IsoCountryNumber
				
			if (PostalAddress entered)
				LocalContinueProcessing = true

			if (LookupUsingTaxAreaId)
				LocalContinueProcessing = true

			if (UserTemplateEnabled									
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")	
				if (LocalContinueProcessing)						
					LocalTrigger = CallVertexTaxAreaLookupUT		
					ReturnedVertexRequest = "LookupTaxAreas90"
					LocalVertexVersionUsed = "Version9"  
			else				
			if (VertexConfigRel.DefaultVersion.Version[1:1]	= "8" 
			and LocalContinueProcessing)	
				LocalExecuteReturnBlank = LookupTaxAreas80	
				ReturnedVertexRequest = "LookupTaxAreas80" 
				LocalVertexVersionUsed = "Version8" 	
			else
			if (LocalContinueProcessing)
				ReturnedVertexRequest = "LookupTaxAreas70" 
				LocalVertexVersionUsed = "Version7"
				invoke LookupTaxAreas70 LookupTaxAreas
					resume on error
						WebServiceError = true
						WebServiceErrorMessage = error message	
					if (TaxEntity not entered)
						invoked.Login.UserName 											= blank	
						invoked.Login.Password 											= blank	
						invoked.Login.TrustedId 										= VertexConfigVersionGroupRel.TrustedId
					else
						invoked.Login.UserName 											= blank	
						invoked.Login.Password 											= blank	
						invoked.Login.TrustedId 										= VertexConfigVersionRel.TrustedId
					invoked.TaxAreaRequest.TaxAreaLookup.AsOfDate 			 			= EffectiveDate	 
					invoked.TaxAreaRequest.TaxAreaLookup.TaxAreaId		 			 	= TaxCode
					invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.StreetAddress1  	= PostalAddress.DeliveryAddress.AddressLine1
					invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.StreetAddress2  	= PostalAddress.DeliveryAddress.AddressLine2					
					invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.City 		 	= PostalAddress.Municipality	
					invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.MainDivision 	= PostalAddress.StateProvince
					invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.SubDivision 		= PostalAddress.County
					invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.PostalCode 		= PostalAddress.PostalCode																					
					invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.Country	 	 	= ToISOCountryCode  

					VertexResponse				= result.SEnvelopeVertex

			if (WebServiceError)
				LocalErrorCategory 		= "TXQNT"
				LocalErrorNumber 	 	= 899
				invoke Create VertexTaxAreaIdResults
					invoked.VertexConfig			   					= DerivedFinanceEnterpriseGroup	 
					invoked.VertexTaxAreaIdResults.LookupKey 			= NewLookupKey
					invoked.VertexTaxAreaIdResults.ResponseBusclassKey	= NewLookupKeySequence		
					invoked.VertexTaxAreaIdResults.Sequence				= 1 
					invoked.RelatedObjectReference						= RelatedObjectReference
					invoked.RelatedSystem								= System
					invoked.WebServiceError								= true
					invoked.WebServiceErrorMessage						= WebServiceErrorMessage
					invoked.EntityTaxCodeDefault 	 					= EntityTaxCodeDefault 	
					if (TaxEntity.UseTaxCodeAccounts
					and EntityTaxCodeDefault entered)
						invoked.TaxEntityUsedInLookup 	 				= TaxEntity				 
					else
						invoked.TaxEntityUsedInLookup 	 				= blank		
				if (LocalCreateLogFile
				and	CreateLogFileHere)
					LocalExecuteReturnBlank = CreateTaxToLogFile
				return blank
							
			if (UserTemplateEnabled									
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")	
				Continue = true										
			else	
				JurisSeq 		= 0
				ResultsCount 	= 0		
				ResponseStartTimestamp = DerivedTimestamp time														
				for each VertexResponse.SEnvelopeSBodyVertex set
					for each each.SEnvelopeSBodyVertexEnvelope set																
						for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponse set	
							for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponseTaxAreaResult set
								ResultsCount = ResultsCount + 1
								display "CalcTax:ResultsCount:<ResultsCount>"
								display "CalcTax:EachTaxAreaId:<each.TaxAreaId>"
								if (each.TaxAreaId entered)
									OutputGeoCode									= each.TaxAreaId
									ReturnedTaxAreaId								= each.TaxAreaId
								if (ReturnedTaxAreaId entered
								and ResultsCount = 1)	
									OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode 	= ReturnedTaxAreaId									
								display "CalcTax:ReturnedGeoCode_/B.1...<OutputGeoCode>"
								display "CalcTax:ReturnedTaxAreaId:<ReturnedTaxAreaId>"
								for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponseTaxAreaResultPostalAddress set
									JurisSeq = JurisSeq + 1
									initialize LocalCity
									initialize LocalState
									initialize LocalZip
									initialize LocalCityStateZip
									initialize LocalCountryCityStateZip
									initialize LocalCityStateZipReturned
									LocalCity 	= each.City
									LocalState	= each.MainDivision
									LocalZip	= each.PostalCode
									LocalCityStateZipReturned = each.City + each.MainDivision + each.PostalCode
									LocalCityStateZip = each.City + ", " + each.MainDivision + "..." + each.PostalCode + " " + each.Country
									LocalCountryCityStateZip = each.Country + " " + each.City + ", " + each.MainDivision + "..." + each.PostalCode 
									LocalCountryCityStateZipReturned = each.Country + each.City + each.MainDivision + each.PostalCode
									display "JurisSeq:<JurisSeq>"
									display "ReturnedTaxAreaId:<ReturnedTaxAreaId>"
									if (JurisSeq < 8)
										OutputMultipleGeoCodes.GeoCodeTable[JurisSeq].StreetAddressLine1 = each.StreetAddress1
										OutputMultipleGeoCodes.GeoCodeTable[JurisSeq].City 				 = each.City	
										OutputMultipleGeoCodes.GeoCodeTable[JurisSeq].StateProvince 	 = each.MainDivision	  
										OutputMultipleGeoCodes.GeoCodeTable[JurisSeq].PostalCode 		 = each.PostalCode
										OutputMultipleGeoCodes.GeoCodeTable[JurisSeq].County 			 = each.SubDivision
										OutputMultipleGeoCodes.GeoCodeTable[JurisSeq].Country 			 = each.Country
			ResponseStopTimestamp = DerivedTimestamp time		
			NumberOfTaxCodes = ResultsCount		
			DisplayMonitor = DisplayMonitor + "CalcTax[4434]Calc:ResultsCount:" + ResultsCount	+ "<br>" 

			if (ResultsCount > 1)
				display "[TLC]CalcTax:Dont\Create\Result\Files:<DontCreateResultFiles>"
				if (!DontCreateResultFiles)
					if (UserTemplateEnabled										
					or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")		
						LocalExecuteReturnBlank = LoadLookupTaxAreaUTResults	
						Continue = true											
					else	
						LocalExecuteReturnBlank = LoadResultsFiles				 
				DisplayMonitor = DisplayMonitor + "CalcTax[4431]Calc:GeoCodeTable[1]:" + OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode	+ "<br>" 
				DisplayMonitor = DisplayMonitor + "CalcTax[4432]Calc:OutputGeoCode..:" + OutputGeoCode	+ "<br>" 
				OutputGeoCode = OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode
				if (OutputGeoCode not entered)
					if (OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode entered)
						OutputGeoCode = OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode  
					else
					if (Output1stTaxAreaId entered)									
						OutputGeoCode = Output1stTaxAreaId							
					else	
						OutputGeoCode = ReturnedTaxAreaId			 
				DisplayMonitor = DisplayMonitor + "CalcTax[4442]Calc:GeoCodeTable[1]:" + OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode	+ "<br>" 
				MultipleTaxAreaIds = true
				LocalErrorNumber 	 = 803  					

			if (OutputGeoCode entered)
				if (LocalCityStateZipReturned = blank)
					LocalCityStateZip = LoadEnteredAddress
				if (ReturnedTaxAreaIdRel not exist)
					invoke Create TaxCode	 
						invoked.FinanceEnterpriseGroup 	= DerivedFinanceEnterpriseGroup	 
						invoked.TaxCode					= OutputGeoCode
						invoked.TaxType					= "S"
						invoked.Description				= LocalCityStateZip	
				else
				if (ReturnedTaxAreaIdRel exist)
					if (ReturnedTaxAreaIdRel.Description not entered
					or  ReturnedTaxAreaIdRel.Description = ", ..."
					or  ReturnedTaxAreaIdRel.Description = ",")
						invoke Update ReturnedTaxAreaIdRel 
							invoked.Description = LocalCityStateZip 		
				if (TaxEntity.UseTaxCodeAccounts
				and EntityTaxCodeDefault entered)
					if (NewEntityTaxCodeRel not exist
					and DefaultEntityTaxCodeRel exist)
						invoke Create EntityTaxCode				 
							fill in fields from DefaultEntityTaxCodeRel
							invoked.TaxEntity	= DefaultEntityTaxCodeRel.TaxEntity	 
							invoked.TaxCode		= OutputGeoCode
							invoked.Status 		= 1	

			DisplayMonitor = DisplayMonitor + "CalcTax[4499]-DerivedTimestamp....:" +  DerivedTimestamp	+ "<br>" 
			DisplayMonitor = DisplayMonitor + "CalcTax[4500]-LocalCreateLogFile..:" +  LocalCreateLogFile	+ "<br>"
			DisplayMonitor = DisplayMonitor + "CalcTax[4501]-CreateLogFileHere...:" +  CreateLogFileHere	+ "<br>"
			DisplayMonitor = DisplayMonitor + "CalcTax[4502]-LookupUsingTaxAreaId:" +  LookupUsingTaxAreaId	+ "<br>" 
			if (CallingModule = "TaxEntity")
				LocalCreateLogFile = true
				CreateLogFileHere = true
			
			if (LookupUsingTaxAreaId)	           
				if (ResponseXML not entered       
				or MyHTTPInfo.StatusCode = 500)
					Trigger = ParseWebserviceError 
					DisplayMonitor = DisplayMonitor + "CalcTax[4529]-ResponseXML...........:" + ResponseXML + "<br>" 
					DisplayMonitor = DisplayMonitor + "CalcTax[4530]-WebServiceError.......:" + WebServiceError + "<br>"
					DisplayMonitor = DisplayMonitor + "CalcTax[4531]-MyHTTPInfo.Failed.....:" + MyHTTPInfo.Failed + "<br>" 
					DisplayMonitor = DisplayMonitor + "CalcTax[4532]-MyHTTPInfo.StatusCode.:" + MyHTTPInfo.StatusCode + "<br>"
					DisplayMonitor = DisplayMonitor + "CalcTax[4533]-MyHTTPInfo.FaultCode..:" + FaultCode + "<br>"
					DisplayMonitor = DisplayMonitor + "CalcTax[4534]-MyHTTPInfo.FaultString:" + FaultString + "<br>"	
					DisplayMonitor = DisplayMonitor + "CalcTax[4534]-MyHTTPInfo.RootCause..:" + RootCause + "<br>"				 
				else
					DisplayMonitor = DisplayMonitor + "CalcTax[4541]-LookupUsingTaxAreaId:" +  LookupUsingTaxAreaId	+ "<br>" 
					LocalExecuteReturnBlank = LoadLookupTaxAreaUTResults2
					DisplayMonitor = DisplayMonitor + "CalcTax[4543]-ReturnedVertexStatus:" + ReturnedVertexStatus + "<br>"

			if (LocalCreateLogFile
			and	CreateLogFileHere)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				
			return  OutputGeoCode		

		LoadLookupKey is a DerivedField
			type is Alpha 1 
			LocalTrace = LocalTrace + "LoadLookupKey,"
			if (VertexTaxAreaIdResultsRel exist)
				invoke Delete VertexTaxAreaIdResultsRel
			NewLookupKey 				= CallingModule + ":" + CurrentTimestamp	 
			NewLookupKeySequence 		= 1	 
			ResultsLookupKey 			= NewLookupKey
			ResultsLookupKeySequence	= NewLookupKeySequence
			return blank

		LoadResultsFiles is a DerivedField									 	 
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadResultsFiles,"
	
			initialize TaxAreaResultSeq			 
			initialize PostalAddressResultSeq		 
			initialize JurisResultSeq				 
			initialize StatusResultSeq	
			
			invoke Delete VertexTaxAreaIdResultsRel		 
			
			ResponseStartTimestamp = DerivedTimestamp time				
			for each VertexResponse.SEnvelopeSBodyVertex set					
				for each each.SEnvelopeSBodyVertexEnvelope set																
					for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponse set	
						for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponseTaxAreaResult set
							TaxAreaResultSeq = TaxAreaResultSeq + 1
							ReturnedConfInd										= each.ConfidenceIndicator
							ReturnedTaxAreaId									= each.TaxAreaId
							invoke Create VertexTaxAreaIdResults
								invoked.VertexConfig			   					= DerivedFinanceEnterpriseGroup	
								invoked.VertexTaxAreaIdResults.LookupKey 			= NewLookupKey
								invoked.VertexTaxAreaIdResults.ResponseBusclassKey	= NewLookupKeySequence		
								invoked.VertexTaxAreaIdResults.Sequence				= TaxAreaResultSeq 
								invoked.RelatedObjectReference						= RelatedObjectReference
								invoked.RelatedSystem								= System
								invoked.TaxAreaId 									= each.TaxAreaId
								invoked.AsOfDate 									= each.DerivedAsOfDate		 
								invoked.ConfidenceIndicator 						= each.ConfidenceIndicator
								invoked.EntityTaxCodeDefault 	 					= EntityTaxCodeDefault 	
								if (TaxEntity.UseTaxCodeAccounts
								and EntityTaxCodeDefault entered)
									invoked.TaxEntityUsedInLookup 	 				= TaxEntity				 
								else
									invoked.TaxEntityUsedInLookup 	 				= blank	

							for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponseTaxAreaResultJurisdiction set
								JurisResultSeq = JurisResultSeq + 1
								invoke Create VertexTaxAreaIdJurisdiction
									invoked.VertexConfig			   						= DerivedFinanceEnterpriseGroup	
									invoked.VertexTaxAreaIdJurisdiction.LookupKey 			= NewLookupKey
									invoked.VertexTaxAreaIdJurisdiction.ResponseBusclassKey	= NewLookupKeySequence		
									invoked.VertexTaxAreaIdJurisdiction.Sequence			= JurisResultSeq
									invoked.TaxAreaId										= ReturnedTaxAreaId
									invoked.Jurisdiction 									= each.Jurisdiction
									invoked.JurisdictionLevel 								= each.JurisdictionLevel
									invoked.EffectiveDate 									= each.EffectiveDate
									invoked.ExpirationDate 									= each.ExpirationDate
									invoked.JurisdictionId 									= each.JurisdictionId
							for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponseTaxAreaResultPostalAddress set
								PostalAddressResultSeq = PostalAddressResultSeq + 1
								LocalCityStateZip = each.City + ", " + each.MainDivision + " " + each.PostalCode
								invoke Create VertexTaxAreaIdPostalAddress
									invoked.VertexConfig			   							= DerivedFinanceEnterpriseGroup	
									invoked.VertexTaxAreaIdPostalAddress.LookupKey 				= NewLookupKey
									invoked.VertexTaxAreaIdPostalAddress.ResponseBusclassKey	= NewLookupKeySequence		
									invoked.VertexTaxAreaIdPostalAddress.Sequence				= PostalAddressResultSeq		
									invoked.TaxAreaId											= ReturnedTaxAreaId
									invoked.StreetAddress1										= each.StreetAddress1
									invoked.City												= each.City
									invoked.MainDivision										= each.MainDivision
									invoked.SubDivision											= each.SubDivision
									invoked.PostalCode											= each.PostalCode
									invoked.Country												= each.Country
								if (ReturnedConfInd > LocalConfidenceInd
								and ReturnedTaxAreaId entered)
									LocalConfidenceInd 											= ReturnedConfInd
									OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode 				= ReturnedTaxAreaId
									OutputMultipleGeoCodes.GeoCodeTable[1].StateProvince 		= each.MainDivision	  
									OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode 			= each.PostalCode
									OutputMultipleGeoCodes.GeoCodeTable[1].County 				= each.SubDivision
									OutputMultipleGeoCodes.GeoCodeTable[1].Country 				= each.Country		
							for each each.SEnvelopeSBodyVertexEnvelopeTaxAreaResponseTaxAreaResultStatus set
								StatusResultSeq = StatusResultSeq + 1
								invoke Create VertexTaxAreaIdStatusResults
									invoked.VertexConfig			   							= DerivedFinanceEnterpriseGroup	
									invoked.VertexTaxAreaIdStatusResults.LookupKey 				= NewLookupKey
									invoked.VertexTaxAreaIdStatusResults.ResponseBusclassKey	= NewLookupKeySequence		
									invoked.VertexTaxAreaIdStatusResults.Sequence				= StatusResultSeq	
									invoked.TaxAreaId											= ReturnedTaxAreaId
									invoked.LookupResult 										= each.LookupResult
			
			ResponseStopTimestamp = DerivedTimestamp time
			NumberOfTaxCodes = TaxAreaResultSeq

			return  blank		

		CreateChildRecordHeader is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "CreateChildRecordHeader,"
			return blank


			return blank		
		
		ConvertTransactionType is a DerivedField			 
			type is AlphaUpper 8
			LocalTrace = LocalTrace + "ConvertTransactionType,"
			
			if (TransactionType.Lease)
				return "LEASE"
				
			if (TransactionType.Rental)
				return "RENTAL"								
			
			if (TransactionType not entered
			or 	TransactionType.Purchase
			or 	TransactionType.Sale)
				if (LocalVertexRequest.QuotationRequest
				or LocalVertexRequest.InvoiceRequest)
					return "SALE"
				else
					return "PURCHASE"
					
			return "SALE"	 				 	

		DoVertexDefaulting is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "DoVertexDefaulting,"
			if (ThirdPartyFunction.WriteToRegisterOnly
			or ThirdPartyFunction.CalculateAndWrite
			or CallingModule = "ProcessTaxHistory")		 			 
				PostToJournal = true
			else
				PostToJournal = false	

            
            if (InvoiceAmount not entered
            and TaxableAmount entered)
            	InvoiceAmount = TaxableAmount
			if (LineNumber not entered)
				LineNumber = 1
            
            if (Quantity not entered)
				Quantity = 1

			SendAddressOrTaxAreaId	= TaxEntity.SendAddressOrTaxAreaId 
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly)
				if (FromTaxCode = "00")  
					TaxMessageSeverity      = "1"					
					MessageCategory			= "ShipFrom"	 				
					MessageCode				= "Address"	 
					LocalMessageLevel		= "Header"
					TaxMessageText  		= WarningMessageText1	 
					LocalTrigger = LoadMessage
				if (POATaxCode = "00")
					TaxMessageSeverity      = "1"					
					MessageCategory			= "BillFrom"	 				
					MessageCode				= "Address"	 
					LocalMessageLevel		= "Header"
					TaxMessageText  		= WarningMessageText2	 
					LocalTrigger = LoadMessage
				if (TaxCode = "00") 
					LocalErrorCategory = "TXQNT"
					LocalErrorNumber = 828	 
					return blank
				if (BuyerAdminDestTaxCode = "00")
					TaxMessageSeverity      = "1"					
					MessageCategory			= "BillTo"	 				
					MessageCode				= "Address"	 
					LocalMessageLevel		= "Header"
					TaxMessageText  		= WarningMessageText3	 
					LocalTrigger = LoadMessage				

			if (TaxCode = "0"
			or TaxCode = "00")
				TaxCode = blank
			if (POATaxCode = "0"
			or POATaxCode = "00")
				POATaxCode = blank	
			if (FromTaxCode = "0"
			or FromTaxCode = "00")
				FromTaxCode = blank	
			if (BuyerAdminDestTaxCode = "0"          
			or  BuyerAdminDestTaxCode = "00")	     
				BuyerAdminDestTaxCode = blank	   	 

			if (SendAddressOrTaxAreaId.TaxAreaIDOnly 
			and TaxCode	not entered)	
				LocalErrorNumber = 829
				return blank

			
			if (PostalAddress not entered)							
				if (FromPostalAddress entered)
					PostalAddress 			= FromPostalAddress
			 
				

	 
        

			if (OverrideCalculateVendorTaxIndicator.SetToTrue)		
				CalculateVendorTaxIndicator		= true
			else
			if (OverrideCalculateVendorTaxIndicator.SetToFalse)	
				CalculateVendorTaxIndicator		= false				
			if (!OverrideHasPhysicalPresenceInd)
				if (VATRegistrationNumber entered)
					ToHasPhysicalPresenceInd 	= true	
				if (FromVATRegistrationNumber entered)		        	 
					FromHasPhysicalPresenceInd 	= true		
			

			if (InputReturnVertexTaxIn entered)					
				LocalReturnVertexTaxIn = InputReturnVertexTaxIn 
			else 	
			if (VertexConfigRel.ReturnVertexTaxIn entered)
				LocalReturnVertexTaxIn = VertexConfigRel.ReturnVertexTaxIn 
			else
				LocalReturnVertexTaxIn = "S"
												

			return blank

		LoadMessage is a DerivedField	 
			type is Text
			restricted
			default label is untranslatable
			if (VtxIdx < 20)
				VtxIdx +=1
				if (TaxMessageText entered)
					LocalTaxMessageGroup.TaxMessage[VtxIdx].Severity     = TaxMessageSeverity
					LocalTaxMessageGroup.TaxMessage[VtxIdx].Explaination = TaxMessageText
					LocalTaxMessageGroup.TaxMessage[VtxIdx].Category     = MessageCategory		 
					LocalTaxMessageGroup.TaxMessage[VtxIdx].Level        = LocalMessageLevel			 	 
			return blank	

		AddTaxLogMessages is a DerivedField	 
			type is Text
			restricted
			default label is untranslatable
			initialize VtxIdx
			while (VtxIdx < 20)
				VtxIdx +=1
				if (LocalTaxMessageGroup.TaxMessage[VtxIdx].Explaination not entered)
					end while
				if (LocalTaxMessageGroup.TaxMessage[VtxIdx].Explaination entered)
					invoke Create TaxLogMessage		 
						invoked.FinanceEnterpriseGroup 	= DerivedFinanceEnterpriseGroup	 
						invoked.TaxLogHeader 			= SaveMessageLogKey
						invoked.MessageLine				= LocalTaxMessageGroup.TaxMessage[VtxIdx].Explaination		
						invoked.MessageType				= TaxEntity.ThirdParty
						invoked.MessageTitle		    = blank	
						invoked.MessageText			    = DisplayRichTextMessages			
			return blank

		DisplayRichTextMessages is a StringField	
			type is RichText
			restricted
			"<pre>"
			"| Severity........: " DisplaySeverityLabel									 "<br>"
			"| Level...........: " LocalTaxMessageGroup.TaxMessage[VtxIdx].Level		 "<br>"
			"| MessageCategory.: " LocalTaxMessageGroup.TaxMessage[VtxIdx].Category      "<br>"
			"| Explaination....: " LocalTaxMessageGroup.TaxMessage[VtxIdx].Explaination  "<br>"	 
			"</pre>"	
		DisplaySeverityLabel is a LabelField
			restricted
			"<LocalTaxMessageGroup.TaxMessage[VtxIdx].Severity>"	

		VertexAccessTypeLabel is a LabelField
			restricted
			"<VertexAccessType>"						

		SetVertexRequest is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "SetVertexRequest,"
			initialize ReturnedVertexRequest  
			if (DisplayOn)
				display "[TLC]CalcTax:Function.................:<Function>"
				display "[TLC]CalcTax:Function.................:<Function>"
				display "[TLC]CalcTax:ThirdPartyFunction.......:<ThirdPartyFunction>"			 
				display "[TLC]CalcTax:VertexQuantumOption......:<VertexQuantumOption>"		
				display "[TLC]CalcTax:VATProcess...............:<VATProcess>"
				display "[TLC]CalcTax:IntercompanyBilling......:<IntercompanyBilling>"
				display "[TLC]CalcTax:RecoverableImpositionType:<RecoverableImpositionType>"
				display "[TLC]CalcTax:InputVertexRequest.......:<InputVertexRequest>"
				display "[TLC]CalcTax:System...................:<System>"

			if (System = "AP"
			or  System = "PO")
				LocalVertexEventType = "P"	
			else
				LocalVertexEventType = "S"	
							
			if (InputVertexRequest entered)		
				display "]CalcTax:Here1:InputVertexRequest:<InputVertexRequest>"
				LocalVertexRequest	 = InputVertexRequest

			if (DisplayOn)
				display "[TLC]CalcTax:Here2:InputVertexRequest:<InputVertexRequest>"
			if (IntercompanyBilling)
				if (VATProcess
				or RecoverableImpositionType = "VAT")
					if (ThirdPartyFunction.WriteToRegisterOnly
					or	ThirdPartyFunction.CalculateAndWrite)
						PostToJournal = true
					else	
		        		PostToJournal = false
		        	if (TransactionSource.InputAp
		        	or System = "AP")
		        		LocalVertexRequest = "P"
		        	else	            
		            if (TransactionSource.OutputAr
		            or System = "AR")
		            	if (PostToJournal)
		            		LocalVertexRequest = "I"
		            	else	
		            		LocalVertexRequest = "Q" 
		            return blank		 
	                
			if (DisplayOn)
				display "[TLC:CalcTax]SystemCode..........:<System>"	
				display "[TLC:CalcTax]LocalVertexEventType:<LocalVertexEventType>"	
				display "[TLC:CalcTax]LocalVertexRequest..:<LocalVertexRequest>"								
			if (LocalVertexRequest not entered)
				if (CallingModule = "ProcessTaxHistory")
					PostToJournal = true
					if (LocalVertexEventType.Procurement
					or  System = "AP"
					or  System = "PO")
						LocalVertexRequest = "A"
					else
						LocalVertexRequest = "I"	
				else	
				if (System entered)			
					if (System = "AP"
					or  LocalVertexEventType.Procurement)	
						if (Function.Inquire
						or  Function.CalculateTax)
							LocalVertexRequest = "P"	
						else
						if (Function.VerifyTax)
							if (LocalVertexEventType.Procurement)					
								if (VertexInvoiceVerificationRequest.Enabled)		
									LocalVertexRequest = "V"						
								else	
									LocalVertexRequest = "P"						
							else	
								LocalVertexRequest = "Q"							
					else
					if (System ="AR"
					or  System = "IC"
					or  System = "MA"
					or  System = "CB"
					or  System = "EE")						 
						LocalVertexRequest = "Q"
					else
					if (System = "BL"
					or System = "PS"	
					or System = "CB"
					or System = "CX"
					or System = "FR"
					or System = "DT")					 
						LocalVertexRequest = "Q"
					else
					if (System = "OE")
						LocalVertexRequest = "Q"
					else
					if (System = "PO"
					or  System = "AP")				
						LocalVertexRequest = "P"
					else
						LocalVertexRequest = "Q"			
				else
					LocalVertexRequest = "Q"
											
			if ((Function.Inquire					 
			or  Function.CalculateTax
			or  Function.VerifyTax
			or  Function.CalculateTaxable
			or 	Function.CalculateTaxRate)
			and ThirdPartyFunction not entered
			and VertexQuantumOption not entered)
				ThirdPartyFunction = "I"			
				PostToJournal = false
				if (System not entered
				or LocalVertexRequest not entered
				or LocalVertexRequest.InvoiceRequest)
					LocalVertexRequest = "Q"

			if (VertexQuantumOption.TaxComputation			 				 
			or  VertexQuantumOption.Inquire
			and System not entered)
				if (LocalVertexEventType.Procurement) 
					LocalVertexRequest = "P"
				else					
					LocalVertexRequest = "Q"	 			 
				
			if (ThirdPartyFunction.WriteToRegisterOnly
			or	ThirdPartyFunction.CalculateAndWrite
			or  CallingModule = "ProcessTaxHistory")
				PostToJournal = true
				if (System = "AP"
				or  LocalVertexEventType.Procurement)
					LocalVertexRequest = "A"	
					if (TaxConfigurationRel.VertexTaxPostingsForPayables.UseInvoiceVerification		
					and System = "AP")											
						PostToJournal = true
						LocalVertexRequest = "V" 								
					else	
						LocalVertexRequest = "A"			 
				else
					LocalVertexRequest = "I"
														
				if ((System not entered
				and LocalVertexRequest not entered)
				or LocalVertexRequest.QuotationRequest)
					LocalVertexRequest = "I"
				return blank					
			else	
				PostToJournal = false	
			
			if (LocalVertexRequest not entered)			
				if (TransactionType.Purchase
				or  LocalVertexEventType.Procurement)
					if (PostToJournal)
						LocalVertexRequest = "A"		
					else	
					if (VertexInvoiceVerificationRequest.Enabled)		
						PostToJournal = false
						LocalVertexRequest = "V"	
					else	
					if (VertexPurchaseOrderRequest.Enabled)							
						LocalVertexRequest = "P"
				else
					if (PostToJournal)
						LocalVertexRequest = "I"		
					else	
						LocalVertexRequest = "Q"							

			if (LocalVertexRequest.InvoiceVerificationRequest)	
				PostToJournal = false							

			if (System = "AP")
				if (LocalVertexRequest = "V"
				or  LocalVertexRequest = "P")
					if (VertexPurchaseOrderRequest.Disabled				
					and VertexInvoiceVerificationRequest.Disabled)		
						LocalVertexRequest = "X"
						ReturnedVertexRequest = VertexRequestNotCalledLabel				
			
			if (Function.Inquire					 					
			or  Function.CalculateTax)									
				if (System = "AP")										
					if (LocalVertexRequest = "P"						
					and VertexPurchaseOrderRequest.Disabled)			
						if (VertexInvoiceVerificationRequest.Enabled) 	
							LocalVertexRequest = "V"					
							PostToJournal = false						
						else	 										
							LocalVertexRequest = "X" 					
								
			return blank						

		VertexPurchaseOrderRequestLabel is a DerivedField	
			type is MessageField
			if (VertexPurchaseOrderRequest.Disabled)	
				return DisabledLabel
			return EnabledLabel	

		VertexInvoiceVerificationRequestLabel  is a DerivedField 
			type is MessageField
			if (VertexInvoiceVerificationRequest.Disabled)	
				return DisabledLabel
			return EnabledLabel	 

		EnabledLabel is a MessageField                    
			"Enabled"		

		DisabledLabel is a MessageField						
			"Disabled" 		 

		VertexRequestNotCalledLabel is a MessageField		
			"VertexRequestDisabled;NoCallMade" 		 


		DerivedTaxLineItemLabel  is a DerivedField 			
			type is MessageField
			if (SendMultLineItems)	
				return TaxLineItemErrorLabel
			return blank	 

		TaxLineItemErrorLabel is a MessageField     		
			"_ForTaxLineItem<ResponseBusclassKey>"		

		TaxLineItemMultiTAIDLabel is a MessageField     	
			"MultipleTaxAreasExist"	
						
		ReturnVertexTaxInLabel  is a DerivedField 			
			type is MessageField
			default label is untranslatable
			if (LocalReturnVertexTaxIn.Summary)
				LocalReturnVertexTaxInLabel = SummaryLabel
			else	
			if (LocalReturnVertexTaxIn.Detail)
				LocalReturnVertexTaxInLabel = DetailLabel
			else	
			if (LocalReturnVertexTaxIn.Default)
				LocalReturnVertexTaxInLabel = DefaultLabel
												
			if (InputReturnVertexTaxIn.Summary)	
				return SummaryLabel
			if (InputReturnVertexTaxIn.Detail)	
				return DetailLabel				
			return DefaultLabel	 

		SummaryLabel is a MessageField                    	
			"Summary"		

		DetailLabel is a MessageField						
			"Detail" 		 

		DefaultLabel is a MessageField						
			"Default" 

								
		IsTaxExempt is a DerivedField
			type is Boolean
			LocalTrace = LocalTrace + "IsTaxExempt,"
			if (Exempt not entered)
				return blank
			if (Exempt.Yes)
				return true
				
			return false

		CheckIfCountryIsCanada is a DerivedField 
			type is Boolean
			if (LocalPostalAddress.Country = "CA")	
				return true
			if (LocalPostalAddress.Country.IsoCountryNumber = "124")	 
				return true				
			if (LocalPostalAddress.Country.IsoCountryCode = "CAN")		 
				return true

			return false

		VendorCustomer is a DerivedField
			type is Alpha 50
			LocalTrace = LocalTrace + "VendorCustomer,"
			if (Vendor entered)
				return Vendor
				
			if (Customer entered)
				return Customer
					
			if (System = "AR"
			or System = "PS"	
			or System = "OE")
				return Customer
				
			return Vendor		

		DerivedExtendedPriceOrUnitCost is a DerivedField				 
			type is like InternationalAmount
			LocalTrace = LocalTrace + "DerivedExtendedPriceOrUnitCost,"
			TaxIncludedIndicator = false			
			if (AccruedOrInvoiced.Invoiced
			or LocalAccruedOrInvoiced.Invoiced)
				TaxIncludedIndicator = true			 		
				if (InvoiceAmount entered)			 
					return InvoiceAmount
				else
					return InvoiceAmount + TaxAmount

			if (AccruedOrInvoiced.Accrued
			or LocalAccruedOrInvoiced.Accrued)
				TaxIncludedIndicator = false		 
				return TaxableAmount

			if (AccruedOrInvoiced not entered
			or LocalAccruedOrInvoiced not entered)				
				if (InvoiceAmount entered)			 
					TaxIncludedIndicator = true		 
					return InvoiceAmount
				if (TaxableAmount entered)
					TaxIncludedIndicator = false
					return TaxableAmount
				if (InvoiceAmount entered
				and TaxAmount entered)
					TaxIncludedIndicator = false
					return InvoiceAmount - TaxAmount				
									
			if (LocalVertexRequest.QuotationRequest	
			and TaxableAmount not entered
			and InvoiceAmount not entered
			and TaxAmount not entered
			and UnitCost not entered)
				return .01			
									
			return TaxableAmount
			
		SetTaxIncludedIndicator is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "SetTaxIncludedIndicator,"
			if (TaxIncludedIndicator)				
				return blank
			if (InvoiceAmount entered
			and TaxableAmount not entered)			 
				TaxIncludedIndicator = true			 
			return blank	
				
		DerivedExtendedPrice is a DerivedField				 
			type is like InternationalAmount
			LocalTrace = LocalTrace + "DerivedExtendedPrice,"
			TaxIncludedIndicator = false				
			if  (UnitCost entered
			and  Quantity entered)
				return blank
			if (TaxableAmount entered)
				return TaxableAmount
			if (InvoiceAmount entered
			and TaxAmount entered)
				return InvoiceAmount - TaxAmount				
			if (InvoiceAmount entered)
				TaxIncludedIndicator = true			
				return InvoiceAmount
						
			if (LocalVertexRequest.QuotationRequest	
			and TaxableAmount not entered
			and InvoiceAmount not entered
			and TaxAmount not entered)
				return .01			
				
		DerivedDocumentDate	is a DerivedField
			type is Date
			LocalTrace = LocalTrace + "DerivedDocumentDate,"
			if (InvoiceDate entered)
				return InvoiceDate
				
			return current corporate date	

		CreateTaxCodeMaster is a DerivedField
			type is Alpha 1
			LocalTrace = LocalTrace + "CreateTaxCodeMaster:"
			if (LocalCity not entered)
				LocalCity 	= PostalAddress.Municipality 
			if (LocalState not entered)
				LocalState 	= PostalAddress.StateProvince 
			if (LocalZip not entered)	
				LocalZip	= PostalAddress.PostalCode
			if (LocalCountry not entered)
				LocalCountry = PostalAddress.Country	
			if (LocalCounty not entered)
				LocalCounty = PostalAddress.County				
			LocalCityStateZip = LocalCity + ", " + LocalState + " " + LocalZip
			LocalCountryCityStateZip = LocalCity + ", " + LocalState + " " + LocalZip + " " + LocalCountry 
			LocalCityCountyState = LocalCity + "/" + LocalCounty + "/" + LocalState   
			if (ReturnedTaxAreaIdRel not exist
			and OutputGeoCode entered)
				invoke Create TaxCode	
					invoked.FinanceEnterpriseGroup 	= DerivedFinanceEnterpriseGroup	
					invoked.TaxCode					= OutputGeoCode
					invoked.TaxType					= "S"
					if (TaxEntity.ThirdParty.Sabrix)	
						invoked.Description			= LocalCityCountyState
					else
						invoked.Description			= LocalCountryCityStateZip	
												
			return blank

		DerivedSourceReference	is a DerivedField
			type is Alpha 40
			LocalTrace = LocalTrace + "DerivedSourceReference,"
			return "TaxEntity:" + TaxEntity + "System:" + System + "VendorCustomer" + VendorCustomer + "Invoice:" + Invoice + "Request:" + VertexRequestExecuted	
			
		DefaultFromISOCountry  is a DerivedField	
			type is like Country	
			LocalTrace = LocalTrace + "DefaultFromISOCountry:"
			if (FromVATRegistrationCountry entered)
				return FromVATRegistrationCountry   
			if (FromPostalAddress.Country entered)
				return FromPostalAddress.Country.IsoCountryCode
			if (VATRegistrationCountry entered)
				return VATRegistrationCountry   
			if (PostalAddress.Country entered)
				return PostalAddress.Country.IsoCountryCode
								
			return "USA"
							
		DefaultToISOCountry  is a DerivedField	
			type is like Country	
			LocalTrace = LocalTrace + "DefaultToISOCountry:"
			if (VATRegistrationCountry entered)
				return VATRegistrationCountry	

			if (PostalAddress.Country entered)
				return PostalAddress.Country.IsoCountryCode
								
			if (FromVATRegistrationCountry entered)
				return FromVATRegistrationCountry	
			else
			if (FromPostalAddress.Country entered)
				return FromPostalAddress.Country.IsoCountryCode
			
			return "USA"

		ForeignIndicatorFlag is a DerivedField
			type is Boolean
			LocalTrace = LocalTrace + "ForeignIndicatorFlag:"
			ForeignOrDomestic = 0
			if (FromISOCountryCode entered						
			and FromISOCountryCode not = ToISOCountryCode)
				ForeignOrDomestic = 1
				return true
			
			return false	

		ForeignOrDomesticText is a DerivedField
			type is MessageField
			if (ForeignOrDomestic.Foreign)	
				return ForeignLabel
			return DomesticLabel	

		ForeignLabel is a MessageField
			"Foreign"		

		DomesticLabel is a MessageField
			"Domestic" 		 
						
		LoadGlobalDefaults  is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadGlobalDefaults,"
   			RecoverableAccount        		= TaxEntity.RecoverableAccount  
        	NonRecoverableAccount       	= TaxEntity.NonRecoverableAccount 
 			LocalContinueProcessing = false
 			if (PostalAddress entered
			or TaxCode entered)
				LocalContinueProcessing = true
        	LocalTrigger = ForeignIndicatorFlag		
        	if (ForeignOrDomestic.Foreign)
        		ForeignIndicator 			= true										
      		ForeignRecoverableAccount  		= TaxEntity.ForeignRecoverableAccount		
        	ForeignNonRecoverableAccount    = TaxEntity.ForeignNonRecoverableAccount 	
			if (DefaultFilingCurrency not entered)
				DefaultFilingCurrency = TaxEntity.DefaultFilingCurrency
			if (DefaultFilingCurrency not entered)
				DefaultFilingCurrency = "USD"	
			if (CurrencyRate not entered)
				CurrencyRate = 1
			if (FromCurrencyRate not entered)
				FromCurrencyRate = 1
			if (POACurrencyRate	not entered)
				POACurrencyRate = 1	
			if (BuyerAdminCurrencyRate not entered)
				BuyerAdminCurrencyRate = 1
			if (TransactionCurrency not entered)
				if (TaxEntity.DefaultFilingCurrency entered)
					TransactionCurrency	= TaxEntity.DefaultFilingCurrency  
				else
				if (DefaultFilingCurrency entered)
					TransactionCurrency = DefaultFilingCurrency
				else
					BaseCurrency = "USD"

			if (BaseCurrency not entered)
				if (TaxEntity.DefaultFilingCurrency entered)
					BaseCurrency = TaxEntity.DefaultFilingCurrency
				else	
				if (DefaultFilingCurrency entered)
					BaseCurrency = DefaultFilingCurrency
				else
					BaseCurrency = "USD"

			if (POACurrency not entered)
				if (TaxEntity.DefaultFilingCurrency entered)
					POACurrency = TaxEntity.DefaultFilingCurrency
				else	
				if (DefaultFilingCurrency entered)
					POACurrency = DefaultFilingCurrency
				else
					POACurrency = "USD"			


			LocalExecuteReturnBlank = ValidateCountryCodes
			if (LocalErrorNumber entered)
				LocalErrorCategory 		= "TXQNT"
				return blank


			LocalExecuteReturnBlank = DoVertexEdits		
			if (LocalErrorNumber entered)
				LocalErrorCategory 		= blank
				return blank

			LocalExecuteReturnBlank2 = ValidateThatTaxAreaIdIsNumeric
			if (LocalErrorNumber entered)
				LocalErrorCategory 	= "TXQNT"			
				return blank

			if (TaxEntity.ThirdParty.VertexOSeries
			and TaxEntity.UseTaxCodeAccounts				
			and TaxCode entered								
		 	and TaxCode.TaxType.TaxTableCode)				
				LocalErrorCategory = "TXQNT"
				LocalErrorNumber = 817						
				return blank	

			LocalTrigger2 = ValidateVertexDeliveryTerms		
			if (LocalErrorNumber entered)						 
				return blank	
									
			return blank

		GetAccrualInfo is a DerivedField
			type is AlphaUpper 1
			LocalTrace = LocalTrace + "GetAccrualInfo,"
			if (TaxEntity.UseTaxCodeAccounts)
				LocalAccruedOrInvoiced 			= CompanyTaxTableCodeRel.AccruedOrInvoiced  
				LocalAccrualCode				= CompanyTaxTableCodeRel.AccrualCode 
				if (VendorGrp not entered)
					VendorGrp = CompanyTaxTableCodeRel.VendorGroup				
				if (LocalAccruedOrInvoiced.Accrued)		
					ReturnedTaxAccrualAccount	= PayablesAccrualCodeDetailRel.DistributionAccount		 
			else
				LocalAccruedOrInvoiced 			= TaxEntity.AccruedOrInvoiced 
				LocalAccrualCode				= TaxEntity.AccrualCode 
				if (VendorGrp not entered)
					VendorGrp = TaxEntity.VendorGroup
				if (LocalAccruedOrInvoiced.Accrued)	
					if (PayablesAccrualCodeDetailRel exist)
						ReturnedTaxAccrualAccount	= PayablesAccrualCodeDetailRel.DistributionAccount

			if (DisplayOn)					
				display "[TLC-CalcTax]GetAccrualInfo-TaxEntity................:<TaxEntity>"					
				display "[TLC-CalcTax]GetAccrualInfo-VendorGroup..............:<VendorGrp>"					
				display "[TLC-CalcTax]GetAccrualInfo-InvoiceCompany...........:<InvoiceCompany>"			
				display "[TLC-CalcTax]GetAccrualInfo-TaxEntity.AccrualCode....:<TaxEntity.AccrualCode>"		
				display "[TLC-CalcTax]GetAccrualInfo-LocalAccruedOrInvoiced...:<LocalAccruedOrInvoiced>"	
				display "[TLC-CalcTax]GetAccrualInfo-LocalAccrualCode.........:<LocalAccrualCode>"			
				display "[TLC-CalcTax]GetAccrualInfo-ReturnedTaxAccrualAccount:<ReturnedTaxAccrualAccount>"	

			return blank		
		
		InitializeOutputFields  is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "InitializeOutputFields,"
			JurisdictionHasBeenCreated = false						
			ReverseCharge = false
			initialize JurisSeq
			initialize ResultsCount
			initialize OutputJurisdictions
			initialize OutputTaxRate
			initialize ReturnedTotalRate		
			initialize RecoverableAmount		 
			initialize RecoverablePercent		 
			initialize UnrecoverableAmount
			initialize InvoiceTextCode	
			initialize RateClassificationText
			initialize InputOutputType	
				
			return blank

		DerivedBuyerTaxRegistration  is a DerivedField	
			type is like VATRegistrationNumber
			LocalTrace = LocalTrace + "DerivedBuyerTaxRegistration,"
			if (DefaultToISOCountry = "US"
			or  DefaultToISOCountry = "USA"	
			or  DefaultToISOCountry = "840")
				if (TaxID entered)				
					return TaxID 
			else
			if (VATRegistrationNumber entered)	
				return VATRegistrationNumber	 	 
				
			return blank


		DerivedSellerTaxRegistration  is a DerivedField	
			type is like VATRegistrationNumber
			LocalTrace = LocalTrace + "DerivedSellerTaxRegistration,"
			if (DefaultFromISOCountry[1:2] = "US"
			or  DefaultFromISOCountry[1:3] = "USA"	
			or  DefaultFromISOCountry[1:3] = "840")
				if (TaxID entered)				
					return TaxID 
			else
			if (FromVATRegistrationNumber entered)	
				return FromVATRegistrationNumber
			
			return blank	
																	
		QuotationRequest is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "QuotationRequest,"
			VertexRoutineExecuted = "QuotationRequest"
			LocalVertexRequest = "Q"
			ReturnedVertexRequest = "QuotationRequest" + DerivedDebugSpot
			LocalExecuteReturnBlank = DoVertexDefaulting
			OutputTransactionType = ConvertTransactionType		
			if (OutputTransactionType = "PURCHASE")
				OutputTransactionType = "SALE"
			LocalExecuteReturnBlank =  LoadGlobalDefaults
			if (LocalErrorNumber entered)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				return

			if (UserTemplateEnabled									
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")	
				if (LocalContinueProcessing)						
					LocalTrigger = CallVertexCalculateTaxUT			
				return												
						
			if (VertexConfigRel.DefaultVersion.Version[1:1]	= "8" 
			and LocalContinueProcessing)	
				LocalExecuteReturnBlank = QuotationRequest80		
			else
			if (LocalContinueProcessing)
				LocalVertexVersionUsed = "Version7"
				RequestStartTimestamp = DerivedTimestamp time
				invoke QuotationCall Quotation
					resume on error
						WebServiceError = true
						WebServiceErrorMessage = error message	
					invoked.Login.UserName 												= blank	
					invoked.Login.Password 												= blank	
					invoked.Login.TrustedId 											= VertexConfigVersionRel.TrustedId
					invoked.QuotationRequest.ReturnAssistedParametersIndicator			= VertexConfigRel.ReturnAssistedParameters	 
					invoked.QuotationRequest.TransactionType 							= OutputTransactionType	
					invoked.QuotationRequest.DocumentDate								= InvoiceDate	
					invoked.QuotationRequest.DocumentNumber								= Invoice
					if (DeliveryTerms entered)
						invoked.QuotationRequest.DeliveryTerm							= DeliveryTerms
					if (Exempt entered)
						invoked.QuotationRequest.Customer.IsTaxExempt					= IsTaxExempt	
					if (DefaultFilingCurrency entered)
						invoked.QuotationRequest.Currency.IsoCurrencyCodeAlpha			= DefaultFilingCurrency	
						invoked.QuotationRequest.Currency.IsoCurrencyCodeNum			= DefaultFilingCurrency	
					invoked.QuotationRequest.Seller.Company								= TaxEntity					
					if (FromVATRegistrationNumber entered)
						invoked.QuotationRequest.Seller.TaxRegistration.TaxRegistrationNumber 		 = FromVATRegistrationNumber
						invoked.QuotationRequest.Seller.TaxRegistration.IsoCountryCode				 = DefaultFromISOCountry	 						 		
						invoked.QuotationRequest.Seller.TaxRegistration.HasPhysicalPresenceIndicator = FromHasPhysicalPresenceInd	
						if (FromPostalAddress.StateProvince entered)
							invoked.QuotationRequest.Seller.TaxRegistration.MainDivision			 = FromPostalAddress.StateProvince
					if (DisplayOn)
						display "[TLC]\Calc\Tax-FromTaxCode...................:<FromTaxCode>"	
						display "[TLC]\Calc\Tax-FromPostalAddress.Municipality:<FromPostalAddress.Municipality>"
						display "[TLC]\Calc\Tax-TransactionCurrency...........:<TransactionCurrency>"
						display "[TLC]\Calc\Tax-FromVATRegistrationNumber.....:<FromVATRegistrationNumber>"
					
					if (FromTaxCode entered)
						invoked.QuotationRequest.Seller.PhysicalOrigin.TaxAreaId			= FromTaxCode
					
					if (FromISOCountryCode entered)
						invoked.QuotationRequest.Seller.PhysicalOrigin.Country				= FromISOCountryCode 
					
					if (FromPostalAddress.StateProvince entered)
						invoked.QuotationRequest.Seller.PhysicalOrigin.MainDivision 		= FromPostalAddress.StateProvince
					
					if (FromPostalAddress.Country entered)   
						invoked.QuotationRequest.Seller.PhysicalOrigin.StreetAddress1		= FromPostalAddress.DeliveryAddress.AddressLine1
						invoked.QuotationRequest.Seller.PhysicalOrigin.City 				= FromPostalAddress.Municipality
						invoked.QuotationRequest.Seller.PhysicalOrigin.SubDivision			= FromPostalAddress.County
						invoked.QuotationRequest.Seller.PhysicalOrigin.PostalCode			= FromPostalAddress.PostalCode	
					
					if (FromTaxCode entered							
					or  FromPostalAddress.Country entered)   
						if (TransactionCurrency entered)				
							invoked.QuotationRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= TransactionCurrencyRel.ISOCode		    
							invoked.QuotationRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= TransactionCurrencyRel.ISOCodeNumber	 										
							invoked.QuotationRequest.Seller.PhysicalOrigin.CurrencyConversion.Value					= FromCurrencyRate	 
					if (POATaxCode entered)
						invoked.QuotationRequest.Seller.AdministrativeOrigin.TaxAreaId		= POATaxCode	  
					if (POAAddress.Country entered)   
						invoked.QuotationRequest.Seller.AdministrativeOrigin.StreetAddress1	= POAAddress.DeliveryAddress.AddressLine1
						invoked.QuotationRequest.Seller.AdministrativeOrigin.City 			= POAAddress.Municipality
						invoked.QuotationRequest.Seller.AdministrativeOrigin.MainDivision 	= POAAddress.StateProvince
						invoked.QuotationRequest.Seller.AdministrativeOrigin.SubDivision	= POAAddress.County
						invoked.QuotationRequest.Seller.AdministrativeOrigin.PostalCode		= POAAddress.PostalCode	
						invoked.QuotationRequest.Seller.AdministrativeOrigin.Country		= POAISOCountryCode 											
						if (POACurrency entered)
							invoked.QuotationRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= POACurrencyRel.ISOCode
							invoked.QuotationRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 		= POACurrencyRel.ISOCodeNumber									
							invoked.QuotationRequest.Seller.AdministrativeOrigin.CurrencyConversion.Value					= POACurrencyRate		
					if (Customer entered)
						invoked.QuotationRequest.Customer.CustomerCode.Value 			= VendorCustomer	
					invoked.QuotationRequest.Customer.Destination.TaxAreaId				= TaxCode	 			
					invoked.QuotationRequest.Customer.Destination.StreetAddress1		= PostalAddress.DeliveryAddress.AddressLine1
					invoked.QuotationRequest.Customer.Destination.City 					= PostalAddress.Municipality
					invoked.QuotationRequest.Customer.Destination.MainDivision 			= PostalAddress.StateProvince
					invoked.QuotationRequest.Customer.Destination.SubDivision			= PostalAddress.County
					invoked.QuotationRequest.Customer.Destination.PostalCode			= PostalAddress.PostalCode	
					invoked.QuotationRequest.Customer.Destination.Country				= ToISOCountryCode	  									
					if (BaseCurrency entered)
						invoked.QuotationRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BaseCurrencyRel.ISOCode			
						invoked.QuotationRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeNum 	= BaseCurrencyRel.ISOCodeNumber	 	
						invoked.QuotationRequest.Customer.Destination.CurrencyConversion.Value 					= CurrencyRate		
					if (VATRegistrationNumber entered)
						invoked.QuotationRequest.Customer.TaxRegistration.IsoCountryCode					= DefaultToISOCountry			
						invoked.QuotationRequest.Customer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber		
						invoked.QuotationRequest.Customer.TaxRegistration.HasPhysicalPresenceIndicator 		= ToHasPhysicalPresenceInd	
						if (BuyerAdminDestAddress.StateProvince entered)
							invoked.QuotationRequest.Customer.TaxRegistration.MainDivision					= BuyerAdminDestAddress.StateProvince
					if (ReceivablesTaxingLocation entered)
						invoked.QuotationRequest.SitusOverride.TaxingLocation 								= ReceivablesTaxingLocation
					if (BuyerAdminDestTaxCode entered)
						invoked.QuotationRequest.Customer.AdministrativeDestination.TaxAreaId 									= BuyerAdminDestTaxCode					
					if (BuyerAdminDestAddress.Country entered)
						invoked.QuotationRequest.Customer.AdministrativeDestination.StreetAddress1								= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
						invoked.QuotationRequest.Customer.AdministrativeDestination.City 										= BuyerAdminDestAddress.Municipality		  
						invoked.QuotationRequest.Customer.AdministrativeDestination.MainDivision 								= BuyerAdminDestAddress.StateProvince 	 
						invoked.QuotationRequest.Customer.AdministrativeDestination.SubDivision									= BuyerAdminDestAddress.County 			 	
						invoked.QuotationRequest.Customer.AdministrativeDestination.PostalCode 									= BuyerAdminDestAddress.PostalCode 		 
						invoked.QuotationRequest.Customer.AdministrativeDestination.Country 									= BuyerAdminDestAddress.Country 
					if (BuyerAdminDestTaxCode entered
					or  BuyerAdminDestAddress entered)	
						if (BuyerAdminCurrency entered)			 				
							invoked.QuotationRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha	= BuyerAdminCurrency 
							invoked.QuotationRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 	= BuyerAdminCurrency 
							invoked.QuotationRequest.Customer.AdministrativeDestination.CurrencyConversion.Value				= BuyerAdminCurrencyRate										
					if (LocalEffectiveDate entered)
						invoked.QuotationRequest.LineItem.TaxDate				 		= LocalEffectiveDate
					else
						invoked.QuotationRequest.LineItem.TaxDate						= EffectiveDate	
					invoked.QuotationRequest.LineItem.IsMulticomponent 					= IsMulticomponent			 
					invoked.QuotationRequest.LineItem.LineItemId 						= LineNumber	 
					invoked.QuotationRequest.LineItem.LineItemNumber					= LineNumber	 	
					invoked.QuotationRequest.LineItem.Usage								= TaxUsageCode			
					invoked.QuotationRequest.LineItem.Product.Value						= ProductTaxCategory
					if (MaterialCode entered)	
						invoked.QuotationRequest.LineItem.MaterialCode  				= MaterialCode
					if (ProductClass entered)		
						invoked.QuotationRequest.LineItem.Product.ProductClass			= ProductClass	
					invoked.QuotationRequest.LineItem.Quantity  						= Quantity	
					invoked.QuotationRequest.LineItem.Freight 							= FreightAmount	
					invoked.QuotationRequest.LineItem.TaxIncludedIndicator 				= TaxIncludedIndicator
					if (UnitCost entered
					and Quantity entered)
						invoked.QuotationRequest.LineItem.UnitPrice 					= UnitCost	
					else
						invoked.QuotationRequest.LineItem.ExtendedPrice					= DerivedExtendedPrice	
					VertexResponse	= result.SEnvelopeVertex
					MyHTTPInfo		= result.MyHTTPInfo			

			RequestStopTimestamp = DerivedTimestamp time
			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				LocalExecuteReturnBlank = ParseWebserviceError	
			
			LocalExecuteReturnBlank = CaptureXml				
			if (WebServiceError)
				LocalErrorCategory 		= "TXQNT"
				LocalErrorNumber 	 	= 899				
				LocalExecuteReturnBlank = CreateTaxToLogFile
				if (TaxConfigurationRel.DisplayWebserviceErrorXml)											
					WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml									
				return blank

			LocalExecuteReturnBlank = InitializeOutputFields		
			ResponseStartTimestamp = DerivedTimestamp time					
			for each VertexResponse.SEnvelopeSBodyVertex set					
				for each each.SEnvelopeSBodyVertexEnvelope set																
					for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponse set
						ResultsCount += 1
						DocumentDate					= each.DerivedDocumentDate
						ReturnedInvoiceTotal			= each.InvoiceTotalNum		 
						OutputInvoiceTotal				= each.InvoiceTotalNum
						ReturnedTotalTax				= each.TotalTaxNum			 
						OutputTotalTaxAmount			= each.TotalTaxNum			 
						ReturnedSubTotalTax				= each.SubTotalNum
						OutputTotalTaxable 				= each.SubTotalNum	 
						if (TaxableAmount not entered)
							TaxableAmount = each.SubTotalNum	
						for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseCustomer set
							for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseCustomerDestination set
								OutputGeoCode 			= each.TaxAreaId
								initialize LocalCityStateZip
								initialize LocalCity
								initialize LocalState
								initialize LocalZip
								LocalCity 	= each.City
								LocalState	= each.MainDivision
								LocalZip	= each.PostalCode		
						initialize TableIdx		
						for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseLineItem set
							for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseLineItemTaxes set
								JurisSeq +=1
								LocalTestTaxTotal 		= LocalTestTaxTotal + each.CalculatedTaxNum
								OutputTaxRate 			= OutputTaxRate + each.EffectiveRateNum
								ReturnedTotalRate 		= ReturnedTotalRate + each.EffectiveRateNum
								ReturnedVertexTaxCode 	= each.VertexTaxCode
								TaxStructure			= each.TaxStructure	
								if (TaxableAmount not entered)	
									TaxableAmount 			= each.TaxableNum
								if (OutputTotalTaxable not entered)
									OutputTotalTaxable 	= each.TaxableNum
								VertexTaxResult 		= each.TaxResult
								ReturnedTaxType			= each.TaxType
								InputOutputType			= each.InputOutputType
								ReturnedSitusLocation	= each.Situs	
								SummaryInvoiceText		= each.SummaryInvoiceText
								NotRegisteredIndicator 	= each.NotRegisteredIndicatorOut	
								ReturnedUserDefinedTaxCode	= each.TaxCode	
								ReturnedVertexTaxCode 	= each.VertexTaxCode																	 
								IsService				= each.IsService
								RateClassificationText	= each.RateClassification
								SellerRegistrationId	= each.SellerRegistrationId
								BuyerRegistrationId		= each.BuyerRegistrationId
								if (RecoverablePercent not entered)							
									RecoverableAmount		= each.RecoverableAmountNum
									RecoverablePercent		= each.RecoverablePercentNum
								if (UnrecoverableAmount not entered)	
									UnrecoverableAmount		= each.UnrecoverableAmountNum									
								if (JurisSeq <= 8)	
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId 			= OutputGeoCode			 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= DocumentDate		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= each.CalculatedTaxNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= each.EffectiveRateNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= each.Jurisdiction
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= each.JurisdictionIdNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel 	= each.Jurisdiction1
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= each.TaxType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= each.Situs
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = each.TaxCollectedFromParty
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= each.TaxableNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= each.Imposition
									Imposition 																	= each.Imposition
									ReturnedJurisLevel 															= each.Jurisdiction1
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel		= each.Jurisdiction1	
									ReturnedImpositionType 														= each.Imposition0
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= each.Imposition0		
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= each.TaxRuleId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= each.TaxResult
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= each.SummaryInvoiceText	 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= each.IsService
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= each.SellerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= each.BuyerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= each.RecoverableAmountNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].UnrecoverableAmount	= each.UnrecoverableAmountNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= each.RecoverablePercentNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= each.InputOutputType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= each.RateClassification
									if (LocalReturnVertexTaxIn.Detail) 							
										LocalExecuteReturnBlank = LoadTaxDetail					
									for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseLineItemTaxesFilingCurrencyAmounts set
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha		= each.IsoCurrencyCode	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum			= each.IsoCurrencyCodeNumber	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion			= each.CurrencyConversionRate										
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable						= each.FilingTaxableNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax				= each.FilingCalculatedTaxNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt						= each.FilingExemptNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable					= each.FilingNonTaxableNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount			= each.FilingRecoverableAmountNum 	
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 		= each.FilingUnrecoverableAmountNum 																
										LocalExecuteReturnBlank = LoadGlobalOutputValues
									initialize Idx2
									for each each.SEnvelopeSBodyVertexEnvelopeQuotationResponseLineItemTaxesInvoiceTextCode set	 
										Idx2 = Idx2 + 1
										LocalInvoiceTextCode.InvoiceTextCode	= each.InvoiceTextCodeNum
										LocalExecuteReturnBlank = LoadInvoiceTextCodes											
										InvoiceTextCode	= each.InvoiceTextCodeNum	
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= each.InvoiceTextCode
										if (ReturnedSitusLocation = "DESTINATION"	
										or  InputOutputType = "InputOutput")	
											if (InvoiceTextCode = 4)				
												ReverseCharge		 = true			

			ResponseStopTimestamp = DerivedTimestamp time
			NumberOfTaxCodes = ResultsCount
			if (ResultsCount > 1)
				LocalErrorNumber 	 = 803  	
				MultipleTaxAreaIds = true				
			else
			if (ResultsCount = 1
			and OutputGeoCode entered)
				LocalExecuteReturnBlank = CreateTaxCodeMaster	
				if (LocalReturnVertexTaxIn.Detail)				
					LocalContinueProcessing = true				
				else	
					TaxTable.TaxTableOutput[1].TaxCode 					= OutputGeoCode
					TaxTable.TaxTableOutput[1].TaxRate					= ReturnedTotalRate
					TaxTable.TaxTableOutput[1].TaxPointDate 			= DocumentDate					 
					TaxTable.TaxTableOutput[1].EffectiveDate			= DocumentDate	 
					TaxTable.TaxTableOutput[1].InTaxAmount 				= ReturnedTotalTax
					TaxTable.TaxTableOutput[1].TaxAmount 				= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 			= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxableAmount 			= TaxableAmount
					TaxTable.TaxTableOutput[1].Description				= ReturnedTaxAreaIdRel.Description	
					TaxTable.TaxTableOutput[1].Flag						= blank															
		
				TaxCode = OutputGeoCode
				LocalExecuteReturnBlank = 5400LoadAccountInfo
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank
					


			if (JurisdictionResultsKey entered)	
				LocalExecuteReturnBlank = CreateJurisdictionResults	
																	
			return  blank		

		LoadTaxDetail is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadTaxDetail,"
			if (TableIdx <= 20)									
				TableIdx = TableIdx + 1
				if (OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId entered)
					TaxTable.TaxTableOutput[TableIdx].TaxCode			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId  
				else
				if (OutputGeoCode entered)													
					TaxTable.TaxTableOutput[TableIdx].TaxCode 			= OutputGeoCode
				else																		
					TaxTable.TaxTableOutput[TableIdx].TaxCode 			= TaxCode			


				TaxTable.TaxTableOutput[TableIdx].TaxRate				= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		 
				TaxTable.TaxTableOutput[TableIdx].EffectiveDate			= DocumentDate	 
				if (LocalSaveTaxPointDate entered)
					TaxTable.TaxTableOutput[TableIdx].TaxPointDate 		= LocalSaveTaxPointDate
				else
				if (LocalEffectiveDate entered)
					TaxTable.TaxTableOutput[TableIdx].TaxPointDate 		= LocalEffectiveDate	
				else	
					TaxTable.TaxTableOutput[TableIdx].TaxPointDate 		= InvoiceDate			

				if (LocalEffectiveDate entered)
					TaxTable.TaxTableOutput[TableIdx].EffectiveDate		= LocalEffectiveDate	
				else
				if (LocalSaveTaxPointDate entered)
					TaxTable.TaxTableOutput[TableIdx].EffectiveDate		= LocalSaveTaxPointDate	
				else
					TaxTable.TaxTableOutput[TableIdx].EffectiveDate		= InvoiceDate			
				TaxTable.TaxTableOutput[TableIdx].InTaxAmount 			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 
				TaxTable.TaxTableOutput[TableIdx].TaxAmount 			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 			 
				TaxTable.TaxTableOutput[TableIdx].TaxAmount5DP 			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 			 
				TaxTable.TaxTableOutput[TableIdx].TaxableAmount 		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 
				TaxTable.TaxTableOutput[TableIdx].Description			= ReturnedTaxAreaIdRel.Description	
				TaxTable.TaxTableOutput[TableIdx].Flag					= blank				
				TaxTable.TaxTableOutput[TableIdx].JurisdictionLevel		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel
				TaxTable.TaxTableOutput[TableIdx].ImpositionType		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType		
				TaxTable.TaxTableOutput[TableIdx].VertexTaxType			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType
				TaxTable.TaxTableOutput[TableIdx].Situs					= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs				 
				TaxTable.TaxTableOutput[TableIdx].RateClassification	= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText				 
				TaxTable.TaxTableOutput[TableIdx].IsService				= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService							 
				TaxTable.TaxTableOutput[TableIdx].RecoverablePercent	= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent 					 
				TaxTable.TaxTableOutput[TableIdx].RecoverableAmount		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount					 
				TaxTable.TaxTableOutput[TableIdx].UnrecoverableAmount	= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].UnrecoverableAmount 
				TaxTable.TaxTableOutput[TableIdx].VertexRuleId			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId				 
				TaxTable.TaxTableOutput[TableIdx].InputOutputType		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType
			return blank
		DerivedSetAddToDetailYesOrNo is a DerivedField			
			type is Alpha 1 									
			LocalSkipAddingToDetail = false 					
			if (CalculateVendorTaxIndicator						
			and ReturnedTaxType = "CONSUMERS_USE"				
			and LocalCalculatedTax = 0)							
				LocalSkipAddingToDetail = true					
			return blank										

		LoadGlobalOutputValues is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadGlobalOutputValues,"
			FilingCurrencyConversion 	= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion	 
			FilingIsoCurrencyCodeAlpha 	= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha				 		 
			FilingIsoCurrencyCodeNum 	= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum				 		 
			FilingTaxable 				= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable	
			FilingCalculatedTax 		= FilingCalculatedTax 		+ OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax
			FilingExempt  				= FilingExempt  	  		+ OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt
			FilingNonTaxable 			= FilingNonTaxable    		+ OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable
			FilingRecoverableAmount 	= FilingRecoverableAmount 	+ OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount
			FilingUnrecoverableAmount 	= FilingUnrecoverableAmount + OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 
			if (VertexConfigRel.DefaultVersion.Version[1:1] != "7")									
				if (ReturnedTaxType not entered
				and OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType entered
				and OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType != "NONE")		
					ReturnedTaxType = OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 
				if (ReturnedImpositionType not entered
				and OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType entered)
					ReturnedImpositionType = OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType
					
				if (OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType = "VAT"  	
				or  OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType = "VAT")			
					ReturnedTaxType				= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 
					RecoverableTaxAreaId		= OutputGeoCode	  
					RecoverableJurisLevel 		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel	 
					RecoverableImpositionType 	= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType
					RecoverableAmount			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount
					RecoverablePercent			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent
					UnrecoverableAmount			= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].UnrecoverableAmount
					InvoiceTextCodeArray.InvoiceTextCodeOut[1].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode1 
					InvoiceTextCodeArray.InvoiceTextCodeOut[2].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode2 	
					InvoiceTextCodeArray.InvoiceTextCodeOut[3].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode3 	
					InvoiceTextCodeArray.InvoiceTextCodeOut[4].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode4 	
					InvoiceTextCodeArray.InvoiceTextCodeOut[5].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode5 							
					
			
			return blank

		LoadInvoiceTextCodes is a DerivedField
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadInvoiceTextCodes,"
			if (Idx2 = 1)
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode1	= LocalInvoiceTextCode	
			else
			if (Idx2 = 2)
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode2	= LocalInvoiceTextCode.InvoiceTextCode	
			else
			if (Idx2 = 3)
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode3	= LocalInvoiceTextCode.InvoiceTextCode	
			else
			if (Idx2 = 4)
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode4	= LocalInvoiceTextCode.InvoiceTextCode	
			else
			if (Idx2 = 5)
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode5	= LocalInvoiceTextCode.InvoiceTextCode	
			if (UserTemplateEnabled														
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")						
				InvoiceTextCode.InvoiceTextCode	= LocalInvoiceTextCode.InvoiceTextCode	
			return blank
						
		InvoiceRequest is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "InvoiceRequest,"
			VertexRoutineExecuted = "InvoiceRequest"
			LocalExecuteReturnBlank = DoVertexDefaulting
			LocalVertexRequest = "I"
			ReturnedVertexRequest = "InvoiceRequest"
			OutputTransactionType = ConvertTransactionType
			LocalExecuteReturnBlank =  LoadGlobalDefaults
			if (LocalErrorNumber entered)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				return
				
			if (UserTemplateEnabled									
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")	
				if (LocalContinueProcessing)						
					LocalTrigger = CallVertexCalculateTaxUT			
				return												
			
			if (VertexConfigRel.DefaultVersion.Version[1:1]	= "8" 
			and LocalContinueProcessing)	
				LocalExecuteReturnBlank = InvoiceRequest80		
			else
			if (LocalContinueProcessing)
				LocalVertexVersionUsed = "Version7"
				invoke InvoiceCall Invoice
					resume on error
						WebServiceError = true
						WebServiceErrorMessage = error message	
					invoked.Login.UserName 												= blank	
					invoked.Login.Password 												= blank	
					invoked.Login.TrustedId 											= VertexConfigVersionRel.TrustedId
					invoked.InvoiceRequest.ReturnAssistedParametersIndicator			= VertexConfigRel.ReturnAssistedParameters	 
					invoked.InvoiceRequest.TransactionType 								= OutputTransactionType 	
					invoked.InvoiceRequest.DocumentDate									= InvoiceDate				
					invoked.InvoiceRequest.DocumentNumber								= Invoice
					invoked.InvoiceRequest.TransactionId								= UniqueIdOfRelatedObject	
					invoked.InvoiceRequest.PostingDate									= PostDate	
					invoked.InvoiceRequest.LocationCode							 		= Location			 				
					invoked.InvoiceRequest.ReturnAssistedParametersIndicator			= VertexConfigRel.ReturnAssistedParameters	
					invoked.InvoiceRequest.Currency.IsoCurrencyCodeAlpha										= DefaultFilingCurrency 
					invoked.InvoiceRequest.Currency.IsoCurrencyCodeNum											= DefaultFilingCurrency 
					invoked.InvoiceRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 		= BaseCurrencyRel.ISOCode			 
					invoked.InvoiceRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeNum 			= BaseCurrencyRel.ISOCodeNumber	 
					invoked.InvoiceRequest.Customer.Destination.CurrencyConversion.Value 						= CurrencyRate		
					invoked.InvoiceRequest.LineItem.Usage								= TaxUsageCode			
					invoked.InvoiceRequest.LineItem.Product.Value						= ProductTaxCategory	
					invoked.InvoiceRequest.DeliveryTerm									= DeliveryTerms	 
					invoked.InvoiceRequest.Seller.Company						 		= TaxEntity	 	 	 
					invoked.InvoiceRequest.Seller.Division					 			= blank	
					invoked.InvoiceRequest.Seller.Department							= blank	
					if (FromTaxCode entered)
						invoked.InvoiceRequest.Seller.PhysicalOrigin.TaxAreaId				= FromTaxCode
					
					if (FromISOCountryCode entered)
						invoked.InvoiceRequest.Seller.PhysicalOrigin.Country				= FromISOCountryCode
						
					if (FromPostalAddress.StateProvince entered)
						invoked.InvoiceRequest.Seller.PhysicalOrigin.MainDivision			= FromPostalAddress.StateProvince
					
					if (FromPostalAddress.Country entered)   
						invoked.InvoiceRequest.Seller.PhysicalOrigin.StreetAddress1			= FromPostalAddress.DeliveryAddress.AddressLine1
						invoked.InvoiceRequest.Seller.PhysicalOrigin.City 					= FromPostalAddress.Municipality
						invoked.InvoiceRequest.Seller.PhysicalOrigin.SubDivision			= FromPostalAddress.County
						invoked.InvoiceRequest.Seller.PhysicalOrigin.PostalCode				= FromPostalAddress.PostalCode	
					
					if (FromTaxCode entered							
					or  FromPostalAddress.Country entered)   
						invoked.InvoiceRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 		= TransactionCurrency 
						invoked.InvoiceRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 			= TransactionCurrency 
						invoked.InvoiceRequest.Seller.PhysicalOrigin.CurrencyConversion.Value						= FromCurrencyRate	 
					if (POATaxCode entered)
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.TaxAreaId		= POATaxCode		 	 
					if (POAAddress.Country entered)   
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.StreetAddress1	= POAAddress.DeliveryAddress.AddressLine1
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.City 			= POAAddress.Municipality
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.MainDivision 	= POAAddress.StateProvince
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.SubDivision		= POAAddress.County
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.PostalCode		= POAAddress.PostalCode	
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.Country			= POAISOCountryCode 
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= POACurrencyRel.ISOCode	
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= POACurrencyRel.ISOCodeNumber									
						invoked.InvoiceRequest.Seller.AdministrativeOrigin.CurrencyConversion.Value					= POACurrencyRate	
					
					LocalSellerTaxRegistration = DerivedSellerTaxRegistration
					if (LocalSellerTaxRegistration entered
					and DefaultFromISOCountry entered)						
						invoked.InvoiceRequest.Seller.TaxRegistration.TaxRegistrationNumber 		= LocalSellerTaxRegistration	
						invoked.InvoiceRequest.Seller.TaxRegistration.IsoCountryCode				= DefaultFromISOCountry	 						 		
						invoked.InvoiceRequest.Seller.TaxRegistration.HasPhysicalPresenceIndicator 	= FromHasPhysicalPresenceInd	
						if (FromPostalAddress.StateProvince entered)
							invoked.InvoiceRequest.Seller.TaxRegistration.MainDivision              = FromPostalAddress.StateProvince
					if (Exempt entered)
						invoked.InvoiceRequest.Customer.IsTaxExempt						= IsTaxExempt	
					invoked.InvoiceRequest.Customer.CustomerCode.Value					= VendorCustomer	 
					invoked.InvoiceRequest.Customer.Destination.TaxAreaId				= TaxCode			 			
					invoked.InvoiceRequest.Customer.Destination.StreetAddress1			= PostalAddress.DeliveryAddress.AddressLine1
					invoked.InvoiceRequest.Customer.Destination.City 					= PostalAddress.Municipality
					invoked.InvoiceRequest.Customer.Destination.MainDivision 			= PostalAddress.StateProvince
					invoked.InvoiceRequest.Customer.Destination.SubDivision				= PostalAddress.County
					invoked.InvoiceRequest.Customer.Destination.PostalCode				= PostalAddress.PostalCode	
					invoked.InvoiceRequest.Customer.Destination.Country					= ToISOCountryCode  
					if (VATRegistrationNumber entered)
						invoked.InvoiceRequest.Customer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber				
						invoked.InvoiceRequest.Customer.TaxRegistration.IsoCountryCode					= DefaultToISOCountry			
						invoked.InvoiceRequest.Customer.TaxRegistration.HasPhysicalPresenceIndicator 	= ToHasPhysicalPresenceInd	
						if (BuyerAdminDestAddress.StateProvince entered)
							invoked.InvoiceRequest.Customer.TaxRegistration.MainDivision				= BuyerAdminDestAddress.StateProvince
					if (BuyerAdminDestTaxCode entered)
						invoked.InvoiceRequest.Customer.AdministrativeDestination.TaxAreaId 								= BuyerAdminDestTaxCode							
					if (BuyerAdminDestAddress.Country entered)
						invoked.InvoiceRequest.Customer.AdministrativeDestination.StreetAddress1							= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
						invoked.InvoiceRequest.Customer.AdministrativeDestination.City 										= BuyerAdminDestAddress.Municipality		  
						invoked.InvoiceRequest.Customer.AdministrativeDestination.MainDivision 								= BuyerAdminDestAddress.StateProvince 	 
						invoked.InvoiceRequest.Customer.AdministrativeDestination.SubDivision								= BuyerAdminDestAddress.County 			 	
						invoked.InvoiceRequest.Customer.AdministrativeDestination.PostalCode 								= BuyerAdminDestAddress.PostalCode 		 
						invoked.InvoiceRequest.Customer.AdministrativeDestination.Country 									= BuyerAdminDestAddress.Country 
					if (BuyerAdminDestTaxCode entered
					or  BuyerAdminDestAddress entered)	
						if (BuyerAdminCurrency entered)		 				
							invoked.InvoiceRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha = BuyerAdminCurrency 
							invoked.InvoiceRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum   = BuyerAdminCurrency 
							invoked.InvoiceRequest.Customer.AdministrativeDestination.CurrencyConversion.Value				  = BuyerAdminCurrencyRate	
					if (ReceivablesTaxingLocation entered)
						invoked.InvoiceRequest.SitusOverride.TaxingLocation 			= ReceivablesTaxingLocation	
					if (LocalEffectiveDate entered)
						invoked.InvoiceRequest.LineItem.TaxDate				 			= LocalEffectiveDate
					else
						invoked.InvoiceRequest.LineItem.TaxDate							= EffectiveDate	
					invoked.InvoiceRequest.LineItem.GeneralLedgerAccount				= TaxCodeAccount					
					invoked.InvoiceRequest.LineItem.LineItemNumber						= LineNumber	 	
					invoked.InvoiceRequest.LineItem.Quantity  							= Quantity	
					invoked.InvoiceRequest.LineItem.UnitPrice 							= UnitCost	
					invoked.InvoiceRequest.LineItem.ExtendedPrice 						= DerivedExtendedPrice  
					invoked.InvoiceRequest.LineItem.TaxIncludedIndicator 				= TaxIncludedIndicator
					if (MaterialCode entered)	
						invoked.InvoiceRequest.LineItem.MaterialCode  					= MaterialCode
											
					VertexResponse	= result.SEnvelopeVertex
					MyHTTPInfo		= result.MyHTTPInfo			

			
			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				LocalExecuteReturnBlank = ParseWebserviceError	
			
			LocalExecuteReturnBlank = CaptureXml				

			if (WebServiceError)
				LocalErrorCategory 		= "TXQNT"
				LocalErrorNumber 	 	= 899				
				LocalExecuteReturnBlank = CreateTaxToLogFile
				if (TaxConfigurationRel.DisplayWebserviceErrorXml)											
					WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml					
				return blank
				
			LocalExecuteReturnBlank = InitializeOutputFields			
			ResponseStartTimestamp = DerivedTimestamp time
			for each VertexResponse.SEnvelopeSBodyVertex set					
				for each each.SEnvelopeSBodyVertexEnvelope set																
					for each each.SEnvelopeSBodyVertexEnvelopeInvoiceResponse set
						ResultsCount += 1
						DocumentDate					= each.DerivedDocumentDate
						ReturnedInvoiceTotal			= each.InvoiceTotalNum		 
						OutputInvoiceTotal				= each.InvoiceTotalNum
						ReturnedTotalTax				= each.TotalTaxNum	
						OutputTotalTaxAmount			= each.TotalTaxNum
						ReturnedSubTotalTax				= each.SubTotalNum
						OutputTotalTaxable 				= each.SubTotalNum
						for each each.SEnvelopeSBodyVertexEnvelopeInvoiceResponseCustomer set
							for each each.SEnvelopeSBodyVertexEnvelopeInvoiceResponseCustomerDestination set
								OutputGeoCode 			= each.TaxAreaId
								initialize LocalCity
								initialize LocalState
								initialize LocalZip
								initialize LocalCityStateZip
								LocalCity 	= each.City
								LocalState	= each.MainDivision
								LocalZip	= each.PostalCode
						for each each.SEnvelopeSBodyVertexEnvelopeInvoiceResponseLineItem set
							for each each.SEnvelopeSBodyVertexEnvelopeInvoiceResponseLineItemTaxes set
								JurisSeq +=1
								OutputTaxRate 		= OutputTaxRate + each.EffectiveRateNum
								ReturnedTotalRate 	= ReturnedTotalRate + each.EffectiveRateNum
								if (TaxableAmount not entered)	
									TaxableAmount 	= each.TaxableNum
								if (OutputTotalTaxable not entered)	
									OutputTotalTaxable 	= each.TaxableNum
								VertexTaxResult 	= each.TaxResult
								ReturnedTaxType		= each.TaxType
								InputOutputType		= each.InputOutputType
								ReturnedSitusLocation	= each.Situs	
								if (RateClassificationText not entered)
									RateClassificationText	= each.RateClassification
								if (InvoiceTextCode 	 = 4
								or  each.InputOutputType = "InputOutput")
									ReverseCharge		 = true
								InputOutputType			= each.InputOutputType
								SummaryInvoiceText		= each.SummaryInvoiceText
								NotRegisteredIndicator 	= each.NotRegisteredIndicatorOut	
								ReturnedUserDefinedTaxCode	= each.TaxCode	
								ReturnedVertexTaxCode 	= each.VertexTaxCode										 
								IsService				= each.IsService
								SellerRegistrationId	= each.SellerRegistrationId
								BuyerRegistrationId		= each.BuyerRegistrationId
								if (RecoverablePercent not entered)							
									RecoverableAmount		= each.RecoverableAmountNum
									RecoverablePercent		= each.RecoverablePercentNum
								if (UnrecoverableAmount not entered)	
									UnrecoverableAmount		= each.UnrecoverableAmountNum										
								Imposition 				= each.Imposition
								ReturnedJurisLevel 		= each.Jurisdiction1
								ReturnedImpositionType 	= each.Imposition0									
								if (JurisSeq <= 8)
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId 			= OutputGeoCode		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= DocumentDate		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= each.CalculatedTaxNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= each.EffectiveRateNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= each.Jurisdiction
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= each.JurisdictionIdNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel 	= each.Jurisdiction1
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= each.TaxType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= each.Situs
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = each.TaxCollectedFromParty
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= each.TaxableNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= each.Imposition
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= each.Imposition0	
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= each.TaxRuleId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= each.TaxResult
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= each.SummaryInvoiceText	 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= each.IsService
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= each.SellerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= each.BuyerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= each.RecoverableAmountNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= each.RecoverablePercentNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= each.InputOutputType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= each.RateClassification
									if (LocalReturnVertexTaxIn.Detail) 							
										LocalExecuteReturnBlank = LoadTaxDetail								
									for each each.SEnvelopeSBodyVertexEnvelopeInvoiceResponseLineItemTaxesFilingCurrencyAmounts set
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha		= each.IsoCurrencyCode	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum			= each.IsoCurrencyCodeNumber	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion			= each.CurrencyConversionRate										
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable						= each.FilingTaxableNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax				= each.FilingCalculatedTaxNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt						= each.FilingExemptNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable					= each.FilingNonTaxableNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount			= each.FilingRecoverableAmountNum 	
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 		= each.FilingUnrecoverableAmountNum 																
										LocalExecuteReturnBlank = LoadGlobalOutputValues
									initialize Idx2
									for each each.SEnvelopeSBodyVertexEnvelopeInvoiceResponseLineItemTaxesInvoiceTextCode set	 
										Idx2 = Idx2 + 1
										LocalInvoiceTextCode.InvoiceTextCode	= each.InvoiceTextCodeNum
										LocalExecuteReturnBlank = LoadInvoiceTextCodes												
										InvoiceTextCode														= each.InvoiceTextCodeNum	
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= each.InvoiceTextCode
										if (ReturnedSitusLocation = "DESTINATION"	
										or  InputOutputType = "InputOutput")	
											if (InvoiceTextCode = 4)				
												ReverseCharge		 = true			

			ResponseStopTimestamp = DerivedTimestamp time												
			if (ResultsCount > 1)
				LocalErrorNumber 	 = 803  	
				MultipleTaxAreaIds = true				
			else
			if (ResultsCount = 1
			and OutputGeoCode entered)
				LocalExecuteReturnBlank = CreateTaxCodeMaster	
				if (LocalReturnVertexTaxIn.Detail)				
					LocalContinueProcessing = true				
				else					
					TaxTable.TaxTableOutput[1].TaxCode 					= OutputGeoCode
					TaxTable.TaxTableOutput[1].TaxRate					= ReturnedTotalRate
					TaxTable.TaxTableOutput[1].TaxPointDate 			= DocumentDate					 
					TaxTable.TaxTableOutput[1].EffectiveDate			= DocumentDate	 
					TaxTable.TaxTableOutput[1].InTaxAmount 				= ReturnedTotalTax
					TaxTable.TaxTableOutput[1].TaxAmount 				= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 			= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxableAmount 			= TaxableAmount
					TaxTable.TaxTableOutput[1].Description				= VertexTaxResult 	 
					TaxTable.TaxTableOutput[1].Flag						= blank														
		
				TaxCode = OutputGeoCode
				LocalExecuteReturnBlank = 5400LoadAccountInfo
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank
			
			if (JurisdictionResultsKey entered)
				LocalExecuteReturnBlank = CreateJurisdictionResults	
													
			return  blank		


		InvoiceVerificationRequest is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "InvoiceVerificationRequest,"
			VertexRoutineExecuted = "InvoiceVerificationRequest"
			initialize ReturnedAdditionalTaxesDue
			initialize ReturnedTaxVariance		 		
			ReturnedVertexRequest 		= "InvoiceVerificationRequest"
			ReturnedOutsideThreshold 	= false  	
			LocalVertexRequest 			= "V"
			LocalExecuteReturnBlank 	= DoVertexDefaulting
			OutputTransactionType 		= ConvertTransactionType
			LocalExecuteReturnBlank 	= LoadGlobalDefaults
			if (LocalErrorNumber entered)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				return
			
			if (ChargedTaxAmount not entered
			and TaxAmount entered)
				ChargedTaxAmount 			= TaxAmount		
			if (ChargedTaxAmount 			= 0		
			and !PostToJournal)						
				TaxAmountIsZero 			= true	
				ChargedTaxAmount 			= 0.01	

			if (UserTemplateEnabled									
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")	
				if (LocalContinueProcessing)						
					LocalTrigger = CallVertexCalculateTaxUT			
				return												
			
			if (VertexConfigRel.DefaultVersion.Version[1:1]	= "8" 
			and LocalContinueProcessing)	
				LocalExecuteReturnBlank = InvoiceVerificationRequest80		
			else
			if (LocalContinueProcessing)
				LocalVertexVersionUsed = "Version7"
				invoke InvoiceVerificationCall InvoiceVerification
					resume on error
						WebServiceError = true
						WebServiceErrorMessage = error message				
					invoked.Login.UserName 																= blank	
					invoked.Login.Password 																= blank	
					invoked.Login.TrustedId 															= VertexConfigVersionRel.TrustedId
					invoked.InvoiceVerificationRequest.ReturnAssistedParametersIndicator			 	= VertexConfigRel.ReturnAssistedParameters	 
					invoked.InvoiceVerificationRequest.TransactionId									= UniqueIdOfRelatedObject	
					invoked.InvoiceVerificationRequest.DocumentDate								 		= InvoiceDate
					invoked.InvoiceVerificationRequest.DocumentNumber									= Invoice								 				 
					invoked.InvoiceVerificationRequest.TransactionType 									= ConvertTransactionType	 
					invoked.InvoiceVerificationRequest.PostToJournal									= PostToJournal		 
					invoked.InvoiceVerificationRequest.DeliveryTerm										= DeliveryTerms	 
					if (DefaultFilingCurrency entered)
						invoked.InvoiceVerificationRequest.Currency.IsoCurrencyCodeAlpha				= DefaultFilingCurrency 
						invoked.InvoiceVerificationRequest.Currency.IsoCurrencyCodeNum					= DefaultFilingCurrency 
					invoked.InvoiceVerificationRequest.Buyer.Company						 			= TaxEntity	 	 	 
					if (Exempt entered)
						invoked.InvoiceVerificationRequest.Buyer.IsTaxExempt							= IsTaxExempt	
					invoked.InvoiceVerificationRequest.Buyer.Destination.TaxAreaId 						= TaxCode						 
					invoked.InvoiceVerificationRequest.Buyer.Destination.StreetAddress1					= PostalAddress.DeliveryAddress.AddressLine1 
					invoked.InvoiceVerificationRequest.Buyer.Destination.City 							= PostalAddress.Municipality 		 
					invoked.InvoiceVerificationRequest.Buyer.Destination.MainDivision 					= PostalAddress.StateProvince 	 
					invoked.InvoiceVerificationRequest.Buyer.Destination.SubDivision					= PostalAddress.County 			 									
					invoked.InvoiceVerificationRequest.Buyer.Destination.PostalCode 					= PostalAddress.PostalCode 		 
					invoked.InvoiceVerificationRequest.Buyer.Destination.Country 						= ToISOCountryCode  			 
					if (BaseCurrency entered)
						invoked.InvoiceVerificationRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BaseCurrencyRel.ISOCode			
						invoked.InvoiceVerificationRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeNum 		= BaseCurrencyRel.ISOCodeNumber	 
						invoked.InvoiceVerificationRequest.Buyer.Destination.CurrencyConversion.Value 					= CurrencyRate		
					if (VATRegistrationNumber entered)
						invoked.InvoiceVerificationRequest.Buyer.TaxRegistration.IsoCountryCode					= DefaultToISOCountry		
						invoked.InvoiceVerificationRequest.Buyer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber		
						invoked.InvoiceVerificationRequest.Buyer.TaxRegistration.HasPhysicalPresenceIndicator 	= ToHasPhysicalPresenceInd	
					if (BuyerAdminDestTaxCode entered)
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.TaxAreaId 		= BuyerAdminDestTaxCode						 
					if (BuyerAdminDestAddress entered)
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.StreetAddress1	= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.City 			= BuyerAdminDestAddress.Municipality		 
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.MainDivision 	= BuyerAdminDestAddress.StateProvince 	 
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.SubDivision		= BuyerAdminDestAddress.County 			 	
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.PostalCode 		= BuyerAdminDestAddress.PostalCode 		 
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.Country 			= BuyerAdminDestISOCountryCode  
					if (BuyerAdminDestTaxCode entered
					or  BuyerAdminDestAddress entered)	
						if (BuyerAdminCurrency entered)		
							invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BuyerAdminCurrency 
							invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 	= BuyerAdminCurrency 
							invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.CurrencyConversion.Value					= BuyerAdminCurrencyRate	
					invoked.InvoiceVerificationRequest.Vendor.VendorCode.Value	  								= VendorCustomer	 
					if (FromTaxCode	entered)
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.TaxAreaId 						= FromTaxCode						 
					if (FromPostalAddress.Country entered)   
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.StreetAddress1					= FromPostalAddress.DeliveryAddress.AddressLine1		 
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.City 							= FromPostalAddress.Municipality			 
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.MainDivision 					= FromPostalAddress.StateProvince		 
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.SubDivision					= FromPostalAddress.County				 			
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.PostalCode 					= FromPostalAddress.PostalCode			 				
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.Country 						= FromISOCountryCode  
					if (FromVATRegistrationNumber entered)
						invoked.InvoiceVerificationRequest.Vendor.TaxRegistration.IsoCountryCode				= DefaultFromISOCountry 	 		 
						invoked.InvoiceVerificationRequest.Vendor.TaxRegistration.TaxRegistrationNumber			= FromVATRegistrationNumber
						invoked.InvoiceVerificationRequest.Vendor.TaxRegistration.HasPhysicalPresenceIndicator 	= FromHasPhysicalPresenceInd	
					if (FromTaxCode entered							
					or  FromPostalAddress.Country entered)   
						if (TransactionCurrency entered)
							invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha = TransactionCurrencyRel.ISOCode	  	 
							invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 	 = TransactionCurrencyRel.ISOCodeNumber	  										
							invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.CurrencyConversion.Value				 = FromCurrencyRate			 
					if (POATaxCode entered)
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.TaxAreaId 			= POATaxCode						 
					if (POAAddress.Country entered)
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.StreetAddress1		= POAAddress.DeliveryAddress.AddressLine1		 
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.City 				= POAAddress.Municipality			 
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.MainDivision 		= POAAddress.StateProvince	 
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.SubDivision		= POAAddress.County			 							
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.PostalCode 		= POAAddress.PostalCode		 					
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.Country 			= POAAddress.Country	
					if (POATaxCode entered
					or  POAAddress.Country entered)	
						if (POACurrency entered)					
							invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 		= POACurrencyRel.ISOCode
							invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 		= POACurrencyRel.ISOCodeNumber		  			     
							invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.CurrencyConversion.Value						= POACurrencyRate				
					if (PayablesTaxingLocation entered)
						invoked.InvoiceVerificationRequest.SitusOverride.TaxingLocation 	= PayablesTaxingLocation	
					if (LocalEffectiveDate entered)
						invoked.InvoiceVerificationRequest.LineItem.TaxDate				 	= LocalEffectiveDate
					else
						invoked.InvoiceVerificationRequest.LineItem.TaxDate					= EffectiveDate	
					invoked.InvoiceVerificationRequest.LineItem.LineItemNumber				= LineNumber					 															
					invoked.InvoiceVerificationRequest.LineItem.Quantity  					= Quantity					 					
					invoked.InvoiceVerificationRequest.LineItem.UnitPrice 					= UnitCost			
					invoked.InvoiceVerificationRequest.LineItem.ExtendedPrice 				= DerivedExtendedPrice  
					invoked.InvoiceVerificationRequest.LineItem.TaxIncludedIndicator 		= TaxIncludedIndicator
					invoked.InvoiceVerificationRequest.LineItem.ChargedTax 					= ChargedTaxAmount	
					invoked.InvoiceVerificationRequest.LineItem.Usage						= TaxUsageCode			
					invoked.InvoiceVerificationRequest.LineItem.Purchase.Value				= ProductTaxCategory
					if (ProductClass entered)		
						invoked.InvoiceVerificationRequest.LineItem.Purchase.PurchaseClass	= ProductClass	 
					if (MaterialCode entered)	
						invoked.InvoiceVerificationRequest.LineItem.MaterialCode  			= MaterialCode
						
					VertexResponse 	= result.SEnvelopeVertex
					MyHTTPInfo		= result.MyHTTPInfo			

			
			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				LocalExecuteReturnBlank = ParseWebserviceError	
			
			LocalExecuteReturnBlank = CaptureXml				

			if (WebServiceError)
				LocalErrorCategory 		= "TXQNT"
				LocalErrorNumber 	 	= 899				
				LocalExecuteReturnBlank = CreateTaxToLogFile
				if (TaxConfigurationRel.DisplayWebserviceErrorXml)											
					WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml					
				return blank
											
			initialize JurisSeq
			initialize OutputJurisdictions
			initialize ResultsCount
			initialize OutputTaxRate
			initialize ReturnedTotalRate	
			ResponseStartTimestamp = DerivedTimestamp time														
			for each VertexResponse.SEnvelopeSBodyVertex set					
				for each each.SEnvelopeSBodyVertexEnvelope set																
					for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponse set
						ResultsCount += 1
						DocumentDate					= each.DerivedDocumentDate
						ReturnedInvoiceTotal			= each.TotalNum		 
						OutputInvoiceTotal				= each.TotalNum
						ReturnedTotalTax				= each.TotalTaxNum	
						OutputTotalTaxAmount			= each.TotalTaxNum
						ReturnedSubTotalTax				= each.SubTotalNum
						OutputTotalTaxable 				= each.SubTotalNum	 
						OutputInvoiceTotal				= each.TotalNum	 
						OutputTotalTaxAmount 			= each.TotalTaxNum	
						ReturnedAdditionalTaxesDue		= each.AdditionalTaxesDueNum
						if (TaxAmountIsZero)						
							ReturnedAdditionalTaxesDue += 0.01		

						for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseBuyer set
							for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseBuyerDestination set
								if (TaxCode entered)
									OutputGeoCode			= TaxCode
								else	
									OutputGeoCode			= each.TaxAreaId
								initialize LocalCity
								initialize LocalState
								initialize LocalZip
								initialize LocalCityStateZip
								LocalCity 	= each.City
								LocalState	= each.MainDivision
								LocalZip	= each.PostalCode
						for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseVendor set
							for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseVendorPhysicalOrigin set
						for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseLineItem set
							ReturnedOutsideThreshold = each.OutsideThreshold		 
							ReturnedTaxVariance		 = each.VarianceNum
							if (TaxAmountIsZero)										
								if (ReturnedTaxVariance < 0)							
									ReturnedTaxVariance = ReturnedTaxVariance + 0.01	
								if (ReturnedTaxVariance > 0)							
									ReturnedTaxVariance = ReturnedTaxVariance - 0.01							
							for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseLineItemTaxes set
								JurisSeq +=1
								OutputTaxRate 		= OutputTaxRate + each.EffectiveRateNum
								ReturnedTotalRate 	= ReturnedTotalRate + each.EffectiveRateNum
								if (DisplayOn)
									display "[TLC]-003:ReturnedTotalRate:<ReturnedTotalRate>"
									display "[TLC]-003:each.EffectiveRateNum:<each.EffectiveRateNum>"
								if (TaxableAmount not entered)
									TaxableAmount 		= each.TaxableNum
								if (OutputTotalTaxable not entered)
									OutputTotalTaxable 	= each.TaxableNum
								VertexTaxResult 	= each.TaxResult
								InputOutputType			= each.InputOutputType
								ReturnedSitusLocation	= each.Situs	
								SummaryInvoiceText		= each.SummaryInvoiceText	 
								NotRegisteredIndicator 	= each.NotRegisteredIndicatorOut	
								ReturnedUserDefinedTaxCode	= each.TaxCode	
								ReturnedVertexTaxCode 	= each.VertexTaxCode									
								IsService				= each.IsService
								RateClassificationText	= each.RateClassification
								if (InvoiceTextCode 	 = 4
								or  each.InputOutputType = "InputOutput")
									ReverseCharge		 = true
								SellerRegistrationId	= each.SellerRegistrationId
								BuyerRegistrationId		= each.BuyerRegistrationId
								if (RecoverablePercent not entered)							 
									RecoverableAmount		= each.RecoverableAmountNum
									RecoverablePercent		= each.RecoverablePercentNum
								if (UnrecoverableAmount not entered)	
									UnrecoverableAmount		= each.UnrecoverableAmountNum	
								if (JurisSeq <= 8)
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId 			= OutputGeoCode		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= DocumentDate		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= each.CalculatedTaxNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= each.EffectiveRateNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= each.Jurisdiction
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= each.JurisdictionIdNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel 	= each.Jurisdiction1
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= each.TaxType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= each.Situs
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= each.TaxableNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= each.Imposition
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= each.Imposition0	
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= each.TaxRuleId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= each.TaxResult									
									if (LocalReturnVertexTaxIn.Detail) 							
										if (each.TaxType != "CONSUMERS_USE")					
											LocalExecuteReturnBlank = LoadTaxDetail								
									for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseLineItemTaxesFilingCurrencyAmounts set
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha		= each.IsoCurrencyCode	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum			= each.IsoCurrencyCodeNumber	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion			= each.CurrencyConversionRate										
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable						= each.FilingTaxableNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax				= each.FilingCalculatedTaxNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt						= each.FilingExemptNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable					= each.FilingNonTaxableNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount			= each.FilingRecoverableAmountNum 	
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 		= each.FilingUnrecoverableAmountNum 																
										LocalExecuteReturnBlank = LoadGlobalOutputValues
									initialize Idx2
									for each each.SEnvelopeSBodyVertexEnvelopeInvoiceVerificationResponseLineItemTaxesInvoiceTextCode set	 
										Idx2 = Idx2 + 1
										LocalInvoiceTextCode.InvoiceTextCode	= each.InvoiceTextCodeNum
										LocalExecuteReturnBlank = LoadInvoiceTextCodes											
										InvoiceTextCode														= each.InvoiceTextCodeNum	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= each.InvoiceTextCode
										if (ReturnedSitusLocation = "DESTINATION"	
										or  InputOutputType = "InputOutput")	
											if (InvoiceTextCode = 4)				
												ReverseCharge		 = true			
																						
			ResponseStopTimestamp = DerivedTimestamp time
			if (ResultsCount > 1)
				LocalErrorNumber 	 = 803  	
				MultipleTaxAreaIds = true				
			else
			if (ResultsCount = 1
			and OutputGeoCode entered)
				LocalExecuteReturnBlank = CreateTaxCodeMaster
				if (LocalReturnVertexTaxIn.Detail)				
					LocalContinueProcessing = true				
				else					
					TaxTable.TaxTableOutput[1].TaxCode 					= OutputGeoCode
					TaxTable.TaxTableOutput[1].TaxRate					= ReturnedTotalRate
					TaxTable.TaxTableOutput[1].TaxPointDate 			= DocumentDate					 
					TaxTable.TaxTableOutput[1].EffectiveDate			= DocumentDate	 
					TaxTable.TaxTableOutput[1].InTaxAmount 				= ReturnedTotalTax
					TaxTable.TaxTableOutput[1].TaxAmount 				= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 			= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxableAmount 			= TaxableAmount
					TaxTable.TaxTableOutput[1].Description				= VertexTaxResult 	 
					TaxTable.TaxTableOutput[1].Flag						= blank				
							
				if (TaxCode not entered)
					TaxCode = OutputGeoCode
				if (OutputGeoCode not entered	
				and TaxCode entered)			
					TaxCode = OutputGeoCode		
				LocalExecuteReturnBlank = 5400LoadAccountInfo
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank

			if (JurisdictionResultsKey entered)
				LocalExecuteReturnBlank = CreateJurisdictionResults	
			return blank

		AccrualRequest is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "AccrualRequest7,"
			VertexRoutineExecuted = "AccrualRequest"
			LocalVertexRequest = "A"
			ReturnedVertexRequest = "AccrualRequest           "
			LocalExecuteReturnBlank = DoVertexDefaulting
			OutputTransactionType = ConvertTransactionType
			LocalExecuteReturnBlank =  LoadGlobalDefaults
			if (LocalErrorNumber entered)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				return

			if (ChargedTaxAmount not entered
			and CallingModule not = "ProcessTaxHistory"
			and TaxAmount entered)
				ChargedTaxAmount 			= TaxAmount	

			if (UserTemplateEnabled									
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")	
				if (LocalContinueProcessing)						
					LocalTrigger = CallVertexCalculateTaxUT			
				return												
			
			if (VertexConfigRel.DefaultVersion.Version[1:1]	= "8" 
			and LocalContinueProcessing)	
				LocalExecuteReturnBlank = AccrualRequest80		
			else
			if (LocalContinueProcessing)
				LocalVertexVersionUsed = "Version7"
				invoke AccrualCall Accrual
					resume on error
						WebServiceError = true
						WebServiceErrorMessage = error message	
					invoked.Login.UserName 													= blank	
					invoked.Login.Password 													= blank	
					invoked.Login.TrustedId 												= VertexConfigVersionRel.TrustedId
					invoked.AccrualRequest.ReturnAssistedParametersIndicator				= VertexConfigRel.ReturnAssistedParameters			
					invoked.AccrualRequest.ReturnAssistedParametersIndicator				= VertexConfigRel.ReturnAssistedParameters	 
					invoked.AccrualRequest.TransactionId									= UniqueIdOfRelatedObject	
					invoked.AccrualRequest.DocumentDate								 		= InvoiceDate
					invoked.AccrualRequest.DocumentNumber									= Invoice								
					invoked.AccrualRequest.DocumentSequenceId								= VoucherNumber	
					invoked.AccrualRequest.TransactionType 									= ConvertTransactionType	 
					invoked.AccrualRequest.PostToJournal									= PostToJournal		 
					invoked.AccrualRequest.LocationCode 									= Location	
					invoked.AccrualRequest.DeliveryTerm										= DeliveryTerms	 
					invoked.AccrualRequest.Currency.IsoCurrencyCodeAlpha					= DefaultFilingCurrency 
					invoked.AccrualRequest.Currency.IsoCurrencyCodeNum						= DefaultFilingCurrency 
					invoked.AccrualRequest.Vendor.VendorCode.Value		  					= VendorCustomer	
					if (FromTaxCode entered)
						invoked.AccrualRequest.Vendor.PhysicalOrigin.TaxAreaId 				= FromTaxCode						 
					if (FromPostalAddress.Country entered)   
						invoked.AccrualRequest.Vendor.PhysicalOrigin.StreetAddress1			= FromPostalAddress.DeliveryAddress.AddressLine1		 
						invoked.AccrualRequest.Vendor.PhysicalOrigin.City 					= FromPostalAddress.Municipality			 
						invoked.AccrualRequest.Vendor.PhysicalOrigin.MainDivision 			= FromPostalAddress.StateProvince		 
						invoked.AccrualRequest.Vendor.PhysicalOrigin.SubDivision			= FromPostalAddress.County				 			
						invoked.AccrualRequest.Vendor.PhysicalOrigin.PostalCode 			= FromPostalAddress.PostalCode			 				
						invoked.AccrualRequest.Vendor.PhysicalOrigin.Country 				= FromISOCountryCode  
					if (FromTaxCode entered							
					or  FromPostalAddress.Country entered)   
						if (TransactionCurrency entered)			
							invoked.AccrualRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= TransactionCurrencyRel.ISOCode			 
							invoked.AccrualRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 		= TransactionCurrencyRel.ISOCodeNumber	 
							invoked.AccrualRequest.Vendor.PhysicalOrigin.CurrencyConversion.Value 					= FromCurrencyRate	
					if (FromVATRegistrationNumber entered)			 
						invoked.AccrualRequest.Vendor.TaxRegistration.IsoCountryCode						= DefaultFromISOCountry		
						invoked.AccrualRequest.Vendor.TaxRegistration.TaxRegistrationNumber 				= FromVATRegistrationNumber	
						invoked.AccrualRequest.Vendor.TaxRegistration.HasPhysicalPresenceIndicator 			= FromHasPhysicalPresenceInd	
					if (POATaxCode entered)
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.TaxAreaId 			= POATaxCode
					if (POAAddress entered)							 
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.StreetAddress1		= POAAddress.DeliveryAddress.AddressLine1		 
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.City 				= POAAddress.Municipality			 
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.MainDivision 		= POAAddress.StateProvince	 
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.SubDivision			= POAAddress.County			 						
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.PostalCode 			= POAAddress.PostalCode		 				
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.Country 				= POAISOCountryCode 
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= POACurrencyRel.ISOCode	
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= POACurrencyRel.ISOCodeNumber									
						invoked.AccrualRequest.Vendor.AdministrativeOrigin.CurrencyConversion.Value					= POACurrencyRate	
					invoked.AccrualRequest.Buyer.Company						 			= TaxEntity	 	 	 
					if (Exempt entered)
						invoked.AccrualRequest.Buyer.IsTaxExempt							= IsTaxExempt
					invoked.AccrualRequest.Buyer.Division					 				= blank	
					invoked.AccrualRequest.Buyer.Department									= blank	
					if (TaxCode entered)
						invoked.AccrualRequest.Buyer.Destination.TaxAreaId 								= TaxCode						 
					invoked.AccrualRequest.Buyer.Destination.StreetAddress1								= PostalAddress.DeliveryAddress.AddressLine1 
					invoked.AccrualRequest.Buyer.Destination.City 										= PostalAddress.Municipality 		 
					invoked.AccrualRequest.Buyer.Destination.MainDivision 								= PostalAddress.StateProvince 	 
					invoked.AccrualRequest.Buyer.Destination.SubDivision								= PostalAddress.County 			 									
					invoked.AccrualRequest.Buyer.Destination.PostalCode 								= PostalAddress.PostalCode 		 
					invoked.AccrualRequest.Buyer.Destination.Country 									= ToISOCountryCode  
					invoked.AccrualRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BaseCurrencyRel.ISOCode	
					invoked.AccrualRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeNum 		= BaseCurrencyRel.ISOCodeNumber	 										
					invoked.AccrualRequest.Buyer.Destination.CurrencyConversion.Value					= CurrencyRate	
					LocalBuyerTaxRegistration = DerivedBuyerTaxRegistration
					if (LocalBuyerTaxRegistration entered
					and DefaultToISOCountry entered)
						invoked.AccrualRequest.Buyer.TaxRegistration.IsoCountryCode						= DefaultToISOCountry								
						invoked.AccrualRequest.Buyer.TaxRegistration.TaxRegistrationNumber 				= LocalBuyerTaxRegistration			
						invoked.AccrualRequest.Buyer.TaxRegistration.HasPhysicalPresenceIndicator 		= ToHasPhysicalPresenceInd			
					if (BuyerAdminDestTaxCode entered)
						invoked.AccrualRequest.Buyer.AdministrativeDestination.TaxAreaId 		= BuyerAdminDestTaxCode						 
					if (BuyerAdminDestAddress entered)
						invoked.AccrualRequest.Buyer.AdministrativeDestination.StreetAddress1	= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
						invoked.AccrualRequest.Buyer.AdministrativeDestination.City 			= BuyerAdminDestAddress.Municipality		 
						invoked.AccrualRequest.Buyer.AdministrativeDestination.MainDivision 	= BuyerAdminDestAddress.StateProvince 	 
						invoked.AccrualRequest.Buyer.AdministrativeDestination.SubDivision		= BuyerAdminDestAddress.County 			 	
						invoked.AccrualRequest.Buyer.AdministrativeDestination.PostalCode 		= BuyerAdminDestAddress.PostalCode 		 
						invoked.AccrualRequest.Buyer.AdministrativeDestination.Country 			= BuyerAdminDestISOCountryCode  
					if (BuyerAdminDestTaxCode entered
					or  BuyerAdminDestAddress entered)	
						if (BuyerAdminCurrency entered)		
							invoked.AccrualRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BuyerAdminCurrency 
							invoked.AccrualRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 	= BuyerAdminCurrency 
							invoked.AccrualRequest.Buyer.AdministrativeDestination.CurrencyConversion.Value					= BuyerAdminCurrencyRate	
					if (PayablesTaxingLocation entered)
						invoked.AccrualRequest.SitusOverride.TaxingLocation 				= PayablesTaxingLocation	
					if (LocalEffectiveDate entered)
						invoked.AccrualRequest.LineItem.TaxDate				 				= LocalEffectiveDate
					else
						invoked.AccrualRequest.LineItem.TaxDate								= EffectiveDate	
					invoked.AccrualRequest.LineItem.LineItemNumber				 			= LineNumber					
					invoked.AccrualRequest.LineItem.Quantity  								= Quantity					
					invoked.AccrualRequest.LineItem.UnitPrice 								= UnitCost	
					invoked.AccrualRequest.LineItem.ExtendedPrice 							= DerivedExtendedPrice  
					invoked.AccrualRequest.LineItem.TaxIncludedIndicator 					= TaxIncludedIndicator
					invoked.AccrualRequest.LineItem.Usage									= TaxUsageCode			
					invoked.AccrualRequest.LineItem.Purchase.Value							= ProductTaxCategory	
					if (MaterialCode entered)	
						invoked.AccrualRequest.LineItem.MaterialCode  						= MaterialCode
					if (VATProcess
					or RecoverableImpositionType = "VAT")
						if (RecoverableTaxAreaId entered
						and RecoverableJurisLevel entered
						and RecoverableImpositionType entered)
							invoked.AccrualRequest.LineItem.InputTax.TaxingJurisdictionLocation.TaxAreaId	 		= RecoverableTaxAreaId 
							invoked.AccrualRequest.LineItem.InputTax.TaxingJurisdictionLocation.JurisdictionLevel	= RecoverableJurisLevel 
							invoked.AccrualRequest.LineItem.InputTax.TaxingJurisdictionLocation.ImpositionType	 	= RecoverableImpositionType 	
							invoked.AccrualRequest.LineItem.InputTax.InputAmount							 		= VATInputTaxAmount 
						if (BlockingOverridePercent entered)	
							invoked.AccrualRequest.LineItem.InputTax.BlockingOverridePercent  				 		= BlockingOverridePercent
						if (PartialExemptRecvblOvrdPct entered)	
							invoked.AccrualRequest.LineItem.InputTax.PartialExemptRecoverableOverridePercent 		= PartialExemptRecvblOvrdPct
						if (VertexVATType.Import)
							invoked.AccrualRequest.LineItem.InputTax.IsImport									= true 
					if (ReturnedTaxAccrualAccount entered)
						invoked.AccrualRequest.LineItem.GeneralLedgerAccount									= ReturnedTaxAccrualAccount
					else
						invoked.AccrualRequest.LineItem.GeneralLedgerAccount									= TaxCodeAccount	
					if (CommodityCode entered)
						invoked.AccrualRequest.LineItem.CommodityCode	= CommodityCode
								
					VertexResponse 	= result.SEnvelopeVertex
					MyHTTPInfo		= result.MyHTTPInfo			


			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				LocalExecuteReturnBlank = ParseWebserviceError	
			
			LocalExecuteReturnBlank = CaptureXml				

			if (WebServiceError)
				LocalErrorCategory 		= "TXQNT"
				LocalErrorNumber 	 	= 899				
				LocalExecuteReturnBlank = CreateTaxToLogFile
				if (TaxConfigurationRel.DisplayWebserviceErrorXml)											
					WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml					
				return blank
			
			LocalExecuteReturnBlank = InitializeOutputFields			
			ResponseStartTimestamp = DerivedTimestamp time
			for each VertexResponse.SEnvelopeSBodyVertex set					
				for each each.SEnvelopeSBodyVertexEnvelope set																
					for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponse set
						ResultsCount += 1
						DocumentDate					= each.DerivedDocumentDate
						ReturnedInvoiceTotal			= each.InvoiceTotalNum		 
						OutputInvoiceTotal				= each.InvoiceTotalNum
						ReturnedTotalTax				= each.TotalTaxNum	
						OutputTotalTaxAmount			= each.TotalTaxNum
						ReturnedSubTotalTax				= each.SubTotalNum
						OutputTotalTaxable 				= each.SubTotalNum	 
						OutputInvoiceTotal				= each.InvoiceTotalNum	 
						OutputTotalTaxAmount 			= each.TotalTaxNum	
						for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseBuyer set
							for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseBuyerDestination set
								OutputGeoCode			= each.TaxAreaId
								initialize LocalCity
								initialize LocalState
								initialize LocalZip
								initialize LocalCityStateZip
								LocalCity 	= each.City
								LocalState	= each.MainDivision
								LocalZip	= each.PostalCode
							for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseBuyerAdministrativeDestination set
						for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseVendor set
							for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseVendorPhysicalOrigin set
							for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseVendorAdministrativeOrigin set
						for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseLineItem set
							for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseLineItemTaxes set	
								JurisSeq +=1
								OutputTaxRate 			= OutputTaxRate + each.EffectiveRateNum
								ReturnedTotalRate 		= ReturnedTotalRate + each.EffectiveRateNum
								if (TaxableAmount not entered)
									TaxableAmount 		= each.TaxableNum
								if (OutputTotalTaxable not entered)									
									OutputTotalTaxable 	= each.TaxableNum
								VertexTaxResult 		= each.TaxResult
								ReturnedTaxType			= each.TaxType
								if (InputOutputType not entered)
									InputOutputType		= each.InputOutputType
								InputOutputType			= each.InputOutputType
								ReturnedSitusLocation	= each.Situs	
								IsService				= each.IsService
								if (RateClassificationText not entered)
									RateClassificationText	= each.RateClassification		
								if (InvoiceTextCode 	 = 4
								or  each.InputOutputType = "InputOutput")
									ReverseCharge		 = true
								SummaryInvoiceText		= each.SummaryInvoiceText	 
								NotRegisteredIndicator 	= each.NotRegisteredIndicatorOut	
								ReturnedUserDefinedTaxCode	= each.TaxCode	
								ReturnedVertexTaxCode 	= each.VertexTaxCode	
								SellerRegistrationId	= each.SellerRegistrationId
								BuyerRegistrationId		= each.BuyerRegistrationId
								if (RecoverablePercent not entered)							
									RecoverableAmount		= each.RecoverableAmountNum
									RecoverablePercent		= each.RecoverablePercentNum
								if (UnrecoverableAmount not entered)	
									UnrecoverableAmount		= each.UnrecoverableAmountNum										
								Imposition 				= each.Imposition
								ReturnedJurisLevel 		= each.Jurisdiction1
								ReturnedImpositionType 	= each.Imposition0									
								if (JurisSeq <= 8)
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId 			= OutputGeoCode		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= DocumentDate		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= each.CalculatedTaxNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= each.EffectiveRateNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= each.Jurisdiction
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= each.JurisdictionIdNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel 	= each.Jurisdiction1
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= each.TaxType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= each.Situs
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = each.TaxCollectedFromParty
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= each.Taxable
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= each.Imposition
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= each.Imposition0	
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= each.TaxRuleId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= each.TaxResult
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= each.SummaryInvoiceText	 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= each.IsService
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= each.SellerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= each.BuyerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= each.RecoverableAmountNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= each.RecoverablePercentNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= each.InputOutputType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText = each.RateClassification									
									if (LocalReturnVertexTaxIn.Detail) 							
										if (each.TaxType != "CONSUMERS_USE")						
											LocalExecuteReturnBlank = LoadTaxDetail									
									for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseLineItemTaxesFilingCurrencyAmounts set
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha		= each.IsoCurrencyCode	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum			= each.IsoCurrencyCodeNumber	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion			= each.CurrencyConversionRate										
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable						= each.FilingTaxableNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax				= each.FilingCalculatedTaxNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt						= each.FilingExemptNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable					= each.FilingNonTaxableNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount			= each.FilingRecoverableAmountNum 	
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 		= each.FilingUnrecoverableAmountNum 																
										LocalExecuteReturnBlank = LoadGlobalOutputValues
									initialize Idx2
									for each each.SEnvelopeSBodyVertexEnvelopeAccrualResponseLineItemTaxesInvoiceTextCode set		 
										Idx2 = Idx2 + 1
										LocalInvoiceTextCode.InvoiceTextCode	= each.InvoiceTextCode
										LocalExecuteReturnBlank = LoadInvoiceTextCodes
										InvoiceTextCode															= each.InvoiceTextCodeNum	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= each.InvoiceTextCodeNum	
										if (ReturnedSitusLocation = "DESTINATION"	
										or  InputOutputType = "InputOutput")	
											if (InvoiceTextCode = 4)				
												ReverseCharge		 = true			
									
			ResponseStopTimestamp = DerivedTimestamp time										
			if (ResultsCount > 1)
				LocalErrorNumber 	 = 803  	
				MultipleTaxAreaIds = true				
			else
			if (ResultsCount = 1
			and OutputGeoCode entered)
				LocalExecuteReturnBlank = CreateTaxCodeMaster
				if (LocalReturnVertexTaxIn.Detail)				
					LocalContinueProcessing = true				
				else					
					TaxTable.TaxTableOutput[1].TaxCode 					= OutputGeoCode
					TaxTable.TaxTableOutput[1].TaxRate					= ReturnedTotalRate
					TaxTable.TaxTableOutput[1].TaxPointDate 			= DocumentDate					 
					TaxTable.TaxTableOutput[1].EffectiveDate			= DocumentDate	 
					TaxTable.TaxTableOutput[1].InTaxAmount 				= ReturnedTotalTax
					TaxTable.TaxTableOutput[1].TaxAmount 				= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 			= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxableAmount 			= TaxableAmount
					TaxTable.TaxTableOutput[1].Description				= VertexTaxResult 	 
					TaxTable.TaxTableOutput[1].Flag						= blank				
							
				TaxCode = OutputGeoCode	
				LocalExecuteReturnBlank = 5400LoadAccountInfo
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank
			
			if (JurisdictionResultsKey entered)
				LocalExecuteReturnBlank = CreateJurisdictionResults		
											
			return blank	

			

		DeleteAllJurisdictionResultFiles is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "DeleteAllJurisdictionResultFiles,"
			if (DeleteJurisdictionResultsFromExternal)
				 	SaveMessageLogKey						= JurisdictionResultsKey 	
				 	ResultsLastSeq 							= ResponseBusclassKey 		
			if (GetLastJurisdictionResultsSeqRel exist)
				invoke Delete GetLastJurisdictionResultsSeqRel
			if (JurisdictionResultsRel exist)
				invoke Delete JurisdictionResultsRel
			if (JurisdictionResultsBORRel exist)
				invoke Delete JurisdictionResultsBORRel
			if (JurisdictionResultsRel2 exist)				
				invoke Delete JurisdictionResultsRel2		
			if (JurisdictionResultsRel3 exist)				
				invoke Delete JurisdictionResultsRel3		
			if (JurisdictionResultsRel4 exist)				
				invoke Delete JurisdictionResultsRel4		
			return blank

		LoadVertexFlexibleFieldsOut  is a DerivedField	
			type is Alpha 1		 
			restricted
			if (CreateOutputUserFieldFile)	 
				TotalFlexFieldsOut 		= DistLine select "/LineItem/FlexibleFields"						
				TotalFlexCodesOut 		= DistLine select "/LineItem/FlexibleFields/FlexibleCodeField"		
				TotalFlexNumericsOut 	= DistLine select "/LineItem/FlexibleFields/FlexibleNumericField"	
				TotalFlexDatesOut 		= DistLine select "/LineItem/FlexibleFields/FlexibleDateField"		

				TotalFlexCodesOut 		= DistLine select "/LineItem/FlexibleFields/FlexibleCodeField"
				initialize CodeIdx 
				while (CodeIdx <= TotalFlexCodesOut)		 
					CodeIdx +=1	
					LocalCodeValue = DistLine select "/LineItem/FlexibleFields/FlexibleCodeField[<CodeIdx>]"  					
					if (LocalCodeValue not entered)
						end while
					if (LocalCodeValue entered)
						LocalVertexAttributesOut.VertexCodes.FlexibleCode[CodeIdx].FieldId 	= DistLine select "/LineItem/FlexibleFields/FlexibleCodeField[<CodeIdx>]/@fieldId" 
						LocalVertexAttributesOut.VertexCodes.FlexibleCode[CodeIdx].Code 	= LocalCodeValue	 
	
				initialize NumIdx 
				while (NumIdx <= TotalFlexNumericsOut)		 
					NumIdx +=1	
					initialize LocalNumericValue
					LocalNumericValue = DistLine select "/LineItem/FlexibleFields/FlexibleNumericField[<NumIdx>]" 
					if (LocalNumericValue not entered)
						end while
					if (LocalNumericValue entered)
						LocalVertexAttributesOut.VertexNumerics.FlexibleNumeric[NumIdx].FieldId 		= DistLine select "/LineItem/FlexibleFields/FlexibleNumericField[<NumIdx>]/@fieldId"  
						LocalVertexAttributesOut.VertexNumerics.FlexibleNumeric[NumIdx].NumericValue 	= ConvertAmountToNum	
						
				initialize DateIdx 
				while (DateIdx <= TotalFlexDatesOut)		 
					DateIdx +=1	
					initialize LocalDateValue
					LocalDateValue = DistLine select "/LineItem/FlexibleFields/FlexibleDateField[<DateIdx>]" 
					if (LocalDateValue not entered)
						end while
					if (LocalDateValue entered)
						LocalVertexAttributesOut.VertexDates.FlexibleDate[DateIdx].FieldId 	= DistLine select "/LineItem/FlexibleFields/FlexibleDateField[<DateIdx>]/@fieldId" 
						LocalVertexAttributesOut.VertexDates.FlexibleDate[DateIdx].DateValue = DerivedReturnedDate	 
											
			return blank	

		CreateOutputFlexibleFieldsForInvoice is a DerivedField	 
			type is Alpha 1	 
			restricted
			invoke Delete VertexOutputFlexibleFieldsRel		
			if (LocalVertexAttributesOut.VertexCodes.FlexibleCode[1].Code not entered						
			and LocalVertexAttributesOut.VertexNumerics.FlexibleNumeric[1].NumericValue not entered			
			and LocalVertexAttributesOut.VertexDates.FlexibleDate[1].DateValue not entered)					
				return blank
			else
			if (VertexOutputFlexibleFieldsRel not exist)			
				invoke Create VertexFlexibleFields  
					invoked.FinanceEnterpriseGroup 							= FinanceEnterpriseGroup	 
					invoked.VertexFlexibleFields.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject	
					invoked.VertexFlexibleFields.TaxAttributeCode           = blank	
					invoked.VertexFlexibleFields.Type						= "O"	

			if (VertexOutputFlexibleFieldsRel exist					
			and LocalVertexAttributesOut.VertexCodes.FlexibleCode[1].Code entered)
				initialize Idx
				while (Idx <= 25)
					Idx +=1	
					if (LocalVertexAttributesOut.VertexCodes.FlexibleCode[Idx].Code not entered)
						end while
					else
						invoke Create VertexFlexibleCode  							 
							invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup	 	
							invoked.VertexFlexibleFields			= VertexOutputFlexibleFieldsRel.VertexFlexibleFields	
							invoked.VertexFlexibleCode.FieldId		= LocalVertexAttributesOut.VertexCodes.FlexibleCode[Idx].FieldId									
							invoked.Code							= LocalVertexAttributesOut.VertexCodes.FlexibleCode[Idx].Code								 																	

			if (VertexOutputFlexibleFieldsRel exist					
			and LocalVertexAttributesOut.VertexNumerics.FlexibleNumeric[1].NumericValue entered) 		 
				initialize Idx
				while (Idx <= 10)
					Idx +=1	
					if (LocalVertexAttributesOut.VertexNumerics.FlexibleNumeric[Idx].NumericValue not entered)
						end while
					else
						invoke Create VertexFlexibleNumeric  							
							invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup	 	
							invoked.VertexFlexibleFields			= VertexOutputFlexibleFieldsRel.VertexFlexibleFields
							invoked.VertexFlexibleNumeric.FieldId	= LocalVertexAttributesOut.VertexNumerics.FlexibleNumeric[Idx].FieldId									
							invoked.NumericValue					= LocalVertexAttributesOut.VertexNumerics.FlexibleNumeric[Idx].NumericValue		

			if (VertexOutputFlexibleFieldsRel exist					
			and LocalVertexAttributesOut.VertexDates.FlexibleDate[1].DateValue entered)									 
				initialize Idx
				while (Idx <= 5)
					Idx +=1	
					if (LocalVertexAttributesOut.VertexDates.FlexibleDate[Idx].DateValue not entered)
						end while
					else
						invoke Create VertexFlexibleDate  							
							invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup	 
							invoked.VertexFlexibleFields			= VertexOutputFlexibleFieldsRel.VertexFlexibleFields
							invoked.VertexFlexibleDate.FieldId		= LocalVertexAttributesOut.VertexDates.FlexibleDate[Idx].FieldId									
							invoked.DateValue						= LocalVertexAttributesOut.VertexDates.FlexibleDate[Idx].DateValue		
			return blank
						
		LoadJurisdictionResultsFile is a DerivedField			 	
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadJurisdictionResultsFile,"
			if (DontCreateResultFiles)
				SkipThis = true
			else	
				SaveMessageLogKey 	= JurisdictionResultsKey		
				ResultsLastSeq  	= ResponseBusclassKey 			
				if (LineItemNbrIdx = 1								
				or  !SendMultLineItems)								
					LocalTrigger = DeleteAllJurisdictionResultFiles	
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel
				if (JurisdictionResultsKey entered
				and JurisdictionResultsRel not exist)
					initialize Idx
					while (Idx < NumberOfTaxesReturned)				
						Idx +=1
						if (Idx > 20)		
							end while 		
						if (Idx <= 20)
							invoke Create JurisdictionResults
								assign result to SaveJurisdictionResults 
								invoked.VertexConfig							= DerivedFinanceEnterpriseGroup
								invoked.JurisdictionResults.LookupKey			= SaveMessageLogKey			
								invoked.JurisdictionResults.ResponseBusclassKey	= ResponseBusclassKey 		
								invoked.JurisdictionResults.Sequence			= Idx
								invoked.CallingModuleKey						= RelatedObjectReference
								invoked.ResultsBusclassKey						= JurisdictionResultsKey
								invoked.TaxAreaId								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxAreaId 
								invoked.TaxDate									= OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveDate
								invoked.Situs 									= OutputJurisdictions.JurisdictionTableOutput[Idx].Situs
								invoked.TaxResult 								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxResult										
								invoked.TaxType 								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxType
								invoked.Jurisdiction 							= OutputJurisdictions.JurisdictionTableOutput[Idx].Jurisdiction
								invoked.JurisdictionId 							= OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionId
								invoked.JurisdictionLevel 						= OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionLevel														
								invoked.CalculatedTax 							= OutputJurisdictions.JurisdictionTableOutput[Idx].CalculatedTax
								invoked.EffectiveRate 							= OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveRate
								invoked.Taxable 								= OutputJurisdictions.JurisdictionTableOutput[Idx].Taxable
								invoked.Imposition 								= OutputJurisdictions.JurisdictionTableOutput[Idx].Imposition
								invoked.ImpositionType 							= OutputJurisdictions.JurisdictionTableOutput[Idx].ImpositionType
								invoked.TaxRuleId 								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxRuleId	
								invoked.InvoiceTextCode							= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode		 	 
								invoked.SummaryInvoiceText						= OutputJurisdictions.JurisdictionTableOutput[Idx].SummaryInvoiceText	 	 
								invoked.IsService 								= OutputJurisdictions.JurisdictionTableOutput[Idx].IsService				 
								invoked.SellerRegistrationId					= OutputJurisdictions.JurisdictionTableOutput[Idx].SellerRegistrationId	 
								invoked.BuyerRegistrationId 					= OutputJurisdictions.JurisdictionTableOutput[Idx].BuyerRegistrationId	 
								invoked.RecoverableAmount 						= OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverableAmount		 
								invoked.RecoverablePercent 						= OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverablePercent	 
								invoked.InputOutputType 						= OutputJurisdictions.JurisdictionTableOutput[Idx].InputOutputType		 
								invoked.FilingIsoCurrencyCodeAlpha 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeAlpha		 	 
								invoked.FilingIsoCurrencyCodeNum 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeNum			 	 
								invoked.FilingCurrencyConversion 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCurrencyConversion			 										
								invoked.FilingTaxable 							= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingTaxable						 
								invoked.FilingCalculatedTax 					= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCalculatedTax				 
								invoked.FilingExempt 							= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingExempt						 
								invoked.FilingNonTaxable 						= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingNonTaxable					 
								invoked.FilingRecoverableAmount 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingRecoverableAmount			 	
								invoked.FilingUnrecoverableAmount 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingUnrecoverableAmount 	
								invoked.RateClassificationText 					= OutputJurisdictions.JurisdictionTableOutput[Idx].RateClassificationText 
								invoked.InvoiceTextCode.InvoiceTextCodeOut[1].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode1 
								invoked.InvoiceTextCode.InvoiceTextCodeOut[2].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode2 	
								invoked.InvoiceTextCode.InvoiceTextCodeOut[3].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode3 	
								invoked.InvoiceTextCode.InvoiceTextCodeOut[4].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode4 	
								invoked.InvoiceTextCode.InvoiceTextCodeOut[5].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode5 
					if (UpdateLineItems			 		
					and CurrentTaxLineItemRel exist)
						invoke Update CurrentTaxLineItemRel
							invoked.CalculatedTaxAmt	= LineCalculatedTax	 
							invoked.TaxRate				= OutputTaxRate
							invoked.TaxResult			= VertexTaxResult
							invoked.TaxingJurisdiction	= TaxingJurisdiction
							invoked.Exempt				= ReturnedIsExempt	
							invoked.CapturedXml			= DistLine
							if (invoked.InvoiceAmount not = OutputInvoiceTotal)		 
								invoked.InvoiceAmount	= OutputInvoiceTotal
							if (WebServiceError)
								invoked.WebServiceError	= true						
							if (MultipleTaxAreaIds)		
								invoked.MoreResults		= TaxLineItemMultiTAIDLabel + RichTextDisplayCalcTax + DisplayLineItemFlexibleFields
								MultipleTaxAreaIds 		= false
								invoked.MoreResults		= RichTextDisplayCalcTax + DisplayLineItemFlexibleFields	
							if (LocalErrorNumber entered)
								invoked.LineitemError			= true
								invoked.ReturnedErrorNumber		= LocalErrorNumber
								invoked.ReturnedErrorMessage 	= OutputErrorMessage
								initialize LocalErrorNumber		
							invoked.LocalTaxTable				= TaxTable	
							invoked.SendAddressOrTaxAreaId 		= SendAddressOrTaxAreaId		 
							
						if (CreateOutputUserFieldFile)	
							invoke CreateVertexFlexibleFieldsOutput CurrentTaxLineItemRel		 
								invoked.ParmVertexAttributes = LocalVertexAttributesOut			 							

						if (TaxEntity.VertexCallMethod.ByTransaction)
							invoke CreateLineItemTaxTable CurrentTaxLineItemRel
								invoked.PrmTaxTable					= TaxTable	
				
						JurisdictionHasBeenCreated = true	
										
			return blank

		PurchaseOrderRequest is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "PurchaseOrderRequest,"
			VertexRoutineExecuted = "PurchaseOrderRequest"
			LocalVertexRequest = "P"
			ReturnedVertexRequest = "PurchaseOrderRequest"
			LocalExecuteReturnBlank = DoVertexDefaulting
			OutputTransactionType = ConvertTransactionType
			LocalExecuteReturnBlank =  LoadGlobalDefaults
			if (LocalErrorNumber entered)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				return

			if (UserTemplateEnabled									
			or VertexConfigRel.DefaultVersion.Version[1:1]	= "9")	
				if (LocalContinueProcessing)						
					LocalTrigger = CallVertexCalculateTaxUT			
				return												
			
			if (VertexConfigRel.DefaultVersion.Version[1:1]	= "8" 
			and LocalContinueProcessing)	
				LocalExecuteReturnBlank = PurchaseOrderRequest80		
			else
			if (LocalContinueProcessing)
				LocalVertexVersionUsed = "Version7"
				invoke PurchaseOrderCall PurchaseOrderService
					resume on error
						WebServiceError = true
						WebServiceErrorMessage = error message
					invoked.Login.UserName 														= blank	
					invoked.Login.Password 														= blank	
					invoked.Login.TrustedId 													= VertexConfigVersionRel.TrustedId
					invoked.PurchaseOrderRequest.ReturnAssistedParametersIndicator				= VertexConfigRel.ReturnAssistedParameters	
					invoked.PurchaseOrderRequest.DocumentDate									= InvoiceDate	
					invoked.PurchaseOrderRequest.DocumentNumber									= Invoice	
					invoked.PurchaseOrderRequest.TransactionType 								= ConvertTransactionType	 
					invoked.PurchaseOrderRequest.CalculateVendorTaxIndicator					= CalculateVendorTaxIndicator			
					invoked.PurchaseOrderRequest.LocationCode 									= Location	
					if (DeliveryTerms entered)
						invoked.PurchaseOrderRequest.DeliveryTerm								= DeliveryTerms					
					if (PayablesTaxingLocation entered)
						invoked.PurchaseOrderRequest.SitusOverride.TaxingLocation 				= PayablesTaxingLocation
					if (DefaultFilingCurrency entered)		 					
						invoked.PurchaseOrderRequest.Currency.IsoCurrencyCodeAlpha				= DefaultFilingCurrency 
						invoked.PurchaseOrderRequest.Currency.IsoCurrencyCodeNum				= DefaultFilingCurrency 
					if (VATRegistrationNumber entered)
						invoked.PurchaseOrderRequest.Buyer.TaxRegistration.IsoCountryCode					= VATRegistrationCountry								
						invoked.PurchaseOrderRequest.Buyer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber
						invoked.PurchaseOrderRequest.Buyer.TaxRegistration.HasPhysicalPresenceIndicator 	= ToHasPhysicalPresenceInd	 
					if (FromVATRegistrationNumber entered)
						invoked.PurchaseOrderRequest.Vendor.TaxRegistration.IsoCountryCode					= FromVATRegistrationCountry 							
						invoked.PurchaseOrderRequest.Vendor.TaxRegistration.TaxRegistrationNumber 			= FromVATRegistrationNumber
						invoked.PurchaseOrderRequest.Vendor.TaxRegistration.HasPhysicalPresenceIndicator 	= FromHasPhysicalPresenceInd	 
					invoked.PurchaseOrderRequest.Vendor.VendorCode.Value		  				= VendorCustomer	
					if (FromTaxCode entered)
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.TaxAreaId 			= FromTaxCode						 
					if (FromPostalAddress.Country entered)   
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.StreetAddress1		= FromPostalAddress.DeliveryAddress.AddressLine1		 
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.City 				= FromPostalAddress.Municipality			 
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.MainDivision 		= FromPostalAddress.StateProvince		 
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.SubDivision			= FromPostalAddress.County				 			
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.PostalCode 			= FromPostalAddress.PostalCode			 				
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.Country 				= FromISOCountryCode  
					if (FromTaxCode entered							
					or  FromPostalAddress.Country entered)   
						if (TransactionCurrency entered)
							invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= TransactionCurrencyRel.ISOCode	
							invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= TransactionCurrencyRel.ISOCodeNumber				
							invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.CurrencyConversion.Value					= FromCurrencyRate
					if (POATaxCode entered)
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.TaxAreaId 			= POATaxCode						 
					if (POAAddress.Country entered)
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.StreetAddress1		= POAAddress.DeliveryAddress.AddressLine1		 
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.City 				= POAAddress.Municipality			 
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.MainDivision 		= POAAddress.StateProvince	 
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.SubDivision		= POAAddress.County			 							
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.PostalCode 		= POAAddress.PostalCode		 					
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.Country 			= POAAddress.Country	
					if (POATaxCode entered
					or  POAAddress.Country entered)	
						if (POACurrency entered)					
							invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 		= POACurrencyRel.ISOCode
							invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 			= POACurrencyRel.ISOCodeNumber		  			     
							invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.CurrencyConversion.Value						= POACurrencyRate				
						
					if (OverrideTaxEntity entered)
						invoked.PurchaseOrderRequest.Buyer.Company						 		= OverrideTaxEntity	
					else
						invoked.PurchaseOrderRequest.Buyer.Company						 		= TaxEntity	 
					if (Exempt entered)
						invoked.PurchaseOrderRequest.Buyer.IsTaxExempt							= IsTaxExempt	 	 
					invoked.PurchaseOrderRequest.Buyer.Division					 				= blank	
					invoked.PurchaseOrderRequest.Buyer.Department								= blank	
					invoked.PurchaseOrderRequest.Buyer.Destination.TaxAreaId 					= TaxCode						 
					invoked.PurchaseOrderRequest.Buyer.Destination.StreetAddress1				= PostalAddress.DeliveryAddress.AddressLine1 
					invoked.PurchaseOrderRequest.Buyer.Destination.City 						= PostalAddress.Municipality 		 
					invoked.PurchaseOrderRequest.Buyer.Destination.MainDivision 				= PostalAddress.StateProvince 	 
					invoked.PurchaseOrderRequest.Buyer.Destination.SubDivision					= PostalAddress.County 			 									
					invoked.PurchaseOrderRequest.Buyer.Destination.PostalCode 					= PostalAddress.PostalCode 		 
					invoked.PurchaseOrderRequest.Buyer.Destination.Country 						= ToISOCountryCode  
					if (BaseCurrency entered)
						invoked.PurchaseOrderRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha  = BaseCurrencyRel.ISOCode				 
						invoked.PurchaseOrderRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeNum 	= BaseCurrencyRel.ISOCodeNumber		  
						invoked.PurchaseOrderRequest.Buyer.Destination.CurrencyConversion.Value 				= CurrencyRate						 				
					if (BuyerAdminDestTaxCode entered)
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.TaxAreaId 		= BuyerAdminDestTaxCode
					if (BuyerAdminDestAddress.Country entered)							 
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.StreetAddress1	= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.City 			= BuyerAdminDestAddress.Municipality		 
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.MainDivision 	= BuyerAdminDestAddress.StateProvince 	 
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.SubDivision	= BuyerAdminDestAddress.County 			 	
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.PostalCode 	= BuyerAdminDestAddress.PostalCode 		 
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.Country 		= BuyerAdminDestAddress.Country  
					if (BuyerAdminDestTaxCode entered
					or  BuyerAdminDestAddress entered)	
						if (BuyerAdminCurrency entered)		
							invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha  	= BuyerAdminCurrency 
							invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 		= BuyerAdminCurrency 
							invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.CurrencyConversion.Value 					= BuyerAdminCurrencyRate
					if (LocalEffectiveDate entered)
						invoked.PurchaseOrderRequest.LineItem.TaxDate				 		  	= LocalEffectiveDate
					else
						invoked.PurchaseOrderRequest.LineItem.TaxDate							= EffectiveDate	
					invoked.PurchaseOrderRequest.LineItem.LineItemNumber				 		= LineNumber	
					invoked.PurchaseOrderRequest.LineItem.Quantity  							= Quantity					 						
					invoked.PurchaseOrderRequest.LineItem.UnitPrice 							= UnitCost	
					invoked.PurchaseOrderRequest.LineItem.ExtendedPrice 						= DerivedExtendedPrice  
					invoked.PurchaseOrderRequest.LineItem.TaxIncludedIndicator 					= TaxIncludedIndicator
					if (TaxUsageCode entered)
						invoked.PurchaseOrderRequest.LineItem.Usage								= TaxUsageCode			
					if (ProductTaxCategory entered)
						invoked.PurchaseOrderRequest.LineItem.Purchase.Value					= ProductTaxCategory
					if (ProductClass entered)		
						invoked.PurchaseOrderRequest.LineItem.Purchase.PurchaseClass			= ProductClass	 	 		
					if (MaterialCode entered)	
						invoked.PurchaseOrderRequest.LineItem.MaterialCode  					= MaterialCode
					VertexResponse 	= result.SEnvelopeVertex
					MyHTTPInfo		= result.MyHTTPInfo			


			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				LocalExecuteReturnBlank = ParseWebserviceError	
			
			LocalExecuteReturnBlank = CaptureXml				
			if (WebServiceError)
				LocalErrorCategory 		= "TXQNT"
				LocalErrorNumber 	 	= 899				
				LocalExecuteReturnBlank = CreateTaxToLogFile
				if (TaxConfigurationRel.DisplayWebserviceErrorXml)											
					WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml					
				return blank
									
			initialize ResultsCount
			initialize OutputTaxRate
			initialize OutputJurisdictions
			initialize ReturnedTotalRate
			ResponseStartTimestamp = DerivedTimestamp time							
			for each VertexResponse.SEnvelopeSBodyVertex set					
				for each each.SEnvelopeSBodyVertexEnvelope set																
					for each each.SEnvelopeSBodyVertexEnvelopePurchaseOrderResponse set
						ResultsCount += 1
						ReturnedTotalTax				= each.TotalTaxNum	
						OutputTotalTaxAmount			= each.TotalTaxNum
						ReturnedSubTotalTax				= each.SubTotalNum
						OutputTotalTaxable 				= each.SubTotalNum	 
						OutputInvoiceTotal				= each.TotalNum	 
						OutputTotalTaxAmount 			= each.TotalTaxNum	
						for each each.SEnvelopeSBodyVertexEnvelopePurchaseOrderResponseBuyer set
							for each each.SEnvelopeSBodyVertexEnvelopePurchaseOrderResponseBuyerDestination set
								OutputGeoCode			= each.TaxAreaId
								initialize LocalCity
								initialize LocalState
								initialize LocalZip
								initialize LocalCityStateZip
								LocalCity 	= each.City
								LocalState	= each.MainDivision
								LocalZip	= each.PostalCode
								LocalExecuteReturnBlank = CreateTaxCodeMaster														
						initialize TableIdx	
						for each each.SEnvelopeSBodyVertexEnvelopePurchaseOrderResponseLineItem set
							for each each.SEnvelopeSBodyVertexEnvelopePurchaseOrderResponseLineItemTaxes set
								VertexTaxResult 	= each.TaxResult		
								JurisSeq +=1
								OutputTaxRate 		= OutputTaxRate + each.EffectiveRateNum
								ReturnedTotalRate 	= ReturnedTotalRate + each.EffectiveRateNum
								ReturnedVertexTaxCode = each.VertexTaxCode
								if (TaxableAmount not entered)										
									TaxableAmount 	= each.TaxableNum		 
								if (OutputTotalTaxable not entered)
									OutputTotalTaxable 	= each.TaxableNum	 
								VertexTaxResult 			= each.TaxResult		
								ReturnedSitusLocation		= each.Situs	
								display "[TLC:CalcTax:013]ReturnedSitusLocation:<ReturnedSitusLocation>"
								if (each.TaxRuleId entered							
								or  each.Situs = "DESTINATION")						
									InputOutputType			= each.InputOutputType
									display "[TLC:CalcTax:014]InputOutputType:<InputOutputType>"
									SummaryInvoiceText		= each.SummaryInvoiceText	
									NotRegisteredIndicator 	= each.NotRegisteredIndicatorOut	
									ReturnedUserDefinedTaxCode	= each.TaxCode	
									ReturnedVertexTaxCode 	= each.VertexTaxCode										 
									IsService				= each.IsService
									RateClassificationText	= each.RateClassification
									SellerRegistrationId	= each.SellerRegistrationId
									BuyerRegistrationId		= each.BuyerRegistrationId
									ReturnedTaxType			= each.TaxType
									RecoverableAmount		= each.RecoverableAmountNum
									RecoverablePercent		= each.RecoverablePercentNum	
									UnrecoverableAmount		= each.UnrecoverableAmountNum	
									Imposition 				= each.Imposition
									ReturnedJurisLevel 		= each.Jurisdiction1
									ReturnedImpositionType 	= each.Imposition0					 						
								
								if (JurisSeq <= 8)
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId 			= OutputGeoCode		 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= EffectiveDate	
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= each.CalculatedTaxNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= each.EffectiveRateNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= each.Jurisdiction
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= each.JurisdictionIdNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel 	= each.Jurisdiction1
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= each.TaxType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= each.Situs
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= each.TaxableNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= each.Imposition
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= each.Imposition0	
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= each.TaxRuleId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= each.TaxResult
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= each.SummaryInvoiceText	 
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= each.IsService
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= each.SellerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= each.BuyerRegistrationId
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= each.RecoverableAmountNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].UnrecoverableAmount	= each.UnrecoverableAmountNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= each.RecoverablePercentNum
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= each.InputOutputType
									OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= each.RateClassification
									if (LocalReturnVertexTaxIn.Detail) 							
										if (each.TaxType != "CONSUMERS_USE")						
											LocalExecuteReturnBlank = LoadTaxDetail									
									for each each.SEnvelopeSBodyVertexEnvelopePurchaseOrderResponseLineItemTaxesFilingCurrencyAmounts set
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha		= each.IsoCurrencyCode	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum			= each.IsoCurrencyCodeNumber	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion			= each.CurrencyConversionRate										
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable						= each.FilingTaxableNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax				= each.FilingCalculatedTaxNum
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt						= each.FilingExemptNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable					= each.FilingNonTaxableNum 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount			= each.FilingRecoverableAmountNum 	
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 		= each.FilingUnrecoverableAmountNum 																
										LocalExecuteReturnBlank = LoadGlobalOutputValues
									initialize Idx2
									for each each.SEnvelopeSBodyVertexEnvelopePurchaseOrderResponseLineItemTaxesInvoiceTextCode set	 
										Idx2 = Idx2 + 1
										LocalInvoiceTextCode.InvoiceTextCode	= each.InvoiceTextCodeNum
										LocalExecuteReturnBlank = LoadInvoiceTextCodes											
										InvoiceTextCode															= each.InvoiceTextCodeNum	 
										OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= each.InvoiceTextCode
										if (ReturnedSitusLocation = "DESTINATION"	
										or  InputOutputType = "InputOutput")	
											if (InvoiceTextCode = 4)				
												ReverseCharge		 = true			
			
			ResponseStopTimestamp = DerivedTimestamp time
			if (ResultsCount > 1)
				LocalErrorNumber 	 = 803  	
				MultipleTaxAreaIds = true				
			else
			if (ResultsCount = 1
			and OutputGeoCode entered)
				LocalExecuteReturnBlank = CreateTaxCodeMaster
				if (LocalReturnVertexTaxIn.Detail)				
					LocalContinueProcessing = true				
				else					
					TaxTable.TaxTableOutput[1].TaxCode 					= OutputGeoCode		
					TaxTable.TaxTableOutput[1].TaxRate					= ReturnedTotalRate
					TaxTable.TaxTableOutput[1].TaxPointDate 			= DocumentDate					 
					TaxTable.TaxTableOutput[1].EffectiveDate			= EffectiveDate	
					TaxTable.TaxTableOutput[1].InTaxAmount 				= ReturnedTotalTax
					TaxTable.TaxTableOutput[1].TaxAmount 				= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 			= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxableAmount 			= TaxableAmount
					TaxTable.TaxTableOutput[1].Description				= VertexTaxResult 	 
					TaxTable.TaxTableOutput[1].Flag						= blank				
							
				TaxCode = OutputGeoCode	
				LocalExecuteReturnBlank = 5400LoadAccountInfo
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank

			if (JurisdictionResultsKey entered)	
				LocalExecuteReturnBlank = CreateJurisdictionResults	
												
			return blank	

								
		DerivedDocumentNumber is a DerivedField			 
			type is like DocumentNumber	
			return Invoice + "," + Suffix + "," + CancelSequence	



		QuotationRequest80 is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "QuotationRequest80,"
			LocalVertexVersionUsed = "Version8"	
			if (LocalContinueProcessing)
				invoke QuotationCall Quotation80
					resume on error
						WebServiceError = true
						WebServiceErrorMessage = error message	
					invoked.Login.UserName 												= blank	
					invoked.Login.Password 												= blank	
					invoked.Login.TrustedId 											= VertexConfigVersionRel.TrustedId
					invoked.QuotationRequest.ReturnAssistedParametersIndicator			= VertexConfigRel.ReturnAssistedParameters	 
					invoked.QuotationRequest.TransactionType 							= OutputTransactionType	
					invoked.QuotationRequest.DocumentDate								= InvoiceDate	 						 	 
					invoked.QuotationRequest.DocumentNumber								= Invoice
					if (DeliveryTerms entered)
						invoked.QuotationRequest.DeliveryTerm							= DeliveryTerms					
					invoked.QuotationRequest.Customer.IsTaxExempt						= IsTaxExempt	
					if (DefaultFilingCurrency entered)
						invoked.QuotationRequest.Currency.IsoCurrencyCodeAlpha			= DefaultFilingCurrency 
						invoked.QuotationRequest.Currency.IsoCurrencyCodeNum			= DefaultFilingCurrency 
					invoked.QuotationRequest.Seller.Company								= TaxEntity					
					if (FromVATRegistrationNumber entered)
						invoked.QuotationRequest.Seller.TaxRegistration.TaxRegistrationNumber 		 = FromVATRegistrationNumber
						invoked.QuotationRequest.Seller.TaxRegistration.IsoCountryCode				 = DefaultFromISOCountry	 						 		
						invoked.QuotationRequest.Seller.TaxRegistration.HasPhysicalPresenceIndicator = FromHasPhysicalPresenceInd
						if (FromPostalAddress.StateProvince entered)
							invoked.QuotationRequest.Seller.TaxRegistration.MainDivision			 = FromPostalAddress.StateProvince
					if (DisplayOn)
						display "[TLC]\Calc\Tax-FromTaxCode...................:<FromTaxCode>"	
						display "[TLC]\Calc\Tax-FromPostalAddress.Municipality:<FromPostalAddress.Municipality>"
						display "[TLC]\Calc\Tax-TransactionCurrency...........:<TransactionCurrency>"
						display "[TLC]\Calc\Tax-FromVATRegistrationNumber.....:<FromVATRegistrationNumber>"
					
					if (FromTaxCode entered)
						invoked.QuotationRequest.Seller.PhysicalOrigin.TaxAreaId			= FromTaxCode
					
					if (FromISOCountryCode entered)
						invoked.QuotationRequest.Seller.PhysicalOrigin.Country				= FromISOCountryCode
					
					if (FromPostalAddress.StateProvince entered)
						invoked.QuotationRequest.Seller.PhysicalOrigin.MainDivision 		= FromPostalAddress.StateProvince
						
					if (FromPostalAddress.Country entered)   
						invoked.QuotationRequest.Seller.PhysicalOrigin.StreetAddress1		= FromPostalAddress.DeliveryAddress.AddressLine1
						invoked.QuotationRequest.Seller.PhysicalOrigin.City 				= FromPostalAddress.Municipality
						invoked.QuotationRequest.Seller.PhysicalOrigin.SubDivision			= FromPostalAddress.County
						invoked.QuotationRequest.Seller.PhysicalOrigin.PostalCode			= FromPostalAddress.PostalCode	
																	 
					if (FromTaxCode entered							 
					or  FromPostalAddress.Country entered)   
						if (TransactionCurrency entered)				
							invoked.QuotationRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= TransactionCurrencyRel.ISOCode		    
							invoked.QuotationRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= TransactionCurrencyRel.ISOCodeNumber	 										
							invoked.QuotationRequest.Seller.PhysicalOrigin.CurrencyConversion.Value					= FromCurrencyRate	 
					if (POATaxCode entered)
						invoked.QuotationRequest.Seller.AdministrativeOrigin.TaxAreaId		= POATaxCode	  
					if (POAAddress.Country entered)   
						invoked.QuotationRequest.Seller.AdministrativeOrigin.StreetAddress1	= POAAddress.DeliveryAddress.AddressLine1
						invoked.QuotationRequest.Seller.AdministrativeOrigin.City 			= POAAddress.Municipality
						invoked.QuotationRequest.Seller.AdministrativeOrigin.MainDivision 	= POAAddress.StateProvince
						invoked.QuotationRequest.Seller.AdministrativeOrigin.SubDivision	= POAAddress.County
						invoked.QuotationRequest.Seller.AdministrativeOrigin.PostalCode		= POAAddress.PostalCode	
						invoked.QuotationRequest.Seller.AdministrativeOrigin.Country		= POAISOCountryCode 											
						if (POACurrency entered)
							invoked.QuotationRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= POACurrencyRel.ISOCode	
							invoked.QuotationRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 		= POACurrencyRel.ISOCodeNumber									
							invoked.QuotationRequest.Seller.AdministrativeOrigin.CurrencyConversion.Value					= POACurrencyRate		
					if (Customer entered)
						invoked.QuotationRequest.Customer.CustomerCode.Value 			= VendorCustomer	
					invoked.QuotationRequest.Customer.Destination.TaxAreaId				= TaxCode	 			
					invoked.QuotationRequest.Customer.Destination.StreetAddress1		= PostalAddress.DeliveryAddress.AddressLine1
					invoked.QuotationRequest.Customer.Destination.City 					= PostalAddress.Municipality
					invoked.QuotationRequest.Customer.Destination.MainDivision 			= PostalAddress.StateProvince
					invoked.QuotationRequest.Customer.Destination.SubDivision			= PostalAddress.County
					invoked.QuotationRequest.Customer.Destination.PostalCode			= PostalAddress.PostalCode	
					invoked.QuotationRequest.Customer.Destination.Country				= ToISOCountryCode	  									 
					if (BaseCurrency entered)
						invoked.QuotationRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BaseCurrencyRel.ISOCode			 
						invoked.QuotationRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeNum 	= BaseCurrencyRel.ISOCodeNumber	 
						invoked.QuotationRequest.Customer.Destination.CurrencyConversion.Value 					= CurrencyRate		
					if (VATRegistrationNumber entered)
						invoked.QuotationRequest.Customer.TaxRegistration.IsoCountryCode					= DefaultToISOCountry			 
						invoked.QuotationRequest.Customer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber		
						invoked.QuotationRequest.Customer.TaxRegistration.HasPhysicalPresenceIndicator 		= ToHasPhysicalPresenceInd
						if (BuyerAdminDestAddress.StateProvince entered)
							invoked.QuotationRequest.Customer.TaxRegistration.MainDivision					= BuyerAdminDestAddress.StateProvince
					if (BuyerAdminDestTaxCode entered)
						invoked.QuotationRequest.Customer.AdministrativeDestination.TaxAreaId 									= BuyerAdminDestTaxCode							
					if (BuyerAdminDestAddress.Country entered)
						invoked.QuotationRequest.Customer.AdministrativeDestination.StreetAddress1								= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
						invoked.QuotationRequest.Customer.AdministrativeDestination.City 										= BuyerAdminDestAddress.Municipality		  
						invoked.QuotationRequest.Customer.AdministrativeDestination.MainDivision 								= BuyerAdminDestAddress.StateProvince 	 
						invoked.QuotationRequest.Customer.AdministrativeDestination.SubDivision									= BuyerAdminDestAddress.County 			 	
						invoked.QuotationRequest.Customer.AdministrativeDestination.PostalCode 									= BuyerAdminDestAddress.PostalCode 		 
						invoked.QuotationRequest.Customer.AdministrativeDestination.Country 									= BuyerAdminDestAddress.Country 
					if (BuyerAdminDestTaxCode entered
					or  BuyerAdminDestAddress entered)	
						if (BuyerAdminCurrency entered)		 				
							invoked.QuotationRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha = BuyerAdminCurrency 
							invoked.QuotationRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 	= BuyerAdminCurrency 
							invoked.QuotationRequest.Customer.AdministrativeDestination.CurrencyConversion.Value				= BuyerAdminCurrencyRate	
					if (ReceivablesTaxingLocation entered)
						invoked.QuotationRequest.SitusOverride.TaxingLocation 			= ReceivablesTaxingLocation	
					invoked.QuotationRequest.LineItem.IsMulticomponent 					= IsMulticomponent			 
					invoked.QuotationRequest.LineItem.LineItemId 						= LineNumber	 
					invoked.QuotationRequest.LineItem.LineItemNumber					= LineNumber	 	
					invoked.QuotationRequest.LineItem.Usage								= TaxUsageCode			
					invoked.QuotationRequest.LineItem.Product.Value						= ProductTaxCategory
					if (LocalEffectiveDate entered)
						invoked.QuotationRequest.LineItem.TaxDate				 		= LocalEffectiveDate
					else
						invoked.QuotationRequest.LineItem.TaxDate						= EffectiveDate	
					if (ProductClass entered)		
						invoked.QuotationRequest.LineItem.Product.ProductClass			= ProductClass	 	 
					invoked.QuotationRequest.LineItem.Quantity  						= Quantity	
					invoked.QuotationRequest.LineItem.Freight 							= FreightAmount	
					invoked.QuotationRequest.LineItem.TaxIncludedIndicator 				= TaxIncludedIndicator
					if (UnitCost entered
					and Quantity entered)
						invoked.QuotationRequest.LineItem.UnitPrice 					= UnitCost	
					else
						invoked.QuotationRequest.LineItem.ExtendedPrice					= DerivedExtendedPrice	
					if (MaterialCode entered)	
						invoked.QuotationRequest.LineItem.MaterialCode  				= MaterialCode
					if (MaterialOrigin entered)	
						invoked.QuotationRequest.LineItem.MaterialOrigin  				= MaterialOrigin		
					VertexResponse	= result.SEnvelopeVertex
					MyHTTPInfo		= result.MyHTTPInfo			

			return blank
 			
		InvoiceRequest80 is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "InvoiceRequest80,"
			LocalVertexVersionUsed = "Version8"		
			invoke InvoiceCall Invoice80
				resume on error
					WebServiceError = true
					WebServiceErrorMessage = error message	
				invoked.Login.UserName 												= blank	
				invoked.Login.Password 												= blank	
				invoked.Login.TrustedId 											= VertexConfigVersionRel.TrustedId
				invoked.InvoiceRequest.ReturnAssistedParametersIndicator			= VertexConfigRel.ReturnAssistedParameters	 
				invoked.InvoiceRequest.TransactionType 								= OutputTransactionType 	 	 
				invoked.InvoiceRequest.DocumentDate									= InvoiceDate				 		 	 
				invoked.InvoiceRequest.DocumentNumber								= Invoice
				invoked.InvoiceRequest.TransactionId								= UniqueIdOfRelatedObject	  
				invoked.InvoiceRequest.PostingDate									= PostDate	
				invoked.InvoiceRequest.LocationCode							 		= Location			 				
				invoked.InvoiceRequest.ReturnAssistedParametersIndicator			= VertexConfigRel.ReturnAssistedParameters	
				invoked.InvoiceRequest.Currency.IsoCurrencyCodeAlpha										= DefaultFilingCurrency 
				invoked.InvoiceRequest.Currency.IsoCurrencyCodeNum											= DefaultFilingCurrency 
				invoked.InvoiceRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 		= BaseCurrencyRel.ISOCode			 
				invoked.InvoiceRequest.Customer.Destination.CurrencyConversion.IsoCurrencyCodeNum 			= BaseCurrencyRel.ISOCodeNumber	 
				invoked.InvoiceRequest.Customer.Destination.CurrencyConversion.Value 						= CurrencyRate		
				invoked.InvoiceRequest.LineItem.Usage								= TaxUsageCode			
				invoked.InvoiceRequest.LineItem.Product.Value						= ProductTaxCategory	
				invoked.InvoiceRequest.DeliveryTerm									= DeliveryTerms	 
				invoked.InvoiceRequest.Seller.Company						 		= TaxEntity	 	 	 
				invoked.InvoiceRequest.Seller.Division					 			= blank	 
				invoked.InvoiceRequest.Seller.Department							= blank	 
				if (FromTaxCode entered)
					invoked.InvoiceRequest.Seller.PhysicalOrigin.TaxAreaId				= FromTaxCode
				
				if (FromISOCountryCode entered)
					invoked.InvoiceRequest.Seller.PhysicalOrigin.Country				= FromISOCountryCode
				
				if (FromPostalAddress.StateProvince entered)
					invoked.InvoiceRequest.Seller.PhysicalOrigin.MainDivision 			= FromPostalAddress.StateProvince
							 
				if (FromPostalAddress.Country entered)   
					invoked.InvoiceRequest.Seller.PhysicalOrigin.StreetAddress1			= FromPostalAddress.DeliveryAddress.AddressLine1
					invoked.InvoiceRequest.Seller.PhysicalOrigin.City 					= FromPostalAddress.Municipality
					invoked.InvoiceRequest.Seller.PhysicalOrigin.SubDivision			= FromPostalAddress.County
					invoked.InvoiceRequest.Seller.PhysicalOrigin.PostalCode				= FromPostalAddress.PostalCode	
				
				if (FromTaxCode entered							 
				or  FromPostalAddress.Country entered)   
					invoked.InvoiceRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 		= TransactionCurrency 
					invoked.InvoiceRequest.Seller.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 			= TransactionCurrency 
					invoked.InvoiceRequest.Seller.PhysicalOrigin.CurrencyConversion.Value						= FromCurrencyRate	 
				if (POATaxCode entered)
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.TaxAreaId		= POATaxCode		 	 
				if (POAAddress.Country entered)   
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.StreetAddress1	= POAAddress.DeliveryAddress.AddressLine1
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.City 			= POAAddress.Municipality
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.MainDivision 	= POAAddress.StateProvince
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.SubDivision		= POAAddress.County
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.PostalCode		= POAAddress.PostalCode	
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.Country			= POAISOCountryCode  					
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= POACurrencyRel.ISOCode	
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= POACurrencyRel.ISOCodeNumber									
					invoked.InvoiceRequest.Seller.AdministrativeOrigin.CurrencyConversion.Value					= POACurrencyRate	
				
				LocalSellerTaxRegistration = DerivedSellerTaxRegistration
				if (LocalSellerTaxRegistration entered
				and DefaultFromISOCountry entered)						
					invoked.InvoiceRequest.Seller.TaxRegistration.TaxRegistrationNumber 		= LocalSellerTaxRegistration	 
					invoked.InvoiceRequest.Seller.TaxRegistration.IsoCountryCode				= DefaultFromISOCountry	 						 		
					invoked.InvoiceRequest.Seller.TaxRegistration.HasPhysicalPresenceIndicator 	= FromHasPhysicalPresenceInd
					if (FromPostalAddress.StateProvince entered)
						invoked.InvoiceRequest.Seller.TaxRegistration.MainDivision				= FromPostalAddress.StateProvince
				invoked.InvoiceRequest.Customer.CustomerCode.Value					= VendorCustomer	 
				invoked.InvoiceRequest.Customer.Destination.TaxAreaId				= TaxCode			 			
				invoked.InvoiceRequest.Customer.Destination.StreetAddress1			= PostalAddress.DeliveryAddress.AddressLine1
				invoked.InvoiceRequest.Customer.Destination.City 					= PostalAddress.Municipality
				invoked.InvoiceRequest.Customer.Destination.MainDivision 			= PostalAddress.StateProvince
				invoked.InvoiceRequest.Customer.Destination.SubDivision				= PostalAddress.County
				invoked.InvoiceRequest.Customer.Destination.PostalCode				= PostalAddress.PostalCode	
				invoked.InvoiceRequest.Customer.Destination.Country					= ToISOCountryCode   
				if (VATRegistrationNumber entered)
					invoked.InvoiceRequest.Customer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber				
					invoked.InvoiceRequest.Customer.TaxRegistration.IsoCountryCode					= DefaultToISOCountry			 
					invoked.InvoiceRequest.Customer.TaxRegistration.HasPhysicalPresenceIndicator 	= ToHasPhysicalPresenceInd
					if (BuyerAdminDestAddress.StateProvince entered)
						invoked.InvoiceRequest.Customer.TaxRegistration.MainDivision				= BuyerAdminDestAddress.StateProvince
				if (BuyerAdminDestTaxCode entered)
					invoked.InvoiceRequest.Customer.AdministrativeDestination.TaxAreaId 								= BuyerAdminDestTaxCode							
				if (BuyerAdminDestAddress.Country entered)
					invoked.InvoiceRequest.Customer.AdministrativeDestination.StreetAddress1							= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
					invoked.InvoiceRequest.Customer.AdministrativeDestination.City 										= BuyerAdminDestAddress.Municipality		  
					invoked.InvoiceRequest.Customer.AdministrativeDestination.MainDivision 								= BuyerAdminDestAddress.StateProvince 	 
					invoked.InvoiceRequest.Customer.AdministrativeDestination.SubDivision								= BuyerAdminDestAddress.County 			 	
					invoked.InvoiceRequest.Customer.AdministrativeDestination.PostalCode 								= BuyerAdminDestAddress.PostalCode 		 
					invoked.InvoiceRequest.Customer.AdministrativeDestination.Country 									= BuyerAdminDestAddress.Country 
				if (BuyerAdminDestTaxCode entered
				or  BuyerAdminDestAddress entered)	
					if (BuyerAdminCurrency entered)		 				
						invoked.InvoiceRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha = BuyerAdminCurrency 
						invoked.InvoiceRequest.Customer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum   = BuyerAdminCurrency 
						invoked.InvoiceRequest.Customer.AdministrativeDestination.CurrencyConversion.Value				  = BuyerAdminCurrencyRate	
				if (ReceivablesTaxingLocation entered)
					invoked.InvoiceRequest.SitusOverride.TaxingLocation 			= ReceivablesTaxingLocation	
				if (LocalEffectiveDate entered)
					invoked.InvoiceRequest.LineItem.TaxDate				 			= LocalEffectiveDate
				else
					invoked.InvoiceRequest.LineItem.TaxDate							= EffectiveDate	
				invoked.InvoiceRequest.LineItem.GeneralLedgerAccount				= TaxCodeAccount					 
				invoked.InvoiceRequest.LineItem.LineItemNumber						= LineNumber	 	
				invoked.InvoiceRequest.LineItem.Quantity  							= Quantity	
				invoked.InvoiceRequest.LineItem.UnitPrice 							= DerivedExtendedPriceOrUnitCost	 
				invoked.InvoiceRequest.LineItem.ExtendedPrice 						= DerivedExtendedPriceOrUnitCost	 
				invoked.InvoiceRequest.LineItem.TaxIncludedIndicator 				= TaxIncludedIndicator
				if (MaterialCode entered)	
					invoked.InvoiceRequest.LineItem.MaterialCode  				= MaterialCode
				if (MaterialOrigin entered)	
					invoked.InvoiceRequest.LineItem.MaterialOrigin  			= MaterialOrigin		
										
				VertexResponse	= result.SEnvelopeVertex
				MyHTTPInfo		= result.MyHTTPInfo			
				
			return blank		
					
		PurchaseOrderRequest80 is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "PurchaseOrderRequest80,"
			LocalVertexVersionUsed = "Version8"					
			invoke PurchaseOrderCall PurchaseOrderService80
				resume on error
					WebServiceError = true
					WebServiceErrorMessage = error message
				invoked.Login.UserName 														= blank	
				invoked.Login.Password 														= blank	
				invoked.Login.TrustedId 													= VertexConfigVersionRel.TrustedId
				invoked.PurchaseOrderRequest.ReturnAssistedParametersIndicator				= VertexConfigRel.ReturnAssistedParameters	
				invoked.PurchaseOrderRequest.DocumentDate									= InvoiceDate	
				invoked.PurchaseOrderRequest.DocumentNumber									= Invoice	
				invoked.PurchaseOrderRequest.TransactionType 								= ConvertTransactionType	 
				invoked.PurchaseOrderRequest.CalculateVendorTaxIndicator					= CalculateVendorTaxIndicator			
				invoked.PurchaseOrderRequest.LocationCode 									= Location	
				if (DeliveryTerms entered)
					invoked.PurchaseOrderRequest.DeliveryTerm								= DeliveryTerms
				if (DefaultFilingCurrency entered)		 					
					invoked.PurchaseOrderRequest.Currency.IsoCurrencyCodeAlpha				= DefaultFilingCurrency 
					invoked.PurchaseOrderRequest.Currency.IsoCurrencyCodeNum				= DefaultFilingCurrency 
				if (VATRegistrationNumber entered)
					invoked.PurchaseOrderRequest.Buyer.TaxRegistration.IsoCountryCode					= VATRegistrationCountry								
					invoked.PurchaseOrderRequest.Buyer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber
					invoked.PurchaseOrderRequest.Buyer.TaxRegistration.HasPhysicalPresenceIndicator 	= ToHasPhysicalPresenceInd	 
				if (FromVATRegistrationNumber entered)
					invoked.PurchaseOrderRequest.Vendor.TaxRegistration.IsoCountryCode					= FromVATRegistrationCountry 							
					invoked.PurchaseOrderRequest.Vendor.TaxRegistration.TaxRegistrationNumber 			= FromVATRegistrationNumber
					invoked.PurchaseOrderRequest.Vendor.TaxRegistration.HasPhysicalPresenceIndicator 	= FromHasPhysicalPresenceInd	 
				invoked.PurchaseOrderRequest.Vendor.VendorCode.Value		  				= VendorCustomer	
				if (FromTaxCode entered)
					invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.TaxAreaId 			= FromTaxCode						 
				if (FromPostalAddress.Country entered)   
					invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.StreetAddress1		= FromPostalAddress.DeliveryAddress.AddressLine1		 
					invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.City 				= FromPostalAddress.Municipality			 
					invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.MainDivision 		= FromPostalAddress.StateProvince		 
					invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.SubDivision			= FromPostalAddress.County				 			
					invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.PostalCode 			= FromPostalAddress.PostalCode			 				
					invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.Country 				= FromISOCountryCode  
				if (FromTaxCode entered							
				or  FromPostalAddress.Country entered)   
					if (TransactionCurrency entered)
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= TransactionCurrencyRel.ISOCode	
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= TransactionCurrencyRel.ISOCodeNumber				
						invoked.PurchaseOrderRequest.Vendor.PhysicalOrigin.CurrencyConversion.Value					= FromCurrencyRate
				if (POATaxCode entered)
					invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.TaxAreaId 			= POATaxCode						 
				if (POAAddress.Country entered)
					invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.StreetAddress1		= POAAddress.DeliveryAddress.AddressLine1		 
					invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.City 				= POAAddress.Municipality			 
					invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.MainDivision 		= POAAddress.StateProvince	 
					invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.SubDivision		= POAAddress.County			 							
					invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.PostalCode 		= POAAddress.PostalCode		 					
					invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.Country 			= POAAddress.Country	
				if (POATaxCode entered
				or  POAAddress.Country entered)	
					if (POACurrency entered)					
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 		= POACurrencyRel.ISOCode
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 			= POACurrencyRel.ISOCodeNumber		  			     
						invoked.PurchaseOrderRequest.Vendor.AdministrativeOrigin.CurrencyConversion.Value						= POACurrencyRate				
				invoked.PurchaseOrderRequest.Buyer.Company						 			= TaxEntity	 
				if (Exempt entered)
					invoked.PurchaseOrderRequest.Buyer.IsTaxExempt							= IsTaxExempt	 	 
				invoked.PurchaseOrderRequest.Buyer.Division					 				= blank	
				invoked.PurchaseOrderRequest.Buyer.Department								= blank	
				invoked.PurchaseOrderRequest.Buyer.Destination.TaxAreaId 					= TaxCode						 
				invoked.PurchaseOrderRequest.Buyer.Destination.StreetAddress1				= PostalAddress.DeliveryAddress.AddressLine1 
				invoked.PurchaseOrderRequest.Buyer.Destination.City 						= PostalAddress.Municipality 		 
				invoked.PurchaseOrderRequest.Buyer.Destination.MainDivision 				= PostalAddress.StateProvince 	 
				invoked.PurchaseOrderRequest.Buyer.Destination.SubDivision					= PostalAddress.County 			 									
				invoked.PurchaseOrderRequest.Buyer.Destination.PostalCode 					= PostalAddress.PostalCode 		 
				invoked.PurchaseOrderRequest.Buyer.Destination.Country 						= ToISOCountryCode  
				if (BaseCurrency entered)
					invoked.PurchaseOrderRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha  = BaseCurrencyRel.ISOCode				 
					invoked.PurchaseOrderRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeNum 	= BaseCurrencyRel.ISOCodeNumber		  
					invoked.PurchaseOrderRequest.Buyer.Destination.CurrencyConversion.Value 				= CurrencyRate						 				
				if (BuyerAdminDestTaxCode entered)
					invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.TaxAreaId 		= BuyerAdminDestTaxCode						 
				if (BuyerAdminDestAddress entered)
					invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.StreetAddress1	= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
					invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.City 			= BuyerAdminDestAddress.Municipality		 
					invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.MainDivision 	= BuyerAdminDestAddress.StateProvince 	 
					invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.SubDivision	= BuyerAdminDestAddress.County 			 	
					invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.PostalCode 	= BuyerAdminDestAddress.PostalCode 		 
					invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.Country 		= BuyerAdminDestISOCountryCode  
				if (BuyerAdminDestTaxCode entered
				or  BuyerAdminDestAddress entered)	
					if (BuyerAdminCurrency entered)					 			 					
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BuyerAdminCurrency 
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 		= BuyerAdminCurrency 
						invoked.PurchaseOrderRequest.Buyer.AdministrativeDestination.CurrencyConversion.Value					= BuyerAdminCurrencyRate	

				if (PayablesTaxingLocation entered)
					invoked.PurchaseOrderRequest.SitusOverride.TaxingLocation 				= PayablesTaxingLocation	
				if (LocalEffectiveDate entered)
					invoked.PurchaseOrderRequest.LineItem.TaxDate				 		  	= LocalEffectiveDate
				else
					invoked.PurchaseOrderRequest.LineItem.TaxDate							= EffectiveDate	
				invoked.PurchaseOrderRequest.LineItem.LineItemNumber				 		= LineNumber	
				invoked.PurchaseOrderRequest.LineItem.Quantity  							= Quantity					 						
				invoked.PurchaseOrderRequest.LineItem.UnitPrice 							= UnitCost	
				invoked.PurchaseOrderRequest.LineItem.ExtendedPrice 						= DerivedExtendedPrice  
				invoked.PurchaseOrderRequest.LineItem.TaxIncludedIndicator 					= TaxIncludedIndicator
				if (TaxUsageCode entered)
					invoked.PurchaseOrderRequest.LineItem.Usage								= TaxUsageCode			
				if (ProductTaxCategory entered)
					invoked.PurchaseOrderRequest.LineItem.Purchase.Value					= ProductTaxCategory
				if (ProductClass entered)		
					invoked.PurchaseOrderRequest.LineItem.Purchase.PurchaseClass			= ProductClass	 	 		
				if (MaterialCode entered)	
					invoked.PurchaseOrderRequest.LineItem.MaterialCode  					= MaterialCode
				if (MaterialOrigin entered)	
					invoked.PurchaseOrderRequest.LineItem.MaterialOrigin  					= MaterialOrigin		
				VertexResponse 	= result.SEnvelopeVertex
				MyHTTPInfo		= result.MyHTTPInfo			
							
			return blank
				
		AccrualRequest80 is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "AccrualRequest80,"
			LocalVertexVersionUsed = "Version8"					
			invoke AccrualCall Accrual80
				resume on error
					WebServiceError = true
					WebServiceErrorMessage = error message	
				invoked.Login.UserName 													= blank	 
				invoked.Login.Password 													= blank	 
				invoked.Login.TrustedId 												= VertexConfigVersionRel.TrustedId
				invoked.AccrualRequest.ReturnAssistedParametersIndicator				= VertexConfigRel.ReturnAssistedParameters	 
				invoked.AccrualRequest.TransactionId									= UniqueIdOfRelatedObject	 	 
				invoked.AccrualRequest.DocumentDate								 		= InvoiceDate
				invoked.AccrualRequest.DocumentNumber									= Invoice								 			 
				invoked.AccrualRequest.DocumentSequenceId								= VoucherNumber	
				invoked.AccrualRequest.TransactionType 									= ConvertTransactionType	 
				invoked.AccrualRequest.PostToJournal									= PostToJournal		 
				invoked.AccrualRequest.LocationCode 									= Location	
				invoked.AccrualRequest.DeliveryTerm										= DeliveryTerms	 
				invoked.AccrualRequest.Currency.IsoCurrencyCodeAlpha					= DefaultFilingCurrency 
				invoked.AccrualRequest.Currency.IsoCurrencyCodeNum						= DefaultFilingCurrency 
				invoked.AccrualRequest.Vendor.VendorCode.Value		  					= VendorCustomer	
				if (FromTaxCode entered)
					invoked.AccrualRequest.Vendor.PhysicalOrigin.TaxAreaId 				= FromTaxCode						 
				if (FromPostalAddress.Country entered)   
					invoked.AccrualRequest.Vendor.PhysicalOrigin.StreetAddress1			= FromPostalAddress.DeliveryAddress.AddressLine1		 
					invoked.AccrualRequest.Vendor.PhysicalOrigin.City 					= FromPostalAddress.Municipality			 
					invoked.AccrualRequest.Vendor.PhysicalOrigin.MainDivision 			= FromPostalAddress.StateProvince		 
					invoked.AccrualRequest.Vendor.PhysicalOrigin.SubDivision			= FromPostalAddress.County				 			
					invoked.AccrualRequest.Vendor.PhysicalOrigin.PostalCode 			= FromPostalAddress.PostalCode			 				
					invoked.AccrualRequest.Vendor.PhysicalOrigin.Country 				= FromISOCountryCode   			 
				if (FromTaxCode entered							
				or  FromPostalAddress.Country entered)   
					if (TransactionCurrency entered)			
						invoked.AccrualRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= TransactionCurrencyRel.ISOCode			 
						invoked.AccrualRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 		= TransactionCurrencyRel.ISOCodeNumber	 
						invoked.AccrualRequest.Vendor.PhysicalOrigin.CurrencyConversion.Value 					= FromCurrencyRate	 		
				if (FromVATRegistrationNumber entered)			 
					invoked.AccrualRequest.Vendor.TaxRegistration.IsoCountryCode						= DefaultFromISOCountry		 
					invoked.AccrualRequest.Vendor.TaxRegistration.TaxRegistrationNumber 				= FromVATRegistrationNumber	 
					invoked.AccrualRequest.Vendor.TaxRegistration.HasPhysicalPresenceIndicator 			= FromHasPhysicalPresenceInd	 
				if (POATaxCode entered)
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.TaxAreaId 			= POATaxCode
				if (POAAddress entered)							 
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.StreetAddress1		= POAAddress.DeliveryAddress.AddressLine1		 
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.City 				= POAAddress.Municipality			 
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.MainDivision 		= POAAddress.StateProvince	 
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.SubDivision			= POAAddress.County			 						
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.PostalCode 			= POAAddress.PostalCode		 				
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.Country 				= POAISOCountryCode  		 
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 	= POACurrencyRel.ISOCode	
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 	= POACurrencyRel.ISOCodeNumber									
					invoked.AccrualRequest.Vendor.AdministrativeOrigin.CurrencyConversion.Value					= POACurrencyRate	
				invoked.AccrualRequest.Buyer.Company						 			= TaxEntity	 	 	 
				if (Exempt entered)
					invoked.AccrualRequest.Buyer.IsTaxExempt							= IsTaxExempt
				invoked.AccrualRequest.Buyer.Division					 				= blank	 
				invoked.AccrualRequest.Buyer.Department									= blank	 	 
				if (TaxCode entered)
					invoked.AccrualRequest.Buyer.Destination.TaxAreaId 								= TaxCode						 
				invoked.AccrualRequest.Buyer.Destination.StreetAddress1								= PostalAddress.DeliveryAddress.AddressLine1 
				invoked.AccrualRequest.Buyer.Destination.City 										= PostalAddress.Municipality 		 
				invoked.AccrualRequest.Buyer.Destination.MainDivision 								= PostalAddress.StateProvince 	 
				invoked.AccrualRequest.Buyer.Destination.SubDivision								= PostalAddress.County 			 									
				invoked.AccrualRequest.Buyer.Destination.PostalCode 								= PostalAddress.PostalCode 		 
				invoked.AccrualRequest.Buyer.Destination.Country 									= ToISOCountryCode   			 
				invoked.AccrualRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BaseCurrencyRel.ISOCode	 		    
				invoked.AccrualRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeNum 		= BaseCurrencyRel.ISOCodeNumber	 										
				invoked.AccrualRequest.Buyer.Destination.CurrencyConversion.Value					= CurrencyRate	  
				LocalBuyerTaxRegistration = DerivedBuyerTaxRegistration
				if (LocalBuyerTaxRegistration entered
				and DefaultToISOCountry entered)
					invoked.AccrualRequest.Buyer.TaxRegistration.IsoCountryCode						= DefaultToISOCountry								 			 
					invoked.AccrualRequest.Buyer.TaxRegistration.TaxRegistrationNumber 				= LocalBuyerTaxRegistration			  	 
					invoked.AccrualRequest.Buyer.TaxRegistration.HasPhysicalPresenceIndicator 		= ToHasPhysicalPresenceInd			 
				if (BuyerAdminDestTaxCode entered)
					invoked.AccrualRequest.Buyer.AdministrativeDestination.TaxAreaId 		= BuyerAdminDestTaxCode						 
				if (BuyerAdminDestAddress entered)
					invoked.AccrualRequest.Buyer.AdministrativeDestination.StreetAddress1	= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
					invoked.AccrualRequest.Buyer.AdministrativeDestination.City 			= BuyerAdminDestAddress.Municipality		 
					invoked.AccrualRequest.Buyer.AdministrativeDestination.MainDivision 	= BuyerAdminDestAddress.StateProvince 	 
					invoked.AccrualRequest.Buyer.AdministrativeDestination.SubDivision		= BuyerAdminDestAddress.County 			 	
					invoked.AccrualRequest.Buyer.AdministrativeDestination.PostalCode 		= BuyerAdminDestAddress.PostalCode 		 
					invoked.AccrualRequest.Buyer.AdministrativeDestination.Country 			= BuyerAdminDestISOCountryCode  
				if (BuyerAdminDestTaxCode entered
				or  BuyerAdminDestAddress entered)	
					if (BuyerAdminCurrency entered)					 			 					
						invoked.AccrualRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BuyerAdminCurrency 
						invoked.AccrualRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 	= BuyerAdminCurrency 
						invoked.AccrualRequest.Buyer.AdministrativeDestination.CurrencyConversion.Value					= BuyerAdminCurrencyRate	
				if (PayablesTaxingLocation entered)
					invoked.AccrualRequest.SitusOverride.TaxingLocation 				= PayablesTaxingLocation	
				if (LocalEffectiveDate entered)
					invoked.AccrualRequest.LineItem.TaxDate				 				= LocalEffectiveDate
				else
					invoked.AccrualRequest.LineItem.TaxDate								= EffectiveDate	
				invoked.AccrualRequest.LineItem.LineItemNumber				 			= LineNumber					 														
				invoked.AccrualRequest.LineItem.Quantity  								= Quantity					 						
				invoked.AccrualRequest.LineItem.UnitPrice 								= UnitCost	 	
				invoked.AccrualRequest.LineItem.ExtendedPrice 							= DerivedExtendedPrice   	
				invoked.AccrualRequest.LineItem.TaxIncludedIndicator 					= TaxIncludedIndicator
				invoked.AccrualRequest.LineItem.Usage									= TaxUsageCode			
				invoked.AccrualRequest.LineItem.Purchase.Value							= ProductTaxCategory	
				if (MaterialCode entered)	
					invoked.AccrualRequest.LineItem.MaterialCode  						= MaterialCode
				if (MaterialOrigin entered)	
					invoked.AccrualRequest.LineItem.MaterialOrigin  					= MaterialOrigin		
				if (VATProcess
				or RecoverableImpositionType = "VAT")
					if (RecoverableTaxAreaId entered
					and RecoverableJurisLevel entered
					and RecoverableImpositionType entered)
						invoked.AccrualRequest.LineItem.InputTax.TaxingJurisdictionLocation.TaxAreaId	 		= RecoverableTaxAreaId 
						invoked.AccrualRequest.LineItem.InputTax.TaxingJurisdictionLocation.JurisdictionLevel	= RecoverableJurisLevel 
						invoked.AccrualRequest.LineItem.InputTax.TaxingJurisdictionLocation.ImpositionType	 	= RecoverableImpositionType 	
						invoked.AccrualRequest.LineItem.InputTax.InputAmount							 		= VATInputTaxAmount 
					if (BlockingOverridePercent entered)	
						invoked.AccrualRequest.LineItem.InputTax.BlockingOverridePercent  				 		= BlockingOverridePercent
					if (PartialExemptRecvblOvrdPct entered)	
						invoked.AccrualRequest.LineItem.InputTax.PartialExemptRecoverableOverridePercent 		= PartialExemptRecvblOvrdPct
					if (VertexVATType.Import)
						invoked.AccrualRequest.LineItem.InputTax.IsImport									= true 
				if (ReturnedTaxAccrualAccount entered)
					invoked.AccrualRequest.LineItem.GeneralLedgerAccount									= ReturnedTaxAccrualAccount
				else
					invoked.AccrualRequest.LineItem.GeneralLedgerAccount									= TaxCodeAccount	
				if (CommodityCode entered)
					invoked.AccrualRequest.LineItem.CommodityCode	= CommodityCode
							
				VertexResponse 	= result.SEnvelopeVertex
				MyHTTPInfo		= result.MyHTTPInfo			
					
			return blank
				
		InvoiceVerificationRequest80 is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "InvoiceVerificationRequest80,"
			LocalVertexVersionUsed = "Version8"					
			invoke InvoiceVerificationCall InvoiceVerification80
				resume on error
					WebServiceError = true
					WebServiceErrorMessage = error message				
				invoked.Login.UserName 																= blank	
				invoked.Login.Password 																= blank	
				invoked.Login.TrustedId 															= VertexConfigVersionRel.TrustedId
				invoked.InvoiceVerificationRequest.ReturnAssistedParametersIndicator			 	= VertexConfigRel.ReturnAssistedParameters	 
				invoked.InvoiceVerificationRequest.TransactionId									= UniqueIdOfRelatedObject	
				invoked.InvoiceVerificationRequest.DocumentDate								 		= InvoiceDate
				invoked.InvoiceVerificationRequest.DocumentNumber									= Invoice								 				 
				invoked.InvoiceVerificationRequest.TransactionType 									= ConvertTransactionType	 
				invoked.InvoiceVerificationRequest.PostToJournal									= PostToJournal		 
				invoked.InvoiceVerificationRequest.DeliveryTerm										= DeliveryTerms	 
				if (DefaultFilingCurrency entered)
					invoked.InvoiceVerificationRequest.Currency.IsoCurrencyCodeAlpha				= DefaultFilingCurrency 
					invoked.InvoiceVerificationRequest.Currency.IsoCurrencyCodeNum					= DefaultFilingCurrency 
				invoked.InvoiceVerificationRequest.Buyer.Company						 			= TaxEntity	 	 	 
				if (Exempt entered)
					invoked.InvoiceVerificationRequest.Buyer.IsTaxExempt							= IsTaxExempt	
				invoked.InvoiceVerificationRequest.Buyer.Destination.TaxAreaId 						= TaxCode						 
				invoked.InvoiceVerificationRequest.Buyer.Destination.StreetAddress1					= PostalAddress.DeliveryAddress.AddressLine1 
				invoked.InvoiceVerificationRequest.Buyer.Destination.City 							= PostalAddress.Municipality 		 
				invoked.InvoiceVerificationRequest.Buyer.Destination.MainDivision 					= PostalAddress.StateProvince 	 
				invoked.InvoiceVerificationRequest.Buyer.Destination.SubDivision					= PostalAddress.County 			 									
				invoked.InvoiceVerificationRequest.Buyer.Destination.PostalCode 					= PostalAddress.PostalCode 		 
				invoked.InvoiceVerificationRequest.Buyer.Destination.Country 						= ToISOCountryCode  			 
				if (BaseCurrency entered)
					invoked.InvoiceVerificationRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BaseCurrencyRel.ISOCode			
					invoked.InvoiceVerificationRequest.Buyer.Destination.CurrencyConversion.IsoCurrencyCodeNum 		= BaseCurrencyRel.ISOCodeNumber	 
					invoked.InvoiceVerificationRequest.Buyer.Destination.CurrencyConversion.Value 					= CurrencyRate		
				if (VATRegistrationNumber entered)
					invoked.InvoiceVerificationRequest.Buyer.TaxRegistration.IsoCountryCode					= DefaultToISOCountry		
					invoked.InvoiceVerificationRequest.Buyer.TaxRegistration.TaxRegistrationNumber 			= VATRegistrationNumber		
					invoked.InvoiceVerificationRequest.Buyer.TaxRegistration.HasPhysicalPresenceIndicator 	= ToHasPhysicalPresenceInd	
				if (BuyerAdminDestTaxCode entered)
					invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.TaxAreaId 		= BuyerAdminDestTaxCode						 
				if (BuyerAdminDestAddress entered)
					invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.StreetAddress1	= BuyerAdminDestAddress.DeliveryAddress.AddressLine1  
					invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.City 			= BuyerAdminDestAddress.Municipality		 
					invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.MainDivision 	= BuyerAdminDestAddress.StateProvince 	 
					invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.SubDivision		= BuyerAdminDestAddress.County 			 	
					invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.PostalCode 		= BuyerAdminDestAddress.PostalCode 		 
					invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.Country 			= BuyerAdminDestISOCountryCode  
				if (BuyerAdminDestTaxCode entered
				or  BuyerAdminDestAddress entered)	
					if (BuyerAdminCurrency entered)		
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeAlpha 	= BuyerAdminCurrency 
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.CurrencyConversion.IsoCurrencyCodeNum 	= BuyerAdminCurrency 
						invoked.InvoiceVerificationRequest.Buyer.AdministrativeDestination.CurrencyConversion.Value					= BuyerAdminCurrencyRate	
				invoked.InvoiceVerificationRequest.Vendor.VendorCode.Value	  								= VendorCustomer	 
				if (FromTaxCode	entered)
					invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.TaxAreaId 						= FromTaxCode						 
				if (FromPostalAddress.Country entered)   
					invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.StreetAddress1					= FromPostalAddress.DeliveryAddress.AddressLine1		 
					invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.City 							= FromPostalAddress.Municipality			 
					invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.MainDivision 					= FromPostalAddress.StateProvince		 
					invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.SubDivision					= FromPostalAddress.County				 			
					invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.PostalCode 					= FromPostalAddress.PostalCode			 				
					invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.Country 						= FromISOCountryCode  
				if (FromVATRegistrationNumber entered)
					invoked.InvoiceVerificationRequest.Vendor.TaxRegistration.IsoCountryCode				= DefaultFromISOCountry 	 		 
					invoked.InvoiceVerificationRequest.Vendor.TaxRegistration.TaxRegistrationNumber			= FromVATRegistrationNumber
					invoked.InvoiceVerificationRequest.Vendor.TaxRegistration.HasPhysicalPresenceIndicator 	= FromHasPhysicalPresenceInd	
				if (FromTaxCode entered							
				or  FromPostalAddress.Country entered)   
					if (TransactionCurrency entered)
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeAlpha = TransactionCurrencyRel.ISOCode	  	 
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.CurrencyConversion.IsoCurrencyCodeNum 	 = TransactionCurrencyRel.ISOCodeNumber	  										
						invoked.InvoiceVerificationRequest.Vendor.PhysicalOrigin.CurrencyConversion.Value				 = FromCurrencyRate			 
				if (POATaxCode entered)
					invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.TaxAreaId 			= POATaxCode						 
				if (POAAddress.Country entered)
					invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.StreetAddress1		= POAAddress.DeliveryAddress.AddressLine1		 
					invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.City 				= POAAddress.Municipality			 
					invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.MainDivision 		= POAAddress.StateProvince	 
					invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.SubDivision			= POAAddress.County			 							
					invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.PostalCode 			= POAAddress.PostalCode		 					
					invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.Country 				= POAAddress.Country	
				if (POATaxCode entered
				or  POAAddress.Country entered)	
					if (POACurrency entered)					
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeAlpha 		= POACurrencyRel.ISOCode
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.CurrencyConversion.IsoCurrencyCodeNum 		= POACurrencyRel.ISOCodeNumber		  			     
						invoked.InvoiceVerificationRequest.Vendor.AdministrativeOrigin.CurrencyConversion.Value						= POACurrencyRate				
				if (PayablesTaxingLocation entered)
					invoked.InvoiceVerificationRequest.SitusOverride.TaxingLocation 	= PayablesTaxingLocation	
				if (LocalEffectiveDate entered)
					invoked.InvoiceVerificationRequest.LineItem.TaxDate				 	= LocalEffectiveDate
				else
					invoked.InvoiceVerificationRequest.LineItem.TaxDate					= EffectiveDate	
				invoked.InvoiceVerificationRequest.LineItem.LineItemNumber				= LineNumber					 															
				invoked.InvoiceVerificationRequest.LineItem.Quantity  					= Quantity					 					
				invoked.InvoiceVerificationRequest.LineItem.UnitPrice 					= UnitCost			
				invoked.InvoiceVerificationRequest.LineItem.ExtendedPrice 				= DerivedExtendedPrice  
				invoked.InvoiceVerificationRequest.LineItem.TaxIncludedIndicator 		= TaxIncludedIndicator
				invoked.InvoiceVerificationRequest.LineItem.ChargedTax 					= ChargedTaxAmount	
				invoked.InvoiceVerificationRequest.LineItem.Usage						= TaxUsageCode			
				invoked.InvoiceVerificationRequest.LineItem.Purchase.Value				= ProductTaxCategory
				if (ProductClass entered)		
					invoked.InvoiceVerificationRequest.LineItem.Purchase.PurchaseClass	= ProductClass	 
				if (MaterialCode entered)	
					invoked.InvoiceVerificationRequest.LineItem.MaterialCode  			= MaterialCode
				if (MaterialOrigin entered)	
					invoked.InvoiceVerificationRequest.LineItem.MaterialOrigin  		= MaterialOrigin		
					
				VertexResponse 	= result.SEnvelopeVertex
				MyHTTPInfo		= result.MyHTTPInfo			
			
			return blank
				
				
				
		LookupTaxAreas80 is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "LookupTaxAreas80,"
			LocalVertexVersionUsed = "Version8"		
			invoke LookupTaxAreas80 LookupTaxAreas80
				resume on error
					WebServiceError = true
					WebServiceErrorMessage = error message	
				if (TaxEntity not entered)
					invoked.Login.UserName 											= blank	
					invoked.Login.Password 											= blank	
					invoked.Login.TrustedId 										= VertexConfigVersionGroupRel.TrustedId
				else
					invoked.Login.UserName 											= blank	
					invoked.Login.Password 											= blank	
					invoked.Login.TrustedId 										= VertexConfigVersionRel.TrustedId
				invoked.TaxAreaRequest.TaxAreaLookup.AsOfDate 			 			= EffectiveDate	 
				invoked.TaxAreaRequest.TaxAreaLookup.TaxAreaId		 			 	= TaxCode
				invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.StreetAddress1  	= PostalAddress.DeliveryAddress.AddressLine1
				invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.StreetAddress2  	= PostalAddress.DeliveryAddress.AddressLine2					
				invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.City 		 	= PostalAddress.Municipality	
				invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.MainDivision 	= PostalAddress.StateProvince
				invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.SubDivision 		= PostalAddress.County
				invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.PostalCode 		= PostalAddress.PostalCode																					
				invoked.TaxAreaRequest.TaxAreaLookup.PostalAddress.Country	 	 	= ToISOCountryCode   

				VertexResponse				= result.SEnvelopeVertex

						
			return blank
										
				
		EffectiveDateLabel is a LabelField
			"<EffectiveDate>"
		TaxDateLabel is a LabelField
			"<TaxDate>"
		InvoiceDateLabel is a LabelField
			"<InvoiceDate>"
		PaymentDateLabel is a LabelField
			"<PaymentDate>"
		ShipmentDateLabel is a LabelField
			"<ShipmentDate>"
		GeneralLedgerDateLabel is a LabelField
			"<GeneralLedgerDate>"
		TaxPointDateLabel is a LabelField
			"<TaxPointDate>"
		PostDateLabel is a LabelField
			"<PostDate>"	

		VertexVersionText is a DerivedField
			type is MessageField
			return VertexVersionLabel	 
			
		VertexVersionLabel is a LabelField
			"<VertexVersion>"

		SendAddressOrTaxAreaIdLabel is a LabelField		
			"<SendAddressOrTaxAreaId>"

		VertexCallMethodLabel is a LabelField			
			"<TaxEntity.VertexCallMethod>"		
		WarningMessageText1 is a LabelField
			"Warning:CannotUseTaxCode00WithOptionToSendTaxAreaIdOnly.VendorAddressElementNotCreated."
		WarningMessageText2 is a LabelField
			"Warning:CannotUseTaxCode00WithOptionToSendTaxAreaIdOnly.POAAddressElementNotCreated." 
		WarningMessageText3 is a LabelField
			"Warning:CannotUseTaxCode00WithOptionToSendTaxAreaIdOnly.BillToAddressElementNotCreated." 
		RequestFormatedTime is a StringField
			type is Alpha 8
			restricted
			RequestElapsedTimeA6[1:2]
			":"
			RequestElapsedTimeA6[3:4]
			":"
			RequestElapsedTimeA6[5:6]

		RequestElapsedTimeA6 is a StringField
			type is Alpha 6
			restricted
			RequestTimestampDiff

		RequestTimestampDiff is a DerivedField
			type is Time
			restricted
			return RequestStopTimestamp time - RequestStartTimestamp time		

		ResponseFormatedTime is a StringField
			type is Alpha 8
			restricted
			ResponseElapsedTimeA6[1:2]
			":"
			ResponseElapsedTimeA6[3:4]
			":"
			ResponseElapsedTimeA6[5:6]
			
		ResponseElapsedTimeA6 is a StringField
			type is Alpha 6
			restricted
			ResponseTimestampDiff
			
		ResponseTimestampDiff is a DerivedField
			type is Time
			restricted
			return ResponseStopTimestamp time - ResponseStartTimestamp time	

		BuildFormatedTime is a StringField
			type is Alpha 8
			restricted
			BuildElapsedTimeA6[1:2]
			":"
			BuildElapsedTimeA6[3:4]
			":"
			BuildElapsedTimeA6[5:6]
			
		BuildElapsedTimeA6 is a StringField
			type is Alpha 6
			restricted
			BuildTimestampDiff

		BuildTimestampDiff is a DerivedField
			type is Time
			restricted
			return BuildStopTimestamp time - BuildStartTimestamp time	


		FormatedTime is a StringField
			type is Alpha 8
			restricted
			DisplayElapsedTimeA6[1:2]
			":"
			DisplayElapsedTimeA6[3:4]
			":"
			DisplayElapsedTimeA6[5:6]
	
		DisplayElapsedTimeA6 is a StringField
			type is Alpha 6
			restricted
			TimestampDiff
					
		DisplayElapsedTime is a StringField
			type is MessageField
			TimestampDiff

		TimestampDiff is a DerivedField
			type is Time
			return LocalStopTimestamp - LocalStartTimestamp
			
		CalcTaxStartTimeLabel is a LabelField
			"<LocalStartTimestamp>"
			
		CalcTaxStopTimeLabel is a LabelField
			"<LocalStopTimestamp>"

 		DerivedBuildTimeFormated is a DerivedField
			type is Alpha 20
			restricted
			if (BuildStartTimestamp entered
			and BuildElapsedTimeA6[5:6] not entered)
				return LessThan1SecondLabel
			return BuildFormatedTime

 		DerivedRequestTimeFormated is a DerivedField
			type is Alpha 20
			restricted
			if (RequestStartTimestamp entered
			and RequestElapsedTimeA6[5:6] not entered)
				return LessThan1SecondLabel
			return RequestFormatedTime

 		DerivedResponseTimeFormated is a DerivedField
			type is Alpha 15
			restricted
			if (ResponseStartTimestamp entered
			and ResponseElapsedTimeA6[5:6] not entered)
				return LessThan1SecondLabel
			return ResponseFormatedTime
									
		LessThan1SecondLabel  is a LabelField
			"LessThan1Second"


		DerivedVertexLicenseLabel is a DerivedField			
			type is Alpha 40 
			restricted
			if (LocalVertexLicense.Supply
			or ValidateVertexRequest.Quotation)
				return "Supply"
			if (LocalVertexLicense.Procurement
			or  ValidateVertexRequest.PurchaseOrder)		
				return "Procurement"
			return "Both"		 

		FailedLabel is a LabelField
			"Failed:"	
		TimestampLabel is a LabelField
			"Timestamp:"	
		StatusCodeLabel is a LabelField
			"StatusCode:"	
		CallURLLabel is a LabelField
			"CallURL:"			
		DerivedTimestamp is a DerivedField
			type is TimeStamp 
			return current timestamp
					
		DerivedWebserviceUsed is a DerivedField								
			type is Alpha 40 
			if (UserTemplateEnabled)
				return "<!-- XMLHTTP VertexCalculateTaxXX UserTemplate -->"	
			return "<!-- SOAPDII" + VertexRequestExecuted + " -->"			
										
		CaptureXml is a DerivedField	 			 
			type is Alpha 1	
			LocalTrace = LocalTrace + "CaptureXml," 
			initialize CapturedXml
			HttpXmlNotCaptured = false
			CapturedXml = CapturedXml + TimestampLabel + DerivedTimestamp
			CapturedXml = CapturedXml + CallURLLabel + MyHTTPInfo.Url
			CapturedXml = CapturedXml + MyHTTPInfo.RequestBody
			if (MyHTTPInfo.Failed)
				CapturedXml = CapturedXml + FailedLabel + MyHTTPInfo.Failed
				CapturedXml = CapturedXml + StatusCodeLabel + MyHTTPInfo.StatusCode		
			CapturedXml 	= CapturedXml + MyHTTPInfo.ResponseBody
			if (MyHTTPInfo.RequestBody not entered)
				HttpXmlNotCaptured = true
			return blank 
		
		HttpStatusText is a DerivedField	 			 
			type is MessageField
			return HttpStatusCodeLabel	 
			
		HttpStatusCodeLabel is a LabelField
			"HttpStatusCode:<MyHTTPInfo.StatusCode>,"
			
		ParseWebserviceError is a DerivedField	 			 
			type is Alpha 1
			LocalTrace = LocalTrace + "ParseWebserviceError,"
			HttpStatusCode = MyHTTPInfo.StatusCode
			initialize FaultString
			initialize ExceptionType
			initialize RootCause
			ReturnedHTTPInfo = MyHTTPInfo
			if (TaxEntity.ThirdParty.VertexOSeries)	
				if (UserTemplateEnabled										
				or  VertexConfigRel.DefaultVersion.Version[1:1]	= "9")		
					RequestXML	= MyHTTPInfo.RequestBody
					ResponseXML = MyHTTPInfo.ResponseBody	
					if (MyHTTPInfo.StatusCode = 500)						 
						ResponseXML = MyHTTPInfo.ResponseBody				 
						WebServiceErrorMessage = MyHTTPInfo.ResponseBody	 
					CapturedXml = MyHTTPInfo													 
					RootCause   = ResponseXML select "
					ExceptionType = ResponseXML select "
					FaultString = ResponseXML select "
					WebServiceErrorMessage = ResponseXML select "
					if (WebServiceErrorMessage not entered)
						WebServiceErrorMessage = ResponseXML							
					if (TaxConfigurationRel.DisplayWebserviceErrorXml)												 
						WebServiceErrorMessage = HttpStatusText + FaultString + RequestXML + ResponseXML
				else	
					invoke ParseError VertexErrorParser 
						invoked.ErrorResponse = MyHTTPInfo.ResponseBody 
						MyVertexError = result.VertexEnvelopeError	 
					
					for each MyVertexError.VertexEnvelopeErrorBody set
						for each each.VertexEnvelopeErrorBodyFault set
							WebServiceErrorMessage = each.Faultstring 
							for each each.VertexEnvelopeErrorBodyFaultDetail set
								for each each.VertexEnvelopeErrorBodyFaultDetailException set
									if (WebServiceErrorMessage not entered)
										WebServiceErrorMessage = each.RootCause
									ExceptionType = each.ExceptionType
			else																
			if (TaxEntity.ThirdParty.Sabrix) 									
				HttpStatusCode = MyHTTPInfo.StatusCode							
				if (OneSourceVersionType.Generic)
					HttpStatusCode 		= MyHTTPInfo.StatusCode
					if (MyHTTPInfo.StatusCode = 500)							
						ResponseXML = MyHTTPInfo.ResponseBody					
						WebServiceErrorMessage = MyHTTPInfo.ResponseBody		
					CapturedXml = MyHTTPInfo	
					return blank			
				if (WebServiceError)
					LocalContinue = true 										
				else															
					if (WebServiceErrorMessage not entered)						
						WebServiceErrorMessage = MyHTTPInfo.ResponseBody		
				if (ProcessResponseUsingXpath									
				or  ProcessResponseUsingPartialXpath)							
					return blank												
				invoke ParseError OneSourceErrorParser 							
					invoked.ErrorResponse = MyHTTPInfo.ResponseBody 			
					MyOneSourceError = result.OneSourceEnvelopeError			
				
				for each MyOneSourceError.ErrorOutdataType set	 				
					for each each.ErrorOutdataTypeREQUESTSTATUS set				
						SuccessStatus = each.ISSUCCESS							
						for each each.ErrorOutdataTypeREQUESTSTATUSERROR set	
							SabrixReturnMessage = each.DESCRIPTION				
							SabrixErrorLocation	= each.ERRORLOCATIONPATH		
							SabrixErrorCode		= each.CODE						
							if (WebServiceErrorMessage not entered)				
								WebServiceErrorMessage = each.DESCRIPTION		
																							
			return blank 					
		DerivedAsOfDate is a DerivedField
			type is Date
			restricted
			return DateAlpha8
			
		DateAlpha8 is a DerivedField
			type is Alpha 8
			restricted
			return (LocalConvertDate - "-")		

		EffectiveDateAlpha10 is a StringField	  
			type is Alpha 10
			EffectiveDateAlpha8[1:4]
			"-"
			EffectiveDateAlpha8[5:6]
			"-"
			EffectiveDateAlpha8[7:8]	
			
		EffectiveDateAlpha8 is a DerivedField
			type is Alpha 8
			return EffectiveDate	
			
		TaxDateAlpha10 is a StringField	  
			type is Alpha 10
			TaxDateAlpha8[1:4]
			"-"
			TaxDateAlpha8[5:6]
			"-"
			TaxDateAlpha8[7:8]	
			
		TaxDateAlpha8 is a DerivedField
			type is Alpha 8
			return TaxDate			

		DateAlpha10 is a StringField	  
			type is Alpha 10
			ConvertDateAlpha8[1:4]
			"-"
			ConvertDateAlpha8[5:6]
			"-"
			ConvertDateAlpha8[7:8]	
			
		ConvertDateAlpha8 is a DerivedField
			type is Alpha 8
			return LocalConvertDate		

		BadDateAlpha8 is a DerivedField			
			type is Alpha 8
			return "19000101"	

		PointOfTitleTransferValue is a DerivedField			
			type is AlphaUpper 1
			if (PointOfTitleTransfer.Destination)
				return "D"
			if (PointOfTitleTransfer.Origin)
				return "O"
			if (PointOfTitleTransfer.InTransit)
				return "I"				
			return blank	

		LoadDefaultValues is a DerivedField
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadDefaultValues,"
			LocalExecuteReturnBlank =  LoadGlobalDefaults
			if (LocalErrorNumber entered)
				LocalExecuteReturnBlank = CreateTaxToLogFile
				return
			ReturnAssistedParametersIndicator = VertexConfigRel.ReturnAssistedParameters
			if (LocalVertexRequest not entered)
				LocalVertexRequest = "Q"
			if (VertexConfigVersionGroupRel.SecuredTrustedId entered)
				LocalTrustedId = VertexConfigVersionGroupRel.SecuredTrustedId	
			else
				LocalTrustedId = VertexConfigVersionGroupRel.VertexEncryptedTrustedId	

			if (VertexConfigVersionGroupRel.SecuredTrustedId entered)					
				PasswordTypeUsed = 1   
			else	
				PasswordTypeUsed = 0   
							
			if (LocalVertexRequest.QuotationRequest																 
			or  LocalVertexRequest.InvoiceRequest)	
				TaxingLocation = ReceivablesTaxingLocation 																 
			if (LocalVertexRequest.AccrualRequest																	 
			or  LocalVertexRequest.PurchaseOrderRequest															 
			or  LocalVertexRequest.InvoiceVerificationRequest)
				TaxingLocation = PayablesTaxingLocation 	
			
			if (TaxEntity.ThirdParty.VertexOSeries
			and VertexConfigRel.DefaultVersion.Version[1:1]	= "7")
				if  (UserTemplateEnabled)									
					VertexVersion = 1			
				else
					VertexVersion = 0
			else		
			if (TaxEntity.ThirdParty.VertexOSeries
			and VertexConfigRel.DefaultVersion.Version[1:1]	= "8")
				VertexVersion = 2
			else
			if (TaxEntity.ThirdParty.VertexOSeries
			and VertexConfigRel.DefaultVersion.Version[1:1]	= "9")
				VertexVersion = 3
			else
				VertexVersion = 0	
						
			return blank
						
	    VertexCalculateTaxXml is a DerivedField	  												
	        type is XMLDocument
			Trigger = LoadDefaultValues
			
			BuildStartTimestamp = DerivedTimestamp time	
			if (CallingModule = "ProcessTaxHistory")
				VertexCalculateTaxXml = template.VertexCalculateTaxHistory90 document for this instance			
			else
				VertexCalculateTaxXml = template.VertexCalculateTax90 document for this instance 				
			if (LocalVertexRequest.QuotationRequest)																 
				VertexCalculateTaxXml select "
			if (LocalVertexRequest.InvoiceRequest)																	 
				VertexCalculateTaxXml select "
			if (LocalVertexRequest.AccrualRequest)																	 
				VertexCalculateTaxXml select "
			if (LocalVertexRequest.PurchaseOrderRequest)															 
				VertexCalculateTaxXml select "
			if (LocalVertexRequest.InvoiceVerificationRequest)															 
				VertexCalculateTaxXml select "
		
			BuildStopTimestamp = DerivedTimestamp time
			
	
		DerivedVertexEnvelopeLoginXml is a DerivedField	  
			type is XMLDocument	
			if (ValidateConnection)	
				LocalTrustedId	= PassedInTrustedId
				initialize SecuredTrustedId
				SecuredTrustedId = VertexConfigVersionGroupRel.SecuredTrustedId		
			else	
				LocalTrustedId	= VertexConfigVersionGroupRel.TrustedId
				SecuredTrustedId = VertexConfigVersionGroupRel.SecuredTrustedId	
				
			initialize LocalVertexEnvelopeXml 
			LocalVertexEnvelopeXml = "<urn:Login>"
			if (IUserName entered)		
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<UserName>" + IUserName + "</UserName>"						
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<Password>" + IPassword + "</Password>"	
			else
			if (SecuredTrustedId entered)
				PasswordTypeUsed = 1
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<TrustedId>" + SecuredTrustedId + "</TrustedId>"	
			else
				PasswordTypeUsed = 0
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<TrustedId>" + LocalTrustedId + "</TrustedId>"	
							
			LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "</urn:Login>"
			return LocalVertexEnvelopeXml				
		

		LoadOutputTaxRate is a DerivedField		 	 
			type is Alpha 1
			restricted
			if (LocalVertexLicense.Procurement			
			or  ValidateVertexRequest.PurchaseOrder)
				DistLine = ResponseXML select "
		 	else
				DistLine = ResponseXML select "
			DisplayMonitor = DisplayMonitor + "CalcTax[9314]-DistLine:" +  DistLine	+ "<br>" 	 
			NumberOfTaxesReturned = DistLine select "count(/LineItem/Taxes)" 
			JurisSeq = 1								
			while (JurisSeq <= NumberOfTaxesReturned)
				OutputTaxRate += DistLine select "/LineItem/Taxes[<JurisSeq>]/EffectiveRate"
				increment JurisSeq
			DisplayMonitor = DisplayMonitor + "CalcTax[9320]OutputTaxRate:" +  OutputTaxRate + "<br>" 	 
			return blank
						
		ValidateVertexConnection is a DerivedField		 	 
			type is Alpha 1
			restricted
			LocalErrorCategory 		= "TXQNT"
			ValidateConnection 		= true
			TaxableAmount 	   		= 100.00
			TaxCode 		   	  	= "241231070"	

			if (VertexConfigVersionGroupRel.SecuredTrustedId entered)
				PasswordTypeUsed = 1   
			else
				PasswordTypeUsed = 0   
			LocalVertexLicense   = VertexConfigVersionGroupRel.VertexLicense					
			if (LocalVertexLicense.Procurement
			or ValidateVertexRequest.PurchaseOrder)
				LocalVertexRequest 		= "P"
				OutputTransactionType 	= "PURCHASE"
			else
				LocalVertexRequest 		= "Q"
				OutputTransactionType 	= "SALE"	
			
			VertexAccessType = VertexConfigVersionGroupRel.VertexAccessType  
			if (VertexAccessType.OAuth)
				invoke VertexTemplate90 VertexCalculateTax90OAuth	
						resume on error										 
							WebServiceError = true							 
							WebServiceErrorMessage = error message			 			
						invoked.Request					= VertexCalculateTaxXml
						ResponseXML 					= result.Response
						MyHTTPInfo						= result.MyHTTPInfo				 	
			else									
				invoke VertexTemplate90 VertexCalculateTax90		 	
					resume on error										  
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= ValidateVertexConnectionXml 	 
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo		
			
			ReturnedHTTPInfo					= MyHTTPInfo			
			initialize HttpStatusCode	
			initialize CheckHttpStatusCode	
			CheckHttpStatusCode = MyHTTPInfo.StatusCode					
			if (MyHTTPInfo.Failed
			or WebServiceError)
				WebServiceError = true	
				if (WebServiceErrorMessage not entered)
					WebServiceErrorMessage = CaptureXml
				Trigger = CaptureXml												
				IsSuccess = false
				WebServiceErrorMessage = ResponseXML
				CapturedWebserviceError = CapturedWebserviceError + "***************[CalculateTax.field]****************************" + "<br>" 
				CapturedWebserviceError = CapturedWebserviceError + "CheckHttpStatusCode............:" + CheckHttpStatusCode          + "<br>" 
				CapturedWebserviceError = CapturedWebserviceError + "WebServiceError................:" + WebServiceError              + "<br>"
				CapturedWebserviceError = CapturedWebserviceError + "MyHTTPInfo.Failed..............:" + MyHTTPInfo.Failed            + "<br>"
				CapturedWebserviceError = CapturedWebserviceError + "MyHTTPInfo.StatusCode..........:" + MyHTTPInfo.StatusCode        + "<br>" 
				CapturedWebserviceError = CapturedWebserviceError + "CheckHttpStatusCode.ClientError:" + CheckHttpStatusCode.ClientError + "<br>"  
				CapturedWebserviceError = CapturedWebserviceError + "ResponseXML....................:" + ResponseXML + "<br>" 
				CapturedWebserviceError = CapturedWebserviceError + "RequestXML.....................:" + ResponseXML + "<br>" 			   
				DisplayMonitor = DisplayMonitor + CapturedWebserviceError 
			else
				IsSuccess = true
				RequestXML = ValidateVertexConnectionXml	
				CapturedXml = RequestXML + ResponseXML	  
				if (LocalVertexLicense.Procurement			
				or  ValidateVertexRequest.PurchaseOrder)
					ReturnedTotalTax = ResponseXML select "
					OutputGeoCode 	 = ResponseXML select "
					Trigger = LoadOutputTaxRate 
				else	
					Trigger = LoadOutputTaxRate
					ReturnedTotalTax = ResponseXML select "
					OutputGeoCode 	 = ResponseXML select "

			return blank		

 		LoadTrustedId is a DerivedField	  	
	        type is Alpha 1
	        default label is untranslatable
			restricted	
			LocalErrorCategory = "TXQNT"		
			if (VertexConfigVersionGroupRel.SecuredTrustedId entered)
				PasswordTypeUsed = 1   
				LocalTrustedId = PassedInTrustedId	
			else
				LocalTrustedId = PassedInTrustedId	
				PasswordTypeUsed = 0   
			return blank
						
	    ValidateVertexConnectionXml is a DerivedField	  												
	        type is XMLDocument
			restricted
			Trigger = LoadTrustedId

			LocalVertexLicense = VertexConfigVersionGroupRel.VertexLicense		

			ValidateVertexConnectionXml = template.VertexCalculateTax90 document for this instance 
			if (LocalVertexLicense.Procurement									
			or ValidateVertexRequest.PurchaseOrder)	
				ValidateVertexConnectionXml select "
			else																
				ValidateVertexConnectionXml select "
			
		QuotationRequestToValidateConnection is a DerivedField  
			type is XMLDocument	
			restricted	 
			initialize LocalXml

			LocalXml = BeginQuotationRequestTag
			
			LocalConvertDate = current corporate date
			LocalXml = LocalXml + " documentDate=" + DoubleQuote + DateAlpha10 + DoubleQuote
			LocalXml = LocalXml + " documentNumber=" + DoubleQuote + "ValidateConnection" + DoubleQuote				
			LocalXml = LocalXml + " transactionType=" + DoubleQuote + "SALE" + DoubleQuote			
			LocalXml = LocalXml + ">"									 

			if (ValidationPostalAddress.Country not entered)			
				LocalXml = LocalXml + "<Customer>"
				LocalXml = LocalXml + "<Destination" + " taxAreaId=" + DoubleQuote + "241231070" + DoubleQuote + EndTag  	 
				LocalXml = LocalXml + "</Destination>"		 
				LocalXml = LocalXml + "</Customer>" 	 
			else
				LocalXml = LocalXml + "<Customer>"
				LocalXml = LocalXml + "<Destination>"			
				if (ValidationPostalAddress.DeliveryAddress.AddressLine1 entered)
					LocalXml = LocalXml + "<StreetAddress1>" + ValidationPostalAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (ValidationPostalAddress.Municipality entered)
					LocalXml = LocalXml + "<City>" + ValidationPostalAddress.Municipality + "</City>"						
				if (ValidationPostalAddress.StateProvince entered)
					LocalXml = LocalXml + "<MainDivision>" + ValidationPostalAddress.StateProvince + "</MainDivision>"	
				if (ValidationPostalAddress.County entered)
					LocalXml = LocalXml + "<SubDivision>" + ValidationPostalAddress.County + "</SubDivision>"							
				if (ValidationPostalAddress.PostalCode entered)
					LocalXml = LocalXml + "<PostalCode>" + ValidationPostalAddress.PostalCode + "</PostalCode>"					
				LocalXml = LocalXml + "<Country>" + ValidationPostalAddress.Country + "</Country>"	
				
				LocalXml = LocalXml + "</Destination>"			
				LocalXml = LocalXml + "</Customer>" 			

			LocalXml = LocalXml + BeginLineItemTag				
			LocalXml = LocalXml + " lineItemNumber=" + DoubleQuote + "1" + DoubleQuote
			LocalXml = LocalXml + EndAttributeTag	
			LocalAmount = 100.00
			LocalXml = LocalXml + "<ExtendedPrice>" + DerivedAmountNoComma + "</ExtendedPrice>" 	
			LocalXml = LocalXml + EndLineItemTag			 
			
			LocalXml = LocalXml + EndQuotationRequestTag
			
			return LocalXml

		PurchaseOrderRequestToValidateConnection is a DerivedField  
			type is XMLDocument	
			restricted	 
			initialize LocalXml
			LocalTrigger = LoadValidationAddress

			LocalXml = "<PurchaseOrderRequest"
			
			LocalConvertDate = current corporate date
			LocalXml = LocalXml + " documentDate=" + DoubleQuote + DateAlpha10 + DoubleQuote
			LocalXml = LocalXml + " documentNumber=" + DoubleQuote + "ValidateConnection" + DoubleQuote				
			LocalXml = LocalXml + " transactionType=" + DoubleQuote + "PURCHASE" + DoubleQuote	
			if (ReturnAssistedParametersIndicator)
				LocalXml = LocalXml + " returnAssistedParametersIndicator=" + DoubleQuote + ReturnAssistedParametersIndicator + DoubleQuote				
			LocalXml = LocalXml + ">"									 

			if (ValidationPostalAddress.Country not entered)
				LocalXml = LocalXml + "<Buyer>"
				LocalXml = LocalXml + "<Destination" + " taxAreaId=" + DoubleQuote + "241231070" + DoubleQuote + EndTag  	 
				LocalXml = LocalXml + "</Destination>"		 
				LocalXml = LocalXml + "</Buyer>" 	 
			else
				LocalXml = LocalXml + "<Buyer>"
				LocalXml = LocalXml + "<Destination>"			
				if (ValidationPostalAddress.DeliveryAddress.AddressLine1 entered)
					LocalXml = LocalXml + "<StreetAddress1>" + ValidationPostalAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (ValidationPostalAddress.Municipality entered)
					LocalXml = LocalXml + "<City>" + ValidationPostalAddress.Municipality + "</City>"						
				if (ValidationPostalAddress.StateProvince entered)
					LocalXml = LocalXml + "<MainDivision>" + ValidationPostalAddress.StateProvince + "</MainDivision>"	
				if (ValidationPostalAddress.County entered)
					LocalXml = LocalXml + "<SubDivision>" + ValidationPostalAddress.County + "</SubDivision>"							
				if (ValidationPostalAddress.PostalCode entered)
					LocalXml = LocalXml + "<PostalCode>" + ValidationPostalAddress.PostalCode + "</PostalCode>"					
				LocalXml = LocalXml + "<Country>" + ValidationPostalAddress.Country + "</Country>"	
				
				LocalXml = LocalXml + "</Destination>"			
				LocalXml = LocalXml + "</Buyer>" 			
				
			LocalXml = LocalXml + BeginLineItemTag				
			LocalXml = LocalXml + " lineItemNumber=" + DoubleQuote + "1" + DoubleQuote
			LocalXml = LocalXml + EndAttributeTag	
			
			LocalAmount = 100.00
			LocalXml = LocalXml + "<ExtendedPrice>" + DerivedAmountNoComma + "</ExtendedPrice>" 	
			LocalXml = LocalXml + EndLineItemTag			 
			
			LocalXml = LocalXml + "</PurchaseOrderRequest>"	
			
			return LocalXml			
		LoadValidationAddress is a DerivedField	
			type is Alpha 1
			restricted
			if (ValidationPostalAddress.Country not entered)
				ValidationPostalAddress.DeliveryAddress.AddressLine1 = "380 Saint Peter St."  
				ValidationPostalAddress.Country 					 = "US" 			
				ValidationPostalAddress.Municipality 				 = "Saint Paul"	
				ValidationPostalAddress.StateProvince				 = "MN" 			
				ValidationPostalAddress.County						 = "Ramsey" 		
				ValidationPostalAddress.PostalCode					 = "55102" 		
			return blank			
						
		CallVertexCalculateTaxUT is a DerivedField	
			type is Alpha 1 
			LocalTrace = LocalTrace + "CallVertexCalculateTaxUT,"
			LocalVertexVersionUsed = "Version9"
			ProcessResponseUsingPartialXpath = true
			LocalExecuteReturnBlank = DoVertexDefaulting
			if (SendMultLineItems													 
			and TaxLineItemsRel exist)	
				Trigger = ValidateTaxLineItemData
				if (LocalErrorNumber entered)
					return blank
			if (InputVertexRequest entered)
				LocalVertexRequest = InputVertexRequest
			OutputTransactionType = ConvertTransactionType		
			if (LocalVertexRequest not entered)
				LocalVertexRequest = "Q"
				Continue = true
				Trigger = QuotationRequestUT						 
			else
			if (LocalVertexRequest.QuotationRequest)
				Trigger = QuotationRequestUT						 
			else
			if (LocalVertexRequest.InvoiceRequest)
				Trigger = InvoiceRequestUT				
			else
			if (LocalVertexRequest.AccrualRequest)
				Trigger = AccrualRequestUT				 	
			else
			if (LocalVertexRequest.PurchaseOrderRequest)
				Trigger = PurchaseOrderRequestUT		 	
			else
			if (LocalVertexRequest.InvoiceVerificationRequest)
				Trigger = InvoiceVerificationRequestUT

			if (CreateOutputUserFieldFile)
				if (SendMultLineItems					
				and TaxLineItemsRel exist)				
					SkipThis = true						
				else	
					Trigger = CreateOutputFlexibleFieldsForInvoice 
			
			return blank
			
		BeginQuotationRequestTag is a StringField
            type is XMLDocument
            "<QuotationRequest"
		EndQuotationRequestTag is a StringField
            type is XMLDocument
            "</QuotationRequest>"			

		DerivedQuotationRequest is a DerivedField	 
			type is XMLDocument	
			initialize LocalXml 
			LocalXml = BeginQuotationRequestTag

			
			LocalXml = LocalXml + DerivedTransactionXml						 
			
			LocalXml = LocalXml + DerivedSellerAddress
			LocalXml = LocalXml + DerivedDestAddress	
			if (TaxingLocation entered) 
				LocalXml = LocalXml + DerivedTaxingLocation	 
				
			if (SendMultLineItems													 
			and TaxLineItemsRel exist)	
				LocalXml = LocalXml + DerivedMulipleLineItems
				if (TotalLineItemsProcessed = 0)	
					LocalXml = LocalXml + DerivedSupplyLineItems					
			else	
				LocalXml = LocalXml + DerivedSupplyLineItems						
			LocalXml = LocalXml + EndQuotationRequestTag
			return LocalXml

		BeginInvoiceRequestTag is a StringField
            type is XMLDocument
            "<InvoiceRequest"
		EndInvoiceRequestTag is a StringField
            type is XMLDocument
            "</InvoiceRequest>"			

		DerivedInvoiceRequest is a DerivedField	 
			type is XMLDocument	
			initialize LocalXml 
			LocalXml = BeginInvoiceRequestTag
			
			LocalXml = LocalXml + DerivedTransactionXml						
			

			LocalXml = LocalXml + DerivedSellerAddress
			LocalXml = LocalXml + DerivedDestAddress	
			if (TaxingLocation entered) 
				LocalXml = LocalXml + DerivedTaxingLocation	 
				
			if (SendMultLineItems													 
			and TaxLineItemsRel exist)	
				LocalXml = LocalXml + DerivedMulipleLineItems
				if (TotalLineItemsProcessed = 0)	
					LocalXml = LocalXml + DerivedSupplyLineItems				
			else	
				LocalXml = LocalXml + DerivedSupplyLineItems						 		
			LocalXml = LocalXml + EndInvoiceRequestTag
			return LocalXml

		DerivedTransactionXml is a DerivedField	
			type is XMLDocument	
			initialize LocalTransactionXml 
			
			if (Invoice entered)
				LocalTransactionXml = LocalTransactionXml + " documentNumber=" + DoubleQuote + Invoice + DoubleQuote	
			if (DocumentType entered) 
				LocalTransactionXml = LocalTransactionXml + " documentType=" + DoubleQuote + DocumentType + DoubleQuote	
			if (Location entered)
				LocalTransactionXml = LocalTransactionXml + " locationCode=" + DoubleQuote + Location + DoubleQuote					
			if (PostDate entered)	
				LocalConvertDate = PostDate																				
				LocalTransactionXml = LocalTransactionXml + " postingDate=" + DoubleQuote + DateAlpha10 + DoubleQuote	
			if (DeliveryTerms entered)
				LocalTransactionXml = LocalTransactionXml + " deliveryTerm=" + DoubleQuote + DeliveryTerms + DoubleQuote	
			if (InvoiceDate entered)
				LocalConvertDate = InvoiceDate
				LocalTransactionXml = LocalTransactionXml + " documentDate=" + DoubleQuote + DateAlpha10 + DoubleQuote	
			if (ReturnAssistedParametersIndicator)
				LocalTransactionXml = LocalTransactionXml + " returnAssistedParametersIndicator=" + DoubleQuote + ReturnAssistedParametersIndicator + DoubleQuote	
			if (OutputTransactionType entered)
				LocalTransactionXml = LocalTransactionXml + " transactionType=" + DoubleQuote + OutputTransactionType + DoubleQuote	

			if (LocalVertexRequest.PurchaseOrderRequest)
				if (CalculateVendorTaxIndicator entered)																										
					LocalTransactionXml = LocalTransactionXml + " calculateVendorTaxIndicator=" + DoubleQuote + CalculateVendorTaxIndicator + DoubleQuote		
			
			if (LocalVertexRequest.AccrualRequest
			and PostToJournal)	
				LocalTransactionXml = LocalTransactionXml + " postToJournal=" + DoubleQuote + PostToJournal + DoubleQuote	
			if (LocalVertexRequest.InvoiceVerificationRequest)	
				LocalTransactionXml = LocalTransactionXml + " postToJournal=" + DoubleQuote + "false" + DoubleQuote
			
			LocalTransactionXml = LocalTransactionXml + ">"

			if (BaseCurrency entered)
				LocalTransactionXml = LocalTransactionXml + " <Currency isoCurrencyCodeAlpha=" + DoubleQuote + BaseCurrency + DoubleQuote + " isoCurrencyCodeNum=" + DoubleQuote + BaseCurrencyRel.ISOCodeNumber + DoubleQuote + "/>"					
				
			return LocalTransactionXml  


		DerivedDestAddress is a DerivedField	
			type is XMLDocument	
			initialize LocalDestAddressXml 

			if (SendAddressOrTaxAreaId.AddressOnly		  
			or  SendAddressOrTaxAreaId.Both)
				LocalLoadAddress = PostalAddress
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	 
			or  SendAddressOrTaxAreaId.Both)	
				LocalLoadTaxCode = TaxCode				
			if (LocalLoadTaxCode not entered			 
			and LocalLoadAddress.Country not entered)	 
				return blank								 	

			LocalDestAddressXml = "<Customer>"
			if (Vendor entered)		
				LocalDestAddressXml = LocalDestAddressXml + "<CustomerCode>" + Vendor + "</CustomerCode>"						
			else
			if (Customer entered)				
				LocalDestAddressXml = LocalDestAddressXml + "<CustomerCode>" + Customer + "</CustomerCode>"		
			if (LocalLoadTaxCode not entered)
				LocalDestAddressXml = LocalDestAddressXml + "<Destination>"
			else	
				LocalDestAddressXml = LocalDestAddressXml + "<Destination" + " taxAreaId=" + DoubleQuote + LocalLoadTaxCode + DoubleQuote + EndTag  
			if (LocalLoadAddress.Country entered)
				if (LocalLoadAddress.DeliveryAddress.AddressLine1 entered)
					LocalDestAddressXml = LocalDestAddressXml + "<StreetAddress1>" + LocalLoadAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (LocalLoadAddress.Municipality entered)
					LocalDestAddressXml = LocalDestAddressXml + "<City>" + LocalLoadAddress.Municipality + "</City>"						
				if (LocalLoadAddress.StateProvince entered)
					LocalDestAddressXml = LocalDestAddressXml + "<MainDivision>" + LocalLoadAddress.StateProvince + "</MainDivision>"	
				if (LocalLoadAddress.County entered)
					LocalDestAddressXml = LocalDestAddressXml + "<SubDivision>" + LocalLoadAddress.County + "</SubDivision>"							
				if (LocalLoadAddress.PostalCode entered)
					LocalDestAddressXml = LocalDestAddressXml + "<PostalCode>" + LocalLoadAddress.PostalCode + "</PostalCode>"					
				LocalDestAddressXml = LocalDestAddressXml + "<Country>" + LocalLoadAddress.Country + "</Country>"	
			
			if (LocalLoadTaxCode entered
			or LocalLoadAddress.Country entered)
				if (BaseCurrency entered)
					LocalDestAddressXml = LocalDestAddressXml + " <CurrencyConversion isoCurrencyCodeAlpha=" + DoubleQuote + BaseCurrency + DoubleQuote + " isoCurrencyCodeNum=" + DoubleQuote + BaseCurrencyRel.ISOCodeNumber + DoubleQuote + ">"	+ CurrencyRate + "</CurrencyConversion>"	
			LocalDestAddressXml = LocalDestAddressXml + "</Destination>"
			LocalDestAddressXml = LocalDestAddressXml + DerivedAdminDestAddress		 	
			LocalDestAddressXml = LocalDestAddressXml + DerivedToTaxRegistration		 
			LocalDestAddressXml = LocalDestAddressXml + "</Customer>" 			
			return LocalDestAddressXml  
			
		DerivedAdminDestAddress is a DerivedField	
			type is XMLDocument	
			initialize LocalXmlString

			initialize LocalLoadTaxCode
			initialize LocalLoadAddress
			if (SendAddressOrTaxAreaId.AddressOnly		  
			or  SendAddressOrTaxAreaId.Both)
				LocalLoadAddress = BuyerAdminDestAddress
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	 
			or  SendAddressOrTaxAreaId.Both)	
				LocalLoadTaxCode = BuyerAdminDestTaxCode				
			if (LocalLoadTaxCode not entered			 
			and LocalLoadAddress.Country not entered)	 
				return blank								 	

			if (LocalLoadTaxCode not entered				
			and LocalLoadAddress.Country not entered)		
				return blank								

			if (LocalLoadTaxCode not entered)
				LocalXmlString = LocalXmlString + "<AdministrativeDestination>"
			else	
				LocalXmlString = LocalXmlString + "<AdministrativeDestination" + " taxAreaId=" + DoubleQuote + LocalLoadTaxCode + DoubleQuote + EndTag   	
			if (LocalLoadAddress.Country entered)
				if (LocalLoadAddress.DeliveryAddress.AddressLine1 entered)
					LocalXmlString = LocalXmlString + "<StreetAddress1>" + LocalLoadAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (LocalLoadAddress.Municipality entered)
					LocalXmlString = LocalXmlString + "<City>" + LocalLoadAddress.Municipality + "</City>"						
				if (LocalLoadAddress.StateProvince entered)
					LocalXmlString = LocalXmlString + "<MainDivision>" + LocalLoadAddress.StateProvince + "</MainDivision>"	
				if (LocalLoadAddress.County entered)
					LocalXmlString = LocalXmlString + "<SubDivision>" + LocalLoadAddress.County + "</SubDivision>"							
				if (LocalLoadAddress.PostalCode entered)
					LocalXmlString = LocalXmlString + "<PostalCode>" + LocalLoadAddress.PostalCode + "</PostalCode>"					
				LocalXmlString = LocalXmlString + "<Country>" + LocalLoadAddress.Country + "</Country>"		

			if (LocalLoadTaxCode entered
			or  LocalLoadAddress.Country entered)
				if (BuyerAdminCurrency entered)
					LocalXmlString = LocalXmlString + " <CurrencyConversion isoCurrencyCodeAlpha=" + DoubleQuote + BuyerAdminCurrency + DoubleQuote + " isoCurrencyCodeNum=" + DoubleQuote + BuyerAdminCurrencyRel.ISOCodeNumber + DoubleQuote + ">"	+ BuyerAdminCurrencyRate + "</CurrencyConversion>"		
				LocalXmlString = LocalXmlString + "</AdministrativeDestination>"				
			return LocalXmlString	

																
		DerivedToTaxRegistration is a DerivedField	
			type is XMLDocument	
			initialize LocalXmlString
			if (VATRegistrationNumber entered)
				LocalXmlString = "<TaxRegistration" + " hasPhysicalPresenceIndicator=" + DoubleQuote + "true" + DoubleQuote + " isoCountryCode=" + DoubleQuote + VATRegistrationCountry + DoubleQuote
				if (PostalAddress.StateProvince entered)
					LocalXmlString = LocalXmlString + " mainDivision=" + DoubleQuote + PostalAddress.StateProvince + DoubleQuote	
				LocalXmlString = LocalXmlString + ">"	
				LocalXmlString = LocalXmlString + "<TaxRegistrationNumber>" + VATRegistrationNumber + "</TaxRegistrationNumber>"	
				LocalXmlString = LocalXmlString + "</TaxRegistration>"	
		    return LocalXmlString				


		DerivedSellerAddress is a DerivedField	
			type is XMLDocument	
			initialize LocalFromAddressXml 

			if (SendAddressOrTaxAreaId.AddressOnly		  
			or  SendAddressOrTaxAreaId.Both)
				LocalLoadAddress = FromPostalAddress
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	 
			or  SendAddressOrTaxAreaId.Both)	
				LocalLoadTaxCode = FromTaxCode				
			if (LocalLoadTaxCode not entered			 
			and LocalLoadAddress.Country not entered)	 
				return blank								 	

			if (LocalLoadTaxCode not entered			
			and LocalLoadAddress.Country not entered)	
				return blank							
				
			LocalFromAddressXml = "<Seller>"	
			if (TaxEntity entered)			
				LocalFromAddressXml = LocalFromAddressXml + "<Company>" + TaxEntity + "</Company>"		
			if (Division entered)			
				LocalFromAddressXml = LocalFromAddressXml + "<Division>" + Division + "</Division>"		
			if (Department entered)			
				LocalFromAddressXml = LocalFromAddressXml + "<Department>" + Department + "</Department>"		
		
			if (LocalLoadTaxCode not entered)
				LocalFromAddressXml = LocalFromAddressXml + "<PhysicalOrigin>"
			else	
				LocalFromAddressXml = LocalFromAddressXml + "<PhysicalOrigin" + " taxAreaId=" + DoubleQuote + LocalLoadTaxCode + DoubleQuote + EndTag  
			if (LocalLoadAddress.Country entered)
				if (LocalLoadAddress.DeliveryAddress.AddressLine1 entered)
					LocalFromAddressXml = LocalFromAddressXml + "<StreetAddress1>" + LocalLoadAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (LocalLoadAddress.Municipality entered)
					LocalFromAddressXml = LocalFromAddressXml + "<City>" + LocalLoadAddress.Municipality + "</City>"						
				if (LocalLoadAddress.StateProvince entered)
					LocalFromAddressXml = LocalFromAddressXml + "<MainDivision>" + LocalLoadAddress.StateProvince + "</MainDivision>"	
				if (LocalLoadAddress.County entered)
					LocalFromAddressXml = LocalFromAddressXml + "<SubDivision>" + LocalLoadAddress.County + "</SubDivision>"							
				if (LocalLoadAddress.PostalCode entered)
					LocalFromAddressXml = LocalFromAddressXml + "<PostalCode>" + LocalLoadAddress.PostalCode + "</PostalCode>"					
				LocalFromAddressXml = LocalFromAddressXml + "<Country>" + LocalLoadAddress.Country + "</Country>"	
				
			if (LocalLoadTaxCode entered
			or  LocalLoadAddress.Country entered)
				if (TransactionCurrency entered)
					LocalFromAddressXml = LocalFromAddressXml + " <CurrencyConversion isoCurrencyCodeAlpha=" + DoubleQuote + TransactionCurrency + DoubleQuote + " isoCurrencyCodeNum=" + DoubleQuote + TransactionCurrencyRel.ISOCodeNumber + DoubleQuote + ">"	+ FromCurrencyRate + "</CurrencyConversion>"
											
				LocalFromAddressXml = LocalFromAddressXml + "</PhysicalOrigin>"
			LocalFromAddressXml = LocalFromAddressXml + DerivedAdminOriginAddress
			LocalFromAddressXml = LocalFromAddressXml + DerivedFromTaxRegistration	 
			LocalFromAddressXml = LocalFromAddressXml + "</Seller>" 			
			return LocalFromAddressXml  	 		

		DerivedFromTaxRegistration is a DerivedField	 
			type is XMLDocument	
			initialize LocalXmlString
			if (FromVATRegistrationNumber entered)
				LocalXmlString = "<TaxRegistration" + " hasPhysicalPresenceIndicator=" + DoubleQuote + "true" + DoubleQuote + " isoCountryCode=" + DoubleQuote + FromVATRegistrationCountry + DoubleQuote	
				if (FromPostalAddress.StateProvince entered)
					LocalXmlString = LocalXmlString + " mainDivision=" + DoubleQuote + FromPostalAddress.StateProvince + DoubleQuote	
				LocalXmlString = LocalXmlString + ">"	
				LocalXmlString = LocalXmlString + "<TaxRegistrationNumber>" + FromVATRegistrationNumber + "</TaxRegistrationNumber>"	
				LocalXmlString = LocalXmlString + "</TaxRegistration>"	
		    return LocalXmlString				


		DerivedAdminOriginAddress is a DerivedField	
			type is XMLDocument	
			initialize LocalXmlString

			if (SendAddressOrTaxAreaId.AddressOnly		  
			or  SendAddressOrTaxAreaId.Both)
				LocalLoadAddress = POAAddress
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	 
			or  SendAddressOrTaxAreaId.Both)	
				LocalLoadTaxCode = POATaxCode				
			if (LocalLoadTaxCode not entered			 
			and LocalLoadAddress.Country not entered)	 
				return blank								 	

			if ( LocalLoadTaxCode not entered			
			and  LocalLoadAddress.Country not entered)	
				return blank					
			if ( LocalLoadTaxCode not entered)
				LocalXmlString = LocalXmlString + "<AdministrativeOrigin>"
			else	
				LocalXmlString = LocalXmlString + "<AdministrativeOrigin" + " taxAreaId=" + DoubleQuote +  LocalLoadTaxCode + DoubleQuote + EndTag   	
			if ( LocalLoadAddress.Country entered)
				if ( LocalLoadAddress.DeliveryAddress.AddressLine1 entered)
					LocalXmlString = LocalXmlString + "<StreetAddress1>" +  LocalLoadAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if ( LocalLoadAddress.Municipality entered)
					LocalXmlString = LocalXmlString + "<City>" +  LocalLoadAddress.Municipality + "</City>"						
				if ( LocalLoadAddress.StateProvince entered)
					LocalXmlString = LocalXmlString + "<MainDivision>" +  LocalLoadAddress.StateProvince + "</MainDivision>"	
				if ( LocalLoadAddress.County entered)
					LocalXmlString = LocalXmlString + "<SubDivision>" +  LocalLoadAddress.County + "</SubDivision>"							
				if ( LocalLoadAddress.PostalCode entered)
					LocalXmlString = LocalXmlString + "<PostalCode>" +  LocalLoadAddress.PostalCode + "</PostalCode>"					
				LocalXmlString = LocalXmlString + "<Country>" +  LocalLoadAddress.Country + "</Country>"	
				
			if (LocalLoadTaxCode entered
			or  LocalLoadAddress.Country entered)
				if (POATaxCode entered
				or  POAAddress.Country entered)
					if (POACurrency entered)
						LocalXmlString = LocalXmlString + " <CurrencyConversion isoCurrencyCodeAlpha=" + DoubleQuote + POACurrency + DoubleQuote + " isoCurrencyCodeNum=" + DoubleQuote + POACurrencyRel.ISOCodeNumber + DoubleQuote + ">"	+ POACurrencyRate + "</CurrencyConversion>"					
				LocalXmlString = LocalXmlString + "</AdministrativeOrigin>"				
			return LocalXmlString
				
		DerivedTaxingLocation is a DerivedField	 
			type is XMLDocument	
			initialize LocalXmlString
			initialize LocalTaxingLocation
			LocalTaxingLocation = TaxingLocation	
			LocalXmlString = "<SitusOverride" + " taxingLocation=" + DoubleQuote + LocalTaxingLocation + DoubleQuote + "/>"
		    return LocalXmlString

		DeriveVertexCommodityCode is a DerivedField 
			type is Alpha 1			
			if (CommodityCodeType.UNSPSC)
				LocalCommodityCode = UNSPSCCode
			else
			if (CommodityCodeType.HSN)
				LocalCommodityCode = HSNSACCode 
			
			if (CommodityCodeType entered
			and LocalCommodityCode not entered)
				LocalCommodityCode = CommodityCode

			return blank


		BeginLineItemTag is a StringField
            type is XMLDocument
            "<LineItem"
		EndLineItemTag is a StringField
            type is XMLDocument
            "</LineItem>"		

		DerivedAmountNoComma is a DerivedField	
			type is Alpha 12					
			return LocalAmount					

		DerivedPercentAlpha is a DerivedField	
			type is Alpha 12					 
			return LocalPercent	
									
		DerivedSupplyLineItems is a DerivedField	 
			type is XMLDocument	
			initialize LocalBuildSingleLineXml 
			LocalBuildSingleLineXml = BeginLineItemTag
			if (TaxLineItemsRel exist)
				LineItemNumber = first TaxLineItemsRel.TaxLineItem.Sequence	 
			if (LineItemNumber entered)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " lineItemNumber=" + DoubleQuote + LineItemNumber + DoubleQuote
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " lineItemId=" + DoubleQuote + LineItemNumber + DoubleQuote
			else
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " lineItemNumber=" + DoubleQuote + "1" + DoubleQuote
			if (TaxDate entered)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " taxDate=" + DoubleQuote + TaxDateAlpha10 + DoubleQuote 
			Trigger = SetTaxIncludedIndicator 
			OutputTaxIncludedInd = TaxIncludedIndicator
			if (TaxIncludedIndicator)	
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " taxIncludedIndicator=" + DoubleQuote + TaxIncludedIndicator + DoubleQuote					
			if (TaxUsageCode entered)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " usage="  + DoubleQuote + TaxUsageCode + DoubleQuote	
			LocalBuildSingleLineXml = LocalBuildSingleLineXml + EndAttributeTag	
			
			if (ProductTaxCategory entered)		
				if (ProductClass not entered)	
					LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Product>" + ProductTaxCategory + "</Product>"
				else
					LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Product" + " productClass=" + DoubleQuote + ProductClass + DoubleQuote + ">" + ProductTaxCategory + "</Product>" 					
			
			Trigger = DeriveVertexCommodityCode 
			if (LocalCommodityCode entered)
				if (CommodityCodeType entered)
					LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<CommodityCode" + " commodityCodeType=" + DoubleQuote + CommodityCodeType + DoubleQuote + ">" + LocalCommodityCode + "</CommodityCode>" 
			if (MaterialCode entered)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<MaterialCode>" + MaterialCode + "</MaterialCode>"	
			if (FreightAmount entered)
				LocalAmount = FreightAmount
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Freight>" + DerivedAmountNoComma + "</Freight>" 				
			if (Quantity entered)
				LocalAmount = Quantity																						
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Quantity>" + DerivedAmountNoComma + "</Quantity>"		
			if (UnitCost entered)
				LocalAmount = UnitCost
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<UnitPrice>" + DerivedAmountNoComma + "</UnitPrice>"
			LocalExtendedPrice = DerivedExtendedPrice 
			if (LocalExtendedPrice entered) 
				LocalAmount = LocalExtendedPrice
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<ExtendedPrice>" + DerivedAmountNoComma + "</ExtendedPrice>" 
			Trigger = SetTaxIncludedIndicator 			 
			OutputTaxIncludedInd = TaxIncludedIndicator
								
			if (LocalVertexRequest.AccrualRequest)	
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + DerivedInputVatRecoverable 
				
			LocalBuildSingleLineXml = LocalBuildSingleLineXml + DerivedFlexibleFieldsForSingle				
			
			LocalBuildSingleLineXml = LocalBuildSingleLineXml + EndLineItemTag			 
			return LocalBuildSingleLineXml  

		BeginFlexFieldTag is a DerivedField
			type is XMLDocument
            return "<FlexibleFields>"
			
		DerivedFlexCodes is a DerivedField
			type is XMLDocument		
			return "<FlexibleCodeField fieldId=" + DoubleQuote + FieldId + DoubleQuote + ">" + FlexValue + "</FlexibleCodeField>"	

		DerivedFlexNumeric is a DerivedField
			type is XMLDocument		
			return "<FlexibleNumericField fieldId=" + DoubleQuote + FieldId + DoubleQuote + ">" + FlexValue + "</FlexibleNumericField>"			

		DerivedFlexDate is a DerivedField
			type is XMLDocument		
			return "<FlexibleDateField fieldId=" + DoubleQuote + FieldId + DoubleQuote + ">" + FlexValue + "</FlexibleDateField>"
			
		EndFlexFieldTag is a StringField
            type is Text
            restricted
            "</FlexibleFields>"

		HeaderFlexbibleFieldsExist is a DerivedField			 
			type is Boolean
			restricted
			if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[1] entered
			or  VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[1] entered
			or  VertexFlexibleFields.FlexibleDates.FlexibleDateField[1] entered)
				return true
			return false	

		HeaderFlexbibleFields250Exist is a DerivedField						 
			type is Boolean
			restricted
			if (VertexAttributes.VertexCodes.FlexibleCode[1].FieldId entered	
			or  VertexAttributes.VertexNumerics.FlexibleNumeric[1].FieldId entered
			or  VertexAttributes.VertexDates.FlexibleDate[1].FieldId entered)
				return true				
			return false	
									
		DerivedFlexibleFieldsForSingle is a DerivedField
			type is XMLDocument	
			initialize LocalXmlString	
			FlexibleFieldTag = 0						
			if (TaxLineItemsRel not exist)				
				if (HeaderFlexbibleFields250Exist)		
					return DerivedVertexAttributes250	
				else	
				if (HeaderFlexbibleFieldsExist)			
					initialize Idx	
					while (Idx < 25)
						Idx +=1
						if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId not entered)
							end while
						if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code not entered)	
							LocalFlexCodeValue = VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code
							LocalFieldId = Idx
							Trigger = EditVertexCodeValue
							VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalFlexCodeValue
						if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code entered		
						or AttributeMissingProcess.Allow)												
							increment TotalFlexibleFields												 
							if (FlexibleFieldTag.NotStarted)
								LocalXmlString = LocalXmlString + BeginFlexFieldTag 
								FlexibleFieldTag = 1
							FieldId			= VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId										 
							FlexValue 		= VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code											 
							LocalXmlString = LocalXmlString + DerivedFlexCodes  
					
					initialize Idx	 
					while (Idx < 10)
						Idx +=1		
						if (VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue entered)
							increment TotalFlexibleFields
							if (FlexibleFieldTag.NotStarted)
								LocalXmlString = LocalXmlString + BeginFlexFieldTag 
								FlexibleFieldTag = 1							
							FieldId 			=  VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId					 	
							FlexValue	 		=  VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].OutputNumericValue			 							
							LocalXmlString = LocalXmlString + DerivedFlexNumeric  
	
					initialize Idx	 
					while (Idx < 5)
						Idx +=1		
						if (VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue entered)
							increment TotalFlexibleFields
							if (FlexibleFieldTag.NotStarted)
								LocalXmlString = LocalXmlString + BeginFlexFieldTag 
								FlexibleFieldTag = 1		
							FieldId 			=  VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId							 
							FlexValue	 		=  VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateAlpha10						 						
							LocalXmlString = LocalXmlString + DerivedFlexDate  
				
					if (FlexibleFieldTag.Started)			
						LocalXmlString = LocalXmlString + EndFlexFieldTag
			else
			if (TaxLineItemsRel exist)
				return DerivedVertexAttributes250						

			return LocalXmlString	

		DerivedVertexAttributes250 is a DerivedField			 
			type is XMLDocument
			restricted	
			initialize FlexFieldString250	
			FlexibleFieldTag = 0					
			initialize TotalFlexibleFields

			if (VertexAttributes.VertexCodes.FlexibleCode[1].FieldId not entered			
			and VertexAttributes.VertexNumerics.FlexibleNumeric[1].FieldId not entered		
			and VertexAttributes.VertexDates.FlexibleDate[1].FieldId not entered)			
				return blank
			
			if (VertexAttributes.VertexCodes.FlexibleCode[1].FieldId entered)				
				initialize Idx	
				while (Idx < 25)
					Idx +=1
					if (VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId not entered)	
						end while
					if (VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId entered
					and VertexAttributes.VertexCodes.FlexibleCode[Idx].Code not entered)  
						initialize LocalFlexCodeValue  
						LocalFlexCodeValue = VertexAttributes.VertexCodes.FlexibleCode[Idx].Code
						LocalFieldId = Idx
						Trigger = EditVertexCodeValue
						VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalFlexCodeValue
																					  
					if (VertexAttributes.VertexCodes.FlexibleCode[Idx].Code entered
					or AttributeMissingProcess.Allow)												
						increment TotalFlexibleFields					
						if (FlexibleFieldTag.NotStarted)
							FlexFieldString250 = FlexFieldString250 + BeginFlexFieldTag 
							FlexibleFieldTag = 1								
						FieldId			= VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId										 
						FlexValue 		= VertexAttributes.VertexCodes.FlexibleCode[Idx].Code											 
						FlexFieldString250 = FlexFieldString250 + DerivedFlexCodes  

			if (VertexAttributes.VertexNumerics.FlexibleNumeric[1].FieldId entered)				 
				initialize Idx	 
				while (Idx < 10)
					Idx +=1		
					if (VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId not entered)			
						end while					
					if (VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId entered)
						increment TotalFlexibleFields
						if (FlexibleFieldTag.NotStarted)
							FlexFieldString250 = FlexFieldString250 + BeginFlexFieldTag 
							FlexibleFieldTag = 1							
						FieldId 			=  VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId					 	
						FlexValue	 		=  VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].OutputNumericValue			 							
						FlexFieldString250 = FlexFieldString250 + DerivedFlexNumeric  

			if (VertexAttributes.VertexDates.FlexibleDate[1].FieldId entered)
				initialize Idx	 
				while (Idx < 5)
					Idx +=1	
					if (VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId not entered)		
						end while	
					if (VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = 0)	
						initialize LocalValidateFlexibleDate
						LocalValidateFlexibleDate = VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue  
						VtxDateIdx = Idx
						LocalFieldId = VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId
						Trigger = EditVertexDateValue			 
						if (LocalSkip)	
							LocalContinue = true
						else	
						if (HaltProcess)
							return blank
						else
							VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = LocalValidateFlexibleDate	 

					if (VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue entered)
						increment TotalFlexibleFields
						if (FlexibleFieldTag.NotStarted)
							FlexFieldString250 = FlexFieldString250 + BeginFlexFieldTag 
							FlexibleFieldTag = 1		 		
						FieldId 			=  VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId							 
						FlexValue	 		=  VertexAttributes.VertexDates.FlexibleDate[Idx].DateAlpha10						 						
						FlexFieldString250 = FlexFieldString250 + DerivedFlexDate  
			
			if (FlexibleFieldTag.Started)			
				FlexFieldString250 = FlexFieldString250 + EndFlexFieldTag

			return FlexFieldString250	
			
			
		DerivedLineFlexibleFields is a DerivedField
			type is XMLDocument	
			initialize LocalLineFlexFldsXml	 	
			FlexibleFieldTag = 0
			if (LocalVertexAttributes.VertexCodes.FlexibleCode[1].FieldId entered				
			or  LocalVertexAttributes.VertexNumerics.FlexibleNumeric[1].FieldId entered			
			or  LocalVertexAttributes.VertexDates.FlexibleDate[1].FieldId entered)				
				return DerivedLineFlexibleFields250 
			else
			if (LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[1].FieldId entered		
			or  LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[1].FieldId entered  
			or  LineItemFlexibleFields.FlexibleDates.FlexibleDateField[1].FieldId entered)	 	
				initialize Idx	
				while (Idx < 25)
					Idx +=1
					if (LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId not entered)
						end while
					if (LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code not entered)	
						initialize LocalFlexCodeValue
						initialize LocalFieldId
						initialize VtxCodeIdx		 
						LocalFlexCodeValue = LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code
						LocalFieldId = LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId 
						VtxCodeIdx = Idx
						Trigger = EditVertexCodeValue
						LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalFlexCodeValue
						if (HaltProcess)
							return blank		 
					if (LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code entered		 
					or AttributeMissingProcess.Allow)										
						increment TotalFlexibleFields												 
						if (FlexibleFieldTag.NotStarted)
							LocalLineFlexFldsXml = LocalLineFlexFldsXml + BeginFlexFieldTag 
							FlexibleFieldTag = 1
						FieldId			= LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId										 
						FlexValue 		= LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code											 
						LocalLineFlexFldsXml = LocalLineFlexFldsXml + DerivedFlexCodes  
				
				initialize Idx	 
				while (Idx < 10)
					Idx +=1
					if (LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue not entered)
						end while					
					if (LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue entered)
						increment TotalFlexibleFields
						if (FlexibleFieldTag.NotStarted)
							LocalLineFlexFldsXml = LocalLineFlexFldsXml + BeginFlexFieldTag 
							FlexibleFieldTag = 1							
						FieldId 			=  LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId					 	
						FlexValue	 		=  LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].OutputNumericValue			 							
						LocalLineFlexFldsXml = LocalLineFlexFldsXml + DerivedFlexNumeric  

				initialize Idx	 
				while (Idx < 5)
					Idx +=1
					if (LineItemFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue not entered)	
						end while					
					if (LineItemFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue entered)
						increment TotalFlexibleFields
						if (FlexibleFieldTag.NotStarted)
							LocalLineFlexFldsXml = LocalLineFlexFldsXml + BeginFlexFieldTag 
							FlexibleFieldTag = 1		
						FieldId 			=  LineItemFlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId							 
						FlexValue	 		=  LineItemFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateAlpha10						 						
						LocalLineFlexFldsXml = LocalLineFlexFldsXml + DerivedFlexDate  
			
				if (FlexibleFieldTag.Started)			
					LocalLineFlexFldsXml = LocalLineFlexFldsXml + EndFlexFieldTag

			return LocalLineFlexFldsXml	

		DerivedLineFlexibleFields250 is a DerivedField
			type is XMLDocument	
			restricted	
			initialize Idx	 
			FlexibleFieldTag = 0
			initialize LocalLineFlexFldsXml	 			 
			if (LocalVertexAttributes.VertexCodes.FlexibleCode[1].FieldId entered			
			or  LocalVertexAttributes.VertexNumerics.FlexibleNumeric[1].FieldId entered		
			or  LocalVertexAttributes.VertexDates.FlexibleDate[1].FieldId entered)	 		
				initialize Idx
				while (Idx < 25)
					Idx +=1	
					if (LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId not entered)
						end while
					if (LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].Code not entered)	
						initialize LocalFlexCodeValue
						LocalFlexCodeValue = LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].Code
						LocalFieldId = Idx
						Trigger = EditVertexCodeValue
						LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalFlexCodeValue
					if (LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].Code entered		
					or AttributeMissingProcess.Allow)																 
						increment TotalFlexibleFields
						if (FlexibleFieldTag.NotStarted)
							LocalLineFlexFldsXml = LocalLineFlexFldsXml + BeginFlexFieldTag 
							FlexibleFieldTag = 1
						FieldId 			= LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId																
						FlexValue 			= LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].Code								 	
						LocalLineFlexFldsXml = LocalLineFlexFldsXml + DerivedFlexCodes 


				initialize Idx	 
				while (Idx < 10)
					Idx +=1	
					if (LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId not entered)
						end while	
					if (LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue not entered)	
						initialize LocalFlexNumericValue
						LocalFlexNumericValue = LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 
						LocalFieldId = LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId
						VtxNumericIdx = Idx
						Trigger = EditVertexNumericValue	 
						LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalFlexNumericValue
					if (LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue entered
					or  AttributeMissingProcess.Allow)
						increment TotalFlexibleFields
						if (FlexibleFieldTag.NotStarted)
							LocalLineFlexFldsXml = LocalLineFlexFldsXml + BeginFlexFieldTag 
							FlexibleFieldTag = 1							
						FieldId 			= LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId						 	
						FlexValue	 		= LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].OutputNumericValue						
						LocalLineFlexFldsXml = LocalLineFlexFldsXml + DerivedFlexNumeric  

				initialize Idx	 
				while (Idx < 5)
					Idx +=1	
					if (LocalVertexAttributes.VertexDates.FlexibleDate[Idx].FieldId not entered)
						end while							
					if (LocalVertexAttributes.VertexDates.FlexibleDate[Idx].DateValue entered)
						increment TotalFlexibleFields
						if (FlexibleFieldTag.NotStarted)
							LocalLineFlexFldsXml = LocalLineFlexFldsXml + BeginFlexFieldTag 
							FlexibleFieldTag = 1								 					
						FieldId 			= LocalVertexAttributes.VertexDates.FlexibleDate[Idx].FieldId							 
						FlexValue	 		= LocalVertexAttributes.VertexDates.FlexibleDate[Idx].DateAlpha10	
						LocalLineFlexFldsXml = LocalLineFlexFldsXml + DerivedFlexDate 

						
				if (FlexibleFieldTag.Started)			
					LocalLineFlexFldsXml = LocalLineFlexFldsXml + EndFlexFieldTag
					FlexibleFieldTag = 0
				
				LocalLineFlexFldsXml = LocalLineFlexFldsXml + EndLineItemTag	

			return LocalLineFlexFldsXml 	
			

		CodeText is a MessageField	
			"Code"
		NumericText is a MessageField	
			"Numeric"
		DateText is a MessageField	
			"Date"

		EditVertexCodeValue is a DerivedField		
			type is Alpha 1
			default label is untranslatable
			restricted
			
			initialize LocalErrorNumber
			LocalSkip = false
			HaltProcess = false
			AttributeMissingProcess	= TaxConfigurationRel.AttributeMissingProcess
			if (TaxConfigurationRel.AttributeMissingMessage entered)
				AttributeMissingMessage	= TaxConfigurationRel.AttributeMissingMessage
			else
				AttributeMissingMessage	= ValueMissingText	
	
			
			if (AttributeMissingProcess.Allow)	 
				LocalContinue = true
			else	
			if (AttributeMissingProcess.Halt)		 
				HaltProcess = true
				LocalContinue = false
				FlexFieldInError = CodeText + VtxCodeIdx  
				LocalErrorCategory 	= "TXQNT"									 
				DisplayLineInError  = LocalLineItemNbr	 							 
				LocalErrorNumber    = 824											 
				return blank
			else
			if (AttributeMissingProcess.SkipAttribute)
				LocalSkip = true		 					
				NbrOfAttributesSkipped += 1	
			else
			if (AttributeMissingProcess.MissingMessage)
				if (AttributeMissingMessage entered)
					LocalFlexCodeValue = AttributeMissingMessage	 									
				else
					LocalVertexAttributes.VertexCodes.FlexibleCode[VtxCodeIdx].Code = ValueMissingText  	 	

			if (LocalErrorNumber entered)									 
				return blank		

			return blank

		EditVertexNumericValue is a DerivedField		 
			type is Alpha 1
			default label is untranslatable
			restricted
			
			initialize LocalErrorNumber
			LocalSkip = false
			HaltProcess = false
			AttributeMissingProcess	= TaxConfigurationRel.AttributeMissingProcess


			if (LocalFlexNumericValue = 0)
				if (AttributeMissingProcess.Halt)		 
					HaltProcess = true
					LocalContinue = false
					FlexFieldInError = NumericText + VtxNumericIdx  	 
					LocalErrorCategory 	= "TXQNT"										 
					DisplayLineInError  = LineItemNbrIdx								 
					LocalErrorNumber    = 824											 
					return blank
				else
				if (AttributeMissingProcess.SkipAttribute)
					LocalSkip = true		 					
					NbrOfAttributesSkipped += 1	
				else
					display "WillBeSkipped"

			if (LocalErrorNumber entered)									 
				return blank		

			return blank

		EditVertexDateValue is a DerivedField		 
			type is Alpha 1
			default label is untranslatable
			restricted
			
			initialize LocalErrorNumber
			LocalSkip = false
			HaltProcess = false
			AttributeMissingProcess	= TaxConfigurationRel.AttributeMissingProcess


			if (LocalValidateFlexibleDate = 0)
				if (AttributeMissingProcess.Halt)			 
					HaltProcess = true
					LocalContinue = false
					FlexFieldInError = DateText + VtxDateIdx 
					LocalErrorCategory 	= "TXQNT"										 
					DisplayLineInError  = LineItemNbrIdx								 
					LocalErrorNumber    = 825											 
					return blank
				else
				if (AttributeMissingProcess.SkipAttribute)
					LocalSkip = true		 					
					NbrOfAttributesSkipped += 1	
				else
					LocalValidateFlexibleDate = BadDateAlpha8

			if (LocalErrorNumber entered)									 
				return blank		

			return blank

		EditVertexAttributes is a DerivedField		
			type is Alpha 1
			default label is untranslatable
			restricted
			

			return blank

		EditVertexFlexibleFields is a DerivedField		 
			type is Alpha 1
			default label is untranslatable
			restricted
			return blank

		DoubleQuote is a StringField
            type is Alpha 2
            restricted
            "\""
			
		EndTag is a StringField
            type is Alpha 1
            restricted
            ">"

		EndAttributeTag is a StringField
            type is Alpha 1
            restricted
            ">"

		DerivedInputVatRecoverable is a DerivedField	 
			type is XMLDocument	
			initialize LocalRecoverableVatXml 
			if (VATProcess							
			or RecoverableImpositionType entered	
			or RecoverableTaxAreaId entered)        
				if (RecoverableTaxAreaId entered
				and RecoverableJurisLevel entered
				and RecoverableImpositionType entered)
					if (VertexVATType.Import)
						LocalRecoverableVatXml = "<InputTax" + " isImport=" + DoubleQuote + "true" + DoubleQuote + EndTag 
					else
						LocalRecoverableVatXml = "<InputTax>"	
								
					LocalRecoverableVatXml = LocalRecoverableVatXml + "<TaxingJurisdictionLocation" + " impositionType=" + DoubleQuote + RecoverableImpositionType + DoubleQuote 
					LocalRecoverableVatXml = LocalRecoverableVatXml + " jurisdictionLevel=" + DoubleQuote + RecoverableJurisLevel + DoubleQuote
					LocalRecoverableVatXml = LocalRecoverableVatXml + " taxAreaId=" + DoubleQuote + RecoverableTaxAreaId + DoubleQuote + "/>"					
					
					LocalAmount = VATInputTaxAmount
					LocalRecoverableVatXml = LocalRecoverableVatXml + "<InputAmount>" + DerivedAmountNoComma + "</InputAmount>"																	
					LocalPercent = BlockingOverridePercent
					LocalRecoverableVatXml = LocalRecoverableVatXml + "<BlockingOverridePercent>" + DerivedPercentAlpha + "</BlockingOverridePercent>"									
					LocalPercent = PartialExemptRecvblOvrdPct
					LocalRecoverableVatXml = LocalRecoverableVatXml + "<PartialExemptRecoverableOverridePercent>" + DerivedPercentAlpha + "</PartialExemptRecoverableOverridePercent>"	
					
					LocalRecoverableVatXml = LocalRecoverableVatXml + "</InputTax>"	
			return LocalRecoverableVatXml			
			
		DerivedAccrualRequest is a DerivedField	 
			type is XMLDocument	
			initialize LocalXml 
			LocalXml = "<AccrualRequest"
			LocalXml = LocalXml + DerivedTransactionXml						 

			LocalXml = LocalXml + DerivedVendorAddress
			LocalXml = LocalXml + DerivedBuyerAddress	
			if (TaxingLocation entered) 
				LocalXml = LocalXml + DerivedTaxingLocation	 

			if (!SendMultLineItems																
			or  TaxLineItemsRel not exist)														
				LocalAmount = ChargedTaxAmount													
				LocalXml = LocalXml + "<ChargedTax>" + DerivedAmountNoComma + "</ChargedTax>" 	

			if (SendMultLineItems													 
			and TaxLineItemsRel exist)	
				LocalXml = LocalXml + DerivedMulipleLineItems
				if (TotalLineItemsProcessed = 0)	
					LocalXml = LocalXml + DerivedProcurementLineItems				
			else	
				LocalXml = LocalXml + DerivedProcurementLineItems	
			LocalXml = LocalXml + "</AccrualRequest>"				
			return LocalXml


		DerivedBuyerAddress is a DerivedField	
			type is XMLDocument	
			initialize LocalDestAddressXml 

			if (SendAddressOrTaxAreaId.AddressOnly		  
			or  SendAddressOrTaxAreaId.Both)
				LocalLoadAddress = PostalAddress
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	 
			or  SendAddressOrTaxAreaId.Both)	
				LocalLoadTaxCode = TaxCode				
			if (LocalLoadTaxCode not entered			 
			and LocalLoadAddress.Country not entered)	 
				return blank								 	

			LocalDestAddressXml = "<Buyer>"	
			
			if (TaxEntity entered)	
				if (OverrideTaxEntity entered)
					LocalDestAddressXml = LocalDestAddressXml + "<Company>" + OverrideTaxEntity + "</Company>"
				else								
					LocalDestAddressXml = LocalDestAddressXml + "<Company>" + TaxEntity + "</Company>"
							
			if (Division entered)			
				LocalDestAddressXml = LocalDestAddressXml + "<Division>" + Division + "</Division>"		
			if (Department entered)			
				LocalDestAddressXml = LocalDestAddressXml + "<Department>" + Department + "</Department>"		
					
			if (LocalLoadTaxCode not entered)
				LocalDestAddressXml = LocalDestAddressXml + "<Destination>"
			else	
				LocalDestAddressXml = LocalDestAddressXml + "<Destination" + " taxAreaId=" + DoubleQuote + LocalLoadTaxCode + DoubleQuote + EndTag   	
			if (LocalLoadAddress.Country entered)
				if (LocalLoadAddress.DeliveryAddress.AddressLine1 entered)
					LocalDestAddressXml = LocalDestAddressXml + "<StreetAddress1>" + LocalLoadAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (LocalLoadAddress.Municipality entered)
					LocalDestAddressXml = LocalDestAddressXml + "<City>" + LocalLoadAddress.Municipality + "</City>"						
				if (LocalLoadAddress.StateProvince entered)
					LocalDestAddressXml = LocalDestAddressXml + "<MainDivision>" + LocalLoadAddress.StateProvince + "</MainDivision>"	
				if (LocalLoadAddress.County entered)
					LocalDestAddressXml = LocalDestAddressXml + "<SubDivision>" + LocalLoadAddress.County + "</SubDivision>"							
				if (LocalLoadAddress.PostalCode entered)
					LocalDestAddressXml = LocalDestAddressXml + "<PostalCode>" + LocalLoadAddress.PostalCode + "</PostalCode>"					
				LocalDestAddressXml = LocalDestAddressXml + "<Country>" + LocalLoadAddress.Country + "</Country>"	
			
			if (LocalLoadTaxCode entered
			or LocalLoadAddress.Country entered)
				if (BaseCurrency entered)
					LocalDestAddressXml = LocalDestAddressXml + " <CurrencyConversion isoCurrencyCodeAlpha=" + DoubleQuote + BaseCurrency + DoubleQuote + " isoCurrencyCodeNum=" + DoubleQuote + BaseCurrencyRel.ISOCodeNumber + DoubleQuote + ">"	+ CurrencyRate + "</CurrencyConversion>"	
			LocalDestAddressXml = LocalDestAddressXml + "</Destination>"
			LocalDestAddressXml = LocalDestAddressXml + DerivedAdminDestAddress		 	
			LocalDestAddressXml = LocalDestAddressXml + DerivedToTaxRegistration		 
			LocalDestAddressXml = LocalDestAddressXml + "</Buyer>" 			
			return LocalDestAddressXml  
			

		DerivedVendorAddress is a DerivedField	
			type is XMLDocument	
			initialize LocalFromAddressXml 
			if (FromTaxCode not entered					 
			and FromPostalAddress.Country not entered)	 
				return blank							 

			if (SendAddressOrTaxAreaId.AddressOnly		  
			or  SendAddressOrTaxAreaId.Both)
				LocalLoadAddress = FromPostalAddress
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	 
			or  SendAddressOrTaxAreaId.Both)	
				LocalLoadTaxCode = FromTaxCode				
			if (LocalLoadTaxCode not entered			 
			and LocalLoadAddress.Country not entered)	 
				return blank								 	

			LocalFromAddressXml = "<Vendor>"	
			if (Vendor entered)		
				LocalFromAddressXml = LocalFromAddressXml + "<VendorCode>" + Vendor + "</VendorCode>"						
			if (LocalLoadTaxCode not entered)
				LocalFromAddressXml = LocalFromAddressXml + "<PhysicalOrigin>"
			else	
				LocalFromAddressXml = LocalFromAddressXml + "<PhysicalOrigin" + " taxAreaId=" + DoubleQuote + LocalLoadTaxCode + DoubleQuote + EndTag   	
			if (LocalLoadAddress.Country entered)
				if (LocalLoadAddress.DeliveryAddress.AddressLine1 entered)
					LocalFromAddressXml = LocalFromAddressXml + "<StreetAddress1>" + LocalLoadAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (LocalLoadAddress.Municipality entered)
					LocalFromAddressXml = LocalFromAddressXml + "<City>" + LocalLoadAddress.Municipality + "</City>"						
				if (LocalLoadAddress.StateProvince entered)
					LocalFromAddressXml = LocalFromAddressXml + "<MainDivision>" + LocalLoadAddress.StateProvince + "</MainDivision>"	
				if (LocalLoadAddress.County entered)
					LocalFromAddressXml = LocalFromAddressXml + "<SubDivision>" + LocalLoadAddress.County + "</SubDivision>"							
				if (LocalLoadAddress.PostalCode entered)
					LocalFromAddressXml = LocalFromAddressXml + "<PostalCode>" + LocalLoadAddress.PostalCode + "</PostalCode>"					
				LocalFromAddressXml = LocalFromAddressXml + "<Country>" + LocalLoadAddress.Country + "</Country>"	
				
			if (LocalLoadTaxCode entered
			or  LocalLoadAddress.Country entered)
				if (TransactionCurrency entered)
					LocalFromAddressXml = LocalFromAddressXml + " <CurrencyConversion isoCurrencyCodeAlpha=" + DoubleQuote + TransactionCurrency + DoubleQuote + " isoCurrencyCodeNum=" + DoubleQuote + TransactionCurrencyRel.ISOCodeNumber + DoubleQuote + ">"	+ FromCurrencyRate + "</CurrencyConversion>"
											
				LocalFromAddressXml = LocalFromAddressXml + "</PhysicalOrigin>"
			LocalFromAddressXml = LocalFromAddressXml + DerivedAdminOriginAddress
			LocalFromAddressXml = LocalFromAddressXml + DerivedFromTaxRegistration	 
			LocalFromAddressXml = LocalFromAddressXml + "</Vendor>" 			
			return LocalFromAddressXml  	 						


		DerivedProcurementLineItems is a DerivedField	 
			type is XMLDocument	
			initialize LocalBuildSingleLineXml 
			LocalBuildSingleLineXml = BeginLineItemTag
			if (TaxLineItemsRel exist)
				LineItemNumber = first TaxLineItemsRel.TaxLineItem.Sequence	 
			if (LineItemNumber entered)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " lineItemNumber=" + DoubleQuote + LineItemNumber + DoubleQuote
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " lineItemId=" + DoubleQuote + LineItemNumber + DoubleQuote
			else
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " lineItemNumber=" + DoubleQuote + "1" + DoubleQuote
			if (TaxDate entered)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " taxDate=" + DoubleQuote + TaxDateAlpha10 + DoubleQuote 
			if (Location entered)	
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " locationCode="  + DoubleQuote + Location + DoubleQuote			
			if (DeliveryTerms entered)	
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " deliveryTerms="  + DoubleQuote + DeliveryTerms + DoubleQuote		
			if (PostDate entered)	
				LocalConvertDate = PostDate
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " postingDate="  + DoubleQuote + DateAlpha10 + DoubleQuote			
			if (CostCenter entered)	
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " costCenter="  + DoubleQuote + CostCenter + DoubleQuote			
			Trigger = SetTaxIncludedIndicator			 
			OutputTaxIncludedInd = TaxIncludedIndicator
			if (TaxIncludedIndicator)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " taxIncludedIndicator=" + DoubleQuote + TaxIncludedIndicator + DoubleQuote					
			if (GeneralLedgerAccount entered)	
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " generalLedgerAccount="  + DoubleQuote + GeneralLedgerAccount + DoubleQuote	
			if (MaterialCode entered)			
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " materialCode="  + DoubleQuote + MaterialCode + DoubleQuote					
			if (TaxUsageCode entered)
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " usage="  + DoubleQuote + TaxUsageCode + DoubleQuote			
			if (VendorSKU entered)				
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + " vendorSKU="  + DoubleQuote + VendorSKU + DoubleQuote							
			LocalBuildSingleLineXml = LocalBuildSingleLineXml + EndAttributeTag	
			
			if (ProductTaxCategory entered)		
				if (ProductClass not entered)	
					LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Purchase>" + ProductTaxCategory + "</Purchase>"
				else
					LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Purchase" + " purchaseClass=" + DoubleQuote + ProductClass + DoubleQuote + ">" + ProductTaxCategory + "</Purchase>" 					

			Trigger = DeriveVertexCommodityCode 
			if (LocalCommodityCode entered)		
				if (CommodityCodeType entered)	
					LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<CommodityCode" + " commodityCodeType=" + DoubleQuote + CommodityCodeType + DoubleQuote + ">" + LocalCommodityCode + "</CommodityCode>" 
			if (FreightAmount entered)
				LocalAmount = FreightAmount
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Freight>" + DerivedAmountNoComma + "</Freight>" 				
			if (Quantity entered)
				LocalAmount = Quantity		
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<Quantity>" + DerivedAmountNoComma + "</Quantity>"  
			if (UnitCost entered)
				LocalAmount = UnitCost
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<UnitPrice>" + DerivedAmountNoComma + "</UnitPrice>"
			LocalExtendedPrice = DerivedExtendedPrice 
			if (LocalExtendedPrice entered)
				LocalAmount = LocalExtendedPrice
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<ExtendedPrice>" + DerivedAmountNoComma + "</ExtendedPrice>" 	
			
			Trigger = SetTaxIncludedIndicator 			 
			OutputTaxIncludedInd = TaxIncludedIndicator
								

			if (LocalVertexRequest.AccrualRequest)	
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + DerivedInputVatRecoverable 
				
			LocalBuildSingleLineXml = LocalBuildSingleLineXml + DerivedFlexibleFieldsForSingle				 		
			
			LocalBuildSingleLineXml = LocalBuildSingleLineXml + EndLineItemTag			 
			return LocalBuildSingleLineXml  

		AccrualRequestUT is a DerivedField
  			type is Alpha 1
  			LocalTrace = LocalTrace + "AccrualRequestUT,"
			VertexRoutineExecuted = "AccrualRequestUT"
			LocalVertexRequest = "A"									 

			RequestStartTimestamp = DerivedTimestamp time
			
		  	VertexAccessType = VertexConfigVersionGroupRel.VertexAccessType	 
			if (VertexAccessType.OAuth)
				invoke VertexTemplate90 VertexCalculateTax90OAuth				 
						resume on error										 
							WebServiceError = true							 
							WebServiceErrorMessage = error message			 			
						invoked.Request					= VertexCalculateTaxXml
						ResponseXML 					= result.Response
						MyHTTPInfo						= result.MyHTTPInfo				 	
			else
				invoke VertexTemplate90 VertexCalculateTax90				 
					resume on error										 
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= VertexCalculateTaxXml
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo		

			RequestStopTimestamp = DerivedTimestamp time
			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				Trigger = ParseWebserviceError	
			
			Trigger = CaptureXml					
			if (WebServiceError)											 
				return blank
				
			RequestXML 							= VertexCalculateTaxXml 	
			CapturedRequestXML					= VertexCalculateTaxXml			
			CapturedResponseXML					= ResponseXML		

			CapturedXml = RequestXML + ResponseXML	
			
			ResponseStartTimestamp = DerivedTimestamp time
			OutputInvoiceTotal					= ResponseXML select "
			OutputTotalTaxable					= ResponseXML select "
			OutputTotalTaxAmount				= ResponseXML select "
			ReturnedVertexStatus				= ResponseXML select "
			VertexTaxResult 					= ResponseXML select "
			OutputGeoCode						= ResponseXML select "
			NumberOfTaxLineItems				= ResponseXML select "count(
			
			if (ProcessResponseUsingPartialXpath)
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					Trigger = InitializeOutputJurisdictions		  			
					initialize OutputTaxRate
					initialize ReturnedTotalRate					
					initialize DistLine
					DistLine = ResponseXML select "
					Trigger = LoadVertexPartiallyQualifiedLineXml	 
					LineItemNbrIdx +=1
			else
				NumberOfTaxLineItems					= ResponseXML select "count(
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					initialize OutputTaxRate
					initialize ReturnedTotalRate		
					Trigger = InitializeOutputJurisdictions
					ResponseBusclassKey 				= ResponseXML select "
					LineEffectiveRate					= ResponseXML select "
					NumberOfTaxesReturned				= ResponseXML select "count(
					LocalEachLineDestTaxAreaId			= ResponseXML select "
					if (LocalEachLineDestTaxAreaId entered)
						OutputGeoCode					= LocalEachLineDestTaxAreaId				
					TaxingJurisdiction 					= OutputGeoCode 
					JurisSeq = 1								
					while (JurisSeq <= NumberOfTaxesReturned)
						ReturnedTaxType																= ResponseXML select "
						VertexTaxResult											= ResponseXML select "
						ReturnedVertexStatus = VertexTaxResult
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId			 	= OutputGeoCode
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel  	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= EffectiveDate	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= ResponseXML select "
						ReturnedSitusLocation														= ResponseXML select "
						IsService																	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
						InputOutputType																= ResponseXML select "
						if (VertexTaxResult = "TAXABLE")
							RateClassificationText													= ResponseXML select "
						ReturnedVertexTaxCode	 													= ResponseXML select "
						TaxStructure																= ResponseXML select "
						SummaryInvoiceText															= ResponseXML select "
						NotRegisteredIndicator 														= ResponseXML select "
						ReturnedUserDefinedTaxCode													= ResponseXML select "
						InputOutputType																= ResponseXML select "
						Imposition																	= ResponseXML select "
						ReturnedJurisLevel 															= ResponseXML select "
						ReturnedImpositionType 														= ResponseXML select "
						if (NotRegisteredIndicator)	
							LocalContinue = true
						else	
							SellerRegistrationId													= ResponseXML select "
							BuyerRegistrationId														= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= ResponseXML select "
						LineEffectiveRate														 	= ResponseXML select "
						LineCalculatedTax += ResponseXML select "
						OutputTaxRate = OutputTaxRate + LineEffectiveRate
						ReturnedTotalRate = ReturnedTotalRate + LineEffectiveRate	
						LocalTestTaxTotal = LocalTestTaxTotal + LineCalculatedTax	
			
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= ResponseXML select "
						
						NbrOfFilingCurrencyAmounts													= ResponseXML select "count(
						if (NbrOfFilingCurrencyAmounts > 0)	 
							Idx2 = 1
							while (Idx2 <= NbrOfFilingCurrencyAmounts)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha	= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax			= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable				= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 	= ResponseXML select "
								Idx2 += 1	
						NumberOfInvoiceTextCodes = ResponseXML select "count(
						if (NumberOfInvoiceTextCodes > 0)	
							Idx2 = 1	
							while (Idx2 <= NumberOfInvoiceTextCodes
							or     Idx2 > 5)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= ResponseXML select "
								ReturnedInvoiceTextCode.InvoiceTextCode 								= ResponseXML select "
								LocalInvoiceTextCode.InvoiceTextCode 									= ResponseXML select "
								LocalExecuteReturnBlank = LoadInvoiceTextCodes  
								if (ReturnedSitusLocation = "DESTINATION"	 
								or  InputOutputType = "InputOutput")	
									if (ReturnedInvoiceTextCode.InvoiceTextCode = 4)	
										ReverseCharge = true						
								Idx2 += 1	
	
						LocalExecuteReturnBlank = LoadGlobalOutputValues	

						if (LocalReturnVertexTaxIn.Detail) 					
							LocalExecuteReturnBlank = LoadTaxDetail		
						
						
						increment JurisSeq
						if (JurisSeq > NumberOfTaxesReturned
						or  JurisSeq >= 8)									
							end while 	
						Counter = JurisSeq	
		
					Trigger = DoFinalResultsProcessing					
	
					Trigger = LoadJurisdictionResultsFile	

					if (CreateOutputUserFieldFile)	
						DistLine = ResponseXML select "
						Trigger	 = LoadVertexFlexibleFieldsOut
											
					LineItemNbrIdx +=1
				
			ResponseStopTimestamp = DerivedTimestamp time
				
			
		QuotationRequestUT is a DerivedField
  			type is Alpha 1	
  			LocalTrace = LocalTrace + "QuotationRequestUT,"
  			VertexRoutineExecuted = "QuotationRequestUT"						
			LocalVertexRequest = "Q"							

			RequestStartTimestamp = DerivedTimestamp time

			VertexAccessType = VertexConfigVersionGroupRel.VertexAccessType	 
			if (VertexAccessType.OAuth)
				invoke VertexTemplate90 VertexCalculateTax90OAuth				 
						resume on error										 
							WebServiceError = true							 
							WebServiceErrorMessage = error message			 			
						invoked.Request					= VertexCalculateTaxXml
						ResponseXML 					= result.Response
						MyHTTPInfo						= result.MyHTTPInfo				 	
			else			
				invoke VertexTemplate90 VertexCalculateTax90		
					resume on error										 
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= VertexCalculateTaxXml
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo		

			RequestStopTimestamp = DerivedTimestamp time
			
			ReturnedHTTPInfo					= MyHTTPInfo
			CapturedResponseXML					= ResponseXML				
			RequestXML 							= VertexCalculateTaxXml 	
			CapturedRequestXML					= VertexCalculateTaxXml
						
			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				Trigger = ParseWebserviceError	
				Trigger = CaptureXml												
			else
				CapturedXml = RequestXML + ResponseXML	
					
			if (WebServiceError)	
				LocalErrorCategory 		= "TXQNT"									
				LocalErrorNumber 	 	= 899										
				LocalExecuteReturnBlank = CreateTaxToLogFile						
				if (LocalCreateLogFile)	
					LocalExecuteReturnBlank = CreateTaxToLogFile
				return blank
			

			
			ResponseStartTimestamp = DerivedTimestamp time
			OutputInvoiceTotal					= ResponseXML select "
			OutputTotalTaxable					= ResponseXML select "
			ReturnedTotalTax					= ResponseXML select "
			OutputTotalTaxAmount				= ResponseXML select "
			ReturnedVertexStatus				= ResponseXML select "
			VertexTaxResult						= ResponseXML select "
			OutputGeoCode						= ResponseXML select "
			NumberOfTaxLineItems				= ResponseXML select "count(

			if (ProcessResponseUsingPartialXpath)
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					Trigger = InitializeOutputJurisdictions		  			
					initialize OutputTaxRate
					initialize ReturnedTotalRate					
					initialize DistLine
					DistLine = ResponseXML select "
					Trigger = LoadVertexPartiallyQualifiedLineXml	
					LineItemNbrIdx +=1
			else
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					initialize OutputTaxRate
					initialize ReturnedTotalRate					
					Trigger = InitializeOutputJurisdictions		
					ResponseBusclassKey 			= ResponseXML select "
					LineEffectiveRate				= ResponseXML select "
					LocalEachLineDestTaxAreaId		= ResponseXML select "
					if (LocalEachLineDestTaxAreaId entered)
						OutputGeoCode				= LocalEachLineDestTaxAreaId
					TaxingJurisdiction 				= OutputGeoCode		
					NumberOfTaxesReturned			= ResponseXML select "count(
					JurisSeq = 1				
					while (JurisSeq <= NumberOfTaxesReturned)
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId			 	= OutputGeoCode
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel  	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= EffectiveDate	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= ResponseXML select "
						ReturnedSitusLocation														= ResponseXML select "
						IsService																	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
						InputOutputType																= ResponseXML select "
						ReturnedTaxType																= ResponseXML select "
						VertexTaxResult															= ResponseXML select "
						ReturnedVertexStatus = VertexTaxResult
						if (VertexTaxResult = "TAXABLE")
							RateClassificationText													= ResponseXML select "
						ReturnedVertexTaxCode	 													= ResponseXML select "
						TaxStructure																= ResponseXML select "
						ReturnedTaxType																= ResponseXML select "
						SummaryInvoiceText															= ResponseXML select "
						NotRegisteredIndicator 														= ResponseXML select "
						ReturnedUserDefinedTaxCode													= ResponseXML select "
						InputOutputType																= ResponseXML select "
						Imposition																	= ResponseXML select "
						ReturnedJurisLevel 															= ResponseXML select "
						ReturnedImpositionType 														= ResponseXML select "
						if (NotRegisteredIndicator)	 
							LocalContinue = true
						else
							SellerRegistrationId													= ResponseXML select "
							BuyerRegistrationId														= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= ResponseXML select "
						LineEffectiveRate														 	= ResponseXML select "
						OutputTaxRate = OutputTaxRate + LineEffectiveRate
						LineCalculatedTax += ResponseXML select "
						ReturnedTotalRate = ReturnedTotalRate + LineEffectiveRate	
						LocalTestTaxTotal = LocalTestTaxTotal + LineCalculatedTax	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= ResponseXML select "
						
						NbrOfFilingCurrencyAmounts													= ResponseXML select "count(
						if (NbrOfFilingCurrencyAmounts > 0)	 
							Idx2 = 1
							while (Idx2 <= NbrOfFilingCurrencyAmounts)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha	= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax			= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable				= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 	= ResponseXML select "
								Idx2 += 1	
						NumberOfInvoiceTextCodes = ResponseXML select "count(
						if (NumberOfInvoiceTextCodes > 0)	
							Idx2 = 1	
							while (Idx2 <= NumberOfInvoiceTextCodes)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= ResponseXML select "
								ReturnedInvoiceTextCode.InvoiceTextCode 								= ResponseXML select "
								LocalInvoiceTextCode.InvoiceTextCode 									= ResponseXML select "
								LocalExecuteReturnBlank = LoadInvoiceTextCodes 
								if (ReturnedSitusLocation = "DESTINATION"	 
								or  InputOutputType = "InputOutput")	
									if (ReturnedInvoiceTextCode.InvoiceTextCode = 4)	
										ReverseCharge = true						
								Idx2 +=1	
						LocalExecuteReturnBlank = LoadGlobalOutputValues	
											
						if (LocalReturnVertexTaxIn.Detail) 					
							LocalExecuteReturnBlank = LoadTaxDetail		
						
								
						increment JurisSeq
						if (JurisSeq > NumberOfTaxesReturned
						or  JurisSeq >= 8)						 
							end while 	
						Counter = JurisSeq	
		
					Trigger = DoFinalResultsProcessing		
	
					Trigger = LoadJurisdictionResultsFile	

					if (CreateOutputUserFieldFile)	
						DistLine = ResponseXML select "
						Trigger	 = LoadVertexFlexibleFieldsOut
											
					LineItemNbrIdx +=1  
			
			ResponseStopTimestamp = DerivedTimestamp time	
			
	
		InvoiceRequestUT is a DerivedField
  			type is Alpha 1
  			LocalTrace = LocalTrace + "InvoiceRequestUT,"
			VertexRoutineExecuted = "InvoiceRequestUT"
			LocalVertexRequest = "I"									 

			RequestStartTimestamp = DerivedTimestamp time

			VertexAccessType = VertexConfigVersionGroupRel.VertexAccessType	 
			if (VertexAccessType.OAuth)
				invoke VertexTemplate90 VertexCalculateTax90OAuth				 
						resume on error										 
							WebServiceError = true							 
							WebServiceErrorMessage = error message			 			
						invoked.Request					= VertexCalculateTaxXml
						ResponseXML 					= result.Response
						MyHTTPInfo						= result.MyHTTPInfo				 	
			else			
				invoke VertexTemplate90 VertexCalculateTax90	
					resume on error										 
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= VertexCalculateTaxXml
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo		
			
			RequestStopTimestamp = DerivedTimestamp time
			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				Trigger = ParseWebserviceError	
			
			Trigger = CaptureXml					
			if (WebServiceError)
				return blank
				
			RequestXML 							= VertexCalculateTaxXml 	
			CapturedRequestXML					= VertexCalculateTaxXml			
			CapturedResponseXML					= ResponseXML		

			CapturedXml = RequestXML + ResponseXML	
			
			ResponseStartTimestamp = DerivedTimestamp time
			OutputInvoiceTotal					= ResponseXML select "
			OutputTotalTaxable					= ResponseXML select "
			ReturnedTotalTax					= ResponseXML select "
			OutputTotalTaxAmount				= ResponseXML select "
			ReturnedVertexStatus				= ResponseXML select "
			VertexTaxResult						= ResponseXML select "
			OutputGeoCode						= ResponseXML select "
			NumberOfTaxLineItems				= ResponseXML select "count(
			
			if (ProcessResponseUsingPartialXpath)
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					Trigger = InitializeOutputJurisdictions		  			
					initialize OutputTaxRate
					initialize ReturnedTotalRate					
					initialize DistLine
					DistLine = ResponseXML select "
					Trigger = LoadVertexPartiallyQualifiedLineXml	 
					LineItemNbrIdx +=1
			else
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					initialize OutputTaxRate
					initialize ReturnedTotalRate			
					Trigger = InitializeOutputJurisdictions		
					ResponseBusclassKey 			= ResponseXML select "
					LineEffectiveRate				= ResponseXML select "
					LocalEachLineDestTaxAreaId		= ResponseXML select "
					if (LocalEachLineDestTaxAreaId entered)
						OutputGeoCode				= LocalEachLineDestTaxAreaId
					TaxingJurisdiction 				= OutputGeoCode		
					NumberOfTaxesReturned			= ResponseXML select "count(
					JurisSeq = 1				
					while (JurisSeq <= NumberOfTaxesReturned)
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId			 	= OutputGeoCode
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel  	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= EffectiveDate	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= ResponseXML select "
						ReturnedSitusLocation														= ResponseXML select "
						IsService																	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
						InputOutputType																= ResponseXML select "
						ReturnedVertexTaxCode	 													= ResponseXML select "
						TaxStructure																= ResponseXML select "
						SummaryInvoiceText															= ResponseXML select "
						NotRegisteredIndicator 														= ResponseXML select "
						ReturnedUserDefinedTaxCode													= ResponseXML select "
						InputOutputType																= ResponseXML select "
						Imposition																	= ResponseXML select "
						ReturnedTaxType																= ResponseXML select "
						VertexTaxResult																= ResponseXML select "
						ReturnedVertexStatus = VertexTaxResult
						if (VertexTaxResult = "TAXABLE")
							RateClassificationText													= ResponseXML select "
						ReturnedJurisLevel 															= ResponseXML select "
						ReturnedImpositionType 														= ResponseXML select "
						if (NotRegisteredIndicator)	
							LocalContinue = true
						else
							SellerRegistrationId													= ResponseXML select "
							BuyerRegistrationId														= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= ResponseXML select "
						LineEffectiveRate														 	= ResponseXML select "
						OutputTaxRate = OutputTaxRate + LineEffectiveRate
						LineCalculatedTax += ResponseXML select "
						ReturnedTotalRate = ReturnedTotalRate + LineEffectiveRate	
						LocalTestTaxTotal = LocalTestTaxTotal + LineCalculatedTax	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= ResponseXML select "
						
						NbrOfFilingCurrencyAmounts													= ResponseXML select "count(
						if (NbrOfFilingCurrencyAmounts > 0)	
							Idx2 = 1
							while (Idx2 <= NbrOfFilingCurrencyAmounts)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha	= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax			= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable				= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 	= ResponseXML select "
								Idx2 += 1	
						NumberOfInvoiceTextCodes = ResponseXML select "count(
						if (NumberOfInvoiceTextCodes > 0)	
							Idx2 = 1	
							while (Idx2 <= NumberOfInvoiceTextCodes
							or     Idx2 > 5)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= ResponseXML select "
								ReturnedInvoiceTextCode.InvoiceTextCode 								= ResponseXML select "
								LocalInvoiceTextCode.InvoiceTextCode 									= ResponseXML select "
								LocalExecuteReturnBlank = LoadInvoiceTextCodes 
								if (ReturnedSitusLocation = "DESTINATION"	 
								or  InputOutputType = "InputOutput")	
									if (ReturnedInvoiceTextCode.InvoiceTextCode = 4)	
										ReverseCharge = true						
								Idx2 += 1	
						LocalExecuteReturnBlank = LoadGlobalOutputValues	
											
						if (LocalReturnVertexTaxIn.Detail) 					
							LocalExecuteReturnBlank = LoadTaxDetail		
						
						increment JurisSeq
						if (JurisSeq > NumberOfTaxesReturned
						or  JurisSeq >= 8)									
							end while 	
						Counter = JurisSeq	
		
					Trigger = DoFinalResultsProcessing		
	
					Trigger = LoadJurisdictionResultsFile				 

					if (CreateOutputUserFieldFile)	
						DistLine = ResponseXML select "
						Trigger	 = LoadVertexFlexibleFieldsOut
														
					LineItemNbrIdx +=1

			ResponseStopTimestamp = DerivedTimestamp time	
										

		LoadVertexPartiallyQualifiedLineXml is a DerivedField		
  			type is Alpha 1
  			LocalTrace = LocalTrace + "LoadVertexPartiallyQualifiedLineXml,"
			LocalTrigger2 = ClearTaxTableOut	
			Trigger 							= LoadVertexFlexibleFieldsOut
			ResponseBusclassKey 				= DistLine select "/LineItem/@lineItemNumber"
			NumberOfTaxesReturned				= DistLine select "count(/LineItem/Taxes)" 			
			if (LocalVertexRequest.QuotationRequest
			or  LocalVertexRequest.InvoiceRequest)
				LocalEachLineDestTaxAreaId		= DistLine select "/LineItem/Customer/Destination/@taxAreaId"
			else
				LocalEachLineDestTaxAreaId		= DistLine select "/LineItem/Buyer/Destination/@taxAreaId"
			if (LocalEachLineDestTaxAreaId entered)
				OutputGeoCode					= LocalEachLineDestTaxAreaId				
			TaxingJurisdiction 					= OutputGeoCode 
			ProcessType = 0																						
			JurisSeq = 1								
			while (JurisSeq <= NumberOfTaxesReturned)
				ReturnedVertexStatus = VertexTaxResult
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId			 	= OutputGeoCode
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel  	= DistLine select "/LineItem/Taxes[<JurisSeq>]/Jurisdiction/@jurisdictionLevel"					
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= EffectiveDate	
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= DistLine select "/LineItem/Taxes[<JurisSeq>]/CalculatedTax"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= DistLine select "/LineItem/Taxes[<JurisSeq>]/EffectiveRate"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= DistLine select "/LineItem/Taxes[<JurisSeq>]/Taxable"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= DistLine select "/LineItem/Taxes[<JurisSeq>]/Jurisdiction"	
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= DistLine select "/LineItem/Taxes[<JurisSeq>]/Jurisdiction/@jurisdictionId"	
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= DistLine select "/LineItem/Taxes[<JurisSeq>]/@taxType"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= DistLine select "/LineItem/Taxes[<JurisSeq>]/@situs"
				ReturnedSitusLocation														= DistLine select "/LineItem/Taxes[<JurisSeq>]/@situs"
				ReturnedRuleId																= DistLine select "/LineItem/Taxes[<JurisSeq>]/TaxRuleId"
				ReturnedTaxType																= DistLine select "/LineItem/Taxes[<JurisSeq>]/@taxType"
				if (ReturnedTaxType	 = "VAT")	
				    ProcessType	= 1
				VertexTaxResult	 															= DistLine select "/LineItem/Taxes[<JurisSeq>]/@taxResult"
				IsService																	= DistLine select "/LineItem/Taxes[<JurisSeq>]/@isService"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= DistLine select "/LineItem/Taxes[<JurisSeq>]/@isService"
				InputOutputType																= DistLine select "/LineItem/Taxes[<JurisSeq>]/@inputOutputType"	 
				if (ReturnedTaxType = "TAXABLE")
					RateClassificationText													= DistLine select "/LineItem/Taxes[<JurisSeq>]/@rateClassification"	  
				ReturnedVertexTaxCode	 													= DistLine select "/LineItem/Taxes[<JurisSeq>]/@vertexTaxCode"
				TaxStructure																= DistLine select "/LineItem/Taxes[<JurisSeq>]/@taxStructure"
				SummaryInvoiceText															= DistLine select "/LineItem/Taxes[<JurisSeq>]/SummaryInvoiceText"
				NotRegisteredIndicator 														= DistLine select "/LineItem/Taxes[<JurisSeq>]/@notRegisteredIndicator"	
				ReturnedUserDefinedTaxCode													= DistLine select "/LineItem/Taxes[<JurisSeq>]/@taxCode"	
				InputOutputType																= DistLine select "/LineItem/Taxes[<JurisSeq>]/@inputOutputType"
				if (Imposition not entered) 
					Imposition																= DistLine select "/LineItem/Taxes[<JurisSeq>]/Imposition"
				ReturnedJurisLevel 															= DistLine select "/LineItem/Taxes[<JurisSeq>]/Jurisdiction/@jurisdictionLevel"
				if (ReturnedImpositionType not entered) 
					ReturnedImpositionType 													= DistLine select "/LineItem/Taxes[<JurisSeq>]/ImpositionType"
				if (NotRegisteredIndicator)	
					LocalContinue = true
				else	
					SellerRegistrationId													= DistLine select "/LineItem/Taxes[<JurisSeq>]/SellerRegistrationId"
					BuyerRegistrationId														= DistLine select "/LineItem/Taxes[<JurisSeq>]/BuyerRegistrationId"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = DistLine select "/LineItem/Taxes[<JurisSeq>]/@taxCollectedFromParty"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= DistLine select "/LineItem/Taxes[<JurisSeq>]/Taxable"	
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= DistLine select "/LineItem/Taxes[<JurisSeq>]/Imposition"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= DistLine select "/LineItem/Taxes[<JurisSeq>]/ImpositionType"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= DistLine select "/LineItem/Taxes[<JurisSeq>]/TaxRuleId"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= DistLine select "/LineItem/Taxes[<JurisSeq>]/@taxResult"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= DistLine select "/LineItem/Taxes[<JurisSeq>]/SummaryInvoiceText"	 
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= DistLine select "/LineItem/Taxes[<JurisSeq>]/@inputOutputType"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= DistLine select "/LineItem/Taxes[<JurisSeq>]/@rateClassification"	
				LineEffectiveRate = DistLine select "/LineItem/Taxes[<JurisSeq>]/EffectiveRate"				
				LineCalculatedTax += DistLine select "/LineItem/Taxes[<JurisSeq>]/CalculatedTax"
				OutputTaxRate = OutputTaxRate + LineEffectiveRate
				ReturnedTotalRate = ReturnedTotalRate + LineEffectiveRate	 
				LocalTestTaxTotal = LocalTestTaxTotal + LineCalculatedTax	 
	
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= DistLine select "/LineItem/Taxes[<JurisSeq>]/@isService"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= DistLine select "/LineItem/Taxes[<JurisSeq>]/SellerRegistrationId"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= DistLine select "/LineItem/Taxes[<JurisSeq>]/BuyerRegistrationId"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= DistLine select "/LineItem/Taxes[<JurisSeq>]/RecoverableAmount"
				OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= DistLine select "/LineItem/Taxes[<JurisSeq>]/RecoverablePercent"	
				
				NbrOfFilingCurrencyAmounts													= DistLine select "count(/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts)"
				if (NbrOfFilingCurrencyAmounts > 0)	 
					Idx2 = 1
					while (Idx2 <= NbrOfFilingCurrencyAmounts)
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha	= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/CurrencyConversion/@isoCurrencyCodeAlpha"	 
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum		= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/CurrencyConversion/@isoCurrencyCodeNum" 
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion		= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/CurrencyConversion"										
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable					= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/FilingTaxable"
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax			= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/FilingCalculatedTax"
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt					= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/FilingExempt" 
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable				= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/FilingNonTaxable" 
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount		= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/FilingRecoverableAmount" 	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 	= DistLine select "/LineItem/Taxes[<JurisSeq>]/FilingCurrencyAmounts/FilingUnrecoverableAmount" 													
						Idx2 += 1	
						
				NumberOfInvoiceTextCodes = DistLine select "count(/LineItem/Taxes[<JurisSeq>]/InvoiceTextCode)"
				if (NumberOfInvoiceTextCodes > 0)	
					Idx2 = 1	
					while (Idx2 <= NumberOfInvoiceTextCodes
					or     Idx2 > 5)
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= DistLine select "/LineItem/Taxes[<JurisSeq>]/InvoiceTextCode[<Idx2>]" 
						ReturnedInvoiceTextCode.InvoiceTextCode 								= DistLine select "/LineItem/Taxes[<JurisSeq>]/InvoiceTextCode[<Idx2>]"
						LocalInvoiceTextCode.InvoiceTextCode 									= DistLine select "/LineItem/Taxes[<JurisSeq>]/InvoiceTextCode[<Idx2>]" 
						LocalExecuteReturnBlank = LoadInvoiceTextCodes  
						if (ReturnedSitusLocation = "DESTINATION"	 
						or  InputOutputType = "InputOutput")	
							if (ReturnedInvoiceTextCode.InvoiceTextCode = 4)	 		 
								ReverseCharge = true						
						Idx2 += 1	

				LocalExecuteReturnBlank = LoadGlobalOutputValues	 							

				LocalCalculatedTax 		= DistLine select "/LineItem/Taxes[<JurisSeq>]/CalculatedTax"
		        Trigger = DerivedSetAddToDetailYesOrNo				 					
				if (LocalReturnVertexTaxIn.Detail 					 
				and !LocalSkipAddingToDetail)						 
		    		if (JurisSeq <= 20)								 
						LocalExecuteReturnBlank = LoadTaxDetail		 
				
				increment JurisSeq							
				if (JurisSeq > NumberOfTaxesReturned
				or  JurisSeq > 20)						   
					end while 	

			Trigger = DoFinalResultsProcessing					   
			Trigger = LoadJurisdictionResultsFile	
			if (ProcessType.VAT)
				ReturnedTaxType = "VAT"
		
			return blank				
		
		DerivedMulipleLineItems is a DerivedField	 
			type is XMLDocument
			LocalTrace = LocalTrace + "DerivedMulipleLineItems,"	
			initialize LocalBuildMultilLineXml 	
			CountTaxLineItems = 0
			CountTaxLineItemsExcluded = 0
			TotalLineItemsProcessed = 0
			initialize LocalBuildMultilLineXml
			for each TaxLineItemsRel
				increment CountTaxLineItems
				if (each.ExcludeFromTaxEstimate)			
					increment CountTaxLineItemsExcluded		
				else					  
					increment TotalLineItemsProcessed
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + BeginLineItemTag
					if (each.LineItemNumber entered)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " lineItemNumber=" + DoubleQuote + each.LineItemNumber + DoubleQuote
					else
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " lineItemNumber=" + DoubleQuote + "1" + DoubleQuote					
		
					if (each.TaxDate entered)
						LocalConvertDate = each.TaxDate
					else
					if (LocalEffectiveDate entered)
						LocalConvertDate = LocalEffectiveDate
					else				
						LocalConvertDate = current corporate date	
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + " taxDate=" + DoubleQuote + DateAlpha10 + DoubleQuote 

					if (each.LineItemId entered)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " lineItemId=" + DoubleQuote + each.LineItemId + DoubleQuote
					if (each.CostCenter entered)	
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " costCenter="  + DoubleQuote + each.CostCenter + DoubleQuote			
					if (each.GeneralLedgerAccount entered)	
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " generalLedgerAccount="  + DoubleQuote + each.GeneralLedgerAccount + DoubleQuote	
					if (each.MaterialCode entered)			
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " materialCode="  + DoubleQuote + each.MaterialCode + DoubleQuote					
					if (each.Usage entered)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " usage="  + DoubleQuote + each.Usage + DoubleQuote			
					if (each.VendorSKU entered)				
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " vendorSKU="  + DoubleQuote + each.VendorSKU + DoubleQuote							

					LocalBuildMultilLineXml = LocalBuildMultilLineXml + EndAttributeTag

					if (each.ShipToTaxCode entered
					or  each.ShipToAddress entered)
						initialize LocalEachTaxCode 		 
						initialize LocalEachShipToAddress 				
						if (LocalVertexRequest.PurchaseOrderRequest		 
						or  LocalVertexRequest.AccrualRequest
						or  LocalVertexRequest.InvoiceVerificationRequest)	
							LocalEachTaxCode 		= each.ShipToTaxCode
							LocalEachShipToAddress 	= each.ShipToAddress
							LocalBuildMultilLineXml = LocalBuildMultilLineXml + DerivedLineLevelShipToBuyer	 
						else
						if (LocalVertexRequest.QuotationRequest			 
						or  LocalVertexRequest.InvoiceRequest)
							LocalEachTaxCode 		= each.ShipToTaxCode
							LocalEachShipToAddress 	= each.ShipToAddress
							LocalBuildMultilLineXml = LocalBuildMultilLineXml + DerivedLineLevelShipToCustomer	 
										 			
					if (each.Usage entered)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<Usage>" + each.Usage + "</Usage>"				
					if (each.Quantity entered)
						LocalAmount = each.Quantity	
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<Quantity>" + DerivedAmountNoComma + "</Quantity>"
					if (each.UnitPrice entered)	 
						LocalAmount = each.UnitPrice
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<UnitPrice>" + DerivedAmountNoComma + "</UnitPrice>"
					if (each.TaxableAmount entered)
						LocalAmount = each.TaxableAmount
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<ExtendedPrice>" + DerivedAmountNoComma + "</ExtendedPrice>" 				 	
					
					if (LocalVertexRequest.AccrualRequest
					or  LocalVertexRequest.InvoiceVerificationRequest)
						LocalAmount = each.ChargedTax
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<ChargedTax>" + DerivedAmountNoComma + "</ChargedTax>" 
					if (each.ProductTaxCategory entered)
						if (InputVertexRequest.AccrualRequest
						or  InputVertexRequest.PurchaseOrderRequest
						or  InputVertexRequest.InvoiceVerificationRequest)
							if (each.ProductClass not entered)	
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<Purchase>" + each.ProductTaxCategory + "</Purchase>"
							else
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<Purchase" + " productClass=" + DoubleQuote + each.ProductClass + DoubleQuote + ">" + each.ProductTaxCategory + "</Purchase>" 					
						else
							if (each.ProductClass not entered)	
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<Product>" + each.ProductTaxCategory + "</Product>"
							else
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<Product" + " productClass=" + DoubleQuote + each.ProductClass + DoubleQuote + ">" + each.ProductTaxCategory + "</Product>" 					

					if (each.CommodityCodeType entered
					and each.CommodityCode entered)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<CommodityCode" + " commodityCodeType=" + DoubleQuote + each.CommodityCodeType + DoubleQuote + ">" + each.CommodityCode + "</CommodityCode>" 

					if (HeaderFlexbibleFields250Exist)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + DerivedVertexAttributes250						
					else
						initialize LocalVertexAttributes									
						LocalTrigger 			= each.LoadVertexDerivedFields			  	
						LocalVertexAttributes 	= each.TransientVertexAttributes			
						LineItemFlexibleFields	= each.LineItemUserFieldsRel.FlexibleFields	
						LocalLineItemNbr 		= each.LineItemNumber	 					
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + DerivedLineFlexibleFields	

				LocalBuildMultilLineXml = LocalBuildMultilLineXml + EndLineItemTag	

			if (DisplayOn)	 
				if (LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[1].FieldId entered		 
				or  LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[1].FieldId entered   
				or  LineItemFlexibleFields.FlexibleDates.FlexibleDateField[1].FieldId entered)	 			
					DisplayMonitor = DisplayMonitor + "CalcTax[11864]:" + DisplayLineItemFlexibleFields + "<br>"  
				if (LocalVertexAttributes.VertexCodes.FlexibleCode[1].FieldId entered				 
				or  LocalVertexAttributes.VertexNumerics.FlexibleNumeric[1].FieldId entered			 
				or  LocalVertexAttributes.VertexDates.FlexibleDate[1].FieldId entered)
					DisplayMonitor = DisplayMonitor + "CalcTax[11868]:" + DisplayVertexFlexibleFields + "<br>" 

							
			return LocalBuildMultilLineXml 	


		DerivedLineLevelShipToBuyer is a DerivedField	  
			type is XMLDocument
			default label is untranslatable
			LocalTrace = LocalTrace + "DerivedLineLevelShipToBuyer,"	

			if (LocalEachTaxCode = "0"
			or  LocalEachTaxCode = "00")
				LocalEachTaxCode = blank

			if (LocalEachTaxCode not entered	
			and LocalEachShipToAddress.Country not entered)
				return blank
				 			
			initialize LocalDestAddressXml 
			
			if (SendAddressOrTaxAreaId.AddressOnly)		 
				initialize LocalEachTaxCode				 
			else	
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly)	 
				initialize LocalEachShipToAddress				
			if (LocalEachTaxCode not entered	
			and LocalEachShipToAddress.Country not entered)
				return blank

			LocalDestAddressXml = "<Buyer>"	
			
			if (LocalEachTaxCode not entered)
				LocalDestAddressXml = LocalDestAddressXml + "<Destination>"
			else	
				LocalDestAddressXml = LocalDestAddressXml + "<Destination" + " taxAreaId=" + DoubleQuote + LocalEachTaxCode + DoubleQuote + EndTag   	
			if (LocalEachShipToAddress.Country entered)
				if (LocalEachShipToAddress.DeliveryAddress.AddressLine1 entered)
					LocalDestAddressXml = LocalDestAddressXml + "<StreetAddress1>" + LocalEachShipToAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (LocalEachShipToAddress.Municipality entered)
					LocalDestAddressXml = LocalDestAddressXml + "<City>" + LocalEachShipToAddress.Municipality + "</City>"						
				if (LocalEachShipToAddress.StateProvince entered)
					LocalDestAddressXml = LocalDestAddressXml + "<MainDivision>" + LocalEachShipToAddress.StateProvince + "</MainDivision>"	
				if (LocalEachShipToAddress.County entered)
					LocalDestAddressXml = LocalDestAddressXml + "<SubDivision>" + LocalEachShipToAddress.County + "</SubDivision>"							
				if (LocalEachShipToAddress.PostalCode entered)
					LocalDestAddressXml = LocalDestAddressXml + "<PostalCode>" + LocalEachShipToAddress.PostalCode + "</PostalCode>"					
				LocalDestAddressXml = LocalDestAddressXml + "<Country>" + LocalEachShipToAddress.Country + "</Country>"	
				
			LocalDestAddressXml = LocalDestAddressXml + "</Destination>" 
			LocalDestAddressXml = LocalDestAddressXml + "</Buyer>" 			
			return LocalDestAddressXml  

		DerivedLineLevelShipToCustomer is a DerivedField	  
			type is XMLDocument
			default label is untranslatable	
			if (LocalEachTaxCode = "0"
			or  LocalEachTaxCode = "00")
				LocalEachTaxCode = blank

			if (LocalEachTaxCode not entered	
			and LocalEachShipToAddress.Country not entered)
				return blank
				 			
			initialize LocalDestAddressXml 

			if (SendAddressOrTaxAreaId.AddressOnly)		 
				initialize LocalEachTaxCode				 
			else	
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly)	 
				initialize LocalEachShipToAddress				
			if (LocalEachTaxCode not entered	
			and LocalEachShipToAddress.Country not entered)
				return blank

			LocalDestAddressXml = "<Customer>"	
			
			if (LocalEachTaxCode not entered)
				LocalDestAddressXml = LocalDestAddressXml + "<Destination>"
			else	
				LocalDestAddressXml = LocalDestAddressXml + "<Destination" + " taxAreaId=" + DoubleQuote + LocalEachTaxCode + DoubleQuote + EndTag   	
			if (LocalEachShipToAddress.Country entered)
				if (LocalEachShipToAddress.DeliveryAddress.AddressLine1 entered)
					LocalDestAddressXml = LocalDestAddressXml + "<StreetAddress1>" + LocalEachShipToAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (LocalEachShipToAddress.Municipality entered)
					LocalDestAddressXml = LocalDestAddressXml + "<City>" + LocalEachShipToAddress.Municipality + "</City>"						
				if (LocalEachShipToAddress.StateProvince entered)
					LocalDestAddressXml = LocalDestAddressXml + "<MainDivision>" + LocalEachShipToAddress.StateProvince + "</MainDivision>"	
				if (LocalEachShipToAddress.County entered)
					LocalDestAddressXml = LocalDestAddressXml + "<SubDivision>" + LocalEachShipToAddress.County + "</SubDivision>"							
				if (LocalEachShipToAddress.PostalCode entered)
					LocalDestAddressXml = LocalDestAddressXml + "<PostalCode>" + LocalEachShipToAddress.PostalCode + "</PostalCode>"					
				LocalDestAddressXml = LocalDestAddressXml + "<Country>" + LocalEachShipToAddress.Country + "</Country>"	
				
			LocalDestAddressXml = LocalDestAddressXml + "</Destination>" 
			LocalDestAddressXml = LocalDestAddressXml + "</Customer>" 			
			return LocalDestAddressXml  

		   
		ReturnedFieldIdNum is a DerivedField
			type is Date
			restricted
			return ReturnedFieldIdAlpha

		DerivedReturnedDate is a DerivedField
			type is Date
			restricted
			return LocalDateStripDashes
			
		LocalDateStripDashes is a DerivedField
			type is Alpha 10
			restricted
			return (LocalDateValue - "-")	
			
		ConvertAmountToNum is a DerivedField		
			type is like InternationalAmount 
			restricted			
			return LocalNumericValue[1:20]			
									
		ValidateTaxLineItemData  is a DerivedField
  			type is Alpha 1
  			if (BypassEditing						
  			or  BypassEditingTaxCode)				
  				return blank
  				
  			if (TaxLineItemsRel exist)
	 			for each TaxLineItemsRel 
	 				LineItemNumber = each.LineItemNumber 			
					if (each.TaxableAmount not entered	
					and each.UnitPrice entered	 
					and each.Quantity not entered)
						LocalErrorCategory 	= "TXQNT"
						LocalErrorNumber 	= 819	 
						return blank
						 					
					if (each.TaxableAmount not entered
					and each.InvoiceAmount not entered
					and each.UnitPrice     not entered)
						LocalErrorCategory 	= "TXQNT"				 
						LocalErrorNumber 	= 820	 				
						return blank 
					
								
			return blank
			
		DerivedPurchaseOrderRequest is a DerivedField	 
			type is XMLDocument	
			initialize LocalXml 
			LocalXml = "<PurchaseOrderRequest"
			LocalXml = LocalXml + DerivedTransactionXml				

			LocalXml = LocalXml + DerivedBuyerAddress	
			LocalXml = LocalXml + DerivedVendorAddress			
			if (TaxingLocation entered) 
				LocalXml = LocalXml + DerivedTaxingLocation	 

			if (SendMultLineItems													 
			and TaxLineItemsRel exist)	
				LocalXml = LocalXml + DerivedMulipleLineItems	
				if (TotalLineItemsProcessed = 0)	
					LocalXml = LocalXml + DerivedProcurementLineItems	
			else	
				LocalXml = LocalXml + DerivedProcurementLineItems	
			LocalXml = LocalXml + "</PurchaseOrderRequest>"	 
			return LocalXml

		PurchaseOrderRequestUT is a DerivedField
  			type is Alpha 1
  			LocalTrace = LocalTrace + "PurchaseOrderRequestUT,"
			VertexRoutineExecuted = "PurchaseOrderRequestUT"
			LocalVertexRequest = "P"									

			RequestStartTimestamp = DerivedTimestamp time

			VertexAccessType = VertexConfigVersionGroupRel.VertexAccessType	 
			if (VertexAccessType.OAuth)
				invoke VertexTemplate90 VertexCalculateTax90OAuth				 
						resume on error										 
							WebServiceError = true							 
							WebServiceErrorMessage = error message			 			
						invoked.Request					= VertexCalculateTaxXml
						ResponseXML 					= result.Response
						MyHTTPInfo						= result.MyHTTPInfo				 	
			else						
				invoke VertexTemplate90 VertexCalculateTax90				 
					resume on error										 
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= VertexCalculateTaxXml
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo		

			RequestStopTimestamp = DerivedTimestamp time

			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				Trigger = ParseWebserviceError	
			
			Trigger = CaptureXml					
			if (WebServiceError)											 
				return blank
			
			CapturedResponseXML					= ResponseXML		
				
			RequestXML 							= VertexCalculateTaxXml 	
			CapturedRequestXML					= VertexCalculateTaxXml

			CapturedXml = RequestXML + ResponseXML	
			
			ResponseStartTimestamp = DerivedTimestamp time
			OutputInvoiceTotal					= ResponseXML select "
			OutputTotalTaxable					= ResponseXML select "
			OutputTotalTaxAmount				= ResponseXML select "
			ReturnedTotalTax					= ResponseXML select "
			ReturnedVertexStatus				= ResponseXML select "
			OutputGeoCode						= ResponseXML select "
			NumberOfTaxLineItems				= ResponseXML select "count(
			
			if (ProcessResponseUsingPartialXpath)
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					Trigger = InitializeOutputJurisdictions		  			
					initialize OutputTaxRate
					initialize ReturnedTotalRate					
					initialize DistLine
					DistLine = ResponseXML select "
					Trigger = LoadVertexPartiallyQualifiedLineXml
					LineItemNbrIdx +=1
			else
				NumberOfTaxLineItems				= ResponseXML select "count(
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					initialize OutputTaxRate
					initialize ReturnedTotalRate			
					Trigger = InitializeOutputJurisdictions		
					ResponseBusclassKey 			= ResponseXML select "
					LineEffectiveRate				= ResponseXML select "
					LocalEachLineDestTaxAreaId		= ResponseXML select "
					if (LocalEachLineDestTaxAreaId entered)
						OutputGeoCode				= LocalEachLineDestTaxAreaId	
					TaxingJurisdiction 				= OutputGeoCode	
					NumberOfTaxesReturned			= ResponseXML select "count(
					JurisSeq = 1				
					while (JurisSeq <= NumberOfTaxesReturned)
						ReturnedTaxType	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId			 	= OutputGeoCode	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel  	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= EffectiveDate	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= ResponseXML select "
						ReturnedSitusLocation														= ResponseXML select "
						IsService																	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
						InputOutputType																= ResponseXML select "
						VertexTaxResult																= ResponseXML select "
						if (ReturnedVertexStatus not entered)
							ReturnedVertexStatus = VertexTaxResult
						if (VertexTaxResult = "TAXABLE")
							RateClassificationText													= ResponseXML select "
						ReturnedVertexTaxCode	 													= ResponseXML select "
						TaxStructure																= ResponseXML select "
						SummaryInvoiceText															= ResponseXML select "
						NotRegisteredIndicator 														= ResponseXML select "
						ReturnedUserDefinedTaxCode													= ResponseXML select "
						InputOutputType																= ResponseXML select "
						Imposition																	= ResponseXML select "
						ReturnedJurisLevel 															= ResponseXML select "
						ReturnedImpositionType 														= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= ResponseXML select "
						LineEffectiveRate														 	= ResponseXML select "
						OutputTaxRate = OutputTaxRate + LineEffectiveRate
						LineCalculatedTax += ResponseXML select "
						ReturnedTotalRate = ReturnedTotalRate + LineEffectiveRate	
						LocalTestTaxTotal = LocalTestTaxTotal + LineCalculatedTax	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= ResponseXML select "
						if (NotRegisteredIndicator)	
							LocalContinue = true
						else					
							SellerRegistrationId													= ResponseXML select "
							BuyerRegistrationId														= ResponseXML select "
						NbrOfFilingCurrencyAmounts													= ResponseXML select "count(
						if (NbrOfFilingCurrencyAmounts > 0)	
							Idx2 = 1
							while (Idx2 <= NbrOfFilingCurrencyAmounts)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha	= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax			= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable				= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 	= ResponseXML select "
								Idx2 += 1	
						NumberOfInvoiceTextCodes = ResponseXML select "count(
						if (NumberOfInvoiceTextCodes > 0)	 
							Idx2 = 1	
							while (Idx2 <= NumberOfInvoiceTextCodes
							or     Idx2 > 5)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= ResponseXML select "
								ReturnedInvoiceTextCode.InvoiceTextCode 								= ResponseXML select "
								LocalInvoiceTextCode.InvoiceTextCode 									= ResponseXML select "
								LocalExecuteReturnBlank = LoadInvoiceTextCodes 			
								if (ReturnedSitusLocation = "DESTINATION"	 
								or  InputOutputType = "InputOutput")	
									if (ReturnedInvoiceTextCode.InvoiceTextCode = 4)	
										ReverseCharge = true						
								Idx2 += 1	
						LocalExecuteReturnBlank = LoadGlobalOutputValues				
						
						if (LocalReturnVertexTaxIn.Detail) 								
							LocalExecuteReturnBlank = LoadTaxDetail	

						increment JurisSeq
						if (JurisSeq > NumberOfTaxesReturned
						or  JurisSeq >= 8)						 
							end while 	
						Counter = JurisSeq	
		
					Trigger = DoFinalResultsProcessing		
	
					Trigger = LoadJurisdictionResultsFile	

					if (CreateOutputUserFieldFile)	
						DistLine = ResponseXML select "
						Trigger	 = LoadVertexFlexibleFieldsOut
											
					LineItemNbrIdx +=1

			ResponseStopTimestamp = DerivedTimestamp time
												
		DerivedInvoiceVerificationRequest is a DerivedField	 
			type is XMLDocument	
			initialize LocalXml 
			LocalXml = "<InvoiceVerificationRequest"
			LocalXml = LocalXml + DerivedTransactionXml						 

			LocalXml = LocalXml + DerivedVendorAddress
			LocalXml = LocalXml + DerivedBuyerAddress	
			if (TaxingLocation entered) 
				LocalXml = LocalXml + DerivedTaxingLocation	 

			if (!SendMultLineItems			
			or  TaxLineItemsRel not exist)	
				LocalAmount = ChargedTaxAmount
				LocalXml = LocalXml + "<ChargedTax>" + DerivedAmountNoComma + "</ChargedTax>" 	
			if (SendMultLineItems													 
			and TaxLineItemsRel exist)	
				LocalXml = LocalXml + DerivedMulipleLineItems
				if (TotalLineItemsProcessed = 0)	
					LocalXml = LocalXml + DerivedProcurementLineItems					
			else	
				LocalXml = LocalXml + DerivedProcurementLineItems		
			LocalXml = LocalXml + "</InvoiceVerificationRequest>"	 
			return LocalXml

		InvoiceVerificationRequestUT is a DerivedField
  			type is Alpha 1
  			LocalTrace = LocalTrace + "InvoiceVerificationRequestUT,"
			VertexRoutineExecuted = "InvoiceVerificationRequestUT"
			LocalVertexRequest = "V"							 

			RequestStartTimestamp = DerivedTimestamp time

			VertexAccessType = VertexConfigVersionGroupRel.VertexAccessType	 
			if (VertexAccessType.OAuth)
				invoke VertexTemplate90 VertexCalculateTax90OAuth	
						resume on error										 
							WebServiceError = true							 
							WebServiceErrorMessage = error message			 			
						invoked.Request					= VertexCalculateTaxXml
						ResponseXML 					= result.Response
						MyHTTPInfo						= result.MyHTTPInfo				 	
			else						
				invoke VertexTemplate90 VertexCalculateTax90					 
					resume on error										 
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= VertexCalculateTaxXml
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo		

			RequestStopTimestamp = DerivedTimestamp time

			initialize HttpStatusCode							
			if (MyHTTPInfo.Failed)								
				WebServiceError = true							
				Trigger = ParseWebserviceError	
			
			Trigger = CaptureXml					
			if (WebServiceError)											 
				return blank
			
			CapturedResponseXML					= ResponseXML		
				
			RequestXML 							= VertexCalculateTaxXml 	
			CapturedRequestXML					= VertexCalculateTaxXml

			CapturedXml = RequestXML + ResponseXML	

			initialize ReturnedTaxVariance				 
			initialize ReturnedAdditionalTaxesDue		 
			initialize ReturnedOutsideThreshold	
			initialize LineItemChargedTax					
			initialize ReturnedTotalChargedTax		

			ResponseStartTimestamp = DerivedTimestamp time						
			OutputInvoiceTotal					= ResponseXML select "
			OutputTotalTaxable					= ResponseXML select "
			OutputTotalTaxAmount				= ResponseXML select "
			ReturnedTotalTax					= ResponseXML select "
			ReturnedAdditionalTaxesDue			= ResponseXML select "
			ReturnedVertexStatus				= ResponseXML select "
			VertexTaxResult						= ResponseXML select "
			OutputGeoCode						= ResponseXML select "
			ReturnedOutsideThreshold 			= ResponseXML select "
			ReturnedTaxVariance		 			= ResponseXML select "
			NumberOfTaxLineItems 				= ResponseXML select "count(
								
			if (ProcessResponseUsingPartialXpath)
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					Trigger = InitializeOutputJurisdictions		  			
					initialize OutputTaxRate
					initialize ReturnedTotalRate					
					initialize DistLine
					DistLine = ResponseXML select "
					Trigger = LoadVertexPartiallyQualifiedLineXml	 
					LineItemNbrIdx +=1
			else					
				LineItemNbrIdx = 1
				while (LineItemNbrIdx <= NumberOfTaxLineItems)
					initialize OutputTaxRate
					Trigger = InitializeOutputJurisdictions		
					if (SendMultLineItems)
						ReturnedOutsideThreshold 		= ResponseXML select "
						ReturnedTaxVariance		 		= ResponseXML select "
						LineItemChargedTax				= ResponseXML select "
						ReturnedTotalChargedTax += LineItemChargedTax
					ResponseBusclassKey 				= ResponseXML select "
					LineEffectiveRate					= ResponseXML select "
					LocalEachLineDestTaxAreaId			= ResponseXML select "
					if (LocalEachLineDestTaxAreaId entered)
						OutputGeoCode					= LocalEachLineDestTaxAreaId
					TaxingJurisdiction 					= OutputGeoCode	
					NumberOfTaxesReturned				= ResponseXML select "count(
					JurisSeq = 1				
					while (JurisSeq <= NumberOfTaxesReturned)
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxAreaId			 	= OutputGeoCode
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionLevel  	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveDate			= EffectiveDate	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].CalculatedTax 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].EffectiveRate 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Jurisdiction 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].JurisdictionId 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxType 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Situs 				= ResponseXML select "
						ReturnedSitusLocation														= ResponseXML select "
						IsService																	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
						InputOutputType																= ResponseXML select "
						VertexTaxResult															= ResponseXML select "
						ReturnedVertexStatus = VertexTaxResult
						if (VertexTaxResult = "TAXABLE")
							RateClassificationText													= ResponseXML select "
						ReturnedVertexTaxCode	 													= ResponseXML select "
						TaxStructure																= ResponseXML select "
						SummaryInvoiceText															= ResponseXML select "
						NotRegisteredIndicator 														= ResponseXML select "
						ReturnedUserDefinedTaxCode													= ResponseXML select "
						InputOutputType																= ResponseXML select "
						Imposition																	= ResponseXML select "
						ReturnedTaxType																= ResponseXML select "
						ReturnedJurisLevel 															= ResponseXML select "
						ReturnedImpositionType 														= ResponseXML select "
						if (NotRegisteredIndicator)	
							LocalContinue = true
						else					
							SellerRegistrationId													= ResponseXML select "
							BuyerRegistrationId														= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxCollectedFromParty = ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Taxable 				= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].Imposition 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].ImpositionType 		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxRuleId 			= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].TaxResult 			= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SummaryInvoiceText	= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InputOutputType		= ResponseXML select "
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RateClassificationText	= ResponseXML select "
						LineEffectiveRate														 	= ResponseXML select "
						OutputTaxRate = OutputTaxRate + LineEffectiveRate
						LineCalculatedTax += ResponseXML select "
						ReturnedTotalRate = ReturnedTotalRate + LineEffectiveRate	
						LocalTestTaxTotal = LocalTestTaxTotal + LineCalculatedTax	
						OutputJurisdictions.JurisdictionTableOutput[JurisSeq].IsService				= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].SellerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].BuyerRegistrationId	= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverableAmount		= ResponseXML select "
			 			OutputJurisdictions.JurisdictionTableOutput[JurisSeq].RecoverablePercent	= ResponseXML select "
						NbrOfFilingCurrencyAmounts													= ResponseXML select "count(
						if (NbrOfFilingCurrencyAmounts > 0)	 
							Idx2 = 1
							while (Idx2 <= NbrOfFilingCurrencyAmounts)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeAlpha	= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingIsoCurrencyCodeNum		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCurrencyConversion		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingTaxable					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingCalculatedTax			= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingExempt					= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingNonTaxable				= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingRecoverableAmount		= ResponseXML select "
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].FilingUnrecoverableAmount 	= ResponseXML select "
								Idx2 += 1	
						NumberOfInvoiceTextCodes = ResponseXML select "count(
						if (NumberOfInvoiceTextCodes > 0)	 
							Idx2 = 1	
							while (Idx2 <= NumberOfInvoiceTextCodes
							or     Idx2 > 5)
								OutputJurisdictions.JurisdictionTableOutput[JurisSeq].InvoiceTextCode	= ResponseXML select "
								ReturnedInvoiceTextCode.InvoiceTextCode 								= ResponseXML select "
								LocalInvoiceTextCode.InvoiceTextCode 									= ResponseXML select "
								LocalExecuteReturnBlank = LoadInvoiceTextCodes 
								if (ReturnedSitusLocation = "DESTINATION"	 
								or  InputOutputType = "InputOutput")	
									if (ReturnedInvoiceTextCode.InvoiceTextCode = 4)	
										ReverseCharge = true						
								Idx2 += 1	
						LocalExecuteReturnBlank = LoadGlobalOutputValues	
											
						if (LocalReturnVertexTaxIn.Detail) 					
							LocalExecuteReturnBlank = LoadTaxDetail		
						
								 			
						increment JurisSeq
						if (JurisSeq > NumberOfTaxesReturned
						or  JurisSeq >= 8)						 
							end while 	
						Counter = JurisSeq	
		
					Trigger = DoFinalResultsProcessing		
	
					Trigger = LoadJurisdictionResultsFile	

					if (CreateOutputUserFieldFile)	
						DistLine = ResponseXML select "
						Trigger	 = LoadVertexFlexibleFieldsOut
											
					LineItemNbrIdx +=1
				
			ResponseStopTimestamp = DerivedTimestamp time	
										

		DoFinalResultsProcessing is a DerivedField	
			type is Alpha 1
			LocalTrace = LocalTrace + "DoFinalResultsProcessing,"
			NumberOfTaxCodes = ResultsCount							
			initialize ResultsCount									
			if (ResultsCount > 1)
				LocalErrorNumber   = 803  	
				MultipleTaxAreaIds = true				
			if (OutputGeoCode entered)
				LocalExecuteReturnBlank = CreateTaxCodeMaster	
				if (LocalReturnVertexTaxIn.Detail)				 
					LocalContinueProcessing = true				 
				else	
					TaxTable.TaxTableOutput[1].TaxCode 					= OutputGeoCode
					TaxTable.TaxTableOutput[1].TaxRate					= ReturnedTotalRate
					TaxTable.TaxTableOutput[1].TaxPointDate 			= EffectiveDate	 					 
					TaxTable.TaxTableOutput[1].EffectiveDate			= EffectiveDate	 	 
					TaxTable.TaxTableOutput[1].InTaxAmount 				= ReturnedTotalTax
					TaxTable.TaxTableOutput[1].TaxAmount 				= ReturnedTotalTax				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 			= ReturnedTotalTax	
					if (TaxableAmount entered)			 
						TaxTable.TaxTableOutput[1].TaxableAmount 		= TaxableAmount
					else
						TaxTable.TaxTableOutput[1].TaxableAmount 		= OutputJurisdictions.JurisdictionTableOutput[1].Taxable	
					TaxTable.TaxTableOutput[1].Description				= ReturnedTaxAreaIdRel.Description	  	 
					TaxTable.TaxTableOutput[1].Flag						= blank															

				TaxCode = OutputGeoCode
				LocalExecuteReturnBlank = 5400LoadAccountInfo
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank

					
				
			return blank

		InitializeOutputJurisdictions is a DerivedField	 
			type is Alpha 1
			initialize TableIdx		
			initialize LineEffectiveRate
			initialize LineCalculatedTax
			initialize OutputTaxRate
			Idx = 1		
			while (Idx <= 20)				
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].TaxAreaId 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveDate
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].Situs
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].TaxResult										
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].TaxType
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].Jurisdiction
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionId
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionLevel														
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].CalculatedTax
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveRate
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].Taxable
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].Imposition
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].ImpositionType
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].TaxRuleId
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].TaxCollectedFromParty  						 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode		 	 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].SummaryInvoiceText	 	 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].IsService				 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].SellerRegistrationId	 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].BuyerRegistrationId	 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverableAmount		 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverablePercent	 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].InputOutputType		 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeAlpha		 	 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeNum			 	 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCurrencyConversion			 										
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingTaxable						 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCalculatedTax				 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingExempt						 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingNonTaxable					 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingRecoverableAmount			 	
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].FilingUnrecoverableAmount 	
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].RateClassificationText 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode1 
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode2 	
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode3 	
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode4 	
				initialize OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode5 
				Idx +=1
								
			return blank
				
	    VertexTaxAreaRequestXml is a DerivedField	  
	        type is XMLDocument
	        LocalVertexRequest = "L"
			LocalErrorCategory = "TXQNT"		
			if (VertexConfigVersionGroupRel.SecuredTrustedId entered)
				PasswordTypeUsed = 1
				LocalTrustedId = VertexConfigVersionGroupRel.SecuredTrustedId			
			else				
				PasswordTypeUsed = 0	
				LocalTrustedId	= VertexConfigVersionGroupRel.VertexEncryptedTrustedId	
				
								
			VertexTaxAreaRequestXml = template.VertexLookupTaxAreas90 document for this instance	 
			VertexTaxAreaRequestXml select "
			
			

		DerivedTaxAreaLookup90Xml is a DerivedField	 
			type is XMLDocument
			restricted
			
			initialize LocalVertexEnvelopeXml 
			LocalVertexEnvelopeXml = "<Login>"
			if (IUserName entered)		
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<UserName>" + IUserName + "</UserName>"						
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<Password>" + IPassword + "</Password>"	
			else	
			if (SecuredTrustedId entered)
				PasswordTypeUsed = 1
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<TrustedId>" + SecuredTrustedId + "</TrustedId>"	
			else
				PasswordTypeUsed = 0
				LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "<TrustedId>" + LocalTrustedId + "</TrustedId>"	
			LocalVertexEnvelopeXml = LocalVertexEnvelopeXml + "</Login>"
			return LocalVertexEnvelopeXml				

		DerivedLookupAddress is a DerivedField	
			type is XMLDocument	
			initialize LocalXmlString 
			
			if (PostalAddress.Country not entered
			and TaxCode entered)
				return DerivedLookupAddressFromTaxAreaId

			LocalXmlString = "<TaxAreaRequest>"
			LocalXmlString = LocalXmlString + "<TaxAreaLookup" + " asOfDate=" + DoubleQuote + EffectiveDateAlpha10 + DoubleQuote + ">"					
			LocalXmlString = LocalXmlString + "<PostalAddress>"
			if (PostalAddress.Country entered)
				if (PostalAddress.DeliveryAddress.AddressLine1 entered)
					LocalXmlString = LocalXmlString + "<StreetAddress1>" + PostalAddress.DeliveryAddress.AddressLine1 + "</StreetAddress1>"
				if (PostalAddress.Municipality entered)
					LocalXmlString = LocalXmlString + "<City>" + PostalAddress.Municipality + "</City>"						
				if (PostalAddress.StateProvince entered)
					LocalXmlString = LocalXmlString + "<MainDivision>" + PostalAddress.StateProvince + "</MainDivision>"	
				if (PostalAddress.County entered)
					LocalXmlString = LocalXmlString + "<SubDivision>" + PostalAddress.County + "</SubDivision>"							
				if (PostalAddress.PostalCode entered)
					LocalXmlString = LocalXmlString + "<PostalCode>" + PostalAddress.PostalCode + "</PostalCode>"					
				LocalXmlString = LocalXmlString + "<Country>" + PostalAddress.Country + "</Country>"		
			LocalXmlString = LocalXmlString + "</PostalAddress>"
			LocalXmlString = LocalXmlString + "</TaxAreaLookup>" 	
			LocalXmlString = LocalXmlString + "</TaxAreaRequest>" 			
			return LocalXmlString  	

		DerivedLookupAddressFromTaxAreaId is a DerivedField	
			type is XMLDocument	
			initialize LocalXmlString 
			LocalXmlString = "<TaxAreaRequest>"
			LocalXmlString = LocalXmlString + "<TaxAreaLookup" + " asOfDate=" + DoubleQuote + EffectiveDateAlpha10 + DoubleQuote + ">"									
			LocalXmlString = LocalXmlString + "<TaxAreaId>" + TaxCode + "</TaxAreaId>"
			LocalXmlString = LocalXmlString + "</TaxAreaLookup>" 	
			LocalXmlString = LocalXmlString + "</TaxAreaRequest>" 			
			return LocalXmlString 

		LoadLookupTaxAreaUTResults2 is a DerivedField	
			type is Alpha 1
			JurisIdx = 0
			Counter	= 1	
			ReturnedVertexStatus				    = ResponseXML select "
            if (ReturnedVertexStatus != "NORMAL")		
				return blank	
			NumberOfJurisdictions = ResponseXML select "count(
			while (JurisIdx <= NumberOfJurisdictions)		
				JurisIdx = JurisIdx + 1 
				ReturnedJurisLevel			    	= ResponseXML select "
				if (ReturnedJurisLevel = "City")
					OutputMultipleGeoCodes.GeoCodeTable[1].City          = ResponseXML select "
				if (ReturnedJurisLevel = "County")
					OutputMultipleGeoCodes.GeoCodeTable[1].County        = ResponseXML select "
			return blank 

		CheckTrustedId is a DerivedField	 	
  			type is Alpha 1

 			if (VertexConfigVersionGroupRel not exist)						 
				LocalErrorCategory = "TXQNT"
				LocalErrorNumber   = 822
				return blank
			if (VertexConfigVersionGroupRel.TrustedId not entered			 
			and VertexConfigVersionGroupRel.SecuredTrustedId not entered)	
				LocalErrorCategory 	 = "TXQNT" 
				LocalErrorNumber = 823
				return blank	

			return blank		 			
				 				
		CallVertexTaxAreaLookupUT is a DerivedField	 	 	
  			type is Alpha 1
  			VertexRoutineExecuted = "ReturnedGeoCode|VertexTaxAreaLookup-UserTemplate"
			initialize LocalErrorNumber					

			 	 
			VertexAccessType = VertexConfigVersionGroupRel.VertexAccessType  
			if (VertexAccessType.OAuth)
				invoke LookupTaxAreas90 VertexLookupTaxAreas90OAuth 					 
					resume on error										 
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= VertexTaxAreaRequestXml
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo			
			else			
				invoke LookupTaxAreas90 VertexLookupTaxAreas90 					 
					resume on error										 
						WebServiceError = true							 
						WebServiceErrorMessage = error message			 			
					invoked.Request					= VertexTaxAreaRequestXml
					ResponseXML 					= result.Response
					MyHTTPInfo						= result.MyHTTPInfo		

			initialize HttpStatusCode							
			
			Trigger = CaptureXml	
			if (WebServiceError
			or  MyHTTPInfo.Failed)
				WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml		
				return blank
			
			CapturedResponseXML					= ResponseXML		
				
			RequestXML 							= VertexTaxAreaRequestXml 	
			CapturedRequestXML					= VertexTaxAreaRequestXml

			CapturedXml = RequestXML + ResponseXML	
			
			NumberOfTaxesReturned				= ResponseXML select "count(
			NumberOfTaxAreaIdsReturned			= ResponseXML select "count(
			ResultsCount 						= ResponseXML select "count(
			ReturnedVertexStatus				= ResponseXML select "
			OutputAddrCleansingCode				= ResponseXML select "
			OutputAddrCleansingMsg				= ResponseXML select "

			Counter								= 1			
			while (Counter <= NumberOfTaxesReturned)
				OutputConfIndicator				= ResponseXML select "
				OutputGeoCode					= ResponseXML select "
				NumberOfAddressesReturned		= ResponseXML select "count(
				NumberOfJurisdictions			= ResponseXML select "count(

				increment Counter
				if (Counter > NumberOfTaxesReturned)						
					end while 	

			DisplayMonitor = DisplayMonitor + "CalcTax[12776]ResultsCount.............:" + ResultsCount	+ "<br>" 
			DisplayMonitor = DisplayMonitor + "CalcTax[12777]NumberOfAddressesReturned:" + NumberOfAddressesReturned	+ "<br>" 


			if (ResultsCount = 1
			and NumberOfAddressesReturned = 1)		
				OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode 				= ResponseXML select "
				OutputMultipleGeoCodes.GeoCodeTable[1].StreetAddressLine1	= ResponseXML select "
				OutputMultipleGeoCodes.GeoCodeTable[1].City					= ResponseXML select "
				OutputMultipleGeoCodes.GeoCodeTable[1].StateProvince 	 	= ResponseXML select "
				OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode	 		= ResponseXML select "
				OutputMultipleGeoCodes.GeoCodeTable[1].County 				= ResponseXML select "
				OutputMultipleGeoCodes.GeoCodeTable[1].Country 				= ResponseXML select "

			return blank  

		LoadLookupTaxAreaUTResults is a DerivedField		 					 	 
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadLookupTaxAreaUTResults,"
			initialize TaxAreaResultSeq			 
			initialize PostalAddressResultSeq		 
			initialize JurisResultSeq				 
			initialize StatusResultSeq	
				
			invoke Delete VertexTaxAreaIdResultsRel		 
							
			Counter	= 1	
			while (Counter <= NumberOfTaxAreaIdsReturned)
				OutputConfIndicator				= ResponseXML select "
				ReturnedConfInd					= ResponseXML select "
				OutputGeoCode					= ResponseXML select "
				ReturnedTaxAreaId				= ResponseXML select "
				if (Output1stTaxAreaId not entered)					
					Output1stTaxAreaId = ReturnedTaxAreaId			
				NumberOfAddressesReturned		= ResponseXML select "count(
				NumberOfJurisdictions			= ResponseXML select "count(
				NumberOfStatusesReturned		= ResponseXML select "count(
				TaxAreaResultSeq = TaxAreaResultSeq + 1
				invoke Create VertexTaxAreaIdResults
					invoked.VertexConfig			   					= DerivedFinanceEnterpriseGroup
					invoked.VertexTaxAreaIdResults.LookupKey 			= NewLookupKey
					invoked.VertexTaxAreaIdResults.ResponseBusclassKey	= NewLookupKeySequence		
					invoked.VertexTaxAreaIdResults.Sequence				= TaxAreaResultSeq 
					invoked.RelatedObjectReference						= RelatedObjectReference
					invoked.RelatedSystem								= System
					invoked.TaxAreaId 									= ResponseXML select "
					LocalConvertDate									= ResponseXML select "
					invoked.AsOfDate 									= DerivedAsOfDate	 
					invoked.ConfidenceIndicator 						= ResponseXML select "
					invoked.EntityTaxCodeDefault 	 					= blank

				JurisIdx = 1
				while (JurisIdx <= NumberOfJurisdictions)		
					JurisResultSeq = JurisResultSeq + 1
					invoke Create VertexTaxAreaIdJurisdiction
						invoked.VertexConfig			   						= DerivedFinanceEnterpriseGroup
						invoked.VertexTaxAreaIdJurisdiction.LookupKey 			= NewLookupKey
						invoked.VertexTaxAreaIdJurisdiction.ResponseBusclassKey	= NewLookupKeySequence		
						invoked.VertexTaxAreaIdJurisdiction.Sequence			= JurisResultSeq
						invoked.TaxAreaId										= ReturnedTaxAreaId
						invoked.Jurisdiction 									= ResponseXML select "
						invoked.JurisdictionLevel 								= ResponseXML select "
						invoked.JurisdictionId 									= ResponseXML select "
						LocalConvertDate										= ResponseXML select "
						invoked.EffectiveDate 									= ResponseXML select "
						LocalConvertDate										= ResponseXML select "
						invoked.ExpirationDate 									= ResponseXML select "

					increment JurisIdx
					if (JurisIdx > NumberOfTaxAreaIdsReturned)						 
						end while
			
				AddrIdx = 1
				while (AddrIdx <= NumberOfAddressesReturned)		
					PostalAddressResultSeq = PostalAddressResultSeq + 1
					LocalStreetAddress1 = ResponseXML select "
					LocalCity 	 		= ResponseXML select "
					LocalState 	 		= ResponseXML select "
					LocalZip 	 		= ResponseXML select "
					LocalCounty	 		= ResponseXML select "
					LocalCountry 		= ResponseXML select "
					LocalCityStateZip = LocalCity + ", " + LocalState + " " + LocalZip
					invoke Create VertexTaxAreaIdPostalAddress
						invoked.VertexConfig			   							= DerivedFinanceEnterpriseGroup
						invoked.VertexTaxAreaIdPostalAddress.LookupKey 				= NewLookupKey
						invoked.VertexTaxAreaIdPostalAddress.ResponseBusclassKey	= NewLookupKeySequence		
						invoked.VertexTaxAreaIdPostalAddress.Sequence				= PostalAddressResultSeq		
						invoked.TaxAreaId											= ReturnedTaxAreaId
						invoked.StreetAddress1										= ResponseXML select "
						invoked.City												= ResponseXML select "
						invoked.MainDivision										= ResponseXML select "
						invoked.SubDivision											= ResponseXML select "
						invoked.PostalCode											= ResponseXML select "
						invoked.Country												= ResponseXML select "


					if (AddrIdx < 8)
						OutputMultipleGeoCodes.GeoCodeTable[AddrIdx].StreetAddressLine1	= LocalStreetAddress1
						OutputMultipleGeoCodes.GeoCodeTable[AddrIdx].City 				= LocalCity	
						OutputMultipleGeoCodes.GeoCodeTable[AddrIdx].StateProvince 	 	= LocalState	  
						OutputMultipleGeoCodes.GeoCodeTable[AddrIdx].PostalCode 		= LocalZip
						OutputMultipleGeoCodes.GeoCodeTable[AddrIdx].County 			= LocalCounty
						OutputMultipleGeoCodes.GeoCodeTable[AddrIdx].Country 			= LocalCountry

					DisplayMonitor = DisplayMonitor + "[12746]CalcTax]LoadLookupTaxAreaUTResults:" + OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode	+ "<br>" 
					if (OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode not entered)		
						LocalConfidenceInd 												= ReturnedConfInd
						OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode 					= ReturnedTaxAreaId
						OutputMultipleGeoCodes.GeoCodeTable[1].StateProvince 			= LocalState	 	  
						OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode 				= LocalZip		 
						OutputMultipleGeoCodes.GeoCodeTable[1].County 					= LocalCounty	 
						OutputMultipleGeoCodes.GeoCodeTable[1].Country 					= LocalCountry	 	
					DisplayMonitor = DisplayMonitor + "[12755]CalcTax]LoadLookupTaxAreaUTResults:" + OutputMultipleGeoCodes.GeoCodeTable[1].GeoCode	+ "<br>" 

					increment AddrIdx
					if (AddrIdx  > NumberOfAddressesReturned)						 
						end while
										
				StatusIdx = 1
				while (StatusIdx <= NumberOfStatusesReturned)	
					StatusResultSeq = StatusResultSeq + 1
					invoke Create VertexTaxAreaIdStatusResults
						invoked.VertexConfig			   							= DerivedFinanceEnterpriseGroup
						invoked.VertexTaxAreaIdStatusResults.LookupKey 				= NewLookupKey
						invoked.VertexTaxAreaIdStatusResults.ResponseBusclassKey	= NewLookupKeySequence		
						invoked.VertexTaxAreaIdStatusResults.Sequence				= StatusResultSeq	
						invoked.TaxAreaId											= ReturnedTaxAreaId
						invoked.LookupResult 										= ResponseXML select "

					increment StatusIdx
					if (StatusIdx  > NumberOfStatusesReturned)						 
						end while

				increment Counter
				if (Counter  > NumberOfTaxAreaIdsReturned)						 
					end while 	
												
			return blank		


		CreateLogFileIfError is a DerivedField	 			 
			type is Alpha 1
			LocalTrace = LocalTrace + "CreateLogFileIfError,"
			CreateLogFileHere = true
			LocalInputOnly = true
			if (LocalCreateLogFile
			and DebugMode)
				LocalExecuteReturnBlank = CreateTaxToLogFile	
			return blank  
			
		ReturnErrorMessages is a LabelField
			"CalculateTax-Function:<Function>,ErrorCategory:<LocalErrorCategory>,ErrorNumber:<LocalErrorNumber>,Message:<OutputErrorText>"
			
		OutputErrorNumber is a DerivedField	 			 
			type is Numeric 3
			LocalTrace = LocalTrace + "OutputErrorNumber,"
			OutputTaxCodeInError			= LocalTaxCodeInError	
					
			return LocalErrorNumber  													 

		OutputErrorMessage is a DerivedField	  
			type is MessageField
			LocalTrace = LocalTrace + "OutputErrorMessage,"
			if (DisplayOn)	
				display "[TLC:CalcTax1]Tax/Entity............:<TaxEntity>"		
				display "[TLC:CalcTax1]Tax/Entity.Third/Party:<TaxEntity.ThirdParty>"
				display "[TLC:CalcTax1]LocalErrorCategory....:<LocalErrorCategory>"
				display "[TLC:CalcTax1]LocalErrorNumber......:<LocalErrorNumber>"
				display "[TLC:CalcTax1]OutputErrorCategory...:<OutputErrorCategory>"
				display "[TLC:CalcTax1]DebugMode.............:<DebugMode>"
				display "[TLC:CalcTax1]ReturnErrorMessages...:<ReturnErrorMessages>"
			OutputErrorCategory = LocalErrorCategory
			ReturnedErrorNumber = LocalErrorNumber
			if (DebugMode)
				return ReturnErrorMessages 
			
			if  (TaxEntity.ThirdParty.VertexOSeries
			and  SendMultLineItems
			and  TaxLineItemsRel exist)
				return OutputErrorText + DerivedTaxLineItemLabel 
					
			return OutputErrorText  	
						
		OutputErrorText is a DerivedField	  
			type is MessageField
			LocalTrace = LocalTrace + "OutputErrorText,"
			OutputErrorCategory = LocalErrorCategory
							
			if (DisplayOn
			or TurnDisplaySw.On)
				display "[TLC:CalcTax2]LocalErrorCategory.:<LocalErrorCategory>"
				display "[TLC:CalcTax2]LocalErrorNumber...:<LocalErrorNumber>"
				display "[TLC:CalcTax2]OutputErrorCategory:<OutputErrorCategory>"
				display "[TLC:CalcTax2]TaxEntity.ThirdParty:<TaxEntity.ThirdParty>"
			if (LocalErrorCategory = "SABRX")
				if (LocalErrorNumber = 700)
					return Sabrix700	
				if (LocalErrorNumber = 701)
					return Sabrix701						
				if (LocalErrorNumber = 702)
					return Sabrix702	
				if (LocalErrorNumber = 703)
					return Sabrix703
				if (LocalErrorNumber = 704)
					return Sabrix704	
				if (LocalErrorNumber = 705)
					return Sabrix705
				if (LocalErrorNumber = 706)
					return Sabrix706		
				if (LocalErrorNumber = 707)
					return Sabrix707					
				if (LocalErrorNumber = 708)
					return Sabrix708	
				if (LocalErrorNumber = 709)
					return Sabrix709
				if (LocalErrorNumber = 710)
					return Sabrix710	
				if (LocalErrorNumber = 711)
					return Sabrix711																																		
			else								
			if (LocalErrorCategory = "TXQNT")
				if (LocalErrorNumber = 104)
					return Txqnt104					 
				if (LocalErrorNumber = 803)
					return Msg803
				if (LocalErrorNumber = 804)	
					return Msg804			
				if (LocalErrorNumber = 805)	  
					return Msg805	
				if (LocalErrorNumber = 806)	  
					return Msg806	
				if (LocalErrorNumber = 807)	  
					return Msg807	
				if (LocalErrorNumber = 808)	  
					return Msg808
				if (LocalErrorNumber = 809)	  
					return Msg809
				if (LocalErrorNumber = 810)	  
					return Msg810
				if (LocalErrorNumber = 811)	  
					return Msg811	
				if (LocalErrorNumber = 812)	  
					return Msg812				
				if (LocalErrorNumber = 813)	  
					return Msg813				
				if (LocalErrorNumber = 814)	  
					return Msg814				
				if (LocalErrorNumber = 815)	  
					return Msg815				
				if (LocalErrorNumber = 816)	  
					return Msg816		
				if (LocalErrorNumber = 817)	  	
					return Msg817	
				if (LocalErrorNumber = 818)	  	 
					return Msg818	
				if (LocalErrorNumber = 819)	  	 
					return Msg819		
				if (LocalErrorNumber = 820)	  	 
					return Msg820		
				if (LocalErrorNumber = 821)	  	 
					return Msg821		
				if (LocalErrorNumber = 822)	  	
					return Msg822		
				if (LocalErrorNumber = 823)	  	
					return Msg823	
				if (LocalErrorNumber = 824)	  	
					return Msg824		
				if (LocalErrorNumber = 825)	  	
					return Msg825	
				if (LocalErrorNumber = 826)	  	
					return Msg826
				if (LocalErrorNumber = 827)	  	
					return Msg827	
				if (LocalErrorNumber = 828)	  	
					return Msg828				
				if (LocalErrorNumber = 829)	  	
					return Msg829																																																																																																																													 	
				if (LocalErrorNumber = 899)
					return Msg899				
			else		
			if (LocalErrorCategory = "TXTXT")
				if (LocalErrorNumber = 202)
					return Txtxt202					 
				if (LocalErrorNumber = 204)
					return Txtxt204	
			else
				LocalErrorCategory = blank
				if (LocalErrorNumber = 100)
					return Msg100					
				if (LocalErrorNumber = 101)
					return Msg101					
				if (LocalErrorNumber = 102)
					return Msg102 					
				if (LocalErrorNumber = 104)
					return Msg104 					
				if (LocalErrorNumber = 103)
					return Msg103 					
				if (LocalErrorNumber = 105)
					return Msg105					
				if (LocalErrorNumber = 106)
					return Msg106					
				if (LocalErrorNumber = 107)
					return Msg107
				if (LocalErrorNumber = 108)
					return Msg108							
				if (LocalErrorNumber = 109)
					return Msg109 
				if (LocalErrorNumber = 110)
					return Msg110	
				if (LocalErrorNumber = 112)
					return Msg112
				if (LocalErrorNumber = 113)
					return Msg113	
				if (LocalErrorNumber = 200)
					return Msg200																							   				 
				if (LocalErrorNumber = 201)
					return Msg201	
				if (LocalErrorNumber = 202)
					return Msg202
				if (LocalErrorNumber = 203)
					return Msg203					
				if (LocalErrorNumber = 204)
					return Msg204									
				if (LocalErrorNumber = 205)
					return Msg205													
	 			if (LocalErrorNumber = 800)
					return Msg800		
	 			if (LocalErrorNumber = 801)
					return Msg801
	 			if (LocalErrorNumber = 802)
					return Msg802
				if (LocalErrorNumber = 803)
					return Msg803	
				if (LocalErrorNumber = 804)
					return Msg804									
				if (LocalErrorNumber = 899)
					return Msg899											
				if (LocalErrorNumber = 900)
					return Msg900
				if (LocalErrorNumber = 901)
					return Msg901
				if (LocalErrorNumber = 902)
					return Msg902															
				if (LocalErrorNumber = 903)
					return Msg903
				if (LocalErrorNumber = 904)
					return Msg904	
				if (LocalErrorNumber = 905)
					return Msg905				
				if (LocalErrorNumber = 906)
					return Msg906
				if (LocalErrorNumber = 907)
					return Msg907
				if (LocalErrorNumber = 908)
					return Msg908	
				if (LocalErrorNumber = 909)
					return Msg909	
				if (LocalErrorNumber = 910)
					return Msg910
				if (LocalErrorNumber = 911)
					return Msg911	
				if (LocalErrorNumber = 912)			
					return Msg912													
				if (LocalErrorNumber = 998)
					return Msg998																																						
				if (LocalErrorNumber = 999)
					return Msg999																			
 							 	
			return blank	

		Msg100 is a MessageField
			"TaxCodeRequired:<TaxCode>"	
				
		Msg101 is a MessageField
			"Taxable,InvoiceAmountOrUnitCostRequired"		

		Msg102 is a MessageField
			"TaxRateNotFoundForTaxCode:<OutputTaxCodeInError>" 		 

		Msg103 is a MessageField
			"UnableToDeriveABeginningTaxableAmount" 		 
		
		Msg104 is a MessageField
			"TaxPointIsInvoice;AnInvoiceDateIsRequired"	

		Msg105 is a MessageField
			"TaxPointIsPayment;APaymentDateIsRequired"		 
	
		Msg106 is a MessageField
			"TaxPointIsShipment;AShipmentDateIsRequired"	

		Msg107 is a MessageField
			"TaxEntityMustBeSetUp"		 
	
		Msg108 is a MessageField
			"TaxCodeIsMemberType;CannotUseAsStandalone"	
			
		Msg109 is a MessageField
			"TaxTableCodeMember:<LocalTaxCodeInError>NotSetupForEntity<TaxEntity>"		 
	
		Msg110 is a MessageField
			"Tax_\Code<TaxCode>NotSetupFor_\Entity<TaxEntity>"	

		Msg112 is a MessageField
			"CannotUseATaxTableForATaxOnlyInvoice"		 
	
		Msg113 is a MessageField
			"OnlyAPInvoicesCanUseCalculatedRateTypeTaxCode"	

		Msg200 is a MessageField
			"ATaxAmountIsRequired"		 
	
		Msg201 is a MessageField
			"ATaxableOrInvoiceAmountIsRequired"	

		Msg202 is a MessageField
			"Tax/TaxableAmountNotWithinToleranceRange"				

		Msg203 is a MessageField
			"TaxAmountDifferenceButNoToleranceSetup"	
			
		Msg204 is a MessageField
			"TaxableAmountOverTheToleranceLimit" 		 

		Msg205 is a MessageField
			"TaxAmountDifferenceExceedsTheTaxTolerance;TaxDifferenceIs:<OutputlTaxToleranceDiff>" 		 

		Msg800 is a MessageField
			"AtMinimum,AddressOrTaxCodeIsRequiredToCalculateVertexTax"	

		Msg801 is a MessageField
			"AtMinimum,InvoiceAmountOrTaxableOrUnitCostRequiredToCalculateVertexTax"	

		Msg802 is a MessageField
			"AddressRequiredToLookupVertexTaxAreaId,PleaseProvideAValidAddress"	
		
		Msg803 is a MessageField	
			"MultipleTaxAreasExist"	

		Msg804 is a MessageField	
			"TaxAmountOutsideOfVertexThreshold;VertexTaxReturned<ReturnedTotalTax>;VarianceOf;<ReturnedTaxVariance>"

		Msg805 is a MessageField
			"FromCountry:<LocalCountryCode>_\I\S\O\CodeOrNumberRequired"	

		Msg806 is a MessageField
			"ToCountry:<LocalCountryCode>_\I\S\O\CodeOrNumberRequired"	
			
		Msg807 is a MessageField
			"PointOfAcceptanceCountry:<LocalCountryCode>_\I\S\O\CodeOrNumberRequired"	

		Msg808 is a MessageField
			"BaseCurrency:<LocalCurrencyCode>_\I\S\O\CodeOrNumberRequired"	
			
		Msg809 is a MessageField
			"TransactionCurrency:<LocalCurrencyCode>_\I\S\O\CodeOrNumberRequired"	

		Msg810 is a MessageField
			"PointOfAcceptanceCurrency:<LocalCurrencyCode>_\I\S\O\CodeOrNumberRequired"	

		Msg811 is a MessageField
			"VendorPointOfAcceptanceCurrency:<LocalCurrencyCode>_\I\S\O\CodeOrNumberRequired"	

		Msg812 is a MessageField
			"ATaxAmountOrChargedTaxAmountIsRequired;TaxAmount=<TaxAmount>;ChargedTaxAmount=<ChargedTaxAmount>"													

		Msg813 is a MessageField
			"InvalidShipTo_\Tax\Code...<TaxCode>;_\VertexTaxCodesMustBeNumeric"	
		Msg814 is a MessageField
			"InvalidShipFrom_\Tax\Code...<FromTaxCode>;_\VertexTaxCodesMustBeNumeric"	
		Msg815 is a MessageField
			"InvalidBillTo\Tax\Code...<BuyerAdminDestTaxCode>;_\VertexTaxCodesMustBeNumeric"	
		Msg816 is a MessageField
			"InvalidBillFromOr_\P\O\A\Tax\Code...<POATaxCode>;_\VertexTaxCodesMustBeNumeric"	
		Msg817 is a MessageField
			"TaxCodeCannotBeTaxTableTypeWhenUsingAThirdPartyTaxAnd_\Use\Tax\Code\Accounts=True"			
		Msg818 is a MessageField
			"Invalid_\VertexDeliveryTerm:<DeliveryTerms>"																																															
		Msg819 is a MessageField																								
			"ErrorForLineItem[<LineItemNumber>];QuantityRequiredForLineItemIfTaxableAmountNotEntered"						 
		Msg820 is a MessageField																								
			"ErrorForLineItem[<LineItemNumber>];Taxable,InvoiceAmountOrUnitCostRequired"			
		Msg821 is a MessageField																								
			"ErrorForLineItem[<LineItemNumber>];AtMinimum,ShipToAddressOrTaxCodeIsRequiredToCalculateVertexTax"	
		Msg822 is a MessageField																								
			"VertexConfigVersionDoesNotExist.CheckThe_\Vertex\ConfigRecord.ACorrespondingVersionRecordMustExist" 				
		Msg823 is a MessageField																								
			"VertexTrustedIdMissingOnTheVertexConfigurationVersionRecord"	
		Msg824 is a MessageField												
			"VertexFlexibleFieldFor;<FlexFieldInError>,OnLine<DisplayLineInError>_IsBlank"		
		Msg825 is a MessageField												
			"VertexFlexibleFieldForDateField;<FlexFieldInError>,OnLine<DisplayLineInError>_IsBlank"	
		Msg826 is a MessageField																								 
			"SendAddressOrTaxAreaIdIs:<SendAddressOrTaxAreaId>;ShipToTaxCodeIsRequired"		
		Msg827 is a MessageField																								 
			"SendAddressOrTaxAreaIdIs:<SendAddressOrTaxAreaId>;AtMinimumShipToAddressIsRequired"	
		Msg828 is a MessageField																								 
			"TaxCode00NotAllowedWithThisOption.SendAddressOrTaxAreaIdIs:<SendAddressOrTaxAreaId>ShipToTaxCodeIs:<TaxCode>."				
		Msg829 is a MessageField																								 
			"TaxCodeRequiredWithThisOption.SendAddressOrTaxAreaIdIs:<SendAddressOrTaxAreaId>ShipToTaxCodeIsBlank.ChangeOptionOrAddTaxAreaId."																						
		Msg899 is a MessageField
			"ErrorCode:<HttpStatusCode>,ExceptionType:<ExceptionType>;WebserviceError:<WebServiceErrorMessage>"	
						
		Msg900 is a MessageField
			"TaxPointIsGlobalLedgerDate;AGlobalLedgerDateIsRequired"	

		Msg901 is a MessageField
			"TaxableAndTaxAmountRequiredToCalculateRate"																

		Msg902 is a MessageField
			"TaxEntity:<TaxEntity>NotSetUpOrToAccountingEntityDoesNotExist"

		Msg903 is a MessageField
			"CompanyRequired"

		Msg904 is a MessageField
			"TaxableAndTaxAmountCannotBeEqualToVerifyTax;InputTaxableIs:<TaxableAmount>,InputTaxAmountIs:<TaxAmount>"

		Msg905 is a MessageField
			"TaxEntityOrFinanceEnterpriseGroupRequired"
			
		Msg906 is a MessageField
			"TaxEntityRequired"

		Msg907 is a MessageField
			"TaxEntity:<TaxEntity>...DoesNotExistForFinanceEnterpriseGroup:<FinanceEnterpriseGroup>"
			
		Msg908 is a MessageField
			"InvoiceCompanyDoesNotExist"

		Msg909 is a MessageField
			"VertexConfigurationFileIsNotSetUp"

		Msg910 is a MessageField
			"FinanceEnterpriseGroupRequiredIfTaxEntityNotEntered"

		Msg911 is a MessageField
			"CalculateTaxRateCanOnlyBeUsedIfTaxCodeType=CalculateRate;***Warning...ThisWillSoonBeDisabled"		
		Msg912 is a MessageField	
			"TaxLineItem:<LocalTaxLineItem>_\Ship_\To_\Tax_\Code<TaxLineItemShipToTaxCode>NotSetupIn_\Entity\Tax\Code<TaxEntity>"	
									
		Msg998 is a MessageField
			"CannotUseATax\Distribution\Code<InputTaxDistributionCode>;OneOrMoreDetailRecordContainsMissingAccountInformation"
					
		Msg999 is a MessageField
			"ThirdPartyTax,Brazil,NotYetImplemented"

		Txqnt104 is a MessageField
			"TaxEntityNotSetUpForVertex"									
						
		Txtxt202 is a MessageField
			"TaxTableNotSetupForTaxEntity:<TaxEntity>AndEntityTaxCode:<TaxCode>"	
												
		Txtxt204 is a MessageField
			"MustEnterAtLeastOneTaxCodeInTheTable"		

		Sabrix700 is a MessageField
			"One\SourceWebserviceError:<WebServiceErrorMessage>"
		Sabrix701 is a MessageField
			"One\SourceError...<SabrixReturnMessage>;<WebServiceErrorMessage>"	
		Sabrix702 is a MessageField
			"TaxEntityNotSetUpFor_\One\Source"
		Sabrix703 is a MessageField
			"ShipToAddressRequiredToUse_\One\Source;ShipToAddressIs:<PostalAddress>"
		Sabrix704 is a MessageField
			"InvoiceNumberRequiredToUse_\One\Source;InvoiceNumberIs:<Invoice>"
		Sabrix705 is a MessageField
			"LineNumberRequiredToUse_\One\Source;LineNumberIs:<LineNumber>"
		Sabrix706 is a MessageField																								
			"ErrorForLineItem[<LineItemNumber>];AtMinimum,ShipToAddressOrTaxCodeIsRequiredToCalculateOneSourceTax"						
		Sabrix707 is a MessageField																								
			"ErrorForLineItem[<DisplayLineInError>];ValueForUserElement<LocalUserElement>IsMissingForTaxEntity<TaxEntity>"			
		Sabrix708 is a MessageField																								
			"OneSourceErrorCode:<SabrixErrorCode>,Description:<SabrixReturnMessage>,<SabrixErrorLocation>" 
		Sabrix709 is a MessageField																								
			"ValidateConnectionFailed;IsSuccess<IsSuccess>,<DerivedErrorMessage>" 									
		Sabrix710 is a MessageField																								
			"TaxConfigurationAndTaxConfigVersionDoNotMatch;CannotGetUsernameAndPassword" 	
		Sabrix711 is a MessageField																								
			"OneSourceUsernameAndPasswordMissingOnTheTaxConfigurationVersionRecord" 				
		SabrixInfoMessage1 is a MessageField
			"OneOrMoreExclutionFlagsAreTrue;OneSourceCallBypassed"	

		DerivedErrorMessage is a DerivedField	  	
			type is MessageField
			if (CapturedXml entered)
				return "CapturedXml:" + CapturedXml
			else
			if (WebServiceError)
				return "ResponseXml:" + ResponseXML
			else	
			if (WebServiceErrorMessage entered)
				return "WebServiceErrorMessage:" + WebServiceErrorMessage
			else	
				return Sabrix708						
															
		LogMessages is a DerivedField	  
			type is MessageField
			if (MultipleTaxAreaIds)
				return LogMessage3 + DerivedTimestamp	
			else
			if (WebServiceError)
				return "WebserviceError..:" + WebServiceErrorMessage
			else	
			if (LocalErrorNumber entered)
				return "ErrorNumber..:" + LocalErrorNumber + "..ErrorMessage:.." + OutputErrorMessage
			else	
				return LogMessage1 + DerivedTimestamp	
					 				
					
		LogMessage1 is a MessageField
			"CalculateTaxProcessedSuccessfully..."	

		LogMessage2 is a MessageField
			"SuccessfullTaxAreaIdLookup..."	

		LogMessage3 is a MessageField
			"LookupSuccessfull;MultipleTaxAreaIdsExist..."	

		PasswordTypeUsedText  is a DerivedField	  
			type is MessageField
			default label is untranslatable
			restricted
			if (PasswordTypeUsed.TextValue)
				return PasswordTypeTextValue  
			else	
				return PasswordTypeEncrypted
				
		PasswordTypeTextValue is a MessageField	 
			"PasswordTypeTextValue"					
		PasswordTypeEncrypted is a MessageField	 
			"PasswordTypeEncrypted"	

		OutputErrorVariable1			is a DerivedField
			type is Alpha size 30
			LocalTrace = LocalTrace + "OutputErrorVariable1,"
			return LocalTaxCodeInError

		OutputErrorVariable2			is a DerivedField
			type is Alpha size 30
			LocalTrace = LocalTrace + "OutputErrorVariable2,"

		OutputErrorVariable3			is a DerivedField
			type is Alpha size 30
			LocalTrace = LocalTrace + "OutputErrorVariable3,"

		TestingOn	is a DerivedField	 
			type is Alpha 1
			return "Y"	
		TraceDebugMessage is a MessageField	
			"DebugIsTurnedOffOn_\Vertex\Config"
		TraceDebugOnMessage is a MessageField	
			"DebugIsTurnedOn_\Vertex\Config;TraceMessageWillBeStoredInTaxLog"	
		XmlRequestBreakLine is a MessageField
			"===============Request==============="							
		DisplayInput is a DerivedField
			type is Alpha 1
			if (Initials not entered)
				Initials = actor
			if (DisplayOn)
				display "[<Initials>]Calc_\Tax-Timestamp.....:<DerivedTimestamp>" 
				display "--------------------------------------------------------------------"
				display "[<Initials>]CalcTax:BeginExecuteCalculateTax.Function=<Function>"
				display "--------------------------------------------------------------------"
				display "[<Initials>]CalcTax:CallingModule.........:<CallingModule>"
				display "[<Initials>]CalcTax:RelatedObjectReference:<RelatedObjectReference>"
				display "[<Initials>]CalcTax:UniqueIdOfRelatedObjct:<UniqueIdOfRelatedObject>"
				display "[<Initials>]CalcTax:FinanceEnterpriseGroup:<InFinanceEnterpriseGroup>"	
				display "[<Initials>]CalcTax:FinanceEnterpriseGroup:<DerivedFinanceEnterpriseGroup>"	
				display "[<Initials>]CalcTax:ContextFinanceEntGroup:<FinanceEnterpriseGroup>"	 
				display "[<Initials>]CalcTax:TaxEntity.............:<TaxEntity>"
				display "[<Initials>]CalcTax:ThirdParty............:<TaxEntity.ThirdParty>"
				display "[<Initials>]CalcTax:UseTaxCodeAccounts....:<TaxEntity.UseTaxCodeAccounts>"											 
				display "[<Initials>]CalcTax:InvoiceCompany........:<InvoiceCompany>"				 
				display "[<Initials>]CalcTax:TaxCode(ShipTo).......:<TaxCode>"
				display "[<Initials>]CalcTax:FromTaxCode...........:<FromTaxCode>"
				display "[<Initials>]CalcTax:ProductTaxCategory....:<ProductTaxCategory>"
				display "[<Initials>]CalcTax:SaveInputTaxable......:<SaveInputTaxableAmount>"
				display "[<Initials>]CalcTax:TaxableAmount.........:<TaxableAmount>"				 
				display "[<Initials>]CalcTax:InvoiceAmount.........:<InvoiceAmount>" 				 
				display "[<Initials>]CalcTax:TaxAmount.............:<TaxAmount>"					 
				display "[<Initials>]CalcTax:InvoiceDate...........:<InvoiceDate>"					 
				display "[<Initials>]CalcTax:ShipmentDate..........:<ShipmentDate>"				 
				display "[<Initials>]CalcTax:PaymentDate...........:<PaymentDate>"					 
				display "[<Initials>]CalcTax:TaxDate...............:<TaxDate>"	
				display "[<Initials>]CalcTax:EffectiveTaxDate......:<EffectiveDateLabel>"		
				display "[<Initials>]CalcTax:PostalAddress.........:<PostalAddress>"
				display "[<Initials>]CalcTax:FromPostalAddress.....:<FromPostalAddress>"
				display "[<Initials>]CalcTax:POAAddress............:<POAAddress>"									 
				display "[<Initials>]CalcTax:======================[UsedForVertex]========================"
				display "[<Initials>]CalcTax:Quantity..............:<Quantity>" 	
				display "[<Initials>]CalcTax:UnitCost..............:<UnitCost>"		
				display "[<Initials>]CalcTax:JurisdictionResultsKey:<JurisdictionResultsKey>"		
			return blank					
		
		DisplayOutput is a DerivedField
			type is Alpha 1
			if (DisplayOn)
				display "------------------------------------------------------------------------"
				display "Calc_\TaxOutput-Timestamp.:<DerivedTimestamp>"			
				display "------------------------------------------------------------------------"
				display "DoTaxCalculation......:<DoTaxCalculation>"		
				display "VerifiedOK............:<VerifiedOK>"	
				display "LocalErrorNumber......:<LocalErrorNumber>"
				display "OutputErrorMessage....:<OutputErrorMessage>" 		
				display "OutputTotalTaxAmount..:<OutputTotalTaxAmount>"
				display "OutputTaxRate.........:<OutputTaxRate>"
				display "TaxType...............:<TaxType>"
				if (LocalTaxTableBuilt.Yes)
					display "DisplayBeginTaxTableOccurrence1...."
					display "JurisdictionLevel.....:<TaxTable.TaxTableOutput[1].JurisdictionLevel>"	
					display "ImpositionType........:<TaxTable.TaxTableOutput[1].ImpositionType>"		 	
					display "VertexTaxType.........:<TaxTable.TaxTableOutput[1].VertexTaxType>"						 
					display "TaxCode...............:<TaxTable.TaxTableOutput[1].TaxCode>" 	 
					display "TaxFlag...............:<TaxTable.TaxTableOutput[1].Flag>"
					display "TaxRate...............:<TaxTable.TaxTableOutput[1].TaxRate>"
					display "SecondaryRate.........:<TaxTable.TaxTableOutput[1].SecondaryRate>"
 					display "InTaxAmt..............:<TaxTable.TaxTableOutput[1].InTaxAmount>" 	
					display "TaxAmount.............:<TaxTable.TaxTableOutput[1].TaxAmount>" 		 
                    display "Taxable...............:<TaxTable.TaxTableOutput[1].TaxableAmount>" 	 
                    display "AccrualFlag...........:<TaxTable.TaxTableOutput[1].AccrualFlag>"
					display "InputAcct.............:<TaxTable.TaxTableOutput[1].TaxInputAccount>"	 		 
					display "InputDueAcct..........:<TaxTable.TaxTableOutput[1].TaxInputDueAccount>"		 
					display "OutputAcct............:<TaxTable.TaxTableOutput[1].TaxOutputAccount>"	 		 
					display "OutputDueAcct.........:<TaxTable.TaxTableOutput[1].TaxOutputDueAccount>"	
					display "EffectiveDate.........:<TaxTable.TaxTableOutput[1].EffectiveDate>"
					display "TaxPointDate..........:<TaxTable.TaxTableOutput[1].TaxPointDate>"
					display "TaxPoint..............:<TaxTable.TaxTableOutput[1].TaxPoint>"
					display "AccountError..........:<TaxTable.TaxTableOutput[1].AccountError>"
					display "LandCostFlag..........:<TaxTable.TaxTableOutput[1].LandCostFlag>"			 
					display "TaxTerms..............:<TaxTable.TaxTableOutput[1].TaxTerms>"
					display "AllowAcctChgs.........:<TaxTable.TaxTableOutput[1].AllowAccountChange>"		 
					display "TaxID.................:<TaxTable.TaxTableOutput[1].TaxID>"
					display "AccrualCode...........:<TaxTable.TaxTableOutput[1].AccrualCode>"				 
					display "PostOption............:<TaxTable.TaxTableOutput[1].PostOption>"
		        	display "*~*~*~*~*~*~*~*~*~*~*~*~*~Tolerances*~*~*~*~*~*~*~*~*~*~*~*~*"
					display "CSFToleranceSet.......:<CSFToleranceSet>"				        	
				    display "ToleranceLimit........:<TaxTable.TaxTableOutput[1].TaxableToleranceLimit>"    
				    display "ToleranceAmount.......:<TaxTable.TaxTableOutput[1].TaxToleranceAmount>"       
				    display "FromRate..............:<TaxTable.TaxTableOutput[1].FromRate>"				 
				    display "ThruRate..............:<TaxTable.TaxTableOutput[1].ThruRate>" 
				    display "*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*"                
					display "EndTableOccurence1...."	
				display "WebServiceError...............:<WebServiceError>"
				display "WebServiceErrorMessage........:<WebServiceErrorMessage>"	
			return blank					
		
		MessageLogHeaderKey is a DerivedField			 
			type is Alpha 100
			if (System entered)
				return System + CurrentTimestamp
				
			return "TX:" + CurrentTimestamp					
	
		CurrentTimestamp is a DerivedField
			type is Alpha 20
			return DerivedTimestamp  

		CreateTaxToLogFile is a DerivedField
			type is Alpha 1
			DisplayMonitor = DisplayMonitor + "[TLC]CreateTaxToLogFile..."	
			if (LocalCreateLogFile)  
				if (SaveMessageLogKey not entered)
					if (MessageLogKey entered)
						SaveMessageLogKey 	= MessageLogKey				 
						ResultsLastSeq  	= MessageLogSequence					
					else
						SaveMessageLogKey 	= MessageLogHeaderKey
				if (ResultsLastSeq not entered)
					ResultsLastSeq = VertexConfigRel.LastSequence + 1
					
				if (TaxLogHeaderRel exist)
					invoke Delete TaxLogHeaderRel
	            invoke Create TaxLogHeader
					resume on error	            
	                invoked.FinanceEnterpriseGroup 		= DerivedFinanceEnterpriseGroup	
	                invoked.TaxLogHeader				= SaveMessageLogKey
	                invoked.SystemCode					= System   
	                invoked.LogThirdParty				= TaxEntity.ThirdParty
	                invoked.LogTaxEntity				= TaxEntity
	                invoked.LogCompany					= InvoiceCompany
	                invoked.LogVendor					= Vendor
	                invoked.LogCustomer					= Customer
	                invoked.LogInvoice					= Invoice
	                invoked.LogLocation             	= Location
	                invoked.LogToAddress 				= PostalAddress
	                invoked.LogFromAddress 				= FromPostalAddress
	                invoked.LogPOAAddress 				= POAAddress
     				invoked.VertexRequestExecuted	 	= RequestReference		
					invoked.LogPostToJournal		    = PostToJournal 		 
      				invoked.LogCreatedTimestamp 	 	= current timestamp 	 
      				invoked.LogVoucherNumber		 	= VoucherNumber 		 
					invoked.LogDocumentSequenceId	    = DocumentSequenceNumber 
					invoked.LogToTaxCode			 	= TaxCode	  			 
					invoked.LogFromTaxCode			    = FromTaxCode			 
					invoked.LogCallingRoutine		 	= CallingModule 		 
					invoked.UniqueIdOfRelatedObject     = UniqueIdOfRelatedObject 
      				invoked.HTTPInfo					= CapturedXml			 
					invoked.LogIsAudited				= IsAudited				 
					if (WebServiceError)								  
				        invoked.WebServiceError			= WebServiceError 		 
						invoked.WebServiceErrorMessage	= WebServiceErrorMessage 
					if (LocalErrorNumber entered)								 
				        WebServiceError 				= true
						WebServiceErrorMessage 			= "CalcTax:" + OutputErrorMessage										
					invoked.LogOneSourceVersionType     = OneSourceVersionType   
					invoked.RelatedObjectReference		= RelatedObjectReference	
					invoked.JurisdictionResultsKey		= SaveJurisdictionResults.LookupKey	
	                if (CreateLogFileHere)				
	                	if (LocalInputOnly)
	                		invoked.MessageRichText		= InputLogText
	                	else	
		                	invoked.MessageRichText		= RichTextDisplay
					else
	                	invoked.MessageRichText			= RichTextDisplayCalcTax		
	                	

				if (LocalTaxMessageGroup.TaxMessage[1].Explaination entered)
					LocalTrigger = AddTaxLogMessages

	           	if (VertexConfigRel.DebugMode					
				and CreateTaxLogMessage)						
	           		LocalTrigger = LoadTraceIntoTaxLogMessage	
            

                if (CreateLogFileHere)	 
	                return blank	                	
				Idx = 0 
				if (TaxEntity.ThirdParty.VertexOSeries
				and !JurisdictionHasBeenCreated)			
					if (JurisdictionResultsKey entered
					or  SaveMessageLogKey entered)	
						LocalExecuteReturnBlank = CreateJurisdictionResults	
				
			return blank

		LoadTraceIntoTaxLogMessage is a DerivedField	
  			type is Alpha 1
  			LocalTrace = LocalTrace + "LoadTraceIntoTaxLogMessage,"
			CharPos = 1
			BegPos = 1
			while (CharPos <= 1500)
		 		if (LocalTrace[CharPos:CharPos] = ",")
					EndPos = CharPos
					invoke Create TaxLogMessage		 
						invoked.FinanceEnterpriseGroup 	= DerivedFinanceEnterpriseGroup	 
						invoked.TaxLogHeader 			= SaveMessageLogKey
						invoked.MessageLine				= LocalTrace[BegPos:EndPos]
					BegPos = EndPos + 1
					initialize EndPos
					
				increment CharPos
									
				if (CharPos > 1500
				or  EndPos > 1500
				or  LocalTrace[CharPos:CharPos] = " ")	
					invoke Create TaxLogMessage		 
						invoked.FinanceEnterpriseGroup 	= DerivedFinanceEnterpriseGroup	 
						invoked.TaxLogHeader 			= SaveMessageLogKey
						invoked.MessageLine				= "--[End Of Trace; " + "end position is= " + CharPos + "]--"									 
					end while 	
					
			return blank
			
					
		IsTrustedIdValued is a DerivedField
			type is Alpha 3
			if (VertexConfigVersionGroupRel.TrustedId entered)
				return "Yes"
			else
				return "No"	

		VertexRequestExecuted is a DerivedField
			type is Alpha 40
			if (LocalVertexRequest.QuotationRequest)  
				return "QuotationRequest"
			else	
			if (LocalVertexRequest.AccrualRequest)
				return "AccrualRequest"
			else
			if (LocalVertexRequest.InvoiceRequest)
				return "InvoiceRequest"
			else	  
			if (LocalVertexRequest.InvoiceVerificationRequest)
				return "InvoiceVerification"
			else
			if (LocalVertexRequest.PurchaseOrderRequest)
				return "PurchaseOrder"
			else	  
			if (LocalVertexRequest.LookupTaxAreaId)
				return "LookupTaxAreaRequest"
			else	  
			if (LocalVertexRequest.DontCallVertex)
				return "RequestDisabled.VertexNotCalled."	
						
			return "RequestNotSpecified"

		DerivedSystem is a DerivedField
			type is Alpha 20
			if (IntercompanyBilling)  
				return "IntercompanyBilling"
				
			return System
		CreateJurisdictionResults is a DerivedField	 
			type is Alpha 1
			initialize Idx
			if (JurisSeq > 8)
				JurisSeq = 8
			
			ResultsLastSeq  	= ResponseBusclassKey 	
			if (SaveMessageLogKey not entered
			and JurisdictionResultsKey entered)
				SaveMessageLogKey 	= JurisdictionResultsKey				 

			if (AppendToJurisFile)
				if (GetLastJurisdictionResultsSeqRel exist)
					ResultsLastSeq = last GetLastJurisdictionResultsSeqRel.JurisdictionResults.ResponseBusclassKey + 1	
				else
				if (JurisdictionResultsBORRel exist)
					ResultsLastSeq = last JurisdictionResultsBORRel.JurisdictionResults.ResponseBusclassKey + 1	
			else
				if (GetLastJurisdictionResultsSeqRel exist)
					invoke Delete GetLastJurisdictionResultsSeqRel
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel
				if (JurisdictionResultsBORRel exist)
					invoke Delete JurisdictionResultsBORRel
				if (JurisdictionResultsRel2 exist)				
					invoke Delete JurisdictionResultsRel2		
				if (JurisdictionResultsRel3 exist)				
					invoke Delete JurisdictionResultsRel3		
				if (JurisdictionResultsRel4 exist)				
					invoke Delete JurisdictionResultsRel4
				
			if (SaveMessageLogKey entered
			and LocalErrorNumber not entered)
				while (Idx < JurisSeq)
					Idx +=1
					invoke Create JurisdictionResults
						assign result to SaveJurisdictionResults	 									
						invoked.VertexConfig							= DerivedFinanceEnterpriseGroup	
						invoked.JurisdictionResults.LookupKey			= SaveMessageLogKey
						invoked.JurisdictionResults.ResponseBusclassKey	= ResultsLastSeq 
						invoked.JurisdictionResults.Sequence			= Idx				
						invoked.RequestReference						= VertexRequestExecuted 
						invoked.CallingModuleKey						= RelatedObjectReference
						invoked.ResultsBusclassKey						= "CalculateTax:" + VertexRequestExecuted
						invoked.TaxAreaId								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxAreaId 
						invoked.TaxDate									= OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveDate
						invoked.Situs 									= OutputJurisdictions.JurisdictionTableOutput[Idx].Situs
						invoked.TaxResult 								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxResult										
						invoked.TaxType 								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxType
						invoked.Jurisdiction 							= OutputJurisdictions.JurisdictionTableOutput[Idx].Jurisdiction
						invoked.JurisdictionId 							= OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionId
						invoked.JurisdictionLevel 						= OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionLevel														
						invoked.CalculatedTax 							= OutputJurisdictions.JurisdictionTableOutput[Idx].CalculatedTax
						invoked.EffectiveRate 							= OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveRate
						invoked.Taxable 								= OutputJurisdictions.JurisdictionTableOutput[Idx].Taxable
						invoked.Imposition 								= OutputJurisdictions.JurisdictionTableOutput[Idx].Imposition
						invoked.ImpositionType 							= OutputJurisdictions.JurisdictionTableOutput[Idx].ImpositionType
						invoked.TaxRuleId 								= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxRuleId
						invoked.TaxCollectedFromParty					= OutputJurisdictions.JurisdictionTableOutput[Idx].TaxCollectedFromParty  			
						invoked.InvoiceTextCode							= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode		 	 
						invoked.SummaryInvoiceText						= OutputJurisdictions.JurisdictionTableOutput[Idx].SummaryInvoiceText	 	 
						invoked.IsService 								= OutputJurisdictions.JurisdictionTableOutput[Idx].IsService				 
						invoked.SellerRegistrationId					= OutputJurisdictions.JurisdictionTableOutput[Idx].SellerRegistrationId	 
						invoked.BuyerRegistrationId 					= OutputJurisdictions.JurisdictionTableOutput[Idx].BuyerRegistrationId	 
						invoked.RecoverableAmount 						= OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverableAmount		 
						invoked.RecoverablePercent 						= OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverablePercent	 
						invoked.InputOutputType 						= OutputJurisdictions.JurisdictionTableOutput[Idx].InputOutputType		 
						invoked.FilingIsoCurrencyCodeAlpha 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeAlpha		 	 
						invoked.FilingIsoCurrencyCodeNum 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeNum			 	 
						invoked.FilingCurrencyConversion 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCurrencyConversion			 										
						invoked.FilingTaxable 							= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingTaxable						 
						invoked.FilingCalculatedTax 					= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCalculatedTax				 
						invoked.FilingExempt 							= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingExempt						 
						invoked.FilingNonTaxable 						= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingNonTaxable					 
						invoked.FilingRecoverableAmount 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingRecoverableAmount			 	
						invoked.FilingUnrecoverableAmount 				= OutputJurisdictions.JurisdictionTableOutput[Idx].FilingUnrecoverableAmount 	
						invoked.RateClassificationText 					= OutputJurisdictions.JurisdictionTableOutput[Idx].RateClassificationText 
						invoked.InvoiceTextCode.InvoiceTextCodeOut[1].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode1 
						invoked.InvoiceTextCode.InvoiceTextCodeOut[2].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode2 	
						invoked.InvoiceTextCode.InvoiceTextCodeOut[3].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode3 	
						invoked.InvoiceTextCode.InvoiceTextCodeOut[4].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode4 	
						invoked.InvoiceTextCode.InvoiceTextCodeOut[5].InvoiceTextCode		= OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode5 	
				JurisdictionHasBeenCreated = true
				
			return blank				

		ThirdPartyDescription is a DerivedField
			type is Alpha 15
			if (TaxEntity.ThirdParty.InforTax)
				return "InforTax" 
			if (TaxEntity.ThirdParty.VertexOSeries)
				return "VertexOSeries" 
			if (TaxEntity.ThirdParty.Sabrix)
				return "Sabrix" 										

			return "Invalid ThirdParty option"

		ShipToTaxCodeValues is a DerivedField	
			type is like Description
			return "Type:" + TaxCode.TaxType + ",_Desc:" + TaxCode.Description
				
		TaxTypeDescription is a DerivedField
			type is Alpha 15
			if (TaxType = "S")
				return "StandAlone"
			else
			if (TaxType = "T")
				return "TaxTable"
			else
			if (TaxType = "M")
				return "TableMember"
			else
			if (TaxType = "C")
				return "CalculateRate"
			else
				return "WARNING:TaxType:" + TaxType + "...Is Invalid" 	

		VertexReportingEvent is a DerivedField
			type is like Description
			if (LocalVertexRequest.LookupTaxAreaId
			or  LocalVertexRequest.QuotationRequest
			or  LocalVertexRequest.PurchaseOrderRequest)
				return LocalVertexRequest + " is not applicable to reporting"
			else	
			if (LocalVertexRequest.InvoiceRequest)
				return "Supplier/Seller"
			else
			if (LocalVertexRequest.DontCallVertex)
				return "RequestsDisabled;VertexNotCalled"
			else			
			if (LocalVertexRequest.AccrualRequest  
			or  LocalVertexRequest.InvoiceVerificationRequest)
				return "Procurement(Buyer) if PostToJournal=Yes"

			return "InvalidRequest" 	
			
		RegisteredIndicator is a DerivedField	 
			type is Alpha 13						 
			if (NotRegisteredIndicator = "false")
				return "Registered"
 				
			return "NotRegistered"	
																														
		DerivedLogText is a DerivedField
			type is RichText
			if (VertexConfigRel.DebugMode)
				DisplayLocalTrace	=	TraceDebugOnMessage
			else	
				DisplayLocalTrace	=	TraceDebugMessage
				
			return RichTextDisplay  
					
		RichTextDisplay is a StringField	 
			type is RichText	
			"<pre>"			 
			DerivedLogErrors
			" <b>" LogMessages  "</b> 															 <br>"
			" -----------------------------------------------------------------------------------<br>"
			"                                     I N P U T 						  			 <br>"	
			" -----------------------------------------------------------------------------------<br>"			
			" CallingModule.................:" CallingModule "-" InputReference		 			"<br>"
			" ContextFinanceEnterpriseGroup.:" FinanceEnterpriseGroup			 				"<br>"	
			" FinanceEnterpriseGroup........:" DerivedFinanceEnterpriseGroup			 		"<br>"	 
			" TaxEntity.....................:" TaxEntity								 		"<br>"
			" ThirdParty....................:" TaxEntity.ThirdParty					 			"<br>"
			" UseTaxCodeAccounts............:" TaxEntity.UseTaxCodeAccounts			 			"<br>"	
			" TaxID/TaxRegistration.........:" TaxID											"<br>"
			" InvoiceCompany................:" InvoiceCompany						 			"<br>"
			" ProcessLevel..................:" ProcessLevel										"<br>"
			" Vendor........................:" Vendor		 								    "<br>"  
			" Customer......................:" Customer											"<br>"  
			" Exempt........................:" Exempt											"<br>"  
			" Invoice.......................:" Invoice		                                    "<br>"				
			" VoucherNumber.................:" VoucherNumber	  								"<br>"				
			" LineNumber/DistSequence.......:" LineNumber										"<br>"
			" TaxCode(ShipTo)...............:" TaxCode          								"<br>"
			" TaxCode.Type/Description......:" ShipToTaxCodeValues          					"<br>"
			" FromTaxCode...................:" FromTaxCode							 			"<br>"
			" ProductTaxCategory............:" ProductTaxCategory					 			"<br>"
			" SaveInputTaxableAmount........:" SaveInputTaxableAmount							"<br>"
			" TaxableAmount.................:" TaxableAmount							 		"<br>"				 
			" InvoiceAmount.................:" InvoiceAmount							 		"<br>" 				 
			" TaxAmount.....................:" TaxAmount								 		"<br>"					 
			" InvoiceDate...................:" InvoiceDateLabel 							 	"<br>"					 
			" ShipmentDate..................:" ShipmentDateLabel						     	"<br>"				 
			" PaymentDate...................:" PaymentDateLabel							 		"<br>"					 
			" TaxDate.......................:" TaxDateLabel								 		"<br>"						 
			" TaxEffectiveDate..............:" EffectiveDateLabel	 	  						"<br>"
			" PostalAddress.................:" PostalAddress							 		"<br>"
			" FromPostalAddress.............:" FromPostalAddress						 		"<br>"
			" POAAddress....................:" POAAddress							 			"<br>"				
			" IntercompanyBilling...........:" IntercompanyBilling			 					"<br>"
			" OverrideHasPhysicalPresenceInd:" OverrideHasPhysicalPresenceInd 					"<br>"
			" VATReverseIndicator...........:" VATReverseIndicator                              "<br>"   
			" ApprovalRequired..............:" ApprovalRequired									"<br>"   
			" InputReturnVertexTaxIn........:" ReturnVertexTaxInLabel							"<br>"   
			" LocalReturnVertexTaxIn........:" LocalReturnVertexTaxIn							"<br>"   			
			" VertexConfig.ReturnVertexIn...:" VertexConfigRel.ReturnVertexTaxIn				"<br>"   
			" LocalReturnVertexTaxIn........:" LocalReturnVertexTaxInLabel						"<br>"   
			" ==== To/Dest VAT Registration                                                      <br>"
        	" VATRegistrationCountry........:" VATRegistrationCountry   "<br>"
	        " VATRegistrationNumber.........:" VATRegistrationNumber    "<br>"	
			" ToHasPhysicalPresenceInd......:" ToHasPhysicalPresenceInd "<br>"	
			" == From/Vendor VAT Registration                                                    <br>" 		        	 
	        " FromVATRegistrationCountry....:" FromVATRegistrationCountry                       "<br>"  
	        " FromVATRegistrationNumber.....:" FromVATRegistrationNumber	                    "<br>" 
			" FromHasPhysicalPresenceInd....:" FromHasPhysicalPresenceInd 	              "      <br>" 
			" === TaxRegistrationUsed======= 													 <br>" 
			" LocalBuyerTaxRegistration.....:" LocalBuyerTaxRegistration	 					"<br>"
	    	" LocalSellerTaxRegistration....:" LocalSellerTaxRegistration	 					"<br>"										
			" ===================================[Used For Vertex]===============================<br>"
			" VertexVersion.................:" VertexVersionText            					"<br>"
			" SendAddressOrTaxAreaId........:" SendAddressOrTaxAreaIdLabel                      "<br>"  
			" CalculateVendorTaxIndicator...:" CalculateVendorTaxIndicator	              "      <br>" 		
			" OverrideCalcVendorTaxIndicator:" OverrideCalculateVendorTaxIndicator	            "<br>" 
			" VertexLicense.................:" DerivedVertexLicenseLabel			            "<br>" 
			" LocalVertexLicense............:" LocalVertexLicense       			            "<br>"
			" ValidateVertexRequest.........:" ValidateVertexRequest 							"<br>"  
			" VertexCallMethod..............:" VertexCallMethodLabel							"<br>"  
			" UnitCost......................:" UnitCost     							 		"<br>" 				 
			" Quantity......................:" Quantity  								 		"<br>"					
			" LocalVertexEventType..........:" LocalVertexEventType							    "<br>"
			" InputVertexRequest............:" InputVertexRequest								"<br>"
			" LocalVertexRequest............:" VertexRequestExecuted 							"<br>"	
			" VertexRoutineExecuted.........:" VertexRoutineExecuted 							"<br>"	
			" PurchaseOrderRequestFlagIs....:" VertexPurchaseOrderRequestLabel					"<br>"  
			" InvoiceVerificationRequestFlag:" VertexInvoiceVerificationRequestLabel			"<br>"  
			" VertexReportingEvent..........:" VertexReportingEvent								"<br>"
			" TaxIncludedIndicator......(1).:" TaxIncludedIndicator								"<br>"  
			" LocalExtendedPrice............:" LocalExtendedPrice		 						"<br>"
			" DerivedExtendedPrice..........:" DerivedExtendedPrice		 						"<br>"
			" JurisdictionResultsKey........:" JurisdictionResultsKey				 			"<br>"		
			" RelatedObjectReference........:" RelatedObjectReference							"<br>"
			" UniqueIdOfRelatedObject.......:" UniqueIdOfRelatedObject 							"<br>"
			" ReturnAssistedParametersFlag..:" VertexConfigRel.ReturnAssistedParameters 		"<br>"
			" IsMulticomponent..............:" IsMulticomponent									"<br>"
			" ========= GLOBAL VARIABLES                                                         <br>"		
			" VATProcessFlagForICB..........:" VATProcess										"<br>"
			" TaxAmount-....................:" TaxAmount                   				    	"<br>"	 
			" ChargedTax....................:" ChargedTaxAmount                   				"<br>"	 
			" GeneralLedgerAccount..........:" GeneralLedgerAccount 							"<br>"   
			" TaxCodeAccount................:" TaxCodeAccount 									"<br>"   
			" VendorSKU.....................:" VendorSKU             							"<br>"   
			" CostCenter....................:" CostCenter             							"<br>"   
			" LocationCode..................:" Location             							"<br>"   
			" DeliveryTerms.................:" DeliveryTerms           							"<br>"   
			" PostingDate...................:" PostDateLabel           							"<br>"   
			" VendorCode....................:" Vendor           							    "<br>"   
			" DocumentType..................:" DocumentType           							"<br>"   
			" PurchaseClass.................:" ProductClass           							"<br>"   
			" PointOfTitleTransfer..........:" PointOfTitleTransfer 							"<br>"   
			" TaxUsageCode..................:" TaxUsageCode	                 					"<br>"		
			" Product.......................:" ProductTaxCategory                				"<br>"
			" UNSPSCCode....................:" UNSPSCCode	  			    					"<br>" 
			" HSNSACCode....................:" HSNSACCode	  			    					"<br>" 
			" LocalCommodityCode............:" LocalCommodityCode	  							"<br>" 
			" CommodityCode.................:" CommodityCode	  								"<br>"	
			" CommodityCodeType.............:" CommodityCodeType  								"<br>"
			" CommodityCodeExcludeFlag......:" CommodityCodeExcludeFlag							"<br>"	
			" EAMCommodityCode..............:" EAMCommodityCode	  								"<br>"					
			" DefaultFilingCurrencyCode.....:" DefaultFilingCurrency                  			"<br>"			
			" DefaultFilingCurrency.ISOCode.:" DefaultFilingCurrencyRel.ISOCode                 "<br>"
			" DefaultFilingCurrency.ISONbr..:" DefaultFilingCurrencyRel.ISOCodeNumber           "<br>"
			" FromCurrencyCode..............:" TransactionCurrency                      		"<br>"						
			" FromCurrencyISOCode...........:" TransactionCurrencyRel.ISOCode                 	"<br>"		    
			" FromCurrencyISOCodeNumber.....:" TransactionCurrencyRel.ISOCodeNumber             "<br>"	 										
			" FromCurrencyRate..............:" FromCurrencyRate                 				"<br>"	
			" POACurrencyCode...............:" POACurrency                       				"<br>"			 
			" POACurrencyISOCode............:" POACurrencyRel.ISOCode                 			"<br>"	
			" POACurrencyISOCodeNumber......:" POACurrencyRel.ISOCodeNumber                 	"<br>"									
			" POACurrencyRate...............:" POACurrencyRate                 					"<br>"
			" ToCurrencyCode................:" BaseCurrencyRel.ISOCode                 			"<br>"				
			" ToCurrencyISOCode.............:" BaseCurrencyRel.ISOCode                 			"<br>"			 
			" ToCurrencyISOCodeNumber.......:" BaseCurrencyRel.ISOCodeNumber                 	"<br>"	 
			" ToCurrencyRate................:" CurrencyRate                 					"<br>"		
			" ChargedTaxAmount..............:" ChargedTaxAmount									"<br>"
			" VATInputTaxAmount.............:" VATInputTaxAmount								"<br>"	 
			" VertexVATType.................:" VertexVATType 									"<br>"
			" RecoverableTaxAreaId..........:" RecoverableTaxAreaId 							"<br>"	
			" RecoverableJurisLevel.........:" RecoverableJurisLevel 							"<br>"	
			" RecoverableImpositionType.....:" RecoverableImpositionType 						"<br>"	
  			" RecoverableDate...............:" RecoverableDate  								"<br>"
			" BlockingOverridePercent.......:" BlockingOverridePercent  						"<br>"
			" PartialExemptRecvblOvrdPct....:" PartialExemptRecvblOvrdPct 						"<br>"
			" MaterialCode..................:" MaterialCode	            						"<br>" 	        
	        " MaterialOrigin................:" MaterialOrigin			        				"<br>" 
	        " TaxDistributionCode...........:" LocalTaxDistributionCode							"<br>" 
			DerivedOtherParameters
			SabrixLogText
			DisplayInvoiceLevelFlexibleFields
			"<pre>"
			" -----------------------------------------------------------------------------------<br>"
			"                                    O U T P U T 			 		  			     <br>"	
			" -----------------------------------------------------------------------------------<br>"
			" Trace.........................:" RichTextDisplayCalcTax							"<br>"
			" DoTaxCalculation..............:" DoTaxCalculation 							 	"<br>"		
			" VerifiedOK....................:" VerifiedOK 									 	"<br>"	
			" OutputTotalTaxAmount..........:" OutputTotalTaxAmount 						 	"<br>"
			" OutputTaxRate.................:" OutputTaxRate 								 	"<br>"
			" TaxType.......................:" TaxTypeDescription							 	"<br>"
			" MultipleTaxAreaIds............:" MultipleTaxAreaIds 							 	"<br>"
			" ReturnedConfInd...............:" ReturnedConfInd 							 		"<br>"
			" ResultsCount..................:" ResultsCount   									"<br>"
			" NumberOfTaxCodes..............:" NumberOfTaxCodes  								"<br>"
			" OutputGeoCode.................:" OutputGeoCode 							 		"<br>"
			" ReturnedTaxAreaId.............:" ReturnedTaxAreaId 							 	"<br>"
			" ReturnedUserDefinedTaxCode....:" ReturnedUserDefinedTaxCode						"<br>"	
			" ReturnedVertexTaxCode.........:" ReturnedVertexTaxCode							"<br>"  
			" OneSourceReturnedTaxCode......:" SabrixReturnedTaxCode							"<br>"	
			" ========= VERTEX GLOBAL VARIABLES ======================                           <br>"
			" TaxStructure..................:" TaxStructure                                     "<br>"
			" ProcessType...................:" ProcessType                                      "<br>"
			" Imposition....................:" Imposition                 						"<br>" 
			" ReturnedTaxType...............:" ReturnedTaxType									"<br>"
			" InputOutputType...............:" InputOutputType									"<br>"
	       	" ForeignOrDomestic.............:" ForeignOrDomestic + " " + ForeignOrDomesticText	"<br>"
	        " ForeignIndicator..............:" ForeignIndicator 			                    "<br>"			
			" RecoverablePercent............:" RecoverablePercent								"<br>" 
			" RecoverableAmount.............:" RecoverableAmount								"<br>"			 
			" NonRecoverableAmount..........:" UnrecoverableAmount								"<br>"		
			" RecoverableAccount............:" RecoverableAccount        						"<br>" 
        	" NonRecoverableAccount.........:" NonRecoverableAccount       						"<br>"
        	" ForeignRecoverableAccount.....:" ForeignRecoverableAccount					    "<br>"     
        	" ForeignNonRecoverableAccount..:" ForeignNonRecoverableAccount					    "<br>"  
			" InvoiceTextCode...............:" InvoiceTextCode	 								"<br>" 
			" ReverseCharge.................:" ReverseCharge	 								"<br>" 			
			" InvoiceTextDesc...............:" InvoiceTextCode.InvoiceTextCodeDesc              "<br>"
			" RateClassification............:" RateClassificationText							"<br>" 
			" SummaryInvoiceText............:" SummaryInvoiceText								"<br>" 	 
			" NotRegisteredIndicator........:" NotRegisteredIndicator 							"<br>"
			" IsService.....................:" IsService										"<br>" 
			" SellerRegistrationId..........:" SellerRegistrationId								"<br>" 
			" BuyerRegistrationId...........:" BuyerRegistrationId								"<br>" 
			" InputOutputType...............:" InputOutputType									"<br>" 
			" FilingIsoCurrencyCodeAlpha....:" FilingIsoCurrencyCodeAlpha						"<br>" 	 
			" FilingIsoCurrencyCodeNum......:" FilingIsoCurrencyCodeNum							"<br>"  
			" FilingCurrencyConversionRate..:" FilingCurrencyConversion							"<br>" 										
			" FilingTaxable.................:" FilingTaxable									"<br>" 
			" FilingCalculatedTax...........:" FilingCalculatedTax								"<br>" 
			" FilingExempt..................:" FilingExempt										"<br>"  
			" FilingNonTaxable..............:" FilingNonTaxable									"<br>" 
			" FilingRecoverableAmount.......:" FilingRecoverableAmount							"<br>" 	
			" FilingUnrecoverableAmount.....:" FilingUnrecoverableAmount 						"<br>" 		
			" ===================                                                                <br>"
			"  M E S S A G E S	 		  			     	 									 <br>"	
			" ===================                                                                <br>"
			" VertexTaxResult...............:" VertexTaxResult 									"<br>"	
			" LocalErrorNumber..............:" LocalErrorNumber 							 	"<br>"
			" OutputErrorMessage............:" OutputErrorMessage 							 	"<br>" 		
			" HttpStatusCode................:" MyHTTPInfo.StatusCode							"<br>"
			" WebServiceError...............:" WebServiceError 									"<br>"
			" WebServiceErrorMessage........:" WebServiceErrorMessage 							"<br>"
			" BeginTaxTableOccurrence1....									 		  	         <br>"
			"======================================[ Out Tax Table  ]============================ <br>"	
			"</pre>"							
			DerivedLogTableText																			
			"=====================================[ End Table Occurence ]======================== <br>"	

		RichTextDisplayCalcTax is a DerivedField
			type is Text
			if (VertexConfigRel.DebugMode)
				DisplayLocalTrace	=	TraceDebugOnMessage
			else	
				DisplayLocalTrace	=	TraceDebugMessage
				
					
			return InputLogText + OutputLogText 
							
		InputLogText is a StringField	 
			type is Text
			"<pre>"
			" <b>" LogMessages  "</b> 															 <br>"
			DerivedLogErrors
			" CallingModule.................:"  CallingModule "-" InputReference				"<br>"       
			"======================================== Input Data =============================== <br>" 					
			" Function......................:"  Function										"<br>"
			" PostToJournal.................:"  PostToJournal	  								"<br>"
			" ContextFinanceEnterpriseGroup.:"  FinanceEnterpriseGroup			 				"<br>"	
			" FinanceEnterpriseGroup........:"  DerivedFinanceEnterpriseGroup			 		"<br>"	 
			" TaxEntity.....................:"  TaxEntity										"<br>"
			" ThirdPartyOption..............:"  TaxEntity.ThirdParty "..." ThirdPartyDescription"<br>"
			" TaxID/TaxIdentification.......:"  TaxID											"<br>"
			" System........................:"  DerivedSystem									"<br>"
			" InvoiceCompany................:"  InvoiceCompany 									"<br>"	
			" ProcessLevel..................:"  ProcessLevel 									"<br>"
			" Vendor........................:"  Vendor		 								    "<br>"  
			" Customer......................:"  Customer										"<br>"  
			" Exempt........................:"  Exempt											"<br>"  			
			" Invoice.......................:"  Invoice		                                    "<br>"	
			" VoucherNumber.................:"  VoucherNumber	  								"<br>"
			" VendorGroup...................:"  VendorGrp										"<br>"  
			" CustomerGroup.................:"  CustomerGrp										"<br>" 
			" LineNumber/DistSequence.......:"  LineNumber										"<br>"
			" UseTaxCodeAccountOption.......:"  TaxEntity.UseTaxCodeAccounts 					"<br>"
			" TaxEntity.AccruedOrInvoiced...:"  TaxEntity.AccruedOrInvoiced 					"<br>"  
			" AccruedOrInvoiced.............:"  AccruedOrInvoiced                               "<br>"  
			" LocalAccruedOrInvoiced........:"  LocalAccruedOrInvoiced                          "<br>"	
			" TaxCode.......................:"  TaxCode           								"<br>"
			" TaxCode.Type/Description......:"  ShipToTaxCodeValues          					"<br>"			
			" FromTaxCode...................:"  FromTaxCode							 			"<br>"
			" ProductTaxCategory............:"  ProductTaxCategory	  							"<br>"	
			" PurchaseClass.................:"  ProductClass           							"<br>"   
			" GeneralLedgerAccount..........:"  GeneralLedgerAccount 							"<br>"   
			" TaxCodeAccount................:"  TaxCodeAccount 									"<br>"   
			" VendorSKU.....................:"  VendorSKU             							"<br>"   
			" CostCenter....................:"  CostCenter             							"<br>"   
			" LocationCode..................:"  Location             							"<br>"   
			" DeliveryTerms.................:"  DeliveryTerms           						"<br>"   
			" PostingDate...................:"  PostDateLabel           						"<br>"   
			" VendorCode....................:"  Vendor           							    "<br>"   
			" DocumentType..................:"  DocumentType           							"<br>"   
			" Input.TaxAmount...............:"  TaxAmount  										"<br>"
			" InputInvoiceAmount............:"  InvoiceAmount  									"<br>"
			" SaveInputTaxableAmount........:"  SaveInputTaxableAmount							"<br>"
			" TaxableAmount.................:"  TaxableAmount  									"<br>"
			" TaxEffectiveDate..............:"  EffectiveDateLabel	 	  						"<br>"
			" ChargedTaxAmount..............:"  ChargedTaxAmount								"<br>"
			" VATInputTaxAmount.............:"  VATInputTaxAmount								"<br>"	 					
			" UponEntryVerifiedOK...........:"  VerifiedOK  									"<br>"
			" InDoTaxCalculation............:"  DoTaxCalculation  								"<br>"
			" OverrideHasPhysicalPresenceInd:"  OverrideHasPhysicalPresenceInd 				    "<br>"
			" UNSPSCCode....................:"  UNSPSCCode	  			    					"<br>" 
			" HSNSACCode....................:"  HSNSACCode	  			    					"<br>" 
			" LocalCommodityCode............:"  LocalCommodityCode	  							"<br>" 
			" CommodityCode.................:"  CommodityCode	  								"<br>"
			" CommodityCodeType.............:"  CommodityCodeType  								"<br>"
			" CommodityCodeExcludeFlag......:"  CommodityCodeExcludeFlag						"<br>"
			" DeliveryTerms.................:"  DeliveryTerms                 					"<br>"	
			" PointOfTitleTransfer..........:"  PointOfTitleTransfer 							"<br>"   
			" EAMCommodityCode..............:"  EAMCommodityCode	  							"<br>"			
			" VATReverseIndicator...........:"  VATReverseIndicator                             "<br>"   
			" ApprovalRequired..............:"  ApprovalRequired								"<br>"   
			" InputReturnVertexTaxIn........:"  ReturnVertexTaxInLabel							"<br>"   
			" VertexConfig.ReturnVertexIn...:"  VertexConfigRel.ReturnVertexTaxIn				"<br>"   
			" LocalReturnVertexTaxIn........:"  LocalReturnVertexTaxInLabel						"<br>"   
			" ==== To/Dest VAT Registration                                                      <br>"
        	" VATRegistrationCountry........:"  VATRegistrationCountry   						"<br>"
	        " VATRegistrationNumber.........:"  VATRegistrationNumber    						"<br>"	
			" ToHasPhysicalPresenceInd......:"  ToHasPhysicalPresenceInd 						"<br>"	
			" == From/Vendor VAT Registration                                                    <br>" 		        	 
	        " FromVATRegistrationCountry....:"  FromVATRegistrationCountry                      "<br>"  
	        " FromVATRegistrationNumber.....:"  FromVATRegistrationNumber	                    "<br>" 
			" FromHasPhysicalPresenceInd....:"  FromHasPhysicalPresenceInd 	             "       <br>" 					
			"----------------------------------------------------------------------------------  <br>"
			" LandedCost....................:"  TaxEntity.LandedCost              				"<br>"
			" AllowAccountChanges...........:"  TaxEntity.AllowAccountChanges   				"<br>"  
			" IntrastatUsed.................:"  TaxEntity.IntrastatUsed  						"<br>"
			"----------------------------------------------------------------------------------  <br>" 
			" ===================================[Used For Vertex]===============================<br>"
			" VertexAccessType..............:" VertexAccessTypeLabel    						"<br>"  
			" VertexVersion.................:" VertexVersionText            					"<br>"
			" SendAddressOrTaxAreaId........:" SendAddressOrTaxAreaIdLabel                      "<br>"  
			" CalculateVendorTaxIndicator...:" CalculateVendorTaxIndicator	                    "<br>"  
			" OverrideCalcVendorTaxIndicator:" OverrideCalculateVendorTaxIndicator	            "<br>" 	
			" PayablesTaxingLocation........:" PayablesTaxingLocation           	    		"<br>" 
			" ReceivablesTaxingLocation.....:" ReceivablesTaxingLocation           	    		"<br>" 
			" VertexCallMethod..............:" VertexCallMethodLabel							"<br>"  
			" UnitCost......................:" UnitCost     							 		"<br>" 				 
			" Quantity......................:" Quantity  								 		"<br>"
			" LocalVertexEventType..........:" LocalVertexEventType							    "<br>"						
			" InputVertexRequest............:" InputVertexRequest								"<br>"
			" LocalVertexRequest............:" VertexRequestExecuted							"<br>"
			" PurchaseOrderRequestFlaggedAs.:" VertexPurchaseOrderRequestLabel					"<br>"  
			" InvoiceVerificationRequestFlag:" VertexInvoiceVerificationRequestLabel			"<br>"  
			" VertexReportingEvent..........:" VertexReportingEvent								"<br>"
			" TaxIncludedIndicator.......(2):" TaxIncludedIndicator								"<br>"  
			" LocalExtendedPrice............:" LocalExtendedPrice		 						"<br>"
			" DerivedExtendedPrice..........:" DerivedExtendedPrice		 						"<br>"
			" IsMulticomponent..............:" IsMulticomponent									"<br>"
			" JurisdictionResultsKey........:" JurisdictionResultsKey				 			"<br>"		
			" RelatedObjectReference........:" RelatedObjectReference							"<br>"
			" UniqueIdOfRelatedObject.......:" UniqueIdOfRelatedObject 							"<br>"
			" ReturnAssistedParametersFlag..:" VertexConfigRel.ReturnAssistedParameters 		"<br>"
			" ========= GLOBAL VARIABLES                                                         <br>"
			" VATProcessFlagForICB .........:" VATProcess										"<br>"				
			" DeliveryTerms.................:" DeliveryTerms                 					"<br>"	 
			" TaxUsageCode..................:" TaxUsageCode	                 					"<br>"		
			" Product.......................:" ProductTaxCategory                				"<br>"			
			" DefaultFilingCurrencyCode.....:" DefaultFilingCurrency                  			"<br>"	
			" DefaultFilingCurrency.ISOCode.:" DefaultFilingCurrencyRel.ISOCode                 	"<br>"
			" DefaultFilingCurrency.ISONbr..:" DefaultFilingCurrencyRel.ISOCodeNumber              "<br>"			
			" FromCurrencyCode..............:" TransactionCurrency                      		"<br>"
			" FromISOCode...................:" TransactionCurrencyRel.ISOCode                 		"<br>"		    
			" FromISOCodeNumber.............:" TransactionCurrencyRel.ISOCodeNumber                "<br>"	 										
			" FromCurrencyRate..............:" FromCurrencyRate                 				"<br>"	 
			" POACurrencyCode...............:" POACurrency                       				"<br>"	
			" POACurrencyRate...............:" POACurrencyRate                 					"<br>"
			" ToCurrencyCode................:" BaseCurrency                         			"<br>"					
			" ToCurrencyRate................:" CurrencyRate                 					"<br>"		
			" ChargedTaxAmount..............:" ChargedTaxAmount									"<br>"
			" VATInputTaxAmount.............:" VATInputTaxAmount								"<br>"	 
			" VertexVATType.................:" VertexVATType 									"<br>"
			" RecoverableTaxAreaId..........:" RecoverableTaxAreaId 							"<br>"	
			" RecoverableJurisLevel.........:" RecoverableJurisLevel 							"<br>"	
			" RecoverableImpositionType.....:" RecoverableImpositionType 						"<br>"	
  			" RecoverableDate...............:" RecoverableDate  								"<br>"
			" BlockingOverridePercent.......:" BlockingOverridePercent  						"<br>"
			" PartialExemptRecvblOvrdPct....:" PartialExemptRecvblOvrdPct 						"<br>"
			" VertexSimplificationCode......:" VertexSimplificationCode							"<br>"
			" TaxStructure..................:" TaxStructure                                     "<br>"
			" MaterialCode..................:" MaterialCode	            						"<br>" 	        
	        " MaterialOrigin................:" MaterialOrigin			        				"<br>" 	
	        " TaxDistributionCode...........:" LocalTaxDistributionCode							"<br>" 		
			"------------------------------- Input Dates For Effective Date -------------------  <br>"
			" TaxDate.......................:" TaxDateLabel  									"<br>"
			" InvoiceDate...................:" InvoiceDateLabel 								"<br>"
			" PaymentDate...................:" PaymentDateLabel  								"<br>"
			" ShipmentDate..................:" ShipmentDateLabel  								"<br>"
			" GeneralLedgerDate.............:" GeneralLedgerDateLabel  							"<br>"
			"------------------------------- Other_Dates --------------------------------------  <br>"
			" PostDate......................:" PostDateLabel			   		   				"<br>"
			" TaxPointDate..................:" TaxPointDateLabel			     	  			"<br>"				
			"------------------------------- Third Party Stuff --------------------------------  <br>"	             
			" IsTrustedIdValued?............:" IsTrustedIdValued	  							"<br>"
			" ThirdPartyFunction............:" ThirdPartyFunction  								"<br>"
			" VertexQuantumOption...........:" VertexQuantumOption  							"<br>"
			" InputVertexRequest............:" InputVertexRequest								"<br>"
			" VertexReportingEvent..........:" VertexReportingEvent								"<br>"
			" LocalVertexEventType..........:" LocalVertexEventType							    "<br>"
			" LocalVertexRequest............:" VertexRequestExecuted							"<br>"
			" PurchaseOrderRequestFlaggedAs.:" VertexPurchaseOrderRequestLabel					"<br>"  
			" InvoiceVerificationRequestFlag:" VertexInvoiceVerificationRequestLabel			"<br>"  
			" TransactionType...............:" TransactionType		  							"<br>"
			" SendAddressOrTaxAreaId........:" SendAddressOrTaxAreaIdLabel						"<br>"  
			" VertexCallMethod..............:" VertexCallMethodLabel							"<br>"  
			" ShipTo-TaxCode................:" TaxCode	  										"<br>"
			" ShipTo-PostalAddress..........:" PostalAddress  									"<br>"	 
			" BillTo/AdminDest-TaxCode......:" BuyerAdminDestTaxCode  							"<br>"
			" BillTo/AdminDest/POAAddress...:" BuyerAdminDestAddress  							"<br>"
			" ShipFromTaxCode...............:" FromTaxCode	 									"<br>"
			" ShipFromPostalAddress.........:" FromPostalAddress  								"<br>"
			" BillFrom/POA/AdminOrig-TaxCode:" POATaxCode  										"<br>"
			" BillFrom/POAAddress...........:" POAAddress  										"<br>"
			DerivedOtherParameters
			SabrixLogText
			Derived1SourceTaxAttributes
			DisplayInvoiceLevelFlexibleFields
			"</pre>"

		VertexLogText1 is a DerivedField
			type is Text
			initialize StringVertexValues
			if (TaxEntity.ThirdParty.Sabrix)
				StringVertexValues = VertexText1
			return StringVertexValues	

		VertexText1 is a StringField
			type is Text	 
			" ==================================[Begin Of Test]===============================<br>"					
			" Test..........................:" + "Test" +                                    "<br>"	 
			" ===================================[End of Test]================================<br>"				
						
		OutputLogText is a StringField
			type is Text	 
			"<pre>"	
			"============================================ Output Data ========================================== <br>"					
			" DoTaxCalculation..............:"  DoTaxCalculation  												"<br>"
			" OutVerifiedOK.................:"  VerifiedOK  													"<br>"
			" ReturnedTaxInputAccount.......:"  ReturnedTaxInputAccount  										"<br>"					
			" ReturnedTaxOutputAccount......:"  ReturnedTaxOutputAccount  										"<br>"
			" ReturnedTaxAccrualAccount.....:"  ReturnedTaxAccrualAccount										"<br>"
			" ReturnedTotalTax..............:"  ReturnedTotalTax	  											"<br>"
			" TaxType.......................:"  TaxType	                  										"<br>"
			" OutputTaxRate.................:"  OutputTaxRate  													"<br>"
			" OutputTotalTaxAmount..........:"  OutputTotalTaxAmount  											"<br>"
			" OutputTotalTaxable............:"  OutputTotalTaxable  											"<br>"
			" OutputInvoiceTotal............:"  OutputInvoiceTotal	        									"<br>"          	                
			" ======================================= OutputThirdPartyTax =====================================  <br>"	
			" OutputGeoCode.................:"  OutputGeoCode  													"<br>"
			" VertexRequest.................:"  VertexRequestExecuted  											"<br>"
			" ConvertTransactionType........:"  ConvertTransactionType  										"<br>" 	 
			" MultipleTaxAreaIds............:"  MultipleTaxAreaIds  											"<br>"
			" VertexTaxResult...............:"  VertexTaxResult	  												"<br>"                	                	                
			" ReturnedUserDefinedTaxCode....:"  ReturnedUserDefinedTaxCode										"<br>"	
			" ReturnedVertexTaxCode.........:"  ReturnedVertexTaxCode											"<br>"
			" OneSourceReturnedTaxCode......:"  SabrixReturnedTaxCode											"<br>"	
			" ===== Threshold Information====                                                                    <br>"
			" ReturnedAdditionalTaxesDue....:"  ReturnedAdditionalTaxesDue	  									"<br>"
			" ReturnedTaxVariance...........:"  ReturnedTaxVariance	  											"<br>"
			" ReturnedOutsideThreshold......:"  ReturnedOutsideThreshold	  									"<br>"				
			" ===================================== VERTEX GLOBAL VARIABLES ===================================  <br>"
			" TaxStructure..................:" TaxStructure                                    					"<br>"
			" Imposition....................:" Imposition                 										"<br>" 
			" ReturnedTaxType...............:" ReturnedTaxType													"<br>"
			" InputOutputType...............:" InputOutputType													"<br>"
	       	" ForeignOrDomestic.............:" ForeignOrDomestic + " " + ForeignOrDomesticText 	 			    "<br>"
	        " ForeignIndicator..............:" ForeignIndicator 			                    				"<br>"			
			" RecoverablePercent............:" RecoverablePercent												"<br>" 
			" RecoverableAmount.............:" RecoverableAmount												"<br>"			 
			" NonRecoverableAmount..........:" UnrecoverableAmount												"<br>"		
			" RecoverableAccount............:" RecoverableAccount        										"<br>" 
        	" NonRecoverableAccount.........:" NonRecoverableAccount       										"<br>"
       		" ForeignRecoverableAccount.....:" ForeignRecoverableAccount					    				"<br>"     
        	" ForeignNonRecoverableAccount..:" ForeignNonRecoverableAccount					    				"<br>"  
			" InvoiceTextCode...............:" InvoiceTextCode	 												"<br>" 
			" ReverseCharge.................:" ReverseCharge	 												"<br>" 			
			" RateClassification............:" RateClassificationText											"<br>" 
			" InvoiceTextDesc...............:" InvoiceTextCode.InvoiceTextCodeDesc 			   					"<br>"
			" SummaryInvoiceText............:" SummaryInvoiceText												"<br>" 	 
			" NotRegisteredIndicator........:" NotRegisteredIndicator 											"<br>"
			" IsService.....................:" IsService														"<br>" 
			" SellerRegistrationId..........:" SellerRegistrationId												"<br>" 
			" BuyerRegistrationId...........:" BuyerRegistrationId												"<br>" 
			" InputOutputType...............:" InputOutputType													"<br>" 
			" FilingIsoCurrencyCodeAlpha....:" FilingIsoCurrencyCodeAlpha										"<br>" 	 
			" FilingIsoCurrencyCodeNum......:" FilingIsoCurrencyCodeNum											"<br>"  
			" FilingCurrencyConversionRate..:" FilingCurrencyConversion											"<br>" 										
			" FilingTaxable.................:" FilingTaxable													"<br>" 
			" FilingCalculatedTax...........:" FilingCalculatedTax												"<br>" 
			" FilingExempt..................:" FilingExempt														"<br>"  
			" FilingNonTaxable..............:" FilingNonTaxable													"<br>" 
			" FilingRecoverableAmount.......:" FilingRecoverableAmount											"<br>" 	
			" FilingUnrecoverableAmount.....:" FilingUnrecoverableAmount 										"<br>" 		
			"====================================[ OutputTaxTableResults ]====================================== <br>"								
			DerivedLogTableText
			DerivedTimeStats
			"</pre>"	

		DerivedLogTableText is a DerivedField
			type is Text
			Idx = 1 
			initialize StringTableValues
			while (Idx <= 8)
				if (TaxTable.TaxTableOutput[Idx].TaxCode entered)
					StringTableValues = StringTableValues + "[" + Idx + "] <br>" 
					StringTableValues = StringTableValues +  "<pre>"
					StringTableValues = StringTableValues + "TaxDistributionCode...........:" + TaxTable.TaxTableOutput[Idx].TaxDistributionAccountCode + "<br>"	
					StringTableValues = StringTableValues + "JurisdictionLevel.............:" + TaxTable.TaxTableOutput[Idx].JurisdictionLevel + "<br>"	  
					StringTableValues = StringTableValues + "ImpositionType................:" + TaxTable.TaxTableOutput[Idx].ImpositionType + "<br>"
					StringTableValues = StringTableValues + "VertexTaxType.................:" + TaxTable.TaxTableOutput[Idx].VertexTaxType + "<br>"			
					StringTableValues = StringTableValues + "TaxCode.......................:" + TaxTable.TaxTableOutput[Idx].TaxCode + "<br>"
					StringTableValues = StringTableValues + "TaxFlag.......................:" + TaxTable.TaxTableOutput[Idx].Flag + "<br>"
					StringTableValues = StringTableValues + "TaxRate.......................:" + TaxTable.TaxTableOutput[Idx].TaxRate + "<br>"
					StringTableValues = StringTableValues + "SecondaryRate.................:" + TaxTable.TaxTableOutput[Idx].SecondaryRate + "<br>"
					StringTableValues = StringTableValues + "InTaxAmt......................:" + TaxTable.TaxTableOutput[Idx].InTaxAmount + "<br>" 	
					StringTableValues = StringTableValues + "TaxAmount.....................:" + TaxTable.TaxTableOutput[Idx].TaxAmount + "<br>" 		 
					StringTableValues = StringTableValues + "Taxable.......................:" + TaxTable.TaxTableOutput[Idx].TaxableAmount + "<br>" 	 
					StringTableValues = StringTableValues + "AccrualFlag...................:" + TaxTable.TaxTableOutput[Idx].AccrualFlag + "<br>"
					StringTableValues = StringTableValues + "InputAcct.....................:" + TaxTable.TaxTableOutput[Idx].TaxInputAccount + "<br>"	 		 
					StringTableValues = StringTableValues + "InputDueAcct..................:" + TaxTable.TaxTableOutput[Idx].TaxInputDueAccount + "<br>"		 
					StringTableValues = StringTableValues + "OutputAcct....................:" + TaxTable.TaxTableOutput[Idx].TaxOutputAccount + "<br>"	 		 
					StringTableValues = StringTableValues + "OutputDueAcct.................:" + TaxTable.TaxTableOutput[Idx].TaxOutputDueAccount + "<br>"	
					StringTableValues = StringTableValues + "EffectiveDate.................:" + TaxTable.TaxTableOutput[Idx].EffectiveDate + "<br>"
					StringTableValues = StringTableValues + "TaxPointDate..................:" + TaxTable.TaxTableOutput[Idx].TaxPointDate + "<br>"
					StringTableValues = StringTableValues + "TaxPoint......................:" + TaxTable.TaxTableOutput[Idx].TaxPoint + "<br>"
					StringTableValues = StringTableValues + "AccountError..................:" + TaxTable.TaxTableOutput[Idx].AccountError + "<br>"
					StringTableValues = StringTableValues + "LandCostFlag..................:" + TaxTable.TaxTableOutput[Idx].LandCostFlag + "<br>"			 
					StringTableValues = StringTableValues + "TaxTerms......................:" + TaxTable.TaxTableOutput[Idx].TaxTerms + "<br>"
					StringTableValues = StringTableValues + "AllowAcctChgs.................:" + TaxTable.TaxTableOutput[Idx].AllowAccountChange + "<br>"		 
					StringTableValues = StringTableValues + "TaxID.........................:" + TaxTable.TaxTableOutput[Idx].TaxID + "<br>"
					StringTableValues = StringTableValues + "AccrualCode...................:" + TaxTable.TaxTableOutput[Idx].AccrualCode + "<br>"
					StringTableValues = StringTableValues + "AccrualCodeTaxAccount.........:" + TaxTable.TaxTableOutput[Idx].AccrualCodeAccount + "<br>"				 
					StringTableValues = StringTableValues + "PostOption....................:" + TaxTable.TaxTableOutput[Idx].PostOption + "<br>"
					StringTableValues = StringTableValues + "*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*CSFTolerances*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*	 	 	 <br>"
					StringTableValues = StringTableValues + "CSFToleranceSet...............:" + CSFToleranceSet + "<br>"
					StringTableValues = StringTableValues + "ToleranceLimit................:" + TaxTable.TaxTableOutput[Idx].TaxableToleranceLimit + "<br>"    
					StringTableValues = StringTableValues + "ToleranceAmount...............:" + TaxTable.TaxTableOutput[Idx].TaxToleranceAmount + "<br>"       
					StringTableValues = StringTableValues + "FromRate......................:" + TaxTable.TaxTableOutput[Idx].FromRate + "<br>"				 
					StringTableValues = StringTableValues + "ThruRate......................:" + TaxTable.TaxTableOutput[Idx].ThruRate + "<br>"
					StringTableValues = StringTableValues + "TaxAmountDifference...........:" + OutputlTaxToleranceDiff + "<br>"  
					StringTableValues = StringTableValues + "CalculatedRateForRateRange....:" + LocalSaveTaxRate + "<br>" 
					StringTableValues = StringTableValues + "*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~**~*~*~*~**~*~*~*~*	 	 <br>" 
					StringTableValues = StringTableValues + "</pre>"               																
				Idx =Idx+1
				
			return StringTableValues

		DerivedJurisdictionResults is a DerivedField
			type is Text
			initialize StringTableValues
			if (TaxEntity.ThirdParty.VertexOSeries)
				Idx = 1 
				while (Idx <= 20)
					if (OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveDate entered)
						StringTableValues = StringTableValues + "[" + Idx + "] <br>" 
						StringTableValues = StringTableValues + "<pre>" 
						StringTableValues = StringTableValues + "========================================== JurisdictionResults ================================================== <br>"               																
						StringTableValues = StringTableValues + "TaxAreaId...................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].TaxAreaId  					+ "<br>"			 	 
						StringTableValues = StringTableValues + "EffectiveDate...............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveDate		 		+ "<br>"	 	 
						StringTableValues = StringTableValues + "Taxable.....................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].Taxable 				  		+ "<br>"
						StringTableValues = StringTableValues + "CalculatedTax...............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].CalculatedTax 	 			+ "<br>"	 
						StringTableValues = StringTableValues + "EffectiveRate...............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].EffectiveRate 	 			+ "<br>"	 
						StringTableValues = StringTableValues + "Jurisdiction................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].Jurisdiction 		 		+ "<br>"	 
						StringTableValues = StringTableValues + "JurisdictionId..............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionId 	 			+ "<br>"	 
						StringTableValues = StringTableValues + "JurisdictionLevel...........:" + OutputJurisdictions.JurisdictionTableOutput[Idx].JurisdictionLevel  			+ "<br>"	 
						StringTableValues = StringTableValues + "TaxType.....................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].TaxType 			 			+ "<br>"	 
						StringTableValues = StringTableValues + "Situs.......................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].Situs 			 			+ "<br>"	 
						StringTableValues = StringTableValues + "TaxCollectedFromParty.......:" + OutputJurisdictions.JurisdictionTableOutput[Idx].TaxCollectedFromParty   		+ "<br>"
						StringTableValues = StringTableValues + "Imposition..................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].Imposition 			  		+ "<br>"
						StringTableValues = StringTableValues + "ImpositionType..............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].ImpositionType 		  		+ "<br>"	
						StringTableValues = StringTableValues + "TaxRuleId...................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].TaxRuleId 			  		+ "<br>"
						StringTableValues = StringTableValues + "TaxResult...................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].TaxResult 			  		+ "<br>"
						StringTableValues = StringTableValues + "SummaryInvoiceText..........:" + OutputJurisdictions.JurisdictionTableOutput[Idx].SummaryInvoiceText	 	  	+ "<br>"
						StringTableValues = StringTableValues + "IsService...................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].IsService				  	+ "<br>"
						StringTableValues = StringTableValues + "SellerRegistrationId........:" + OutputJurisdictions.JurisdictionTableOutput[Idx].SellerRegistrationId	  		+ "<br>"
						StringTableValues = StringTableValues + "BuyerRegistrationId.........:" + OutputJurisdictions.JurisdictionTableOutput[Idx].BuyerRegistrationId	  		+ "<br>"
						StringTableValues = StringTableValues + "RecoverableAmount...........:" + OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverableAmount		  	+ "<br>"
						StringTableValues = StringTableValues + "RecoverablePercent..........:" + OutputJurisdictions.JurisdictionTableOutput[Idx].RecoverablePercent	  		+ "<br>"
						StringTableValues = StringTableValues + "InputOutputType.............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].InputOutputType		  		+ "<br>"
						StringTableValues = StringTableValues + "RateClassificationText......:" + OutputJurisdictions.JurisdictionTableOutput[Idx].RateClassificationText	  	+ "<br>"
						StringTableValues = StringTableValues + "InvoiceTextCode1............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode1				+ "<br>"
						StringTableValues = StringTableValues + "InvoiceTextCode2............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode2				+ "<br>"
						StringTableValues = StringTableValues + "InvoiceTextCode3............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode3				+ "<br>"	
						StringTableValues = StringTableValues + "InvoiceTextCode4............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode4				+ "<br>"	
						StringTableValues = StringTableValues + "InvoiceTextCode5............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].InvoiceTextCode5				+ "<br>"
						StringTableValues = StringTableValues + "FilingIsoCurrencyCodeAlpha..:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeAlpha	+ "<br>"  
						StringTableValues = StringTableValues + "FilingIsoCurrencyCodeNum....:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingIsoCurrencyCodeNum		+ "<br>"
						StringTableValues = StringTableValues + "FilingCurrencyConversion....:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCurrencyConversion		+ "<br>"										
						StringTableValues = StringTableValues + "FilingTaxable................" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingTaxable				+ "<br>"
						StringTableValues = StringTableValues + "FilingCalculatedTax.........:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingCalculatedTax			+ "<br>"
						StringTableValues = StringTableValues + "FilingExempt................:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingExempt					+ "<br>"
						StringTableValues = StringTableValues + "FilingNonTaxable............:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingNonTaxable				+ "<br>"
						StringTableValues = StringTableValues + "FilingRecoverableAmount.....:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingRecoverableAmount		+ "<br>"
						StringTableValues = StringTableValues + "FilingUnrecoverableAmount...:" + OutputJurisdictions.JurisdictionTableOutput[Idx].FilingUnrecoverableAmount 	+ "<br>" 
						StringTableValues = StringTableValues + "</pre>"  
					Idx =Idx+1
				
			return StringTableValues

		DerivedCapturedXml is a DerivedField
			type is Text
			initialize StringTableValues
			if (TaxEntity.ThirdParty.VertexOSeries)
				StringTableValues = "================================================ X M L ============================================================<br>"
				StringTableValues = StringTableValues + CapturedXml + "<br>"
				
			return StringTableValues
			
		DerivedOtherParameters is a DerivedField
			type is Text
			initialize StringTableValues
			if (TaxEntity.ThirdParty.VertexOSeries)
				StringTableValues = StringTableValues + "<pre>" 
				StringTableValues = StringTableValues + "========================================== Other Parameters ================================================== <br>"               							
				StringTableValues = StringTableValues + "TurnDisplaySw.............:" + TurnDisplaySw				+ "<br>"
				StringTableValues = StringTableValues + "DisplayOn.................:" + DisplayOn			  		+ "<br>"					
				StringTableValues = StringTableValues + "UserTemplateEnabled.......:" + UserTemplateEnabled 		+ "<br>" 
				StringTableValues = StringTableValues + "LocalReturnVertexTaxIn....:" + LocalReturnVertexTaxIn	    + "<br>"						  
				StringTableValues = StringTableValues + "OverrideTaxEntity.........:" + OverrideTaxEntity			+ "<br>" 
				StringTableValues = StringTableValues + "ResultsCount..............:" + ResultsCount 				+ "<br>" 
				StringTableValues = StringTableValues + "NumberOfTaxLineItems......:" + NumberOfTaxLineItems 		+ "<br>"
				StringTableValues = StringTableValues + "NumberOfTaxAreaIdsReturned:" + NumberOfTaxAreaIdsReturned 	+ "<br>" 
				StringTableValues = StringTableValues + "NumberOfInvoiceTextCodes..:" + NumberOfInvoiceTextCodes  	+ "<br>" 
				StringTableValues = StringTableValues + "HttpXmlNotCaptured........:" + HttpXmlNotCaptured		    + "<br>" 
				StringTableValues = StringTableValues + "HttpStatusCode............:" + MyHTTPInfo.StatusCode	    + "<br>"
				StringTableValues = StringTableValues + "ResponseUsesPartialXpath..:" + ProcessResponseUsingPartialXpath + "<br>"	
				StringTableValues = StringTableValues + "CreateTaxLogMessage.......:" + CreateTaxLogMessage  		+ "<br>"
				StringTableValues = StringTableValues + "</pre>"  
			return StringTableValues

		DerivedTimeStats is a DerivedField
			type is Text
			initialize StringTableValues
			StringTableValues = StringTableValues + "<pre>"
			StringTableValues = StringTableValues + "+---------------------------------------------------------------------------------+<br>"			
			StringTableValues = StringTableValues + "|CalculateTax Statistics                                                          |<br>"
			StringTableValues = StringTableValues + "+---------------------------------------------------------------------------------+" + "<br>" 
			StringTableValues = StringTableValues + " VertexNbrOfTaxesReturned: " + NumberOfTaxesReturned							   + "<br>" 
			StringTableValues = StringTableValues + " NoHaltIfTaxLineItemError: " + NoHaltOnErrorOfTaxLineItem            		       + "<br>" 
			StringTableValues = StringTableValues + " SendMultLineItems.......: " + SendMultLineItems			                       + "<br>"
			StringTableValues = StringTableValues + " UpdateLineItems.........: " + UpdateLineItems			                           + "<br>"
			StringTableValues = StringTableValues + " NumberOfTaxLineItems....: " + CountTaxLineItems     		                       + "<br>" 
			StringTableValues = StringTableValues + " TaxLineItemsExcluded....: " + CountTaxLineItemsExcluded	                       + "<br>"
			StringTableValues = StringTableValues + " CountLineItemsInError...: " + CountLineItemsInError							   + "<br>"
			StringTableValues = StringTableValues + " TotalLineItemsProcessed.: " + TotalLineItemsProcessed	                           + "<br>" 
			StringTableValues = StringTableValues + "+--- Webservice time Statistics --------------------------------------------------+" + "<br>" 
			StringTableValues = StringTableValues + " StartTimestamp..........: " + CalcTaxStartTimeLabel 		                       + "<br>"	 
			StringTableValues = StringTableValues + " StopTimestamp...........: " + CalcTaxStopTimeLabel  		                       + "<br>"	 
			StringTableValues = StringTableValues + "+----Webservice time Breakdown----------------------------------------------------+<br>"						
			StringTableValues = StringTableValues + " BuildTime...............: " + DerivedBuildTimeFormated						   + "<br>"
			StringTableValues = StringTableValues + " RequestTime.............: " + DerivedRequestTimeFormated						   + "<br>"
			StringTableValues = StringTableValues + " ResponseTime............: " + DerivedResponseTimeFormated						   + "<br>"
			StringTableValues = StringTableValues + " TotalTime:HH:MM:SS......: " + FormatedTime	  	   		                       + "<br>" 
			StringTableValues = StringTableValues + "+---------------------------------------------------------------------------------+<br>"		
			StringTableValues = StringTableValues + " PasswordTypeUsed........: " + PasswordTypeUsedText							   + "<br>"  
			StringTableValues = StringTableValues + "</pre>"  
			return StringTableValues
			
			
		DerivedLogErrors is a DerivedField
			type is Text
			initialize StringTableValues
			if (LocalErrorNumber entered
			or  OutputErrorNumber entered)
				StringTableValues = StringTableValues + "======================= Errors.... ========================= <br>" 				
				StringTableValues = StringTableValues + "ErrorCategory:" + LocalErrorCategory + "<br>"	
				StringTableValues = StringTableValues + "ErrorNumber..:" + OutputErrorNumber + "<br>"	
				StringTableValues = StringTableValues + "ErrorMessage.:" + OutputErrorMessage + "<br>"			 	           																
				StringTableValues = StringTableValues + "LocalTrace...:" + RichTextDisplayCalcTax + "<br>"
				
			
			return StringTableValues
					
		ParseTaxCodeDescription is a DerivedField	  						 
  			type is Alpha 1
  			LocalTrace = LocalTrace + "ParseTaxCodeDescription,"
			Pos1 = 0
			Pos2 = 0
			LoadValueFor = 0										
			NbrOfRightSlashes = 0
			initialize LocalParsedCity						  		
			initialize LocalParsedState 					 		
			initialize LocalParsedCounty 					 		
			initialize LocalParsedCountry 							
			if (OutputTaxCodeDescription not entered)				
  				OutputTaxCodeDescription = TaxCode.Description				
			while (Pos1 <= 60)
				Pos1 +=1
				if (OutputTaxCodeDescription[Pos1:Pos1] = "/"
				or  LoadValueFor.State)	
			 		if (OutputTaxCodeDescription[Pos1:Pos1] = "/")
			 			NbrOfRightSlashes +=1						
					if (LoadValueFor.State)									
						Pos2     = BegState + 1
						LocalParsedState = OutputTaxCodeDescription[BegState:Pos2]
						BegCountry = Pos2 + 2
						EndCountry = Pos2 + 3								
						LocalParsedCountry = OutputTaxCodeDescription[BegCountry:EndCountry] 
						if (DisplayOn)
							display "[TLC]BegCountry........:<BegCountry>"
							display "[TLC]EndCountry........:<EndCountry>"
							display "[TLC]NbrOfRightSlashes.:<NbrOfRightSlashes>"
						return blank	
					else					
					if (LoadValueFor.County)
						LocalParsedCounty = OutputTaxCodeDescription[BegCounty:Pos1-1]	
						Pos1 +=1
						BegState = Pos1
					else					
					if (LoadValueFor.City)
						if (LocalParsedCity = blank)
							LocalParsedCity = OutputTaxCodeDescription[1:Pos1-1]	
						Pos1 +=1						
						BegCounty = Pos1  	
										
			 		LoadValueFor = LoadValueFor + 1		
			 		Pos2 = 0

			return blank
			
		GetCountryFromTaxCodeDescription is a DerivedField	  						 
  			type is Alpha 2
  			LocalTrace = LocalTrace + "GetCountryFromTaxCodeDescription,"
  			OutputTaxCodeDescription = TaxCode.Description
			NbrOfRightSlashes = 0
			Pos3 = 0
			Pos4 = 0
			while (Pos3 <= 60)
				Pos3 +=1
		 		if (OutputTaxCodeDescription[Pos3:Pos3] = "/")
		 			NbrOfRightSlashes +=1						
				if (NbrOfRightSlashes = 3)									 
					BegCountry = Pos3 + 1
					EndCountry = Pos3 + 2								
					LocalParsedCountry = OutputTaxCodeDescription[BegCountry:EndCountry]  
					return LocalParsedCountry
			
			return blank
						
		LoadSabrixAnalysisFlags is a DerivedField	  						 
  			type is Alpha 1
  			if (LocalTrace not entered
  			or  CallingModule = "SabrixClient") 
				if (TaxConfigurationRel.WriteToLogFile)
					CreateLogFileHere = true	 
					if (DontCreateLogFile)
						LocalCreateLogFile = false
					else		
						LocalCreateLogFile = true 
				if (TaxConfigurationRel.BypassWebserviceCall)		 
					BypassWebserviceCall = true			
				if (TaxConfigurationRel.DebugMode)					 
					DebugMode			 = true					
				if (TaxConfigurationRel.TestingMode)					 
					TestingMode			 = true		
					
			return blank

		CheckExclusions is a DerivedField
			type is Alpha 1
			LocalTrace = LocalTrace + "CheckExclusions,"
			LocalExcludeFromSabrixCall = false
			initialize ExcludeFromInvoiceAmount
			initialize ExcludeToInvoiceAmount
			BypassNonUS = false
			NotSentToSabrix = false
			
			if (ExcludeFromTaxEstimate)
				LocalExcludeFromSabrixCall = true
				return blank	 

			ExcludeFromInvoiceAmount = TaxConfigurationRel.ExcludeFromInvoiceAmount
			ExcludeToInvoiceAmount = TaxConfigurationRel.ExcludeToInvoiceAmount
			BypassNonUS = TaxConfigurationRel.ExcludeNonUSFromTaxEstimate 
						
			if (ExcludeToInvoiceAmount entered)
				if  (InvoiceAmount >= ExcludeFromInvoiceAmount	 
				and	 InvoiceAmount <= ExcludeToInvoiceAmount)	 
					LocalExcludeFromSabrixCall = true
					return blank
						
			if (CommodityCode entered						 
			and CommodityCodeRel.ExcludeFromTaxEstimate)	
				CommodityCodeExcludeFlag = CommodityCodeRel.ExcludeFromTaxEstimate
				LocalExcludeFromSabrixCall = true
				return blank	

			LocalExecuteReturnBlank2 = DerivedShipToCountry			
											
  			if (BypassNonUS
  			and ShipToCountry != "US") 
  				LocalExcludeFromSabrixCall = true
  				return blank
  				
			return blank

		CheckTaxLineItemsExclusions is a DerivedField		
			type is Alpha 1
			restricted
			LocalTrace = LocalTrace + "CheckTaxLineItemsExclusions,"
			LocalLineExcludeFromSabrixCall = false
			if (LocalExcludeFromSabrixCall)				
				LocalLineExcludeFromSabrixCall = true
				LineLevelExclusions = InvoiceLevelExclusionLabel
				return blank

			if (LineCommodityCode entered						 
			and LineCommodityCodeRel.ExcludeFromTaxEstimate)
				CommodityCodeExcludeFlag = LineCommodityCodeRel.ExcludeFromTaxEstimate
				LineLevelExclusions = LineCommodityCodeExclusionLabel 
				LocalLineExcludeFromSabrixCall = true
				return blank	

  			if (BypassNonUS
  			and LineShipToCountry != "US") 
  				LocalLineExcludeFromSabrixCall = true
  				LineLevelExclusions = LineCountryExclusionLabel 
  				return blank
  				
			return blank

		InvoiceLevelExclusionLabel  is a MessageField			
			"InvoiceLevel" 
			
		LineCommodityCodeExclusionLabel  is a MessageField		
			"LineLevelCommodityCode" 								

		LineCountryExclusionLabel  is a MessageField			
			"LineLevelCountryExclusion=<LineShipToCountry>" 	

		ClearTaxTableOut is a DerivedField
			type is Alpha 1
			restricted
			initialize TblIdx
			initialize TaxTable.TaxTableOutput						
			TblIdx = 1
			while (TblIdx <= 20)									
				initialize TaxTable.TaxTableOutput[TblIdx]			
				TblIdx += 1
				if (TblIdx > 20)
					end while				
			return blank
														
		LoadTaxTableZoneLevels  is a DerivedField
			type is Alpha 1
			restricted
			LocalTrace = LocalTrace + "LoadTaxTableZoneLevels," 
			if (DisplayOn)
				DisplayMonitor = DisplayMonitor + "[13635]LoadTaxTableZoneLevels:" +  ZoneName 	+ "<br>"
				DisplayMonitor = DisplayMonitor + "[13636]TblIdx:" +  TblIdx + "<br>"
				DisplayMonitor = DisplayMonitor + "[13637]TaxCode:" +  TaxCode + "<br>"
				DisplayMonitor = DisplayMonitor + "[13637]SabrixReturnedTaxCode:" +  SabrixReturnedTaxCode + "<br>" 
			if (TblIdx < 9)				
				TblIdx += 1
				if (DisplayOn)
					DisplayMonitor = DisplayMonitor + "[13641]TblIdx:" +  TblIdx + "<br>"
				if (DisplayOn)
					DisplayMonitor = DisplayMonitor + "[13651]TableTaxCode:" +  TaxTable.TaxTableOutput[TblIdx].TaxCode + "<br>"		
				TaxTable.TaxTableOutput[TblIdx].TaxCode  			= DerivedLineItemTaxCode
				TaxTable.TaxTableOutput[TblIdx].TaxRate  			= OutputTaxRate 
				TaxTable.TaxTableOutput[TblIdx].TaxAmount		 	= ZoneLevelTaxAmount
				TaxTable.TaxTableOutput[TblIdx].TaxAmount5DP 		= ZoneLevelTaxAmount		 
				TaxTable.TaxTableOutput[TblIdx].JurisdictionLevel	= ZoneLevel
				TaxTable.TaxTableOutput[TblIdx].Situs				= ZoneName   
				TaxTable.TaxTableOutput[TblIdx].ImpositionType		= ReturnedImpositionType		
				TaxTable.TaxTableOutput[TblIdx].TaxableAmount 		= TaxableAmount
				TaxTable.TaxTableOutput[TblIdx].TaxPointDate 		= TaxPointDate					 
				TaxTable.TaxTableOutput[TblIdx].EffectiveDate		= LocalEffectiveDate 
				TaxTable.TaxTableOutput[TblIdx].InTaxAmount 		= TaxAmount
				TaxTable.TaxTableOutput[TblIdx].Description			= Description 	
					
			return blank

		LoadUserElementsToTaxAttributes is a DerivedField		
			type is Alpha 1
			restricted
			AttributeMissingProcess	= TaxConfigurationRel.AttributeMissingProcess
          	if (TaxConfigurationRel.AttributeMissingMessage entered)
				AttributeMissingMessage	= TaxConfigurationRel.AttributeMissingMessage
			else
				AttributeMissingMessage	= ValueMissingText	

			if  (CallingModule = "ProcessTaxHistory"
			and  System = "AP"
			and  TaxEntity.ThirdParty.Sabrix
			and  SabrixUserElement.UserElement[1].Number entered) 
				LocalOneSourceTaxAttribute50 = SabrixUserElement			
			else 
			if (OneSourceTaxAttribute50.UserElement[1].Number entered)	
				LocalOneSourceTaxAttribute50 = OneSourceTaxAttribute50		
			else	
				LocalOneSourceTaxAttribute50 = SabrixUserElement			

			Trigger = EditUserElements		
			if (LocalErrorNumber entered)									 
				return blank
																 	
			return blank
																		
  		SabrixThirdParty is a DerivedField	  						
  			type is Alpha 1
  			LocalTrace = LocalTrace + "CheckExclusions,"
  			LocalExecuteReturnBlank = LoadSabrixAnalysisFlags
  			LocalExecuteReturnBlank = LoadUserElementsToTaxAttributes	
  			if (LocalErrorNumber entered)
  				return blank
  			LocalTrace = LocalTrace + "SabrixThirdParty,"
  			LocalErrorCategory = "SABRX"
  			if (!BypassEditing)										
  				LocalExecuteReturnBlank = CheckExclusions
  			if (LocalExcludeFromSabrixCall)
  				NotSentToSabrix = true
  				OneSourceInformationMessage = SabrixInfoMessage1
				if (LocalCreateLogFile
				and	CreateLogFileHere) 
					LocalExecuteReturnBlank = CreateTaxToLogFile  			
  				return blank
  					
  			LocalExecuteReturnBlank = SabrixInterface
			if (LocalErrorNumber entered)
				return blank
			
			if (LocalCreateLogFile
			and	CreateLogFileHere)	
				LocalExecuteReturnBlank = CreateTaxToLogFile
				
  			return blank
  			
		SabrixInterface is a DerivedField		 
			type is Alpha 1
			display "SabrixInterface..."
			LocalTrace = LocalTrace + "SabrixInterface,"
			if (BypassEditing)
				LocalContinue = true
			else	
				LocalExecuteReturnBlank = DoSabrixEdits	
				if (LocalErrorNumber entered)
					return blank

  			if (Function.CalculateTax
  			or  Function.Inquire
			or  Function.VerifyTax
  			or  ThirdPartyFunction.Calculate
  			or  VertexQuantumOption.TaxComputation)
  				PostToJournal = false

			if (ThirdPartyFunction.WriteToRegisterOnly
			or ThirdPartyFunction.CalculateAndWrite
			or CallingModule = "ProcessTaxHistory")
				PostToJournal = true	

			LocalExecuteReturnBlank = LoadSabrixDefaults
			  			
  			if (BypassWebserviceCall)
  				LocalExecuteReturnBlank = LoadDummyReturnValues	
  			else
  				LocalExecuteReturnBlank = CallSabrix

			if (LocalErrorNumber not entered)
				if (Function.VerifyTax)
					TaxVerifiedTrigger = TaxVerified
					if (LocalErrorNumber entered)
						LocalErrorCategory 	= blank			
						LocalTaxCodeInError = SabrixReturnedTaxCode
						VerifiedOK = false
						return blank
					else
						VerifiedOK = true
					  					
			return blank	 	

		DoSabrixEdits is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "DoSabrixEdits,"
			if (DisplayOn)
				display "[TLC]CalTax1:Sabrix:DoSabrixEdits...."	
			if (!TaxEntity.ThirdParty.Sabrix)	
				LocalErrorCategory	= "SABRX"
				LocalErrorNumber 	= 702						 
				return blank
			if (PostalAddress.Country not entered)
				LocalErrorCategory = "SABRX"
				LocalErrorNumber   = 703
				return blank

			if (Invoice not entered)
				LocalErrorCategory = "SABRX"
				LocalErrorNumber   = 704
				return blank
				
			if (LineNumber not entered)
				LocalErrorCategory = "SABRX"
				LocalErrorNumber   = 705
				return blank
													
			return blank
			
		LoadSabrixDefaults is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "CallSabrix,"
			if (DisplayOn)
				display "[TLC]CalTax1:Sabrix:BaseCurrency:<BaseCurrency>"	
			if (BaseCurrency not entered)
				if (DefaultFilingCurrency entered)	
					BaseCurrency = DefaultFilingCurrency 
				else
					BaseCurrency = TaxEntity.DefaultFilingCurrency
			if (BaseCurrency not entered)
				BaseCurrency = "USD"		
			
			if (DisplayOn)
				display "[TLC]CalTax1:Sabrix:LineNumber:<LineNumber>"			
			if (LineNumber not entered)
				LineNumber = 1
			
			if (DisplayOn)
				display "[TLC]CalTax2:Sabrix:Invoice:<Invoice>"	
				display "[TLC]CalTax2:Sabrix:System.:<System>"	

			OutputTaxCodeDescription = TaxCode.Description		
			LocalTrigger 			 = ParseTaxCodeDescription
			if (TaxCode not entered 
			or 	NbrOfRightSlashes = 0)
				ShipToCountry 		= PostalAddress.Country[1:2]
				LocalParsedState  	= PostalAddress.StateProvince	
				LocalParsedCity 	= PostalAddress.Municipality	
				LocalParsedCounty	= PostalAddress.County 			
			 									 			
			if (TaxLineItemsRel exist)
				TaxLineItemsExist = true 				

			OneSourceVersionType = TaxEntity.OneSourceVersionType 	
			if (OneSourceVersionType.Generic)						
				if (CallingModule = "ProcessTaxHistory")			
					IsAudited = true								
				else												
					IsAudited = false								
			else													
				IsAudited = TaxEntity.IsAudited						
														
			return blank

		DerivedProductCode is a DerivedField
			type is Text
			LocalTrace = LocalTrace + "DerivedProductCode,"
			if (TaxEntity.PassToProduceCode not entered)
				return CommodityCode
			if (TaxEntity.PassToProduceCode.ProductTaxCategory)
				return ProductTaxCategory
			if (TaxEntity.PassToProduceCode.TaxUsageCode)
				return TaxUsageCode
												
			return CommodityCode

		DerivedShipToCountry is a DerivedField 
			type is Alpha 1
			LocalTrace = LocalTrace + "DerivedShipToCountry,"
			ShipToCountry = GetCountryFromTaxCodeDescription		
			if (ShipToCountry not entered)
				ShipToCountry = PostalAddress.Country[1:2]			
			if (ShipToCountry not entered)
				ShipToCountry = TaxEntity.VATRegistrationCountry	
			if (ShipToCountry not entered)
				ShipToCountry = "US"			
			return blank
												
		DerivedExternalCompanyId is a DerivedField
			type is Text
			LocalTrace = LocalTrace + "DerivedExternalCompanyId,"
			if (TaxEntity.UseAsLegalEntity not entered
			and TaxEntity.ExternalCompanyId entered)
				return TaxEntity.ExternalCompanyId	
					
			if (TaxEntity.UseAsLegalEntity.FinanceEnterpriseGroup)
				if (FinanceEnterpriseGroup entered)
					return FinanceEnterpriseGroup	
				else
					return DerivedFinanceEnterpriseGroup				

			if (TaxEntity.UseAsLegalEntity.TaxEntity
			and TaxEntity entered)
				return TaxEntity
								
			if (TaxEntity.UseAsLegalEntity.Company
			and InvoiceCompany entered)
				return InvoiceCompany
								
			return TaxEntity	
			
		DerivedExternalCompanyIdName is a DerivedField 
			type is like Name
			holds pii
			LocalTrace = LocalTrace + "DerivedExternalCompanyIdName,"
			if (TaxEntity.UseAsLegalEntity not entered
			and TaxEntity.ExternalCompanyIdName entered)
				return TaxEntity.ExternalCompanyIdName	
				
			if (TaxEntity.UseAsLegalEntity.FinanceEnterpriseGroup)
				return FinanceEnterpriseGroup	

			if (TaxEntity.UseAsLegalEntity.TaxEntity)
				return TaxEntity.Name	
								
			if (InvoiceCompany entered)
				return InvoiceCompany.Name						
								
			return TaxEntity.Name

		DerivedGrossAmount is a DerivedField				 
			type is like InternationalAmount
			LocalTrace = LocalTrace + "DerivedGrossAmount,"			
			if (TaxableAmount entered)
				return TaxableAmount
			if (InvoiceAmount entered)
				return InvoiceAmount
			if (InvoiceAmount entered
			and TaxAmount entered)
				return InvoiceAmount - TaxAmount	
			if  (UnitCost entered
			and  Quantity entered)
				return UnitCost * Quantity								
						
			return blank			

		Derived1SourceTaxAttributes is a DerivedField				
			type is Text
			default label is untranslatable
			initialize StringTableValues
			if (TaxEntity.ThirdParty.Sabrix)
				Idx = 0
				StringTableValues = StringTableValues + "<pre>" 
				StringTableValues = StringTableValues + "======================= Input - OneSource User Elements Header 50 ========================= <br>" 				
				StringTableValues = StringTableValues + "============================= Level: " + UserElementLevel + " ============================= <br>" 
				if (NbrOfAttributesSkipped > 0)
					StringTableValues = StringTableValues + "======================= Number Of Attributes Skipped: " + NbrOfAttributesSkipped + " ========================= <br>" 
				while (Idx < 50)
					Idx +=1   
					if (LocalOneSourceTaxAttribute50.UserElement[Idx].Number entered)													
						StringTableValues = StringTableValues + "[" + Idx + "] <br>" 		
						StringTableValues = StringTableValues + "ElementNumber:" + LocalOneSourceTaxAttribute50.UserElement[Idx].Number + "<br>"	
						StringTableValues = StringTableValues + "ElementName..:" + LocalOneSourceTaxAttribute50.UserElement[Idx].Name	+ "<br>"	
						StringTableValues = StringTableValues + "ElementValue.:" + LocalOneSourceTaxAttribute50.UserElement[Idx].Value	+ "<br>"			 	           																 
					else
					if (LocalOneSourceTaxAttribute50.UserElement[Idx].Number not entered)
						StringTableValues = StringTableValues + "</pre>"  
						end while   		
			return StringTableValues

		DerivedSabrixElements is a DerivedField			
			type is Text
			default label is untranslatable
			initialize StringTableValues
			if (TaxEntity.ThirdParty.Sabrix)
				Idx = 0
				StringTableValues = StringTableValues + "<pre>" 
				StringTableValues = StringTableValues + "======================= Input - OneSource User Elements ========================= <br>" 				
				while (Idx < 25)
					Idx +=1   
					if (SabrixUserElement.UserElement[Idx].Number entered)													
						StringTableValues = StringTableValues + "[" + Idx + "] <br>" 
						StringTableValues = StringTableValues + "ElementNumber:" + SabrixUserElement.UserElement[Idx].Number + "<br>"	
						StringTableValues = StringTableValues + "ElementName..:" + SabrixUserElement.UserElement[Idx].Name	+ "<br>"	
						StringTableValues = StringTableValues + "ElementValue.:" + SabrixUserElement.UserElement[Idx].Value	+ "<br>"			 	           																 
					else
					if (SabrixUserElement.UserElement[Idx].Number not entered)
						StringTableValues = StringTableValues + "</pre>"  
						end while   
				
			return StringTableValues

		DerivedSabrixElementsLineLevel is a DerivedField	
			type is Text									
			restricted
			initialize StringTableValues
			if (TaxEntity.ThirdParty.Sabrix
			and TaxLineItemsRel exist)
				for each TaxLineItemsRel
					initialize StringTableValues
					Idx = 0
					StringTableValues = StringTableValues + "<pre>" 
					StringTableValues = StringTableValues + "======================= Input - Line Item User Elements ========================= <br>" 
					if (NbrOfLineAttributesSkipped > 0)
						StringTableValues = StringTableValues + "======================= Number Of Attributes Skipped: " + NbrOfLineAttributesSkipped + " ========================= <br>" 
					while (Idx < 25)  
						Idx +=1   
						if (each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Number entered)													
							StringTableValues = StringTableValues + "[" + Idx + "] <br>" 
							StringTableValues = StringTableValues + "ElementNumber:" + each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Number  + "<br>"	
							StringTableValues = StringTableValues + "ElementName..:" + each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Name	+ "<br>"	
							StringTableValues = StringTableValues + "ElementValue.:" + each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Value	+ "<br>"			 	           																 
						else
						if (each.LineItemUserFieldsRel.UserElementGroup.UserElement[Idx].Number not entered)
							StringTableValues = StringTableValues + "</pre>"  
							end while   
				
			return StringTableValues

		DisplayOutputUserElementsFromFile is a DerivedField			
			type is Text
			restricted
			default label is untranslatable
			initialize StringTableValues
			if (TaxEntity.ThirdParty.Sabrix)
				StringTableValues = StringTableValues + "<pre>" 
				StringTableValues = StringTableValues + "======================= Ouput - User Elements ========================= <br>"
				if (NbrOfAttributesSkipped > 0)
					StringTableValues = StringTableValues + "======================= Number Of Attributes Skipped: " + NbrOfAttributesSkipped + " ========================= <br>" 				 				
				if (OutputUserAttributesRel exist)
					for each OutputUserAttributesRel	 															 																		
						StringTableValues = StringTableValues + "Level.:" + each.Level                             + "<br>" 													
						StringTableValues = StringTableValues + "Number:" + each.UserAttributeNumber               + "<br>"	 
						StringTableValues = StringTableValues + "Name..:" + each.UserAttributeName	               + "<br>"	
						StringTableValues = StringTableValues + "Value.:" + each.UserAttributeValue		           + "<br>"	
						StringTableValues = StringTableValues + "============================================="    + "<br>" 	 		 	           																 
				StringTableValues = StringTableValues + "</pre>"     
				
			return StringTableValues								

		DerivedOutputUserElements is a DerivedField			
			type is Text
			default label is untranslatable
			initialize StringTableValues
			if (TaxEntity.ThirdParty.Sabrix)
				Idx = 0
				StringTableValues = StringTableValues + "<pre>" 
				StringTableValues = StringTableValues + "======================= Ouput - User Elements ========================= <br>"
				if (NbrOfAttributesSkipped > 0)
					StringTableValues = StringTableValues + "======================= Number Of Attributes Skipped: " + NbrOfAttributesSkipped + " ========================= <br>" 				 				
				while (Idx < 25)
					Idx +=1   
					if (LocalReturnedUserElement.UserElement[Idx].Number entered)													
						StringTableValues = StringTableValues + "Name..:" + LocalReturnedUserElement.UserElement[Idx].Name	+ "<br>"	
						StringTableValues = StringTableValues + "Value.:" + LocalReturnedUserElement.UserElement[Idx].Value	+ "<br>"	
						StringTableValues = StringTableValues + "=========================================================" + "<br>" 	
				StringTableValues = StringTableValues + "</pre>"     
				
			return StringTableValues
			
		ClearAttributeValues is a DerivedField
			type is Alpha 1
			restricted
			initialize Attr
			initialize ReturnedUserElement 
			initialize LocalReturnedUserElement			 
			while (Attr < 25)
				Attr += 1
 				initialize LocalReturnedUserElement.UserElement[Attr].Number
				initialize LocalReturnedUserElement.UserElement[Attr].Name 	 
				initialize LocalReturnedUserElement.UserElement[Attr].Value	 
			return blank

		InitializeKeyValues is a DerivedField
			type is Alpha 1
			restricted
			initialize LocalInvoiceNumberKey
			initialize LocalLineNumberKey	
			initialize LocalTypeKey
			initialize LocalAttributeNameKey
			return blank
						  				
		LoadAttributes  is a DerivedField
			type is Alpha 1		 
			restricted
			initialize Attr
			Trigger = InitializeKeyValues
			if (DontCreateResultFiles)
				LocalContinue = true
			else			 
			if (CreateOutputUserFieldFile
			and LocalReturnedUserElement.UserElement[1].Number entered)
				while (Attr < 50)			
					Attr += 1
					if (LocalReturnedUserElement.UserElement[Attr].Number not entered)
						end while
					else	
					if (LocalReturnedUserElement.UserElement[Attr].Number entered)
						if (OriginalInvoiceNumber entered)
							LocalInvoiceNumberKey 							= OriginalInvoiceNumber	
						else	
							LocalInvoiceNumberKey 							= Invoice
						if (OutputUserElementLoaded.LineLevel)
							LocalInvoiceNumberKey							= blank							
							if (EachLineItemNumber entered)						
								LocalLineNumberKey 							= EachLineItemNumber	
							else	
								LocalLineNumberKey 							= LineNumber
						else
							LocalLineNumberKey 								= blank							
						LocalAttributeNameKey 								= LocalReturnedUserElement.UserElement[Attr].Name	 
						if (ThisOutputUserAttributeRel exist)
							SkipCreateOfThisRecord = true
						else		
							invoke Create ThisOutputUserAttributeRel	
								invoked.FinanceEnterpriseGroup 							= FinanceEnterpriseGroup
								invoked.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueIdOfRelatedObject
								invoked.OneSourceUserAttribute.InvoiceNumber 			= LocalInvoiceNumberKey							
								invoked.OneSourceUserAttribute.LineNumber 				= LocalLineNumberKey	
								if (OutputUserElementLoaded.LineLevel)
									invoked.Level										= "L"
								else
								if (OutputUserElementLoaded.InvoiceLevel)
									invoked.OneSourceUserAttribute.LineNumber 			= LocalLineNumberKey	
									invoked.Level										= blank
								invoked.OneSourceUserAttribute.Type						= "O"	
								invoked.OneSourceUserAttribute.Type						= "O"
								invoked.RelatedObjectReference							= RelatedObjectReference
								invoked.UserAttributeNumber								= LocalReturnedUserElement.UserElement[Attr].Number
								invoked.UserAttributeName								= LocalReturnedUserElement.UserElement[Attr].Name
								invoked.UserAttributeValue								= LocalReturnedUserElement.UserElement[Attr].Value			 
						 		invoked.Description										= Description				 
								invoked.OriginalInvoiceNumber 							= OriginalInvoiceNumber		 
								invoked.UniqueLineNumber 								= UniqueLineNumber	
									 
			return blank																
																
		SabrixLogText  is a DerivedField
			type is Text
			initialize StringTableValues
			if (TaxEntity.ThirdParty.Sabrix)
				StringTableValues = StringTableValues + "<pre>" 
				StringTableValues = StringTableValues + "====================    O N E S O U R C E    ======================= <br>" 	
				StringTableValues = StringTableValues + "============================= Setup  =============================== <br>" 
			    StringTableValues = StringTableValues + "OneSourceVersionType.......:" + OneSourceVersionType + "<br>"     
				StringTableValues = StringTableValues + "CompanyRole................:" + TaxEntity.CompanyRole + "<br>"
				StringTableValues = StringTableValues + "ExternalCompanyId..........:" + DerivedExternalCompanyId + "<br>"			
				StringTableValues = StringTableValues + "ExternalCompanyIdName......:" + DerivedExternalCompanyIdName + "<br>"
				StringTableValues = StringTableValues + "BaseCurrency...............:" + BaseCurrency + "<br>"
				StringTableValues = StringTableValues + "HostSystem.................:" + TaxEntity.HostSystem + "<br>" 	
				StringTableValues = StringTableValues + "TransactionType............:" + "GS" + "<br>"	 
				StringTableValues = StringTableValues + "IsAudited..................:" + TaxEntity.IsAudited + "<br>"
				StringTableValues = StringTableValues + "FilterGroupName............:" + TaxEntity.FilterGroupName + "<br>" 	
				StringTableValues = StringTableValues + "FilterGroupOwner...........:" + TaxEntity.FilterGroupOwner + "<br>" 		 				 
				StringTableValues = StringTableValues + "ProductMappingGroupName....:" + TaxEntity.ProductMappingGroupName + "<br>"	 		 
				StringTableValues = StringTableValues + "ProductMappingGroupOwner...:" + TaxEntity.ProductMappingGroupOwner + "<br>"		 				
				StringTableValues = StringTableValues + "TaxingJurisdiction.........:" + TaxingJurisdiction + "<br>"	
				StringTableValues = StringTableValues + "UseAsLegalEntity...........:" + TaxEntity.UseAsLegalEntity + "<br>"
				StringTableValues = StringTableValues + "OutputTaxCodeDescription...:" + OutputTaxCodeDescription + "<br>"	
				StringTableValues = StringTableValues + "LocalParsedCity............:" + LocalParsedCity + "<br>"
				StringTableValues = StringTableValues + "LocalParsedCounty..........:" + LocalParsedCounty + "<br>"
				StringTableValues = StringTableValues + "LocalParsedState...........:" + LocalParsedState + "<br>"
				StringTableValues = StringTableValues + "LocalParsedCountry.........:" + LocalParsedCountry + "<br>"		
				StringTableValues = StringTableValues + "ShipToCountry..............:" + ShipToCountry + "<br>"
				StringTableValues = StringTableValues + "CancelSequence/IsReverse...:" + CancelSequence +	"<br>"
				StringTableValues = StringTableValues + "IsCancelled/IsReversed.....:" + IsCancelled + "<br>"				
				StringTableValues = StringTableValues + "InvoicedOrCreditMemo.......:" + InvoicedOrCreditMemo + "<br>"		
				StringTableValues = StringTableValues + "OriginalInvoiceNumber......:" + OriginalInvoiceNumber  + "<br>"	
				StringTableValues = StringTableValues + "DeliveryTerms .............:" + DeliveryTerms + "<br>"				
				StringTableValues = StringTableValues + "CommodityCode .............:" + CommodityCode + "<br>"				
				StringTableValues = StringTableValues + "EAMCommodityCode ..........:" + EAMCommodityCode + "<br>"			
				StringTableValues = StringTableValues + "ItemNumber/PartNumber......:" + ItemNumber + "<br>"				
				StringTableValues = StringTableValues + "Description ...............:" + Description + "<br>"				
				StringTableValues = StringTableValues + "UniqueLineNumber ..........:" + UniqueLineNumber + "<br>"			
				StringTableValues = StringTableValues + "ReturnOneSourceTaxIn ......:" + ReturnOneSourceTaxIn + "<br>"		
				StringTableValues = StringTableValues + "UserElementLevel ..........:" + UserElementLevel + "<br>"			
				StringTableValues = StringTableValues + "CreateOutputUserFieldFile..:" + CreateOutputUserFieldFile + "<br>"		
				StringTableValues = StringTableValues + "TaxLineItemsExist..........:" + TaxLineItemsExist + "<br>"			
				StringTableValues = StringTableValues + "NumberOfTaxLineItemsExist..:" + LocalTaxLineItemsCount + "<br>"	
				StringTableValues = StringTableValues + "DocumentType...............:" + DocumentType + "<br>" 	            
				StringTableValues = StringTableValues + "AttributeMissingProcess....:" + AttributeMissingProcess + "<br>" 	
				StringTableValues = StringTableValues + "EndUser....................:" + EndUser + "<br>" 	                
				StringTableValues = StringTableValues + "PostDate...................:" + PostDate + "<br>" 	                
				StringTableValues = StringTableValues + "========================Country Defaulting=========================<br>"
				StringTableValues = StringTableValues + "1)TaxCodeDescriptionCountry:" + LocalParsedCountry	+ "<br>"
				StringTableValues = StringTableValues + "2)ProcessLevelCountry......:" + PostalAddress.Country + "<br>"
				StringTableValues = StringTableValues + "3)TaxEntity.VATRegCountry..:" + TaxEntity.VATRegistrationCountry + "<br>"
				StringTableValues = StringTableValues + "========================== Exclusions ============================= <br>" 
				StringTableValues = StringTableValues + "NotSentToSabrix............:" + NotSentToSabrix + "<br>"			
				StringTableValues = StringTableValues + "BypassNonUS................:" + BypassNonUS + "<br>"				 
				StringTableValues = StringTableValues + "ExcludeFromInvoiceAmount...:" + ExcludeFromInvoiceAmount + "<br>"				 
				StringTableValues = StringTableValues + "ExcludeToInvoiceAmount.....:" + ExcludeToInvoiceAmount + "<br>"				 
				StringTableValues = StringTableValues + "ExcludeFromSabrixCall......:" + LocalExcludeFromSabrixCall + "<br>"				 
				StringTableValues = StringTableValues + "InputExcludeFromTaxEstimate:" + ExcludeFromTaxEstimate + "<br>"				 			 
				StringTableValues = StringTableValues + "CommodityCode..............:" + CommodityCode + "<br>"			
				StringTableValues = StringTableValues + "CommodityCodeExcludeFlag...:" + CommodityCodeExcludeFlag + "<br>"
				StringTableValues = StringTableValues + "OneSourceInformationMessage:" + OneSourceInformationMessage + "<br>"			
				StringTableValues = StringTableValues + "</pre>" 
			return StringTableValues																								
			
		InitializeShipToFields is a DerivedField		 	 
			type is Alpha 1
			restricted
			LocalTrace = LocalTrace + "IntitalizeShipToFields,"
			initialize LocalParsedCity						  
			initialize LocalParsedState 					 
			initialize LocalParsedCounty 					 	
			initialize LocalParsedCountry 	
			initialize PostalCodeFirst5					 	
			initialize PostalCodeLast4 		
			return blank
				
		LoadMultipleLineItems is a DerivedField		
			type is Alpha 1
			restricted
			LocalTrace = LocalTrace + "LoadMultipleLineItems,"
			LocalStartTimestamp	= DerivedTimestamp
			EachXmlLine = 0
			CountTaxLineItems = 0
			CountTaxLineItemsExcluded = 0
			CountLineItemsInError = 0
			for each TaxLineItemsRel
				initialize LocalErrorNumber
				LocalTaxLineItem = each.LineItemNumber
				TaxLineItemShipToTaxCode = each.ShipToTaxCode
				Trigger = EditTaxLineItemsIn
				LineItemErrored = false
				if (LocalErrorNumber entered)
					LineItemErrored = true
					if (NoHaltOnErrorOfTaxLineItem)		 
						invoke Update each
							invoked.LineitemError = true
							invoked.ReturnedErrorNumber = LocalErrorNumber
							invoked.ReturnedErrorMessage = OutputErrorText	
						initialize LocalErrorNumber	
					else			
						return blank 
				if (LineItemErrored                 
				and NoHaltOnErrorOfTaxLineItem)     
					increment CountLineItemsInError 
				else 	                            
				if (each.ExcludeFromTaxEstimate)
					BypassOneSourceCall = true
					increment CountTaxLineItemsExcluded 
				else	
					LineShipToCountry = each.ShipToAddress.Country			 
					LineCommodityCode = each.CommodityCode			 
					LocalTrigger = CheckTaxLineItemsExclusions
										
					EachXmlLine = EachXmlLine + 1
					LineItemNumber = each.LineItemNumber
					invoke Create IndataTypeINVOICELINE
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
						invoked.IndataType             			= "1"
						invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= EachXmlLine  
						invoked.PRODUCTCODE               		= each.CommodityCode			 
						invoked.GROSSAMOUNT						= each.TaxableAmount	 
						invoked.LINENUMBER						= each.LineItemNumber	 	 
						invoked.IndataTypeINVOICELINE0          = each.LineItemNumber             
						if (TaxAmount entered)					
							invoked.VENDORTAX					= each.ChargedTax
						if (InvoicedOrCreditMemo.Credit)
							invoked.ISCREDIT					= true
						if (each.CommodityCode entered)		
							invoked.COMMODITYCODE				= each.CommodityCode				 	
						if (DeliveryTerms entered)
							invoked.DELIVERYTERMS				= DeliveryTerms				 
						if (each.LineItemNumber entered)
							invoked.PARTNUMBER					= each.LineItemNumber				 
						if (each.LineItemNumber entered)	
							invoked.UNIQUELINENUMBER			= each.LineItemNumber	
		
					LocalTrigger = InitializeShipToFields
					if (each.ShipToTaxCode entered)
						EachLineTaxCode = each.ShipToTaxCode
						initialize OutputTaxCodeDescription
						OutputTaxCodeDescription = each.TransShipToTaxCodeDescription	  
						LocalTrigger = ParseTaxCodeDescription
						if (LocalParsedCountry not entered)
							if (each.ShipToAddress.Country entered)
								LocalParsedCountry = each.ShipToAddress.Country	 
							else							
								LocalParsedCountry = "US"
					else
					if (each.ShipToAddress.Country entered)
						LocalParsedCity						= each.ShipToAddress.Municipality 
						LocalParsedState 					= each.ShipToAddress.StateProvince
						LocalParsedCounty 					= each.ShipToAddress.County	
						LocalParsedCountry 					= each.ShipToAddress.Country
						PostalCodeFirst5					= each.ShipToAddress.PostalCode[1:5]	
						PostalCodeLast4 					= each.ShipToAddress.PostalCode[6:10] - "-"	
					
					if (LocalParsedCountry not entered)
						if (TaxCode entered)
							OutputTaxCodeDescription = TaxCode.Description
							LocalTrigger 			 = ParseTaxCodeDescription
							if (LocalParsedCountry not entered)
								LocalParsedCountry = "US"
						else
						if (PostalAddress.Country entered)
							LocalTrigger 					= InitializeShipToFields
							LocalParsedCountry				= PostalAddress.Country			 
							LocalParsedState				= PostalAddress.StateProvince  
							LocalParsedCity					= PostalAddress.Municipality 	 
							LocalParsedCounty				= PostalAddress.County 	
							PostalCodeFirst5				= PostalAddress.PostalCode[1:5]
							PostalCodeLast4 				= PostalAddress.PostalCode[6:10] - "-"	
						 
					if (LocalParsedCountry not entered)			
						LocalErrorCategory = "SABRX"
						LocalErrorNumber   = 706
						return blank
									
					invoke Create IndataTypeINVOICELINESHIPTO
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
						invoked.IndataType             			= "1"
						invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= EachXmlLine 
						invoked.IndataTypeINVOICELINESHIPTO 	= "1"
								
						invoked.COUNTRY							= LocalParsedCountry
						invoked.STATE							= LocalParsedState 			 
						invoked.CITY							= LocalParsedCity	
						invoked.COUNTY							= LocalParsedCounty	
						if (TaxCode not entered												 
						and PostalAddress.PostalCode entered)
							invoked.POSTCODE	= PostalCodeFirst5	
							invoked.GEOCODE		= PostalCodeLast4	

					invoke Create IndataTypeINVOICELINESHIPFROM
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
						invoked.IndataType             			= "1"
						invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= EachXmlLine 
						invoked.IndataTypeINVOICELINESHIPFROM 	= "1"
						invoked.COUNTRY							= each.ShipFromAddress.Country			 
						invoked.STATE							= each.ShipFromAddress.StateProvince	 	
						invoked.CITY							= each.ShipFromAddress.Municipality	 
						invoked.COUNTY							= each.ShipFromAddress.County 	 		 
						if (each.ShipFromAddress.PostalCode entered)
							invoked.POSTCODE					= each.ShipFromAddress.PostalCode[1:5]	 
							invoked.GEOCODE						= each.ShipFromAddress.PostalCode[6:10] - "-"

					Trigger = each.Load1SourceUserAttributesFrDerived			
					LocalLineTaxAttribute50 	= each.TransientUserElement50	
					LineItemNumber = each.LineItemNumber							
					Trigger = EditLineItemUserElements								
					if (LocalErrorNumber entered)									
						return blank												
					Idx = 0
					while (Idx < 50)
						Idx +=1
						if (LocalLineTaxAttribute50.UserElement[Idx].Number entered)
							invoke Create IndataTypeINVOICELINEUSERELEMENT
								invoked.OneSourceTaxCalculation				= "1"
								invoked.TaxCalculationRequest				= "1"				
								invoked.IndataType             				= "1"
								invoked.IndataTypeINVOICE      				= "1"
								invoked.IndataTypeINVOICELINE				= EachXmlLine 
								invoked.IndataTypeINVOICELINEUSERELEMENT 	= LocalLineTaxAttribute50.UserElement[Idx].Number		 
								invoked.NAME								= LocalLineTaxAttribute50.UserElement[Idx].Name		 
								invoked.VALUE								= LocalLineTaxAttribute50.UserElement[Idx].Value								
					LocalTaxLineItemsCount = EachXmlLine											

					if (QuantityAmount entered)				
						invoke Create IndataTypeINVOICELINEQUANTITIES
							invoked.OneSourceTaxCalculation			= "1"
							invoked.TaxCalculationRequest			= "1"
							invoked.IndataType             			= "1"
							invoked.IndataTypeINVOICE      			= "1"
							invoked.IndataTypeINVOICELINE			= EachXmlLine 
							invoked.IndataTypeINVOICELINEQUANTITIES = "1"
						
						invoke Create IndataTypeINVOICELINEQUANTITIESQUANTITY
							invoked.OneSourceTaxCalculation					= "1"
							invoked.TaxCalculationRequest					= "1"
							invoked.IndataType             					= "1"
							invoked.IndataTypeINVOICE      					= "1"
							invoked.IndataTypeINVOICELINE					= EachXmlLine 
							invoked.IndataTypeINVOICELINEQUANTITIES 		= "1"
							invoked.IndataTypeINVOICELINEQUANTITIESQUANTITY = "1"
							invoked.AMOUNT									= QuantityAmount	 
							invoked.UOM										= UnitOfMeasure		 

			CountTaxLineItems = EachXmlLine
			return blank	
			
		CallSabrix is a DerivedField			 
			type is Alpha 1
			LocalTrace = LocalTrace + "CallSabrix,"
			LocalStartTimestamp	= DerivedTimestamp
			BuildStartTimestamp = DerivedTimestamp time
			if (OneSourceVersionType.Generic)							
				LocalTrigger = ProcessOneSourceGeneric					
			else														
			if  (TaxEntity.ThirdParty.Sabrix)
				invoke Create OneSourceTaxCalculation 
					invoked.OneSourceTaxCalculation			= "1"
					
				invoke Create TaxCalculationRequest 
					invoked.OneSourceTaxCalculation			= "1"
					invoked.TaxCalculationRequest			= "1"

                invoke Create IndataType
					invoked.OneSourceTaxCalculation			= "1"
					invoked.TaxCalculationRequest			= "1"
                    invoked.IndataType            			= "1"
                    invoked.CALLINGSYSTEMNUMBER    			= TaxEntity.CallingSystem	 

                invoke Create IndataTypeINVOICE
					invoked.OneSourceTaxCalculation			= "1"
					invoked.TaxCalculationRequest			= "1"
                    invoked.IndataType             			= "1"
                    invoked.IndataTypeINVOICE      			= "1"
					invoked.COMPANYNAME						= DerivedExternalCompanyIdName 					 
					invoked.COMPANYROLE						= TaxEntity.CompanyRole					 
					invoked.CURRENCYCODE					= BaseCurrency      					 
					invoked.VENDORNAME						= VendorCustomerName 					 
					invoked.VENDORNUMBER					= VendorCustomer    					 
					invoked.EXTERNALCOMPANYID				= DerivedExternalCompanyId				 
					invoked.FILTERGROUPNAME					= TaxEntity.FilterGroupName				  
					invoked.FILTERGROUPOWNER				= TaxEntity.FilterGroupOwner			 
					invoked.HOSTSYSTEM						= TaxEntity.HostSystem					 
					invoked.INVOICEDATE						= InvoiceDate							  
					invoked.INVOICENUMBER					= Invoice           					 
					invoked.ISAUDITED						= TaxEntity.IsAudited					  
					invoked.PRODUCTMAPPINGGROUPNAME			= TaxEntity.ProductMappingGroupName		  
					invoked.PRODUCTMAPPINGGROUPOWNER 		= TaxEntity.ProductMappingGroupOwner	 
					invoked.TRANSACTIONTYPE 				= "GS"									 
					invoked.UNIQUEINVOICENUMBER 			= UniqueIdOfRelatedObject				 
					invoked.VENDORTAX						= TaxAmount								 
					if (OriginalInvoiceNumber entered)
						invoked.ORIGINALINVOICENUMBER		= OriginalInvoiceNumber
					if (InvoicedOrCreditMemo.Credit)
						invoked.ISCREDIT					= true
					if (IsCancelled
					or  CancelSequence entered)
						invoked.ISREVERSED					= "Y"
					else
						invoked.ISREVERSED					= "N"											
					if (DeliveryTerms entered)
						invoked.DELIVERYTERMS				= DeliveryTerms					 																			
				if (SendMultLineItems 
				and TaxLineItemsRel exist)
					if (LocalOneSourceTaxAttribute50.UserElement[1].Number entered)	
						Idx = 0
						while (Idx < 50)
							Idx +=1
							if (LocalOneSourceTaxAttribute50.UserElement[Idx].Number entered)
								invoke Create IndataTypeINVOICEUSERELEMENT
									invoked.OneSourceTaxCalculation			= "1"
									invoked.TaxCalculationRequest			= "1"				
									invoked.IndataType             			= "1"
									invoked.IndataTypeINVOICE      			= "1"
									invoked.IndataTypeINVOICEUSERELEMENT    = LocalOneSourceTaxAttribute50.UserElement[Idx].Number		 
									invoked.NAME							= LocalOneSourceTaxAttribute50.UserElement[Idx].Name		 
									invoked.VALUE							= LocalOneSourceTaxAttribute50.UserElement[Idx].Value															
					LocalTrigger = LoadMultipleLineItems	
					if (LineItemErrored                		
					and !NoHaltOnErrorOfTaxLineItem)     	
						return blank						
					if (CountTaxLineItems < 1)				
						return blank
				else	
					invoke Create IndataTypeINVOICELINE
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
	                    invoked.IndataType             			= "1"
	                    invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= "1"
						invoked.PRODUCTCODE               		= DerivedProductCode	 
						invoked.GROSSAMOUNT						= DerivedGrossAmount	 
						invoked.LINENUMBER						= LineNumber			 
						invoked.IndataTypeINVOICELINE0          = LineNumber             
						if (TaxAmount entered)					
							invoked.VENDORTAX					= TaxAmount
						if (InvoicedOrCreditMemo.Credit)
							invoked.ISCREDIT					= true
						else
							invoked.ISCREDIT					= false	
						if (EAMCommodityCode entered)										 
							invoked.COMMODITYCODE				= EAMCommodityCode
						else			
						if (CommodityCode entered)		
							invoked.COMMODITYCODE				= CommodityCode				 	
						if (DeliveryTerms entered)
							invoked.DELIVERYTERMS				= DeliveryTerms				 
						if (ItemNumber entered)
							invoked.PARTNUMBER					= ItemNumber				 
						if (Description entered)	
							invoked.DESCRIPTION					= Description				 
						if (UniqueLineNumber entered)	
							invoked.UNIQUELINENUMBER			= UniqueLineNumber			 																	 													
					if (UserElementLevel.Invoice)
						Idx = 0
						while (Idx < 50)	
							Idx +=1
							if (LocalOneSourceTaxAttribute50.UserElement[Idx].Number entered)
				                invoke Create IndataTypeINVOICEUSERELEMENT
									invoked.OneSourceTaxCalculation			= "1"
									invoked.TaxCalculationRequest			= "1"				
				                    invoked.IndataType             			= "1"
				                    invoked.IndataTypeINVOICE      			= "1"
				                    invoked.IndataTypeINVOICEUSERELEMENT    = LocalOneSourceTaxAttribute50.UserElement[Idx].Number		 
									invoked.NAME							= LocalOneSourceTaxAttribute50.UserElement[Idx].Name		 
									invoked.VALUE							= LocalOneSourceTaxAttribute50.UserElement[Idx].Value							
	
					if (QuantityAmount entered)				
						invoke Create IndataTypeINVOICELINEQUANTITIES
							invoked.OneSourceTaxCalculation			= "1"
							invoked.TaxCalculationRequest			= "1"
						    invoked.IndataType             			= "1"
		                    invoked.IndataTypeINVOICE      			= "1"
							invoked.IndataTypeINVOICELINE			= "1"	
							invoked.IndataTypeINVOICELINEQUANTITIES = "1"
						
						invoke Create IndataTypeINVOICELINEQUANTITIESQUANTITY
							invoked.OneSourceTaxCalculation					= "1"
							invoked.TaxCalculationRequest					= "1"
						    invoked.IndataType             					= "1"
		                    invoked.IndataTypeINVOICE      					= "1"
							invoked.IndataTypeINVOICELINE					= "1"	
							invoked.IndataTypeINVOICELINEQUANTITIES 		= "1"
							invoked.IndataTypeINVOICELINEQUANTITIESQUANTITY = "1"
							invoked.AMOUNT									= QuantityAmount	 
							invoked.UOM										= UnitOfMeasure		 
					
					invoke Create IndataTypeINVOICELINESHIPTO
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
					    invoked.IndataType             			= "1"
	                    invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= "1"	
						invoked.IndataTypeINVOICELINESHIPTO 	= "1"
						if (ShipToCountry not entered)										
							LocalExecuteReturnBlank2 = DerivedShipToCountry					
								
						invoked.COUNTRY							= ShipToCountry
						invoked.STATE							= LocalParsedState 			
						invoked.CITY							= LocalParsedCity	
						invoked.COUNTY							= LocalParsedCounty	
						if (TaxCode not entered												
						and PostalAddress.PostalCode entered)
							invoked.POSTCODE	= PostalAddress.PostalCode[1:5]	 
							invoked.GEOCODE		= PostalAddress.PostalCode[6:10] - "-"						
	
					invoke Create IndataTypeINVOICELINESHIPFROM
						invoked.OneSourceTaxCalculation			= "1"
						invoked.TaxCalculationRequest			= "1"
					    invoked.IndataType             			= "1"
	                    invoked.IndataTypeINVOICE      			= "1"
						invoked.IndataTypeINVOICELINE			= "1"	
						invoked.IndataTypeINVOICELINESHIPFROM 	= "1"
						invoked.COUNTRY							= FromPostalAddress.Country			 
						invoked.STATE							= FromPostalAddress.StateProvince	 	
						invoked.CITY							= FromPostalAddress.Municipality	 
						invoked.COUNTY							= FromPostalAddress.County 	 		 
						if (FromPostalAddress.PostalCode entered)
							invoked.POSTCODE					= FromPostalAddress.PostalCode[1:5]	 
							invoked.GEOCODE						= FromPostalAddress.PostalCode[6:10] - "-"
					
										
					if (TaxLineItemsRel exist)	
						FirstLineItemNumberSeq = first TaxLineItemsRel.TaxLineItem.Sequence
						for each FirstTaxLineItemRel	
							Trigger = each.Load1SourceUserAttributesFrDerived						
							LocalLineTaxAttribute50 = each.TransientUserElement50					
							LocalLineItemNbr		= each.LineItemNumber							
							Trigger = EditLineItemUserElements										
							if (LocalErrorNumber entered)											
								return blank														
							Idx = 0
							while (Idx < 25)
								Idx +=1
								if (LocalLineTaxAttribute50.UserElement[Idx].Number entered)		
									invoke Create IndataTypeINVOICELINEUSERELEMENT
										invoked.OneSourceTaxCalculation				= "1"
										invoked.TaxCalculationRequest				= "1"				
									    invoked.IndataType             				= "1"
					                    invoked.IndataTypeINVOICE      				= "1"
										invoked.IndataTypeINVOICELINE				= "1"	
										invoked.IndataTypeINVOICELINEUSERELEMENT 	= LocalLineTaxAttribute50.UserElement[Idx].Number	
										invoked.NAME								= LocalLineTaxAttribute50.UserElement[Idx].Name		
										invoked.VALUE								= LocalLineTaxAttribute50.UserElement[Idx].Value	
							LocalTaxLineItemsCount = Idx				
					else 
					if (UserElementLevel.Line
					or  UserElementLevel.LineOnly)
						Idx = 0
						while (Idx < 50) 
							Idx +=1
							if (LocalOneSourceTaxAttribute50.UserElement[Idx].Number entered)
								invoke Create IndataTypeINVOICELINEUSERELEMENT
									invoked.OneSourceTaxCalculation				= "1"
									invoked.TaxCalculationRequest				= "1"				
								    invoked.IndataType             				= "1"
				                    invoked.IndataTypeINVOICE      				= "1"
									invoked.IndataTypeINVOICELINE				= "1"	
									invoked.IndataTypeINVOICELINEUSERELEMENT 	= LocalOneSourceTaxAttribute50.UserElement[Idx].Number		 
									invoked.NAME								= LocalOneSourceTaxAttribute50.UserElement[Idx].Name		 
									invoked.VALUE								= LocalOneSourceTaxAttribute50.UserElement[Idx].Value		 						
												
				BuildStopTimestamp = DerivedTimestamp time
				RequestStartTimestamp = DerivedTimestamp time								
				if (ProcessResponseUsingXpath			
				or  ProcessResponseUsingPartialXpath)	
					invoke CalculateTax2 OneSource		
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message						
						invoked.Request     = "1"
						MyXMLDocument       = result.Response	
						MyHTTPInfo			= result.MyHTTPInfo	
					invoke ParseXML TaxFacadeSerializer			
						invoked.Response = MyXMLDocument		
						MyXMLDocument = result.ParsedXML		
				else	
					invoke CalculateTax OneSource	
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message					
						invoked.Request     = "1"
						SabrixResponse      = result.Response
						MyHTTPInfo			= result.MyHTTPInfo			

				RequestStopTimestamp = DerivedTimestamp time
				
				initialize LocalCity
				initialize LocalState
				initialize LocalZip
				initialize LocalCityStateZip
				initialize LocalCountry 

				initialize HttpStatusCode											
				if (MyHTTPInfo.Failed)												
					WebServiceError = true											
					LocalTrigger = ParseWebserviceError								
				 											
				LocalExecuteReturnBlank = CaptureXml								
				if (WebServiceError													
				and TaxConfigurationRel.DisplayWebserviceErrorXml)					
					WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml	

				if (WebServiceError)
					LocalErrorCategory = "SABRX"
					LocalErrorNumber   = 700
					return blank
					
				SuccessStatus = false
				invoke Delete OutputUserAttributesRel				

				ResponseStartTimestamp = DerivedTimestamp time
				if (ProcessResponseUsingXpath
				or  ProcessResponseUsingPartialXpath)	
					if (MyXMLDocument not entered)					
						MyXMLDocument = MyHTTPInfo.ResponseBody		
					LocalTrigger = NewXpathSelect									
				else				
					for each(TaxCalculationResponse) SabrixResponse.TaxCalculationResponse set
						for each(OutdataType) each.OutdataType set
							for each(REQUESTSTATUS) each.OutdataTypeREQUESTSTATUS set
								SuccessStatus = each(REQUESTSTATUS).ISSUCCESS
								for each(ERROR) each.OutdataTypeREQUESTSTATUSERROR set  
									SabrixErrorCode		= each(ERROR).CODE				
									SabrixReturnMessage = each(ERROR).DESCRIPTION		
									SabrixErrorLocation	= each(ERROR).ERRORLOCATIONPATH 

					for each(TaxCalculationResponse) SabrixResponse.TaxCalculationResponse set
						for each(OutdataType) each.OutdataType set
							for each(Invoice) each.OutdataTypeINVOICE  set
								for each(REQUESTSTATUS) each.OutdataTypeINVOICEREQUESTSTATUS set
								for each(MESSAGE) each.OutdataTypeINVOICEMESSAGE set
									SabrixReturnMessage = each(MESSAGE).MESSAGETEXT
								LocalTrigger2 = ClearAttributeValues 
								initialize Attr		 
								OutputUserElementLoaded = blank
								LocalTrigger2 = ClearTaxTableOut	 
								for each(USERELEMENT) each.OutdataTypeINVOICEUSERELEMENT set
									OutputUserElementLoaded = "I"							
									Attr += 1	
									LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 							
									LocalReturnedUserElement.UserElement[Attr].Name 	 = each(USERELEMENT).NAME				
									LocalReturnedUserElement.UserElement[Attr].Value	 = each(USERELEMENT).VALUE				
								if (OutputUserElementLoaded.InvoiceLevel)
									LocalTrigger2 = LoadAttributes		
									OutputUserElementLoaded = blank
								for each(LINE) each.OutdataTypeINVOICELINE set
									EachLineItemSequence	= each(LINE).OutdataTypeINVOICELINE0	
									EachLineItemNumber		= each(LINE).LINENUMBER					
									EachLineTaxAmount		= each(LINE).TOTALTAXAMOUNT				
									OutputTotalTaxAmount	= each(LINE).TOTALTAXAMOUNT				
									for each(LINEMESSAGE) each.OutdataTypeINVOICELINEMESSAGE set
										if (each(LINEMESSAGE).SEVERITY = 2)
											SabrixErrorSeverity = each(LINEMESSAGE).SEVERITY
											SabrixReturnMessage = each(LINEMESSAGE).MESSAGETEXT
									initialize TaxingJurisdiction
									LocalTrigger2 = ClearTaxTableOut	 
									for each(TAX) each.OutdataTypeINVOICELINETAX set
										SabrixReturnedTaxCode = each(TAX).ERPTAXCODE
										ZoneLevel = each(TAX).ZONELEVEL	
										ZoneName = each(TAX).ZONENAME
										ReturnedImpositionType = each(TAX).AUTHORITYTYPE
										for each(TAXMESSAGE) each.OutdataTypeINVOICELINETAXMESSAGE set
											if (each(TAXMESSAGE).SEVERITY = 2)
												SabrixReturnMessage	= each(TAXMESSAGE).MESSAGETEXT	
												SabrixErrorSeverity = each(TAXMESSAGE).SEVERITY	 
												SabrixErrorLocation	= each(TAXMESSAGE).LOCATION				 
												SabrixErrorCategory	= each(TAXMESSAGE).CATEGORY				 
												SabrixErrorCode		= each(TAXMESSAGE).CODE													
										OutputTaxRate = each(TAX).TAXRATE
										ReturnedTotalRate = each(TAX).TAXRATE
										LocalCity 		= each(TAX).TAXABLECITY
										LocalState		= each(TAX).TAXABLEPROVINCE
										LocalZip		= each(TAX).TAXABLEPOSTCODE
										LocalCountry 	= each(TAX).TAXABLECOUNTRY
										TaxableCity 	= each(TAX).TAXABLECITY
										TaxableState	= each(TAX).TAXABLESTATE
										TaxableCounty	= each(TAX).TAXABLECOUNTY	
										TaxingJurisdiction = TaxableState + "/" + TaxableCounty + "/" + TaxableCity 							
										if (SabrixReturnedTaxCode entered)						
											OutputGeoCode			= SabrixReturnedTaxCode		
											LocalExecuteReturnBlank = CreateTaxCodeMaster		
										for each(CURRENCYCONVERSION) each.OutdataTypeINVOICELINETAXCURRENCYCONVERSION set
										for each(EXEMPTAMOUNT) each.OutdataTypeINVOICELINETAXEXEMPTAMOUNT set
										for each(GROSSAMOUNT) each.OutdataTypeINVOICELINETAXGROSSAMOUNT set
										for each(NONTAXABLEBASIS) each.OutdataTypeINVOICELINETAXNONTAXABLEBASIS set
										for each(TAXABLEBASIS) each.OutdataTypeINVOICELINETAXTAXABLEBASIS set							
										for each(TAXAMOUNT) each.OutdataTypeINVOICELINETAXTAXAMOUNT set
											ZoneLevelTaxAmount = each(TAXAMOUNT).DOCUMENTAMOUNT
										if (ReturnOneSourceTaxIn.Detail)	 
											LocalTrigger2 = LoadTaxTableZoneLevels	
																									
									LocalTrigger2 = ClearAttributeValues 
									initialize Attr						 
									OutputUserElementLoaded = blank
									for each(LINEUSERELEMENT) each.OutdataTypeINVOICELINEUSERELEMENT set
										OutputUserElementLoaded = "L"
										Attr += 1	
										LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 						
										LocalReturnedUserElement.UserElement[Attr].Name 	 = each(LINEUSERELEMENT).NAME		
										LocalReturnedUserElement.UserElement[Attr].Value	 = each(LINEUSERELEMENT).VALUE		
									if (OutputUserElementLoaded.LineLevel)			
										LocalTrigger2 = LoadAttributes				
										OutputUserElementLoaded = blank							
									for each(LINEQUANTITIES) each.OutdataTypeINVOICELINEQUANTITIES set
										for each(QUANTITY) each.OutdataTypeINVOICELINEQUANTITIESQUANTITY set
									for each(TAXSUMMARY) each.OutdataTypeINVOICELINETAXSUMMARY set
										OutputTaxRate = each(TAXSUMMARY).TAXRATE
										ReturnedTotalRate = each(TAXSUMMARY).TAXRATE	 	
	
									if (!ReturnOneSourceTaxIn.Detail)				
										LocalTrigger2 = LoadSummarizeTaxTableOut	
									OutputGeoCode = DerivedLineItemTaxCode
									LocalExecuteReturnBlank = 5400LoadAccountInfo 	
									if (UpdateLineItems								
									and Update1SourceTaxLineItemRel exist)			 			 
										invoke Update Update1SourceTaxLineItemRel
											invoked.CalculatedTaxAmt			= EachLineTaxAmount	  
											invoked.TaxRate						= OutputTaxRate
											invoked.TaxingJurisdiction  		= TaxingJurisdiction
											invoked.TaxResult					= SabrixReturnMessage	
											invoked.ThirdParty					= "S"	
											invoked.MoreResults					= LineLevelExclusions  
											invoked.Exempt						= ReturnedIsExempt
											invoked.CapturedXml					= DistLine	
											if (SabrixErrorSeverity.Severe)		
												invoked.LineitemError			= true
												invoked.ReturnedErrorNumber		= SabrixErrorCode
												invoked.ReturnedErrorMessage    = SabrixReturnMessage	
	
										invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel		
											invoked.PrmTaxTable					= TaxTable	

								OutputTotalTaxAmount = each(Invoice).TOTALTAXAMOUNT		 
								ReturnedTotalTax	 = each(Invoice).TOTALTAXAMOUNT		 
	
					
			ResponseStopTimestamp = DerivedTimestamp time		
					
			if (SuccessStatus)
				if (TaxCode entered)							
					OutputGeoCode = TaxCode
				else	
					OutputGeoCode = SabrixReturnedTaxCode		
				initialize TaxingJurisdiction		 
				TaxingJurisdiction = TaxableState + "/" + TaxableCounty + "/" + TaxableCity 
				if (OutputGeoCode entered)
					LocalExecuteReturnBlank = CreateTaxCodeMaster	 
				if (TaxCode entered)
					TaxTable.TaxTableOutput[1].TaxCode 			= TaxCode				
				else	
					TaxTable.TaxTableOutput[1].TaxCode 			= SabrixReturnedTaxCode	

				if (ReturnOneSourceTaxIn.Detail)									
					LocalContinue = true											
				else	
					TaxTable.TaxTableOutput[1].TaxRate				= OutputTaxRate
					TaxTable.TaxTableOutput[1].TaxPointDate 		= InvoiceDate					 
					TaxTable.TaxTableOutput[1].EffectiveDate		= InvoiceDate	 
					TaxTable.TaxTableOutput[1].InTaxAmount 			= TaxAmount
					TaxTable.TaxTableOutput[1].TaxAmount 			= OutputTotalTaxAmount				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 		= OutputTotalTaxAmount				 
					TaxTable.TaxTableOutput[1].TaxableAmount 		= TaxableAmount
					TaxTable.TaxTableOutput[1].Description			= SabrixReturnMessage 	
					TaxTable.TaxTableOutput[1].JurisdictionLevel 	= SummaryLabel 
					TaxTable.TaxTableOutput[1].Flag					= blank															

				LocalExecuteReturnBlank = 5400LoadAccountInfo	

				if (ReturnOneSourceTaxIn.Detail)				
					LocalContinue = true
				else	
					TaxTable.TaxTableOutput[1].TaxAmount 		= OutputTotalTaxAmount				 
					TaxTable.TaxTableOutput[1].TaxAmount5DP 	= OutputTotalTaxAmount	
				
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank
			else
				LocalTaxCodeInError = SabrixReturnedTaxCode
				LocalErrorCategory 	= "SABRX"
				if (LocalErrorNumber not entered)					
					LocalErrorNumber 	= 701
				return blank						
				
				LocalStopTimestamp = DerivedTimestamp	
				TotalElapsedTime = TimestampDiff	
						        								
			return blank	

		DerivedLineItemTaxCode is a DerivedField	
			type is like TaxCode
			restricted
			initialize TaxLineItemShipToTaxCode
			if (Update1SourceTaxLineItemRel exist)
				if (Update1SourceTaxLineItemRel.ShipToTaxCode entered)
					TaxLineItemShipToTaxCode = Update1SourceTaxLineItemRel.ShipToTaxCode
					return TaxLineItemShipToTaxCode
			if (TaxCode entered)
				return TaxCode
			if (SabrixReturnedTaxCode entered)
				return SabrixReturnedTaxCode 			
			return TaxCode


		EditTaxLineItemsIn is a DerivedField			
			type is Alpha 1
			restricted
			initialize LocalErrorNumber 
			initialize LocalTaxCode	
			LocalTaxCodeInError 	= blank 
			OutputTaxCodeInError	= blank					
			if (TaxLineItemShipToTaxCode entered)
				LocalTaxCode = TaxLineItemShipToTaxCode
				if (TaxEntity.UseTaxCodeAccounts				 
				and !CompanyTaxCodeDetailRel exist)	
					LocalErrorCategory 		= blank			 
					LocalErrorNumber 		= 912					 
					LocalTaxCodeInError 	= LocalTaxCode	 
					OutputTaxCodeInError	= LocalTaxCodeInError
	
			return blank
								
		UpdateTaxLineItemForSummarized is a DerivedField	
			type is Alpha 1
			restricted
			if (UpdateLineItems							 
			and Update1SourceTaxLineItemRel exist)		 			 
				invoke Update Update1SourceTaxLineItemRel
					invoked.CalculatedTaxAmt			= OutputTotalTaxAmount	  
					invoked.TaxRate						= OutputTaxRate
					invoked.TaxingJurisdiction  		= TaxingJurisdiction
					invoked.TaxResult					= SabrixReturnMessage	
					invoked.ThirdParty					= "S"	 
					invoked.MoreResults					= LineLevelExclusions  
					invoked.Exempt						= ReturnedIsExempt
					invoked.ReturnedErpTaxCode			= SabrixReturnedTaxCode	
					invoked.ReturnedExemptTaxable		= EachLineTaxExempt		
					invoked.ReturnedTaxableBasis		= EachLineTaxableBasis  
					invoked.CapturedXml					= DistLine				 
					if (SabrixErrorSeverity.Severe)		 
						invoked.LineitemError			= true
						invoked.ReturnedErrorNumber		= SabrixErrorCode
						invoked.ReturnedErrorMessage    = SabrixReturnMessage	 

				invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel		 
					invoked.PrmTaxTable					= TaxTable	
					
			return blank
														
		LoadSummarizeTaxTableOut is a DerivedField			
			type is Alpha 1
			restricted
			initialize TaxTable 
			TaxTable.TaxTableOutput[1].TaxCode 				= DerivedLineItemTaxCode
			TaxTable.TaxTableOutput[1].TaxRate				= OutputTaxRate
			TaxTable.TaxTableOutput[1].TaxPointDate 		= InvoiceDate					 
			TaxTable.TaxTableOutput[1].EffectiveDate		= InvoiceDate	 
			TaxTable.TaxTableOutput[1].InTaxAmount 			= TaxAmount
			TaxTable.TaxTableOutput[1].TaxAmount 			= OutputTotalTaxAmount				 
			TaxTable.TaxTableOutput[1].TaxAmount5DP 		= OutputTotalTaxAmount				 
			TaxTable.TaxTableOutput[1].TaxableAmount 		= TaxableAmount
			TaxTable.TaxTableOutput[1].Description			= SabrixReturnMessage 	
			TaxTable.TaxTableOutput[1].JurisdictionLevel 	= SummaryLabel 
			TaxTable.TaxTableOutput[1].Flag					= blank					
			return blank
			
		NewXpathSelect is a DerivedField	
			type is Alpha 1
			restricted
			display "ToDo:ManuallyBuildXml"
			initialize TaxingJurisdiction
			if (ProcessResponseUsingXpath
			or  ProcessResponseUsingPartialXpath)
				ResultsCount 				= MyXMLDocument select "count(
				SuccessStatus 				= MyXMLDocument select "
				IsSuccess					= MyXMLDocument select "
				IsPartialSuccess			= MyXMLDocument select "
				InvoiceIsSuccess		 	= MyXMLDocument select "
				InvoiceIsPartialSuccess		= MyXMLDocument select "
				NbrOfInvoiceLevelMessages	= MyXMLDocument select "
				OutputTotalTaxAmount		= MyXMLDocument select "
				ReturnedTotalTax	 		= OutputTotalTaxAmount	
				InvLevelUsrElements			= MyXMLDocument select "count(
				InvoiceLines				= MyXMLDocument select "count(
				LocalNbrInvLines			= MyXMLDocument select "count(
				if (InvLevelUsrElements > 0)
					Attr = 1							
					while (InvLevelUsrElements >= Attr)	
						OutputUserElementLoaded = "I"							
						LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 							
						LocalReturnedUserElement.UserElement[Attr].Name 	 = MyXMLDocument select "
						LocalReturnedUserElement.UserElement[Attr].Value	 = MyXMLDocument select "
						Attr += 1	
					if (OutputUserElementLoaded.InvoiceLevel)
						LocalTrigger2 = LoadAttributes																
						OutputUserElementLoaded = blank
				if (ProcessResponseUsingPartialXpath)							
					display "ToDo:Test-LoadInvoiceLinesUsingPartialXml"
					ResponseTrigger = LoadInvoiceLinesUsingPartialXml			
				else
					display "ToDo:Test-LoadInvoiceLinesFullyQualifiedXml"	
					ResponseTrigger = LoadInvoiceLinesFullyQualifiedXml			

			return blank

		LoadInvoiceLinesFullyQualifiedXml  is a DerivedField	
			type is Alpha 1
			restricted
			initialize DistLine
			LineIdx = 1
			while (LocalNbrInvLines >= LineIdx)	 
				DistLine					= MyXMLDocument select "
				EachLineId	 				= MyXMLDocument select "
				EachLineItemSequence		= MyXMLDocument select "
				EachLineItemNumber			= MyXMLDocument select "
				NbrOfInvoiceLineMessages	= MyXMLDocument select "
				InvoiceLineTotalTax			= MyXMLDocument select "
				EachLineTaxAmount 			= MyXMLDocument select "
				OutputTotalTaxAmount		= MyXMLDocument select "
				DistLineTaxSummary			= MyXMLDocument select "
				OutputTaxRate				= MyXMLDocument select "
				ReturnedTotalRate 			= OutputTaxRate
				LineTaxIdx = 1
				LocalTrigger2 = ClearTaxTableOut	 
				NbrOfInvoiceLineTaxes		= MyXMLDocument select "count(
				while (NbrOfInvoiceLineTaxes >= LineTaxIdx)	 				
					AdminZoneLevel			= MyXMLDocument select "
					AdminZoneLevelTaxRate	= MyXMLDocument select "
					ZoneLevel 				= MyXMLDocument select "
					ZoneName 				= MyXMLDocument select "
					ZoneLevelTaxAmount		= MyXMLDocument select "
					DistLineTaxableState	= MyXMLDocument select "
					DistLineTaxableCounty	= MyXMLDocument select "
					DistLineTaxableCity		= MyXMLDocument select "
					TaxingJurisdiction 		= DistLineTaxableState + "/" + DistLineTaxableCounty+ "/" + DistLineTaxableCity 
					if (ReturnOneSourceTaxIn.Detail)				
						LocalTrigger2 = LoadTaxTableZoneLevels	
												
					DistLineTaxMessages		= MyXMLDocument select "
					LineTaxMsgIdx = 1
					while (DistLineTaxMessages >= LineTaxMsgIdx)	 				
						DistLineTaxMessageText		= MyXMLDocument select "
						SabrixReturnMessage			= MyXMLDocument select "
						SabrixErrorSeverity 		= MyXMLDocument select "
						LineTaxMsgIdx = LineTaxMsgIdx + 1
					
					LineTaxIdx = LineTaxIdx + 1		
				
				if (DisplayOn)
					DisplayMonitor = DisplayMonitor + "[14950.0]LineNbr:" + LineNbr
					DisplayMonitor = DisplayMonitor + "[14950.a]EachLineId:" + EachLineId + "LineIdx:" + LineIdx + "<br>"
					DisplayMonitor = DisplayMonitor + "[14950.b]LocalNbrInvLines:" + LocalNbrInvLines + "InvoiceLineNumber:" + InvoiceLineNumber + "<br>"

				if (!ReturnOneSourceTaxIn.Detail)				
					LocalTrigger2 = ClearTaxTableOut	 		
					LocalTrigger2 = LoadSummarizeTaxTableOut	
				OutputGeoCode = DerivedLineItemTaxCode
				LocalExecuteReturnBlank = 5400LoadAccountInfo 	
				if (UpdateLineItems								
				and Update1SourceTaxLineItemRel exist)	
					if (DisplayOn)
						DisplayMonitor = DisplayMonitor +  "[433-UpdateTaxLineItem-EachLineId]" + EachLineId + "LineIdx:" + LineIdx + "<br>"
					invoke Update Update1SourceTaxLineItemRel
						invoked.CalculatedTaxAmt		= EachLineTaxAmount	 	 
						invoked.TaxRate					= OutputTaxRate
						invoked.TaxingJurisdiction  	= TaxingJurisdiction
						if (invoked.TaxableAmount not entered)
							invoked.TaxableAmount		= TaxableAmount	
						invoked.ThirdParty				= "S"	
						invoked.TransientTaxTable		= TaxTable	
						invoked.TaxResult				= SabrixReturnMessage	 
						invoked.ReturnedErrorMessage 	= SabrixReturnMessage	
						invoked.CapturedXml				= InputLineXml + "[" + LocalSpot + "]" + "== Response Output 16293 ==" + DistLine      

					invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel		
						invoked.PrmTaxTable				= TaxTable	
																				
				LineIdx = LineIdx + 1
			return blank


		LoadInvoiceLinesUsingPartialXml is a DerivedField	
			type is Alpha 1
			restricted
			LineIdx = 1
			while (LocalNbrInvLines >= LineIdx)	 
				LineNbr						= MyXMLDocument select "
				DistLine					= MyXMLDocument select "
				EachLineId	 				= DistLine select "/LINE/@ID"	
				EachLineItemSequence		= DistLine select "/LINE/@ID"						
				EachLineItemNumber			= DistLine select "/LINE/LINE_NUMBER"				
				InputLineXml				= RequestXML select "
				LocalSpot = "B" 
				EachLineUniqueID			= DistLine select "/LINE/LINE_NUMBER"				
				InvoiceLineId				= DistLine select "/LINE/@ID"	 
				InvoiceLineNumber			= DistLine select "/LINE/LINE_NUMBER"
				NbrOfInvoiceLineMessages	= DistLine select "/LINE/MESSAGE"
				InvoiceLineTotalTax			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"
				EachLineTaxAmount 			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"		
				OutputTotalTaxAmount		= DistLine select "/LINE/TOTAL_TAX_AMOUNT"
				DistLineTaxSummary			= DistLine select "/LINE/TAX_SUMMARY"
				OutputTaxRate				= DistLine select "/LINE/TAX_SUMMARY/TAX_RATE"
				ReturnedTotalRate			= DistLine select "/LINE/TAX_SUMMARY/EFFECTIVE_TAX_RATE"
				EachLineTaxExempt			= DistLine select "/LINE/TAX_SUMMARY/EXEMPT_AMOUNT"	
				EachLineTaxableBasis		= DistLine select "/LINE/TAX_SUMMARY/TAXABLE_BASIS"	
				NbrOfLineUserElements		= DistLine select "count(/LINE/USER_ELEMENT)" 			
				LocalTrigger2 = ClearTaxTableOut	 
				LineTaxIdx = 1
				NbrOfInvoiceLineTaxes		= DistLine select "count(/LINE/TAX)"		
				while (NbrOfInvoiceLineTaxes >= LineTaxIdx)	
					SabrixReturnedTaxCode 	= DistLine select "/LINE/TAX[<LineTaxIdx>]/ERP_TAX_CODE" 				
					AdminZoneLevel			= DistLine select "/LINE/TAX[<LineTaxIdx>]/ADMIN_ZONE_LEVEL" 
					AdminZoneLevelTaxRate	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_RATE"
					ZoneLevel 				= DistLine select "/LINE/TAX[<LineTaxIdx>]/ZONE_LEVEL"	
					ZoneName 				= DistLine select "/LINE/TAX[<LineTaxIdx>]/ZONE_NAME"
					ZoneLevelTaxAmount		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_AMOUNT/DOCUMENT_AMOUNT"
					DistLineTaxableState	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_STATE"
					DistLineTaxableCounty	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_COUNTY"
					DistLineTaxableCity		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_CITY"
					TaxingJurisdiction 		= DistLineTaxableState + "/" + DistLineTaxableCounty+ "/" + DistLineTaxableCity 
					LocalCity 				= DistLineTaxableCity
					LocalState				= DistLineTaxableState
					LocalZip				= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_POSTCODE"
					LocalCountry 			= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_COUNTRY"
					TaxableCity 			= DistLineTaxableCity
					TaxableState			= DistLineTaxableState
					TaxableCounty			= DistLineTaxableCounty	
					if (SabrixReturnedTaxCode entered)											
						OutputGeoCode		= SabrixReturnedTaxCode								
						LocalExecuteReturnBlank = CreateTaxCodeMaster							
				
					if (ReturnOneSourceTaxIn.Detail)					
						LocalTrigger2 = LoadTaxTableZoneLevels
											
					NbrOfInvoiceLineMessages	= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE"
					DistLineTaxMessages			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE"																									
					LineTaxMsgIdx = 1
					while (DistLineTaxMessages >= LineTaxMsgIdx)	 				
						DistLineTaxMessageText		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"						
						SabrixReturnMessage			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"
						SabrixErrorSeverity 		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/SEVERITY"
						LineTaxMsgIdx = LineTaxMsgIdx + 1

					if (NbrOfLineUserElements > 0)
						LocalTrigger2 = ClearAttributeValues 		
						Attr = 1						 			
						OutputUserElementLoaded = blank
						while (NbrOfLineUserElements >= Attr)			
							OutputUserElementLoaded = "L"
							LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 											
							LocalReturnedUserElement.UserElement[Attr].Name 	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/NAME"  	
							LocalReturnedUserElement.UserElement[Attr].Value	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/VALUE"	
							Attr += 1	
						if (OutputUserElementLoaded.LineLevel)			
							LocalTrigger2 = LoadAttributes				
							OutputUserElementLoaded = blank							
														
					LineTaxIdx = LineTaxIdx + 1		
				
				if (DisplayOn)
					DisplayMonitor = DisplayMonitor + "<pre>"
					DisplayMonitor = DisplayMonitor + "[14459.0]LineNbr:" + LineNbr + "EachLineTaxAmount:" + EachLineTaxAmount + "<br>"
					DisplayMonitor = DisplayMonitor + "[14460.a]EachLineId:" + EachLineId + "LineIdx:" + LineIdx + "<br>"
					DisplayMonitor = DisplayMonitor + "[14461.b]LocalNbrInvLines:" + LocalNbrInvLines + "InvoiceLineNumber:" + InvoiceLineNumber + "<br>"
				if (!ReturnOneSourceTaxIn.Detail)				
					LocalTrigger2 = ClearTaxTableOut	 		
					LocalTrigger2 = LoadSummarizeTaxTableOut	
				OutputGeoCode = DerivedLineItemTaxCode			
				LocalExecuteReturnBlank = 5400LoadAccountInfo 	
				if (UpdateLineItems     
				and Update1SourceTaxLineItemRel exist)	
					if (DisplayOn)
						DisplayMonitor = DisplayMonitor +  "[14465-UpdateTaxLineItem-EachLineId]" + EachLineId + "LineIdx:" + LineIdx + "<br>"
					invoke Update Update1SourceTaxLineItemRel
						invoked.CalculatedTaxAmt		= EachLineTaxAmount	 	 
						invoked.TaxRate					= OutputTaxRate
						invoked.TaxingJurisdiction  	= TaxingJurisdiction
						if (invoked.TaxableAmount not entered)
							invoked.TaxableAmount		= TaxableAmount	
						invoked.ThirdParty				= "S"		
						invoked.TaxResult				= SabrixReturnMessage	 
						invoked.ReturnedErrorMessage 	= SabrixReturnMessage	
						invoked.ReturnedErpTaxCode		= LocalLineTaxCode		
						invoked.ReturnedExemptTaxable	= EachLineTaxExempt		
						invoked.ReturnedTaxableBasis	= EachLineTaxableBasis  
						invoked.CapturedXml				= InputLineXml + "[" + LocalSpot + "]" + "== Response Output 16430 ==" + DistLine     
					invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel		
						invoked.PrmTaxTable				= TaxTable	
				LineIdx = LineIdx + 1
				
		ShipFromPostalCodeAlpha9 is a DerivedField
			type is Alpha 9
			restricted
			return (FromPostalAddress.PostalCode - "-")	
											
		ShipToPostalCodeAlpha9 is a DerivedField
			type is Alpha 9
			restricted
			return (PostalAddress.PostalCode - "-")	

		ShipToPostalCodeLast4 is a DerivedField
			type is Alpha 4
			restricted
			PostalCodeLast4 = ShipToPostalCodeAlpha9[6:9]
			return PostalCodeLast4

		Initialize1SourceReturnedMessages is a DerivedField   
			type is Alpha 1
			restricted
			initialize SabrixReturnMessage	 	
			initialize SabrixErrorSeverity  	 
			initialize SabrixErrorLocation	 				 
			initialize SabrixErrorCategory	 				 
			initialize SabrixErrorCode		 	
			return blank
											
		LoadDummyReturnValues is a DerivedField		
			type is Alpha 1
			LocalTrace = LocalTrace + "LoadDummyReturnValues,"
			if (BypassWebserviceCall
			and TestingMode)
				OutputTaxRate 								= .05000
				ReturnedTotalRate 							= .05000
				OutputTotalTaxAmount 						= 5.00
				ReturnedTotalTax	 						= 5.00
				TaxTable.TaxTableOutput[1].TaxCode 			= "00"
				TaxTable.TaxTableOutput[1].TaxRate			= .05000
				TaxTable.TaxTableOutput[1].TaxPointDate 	= current corporate date					 
				TaxTable.TaxTableOutput[1].EffectiveDate	= current corporate date	 
				TaxTable.TaxTableOutput[1].InTaxAmount 		= TaxAmount
				TaxTable.TaxTableOutput[1].TaxAmount 		= 5.00				 
				TaxTable.TaxTableOutput[1].TaxAmount5DP 	= 0				 
				TaxTable.TaxTableOutput[1].TaxableAmount 	= TaxableAmount
				TaxTable.TaxTableOutput[1].Description		= "SabrixTest" 	 
				TaxTable.TaxTableOutput[1].Flag				= blank															
		
				LocalExecuteReturnBlank = 5400LoadAccountInfo
				TaxTable.TaxTableOutput[1].TaxAmount 		= 5.00				 
				TaxTable.TaxTableOutput[1].TaxAmount5DP 	= 5.00	
				TaxingJurisdiction =  PostalAddress.StateProvince + "/" +  PostalAddress.County + "/" + PostalAddress.Municipality + "/" + "**Test"  
				PostalCodeLast4							= PostalAddress.PostalCode[7:10]	
									
				if (LocalErrorNumber entered)
					LocalTaxCodeInError = TaxCode
					return blank
					
			return blank	

		DisplayLineItemFlexibleFields is a DerivedField	 
			type is Text
			default label is untranslatable		
			initialize StringTableValues
			UserFieldLevel = "L"
			if (TaxEntity.ThirdParty.VertexOSeries)
				FlxLineIdx = 0
				StringTableValues = StringTableValues + BeginFlexibleFields				
				StringTableValues = StringTableValues + FlexibleCodesHeader						
				while (FlxLineIdx < 25)
					FlxLineIdx +=1   
					if (LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[FlxLineIdx].FieldId entered)				
						IdxAlpha = FlxLineIdx
						FlexNumericNbrOfDec = blank
						FieldIdAlpha = LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[FlxLineIdx].FieldId
						FlexValue = LineItemFlexibleFields.FlexibleCodes.FlexibleCodeField[FlxLineIdx].Code
						StringTableValues = StringTableValues + FlexibleFieldDetail
				
				FlxLineIdx = 0
				StringTableValues = StringTableValues + FlexibleDatesHeader	 				
				while (FlxLineIdx < 5)
					FlxLineIdx +=1   
					if (LineItemFlexibleFields.FlexibleDates.FlexibleDateField[FlxLineIdx].FieldId entered)				
						FlexNumericNbrOfDec = blank
						FieldIdAlpha = LineItemFlexibleFields.FlexibleDates.FlexibleDateField[FlxLineIdx].FieldId
						FlexValue = LineItemFlexibleFields.FlexibleDates.FlexibleDateField[FlxLineIdx].DateAlpha10MMDDCCYY		 
						StringTableValues = StringTableValues + FlexibleFieldDetail										

				FlxLineIdx = 0
				StringTableValues = StringTableValues + FlexibleNumericsHeader				
				while (FlxLineIdx < 10)
					FlxLineIdx +=1   
					if (LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[FlxLineIdx].FieldId entered)		
						FieldIdAlpha = LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[FlxLineIdx].FieldId
						FlexValue = LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[FlxLineIdx].DerivedDecimalValue	 
						FlexNumericNbrOfDec = LineItemFlexibleFields.FlexibleNumbers.FlexibleNumericField[FlxLineIdx].NumberOfDecimals
						StringTableValues = StringTableValues + FlexibleFieldDetail					
										
				StringTableValues = StringTableValues + EndFlexFieldsTable  
																				
			return StringTableValues							

		DisplayInvoiceLevelFlexibleFields is a DerivedField
			type is Text
			default label is untranslatable			
			initialize StringTableValues
			UserFieldLevel = "H"
			if (TaxEntity.ThirdParty.VertexOSeries)
				if (HeaderFlexbibleFields250Exist)
					display "ToDo:AddNewVersion250"
					Idx = 0
					StringTableValues = StringTableValues + BeginFlexibleFields				
					StringTableValues = StringTableValues + FlexibleCodesHeader						
					while (Idx < 25)
						Idx +=1   
						if (VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId entered)  	
							IdxAlpha = Idx
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId
							FlexValue = VertexAttributes.VertexCodes.FlexibleCode[Idx].Code
							StringTableValues = StringTableValues + FlexibleFieldDetail
					
					Idx = 0
					StringTableValues = StringTableValues + FlexibleDatesHeader	 				
					while (Idx < 5)
						Idx +=1   
						if (VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId entered)
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId
							FlexValue = VertexAttributes.VertexDates.FlexibleDate[Idx].DateAlpha10MMDDCCYY		
							StringTableValues = StringTableValues + FlexibleFieldDetail										
	
					Idx = 0
					StringTableValues = StringTableValues + FlexibleNumericsHeader				
					while (Idx < 10)
						Idx +=1   
						if (VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId entered)		
							FieldIdAlpha = VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId
							FlexValue = VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].DerivedDecimalValue	
							FlexNumericNbrOfDec = VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals
							StringTableValues = StringTableValues + FlexibleFieldDetail					
											
					StringTableValues = StringTableValues + EndFlexFieldsTable  					
				else	
				if (HeaderFlexbibleFieldsExist)			
					Idx = 0
					StringTableValues = StringTableValues + BeginFlexibleFields				
					StringTableValues = StringTableValues + FlexibleCodesHeader						
					while (Idx < 25)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId entered)	
							IdxAlpha = Idx
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId
							FlexValue = VertexFlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code
							StringTableValues = StringTableValues + FlexibleFieldDetail
					
					Idx = 0
					StringTableValues = StringTableValues + FlexibleDatesHeader	 				
					while (Idx < 5)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId entered)
							FlexNumericNbrOfDec = blank
							FieldIdAlpha = VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId
							FlexValue = VertexFlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateAlpha10MMDDCCYY		
							StringTableValues = StringTableValues + FlexibleFieldDetail										
	
					Idx = 0
					StringTableValues = StringTableValues + FlexibleNumericsHeader				
					while (Idx < 10)
						Idx +=1   
						if (VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId entered)					
							FieldIdAlpha = VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId
							FlexValue = VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].DerivedDecimalValue	
							FlexNumericNbrOfDec = VertexFlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals
							StringTableValues = StringTableValues + FlexibleFieldDetail					
											
					StringTableValues = StringTableValues + EndFlexFieldsTable  
																				
			return StringTableValues			

		DisplayVertexFlexibleFields is a DerivedField	 
			type is Text
			default label is untranslatable	
			initialize StringTableValues
			if (TaxEntity.ThirdParty.VertexOSeries)
				FlxLineIdx = 0
				StringTableValues = StringTableValues + BeginFlexibleFields				
				StringTableValues = StringTableValues + FlexibleCodesHeader						
				while (FlxLineIdx < 25)
					FlxLineIdx +=1   
					if (LocalVertexAttributes.VertexCodes.FlexibleCode[FlxLineIdx].FieldId entered)				
						IdxAlpha = FlxLineIdx
						FlexNumericNbrOfDec = blank
						FieldIdAlpha = LocalVertexAttributes.VertexCodes.FlexibleCode[FlxLineIdx].FieldId
						FlexValue = LocalVertexAttributes.VertexCodes.FlexibleCode[FlxLineIdx].Code
						StringTableValues = StringTableValues + FlexibleFieldDetail
				
				FlxLineIdx = 0
				StringTableValues = StringTableValues + FlexibleDatesHeader	 				
				while (FlxLineIdx < 5)
					FlxLineIdx +=1   
					if (LocalVertexAttributes.VertexDates.FlexibleDate[FlxLineIdx].FieldId entered)				
						FlexNumericNbrOfDec = blank
						FieldIdAlpha = LocalVertexAttributes.VertexDates.FlexibleDate[FlxLineIdx].FieldId
						FlexValue = LocalVertexAttributes.VertexDates.FlexibleDate[FlxLineIdx].DateAlpha10MMDDCCYY		 
						StringTableValues = StringTableValues + FlexibleFieldDetail										

				FlxLineIdx = 0
				StringTableValues = StringTableValues + FlexibleNumericsHeader				
				while (FlxLineIdx < 10)
					FlxLineIdx +=1   
					if (LocalVertexAttributes.VertexNumerics.FlexibleNumeric[FlxLineIdx].FieldId entered)		
						FieldIdAlpha = LocalVertexAttributes.VertexNumerics.FlexibleNumeric[FlxLineIdx].FieldId
						FlexValue = LocalVertexAttributes.VertexNumerics.FlexibleNumeric[FlxLineIdx].DerivedDecimalValue	 
						FlexNumericNbrOfDec = LocalVertexAttributes.VertexNumerics.FlexibleNumeric[FlxLineIdx].NumberOfDecimals
						StringTableValues = StringTableValues + FlexibleFieldDetail					
										
				StringTableValues = StringTableValues + EndFlexFieldsTable  
																				
			return StringTableValues							

						
		TableStyle2 is a StringField	  
			type is Text
			"	<style>                                    "
			"	table {                                    "
			"		font-family: courier, serif;           "
			"		border-collapse: collapse;             "
			"	}                                          "
			"	</style>                                   "
		BeginFlexibleFields is a StringField	 
			type is Text   
			TableStyle2											 
			"<table>"          		
			" <h1> "
			"  <tr>                                        "
			"	<th colspan=4>Vertex Flexible Fields " + UserFieldLevelLabel + "</th>"	 
			"  </tr>                                       "
			" </h1> "
		FlexibleCodesHeader is a StringField	 
			type is Text  
			" <h2> "
			"  <tr>                                        "
			"	<th>Codes</th>"	 
			"	<th>FieldId</th>"	 			
			"	<th>FieldValue</th>"	 						
			"	<th> </th>"	 			
			"  </tr>                                       "
			" </h2> "	
		FlexibleNumericsHeader is a StringField	 
			type is Text    		
			" <h2> "
			"  <tr>                                        "
			"	<th>Numerics</th>"				
			"	<th> </th>"	 
			"	<th> </th>"	 
			"	<th>Decimals</th>"	 						
			"  </tr>                                       "
			" </h2> "		
		FlexibleDatesHeader is a StringField	 
			type is Text      		
			" <h1> "
			"  <tr>                                        "
			"	<th>Dates</th>"	 
			"	<th> </th>"	 			
			"	<th> </th>"	 			
			"	<th> </th>"	 						
			"  </tr>                                       "
			" </h2> "						
		DetailHeader is a StringField	 
			type is Text   
			"  <tr>                                        	"		
			"	<td>       </td>                			"			
			"	<td>FieldId</td>                  			"
			"	<td>FieldValue</td>                			"
			"	<td>       </td>             			"			
			"  </tr>                                       	"
		FlexibleFieldDetail is a StringField	 
			type is Text  
			"  <tr>                            	"
			"	<td>" BlankSpace		  "</td> "				
			"	<td>" FieldIdAlpha		  "</td> "
			"	<td>" FlexValue			  "</td> "
			"	<td>" FlexNumericNbrOfDec "</td> "			
			"  </tr>    					    "
		EndFlexFieldsTable is a StringField	 
			type is Text 
			"</table>"

		UserFieldLevelLabel  is a DerivedField 					
			type is MessageField
			if (UserFieldLevel.Header)	
				return HeaderLabel
			return TaxLineLevelLabel	 

		TaxLineLevelLabel is a MessageField                    	
			"LineItemLevel"		

		HeaderLabel is a MessageField							
			"HeaderLevel" 		 

		ValueMissingText is a MessageField						
			"BlankValue"										
			
		EditUserElements is a DerivedField						
			type is Alpha 1
			restricted
			initialize UFldIdx 
			initialize NbrOfAttributesSkipped									
			while (UFldIdx < 50)	 	
				UFldIdx += 1
				if (LocalOneSourceTaxAttribute50.UserElement[UFldIdx].Name not entered)			 
					end while 								
				if (LocalOneSourceTaxAttribute50.UserElement[UFldIdx].Name entered)
					if (LocalOneSourceTaxAttribute50.UserElement[UFldIdx].Value not entered)
						if (AttributeMissingProcess.Halt)
							LocalUserElement = LocalOneSourceTaxAttribute50.UserElement[UFldIdx].Name
							LocalErrorCategory 	= "SABRX"										
							DisplayLineInError  = LocalLineItemNbr								
							LocalErrorNumber    = 707
							return blank
						if (AttributeMissingProcess.MissingMessage)
							LocalOneSourceTaxAttribute50.UserElement[UFldIdx].Value = AttributeMissingMessage		 	
						if (AttributeMissingProcess.SkipAttribute)
							NbrOfAttributesSkipped += 1					 				
			return blank			
			
		EditLineItemUserElements is a DerivedField						
			type is Alpha 1
			restricted
			initialize UFldIdx 
			initialize NbrOfLineAttributesSkipped									
			while (UFldIdx < 50)	 	
				UFldIdx += 1
				if (LocalLineTaxAttribute50.UserElement[UFldIdx].Name not entered)			 
					end while 								
				if (LocalLineTaxAttribute50.UserElement[UFldIdx].Name entered)
					if (LocalLineTaxAttribute50.UserElement[UFldIdx].Value not entered)
						if (AttributeMissingProcess.Halt)
							LocalUserElement = LocalLineTaxAttribute50.UserElement[UFldIdx].Name
							LocalErrorCategory 	= "SABRX"											
							LocalErrorNumber    = 707										
							DisplayLineInError  = LocalLineItemNbr	  								
							return blank
						if (AttributeMissingProcess.MissingMessage)
							LocalLineTaxAttribute50.UserElement[UFldIdx].Value = AttributeMissingMessage		 	
						if (AttributeMissingProcess.SkipAttribute)
							NbrOfLineAttributesSkipped += 1				 				
			return blank			

		GenericOneSource is a DerivedField 
	        type is XMLDocument 
	        restricted
			LocalOneSourceUserName  = TaxConfigurationRel.SabrixVersion.UserName	

			if  (TaxConfigurationRel.SabrixVersion.Password entered)							
				PasswordTypeUsed = 1
				LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.Password				
			else
				PasswordTypeUsed = 0
				LocalOneSourcePassword  = TaxConfigurationRel.SabrixVersion.EncryptedPassword	
							
			ExternalCompany			= DerivedExternalCompanyId		
			ExternalCompanyName		= DerivedExternalCompanyIdName	
	     	CallingSystem			= TaxEntity.CallingSystem		    	 
			HostSystem				= TaxEntity.HostSystem		 			 				 	

			if (CallingModule = "ProcessTaxHistory")
				GenericOneSource = template.OneSourceCreateHistoryLogin document for this instance		
			else																						
				GenericOneSource = template.OneSourceEstimateTaxLogin document for this instance		
			GenericOneSource select "
			GenericOneSource select "
				
		ProcessOneSourceGeneric is a DerivedField		             
			type is Alpha 1
			restricted
				
			RequestXML = GenericOneSource				 					
			invoke CalculateTaxGenericTemplate OneSourceGeneric
				resume on error						 
					WebServiceError = true
					WebServiceErrorMessage = error message						
				invoked.Request     = RequestXML
				MyXMLDocument     	= result.Response
				MyHTTPInfo			= result.MyHTTPInfo					

			RequestStopTimestamp = DerivedTimestamp time	

			CapturedXml = RequestXML + MyXMLDocument 	  
			
			if (WebServiceError
			or  MyHTTPInfo.Failed)
				RequestXML = MyHTTPInfo.RequestBody
				ResponseXML = MyHTTPInfo.ResponseBody
				LocalExecuteReturnBlank = ParseWebserviceError
				LocalTrigger = LoadTaxingJurisdictionIfInError				 
				DisplayMonitor = DisplayMonitor + "[2411.Failed]StatusCode.:" + MyHTTPInfo.StatusCode + "<br>"
				DisplayMonitor = DisplayMonitor + "[2411.Failed]FaultCode..:" + FaultCode + "<br>"
				DisplayMonitor = DisplayMonitor + "[2412.Failed]FaultString:" + FaultString + "<br>"
			else
				LocalTrigger = CheckIfOneSourceIsSuccessful
				if (LocalErrorNumber entered)
					return blank				
				HttpStatusCode = MyHTTPInfo.StatusCode
				if (RequestXML not entered)
					RequestXML = MyHTTPInfo.RequestBody												 
				ResponseXML =  MyHTTPInfo.ResponseBody  
				ResponseStartTimestamp = DerivedTimestamp time
				LocalExecuteReturnBlank = LoadResultsForGeneric
				ResponseStopTimestamp = DerivedTimestamp time	
			
			return blank

		LoadTaxingJurisdictionIfInError is a DerivedField	 			 
			type is Alpha 1
			if (LocalParsedState entered
			and LocalParsedCity entered 	 	
			and LocalParsedCounty entered)
				TaxingJurisdiction = LocalParsedState + "/" +  LocalParsedCounty + "/" + LocalParsedCity + "/" + ShipToCountry  
			else		  	
				TaxingJurisdiction = PostalAddress.StateProvince + "/" +  PostalAddress.County + "/" + PostalAddress.Municipality + "/" + PostalAddress.Country  
			return blank
		CheckIfOneSourceIsSuccessful is a DerivedField	 			 
			type is Alpha 1
			HttpStatusCode = MyHTTPInfo.StatusCode
			if (OneSourceVersionType.Generic)
				initialize SabrixErrorCode
				initialize HttpStatusCode
				IsSuccess				= MyXMLDocument select "
				if (IsSuccess)
					LocalContinue = true
				else
					LocalErrorCategory 	= "SABRX"
					LocalErrorNumber   	= 708
					HttpStatusCode 		= MyHTTPInfo.StatusCode
					SabrixErrorCode		= MyXMLDocument select "
					SabrixReturnMessage	= MyXMLDocument select "
					SabrixErrorLocation	= MyXMLDocument select "
			return blank
		DerivedCurrencyCode is a DerivedField	  
			type is like Currency						 	
			if (TransactionCurrency entered)
				return TransactionCurrency
				if (BaseCurrency entered)
					return BaseCurrency
			return "USD"

		DerivedCompanyRole is a DerivedField	  
			type is AlphaUpper 1	
			if (TaxEntity.CompanyRole.Seller)
				return "S"
			else
			if (TaxEntity.CompanyRole.Buyer)
				return "B"
				
			if (TaxEntity.CompanyRole not entered)	
				if (System = "AP"
				or  System = "PO"
				or  System = "MA"
				or  System = "RQ")			
					return "B"
					
			return "S"	
							
		DerivedInvoiceHeaderGenericXml is a DerivedField	 
			type is XMLDocument	
			initialize LocalTransactionXml 
			
			LocalTransactionXml = LocalTransactionXml + "<CALCULATION_DIRECTION>" + "F" + "</CALCULATION_DIRECTION>"
			if (CallingSystem entered)
				LocalTransactionXml = LocalTransactionXml + "<CALLING_SYSTEM_NUMBER>" + CallingSystem + "</CALLING_SYSTEM_NUMBER>"	
			ExternalCompanyName = DerivedExternalCompanyIdName 
			if (ExternalCompanyName entered)
				LocalTransactionXml = LocalTransactionXml + "<COMPANY_NAME>" + ExternalCompanyName + "</COMPANY_NAME>"	
			CompanyRole = DerivedCompanyRole	
			LocalTransactionXml = LocalTransactionXml + "<COMPANY_ROLE>" + CompanyRole + "</COMPANY_ROLE>"					
			LocalTransactionXml = LocalTransactionXml + "<CURRENCY_CODE>" + DerivedCurrencyCode + "</CURRENCY_CODE>"				
			if (ExternalCompany not entered)
				ExternalCompany = DerivedExternalCompanyId
			if (ExternalCompany entered)
				LocalTransactionXml = LocalTransactionXml + "<EXTERNAL_COMPANY_ID>" + ExternalCompany + "</EXTERNAL_COMPANY_ID>" 
			if (TaxEntity.FilterGroupName entered)						 
				LocalTransactionXml = LocalTransactionXml + "<FILTER_GROUP_NAME>" + TaxEntity.FilterGroupName + "</FILTER_GROUP_NAME>" 
			if (TaxEntity.FilterGroupOwner entered)							 
				LocalTransactionXml = LocalTransactionXml + "<FILTER_GROUP_OWNER>" + TaxEntity.FilterGroupOwner + "</FILTER_GROUP_OWNER>" 
			if (HostSystem entered)
				LocalTransactionXml = LocalTransactionXml + "<HOST_SYSTEM>" + HostSystem + "</HOST_SYSTEM>" 										 
			if (InvoiceDate entered)
				LocalConvertDate = InvoiceDate
				LocalTransactionXml = LocalTransactionXml + "<INVOICE_DATE>" + DateAlpha10 + "</INVOICE_DATE>" 		
			if (PostDate entered)
				LocalConvertDate = PostDate
				LocalTransactionXml = LocalTransactionXml + "<FISCAL_DATE>" + DateAlpha10 + "</FISCAL_DATE>" 
			if (DocumentType entered)	
				LocalTransactionXml = LocalTransactionXml + "<DOCUMENT_TYPE>" + DocumentType + "</DOCUMENT_TYPE>" 	
			if (Invoice entered)
				initialize TempInvoiceNumber
				TempInvoiceNumber = Invoice																						
				LocalTransactionXml = LocalTransactionXml + "<INVOICE_NUMBER>" + XmlEscapedInvoiceNumber + "</INVOICE_NUMBER>"	

			if (not TransactionType.Sale)
				LocalAmount = ChargedTaxAmount
				LocalTransactionXml = LocalTransactionXml + "<VENDOR_TAX>" + DerivedAmountNoComma + "</VENDOR_TAX>" 	

			LocalTransactionXml = LocalTransactionXml + "<IS_AUDITED>" + IsAudited + "</IS_AUDITED>" 	
			if (TaxEntity.ProductMappingGroupName entered)
				LocalTransactionXml = LocalTransactionXml + "<PRODUCT_MAPPING_GROUP_NAME>" + TaxEntity.ProductMappingGroupName + "</PRODUCT_MAPPING_GROUP_NAME>"	
			if (TaxEntity.ProductMappingGroupOwner entered)		  
				LocalTransactionXml = LocalTransactionXml + "<PRODUCT_MAPPING_GROUP_OWNER>" + TaxEntity.ProductMappingGroupOwner + "</PRODUCT_MAPPING_GROUP_OWNER>" 
			if (Customer entered)
				LocalTransactionXml = LocalTransactionXml + "<CUSTOMER_NUMBER>" + VendorCustomer + "</CUSTOMER_NUMBER>" 
				if (VendorCustomerName entered)	
					initialize TempVendorCustomerName
					TempVendorCustomerName = VendorCustomerName	
					LocalTransactionXml = LocalTransactionXml + "<CUSTOMER_NAME>" + XmlEscapedVendorCustomerName + "</CUSTOMER_NAME>" 
			else			
			if (Vendor entered)
				LocalTransactionXml = LocalTransactionXml + "<VENDOR_NUMBER>" + Vendor + "</VENDOR_NUMBER>" 
				if (VendorCustomerName entered)			
					initialize TempVendorCustomerName
					TempVendorCustomerName = VendorCustomerName	
					LocalTransactionXml = LocalTransactionXml + "<VENDOR_NAME>" + XmlEscapedVendorCustomerName + "</VENDOR_NAME>" 	
													 
		 	if (UniqueIdOfRelatedObject entered)
				LocalTransactionXml = LocalTransactionXml + "<UNIQUE_INVOICE_NUMBER>" + UniqueIdOfRelatedObject + "</UNIQUE_INVOICE_NUMBER>"	 
			if (EndUser entered)	
				LocalTransactionXml = LocalTransactionXml + "<END_USER_NAME>" + EndUser + "</END_USER_NAME>" 	

			if (PointOfTitleTransfer entered)																									
				LocalTransactionXml = LocalTransactionXml + "<POINT_OF_TITLE_TRANSFER>"	+ PointOfTitleTransferValue + "</POINT_OF_TITLE_TRANSFER>"	
												
			LocalTransactionXml = LocalTransactionXml + "<TRANSACTION_TYPE>" + "GS" + "</TRANSACTION_TYPE>" 									 
			
			if ((UserElementLevel.Invoice				 
			or  LocalOneSourceTaxAttribute50.UserElement[1].Number entered)
			and not UserElementLevel.LineOnly)
				initialize Idx	 
				while (Idx < 50)	
					Idx +=1
					if (LocalOneSourceTaxAttribute50.UserElement[Idx].Number not entered)
						end while
					else						
					if (LocalOneSourceTaxAttribute50.UserElement[Idx].Value entered)	
						LocalTransactionXml = LocalTransactionXml + "<USER_ELEMENT>"
						LocalTransactionXml = LocalTransactionXml + "<NAME>" + LocalOneSourceTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
						LocalTransactionXml = LocalTransactionXml + "<VALUE>" + LocalOneSourceTaxAttribute50.UserElement[Idx].Value + "</VALUE>"												
						LocalTransactionXml = LocalTransactionXml + "</USER_ELEMENT>" 					

			if  (CallingModule = "ProcessTaxHistory"
			and  System = "AP"
			and  TaxEntity.ThirdParty.Sabrix)
				if  (OneSourceTaxAttribute50.UserElement[1].Number entered)	
					LocalOneSourceTaxAttribute50 = OneSourceTaxAttribute50	
				else 
					initialize LocalOneSourceTaxAttribute50


			return LocalTransactionXml	
			
		Load1SourceSingleLineItem is a DerivedField	 
			type is XMLDocument	
			initialize LocalBuildSingleLineXml  		
				 	
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<LINE"

			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + " ID=" + DoubleQuote + "1"  + DoubleQuote + ">"		
			
			LocalAmount = TaxableAmount
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<GROSS_AMOUNT>" + DerivedAmountNoComma + "</GROSS_AMOUNT>" 				 	
	
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<LINE_NUMBER>" + LineNumber + "</LINE_NUMBER>" 		 
			
			if (UniqueLineNumber entered)
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<UNIQUE_LINE_NUMBER>" + UniqueLineNumber  + "</UNIQUE_LINE_NUMBER>"


			if (TaxAmount entered
			and CallingModule not = "ProcessTaxHistory"
			and ChargedTaxAmount not entered)
				ChargedTaxAmount = TaxAmount				
			if (ChargedTaxAmount entered)
				LocalAmount =  ChargedTaxAmount
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<VENDOR_TAX>" + DerivedAmountNoComma + "</VENDOR_TAX>" 
			
			LocalProductTaxCategory = DerivedProductCode	
			if (LocalProductTaxCategory entered)
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<PRODUCT_CODE>" +  LocalProductTaxCategory + "</PRODUCT_CODE>" 
				  
			if (InvoicedOrCreditMemo.Credit)				 
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<IS_CREDIT>" + "true" + "</IS_CREDIT>" 
							
			if (CommodityCode entered)		
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<COMMODITY_CODE>" +  CommodityCode + "</COMMODITY_CODE>"
								
			if (DeliveryTerms entered)
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "<DELIVERY_TERMS>" + DeliveryTerms + "</DELIVERY_TERMS>"

			if (ItemNumber entered)	
				initialize TempLineItemId										
				TempLineItemId = ItemNumber									    
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<PART_NUMBER>" + XmlEscapedLineItemID + "</PART_NUMBER>" 
				
			if (Description entered)
				initialize TempDescription										       
				TempDescription = Description							               
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<DESCRIPTION>" + XmlEscapedDescription + "</DESCRIPTION>"					

			if ((UserElementLevel.Line
			or  UserElementLevel.LineOnly)
			and LocalOneSourceTaxAttribute50.UserElement[1].Number entered)
				initialize Idx	 
				while (Idx < 50)
					Idx +=1
					if (LocalOneSourceTaxAttribute50.UserElement[Idx].Value entered)     
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<USER_ELEMENT>"
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<NAME>" + LocalOneSourceTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<VALUE>" + LocalOneSourceTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
						LocalBuildSingleLineXml = LocalBuildSingleLineXml + "</USER_ELEMENT>" 				
			else
			if (TaxLineItemsRel exist)
				FirstLineItemNumberSeq = first TaxLineItemsRel.TaxLineItem.Sequence
				for each FirstTaxLineItemRel
					LocalTrigger = each.Load1SourceUserAttributesFrDerived		
					LocalLineTaxAttribute50 = each.TransientUserElement50		
					LocalLineItemNbr			= each.LineItemNumber				
					LocalTrigger = EditLineItemUserElements
					if (LocalLineTaxAttribute50.UserElement[1].Number entered)
						initialize Idx	 
						while (Idx < 50)
							Idx +=1
							if (LocalLineTaxAttribute50.UserElement[Idx].Number not entered)
								end while
							else	
							if (LocalLineTaxAttribute50.UserElement[Idx].Value entered)		
								LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<USER_ELEMENT>"
								LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<NAME>" + LocalLineTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
								LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<VALUE>" + LocalLineTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
								LocalBuildSingleLineXml = LocalBuildSingleLineXml + "</USER_ELEMENT>" 									
						
			if (PostalAddress entered)	 
				LocalPostalAddress = PostalAddress
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + LoadShipToAddress
			
			if (FromPostalAddress entered)
				LocalPostalAddress = FromPostalAddress
				LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + LoadShipFromAddress
			
			if (QuantityAmount entered
			and UnitOfMeasure entered)	
				LocalAmount = QuantityAmount
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<QUANTITIES>"										
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<QUANTITY>"										
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<AMOUNT>" + DerivedAmountNoComma + "</AMOUNT>" 
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "<UOM>" + UnitOfMeasure + "</UOM>" 					 						
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "</QUANTITY>"										
				LocalBuildSingleLineXml = LocalBuildSingleLineXml + "</QUANTITIES>" 									
						
			LocalBuildSingleLineXml  = LocalBuildSingleLineXml  + "</LINE>"	
			
			return LocalBuildSingleLineXml 
		Load1SourceMulipleLineItems is a DerivedField	 
			type is XMLDocument	
			CountTaxLineItemsExcluded = 0
			TotalLineItemsProcessed = 0
			initialize LocalBuildMultilLineXml 		
			for each TaxLineItemsRel
				increment CountTaxLineItems
				if (each.ExcludeFromTaxEstimate)			 
					increment CountTaxLineItemsExcluded
				else								
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<LINE"
					if (each.LineItemNumber entered)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + " ID=" + DoubleQuote + each.TaxLineItem.Sequence  + DoubleQuote + ">"					

					LocalAmount = each.TaxableAmount
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<GROSS_AMOUNT>" + DerivedAmountNoComma + "</GROSS_AMOUNT>" 				 	
			
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<LINE_NUMBER>" + each.LineItemNumber + "</LINE_NUMBER>" 	
						
					if (UniqueLineNumber entered)	
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<UNIQUE_LINE_NUMBER>" + UniqueLineNumber + "</UNIQUE_LINE_NUMBER>"
					else
					if (each.RelatedLineItemUniqueId entered)	
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<UNIQUE_LINE_NUMBER>" + each.RelatedLineItemUniqueId + "</UNIQUE_LINE_NUMBER>"
				
					
					if (each.ChargedTax entered)		 
						LocalAmount = each.ChargedTax
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<VENDOR_TAX>" + DerivedAmountNoComma + "</VENDOR_TAX>" 

					if  (each.ProductTaxCategory entered
					and  TaxEntity.PassToProduceCode.ProductTaxCategory)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<PRODUCT_CODE>" + each.ProductTaxCategory + "</PRODUCT_CODE>" 
					else 
					if  (each.CommodityCode entered
					and !TaxEntity.PassToProduceCode.ProductTaxCategory)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<PRODUCT_CODE>" + each.CommodityCode + "</PRODUCT_CODE>" 
						  
					if (InvoicedOrCreditMemo.Credit)				 
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<IS_CREDIT>" + "true" + "</IS_CREDIT>" 
									
					if (each.CommodityCode entered)		
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<COMMODITY_CODE>" + each.CommodityCode + "</COMMODITY_CODE>"
										
					if (DeliveryTerms entered)
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<DELIVERY_TERMS>" + DeliveryTerms + "</DELIVERY_TERMS>"
						
					if (each.LineItemId entered)
						initialize TempLineItemId												
						TempLineItemId = each.LineItemId										
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<PART_NUMBER>" + XmlEscapedLineItemID + "</PART_NUMBER>" 

					if (each.Description entered)	
						initialize TempDescription										        
						TempDescription = each.Description							            
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<DESCRIPTION>" + XmlEscapedDescription + "</DESCRIPTION>"																													
					else																											
					if (Description entered)
						initialize TempDescription										       
						TempDescription = Description							               
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<DESCRIPTION>" + XmlEscapedDescription + "</DESCRIPTION>"							
						
					LocalTrigger = each.Load1SourceUserAttributesFrDerived			 
					LocalLineTaxAttribute50 = each.TransientUserElement50
					LocalLineItemNbr			= each.LineItemNumber								
					LocalTrigger = EditLineItemUserElements					
					if (LocalLineTaxAttribute50.UserElement[1].Number entered)			
						initialize Idx
						while (Idx < 50)	
							Idx +=1
							if (LocalLineTaxAttribute50.UserElement[Idx].Value entered)     
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<USER_ELEMENT>"
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<NAME>" + LocalLineTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<VALUE>" + LocalLineTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
								LocalBuildMultilLineXml = LocalBuildMultilLineXml + "</USER_ELEMENT>" 			
					if (each.ShipToAddress entered)
						LocalPostalAddress = each.ShipToAddress
					else	
						LocalPostalAddress = PostalAddress			
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + LoadShipToAddress
					
					if (each.ShipFromAddress entered)
						LocalPostalAddress = each.ShipFromAddress
					else	
						LocalPostalAddress = FromPostalAddress 									
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + LoadShipFromAddress
					
					if (each.Quantity entered
					and each.VolumeUnitOfMeasure entered)	
						LocalAmount = each.Quantity
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<QUANTITIES>"										
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<QUANTITY>"							
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<AMOUNT>" + DerivedAmountNoComma + "</AMOUNT>" 
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "<UOM>" + each.VolumeUnitOfMeasure + "</UOM>" 				 						
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "</QUANTITY>"										
						LocalBuildMultilLineXml = LocalBuildMultilLineXml + "</QUANTITIES>" 	
											
					LocalBuildMultilLineXml = LocalBuildMultilLineXml + "</LINE>"	
					
			return LocalBuildMultilLineXml
			
			
		LoadShipToAddress is a DerivedField	 
			type is XMLDocument	
			restricted
			initialize LocalDestAddressXml
			OutputTaxCodeDescription = TaxCode.Description		
			LocalTrigger 			 = ParseTaxCodeDescription
			if (TaxCode not entered   
			or 	NbrOfRightSlashes = 0)
				ShipToCountry 		= LocalPostalAddress.Country
				LocalParsedState  	= LocalPostalAddress.StateProvince	
				LocalParsedCity 	= LocalPostalAddress.Municipality	
				LocalParsedCounty	= LocalPostalAddress.County 	
			if (ShipToCountry not entered)
				ShipToCountry 		= LocalPostalAddress.Country 
												
			if (LocalPostalAddress.Country entered)
				CountryIsCanada = CheckIfCountryIsCanada  
				LocalDestAddressXml = "<SHIP_TO>"
				LocalDestAddressXml = LocalDestAddressXml + "<COUNTRY>" + ShipToCountry + "</COUNTRY>"	
				if (LocalPostalAddress.Municipality entered)
					LocalDestAddressXml = LocalDestAddressXml + "<CITY>" + LocalParsedCity + "</CITY>"						
				if (LocalPostalAddress.StateProvince entered)
					LocalDestAddressXml = LocalDestAddressXml + "<STATE>" + LocalParsedState + "</STATE>"	
				if (LocalPostalAddress.County entered)
					LocalDestAddressXml = LocalDestAddressXml + "<COUNTY>" + LocalPostalAddress.County + "</COUNTY>"							
				if (LocalPostalAddress.PostalCode entered)
					if (CountryIsCanada) 
						LocalDestAddressXml = LocalDestAddressXml + "<POSTCODE>" + LocalPostalAddress.PostalCode + "</POSTCODE>"	
					else
						LocalDestAddressXml = LocalDestAddressXml + "<POSTCODE>" + LocalPostalAddress.PostalCode[1:5] + "</POSTCODE>"	
						initialize PostalCodeLast4																		
						PostalCodeLast4 = LocalPostalAddress.PostalCode[6:10] - "-"										
						if (PostalCodeLast4 entered)																	
							LocalDestAddressXml = LocalDestAddressXml + "<GEOCODE>" + PostalCodeLast4 + "</GEOCODE>"	

				LocalDestAddressXml = LocalDestAddressXml + "</SHIP_TO>" 
				
			return LocalDestAddressXml  


		LoadShipFromAddress is a DerivedField	
			type is XMLDocument
			restricted	
			initialize LocalFromAddressXml 
			if (LocalPostalAddress.Country entered)
				CountryIsCanada = CheckIfCountryIsCanada  
				LocalFromAddressXml = "<SHIP_FROM>"			
				LocalFromAddressXml = LocalFromAddressXml + "<COUNTRY>" + LocalPostalAddress.Country + "</COUNTRY>"	
				if (LocalPostalAddress.Municipality entered)
					LocalFromAddressXml = LocalFromAddressXml + "<CITY>" + LocalPostalAddress.Municipality + "</CITY>"						
				if (LocalPostalAddress.StateProvince entered)
					LocalFromAddressXml = LocalFromAddressXml + "<STATE>" + LocalPostalAddress.StateProvince + "</STATE>"	
				if (LocalPostalAddress.County entered)
					LocalFromAddressXml = LocalFromAddressXml + "<COUNTY>" + LocalPostalAddress.County + "</COUNTY>"							
				if (LocalPostalAddress.PostalCode entered)
					if (CountryIsCanada) 
						LocalFromAddressXml = LocalFromAddressXml + "<POSTCODE>" + LocalPostalAddress.PostalCode + "</POSTCODE>"	    
					else				
						LocalFromAddressXml = LocalFromAddressXml + "<POSTCODE>" + LocalPostalAddress.PostalCode[1:5] + "</POSTCODE>"	
						initialize PostalCodeLast4																		
						PostalCodeLast4 = LocalPostalAddress.PostalCode[6:10] - "-"										
						if (PostalCodeLast4 entered)																	
							LocalFromAddressXml = LocalFromAddressXml + "<GEOCODE>" + PostalCodeLast4 + "</GEOCODE>"	

				LocalFromAddressXml = LocalFromAddressXml + "</SHIP_FROM>" 
				
			return LocalFromAddressXml  

		LoadLineUserElements is a DerivedField
			type is XMLDocument	
			restricted
			initialize LocalXmlString
			initialize LocalLineTaxAttribute50
			if  (!SendMultLineItems			
			and (UserElementLevel.Line
			or   UserElementLevel.LineOnly)
			and  SabrixUserElement.UserElement[1].Number entered)
				LocalLineTaxAttribute50 = SabrixUserElement
				if (LocalLineTaxAttribute50.UserElement[1].Number entered)				
					initialize Idx
					while (Idx < 25)
						Idx +=1
						if (LocalLineTaxAttribute50.UserElement[Idx].Value entered)     
							LocalXmlString = LocalXmlString + "<USER_ELEMENT>"
							LocalXmlString = LocalXmlString + "<NAME>" + LocalLineTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
							LocalXmlString = LocalXmlString + "<VALUE>" + LocalLineTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
							LocalXmlString = LocalXmlString + "</USER_ELEMENT>" 
			else
			if (TaxLineItemsRel exist)
				FirstLineItemNumberSeq = first TaxLineItemsRel.TaxLineItem.Sequence	 
				for each FirstTaxLineItemRel
					LocalTrigger = each.Load1SourceUserAttributesFrDerived		
					LocalLineTaxAttribute50 = each.TransientUserElement50
					LocalLineItemNbr			= each.LineItemNumber								
					LocalTrigger = EditLineItemUserElements
					if (LocalLineTaxAttribute50.UserElement[1].Number entered)
						initialize Idx	 
						while (Idx < 50)
							Idx +=1
							if (LocalLineTaxAttribute50.UserElement[Idx].Number not entered)
								end while
							else	
							if (LocalLineTaxAttribute50.UserElement[Idx].Value entered)			
								LocalXmlString = LocalXmlString + "<USER_ELEMENT>"
								LocalXmlString = LocalXmlString + "<NAME>" + LocalLineTaxAttribute50.UserElement[Idx].Name + "</NAME>"	
								LocalXmlString = LocalXmlString + "<VALUE>" + LocalLineTaxAttribute50.UserElement[Idx].Value + "</VALUE>"						
								LocalXmlString = LocalXmlString + "</USER_ELEMENT>" 									
			return LocalXmlString	

			
		DerivedOneSourceRequest is a DerivedField	  
			type is XMLDocument	
			restricted
			initialize LocalXml
		
			LocalXml = LocalXml + "<INVOICE>"

			LocalXml = LocalXml + DerivedInvoiceHeaderGenericXml		 						 
			
			if (SendMultLineItems													 
			and TaxLineItemsRel exist)
				LocalXml = LocalXml + Load1SourceMulipleLineItems
			else
				LocalXml = LocalXml + Load1SourceSingleLineItem	 		 
					 			
			LocalXml = LocalXml + "</INVOICE>"
			return LocalXml	
			
		LoadResultsForGeneric is a DerivedField	
			type is Alpha 1
			restricted
			initialize TaxingJurisdiction
			if (OneSourceVersionType.Generic)
				ResultsCount 				= MyXMLDocument select "count(
				SuccessStatus 				= MyXMLDocument select "
				IsSuccess					= MyXMLDocument select "
				IsPartialSuccess			= MyXMLDocument select "
				InvoiceIsSuccess		 	= MyXMLDocument select "
				InvoiceIsPartialSuccess		= MyXMLDocument select "
				NbrOfInvoiceLevelMessages	= MyXMLDocument select "
				OutputTotalTaxAmount		= MyXMLDocument select "
				ReturnedTotalTax	 		= OutputTotalTaxAmount	 
				InvoiceLines				= MyXMLDocument select "count(
				LocalNbrInvLines			= MyXMLDocument select "count(
				
				InvLevelUsrElements			= MyXMLDocument select "count(
				if (InvLevelUsrElements > 0)
					Attr = 1							
					while (InvLevelUsrElements >= Attr)	 
						OutputUserElementLoaded = "I"							
						LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 							 
						LocalReturnedUserElement.UserElement[Attr].Name 	 = MyXMLDocument select "
						LocalReturnedUserElement.UserElement[Attr].Value	 = MyXMLDocument select "
						Attr += 1	
					if (OutputUserElementLoaded.InvoiceLevel)
						LocalTrigger2 = LoadAttributes																 
						OutputUserElementLoaded = blank
				LineIdx = 1
				while (LocalNbrInvLines >= LineIdx)	 
					LineNbr						= MyXMLDocument select "
					DistLine					= MyXMLDocument select "
					EachLineId	 				= DistLine select "/LINE/@ID"	 
					EachLineItemSequence		= DistLine select "/LINE/@ID"						 
					EachLineItemNumber			= DistLine select "/LINE/LINE_NUMBER"				 
					EachLineUniqueID			= DistLine select "/LINE/LINE_NUMBER"				 
					InvoiceLineId				= DistLine select "/LINE/@ID"	 
					InvoiceLineNumber			= DistLine select "/LINE/LINE_NUMBER"
					LocalSpot = "A"
					InputLineXml				= RequestXML select "
					NbrOfInvoiceLineMessages	= DistLine select "/LINE/MESSAGE"
					InvoiceLineTotalTax			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"
					EachLineTaxAmount 			= DistLine select "/LINE/TOTAL_TAX_AMOUNT"		
					OutputTotalTaxAmount		= DistLine select "/LINE/TOTAL_TAX_AMOUNT"
					DistLineTaxSummary			= DistLine select "/LINE/TAX_SUMMARY"
					OutputTaxRate				= DistLine select "/LINE/TAX_SUMMARY/TAX_RATE"
					ReturnedTotalRate			= DistLine select "/LINE/TAX_SUMMARY/EFFECTIVE_TAX_RATE"
					EachLineTaxExempt			= DistLine select "/LINE/TAX_SUMMARY/EXEMPT_AMOUNT"	
					EachLineTaxableBasis		= DistLine select "/LINE/TAX_SUMMARY/TAXABLE_BASIS"	
															
					NbrOfLineUserElements		= DistLine select "count(/LINE/USER_ELEMENT)" 			 
					LocalTrigger2 = ClearTaxTableOut

					LineTaxIdx = 1
					NbrOfInvoiceLineTaxes		= DistLine select "count(/LINE/TAX)"		
					while (NbrOfInvoiceLineTaxes >= LineTaxIdx)	
						SabrixReturnedTaxCode 	= DistLine select "/LINE/TAX[<LineTaxIdx>]/ERP_TAX_CODE" 
						LocalLineTaxCode	 	= DistLine select "/LINE/TAX[<LineTaxIdx>]/ERP_TAX_CODE" 		
						AdminZoneLevel			= DistLine select "/LINE/TAX[<LineTaxIdx>]/ADMIN_ZONE_LEVEL" 
						AdminZoneLevelTaxRate	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_RATE"
						ZoneLevel 				= DistLine select "/LINE/TAX[<LineTaxIdx>]/ZONE_LEVEL"	
						ZoneName 				= DistLine select "/LINE/TAX[<LineTaxIdx>]/ZONE_NAME"
						ZoneLevelTaxAmount		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAX_AMOUNT/DOCUMENT_AMOUNT"
						DistLineTaxableState	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_STATE"
						DistLineTaxableCounty	= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_COUNTY"
						DistLineTaxableCity		= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_CITY"
						TaxingJurisdiction 		= DistLineTaxableState + "/" + DistLineTaxableCounty+ "/" + DistLineTaxableCity 
						LocalCity 				= DistLineTaxableCity
						LocalState				= DistLineTaxableState
						LocalZip				= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_POSTCODE"
						LocalCountry 			= DistLine select "/LINE/TAX[<LineTaxIdx>]/TAXABLE_COUNTRY"
						TaxableCity 			= DistLineTaxableCity
						TaxableState			= DistLineTaxableState
						TaxableCounty			= DistLineTaxableCounty	
						if (LocalLineTaxCode entered)												
							OutputGeoCode		= LocalLineTaxCode									
							LocalTrigger1 = CreateTaxCodeMaster							

						if (ReturnOneSourceTaxIn.Detail)				 
							LocalTrigger2 = LoadTaxTableZoneLevels
			
						NbrOfInvoiceLineMessages	= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE"
						DistLineTaxMessages			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE"																									
						LineTaxMsgIdx = 1
						while (DistLineTaxMessages >= LineTaxMsgIdx)	 				
							DistLineTaxMessageText		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"						
							SabrixReturnMessage			= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/MESSAGE_TEXT"
							SabrixErrorSeverity 		= DistLine select "/LINE/TAX[<LineTaxIdx>]/MESSAGE[<LineTaxMsgIdx>]/SEVERITY"
							LineTaxMsgIdx = LineTaxMsgIdx + 1
	
						if (NbrOfLineUserElements > 0)
							LocalTrigger2 = ClearAttributeValues 		 
							Attr = 1						 			 
							OutputUserElementLoaded = blank
							while (NbrOfLineUserElements >= Attr)			 					
								OutputUserElementLoaded = "L"
								LocalReturnedUserElement.UserElement[Attr].Number 	 = Attr		 											 
								LocalReturnedUserElement.UserElement[Attr].Name 	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/NAME"  	 
								LocalReturnedUserElement.UserElement[Attr].Value	 = DistLine select "/LINE/USER_ELEMENT[<Attr>]/VALUE"	 						
								Attr += 1	
							if (OutputUserElementLoaded.LineLevel)			 
								LocalTrigger2 = LoadAttributes				 
								OutputUserElementLoaded = blank							
															
						LineTaxIdx = LineTaxIdx + 1		
					

					if (!ReturnOneSourceTaxIn.Detail)				 
						LocalTrigger2 = ClearTaxTableOut	 		 
						LocalTrigger2 = LoadSummarizeTaxTableOut	  
					OutputGeoCode = DerivedLineItemTaxCode			 
					LocalExecuteReturnBlank = 5400LoadAccountInfo 	  
					if (UpdateLineItems      
					and Update1SourceTaxLineItemRel exist)
						if (DisplayOn)
							DisplayMonitor = DisplayMonitor +  "[14465-UpdateTaxLineItem-EachLineId]" + EachLineId + "LineIdx:" + LineIdx + "<br>"
						invoke Update Update1SourceTaxLineItemRel
							invoked.CalculatedTaxAmt		= EachLineTaxAmount	 	 
							invoked.TaxRate					= OutputTaxRate
							invoked.TaxingJurisdiction  	= TaxingJurisdiction
							if (invoked.TaxableAmount not entered)
								invoked.TaxableAmount		= TaxableAmount	
							invoked.ThirdParty				= "S"		
							invoked.TaxResult				= SabrixReturnMessage	 
							invoked.ReturnedErrorMessage 	= SabrixReturnMessage	
							invoked.ReturnedErpTaxCode		= LocalLineTaxCode		
							invoked.ReturnedExemptTaxable	= EachLineTaxExempt		
							invoked.ReturnedTaxableBasis	= EachLineTaxableBasis  
							invoked.CapturedXml				= InputLineXml + "[" + LocalSpot + "]" + "== Response Output 17557 ==" + DistLine      
						invoke CreateLineItemTaxTable Update1SourceTaxLineItemRel		 
							invoked.PrmTaxTable				= TaxTable	
					LineIdx = LineIdx + 1
					
			return blank			

		Nonce is a NativeField			
			type is Alpha size 50
			restricted
						
		Timestamp is a NativeField		
			type is Alpha size 50
			restricted
						
		ValidateOneSourceGeneric is a DerivedField		 	 
			type is Alpha 1
			restricted
			LocalErrorCategory   = "SABRX"
			OneSourceVersionType = "G"  
			if (SabrixVersionValidationRel not exist)
				LocalErrorNumber = 710
				return blank
			if (OneSourceUsernameAndPasswordRel not exist)				
				LocalErrorNumber = 711
				return blank		
								
			LocalOneSourceUserName = TaxConfigurationRel.SabrixVersion.UserName				 

			if (TaxConfigurationRel.SabrixVersion.Password entered)
				PasswordTypeUsed = 1
				LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.Password		
			else
				PasswordTypeUsed = 0
				LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.EncryptedPassword
						 
			RequestXML = OneSourceValidationDocument				 
					
			invoke CalculateTaxGenericTemplate OneSourceGeneric
				resume on error						 
					WebServiceError = true
					WebServiceErrorMessage = error message						
				invoked.Request     = RequestXML
				MyXMLDocument     	= result.Response
				MyHTTPInfo			= result.MyHTTPInfo					

			LocalExecuteReturnBlank = CaptureXml								 
			if (WebServiceError													 
			and TaxConfigurationRel.DisplayWebserviceErrorXml)					 
				WebServiceErrorMessage = WebServiceErrorMessage + CapturedXml	 
					
			CapturedXml = RequestXML + MyXMLDocument
			if (MyHTTPInfo.Failed
			or  WebServiceError)
				LocalExecuteReturnBlank = ParseWebserviceError
				LocalErrorNumber = 709  
			else
				LocalTrigger    = CheckIfOneSourceIsSuccessful
				IsSuccess 		= MyXMLDocument select "
				OutputTaxRate 	= MyXMLDocument select "
						
			return blank

		LoadDefaultValidationAddress is a DerivedField
			type is Alpha 1
			restricted
			if (ReturnedValidationAddress.Country not entered)
				ReturnedValidationAddress.DeliveryAddress.AddressLine1 	= "380 Saint Peter St."  
				ReturnedValidationAddress.Country 						= "US" 			
				ReturnedValidationAddress.Municipality 					= "Saint Paul"	
				ReturnedValidationAddress.StateProvince					= "MN" 			
				ReturnedValidationAddress.County						= "Ramsey" 		
				ReturnedValidationAddress.PostalCode					= "55102" 		
			return blank
						
		OneSourceValidationDocument is a DerivedField 
	        type is XMLDocument 
	        restricted
			LocalOneSourceUserName = TaxConfigurationRel.SabrixVersion.UserName		

			if (TaxConfigurationRel.SabrixVersion.Password entered)																		
				PasswordTypeUsed = 1
				LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.Password		
			else	
				PasswordTypeUsed = 0
				LocalOneSourcePassword = TaxConfigurationRel.SabrixVersion.EncryptedPassword
			 			
											
			OneSourceValidationDocument = template.OneSourceUserToken document for this instance										
			OneSourceValidationDocument select "
			OneSourceValidationDocument select "

		ValidateGenericConnectionXml is a DerivedField
			type is XMLDocument	
			restricted	 
			initialize LocalXmlString

			LocalXmlString = LocalXmlString + "<INVOICE>"
			
			LocalXmlString = LocalXmlString + "<CALCULATION_DIRECTION>" 	+ "F" 					+ "</CALCULATION_DIRECTION>"
			if (CallingSystem entered)
				LocalXmlString = LocalXmlString + "<CALLING_SYSTEM_NUMBER>" + CallingSystem 		+ "</CALLING_SYSTEM_NUMBER>"
			if (ExternalCompanyName entered)		
				LocalXmlString = LocalXmlString + "<COMPANY_NAME>" 			+ ExternalCompanyName 	+ "</COMPANY_NAME>"								 
			LocalXmlString = LocalXmlString + "<COMPANY_ROLE>" 				+ "S" 					+ "</COMPANY_ROLE>"					 
			if (FilterGroupOwner entered)							 
				LocalXmlString = LocalXmlString + "<FILTER_GROUP_OWNER>" 	+ FilterGroupOwner + "</FILTER_GROUP_OWNER>" 
			if (FilterGroupName entered)						 
				LocalXmlString = LocalXmlString + "<FILTER_GROUP_NAME>" 	+ FilterGroupName + "</FILTER_GROUP_NAME>" 				
			LocalXmlString = LocalXmlString + "<CURRENCY_CODE>" 			+ "USD" 				+ "</CURRENCY_CODE>"
			if (ExternalCompany not entered)
				ExternalCompany = DerivedExternalCompanyId
			if (ExternalCompany entered)				
				LocalXmlString = LocalXmlString + "<EXTERNAL_COMPANY_ID>" 	+ ExternalCompany 		+ "</EXTERNAL_COMPANY_ID>"
			if (HostSystem entered)	 					 
				LocalXmlString = LocalXmlString + "<HOST_SYSTEM>" 			+ HostSystem 			+ "</HOST_SYSTEM>" 	
													 
			LocalConvertDate = current corporate date
			LocalXmlString = LocalXmlString + "<INVOICE_DATE>" 				+ DateAlpha10 			+ "</INVOICE_DATE>" 		
			LocalXmlString = LocalXmlString + "<INVOICE_NUMBER>" 			+ "ValidateConnection" 	+ "</INVOICE_NUMBER>" 								 
			LocalXmlString = LocalXmlString + "<IS_AUDITED>" 				+ false 				+ "</IS_AUDITED>" 	
			if (ProductMappingGroupOwner entered)		  
				LocalXmlString = LocalXmlString + "<PRODUCT_MAPPING_GROUP_OWNER>" + ProductMappingGroupOwner + "</PRODUCT_MAPPING_GROUP_OWNER>" 
			if (ProductMappingGroupName entered)
				LocalXmlString = LocalXmlString + "<PRODUCT_MAPPING_GROUP_NAME>" + ProductMappingGroupName + "</PRODUCT_MAPPING_GROUP_NAME>"	
			LocalXmlString = LocalXmlString + "<CUSTOMER_NUMBER>"	 		+ "Customer" 			+ "</CUSTOMER_NUMBER>" 	
			LocalXmlString = LocalXmlString + "<CUSTOMER_NAME>" 			+ "CustomerName" 		+ "</CUSTOMER_NAME>" 								
			LocalXmlString = LocalXmlString + "<TRANSACTION_TYPE>" 			+ "GS" 					+ "</TRANSACTION_TYPE>" 									 

			LocalXmlString = LocalXmlString + "<LINE"
			LocalXmlString = LocalXmlString + " ID=" + DoubleQuote 			+ "1"  					+ DoubleQuote + ">"		
			LocalXmlString = LocalXmlString + "<GROSS_AMOUNT>" 				+ "100" 				+ "</GROSS_AMOUNT>" 				 	
			LocalXmlString = LocalXmlString + "<LINE_NUMBER>" 				+ "1" 					+ "</LINE_NUMBER>" 		
			LocalXmlString = LocalXmlString + "<UNIQUE_LINE_NUMBER>" 		+ "1" 	 				+ "</UNIQUE_LINE_NUMBER>"
			LocalXmlString = LocalXmlString +  "</LINE>"
									
			LocalXmlString = LocalXmlString + "<SHIP_TO>"
			
			if (ValidationPostalAddress.Country not entered
			and SabrixVersionValidationRel.ValidationPostalAddress.Country entered)
				ValidationPostalAddress = SabrixVersionValidationRel.ValidationPostalAddress
			if (ValidationPostalAddress.Country entered)
				ReturnedValidationAddress = ValidationPostalAddress
				LocalXmlString = LocalXmlString + "<COUNTRY>" + ValidationPostalAddress.Country + "</COUNTRY>"	
				if (ValidationPostalAddress.Municipality entered)
					LocalXmlString = LocalXmlString + "<CITY>" + ValidationPostalAddress.Municipality + "</CITY>"						
				if (ValidationPostalAddress.StateProvince entered)
					LocalXmlString = LocalXmlString + "<STATE>" + ValidationPostalAddress.StateProvince + "</STATE>"	
				if (ValidationPostalAddress.County entered)
					LocalXmlString = LocalXmlString + "<COUNTY>" + ValidationPostalAddress.County + "</COUNTY>"							
				if (ValidationPostalAddress.PostalCode entered)
					LocalXmlString = LocalXmlString + "<POSTCODE>" + ValidationPostalAddress.PostalCode + "</POSTCODE>"					
			else				
				LocalXmlString = LocalXmlString + "<COUNTRY>" 		 + "US" 					+ "</COUNTRY>"	
				LocalXmlString = LocalXmlString + "<CITY>" 			 + "Saint Paul"				+ "</CITY>"						
				LocalXmlString = LocalXmlString + "<STATE>" 		 + "MN" 					+ "</STATE>"	
				LocalXmlString = LocalXmlString + "<COUNTY>" 		 + "Ramsey" 				+ "</COUNTY>"							
				LocalXmlString = LocalXmlString + "<POSTCODE>" 		 + "55102" 					+ "</POSTCODE>"					
				Trigger = LoadDefaultValidationAddress
				
			LocalXmlString = LocalXmlString + "</SHIP_TO>" 
				
			LocalXmlString = LocalXmlString + "</INVOICE>"

			return LocalXmlString


