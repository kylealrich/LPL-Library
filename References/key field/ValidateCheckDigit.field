ValidateCheckDigit is a Field

	Representation
		Group Fields
	        ValidationType          	is AlphaUpper size 1
	            States
	                Mod10       		value is "T"
	                Mod11       		value is "E"
	                FiAccount			value is "A"
	                FiReference			value is "R"
	                FiOrgNumber			value is "O"

			NumberToValidate			is Alpha size 30
		
	
	Transient Fields
		OutputErrorNumber		is Numeric size 3
		OutputErrorMessage		is Alpha size 100
		
	Local Fields	 
		LocalCounter 			is Numeric size 2
		LocalNumberAlpha 		is Alpha size 30
		LocalTwentyDigitAlpha   is Alpha size 20
		LocalTempFiAlpha     	is Alpha size 20
		LocalTempPostFix		is Alpha size 30
		LocalNumberAlphaSize 	is Numeric size 2
		LocalCheckDigit			is Numeric size 2
		LocalTwoDigitAlpha 		is Alpha size 2
		LocalTotal 				is Numeric size 2
		LocalTotal3				is Numeric size 3	
		LocalConvertedAlphaNum	is Numeric size 1	
		LocalNumberDigit 		is Numeric size 1
		LocalWeight       		is Numeric size 2
		
		LocalI3					is Numeric size 2
		LocalI4					is Numeric size 2
		LocalI5					is Numeric size 2
		LocalI6					is Numeric size 2
		LocalI7					is Numeric size 2

	Derived Fields	 

		Msg101 is a MessageField
			"InvalidCheckDigitForReferenceType"		

		Msg102 is a MessageField
			"ValueMustBeBetween4And20Digits"

		IsNumberValid is a DerivedField
			type is Boolean
			initialize LocalCounter
			initialize LocalNumberAlpha
			initialize LocalNumberAlphaSize
			initialize LocalCheckDigit
			initialize LocalTwoDigitAlpha
			initialize LocalTwentyDigitAlpha
			initialize LocalTempFiAlpha
			initialize LocalTotal
			initialize LocalNumberDigit
			initialize LocalWeight
			initialize LocalTotal3				
			initialize LocalConvertedAlphaNum	
			initialize LocalI3
			initialize LocalI4
			initialize LocalI5
			initialize LocalI6
			initialize LocalI7
			
			display "*******************StartValidation***********************"
			display "ValidationType<ValidationType>"
			display "PassedNumber<NumberToValidate>"

			while (LocalCounter < NumberToValidate size)
				LocalCounter += 1
				if (NumberToValidate[LocalCounter] is numeric)
					LocalNumberAlpha += NumberToValidate[LocalCounter]

			LocalNumberAlphaSize = LocalNumberAlpha size

			if (ValidationType.Mod10)
			
				if (LocalNumberAlphaSize > 0)
				
					LocalCheckDigit = LocalNumberAlpha[LocalNumberAlphaSize]
					LocalCounter 	= LocalNumberAlphaSize - 1
					
					while (LocalCounter > 0)
						LocalNumberDigit   = LocalNumberAlpha[LocalCounter]
						LocalTwoDigitAlpha = LocalNumberDigit * 2
						if (LocalTwoDigitAlpha size = 2)
							LocalNumberDigit = LocalTwoDigitAlpha[2]
							LocalTotal 		+= LocalNumberDigit
							
						LocalNumberDigit = LocalTwoDigitAlpha[1]
						LocalTotal 		+= LocalNumberDigit
						if (LocalCounter > 1)
							LocalCounter -= 1
							LocalNumberDigit = LocalNumberAlpha[LocalCounter]
							LocalTotal 		+= LocalNumberDigit
						LocalCounter -= 1
					
					LocalTwoDigitAlpha = LocalTotal
					LocalNumberDigit = LocalTwoDigitAlpha[LocalTwoDigitAlpha size]
					
					if (LocalNumberDigit = 0)
						if (LocalCheckDigit = 0)
							return true
					else
					if (LocalCheckDigit = 10 - LocalNumberDigit)
						return true

			else
			if (ValidationType.Mod11)

				display "NumberToValidate<NumberToValidate>"
				if (NumberToValidate size > 1  
				and NumberToValidate[NumberToValidate size] = "-")
					LocalCheckDigit = 10

				display "ExtractedNumber<LocalNumberAlpha>"
				if (LocalNumberAlphaSize > 0)
					if (LocalCheckDigit = 10)
						LocalCounter = LocalNumberAlphaSize
					else
						LocalCheckDigit = LocalNumberAlpha[LocalNumberAlphaSize]
						LocalCounter 	= LocalNumberAlphaSize - 1
					LocalWeight 	= 2
					
					while (LocalCounter > 0)
						LocalNumberDigit   	= LocalNumberAlpha[LocalCounter]
						LocalTotal 		   += LocalNumberDigit * LocalWeight
						LocalTotal			= LocalTotal % 11
						if (LocalWeight = 7)
							LocalWeight = 2
						else
							LocalWeight += 1
						LocalCounter -= 1
					
					display "CheckDigit<LocalCheckDigit>"						
					display "Sum<LocalTotal>"

					LocalTotal += LocalCheckDigit
					if (LocalTotal % 11 = 0)
						return true		
			else
			if (ValidationType.FiAccount)
				if (LocalNumberAlphaSize >= 8) 
					display "******FinlandAccountType*******"	
					display "NumToValidate<LocalNumberAlpha>"	
					if (LocalNumberAlpha[1] = "4"
					or  LocalNumberAlpha[1] = "5")
						LocalI6 = 7
						LocalI7 = 8
					else
						LocalI6 = 6
						LocalI7 = 7
					
					LocalI3 = LocalNumberAlphaSize - LocalI6
					LocalI4 = 15 - LocalI3
					LocalI5 = 14 - LocalNumberAlphaSize
					LocalTwentyDigitAlpha = LocalNumberAlpha
					display "TwentyDigitNumber<LocalTwentyDigitAlpha>"	


					LocalCounter = 1
					while (LocalCounter < LocalI4)
						LocalTempFiAlpha += LocalTwentyDigitAlpha[LocalCounter]
						LocalCounter     += 1

					LocalCounter = 0
					while (LocalCounter < LocalI3)
						LocalTempFiAlpha += LocalNumberAlpha[LocalI7 + LocalCounter]
						LocalCounter 	 += 1
					
					if (LocalTwentyDigitAlpha size > LocalTempFiAlpha size)
						LocalCounter = LocalTempFiAlpha size
						while (LocalCounter < LocalTwentyDigitAlpha size)
							LocalCounter 	 += 1
							LocalTempFiAlpha += LocalTwentyDigitAlpha[LocalCounter]

					LocalTwentyDigitAlpha = LocalTempFiAlpha 
					display "ModifiedTwentyDigitNumber<LocalTwentyDigitAlpha>"

					
					initialize LocalTempFiAlpha
					LocalCounter = 1
					while (LocalCounter < LocalI7)
						LocalTempFiAlpha += LocalTwentyDigitAlpha[LocalCounter]
						LocalCounter     += 1

					LocalCounter = 0
					while (LocalCounter < LocalI5)
						LocalTempFiAlpha += "0"
						LocalCounter 	 += 1
					
					if (LocalTwentyDigitAlpha size > LocalTempFiAlpha size)
						LocalCounter = LocalTempFiAlpha size
						while (LocalCounter < LocalTwentyDigitAlpha size)
							LocalCounter 	 += 1
							LocalTempFiAlpha += LocalTwentyDigitAlpha[LocalCounter]

					LocalTwentyDigitAlpha = LocalTempFiAlpha 

					display "LeftPaddedTwentyDigitNumber<LocalTwentyDigitAlpha>"
					
					LocalNumberAlpha	 =  LocalTwentyDigitAlpha 	 
					LocalNumberAlphaSize = 	LocalNumberAlpha size
					
					LocalCounter = 1
					LocalTotal   = 0
					
					while (LocalCounter <= 14)
						LocalNumberDigit   = LocalNumberAlpha[LocalCounter]
						LocalTwoDigitAlpha = LocalNumberDigit * 2
						if (LocalTwoDigitAlpha size = 2)
							LocalNumberDigit = LocalTwoDigitAlpha[2]
							LocalTotal 		+= LocalNumberDigit
						LocalNumberDigit = LocalTwoDigitAlpha[1]
						LocalTotal 		+= LocalNumberDigit
						if (LocalCounter < 13)
							LocalNumberDigit   	 = LocalNumberAlpha[LocalCounter + 1]
							LocalTotal   		+= LocalNumberDigit
						LocalCounter += 2											
					 									
					LocalTwoDigitAlpha = LocalTotal
					LocalNumberDigit = LocalTwoDigitAlpha[LocalTwoDigitAlpha size]
					
					if (LocalNumberDigit = 0)
						if (LocalCheckDigit = 0)
							return true
					else
					if (LocalCheckDigit = 10 - LocalNumberDigit)
						return true
			else
			if (ValidationType.FiReference)

					




					
					
					
					
					
				if (LocalNumberAlphaSize < 4
				or  LocalNumberAlphaSize > 20)
					OutputErrorNumber 	= 102
					OutputErrorMessage	= Msg102	
					return false
				
				LocalCheckDigit = LocalNumberAlpha[LocalNumberAlphaSize]	
					

				initialize LocalConvertedAlphaNum
				initialize LocalTotal3
				LocalWeight	= 7									
				LocalCounter	= (LocalNumberAlphaSize - 1)	
				while (LocalCounter > 0)
					LocalConvertedAlphaNum = LocalNumberAlpha[LocalCounter]	
					LocalTotal3	+= (LocalConvertedAlphaNum * LocalWeight)	
					if (LocalTotal3 >= 100)	
						LocalTotal3 -= 100		
					if (LocalWeight = 7)		
						LocalWeight = 3
					else
					if (LocalWeight = 3)
						LocalWeight = 1
					else
					if (LocalWeight = 1)
						LocalWeight = 7
					decrement LocalCounter

				LocalTotal	= LocalTotal3		
					
				LocalTwoDigitAlpha = LocalTotal		
				LocalNumberDigit = LocalTwoDigitAlpha[LocalTwoDigitAlpha size]
				
				if (LocalNumberDigit = 0)
					if (LocalCheckDigit = 0)
						return true
				else
				if (LocalCheckDigit = 10 - LocalNumberDigit)
					return true
			else
			if (ValidationType.FiOrgNumber)
				if (LocalNumberAlphaSize = 8)
					return true				

			OutputErrorNumber 	= 101
			OutputErrorMessage	= Msg101
			return false

