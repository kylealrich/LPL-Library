CalculateTerms is a Field

	Representation
        Group Fields
			TransactionDate 			is Date
			TransactionAmount 			is an InternalAmount		
				precision is OutputNumberOfDecimals
					round to precision
			AllowedAmount				is an InternalAmount		
				precision is OutputNumberOfDecimals
					round to precision
			OverrideDiscountAmount		is an InternalAmount		
				precision is OutputNumberOfDecimals
					round to precision
			OverrideDueDate				is Date
			OverrideDiscountRate		is an InternationalCost
			OverrideDiscountDate		is Date
			
	Local Fields
		LocalInvoiceDay					is Numeric size 2
		LocalInvoiceMonth				is Numeric size 2		
		LocalEndDay						is Numeric size 2
		LocalBeginDay					is Numeric size 2
		LocalAddMonth					is Numeric size 2
		LocalAddYear					is Numeric 2
		LocalAddNextYear				is Numeric 2
		AddYear							is Boolean
		LocalDiscountDay				is Numeric size 2
		LocalProxDays					is Numeric size 2
		LocalDiscountDate				is Date
		LocalDiscountMonth				is Numeric size 2
		LocalDiscountYear				is Year
		LocalMonthOfDiscount			is AlphaUpper size 2
		LocalDueDay						is Numeric size 2
		LocalDueDaySet					is Numeric size 2
		LocalDueMonth					is Numeric size 2
		LocalDueDate					is Date		
		LocalMonthsForward				is Numeric size 2
		LocalWeekDay					is Numeric 1
		LocalDaysDifference				is Numeric 1
		LocalFixedMonth					is Numeric 1
		LocalInvoiceCutOffAdd			is Numeric 1
		LocalTotalPayments				is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		LocalRemainder					is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		IsLeapYear						is Boolean 
		LocalMonthOfDiscountNumber		is Numeric size 2
		LocalMonthlyDiscountAmount		is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		LocalTotalDiscountAmount		is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		LocalDiscountRemainder			is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		LocalCalDiscountAmount			is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		LocalNetMonth					is Numeric size 2
		RemainingPayments				is Numeric size 2
		RemainingTransactionAmount		is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		I1								is Numeric 3
		I2								is Numeric 3
		I3								is Numeric 3
		I4								is Numeric 3
		I5								is Numeric 3
		I6								is Numeric 3
		Z1								is Numeric 3
		Z2								is Numeric 3
		DateToUse						is Date
		AddAMonth						is Numeric size 2
		LocalOutput						is Numeric size 2
		LoopCounter						is Numeric size 2
		LocalCurrentDate				is Date
		LocalTransactionWeekDay			is Numeric 1
		
		LocalCurrentEOMDay				is Numeric size 2
		LocalEOMDay						is Numeric size 2
		LocalEOMMonth					is Numeric size 2
		LocalEOMDate					is Date
		LocalInvoiceAmount				is an InternalAmount		
			precision is OutputNumberOfDecimals
				round to precision
		
	Transient Fields
		CalculateTermsTable 			is a CalculateTermsArray
		Anticipation					is Alpha size 1
		ProcIndicator					is Alpha size 1
		OutputErrorNumber				is Numeric size 3
		OutputErrorMessage				is Alpha size 100
	
	Context Fields
		FinanceEnterpriseGroup
		TermsCode
		FromCurrency
		GeneralLedgerCompany


	Derived Fields	 
		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (FromCurrency entered)
				return FromCurrency.Currency.NumberOfDecimals
			else
				if (GeneralLedgerCompany entered)
					return GeneralLedgerCompany.Currency.NumberOfDecimals
				else
					if (TermsCode.FinanceEnterpriseGroup entered)
						return TermsCode.FinanceEnterpriseGroup.DefaultNumberOfDecimals
					else
						return 3
					
		DerivedRoundTo is a DerivedField		
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		RoundedTransactionAmount is a DerivedField		
    		type is like InternalAmount		
    		restricted
    		if (LocalInvoiceAmount entered)
	    		RoundedTransactionAmount = LocalInvoiceAmount
	    		round RoundedTransactionAmount to nearest DerivedRoundTo
	    		return RoundedTransactionAmount

		OutputDays						is a DerivedField
			type is Numeric size 3
			initialize LocalCurrentDate
			initialize LocalTransactionWeekDay

			if (TermsCode.FixedDayOfWeek.FixedDaysWk[1] entered)
				
				LocalCurrentDate  				= current date
				LocalTransactionWeekDay			= CalculateTerms.TransactionDate week day
				
				if ((LocalCurrentDate - TransactionDate) > 6)
					LocalTransactionWeekDay 	= LocalCurrentDate week day
					
				initialize LoopCounter
				initialize LocalOutput
				
				if (LocalTransactionWeekDay != TermsCode.FixedDayOfWeek.FixedDaysWk[1])
					while (LocalOutput != TermsCode.FixedDayOfWeek.FixedDaysWk[1])
						LoopCounter 			+= 1
						
						LocalOutput 			= LocalTransactionWeekDay + LoopCounter
						
						if (LocalOutput > 7)
							
							LocalOutput			= 7 - LocalOutput
							
							if (LocalOutput < 0)
							
								LocalOutput 	= LocalOutput * -1
						
				return LoopCounter

		TermsCalTrigger					is a DerivedField
			type is Alpha size 1
			initialize OutputErrorNumber
			initialize OutputErrorMessage
			
			
			if (!TermsCode.Active)
				OutputErrorNumber = "101"
				OutputErrorMessage = Msg101	
			
			if (TransactionAmount entered
			or  TransactionDate entered)
				initialize LocalAddMonth
				initialize LocalInvoiceDay
				initialize LocalDiscountDay
				initialize LocalDiscountDate
				initialize LocalMonthsForward
				initialize LocalDueDate
				initialize LocalDueDay
				initialize LocalDaysDifference
				initialize LocalInvoiceAmount
				
				if (AllowedAmount not entered)
					AllowedAmount = TransactionAmount
				
				if (TermsCode.IsNetTerms)
					CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
					LocalCalDiscountAmount	= AllowedAmount * CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent		
					CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = LocalCalDiscountAmount	
					
					if (CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = 0
					and CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount	= 0)
						initialize CalculateTermsTable.CalculateTermsOutput[1].DiscountDate	
					else
						CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DaysToCalcDiscount + TransactionDate			
						
					if (TermsCode.FirstNetDays entered)
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = TermsCode.FirstNetDays + TransactionDate
					
					if (TermsCode.FixedDayOfWeek.FixedDaysWk[1] entered)
						LocalCurrentDate 				= current date
						
						if ((LocalCurrentDate - TransactionDate) > 6)
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = current date + OutputDays + TermsCode.TransientFirstNetDays
						else
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = TransactionDate + OutputDays + TermsCode.TransientFirstNetDays
						
					if (TermsCode.TermsSplitArray.TermsSplitGroup[1].SplitMoForw entered)
						CalculateTermsTable.CalculateTermsOutput[1].DueDate 	= TransactionDate + TermsCode.TermsSplitArray.TermsSplitGroup[1].SplitMoForw as months
					
					CalculateTermsTable.CalculateTermsOutput[1].DueDateDay 		= CalculateTermsTable.CalculateTermsOutput[1].DueDate week day			
					CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment = TransactionAmount	
					
			
				if (TermsCode.IsProxTerms)
					CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
					
					AddAMonth = 1
					LocalInvoiceDay = TransactionDate day 
					if (LocalInvoiceDay > TermsCode.CutOffDay)
						LocalAddMonth = 2
						AddAMonth	  = 2
					else
						LocalAddMonth = 1					
					
					if (TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent entered)
						LocalCalDiscountAmount = AllowedAmount * TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
						CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = TransactionDate + LocalAddMonth as months
						if (TermsCode.ProxDays.ProxDay[1] entered)
							LocalDiscountDay = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate day
							LocalProxDays		= TermsCode.ProxDays.ProxDay[1]
							if (TermsCode.ProxDays.ProxDay[1] > 28)
								LocalDueMonth = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate month
								if (LocalDueMonth = 2)
									LocalDueDate = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
									if (LocalDueDate is leap year)
										IsLeapYear = true
									if (IsLeapYear)
										LocalProxDays = "29"
									else
										LocalProxDays = "28"

							LocalDiscountDate = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate - LocalDiscountDay + LocalProxDays
							CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = LocalDiscountDate

						if (TermsCode.IncrementByGroup.DaysIncrement entered)
							CalculateTermsTable.CalculateTermsOutput[1].DiscountDate += TermsCode.IncrementByGroup.DaysIncrement
						else
							if (TermsCode.IncrementByGroup.MonthsIncrement entered)
								CalculateTermsTable.CalculateTermsOutput[1].DiscountDate += TermsCode.IncrementByGroup.MonthsIncrement as months
					if (CalculateTermsTable.CalculateTermsOutput[1].DiscountDate entered)
						DateToUse = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					else
						DateToUse = TransactionDate
					CalculateTermsTable.CalculateTermsOutput[1].DueDate = DateToUse + AddAMonth as months
					if (TermsCode.ProxDays.ProxDay[1] entered)
						LocalDiscountDay 	= CalculateTermsTable.CalculateTermsOutput[1].DueDate day
						LocalProxDays		= TermsCode.ProxDays.ProxDay[1]
						if (TermsCode.ProxDays.ProxDay[1] > 28)
							LocalDueMonth = CalculateTermsTable.CalculateTermsOutput[1].DueDate month
							if (LocalDueMonth = 2)
								LocalDueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate
								if (LocalDueDate is leap year)
									IsLeapYear = true
								if (IsLeapYear)
									LocalProxDays = "29"
								else
									LocalProxDays = "28"
						LocalDiscountDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate - LocalDiscountDay + LocalProxDays
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = LocalDiscountDate
					if (TermsCode.NetDueEOM)
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = DateToUse
						LocalEOMDate	= CalculateTermsTable.CalculateTermsOutput[1].DueDate
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = EOMDate
						if (TermsCode.TermsSplitArray.TermsSplitGroup[1].SplitMoForw entered)
							LocalMonthsForward = TermsCode.TermsSplitArray.TermsSplitGroup[1].SplitMoForw
							LocalDueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = LocalDueDate + LocalMonthsForward as months
					else
						if (TermsCode.FirstNetDay entered)
							LocalDueDay  = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate day
							LocalDueDate = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate - LocalDueDay + TermsCode.FirstNetDay
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = LocalDueDate
						if (TermsCode.TermsSplitArray.TermsSplitGroup[1].SplitMoForw entered)
							LocalMonthsForward = TermsCode.TermsSplitArray.TermsSplitGroup[1].SplitMoForw
							LocalDueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = LocalDueDate + LocalMonthsForward as months
							
					if (TermsCode.FirstNetDays entered)
						if (TermsCode.FirstFrom = "D")
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate + TermsCode.FirstNetDays
						else
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = TransactionDate + TermsCode.FirstNetDays
						if (CalculateTermsTable.CalculateTermsOutput[1].DiscountDate > CalculateTermsTable.CalculateTermsOutput[1].DueDate)
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = TransactionAmount * CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
					CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
					CalculateTermsTable.CalculateTermsOutput[1].DueDateDay = CalculateTermsTable.CalculateTermsOutput[1].DueDate week day			
					CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment = TransactionAmount				

                    if (TermsCode.DiscountFromTransactionDate)  
				    	if (CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = 0 
					    and CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount	= 0)  
						    initialize CalculateTermsTable.CalculateTermsOutput[1].DiscountDate	
					    else
						    CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = TermsCode.ProxDays.ProxDay[1] + TransactionDate 


							
				if (TermsCode.IsSplitTerms)
					LocalInvoiceDay = TransactionDate day
					I1 = 1
					while (I1 < 6)
						LocalEndDay = TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitEndDay
						LocalBeginDay = TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitBegDay
						if (LocalEndDay > LocalBeginDay)
							if (LocalInvoiceDay !> LocalEndDay
							and LocalInvoiceDay !< LocalBeginDay)
								end while
						if (LocalEndDay < LocalBeginDay)
							if (LocalInvoiceDay !> LocalEndDay
							or LocalInvoiceDay !< LocalBeginDay)
								end while
						if (LocalEndDay = LocalBeginDay)
							if (LocalInvoiceDay = LocalEndDay)
								end while						
						I1 += 1

					if (TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitDiscDay entered)
						LocalDiscountDay = TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitDiscDay
						initialize LocalAddMonth
						if (LocalEndDay < LocalBeginDay
						and LocalInvoiceDay !< LocalBeginDay)
							LocalAddMonth = 1
						LocalAddMonth = LocalAddMonth + TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitMoForw
						CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = TransactionDate + LocalAddMonth as months
						LocalInvoiceDay = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate day
						CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = CalculateTermsTable.CalculateTermsOutput[1].DiscountDate - LocalInvoiceDay + LocalDiscountDay
						
						CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = TransactionAmount * TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
						CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
					
					if (TermsCode.FirstNetDays entered)
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = TransactionDate + TermsCode.FirstNetDays
					
					if (TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitNetDay entered
					or  TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitEomFlag entered)
						initialize LocalAddMonth
						if (LocalEndDay < LocalBeginDay
						and LocalInvoiceDay !< LocalBeginDay)
							LocalAddMonth = 1
						if (TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitEomFlag entered)
							LocalAddMonth += 1
						LocalAddMonth = LocalAddMonth + TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitMoForw
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = TransactionDate + LocalAddMonth as months
						LocalDueDay = CalculateTermsTable.CalculateTermsOutput[1].DueDate day
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate - LocalDueDay + TermsCode.TermsSplitArray.TermsSplitGroup[I1].SplitNetDay
					
					CalculateTermsTable.CalculateTermsOutput[1].DueDateDay = CalculateTermsTable.CalculateTermsOutput[1].DueDate week day			
					CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment = TransactionAmount				


				if (TermsCode.IsMultPayTerms)
					LocalInvoiceMonth = TransactionDate month
					LocalInvoiceDay = TransactionDate day
					initialize LocalAddYear
					initialize LocalInvoiceCutOffAdd
					initialize LocalAddMonth
					
					if (TermsCode.CutOffDay entered)
						if (LocalInvoiceDay > TermsCode.CutOffDay)
							LocalInvoiceCutOffAdd = 1
					
					I2 = 1
					while (I2 <= 3)
						if (TermsCode.TermsDiscountArray.TermsDiscountGroup[I2].DiscountPercent entered)
							CalculateTermsTable.CalculateTermsOutput[I2].DiscountAmount = TransactionAmount * TermsCode.TermsDiscountArray.TermsDiscountGroup[I2].DiscountPercent
							CalculateTermsTable.CalculateTermsOutput[I2].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[I2].DiscountPercent
							if (TermsCode.TermsDiscountArray.TermsDiscountGroup[I2].DaysToCalcDiscount entered)
								CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate = TransactionDate + TermsCode.TermsDiscountArray.TermsDiscountGroup[I2].DaysToCalcDiscount
							else
								LocalMonthOfDiscount = TermsCode.TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount
								if (LocalMonthOfDiscount[1] = "M")
									LocalAddMonth = LocalMonthOfDiscount[2]
								else
									LocalMonthOfDiscountNumber = LocalMonthOfDiscount
									if (LocalMonthOfDiscountNumber < LocalInvoiceMonth)
										LocalAddMonth = 12 - LocalInvoiceMonth + LocalMonthOfDiscountNumber
										AddYear = true
									else
										LocalAddMonth = LocalMonthOfDiscountNumber - LocalInvoiceMonth
										if (AddYear)
											LocalAddMonth = LocalAddMonth + 12
								CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate = TransactionDate + LocalAddMonth as months
								LocalDiscountMonth = CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate month										
								LocalDiscountDay = TermsCode.TermsDiscountArray.TermsDiscountGroup[I2].DayOfDiscount
								if (LocalDiscountMonth = LocalInvoiceMonth
								and LocalDiscountDay < LocalInvoiceDay)
									LocalAddYear = 1
								CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate = CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate + LocalAddYear as years
								if (LocalDiscountDay > "28")
									if (LocalDiscountMonth = "2"
									or  LocalDiscountMonth = "4"
									or  LocalDiscountMonth = "6"
									or  LocalDiscountMonth = "9"
									or  LocalDiscountMonth = "11")
										if (LocalDiscountMonth = "2")
											LocalDiscountDate = CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate
											if (LocalDiscountDate is leap year)
												IsLeapYear = true
											if (IsLeapYear)
												LocalDiscountDay = "29"
											else
												LocalDiscountDay = "28"
										else
											if (LocalDiscountDay = "31")
												LocalDiscountDay = "30"
								LocalDueDay = CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate day
								CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate = CalculateTermsTable.CalculateTermsOutput[I2].DiscountDate - LocalDueDay + LocalDiscountDay
						I2 += 1

					if (TermsCode.FirstFrom = "I")
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = TransactionDate + TermsCode.FirstNetDays
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate + LocalInvoiceCutOffAdd as months
					else
						if (TermsCode.FirstFrom = "D")
							I5 = 3
							while (I5 > 0)
								if (CalculateTermsTable.CalculateTermsOutput[I5].DiscountDate entered)
									CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[I5].DiscountDate + TermsCode.FirstNetDays
									end while
								I5 -=1 

					if (TermsCode.FirstNetDay entered)
						if (TermsCode.FirstNetMonth[1] = "M")
							LocalNetMonth = TermsCode.FirstNetMonth[2]
							LocalAddMonth = LocalNetMonth
						else
							LocalNetMonth = TermsCode.FirstNetMonth
							if (LocalNetMonth < LocalInvoiceMonth)
								LocalAddMonth = 12 - LocalInvoiceMonth + LocalNetMonth
							else
								if (LocalNetMonth > LocalInvoiceMonth)
									LocalAddMonth = LocalNetMonth - LocalInvoiceMonth
								else
									if (TermsCode.FirstNetDay < LocalInvoiceDay)
										LocalAddMonth = 12

						CalculateTermsTable.CalculateTermsOutput[1].DueDate = TransactionDate + LocalAddMonth as months
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate + LocalInvoiceCutOffAdd as months
						LocalDueMonth = CalculateTermsTable.CalculateTermsOutput[1].DueDate month
						LocalDueDay = CalculateTermsTable.CalculateTermsOutput[1].DueDate day
						LocalDueDaySet	= TermsCode.FirstNetDay
						if (TermsCode.FirstNetDay > "28")
							if (LocalDueMonth = "2"
							or  LocalDueMonth = "4"
							or  LocalDueMonth = "6"
							or  LocalDueMonth = "9"
							or  LocalDueMonth = "11")
								if (LocalDueMonth = "2")
									LocalDueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate
									if (LocalDueDate is leap year)
										IsLeapYear = true
									if (IsLeapYear)
										LocalDueDaySet = "29"
									else
										LocalDueDaySet = "28"
								else
									if (TermsCode.FirstNetDay = "31")
										LocalDueDaySet = "30"

						CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate - LocalDueDay + LocalDueDaySet	
					if (!TermsCode.NetDueEOM)
						I3 = 1
						while (I3 < 4)
							if (CalculateTermsTable.CalculateTermsOutput[I3].DiscountDate not entered)
								I3 = I3 - 1
								end while
							I3 += 1
					else
						if (CalculateTermsTable.CalculateTermsOutput[1].DiscountDate entered)
							I3 = 1
						else
							I3 = 0
							
					if (I3 > "0")
						if (I3 = 4)
							I3 = 3
						if (CalculateTermsTable.CalculateTermsOutput[1].DueDate < CalculateTermsTable.CalculateTermsOutput[I3].DiscountDate)
							LocalAddNextYear = 1
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = CalculateTermsTable.CalculateTermsOutput[1].DueDate + LocalAddNextYear as years
					CalculateTermsTable.CalculateTermsOutput[1].DueDateDay = CalculateTermsTable.CalculateTermsOutput[1].DueDate week day			
					I4 = 1
					while (I4 <= TermsCode.TotalNumberOfPayments)
						if (TermsCode.FirstPercent entered)
							if (I4 = 1)
								CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment = TransactionAmount	* TermsCode.FirstPercent
							else
								RemainingTransactionAmount = TransactionAmount - CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment
								RemainingPayments = TermsCode.TotalNumberOfPayments - 1
								CalculateTermsTable.CalculateTermsOutput[I4].MultiplePayment = RemainingTransactionAmount / RemainingPayments
						else
							CalculateTermsTable.CalculateTermsOutput[I4].MultiplePayment = TransactionAmount / TermsCode.TotalNumberOfPayments
						LocalInvoiceAmount = CalculateTermsTable.CalculateTermsOutput[I4].MultiplePayment
						CalculateTermsTable.CalculateTermsOutput[I4].MultiplePayment = RoundedTransactionAmount
						if (I4 != 1)
							if (TermsCode.IncrementByGroup.DaysIncrement entered)
								CalculateTermsTable.CalculateTermsOutput[I4].DueDate = CalculateTermsTable.CalculateTermsOutput[I4 - 1].DueDate + TermsCode.IncrementByGroup.DaysIncrement
							else
								if (TermsCode.IncrementByGroup.MonthsIncrement entered)
									CalculateTermsTable.CalculateTermsOutput[I4].DueDate = CalculateTermsTable.CalculateTermsOutput[I4 - 1].DueDate + TermsCode.IncrementByGroup.MonthsIncrement as months
							CalculateTermsTable.CalculateTermsOutput[I4].DueDateDay = CalculateTermsTable.CalculateTermsOutput[I4].DueDate week day
						I4 += 1	

					if (TermsCode.NetDueEOM)
						initialize LocalMonthlyDiscountAmount
						LocalCalDiscountAmount = AllowedAmount * TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
						LocalMonthlyDiscountAmount = LocalCalDiscountAmount/TermsCode.TotalNumberOfPayments
						CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = LocalMonthlyDiscountAmount
						CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
						Z2 = 2
						while (Z2 <= TermsCode.TotalNumberOfPayments)
							if (TermsCode.IncrementByGroup.DaysIncrement entered)
								CalculateTermsTable.CalculateTermsOutput[Z2].DiscountDate = CalculateTermsTable.CalculateTermsOutput[Z2 - 1].DiscountDate + TermsCode.IncrementByGroup.DaysIncrement
							else
								if (TermsCode.IncrementByGroup.MonthsIncrement entered)
									CalculateTermsTable.CalculateTermsOutput[Z2].DiscountDate = CalculateTermsTable.CalculateTermsOutput[Z2 - 1].DiscountDate + TermsCode.IncrementByGroup.MonthsIncrement as months
							CalculateTermsTable.CalculateTermsOutput[Z2].DiscountAmount = 	LocalMonthlyDiscountAmount
							CalculateTermsTable.CalculateTermsOutput[Z2].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
							Z2 += 1

					I6 = 1
					initialize LocalTotalPayments
					initialize LocalRemainder
					initialize LocalDiscountRemainder
					initialize LocalTotalDiscountAmount
					while (I6 <= TermsCode.TotalNumberOfPayments)
						LocalTotalPayments = LocalTotalPayments + CalculateTermsTable.CalculateTermsOutput[I6].MultiplePayment
						if (TermsCode.NetDueEOM)
							LocalTotalDiscountAmount = LocalTotalDiscountAmount + CalculateTermsTable.CalculateTermsOutput[I6].DiscountAmount
						I6 += 1

					if (LocalTotalDiscountAmount != LocalCalDiscountAmount)
						LocalDiscountRemainder = LocalCalDiscountAmount - LocalTotalDiscountAmount
						CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount + LocalDiscountRemainder
						
					if (LocalTotalPayments != TransactionAmount)
						LocalRemainder = TransactionAmount - LocalTotalPayments
						CalculateTermsTable.CalculateTermsOutput[TermsCode.TotalNumberOfPayments].MultiplePayment = LocalRemainder + CalculateTermsTable.CalculateTermsOutput[TermsCode.TotalNumberOfPayments].MultiplePayment


				if (TermsCode.IsFixedTerms)
					Z1 = 1
					while (Z1 <= TermsCode.TotalNumberOfPayments)
						initialize LocalDaysDifference
						if (Z1 = 1) 
							CalculateTermsTable.CalculateTermsOutput[Z1].DueDate = TransactionDate + TermsCode.FirstNetDays
							CalculateTermsTable.CalculateTermsOutput[Z1].DueDate -= TermsCode.AdjustmentDays
						else
							CalculateTermsTable.CalculateTermsOutput[Z1].DueDate = CalculateTermsTable.CalculateTermsOutput[Z1 - 1].DueDate + TermsCode.IncrementByGroup.DaysIncrement
							CalculateTermsTable.CalculateTermsOutput[Z1].DueDate -= TermsCode.AdjustmentDays
						LocalDueDay = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate day
						CalculateTermsTable.CalculateTermsOutput[Z1].MultiplePayment = TransactionAmount / TermsCode.TotalNumberOfPayments
						if (TermsCode.FixedDayOfMonth.FixedDaysMo[1] entered)
							I2 = 5
							while (I2 > 0)
								if (TermsCode.FixedDayOfMonth.FixedDaysMo[I2] entered)
									LocalFixedMonth = I2
									end while
								I2 -= 1
							if (LocalDueDay > TermsCode.FixedDayOfMonth.FixedDaysMo[LocalFixedMonth])
								LocalAddMonth = 1
								CalculateTermsTable.CalculateTermsOutput[Z1].DueDate += LocalAddMonth as months
								LocalDueDay = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate day
								CalculateTermsTable.CalculateTermsOutput[Z1].DueDate = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate - LocalDueDay + TermsCode.FixedDayOfMonth.FixedDaysMo[1]
							else
								if (LocalFixedMonth = 1)
									LocalDueDay = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate day
									CalculateTermsTable.CalculateTermsOutput[Z1].DueDate = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate - LocalDueDay + TermsCode.FixedDayOfMonth.FixedDaysMo[1] 
								else
									if (LocalDueDay != TermsCode.FixedDayOfMonth.FixedDaysMo[LocalFixedMonth])
										I5 = LocalFixedMonth - 1
										while (I5 > 0)
											if (LocalDueDay > TermsCode.FixedDayOfMonth.FixedDaysMo[I5])
												CalculateTermsTable.CalculateTermsOutput[Z1].DueDate = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate - LocalDueDay + TermsCode.FixedDayOfMonth.FixedDaysMo[I5 + 1]
												end while
											else
												if (LocalDueDay = TermsCode.FixedDayOfMonth.FixedDaysMo[I5]
												or  I5 = 1)
													CalculateTermsTable.CalculateTermsOutput[Z1].DueDate = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate - LocalDueDay + TermsCode.FixedDayOfMonth.FixedDaysMo[I5]
													end while
											I5 -= 1
						else
							if (TermsCode.FixedDayOfWeek.FixedDaysWk[1] entered
							or  TermsCode.FixedDayOfWeek.FixedDaysWk[2] entered)
								LocalWeekDay = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate week day
								if (TermsCode.FixedDayOfWeek.FixedDaysWk[1] != LocalWeekDay
								and TermsCode.FixedDayOfWeek.FixedDaysWk[2] != LocalWeekDay)
									if (LocalWeekDay < TermsCode.FixedDayOfWeek.FixedDaysWk[1])
										LocalDaysDifference = TermsCode.FixedDayOfWeek.FixedDaysWk[1] - LocalWeekDay
									else
										if (LocalWeekDay > TermsCode.FixedDayOfWeek.FixedDaysWk[1]
										and LocalWeekDay < TermsCode.FixedDayOfWeek.FixedDaysWk[2])
											LocalDaysDifference = TermsCode.FixedDayOfWeek.FixedDaysWk[2] - LocalWeekDay
									if (LocalWeekDay > TermsCode.FixedDayOfWeek.FixedDaysWk[1]
									and LocalWeekDay > TermsCode.FixedDayOfWeek.FixedDaysWk[2]
									or (LocalWeekDay > TermsCode.FixedDayOfWeek.FixedDaysWk[1]
									and TermsCode.FixedDayOfWeek.FixedDaysWk[2] not entered))
										while (LocalWeekDay != TermsCode.FixedDayOfWeek.FixedDaysWk[1])
											LocalDaysDifference += 1
											LocalWeekDay += 1
											if (LocalWeekDay = 8)
												LocalWeekDay = 1
									CalculateTermsTable.CalculateTermsOutput[Z1].DueDate += LocalDaysDifference		
						CalculateTermsTable.CalculateTermsOutput[Z1].DueDateDay = CalculateTermsTable.CalculateTermsOutput[Z1].DueDate week day			
						LocalInvoiceAmount = CalculateTermsTable.CalculateTermsOutput[Z1].MultiplePayment
						CalculateTermsTable.CalculateTermsOutput[Z1].MultiplePayment = RoundedTransactionAmount
						
						Z1 += 1			
	
					I3 = 1
					initialize LocalTotalPayments
					initialize LocalRemainder
					while (I3 <= TermsCode.TotalNumberOfPayments)
						LocalTotalPayments = LocalTotalPayments + CalculateTermsTable.CalculateTermsOutput[I3].MultiplePayment
						I3 += 1
					if (LocalTotalPayments != TransactionAmount)
						LocalRemainder = TransactionAmount - LocalTotalPayments
						CalculateTermsTable.CalculateTermsOutput[TermsCode.TotalNumberOfPayments].MultiplePayment = LocalRemainder + CalculateTermsTable.CalculateTermsOutput[TermsCode.TotalNumberOfPayments].MultiplePayment



				if (TermsCode.IsCodTerms)				
					if (TransactionDate entered)
						CalculateTermsTable.CalculateTermsOutput[1].DueDate = TransactionDate
						CalculateTermsTable.CalculateTermsOutput[1].DueDateDay = CalculateTermsTable.CalculateTermsOutput[1].DueDate week day			
						CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment = TransactionAmount
					if (TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent entered)
						CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
						CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = TransactionAmount * CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent						
						CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = TransactionDate
				
				if (OverrideDiscountAmount entered
				or 	OverrideDueDate entered
				or 	OverrideDiscountRate entered
				or 	OverrideDiscountDate	entered)
					if (TermsCode.IsNetTerms
					or TermsCode.IsProxTerms
					or TermsCode.IsSplitTerms)
						if (OverrideDiscountDate entered)
							CalculateTermsTable.CalculateTermsOutput[1].DiscountDate = OverrideDiscountDate
						if (OverrideDiscountRate entered)
							CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = TransactionAmount * OverrideDiscountRate
							CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = OverrideDiscountRate
						if (OverrideDueDate entered)
							CalculateTermsTable.CalculateTermsOutput[1].DueDate = OverrideDueDate
						if (OverrideDiscountAmount entered)
							CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount = OverrideDiscountAmount
							if (TransactionAmount entered)
								CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent = OverrideDiscountAmount/TransactionAmount
						
				if (CalculateTermsTable.CalculateTermsOutput[1].DiscountDate > CalculateTermsTable.CalculateTermsOutput[1].DueDate)
					OutputErrorNumber = "104"
					OutputErrorMessage = Msg104		
				
				if (TermsCode.TotalNumberOfPayments entered)
					Z1 = 1
					if (TermsCode.TotalNumberOfPayments > 1)		
						while (Z1 <= TermsCode.TotalNumberOfPayments)
							if (CalculateTermsTable.CalculateTermsOutput[Z1].MultiplePayment = "0")
								OutputErrorNumber = "124"
								OutputErrorMessage = Msg124		
								end while
							Z1 += 1
				
				initialize I1
				I1 = 1
				while (I1 < 4)
					if (CalculateTermsTable.CalculateTermsOutput[I1].DiscountAmount > "0")
						if (CalculateTermsTable.CalculateTermsOutput[I1].DiscountAmount > AllowedAmount)
							OutputErrorNumber = "106"
							OutputErrorMessage = Msg106		
							end while
					else
						if (CalculateTermsTable.CalculateTermsOutput[I1].DiscountAmount < "0")
							if (CalculateTermsTable.CalculateTermsOutput[I1].DiscountAmount < AllowedAmount)
								OutputErrorNumber = "106"
								OutputErrorMessage = Msg106		
								end while
					I1 += 1
			
			return blank

		EOMDate is a DerivedField
			type is Date
			restricted
			LocalEOMMonth 		= LocalEOMDate month
			LocalCurrentEOMDay	= LocalEOMDate day
			if (LocalEOMMonth = 1
			or  LocalEOMMonth = 3
			or  LocalEOMMonth = 5
			or  LocalEOMMonth = 7
			or  LocalEOMMonth = 8
			or  LocalEOMMonth = 10
			or  LocalEOMMonth = 12)
				LocalEOMDay = 31
			else
				if (!LocalEOMMonth = 2)
					LocalEOMDay = 30
				else
					if (LocalEOMDate is leap year)
						IsLeapYear = true
					if (IsLeapYear)
						LocalEOMDay = "29"
					else
						LocalEOMDay = "28"
			
			LocalEOMDate	= LocalEOMDate - LocalCurrentEOMDay + LocalEOMDay
			return LocalEOMDate

		Msg101 is a MessageField 
			"TermsCode_(<FinanceEnterpriseGroup>:<TermsCode>)_IsNotActive"
			
		Msg104 is a MessageField
			"DiscountDateGreaterThanDueDate" 
		
		Msg106 is a MessageField 
			"DiscountAmount<CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount>GreaterThanAllowedDiscountAmount<AllowedAmount>"
			
		Msg124 is a MessageField
			"TransactionAmountCannotBeZeroWhenNumberOfPaymentsEntered"	


