ReportCurrencyExchange is a Field

    Representation
        Group Fields
			EnteredCurrencyRate		is a CurrencyExchangeRate						
			EnteredCurrencyAmount	is like InternationalAmount 
				precision is ToCurrency.NumberOfDecimals
		        
	Patterns
		implements CompactFormat
		        
    Context Fields
		FinanceEnterpriseGroup 
		FromCurrency
		TransactionAmount		is a CurrencyAmount
		ExchangeDate
		UnitsAmount				is an InternationalAmount
		CurrencyTable
		SaveOverTolerance
		BypassNegativeRateEdit
		
	Transient Fields
		ToCurrency				is a Currency
			
	Local Fields
		LocalToCurrency			is a ToCurrency
		TranCurrRelationship	is a CurrencyRelationship
		TriangulateFrRel		is a CurrencyRelationship
		TriangulateToRel		is a CurrencyRelationship
		TranCurrExchangeRate    is a CurrExchangeRate
			version is ExchangeDate
		TriangFrExchangeRate    is a CurrExchangeRate
			version is ExchangeDate
		TriangToExchangeRate    is a CurrExchangeRate
			version is ExchangeDate
		LocalSellRate           is Decimal size 31.15
		LocalEnforceRules		is Boolean
		
	Derived Fields
			
		OutputCurrencyAmount		is a DerivedField
    		type is Decimal 24.8 
				precision is OutputNumberOfDecimals
			LocalToCurrency = ToCurrency
			if (LocalToCurrency not entered)
				LocalToCurrency = FromCurrency
							
			if (FromCurrency = LocalToCurrency)
				if (TransactionAmount entered)
					OutputCurrencyAmount = TransactionAmount
				else				
					OutputCurrencyAmount = EnteredCurrencyAmount
			else				
			if (EnteredCurrencyAmount entered)
				OutputCurrencyAmount = EnteredCurrencyAmount
			else
				TranCurrRelationship.FromCurrency	      = FromCurrency
				TranCurrRelationship.ToCurrency		      = LocalToCurrency
				TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship
				if (TranCurrRelationship.MultDiv.Multiply)
					OutputCurrencyAmount = (TransactionAmount * OutputCurrencyRate)
				else				
					OutputCurrencyAmount = (TransactionAmount / OutputCurrencyRate)
			return RoundedCurrencyAmount

		OutputCurrencyRate			is a DerivedField
			type is Decimal size 31.15
			if (FromCurrency not entered)
				return 1

			LocalToCurrency = ToCurrency
			if (LocalToCurrency not entered)
				LocalToCurrency = FromCurrency	
			if (FromCurrency = LocalToCurrency)
				return 1

			if (EnteredCurrencyRate entered)
				return EnteredCurrencyRate 

			if (EnteredCurrencyAmount	not entered)
				return CurrencySellRate 

			if (EnteredCurrencyAmount entered
			and TransactionAmount	not entered)
				if (EnteredCurrencyRate not entered)
					return CurrencySellRate 


			TranCurrRelationship.FromCurrency	      = FromCurrency
			TranCurrRelationship.ToCurrency		      = LocalToCurrency
			TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship

			if (TranCurrRelationship.MultDiv.Multiply)
				if (RoundedCalculatedCurrencyAmount = EnteredCurrencyAmount)	
					return CurrencySellRate
				else
					return (EnteredCurrencyAmount / TransactionAmount) 
			else
				if (RoundedCalculatedCurrencyAmount = EnteredCurrencyAmount)	
					return CurrencySellRate
				else
					return (TransactionAmount / EnteredCurrencyAmount) 
				
		CurrencySellRate			is a DerivedField
			type is Decimal size 31.15		
			if (FromCurrency not entered)
				return 1			

			LocalToCurrency = ToCurrency
			if (LocalToCurrency not entered)
				LocalToCurrency = FromCurrency	
			if (FromCurrency = LocalToCurrency)
				return 1
		
			TranCurrRelationship.FromCurrency	      = FromCurrency
			TranCurrRelationship.ToCurrency		      = LocalToCurrency
			TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship

			if (TranCurrRelationship.Triangulate)			
				TriangulateFrRel.FromCurrency	            = FromCurrency
				TriangulateFrRel.ToCurrency		            = TranCurrRelationship.TriangulateVia
				TriangulateToRel.FromCurrency	            = TranCurrRelationship.TriangulateVia
				TriangulateToRel.ToCurrency		            = LocalToCurrency
				TriangFrExchangeRate.CurrencyRelationship	= TriangulateFrRel		
				TriangToExchangeRate.CurrencyRelationship	= TriangulateToRel
				return TriangulateCurrRate
			else
 				LocalSellRate = TranCurrExchangeRate.Rate
 				return LocalSellRate

		TriangulateFrRate			is a DerivedField		
			type is Decimal size 31.15
			return TriangFrExchangeRate.Rate

		TriangulateToRate			is a DerivedField		
			type is Decimal size 31.15
			return TriangToExchangeRate.Rate
			
		RelationshipOverrideTolerance is a DerivedField
			type is Numeric size 3
			return TranCurrRelationship.OverrideTolerance

		RateToleranceLoLimit		is a ComputeField
			type is Decimal size 31.15
			(CurrencySellRate - (CurrencySellRate * RelationshipOverrideTolerance / 100))
			
		RateToleranceHiLimit		is a ComputeField
			type is Decimal size 31.15
			(CurrencySellRate + (CurrencySellRate * RelationshipOverrideTolerance / 100))
			
		TriangulateCurrRate			is a ConditionalField
			type is Decimal size 31.15
			if  (TriangulateFrRel.MultDiv.Multiply)
				if  (TriangulateToRel.MultDiv.Multiply)
					(TriangulateFrRate * TriangulateToRate)
				else
					(TriangulateFrRate / TriangulateToRate)
			else
 			if  (TriangulateToRel.MultDiv.Multiply)
				(TriangulateToRate / TriangulateFrRate)
			else
				(1 / (TriangulateFrRate * TriangulateToRate))
 
 		OutputNumberOfDecimals is a DerivedField
 			type is Numeric size 1
			LocalToCurrency = ToCurrency
			if (LocalToCurrency not entered)
				if (actor.context.FinanceEnterpriseGroup.DefaultDecimalsOption entered)
					return actor.context.FinanceEnterpriseGroup.DefaultNumberOfDecimals
				else
					return 2
			else
				return LocalToCurrency.NumberOfDecimals
 			
		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
			restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		RoundedCurrencyAmount			is a DerivedField
    		type is Decimal 24.8 
			restricted
    		if (OutputCurrencyAmount entered)
	    		RoundedCurrencyAmount	      = OutputCurrencyAmount
	    		round RoundedCurrencyAmount to nearest DerivedRoundTo
	    		return RoundedCurrencyAmount
	    	else
	    		return 0

		RoundedCalculatedCurrencyAmount			is a DerivedField
    		type is Decimal 24.8 
			restricted
			if (TranCurrRelationship.MultDiv.Multiply)
	    		RoundedCalculatedCurrencyAmount	= TransactionAmount * CurrencySellRate
	    	else
	    		RoundedCalculatedCurrencyAmount	= TransactionAmount / CurrencySellRate
    		round RoundedCalculatedCurrencyAmount to nearest DerivedRoundTo
    		return RoundedCalculatedCurrencyAmount

	Conditions
		WithinRateTolerance
			when (EnteredCurrencyRate >= RateToleranceLoLimit
			and	  EnteredCurrencyRate <= RateToleranceHiLimit)
 			
	Field Rules
		EnteredCurrencyRate
			LocalEnforceRules = true
			if (LocalEnforceRules)
				if (ToCurrency not entered)
					ToCurrency = FromCurrency
				if (FromCurrency != ToCurrency
				and FromCurrency entered)
					TranCurrRelationship.FromCurrency	      = FromCurrency
					TranCurrRelationship.ToCurrency		      = ToCurrency
					TranCurrExchangeRate.CurrencyRelationship = TranCurrRelationship
					constraint (TranCurrRelationship exists)
						"CurrencyRelationship<FromCurrency>-<ToCurrency>DoesNotExist"
	
					if (TranCurrRelationship.Triangulate)
						TriangulateFrRel.FromCurrency	            = FromCurrency
						TriangulateFrRel.ToCurrency		            = TranCurrRelationship.TriangulateVia
						TriangulateToRel.FromCurrency	            = TranCurrRelationship.TriangulateVia
						TriangulateToRel.ToCurrency		            = ToCurrency
						TriangFrExchangeRate.CurrencyRelationship	= TriangulateFrRel
						TriangToExchangeRate.CurrencyRelationship	= TriangulateToRel
						constraint (TriangulateFrRate != 0)
							"CurrencyRateDoesNotExistBetween<FromCurrency>To<TranCurrRelationship.TriangulateVia>InRateTable<CurrencyTable>"
						constraint (TriangulateToRate != 0)
							"CurrencyRateDoesNotExistBetween<TranCurrRelationship.TriangulateVia>To<ToCurrency>InRateTable<CurrencyTable>"
					else
						constraint (CurrencySellRate  != 0)
							"CurrencyRateDoesNotExistBetween<FromCurrency>To<ToCurrency>InRateTable<CurrencyTable>"
	
					if	(EnteredCurrencyRate entered
					and	 TranCurrRelationship.OverrideProtection)
						constraint	(EnteredCurrencyRate = CurrencySellRate)
							"CannotOverrideCurrencyRate"			
	
					if	(EnteredCurrencyRate entered
					and  TranCurrRelationship.OverrideTolerance	entered)
						if (!SaveOverTolerance)
							constraint (WithinRateTolerance)
								"RateIsNotWithinToleranceRange"
						else
							if (!WithinRateTolerance)
								confirmation required
									"RateIsNotWithinToleranceRange;Continue?"
									
				EnteredCurrencyRate   = OutputCurrencyRate
				EnteredCurrencyAmount = OutputCurrencyAmount						
	
				if (TranCurrRelationship.OverrideProtection)
					constraint (EnteredCurrencyRate = CurrencySellRate)
						"CannotOverrideCurrencyRateEnteredCurrencyRate<EnteredCurrencyRate>CurrencySellRate<CurrencySellRate>"
						
				if (TranCurrRelationship.OverrideTolerance entered)
					if (!SaveOverTolerance)
						constraint (WithinRateTolerance)
							"RateIsNotWithinToleranceRange"
					else
						if (!WithinRateTolerance)
							confirmation required
								"RateIsNotWithinToleranceRange;Continue?"
								
				if (TransactionAmount entered)
					required
					
