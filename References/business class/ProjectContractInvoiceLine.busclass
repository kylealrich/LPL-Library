ProjectContractInvoiceLine is a BusinessClass
    owned by Projects
    prefix is PJCIL

    Ontology
    	part of ProjectContractInvoice
    		relative key is SequenceNumber is Numeric size 8
    		
    Patterns

    Persistent Fields
    	GLTransactionDetail
    	Amount 				is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
		ProjectContractMilestone
		UnitsAmount		
    	Project
    	TaxAmount			is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
		TaxRate             is Percent size 7.5    		    		
    	BillableAmount		is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
		BillableRate		is Decimal size 22.6
#ifdef module tx
		TaxCode
			default label is "BenefitReceivedTaxCode"
		BuyerTaxCode		is a TaxCode
		ProductTaxCategory
#endif
#ifndef module tx
		TaxCode 			is AlphaUpper size 15
			default label is "BenefitReceivedTaxCode"		
		BuyerTaxCode		is AlphaUpper size 15
		ProductTaxCategory	is AlphaUpper size 15
#endif
		AddressCode
		FeeCode				is a ProjectFeeCode
		BillingMethod		is a ProjectBillingMethod
		ProjectContractRetainer
		FeeMaxed			is Boolean
		FromPartial			is Boolean
		AmountRemoved		is Boolean
		IsAllowance			is Boolean
		RetainedAmount		is a CurrencyAmount
    		precision is ProjectContract.Currency.NumberOfDecimals
		IsRetainage			is Boolean
		ProjectContractAdvance
		AppliedProjectContractAdvance	is a ProjectContractAdvance
		LineType			is Numeric size 2
			States
				Standard		value is 1
				Fee				value is 2
				Allowance		value is 3
				Retainage		value is 4
				PassThrough		value is 5
				AdvanceBill		value is 6
				AppliedAdvance	value is 7
				Retainer		value is 8
				Milestone		value is 9
				Tax				value is 10
		Adjusted			is Boolean
		SummaryKey			is Numeric size 4
		Deferred			is Boolean

	Transient Fields
		Hold				is Boolean
		Edited				is Boolean
		OldAmount			is like InternationalAmount
		Adjustment			is like InternationalAmount
		MinimumNotMet		is Boolean
		RevertLine			is Boolean

	Context Fields
		ProjectInvoiceType
		
	Local Fields
		LocalFinanceCodeBlock	is a FinanceCodeBlock
		LocalProjectCodeBlock	is a ProjectCodeBlock
		LocalCodeBlockField		is like GeneralLedgerChartAccount
		TopNodeFound			is Boolean
		LocalRetainer			is like ProjectContractRetainer
		LocalSequenceNumber		is like SequenceNumber
		LocalAmount				is like InternationalAmount
		LocalTotal				is like InternationalAmount
		LocalAllowanceAmount	is like InternationalAmount
		LocalRunGroup				is like ProjectContractRunGroup
		LocalFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
		LocalProjectContract		is like ProjectContract
		LocalProjectContractInvoice	is like ProjectContractInvoice
		LocalFinanceDimension2		is like FinanceDimension2
		LocalInvoiceType			is a ProjectInvoiceType
		LocalRetainerLinesExist		is Boolean
		LocalProject				is like Project
		LocalBuyerTaxCode			is AlphaUpper size 15
		LocalAddressCode			is an AddressCode
		LocalTaxCounter				is Numeric size 2
		LocalTaxAmount				is like InternationalAmount
		LocalPercentage				is Percent size 7.5
		LocalTaxRate				is Percent size 7.5
		LocalDifference				is like InternationalAmount
		LocalTaxDifference			is like InternationalAmount
		LocalBaseTaxable			is like InternationalAmount
		LocalRemovedTaxable			is like InternationalAmount
		LocalTotalRemovedTax		is like InternationalAmount
		LocalRemovedLineTax			is like InternationalAmount
		LocalRemovedLineTaxable		is like InternationalAmount
		LocalMassDelete				is Boolean
		LocalFeeCode				is like ProjectFeeCode
		LocalEffectiveDate			is Date
		AbsoluteUnits				is like UnitsAmount
		LocalMarginal				is Boolean
		FeeAmount					is like InternationalAmount
		LocalOriginalAmount			is like InternationalAmount
		LocalOriginalUnitsAmount	is like UnitsAmount
    	LocalOriginalTaxAmount		is like InternationalAmount
		LocalOriginalTaxRate        is Percent size 7.5    		    		
		LocalOriginalBillableRate	is Decimal size 22.6
		LocalOriginalBillableAmount	is like InternationalAmount
		LocalOriginalBuyerTaxCode	is AlphaUpper size 15
		LocalOriginalAddressCode	is like AddressCode
		LocalOriginalValuesDerived	is Boolean
		RevertToTaxable				is Boolean
		LocalUnitsAmount			is like UnitsAmount
		LocalBillableAmount			is like InternationalAmount
		LocalRetainedAmount			is like InternationalAmount
		LocalConfigurationParameter	is Alpha size up to 200
#ifdef module tx		
		LocalTaxEntity				is a TaxEntity
		CalculateTax
		LocalCalculateTaxExecuted	is Alpha size 1
		LocalOneSourceTaxAttribute 	is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText is Text
		AttributeCounter			is Numeric 2
		LocalPSTaxCode				is Alpha 15
		LocalPSTaxRate				is Numeric size 9
		LocalTaxSequence			is Numeric size 9
#endif
		LocalInvoiceAmount			is like InternationalAmount
		LocalInvoiceFees			is like InternationalAmount
		LocalInvoicePassThrough		is like InternationalAmount
		LocalInvoiceAllowance		is like InternationalAmount
		LocalInvoiceRetainage		is like InternationalAmount
		LocalInvoiceAdvance			is like InternationalAmount
		LocalInvoiceRetainer		is like InternationalAmount
		LocalInvoiceTax				is like InternationalAmount

	Field Groups
		FEGAndProject
			FinanceEnterpriseGroup
			Project
			
	Rule Blocks

#ifdef module tx		
		LoadOneSourceTaxAttribute  	 
			initialize LocalOneSourceTaxAttribute
			initialize AttributeCounter
			if (TaxAttributesRel exists)				 
				for each TaxAttributesRel.OneSourceProjectTaxAttributeByNumberRel
					if (each.Value entered
					or  each.LoadDynamicField entered)
						AttributeCounter +=1	
						LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Number	= each.AttributeNumber 
						LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Name	= each.UserAttributeName
						if (each.LoadDynamicField.ValueIs.ContractType)
							if (ProjectContract.ContractType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProjectContract.ContractType
						else		
						if (each.LoadDynamicField.ValueIs.CustomerType)						
							if (ProjectFundingSource.CustomerType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= ProjectFundingSource.CustomerType
						else
						if (each.LoadDynamicField.ValueIs.Project)						
							if (PrmProject entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= PrmProject
						else		
						if (each.LoadDynamicField.ValueIs.WorkType)						
							if (PrmProject.WorkType entered)
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= PrmProject.WorkType
						else				
						if (each.LoadDynamicField.ValueIs.ServiceType)						
							if (PrmProject.ServiceType entered)															
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= PrmProject.ServiceType
						else			
						if (each.LoadDynamicField.ValueIs.UsageType)						
							if (PrmProject.UsageType entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= PrmProject.UsageType
						else			
						if (each.LoadDynamicField.ValueIs.Latitude)						
							if (CalculateTax.PostalAddress entered and CalculateTax.PostalAddress.GeoLatitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= CalculateTax.PostalAddress.GeoLatitude
						else
						if (each.LoadDynamicField.ValueIs.Longitude)						
							if (CalculateTax.PostalAddress entered and CalculateTax.PostalAddress.GeoLongitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= CalculateTax.PostalAddress.GeoLongitude
						else
						if (each.LoadDynamicField.ValueIs.Altitude)						
							if (CalculateTax.PostalAddress entered and CalculateTax.PostalAddress.GeoAltitude entered)																
								LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value	= CalculateTax.PostalAddress.GeoAltitude

						else			




							LocalOneSourceTaxAttribute.UserElement[AttributeCounter].Value		= each.Value
#endif		

		DeriveOriginalValues
			if (not LocalOriginalValuesDerived)
				for each this instance.audit log records
					if (each.action type.Create)
						LocalOriginalAmount 		= each.Amount
						LocalOriginalTaxAmount		= each.TaxAmount
						LocalOriginalBuyerTaxCode	= each.BuyerTaxCode
						LocalOriginalTaxRate		= each.TaxRate
						LocalOriginalAddressCode	= each.AddressCode
						LocalOriginalUnitsAmount	= each.UnitsAmount
						LocalOriginalBillableRate	= each.BillableRate
						LocalOriginalBillableAmount	= each.BillableAmount
					else
					if (LocalOriginalTaxAmount not entered
					and LocalOriginalTaxRate   not entered)
						LocalOriginalTaxAmount		= each.TaxAmount
						LocalOriginalTaxRate		= each.TaxRate
				LocalOriginalValuesDerived			= true

		SetLocalProjectCodeBlock
			initialize LocalProjectCodeBlock
			if (Project.ProjectBillingOverride set exists)
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Account)
					LocalProjectCodeBlock.GeneralLedgerChartAccount = GLTransactionDetail.FinanceCodeBlock.GeneralLedgerChartAccount
					LocalCodeBlockField = LocalProjectCodeBlock.GeneralLedgerChartAccount
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!ReportingChartAccountRel.ParentChartAccount.ChartType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.GeneralLedgerChartAccount = ReportingChartAccountRel.ParentChartAccount
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension1)
					LocalProjectCodeBlock.FinanceDimension1 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension1
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension1
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension1HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension1 = FinanceDimension1HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension3)
					LocalProjectCodeBlock.FinanceDimension3 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension3
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension3
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension3HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension3 = FinanceDimension3HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension4)
					LocalProjectCodeBlock.FinanceDimension4 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension4
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension4
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension4HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension4 = FinanceDimension4HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension5)
					LocalProjectCodeBlock.FinanceDimension5 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension5
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension5
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension5HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension5 = FinanceDimension5HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension6)
					LocalProjectCodeBlock.FinanceDimension6 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension6
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension6
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension6HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension6 = FinanceDimension6HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension7)
					LocalProjectCodeBlock.FinanceDimension7 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension7
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension7
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension7HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension7 = FinanceDimension7HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension8)
					LocalProjectCodeBlock.FinanceDimension8 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension8
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension8
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension8HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension8 = FinanceDimension8HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension9)
					LocalProjectCodeBlock.FinanceDimension9 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension9
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension9
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension9HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension9 = FinanceDimension9HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true
				else
				if (FinanceEnterpriseGroup.BillingOverrideLevel.Dimension10)
					LocalProjectCodeBlock.FinanceDimension10 = GLTransactionDetail.FinanceCodeBlock.FinanceDimension10
					LocalCodeBlockField = LocalProjectCodeBlock.FinanceDimension10
					if (LocalProjectCodeBlock entered)
						if (ProjectBillingOverrideRel not exists)
							TopNodeFound = false
							while (!TopNodeFound)
								if (!FinanceDimension10HierarchyRel.ParentDimension.DimensionType.Summary)
									TopNodeFound = true
								else
									LocalProjectCodeBlock.FinanceDimension10 = FinanceDimension10HierarchyRel.ParentDimension
								if (ProjectBillingOverrideRel exists)
									TopNodeFound = true

	Derived Fields
		DerivedIndirectBurdenRate is a DerivedField
			type is Percent size 7.3
			if ((LineType.Standard
			or   LineType.PassThrough)
			and (GLTransactionDetail.GeneralLedgerEvent = "IB"
			or   GLTransactionDetail.GeneralLedgerEvent = "RB"))
				return GLTransactionDetail.first ProjectIndirectBurdenTransaction(GeneratedGLTransactionDetail) set.ProjectIndirectBurdenCodeRel.Rate

		DerivedFringeBurdenRate is a DerivedField
			type is Percent size 7.3
			if ((LineType.Standard
			or   LineType.PassThrough)
			and  GLTransactionDetail.GeneralLedgerEvent = "BD")
				return GLTransactionDetail.first ProjectAssignmentLaborTransaction set.ProjectBurdenCodeRel.Rate
			
		InvoiceLineTotalAmount is a DerivedField
			type is like CurrencyAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return Amount + TaxAmount
	
		DerivedAccountingEntity is a DerivedField
			type is like AccountingEntity
			if (GLTransactionDetail entered)
				return GLTransactionDetail.AccountingEntity
			else
			if (ProjectContractRetainer entered)
				return ProjectContractRetainer.RetainerFullAccount.ToAccountingEntity
			else
			if (ProjectContractMilestone entered
			and ProjectContractMilestone.ProjectContractMilestoneDistribution set exists)
				return ProjectContractMilestone.first ProjectContractMilestoneDistribution set.RevenueFullAccount.ToAccountingEntity
			else
				if (ProjectContract.RevenueRecognition.Combined)
					return ProjectFundingSource.RevenueFullAccount.ToAccountingEntity						
				else
					if (ProjectFundingSource.IsInternalFund)
						return ProjectFundingSource.RevenueClearingAccount.ToAccountingEntity
					else
						return ProjectFundingSource.BilledUnearnedAccount.ToAccountingEntity

		DerivedInvoiceDescription is a DerivedField
			type is like Description
			if (FeeCode entered)
				return FeeCode.Description 	
			else
			if (IsAllowance)
				return AllowanceMF
			else
			if (IsRetainage)
				return RetainageMF
			else
			if (ProjectContractInvoice.InvoiceType.Retainage)
				return RetentionInvoiceMF
			else
			if (ProjectContractMilestone entered)
				return ProjectContractMilestone.Description
			else
			if (ProjectContractRetainer entered)
				return ProjectContractRetainer.Description
			else
			if (ProjectContractAdvance entered)
				return ProjectContractAdvance.Description
			else
			if (AppliedProjectContractAdvance entered)
				return AppliedProjectContractAdvance.Description
			else
			if (LineType.Tax)
				return TaxMF
			if (GLTransactionDetail entered)
				include SetLocalProjectCodeBlock
				if (ProjectBillingOverrideRel exists)
					if (BillingMethod.TimeAndMaterials)			
						return LocalCodeBlockField + " " + GLTransactionDetail.Resource.FirstLastName
					else
						return LocalCodeBlockField + " " + GLTransactionDetail.Description
				else			
					if (BillingMethod.TimeAndMaterials)			
						return GLTransactionDetail.Resource.FirstLastName
					else
						return GLTransactionDetail.Description
				
		DerivedInvoiceDate is a DerivedField
			type is Date
			if (ProjectContractMilestone entered)
				return ProjectContractMilestone.MilestoneDate
			else
			if (ProjectContractRetainer entered)
				return ProjectContractRetainer.RetainerDate
			else
			if (GLTransactionDetail entered)
				return GLTransactionDetail.TransactionDate
			else
				return ProjectContractInvoice.InvoiceDate

		DerivedMouseOver is a DerivedField
			type is like Description
			if (IsAllowance)
				return AllowanceMF
			else
			if (IsRetainage)
				return RetainageMF
			else
			if (ProjectContractAdvance entered)
				return AdvanceMF
			else
			if (AppliedProjectContractAdvance entered)
				return AppliedAdvanceMF
			else
			if (LineType.Tax)
				return TaxMF
				
		DerivedDate is a DerivedField
			type is Date
			if (ProjectContractMilestone entered)
				return ProjectContractMilestone.MilestoneDate
			else
			if (ProjectContractRetainer entered)
				return ProjectContractRetainer.RetainerDate
			else
			if (ProjectContractAdvance entered)
				return ProjectContractAdvance.InvoiceDate
			else
			if (AppliedProjectContractAdvance entered)
				return AppliedProjectContractAdvance.InvoiceDate
			else
			if (GLTransactionDetail entered)
				return GLTransactionDetail.TransactionDate
			
		DerivedTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			if (TaxAmount entered)
				return TaxAmount
			else
			if (ProjectInvoiceTaxSummaryOTORel exists)
				LocalPercentage = Amount / ProjectInvoiceTaxSummaryOTORel.TaxableAmount
				LocalTaxAmount = LocalPercentage * ProjectInvoiceTaxSummaryOTORel.TaxAmount
				round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
				return LocalTaxAmount

		DerivedTaxRate is a DerivedField
			type is Percent size 7.5
			if (TaxRate entered)
				return TaxRate
			else
			if (ProjectInvoiceTaxSummaryOTORel exists)
				return ProjectInvoiceTaxSummaryOTORel.TaxRate

		TotalAppliedAmount is a DerivedField
			type is like InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			return sum ProjectContractInvoiceRetainerLine set.AppliedAmount

		OriginalAmount is a DerivedField
			type is like  InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			include DeriveOriginalValues
			return LocalOriginalAmount

		OriginalTaxAmount is a DerivedField
			type is like  InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			include DeriveOriginalValues
			return LocalOriginalTaxAmount

		OriginalBuyerTaxCode is a DerivedField
			type is AlphaUpper size 15
			include DeriveOriginalValues
			return LocalOriginalBuyerTaxCode

		OriginalTaxRate is a DerivedField
			type is Percent size 7.5
			include DeriveOriginalValues
			return LocalOriginalTaxRate

		OriginalAddressCode is a DerivedField
			type is like AddressCode
			include DeriveOriginalValues
			return LocalOriginalAddressCode

		OriginalUnitsAmount is a DerivedField
			type is like UnitsAmount
			include DeriveOriginalValues
			return LocalOriginalUnitsAmount

		OriginalBillableRate is a DerivedField
			type is Decimal size 22.6
			include DeriveOriginalValues
			return LocalOriginalBillableRate

		OriginalBillableAmount is a DerivedField
			type is like  InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals			
			include DeriveOriginalValues
			return LocalOriginalBillableAmount
		
		AdjustmentAmount is a DerivedField
			type is like  InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return (Amount - OriginalAmount)

		AdjustmentTaxAmount is a DerivedField
			type is like  InternationalAmount
				precision is ProjectContract.Currency.NumberOfDecimals
			return (TaxAmount - OriginalTaxAmount)

		AdjustmentUnitsAmount is a DerivedField
			type is like UnitsAmount
			return (UnitsAmount - OriginalUnitsAmount)

		AdjustmentBillableRate is a DerivedField
			type is Decimal size 22.6
			return (BillableRate - OriginalBillableRate)

		ServiceAddressCode is a DerivedField
			type is like AddressCode
			if (GLTransactionDetail entered)
				include SetLocalProjectCodeBlock
				return ProjectBillingOverrideRel.ProjectServiceLocation.AddressCode

		AllowanceMF is a MessageField
			restricted
			"Allowance"

		RetainageMF is a MessageField
			restricted
			"Retainage"
			
		TaxMF is a MessageField
			restricted
			"Tax"

		AdvanceMF is a MessageField
			restricted
			"AdvanceBilling"

		AppliedAdvanceMF is a MessageField
			restricted
			"AdvancedBillingApplied"

		RetentionInvoiceMF is a MessageField
			restricted
			"RetentionInvoice"
			

#ifdef module integration
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedBODAccountingEntity is a DerivedField
			type is AlphaUpper size 22
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + DerivedAccountingEntity
			
		DerivedItemID is a DerivedField
			type is Alpha 60
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + DerivedInvoiceDescription
#endif
#ifdef module ar	
		DerivedPSAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Company.AccountingEntity
			
		DerivedCustomerName is a DerivedField
			type is Alpha size 120
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.Name
			
		DerivedCustomerAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.Municipality

		DerivedCustomerCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.Country

		DerivedCustomerPostalCode	is a DerivedField
			type is AlphaUpper size 12
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.PostalCode
			
		DerivedCustomerStateProvince is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Customer.PostalAddress.StateProvince
			
		DerivedCountryCode is a DerivedField
			type is Alpha size 5
			restricted
			if (ProjectContractInvoice.ReceivableInvoiceRel.Company.AccountingEntity.AddressCode entered)
				return ProjectContractInvoice.ReceivableInvoiceRel.Company.AccountingEntity.AddressCode.PostalAddress.Country
			else 
				return ""
			
		DerivedPLevelStateProvinceIDNumber	is a DerivedField
			type is Alpha size 25
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.StateProvinceIDNumber
			
				
		DerivedProcessLevelAddress1	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine1

		DerivedProcessLevelAddress2	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine2

		DerivedProcessLevelAddress3	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine3

		DerivedProcessLevelAddress4	is a DerivedField
			type is Alpha size 40
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine4

		DerivedProcessLevelMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.Municipality

		DerivedProcessLevelStateProvince is a DerivedField
			type is AlphaUpper size 3
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.StateProvince

		DerivedProcessLevelCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.Country

		DerivedProcessLevelPostalCode	is a DerivedField
			type is Alpha size 12
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.PostalAddress.PostalCode
				
		DerivedProcessLevelName	is a DerivedField
			type is Alpha size 120
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.ReceivableProcessLevel.Name
				
		DerivedExtBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return Amount * ProjectContractInvoice.ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			
		DerivedExtReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return Amount * ProjectContractInvoice.ReceivableInvoiceRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			
		DerivedDescription is a DerivedField
			type is Alpha 60
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Description
			
		DerivedRTBaseCurrency is a DerivedField
			type is Alpha size 6
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Company.Currency
			
		DerivedRTReportCurrency is a DerivedField
			type is Alpha size 10
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.Company.FinanceEnterpriseGroup.ReportCurrencyOne
			
		DerivedOriginalCurrency is a DerivedField
			type is Alpha size 10
			restricted
			return ProjectContractInvoice.ReceivableInvoiceRel.OriginalCurrency
				
#endif
		DerivedPSServiceIndicator is a DerivedField
			type is Alpha 3
			restricted
			return "1"
			
		DerivedQuantity is a DerivedField
			type is Alpha 3
			restricted
			return "1"
			
		DerivedHSNSACCode is a DerivedField
			type is Alpha 60
			restricted
			return ProjectContractInvoice.ProjectFundingSource.HSNSACCode
			
		DerivedExtendedBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return ProjectContractInvoice.InvoiceTotalAmount
					
		DerivedGeneralLedgerChartAccount is a DerivedField
			type is Alpha 30
			restricted
			return GLTransactionDetailRel.FinanceCodeBlock.GeneralLedgerChartAccount
			
		DerivedLedger is a DerivedField
			type is Alpha 30
			restricted
			return GLTransactionDetailRel.FinanceCodeBlock.Ledger
			
		DerivedContract is a DerivedField
			type is Alpha 30
			restricted
			return ProjectContractInvoice.ProjectContract
			
		DerivedAccountingUnit is a DerivedField
			type is Alpha 30
			restricted
			return GLTransactionDetailRel.FinanceCodeBlock.AccountingUnit
		
		DerivedTotalAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return BillableAmount+TaxAmount
			
		DerivedSequence is a DerivedField
			type is Alpha 10
			restricted
			return SequenceNumber
			
		DerivedBuyerTaxEnter is a DerivedField
			type is Alpha 30
			restricted
			if(BuyerTaxCode entered)
				return "Taxable"
			else
				return "Exempt"			
	
#ifdef module tx 		
		ProjectContractInvoiceLineTaxXML  is a DerivedField
			type is XMLDocument
			restricted
			if(SequenceNumber = "1" and LocalTaxSequence = "0")
				LocalTaxSequence += 1
				LocalPSTaxCode = BuyerTaxCode
				LocalPSTaxRate = TaxRate
				ProjectContractInvoiceLineTaxXML =template.IONInvoice_ProjectContractInvoiceLine_Tax_XML_ST document for this instance
				return ProjectContractInvoiceLineTaxXML
				

		ProjectContractInvoiceLineTaxTableTaxXML is a DerivedField
			type is XMLDocument
			restricted
			if(TaxTableRel.TaxCode1 entered)
				LocalTaxSequence = 1
				LocalPSTaxCode= TaxTableRel.TaxCode1
				LocalPSTaxRate= TaxTableRel.TaxCode1Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			if(TaxTableRel.TaxCode2 entered)
				LocalTaxSequence = 2
				LocalPSTaxCode= TaxTableRel.TaxCode2
				LocalPSTaxRate= TaxTableRel.TaxCode2Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML+=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			if(TaxTableRel.TaxCode3 entered)
				LocalTaxSequence = 3
				LocalPSTaxCode= TaxTableRel.TaxCode3
				LocalPSTaxRate= TaxTableRel.TaxCode3Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML+=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			if(TaxTableRel.TaxCode4 entered)
				LocalTaxSequence = 4
				LocalPSTaxCode= TaxTableRel.TaxCode4
				LocalPSTaxRate= TaxTableRel.TaxCode4Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML+=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			if(TaxTableRel.TaxCode5 entered)
				LocalTaxSequence = 5
				LocalPSTaxCode= TaxTableRel.TaxCode5
				LocalPSTaxRate= TaxTableRel.TaxCode5Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML+=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			if(TaxTableRel.TaxCode6 entered)
				LocalTaxSequence = 6
				LocalPSTaxCode= TaxTableRel.TaxCode6
				LocalPSTaxRate= TaxTableRel.TaxCode6Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML+=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			if(TaxTableRel.TaxCode7 entered)
				LocalTaxSequence = 7
				LocalPSTaxCode= TaxTableRel.TaxCode7
				LocalPSTaxRate= TaxTableRel.TaxCode7Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML+=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			if(TaxTableRel.TaxCode8 entered)
				LocalTaxSequence = 8
				LocalPSTaxCode= TaxTableRel.TaxCode8
				LocalPSTaxRate= TaxTableRel.TaxCode8Rate * 100
				ProjectContractInvoiceLineTaxTableTaxXML+=template.IONInvoice_ProjectContractInvoiceLine_TaxTable_Tax_XML_ST document for this instance
			return ProjectContractInvoiceLineTaxTableTaxXML	
#endif	

		
#ifdef module ar				
		DerivedReceivableInvoice is a DerivedField	
			type is like ReceivableInvoice
			return first ProjectContractInvoice.ReceivableInvoiceRel.ReceivableInvoice	
#endif						
    Conditions
    	IsRevenueRecognitionCombined
    		restricted
    		when (ProjectContract.RevenueRecognition.Combined)
    	IsRevenueRecognitionSeparate
    		restricted
    		when (ProjectContract.RevenueRecognition.Separate)
    	InvoiceCreated
    		restricted
    		when (ProjectContractInvoice.Status.Created
			and   ProjectContractInvoice.ApprovalStatus != 1  
			and   ProjectContractInvoice.ApprovalStatus != 2  		
    		and  (IsBilling
    		or    ProjectContractInvoice.InvoiceType.Retainer))
		BillInAdvanceAllowed
			restricted
    		when (ProjectContractInvoice.Status.Created
			and   ProjectContractInvoice.ApprovalStatus != 1  
			and   ProjectContractInvoice.ApprovalStatus != 2  		
			and   ProjectContractInvoice.InvoiceType.Bill




			and   ProjectContractAdvance not entered
			and   AppliedProjectContractAdvance not entered
			and   ProjectFundingSource.IsExternalFund)
		EditBillInAdvanceAllowed
			restricted
			when (ProjectContractAdvance entered
			and   ProjectContractAdvance.Status.Created
			and  !CappedTaxLinesExist
			and  !CappedTotalTaxLinesExist)
    	OrdinaryInvoiceCreated
    		restricted
    		when (InvoiceCreated
    		and   !IsAllowance
    		and   !IsRetainage
    		and   !LineType.Tax
    		and   ProjectContractRetainer not entered
    		and   FeeCode not entered
    		and   ProjectContractAdvance not entered
    		and   AppliedProjectContractAdvance not entered)
		EligibleToTransfer
			restricted
			when (OrdinaryInvoiceCreated
			and   GLTransactionDetail entered
			and   GLTransactionDetail.UnProcessedCapitalized
			and   GLTransactionDetail.UnProcessedLaborDistribution
			and   GLTransactionDetail.UnProcessedIndirectBurden
			and  !GLTransactionDetail.IsSystemPR
			and  !GLTransactionDetail.IsNotValidGeneralLedgerEvent)
    	AllowanceInvoiceCreated
    		restricted
    		when (InvoiceCreated
    		and   IsAllowance
			and  !ProjectContractInvoice.ProjectContractInvoiceAppliedRetainersRel exists)
    	AdvanceInvoiceCreated
    		restricted
    		when (InvoiceCreated
    		and   ProjectContractAdvance entered)
    	AppliedAdvanceInvoiceCreated
    		restricted
    		when (InvoiceCreated
    		and   AppliedProjectContractAdvance entered)
    	RetainageInvoiceCreated
    		restricted
    		when (InvoiceCreated
    		and   IsRetainage)
    	RetainerInvoiceCreated
    		restricted
    		when (InvoiceCreated
    		and   ProjectContractRetainer entered)
		ReapplyRetainerOk
			restricted
			when (IsBilling
    		and   ProjectContractInvoice.Status.Created
			and   ProjectContractInvoice.ApprovalStatus != 1  
			and   ProjectContractInvoice.ApprovalStatus != 2
			and  (ProjectContractInvoice.InvoiceTotalAmount > 0
			or    ProjectContractInvoice.ProjectContractInvoiceAllowanceRel exists)
			and   ProjectContractRetainer entered
			and   ProjectContractRetainer.OkToReapply)
		RetainerAmountAvailable
			restricted
			when (ProjectContractRetainer.Amount + ProjectContractRetainer.TotalAdjustmentAmount > ProjectContractRetainer.AppliedAmount)
		RetainerEntered
			restricted
			when (ProjectContractRetainer entered)
    	IsBilling
    		restricted
    		when (ProjectContractInvoice.InvoiceType.Bill
    		or    ProjectContractInvoice.InvoiceType.Retainage)
    	IsBillingNotRetainer
    		restricted
    		when (ProjectContractInvoice.InvoiceType.Bill
    		and   ProjectContractRetainer not entered)
    	RevenueInvoiceCreated
    		restricted
    		when (ProjectContractInvoice.Status.Created
			and   ProjectContractInvoice.ApprovalStatus != 1 
			and   ProjectContractInvoice.ApprovalStatus != 2   		
    		and   IsRevenue)
    	OrdinaryRevenueInvoiceCreated
    		restricted
    		when (RevenueInvoiceCreated
    		and   !IsAllowance
    		and   FeeCode not entered)
    	AllowanceRevenueInvoiceCreated
    		restricted
    		when (RevenueInvoiceCreated
    		and   IsAllowance)
    	IsRevenue
    		restricted
    		when (ProjectContractInvoice.InvoiceType.RevenueRecognition)
    	IsAllowanceOrRetainageOrAdvance
    		restricted
    		when (IsAllowance
    		or    IsRetainage
    		or    ProjectContractAdvance entered
    		or    AppliedProjectContractAdvance entered)
		HasProjectContractInvoiceLineComment
			restricted
			when (ProjectContractInvoiceLineComment set exists)
		HasTax
			restricted
			when (ProjectContractInvoice.HasTax)
		HasRetainage
			restricted
			when (ProjectContractInvoice.ProjectContractInvoiceRetainageRel exists)
		HasBillableRate
			restricted
			when (any ProjectContractInvoice.ProjectContractInvoiceLine set.BillableRate entered)
		HasFees
			restricted
			when (ProjectContractInvoice.ProjectContractInvoiceFeesRel exists)
		HasRetainer
			restricted
			when (ProjectContractRetainer entered)
		BuyerTaxCodeEntered
			restricted
			when (BuyerTaxCode entered)
		SingleTaxOnly
			restricted
			when (BuyerTaxCode entered
			and   ProjectContractInvoiceTaxLine set not exists)
		TaxLinesExist
			restricted
			when (BuyerTaxCode entered
			and   ProjectContractInvoiceTaxLine set exists)
		CappedTaxLinesExist
			restricted
			when (TaxLinesExist
			and   any ProjectContractInvoiceTaxLine set.TaxableAmount < Amount)
		CappedTotalTaxLinesExist
			restricted
			when (ProjectFundingSource.TaxCalculationOption.Total
			and   ProjectInvoiceTaxSummaryOTORel exists
			and   ProjectInvoiceTaxSummaryOTORel.ProjectInvoiceTaxSummaryLine set exists
			and   any ProjectInvoiceTaxSummaryOTORel.ProjectInvoiceTaxSummaryLine set.TaxableAmount < ProjectInvoiceTaxSummaryOTORel.TaxableAmount)
		IsCreatedInvoiceStandardOrPassThrough
			restricted
			when (ProjectContractInvoice.Status.Created
			and   ProjectContractInvoice.ApprovalStatus != 1
			and   ProjectContractInvoice.ApprovalStatus != 2
			and   ProjectContractInvoice.InvoiceType.Bill			
			and  !CappedTaxLinesExist
			and  !CappedTotalTaxLinesExist
			and  (LineType.Standard
			or    LineType.PassThrough))
		OkToRevert
			restricted
			when (IsCreatedInvoiceStandardOrPassThrough
			and   Adjusted)
		RevenueAdjusted
			restricted
			when (Adjusted
			and  !Deferred
			and   Amount != OriginalAmount)
		GLTransactionDetailEntered
			restricted
			when (GLTransactionDetail entered)

    Relations
		ProjectPeriodOfPerformanceRel
			one-to-many relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= GLTransactionDetail.FinanceCodeBlock.Project
		ProjectBillingOverrideRel
			one-to-one relation to ProjectBillingOverride
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= Project
				related.ProjectCodeBlock		= LocalProjectCodeBlock
		ReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= FinanceEnterpriseGroup.EnterpriseChart
				related.GeneralLedgerChartAccount	= LocalProjectCodeBlock.GeneralLedgerChartAccount
		FinanceDimension1HierarchyRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
				related.FinanceDimension1			= LocalProjectCodeBlock.FinanceDimension1
		FinanceDimension3HierarchyRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= FinanceEnterpriseGroup.EnterpriseDim3Structure
				related.FinanceDimension3			= LocalProjectCodeBlock.FinanceDimension3
		FinanceDimension4HierarchyRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= FinanceEnterpriseGroup.EnterpriseDim4Structure
				related.FinanceDimension4			= LocalProjectCodeBlock.FinanceDimension4
		FinanceDimension5HierarchyRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= FinanceEnterpriseGroup.EnterpriseDim5Structure
				related.FinanceDimension5			= LocalProjectCodeBlock.FinanceDimension5
		FinanceDimension6HierarchyRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= FinanceEnterpriseGroup.EnterpriseDim6Structure
				related.FinanceDimension6			= LocalProjectCodeBlock.FinanceDimension6
		FinanceDimension7HierarchyRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= FinanceEnterpriseGroup.EnterpriseDim7Structure
				related.FinanceDimension7			= LocalProjectCodeBlock.FinanceDimension7
		FinanceDimension8HierarchyRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= FinanceEnterpriseGroup.EnterpriseDim8Structure
				related.FinanceDimension8			= LocalProjectCodeBlock.FinanceDimension8
		FinanceDimension9HierarchyRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= FinanceEnterpriseGroup.EnterpriseDim9Structure
				related.FinanceDimension9			= LocalProjectCodeBlock.FinanceDimension9
		FinanceDimension10HierarchyRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= FinanceEnterpriseGroup.EnterpriseDim10Structure
				related.FinanceDimension10			= LocalProjectCodeBlock.FinanceDimension10
		ProjectContractFeeRel
			one-to-one relation to ProjectContractFee
			Field Mapping uses ByDateDescendingActive
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.ProjectFeeCode			= FeeCode
				related.EffectiveDate			<= GLTransactionDetail.TransactionDate
		RetainerLineRel
			one-to-many relation to ProjectContractInvoiceRetainerLine
			Field Mapping uses ByProjectContractRetainer
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.ProjectContract			= ProjectContract
    			related.FinanceDimension2		= FinanceDimension2
    			related.ProjectContractInvoice	= ProjectContractInvoice
    			related.ProjectContractRetainer	= ProjectContractRetainer
    		Instance Selection
    			where (related.RetainerLine = SequenceNumber
    			or     related.RetainerLine not entered)
		ProjectContractInvoiceRetainerLineRel
			one-to-one relation to ProjectContractInvoiceRetainerLine
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.ProjectContract			= ProjectContract
    			related.FinanceDimension2		= FinanceDimension2
    			related.ProjectContractInvoice	= ProjectContractInvoice
    			related.SequenceNumber			= LocalSequenceNumber
    			related.ProjectContractRetainer	= LocalRetainer
		InvoiceTaxLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByBuyerTaxCode
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.ProjectContract			= ProjectContract
    			related.FinanceDimension2		= FinanceDimension2
    			related.ProjectContractInvoice	= ProjectContractInvoice
    			related.BuyerTaxCode			= BuyerTaxCode
    		Instance Selection
    			where (related.SequenceNumber != SequenceNumber
    			and   (related.LineType.Standard
    			or     related.LineType.Fee
    			or     related.LineType.Allowance
				or     related.LineType.PassThrough
				or     related.LineType.Milestone))
		NonFeeInvoiceTaxLineRel
			one-to-many relation using InvoiceTaxLineRel
			Instance Selection
				where (!related.LineType.Fee)
		FeeLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.ProjectContract			= ProjectContract
    			related.FinanceDimension2		= FinanceDimension2
    			related.ProjectContractInvoice	= ProjectContractInvoice
    		Instance Selection
    			where (related.SequenceNumber != SequenceNumber
    			and    related.LineType.Fee
    			and    related.GLTransactionDetail = GLTransactionDetail)
		ProjectContractFeeTierRel
			one-to-many relation to ProjectContractFeeTier
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.ProjectFeeCode			= LocalFeeCode
				related.EffectiveDate			= LocalEffectiveDate
		ProjectContractRunGroupRel
			one-to-one relation to ProjectContractRunGroup
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
          	    related.ProjectContract			= LocalProjectContract
				related.ProjectContractRunGroup = LocalRunGroup
		ProjectContractInvoiceRel
			one-to-one relation to ProjectContractInvoice
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
          	    related.ProjectContract			= LocalProjectContract
				related.FinanceDimension2		= LocalFinanceDimension2
				related.ProjectContractInvoice	= LocalProjectContractInvoice
		ProjectContractInvoiceRetainerLineOTMRel
			one-to-many relation to ProjectContractInvoiceRetainerLine
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
    			related.ProjectContract			= LocalProjectContract
    			related.FinanceDimension2		= LocalFinanceDimension2
    			related.ProjectContractInvoice	= LocalProjectContractInvoice
		RunGroupInvoicesRel
			one-to-many relation to ProjectContractInvoice
            Field Mapping uses ByRunGroup
            	related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
          	    related.ProjectContract			= LocalProjectContract
				related.RunGroup				= LocalRunGroup 
		ShadowPostingDescendantRel
			one-to-one relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.SummaryProject   	   = ProjectContract
				related.Project				   = LocalProject
		GenerateInvoiceFormatRel is a ProjectContractInvoice set
			Instance Selection
				where (related.ProjectFundingSource.IsExternalFund)
		ProjectContractInvoiceSummaryRel
			one-to-many relation to ProjectContractInvoiceSummary
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice  = ProjectContractInvoice
		GLTransactionDetailRel 
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.JournalizeGroup			= ProjectContractInvoice.JournalizeGroup
		ProjectContractInvoiceBalanceRel
			one-to-many relation to ProjectContractInvoiceBalance
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
			Instance Selection
				where (related.FinanceCodeBlock	= LocalFinanceCodeBlock)
		ProjectInvoiceTaxSummaryOTORel
			one-to-one relation to ProjectInvoiceTaxSummary
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = BuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = TaxCode
				related.TaxSummaryKey.ProductTaxCategory = ProductTaxCategory
				related.TaxSummaryKey.BuyerAddressCode	 = AddressCode
				related.TaxSummaryKey.ServiceAddressCode = ServiceAddressCode
		ProjectInvoiceTaxSummaryLineOTORel
			one-to-one relation to ProjectInvoiceTaxSummaryLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = BuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = TaxCode
				related.TaxSummaryKey.ProductTaxCategory = ProductTaxCategory
				related.TaxSummaryKey.BuyerAddressCode	 = AddressCode
				related.TaxSummaryKey.ServiceAddressCode = ServiceAddressCode
				related.TaxCounter				= LocalTaxCounter
		ProjectInvoiceTaxSummaryAdvanceRel
			one-to-many relation to ProjectInvoiceTaxSummary
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = LocalBuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = blank
				related.TaxSummaryKey.ProductTaxCategory = blank
				related.TaxSummaryKey.BuyerAddressCode	 = LocalAddressCode
				related.TaxSummaryKey.ServiceAddressCode = blank
		ProjectInvoiceTaxSummaryLineAdvanceRel
			one-to-many relation to ProjectInvoiceTaxSummaryLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.TaxSummaryKey.BuyerTaxCode		 = LocalBuyerTaxCode
				related.TaxSummaryKey.ServiceTaxCode	 = blank
				related.TaxSummaryKey.ProductTaxCategory = blank
				related.TaxSummaryKey.BuyerAddressCode	 = LocalAddressCode
				related.TaxSummaryKey.ServiceAddressCode = blank
				related.TaxCounter				= LocalTaxCounter
		ProjectContractInvoiceTotalTaxLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByBuyerTaxCode
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.BuyerTaxCode			= BuyerTaxCode
			Instance Selection
				where (related.TaxCode	 		  = TaxCode
				and    related.ProductTaxCategory = ProductTaxCategory
				and    related.AddressCode	 	  = AddressCode
				and    related.ServiceAddressCode = ServiceAddressCode
				and    related.LineType.Tax)
		ProjectContractInvoiceTotalTaxLineDetailRel
			one-to-many relation to ProjectContractInvoiceTaxLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.SequenceNumber			= first ProjectContractInvoiceTotalTaxLineRel.SequenceNumber
		ProjectContractInvoiceTotalAdvanceTaxLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByBuyerTaxCode
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.BuyerTaxCode			= LocalBuyerTaxCode
			Instance Selection
				where (related.TaxCode	 		  = blank
				and    related.ProductTaxCategory = blank
				and    related.AddressCode	 	  = LocalAddressCode
				and    related.ServiceAddressCode = blank
				and    related.LineType.Tax)
		ProjectContractInvoiceTotalAdvanceTaxLineDetailRel
			one-to-one relation to ProjectContractInvoiceTaxLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= ProjectContract
				related.FinanceDimension2		= FinanceDimension2
				related.ProjectContractInvoice	= ProjectContractInvoice
				related.SequenceNumber			= first ProjectContractInvoiceTotalAdvanceTaxLineRel.SequenceNumber
				related.LineNumber				= LocalTaxCounter
#ifdef module tx
		TaxTableRel
			one-to-many relation to TaxTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TaxCode					= BuyerTaxCode
#endif

#ifdef module integration				
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
#endif
		
			
#ifdef module tx
		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TaxEntity				= LocalTaxEntity
				related.TaxCode					= LocalBuyerTaxCode
 		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = LocalTaxEntity.TaxAttributeCode
#endif
    Sets
    	ByProject
    		Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				FinanceDimension2
				ProjectContractInvoice
				Project
				SequenceNumber
				
		ByProjectContractRetainer
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				FinanceDimension2
				ProjectContractInvoice
				ProjectContractRetainer
				SequenceNumber

		ByFeeCodeAndTransaction
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				Project
				FeeCode
				GLTransactionDetail
				FinanceDimension2
				ProjectContractInvoice
				SequenceNumber

		ByBuyerTaxCode
			Sort Order
				FinanceEnterpriseGroup
				ProjectContract
				FinanceDimension2
				ProjectContractInvoice
				BuyerTaxCode
				SequenceNumber
			Instance Selection
				where (BuyerTaxCodeEntered)
				
    Field Rules
    	SequenceNumber
    		autosequence
    			minimize contention
    	LineType
			if (FeeCode entered)
				LineType = 2
			else
			if (IsAllowance)
				LineType = 3
			else
			if (IsRetainage)
				LineType = 4
			else
			if (BillingMethod.PassThrough)
				LineType = 5
			else
			if (ProjectContractAdvance entered)
				LineType = 6
			else
			if (AppliedProjectContractAdvance entered)
				LineType = 7
			else
			if (ProjectContractRetainer entered)
				LineType = 8
			else
			if (ProjectContractMilestone entered)
				LineType = 9
			else
			if (GLTransactionDetail entered)
				LineType = 1

	Delete Rules
		initialize LocalInvoiceFees
		initialize LocalInvoicePassThrough
		initialize LocalInvoiceAllowance
		initialize LocalInvoiceRetainage
		initialize LocalInvoiceAdvance
		initialize LocalInvoiceRetainer
		LocalInvoiceTax = DerivedTaxAmount
		if (ProjectInvoiceType entered)
			LocalInvoiceType = ProjectInvoiceType
		if (ProjectContractRetainer not entered)
			if  (LocalInvoiceType.Retainage
			and !LocalMassDelete)
				invoke FastUpdate ProjectContractInvoice
					invoked.TotalInvoiceAmount -= Amount
					invoked.TotalTax		   -= TaxAmount
				invoke UpdateTotalBilledAmount ProjectFundingSource
					invoked.BilledRetainage = Amount
				invoke UpdateTotalBilledAmount ProjectContract
					invoked.BilledRetainage = Amount

			if (LocalInvoiceType.Bill)
#ifndef property federal			
				if (!LocalMassDelete
				and !BillingMethod.PassThrough
				and !LineType.AdvanceBill
				and !LineType.AppliedAdvance
				and !LineType.Retainage
				and !LineType.Tax)
					if (ProjectContractInvoice.ProjectContractInvoiceAllowanceRel exists)				
						LocalAmount = Amount * ProjectFundingSource.AllowancePercent
						round LocalAmount to nearest ProjectContract.DerivedRoundTo
						LocalAllowanceAmount = ProjectContractInvoice.first ProjectContractInvoiceAllowanceRel.Amount
						if (LocalAmount entered)
							OldAmount = ProjectContractInvoice.first ProjectContractInvoiceAllowanceRel.Amount
							LocalInvoiceAllowance += LocalAmount
							invoke Update ProjectContractInvoice.first ProjectContractInvoiceAllowanceRel
								invoked.Amount			-= LocalAmount
								invoked.BillableAmount	-= LocalAmount
								invoked.OldAmount		 = OldAmount
							invoke UpdateTotalBilledAmount ProjectFundingSource
								invoked.BilledAllowance = LocalAmount * -1
							invoke UpdateTotalBilledAmount ProjectContract
								invoked.BilledAllowance = LocalAmount * -1
#endif
				if (!LocalMassDelete
				and RetainedAmount entered)
					if (ProjectContractInvoice.ProjectContractInvoiceRetainageRel exists)
						invoke Update ProjectContractInvoice.first ProjectContractInvoiceRetainageRel
							invoked.Amount			+= RetainedAmount
						invoke UpdateTotalBilledAmount ProjectFundingSource
							invoked.BilledRetainage = RetainedAmount * -1
						invoke UpdateTotalBilledAmount ProjectContract
							invoked.BilledRetainage = RetainedAmount * -1

				if (!LocalMassDelete)
					invoke UpdateTotalBilledAmount ProjectFundingSource
						if (IsAllowance)
							invoked.BilledAllowance = Amount * -1
						else
						if (IsRetainage)
							invoked.BilledRetainage = Amount
						else
						if (BillingMethod.PassThrough)
							invoked.BilledPassThrough = Amount * -1
						else
							invoked.BilledAmount = Amount * -1
							if (!Deferred)
								invoked.AdjustmentAmount = AdjustmentAmount * -1
						if (FeeCode entered)
							invoked.BilledFees = Amount * -1
					invoke UpdateTotalBilledAmount ProjectContract
						if (IsAllowance)
							invoked.BilledAllowance = Amount * -1
						else
						if (IsRetainage)
							invoked.BilledRetainage = Amount
						else
						if (BillingMethod.PassThrough)
							invoked.BilledPassThrough = Amount * -1
						else
							invoked.BilledAmount = Amount * -1
						if (FeeCode entered)
							invoked.BilledFees = Amount * -1
					if (!BillingMethod.PassThrough)
						invoke UpdateTotalBilled Project
							invoked.BilledAmount = Amount * -1
				if ((not GLTransactionDetail.Billed.Unprocessed
				and  not Hold)
				or  (not GLTransactionDetail.Billed.Hold
				and  Hold))
					if (GLTransactionDetail.ProjectContractInvoiceBillRel not exists)
						invoke UpdateBilledStatus GLTransactionDetail
							if (Hold)
								invoked.PrmBilled = 5
							else							
								invoked.PrmBilled = 0
						invoke Purge GLTransactionDetail.ProjectContractPartialBillRel
					else
					if ((GLTransactionDetail.first ProjectContractInvoiceBillRel.ProjectContractInvoice.RunGroup != ProjectContractInvoice.RunGroup
					or   MinimumNotMet)
					and GLTransactionDetail.ProjectContractPartialBillRel not exists)
						invoke Create ProjectContractPartialTransaction
							fill in fields from this instance
			else
			if (LocalInvoiceType.RevenueRecognition)
#ifndef property federal
				if (!LocalMassDelete
				and !BillingMethod.PassThrough
				and !LineType.AdvanceBill
				and !LineType.AppliedAdvance)
					if (ProjectContractInvoice.ProjectContractInvoiceAllowanceRel exists)				
						LocalAmount = Amount * ProjectFundingSource.AllowancePercent
						round LocalAmount to nearest ProjectContract.DerivedRoundTo
						LocalAllowanceAmount = ProjectContractInvoice.first ProjectContractInvoiceAllowanceRel.Amount					
						if ((LocalAllowanceAmount > 0
						and  LocalAmount > LocalAllowanceAmount)
						or  (LocalAllowanceAmount < 0
						and  LocalAmount < LocalAllowanceAmount)
						or   LocalAllowanceAmount = 0)
							LocalAmount = LocalAllowanceAmount
						if (LocalAmount entered)
							invoke Update ProjectContractInvoice.first ProjectContractInvoiceAllowanceRel
								invoked.Amount			-= LocalAmount
								invoked.BillableAmount	-= LocalAmount
							invoke UpdateTotalRecognizedAmount ProjectFundingSource
								invoked.RecognizedAllowance = LocalAmount * -1
							invoke UpdateTotalRecognizedAmount ProjectContract
								invoked.RecognizedAllowance = LocalAmount * -1
#endif
				if (!LocalMassDelete)
					invoke UpdateTotalRecognizedAmount ProjectFundingSource
						if (IsAllowance)
							invoked.RecognizedAllowance = Amount * -1
						else
						if (BillingMethod.PassThrough)
							invoked.RecognizedPassThrough = Amount * -1
						else
							invoked.RecognizedAmount = Amount * -1					
					invoke UpdateTotalRecognizedAmount ProjectContract
						if (IsAllowance)
							invoked.RecognizedAllowance = Amount * -1
						else
						if (BillingMethod.PassThrough)
							invoked.RecognizedPassThrough = Amount * -1
						else
							invoked.RecognizedAmount = Amount * -1					
					if (!BillingMethod.PassThrough)
						invoke UpdateTotalRecognized Project
							invoked.RecognizedAmount = Amount * -1
				if ((not GLTransactionDetail.RevenueRecognized.Unprocessed
				and  not Hold)
				or  (not GLTransactionDetail.RevenueRecognized.Hold
				and  Hold))
					if (GLTransactionDetail.ProjectContractInvoiceRevenueRel not exists)				
						invoke UpdateRecognizedStatus GLTransactionDetail
							if (Hold)
								invoked.PrmRecognized = 3
							else
								invoked.PrmRecognized = 0
						invoke Purge GLTransactionDetail.ProjectContractPartialRevenueRel
					else
					if (GLTransactionDetail.first ProjectContractInvoiceRevenueRel.ProjectContractInvoice.RunGroup != ProjectContractInvoice.RunGroup
					and GLTransactionDetail.ProjectContractPartialRevenueRel not exists)
						invoke Create ProjectContractPartialTransaction
							fill in fields from this instance
							invoked.RecordType = 1
					
		if (FromPartial
		and GLTransactionDetail.ProjectContractPartialTransaction set not exists)
			if ((LocalInvoiceType.RevenueRecognition
			and  not GLTransactionDetail.RevenueRecognized.Unprocessed)
			or  (LocalInvoiceType.Bill
			and  not GLTransactionDetail.Billed.Unprocessed))
				invoke Create ProjectContractPartialTransaction
					fill in fields from this instance
					if (LocalInvoiceType.RevenueRecognition)
						invoked.RecordType = 1
		invoke UpdateStatus ProjectContractMilestone
			if (Hold)
				invoked.PrmStatus = 3
			else
				invoked.PrmStatus = 1
		if (LocalInvoiceType.Retainer)
			invoke UpdateStatus ProjectContractRetainer
				invoked.PrmStatus = 1
		else
		if (ProjectContractRetainer entered)
			if (Amount entered)
				invoke UpdateAppliedAmount ProjectContractRetainer
					invoked.PrmAppliedAmount = Amount
			invoke Delete RetainerLineRel
		else
		if (LocalRetainerLinesExist
		or !LocalMassDelete)
			invoke RemoveAppliedAmount ProjectContractInvoiceRetainerLine set
		invoke Delete ProjectContractAdvance
		if (AppliedProjectContractAdvance entered)
			invoke Update AppliedProjectContractAdvance
				invoked.Status = 1
		if (!LocalMassDelete)
			invoke Delete ProjectContractInvoiceSummaryRel
			invoke InitializeInvoiceFile ProjectContractInvoice
			if  (BuyerTaxCode entered
			and !LineType.Tax)
				if (ProjectFundingSource.TaxCalculationOption.Total)
					initialize LocalTotalRemovedTax
					LocalRemovedTaxable = Amount
					LocalBaseTaxable = ProjectInvoiceTaxSummaryOTORel.TaxableAmount
					if (ProjectContractInvoiceTotalTaxLineDetailRel exists)
						for each ProjectContractInvoiceTotalTaxLineDetailRel
							LocalTaxCounter = each.LineNumber
							if (each.TaxableAmount = LocalBaseTaxable)
								LocalRemovedLineTax = LocalRemovedTaxable * each.TaxRate
								round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
								LocalRemovedLineTaxable = LocalRemovedTaxable
							else
							if (LocalRemovedTaxable <= LocalBaseTaxable - each.TaxableAmount)
								LocalRemovedLineTaxable = 0
								LocalRemovedLineTax = 0
							else
								LocalRemovedLineTaxable = LocalRemovedTaxable - (LocalBaseTaxable - each.TaxableAmount)
								LocalRemovedLineTax = LocalRemovedLineTaxable * each.TaxRate
								round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
							LocalTotalRemovedTax += LocalRemovedLineTax
							invoke Update ProjectInvoiceTaxSummaryLineOTORel
								invoked.TaxableAmount -= LocalRemovedLineTaxable
								invoked.TaxAmount     -= LocalRemovedLineTax
							invoke Update each
								invoked.TaxableAmount -= LocalRemovedLineTaxable
								invoked.TaxAmount     -= LocalRemovedLineTax
					if (LocalTotalRemovedTax entered)
						LocalTaxAmount = LocalTotalRemovedTax
					else
						LocalTaxAmount = Amount * ProjectInvoiceTaxSummaryOTORel.TaxRate
						round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
					invoke Update ProjectInvoiceTaxSummaryOTORel
						invoked.TaxableAmount -= LocalRemovedTaxable
						invoked.TaxAmount	  -= LocalTaxAmount
					invoke Update first ProjectContractInvoiceTotalTaxLineRel
						invoked.TaxAmount	  -= LocalTaxAmount
				else
					invoke Update ProjectInvoiceTaxSummaryOTORel
						invoked.TaxableAmount -= Amount
						invoked.TaxAmount	  -= TaxAmount
					for each ProjectContractInvoiceTaxLine set
						LocalTaxCounter = each.LineNumber
						invoke Update ProjectInvoiceTaxSummaryLineOTORel
							invoked.TaxableAmount -= each.TaxableAmount
							invoked.TaxAmount     -= each.TaxAmount
		if (!LocalMassDelete)
			if (LocalInvoiceType.RevenueRecognition
			or  LocalInvoiceType.Bill)
				LocalInvoiceAmount = Amount + LocalInvoiceAllowance
				if (FeeCode entered)
					LocalInvoiceFees = Amount
				if (BillingMethod.PassThrough)
					LocalInvoicePassThrough = Amount
				if (IsAllowance)
					LocalInvoiceAllowance += Amount
				if (IsRetainage)
					LocalInvoiceRetainage = Amount * -1
				if (AppliedProjectContractAdvance entered)
					LocalInvoiceAdvance = Amount
				if (ProjectContractAdvance entered)
					LocalInvoiceAdvance += Amount
				if (ProjectContractRetainer entered)
					LocalInvoiceRetainer = Amount
				LocalInvoiceRetainage += RetainedAmount
				LocalInvoiceAmount -= RetainedAmount
				invoke FastUpdate ProjectContractInvoice
					invoked.TotalInvoiceAmount	-= LocalInvoiceAmount
					invoked.TotalUnits			-= UnitsAmount
					invoked.TotalFees			-= LocalInvoiceFees
					invoked.TotalRetainer		-= LocalInvoiceRetainer
					invoked.TotalAllowance		-= LocalInvoiceAllowance
					invoked.TotalRetainage		-= LocalInvoiceRetainage
					invoked.TotalAdvance		-= LocalInvoiceAdvance
					invoked.TotalPassThrough	-= LocalInvoicePassThrough
					invoked.TotalTax			-= LocalInvoiceTax
					if (!Deferred
					and !IsAllowance
					and !IsRetainage
					and !BillingMethod.PassThrough
					and  LocalInvoiceType.Bill)
						invoked.TotalAdjustment	-= AdjustmentAmount

	Actions
		Create is a Create Action
			restricted
			Exit Rules
				if (ProjectContractRetainer not entered)
					if (IsBilling)
						if (!BillingMethod.PassThrough)
							invoke UpdateTotalBilled Project
								invoked.BilledAmount = Amount
						if (GLTransactionDetail.Billed.Unprocessed)
							invoke UpdateBilledStatus GLTransactionDetail
								invoked.PrmBilled = 1
					else
						if (!BillingMethod.PassThrough)
							invoke UpdateTotalRecognized Project
								invoked.RecognizedAmount = Amount
						if (GLTransactionDetail.RevenueRecognized.Unprocessed)
							invoke UpdateRecognizedStatus GLTransactionDetail
								invoked.PrmRecognized = 2
						if (GLTransactionDetail.Billed.Invoiced)
							invoke UpdateBilledStatus GLTransactionDetail
								invoked.PrmBilled = 3					

		DeleteInvoiceLines is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmProjectContract			is a ProjectContract
				PrmFinanceDimension2		is a FinanceDimension2
				PrmProjectFundingSource		is a ProjectFundingSource
				PrmProjectContractInvoice	is a ProjectContractInvoice
				PrmMinimumNotMet			is Boolean
			Local Fields
				LocalRevenueAmount			is like InternationalAmount
				LocalInvoiceAmount			is like InternationalAmount
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    ProjectContract			= PrmProjectContract
				and    FinanceDimension2		= PrmFinanceDimension2
				and    ProjectContractInvoice	= PrmProjectContractInvoice)
			Sort Order is ByProject
			Action Rules
				Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
						LocalProjectContract		= PrmProjectContract
						LocalRunGroup				= PrmProjectContractInvoice.RunGroup
						LocalFinanceDimension2		= PrmFinanceDimension2
						LocalProjectContractInvoice	= PrmProjectContractInvoice
						if (ProjectContractInvoiceRetainerLineOTMRel exists)
							LocalRetainerLinesExist = true
					Exit Rules
						invoke Delete PrmProjectContractInvoice
						if (RunGroupInvoicesRel not exists)
							invoke Delete ProjectContractRunGroupRel
				Project Set Rules
					Entrance Rules
						initialize LocalRevenueAmount
						initialize LocalInvoiceAmount
					Exit Rules
						if (LocalRevenueAmount entered)
							invoke UpdateTotalRecognized Project
								invoked.RecognizedAmount = LocalRevenueAmount * -1
						if (LocalInvoiceAmount entered)
							invoke UpdateTotalBilled Project
								invoked.BilledAmount = LocalInvoiceAmount * -1
				Instance Rules
					MinimumNotMet = PrmMinimumNotMet
					if (!BillingMethod.PassThrough)
						if (IsRevenue)
							LocalRevenueAmount += Amount
						else
						if (IsBillingNotRetainer)
							LocalInvoiceAmount += Amount
					LocalInvoiceType = ProjectContractInvoice.InvoiceType
					LocalMassDelete  = true
					invoke Delete

		Delete is a Delete Action
			restricted
			Parameters
				PlaceOnHold		is Boolean
			Action Rules
				Hold = PlaceOnHold
			Exit Rules
				if (!LocalMassDelete)
					if (ProjectContractInvoice.ProjectContractInvoiceNonAllowanceRel not exists)
						invoke Delete ProjectContractInvoice

		UpdateSummaryKey is an Update Action
			restricted
			bypass field rules
			
		Update is an Update Action
			restricted
			Action Rules
				if ((ProjectContractRetainer entered
				or   ProjectContractAdvance entered
				or   IsAllowance
				or   Edited)
				and  DerivedTaxRate entered
				and  Amount changed)
					LocalAmount = Amount * DerivedTaxRate
					round LocalAmount to nearest ProjectContract.DerivedRoundTo
					if (OldAmount entered)
						LocalDifference = OldAmount - Amount
					else
						LocalDifference	= old Amount - Amount
					if (RevertLine)
						LocalTaxDifference = old TaxAmount - TaxAmount
					else
						LocalTaxDifference = TaxAmount - LocalAmount
					if (ProjectFundingSource.TaxCalculationOption.Total)
						if (!RevertToTaxable)
							initialize LocalTotalRemovedTax
							LocalRemovedTaxable = LocalDifference
							LocalBaseTaxable = ProjectInvoiceTaxSummaryOTORel.TaxableAmount
							if (ProjectContractInvoiceTotalTaxLineDetailRel exists)
								for each ProjectContractInvoiceTotalTaxLineDetailRel
									LocalTaxCounter = each.LineNumber
									if (each.TaxableAmount = LocalBaseTaxable)
										LocalRemovedLineTax = LocalRemovedTaxable * each.TaxRate
										round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
										LocalRemovedLineTaxable = LocalRemovedTaxable
									else
									if (LocalRemovedTaxable <= LocalBaseTaxable - each.TaxableAmount)
										LocalRemovedLineTaxable = 0
										LocalRemovedLineTax = 0
									else
										LocalRemovedLineTaxable = LocalRemovedTaxable - (LocalBaseTaxable - each.TaxableAmount)
										LocalRemovedLineTax = LocalRemovedLineTaxable * each.TaxRate
										round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
									LocalTotalRemovedTax += LocalRemovedLineTax
									invoke Update ProjectInvoiceTaxSummaryLineOTORel
										invoked.TaxableAmount -= LocalRemovedLineTaxable
										invoked.TaxAmount     -= LocalRemovedLineTax
									invoke Update each
										invoked.TaxableAmount -= LocalRemovedLineTaxable
										invoked.TaxAmount     -= LocalRemovedLineTax
							if (LocalTotalRemovedTax entered)
								LocalTaxAmount = LocalTotalRemovedTax
							else
								LocalTaxAmount = LocalDifference * ProjectInvoiceTaxSummaryOTORel.TaxRate
								round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount -= LocalRemovedTaxable
								invoked.TaxAmount	  -= LocalTaxAmount
							invoke Update first ProjectContractInvoiceTotalTaxLineRel
								invoked.TaxAmount	  -= LocalTaxAmount
							invoke FastUpdate ProjectContractInvoice
								invoked.TotalTax 	  -= LocalTaxAmount
					else
						if (!RevertToTaxable)						
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount -= LocalDifference
								invoked.TaxAmount     -= LocalTaxDifference
							TaxAmount = LocalAmount
						if (ProjectContractInvoiceTaxLine set exists)
							initialize LocalTotal
							for each ProjectContractInvoiceTaxLine set
								LocalAmount = Amount * each.TaxRate
								round LocalAmount to nearest ProjectContract.DerivedRoundTo
								LocalTotal += LocalAmount
								LocalDifference		= each.TaxableAmount - Amount
								LocalTaxDifference	= each.TaxAmount - LocalAmount
								LocalTaxCounter		= each.LineNumber
								invoke Update each
									invoked.TaxableAmount	= Amount
									invoked.TaxAmount		= LocalAmount
								if (!RevertToTaxable)
									invoke Update ProjectInvoiceTaxSummaryLineOTORel
										invoked.TaxableAmount -= LocalDifference
										invoked.TaxAmount     -= LocalTaxDifference
							TaxAmount = LocalTotal
						if (TaxAmount != old TaxAmount)
							LocalTaxDifference = TaxAmount - old TaxAmount
							invoke FastUpdate ProjectContractInvoice
								invoked.TotalTax += LocalTaxDifference

				if ((ProjectContractAdvance entered
				or   Edited)
				and  Amount changed)
					LocalAmount = Amount - old Amount
					invoke FastUpdate ProjectContractInvoice
						invoked.TotalInvoiceAmount += LocalAmount
						if (BillingMethod.PassThrough)
							invoked.TotalPassThrough += LocalAmount
						else
						if (ProjectContractRetainer entered)
							invoked.TotalRetainer += LocalAmount
						else
							if (!Deferred and !old Deferred)
								invoked.TotalAdjustment += LocalAmount
							else
							if (Adjustment entered)
								invoked.TotalAdjustment += Adjustment
						if (FeeCode entered)
							invoked.TotalFees += LocalAmount	
					invoke UpdateTotalBilledAmount ProjectFundingSource
						if (BillingMethod.PassThrough)
							invoked.BilledPassThrough = LocalAmount
						else
							invoked.BilledAmount = LocalAmount
							if (!Deferred and !old Deferred)
								invoked.AdjustmentAmount = LocalAmount
							else
							if (Adjustment entered)
								invoked.AdjustmentAmount = Adjustment
						if (FeeCode entered)
							invoked.BilledFees = LocalAmount
					invoke UpdateTotalBilledAmount ProjectContract
						if (BillingMethod.PassThrough)
							invoked.BilledPassThrough = LocalAmount
						else
							invoked.BilledAmount = LocalAmount
						if (FeeCode entered)
							invoked.BilledFees = LocalAmount
					if (!BillingMethod.PassThrough)
						invoke UpdateTotalBilled Project
							invoked.BilledAmount = LocalAmount

#ifndef property federal
				if (Edited
				and Amount changed)
					if  (ProjectContractInvoice.ProjectContractInvoiceAllowanceRel exists
					and !LineType.PassThrough
					and !IsAllowance)
						LocalAmount = ((Amount - old Amount) * ProjectFundingSource.AllowancePercent)
						round LocalAmount to nearest ProjectContract.DerivedRoundTo
						LocalAllowanceAmount = ProjectContractInvoice.first ProjectContractInvoiceAllowanceRel.Amount
						if (LocalAmount entered)
							invoke Update ProjectContractInvoice.first ProjectContractInvoiceAllowanceRel
								invoked.Amount			+= LocalAmount
								invoked.BillableAmount	+= LocalAmount
							invoke FastUpdate ProjectContractInvoice
								invoked.TotalAllowance 		+= LocalAmount
								invoked.TotalInvoiceAmount	+= LocalAmount
							invoke UpdateTotalBilledAmount ProjectFundingSource
								invoked.BilledAllowance = LocalAmount
							invoke UpdateTotalBilledAmount ProjectContract
								invoked.BilledAllowance = LocalAmount
					if 	(ProjectContractInvoice.ProjectContractInvoiceRetainageRel exists
					and	 RetainedAmount entered
					and !IsRetainage)
						LocalAmount = ProjectFundingSource.RetainagePercent * Amount
						round LocalAmount to nearest ProjectContract.DerivedRoundTo
						RetainedAmount = LocalAmount
						LocalAmount = RetainedAmount - old RetainedAmount
						invoke Update ProjectContractInvoice.first ProjectContractInvoiceRetainageRel
							invoked.Amount			-= LocalAmount
						invoke FastUpdate ProjectContractInvoice
							invoked.TotalRetainage += LocalAmount
							invoked.TotalInvoiceAmount -= LocalAmount
						invoke UpdateTotalBilledAmount ProjectFundingSource
							invoked.BilledRetainage = LocalAmount

						invoke UpdateTotalBilledAmount ProjectContract
							invoked.BilledRetainage = LocalAmount

#endif
				if  (Edited
				and  FeeCode not entered
				and !LineType.PassThrough
				and (Amount changed
				or   UnitsAmount changed))
					if (UnitsAmount < 0)
						AbsoluteUnits = UnitsAmount * -1
					else
						AbsoluteUnits = UnitsAmount
					for each FeeLineRel
						initialize FeeAmount					
						if (!each.ProjectContractFeeRel.Tiered
						or   AbsoluteUnits entered)
							LocalFeeCode		= each.FeeCode
							LocalEffectiveDate	= each.ProjectContractFeeRel.EffectiveDate
							LocalMarginal		= each.ProjectContractFeeRel.Marginal
							if (each.ProjectContractFeeRel.Tiered)
								for each ProjectContractFeeTierRel
									if (LocalMarginal)
										if (AbsoluteUnits > each.TierBegin)
											if (AbsoluteUnits <= each.TierEnd)
												if (each.Rate entered)
													FeeAmount	+= ((AbsoluteUnits - each.TierBegin) * each.Rate)
												else
													FeeAmount	+= each.Amount
											else
												if (each.Rate entered)
													FeeAmount	+= ((each.TierEnd - each.TierBegin) * each.Rate)
												else
													FeeAmount	+= each.Amount
									else
										if (AbsoluteUnits > each.TierBegin
										and AbsoluteUnits <= each.TierEnd)
											if (each.Rate entered)
												FeeAmount	= AbsoluteUnits * each.Rate
											else
												FeeAmount	= each.Amount
								if (UnitsAmount < 0)
									FeeAmount *= -1
							else
								if (each.ProjectContractFeeRel.Rate entered)
									FeeAmount = UnitsAmount * each.ProjectContractFeeRel.Rate
								else
									if (each.ProjectContractFeeRel.Basis.Billable)
										FeeAmount = Amount * each.ProjectContractFeeRel.Percent
							round FeeAmount to nearest ProjectContract.DerivedRoundTo
							
						if (FeeAmount > each.Amount)
							LocalAmount = FeeAmount - each.Amount
							if (ProjectContract.MaximumFees entered
							and LocalAmount > ProjectContract.TotalRemainingFees)
								LocalAmount = ProjectContract.TotalRemainingFees
							if (Project.BillingMaximum entered
							and LocalAmount > Project.RemainingBillable)
								LocalAmount = Project.RemainingBillable
							if (LocalAmount > ProjectFundingSource.BilledRemaining)
								LocalAmount = ProjectFundingSource.BilledRemaining
							if (LocalAmount > ProjectContract.TotalProjectBilledRemaining)
								LocalAmount = ProjectContract.TotalProjectBilledRemaining
							FeeAmount = each.Amount + LocalAmount	
							
						if (FeeAmount entered
						and FeeAmount != each.Amount)
							invoke Update each
								invoked.Amount			= FeeAmount
								invoked.BillableAmount	= FeeAmount
								invoked.UnitsAmount		= UnitsAmount
								invoked.Edited			= true
								invoked.Adjusted		= Adjusted
								invoked.Deferred		= Deferred

				if (Edited
				and Amount changed
				and ProjectContractInvoiceRetainerLine set exists)
					LocalAmount = old Amount - Amount
					if (LocalAmount > 0)
						LocalTotal = LocalAmount
						for each ProjectContractInvoiceRetainerLine set
							if (LocalTotal > 0)
								if (LocalAmount > each.AppliedAmount)
									LocalAmount = each.AppliedAmount
								invoke RemoveAppliedAmount each
									invoked.PrmAppliedAmount = LocalAmount
								LocalTotal -= LocalAmount

				if (TaxAmount entered
				and LineType.Tax
				and ProjectInvoiceTaxSummaryOTORel.TaxableAmount not entered)
					TaxAmount = 0

				if (Edited
				and UnitsAmount changed)
					LocalUnitsAmount = UnitsAmount - old UnitsAmount
					invoke FastUpdate ProjectContractInvoice
						invoked.TotalUnits += LocalUnitsAmount

				if (!Edited
				and Amount changed
				and ProjectContractRetainer entered)
					LocalAmount = old Amount - Amount
					invoke FastUpdate ProjectContractInvoice
						invoked.TotalRetainer -= LocalAmount
						invoked.TotalInvoiceAmount -= LocalAmount
																		
			Exit Rules
				if (Amount changed
				or  UnitsAmount changed
				or  TaxAmount changed
				or  BillableAmount changed
				or  RetainedAmount changed)
					invoke Delete ProjectContractInvoiceSummaryRel
					invoke InitializeInvoiceFile ProjectContractInvoice

		RevertInvoiceLine is an Instance Action
			valid when (OkToRevert)
			disable multiple instance selection
			Local Fields
				OtherLinesExist is Boolean
			Action Rules
				for each GLTransactionDetail.ProjectContractInvoiceBillRel
					constraint (each.UniqueID = UniqueID)
						"AmountCannotBeReverted;_TransactionHasBeenPartiallyInvoiced"
				if  (BuyerTaxCode not entered
				and  OriginalBuyerTaxCode entered)
					RevertToTaxable = true
				for each ProjectContractInvoiceTaxLine set
					invoke RevertAmount each
				if (Deferred)
					for each GLTransactionDetail.ProjectContractInvoiceBillRel
						if (each.UniqueID != UniqueID)
							OtherLinesExist = true
					if (!OtherLinesExist)
						invoke Purge GLTransactionDetail.ProjectContractPartialBillRel
				invoke Update
					invoked.Amount			= OriginalAmount
					invoked.UnitsAmount		= OriginalUnitsAmount
					invoked.BillableAmount	= OriginalBillableAmount
					invoked.BillableRate	= OriginalBillableRate
					invoked.TaxAmount		= OriginalTaxAmount
					invoked.BuyerTaxCode	= OriginalBuyerTaxCode
					invoked.TaxRate			= OriginalTaxRate
					invoked.AddressCode		= OriginalAddressCode
					invoked.Edited			= true
					invoked.Adjusted		= false
					invoked.Deferred		= false
					invoked.RevertLine		= true
			Exit Rules
				if (RevertToTaxable)
					if (ProjectFundingSource.TaxCalculationOption.Total)
						initialize LocalTotalRemovedTax
						LocalRemovedTaxable = Amount
						LocalBaseTaxable = ProjectInvoiceTaxSummaryOTORel.TaxableAmount
						if (ProjectContractInvoiceTotalTaxLineDetailRel exists)
							for each ProjectContractInvoiceTotalTaxLineDetailRel
								LocalTaxCounter = each.LineNumber
								LocalRemovedLineTax = LocalRemovedTaxable * each.TaxRate
								round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
								LocalRemovedLineTaxable = LocalRemovedTaxable
								LocalTotalRemovedTax += LocalRemovedLineTax
								invoke Update ProjectInvoiceTaxSummaryLineOTORel
									invoked.TaxableAmount += LocalRemovedLineTaxable
									invoked.TaxAmount     += LocalRemovedLineTax
								invoke Update each
									invoked.TaxableAmount += LocalRemovedLineTaxable
									invoked.TaxAmount     += LocalRemovedLineTax
						if (LocalTotalRemovedTax entered)
							LocalTaxAmount = LocalTotalRemovedTax
						else
							LocalTaxAmount = Amount * ProjectInvoiceTaxSummaryOTORel.TaxRate
							round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount += LocalRemovedTaxable
							invoked.TaxAmount	  += LocalTaxAmount
						invoke Update first ProjectContractInvoiceTotalTaxLineRel
							invoked.TaxAmount	  += LocalTaxAmount
						invoke FastUpdate ProjectContractInvoice
							invoked.TotalTax	  += LocalTaxAmount
					else
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount += Amount
							invoked.TaxAmount	  += TaxAmount
						for each ProjectContractInvoiceTaxLine set
							LocalTaxCounter = each.LineNumber
							invoke Update ProjectInvoiceTaxSummaryLineOTORel
								invoked.TaxableAmount += each.TaxableAmount
								invoked.TaxAmount     += each.TaxAmount
						invoke FastUpdate ProjectContractInvoice
							invoked.TotalTax		  += TaxAmount
				invoke InitializeInvoiceFile ProjectContractInvoice

		EditInvoiceLine is an Instance Action
			valid when (IsCreatedInvoiceStandardOrPassThrough)
			disable multiple instance selection
			subject is ProjectInvoiceEdit
			Parameters
				NewAmount			is like InternationalAmount
		    		precision is ProjectContract.Currency.NumberOfDecimals
				NewUnitsAmount		is like UnitsAmount
				NewBillableRate		is Decimal size 22.6
				NewTaxExempt		is Boolean
				CreatePartial		is Boolean
				HoldRemainder		is Boolean
			Parameter Rules
				NewAmount
					initial value is Amount				
					if (Amount entered)
						required
				NewUnitsAmount
					initial value is UnitsAmount				
					if (UnitsAmount entered)
						required
					else
						cannot be entered
				NewBillableRate
					initial value is BillableRate				
					if (BillableRate entered)
						required
					else
						cannot be entered
				HoldRemainder
					constraint (CreatePartial)
						"CannotHoldRemainderUnlessRemainingAmountIsDeferred"
			Local Fields
				NewBillableAmount	is like InternationalAmount
				LocalDeferred		is Boolean
				LocalAdjustment		is like InternationalAmount
				OtherLinesExist		is Boolean
				CurrentAdjustment	is like InternationalAmount
				NewAdjustment		is like InternationalAmount
			Action Rules
				if (BillableRate entered
				and UnitsAmount entered)
					if (NewAmount != Amount)
						if (NewBillableRate = BillableRate)
							NewBillableRate = NewAmount / NewUnitsAmount
							round NewBillableRate to nearest ProjectContract.DerivedRoundTo
						else
						if (NewUnitsAmount = UnitsAmount)
							NewUnitsAmount = NewAmount / NewBillableRate
						else
							NewAmount = NewBillableRate * NewUnitsAmount
							round NewAmount to nearest ProjectContract.DerivedRoundTo
					else
					if (NewBillableRate != BillableRate
					or  NewUnitsAmount  != UnitsAmount)
						NewAmount = NewBillableRate * NewUnitsAmount
						round NewAmount to nearest ProjectContract.DerivedRoundTo
				if  (NewAmount > Amount
				and !LineType.PassThrough)
					LocalAmount = NewAmount - Amount
					constraint (LocalAmount <= ProjectFundingSource.BilledRemaining)
						"NewAmountCannotExceedRemainingFundingSourceBalance"
					constraint (LocalAmount <= ProjectContract.TotalProjectBilledRemaining)
						"NewAmountCannotExceedRemainingContractBalance"
					if (Project.BillingMaximum entered)
						constraint (LocalAmount <= Project.RemainingBillable)
							"NewAmountCannotExceedRemainingProjectBalance"
				if (NewAmount > Amount)
					for each GLTransactionDetail.ProjectContractInvoiceBillRel
						constraint (each.UniqueID = UniqueID)
							"AmountCannotBeAdjustedUpward;_TransactionHasBeenPartiallyInvoiced"
				if  (Adjusted
				and !Deferred)
					CurrentAdjustment = AdjustmentAmount
				else
					CurrentAdjustment = 0
				if (NewAmount		!= Amount
				or  NewUnitsAmount	!= UnitsAmount
				or  NewBillableRate	!= BillableRate
				or  NewTaxExempt)
					if (NewTaxExempt)
						if (ProjectFundingSource.TaxCalculationOption.Total)
							initialize LocalTotalRemovedTax
							LocalRemovedTaxable = Amount
							LocalBaseTaxable = ProjectInvoiceTaxSummaryOTORel.TaxableAmount
							if (ProjectContractInvoiceTotalTaxLineDetailRel exists)
								for each ProjectContractInvoiceTotalTaxLineDetailRel
									LocalTaxCounter = each.LineNumber
									LocalRemovedLineTax = LocalRemovedTaxable * each.TaxRate
									round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
									LocalRemovedLineTaxable = LocalRemovedTaxable
									LocalTotalRemovedTax += LocalRemovedLineTax
									invoke Update ProjectInvoiceTaxSummaryLineOTORel
										invoked.TaxableAmount -= LocalRemovedLineTaxable
										invoked.TaxAmount     -= LocalRemovedLineTax
									invoke Update each
										invoked.TaxableAmount -= LocalRemovedLineTaxable
										invoked.TaxAmount     -= LocalRemovedLineTax
							if (LocalTotalRemovedTax entered)
								LocalTaxAmount = LocalTotalRemovedTax
							else
								LocalTaxAmount = Amount * ProjectInvoiceTaxSummaryOTORel.TaxRate
								round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount -= LocalRemovedTaxable
								invoked.TaxAmount	  -= LocalTaxAmount
							invoke Update first ProjectContractInvoiceTotalTaxLineRel
								invoked.TaxAmount	  -= LocalTaxAmount
							invoke FastUpdate ProjectContractInvoice
								invoked.TotalTax 	  -= LocalTaxAmount
						else
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount -= Amount
								invoked.TaxAmount     -= TaxAmount
							if (ProjectContractInvoiceTaxLine set exists)
								for each ProjectContractInvoiceTaxLine set
									LocalTaxCounter = each.LineNumber
									invoke Update ProjectInvoiceTaxSummaryLineOTORel
										invoked.TaxableAmount -= each.TaxableAmount
										invoked.TaxAmount     -= each.TaxAmount
									invoke InitializeAmount each
							invoke FastUpdate ProjectContractInvoice
								invoked.TotalTax -= TaxAmount
					if (NewAmount < OriginalAmount)
						NewBillableAmount = ((NewAmount / OriginalAmount) * OriginalBillableAmount)
						round NewBillableAmount to nearest ProjectContract.DerivedRoundTo
					else
						NewBillableAmount = OriginalBillableAmount						
					if (Deferred
					and NewAmount >= OriginalAmount)
						for each GLTransactionDetail.ProjectContractInvoiceBillRel
							if (each.UniqueID != UniqueID)
								OtherLinesExist = true
						if (!OtherLinesExist)
							invoke Purge GLTransactionDetail.ProjectContractPartialBillRel
					if (NewAmount < OriginalAmount
					and CreatePartial
					and GLTransactionDetail entered)
						LocalDeferred = true					
						if (GLTransactionDetail.ProjectContractPartialBillRel not exists)
							invoke Create ProjectContractPartialTransaction
								fill in fields from this instance
								invoked.Hold = HoldRemainder
						else
							if (HoldRemainder)
								invoke PutOnHold GLTransactionDetail.ProjectContractPartialBillRel
					else
						LocalDeferred = false
					
					if  (NewAmount != Amount
					and !LocalDeferred)
						NewAdjustment = NewAmount - OriginalAmount
					else
						NewAdjustment = 0
					LocalAdjustment = NewAdjustment - CurrentAdjustment
					invoke Update
						invoked.Amount			= NewAmount
						invoked.UnitsAmount		= NewUnitsAmount
						invoked.BillableRate	= NewBillableRate
						invoked.Edited			= true
						invoked.Adjusted		= true
						invoked.Deferred		= LocalDeferred
						invoked.Adjustment		= LocalAdjustment
						if (NewBillableAmount entered)
							invoked.BillableAmount = NewBillableAmount
						if (NewTaxExempt)
							initialize invoked.TaxAmount
							initialize invoked.BuyerTaxCode
							initialize invoked.TaxRate
							initialize invoked.AddressCode

			Exit Rules
				invoke InitializeInvoiceFile ProjectContractInvoice

		UpdateTaxAmount is an Instance Action
			restricted
			Parameters
				Difference is like InternationalAmount
			Action Rules
				TaxAmount += Difference
				invoke Update last ProjectContractInvoiceTaxLine set
					invoked.TaxAmount += Difference
					
		UpdateAllowance is an Instance Action
			restricted
			Parameters
				PrmAmount		is like InternationalAmount
		    	PrmTaxAmount	is like InternationalAmount
				PrmTaxRate		is Percent size 7.5    		    		
				PrmBuyerTaxCode	is AlphaUpper size 15
				PrmAddressCode	is like AddressCode
			Action Rules
				Amount			+= PrmAmount
				BillableAmount	+= PrmAmount
				TaxAmount		+= PrmTaxAmount
				TaxRate			= PrmTaxRate
				BuyerTaxCode	= PrmBuyerTaxCode
				AddressCode		= PrmAddressCode
				if (IsBilling)				
					invoke UpdateTotalBilledAmount ProjectFundingSource
						invoked.BilledAllowance = PrmAmount
				else
					invoke UpdateTotalRecognizedAmount ProjectFundingSource
						invoked.RecognizedAllowance = PrmAmount

		UpdateRetainage is an Instance Action
			restricted
			Parameters
				PrmAmount	is like InternationalAmount
			Action Rules
				Amount			+= PrmAmount

				invoke UpdateTotalBilledAmount ProjectFundingSource
					invoked.BilledRetainage = PrmAmount * -1

		RemoveTransaction is an Instance Action
			valid when (OrdinaryInvoiceCreated)
			disable multiple instance selection
			confirmation required
				"SelectedLineAndAnyAssociatedFeesWillBeRemovedFromInvoicesForAllFundingSourcesWithinInvoiceGroup"
			Parameters
				PlaceOnHold				is Boolean
				Transfer				is Boolean
				PrmFinanceCodeBlock		is a FinanceCodeBlock
				PrmPostingDate			is a PostingDate
		        PrmTransactionAmount	is a CurrencyAmount 
		        PrmUnitsAmount			is an UnitsAmount
		        PrmDescription			is Alpha up to 60
			Parameter Rules
				Transfer
					constraint (EligibleToTransfer)
						"TransactionIneligibleForTransfer"
				PrmFinanceCodeBlock
					initial value is GLTransactionDetail.FinanceCodeBlock
					if (Transfer)
						required
				PrmPostingDate
					initial value is GLTransactionDetail.PostingDate
					if (Transfer)
						required
						default to GLTransactionDetail.PostingDate
		        PrmTransactionAmount 
					initial value is GLTransactionDetail.TransactionAmount 
					if (Transfer)
						default to GLTransactionDetail.TransactionAmount 
						if (GLTransactionDetail.TransactionAmount >= 0)
							constraint (PrmTransactionAmount >= 0)
								"ToTransactionAmountCannotBeNegative"	
							constraint (PrmTransactionAmount <= GLTransactionDetail.TransactionAmount)
								"ToTransactionAmountCannotBeGreaterThanTransactionAmount"
						if (GLTransactionDetail.TransactionAmount <= 0)
							constraint (PrmTransactionAmount <= 0)
								"ToTransactionAmountCannotBePossitive"
							constraint (PrmTransactionAmount >= GLTransactionDetail.TransactionAmount)
								"ToTransactionAmountCannotBeGreaterThanTransactionAmount"
				PrmUnitsAmount
					initial value is GLTransactionDetail.UnitsAmount 
					if (Transfer)
						default to GLTransactionDetail.UnitsAmount
						if (GLTransactionDetail.UnitsAmount >= 0)
							constraint (PrmUnitsAmount >= 0)
								"ToUnitsAmountCannotBeNegative"	
							constraint (PrmUnitsAmount <= GLTransactionDetail.UnitsAmount)
								"ToUnitsAmountCannotBeGreaterThanUnitsAmount"
						if (GLTransactionDetail.UnitsAmount <= 0)
							constraint (PrmUnitsAmount <= 0)
								"ToUnitsAmountCannotBePossitive"
							constraint (PrmUnitsAmount >= GLTransactionDetail.UnitsAmount)
								"ToUnitsAmountCannotBeGreaterThanUnitsAmount"
				PrmDescription	
					initial value is GLTransactionDetail.Description// + "_TransferTransaction"				
			Local Fields
				FundingSourceTable
				Counter				is Numeric size 2
				LocalPlaceOnHold	is Boolean
			Action Rules
				if (Amount < 0)
					if (GLTransactionDetail entered)
						if (Project.BillingMaximum entered)
							constraint (GLTransactionDetail.ProjectContractInvoicedAmount + Project.RemainingBillable >= 0)
								"CannotRemoveTransaction;ResultingInvoiceWillExceedProjectMaximumAmount"
						for each GLTransactionDetail.ProjectContractInvoiceLine set
							Counter = 1
							while (Counter < 99)
								if (FundingSourceTable.FundingSource[Counter].Source not entered)
									FundingSourceTable.FundingSource[Counter].Source		= each.FinanceDimension2
									FundingSourceTable.FundingSource[Counter].Maximum		= each.ProjectFundingSource.FundedAmount - each.ProjectFundingSource.TotalBilledAmount
									FundingSourceTable.FundingSource[Counter].BilledAmount	= each.Amount
									Counter = 99
								else
								if (FundingSourceTable.FundingSource[Counter].Source		= each.FinanceDimension2)
									FundingSourceTable.FundingSource[Counter].BilledAmount += each.Amount
									Counter = 99
								else
									Counter +=1
						Counter = 1
						while (Counter < 99)
							if (FundingSourceTable.FundingSource[Counter].Source not entered)
								Counter = 99
							else
							if (FundingSourceTable.FundingSource[Counter].BilledAmount entered)
								constraint (FundingSourceTable.FundingSource[Counter].Maximum + FundingSourceTable.FundingSource[Counter].BilledAmount >= 0)
									"CannotRemoveTransaction;ResultingInvoiceWillExceedAvailableFundedAmount"
							Counter +=1
					else
						if (Project.BillingMaximum entered)
							constraint (Amount + Project.RemainingBillable >= 0)
								"CannotRemoveTransaction;ResultingInvoiceWillExceedProjectMaximumAmount"
						LocalAmount = ProjectFundingSource.FundedAmount - ProjectFundingSource.TotalBilledAmount
						constraint (LocalAmount + Amount >= 0)
							"CannotRemoveTransaction;ResultingInvoiceWillExceedAvailableFundedAmount"

				LocalPlaceOnHold = PlaceOnHold
				if (Transfer)
					LocalPlaceOnHold = false
				if (GLTransactionDetail entered)
					for each GLTransactionDetail.ProjectContractInvoiceLine set
						if (each.InvoiceCreated)
							invoke Delete each
								invoked.PlaceOnHold = LocalPlaceOnHold
				else
					invoke Delete
						invoked.PlaceOnHold = LocalPlaceOnHold
				if (Transfer
				and GLTransactionDetail.EligibleToTransfer)
					invoke TransferIndividualTransaction GLTransactionDetail
						invoked.PrmFinanceCodeBlock	 = PrmFinanceCodeBlock
						invoked.PrmPostingDate		 = PrmPostingDate
			        	invoked.PrmTransactionAmount = PrmTransactionAmount
			        	invoked.PrmUnitsAmount		 = PrmUnitsAmount
			        	invoked.PrmDescription		 = PrmDescription
			        	invoked.PlaceOnHold			 = PlaceOnHold
			Exit Rules
				invoke InitializeInvoiceFile ProjectContractInvoice

		RemoveMultipleTransactions is an Instance Action
			valid when (OrdinaryInvoiceCreated)
			confirmation required
				"SelectedLine(s)AndAnyAssociatedFeesWillBeRemovedFromInvoicesForAllFundingSourcesWithinInvoiceGroup"
			Parameters
				PlaceOnHold				is Boolean
				Transfer				is Boolean
				PrmFinanceCodeBlock		is a FinanceCodeBlock
				PrmPostingDate			is a PostingDate
			Parameter Rules
				Transfer
					constraint (EligibleToTransfer)
						"TransactionIneligibleForTransfer"
				PrmFinanceCodeBlock
					if (Transfer)
						required
				PrmPostingDate
					if (Transfer)
						required
			Local Fields
				FundingSourceTable
				Counter				is Numeric size 2
				LocalPlaceOnHold	is Boolean
			Action Rules
				if (Amount < 0)
					if (GLTransactionDetail entered)
						if (Project.BillingMaximum entered)
							constraint (GLTransactionDetail.ProjectContractInvoicedAmount + Project.RemainingBillable >= 0)
								"CannotRemoveTransaction;ResultingInvoiceWillExceedProjectMaximumAmount"
						for each GLTransactionDetail.ProjectContractInvoiceLine set
							Counter = 1
							while (Counter < 99)
								if (FundingSourceTable.FundingSource[Counter].Source not entered)
									FundingSourceTable.FundingSource[Counter].Source		= each.FinanceDimension2
									FundingSourceTable.FundingSource[Counter].Maximum		= each.ProjectFundingSource.FundedAmount - each.ProjectFundingSource.TotalBilledAmount
									FundingSourceTable.FundingSource[Counter].BilledAmount	= each.Amount
									Counter = 99
								else
								if (FundingSourceTable.FundingSource[Counter].Source		= each.FinanceDimension2)
									FundingSourceTable.FundingSource[Counter].BilledAmount += each.Amount
									Counter = 99
								else
									Counter +=1
						Counter = 1
						while (Counter < 99)
							if (FundingSourceTable.FundingSource[Counter].Source not entered)
								Counter = 99
							else
							if (FundingSourceTable.FundingSource[Counter].BilledAmount entered)
								constraint (FundingSourceTable.FundingSource[Counter].Maximum + FundingSourceTable.FundingSource[Counter].BilledAmount >= 0)
									"CannotRemoveTransaction;ResultingInvoiceWillExceedAvailableFundedAmount"
							Counter +=1
					else
						if (Project.BillingMaximum entered)
							constraint (Amount + Project.RemainingBillable >= 0)
								"CannotRemoveTransaction;ResultingInvoiceWillExceedProjectMaximumAmount"
						LocalAmount = ProjectFundingSource.FundedAmount - ProjectFundingSource.TotalBilledAmount
						constraint (LocalAmount + Amount >= 0)
							"CannotRemoveTransaction;ResultingInvoiceWillExceedAvailableFundedAmount"

				LocalPlaceOnHold = PlaceOnHold
				if (Transfer)
					LocalPlaceOnHold = false
				if (GLTransactionDetail entered)
					for each GLTransactionDetail.ProjectContractInvoiceLine set
						if (each.InvoiceCreated)
							invoke Delete each
								invoked.PlaceOnHold = LocalPlaceOnHold
				else
					invoke Delete
						invoked.PlaceOnHold = LocalPlaceOnHold
				if (Transfer
				and GLTransactionDetail.EligibleToTransfer)
					invoke TransferMultipleTransactions GLTransactionDetail
						invoked.PrmFinanceCodeBlock	 = PrmFinanceCodeBlock
						invoked.PrmPostingDate		 = PrmPostingDate
			        	invoked.PlaceOnHold			 = PlaceOnHold
			Exit Rules
				invoke InitializeInvoiceFile ProjectContractInvoice

		RemoveAllowance is an Instance Action
			valid when (AllowanceInvoiceCreated)
			confirmation required
				"RemoveAllowanceFromInvoice?"
			Action Rules
				invoke Delete

		RemoveAdvanceBillingLine is an Instance Action
			valid when (AdvanceInvoiceCreated)
			confirmation required
				"RemoveAdvanceBillingLineFromInvoice?"
			Action Rules
				invoke Delete
			Exit Rules
				invoke InitializeInvoiceFile ProjectContractInvoice

		RemoveAppliedAdvanceBilling is an Instance Action
			valid when (AppliedAdvanceInvoiceCreated)
			confirmation required
				"RemoveAppliedAdvanceBillingLineFromInvoice?"
			Action Rules
				invoke Delete

		RemoveRetainage is an Instance Action
			valid when (RetainageInvoiceCreated)
			confirmation required
				"RemoveRetainageFromInvoice?"
			Local Fields
				LocalAmount	is like InternationalAmount
				LocalFees	is like InternationalAmount
			Action Rules
				invoke Delete
			Exit Rules
				for each ProjectContractInvoice.ProjectContractInvoiceLine set
					if (each.RetainedAmount entered)
						LocalAmount += each.RetainedAmount
						if (each.FeeCode entered)
							LocalFees += each.RetainedAmount
						invoke Update each
							invoked.RetainedAmount = blank

		RemoveRetainer is an Instance Action
			valid when (RetainerInvoiceCreated)
			confirmation required
				"RemoveRetainerFromInvoice?"
			Action Rules
				invoke Delete

		RemoveRevenueTransaction is an Instance Action
			valid when (OrdinaryRevenueInvoiceCreated)
			confirmation required
				"SelectedLineWillBeRemovedFromRevenueRecognitionForAllFundingSourcesWithinRunGroup"
			Parameters
				PlaceOnHold is Boolean
			Action Rules
				if (GLTransactionDetail entered)
					for each GLTransactionDetail.ProjectContractInvoiceLine set
						if (each.RevenueInvoiceCreated)
							invoke Delete each
								invoked.PlaceOnHold = PlaceOnHold
				else
					invoke Delete
						invoked.PlaceOnHold = PlaceOnHold

		RemoveRevenueAllowance is an Instance Action
			valid when (AllowanceRevenueInvoiceCreated)
			confirmation required
				"RemoveAllowanceFromRevenueRecognition?"
			Action Rules
				invoke Delete

		ReapplyRetainer is an Instance Action
			valid when (ReapplyRetainerOk)
			disable multiple instance selection
			Local Fields
				LocalRule				is Numeric size 1
				LocalProject			is like Project
				LocalAvailableAmount	is like InternationalAmount
				LocalAmount				is like InternationalAmount
				LocalAppliedAmount		is like InternationalAmount
				LocalAdjustedAmount		is like InternationalAmount
				LocalAllowancePercent	is Percent size 7.3
			Action Rules
				LocalRetainer = ProjectContractRetainer
				LocalRule = ProjectContractRetainer.RetainerRule
				LocalProject = ProjectContractRetainer.RetainerProject
				LocalAvailableAmount = ProjectContractRetainer.RemainingAmount
				initialize LocalAppliedAmount
#ifndef property federal				
				if (ProjectContractInvoice.ProjectContractInvoiceAllowanceRel exists)
					LocalAllowancePercent = ProjectFundingSource.AllowancePercent
#endif
				for each ProjectContractInvoice.ProjectContractInvoiceLine set
					if (!each.LineType.Allowance)
						LocalSequenceNumber	= each.SequenceNumber
						if (each.ProjectContractRetainer not entered
						and each.Amount > 0
						and LocalAvailableAmount > 0)
							if (each.Project = LocalProject
							or  LocalRule = 0)
								LocalAdjustedAmount = each.Amount + (each.Amount * LocalAllowancePercent)
								round LocalAdjustedAmount to nearest ProjectContract.DerivedRoundTo
								if (LocalAvailableAmount >= LocalAdjustedAmount - each.TotalAppliedAmount)
									LocalAmount = LocalAdjustedAmount - each.TotalAppliedAmount
								else
									LocalAmount	= LocalAvailableAmount
								if (LocalAmount entered) 
									LocalAvailableAmount -= LocalAmount
									LocalAppliedAmount   += LocalAmount
									if (ProjectContractInvoiceRetainerLineRel exists)
										invoke Update ProjectContractInvoiceRetainerLineRel
											invoked.AppliedAmount += LocalAmount
									else
										invoke Create ProjectContractInvoiceRetainerLine
											fill in fields from each
											invoked.ProjectContractRetainer = ProjectContractRetainer
											invoked.AppliedAmount			= LocalAmount
											invoked.RetainerLine			= SequenceNumber
				AmountRemoved = false
				if (LocalAppliedAmount entered)
					Amount -= LocalAppliedAmount
					if (BuyerTaxCode entered)
						if (ProjectFundingSource.TaxCalculationOption.Total)
							initialize LocalTotalRemovedTax
							LocalRemovedTaxable = LocalAppliedAmount
							LocalBaseTaxable = ProjectInvoiceTaxSummaryOTORel.TaxableAmount
							if (ProjectContractInvoiceTotalTaxLineDetailRel exists)
								for each ProjectContractInvoiceTotalTaxLineDetailRel
									LocalTaxCounter = each.LineNumber
									LocalRemovedLineTax = LocalRemovedTaxable * each.TaxRate
									round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
									LocalRemovedLineTaxable = LocalRemovedTaxable
									LocalTotalRemovedTax += LocalRemovedLineTax
									invoke Update ProjectInvoiceTaxSummaryLineOTORel
										invoked.TaxableAmount -= LocalRemovedLineTaxable
										invoked.TaxAmount     -= LocalRemovedLineTax
									invoke Update each
										invoked.TaxableAmount -= LocalRemovedLineTaxable
										invoked.TaxAmount     -= LocalRemovedLineTax
							if (LocalTotalRemovedTax entered)
								LocalTaxAmount = LocalTotalRemovedTax
							else
								LocalTaxAmount = Amount * ProjectInvoiceTaxSummaryOTORel.TaxRate
								round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount -= LocalRemovedTaxable
								invoked.TaxAmount	  -= LocalTaxAmount
							invoke Update first ProjectContractInvoiceTotalTaxLineRel
								invoked.TaxAmount	  -= LocalTaxAmount
							invoke FastUpdate ProjectContractInvoice
								invoked.TotalTax 	  -= LocalTaxAmount
						else
							LocalAmount = Amount * TaxRate
							round LocalAmount to nearest ProjectContract.DerivedRoundTo
							LocalTaxAmount = LocalAppliedAmount * TaxRate
							round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
							TaxAmount = LocalAmount
							invoke Update ProjectInvoiceTaxSummaryOTORel
								invoked.TaxableAmount -= LocalAppliedAmount
								invoked.TaxAmount     -= LocalTaxAmount
							invoke FastUpdate ProjectContractInvoice
								invoked.TotalTax	  -= LocalTaxAmount
							if (ProjectContractInvoiceTaxLine set exists)
								for each ProjectContractInvoiceTaxLine set
									LocalTaxAmount = LocalAppliedAmount * each.TaxRate
									round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
									LocalTaxCounter = each.LineNumber
									invoke Update ProjectInvoiceTaxSummaryLineOTORel
										invoked.TaxableAmount -= LocalAppliedAmount
										invoked.TaxAmount     -= LocalTaxAmount
									invoke Update each
										invoked.TaxableAmount -= LocalAppliedAmount
										invoked.TaxAmount	  -= LocalTaxAmount
					invoke UpdateAppliedAmount ProjectContractRetainer
						invoked.PrmAppliedAmount = LocalAppliedAmount
					invoke FastUpdate ProjectContractInvoice
						invoked.TotalRetainer -= LocalAppliedAmount

		CreateAdvanceBilling is an Instance Action
			valid when (BillInAdvanceAllowed)
			disable multiple instance selection
			Parameters
		    	PrmAmount 			is a CurrencyAmount
		    		precision is ProjectContract.Currency.NumberOfDecimals
		    		default label is "Amount"
		    	PrmProject			is a Project
		    		default label is "<FinanceEnterpriseGroup.ProjectLabel>"
				Description
				AdvanceFullAccount	is a FinanceCodeBlockFullNoProjectFD2Liability
					default label is "AdvanceBillingFinanceStructure"
				Taxable				is Boolean
				PrmUnitsAmount		is a UnitsAmount
					default label is "Units"
				Hold				is Boolean
			Parameter Rules			
				PrmProject
					required
					LocalProject = PrmProject
					constraint (ShadowPostingDescendantRel.Project.ProjectType.Posting)
						"<FinanceEnterpriseGroup.ProjectLabel>MustBeAPostingChildOf<ProjectContract.DisplayContract>"
					constraint (PrmProject.IsBillable)
						"<FinanceEnterpriseGroup.ProjectLabel>MustBeBillableAndProjectStatusMustBeBillable"
					constraint (ProjectContractInvoice.InvoiceDate within PrmProject.ProjectDateRange)
						"<FinanceEnterpriseGroup.ProjectLabel>DateRangeMustIncludeInvoiceDate"
				PrmAmount
					required
					constraint (ProjectFundingSource.TotalRemainingRetainerAmount + PrmAmount <= ProjectFundingSource.BilledRemaining)
						"AmountCannotExceed<FinanceDimension2>RemainingUnretainedFundedBalanceOf<ProjectFundingSource.UnretainedBilledRemaining>"
					constraint (PrmAmount <= ProjectContract.TotalProjectBilledRemaining)
						"AmountCannotExceedContractRemainingUnretainedFundedBalanceOf<ProjectContract.TotalProjectBilledRemaining>"
					if (PrmProject.BillingMaximum entered)
						constraint (PrmAmount <= PrmProject.RemainingBillable)
							"AmountCannotExceed<FinanceEnterpriseGroup.ProjectLabel>RemainingAmountOf<PrmProject.RemainingBillable>"
				AdvanceFullAccount
					required
					initial value is ProjectFundingSource.AdvanceBillFullAccount
				Description
					required
					initial value is "Advance Billing"
			Local Fields
				ProjectContractAdvanceView		is a ProjectContractAdvance view
				NewProjectContractInvoiceLine	is a ProjectContractInvoiceLine view
				LocalTaxAmount					is like InternationalAmount
				LocalTaxRate                	is Percent size 7.5
				TaxCounter						is Numeric size 2
				NewProjectContractInvoiceTotalLine is a ProjectContractInvoiceLine view				
			Action Rules
#ifdef module tx
				initialize LocalBuyerTaxCode
				initialize LocalAddressCode
				if (Taxable
				and FinanceDimension2.IsExternalGrantOrCustomer)				
					if (PrmProject.BuyerTaxLocation.TaxCode entered)
						LocalBuyerTaxCode = PrmProject.BuyerTaxLocation.TaxCode
						LocalAddressCode  = PrmProject.BuyerTaxLocation.AddressCode
					else
					if (PrmProject.BuyerTaxCode entered)
						LocalBuyerTaxCode = PrmProject.BuyerTaxCode
					else
					if (ProjectFundingSource.BuyerTaxLocation.TaxCode entered)
						LocalBuyerTaxCode = ProjectFundingSource.BuyerTaxLocation.TaxCode
						LocalAddressCode  = ProjectFundingSource.BuyerTaxLocation.AddressCode
					else
						LocalBuyerTaxCode = ProjectFundingSource.BuyerTaxCode
				if (LocalBuyerTaxCode entered)
					initialize CalculateTax

					LocalTaxEntity	= ProjectFundingSource.CompanyCustomerGroup.ReceivableCompany.GeneralLedgerCompany.AccountingEntity
					if (LocalTaxEntity.ThirdParty.Sabrix)
						CalculateTax.TransactionCurrency 		= ProjectContract.Currency	
						CalculateTax.InvoiceDate				= ProjectContractInvoice.InvoiceDate
						CalculateTax.Invoice		      		= "Calculate"
						CalculateTax.Customer					= ProjectFundingSource.CompanyCustomerGroup.Customer
						CalculateTax.VendorCustomerName 		= ProjectFundingSource.CompanyCustomerGroup.Customer.Name	
						CalculateTax.LineNumber					= 1	
						if (PrmProject.BuyerTaxLocation entered)
							CalculateTax.PostalAddress  		= PrmProject.BuyerTaxLocation.AddressCode.PostalAddress
							LocalAddressCode					= PrmProject.BuyerTaxLocation.AddressCode
						else	
						if (ProjectFundingSource.BuyerTaxLocation entered)	
							CalculateTax.PostalAddress  		= ProjectFundingSource.BuyerTaxLocation.AddressCode.PostalAddress	
							LocalAddressCode					= ProjectFundingSource.BuyerTaxLocation.AddressCode
						else								
							CalculateTax.PostalAddress  		= ProjectFundingSource.CompanyCustomerGroup.CustomerBillTo.PostalAddress
						CalculateTax.FromPostalAddress			= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress	
						include LoadOneSourceTaxAttribute
						CalculateTax.OneSourceTaxAttribute50 	= LocalOneSourceTaxAttribute	

					CalculateTax.TaxEntity						= LocalTaxEntity
					CalculateTax.System							= "AR"
					CalculateTax.TaxCode						= LocalBuyerTaxCode
					CalculateTax.FromTaxCode					= ProjectContract.DerivedSellerTaxCode
					CalculateTax.Function						= "C"
					CalculateTax.TaxableAmount					= PrmAmount
					CalculateTax.TaxDate						= ProjectContractInvoice.InvoiceDate
					
					if (EntityTaxCodeRel.TaxDistributionCode entered)
						CalculateTax.InputReturnVertexTaxIn = "D"

					if (LocalTaxEntity.ThirdParty.VertexOSeries)
						CalculateTax.PostalAddress				= LocalAddressCode.PostalAddress
						CalculateTax.FromPostalAddress			= ProjectContract.SellerTaxLocation.AddressCode.PostalAddress					

					LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
					LocalTaxAmount								= CalculateTax.OutputTotalTaxAmount
					round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
					LocalTaxRate                    			= CalculateTax.OutputTaxRate
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>"  

					if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
					    initialize TaxCounter
					    initialize LocalTaxAmount
					    while (TaxCounter < 20)
					    	TaxCounter += 1
					    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount entered)
						    	LocalTaxAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
						    	round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
#endif
    			invoke Create ProjectContractAdvance
    				assign result to ProjectContractAdvanceView
    				fill in fields from this instance
   					invoked.Description			= Description
   					invoked.AdvanceFullAccount	= AdvanceFullAccount
   					invoked.InvoiceDate			= ProjectContractInvoice.InvoiceDate
   					invoked.Amount				= PrmAmount
   					invoked.Project				= PrmProject
   					invoked.Taxable				= Taxable
   					invoked.UnitsAmount			= PrmUnitsAmount
					invoked.Hold				= Hold
    			invoke Create
    				assign result to NewProjectContractInvoiceLine
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.ProjectContract			= ProjectContract
					invoked.FinanceDimension2		= FinanceDimension2
					invoked.ProjectContractInvoice	= ProjectContractInvoice
					invoked.Project					= PrmProject
    				invoked.Amount					= PrmAmount
    				invoked.BillableAmount			= PrmAmount
    				invoked.UnitsAmount				= PrmUnitsAmount
    				if (!ProjectFundingSource.TaxCalculationOption.Total)
						invoked.TaxAmount			= LocalTaxAmount
						invoked.TaxRate             = LocalTaxRate
					invoked.BuyerTaxCode			= LocalBuyerTaxCode
					invoked.AddressCode				= LocalAddressCode
    				invoked.ProjectContractAdvance	= ProjectContractAdvanceView.ProjectContractAdvance
				invoke UpdateTotalBilledAmount ProjectContract
					invoked.BilledAmount = PrmAmount
				invoke UpdateTotalBilledAmount ProjectFundingSource
					invoked.BilledAmount = PrmAmount
#ifdef module ar
				if (LocalBuyerTaxCode entered
				and LocalTaxAmount entered)
					if ((ProjectFundingSource.TaxCalculationOption.Summary
					or   ProjectFundingSource.TaxCalculationOption.Total)
					and !LocalTaxEntity.ThirdParty.Sabrix)
						if (ProjectInvoiceTaxSummaryAdvanceRel not exists)
							invoke Create ProjectInvoiceTaxSummaryAdvanceRel
								invoked.TaxableAmount = PrmAmount
								invoked.TaxAmount	  = LocalTaxAmount
								invoked.TaxRate		  = LocalTaxRate
						else
							invoke Update ProjectInvoiceTaxSummaryAdvanceRel
								invoked.TaxableAmount += PrmAmount
								invoked.TaxAmount	  += LocalTaxAmount
						if (ProjectFundingSource.TaxCalculationOption.Total)
							if (ProjectContractInvoiceTotalAdvanceTaxLineRel not exists)
								invoke Create ProjectContractInvoiceLine
									assign result to NewProjectContractInvoiceTotalLine
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ProjectContract			= ProjectContract
									invoked.FinanceDimension2		= FinanceDimension2
									invoked.ProjectContractInvoice	= ProjectContractInvoice
									invoked.TaxAmount				= LocalTaxAmount
									invoked.TaxRate					= LocalTaxRate
									invoked.BuyerTaxCode			= LocalBuyerTaxCode
									invoked.AddressCode				= LocalAddressCode
									invoked.LineType				= 10
							else
								invoke Update first ProjectContractInvoiceTotalAdvanceTaxLineRel
									invoked.TaxAmount += LocalTaxAmount
						if (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered)
						    initialize TaxCounter
						    while (TaxCounter < 20)
						    	TaxCounter += 1
						    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
						    		LocalTaxCounter   = TaxCounter
						    		LocalBuyerTaxCode = CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
							    	if (ProjectInvoiceTaxSummaryLineAdvanceRel exists)
							    		invoke Update ProjectInvoiceTaxSummaryLineAdvanceRel
							    			invoked.TaxAmount	  += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
							    			invoked.TaxableAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
							    	else
								    	invoke Create ProjectInvoiceTaxSummaryLineAdvanceRel
											invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
											invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
									    	invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
											invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
									if (ProjectFundingSource.TaxCalculationOption.Total)
										if (ProjectContractInvoiceTotalAdvanceTaxLineDetailRel not exists)
											invoke Create ProjectContractInvoiceTaxLine
												invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
												invoked.ProjectContract			= ProjectContract
												invoked.FinanceDimension2		= FinanceDimension2
												invoked.ProjectContractInvoice	= ProjectContractInvoice
												invoked.SequenceNumber			= NewProjectContractInvoiceTotalLine.SequenceNumber
												invoked.LineNumber				= TaxCounter
												invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
												invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
												invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
												invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
												invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
										else
											invoke Update ProjectContractInvoiceTotalAdvanceTaxLineDetailRel
								    			invoked.TaxAmount	  += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
								    			invoked.TaxableAmount += CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
					if  (CalculateTax.TaxTable.TaxTableOutput[2].TaxCode entered
					and !ProjectFundingSource.TaxCalculationOption.Total)
					    initialize TaxCounter
					    while (TaxCounter < 20)
					    	TaxCounter += 1
					    	if (CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode entered)
					    		invoke Create ProjectContractInvoiceTaxLine
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.ProjectContract 		= ProjectContract
									invoked.FinanceDimension2 		= FinanceDimension2
									invoked.ProjectContractInvoice	= ProjectContractInvoice
									invoked.SequenceNumber			= NewProjectContractInvoiceLine.SequenceNumber
									invoked.LineNumber				= TaxCounter
									invoked.TaxAmount				= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxAmount
									invoked.BuyerTaxCode			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxCode
									invoked.TaxCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxOutputAccount
									invoked.TaxRate					= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxRate
									invoked.TaxableAmount			= CalculateTax.TaxTable.TaxTableOutput[TaxCounter].TaxableAmount
#endif
				invoke FastUpdate ProjectContractInvoice
					invoked.TotalInvoiceAmount	+= PrmAmount
					invoked.TotalAdvance		+= PrmAmount
					invoked.TotalTax			+= LocalTaxAmount
    				invoked.TotalUnits			+= PrmUnitsAmount

			Exit Rules
				invoke InitializeInvoiceFile ProjectContractInvoice

		EditAdvanceBillingLine is an Instance Action
			valid when (EditBillInAdvanceAllowed)
			disable multiple instance selection
			Parameters
		    	PrmAmount 			is a CurrencyAmount
		    		precision is ProjectContract.Currency.NumberOfDecimals
		    		default label is "Amount"
				Description
				AdvanceFullAccount	is a FinanceCodeBlockFullNoProjectFD2Liability
					default label is "AdvanceBillingFinanceStructure"
				Taxable				is Boolean
				PrmUnitsAmount		is a UnitsAmount
					default label is "Units"
				Hold				is Boolean
			Parameter Rules			
				PrmAmount
					required
					initial value is Amount
					LocalAmount = ProjectFundingSource.UnretainedBilledRemaining + Amount
					constraint ((ProjectFundingSource.TotalRemainingRetainerAmount + PrmAmount) <= (ProjectFundingSource.BilledRemaining + Amount))
						"AmountCannotExceed<FinanceDimension2>RemainingUnretainedFundedBalanceOf<LocalAmount>"
					constraint (PrmAmount - Amount <= ProjectContract.TotalProjectBilledRemaining)
						"AmountCannotExceedContractRemainingUnretainedFundedBalanceOf<ProjectContract.TotalProjectBilledRemaining>"
					if (Project.BillingMaximum entered)
						LocalAmount = Project.RemainingBillable + Amount
						constraint (PrmAmount <= LocalAmount)
							"AmountCannotExceed<FinanceEnterpriseGroup.ProjectLabel>RemainingAmountOf<LocalAmount>"
				AdvanceFullAccount
					required
					initial value is ProjectContractAdvance.AdvanceFullAccount
				Description
					required
					initial value is ProjectContractAdvance.Description
				Taxable
					initial value is ProjectContractAdvance.Taxable
					if (Taxable)
						constraint (ProjectContractAdvance.Taxable)
							"CannotChangeFromTaxExemptToTaxable;_RemoveAndRecreateAdvanceBillingLineInstead"
				PrmUnitsAmount
					initial value is UnitsAmount
				Hold
					initial value is ProjectContractAdvance.Hold
			Action Rules
    			invoke Update ProjectContractAdvance
   					invoked.Description			= Description
   					invoked.AdvanceFullAccount	= AdvanceFullAccount
   					invoked.Amount				= PrmAmount
   					invoked.Taxable				= Taxable
   					invoked.UnitsAmount			= PrmUnitsAmount
					invoked.Hold				= Hold
				if  (BuyerTaxCode entered
				and !Taxable)
					if (ProjectFundingSource.TaxCalculationOption.Total)
						initialize LocalTotalRemovedTax
						LocalRemovedTaxable = Amount
						LocalBaseTaxable = ProjectInvoiceTaxSummaryOTORel.TaxableAmount
						if (ProjectContractInvoiceTotalTaxLineDetailRel exists)
							for each ProjectContractInvoiceTotalTaxLineDetailRel
								LocalTaxCounter = each.LineNumber
								LocalRemovedLineTax = LocalRemovedTaxable * each.TaxRate
								round LocalRemovedLineTax to nearest ProjectContract.DerivedRoundTo
								LocalRemovedLineTaxable = LocalRemovedTaxable
								LocalTotalRemovedTax += LocalRemovedLineTax
								invoke Update ProjectInvoiceTaxSummaryLineOTORel
									invoked.TaxableAmount -= LocalRemovedLineTaxable
									invoked.TaxAmount     -= LocalRemovedLineTax
								invoke Update each
									invoked.TaxableAmount -= LocalRemovedLineTaxable
									invoked.TaxAmount     -= LocalRemovedLineTax
						if (LocalTotalRemovedTax entered)
							LocalTaxAmount = LocalTotalRemovedTax
						else
							LocalTaxAmount = Amount * ProjectInvoiceTaxSummaryOTORel.TaxRate
							round LocalTaxAmount to nearest ProjectContract.DerivedRoundTo
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount -= LocalRemovedTaxable
							invoked.TaxAmount	  -= LocalTaxAmount
						invoke Update first ProjectContractInvoiceTotalTaxLineRel
							invoked.TaxAmount	  -= LocalTaxAmount
					else
						invoke Update ProjectInvoiceTaxSummaryOTORel
							invoked.TaxableAmount -= Amount
							invoked.TaxAmount     -= TaxAmount
						if (ProjectContractInvoiceTaxLine set exists)
							for each ProjectContractInvoiceTaxLine set
								LocalTaxCounter = each.LineNumber
								invoke Update ProjectInvoiceTaxSummaryLineOTORel
									invoked.TaxableAmount -= each.TaxableAmount
									invoked.TaxAmount     -= each.TaxAmount
								invoke InitializeAmount each
	
    			invoke Update
    				invoked.Amount				= PrmAmount
    				invoked.BillableAmount		= PrmAmount
    				invoked.UnitsAmount			= PrmUnitsAmount
    				if (!Taxable)
						invoked.TaxAmount		= blank
						invoked.TaxRate         = blank
						invoked.BuyerTaxCode	= blank
						invoked.AddressCode		= blank
			Exit Rules
				invoke InitializeInvoiceFile ProjectContractInvoice

		SetLineType is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
			Instance Selection
				where ((FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				or      PrmFinanceEnterpriseGroup not entered)
				and    (LineType not entered
				or     (ProjectContractMilestone entered
				and     LineType not = 9)))
			Action Rules
				Instance Rules
					if (FeeCode entered)
						LineType = 2
					else
					if (IsAllowance)
						LineType = 3
					else
					if (IsRetainage)
						LineType = 4
					else
					if (BillingMethod.PassThrough)
						LineType = 5
					else
					if (ProjectContractAdvance entered)
						LineType = 6
					else
					if (AppliedProjectContractAdvance entered)
						LineType = 7
					else
					if (ProjectContractRetainer entered)
						LineType = 8
					else
					if (ProjectContractMilestone entered)
						LineType = 9
					else
					if (GLTransactionDetail entered)
						LineType = 1

		RebuildContractLTDBalances is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmProjectContract			is a ProjectContract
					default label is "Contract"
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    ProjectContract		  = PrmProjectContract
        		and    GLTransactionDetail entered
    			and   (ProjectContractInvoice.InvoiceType.Bill
    			or     ProjectContractInvoice.InvoiceType.RevenueRecognition)
        		and    ProjectContractInvoice.Status.Journalized)
        	Sort Order is primary
        	Action Rules
        		ProjectContract Set Rules
        			Exit Rules
        				for each ProjectContract.ProjectContractBalanceAdjustmentRel
        					invoke UpdateContractLTDBalances each
        						resume on error
        		Instance Rules
					LocalFinanceCodeBlock = GLTransactionDetail.FinanceCodeBlock
					if (ProjectContractInvoice.InvoiceType.Bill)
						if (ProjectContractInvoiceBalanceRel exists)
							invoke Update first ProjectContractInvoiceBalanceRel
								invoked.Amount			+= Amount
								invoked.UnitsAmount		+= UnitsAmount
								invoked.TaxAmount		+= TaxAmount
								invoked.BillableAmount	+= BillableAmount
								if (ProjectContract.RevenueRecognition.Combined)
									invoked.RevenueAmount += Amount
						else
							invoke Create ProjectContractInvoiceBalance
								fill in fields from this instance
								invoked.FinanceCodeBlock = LocalFinanceCodeBlock
								if (ProjectContract.RevenueRecognition.Combined)
									invoked.RevenueAmount = Amount
					else
						if (ProjectContractInvoiceBalanceRel exists)
							invoke Update first ProjectContractInvoiceBalanceRel
								invoked.RevenueAmount += Amount
						else
							invoke Create ProjectContractInvoiceBalance
								fill in fields from this instance
									except invoked.Amount
									except invoked.UnitsAmount
									except invoked.TaxAmount
									except invoked.BillableAmount
								invoked.FinanceCodeBlock = LocalFinanceCodeBlock
								invoked.RevenueAmount 	 = Amount

		CreateComments is an Instance Action
			Parameters
				PrmSubject	 			is a CommentName
		    	PrmComment				is Text
				PrmFrom					is Alpha size 230
				PrmCommentDate			is TimeStamp
				PrmDocumentURL			is URL	
				PrmAttachment			is an Attachment
				PrmPrintOnInvoice       is Boolean		    	
			Parameter Rules
				PrmSubject
					required
		    	PrmComment
		    		required
				PrmFrom	
					initial value is actor
					required
				PrmCommentDate
		    		default to current timestamp
			Action Rules
				invoke Create ProjectContractInvoiceLineComment
					invoked.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
					invoked.FinanceDimension2          = FinanceDimension2					
					invoked.ProjectContract		       = ProjectContract					
					invoked.ProjectContractInvoice     = ProjectContractInvoice					
					invoked.SequenceNumber      	   = SequenceNumber
					invoked.Subject				       = PrmSubject
			    	invoked.Comment                    = PrmComment
					invoked.From                       = PrmFrom	
					invoked.CommentDate                = PrmCommentDate
					invoked.DocumentURL			       = PrmDocumentURL					
			    	invoked.Attachment                 = PrmAttachment
					invoked.PrintOnInvoice		       = PrmPrintOnInvoice			    	
