SchoolActivityAccount is a BusinessClass
    owned by studentactivities
    prefix is SSAC

    Ontology
    	symbolic key is SchoolActivityAccount

    Persistent Fields
		Description				is Alpha 60
		FeeAmount				is an InternationalAmount
		GroupAllSubActivities	is Boolean
		GLAccount				is a FinanceCodeBlockFull
		CurrentReceipts			is an InternationalAmount
		CurrentDisbursements	is an InternationalAmount
		CurrentTransfers		is an InternationalAmount
		Active
		ReportingPeriods		is a StudentActivityPeriodRange

	Transient Fields
		TransactionCurrencyCode is a Currency
			derive value from StudentActivitySchool.DefaultAccountingEntity.FunctionalCurrency

	Local Fields
		LocalStudentGroup						is a StudentRecord group
		LocalStudentActivityClass				is a StudentActivitySchoolClass

		LocalGeneralLedgerCloseConfiguration	is a GeneralLedgerCloseConfiguration
		LocalStudentActivityClosedPeriod		is a StudentActivityClosedPeriod
		LocalSchoolClosedPeriod					is a SchoolClosedPeriod
		LocalDerivedLatestPeriodEndingBalance	is an InternationalAmount
		LocalDerivedCurrentReceipts				is an InternationalAmount
		LocalDerivedCurrentDisbursements		is an InternationalAmount
		LocalDerivedCurrentTransfers			is an InternationalAmount
		CalculationByGroupComplete				is Boolean
		LocalDerivedBeginningBalance			is an InternationalAmount
		LocalDerivedReceipts					is an InternationalAmount
		LocalDerivedDisbursements				is an InternationalAmount
		LocalDerivedTransfers					is an InternationalAmount
		DerivedCalculationComplete				is Boolean

	Derived Fields
		LatestClosePeriodEndingBalance is a DerivedField
			type is like InternationalAmount
			return (first SchoolActivityAccountBalanceRel.PeriodEndingBalance)

		CurrentBalance is a DerivedField
			type is like InternationalAmount
			return (LatestClosePeriodEndingBalance + CurrentReceipts - CurrentDisbursements + CurrentTransfers)

		DerivedLatestClosePeriodEndingBalance is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return LatestClosePeriodEndingBalance
			if (CalculationByGroupComplete)
				return LocalDerivedLatestPeriodEndingBalance
			initialize LocalDerivedLatestPeriodEndingBalance	
			initialize LocalDerivedCurrentReceipts
			initialize LocalDerivedCurrentDisbursements	
			initialize LocalDerivedCurrentTransfers
			for each SchoolActivityAccount descendants
				LocalDerivedLatestPeriodEndingBalance	+= each.LatestClosePeriodEndingBalance
				LocalDerivedCurrentReceipts				+= each.CurrentReceipts
				LocalDerivedCurrentDisbursements		+= each.CurrentDisbursements
				LocalDerivedCurrentTransfers			+= each.CurrentTransfers
			CalculationByGroupComplete	= true
			return LocalDerivedLatestPeriodEndingBalance
		
		DerivedCurrentReceipts is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return CurrentReceipts
			if (CalculationByGroupComplete)
				return LocalDerivedCurrentReceipts
			initialize LocalDerivedLatestPeriodEndingBalance	
			initialize LocalDerivedCurrentReceipts
			initialize LocalDerivedCurrentDisbursements	
			initialize LocalDerivedCurrentTransfers
			for each SchoolActivityAccount descendants
				LocalDerivedLatestPeriodEndingBalance	+= each.LatestClosePeriodEndingBalance
				LocalDerivedCurrentReceipts				+= each.CurrentReceipts
				LocalDerivedCurrentDisbursements		+= each.CurrentDisbursements
				LocalDerivedCurrentTransfers			+= each.CurrentTransfers
			CalculationByGroupComplete	= true
			return LocalDerivedCurrentReceipts
		
		DerivedCurrentDisbursements is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return CurrentDisbursements
			if (CalculationByGroupComplete)
				return LocalDerivedCurrentDisbursements
			initialize LocalDerivedLatestPeriodEndingBalance	
			initialize LocalDerivedCurrentReceipts
			initialize LocalDerivedCurrentDisbursements	
			initialize LocalDerivedCurrentTransfers
			for each SchoolActivityAccount descendants
				LocalDerivedLatestPeriodEndingBalance	+= each.LatestClosePeriodEndingBalance
				LocalDerivedCurrentReceipts				+= each.CurrentReceipts
				LocalDerivedCurrentDisbursements		+= each.CurrentDisbursements
				LocalDerivedCurrentTransfers			+= each.CurrentTransfers
			CalculationByGroupComplete	= true
			return LocalDerivedCurrentDisbursements
		
		DerivedCurrentTransfers is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return CurrentTransfers
			if (CalculationByGroupComplete)
				return LocalDerivedCurrentTransfers
			initialize LocalDerivedLatestPeriodEndingBalance	
			initialize LocalDerivedCurrentReceipts
			initialize LocalDerivedCurrentDisbursements	
			initialize LocalDerivedCurrentTransfers
			for each SchoolActivityAccount descendants
				LocalDerivedLatestPeriodEndingBalance	+= each.LatestClosePeriodEndingBalance
				LocalDerivedCurrentReceipts				+= each.CurrentReceipts
				LocalDerivedCurrentDisbursements		+= each.CurrentDisbursements
				LocalDerivedCurrentTransfers			+= each.CurrentTransfers
			CalculationByGroupComplete	= true
			return LocalDerivedCurrentTransfers
		
		DerivedCurrentBalance is a DerivedField
			type is like InternationalAmount
			return (DerivedLatestClosePeriodEndingBalance + DerivedCurrentReceipts - DerivedCurrentDisbursements + DerivedCurrentTransfers)

		DerivedBeginningBalance is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return DerivedSchoolActivityBalanceRel.BeginningBalance
			if (DerivedCalculationComplete)
				return LocalDerivedBeginningBalance
			initialize LocalDerivedBeginningBalance
			initialize LocalDerivedReceipts
			initialize LocalDerivedDisbursements
			initialize LocalDerivedTransfers
			for each ParentSchoolActivityBalanceRel
				LocalDerivedBeginningBalance	+= each.BeginningBalance
				LocalDerivedReceipts			+= each.PeriodReceipts
				LocalDerivedDisbursements		+= each.PeriodDisbursements
				LocalDerivedTransfers			+= each.PeriodTransfers
			DerivedCalculationComplete	= true
			return LocalDerivedBeginningBalance

		DerivedPeriodReceipts is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return DerivedSchoolActivityBalanceRel.PeriodReceipts
			if (DerivedCalculationComplete)
				return LocalDerivedReceipts
			initialize LocalDerivedBeginningBalance
			initialize LocalDerivedReceipts
			initialize LocalDerivedDisbursements
			initialize LocalDerivedTransfers
			for each ParentSchoolActivityBalanceRel
				LocalDerivedBeginningBalance	+= each.BeginningBalance
				LocalDerivedReceipts			+= each.PeriodReceipts
				LocalDerivedDisbursements		+= each.PeriodDisbursements
				LocalDerivedTransfers			+= each.PeriodTransfers
			DerivedCalculationComplete	= true
			return LocalDerivedReceipts
		
		DerivedPeriodDisbursements is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return DerivedSchoolActivityBalanceRel.PeriodDisbursements
			if (DerivedCalculationComplete)
				return LocalDerivedDisbursements
			initialize LocalDerivedBeginningBalance
			initialize LocalDerivedReceipts
			initialize LocalDerivedDisbursements
			initialize LocalDerivedTransfers
			for each ParentSchoolActivityBalanceRel
				LocalDerivedBeginningBalance	+= each.BeginningBalance
				LocalDerivedReceipts			+= each.PeriodReceipts
				LocalDerivedDisbursements		+= each.PeriodDisbursements
				LocalDerivedTransfers			+= each.PeriodTransfers
			return LocalDerivedDisbursements
		
		DerivedPeriodTransfers is a DerivedField
			type is like InternationalAmount
			if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				return DerivedSchoolActivityBalanceRel.PeriodTransfers
			if (DerivedCalculationComplete)
				return LocalDerivedTransfers
			initialize LocalDerivedBeginningBalance
			initialize LocalDerivedReceipts
			initialize LocalDerivedDisbursements
			initialize LocalDerivedTransfers
			for each ParentSchoolActivityBalanceRel
				LocalDerivedBeginningBalance	+= each.BeginningBalance
				LocalDerivedReceipts			+= each.PeriodReceipts
				LocalDerivedDisbursements		+= each.PeriodDisbursements
				LocalDerivedTransfers			+= each.PeriodTransfers
			DerivedCalculationComplete	= true
			return LocalDerivedTransfers
		
		DerivedPeriodEndingBalance is a DerivedField
			type is like InternationalAmount
			return (DerivedBeginningBalance + DerivedPeriodReceipts - DerivedPeriodDisbursements + DerivedPeriodTransfers)


	Context Fields
		StudentActivitySchoolType
		StudentActivityClosedPeriod

	Sets
		BySchoolActivityAccount
			duplicates
			Sort Order
				StudentActivityDistrict
				StudentActivitySchool
				SchoolActivityAccount.StudentActivityAccount

		ByStudentActivityAccount
			duplicates
			Sort Order
				StudentActivityDistrict
				SchoolActivityAccount.StudentActivityAccount
				StudentActivitySchool

	Relations
		RelatedParentSchoolActivityRel
			one-to-one relation to SchoolActivityAccount
			Field Mapping uses symbolic key
				related.StudentActivityDistrict							= StudentActivityDistrict
				related.StudentActivitySchool							= StudentActivitySchool
				related.SchoolActivityAccount.StudentActivityAccount	= SchoolActivityAccount.StudentActivityAccount.ParentStudentActivityAccount
				related.SchoolActivityAccount.SubActivity				= blank

		SchoolActivityAccountBalanceRel
			one-to-many relation to SchoolActivityAccountBalance
			Field Mapping uses ByDescendingDate
				related.StudentActivityDistrict			= StudentActivityDistrict
				related.StudentActivitySchool			= StudentActivitySchool
				related.SchoolActivityAccount			= SchoolActivityAccount

		DerivedSchoolActivityBalanceRel
			one-to-many relation to SchoolActivityAccountBalance
			Field Mapping uses ByDescendingDate
				related.StudentActivityDistrict			= StudentActivityDistrict
				related.StudentActivitySchool			= StudentActivitySchool
				related.SchoolActivityAccount			= SchoolActivityAccount
				related.StudentActivityClosedPeriod		= StudentActivityClosedPeriod

		ParentSchoolActivityBalanceRel
			one-to-many relation to SchoolActivityAccountBalance
			Field Mapping uses ByParentActivity
				related.StudentActivityDistrict			= StudentActivityDistrict
				related.StudentActivitySchool			= StudentActivitySchool
				related.StudentActivityClosedPeriod		= StudentActivityClosedPeriod
				related.ParentStudentActivityAccount	= SchoolActivityAccount.StudentActivityAccount

		StudentActivityReceiptDetailRel
			one-to-many relation to StudentActivityReceiptDetail
			Field Mapping uses ByStudentActivityAccount
				related.StudentActivityDistrict	= StudentActivityDistrict
				related.StudentActivitySchool	= StudentActivitySchool
				related.SchoolActivityAccount	= SchoolActivityAccount
			Instance Selection	
				where (related.Status	= 1
				or     related.Status	= 2)
		
		StudentActivityBankCreditsRel
			one-to-many relation to StudentActivityBankTransDetail
			Field Mapping uses ByStudentActivityAccount
				related.StudentActivityDistrict	= StudentActivityDistrict
				related.StudentActivitySchool	= StudentActivitySchool
				related.SchoolActivityAccount	= SchoolActivityAccount
				related.Status					= 1
			Instance Selection
				where (!related.StudentActivityBankTransaction.BankTransactionType.Transfer
				and     related.StudentActivityBankTransaction.AmountType.BankCredit)

		StudentActivityDisbursementRel
			one-to-many relation to StudentActivityBankTransDetail
			Field Mapping uses ByStudentActivityAccount
				related.StudentActivityDistrict	= StudentActivityDistrict
				related.StudentActivitySchool	= StudentActivitySchool
				related.SchoolActivityAccount	= SchoolActivityAccount
				related.Status					= 1
			Instance Selection
				where (!related.StudentActivityBankTransaction.BankTransactionType.Transfer
				and     related.StudentActivityBankTransaction.AmountType.BankDebit)

				
		StudentActivityTransferDetailRel is a StudentActivityTransferDetail set
			Instance Selection
				where (related.Status	= 1)

		StudentActivityBankTransferRel
			one-to-many relation to StudentActivityBankTransDetail
			Field Mapping uses ByStudentActivityAccount
				related.StudentActivityDistrict	= StudentActivityDistrict
				related.StudentActivitySchool	= StudentActivitySchool
				related.SchoolActivityAccount	= SchoolActivityAccount
				related.Status					= 1
			Instance Selection
				where (related.StudentActivityBankTransaction.BankTransactionType.Transfer)

		SubActivityRel
			one-to-many relation to SchoolActivityAccount
			Field Mapping uses BySchoolActivityAccount
				related.StudentActivityDistrict							= StudentActivityDistrict
				related.StudentActivitySchool							= StudentActivitySchool
				related.SchoolActivityAccount.StudentActivityAccount	= SchoolActivityAccount.StudentActivityAccount

		StudentRecordGroupRel
			one-to-many relation to StudentRecord
			Field Mapping uses ByStudentActivitySchool
				related.StudentActivityDistrict		= StudentActivityDistrict
				related.StudentActivitySchool		= StudentActivitySchool
			Instance Selection
				where (related.StudentRecord within LocalStudentGroup)

		StudentEnrollmentRel
			one-to-many relation to StudentEnrollment
			Field Mapping uses symbolic key
				related.StudentActivityDistrict		= StudentActivityDistrict
				related.StudentActivitySchool		= StudentActivitySchool
			Instance Selection
				where (related.StudentActivitySchoolClass	= LocalStudentActivityClass)

		MultiPeriodSchoolActivityAccountBalanceRel
			one-to-many relation to SchoolActivityAccountBalance
			Field Mapping uses ByAscendingDate
				related.StudentActivityDistrict			= StudentActivityDistrict
				related.StudentActivitySchool			= StudentActivitySchool
				related.SchoolActivityAccount			= SchoolActivityAccount
			Instance Selection
				where (related.StudentActivityClosedPeriod 	>= ReportingPeriods.FromPeriod
				and    related.StudentActivityClosedPeriod	<= ReportingPeriods.ToPeriod)







				
	Conditions
		SchoolActivityRecordExists
			when (SchoolActivityAccount exists)
			
		TransactionsExist
			when (SchoolActivityAccountBalanceRel	exists
			or    StudentActivityReceiptDetailRel	exists
			or    StudentActivityDisbursementRel	exists
			or    StudentActivityTransferDetailRel	exists)

		NonAssetPostingAccount
			when (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail
			and   !SchoolActivityAccount.StudentActivityAccount.StudentActivityType.Asset
			and   Active)			

		HasParent
			when (ParentSchoolActivityAccount entered)

    	HasActivityDetail
    		restricted
    		when (SchoolActivityAccount children exist)

		HasStudentActivity
			when (StudentAssignedActivity set exists)

		HasCurrentBalances
			when (LatestClosePeriodEndingBalance	entered
			or    CurrentReceipts					entered
			or    CurrentDisbursements				entered
			or    CurrentTransfers					entered)

		HasDerivedCurrentBalances
			when (DerivedLatestClosePeriodEndingBalance	entered
			or    DerivedCurrentReceipts				entered
			or    DerivedCurrentDisbursements			entered
			or    DerivedCurrentTransfers				entered)

		HasDerivedBalances
			when (DerivedBeginningBalance				entered
			or    DerivedPeriodReceipts					entered
			or    DerivedPeriodDisbursements			entered
			or    DerivedPeriodTransfers				entered)

		HasReceiptDetails
			when (StudentActivityReceiptDetailRel exists)
			
		HasBankReceiptDetails	
			when (StudentActivityBankCreditsRel exists)

		HasDisbursementDetails
			when (StudentActivityDisbursementRel exists)
			
		HasTransferDetails
			when (StudentActivityTransferDetailRel exists)
		
		HasBankTransferDetails
			when (StudentActivityBankTransferRel exists)

		HasTransactionDetails
			when (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail
			and  (HasReceiptDetails
			or    HasBankReceiptDetails
			or    HasDisbursementDetails
			or    HasTransferDetails
			or    HasBankTransferDetails))
			
		ReportPeriodRangeEntered
			when (ReportingPeriods.FromPeriod entered
			and   ReportingPeriods.ToPeriod entered)




	Field Rules
		SchoolActivityAccount.SubActivity
			constraint (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				"SubActivityOnlyAllowedForDetailLevelActivities"

		GroupAllSubActivities
			constraint (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
				"GroupAllSubActivitiesOnlyAllowedForDetailLevelActivities"

		FeeAmount
			constraint (!SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Group)
				"FeeAmountNotAllowedForGroupActivities"
			initial value is SchoolActivityAccount.StudentActivityAccount.FeeAmount
			default to SchoolActivityAccount.StudentActivityAccount.FeeAmount
		
		Description
			default to SchoolActivityAccount.StudentActivityAccount.Description

		GLAccount
			if (GLAccount	entered
			or  SchoolActivityAccount.StudentActivityAccount.GLAccount	entered)
				if (GLAccount !entered)
					if (StudentActivitySchool.DefaultAccounting entered)
						GLAccount	= StudentActivitySchool.DefaultAccounting
						if (GLAccount.ToAccountingEntity not entered)
                            GLAccount.ToAccountingEntity = SchoolActivityAccount.StudentActivityAccount.GLAccount.ToAccountingEntity
						if (GLAccount.AccountingUnit not entered)
                            GLAccount.AccountingUnit = SchoolActivityAccount.StudentActivityAccount.GLAccount.AccountingUnit
						if (GLAccount.GeneralLedgerChartAccount not entered)
                            GLAccount.GeneralLedgerChartAccount = SchoolActivityAccount.StudentActivityAccount.GLAccount.GeneralLedgerChartAccount
						if (GLAccount.Project not entered)
                            GLAccount.Project = SchoolActivityAccount.StudentActivityAccount.GLAccount.Project
						if (GLAccount.FinanceDimension1 not entered)
                            GLAccount.FinanceDimension1 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension1
						if (GLAccount.FinanceDimension2 not entered)
                            GLAccount.FinanceDimension2 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension2
						if (GLAccount.FinanceDimension3 not entered)
                            GLAccount.FinanceDimension3 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension3
						if (GLAccount.FinanceDimension4 not entered)
                            GLAccount.FinanceDimension4 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension4
						if (GLAccount.FinanceDimension5 not entered)
                            GLAccount.FinanceDimension5 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension5
						if (GLAccount.FinanceDimension6 not entered)
                            GLAccount.FinanceDimension6 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension6
						if (GLAccount.FinanceDimension7 not entered)
                            GLAccount.FinanceDimension7 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension7
						if (GLAccount.FinanceDimension8 not entered)
                            GLAccount.FinanceDimension8 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension8
						if (GLAccount.FinanceDimension9 not entered)
                            GLAccount.FinanceDimension9 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension9
						if (GLAccount.FinanceDimension10 not entered)
                            GLAccount.FinanceDimension10 = SchoolActivityAccount.StudentActivityAccount.GLAccount.FinanceDimension10
					else
						GLAccount	= SchoolActivityAccount.StudentActivityAccount.GLAccount
			
			
		CurrentReceipts
			cannot be changed
		
		CurrentDisbursements
			cannot be changed
			
		CurrentTransfers
			cannot be changed
			
		ReportingPeriods
			constraint (ReportingPeriods.FromPeriod < StudentActivitySchool.CurrentPeriod)
				"FromPeriodMustBePriorToCurrentPeriod"
			constraint (ReportingPeriods.ToPeriod < StudentActivitySchool.CurrentPeriod)
				"ToPeriodMustBePriorToCurrentPeriod"
			
  	Attach Rules
  		if (parentcontext.name != "SchoolActivityAccountBalance")
			constraint (Active)
				"ActivityIsInactive"

	Actions
		AssignToStudent is an Instance Action
			valid when (NonAssetPostingAccount)
			Parameters
				Student				is a StudentRecord
				StudentGroup		is a StudentRecord group
				AllStudentsInClass	is a StudentActivitySchoolClass

			Parameter Rules
				Student
					constraint (!StudentGroup entered)
						"OnlyOneStudentOptionCanBeEntered"
					constraint (!AllStudentsInClass entered)
						"OnlyOneStudentOptionCanBeEntered"
				StudentGroup
					constraint (!AllStudentsInClass entered)
						"OnlyOneStudentOptionCanBeEntered"


			Action Rules
				if (Student entered)
					invoke AssignActivity
						invoked.PrmStudentActivitySchool	= StudentActivitySchool
						invoked.PrmStudentRecord			= Student
				else
					if (StudentGroup entered)
						LocalStudentGroup		= StudentGroup
						for each StudentRecordGroupRel
							invoke AssignActivity
								invoked.PrmStudentActivitySchool	= StudentActivitySchool
								invoked.PrmStudentRecord			= each.StudentRecord
					else
						LocalStudentActivityClass	= AllStudentsInClass
						for each StudentEnrollmentRel
							invoke AssignActivity
								invoked.PrmStudentActivitySchool	= StudentActivitySchool
								invoked.PrmStudentRecord			= each.StudentRecord
								


		AssignActivity is an Instance Action
			restricted
			Parameters
				PrmStudentActivitySchool	is a StudentActivitySchool
				PrmStudentRecord			is a StudentRecord
				
			Local Fields
				LocalPostDate	is TimeStamp

			Action Rules
				constraint (!SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Group)
					"CannotAssignGroupLevelActivity"
					
				if (GroupAllSubActivities)
					LocalPostDate	= current timestamp
					for each SubActivityRel
						invoke Create StudentAssignedActivityDetail
							invoked.StudentActivityDistrict					= StudentActivityDistrict
							invoked.StudentActivitySchool					= PrmStudentActivitySchool
							invoked.StudentRecord							= PrmStudentRecord
							invoked.StudentAssignedActivityDetail.PostDate	= LocalPostDate
							invoked.SchoolActivityAccount					= each.SchoolActivityAccount

				else
					invoke Create StudentAssignedActivityDetail
						invoked.StudentActivityDistrict			= StudentActivityDistrict
						invoked.StudentActivitySchool			= PrmStudentActivitySchool
						invoked.StudentRecord					= PrmStudentRecord
						invoked.SchoolActivityAccount			= SchoolActivityAccount

							
						
		AssignActivityToReceipt is an Instance Action
			valid when (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
			Parameters
				ReceiptNumber	is a StudentActivityReceipt
				

			Action Rules
				constraint (!SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Group)
					"CannotAssignGroupLevelActivity"
					
				constraint (ReceiptNumber.Status.Entered)
					"CannotAssignActivitiesToReleasedReceipts"
				
				invoke Create Entered StudentActivityReceiptDetail
					invoked.StudentActivityDistrict	= StudentActivityDistrict
					invoked.StudentActivitySchool	= StudentActivitySchool
					invoked.StudentActivityReceipt	= ReceiptNumber
					invoked.SchoolActivityAccount	= SchoolActivityAccount


		UpdateDescription is an Instance Action
			restricted
			Parameters
				OldDescription	is Alpha 60
				NewDescription	is Alpha 60
			
			Action Rules
				if (Description	= OldDescription)
					Description	= NewDescription
				
		

		CreateParentAccount is a Create Action
			restricted
			Entrance Rules
				if (SchoolActivityAccount.StudentActivityAccount.ParentStudentActivityAccount entered
				and !RelatedParentSchoolActivityRel exists)
					invoke CreateParentAccount SchoolActivityAccount
						invoked.StudentActivityDistrict							= StudentActivityDistrict
						invoked.StudentActivitySchool							= StudentActivitySchool
						invoked.SchoolActivityAccount.StudentActivityAccount	= SchoolActivityAccount.StudentActivityAccount.ParentStudentActivityAccount
						invoked.SchoolActivityAccount.SubActivity				= blank
						invoked.Active											= true

			Exit Rules
				ParentSchoolActivityAccount	= SchoolActivityAccount.StudentActivityAccount.ParentStudentActivityAccount


		ActivityBeginningBalance  is an Instance Action
			valid when (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
			Parameters
				BeginningBalanceAmount			is an InternationalAmount
				
			Parameter Rules
				BeginningBalanceAmount
					initial value is last SchoolActivityAccountBalanceRel.BalanceAdjustment
					
			Local Fields
				LocalSchoolActivityAccountBalance	is a SchoolActivityAccountBalance view				
			
			Action Rules

				LocalGeneralLedgerCloseConfiguration	= StudentActivityDistrict.SchoolCalendarPeriodGroup
				

				if (SchoolActivityAccountBalanceRel exists)
					LocalStudentActivityClosedPeriod	= last SchoolActivityAccountBalanceRel.StudentActivityClosedPeriod
					
					invoke AdjustBeginningBalance last SchoolActivityAccountBalanceRel
						invoked.BalanceAdjustmentAmount			= (BeginningBalanceAmount - last SchoolActivityAccountBalanceRel.BalanceAdjustment)
						if (SchoolActivityAccount.GLAccount entered)
							if (SchoolActivityAccount.StudentActivityAccount.StudentActivityType.Asset)
								invoked.PostedBalanceAdjustmentAmount		= (BeginningBalanceAmount - last SchoolActivityAccountBalanceRel.BalanceAdjustment)
							else
								invoked.PostedBalanceAdjustmentAmount		= (last SchoolActivityAccountBalanceRel.BalanceAdjustment - BeginningBalanceAmount)
				else
					LocalStudentActivityClosedPeriod	= StudentActivitySchool.CurrentPeriod
	 				invoke Update LocalStudentActivityClosedPeriod
	 					invoked.StudentActivityDistrict	= StudentActivityDistrict
					invoke Update LocalSchoolClosedPeriod
					invoke Create  SchoolActivityAccountBalance
						assign result to LocalSchoolActivityAccountBalance
						invoked.StudentActivityDistrict		= StudentActivityDistrict


						invoked.StudentActivityClosedPeriod	= LocalStudentActivityClosedPeriod
						invoked.StudentActivitySchool		= StudentActivitySchool
						invoked.SchoolActivityAccount		= SchoolActivityAccount
						invoked.BalanceAdjustment			= BeginningBalanceAmount
						if (SchoolActivityAccount.GLAccount entered)
							if (SchoolActivityAccount.StudentActivityAccount.StudentActivityType.Asset)
								invoked.PostedBalanceAdjustment		= BeginningBalanceAmount
							else
								invoked.PostedBalanceAdjustment		= (BeginningBalanceAmount	* -1)
					invoke UpdateBalanceAndBalanceDetail LocalSchoolActivityAccountBalance.SchoolActivityAccountBalance
						invoked.AdjustmentAmount		= LocalSchoolActivityAccountBalance.BalanceAdjustment
						invoked.PostedAdjustmentAmount	= LocalSchoolActivityAccountBalance.PostedBalanceAdjustment

		
		UpdateCurrentBalances is an Instance Action
			restricted
			Parameters
				PrmCurrentReceipts		is an InternationalAmount		
				PrmCurrentDisbursements	is an InternationalAmount		
				PrmCurrentTransfers		is an InternationalAmount		

			Action Rules
				CurrentReceipts			= (CurrentReceipts + PrmCurrentReceipts)
				CurrentDisbursements	= (CurrentDisbursements + PrmCurrentDisbursements)
				CurrentTransfers		= (CurrentTransfers + PrmCurrentTransfers)


		RebuildCurrentBalances is an Instance Action
			restricted
			Action Rules
				if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Detail)
					CurrentReceipts			= (sum StudentActivityReceiptDetailRel.DetailAmount + sum StudentActivityBankCreditsRel.BankTransDetailAmount)
					CurrentDisbursements	= (sum StudentActivityDisbursementRel.BankTransDetailAmount)
					CurrentTransfers		= (sum StudentActivityTransferDetailRel.TransferDetailAmount + sum StudentActivityBankTransferRel.SignedTransactionDetailAmount)


		Create is a Create Action
			Field Rules
				CurrentReceipts
					cannot be entered
				
				CurrentDisbursements
					cannot be entered
					
				CurrentTransfers
					cannot be entered

			Entrance Rules
				if (SchoolActivityAccount.StudentActivityAccount.ParentStudentActivityAccount entered
				and !RelatedParentSchoolActivityRel exists)
					invoke CreateParentAccount SchoolActivityAccount
						invoked.StudentActivityDistrict							= StudentActivityDistrict
						invoked.StudentActivitySchool							= StudentActivitySchool
						invoked.SchoolActivityAccount.StudentActivityAccount	= SchoolActivityAccount.StudentActivityAccount.ParentStudentActivityAccount
						invoked.SchoolActivityAccount.SubActivity				= blank
						invoked.Active											= true

			Exit Rules	
				if (SchoolActivityAccount.StudentActivityAccount.ActivityLevel.Group
				and SchoolActivityAccount.StudentActivityAccount.HasChildren)
					invoke AddActivityToSchool SchoolActivityAccount.StudentActivityAccount
						invoked.School		= StudentActivitySchool	

				ParentSchoolActivityAccount	= SchoolActivityAccount.StudentActivityAccount.ParentStudentActivityAccount

				if (GroupAllSubActivities)
					invoke Update SubActivityRel
						invoked.GroupAllSubActivities	= true		

				if (first SubActivityRel.GroupAllSubActivities)
					GroupAllSubActivities	= true

		Update is an Update Action
					
			Action Rules




					
			Exit Rules
				if (GroupAllSubActivities changed)
					invoke UpdateGroupedSubactivities SubActivityRel
						invoked.GroupAllSubActivities	= GroupAllSubActivities
		
		UpdateGroupedSubactivities is an Update Action
			restricted

		Delete is a Delete Action		 
