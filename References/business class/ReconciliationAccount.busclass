ReconciliationAccount  is a BusinessClass
	owned by reconciliation
	prefix is RECM

	Ontology
		symbolic key is ReconciliationAccount 
		
    Patterns
    	implements ContextualParent

	Persistent Fields								
		LevelType							is Numeric 1
			default label is "Type"
			States
				Account			value is 0
				Group			value is 1
				NonAccount		value is 2
		ReconciliationGroup					is a Name	 
			holds pii
		ReconciliationGroupMethod			is Numeric 1
			default label is "ReconciliationMethod"
			States
				Consolidated	value is 0
				Independent		value is 1
		NonAccountReconciliation			is a Name	 
			holds pii
		ReconciliationCodeBlock
			default label is "ReconciliationAccount"
		DimensionCodeValue					is AlphaUpper 15
		Description							is Alpha up to 100
		Purpose								is Text
		ReconciliationAccountType
		ReconcileFrequency
		Risk								is Numeric 1
			States
				Low				value is 0
				Medium			value is 1
				High			value is 2
		Priority							is Numeric 1
			States
				Low				value is 0
				Medium			value is 1
				High			value is 2
		ReconciliationAccountGroup		
		RequiresApproval					is Boolean
		ApprovalCode
    	CashManagementAccount
    	CloseTask
    	FinanceTeam
			default label is "Team"
    	AssignedResource					is a FinanceTeamMember
    		default label is "TeamMember"
			delete ignored
		RequireSupportingDoco				is Boolean
			default label is "RequiresSupportingDocumentation"
		Active
		DetailToGLReconciliation			is Boolean
		LineMatchField						is Alpha 200
			Text Variables
				TransactionNumber
				TransactionDate
				TransactionAmount
				Currency
				UnitsAmount
				SystemCode
				SourceCode
				Reference
				Description
		CurrentReconMatchNumber				is a TransactionReconDetail
    		delete ignored
		FinancialForm						is Alpha 6 	
		NewAccount							is Boolean
		CloseConfiguration					is a GeneralLedgerCloseConfiguration
		BackgroundGroupAsyncId 				is an AsyncActionRequest
			delete ignored
			disable Auditing
		ReconciliationPolicy
		CurrentReconciliationPeriod			is a GeneralLedgerClosePeriod
		DetailReconciliationMethod			is Numeric 1
			States
				UseDetailReconciliationTemplates	value is 1
				UseDetailReconciliationMatchRules	value is 2
		DetailReconciliationMatchRuleGroup
		LoadInterfaceTransactions			is Boolean		
		LoadGeneralLedgerTransactions		is Boolean		
			default label is "LoadGlobalLedgerTransactions"
		GeneralLedgerTransactionLevel		is Numeric 1	
			default label is "GlobalLedgerTransactionLevel"
			States
				GeneralLedgerTransaction			value is 1
					default label is "GlobalLedgerTransaction"
				GeneralLedgerTransactionDetail		value is 2
					default label is "GlobalLedgerTransactionDetail"
		ListOverListManualReconView 		is Boolean
		DetailReconciliationCurrency
		DetailReconciliationSign
		PeriodWithinQuarter					

	Transient Fields
		Currency
			derive value from DerivedCurrency
		BypassActiveCodeBlockEdit
			
	Local Fields
		LocalReconciliationManagementGroup	is like ReconciliationManagementGroup
		LocalReconciliationAccountStructure	is like ReconciliationAccountStructure
		LocalCloseConfiguration				is like GeneralLedgerCloseConfiguration
		LocalGeneralLedgerClosePeriod		is a GeneralLedgerClosePeriod
		LocalCloseTask						is a CloseTask
		LocalGeneralLedgerCalendar			is a GeneralLedgerCalendar
		BackgroundGroup						is AlphaUpper up to 70
		OldBackgroundGroup					is AlphaUpper up to 70
		FirstParentIteration				is Boolean
		LocalParentReportGroupStructure 	is Alpha up to 500
		LocalReconciliationGroup			is a Name	 
			holds pii
		LocalNonAccountReconciliation		is a Name	 
			holds pii
		LocalPeriodEndDate					is Date
		
	Derived Fields
		CurrentMatchedAmount is a DerivedField
			type is like InternationalAmount
			default label is "CurrentSelectedAmount"
			if (CurrentReconMatchNumber entered)
				return sum CurrentReconMatchNumber descendants.SignedAmount.CurrencyAmount
			else
				return blank

		ReconciliationAccountControl is a StringField
			type is Alpha up to 30
			ReconciliationManagementGroup
			","
			ReconciliationAccountStructure
			","
			ReconciliationAccount
		
		ParentReportGroupStructure is a DerivedField
			type is Alpha up to 500
			if (ReconciliationAccountGroup entered)
				FirstParentIteration = true
				
				for each ReconciliationAccountGroup ancestors
					if (FirstParentIteration = true)
						LocalParentReportGroupStructure = each.ReconciliationAccountGroup
						FirstParentIteration = false
					else
						LocalParentReportGroupStructure = each.ReconciliationAccountGroup + "-" + LocalParentReportGroupStructure
						
				return LocalParentReportGroupStructure
		
		DerivedLevelType is a DerivedField 
			type is Alpha 12
			if (LevelType.Account)
				return "Account"
			else
			if (LevelType.Group)
				return "Group"
			else
				return "NonAccount"

		PeriodWithinQuarterDerived is a DerivedField 
			type is Numeric 1 
			if (ReconciliationAccount.ReconcileFrequency.Quarterly) 
				if (MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 1
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 4
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 7
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 10)
					return 1
				else
				if (MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 2
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 5
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 8
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 11)
					return 2
				else
				if (MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 3
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 6
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 9
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 12
				or  MonthPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod.Month = 13)
					return 3
		
		DerivedCurrency is a DerivedField 
			type is like Currency
			if (ReconciliationAccountStructure.ReconciliationCurrency.EntityFunctional)
				return ReconciliationCodeBlock.AccountingEntity.FunctionalCurrency
			else
			if (ReconciliationAccountStructure.ReconciliationCurrency.Project)
				return ReconciliationAccountStructure.ReportingBasis.ProjectStructure.Currency
			else
			if (ReconciliationAccountStructure.ReconciliationCurrency.Report1)
				return ReconciliationManagementGroup.ReportCurrencyOne
			else
			if (ReconciliationAccountStructure.ReconciliationCurrency.Report2)
				return ReconciliationManagementGroup.ReportCurrencyTwo
			else
			if (ReconciliationAccountStructure.ReconciliationCurrency.Report3)
				return ReconciliationManagementGroup.ReportCurrencyThree
			else
			if (ReconciliationAccountStructure.ReconciliationCurrency.Report4)
				return ReconciliationManagementGroup.ReportCurrencyFour
			else
			if (ReconciliationAccountStructure.ReconciliationCurrency.Report5)
				return ReconciliationManagementGroup.ReportCurrencyFive

		InactiveAccountingEntityErrorMessage is a MessageField
			"GlobalLedger<actor.context.FinanceEnterpriseGroup.AccountingEntityLabel>IsInactive"

		InactiveAccountingUnitErrorMessage is a MessageField
			"GlobalLedger<actor.context.FinanceEnterpriseGroup.AccountingUnitLabel>IsInactive"
		
		InactiveAccountErrorMessage is a MessageField
			"GlobalLedger<actor.context.FinanceEnterpriseGroup.AccountLabel>IsInactive"

		NonFinishedTriggersErrorMessage is a MessageField
			"<first BackgroundGroupNonFinishedTriggersRel.StatusMessage>"

	Sets
		ByAssignedResource
			Sort Order
				ReconciliationManagementGroup
				AssignedResource
				Active
				ReconciliationAccountStructure
				ReconciliationAccount

		ByCloseTask
			Sort Order
				ReconciliationManagementGroup
				CloseTask
				Active
				ReconciliationAccountStructure
				ReconciliationAccount

		ByNewAccount
			Sort Order
				ReconciliationManagementGroup
				ReconciliationAccountStructure
				NewAccount	descending
				ReconciliationAccount

		ByGeneralLedgerChartAccount
			Sort Order
				ReconciliationManagementGroup
				ReconciliationCodeBlock.GeneralLedgerChartAccount
				ReconciliationCodeBlock.AccountingEntity
				ReconciliationCodeBlock.AccountingUnit
				ReconciliationCodeBlock.Project
				DimensionCodeValue
				ReconciliationAccountStructure
				ReconciliationAccount
		
		ByReconciliationCodeBlock
			Sort Order
				ReconciliationManagementGroup
				ReconciliationAccountStructure
				ReconciliationCodeBlock.AccountingEntity
				ReconciliationCodeBlock.GeneralLedgerChartAccount
	        	ReconciliationCodeBlock.AccountingUnit
	            ReconciliationCodeBlock.Project
				DimensionCodeValue
				ReconciliationGroup
				ReconciliationAccount
		
		ByNonAccountReconciliation
			duplicates
			Sort Order
				ReconciliationManagementGroup
				ReconciliationAccountStructure
				NonAccountReconciliation

		ByCloseConfiguration
			Sort Order
				ReconciliationManagementGroup
				ReconciliationAccountStructure
				CloseConfiguration
				ReconciliationAccount
				
		ByLevelType
			Sort Order
				ReconciliationManagementGroup
				ReconciliationAccountStructure
				LevelType
				ReconciliationAccount
				
	Relations
		PeriodEndReconciliationRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByAccountPeriodDescending 
				related.ReconciliationManagementGroup  					= ReconciliationManagementGroup
				related.ReconciliationAccountStructure 					= ReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount	= ReconciliationAccount
				
		PeriodEndReconciliationByPeriodRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByAccountPeriodDescending 
				related.ReconciliationManagementGroup   												= ReconciliationManagementGroup
				related.ReconciliationAccountStructure  												= ReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount	  	    						= ReconciliationAccount
				related.PeriodEndReconciliation.GeneralLedgerCloseConfiguration 						= LocalCloseConfiguration
				related.PeriodEndReconciliation.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	= LocalGeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod

		OpenPeriodEndReconciliationRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByAccountPeriodDescending
				related.ReconciliationManagementGroup  					= ReconciliationManagementGroup
				related.ReconciliationAccountStructure 					= ReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount	= ReconciliationAccount
			Instance Selection
				where (related.Status.Open)
				
		OpenStandalonePeriodEndReconciliationRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByAccountPeriodDescending
				related.ReconciliationManagementGroup  					= ReconciliationManagementGroup
				related.ReconciliationAccountStructure 					= ReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount	= ReconciliationAccount
			Instance Selection
				where (related.Status.Open
				and    related.IsStandaloneAccount)
		
		OpenNonAccountPeriodEndReconciliationRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByAccountPeriodDescending
				related.ReconciliationManagementGroup  					= ReconciliationManagementGroup
				related.ReconciliationAccountStructure 					= ReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount	= ReconciliationAccount
			Instance Selection
				where (related.Status.Open
				and    related.LevelType.NonAccount)
				
		OpenGroupPeriodEndReconciliationRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByAccountPeriodDescending
				related.ReconciliationManagementGroup  					= ReconciliationManagementGroup
				related.ReconciliationAccountStructure 					= ReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount	= ReconciliationAccount
			Instance Selection
				where (related.Status.Open
				and	   related.LevelType.Group)
						
		OpenInprocessPeriodEndReconciliationRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByAccountPeriodDescending
				related.ReconciliationManagementGroup  					= ReconciliationManagementGroup
				related.ReconciliationAccountStructure 					= ReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount	= ReconciliationAccount
			Instance Selection
				where (related.ReconciliationCanBeUpdated) 
						
		CurrentMatchedTransactionsRel is a TransactionReconDetail set
			Instance Selection
				where (CurrentReconMatchNumber entered
				and   (related.TransactionReconDetail = CurrentReconMatchNumber
				or     related.ReconMatchNumber	= CurrentReconMatchNumber))

		AddToReconciliationGroupHelperRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
			Instance Selection
				where (related.LevelType.Account
    			and	  !related.ParentReconciliationAccount entered)
    		
		DuplicateReconciliationAccountRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByReconciliationCodeBlock
				related.ReconciliationManagementGroup					  = ReconciliationManagementGroup
				related.ReconciliationAccountStructure 					  = ReconciliationAccountStructure
				related.ReconciliationCodeBlock.AccountingEntity		  = ReconciliationCodeBlock.AccountingEntity
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = ReconciliationCodeBlock.GeneralLedgerChartAccount
	        	related.ReconciliationCodeBlock.AccountingUnit			  = ReconciliationCodeBlock.AccountingUnit
	            related.ReconciliationCodeBlock.Project					  = ReconciliationCodeBlock.Project
				related.DimensionCodeValue								  = ReconciliationCodeBlock.DimensionCodeValue
			Instance Selection
				where (related.ReconciliationAccount != ReconciliationAccount)
				
		MultipleReconciliationAccountAccountingEntityRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = ReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = ReconciliationCodeBlock.GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = ReconciliationCodeBlock.AccountingEntity
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingEntity
				and    related.ReconciliationAccountStructure != ReconciliationAccountStructure)
				
		MultipleReconciliationAccountAccountingUnitRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = ReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = ReconciliationCodeBlock.GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = ReconciliationCodeBlock.AccountingEntity
				related.ReconciliationCodeBlock.AccountingUnit			  = ReconciliationCodeBlock.AccountingUnit
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingUnit
				and    related.ReconciliationAccountStructure != ReconciliationAccountStructure)
		
		MultipleReconciliationAccountProjectRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = ReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = ReconciliationCodeBlock.GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = ReconciliationCodeBlock.AccountingEntity
				related.ReconciliationCodeBlock.AccountingUnit			  = blank
				related.ReconciliationCodeBlock.Project 				  = ReconciliationCodeBlock.Project
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type.Project
				and    related.ReconciliationAccountStructure != ReconciliationAccountStructure)
		
		MultipleReconciliationAccountDimensionRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByGeneralLedgerChartAccount
				related.ReconciliationManagementGroup					  = ReconciliationManagementGroup
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount = ReconciliationCodeBlock.GeneralLedgerChartAccount
				related.ReconciliationCodeBlock.AccountingEntity		  = ReconciliationCodeBlock.AccountingEntity
				related.ReconciliationCodeBlock.AccountingUnit			  = blank
				related.ReconciliationCodeBlock.Project 				  = blank
				related.DimensionCodeValue 								  = ReconciliationCodeBlock.DimensionCodeValue
			Instance Selection
				where (related.ReconciliationAccountStructure.ReconciliationLevel.Type >= 6
				and	   related.ReconciliationAccountStructure.ReconciliationLevel.Type = ReconciliationAccountStructure.ReconciliationLevel.Type
				and    related.ReconciliationAccountStructure != ReconciliationAccountStructure)
				
		ReconciliationAccountStructurePeriodRel
			one-to-one relation to ReconciliationAccountStructurePeriod
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup   = ReconciliationManagementGroup
				related.ReconciliationAccountStructure  = ReconciliationAccountStructure
				related.GeneralLedgerCloseConfiguration = LocalCloseConfiguration
 				related.GeneralLedgerClosePeriod		= LocalGeneralLedgerClosePeriod
 		
 		TransactionReconDetailRel
			one-to-many relation to TransactionReconDetail
			delete cascades
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup  	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
				related.ReconciliationAccount	  	   	= ReconciliationAccount
				
		SummaryTransactionReconDetailRel
			one-to-many relation to TransactionReconDetail
			Field Mapping uses BySummaryRecordsFirst
				related.ReconciliationManagementGroup	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
				related.ReconciliationAccount			= ReconciliationAccount
				related.SummaryRecord					= true
		
		NonSummaryTransactionReconDetailRel
			one-to-many relation to TransactionReconDetail
			Field Mapping uses BySummaryRecordsFirst
				related.ReconciliationManagementGroup	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
				related.ReconciliationAccount			= ReconciliationAccount
				related.SummaryRecord					= false
		
		SelectedTransactionReconDetailRel
			one-to-many relation using NonSummaryTransactionReconDetailRel
			Instance Selection
				where (related.SelectedForMatch)
		
		MatchedTransactionReconDetailRel
			one-to-many relation using SummaryTransactionReconDetailRel
			Instance Selection
				where (!related.SelectedForMatch)
		
		NonAdjustedMatchedTransactionReconDetailRel 
			one-to-many relation using SummaryTransactionReconDetailRel
			Instance Selection
				where (!related.SelectedForMatch
				and   !related.CreateDistribution
				and   !related.CreateReconcilingItem)
		
		UnmatchedTransactionReconDetailRel
			one-to-many relation using NonSummaryTransactionReconDetailRel 
			Instance Selection
				where (!related.ReconMatchNumber entered
				and    !related.SelectedForMatch)
								
		GLTransactionsLoadedInReconRel
			one-to-many relation using NonSummaryTransactionReconDetailRel 
			Instance Selection
				where (related.ReconTransactionType.GeneralLedger
				and   !related.ReconMatchNumber entered
				and   !related.SelectedForMatch)
		
		NonAdjustedGLTransactionsLoadedInReconRel 
			one-to-many relation using NonSummaryTransactionReconDetailRel 
			Instance Selection
				where (related.ReconTransactionType.GeneralLedger
				and   !related.ReconMatchNumber entered
				and   !related.SelectedForMatch
				and   !related.CreateDistribution
				and   !related.CreateReconcilingItem)
		
		AdjustedGLTransactionsLoadedInReconRel 
			one-to-many relation using NonSummaryTransactionReconDetailRel 
			Instance Selection
				where (related.ReconTransactionType.GeneralLedger
				and   !related.ReconMatchNumber entered
				and   !related.SelectedForMatch
				and   (related.CreateDistribution
				or     related.CreateReconcilingItem))
						
		GLTransactionTypesInReconRel
			one-to-many relation using NonSummaryTransactionReconDetailRel 
			Instance Selection
				where (related.ReconTransactionType.GeneralLedger)
				
		InterfacedTransactionsLoadedInReconRel
			one-to-many relation using NonSummaryTransactionReconDetailRel
			Instance Selection
				where (related.ReconTransactionType.InterfacedTransaction
				and   !related.ReconMatchNumber entered
				and   !related.SelectedForMatch)
		
		NonAdjustedInterfacedTransactionsLoadedInReconRel 
			one-to-many relation using NonSummaryTransactionReconDetailRel
			Instance Selection
				where (related.ReconTransactionType.InterfacedTransaction
				and   !related.ReconMatchNumber entered
				and   !related.SelectedForMatch
				and   !related.CreateDistribution
				and   !related.CreateReconcilingItem)
		
		AdjustedUnmatchedTransactionReconDetailRel 
			one-to-many relation using NonSummaryTransactionReconDetailRel 
			Instance Selection
				where (!related.ReconMatchNumber entered
				and    !related.SelectedForMatch
				and   (related.CreateDistribution
				or     related.CreateReconcilingItem))
						
		PeriodEndTransReconDetailRel
			one-to-many relation to PeriodEndTransReconDetail
			delete cascades
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup  	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
				related.ReconciliationAccount	  	   	= ReconciliationAccount
				related.GeneralLedgerCloseConfiguration = CloseConfiguration
  				related.GeneralLedgerClosePeriod		= LocalGeneralLedgerClosePeriod
  				
		BackgroundGroupNonFinishedTriggersRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = BackgroundGroupAsyncId 
			Instance Selection
				where (related.BackgroundGroup entered
				and	   related.NonFinishedTriggersExist)
		
		DuplicateReconciliationGroupRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByLevelType
				related.ReconciliationManagementGroup	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
				related.LevelType						= 1 
			Instance Selection
				where (related.ReconciliationAccount != ReconciliationAccount
				and	   related.ReconciliationGroup = LocalReconciliationGroup)
		
		DuplicateNonAccountReconciliationRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByLevelType
				related.ReconciliationManagementGroup	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
				related.LevelType						= 2 
			Instance Selection
				where (related.ReconciliationAccount != ReconciliationAccount
				and	   related.NonAccountReconciliation = LocalNonAccountReconciliation)
				
		ReconciliationAccountChildrenRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup	= ReconciliationManagementGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure
				related.ReconciliationAccount			= ReconciliationAccount children.ReconciliationAccount
		
		RecurringReconciliationDetailRel
			one-to-many relation to ReconciliationDetail
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup  = ReconciliationManagementGroup
				related.ReconciliationAccountStructure = ReconciliationAccountStructure
				related.ReconciliationAccount	  	   = ReconciliationAccount
			Instance Selection
				where (related.DetailType.ReconciliationDetail
				and	   related.Recurring)

		OpenScheduledReconciliationDetailRel
			one-to-many relation to ReconciliationDetail
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup  = ReconciliationManagementGroup
				related.ReconciliationAccountStructure = ReconciliationAccountStructure
				related.ReconciliationAccount	  	   = ReconciliationAccount
			Instance Selection
				where (related.DetailType.ReconciliationDetail
				and	   related.HasOpenScheduledReconciliationDetails)

		RecurringReconcilingItemRel
			one-to-many relation to ReconciliationDetail
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup  = ReconciliationManagementGroup
				related.ReconciliationAccountStructure = ReconciliationAccountStructure
				related.ReconciliationAccount	  	   = ReconciliationAccount
			Instance Selection
				where (related.DetailType.ReconcilingItem
				and	   related.Recurring)
		
		OpenScheduledReconcilingItemRel
			one-to-many relation to ReconciliationDetail
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup  = ReconciliationManagementGroup
				related.ReconciliationAccountStructure = ReconciliationAccountStructure
				related.ReconciliationAccount	  	   = ReconciliationAccount
			Instance Selection
				where (related.DetailType.ReconcilingItem
				and	   related.HasOpenScheduledReconcilingItems)

		MonthPeriodShadowRel 
			one-to-many relation to GeneralLedgerPeriodShadow 
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup      = ReconciliationManagementGroup 
				related.GeneralLedgerCalendar       = ReconciliationAccountStructure.ReportingBasis.GeneralLedgerCalendar 
				related.GeneralLedgerCalendarPeriod = LocalGeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod 
			Instance Selection 
				where (related.SummaryPeriodType.Month)

		GeneralLedgerClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = ReconciliationManagementGroup
				related.GeneralLedgerCloseConfiguration	 = LocalCloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date >= LocalPeriodEndDate)
		
		AccountingEntitySecurityGroupMemberRel
            one-to-one relation to AccountingEntityGroupMember
            Field Mapping uses part of key
            	related.FinanceEnterpriseGroup      = ReconciliationManagementGroup
                related.AccountingEntityGroup   = actor.context.AccountingEntitySecurityGroup.FinanceDimensionStructure
                related.AccountingEntity        = ReconciliationCodeBlock.AccountingEntity
		
				
    Conditions
    	ReconciliationAccountExists
			restricted
			when (ReconciliationAccount exists)
			
		HasTransactionReconDetails
    		restricted
    		when (TransactionReconDetailRel exists)

		ShowSaveDetailTransactionReconciliation
			restricted
			when (CurrentReconciliationPeriod entered
			and   TransactionReconDetailRel exists)	
			
		HasCurrentMatchRecords
			restricted
			when (CurrentMatchedTransactionsRel exists)

		InactiveAccountingEntity
			restricted
			when (ReconciliationCodeBlock entered
			and	  !ReconciliationCodeBlock.AccountingEntity.Status.Active)
			
		InactiveAccountingUnit
			restricted
			when (ReconciliationCodeBlock.AccountingUnit entered
			and	  !ReconciliationCodeBlock.AccountingUnit.Active)
			
		InactiveAccount
			restricted
			when (ReconciliationCodeBlock entered
			and	  !ReconciliationCodeBlock.GeneralLedgerChartAccount.Active)

		AccountInMultipleStructures
			restricted
			when ((ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingEntity
			and	   MultipleReconciliationAccountAccountingEntityRel exists)
			or    (ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingUnit
			and	   MultipleReconciliationAccountAccountingUnitRel exists)
			or	  (ReconciliationAccountStructure.ReconciliationLevel.Type.Project
			and	   MultipleReconciliationAccountProjectRel exists)
			or	  (ReconciliationAccountStructure.ReconciliationLevel.Type >= 6
			and	   MultipleReconciliationAccountDimensionRel exists))
		
		CanDeleteGLTransactions 
			restricted
			when (NonAdjustedGLTransactionsLoadedInReconRel exists)
			
		CanDeleteInterfacedTransactions 
			restricted
			when (NonAdjustedInterfacedTransactionsLoadedInReconRel exists)
		
		HasNonFinishedTriggers
			restricted
			when (BackgroundGroupNonFinishedTriggersRel exists)
		
		AccountGroupEntered
			restricted
			when (ReconciliationAccountGroup entered)
		
		HasSelectedTransactions
			restricted
			when (SelectedTransactionReconDetailRel exists)
		
		HasMatchedTransactions
			restricted
			when (MatchedTransactionReconDetailRel exists)
		
		HasUnmatchedTransactions
			restricted
			when (UnmatchedTransactionReconDetailRel exists)
		
		HasUnmatchedTransactionsWithAdjustments
			restricted
			when (AdjustedUnmatchedTransactionReconDetailRel exists)
			
		CanClearAllReconciliations 
			restricted
			when (NonAdjustedMatchedTransactionReconDetailRel exists)
			
		DisplayParentReportGroupStructure
			restricted
			when (ReconciliationAccountGroup entered
		    and	  ParentReportGroupStructure entered)
		
		HasParent
			restricted
			when (ParentReconciliationAccount entered)
			
		HasChild
    		restricted
    		when (ReconciliationAccount children exist)
    	
    	GroupWithChildren
    		restricted
    		when (LevelType.Group
    		and   HasChild)
    	
    	GroupWithNoChildren
    		restricted
    		when (LevelType.Group
    		and   !HasChild)
    	
    	IsConsolidatedGroup
    		restricted
    		when (LevelType.Group
    		and   ReconciliationGroupMethod.Consolidated)
    		
    	IsIndependentGroup
    		restricted
    		when (LevelType.Group
    		and   ReconciliationGroupMethod.Independent)
    		
    	IsAccountWithinGroup 
    		restricted
    		when (LevelType.Account
    		and   ParentReconciliationAccount entered)
    	
    	IsAccountWithinConsolidatedGroup
    		restricted
    		when (LevelType.Account
    		and   ParentReconciliationAccount entered
    		and   ParentReconciliationAccount.ReconciliationGroupMethod.Consolidated)
    		
    	IsAccountWithinIndependentGroup
    		restricted
    		when (LevelType.Account
    		and   ParentReconciliationAccount entered
    		and   ParentReconciliationAccount.ReconciliationGroupMethod.Independent)
    			
    	IsStandaloneAccount
    		restricted
    		when (LevelType.Account
    		and   !ParentReconciliationAccount entered)
    	
    	IsGroupOrStandalone
			restricted
			when (LevelType.Group	
			or	  IsStandaloneAccount)
			
		IsGroupStandaloneOrNonAccount
			restricted
			when (LevelType.Group	
			or	  IsStandaloneAccount
			or	  LevelType.NonAccount)
		
		IsGroupWithChildrenStandaloneOrNonAccount
			restricted
			when (GroupWithChildren	
			or	  IsStandaloneAccount
			or	  LevelType.NonAccount)
			
		IsConsolidatedGroupOrStandalone
			restricted
			when (IsConsolidatedGroup
			or	  IsStandaloneAccount)
			
		IsConsolidatedGroupStandaloneOrNonAccount
			restricted
			when (IsConsolidatedGroup
			or	  IsStandaloneAccount
			or	  LevelType.NonAccount)
		
		IsConsolidatedGroupStandaloneNonAccountOrAccountWithinIndependentGroup
			restricted
			when (IsConsolidatedGroup
			or	  IsStandaloneAccount
			or	  LevelType.NonAccount
			or	  IsAccountWithinIndependentGroup)
			
		IsConsolidatedGroupStandaloneOrAccountWithinIndependentGroup
			restricted
			when (IsConsolidatedGroup
			or	  IsStandaloneAccount
			or	  IsAccountWithinIndependentGroup)
				
    	CanAddToReconciliationGroup
    		restricted
    		when (ReconciliationAccountStructure.HasReconciliationGroups
    		and	  LevelType.Account
    		and	  !ParentReconciliationAccount entered)
		
		CanRemoveFromReconciliationGroup
			restricted
			when (ParentReconciliationAccount entered)
			
		CanDeleteAccount
			restricted
			when (LevelType.Account
			or    LevelType.NonAccount
			or	  GroupWithNoChildren)
		
		HasRecurringReconciliationDetails
			restricted
			when (RecurringReconciliationDetailRel exists)
		
		HasOpenScheduledReconciliationDetails
			restricted
			when (OpenScheduledReconciliationDetailRel exists)
				
		HasRecurringReconcilingItems
			restricted
			when (RecurringReconcilingItemRel exists)
		
		HasOpenScheduledReconcilingItems
			restricted
			when (OpenScheduledReconcilingItemRel exists)
		
		ShowAllAmortizations
			restricted
			when (ReconciliationAccountType.Prepaid
			and	  LevelType.Account)
			
		SecurityGroupAllowsAccess
			restricted
			when ((ReconciliationCodeBlock.AccountingEntity not entered)
			or   ((ReconciliationCodeBlock.AccountingEntity entered)
			and   (actor.context.AccountingEntitySecurityGroup = blank
			or    AccountingEntitySecurityGroupMemberRel exists)))

		AccountSetupForDetailReconciliations
			restricted
			when (!LevelType.Group
			and   DetailReconciliationMethod entered)
		
		LoadingBothGLAndInterfaceTransactions
			restricted
			when (LoadInterfaceTransactions
			and   LoadGeneralLedgerTransactions)
			
		LoadingBothSourcesUsingSameSign
			restricted
			when (LoadingBothGLAndInterfaceTransactions
			and   DetailReconciliationSign.SameSign)
		
		DetailReconciliationMethodEntered
			restricted
			when (DetailReconciliationMethod entered)

		HasDifferentCurrenciesInConsolidatedGroup
			when (ReconciliationAccountStructure.ReconciliationCurrency.EntityFunctional
			and   IsAccountWithinConsolidatedGroup
			and   first ReconciliationAccount siblings.ReconciliationAccount exists
			and   first ReconciliationAccount siblings.ReconciliationCodeBlock.AccountingEntity.FunctionalCurrency != ReconciliationCodeBlock.AccountingEntity.FunctionalCurrency)
				
	Field Rules
		ReconciliationGroup
			if (LevelType.Group)
				required
					"ReconciliationGroupIsRequired"
		
		NonAccountReconciliation
			if (LevelType.NonAccount)
				required
					"NonAccountReconciliationIsRequired"
							
		ReconciliationAccount
			if (LevelType.Account)
				constraint (!DuplicateReconciliationAccountRel exists)
					"ReconciliationAccountAlreadyExists"
				
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingEntity)
					constraint (!MultipleReconciliationAccountAccountingEntityRel exists)
						"ReconciliationAccountAlreadyExistsUnderReconciliationStructure<first MultipleReconciliationAccountAccountingEntityRel.ReconciliationAccountStructure>"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingUnit)
					constraint (!MultipleReconciliationAccountAccountingUnitRel exists)
						"ReconciliationAccountAlreadyExistsUnderReconciliationStructure<first MultipleReconciliationAccountAccountingUnitRel.ReconciliationAccountStructure>"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Project)
					constraint (!MultipleReconciliationAccountProjectRel exists)
						"ReconciliationAccountAlreadyExistsUnderReconciliationStructure<first MultipleReconciliationAccountProjectRel.ReconciliationAccountStructure>"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type >= 6)
					constraint (!MultipleReconciliationAccountDimensionRel exists)
						"ReconciliationAccountAlreadyExistsUnderReconciliationStructure<first MultipleReconciliationAccountDimensionRel.ReconciliationAccountStructure>"
							
		ReconciliationCodeBlock
			if (LevelType.Account)
				required
					"ReconciliationAccountIsRequired"
		
				constraint (ReconciliationCodeBlock.AccountingEntity entered)
					"<actor.context.FinanceEnterpriseGroup.AccountingEntityLabel>IsRequired"
				
				constraint (ReconciliationCodeBlock.GeneralLedgerChartAccount entered)
					"<actor.context.FinanceEnterpriseGroup.AccountLabel>IsRequired"
			
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.AccountingUnit)
					constraint (ReconciliationCodeBlock.AccountingUnit entered)
						"<actor.context.FinanceEnterpriseGroup.AccountingUnitLabel>IsRequired"
				else
	        	if (ReconciliationAccountStructure.ReconciliationLevel.Type.Project)
	        		constraint (ReconciliationCodeBlock.Project entered)
						"<actor.context.FinanceEnterpriseGroup.ProjectLabel>IsRequired"
	        	else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension1)
					constraint (ReconciliationCodeBlock.FinanceDimension1 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension1Label>IsRequired"
				else					
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension2)
					constraint (ReconciliationCodeBlock.FinanceDimension2 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension2Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension3)
					constraint (ReconciliationCodeBlock.FinanceDimension3 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension3Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension4)
					constraint (ReconciliationCodeBlock.FinanceDimension4 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension4Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension5)
					constraint (ReconciliationCodeBlock.FinanceDimension5 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension5Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension6)
					constraint (ReconciliationCodeBlock.FinanceDimension6 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension6Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension7)
					constraint (ReconciliationCodeBlock.FinanceDimension7 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension7Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension8)
					constraint (ReconciliationCodeBlock.FinanceDimension8 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension8Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension9)
					constraint (ReconciliationCodeBlock.FinanceDimension9 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension9Label>IsRequired"
				else
				if (ReconciliationAccountStructure.ReconciliationLevel.Type.Dimension10)
					constraint (ReconciliationCodeBlock.FinanceDimension10 entered)
						"<actor.context.FinanceEnterpriseGroup.FinanceDimension10Label>IsRequired"
					
		DimensionCodeValue
			force default to ReconciliationCodeBlock.DimensionCodeValue
			
		Description
			initial value is ReconciliationCodeBlock.GeneralLedgerChartAccount.AccountDescription
			default to ReconciliationCodeBlock.GeneralLedgerChartAccount.AccountDescription
			default to ReconciliationGroup
			default to NonAccountReconciliation
		
		ReconciliationGroupMethod
			if (ReconciliationGroupMethod changed 
			and IsConsolidatedGroup)					
				initialize ReconciliationAccountGroup 
					
		ReconciliationAccountType
			initial value is ReconciliationAccountType.Basic


			if (!ReconciliationGroupMethod.Independent)
				default to ReconciliationAccountType.Basic
			else 
				initialize ReconciliationAccountType
			if (IsConsolidatedGroup
			and ReconciliationAccountType changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.ReconciliationAccountType = ReconciliationAccountType
			if (IsAccountWithinConsolidatedGroup)
				cannot be changed
					"MustChangeAccountTypeAtTheGroupLevel"
							
		CashManagementAccount
			if (LevelType.Account
			and	ReconciliationAccountType.Cash)
				if (CashManagementAccount entered)
					constraint (ReconciliationCodeBlock.GeneralLedgerChartAccount = CashManagementAccount.GLAccount.GeneralLedgerChartAccount)
						"ReconciliationAccount<ReconciliationCodeBlock.GeneralLedgerChartAccount>MustMatchTheCashPostingAccountForCashManagementAccount<CashManagementAccount>"
				required
					"CashManagementAccountIsRequired"
			else
				initialize
								
		ReconcileFrequency
			initial value is ReconcileFrequency.Monthly
			default to ReconcileFrequency.Monthly
			if (LevelType.Group 
			and ReconcileFrequency changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.ReconcileFrequency = ReconcileFrequency
			if (IsAccountWithinGroup) 
				cannot be changed
					"MustChangeReconcileFrequencyAtTheGroupLevel"
				
		PeriodWithinQuarter
			if (ReconcileFrequency.Quarterly)
				required
			else 
				initialize
			if (LevelType.Group 
			and PeriodWithinQuarter changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.PeriodWithinQuarter = PeriodWithinQuarter
			if (IsAccountWithinGroup) 
				cannot be changed
					"MustChangePeriodWithinQuarterAtTheGroupLevel"
								
		Risk
			if (IsConsolidatedGroup
			and Risk changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.Risk = Risk
			if (IsAccountWithinConsolidatedGroup)
				cannot be changed
					"MustChangeRiskAtTheGroupLevel"
			if (IsIndependentGroup)
				cannot be changed
					"MustChangeRiskAtTheAccountLevel"
									
		Priority
			if (IsConsolidatedGroup
			and Priority changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.Priority = Priority
			if (IsAccountWithinConsolidatedGroup)
				cannot be changed
					"MustChangePriorityAtTheGroupLevel"
			if (IsIndependentGroup)
				cannot be changed
					"MustChangePriorityAtTheAccountLevel"
							
		ReconciliationAccountGroup
			constraint (!ReconciliationAccountGroup.HasChild)
                "CannotAttachSummaryReportGroupToAnAccount"
			if (!IsIndependentGroup
			and ReconciliationAccountGroup.ReconciliationAccountType entered)
				constraint (ReconciliationAccountType = ReconciliationAccountGroup.ReconciliationAccountType)
					"AccountType<ReconciliationAccountType>ForAccountMustMatchTheAccountType<ReconciliationAccountGroup.ReconciliationAccountType>ForReportGroup"
			if (ReconciliationAccountGroup changed)
				invoke UpdateReconciliationAccountGroup
					invoked.PrmReconciliationAccountGroup = ReconciliationAccountGroup
			if (IsConsolidatedGroup
			and ReconciliationAccountGroup changed)
				invoke UpdateReconciliationAccountGroup ReconciliationAccount children
					invoked.PrmReconciliationAccountGroup = ReconciliationAccountGroup
			if (IsAccountWithinConsolidatedGroup)
				cannot be changed
					"MustChangeReconciliationAccountGroupAtTheGroupLevel"
					
		RequiresApproval
			if (LevelType.Group 
			and RequiresApproval changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.RequiresApproval = RequiresApproval
			if (IsAccountWithinGroup) 
				cannot be changed
					"MustChangeRequiresApprovalAtTheGroupLevel"
										
		ApprovalCode
			if (RequiresApproval)
				required
					"AnApprovalCodeMustBeEnteredWhenTaskRequiresApproval"
			else
				initialize
				
			constraint (ApprovalCode.HasApprovalLevels)
				"CannotUseThisApprovalCode;ItHasNoApprovalLevels"
			constraint (!ApprovalCode.HasTeamWithNoMembers)
				"CannotUseThisApprovalCode;ItContainsATeamWithNoMembers"
			constraint (!ApprovalCode.HasInvalidEscalations)
				"CannotUseThisApprovalCode;ItHasInvalidEscalationSettings"
			constraint (!ApprovalCode.HasInactiveResources)
				"CannotUseThisApprovalCode;ItHasInactiveResources"
		
			if (ApprovalCode changed)
				if (LevelType.Account
				or  LevelType.NonAccount)
					invoke UpdateApprovalCode OpenInprocessPeriodEndReconciliationRel
						invoked.PrmApprovalCode = ApprovalCode
				else 
					invoke FastUpdate ReconciliationAccount children
						invoked.ApprovalCode = ApprovalCode
					
					invoke UpdateApprovalCode OpenInprocessPeriodEndReconciliationRel
						invoked.PrmApprovalCode = ApprovalCode
							
					for each ReconciliationAccount children
						invoke UpdateApprovalCode each.OpenInprocessPeriodEndReconciliationRel
							invoked.PrmApprovalCode = ApprovalCode
			if (IsAccountWithinGroup) 
				cannot be changed
					"MustChangeApprovalCodeAtTheGroupLevel"
							
		CloseTask
			constraint (CloseTask.TaskLevel.Detail)
				"CloseTaskMustBeADetailLevelTask"
			if (IsConsolidatedGroup
			and CloseTask changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.CloseTask = CloseTask
					
		FinanceTeam
			if (AssignedResource entered)
				default to AssignedResource.FinanceTeam
				required
					"MustSelectATeamWhenTeamMemberEntered"
			if (LevelType.Group 
			and FinanceTeam changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.FinanceTeam = FinanceTeam
			if (IsAccountWithinGroup) 
				cannot be changed
					"MustChangeFinanceTeamAtTheGroupLevel"
					
		AssignedResource
			if (LevelType.Group 
			and AssignedResource changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.AssignedResource = AssignedResource
			if (IsAccountWithinGroup) 
				cannot be changed
					"MustChangeAssignedResourceAtTheGroupLevel"
					
		RequireSupportingDoco
			if (IsConsolidatedGroup
			and RequireSupportingDoco changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.RequireSupportingDoco = RequireSupportingDoco
			if (IsAccountWithinConsolidatedGroup)
				cannot be changed
					"MustChangeRequiresSupportingDocumentationAtTheGroupLevel"
												
		CloseConfiguration
			default to ReconciliationCodeBlock.AccountingEntity.CloseConfiguration
			if (LevelType.NonAccount)
				required
					"CloseConfigurationIsRequiredForNonAccounts"
					
		Active
			if (IsConsolidatedGroup
			and Active changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.Active = Active
			if (IsAccountWithinConsolidatedGroup)
				cannot be changed
					"MustChangeActiveAtTheConsolidatedGroupLevel"
			if (IsIndependentGroup)
				if (HasChild)
					cannot be changed
						"MustChangeActiveAtTheAccountLevelForIndependentGroup"
			if (IsAccountWithinIndependentGroup
			and Active changed)
				if (Active
				and !ParentReconciliationAccount.Active)
					invoke FastUpdate ParentReconciliationAccount
						invoked.Active = Active
				else
				if (!Active
				and !ReconciliationAccount siblings.Active)
					invoke FastUpdate ParentReconciliationAccount
						invoked.Active = Active
					
		ReconciliationPolicy
			constraint (!RequireSupportingDoco)
				"CannotEnterAnAutoReconciliationPolicyForAccountsThatRequireSupportingDocumentation"
			if (IsConsolidatedGroup
			and ReconciliationPolicy changed)
				invoke FastUpdate ReconciliationAccount children
					invoked.ReconciliationPolicy = ReconciliationPolicy
			if (IsAccountWithinConsolidatedGroup)
				cannot be changed
					"MustChangeAutoReconciliationPolicyAtTheGroupLevel"
			if (LevelType.NonAccount)
				cannot be entered
					"ReconciliationPolicyCannotBeEnteredForNonAccountReconciliations"
		
		DetailReconciliationMethod
			if (LevelType.Group)
				initialize
				
			if (AccountSetupForDetailReconciliations)
				constraint (LoadInterfaceTransactions
				or			LoadGeneralLedgerTransactions)
					"MustSelectTheTypeOfTransactionsToLoadIntoTheDetailReconciliation"
				
		DetailReconciliationMatchRuleGroup
			if (DetailReconciliationMethod.UseDetailReconciliationMatchRules)
				required
			else
				initialize
		
		GeneralLedgerTransactionLevel
			if (LoadGeneralLedgerTransactions)
				required
					"TransactionLevelIsRequired"
		
		LoadGeneralLedgerTransactions
			if (!LoadInterfaceTransactions
			and LoadGeneralLedgerTransactions)
				constraint (DetailReconciliationSign.OppositeSign)
					"DetailTransactionReconciliationsMustUseOppositeSignWhenReconcilingGlobalLedgerToGlobalLedgerTransactions"
		
		LoadInterfaceTransactions	
			if (LoadInterfaceTransactions 
			and !LoadGeneralLedgerTransactions)
				constraint (DetailReconciliationSign.OppositeSign)
					"DetailTransactionReconciliationsMustUseOppositeSignWhenReconcilingInterfaceToInterfaceTransactions"

		DetailReconciliationSign
			initial value is 1 
				when (LevelType.NonAccount)
						
  	Attach Rules
  		if(!IsAccountWithinIndependentGroup)
			constraint (Active)
				"ReconciliationAccountIsInactive"

	Rule Blocks
		CreateAssetReconciliationDetails
			if (ReconciliationAccountType.Asset
			and IsConsolidatedGroupStandaloneOrAccountWithinIndependentGroup
			and LocalPeriodEndReconciliation.CalculatedAssetEndingBalance != 0)			
				invoke CreatePeriodDetail ReconciliationPeriodDetail
					invoked.ReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.ReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.ReconciliationAccount			= ReconciliationAccount
					invoked.GeneralLedgerCloseConfiguration	= LocalCloseConfiguration	
					invoked.TransactionDate					= LocalGeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
					invoked.ReferenceNumber					= LocalGeneralLedgerClosePeriod.PeriodName + " ASSET RECONCILIATION"
					invoked.Description						= LocalGeneralLedgerClosePeriod.PeriodName + " ASSET RECONCILIATION"
					invoked.StartPeriod						= LocalGeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
					invoked.DetailPeriod					= LocalGeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
			    	invoked.PeriodAmount					= LocalPeriodEndReconciliation.CalculatedAssetEndingBalance
			 		
	Actions
		SchedulePeriodReconciliations is a Set Action
			restricted
			Parameters
				PrmReconciliationManagementGroup	is a ReconciliationManagementGroup
				PrmReconciliationAccountStructure	is a ReconciliationAccountStructure
				PrmCloseConfiguration				is a GeneralLedgerCloseConfiguration
				PrmGeneralLedgerClosePeriod 		is a GeneralLedgerClosePeriod
				PrmReconciliationAccountRule	 	is a ReconciliationAccount group
				PrmCloseTask						is a CloseTask
				PrmFinanceTeam						is a FinanceTeam
				PrmFinanceTeamMember				is a FinanceTeamMember
				PrmPeriodWithinQuarter				is a PeriodWithinQuarter
				PrmAnnualPeriod						is Boolean
				TeamMemberOverridden				is Boolean
				
			Parameter Rules
				PrmReconciliationAccountStructure
					LocalGeneralLedgerCalendar = PrmReconciliationAccountStructure.ReportingBasis.GeneralLedgerCalendar
					
				PrmFinanceTeam
					if (PrmFinanceTeamMember entered)
						default to PrmFinanceTeamMember.FinanceTeam
						required
							"MustSelectATeamWhenTeamMemberEntered"
								
			Local Fields
				LocalPeriodEndReconciliation		is a PeriodEndReconciliation view
				LocalAsyncId						is an AsyncActionRequest
				
			Instance Selection
				where   (ReconciliationManagementGroup = PrmReconciliationManagementGroup
				and		 ReconciliationAccountStructure = PrmReconciliationAccountStructure
				and		 CloseConfiguration = PrmCloseConfiguration
				and      !ParentReconciliationAccount entered 	
				and     (ReconcileFrequency.Monthly
				or      (ReconcileFrequency.Quarterly
				and		 PrmPeriodWithinQuarter = PeriodWithinQuarter)
				or     	(ReconcileFrequency.Annually
				and		 PrmAnnualPeriod))
				and     (!PrmReconciliationAccountRule entered
				or       ReconciliationAccount within PrmReconciliationAccountRule)
				and		 Active)
				
			Sort Order
				ReconciliationManagementGroup
				ReconciliationAccountStructure
				CloseConfiguration
				ReconciliationAccount

			Action Rules
				Set Rules
					Entrance Rules
						LocalReconciliationManagementGroup = PrmReconciliationManagementGroup
						LocalReconciliationAccountStructure = PrmReconciliationAccountStructure
						LocalCloseConfiguration = PrmCloseConfiguration
						LocalGeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
						invoke Update ReconciliationAccountStructurePeriodRel
					
				CloseConfiguration Set Rules
					Exit Rules
						invoke SchedulePeriodDetails ReconciliationDetail
							assign async action request id to LocalAsyncId
							invoked.PrmReconciliationManagementGroup   = PrmReconciliationManagementGroup
							invoked.PrmReconciliationAccountStructure  = PrmReconciliationAccountStructure
							invoked.PrmGeneralLedgerCloseConfiguration = PrmCloseConfiguration
							invoked.PrmDetailPeriod    			       = PrmGeneralLedgerClosePeriod
						 
						invoke EvaluateReconciliationPolicy PeriodEndReconciliation
							run after LocalAsyncId
							invoked.PrmReconciliationManagementGroup 	= PrmReconciliationManagementGroup
							invoked.PrmReconciliationAccountStructure	= PrmReconciliationAccountStructure
							invoked.PrmGeneralLedgerCloseConfiguration	= PrmCloseConfiguration
							invoked.PrmGeneralLedgerClosePeriod			= PrmGeneralLedgerClosePeriod
													
				Instance Rules
					LocalCloseConfiguration = PrmCloseConfiguration
					LocalGeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
							
					if (!PeriodEndReconciliationByPeriodRel exists)
						invoke Create PeriodEndReconciliation		
							assign result to LocalPeriodEndReconciliation 
							invoked.ReconciliationManagementGroup   						= ReconciliationManagementGroup
							invoked.ReconciliationAccountStructure  						= ReconciliationAccountStructure
							invoked.PeriodEndReconciliation.ReconciliationAccount	  	    = ReconciliationAccount
							invoked.PeriodEndReconciliation.GeneralLedgerCloseConfiguration = LocalCloseConfiguration
							invoked.PeriodEndReconciliation.GeneralLedgerClosePeriod        = LocalGeneralLedgerClosePeriod
							invoked.LevelType												= LevelType
							if (LevelType.Group)
								invoked.ReconciliationGroup									= ReconciliationGroup
							if (LevelType.NonAccount)
								invoked.NonAccountReconciliation							= NonAccountReconciliation
							invoked.Description					    						= Description
							invoked.CloseTask					    						= PrmCloseTask
							invoked.FinanceTeam					    						= PrmFinanceTeam
							invoked.AssignedResource			    						= PrmFinanceTeamMember
							invoked.CreatedFromReconciliationAccount						= true
							invoked.CreatedFromBatch										= true
							invoked.BypassActiveCodeBlockEdit								= true
							invoked.LocalTeamMemberOverridden								= TeamMemberOverridden

							
						if (LevelType.Group)						
							for each ReconciliationAccount children
								invoke Create PeriodEndReconciliation
									invoked.ReconciliationManagementGroup   								= ReconciliationManagementGroup
									invoked.ReconciliationAccountStructure  								= ReconciliationAccountStructure
									invoked.PeriodEndReconciliation.ReconciliationAccount	  	    		= each.ReconciliationAccount
									invoked.PeriodEndReconciliation.GeneralLedgerCloseConfiguration 		= LocalCloseConfiguration
									invoked.PeriodEndReconciliation.GeneralLedgerClosePeriod        		= LocalGeneralLedgerClosePeriod
									invoked.ParentPeriodEndReconciliation.ReconciliationAccount	  	      	= LocalPeriodEndReconciliation.PeriodEndReconciliation.ReconciliationAccount
									invoked.ParentPeriodEndReconciliation.GeneralLedgerCloseConfiguration 	= LocalPeriodEndReconciliation.PeriodEndReconciliation.GeneralLedgerCloseConfiguration
									invoked.ParentPeriodEndReconciliation.GeneralLedgerClosePeriod        	= LocalPeriodEndReconciliation.PeriodEndReconciliation.GeneralLedgerClosePeriod
									invoked.ParentPeriodEndReconciliation.SequenceNumber					= LocalPeriodEndReconciliation.PeriodEndReconciliation.SequenceNumber
									if (LocalPeriodEndReconciliation.Status.InProcess)
										invoked.Status														= 1 
									invoked.Description					    								= each.Description
									invoked.CloseTask					    								= PrmCloseTask
									invoked.FinanceTeam					    								= PrmFinanceTeam
									invoked.AssignedResource			    								= PrmFinanceTeamMember
									invoked.CreatedFromReconciliationAccount								= true
									invoked.CreatedFromBatch												= true
									invoked.BypassActiveCodeBlockEdit										= true
									invoked.LocalTeamMemberOverridden										= TeamMemberOverridden
					
						include CreateAssetReconciliationDetails	
						    	
		CreatePeriodReconciliations is an Instance Action
			valid when (IsGroupWithChildrenStandaloneOrNonAccount)
			Parameters
				GeneralLedgerCloseConfiguration
					default label is "GlobalLedgerCloseConfiguration"
				PrmGeneralLedgerClosePeriod		is a GeneralLedgerClosePeriod
					default label is "GlobalLedgerClosePeriod"
				PrmCloseTask					is a CloseTask  
				PrmFinanceTeam					is a FinanceTeam
				PrmFinanceTeamMember			is a FinanceTeamMember
				
			Parameter Rules
				GeneralLedgerCloseConfiguration
					initial value is CloseConfiguration 
					default to CloseConfiguration
					
				PrmGeneralLedgerClosePeriod
					required
					LocalGeneralLedgerCalendar = ReconciliationAccountStructure.ReportingBasis.GeneralLedgerCalendar
					LocalCloseConfiguration = GeneralLedgerCloseConfiguration
					LocalGeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
					if (ReconcileFrequency.Quarterly)
						constraint (PeriodWithinQuarter = PeriodWithinQuarterDerived)
							"QuarterlyReconciliationCannotBeScheduledOnThisPeriodWithinTheQuarter"
					if (ReconcileFrequency.Annually)
						constraint (PrmGeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.IsEndOfYear)
							"AnnualReconciliationCannotBeScheduledOnNonYearEndPeriods"
					
					constraint (!PeriodEndReconciliationByPeriodRel exists)
						"PeriodReconciliationForPeriod<PrmGeneralLedgerClosePeriod>AlreadyExists"
							
				PrmCloseTask
					constraint (PrmCloseTask.TaskLevel.Detail)
						"CloseTaskMustBeADetailLevelTask"

				PrmFinanceTeam
					if (PrmFinanceTeamMember entered)
						default to PrmFinanceTeamMember.FinanceTeam
						required
							"MustSelectATeamWhenTeamMemberEntered"
			
			Local Fields
				LocalPeriodEndReconciliation	is a PeriodEndReconciliation view
							
			Action Rules
				LocalReconciliationManagementGroup = ReconciliationManagementGroup
				LocalReconciliationAccountStructure = ReconciliationAccountStructure
				LocalCloseConfiguration = CloseConfiguration
				LocalGeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
				invoke Update ReconciliationAccountStructurePeriodRel
				
				if (LevelType.Group								
				or  IsStandaloneAccount
				or	LevelType.NonAccount) 
					if (!PeriodEndReconciliationByPeriodRel exists)
						invoke Create PeriodEndReconciliation
							assign result to LocalPeriodEndReconciliation 
							invoked.ReconciliationManagementGroup   						= ReconciliationManagementGroup
							invoked.ReconciliationAccountStructure  						= ReconciliationAccountStructure
							invoked.PeriodEndReconciliation.ReconciliationAccount	  	    = ReconciliationAccount
							invoked.PeriodEndReconciliation.GeneralLedgerCloseConfiguration = LocalCloseConfiguration
							invoked.PeriodEndReconciliation.GeneralLedgerClosePeriod        = LocalGeneralLedgerClosePeriod
							invoked.LevelType												= LevelType
							if (LevelType.Group)
								invoked.ReconciliationGroup									= ReconciliationGroup
							if (LevelType.NonAccount)
								invoked.NonAccountReconciliation							= NonAccountReconciliation
							invoked.Description					    						= Description
							invoked.CloseTask					    						= PrmCloseTask
							invoked.FinanceTeam					    						= PrmFinanceTeam
							invoked.AssignedResource			    						= PrmFinanceTeamMember
							invoked.CreatedFromReconciliationAccount						= true
							invoked.BypassActiveCodeBlockEdit								= true
							if (PrmFinanceTeam entered and PrmFinanceTeamMember not entered)
								invoked.LocalTeamMemberOverridden							= true
					
					if (LevelType.Group)						
						for each ReconciliationAccount children
							invoke Create PeriodEndReconciliation
								invoked.ReconciliationManagementGroup   								= ReconciliationManagementGroup
								invoked.ReconciliationAccountStructure  								= ReconciliationAccountStructure
								invoked.PeriodEndReconciliation.ReconciliationAccount	  	    		= each.ReconciliationAccount
								invoked.PeriodEndReconciliation.GeneralLedgerCloseConfiguration 		= LocalCloseConfiguration
								invoked.PeriodEndReconciliation.GeneralLedgerClosePeriod        		= LocalGeneralLedgerClosePeriod
								invoked.ParentPeriodEndReconciliation.ReconciliationAccount	  	      	= LocalPeriodEndReconciliation.PeriodEndReconciliation.ReconciliationAccount
								invoked.ParentPeriodEndReconciliation.GeneralLedgerCloseConfiguration 	= LocalPeriodEndReconciliation.PeriodEndReconciliation.GeneralLedgerCloseConfiguration
								invoked.ParentPeriodEndReconciliation.GeneralLedgerClosePeriod        	= LocalPeriodEndReconciliation.PeriodEndReconciliation.GeneralLedgerClosePeriod
								invoked.ParentPeriodEndReconciliation.SequenceNumber					= LocalPeriodEndReconciliation.PeriodEndReconciliation.SequenceNumber
								if (LocalPeriodEndReconciliation.Status.InProcess)
									invoked.Status														= 1 
								invoked.Description					    								= each.Description
								invoked.CloseTask					    								= PrmCloseTask
								invoked.FinanceTeam					    								= PrmFinanceTeam
								invoked.AssignedResource			    								= PrmFinanceTeamMember
								invoked.CreatedFromReconciliationAccount								= true
								invoked.BypassActiveCodeBlockEdit										= true
								if (PrmFinanceTeam entered and PrmFinanceTeamMember not entered)
									invoked.LocalTeamMemberOverridden									= true

					include CreateAssetReconciliationDetails	
					
		Create is a Create Action
			Field Rules
				NewAccount
					if (ReconciliationAccountStructure.ReconciliationType.Account)
						default to true
					
			Exit Rules
				if (CloseTask entered
				and !CloseTask.ReconciliationTask)
					invoke QuickUpdateFromRecon CloseTask
						invoked.UpdateReconTaskToTrue = true

		
		CreateReconciliationGroup is a Create Action					
			Action Rules
				LevelType = 1 
				
				LocalReconciliationGroup = ReconciliationGroup
				constraint (!DuplicateReconciliationGroupRel exists)
					"ReconciliationGroup<ReconciliationGroup>AlreadyExists"
		
		CreateNonAccountReconciliation is a Create Action					
			Action Rules
				LevelType = 2 
				
				LocalNonAccountReconciliation = NonAccountReconciliation
				constraint (!DuplicateNonAccountReconciliationRel exists)
					"NonAccountReconciliation<NonAccountReconciliation>AlreadyExists"
					
		Update is an Update Action
			Exit Rules
				if (CloseTask changed)
					if (CloseTask entered
					and !CloseTask.ReconciliationTask)
						invoke QuickUpdateFromRecon CloseTask
							invoked.UpdateReconTaskToTrue = true
					if (old CloseTask entered)
						LocalCloseTask = old CloseTask
						invoke QuickUpdateFromRecon LocalCloseTask
							invoked.UpdateReconTaskToFalse = true
							
				if (CloseTask changed
				or	FinanceTeam changed
				or	AssignedResource changed
				or	ReconciliationPolicy changed)
					invoke Update OpenPeriodEndReconciliationRel
						if (CloseTask changed
						and !IsIndependentGroup)
							invoked.CloseTask				= CloseTask
						if (FinanceTeam changed)
							invoked.FinanceTeam				= FinanceTeam
						if (AssignedResource changed)
							invoked.AssignedResource		= AssignedResource
						if (ReconciliationPolicy changed
						and	!LevelType.NonAccount
						and !IsIndependentGroup)
							invoked.ReconciliationPolicy	= ReconciliationPolicy
									
		FastUpdate is an Update Action
			restricted
			bypass field rules
		
		UpdateReconciliationAccountGroup is an Instance Action
			restricted
			Parameters
				PrmReconciliationAccountGroup	is a ReconciliationAccountGroup
				
			Action Rules							
				ReconciliationAccountGroup = PrmReconciliationAccountGroup
				
				invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
					invoked.PrmReconciliationAccountGroup = ReconciliationAccountGroup
					
		MassUpdateReconciliationAccounts is a Set Action
            restricted
            Parameters
	            PrmReconciliationManagementGroup	 is a ReconciliationManagementGroup
	            PrmReconciliationAccountStructure	 is a ReconciliationAccountStructure
	            PrmReconciliationAccountSelection  	 is a ReconciliationAccount group
	            PrmReconciliationFromAccount		 is a GeneralLedgerChartAccount
	            PrmReconciliationToAccount			 is a GeneralLedgerChartAccount
	            PrmAccountType                       is a ReconciliationAccountType
	            PrmCashAccount						 is a CashManagementAccount
	            PrmRisk                              is Numeric 1 
                    States
                    	Low               value is 1
                        Medium            value is 2
                        High              value is 3
                PrmPriority                          is Numeric 1 
                    States
                        Low               value is 1
                        Medium            value is 2
                        High              value is 3
                PrmRequiresApproval                  is Numeric 1 
                    States
                        ChangeToTrue      value is 1
                        ChangeToFalse     value is 2
                PrmApprovalCode                      is an ApprovalCode
                PrmRequireSupportingDoco        	 is Numeric 1 
                    States
                        ChangeToTrue      value is 1
                        ChangeToFalse     value is 2
                PrmReconciliationAccountGroup		 is a ReconciliationAccountGroup
                PrmRemoveReconciliationAccountGroup  is Boolean
                PrmReconcileFrequency                is a ReconcileFrequency
				PrmPeriodWithinQuarter               is a PeriodWithinQuarter 
                PrmReconciliationPolicy				 is a ReconciliationPolicy
                PrmRemoveReconciliationPolicy		 is Boolean
                PrmCloseTask                         is a CloseTask
                PrmRemoveCloseTask                   is Boolean
                PrmFinanceTeam                       is a FinanceTeam
                PrmAssignedResource                  is a FinanceTeamMember

            Sort Order
                ReconciliationManagementGroup
                ReconciliationAccountStructure
                ReconciliationAccount
                
            Instance Selection
                where   (ReconciliationManagementGroup = PrmReconciliationManagementGroup              
                and	     ReconciliationAccountStructure = PrmReconciliationAccountStructure
                and    ((PrmReconciliationAccountSelection entered
                and      ReconciliationAccount within PrmReconciliationAccountSelection) 
                or     (!PrmReconciliationAccountSelection entered
                and      ReconciliationCodeBlock.GeneralLedgerChartAccount >= PrmReconciliationFromAccount
                and    ((PrmReconciliationToAccount entered
                and      ReconciliationCodeBlock.GeneralLedgerChartAccount <= PrmReconciliationToAccount)               
                or     (!PrmReconciliationToAccount entered
                and      ReconciliationCodeBlock.GeneralLedgerChartAccount.Account <= 999999999999999)))))             
                
            Action Rules
                Instance Rules
                    if (!PrmReconciliationAccountSelection entered		
                    and IsAccountWithinGroup)
                    	if (IsAccountWithinConsolidatedGroup)			
                    		invoke Update ParentReconciliationAccount 	
                    			if	(PrmAccountType entered)
			                    	if (PrmAccountType.Cash)
			                    		if (ReconciliationCodeBlock.GeneralLedgerChartAccount = PrmCashAccount.GLAccount.GeneralLedgerChartAccount)
			                    			invoked.ReconciliationAccountType = PrmAccountType
			                    			if (!PrmReconciliationAccountGroup entered)
				                    			initialize invoked.ReconciliationAccountGroup	
			                    	else
			                    		invoked.ReconciliationAccountType = PrmAccountType
			                    		initialize invoked.CashManagementAccount
				                    	if (!PrmReconciliationAccountGroup entered)
				                    		initialize invoked.ReconciliationAccountGroup
	                    		
			                    if (PrmCashAccount entered
			                    and ReconciliationCodeBlock.GeneralLedgerChartAccount = PrmCashAccount.GLAccount.GeneralLedgerChartAccount)
			                    	invoked.CashManagementAccount = PrmCashAccount	

                    			if (PrmRisk entered)
			                        if (PrmRisk.Low)
			                            invoked.Risk = Risk.Low 
			                        if (PrmRisk.Medium)
			                            invoked.Risk = Risk.Medium
			                        if (PrmRisk.High)
			                            invoked.Risk = Risk.High
			                            
			                    if (PrmPriority entered)
			                        if (PrmPriority.Low)
			                            invoked.Priority = Priority.Low 
			                        if (PrmPriority.Medium)
			                            invoked.Priority = Priority.Medium 
			                        if (PrmPriority.High)
			                            invoked.Priority = Priority.High
			                    
			                    if (PrmRequiresApproval.ChangeToTrue)
			                    	invoked.RequiresApproval = true
			                    	invoked.ApprovalCode = PrmApprovalCode
			                    if (PrmRequiresApproval.ChangeToFalse)
									invoked.RequiresApproval = false
			                        initialize invoked.ApprovalCode
							
	                    		if  (PrmRequireSupportingDoco.ChangeToTrue
								and (!ReconciliationPolicy entered
								or   PrmRemoveReconciliationPolicy))
			                        invoked.RequireSupportingDoco = true
			                    if (PrmRequireSupportingDoco.ChangeToFalse)
	                    			invoked.RequireSupportingDoco = false
	                    		
	                    		if  (PrmReconciliationAccountGroup entered
			                    and (ReconciliationAccountType = PrmReconciliationAccountGroup.ReconciliationAccountType
			                    or   PrmAccountType = PrmReconciliationAccountGroup.ReconciliationAccountType))
			                        invoked.ReconciliationAccountGroup	= PrmReconciliationAccountGroup
			                    if (PrmRemoveReconciliationAccountGroup)
			                        initialize invoked.ReconciliationAccountGroup
			                        
                    			if (PrmReconcileFrequency entered)
			                        invoked.ReconcileFrequency = PrmReconcileFrequency
			                        if (!PrmReconcileFrequency.Quarterly)
			                        	initialize invoked.PeriodWithinQuarter
								if (PrmPeriodWithinQuarter entered)
									invoked.PeriodWithinQuarter = PrmPeriodWithinQuarter
			                        
			                    if (PrmReconciliationPolicy entered
								and !LevelType.NonAccount
								and !RequireSupportingDoco)
									invoked.ReconciliationPolicy = PrmReconciliationPolicy
								if (PrmRemoveReconciliationPolicy)
			                        initialize invoked.ReconciliationPolicy
			                        
			                    if (PrmCloseTask entered)
			                    	invoked.CloseTask = PrmCloseTask
			                    if (PrmRemoveCloseTask)
			                        initialize invoked.CloseTask
			                    
			                    if (PrmFinanceTeam entered)
			                        if (FinanceTeam != PrmFinanceTeam)
			                           	invoked.FinanceTeam = PrmFinanceTeam
			                        if (!PrmAssignedResource entered)
			                            initialize invoked.AssignedResource
			                            
			                    if (PrmAssignedResource entered)
			                        invoked.AssignedResource = PrmAssignedResource
                    	else											
                    		if	(PrmAccountType entered
		                    and	 ReconciliationAccountType != PrmAccountType)
		                    	if (PrmAccountType.Cash)
		                    		if (ReconciliationCodeBlock.GeneralLedgerChartAccount = PrmCashAccount.GLAccount.GeneralLedgerChartAccount)
		                    			ReconciliationAccountType = PrmAccountType
		                    			if (!PrmReconciliationAccountGroup entered)
			                    			initialize ReconciliationAccountGroup
			                    			invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
												initialize invoked.PrmReconciliationAccountGroup	
		                    	else
		                    		ReconciliationAccountType = PrmAccountType
		                    		initialize CashManagementAccount
			                    	if (!PrmReconciliationAccountGroup entered)
			                    		initialize ReconciliationAccountGroup
		                    			invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
											initialize invoked.PrmReconciliationAccountGroup
		                    			
		                    if (PrmCashAccount entered
		                    and	CashManagementAccount != PrmCashAccount
		                    and ReconciliationCodeBlock.GeneralLedgerChartAccount = PrmCashAccount.GLAccount.GeneralLedgerChartAccount)
		                    	CashManagementAccount = PrmCashAccount
		                    		
		                    if (PrmRisk entered)
		                        if (PrmRisk.Low)
		                            Risk = Risk.Low 
		                        if (PrmRisk.Medium)
		                            Risk = Risk.Medium
		                        if (PrmRisk.High)
		                            Risk = Risk.High
		                             
		                    if (PrmPriority entered)
		                        if (PrmPriority.Low)
		                            Priority = Priority.Low 
		                        if (PrmPriority.Medium)
		                            Priority = Priority.Medium 
		                        if (PrmPriority.High)
		                            Priority = Priority.High
		                             
		                    if  (PrmRequireSupportingDoco.ChangeToTrue
							and	 RequireSupportingDoco = false
							and (!ReconciliationPolicy entered
							or   PrmRemoveReconciliationPolicy))
		                        RequireSupportingDoco = true
		                    if (PrmRequireSupportingDoco.ChangeToFalse
		                    and	RequireSupportingDoco = true)
		                        RequireSupportingDoco = false
		                        
		                    if  (PrmReconciliationAccountGroup entered
		                    and	 ReconciliationAccountGroup != PrmReconciliationAccountGroup
		                    and	(ReconciliationAccountType = PrmReconciliationAccountGroup.ReconciliationAccountType
		                    or   PrmAccountType = PrmReconciliationAccountGroup.ReconciliationAccountType))
		                        ReconciliationAccountGroup = PrmReconciliationAccountGroup
		                        invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
									invoked.PrmReconciliationAccountGroup = ReconciliationAccountGroup	
		                    if (PrmRemoveReconciliationAccountGroup)
		                        initialize ReconciliationAccountGroup
		                        invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
									initialize invoked.PrmReconciliationAccountGroup
							
		                    if (PrmReconciliationPolicy entered
							and ReconciliationPolicy != PrmReconciliationPolicy
							and !LevelType.NonAccount
							and !RequireSupportingDoco)
								ReconciliationPolicy = PrmReconciliationPolicy
								invoke Update OpenPeriodEndReconciliationRel
									invoked.ReconciliationPolicy = PrmReconciliationPolicy
							if (PrmRemoveReconciliationPolicy)
		                        initialize ReconciliationPolicy
		                        invoke Update OpenPeriodEndReconciliationRel
									initialize invoked.ReconciliationPolicy
										
		                    if (PrmCloseTask entered
		                    and	CloseTask != PrmCloseTask)
		                    	CloseTask = PrmCloseTask
		                    	invoke Update OpenPeriodEndReconciliationRel
									invoked.CloseTask = PrmCloseTask
		                    if (PrmRemoveCloseTask)
		                        initialize CloseTask
		                        invoke Update OpenPeriodEndReconciliationRel
									initialize invoked.CloseTask
									
			                if (PrmRequiresApproval entered
			                or  PrmReconcileFrequency entered
			                or	PrmPeriodWithinQuarter entered
			                or	PrmFinanceTeam entered
			                or	PrmAssignedResource entered)
				                invoke Update ParentReconciliationAccount
	                    			if (PrmRequiresApproval.ChangeToTrue)
		                    			invoked.RequiresApproval = true
		                    			invoked.ApprovalCode = PrmApprovalCode
		                    		if (PrmRequiresApproval.ChangeToFalse)
		                    			invoked.RequiresApproval = false
		                    			initialize invoked.ApprovalCode
		                    			
	                    			if (PrmReconcileFrequency entered)
				                        invoked.ReconcileFrequency = PrmReconcileFrequency
				                        if (!PrmReconcileFrequency.Quarterly)
				                        	initialize invoked.PeriodWithinQuarter
									if (PrmPeriodWithinQuarter entered)
										invoked.PeriodWithinQuarter = PrmPeriodWithinQuarter
					                        	
				                    if (PrmFinanceTeam entered)
				                        if (FinanceTeam != PrmFinanceTeam)
				                           	invoked.FinanceTeam = PrmFinanceTeam
				                        if (!PrmAssignedResource entered)
				                            initialize invoked.AssignedResource
				                            
				                    if (PrmAssignedResource entered)
				                        invoked.AssignedResource = PrmAssignedResource
                    else												
	                    if	(PrmAccountType entered
	                    and	 ReconciliationAccountType != PrmAccountType)
	                    	if (PrmAccountType.Cash)
	                    		if (ReconciliationCodeBlock.GeneralLedgerChartAccount = PrmCashAccount.GLAccount.GeneralLedgerChartAccount)
	                    			ReconciliationAccountType = PrmAccountType
	                    			if (!PrmReconciliationAccountGroup entered)
		                    			initialize ReconciliationAccountGroup	
	                    	else
	                    		ReconciliationAccountType = PrmAccountType
	                    		initialize CashManagementAccount
		                    	if (!PrmReconciliationAccountGroup entered)
		                    		initialize ReconciliationAccountGroup
	                    			invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
										initialize invoked.PrmReconciliationAccountGroup
											
	                    if (PrmCashAccount entered
	                    and	CashManagementAccount != PrmCashAccount
	                    and ReconciliationCodeBlock.GeneralLedgerChartAccount = PrmCashAccount.GLAccount.GeneralLedgerChartAccount)
	                    	CashManagementAccount = PrmCashAccount
	                    		
	                    if (PrmRisk entered)
	                        if (PrmRisk.Low)
	                            Risk = Risk.Low 
	                        if (PrmRisk.Medium)
	                            Risk = Risk.Medium
	                        if (PrmRisk.High)
	                            Risk = Risk.High
	                             
	                    if (PrmPriority entered)
	                        if (PrmPriority.Low)
	                            Priority = Priority.Low 
	                        if (PrmPriority.Medium)
	                            Priority = Priority.Medium 
	                        if (PrmPriority.High)
	                            Priority = Priority.High
	                             
	                    if (PrmRequiresApproval.ChangeToTrue)
	                    	RequiresApproval = true
	                    	ApprovalCode = PrmApprovalCode
							invoke UpdateApprovalCode OpenInprocessPeriodEndReconciliationRel
								invoked.PrmApprovalCode = PrmApprovalCode
								
	                    if (PrmRequiresApproval.ChangeToFalse)
							RequiresApproval = false
	                        initialize ApprovalCode
	                        invoke UpdateApprovalCode OpenInprocessPeriodEndReconciliationRel
								initialize invoked.PrmApprovalCode
								
	                    if  (PrmRequireSupportingDoco.ChangeToTrue
						and	 RequireSupportingDoco = false
						and (!ReconciliationPolicy entered
						or   PrmRemoveReconciliationPolicy))
	                        RequireSupportingDoco = true
	                    if (PrmRequireSupportingDoco.ChangeToFalse
	                    and	RequireSupportingDoco = true)
	                        RequireSupportingDoco = false
	                        
	                    if  (PrmReconciliationAccountGroup entered
	                    and	 ReconciliationAccountGroup != PrmReconciliationAccountGroup
	                    and	(ReconciliationAccountType = PrmReconciliationAccountGroup.ReconciliationAccountType
	                    or   PrmAccountType = PrmReconciliationAccountGroup.ReconciliationAccountType))
	                        ReconciliationAccountGroup = PrmReconciliationAccountGroup
	                        invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
								invoked.PrmReconciliationAccountGroup = ReconciliationAccountGroup	
	                    if (PrmRemoveReconciliationAccountGroup)
	                        initialize ReconciliationAccountGroup
	                        invoke UpdateReconciliationAccountGroup PeriodEndReconciliationRel
								initialize invoked.PrmReconciliationAccountGroup
						
	                    if (PrmReconcileFrequency entered
	                    and	ReconcileFrequency != PrmReconcileFrequency)
	                        ReconcileFrequency = PrmReconcileFrequency
	                        if (!PrmReconcileFrequency.Quarterly)
                        		initialize PeriodWithinQuarter
						if (PrmPeriodWithinQuarter entered
						and PeriodWithinQuarter != PrmPeriodWithinQuarter)
							PeriodWithinQuarter = PrmPeriodWithinQuarter
							
	                    if (PrmReconciliationPolicy entered
						and ReconciliationPolicy != PrmReconciliationPolicy
						and !LevelType.NonAccount
						and !RequireSupportingDoco)
							ReconciliationPolicy = PrmReconciliationPolicy
						if (PrmRemoveReconciliationPolicy)
	                        initialize ReconciliationPolicy
	                        	
	                    if (PrmCloseTask entered
	                    and	CloseTask != PrmCloseTask)
	                    	CloseTask = PrmCloseTask
	                    if (PrmRemoveCloseTask)
	                        initialize CloseTask
	                        
	                    if (PrmFinanceTeam entered)
	                        if (FinanceTeam != PrmFinanceTeam)
	                           	FinanceTeam = PrmFinanceTeam
	                        if (!PrmAssignedResource entered)
	                            initialize AssignedResource
	                            
	                    if (PrmAssignedResource entered
	                    and	AssignedResource != PrmAssignedResource)
	                        AssignedResource = PrmAssignedResource
						
						if (PrmCloseTask entered
						or  PrmRemoveCloseTask
						or  PrmFinanceTeam entered
						or  PrmAssignedResource entered
						or  PrmReconciliationPolicy entered
						or  PrmRemoveReconciliationPolicy)
							invoke Update OpenPeriodEndReconciliationRel
								if (PrmCloseTask entered
								and !IsIndependentGroup)
									invoked.CloseTask = PrmCloseTask
								if (PrmRemoveCloseTask
								and !IsIndependentGroup)
									initialize invoked.CloseTask
									
								if (PrmFinanceTeam entered)
									invoked.FinanceTeam = PrmFinanceTeam
									
								if (PrmAssignedResource entered)
									invoked.AssignedResource = PrmAssignedResource
									
								if (PrmReconciliationPolicy entered
								and !LevelType.NonAccount
								and !IsIndependentGroup)
									invoked.ReconciliationPolicy = PrmReconciliationPolicy
								if (PrmRemoveReconciliationPolicy
								and !LevelType.NonAccount)
									initialize invoked.ReconciliationPolicy
								
		Delete is a Delete Action
			valid when (CanDeleteAccount)
			Exit Rules
				if (CloseTask entered)
					invoke QuickUpdateFromRecon CloseTask
						invoked.UpdateReconTaskToFalse = true

		MassDeleteReconciliationAccounts is a Set Action
            restricted
            Parameters
	            PrmReconciliationManagementGroup	 is a ReconciliationManagementGroup
	            PrmReconciliationAccountStructure	 is a ReconciliationAccountStructure
	            PrmReconciliationAccountSelection  	 is a ReconciliationAccount group
	            PrmReconciliationFromAccount		 is a GeneralLedgerChartAccount
	            PrmReconciliationToAccount			 is a GeneralLedgerChartAccount

            Sort Order
                ReconciliationManagementGroup
                ReconciliationAccountStructure
                ReconciliationAccount
                
            Instance Selection
                where   (ReconciliationManagementGroup = PrmReconciliationManagementGroup              
                and	     ReconciliationAccountStructure = PrmReconciliationAccountStructure
                and    ((PrmReconciliationAccountSelection entered
                and      ReconciliationAccount within PrmReconciliationAccountSelection) 
                or     (!PrmReconciliationAccountSelection entered
                and      ReconciliationCodeBlock.GeneralLedgerChartAccount >= PrmReconciliationFromAccount
                and    ((PrmReconciliationToAccount entered
                and      ReconciliationCodeBlock.GeneralLedgerChartAccount <= PrmReconciliationToAccount)               
                or     (!PrmReconciliationToAccount entered
                and      ReconciliationCodeBlock.GeneralLedgerChartAccount.Account <= 999999999999999))))
                and     CanDeleteAccount)             
                
            Action Rules
                Instance Rules
	    			if (!PeriodEndReconciliationRel exists)
						invoke Delete
					
		CreateAmortizationDetail is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				PrmReferenceNumber				is AlphaUpper 50
				PrmDescription					is Alpha 100
				PrmDistributionDescription		is Alpha 30
				PrmVendorInvoice				is like VendorInvoice
				PrmDetailAmount					is an InternationalAmount
				PrmTransactionDate				is like TransactionDate
				PrmPostingDate					is like PostingDate		
				PrmStartPeriod					is like GeneralLedgerClosePeriod
				PrmEndPeriod					is like GeneralLedgerClosePeriod
				PrmCatchUpPeriod				is like GeneralLedgerClosePeriod
				PrmAmortizationExpenseAccount	is a FinanceCodeBlockFull
				PrmAllocationCode				is a CashAllocationCode
				PrmPeriodTerm					is Numeric 3
				PrmAmortizationSpread			is Numeric 1
		    		States
						ByPeriods				value is 0
						ByDays					value is 1
				PrmOriginatingTransaction		is BusinessObjectReference
				
			Action Rules
				invoke CreateAmortization ReconciliationDetail
					invoked.ReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.ReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.ReconciliationAccount			= ReconciliationAccount
					invoked.ReferenceNumber					= PrmReferenceNumber
					invoked.Description						= PrmDescription
					invoked.DistributionDescription			= PrmDistributionDescription
					invoked.VendorInvoice.PayablesCompany	= PrmVendorInvoice.PayablesCompany
					invoked.VendorInvoice.Vendor			= PrmVendorInvoice.Vendor
					invoked.VendorInvoice.PayablesInvoice	= PrmVendorInvoice.PayablesInvoice
					invoked.DetailAmount					= PrmDetailAmount
					invoked.TransactionDate					= PrmTransactionDate
					invoked.PostingDate						= PrmPostingDate	
					invoked.StartPeriod						= PrmStartPeriod
					invoked.EndPeriod						= PrmEndPeriod
					invoked.CatchUpPeriod					= PrmCatchUpPeriod
					invoked.AmortizationExpenseAccount		= PrmAmortizationExpenseAccount
					invoked.AllocationCode					= PrmAllocationCode
					invoked.PeriodTerm						= PrmPeriodTerm
					invoked.AmortizationSpread				= PrmAmortizationSpread
					invoked.Active							= true
					invoked.OriginatingTransaction			= PrmOriginatingTransaction

		UpdateCurrentReconMatchNumber is an Instance Action
			restricted
			Parameters
				PrmReconMatchNumber is a TransactionReconDetail	
				
			Action Rules
				CurrentReconMatchNumber	= PrmReconMatchNumber

		MatchSelectedTransactions is an Instance Action
			valid when (HasCurrentMatchRecords)
			Parameters
				PrmLineMatchField is Alpha 200

			Parameter Rules
				PrmLineMatchField
					initial value is CurrentReconMatchNumber.LineMatchField
					default to CurrentReconMatchNumber.LineMatchField
					required

			Action Rules
				invoke UpdateSelectedTransactions CurrentMatchedTransactionsRel
					invoked.PrmLineMatchField = PrmLineMatchField
				initialize CurrentReconMatchNumber

		LoadAndReconcile is an Instance Action
			valid when (!LevelType.Group)
			Parameters
				GeneralLedgerCloseConfiguration
					default label is "GlobalLedgerCloseConfiguration"
				PrmGeneralLedgerClosePeriod		is a GeneralLedgerClosePeriod
					default label is "GlobalLedgerClosePeriod"
						
			Parameter Rules
				GeneralLedgerCloseConfiguration
					initial value is ReconciliationAccount.CloseConfiguration
					force default to ReconciliationAccount.CloseConfiguration
					
				PrmGeneralLedgerClosePeriod
					initial value is CurrentReconciliationPeriod
					LocalGeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
					constraint (!PeriodEndTransReconDetailRel exists)
						"ADetailTransactionReconciliationHasAlreadyBeenCompletedForPeriod<PrmGeneralLedgerClosePeriod>:<PrmGeneralLedgerClosePeriod.PeriodName>"
					required
				
			Action Rules
				LocalCloseConfiguration = GeneralLedgerCloseConfiguration
				LocalGeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
				invoke TransitionToInProcessStatus PeriodEndReconciliationByPeriodRel
				
				CurrentReconciliationPeriod = PrmGeneralLedgerClosePeriod
				
				BackgroundGroup = ReconciliationManagementGroup + "," + ReconciliationAccountStructure + "," + ReconciliationAccount + "-1"
				
				if (!LevelType.NonAccount)
					if (LoadGeneralLedgerTransactions)
						if (GLTransactionTypesInReconRel exists)
							if (GeneralLedgerTransactionLevel.GeneralLedgerTransaction)
								constraint (first GLTransactionTypesInReconRel.OriginatingGLTransaction.BusinessClassName = "GeneralLedgerTransaction")
									"GlobalLedgerTransactionsExistThatWereOriginallyLoadedAtTheGlobalLedgerTransactionDetailLevel"
							else
								constraint (first GLTransactionTypesInReconRel.OriginatingGLTransaction.BusinessClassName = "GLTransactionDetail")
									"GlobalLedgerTransactionsExistThatWereOriginallyLoadedAtTheGlobalLedgerTransactionLevel"
						
						invoke LoadGLTransIntoReconciliation GeneralLedgerTransaction in background group(BackgroundGroup)
							assign async background group id to BackgroundGroupAsyncId
							invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
							invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
							invoked.PrmReconciliationAccount			= ReconciliationAccount
							invoked.PrmCloseConfiguration				= GeneralLedgerCloseConfiguration
							invoked.PrmGeneralLedgerClosePeriod			= PrmGeneralLedgerClosePeriod
							invoked.PrmTransactionLevel					= GeneralLedgerTransactionLevel
						
				if (LoadInterfaceTransactions)
					invoke LoadIntoReconciliation ReconciliationInterface in background group(BackgroundGroup)
						assign async background group id to BackgroundGroupAsyncId
						invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
						invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
						invoked.PrmReconciliationAccount			= ReconciliationAccount
						invoked.PrmThruDate							= PrmGeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date

				invoke ProcessMatchRulesForBlankLineMatchField TransactionReconDetail in background group(BackgroundGroup)
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount
				
				OldBackgroundGroup = BackgroundGroup
				BackgroundGroup = ReconciliationManagementGroup + "," + ReconciliationAccountStructure + "," + ReconciliationAccount + "-2"
							
				invoke MatchRecords TransactionReconDetail in background group(BackgroundGroup)
					run after background group(OldBackgroundGroup)
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount

		LoadGLTransactions is an Instance Action
			restricted
			Parameters
				GeneralLedgerCloseConfiguration
					default label is "GlobalLedgerCloseConfiguration"
				PrmGeneralLedgerClosePeriod		is a GeneralLedgerClosePeriod
					default label is "GlobalLedgerClosePeriod"
						
			Parameter Rules
				GeneralLedgerCloseConfiguration
					initial value is ReconciliationCodeBlock.AccountingEntity.CloseConfiguration
					force default to ReconciliationCodeBlock.AccountingEntity.CloseConfiguration
					
				PrmGeneralLedgerClosePeriod
					required
				
			Action Rules
				if (GLTransactionTypesInReconRel exists)
					if (GeneralLedgerTransactionLevel.GeneralLedgerTransaction)
						constraint (first GLTransactionTypesInReconRel.OriginatingGLTransaction.BusinessClassName = "GeneralLedgerTransaction")
							"GlobalLedgerTransactionsExistThatWereOriginallyLoadedAtTheGlobalLedgerTransactionDetailLevel"
					else
						constraint (first GLTransactionTypesInReconRel.OriginatingGLTransaction.BusinessClassName = "GLTransactionDetail")
							"GlobalLedgerTransactionsExistThatWereOriginallyLoadedAtTheGlobalLedgerTransactionLevel"
							
				BackgroundGroup = ReconciliationManagementGroup + "," + ReconciliationAccountStructure + "," + ReconciliationAccount + "-1"
				
				invoke LoadGLTransIntoReconciliation GeneralLedgerTransaction in background group(BackgroundGroup)
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount
					invoked.PrmCloseConfiguration				= GeneralLedgerCloseConfiguration
					invoked.PrmGeneralLedgerClosePeriod			= PrmGeneralLedgerClosePeriod
					invoked.PrmTransactionLevel					= GeneralLedgerTransactionLevel
					
				OldBackgroundGroup = BackgroundGroup
				BackgroundGroup = ReconciliationManagementGroup + "," + ReconciliationAccountStructure + "," + ReconciliationAccount + "-2"
						
				invoke MatchRecords TransactionReconDetail in background group(BackgroundGroup) 
					run after background group(OldBackgroundGroup)
					assign async background group id to BackgroundGroupAsyncId
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount
					
		LoadInterfaceTransactions is an Instance Action
			restricted
			Action Rules
				invoke LoadIntoReconciliation ReconciliationInterface
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount

		ClearAllReconciliations is an Instance Action
			valid when (CanClearAllReconciliations)
			Action Rules
				for each NonAdjustedMatchedTransactionReconDetailRel
					if (each.Reconciled)
						invoke UnreconcileTransaction each
						invoke UnmatchTransaction each
					else
						invoke UnmatchTransaction each
		
		ClearAllReconciliationsAndAdjustments is an Instance Action
			restricted
			Action Rules
				for each MatchedTransactionReconDetailRel
					invoke UnmatchTransactionAndAdjustment each
				
				for each AdjustedUnmatchedTransactionReconDetailRel
					invoke UnmatchTransactionAndAdjustment each
									
		SaveDetailTransactionReconciliation is an Instance Action
			valid when (ShowSaveDetailTransactionReconciliation)
			Parameters
				PrmGeneralLedgerCloseConfiguration	is a GeneralLedgerCloseConfiguration
				PrmGeneralLedgerClosePeriod			is a GeneralLedgerClosePeriod

			Parameter Rules
				PrmGeneralLedgerCloseConfiguration
					initial value is CloseConfiguration
					default to CloseConfiguration
					required
				
				PrmGeneralLedgerClosePeriod
					initial value is CurrentReconciliationPeriod
					required
					LocalCloseConfiguration = PrmGeneralLedgerCloseConfiguration
					LocalGeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
					constraint (PeriodEndReconciliationByPeriodRel exists)
						"PeriodEndReconciliationHasNotBeenCreatedForPeriod<PrmGeneralLedgerClosePeriod>"
				
			Action Rules
				constraint (!HasSelectedTransactions)
					"CannotSaveDetailTransactionReconciliation;SelectedTransactionsExist"
				
				invoke SaveDetailTransactionReconciliation TransactionReconDetail
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount
					invoked.PrmGeneralLedgerCloseConfiguration	= CloseConfiguration
					invoked.PrmGeneralLedgerClosePeriod 		= PrmGeneralLedgerClosePeriod
					
				initialize CurrentReconciliationPeriod

		ReconcileDetailTransactions is an Instance Action
			Action Rules
				invoke MatchRecords TransactionReconDetail
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount
		
		DeleteGLReconciliationTransactions is an Instance Action
			default label is "DeleteGlobalLedgerReconciliationTransactions"
			valid when (CanDeleteGLTransactions)
 			confirmation required
  			completion message is "DeleteGlobalLedgerReconciliationTransactionsHasBeenSubmittedToTheQueueForProcessing"
  			Action Rules
				invoke DeleteGLTransactions TransactionReconDetail
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount
		
		DeleteInterfaceReconciliationTransactions is an Instance Action
			valid when (CanDeleteInterfacedTransactions)
 			confirmation required
  			completion message is "DeleteInterfaceReconciliationTransactionsHasBeenSubmittedToTheQueueForProcessing"
  			Action Rules
				invoke DeleteInterfaceTransactions TransactionReconDetail
					invoked.PrmReconciliationManagementGroup	= ReconciliationManagementGroup
					invoked.PrmReconciliationAccountStructure	= ReconciliationAccountStructure
					invoked.PrmReconciliationAccount			= ReconciliationAccount
	
		SwitchToCombinedListView is an Instance Action
			valid when (ListOverListManualReconView)
			Action Rules
				invoke SwitchReconciliationListView
					invoked.UseCombinedListView	= true

		SwitchToListOverListView is an Instance Action
			valid when (!ListOverListManualReconView)
			Action Rules
				invoke SwitchReconciliationListView
					invoked.UseListOverListView	= true

		SwitchReconciliationListView is an Instance Action
			restricted
			Parameters
				UseListOverListView	is Boolean
				UseCombinedListView	is Boolean
				
			Action Rules
				if (UseCombinedListView)
					initialize ListOverListManualReconView
				if (UseListOverListView)
					ListOverListManualReconView	= true
					
		ResetNewAccountFlag is an Instance Action
			valid when (NewAccount)
			Action Rules
				NewAccount = false

		ResetAllNewAccountsFlag is an Instance Action
			valid when (ReconciliationAccountStructure.HasNewlyAddedAccounts)
			Action Rules
				invoke ResetAllNewAccountsFlag ReconciliationAccountStructure

		AssignAccountToReportGroup is an Instance Action
			Parameters
				PrmReconciliationAccountGroup	is a ReconciliationAccountGroup
					default label is "ReportGroup"
					
			Action Rules
				constraint (!IsIndependentGroup)
					"MustAssignReconciliationReportGroupAtTheAccountLevelForIndependentGroups"
				
				constraint (!IsAccountWithinConsolidatedGroup)
					"MustAssignReconciliationReportGroupAtTheGroupLevelForConsolidatedGroups"
						
				if (ReconciliationAccountGroup entered)
					confirmation required
						"AccountAlreadyAssignedToReportGroup<ReconciliationAccountGroup>:ReplaceWith<PrmReconciliationAccountGroup>"
						
				if (PrmReconciliationAccountGroup.ReconciliationAccountType entered)		
					constraint (ReconciliationAccountType = PrmReconciliationAccountGroup.ReconciliationAccountType)
						"AccountType<ReconciliationAccountType>ForAccountMustMatchTheAccountType<PrmReconciliationAccountGroup.ReconciliationAccountType>ForReportGroup"
				
				invoke UpdateReconciliationAccountGroup
					invoked.PrmReconciliationAccountGroup = PrmReconciliationAccountGroup
				
				if (IsConsolidatedGroup)
					invoke UpdateReconciliationAccountGroup ReconciliationAccount children
						invoked.PrmReconciliationAccountGroup = PrmReconciliationAccountGroup
					
		AddToReconciliationGroup is an Instance Action
			valid when (CanAddToReconciliationGroup)
			Parameters
				PrmReconciliationGroup is a ReconciliationAccount
					
			Parameter Rules
				PrmReconciliationGroup
					required
						"ReconciliationGroupIsRequired"
						
					constraint (!ParentReconciliationAccount entered)
						"ReconciliationAccountAlreadyAttachedToReconciliationGroup"
						
					constraint (PrmReconciliationGroup != ReconciliationAccount)
						"CannotAddReconciliationAccountToItsOwnReconciliationGroup"
			
			Action Rules
				if (PrmReconciliationGroup.ReconciliationGroupMethod.Consolidated)
					constraint (!HasRecurringReconciliationDetails)
						"ReconciliationAccountHasRecurringReconciliationDetails;CannotAddToGroup"
					
					constraint (!HasOpenScheduledReconciliationDetails)
						"ReconciliationAccountHasOpenScheduledReconciliationDetails;CannotAddToGroup"
						
					constraint (!HasRecurringReconcilingItems)
						"ReconciliationAccountHasRecurringReconcilingItems;CannotAddToGroup"
					
					constraint (!HasOpenScheduledReconcilingItems)
						"ReconciliationAccountHasOpenScheduledReconcilingItems;CannotAddToGroup"

					if (ReconciliationAccountStructure.ReconciliationCurrency.EntityFunctional)
						if (PrmReconciliationGroup children exist)
							constraint (first PrmReconciliationGroup children.ReconciliationCodeBlock.AccountingEntity.FunctionalCurrency = ReconciliationCodeBlock.AccountingEntity.FunctionalCurrency)
								"CannotAddAccountsToAConsolidatedGroupWithDifferentFunctionalCurrencies"
							
				if (!PrmReconciliationGroup.CloseConfiguration entered)
					invoke FastUpdate PrmReconciliationGroup
						invoked.CloseConfiguration = CloseConfiguration
				else
					constraint (PrmReconciliationGroup.CloseConfiguration = ReconciliationCodeBlock.AccountingEntity.CloseConfiguration)
						"CannotGroupAccounts;<actor.context.FinanceEnterpriseGroup.AccountingEntityLabel>HasADifferentCloseConfigurationDefined"
				
				if (PrmReconciliationGroup.ReconciliationGroupMethod.Consolidated)
					if (PrmReconciliationGroup.ReconcileFrequency 			!= ReconcileFrequency
					or	PrmReconciliationGroup.PeriodWithinQuarter 			!= PeriodWithinQuarter
					or  PrmReconciliationGroup.ReconciliationAccountType 	!= ReconciliationAccountType
					or  PrmReconciliationGroup.Priority 					!= Priority
					or  PrmReconciliationGroup.Risk 						!= Risk
					or  PrmReconciliationGroup.ReconciliationAccountGroup	!= ReconciliationAccountGroup
					or  PrmReconciliationGroup.CloseTask 					!= CloseTask
					or  PrmReconciliationGroup.FinanceTeam 					!= FinanceTeam
					or  PrmReconciliationGroup.AssignedResource 			!= AssignedResource
					or	PrmReconciliationGroup.RequireSupportingDoco 		!= RequireSupportingDoco
					or	PrmReconciliationGroup.RequiresApproval 			!= RequiresApproval
					or	PrmReconciliationGroup.ApprovalCode 				!= ApprovalCode
					or	PrmReconciliationGroup.ReconciliationPolicy			!= ReconciliationPolicy)
						confirmation required
							"DefaultValuesAreDifferentBetweenTheAccountAndTheReconciliationGroup.DefaultValuesFromTheReconciliationGroupWillBeUsedForTheReconciliationProcess;WouldYouLikeToContinue?"
				else
				if (PrmReconciliationGroup.ReconciliationGroupMethod.Independent)
					if (PrmReconciliationGroup.ReconcileFrequency 			!= ReconcileFrequency
					or	PrmReconciliationGroup.PeriodWithinQuarter 			!= PeriodWithinQuarter
					or  PrmReconciliationGroup.FinanceTeam 					!= FinanceTeam
					or  PrmReconciliationGroup.AssignedResource 			!= AssignedResource
					or	PrmReconciliationGroup.RequiresApproval 			!= RequiresApproval
					or	PrmReconciliationGroup.ApprovalCode 				!= ApprovalCode)
						confirmation required
							"DefaultValuesAreDifferentBetweenTheAccountAndTheReconciliationGroup.DefaultValuesFromTheReconciliationGroupWillBeUsedForTheReconciliationProcess;WouldYouLikeToContinue?"
							
				ParentReconciliationAccount = PrmReconciliationGroup
				
				if (PrmReconciliationGroup.ReconciliationGroupMethod.Consolidated)
					if (PrmReconciliationGroup.ReconcileFrequency != ReconcileFrequency)
						ReconcileFrequency = PrmReconciliationGroup.ReconcileFrequency
					if (PrmReconciliationGroup.PeriodWithinQuarter != PeriodWithinQuarter)
						PeriodWithinQuarter = PrmReconciliationGroup.PeriodWithinQuarter
					if (PrmReconciliationGroup.ReconciliationAccountType != ReconciliationAccountType)
						ReconciliationAccountType = PrmReconciliationGroup.ReconciliationAccountType
					if (PrmReconciliationGroup.Priority != Priority)
						Priority = PrmReconciliationGroup.Priority
					if (PrmReconciliationGroup.Risk != Risk)
						Risk = PrmReconciliationGroup.Risk
					if (PrmReconciliationGroup.ReconciliationAccountGroup != ReconciliationAccountGroup)
						ReconciliationAccountGroup = PrmReconciliationGroup.ReconciliationAccountGroup
					if (PrmReconciliationGroup.CloseTask != CloseTask)
						CloseTask = PrmReconciliationGroup.CloseTask
					if (PrmReconciliationGroup.FinanceTeam != FinanceTeam)
						FinanceTeam = PrmReconciliationGroup.FinanceTeam
					if (PrmReconciliationGroup.AssignedResource != AssignedResource)
						AssignedResource = PrmReconciliationGroup.AssignedResource
					if (PrmReconciliationGroup.RequireSupportingDoco != RequireSupportingDoco)
						RequireSupportingDoco = PrmReconciliationGroup.RequireSupportingDoco
					if (PrmReconciliationGroup.RequiresApproval != RequiresApproval)
						RequiresApproval = PrmReconciliationGroup.RequiresApproval
					if (PrmReconciliationGroup.ApprovalCode != ApprovalCode)
						ApprovalCode = PrmReconciliationGroup.ApprovalCode
					if (PrmReconciliationGroup.ReconciliationPolicy != ReconciliationPolicy)
						ReconciliationPolicy = PrmReconciliationGroup.ReconciliationPolicy
					if (PrmReconciliationGroup.Active != Active)
						Active = PrmReconciliationGroup.Active
				else
				if (PrmReconciliationGroup.ReconciliationGroupMethod.Independent)
					if (PrmReconciliationGroup.ReconcileFrequency != ReconcileFrequency)
						ReconcileFrequency = PrmReconciliationGroup.ReconcileFrequency
					if (PrmReconciliationGroup.PeriodWithinQuarter != PeriodWithinQuarter)
						PeriodWithinQuarter = PrmReconciliationGroup.PeriodWithinQuarter
					if (PrmReconciliationGroup.FinanceTeam != FinanceTeam)
						FinanceTeam = PrmReconciliationGroup.FinanceTeam
					if (PrmReconciliationGroup.AssignedResource != AssignedResource)
						AssignedResource = PrmReconciliationGroup.AssignedResource
					if (PrmReconciliationGroup.RequiresApproval != RequiresApproval)
						RequiresApproval = PrmReconciliationGroup.RequiresApproval
					if (PrmReconciliationGroup.ApprovalCode != ApprovalCode)
						ApprovalCode = PrmReconciliationGroup.ApprovalCode
									
		RemoveFromReconciliationGroup is an Instance Action
			valid when (CanRemoveFromReconciliationGroup)
			Action Rules
				initialize ParentReconciliationAccount		

		PopulatePeriodWithinQuarter is a Set Action
			restricted
			run in background

			Instance Selection
				where (ReconcileFrequency.Quarterly
				and    PeriodWithinQuarter not entered)

			Sort Order
				ReconcileFrequency
				PeriodWithinQuarter

			Action Rules
				Instance Rules
					PeriodWithinQuarter = 3 
