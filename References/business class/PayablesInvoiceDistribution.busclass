PayablesInvoiceDistribution is a BusinessClass
	owned by ap
	prefix is APD
	classic name is APDISTRIB

	Ontology
		symbolic key is PayablesInvoiceDistribution
			classic set name is APDSET0
			classic name is DIST-SEQ-NBR


	Patterns
		implements InlineUserFields
			size is 1000
		implements ContextualParent
		implements StaticJava
		disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals
			write to base level only
		implements ForceUIRefreshOnStale		
		implements Archivable

	Persistent Fields
		Vendor								is a snapshot of PayablesInvoice.Vendor
		Invoice								is a snapshot of PayablesInvoice.Invoice
		Suffix								is a snapshot of PayablesInvoice.Suffix
		CancelSequence						is a snapshot of PayablesInvoice.CancelSequence
		CommentText


		OriginalDistribution				is a DistributionSequence
			classic name is ORIG-DIST-SEQ
		DistributionType					is a PayablesDistributionType
		ProcessLevel						is a PayablesProcessLevel
			classic name is PROC-LEVEL
		PostingOption
			classic name is POST-OPTION
		InvoiceType							is a PayablesInvoiceType 










		Status								is Numeric size 1
			classic name is REC-STATUS
			States
				Unreleased	value is 0
				Released	value is 1
				Historical	value is 9
				Pending		value is 5
				Approved	value is 6
				Rejected	value is 7
		InvoiceCurrency						is a FromCurrency
			classic name is INV-CURRENCY
			default label is "Currency"
		TaxRate								is a ChrgRate


		DistributionDate					is Date 
			classic name is DISTRIB-DATE
		DistributionAmount					is a FinanceCurrencyAmountGroup
			classic name for DistributionAmount.CurrencyAmount is ORIG-TRAN-AMT 
			classic name for DistributionAmount.FunctionalAmount.EnteredCurrencyAmount is ORIG-BASE-AMT


		BaseNumberOfDecimals								
			classic name is BASE-ND
		NumberOfDecimals					is Numeric size 1
			classic name is TRAN-ND
		ToBaseNumberOfDecimals				is Numeric size 1
			classic name is TO-BASE-ND
		TaxableAmount						is an InternationalAmount
			classic name is TAXABLE-AMT
			precision is PayablesInvoice.InvoiceCurrency.NumberOfDecimals
		UnitAmount							is an InternationalAmount
			classic name is UNT-AMOUNT

		TaxIndicator									
		TaxSequenceNumber								
			classic name is TAX-SEQ-NBR
		TaxCode
		TaxType								is a TaxMethod
		Description
		DistributionReference				is a Reference 
			classic name is DST-REFERENCE


		AccrualCode							is a PayablesAccrualCode
			classic name is ACCR-CODE
		AssetFlag
		PurchaseOrder
		PurchaseOrderLine
			classic name is PO-LINE-NBR
			delete ignored
		PayablesInvoiceDetail
			delete ignored
		AddOnCharge
			classic name is PO-AOC-CODE
		GltObjId							is an ObjId		

		DistributionCode					is a PayablesDistributionCode
			classic name is DIST-CODE
		TaxPoint
		VATReverse							is Boolean
			classic name is VAT-REVERSE-FL
		PayablesInvoiceDistributionObjectID	is Numeric size 12	
			sql name is PInvoiceDistributionObjectID
			classic name is DST-OBJ-ID
		MatchCreated						is AlphaUpper size 1
			classic name is MA-CREATE-FL
			States
				Yes		value is "Y"
				Summary	value is "S"
				Detail	value is "D"
				Unmatch	value is "U"
		TaxUsageCode
			classic name is TAX-USAGE-CD
		IntransitDistribution				is AlphaUpper size 1
			classic name is TRAN-DIST-FLAG
			States
				Yes			value is "Y"
				No			value is "N"
				Reversed	value is "R"
		PullForFinancialReporting			is Boolean
			classic name is PULL-FOR-FR-FL
		ProjectUpdateStatus
			classic name is AC-UPD-STATUS
		ActivityUpdatedDate					is TimeStamp		
			classic name is AC-UPD-DATE
		DiversityCode						is a PayablesDiversityCode
			classic name is DIVERSE-CODE
		AdjustedDistribution				is Boolean
			classic name is DISTRIB-ADJ
		TaxInterfaced						is Boolean
			classic name is TAX-FLAG
		ICNCode
		StockWeight
			classic name is WEIGHT
		SupplementaryQuantity				is a Quantity
			classic name is SUPLMNTARY-QTY
		LineType							is AlphaUpper size 1
			States
				Goods	value is "G"
				Service	value is "S"
		ProcurementCardStatement
			classic name is STATEMENT
		TransactionNumber					is a ProcurementCardTransaction
			classic name is TXN-NBR
		Retainage							is Boolean
		ProductTaxCategory
			classic name is PROD-TAX-CAT
		CreatedBy							is an Operator 
			holds pii
		LastUpdateDate						is TimeStamp			
			classic name is LAST-UPDT-DATE
		LastUpdateBy						is an Operator 
			holds pii
		DistributionAccount					is a FinanceCodeBlock
			classic name for DistributionAccount.ToAccountingEntity is DIST-COMPANY
			classic name for DistributionAccount.AccountingUnit is DIS-ACCT-UNIT
			classic name for DistributionAccount.GeneralLedgerChartAccount is DIS-ACCOUNT
			classic name for DistributionAccount.Project is ACTIVITY
		ContractRebateGroup
		AccountingEntity	
		PurchasingContract					is a Contract 
			delete ignored
		ContractLine
			delete ignored
		FundAppliedAmount 					is an InternationalAmount 
		SpendCategory
		SpendCategoryDetail

		VATInputTaxAmount					is an InternationalAmount
		RecoverableTaxAreaId				is like TaxCode 
		RecoverableJurisLevel				is a VertexJurisdictionLevel
		RecoverableImpositionType			is a VertexImpositionType
		RecoverablePercent					is a Percent
		RecoverableAmount					is an InternationalAmount
		UnrecoverableAmount					is an InternationalAmount
		RecoverableDate						is Date
		BlockingOverridePercent				is a TaxRateValue
		PartialExemptRecvblOvrdPct			is a TaxRateValue
		ForeignOrDomestic					is Numeric 1
			States
				Domestic	value is 0
				Foreign		value is 1
		IsService							is Boolean
		VertexSimplificationCode			is a SimplificationCode
		Imposition							is a VertexImpositionType
		RateClassificationText				is a RateClassification
		ReturnedTaxType						is a VertexTaxType
		InputOutputType						is a VertexInputOutputType
		InvoiceTextCode						is a InvoiceTextCodeOut
		SummaryInvoiceTextOut				is a SummaryInvoiceText
			default label is "VertexResponse"
		VertexVATType						is a VatType

		LetterOfGuarantee
			classic name is LTR-OF-GUARAN
		HSNSACCode
		CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected
		DistributionAggregation				is like APDistributionAggregation
	Transient Fields



		GLFinanceCodeBlock					is a TransactionCodeBlock				
			derive value from GLTransactionDetailRel.FinanceCodeBlock 	// // jt-626283 gives "Index out of range" error on execution if here
		GLTransactionAmount					is a CurrencyAmount
			derive value from GLTransactionDetailRel.TransactionAmount
			precision is PayablesInvoice.InvoiceCurrency.NumberOfDecimals			
		TransientPaymentAmount				is a FinanceCurrencyAmountGroup
		GLTKeepRateOnly						is Boolean
		TransientGLCalendarPeriod			is a GeneralLedgerCalendarPeriod		
			derive value from GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod
		TransientDeleteFromHeader			is Boolean
		TransientCreatedFrom				is Numeric 1
			States
				InvoiceHeader			value is 1
				ExpenseDistribution		value is 2
				CreateTaxDistribution	value is 3
				DistribCodeOnDistrib	value is 4
		TransientFinanceCurrencyAmt			is a FinanceCurrencyAmount
			derive value from GLTransactionDetailRel.ReportCurrencyAmount
		TaxAccountingEntity					is like ToAccountingEntity
			derive value from DerivedTaxAccountingEntity	
		TaxAccrualOffset					is Boolean
		TransientTaxReversal				is Boolean					
		TransientTaxRoundAmt				is an InternationalAmount	
		GLJournalizeGroup 					is like JournalizeGroup
			derive value from GLTransactionDetailRel.JournalizeGroup
		ProjectPostingDate					is a PostingDate	
		TransactionDate						is an ExchangeDate	
		ReverseFromCancel					is Boolean					
		BypassProjectDateEdit
			derive value from DerivedBypassProjectDateEdit
		BypassActiveCodeBlockEdit
		BypassDefaultTaxIndicator			is Boolean		
		BypassCommitmentUpdate				is Boolean		
		UnitsAmount						
			derive value from DerivedUnitsAmount 		
		ReversingDistributionToAccountType  is Numeric size 1 	
			States
				ToNotAllowed	value is 0
				ToNotRequired	value is 1	
				ToRequired 		value is 2	




		TransientAsset						is an Asset
			default label is "Asset"
		TransientAssetTemplate				is an AssetTemplate
			default label is "AssetTemplate"
		TransientAssetDescription			is a Description
		TransientTagNumber					is a TagNumber
		TransientItemQuantity				is an ItemQuantity
			default label is "AssetItemQuantity"
		TransientInServiceDate				is Date
		TransientPurchaseDate				is Date
		TransientModelNumber				is a ModelNumber
		TransientSerialNumber				is a SerialNumber
		TransientHoldAsset					is Boolean
		TransientAssetGroup					is an AssetGroup
		TransientCombine					is a Combine
		TransientAccountingUnitGroup		is an AssetAccountingUnitGroup
		TransientLandedHeaderTaxCode		is Boolean		
		TransientBypassErrorUpdate			is Boolean
		SaveTransientBypassErrorUpdate		is Boolean
			default label is untranslatable
		TransientLinkTaxTableDistributions	is Boolean
		TransientCurrencyRefresh			is Boolean
		TransientReversalPostDate			is Date						
		TransientReleaseAfterCreate			is Boolean					
		TransientAOCAmount					is an InternationalAmount	
			default label is "AddOnChargeAmount"



		CreateAlternateGLTransDetail		is Boolean			
		BypassUpdatingInvoiceTotals			is Boolean			
		BypassBudgetEdit					is Boolean
		BypassMatchLandedTaxEdit			is Boolean
			default label is untranslatable
		BypassTaxCodeProcessing				is Boolean		
		TransientVATReverse					is Boolean		
		TransientReverseForUpdate			is Boolean				
		TransientRevTaxAccount				is a FinanceCodeBlock	
		TransientSaveDistributionAcct		is a FinanceCodeBlock			
		TransientInvAccountingEntity		is like AccountingEntity		
		TransientDistAccountingEntity		is like AccountingEntity		
		TransientTaxCode					is a TaxCode					
		TransientPointOfTitleTransfer		is a PointOfTitleTransfer		
			default label is "PointOfTitleTransfer"
			derive value from DerivedPointOfTitleTransfer
		TransientPTXTaxAmount				is a CurrencyAmount				
			default label is untranslatable
		GLTJournalizeGroup					is like JournalizeGroup
		GLTSystem							is a GeneralLedgerSystemCode
		GLTCurrencyCode						is a FromCurrency
		GLTTransactionDate					is an ExchangeDate
		GLTPostingDate						is Date
		GLTTransactionCodeBlock				is a TransactionCodeBlock
		GLTReportCurrencyAmount				is a FinanceCurrencyAmount
		GLTGeneralLedgerEvent				is a GeneralLedgerEvent
			default label is "GlobalLedgerEvent"
		GLTControlDocumentNumber			is Alpha 30
		GLTDocumentNumber					is Alpha 30
		GLTAutoReverse						is Boolean




		TransientReferenceToThisInstance	is BusinessObjectReference
			derive value from reference to this instance

		TransientOriginalPayablesInvoiceTaxableAmount	is an InternationalAmount	
		TransientOriginalPayablesInvoiceTaxAmount		is an InternationalAmount	

		TransientPercent				is a Percent
			default label is "Percent"
			derive value from DerivedDetailPercent
		OriginalPOLineDistribution	is a PurchaseOrderLineDistribution
			derive value from DerivedPOLineDistribution		
		OriginalContractLineDistribution	is a ContractLineDistribution
			derive value from DerivedContractLineDistribution		
		ICBillToCompany					is a PayablesCompanyField
			derive value from DerivedICBillToCompany		
		ICBillingRechargeItem			is a IntercompanyBillingRechargeItem
			derive value from DerivedICBillingRechargeItem		

		RecurringTransactionAmount		is a CurrencyAmount
		RecurringJournalType			is Numeric 1 
			States
				Normal			value is 0
				InterEntity		value is 1
			derive value from DerivedRecurringJournalType		
		RecurringJournalControl			is like RecurringJournalControl
			derive value from DerivedRecurringJournalControl		
		RecurringBeginningPeriod		is a GeneralLedgerClosePeriod
			derive value from DerivedRecurringBeginningPeriod		
		RecurringBeginningYear			is a GeneralLedgerCloseYear
			derive value from DerivedRecurringBeginningYear		
		RecurringEndPeriod				is a GeneralLedgerClosePeriod
			derive value from DerivedRecurringEndPeriod		
		RecurringEndYear				is a GeneralLedgerCloseYear
			derive value from DerivedRecurringEndYear		
		RecurringPostingDay				is Numeric 2
			derive value from DerivedRecurringPostingDay		
		RecurringTransactionDay			is Numeric 2
			derive value from DerivedRecurringTransactionDay		
		RecurringToCodeBlock			is a FinanceCodeBlock
		RecurringUnitsAmount			is a UnitsAmount
		RecurringGeneralLedgerEvent		is a GeneralLedgerEvent
			default label is "RecurringGlobalLedgerEvent"
		RecurringReference				is Alpha up to 30
			derive value from DerivedRecurringReference		
		RecurringDescription			is Alpha up to 60
			derive value from DerivedRecurringDescription
		GeneralLedgerJournalControl		
			context of RecurringBeginningPeriod


		TransientCreatePrepaidAmort					is Boolean
			default label is "CreatePrepaidAmortization"
		TransientReconciliationAccountStructure		is a ReconciliationAccountStructure
			default label is "ReconciliationAccountStructure"
		TransientReconciliationAccount				is a ReconciliationAccount
			default label is "ReconciliationAccount"
		TransientReferenceNumber					is AlphaUpper 50
			default label is "ReferenceNumber"
		TransientDescription						is Alpha 100
			default label is "Description"
		TransientCloseConfiguration					is a GeneralLedgerCloseConfiguration
			derive value from AccountingEntity.CloseConfiguration
		TransientDetailAmount						is an InternationalAmount
			default label is "DetailAmount"
		TransientStartPeriod						is a GeneralLedgerClosePeriod
			default label is "StartPeriod"
		TransientEndPeriod							is a GeneralLedgerClosePeriod
			default label is "EndPeriod"
		TransientCatchUpPeriod						is a GeneralLedgerClosePeriod
			default label is "CatchUpPeriod"
		TransientPeriodTerm							is Numeric 3
			default label is "PeriodTerm"
		TransientAmortizationSpread					is Numeric 1
			default label is "AmortizationSpread"
			States
				ByPeriods				value is 0
				ByDays					value is 1
		TransientAmortizationExpenseAccount			is a FinanceCodeBlockFull
			default label is "AmortizationExpenseAccount"
		TransientAllocationCode						is a CashAllocationCode
			default label is "AllocationCode"
		TransientDistributionDescription			is Alpha 30
			default label is "DistributionDescription"

		TransientICBFundDistributionSelectAmount	is like InternationalAmount 
			derive value from DerivedICBFundDistributionSelectAmount

		TaxEntityValue					is a TaxEntity							
			derive value from GeneralLedgerCompanyRel.AccountingEntity
		TaxEntityVatReg					is a VATRegistrationNumber				
			derive value from TaxEntityValue.VATRegistrationNumber		
		TaxEntityVatRegCountry			is a Country							
			derive value from TaxEntityValue.VATRegistrationCountry	
		VertexTaxResult    				is Alpha 30								
			derive value from CalculateTax.VertexTaxResult 
		VertexEventUsed			is like Description								
			derive value from CalculateTax.RequestReference
		InputVertexRequest				is AlphaUpper 1							
			States
				None						value is blank
				QuotationRequest 			value is "Q"
				AccrualRequest				value is "A"
				InvoiceVerificationRequest	value is "V"
		VATProcessing					is Numeric 1		
			States
				Open			value is 0
				Yes				value is 1
				Bypass			value is 9
		VATRecoverable					is Numeric 1		
			States
				No				value is 0

				Yes				value is 2

				Done			value is 9
		VATUnrecoverable				is Numeric 1		
			States
				No				value is 0

				Yes				value is 2
				Done			value is 9
		VATReverseCharge				is Numeric 1		
			States
				No				value is 0
				Processing		value is 1
				Yes				value is 2
				Done			value is 9
		DoVATReverseCharge				is Boolean		
		UserElementGroup							
		TransientTaxingJurisdiction		is a TaxingJurisdiction		
		TransientInfoMessage			is Text			
		TransientSentToTaxEngine		is Boolean		
		TransientZeroDistAmount 		is Boolean		
		IntercompanyBilling				is Boolean
		FromMatch						is Boolean
		FromUnmatch						is Boolean
		ProcessingLinkedTax				is Boolean		
			default label is untranslatable
		DoDetailTaxProcessing			is Boolean		
		DetailTaxDistributionCodeFooter					
		TransientDistCodeTaxAmt			is a CurrencyAmount		
		TransientPayablesInvoicePayment	is a PayablesInvoicePayment 
			derive value from ContextPayablesInvoicePayment
		TransientAPToARClearingMemo     is Boolean
		LastDistCodeTaxAmt				is a CurrencyAmount	
		TransientLinkedTaxTableCode		is Numeric 1		
			States
				Invoiced		value is 1
				Accrued			value is 2
				Both			value is 3
		TransientVendorOffsetCreditMemo is Boolean			
		TransientShipToLocation			is an InventoryLocation		
			default label is "ShipToLocation"
			derive value from PayablesTaxDetail.ShipToLocation
		TransientAddressCode is an AddressCode      
			derive value from PayablesTaxDetail.PayablesAddressCode


	Local Fields

		LocalCancelSequence				is a CancelSequence		
		LocalCurrencyTable				is a CurrencyTable
		LocalTaxSeqNbr	 				is like TaxSequenceNumber 
		LocalTaxRate	 				is Percent 7.5

		LocalTaxAmount					is an InternalAmount		
			precision is 5
				round to precision
		LocalRoundingVariance			is an InternalAmount		
			precision is PayablesInvoice.InvoiceCurrency.NumberOfDecimals
				round to precision
		LocalInternalAmount				is an InternalAmount		
			precision is 5
				round to precision
		LocalTaxVariance				is an InternalAmount		
		LocalTaxEntity					is a TaxEntity
		LocalTaxCode					is a TaxCode
		TaxTypeOverride					is a TaxMethod		
		LocalBypassMemberEdit			is Boolean	
		LocalBypassRestrictedAccountEdit	is Boolean	
		LocalTaxPoint					is Alpha 1
		LocalVertexDistributionAccount  is a FinanceCodeBlock	
		ActionType						is AlphaUpper 1
			States
				CreateType	value is "C"
				UpdateType	value is "U"
				DeleteType	value is "D"
		NewPayablesInvoiceDistribution	is a PayablesInvoiceDistribution view
		TaxAccrualDistribution			is a PayablesInvoiceDistribution view
		TaxReversalDistribution			is a PayablesInvoiceDistribution view
		LocalTaxingJurisdiction			is a TaxingJurisdiction				
		LocalReturnedVertexTaxCode		is a VertexTaxCode
		LocalCurrentAmount 				is like InternationalAmount 
		LocalInformationMessage			is Text
		LocalSentToTaxEngine			is Boolean
		DoTaxTotalRefresh				is Boolean		
		IsShortPay						is Boolean		
		IsDistributionAccruedTax		is Boolean		
		LocalPayablesInvoiceDistribution 	is a PayablesInvoiceDistribution
		NewDistributionAmount			is a CurrencyAmount
		LocalSumDistributionAmount		is a CurrencyAmount
		LastDistributionCodeDetail		is Numeric size 4
		CalculateTax													

		OldDistributionAmountGroup		is a FinanceCurrencyAmountGroup
		LocalCashBasis					is Boolean		
		LocalReqAcUpdFl					is Boolean		
		LocalPostedFl					is Boolean		
		LocalInvPaidFl					is Boolean		
		LocalCanceledFl					is Boolean		
		LocalAPPaid						is AlphaUpper 1	

		LocalDistributionSequence		is a DistributionSequence	
		LocalOriginalDistribution		is a DistributionSequence	
		LocalImposition					is a VertexImpositionType	
		LocalReversalPostDate			is Date						
		LocalTotalTaxAmtIncrement		is a CurrencyAmount		
		LocalTotalTaxableAmtIncrement	is a CurrencyAmount		
		LocalTaxAmtIncrement			is a CurrencyAmount		
		LocalTaxableAmtIncrement		is a CurrencyAmount		
		LocalTotalInvTaxableAmtIncrement is a CurrencyAmount		
		LocalTotalAccrTaxableAmtIncrement is a CurrencyAmount		
		LocalTotalInvTaxAmtIncrement	is a CurrencyAmount		
		LocalTotalAccrTaxAmtIncrement	is a CurrencyAmount		
		LocalTaxTranAccount				is a FinanceCodeBlock		
		LocalTaxTranAmount				is an InternationalAmount
		LocalExpenseLineTaxAmount		is a CurrencyAmount		
		LocalPortionOfTaxDifference		is a CurrencyAmount		

		ApinwsXXInpAcctUnit				is like AccountingUnit			
		ApinwsXXInpAccount				is an Account					
		ApinwsCalcTaxRateSwitch			is Boolean						
		LocalRunningTaxSum				is a CurrencyAmount		
		LocalRunningTaxableSum			is a CurrencyAmount		
		LocalCalculateTaxExecuted		is Alpha 1						
		ProcessTaxHistory												
		LocalTaxHistoryProcessed		is Alpha 1						
		PayablesTaxTolerance									
		LocalPayablesTaxTolerance		is Alpha 1				
		VerifyPayablesMonitor
		LocalCheckAPMonitor				is Alpha 1		
		LocalMissingMessage				is Alpha 30
		LocalContinue					is Boolean
		GLBaseAmount			 		is an FinanceCurrencyAmount		

		TestingOn						is Boolean

		Idx								is Numeric size 2
		Idx2							is Numeric size 2		
		LocalTaxCodeAccount				is a FinanceCodeBlock
		LocalDocumentCurrencyTotals		is a PayablesCurrencyGroupTotals
		LocalRunProgram					is a RunProgram	
		LocalProcessLevel				is a PayablesProcessLevel	



		LocalCheckTaxAccountFields		is a FinanceCodeBlock
		LocalEnterpriseGroup			is like FinanceEnterpriseGroup	
		LocalPerformingCancel			is Boolean
		CreateFromBatchSwitch			is Boolean		
		CreateGainLossSwitch			is Boolean
		LocalCompany					is like Company					
		LocalPayablesCompany			is like PayablesCompany			
		LocalMatchCompany				is like MatchCompany			
		LocalTaxCompany					is like PayablesCompany			
		LocalAccrualCode				is like PayablesAccrualCode		
		LocalPayablesDiscountCode		is like PayablesDiscountCode	
		LocalCashCode					is like CashCode				
        LocalBankTransactionCode		is like BankTransactionCode		
        LocalTransactionIDNumber		is a TransactionIDNumber		
		LocalPayablesInvoicePayment		is like PayablesInvoicePayment	
		LocalPayablesInvoice			is like PayablesInvoice			
		LocalPaymentSequence			is like PaymentSequence			
		LocalVoidSequence				is like VoidSequence			
		LocalJournalizeGroup			is a JournalizeGroup			
		LocalCashCodePaymentExchange	is a CurrencyExchangeGroup		
		LocalCurrencyExchange			is a CurrencyExchangeGroup		
		LocalDoCurrency					is Boolean
		DisplayProcessAddOnChargeMessage	is Boolean	
		TaxAccountingEntityHasValue		is Boolean		
		BypassStructureRelationEdit
		BypassUnitAndAmountEdit
		InterfaceCreate					is Boolean
		LocalDistributionAccount        is a FinanceCodeBlock
		LocalTaxableAmount              is an InternationalAmount
		LocalHeaderTaxableAmount        is an InternationalAmount		
		LandedTaxAmount					is a CurrencyAmount		
			precision is PayablesInvoice.InvoiceCurrency.NumberOfDecimals	
				round to precision											

		LocalSpendCategoryDetailVarsSet	is Boolean
		LocalSpendCategory				is Numeric size 3
			States
				OnContract			value is 1
				OffContract			value is 2
				NoContract			value is 3
				ExpenseInvoice		value is 4		
		LocalPOLineItemType				is like ItemType
		LocalPOLineCostCode				is like CostCode

		NextSentence					is Boolean
		FirstPaymentSequence			is like PaymentSequence
		
		OldDistributionAmountCurrencyAmount	is an InternationalAmount
		NewDistributionAmountCurrencyAmount	is an InternationalAmount

		LocalPostToAccount			is a FinanceCodeBlock		
		BypassDistActionExitRules		is Boolean
		LocalCreateTaxDistributions	is a CreateTaxDistributions
		LocalCalculateTax 			is a CalculateTax

		LocalRecoverableAccount        	is a FinanceCodeBlockFull   
		LocalUnRecoverableAccount      	is a FinanceCodeBlockFull   
   		LocalForeignRecoverableAccount  	is a FinanceCodeBlockFull  
		LocalForeignUnRecoverableAccount    is a FinanceCodeBlockFull  
		LocalFinanceCodeBlockFull			is a FinanceCodeBlockFull	
		LocalToAccountingEntity				is a ToAccountingEntity		
		LocalJurisdictionLookupKey  	is Alpha 200				
		LocalSavedDistributionAmount 	is an InternationalAmount	

		LocalChartAccount			is like GeneralLedgerChartAccount
		LocalAccountingEntity		is like AccountingEntity
		LocalAccountingUnit			is like AccountingUnit
		LocalFinanceDimension1		is a FinanceDimension1			
		NegativeFinanceCurrencyAmountGroup							
		LocalAssetFlag				is an AssetFlag	
		LocalInventoryLocation      is like InventoryLocation 

		IntrastatProcessing
		DoIntrastatReporting		is Boolean	
		IntrastatReportingRequired  is Boolean
		IsRecurring					is Boolean
		IsPrepaidRecon				is Boolean		
		LocalTrigger				is Alpha 1
		TransientCalculateTax 		is a CalculateTax  
		AOCSequenceCount				is Numeric size 9
		TaxSequenceCount				is Numeric size 9
		LineTaxSequenceCount		is Numeric size 9
		LocalTaxJurisdicationCode	is AlphaUpper size 3
		TaxLineItemView				is a TaxLineItem view
		AttributeCounter			is Numeric 5
		LocalAutoMatchResult		is like AutoMatchResult

		LocalPTXTaxCategory			is a ProductTaxCategory
		LastDistribution			is a PayablesInvoiceDistribution
		LocalPrepayCredit			is Boolean						
		LocalTranInvAmount			is an InternationalAmount		
		LocalNumberOfDecimals		is Numeric 1
		LocalCalculatePayablesFinanceStructure	is a CalculatePayablesFinanceStructure
		NativeLPLBODTrigger			is Boolean
		LocalAllowRebuild           is Boolean
		LocalErrorMessage			is Alpha 150		
		LocalTriggerFrom			is Alpha size 100
		LocalCalculateFinanceCurrencyAmountGroup	is a CalculateFinanceCurrencyAmountGroup
		LocalBoolean				is Boolean
		LocalDeleteAndAdd           is Boolean
		LocalDerivedFESKey 			is a FrontEndSplitKey
		LocalFEGtext				is like FinanceEnterpriseGroup
		LocalBODAccountingEntity  		is Alpha 100	
		DummyInvoiceLineNumber      		is Numeric size 9 
		LocalInvoiceDescription				is Alpha size 60
		LocalCustomerVATRegistartionNumber  is AlphaUpper size 25	
		LocalDummyLineTaxTotalAmount		is an InternationalAmount
		LocalPIDistribution					is Numeric size 5
		LocalDummyLineTaxSequence			is Numeric size 5
		LocalDummyTaxCode					is AlphaUpper size 15
		LocalDummyLineTaxCode				is AlphaUpper size 15	
#ifdef module cam
		LocalCustodialPosting	is a FinanceDimension10
#endif
		LocalReverseAmount				is a CurrencyAmountsGroup
		LocalCurrencyCalculationGroup	is a CurrencyCalculationGroup
		LocalDistribDate			is Date				
		LocalStatus					is Numeric size 1	


		LocalTaxSeqNumber					is Numeric size 9

		LocalConfigurationParameter			is Alpha size up to 200
		FESPayablesInvoiceDistribution		is a PayablesInvoiceDistribution view
		LocalPmtTaxAmt						is an InternationalAmount
		LocalTranDiscAmt					is an InternationalAmount
		LocalBaseDiscAmt					is an InternationalAmount
		LocalDistTrantaxDiscAmt1			is an InternationalAmount
		LocalDistTrantaxDiscAmt3			is an InternationalAmount

		LocalMatrixDimensionAccount			is a MatrixApprovalLevelDimension

	Context Fields

		MatchWork
		MatchInvoiceMessage
		PayablesInvoiceDetailContext    is a PayablesInvoiceDetail
		PayablesInvoiceAddOnChargeContext    is a PayablesInvoiceAddOnCharge
		InvoiceDateRange				is a DateRange
		DistributionDateRange			is a DateRange2
		CustomSearchGroup				is a PayablesInvoiceDistribution group
		GeneralLedgerCompanyGroup
		AuditDateRange					is a DateRange	
		ContextSettlementIDForContext 	is a SettlementIDForContext 
		ContextPayablesInvoicePayment	is a PayablesInvoicePayment 


	Field Rules


		RecurringTransactionAmount
			if (RecurringTransactionAmount entered)	//	IEFIN-93057 - was "> 0" - Changing to allow credit amounts to create RJE.
				IsRecurring = true




























					
		AccountingEntity
			default to GeneralLedgerCompanyRel.AccountingEntity
		
		TransientAddressCode
				constraint(TransientShipToLocation not entered)
					"CannotEnterBothShipToLocationAndAddressCode"

		TransientShipToLocation
			constraint(TransientAddressCode not entered)
				"CannotEnterBothShipToLocationAndAddressCode"

		DistributionType
			default to DistributionType.Distribution
			if (DistributionType.Distribution
			or	DistributionType not entered)
				cannot be changed
					"CannotMaintainThisDistributionType"	  

		DiversityCode
			default to PayablesInvoice.DiversityCode

		GltObjId
			if (!Status.Historical)
				cannot be entered

		LineType
			IntrastatReportingRequired = DerivedDoIntrastatReporting
			if (DoIntrastatReporting)
				if (action type.Create
				or  action type.Update
				or  ActionType.UpdateType) 
					if (InvoiceTaxEntityRel.IntrastatUsed
					and DistributionType.Distribution
					and !IsTaxDistribution				
					and !BypassMatchAndServiceType)									
						if  (action type.Create												
						and  IntrastatDetailNotEntered										
						and ((invoking action = "PayablesInvoice.CreateInvoiceUnreleased"	
						and   PayablesInvoice.DistributionCode entered)						
						or	 (invoking action = "PayablesInvoice.CreateInvoiceUnreleased"	
						and   DistributionCode entered)))									
							default to LineType.Service		
							
						if  (PurchaseOrderLine entered)
							if  (PurchaseOrderLine.ItemType.Service)
								LineType = "S"
							else
								LineType = "G"
								
							required 													
								"LineTypeRequiredForIntrastatInvoice"					
						
			
				if (LineType.Goods)
					constraint (!PayablesInvoice.BypassMatch						
					and         !PayablesInvoice.MatchProcessType.ServiceContract)	
						"IntrastatDetailsNotRequiredForThisTypeOfInvoice;MatchProcessType:<PayablesInvoice.MatchProcessType>" 
					if (DoIntrastatReporting)
						constraint (PayablesInvoice.NatureOfTransactionCode entered)
							"IntrastatHeaderInformationRequiredWhenLineTypeIs_\Goods" 	// APIN.429  Intrastat Hdr info required when a "G" type line is entered
	
				if (LineType.Service)
					constraint (IntrastatDetailNotEntered)
						"IntrastatReportingOnlyAllowedOnGoodsTypeLines" 				

		ICNCode
			if (DoIntrastatReporting
			and DistributionType.Distribution
			and LineType.Goods)
				default to PurchaseOrderLine.ICNCode									
				required
					"ICNCodeIsRequiredFor_\IntrastatReportingIfLineTypeIsGoods" 		

		PostingOption
			default to Vendor.VendorClass.PostingOption

		ProductTaxCategory		
			if (action type.Create)		
				default to PayablesInvoice.TransientTaxCategory				
				default to PayablesInvoiceTaxHeaderRel.ProductTaxCategory
				default to PayablesInvoiceTaxHeaderRel.EnteredTaxCategory

		PurchaseOrder
			if  (DistributionType.Distribution
			and (PurchaseOrderLine entered
			or   PayablesInvoiceDetail.PurchaseOrderLine entered))
				default to PayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder	

		InvoiceCurrency
			default to PayablesInvoice.InvoiceCurrency

		ProcessLevel
			force default to PayablesInvoice.ProcessLevel

		InvoiceType
			force default to PayablesInvoice.InvoiceType

		DistributionDate
			default to PayablesInvoice.DistributionDate
			if (!PayablesInvoice.SkipValidationForRecurringInvoice	
			and !Status.Historical		
			and	PayablesInvoice.CompanySystemClosingControlRel.Control		
			and (!PayablesInvoice.Status.Amended 
			or  (PayablesInvoice.Status.Amended and ProcurementCardStatement entered)))						
				constraint (DistributionDate within PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate)
					"PostDateOf<DistributionDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.End>"
			if (!Status.Unreleased)     
				cannot be changed

		TaxPoint
			default to PayablesInvoice.TaxPoint

		TaxIndicator



			if (IsInvoiceDetailDistribution)
				cannot be changed
					"CannotChangeTaxIndicatorForPurchaseOrderDistribution"
			if (!Status.Unreleased)			
				cannot be changed
					"CannotChangeTaxIndicatorOnReleasedDistribution"
			if (PayablesInvoice.ApinwsTaxIndSwitch)
				if (DistributionAccount entered)
					constraint (TaxIndicator.None
					or          TaxIndicator.Exempt
					or          TaxIndicator.Exclude
					or          TaxIndicator.Taxable)
						"SelectAValidTaxIndicatorValue,_\TOr_\E"	
			if (PayablesInvoice.ApinwsTaxIndSwitch
			or (TaxIndicator.None
			or  TaxIndicator.Exempt
			or  TaxIndicator.Taxable))
				if (!PayablesInvoice.MatchProcessType.Expense)
					constraint (!PayablesInvoice.TaxAdjustment.Calculate)
						"TaxIndicator_\TOr_\ENotValidWith_\Tax_\Adj_3"	








			if (IsTaxDistribution			
			and TaxCode entered				
			and !old TaxIndicator.None		
			and TaxIndicator.None)			
				cannot be changed			
					"CannotChangeTaxableExpenseIntoATaxDistribution.DeleteDistributionAndRe-Enter."

		TaxCode
			if (IsInvoiceDetailDistribution)
				cannot be changed
					"CannotChangeTaxCodeForPurchaseOrderDistribution"


			
			if (DistributionCode entered)		
				cannot be changed
					"CannotChangeTaxCodeIfDistributionCodeEntered"
			if (IsTaxDistribution)		
				cannot be changed
					"CannotChangeTaxCode;DeleteAndRe-add"		
			else
				if (!CanUpdateTaxCode)		
					cannot be changed
						"CannotChangeTaxCode;DeleteAndRe-add"	

			if (TaxIndicator.Taxable
			and !PayablesInvoice.InvoiceSource.Lease)
				default to TransientShipToLocation.PurchaseOrderTaxCode				
				default to PayablesTaxDetail.ShipToLocation.PurchaseOrderTaxCode	
				default to PayablesInvoice.TaxCode
				required
					"TaxCodeRequiredWith_\TaxableLineFlag_=\T"                
			
			constraint (!TaxIndicator.Exempt)
				"ExemptLineDistributionCannotHaveATaxCode"                
					
			if (MatchCreated entered 
			and TaxCode = Company.TaxCode) 
				NextSentence = true 
			else	 
			if (PayablesInvoice.TaxCode.TaxType.CalculatedRate)
				constraint (PayablesInvoice.TaxCode = TaxCode)
					"CalculatedRateTaxCodeNotAllowedWithOtherTaxCodes"        



			
			if (Status.Released)
				if (TaxCode entered
				and old TaxCode not entered)
					constraint (!TaxCode changed)				           	
						"CannotApplyTaxCodeToExistingDistribution"	 
				if (TaxCode changed
				and old TaxCode entered)
					constraint (Description changed) 	
						"CannotChange;TaxCodeExists_-DeleteAndAddAgain" 	    

			if (PayablesInvoice.IsChargebackSubType)
				constraint (PayablesInvoice.TaxCode not entered)
					"CannotEnterTaxCodeOnBothHeaderAndDetail"		

			if (PayablesInvoice.IsChargebackSubType)
				constraint (UnitAmount not entered)
					"CannotDefineUnitsAndTaxCodeOnHistoricalDistribution"		

		TaxType
			if (TaxCode not entered)		
				initialize TaxType			

		TransientPointOfTitleTransfer	
			initial value is PayablesInvoice.DerivedPointOfTitleTransfer

		Description
			default to DerivedVendorAndName

		DistributionCode
			cannot be changed
				"CannotChangeLineDistributionCode"                         


			if (PayablesInvoice.DistributionCode entered
			and invoking action != "DeleteDistributionCodeDistributions")	


				constraint (DistributionCode = PayablesInvoice.DistributionCode
				or			PayablesInvoice.DistributionCode not entered)
					"CannotEnterBothInvoiceDistributionCodeAndLineDistributionCode"	
			if (PayablesInvoice.ContractRebateGroup.ContractGroup entered)
				cannot be entered
					"DistributionCodeNotAllowedOnRebateInvoice"         
			if (DistributionCode entered)
				if (DistributionCode.SumDetailDistributionPercent < 100%
				and DistributionCode.SumDetailDistributionPercent entered)
					constraint (UnitAmount not entered)
						"PercentTotalDefinedOnDistributionCodeIsLessThan_100%"     
		
		CreatedBy
			default to actor

		TaxableAmount
			if (PayablesInvoiceDetail entered
			and PayablesInvoiceDetail exists
			and  initiating action = "Create"  
			and  AddOnCharge not entered
			and !PurchaseOrder.HasRetainage
			and InvoiceDetailMainDistributionRel exists)
				LocalTaxableAmount = first InvoiceDetailMainDistributionRel.DistributionAmount.CurrencyAmount
				if (TaxableAmount < 0)
					LocalTaxableAmount *= -1 
				if  (!PurchaseOrderLine.TaxableUnitCost entered)
					constraint (TaxableAmount = PayablesInvoiceDetail.TotalDistributionAmount
					or          TaxableAmount = PayablesInvoiceDetail.TotalDistributionAmount * -1
					or          TaxableAmount = LocalTaxableAmount)
						"TaxableAmountOf<TaxableAmount>ShouldEqualInvoiceDetailDistributionAmountOf<PayablesInvoiceDetail.TotalDistributionAmount>OrOriginatingDistributionAmountOf<LocalTaxableAmount>"  
			
			if (EditTaxableAmount)
				if (TaxableAmount entered
				and DistributionAmount.CurrencyAmount entered
				and !IsLinkedTaxDistribution
				and TaxCode not entered)
					constraint (TaxableAmount <= DistributionAmount.CurrencyAmount)
						"TaxableAmtOf<TaxableAmount>CannotBeGreaterThanGoodsAmountOf<DistributionAmount.CurrencyAmount>"	
				if (InvoiceType.CreditMemo
				and !IsTaxDistribution		
				and TaxableAmount < 0
				and DistributionAmount.CurrencyAmount < 0)
					constraint (TaxableAmount <= DistributionAmount.CurrencyAmount)		
						"TaxableAmountOf<TaxableAmount>CannotBeGreaterThanGoodsAmountOf<DistributionAmount.CurrencyAmount>"	
			constraint (!TaxIndicator.Exempt)		
				"ExemptLineDistributionCannotHaveTaxableAmount"

			if ((TaxIndicator.Taxable
			or   TaxIndicator.Exclude)			
			and  DistributionAmount.CurrencyAmount entered)
				default to DistributionAmount.CurrencyAmount

			
			if  (TaxCodeRel.TaxType.CalculatedRate)
				if (TaxRate entered)
					if (TaxableAmount not entered)											
						if (IsTaxDistribution)												
							TaxableAmount = (DistributionAmount.CurrencyAmount / TaxRate)	
						else																
							TaxableAmount = DistributionAmount.CurrencyAmount				
						if  (DistributionAmount.CurrencyAmount * TaxRate >= .01)
							required
								"TaxableAmountIsRequiredWithTaxCode"                        
				else																		
					if (TaxableAmount entered)												
						if (IsTaxDistribution)												
							TaxRate = (DistributionAmount.CurrencyAmount / TaxableAmount)	
						else																
							TaxRate = CalculateTax.OutputTaxRate							
					else																	
						if (!IsTaxDistribution)												
							TaxableAmount = DistributionAmount.CurrencyAmount				
							TaxRate = CalculateTax.OutputTaxRate							
						required															
							"TaxableAmountIsRequiredWithCalculateRateTypeTaxCode"			
















			if (TaxCode entered
			and PayablesInvoice.MatchProcessType.Expense			
			and DistributionAmount.CurrencyAmount not entered
			and TaxIndicator.Taxable)
				required
					"TaxableAmountRequiredWithTaxCode"                        

			if (PayablesInvoice.IsChargebackSubType
			and DistributionAmount.CurrencyAmount entered
			and TaxCode entered)
				required
					"TaxableAmountRequiredIfTaxCodeEntered"			
					
			if (PayablesInvoice.TaxCode not entered
			and DistributionAmount.CurrencyAmount not entered
			and TaxIndicator.Taxable)
				required
					"TaxableAmountRequiredWithLineTaxCode"                        

			if (TaxCode not entered
			and PayablesInvoice.TaxCode not entered
			and !TaxIndicator.Exclude							
			and !TaxIndicator.Taxable)
				cannot be entered
					"TaxableAmountValidOnlyIfUsingTaxCode"                       
					
			if (TaxCode not entered
			and TaxableAmount entered
			and !TaxIndicator.Taxable
			and !TaxIndicator.Exclude							
			and !DistributionType.ExpenseAccrual
			and (PayablesInvoice.MatchProcessType entered
			and !PayablesInvoice.MatchProcessType.Expense))
				cannot be entered
					"TaxableAmountValidOnlyIfUsingTaxCode"		

			if (!Status.Unreleased)
				cannot be changed
					"CannotChangeTaxableAmount" 			
				
			if (PayablesInvoice.IsChargebackSubType)
				constraint (TaxCode entered
				or 			PayablesInvoice.TaxCode entered)
					"TaxableAmountOnlyValidIfTaxCodeExists"		

		DistributionAmount
			if (PurchaseOrder entered)			
				if  (PurchaseOrder.CurrencyExchangeSetPoint.Entry)
					if  (PurchaseOrder.EnteredCurrencyConversionRate entered)
						DistributionAmount.FunctionalAmount.ToCurrency 			= PayablesInvoice.PayCurrency
						DistributionAmount.KeepRateOnly 						= true
						DistributionAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate
						DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PurchaseOrder.EnteredCurrencyConversionRate


				else
				if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					if  (PurchaseOrder.ReceiptCurrencyConversionRate entered)
						DistributionAmount.FunctionalAmount.ToCurrency 			= AccountingEntityRel.FunctionalCurrency
						DistributionAmount.KeepRateOnly 						= true
						DistributionAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate
						DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PurchaseOrder.ReceiptCurrencyConversionRate


			

				if (!DistributionType.GainLossDistribution)
					if ((TaxCode not entered
					and TaxableAmount not entered)
					and DistributionCode not entered)		
						required
			
			if (DistributionAmount.CurrencyAmount not entered)
				if (TaxableAmount entered
				and TaxCode entered
				and !IsTaxDistribution		
				and DistributionCode not entered
				and !DistributionType.GainLossDistribution
				and PayablesInvoice.MatchProcessType.Expense)
					DistributionAmount.CurrencyAmount = TaxableAmount	

			if (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic
			and PayablesInvoice.BackgroundProcessing entered)
			    NextSentence = true
			else								
			if (DistributionAmount.CurrencyAmount changed)
				if (!Status.Unreleased)
					if (!PayablesInvoice.IsRecurringInvoice)
						cannot be changed
							"DistributionIsReleased;CannotChangeAmount._\UseAction_'Reverse_\Distribution_\For_\Update'"
					

				if (!DistributionType.GainLossDistribution)
					if ((TaxCode not entered
					and TaxableAmount not entered)
					and DistributionCode not entered)		
						required
					
					if (DistributionAmount.CurrencyAmount changed)
						constraint (PayablesInvoice.RetainageAmount not entered)
							"RetainageInvoice;CannotAlterDistributionAmount"		
					
						initialize DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						if (!DistributionType.PaymentAccrual)
							DistributionAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
							DistributionAmount.KeepRateOnly 						= true
							DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 
							DistributionAmount.CurrencyAmount						= GLTransactionAmount

			if (Retainage 
			and initiating action = "Update"
			and DistributionAmount.CurrencyAmount changed)
				cannot be changed 
					"CannotChangeAmountOnRetainagePayment"

		TaxUsageCode
			if (TaxCode not entered)
				cannot be entered
					"Tax_\Usage_\CodeNotValidIfNo_\Tax_\CodeEntered"		
			if (!Status.Historical
			and TaxCode entered						
			and DistributionType.Distribution)		
				default to PayablesInvoice.VendorCompanyDefaultRel.TaxUsageCode
				default to Vendor.TaxUsageCode
				default to Vendor.VendorClass.TaxUsageCode
			
		Status
			if (Status.Pending)
				cannot be changed  
					"CannotChange,DistributionIsIn_\PendingStatus" 	  
					
			if (Status.Historical)
				constraint (DistributionAccount entered)	
					"AccountRequiredOnHistoricalDistribution"		
				
		TransientAsset
			if (TransientAssetTemplate entered)
				cannot be entered
					"EnterAssetOrAssetTemplate,NotBoth"
			if (TransientAsset.AssetProcess.Disposal
			or TransientAsset.Status.Disposed)
				cannot be entered
					"CannotUse;Asset<TransientAsset>IsDisposed"
							
		TransientAssetTemplate
			if (TransientAsset entered)
				cannot be entered
					"EnterAssetOrAssetTemplate,NotBoth"
			if  (TransientAssetTemplate entered)
				if (TransientItemQuantity not entered)
					if  (PayablesInvoiceDetail entered)
						if (PayablesInvoiceDetail.RecordSource.CreatedWithinMatch
						and PayablesInvoice.InvoiceType.MatchPrepayment
						and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
							if (PayablesInvoiceDetail.EnteredQuantity < 1)
								TransientItemQuantity		= 1
							else
								TransientItemQuantity		= PayablesInvoiceDetail.EnteredQuantity
						else							
						if (AddOnCharge entered
						and PayablesInvoiceDetail exists)
							TransientItemQuantity		= PayablesInvoiceDetail.MatchedQuantity
						else
						if (AddOnCharge entered)
							TransientItemQuantity		= PayablesInvoiceAddOnChargeRel.MatchedQuantity
						else
						if (TaxCode entered
						and TaxableAmount entered)
							TransientItemQuantity		= PayablesInvoiceDetail.MatchedQuantity * (TaxableAmount / PayablesInvoiceDetail.TotalDistributionAmount) 
						else
						if (DistributionAmount.CurrencyAmount entered)
							TransientItemQuantity		= PayablesInvoiceDetail.MatchedQuantity * (DistributionAmount.CurrencyAmount / PayablesInvoiceDetail.TotalDistributionAmount) 

						if (TransientItemQuantity not entered)
							TransientItemQuantity		= PayablesInvoiceDetail.MatchedQuantity
					else
						if  (PurchaseOrderLine entered)
							if (AddOnCharge entered)
								TransientItemQuantity		= PurchaseOrderLine.Quantity
							else
							if (TaxCode entered
							and TaxableAmount entered)
								TransientItemQuantity		= PurchaseOrderLine.Quantity * (TaxableAmount / PurchaseOrderLine.ExtendedAmount) 
							else
							if (DistributionAmount.CurrencyAmount entered)
								TransientItemQuantity		= PurchaseOrderLine.Quantity * (DistributionAmount.CurrencyAmount / PurchaseOrderLine.ExtendedAmount) 

							if (TransientItemQuantity not entered)
								TransientItemQuantity		= PurchaseOrderLine.Quantity

					if  ((TransientItemQuantity <= .5
					and   TransientItemQuantity >= -.5)
					and (PayablesInvoiceDetail entered 
					or   PurchaseOrderLine entered))
						TransientItemQuantity		= 1

				constraint (TransientItemQuantity entered)
					"MustEnterQuantityWithATemplate"		

		UnitAmount
			if(PayablesInvoice.FrontEndSplitsEnabled
			and PurchaseOrderLine entered
			and (PurchaseOrderLineDistributionRel.UnitAmount entered
			or	(AddOnCharge entered
			and PurchaseOrderLineDistributionblankAOCRel.UnitAmount entered))
			and	!DistributionAccount.GeneralLedgerChartAccount.AllowUnits.No
			and PayablesInvoiceDetail entered
			and TaxCode not entered
			and !PayablesInvoice.IsChargebackSubType)
				if(PurchaseOrderLineDistributionRel.UnitAmount entered)
					default to PurchaseOrderLineDistributionRel.UnitAmount * (PayablesInvoiceDetail.MatchedQuantity / PurchaseOrderLine.Quantity)
				else
					default to PurchaseOrderLineDistributionblankAOCRel.UnitAmount * (PayablesInvoiceDetail.MatchedQuantity / PurchaseOrderLine.Quantity)
			else
				if (!DistributionAccount.GeneralLedgerChartAccount.AllowUnits.No
				and PayablesInvoiceDetail entered
				and TaxCode not entered
				and !PayablesInvoice.IsChargebackSubType)
					default to PayablesInvoiceDetail.MatchedQuantity
					
				if (DistributionCode entered)
					if (DistributionCode.SumDetailDistributionPercent not entered)
						cannot be entered
							"UnitsValidOnlyForDistributionByPercent"                 
							
				if  (PayablesInvoice.IsChargebackSubType
				and  UnitAmount entered
				and  TaxCode entered)
					constraint (!PayablesInvoice.Status.Historical)
						"CannotDefineUnitsAndTaxCodeOnHistoricalDistribution"		

		DistributionReference
			if (Company.DefaultReference.Voucher)
				default to PayablesInvoice.VoucherNumberDisplay
			else
			if (Company.DefaultReference.Invoice)
				default to PayablesInvoice.Invoice
			else
			if (Company.DefaultReference.PurchaseOrder)
				if (PurchaseOrder entered)
					default to PurchaseOrder
				else
					default to PayablesInvoice.ExternalPurchaseOrder

		BaseNumberOfDecimals
			force default to Company.CurrencyNumberOfDecimals	
			if (PayablesInvoice.BaseNumberOfDecimals entered)
				BaseNumberOfDecimals = PayablesInvoice.BaseNumberOfDecimals 
			if (UnitAmount entered
			and DistributionAmount.CurrencyAmount not entered)
				BaseNumberOfDecimals = 2

		NumberOfDecimals
			default to PayablesInvoice.NumberOfDecimals
			
		ToBaseNumberOfDecimals
			ToBaseNumberOfDecimals = BaseNumberOfDecimals				
			default to PayablesInvoice.BaseNumberOfDecimals	

		AccrualCode

			if (IsAccruedTaxDistribution					
			and TaxAccountingEntity entered)				
				LocalTaxEntity		= TaxAccountingEntity	
				TransientTaxCode 	= TaxCode				
				default to EntityTaxCode2Rel.AccrualCode	
				default to TaxEntityRel.AccrualCode			
			default to PayablesInvoice.AccrualCode

		DistributionAccount					
			if (DistributionAccount changed)
				if (initiating action = "PayablesInvoice.RemoveRetainage")
					NextSentence = true 
				else 
				if (!Status.Unreleased)	
					if (Status.Released)		
						constraint (PayablesInvoice.MatchProcessType.Expense)
							"CannotChangeAccount;MustBeExpenseInvoice"
						constraint (IsExpenseDistribution)
							"CannotChangeAccount;MustBeExpenseDistribution"
						constraint (!IntercompanyBillingTransactionRel exists)		
							"CannotChangeAnIntercompanyBillingDistribution"
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							cannot be changed
								"CannotChangeAccount._\UseAction_'Reverse_\Distribution_\For_\Update'"



					else
						cannot be changed
							"DistributionIsHistorical;CannotChangeAccount._\UseAction_'Reverse_\Distribution_\For_\Update'"
				if (OldReconciliationDetailRel exists)		
					confirmation required
						"ChangingTheDistributionAccountWillDeleteTheAmortizationDetails,Continue?"

			if  (PayablesInvoiceDetail entered
			and  IsLandedTaxDistribution
			and  OriginalDistribution entered
			and  initiating action = "Create"  
			and  InvoiceDetailMainDistributionRel exists)
				constraint (DistributionAccount = any InvoiceDetailMainDistributionRel.DistributionAccount)
					"AccountForLandedTaxDistributionMustMatchAccountOnMainDistribution"

			if (IsLinkedTaxDistribution
			and IsLandedTaxDistribution
			and DistributionAccount changed)
				LocalOriginalDistribution = OriginalDistribution
				if (DistributionAccount != LinkedExpenseDistributionsRel.DistributionAccount)
					confirmation required			
						"Warning:_ChangingThe_\Finance_\StructureOnALandedTaxDistribution.Continue?"

		GLFinanceCodeBlock					
			initial value is PayablesInvoice.RoutingCategory.DistributionAccountDefault		
			if (PayablesInvoice.MatchProcessType.Expense  
			and GLFinanceCodeBlock.Project !entered
			and DistributionAccount.Project !entered	
			and DistributionType.Distribution
			and !IsTaxDistribution)
				GLFinanceCodeBlock.Project = Vendor.Project
				DistributionAccount.Project = Vendor.Project

			if (DistributionType.Distribution
			and Status.Unreleased)
				if (AccountingEntity.ValidSystems entered)
					constraint (GLTSystem within AccountingEntity.ValidSystems)
						"InvalidSystemFor<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (GLFinanceCodeBlock.ToAccountingEntity.ValidSystems entered)
					constraint (GLTSystem within GLFinanceCodeBlock.ToAccountingEntity.ValidSystems)
						"InvalidSystemForPosting<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>"
				if (GLFinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (GLTSystem within GLFinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystem<GLTSystem>ForAccount<GLFinanceCodeBlock.GeneralLedgerChartAccount>"
				if (DistributionAccount.Project not entered		
				and GLFinanceCodeBlock.Project entered)			
					LocalContinue = DistributionAmount.AssignToCurrency	
					DistributionAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.OutputCurrencyRate
					DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= DistributionAmount.ProjectAmount.OutputCurrencyAmount

		TaxAccountingEntity
			if (TaxAccountingEntity entered
			and GLFinanceCodeBlock.ToAccountingEntity not entered)
				GLFinanceCodeBlock.ToAccountingEntity	= TaxAccountingEntity

		TransientReconciliationAccountStructure		
			if (TransientCreatePrepaidAmort)
				required
					"Reconciliation_\Account_\StructureRequiredIf_\Create_\Prepaid_\AmortizationIsChecked"

		TransientReconciliationAccount		
			if (TransientCreatePrepaidAmort)
				required
					"Reconciliation_\AccountRequiredIf_\Create_\Prepaid_\AmortizationIsChecked"

		TransientReferenceNumber		
			if (TransientCreatePrepaidAmort)		
				required
					"Reference_\NumberRequiredIf_\Create_\Prepaid_\AmortizationIsChecked"
			else
				initialize TransientReferenceNumber
			if (TransientReferenceNumber entered)
				constraint (DistributionType.Distribution)
					"PrepaidAmortizationCanOnlyBeEnteredForDistributionType"
				IsPrepaidRecon = true

		TransientCreatePrepaidAmort		
			constraint (PayablesInvoiceDistribution exists)
				"CannotEnterAmortizationDetails;DistributionRecordMustBeCreated"

		RecurringBeginningPeriod
			initial value is AccountingEntity.CurrentPeriod
			default to AccountingEntity.CurrentPeriod
		RecurringBeginningYear

			default to RecurringBeginningPeriod.GeneralLedgerCloseYear	
			default to AccountingEntity.FiscalYear
		RecurringEndPeriod
			initial value is GLFinanceCodeBlock.ToAccountingEntity.CurrentPeriod
			default to GLFinanceCodeBlock.ToAccountingEntity.CurrentPeriod
		RecurringEndYear

			default to RecurringEndPeriod.GeneralLedgerCloseYear		
			default to GLFinanceCodeBlock.ToAccountingEntity.FiscalYear
			if (IsRecurring)
				constraint (RecurringEndYear >= RecurringBeginningYear)
					"InvalidBeginningYearAndEndYearRange"
				if (RecurringEndYear = RecurringBeginningYear)
					constraint (RecurringBeginningPeriod < RecurringEndPeriod)
						"InvalidPeriodRange;EndingPeriodMustBeAfterBeginningPeriod"
		RecurringGeneralLedgerEvent
			initial value is "AP"
			default to "AP"	
		RecurringToCodeBlock
			if (IsRecurring)
				default to GLFinanceCodeBlock
				required

		RecurringDescription
			default to GeneralLedgerJournalControl.Description
			default to Description	
	
		PayablesInvoiceDetail
			if (!Status.Unreleased)
				cannot be changed	
				
		HSNSACCode
			if (IsHSNSACCodeEnabled)
				if (AddOnCharge entered)
					default to AddOnCharge.HSNSACCode
				else  
				if (PayablesInvoiceDetail entered)
					default to PayablesInvoiceDetail.HSNSACCode 
				
			if (!Status.Unreleased)
				cannot be changed
					"DistributionIsReleased;CannotChangeHSN_/SACCode"				

		CreatedByFES
			default to PurchaseOrderLineDistributionRel.CreatedByFES
			if(CreatedByFES
			and	action type.Update
			and	(DistributionAccount.Ledger changed
			or	DistributionAccount.ToAccountingEntity changed
			or	DistributionAccount.AccountingUnit changed
			or	DistributionAccount.GeneralLedgerChartAccount changed
			or	DistributionAccount.Project changed
			or	DistributionAccount.FinanceDimension1 changed
			or	DistributionAccount.FinanceDimension2 changed
			or	DistributionAccount.FinanceDimension3 changed
			or	DistributionAccount.FinanceDimension4 changed
			or	DistributionAccount.FinanceDimension5 changed
			or	DistributionAccount.FinanceDimension6 changed
			or	DistributionAccount.FinanceDimension7 changed
			or	DistributionAccount.FinanceDimension8 changed
			or	DistributionAccount.FinanceDimension9 changed
			or	DistributionAccount.FinanceDimension10 changed
        	or	DistributionAmount.CurrencyAmount changed))
				confirmation required
					"OverrideFrontEndSplit?"
				FESManuallyUpdated = true

		FESManuallyUpdated
			default to PurchaseOrderLineDistributionRel.FESManuallyUpdated






	Derived Fields


		DerivedWithholdingCodeDescription is a DerivedField
			type is Alpha size up to 60
			restricted
			return TaxCode.Description
		
		DerivedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return DistributionAmount.CurrencyAmount
		
		DerivedEnteredCurrencyAmountPT is a DerivedField
			type is like InternationalAmount
			restricted
			return DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
		
		DerivedReportCurrencyAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			return PayablesInvoiceDistribution.DistributionAmount
			
		DerivedTaxBasisReportAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			if (DerivedIntegrationApplicationLocally and DerivedCountryCode = "AU")
				return (TaxableAmount * (DistributionAmount.ReportAmount1.EnteredCurrencyRate))
			else
				return TaxableAmount
		
		
		DerivedFunctionalCurrency is a DerivedField	
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.PayCurrency
			
		DerivedBasisCurrency is a DerivedField	
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceCurrency
		
		DerivedPlainTextComment   is a DerivedField  
		    type is Text
		    return CommentText plain text	
		


		DerivedGLTransactionAmount is a DerivedField
			type is like CurrencyAmount
			if (instance count of PayablesInvoice.PayablesInvoiceDistributionsDisplayOnInvoiceRel > 1)
				return GLTransactionAmount

		DerivedGLFinanceCodeBlock is a StringField
			type is Alpha 400
			GLFinanceCodeBlock.Ledger
			"|"
			GLFinanceCodeBlock.ToAccountingEntity
			"|"
			GLFinanceCodeBlock.AccountingUnit
			"|"
			GLFinanceCodeBlock.GeneralLedgerChartAccount
			"|"
			GLFinanceCodeBlock.Project
			"|"
			GLFinanceCodeBlock.FinanceDimension1
			"|"
			GLFinanceCodeBlock.FinanceDimension2
			"|"
			GLFinanceCodeBlock.FinanceDimension3
			"|"
			GLFinanceCodeBlock.FinanceDimension4
			"|"
			GLFinanceCodeBlock.FinanceDimension5
			"|"
			GLFinanceCodeBlock.FinanceDimension6
			"|"
			GLFinanceCodeBlock.FinanceDimension7
			"|"
			GLFinanceCodeBlock.FinanceDimension8
			"|"
			GLFinanceCodeBlock.FinanceDimension9
			"|"
			GLFinanceCodeBlock.FinanceDimension10
		

  












		DerivedTaxAccountingEntity		is a DerivedField  
			type is like ToAccountingEntity 
			restricted

			if (TaxAccountingEntityHasValue)  
				if (TaxAccountingEntity not entered)	

					return blank
				else

					return TaxAccountingEntity	
			else

				return GLFinanceCodeBlock.ToAccountingEntity

		DerivedVendorAndName is a DerivedField
			type is MessageField
			restricted
			return "" + Vendor + " - " + Vendor.VendorName

		DerivedOldVendorAndName is a DerivedField
			type is MessageField
			restricted
			return "" + old Vendor + " - " + old Vendor.VendorName

		DerivedPeriodYear		is a DerivedField
			type is Numeric 4
			restricted
			return DistributionDate year
		
		DerivedInvoiceType	is a DerivedField
			type is like MatchProcessType
			return PayablesInvoice.MatchProcessType
			
		DerivedItemType is a DerivedField
			type is like ItemType
			default label is "Item"
			if (PurchaseOrderLine entered)
				return PurchaseOrderLine.ItemType	
			return blank
				

		DerivedItem is a DerivedField
			type is like Item
			default label is "Item"
			if (PurchaseOrderLine entered)
				return PurchaseOrderLine.Item	
			return PayablesInvoiceDetail.Item

		DerivedItemDescription is a DerivedField
			type is like Description
			default label is "ItemDescription"
			if (PurchaseOrderLine entered)
				return PurchaseOrderLine.Description	
			return PayablesInvoiceDetail.ItemDescription

		DerivedQuantity is a DerivedField
			type is like Quantity
			default label is "Quantity"
			return PayablesInvoiceDetail.EnteredQuantity

		DerivedUOM is a DerivedField
			type is like UnitOfMeasure
			default label is "UOM"
			return PayablesInvoiceDetail.EnteredUOM

		DerivedUnitCost is a DerivedField
			type is like UnitCost
			default label is "UnitCost"
			if (PayablesInvoiceDetail.EnteredQuantity entered) 

				return (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount / PayablesInvoiceDetail.EnteredQuantity)				
			return 0

		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (PayablesInvoice.InvoiceCurrency entered)
				return PayablesInvoice.InvoiceCurrency.NumberOfDecimals
			else
				return 2
					

		DerivedUnitsAmount is a DerivedField
			type is like UnitsAmount
			restricted
			if (PayablesInvoice.MatchProcessType.Expense		
			and initiating action = "ReverseDistributionForUpdate")
				if (ReversingDistributionToAccountType.ToNotRequired)	
					return UnitAmount
				if (ReversingDistributionToAccountType.ToNotAllowed)
					return 0
				if (ReversingDistributionToAccountType.ToRequired)
					if (UnitAmount entered)
						return UnitAmount
					else
						return 1
			if (UnitAmount entered)
				return UnitAmount
			else
			if (not PayablesInvoice.MatchProcessType.Expense
			and TaxCode not entered
			and not DistributionAccount.GeneralLedgerChartAccount.AllowUnits.No)
				return 1


		DerivedRoundTo is a DerivedField		
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001

		DerivedTotalAmount is a DerivedField
			type is like InternationalAmount
			default label is "Amount"
			if (PayablesInvoiceDetail entered)
				return PayablesInvoiceDetail.TotalDistributionAmount
			return DistributionAmount.CurrencyAmount


	    UncommittedProjectAmount is a DerivedField
	    	type is like InternationalAmount
	    	restricted
			return DistributionAmount.CurrencyAmount - GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount

		DerivedDetailPercent is a DerivedField
			type is like Percent
			restricted
			if  (PayablesInvoiceDetail entered)
				if  (AddOnCharge entered)
					DerivedDetailPercent = (DistributionAmount.CurrencyAmount / PayablesInvoiceAddOnChargeRel.TotalDistributionAmount)
				else
					DerivedDetailPercent = (DistributionAmount.CurrencyAmount / PayablesInvoiceDetail.TotalDistributionAmount)
						

				return DerivedDetailPercent

		DerivedPOLineDistribution is a DerivedField
			type is like PurchaseOrderLineDistribution
			restricted
			if  (PayablesInvoice.PurchaseOrderInvoice
			and  PurchaseOrderLine entered
			and (AddOnCharge not entered 
			or   PurchaseOrderAndLineAddOnChargeRel exists)) 
				if  (OriginalPOLineDistribution entered)
					return OriginalPOLineDistribution
				else
				if  (OriginalDistribution entered)
					return OriginalDistribution
				else
				if (AddOnCharge entered
				and PurchaseOrderAndLineAddOnChargeRel exists
				and PurchaseOrderAndLineAddOnChargeRel.HasDistributions)
					for each PurchaseOrderAndLineAddOnChargeRel
						for each each.PurchaseOrderLineDistributionsRel
							return each.PurchaseOrderLineDistribution 
				else 
					Idx = 0
					for each PurchaseOrderLine.PurchaseOrderLineDistributionsRel
						Idx += 1
						if (Idx = 2)
							end for each
		
					if (Idx = 1)
						return 1
				
		DerivedContractLineDistribution is a DerivedField
			type is like ContractLineDistribution
			restricted
			if  (PayablesInvoice.MatchProcessType.ServiceContract
			and  ContractLine entered)
				if  (OriginalContractLineDistribution entered)
					return OriginalContractLineDistribution
				else
				if  (OriginalDistribution entered)
					return OriginalDistribution
				else
					Idx = 0
					for each ContractLine.ContractLineDistributionRel
						Idx += 1
						if (Idx = 2)
							end for each
		
					if (Idx = 1)
						return 1
		
		
		DerivedTaxMethodInvOrAcc is a DerivedField
			type is like TaxMethod
			restricted

			if (IsTaxDistribution)
				if (TaxType entered)	

					return TaxType		











				if ((InvoiceTaxEntityRel.UseTaxCodeAccounts
				and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
				or (!InvoiceTaxEntityRel.UseTaxCodeAccounts
				and  InvoiceTaxEntityRel.AccruedOrInvoiced.Accrued)
				or  (VATTax
				and  IsReverseCharge)


				or ((PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered	
				and  TaxEntityUsesThirdPartyTax				
				and  GLTransactionAmount entered)
				and  PayablesInvoice.VendorReturnRel not exist)	

				or   DoVATReverseCharge						
				or   IsDistributionAccruedTax				
				or  (PayablesInvoice.ShortPayCommentExists	
				or   IsShortPay))							

					return "A"
				else

					return "I"
			else	
				if (TaxCodeRel.TaxType.TaxTableCode)

					return blank
				else
				if (PayablesInvoice.TaxEntityUsesInforTax			
				or !PayablesInvoice.MatchProcessType.Expense)		
					if (InvoiceTaxEntityRel.UseTaxCodeAccounts				
					and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued)				

						return "A"					
					else							
					if (!InvoiceTaxEntityRel.UseTaxCodeAccounts			
					and  InvoiceTaxEntityRel.AccruedOrInvoiced.Accrued)	

						return "A"													
					else															

						return "I"													
				else		

					if (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered
					and TaxIndicator.Taxable
					and TaxableAmount entered
					and TaxCode entered)

						return "I"
					else
					if (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered
					and TaxIndicator.Taxable
					and TaxableAmount entered
					and TaxCode entered)	

						return "A"

				return blank

		DerivedDisplayTaxSystemTaxAmount is a DerivedField	
			type is like CurrencyAmount
			default label is "TaxSystemTaxAmount"
			if (PayablesInvoice.MatchProcessType.Expense
			and PayablesInvoiceTaxHeaderRel.TaxMethod.Invoiced
			and PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount entered)
				return PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount

		DerivedProductTaxCategory is a DerivedField		
			type is like ProductTaxCategory
			if (ProductTaxCategory entered)	
				return ProductTaxCategory
			if (action type.Create)		
				if (PayablesInvoice.TransientTaxCategory entered)
					return PayablesInvoice.TransientTaxCategory
				if (PayablesInvoiceTaxHeaderRel.ProductTaxCategory entered)
					return PayablesInvoiceTaxHeaderRel.ProductTaxCategory
				if (PayablesInvoiceTaxHeaderRel.EnteredTaxCategory entered)
					return PayablesInvoiceTaxHeaderRel.EnteredTaxCategory
			return blank		

		DerivedTaxPoint is a DerivedField
			type is like TaxPoint
			default label is "TaxPoint"
			if (TaxPoint entered)
				return TaxPoint
			if (InvoiceTaxEntityRel.UseTaxCodeAccounts)
				return EntityTaxCodeRel.TaxPoint
			if (!InvoiceTaxEntityRel.UseTaxCodeAccounts)
				return InvoiceTaxEntityRel.TaxPoint
			return blank		

		DerivedTaxPointDate2 is a DerivedField	
			type is Date
			restricted
			if (DerivedTaxPoint = "G")
				return DistributionDate
			else
			if (DerivedTaxPoint = "P" 
			and PayablesInvoice.DerivedPaymentDate entered)
				return PayablesInvoice.DerivedPaymentDate
			else
				return PayablesInvoice.InvoiceDate

		DerivedPointOfTitleTransfer is a DerivedField		
			type is like PointOfTitleTransfer
			default label is "PointOfTitleTransfer"
			if (PayablesInvoiceTaxRel.PointOfTitleTransfer entered)
				return PayablesInvoiceTaxRel.PointOfTitleTransfer

		DerivedCompanyWithinGLCompanyGroup is a DerivedField	
			type is Boolean
			if (GeneralLedgerCompanyGroup not entered)
				return true
			if (GLCompanyGroupMemberRelExists)
				return true
			return false



		DerivedRecurringJournalType		is a DerivedField
			type is Numeric 1 
			restricted
			return RecurringJournalControlRel.JournalType
		DerivedRecurringJournalControl		is a DerivedField
			type is like RecurringJournalControl 
			restricted
			return RecurringJournalControlRel.RecurringJournalControl
		DerivedRecurringBeginningPeriod		is a DerivedField
			type is like GeneralLedgerCalendarPeriod 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.BeginningPeriod.GeneralLedgerCalendarPeriod
			else
				return GeneralLedgerJournalControl.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
		DerivedRecurringBeginningYear		is a DerivedField
			type is like GeneralLedgerCloseYear 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.BeginningPeriod.GeneralLedgerCloseYear
			else
				return GeneralLedgerJournalControl.GeneralLedgerClosePeriod.GeneralLedgerCloseYear
		DerivedRecurringEndPeriod			is a DerivedField
			type is like GeneralLedgerCalendarPeriod 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.EndPeriod.GeneralLedgerCalendarPeriod
			else
				return GeneralLedgerJournalControl.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
		DerivedRecurringEndYear				is a DerivedField
			type is like GeneralLedgerCloseYear 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.EndPeriod.GeneralLedgerCloseYear
			else
				return GeneralLedgerJournalControl.GeneralLedgerClosePeriod.GeneralLedgerCloseYear
		DerivedRecurringPostingDay			is a DerivedField
			type is Numeric 2 
			restricted
			return RecurringJournalControlRel.PostingDay
		DerivedRecurringTransactionDay		is a DerivedField
			type is Numeric 2 
			restricted
			return RecurringJournalControlRel.TransactionDay
		DerivedRecurringDescription			is a DerivedField
			type is Alpha 60 
			restricted
			return RecurringJournalControlRel.Description
		DerivedRecurringReference			is a DerivedField
			type is Alpha 30 
			restricted
			return RecurringJournalControlRel.Reference
		TotalJournalBridgeAmount			is a DerivedField
			type is like InternationalAmount
			return (sum RecurringJournalBridgeRel.TransactionAmount)
		BalanceBridgeAmount     			is a DerivedField
			type is like InternationalAmount
			return (DistributionAmount.CurrencyAmount - TotalJournalBridgeAmount)


		ExpenseDistributionTotalTax			is a DerivedField	
			type is like InternationalAmount
			return (sum LinkedAndLandedTaxDistributionsRel.DistributionAmount.CurrencyAmount)

		MatchDistributionTotalTax			is a DerivedField
			type is like InternationalAmount
			return (sum MatchDetailTaxDistributionsRel.DistributionAmount.CurrencyAmount)

		MatchDistributionTotalAOC			is a DerivedField
			type is like InternationalAmount
			return (sum MatchAddOnChargeDistributionsRel.DistributionAmount.CurrencyAmount)

		MatchDistributionTotalAOCTax		is a DerivedField
			type is like InternationalAmount
			return (sum MatchDetailAOCTaxDistributionsRel.DistributionAmount.CurrencyAmount)

		DerivedStatus is a DerivedField		
			type is Alpha 10
			default label is "Status"
			if (Status.Unreleased)
				return "Unreleased"
			if (Status.Released)
				return "Released"
			if (Status.Historical)
				return "Historical"
			if (Status.Pending)
				return "Pending"
			if (Status.Approved)
				return "Approved"
			if (Status.Rejected)
				return "Rejected"

		DistributionStatus is a ConditionalField
			type is MessageField
			classic name is DIST-STATUS 
			if (IsUnpostedDistribution)
				OpenMsg
			else
				PostedMsg

		OpenMsg is a MessageField 
			restricted
			"Open"	

		PostedMsg is a MessageField 
			restricted
			"Posted"	

		ProcessAddOnChargeMessage is a MessageField
			restricted
			"MultiplePaymentsExist;AddOnChargeChanged;AllowableAmountNotChanged"

		OneSourceMixedFlagMsg is a MessageField
		    restricted
		    "DirectPayAndPayAsBilledFlagsAreInconsistent"
		    		
		PreviousPayablesInvoiceDistribution is a DerivedField
			type is like PayablesInvoiceDistribution  
			restricted
			return PayablesInvoiceDistribution - 1

		DerivedCurrencyLabel is a DerivedField
			type is MessageField
			if (DistributionType.Payment
			or  DistributionType.PaymentWithholding
			or  DistributionType.PaymentDiscount
			or  PayablesInvoice.InvoiceCurrency	!= InvoiceCurrency)
				return PaymentCurrencyLabel
			return InvoiceCurrencyLabel

		PaymentCurrencyLabel is a MessageField
			"Payment_\Currency"
			
		InvoiceCurrencyLabel is a MessageField
			"Invoice_\Currency"

		CreateCompletionMessage is a DerivedField
			type is MessageField
			restricted
			if (DisplayProcessAddOnChargeMessage)
				initialize DisplayProcessAddOnChargeMessage
				return ProcessAddOnChargeMessage

			return CreateComplete
		
		ConfirmationMessage is a DerivedField
			type is MessageField  
			restricted		
			if (BudgetEditErrorExists)		
				return "Warning:BudgetsHaveBeenExceeded;ViewDetailsInBudgetErrorPanel"
			if (AssetDetailRel.AssetProcessingMessage entered)
				return AssetDetailRel.AssetProcessingMessage
			if (PayablesInvoice.MatchProcessType.Expense
			and PayablesInvoice.DistributionOutOfBalanceAmount entered)
				return DistributionOutOfBalanceMsg					 	
			return UpdateComplete	
		
		DeleteConfirmationMessage is a MessageField
			restricted
			"Warning:InvoiceLineShouldHaveAtLeastOneDistributionLine.DistributionsFromPurchaseOrderWillBeRetainedUponMatching."
						
		CreateComplete is a MessageField
			restricted
			"CreateComplete;\Continue"
		
		UpdateComplete is a MessageField
			restricted
			"UpdateComplete;\Continue"
		
		JournalizePreviewBlueAlertMessage is a DerivedField
			type is MessageField
			if (PayablesInvoice.Status.Amended)
				return UnreleasedDistributionsExistForAmendedInvoice
			else
				return "<PayablesInvoice.DerivedFirstErrorMessage>"
		
		UnreleasedDistributionsExistForAmendedInvoice is a MessageField
			restricted
			"UnreleasedDistributionsExistForAmendedInvoice"
		
		FinalizeIntransitDistribution is a DerivedField
			type is Boolean  
			restricted		
			if (PayablesInvoice.Company.CreateTransitDistribution
			and IntransitDistribution.Yes
			and	!PayablesInvoice.FinalIntransitDistribution)
				return true				
			return false	

		ReverseDistributionAmount is a DerivedField		
			type is like InternationalAmount 
			return (DistributionAmount.CurrencyAmount * -1)
		
		DerivedTaxIndicatorOverrideMsg is a MessageField	
			restricted
			"TaxIndicatorIs_'None'.OverridingTo_'Taxable'_for_\Tax_\TableExpenseDistribution."
		
		DistributionOutOfBalanceMsg is a MessageField 
			restricted
			"DistributionIsOutOfBalanceBy:<PayablesInvoice.DistributionOutOfBalanceAmount>"	

		AccountsPayableAccrualText is a MessageField 
			restricted
			"AccountsPayableAccrual"

		ThisProgramNameText is a MessageField 
			restricted
			"PayablesInvoiceDistribution"

		PayablesDistributionPostingMessage is a MessageField 
			restricted
			"PayablesDistributionPosting"

		DerivedBypassProjectDateEdit is a DerivedField
			type is Boolean
			restricted
			if (!PayablesInvoice.MatchProcessType.Expense
			or  PayablesInvoice.IsChargebackSubType
			or  PayablesInvoice.CanceledInvoice)
				return true
			else
				return false			




		InvoiceReleasedOrAmended is a DerivedField
			type is Boolean 	 
			restricted	
			if (PayablesInvoice.Status.Released
			or PayablesInvoice.Status.Amended)
				return true				
			return false	
			




		DistributionTitle is a ConditionalField		
			type is MessageField

			restricted
			if (IsLinkedTaxDistribution)
				LinkedDistributionMsg
			else
				NonLinkedDistributionMsg

		NonLinkedDistributionMsg is a MessageField 
			restricted
			"Distribution"

		LinkedDistributionMsg is a MessageField 
			restricted
			"LinkedTaxDistribution"	

		DerivedICBillToCompany			is a DerivedField
			type is like GeneralLedgerCompany
			ICBillingRechargeItem		= IntercompanyBillingTransactionRel.IntercompanyBillingRechargeItem
			return IntercompanyBillingTransactionRel.ToCompany

		DerivedICBillingRechargeItem is a DerivedField		
			type is like IntercompanyBillingRechargeItem
			return IntercompanyBillingTransactionRel.IntercompanyBillingRechargeItem

		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod	
		
		DerivedEntityCalendarPeriodTwo is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			return first GeneralLedgerCalendarPeriodRel2.GeneralLedgerCalendarPeriod

		BlankField is a DerivedField
			type is Alpha 1
			return blank

		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"PayablesInvoiceDistribution"
			":"
			CurrentTimestamp

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

		DerivedDoIntrastatReporting is a DerivedField
			type is Boolean
			restricted
			initialize IntrastatProcessing
			DoIntrastatReporting = false
			if (InvoiceTaxEntityRel.IntrastatUsed)
				if (TaxAccountingEntity entered)
					IntrastatProcessing.TaxEntity		= TaxAccountingEntity
				else
					IntrastatProcessing.TaxEntity		= GeneralLedgerCompanyRel.AccountingEntity
				IntrastatProcessing.FiscalYear			= PayablesInvoice.IntrastatFiscalYear	
				IntrastatProcessing.OriginCountry		= PayablesInvoice.OriginCountry	
				IntrastatProcessing.OriginRegion 		= PayablesInvoice.OriginRegion				 	
				IntrastatProcessing.DestinationCountry	= PayablesInvoice.DestinationCountry
				IntrastatProcessing.DestinationRegion 	= PayablesInvoice.DestinationRegion		
				LocalTrigger							= IntrastatProcessing.CheckCountries	
				DoIntrastatReporting = IntrastatProcessing.DoIntrastatReporting
				return IntrastatProcessing.DoIntrastatReporting
				
			return false

		DerivedTaxDistributionCount is a DerivedField	
			type is Alpha size up to 20
			restricted
			if (LinkedTaxDistributionsRel exists)
				return "(" + instance count of LinkedTaxDistributionsRel + ")"
			else
				return ""


		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			return PayablesInvoice.DerivedDelimiter
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			return PayablesInvoice.DerivedLogicalID
			
		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			return PayablesInvoice.DerivedRequiredCleanDocId

		DerivedConfigFEG is a DerivedField
			type is Alpha size 60
			restricted
			return PayablesInvoice.DerivedConfigFEG
			
		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			return PayablesInvoice.DerivedIntegrationApplication
					
		DerivedIntegrationApplicationLocally is a DerivedField
			type is Boolean
			restricted		
			if (DerivedIntegrationApplication = "Local.ly")
				return true
			else 
				return false
				
		DerivedDistributionType is a DerivedField	
			type is Alpha size up to 60
			restricted
			if	(DistributionType.Distribution)
				return "Distribution"
			if	(DistributionType.GainLossDistribution)
				return "GainLossDistribution"
			if	(DistributionType.TaxReversalDistribution)
				return "TaxReversalDistribution"
			if	(DistributionType.ExpenseAccrual)
				return "ExpenseAccrual"
			if	(DistributionType.Payment)
				return "Payment"
			if	(DistributionType.PaymentAccrual)
				return "PaymentAccrual"
			if	(DistributionType.PaymentWithholding)
				return "PaymentWithholding"
			if	(DistributionType.PaymentDiscount)
				return "PaymentDiscount"
			if	(DistributionType.MatchDiscountAccrual)
				return "MatchDiscountAccrual"
			else
				return "DiscountDistribution"
		
		DerivedDistributionStatus is a DerivedField	
			type is Alpha size 20
			restricted
			if	(Status.Unreleased)
				return "Unreleased"
			if	(Status.Released)
				return "Released"
			if	(Status.Historical)
				return "Historical"
			if	(Status.Pending)
				return "Pending"
			if	(Status.Approved)
				return "Approved"
			else
				return "Rejected"
		
		DerivedTaxIndicator is a DerivedField	
			type is Alpha size 20
			restricted
			if	(TaxIndicator.None)
				return"None"
			if  (TaxIndicator.Exempt)
				return "Exempt"
			if	(TaxIndicator.Taxable)
				return "Taxable"
			else
				return "Exclude"
				
		DerivedLedger is a DerivedField	
			type is AlphaUpper size 20
			restricted
			return DistributionAccount.Ledger
		
		DerivedChartAccount is a DerivedField	
			type is AlphaUpper size 26
			restricted
			return DistributionAccount.GeneralLedgerChartAccount
		
		DerivedProject is a DerivedField	
			type is AlphaUpper size 25
			restricted
			return DistributionAccount.Project
		
		DerivedAccountingUnit is a DerivedField	
			type is AlphaUpper size 25
			restricted
			return DistributionAccount.AccountingUnit
		
		DerivedFinanceDimension1 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension1
		
		DerivedFinanceDimension2 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension2
		
		DerivedFinanceDimension3 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension3
		
		DerivedFinanceDimension4 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension4
		
		DerivedFinanceDimension5 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension5
		
		DerivedFinanceDimension6 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension6
		
		DerivedFinanceDimension7 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension7
		
		DerivedFinanceDimension8 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension8
		
		DerivedFinanceDimension9 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension9
		
		DerivedFinanceDimension10 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DistributionAccount.FinanceDimension10
		
		DerivedReportCurrency is a DerivedField	
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOne
		
		DerivedAlternateCurrencyRate is a DerivedField	
			type is AlphaUpper size 31
			restricted
			return DistributionAmount.AlternateAmount.EnteredCurrencyRate
		
		DerivedAlternateCurrencyRate2 is a DerivedField	
			type is AlphaUpper size 31
			restricted
			return DistributionAmount.AlternateAmount2.EnteredCurrencyRate
			
		BODDistributionDate is a DerivedField
			type is Date
			restricted
			BODDistributionDate = DistributionDate
			return BODDistributionDate
		
		AlphaDistributionDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODDistributionDate
		
		DerivedDistributionDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaDistributionDate[1:4] + "-" + AlphaDistributionDate[5:6] + "-" + AlphaDistributionDate[7:8]
			
		DerivedICNCodeDesription is a DerivedField	
			type is Alpha size 60
			restricted
			if(ICNCode entered)
				return ICNCode.Description
		
		DerivedAlternateCurrency is a DerivedField	
			type is AlphaUpper size 5
			restricted
			return DistributionAccount.ToAccountingEntity.AlternateCurrency
		
		DerivedAlternateCurrency2 is a DerivedField	
			type is AlphaUpper size 5
			restricted
			return DistributionAccount.ToAccountingEntity.AlternateCurrency2
			

		DerivedAOCLedger is a DerivedField	
			type is AlphaUpper size 20
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.Ledger
			else
				return ""
		
		DerivedAOCChartAccount is a DerivedField	
			type is AlphaUpper size 26
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.GeneralLedgerChartAccount
			else
				return ""
		
		DerivedAOCProject is a DerivedField	
			type is AlphaUpper size 25
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.Project
			else
				return ""
		
		DerivedAOCAccountingUnit is a DerivedField	
			type is AlphaUpper size 25
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.AccountingUnit
			else
				return ""
		
		DerivedAOCFinanceDimension1 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension1
			else
				return ""
		
		DerivedAOCFinanceDimension2 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension2
			else
				return ""
		
		DerivedAOCFinanceDimension3 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if	(AddOnCharge entered)
				return DistributionAccount.FinanceDimension3
			else
				return ""
		
		DerivedAOCFinanceDimension4 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension4
			else
				return ""
		
		DerivedAOCFinanceDimension5 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension5
			else
				return ""
		
		DerivedAOCFinanceDimension6 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension6
			else
				return ""
		
		DerivedAOCFinanceDimension7 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension7
			else
				return ""
		
		DerivedAOCFinanceDimension8 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension8
			else
				return ""
		
		DerivedAOCFinanceDimension9 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension9
			else
				return ""
		
		DerivedAOCFinanceDimension10 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.FinanceDimension10
			else
				return ""
		
		DerivedAOCReportCurrency is a DerivedField	
			type is AlphaUpper size 5
			restricted
			if(AddOnCharge entered)
				return PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOne
			else
				return ""
			
		BODAOCDistributionDate is a DerivedField
			type is Date
			restricted
			BODAOCDistributionDate = DistributionDate
			return BODAOCDistributionDate
		
		AlphaAOCDistributionDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODAOCDistributionDate
		
		DerivedAOCDistributionDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaAOCDistributionDate[1:4] + "-" + AlphaAOCDistributionDate[5:6] + "-" + AlphaAOCDistributionDate[7:8]
			
		DerivedAOCICNCodeDesription is a DerivedField	
			type is Alpha size 60
			restricted
			if(ICNCode entered)
				return ICNCode.Description
		
		DerivedAOCAlternateCurrency is a DerivedField	
			type is AlphaUpper size 5
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.ToAccountingEntity.AlternateCurrency
			else
				return ""
		
		DerivedAOCAlternateCurrency2 is a DerivedField	
			type is AlphaUpper size 5
			restricted
			if(AddOnCharge entered)
				return DistributionAccount.ToAccountingEntity.AlternateCurrency2
			else
				return ""
		
		DerivedAOCAlternateCurrencyRate is a DerivedField	
			type is AlphaUpper size 31
			restricted
			if(AddOnCharge entered)
				return DistributionAmount.AlternateAmount.EnteredCurrencyRate
			else 
				return ""
		
		DerivedAOCAlternateCurrencyRate2 is a DerivedField	
			type is AlphaUpper size 31
			restricted
			if(AddOnCharge entered)
				return DistributionAmount.AlternateAmount2.EnteredCurrencyRate			
			else
				return ""	
		
		DerivedPayCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return GeneralLedgerCompanyRel.Currency			

		DerivedICBFundDistributionSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (ICBPayablesApplyDistributionContextRel exists)
				return ICBPayablesApplyDistributionContextRel.DistributionAmount.CurrencyAmount
			else
				return 0

		DistributionDerivedFormTitle is a DerivedField
			type is MessageField
			if (RecordExists)
				return DerivedFormTitle
			else 
				return DerivedCreateMessage

		DerivedFormTitle is a LabelField
			restricted
			"Invoice<Invoice>_|_Distribution<PayablesInvoiceDistribution>"
		
		DerivedCreateMessage is a LabelField
			"CreateInvoiceDistribution"


		DerivedBasisBaseAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PurchasingContract entered)
				if(InvoiceCurrency != DerivedPayCurrency)
					return TaxableAmount*DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				else
					return TaxableAmount
			else
				return TaxableAmount*DistributionAmount.FunctionalAmount.EnteredCurrencyRate
		
		DerivedTaxRateNumeric is a DerivedField	
			type is Decimal 7.5
			restricted
			return TaxRate*100
		
		DerivedTaxDescription is a DerivedField	
			type is  Alpha size 22
			restricted
			if(EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
				return "Accrued Tax"
			else 
				return "Invoiced Tax"

		DerivedAlphaTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(TaxCode entered)
				return (TaxableAmount * DerivedTaxRateNumeric)
			else
				return 0
		
		DerivedDistributionTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if((TaxCode entered and TaxIndicator.Taxable and TaxRate > 0) or (DerivedIntegrationApplicationLocally and  TaxRate > 0))
				return (DerivedAlphaTaxAmount/100)
			else
				return 0
		
		DerivedDistributionTaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(TaxCode entered and TaxRate > 0)
				return	(DerivedDistributionTaxAmount * (DistributionAmount.FunctionalAmount.EnteredCurrencyRate))
			else
				return 0
				
		DerivedTaxingJurisdiction is a DerivedField
			type is Text
			restricted
			if (!PayablesInvoice.MatchProcessType.Expense
			and PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)
				if (AddOnCharge entered)
					return PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.TaxingJurisdiction
				else	
			    	return PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.TaxingJurisdiction
			else
			if(PayablesTaxDetailRel exist)
				return PayablesTaxDetailRel.TaxingJurisdiction
			else
				return ""
				
		DerivedTaxSchemeName	is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally)
				return "TaxCode"
			else
				return "TaxIdentificationNumber"

		DerivedLocallyTaxCode is a DerivedField
			type is AlphaUpper size 15
			restricted
			if(DerivedIntegrationApplicationLocally and TaxCode entered)
				return TaxCode
			else
				return ""
					
		DerivedTaxType is a DerivedField
			type is AlphaUpper size 1
			restricted
			if(TaxCode entered)
				return TaxType
			else
				return ""
		
		DerivedTaxJurisdicationCode is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return Vendor.CurrentAddressRel.PostalAddress.StateProvince
			else
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PurchasingContract entered)
				return PayablesTaxDetailRel.TaxingJurisdiction
			else
				return ""


		DerivedLocalRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (LocalNumberOfDecimals = 2)
				return .01
			else
			if (LocalNumberOfDecimals = 0)
				return 1
			else
			if (LocalNumberOfDecimals = 3)
				return .001
			else
			if (LocalNumberOfDecimals = 4)
				return .0001

		DerivedFundDistributionOpenAmount is a DerivedField 
			type is like InternationalAmount
			return (DistributionAmount.CurrencyAmount - FundAppliedAmount)
				
		DerivedCountryCode is a DerivedField
			type is Alpha size 22
			restricted			
			return AccountingEntityRel.AddressCode.PostalAddress.Country
		
		DerivedBasisReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return (TaxableAmount * (PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate))
			else
				return 0

		PurchaseOrderDerivedDistributionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (PurchaseOrderLine.ExtendedAmountToCommit * (GLTransactionDetailRel.TransactionAmount/(PayablesInvoiceDetail.EnteredQuantity * PayablesInvoiceDetail.EnteredUnitCost))) 
									
		DerivedPODifferenceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (GLTransactionDetailRel.TransactionAmount - PurchaseOrderDerivedDistributionAmount)

		DerivedReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DistributionAmount.ReportAmount1.EnteredCurrencyAmount
			else
				if(TaxCode entered)
					return DistributionAmount.ReportAmount1.EnteredCurrencyAmount
				else
					return 0
					
		DerivedAccountingEntity is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				if(DerivedConfigFEG="Y")
					LocalBODAccountingEntity = GeneralLedgerCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + DistributionAccount.ToAccountingEntity
				else
					LocalBODAccountingEntity = DistributionAccount.ToAccountingEntity
				if(FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalBODAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
				return LocalBODAccountingEntity
			else
				return DistributionAccount.ToAccountingEntity
			
		
		BODAccountingEntity is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				if(DerivedConfigFEG="Y")
					LocalBODAccountingEntity = GeneralLedgerCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + DistributionAccount.ToAccountingEntity
				else
					LocalBODAccountingEntity = DistributionAccount.ToAccountingEntity
				if(FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalBODAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
				return LocalBODAccountingEntity
			else
				return GeneralLedgerCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + DistributionAccount.ToAccountingEntity
				
		ShipToPartyID is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return Company using "%d" + DerivedDelimiter + ProcessLevel
			else
				return ""
		DerivedUAITCApplies is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "LCL.IN.ITCApplies"
			else
				return ""
		DerivedUAITCAppliesValue is a DerivedField
			type is Numeric size 2
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return 1
			else
				return ""
		DerivedDummyUnitOfMeasure is a DerivedField
			type is AlphaUpper size 4
			restricted
			return "EA"
		DerivedDummyQuantity is a DerivedField
			type is Numeric size 1
			restricted
			return 1
		ShipToschemeAgencyNameIN is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "IN_GST"
			else
				return ""
		DerivedLocallyschemeNameIN is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "TaxIdentificationNumber"
			else
				return ""
		DerivedDistributionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PurchasingContract entered)
				return DistributionAmount.CurrencyAmount
			else
				return GLTransactionAmount
		DerivedDistributionBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PurchasingContract entered)
				return DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				return TransientFinanceCurrencyAmt.FunctionalAmount.EnteredCurrencyAmount
		DerivedDistributionLineTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PurchasingContract entered and TaxCode entered)
				return DistributionAmount.CurrencyAmount
			else
				if((TaxCode entered) or (DerivedIntegrationApplicationLocally and  TaxRate > 0))
					return (DerivedAlphaTaxAmount/100)
				else
					return 0
		DerivedDistributionLineTaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PurchasingContract entered and TaxCode entered)
				return DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				if(TaxCode entered and TaxRate > 0)
					return	(DerivedDistributionLineTaxAmount * (DistributionAmount.FunctionalAmount.EnteredCurrencyRate))
				else
					return 0

		SupplierInvoiceDummyLineTaxXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			initialize LocalDummyLineTaxSequence
			if(TaxType not entered and OriginalDistribution not entered)
				LocalPIDistribution = PayablesInvoiceDistribution
				LocalDummyTaxCode = TaxCode
				if(LinkedDisttypeDistributionRel exist)
					LocalDummyLineTaxSequence = 0
					for each LinkedDisttypeDistributionRel
						LocalDummyLineTaxSequence += 1
						each.LocalDummyLineTaxSequence = LocalDummyLineTaxSequence
						each.LocalDummyLineTaxCode = LocalDummyTaxCode
						SupplierInvoiceDummyLineTaxXMLBOD += template.IONSupplierInvoiceDummyLineTaxXML_ST document for each
					return SupplierInvoiceDummyLineTaxXMLBOD 
			else 
				if(TaxCode entered and OriginalDistribution not entered)
					LocalPIDistribution = PayablesInvoiceDistribution
					LocalDummyLineTaxCode = TaxCode
					LocalDummyLineTaxSequence += 1
					SupplierInvoiceDummyLineTaxXMLBOD = template.IONSupplierInvoiceDummyLineTaxXML_ST document for this instance
				return SupplierInvoiceDummyLineTaxXMLBOD

		SupplierInvoiceLocalyDistributionXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedIntegrationApplicationLocally)
				for each PayablesInvoiceDistributionRel
					if(each.AddOnCharge not entered  and each.TaxCode not entered and ((!PayablesInvoice.MatchInvoice.POInvoice ) or
					(PayablesInvoice.MatchInvoice.POInvoice and each.PurchaseOrder = 0 and each.PurchaseOrderLine = 0) or
					(PayablesInvoice.MatchInvoice.POInvoice and each.PurchaseOrder > 0 and each.PurchaseOrderLine > 0 and
					each.InvoiceType.CreditMemo and each.Suffix = 999)) and each.DistributionType.Distribution)
						SupplierInvoiceLocalyDistributionXMLBOD += template.IONSupplierInvoiceLocallyDistributionXML_ST document for each
					else
						if(each.TaxCode entered and !PayablesInvoice.MatchInvoice.POInvoice and each.DistributionType.Distribution and each.TaxIndicator != 0 )
							SupplierInvoiceLocalyDistributionXMLBOD += template.IONSupplierInvoiceLocallyDistributionXML_ST document for each
				return SupplierInvoiceLocalyDistributionXMLBOD
			
				




		DerivedGLAmountCurrency is a DerivedField
			type is AlphaUpper size 10
			return GLTransactionAmount
		
		DerivedAmountCurrency is a DerivedField
			type is Alpha size 30
			return DerivedGLAmountCurrency + " " + InvoiceCurrency


		DerivedPositiveTaxableAmount is a DerivedField			
			type is like InternationalAmount
			restricted
			if (TaxableAmount < 0)
				return (TaxableAmount * -1)
			else
				return TaxableAmount

		DerivedPositiveDistributionAmount is a DerivedField			
			type is like InternationalAmount
			restricted
			if (GLTransactionAmount < 0)
				return (GLTransactionAmount * -1)
			else
				return GLTransactionAmount

		ContextMessageEntityType is a StringField
			type is Alpha 35
			restricted
			"InforPayablesInvoiceDistribution"

		ContextMessageText is a MessageField
			restricted
			"PayablesInvoiceDistribution<PayablesInvoiceDistribution>"


	Conditions

		RecordExists
			restricted
			when (PayablesInvoiceDistribution exists)

		CanCreateDistributions
			restricted
			when (!PayablesInvoice.InterfaceInProcess
			and   !PayablesInvoice.Status.Released
			and   !PayablesInvoice.Status.Historical
			and   !PayablesInvoice.Status.Cancelled
			and   !PrepaymentNoUserDistributions						
			and	  !PayablesInvoice.UsesMatrixApproval)

		CanSplitDistribution
			restricted
			when (Status.Unreleased
			and    PayablesInvoice.MatchProcessType.Expense 
			and   !PayablesInvoice.InterfaceInProcess
			and   !PayablesInvoice.BackgroundProcessing.MatchInvoice
			and   !IsLinkedTaxDistribution
			and   !PayablesInvoice.UsesMatrixApproval)

		CanSplitFESDistribution
			restricted
			when ((PayablesInvoice.InvoiceType.CreditMemo
			or 	  PayablesInvoice.InvoiceType.Invoice
			or 	  PayablesInvoice.InvoiceType.DebitMemo)
			and   !PayablesInvoice.MatchProcessType.ServiceContract
			and   !PayablesInvoiceDetail.ItemType.Inventoried
			and   !IsLinkedTaxDistribution)

		CanUpdateTaxCode		
			restricted
			when (HasLinkedTaxDistributions
			or   (TaxIndicator changed
			and   TaxIndicator.Taxable)
			or    invoking action = "PayablesInvoice.ShortPayAndAccrueTax"		
			and   PayablesInvoice.MatchProcessType.Expense
			and   Status.Unreleased)


		PrepaymentNoUserDistributions									
			restricted										
			when ((PayablesInvoice.Status.PendingApproval	
			or     PayablesInvoice.Status.Unreleased
			or     PayablesInvoice.Status.Approved			
			or 	   PayablesInvoice.Status.Rejected)			
			and   PayablesInvoice.IsPrepaymentType)			


		IsMemberOfFilterGeneralLedgerCompanyGroup
			restricted
			when (GeneralLedgerCompanyGroup not entered
			or   (GeneralLedgerCompanyGroup entered
			and   GLCompanyGroupMemberRel exists))
		
		BudgetEditErrorExists
			restricted
			when (BudgetEditErrorsRel exists)
		
		DelayTaxProcessing							
			restricted
			when (PayablesInvoice.DoTaxAfter
			and   DistributionCode not entered)
		
		EditTaxableAmount
			restricted
			when (TaxCode entered
			or    TaxIndicator.Taxable)
		
		HasAssets
			restricted
			when (AssetDetailRel exists)

		ShowAssetLink
			restricted
			when (AssetDetailRel exists)
					
		CanBeDeleted
			restricted
			when (Status.Unreleased
			and   !PayablesInvoice.InterfaceInProcess
			and   !PayablesInvoice.BackgroundProcessing.MatchInvoice
			and   !PayablesInvoice.UsesMatrixApproval)

		IsNotUpdatable
			restricted
			when (PayablesInvoice.InterfaceInProcess
			or    PayablesInvoice.Status.Cancelled
			or	  PayablesInvoice.UsesMatrixApproval
			or   (Status.Historical
			and  !ICBAllowSelectDistributionSet) 
			or    InvoiceTaxEntityRel.ThirdParty.TaxEngine
			or   (Status.Released
			and   PayablesInvoice.MatchProcessType entered
			and   !PayablesInvoice.MatchProcessType.Expense))
		
		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)
		
		ShowAssetTemplateLink
			restricted
			when (Status.Unreleased
			and   PayablesInvoiceDetail not entered
			and   AssetFlag entered
			and   AssetDetailRel not exists)	

		IsReleasable
			restricted
			when (Status.Approved
			or    TransientReleaseAfterCreate
			or   (PayablesInvoice.Status.Amended
			and   Status.Unreleased))
		
		AddOnChargeEntered
			restricted
			classic name is AOC-DIST
			when (AddOnCharge entered)

		PullForFinancialReporting1
			restricted
			classic name is AP-FIN-RPTG
			when (PullForFinancialReporting)

		PullForFinancialReporting2
			restricted
			classic name is AP-FIN-RPTG-D
			when (PullForFinancialReporting)

		PullForFinancialReporting3
			restricted
			classic name is AP-FIN-RPTING
			when (PullForFinancialReporting)

		HasRebate
			restricted
			when (ContractRebateGroup.ContractGroup entered)

		IsAssetDistribution
			restricted
			classic name is ASSET-DIST
			when (AssetFlag.Asset
			or    AssetFlag.RepairAsset
			or    AssetFlag.AssetOrRepair)

		DisplayAlternateAmount
			restricted
			when (DistributionAmount.AccountingEntity.AlternateCurrencyExists
			and   DistributionAmount.AlternateAmount.EnteredCurrencyAmount entered)
			
		DisplayAlternateAmount2
			restricted
			when (DistributionAmount.AccountingEntity.AlternateCurrency2Exists
			and   DistributionAmount.AlternateAmount2.EnteredCurrencyAmount entered)
			
		DisplayAlternateAmount3
			restricted
			when (DistributionAmount.AccountingEntity.AlternateCurrency3Exists
			and   DistributionAmount.AlternateAmount3.EnteredCurrencyAmount entered)
			
		DisplayToAlternateAmount
			restricted
			when (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount entered)
			
		DisplayToAlternate2Amount
			restricted
			when (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount entered)
			
		DisplayToAlternate3Amount
			restricted
			when (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount entered)
		
		PayablesInvoiceDistributionObjectIDEntered
			restricted
			classic name is DST-OBJ-ID
			when (PayablesInvoiceDistributionObjectID entered)

		GltObjIdEntered
			restricted
			classic name is GLT-OBJ-ID
			when (GltObjId entered)

		InvoiceHasDistributionCode
			restricted
			when (PayablesInvoice.DistributionCode entered)
		
		IsGoodsDistribution
			restricted
			classic name is GOODS-DIST
			when (TaxIndicator.Taxable)

		IsLinkTaxDist
			restricted
			when (OriginalDistribution entered
			and   TaxSequenceNumber entered
			and   IsDistributionType)

		HasLinkedTaxDistributions				
			restricted
			when (LinkedTaxDistributionsRel exists)
		
		IsLinkedTaxDistribution					
			restricted
			classic name is LINKED-TAX-DIS
			when (IsTaxDistribution
			and   TaxSequenceNumber entered
			and	  OriginalDistribution != 0)

		VATReverseIndicator			
			restricted
			when (EntityTaxCodeRel.VATReverseIndicator)

		ShowOneSourceAttributesPanel		
			when (TaxEntityValue.ThirdParty.Sabrix
			and   AllOneSourceOutputUserAttributesRel exists)

		ShowOneSourceTaxLineItemPanel		
			when (!PayablesInvoice.MatchProcessType.Expense
			and    TaxEntityValue.ThirdParty.Sabrix
			and    PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Original
			and    TaxLineItemRel exists)

		IsNonBaseDistribution
			restricted
			classic name is NON-BASE-DIST
			when (InvoiceCurrency != Company.Currency)	

		IsNonLinkedDistribution
			restricted
			classic name is NON-LINKD-DIST
			when (TaxSequenceNumber 	not entered
			and	  OriginalDistribution 	not entered)

		IsOpenDistribution
			restricted
			classic name is OPEN-DISTS
			when   (Status.Unreleased
				or  Status.Released)

		IsProcurementCardExpense
			restricted
			classic name is PCARD-EXP
			when (PurchaseOrder not entered
			and   ProcurementCardStatement entered)

		IsProcurementCardPurchaseOrder
			restricted
			classic name is PCARD-PO
			when (PurchaseOrder entered
			and   ProcurementCardStatement entered)

		PayablesInvoiceRetainageDistributionRelExists
			restricted
			classic name is PMT-DIST-EXIST
			when (first PayablesInvoiceRetainageDistributionRel exists)

		IsPoDistribution
			restricted
			classic name is PO-DISTRIBS
			when (PurchaseOrder entered)

		IsInvoiceDetailDistribution
			restricted
			classic name is PO-DISTRIBS
			when (PurchaseOrderLine entered
			or    ContractLine entered
			or    PayablesInvoiceDetail entered)

		IsLastInvoiceDetailDistribution
			restricted
			when (instance count of InvoiceDetailDistributionsRel = 1)
		
		IsLastHeaderTaxDistribution		
			restricted
			when (instance count of PayablesInvoice.HeaderTaxDistributionsRel = 1)

		IsSpecialItemType
			restricted
			when (DerivedItemType.Special)
		
		DisplayDeleteConfirmation
			restricted
			when (IsInvoiceDetailDistribution
			and   IsLastInvoiceDetailDistribution)

		IsRetainageDistribution
			restricted
			classic name is RETAINAGE-DIST
			when (Retainage)

		IsExpenseDistribution		
			when (DistributionType.Distribution
			and  !IsTaxDistribution)

		IsAllowTaxAccountChanges
			restricted
			when (IsTaxDistribution
			and  ((InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.AllowAccountChanges)
			or     (!InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    InvoiceTaxEntityRel.AllowAccountChanges)))
        
        IsTaxableExpenseDistribution				
        	when (TaxIndicator.Taxable				
        	and  (TaxCode entered					
        	or    PayablesInvoice.TaxCode entered))	
        
        IsTaxDistribution

			classic name is TAX-DIST
			when (TaxCode entered
			and   not TaxCodeRel.TaxType.TaxTableCode	
			and   not TaxIndicator.Taxable
			and   not TaxIndicator.Exclude	
			and   not TaxIndicator.Exempt)

		HasLinkedAndLandedTaxDistribution	
			restricted
			when (LinkedAndLandedTaxDistributionsRel exists)	

		IsLandedTaxDistribution

			when (IsTaxDistribution
			and  ((InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.LandedCost)
			or     (!InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    InvoiceTaxEntityRel.LandedCost)))
		
		IsLandedMatchTaxDistribution
			when (IsLandedTaxDistribution
			and   PayablesInvoiceDetail entered)

		IsLandedMatchAOCDistribution
			when (IsLandedAOCDistribution
			and   PayablesInvoiceDetail entered)

		IsLandedAOCDistribution
			when (AddOnCharge entered
			and   AddOnCharge.LandedAddOnCharge)
			
		IsNonLandedAOCDistribution
			when (AddOnCharge entered
			and  !AddOnCharge.LandedAddOnCharge)
			
		HasReversalForThisInvoiceDetail
			when (ReversedDistributionForInvoiceDetailRel exists
			and   first ReversedDistributionForInvoiceDetailRel.DistributionAccount = DistributionAccount)
					
		IsLandedTaxCode
			restricted
			when  ((InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    (EntityTaxCodeRel.LandedCost
			or      EntityTaxCode2Rel.LandedCost))		
			or     (!InvoiceTaxEntityRel.UseTaxCodeAccounts
			and     InvoiceTaxEntityRel.LandedCost))
		
		IsNonLandedTaxDistribution
			restricted
			when (IsTaxDistribution
			and  ((InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    !EntityTaxCodeRel.LandedCost)
			or     (!InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    !InvoiceTaxEntityRel.LandedCost)))
		
		IsAccruedTaxDistribution	
			restricted
			when (IsTaxDistribution
			and  ((!TaxEntityUsesThirdPartyTax
			and   (InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
			or     (!InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    InvoiceTaxEntityRel.AccruedOrInvoiced.Accrued))
			or    (TaxEntityUsesThirdPartyTax
			and    DerivedTaxMethodInvOrAcc.Accrued)))

		IsExpenseInvoicedTaxDistribution	
			restricted
			when (IsTaxDistribution
			and  ((!TaxEntityUsesThirdPartyTax
			and   (InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
			or     (!InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    InvoiceTaxEntityRel.AccruedOrInvoiced.Invoiced))
			or    (TaxEntityUsesThirdPartyTax
			and    DerivedTaxMethodInvOrAcc.Invoiced)))

		IsAccruedVATTax		
			restricted
			when (IsTaxDistribution
			and   VATReverse
			and   TaxType.Accrued)
			
		IsInvoicedTaxDistribution	
			restricted
			when (IsTaxDistribution
			and  ((InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
			or     (!InvoiceTaxEntityRel.UseTaxCodeAccounts
			and    InvoiceTaxEntityRel.AccruedOrInvoiced.Invoiced)))

		IsUnpostedDistribution
			restricted
			classic name is UNPOSTED-DIST
			when (Status <  9)




		DistributionOffset
			restricted
			when (DistributionType.ExpenseAccrual)
			
		IsNotDistributionOffset
			restricted
			when (!DistributionType.ExpenseAccrual)        	
		
		IsDistributionType
			restricted
			when (DistributionType.Distribution)        	
		
		IsUseTaxCodeAccounts						
			restricted
			when  (TaxCode entered
			and	   TaxEntityRel.UseTaxCodeAccounts)
		
		HasTaxTolerance								
			restricted
			when ((!IsUseTaxCodeAccounts
			and  (TaxEntityRel.TaxToleranceLimit entered
			or    TaxEntityRel.FromRate entered
			or	  TaxEntityRel.ThruRate entered
			or    TaxEntityRel.TaxToleranceAmount entered))
			or   (IsUseTaxCodeAccounts
			and  (EntityTaxCodeRel.TaxToleranceLimit entered
			or    EntityTaxCodeRel.FromRate entered
			or	  EntityTaxCodeRel.ThruRate entered
			or    EntityTaxCodeRel.TaxToleranceAmount entered)))
		
		RecurringJournalForm
			restricted
			when (Status.Unreleased
			and    RecurringJournalInterfaceIsValid  
			and    RecurringJournalControlRel.LastProcessedPeriod not entered)
		
		RecurringJournalInterfaceIsValid
            restricted
			when (!PayablesInvoiceDetail.ItemType.Inventoried
			and   PayablesInvoice.Suffix != 888
			and   PayablesInvoice.Suffix != 999
			and   !IsLinkedTaxDistribution
			and   !PayablesInvoice.MatchProcessType.AOCOnly
			and   !IsLandedMatchTaxDistribution
			and   !IsLandedAOCDistribution
			and   !PayablesInvoice.LinkedToCancelledPOInvoice)

		RecurringJournalExists
			restricted
			when (RecurringJournalControlRel exists)

		CanCreatePrepaidAmortization		
			restricted
			when ((DistributionType.Distribution
			or     PayablesInvoiceDistribution exists)
			and    ReconciliationManagementGroupRel exists
			and   !AmortizationDetailsExists)

		AmortizationDetailsExists		
			restricted
			when (ReconciliationDetailRel exists)

		RebateEligible
			restricted
			when (DistributionAmount.CurrencyAmount < 0
			and   DistributionType.Distribution)
		
		HasDistributionReference
			restricted
			when (DistributionReference entered)
		
		JournalGroupEntered
			restricted
			when (GLTransactionDetailRel.JournalizeGroup = GLJournalizeGroup)

		ViewJournalizeAction
			restricted
			when (PayablesInvoice.Status.Released)
				
		WithinInvoiceDateRange
			restricted
			when (InvoiceDateRange not entered
			or	 (InvoiceDateRange entered
			and	  PayablesInvoice.InvoiceDate within InvoiceDateRange))

		WithinDistributionDateRange
			restricted
			when (DistributionDateRange not entered
			or   (DistributionDateRange.Begin not entered
			and   DistributionDateRange.End entered
			and   DistributionDate <= DistributionDateRange.End)
			or   (DistributionDateRange.Begin entered
			and   DistributionDateRange.End not entered
			and   DistributionDate >= DistributionDateRange.Begin)
			or	 (DistributionDateRange entered
			and	  DistributionDate within DistributionDateRange))

		WithinInvAndDistrDateRange
			restricted
			when (WithinInvoiceDateRange
			and   WithinDistributionDateRange)
		
		WithinCustomSearchGroup
			restricted
			when (CustomSearchGroup not entered
			or   (CustomSearchGroup entered
			and   PayablesInvoiceDistribution within CustomSearchGroup))

		HasGLTransDtl
			restricted
			when (GLTransactionDetailRel exists)	

		CommitmentExists
			restricted
			when (GLCommitRel exists)
		HistoryCommitmentExists
			restricted
			when (CommitmentExists
			and   GLCommitRel.Status = 1)
		ReleasedCommitmentExists
			restricted
			when (CommitmentExists
			and   GLCommitRel.Status = 3)
		OpenCommitmentExists		
			restricted
			when (CommitmentExists
			and   GLCommitRel.Status != 1)	
			
		ReverseDistributionForUpdateIsValid
			restricted
			when (!PayablesInvoice.Status.Cancelled
			and	  !PayablesInvoice.UsesMatrixApproval
			and  (Status.Released
			or    Status.Historical)
			and   PayablesInvoice.Suffix != 888
			and   PayablesInvoice.Suffix != 999
			and  !InvoiceTaxEntityRel.ThirdParty.TaxEngine

			and  !IsLinkedTaxDistribution			
			and  (!PayablesInvoiceDetail.ItemType.Inventoried
			or    IsNonLandedTaxDistribution
			or    IsNonLandedAOCDistribution)
			and  (!MatchCreated.Summary
			or    IsNonLandedTaxDistribution
			or    IsNonLandedAOCDistribution)
			and  (PayablesInvoice.MatchProcessType.Expense
			or    PayablesInvoice.MatchProcessType.AOCOnly
			or   (!IsLandedMatchTaxDistribution
			and   !IsLandedAOCDistribution
			and   !HasReversalForThisInvoiceDetail
			and   !PayablesInvoice.LinkedToCancelledPOInvoice))) 

		VendorInvoiceEntered
			restricted
			when (Vendor entered
			and	  Invoice entered)

		TaxTableAndTaxable
			restricted
			when (TaxCodeRel.TaxType.TaxTableCode
			and   TaxIndicator.Taxable)

		NotMatchCreated
			restricted
			when (MatchCreated not entered)

		UseDistributionDate
			restricted
			when (DistributionType.Distribution
			or	  DistributionType.ExpenseAccrual)

		ICBAllowSelectDistributionSet 
			restricted
			when (PayablesInvoice.InvoiceSource.IntercompanyBilling
			and   PayablesInvoice.IntercompanyBillingDocumentRel.AllowSelectDistributionSet
			and   ContextSettlementIDForContext in context
			and   ContextSettlementDetailRel exists)

		AllowUnselectFundDistribution 
			restricted
			when (ICBAllowSelectDistributionSet
			and   ContextSettlementDetailLineRel exists
			and   ICBPayablesApplyDistributionContextRel exists
			and   ICBPayablesApplyDistributionContextRel.IntercompanyBillingSettlementHeader.Status.Unreleased)
		
		AllowSelectDistributionOpenAmount 
			restricted
			when (ICBAllowSelectDistributionSet
			and   ContextSettlementDetailLineRel exists
			and  !ICBPayablesApplyDistributionContextRel exists)

		ICBPayablesApplyDistributionContextRelExists 
			restricted
			when (ICBPayablesApplyDistributionContextRel exists)

		IsValidForActorContext
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	
		
		PayablesInvoiceErrorsExists
			when (PayablesInvoice.ErrorsExists)





											
		DisplayOnJournalizePreview
			when  (IsValidForActorContext
			and    Status.Released
			and   (PayablesInvoice.MatchProcessType.Expense

			or    (NoOpenInvoiceMessages						
			and	  (PayablesInvoice.HasBeenMatched

			or     HasAllowReleaseOnlyMatchInvoice						
			or	  (PayablesInvoice.Status.Cancelled				
			and    PayablesInvoice.MatchStatus.Unmatched))))	
			and    PayablesInvoice.BackgroundProcessing not entered 

			and   (!PayablesInvoiceErrorsExistsDirect			
			or     PayablesInvoice.Status.Amended)						
			and    WithinDistributionDateRange


			and    CompanyWithinGLCompanyGroup				
			and    GLTransactionDetailRel.JournalizeGroup not entered)

		DisplayBlueAlertOnJournalizePreview
			when (PayablesInvoice.ErrorsExists
			or    PayablesInvoice.Status.Amended)

		NeedsACalendar
			restricted
			when (!BasicAnalyticsCalendarsRel exists)

		VATTax													
			restricted
			when (Imposition = "VAT"
			or    ReturnedTaxType = "VAT")
		
		IsForeignVAT
			restricted
			when (VATTax
			and  (PayablesInvoice.ProcessLevel.PostalAddress.Country entered
			and  (PayablesInvoice.ProcessLevel.PostalAddress.Country != PayablesInvoice.Vendor.VendorCountry)))
		
		IsReverseCharge
			restricted
			when (CalculateTax.ReverseCharge)	
				
		TaxEntityUsesThirdPartyTax
			restricted
			when (TaxEntityUsesVertex
			or    TaxEntityUsesSabrix)
		
		TaxEntityUsesVertex
			restricted				 							
			when (TaxEntityValue.ThirdParty.VertexOSeries)	

		TaxEntityUsesSabrix										
			restricted				 							
			when (TaxEntityValue.ThirdParty.Sabrix)				
			
		TaxEntityForeignAccountsEntered									
			restricted													
			when (TaxEntityValue.ForeignRecoverableAccount entered		
			and   TaxEntityValue.ForeignNonRecoverableAccount entered)	
		
		DisplayVertexVatFields									
			restricted
			when (TaxEntityUsesVertex
			and   VATTax)
			
		JurisResultsExists										
			restricted
			when (JurisdictionResultsRel exist)
		
		VertexAndDoGlobalProcess								
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries
			and   TaxEntityRel.IntrastatUsed)
		
		ReturnedTaxTypeEntered
			when (ReturnedTaxType entered)
		
		DoVertexVatProcessing
			when ((TaxEntityUsesVertex
			or     TaxEntityUsesSabrix)							
			and   (Imposition = "VAT"
			or     RecoverableImpositionType = "VAT"))			
					
		ShowVendorAccountRestrictions
			restricted
			when (PayablesInvoice.MatchProcessType.Expense
			and   PayablesInvoice.Vendor.HasVendorAccountRestrictionSetup
			and  (DistributionType not entered
			or    DistributionType.Distribution))

		IntrastatDetailEntered						
			restricted
			when (ICNCode entered
			or    StockWeight entered)
			
		IntrastatDetailNotEntered					
			restricted
			when (ICNCode not entered
			and   StockWeight not entered
			and   SupplementaryQuantity not entered)

		IntrastatDetailExist						
			restricted
			when (LineType.Goods
			or   ICNCode entered
			or   StockWeight entered
			or   SupplementaryQuantity entered)

		BypassMatchAndServiceType									
			restricted
			when (PayablesInvoice.BypassMatch						
			and   PayablesInvoice.MatchProcessType.ServiceContract)

		MatchInvoice
			restricted
			when (!PayablesInvoice.MatchProcessType.Expense)
										
		ContractEntered
			restricted
			when (PurchasingContract entered)
		
		AllowMatchInvoiceUpdateAccount
			restricted
			when (Status.Unreleased
			and  !IsLandedTaxDistribution
			and  !IsLandedAOCDistribution
			and   MatchInvoice)

		ShowInvoiceDetailDistributionAlert
			restricted
			when (Status.Unreleased
			and   !PayablesInvoiceDetail.DistributionsInBalance)

		ShowNoLongerTrackedAlert
			restricted
			when (PayablesInvoiceDetail entered
			and   PayablesInvoiceDetail.ItemType.Inventoried
			and   !PayablesInvoiceDetail.ItemLocationRel.InventoryTracked)

		DisplayTaxIndicator
			when (PayablesInvoice.MatchProcessType.Expense
			or   (PayablesInvoiceDetail not entered
			and   PurchaseOrderLine not entered
			and   ContractLine not entered))
					
		ChargeEntered
			restricted
			when (TransactionNumber entered)
		
		IsHSNSACCodeEnabled
			restricted
			when (GeneralLedgerCompanyRel.RequireHSNSACCode)

		SecurityGroupAllowsAccess
			when (actor.context.CompanySecurityGroup = blank
			or   (CompanySecurityGroupMemberRel exists))

		GlobalInvoiceWithholding
			restricted
			when (Company.GlobalWithholding
			and   Vendor.LineLevelWithholding)
			
		HasProjectPayablesInvoicePayment
			restricted	
			when (ProjectPayablesInvoicePaymentRel exists)			

		PayablesInvoiceErrorsExistsDirect			
			when (PayablesInvoiceErrorsRel exists
			or   (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			and  (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists)))

		HasAllowReleaseOnlyMatchInvoice				
			restricted
			when (config.AllowReleaseOnlyMatchInvoice = "YES")

		NoOpenInvoiceMessages		
			restricted
			when (!OpenMatchInvoiceMessagesRel exists)

		CompanyWithinGLCompanyGroup		
			when (GeneralLedgerCompanyGroup not entered
			or    GLCompanyGroupMemberRelExists)

		CustodialAccountRequiredForFund			
            when (DistributionAccount.FinanceDimension10 !entered
			and	 GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
            and  (CashCodeFundByAccountingUnitRel.FundUsedForCustodialAccounting
			or   CashCodeFundByFinanceDimension1Rel.FundUsedForCustodialAccounting))

	Dimensions
		GLAccountingUnitRel.AccountingUnit
			dimension name is AccountingUnit
			caption is representative text
			Attributes
				Description
				Level
				SequenceNumber

		DistributionAccount.GeneralLedgerChartAccount
			dimension name is ChartAccount
			caption is representative text
			Attributes
				AccountDescription
				ChartSection				
				AccountType
				AccountSubType
				ChartType
				SystemAccount
				NaturalBalance
				Account
				GeneralLedgerSubAccount
				Level
				SequenceNumber
				XbrlTag
				
		DistributionAccount.Project
			dimension name is Project
			caption is representative text
			Attributes
				DisplayProject
				ProjectType
				Level	
				Description
				Billable
				Watch				
				SequenceNumber
				Active
				PersonResponsible
				PersonResponsibleEmail
				PersonResponsiblePhone
				PersonResponsibleName
				ProjectDateRange.BeginDate
				ProjectDateRange.EndDate
				Contract
				Currency
				BudgetIdentifier	

		AddOnCharge
		AssetFlag
			dimension name is Asset

		PayablesInvoice.AuthorityCode
			dimension name is AuthorityCode

		PayablesInvoice.Buyer
			dimension name is Buyer
			caption is "<Name>"

		TransientGLCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays

		PurchaseOrderLine.CommodityCode
			dimension name is CommodityCode

		PurchaseOrderLine.CostCode
			dimension name is CostCode
			
		DistributionType
			Instance Selection
				where (DistributionType.Distribution
				or     DistributionType.PaymentDiscount)

		DiversityCode
			caption is "<Description>"
			Attributes
				Description

		PayablesInvoice
			dimension name is Invoice
			caption is "<Company>-<Invoice>"            
			Attributes
				Company
				Invoice
				APClerk  
				ResponsiblePerson
				CustomerID
				Buyer
				DueDate
				Status

		InvoiceType
		PurchaseOrderLine.ItemType
			dimension name is ItemType

		PurchaseOrderLine.Item
			dimension name is Item
			caption is representative text 
			
 		PayablesInvoice.Location
 			dimension name is Location







				
		PurchaseOrderLine.Manufacturer
			dimension name is Manufacturer
			
		ProcessLevel
		
		PurchaseOrder
			dimension name is PONumber
			
		PayablesInvoice.ReasonCode
			dimension name is ReasonCode
			
		TaxCode
		SpendCategory
		SpendCategoryDetail		
		Vendor
			caption is representative text
			Attributes
				VendorGroup
				Vendor
				VendorName
				VendorStatus
				VendorClass
				ContactName
				Operator									
				Project
			Hierarchies
				VendorClass
					base level included
					Attributes
						VendorGroup
						VendorClass


	Measures
		DistributionAmount.CurrencyAmount
			measure name is OrigTranAmount		
		DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
			measure name is OrigBaseAmount


	Form Invokes

		AssetDetail
			if (AssetDetailRel exists)
				invoke Update AssetDetailRel
			else
				invoke Create AssetDetailRel


	Relations

		GLAccountingUnitRel
			one-to-one relation to AccountingUnit
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
				related.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AccountingUnit				= DistributionAccount.AccountingUnit

		AnalyticsCalendarPeriodRel
			one-to-one relation to AnalyticsCalendarPeriod
			Field Mapping uses LeafRecordsGregorian
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
				related.Date						= DistributionDate 
				
		PayablesInvoiceDistributionSummaryRel 
			one-to-many relation to PayablesInvoiceDistributionSummary 
			Field Mapping uses BySummaryAccount 
				related.Company 		 = Company 
				related.PayablesInvoice  = PayablesInvoice 
				related.SummaryAccount   = DistributionAccount 

		APDistributionAggregationRel 
			one-to-many relation to APDistributionAggregation 
			Field Mapping uses BySummaryAccount 
				related.Company 		 = Company 
				related.PayablesInvoice  = PayablesInvoice 
				related.SummaryAccount   = LocalMatrixDimensionAccount 
		
		BasicAnalyticsCalendarPeriodRel
			one-to-one relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses LeafRecordsGregorian
				related.Date = DistributionDate
				
		AccountingEntityRel 		
			one-to-one relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity			= GeneralLedgerCompanyRel.AccountingEntity
		
		GeneralLedgerCompanyRel			
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key

				related.Company		= Company		
				
		EntityLedgerPeriodRel						
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= DistributionAccount.FinanceEnterpriseGroup
				related.AccountingEntity			= DistributionAccount.AccountingEntity
				related.Ledger						= DistributionAccount.Ledger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date not < LocalReversalPostDate	
				and	  (related.PeriodStatus.Open
				or    related.PeriodStatus.Backpost))

		OpenEntityLedgerPeriodRel			
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= DistributionAccount.FinanceEnterpriseGroup
				related.AccountingEntity			= DistributionAccount.AccountingEntity
				related.Ledger						= DistributionAccount.Ledger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date not < LocalReversalPostDate)

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= AccountingEntityRel.FinanceEnterpriseGroup	
				related.TaxEntity 						= AccountingEntity
				related.TaxCode 						= TaxCode
				
		EntityTaxCode2Rel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= AccountingEntityRel.FinanceEnterpriseGroup	
				related.TaxEntity 						= LocalTaxEntity
				related.TaxCode 						= TransientTaxCode
			













		GeneralLedgerCalendarPeriodXrefRel								
			one-to-one relation to GeneralLedgerCalendarPeriodXref
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriodXref	= DistributionDate
		
		GeneralLedgerCalendarPeriodRel2
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.Date not < DistributionDate
				and	   related.PeriodType.EndDate)
				
		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= GeneralLedgerCompanyGroup
				related.Company						= Company
				
		GLCommitRel
			one-to-one relation to GLCommit
	  		valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = reference to this instance
		
		AllOneSourceOutputUserAttributesRel
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID)

		PayablesInvoiceErrorsRel							
			one-to-many relation to PayablesInvoiceError
			Field Mapping uses symbolic key
				related.Company                 	= Company
				related.PayablesInvoice				= PayablesInvoice

		AssetCompanyRel										
			one-to-one relation to AssetCompany
			Field Mapping uses symbolic key
				related.Company						= DistributionAccount.ToAccountingEntity

		AssetDetailRel
			one-to-one relation to PayablesAssetDetail
			delete cascades
			Field Mapping uses ByCompanyVendorInvoice
				related.Company                 	= Company
				related.Vendor                  	= Vendor
				related.PayablesInvoice				= PayablesInvoice
				related.PayablesInvoiceDistribution	= PayablesInvoiceDistribution

		DistributionCodeDetailRel
			one-to-many relation to PayablesDistributionCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup					= Company.VendorGroup
				related.PayablesDistributionCode	= DistributionCode

		DefaultingPayablesInvoiceDistributionRel
			one-to-one relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company						= Company
				related.Vendor						= Vendor
				related.PayablesInvoice				= PayablesInvoice
				related.PayablesInvoiceDistribution	= PreviousPayablesInvoiceDistribution

		LinkedAndLandedTaxDistributionsRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses NewSet10
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
				related.OriginalDistribution	= PayablesInvoiceDistribution
			Instance Selection
				where (related.IsLandedTaxDistribution)

		LinkedTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses NewSet10
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
				related.OriginalDistribution	= PayablesInvoiceDistribution

		LocalLinkedTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses NewSet10
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
				related.OriginalDistribution	= LocalPayablesInvoiceDistribution

		LinkedExpenseDistributionsRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9
				related.Company						= Company
				related.Vendor						= Vendor
				related.PayablesInvoice				= PayablesInvoice
				related.PayablesInvoiceDistribution	= LocalOriginalDistribution

		GetLastLinkedTaxSequenceRel			
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.OriginalDistribution = PayablesInvoiceDistribution)

		PayablesInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company						= Company
				related.Vendor						= Vendor
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.Status.Released or related.Status.Unreleased)

		PayablesTaxDetailRel							
			one-to-one relation to PayablesTaxDetail
			delete cascades
			Field Mapping uses symbolic key
				related.Company                 	= Company
				related.PayablesInvoice				= PayablesInvoice
				related.PayablesInvoiceDistribution	= PayablesInvoiceDistribution

		ProcurementCardChargeRel 
			one-to-many relation to ProcurementCardStatementTransaction
			Field Mapping uses ByTransaction
				related.ProcurementGroup            				 			= Company.VendorGroup
				related.ProcurementCardStatement    				 			= ProcurementCardStatement
				related.ProcurementCardStatementTransaction.Company 			= Company
				related.ProcurementCardStatementTransaction.TransactionNumber 	= TransactionNumber 

		TaxCodeRel
			one-to-one relation to TaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	
				related.TaxCode						= TaxCode

		TaxTableTaxCodeRel
			one-to-many relation to TaxTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	
				related.TaxCode						= TaxCode
				
	   	TaxTransactionRel
			one-to-many relation to TaxTransaction
			Field Mapping uses Set6
				related.TaxEntity              			= GeneralLedgerCompanyRel.AccountingEntity
				related.Invoice              			= PayablesInvoice.Invoice
				related.TaxCode				 			= TaxCode
				related.ProductTaxCategory  			= ProductTaxCategory
			Instance Selection
				where (related.TransactionInvoiceAmount = DistributionAmount.CurrencyAmount
				and    related.PostDate 				= old DistributionDate)
				
	   	TaxTransactionsRel
			one-to-many relation to TaxTransaction
			Field Mapping uses Set6
				related.TaxEntity              			= TaxAccountingEntity
				related.Invoice              			= PayablesInvoice.Invoice
				related.TaxCode				 			= TaxCode
				related.ProductTaxCategory  			= ProductTaxCategory
			Instance Selection
				where (related.TransactionTaxAmount		= DistributionAmount.CurrencyAmount
				and    related.InvoiceDate 				= old PayablesInvoice.InvoiceDate
				and    related.PostDate 				= old DistributionDate)

		TaxTransactionsVoucherRel		
			one-to-many relation to TaxTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity						= TaxAccountingEntity
				related.TaxCode							= TaxCode
			Instance Selection
				where (related.ProductTaxCategory		= ProductTaxCategory
				and    related.VoucherNumber			= PayablesInvoice.VoucherNumber)

		TaxTransactionCancelRel			
			one-to-many relation to TaxTransaction
			Field Mapping uses Set6
				related.TaxEntity              			= TaxAccountingEntity
				related.Invoice              			= PayablesInvoice.Invoice
				related.TaxCode				 			= TaxCode
				related.ProductTaxCategory  			= ProductTaxCategory
			Instance Selection
				where (related.VoucherNumber			= PayablesInvoice.VoucherNumber
				and    related.VendorCustomer			= Vendor
				and    related.CancelSequence			= blank)

		PayablesInvoiceRetainageDistributionRel
			classic name is APDISTPAY
			one-to-many relation to PayablesInvoiceRetainageDistribution
			Field Mapping uses Set2
				related.Company                                                     = Company
				related.Vendor                                                      = Vendor
				related.Invoice 													= Invoice
				related.Suffix  													= Suffix
				related.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution   = PayablesInvoiceDistribution

		PayablesInvoiceRel
			classic name is APINVOICE
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company        = Company
				related.Vendor         = Vendor
				related.Invoice        = Invoice
				related.Suffix         = Suffix
				related.CancelSequence = CancelSequence
				related.InvoiceDate    = PayablesInvoice.InvoiceDate			

		PurchaseOrderAndLineAddOnChargesRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set2
				related.Company				= Company
				related.AddOnCharge			= AddOnCharge
				related.PurchaseOrder		= PurchaseOrder

		PurchaseOrderAndLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key 
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine 
				related.AddOnCharge			= AddOnCharge

		RecurringJournalBridgeRel
			one-to-many relation to RecurringJournalBridge
			Field Mapping uses ByTransactionOrigin
				related.TransactionOrigin		= reference to this instance
		
		RecurringJournalControlRel
			one-to-one relation to RecurringJournalControl
			Field Mapping uses ByTransactionOrigin
				related.TransactionOrigin		= reference to this instance

		ReconciliationManagementGroupRel		
			one-to-one relation to ReconciliationManagementGroup
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		ReconciliationAccountsByCodeBlockRel		
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByReconciliationCodeBlock
				related.ReconciliationManagementGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReconciliationAccountStructure						= TransientReconciliationAccountStructure
				related.ReconciliationCodeBlock.AccountingEntity			= DistributionAccount.ToAccountingEntity	
				related.ReconciliationCodeBlock.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
			Instance Selection
				where (related.ReconciliationAccountType	= "2")

		ReconciliationDetailRel		
			one-to-many relation to ReconciliationDetail
			Field Mapping uses ByVendorInvoice
				related.ReconciliationManagementGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.VendorInvoice.PayablesCompany	= Company
				and    related.VendorInvoice.Vendor				= Vendor
				and    related.VendorInvoice.PayablesInvoice	= PayablesInvoice
				and    related.ReconciliationAccount.ReconciliationCodeBlock.AccountingEntity			= DistributionAccount.ToAccountingEntity
				and    related.ReconciliationAccount.ReconciliationCodeBlock.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount)

		OldReconciliationDetailRel		
			one-to-many relation to ReconciliationDetail
			Field Mapping uses ByVendorInvoice
				related.ReconciliationManagementGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.VendorInvoice.PayablesCompany	= Company
				and    related.VendorInvoice.Vendor				= Vendor
				and    related.VendorInvoice.PayablesInvoice	= PayablesInvoice
				and    related.ReconciliationAccount.ReconciliationCodeBlock.AccountingEntity			= old DistributionAccount.ToAccountingEntity
				and    related.ReconciliationAccount.ReconciliationCodeBlock.GeneralLedgerChartAccount	= old DistributionAccount.GeneralLedgerChartAccount)

		TaxAttributesRel		
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	 
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode
		
		VendorDiversityRel
			classic name is APVENDIV
			one-to-many relation to VendorDiversity
			Field Mapping uses ByDateDescending
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = Vendor
				related.VendorLocation = PayablesInvoice.Location

		VendorRel
			classic name is APVENMAST
			one-to-one relation to Vendor
			required
			Field Mapping uses symbolic key
				related.VendorGroup = Company.VendorGroup
				related.Vendor      = Vendor

		LocalPayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company				= LocalPayablesCompany

		PayablesAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses Set1
				related.VendorGroup			= LocalPayablesCompanyRel.VendorGroup
				related.Company				= LocalPayablesCompany
				related.PayablesAccrualCode	= LocalAccrualCode

		OverrideTaxAccrualDetailRel									
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			= Company.VendorGroup
				related.PayablesAccrualCode	= LocalAccrualCode
				related.Company				= LocalTaxCompany

		PayablesInvoicePaymentRel
			one-to-one relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= LocalPayablesCompany
				related.PayablesInvoice							= LocalPayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence	= LocalPaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= LocalVoidSequence

		LocalPayablesInvoiceRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses symbolic key
				related.Company									= LocalPayablesCompany
				related.PayablesInvoice							= LocalPayablesInvoice

		PayablesDiscountCodeDetailRel
			one-to-one relation to PayablesDiscountCodeDetail
			Field Mapping uses Set1
				related.VendorGroup				= LocalPayablesCompanyRel.VendorGroup
				related.Company					= LocalPayablesCompany
				related.PayablesDiscountCode	= LocalPayablesDiscountCode

		CompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company		= LocalCompany
				related.CashCode	= LocalCashCode

		CashCodeFundRel									
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= Company.FinanceEnterpriseGroup
				related.CashCode				= LocalCashCode
				related.AccountingEntity		= LocalAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		CashCodeFundByAccountingUnitRel				
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CashCode				= PayablesInvoice.CashCode
				related.AccountingEntity		= DistributionAccount.ToAccountingEntity
				related.AccountingUnit			= DistributionAccount.AccountingUnit
				related.FinanceDimension1		= blank
 
		CashCodeFundByFinanceDimension1Rel			
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CashCode				= PayablesInvoice.CashCode
				related.AccountingEntity		= DistributionAccount.ToAccountingEntity
				related.AccountingUnit			= blank
				related.FinanceDimension1		= DistributionAccount.FinanceDimension1

		CashLedgerGLDistributionByAccountRel				
			one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= Company.FinanceEnterpriseGroup
                related.CashCode 				= LocalCashCode
                related.CashLedgerSourceRecord	= "CHK"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode	= LocalBankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber	= LocalTransactionIDNumber
                and    related.CashLedgerGLDistribution.DistributionType.FundCashPayment
                and    related.Company.OrigCompany							= Company
				and    related.GLFinanceCodeBlock.Ledger					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.Ledger
				and    related.GLFinanceCodeBlock.ToAccountingEntity		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
				and    related.GLFinanceCodeBlock.AccountingUnit			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
				and    related.GLFinanceCodeBlock.GeneralLedgerChartAccount	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.GeneralLedgerChartAccount
				and    related.GLFinanceCodeBlock.Project					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.Project
				and    related.GLFinanceCodeBlock.FinanceDimension1			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1
				and    related.GLFinanceCodeBlock.FinanceDimension2			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension2
				and    related.GLFinanceCodeBlock.FinanceDimension3			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension3
				and    related.GLFinanceCodeBlock.FinanceDimension4			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension4
				and    related.GLFinanceCodeBlock.FinanceDimension5			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension5
				and    related.GLFinanceCodeBlock.FinanceDimension6			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension6
				and    related.GLFinanceCodeBlock.FinanceDimension7			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension7
				and    related.GLFinanceCodeBlock.FinanceDimension8			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension8
				and    related.GLFinanceCodeBlock.FinanceDimension9			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension9
				and    related.GLFinanceCodeBlock.FinanceDimension10		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10)		

		CashLedgerGLDistributionsRel						
			one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= Company.FinanceEnterpriseGroup
                related.CashCode 				= LocalCashCode
                related.CashLedgerSourceRecord	= "CHK"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = LocalBankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = LocalTransactionIDNumber
                and    related.CashLedgerGLDistribution.DistributionType.FundCashPayment)

		BudgetEditErrorsRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup		= UniqueID

		MatchCompanyRel
			one-to-one relation to MatchCompany
			Field Mapping uses symbolic key
				related.Company								= Company

		LocalMatchCompanyRel
			one-to-one relation to MatchCompany
			Field Mapping uses symbolic key
				related.Company								= LocalMatchCompany

		TaxEntityRel				 
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= LocalTaxEntity

		InvoiceTaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= GeneralLedgerCompanyRel.AccountingEntity

		OneSourceUserAttributesRel		
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID)

		PayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice 				= PayablesInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	 					= PurchasingContract
				related.ContractLine 		   			= ContractLine

		PayablesInvoiceAddOnChargeRel
			one-to-one relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company                 		= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract						= PurchasingContract
				related.ContractLine					= ContractLine
				related.AddOnCharge						= AddOnCharge
				related.PayablesInvoiceAddOnCharge   	= PayablesInvoiceDetail

		IntercompanyBillingTransactionRel
			one-to-one relation to IntercompanyBillingTransaction
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction 	= reference to this instance

		IntercompanyBillingDocumentHeaderRel		
			one-to-many relation to IntercompanyBillingDocumentHeader
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.OriginatingDocument	= reference to PayablesInvoice
				and    related.Status >= 4)





	  	GLTransactionDetailRel	
	  		one-to-one relation to GLTransactionDetail
	  		valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction		 

				related.OriginatingTransaction	= reference to this instance			








	  	GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = AccountingEntityRel.FinanceEnterpriseGroup	
				related.GeneralLedgerSystemCode     = "AP"





		PayablesInvoiceDistributionAnalyticCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "PayablesInvoiceDistribution"	  

		BasicAnalyticsCalendarsRel 		is a BasicAnalyticsCalendar set

  		VertexConfigRel
			one-to-one relation to VertexConfig
			Field Mapping uses symbolic key
				related.VertexConfig 						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	

		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)						

		VendorAccountRestrictionAccountRel
			one-to-many relation to VendorAccountRestriction
			Field Mapping uses ByAccountEntityUnit
				related.VendorGroup					= Company.VendorGroup
				related.Vendor						= Vendor
				related.GeneralLedgerChartAccount	= LocalChartAccount

		VendorAccountRestrictionEntityRel
			one-to-many relation to VendorAccountRestriction
			Field Mapping uses ByAccountEntityUnit
				related.VendorGroup					= Company.VendorGroup
				related.Vendor						= Vendor
				related.GeneralLedgerChartAccount	= LocalChartAccount
				related.AccountingEntity			= LocalAccountingEntity

		VendorAccountRestrictionUnitRel
			one-to-many relation to VendorAccountRestriction
			Field Mapping uses ByAccountEntityUnit
				related.VendorGroup					= Company.VendorGroup
				related.Vendor						= Vendor
				related.GeneralLedgerChartAccount	= LocalChartAccount
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit				= LocalAccountingUnit

		AccruedTaxDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.TaxType				= TaxType.Accrued
				and    related.IsTaxDistribution)			

		InvoiceDetailDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoiceDetail		= PayablesInvoiceDetail)

		InvoiceDetailLandedTaxDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.AddOnCharge not entered
				and    related.IsLandedTaxDistribution)

		InvoiceDetailLandedAddOnChargeDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.IsLandedAOCDistribution)

		InvoiceDetailAllAddOnChargeDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.AddOnCharge entered)

		AddOnChargeLandedTaxDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.AddOnCharge					= AddOnCharge
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.IsLandedTaxDistribution)

		MatchDetailTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.AddOnCharge not entered 
				and    related.IsLandedTaxDistribution)

		MatchDetailAOCTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.AddOnCharge entered 
				and    related.IsLandedTaxDistribution)

		MatchAddOnChargeDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.IsLandedAOCDistribution
				and    related.TaxCode not entered)

		InvoiceDetailMainDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract			= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.AddOnCharge					= AddOnCharge
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.Status						= Status 
				and    related.DistributionAmount.CurrencyAmount > 0 
				and    related.TaxCode not entered)

		ReversedDistributionForInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract			= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.OriginalDistribution			= OriginalDistribution
				and    related.Status						= Status.Unreleased
				and    related.TaxCode 						= TaxCode
				and    related.DistributionAmount.CurrencyAmount < 0)

		NewMatchInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= LocalPayablesInvoice
			Instance Selection
				where (related.PurchaseOrder  				= PurchaseOrder
				and    related.PurchaseOrderLine    		= PurchaseOrderLine
				and    related.PurchasingContract 	 		= PurchasingContract
				and    related.ContractLine 		   		= ContractLine
				and    related.PayablesInvoiceDetail		= PayablesInvoiceDetail
				and    related.TaxCode						= TaxCode
				and    related.AddOnCharge					= AddOnCharge
				and    related.DistributionAccount			= DistributionAccount)

		PayablesInvoiceTaxRel		
			one-to-one relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoiceDistribution		= PayablesInvoiceDistribution

		PayablesInvoiceTaxHeaderRel		
			one-to-one relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoiceDistribution		= blank

		PayablesInvoiceTaxLocalRel		
			one-to-one relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoiceDistribution		= LocalDistributionSequence

		PayablesInvoiceTaxLinkedExpenseRel			
			one-to-one relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PayablesInvoiceDistribution		= OriginalDistribution

		PurchaseOrderLineDistributionRel
			one-to-one relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PurchaseOrder  						= PurchaseOrder
				related.PurchaseOrderLine    				= PurchaseOrderLine
				related.AddOnCharge							= AddOnCharge
				related.PurchaseOrderLineDistribution		= OriginalDistribution

		PurchaseOrderLinesForInvoiceRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= PayablesInvoice.FirstPurchaseOrder

		ContractLinesForInvoiceRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup       = Company.VendorGroup
				related.Contract			= PayablesInvoice.ServiceContract

		ContractLineDistributionRel
			one-to-one relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup       			= Company.VendorGroup
				related.Contract  						= PurchasingContract 
				related.ContractLine    				= ContractLine 
				related.ContractLineDistribution		= OriginalDistribution

		FirstPaymentRel  
			one-to-one relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence	= FirstPaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= blank

		ProjectPayablesInvoicePaymentRel  
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
			Instance Selection
				where (related.Status.Historical
				or     related.Status.Released)

		IntercompanyBillingSettlementRel 
			one-to-one relation to IntercompanyBillingSettlementHeader
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup										= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.PayablesCompany				= Company
				related.IntercompanyBillingSettlementHeader.PayablesCashCode			= TransientPayablesInvoicePayment.CashCode
				related.IntercompanyBillingSettlementHeader.PayablesBankTransactionCode	= TransientPayablesInvoicePayment.BankTransactionCode
				related.IntercompanyBillingSettlementHeader.SettlementID				= DistributionReference

		ContextSettlementDetailRel 
			one-to-one relation to IntercompanyBillingSettlementDetail
			Field Mapping uses ByBillingDocument
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingDocumentHeader					= PayablesInvoice.IntercompanyBillingDocumentRel.IntercompanyBillingDocumentHeader
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext

		ContextSettlementDetailLineRel 
			one-to-one relation to IntercompanyBillingSettlementDetailLine
			Field Mapping uses ByPayablesInvoiceLine
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext
				related.IntercompanyBillingDocumentHeader					= PayablesInvoice.IntercompanyBillingDocumentRel.IntercompanyBillingDocumentHeader
				related.InvoiceLine											= ContextPayablesInvoicePayment.PayablesInvoicePayment.PaymentSequence
				related.VoidSequence										= ContextPayablesInvoicePayment.PayablesInvoicePayment.VoidSequence

		ICBPayablesApplyDistributionContextRel 
			one-to-one relation to ICBPayablesApplyDistribution
			Field Mapping uses ByPayablesInvoiceDistribution
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext
				related.IntercompanyBillingDocumentHeader					= PayablesInvoice.IntercompanyBillingDocumentRel.IntercompanyBillingDocumentHeader
				related.InvoiceLine											= ContextPayablesInvoicePayment.PayablesInvoicePayment.PaymentSequence
				related.VoidSequence										= ContextPayablesInvoicePayment.PayablesInvoicePayment.VoidSequence
				related.PayableEntity.Company								= Company
				related.PayableEntity.PayablesInvoice						= PayablesInvoice
				related.OriginalPayablesInvoiceDistribution					= PayablesInvoiceDistribution

		PayablesFundApplyDistributionRel
			one-to-many relation to PayablesFundApplyDistribution
			Field Mapping uses PayablesFundApplyDistributionDescending
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where (related.OriginalPayablesInvoiceDistribution			= PayablesInvoiceDistribution)

		AutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= PayablesInvoice
			
		LocalAutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= LocalPayablesInvoice
				
		TaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
				related.LineItemNumber						= PayablesInvoiceDistribution
				

		FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFAE"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= LocalBODAccountingEntity)
		
		LinkedDisttypeDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company    		= Company
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where(related.DistributionType = "D"
				and related.OriginalDistribution = LocalPIDistribution)


		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company

		PayablesInvoiceWithholdingRel is a PayablesInvoiceWithholding set
			Instance Selection
				where (related.PayablesInvoicePayment not entered)

		DefaultInvoiceWithholdingRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoicePayment 		!entered
				and    related.PayablesInvoiceDistribution	!entered)

		LocalInventoryLocationRel  
		    one-to-one relation to InventoryLocation
		    Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= LocalInventoryLocation

		BypassOneSourceRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "BypassOneSource"

		BypassOneSourceTaxRateRel								
			one-to-many relation to TaxRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxCode					= PurchaseOrderLine.InventoryLocationRel.PurchaseOrderTaxCode

		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey

		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= PayablesInvoiceDistribution
				
#ifdef module cam
		CustodialDetailAmountRel
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses ByCustodialPosting
				related.FinanceEnterpriseGroup  		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CustodialPosting            	= LocalCustodialPosting
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity	= LocalAccountingEntity)

		CustodialAccountEditRel2				
			one-to-one relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to PayablesInvoice
		 		related.AccountingEntity		= LocalAccountingEntity
		 		related.FinanceDimension10		= LocalCustodialPosting

		CustodialActivityRel					
			one-to-many relation to CustodialActivity
			Field Mapping uses ByPayablesInvoicePayment
		 		related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
		  		related.CustodialCompany		= Company
				related.CustodialPosting		= LocalCustodialPosting
		 		related.PayablesInvoice			= PayablesInvoice
		 		related.PayablesInvoicePayment	= LocalPayablesInvoicePayment
		 		related.DocumentNumber			= LocalPaymentSequence+"_"+PayablesInvoice.Invoice
#endif
		PayablesAssetDetailRel
			one-to-one relation to PayablesAssetDetail
			Field Mapping uses Set1
				related.Company                 	= Company
                related.PayablesInvoice				= PayablesInvoice
               	related.PayablesInvoiceDistribution	= PayablesInvoiceDistribution

		ProjectFundingSourceRel
			one-to-one relation to ProjectFundingSource
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ProjectContract			= DistributionAccount.Project.ParentDisplayContractRel.Project
				related.FinanceDimension2		= DistributionAccount.FinanceDimension2	

		HeaderBudgetEditErrorRel			
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup         = PayablesInvoice.UniqueID

		DistributionBudgetEditErrorRel		
			one-to-many relation to BudgetEditError
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID                          = PayablesInvoice.UniqueID

		OpenMatchInvoiceMessagesRel			
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.MessageNotClosed)

		PurchaseOrderLineDistributionblankAOCRel
			one-to-one relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PurchaseOrder  						= PurchaseOrder
				related.PurchaseOrderLine    				= PurchaseOrderLine
				related.AddOnCharge							= blank
				related.PurchaseOrderLineDistribution		= OriginalDistribution

		PaymentsInPayCycleRel  
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
			Instance Selection
				where (related.CancelSequence						= blank
				and    related.PayablesInvoicePayment.VoidSequence	= blank
				and	  (related.Status								= 1
				or	   related.Status								= 2
				or     related.Status                               = 3)
				and    related.CashRequirementsResult				entered)



 	Sets


		ByVendor				
			duplicates
			Sort Order
				Status		
				Vendor
				Company		
				Invoice		

		ByInvoice				
			duplicates
			Sort Order
				Status		
				Invoice
				Company		

		ByDistributionAccount	
			duplicates
			Sort Order
				Status		
				DistributionAccount.GeneralLedgerChartAccount
				Company		
				Invoice		

		ByDistributionDate		
			duplicates
			Sort Order
				Status		
				DistributionDate descending
				Company		
				Invoice		

		ByCompanyVendorInvoice				
			Instance Selection
				where (VendorInvoiceEntered)
			Sort Order
				Company
				Vendor
				Invoice
				Suffix
				CancelSequence
				PayablesInvoiceDistribution

		ByProject				
			Instance Selection
				where (IsDistributionType)
			Sort Order
				DistributionAccount.Project
				Company
				Vendor
				PayablesInvoice				
				PayablesInvoiceDistribution

		ByPayablesInvoiceSuffixPOLine		
			Sort Order
				Company
				Vendor
				PayablesInvoice
				Suffix
				PurchaseOrder
				PurchaseOrderLine
				PayablesInvoiceDistribution






























		Set11								
			indexed
			Instance Selection
				where (PullForFinancialReporting1)
			Sort Order
				Company
				PayablesInvoice
				PayablesInvoiceDistribution

		Set2												
			indexed
			Sort Order
				Company
				Status
				ProcessLevel
				DistributionAccount.AccountingUnit
				DistributionAccount.GeneralLedgerChartAccount
				DistributionDate
				PayablesInvoice
				PayablesInvoiceDistribution

		Set5												
			indexed
			Instance Selection
				where (GltObjIdEntered)
			Sort Order
				GltObjId
				Company
				PayablesInvoice
				PayablesInvoiceDistribution

		Set7												
			indexed
			Sort Order
				Vendor
				Company
				PayablesInvoice
				PayablesInvoiceDistribution

		Set9											
			indexed
			Sort Order
				Company
				Vendor
				PayablesInvoice
				PayablesInvoiceDistribution

		Set1											
			not indexed
			Sort Order
				Company
				PayablesInvoice
				PayablesInvoiceDistribution

		ByRebate										
			Instance Selection
				where (HasRebate)	
			Sort Order
				ContractRebateGroup.ContractGroup
				ContractRebateGroup.Contract
				ContractRebateGroup.ContractRebateType
				ContractRebateGroup.ContractRebateDue
				Company
				PayablesInvoice
				PayablesInvoiceDistribution
		
		ByContract
			Instance Selection
				where (ContractEntered)
			Sort Order
				Vendor
				PurchasingContract
				ContractLine
				Company
				PayablesInvoice
				PayablesInvoiceDistribution 
		
		NewSet10										
			not indexed
			Instance Selection
				where (IsLinkTaxDist)
			Sort Order
				Company
				Vendor
				PayablesInvoice
				OriginalDistribution
				TaxSequenceNumber
				PayablesInvoiceDistribution




	Rule Blocks


		SetAccountingEntityForContext
			AccountingEntity = GeneralLedgerCompanyRel.AccountingEntity	







		SetGLTSystemForContext
			GLTSystem	= "AP"			



		DisplayCalculateTaxInput
			display "DisplayCalculateTaxInput"



























































































































		DisplayCalculateTaxOutput
			display "DisplayCalculateTaxOutput"







































































































































































			
			

		UpdatePayablesInvoiceDistributionTotals

















			if  (!PayablesInvoice.BypassDistActionExitRules
			and  !PayablesInvoice.TransientBypassDistActionExitRules
			and  DistributionType.Distribution			
			and  !IsAccruedTaxDistribution				


			and (!IsTaxDistribution							
			or  (IsTaxDistribution							
			and (!PayablesInvoice.ShortPayCommentExists		
			and  !PayablesInvoice.DoShortPayProcess)))		
			and  !VATReverseCharge.Processing			
			and  !IsAccruedVATTax						
			and  !BypassDistActionExitRules)			
				LocalDocumentCurrencyTotals 							= PayablesInvoice.TotalDistributionAmount

				if (action type.Create)
					LocalDocumentCurrencyTotals.OldCurrencyAmount		= blank
					LocalDocumentCurrencyTotals.NewCurrencyAmount		= DistributionAmount
					OldDistributionAmountCurrencyAmount					= blank
					NewDistributionAmountCurrencyAmount					= DistributionAmount.CurrencyAmount


				else
					if (action type.Delete)
						LocalDocumentCurrencyTotals.OldCurrencyAmount	= old DistributionAmount
						LocalDocumentCurrencyTotals.NewCurrencyAmount	= blank
						OldDistributionAmountCurrencyAmount				= old DistributionAmount.CurrencyAmount
						NewDistributionAmountCurrencyAmount				= blank


					else
						if ((OldDistributionAmountGroup.CurrencyAmount entered
						and  OldDistributionAmountGroup.CurrencyAmount != DistributionAmount.CurrencyAmount)
						or   TransientCurrencyRefresh)
							LocalDocumentCurrencyTotals.OldCurrencyAmount	= OldDistributionAmountGroup
							LocalDocumentCurrencyTotals.NewCurrencyAmount	= DistributionAmount
							OldDistributionAmountCurrencyAmount				= OldDistributionAmountGroup.CurrencyAmount
							NewDistributionAmountCurrencyAmount				= DistributionAmount.CurrencyAmount


						else
							if  (OldDistributionAmountGroup.CurrencyAmount = DistributionAmount.CurrencyAmount)
								LocalDocumentCurrencyTotals.OldCurrencyAmount	= DistributionAmount
								LocalDocumentCurrencyTotals.NewCurrencyAmount	= DistributionAmount
								OldDistributionAmountCurrencyAmount				= DistributionAmount.CurrencyAmount
								NewDistributionAmountCurrencyAmount				= DistributionAmount.CurrencyAmount


							else
								LocalDocumentCurrencyTotals.OldCurrencyAmount	= blank
								LocalDocumentCurrencyTotals.NewCurrencyAmount	= DistributionAmount
								OldDistributionAmountCurrencyAmount				= blank
								NewDistributionAmountCurrencyAmount				= DistributionAmount.CurrencyAmount




				if ((PayablesInvoice.TaxCode.TaxType.TaxTableCode
				or   PayablesInvoice.TransientBypassMemberEdit)	
				and  DistributionCode !entered)					
					increment PayablesInvoice.TransientTaxTableInvoicedAmount by NewDistributionAmountCurrencyAmount


				




				LocalDocumentCurrencyTotals.TransactionTotal = PayablesInvoice.TotalDistributionAmount.TransactionTotal - OldDistributionAmountCurrencyAmount + NewDistributionAmountCurrencyAmount

				LocalDocumentCurrencyTotals.PerformUpdate	 = true
				if (LocalDocumentCurrencyTotals.UpdateTotals)

					invoke SetDocumentTotals PayablesInvoice	 											 
						invoked.PrmTotalDistributionAmount	= LocalDocumentCurrencyTotals



					if (config.EvaluateRoutingRulesOnDistributionCreate = true	
					and !PayablesInvoice.RequiresApproval)
						invoke CheckRoutingRules PayablesInvoice



			if (config.UseOldTotalTaxAmountProcess = true)			

				if (TaxEntityUsesThirdPartyTax						
				and PayablesInvoice.MatchProcessType.Expense)		
					include UpdatePayablesInvoiceDistributionTaxTotals
				else
					include UpdatePayablesInvoiceDistributionTaxTotalsNew	

			else

				include UpdatePayablesInvoiceDistributionTaxTotalsNew	



		UpdatePayablesInvoiceDistributionTaxTotals





			initialize LocalTotalTaxAmtIncrement
			initialize LocalTotalTaxableAmtIncrement
			initialize LocalTaxAmtIncrement
			initialize LocalTaxableAmtIncrement
			if (ActionType.CreateType)

















				if    (!DistributionType.ExpenseAccrual
				and 	IsTaxDistribution

				and    !VATReverse)							


					if  (TaxCodeRel.TaxType.TaxTableCode
					and  TaxableAmount != DistributionAmount.CurrencyAmount
					and  !PayablesInvoice.MatchProcessType.Expense)		
						LocalTotalTaxAmtIncrement			+= GLTransactionAmount
						LocalTotalTaxableAmtIncrement		+= TaxableAmount

					else
					if  (!PayablesInvoice.MatchProcessType.Expense)
						LocalTotalTaxAmtIncrement			+= GLTransactionAmount


						if  (PayablesInvoiceDetail entered)
							if  (TaxCode = PayablesInvoiceDetail.TaxCode
							or   TaxCode = PayablesInvoiceDetail.TaxCode.TaxTableRel.TaxCode1)
								LocalTotalTaxableAmtIncrement		+= TaxableAmount

						else
						if (TaxableAmount != DistributionAmount.CurrencyAmount)
							LocalTotalTaxableAmtIncrement		+= TaxableAmount
							


						if  (MatchCreated entered)

							if 	(IsAccruedTaxDistribution			
							and (PayablesInvoice.TaxAdjustment not entered
							or   PayablesInvoice.TaxAdjustment.OverrideProductOnly
							or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC
							or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOLine
							or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC
							or   TransientOriginalPayablesInvoiceTaxAmount not entered))
								LocalTaxAmtIncrement	+= GLTransactionAmount

							else
								if 	 (IsInvoicedTaxDistribution		
								and   TransientOriginalPayablesInvoiceTaxAmount not entered
								and   !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
								and   !PayablesInvoice.TaxAdjustment.Calculate
								and   !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
									LocalTaxAmtIncrement	+= GLTransactionAmount

						else
							if  ((PayablesInvoice.DoOneSourceAfter
							or    PayablesInvoice.CallVertexByDocument)
							and  !PayablesInvoice.CreditForRebill
							and (PayablesInvoice.ShortPayCommentExists
							or   PayablesInvoice.TaxAmount = PayablesInvoice.TotalTaxAmount))
								LocalTaxAmtIncrement		+= GLTransactionAmount

					else
					if  (!PayablesInvoice.TaxCode.TaxType.TaxTableCode	
					and (!PayablesInvoice.MatchProcessType.Expense		
					or   PayablesInvoice.TaxCode entered))				


						if (!InterfaceCreate							
						and !DerivedTaxMethodInvOrAcc.Accrued)			
							LocalTotalTaxAmtIncrement			+= GLTransactionAmount		



						if (PayablesInvoice.MatchProcessType.Expense
						and (TaxEntityUsesSabrix
						or   TaxEntityUsesVertex)		
						and IsTaxDistribution
						and (DerivedTaxMethodInvOrAcc.Accrued
						or   IsShortPay)
						and !InterfaceCreate)
							LocalTotalTaxAmtIncrement			+= GLTransactionAmount	


						if  (PayablesInvoice.MatchProcessType.Expense)
							if (!PayablesInvoice.TransientBypassTaxAmountEdit)	
								if (PayablesInvoice.ShortPayCommentExists)						
									if (PayablesInvoice.DistributionCode not entered			
									and !PayablesInvoice.ShortPayCommentExists)					
										LocalTotalTaxAmtIncrement	+= GLTransactionAmount		

									if (PayablesInvoiceTaxHeaderRel.LinkedToDistributions)	
										if (PayablesInvoice.DistributionCode not entered)			
											LocalTaxAmtIncrement		+= GLTransactionAmount		


								else														
								if ((PayablesInvoice.TaxAmount not entered			
								or   TransientLinkTaxTableDistributions)	
								and  PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered		
								and !DoDetailTaxProcessing)					
									LocalTaxAmtIncrement		+= GLTransactionAmount

								else
									if  (PayablesInvoice.IsChargebackSubType
									and  MatchCreated entered)
										LocalTaxAmtIncrement	+= GLTransactionAmount

									else													



										if ((PayablesInvoice.TaxAmount entered				
										and  PayablesInvoice.TaxAmount = PayablesInvoice.TotalTaxAmount)
										and (PayablesInvoice.TaxCode entered								
										and  PayablesInvoiceDistribution.TaxCode entered					
										and  PayablesInvoice.TaxCode = PayablesInvoiceDistribution.TaxCode)	
										and !DoDetailTaxProcessing					
										and initiating action != "ReverseDistributionForUpdate"		
										and invoking action != "PayablesInvoice.PerformTaxReversal"	
										and !PayablesInvoice.InvoiceType.Prepayment)				

											if  (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered 	
											and  invoking action = "CancelDistribution")							
												LocalContinue = true

											else	
												LocalTaxAmtIncrement		+= GLTransactionAmount

										else
											if (PayablesInvoice.DistributionCode entered			
											and PayablesInvoice.TaxAmount not entered				
											and IsTaxDistribution									
											and DerivedTaxMethodInvOrAcc.Accrued					
											and TaxEntityUsesThirdPartyTax							
											and PayablesInvoice.DoTaxAfter)  						
												LocalTaxAmtIncrement		+= GLTransactionAmount	

							else

								if (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered	
								and PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)		

									LocalTaxAmtIncrement			+= GLTransactionAmount	

					

					if ((PayablesInvoice.TaxCode.TaxType.TaxTableCode
					or   PayablesInvoice.TransientTaxTableInvoicedAmount entered)
					and  PayablesInvoice.MatchProcessType.Expense		
					and !initiating action = "PayablesInvoice.CalculateRateUnreleased"		
					and  DerivedTaxMethodInvOrAcc.Invoiced)		
						LocalTotalTaxAmtIncrement		+= GLTransactionAmount

					else														
						if (InterfaceCreate)									
							LocalTotalTaxAmtIncrement	+= GLTransactionAmount	

					



					if  (PayablesInvoice.VendorReturn entered

					and  PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered)	

						NextSentence = true
					else


						if (PayablesInvoice.TaxCode not entered		


						and (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered	
						or   PayablesInvoice.ShortPayCommentExists	
						or   IsDistributionAccruedTax)				
						and !InterfaceCreate		
						and PayablesInvoice.MatchProcessType.Expense
						and IsTaxDistribution)
							if (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered)	
								if (DerivedTaxMethodInvOrAcc.Invoiced		
								or  TaxEntityUsesThirdPartyTax)				
									LocalTaxAmtIncrement		 = GLTransactionAmount
								LocalTotalTaxAmtIncrement	+= GLTransactionAmount					

							else


								if (PayablesInvoice.ShortPayCommentExists							


								and PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered)	

									LocalTaxAmtIncrement		 = GLTransactionAmount		
									LocalTotalTaxAmtIncrement	+= GLTransactionAmount		


							DoTaxTotalRefresh		= true					
						else																				


							if (LocalTaxAmtIncrement not entered		
							and PayablesInvoice.MatchProcessType.Expense								
							and TaxEntityUsesThirdPartyTax												


							and IsTaxDistribution														
							and DerivedTaxMethodInvOrAcc.Accrued										
							and PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered		
							and !InterfaceCreate														
							and invoking action   != "CreateImport"										
							and invoking action   != "CancelDistribution"								
							and initiating action != "ReverseDistributionForUpdate"						
							and !PayablesInvoice.Status.Amended											
							and initiating action != "PayablesInvoice.PerformTaxReversal")				
								LocalTaxAmtIncrement	+= GLTransactionAmount							

							else
							if (PayablesInvoice.MatchProcessType.Expense									
							and PayablesInvoice.TaxCode entered												
							and PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered			
							and IsTaxDistribution															
							and DerivedTaxMethodInvOrAcc.Invoiced											
							and !InterfaceCreate															
							and invoking action   != "CreateImport"											
							and invoking action   != "CancelDistribution"									
							and initiating action != "ReverseDistributionForUpdate"							
							and !PayablesInvoice.Status.Amended												
							and initiating action != "PayablesInvoice.PerformTaxReversal")					


								if (PayablesInvoice.TaxAmount = PayablesInvoiceTaxHeaderRel.TaxSystemTaxAmount)	
									LocalTaxAmtIncrement     -= PayablesInvoice.TaxAmount					

								else																							


									if (PayablesInvoice.TaxAmount != PayablesInvoiceTaxHeaderRel.TaxSystemTaxAmount	
									and PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered						
									and PayablesInvoiceTaxHeaderRel.TaxDetails.ReturnedTaxAmount not entered						
									and PayablesInvoice.TaxAmount entered)														
										LocalTaxAmtIncrement     -= PayablesInvoice.TaxAmount									

										
								if (PayablesInvoiceTaxHeaderRel.TaxDetails.ReturnedTaxAmount entered)			
									LocalContinue = true					

								else																				
									LocalTaxAmtIncrement	     += GLTransactionAmount							
								DoTaxTotalRefresh			  = true										



				if (PayablesInvoice.IsChargeback  
				and IsTaxDistribution)
					LocalTotalTaxAmtIncrement			= GLTransactionAmount
					LocalTaxAmtIncrement				= GLTransactionAmount








				if  (PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount 	not entered		
				and  PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount	not entered		


				and !IsTaxDistribution)																


					LocalTotalTaxableAmtIncrement     += TaxableAmount


					LocalTaxableAmtIncrement          += TaxableAmount		




				if (PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount not entered
				and PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount entered
				and DistributionType.Distribution					
				and PayablesInvoice.MatchProcessType.Expense
				and PayablesInvoice.DistributionCode not entered	
				and PayablesInvoiceTaxHeaderRel.LinkedToDistributions			
				and !IsTaxDistribution
				and (TaxIndicator.None
				or   TaxIndicator.Exclude
				or   TaxIndicator.Exempt))
					LocalTotalTaxableAmtIncrement	-= GLTransactionAmount
					LocalTaxableAmtIncrement		-= GLTransactionAmount
					decrement PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount by GLTransactionAmount






				if  (PayablesInvoice.MatchProcessType.Expense)
					if ((TaxIndicator not entered
					or  TaxIndicator.None)
					and TaxCode not entered
					and PayablesInvoice.TaxCode entered)
						LocalTotalTaxableAmtIncrement 	+= TaxableAmount

					else		

						if (TaxIndicator.Taxable
						and PayablesInvoice.IsLandedTax
						and !DelayTaxProcessing			

						and PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount not entered	
						and PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount not entered	
						and PayablesInvoice.TaxableAmount entered)
							LocalTaxableAmtIncrement	+= (PayablesInvoice.TaxableAmount * -1)	

							
					if  (PayablesInvoice.TaxableAmount  not entered
					and  PayablesInvoice.TotalTaxableAmount entered
					and !PayablesInvoice.TransientUpdateTaxCode)		
						LocalTotalTaxableAmtIncrement	+=	(PayablesInvoice.TotalTaxableAmount * -1)

			else	

				if (ActionType.DeleteType
				and !TransientDeleteFromHeader)


					if (PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount not entered
					and PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount entered
					and PayablesInvoice.MatchProcessType.Expense
					and PayablesInvoiceTaxHeaderRel.LinkedToDistributions		
					and PayablesInvoice.DistributionCode not entered					
					and !IsTaxDistribution
					and (TaxIndicator.None
					or   TaxIndicator.Exclude
					or   TaxIndicator.Exempt))
						LocalTotalTaxableAmtIncrement	+= GLTransactionAmount
						LocalTaxableAmtIncrement		+= GLTransactionAmount
						increment PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount by GLTransactionAmount



					if  (TaxCode entered)


						if  (!PayablesInvoice.MatchProcessType.Expense
						and (PayablesInvoice.InvoiceUnmatched
						or   FromUnmatch)
						and  TaxIndicator not entered)
							LocalTotalTaxAmtIncrement		+= (GLTransactionAmount * -1)

							if  (IsInvoicedTaxDistribution)
								if (PayablesInvoice.TotalTaxableAmount entered)
								
									if  (PayablesInvoiceDetail entered)
										if  (TaxCode = PayablesInvoiceDetail.TaxCode
										or   TaxCode = PayablesInvoiceDetail.TaxCode.TaxTableRel.TaxCode1)
											LocalTotalTaxableAmtIncrement		+= (TaxableAmount * -1)

									else
									if (TaxableAmount != DistributionAmount.CurrencyAmount)
										LocalTotalTaxableAmtIncrement		+= (TaxableAmount * -1)
								

								if (PayablesInvoice.TaxAmount entered
								and PayablesInvoice.TaxAmount = PayablesInvoice.TotalTaxAmount)
									LocalTaxAmtIncrement		+= (GLTransactionAmount * -1)

								if  (PayablesInvoice.TaxableAmount entered
								and  PayablesInvoice.TaxableAmount = PayablesInvoice.TotalTaxableAmount)
									LocalTaxableAmtIncrement	+= (TaxableAmount * -1)

						else
						if  (PayablesInvoice.MatchProcessType.Expense
						or   NotMatchCreated
						or   FromUnmatch)
							if (TaxIndicator not entered)
								if (FromUnmatch
								and IsAccruedTaxDistribution)
									LocalTaxAmtIncrement		+= (GLTransactionAmount * -1)
									LocalTotalTaxAmtIncrement	+= (GLTransactionAmount * -1)

								else











								if  (!PayablesInvoice.MatchProcessType.Expense)
									LocalTotalTaxAmtIncrement	+= (GLTransactionAmount * -1)	

							if (TaxIndicator.Taxable
							and PayablesInvoice.TaxCode entered)			
								if (PayablesInvoice.TaxableAmount entered)	
									LocalTotalTaxableAmtIncrement	+= (TaxableAmount * -1)
									LocalTaxableAmtIncrement		+= (TaxableAmount * -1)

							else	



								if  (PayablesInvoice.MatchProcessType.Expense			
								and !IsTaxDistribution									
								and  TaxIndicator.Taxable								
								and  TaxableAmount entered								
								and  PayablesInvoice.TaxableAmount entered				
								and  PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount not entered)	
									LocalTaxableAmtIncrement		+= (TaxableAmount * -1)						

									
							if (IsTaxDistribution	
							and PayablesInvoice.MatchProcessType.Expense
							and PayablesInvoice.TaxAmount entered
							and !VATReverse)						
								LocalTotalTaxAmtIncrement		+= (GLTransactionAmount * -1)	
								LocalTaxAmtIncrement			+= (GLTransactionAmount * -1)	


				else



					if (PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount not entered
					and PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount entered
					and PayablesInvoice.MatchProcessType.Expense
					and !IsTaxDistribution
					and (TaxIndicator.None
					or   TaxIndicator.Exclude
					or   TaxIndicator.Exempt))
						LocalTotalTaxableAmtIncrement	+= old DistributionAmount.CurrencyAmount
						LocalTotalTaxableAmtIncrement	-= DistributionAmount.CurrencyAmount
						LocalTaxableAmtIncrement		+= old DistributionAmount.CurrencyAmount
						LocalTaxableAmtIncrement		-= DistributionAmount.CurrencyAmount
						increment PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount by old DistributionAmount.CurrencyAmount
						decrement PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount by DistributionAmount.CurrencyAmount



						


					if (ActionType.UpdateType						
					and IsTaxDistribution							
					and (TransientTaxRoundAmt entered				
					or   DistributionAmount.CurrencyAmount changed))

						if (TransientTaxRoundAmt entered)			
							LocalTotalTaxAmtIncrement	= TransientTaxRoundAmt
							if  (PayablesInvoice.MatchProcessType.Expense)
								LocalTaxAmtIncrement	= TransientTaxRoundAmt

							initialize TransientTaxRoundAmt
						else										

							if (PayablesInvoice.TaxAmount = PayablesInvoice.TotalTaxAmount)
								LocalTotalTaxAmtIncrement	= DistributionAmount.CurrencyAmount - old DistributionAmount.CurrencyAmount	

								if (!PayablesInvoice.MatchProcessType.Expense
								and IsAccruedTaxDistribution
								and MatchCreated not entered
								and PayablesInvoice.IsNotMatched)
									NextSentence = true
								else
									LocalTaxAmtIncrement		= DistributionAmount.CurrencyAmount - old DistributionAmount.CurrencyAmount	

							else
								if (PayablesInvoice.TaxAmount entered
								or  PayablesInvoiceDetail entered)
									LocalTotalTaxAmtIncrement	= DistributionAmount.CurrencyAmount - old DistributionAmount.CurrencyAmount	

								else
									if (PayablesInvoice.TaxCode 	not entered)	
										if (!PayablesInvoice.MatchProcessType.Expense
										and IsAccruedTaxDistribution
										and MatchCreated not entered
										and PayablesInvoice.IsNotMatched)
											NextSentence = true
										else
											LocalTaxAmtIncrement		= DistributionAmount.CurrencyAmount


										LocalTotalTaxAmtIncrement	= DistributionAmount.CurrencyAmount - old DistributionAmount.CurrencyAmount







					if (ActionType.UpdateType																	
					and PayablesInvoice.MatchProcessType.Expense												
					and IsTaxDistribution																		
					and PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered						


					and PayablesInvoice.TaxAmount != PayablesInvoice.TotalTaxAmount)							
						LocalTaxAmtIncrement += (PayablesInvoice.TaxAmount * -1)								


						LocalTaxAmtIncrement += (PayablesInvoice.TotalTaxAmount + LocalTotalTaxAmtIncrement)	

						
						


					if (ActionType.UpdateType												
					and old TaxIndicator.None												
					and TaxIndicator.Taxable)												





						if (PayablesInvoice.TaxableAmount entered								
						and PayablesInvoice.TaxableAmount = PayablesInvoice.TotalTaxableAmount)	
							LocalTaxableAmtIncrement		-= old TaxableAmount 				
							LocalTotalTaxableAmtIncrement	-= old TaxableAmount				

							
						LocalTaxableAmtIncrement		+= TaxableAmount 					
						LocalTotalTaxableAmtIncrement	+= TaxableAmount					

						

			if (PayablesInvoice.TransientEnteredTaxAmount entered)	
				initialize LocalTaxAmtIncrement						








			if (LocalTotalTaxAmtIncrement 		entered
			or  LocalTotalTaxableAmtIncrement 	entered
			or  LocalTaxAmtIncrement 			entered
			or  LocalTaxableAmtIncrement 		entered)
				if  (PayablesInvoice.MatchProcessType.Expense)

					invoke UpdateTaxValues PayablesInvoice
						invoked.PrmTotalTaxAmtIncrement			= LocalTotalTaxAmtIncrement
						invoked.PrmTotalTaxableAmtIncrement		= LocalTotalTaxableAmtIncrement
						invoked.PrmTaxAmtIncrement				= LocalTaxAmtIncrement
						invoked.PrmTaxableAmtIncrement			= LocalTaxableAmtIncrement
					invoke UpdateTotalTaxValues PayablesInvoiceTaxHeaderRel				
						invoked.PrmTotalInvoicedTaxableAmount	= LocalTotalInvTaxableAmtIncrement
						invoked.PrmTotalAccruedTaxableAmount	= LocalTotalAccrTaxableAmtIncrement
						invoked.PrmTotalInvoicedTaxAmount		= LocalTotalInvTaxAmtIncrement
						invoked.PrmTotalAccruedTaxAmount		= LocalTotalAccrTaxAmtIncrement						
				else

					invoke UpdateTaxValues PayablesInvoice
						invoked.PrmTotalTaxAmtIncrement			= LocalTotalTaxAmtIncrement
						invoked.PrmTotalTaxableAmtIncrement		= LocalTotalTaxableAmtIncrement
						if (this instance.PayablesInvoice.TaxAmount not entered
						or  this instance.PayablesInvoice.DoOneSourceAfter
						or  this instance.PayablesInvoice.CallVertexByDocument
						or  MatchCreated entered)
							invoked.PrmTaxAmtIncrement				= LocalTaxAmtIncrement
						if (this instance.PayablesInvoice.TaxableAmount not entered
						or  this instance.PayablesInvoice.DoOneSourceAfter
						or  this instance.PayablesInvoice.CallVertexByDocument
						or  MatchCreated entered)
							invoked.PrmTaxableAmtIncrement			= LocalTaxableAmtIncrement
			







			if  (DoTaxTotalRefresh		
			and  PayablesInvoice.MatchProcessType.Expense
			and !PayablesInvoice.IsChargeback
			and PayablesInvoice.RefreshTotalTaxValid)				

				invoke RefreshTotalTax PayablesInvoice
				initialize DoTaxTotalRefresh















		UpdatePayablesInvoiceDistributionTaxTotalsNew			 





			initialize LocalTotalInvTaxableAmtIncrement
			initialize LocalTotalAccrTaxableAmtIncrement
			initialize LocalTotalInvTaxAmtIncrement
			initialize LocalTotalAccrTaxAmtIncrement
			if (!VATReverse)
				if (ActionType.CreateType)

					if (PayablesInvoice.TaxCode.TaxType.TaxTableCode)	
						if (IsTaxDistribution)

							if (TaxType.Invoiced)





								LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

							else	





								LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount


							if (!IsLinkedTaxDistribution)										  					



								if (((DerivedTaxMethodInvOrAcc.Invoiced 											
								and  TaxRate = 0)																	
								or  LocalTotalInvTaxAmtIncrement entered)						  					
								and PayablesInvoiceTaxHeaderRel.TotalInvoicedTaxableAmount not entered) 	
									LocalTotalInvTaxableAmtIncrement	= PayablesInvoice.TaxableAmount				
								if (((DerivedTaxMethodInvOrAcc.Accrued 												
								and  TaxRate = 0)																	
								or  LocalTotalAccrTaxAmtIncrement entered)											
								and PayablesInvoiceTaxHeaderRel.TotalAccruedTaxableAmount not entered) 	
									LocalTotalAccrTaxableAmtIncrement	= PayablesInvoice.TaxableAmount				


						else																	

							if (TaxCodeRel.TaxType.TaxTableCode)									
								if (any LinkedTaxDistributionsRel.TaxType.Invoiced)				
									LocalTotalInvTaxableAmtIncrement		+= TaxableAmount	

								if (any LinkedTaxDistributionsRel.TaxType.Accrued)				
									LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount	

							else	
								if (DerivedTaxMethodInvOrAcc.Invoiced)							
									LocalTotalInvTaxableAmtIncrement		+= TaxableAmount	

								else															
								if (DerivedTaxMethodInvOrAcc.Accrued)							
									LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount	

					else	



						if (IsLinkedTaxDistribution	
						or  HasLinkedTaxDistributions)
							if (IsLinkedTaxDistribution)
								LocalOriginalDistribution = OriginalDistribution
								if (LinkedExpenseDistributionsRel.TaxCode.TaxType.TaxTableCode)

									if (TaxType.Invoiced)
										LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

									else	
										LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

								else

									if (TaxType.Invoiced)


										LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

									else	


										LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

							else
								if (HasLinkedTaxDistributions)
									if (TaxCodeRel.TaxType.TaxTableCode)
										if (any LinkedTaxDistributionsRel.TaxType.Invoiced)
											LocalTotalInvTaxableAmtIncrement		+= TaxableAmount

										if (any LinkedTaxDistributionsRel.TaxType.Accrued)
											LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount

									else


										if ((PayablesInvoice.TaxEntityUsesInforTax					
										and  TaxType.Invoiced)
										or  (PayablesInvoice.TaxEntityUsesThirdPartyTax				
										and  PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced))	
											LocalTotalInvTaxableAmtIncrement		+= TaxableAmount

											if (IsTaxDistribution)		
												LocalTotalInvTaxAmtIncrement		+= DistributionAmount.CurrencyAmount		

										else	
											LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount

											if (IsTaxDistribution)		
												LocalTotalAccrTaxAmtIncrement		+= DistributionAmount.CurrencyAmount	

						else


							if (!DistributionType.ExpenseAccrual
							and  IsTaxDistribution)
								if (PayablesInvoice.TaxCode = TaxCode)

									if (TaxType.Invoiced)
										if (PayablesInvoice.TaxEntityUsesInforTax)	
											LocalTotalInvTaxableAmtIncrement	+= TaxableAmount

										LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

									else	
										if (PayablesInvoice.TaxEntityUsesInforTax)	
											LocalTotalAccrTaxableAmtIncrement	+= TaxableAmount

										LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

								else	

									if (TaxType.Invoiced)
										LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

									else	
										LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount


								if (!IsLinkedTaxDistribution										  					
								and !PayablesInvoice.TaxEntityUsesInforTax)		



									if (((DerivedTaxMethodInvOrAcc.Invoiced 											
									and  TaxRate = 0)																	
									or  LocalTotalInvTaxAmtIncrement entered)						  					
									and PayablesInvoiceTaxHeaderRel.TotalInvoicedTaxableAmount not entered) 	
										LocalTotalInvTaxableAmtIncrement	= PayablesInvoice.TaxableAmount				
									if (((DerivedTaxMethodInvOrAcc.Accrued 												
									and  TaxRate = 0)																	
									or  LocalTotalAccrTaxAmtIncrement entered)											
									and PayablesInvoiceTaxHeaderRel.TotalAccruedTaxableAmount not entered) 	
										LocalTotalAccrTaxableAmtIncrement	= PayablesInvoice.TaxableAmount				


							else

								if (IsTaxableExpenseDistribution)		


									if (PayablesInvoice.TaxCode entered)	
										if (PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)
											LocalTotalInvTaxableAmtIncrement		+= TaxableAmount

										else
											LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount

									else																
										if (DerivedTaxMethodInvOrAcc.Invoiced)							
											LocalTotalInvTaxableAmtIncrement		+= TaxableAmount	

										else															
											LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount	


				else	
					if (ActionType.UpdateType)

						if (PayablesInvoice.TaxCode.TaxType.TaxTableCode)	

							if (IsTaxDistribution)

								if (TaxType.Invoiced)







									LocalTotalInvTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

									LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

								else	







									LocalTotalAccrTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

									LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

							else																	



								if (TaxCodeRel.TaxType.TaxTableCode									
								or  old TaxCodeRel.TaxType.TaxTableCode)								
									constraint (!TaxCode changed)									
										"CannotChangeTaxTableOnLine.DeleteExpenseLineAndRe-add."	
									if (any LinkedTaxDistributionsRel.TaxType.Invoiced)				
										LocalTotalInvTaxableAmtIncrement	-= old TaxableAmount	
										LocalTotalInvTaxableAmtIncrement	+= TaxableAmount		

									if (any LinkedTaxDistributionsRel.TaxType.Accrued)				
										LocalTotalAccrTaxableAmtIncrement	-= old TaxableAmount	
										LocalTotalAccrTaxableAmtIncrement	+= TaxableAmount		

								else
									if (old DerivedTaxMethodInvOrAcc.Invoiced)
										LocalTotalInvTaxableAmtIncrement	-= old TaxableAmount	

									if (old DerivedTaxMethodInvOrAcc.Accrued)
										LocalTotalAccrTaxableAmtIncrement	-= old TaxableAmount	

									if (DerivedTaxMethodInvOrAcc.Invoiced)
										LocalTotalInvTaxableAmtIncrement	+= TaxableAmount		

									if (DerivedTaxMethodInvOrAcc.Accrued)
										LocalTotalAccrTaxableAmtIncrement	+= TaxableAmount		

						else	



							if (IsLinkedTaxDistribution	
							or  HasLinkedTaxDistributions
							or  TransientLinkedTaxTableCode > 0)	
								if (IsLinkedTaxDistribution)
									LocalOriginalDistribution = OriginalDistribution
									if (LinkedExpenseDistributionsRel.TaxCode.TaxType.TaxTableCode)

										if (TaxType.Invoiced)
											LocalTotalInvTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

										else	
											LocalTotalAccrTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

									else

										if (TaxType.Invoiced)




											LocalTotalInvTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

										else	




											LocalTotalAccrTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

								else
									if (HasLinkedTaxDistributions
									or  TransientLinkedTaxTableCode > 0)	
										if (TaxCodeRel.TaxType.TaxTableCode
										or  TransientLinkedTaxTableCode > 0)
											if (any LinkedTaxDistributionsRel.TaxType.Invoiced
											or  TransientLinkedTaxTableCode.Invoiced
											or  TransientLinkedTaxTableCode.Both)
												LocalTotalInvTaxableAmtIncrement		-= old TaxableAmount

												LocalTotalInvTaxableAmtIncrement		+= TaxableAmount

											if (any LinkedTaxDistributionsRel.TaxType.Accrued
											or  TransientLinkedTaxTableCode.Accrued
											or  TransientLinkedTaxTableCode.Both)
												LocalTotalAccrTaxableAmtIncrement		-= old TaxableAmount

												LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount

										else
											if (LinkedTaxDistributionsRel.VATReverse)
												if (DerivedTaxMethodInvOrAcc.Invoiced)
													LocalTotalInvTaxableAmtIncrement		-= old TaxableAmount

													LocalTotalInvTaxableAmtIncrement		+= TaxableAmount

													LocalTotalInvTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

													LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

												else	
													LocalTotalAccrTaxableAmtIncrement		-= old TaxableAmount

													LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount

													LocalTotalAccrTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

													LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

											else




												if (TaxIndicator changed
												and old TaxIndicator.None
												and TaxCode entered
												and old TaxCode entered)
													if (DerivedTaxMethodInvOrAcc.Invoiced)
														LocalTotalInvTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

														if (old TaxCode = PayablesInvoice.TaxCode)
															LocalTotalInvTaxableAmtIncrement	-= TaxableAmount

													else	
														LocalTotalAccrTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

														if (old TaxCode = PayablesInvoice.TaxCode)
															LocalTotalAccrTaxableAmtIncrement	-= TaxableAmount

												if (TaxableAmount changed)		
													if (DerivedTaxMethodInvOrAcc.Invoiced)
														LocalTotalInvTaxableAmtIncrement		-= old TaxableAmount
														LocalTotalInvTaxableAmtIncrement		+= TaxableAmount

													else
														LocalTotalAccrTaxableAmtIncrement		-= old TaxableAmount
														LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount

							else
								if (!DistributionType.ExpenseAccrual
								and  IsTaxDistribution)
									if (PayablesInvoice.TaxCode = TaxCode)

										if (TaxType.Invoiced)
											if (PayablesInvoice.TaxEntityUsesInforTax)	
												LocalTotalInvTaxableAmtIncrement	-= old TaxableAmount

												LocalTotalInvTaxableAmtIncrement	+= TaxableAmount

											LocalTotalInvTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

										else	
											if (PayablesInvoice.TaxEntityUsesInforTax)	
												LocalTotalAccrTaxableAmtIncrement	-= old TaxableAmount

												LocalTotalAccrTaxableAmtIncrement	+= TaxableAmount

											LocalTotalAccrTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

									else	

										if (TaxType.Invoiced)
											LocalTotalInvTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalInvTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

										else	
											LocalTotalAccrTaxAmtIncrement			-= old DistributionAmount.CurrencyAmount

											LocalTotalAccrTaxAmtIncrement			+= DistributionAmount.CurrencyAmount

								else	
									if (TaxIndicator.Taxable
									and TaxCode entered
									and TaxableAmount entered
									and DelayTaxProcessing)	
										if (PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)
											LocalTotalInvTaxableAmtIncrement		-= old TaxableAmount

											LocalTotalInvTaxableAmtIncrement		+= TaxableAmount

										else	
											LocalTotalAccrTaxableAmtIncrement		-= old TaxableAmount

											LocalTotalAccrTaxableAmtIncrement		+= TaxableAmount

					else	
						if (ActionType.DeleteType)

							if (PayablesInvoice.TaxCode.TaxType.TaxTableCode)	
								if (IsTaxDistribution)

									if (TaxType.Invoiced)
										LocalTotalInvTaxAmtIncrement			-= DistributionAmount.CurrencyAmount





									else	
										LocalTotalAccrTaxAmtIncrement			-= DistributionAmount.CurrencyAmount





								else																	

									if (TaxCodeRel.TaxType.TaxTableCode)									
										if (any LinkedTaxDistributionsRel.TaxType.Invoiced)				
											LocalTotalInvTaxableAmtIncrement		-= TaxableAmount	

										if (any LinkedTaxDistributionsRel.TaxType.Accrued)				
											LocalTotalAccrTaxableAmtIncrement		-= TaxableAmount	

									else	
										if (PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)			
											LocalTotalInvTaxableAmtIncrement		-= TaxableAmount	

										else															
											LocalTotalAccrTaxableAmtIncrement		-= TaxableAmount	

							else
								if (IsLinkedTaxDistribution	
								or  HasLinkedTaxDistributions)
									if (IsLinkedTaxDistribution)
										LocalOriginalDistribution = OriginalDistribution
										if (LinkedExpenseDistributionsRel.TaxCode.TaxType.TaxTableCode
										or  LinkedExpenseDistributionsRel.TransientLinkedTaxTableCode > 0)	

											if (TaxType.Invoiced)
												LocalTotalInvTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

											else	
												LocalTotalAccrTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

										else

											if (TaxType.Invoiced)


												LocalTotalInvTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

											else	


												LocalTotalAccrTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

									else
										if (HasLinkedTaxDistributions)
											if (TaxCodeRel.TaxType.TaxTableCode)
												if (any LinkedTaxDistributionsRel.TaxType.Invoiced)
													LocalTotalInvTaxableAmtIncrement		-= TaxableAmount

												if (any LinkedTaxDistributionsRel.TaxType.Accrued)
													LocalTotalAccrTaxableAmtIncrement		-= TaxableAmount

											else
												if (LinkedTaxDistributionsRel.VATReverse)
													if (PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)	
														LocalTotalInvTaxableAmtIncrement		-= TaxableAmount

														LocalTotalInvTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

													else	
														LocalTotalAccrTaxableAmtIncrement		-= TaxableAmount

														LocalTotalAccrTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

												else
													if (PayablesInvoice.TaxCode entered)	
														if (PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)	
															LocalTotalInvTaxableAmtIncrement		-= TaxableAmount

														else	
															LocalTotalAccrTaxableAmtIncrement		-= TaxableAmount

													else		
														if (DerivedTaxMethodInvOrAcc.Invoiced)
															LocalTotalInvTaxableAmtIncrement		-= TaxableAmount

														else	
															LocalTotalAccrTaxableAmtIncrement		-= TaxableAmount

								else
									if (!DistributionType.ExpenseAccrual
									and  IsTaxDistribution)
										if (PayablesInvoice.TaxCode = TaxCode)

											if (TaxType.Invoiced)
												if (!TaxEntityUsesVertex)	
													LocalTotalInvTaxableAmtIncrement	-= TaxableAmount

												LocalTotalInvTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

											else	
												if (!TaxEntityUsesVertex)	
													LocalTotalAccrTaxableAmtIncrement	-= TaxableAmount

												LocalTotalAccrTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

										else	

											if (TaxType.Invoiced)
												LocalTotalInvTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

											else	
												LocalTotalAccrTaxAmtIncrement			-= DistributionAmount.CurrencyAmount

									else	

										if (TaxIndicator.Taxable
										and !IsTaxDistribution)

											if (PayablesInvoice.TaxCode = TaxCode)

												if (PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)
													LocalTotalInvTaxableAmtIncrement		-= TaxableAmount

												else	
													LocalTotalAccrTaxableAmtIncrement		-= TaxableAmount







			if (!VATReverse			
			and LocalTotalInvTaxableAmtIncrement	entered
			or  LocalTotalAccrTaxableAmtIncrement	entered
			or  LocalTotalInvTaxAmtIncrement		entered
			or  LocalTotalAccrTaxAmtIncrement		entered)


				invoke UpdateTotalTaxValues PayablesInvoiceTaxHeaderRel
					invoked.PrmTotalInvoicedTaxableAmount	= LocalTotalInvTaxableAmtIncrement
					invoked.PrmTotalAccruedTaxableAmount	= LocalTotalAccrTaxableAmtIncrement
					invoked.PrmTotalInvoicedTaxAmount		= LocalTotalInvTaxAmtIncrement
					invoked.PrmTotalAccruedTaxAmount		= LocalTotalAccrTaxAmtIncrement

				invoke FastUpdate PayablesInvoice											
					invoked.TotalTaxAmount	= PayablesInvoice.DerivedTotalTaxAmountField	






	







		CreateTxTaxTrans



			if (DerivedTaxAccountingEntity != blank)									
				LocalTaxEntity				= DerivedTaxAccountingEntity				
			else

				LocalTaxEntity				= DistributionAccount.ToAccountingEntity	

			invoke Create TaxTransaction
				fill in fields from this instance
					except invoked.Status
					except invoked.TaxInterfaced
				invoked.TaxEntity				= LocalTaxEntity
				invoked.InvoiceCompany			= Company
				invoked.VendorCustomer			= Vendor
				invoked.Name					= Vendor.VendorSearchName
				invoked.TaxCode					= TaxCode
				invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				invoked.SystemCode				= "AP"
				invoked.TaxTransactionAccount	= LocalTaxTranAccount
				invoked.InvoiceDate				= PayablesInvoice.InvoiceDate
				if (PayablesInvoice.TaxPoint.Payment)
                    if (PayablesInvoice.first MultiplePayablesInvoicePaymentRel.CheckDate entered) 					
						invoked.TaxPointDate    = PayablesInvoice.first MultiplePayablesInvoicePaymentRel.CheckDate 
					else
						invoked.TaxPointDate	= PrmPostDate	
                else
                    if (PayablesInvoice.TransientTaxPointDate entered)						
						invoked.TaxPointDate    = PayablesInvoice.TransientTaxPointDate 
					else																								
						if (TaxCode.DerivedTaxPoint = "P"																
						and PayablesInvoice.first MultiplePayablesInvoicePaymentRel.CheckDate entered) 					
							invoked.TaxPointDate    = PayablesInvoice.first MultiplePayablesInvoicePaymentRel.CheckDate 
						else															
						if (TaxCode.DerivedTaxPoint = "I")								
							invoked.TaxPointDate	= PayablesInvoice.InvoiceDate		
						else															
							invoked.TaxPointDate	= PayablesInvoice.DistributionDate	
				invoked.PostDate				= PrmPostDate
				invoked.TaxID					= Vendor.TaxID
				invoked.TransactionTaxableAmount= TaxableAmount
				invoked.TransactionTaxAmount	= LocalTaxTranAmount 
				invoked.VoucherNumber			= PayablesInvoice.VoucherNumber
				invoked.AccruedOrInvoiced		= TaxType
				if (LocalPrepayCredit)		
					invoked.TransactionInvoiceAmount	= LocalTranInvAmount
				else
					invoked.TransactionInvoiceAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount
				invoked.TransactionCurrency			= PayablesInvoice.InvoiceCurrency
				invoked.BaseNumberOfDecimals		= BaseNumberOfDecimals
				invoked.TransactionNumberOfDecimals = NumberOfDecimals
				invoked.CurrencyRate				= DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				if (Vendor.VATRegistrationCountry	entered)
					invoked.VATRegistrationCountry		= Vendor.VATRegistrationCountry
					invoked.VATRegistrationNumber		= Vendor.VATRegistrationNumber
				else
				if (PayablesInvoice.PurchaseFromLocation.VATRegistrationCountry entered)
					invoked.VATRegistrationCountry		= PayablesInvoice.PurchaseFromLocation.VATRegistrationCountry
					invoked.VATRegistrationNumber		= PayablesInvoice.PurchaseFromLocation.VATRegistrationNumber
				else
					invoked.VATRegistrationCountry		= TaxEntityRel.VATRegistrationCountry
					invoked.VATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber
				invoked.TaxUsageCode				= TaxUsageCode
				invoked.TransactionSource			= "I"
				invoked.ManuallyEntered				= false
				if (PayablesInvoice.IsCreditInvoice)
					invoked.InvoicedOrCreditMemo	= "C"
				else
					invoked.InvoicedOrCreditMemo	= "I"
				
				if (LocalTaxTranAccount not entered)
					invoked.TaxTransactionAccount 	= DistributionAccount	
				invoked.TaxingJurisdiction			= PayablesTaxDetail.TaxingJurisdiction	
				if  (PayablesInvoiceDetail entered)
					invoked.CommodityCode			= PayablesInvoiceDetail.CommodityCode
				else
					invoked.CommodityCode			= ICNCode
				if (PayablesInvoiceTaxLinkedExpenseRel.TaxDetails.TaxTableOutput.AccrualCode entered)						
					invoked.ReturnedErpTaxCode	= PayablesInvoiceTaxLinkedExpenseRel.TaxDetails.TaxTableOutput.AccrualCode	

		LoadTaxDefaults
			if (TaxEntityUsesThirdPartyTax)								
				TaxType 	= PayablesInvoice.DerivedTaxMethodInvOrAcc	
			else														
				TaxType 	= DerivedTaxMethodInvOrAcc		
			TaxPoint 		= TaxCode.DerivedTaxPoint
			LocalTaxPoint 	= TaxCode.DerivedTaxPoint


		CalculateTaxAmount




			if (TaxSequenceNumber entered)
				if (!TaxEntityUsesThirdPartyTax)	
					TaxType = DerivedTaxMethodInvOrAcc		
				else
					TaxType = PayablesInvoice.DerivedTaxMethodInvOrAcc	

			else
				include LoadTaxDefaults
			
			if (TaxCodeRel.TaxType.CalculatedRate	
			and TaxType not entered)
				if  (InvoiceTaxEntityRel.UseTaxCodeAccounts)
					TaxType = EntityTaxCodeRel.AccruedOrInvoiced
				else
					TaxType = InvoiceTaxEntityRel.AccruedOrInvoiced
			 
			LocalTaxRate 			= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate 	 	
			LocalTaxCode 			= CalculateTax.TaxTable.TaxTableOutput[1].TaxCode		
			LocalTaxCodeAccount 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount


			if 	(DistributionAmount.CurrencyAmount not entered
			and  TaxIndicator.None)		
				if (TaxCodeRel.TaxType.CalculatedRate)								

					if (PayablesInvoice.TaxAmount entered						
					and PayablesInvoice.TaxableAmount entered)					
						LocalTaxRate	= ((PayablesInvoice.TaxAmount / PayablesInvoice.TaxableAmount) * 100)		
					if (LandedTaxAmount entered)								
						DistributionAmount.CurrencyAmount	= LandedTaxAmount	

				else
					DistributionAmount.CurrencyAmount 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount
				DistributionAmount.KeepRateOnly 	= true
				DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 










			if (TaxRate not entered
			and !TaxCodeRel.TaxType.CalculatedRate)		

				TaxRate = CalculateTax.OutputTaxRate		
			
			if (DistributionAccount not entered
			and CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount entered)
				DistributionAccount = CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
				GLFinanceCodeBlock 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount

			


			if  (IsTaxDistribution
			and !DoVATReverseCharge		
			and  TransientInvAccountingEntity != TransientDistAccountingEntity)

				initialize LocalTaxCodeAccount
				Idx = 1
				include DoTaxCodePostOption

				if (LocalTaxCodeAccount entered)
					DistributionAccount 	= LocalTaxCodeAccount
					GLFinanceCodeBlock	 	= LocalTaxCodeAccount

			else

				TransientInvAccountingEntity	= GeneralLedgerCompanyRel.AccountingEntity


				TransientDistAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity	

				LocalTaxEntity					= TransientDistAccountingEntity		









		DoTaxCodeProcessing		









			if (PayablesInvoice.InvoiceSource.IntercompanyBilling)
				CalculateTax	= TransientCalculateTax	

			
			if (TaxCodeRel.TaxType.CalculatedRate		
			and !ReverseFromCancel)
				constraint (PayablesInvoice.TaxAmount entered)
					"InvoiceTaxAmountRequiredWhenUsing_\Calculated_\RateTaxCode"

			initialize LocalTaxAmount
			initialize LocalDistributionAccount         
			initialize LocalTaxableAmount
			initialize LocalImposition			
			initialize LocalRunningTaxSum		
			initialize LocalRunningTaxableSum	
			
			LocalRunningTaxableSum 	= sum PayablesInvoice.TotalTran1TaxableDistributionRel.TaxableAmount				
			LocalRunningTaxSum 		= sum PayablesInvoice.TotalTaxableDistributionRel.DistributionAmount.CurrencyAmount	

			
			TransientSaveDistributionAcct	= DistributionAccount
			TransientInvAccountingEntity	= GeneralLedgerCompanyRel.AccountingEntity
			LocalTaxPoint 					= TaxCode.DerivedTaxPoint
			LocalDistributionAccount 		= DistributionAccount        
			LocalTaxableAmount          	= TaxableAmount
			
			if (TaxCodeRel.TaxType.TaxTableCode)					
				invoke FastUpdate PayablesInvoice				
					invoked.TransientBypassMemberEdit	= true	
			
			if (LinkedTaxDistributionsRel exists)
				invoke Delete LinkedTaxDistributionsRel




			if (DistributionAmount.CurrencyAmount not entered)	
				LocalTaxSeqNbr = 0
			else								
				LocalTaxSeqNbr = 1				
			Idx = 1 
			Idx2 = 2		

			while (Idx <= 8)





				if  (CalculateTax.TaxTable.TaxTableOutput[Idx].TaxCode entered
				and (!DoDetailTaxProcessing
				or  (DoDetailTaxProcessing
				and  DetailTaxDistributionCodeFooter.TaxAmount not entered)))		


					if (DoDetailTaxProcessing													
					and CalculateTax.TaxTable.TaxTableOutput[Idx].TaxAmount		not entered		
					and CalculateTax.TaxTable.TaxTableOutput[Idx].InTaxAmount	not entered		
					and CalculateTax.TaxTable.TaxTableOutput[Idx].TaxRate		not entered)	
						LocalContinue	= true													

					else																		



						if (TaxCodeRel.TaxType.CalculatedRate)		
							LocalTaxRate = (((CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount / PayablesInvoice.TaxableAmount) * PayablesInvoice.TaxAmount) / CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount)	

						else	
							LocalTaxRate 			= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxRate 	 	

						LocalTaxCode 			= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxCode		

						if (CalculateTax.TaxTable.TaxTableOutput[Idx].TaxPoint != "P")
							LocalTaxCodeAccount 	= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxInputAccount
						else
							LocalTaxCodeAccount 	= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxInputDueAccount		
						LocalImposition			= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[Idx].Imposition	
						if (DetailTaxDistributionCodeFooter.TaxAmount entered)				
							LocalTaxAmount		= DetailTaxDistributionCodeFooter.TaxAmount 

						else																



							if (TransientDistCodeTaxAmt entered)					
								LocalTaxAmount		= TransientDistCodeTaxAmt		
							else
								LocalTaxAmount		= LocalTaxRate * CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount	



						

						if (!PayablesInvoice.CreationSource.RNIP)		


							if (PayablesInvoice.UsePayablesTaxTolerance
							and DerivedTaxMethodInvOrAcc.Invoiced			
							and TransientDistCodeTaxAmt not entered)		
								include PopulateVerifyTaxToleranceValues
								LocalPayablesTaxTolerance = PayablesTaxTolerance.VerifyTaxWithinTolerance

								if (PayablesTaxTolerance.InTolerance)
									if (PayablesInvoice.TaxableAmount not entered)
										LocalHeaderTaxableAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount - PayablesInvoice.TaxAmount

									else
										LocalHeaderTaxableAmount	= PayablesInvoice.TaxableAmount


									if (PayablesInvoice.TaxEntityUsesInforTax	
									and !TaxCodeRel.TaxType.TaxTableCode)	
										LocalTaxRate = (((CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount / LocalHeaderTaxableAmount) * PayablesInvoice.TaxAmount) / CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount)
									LocalTaxAmount		= LocalTaxRate * CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount

								else
									if (DistributionCode not entered		
									and PayablesInvoice.TaxAmount entered)	
										confirmation required				
											"TaxChargedByVendorIsOutOfToleranceBasedOnLineTaxableAmount.ContinueWithTaxSystemDeterminedAmount?"
						else	
							if (PayablesInvoice.LocalPayablesTaxTolerance = "Y")	
								if (PayablesInvoice.TaxableAmount not entered)
									LocalHeaderTaxableAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount - PayablesInvoice.TaxAmount

								else
									LocalHeaderTaxableAmount	= PayablesInvoice.TaxableAmount


								if (PayablesInvoice.TaxEntityUsesInforTax	
								and !TaxCodeRel.TaxType.TaxTableCode)	



									LocalTaxRate = (((CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount / LocalHeaderTaxableAmount) * PayablesInvoice.TaxAmount) / CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount)
								LocalTaxAmount		= LocalTaxRate * CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount


						LandedTaxAmount			= LocalTaxAmount
						
						LocalRunningTaxSum 		+= LandedTaxAmount	
						











						if ((Idx = 8																
						or  (Idx < 8																
						and  Idx > 1																
						and  CalculateTax.TaxTable.TaxTableOutput[Idx2].TaxCode not entered))		
						and LocalRunningTaxSum != PayablesInvoice.TaxAmount							
						and LocalRunningTaxableSum = PayablesInvoice.TaxableAmount)					
							LocalTaxVariance = LocalRunningTaxSum - PayablesInvoice.TaxAmount		

							if (LocalTaxVariance <= .09
							and LocalTaxVariance >= -.09)
								if (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered)

									LandedTaxAmount += (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount - LocalRunningTaxSum)	
								else	

									LandedTaxAmount += (PayablesInvoiceTaxHeaderRel.TaxSystemTaxAmount - LocalRunningTaxSum)	
								LocalTaxAmount   = LandedTaxAmount										


						
						increment PayablesInvoice.TransientDetailTaxProcessing.DistribSum by LocalTaxAmount



						
						if (PayablesInvoice.CreationSource.RNIP			
						and PayablesInvoice.Company.DelayTaxProcessing)	
							LocalContinue = true						
						else
							include CreateTaxExitRules1
							include CreateTaxExitRules2		
						increment LocalTaxSeqNbr	
				Idx += 1
				if (Idx2 < 8)
					Idx2 += 1	



				









			if (DetailTaxDistributionCodeFooter.TaxAmount entered			
			and DoDetailTaxProcessing)										
				Idx = 8														
				while (Idx > 1)	


					if (CalculateTax.TaxTable.TaxTableOutput[Idx].TaxAmount		not entered		
					and CalculateTax.TaxTable.TaxTableOutput[Idx].InTaxAmount	not entered		
					and CalculateTax.TaxTable.TaxTableOutput[Idx].TaxRate		not entered)	
						LocalContinue	= true													

					else																		

						LocalImposition			= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[Idx].Imposition	
						LocalTaxRate 			= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxRate 	 	
						LocalTaxCode 			= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxCode		
						LocalTaxCodeAccount 	= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxInputAccount

						LocalTaxAmount			= LocalTaxRate * CalculateTax.TaxTable.TaxTableOutput[Idx].TaxableAmount	
						LandedTaxAmount			= LocalTaxAmount		

						DetailTaxDistributionCodeFooter.TaxAmount		-= LocalTaxAmount

						DetailTaxDistributionCodeFooter.DistribSum		+= LocalTaxAmount
						increment PayablesInvoice.TransientDetailTaxProcessing.DistribSum by LocalTaxAmount




						include CreateTaxExitRules1

						include CreateTaxExitRules2		
						increment LocalTaxSeqNbr	
					Idx -= 1

				LocalTaxRate 			= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate 	 	
				LocalTaxCode 			= CalculateTax.TaxTable.TaxTableOutput[1].TaxCode		
				LocalTaxCodeAccount 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
				LocalTaxAmount 			= DetailTaxDistributionCodeFooter.TaxAmount
				LandedTaxAmount			= LocalTaxAmount			
				DetailTaxDistributionCodeFooter.TaxAmount		-= LocalTaxAmount

				DetailTaxDistributionCodeFooter.DistribSum		+= LocalTaxAmount
				increment PayablesInvoice.TransientDetailTaxProcessing.DistribSum by LocalTaxAmount









				include CreateTaxExitRules1

				include CreateTaxExitRules2		




				

				

				if (PayablesInvoiceTaxHeaderRel.TaxMethod.Invoiced)		

					if (PayablesInvoice.TransientDetailTaxProcessing.DistribSum != PayablesInvoice.InvoiceAmount.CurrencyAmount)
						GLTransactionAmount	+= (PayablesInvoice.InvoiceAmount.CurrencyAmount - PayablesInvoice.TransientDetailTaxProcessing.DistribSum)
						include UpdatePersistentFields




	





			if (PayablesInvoice.TaxCode not entered
			and PayablesInvoice.TaxAmount not entered
			and PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered
			and PayablesInvoice.TransientDetailTaxProcessing.DistribSum entered)


				invoke UpdatePIT PayablesInvoice				
					invoked.Function 		= 2		
					invoked.PrmTaxMethod	= "A"	
					if (this instance.PayablesInvoice.InterfaceInProcess)		
						invoked.PrmCalcTaxAmt	= (PayablesInvoice.TransientDetailTaxProcessing.DistribSum)		
					else	
						invoked.PrmCalcTaxAmt	= (PayablesInvoiceTaxHeaderRel.TaxSystemTaxAmount + PayablesInvoice.TransientDetailTaxProcessing.DistribSum)







				

		DoTaxCodePostOption		




			if  (TaxCode entered

			and (PayablesInvoice.InvoiceType.Invoice
			or   PayablesInvoice.InvoiceType.CreditMemo
			or   PayablesInvoice.InvoiceType.DebitMemo))

				LocalTaxEntity	= TransientDistAccountingEntity	

				if (LocalTaxCode entered)																			
					TransientTaxCode	= LocalTaxCode	

				if (TaxEntityRel.UseTaxCodeAccounts)	
					if (EntityTaxCode2Rel.LandedCost) 
						LocalTaxCodeAccount		= TransientSaveDistributionAcct 

					else	
						if (EntityTaxCode2Rel.PostOption.DistributionAccountEntity)	
							if (EntityTaxCode2Rel.TaxPoint.PaymentDate)	
								LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputDueAccount	

							else	
								LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputAccount	

						else 

							LocalTaxEntity	= TransientInvAccountingEntity	
							if (TaxEntityRel.UseTaxCodeAccounts) 
								if (EntityTaxCode2Rel.LandedCost)	
									LocalTaxCodeAccount		= TransientSaveDistributionAcct	

								else	
									if (EntityTaxCode2Rel.PostOption.DistributionAccountEntity)	
										LocalTaxEntity	= TransientDistAccountingEntity	

										if (TaxEntityRel.UseTaxCodeAccounts) 
											if (EntityTaxCode2Rel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputAccount	

										else	
											if (TaxEntityRel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputAccount		

									else	
										if (EntityTaxCode2Rel.TaxPoint.PaymentDate)		
											LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputDueAccount	

										else	
											LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputAccount 	

							else	
								if (TaxEntityRel.LandedCost)	
									LocalTaxCodeAccount		= TransientSaveDistributionAcct	

								else	
									if (TaxEntityRel.PostOption.DistributionAccountEntity)	
										LocalTaxEntity	= TransientDistAccountingEntity	

										if (TaxEntityRel.UseTaxCodeAccounts) 
											if (EntityTaxCode2Rel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputAccount	

										else	
											if (TaxEntityRel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputAccount		

									else	
										if (TaxEntityRel.TaxPoint.PaymentDate)	
											LocalTaxCodeAccount	= TaxEntityRel.TaxInputDueAccount	

										else	
											LocalTaxCodeAccount	= TaxEntityRel.TaxInputAccount		

				else	

					if (TaxEntityRel.LandedCost) 
						LocalTaxCodeAccount		= TransientSaveDistributionAcct 

					else	
						if (TaxEntityRel.PostOption.DistributionAccountEntity)	
							if (TaxEntityRel.TaxPoint.PaymentDate)	
								LocalTaxCodeAccount	= TaxEntityRel.TaxInputDueAccount	

							else	
								LocalTaxCodeAccount	= TaxEntityRel.TaxInputAccount		

						else	
							LocalTaxEntity	= TransientInvAccountingEntity	

							if (TaxEntityRel.UseTaxCodeAccounts) 
								if (EntityTaxCode2Rel.LandedCost)	
									LocalTaxCodeAccount		= TransientSaveDistributionAcct	

								else	
									if (EntityTaxCode2Rel.PostOption.DistributionAccountEntity)	
										LocalTaxEntity	= TransientDistAccountingEntity	

										if (TaxEntityRel.UseTaxCodeAccounts) 
											if (EntityTaxCode2Rel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputAccount	

										else	
											if (TaxEntityRel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputAccount		

									else	
										if (EntityTaxCode2Rel.TaxPoint.PaymentDate)		
											LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputDueAccount	

										else	
											LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputAccount 	

							else	

								if (TaxEntityRel.LandedCost)	
									LocalTaxCodeAccount		= TransientSaveDistributionAcct	

								else	
									if (TaxEntityRel.PostOption.DistributionAccountEntity)	
										LocalTaxEntity	= TransientDistAccountingEntity	

										if (TaxEntityRel.UseTaxCodeAccounts) 
											if (EntityTaxCode2Rel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= EntityTaxCode2Rel.TaxInputAccount	

										else	
											if (TaxEntityRel.TaxPoint.PaymentDate)	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputDueAccount	

											else	
												LocalTaxCodeAccount	= TaxEntityRel.TaxInputAccount		

									else	
										if (TaxEntityRel.TaxPoint.PaymentDate)	
											LocalTaxCodeAccount	= TaxEntityRel.TaxInputDueAccount	

										else	
											LocalTaxCodeAccount	= TaxEntityRel.TaxInputAccount		



		CreateLandedTaxDistribution




			











			if (PayablesInvoice.InvoiceCurrency.NumberOfDecimals.Two	
			and PayablesInvoice.MatchProcessType.Expense
			and !DoVATReverseCharge)						



				LocalRoundingVariance = LocalTaxAmount											

				if (LocalRoundingVariance = LandedTaxAmount)			
					LocalInternalAmount = (LocalTaxAmount - LandedTaxAmount)


					increment PayablesInvoiceTaxHeaderRel.TaxDetails.TaxTableOutput.Variance by (LocalTaxAmount - LandedTaxAmount) 

					if (PayablesInvoiceTaxHeaderRel.TaxDetails.TaxTableOutput.Variance >= .005
					or  PayablesInvoiceTaxHeaderRel.TaxDetails.TaxTableOutput.Variance < -.005)	

						LocalRoundingVariance = PayablesInvoiceTaxHeaderRel.TaxDetails.TaxTableOutput.Variance	


						LandedTaxAmount		+= LocalRoundingVariance					


						decrement PayablesInvoiceTaxHeaderRel.TaxDetails.TaxTableOutput.Variance by LocalRoundingVariance	

					else
						NextSentence = true







			invoke Create PayablesInvoiceDistribution
				resume on error								
					LocalErrorMessage	= error message		



					if (!PayablesInvoice.InterfaceInProcess)			
						cancel resume					
				fill in user fields from this instance
				invoked.Company								= PayablesInvoiceDistribution.Company
				invoked.Vendor								= PayablesInvoiceDistribution.Vendor
				invoked.PayablesInvoice						= PayablesInvoiceDistribution.PayablesInvoice
				if (LocalOriginalDistribution entered)																	
					invoked.OriginalDistribution			= LocalOriginalDistribution									
				else																									
					invoked.OriginalDistribution			= PayablesInvoiceDistribution.PayablesInvoiceDistribution	

				invoked.TaxSequenceNumber					= LocalTaxSeqNbr	
				invoked.TaxCode								= LocalTaxCode				 	
				invoked.TaxType								= TaxTypeOverride		
				invoked.TaxIndicator						= 0			 
				invoked.Invoice								= Invoice
				invoked.Suffix								= Suffix
				invoked.CancelSequence  					= CancelSequence		 		

				invoked.TaxRate								= LocalTaxRate		
				invoked.LocalBypassRestrictedAccountEdit	= LocalBypassRestrictedAccountEdit	
				invoked.BypassActiveCodeBlockEdit			= true			



				if (initiating action = "ReverseDistributionForUpdate"						
				and LocalOriginalDistribution entered)										

					if (LandedTaxAmount > 0)	
						if (LinkedExpenseDistributionsRel.TaxableAmount >= 0)							
							invoked.TaxableAmount 	= LinkedExpenseDistributionsRel.TaxableAmount		
						else																			
							invoked.TaxableAmount 	= LinkedExpenseDistributionsRel.TaxableAmount * -1	
					else																				
					if (LandedTaxAmount < 0)															
						if (LinkedExpenseDistributionsRel.TaxableAmount <= 0)							
							invoked.TaxableAmount 	= LinkedExpenseDistributionsRel.TaxableAmount
						else																			
							invoked.TaxableAmount 	= LinkedExpenseDistributionsRel.TaxableAmount * -1	
					else
					if (LandedTaxAmount = 0)															
						invoked.TaxableAmount 	= LinkedExpenseDistributionsRel.TaxableAmount			
				else																		

					if (ReverseFromCancel											
					or (LandedTaxAmount < 0
					and TaxableAmount > 0))
						invoked.TaxableAmount					= TaxableAmount	* -1	
					else
						invoked.TaxableAmount					= TaxableAmount			

				invoked.DistributionAmount.CurrencyAmount	= LandedTaxAmount
				invoked.DistributionAmount.KeepRateOnly 	= true
				invoked.DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
				invoked.GLTransactionAmount					= LandedTaxAmount

				invoked.ProcessingLinkedTax					= true				
				if (IsHSNSACCodeEnabled)
					invoked.HSNSACCode						= HSNSACCode
				
				if  (!PayablesInvoice.MatchProcessType.Expense)
					invoked.PayablesInvoiceDetail			= PayablesInvoiceDetail
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.PurchaseOrderLine				= PurchaseOrderLine
					invoked.PurchasingContract				= PurchasingContract
					invoked.ContractLine					= ContractLine
					invoked.AddOnCharge						= AddOnCharge
					invoked.TaxableAmount					= DistributionAmount.CurrencyAmount
					invoked.TransientBypassErrorUpdate 		= true
					initialize invoked.TaxSequenceNumber

				if  (!PayablesInvoice.MatchProcessType.Expense
				and   Status != 0)
					invoked.TransientReleaseAfterCreate		= true

					if  (DelayTaxProcessing)			
						invoked.TransientBypassErrorUpdate 		= true




				TransientTaxCode 							= LocalTaxCode		



				invoked.VATReverse							=	TransientVATReverse	

				if (InvoiceTaxEntityRel.ThirdParty.Sabrix						
				and PayablesInvoice.Status.Amended										
				and LocalTaxCodeAccount entered)										
					invoked.DistributionAccount				= LocalTaxCodeAccount		
					invoked.GLFinanceCodeBlock				= LocalTaxCodeAccount		
				else
				if (IsLandedTaxCode)

					if (TransientReverseForUpdate)											
						invoked.DistributionAccount				= TransientRevTaxAccount	
						invoked.GLFinanceCodeBlock				= TransientRevTaxAccount	
					else
						invoked.DistributionAccount				= DistributionAccount	
						invoked.GLFinanceCodeBlock				= GLFinanceCodeBlock

				else
					if (LocalTaxCodeAccount entered											
					and !TransientReverseForUpdate)											

						invoked.DistributionAccount				= LocalTaxCodeAccount		
						invoked.GLFinanceCodeBlock				= LocalTaxCodeAccount		
					else
					if (TransientReverseForUpdate)											
						invoked.DistributionAccount				= LocalTaxCodeAccount		
						invoked.GLFinanceCodeBlock				= LocalTaxCodeAccount		
					else

						if (CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint != "P")											

							if (CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount entered)
								invoked.DistributionAccount				= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
								invoked.GLFinanceCodeBlock				= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
							else
								if (TaxEntityRel.UseTaxCodeAccounts)													

									invoked.DistributionAccount				= EntityTaxCodeRel.TaxInputAccount			
									invoked.GLFinanceCodeBlock				= EntityTaxCodeRel.TaxInputAccount			
								else

									invoked.DistributionAccount				= TaxEntityRel.TaxInputAccount
									invoked.GLFinanceCodeBlock				= TaxEntityRel.TaxInputAccount
						else																											

							if (CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount entered)										
								invoked.DistributionAccount				= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	
								invoked.GLFinanceCodeBlock				= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	
							else																										
								if (TaxEntityRel.UseTaxCodeAccounts)

									invoked.DistributionAccount				= EntityTaxCodeRel.TaxInputDueAccount						
									invoked.GLFinanceCodeBlock				= EntityTaxCodeRel.TaxInputDueAccount						
								else

									invoked.DistributionAccount				= TaxEntityRel.TaxInputDueAccount							
									invoked.GLFinanceCodeBlock				= TaxEntityRel.TaxInputDueAccount							



				if (IsLandedTaxCode															
				and !VATRecoverable.Yes)													

					if (AssetFlag entered)													
						invoked.AssetFlag = AssetFlag										

					else																	

						if (LocalAssetFlag entered)											
							invoked.AssetFlag = LocalAssetFlag								



					if (AssetFlag entered														
					or  LocalAssetFlag entered)													
						if (PayablesAssetDetail exists)											
							invoked.TransientAsset			= PayablesAssetDetail.Asset			
							invoked.TransientAssetTemplate 	= PayablesAssetDetail.AssetTemplate	
							invoked.TransientItemQuantity	= PayablesAssetDetail.ItemQuantity	
						else																	

							invoked.TransientAsset			= TransientAsset					
							invoked.TransientAssetTemplate 	= TransientAssetTemplate			
							invoked.TransientItemQuantity	= TransientItemQuantity				



				if (DoVATReverseCharge)							
					invoked.DoVATReverseCharge 				= DoVATReverseCharge	
					if (OriginalDistribution entered)
						invoked.OriginalDistribution		= OriginalDistribution
					invoked.TaxSequenceNumber				= TaxSequenceNumber + 1
					initialize LocalAccrualCode	
					LocalTaxEntity				= TaxAccountingEntity
					LocalPayablesCompany		= PayablesInvoice.Company
					if (!TaxEntityRel.UseTaxCodeAccounts)
						if (TaxEntityRel.AccrualCode entered)
							LocalAccrualCode	= TaxEntityRel.AccrualCode
					else
						if (EntityTaxCodeRel.AccrualCode entered)
							LocalAccrualCode	= EntityTaxCodeRel.AccrualCode
					if (LocalAccrualCode not entered)
						LocalAccrualCode		= PayablesInvoice.AccrualCode

					invoked.GLFinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.DistributionAccount					= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.TaxType								= "A"	
					invoked.DistributionAmount.CurrencyAmount	= LandedTaxAmount * -1
					invoked.GLTransactionAmount					= LandedTaxAmount * -1
					invoked.VATReverse							= true
					invoked.TaxCode								= TaxCode
					invoked.TaxableAmount						= TaxableAmount * -1		

				invoked.DistributionType					= "D"
				invoked.TransientCreatedFrom				= 2 		
				invoked.TransientInvAccountingEntity		= TransientInvAccountingEntity
				invoked.TransientDistAccountingEntity		= TransientDistAccountingEntity
				invoked.TransientSaveDistributionAcct		= TransientSaveDistributionAcct		
				invoked.TransientShipToLocation				= TransientShipToLocation			
				invoked.TransientAddressCode                = TransientAddressCode
				invoked.TransientTaxCode					= TransientTaxCode
				invoked.TransientLandedHeaderTaxCode		= TransientLandedHeaderTaxCode		
				invoked.TransientReverseForUpdate			= TransientReverseForUpdate		
				invoked.TransientZeroDistAmount				= TransientZeroDistAmount		
				invoked.BypassUnitAndAmountEdit 			= true							
				invoked.Imposition							= LocalImposition				

				invoked.BypassTaxCodeProcessing				= BypassTaxCodeProcessing		
				invoked.TransientTaxingJurisdiction			= TransientTaxingJurisdiction
				invoked.TransientInfoMessage				= TransientInfoMessage			
				invoked.TransientSentToTaxEngine			= TransientSentToTaxEngine		
				invoked.ProductTaxCategory					= ProductTaxCategory
				invoked.TaxUsageCode						= TaxUsageCode						
				invoked.DistributionCode					= PayablesInvoice.DistributionCode	
				if (Status.Historical)
					invoked.Status							= Status

				if (LocalDistribDate entered)
					invoked.DistributionDate				= LocalDistribDate	
					invoked.GLTPostingDate                  = LocalDistribDate	
				if (LocalStatus entered)
					invoked.Status							= LocalStatus		

				if (invoking action 	= "ReverseDistributionForUpdate"		
				or  initiating action 	= "ReverseDistributionForUpdate")		
					invoked.Status 	= 0		
				invoked.GLTJournalizeGroup					= GLTJournalizeGroup


				if (VATRecoverable.Yes)											
					invoked.VATProcessing			= VATProcessing.Bypass					
					if (VATReverseCharge.Yes)												
						invoked.VATReverseCharge	= VATReverseCharge.Processing			
						invoked.VATReverse			= true									
					if (IsForeignVAT																
					and TaxEntityForeignAccountsEntered)											
						invoked.DistributionAccount		= TaxEntityRel.ForeignRecoverableAccount	
						invoked.GLFinanceCodeBlock		= TaxEntityRel.ForeignRecoverableAccount	
					else																			
						invoked.DistributionAccount		= TaxEntityRel.RecoverableAccount			
						invoked.GLFinanceCodeBlock		= TaxEntityRel.RecoverableAccount			

					invoked.RecoverablePercent					= CalculateTax.RecoverablePercent		
					invoked.LandedTaxAmount						= CalculateTax.RecoverableAmount		
					invoked.GLTransactionAmount					= CalculateTax.RecoverableAmount		
					invoked.DistributionAmount.CurrencyAmount	= CalculateTax.RecoverableAmount		
					invoked.DistributionAmount.KeepRateOnly 	= true
					invoked.DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 


				else																		
					if (VATUnrecoverable.Yes)											
						invoked.VATProcessing			= VATProcessing.Bypass					
						if (VATReverseCharge.Yes)												
							invoked.VATReverseCharge	= VATReverseCharge.Processing			
							invoked.VATReverse			= true									
						invoked.LandedTaxAmount			= CalculateTax.UnrecoverableAmount		
						if (TaxEntityRel.LandNonRecoverable								
						and DistributionAccount entered)								
							invoked.DistributionAccount	= DistributionAccount			
							invoked.GLFinanceCodeBlock	= DistributionAccount			
						else
							if (IsForeignVAT																
							and TaxEntityForeignAccountsEntered)											


								invoked.DistributionAccount		= TaxEntityRel.ForeignNonRecoverableAccount	
								invoked.GLFinanceCodeBlock		= TaxEntityRel.ForeignNonRecoverableAccount	
							else																			


								invoked.DistributionAccount		= TaxEntityRel.NonRecoverableAccount	
								invoked.GLFinanceCodeBlock		= TaxEntityRel.NonRecoverableAccount	
						invoked.RecoverablePercent					= CalculateTax.RecoverablePercent		
						invoked.GLTransactionAmount					= CalculateTax.UnrecoverableAmount		
						invoked.DistributionAmount.CurrencyAmount	= CalculateTax.UnrecoverableAmount		
						invoked.DistributionAmount.KeepRateOnly 	= true
						invoked.DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 

						if (IsLandedTaxCode)
							invoked.DistributionAccount		= DistributionAccount	
							invoked.GLFinanceCodeBlock		= DistributionAccount	
			








		ProcessAddOnCharge				
			if  (((ActionType.CreateType
			and  AddOnCharge entered)
			or  (ActionType.UpdateType
			and  AddOnCharge changed))
			and  PayablesInvoice.DiscountCode.DiscountPoint.CostOfGoods
			and  GLTransactionAmount > 0
			and  PayablesInvoice.AllowableAmountForDiscount > (PayablesInvoice.InvoiceAmount.CurrencyAmount - GLTransactionAmount))
				if	(PayablesInvoice.MultiplePayablesInvoicePaymentRelExists)		
					DisplayProcessAddOnChargeMessage = true
				else		
				if  (PayablesInvoice.AllowableAmountForDiscount entered
				and  PayablesInvoice.AllowableAmountForDiscount > GLTransactionAmount)
					if (PayablesInvoice.Status.PendingApproval)		
						invoke PendingApproval.Update PayablesInvoice
							invoked.AllowableAmountForDiscount = PayablesInvoice.AllowableAmountForDiscount - GLTransactionAmount
					else
					if (PayablesInvoice.Status.Unreleased)		
						invoke Unreleased.Update PayablesInvoice
							invoked.AllowableAmountForDiscount = PayablesInvoice.AllowableAmountForDiscount - GLTransactionAmount
							    invoked.BypassInterfaceInProcessEdit = true 
							    invoked.BypassMatchInProgressEdit = true 


			if  ((ActionType.CreateType
			and  AddOnCharge entered
			and  TransientAOCAmount entered)
			or  (ActionType.UpdateType
			and  AddOnCharge changed
			and  TransientAOCAmount entered))						
				invoke CreateAddOnChargeDistribution PayablesInvoice
					invoked.PrmAddOnCharge		= AddOnCharge
					invoked.PrmAOCAmount		= TransientAOCAmount
					invoked.PrmLandedAccount	= DistributionAccount
				initialize AddOnCharge
				initialize TransientAOCAmount



		PopulateVerifyTaxToleranceValues				



			PayablesTaxTolerance.InvoiceTaxAmount			= LandedTaxAmount		
			PayablesTaxTolerance.CalculatedTaxAmount		= CalculateTax.OutputTotalTaxAmount
			PayablesTaxTolerance.TaxSystemTaxRate			= PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate		
			if (PayablesInvoice.TaxEntityUsesInforTax)		
				PayablesTaxTolerance.VendorChargedTaxRate		= (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount / PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount)	
			else
				PayablesTaxTolerance.VendorChargedTaxRate		= (PayablesInvoiceTaxRel.EnteredTaxAmount / PayablesInvoiceTaxRel.EnteredTaxableAmount)	

			
			if (IsUseTaxCodeAccounts)
				PayablesTaxTolerance.OverchargeLimitAmount	= EntityTaxCodeRel.TaxToleranceAmount
			else
				PayablesTaxTolerance.OverchargeLimitAmount	= TaxEntityRel.TaxToleranceAmount
			PayablesTaxTolerance.AllowZeroTaxOverride		= true
			

			if (Company.PayablesTaxTolerance)	
				PayablesTaxTolerance.OverchargeLimitAmount		= Company.TaxToleranceOverAmount
				PayablesTaxTolerance.UnderchargeLimitAmount		= Company.TaxToleranceUnderAmount
				PayablesTaxTolerance.OverchargeRatePercent		= Company.TaxToleranceOverRate		
				PayablesTaxTolerance.UnderchargeRatePercent		= Company.TaxToleranceUnderRate		
				


		FlipDistributionAmountFields	

			if (DistributionAmount.CurrencyAmount entered)
				if (DistributionAmount.CurrencyAmount > 0)
					include FlipDistributionAmountFieldsToPos
				else
					include FlipDistributionAmountFieldsToNeg	



		FlipDistributionAmountFieldsToPos	

			initialize LocalDoCurrency
			if (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount < 0)
				DistributionAmount.FunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.AlternateAmount.EnteredCurrencyAmount < 0)
				DistributionAmount.AlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount < 0)
				DistributionAmount.AlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount < 0)
				DistributionAmount.AlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount < 0)
				DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount < 0)
				DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount < 0)
				DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount < 0)
				DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ProjectAmount.EnteredCurrencyAmount < 0)
				DistributionAmount.ProjectAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount1.EnteredCurrencyAmount < 0)
				DistributionAmount.ReportAmount1.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount2.EnteredCurrencyAmount < 0)
				DistributionAmount.ReportAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount3.EnteredCurrencyAmount < 0)
				DistributionAmount.ReportAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount4.EnteredCurrencyAmount < 0)
				DistributionAmount.ReportAmount4.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount5.EnteredCurrencyAmount < 0)
				DistributionAmount.ReportAmount5.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (LocalDoCurrency)
				DistributionAmount.KeepRateOnly	= false
				initialize LocalDoCurrency




		FlipDistributionAmountFieldsToNeg	

			initialize LocalDoCurrency
			if (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
				DistributionAmount.FunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.AlternateAmount.EnteredCurrencyAmount > 0)
				DistributionAmount.AlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount > 0)
				DistributionAmount.AlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount > 0)
				DistributionAmount.AlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount > 0)
				DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount > 0)
				DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount > 0)
				DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount > 0)
				DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ProjectAmount.EnteredCurrencyAmount > 0)
				DistributionAmount.ProjectAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount1.EnteredCurrencyAmount > 0)
				DistributionAmount.ReportAmount1.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount2.EnteredCurrencyAmount > 0)
				DistributionAmount.ReportAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount3.EnteredCurrencyAmount > 0)
				DistributionAmount.ReportAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount4.EnteredCurrencyAmount > 0)
				DistributionAmount.ReportAmount4.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DistributionAmount.ReportAmount5.EnteredCurrencyAmount > 0)
				DistributionAmount.ReportAmount5.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (LocalDoCurrency)
				DistributionAmount.KeepRateOnly	= false
				initialize LocalDoCurrency




		PopulateCalcTaxInputFields					


			CalculateTax.RelatedObjectReference		= reference to this instance
			CalculateTax.CallingModule				= "Payables_Invoice_Distribution"
			CalculateTax.System						= "AP"
			CalculateTax.InputReference				= "CalculateTax:D001"
			CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup


			if (TaxAccountingEntity entered)
				CalculateTax.TaxEntity				= TaxAccountingEntity

			else	
				CalculateTax.TaxEntity				= GeneralLedgerCompanyRel.AccountingEntity

			LocalTaxEntity							= CalculateTax.TaxEntity	

			CalculateTax.VATRegistrationCountry    	= TaxEntityRel.VATRegistrationCountry 			
			CalculateTax.VATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber			

			CalculateTax.InvoiceCompany				= Company
			CalculateTax.VendorGrp					= Company.VendorGroup
			CalculateTax.ProcessLevel				= PayablesInvoice.ProcessLevel
			CalculateTax.Vendor						= PayablesInvoice.Vendor
			CalculateTax.VendorCustomerName			= PayablesInvoice.Vendor.VendorName
			CalculateTax.VoucherNumber				= PayablesInvoice.VoucherNumber
			CalculateTax.Invoice					= PayablesInvoice.Invoice
			CalculateTax.Suffix						= PayablesInvoice.Suffix
			CalculateTax.CancelSequence				= PayablesInvoice.CancelSequence
			CalculateTax.InvoiceAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
			if (TaxCode entered)	
				CalculateTax.TaxCode 	= TaxCode
			else	
				CalculateTax.TaxCode	= PayablesInvoice.TaxCode

			if (TaxableAmount entered)
				CalculateTax.TaxableAmount 			= TaxableAmount
			else
				CalculateTax.TaxableAmount 			= DistributionAmount.CurrencyAmount
			
			if (PayablesInvoice.IsCreditInvoice)			
				CalculateTax.InvoicedOrCreditMemo	= "C"	
			else											
				CalculateTax.InvoicedOrCreditMemo	= "I"	
						
			CalculateTax.TaxAmount					= blank 
			CalculateTax.ChargedTaxAmount			= blank
			CalculateTax.InvoiceDate				= PayablesInvoice.InvoiceDate
			CalculateTax.ShipmentDate				= PayablesInvoice.InvoiceDate
			CalculateTax.PaymentDate				= PayablesInvoice.InvoiceDate
			CalculateTax.TaxDate					= PayablesInvoice.InvoiceDate
			CalculateTax.TaxPointDate				= PayablesInvoiceTaxHeaderRel.TaxPointDate	
			CalculateTax.ProductTaxCategory			= DerivedProductTaxCategory		
			CalculateTax.TaxUsageCode				= TaxUsageCode
		   	CalculateTax.TransactionSource			= "I"	
			if (PayablesInvoiceDistribution.PayablesInvoiceDistribution entered)
				CalculateTax.LineNumber				= PayablesInvoiceDistribution.PayablesInvoiceDistribution
			else
				CalculateTax.LineNumber				= PayablesInvoice.LastDistribution + 1
			CalculateTax.DeliveryTerms          	= PayablesInvoice.ShipTerm
			CalculateTax.PointOfTitleTransfer		= TransientPointOfTitleTransfer			

			if (PayablesInvoice.ProcessLevel.TaxCode entered)	
				if (PayablesInvoice.RemitToCode.TaxCode entered)							
					CalculateTax.FromTaxCode		= PayablesInvoice.RemitToCode.TaxCode	
				else														
					CalculateTax.FromTaxCode		= Vendor.TaxCode		


			if (PayablesInvoice.RemitToCode.CurrentAddressRel exists	
			and PayablesInvoice.RemitToCode.VATRegistrationNumber entered)
				CalculateTax.FromPostalAddress			= PayablesInvoice.RemitToCode.VendorAddress
				CalculateTax.FromVATRegistrationCountry = PayablesInvoice.RemitToCode.VATRegistrationCountry			
				CalculateTax.FromVATRegistrationNumber	= PayablesInvoice.RemitToCode.VATRegistrationNumber				
			else
				CalculateTax.FromPostalAddress			= Vendor.VendorAddress		
				CalculateTax.FromVATRegistrationCountry = Vendor.VATRegistrationCountry					
				CalculateTax.FromVATRegistrationNumber	= Vendor.VATRegistrationNumber					

			if (PayablesInvoice.PurchaseFromLocation entered)
				CalculateTax.FromPostalAddress	= PayablesInvoice.PurchaseFromVendorLocAddressRel.VendorAddress 	


			if (PayablesInvoice.BillFromLocation entered)
				CalculateTax.POAAddress			= PayablesInvoice.BillFromLocation.VendorAddress	 	
			else
				CalculateTax.POAAddress			= Vendor.VendorAddress

			CalculateTax.DefaultFilingCurrency 			= Company.Currency 
			CalculateTax.CurrencyRate					= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		
			CalculateTax.TransactionCurrency 			= PayablesInvoice.InvoiceCurrency								

			if (ProcessLevel.PayGroup.BaseCurrency entered)
				CalculateTax.BaseCurrency				= ProcessLevel.PayGroup.BaseCurrency	
			else				
				if (PayablesInvoice.PayCurrency entered)
					CalculateTax.BaseCurrency 			= PayablesInvoice.PayCurrency					
				else	
					CalculateTax.BaseCurrency 			= PayablesInvoice.PayGroup.BaseCurrency
			

			if (PayablesInvoice.BillToProcessLevel.PostalAddress entered)									
				CalculateTax.BuyerAdminDestAddress		= PayablesInvoice.BillToProcessLevel.PostalAddress	
			else
				if (PayablesInvoice.ProcessLevel.PostalAddress entered)										
					CalculateTax.BuyerAdminDestAddress	= PayablesInvoice.ProcessLevel.PostalAddress		
				else
					CalculateTax.BuyerAdminDestAddress	= AccountingEntityRel.AddressCode.PostalAddress	
						

			if (PayablesTaxDetailRel.PayablesAddressCode entered)
     			CalculateTax.PostalAddress = PayablesTaxDetailRel.PayablesAddressCode.PostalAddress
				
			else
			if (PayablesTaxDetailRel.ShipToLocation entered)									
				CalculateTax.Location			= PayablesTaxDetailRel.ShipToLocation			
				CalculateTax.PostalAddress		= PayablesTaxDetailRel.ShipToLocation.PostalAddress	
			else																				
				if (PayablesInvoice.Location.PostalAddressForPurchaseOrder entered							
				and !PayablesInvoice.OneSourceGeneric)														
					CalculateTax.Location		= PayablesInvoice.Location									
					CalculateTax.PostalAddress	= PayablesInvoice.Location.PostalAddressForPurchaseOrder	
				else																						
					if (PayablesInvoice.Location.PostalAddress entered)								
						CalculateTax.Location		= PayablesInvoice.Location						
						CalculateTax.PostalAddress	= PayablesInvoice.Location.PostalAddress		
					else																			
						if (PayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.PostalAddress		= PayablesInvoice.ProcessLevel.PostalAddress			
						else
							CalculateTax.PostalAddress		= AccountingEntityRel.AddressCode.PostalAddress	
			
			CalculateTax.ReceiptSite					= PayablesInvoice.ProcessLevel			
			CalculateTax.UniqueIdOfRelatedObject		= UniqueID								
			if (CalculateTax.UniqueIdOfRelatedObject not entered)
				CalculateTax.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
			CalculateTax.SabrixUserElement				= UserElementGroup						
			CalculateTax.UserElementLevel				= "L"									

						
			if (PayablesInvoice.MatchProcessType.Expense
			and TaxEntityUsesVertex)
				CalculateTax.VertexQuantumOption		= "C"	

			include PopulateVertexFlexFields	








		PopulateVertexFlexFields		

			if (TaxEntityRel.ThirdParty.VertexOSeries)

				LocalVertexDistributionAccount    = first PayablesInvoiceDistributionRel.DistributionAccount

				if (PayablesInvoice.BillFromLocation entered)
					CalculateTax.POAAddress				= PayablesInvoice.BillFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress				= Vendor.VendorAddress

				CalculateTax.CostCenter                      		= LocalVertexDistributionAccount.AccountingUnit 
				CalculateTax.PostDate                          		= DistributionDate                    
				CalculateTax.GeneralLedgerAccount 					= LocalVertexDistributionAccount.GeneralLedgerChartAccount 
				CalculateTax.ChargedTaxAmount       				= PayablesInvoice.TaxAmount 	
				CalculateTax.TaxAmount                      		= PayablesInvoice.TaxAmount 		





				Idx = 0




				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

					if (each.Code entered            
					or  each.ExternalValue entered)
						Idx +=1   
						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
						if (each.ExternalValue.ValueIs.TaxEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerCompanyRel.AccountingEntity
						else    
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
						else    
						if (each.ExternalValue.ValueIs.Vendor)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
						else    
						if (each.ExternalValue.ValueIs.PostingDate)
							if (DistributionDate entered)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionDate
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceDate
						else    
						if (each.ExternalValue.ValueIs.TaxDate)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DerivedTaxPointDate
						else    
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity
						else    
						if (each.ExternalValue.ValueIs.AccountingUnit)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
						else    
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
						else    
						if (each.ExternalValue.ValueIs.Location)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation
						else    
						if (each.ExternalValue.ValueIs.Currency)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceCurrency
						else    
						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
						else    
						if (each.ExternalValue.ValueIs.ContractType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
						else    
						if (each.ExternalValue.ValueIs.WorkType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
						else    
						if (each.ExternalValue.ValueIs.AccountSubType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
						else    
						if (each.ExternalValue.ValueIs.ServiceType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
						else    
						if (each.ExternalValue.ValueIs.UNSPSC)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLineRel.UNSPSCCode.UNSPSCCodeDisplay
						else    
						if (each.ExternalValue.ValueIs.ProductTaxCatagory)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.TransientTaxCategory
						else    
						if (each.ExternalValue.ValueIs.Description) 		
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
						else 
						if (each.ExternalValue.ValueIs.PaymentDate)			
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DueDate 
						else 
						if (each.ExternalValue.ValueIs.PaymentAmount)		
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.TotalPaymentAmount.TransactionTotal
						else 
						if (each.ExternalValue.ValueIs.UsageType)			
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
						else 
						if (each.ExternalValue.ValueIs.CustomerType)			
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
						else 
						if (each.ExternalValue.ValueIs.Project)				
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
						else 
						if (each.ExternalValue.ValueIs.Longitude)				
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoLongitude
						else 
						if (each.ExternalValue.ValueIs.Latitude)			
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoLatitude
						else 
						if (each.ExternalValue.ValueIs.Altitude)									
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoAltitude
						else 
						if (each.ExternalValue.ValueIs.FinanceDimension1)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension2)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension3)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension4)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension5)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension6)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension7)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension8)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension9)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension10) 
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
						else    
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  









				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

					if (each.NumericValue entered            
					or  each.ExternalValue entered)
						Idx +=1   
						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
						else    
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
						else    
						if (each.ExternalValue.ValueIs.PaymentAmount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.TotalPaymentAmount.TransactionTotal
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
						else    
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  










				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

					if (each.DateValue entered            
					or  each.ExternalValue entered)
						Idx +=1   
						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
						if (each.ExternalValue.ValueIs.PostingDate)
							if (DistributionDate entered)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = DistributionDate
							else
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate
						else    
						if (each.ExternalValue.ValueIs.PaymentDate)
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DueDate 
						else    
						if (each.ExternalValue.ValueIs.TaxDate)
							if (PayablesInvoice.DerivedTaxPointDate entered)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
							else 
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
						else    
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  



				display "====================EndLoadVertexFlexField================="




		SetCalculateTaxFunction				


			if (TaxCodeRel.TaxType.TaxTableCode	
			or  PayablesInvoice.TransientBypassMemberEdit			
			or  LocalBypassMemberEdit)			
				CalculateTax.BypassMemberEdit				= true	
				if ((DistributionAmount.CurrencyAmount not entered 			
				or   TaxEntityUsesThirdPartyTax)		
				and CalculateTax.OutputTaxRate != 0		
				and TaxableAmount entered)  								
					DistributionAmount.CurrencyAmount  		= TaxableAmount	
					include FlipDistributionAmountFields
					CalculateTax.Function						= "C"			

					initialize CalculateTax.TaxAmount							
				else																				
					if (CalculateTax.TaxType.CalculatedRate				
					or  PayablesInvoice.TaxCode.TaxType.CalculatedRate	
					or  TaxCodeRel.TaxType.CalculatedRate)					
						CalculateTax.Function					= "R"	

					else												
					if (PayablesInvoice.TaxCode.TaxType.TaxTableCode)	
						CalculateTax.Function					= "C"	

					else												
						if (PayablesInvoice.UsePayablesTaxTolerance)									
							include PopulateVerifyTaxToleranceValues									
							LocalPayablesTaxTolerance = PayablesTaxTolerance.VerifyTaxWithinTolerance	

						else

							if  (HasTaxTolerance									
							and  PayablesInvoice.TaxAmount entered					
							and  !ReverseFromCancel									
							and  invoking action != "ProcessReversingTaxDistribution")	
								CalculateTax.Function					= "V"							

							else
								CalculateTax.Function					= "C"		

			else

				if ((PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered	
				and  PayablesInvoiceTaxHeaderRel.LinkedToDistributions			

				and  PayablesInvoice.DistributionCode entered)		
				or  CalculateTax.TaxTable.TaxTableOutput[1].TaxTerms.Taxafterterms	
				or  VATTax)													
					CalculateTax.Function						= "C"		

				else

					if (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount not entered	
					or  PayablesInvoice.UsePayablesTaxTolerance)									
						CalculateTax.Function						= "C"

					else

						if  (HasTaxTolerance									
						and  PayablesInvoice.TaxAmount entered					
						and  !ReverseFromCancel									
						and  invoking action	!= "ProcessReversingTaxDistribution")	
							CalculateTax.Function					= "V"

						else
							CalculateTax.Function					= "C"		



			if  (CalculateTax.Function.VerifyTax						
			and !TaxEntityUsesThirdPartyTax								
			and (TaxableAmount = DistributionAmount.CurrencyAmount		
			or   TaxableAmount = blank))								
				constraint (TaxIndicator.None							
				or			TaxIndicator.Exclude					
				or			TaxIndicator.Taxable)						
					"TaxCodeNotAllowedIfDistributionIsNotTaxOrTheExpenseIsNotTaxable"	






		ProcessTaxControl		















			if ((DistributionType.Distribution
			or   DistributionType.TaxReversalDistribution
			or 	 DistributionType not entered)
			and (PayablesInvoice.InvoiceType.Invoice
			or   PayablesInvoice.InvoiceType.CreditMemo
			or   PayablesInvoice.InvoiceType.DebitMemo
			or  (PayablesInvoice.InvoiceType.Prepayment							
			and  initiating action = "PayablesInvoice.PerformTaxReversal"))		

			and  !PayablesInvoice.DoTaxAfter	
			and  !InvoiceTaxEntityRel.ThirdParty.TaxEngine 

			and  !PayablesInvoice.InvoiceSource.IntercompanyBilling
			or  (DistributionAccount.ToAccountingEntity != GeneralLedgerCompanyRel.AccountingEntity
			and !TaxEntityUsesSabrix			
			and  TaxCode entered
			and  TaxSequenceNumber not entered))	

				include ProcessTaxInquire



				if (!PayablesInvoice.InvoiceSource.IntercompanyBilling)

					initialize ApinwsCalcTaxRateSwitch
					if (CalculateTax.TaxType	= "C")	
						ApinwsCalcTaxRateSwitch = true

					

					if (DistributionAccount not entered
					and PayablesInvoice.TransientDistCodeAccount entered)
						DistributionAccount = PayablesInvoice.TransientDistCodeAccount	


				if (TaxCodeRel.TaxType.TaxTableCode					
				and TaxIndicator.None)								
					if (!PayablesInvoice.InterfaceInProcess)		
						confirmation required						
							"<DerivedTaxIndicatorOverrideMsg>"		
							TaxIndicator	= TaxIndicator.Taxable	

					else											
						TaxIndicator	= TaxIndicator.Taxable		




				include ProcessTaxVerifyOrCalculate




				if (IsTaxDistribution)	
					include VATAccountProcessing1
					include VATAccountProcessing2







		ProcessTaxVerifyOrCalculate						







			if (TaxCode entered



			and !PayablesInvoice.DoTaxAfter		

			and !ApinwsCalcTaxRateSwitch
			and !PayablesInvoice.InvoiceSource.IntercompanyBilling
			and (PayablesInvoice.MatchProcessType.Expense
			or   PayablesInvoiceDetail not entered)
			and !PayablesInvoice.IsChargeback
			and !RecoverableImpositionType = "VAT")

				if (DistributionAmount.CurrencyAmount not entered
				or  TaxIndicator.Taxable)

					if (PayablesInvoice.TaxEntityUsesInforTax		
					and DistributionAmount.CurrencyAmount not entered
					and !TaxIndicator.Taxable		
					and CalculateTax.OutputTaxRate != 0		
					and TaxableAmount entered)
						TransientZeroDistAmount		= true		
						DistributionAmount.CurrencyAmount	= (TaxableAmount * CalculateTax.OutputTaxRate)		







						include FlipDistributionAmountFields
					CalculateTax.Function							= "C"
					initialize CalculateTax.TaxAmount
					initialize CalculateTax.InvoiceAmount


					include LoadVertexGlobalInputFields 														
					include DisplayCalculateTaxInput
					LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

					include DisplayCalculateTaxOutput
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>"


				else		
					if (!TaxIndicator.Exclude)		

						include SetCalculateTaxFunction



						CalculateTax.TaxCodeAccount						= DistributionAccount
						initialize CalculateTax.InvoiceAmount
						CalculateTax.TaxAmount							= DistributionAmount.CurrencyAmount
						if (action type.Update)
							CalculateTax.BypassEditingTaxCode	= false
							CalculateTax.BypassMemberEdit		= true		
						if (LocalBypassMemberEdit
						or  PayablesInvoice.TransientBypassMemberEdit)			
							CalculateTax.BypassMemberEdit		= true

						include LoadVertexGlobalInputFields					
						include DisplayCalculateTaxInput
						LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax


						include DisplayCalculateTaxOutput

						if  (!PayablesInvoice.AllowShortPay				
						and  !DelayTaxProcessing						

						and  TaxEntityUsesSabrix						
						and (CalculateTax.OutputErrorNumber = 202		
						or   CalculateTax.OutputErrorNumber = 203		
						or	 CalculateTax.OutputErrorNumber = 204		
						or	 CalculateTax.OutputErrorNumber = 205))	 	
							IsShortPay		= true						

						else

							if (!PayablesInvoice.UsePayablesTaxTolerance)	

								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>"



				include LoadVtxReturnedFieldsFromCalculateTax		


				include LoadFieldsReturnedFromCalculateTax










				if (PayablesInvoice.AllowShortPay				
				and IsTaxDistribution							
				and ((PayablesInvoice.TaxCode	not entered		
				and  PayablesInvoice.TaxAmount	not entered)  	
				or  (PayablesInvoice.TaxCode		entered		
				and  PayablesInvoice.TaxAmount	not entered)	
				or  (AccruedTaxDistributionRel 	exists)))		
					IsDistributionAccruedTax = true				




				if (ActionType.CreateType
				and LandedTaxAmount not entered)	

					if (PayablesInvoice.MatchProcessType.Expense 
					or  PayablesInvoiceDetail not entered)
						if (PayablesInvoice.ShortPayCommentExists							
						or  IsShortPay)														
							LandedTaxAmount				= CalculateTax.OutputTotalTaxAmount	


							if (!PayablesInvoice.ShortPayCommentExists						
							and  PayablesInvoice.TaxCode not entered)						
								DistributionAmount.CurrencyAmount	= LandedTaxAmount		

								invoke CreateShortPayCommentAction PayablesInvoice
								invoke FastUpdate PayablesInvoice
									invoked.InvoiceAmount.CurrencyAmount	= (PayablesInvoice.InvoiceAmount.CurrencyAmount - PayablesInvoice.TaxAmount)
									initialize invoked.TaxAmount
								invoke Update PayablesInvoice.first PayablesInvoicePaymentRel
									invoked.PaymentAmount.CurrencyAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount
									invoked.PaymentAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
									invoked.TransientCurrencyRefresh		= true


						else	


							if (PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered		
							and initiating action != "PayablesInvoiceImport.InterfaceInvoices"		
							and initiating action != "PayablesInvoiceDistributionImport.LoadInterfaceDistributions")	





								if (PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount entered)				
									LandedTaxAmount = ((DistributionAmount.CurrencyAmount / PayablesInvoiceTaxHeaderRel.EnteredTaxableAmount) * PayablesInvoiceTaxHeaderRel.EnteredTaxAmount)	

								else
								if (PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount entered)		
									LandedTaxAmount = ((DistributionAmount.CurrencyAmount / PayablesInvoiceTaxHeaderRel.TaxDetails.TaxableAmount) * PayablesInvoiceTaxHeaderRel.EnteredTaxAmount)	

								else																			
									if (PayablesInvoice.TaxType.Accrued)
										LandedTaxAmount = ((DistributionAmount.CurrencyAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount) * PayablesInvoiceTaxHeaderRel.EnteredTaxAmount)	

									else
										LandedTaxAmount = ((DistributionAmount.CurrencyAmount / (PayablesInvoice.InvoiceAmount.CurrencyAmount - PayablesInvoiceTaxHeaderRel.EnteredTaxAmount)) * PayablesInvoiceTaxHeaderRel.EnteredTaxAmount)	

							else

								if (TaxEntityUsesVertex											
								and CalculateTax.InputReturnVertexTaxIn.Detail)					
									DoDetailTaxProcessing	= true								

								else															



									if (!TaxCodeRel.TaxType.TaxTableCode)











										LocalTaxRate 		= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate						
										LocalTaxAmount		= LocalTaxRate * CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount	
										LandedTaxAmount		= LocalTaxAmount														

					else	
						LandedTaxAmount				= CalculateTax.OutputTotalTaxAmount




			if (!PayablesInvoice.InvoiceSource.IntercompanyBilling
			and IsTaxDistribution)		

				include LoadVtxReturnedFieldsFromCalculateTax	

				if (TaxableAmount not entered)
					if (CalculateTax.OutputTotalTaxable entered)	
						TaxableAmount	=	CalculateTax.OutputTotalTaxable

					else 

						if (PayablesInvoice.TaxableAmount entered
						and TaxCode entered
						and invoking action != "MassCancelDistribution"		
						and invoking action != "CancelDistribution")		
							TaxableAmount	= PayablesInvoice.TaxableAmount


				if (DistributionAmount.CurrencyAmount not entered)

					if (IsTaxDistribution)	
						if (!TaxCodeRel.TaxType.CalculatedRate)
							DistributionAmount.CurrencyAmount = CalculateTax.OutputTotalTaxAmount
							GLTransactionAmount 			  = CalculateTax.OutputTotalTaxAmount		

					else	
						DistributionAmount.CurrencyAmount = CalculateTax.OutputTotalTaxable			


					include FlipDistributionAmountFields



				if (PayablesInvoiceDetail not entered
				or  TaxRate not entered)

					if (TaxCode entered
					and !TaxCodeRel.TaxType.CalculatedRate
					and TaxSequenceNumber not entered	
					and !PayablesInvoice.InvoiceSource.IntercompanyBilling)

						if (DistributionAccount entered) 
							GLFinanceCodeBlock = DistributionAccount
						if (TaxRate not entered)	
							TaxRate = CalculateTax.OutputTaxRate










		ProcessTaxInquire




			initialize CalculateTax
			include InitializeVATFields
			include PopulateCalcTaxInputFields


			
			if (PayablesInvoice.TaxCode.TaxType.TaxTableCode	
			or  PayablesInvoice.TransientBypassMemberEdit		
			or  PayablesInvoice.VendorReturn entered)			
				CalculateTax.BypassMemberEdit 	= true			
				LocalBypassMemberEdit			= true			


			CalculateTax.Function		= "I"
			CalculateTax.TaxAmount		= blank						

			include LoadVertexGlobalInputFields


			include DisplayCalculateTaxInput
			LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
			include DisplayCalculateTaxOutput

			constraint (CalculateTax.OutputErrorNumber not entered)
				"<CalculateTax.OutputErrorMessage>"


			include LoadVtxReturnedFieldsFromCalculateTax


			if (TaxEntityUsesVertex											
			and CalculateTax.InputReturnVertexTaxIn.Detail)					
				DoDetailTaxProcessing	= true								









		PopulatePayablesAssetDetail

			if  (TransientItemQuantity entered)
				invoked.ItemQuantity			= TransientItemQuantity
			else
			if  (PayablesInvoiceDetail entered)
				if (AddOnCharge entered)
					invoked.ItemQuantity		= PayablesInvoiceDetail.MatchedQuantity
				else
				if (TaxCode entered)
					invoked.ItemQuantity		= PayablesInvoiceDetail.MatchedQuantity * (TaxableAmount / PayablesInvoiceDetail.TotalDistributionAmount) 
				else
					invoked.ItemQuantity		= PayablesInvoiceDetail.MatchedQuantity * (DistributionAmount.CurrencyAmount / PayablesInvoiceDetail.TotalDistributionAmount) 
			else
			if  (PurchaseOrderLine entered)
				if (AddOnCharge entered)
					invoked.ItemQuantity		= PurchaseOrderLine.Quantity
				else
				if (TaxCode entered)
					invoked.ItemQuantity		= PurchaseOrderLine.Quantity * (TaxableAmount / PurchaseOrderLine.ExtendedAmount) 
				else
					invoked.ItemQuantity		= PurchaseOrderLine.Quantity * (DistributionAmount.CurrencyAmount / PurchaseOrderLine.ExtendedAmount) 


			if (TransientAsset entered)
				invoked.Asset				= TransientAsset
				AssetFlag = AssetFlag.RepairAsset
			else
				if (TransientAssetTemplate entered)
					invoked.AssetTemplate 	= TransientAssetTemplate
					AssetFlag = AssetFlag.Asset
				else
					AssetFlag = blank

			if (TransientAssetDescription entered)
				invoked.AssetDescription 	= TransientAssetDescription
			else
				if (PayablesInvoiceDetail.ItemDescription entered)
					invoked.AssetDescription 	= PayablesInvoiceDetail.ItemDescription
				else	
					invoked.AssetDescription 	= PayablesInvoice.Description






			if (!PayablesInvoice.MatchProcessType.Expense
			and  TaxCode entered)

				invoked.ItemTaxTransaction		= DistributionAmount.CurrencyAmount
				invoked.ItemTaxBase				= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount

			invoked.TagNumber					= TransientTagNumber
			invoked.InServiceDate				= TransientInServiceDate
			invoked.PurchaseDate				= TransientPurchaseDate
			invoked.ModelNumber					= TransientModelNumber
			invoked.SerialNumber				= TransientSerialNumber
			invoked.HoldAsset					= TransientHoldAsset
			invoked.AssetGroup					= TransientAssetGroup
			invoked.Combine						= TransientCombine
			invoked.AssetAccountingUnitGroup	= TransientAccountingUnitGroup




		CreateUpdateRules



			if (GLFinanceCodeBlock !entered			
			and DistributionAccount	entered)
				GLFinanceCodeBlock	= DistributionAccount

			if (!ActionType.CreateType
			and !action type.Create)
				include UpdatePersistentFields	

			if (DistributionDate entered)
				ProjectPostingDate	= DistributionDate				
			else
				ProjectPostingDate	= PayablesInvoice.DistributionDate
			
			TransactionDate			= PayablesInvoice.InvoiceAmount.ExchangeDate 

			if (DistributionCode entered)
				if (DistributionCode.RequireAccountingUnit
				and DistributionAccount not entered
				and PayablesInvoice.TransientDistCodeAccount not entered)
					constraint (all DistributionCode.PayablesDistributionCodeDetail set.DistributionAccount entered)
						"MustSelectAnAccountToDefaultOnDistribution"       

			if  (DistributionCode !entered					
			and (DistributionType.Distribution
			or   DistributionType.TaxReversalDistribution))		
				if ((PayablesInvoice.TaxCode not entered
				or	 PayablesInvoice.TaxCode.TaxType.TaxTableCode)
				or (TaxCode entered
				and TaxCodeRel.TaxType.TaxTableCode))
					invoke FastUpdate PayablesInvoice
						invoked.TransientBypassMemberEdit	= true	
			


			if (PayablesInvoice.TaxableAmount entered)																		
				decrement PayablesInvoice.TransientEnteredTaxableAmount by PayablesInvoice.TransientEnteredTaxableAmount	
				increment PayablesInvoice.TransientEnteredTaxableAmount by PayablesInvoice.TaxableAmount					
				


			if (PayablesInvoice.Status.Amended)
				AdjustedDistribution	= true

			if (TaxCode not entered
			and DistributionCode not entered
			and (PayablesInvoice.InvoiceType.Invoice
			or   PayablesInvoice.InvoiceType.CreditMemo
			or   PayablesInvoice.InvoiceType.DebitMemo))
				if (DistributionAccount not entered							
				and AddOnCharge.PostingAccount entered)						
					DistributionAccount		= AddOnCharge.PostingAccount	
					GLFinanceCodeBlock 		= DistributionAccount
					if (PayablesInvoice.MatchProcessType.Expense	
					and AddOnCharge.Taxable)						
						TaxCode			= AddOnCharge.TaxCode		
						TaxIndicator	= 2 	
					if (TransientAOCAmount entered					
					and GLTransactionAmount not entered)			
						GLTransactionAmount	= TransientAOCAmount	
						include UpdatePersistentFields				
					initialize TransientAOCAmount					
				constraint (DistributionAccount entered)
					"AccountInformationRequiredForThisInvoiceType"         	










			if (TaxCode not entered

			and TaxIndicator.Taxable
			and PayablesInvoice.MatchProcessType.Expense
			and !PayablesInvoice.IsChargeback
			and (ActionType.CreateType
			or  (ActionType.UpdateType		
			and  CanUpdateTaxCode)))		
				if (TransientShipToLocation.PurchaseOrderTaxCode entered)	
					TaxCode = TransientShipToLocation.PurchaseOrderTaxCode	
				else
				if (PayablesTaxDetail.ShipToLocation.PurchaseOrderTaxCode entered)	
					TaxCode = PayablesTaxDetail.ShipToLocation.PurchaseOrderTaxCode	
				else
				if (PayablesInvoice.TaxCode entered)
					TaxCode	= PayablesInvoice.TaxCode		

			if (TaxCode entered
			and InvoiceTaxEntityRel.UseTaxCodeAccounts)
				constraint (EntityTaxCodeRel exists)
					"Entity_\Tax_\CodeDoesNotExistFor_\Tax_\Code<TaxCode>And_\Tax_\Entity<InvoiceTaxEntityRel.TaxEntity>"	

			if (TaxCode entered						
			and TaxIndicator.Taxable				
			and PayablesInvoice.RequireICNCode)		
				constraint (ICNCode entered)		
					"ICN_\CodeIsRequired"			

			if (ActionType.UpdateType
			and PayablesInvoice.MatchProcessType.Expense
			and TaxEntityUsesVertex
			and !DelayTaxProcessing
			and HasLinkedTaxDistributions)
				constraint (TaxableAmount not changed and TaxCode not changed and TransientShipToLocation not changed)		
					"CannotChangeTax-relatedAttributes;DeleteTheTaxableExpenseDistributionAndRe-add"



			if  (!PayablesInvoice.MatchProcessType.Expense
			and (PayablesInvoiceDetail entered
			or   MatchCreated entered
			or  (TaxCode = Company.TaxCode 
			and  initiating action = "ReverseDistributionForUpdate")
			or   DistributionType.ExpenseAccrual))
				NextSentence = true
			else
			if  (!TaxIndicator.Exclude				
			and  !TaxIndicator.Exempt				
			and   TaxCode entered)					

				include ProcessTaxControl			




			
			



			if (InvoiceTaxEntityRel.IntrastatUsed)		
				include CheckIfIntrastatRequired			

			if (MatchCreated entered
			and UnitAmount entered			
			and GLFinanceCodeBlock.GeneralLedgerChartAccount.AllowUnits.No)
				initialize UnitAmount


		
		
		
		

		UpdateRules

			if (AssetFlag entered)
				if (AssetDetailRel.Asset not entered
				and AssetDetailRel.AssetTemplate not entered)
					invoke Delete AssetDetailRel
				else
				if (AssetDetailRel.PayablesDistributionWithTax.Summary)
					if  ((PayablesInvoice.MatchProcessType.Expense
					and   TaxIndicator.Taxable)
					or   (!PayablesInvoice.MatchProcessType.Expense
					and    TaxCode entered))
						invoke Update AssetDetailRel
							invoked.ItemTaxTransaction 	+= (DistributionAmount.CurrencyAmount - old DistributionAmount.CurrencyAmount)
							invoked.ItemTaxBase 		+= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount - DistributionAmount.FunctionalAmount.EnteredCurrencyAmount)	



		CreateUpdateDeleteRules
			if (!ActionType.CreateType)		
				constraint (!IntransitDistribution.Yes)
					"CannotChangeOrDeleteIntransitDistributions"  	 
				constraint (!Status.Historical
				or           ICBAllowSelectDistributionSet) 
					"DistributionHasBeenPosted" 				 
				constraint (!PayablesInvoice.InvoiceSource.Lease)
					"CannotChangeOrDeleteDistribsCreatedIn_\Lease_\Mgmt."    
				constraint (PayablesInvoice.CancelSequence not entered)
					"ThisIsACanceledInvoice"			  

				if (!PayablesInvoice.MatchProcessType.Expense
				and AddOnCharge entered
				and !AddOnCharge.SpreadMethod.NoSpread
				and initiating action = "Update"
				and (DistributionAmount.CurrencyAmount changed 
				or   PurchaseOrderLine changed 
				or   PayablesInvoiceDetail changed) 
				and invoking action != "PayablesInvoiceAddOnCharge.FastUpdate"
				and !FromUnmatch
				and !PayablesInvoice.InterfaceInProcess 
				and !PayablesInvoice.Status.Amended
				and !TransientCurrencyRefresh)	
					constraint (PayablesInvoiceAddOnChargeRel.PayablesInvoiceSpreadAddOnChargeRel not exists)
						"CannotChangeOrDeleteASpreadAddOnChargeDistribution,MaintainViaAddOnChargesPanel"
					constraint (PurchaseOrderLine not changed) 
						"CannotChangeOrDeleteASpreadAddOnChargeDistribution,MaintainViaAddOnChargesPanel"

			if (!CreateFromBatchSwitch)
				if (!action type.Create)
					constraint (!PayablesInvoice.InvoiceSource.SubContractor)
						"CannotAdjust<PayablesInvoice.InvoiceSource>Distributions"   

			if (!CreateFromBatchSwitch)
				if ((ActionType.CreateType
				or   ActionType.UpdateType)
				and  !DistributionType.ExpenseAccrual
				and  !IsTaxDistribution)
					constraint ((!InvoiceType.Prepayment
					and  		 !InvoiceType.PrepaymentCredit)
					or         ((InvoiceType.Prepayment				
					or  		 InvoiceType.PrepaymentCredit)		
					and         !DistributionType.Distribution))	
						"CannotMaintainCreditDistributions"         	
			
			if (TaxCode entered
			and PayablesInvoice.TaxPoint != LocalTaxPoint
			and LocalTaxPoint entered)
				invoke FastUpdate PayablesInvoice
					invoked.PayablesInvoice.TaxPoint = LocalTaxPoint

			if ((DistributionType.ExpenseAccrual
			or  DistributionType.Payment)
			and !PayablesInvoice.IsRecurringInvoice
			and !TransientCurrencyRefresh)		
				constraint (ActionType.CreateType)
					"CannotChangeOrDeleteThisDistributionType"



		CreateUpdateDeleteExitRules

			if (ActionType.CreateType								
			and PayablesInvoice.MatchProcessType.Expense			
			and PayablesInvoice.IsPrepaymentType					
			and DistributionType.Distribution)						
				constraint (IsTaxDistribution)						
					"CannotAddExpenseDistributionsToAPrepayment"	
								
			if  (DistributionType.ExpenseAccrual
			or  DistributionType.Payment)
				if (initiating action = "PayablesInvoice.PurchaseOrderInvoiceCancel"
				or  FromUnmatch
				or  PayablesInvoice.InterfaceInProcess 
				or  TransientCurrencyRefresh)		
					NextSentence = true
				else
				if (!LocalPerformingCancel		
				and !Status.Unreleased) 			
					if (!PayablesInvoice.IsRecurringInvoice)		
						constraint (ActionType.CreateType)
							"CannotChangeOrDeleteThisDistributionType"

			if (ActionType.DeleteType)
				if (!PayablesInvoice.MatchProcessType.Expense
				and PurchaseOrderLine entered 
				and AddOnCharge entered
				and !AddOnCharge.SpreadMethod.NoSpread
				and initiating action = "Delete"
				and invoking action != "PayablesInvoiceAddOnCharge.FastUpdate"
				and !FromUnmatch
				and !PayablesInvoice.InterfaceInProcess 
				and !PayablesInvoice.Status.Amended
				and !TransientCurrencyRefresh)	
					constraint (PayablesInvoiceAddOnChargeRel.PayablesInvoiceSpreadAddOnChargeRel not exists)
						"CannotChangeOrDeleteASpreadAddOnChargeDistribution,MaintainViaAddOnChargesPanel"

				if (Retainage) 
					constraint (initiating action not = "Delete")
						"CannotDeleteARetainageDistribution"

			if  (TransientZeroDistAmount			
			and !IsTaxDistribution					
			and  TaxableAmount entered)				
				DistributionAmount.CurrencyAmount	= TaxableAmount
				DistributionAmount.KeepRateOnly 	= true
				DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate


			if (TransientTaxingJurisdiction entered)									
				LocalTaxingJurisdiction				= TransientTaxingJurisdiction		
				
			if (LocalTaxingJurisdiction entered)										
				invoke Update PayablesTaxDetailRel										
					invoked.TaxingJurisdiction		= LocalTaxingJurisdiction			

				
			if (LocalReturnedVertexTaxCode entered)										
				invoke Update PayablesTaxDetailRel										
					invoked.VertexTaxCode		= LocalReturnedVertexTaxCode			
			
			if (LocalSentToTaxEngine)
				invoke Update PayablesTaxDetailRel
					invoked.SentToTaxEngine		= LocalSentToTaxEngine
					
			if (LocalInformationMessage entered)
				invoke Update PayablesTaxDetailRel
					invoked.InformationMessage	= LocalInformationMessage
			
			if  (PayablesInvoice.MatchProcessType.Expense)							
				if (TransientShipToLocation entered									
				and TransientShipToLocation != PayablesTaxDetail.ShipToLocation)	
					invoke Update PayablesTaxDetailRel								
						invoked.ShipToLocation = TransientShipToLocation			
				else
				if (PayablesInvoice.Location entered
				and PayablesTaxDetail.ShipToLocation not entered)
					invoke Update PayablesTaxDetailRel
						invoked.ShipToLocation = PayablesInvoice.Location

				else
				if (TransientShipToLocation not entered and PayablesTaxDetail.ShipToLocation entered )
					invoke Update PayablesTaxDetailRel
						invoked.ShipToLocation = " "
				
				if (TransientAddressCode entered									
					and TransientAddressCode != PayablesTaxDetail.PayablesAddressCode)	
						invoke Update PayablesTaxDetailRel								
							invoked.PayablesAddressCode = TransientAddressCode
			
				else
				if (TransientAddressCode not entered and PayablesTaxDetail.PayablesAddressCode entered )
					invoke Update PayablesTaxDetailRel
						invoked.PayablesAddressCode = " "

			if (TaxCode entered											
			and TaxEntityUsesSabrix)
				if (TransientPointOfTitleTransfer entered)									
					invoke Update PayablesInvoiceTaxRel										
						invoked.PointOfTitleTransfer	= TransientPointOfTitleTransfer		
					
			if (invoking action = "PurchaseOrderLineDistribution.Update"
			and TransientAsset not entered
			and TransientAssetTemplate not entered
			and AssetDetailRel exists)
				invoke Delete AssetDetailRel
			else			
			if (AssetDetailRel exists
			and AssetFlag not entered)
				if  (IsTaxDistribution			
				and !IsLandedTaxDistribution)	
					NextSentence = true			
				else							
					if	(AssetDetailRel.AssetTemplate entered)
						AssetFlag = AssetFlag.Asset				
					else	
					if	(AssetDetailRel.Asset entered)
						AssetFlag = AssetFlag.RepairAsset
			else
				if  (IsTaxDistribution			
				and !IsLandedTaxDistribution)	
					NextSentence = true			
				else							
					if (TransientAsset entered
					or  TransientAssetTemplate entered)
					    if (AssetDetailRel not exists)
							invoke Create AssetDetailRel
								fill in fields from this instance
								include PopulatePayablesAssetDetail
						else
							invoke Update AssetDetailRel
								include PopulatePayablesAssetDetail
							


					if (PayablesAssetDetail exists)		
						for each LinkedTaxDistributionsRel													

							if (!each.VATRecoverable.Yes)													
								invoke Update each															
									invoked.TransientAsset			= PayablesAssetDetail.Asset				
									invoked.TransientAssetTemplate	= PayablesAssetDetail.AssetTemplate		
									invoked.TransientItemQuantity	= PayablesAssetDetail.ItemQuantity		




			if (PayablesInvoice.IsChargebackSubType)
				if (AssetFlag entered
				and Status.Released)
					if (AssetCompanyRel.PayablesDistributionWithTax.Summary)	
						if (IsExpenseDistribution)
							invoke CreateAssetInterface AssetDetailRel
					else
						if (IsExpenseDistribution
						or (IsLinkedTaxDistribution
						and IsLandedTaxDistribution))
							invoke CreateAssetInterface AssetDetailRel
					if (GLTransactionDetailRel.Status.Released)												
						invoke Released.UpdateReleasedGLTransDetailNoRules GLTransactionDetailRel			
							invoked.Capitalize	= 1	
					else 																					
						if (GLTransactionDetailRel.Status.Unreleased)										
							invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel	
								invoked.Capitalize	= 1	
				if (TaxCode entered
				and Status.Released)

					invoke 585BuildTxTaxTrans
			
			if  (RecurringJournalInterfaceIsValid)  
				include RecurringJournalInterface
				if (DistributionAmount.CurrencyAmount > 0)
					constraint (TotalJournalBridgeAmount <= DistributionAmount.CurrencyAmount) 
						"RecurringTransactionTotalOf<TotalJournalBridgeAmount>CannotBeGreaterThanDistributionAmountOf<DistributionAmount.CurrencyAmount>"
				else
					constraint (TotalJournalBridgeAmount >= DistributionAmount.CurrencyAmount) 
						"RecurringTransactionTotalOf<TotalJournalBridgeAmount>CannotBeGreaterThanDistributionAmountOf<DistributionAmount.CurrencyAmount>"

			if (PayablesInvoice.InvoiceSource.IntercompanyBilling)
				if (DistributionType.Distribution
				and !action type.Create
				and PayablesInvoice.IntercompanyBillingDocumentRel.AllowSelectDistributionSet
				and !(ContextSettlementIDForContext in context
				and   ContextSettlementDetailRel exists))
					if  (action type.Delete
					or  (action type.Update
					and (DistributionAccount changed
					or   DistributionAmount.CurrencyAmount changed)))
						for each PayablesFundApplyDistributionRel
            				constraint (each.PayablesInvoicePayment.IsVoidPayment) 
								"CannotModifyADistributionAfterItHasBeenSelectedInAReleased_\Intercompany_\Billing_\Settlement.ReverseTheSettlement,ThenTryAgain."
						constraint (FundAppliedAmount = 0) 
							"CannotModifyADistributionAfterItHasBeenSelectedForAn_\Intercompany_\Billing_\Settlement.IfTheSettlementIsUnreleased,ThenUnselectThePayablesDistributionsAndTryAgain."

			include AmortizationDetailsInterface		

			include ProcessAddOnCharge		
							



			if  (!DistributionType.ExpenseAccrual)
				if (invoking action 	!= "ProcessReversingTaxDistribution")		
					include UpdatePayablesInvoiceDistributionTotals

			if (!TransientBypassErrorUpdate
			and  DistributionAmount.CurrencyAmount entered
			and  !DistributionType.ExpenseAccrual
			and  !FromUnmatch)
				invoke UpdateErrorRecordsAction PayablesInvoice
			


			if  (action type.Create
			and  DistributionType.Distribution
			and  !IsTaxDistribution
			and (PayablesInvoice.Status.Unreleased
			or   PayablesInvoice.Status.PendingApproval)
			and  Company.GlobalWithholding
			and  Vendor.LineLevelWithholding)
				for each DefaultInvoiceWithholdingRel
					invoke Create PayablesInvoiceWithholding
						fill in fields from each
						invoked.Company							= Company
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.PayablesInvoiceDistribution		= PayablesInvoiceDistribution




				if (Status.Released)
					invoke UpdateReportableAmount PayablesInvoiceWithholdingRel
						invoked.PrmInvoiceAmount								= DistributionAmount.CurrencyAmount
						invoked.PrmTaxAmount									= sum LinkedTaxDistributionsRel.DistributionAmount.CurrencyAmount


					

		CreateTaxExitRules1






			if (DelayTaxProcessing				

			and TransientTaxingJurisdiction entered
			and PayablesTaxDetailRel.TaxingJurisdiction not entered)

				invoke Update PayablesTaxDetailRel
					invoked.TaxingJurisdiction	= TransientTaxingJurisdiction

				













			if (!IsTaxDistribution)
				include VATAccountProcessing1









		CreateTaxExitRules2






















			if (ActionType.CreateType
			and TaxCode entered
			and TaxIndicator.Taxable
			and !TransientReverseForUpdate		
			and !ReverseFromCancel				
			and (LandedTaxAmount entered
			or 	 TaxRate not entered			
			or   LocalTaxRate not entered		
			or   ApinwsCalcTaxRateSwitch)		
			and VATProcessing.Open				
			and TaxSequenceNumber not entered)	
				if (!TaxTableAndTaxable)		
					LocalTaxCode = TaxCode

				if (ApinwsCalcTaxRateSwitch			
				and LandedTaxAmount not entered		
				and TaxableAmount entered)			

					if (LocalTaxRate entered)		
						LandedTaxAmount		= TaxableAmount * LocalTaxRate	

					else
						if (PayablesInvoice.TaxableAmount entered)
							LandedTaxAmount		= (TaxableAmount * (PayablesInvoice.TaxAmount / PayablesInvoice.TaxableAmount))

						else


							LandedTaxAmount	= (TaxableAmount * (PayablesInvoice.TaxAmount / (PayablesInvoice.InvoiceAmount.CurrencyAmount - PayablesInvoice.TaxAmount)))



				include CreateLandedTaxDistribution




			else

				if (ActionType.CreateType				
				and PayablesInvoice.TaxCode entered
				and TaxCode = PayablesInvoice.TaxCode
				and PayablesInvoice.IsLandedTax		
				and TaxIndicator.Taxable
				and VATProcessing.Open				
				and !TransientReverseForUpdate		
				and !ReverseFromCancel)				
					TransientLandedHeaderTaxCode	= true
					if (!TaxTableAndTaxable)		
						LocalTaxCode = PayablesInvoice.TaxCode

					include CreateLandedTaxDistribution




				else



					if  (VATProcessing.Yes			
					and  VATRecoverable.Yes)		
						if (TaxCode entered)
							LocalTaxCode = TaxCode
						else
						if (PayablesInvoice.TaxCode entered)
							LocalTaxCode = PayablesInvoice.TaxCode

						include CreateLandedTaxDistribution		

						VATRecoverable	= VATRecoverable.Done	
						if (RecoverablePercent = 100%
						and VATReverseCharge.Processing)
							VATReverseCharge	= VATReverseCharge.Done
				
					

					if  (VATProcessing.Yes
					and  VATUnrecoverable.Yes)					
						if (TaxCode entered)
							LocalTaxCode = TaxCode
						else
						if (PayablesInvoice.TaxCode entered)
							LocalTaxCode = PayablesInvoice.TaxCode

						include CreateLandedTaxDistribution			

						VATUnrecoverable = VATUnrecoverable.Done	
						if ((RecoverablePercent = 0%
						and  VATReverseCharge.Processing)
						or   VATReverseCharge.Yes)
							VATReverseCharge	= VATReverseCharge.Done
			
			

					if (VATReverseIndicator						
					and IsTaxDistribution						
					and !TransientReverseForUpdate				
					and !DoVATReverseCharge)					
						DoVATReverseCharge 	= true				

						LandedTaxAmount = DistributionAmount.CurrencyAmount		

						include CreateLandedTaxDistribution		

						DoVATReverseCharge 	= false				









		VATAccountProcessing1













			if  (DoVertexVatProcessing									
			and !PayablesInvoice.InvoiceSource.IntercompanyBilling		
			and !DistributionType.ExpenseAccrual						
			and  VATProcessing.Open										
			and  VATRecoverable.No										
			and  VATUnrecoverable.No									
			and  VATReverseCharge.No)									

				if (RecoverableAmount entered)							
					VATRecoverable 	= VATRecoverable.Yes				
				else													
					VATRecoverable 	= VATRecoverable.Done				
				
				if (UnrecoverableAmount entered)						
					VATUnrecoverable 	= VATUnrecoverable.Yes			
				else													
					VATUnrecoverable 	= VATUnrecoverable.Done			
				
				if (IsReverseCharge)
					VATReverseCharge	= VATReverseCharge.Yes			
				else													
					VATReverseCharge	= VATReverseCharge.Done			
				
				if (VATRecoverable.Yes
				or  VATUnrecoverable.Yes)
					VATProcessing		= VATProcessing.Yes
				else
					VATProcessing		= VATProcessing.Bypass


			


				



		VATAccountProcessing2








			if (VATRecoverable.Yes)											
				VATProcessing			= VATProcessing.Bypass					
				if (VATReverseCharge.Yes)												
					VATReverseCharge	= VATReverseCharge.Processing			
					VATReverse			= true									
				if (IsForeignVAT																
				and TaxEntityForeignAccountsEntered)											
					DistributionAccount		= TaxEntityRel.ForeignRecoverableAccount	
					GLFinanceCodeBlock		= TaxEntityRel.ForeignRecoverableAccount	

				else																			
					DistributionAccount		= TaxEntityRel.RecoverableAccount			
					GLFinanceCodeBlock		= TaxEntityRel.RecoverableAccount			

				RecoverablePercent					= CalculateTax.RecoverablePercent		
				LandedTaxAmount						= CalculateTax.RecoverableAmount		
				GLTransactionAmount					= CalculateTax.RecoverableAmount		
				DistributionAmount.CurrencyAmount	= CalculateTax.RecoverableAmount		
				DistributionAmount.KeepRateOnly 	= true
				DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
				if (RecoverablePercent != 100%)
					TaxType								= "A"	

			else																		

				if (VATUnrecoverable.Yes)											
					VATProcessing			= VATProcessing.Bypass					
					if (VATReverseCharge.Yes)												
						VATReverseCharge	= VATReverseCharge.Processing			
						VATReverse			= true									
					LandedTaxAmount			= CalculateTax.UnrecoverableAmount		
					if (IsForeignVAT																
					and TaxEntityForeignAccountsEntered)											


						DistributionAccount		= TaxEntityRel.ForeignNonRecoverableAccount	
						GLFinanceCodeBlock		= TaxEntityRel.ForeignNonRecoverableAccount	

					else																			


						DistributionAccount		= TaxEntityRel.NonRecoverableAccount	
						GLFinanceCodeBlock		= TaxEntityRel.NonRecoverableAccount	

					RecoverablePercent					= CalculateTax.RecoverablePercent		
					GLTransactionAmount					= CalculateTax.UnrecoverableAmount		
					DistributionAmount.CurrencyAmount	= CalculateTax.UnrecoverableAmount		
					DistributionAmount.KeepRateOnly 	= true
					DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
					TaxType								= "A"	
					if (IsLandedTaxCode)
						DistributionAccount		= DistributionAccount	
						GLFinanceCodeBlock		= DistributionAccount	


			








	




		ReleaseActionEdits

			if (PayablesInvoice.BypassMatch
			and AddOnCharge entered)
				invoke UpdateFromMatch PurchaseOrderAndLineAddOnChargesRel
					invoked.MiscellaneousAddOnChargeInvoicedAmount	= DistributionAmount.CurrencyAmount
			
			if  (InvoiceTaxEntityRel.IntrastatUsed) 
				include CheckIfIntrastatRequired			 
				if  (DoIntrastatReporting					 
				and  DistributionType.Distribution 			 
				and  PurchaseOrderLine entered
				and !IsTaxDistribution
				and !BypassMatchAndServiceType)				 
					constraint (LineType entered)									
						"LineTypeRequiredForIntrastatInvoice"		



		UpdateLastUpdatedFields 
			LastUpdateDate	= current timestamp
			LastUpdateBy	= actor



		CreateTaxHistory






			if ((TaxCode entered
			and  TaxIndicator.None
			and (!TaxPoint.Payment
			or	 (TaxPoint.Payment				
			and  initiating action != "PayablesInvoice.CancelReleased"	
			and  initiating action != "PayablesInvoice.IDMCancelReleased"	
			and  !PayablesInvoice.InvoiceType.Prepayment		
			and  !PayablesInvoice.InvoiceType.PrepaymentCredit	
			and   IsLandedTaxDistribution)))	
			or	 (TaxPoint.Payment
			and   PayablesInvoice.InvoiceType.MatchPrepayment
			and   PayablesInvoice.PaidInvoice)
			or  (TaxCode entered		
			and  TaxIndicator.None
			and  TaxPoint.Payment
			and  initiating action = "PayablesInvoice.PerformTaxReversal"))	
				ProcessTaxHistory.HistoryType				= "O"
				ProcessTaxHistory.InTransactionId			= blank
				ProcessTaxHistory.InvoiceCompany			= PayablesInvoice.Company
				if (DerivedTaxAccountingEntity != blank)		
					ProcessTaxHistory.TaxEntity 			= DerivedTaxAccountingEntity	
				else

					ProcessTaxHistory.TaxEntity				= DistributionAccount.ToAccountingEntity		
				ProcessTaxHistory.TaxCode					= TaxCode
				ProcessTaxHistory.SystemCode				= "AP"
				ProcessTaxHistory.VendorCustomer			= Vendor
				ProcessTaxHistory.VendorOrCustomerName		= Vendor.VendorSearchName
				ProcessTaxHistory.TaxID						= Vendor.TaxID
				ProcessTaxHistory.Invoice					= PayablesInvoice.Invoice
				ProcessTaxHistory.Suffix					= PayablesInvoice.Suffix
				if (LocalCancelSequence entered)										
					ProcessTaxHistory.CancelSequence		= LocalCancelSequence		
				else																	
					ProcessTaxHistory.CancelSequence		= PayablesInvoice.CancelSequence	
				ProcessTaxHistory.TaxTransactionAccount 	= DistributionAccount	
				ProcessTaxHistory.ProcessLevel				= ProcessLevel
				ProcessTaxHistory.InvoiceDate 				= PayablesInvoice.InvoiceDate
				ProcessTaxHistory.TransactionInvoiceAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount	
				ProcessTaxHistory.TransactionTaxAmount		= DistributionAmount.CurrencyAmount				
				ProcessTaxHistory.TransactionTaxableAmount	= TaxableAmount
				ProcessTaxHistory.TransactionCurrency		= PayablesInvoice.InvoiceCurrency
				ProcessTaxHistory.TransactionNumberOfDecimals = NumberOfDecimals
				ProcessTaxHistory.BaseNumberOfDecimals		= BaseNumberOfDecimals
				ProcessTaxHistory.TaxRate					= TaxRate
				ProcessTaxHistory.AccruedOrInvoiced 		= TaxType
				ProcessTaxHistory.CommodityCode				= ICNCode
				if  (PayablesInvoiceDetail entered)
					ProcessTaxHistory.CommodityCode			= PayablesInvoiceDetail.DerivedCommodityCodeNoDash
					if (AddOnCharge entered)
						ProcessTaxHistory.Quantity 			= PayablesInvoiceAddOnChargeRel.EnteredQuantity 
						ProcessTaxHistory.Description		= AddOnCharge.Description                                    
						ProcessTaxHistory.ItemNumber		= AddOnCharge
						ProcessTaxHistory.UniqueLineNumber	= PayablesInvoiceAddOnChargeRel.UniqueID	
						ProcessTaxHistory.LineNumber		= PurchaseOrderLine
					else 
						ProcessTaxHistory.Quantity 			= PayablesInvoiceDetail.EnteredQuantity 
						ProcessTaxHistory.Description		= PayablesInvoiceDetail.ItemDescription                                    
						ProcessTaxHistory.ItemNumber		= PayablesInvoiceDetail.Item
						ProcessTaxHistory.LineNumber		= PayablesInvoiceDetail.PurchaseOrderLine
						ProcessTaxHistory.ProductClass 		= PurchaseOrderLine.Item.MajorPurchasingClass 
						ProcessTaxHistory.UniqueLineNumber	= PayablesInvoiceDetail.UniqueID

				if (TransientShipToLocation entered)											
					ProcessTaxHistory.Location 				= TransientShipToLocation			
				else
				if (PayablesTaxDetail.ShipToLocation entered)									
					ProcessTaxHistory.Location				= PayablesTaxDetail.ShipToLocation	
				else
					ProcessTaxHistory.Location 				= PayablesInvoice.Location 
				if  (PayablesInvoiceDetail entered)
					if (AddOnCharge entered
					and PayablesInvoiceAddOnChargeRel.Location entered)
						ProcessTaxHistory.Location 			= PayablesInvoiceAddOnChargeRel.Location 
					else 
					if (PayablesInvoiceDetail.Location entered)
						ProcessTaxHistory.Location 			= PayablesInvoiceDetail.Location 


				if (ApwsReverseFlag = "Y")
					ProcessTaxHistory.TransactionTaxableAmount    = TaxableAmount * -1
                    ProcessTaxHistory.TransactionTaxAmount        = DistributionAmount.CurrencyAmount * -1
                    ProcessTaxHistory.TransactionInvoiceAmount    = PayablesInvoice.InvoiceAmount.CurrencyAmount * -1    
                else
                    ProcessTaxHistory.TransactionInvoiceAmount    = PayablesInvoice.InvoiceAmount.CurrencyAmount                
                    ProcessTaxHistory.TransactionTaxableAmount    = TaxableAmount
                    ProcessTaxHistory.TransactionTaxAmount        = DistributionAmount.CurrencyAmount

				



				







				if (ApwsReverseFlag = "Y")
					ProcessTaxHistory.BaseInvoiceAmountGroup.TransactionAmount					= PayablesInvoice.InvoiceAmount.CurrencyAmount	* -1						
					ProcessTaxHistory.BaseInvoiceAmountGroup.BaseAmount.EnteredCurrencyAmount	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1	
					ProcessTaxHistory.BaseTaxableAmountGroup.TransactionAmount					= TaxableAmount	* -1														
					ProcessTaxHistory.BaseTaxableAmountGroup.BaseAmount.EnteredCurrencyAmount	= DerivedBasisBaseAmount * -1												
					ProcessTaxHistory.BaseTaxAmountGroup.TransactionAmount						= DistributionAmount.CurrencyAmount	* -1									
					ProcessTaxHistory.BaseTaxAmountGroup.BaseAmount.EnteredCurrencyAmount		= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	* -1			
				else
					ProcessTaxHistory.BaseInvoiceAmountGroup.TransactionAmount					= PayablesInvoice.InvoiceAmount.CurrencyAmount								
					ProcessTaxHistory.BaseInvoiceAmountGroup.BaseAmount.EnteredCurrencyAmount	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount		
					ProcessTaxHistory.BaseTaxableAmountGroup.TransactionAmount					= TaxableAmount																
					ProcessTaxHistory.BaseTaxableAmountGroup.BaseAmount.EnteredCurrencyAmount	= DerivedBasisBaseAmount													
					ProcessTaxHistory.BaseTaxAmountGroup.TransactionAmount						= DistributionAmount.CurrencyAmount											
					ProcessTaxHistory.BaseTaxAmountGroup.BaseAmount.EnteredCurrencyAmount		= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount					
				
				ProcessTaxHistory.BaseInvoiceAmountGroup.BaseAmount.ToCurrency					= Company.AccountingEntity.FunctionalCurrency				
				ProcessTaxHistory.BaseInvoiceAmountGroup.BaseAmount.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		

				ProcessTaxHistory.BaseTaxableAmountGroup.BaseAmount.ToCurrency					= Company.AccountingEntity.FunctionalCurrency				
				ProcessTaxHistory.BaseTaxableAmountGroup.BaseAmount.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		

				ProcessTaxHistory.BaseTaxAmountGroup.BaseAmount.ToCurrency						= Company.AccountingEntity.FunctionalCurrency				
				ProcessTaxHistory.BaseTaxAmountGroup.BaseAmount.EnteredCurrencyRate				= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		








				if (!PayablesInvoice.MatchProcessType.Expense
				and AddOnCharge entered
				and PayablesInvoiceAddOnChargeRel.Location entered)
					ProcessTaxHistory.ToAddress = PayablesInvoiceAddOnChargeRel.Location.PostalAddress
				else	
				if (!PayablesInvoice.MatchProcessType.Expense
				and PayablesInvoiceDetail entered
				and PayablesInvoiceDetail.Location entered)
				   	ProcessTaxHistory.ToAddress = PayablesInvoiceDetail.Location.PostalAddress
				else
				if (PayablesInvoice.MatchProcessType.Expense											
				and PayablesTaxDetail.ShipToLocation entered)											
					if (PayablesTaxDetail.ShipToLocation.PostalAddressForPurchaseOrder entered)			
						ProcessTaxHistory.ToAddress = PayablesTaxDetail.ShipToLocation.PostalAddressForPurchaseOrder	
					else																				
					if (PayablesTaxDetail.ShipToLocation.PostalAddress entered)							
						ProcessTaxHistory.ToAddress = PayablesTaxDetail.ShipToLocation.PostalAddress	
				else
				if (PayablesInvoice.Location entered)	
					ProcessTaxHistory.ToAddress					= PayablesInvoice.Location.PostalAddress		

				else	
					ProcessTaxHistory.ToAddress					= PayablesInvoice.ProcessLevel.PostalAddress	

				

				if  (PayablesInvoice.InvoiceSource.IntercompanyBilling	
				and (PayablesInvoice.TaxEntityUsesSabrix
				or	 PayablesInvoice.TaxEntityUsesVertex)
				and  PayablesInvoice.IntercompanyBillingDocumentByDateRel exists)
					
					if (PayablesInvoice.IntercompanyBillingDocumentByDateRel.ReceivableEntity.CustomerShipTo.ShipToAddress entered)
						ProcessTaxHistory.ToAddress	= PayablesInvoice.IntercompanyBillingDocumentByDateRel.ReceivableEntity.CustomerShipTo.ShipToAddress
					else
						ProcessTaxHistory.ToAddress	= PayablesInvoice.IntercompanyBillingDocumentByDateRel.ReceivableEntity.Customer.PostalAddress
					


				if (PayablesInvoice.BillToProcessLevel entered)	
					ProcessTaxHistory.BillToAddress				= PayablesInvoice.BillToProcessLevel.PostalAddress	

				else	
					ProcessTaxHistory.BillToAddress				= PayablesInvoice.ProcessLevel.PostalAddress		

					


				if (PayablesInvoice.PurchaseFromLocation entered)	
					ProcessTaxHistory.FromAddress		= PayablesInvoice.PurchaseFromVendorLocAddressRel.PostalAddress	

				else
					ProcessTaxHistory.FromAddress		= Vendor.CurrentAddressRel.PostalAddress						

					


				if (PayablesInvoice.PurchaseFromLocation entered)	
					ProcessTaxHistory.POAAddress		= PayablesInvoice.PurchaseFromVendorLocAddressRel.PostalAddress	

				else
					ProcessTaxHistory.POAAddress		= Vendor.CurrentAddressRel.PostalAddress						

					
				if (PayablesInvoiceTaxLinkedExpenseRel.TaxDetails.TaxTableOutput.AccrualCode entered)									
					ProcessTaxHistory.ReturnedErpTaxCode	= PayablesInvoiceTaxLinkedExpenseRel.TaxDetails.TaxTableOutput.AccrualCode	

				ProcessTaxHistory.TaxUsageCode					= TaxUsageCode
				if (TaxUsageCode = blank
				and PayablesInvoice.PurchaseFromLocation entered)
					ProcessTaxHistory.TaxUsageCode				= PayablesInvoice.PurchaseFromLocation.VendorLocation.TaxUsageCode				
				ProcessTaxHistory.CurrencyRate					= DistributionAmount.FunctionalAmount.EnteredCurrencyRate

				if (PayablesInvoice.InvoiceType = "C")	
					ProcessTaxHistory.InvoicedOrCreditMemo		= "C"
				else
					ProcessTaxHistory.InvoicedOrCreditMemo		= "I"	
				ProcessTaxHistory.TaxYear						= blank
				ProcessTaxHistory.TaxPeriod						= blank
				ProcessTaxHistory.VoucherNumber					= PayablesInvoice.VoucherNumber		
				
				if (ApwsCancelledFl = "Y")
					ProcessTaxHistory.PostDate					= PayablesInvoice.DistributionDate
				else
					ProcessTaxHistory.PostDate					= DistributionDate
				if (LocalReversalPostDate entered)
					ProcessTaxHistory.PostDate					= LocalReversalPostDate
					ProcessTaxHistory.TaxPointDate				= LocalReversalPostDate
				

				if (PayablesInvoiceTaxHeaderRel.TaxPointDate entered)	
					ProcessTaxHistory.TaxPointDate 				= PayablesInvoiceTaxHeaderRel.TaxPointDate
				else

					if (TaxPoint.GLPostDate)
						ProcessTaxHistory.TaxPointDate			= ProcessTaxHistory.PostDate
					else	

						if (TaxPoint.Payment																			
						and PayablesInvoice.last MultiplePayablesInvoicePaymentRel.CheckDate entered) 					
							ProcessTaxHistory.TaxPointDate    	= PayablesInvoice.last MultiplePayablesInvoicePaymentRel.CheckDate 	
						else	

							ProcessTaxHistory.TaxPointDate		= PayablesInvoice.InvoiceDate


				ProcessTaxHistory.TransactionNumberOfDecimals = NumberOfDecimals				
				ProcessTaxHistory.TransactionSource				= "I"
				ProcessTaxHistory.ProductTaxCategory 			= ProductTaxCategory				
				if (PayablesInvoice.HasMatchPurchaseOrders)
					ProcessTaxHistory.PointOfTitleTransfer		= PayablesInvoice.FirstPurchaseOrder.PointOfTitleTransfer
				else 
					ProcessTaxHistory.PointOfTitleTransfer		= DerivedPointOfTitleTransfer	
				ProcessTaxHistory.UniqueIdOfRelatedObject		= PayablesInvoice.UniqueID
				ProcessTaxHistory.TaxRate						= TaxRate
				ProcessTaxHistory.AccruedOrInvoiced				= TaxType

				if (Vendor.VATRegistrationCountry entered)
					ProcessTaxHistory.VATRegistrationCountry    = Vendor.VATRegistrationCountry
					ProcessTaxHistory.VATRegistrationNumber		= Vendor.VATRegistrationNumber
				else	
				if (PayablesInvoice.PurchaseFromLocation entered
				and PayablesInvoice.PurchaseFromLocation.VendorLocation.VATRegistrationCountry entered)
					ProcessTaxHistory.VATRegistrationCountry = PayablesInvoice.PurchaseFromLocation.VendorLocation.VATRegistrationCountry	
					ProcessTaxHistory.VATRegistrationNumber  = PayablesInvoice.PurchaseFromLocation.VendorLocation.VATRegistrationNumber

				ProcessTaxHistory.DeliveryTerms          		= PayablesInvoice.ShipTerm
				ProcessTaxHistory.DefaultFilingCurrency 		= Company.Currency 	
				if (PayablesInvoice.PayCurrency entered)
					ProcessTaxHistory.BaseCurrency 				= PayablesInvoice.PayCurrency					
				else	
					ProcessTaxHistory.BaseCurrency 				= PayablesInvoice.PayGroup.BaseCurrency
				ProcessTaxHistory.VATInputTaxAmount			    = VATInputTaxAmount	
				if (TaxType.Invoiced)
					if (ApwsReverseFlag = "Y"
					and DistributionAmount.CurrencyAmount > 0)
						ProcessTaxHistory.ChargedTaxAmount		= DistributionAmount.CurrencyAmount	* -1
					else 
						ProcessTaxHistory.ChargedTaxAmount		= DistributionAmount.CurrencyAmount	

				ProcessTaxHistory.RecoverableTaxAreaId		    = RecoverableTaxAreaId		
				ProcessTaxHistory.RecoverableJurisLevel 		= RecoverableJurisLevel 		
				ProcessTaxHistory.RecoverableImpositionType 	= RecoverableImpositionType 
				ProcessTaxHistory.RecoverablePercent  		    = RecoverablePercent  		
				ProcessTaxHistory.RecoverableAmount 			= RecoverableAmount 			
				ProcessTaxHistory.UnrecoverableAmount 			= UnrecoverableAmount 		
				ProcessTaxHistory.RecoverableDate  			    = RecoverableDate  			
				ProcessTaxHistory.BlockingOverridePercent  	    = BlockingOverridePercent  
				ProcessTaxHistory.PartialExemptRecvblOvrdPct 	= PartialExemptRecvblOvrdPct
				ProcessTaxHistory.TaxingJurisdiction			= DerivedTaxingJurisdiction	


				ProcessTaxHistory.VertexSimplificationCode 		= VertexSimplificationCode	
				ProcessTaxHistory.VertexVATType					= VertexVATType


				if (LocalTaxEntity not entered)	
					LocalTaxEntity	= TaxAccountingEntity	



				if (TaxEntityRel.ThirdParty.VertexOSeries)






					ProcessTaxHistory.CostCenter                      	= DistributionAccount.AccountingUnit 


					ProcessTaxHistory.PostDate                          = PayablesInvoice.DistributionDate                    
					ProcessTaxHistory.GeneralLedgerAccount 				= DistributionAccount.GeneralLedgerChartAccount 

					if (IsHSNSACCodeEnabled)
						ProcessTaxHistory.CommodityCodeType      		= "HSN"
						ProcessTaxHistory.HSNSACCode					= HSNSACCode 
					else 
						if  (AddOnCharge entered)
							if (AddOnCharge.UNSPSCCode entered)
								ProcessTaxHistory.CommodityCodeType     = "UNSPSC"
								ProcessTaxHistory.CommodityCode 		= AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay 
						else 
						if (PurchaseOrderLine entered)
							if (PurchaseOrderLine.UNSPSCCode entered)
								ProcessTaxHistory.CommodityCodeType      	= "UNSPSC"
								ProcessTaxHistory.UNSPSCCode				= PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay 
						else 
						if (ContractLine entered)
							if (ContractLine.UNSPSCCode entered)
								ProcessTaxHistory.CommodityCodeType      	= "UNSPSC"
								ProcessTaxHistory.UNSPSCCode				= ContractLine.UNSPSCCode.UNSPSCCodeDisplay 

					if (TaxAttributesRel.VertexFlexibleFieldExist)

						LocalInventoryLocation = PayablesInvoiceDetail.Location




						Idx = 0

						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

							if (each.Code entered            
							or  each.ExternalValue entered)
								Idx +=1   
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
								if (each.ExternalValue.ValueIs.TaxEntity)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerCompanyRel.AccountingEntity
								else    
								if (each.ExternalValue.ValueIs.Company)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
								else    
								if (each.ExternalValue.ValueIs.Vendor)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
								else    
								if (each.ExternalValue.ValueIs.PostingDate)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DistributionDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DerivedTaxPointDate
								else    
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.ToAccountingEntity 
								else    
								if (each.ExternalValue.ValueIs.AccountingUnit)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.AccountingUnit 
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.Location)
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.Location
									else
										if (TransientShipToLocation entered)
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation
										else
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location
								else    
								if (each.ExternalValue.ValueIs.Currency)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceCurrency
								else    



								if (each.ExternalValue.ValueIs.DiscountAmount)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.EnteredUnitCost
									else
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedUnitCost
								else    



								if (each.ExternalValue.ValueIs.ContractType)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else    
								if (each.ExternalValue.ValueIs.WorkType)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
								else    
								if (each.ExternalValue.ValueIs.AccountSubType)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.GeneralLedgerChartAccount.AccountSubType
								else    
								if (each.ExternalValue.ValueIs.ServiceType)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
								else    
								if (each.ExternalValue.ValueIs.CommodityCode)
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.DerivedCommodityCodeNoDash
									else
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ICNCode
								else    
								if (each.ExternalValue.ValueIs.UNSPSC)
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay
									else
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLineRel.UNSPSCCode.UNSPSCCodeDisplay
								else    
								if (each.ExternalValue.ValueIs.ProductTaxCatagory)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
								else    
								if (each.ExternalValue.ValueIs.TaxUsageCode)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxUsageCode
								else 
								if (each.ExternalValue.ValueIs.Description) 		
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
								else 
								if (each.ExternalValue.ValueIs.PaymentDate)			
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceDate
									else
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DueDate
								else 






								if (each.ExternalValue.ValueIs.PaymentAmount)		
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.TotalPaymentAmount.TransactionTotal	
								else 
								if (each.ExternalValue.ValueIs.UsageType)			
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
								else 
								if (each.ExternalValue.ValueIs.CustomerType)			
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else 
								if (each.ExternalValue.ValueIs.Project)				
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.Project
								else 
								if (each.ExternalValue.ValueIs.Longitude)				
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLongitude
									else
										if (TransientShipToLocation entered)
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoLongitude
										else
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoLongitude
								else 
								if (each.ExternalValue.ValueIs.Latitude)			
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLatitude
									else
										if (TransientShipToLocation entered)
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoLatitude
										else
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoLatitude
								else 
								if (each.ExternalValue.ValueIs.Altitude)									
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoAltitude
									else
										if (TransientShipToLocation entered)
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoAltitude
										else
											ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoAltitude
								else 
								if (each.ExternalValue.ValueIs.FinanceDimension1)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension1
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension2)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension2
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension3)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension3
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension4)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension4
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension5)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension5
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension6)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension6
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension7)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension7
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension8)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension8
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension9)
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension9
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension10) 
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionAccount.FinanceDimension10
								else    
									ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

							if (each.NumericValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
								if (each.ExternalValue.ValueIs.Company)
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = DistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.PaymentAmount)		
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.TotalPaymentAmount.TransactionTotal	
								else 
								if (each.ExternalValue.ValueIs.DiscountAmount)
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3 
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									if (!PayablesInvoice.MatchProcessType.Expense)
										ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoiceDetail.EnteredUnitCost
										ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
								else    
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

							if (each.DateValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
								if (each.ExternalValue.ValueIs.PostingDate)
									ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DistributionDate
								else    
								if (each.ExternalValue.ValueIs.PaymentDate)
									ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									if (PayablesInvoice.DerivedTaxPointDate entered)
										ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
									else 
										ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
								else    
									ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  






				if (TaxEntityRel.ThirdParty.Sabrix)
					ProcessTaxHistory.UserElementLevel 			= "L"

				ProcessTaxHistory.PayablesCompany = Company 	
				ProcessTaxHistory.PayablesInvoice = PayablesInvoice 
				ProcessTaxHistory.PayablesInvoiceDistribution = PayablesInvoiceDistribution 


				ProcessTaxHistory.TaxTransFunction			= "A"	
				LocalTaxHistoryProcessed					= ProcessTaxHistory.TaxHistoryProcessed	
				if (!LocalTaxHistoryProcessed = "Y")	//	Added "!" when removed 'else'
					constraint (ProcessTaxHistory.OutputErrorMessage not entered)
						"<ProcessTaxHistory.OutputErrorMessage>"	   	
		



				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CurrencyTable			!= PayablesInvoice.CompanySystemClosingControlRel.CurrencyTable)
					if (last TaxTransactionsVoucherRel.BaseInvoiceAmount 	!= ProcessTaxHistory.BaseInvoiceAmountGroup
					or  last TaxTransactionsVoucherRel.BaseTaxable 			!= ProcessTaxHistory.BaseTaxableAmountGroup
					or  last TaxTransactionsVoucherRel.BaseTaxAmount 		!= ProcessTaxHistory.BaseTaxAmountGroup)
						invoke FastUpdate last TaxTransactionsVoucherRel
							invoked.BaseInvoiceAmount	= ProcessTaxHistory.BaseInvoiceAmountGroup
							invoked.BaseTaxable			= ProcessTaxHistory.BaseTaxableAmountGroup
							invoked.BaseTaxAmount		= ProcessTaxHistory.BaseTaxAmountGroup






		InitializeDistributionAmount
			DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			initialize DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
			DistributionAmount.AlternateAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate			
			initialize DistributionAmount.AlternateAmount.EnteredCurrencyAmount
			DistributionAmount.AlternateAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
			initialize DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
			DistributionAmount.AlternateAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
			initialize DistributionAmount.AlternateAmount3.EnteredCurrencyAmount

			if (GLFinanceCodeBlock.ToAccountingEntity.FunctionalCurrency	= AccountingEntity.FunctionalCurrency)		
				DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			initialize DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount


			if (GLFinanceCodeBlock.ToAccountingEntity.AlternateCurrency	entered		
			and GLFinanceCodeBlock.ToAccountingEntity.AlternateCurrency	= AccountingEntity.AlternateCurrency)
				DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
			initialize DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount


			if (GLFinanceCodeBlock.ToAccountingEntity.AlternateCurrency2	entered		
			and GLFinanceCodeBlock.ToAccountingEntity.AlternateCurrency2	= AccountingEntity.AlternateCurrency2)
				DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
			initialize DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount


			if (GLFinanceCodeBlock.ToAccountingEntity.AlternateCurrency3	entered		
			and GLFinanceCodeBlock.ToAccountingEntity.AlternateCurrency3	= AccountingEntity.AlternateCurrency3)
				DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
			initialize DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
			DistributionAmount.ProjectAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ProjectAmount.EnteredCurrencyRate			
			initialize DistributionAmount.ProjectAmount.EnteredCurrencyAmount
			DistributionAmount.ReportAmount1.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate			
			initialize DistributionAmount.ReportAmount1.EnteredCurrencyAmount
			DistributionAmount.ReportAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate			
			initialize DistributionAmount.ReportAmount2.EnteredCurrencyAmount
			DistributionAmount.ReportAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate			
			initialize DistributionAmount.ReportAmount3.EnteredCurrencyAmount
			DistributionAmount.ReportAmount4.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate			
			initialize DistributionAmount.ReportAmount4.EnteredCurrencyAmount
			DistributionAmount.ReportAmount5.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate			
			initialize DistributionAmount.ReportAmount5.EnteredCurrencyAmount

		

		UpdatePersistentFields

			include SetAccountingEntityForContext	

			if (ActionType.UpdateType
			or  action type.Update)
				if (TaxCode changed)					
					initialize TaxType					
					TaxType = DerivedTaxMethodInvOrAcc	
				include InitializeDistributionAmount
				if (GLFinanceCodeBlock != DistributionAccount
				and IsTaxDistribution)
					constraint (IsAllowTaxAccountChanges)
						"TaxCodeDoesNotAllowAccountChangesOnTaxDistributions"
#ifdef module cam
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
				if (GLFinanceCodeBlock entered)
					LocalCustodialPosting	= GLFinanceCodeBlock.FinanceDimension10
					LocalAccountingEntity	= GLFinanceCodeBlock.AccountingEntity
				else
					LocalCustodialPosting	= DistributionAccount.FinanceDimension10
					LocalAccountingEntity	= DistributionAccount.AccountingEntity
				if (LocalCustodialPosting entered)
					constraint (CustodialDetailAmountRel exist)
						"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeSetupUnderCustodialAccounts"
					if (PayablesInvoice.Vendor != CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
						constraint (LocalCustodialPosting.Expendable)
							"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeExpendable"
#endif				



			if (TransientCurrencyRefresh)
				GLFinanceCodeBlock = DistributionAccount
			initialize TransientFinanceCurrencyAmt
			
			if (!DistributionType.ExpenseAccrual)		
				if (GLFinanceCodeBlock entered)
					DistributionAccount		= GLFinanceCodeBlock

				


				if (GLFinanceCodeBlock.ToAccountingEntity entered
				and TaxAccountingEntity not entered)	
					TaxAccountingEntity	=	GLFinanceCodeBlock.ToAccountingEntity

				
				if (TaxAccountingEntity not entered									
				and DistributionAccount.ToAccountingEntity entered)					
					TaxAccountingEntity	= DistributionAccount.ToAccountingEntity	





				if (DistributionAmount.ExchangeDate not entered)
					DistributionAmount.ExchangeDate 								= PayablesInvoice.InvoiceAmount.ExchangeDate 
					DistributionAmount.KeepRateOnly 								= true
					DistributionAmount.FunctionalAmount.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					if (DistributionAccount.ToAccountingEntity.FunctionalCurrency	= AccountingEntity.FunctionalCurrency)
						DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					if (PayablesInvoice.InvoiceAmount.AccountingEntity.AlternateCurrencyExists)
						if (PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate entered)
							DistributionAmount.AlternateAmount.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate		
							if (DistributionAccount.ToAccountingEntity.AlternateCurrency	= AccountingEntity.AlternateCurrency)
								DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
					if (PayablesInvoice.InvoiceAmount.AccountingEntity.AlternateCurrency2Exists)
						if (PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate entered)
							DistributionAmount.AlternateAmount2.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	
							if (DistributionAccount.ToAccountingEntity.AlternateCurrency2	= AccountingEntity.AlternateCurrency2)
								DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
					if (PayablesInvoice.InvoiceAmount.AccountingEntity.AlternateCurrency3Exists)
						if (PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate entered)
							DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	
						if (DistributionAccount.ToAccountingEntity.AlternateCurrency3	= AccountingEntity.AlternateCurrency3)
							DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
					if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
						if (PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate entered)
							DistributionAmount.ReportAmount1.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate		
					if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
						if (PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate entered)
							DistributionAmount.ReportAmount2.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate		
					if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
						if (PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate entered)
							DistributionAmount.ReportAmount3.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate		
					if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
						if (PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate entered)
							DistributionAmount.ReportAmount4.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate		
					if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
						if (PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate entered)
							DistributionAmount.ReportAmount5.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate		



				if (GLTransactionAmount entered
				and DistributionAmount.CurrencyAmount != GLTransactionAmount)
					DistributionAmount.CurrencyAmount  = GLTransactionAmount
					include FlipDistributionAmountFields
					if (ActionType.UpdateType
					or  action type.Update)	
						DistributionAmount.KeepRateOnly 	= true
						DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 






		LoadApdistribDefaults



			if (DistributionType.GainLossDistribution
			or  DistributionType.ExpenseAccrual)
				GLTKeepRateOnly = false
				GLBaseAmount = DistributionAmount
			else
				if (PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate entered)
					GLTKeepRateOnly = true
					GLBaseAmount = DistributionAmount
				else
					GLBaseAmount = DistributionAmount
					GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.AccountingEntity.AlternateCurrencyExists)
					if (PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.AccountingEntity.AlternateCurrency2Exists)
					if (PayablesInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.AccountingEntity.AlternateCurrency3Exists)
					if (PayablesInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOneEntered)
					if (PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyTwoEntered)
					if (PayablesInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyThreeEntered)
					if (PayablesInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFourEntered)
					if (PayablesInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
				if (PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFiveEntered)
					if (PayablesInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyRate entered)
						GLTKeepRateOnly = true
						GLBaseAmount = DistributionAmount
					else
						GLBaseAmount = DistributionAmount
						GLTKeepRateOnly = false
			



			if  (!PayablesInvoice.MatchProcessType.Expense)

				if (DistributionAccount.ToAccountingEntity	entered			
				and GLFinanceCodeBlock.ToAccountingEntity	!entered)
					GLFinanceCodeBlock 	= DistributionAccount
			else

				if (TaxCode entered)
					if (IsLinkedTaxDistribution
					or  IsNonLinkedDistribution)
						GLTransactionAmount = DistributionAmount.CurrencyAmount
						LocalCheckTaxAccountFields = GLFinanceCodeBlock
						if (DistributionAccount entered)
							GLFinanceCodeBlock 	= DistributionAccount
						if (LocalCheckTaxAccountFields.GeneralLedgerChartAccount entered)
							GLFinanceCodeBlock	= LocalCheckTaxAccountFields
						else	
							if (LocalTaxCodeAccount.GeneralLedgerChartAccount entered)
								GLFinanceCodeBlock	= LocalTaxCodeAccount
						

						if (TaxAccountingEntity not entered)
							TaxAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
			







			if (DistributionCode entered)
				if (GLTransactionAmount not entered)
					GLTransactionAmount = DistributionAmount.CurrencyAmount
				if (GLFinanceCodeBlock not entered)
					GLFinanceCodeBlock 	= DistributionAccount
				if (TaxAccountingEntity not entered)				
					TaxAccountingEntity	= DistributionAccount.ToAccountingEntity



			DistributionAccount = GLFinanceCodeBlock		
			
			

		DoProjectContractProcessing





			initialize LocalAPPaid
			if (DistributionAccount.Project entered
			and DistributionAccount.Project.Billable)
				initialize LocalReqAcUpdFl
				initialize LocalPostedFl
				initialize LocalInvPaidFl
				initialize LocalCanceledFl
				if (DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ExcludeAP)
					LocalCashBasis 		= true	
					ProjectUpdateStatus	= ProjectUpdateStatus.RequiresPaymentInformation	
					LocalAPPaid 		= "H"
				else
					LocalCashBasis 		= false	
					ProjectUpdateStatus = ProjectUpdateStatus.NoPaymentInformationImpact		

				if  (LocalCashBasis
				and  ProjectUpdateStatus.RequiresPaymentInformation		
				and  Status.Historical
				and (PayablesInvoice.AmountPaid 		entered
				or  (PayablesInvoice.AmountPaid 	not entered
				and  PayablesInvoice.InvoiceAmount.CurrencyAmount 	not entered)))
					LocalReqAcUpdFl = true
					LocalPostedFl	= true
					LocalInvPaidFl	= true
				else
				if (!LocalCashBasis
				and  ProjectUpdateStatus.RequiresPaymentInformation)	
					LocalReqAcUpdFl = false
					LocalPostedFl	= false		
					LocalInvPaidFl	= false		
				else
				if (LocalCashBasis
				and ProjectUpdateStatus.RequiresPaymentInformation		
				and CancelSequence entered)
					LocalCanceledFl	= true
					LocalReqAcUpdFl	= true
					LocalInvPaidFl	= false	//	S3 is moving "N" here
					LocalPostedFl	= false	







		CreateGLTransactionDetailProcessing		
			invoked.OriginatingTransaction 	= reference to this instance
			invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			invoked.System					= "AP"
			invoked.Reference				= DistributionReference 
			invoked.Description				= Description
			invoked.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
			if (InterfaceCreate)
				if (Status.Released)
					invoked.Status			= 1
			invoked.CurrencyCode			= InvoiceCurrency					 
			invoked.TransactionDate			= DistributionAmount.ExchangeDate		 
			if (GLTPostingDate entered)
				invoked.PostingDate			= GLTPostingDate
			else
				if (UseDistributionDate)
					invoked.PostingDate		= PayablesInvoice.DistributionDate	 
				else
					invoked.PostingDate		= DistributionAmount.ExchangeDate	 
			if (GLFinanceCodeBlock entered)
				invoked.FinanceCodeBlock	= GLFinanceCodeBlock
			else
				invoked.FinanceCodeBlock	= DistributionAccount
			if (TaxAccountingEntity entered)
				invoked.FinanceCodeBlock.ToAccountingEntity = TaxAccountingEntity	
			if (GLTransactionAmount entered)
				invoked.TransactionAmount	= GLTransactionAmount
				BypassUnitAndAmountEdit 	= false
			else
				if (DistributionAmount.CurrencyAmount entered)
					invoked.TransactionAmount	= DistributionAmount.CurrencyAmount
					BypassUnitAndAmountEdit = false
				else
					BypassUnitAndAmountEdit = true	
			invoked.ReportCurrencyAmount.FunctionalAmount 	= DistributionAmount.FunctionalAmount
			invoked.ReportCurrencyAmount.AlternateAmount 	= DistributionAmount.AlternateAmount
			invoked.ReportCurrencyAmount.AlternateAmount2 	= DistributionAmount.AlternateAmount2
			invoked.ReportCurrencyAmount.AlternateAmount3 	= DistributionAmount.AlternateAmount3
			invoked.ReportCurrencyAmount.ToFunctionalAmount = DistributionAmount.ToFunctionalAmount
			invoked.ReportCurrencyAmount.ToAlternateAmount 	= DistributionAmount.ToAlternateAmount
			invoked.ReportCurrencyAmount.ToAlternateAmount2 = DistributionAmount.ToAlternateAmount2
			invoked.ReportCurrencyAmount.ToAlternateAmount3 = DistributionAmount.ToAlternateAmount3
			invoked.ReportCurrencyAmount.ProjectAmount 		= DistributionAmount.ProjectAmount
			invoked.ReportCurrencyAmount.ReportAmount1 		= DistributionAmount.ReportAmount1
			invoked.ReportCurrencyAmount.ReportAmount2 		= DistributionAmount.ReportAmount2
			invoked.ReportCurrencyAmount.ReportAmount3 		= DistributionAmount.ReportAmount3
			invoked.ReportCurrencyAmount.ReportAmount4 		= DistributionAmount.ReportAmount4
			invoked.ReportCurrencyAmount.ReportAmount5 		= DistributionAmount.ReportAmount5

			if (CreateGainLossSwitch)
				invoked.ReportCurrencyAmount.KeepRateOnly = false
			else
				invoked.ReportCurrencyAmount.KeepRateOnly = true		
			
			invoked.ControlDocumentNumber 	= PayablesInvoice.VoucherNumberDisplay
			invoked.DocumentNumber		  	= PayablesInvoice.VoucherNumberDisplay
			if (GLTGeneralLedgerEvent entered)
				invoked.GeneralLedgerEvent	= GLTGeneralLedgerEvent
			else
			if (AdjustedDistribution  				 
			or PayablesInvoice.Status.Amended)
				invoked.GeneralLedgerEvent 	=  "CX"			
 			else
				invoked.GeneralLedgerEvent 	=  "AD" 		
			invoked.Description			  	= Description		
			if (DistributionType.GainLossDistribution
			or DistributionType.TaxReversalDistribution)    				 
				invoked.TransactionAmount  	=  0			
			invoked.APPaid		= LocalAPPaid
			invoked.AutoReverse = false		
			invoked.UnitsAmount	= UnitAmount
			invoked.JournalizeGroup	= GLTJournalizeGroup			



		CreateGLTransactionDetail

			include LoadApdistribDefaults



			if (!DistributionType.ExpenseAccrual)
				if (Status.Historical)
					invoke History.CreateHistoryGLTransDetailNoRules GLTransactionDetail
						fill in fields from this instance
							except invoked.Status
						invoked.OriginatingTransaction 	= reference to this instance
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.System					= "AP"
						invoked.VendorGroupAndVendor.VendorGroup	= PayablesInvoice.VendorGroup	
						invoked.VendorGroupAndVendor.Vendor			= Vendor						
						invoked.Reference				= DistributionReference 
						invoked.Description				= Description
						invoked.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
						invoked.CurrencyCode			= InvoiceCurrency					 
						invoked.TransactionDate			= DistributionAmount.ExchangeDate		 
						if (GLTPostingDate entered)
							invoked.PostingDate			= GLTPostingDate
						else
							if (UseDistributionDate)
								invoked.PostingDate		= PayablesInvoice.DistributionDate	 
							else
								invoked.PostingDate		= DistributionAmount.ExchangeDate	 
						if (GLFinanceCodeBlock entered)
							invoked.FinanceCodeBlock	= GLFinanceCodeBlock
						else
							invoked.FinanceCodeBlock	= DistributionAccount

						if (GLTransactionAmount entered)
							invoked.TransactionAmount	= GLTransactionAmount
							BypassUnitAndAmountEdit 	= false		
						else
							if (DistributionAmount.CurrencyAmount entered)
								invoked.TransactionAmount	= DistributionAmount.CurrencyAmount
								BypassUnitAndAmountEdit = false		
							else
								BypassUnitAndAmountEdit = true		
								
						invoked.ReportCurrencyAmount.FunctionalAmount 	= DistributionAmount.FunctionalAmount
						invoked.ReportCurrencyAmount.AlternateAmount 	= DistributionAmount.AlternateAmount
						invoked.ReportCurrencyAmount.AlternateAmount2 	= DistributionAmount.AlternateAmount2
						invoked.ReportCurrencyAmount.AlternateAmount3 	= DistributionAmount.AlternateAmount3
						invoked.ReportCurrencyAmount.ToFunctionalAmount = DistributionAmount.ToFunctionalAmount
						invoked.ReportCurrencyAmount.ToAlternateAmount 	= DistributionAmount.ToAlternateAmount
						invoked.ReportCurrencyAmount.ToAlternateAmount2 = DistributionAmount.ToAlternateAmount2
						invoked.ReportCurrencyAmount.ToAlternateAmount3 = DistributionAmount.ToAlternateAmount3
						invoked.ReportCurrencyAmount.ProjectAmount 		= DistributionAmount.ProjectAmount
						invoked.ReportCurrencyAmount.ReportAmount1 		= DistributionAmount.ReportAmount1
						invoked.ReportCurrencyAmount.ReportAmount2 		= DistributionAmount.ReportAmount2
						invoked.ReportCurrencyAmount.ReportAmount3 		= DistributionAmount.ReportAmount3
						invoked.ReportCurrencyAmount.ReportAmount4 		= DistributionAmount.ReportAmount4
						invoked.ReportCurrencyAmount.ReportAmount5 		= DistributionAmount.ReportAmount5

						if (CreateGainLossSwitch)
							invoked.ReportCurrencyAmount.KeepRateOnly = false
						else
							invoked.ReportCurrencyAmount.KeepRateOnly = true		

						invoked.ControlDocumentNumber 	= PayablesInvoice.VoucherNumberDisplay
						invoked.DocumentNumber		  	= PayablesInvoice.VoucherNumberDisplay
						if (GLTGeneralLedgerEvent entered)
							invoked.GeneralLedgerEvent	= GLTGeneralLedgerEvent
						else
						if (AdjustedDistribution  				 
						or PayablesInvoice.Status.Amended)
							invoked.GeneralLedgerEvent 	=  "CX"			
			 			else
							invoked.GeneralLedgerEvent 	=  "AD" 		
						invoked.Description			  	= Description		
						if (DistributionType.GainLossDistribution
						or DistributionType.TaxReversalDistribution)    				 
							invoked.TransactionAmount  	=  0			
						invoked.APPaid		= LocalAPPaid
						invoked.AutoReverse = false		
						invoked.UnitsAmount	= UnitAmount
						invoked.JournalizeGroup	= GLTJournalizeGroup
				else
					invoke Unreleased.CreateUnreleasedGLTransDetailNoRules GLTransactionDetail
						fill in fields from this instance
							except invoked.Status		 
						invoked.OriginatingTransaction 	= reference to this instance
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.System					= "AP"
						invoked.VendorGroupAndVendor.VendorGroup	= PayablesInvoice.VendorGroup	
						invoked.VendorGroupAndVendor.Vendor			= Vendor						
						invoked.Reference				= DistributionReference 
						invoked.Description				= Description
						invoked.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
						if (InterfaceCreate)
							if (Status.Released)
								invoked.Status			= 1
						invoked.CurrencyCode			= InvoiceCurrency					 
						invoked.TransactionDate			= DistributionAmount.ExchangeDate		 
						if (GLTPostingDate entered)
							invoked.PostingDate			= GLTPostingDate
						else
							if (UseDistributionDate)
								invoked.PostingDate		= PayablesInvoice.DistributionDate	 
							else
								invoked.PostingDate		= DistributionAmount.ExchangeDate	 
						if (GLFinanceCodeBlock entered)
							invoked.FinanceCodeBlock	= GLFinanceCodeBlock
						else
							invoked.FinanceCodeBlock	= DistributionAccount

						if (GLTransactionAmount entered)
							invoked.TransactionAmount	= GLTransactionAmount
							BypassUnitAndAmountEdit 	= false
						else
							if (DistributionAmount.CurrencyAmount entered)
								invoked.TransactionAmount	= DistributionAmount.CurrencyAmount
								BypassUnitAndAmountEdit = false
							else
								BypassUnitAndAmountEdit = true	
						invoked.ReportCurrencyAmount.FunctionalAmount 	= DistributionAmount.FunctionalAmount
						invoked.ReportCurrencyAmount.AlternateAmount 	= DistributionAmount.AlternateAmount
						invoked.ReportCurrencyAmount.AlternateAmount2 	= DistributionAmount.AlternateAmount2
						invoked.ReportCurrencyAmount.AlternateAmount3 	= DistributionAmount.AlternateAmount3
						invoked.ReportCurrencyAmount.ToFunctionalAmount = DistributionAmount.ToFunctionalAmount
						invoked.ReportCurrencyAmount.ToAlternateAmount 	= DistributionAmount.ToAlternateAmount
						invoked.ReportCurrencyAmount.ToAlternateAmount2 = DistributionAmount.ToAlternateAmount2
						invoked.ReportCurrencyAmount.ToAlternateAmount3 = DistributionAmount.ToAlternateAmount3
						invoked.ReportCurrencyAmount.ProjectAmount 		= DistributionAmount.ProjectAmount
						invoked.ReportCurrencyAmount.ReportAmount1 		= DistributionAmount.ReportAmount1
						invoked.ReportCurrencyAmount.ReportAmount2 		= DistributionAmount.ReportAmount2
						invoked.ReportCurrencyAmount.ReportAmount3 		= DistributionAmount.ReportAmount3
						invoked.ReportCurrencyAmount.ReportAmount4 		= DistributionAmount.ReportAmount4
						invoked.ReportCurrencyAmount.ReportAmount5 		= DistributionAmount.ReportAmount5

						if (CreateGainLossSwitch)
							invoked.ReportCurrencyAmount.KeepRateOnly = false
						else
							invoked.ReportCurrencyAmount.KeepRateOnly = true		
						
						invoked.ControlDocumentNumber 	= PayablesInvoice.VoucherNumberDisplay
						invoked.DocumentNumber		  	= PayablesInvoice.VoucherNumberDisplay
						if (GLTGeneralLedgerEvent entered)
							invoked.GeneralLedgerEvent	= GLTGeneralLedgerEvent
						else
						if (AdjustedDistribution  				 
						or PayablesInvoice.Status.Amended)
							invoked.GeneralLedgerEvent 	=  "CX"			
			 			else
							invoked.GeneralLedgerEvent 	=  "AD" 		
						invoked.Description			  	= Description		
						if (DistributionType.GainLossDistribution) 				 
							invoked.TransactionAmount  	=  0			
						invoked.APPaid		= LocalAPPaid
						invoked.AutoReverse = false		
						invoked.UnitsAmount	= UnitAmount
						invoked.JournalizeGroup	= GLTJournalizeGroup

				include UpdateBaseAmtPersistentField
			
			

		ProcessDistributionCodeOnDistib		





			if (!TransientCreatedFrom.DistribCodeOnDistrib)	
				initialize LocalSumDistributionAmount	
				LastDistributionCodeDetail		= last DistributionCodeDetailRel.PayablesDistributionCodeDetail
				for each DistributionCodeDetailRel
					include ProcessPartialDistributionCodeFinanceStructure		

					if (each.PayablesDistributionCodeDetail = LastDistributionCodeDetail)
						if (each.DistributionAmount entered)
							GLTransactionAmount = each.DistributionAmount
							DistributionAmount.CurrencyAmount 	= each.DistributionAmount
						else
							if (each.DistributionPercent entered)
								GLTransactionAmount -= LocalSumDistributionAmount	
								DistributionAmount.CurrencyAmount 	-= LocalSumDistributionAmount	
						DistributionAmount.KeepRateOnly 	= true
						DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 

						DistributionAccount = LocalPostToAccount	
						GLFinanceCodeBlock 	= LocalPostToAccount	
						UnitAmount			= each.UnitAmount
						if (each.Description entered
						and Description	 not entered)
							Description		= each.Description
						if (each.TaxCode entered)				
							TaxCode			= each.TaxCode		
							TaxIndicator	= 2	
						ICNCode				= each.ICNCode		
					else	
						if (each.DistributionAmount entered)
							NewDistributionAmount = each.DistributionAmount
						else
							NewDistributionAmount = ((DistributionAmount.CurrencyAmount / 100%) * each.DistributionPercent)
							LocalSumDistributionAmount += NewDistributionAmount
						invoke Create PayablesInvoiceDistribution
							assign result to NewPayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.Vendor					= Vendor
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "D"
							invoked.DistributionCode		= DistributionCode
							invoked.DistributionDate		= DistributionDate
							invoked.PostingOption			= Vendor.VendorClass.PostingOption
							invoked.DistributionAmount.CurrencyAmount 	= NewDistributionAmount
							invoked.DistributionAmount.KeepRateOnly 	= true
							invoked.DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
							invoked.InvoiceCurrency			= InvoiceCurrency

							invoked.DistributionAccount 	= LocalPostToAccount	
							invoked.UnitAmount				= each.UnitAmount
							if (each.Description entered)
								invoked.Description			= each.Description
							invoked.DistributionReference 	= each.DistributionReference
							if (each.AssetTemplate entered)
								invoked.AssetFlag				= "A"
							else
								if (each.Asset entered)
									invoked.AssetFlag			= "R"
							if (each.TaxCode entered)						
								invoked.TaxCode			= each.TaxCode		
								invoked.TaxIndicator	= 2	
							else
							if (TaxCode entered)							
								invoked.TaxCode			= TaxCode			
								invoked.TaxIndicator	= 2	
							invoked.ICNCode				= each.ICNCode		
							invoked.TransientCreatedFrom		= 4  

		ProcessPartialDistributionCodeFinanceStructure


			LocalPostToAccount		= each.DistributionAccount


			if (each.DistributionAccount.ToAccountingEntity not entered
			and GLFinanceCodeBlock.ToAccountingEntity entered)
				LocalPostToAccount.ToAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity

			if (each.DistributionAccount.AccountingUnit not entered
			and GLFinanceCodeBlock.AccountingUnit entered)
				LocalPostToAccount.AccountingUnit	= GLFinanceCodeBlock.AccountingUnit

			if (each.DistributionAccount.GeneralLedgerChartAccount not entered
			and GLFinanceCodeBlock.GeneralLedgerChartAccount entered)
				LocalPostToAccount.GeneralLedgerChartAccount	= GLFinanceCodeBlock.GeneralLedgerChartAccount

			if (each.DistributionAccount.Project not entered				
			and GLFinanceCodeBlock.Project entered)
				LocalPostToAccount.Project	= GLFinanceCodeBlock.Project

			if (each.DistributionAccount.FinanceDimension1 not entered		
			and GLFinanceCodeBlock.FinanceDimension1 entered)
				LocalPostToAccount.FinanceDimension1	= GLFinanceCodeBlock.FinanceDimension1

			if (each.DistributionAccount.FinanceDimension2 not entered		
			and GLFinanceCodeBlock.FinanceDimension2 entered)
				LocalPostToAccount.FinanceDimension2	= GLFinanceCodeBlock.FinanceDimension2

			if (each.DistributionAccount.FinanceDimension3 not entered		
			and GLFinanceCodeBlock.FinanceDimension3 entered)
				LocalPostToAccount.FinanceDimension3	= GLFinanceCodeBlock.FinanceDimension3

			if (each.DistributionAccount.FinanceDimension4 not entered		
			and GLFinanceCodeBlock.FinanceDimension4 entered)
				LocalPostToAccount.FinanceDimension4	= GLFinanceCodeBlock.FinanceDimension4

			if (each.DistributionAccount.FinanceDimension5 not entered		
			and GLFinanceCodeBlock.FinanceDimension5 entered)
				LocalPostToAccount.FinanceDimension5	= GLFinanceCodeBlock.FinanceDimension5

			if (each.DistributionAccount.FinanceDimension6 not entered		
			and GLFinanceCodeBlock.FinanceDimension6 entered)
				LocalPostToAccount.FinanceDimension6	= GLFinanceCodeBlock.FinanceDimension6

			if (each.DistributionAccount.FinanceDimension7 not entered		
			and GLFinanceCodeBlock.FinanceDimension7 entered)
				LocalPostToAccount.FinanceDimension7	= GLFinanceCodeBlock.FinanceDimension7

			if (each.DistributionAccount.FinanceDimension8 not entered		
			and GLFinanceCodeBlock.FinanceDimension8 entered)
				LocalPostToAccount.FinanceDimension8	= GLFinanceCodeBlock.FinanceDimension8

			if (each.DistributionAccount.FinanceDimension9 not entered		
			and GLFinanceCodeBlock.FinanceDimension9 entered)
				LocalPostToAccount.FinanceDimension9	= GLFinanceCodeBlock.FinanceDimension9

			if (each.DistributionAccount.FinanceDimension10 not entered		
			and GLFinanceCodeBlock.FinanceDimension10 entered)
				LocalPostToAccount.FinanceDimension10	= GLFinanceCodeBlock.FinanceDimension10



		ChangeReleasedCommitment
			invoke ChangeReleasedCommitment GLCommitRel
				if (DistributionAccount != this instance.GLCommitRel.FinanceCodeBlock)
					invoked.PrmTransDate                        = PayablesInvoice.DistributionDate
		   			invoked.PrmCodeBlock                        = DistributionAccount
		   			invoked.PrmDimensionCode					= DistributionAccount.DimensionCode
					if (DistributionAmount.CurrencyAmount   changed) 
						invoked.PrmEntityChanged	= true
				else
					invoked.PrmTransDate                        = DistributionDate				
				invoked.PrmChangedCurrAmount.FunctionalAmount 	= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ProjectAmount		= DistributionAmount.ProjectAmount.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ReportAmount1      = DistributionAmount.ReportAmount1.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ReportAmount2      = DistributionAmount.ReportAmount2.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ReportAmount3      = DistributionAmount.ReportAmount3.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ReportAmount4      = DistributionAmount.ReportAmount4.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ReportAmount5      = DistributionAmount.ReportAmount5.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.AlternateAmount    = DistributionAmount.AlternateAmount.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.AlternateAmount2   = DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.AlternateAmount3   = DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				invoked.PrmLastTransAmount       				= DistributionAmount.CurrencyAmount
				invoked.PrmChangedCurrAmount.ToFunctionalAmount = DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ToAlternateAmount  = DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ToAlternateAmount2 = DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
				invoked.PrmChangedCurrAmount.ToAlternateAmount3 = DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					

		MaintainUnreleasedCommitment
			invoke MaintainUnreleasedCommitment GLCommitRel
				invoked.TransactionAmount        = DistributionAmount.CurrencyAmount
				invoked.ReportCurrencyAmount     = DistributionAmount
				invoked.TransactionDate          = PayablesInvoice.DistributionDate		
				invoked.AccountingEntity         = GeneralLedgerCompanyRel.AccountingEntity
				invoked.FinanceCodeBlock         = DistributionAccount
				invoked.CurrencyCode             = PayablesInvoice.InvoiceCurrency
				invoked.PrmAllowRebuild          = LocalAllowRebuild								


		CreateGLTransactionDetailAccrualOffset
			include LoadApdistribDefaults
			if (DistributionType.ExpenseAccrual)
				if (Status.Historical)							
					invoke History.CreateHistoryGLTransDetailNoRules GLTransactionDetail
						fill in fields from this instance
							except invoked.Status
						invoked.OriginatingTransaction 	= reference to this instance
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.System					= "AP"
						invoked.Reference				= DistributionReference		
						invoked.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
						invoked.VendorGroupAndVendor.VendorGroup	= PayablesInvoice.VendorGroup 
						invoked.VendorGroupAndVendor.Vendor			= Vendor 
						invoked.TransactionAmount		= GLTransactionAmount
						invoked.CurrencyCode			= InvoiceCurrency					 
						invoked.TransactionDate			= DistributionAmount.ExchangeDate		 
						if (GLTransactionAmount entered)			
							BypassUnitAndAmountEdit 	= false		
						else										
							BypassUnitAndAmountEdit 	= true		
						if (GLTPostingDate entered)
							invoked.PostingDate			= GLTPostingDate
						else
							if (UseDistributionDate)
								invoked.PostingDate		= PayablesInvoice.DistributionDate	 
							else
								invoked.PostingDate		= DistributionAmount.ExchangeDate	 
						invoked.Description				= Description
						if (DistributionAccount entered)
							invoked.FinanceCodeBlock		= DistributionAccount	
						invoked.ReportCurrencyAmount 	= GLBaseAmount 		
						invoked.GeneralLedgerEvent 		= "AC"			
						invoked.ControlDocumentNumber 	= PayablesInvoice.VoucherNumberDisplay
						invoked.DocumentNumber		  	= PayablesInvoice.VoucherNumberDisplay
						invoked.Description			  	= AccountsPayableAccrualText
						invoked.ReportCurrencyAmount.KeepRateOnly = false
				else
					invoke Released.CreateReleasedGLTransDetailNoRules GLTransactionDetail
						fill in fields from this instance
							except invoked.Status
						invoked.OriginatingTransaction 	= reference to this instance		 
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup   
						invoked.System					= "AP"
						invoked.Reference				= DistributionReference		
						invoked.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
						invoked.VendorGroupAndVendor.VendorGroup	= PayablesInvoice.VendorGroup	
						invoked.VendorGroupAndVendor.Vendor			= Vendor						
						invoked.TransactionAmount		= GLTransactionAmount 
						if (GLTransactionAmount entered)
							BypassUnitAndAmountEdit 	= false
						else
							BypassUnitAndAmountEdit 	= true
						invoked.UnitsAmount				= UnitAmount
						invoked.CurrencyCode			= InvoiceCurrency
						invoked.TransactionDate			= DistributionAmount.ExchangeDate		 
						if (GLTPostingDate entered)
							invoked.PostingDate			= GLTPostingDate
						else
							if (UseDistributionDate)
								invoked.PostingDate		= PayablesInvoice.DistributionDate	 
							else
								invoked.PostingDate		= DistributionAmount.ExchangeDate	 
						if (DistributionAccount entered)
							invoked.FinanceCodeBlock		= DistributionAccount	
						invoked.ReportCurrencyAmount 	= GLBaseAmount 		
						invoked.GeneralLedgerEvent 		=  "AC"				
						invoked.ControlDocumentNumber 	= PayablesInvoice.VoucherNumberDisplay
						invoked.DocumentNumber		  	= PayablesInvoice.VoucherNumberDisplay					
						invoked.Description			  	= AccountsPayableAccrualText
						invoked.ReportCurrencyAmount.KeepRateOnly = false 
						invoked.JournalizeGroup			= GLTJournalizeGroup
		
			include UpdateBaseAmtPersistentField

































		UpdateGLTransactionDetail							
			if (!DistributionType.ExpenseAccrual)				
				include LoadApdistribDefaults
				BypassUnitAndAmountEdit								= true
				if (Status.Unreleased)							
					invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel
						fill in user fields from this instance		 
						invoked.PostingDate							= DistributionDate
						invoked.CurrencyCode						= InvoiceCurrency
						invoked.APPaid								= LocalAPPaid
						invoked.TransactionAmount					= GLTransactionAmount
						invoked.FinanceCodeBlock					= GLFinanceCodeBlock
						invoked.ReportCurrencyAmount 				= GLBaseAmount
						invoked.ReportCurrencyAmount.KeepRateOnly	= true
						invoked.Reference							= DistributionReference 
						invoked.Description							= Description
						invoked.UnitsAmount							= UnitAmount
						invoked.TransactionDate						= DistributionAmount.ExchangeDate		
				else
					if (Status.Released)

						invoke Released.UpdateReleasedGLTransDetailNoRules GLTransactionDetailRel		
							fill in user fields from this instance
							invoked.PostingDate							= DistributionDate
							invoked.APPaid								= LocalAPPaid		 
							invoked.TransactionAmount					= GLTransactionAmount
							invoked.FinanceCodeBlock					= GLFinanceCodeBlock
							invoked.ReportCurrencyAmount 				= GLBaseAmount
							invoked.ReportCurrencyAmount.KeepRateOnly	= true

							invoked.Reference							= DistributionReference 
							invoked.Description							= Description
							invoked.UnitsAmount							= UnitAmount

				include UpdateBaseAmtPersistentField
		
		

		UpdateBaseAmtPersistentField
			if (!DistributionType.GainLossDistribution
			and !TaxAccrualOffset)
				if (GLTransactionDetailRel.TransactionAmount entered)
					DistributionAmount.CurrencyAmount	= GLTransactionDetailRel.TransactionAmount
					DistributionAmount.KeepRateOnly 	= true
					DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
				else
					if (GLTransactionAmount entered)
						DistributionAmount.CurrencyAmount	= GLTransactionAmount
						DistributionAmount.KeepRateOnly 	= true
						DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
				if (!DistributionType.PaymentAccrual
				and  GLTransactionDetailRel.TransactionDate entered)
					DistributionAmount.ExchangeDate		= GLTransactionDetailRel.TransactionDate
				else
					DistributionAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
					DistributionAmount.KeepRateOnly 						= true
					DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate







		CreateAlternateGLTransactionDetail

			invoke CreateUnreleasedGLTransDetailNoRules GLTransactionDetail
				fill in fields from this instance
				invoked.OriginatingTransaction 	= reference to this instance		 
				invoked.JournalizeGroup			= GLTJournalizeGroup  
				invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup  
				invoked.System					= GLTSystem
				invoked.Reference				= DistributionReference 
				invoked.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
				invoked.VendorGroupAndVendor.VendorGroup	= PayablesInvoice.VendorGroup	
				invoked.VendorGroupAndVendor.Vendor			= Vendor						
				invoked.TransactionAmount		= GLTransactionAmount  
				if (GLTransactionAmount entered)	
					BypassUnitAndAmountEdit = false	
				else								
					BypassUnitAndAmountEdit = true	
				if (GLTCurrencyCode	!entered)
					invoked.CurrencyCode		= PayablesInvoice.InvoiceCurrency
				else
					invoked.CurrencyCode		= GLTCurrencyCode
				invoked.TransactionDate			= GLTTransactionDate
				invoked.PostingDate				= GLTPostingDate
				invoked.FinanceCodeBlock		= GLTTransactionCodeBlock 
				invoked.ReportCurrencyAmount.FunctionalAmount 	= DistributionAmount.FunctionalAmount
				invoked.ReportCurrencyAmount.AlternateAmount 	= DistributionAmount.AlternateAmount
				invoked.ReportCurrencyAmount.AlternateAmount2 	= DistributionAmount.AlternateAmount2
				invoked.ReportCurrencyAmount.AlternateAmount3 	= DistributionAmount.AlternateAmount3
				invoked.ReportCurrencyAmount.ToFunctionalAmount = DistributionAmount.ToFunctionalAmount
				invoked.ReportCurrencyAmount.ToAlternateAmount 	= DistributionAmount.ToAlternateAmount
				invoked.ReportCurrencyAmount.ToAlternateAmount2 = DistributionAmount.ToAlternateAmount2
				invoked.ReportCurrencyAmount.ToAlternateAmount3 = DistributionAmount.ToAlternateAmount3
				invoked.ReportCurrencyAmount.ProjectAmount 		= DistributionAmount.ProjectAmount
				invoked.ReportCurrencyAmount.ReportAmount1 		= DistributionAmount.ReportAmount1
				invoked.ReportCurrencyAmount.ReportAmount2 		= DistributionAmount.ReportAmount2
				invoked.ReportCurrencyAmount.ReportAmount3 		= DistributionAmount.ReportAmount3
				invoked.ReportCurrencyAmount.ReportAmount4 		= DistributionAmount.ReportAmount4
				invoked.ReportCurrencyAmount.ReportAmount5 		= DistributionAmount.ReportAmount5
				invoked.GeneralLedgerEvent 		= GLTGeneralLedgerEvent			 
				invoked.ControlDocumentNumber 	= GLTControlDocumentNumber
				invoked.DocumentNumber		  	= GLTDocumentNumber					
				invoked.Description			  	= Description 
				invoked.AutoReverse				= GLTAutoReverse

			if (Status.Released
			or Status.Historical)
				include ReleaseGLTransactionDetail
			include UpdateBaseAmtPersistentField



		ReleaseGLTransactionDetail
			if (GLTransactionDetailRel exist
			and GLTransactionDetailRel.Status.Unreleased)
				invoke Release GLTransactionDetailRel
				





		RecurringJournalInterface
			if (ActionType.UpdateType

			and RecurringJournalExists)
				for each RecurringJournalBridgeRel
					invoke Update each
						fill in user fields from this instance		
						invoked.FrTransactionCodeBlock	= DistributionAccount
			
			if (IsRecurring)
				if (!RecurringJournalExists)
					invoke Create RecurringJournalControl
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.AccountingEntity		= AccountingEntity
						invoked.JournalType				= RecurringJournalType
						invoked.BeginningPeriod			= RecurringBeginningPeriod
						invoked.EndPeriod				= RecurringEndPeriod
						invoked.PostingDay				= RecurringPostingDay
						invoked.TransactionDay			= RecurringTransactionDay
						invoked.Reference				= RecurringReference
						invoked.Description				= RecurringDescription
						invoked.Ledger					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CoreLedger	
						if (DistributionAmount.CurrencyAmount	> 0)
							invoked.TotalDebit				= DistributionAmount.CurrencyAmount
							invoked.TotalCredit				= (DistributionAmount.CurrencyAmount * -1)
						else
							invoked.TotalDebit				= (DistributionAmount.CurrencyAmount * -1)
							invoked.TotalCredit				= DistributionAmount.CurrencyAmount
						if (UnitAmount	> 0)
							invoked.UnitDebit				= UnitAmount
							invoked.UnitCredit				= (UnitAmount * -1)
						else
							invoked.UnitDebit				= (UnitAmount * -1)
							invoked.UnitCredit				= UnitAmount
						invoked.TransactionOrigin		= reference to this instance
				invoke Create RecurringJournalBridge
					fill in user fields from this instance		
					invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.AccountingEntity		= AccountingEntity
					invoked.RecurringJournalControl	= RecurringJournalControlRel.RecurringJournalControl
					invoked.FrTransactionCodeBlock	= GLFinanceCodeBlock
					invoked.FromDimensionCode		= GLFinanceCodeBlock.DimensionCode
					invoked.ToTransactionCodeBlock	= RecurringToCodeBlock
					invoked.GeneralLedgerEvent		= RecurringGeneralLedgerEvent
					invoked.TransactionDate			= TransactionDate
					invoked.CurrencyCode			= PayablesInvoice.InvoiceCurrency
					invoked.TransactionAmount		= RecurringTransactionAmount
					invoked.ReportCurrencyAmount	= GLTReportCurrencyAmount
					invoked.UnitsAmount				= RecurringUnitsAmount
					invoked.TransactionOrigin		= reference to this instance
					invoked.ReportCurrencyAmount.KeepRateOnly	= true
					initialize invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				initialize RecurringToCodeBlock
				initialize RecurringTransactionAmount



		AmortizationDetailsInterface		
			if (ActionType.UpdateType
			and DistributionAccount changed
			and OldReconciliationDetailRel exists)
				invoke Delete OldReconciliationDetailRel

			if (ActionType.UpdateType
			and DistributionAmount.CurrencyAmount changed
			and ReconciliationDetailRel exists)
				invoke Update ReconciliationDetailRel
					invoked.DetailAmount					= DistributionAmount.CurrencyAmount

			if (IsPrepaidRecon)
				invoke CreateAmortizationDetail TransientReconciliationAccount		
					invoked.PrmReferenceNumber				= TransientReferenceNumber
					invoked.PrmDescription					= TransientDescription
					invoked.PrmDistributionDescription		= TransientDistributionDescription
					invoked.PrmVendorInvoice.PayablesCompany = Company
					invoked.PrmVendorInvoice.Vendor			= PayablesInvoice.Vendor
					invoked.PrmVendorInvoice.PayablesInvoice = PayablesInvoice
					invoked.PrmDetailAmount					= TransientDetailAmount
					invoked.PrmTransactionDate				= PayablesInvoice.InvoiceDate
					invoked.PrmPostingDate					= PayablesInvoice.DistributionDate	
					invoked.PrmStartPeriod					= TransientStartPeriod
					invoked.PrmEndPeriod					= TransientEndPeriod
					invoked.PrmCatchUpPeriod				= TransientCatchUpPeriod
					invoked.PrmAmortizationExpenseAccount	= TransientAmortizationExpenseAccount
					invoked.PrmAllocationCode				= TransientAllocationCode
					invoked.PrmPeriodTerm					= TransientPeriodTerm
					invoked.PrmAmortizationSpread			= TransientAmortizationSpread
				initialize TransientCreatePrepaidAmort		



		SetMonitorDefaults
			if (LocalRunProgram not entered)
				if (Status.Unreleased)
					LocalRunProgram = RunProgram.PayablesInvoice
				else	
					LocalRunProgram = RunProgram.InvoiceMaintenance
			
			if (LocalRunProgram.InvoiceDistributionClosing)	
				VerifyPayablesMonitor.RunProgram	= LocalRunProgram
				VerifyPayablesMonitor.Company 		= Company
				VerifyPayablesMonitor.ProcessLevel 	= LocalProcessLevel    
			else
			if (LocalRunProgram.InvoiceMaintenance)
				VerifyPayablesMonitor.Company 		= Company
				VerifyPayablesMonitor.PayGroup		= PayablesInvoice.PayGroup
				VerifyPayablesMonitor.RunProgram	= LocalRunProgram
			else	
			if (Status.Released)	
				VerifyPayablesMonitor.PayGroup		= PayablesInvoice.PayGroup
				VerifyPayablesMonitor.RunProgram	= LocalRunProgram
				VerifyPayablesMonitor.Company 		= Company
				VerifyPayablesMonitor.ProcessLevel 	= blank      
				VerifyPayablesMonitor.AuthorityCode	= blank	 
				VerifyPayablesMonitor.BatchNumber 	= blank 	



		VerifyMonitor
			include SetMonitorDefaults
			LocalCheckAPMonitor						= VerifyPayablesMonitor.CallVerifyPayablesMonitor
			constraint (VerifyPayablesMonitor.VerifyOk)
				"<VerifyPayablesMonitor.APMonitorProcessingMessage>" 



		BeginMonitor	
			include SetMonitorDefaults
			LocalCheckAPMonitor						= VerifyPayablesMonitor.BeginMonitor
			constraint (VerifyPayablesMonitor.NoErrors)
				"<VerifyPayablesMonitor.APMonitorProcessingMessage>" 



		EndMonitor
			include SetMonitorDefaults		
			LocalCheckAPMonitor						= VerifyPayablesMonitor.EndMonitor
			constraint (VerifyPayablesMonitor.NoErrors)
				"<VerifyPayablesMonitor.APMonitorProcessingMessage>" 



		FieldRulesForBatch
			Vendor			= PayablesInvoice.Vendor
			Invoice			= PayablesInvoice.Invoice
			Suffix			= PayablesInvoice.Suffix
			CancelSequence	= PayablesInvoice.CancelSequence

			DiversityCode 	= PayablesInvoice.DiversityCode
			PurchaseOrder 	= PayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder
			TaxPoint		= blank
			TaxCode			= blank
			TaxRate 		= blank
			CreatedBy 	= LastUpdateBy

			TaxableAmount	= blank
			TaxIndicator	= blank
			TaxUsageCode	= blank

			DistributionAmount.ExchangeDate							= PayablesInvoice.InvoiceAmount.ExchangeDate 
			DistributionAmount.KeepRateOnly 						= true
			DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			initialize DistributionAmount.FunctionalAmount.EnteredCurrencyAmount

			BaseNumberOfDecimals	= Company.CurrencyNumberOfDecimals
			NumberOfDecimals		= PayablesInvoice.NumberOfDecimals
			ToBaseNumberOfDecimals	= BaseNumberOfDecimals
			AccrualCode				= PayablesInvoice.AccrualCode



		IntercompanyBillingEdit
			if (IntercompanyBillingTransactionRel.Status.Processed)


				constraint (ICBillToCompany = IntercompanyBillingTransactionRel.ToCompany)
					"IntercompanyBillingInterfaceRecordHasBeenProcessed;CannotRemoveOrChangeBillToCompany"
				constraint (ICBillingRechargeItem = IntercompanyBillingTransactionRel.IntercompanyBillingRechargeItem)
					"IntercompanyBillingInterfaceRecordHasBeenProcessed;CannotRemoveOrChangeRechargeItem"
			else
				if  (ICBillToCompany entered
				or   ICBillingRechargeItem entered)
					constraint (ICBillToCompany entered)
						"BillToCompanyIsRequired"
					constraint (ICBillingRechargeItem entered)
						"BillingRechargeItemIsRequired"
					constraint (!ICBillToCompany = Company)
						"BillToCompanyCannotBeTheSameAsThePayablesInvoiceCompany"
					constraint (ICBillToCompany.Company.IsAValidIntercompanyBillingCompany)
						"BillToCompanyIsNotSetupForIntercompanyBilling;TheGlobalLedgerCompanySetForIntercompanyBilling,AReceivableAndAPayablesCompanySetupWithDefaultsForIntercompanyBilling"
	
					if (GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccountBuilt)
						if (GLFinanceCodeBlock.Ledger not entered)
							GLFinanceCodeBlock.Ledger					= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.Ledger
	
						GLFinanceCodeBlock.ToAccountingEntity			= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.ToAccountingEntity
	
						if (GLFinanceCodeBlock.AccountingUnit not entered)
							GLFinanceCodeBlock.AccountingUnit			= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.AccountingUnit
	
						if (GLFinanceCodeBlock.GeneralLedgerChartAccount not entered)
							GLFinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.GeneralLedgerChartAccount
	
						if (GLFinanceCodeBlock.Project not entered)
							GLFinanceCodeBlock.Project					= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.Project
							
						if (GLFinanceCodeBlock.FinanceDimension1 not entered)
							GLFinanceCodeBlock.FinanceDimension1		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension1
	
						if (GLFinanceCodeBlock.FinanceDimension2 not entered)
							GLFinanceCodeBlock.FinanceDimension2		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension2
							
						if (GLFinanceCodeBlock.FinanceDimension3 not entered)
							GLFinanceCodeBlock.FinanceDimension3		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension3
	
						if (GLFinanceCodeBlock.FinanceDimension4 not entered)
							GLFinanceCodeBlock.FinanceDimension4		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension4
	
						if (GLFinanceCodeBlock.FinanceDimension5 not entered)
							GLFinanceCodeBlock.FinanceDimension5		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension5
	
						if (GLFinanceCodeBlock.FinanceDimension6 not entered)
							GLFinanceCodeBlock.FinanceDimension6		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension6
	
						if (GLFinanceCodeBlock.FinanceDimension7 not entered)
							GLFinanceCodeBlock.FinanceDimension7		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension7
	
						if (GLFinanceCodeBlock.FinanceDimension8 not entered)
							GLFinanceCodeBlock.FinanceDimension8		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension8
	
						if (GLFinanceCodeBlock.FinanceDimension9 not entered)
							GLFinanceCodeBlock.FinanceDimension9		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension9
	
						if (GLFinanceCodeBlock.FinanceDimension10 not entered)
							GLFinanceCodeBlock.FinanceDimension10		= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension10



		UpdateIntercompanyBillingTransaction
			if (ICBillToCompany != blank	
			and !IntercompanyBillingTransactionRel exists)
				invoke Create IntercompanyBillingTransaction
					invoked.IntercompanyBillingGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.FromCompany								= Company
					invoked.ToCompany								= ICBillToCompany
					invoked.Description								= Description
					invoked.IntercompanyBillingRechargeItem			= ICBillingRechargeItem
					invoked.OriginatingTransaction					= reference to this instance
					invoked.OriginatingDocument						= reference to PayablesInvoice
					invoked.TransactionAmount						= GLTransactionAmount
					invoked.TransactionCurrency						= InvoiceCurrency
					invoked.CurrencyTable							= PayablesInvoice.CurrencyTable
					invoked.CurrencyExchangeRate					= TransientFinanceCurrencyAmt.FunctionalAmount.EnteredCurrencyRate
					invoked.TransactionDate							= PayablesInvoice.InvoiceDate
					invoked.PostingDate								= DistributionDate
					if (GLFinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.GeneralLedgerChartAccount)
						invoked.ReceivablesRevenueAccount				= GLFinanceCodeBlock
					if (initiating action	= "PayablesInvoice.UpdateRecurringInvoiceAmountReleased"		
					and invoking action		= "CancelDistribution")
						invoked.PayablesInvoiceCancelOffset				= true

			if (IntercompanyBillingTransactionRel exists)
				if (ICBillToCompany != blank)	
					invoke Update IntercompanyBillingTransactionRel
						invoked.FromCompany							= Company
						invoked.ToCompany							= ICBillToCompany
						invoked.Description							= Description
						invoked.IntercompanyBillingRechargeItem		= ICBillingRechargeItem
						invoked.OriginatingTransaction				= reference to this instance
						invoked.OriginatingDocument					= reference to PayablesInvoice
						invoked.TransactionAmount					= GLTransactionAmount
						invoked.TransactionCurrency					= InvoiceCurrency
						invoked.CurrencyTable						= PayablesInvoice.CurrencyTable
						invoked.CurrencyExchangeRate				= TransientFinanceCurrencyAmt.FunctionalAmount.EnteredCurrencyRate
						invoked.TransactionDate						= PayablesInvoice.InvoiceDate
						invoked.PostingDate							= DistributionDate
						if (GLFinanceCodeBlock.GeneralLedgerChartAccount	= GeneralLedgerCompanyRel.ReceivableCompanyRel.ICBClearingAccount.GeneralLedgerChartAccount)
							invoked.ReceivablesRevenueAccount				= GLFinanceCodeBlock
						else
							invoked.ReceivablesRevenueAccount				= blank
				else
					if (!ICBillToCompany != blank)	
						invoke Delete IntercompanyBillingTransactionRel
						ICBillToCompany	= DerivedICBillToCompany

		UpdateIntercompanyBillingSettlementDetailLineDistributionSet 

			constraint (ContextSettlementDetailLineRel exists)
					"LineMustBeSelectedToAddDistributions"	
			constraint (TransientICBFundDistributionSelectAmount != 0)
				"Selected_\AmountMustBeEntered"

			if (ICBPayablesApplyDistributionContextRel exists)
				LocalCurrentAmount = ICBPayablesApplyDistributionContextRel.DistributionAmount.CurrencyAmount + DerivedFundDistributionOpenAmount
			else
				LocalCurrentAmount = DerivedFundDistributionOpenAmount
			
			if (DistributionAmount.CurrencyAmount > 0)
				constraint (TransientICBFundDistributionSelectAmount > 0)
					"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
				constraint (TransientICBFundDistributionSelectAmount <= LocalCurrentAmount)
					"Selected_\Amount<TransientICBFundDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"
			else
			if (DistributionAmount.CurrencyAmount < 0)
				constraint (TransientICBFundDistributionSelectAmount < 0)
					"Selected_\AmountMustHaveTheSameSignAs_\Original_\Amount"
				constraint (TransientICBFundDistributionSelectAmount >= LocalCurrentAmount)
					"Selected_\Amount<TransientICBFundDistributionSelectAmount>CannotExceedTheDistribution's_\Available_\Amount<LocalCurrentAmount>"
			
			if (ICBPayablesApplyDistributionContextRel exists)
				invoke Update ICBPayablesApplyDistributionContextRel
					invoked.DistributionAmount.CurrencyAmount = TransientICBFundDistributionSelectAmount
			else
				invoke Create ICBPayablesApplyDistributionContextRel
					invoked.IntercompanyBillingSettlementHeader		= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
					invoked.IntercompanyBillingSettlementDetail		= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
					invoked.IntercompanyBillingSettlementDetailLine = ContextSettlementDetailLineRel.IntercompanyBillingSettlementDetailLine
					invoked.PayableEntity							= ContextSettlementDetailRel.PayableEntity
					invoked.ApplyFundDistributionAccount			= GLFinanceCodeBlock
					invoked.DistributionAmount.CurrencyAmount 		= TransientICBFundDistributionSelectAmount
					invoked.DistributionAmount.ExchangeDate			= DistributionAmount.ExchangeDate
					invoked.OriginalCurrency						= InvoiceCurrency


		CheckInvoiceDetail
			if  (action type.Create
			or  (action type.Update 
			and  PayablesInvoiceDetail not entered)) 
				if  (PayablesInvoiceDetailContext.PayablesInvoiceDetail entered
				and  PayablesInvoiceDetail not entered)		
					PurchaseOrder						= PayablesInvoiceDetailContext.PurchaseOrder
					PurchaseOrderLine					= PayablesInvoiceDetailContext.PurchaseOrderLine
					PayablesInvoiceDetail				= PayablesInvoiceDetailContext.PayablesInvoiceDetail
					PurchasingContract					= PayablesInvoiceDetailContext.Contract
					ContractLine						= PayablesInvoiceDetailContext.ContractLine
				else
				if  (PurchaseOrderLine entered
				and  PayablesInvoiceDetail not entered)
					if  (PurchaseOrder not entered)
						PurchaseOrder					= PayablesInvoice.FirstPurchaseOrder
						
					if  (PurchaseOrderLine.Contract entered)
						PurchasingContract					= PurchaseOrderLine.Contract
						ContractLine						= PurchaseOrderLine.ContractLine

					PayablesInvoiceDetail  				= first PayablesInvoiceDetailRel.PayablesInvoiceDetail
					
				else
				if  (PurchaseOrderLine entered
				and  PayablesInvoiceDetail entered
				and  PurchaseOrder not entered)
					PurchaseOrder						= PayablesInvoice.FirstPurchaseOrder
				else
				if  (ContractLine entered
				and  PayablesInvoiceDetail not entered)
					if  (PurchasingContract not entered)
						PurchasingContract					= PayablesInvoice.ServiceContract
						
					PayablesInvoiceDetail  				= first PayablesInvoiceDetailRel.PayablesInvoiceDetail
					

				if  (PayablesInvoiceDetail entered
				and  TaxCode not entered
				and  TransientPercent entered
				and  DerivedDetailPercent entered
				and  TransientPercent != DerivedDetailPercent)
					if ((initiating action = "PayablesInvoice.CancelReleased"	
					or   initiating action = "ReverseDistributionForUpdate")	
					and  GLTransactionAmount entered)							
						initialize GLTransactionAmount							
					constraint (GLTransactionAmount not entered)
						"CannotEnterBothAmountAndPercent"
					GLTransactionAmount = TransientPercent * PayablesInvoiceDetail.TotalDistributionAmount
					if (initiating action = "ReverseDistributionForUpdate")		
						GLTransactionAmount *= -1								

			if  (PayablesInvoiceDetail changed) 
				NextSentence = true 
			else 	
			if  (action type.Update
			and  TaxCode not entered
			and  TransientPercent entered
			and  TransientPercent != DerivedDetailPercent)
				constraint (GLTransactionAmount = DistributionAmount.CurrencyAmount)
					"CannotChangeBothAmountAndPercent"

				GLTransactionAmount = TransientPercent * PayablesInvoiceDetail.TotalDistributionAmount


			if  (PayablesInvoiceDetail entered
			and  OriginalDistribution not entered)

				if (OriginalDistribution not entered)

					if (PurchaseOrderLine entered)
						OriginalDistribution = DerivedPOLineDistribution

					else
					if (ContractLine entered)
						OriginalDistribution = DerivedContractLineDistribution
					
				if  (AddOnCharge entered 
				and  PurchaseOrderAndLineAddOnChargesRel not exists)
					NextSentence = true 
				else  
				if (PurchaseOrderLine entered
				and !PurchaseOrderLine.ItemType.Inventoried)
					constraint (OriginalDistribution entered)
						"SourceDistributionMustBeSpecifiedIfMultiplesExist"


			if  (TaxCode entered
			and  PayablesInvoiceDetail entered
			and  AddOnCharge not entered
			and  !ReverseFromCancel					
			and  !PayablesInvoice.Status.Amended
			and  !TransientTaxReversal  
			and  !PayablesInvoiceDetail.TaxCode.TaxType.TaxTableCode)

				constraint (TaxCode = PayablesInvoiceDetail.TaxCode)
					"TaxCodeDoesNotMatchInvoiceDetailTaxCode"
					
			if  (action type.Create
			and  !ReverseFromCancel
			and  !TransientTaxReversal  
			and  PurchaseOrderLine entered
			and  PayablesInvoiceDetail.ItemType.Inventoried
			and  !IsNonLandedTaxDistribution
			and  !IsNonLandedAOCDistribution)
				constraint (MatchCreated entered)
					"DistributionsForInventoriedItemsAreCreatedDuringMatch" //:init<initiating action>invk<invoking action>"   

			if  (PurchaseOrderLine entered
			or   PayablesInvoiceDetail entered)
				initialize TaxIndicator

			if  (PayablesInvoice.Status.Unreleased
			or   PayablesInvoice.Status.PendingApproval
			or   PayablesInvoice.Status.Approved)

				if  (PurchaseOrderLine changed
				and  PurchaseOrderLine entered)
					constraint (PayablesInvoiceDetailRel exists)
						"InvoiceLineDoesNotExistForThisPurchaseOrderLine"

				if  (ContractLine changed
				and  ContractLine entered)
					constraint (PayablesInvoiceDetailRel exists)
						"InvoiceLineDoesNotExistForThisContractLine"

				if  (ContractLine entered)
					constraint (PayablesInvoiceDetail entered)
						"CannotLinkDistributionToContractLineIfThereIsNoInvoiceLineForThatContractLine"
						
				if  (PurchaseOrderLine entered)
					constraint (PayablesInvoiceDetail entered)
						"CannotLinkDistributionToPurchaseOrderLineIfThereIsNoInvoiceLineForThatPurchaseOrderLine"

			if  (PurchaseOrderLine entered
			and (AddOnCharge not entered
			or   AddOnCharge.LandedAddOnCharge)
			and  initiating action not = "ReverseDistributionForUpdate" 
			and  initiating action not = "PayablesInvoice.PerformTaxReversal" 
			and (PurchaseOrderLine.PurchaseOrderLineAssetRel exists
			or   PurchaseOrderLineDistributionRel.AssetInformation entered))
				constraint (TransientAsset entered 
				or          TransientAssetTemplate entered 
				or          PayablesAssetDetailRel exists)
					"AssetOrAssetTemplateRequiredWhenPurchaseOrderLineWithAssetInformationSpecified"					


		SetSpendCategory
			if (PurchaseOrderLine entered)
				if (PurchaseOrderLine.Contract	not entered)
					if (PurchaseOrderLine.CostCode.Punchout)
						SpendCategory					= 1	
					else
					if (PurchaseOrderLine.ItemOnContract)
						SpendCategory					= 2	
					else
						SpendCategory					= 3	
				else
					SpendCategory						= 1
			else
			if (PayablesInvoiceDetail entered)
				if (PayablesInvoiceDetail.Contract	not entered)
					SpendCategory						= 3	
				else
					SpendCategory						= 1	
			else
				SpendCategory							= 4	
				


		SetSpendCategoryDetail
			if (!LocalSpendCategoryDetailVarsSet)
				if (PurchaseOrderLine entered)
					LocalPOLineItemType = PurchaseOrderLine.ItemType
					LocalPOLineCostCode = PurchaseOrderLine.CostCode
					
					if (PurchaseOrderLine.Contract	not entered)
						if (PurchaseOrderLine.CostCode.Punchout)
							LocalSpendCategory					= 1	
						else
						if (PurchaseOrderLine.ItemOnContract)
							LocalSpendCategory					= 2	
						else
							LocalSpendCategory					= 3	
					else
						LocalSpendCategory						= 1
				else
				if (PayablesInvoiceDetail entered)
					if (PayablesInvoiceDetail.Contract	not entered)
						LocalSpendCategory						= 3	
					else
						LocalSpendCategory						= 1	
				else
					LocalSpendCategory							= 4	

				LocalSpendCategoryDetailVarsSet = true
		
				

			if (AddOnCharge entered)
				if (PurchaseOrderLine entered)
					if (InvoiceType.CreditMemo)
						SpendCategoryDetail 						= 1		
					else
					if (AddOnCharge.AddOnChargeType.Cost)
						SpendCategoryDetail 						= 2		
					else
					if (AddOnCharge.AddOnChargeType.Allowance)
						SpendCategoryDetail 						= 3		
					else
						SpendCategoryDetail 						= 4		
				else
					if (InvoiceType.CreditMemo)
						SpendCategoryDetail 						= 5		
					else
					if (AddOnCharge.AddOnChargeType.Cost)
						SpendCategoryDetail 						= 6		
					else
					if (AddOnCharge.AddOnChargeType.Allowance)
						SpendCategoryDetail 						= 7		
					else
						SpendCategoryDetail 						= 8		

			else
			if (TaxCode entered)
				if (PurchaseOrderLine entered)
					if (IsLandedTaxDistribution)
						SpendCategoryDetail 						= 10	
					else
						SpendCategoryDetail 						= 11	
				else
					SpendCategoryDetail 							= 12	

			else
			if (LocalSpendCategory.OnContract)
				if (InvoiceType.CreditMemo)				
					if (LocalPOLineItemType.Inventoried)
						SpendCategoryDetail 					= 14	
					else
					if (LocalPOLineItemType.NonStock)
						SpendCategoryDetail 					= 16	
					else
					if (LocalPOLineItemType.Service)
						SpendCategoryDetail 					= 18	
					else
					if (LocalPOLineItemType.Special)
						if (LocalPOLineCostCode.Punchout)
							SpendCategoryDetail 				= 22	
						else
							SpendCategoryDetail 				= 20	
				else
					if (LocalPOLineItemType.Inventoried)
						SpendCategoryDetail						= 13	
					else
					if (LocalPOLineItemType.NonStock)
						SpendCategoryDetail						= 15	
					else
					if (LocalPOLineItemType.Service)
						SpendCategoryDetail						= 17	
					else
					if (LocalPOLineItemType.Special)
						if (LocalPOLineCostCode.Punchout)
							SpendCategoryDetail					= 21	
						else
							SpendCategoryDetail					= 19	
			else
			if (LocalSpendCategory.OffContract)
				if (InvoiceType.CreditMemo)
					if (LocalPOLineItemType.Inventoried)
						SpendCategoryDetail						= 24	
					else
					if (LocalPOLineItemType.NonStock)
						SpendCategoryDetail						= 26	
					else	
					if (LocalPOLineItemType.Service)
						SpendCategoryDetail						= 28	
					else
						SpendCategoryDetail						= 30	
				else
					if (LocalPOLineItemType.Inventoried)
						SpendCategoryDetail						= 23	
					else
					if (LocalPOLineItemType.NonStock)
						SpendCategoryDetail						= 25	
					else
					if (LocalPOLineItemType.Service)
						SpendCategoryDetail						= 27	
					else
						SpendCategoryDetail						= 29	
			else
			if (LocalSpendCategory.NoContract)
				if (InvoiceType.CreditMemo)
					if (LocalPOLineItemType.Inventoried)
						SpendCategoryDetail						= 34	
					else
					if (LocalPOLineItemType.NonStock)
						SpendCategoryDetail						= 36	
					else	
					if (LocalPOLineItemType.Service)
						SpendCategoryDetail						= 38	
					else
						SpendCategoryDetail						= 40	
				else
					if (LocalPOLineItemType.Inventoried)
						SpendCategoryDetail						= 33	
					else
					if (LocalPOLineItemType.NonStock)
						SpendCategoryDetail						= 35	
					else
					if (LocalPOLineItemType.Service)
						SpendCategoryDetail						= 37	
					else
						SpendCategoryDetail						= 39	
			else
			if (LocalSpendCategory.ExpenseInvoice)
				if (PurchaseOrder entered 
				and PurchaseOrderLine not entered)
					if (InvoiceType.CreditMemo)
						SpendCategoryDetail						= 43	
					else
						SpendCategoryDetail						= 45	
				else
				if (InvoiceType.CreditMemo)
					if (PayablesInvoice.VendorReturn entered)
						SpendCategoryDetail						= 43	
					else
						SpendCategoryDetail						= 47	
				else
					SpendCategoryDetail							= 46	






		InitializeVATFields
			if (!PayablesInvoice.InvoiceSource.IntercompanyBilling)
				LocalSavedDistributionAmount = DistributionAmount.CurrencyAmount	
				initialize RecoverableTaxAreaId 			 
				initialize RecoverableJurisLevel 			 
				initialize RecoverableImpositionType 		 	  
				initialize RecoverableAmount 				 	 
				initialize RecoverablePercent  			 
				initialize UnrecoverableAmount				 
				initialize RateClassificationText			 	
				initialize InvoiceTextCode					 		
				initialize ForeignOrDomestic				 				

				initialize ReturnedTaxType					 	 
				initialize InputOutputType	
				IsService = false
			

		LoadVertexGlobalInputFields 


			if  (TaxEntityUsesThirdPartyTax
			and !PayablesInvoice.InvoiceSource.IntercompanyBilling)
		   		CalculateTax.RelatedObjectReference			= reference to this instance
		   		if (IntercompanyBilling)
		   			CalculateTax.IntercompanyBilling		= IntercompanyBilling
		   		if (InputVertexRequest entered)
		   			CalculateTax.InputVertexRequest			= InputVertexRequest
		   		CalculateTax.TransactionSource				= "I"	
		   		CalculateTax.InvoiceCompany					= Company
		   		CalculateTax.ProcessLevel					= PayablesInvoice.ProcessLevel 
				CalculateTax.VendorGrp						= Company.VendorGroup
				CalculateTax.Vendor							= PayablesInvoice.Vendor 
				CalculateTax.Location						= TransientShipToLocation	
				CalculateTax.Invoice 						= PayablesInvoice.Invoice
				CalculateTax.VendorCustomerName				= PayablesInvoice.Vendor.VendorName 	
				if (PayablesInvoiceDistribution.PayablesInvoiceDistribution entered)										
					CalculateTax.LineNumber					= PayablesInvoiceDistribution.PayablesInvoiceDistribution		
				else																					
					CalculateTax.LineNumber					= PayablesInvoice.LastDistribution + 1		
		   		CalculateTax.CommodityCode					= ICNCode				
				CalculateTax.ProductTaxCategory				= DerivedProductTaxCategory	
				CalculateTax.TaxUsageCode					= TaxUsageCode					
				CalculateTax.DeliveryTerms          		= PayablesInvoice.ShipTerm
				CalculateTax.PointOfTitleTransfer			= TransientPointOfTitleTransfer			
				CalculateTax.ChargedTaxAmount       		= PayablesInvoice.TaxAmount		

				if (PayablesInvoice.IsCreditInvoice)			
					CalculateTax.InvoicedOrCreditMemo	= "C"	
				else											
					CalculateTax.InvoicedOrCreditMemo	= "I"	
					


				

				LocalTaxEntity								= TaxAccountingEntity	
				CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
				CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			

				
				if (PayablesInvoice.ProcessLevel.TaxCode entered)	
					if (PayablesInvoice.RemitToCode.TaxCode entered)	
						CalculateTax.FromTaxCode	= PayablesInvoice.RemitToCode.TaxCode
					else
						CalculateTax.FromTaxCode	= Vendor.TaxCode
				

				if (PayablesInvoice.RemitToCode.CurrentAddressRel exists	
				and PayablesInvoice.RemitToCode.VATRegistrationNumber entered)
					CalculateTax.FromPostalAddress				= PayablesInvoice.RemitToCode.CurrentAddressRel.PostalAddress
					CalculateTax.FromVATRegistrationCountry 	= PayablesInvoice.RemitToCode.VATRegistrationCountry			
					CalculateTax.FromVATRegistrationNumber		= PayablesInvoice.RemitToCode.VATRegistrationNumber				
				else
					CalculateTax.FromPostalAddress				= PayablesInvoice.Vendor.CurrentAddressRel.PostalAddress		
					CalculateTax.FromVATRegistrationCountry 	= PayablesInvoice.Vendor.VATRegistrationCountry					
					CalculateTax.FromVATRegistrationNumber		= PayablesInvoice.Vendor.VATRegistrationNumber					
				
				if (PayablesInvoice.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress	= PayablesInvoice.PurchaseFromVendorLocAddressRel.VendorAddress 	
				












				if (PayablesInvoice.BillToProcessLevel.PostalAddress entered)									
					CalculateTax.BuyerAdminDestAddress		= PayablesInvoice.BillToProcessLevel.PostalAddress	
				else
					if (PayablesInvoice.ProcessLevel.PostalAddress entered)										
						CalculateTax.BuyerAdminDestAddress	= PayablesInvoice.ProcessLevel.PostalAddress		
					else
						CalculateTax.BuyerAdminDestAddress	= AccountingEntityRel.AddressCode.PostalAddress	
				
				

				if (PayablesTaxDetailRel.ShipToLocation entered)									
					CalculateTax.PostalAddress		= PayablesTaxDetailRel.ShipToLocation.PostalAddress	
				else																				
					if (PayablesInvoice.Location.PostalAddress entered)								
						CalculateTax.PostalAddress	= PayablesInvoice.Location.PostalAddress		
					else																			
						if (PayablesInvoice.ProcessLevel.PostalAddress entered)	
							CalculateTax.PostalAddress	= PayablesInvoice.ProcessLevel.PostalAddress			
						else
							CalculateTax.PostalAddress	= AccountingEntityRel.AddressCode.PostalAddress	

				
				CalculateTax.DefaultFilingCurrency 			= Company.Currency 
				CalculateTax.CurrencyRate					= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		
				CalculateTax.TransactionCurrency 			= InvoiceCurrency								
				if (TaxableAmount entered)
					CalculateTax.TaxableAmount				= TaxableAmount
				else
					if (DistributionAmount.CurrencyAmount entered)
						CalculateTax.TaxableAmount				= DistributionAmount.CurrencyAmount
						TaxableAmount							= DistributionAmount.CurrencyAmount
					else
						if (PayablesInvoice.TaxableAmount entered)
							CalculateTax.TaxableAmount			= PayablesInvoice.TaxableAmount
							TaxableAmount						= PayablesInvoice.TaxableAmount
						else
							CalculateTax.TaxableAmount			= PayablesInvoice.InvoiceAmount.CurrencyAmount
							TaxableAmount						= PayablesInvoice.InvoiceAmount.CurrencyAmount
				if (PayablesInvoice.PayCurrency entered)
					CalculateTax.BaseCurrency 				= PayablesInvoice.PayCurrency					
				else	
					CalculateTax.BaseCurrency 				= PayablesInvoice.PayGroup.BaseCurrency
				CalculateTax.ReceiptSite					= PayablesInvoice.ProcessLevel								
				CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
				if (CalculateTax.UniqueIdOfRelatedObject not entered)
					CalculateTax.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
				
				CalculateTax.SabrixUserElement				= UserElementGroup											
				CalculateTax.UserElementLevel				= "L"														
				CalculateTax.InputReturnVertexTaxIn			= "D"		
				if (TaxIndicator.Exclude)										
					CalculateTax.ExcludeFromTaxEstimate			= true			
				else															
					CalculateTax.ExcludeFromTaxEstimate			= false			
				include LoadVertexDebugOptions




			if (TaxEntityRel.ThirdParty.VertexOSeries)

				LocalVertexDistributionAccount    = DistributionAccount

				if (PayablesInvoice.BillFromLocation entered)
					CalculateTax.POAAddress				= PayablesInvoice.BillFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress				= PayablesInvoice.Vendor.VendorAddress





				CalculateTax.CostCenter                      		= LocalVertexDistributionAccount.AccountingUnit 


				CalculateTax.PostDate                          		= PayablesInvoice.DistributionDate                    
				CalculateTax.GeneralLedgerAccount 					= LocalVertexDistributionAccount.GeneralLedgerChartAccount 
				CalculateTax.ChargedTaxAmount       				= PayablesInvoice.TaxAmount 	
				if (IsTaxDistribution)
					CalculateTax.TaxAmount                      	= DistributionAmount.CurrencyAmount		
				else
					CalculateTax.TaxAmount                      	= PayablesInvoice.TaxAmount 		

				if (TaxAttributesRel.VertexFlexibleFieldExist)

					if (TransientShipToLocation entered)
						LocalInventoryLocation = TransientShipToLocation
					else
						LocalInventoryLocation = PayablesInvoice.Location




					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerCompanyRel.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DerivedTaxPointDate
							else    
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity 
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								if (TransientShipToLocation entered)
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation
								else
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceCurrency
							else    



							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedUnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ICNCode
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLineRel.UNSPSCCode.UNSPSCCodeDisplay
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else    
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxUsageCode
							else 
							if (each.ExternalValue.ValueIs.Description) 		
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
							else 
							if (each.ExternalValue.ValueIs.PaymentDate)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DueDate 
							else 









							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								if (TransientShipToLocation entered)
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoLongitude
								else
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								if (TransientShipToLocation entered)
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoLatitude
								else
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								if (TransientShipToLocation entered)
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation.PostalAddress.GeoAltitude
								else
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = DerivedUnitCost
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = DistributionDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DueDate 
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								if (PayablesInvoice.DerivedTaxPointDate entered)
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
								else 
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  







		LoadVertexDebugOptions
			if (TaxEntityUsesVertex)					
				if (VertexConfigRel.DisplayOn)				
					CalculateTax.DisplayOn					= true	
					CalculateTax.TurnDisplaySw				= 1
				else
					CalculateTax.DisplayOn					= false	
					CalculateTax.TurnDisplaySw				= 0	
				if (VertexConfigRel.DebugMode)				
					LocalJurisdictionLookupKey				= DefaultLookupKey	
					CalculateTax.AppendToJurisFile			= true					
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey				 
					CalculateTax.RelatedObjectReference     = reference to this instance	
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel
		

		LoadVtxReturnedFieldsFromCalculateTax		


			if  (TaxEntityUsesThirdPartyTax
			and !PayablesInvoice.InvoiceSource.IntercompanyBilling)
				RateClassificationText				= CalculateTax.RateClassificationText	
				InvoiceTextCode						= CalculateTax.InvoiceTextCode			



				ReturnedTaxType						= CalculateTax.ReturnedTaxType	 
				if (IsForeignVAT)
					ForeignOrDomestic =  ForeignOrDomestic.Foreign
				InputOutputType						= CalculateTax.InputOutputType	
				LocalRecoverableAccount        	  	= CalculateTax.RecoverableAccount				
				LocalUnRecoverableAccount      	  	= CalculateTax.NonRecoverableAccount 			
			   	LocalForeignRecoverableAccount  	= CalculateTax.ForeignRecoverableAccount	 	
				LocalForeignUnRecoverableAccount    = CalculateTax.ForeignNonRecoverableAccount 	
				
				if (IsService = false)
					IsService						= CalculateTax.IsService						
				

				if (CalculateTax.Imposition 		= "VAT"											
				or  CalculateTax.ReturnedTaxType 	= "VAT")

					RecoverableTaxAreaId 			= CalculateTax.OutputGeoCode
					RecoverableJurisLevel 			= CalculateTax.ReturnedJurisLevel
					RecoverableImpositionType 		= CalculateTax.Imposition		  
					RecoverableAmount 				= CalculateTax.RecoverableAmount	 
					RecoverablePercent  			= CalculateTax.RecoverablePercent 
					UnrecoverableAmount				= CalculateTax.UnrecoverableAmount 
					VATInputTaxAmount				= CalculateTax.RecoverableAmount	
					if (ForeignOrDomestic.Domestic)
						VertexVATType = "D"

				DistributionAmount.CurrencyAmount 	= LocalSavedDistributionAmount				
				DistributionAmount.KeepRateOnly 	= true
				DistributionAmount.ExchangeDate		= PayablesInvoice.InvoiceAmount.ExchangeDate 
				
				if (CalculateTax.SabrixErrorSeverity.Warning	
				or  CalculateTax.SabrixErrorSeverity.Severe)
					invoke ProcessSabrixSeverityMessage PayablesInvoice		
						invoked.PrmSabrixErrorSeverity	= CalculateTax.SabrixErrorSeverity
						invoked.PrmSabrixMessage		= CalculateTax.SabrixReturnMessage
				
				if (CalculateTax.TaxingJurisdiction entered)								
					LocalTaxingJurisdiction		= CalculateTax.TaxingJurisdiction			
				else
					initialize LocalTaxingJurisdiction	

				
				if (CalculateTax.ReturnedVertexTaxCode entered)								
					LocalReturnedVertexTaxCode		= CalculateTax.ReturnedVertexTaxCode	
				else
					initialize LocalReturnedVertexTaxCode
				
				if (!CalculateTax.NotSentToSabrix)
					LocalSentToTaxEngine		= true
				else
					initialize LocalSentToTaxEngine
				
				if (CalculateTax.OneSourceInformationMessage entered)
					LocalInformationMessage		= CalculateTax.OneSourceInformationMessage
				else
					initialize LocalInformationMessage

				if (PayablesInvoiceTaxRel.TaxDetails.VertexTaxResult not entered				
				and CalculateTax.VertexTaxResult entered)										
					invoke Update PayablesInvoiceTaxRel											
						invoked.TaxDetails.VertexTaxResult		= CalculateTax.VertexTaxResult	
						



			



		LoadFieldsReturnedFromCalculateTax				



			if (CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint != "S"
			and CalculateTax.TaxTable.TaxTableOutput[2].TaxPoint != "S"
			and CalculateTax.TaxTable.TaxTableOutput[3].TaxPoint != "S"
			and CalculateTax.TaxTable.TaxTableOutput[4].TaxPoint != "S"
			and CalculateTax.TaxTable.TaxTableOutput[5].TaxPoint != "S"
			and CalculateTax.TaxTable.TaxTableOutput[6].TaxPoint != "S"
			and CalculateTax.TaxTable.TaxTableOutput[7].TaxPoint != "S"
			and CalculateTax.TaxTable.TaxTableOutput[8].TaxPoint != "S")











				if (GLFinanceCodeBlock not entered
				and IsTaxDistribution)				
					if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")
						ApinwsXXInpAcctUnit = CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount.AccountingUnit
						ApinwsXXInpAccount 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount.GeneralLedgerChartAccount
					if (CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "I"
					or  CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "G")
						ApinwsXXInpAcctUnit = CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount.AccountingUnit
						ApinwsXXInpAccount 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount.GeneralLedgerChartAccount
						DistributionAccount	 		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
						GLFinanceCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount

					else
					if (CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "P")
						ApinwsXXInpAcctUnit = CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount.AccountingUnit
						ApinwsXXInpAccount 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount.GeneralLedgerChartAccount
						DistributionAccount	 		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount
						GLFinanceCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount

					else
						ApinwsXXInpAcctUnit = CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount.AccountingUnit
						ApinwsXXInpAccount 	= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount.GeneralLedgerChartAccount
						DistributionAccount	 		= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
						GLFinanceCodeBlock			= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount



				if (CalculateTax.OutputThirdPartyProcessed.VertexOSeries)
					constraint (CalculateTax.VerifiedOK)
						"TaxChargedDoesNotEqualTaxAmountCalculated.TaxAmountCalculatedIs:<CalculateTax.OutputTotalTaxAmount>VarianceOf;<CalculateTax.ReturnedTaxVariance>"	
				else			
					if (!TaxCodeRel.TaxType.CalculatedRate
					and !PayablesInvoice.AllowShortPay
					and !PayablesInvoice.UsePayablesTaxTolerance		
					and !CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")		
						if (((CalculateTax.OutputTotalTaxAmount > CalculateTax.TaxAmount)			
						and ((CalculateTax.OutputTotalTaxAmount - CalculateTax.TaxAmount) > .01))	
						or  ((CalculateTax.TaxAmount > CalculateTax.OutputTotalTaxAmount)			
						and ((CalculateTax.TaxAmount - CalculateTax.OutputTotalTaxAmount) > .01)))	
							constraint (CalculateTax.VerifiedOK)
								"RateDoesNotFallWithinTaxCodeRateRange"						           
					if (TaxCodeRel.TaxType.CalculatedRate)
						TaxRate		= CalculateTax.OutputTaxRate	
				




	
	

		EditVendorAccountRestrictions
			if (PayablesInvoice.MatchProcessType.Expense
			and DistributionType.Distribution
			and !LocalBypassRestrictedAccountEdit		
			and Vendor.HasVendorAccountRestrictionSetup)
			
				LocalChartAccount = GLFinanceCodeBlock.GeneralLedgerChartAccount
				
				if (VendorAccountRestrictionAccountRel exists)
					if (first VendorAccountRestrictionAccountRel.AccountingEntity entered)
						if (first VendorAccountRestrictionAccountRel.AccountingEntity != GLFinanceCodeBlock.ToAccountingEntity)
							LocalChartAccount		= GLFinanceCodeBlock.GeneralLedgerChartAccount
							LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
							if (VendorAccountRestrictionEntityRel exists)
								if (first VendorAccountRestrictionEntityRel.AccountingUnit entered)
									if (first VendorAccountRestrictionEntityRel.AccountingUnit != GLFinanceCodeBlock.AccountingUnit)
										LocalChartAccount		= GLFinanceCodeBlock.GeneralLedgerChartAccount
										LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
										LocalAccountingUnit		= GLFinanceCodeBlock.AccountingUnit
										constraint (VendorAccountRestrictionUnitRel exists)
											"VendorHasDistributionAccountRestrictions;TheFinanceStructure_Account<GLFinanceCodeBlock.GeneralLedgerChartAccount>And_To_Entity<GLFinanceCodeBlock.ToAccountingEntity>With_Unit<GLFinanceCodeBlock.AccountingUnit>AreNotValidForThisVendor"
							else
								constraint (VendorAccountRestrictionEntityRel exists)
									"VendorHasDistributionAccountRestrictions;TheFinanceStructure_To_Entity<GLFinanceCodeBlock.ToAccountingEntity>IsNotValidFor_Account<GLFinanceCodeBlock.GeneralLedgerChartAccount>ForThisVendor"
						else
							if (first VendorAccountRestrictionAccountRel.AccountingUnit entered)
								if (first VendorAccountRestrictionAccountRel.AccountingUnit != GLFinanceCodeBlock.AccountingUnit)
									LocalChartAccount		= GLFinanceCodeBlock.GeneralLedgerChartAccount
									LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
									LocalAccountingUnit		= GLFinanceCodeBlock.AccountingUnit
									constraint (VendorAccountRestrictionUnitRel exists)
										"VendorHasDistributionAccountRestrictions;TheFinanceStructure_Account<GLFinanceCodeBlock.GeneralLedgerChartAccount>And_To_Entity<GLFinanceCodeBlock.ToAccountingEntity>With_Unit<GLFinanceCodeBlock.AccountingUnit>AreNotValidForThisVendor"
					else
						LocalChartAccount		= blank
						LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
						if (VendorAccountRestrictionEntityRel exists)
							if (first VendorAccountRestrictionEntityRel.AccountingUnit entered)
								if (first VendorAccountRestrictionEntityRel.AccountingUnit != GLFinanceCodeBlock.AccountingUnit)
									LocalChartAccount		= blank
									LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
									LocalAccountingUnit		= GLFinanceCodeBlock.AccountingUnit
									constraint (VendorAccountRestrictionUnitRel exists)
										"VendorHasDistributionAccountRestrictions;TheFinanceStructure_To_Entity<GLFinanceCodeBlock.ToAccountingEntity>With_Unit<GLFinanceCodeBlock.AccountingUnit>IsNotValidForThisVendor"
						else
							constraint (!Vendor.HasRestrictionsWithJustEntity)
								"VendorHasDistributionAccountRestrictions;TheFinanceStructure_To_Entity<GLFinanceCodeBlock.ToAccountingEntity>IsNotValidFor_Account<GLFinanceCodeBlock.GeneralLedgerChartAccount>ForThisVendor"
				else
					constraint (!Vendor.HasRestrictionsWithJustAccount)
						"VendorHasDistributionAccountRestrictions;TheFinanceStructure_Account<GLFinanceCodeBlock.GeneralLedgerChartAccount>IsNotValidForThisVendor"
					
					LocalChartAccount		= blank
					LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
					if (VendorAccountRestrictionEntityRel exists)
						if (first VendorAccountRestrictionEntityRel.AccountingUnit entered)
							if (first VendorAccountRestrictionEntityRel.AccountingUnit != GLFinanceCodeBlock.AccountingUnit)
								LocalChartAccount		= blank
								LocalAccountingEntity	= GLFinanceCodeBlock.ToAccountingEntity
								LocalAccountingUnit		= GLFinanceCodeBlock.AccountingUnit
								constraint (VendorAccountRestrictionUnitRel exists)
									"VendorHasDistributionAccountRestrictions;TheFinanceStructure_To_Entity<GLFinanceCodeBlock.ToAccountingEntity>With_Unit<GLFinanceCodeBlock.AccountingUnit>IsNotValidForThisVendor"
					else
						LocalChartAccount = GLFinanceCodeBlock.GeneralLedgerChartAccount		
						constraint (VendorAccountRestrictionEntityRel exists)	
							"VendorHasDistributionAccountRestrictions;TheFinanceStructure_To_Entity<GLFinanceCodeBlock.ToAccountingEntity>With_Account<GLFinanceCodeBlock.GeneralLedgerChartAccount>IsNotValidForThisVendor"



		CheckIfIntrastatRequired	 
			initialize IntrastatProcessing
			DoIntrastatReporting = false
			if (InvoiceTaxEntityRel.IntrastatUsed)
				if (TaxAccountingEntity entered)
					IntrastatProcessing.TaxEntity		= TaxAccountingEntity
				else
					IntrastatProcessing.TaxEntity		= GeneralLedgerCompanyRel.AccountingEntity
				IntrastatProcessing.FiscalYear			= PayablesInvoice.IntrastatFiscalYear	
				IntrastatProcessing.OriginCountry		= PayablesInvoice.OriginCountry	
				IntrastatProcessing.OriginRegion 		= PayablesInvoice.OriginRegion				 	
				IntrastatProcessing.DestinationCountry	= PayablesInvoice.DestinationCountry
				IntrastatProcessing.DestinationRegion 	= PayablesInvoice.DestinationRegion		
				LocalTrigger							= IntrastatProcessing.CheckCountries
				DoIntrastatReporting 					= IntrastatProcessing.DoIntrastatReporting

		TaxIndicatorDefaultProcess
			if  (!BypassDefaultTaxIndicator						
			and (TaxCode					entered				
			or   PayablesInvoice.TaxCode	entered))
				if   (PayablesInvoice.MatchProcessType.Expense
				and   TaxIndicator			!entered
				and  (DistributionType		!entered
				or    DistributionType.Distribution)
				and   TransientCreatedFrom	!entered
				and   OriginalDistribution	!entered
				and ((TaxableAmount			 entered
				and   DerivedPositiveTaxableAmount	<= DerivedPositiveDistributionAmount)
				or   (TaxableAmount			!entered
				and  GLTransactionAmount entered)))
					if  (PayablesInvoice.DistributionCode entered		
					and !PayablesInvoice.TransientLineTax)				
						LocalContinue = true							
					else												
						if (Vendor.DefaultTaxIndicator				entered)
							TaxIndicator = Vendor.DefaultTaxIndicator
						else
							if (Vendor.VendorClass.DefaultTaxIndicator	entered)
								TaxIndicator = Vendor.VendorClass.DefaultTaxIndicator	


	Create Exit Rules
		LocalEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
		or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
		and  DistributionType.Distribution
		and  !IsNonLandedTaxDistribution
		and  !TransientAPToARClearingMemo
		and  !TransientVendorOffsetCreditMemo
		and  !IsProcurementCardExpense)
		
			if  (PayablesInvoice.MatchProcessType.Expense)

				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				and !InterfaceCreate
				and !Status.Historical)
					invoke PerformBudgetEdit
						invoked.PrmActionType = "C"

				if (!Status.Historical)
					LocalAllowRebuild = true
					invoke CreateCommitment
			
			else
			if  (!PayablesInvoice.MatchProcessType.Expense)
				if (PayablesInvoice.MatchProcessType.ServiceContract
				and  initiating action = "PayablesInvoice.InvoiceUnmatch"
				and  PayablesInvoiceDetail entered
				and  AddOnCharge not entered
				and (TaxCode not entered
				or  PayablesInvoiceDetail.TaxCode = ContractLine.TaxCode))
					NextSentence = true
				else
				if  ((MatchCreated not entered
				and  !PayablesInvoice.IsPOCancel)						
				or  (MatchCreated entered
				and (TaxEntityUsesSabrix 
				or   PayablesInvoice.CallVertexByDocument)
				and  !PayablesInvoice.IsPOCancel
				and  TaxCode entered
				and  !PayablesInvoiceDetail.ItemType.Inventoried))
	
					invoke CreateCommitment

					if (initiating action = "PayablesInvoice.CancelReleased")
						NextSentence = true
					else
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						if  (!BypassBudgetEdit
						or  (PurchaseOrderLine entered
						and  DistributionAmount.FunctionalAmount.EnteredCurrencyAmount > PurchaseOrderLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
						or  (ContractLine entered
						and  DistributionAmount.FunctionalAmount.EnteredCurrencyAmount > ContractLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount))
						
							invoke PerformBudgetEdit
								invoked.PrmActionType = "C"  //set to "U" since this is an "Update" from the PO 


	Create Rules		

		ContractRebateGroup         = PayablesInvoice.ContractRebateGroup
		LocalCurrencyTable			= PayablesInvoice.CurrencyTable
		UnitsAmount = UnitAmount		
		if (DistributionType.Distribution
		or  DistributionType.PaymentDiscount)
	   		include SetSpendCategory
		if (DistributionType.Distribution
		or  DistributionType.PaymentDiscount)
	   		include SetSpendCategoryDetail




	Actions


		Create is a Create Action
			valid when (CanCreateDistributions)
			completion message is "<CreateCompletionMessage>"
			Entrance Rules








				include TaxIndicatorDefaultProcess				
								
				if  (MatchWork not in context)
					if ((DistributionType.Distribution
					or   DistributionType.TaxReversalDistribution)
					and PayablesInvoice.Status.Unreleased  
					and !IsTaxDistribution)
						constraint (PayablesInvoice.IsNotPrepayment)
							"CannotAddDistributionsToAPrepaymentInvoice"		
				
				constraint (!PrepaymentNoUserDistributions)		
					"PrepaymentInvoice;CannotManuallyAddDistributionsToThisInvoice"
					
				if  (MatchInvoice
				and  !DistributionType.ExpenseAccrual)
					if  (!FromMatch
					and   PayablesInvoiceDetail not entered
					and   PurchaseOrderLine not entered)
						constraint (AddOnCharge not entered)
							"CannotEnterAddOnChargeForManuallyCreatedDistribution"


					include CheckInvoiceDetail


				ActionType = ActionType.CreateType
				include SetAccountingEntityForContext
				include SetGLTSystemForContext

				if  (PayablesInvoice.Status.Amended
				and  PayablesInvoiceDetail entered
				and  TaxCode entered
				and  !BypassMatchLandedTaxEdit			
				and  !PayablesInvoice.MatchProcessType.Expense)
					constraint (!IsLandedTaxDistribution)
						"CannotCreateLandedTaxDistributionDirectly;ItWillBeCreatedWhenMainDistributionIsCreated"
					constraint (!IsLandedAOCDistribution)
						"CannotCreateLandedAddOnChargeDistributionDirectly;ItWillBeCreatedWhenMainDistributionIsCreated"

					if (PayablesInvoiceDetail.TaxAmount entered)
						constraint (GLTransactionAmount <= PayablesInvoiceDetail.TaxAmount)
							"TaxAmountCannotExceedInvoiceDetailTaxAmount"
	
				if (CreateAlternateGLTransDetail)	
					BypassUpdatingInvoiceTotals = true
				else
					BypassUpdatingInvoiceTotals = false	

				if (DistributionReference = "TransferedFromAR") 
					BypassStructureRelationEdit = true
				
				LocalDocumentCurrencyTotals = PayablesInvoice.TotalDistributionAmount
				
				if (PayablesInvoice.ForIntercompanyBilling)
					include IntercompanyBillingEdit

				include UpdatePersistentFields



				














				




			Action Rules





				include CreateUpdateRules
				


				
				include CreateUpdateDeleteRules
				


				
				DetailTaxDistributionCodeFooter.DistribSum -= GLTransactionAmount	
				



				if (TaxCode entered
				and !PayablesInvoice.InvoiceSource.IntercompanyBilling)
					if (!TaxCodeRel.TaxType.TableMember)
						include CalculateTaxAmount
					else
						include LoadTaxDefaults		
				





				if (DistributionCode entered
				and PayablesInvoice.DistributionCode not entered
				and !ReverseFromCancel)
					include ProcessDistributionCodeOnDistib
				include FlipDistributionAmountFields




				if (!PayablesInvoice.SkipValidationForRecurringInvoice)		
					if (DistributionType !entered)							
						DistributionType = DistributionType.Distribution
					include EditVendorAccountRestrictions
			Exit Rules









				if ((((TaxCode entered				
				or     DoDetailTaxProcessing)			
				and    TaxIndicator.Taxable)
				or     VATReverseIndicator)		
				and    !BypassTaxCodeProcessing)	










					include DoTaxCodeProcessing













				include CreateUpdateDeleteExitRules		




				
				include DoProjectContractProcessing
				



				if (CreateAlternateGLTransDetail)	
					include CreateAlternateGLTransactionDetail
				else

					if (!DistributionType.ExpenseAccrual)
						include CreateGLTransactionDetail	
						if (Status.Released
						or  Status.Historical)
							include ReleaseGLTransactionDetail
					else
						if (!TransientTaxReversal)				
							include CreateGLTransactionDetailAccrualOffset
						else									
							initialize TransientTaxReversal		
				












				if (TransientReleaseAfterCreate
				and Status.Unreleased)
					invoke Release
				
				include UpdateLastUpdatedFields

				if (PayablesInvoice.ForIntercompanyBilling)
					if (initiating action = "PayablesInvoice.CancelReleased"		
					or  initiating action = "PayablesInvoice.UpdateRecurringInvoiceAmountReleased")
						if (IntercompanyBillingDocumentHeaderRel exists)
							include UpdateIntercompanyBillingTransaction
						else
							if (invoking action = "PayablesInvoice.CreateDistributionCopyUnreleased")
								include UpdateIntercompanyBillingTransaction
					else
						include UpdateIntercompanyBillingTransaction

				if (PayablesInvoice.Status.Amended
				and !PayablesInvoice.MatchProcessType.Expense
				and PayablesInvoiceDetail entered
				and TaxCode not entered
				and AddOnCharge not entered
				and PayablesInvoiceDetail.TaxCode entered
				and !BypassMatchLandedTaxEdit			
				and GLTransactionAmount = PayablesInvoiceDetail.TotalDistributionAmount)
					for each InvoiceDetailLandedTaxDistributionRel
						if  (each.Status.Released
						and  each.DistributionAccount = DistributionAccount 
						and ((each.DistributionAmount.CurrencyAmount > 0 
						and   DistributionAmount.CurrencyAmount > 0) 
						or   (each.DistributionAmount.CurrencyAmount = 0) 
						or   (each.DistributionAmount.CurrencyAmount < 0 
						and   DistributionAmount.CurrencyAmount < 0))) 
							invoke CreateAmendedDistribution each
								invoked.PrmAmendedPostDate	= DistributionDate
								invoked.PrmCancelSequence	= CancelSequence
								invoked.NewAccount			= DistributionAccount

					for each InvoiceDetailLandedAddOnChargeDistributionRel
						if  (each.Status = Status
						and  each.DistributionAccount = DistributionAccount)
							if (each.AddOnCharge.AddOnChargeType.Allowance) 
								if ((each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke CreateAmendedDistribution each
										invoked.PrmAmendedPostDate	= DistributionDate
										invoked.PrmCancelSequence	= CancelSequence
										invoked.NewAccount			= DistributionAccount
							else	
								if ((each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke CreateAmendedDistribution each
										invoked.PrmAmendedPostDate	= DistributionDate
										invoked.PrmCancelSequence	= CancelSequence
										invoked.NewAccount			= DistributionAccount










		CreateAndReleaseInvoice is a Create Action							
			default label is "Create_andReleaseInvoice"
			valid when (CanCreateDistributions)
			completion message is "<CreateCompletionMessage>"
			Action Rules
				invoke Create this instance
			Exit Rules
				if (!PayablesInvoice.InvoiceNotInBalance
				and  PayablesInvoice.ReleaseActionValid)
					invoke Unreleased.Release PayablesInvoice


		Recreate is a Create Action		
			default label is untranslatable
			restricted
			bypass field rules
			Action Rules
			Exit Rules
				include UpdatePayablesInvoiceDistributionTotals

			

		CreateImport is a Create Action
			default label is untranslatable
			restricted
			Entrance Rules
				GLTSystem			= "AP"
				BypassUpdatingInvoiceTotals = false
				BypassDistActionExitRules = true
				ActionType = ActionType.CreateType
				include TaxIndicatorDefaultProcess				
				include UpdatePersistentFields
			Action Rules

				InterfaceCreate = true

				if  (!PayablesInvoice.MatchProcessType.Expense
				and  PayablesInvoiceDetail not entered
				and  PurchaseOrderLine not entered)
					constraint (AddOnCharge not entered)
						"CannotEnterAddOnChargeForManuallyCreatedDistribution"

				if  (MatchInvoice
				and  !DistributionType.ExpenseAccrual)
					include CheckInvoiceDetail		
						
				include CreateUpdateRules

				include CreateUpdateDeleteRules


				if (TaxCode entered)
					if (!TaxCodeRel.TaxType.TableMember)

						include CalculateTaxAmount

				
				DistributionType = DistributionType.Distribution 
				include EditVendorAccountRestrictions


				
			Exit Rules

				InterfaceCreate = true

				if (TaxCodeRel.TaxType.TaxTableCode
				and TaxIndicator.Taxable)


					include DoTaxCodeProcessing		



				include DoProjectContractProcessing


				include CreateGLTransactionDetail
									

				include CreateTaxExitRules1


				include CreateUpdateDeleteExitRules					


				if (!DelayTaxProcessing)				
					if (!TaxCodeRel.TaxType.TaxTableCode	
					or  !TaxIndicator.Taxable)			
						LocalTaxSeqNbr = 1				
						include CreateTaxExitRules2		

					

				include UpdateLastUpdatedFields

				if (PayablesInvoice.ForIntercompanyBilling)
					include UpdateIntercompanyBillingTransaction


		CreateForTaxEngine is a Create Action
			default label is untranslatable
			restricted
			Entrance Rules
				GLTSystem			= "AP"
				ActionType = ActionType.CreateType
				include UpdatePersistentFields
			Action Rules

				if (TaxCode entered)
					include LoadTaxDefaults

				include CreateUpdateRules

				include CreateUpdateDeleteRules

				
				DistributionType = DistributionType.Distribution 
				include EditVendorAccountRestrictions
			Exit Rules

				include DoProjectContractProcessing


				include CreateGLTransactionDetail
									

				include CreateUpdateDeleteExitRules					


				include UpdateLastUpdatedFields



				InterfaceCreate = true  



		BypassCreate is a Create Action
			default label is untranslatable
			restricted
			bypass field rules
			Entrance Rules
				if (CreateAlternateGLTransDetail)	
					BypassUpdatingInvoiceTotals = true
				else
					BypassUpdatingInvoiceTotals = false	

				ActionType = ActionType.CreateType
				include UpdatePersistentFields
				include FieldRulesForBatch
			
			Action Rules
				include CreateUpdateRules
				include CreateUpdateDeleteRules
				if (TaxCode entered)
					if (!TaxCodeRel.TaxType.TableMember)
						include CalculateTaxAmount
			Exit Rules
				if (TaxCodeRel.TaxType.TaxTableCode
				and TaxIndicator.Taxable)

					include DoTaxCodeProcessing		

				if (CreateAlternateGLTransDetail)	
					include CreateAlternateGLTransactionDetail
				else	
				if (!DistributionType.ExpenseAccrual)
					include CreateGLTransactionDetail	
					if (Status.Released
					or Status.Historical)
						include ReleaseGLTransactionDetail
				else
					include CreateGLTransactionDetailAccrualOffset	
									
				include CreateUpdateDeleteExitRules

				include UpdateLastUpdatedFields



		BypassCreateForPayment is a Create Action
			default label is untranslatable
			restricted
			bypass field rules
			Entrance Rules
				if (CreateAlternateGLTransDetail)	
					BypassUpdatingInvoiceTotals = true
				else
					BypassUpdatingInvoiceTotals = false	

				ActionType = ActionType.CreateType
				include UpdatePersistentFields
				include FieldRulesForBatch

				TransientFinanceCurrencyAmt.FunctionalAmount 	= TransientPaymentAmount.FunctionalAmount
				TransientFinanceCurrencyAmt.AlternateAmount 	= TransientPaymentAmount.AlternateAmount
				TransientFinanceCurrencyAmt.AlternateAmount2 	= TransientPaymentAmount.AlternateAmount2
				TransientFinanceCurrencyAmt.AlternateAmount3 	= TransientPaymentAmount.AlternateAmount3
				TransientFinanceCurrencyAmt.ToFunctionalAmount 	= TransientPaymentAmount.ToFunctionalAmount
				TransientFinanceCurrencyAmt.ToAlternateAmount 	= TransientPaymentAmount.ToAlternateAmount
				TransientFinanceCurrencyAmt.ToAlternateAmount2 	= TransientPaymentAmount.ToAlternateAmount2
				TransientFinanceCurrencyAmt.ToAlternateAmount3 	= TransientPaymentAmount.ToAlternateAmount3
				TransientFinanceCurrencyAmt.ProjectAmount 		= TransientPaymentAmount.ProjectAmount
				TransientFinanceCurrencyAmt.ReportAmount1 		= TransientPaymentAmount.ReportAmount1
				TransientFinanceCurrencyAmt.ReportAmount2 		= TransientPaymentAmount.ReportAmount2
				TransientFinanceCurrencyAmt.ReportAmount3 		= TransientPaymentAmount.ReportAmount3
				TransientFinanceCurrencyAmt.ReportAmount4 		= TransientPaymentAmount.ReportAmount4
				TransientFinanceCurrencyAmt.ReportAmount5 		= TransientPaymentAmount.ReportAmount5

				initialize TransientFinanceCurrencyAmt.FunctionalAmount.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.AlternateAmount.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.AlternateAmount2.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.AlternateAmount3.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ToFunctionalAmount.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ToAlternateAmount.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ToAlternateAmount2.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ToAlternateAmount3.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ProjectAmount.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ReportAmount1.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ReportAmount2.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ReportAmount3.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ReportAmount4.EnteredCurrencyRate
				initialize TransientFinanceCurrencyAmt.ReportAmount5.EnteredCurrencyRate

				DistributionAmount.FunctionalAmount 	= TransientPaymentAmount.FunctionalAmount
				DistributionAmount.AlternateAmount 		= TransientPaymentAmount.AlternateAmount
				DistributionAmount.AlternateAmount2 	= TransientPaymentAmount.AlternateAmount2
				DistributionAmount.AlternateAmount3 	= TransientPaymentAmount.AlternateAmount3
				DistributionAmount.ToFunctionalAmount 	= TransientPaymentAmount.ToFunctionalAmount
				DistributionAmount.ToAlternateAmount 	= TransientPaymentAmount.ToAlternateAmount
				DistributionAmount.ToAlternateAmount2 	= TransientPaymentAmount.ToAlternateAmount2
				DistributionAmount.ToAlternateAmount3 	= TransientPaymentAmount.ToAlternateAmount3
				DistributionAmount.ProjectAmount 		= TransientPaymentAmount.ProjectAmount
				DistributionAmount.ReportAmount1 		= TransientPaymentAmount.ReportAmount1
				DistributionAmount.ReportAmount2 		= TransientPaymentAmount.ReportAmount2
				DistributionAmount.ReportAmount3 		= TransientPaymentAmount.ReportAmount3
				DistributionAmount.ReportAmount4 		= TransientPaymentAmount.ReportAmount4
				DistributionAmount.ReportAmount5 		= TransientPaymentAmount.ReportAmount5

				initialize DistributionAmount.FunctionalAmount.EnteredCurrencyRate
				initialize DistributionAmount.AlternateAmount.EnteredCurrencyRate
				initialize DistributionAmount.AlternateAmount2.EnteredCurrencyRate
				initialize DistributionAmount.AlternateAmount3.EnteredCurrencyRate
				initialize DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
				initialize DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
				initialize DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
				initialize DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
				initialize DistributionAmount.ProjectAmount.EnteredCurrencyRate
				initialize DistributionAmount.ReportAmount1.EnteredCurrencyRate
				initialize DistributionAmount.ReportAmount2.EnteredCurrencyRate
				initialize DistributionAmount.ReportAmount3.EnteredCurrencyRate
				initialize DistributionAmount.ReportAmount4.EnteredCurrencyRate
				initialize DistributionAmount.ReportAmount5.EnteredCurrencyRate

			Action Rules

				include CreateUpdateRules
				include CreateUpdateDeleteRules
				if (TaxCode entered)
					if (!TaxCodeRel.TaxType.TableMember)
						include CalculateTaxAmount
				
			Exit Rules
				if (TaxCodeRel.TaxType.TaxTableCode
				and TaxIndicator.Taxable)

					include DoTaxCodeProcessing		

				GLBaseAmount			= DistributionAmount
				GLTReportCurrencyAmount = DistributionAmount

				if (CreateAlternateGLTransDetail)	
					include CreateAlternateGLTransactionDetail
				else	
				if (!DistributionType.ExpenseAccrual)
					include CreateGLTransactionDetail	
					if (Status.Released
					or Status.Historical)
						include ReleaseGLTransactionDetail
				else
					include CreateGLTransactionDetailAccrualOffset	

				include CreateUpdateDeleteExitRules					
				include UpdateLastUpdatedFields



		CreateFromBatch is a Create Action 
			default label is untranslatable
			restricted
			Parameters
				PrmToAccountingEntity    is like ToAccountingEntity
				PrmAccountingUnit        is like AccountingUnit
				PrmAccount               is like GeneralLedgerChartAccount
				PrmProject               is like Project
				PrmLedger            is like Ledger
				PrmFinanceDimension1 is like FinanceDimension1
				PrmFinanceDimension2 is like FinanceDimension2
				PrmFinanceDimension3 is like FinanceDimension3
				PrmFinanceDimension4 is like FinanceDimension4
				PrmFinanceDimension5 is like FinanceDimension5
				PrmFinanceDimension6 is like FinanceDimension6
				PrmFinanceDimension7 is like FinanceDimension7
				PrmFinanceDimension8 is like FinanceDimension8
				PrmFinanceDimension9 is like FinanceDimension9
				PrmFinanceDimension10 is like FinanceDimension10
				
				PrmGLTransAmount         is like CurrencyAmount
				PrmCurrency              is like Currency
				PrmControlDocumentNumber is Alpha 30
				PrmDocumentNumber        is Alpha 30
				PrmTransactionDate       is an ExchangeDate
				PrmPostingDate           is Date
				PrmDescription           is a Description
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				
			Action Rules
				BypassStructureRelationEdit = true
				CreateFromBatchSwitch = true
				invoke Create this instance
					invoked.GLFinanceCodeBlock.ToAccountingEntity 			= PrmToAccountingEntity
					invoked.GLFinanceCodeBlock.AccountingUnit 				= PrmAccountingUnit
					invoked.GLFinanceCodeBlock.GeneralLedgerChartAccount 	= PrmAccount
					invoked.GLFinanceCodeBlock.Project						= PrmProject
					invoked.GLFinanceCodeBlock.Ledger                       = PrmLedger
					invoked.GLFinanceCodeBlock.FinanceDimension1            = PrmFinanceDimension1
					invoked.GLFinanceCodeBlock.FinanceDimension2            = PrmFinanceDimension2
					invoked.GLFinanceCodeBlock.FinanceDimension3            = PrmFinanceDimension3
					invoked.GLFinanceCodeBlock.FinanceDimension4            = PrmFinanceDimension4
					invoked.GLFinanceCodeBlock.FinanceDimension5            = PrmFinanceDimension5
					invoked.GLFinanceCodeBlock.FinanceDimension6            = PrmFinanceDimension6
					invoked.GLFinanceCodeBlock.FinanceDimension7            = PrmFinanceDimension7
					invoked.GLFinanceCodeBlock.FinanceDimension8            = PrmFinanceDimension8
					invoked.GLFinanceCodeBlock.FinanceDimension9            = PrmFinanceDimension9
					invoked.GLFinanceCodeBlock.FinanceDimension10           = PrmFinanceDimension10          
					
					
					invoked.GLTransactionAmount 							= PrmGLTransAmount
					invoked.GLTCurrencyCode                                 = PrmCurrency
					invoked.GLTTransactionDate                              = PrmTransactionDate
					invoked.GLTPostingDate                                  = PrmPostingDate
					invoked.GLTControlDocumentNumber                        = PrmControlDocumentNumber
					invoked.GLTDocumentNumber                               = PrmDocumentNumber
					invoked.Description                                     = PrmDescription
					invoked.DistributionReference                           = PrmReference
					invoked.GLTJournalizeGroup                              = PrmJournalizeGroup  
					invoked.TransientBypassErrorUpdate					    = true
				BypassDistActionExitRules = true				



		CreateFromBatchMatchDiscount is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmToAccountingEntity    is like ToAccountingEntity
				PrmAccountingUnit        is like AccountingUnit
				PrmAccount               is like GeneralLedgerChartAccount
				PrmProject               is like Project
				PrmLedger            is like Ledger
				PrmFinanceDimension1 is like FinanceDimension1
				PrmFinanceDimension2 is like FinanceDimension2
				PrmFinanceDimension3 is like FinanceDimension3
				PrmFinanceDimension4 is like FinanceDimension4
				PrmFinanceDimension5 is like FinanceDimension5
				PrmFinanceDimension6 is like FinanceDimension6
				PrmFinanceDimension7 is like FinanceDimension7
				PrmFinanceDimension8 is like FinanceDimension8
				PrmFinanceDimension9 is like FinanceDimension9
				PrmFinanceDimension10 is like FinanceDimension10
				
				PrmGLTransAmount         is like CurrencyAmount
				PrmCurrency              is like Currency
				PrmControlDocumentNumber is Alpha 30
				PrmDocumentNumber        is Alpha 30
				PrmTransactionDate       is an ExchangeDate
				PrmPostingDate           is Date
				PrmDescription           is a Description
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmGeneralLedgerEvent	 is like GeneralLedgerEvent
				
			Action Rules
				BypassStructureRelationEdit = true
				CreateFromBatchSwitch = true
				invoke Create this instance
					invoked.GLFinanceCodeBlock.ToAccountingEntity 			= PrmToAccountingEntity
					invoked.GLFinanceCodeBlock.AccountingUnit 				= PrmAccountingUnit
					invoked.GLFinanceCodeBlock.GeneralLedgerChartAccount 	= PrmAccount
					invoked.GLFinanceCodeBlock.Project						= PrmProject
					invoked.GLFinanceCodeBlock.Ledger                       = PrmLedger
					invoked.GLFinanceCodeBlock.FinanceDimension1            = PrmFinanceDimension1
					invoked.GLFinanceCodeBlock.FinanceDimension2            = PrmFinanceDimension2
					invoked.GLFinanceCodeBlock.FinanceDimension3            = PrmFinanceDimension3
					invoked.GLFinanceCodeBlock.FinanceDimension4            = PrmFinanceDimension4
					invoked.GLFinanceCodeBlock.FinanceDimension5            = PrmFinanceDimension5
					invoked.GLFinanceCodeBlock.FinanceDimension6            = PrmFinanceDimension6
					invoked.GLFinanceCodeBlock.FinanceDimension7            = PrmFinanceDimension7
					invoked.GLFinanceCodeBlock.FinanceDimension8            = PrmFinanceDimension8
					invoked.GLFinanceCodeBlock.FinanceDimension9            = PrmFinanceDimension9
					invoked.GLFinanceCodeBlock.FinanceDimension10           = PrmFinanceDimension10          
					
					
					invoked.GLTGeneralLedgerEvent							= PrmGeneralLedgerEvent
					invoked.GLTransactionAmount 							= PrmGLTransAmount
					invoked.GLTCurrencyCode                                 = PrmCurrency
					invoked.GLTTransactionDate                              = PrmTransactionDate
					invoked.GLTPostingDate                                  = PrmPostingDate
					invoked.GLTControlDocumentNumber                        = PrmControlDocumentNumber
					invoked.GLTDocumentNumber                               = PrmDocumentNumber
					invoked.Description                                     = PrmDescription
					invoked.DistributionAmount.ExchangeDate					= PrmTransactionDate		
					invoked.DistributionReference                           = PrmReference
					invoked.GLTJournalizeGroup                              = PrmJournalizeGroup  
					invoked.TransientBypassErrorUpdate					    = true
					invoked.BypassActiveCodeBlockEdit 						= true		
				BypassDistActionExitRules = true				



		BypassCreateFromBatchAccrualCode is a Create Action
			default label is untranslatable
			restricted
			bypass field rules
			Parameters
				PrmPayablesCompany		 is like PayablesCompany
				PrmPayablesInvoice		 is like PayablesInvoice
				PrmPayablesAccrualCode	 is like PayablesAccrualCode
				PrmPaymentSequence		 is a PaymentSequence
				PrmVoidSequence			 is a VoidSequence
				PrmGLTransAmount         is like CurrencyAmount
				PrmCurrency              is like Currency
				PrmControlDocumentNumber is Alpha 30
				PrmDocumentNumber        is Alpha 30
				PrmTransactionDate       is an ExchangeDate
				PrmPostingDate           is Date
				PrmDescription           is a Description
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmGeneralLedgerEvent	 is like GeneralLedgerEvent
				PrmFromPayment			 is Boolean
				PrmProcessLevel			 is like PayablesProcessLevel
				PrmInvoiceType			 is a PayablesInvoiceType
			Parameter Rules
				PrmPayablesAccrualCode
					required
			Action Rules
				BypassStructureRelationEdit = true
				CreateFromBatchSwitch	= true
				LocalPayablesCompany	= PrmPayablesCompany
				LocalAccrualCode		= PrmPayablesAccrualCode
				LocalPayablesInvoice	= PrmPayablesInvoice
				LocalPaymentSequence	= PrmPaymentSequence
				LocalVoidSequence		= PrmVoidSequence

				invoke Create this instance
					if (PrmFromPayment)
						invoked.Company							= PrmPayablesCompany
						invoked.PayablesInvoice					= PrmPayablesInvoice
						invoked.ProcessLevel					= PrmProcessLevel
						invoked.PostingOption					= "S"
						invoked.InvoiceType						= PrmInvoiceType
						invoked.DistributionType				= "Y"
						invoked.DistributionDate				= PrmTransactionDate
						invoked.Status							= 1
					invoked.GLFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.GLTTransactionCodeBlock			= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.DistributionAccount				= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.CreateAlternateGLTransDetail	= true
					invoked.BypassUpdatingInvoiceTotals		= true
					invoked.TransientBypassErrorUpdate		= true
					invoked.BypassActiveCodeBlockEdit 		= true		
					invoked.GLTJournalizeGroup          	= PrmJournalizeGroup  
					invoked.GLTPostingDate              	= PrmPostingDate
					invoked.GLTSystem						= "AP"
					if (PrmGeneralLedgerEvent entered)
						invoked.GLTGeneralLedgerEvent		= PrmGeneralLedgerEvent
					else
						invoked.GLTGeneralLedgerEvent		= "AP"
					invoked.GLTAutoReverse					= false
					invoked.GLTControlDocumentNumber    	= PrmControlDocumentNumber
					invoked.GLTCurrencyCode             	= PrmCurrency
					invoked.InvoiceCurrency             	= PrmCurrency
					invoked.DistributionReference           = PrmReference
					invoked.Description		              	= PrmDescription
					invoked.GLTDocumentNumber           	= PrmDocumentNumber
					invoked.GLTransactionAmount 			= PrmGLTransAmount
					invoked.TransientPaymentAmount			= blank
					invoked.GLTTransactionDate          	= PrmTransactionDate
					invoked.DistributionAmount.ExchangeDate	= PrmTransactionDate		
				


		CreateFromBatchCashCode is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmGeneralLedgerCompany	is like GeneralLedgerCompany
				PrmCashCode				is like CashCode
				PrmGLTransAmount         is like CurrencyAmount
				PrmCurrency              is like Currency
				PrmControlDocumentNumber is Alpha 30
				PrmDocumentNumber        is Alpha 30
				PrmTransactionDate       is an ExchangeDate
				PrmPostingDate           is Date
				PrmDescription           is a Description
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmPayablesCompany		 is like PayablesCompany
				PrmPayablesInvoice		 is like PayablesInvoice
				PrmPaymentSequence		 is a PaymentSequence
				PrmVoidSequence			 is a VoidSequence
				PrmFromPayment			 is Boolean
				PrmProcessLevel			 is like PayablesProcessLevel
				PrmInvoiceType			 is a PayablesInvoiceType
			Parameter Rules
				PrmCashCode
					required
			Action Rules
				BypassStructureRelationEdit = true
				CreateFromBatchSwitch		= true
				LocalCompany				= PrmGeneralLedgerCompany
				LocalCashCode				= PrmCashCode
				LocalPayablesCompany		= PrmPayablesCompany
				LocalPayablesInvoice		= PrmPayablesInvoice
				LocalPaymentSequence		= PrmPaymentSequence
				LocalVoidSequence			= PrmVoidSequence
				invoke Create this instance
					if (PrmFromPayment)
						invoked.Company							= PrmPayablesCompany
						invoked.PayablesInvoice					= PrmPayablesInvoice
						invoked.ProcessLevel					= PrmProcessLevel
						invoked.PostingOption					= "S"
						invoked.InvoiceType						= PrmInvoiceType
						invoked.DistributionType				= "P"
						invoked.DistributionDate				= PrmTransactionDate
						invoked.Status							= 1
					invoked.GLFinanceCodeBlock				= CompanyCashCodeRel.CashAccount
					invoked.GLTTransactionCodeBlock			= CompanyCashCodeRel.CashAccount
					invoked.DistributionAccount				= CompanyCashCodeRel.CashAccount
					invoked.CreateAlternateGLTransDetail	= true
					invoked.BypassUpdatingInvoiceTotals		= true
					invoked.TransientBypassErrorUpdate		= true
					invoked.BypassActiveCodeBlockEdit 		= true		
					invoked.GLTJournalizeGroup          	= PrmJournalizeGroup  
					invoked.GLTPostingDate              	= PrmPostingDate
					invoked.GLTSystem						= "AP"
					invoked.GLTGeneralLedgerEvent			= "AP"
					invoked.GLTAutoReverse					= false
					invoked.GLTControlDocumentNumber    	= PrmControlDocumentNumber
					invoked.GLTCurrencyCode             	= PrmCurrency
					invoked.InvoiceCurrency             	= PrmCurrency
					invoked.DistributionAmount.ExchangeDate	= PrmTransactionDate		
					invoked.DistributionReference           = PrmReference
					invoked.Description		              	= PrmDescription
					invoked.GLTDocumentNumber           	= PrmDocumentNumber
					invoked.GLTransactionAmount 			= PrmGLTransAmount
					invoked.GLTTransactionDate          	= PrmTransactionDate
					invoked.TransientPayablesInvoicePayment	= PayablesInvoicePaymentRel.PayablesInvoicePayment
				
				BypassDistActionExitRules = true				
				
				

		BypassCreateFromBatchMatchDiscAccr is a Create Action
			default label is untranslatable
			restricted
			bypass field rules
			Parameters
				PrmMatchCompany			 is like MatchCompany
				PrmPayablesInvoice		 is like PayablesInvoice
				PrmGLTransAmount         is like CurrencyAmount
				PrmCurrency              is like Currency
				PrmControlDocumentNumber is Alpha 30
				PrmDocumentNumber        is Alpha 30
				PrmTransactionDate       is an ExchangeDate
				PrmPostingDate           is Date
				PrmDescription           is a Description
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmFromPayment			 is Boolean
				PrmPayablesCompany		 is like PayablesCompany
				PrmProcessLevel			 is like PayablesProcessLevel
				PrmInvoiceType			 is a PayablesInvoiceType
			Parameter Rules
				PrmMatchCompany
					required
			Action Rules
				BypassStructureRelationEdit = true
				CreateFromBatchSwitch		= true
				LocalMatchCompany			= PrmMatchCompany
				LocalPayablesCompany		= PrmMatchCompany
				LocalPayablesInvoice		= PrmPayablesInvoice

				invoke Create this instance
					if (PrmFromPayment)
						invoked.Company							= PrmPayablesCompany
						invoked.PayablesInvoice					= PrmPayablesInvoice
						invoked.ProcessLevel					= PrmProcessLevel
						invoked.PostingOption					= "S"
						invoked.InvoiceType						= PrmInvoiceType
						invoked.DistributionType				= "Y"
						invoked.DistributionDate				= PrmTransactionDate
						invoked.Status							= 1
					invoked.GLFinanceCodeBlock				= LocalMatchCompanyRel.DiscountAccrualAccount
					invoked.GLTTransactionCodeBlock			= LocalMatchCompanyRel.DiscountAccrualAccount
					invoked.DistributionAccount				= LocalMatchCompanyRel.DiscountAccrualAccount
					invoked.CreateAlternateGLTransDetail	= true
					invoked.BypassUpdatingInvoiceTotals		= true
					invoked.TransientBypassErrorUpdate		= true
					invoked.BypassActiveCodeBlockEdit 		= true		
					invoked.GLTJournalizeGroup          	= PrmJournalizeGroup  
					invoked.GLTPostingDate              	= PrmPostingDate
					invoked.GLTSystem						= "AP"
					invoked.GLTGeneralLedgerEvent			= "AP"
					invoked.GLTAutoReverse					= false
					invoked.GLTControlDocumentNumber    	= PrmControlDocumentNumber
					invoked.GLTCurrencyCode             	= PrmCurrency
					invoked.DistributionReference           = PrmReference
					invoked.Description		              	= PrmDescription
					invoked.GLTDocumentNumber           	= PrmDocumentNumber
					invoked.GLTransactionAmount 			= PrmGLTransAmount
					invoked.GLTTransactionDate          	= PrmTransactionDate
					invoked.DistributionAmount.ExchangeDate	= PrmTransactionDate
				


		CreateGainLossFromBatchNoParms is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				BypassStructureRelationEdit	= true
				BypassUnitAndAmountEdit		= true
				CreateFromBatchSwitch		= true
				CreateGainLossSwitch		= true
				GLBaseAmount				= DistributionAmount
				GLTPostingDate				= DistributionDate		
				invoke Create this instance
					invoked.GLFinanceCodeBlock 			= DistributionAccount
					if (GLTGeneralLedgerEvent	!entered)
						invoked.GLTGeneralLedgerEvent	= "AP"
					invoked.TransientBypassErrorUpdate		= true
					invoked.BypassActiveCodeBlockEdit 		= true		

				BypassDistActionExitRules = true				

		

		CreateFromBatchNoParms is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				BypassStructureRelationEdit 	= true
				CreateFromBatchSwitch 			= true
				BypassDistActionExitRules 		= false
				if (DistributionType.Distribution)
					initialize DistributionDate
					initialize DistributionAmount.ExchangeDate
					initialize DistributionAmount.FunctionalAmount
					initialize DistributionAmount.AlternateAmount
					initialize DistributionAmount.AlternateAmount2
					initialize DistributionAmount.AlternateAmount3
					initialize DistributionAmount.ToFunctionalAmount
					initialize DistributionAmount.ToAlternateAmount
					initialize DistributionAmount.ToAlternateAmount2
					initialize DistributionAmount.ToAlternateAmount3
					initialize DistributionAmount.ProjectAmount
					initialize DistributionAmount.ReportAmount1
					initialize DistributionAmount.ReportAmount2
					initialize DistributionAmount.ReportAmount3
					initialize DistributionAmount.ReportAmount4
					initialize DistributionAmount.ReportAmount5
				invoke Create this instance
					invoked.GLFinanceCodeBlock    	= DistributionAccount	
					if (GLTGeneralLedgerEvent	!entered)
						invoked.GLTGeneralLedgerEvent	= "AD"
					invoked.GLTransactionAmount		= DistributionAmount.CurrencyAmount
					invoked.TransientBypassErrorUpdate					    = true
				if (DistributionType.Distribution)	
					invoke AdjustDistributionsForCurrencyRounding PayablesInvoice 
		

		CreateFromBatchAPTransactions is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmDistributionAccount   is like FinanceCodeBlock
				PrmTaxCode				 is like TaxCode
				PrmTaxableAmount		 is an InternationalAmount
				PrmGLTransAmount         is like CurrencyAmount
				PrmCurrency              is like Currency
				PrmControlDocumentNumber is Alpha 30
				PrmDocumentNumber        is Alpha 30
				PrmTransactionDate       is an ExchangeDate
				PrmPostingDate           is Date
				PrmDescription           is a Description
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmGeneralLedgerEvent	 is like GeneralLedgerEvent
			Action Rules
				BypassStructureRelationEdit = true
				CreateFromBatchSwitch = true
				invoke Create this instance
					invoked.GLFinanceCodeBlock                              = PrmDistributionAccount
					invoked.GLTTransactionCodeBlock                         = PrmDistributionAccount
					invoked.GLTSystem										= "AP"
					if (PrmGeneralLedgerEvent entered)
						invoked.GLTGeneralLedgerEvent						= PrmGeneralLedgerEvent
					else
						invoked.GLTGeneralLedgerEvent						= "AP"
					invoked.CreateAlternateGLTransDetail					= true
					invoked.BypassUpdatingInvoiceTotals						= true
					invoked.TransientBypassErrorUpdate					    = true
					invoked.BypassActiveCodeBlockEdit 						= true		
					invoked.GLTransactionAmount 							= PrmGLTransAmount
					invoked.TaxCode											= PrmTaxCode
					invoked.TaxableAmount									= PrmTaxableAmount
					invoked.GLTCurrencyCode                                 = PrmCurrency
					invoked.InvoiceCurrency             					= PrmCurrency
					invoked.GLTTransactionDate                              = PrmTransactionDate
					invoked.GLTPostingDate                                  = PrmPostingDate
					invoked.GLTControlDocumentNumber                        = PrmControlDocumentNumber
					invoked.GLTDocumentNumber                               = PrmDocumentNumber
					invoked.Description		                                = PrmDescription
					invoked.DistributionAmount.ExchangeDate					= PrmTransactionDate		
					invoked.DistributionReference                           = PrmReference
					invoked.GLTJournalizeGroup                              = PrmJournalizeGroup
					


		CreateFromBatchAPTransactionsFullCurrency is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmDistributionAccount   is like FinanceCodeBlock
				PrmGLTransAmount         is like CurrencyAmount
				PrmCurrency              is like Currency
				PrmGLCurrAmount			 is a FinanceCurrencyAmount
				PrmControlDocumentNumber is Alpha 30
				PrmDocumentNumber        is Alpha 30
				PrmTransactionDate       is an ExchangeDate
				PrmPostingDate           is Date
				PrmDescription           is a Description
				PrmReference             is a Reference
				PrmJournalizeGroup       is like JournalizeGroup
				PrmGeneralLedgerEvent	 is like GeneralLedgerEvent
			Action Rules
				BypassStructureRelationEdit = true
				CreateFromBatchSwitch = true
				invoke Create this instance
					invoked.GLFinanceCodeBlock                              = PrmDistributionAccount
					invoked.GLTTransactionCodeBlock                         = PrmDistributionAccount
					invoked.GLTSystem										= "AP"
					if (PrmGeneralLedgerEvent entered)
						invoked.GLTGeneralLedgerEvent						= PrmGeneralLedgerEvent
					else
						invoked.GLTGeneralLedgerEvent						= "AP"
					invoked.CreateAlternateGLTransDetail					= true
					invoked.BypassUpdatingInvoiceTotals						= true
					invoked.TransientBypassErrorUpdate					    = true
					invoked.BypassActiveCodeBlockEdit 						= true		
					invoked.GLTransactionAmount 							= PrmGLTransAmount
					invoked.GLTCurrencyCode                                 = PrmCurrency
					invoked.InvoiceCurrency             					= PrmCurrency
					invoked.GLTTransactionDate                              = PrmTransactionDate
					invoked.GLTPostingDate                                  = PrmPostingDate
					invoked.GLTControlDocumentNumber                        = PrmControlDocumentNumber
					invoked.GLTDocumentNumber                               = PrmDocumentNumber
					invoked.Description                                     = PrmDescription
					invoked.DistributionAmount.ExchangeDate					= PrmTransactionDate		
					invoked.DistributionReference                           = PrmReference
					invoked.GLTJournalizeGroup                              = PrmJournalizeGroup
					invoked.DistributionAmount								= PrmGLCurrAmount



		CreateFromMatch is a Create Action		
			default label is untranslatable
			restricted
			Entrance Rules
				initialize TransientFinanceCurrencyAmt
				BypassActiveCodeBlockEdit = true
				if (TaxCode entered)
        		    BypassUnitAndAmountEdit = true

				LocalCurrencyTable							= PayablesInvoice.CurrencyTable
				AccountingEntity 							= GeneralLedgerCompanyRel.AccountingEntity		
				GLTSystem	= "AP"
				ProjectPostingDate							= DistributionDate				
				TransactionDate								= PayablesInvoice.InvoiceDate	
				ActionType 									= ActionType.CreateType

				if (GLFinanceCodeBlock.ToAccountingEntity entered
				and TaxAccountingEntity not entered)	
					TaxAccountingEntity	=	GLFinanceCodeBlock.ToAccountingEntity

				InvoiceCurrency = PayablesInvoice.InvoiceCurrency
				GLTCurrencyCode = PayablesInvoice.InvoiceCurrency

				Vendor										= PayablesInvoice.Vendor
				Invoice										= PayablesInvoice.Invoice
				Suffix										= PayablesInvoice.Suffix
				CancelSequence								= PayablesInvoice.CancelSequence
				if (DistributionDate not entered)
					DistributionDate						= PayablesInvoice.DistributionDate
				ProcessLevel								= PayablesInvoice.ProcessLevel

				if (AccrualCode not entered)
					if (Retainage)
						AccrualCode							= PayablesInvoice.RetainageAccrualCode
					else 
						AccrualCode							= PayablesInvoice.AccrualCode

				CreatedBy									= actor

				BaseNumberOfDecimals						= Company.CurrencyNumberOfDecimals
				NumberOfDecimals							= PayablesInvoice.NumberOfDecimals
				ToBaseNumberOfDecimals						= BaseNumberOfDecimals
		
				if (GLFinanceCodeBlock.ToAccountingEntity entered
				and TaxAccountingEntity not entered)	
					TaxAccountingEntity	=	GLFinanceCodeBlock.ToAccountingEntity
				
				if (PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate entered)
					GLTKeepRateOnly = true

				else
					GLTKeepRateOnly = false

				LocalDocumentCurrencyTotals = PayablesInvoice.TotalDistributionAmount
				
				if (TaxCode entered
				and TaxCode != "00")
					LocalTaxEntity	= TaxAccountingEntity
					constraint (TaxEntityRel exists)
						"TaxEntityDoesNotExistForEntity<LocalTaxEntity>"
					if (TaxEntityRel.UseTaxCodeAccounts)
						TransientTaxCode = TaxCode 
						constraint (EntityTaxCode2Rel exists)
							"EntityTaxCodeDoesNotExistForToAccountingEntity"

					initialize UnitAmount
					if (TaxEntityUsesThirdPartyTax)
						TaxType = DerivedTaxMethodInvOrAcc
					else
						if (IsInvoicedTaxDistribution)
							TaxType	= TaxType.Invoiced
						else
						if (IsAccruedTaxDistribution)
							TaxType	= TaxType.Accrued
	
					if  (TaxableAmount not entered)
						if (AddOnCharge entered) 
							if (PayablesInvoiceAddOnChargeRel.TotalDistributionAmount entered)
								TaxableAmount = PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
						    else
								TaxableAmount = DistributionAmount.CurrencyAmount
						else 
					    if (PayablesInvoiceDetail.TotalDistributionAmount entered)
					    	TaxableAmount = PayablesInvoiceDetail.TotalDistributionAmount
					    else
							TaxableAmount = DistributionAmount.CurrencyAmount

				if  (PurchaseOrderLine entered
				and  PurchaseOrderLine.Contract entered)
					PurchasingContract					= PurchaseOrderLine.Contract
					ContractLine						= PurchaseOrderLine.ContractLine




				include UpdatePersistentFields




				if (TaxCode entered
				and PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)
					for each PurchaseOrderLine.PurchaseOrderLineComment set							
						if (each.CommentType = "O"
						and each.CommentTitle = "TaxingJurisdiction")
							TransientTaxingJurisdiction = each.CommentText									

		        if (DistributionAccount.GeneralLedgerChartAccount.AllowUnits.No
		        or (DistributionAccount.GeneralLedgerChartAccount.AllowUnits.NotRequired
				and TaxCode entered))		        
        		    initialize UnitAmount				    				

				if (TaxCode entered						
				and DistributionType.Distribution
				and TaxUsageCode not entered)
					if 	(AddOnCharge entered
					and  PayablesInvoiceAddOnChargeRel exists)
						TaxUsageCode = PayablesInvoiceAddOnChargeRel.TaxUsageCode
					else
					if 	(PayablesInvoiceDetail entered
					and  PayablesInvoiceDetailRel exists)
						TaxUsageCode = PayablesInvoiceDetailRel.TaxUsageCode

			Field Rules
				DistributionAccount
					if  (PayablesInvoiceDetail.EAMWorkOrder entered)

						default to PayablesInvoiceDetail.EAMWorkOrder.DistributionAccount
							default individual fields

						default to PayablesInvoiceDetail.EAMTradeAccountOverrideRel.OverrideAccount
							default individual fields

						default to PurchaseOrderLineDistributionRel.DistributionAccount
							default individual fields


			Action Rules
				if (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic
				and TaxEntityUsesSabrix 
				and IsTaxDistribution)
				    NextSentence = true
				else
				if (PayablesInvoiceDetail.ItemType entered
				and !PayablesInvoiceDetail.ItemType.Inventoried)
				    initialize MatchCreated

			Exit Rules
				include CreateGLTransactionDetail	
				

				LocalEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup

				if (Status.Released
				or  Status.Historical)
					invoke Release GLTransactionDetailRel

				if (!PayablesInvoice.MatchProcessType.Expense)
					TransientBypassErrorUpdate = true
				include CreateUpdateDeleteExitRules
				

				if (TaxCode entered
				and TaxPoint not entered)
					TaxPoint = DerivedTaxPoint

				if (FromUnmatch
				and TaxCode entered
				and Status.Released)
					invoke 585BuildTxTaxTrans
						invoked.ReversalPostDate = TransientReversalPostDate
				else
				if (VATReverse)
					invoke 585BuildTxTaxTrans
					
				include UpdateLastUpdatedFields

				if  (PayablesInvoice.RetainageAccrualCode entered
				and !PayablesInvoice.CreditForRebill)

					invoke Create PayablesInvoiceRetainageDistribution
						fill in fields from this instance
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice 				= PayablesInvoice
						if (Retainage)
							invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence 	= PayablesInvoice.LastPaymentSequence + 1
						else
							invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence 	= PayablesInvoice.LastPaymentSequence

						invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine 				= PurchaseOrderLine 
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution 	= PayablesInvoiceDistribution
						invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence 		= PayablesInvoiceDetail
						invoked.Contract 															= PurchasingContract
						invoked.ContractLine														= ContractLine 
						invoked.PaymentAmount														= DistributionAmount.CurrencyAmount
						invoked.Contract            												= PurchasingContract
						if (Retainage)
							invoked.RetainagePercentage												= PayablesInvoiceDetail.GetRetainage.RetainagePercent	
						invoked.RetainageCalculatedAmount 											= PayablesInvoiceDetail.TotalDistributionAmount

				if  (PayablesInvoice.MatchPrepayment
				and  PayablesInvoice.Status > 0
				and  Status.Unreleased)
					TransientReleaseAfterCreate	= true
					invoke Unreleased.Release

				if  (TaxCode entered
				and  PayablesInvoiceDetail entered
				and  InvoiceTaxEntityRel.ThirdParty.Sabrix
				and  PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)
					if (AddOnCharge entered
					and PayablesInvoiceAddOnChargeRel.TaxCode not entered)									
						invoke FastUpdate PayablesInvoiceAddOnChargeRel
							invoked.TaxAmount 						+= DistributionAmount.CurrencyAmount
							invoked.TaxCode							= TaxCode
							invoked.InvoiceLineTaxable				= true				 	
					else
					if (AddOnCharge not entered
					and first PayablesInvoiceDetailRel.TaxCode not entered)									
						invoke FastUpdate PayablesInvoiceDetailRel
							invoked.TaxAmount 						+= DistributionAmount.CurrencyAmount
							invoked.TaxCode							= TaxCode
							invoked.InvoiceLineTaxable				= true				 	



		CreateAccrualOffset is a Create Action			 






			restricted
			Action Rules

				ActionType = ActionType.CreateType
				BypassActiveCodeBlockEdit = true		
				include SetAccountingEntityForContext
				include SetGLTSystemForContext


				

				if (GLFinanceCodeBlock !entered	
				and DistributionAccount	entered)
					GLFinanceCodeBlock	= DistributionAccount

				if (DistributionDate entered)
					ProjectPostingDate	= DistributionDate				
				else
					ProjectPostingDate	= PayablesInvoice.DistributionDate
				
				TransactionDate			= PayablesInvoice.InvoiceAmount.ExchangeDate 	




			Exit Rules



				invoke UpdateSnapshotFields

				include DoProjectContractProcessing		

				include CreateGLTransactionDetailAccrualOffset

				include UpdateLastUpdatedFields









		CalculateDistributionSummary is an Instance Action 
			restricted 
			Action Rules 
				BypassActiveCodeBlockEdit = true
				if (PayablesInvoiceDistributionSummaryRel exists)
					invoke Update first PayablesInvoiceDistributionSummaryRel 
						invoked.InputAmount             = DistributionAmount.CurrencyAmount 
				else 
					invoke Create PayablesInvoiceDistributionSummary 
						invoked.Company 		= Company 
						invoked.SummaryAccount  = DistributionAccount
						invoked.PayablesInvoice = PayablesInvoice 
						invoked.SummaryAmount   = DistributionAmount.CurrencyAmount 

		CalculateDistributionAggregation is an Instance Action
            restricted
            Local Fields
				LocalAPDistributionAggregation	is a APDistributionAggregation view
			Action Rules
                BypassActiveCodeBlockEdit = true
                LocalBoolean = LocalMatrixDimensionAccount.SetMatrixDimensions
                if (APDistributionAggregationRel exists)
                    invoke CalculateAggregationUpdate first APDistributionAggregationRel
                        invoked.InputAmount         = DistributionAmount.CurrencyAmount
					DistributionAggregation			= first APDistributionAggregationRel.APDistributionAggregation
                else
                    invoke Create APDistributionAggregation
						assign result to LocalAPDistributionAggregation
                        invoked.Company             = Company
                        invoked.SummaryAccount      = LocalMatrixDimensionAccount
                        invoked.PayablesInvoice     = PayablesInvoice
                        invoked.SummaryAmount       = DistributionAmount.CurrencyAmount
                        invoked.Status              = 0
					DistributionAggregation			= LocalAPDistributionAggregation.APDistributionAggregation
		
		RecalculateCommitmentAmounts is an Instance Action
			restricted
			Action Rules

				if  (PayablesInvoice.MatchProcessType.Expense)
				
					invoke Purge GLCommitRel
						invoked.PrmPurgeRecalculate = true					
				
					if (!Status.Historical)
						invoke CreateCommitment










		


		MatchVATAccrualProcessing is an Instance Action
			default label is untranslatable
			restricted
			Action Rules


				LocalPayablesCompany	= Company
				LocalTaxEntity			= TaxAccountingEntity
				if (!TaxEntityRel.UseTaxCodeAccounts)
					if (TaxEntityRel.AccrualCode entered)
						LocalAccrualCode	= TaxEntityRel.AccrualCode
				else
					if (EntityTaxCodeRel.AccrualCode entered)
						LocalAccrualCode	= EntityTaxCodeRel.AccrualCode
				if (LocalAccrualCode not entered)
					LocalAccrualCode		= PayablesInvoice.AccrualCode




				invoke Create PayablesInvoiceDistribution
					fill in fields from this instance
						except invoked.TransientReferenceToThisInstance
						except invoked.TaxCode
						except invoked.TaxableAmount
						except invoked.DistributionAccount
						except invoked.GLFinanceCodeBlock
						except invoked.DistributionCode
						except invoked.DistributionAmount
						except invoked.GLTransactionAmount
						except invoked.PayablesInvoiceDistributionObjectID
						except invoked.GltObjId
						except invoked.PayablesInvoiceDetail
						except invoked.PayablesInvoiceDetail
						except invoked.PurchaseOrder
						except invoked.PurchaseOrderLine
						except invoked.PurchasingContract
						except invoked.ContractLine
						except invoked.AddOnCharge
						except invoked.MatchCreated
						except invoked.OriginalDistribution
						except invoked.OriginalPOLineDistribution
						except invoked.OriginalContractLineDistribution

					invoked.DistributionType 							= "A"
					invoked.GLTransactionAmount  	  				   	= DistributionAmount.CurrencyAmount * -1
					invoked.DistributionAmount.CurrencyAmount		   	= DistributionAmount.CurrencyAmount * -1
					invoked.DistributionAmount.KeepRateOnly				= true
					invoked.DistributionDate							= DistributionDate
					invoked.DistributionAmount.ExchangeDate				= PayablesInvoice.InvoiceAmount.ExchangeDate
					invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= DistributionAmount.CurrencyAmount * -1


					invoked.GLFinanceCodeBlock							= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.DistributionAccount							= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.Status										= 1
					invoked.TransientBypassErrorUpdate					= true

				if  (VATReverseIndicator
				and  IsTaxDistribution)
				


					invoke Create PayablesInvoiceDistribution
						fill in fields from this instance
							except invoked.TransientReferenceToThisInstance
							except invoked.DistributionAccount
							except invoked.GLFinanceCodeBlock
							except invoked.DistributionCode
							except invoked.DistributionAmount
							except invoked.GLTransactionAmount
							except invoked.PayablesInvoiceDistributionObjectID
							except invoked.GltObjId
							except invoked.OriginalDistribution
							except invoked.OriginalPOLineDistribution
							except invoked.OriginalContractLineDistribution
	
						invoked.DistributionType 							= "A"
						invoked.GLTransactionAmount  	  				   	= DistributionAmount.CurrencyAmount 
						invoked.DistributionAmount.CurrencyAmount		   	= DistributionAmount.CurrencyAmount 
						invoked.DistributionAmount.KeepRateOnly				= true
						invoked.DistributionDate							= DistributionDate
						invoked.DistributionAmount.ExchangeDate				= PayablesInvoice.InvoiceAmount.ExchangeDate
						invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= DistributionAmount.CurrencyAmount 
	
						invoked.GLFinanceCodeBlock							= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.DistributionAccount							= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.Status										= 1
						invoked.VATReverse									= true
						invoked.TransientBypassErrorUpdate					= true

					invoke CreateFromMatch PayablesInvoiceDistribution
						fill in fields from this instance
							except invoked.TransientReferenceToThisInstance
							except invoked.TaxableAmount
							except invoked.DistributionAccount
							except invoked.GLFinanceCodeBlock
							except invoked.DistributionCode
							except invoked.DistributionAmount
							except invoked.GLTransactionAmount
							except invoked.PayablesInvoiceDistributionObjectID
							except invoked.GltObjId
							except invoked.OriginalDistribution
							except invoked.OriginalPOLineDistribution
							except invoked.OriginalContractLineDistribution
	
						invoked.DistributionType 							= "D"
						invoked.GLTransactionAmount  	  				   	= DistributionAmount.CurrencyAmount * -1 
						invoked.DistributionAmount.CurrencyAmount		   	= DistributionAmount.CurrencyAmount * -1
						invoked.TaxableAmount								= TaxableAmount * -1
						invoked.DistributionAmount.KeepRateOnly				= true
						invoked.DistributionDate							= DistributionDate
						invoked.DistributionAmount.ExchangeDate				= PayablesInvoice.InvoiceAmount.ExchangeDate
						invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= DistributionAmount.CurrencyAmount * -1 
	
						invoked.GLFinanceCodeBlock							= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.DistributionAccount							= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.Status										= 1
						invoked.VATReverse									= true
						invoked.TransientBypassErrorUpdate					= true



		Update is an Update Action
			valid when (!IsNotUpdatable)
			completion message is "<ConfirmationMessage>"
			Entrance Rules

				include VerifyMonitor	
				include SetGLTSystemForContext
				LocalCurrencyTable	= PayablesInvoice.CurrencyTable
				UnitsAmount = UnitAmount		
				if (PayablesInvoice.ForIntercompanyBilling)
					include IntercompanyBillingEdit

				if  (MatchInvoice)
					include CheckInvoiceDetail

			Action Rules

				TaxAccountingEntityHasValue = true   
				ActionType = ActionType.UpdateType
				
				include DoProjectContractProcessing				
					
				if (DistributionAccount.ToAccountingEntity != GLFinanceCodeBlock.ToAccountingEntity)	
					initialize DistributionAmount														
					initialize TaxAccountingEntity														

				include CreateUpdateRules
				include UpdateRules
				
				include CreateUpdateDeleteRules
				
				if (AssetDetailRel.AssetProcessingMessage entered)
					confirmation required
						"<ConfirmationMessage>"

				if (AssetFlag changed
				and !AssetFlag.RepairAsset
				and PurchaseOrderLine.PurchaseOrderLineDistributionsRel.AssetInformation.Asset entered)					
					constraint (false)
						"CannotBeUpdated;AssetIsAssignedToPurchaseOrder"
						
				if (DistributionDate changed
				and !Status.Historical)
					for each TaxTransactionRel
						invoke FastUpdate each
							invoked.PostDate = DistributionDate
					if (PayablesInvoice.DistributionDate != DistributionDate
					and PayablesInvoice.Status.Unreleased)                       
						invoke Update PayablesInvoice	
							invoked.PayablesInvoice.DistributionDate = DistributionDate
								
				OldDistributionAmountGroup	= old DistributionAmount
																				
				include EditVendorAccountRestrictions
				include FlipDistributionAmountFields

			Exit Rules

				include UpdateGLTransactionDetail
				
				if  (!TaxEntityUsesThirdPartyTax		
				and  PayablesInvoice.MatchProcessType.Expense				
				and  Status.Unreleased
				and  LinkedTaxDistributionsRel exists
				and  old TaxIndicator.Taxable
				and  TaxIndicator.None)
					if (old TaxCodeRel.TaxType.TaxTableCode)		
						if  (any LinkedTaxDistributionsRel.TaxType.Invoiced
						and !any LinkedTaxDistributionsRel.TaxType.Accrued)
							TransientLinkedTaxTableCode = 1
						else
							if  (!any LinkedTaxDistributionsRel.TaxType.Invoiced
							and   any LinkedTaxDistributionsRel.TaxType.Accrued)
								TransientLinkedTaxTableCode = 2
							else
								TransientLinkedTaxTableCode = 3
					invoke Delete LinkedTaxDistributionsRel
					initialize TaxCode
					initialize TaxableAmount
					initialize TaxRate
					initialize ProductTaxCategory
					initialize TaxUsageCode
					initialize TaxType		


				if   (!TaxEntityUsesThirdPartyTax		
				and    PayablesInvoice.MatchProcessType.Expense				
				and    Status.Unreleased
				and (((TaxCode changed
				or     ProductTaxCategory changed		
				or     TaxableAmount changed
				or	   DistributionAccount changed)		
				and    LinkedTaxDistributionsRel exists)
				or     PayablesInvoice.TransientUpdateTaxCode	
				or    (TaxIndicator changed
				and    TaxIndicator.Taxable)))
					ActionType = ActionType.CreateType
					include DoTaxCodeProcessing
					ActionType = ActionType.UpdateType
					DoTaxTotalRefresh	= true
				if (TaxCode changed
				or  ProductTaxCategory changed)		
					if (IsTaxDistribution)												
						TaxRate = (DistributionAmount.CurrencyAmount / TaxableAmount)	
					else																
						TaxRate = CalculateTax.OutputTaxRate












					
				if (LinkedTaxDistributionsRel exists)
					if (HSNSACCode changed)		
						for each LinkedTaxDistributionsRel
							invoke Update each
								invoked.HSNSACCode = HSNSACCode
					
				include CreateUpdateDeleteExitRules
				








				
				include UpdateLastUpdatedFields
				if (!PayablesInvoice.MatchProcessType.Expense)
					invoke FastUpdate PayablesInvoiceDetailRel
						invoked.LastUpdateDate = current timestamp
				
				if (CommitmentExists)
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						if (DistributionAccount != GLCommitRel.FinanceCodeBlock
						or  GLTransactionAmount != GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
							invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel	
							invoke FastUpdate PayablesInvoice						
								invoked.BudgetEditProcessing = 0					
							invoke Delete BudgetEditErrorsRel		
							invoke PerformBudgetEdit
								invoked.ParmOldDistributionAmountGroup    = OldDistributionAmountGroup
								invoked.PrmActionType = "U"
								
					if  (ReleasedCommitmentExists)
						include ChangeReleasedCommitment
					else
						if  (PayablesInvoice.MatchProcessType.Expense)
							LocalAllowRebuild = true

						if (!BypassCommitmentUpdate)		
							include MaintainUnreleasedCommitment
							BypassCommitmentUpdate = true	

				if (PayablesInvoice.ForIntercompanyBilling)
					include UpdateIntercompanyBillingTransaction

				if (PayablesInvoice.InvoiceSource.IntercompanyBilling) 
					if (ICBAllowSelectDistributionSet)
						include UpdateIntercompanyBillingSettlementDetailLineDistributionSet


				if  (PayablesInvoiceDetail entered	
				and  TaxCode not entered 
				and  PayablesInvoiceDetail.TaxCode entered
				and  (DistributionAccount changed 
				or    GLFinanceCodeBlock changed)
				and  TaxEntityValue.ThirdParty.VertexOSeries 
				and  TaxEntityValue.TaxAttributeCode entered)
					if (AddOnCharge entered)
						invoke ProcessVertex PayablesInvoiceAddOnChargeRel 
					else 
						invoke ProcessVertex PayablesInvoiceDetail  

				if (PayablesInvoice.MatchProcessType.AOCOnly
				and DistributionAccount changed
				and TaxCode not entered
				and AddOnCharge entered)
					for each AddOnChargeLandedTaxDistributionRel
						invoke UpdateAccount each
							invoked.NewDistributionAccount 	= DistributionAccount
							invoked.BypassConstraint	 	= true
				else						
				if (DistributionAccount changed
				and TaxCode not entered
				and AddOnCharge not entered
				and PayablesInvoiceDetail entered
				and OriginalDistribution entered)
					for each InvoiceDetailLandedTaxDistributionRel
						invoke UpdateAccount each
							invoked.NewDistributionAccount 	= DistributionAccount
							invoked.BypassConstraint	 	= true
						
					for each InvoiceDetailLandedAddOnChargeDistributionRel
						invoke UpdateAccount each
							invoked.NewDistributionAccount 	= DistributionAccount
							invoked.BypassConstraint	 	= true

				if(!Status.Unreleased)
					invoke TriggerSupplierInvoiceBOD PayablesInvoice  






		RestrictedUpdate is an Update Action
			default label is untranslatable
			restricted				
			Entrance Rules

				include SetGLTSystemForContext
				LocalCurrencyTable	= PayablesInvoice.CurrencyTable
				include SetAccountingEntityForContext
			Action Rules
				ActionType = ActionType.UpdateType
				OldDistributionAmountGroup	= old DistributionAmount
				if (!PayablesInvoice.MatchProcessType.Expense
				and !DistributionType.ExpenseAccrual)
				    invoke FastUpdate PayablesInvoice
						invoked.POTaxAmount			+= (DistributionAmount.CurrencyAmount - old DistributionAmount.CurrencyAmount)
				
			Exit Rules

				include UpdateGLTransactionDetail

				if (initiating action = "PayablesInvoice.CalculateRate"
				and CommitmentExists 
				and GLCommitRel.Status.Unreleased)
					include MaintainUnreleasedCommitment 

				if  (!DistributionType.ExpenseAccrual
				and   DistributionAmount.CurrencyAmount changed)
					ActionType = ActionType.UpdateType
					include UpdatePayablesInvoiceDistributionTotals

				if (invoking action = "UpdateAccount" 
				and CommitmentExists)
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						if (DistributionAccount != GLCommitRel.FinanceCodeBlock
						or  GLTransactionAmount != GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
							invoke Delete PayablesInvoice.HeaderBudgetEditErrorRel	
							invoke FastUpdate PayablesInvoice						
								invoked.BudgetEditProcessing = 0					
							invoke Delete BudgetEditErrorsRel		
							invoke PerformBudgetEdit
								invoked.ParmOldDistributionAmountGroup    = OldDistributionAmountGroup
								invoked.PrmActionType = "U"
								
					if  (ReleasedCommitmentExists)
						include ChangeReleasedCommitment
					else
						if  (PayablesInvoice.MatchProcessType.Expense)
							LocalAllowRebuild = true
						if (!BypassCommitmentUpdate)		
							include MaintainUnreleasedCommitment
							BypassCommitmentUpdate = true	

				

		FastUpdate is an Update Action
			default label is untranslatable
			restricted
			bypass field rules



		MatchCurrencyRefreshUpdateSet is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany	is a PayablesCompany
				PrmInvoice	is a PayablesInvoice

			Parameter Rules
				PrmCompany
					required
				PrmInvoice
					required

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmInvoice)

			Action Rules
				Set Rules
					Exit Rules
						invoke AdjustDistributionsForCurrencyRounding PayablesInvoice		
					
				Instance Rules
					invoke MatchCurrencyRefreshUpdate
						initialize invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.AlternateAmount
						initialize invoked.DistributionAmount.AlternateAmount2
						initialize invoked.DistributionAmount.AlternateAmount3
						initialize invoked.DistributionAmount.ToFunctionalAmount
						initialize invoked.DistributionAmount.ToAlternateAmount
						initialize invoked.DistributionAmount.ToAlternateAmount2
						initialize invoked.DistributionAmount.ToAlternateAmount3
						initialize invoked.DistributionAmount.ProjectAmount
						initialize invoked.DistributionAmount.ReportAmount1
						initialize invoked.DistributionAmount.ReportAmount2
						initialize invoked.DistributionAmount.ReportAmount3
						initialize invoked.DistributionAmount.ReportAmount4
						initialize invoked.DistributionAmount.ReportAmount5		
						invoked.TransientCurrencyRefresh				= true
						invoked.DistributionAmount.ExchangeDate							= PrmInvoice.InvoiceAmount.ExchangeDate 
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PrmInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate



		MatchCurrencyRefreshUpdate is an Update Action
			default label is untranslatable
			restricted
			Action Rules
				TransactionDate			= PayablesInvoice.InvoiceAmount.ExchangeDate 
				include UpdatePersistentFields
				OldDistributionAmountGroup	= old DistributionAmount
			Exit Rules
				include UpdateGLTransactionDetail
				ActionType = ActionType.UpdateType
				if  (!DistributionType.ExpenseAccrual)
					include UpdatePayablesInvoiceDistributionTotals



		UpdateAccount is an Instance Action
			valid when (AllowMatchInvoiceUpdateAccount)
			Parameters
				NewDistributionAccount  is a TransactionCodeBlock
				BypassConstraint		is Boolean
			Parameter Rules
				NewDistributionAccount
					required
			Action Rules

				if  (PayablesInvoiceDetail entered
				and  !BypassConstraint)
					constraint (!IsLandedTaxDistribution)
						"ThisIsALandedTaxDistribution;MustUpdateAccountOnMainDistributionOnly"

					constraint (!IsLandedAOCDistribution)
						"ThisIsALandedAddOnChargeDistribution;MustUpdateAccountOnMainDistributionOnly"

				if (IsTaxDistribution)
					constraint (IsAllowTaxAccountChanges)
						"TaxCodeDoesNotAllowAccountChangesOnTaxDistributions"


				invoke RestrictedUpdate
					invoked.DistributionAccount = NewDistributionAccount
					invoked.GLFinanceCodeBlock  = NewDistributionAccount

				if (PayablesInvoice.MatchProcessType.AOCOnly
				and TaxCode not entered
				and AddOnCharge entered)
					for each AddOnChargeLandedTaxDistributionRel
						if  (each.Status = Status
						and ((each.DistributionAmount.CurrencyAmount > 0 
						and   DistributionAmount.CurrencyAmount > 0) 
						or   (each.DistributionAmount.CurrencyAmount = 0) 
						or   (each.DistributionAmount.CurrencyAmount < 0 
						and   DistributionAmount.CurrencyAmount < 0))) 
							invoke UpdateAccount each
								invoked.NewDistributionAccount 	= NewDistributionAccount
								invoked.BypassConstraint	 	= true
				else
				if (TaxCode not entered
				and AddOnCharge not entered
				and OriginalDistribution entered)
					for each InvoiceDetailLandedTaxDistributionRel
						if  (each.Status = Status
						and ((each.DistributionAmount.CurrencyAmount > 0 
						and   DistributionAmount.CurrencyAmount > 0) 
						or   (each.DistributionAmount.CurrencyAmount = 0) 
						or   (each.DistributionAmount.CurrencyAmount < 0 
						and   DistributionAmount.CurrencyAmount < 0))) 
							invoke UpdateAccount each
								invoked.NewDistributionAccount 	= NewDistributionAccount
								invoked.BypassConstraint	 	= true

					for each InvoiceDetailLandedAddOnChargeDistributionRel
						if  (each.Status = Status)
							if (each.AddOnCharge.AddOnChargeType.Allowance) 
								if ((each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke UpdateAccount each
										invoked.NewDistributionAccount 	= NewDistributionAccount
										invoked.BypassConstraint	 	= true
							else	
								if ((each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke UpdateAccount each
										invoked.NewDistributionAccount 	= NewDistributionAccount
										invoked.BypassConstraint	 	= true


		CreateLandedTaxDistribution is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmTaxCode			is a TaxCode			
				PrmTaxAmount		is a CurrencyAmount		
				PrmTaxRate			is a ChrgRate
				PrmTaxTypeOverride	is a TaxMethod			
				PrmTaxJurisdiction	is a TaxingJurisdiction
				PrmInfoMessage		is Text
				PrmSentToTaxEngine	is Boolean
				PrmOriginalDistribution		is a DistributionSequence	
				PrmLocalTaxSeqNbr			is a TaxSequenceNumber		
				PrmTaxAccount		is a FinanceCodeBlock		
				PrmProductTaxCat	is a ProductTaxCategory		
				PrmRecoverablePct	is a Percent				
				PrmRecoverableAmt	is a CurrencyAmount			
				PrmUnrecoverableAmt	is a CurrencyAmount			
				PrmImposition		is a VertexImpositionType	
				PrmReverseCharge	is Boolean					
				PrmAssetFlag		is an AssetFlag			
				PrmDistribDate		is Date					
				PrmStatus 			is Numeric size 1		
				PrmReverseForUpdate is Boolean				
				PrmVATReverse		is Boolean				
				PrmReverseFromCancel	is Boolean			
				PrmBypassRestrictedAccountEdit	is Boolean	
			Action Rules























				LandedTaxAmount	= PrmTaxAmount
				increment PayablesInvoice.TransientActualTaxAmountSum by LandedTaxAmount	


				LocalTaxRate	= PrmTaxRate	
				TaxTypeOverride	= PrmTaxTypeOverride	
				if (PrmTaxCode entered)				
					LocalTaxCode	= PrmTaxCode	
				else
					LocalTaxCode	= TaxCode
				if (TaxAccountingEntity entered)										
					LocalTaxEntity			= TaxAccountingEntity						
				else																	
					LocalTaxEntity			= GeneralLedgerCompanyRel.AccountingEntity	
				TransientTaxingJurisdiction	= PrmTaxJurisdiction
				TransientInfoMessage		= PrmInfoMessage		
				TransientSentToTaxEngine	= PrmSentToTaxEngine	
				TransientReverseForUpdate	= PrmReverseForUpdate	
				ReverseFromCancel			= PrmReverseFromCancel	
				if (PrmReverseFromCancel)
					BypassTaxCodeProcessing = true					
				TransientVATReverse			= PrmVATReverse				
				if (PrmReverseForUpdate								
				and PrmTaxAccount entered)							
					TransientRevTaxAccount	= PrmTaxAccount			
				LocalOriginalDistribution	= PrmOriginalDistribution	
				LocalTaxSeqNbr				= PrmLocalTaxSeqNbr			
				ProductTaxCategory			= PrmProductTaxCat		
				RecoverablePercent			= PrmRecoverablePct		
				RecoverableAmount			= PrmRecoverableAmt		
				UnrecoverableAmount			= PrmUnrecoverableAmt	
				Imposition					= PrmImposition			
				DoVATReverseCharge			= PrmReverseCharge		
				CalculateTax.ReverseCharge			= PrmReverseCharge		
				CalculateTax.RecoverablePercent		= PrmRecoverablePct		
				CalculateTax.RecoverableAmount		= PrmRecoverableAmt		
				CalculateTax.UnrecoverableAmount	= PrmUnrecoverableAmt	
				LocalBypassRestrictedAccountEdit	= PrmBypassRestrictedAccountEdit	
				LocalAssetFlag				= PrmAssetFlag			
				if (PrmDistribDate entered)
					LocalDistribDate		= PrmDistribDate	
				if (PrmStatus entered)
					LocalStatus 			= PrmStatus 		
				if (PrmTaxAccount entered)
					LocalTaxCodeAccount		= PrmTaxAccount			
					
				if  (!PayablesInvoice.MatchProcessType.Expense
				and  DelayTaxProcessing)							


					
					if  (AddOnCharge entered)
						LocalTaxCode			= PayablesInvoiceAddOnChargeRel.TaxCode				 	
	

						if  (LocalTaxCode not entered)
							LocalTaxCode = PayablesInvoiceAddOnChargeRel.InventoryLocationRel.PurchaseOrderTaxCode

						if  (LocalTaxCode not entered
						and  PurchaseOrderLine entered)
							LocalTaxCode = PurchaseOrderLine.InventoryLocationRel.PurchaseOrderTaxCode

						if  (LocalTaxCode not entered)
							LocalTaxCode = PayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLineRel.ShipToLocation.PurchaseOrderTaxCode

						invoke FastUpdate PayablesInvoiceAddOnChargeRel
						    if (PrmTaxTypeOverride = "A")
								invoked.AccruedTaxAmount 	= LandedTaxAmount
							else
							    invoked.TaxAmount			= LandedTaxAmount
		
							if  (this instance.PayablesInvoiceAddOnChargeRel.TaxCode not entered)
								invoked.TaxCode					= LocalTaxCode				 	
								invoked.Taxable					= true				 	
						
					else
						LocalTaxCode			= PayablesInvoiceDetail.TaxCode				 	
	

						if  (LocalTaxCode not entered)
							LocalTaxCode = PayablesInvoiceDetail.InventoryLocationRel.PurchaseOrderTaxCode


						invoke FastUpdate PayablesInvoiceDetail
						    if (PrmTaxTypeOverride = "A")
								invoked.AccruedTaxAmount 	= LandedTaxAmount
							else
							    invoked.TaxAmount			= LandedTaxAmount
		
							if  (this instance.PayablesInvoiceDetail.TaxCode not entered)
								invoked.TaxCode					= LocalTaxCode
								invoked.InvoiceLineTaxable		= true				 	
	
				    if (PrmTaxTypeOverride != "A")
						invoke FastUpdate PayablesInvoice
							invoked.POTaxAmount 				+= LandedTaxAmount


				if  (PrmImposition = "VAT"
				and (PrmRecoverableAmt entered
				or   PrmUnrecoverableAmt entered))

					include VATAccountProcessing1

					ActionType	= ActionType.CreateType		
					include CreateTaxExitRules2

				else

					include CreateLandedTaxDistribution


				if (PrmTaxJurisdiction entered)										
					invoke Update PayablesTaxDetailRel								
						invoked.TaxingJurisdiction		= PrmTaxJurisdiction		





		UpdateFromHeader is an Update Action
			default label is untranslatable
			restricted
			bypass field rules
			Action Rules


			    BypassUnitAndAmountEdit = true
			Exit Rules
				if (!Status.Historical)										
					for each TaxTransactionsRel								
						invoke FastUpdate each								
							invoked.PostDate 		 = DistributionDate		
							if (PayablesInvoiceTaxHeaderRel.TaxPointDate entered)	
								invoked.TaxPointDate = PayablesInvoiceTaxHeaderRel.TaxPointDate
							else
								if (TaxPoint.GLPostDate)						
									invoked.TaxPointDate = DistributionDate		


				if (DistributionDate changed)

					if (Status.Unreleased)
						invoke Unreleased.Update GLTransactionDetailRel
							fill in user fields from this instance		 
							invoked.PostingDate					= DistributionDate
					else		 
						if (Status.Released)
							invoke Released.Update GLTransactionDetailRel
								fill in user fields from this instance
								invoked.PostingDate				= DistributionDate
					include UpdateBaseAmtPersistentField
				
				if (CommitmentExists)
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						invoke PerformBudgetEdit
							invoked.PrmActionType = "U"

					if  (ReleasedCommitmentExists)
						include ChangeReleasedCommitment
					else

						if (!BypassCommitmentUpdate)		
							include MaintainUnreleasedCommitment
							BypassCommitmentUpdate = true	


				if (PayablesInvoice.ForIntercompanyBilling)	
					include UpdateIntercompanyBillingTransaction	



		UpdateSnapshotFields is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				BypassUnitAndAmountEdit = true
				if (old Vendor != PayablesInvoice.Vendor	
				and Description = DerivedOldVendorAndName)	
					initialize Description					
				Vendor				= PayablesInvoice.Vendor
				Invoice				= PayablesInvoice.Invoice
				Suffix				= PayablesInvoice.Suffix
				CancelSequence		= PayablesInvoice.CancelSequence
				if (Description not entered						
				or  Vendor changed)				




					Description = DerivedVendorAndName				
					if (Status.Unreleased)
						invoke Unreleased.Update GLTransactionDetailRel
							invoked.VendorGroupAndVendor.Vendor	= Vendor	
							invoked.Description		= Description
				if (Company.DefaultReference		= "I")		
					DistributionReference			= PayablesInvoice.Invoice
					if (Status.Unreleased)
						invoke Unreleased.Update GLTransactionDetailRel
							invoked.Reference		= PayablesInvoice.Invoice
					else
						if (Status.Released)
							invoke Released.Update GLTransactionDetailRel
								invoked.Reference	= PayablesInvoice.Invoice
							for each TaxTransactionsVoucherRel
								invoke FastUpdate each
									invoked.Invoice	= PayablesInvoice.Invoice



		UpdateSnapshotFieldsSet is a Set Action			
			default label is untranslatable
			restricted
			Parameters
				PrmCompany		is a PayablesCompany
				PrmInvoice		is a PayablesInvoice
			Parameter Rules
				PrmCompany
				PrmInvoice
				
			Instance Selection
				where (Company 			= PrmCompany
				and    PayablesInvoice	= PrmInvoice)
				
			Action Rules
				Instance Rules
					BypassUnitAndAmountEdit = true
					if (old Vendor != PrmInvoice.Vendor	
					and Description = DerivedOldVendorAndName)	
						initialize Description					
					Vendor				= PrmInvoice.Vendor
					Invoice				= PrmInvoice.Invoice
					Suffix				= PrmInvoice.Suffix
					CancelSequence		= PrmInvoice.CancelSequence
					if (Description not entered)						
						Description = DerivedVendorAndName				
						if (Status.Unreleased)
							invoke Unreleased.Update GLTransactionDetailRel
								invoked.Description		= Description
					if (Company.DefaultReference		= "I")		
						DistributionReference			= PrmInvoice.Invoice
						if (Status.Unreleased)
							invoke Unreleased.Update GLTransactionDetailRel
								invoked.Reference		= PrmInvoice.Invoice
						else
							if (Status.Released)
								invoke Released.Update GLTransactionDetailRel
									invoked.Reference	= PrmInvoice.Invoice
								for each TaxTransactionsVoucherRel
									invoke FastUpdate each
										invoked.Invoice	= PrmInvoice.Invoice					
				


		UpdateDistributionDateForClosingPreprocess  is a Set Action	 

			default label is untranslatable
			restricted
			Parameters
				PrmCompany                  is a PayablesCompany
				PrmPayablesInvoice          is a PayablesInvoice
				PrmNewDistributionDate      is Date
			Parameter Rules
				PrmPayablesInvoice
					required
				PrmNewDistributionDate
					required
			
			Sort Order is primary 

			Instance Selection
				where (Company 			= PrmCompany 
				and    PayablesInvoice 	= PrmPayablesInvoice
				and    Status 			= Status.Unreleased)
			
			Action Rules

				Instance Rules

					invoke UpdateDistributionDateAndGLCommit 
						invoked.PrmDistribDate 	= PrmNewDistributionDate
				
					invoke UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel
						invoked.PostingDate		= PrmNewDistributionDate			



		UpdateDistributionDateAndGLCommit is an Instance Action		

			default label is untranslatable
			restricted							
			Parameters
				PrmDistribDate			is Date
			Action Rules
				if (PrmDistribDate entered)
					DistributionDate	= PrmDistribDate
					if  (PayablesInvoice.MatchProcessType.Expense)
						LocalAllowRebuild = true
					
					if  (ReleasedCommitmentExists)
						invoke ChangeReleasedAPCommitment GLCommitRel
							invoked.PrmTransDate		= PrmDistribDate
							invoked.ParmAllowRebuild	= LocalAllowRebuild
					else
						invoke MaintainUnreleasedCommitment GLCommitRel
							invoked.TransactionDate		= PrmDistribDate
							invoked.PrmAllowRebuild		= LocalAllowRebuild


		Delete is a Delete Action
			valid when (CanBeDeleted)
			Entrance Rules






				if  (IsTaxDistribution			
				and !IsLinkedTaxDistribution												
				and  TaxCode entered														
				and  PayablesInvoice.MatchProcessType.Expense								
				and  PayablesInvoice.DisplayChangeTaxCode									
				and  initiating action = "Delete"											
				and  invoking action != "PayablesInvoice.ChangeTaxCode"						
				and  invoking action != "PayablesInvoice.DeleteTaxCode")					

					if (IsLastHeaderTaxDistribution)	
						confirmation required
							"DeletingTheLastHeader-originatedTaxDistributionWillClearAllHeader-enteredTaxInformation.Continue?"
						invoke UpdatePIT PayablesInvoiceRel
							invoked.Function		= 4		

						decrement PayablesInvoice.TaxAmount by PayablesInvoice.TaxAmount
						decrement PayablesInvoice.TotalTaxAmount by PayablesInvoice.TotalTaxAmount
						decrement PayablesInvoice.TaxableAmount by PayablesInvoice.TaxableAmount
						decrement PayablesInvoice.TotalTaxableAmount by PayablesInvoice.TotalTaxableAmount
						decrement PayablesInvoice.TaxCode by PayablesInvoice.TaxCode
						decrement PayablesInvoice.TaxType by PayablesInvoice.TaxType
						decrement PayablesInvoice.TaxPoint by PayablesInvoice.TaxPoint
						decrement PayablesInvoice.TransientTaxPointDate by PayablesInvoice.TransientTaxPointDate
						decrement PayablesInvoice.TransientPointOfTitleTransfer by PayablesInvoice.TransientPointOfTitleTransfer					

				TransientTaxingJurisdiction	= PayablesTaxDetail.TaxingJurisdiction	
			
				LocalPayablesCompany 	= Company
				LocalPayablesInvoice 	= PayablesInvoice
				
				if  (DisplayDeleteConfirmation
				and  invoking action = "Delete"
				and  initiating action = "Delete")    
					confirmation required
						"<DeleteConfirmationMessage>"

				if (initiating action = "PayablesInvoice.ChangeCreditMemoToInvoice"				
				or  initiating action = "PayablesInvoice.ChangeExpenseInvoiceToCreditMemo")		
					TransientDeleteFromHeader = true											

				if (initiating action = "PayablesInvoice.CalculateRate")		
					LocalDeleteAndAdd = true 

				ActionType = ActionType.DeleteType
				invoke Delete AssetDetailRel
				SaveTransientBypassErrorUpdate = TransientBypassErrorUpdate 
				TransientBypassErrorUpdate = true
	 			include CreateUpdateDeleteExitRules
				TransientBypassErrorUpdate = SaveTransientBypassErrorUpdate
				if  (TaxSequenceNumber not entered			
				and !PayablesInvoice.IsChargeback			
				and  PayablesInvoice.MatchProcessType.Expense
				and  LinkedTaxDistributionsRel	exists)		
					invoke Delete LinkedTaxDistributionsRel	
					invoke RefreshTotalTax LocalPayablesInvoiceRel		
				else
				if  (!PayablesInvoice.MatchProcessType.Expense
				and   PayablesInvoiceDetail not entered
				and   TaxCode entered
				and   LinkedTaxDistributionsRel	exists)		
					invoke Delete LinkedTaxDistributionsRel	
				if (GLTransactionDetailRel exist) 
					if (GLTransactionDetailRel.Status.Unreleased)
						invoke Unreleased.Delete GLTransactionDetailRel
					else
						if (GLTransactionDetailRel.Status.Released)
							invoke Released.Delete GLTransactionDetailRel
				


				if (PayablesInvoice.MatchProcessType.Expense) 
					if (GLCommitRel.Status.Released)			
						invoke PurgeAPEncumbrance GLCommitRel	
					else
						invoke Purge GLCommitRel				
				else 
					invoke Purge GLCommitRel 				
					 	if (LocalDeleteAndAdd = true) 
				 			invoked.PrmChangeAPDistrib = true				
						else
						if (initiating action = "PayablesInvoiceDetail.Delete"
						or  initiating action = "PayablesInvoiceAddOnCharge.Delete"
						or  initiating action = "MatchPurchaseOrderInvoice.Delete"
						or  initiating action = "ContractLine.DeleteInvoiceDetailsFromContractLine")
							invoked.PrmPurgeRecalculate = false 
						else  
							invoked.PrmPurgeRecalculate = true

						if (IsLandedAOCDistribution 
						and PurchaseOrderAndLineAddOnChargeRel exists  
						and PurchaseOrderAndLineAddOnChargeRel.CreatedDuringSpread)  
							invoked.PrmRelatedCommitment = true 

				invoke Delete BudgetEditErrorsRel		

				if  (CommitmentExists
				and  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
					invoke Delete HeaderBudgetEditErrorRel
					invoke FastUpdate PayablesInvoice                   
						invoked.BudgetEditProcessing = 0    

				if (PayablesInvoiceRetainageDistributionRelExists)
					invoke Delete PayablesInvoiceRetainageDistributionRel

				if (PayablesInvoice.ForIntercompanyBilling)


					invoke Delete IntercompanyBillingTransactionRel		

				if  (RecurringJournalExists				
				and !RecurringJournalControlRel.Status.Deleted)
					if (RecurringJournalControlRel.Status.Unreleased)
						invoke Delete Unreleased RecurringJournalControlRel
					if (RecurringJournalControlRel.Status.Released)
						invoke Delete Released RecurringJournalControlRel

				if (ReconciliationDetailRel exists)		
					invoke Delete ReconciliationDetailRel

				if (TaxCode entered
				and Status.Released)

					invoke 585BuildTxTaxTrans
						invoked.ApwsReverseFlag = "Y"

		 	Action Rules
			Exit Rules
				if (TaxEntityUsesSabrix
				and !PayablesInvoice.MatchProcessType.Expense
				and TaxCode entered)
					NextSentence = true
				else
				if (!TransientBypassErrorUpdate
				and  DistributionAmount.CurrencyAmount entered
				and  !DistributionType.ExpenseAccrual
				and  initiating action != "PayablesInvoice.CancelUnreleasedInvoiceUnreleased"		
				and  !FromUnmatch)
					invoke UpdateErrorRecordsAction LocalPayablesInvoiceRel



		DeleteDistributionCodeDistributions is an Instance Action
			default label is untranslatable
			restricted
			Entrance Rules
				TransientBypassErrorUpdate  = true
				invoke Delete
				
		UnmatchDelete is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
			
				FromUnmatch = true

				if (PayablesInvoice.MatchProcessType.ServiceContract
				and PayablesInvoiceDetail entered
				and  initiating action = "PayablesInvoice.InvoiceUnmatch")
					if (AddOnCharge entered
					or  (TaxCode entered
					and  PayablesInvoiceDetail.TaxCode not = ContractLine.TaxCode))
						NextSentence = true 
					else 
						invoke Purge GLCommitRel

				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
				and  MatchCreated.Unmatch)
					NextSentence = true
				else
				if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				and  !DistributionType.ExpenseAccrual)
					invoke ReverseDistribution
						invoked.PrmReversalPostDate		= PayablesInvoice.DistributionDate
						invoked.PrmCancelSequence		= PayablesInvoice.CancelSequence
						invoked.PrmReverseForUpdate		= false
						invoked.PrmReverseFromCancel	= true
				else
				if (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger)	
					invoke Delete
				else
					invoke ReverseDistribution
						invoked.PrmReversalPostDate		= PayablesInvoice.DistributionDate
						invoked.PrmCancelSequence		= PayablesInvoice.CancelSequence
						invoked.PrmReverseForUpdate		= false
						invoked.PrmReverseFromCancel	= true

				if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
				and (DistributionType.ExpenseAccrual
				or   PurchaseOrderLine.ItemType.Inventoried
		        or  (PayablesInvoice.MatchPrepayment
        		and  MatchCreated entered)
		        or  (PurchaseOrderLine not entered
        		and  MatchCreated entered)
				or   MatchCreated = "S"))
					MatchCreated  = "U"
				else
				if (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic
				and TaxEntityUsesSabrix
				and IsTaxDistribution)
				    MatchCreated  = "U"


		DeleteInstance is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmDeleteFromHeader	is Boolean
			Action Rules
				TransientDeleteFromHeader = PrmDeleteFromHeader
				invoke Delete



		DeleteInvoiceDetailDistributions is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmDeleteAndAdd is Boolean
			Entrance Rules

			    if  (Status.Released
			    and  PayablesInvoice.Status.Amended
				and (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
				or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track))
					invoke ReverseDistribution
						invoked.PrmReversalPostDate	= PayablesInvoice.DistributionDate
						invoked.PrmReverseForUpdate	= true
				else
				if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				and  (PayablesInvoice.TransientInUnmatch
				or    PayablesInvoice.Status.Cancelled))
					NextSentence = true
				else
					TransientBypassErrorUpdate  = true
					LocalDeleteAndAdd = ParmDeleteAndAdd
					invoke Delete



		UnreleaseDistribution is an Instance Action	
			default label is untranslatable
			restricted
			Action Rules
				Status = Status.Unreleased
				if (LinkedTaxDistributionsRel exists)
					for each LinkedTaxDistributionsRel
						invoke Update each
							invoked.Status = 0



		ReverseDistribution is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmReversalPostDate		is Date		
				PrmCancelSequence		is a CancelSequence
				PrmReverseForUpdate		is Boolean
				PrmComment				is a CommentText	
				PrmReverseFromCancel	is Boolean		
				BypassConstraint		is Boolean 		
				PrmReallocate			is Boolean
				PrmNewAccount 			is a FinanceCodeBlock	
				PrmBypassRestrictedAccountEdit	is Boolean		
			Parameter Rules
				PrmReversalPostDate
					default to current corporate date
					LocalReversalPostDate	= PrmReversalPostDate	
			Action Rules






				constraint (PayablesInvoice.RetainageAmount not entered)
					"RetainageInvoice;CannotReverseDistribution"			

				if  (PayablesInvoiceDetail entered
				and  !BypassConstraint
				and  !PrmReverseFromCancel) 
					constraint (!IsLandedTaxDistribution
					or           PayablesInvoice.MatchProcessType.AOCOnly)
						"ThisIsALandedTaxDistribution;MustReverseMainDistributionOnly"

					constraint (!IsLandedAOCDistribution
					or           PayablesInvoice.MatchProcessType.AOCOnly)
						"ThisIsALandedAddOnChargeDistribution;MustReverseMainDistributionOnly"

				if (TaxCode entered
		 		and TaxIndicator.None

		 		and initiating action != "ReverseDistributionForUpdate")	

					invoke 585BuildTxTaxTrans			
						if (invoking action = "CancelDistribution")				
							LocalCancelSequence			= PrmCancelSequence		
							invoked.ApwsCancelledFl 	= "Y"					
							invoked.ApwsReverseFlag 	= "Y"					
							invoked.ReversalPostDate	= PrmReversalPostDate	
						else													
							invoked.ApwsCancelledFl 	= "N"	
							invoked.ApwsReverseFlag 	= "Y"					
							invoked.ReversalPostDate	= PrmReversalPostDate	
							


				if (!IsLinkedTaxDistribution)		
					invoke Create PayablesInvoiceDistribution
						assign result to NewPayablesInvoiceDistribution
						fill in fields from this instance
							except invoked.TransientReferenceToThisInstance
							except invoked.CancelSequence
							except invoked.OriginalPOLineDistribution
							except invoked.OriginalContractLineDistribution
							except invoked.TransientPercent
							except invoked.GltObjId
							except invoked.FundAppliedAmount
							except invoked.TransientPayablesInvoicePayment
							except invoked.DistributionAmount		
							except invoked.TaxAccountingEntity		
						initialize invoked.GLTransactionAmount
						invoked.CancelSequence						= PrmCancelSequence
						invoked.CommentText							= PrmComment				
						if (PrmReverseForUpdate													
						and PrmNewAccount entered)												
							if (PrmNewAccount.GeneralLedgerChartAccount.AllowUnits.Required 	
							and UnitAmount = 0)
								confirmation required
									"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountLabel>_<PrmNewAccount.GeneralLedgerChartAccount>RequiresUnits;ThisProcessWillSetUnitAmountTo1;Proceed?"
								invoked.UnitAmount = 1
							else
							if (PrmNewAccount.GeneralLedgerChartAccount.AllowUnits.No 			
							and UnitAmount != 0)
								confirmation required
									"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountLabel>_<PrmNewAccount.GeneralLedgerChartAccount>DoesNotAllowUnits;ThisProcessWillSetUnitAmountTo0;Proceed?"
								invoked.UnitAmount = 0
							invoked.GLFinanceCodeBlock				= PrmNewAccount				
							invoked.GLTransactionAmount				= GLTransactionAmount		

							invoked.CreatedByFES					= false
							invoked.FESManuallyUpdated				= false
						else																	
							invoked.GLFinanceCodeBlock				= GLFinanceCodeBlock		
							invoked.GLTransactionAmount				= (GLTransactionAmount * -1)
							invoked.DistributionAmount.CurrencyAmount 	= (DistributionAmount.CurrencyAmount * -1)
							if (PayablesInvoice.MatchProcessType.Expense 
							or  PayablesInvoiceDetail entered)
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount 		= (DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
							invoked.TaxableAmount 			= (TaxableAmount * -1)
							invoked.UnitAmount 				= (UnitAmount * -1)
						invoked.LocalBypassRestrictedAccountEdit	= PrmBypassRestrictedAccountEdit	
						invoked.DistributionAmount.ExchangeDate 	= DistributionAmount.ExchangeDate
						invoked.DistributionAmount.KeepRateAndAmount		= true     
						invoked.LocalBypassMemberEdit	= true
						invoked.GLTPostingDate						= PrmReversalPostDate
						invoked.DistributionDate					= PrmReversalPostDate
						invoked.BypassMatchLandedTaxEdit = true
						invoked.BypassStructureRelationEdit = true					   			
						if (this instance.Status.Historical)				
							invoked.Status				= Status.Released
						if (PrmReverseForUpdate)
							invoked.Status					= Status.Unreleased
							invoked.AdjustedDistribution	= true
							invoked.BypassTaxCodeProcessing	= true		

						if  (PayablesInvoice.Status.Amended
						and  initiating action = "PayablesInvoiceDetail.Delete"
						and (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
						or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track))
							invoked.Status = 5 

						invoked.TransientReverseForUpdate	= PrmReverseForUpdate		
						invoked.ReverseFromCancel			= PrmReverseFromCancel		
						if  (AddOnCharge not entered)
							if  (PurchaseOrderLine entered
							and  OriginalPOLineDistribution exists)
								invoked.OriginalPOLineDistribution						= OriginalPOLineDistribution
							if  (ContractLine entered
							and  OriginalContractLineDistribution exists)
								invoked.OriginalContractLineDistribution 				= OriginalContractLineDistribution
						invoked.TransientTaxingJurisdiction			= this instance.PayablesTaxDetail.TaxingJurisdiction	
						if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
						and !PayablesInvoice.MatchProcessType.Expense
						and (DistributionType.ExpenseAccrual
						or   PurchaseOrderLine.ItemType.Inventoried))
							invoked.MatchCreated  = "U"
						else
						if  ((GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
						or    GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						and !PayablesInvoice.MatchProcessType.Expense
						and  PurchaseOrderLine not entered
						and  MatchCreated entered)
							invoked.MatchCreated  = "U"
						else
						if (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic
						and TaxEntityUsesSabrix
						and !PayablesInvoice.MatchProcessType.Expense
						and IsTaxDistribution)
							invoked.MatchCreated  = "U"
						else
						if  (PurchaseOrderLine not entered
						and  ContractLine not entered)
							initialize invoked.MatchCreated	
							
						if (PrmReallocate)
							invoked.Description			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription
				


				initialize LocalReversalPostDate
				
				if (PayablesAssetDetail exists)
					invoke Create PayablesAssetDetail
						fill in fields from PayablesAssetDetail
						invoked.PayablesInvoiceDistribution		= NewPayablesInvoiceDistribution.PayablesInvoiceDistribution

			Exit Rules



				






				if (PayablesInvoice.MatchProcessType.Expense)
					if (PrmNewAccount entered	
					and TaxEntityUsesSabrix)	
						LocalContinue = true	
					else


						for each LinkedTaxDistributionsRel		

							invoke CreateLandedTaxDistribution 
								invoked.PrmOriginalDistribution	= NewPayablesInvoiceDistribution.PayablesInvoiceDistribution
								invoked.PrmLocalTaxSeqNbr		= each.TaxSequenceNumber 	
								invoked.PrmVATReverse			= each.VATReverse			
								invoked.PrmReverseForUpdate 	= PrmReverseForUpdate		
								invoked.PrmReverseFromCancel	= PrmReverseFromCancel		
								if  (PrmReverseForUpdate													
								and !each.VATReverse														
								and  each.IsLandedTaxDistribution											
								and  PrmNewAccount entered)													
									invoked.PrmTaxAccount		= PrmNewAccount								
								else
								if (PrmReverseForUpdate				
								and !each.VATReverse				
								and !each.IsLandedTaxDistribution)	
									TransientInvAccountingEntity  = each.PayablesInvoice.TaxEntityValue	
									TransientDistAccountingEntity = PrmNewAccount.ToAccountingEntity	
									include DoTaxCodePostOption		
									invoked.PrmTaxAccount		= LocalTaxCodeAccount		
								else																		
									invoked.PrmTaxAccount		= each.DistributionAccount
								if  (PrmReverseForUpdate													
								and  PrmNewAccount entered)													
									invoked.PrmTaxAmount		= each.DistributionAmount.CurrencyAmount	
								else																		
									invoked.PrmTaxAmount		= each.DistributionAmount.CurrencyAmount * -1
								invoked.PrmBypassRestrictedAccountEdit	= PrmBypassRestrictedAccountEdit	
								invoked.PrmTaxCode				= each.TaxCode		
								invoked.PrmTaxRate				= PayablesInvoiceTaxRel.TaxDetails.CalculatedTaxRate
								invoked.PrmTaxTypeOverride		= each.TaxType
								invoked.PrmTaxJurisdiction		= PayablesInvoiceTaxRel.TaxDetails.TaxingJurisdiction
								invoked.PrmInfoMessage			= PayablesInvoiceTaxRel.TaxDetails.InformationMessage
								invoked.PrmSentToTaxEngine		= PayablesInvoiceTaxRel.TaxDetails.SentToTaxEngine								

								if (initiating action = "PayablesInvoice.CancelReleased"		
								or  initiating action = "MassCancelDistribution")			
									invoked.PrmDistribDate		= PrmReversalPostDate		
									invoked.PrmStatus 			= Status.Released 			

				    

						if (PayablesInvoiceTaxRel exists							
						and NewPayablesInvoiceDistribution.PayablesInvoiceDistribution entered)		

							invoke CopyPayablesInvoiceTax PayablesInvoiceTaxRel		
								invoked.PrmLinkToDistribution 	= NewPayablesInvoiceDistribution.PayablesInvoiceDistribution	
								if (PrmReverseForUpdate						
								and PrmNewAccount not entered)				
									invoked.PrmReverse			= true		




				if (PayablesInvoice.MatchProcessType.AOCOnly
				and PayablesInvoiceDetail entered
				and TaxCode not entered
				and AddOnCharge entered
				and !PrmReverseFromCancel)

					for each AddOnChargeLandedTaxDistributionRel

						if  (each.Status = Status
						and  each.DistributionAccount = DistributionAccount  
						and ((each.DistributionAmount.CurrencyAmount > 0 
						and   DistributionAmount.CurrencyAmount > 0) 
						or   (each.DistributionAmount.CurrencyAmount = 0) 
						or   (each.DistributionAmount.CurrencyAmount < 0 
						and   DistributionAmount.CurrencyAmount < 0))) 
							invoke ReverseDistribution each
								invoked.PrmReversalPostDate = PrmReversalPostDate
								invoked.BypassConstraint	= true
								invoked.PrmCancelSequence	= CancelSequence
								invoked.PrmReverseForUpdate	= true

				else
				if (PayablesInvoiceDetail entered
				and OriginalDistribution entered
				and TaxCode not entered
				and AddOnCharge not entered
				and !PrmReverseFromCancel)

					for each InvoiceDetailLandedTaxDistributionRel

						if  (each.Status = Status 
						and  each.DistributionAccount = DistributionAccount  
						and ((each.DistributionAmount.CurrencyAmount > 0 
						and   DistributionAmount.CurrencyAmount > 0) 
						or   (each.DistributionAmount.CurrencyAmount = 0) 
						or   (each.DistributionAmount.CurrencyAmount < 0 
						and   DistributionAmount.CurrencyAmount < 0))) 
							invoke ReverseDistribution each
								invoked.PrmReversalPostDate = PrmReversalPostDate
								invoked.BypassConstraint	= true
								invoked.PrmCancelSequence	= CancelSequence
								invoked.PrmReverseForUpdate	= true


					for each InvoiceDetailLandedAddOnChargeDistributionRel

						if  (each.Status = Status
						and  each.DistributionAccount = DistributionAccount)  
							if (each.AddOnCharge.AddOnChargeType.Allowance) 
								if ((each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke ReverseDistribution each
										invoked.PrmReversalPostDate = PrmReversalPostDate
										invoked.BypassConstraint	= true
										invoked.PrmCancelSequence	= CancelSequence
										invoked.PrmReverseForUpdate	= true
							else	
								if ((each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke ReverseDistribution each
										invoked.PrmReversalPostDate = PrmReversalPostDate
										invoked.BypassConstraint	= true
										invoked.PrmCancelSequence	= CancelSequence
										invoked.PrmReverseForUpdate	= true





		CreateAmendedDistribution is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmAmendedPostDate		is Date
				PrmCancelSequence		is a CancelSequence
				NewAccount				is a FinanceCodeBlock
			Action Rules
				invoke Create PayablesInvoiceDistribution
					assign result to NewPayablesInvoiceDistribution
					fill in fields from this instance
						except invoked.TransientReferenceToThisInstance
						except invoked.CancelSequence
						except invoked.OriginalPOLineDistribution
						except invoked.OriginalContractLineDistribution
						except invoked.Status
						except invoked.TransientPercent
						except invoked.GltObjId
						except invoked.MatchCreated
						except invoked.CreatedByFES
						except invoked.FESManuallyUpdated
					initialize invoked.GLTransactionAmount
					invoked.CancelSequence						= PrmCancelSequence
					invoked.GLFinanceCodeBlock					= NewAccount
					invoked.GLTransactionAmount					= DistributionAmount.CurrencyAmount
					invoked.GLTPostingDate						= PrmAmendedPostDate
					invoked.DistributionDate					= PrmAmendedPostDate
					invoked.DistributionAmount.ExchangeDate 	= DistributionAmount.ExchangeDate
					invoked.DistributionAmount.CurrencyAmount 	= DistributionAmount.CurrencyAmount
					invoked.TaxType								= TaxType		
					invoked.TaxableAmount 						= TaxableAmount
					invoked.UnitAmount 							= UnitAmount
					invoked.BypassMatchLandedTaxEdit			= true
					if  (AddOnCharge not entered)
						if  (PurchaseOrderLine entered
						and  OriginalContractLineDistribution exists)
							invoked.OriginalPOLineDistribution						= OriginalPOLineDistribution
						if  (ContractLine entered
						and  OriginalContractLineDistribution exists)
							invoked.OriginalContractLineDistribution 				= OriginalContractLineDistribution
					invoked.TransientTaxingJurisdiction			= this instance.PayablesTaxDetail.TaxingJurisdiction	

				initialize LocalReversalPostDate
				
				if (PayablesAssetDetail exists)
					invoke Create PayablesAssetDetail
						fill in fields from PayablesAssetDetail
						invoked.PayablesInvoiceDistribution		= NewPayablesInvoiceDistribution.PayablesInvoiceDistribution

			Exit Rules

				if (PayablesInvoice.MatchProcessType.Expense
				and InvoiceTaxEntityRel.ThirdParty.Sabrix)
					for each LinkedAndLandedTaxDistributionsRel
						invoke CreateLandedTaxDistribution 
							invoked.PrmOriginalDistribution	= NewPayablesInvoiceDistribution.PayablesInvoiceDistribution
							invoked.PrmLocalTaxSeqNbr		= 1
							invoked.PrmTaxAccount			= NewAccount
							invoked.PrmTaxAmount			= each.DistributionAmount.CurrencyAmount 
							invoked.PrmTaxRate				= PayablesInvoiceTaxRel.TaxDetails.CalculatedTaxRate
							invoked.PrmTaxTypeOverride		= each.TaxType
							invoked.PrmTaxJurisdiction		= PayablesInvoiceTaxRel.TaxDetails.TaxingJurisdiction
							invoked.PrmInfoMessage			= PayablesInvoiceTaxRel.TaxDetails.InformationMessage
							invoked.PrmSentToTaxEngine		= PayablesInvoiceTaxRel.TaxDetails.SentToTaxEngine								
				    
				if (PayablesInvoice.MatchProcessType.AOCOnly
				and PayablesInvoiceDetail entered
				and TaxCode not entered
				and AddOnCharge entered)
					for each AddOnChargeLandedTaxDistributionRel
						if  (each.Status = Status
						and  each.DistributionAccount = DistributionAccount 
						and ((each.DistributionAmount.CurrencyAmount > 0 
						and   DistributionAmount.CurrencyAmount > 0) 
						or   (each.DistributionAmount.CurrencyAmount = 0) 
						or   (each.DistributionAmount.CurrencyAmount < 0 
						and   DistributionAmount.CurrencyAmount < 0))) 
							invoke CreateAmendedDistribution each
								invoked.PrmAmendedPostDate = PrmAmendedPostDate
								invoked.PrmCancelSequence	= CancelSequence
								invoked.NewAccount			= NewAccount
				else
				if (PayablesInvoiceDetail entered
				and OriginalDistribution entered
				and TaxCode not entered
				and AddOnCharge not entered)
					for each InvoiceDetailLandedTaxDistributionRel
						if  (each.Status = Status
						and  each.DistributionAccount = DistributionAccount  
						and ((each.DistributionAmount.CurrencyAmount > 0 
						and   DistributionAmount.CurrencyAmount > 0) 
						or   (each.DistributionAmount.CurrencyAmount = 0) 
						or   (each.DistributionAmount.CurrencyAmount < 0 
						and   DistributionAmount.CurrencyAmount < 0))) 
							invoke CreateAmendedDistribution each
								invoked.PrmAmendedPostDate = PrmAmendedPostDate
								invoked.PrmCancelSequence	= CancelSequence
								invoked.NewAccount			= NewAccount
				
					for each InvoiceDetailLandedAddOnChargeDistributionRel
						if  (each.Status = Status
						and  each.DistributionAccount = DistributionAccount)
							if (each.AddOnCharge.AddOnChargeType.Allowance) 
								if ((each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke CreateAmendedDistribution each
										invoked.PrmAmendedPostDate = PrmAmendedPostDate
										invoked.PrmCancelSequence	= CancelSequence
										invoked.NewAccount			= NewAccount
							else	
								if ((each.DistributionAmount.CurrencyAmount > 0 
								and   DistributionAmount.CurrencyAmount > 0) 
								or   (each.DistributionAmount.CurrencyAmount < 0 
								and   DistributionAmount.CurrencyAmount < 0)) 
									invoke CreateAmendedDistribution each
										invoked.PrmAmendedPostDate = PrmAmendedPostDate
										invoked.PrmCancelSequence	= CancelSequence
										invoked.NewAccount			= NewAccount


		ReverseDistributionForPaymentReinstatement is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmReversalPostDate		is Date
				PrmDescription          is a Description
				PrmStaleDateAccount		is like FinanceCodeBlock
				PrmJournalizeGroup		is like JournalizeGroup

			Action Rules
				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					fill in fields from this instance
						except invoked.TransientReferenceToThisInstance
						except invoked.GltObjId
					initialize invoked.GLTransactionAmount
					invoked.CreateAlternateGLTransDetail		= true
					invoked.GLTransactionAmount					= (GLTransactionAmount * -1)
					invoked.DistributionAmount.ExchangeDate 	=  DistributionAmount.ExchangeDate
					invoked.DistributionAmount.CurrencyAmount 	= (DistributionAmount.CurrencyAmount * -1)
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount 		= (DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
					invoked.DistributionAmount.KeepRateOnly		= false
					invoked.Status						= Status.Released
					invoked.Description					= PrmDescription
					invoked.DistributionDate			= PrmReversalPostDate
					invoked.GLTJournalizeGroup			= PrmJournalizeGroup
					invoked.GLTPostingDate				= PrmReversalPostDate
					invoked.GLTTransactionDate			= DistributionAmount.ExchangeDate
					invoked.GLTCurrencyCode				= InvoiceCurrency
					invoked.GLTGeneralLedgerEvent		= "VP"
					invoked.GLTControlDocumentNumber	= DistributionReference
					invoked.GLTDocumentNumber           = DistributionReference
					if (DistributionType.Payment
					and PrmStaleDateAccount	entered)
						invoked.DistributionAccount		= PrmStaleDateAccount
						invoked.GLFinanceCodeBlock		= PrmStaleDateAccount
						invoked.GLTTransactionCodeBlock	= PrmStaleDateAccount
					else
						invoked.GLFinanceCodeBlock		= DistributionAccount
						invoked.GLTTransactionCodeBlock	= DistributionAccount
					invoked.BypassActiveCodeBlockEdit 	= true		


		ReverseDistributionForUpdate is an Instance Action
			valid when (ReverseDistributionForUpdateIsValid)
			Parameters
				PrmPostDate		is Date
				NewAccount		is a TransactionCodeBlock	
			Parameter Rules
				PrmPostDate
					initial value is PayablesInvoice.DistributionDate
					default to PayablesInvoice.DistributionDate
					LocalExchangeDate = PrmPostDate		
					LocalPostingDate  = PrmPostDate		

				NewAccount
					if (NewAccount entered)		
						GLTSystem = "AP"		
						if (NewAccount.GeneralLedgerChartAccount.AllowUnits.Required) 	
						 	ReversingDistributionToAccountType = 2
						else
						if (NewAccount.GeneralLedgerChartAccount.AllowUnits.No)
							ReversingDistributionToAccountType = 0
						else
						if (NewAccount.GeneralLedgerChartAccount.AllowUnits.NotRequired)
							ReversingDistributionToAccountType = 1
			Entrance Rules
				if (NewAccount.GeneralLedgerChartAccount.AllowUnits.No					
				and DistributionAccount.GeneralLedgerChartAccount.AllowUnits.Required)
					LocalSwapFromRequiredToNotAllowed = true
					ReversingDistributionToAccountType = 2
				if (NewAccount.GeneralLedgerChartAccount.AllowUnits.Required
				and DistributionAccount.GeneralLedgerChartAccount.AllowUnits.No)
					LocalSwapFromNotAllowedToRequired = true
					ReversingDistributionToAccountType = 0
			Local Fields
				LocalExchangeDate is an ExchangeDate	
				LocalPostingDate  is a PostingDate		
				LocalSwapFromRequiredToNotAllowed	is Boolean							
				LocalSwapFromNotAllowedToRequired	is Boolean
			Action Rules
				if (PrmPostDate within PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate)			
					LocalContinue = true
				else
					LocalReversalPostDate = PrmPostDate
					if (first OpenEntityLedgerPeriodRel.PeriodStatus.Open		
					or  first OpenEntityLedgerPeriodRel.PeriodStatus.Backpost)	
						confirmation required
							"PostDate,<PrmPostDate>,IsWithinAClosed_\PayablesPeriod;_\GLPeriod<first EntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.GeneralLedgerCloseYear>-<first OpenEntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.PeriodName>IsOpen.SelectOkayToPostToThis_\Current_\GLPeriod."
					else											
						constraint (false)	
							"PostDate,<PrmPostDate>,DoesNotFallWithinAnOpenPeriod.CurrentOpen_\GLPeriodIs<first EntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.GeneralLedgerCloseYear>-<first EntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.PeriodName>."

				if (!DistributionType.Distribution)
					confirmation required				
						"DistributionIsOfType<DistributionType>AndIsNotNormallyReversibleForUpdate.DoYouWantToContinue?"

				if (IsTaxDistribution)
					constraint (IsAllowTaxAccountChanges)
						"TaxCodeDoesNotAllowAccountChangesOnTaxDistributions"

				if (PayablesInvoice.InvoiceSource.IntercompanyBilling
				and GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting)
					constraint (!PayablesInvoice.PaymentsExist)
						"CannotReverseDistributionsAfterThe_\Intercompany_\Billing_\DocumentHasBeenSelectedForAn_\Intercompany_\Billing_\Settlement.ReverseTheSettlement,ThenTryAgain."

				constraint (!IntercompanyBillingTransactionRel exists)		
					"CannotReverseAnIntercompanyBillingDistribution"
				constraint (!InvoiceTaxEntityRel.ThirdParty.TaxEngine)
					"CannotMaintainTaxEngineInvoiceDistribution"

				constraint (!PaymentsInPayCycleRel exists)
					"Cannot_\Reverse_\DistributionWhile_\InvoiceIsIn_\PaymentCycle"
				if (!PayablesInvoice.Status.Amended)
					invoke SetInvoiceToAmendedStatus PayablesInvoice
				if (PrmPostDate	!= PayablesInvoice.DistributionDate)
					invoke UpdateDistributionAndTaxPointDates PayablesInvoice		
						invoked.NewDistributionDate	= PrmPostDate
					for each PayablesInvoice.UnreleasedDistributionsRel
						invoke FastUpdate each
							invoked.DistributionDate = PrmPostDate




				invoke ReverseDistribution
					invoked.PrmReversalPostDate	= PrmPostDate
					invoked.PrmCancelSequence	= CancelSequence
					invoked.PrmReverseForUpdate	= true
					invoked.PrmBypassRestrictedAccountEdit = true	


				if  (NewAccount entered)
					if (LocalSwapFromRequiredToNotAllowed)			
						ReversingDistributionToAccountType = 0
					if (LocalSwapFromNotAllowedToRequired)
						ReversingDistributionToAccountType = 2
					if (PayablesInvoice.MatchProcessType.Expense)			
						invoke ReverseDistribution 							
							invoked.PrmReversalPostDate	= PrmPostDate		
							invoked.PrmCancelSequence	= CancelSequence	
							invoked.PrmReverseForUpdate	= true				
							invoked.PrmNewAccount		= NewAccount		
					else													
						invoke CreateAmendedDistribution	
							invoked.PrmAmendedPostDate	= PrmPostDate
							invoked.PrmCancelSequence	= CancelSequence
							invoked.NewAccount			= NewAccount
			Exit Rules
				invoke TriggerSupplierInvoiceBOD PayablesInvoice






		ProcessFinalDistribution is an Instance Action
			valid when (FinalizeIntransitDistribution)
			Action Rules				
				if (AssetFlag entered
				and AssetDetailRel exists
				and (PayablesInvoice.MatchProcessType.Expense
				or   PayablesInvoiceDetail not entered))
					if (AssetCompanyRel.PayablesDistributionWithTax.Summary)	
						if (IsExpenseDistribution)
							invoke CreateAssetInterface AssetDetailRel
					else
						if (IsExpenseDistribution
						or (IsLinkedTaxDistribution
						and IsLandedTaxDistribution))
							invoke CreateAssetInterface AssetDetailRel
					if (GLTransactionDetailRel.Status.Released)												
						invoke Released.UpdateReleasedGLTransDetailNoRules GLTransactionDetailRel			
							invoked.Capitalize	= 1	
					else 																					
						if (GLTransactionDetailRel.Status.Unreleased)										
							invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel	
								invoked.Capitalize	= 1	
				if (!PayablesInvoice.HasReversedIntransitDistribution		
				and IntransitDistribution.Yes)
					invoke Create PayablesInvoiceDistribution
						assign result to NewPayablesInvoiceDistribution
						fill in fields from this instance
							except invoked.GltObjId
						invoked.IntransitDistribution	= "R"
						invoked.Status					= 1
						invoked.DistributionAmount.CurrencyAmount 		= DistributionAmount.CurrencyAmount * -1
						invoked.DistributionAmount.KeepRateOnly			= true
						invoked.DistributionAmount.ExchangeDate			= PayablesInvoice.InvoiceAmount.ExchangeDate 
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					decrement PayablesInvoice.TotalDistributionAmount by DistributionAmount.CurrencyAmount
				invoke Update PayablesInvoice
					invoked.PayablesInvoice.FinalIntransitDistribution = true																									



		CreateAccrualOffsetBackground is a Set Action
			default label is untranslatable
			restricted		
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmGLTJournalizeGroup	is like JournalizeGroup
			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    DistributionType		= "D"
				and  ((!VATReverse
				and    TaxSequenceNumber not entered
				and    !IsAccruedVATTax
				and    !IsAccruedTaxDistribution
				or     (IsLinkTaxDist
				and     TaxType.Invoiced))))

			Local Fields
				LocalAnswer is Alpha size 1

			Action Rules

				Set Rules
					Exit Rules
						invoke FastUpdate PrmPayablesInvoice
							initialize invoked.BackgroundProcessing

				Instance Rules

					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PrmPayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock 				= PayablesInvoice.PayablesAccrualCodeDetailRel.DistributionAccount	
					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure



					invoke CreateAccrualOffset PayablesInvoiceDistribution	
						invoked.Company 					= Company
						invoked.PayablesInvoice 			= PrmPayablesInvoice
						invoked.GLTPostingDate 				= PrmPayablesInvoice.DistributionDate
						invoked.GLTTransactionDate 			= PrmPayablesInvoice.InvoiceDate
						invoked.DistributionType 			= "A"
						if ((PrmPayablesInvoice.OriginatingInterfaceRun	entered		
						and  PrmPayablesInvoice.HasHistoricalExpenseDistributions)		
						or   PrmPayablesInvoice.Status.Historical)						
							invoked.Status					= 9		
						else										
							invoked.Status					= 1
						invoked.DistributionDate			= PrmPayablesInvoice.DistributionDate
						invoked.GLTransactionAmount 		= (DistributionAmount.CurrencyAmount * -1)
						invoked.DistributionAmount.ExchangeDate 							= PrmPayablesInvoice.InvoiceAmount.ExchangeDate
						invoked.DistributionAmount.CurrencyAmount 							= (DistributionAmount.CurrencyAmount * -1)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
						invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount 		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTJournalizeGroup											= PrmGLTJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		


		CreatePaymentAccrualBackground is a Set Action				
			default label is untranslatable
			restricted		
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				PrmJournalizeGroup       	is like JournalizeGroup
				PrmPaymentPercent			is a Percent
				PrmNumberOfDistributions	is Numeric 6
				PrmCheckDate				is Date
				PrmVoidDate					is Date
				PrmPostDate					is Date
				PrmAmendedReallocation	 	is Boolean
				PrmAccrualCode				is like PayablesAccrualCode 
				PrmTotalDistributionAmount	is like FinanceCurrencyAmountGroup
				PrmControlDocumentNumber	is Alpha 30
				PrmDescription           	is Alpha up to 60
				PrmReference             	is a Reference

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    DistributionType		= "D"
				and   ((PrmAmendedReallocation
				and    Status.Unreleased)
				or     !PrmAmendedReallocation)
				and  ((!VATReverse
				and    TaxSequenceNumber not entered
				and    !IsAccruedVATTax
				and    !IsAccruedTaxDistribution
				or     (IsLinkTaxDist
				and     TaxType.Invoiced))))

			Local Fields
				LocalAnswer is Alpha size 1
				LocalDistributionAmount					is a FinanceCurrencyAmountGroup
				LocalTotalDistributionAmount			is a FinanceCurrencyAmountGroup
				LocalDistributionCount					is Numeric 6

			Action Rules

				Set Rules
					Entrance Rules
						LocalTotalDistributionAmount	= PrmTotalDistributionAmount
					Exit Rules
						invoke FastUpdate PrmPayablesInvoice
							initialize invoked.BackgroundProcessing

				Instance Rules

					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PrmPayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesInvoice.PayablesAccrualCodeDetailRel.DistributionAccount

					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure


					initialize LocalDistributionAmount
					LocalDistributionAmount.CurrencyAmount								= DistributionAmount.CurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= DistributionAmount.ProjectAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= DistributionAmount.ReportAmount1.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= DistributionAmount.ReportAmount2.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= DistributionAmount.ReportAmount3.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= DistributionAmount.ReportAmount4.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= DistributionAmount.ReportAmount5.EnteredCurrencyAmount * PrmPaymentPercent

					if (PrmPaymentPercent != 1)
						LocalNumberOfDecimals	= InvoiceCurrency.NumberOfDecimals
						round LocalDistributionAmount.CurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.Project.Currency.NumberOfDecimals
						round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

					LocalDistributionCount += 1


					if (LocalDistributionCount < PrmNumberOfDistributions)
						if (PrmVoidDate entered)
							NegativeFinanceCurrencyAmountGroup = LocalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalDistributionAmount
					else						
						if (PrmVoidDate entered)
							NegativeFinanceCurrencyAmountGroup = LocalTotalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalTotalDistributionAmount

					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						invoked.CreateAlternateGLTransDetail = true
						if (PrmVoidDate entered)
							invoked.GLTPostingDate = PrmVoidDate
							invoked.DistributionDate = PrmVoidDate
							invoked.GLTGeneralLedgerEvent = "VP"
						else
							if (PrmPostDate entered)
								invoked.GLTPostingDate = PrmPostDate
								invoked.DistributionDate = PrmPostDate
							else
								invoked.GLTPostingDate = PrmCheckDate
								invoked.DistributionDate = PrmCheckDate
							invoked.GLTGeneralLedgerEvent = "AP"
						invoked.DistributionAmount = LocalDistributionAmount
						invoked.GLTTransactionDate = PrmCheckDate
						invoked.GLTCurrencyCode = InvoiceCurrency
						invoked.Company = Company
						invoked.PayablesInvoice = PayablesInvoice
						invoked.DistributionType = PayablesDistributionType.PaymentAccrual
						invoked.AccrualCode		 = PrmAccrualCode
						invoked.PostingOption = "S"
						invoked.Status = 1
						invoked.GLTControlDocumentNumber = PrmControlDocumentNumber
						invoked.GLTDocumentNumber = PrmControlDocumentNumber
						invoked.Description = PrmDescription
						invoked.DistributionReference = PrmReference
						invoked.InvoiceCurrency = InvoiceCurrency
						invoked.DistributionAmount.ExchangeDate = PayablesInvoice.InvoiceDate
						invoked.DistributionAmount.KeepRateAndAmount = true
						invoked.GLFinanceCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTTransactionCodeBlock	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTJournalizeGroup		= PrmJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		


					if (PrmVoidDate entered)
						LocalTotalDistributionAmount.CurrencyAmount								+= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount

						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
					else
						LocalTotalDistributionAmount.CurrencyAmount								-= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount

						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount


		CreateCashDistributionBackground is a Set Action				
			default label is untranslatable
			restricted		
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				PrmJournalizeGroup       	is like JournalizeGroup
				PrmPaymentPercent			is a Percent
				PrmNumberOfDistributions	is Numeric 6
				PrmCheckDate				is Date
				PrmVoidDate					is Date
				PrmPostDate					is Date
				PrmAmendedReallocation		is Boolean
				PrmAccrualCode				is like PayablesAccrualCode 
				PrmTotalDistributionAmount	is like FinanceCurrencyAmountGroup
				PrmControlDocumentNumber	is Alpha 30
				PrmDescription           	is Alpha up to 60
				PrmReference             	is a Reference
				PrmCashCode					is like CashCode
				PrmCashAccount				is like FinanceCodeBlockFull
				PrmCashCodeCurrency			is a Currency
				PrmBankCheckExchangeRate	is a CurrencyExchangeRate
				PrmStaleDateAccount		 	is like FinanceCodeBlock
				PrmPayablesInvoicePayment	is like PayablesInvoicePayment
				PrmPaymentSequence			is a PaymentSequence
				PrmBankTransactionCode		is like BankTransactionCode
				PrmTransactionIDNumber		is a TransactionIDNumber
				PrmTransactionNumber		is a TransactionNumber
				PrmPayGroup					is like PayGroup

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    DistributionType		= "D"
				and   ((PrmAmendedReallocation
				and    Status.Unreleased)
				or     !PrmAmendedReallocation)
				and  ((!VATReverse
				and    TaxSequenceNumber not entered
				and    !IsAccruedVATTax
				and    !IsAccruedTaxDistribution
				or     (IsLinkTaxDist
				and     TaxType.Invoiced))))

			Local Fields
				LocalAnswer is Alpha size 1
				LocalDistributionAmount					is a FinanceCurrencyAmountGroup
				LocalTotalDistributionAmount			is a FinanceCurrencyAmountGroup
				LocalDistributionCount					is Numeric 6
				LocalCashCodePaymentAmount				is a FinanceCurrencyAmountGroup
				OldPaymentAmount						is an InternationalAmount
				LocalActivityType						is Numeric size 2

			Action Rules

				Set Rules
					Entrance Rules
						LocalTotalDistributionAmount	= PrmTotalDistributionAmount
					Exit Rules
						invoke FastUpdate PrmPayablesInvoice
							initialize invoked.BackgroundProcessing

				Instance Rules

					LocalCashCode				= PrmCashCode
					LocalBankTransactionCode	= PrmBankTransactionCode
					LocalTransactionIDNumber	= PrmTransactionIDNumber

					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesDistributionType.Payment
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PrmCashAccount

					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure


					initialize LocalDistributionAmount
					LocalDistributionAmount.CurrencyAmount								= DistributionAmount.CurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			= DistributionAmount.ProjectAmount.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			= DistributionAmount.ReportAmount1.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			= DistributionAmount.ReportAmount2.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			= DistributionAmount.ReportAmount3.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			= DistributionAmount.ReportAmount4.EnteredCurrencyAmount * PrmPaymentPercent
					LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			= DistributionAmount.ReportAmount5.EnteredCurrencyAmount * PrmPaymentPercent

					if (PrmPaymentPercent != 1)
						LocalNumberOfDecimals	= InvoiceCurrency.NumberOfDecimals
						round LocalDistributionAmount.CurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
						round LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= DistributionAccount.Project.Currency.NumberOfDecimals
						round LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
						round LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

					LocalDistributionCount += 1


					initialize LocalCashCodePaymentAmount
					LocalCurrencyTable = PayablesInvoice.CurrencyTable
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					LocalCurrencyCalculationGroup.ExchangeDate = PrmCheckDate
					LocalCurrencyCalculationGroup.FromCurrency = PrmCashCodeCurrency
					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency = AccountingEntityRel.FunctionalCurrency
					LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency  = AccountingEntityRel.AlternateCurrency
					LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency = AccountingEntityRel.AlternateCurrency2
					LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency = AccountingEntityRel.AlternateCurrency3
					LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency = DistributionAccount.ToAccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency = DistributionAccount.ToAccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency = DistributionAccount.ToAccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency = DistributionAccount.ToAccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
					LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
					LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
					LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
					TransactionDate = PrmCheckDate
					LocalCashCodePaymentExchange.TransactionAmount = LocalDistributionAmount.CurrencyAmount
					LocalCashCodePaymentExchange.BaseAmount.ToCurrency = PrmCashCodeCurrency
					if (PrmBankCheckExchangeRate entered)
						LocalCashCodePaymentExchange.BaseAmount.EnteredCurrencyRate = PrmBankCheckExchangeRate
					OldPaymentAmount = LocalCashCodePaymentExchange.BaseAmount.OutputCurrencyAmount
					LocalCurrencyCalculationGroup.CurrencyAmount = OldPaymentAmount
					LocalCashCodePaymentAmount.CurrencyAmount = OldPaymentAmount
					LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					LocalCashCodePaymentAmount.FunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
					if (AccountingEntityRel.AlternateCurrency entered)
						LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.AlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
					if (AccountingEntityRel.AlternateCurrency2 entered)
						LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
						LocalCashCodePaymentAmount.AlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
					if (AccountingEntityRel.AlternateCurrency3 entered)
						LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
						LocalCashCodePaymentAmount.AlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
					if (GeneralLedgerCompanyRel.AccountingEntity != DistributionAccount.ToAccountingEntity)
						LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToFunctionalAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency entered)
						LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToAlternateAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency2 entered)
						LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToAlternateAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency3 entered)
						LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ToAlternateAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate
					if (DistributionAccount.Project entered)
						LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ProjectAmount.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyOne entered)
						LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount1.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
						LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount2.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyThree entered)
						LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount3.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyFour entered)
						LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount4.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyFive entered)
						LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyAmount = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
						LocalCashCodePaymentAmount.ReportAmount5.EnteredCurrencyRate = LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
					LocalDistributionAmount	= LocalCashCodePaymentAmount


					if (LocalDistributionCount < PrmNumberOfDistributions)
						if (PrmVoidDate not entered)
							NegativeFinanceCurrencyAmountGroup = LocalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalDistributionAmount
					else						
						if (PrmVoidDate not entered)
							NegativeFinanceCurrencyAmountGroup = LocalTotalDistributionAmount
							LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation
							LocalDistributionAmount = NegativeFinanceCurrencyAmountGroup
						else
							LocalDistributionAmount = LocalTotalDistributionAmount

					if (PrmStaleDateAccount entered)
						LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.GeneralLedgerChartAccount = PrmStaleDateAccount.GeneralLedgerChartAccount

					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						invoked.CreateAlternateGLTransDetail = true
						if (PrmVoidDate entered)
							invoked.GLTPostingDate = PrmVoidDate
							invoked.DistributionDate = PrmVoidDate
							invoked.GLTGeneralLedgerEvent = "VP"
						else
							if (PrmPostDate entered)
								invoked.GLTPostingDate = PrmPostDate
								invoked.DistributionDate = PrmPostDate
							else
								invoked.GLTPostingDate = PrmCheckDate
								invoked.DistributionDate = PrmCheckDate
							invoked.GLTGeneralLedgerEvent = "AP"
						invoked.DistributionAmount = LocalDistributionAmount
						invoked.GLTTransactionDate = PrmCheckDate
						invoked.GLTCurrencyCode = PrmCashCodeCurrency
						invoked.Company = Company
						invoked.PayablesInvoice = PayablesInvoice
						invoked.DistributionType = PayablesDistributionType.Payment
						invoked.AccrualCode = PrmAccrualCode 
						invoked.PostingOption = "S"
						invoked.Status = 1
						invoked.GLTControlDocumentNumber = PrmControlDocumentNumber
						invoked.GLTDocumentNumber = PrmControlDocumentNumber
						invoked.Description = "Cash Disbursement"
						invoked.DistributionReference = PrmReference
						invoked.InvoiceCurrency = PrmCashCodeCurrency
						invoked.DistributionAmount.ExchangeDate = PrmCheckDate
						invoked.GLFinanceCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTTransactionCodeBlock	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTJournalizeGroup 		= PrmJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		

					if (PrmStaleDateAccount !entered) 
						LocalAccountingEntity	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
						if (Company.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalAccountingUnit		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
						else
							LocalFinanceDimension1	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

						if (PrmPayGroup entered)
							invoke Create CashCodeFundConsolidatedUpdate
								invoked.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PayGroup				= PrmPayGroup
								invoked.CashCode				= PrmCashCode
								invoked.AccountingEntity		= LocalAccountingEntity
								invoked.AccountingUnit			= LocalAccountingUnit
								invoked.FinanceDimension1		= LocalFinanceDimension1
								invoked.PostedAmount			= LocalDistributionAmount.CurrencyAmount
						else
							if (CashCodeFundRel !exist)
								invoke Create CashCodeFundRel
									invoked.PostedAmount = LocalDistributionAmount.CurrencyAmount
							else
								invoke UpdatePostedAmount CashCodeFundRel
									invoked.PrmPostedAmount = LocalDistributionAmount.CurrencyAmount

#ifdef module cam						
						if(Company.FinanceEnterpriseGroup.CustodialAccountManagement)	
							LocalCustodialPosting	= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10
							if (LocalCustodialPosting entered)
								constraint (CustodialDetailAmountRel exist)
									"<Company.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeSetupAS_A_CustodialAccount"
								if (Vendor != CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
									constraint (LocalCustodialPosting.Expendable)
										"<Company.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_IsNotExpendable"
								if(CustodialAccountEditRel2 exists)

									invoke UpdateDisbursements CustodialDetailAmountRel
										invoked.PrmDisbursements = LocalDistributionAmount.CurrencyAmount * -1
									if (Vendor = CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
										LocalActivityType = 10
									else
										LocalActivityType = 2
									LocalPayablesInvoicePayment	= PrmPayablesInvoicePayment
									LocalPaymentSequence 		= PrmPaymentSequence
									if (CustodialActivityRel exists)
										invoke Update CustodialActivityRel
											invoked.Amount += LocalDistributionAmount.CurrencyAmount
									else
										invoke Create CustodialActivity
											invoked.FinanceEnterpriseGroup  		= Company.FinanceEnterpriseGroup
											invoked.CustodialCompany			 	= Company
											invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
											invoked.CustodialPosting			 	= LocalCustodialPosting
											if(PrmVoidDate entered)
												invoked.ActivityDate				 	= PrmVoidDate
												invoked.ActivityType 					= 6
												invoked.Description 				 	= "Stop/Void Payables Invoice Payment"
											else
												invoked.ActivityDate				 	= PrmCheckDate
												invoked.ActivityType 					= LocalActivityType
												invoked.Description 				 	= "Payables Invoice Payment"												
											invoked.Amount						 	= LocalDistributionAmount.CurrencyAmount
											invoked.DocumentNumber				 	= LocalPaymentSequence+"_"+PayablesInvoice.Invoice
											invoked.Vendor						 	= Vendor	
											invoked.PayablesInvoice				 	= PayablesInvoice
											invoked.PayablesInvoicePayment		 	= PrmPayablesInvoicePayment
											invoked.CustodialCashCode			 	= PrmCashCode
											invoked.CustodialTransactionCode		= PrmBankTransactionCode
											invoked.TransactionIDNumber				= PrmTransactionIDNumber
#endif

					if (PrmVoidDate not entered)
						if (CashLedgerGLDistributionByAccountRel exists)
							invoke AddAmountsToExistingDistribution CashLedgerGLDistributionByAccountRel
								invoked.PrmDistributionAmount				= LocalDistributionAmount
								invoked.PrmDistributionAmount.ExchangeDate	= PrmCheckDate
						else
							invoke CreateFundHistoryDistribution CashLedgerGLDistribution
								invoked.CashManagementGroup										= Company.FinanceEnterpriseGroup
								invoked.CashCode												= PrmCashCode
								invoked.CashLedgerSourceRecord									= "CHK"
								invoked.CashLedgerGLDistribution.BankTransactionCode			= PrmBankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber			= PrmTransactionIDNumber
								invoked.CashLedgerGLDistribution.DistributionType   			= "F"
								invoked.CashLedgerGLDistribution.SequenceNumber					= (last CashLedgerGLDistributionsRel.CashLedgerGLDistribution.SequenceNumber + 1)
								invoked.Company                                     			= Company
								invoked.Status 	 												= Status.Historical
								invoked.Reference                                   			= PrmReference
								invoked.PostDate												= PrmCheckDate
								invoked.Description												= "Cash Disbursement"
								invoked.GLFinanceCodeBlock										= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
								invoked.TransactionNumber                           			= PrmTransactionNumber
								invoked.GeneralLedgerSourceCode									= "AP"
								invoked.GLTransactionAmount    					    			= LocalDistributionAmount.CurrencyAmount
								invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyRate	 	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount 		= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.AlternateAmount.EnteredCurrencyRate 		= LocalDistributionAmount.AlternateAmount.EnteredCurrencyRate
								invoked.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount 	= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.GLBaseAmount.AlternateAmount2.EnteredCurrencyRate 		= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyRate
								invoked.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount 	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								invoked.GLBaseAmount.AlternateAmount3.EnteredCurrencyRate 		= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyRate
								invoked.GLBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToFunctionalAmount.EnteredCurrencyRate 	= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
								invoked.GLBaseAmount.ToAlternateAmount.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToAlternateAmount.EnteredCurrencyRate 		= LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyRate
								invoked.GLBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToAlternateAmount2.EnteredCurrencyRate 	= LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
								invoked.GLBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount 	= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
								invoked.GLBaseAmount.ToAlternateAmount3.EnteredCurrencyRate 	= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
								invoked.GLBaseAmount.ProjectAmount.EnteredCurrencyAmount	 	= LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
								invoked.GLBaseAmount.ProjectAmount.EnteredCurrencyRate	 		= LocalDistributionAmount.ProjectAmount.EnteredCurrencyRate
								invoked.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount1.EnteredCurrencyRate	 		= LocalDistributionAmount.ReportAmount1.EnteredCurrencyRate
								invoked.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount2.EnteredCurrencyRate	 		= LocalDistributionAmount.ReportAmount2.EnteredCurrencyRate
								invoked.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount	 	= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount3.EnteredCurrencyRate	 		= LocalDistributionAmount.ReportAmount3.EnteredCurrencyRate
								invoked.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount4.EnteredCurrencyRate			= LocalDistributionAmount.ReportAmount4.EnteredCurrencyRate
								invoked.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
								invoked.GLBaseAmount.ReportAmount5.EnteredCurrencyRate			= LocalDistributionAmount.ReportAmount5.EnteredCurrencyRate
								invoked.TransientFromCurrency									= PrmCashCodeCurrency
								invoked.LocalExchangeDate										= PrmCheckDate
								invoked.LocalCurrencyTable										= PayablesInvoice.CurrencyTable
								invoked.LocalControlDocumentNumber								= PrmControlDocumentNumber
								invoked.LocalDocumentNumber										= PrmControlDocumentNumber


					if (PrmVoidDate entered)
						LocalTotalDistributionAmount.CurrencyAmount								-= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount

						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
					else
						LocalTotalDistributionAmount.CurrencyAmount								+= LocalDistributionAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount

						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount


		CreatePaymentDistributionBackground is a Set Action		
			default label is untranslatable
			restricted		
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				PrmJournalizeGroup       	is like JournalizeGroup
				PrmNumberOfDistributions	is Numeric 6
				PrmCheckDate				is Date
				PrmVoidDate					is Date
				PrmPostDate					is Date
				PrmAmendedReallocation		is Boolean
				PrmAccrualCode				is like PayablesAccrualCode 
				PrmTotalDistributionAmount	is like FinanceCurrencyAmountGroup
				PrmControlDocumentNumber	is Alpha 30
				PrmDescription           	is Alpha up to 60
				PrmReference             	is a Reference
				PrmCashCode					is like CashCode
				PrmPaymentAccount			is like FinanceCodeBlock
				PrmCashCodeCurrency			is a Currency
				PrmBankCheckExchangeRate	is a CurrencyExchangeRate
				PrmProrateAmount			is an InternationalAmount
				PrmDistributionType			is a PayablesDistributionType

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    DistributionType		= "D"
				and   ((PrmAmendedReallocation
				and    Status.Unreleased)
				or     !PrmAmendedReallocation)
				and  ((!VATReverse
				and    TaxSequenceNumber not entered
				and    !IsAccruedVATTax
				and    !IsAccruedTaxDistribution
				or     (IsLinkTaxDist
				and     TaxType.Invoiced))))

			Local Fields
				LocalAnswer 							is Alpha size 1
				LocalDistributionAmount					is a FinanceCurrencyAmountGroup
				LocalTotalDistributionAmount			is a FinanceCurrencyAmountGroup
				LocalDistributionCount					is Numeric 6
				LocalProrateDistributionAmount			is like CurrencyAmount
				LocalExchangeDate						is an ExchangeDate
				LocalInternationalCost					is an InternationalCost
				LocalLastDistribution					is Boolean
				LocalPaymentAmount						is a FinanceCurrencyAmountGroup
				OldPaymentAmount						is an InternationalAmount

			Action Rules

				Set Rules
					Entrance Rules
						LocalTotalDistributionAmount	= PrmTotalDistributionAmount
					Exit Rules
						invoke FastUpdate PrmPayablesInvoice
							initialize invoked.BackgroundProcessing

				Instance Rules
					LocalDistributionCount += 1
					if (LocalDistributionCount = PrmNumberOfDistributions)
						LocalLastDistribution = true

					if (LocalProrateDistributionAmount not entered)
						LocalProrateDistributionAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount

					if (InvoiceCurrency	!= PrmCashCodeCurrency)
						LocalExchangeDate											= PrmCheckDate
						LocalInternationalCost										= DistributionAmount.CurrencyAmount / LocalProrateDistributionAmount
						LocalInternationalCost										= LocalInternationalCost * PrmProrateAmount
						LocalCurrencyExchange.TransactionAmount						= LocalInternationalCost
						LocalCurrencyExchange.BaseAmount.ToCurrency					= PrmCashCodeCurrency
						if (PrmBankCheckExchangeRate entered)
							LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate = PrmBankCheckExchangeRate
						OldPaymentAmount											= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
					else
						LocalInternationalCost										= DistributionAmount.CurrencyAmount / LocalProrateDistributionAmount
						LocalInternationalCost										= LocalInternationalCost * PrmProrateAmount
						OldPaymentAmount											= LocalInternationalCost
					LocalCurrencyTable = PayablesInvoice.CurrencyTable
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					LocalCurrencyCalculationGroup.ExchangeDate = PrmCheckDate
					LocalCurrencyCalculationGroup.FromCurrency = PrmCashCodeCurrency
					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency = AccountingEntityRel.FunctionalCurrency
					LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency  = AccountingEntityRel.AlternateCurrency
					LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency = AccountingEntityRel.AlternateCurrency2
					LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency = AccountingEntityRel.AlternateCurrency3
					LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency = DistributionAccount.ToAccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency = DistributionAccount.ToAccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency = DistributionAccount.ToAccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency = DistributionAccount.ToAccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency = Company.FinanceEnterpriseGroup.ReportCurrencyOne
					LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency = Company.FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency = Company.FinanceEnterpriseGroup.ReportCurrencyThree
					LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency = Company.FinanceEnterpriseGroup.ReportCurrencyFour
					LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency = Company.FinanceEnterpriseGroup.ReportCurrencyFive
					LocalCurrencyCalculationGroup.CurrencyAmount					= OldPaymentAmount
					LocalPaymentAmount.CurrencyAmount	    						= OldPaymentAmount
					LocalPaymentAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					LocalPaymentAmount.FunctionalAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
					if (AccountingEntityRel.AlternateCurrency entered)
						LocalPaymentAmount.AlternateAmount.EnteredCurrencyAmount   				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
						LocalPaymentAmount.AlternateAmount.EnteredCurrencyRate   				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
					if (AccountingEntityRel.AlternateCurrency2 entered)
						LocalPaymentAmount.AlternateAmount2.EnteredCurrencyAmount   			= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
						LocalPaymentAmount.AlternateAmount2.EnteredCurrencyRate   				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
					if (AccountingEntityRel.AlternateCurrency3 entered)
						LocalPaymentAmount.AlternateAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
						LocalPaymentAmount.AlternateAmount3.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyOne entered)
						LocalPaymentAmount.ReportAmount1.EnteredCurrencyAmount     				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
						LocalPaymentAmount.ReportAmount1.EnteredCurrencyRate     				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
						LocalPaymentAmount.ReportAmount2.EnteredCurrencyAmount      			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
						LocalPaymentAmount.ReportAmount2.EnteredCurrencyRate 	     			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyThree entered)
						LocalPaymentAmount.ReportAmount3.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
						LocalPaymentAmount.ReportAmount3.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyFour entered)
						LocalPaymentAmount.ReportAmount4.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
						LocalPaymentAmount.ReportAmount4.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
					if (Company.FinanceEnterpriseGroup.ReportCurrencyFive entered)
						LocalPaymentAmount.ReportAmount5.EnteredCurrencyAmount					= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
						LocalPaymentAmount.ReportAmount5.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

					LocalNumberOfDecimals	= InvoiceCurrency.NumberOfDecimals
					round LocalPaymentAmount.CurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= AccountingEntityRel.FunctionalCurrency.NumberOfDecimals
					round LocalPaymentAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency.NumberOfDecimals
					round LocalPaymentAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency2.NumberOfDecimals
					round LocalPaymentAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= AccountingEntityRel.AlternateCurrency3.NumberOfDecimals
					round LocalPaymentAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
					round LocalPaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
					round LocalPaymentAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
					round LocalPaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= DistributionAccount.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
					round LocalPaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= DistributionAccount.Project.Currency.NumberOfDecimals
					round LocalPaymentAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
					round LocalPaymentAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
					round LocalPaymentAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
					round LocalPaymentAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
					round LocalPaymentAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
					LocalNumberOfDecimals	= Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
					round LocalPaymentAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

					if (!LocalLastDistribution)
						LocalTotalDistributionAmount.CurrencyAmount								-= LocalPaymentAmount.CurrencyAmount
						LocalTotalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		-= LocalPaymentAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		-= LocalPaymentAmount.AlternateAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		-= LocalPaymentAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		-= LocalPaymentAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= LocalPaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		-= LocalPaymentAmount.ReportAmount1.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		-= LocalPaymentAmount.ReportAmount2.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		-= LocalPaymentAmount.ReportAmount3.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		-= LocalPaymentAmount.ReportAmount4.EnteredCurrencyAmount
						LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		-= LocalPaymentAmount.ReportAmount5.EnteredCurrencyAmount

					if (LocalLastDistribution)
						NegativeFinanceCurrencyAmountGroup	= LocalTotalDistributionAmount
						LocalPaymentAmount					= LocalTotalDistributionAmount
					else
						NegativeFinanceCurrencyAmountGroup	= LocalPaymentAmount
					LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PrmPaymentAccount
					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						invoked.CreateAlternateGLTransDetail	= true
						if (PrmVoidDate	entered)
							invoked.GLTPostingDate				= PrmVoidDate
							invoked.DistributionDate			= PrmVoidDate
							invoked.GLTGeneralLedgerEvent		= "VP"
							invoked.DistributionAmount			= LocalPaymentAmount
						else
							if (PrmPostDate entered)
								invoked.GLTPostingDate			= PrmPostDate
								invoked.DistributionDate		= PrmPostDate
							else
								invoked.GLTPostingDate			= PrmCheckDate
								invoked.DistributionDate		= PrmCheckDate
							invoked.GLTGeneralLedgerEvent	= "AP"
							invoked.DistributionAmount		= NegativeFinanceCurrencyAmountGroup
						invoked.GLTTransactionDate			= PrmCheckDate
						invoked.GLTCurrencyCode				= PrmCashCodeCurrency
						invoked.Company						= Company
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.DistributionType 			= PrmDistributionType
						invoked.AccrualCode					= PrmAccrualCode
						invoked.PostingOption				= "S"
						invoked.Status						= 1
						invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
						invoked.GLTDocumentNumber           = PrmControlDocumentNumber
						invoked.Description					= PrmDescription
						invoked.DistributionReference		= PrmReference
						invoked.InvoiceCurrency				= PrmCashCodeCurrency
						invoked.DistributionAmount.ExchangeDate			= PrmCheckDate
						invoked.DistributionAmount.KeepRateAndAmount	= true
						invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTTransactionCodeBlock		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTJournalizeGroup			= PrmJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		


		MassCancelDistribution is a Set Action		
			default label is untranslatable
			restricted		
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is like PayablesInvoice
				PrmCancelSequence	is a CancelSequence
				PrmCancelDate		is Date				
				PrmComment			is a CommentText	

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    CancelSequence		= blank)



			Action Rules
				Instance Rules
				
					if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
					and  !PayablesInvoice.MatchProcessType.Expense
					and  MatchCreated.Unmatch)
						if  (!PayablesInvoice.MatchProcessType.Expense 
						and (Status.Unreleased or Status.Released)     
						and  DistributionDate != PrmCancelDate) 
							DistributionDate = PrmCancelDate
							if (Status.Unreleased)
								invoke Unreleased.Update GLTransactionDetailRel
									fill in user fields from this instance		 
									invoked.PostingDate					= DistributionDate
							else		 
								if (Status.Released)
									invoke Released.Update GLTransactionDetailRel
										fill in user fields from this instance
										invoked.PostingDate				= DistributionDate

						CancelSequence 		= PrmCancelSequence 
						CommentText			= PrmComment
						ReverseFromCancel	= true
					else
						invoke CancelDistribution
							invoked.PrmCancelSequence	= PrmCancelSequence
							invoked.PrmCancelDate		= PrmCancelDate
							invoked.PrmComment			= PrmComment
					




		CancelDistribution is an Instance Action	
			default label is untranslatable
			restricted			
			Parameters
				PrmCancelSequence	is a CancelSequence
				PrmCancelDate		is Date				
				PrmComment			is a CommentText	
			Parameter Rules
				PrmCancelSequence
					required
				PrmCancelDate
					required
					initial value is current corporate date
			Action Rules

				if (ReconciliationDetailRel exists)		
					constraint (!ReconciliationDetailRel.AmortizationPeriodEndDetailsExists)
						"RelatedAmortizationDistributionsExist;CannotCancel"
					invoke Delete ReconciliationDetailRel
					
				BypassDistActionExitRules = false
				BypassProjectDateEdit = true
				BypassStructureRelationEdit = true
				BypassUnitAndAmountEdit = true
				LocalPerformingCancel = true
				if  (AssetFlag entered
				and  AssetDetailRel exists
				and (PayablesInvoice.MatchProcessType.Expense
				or   PayablesInvoiceDetail not entered
				or   (PayablesInvoiceDetail entered
				and   PayablesInvoiceDetail.PurchaseOrderLineAssetRel not exists)))
					if (AssetCompanyRel.PayablesDistributionWithTax.Summary)	
						if (IsExpenseDistribution)
							invoke CreateAssetInterface AssetDetailRel
					else
						if (IsExpenseDistribution
						or (PayablesInvoiceDetail entered 
						and IsLandedTaxDistribution)
						or (IsLinkedTaxDistribution
						and IsLandedTaxDistribution))
							invoke CreateAssetInterface AssetDetailRel
					if (GLTransactionDetailRel.Status.Released)												
						invoke Released.UpdateReleasedGLTransDetailNoRules GLTransactionDetailRel			
							invoked.Capitalize	= 1	
					else 																					
						if (GLTransactionDetailRel.Status.Unreleased)										
							invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel	
								invoked.Capitalize	= 1	
					if (!Status.Historical
					and  PayablesInvoiceDistribution.PayablesInvoice.CancelSequence = blank)
						invoke Delete PayablesAssetDetail
				CancelSequence = PrmCancelSequence
				if  (!PayablesInvoice.MatchProcessType.Expense 
				and (Status.Unreleased or Status.Released)     
				and  DistributionDate != PrmCancelDate)  
					DistributionDate = PrmCancelDate
					if (Status.Unreleased)
						invoke Unreleased.Update GLTransactionDetailRel
							fill in user fields from this instance		 
							invoked.PostingDate					= DistributionDate
					else		 
						if (Status.Released)
							invoke Released.Update GLTransactionDetailRel
								fill in user fields from this instance
								invoked.PostingDate				= DistributionDate

				if (DistributionType.Distribution		
				or  DistributionType.ExpenseAccrual		
				or  DistributionType.AccruedWithholding)































					if (Status.Unreleased)		
						invoke Delete			
					else						
					if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					and   GLCommitRel exists)

						invoke ReverseDistribution
							invoked.PrmReversalPostDate		= PrmCancelDate 
							invoked.PrmCancelSequence		= PayablesInvoice.CancelSequence
							invoked.PrmReverseForUpdate		= false
							invoked.PrmReverseFromCancel	= true

					else
					if (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger	
					and  Status.Released 							
					and !PayablesInvoice.MatchProcessType.Expense)	
						invoke Delete								
					else											

						invoke ReverseDistribution
							invoked.PrmReversalPostDate		= PrmCancelDate		
							invoked.PrmCancelSequence		= PrmCancelSequence
							invoked.PrmReverseForUpdate		= false
							invoked.PrmComment				= PrmComment		
							invoked.PrmReverseFromCancel	= true				


					for each TaxTransactionCancelRel					
						invoke FastUpdate each							
							invoked.CancelSequence = PrmCancelSequence	

					if  (RecurringJournalExists				
					and !RecurringJournalControlRel.Status.Deleted)
						if (RecurringJournalControlRel.Status.Unreleased)
							invoke Delete Unreleased RecurringJournalControlRel
						if (RecurringJournalControlRel.Status.Released)
							invoke Delete Released RecurringJournalControlRel

					BypassDistActionExitRules = true
				






		417BProrateAocTax is an Instance Action 
			default label is untranslatable
			restricted
			Parameters
				ProrateAccount 				is a FinanceCodeBlock	
				AddOnCharge
				ApinwsXXProrateDist			is an InternationalAmount
			Local Fields
				GoTo417BFindNext 			is Boolean
				DoNothing					is Boolean
			Action Rules
				if (ProrateAccount entered)
					if (AddOnCharge not entered)
						DoNothing = true
					else
						ApinwsXXProrateDist = DistributionAmount.CurrencyAmount

				if (ProrateAccount entered
				and AddOnCharge not entered)
					GoTo417BFindNext = true
				else
					initialize LocalCalculateTax
					CalculateTax.CallingModule							= "Payables_Invoice_Distribution"
					CalculateTax.Function								= "C"
					if (TaxAccountingEntity entered)
						CalculateTax.TaxEntity							= TaxAccountingEntity
					else	
						CalculateTax.TaxEntity							= GeneralLedgerCompanyRel.AccountingEntity
					CalculateTax.TaxCode								= AddOnCharge.TaxCode
					CalculateTax.TaxableAmount							= ApinwsXXProrateDist
					CalculateTax.TaxCodeAccount.AccountingUnit			= DistributionAccount.AccountingUnit
					CalculateTax.TaxCodeAccount.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
					CalculateTax.InvoiceDate							= PayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate							= PayablesInvoice.InvoiceDate
					CalculateTax.ProductTaxCategory						= blank
					CalculateTax.PostalAddress							= PayablesInvoice.ProcessLevel.PostalAddress
					CalculateTax.FromPostalAddress						= PayablesInvoice.Vendor.CurrentAddressRel.PostalAddress
					CalculateTax.System									= "AP"
					if (!CalculateTax.DoTaxCalculation)
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"
					
					initialize LocalCreateTaxDistributions
					LocalCreateTaxDistributions.AddOnCharge					= AddOnCharge
					LocalCreateTaxDistributions.TaxIndicator				= 2
					LocalCreateTaxDistributions.OriginalDistribution		= PayablesInvoiceDistribution
					LocalCreateTaxDistributions.FinanceStructure			= DistributionAccount
					LocalCreateTaxDistributions.PostingOption				= Vendor.VendorClass.PostingOption
					LocalCreateTaxDistributions.ProrateIndicator			= 1
					if (!LocalCreateTaxDistributions.PerformCreateTaxDistributions)
						constraint (LocalCreateTaxDistributions.OutputErrorNumber not entered)
							"<LocalCreateTaxDistributions.OutputErrorMessage>"



		585BuildTxTaxTrans is an Instance Action 
			default label is untranslatable
			restricted
			Parameters
				ApwsReverseFlag is Alpha size 1
				ApwsCancelledFl is Alpha size 1
				ReversalPostDate is Date
			Action Rules 


				LocalReversalPostDate = ReversalPostDate
				include CreateTaxHistory




		ProcessReversingTaxDistribution is an Instance Action	
			default label is untranslatable
			restricted		

			Parameters
				PrmTranPmtAmt			is an InternationalAmount
				PrmPostDate				is Date
				PrmJournalizeGroup		is like JournalizeGroup
				PrmDiscountLost			is Boolean
				PrmTranPmtAmount		is an InternationalAmount
				PrmIsInterCompany 		is Boolean					
				PrmInterCompanyEntity	is like AccountingEntity	
				PrmBypassTaxCodeProcessing	is Boolean		
			Local Fields
				LocalReversalAmount		is an InternationalAmount
				LocalPaymentPercent		is Percent size 6.3
				LocalPmtTaxAmount		is an InternationalAmount
				LocalTaxDiscountAmt		is an InternationalAmount
			Action Rules

				LocalContinue					= true
				LocalReversalAmount				= PrmTranPmtAmt
				CalculateTax.Function			= "I"
				if (TaxAccountingEntity entered)
					CalculateTax.TaxEntity			= TaxAccountingEntity
				else
					CalculateTax.TaxEntity			= GeneralLedgerCompanyRel.AccountingEntity
				CalculateTax.TaxCode			= TaxCode
				CalculateTax.ProductTaxCategory = ProductTaxCategory
				CalculateTax.TaxUsageCode		= TaxUsageCode			
				CalculateTax.InvoiceDate		= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate		= PrmPostDate
				CalculateTax.BypassMemberEdit	= true
				CalculateTax.System				= "AP"
				include LoadVertexGlobalInputFields					
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput



				if (CalculateTax.OutputErrorNumber not entered
				and CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag
				and CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount != DistributionAccount)	




					if (IsTaxDistribution			
					and TaxPoint.Payment)			

						LocalTaxTranAccount		= DistributionAccount
						LocalTaxTranAmount		= DistributionAmount.CurrencyAmount
						include CreateTxTaxTrans						
						LocalContinue	= false

				if (LocalContinue)

					invoke ReverseTaxDistribution		
						invoked.PrmJournalizeGroup		= PrmJournalizeGroup
						invoked.PrmPostDate				= PrmPostDate
						invoked.PrmReverse				= true
						invoked.PrmBypassTaxCodeProcessing	= PrmBypassTaxCodeProcessing	
						if (CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint = "P")
							invoked.PrmTaxAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount
						else
							invoked.PrmTaxAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
						if (PrmIsInterCompany)													
							invoked.PrmTaxAccount.ToAccountingEntity = PrmInterCompanyEntity	
					

					invoke ReverseTaxDistribution		
						invoked.PrmJournalizeGroup		= PrmJournalizeGroup
						invoked.PrmPostDate				= PrmPostDate
						invoked.PrmReverse				= false
						invoked.PrmBypassTaxCodeProcessing	= PrmBypassTaxCodeProcessing	
						if (this instance.PayablesInvoice.InvoiceType.Prepayment
						or  this instance.PayablesInvoice.InvoiceType.PrepaymentCredit)
							if (DistributionAccount entered)
								invoked.PrmTaxAccount	= DistributionAccount
								LocalTaxTranAccount		= DistributionAccount
							else
								if (GLFinanceCodeBlock entered)
									invoked.PrmTaxAccount	= GLFinanceCodeBlock
									LocalTaxTranAccount		= GLFinanceCodeBlock
						else
							invoked.PrmTaxAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
							LocalTaxTranAccount			= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
							if (PrmIsInterCompany)													
								invoked.PrmTaxAccount.ToAccountingEntity = PrmInterCompanyEntity	
								LocalTaxTranAccount.ToAccountingEntity	 = PrmInterCompanyEntity	


					LocalTaxTranAmount		= DistributionAmount.CurrencyAmount
					include CreateTxTaxTrans







					if (!PrmDiscountLost
					and PayablesInvoice.DiscountAmount.CurrencyAmount entered
					and PayablesInvoice.DiscountAmount.FunctionalAmount.EnteredCurrencyAmount entered)

						if ((TaxType.Accrued
						or   CalculateTax.TaxTable.TaxTableOutput[1].TaxTerms.Taxbeforeterms)
						and Company.TaxRecoveryOnDiscount
						and PayablesInvoice.TaxAmount entered
						and PayablesInvoice.InvoiceAmount.CurrencyAmount entered
						and PayablesInvoice.DiscountPercent > 0)
							LocalPaymentPercent	= PrmTranPmtAmount / PayablesInvoice.InvoiceAmount.CurrencyAmount
							LocalPmtTaxAmount	= LocalPaymentPercent * DistributionAmount.CurrencyAmount
							LocalTaxDiscountAmt	= LocalPmtTaxAmount * PayablesInvoice.DiscountPercent

							invoke ReverseTaxDistribution		
								invoked.PrmJournalizeGroup		= PrmJournalizeGroup
								invoked.PrmPostDate				= PrmPostDate
								invoked.PrmReverse				= true
								invoked.PrmTaxRecovery			= true
								invoked.PrmBypassTaxCodeProcessing	= PrmBypassTaxCodeProcessing	
								invoked.PrmTaxRecoveryAmt		= LocalTaxDiscountAmt
								if (this instance.PayablesInvoice.InvoiceType.Prepayment
								or  this instance.PayablesInvoice.InvoiceType.PrepaymentCredit)
									if (DistributionAccount entered)
										invoked.PrmTaxAccount	= DistributionAccount
										LocalTaxTranAccount		= DistributionAccount
									else
										if (GLFinanceCodeBlock entered)
											invoked.PrmTaxAccount	= GLFinanceCodeBlock
											LocalTaxTranAccount		= GLFinanceCodeBlock
								else
									invoked.PrmTaxAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
									LocalTaxTranAccount			= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
									if (PrmIsInterCompany)													
										invoked.PrmTaxAccount.ToAccountingEntity = PrmInterCompanyEntity	
										LocalTaxTranAccount.ToAccountingEntity	 = PrmInterCompanyEntity	


							LocalTaxTranAmount		= LocalTaxDiscountAmt * -1
							include CreateTxTaxTrans


							LocalPayablesCompany		= Company
							LocalPayablesDiscountCode	= PayablesInvoice.DiscountCode
							invoke ReverseTaxDistribution		
								invoked.PrmJournalizeGroup		= PrmJournalizeGroup
								invoked.PrmPostDate				= PrmPostDate
								invoked.PrmReverse				= false
								invoked.PrmTaxRecovery			= true
								invoked.PrmBypassTaxCodeProcessing	= PrmBypassTaxCodeProcessing	
								invoked.PrmTaxRecoveryAmt		= LocalTaxDiscountAmt
								invoked.PrmTaxAccount			= PayablesDiscountCodeDetailRel.DiscountAccount
								LocalTaxTranAccount				= PayablesDiscountCodeDetailRel.DiscountAccount		
								if (PrmIsInterCompany)													
									invoked.PrmTaxAccount.ToAccountingEntity = PrmInterCompanyEntity	
									LocalTaxTranAccount.ToAccountingEntity	 = PrmInterCompanyEntity	


		




		CreatePrepaymentTaxTransaction is an Instance Action
			default label is untranslatable
			restricted		
			Parameters
				PrmPostDate				is Date
				PrmTranInvAmount		is an InternationalAmount		
				PrmPrepayCredit			is Boolean						
			Action Rules

				LocalTaxTranAccount		= DistributionAccount
				LocalTaxTranAmount		= DistributionAmount.CurrencyAmount
				LocalPrepayCredit		= PrmPrepayCredit		
				if (LocalPrepayCredit)		
					LocalTranInvAmount	= PrmTranInvAmount
				include CreateTxTaxTrans



		AddToFundAppliedAmount is an Instance Action 
			default label is untranslatable
			restricted
			Parameters
				PrmAmount is like InternationalAmount
			Action Rules
				FundAppliedAmount += PrmAmount

		UnselectFundDistribution is an Instance Action 
			default label is "Unselect"
			valid when (AllowUnselectFundDistribution)
			Action Rules
				invoke Delete ICBPayablesApplyDistributionContextRel

		SelectOpenFundDistributionAmount is an Instance Action 
			default label is "SelectAvailableAmount"
			valid when (AllowSelectDistributionOpenAmount)
			Action Rules
				invoke Create ICBPayablesApplyDistributionContextRel
					invoked.IntercompanyBillingSettlementHeader		= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
					invoked.IntercompanyBillingSettlementDetail		= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
					invoked.IntercompanyBillingSettlementDetailLine = ContextSettlementDetailLineRel.IntercompanyBillingSettlementDetailLine
					invoked.PayableEntity							= ContextSettlementDetailRel.PayableEntity
					invoked.ApplyFundDistributionAccount			= GLFinanceCodeBlock
					invoked.DistributionAmount.CurrencyAmount 		= DerivedFundDistributionOpenAmount
					invoked.DistributionAmount.ExchangeDate			= DistributionAmount.ExchangeDate
					invoked.OriginalCurrency						= InvoiceCurrency


		ReverseTaxDistribution is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup
				PrmPostDate				is Date
				PrmTaxAccount			is a FinanceCodeBlock
				PrmReverse				is Boolean
				PrmTaxRecovery			is Boolean
				PrmTaxRecoveryAmt		is an InternationalAmount
				PrmBypassTaxCodeProcessing	is Boolean	
			Local Fields
				Multiplier		is Numeric size 2
			Action Rules

				if (PrmReverse)
					Multiplier = -1
				else
					Multiplier = 1
				
				invoke Create PayablesInvoiceDistribution
					assign result to NewPayablesInvoiceDistribution
					fill in fields from this instance
						except invoked.TransientReferenceToThisInstance
						except invoked.TransientPercent
						except invoked.GltObjId
					initialize invoked.GLTransactionAmount
					invoked.GLFinanceCodeBlock					= PrmTaxAccount
					invoked.GLTPostingDate						= PrmPostDate
					invoked.DistributionDate					= PrmPostDate
					if (PrmTaxRecovery)
						invoked.GLTransactionAmount				= (PrmTaxRecoveryAmt * Multiplier)
						initialize invoked.TaxableAmount
						initialize invoked.TaxCode
						initialize invoked.TaxIndicator
						initialize invoked.UnitAmount
						initialize invoked.DistributionAmount		
						if (!PrmReverse)
							invoked.DistributionAccount			= PrmTaxAccount
					else
						invoked.GLTransactionAmount				= (GLTransactionAmount * Multiplier)
						invoked.DistributionAmount.ExchangeDate								= DistributionAmount.ExchangeDate
						invoked.DistributionAmount.CurrencyAmount							= (DistributionAmount.CurrencyAmount * Multiplier)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= DistributionAmount.FunctionalAmount.EnteredCurrencyRate					
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= (DistributionAmount.AlternateAmount.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= DistributionAmount.AlternateAmount.EnteredCurrencyRate					
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= DistributionAmount.AlternateAmount2.EnteredCurrencyRate					
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= DistributionAmount.AlternateAmount3.EnteredCurrencyRate					
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate					
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount.EnteredCurrencyRate					
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate					
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate					
						invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= (DistributionAmount.ProjectAmount.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= DistributionAmount.ProjectAmount.EnteredCurrencyRate						
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= (DistributionAmount.ReportAmount1.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= DistributionAmount.ReportAmount1.EnteredCurrencyRate						
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= (DistributionAmount.ReportAmount2.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= DistributionAmount.ReportAmount2.EnteredCurrencyRate						
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= (DistributionAmount.ReportAmount3.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= DistributionAmount.ReportAmount3.EnteredCurrencyRate						
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= (DistributionAmount.ReportAmount4.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= DistributionAmount.ReportAmount4.EnteredCurrencyRate						
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= (DistributionAmount.ReportAmount5.EnteredCurrencyAmount * Multiplier)
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= DistributionAmount.ReportAmount5.EnteredCurrencyRate						

						invoked.DistributionAmount.KeepRateAndAmount	= true			
						invoked.TaxableAmount 						= (TaxableAmount * Multiplier)
						invoked.UnitAmount 							= (UnitAmount * Multiplier)
					if (TaxAccountingEntity not entered)
						invoked.TaxAccountingEntity				= GeneralLedgerCompanyRel.AccountingEntity
					invoked.LocalBypassMemberEdit				= true
					invoked.Status								= Status.Unreleased
					invoked.DistributionType					= DistributionType.TaxReversalDistribution
					invoked.TransientReleaseAfterCreate			= true
					invoked.GLTJournalizeGroup					= PrmJournalizeGroup
					invoked.TransientTaxReversal				= true					
					invoked.BypassTaxCodeProcessing				= PrmBypassTaxCodeProcessing	





		AdjustBaseDistributionAmount is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				AdjustAmount is an InternationalAmount
			Action Rules
				DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	+= AdjustAmount



		AdjustDistributionCurrencyAmounts is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCurrencyAmountAdjustment	is a PayablesCurrencyGroupTotals
			Action Rules
				DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.FunctionalTotal
				DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.AlternateTotal
				DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.AlternateTotal2
				DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.AlternateTotal3
				if (AccountingEntity != DistributionAccount.ToAccountingEntity)												
					if (DistributionAccount.ToAccountingEntity.FunctionalCurrency = AccountingEntity.FunctionalCurrency)		
						DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount += PrmCurrencyAmountAdjustment.FunctionalTotal
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency = AccountingEntity.AlternateCurrency)
						DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	+= PrmCurrencyAmountAdjustment.AlternateTotal
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency2 = AccountingEntity.AlternateCurrency2)
						DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount += PrmCurrencyAmountAdjustment.AlternateTotal2
					if (DistributionAccount.ToAccountingEntity.AlternateCurrency3 = AccountingEntity.AlternateCurrency3)
						DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount += PrmCurrencyAmountAdjustment.AlternateTotal3
				DistributionAmount.ProjectAmount.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ProjectTotal
				DistributionAmount.ReportAmount1.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ReportTotal1
				DistributionAmount.ReportAmount2.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ReportTotal2
				DistributionAmount.ReportAmount3.EnteredCurrencyAmount	 	+= PrmCurrencyAmountAdjustment.ReportTotal3
				DistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= PrmCurrencyAmountAdjustment.ReportTotal4
				DistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= PrmCurrencyAmountAdjustment.ReportTotal5

				if (GLTransactionDetailRel.Status.Unreleased)

					invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel		
						invoked.ReportCurrencyAmount 					= DistributionAmount
						invoked.ReportCurrencyAmount.KeepRateAndAmount	= true
						if (GLTransactionAmount entered)
							BypassUnitAndAmountEdit 					= false
						else
							BypassUnitAndAmountEdit 					= true
				else
					if (GLTransactionDetailRel.Status.Released)

						invoke Released.UpdateReleasedGLTransDetailNoRules GLTransactionDetailRel		
							invoked.ReportCurrencyAmount 					= DistributionAmount
							invoked.ReportCurrencyAmount.KeepRateAndAmount	= true
							if (GLTransactionAmount entered)
								BypassUnitAndAmountEdit 					= false
							else
								BypassUnitAndAmountEdit 					= true
			Exit Rules
				if  (ReleasedCommitmentExists)
					invoke ChangeReleasedCommitment GLCommitRel
						invoked.PrmTransDate                        	= DistributionDate				
						invoked.PrmChangedCurrAmount.FunctionalAmount 	= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ProjectAmount		= DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount1      = DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount2      = DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount3      = DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount4      = DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ReportAmount5      = DistributionAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.AlternateAmount    = DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.AlternateAmount2   = DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.AlternateAmount3   = DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						invoked.PrmLastTransAmount       				= DistributionAmount.CurrencyAmount
						invoked.PrmChangedCurrAmount.ToFunctionalAmount = DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ToAlternateAmount  = DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ToAlternateAmount2 = DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						invoked.PrmChangedCurrAmount.ToAlternateAmount3 = DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
				else
					invoke MaintainUnreleasedCommitment GLCommitRel
						invoked.ReportCurrencyAmount     = DistributionAmount	
						invoked.TransientSkipRebuild     = true 	

		CreateTaxLineItem is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmPurchaseOrder is a PurchaseOrder
				PrmPurchaseOrderLine is a PurchaseOrderLine
				PrmCreateFromCancel	 is Boolean			
				PrmReversingTaxRate is a ChrgRate		
			Action Rules
			
				if  (PrmPurchaseOrderLine not entered)
					PrmPurchaseOrder = PurchaseOrder
					PrmPurchaseOrderLine = PurchaseOrderLine
				



				initialize AttributeCounter
				
				invoke Create TaxLineItem
					assign result to TaxLineItemView
				
					invoked.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
					invoked.TaxLineItem.UniqueIdOfRelatedObject = PayablesInvoice.UniqueID
					invoked.RelatedObjectReference 				= reference to this instance
					invoked.InvoiceNumber						= PayablesInvoice.Invoice


					invoked.LineItemNumber						= PayablesInvoiceDistribution	
					invoked.LineItemId							= AddOnCharge					
					invoked.Description							= AddOnCharge.Description		
					invoked.RelatedLineItemUniqueId				= UniqueID											
					invoked.InvoiceDate							= PayablesInvoice.InvoiceDate
					invoked.TaxEntity							= GeneralLedgerCompanyRel.AccountingEntity
				

					if  (PayablesInvoice.MatchProcessType.Expense)

						if (PrmCreateFromCancel)															
							invoked.InvoiceAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount * -1	
							invoked.TaxableAmount				= TaxableAmount * -1
						else
							invoked.InvoiceAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount		
							invoked.TaxableAmount				= TaxableAmount
						if (PayablesInvoice.VendorReturn entered)											
							invoked.ShipToTaxCode				= PurchaseOrderLine.TaxCode					
							invoked.ShipToTaxCodeDescription	= PurchaseOrderLine.TaxCode.Description		
							invoked.CommodityCode				= PurchaseOrderLine.CommodityCode			
						else																				
							invoked.ShipToTaxCode				= TaxCode									
							invoked.ShipToTaxCodeDescription	= TaxCode.Description									
							if (ICNCode entered)
								invoked.CommodityCode			= ICNCode										
								invoked.ExcludeFromTaxEstimate	= ICNCode.ExcludeFromTaxEstimate				
							else
							if (HSNSACCode entered)								
								invoked.CommodityCode			= HSNSACCode	
								invoked.CommodityCodeType		= "HSN"			
						if (PayablesInvoice.RemitToCode.CurrentAddressRel.PostalAddress entered)					
							invoked.ShipFromAddress	= PayablesInvoice.RemitToCode.CurrentAddressRel.PostalAddress	
						else																						
							invoked.ShipFromAddress	= PayablesInvoice.Vendor.CurrentAddressRel.PostalAddress		
						if (PayablesInvoice.Status.Amended			
						and PrmReversingTaxRate entered)			
							invoked.TaxRate	= PrmReversingTaxRate	
					else

						if  (AddOnCharge entered)
							invoked.InvoiceAmount					= PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
							invoked.TaxableAmount					= PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
							invoked.ShipToTaxCode					= PayablesInvoiceAddOnChargeRel.TaxCode									
							invoked.ShipToTaxCodeDescription		= PayablesInvoiceAddOnChargeRel.TaxCode.Description									
							invoked.CommodityCode					= PayablesInvoiceDetail.DerivedCommodityCodeNoDash											
						else
							invoked.InvoiceAmount					= PayablesInvoiceDetail.TotalDistributionAmount
							invoked.TaxableAmount					= PayablesInvoiceDetail.TotalDistributionAmount
							invoked.ShipToTaxCode					= PayablesInvoiceDetail.TaxCode									
							invoked.ShipToTaxCodeDescription		= PayablesInvoiceDetail.TaxCode.Description									
							invoked.CommodityCode					= PayablesInvoiceDetail.DerivedCommodityCodeNoDash											
				
					if (PayablesInvoice.Dropship
					and PayablesInvoice.FirstPurchaseOrder entered)
						invoked.ShipToAddress 					= PayablesInvoice.FirstPurchaseOrder.DropshipAddress
					else
					if (PayablesInvoice.FirstPurchaseOrder entered
					and PayablesInvoice.FirstPurchaseOrder.ShipToLocation entered)
						invoked.ShipToAddress					= PayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
					else
					if (PayablesTaxDetailRel.PayablesAddressCode entered)		
						invoked.ShipToAddress					= PayablesTaxDetailRel.PayablesAddressCode.PostalAddress		

					else
					if (PayablesInvoice.Location entered)
						invoked.ShipToAddress 					= PayablesInvoice.Location.PostalAddressForPurchaseOrder
					else
						invoked.ShipToAddress 					= ProcessLevel.PostalAddress	
					if (PayablesInvoice.MatchProcessType.Expense														
					and PayablesTaxDetail.ShipToLocation entered)														
						if (PayablesTaxDetail.ShipToLocation.PostalAddressForPurchaseOrder entered)						
							invoked.ShipToAddress	= PayablesTaxDetail.ShipToLocation.PostalAddressForPurchaseOrder	
						else																							
						if (PayablesTaxDetail.ShipToLocation.PostalAddress entered)										
							invoked.ShipToAddress	= PayablesTaxDetail.ShipToLocation.PostalAddress					









				if (PayablesInvoice.MatchProcessType.Expense
				or (!PayablesInvoice.MatchProcessType.Expense
				and PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic))

					if (LocalTaxEntity not entered)	
						LocalTaxEntity	= TaxAccountingEntity	

					if (PayablesInvoice.TaxEntityUsesSabrix		
					and TaxAttributesRel.OneSourceTaxAttributeRel exists)
						if (PayablesInvoice.TaxConfigurationRel.AttributeMissingProcess.MissingMessage)
							if (PayablesInvoice.TaxConfigurationRel.AttributeMissingMessage entered)
								LocalMissingMessage	= PayablesInvoice.TaxConfigurationRel.AttributeMissingMessage
							else
								LocalMissingMessage = "MissingAttributeAndMessage"
						initialize Idx
						invoke Create TaxLineItemUserFields

							for each TaxAttributesRel.OneSourceTaxAttributeRel



								if ((each.LoadDynamicField.System	= "AP"
								or   each.LoadDynamicField.System not entered)
								and Idx < 50)
									invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
									invoked.TaxLineItem.UniqueIdOfRelatedObject 			= PayablesInvoice.UniqueID
									invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
									if (each.LoadDynamicField.ValueIs.TaxEntity)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= LocalTaxEntity

									else
									if (each.LoadDynamicField.ValueIs.Company)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= Company

									else
									if (each.LoadDynamicField.ValueIs.Vendor)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= Vendor

									else
									if (each.LoadDynamicField.ValueIs.PostingDate)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= DistributionDate

									else
									if (each.LoadDynamicField.ValueIs.TaxDate)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										if (PayablesInvoice.DerivedTaxPointDate entered)
											invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoice.DerivedTaxPointDate
										else
											invoked.UserElementGroup.UserElement[Idx].Value	= DerivedTaxPointDate2

									else
									if (each.LoadDynamicField.ValueIs.GLAccount)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.GeneralLedgerChartAccount

									else
									if (each.LoadDynamicField.ValueIs.Location)
										if (!PayablesInvoice.MatchProcessType.Expense
										and  PayablesInvoiceDetail.Location entered)																
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoiceDetail.Location
										else
										if (PayablesInvoice.RemitToCode entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoice.RemitToCode
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage

									else
									if (each.LoadDynamicField.ValueIs.Currency)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.InvoiceCurrency

									else
									if (each.LoadDynamicField.ValueIs.AddOnCharge)
										if (AddOnCharge entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= AddOnCharge

										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.DiscountAmount)
										if (PayablesInvoice.DiscountAmount.CurrencyAmount entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											if (PrmCreateFromCancel)															
												invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoice.DiscountAmount.CurrencyAmount * -1
											else
												invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoice.DiscountAmount.CurrencyAmount
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.UnitCost)
										if (PayablesInvoiceDetail.EnteredQuantity entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DerivedUnitCost

										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.AccountSubType)
										if (DistributionAccount.GeneralLedgerChartAccount.AccountSubType entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= DistributionAccount.GeneralLedgerChartAccount.AccountSubType
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.Project)
										if (DistributionAccount.Project entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= DistributionAccount.Project
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.WorkType)
										if (DistributionAccount.Project.WorkType entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= DistributionAccount.Project.WorkType
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.ServiceType)
										if (DistributionAccount.Project.ServiceType entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= DistributionAccount.Project.ServiceType
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.UsageType)
										if (DistributionAccount.Project.UsageType entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= DistributionAccount.Project.UsageType
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.ContractType)
										if (DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.CustomerType)
										if (DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.CommodityCode)			
										if (PayablesInvoice.VendorReturn entered)				
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= PurchaseOrderLine.CommodityCode

										else
										if (AddOnCharge entered										
										and AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode	
										and AddOnCharge.CommodityCode entered)						
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= AddOnCharge.CommodityCode

										else
										if (PayablesInvoiceDetail.CommodityCode entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoiceDetail.CommodityCode

										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.UNSPSC)
										if (PayablesInvoiceDetail.PurchaseOrderLine.UNSPSCCode entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoiceDetail.PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay

										else
										if (PayablesInvoice.VendorReturn entered
										and PurchaseOrderLine.UNSPSCCode entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay

										else
										if (AddOnCharge entered									
										and AddOnCharge.OneSourceTaxCallOverride.UseUNSPSCCode	
										and AddOnCharge.UNSPSCCode entered)						
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay

										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)		//	"Category" is spelled wrong in 'UserFieldDynamicValue' state field
										if (ProductTaxCategory entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= ProductTaxCategory

										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.TaxUsageCode)
										if (TaxUsageCode entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= TaxUsageCode
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.Latitude)
										if (PayablesInvoice.Location.PostalAddressForPurchaseOrder.GeoLatitude entered)	
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.Location.PostalAddressForPurchaseOrder.GeoLatitude
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.Longitude)
										if (PayablesInvoice.Location.PostalAddressForPurchaseOrder.GeoLongitude entered)	
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.Location.PostalAddressForPurchaseOrder.GeoLongitude
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.Altitude)
										if (PayablesInvoice.Location.PostalAddressForPurchaseOrder.GeoAltitude entered)	
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.Location.PostalAddressForPurchaseOrder.GeoAltitude
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
										if (DistributionAccount.ToAccountingEntity entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.ToAccountingEntity
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension1)
										if (DistributionAccount.FinanceDimension1 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension1
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension2)
										if (DistributionAccount.FinanceDimension2 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension2
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension3)
										if (DistributionAccount.FinanceDimension3 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension3
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension4)
										if (DistributionAccount.FinanceDimension4 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension4
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension5)
										if (DistributionAccount.FinanceDimension5 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension5
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension6)
										if (DistributionAccount.FinanceDimension6 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension6
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension7)
										if (DistributionAccount.FinanceDimension7 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension7
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension8)
										if (DistributionAccount.FinanceDimension8 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension8
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension9)
										if (DistributionAccount.FinanceDimension9 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension9
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension10)
										if (DistributionAccount.FinanceDimension10 entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
											invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value		= DistributionAccount.FinanceDimension10
										else
										if (LocalMissingMessage entered)
											increment Idx
											invoked.UserElementGroup.UserElement[Idx].Number = Idx
											invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[Idx].Value	= LocalMissingMessage
									else
									if (each.Value entered)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= each.Value



					if (PayablesInvoice.TaxEntityUsesVertex
					and TaxAttributesRel.VertexFlexibleFieldExist)
						if (PayablesInvoice.TaxConfigurationRel.AttributeMissingProcess.MissingMessage)
							if (PayablesInvoice.TaxConfigurationRel.AttributeMissingMessage entered)
								LocalMissingMessage	= PayablesInvoice.TaxConfigurationRel.AttributeMissingMessage
							else
								LocalMissingMessage = "MissingAttributeAndMessage"
						initialize Idx						

						invoke Create TaxLineItemUserFields
							invoked.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
							invoked.TaxLineItem.UniqueIdOfRelatedObject 	= PayablesInvoice.UniqueID
							invoked.TaxLineItem.Sequence 					= TaxLineItemView.TaxLineItem.Sequence


							display "====Expense===LoadVertexFlexibleCodes==="
							Idx = 0
							for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

								if (each.Code entered            
								or  each.ExternalValue entered)
									Idx +=1   
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId
									if (each.ExternalValue.ValueIs.TaxEntity)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = GeneralLedgerCompanyRel.AccountingEntity
									else    
									if (each.ExternalValue.ValueIs.Company)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company
									else    
									if (each.ExternalValue.ValueIs.Vendor)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Vendor
									else    
									if (each.ExternalValue.ValueIs.PostingDate)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionDate
									else    
									if (each.ExternalValue.ValueIs.TaxDate)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.DerivedTaxPointDate
									else    
									if (each.ExternalValue.ValueIs.ToAccountingEntity)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.ToAccountingEntity 
									else    
									if (each.ExternalValue.ValueIs.AccountingUnit)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.AccountingUnit 
									else    
									if (each.ExternalValue.ValueIs.GLAccount)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.GeneralLedgerChartAccount
									else    
									if (each.ExternalValue.ValueIs.Location)
										if (TransientShipToLocation entered)
											CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientShipToLocation
										else
											CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.Location
									else    
									if (each.ExternalValue.ValueIs.Currency)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.InvoiceCurrency
									else    
									if (each.ExternalValue.ValueIs.DiscountAmount)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
									else    
									if (each.ExternalValue.ValueIs.UnitCost)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DerivedUnitCost
									else    
									if (each.ExternalValue.ValueIs.ContractType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
									else    
									if (each.ExternalValue.ValueIs.WorkType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
									else    
									if (each.ExternalValue.ValueIs.AccountSubType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.GeneralLedgerChartAccount.AccountSubType
									else    
									if (each.ExternalValue.ValueIs.ServiceType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
									else    
									if (each.ExternalValue.ValueIs.CommodityCode)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ICNCode
									else    
									if (each.ExternalValue.ValueIs.UNSPSC)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLineRel.UNSPSCCode.UNSPSCCodeDisplay
									else    
									if (each.ExternalValue.ValueIs.ProductTaxCatagory)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ProductTaxCategory
									else    
									if (each.ExternalValue.ValueIs.TaxUsageCode)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxUsageCode
									else 
									if (each.ExternalValue.ValueIs.PaymentDate)			
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.InvoiceDate 
									else 
									if (each.ExternalValue.ValueIs.UsageType)			
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
									else 
									if (each.ExternalValue.ValueIs.CustomerType)	
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
									else 
									if (each.ExternalValue.ValueIs.Project)				
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.Project
									else 
									if (each.ExternalValue.ValueIs.Longitude)				
										if (TransientShipToLocation entered)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TransientShipToLocation.PostalAddress.GeoLongitude
										else
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoLongitude
									else 
									if (each.ExternalValue.ValueIs.Latitude)	
										if (TransientShipToLocation entered)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TransientShipToLocation.PostalAddress.GeoLatitude
										else
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoLatitude
									else 
									if (each.ExternalValue.ValueIs.Altitude)
										if (TransientShipToLocation entered)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TransientShipToLocation.PostalAddress.GeoAltitude
										else									
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.Location.PostalAddress.GeoAltitude
									else 
									if (each.ExternalValue.ValueIs.FinanceDimension1)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension1
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension2)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension2
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension3)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension3
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension4)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension4
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension5)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension5
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension6)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension6
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension7)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension7
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension8)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension8
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension9)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension9
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension10) 
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DistributionAccount.FinanceDimension10
									else    
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code  



							Idx = 0
							for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

								if (each.NumericValue entered            
								or  each.ExternalValue entered)
									Idx +=1   
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
									if (each.ExternalValue.ValueIs.Company)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = Company
									else    
									if (each.ExternalValue.ValueIs.GLAccount)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = DistributionAccount.GeneralLedgerChartAccount
									else    
									if (each.ExternalValue.ValueIs.DiscountAmount)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 3
									else    
									if (each.ExternalValue.ValueIs.UnitCost)
										if (DerivedUnitCost entered)
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = DerivedUnitCost
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8 
									else    
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue  



							Idx = 0
							for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

								if (each.DateValue entered            
								or  each.ExternalValue entered)
									Idx +=1   
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId 
									if (each.ExternalValue.ValueIs.PostingDate)
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = DistributionDate
									else    
									if (each.ExternalValue.ValueIs.PaymentDate)
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PayablesInvoice.DueDate 
									else    
									if (each.ExternalValue.ValueIs.TaxDate)
										if (PayablesInvoice.DerivedTaxPointDate entered)
											invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
										else 
											invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PayablesInvoice.InvoiceDate 
									else    
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue  






				
				if (!PayablesInvoice.MatchProcessType.Expense    				
				and PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Original)    				
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
						invoked.TaxLineItem.UniqueIdOfRelatedObject 	= PayablesInvoice.UniqueID
						invoked.TaxLineItem.Sequence 					= TaxLineItemView.TaxLineItem.Sequence
				
						if (DistributionAccount.ToAccountingEntity != blank)	
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE1"
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DistributionAccount.ToAccountingEntity

						if (DistributionAccount.FinanceDimension5 != blank)	
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE2"
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DistributionAccount.FinanceDimension5

						if (DistributionAccount.GeneralLedgerChartAccount != blank)	
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE3"
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DistributionAccount.GeneralLedgerChartAccount

						if  (AddOnCharge entered)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 		= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name			= "ATTRIBUTE4"
							invoked.UserElementGroup.UserElement[AttributeCounter].Value		= PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
							if (PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1] = blank)
								invoked.UserElementGroup.UserElement[AttributeCounter].Value 	= "N"
					
							if (PrmPurchaseOrderLine.ShipToLocation != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE5"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.ShipToLocation
					
							if (PrmPurchaseOrderLine.EAMWorkOrder.ProjectID != blank)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE6"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.EAMWorkOrder.ProjectID
					
							if (PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23] != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE7"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]	
					
							if (PrmPurchaseOrderLine.EAMWorkOrder.TypeCode != blank)		
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE8"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.EAMWorkOrder.TypeCode		
					
							if (PrmPurchaseOrderLine.EAMWorkOrder.PositionFacility != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE13"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.EAMWorkOrder.PositionFacility	
					
							if (PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30] != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE14"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]	
					
							if (PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24] != blank)		
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE15"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]		
						
							if (PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE30"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]	

								LocalInventoryLocation = PrmPurchaseOrderLine.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.Country entered)
									AttributeCounter += 1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE28"
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalInventoryLocationRel.PostalAddress.Country
							
								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.StateProvince entered)
									AttributeCounter += 1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE29"
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalInventoryLocationRel.PostalAddress.StateProvince

						else
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 		= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name			= "ATTRIBUTE4"
							invoked.UserElementGroup.UserElement[AttributeCounter].Value		= PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
							if (PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1] = blank)
								invoked.UserElementGroup.UserElement[AttributeCounter].Value 	= "N"
					
							if (PayablesInvoiceDetail.Location != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE5"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.Location
					
							if (PayablesInvoiceDetail.EAMWorkOrder.ProjectID != blank)
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE6"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.EAMWorkOrder.ProjectID
					
							if (PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23] != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE7"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]	
					
							if (PayablesInvoiceDetail.EAMWorkOrder.TypeCode != blank)		
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE8"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.EAMWorkOrder.TypeCode		
					
							if (PayablesInvoiceDetail.EAMWorkOrder.PositionFacility != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE13"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.EAMWorkOrder.PositionFacility	
					
							if (PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30] != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE14"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]	
					
							if (PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24] != blank)		
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE15"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]		

							if (PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] != blank)	
								AttributeCounter += 1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE30"
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]	

								LocalInventoryLocation = PayablesInvoiceDetail.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.Country entered)
									AttributeCounter += 1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE28"
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalInventoryLocationRel.PostalAddress.Country
							
								if  (LocalInventoryLocationRel exists
								and  LocalInventoryLocationRel.PostalAddress.StateProvince entered)
									AttributeCounter += 1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE29"
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalInventoryLocationRel.PostalAddress.StateProvince

						if (AccountingEntity.FunctionalCurrency entered)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE18"
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= AccountingEntity.FunctionalCurrency

						if (AddOnCharge entered)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE22"
							invoked.UserElementGroup.UserElement[AttributeCounter].Value	= AddOnCharge

						if (AddOnCharge entered)
							AttributeCounter += 1
							invoked.UserElementGroup.UserElement[AttributeCounter].Number 	= AttributeCounter
							invoked.UserElementGroup.UserElement[AttributeCounter].Name		= "ATTRIBUTE23"
							if  (PayablesInvoice.MatchProcessType.AOCOnly)
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= "Y"
							else
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= "N"


		RemoveTaxLineItem is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				for each TaxLineItemRel
					invoke Delete each.LineItemUserFieldsRel
					invoke Delete each



		ClearIntrastatValues is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				initialize LineType
				initialize ICNCode
				initialize StockWeight
				initialize SupplementaryQuantity



		CreateCommitment is an Instance Action
			default label is untranslatable
			restricted
			
			Exit Rules
				invoke CreateCommitment GLCommit
					invoked.HeaderUniqueID 					= PayablesInvoice.UniqueID
					invoked.AccountingEntity				= GeneralLedgerCompanyRel.AccountingEntity
					invoked.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.System							= "AP"
					invoked.FinanceCodeBlock				= DistributionAccount
					invoked.CurrencyCode					= InvoiceCurrency
					invoked.TransactionAmount				= GLTransactionAmount
					invoked.ReportCurrencyAmount			= DistributionAmount     
					invoked.TransactionDate					= PayablesInvoice.DistributionDate	
					invoked.OriginatingTransaction			= reference to this instance
					invoked.DimensionCode					= GLFinanceCodeBlock.DimensionCode
					invoked.TransBusinessObjectRef			= reference to PayablesInvoice
					invoked.PrmAllowRebuild                 = LocalAllowRebuild
					if (LocalAllowRebuild = false)
						invoked.SkipBudgetRebuild           = true

					if (PayablesInvoice.MatchProcessType.ServiceContract)

						if (initiating action = "PayablesInvoice.InvoiceUnmatch"
						or  initiating action = "UnmatchPhase1"
						or  initiating action = "PayablesInvoice.CancelReleased")
							if (ContractLine.CommitmentAmountRemaining entered
							or ((ContractLine entered 
							and  AddOnCharge not entered
							and  (TaxCode not entered 
							or    PayablesInvoiceDetail.TaxCode = ContractLine.TaxCode))))
								invoked.TransientSkipRebuild = true


		PerformBudgetEdit is an Instance Action
			default label is untranslatable
			restricted			
			Parameters
				ParmOldDistributionAmountGroup is a FinanceCurrencyAmountGroup
				PrmActionType is Alpha 1
					States
						Create value is "C"
						Update value is "U"
			
			Action Rules


				if (!PayablesInvoice.MatchProcessType.Expense
				and  PurchaseOrderLine entered
				and  PrmActionType.Create
				and  DistributionAmount.FunctionalAmount.EnteredCurrencyAmount > PurchaseOrderLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
					PrmActionType = "U"
					OldDistributionAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.AlternateAmount.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					OldDistributionAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount = PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount = PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount = PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
					OldDistributionAmountGroup.ProjectAmount.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					ParmOldDistributionAmountGroup = OldDistributionAmountGroup

				else 
				if (!PayablesInvoice.MatchProcessType.Expense
				and  ContractLine entered
				and  PurchaseOrderLine not entered 
				and  PrmActionType.Create
				and  DistributionAmount.FunctionalAmount.EnteredCurrencyAmount > ContractLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
					PrmActionType = "U"
					OldDistributionAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.AlternateAmount.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					OldDistributionAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount = ContractLineDistributionRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount = ContractLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					OldDistributionAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount = ContractLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
					OldDistributionAmountGroup.ProjectAmount.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					OldDistributionAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					ParmOldDistributionAmountGroup = OldDistributionAmountGroup


				if (!PayablesInvoice.MatchProcessType.Expense
				and  invoking action = "UpdateFromHeader")
					if  (PurchaseOrderLine entered)
						PrmActionType = "U"
						OldDistributionAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.AlternateAmount.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						OldDistributionAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount = PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount = PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount = PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						OldDistributionAmountGroup.ProjectAmount.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= PurchaseOrderLineDistributionRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						ParmOldDistributionAmountGroup = OldDistributionAmountGroup

					else 
					if (ContractLine entered)
						PrmActionType = "U"
						OldDistributionAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.AlternateAmount.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						OldDistributionAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount = ContractLineDistributionRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	= ContractLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount = ContractLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						OldDistributionAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount = ContractLineDistributionRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						OldDistributionAmountGroup.ProjectAmount.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						OldDistributionAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= ContractLineDistributionRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						ParmOldDistributionAmountGroup = OldDistributionAmountGroup


				if  (PrmActionType.Create
				or  (PrmActionType.Update
				and  DistributionAccount != GLCommitRel.FinanceCodeBlock))

					invoke CheckTransaction BudgetTemplate		
						invoked.PrmFinanceEnterpriseGroup   		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup					= UniqueID
						invoked.PrmHeaderUniqueID                   = PayablesInvoice.UniqueID
						invoked.PrmTransactionCodeBlock				= DistributionAccount
						invoked.PrmDate								= DistributionDate
						invoked.PrmReportAmounts.FunctionalAmount 	= DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmReportAmounts.ReportAmount1      = DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmReportAmounts.ReportAmount2      = DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmReportAmounts.ReportAmount3      = DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmReportAmounts.ReportAmount4      = DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmReportAmounts.ReportAmount5      = DistributionAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount    = DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount2   = DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount3   = DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				else

					invoke CheckTransaction BudgetTemplate		
						invoked.PrmFinanceEnterpriseGroup   		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup					= UniqueID
						invoked.PrmHeaderUniqueID                   = PayablesInvoice.UniqueID
						invoked.PrmTransactionCodeBlock				= DistributionAccount
						invoked.PrmDate								= DistributionDate
						invoked.PrmReportAmounts.FunctionalAmount 	= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.FunctionalAmount.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.ReportAmount1      = (DistributionAmount.ReportAmount1.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.ReportAmount1.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.ReportAmount2      = (DistributionAmount.ReportAmount2.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.ReportAmount2.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.ReportAmount3      = (DistributionAmount.ReportAmount3.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.ReportAmount3.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.ReportAmount4      = (DistributionAmount.ReportAmount4.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.ReportAmount4.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.ReportAmount5      = (DistributionAmount.ReportAmount5.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.ReportAmount5.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.AlternateAmount    = (DistributionAmount.AlternateAmount.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.AlternateAmount.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.AlternateAmount2   = (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.AlternateAmount2.EnteredCurrencyAmount)
						invoked.PrmReportAmounts.AlternateAmount3   = (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount - ParmOldDistributionAmountGroup.AlternateAmount3.EnteredCurrencyAmount)					
				
				if (PayablesInvoice.InvoiceSource.IntercompanyBilling
        		and initiating action = "IntercompanyBillingTransaction.ProcessIntoBillingDocuments")
					NextSentence = true
				else
				if (BudgetEditErrorExists)		
					confirmation required   
						"Warning:BudgetsHaveBeenExceeded;ViewDetailsInBudgetErrorPanel;IfNotAddressed,ReleaseWillNotBeAllowed;Continue?"
	
		ReverseBudgetForUnmatchOrCancel is an Instance Action 
			default label is untranslatable
			restricted			
			Action Rules

				TransactionDate	= PayablesInvoice.InvoiceAmount.ExchangeDate
			
				initialize LocalCurrencyCalculationGroup
		
				if (GLCommitRel exists) 
					LocalCurrencyCalculationGroup.CurrencyAmount = DistributionAmount.CurrencyAmount * -1
						
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					LocalCurrencyCalculationGroup.ExchangeDate								= TransactionDate
					LocalCurrencyCalculationGroup.FromCurrency								= InvoiceCurrency
					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
					if(PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= PurchaseOrder.ReceiptCurrencyConversionRate
					else
						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= PurchaseOrder.EnteredCurrencyConversionRate
					LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
					LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree
					LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour
					LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive
					if(GeneralLedgerCompanyRel.AccountingEntity != DistributionAccount.ToAccountingEntity)
						LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency			= DistributionAccount.ToAccountingEntity.FunctionalCurrency
						LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency			= DistributionAccount.ToAccountingEntity.AlternateCurrency
						LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency			= DistributionAccount.ToAccountingEntity.AlternateCurrency2
						LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency			= DistributionAccount.ToAccountingEntity.AlternateCurrency3
					else
						initialize LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency
						initialize LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency
						initialize LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency
						initialize LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency	
					if (DistributionAccount.Project entered)
						LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency			= DistributionAccount.Project.Currency
					LocalReverseAmount.FunctionalAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					if (AccountingEntityRel.AlternateCurrency entered)
						LocalReverseAmount.AlternateAmount			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					if (AccountingEntityRel.AlternateCurrency2 entered)
						LocalReverseAmount.AlternateAmount2  		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					if (AccountingEntityRel.AlternateCurrency3 entered)
						LocalReverseAmount.AlternateAmount3			= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne entered)
						LocalReverseAmount.ReportAmount1     		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
						LocalReverseAmount.ReportAmount2      		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree entered)
						LocalReverseAmount.ReportAmount3			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour entered)
						LocalReverseAmount.ReportAmount4			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive entered)
						LocalReverseAmount.ReportAmount5			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
					if (DistributionAccount.Project entered)
						LocalReverseAmount.ProjectAmount			= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
					if (LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency !=blank)
						LocalReverseAmount.ToFunctionalAmount		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
					if (LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency !=blank)
						LocalReverseAmount.ToAlternateAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
					if (LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency !=blank)
						LocalReverseAmount.ToAlternateAmount2		= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
					if (LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency !=blank)
						LocalReverseAmount.ToAlternateAmount3		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount

	

	
					invoke APUnmatchCancelTemplateReversal GLCommitRel
		  				invoked.PrmFEG              					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  				invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
		  				invoked.PrmCodeBlock        					= DistributionAccount
		  				invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
		  				invoked.PrmCurrencyAmounts     					= LocalReverseAmount


		UpdateJournalizeGroup is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup
			Action Rules 
				invoke UpdateJournalizeGroup GLTransactionDetailRel
					invoked.PrmJournalizeGroup		= PrmJournalizeGroup

				


		JournalizeDistributions is a Set Action		

			completion message is "<CompletionMessage>"


			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmPayablesCompany		is a PayablesCompany
					default label is "PayablesCompany"
				GeneralLedgerCompanyGroup										
					default label is "CompanyGroup"
				PrmProcessLevel			is a PayablesProcessLevel
					default label is "ProcessLevel"
				PrmPostThruDate			is Date
					default label is "PostThruDate"
				PrmDescription			is a Description
					default label is "Description"
			Parameter Rules
				PrmEnterpriseGroup
					initial value is GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					required
				PrmPayablesCompany 	 
					if (GeneralLedgerCompanyGroup not entered)		
						required
							"CompanyOrGlobalLedgerCompanyGroupIsRequired"
						
				PrmPostThruDate		 
					required
					default to current corporate date
				PrmDescription
					initial value is PayablesDistributionPostingMessage
											
			Local Fields
				CompletionMessage				is Alpha 150
				RecordCount						is Numeric 10
				MyJournalizeGroup				is like JournalizeGroup
				HasMonitorError					is Boolean
				LocalInterfaceInDetail			is Boolean
				LocalOriginatingInterfaceRun    is a GLTransactionInterfaceResult
					context of PrmEnterpriseGroup
				CommitNow						is Boolean			

				
			Instance Selection						
				where (Status.Released

				and  (!PayablesInvoiceErrorsExistsDirect		
				or     PayablesInvoice.Status.Amended)					
				and   (PayablesInvoice.MatchProcessType.Expense

				or    (NoOpenInvoiceMessages						
				and	  (PayablesInvoice.HasBeenMatched

				or     HasAllowReleaseOnlyMatchInvoice						
				or	  (PayablesInvoice.Status.Cancelled				
				and    PayablesInvoice.MatchStatus.Unmatched))))	
				and  ((PrmPayablesCompany entered
				and	   Company				= PrmPayablesCompany)
				or    (GeneralLedgerCompanyGroup	entered
				and    GeneralLedgerCompanyGroup = GeneralLedgerCompanyGroup
				and    GLCompanyGroupMemberRelExists))
				and    PayablesInvoice.BackgroundProcessing not entered 
				and   (ProcessLevel			= PrmProcessLevel
				or     PrmProcessLevel      not entered)
				and    DistributionDate		<= PrmPostThruDate
				and    GLTransactionDetailRel.JournalizeGroup not entered)

			Sort Order	
				Status
				AccountingEntity	
				Company
				ProcessLevel
				DistributionDate
				PayablesInvoice
				PayablesInvoiceDistribution

			Accumulators

				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "PayablesInvoiceDistributionPostingCompleteForJournalizeGroup...:NoRecordsFoundToJournalize<MyJournalizeGroup>"
				
				Set Rules
					Entrance Rules
						initialize RecordCount
						initialize LocalInterfaceInDetail
						
						LocalEnterpriseGroup 	= PrmEnterpriseGroup

						invoke IncrementLastJournalizeGroup GeneralLedgerSystemCodeRel		
						MyJournalizeGroup 		= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
						CommitNow				= true		
						LocalJournalizeGroup	= MyJournalizeGroup		
						LocalProcessLevel 		= PrmProcessLevel	
						LocalRunProgram 		= RunProgram.InvoiceDistributionClosing	
						invoke Create JournalizeGroupResult			
							invoked.FinanceEnterpriseGroup		  = PrmEnterpriseGroup
							invoked.JournalizeGroupResult		  = MyJournalizeGroup
							invoked.RunTime						  = current timestamp
							invoked.Status						  = 2
							invoked.Description					  = PrmDescription

					Exit Rules

















						












								
						CompletionMessage = "PayablesInvoiceDistributionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>;<RecordCount>...RecordsProcessed"

				AccountingEntity Set Rules		
					Exit Rules
						invoke InitiateJournalize AccountingEntity
							invoked.PrmJournalizeGroup            = MyJournalizeGroup
							invoked.PrmOriginatingInterfaceRun    = LocalOriginatingInterfaceRun
							invoked.PrmJournalizeGroupDescription = PrmDescription
							invoked.PrmInterfaceInDetail          = LocalInterfaceInDetail

		
				Company Set Rules
					Entrance Rules
						HasMonitorError		= false
						VerifyPayablesMonitor.RunProgram	= RunProgram.InvoiceDistributionClosing
						VerifyPayablesMonitor.Company 		= Company
						VerifyPayablesMonitor.ProcessLevel 	= PrmProcessLevel    
						LocalCheckAPMonitor					= VerifyPayablesMonitor.CallVerifyPayablesMonitor
						if (VerifyPayablesMonitor.VerifyOk)
							LocalCheckAPMonitor					= VerifyPayablesMonitor.BeginMonitor
							if (!VerifyPayablesMonitor.NoErrors)
								HasMonitorError	= true
						else
							HasMonitorError	=true
						
						if (Company.PostingOption.Detail)
							LocalInterfaceInDetail		= true
						else
							LocalInterfaceInDetail		= false
					
					Exit Rules

						if (!HasMonitorError)				
							LocalProcessLevel = PrmProcessLevel								
							LocalRunProgram = RunProgram.InvoiceDistributionClosing	 
							include EndMonitor		
						








						



						
				PayablesInvoice Set Rules
					Exit Rules
						if (!HasMonitorError)
							invoke TriggerSupplierInvoiceBOD PayablesInvoice



						
				Instance Rules
					if (CommitNow)				
						commit transaction
						CommitNow = false
					BypassProjectDateEdit = true
					if (!HasMonitorError)
						increment RecordCount
						if (GLTransactionDetailRel exist)
							if (DistributionAccount.Project entered
							and	ProjectUpdateStatus.RequiresPaymentInformation)		
								if (PayablesInvoice.AmountPaid not entered)
									LocalAPPaid			= "H"
								else
									LocalAPPaid 		= blank
									ProjectUpdateStatus = ProjectUpdateStatus.ApInvoicePaidAcUpdated	
								if (GLTransactionDetailRel.Status.Released)	
									invoke Released.Update GLTransactionDetailRel		
										invoked.APPaid			= LocalAPPaid
										invoked.JournalizeGroup = MyJournalizeGroup
										BypassUnitAndAmountEdit = true		
								if (GLTransactionDetailRel.Status.Unreleased)	
									invoke Unreleased.Update GLTransactionDetailRel		
										invoked.APPaid			= LocalAPPaid
										invoked.JournalizeGroup = MyJournalizeGroup
										BypassUnitAndAmountEdit = true		
							else
								invoke UpdateJournalizeGroup GLTransactionDetailRel	 
									invoked.PrmJournalizeGroup = MyJournalizeGroup
							invoke Released.MakeHistorical
						if (PayablesInvoice.Vendor.VendorClass.PostingOption.Detail)
							LocalInterfaceInDetail		= true




		JournalizeDistributionsForGroup is a Set Action		

			default label is untranslatable
			restricted
			completion message is "<CompletionMessage>"


			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmDescription			is a Description
					default label is "Description"
				PrmJournalizeGroup       is like JournalizeGroup
			Parameter Rules
				PrmEnterpriseGroup
					initial value is GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					required
				PrmDescription
					initial value is PayablesDistributionPostingMessage
				PrmJournalizeGroup
					required

			Local Fields
				CompletionMessage		is Alpha 150
				RecordCount				is Numeric 10
				MyJournalizeGroup		is like JournalizeGroup
				LocalInterfaceInDetail	is Boolean									
				LocalOriginatingInterfaceRun    is a GLTransactionInterfaceResult	

					
					
			Instance Selection
				where (Status.Released
				and    GLTransactionDetailRel.JournalizeGroup = PrmJournalizeGroup)

			Sort Order	
				Status
				AccountingEntity	
				Company
				ProcessLevel
				DistributionDate
				PayablesInvoice
				PayablesInvoiceDistribution

			Accumulators

				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "PayablesInvoiceDistributionPostingCompleteForJournalizeGroup...:NoRecordsFoundToJournalize<MyJournalizeGroup>"
				
				Set Rules
					Entrance Rules
						initialize RecordCount
						initialize LocalInterfaceInDetail		
					
						LocalEnterpriseGroup 	= PrmEnterpriseGroup
						MyJournalizeGroup		= PrmJournalizeGroup

						invoke Create JournalizeGroupResult			
							invoked.FinanceEnterpriseGroup		  = PrmEnterpriseGroup
							invoked.JournalizeGroupResult		  = MyJournalizeGroup
							invoked.RunTime						  = current timestamp
							invoked.Status						  = 2
							invoked.Description					  = PrmDescription
							
					Exit Rules








						
						CompletionMessage = "PayablesInvoiceDistributionPostingCompleteForJournalizeGroup...:<MyJournalizeGroup>;<RecordCount>...RecordsProcessed"
						
				AccountingEntity Set Rules		
					Exit Rules
						invoke InitiateJournalize AccountingEntity
							invoked.PrmJournalizeGroup            = MyJournalizeGroup
							invoked.PrmOriginatingInterfaceRun    = LocalOriginatingInterfaceRun
							invoked.PrmJournalizeGroupDescription = PrmDescription
							invoked.PrmInterfaceInDetail          = LocalInterfaceInDetail
				
				Company Set Rules		
					Entrance Rules
						if (Company.PostingOption.Detail)
							LocalInterfaceInDetail		= true
						else
							LocalInterfaceInDetail 		= false
						
				
				Instance Rules
					increment RecordCount
					if (GLTransactionDetailRel exist)
						invoke Released.MakeHistorical
						



		PopulateSpendCategoryDetail is a Set Action		

			default label is untranslatable
			restricted
			completion message is "<CompletionMessage>"


			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Parameter Rules
				PrmEnterpriseGroup
					initial value is GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					required

			Local Fields
				CompletionMessage		is Alpha 150
				RecordCount				is Numeric 10

			Instance Selection
				where (Status.Released
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= PrmEnterpriseGroup)

			Sort Order
				Company
				Status

			Accumulators

				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "PayablesInvoiceDistributionPopulateSpendCategoryDetail...:NoRecordsFoundToPopulate"
				
				Set Rules
					Entrance Rules
						initialize RecordCount
						LocalEnterpriseGroup 	= PrmEnterpriseGroup

					Exit Rules
						CompletionMessage = "PayablesInvoiceDistributionPopulateSpendCategoryDetail...:<RecordCount>...RecordsProcessed"
						
				Instance Rules
					increment RecordCount
					if (DistributionType.Distribution
					or  DistributionType.PaymentDiscount)
						include SetSpendCategory
						include SetSpendCategoryDetail
						



		UpdateSpendCube is a Set Action
			default label is untranslatable
			restricted
			Parameters
				UpdatePayablesInvoiceDistrib	is Boolean
			Parameter Rules
				UpdatePayablesInvoiceDistrib
					initial value is true

			Action Rules
				Set Rules
					Entrance Rules
						constraint (BasicAnalyticsCalendarsRel exists)
							"YouMustCreateABasicAnalyticsCalendarToUpdateSpendCube"

					Exit Rules
						if (UpdatePayablesInvoiceDistrib)
							invoke Refresh PayablesInvoiceDistributionAnalyticCubeRel in background



		DeleteDistributionsForInvoice is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is like PayablesInvoice

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    OriginalDistribution	= blank)

			Action Rules
				Instance Rules
					invoke Delete

		PurgeDeleteDistributionsForInvoice is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is like PayablesInvoice

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				include deleted records
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Action Rules
				Set Rules
						Exit Rules
				Instance Rules
					invoke Purge

		DeleteAllDistributionsForInvoice is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Action Rules
				Set Rules
					Exit Rules
						invoke FinishDelete PrmPayablesInvoice
				Instance Rules
					TransientBypassErrorUpdate = true
					invoke Delete



		UpdateAfterMatchSet is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				MatchInReleasedState is Boolean
				AutoMatchResult     is like AutoMatchResult
				MatchRetainageAmount is like InternationalAmount

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and   (Status.Unreleased
				or     TaxCode entered))

			Action Rules
				Empty Set Rules

					invoke UpdateAfterMatchPart2 PrmPayablesInvoice
						invoked.TransientAutoMatchResult = AutoMatchResult
						invoked.MatchRetainageAmount = MatchRetainageAmount

				Set Rules
					Exit Rules

						invoke UpdateAfterMatchPart2 PrmPayablesInvoice
							invoked.TransientAutoMatchResult = AutoMatchResult
							invoked.MatchRetainageAmount = MatchRetainageAmount
				
				Instance Rules

				
					if (Status.Unreleased)
						invoke Unreleased.Release 
					else
					if (!MatchInReleasedState
					or  PayablesInvoice.OneSourceGeneric
					or  MatchCreated entered)
						if ((InvoiceTaxEntityRel.ThirdParty.Sabrix
						and  (PayablesInvoice.TaxCode entered 
						or    PayablesInvoice.Location.PurchaseOrderTaxCode entered)
						and   PayablesInvoice.TaxLineItemRel exists)
						or  (InvoiceTaxEntityRel.ThirdParty.VertexOSeries 
						and   PayablesInvoice.TaxLineItemRel exists))							
							NextSentence = true  
						else 
						if (PayablesInvoice.MatchPrepayment
						and PayablesInvoice.PaidInvoice
						and TaxCode entered
						and TaxPoint.Payment)
							invoke 585BuildTxTaxTrans
								invoked.ApwsCancelledFl = "N"
						else
						if (TaxCode entered
						and !MatchCreated.Unmatch
						and (TaxPoint.Invoice
						or   TaxPoint.GLPostDate)
						and  TaxIndicator.None)
							invoke 585BuildTxTaxTrans 
								invoked.ApwsCancelledFl = "N"

		UnmatchPhase1 is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				PostDate					is Date
				PrmMatchObjectID			is an ObjId
				UnmatchFrom					is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"
				PrmLastDistribution 		is like PayablesInvoiceDistribution 
			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Local Fields
				NewInvoice							is a PayablesInvoice view
				NewPayment							is a PayablesInvoicePayment view
				WillBeCancelled						is Boolean

			Sort Order
				Company
				PayablesInvoice
				
			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    PayablesInvoice.MatchObjectID = PrmMatchObjectID)

			Rule Blocks
				NextPhase

					if (!PrmPayablesInvoice.IsChargeback)

				
						if (PrmPayablesInvoice.PurchaseOrderReceiptInvoiceLinkRel exists)		



							invoke UnmatchPhase2ReceiptLink PurchaseOrderReceiptInvoiceLink			
								invoked.PrmPayablesCompany		= PrmPayablesCompany
								invoked.PrmPayablesInvoice		= PrmPayablesInvoice
								invoked.UnmatchFrom 			= UnmatchFrom
								invoked.PrmMatchObjectID		= PrmMatchObjectID
						else



							invoke UnmatchPhase2ReceiptLine	PurchaseOrderReceiptLine		
								invoked.PrmPayablesCompany		= PrmPayablesCompany
								invoked.PrmPayablesInvoice		= PrmPayablesInvoice
								invoked.UnmatchFrom 			= UnmatchFrom
								invoked.PrmMatchObjectID		= PrmMatchObjectID
					else

						invoke UnmatchPhase3InvoiceDetail	PayablesInvoiceDetail		
							invoked.PrmPayablesCompany		= PrmPayablesCompany
							invoked.PrmPayablesInvoice		= PrmPayablesInvoice
							invoked.UnmatchFrom 			= UnmatchFrom
				
			Action Rules
				Empty Set Rules
					include NextPhase
					
				Set Rules
					Exit Rules
						include NextPhase
					
				PayablesInvoice Set Rules
					
					Entrance Rules
					

					
						if  (UnmatchFrom.MA70)
							if  (PayablesInvoice.CreditOrDebitMemo
							or   PayablesInvoice.IsChargeback
							or   PayablesInvoice.MatchProcessType.ServiceContract
							or  (PayablesInvoice.MatchProcessType.AOCOnly
							and !PayablesInvoice.CostComponentMatch))
								WillBeCancelled = true
							else
								WillBeCancelled = false
		

							
							invoke SubtractFromVendorBalances PayablesInvoice		
	
							if  (PayablesInvoice.MatchProcessType.ServiceContract
							or  (PayablesInvoice.MatchProcessType.AOCOnly
							and  !PayablesInvoice.CostComponentMatch))
								for each PayablesInvoice.OpenPayablesInvoicePaymentRel  
									invoke RestrictedDelete each


							else
								if  (PayablesInvoice.RetainageAccrualCode entered
								or   PayablesInvoice.IsChargeback)					
									invoke Delete PayablesInvoice.PayablesInvoiceRetainageDistributionsRel
									invoke Delete PayablesInvoice.PayablesOnHoldPaymentRel
	
								initialize FirstPaymentSequence
	
								for each PayablesInvoice.PayablesInvoicePaymentRel

	
									if  (PayablesInvoice.MatchCompanyRel.DiscountRecognition.Match
									and  each.DiscountAmount.CurrencyAmount entered
									and  each.MatchDiscountTaken entered)
										invoke Delete each.PayablesInvoiceDiscountRel
										invoke FastUpdate each
											initialize invoked.MatchDiscountTaken
								
									if  (PayablesInvoice.IsChargeback
									or   PayablesInvoice.CreditOrDebitMemo)
										invoke RestrictedDelete each
									else
									if  (PayablesInvoice.RetainageAccrualCode entered)
										if  (FirstPaymentSequence not entered)
											FirstPaymentSequence = each.PayablesInvoicePayment.PaymentSequence
										else
											invoke FastUpdate FirstPaymentRel		
												invoked.PaymentAmount.CurrencyAmount				+= each.PaymentAmount.CurrencyAmount
												invoked.RevaluedBaseAmount.CurrencyAmount			+= each.RevaluedBaseAmount.CurrencyAmount
												invoked.DiscountAmount.CurrencyAmount				+= each.DiscountAmount.CurrencyAmount
												invoked.NetPaymentAmount.CurrencyAmount				+= each.NetPaymentAmount.CurrencyAmount	
												invoked.WithholdingAmount							+= each.WithholdingAmount

												invoked.ReportableIncomeAmount						+= each.ReportableIncomeAmount
												invoked.GainLossAmount								+= each.GainLossAmount
												invoked.BankCheckAmount								+= each.BankCheckAmount
												
											invoke RestrictedDelete each
											
								if  (PayablesInvoice.RetainageAccrualCode entered
								and  FirstPaymentSequence entered)
									invoke FastUpdate PayablesInvoice
										invoked.LastPaymentSequence							= FirstPaymentSequence		
						else


							invoke CreateFromUnmatch PayablesInvoice
								assign result to NewInvoice
								fill in fields from PrmPayablesInvoice
									except invoked.InvoiceAmount
									except invoked.RevaluedBaseAmount							
									except invoked.InvoiceAmount.CurrencyAmount							
									except invoked.AllowableAmountForDiscount							
									except invoked.TaxableAmount							
									except invoked.TotalTaxableAmount							
									except invoked.TaxAmount							
									except invoked.TotalTaxAmount							
									except invoked.DiscountDate1
									except invoked.DiscountDate2
									except invoked.DiscountDate3
									except invoked.DiscountPercent1
									except invoked.DiscountPercent2
									except invoked.DiscountPercent3
									except invoked.BaseDiscountAmount1
									except invoked.BaseDiscountAmount2
									except invoked.BaseDiscountAmount3
									except invoked.DiscountAmount1
									except invoked.DiscountAmount2
									except invoked.DiscountAmount3
									except invoked.TotalPaymentAmount							
									except invoked.TotalDistributionAmount							
									except invoked.RetailAmount						
									except invoked.MatchAmount							
									except invoked.AddOnChargeAmount			
									except invoked.ServiceAmount
									except invoked.TaxAdjustment
									except invoked.PrintChargeback 
												  						
								if  (PrmPayablesInvoice.IsCreditMemo)
									invoked.InvoiceType			= "D"
								else
									invoked.InvoiceType			= "C"
									
								if  (PrmPayablesInvoice.PayablesInvoice.IsChargeback)
									invoked.Suffix				= 888
								else
									invoked.Suffix				= 999
				
								invoked.DistributionDate		= PostDate
								invoked.Status 					= 1
								invoked.FirstPurchaseOrder		= PrmPayablesInvoice.FirstPurchaseOrder
								invoked.MatchErrorType 			= 1
								invoked.InvoiceAmount.CurrencyAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount * -1
								invoked.TaxAmount 						= PrmPayablesInvoice.TaxAmount * -1
								invoked.InvoiceAmount.ExchangeDate		= PrmPayablesInvoice.InvoiceAmount.ExchangeDate
								invoked.CurrencyTable					= PrmPayablesInvoice.CurrencyTable
								
								initialize invoked.MatchLevel      
								initialize invoked.MatchDate      
								initialize invoked.ReconciliationDate
								initialize invoked.AmountPaid      
					  
							invoke SubtractFromVendorBalances PayablesInvoice		
				
							invoke Delete PrmPayablesInvoice.PayablesOnHoldPaymentRel
				


				
							for each PrmPayablesInvoice.PayablesInvoicePaymentRel
								if  (!each.PayablesInvoicePayment.VoidSequence entered)
									invoke CreateFromUnmatch PayablesInvoicePayment
										assign result to NewPayment
										fill in fields from each
											except invoked.PayablesInvoice
											except invoked.BankCheckAmount
											except invoked.LastCurrencyRevaluationDate
											except invoked.PaymentAmount
											except invoked.RevaluedBaseAmount
											except invoked.DiscountDate
											except invoked.DiscountPercent
											except invoked.DiscountAmount
											except invoked.NetPaymentAmount
											except invoked.WithholdingAmount
											except invoked.TransactionNumber
											except invoked.TransactionIDNumber
											except invoked.CheckDate
											except invoked.BankCheckAmount
											except invoked.CheckSuffix
											except invoked.GainLossAmount
											except invoked.TransientAllowableAmount
		
										invoked.PayablesInvoice							= NewInvoice.PayablesInvoice
										invoked.InvoiceCurrency							= PrmPayablesInvoice.InvoiceCurrency
										invoked.Status 									= 1
										invoked.PaymentAmount.CurrencyAmount			= -1 * each.PaymentAmount.CurrencyAmount
										invoked.PaymentAmount.ExchangeDate				= each.PaymentAmount.ExchangeDate
										invoked.RevaluedBaseAmount.CurrencyAmount		= -1 * each.RevaluedBaseAmount.CurrencyAmount
										invoked.RevaluedBaseAmount.ExchangeDate			= each.RevaluedBaseAmount.ExchangeDate
										invoked.DiscountAmount.CurrencyAmount			= -1 * each.DiscountAmount.CurrencyAmount
										invoked.DiscountAmount.ExchangeDate				= each.DiscountAmount.ExchangeDate
										if (each.DiscountAmount.CurrencyAmount entered)
											invoked.DiscountDate						= each.DiscountDate
											invoked.DiscountPercent						= each.DiscountPercent
										invoked.NetPaymentAmount.CurrencyAmount			= -1 * each.NetPaymentAmount.CurrencyAmount	
										invoked.NetPaymentAmount.ExchangeDate			= each.NetPaymentAmount.ExchangeDate
										if (each.IncomeCode entered)
											invoked.ReportableIncomeAmount					= -1 * each.ReportableIncomeAmount
										else
											initialize invoked.ReportableIncomeAmount
									
									if  (each.OnHold)
										invoke FastUpdate each
											invoked.OnHold								= false
				
									if  (PayablesInvoice.MatchCompanyRel.DiscountRecognition.Match
									and  each.DiscountAmount.CurrencyAmount entered)
										for each each.PayablesInvoiceDiscountRel
											invoke Create PayablesInvoiceDiscount
												fill in fields from each
													except invoked.PayablesInvoice
													except invoked.PayablesInvoicePayment
												invoked.PayablesInvoice					= NewInvoice.PayablesInvoice
												invoked.PayablesInvoicePayment			= NewPayment.PayablesInvoicePayment
			
							
					Exit Rules
					
			            if  (UnmatchFrom.MA75
			            and  PayablesInvoice.DistributionTypeIsDistributionRel exists        
			            and !PayablesInvoice.PayablesInvoiceDistributionExpenseAccrualRel exists)
			                invoke Create PayablesInvoiceDistribution
			                    invoked.Company                        = Company
			                    invoked.PayablesInvoice                = NewInvoice.PayablesInvoice
			                    invoked.GLTPostingDate                 = PostDate
			                    invoked.GLTTransactionDate             = NewInvoice.InvoiceDate
			                    invoked.DistributionType               = "A"
			                    invoked.Status                         = 1
			                    invoked.DistributionDate               = PostDate
			                    invoked.GLTransactionAmount                                            = NewInvoice.InvoiceAmount.CurrencyAmount
			                    invoked.DistributionAmount.ExchangeDate                                = NewInvoice.InvoiceAmount.ExchangeDate
			                    invoked.DistributionAmount.CurrencyAmount                              = NewInvoice.InvoiceAmount.CurrencyAmount
			                    invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount      = NewInvoice.TotalDistributionAmount.FunctionalTotal
			                    invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount       = NewInvoice.TotalDistributionAmount.AlternateTotal
			                    invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount      = NewInvoice.TotalDistributionAmount.AlternateTotal2
			                    invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount      = NewInvoice.TotalDistributionAmount.AlternateTotal3
			                    invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount         = NewInvoice.TotalDistributionAmount.ReportTotal1
			                    invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount         = NewInvoice.TotalDistributionAmount.ReportTotal2
			                    invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount         = NewInvoice.TotalDistributionAmount.ReportTotal3
			                    invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount         = NewInvoice.TotalDistributionAmount.ReportTotal4
			                    invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount         = NewInvoice.TotalDistributionAmount.ReportTotal5
			                    invoked.GLFinanceCodeBlock                                             = PayablesInvoice.PayablesAccrualCodeDetailRel.DistributionAccount
			                    invoked.DistributionAccount                                            = PayablesInvoice.PayablesAccrualCodeDetailRel.DistributionAccount
			                    invoked.BypassActiveCodeBlockEdit									   = true     

						if  (UnmatchFrom.MA75)
							invoke FastUpdate NewInvoice.PayablesInvoice
								initialize invoked.BackgroundProcessing

				Instance Rules
										
					if  (PrmLastDistribution entered 
					and  PayablesInvoiceDistribution > PrmLastDistribution)
						NextSentence = true 
					else 					
					if  (UnmatchFrom.MA70)
						if  (PayablesInvoice.MatchProcessType.ServiceContract
						or  (PayablesInvoice.MatchProcessType.AOCOnly
						and  !PayablesInvoice.CostComponentMatch))

							if (MatchCreated entered   
							or (Status.Released		
							and WillBeCancelled)            
							or  !DistributionType.Distribution) 
								FromUnmatch = true
								invoke UnmatchDelete 
						else

							if (MatchCreated entered   
							or (Status.Released		
							and WillBeCancelled)            
							or  !DistributionType.Distribution) 
								FromUnmatch = true
								invoke UnmatchDelete 
							else
							if (TaxEntityUsesSabrix
							and TaxCode entered)


								if (PayablesInvoice.OneSourceOriginal)
								    invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount			-= DistributionAmount.CurrencyAmount

									invoke FastUpdate PayablesInvoiceDetail
										invoked.TaxAmount 	-= DistributionAmount.CurrencyAmount

									invoke UnmatchDelete
								else
								if  (PayablesInvoice.OneSourceGeneric)
									invoke FastUpdate PayablesInvoiceDetail
										initialize invoked.TaxAmount
										initialize invoked.AccruedTaxAmount

									invoke UnmatchDelete
					else
						LocalPayablesInvoice = NewInvoice.PayablesInvoice
						if (PayablesInvoiceDetail entered 
						and NewMatchInvoiceDistributionRel exists)  
							NextSentence = true
						else		
						if (DistributionType.Distribution)
							invoke CreateFromMatch PayablesInvoiceDistribution
								assign result to LocalPayablesInvoiceDistribution
								fill in fields from this instance
									except invoked.PayablesInvoice
									except invoked.Status
									except invoked.DistributionDate
									except invoked.PayablesInvoiceDistributionObjectID
									except invoked.OriginalPOLineDistribution
									except invoked.OriginalContractLineDistribution
									except invoked.TransientPercent
									except invoked.GltObjId
								invoked.PayablesInvoice						= NewInvoice.PayablesInvoice
								invoked.Status								= 1
								invoked.DistributionDate					= PostDate
								invoked.TransientReversalPostDate			= PostDate
								invoked.TaxableAmount						= TaxableAmount * -1
								invoked.UnitAmount							= UnitAmount * -1
								invoked.DistributionAmount.CurrencyAmount	= DistributionAmount.CurrencyAmount * -1
								invoked.DistributionAmount.ExchangeDate		= DistributionAmount.ExchangeDate
								invoked.GLTransactionAmount					= GLTransactionAmount * -1

								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount 		= (DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.KeepRateAndAmount						= true 

								invoked.GLFinanceCodeBlock					= DistributionAccount
								initialize invoked.TransientReferenceToThisInstance
								invoked.FromUnmatch 						= true
								
							if  (PayablesInvoice.RetainageAccrualCode entered)
								for each PayablesInvoiceRetainageDistributionRel
									invoke Create PayablesInvoiceRetainageDistribution
										fill in fields from each
											except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice
											except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice = NewInvoice.PayablesInvoice
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PaymentAmount										= each.PaymentAmount * -1
										invoked.RetainageCalculatedAmount							= each.RetainageCalculatedAmount * -1
	

						else
						if (DistributionType.ExpenseAccrual)					

		
							invoke Create PayablesInvoiceDistribution
								fill in fields from this instance
									except invoked.PayablesInvoice
									except invoked.DistributionAmount
									except invoked.Status
									except invoked.DistributionDate
									except invoked.TaxableAmount
									except invoked.UnitAmount
									except invoked.PayablesInvoiceDistributionObjectID
									except invoked.OriginalPOLineDistribution
									except invoked.OriginalContractLineDistribution
									except invoked.TransientPercent
									except invoked.GltObjId
	
								invoked.Company						= Company
								invoked.PayablesInvoice				= NewInvoice.PayablesInvoice
								invoked.GLTPostingDate				= PostDate
								invoked.GLTTransactionDate			= NewInvoice.InvoiceDate
								invoked.DistributionType 			= "A"
								invoked.Status						= 1
								invoked.DistributionDate			= PostDate
								invoked.DistributionAccount			= DistributionAccount
								invoked.GLFinanceCodeBlock			= DistributionAccount
	
								invoked.GLTransactionAmount  	  			= DistributionAmount.CurrencyAmount * -1
								invoked.DistributionAmount.CurrencyAmount	= DistributionAmount.CurrencyAmount * -1
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	= (DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount 		= (DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.KeepRateAndAmount						= true 
								invoked.DistributionAmount.ExchangeDate		= NewInvoice.InvoiceAmount.ExchangeDate 
								invoked.DistributionAmount.KeepRateAndAmount		= true
								invoked.TaxableAmount						= TaxableAmount * -1
								invoked.UnitAmount							= UnitAmount * -1
								invoked.FromUnmatch 						= true
	
								initialize invoked.TransientReferenceToThisInstance



		RebuildRetainageDistributions is a Set Action
			default label is untranslatable
			restricted
			Instance Selection
				where (PayablesInvoiceDetail entered
				and    PayablesInvoice.RetainageAccrualCode entered)

			Sort Order
				Company 
				PayablesInvoice


			Action Rules
				PayablesInvoice Set Rules
					Entrance Rules
						invoke Delete PayablesInvoice.PayablesInvoiceRetainageDistributionsRel
					
				Instance Rules
					if (PayablesInvoice.IsChargeback 
					or  PayablesInvoice.IsPOCancel)
						if (PayablesInvoice.PayablesInvoiceOriginalRel.RetainageAccrualCode entered)
							for each PayablesInvoice.PayablesInvoicePaymentRel 
								invoke Create PayablesInvoiceRetainageDistribution
									fill in fields from this instance
									invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice 				= PayablesInvoice
									invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence 	    = each.PayablesInvoicePayment
									invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine 				= PurchaseOrderLine 
									invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution 	= PayablesInvoiceDistribution
									invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence 		= PayablesInvoiceDetail
									invoked.Contract 															= PurchasingContract
									invoked.ContractLine														= ContractLine 
									invoked.Contract            												= PurchasingContract
									invoked.RetainageCalculatedAmount 											= PayablesInvoiceDetail.TotalDistributionAmount

									invoked.PaymentAmount														= DistributionAmount.CurrencyAmount

									if (Retainage)
										if  (ContractLine entered 
										and  PurchaseOrderLine not entered)
											if  (ContractLine.Retainage)
												if  (PurchasingContract.RetainagePercentCompleteTracking.HeaderLevel)
													invoked.RetainagePercentage									= PurchasingContract.RetainagePercent1
												else
													invoked.RetainagePercentage									= ContractLine.RetainagePercent1
										else
											if  (PurchaseOrderLine.Retainage entered)
												if  (PurchaseOrder.RetainagePercentCompleteTracking.PurchaseOrderLevel)
													invoked.RetainagePercentage									= PurchaseOrder.RetainageFirstPercent
												else
													invoked.RetainagePercentage									= PurchaseOrderLine.RetainageFirstPercent

								end for each 
					else 
					if (!Retainage)
						for each PayablesInvoice.PayablesInvoicePaymentRel 
							if (each.AccrualCode = PayablesInvoice.AccrualCode)
								invoke Create PayablesInvoiceRetainageDistribution
									fill in fields from this instance
									invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice 				= PayablesInvoice
									invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence 	    = each.PayablesInvoicePayment
									invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine 				= PurchaseOrderLine 
									invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution 	= PayablesInvoiceDistribution
									invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence 		= PayablesInvoiceDetail
									invoked.Contract 															= PurchasingContract
									invoked.ContractLine														= ContractLine 
									invoked.PaymentAmount														= DistributionAmount.CurrencyAmount
									invoked.Contract            												= PurchasingContract
									invoked.RetainageCalculatedAmount 											= PayablesInvoiceDetail.TotalDistributionAmount
								end for each 
					else


						for each PayablesInvoice.PayablesInvoicePaymentRel 
							if (each.AccrualCode = PayablesInvoice.RetainageAccrualCode)
								invoke Create PayablesInvoiceRetainageDistribution
									fill in fields from this instance
									invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice 				= PayablesInvoice
									invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence 	    = each.PayablesInvoicePayment
									invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine 				= PurchaseOrderLine 
									invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution 	= PayablesInvoiceDistribution
									invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence 		= PayablesInvoiceDetail
									invoked.Contract 															= PurchasingContract
									invoked.ContractLine														= ContractLine 
									invoked.Contract            												= PurchasingContract
									invoked.RetainageCalculatedAmount 											= PayablesInvoiceDetail.TotalDistributionAmount

									invoked.PaymentAmount														= (PayablesInvoiceDetail.TotalDistributionAmount *  (each.PaymentAmount.CurrencyAmount / each.PayablesInvoice.InvoiceAmount.CurrencyAmount))



									invoked.RetainagePercentage                                             	= (each.PaymentAmount.CurrencyAmount / each.PayablesInvoice.InvoiceAmount.CurrencyAmount)

		MigrateGLCommit is a Set Action		
			default label is "CreateGLCommitmentsForMigratedInvoices"
			restricted
			Parameters
				PrmPayablesCompany		is a PayablesCompany
				




			Local Fields
				LocalGLCommitView			is a GLCommit view
				LocalMigrationResultView	is a MigrationResult view
				LocalErrorMessage 			is Alpha 150
				LocalErrorOccurred			is Boolean
				LocalMigrationJobType		is a MigrationJobType

			Instance Selection
				where ((Company				  = PrmPayablesCompany
				or      PrmPayablesCompany not entered)
				and   (PayablesInvoice.Status = 0		
				or     PayablesInvoice.Status = 1		
				or     PayablesInvoice.Status = 2		
				or     PayablesInvoice.Status = 3)		
				and   (Status			      = 0		
				or     Status			      = 1)		
				and    !GLCommitRel exists
				and    DistributionType       = "D"
				and	   !TaxCode entered
				and	   VendorInvoiceEntered)
				
				
			Sort Order
				Company
				Vendor
				PayablesInvoice
				PayablesInvoiceDistribution
				
					
			Action Rules
				Empty Set Rules
					LocalMigrationJobType = MigrationJobType.MigratePayablesCommitments
					include Migration.CreateMigrationResult
						replace POCompany with blank
						replace RQCompany with blank
						replace ContractGroup with blank
						replace Contract with blank
						replace CashManagementGroup with blank
						replace PayablesCompany with PrmPayablesCompany
					invoke SetAsCompleted LocalMigrationResultView.MigrationResult

				Set Rules
					Entrance Rules
						LocalMigrationJobType = MigrationJobType.MigratePayablesCommitments
						include Migration.CreateMigrationResult
							replace POCompany with blank
							replace RQCompany with blank
							replace ContractGroup with blank
							replace Contract with blank
							replace CashManagementGroup with blank
							replace PayablesCompany with PrmPayablesCompany

					Exit Rules
						invoke SetAsCompleted LocalMigrationResultView.MigrationResult

				Instance Rules
					LocalErrorOccurred			= false
				
					if (GLTransactionDetailRel.Status.Unreleased
					or  GLTransactionDetailRel.Status.Released)
					
						invoke CreateCommitment GLCommit
							assign result to LocalGLCommitView
							resume on error
								LocalErrorMessage 					= error message
								LocalErrorOccurred					= true
							invoked.HeaderUniqueID 					= PayablesInvoice.UniqueID
							invoked.AccountingEntity				= GeneralLedgerCompanyRel.AccountingEntity
							invoked.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.System							= "AP"
							invoked.FinanceCodeBlock				= DistributionAccount
							invoked.CurrencyCode					= InvoiceCurrency
							invoked.TransactionAmount				= GLTransactionAmount
							invoked.ReportCurrencyAmount			= DistributionAmount     
							invoked.TransactionDate					= PayablesInvoice.DistributionDate
							invoked.OriginatingTransaction			= reference to this instance
							invoked.DimensionCode					= GLFinanceCodeBlock.DimensionCode
							invoked.TransBusinessObjectRef			= reference to PayablesInvoice
							if (Status.Unreleased
							or  Status.Pending)
								invoked.TransientMigrateAsReleased	= false
							else
								invoked.TransientMigrateAsReleased	= true

						include Migration.CreateMigrationResultDetail


		ProcessOneSourceForExpense is a Set Action		










			default label is untranslatable
			restricted
			Parameters
				PrmCompany				is a PayablesCompany
				PrmPayablesInvoice		is a PayablesInvoice
				PrmRunInForeground		is Boolean
				PrmAutoApprove			is Boolean
				PrmReleaseOrSubmit		is Numeric 1
					States	
						Release		value is 1
						Submit		value is 2
						RelAmended 	value is 3		
				PrmExcludeFromCall		is Boolean	

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice
				AddOnCharge			
				PayablesInvoiceDistribution

			Local Fields
				SetLocalReturnedTaxAmount			is a InternationalAmount
				SumOfCalculatedTaxAmount			is an InternationalAmount
				SumOfLineTaxableAmount				is an InternationalAmount

				OneSourceErrorMsg					is Alpha 200
				SetTaxError							is Boolean
				LocalPTXTaxAmount					is a CurrencyAmount
				LocalPTXTaxCode						is a TaxCode
				LocalPTXTaxableAmount				is a CurrencyAmount
				LocalReversingDistribution			is like PayablesInvoiceDistribution		
				LocalReversingTaxRate				is a ChrgRate		
			Rule Blocks


				OSEPopulateCalcTaxInputFields

					initialize CalculateTax
					CalculateTax.CallingModule				= "Payables_Invoice"
					CalculateTax.System						= "AP"
					CalculateTax.InFinanceEnterpriseGroup	= PrmPayablesInvoice.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CalculateTax.TaxEntity					= PrmPayablesInvoice.GeneralLedgerCompanyRel.AccountingEntity
					CalculateTax.InvoiceCompany				= PrmPayablesInvoice.Company
					CalculateTax.VendorGrp					= PrmPayablesInvoice.Company.VendorGroup
					CalculateTax.ProcessLevel				= PrmPayablesInvoice.ProcessLevel
					CalculateTax.Vendor						= PrmPayablesInvoice.Vendor
					CalculateTax.VendorCustomerName			= PrmPayablesInvoice.Vendor.VendorName
					CalculateTax.VoucherNumber				= PrmPayablesInvoice.VoucherNumber
					CalculateTax.Invoice					= PrmPayablesInvoice.Invoice
					CalculateTax.Suffix						= PrmPayablesInvoice.Suffix
					CalculateTax.CancelSequence				= PrmPayablesInvoice.CancelSequence
					CalculateTax.InvoiceAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
					CalculateTax.TaxAmount					= LocalPTXTaxAmount
					CalculateTax.ChargedTaxAmount			= LocalPTXTaxAmount
					CalculateTax.InvoiceDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.ShipmentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxDate					= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxPointDate				= PrmPayablesInvoice.DerivedTaxPointDate
					CalculateTax.ProductTaxCategory			= LocalPTXTaxCategory
					CalculateTax.PointOfTitleTransfer		= PrmPayablesInvoice.DerivedPointOfTitleTransfer	

					if (PrmPayablesInvoice.IsCreditInvoice)			
						CalculateTax.InvoicedOrCreditMemo	= "C"	
					else											
						CalculateTax.InvoicedOrCreditMemo	= "I"	
						
				   	CalculateTax.TransactionSource			= "I"	
					CalculateTax.LineNumber					= LastDistribution + 1 
					CalculateTax.DeliveryTerms          	= PrmPayablesInvoice.ShipTerm
					CalculateTax.VATRegistrationCountry    	= TaxEntityRel.VATRegistrationCountry 
					CalculateTax.VATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber
					if (PrmPayablesInvoice.ProcessLevel.TaxCode entered)	
						if (PrmPayablesInvoice.RemitToCode.TaxCode entered)
							CalculateTax.FromTaxCode		= PrmPayablesInvoice.RemitToCode.TaxCode
						else
							CalculateTax.FromTaxCode		= PrmPayablesInvoice.Vendor.TaxCode	
					

					if (PrmPayablesInvoice.RemitToCode.CurrentAddressRel exists
					and PrmPayablesInvoice.RemitToCode.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= PrmPayablesInvoice.RemitToCode.CurrentAddressRel.PostalAddress
						CalculateTax.FromVATRegistrationCountry 	= PrmPayablesInvoice.RemitToCode.VATRegistrationCountry
						CalculateTax.FromVATRegistrationNumber		= PrmPayablesInvoice.RemitToCode.VATRegistrationNumber
					else
						CalculateTax.FromPostalAddress				= PrmPayablesInvoice.Vendor.CurrentAddressRel.PostalAddress
						CalculateTax.FromVATRegistrationCountry 	= PrmPayablesInvoice.Vendor.VATRegistrationCountry
						CalculateTax.FromVATRegistrationNumber		= PrmPayablesInvoice.Vendor.VATRegistrationNumber
					
					CalculateTax.DefaultFilingCurrency 				= PrmPayablesInvoice.Company.Currency 
					CalculateTax.CurrencyRate						= PrmPayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		
					CalculateTax.TransactionCurrency 				= PrmPayablesInvoice.InvoiceCurrency	
					
					if (PrmPayablesInvoice.PayCurrency entered)
						CalculateTax.BaseCurrency 					= PrmPayablesInvoice.PayCurrency		
					else	
						CalculateTax.BaseCurrency 					= PrmPayablesInvoice.PayGroup.BaseCurrency
					if (CalculateTax.BaseCurrency not entered)	
						CalculateTax.BaseCurrency					= PrmPayablesInvoice.ProcessLevel.PayGroup.BaseCurrency	
					
					CalculateTax.ReceiptSite						= PrmPayablesInvoice.ProcessLevel	
					CalculateTax.UniqueIdOfRelatedObject			= PrmPayablesInvoice.UniqueID
					CalculateTax.SabrixUserElement					= PrmPayablesInvoice.UserElementGroup
					CalculateTax.UserElementLevel					= "L"
					CalculateTax.CommodityCode						= ICNCode
					CalculateTax.TaxCode							= TaxCode
					CalculateTax.TaxableAmount						= TaxableAmount
					CalculateTax.UniqueLineNumber					= UniqueID		

					CalculateTax.BypassEditing 						= true		
					CalculateTax.CreateOutputUserFieldFile			= true		


					if (PrmPayablesInvoice.Location.PostalAddress entered)
						CalculateTax.PostalAddress 			= PrmPayablesInvoice.Location.PostalAddress
					else
						if (PrmPayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.PostalAddress		= PrmPayablesInvoice.ProcessLevel.PostalAddress
						else
							CalculateTax.PostalAddress		= PrmPayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress	
						
				

					if (PrmPayablesInvoice.BillToProcessLevel.PostalAddress entered)
						CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.BillToProcessLevel.PostalAddress		
					else
						if (PrmPayablesInvoice.ProcessLevel.PostalAddress entered)	
							CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.ProcessLevel.PostalAddress
						else
							CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress	
					

					if (PrmPayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress		= PrmPayablesInvoice.PurchaseFromLocation.VendorAddress
					else	
						CalculateTax.FromPostalAddress		= PrmPayablesInvoice.Vendor.VendorAddress
					

					if (PrmPayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress				= PrmPayablesInvoice.BillFromLocation.VendorAddress
					else
						CalculateTax.POAAddress				= PrmPayablesInvoice.Vendor.VendorAddress	
				
					if (!PrmPayablesInvoice.UseOldMethod)		
						CalculateTax.SendMultLineItems			= true
						CalculateTax.UpdateLineItems			= true
						CalculateTax.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
				

			


				SavePTXAndPITTaxValues
					initialize LocalPTXTaxCode
					initialize LocalPTXTaxableAmount
					initialize LocalPTXTaxAmount
					initialize LocalPTXTaxCategory
					
					LocalPTXTaxCode			= TaxCode
					

					
					if  (PrmPayablesInvoice.PayablesInvoiceTaxRel exists
					and !PrmPayablesInvoice.PayablesInvoiceTaxRel.ShortPaid)	

						if (PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxAmount entered)
							LocalPTXTaxAmount	= PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxAmount

					else
						LocalPTXTaxAmount	= PrmPayablesInvoice.TaxAmount

					

					if (PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxableAmount entered)
						LocalPTXTaxableAmount	= PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxableAmount

					else
						if (PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxDetails.TaxableAmount entered)					
							LocalPTXTaxableAmount	= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxDetails.TaxableAmount	

						else
							if (PrmPayablesInvoice.TaxableAmount entered)
								LocalPTXTaxableAmount	= PrmPayablesInvoice.TaxableAmount

							else
								if (PrmPayablesInvoice.LocalPTXTaxMethod.Accrued)
									LocalPTXTaxableAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

								else
									if (PrmPayablesInvoice.LocalPTXTaxAmount entered)
										LocalPTXTaxableAmount	= (PrmPayablesInvoice.InvoiceAmount.CurrencyAmount - LocalPTXTaxAmount)

									 
								
					if (PrmPayablesInvoice.PayablesInvoiceTaxRel exists)
						if (PrmPayablesInvoice.PayablesInvoiceTaxRel.ProductTaxCategory entered)
							LocalPTXTaxCategory		= PrmPayablesInvoice.PayablesInvoiceTaxRel.ProductTaxCategory
					else
						if (PrmPayablesInvoice.TransientTaxCategory entered)
							LocalPTXTaxCategory		= PrmPayablesInvoice.TransientTaxCategory
		

					if (PrmPayablesInvoice.PayablesInvoiceTaxRel not exists)

						invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel		
							invoked.TaxCode					= LocalPTXTaxCode
							invoked.EnteredTaxAmount		= LocalPTXTaxAmount
							invoked.EnteredTaxableAmount	= LocalPTXTaxableAmount
							invoked.ProductTaxCategory		= LocalPTXTaxCategory
							invoked.TaxPointDate			= PrmPayablesInvoice.TransientTaxPointDate
							if (TaxEntityUsesThirdPartyTax)
								if (LocalPTXTaxAmount entered)
									invoked.TaxMethod		= "I"
								else
									invoked.TaxMethod		= "A"
					else	


						if (PrmPayablesInvoice.TransientTaxPointDate entered)	
							invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
								invoked.TaxPointDate			= PrmPayablesInvoice.TransientTaxPointDate				
				
					commit transaction



	
	
							
			Instance Selection			
				where (PayablesInvoice.Company	= PrmCompany
				and    PayablesInvoice			= PrmPayablesInvoice
				and    TaxIndicator.Taxable
				and    Status.Unreleased			
				and    TaxCode entered)
				
			
			Action Rules
				Empty Set Rules		

					if (PrmReleaseOrSubmit.Release
					or  PrmReleaseOrSubmit.RelAmended)		
						invoke ContinueReleaseAfterTaxProcessing PayablesInvoice
							on error
								invoke ResetAfterError PrmPayablesInvoice
							invoked.PrmCompany			= PrmCompany
							invoked.PrmPayablesInvoice	= PrmPayablesInvoice
					else
						if (PrmReleaseOrSubmit.Submit)	
							invoke FinishSubmitForApproval PrmPayablesInvoice		
								invoked.AutoApprovePrm	= PrmAutoApprove
						else
							invoke ClearBackgroundProcessing PrmPayablesInvoice		

				
				Set Rules
					Entrance Rules
						invoke FastUpdate PrmPayablesInvoice										
							invoked.BackgroundProcessing = 4	
						
						for each PrmPayablesInvoice.TaxLineItemRel
							invoke Delete each.LineItemUserFieldsRel	
							invoke Delete each
						commit transaction
						

						LocalPTXTaxAmount = PrmPayablesInvoice.TaxAmount

						if (PrmPayablesInvoice.Status.Unreleased)
							for each PrmPayablesInvoice.PayablesInvoiceDistributionRel
								if (each.IsLinkedTaxDistribution)	//	was "IsTaxDistribution"	
									invoke Delete each
		
						initialize SetTaxError
						initialize OneSourceErrorMsg
						initialize SumOfCalculatedTaxAmount
						initialize SumOfLineTaxableAmount
			
						include SavePTXAndPITTaxValues

						
						
					Exit Rules
						commit transaction


						if (PrmPayablesInvoice.UseOldMethod)			

							if (!SetTaxError)		

								if (PrmRunInForeground)

									invoke CreateTaxDistributions in foreground	
										invoked.PrmPayablesCompany			= PrmPayablesInvoice.Company
										invoked.PrmPayablesInvoice			= PrmPayablesInvoice
										invoked.PrmSumOfCalculatedTaxAmount	= SumOfCalculatedTaxAmount
										invoked.PrmSumOfLineTaxableAmount	= SumOfLineTaxableAmount
										invoked.PrmLocalPTXTaxAmount		= LocalPTXTaxAmount
										invoked.PrmRunInForeground			= PrmRunInForeground
								else

									invoke CreateTaxDistributions in background group (PrmPayablesInvoice.TaxProcessing2)	
										on error
											invoke ResetAfterError PrmPayablesInvoice
										invoked.PrmPayablesCompany			= PrmPayablesInvoice.Company
										invoked.PrmPayablesInvoice			= PrmPayablesInvoice
										invoked.PrmSumOfCalculatedTaxAmount	= SumOfCalculatedTaxAmount
										invoked.PrmSumOfLineTaxableAmount	= SumOfLineTaxableAmount
										invoked.PrmLocalPTXTaxAmount		= LocalPTXTaxAmount
								

						
						else	
						














							invoke UpdatePayablesInvoiceTax TaxLineItem		
								on error
									invoke ResetAfterError PrmPayablesInvoice
								invoked.PrmFinanceEnterpriseGroup	= PrmPayablesInvoice.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmUniqueIdOfRelatedObject	= PrmPayablesInvoice.UniqueID
								invoked.PrmPayablesCompany			= PrmPayablesInvoice.Company
								invoked.PrmPayablesInvoice			= PrmPayablesInvoice
								invoked.PrmSumOfCalculatedTaxAmount	= SumOfCalculatedTaxAmount
								invoked.PrmSumOfLineTaxableAmount	= SumOfLineTaxableAmount
								invoked.PrmLocalPTXTaxAmount		= LocalPTXTaxAmount
								invoked.PrmAutoApprove				= PrmAutoApprove
								invoked.PrmReleaseOrSubmit			= PrmReleaseOrSubmit
								invoked.PrmReversingDistrib			= LocalReversingDistribution	
								invoked.PrmReversingTaxRate			= LocalReversingTaxRate			
								invoked.PrmExcludeFromCall			= PrmExcludeFromCall			



						
				Instance Rules

					if (PrmPayablesInvoice.UseOldMethod)	

						if ((PrmPayablesInvoice.RequireICNCode
						and  ICNCode entered)
						or  !PrmPayablesInvoice.RequireICNCode)

							include OSEPopulateCalcTaxInputFields

							initialize CalculateTax.TaxAmount
							CalculateTax.Function	= "C"
							include DisplayCalculateTaxInput
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
							include DisplayCalculateTaxOutput	

							if (CalculateTax.OutputErrorNumber = 700	
							or  CalculateTax.OutputErrorNumber = 701	
							or  CalculateTax.OutputErrorNumber = 702	
							or  CalculateTax.OutputErrorNumber = 703	
							or  CalculateTax.OutputErrorNumber = 704	
							or  CalculateTax.OutputErrorNumber = 705)	
								SetTaxError	= true
								OneSourceErrorMsg	= CalculateTax.OutputErrorText
								invoke Create PayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"
							else		







								invoke Update PayablesInvoiceTaxRel
									invoked.TaxDetails.TaxCode				= TaxCode
									invoked.TaxDetails.ICNCode				= ICNCode
									invoked.TaxDetails.TaxMethod 			= TaxType
									invoked.TaxDetails.TaxTableOutput		= CalculateTax.TaxTable.TaxTableOutput
									invoked.TaxDetails.TaxableAmount		= TaxableAmount
									invoked.TaxToleranceOverridden			= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxToleranceOverridden	
									if (CalculateTax.LocalExcludeFromSabrixCall)
										SetLocalReturnedTaxAmount			= ((PrmPayablesInvoice.TaxableAmount / LocalPTXTaxableAmount) * PrmPayablesInvoice.TaxAmount)

										invoked.TaxDetails.ReturnedTaxRate	= (((PrmPayablesInvoice.TaxableAmount / LocalPTXTaxableAmount) * PrmPayablesInvoice.TaxAmount) / PrmPayablesInvoice.TaxableAmount)
									else
										SetLocalReturnedTaxAmount			= CalculateTax.OutputTotalTaxAmount

										invoked.TaxDetails.ReturnedTaxRate	= CalculateTax.OutputTaxRate
									invoked.TaxDetails.ReturnedTaxAmount	= SetLocalReturnedTaxAmount
									initialize invoked.TaxDetails.CalculatedTaxAmount
									initialize invoked.TaxDetails.CalculatedTaxRate
									invoked.TaxDetails.DistributionAccount	= CalculateTax.ReturnedTaxInputAccount
									invoked.TaxDetails.TaxingJurisdiction	= CalculateTax.TaxingJurisdiction
									invoked.TaxDetails.InformationMessage	= CalculateTax.OneSourceInformationMessage
									invoked.TaxDetails.SentToTaxEngine		= not CalculateTax.NotSentToSabrix
		
								







								
								round SetLocalReturnedTaxAmount to nearest DerivedRoundTo							
		

								SumOfCalculatedTaxAmount	+= SetLocalReturnedTaxAmount
								

								if (SetLocalReturnedTaxAmount entered)
									SumOfLineTaxableAmount	+= TaxableAmount

					
					else	
					



						if ((PrmPayablesInvoice.RequireICNCode		
						and  ICNCode entered)						
						or  !PrmPayablesInvoice.RequireICNCode)		

							if (PrmReleaseOrSubmit.RelAmended		
							and HasLinkedTaxDistributions)			
								LocalReversingDistribution	= PayablesInvoiceDistribution				
								LocalReversingTaxRate		= first LinkedTaxDistributionsRel.TaxRate	
								LocalContinue				= true										

							else									

								invoke CreateTaxLineItem 				








						

							





		UpdatePayablesInvoiceTax is an Instance Action			
			default label is untranslatable
			restricted
			Parameters
				PrmTaxCode					is a TaxCode
				PrmICNCode					is an ICNCode
				PrmTaxMethod				is a TaxMethod
				PrmTaxTableOutput			is a TaxTableOutput
				PrmTaxableAmount			is an InternationalAmount
				PrmTaxDetails				is a TaxArrayOutput
				PrmSumOfCalculatedTaxAmount	is an InternationalAmount
				PrmSumOfLineTaxableAmount	is an InternationalAmount
			Action Rules











				
				invoke Update PayablesInvoiceTaxRel
					invoked.TaxDetails.TaxCode				= PrmTaxCode
					invoked.TaxDetails.ICNCode				= PrmICNCode
					invoked.TaxDetails.TaxMethod 			= PrmTaxMethod
					invoked.TaxDetails.TaxTableOutput		= PrmTaxTableOutput
					invoked.TaxDetails.TaxableAmount		= PrmTaxableAmount
					invoked.TaxDetails.ReturnedTaxRate		= PrmTaxDetails.ReturnedTaxRate
					invoked.TaxDetails.ReturnedTaxAmount	= PrmTaxDetails.ReturnedTaxAmount
					invoked.TaxDetails.CalculatedTaxAmount	= PrmSumOfCalculatedTaxAmount
					invoked.TaxDetails.CalculatedTaxRate	= PrmTaxDetails.ReturnedTaxRate	
					invoked.TaxDetails.DistributionAccount	= PrmTaxDetails.DistributionAccount
					invoked.TaxDetails.TaxingJurisdiction	= PrmTaxDetails.TaxingJurisdiction
					invoked.TaxDetails.TaxTableOutput.AccrualCode	= PrmTaxDetails.TaxTableOutput.AccrualCode		

			Exit Rules



























		CreateTaxDistributions is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany				is a PayablesCompany
				PrmPayablesInvoice				is a PayablesInvoice
				PrmSumOfCalculatedTaxAmount		is a CurrencyAmount
				PrmSumOfLineTaxableAmount		is a CurrencyAmount
				PrmLocalPTXTaxAmount			is a CurrencyAmount
				PrmRunInForeground				is Boolean
				PrmAutoApprove					is Boolean
				PrmReleaseOrSubmit				is Numeric 1
					States	
						Release		value is 1
						Submit		value is 2
						RelAmended 	value is 3		
				PrmReversingDistrib				is like PayablesInvoiceDistribution		
				PrmExcludeFromCall				is Boolean		

			Sort Order
				Company
				PayablesInvoice
				PayablesInvoiceDistribution
			
			Local Fields
				LastDistribution				is a PayablesInvoiceDistribution
				OneSourceReturnedTaxRate		is like ChrgRate
				SetLocalReturnedTaxAmount		is a InternationalAmount
				SetLocalTaxDifference			is like InternationalAmount
				LocalCalculatedTaxAmount		is a CurrencyAmount
				LocalRunningSumTaxAmount		is a CurrencyAmount
				LocalSetLineTaxablePercent		is a ChrgRate	
				LocalProratedTaxAmount			is a CurrencyAmount			
				LocalSetDetailLineTaxablePercent is a CurrencyAmount		
				LocalLastTaxDetailOutSeq		is a Sequence				
				DoShortPay						is Boolean
				LocalHoldCode					is like PayablesHoldCode	
				LocalBypassInstanceRules		is Boolean					
				LocalRunningTaxable 			is a CurrencyAmount			
				LocalInError					is Boolean					
			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    Status.Unreleased		
				and    TaxIndicator.Taxable
				and    TaxCode entered)
				
			Action Rules
				Empty Set Rules	

					if (PrmReleaseOrSubmit.Release
					or  PrmReleaseOrSubmit.RelAmended)		
						invoke ContinueReleaseAfterTaxProcessing PayablesInvoice
							on error
								invoke ResetAfterError PrmPayablesInvoice
							invoked.PrmCompany			= PrmPayablesCompany
							invoked.PrmPayablesInvoice	= PrmPayablesInvoice
					else
						if (PrmReleaseOrSubmit.Submit)		
							invoke FinishSubmitForApproval PrmPayablesInvoice		
								invoked.AutoApprovePrm	= PrmAutoApprove
						else
							invoke ClearBackgroundProcessing PrmPayablesInvoice		

					
					
				Set Rules	
					Entrance Rules










						if (PrmPayablesInvoice.CalculateTax.LocalExcludeFromSabrixCall)
							SetLocalTaxDifference  = PrmSumOfCalculatedTaxAmount - PrmPayablesInvoice.TaxAmount

							if (SetLocalTaxDifference < 1 
							and SetLocalTaxDifference > -1)

								invoke Update last PrmPayablesInvoice.PayablesInvoiceDistributionRel.PayablesInvoiceTaxRel
									invoked.TaxDetails.ReturnedTaxAmount	-= SetLocalTaxDifference

						if (PrmPayablesInvoice.UsePayablesTaxTolerance)
							PayablesTaxTolerance.InvoiceTaxAmount			= PrmPayablesInvoice.TaxAmount
							PayablesTaxTolerance.CalculatedTaxAmount		= PrmSumOfCalculatedTaxAmount
							PayablesTaxTolerance.TaxSystemTaxRate			= (PrmSumOfCalculatedTaxAmount / PrmSumOfLineTaxableAmount)			
							PayablesTaxTolerance.VendorChargedTaxRate		= (PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxAmount / PrmSumOfLineTaxableAmount)	
							if (PrmPayablesInvoice.IsUseTaxCodeAccounts)
								PayablesTaxTolerance.OverchargeLimitAmount	= PrmPayablesInvoice.EntityTaxCodeRel.TaxToleranceAmount
							else
								PayablesTaxTolerance.OverchargeLimitAmount	= PrmPayablesInvoice.TaxEntityRel.TaxToleranceAmount
							PayablesTaxTolerance.AllowZeroTaxOverride		= true
							PayablesTaxTolerance.BypassEdits 				= PrmExcludeFromCall	
							if (PrmPayablesInvoice.Company.PayablesTaxTolerance)	
								PayablesTaxTolerance.OverchargeLimitAmount		= Company.TaxToleranceOverAmount
								PayablesTaxTolerance.UnderchargeLimitAmount		= Company.TaxToleranceUnderAmount
								PayablesTaxTolerance.OverchargeRatePercent		= Company.TaxToleranceOverRate		
								PayablesTaxTolerance.UnderchargeRatePercent		= Company.TaxToleranceUnderRate		


							LocalPayablesTaxTolerance = PayablesTaxTolerance.VerifyTaxWithinTolerance

						
						LastDistribution	= PrmPayablesInvoice.last PayablesInvoiceDistributionRel.PayablesInvoiceDistribution

						

						if (PrmPayablesInvoice.last PayablesInvoiceDistributionRel.PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount not entered)		
							LocalDistributionSequence	= LastDistribution - 1
							while (LocalDistributionSequence > 1)
								if (PayablesInvoiceTaxLocalRel.TaxDetails.ReturnedTaxAmount entered)
									LastDistribution	= LocalDistributionSequence
									end while
								decrement LocalDistributionSequence













						if (((PrmPayablesInvoice.UsePayablesTaxTolerance
						and (!PayablesTaxTolerance.InTolerance
						or    PayablesTaxTolerance.ZeroTaxOverride)
						and  !PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxToleranceOverridden)	
						or  (PrmSumOfCalculatedTaxAmount not entered
						and  PrmLocalPTXTaxAmount entered))		




						and  (!PrmExcludeFromCall					
						or    !PayablesTaxTolerance.InTolerance)	
						and  !PrmPayablesInvoice.Status.Amended			
						and  !PrmPayablesInvoice.TaxToleranceHoldProcess.PayAsBilled		
						and  !PrmPayablesInvoice.ExcludeFromTaxEstimate)		
							if (PayablesTaxTolerance.ZeroTaxOverride		
							and PrmLocalPTXTaxAmount not entered)			

								decrement PrmPayablesInvoice.TransientActualTaxAmountSum by PrmPayablesInvoice.TransientActualTaxAmountSum	
								DoShortPay = false							
							else



								if ((!PayablesTaxTolerance.ZeroTaxOverride						
								or    PrmLocalPTXTaxAmount entered)								
								and PrmPayablesInvoice.AllowShortPay							
								and Company.PutOutOfToleranceOnHold								
								and PrmPayablesInvoice.TaxToleranceHoldProcess.FirstPass)		




									invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel		
										invoked.TaxSystemTaxAmount	= PrmSumOfCalculatedTaxAmount	
										initialize invoked.TaxDetails.ReturnedTaxAmount		

									LocalHoldCode = Company.VendorGroup.TaxToleranceHoldCode		

									constraint (LocalHoldCode entered)								
										"Tax_\ToleranceHoldCodeOn_\Vendor_\GroupIsNotDefined"		
									invoke PutInvoiceOnHold	PrmPayablesInvoice						
										invoked.HoldCode = LocalHoldCode							

									invoke ClearBackgroundProcessing PrmPayablesInvoice				
									invoke UpdateErrorRecordsAction PrmPayablesInvoice				




									LocalBypassInstanceRules	= true								
								else		

									if (PrmPayablesInvoice.AllowShortPay)	



										OneSourceReturnedTaxRate = LastDistribution.PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate








										if ((OneSourceReturnedTaxRate > 0
										or  (PrmSumOfCalculatedTaxAmount not entered
										and  PrmLocalPTXTaxAmount entered))
										or  (PrmLocalPTXTaxAmount entered	
										and  PrmSumOfCalculatedTaxAmount entered	
										and !PayablesTaxTolerance.InTolerance))	
											invoke CreateShortPayCommentAction PrmPayablesInvoice	
										
										if (PrmSumOfCalculatedTaxAmount entered)										
											invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel						
												invoked.TaxDetails.ReturnedTaxAmount	= PrmSumOfCalculatedTaxAmount	
												invoked.TaxDetails.ReturnedTaxRate		= ((PrmSumOfCalculatedTaxAmount/PrmSumOfLineTaxableAmount) * 100)	
												invoked.TotalAccruedTaxableAmount 		= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxableAmount	
												initialize invoked.TotalInvoicedTaxableAmount	
												invoked.TaxMethod = "A"							

										invoke OneSourceShortPayUpdate PrmPayablesInvoice 
										initialize LocalRunningTaxable			
										DoShortPay = true
									else	
										LocalInError = true		
						else
							if (!PrmPayablesInvoice.Status.Amended)			

								decrement PrmPayablesInvoice.TransientActualTaxAmountSum by PrmPayablesInvoice.TransientActualTaxAmountSum	
								DoShortPay = false
								if (PayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced)	
									SetLocalTaxDifference  = PrmPayablesInvoice.TaxAmount - PrmSumOfCalculatedTaxAmount		
								else
									initialize SetLocalTaxDifference		

							else	


								decrement PrmPayablesInvoice.TransientActualTaxAmountSum by PrmPayablesInvoice.TransientActualTaxAmountSum	
								for each PrmPayablesInvoice.TaxDistributionsRel
									if (each.IsExpenseInvoicedTaxDistribution)
										increment PrmPayablesInvoice.TransientActualTaxAmountSum by each.DistributionAmount.CurrencyAmount



						commit transaction


					Exit Rules

						if (PrmPayablesInvoice.UseOldMethod)	
							if (PrmRunInForeground)
								invoke ClearBackgroundProcessing PrmPayablesInvoice
								invoke UpdateErrorRecordsAction PrmPayablesInvoice
							else
								

								invoke ClearBackgroundProcessing PrmPayablesInvoice in background
									run after background group (PrmPayablesInvoice.TaxProcessing2)
								

								invoke UpdateErrorRecordsAction PrmPayablesInvoice in background
									run after background group (PrmPayablesInvoice.TaxProcessing2)
								

								

						else

							if (LocalInError)	
								invoke UpdateErrorRecordsAction PayablesInvoice
							

							if (!LocalBypassInstanceRules		
							and (PrmReleaseOrSubmit.Release
							or   PrmReleaseOrSubmit.Submit))	
								if (PrmPayablesInvoice.PayablesInvoiceTaxRel.LinkedToDistributions				
								and PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxableAmount not entered)	
									invoke FastUpdate PrmPayablesInvoice				
										invoked.TaxableAmount	= LocalRunningTaxable	
							if (!PrmPayablesInvoice.IsOnHold)

								if (PrmReleaseOrSubmit.Release
								or  PrmReleaseOrSubmit.RelAmended)		
									invoke ContinueReleaseAfterTaxProcessing PayablesInvoice
										on error
											invoke ResetAfterError PrmPayablesInvoice
										invoked.PrmCompany			= PrmPayablesCompany
										invoked.PrmPayablesInvoice	= PrmPayablesInvoice
								else
									if (PrmReleaseOrSubmit.Submit)		
										invoke FinishSubmitForApproval PrmPayablesInvoice		
											invoked.AutoApprovePrm	= PrmAutoApprove
									else	
										invoke ClearBackgroundProcessing PrmPayablesInvoice		
										invoke RemoveTaxLineItem 								
											

				Instance Rules



					if  (!LocalBypassInstanceRules		
					and  !LocalInError					
					and  !PayablesInvoice.CallVertexByDocument		
					and (PrmReversingDistrib not entered						
					or  (PrmReversingDistrib entered							
					and  PayablesInvoiceDistribution != PrmReversingDistrib		
					and  OriginalDistribution		 != PrmReversingDistrib		
					and  !HasLinkedTaxDistributions)))							

						if (DoShortPay)
							if (!PrmExcludeFromCall)	

								if (PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate > 0)


									invoke CreateLandedTaxDistribution 
										invoked.PrmOriginalDistribution	= PayablesInvoiceDistribution
										invoked.PrmLocalTaxSeqNbr		= 1
										invoked.PrmTaxAccount			= PayablesInvoiceTaxRel.TaxDetails.DistributionAccount
										invoked.PrmTaxAmount			= PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount
										invoked.PrmTaxRate				= PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate
										invoked.PrmTaxJurisdiction		= PayablesInvoiceTaxRel.TaxDetails.TaxingJurisdiction
										invoked.PrmInfoMessage			= PayablesInvoiceTaxRel.TaxDetails.InformationMessage
										invoked.PrmSentToTaxEngine		= PayablesInvoiceTaxRel.TaxDetails.SentToTaxEngine
							
									LocalRunningTaxable		+= TaxableAmount		
						else	

							if (PayablesInvoiceDistribution != LastDistribution.PayablesInvoiceDistribution)	

								if (PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate entered)



									if (PrmLocalPTXTaxAmount entered)	
										invoke Update PayablesInvoiceTaxRel
											invoked.TaxToleranceOverridden	= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxToleranceOverridden	
											LocalSetLineTaxablePercent		= (PayablesInvoiceTaxRel.TaxDetails.TaxableAmount / PrmSumOfLineTaxableAmount)	
											LocalProratedTaxAmount			= (SetLocalTaxDifference * LocalSetLineTaxablePercent)							
											if (this instance.PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount entered)									
												if (PrmPayablesInvoice.ExcludeFromTaxEstimate		
												and ICNCode.ExcludeFromTaxEstimate)					
													LocalCalculatedTaxAmount	= PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount	

												else
													LocalCalculatedTaxAmount	= PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount + LocalProratedTaxAmount	

											else
												LocalCalculatedTaxAmount	= (LocalSetLineTaxablePercent * PrmLocalPTXTaxAmount)	
											invoked.TaxDetails.CalculatedTaxAmount	= LocalCalculatedTaxAmount
											invoked.TaxDetails.CalculatedTaxRate	= (LocalCalculatedTaxAmount / PayablesInvoiceTaxRel.TaxDetails.TaxableAmount)
										LocalTaxAmount	= LocalCalculatedTaxAmount		

										LocalRunningSumTaxAmount += LocalCalculatedTaxAmount		

							else	


								if (PrmLocalPTXTaxAmount entered)	
									invoke Update PayablesInvoiceTaxRel
										invoked.TaxToleranceOverridden			= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxToleranceOverridden	

										LocalCalculatedTaxAmount				= (PrmLocalPTXTaxAmount - LocalRunningSumTaxAmount)		

										invoked.TaxDetails.CalculatedTaxAmount	= LocalCalculatedTaxAmount	
										if (this instance.PayablesInvoiceTaxRel.TaxDetails.TaxableAmount entered)
											invoked.TaxDetails.CalculatedTaxRate	= (LocalCalculatedTaxAmount / this instance.PayablesInvoiceTaxRel.TaxDetails.TaxableAmount)
										else
											invoked.TaxDetails.TaxableAmount		= TaxableAmount									
											invoked.TaxDetails.CalculatedTaxRate 	= (LocalCalculatedTaxAmount / TaxableAmount)	

										if (PrmPayablesInvoice.Status.Amended
										and IsLandedTaxCode)
											invoked.TaxDetails.DistributionAccount	= DistributionAccount
									LocalTaxAmount	= LocalCalculatedTaxAmount		


							



							if (PayablesInvoiceTaxRel.TaxDetails.CalculatedTaxAmount entered)	

								invoke CreateLandedTaxDistribution 
									invoked.PrmOriginalDistribution	= PayablesInvoiceDistribution
									invoked.PrmLocalTaxSeqNbr		= 1
									invoked.PrmTaxAccount			= PayablesInvoiceTaxRel.TaxDetails.DistributionAccount
									invoked.PrmTaxAmount		= PayablesInvoiceTaxRel.TaxDetails.CalculatedTaxAmount
									if (PayablesInvoiceTaxRel.TaxDetails.CalculatedTaxRate entered)							
										invoked.PrmTaxRate			= PayablesInvoiceTaxRel.TaxDetails.CalculatedTaxRate	
									else
										if (PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate entered)							
											invoked.PrmTaxRate			= PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate		
									if (PrmLocalPTXTaxAmount not entered)
										invoked.PrmTaxTypeOverride	= "A"
									invoked.PrmTaxJurisdiction		= PayablesInvoiceTaxRel.TaxDetails.TaxingJurisdiction
									invoked.PrmInfoMessage			= PayablesInvoiceTaxRel.TaxDetails.InformationMessage
									invoked.PrmSentToTaxEngine		= PayablesInvoiceTaxRel.TaxDetails.SentToTaxEngine								
								
								LocalRunningTaxable		+= TaxableAmount		

							else		


								if (PayablesInvoiceTaxRel.TaxDetails.CalculatedTaxAmount not entered
								and PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount entered)
									SetLocalReturnedTaxAmount = PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount
									round SetLocalReturnedTaxAmount to nearest DerivedRoundTo

									invoke CreateLandedTaxDistribution 
										invoked.PrmOriginalDistribution	= PayablesInvoiceDistribution
										invoked.PrmLocalTaxSeqNbr		= 1
										invoked.PrmTaxAccount			= PayablesInvoiceTaxRel.TaxDetails.DistributionAccount
										invoked.PrmTaxAmount			= SetLocalReturnedTaxAmount
										invoked.PrmTaxRate				= PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate
										if (PrmLocalPTXTaxAmount not entered)
											invoked.PrmTaxTypeOverride	= "A"
										invoked.PrmTaxJurisdiction		= PayablesInvoiceTaxRel.TaxDetails.TaxingJurisdiction
										invoked.PrmInfoMessage			= PayablesInvoiceTaxRel.TaxDetails.InformationMessage
										invoked.PrmSentToTaxEngine		= PayablesInvoiceTaxRel.TaxDetails.SentToTaxEngine
									
									LocalRunningTaxable		+= TaxableAmount		





					else

						if (PayablesInvoice.CallVertexByDocument)		
							initialize LocalRunningTaxSum
							SetLocalReturnedTaxAmount 	= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount	
							round SetLocalReturnedTaxAmount to nearest DerivedRoundTo
							LocalSetLineTaxablePercent	= (PayablesInvoiceTaxRel.TaxDetails.TaxableAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount)	
							LocalExpenseLineTaxAmount 	= SetLocalReturnedTaxAmount * LocalSetLineTaxablePercent	
							if (DerivedTaxMethodInvOrAcc.Invoiced)
								LocalPortionOfTaxDifference	= SetLocalTaxDifference * LocalSetLineTaxablePercent	



							for each PayablesInvoice.TaxLineItemRel	

								if (each.RelatedLineItemUniqueId = UniqueID)	
									LocalLastTaxDetailOutSeq	= each.last TaxDetailOutRel.TaxDetailOut.Sequence

									for each each.TaxDetailOutRel

										LocalSetDetailLineTaxablePercent	= (each.TaxAmount / LocalExpenseLineTaxAmount)	
										LocalProratedTaxAmount	= (LocalPortionOfTaxDifference * LocalSetDetailLineTaxablePercent)
										LocalTaxAmount	= each.TaxAmount + LocalProratedTaxAmount
										LocalRunningTaxSum += LocalProratedTaxAmount




										invoke CreateLandedTaxDistribution 
											invoked.PrmOriginalDistribution	= PayablesInvoiceDistribution
											invoked.PrmLocalTaxSeqNbr		= 1
											invoked.PrmTaxAccount			= PayablesInvoiceTaxRel.TaxDetails.DistributionAccount
											invoked.PrmTaxJurisdiction		= PayablesInvoiceTaxRel.TaxDetails.TaxingJurisdiction
											if (each.TaxDetailOut.Sequence != LocalLastTaxDetailOutSeq)
												invoked.PrmTaxAmount		= LocalTaxAmount
											else
												invoked.PrmTaxAmount		= (LocalTaxAmount + (LocalPortionOfTaxDifference - LocalRunningTaxSum))
											invoked.PrmTaxRate				= (LocalTaxAmount / each.TaxableAmount)


						


		OneSourceResetDistributions is a Set Action
			restricted
			default label is untranslatable
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    TaxCode entered)

			Action Rules
				Empty Set Rules


				    invoke FastUpdate PrmPayablesInvoice
				        initialize invoked.BackgroundProcessing			
	
				Set Rules
					Exit Rules


						invoke ResetAmounts PrmPayablesInvoice

						invoke UpdateErrorRecordsAction PrmPayablesInvoice
						
				Instance Rules

					invoke Delete 

					if (AddOnCharge entered)
						invoke FastUpdate PayablesInvoiceAddOnChargeRel
							initialize invoked.TaxAmount
					else
					if (PayablesInvoiceDetail entered)
						invoke FastUpdate PayablesInvoiceDetail
							initialize invoked.TaxAmount

		ProcessOneSourceForMatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice

			Local Fields
				LastDistribution				is like PayablesInvoiceDistribution
				SetDoShortPayProcess			is Boolean
				OneSourceEnteredTaxAmount		is a CurrencyAmount
				OneSourceReturnedTaxAmount		is a CurrencyAmount
				OneSourceReturnedTaxRate		is like ChrgRate
				OneSourceCalculatedTaxAmount	is a CurrencyAmount
				OneSourceCalculatedTaxRate		is like ChrgRate

				SetLocalReturnedTaxAmount			is a InternationalAmount
				SetLocalTaxDifference				is like InternationalAmount

				SumOfCalculatedTaxAmount		is an InternationalAmount
				SumOfLineTaxableAmount			is an InternationalAmount

				MiscAOCPurchaseOrderLine		is a PurchaseOrderLine view
				MiscAOCExtendedAmount			is an InternationalAmount
				
				LocalSetTaxableAmount			is a CurrencyAmount
				
				OneSourceMatchWork				is a MatchWork view
				OneSourceAutoMatchError			is Alpha 200

				SetTaxError						is Boolean
						
			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    TaxCode not entered)

			Rule Blocks

				OSPopulateCalcTaxInputFields

					initialize CalculateTax
					CalculateTax.CallingModule				= "Payables_Invoice"
					CalculateTax.System						= "AP"
					CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CalculateTax.TaxEntity					= GeneralLedgerCompanyRel.AccountingEntity
					CalculateTax.InvoiceCompany				= Company
					CalculateTax.VendorGrp					= Company.VendorGroup
					CalculateTax.ProcessLevel				= PayablesInvoice.ProcessLevel
					CalculateTax.Vendor						= Vendor
					CalculateTax.VendorCustomerName			= Vendor.VendorName
					CalculateTax.VoucherNumber				= PayablesInvoice.VoucherNumber
					CalculateTax.Invoice					= PayablesInvoice.Invoice
					CalculateTax.Suffix						= PayablesInvoice.Suffix
					CalculateTax.CancelSequence				= PayablesInvoice.CancelSequence
					CalculateTax.InvoiceDate				= PayablesInvoice.InvoiceDate
					CalculateTax.ShipmentDate				= PayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate				= PayablesInvoice.InvoiceDate
					CalculateTax.TaxDate					= PayablesInvoice.InvoiceDate
					CalculateTax.TaxPointDate				= PayablesInvoice.DerivedTaxPointDate	
					
				   	CalculateTax.TransactionSource			= "I"	
					CalculateTax.DeliveryTerms          	= PayablesInvoice.ShipTerm
					CalculateTax.VATRegistrationCountry    	= TaxEntityRel.VATRegistrationCountry 			
					CalculateTax.VATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber			
					if (PayablesInvoice.ProcessLevel.TaxCode entered)	
						if (PayablesInvoice.RemitToCode.TaxCode entered)							
							CalculateTax.FromTaxCode		= PayablesInvoice.RemitToCode.TaxCode	
						else														
							CalculateTax.FromTaxCode		= Vendor.TaxCode		
					

					if (PayablesInvoice.RemitToCode.CurrentAddressRel exists	
					and PayablesInvoice.RemitToCode.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= PayablesInvoice.RemitToCode.CurrentAddressRel.PostalAddress
						CalculateTax.FromVATRegistrationCountry 	= PayablesInvoice.RemitToCode.VATRegistrationCountry			
						CalculateTax.FromVATRegistrationNumber		= PayablesInvoice.RemitToCode.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress				= Vendor.CurrentAddressRel.PostalAddress		
						CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
						CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					
					
					
					CalculateTax.DefaultFilingCurrency 			= Company.Currency 
					CalculateTax.CurrencyRate					= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		
					CalculateTax.TransactionCurrency 			= PayablesInvoice.InvoiceCurrency								
					if (PayablesInvoice.PayCurrency entered)
						CalculateTax.BaseCurrency 				= PayablesInvoice.PayCurrency					
					else	
						CalculateTax.BaseCurrency 				= PayablesInvoice.PayGroup.BaseCurrency
					if (CalculateTax.BaseCurrency not entered)											
						CalculateTax.BaseCurrency				= PayablesInvoice.ProcessLevel.PayGroup.BaseCurrency	
					CalculateTax.ReceiptSite					= PayablesInvoice.ProcessLevel							
					CalculateTax.UniqueIdOfRelatedObject		= PayablesInvoice.UniqueID								
					CalculateTax.UserElementLevel			= blank
					CalculateTax.CreateOutputUserFieldFile	= true
									

					if (PayablesInvoice.Location.PostalAddress entered)									
						CalculateTax.PostalAddress 			= PayablesInvoice.Location.PostalAddress	
					else
						if (PayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.PostalAddress		= PayablesInvoice.ProcessLevel.PostalAddress
						else
							CalculateTax.PostalAddress		= PrmPayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress	
				

					if (PayablesInvoice.BillToProcessLevel.PostalAddress entered)
						CalculateTax.BuyerAdminDestAddress	= PayablesInvoice.BillToProcessLevel.PostalAddress		
					else
						if (PayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.BuyerAdminDestAddress	= PayablesInvoice.ProcessLevel.PostalAddress		
						else
							CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress	
					

					if (PayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress	= PayablesInvoice.PurchaseFromLocation.VendorAddress 	
					else	
						CalculateTax.FromPostalAddress	= Vendor.VendorAddress
					

					if (PayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress			= PayablesInvoice.BillFromLocation.VendorAddress	 	
					else
						CalculateTax.POAAddress			= Vendor.VendorAddress	


					if (PayablesInvoice.IsCreditInvoice)			
						CalculateTax.InvoicedOrCreditMemo	= "C"	
					else											
						CalculateTax.InvoicedOrCreditMemo	= "I"	

				OSPopulateCalculateTaxDistributionData
				
					UserElementGroup.UserElement[1].Number 		= 1
					UserElementGroup.UserElement[1].Name		= "ATTRIBUTE1"
					UserElementGroup.UserElement[1].Value		= "INVC"
	
					UserElementGroup.UserElement[2].Number 		= 2
					UserElementGroup.UserElement[2].Name		= "ATTRIBUTE3"
					UserElementGroup.UserElement[2].Value		= PrmPayablesInvoice.FirstPurchaseOrder		
	
					if  (PrmPayablesInvoice.FirstPurchaseOrder.AribaPOType entered)
						UserElementGroup.UserElement[3].Number 	= 3
						UserElementGroup.UserElement[3].Name	= "ATTRIBUTE4"
						UserElementGroup.UserElement[3].Value	= PrmPayablesInvoice.FirstPurchaseOrder.AribaPOType		

					CalculateTax.SabrixUserElement				= UserElementGroup	
					CalculateTax.CreateOutputUserFieldFile		= true
			
					CalculateTax.ReceiptSite					= PayablesInvoice.ProcessLevel							
					CalculateTax.UniqueIdOfRelatedObject		= PayablesInvoice.UniqueID								
					CalculateTax.UserElementLevel				= blank
					CalculateTax.CreateOutputUserFieldFile		= true
									
					if (PayablesInvoice.Location.PostalAddress entered)									
						CalculateTax.PostalAddress 			= PayablesInvoice.Location.PostalAddress	
					else
						if (PayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.PostalAddress		= PayablesInvoice.ProcessLevel.PostalAddress	
						else
							CalculateTax.PostalAddress		= AccountingEntityRel.AddressCode.PostalAddress	
							

					if (PayablesInvoice.BillToProcessLevel.PostalAddress entered)
						CalculateTax.BuyerAdminDestAddress	= PayablesInvoice.BillToProcessLevel.PostalAddress		
					else
						if (PayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.BuyerAdminDestAddress	= PayablesInvoice.ProcessLevel.PostalAddress		
						else
							CalculateTax.BuyerAdminDestAddress	= AccountingEntityRel.AddressCode.PostalAddress	
							

					if (PayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress	= PayablesInvoice.PurchaseFromLocation.VendorAddress 	
					else	
						CalculateTax.FromPostalAddress	= Vendor.VendorAddress
					

					if (PayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress			= PayablesInvoice.BillFromLocation.VendorAddress	 	
					else
						CalculateTax.POAAddress			= Vendor.VendorAddress	



					initialize CalculateTax.TaxAmount
					CalculateTax.Function	= "C"

		 			CalculateTax.CommodityCode				= ICNCode
					CalculateTax.TaxCode					= TaxCode
					CalculateTax.TaxableAmount				= TaxableAmount

					if  (AddOnCharge entered)

						CalculateTax.BypassEditing			= true  
						CalculateTax.TaxCode				= PayablesInvoiceAddOnChargeRel.TaxCode
						CalculateTax.TaxableAmount			= DistributionAmount.CurrencyAmount
						CalculateTax.InvoiceAmount			= DistributionAmount.CurrencyAmount
						CalculateTax.Description			= AddOnCharge.Description                                    
						CalculateTax.ItemNumber				= AddOnCharge
						CalculateTax.UniqueLineNumber		= PayablesInvoiceAddOnChargeRel.UniqueID
						initialize CalculateTax.CommodityCode			
	
						if  (PurchaseOrderLine entered)
							CalculateTax.PostalAddress		= PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder
							CalculateTax.EAMCommodityCode	= PurchaseOrderLine.DerivedCommodityCodeNoDash
							CalculateTax.LineNumber			= PurchaseOrderLine
						else
							CalculateTax.PostalAddress		= MiscAOCPurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder
							CalculateTax.EAMCommodityCode	= MiscAOCPurchaseOrderLine.DerivedCommodityCodeNoDash
							CalculateTax.LineNumber			= MiscAOCPurchaseOrderLine.PurchaseOrderLine
					else
					if (PayablesInvoiceDetail entered)
	
						CalculateTax.BypassEditing				= true  
						CalculateTax.TaxCode					= PayablesInvoiceDetail.TaxCode
						CalculateTax.PostalAddress				= PayablesInvoiceDetail.InventoryLocationRel.PostalAddressForPurchaseOrder
						CalculateTax.EAMCommodityCode			= PayablesInvoiceDetail.DerivedCommodityCodeNoDash
						initialize CalculateTax.CommodityCode			
						CalculateTax.TaxableAmount				= DistributionAmount.CurrencyAmount
						CalculateTax.InvoiceAmount				= DistributionAmount.CurrencyAmount
						CalculateTax.Description				= PayablesInvoiceDetail.ItemDescription                                    
						CalculateTax.ItemNumber					= PayablesInvoiceDetail.Item
						CalculateTax.LineNumber					= PayablesInvoiceDetail.PurchaseOrderLine
						CalculateTax.UniqueLineNumber			= PayablesInvoiceDetail.UniqueID

 								
			Action Rules
				Empty Set Rules

					initialize SetTaxError
					initialize OneSourceAutoMatchError


					invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
						invoked.TaxCode					= PrmPayablesInvoice.TaxCode
						invoked.EnteredInvoiceAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						invoked.EnteredTaxAmount		= PrmPayablesInvoice.TaxAmount	
						invoked.EnteredTaxableAmount	= PrmPayablesInvoice.TaxableAmount

						if (PrmPayablesInvoice.TaxAmount entered
						and PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
							invoked.TaxMethod			= "I"
						else
							if (PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
								invoked.TaxMethod		= "A"
		
						invoked.TaxPointDate			= PrmPayablesInvoice.DerivedTaxPointDate

					if (PrmFromRecon)
					
						OneSourceMatchWork = PrmReconMatchWork.MatchWork
						
						invoke FastUpdate PrmPayablesInvoice
							invoked.BackgroundProcessing = 3 

					else
						if  (PrmPayablesInvoice.MatchReconQueueRel exists 
						and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
							invoke Purge PrmPayablesInvoice.MatchWorkRel


						invoke CreateOnly MatchWork
							resume on error							
							assign result to OneSourceMatchWork
							invoked.Company						= PrmCompany
							invoked.PayablesInvoice				= PrmPayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"
							invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
							invoked.BypassValidateMatchInvoiceBalance = true						
							if (SetTaxError)
								invoked.VerifyMatchMessage      = OneSourceAutoMatchError

						if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
							invoke CreateForBudgetProcessing MatchReconQueue
								invoked.Company				= PrmCompany
								invoked.PayablesInvoice		= PrmPayablesInvoice
								invoked.MatchWork			= OneSourceMatchWork.MatchWork
						else
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.MatchWork			= OneSourceMatchWork.MatchWork




					OneSourceEnteredTaxAmount			= PrmPayablesInvoice.TaxAmount
					

					if (!PrmPayablesInvoice.CreditForRebill)
						for each PrmPayablesInvoice.PayablesInvoiceDistributionRel
							if (each.IsTaxDistribution)
								invoke Delete each
	



					LastDistribution	= PrmPayablesInvoice.last PayablesInvoiceDistributionRel.PayablesInvoiceDistribution
	
					initialize SumOfCalculatedTaxAmount
					initialize SumOfLineTaxableAmount
						

					
					if (PrmPayablesInvoice.TaxableAmount entered)
						LocalSetTaxableAmount	= PrmPayablesInvoice.TaxableAmount
					else
					if (PrmPayablesInvoice.DerivedTaxMethodInvOrAcc.Accrued)
						LocalSetTaxableAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
					else
						LocalSetTaxableAmount	= (PrmPayablesInvoice.InvoiceAmount.CurrencyAmount - PrmPayablesInvoice.TaxAmount)




					if (PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel exists)

						initialize MiscAOCExtendedAmount


					
						for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
							for each each.PurchaseOrder.PurchaseOrderLineRel
								if (each.ExtendedAmount >= MiscAOCExtendedAmount)
									MiscAOCExtendedAmount				= each.ExtendedAmount
									MiscAOCPurchaseOrderLine			= each.PurchaseOrderLine

	
					if (!SetTaxError)

						if  (OneSourceAutoMatchError not entered)

							invoke UpdateErrorRecordsAction PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message

						if  (OneSourceAutoMatchError not entered)
							if (PrmPayablesInvoice.InvoiceErrorsExists)
								OneSourceAutoMatchError = "InvoiceOutOfBalance:InvoiceAmount: " + PrmPayablesInvoice.InvoiceAmount.CurrencyAmount + "GoodsAmount: " + PrmPayablesInvoice.MatchAmount + "TaxAmount: " + PrmPayablesInvoice.TaxAmount + "DetailTaxAmount: " + PrmPayablesInvoice.POTaxAmount

					if (!SetTaxError
					and !PrmFromRecon)

						if  (OneSourceAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message


	
						if  (!PrmFromRecon)
							if  (OneSourceAutoMatchError not entered)

								invoke BatchMatch OneSourceMatchWork.MatchWork
									resume on error							
						   				OneSourceAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= OneSourceMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult


					if  (SetTaxError entered
					or   OneSourceAutoMatchError entered)

						invoke Update OneSourceMatchWork.MatchWork
							invoked.VerifyMatchMessage = OneSourceAutoMatchError

						if (!PrmPayablesInvoice.CreditForRebill)
							if (PrmPayablesInvoice.HasTaxDistribution)
						

								invoke OneSourceResetDistributions PayablesInvoiceDistribution
									invoked.PrmCompany = PrmCompany
									invoked.PrmPayablesInvoice = PrmPayablesInvoice
							else
							if (PrmPayablesInvoice.BackgroundProcessing entered)
								invoke ResetAmounts PrmPayablesInvoice



						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= OneSourceAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update OneSourceMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
					else
					if  (PrmFromRecon)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch PrmReconMatchWork.MatchWork
					
				Set Rules
					Entrance Rules
						initialize SetTaxError
						initialize OneSourceAutoMatchError


						invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
							invoked.TaxCode					= PrmPayablesInvoice.TaxCode
							invoked.EnteredInvoiceAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.EnteredTaxAmount		= PrmPayablesInvoice.TaxAmount	
							invoked.EnteredTaxableAmount	= PrmPayablesInvoice.TaxableAmount

							if (PrmPayablesInvoice.TaxAmount entered
							and PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
								invoked.TaxMethod			= "I"
							else
								if (PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
									invoked.TaxMethod		= "A"
			
							invoked.TaxPointDate			= PrmPayablesInvoice.DerivedTaxPointDate

						if (PrmFromRecon)
						
							OneSourceMatchWork = PrmReconMatchWork.MatchWork
							
							invoke FastUpdate PrmPayablesInvoice
								invoked.BackgroundProcessing = 3 

						else
							if  (PrmPayablesInvoice.MatchReconQueueRel exists 
							and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
								invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
								invoke Purge PrmPayablesInvoice.MatchWorkRel
	

							invoke CreateOnly MatchWork
								resume on error							
								assign result to OneSourceMatchWork
								invoked.Company						= PrmCompany
								invoked.PayablesInvoice				= PrmPayablesInvoice
								invoked.MatchPoint					= "1"
								if (invoking action like "*Batch*")
									invoked.ProcessMode				= "B"
								else
									invoked.ProcessMode				= "O"
								invoked.DocumentType				= "I"
								invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
								invoked.BypassValidateMatchInvoiceBalance = true						
								if (SetTaxError)
									invoked.VerifyMatchMessage      = OneSourceAutoMatchError
	
							if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
								invoke CreateForBudgetProcessing MatchReconQueue
									invoked.Company				= PrmCompany
									invoked.PayablesInvoice		= PrmPayablesInvoice
									invoked.MatchWork			= OneSourceMatchWork.MatchWork
							else
								invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
									invoked.MatchWork			= OneSourceMatchWork.MatchWork




						OneSourceEnteredTaxAmount			= PrmPayablesInvoice.TaxAmount
						

						if (!PrmPayablesInvoice.CreditForRebill)
							for each PrmPayablesInvoice.PayablesInvoiceDistributionRel
								if (each.IsTaxDistribution)
									invoke Delete each
		



						LastDistribution	= PrmPayablesInvoice.last PayablesInvoiceDistributionRel.PayablesInvoiceDistribution
		
						initialize SumOfCalculatedTaxAmount
						initialize SumOfLineTaxableAmount
							

						
						if (PrmPayablesInvoice.TaxableAmount entered)
							LocalSetTaxableAmount	= PrmPayablesInvoice.TaxableAmount
						else
						if (PrmPayablesInvoice.DerivedTaxMethodInvOrAcc.Accrued)
							LocalSetTaxableAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						else
							LocalSetTaxableAmount	= (PrmPayablesInvoice.InvoiceAmount.CurrencyAmount - PrmPayablesInvoice.TaxAmount)




						if (PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel exists)

							initialize MiscAOCExtendedAmount


						
							for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
								for each each.PurchaseOrder.PurchaseOrderLineRel
									if (each.ExtendedAmount >= MiscAOCExtendedAmount)
										MiscAOCExtendedAmount				= each.ExtendedAmount
										MiscAOCPurchaseOrderLine			= each.PurchaseOrderLine




					Exit Rules



		
						if (!SetTaxError)

							if  (OneSourceAutoMatchError not entered)
								invoke UpdateErrorRecordsAction PrmPayablesInvoice
									resume on error							
						   				OneSourceAutoMatchError = error message

	
							if  (OneSourceAutoMatchError not entered)
								if (PrmPayablesInvoice.InvoiceErrorsExists)
									OneSourceAutoMatchError = "InvoiceOutOfBalance:InvoiceAmount: " + PrmPayablesInvoice.InvoiceAmount.CurrencyAmount + "GoodsAmount: " + PrmPayablesInvoice.MatchAmount + "TaxAmount: " + PrmPayablesInvoice.TaxAmount + "DetailTaxAmount: " + PrmPayablesInvoice.POTaxAmount

						if (!SetTaxError
						and !PrmFromRecon)
	
							if  (OneSourceAutoMatchError not entered)
								invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
									resume on error							
						   				OneSourceAutoMatchError = error message

	

		
							if  (!PrmFromRecon)
								if  (OneSourceAutoMatchError not entered)

									invoke BatchMatch OneSourceMatchWork.MatchWork
										resume on error							
							   				OneSourceAutoMatchError = error message
										invoked.PrmCompany 			= PrmCompany
										invoked.PrmInvoice 			= PrmPayablesInvoice
										invoked.PrmMatchWork 		= OneSourceMatchWork.MatchWork
										invoked.PrmAutoMatchResult	= PrmAutoMatchResult

	
						if  (SetTaxError entered
						or   OneSourceAutoMatchError entered)

							invoke Update OneSourceMatchWork.MatchWork
								invoked.VerifyMatchMessage = OneSourceAutoMatchError

							if (!PrmPayablesInvoice.CreditForRebill)
								if (PrmPayablesInvoice.HasTaxDistribution)
							

									invoke OneSourceResetDistributions PayablesInvoiceDistribution
										invoked.PrmCompany = PrmCompany
										invoked.PrmPayablesInvoice = PrmPayablesInvoice
								else
								if (PrmPayablesInvoice.BackgroundProcessing entered)
									invoke ResetAmounts PrmPayablesInvoice



							if (PrmAutoMatchResult entered)


								LocalCompany			= PrmCompany
								LocalPayablesInvoice	= PrmPayablesInvoice
								LocalAutoMatchResult 	= PrmAutoMatchResult

								invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
									invoked.ErrorMessage 				= OneSourceAutoMatchError
									invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

								invoke Update OneSourceMatchWork.MatchWork
									initialize invoked.LinkedAutoMatchResult
							else
								invoke FastUpdate PrmPayablesInvoice
									initialize invoked.BackgroundProcessing
						else
						if  (PrmFromRecon)
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.View = 3 
								
							invoke FinishMatch PrmReconMatchWork.MatchWork

				Instance Rules




				    if  (DistributionAmount.CurrencyAmount = 0)
				        NextSentence = true
				    else
					if  (!SetTaxError
					and  !PayablesInvoice.CreditForRebill)

						invoke CreateTaxLineItem 
							if (AddOnCharge entered
							and PurchaseOrderLine not entered)
								invoked.PrmPurchaseOrder = MiscAOCPurchaseOrderLine.PurchaseOrder
								invoked.PrmPurchaseOrderLine = MiscAOCPurchaseOrderLine.PurchaseOrderLine
	

						include OSPopulateCalcTaxInputFields
						include OSPopulateCalculateTaxDistributionData
	
						if (BypassOneSourceRel exists
						and BypassOneSourceTaxRateRel exists)
							CalculateTax.OutputTaxRate			= BypassOneSourceTaxRateRel.Rate
							CalculateTax.OutputTotalTaxAmount	= DistributionAmount.CurrencyAmount * CalculateTax.OutputTaxRate

						else							
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax




						if  (CalculateTax.OutputErrorNumber entered)
							SetTaxError 								= true
							OneSourceAutoMatchError 					= CalculateTax.OutputErrorText 
							if  (PrmAutoMatchResult entered)
								LocalAutoMatchResult = PrmAutoMatchResult
								invoke UpdateFromMatch AutoMatchResultInvoiceRel
									invoked.ErrorMessage 				= CalculateTax.OutputErrorText 
									invoked.SystemOwner					= 1
									invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
						else
							if (PayablesInvoice.OneSourcePayAsBilled = "Y") 
								OneSourceReturnedTaxAmount = ((DistributionAmount.CurrencyAmount / LocalSetTaxableAmount) * OneSourceEnteredTaxAmount)
								OneSourceReturnedTaxRate	= (((DistributionAmount.CurrencyAmount / LocalSetTaxableAmount) * OneSourceEnteredTaxAmount) / DistributionAmount.CurrencyAmount)
							else




								OneSourceReturnedTaxAmount	= CalculateTax.OutputTotalTaxAmount
								OneSourceReturnedTaxRate	= CalculateTax.OutputTaxRate




							initialize OneSourceCalculatedTaxAmount
							initialize OneSourceCalculatedTaxRate
							
							SetLocalReturnedTaxAmount = OneSourceReturnedTaxAmount
							round SetLocalReturnedTaxAmount to nearest DerivedRoundTo
							
							SumOfCalculatedTaxAmount += SetLocalReturnedTaxAmount 
							if (OneSourceReturnedTaxAmount entered)
								SumOfLineTaxableAmount	 += DistributionAmount.CurrencyAmount
				
		

							invoke RemoveTaxLineItem 
		
							if (PayablesInvoice.OneSourcePayAsBilled = "Y") 
								SetLocalTaxDifference  = SumOfCalculatedTaxAmount - OneSourceEnteredTaxAmount
								if (SetLocalTaxDifference < 1 and SetLocalTaxDifference > -1)
									OneSourceReturnedTaxAmount -= SetLocalTaxDifference

							if  (PayablesInvoice.UsePayablesTaxTolerance
							and  PayablesInvoiceDistribution = LastDistribution)

								PayablesTaxTolerance.InvoiceTaxAmount			= OneSourceEnteredTaxAmount
								PayablesTaxTolerance.CalculatedTaxAmount		= SumOfCalculatedTaxAmount
								if (IsUseTaxCodeAccounts)
									PayablesTaxTolerance.OverchargeLimitAmount	= EntityTaxCodeRel.TaxToleranceAmount
								else
									PayablesTaxTolerance.OverchargeLimitAmount	= InvoiceTaxEntityRel.TaxToleranceAmount
								PayablesTaxTolerance.AllowZeroTaxOverride		= true	
								
								LocalPayablesTaxTolerance = PayablesTaxTolerance.VerifyTaxWithinTolerance	
							else
								PayablesTaxTolerance.InTolerance			= true








							if  (PayablesInvoice.OneSourcePayAsBilled entered
							or  (PayablesInvoice.OneSourceDirectPay not entered 
							and  PayablesInvoice.OneSourcePayAsBilled not entered 
							and  PayablesTaxTolerance.InTolerance) 
							or   !Company.ShortPayAllowed
							or  (SumOfCalculatedTaxAmount not entered
							and  OneSourceEnteredTaxAmount not entered))



								invoke Update PayablesTaxDetailRel
									invoked.TaxingJurisdiction	=	CalculateTax.TaxingJurisdiction
									invoked.InformationMessage	=	CalculateTax.OneSourceInformationMessage
									invoked.SentToTaxEngine		=	not CalculateTax.NotSentToSabrix
									invoked.ShipToLocation		= 	PayablesInvoice.Location
		
								if (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)

									NextSentence = true					
								else
								if (PayablesInvoice.OneSourcePayAsBilled = "Y" 
								or  CalculateTax.LocalExcludeFromSabrixCall)

									NextSentence = true					
								else
								if (OneSourceReturnedTaxRate entered
								and PayablesInvoiceDistribution != LastDistribution)

									OneSourceCalculatedTaxAmount = ((DistributionAmount.CurrencyAmount / LocalSetTaxableAmount) * OneSourceEnteredTaxAmount)
									OneSourceCalculatedTaxRate	= (OneSourceCalculatedTaxAmount / DistributionAmount.CurrencyAmount)
								else
								if (OneSourceEnteredTaxAmount not entered)

									NextSentence = true					
								else
								if  (PayablesInvoiceDistribution = LastDistribution)

									OneSourceCalculatedTaxAmount = (OneSourceEnteredTaxAmount - PayablesInvoice.TransientActualTaxAmountSum)	
									OneSourceCalculatedTaxRate	= (OneSourceCalculatedTaxAmount / DistributionAmount.CurrencyAmount)
								

	

								if (SetDoShortPayProcess)
									OneSourceAutoMatchError 					= OneSourceMixedFlagMsg 
									if  (PrmAutoMatchResult entered)
										LocalAutoMatchResult = PrmAutoMatchResult
										invoke UpdateFromMatch AutoMatchResultInvoiceRel
											invoked.ErrorMessage 				= OneSourceMixedFlagMsg
											invoked.SystemOwner					= 1
											invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
								else
								if (OneSourceCalculatedTaxAmount != 0)

									invoke CreateLandedTaxDistribution 
										invoked.PrmOriginalDistribution		= PayablesInvoiceDistribution
										invoked.PrmLocalTaxSeqNbr			= 1								
										invoked.PrmTaxAmount				= OneSourceCalculatedTaxAmount
										invoked.PrmTaxRate					= OneSourceCalculatedTaxRate
										if (PayablesInvoice.TaxAmount not entered)			
											invoked.PrmTaxTypeOverride		= "A"		
										invoked.PrmTaxJurisdiction			= CalculateTax.TaxingJurisdiction
										invoked.PrmInfoMessage				= CalculateTax.OneSourceInformationMessage	
										invoked.PrmSentToTaxEngine			= not CalculateTax.NotSentToSabrix		
								else
								if (OneSourceCalculatedTaxAmount not entered						
								and OneSourceReturnedTaxAmount entered)							

									SetLocalReturnedTaxAmount = OneSourceReturnedTaxAmount
									round SetLocalReturnedTaxAmount to nearest DerivedRoundTo
			
									invoke CreateLandedTaxDistribution 							
										invoked.PrmOriginalDistribution		= PayablesInvoiceDistribution		
										invoked.PrmLocalTaxSeqNbr			= 1									
										invoked.PrmTaxAmount				= SetLocalReturnedTaxAmount 
										invoked.PrmTaxRate					= OneSourceReturnedTaxRate		
										if (PayablesInvoice.TaxAmount not entered)			
											invoked.PrmTaxTypeOverride		= "A"		
										invoked.PrmTaxJurisdiction			= CalculateTax.TaxingJurisdiction
										invoked.PrmInfoMessage				= CalculateTax.OneSourceInformationMessage	
										invoked.PrmSentToTaxEngine			= not CalculateTax.NotSentToSabrix		
		
							else



								

		
								if (!PayablesInvoice.DoShortPayProcess
								and !SetDoShortPayProcess
								and PayablesInvoiceTaxHeaderRel.EnteredTaxAmount entered)


									SetDoShortPayProcess = true
									invoke FastUpdate PayablesInvoice
										invoked.DoShortPayProcess	= true
						
									if  (OneSourceEnteredTaxAmount entered
									and  PayablesInvoice.OneSourceDirectPay entered
									and  PayablesInvoice.OneSourcePayAsBilled not entered)  
										invoke CreateShortPayCommentAction PayablesInvoice
									else
									if ((OneSourceReturnedTaxRate > 0		
									and  OneSourceEnteredTaxAmount entered)									
									or  (OneSourceEnteredTaxAmount entered							
									and  SumOfCalculatedTaxAmount entered					
									and !PayablesTaxTolerance.InTolerance))					
										invoke CreateShortPayCommentAction PayablesInvoice
									
									invoke OneSourceShortPayUpdate PrmPayablesInvoice
					
								invoke Update PayablesTaxDetailRel
									invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction
									invoked.InformationMessage				= CalculateTax.OneSourceInformationMessage	
									invoked.SentToTaxEngine					= not CalculateTax.NotSentToSabrix		
									invoked.ShipToLocation					= PayablesInvoice.Location
					
								if (OneSourceReturnedTaxRate > 0)

									invoke CreateLandedTaxDistribution 
										invoked.PrmOriginalDistribution		= PayablesInvoiceDistribution
										invoked.PrmLocalTaxSeqNbr			= 1		
										invoked.PrmTaxAmount				= OneSourceReturnedTaxAmount
										invoked.PrmTaxRate					= OneSourceReturnedTaxRate
										if  (PayablesInvoice.OneSourceDirectPay entered	
										and  PayablesInvoice.OneSourcePayAsBilled not entered)
											invoked.PrmTaxTypeOverride	= "A"
										invoked.PrmTaxJurisdiction			= CalculateTax.TaxingJurisdiction
										invoked.PrmInfoMessage				= CalculateTax.OneSourceInformationMessage
										invoked.PrmSentToTaxEngine			= not CalculateTax.NotSentToSabrix	


		LoadOneSourceForMatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice

			Local Fields

				MiscAOCPurchaseOrderLine		is a PurchaseOrderLine view
				MiscAOCExtendedAmount			is an InternationalAmount
				OneSourceMatchWork				is a MatchWork view
						
			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    TaxCode not entered)

			Action Rules
				Empty Set Rules

					if (PrmAutoMatchResult entered)

						LocalCompany			= PrmCompany
						LocalPayablesInvoice	= PrmPayablesInvoice
						LocalAutoMatchResult 	= PrmAutoMatchResult

						invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
							invoked.ErrorMessage 				= "CannotMatch;NoDistributions"
							invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
					else
						invoke FastUpdate PrmPayablesInvoice
							initialize invoked.BackgroundProcessing

				Set Rules
					Entrance Rules


						invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
							invoked.TaxCode					= PrmPayablesInvoice.TaxCode
							invoked.EnteredInvoiceAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.EnteredTaxAmount		= PrmPayablesInvoice.TaxAmount	
							invoked.EnteredTaxableAmount	= PrmPayablesInvoice.TaxableAmount

							if (PrmPayablesInvoice.TaxAmount entered
							and PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
								invoked.TaxMethod			= "I"
							else
								if (PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
									invoked.TaxMethod		= "A"
			
							invoked.TaxPointDate			= PrmPayablesInvoice.DerivedTaxPointDate

						if (PrmFromRecon)
						
							OneSourceMatchWork = PrmReconMatchWork.MatchWork
							
							invoke FastUpdate PrmPayablesInvoice
								invoked.BackgroundProcessing = 3 

						else
							if  (PrmPayablesInvoice.MatchReconQueueRel exists 
							and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
								invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
								invoke Purge PrmPayablesInvoice.MatchWorkRel
	

							invoke CreateOnly MatchWork
								resume on error							
								assign result to OneSourceMatchWork
								invoked.Company						= PrmCompany
								invoked.PayablesInvoice				= PrmPayablesInvoice
								invoked.MatchPoint					= "1"
								if (invoking action like "*Batch*")
									invoked.ProcessMode				= "B"
								else
									invoked.ProcessMode				= "O"
								invoked.DocumentType				= "I"
								invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
								invoked.BypassValidateMatchInvoiceBalance = true						
	
							if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
								invoke CreateForBudgetProcessing MatchReconQueue
									invoked.Company				= PrmCompany
									invoked.PayablesInvoice		= PrmPayablesInvoice
									invoked.MatchWork			= OneSourceMatchWork.MatchWork
							else
								invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
									invoked.MatchWork			= OneSourceMatchWork.MatchWork


						if (!PrmPayablesInvoice.CreditForRebill)
							for each PrmPayablesInvoice.PayablesInvoiceDistributionRel
								if (each.IsTaxDistribution)
									invoke Delete each
		


						if (PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel exists)

							initialize MiscAOCExtendedAmount


						
							for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
								for each each.PurchaseOrder.PurchaseOrderLineRel
									if (each.ExtendedAmount >= MiscAOCExtendedAmount)
										MiscAOCExtendedAmount				= each.ExtendedAmount
										MiscAOCPurchaseOrderLine			= each.PurchaseOrderLine



					Exit Rules


						invoke OneSourceCreateTaxDistributionsForMatch TaxLineItem
							invoked.PrmCompany 				= PrmCompany
							invoked.PrmPayablesInvoice 		= PrmPayablesInvoice
							invoked.PrmAutoMatchResult		= PrmAutoMatchResult
							invoked.PrmFromRecon			= PrmFromRecon
							invoked.PrmReconMatchWork   	= PrmReconMatchWork

				Instance Rules


					invoke RemoveTaxLineItem 
					invoke CreateTaxLineItem 
						if (AddOnCharge entered
						and PurchaseOrderLine not entered)
							invoked.PrmPurchaseOrder = MiscAOCPurchaseOrderLine.PurchaseOrder
							invoked.PrmPurchaseOrderLine = MiscAOCPurchaseOrderLine.PurchaseOrderLine


		OneSourceCreditRebillMatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice

			Local Fields
				OneSourceMatchWork				is a MatchWork view
				OneSourceAutoMatchError			is Alpha 200

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice)
 								
			Action Rules
				Empty Set Rules 
					initialize OneSourceAutoMatchError


					if (PrmFromRecon)
					
						OneSourceMatchWork = PrmReconMatchWork.MatchWork
						
						invoke FastUpdate PrmPayablesInvoice
							invoked.BackgroundProcessing = 3 

					else
						if  (PrmPayablesInvoice.MatchReconQueueRel exists 
						and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
							invoke Purge PrmPayablesInvoice.MatchWorkRel


						invoke CreateOnly MatchWork
							resume on error							
							assign result to OneSourceMatchWork
							invoked.Company						= PrmCompany
							invoked.PayablesInvoice				= PrmPayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"
							invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
							invoked.BypassValidateMatchInvoiceBalance = true						

						if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
							invoke CreateForBudgetProcessing MatchReconQueue
								invoked.Company				= PrmCompany
								invoked.PayablesInvoice		= PrmPayablesInvoice
								invoked.MatchWork			= OneSourceMatchWork.MatchWork
						else
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.MatchWork			= OneSourceMatchWork.MatchWork




	

					if  (OneSourceAutoMatchError not entered)

						invoke UpdateErrorRecordsAction PrmPayablesInvoice
							resume on error							
				   				OneSourceAutoMatchError = error message

					if  (OneSourceAutoMatchError not entered)
						if (PrmPayablesInvoice.InvoiceErrorsExists)
							OneSourceAutoMatchError = "InvoiceOutOfBalance:InvoiceAmount: " + PrmPayablesInvoice.InvoiceAmount.CurrencyAmount + "GoodsAmount: " + PrmPayablesInvoice.MatchAmount + "TaxAmount: " + PrmPayablesInvoice.TaxAmount + "DetailTaxAmount: " + PrmPayablesInvoice.POTaxAmount

					if (!PrmFromRecon)

						if  (OneSourceAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message


	
						if  (!PrmFromRecon)
							if  (OneSourceAutoMatchError not entered)

								invoke BatchMatch OneSourceMatchWork.MatchWork
									resume on error							
						   				OneSourceAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= OneSourceMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult


					if  (OneSourceAutoMatchError entered)

						invoke Update OneSourceMatchWork.MatchWork
							invoked.VerifyMatchMessage = OneSourceAutoMatchError

						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= OneSourceAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update OneSourceMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
					else
					if  (PrmFromRecon)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch PrmReconMatchWork.MatchWork
				
				Set Rules
					Entrance Rules
						initialize OneSourceAutoMatchError


						if (PrmFromRecon)
						
							OneSourceMatchWork = PrmReconMatchWork.MatchWork
							
							invoke FastUpdate PrmPayablesInvoice
								invoked.BackgroundProcessing = 3 

						else
							if  (PrmPayablesInvoice.MatchReconQueueRel exists 
							and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
								invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
								invoke Purge PrmPayablesInvoice.MatchWorkRel
	

							invoke CreateOnly MatchWork
								resume on error							
								assign result to OneSourceMatchWork
								invoked.Company						= PrmCompany
								invoked.PayablesInvoice				= PrmPayablesInvoice
								invoked.MatchPoint					= "1"
								if (invoking action like "*Batch*")
									invoked.ProcessMode				= "B"
								else
									invoked.ProcessMode				= "O"
								invoked.DocumentType				= "I"
								invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
								invoked.BypassValidateMatchInvoiceBalance = true						
	
							if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
								invoke CreateForBudgetProcessing MatchReconQueue
									invoked.Company				= PrmCompany
									invoked.PayablesInvoice		= PrmPayablesInvoice
									invoked.MatchWork			= OneSourceMatchWork.MatchWork
							else
								invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
									invoked.MatchWork			= OneSourceMatchWork.MatchWork


					Exit Rules


		

						if  (OneSourceAutoMatchError not entered)

							invoke UpdateErrorRecordsAction PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message

						if  (OneSourceAutoMatchError not entered)
							if (PrmPayablesInvoice.InvoiceErrorsExists)
								OneSourceAutoMatchError = "InvoiceOutOfBalance:InvoiceAmount: " + PrmPayablesInvoice.InvoiceAmount.CurrencyAmount + "GoodsAmount: " + PrmPayablesInvoice.MatchAmount + "TaxAmount: " + PrmPayablesInvoice.TaxAmount + "DetailTaxAmount: " + PrmPayablesInvoice.POTaxAmount

						if (!PrmFromRecon)
	
							if  (OneSourceAutoMatchError not entered)

								invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
									resume on error							
						   				OneSourceAutoMatchError = error message
	

		
							if  (!PrmFromRecon)
								if  (OneSourceAutoMatchError not entered)

									invoke BatchMatch OneSourceMatchWork.MatchWork
										resume on error							
							   				OneSourceAutoMatchError = error message
										invoked.PrmCompany 			= PrmCompany
										invoked.PrmInvoice 			= PrmPayablesInvoice
										invoked.PrmMatchWork 		= OneSourceMatchWork.MatchWork
										invoked.PrmAutoMatchResult	= PrmAutoMatchResult

	
						if  (OneSourceAutoMatchError entered)

							invoke Update OneSourceMatchWork.MatchWork
								invoked.VerifyMatchMessage = OneSourceAutoMatchError

							if (PrmAutoMatchResult entered)


								LocalCompany			= PrmCompany
								LocalPayablesInvoice	= PrmPayablesInvoice
								LocalAutoMatchResult 	= PrmAutoMatchResult

								invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
									invoked.ErrorMessage 				= OneSourceAutoMatchError
									invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

								invoke Update OneSourceMatchWork.MatchWork
									initialize invoked.LinkedAutoMatchResult
							else
								invoke FastUpdate PrmPayablesInvoice
									initialize invoked.BackgroundProcessing
						else
						if  (PrmFromRecon)
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.View = 3 
								
							invoke FinishMatch PrmReconMatchWork.MatchWork

		VertexCreditRebillMatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice

			Local Fields
				VertexMatchWork				is a MatchWork view
				VertexAutoMatchError			is Alpha 200

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Rule Blocks 
				DoCreditForRebillMatch 
					
					initialize VertexAutoMatchError


					if (PrmFromRecon)
					
						VertexMatchWork = PrmReconMatchWork.MatchWork
						
						invoke FastUpdate PrmPayablesInvoice
							invoked.BackgroundProcessing = 3 

					else
						if  (PrmPayablesInvoice.MatchReconQueueRel exists 
						and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
							invoke Purge PrmPayablesInvoice.MatchWorkRel


						invoke CreateOnly MatchWork
							resume on error							
							assign result to VertexMatchWork
							invoked.Company						= PrmCompany
							invoked.PayablesInvoice				= PrmPayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"
							invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
							invoked.BypassValidateMatchInvoiceBalance = true						

						if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
							invoke CreateForBudgetProcessing MatchReconQueue
								invoked.Company				= PrmCompany
								invoked.PayablesInvoice		= PrmPayablesInvoice
								invoked.MatchWork			= VertexMatchWork.MatchWork
						else
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.MatchWork			= VertexMatchWork.MatchWork




	

					if  (VertexAutoMatchError not entered)

						invoke UpdateErrorRecordsAction PrmPayablesInvoice
							resume on error							
				   				VertexAutoMatchError = error message

					if  (VertexAutoMatchError not entered)
						if (PrmPayablesInvoice.InvoiceErrorsExists)
							VertexAutoMatchError = "InvoiceOutOfBalance:InvoiceAmount: " + PrmPayablesInvoice.InvoiceAmount.CurrencyAmount + "GoodsAmount: " + PrmPayablesInvoice.MatchAmount + "TaxAmount: " + PrmPayablesInvoice.TaxAmount + "DetailTaxAmount: " + PrmPayablesInvoice.POTaxAmount

					if (!PrmFromRecon)

						if  (VertexAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				VertexAutoMatchError = error message


	
						if  (!PrmFromRecon)
							if  (VertexAutoMatchError not entered)

								invoke BatchMatch VertexMatchWork.MatchWork
									resume on error							
						   				VertexAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= VertexMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult


					if  (VertexAutoMatchError entered)

						invoke Update VertexMatchWork.MatchWork
							invoked.VerifyMatchMessage = VertexAutoMatchError

						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= VertexAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update VertexMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
					else
					if  (PrmFromRecon)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch PrmReconMatchWork.MatchWork
				
			Action Rules
				Empty Set Rules 
					include DoCreditForRebillMatch 
				Set Rules
					Exit Rules
						include DoCreditForRebillMatch 







































		SetGLCommitForRebuild is an Instance Action
			restricted
			Parameters
				PrmHasPriorYearPOCommit is Boolean
				PrmSkipBudgetRebuild    is Boolean
				
			Action Rules
			
				invoke MaintainUnreleasedCommitment GLCommitRel
					invoked.HasPriorYearPOCommit    = PrmHasPriorYearPOCommit
					invoked.SkipBudgetRebuild       = PrmSkipBudgetRebuild


		ValidateFinanceStructure	is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmFinanceCodeBlock is a FinanceCodeBlockFull

			Action Rules
				if (PrmFinanceCodeBlock entered)
					BypassStructureRelationEdit	= false
					LocalFinanceCodeBlockFull	= PrmFinanceCodeBlock
					LocalToAccountingEntity		= LocalFinanceCodeBlockFull.ToAccountingEntity


		ReleaseSet is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				
			Instance Selection
				where (PayablesInvoice.Company = PrmCompany
				and    PayablesInvoice = PrmPayablesInvoice)	
			
				
			Action Rules
				Set Rules
					Exit Rules
						invoke InvokedCreateAccruedWithholdingDistributions PrmPayablesInvoice
						
						if (PrmPayablesInvoice.BackgroundProcessing.TaxProcessing)	
							invoke ClearBackgroundProcessing PrmPayablesInvoice		

						if (PrmPayablesInvoice.ForIntercompanyBilling)
							invoke ProcessIntoBillingDocuments IntercompanyBillingTransaction
								invoked.PrmIntercompanyBillingGroup			= PrmPayablesInvoice.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmOriginatingDocument				= reference to PrmPayablesInvoice

				Instance Rules
					if (Status.Unreleased)
						invoke Release
								
		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				if (AssetFlag entered)
					invoke Purge PayablesAssetDetailRel
				invoke RealPurge GLTransactionDetailRel

		Capitalize is an Instance Action 
			restricted 
			Action Rules 
				BypassUnitAndAmountEdit = true
				if (GLTransactionDetailRel.Status.Released)												
					invoke Released.UpdateReleasedGLTransDetailNoRules GLTransactionDetailRel			
						invoked.Capitalize	= 1	
				else 																					
					if (GLTransactionDetailRel.Status.Unreleased)											
						invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel	
							invoked.Capitalize	= 1	

		SplitDistribution is an Instance Action
			valid when (CanSplitDistribution)
    		disable multiple instance selection
			Parameters
				SplitDistributionArray

			Parameter Rules
				SplitDistributionArray
					required
						"MustProvidePercentage"
					constraint (SplitDistributionArray.SplitDistribution[2].Percentage entered)
						"MustProvideAtLeast2Percentages"
					
			Local Fields
				LocalBoolean								is Boolean
				LocalTotalDistributionAmount				is a FinanceCurrencyAmountGroup
				LocalTotalTaxDistributionAmount				is a FinanceCurrencyAmountGroup
				LocalTotalTaxDistributionAmountDifference	is a FinanceCurrencyAmountGroup
				LocalTotalTaxableAmount						is an InternationalAmount
				LocalCounter								is Numeric size 2

			Action Rules

				LocalTotalDistributionAmount	= DistributionAmount

				initialize LocalCalculateFinanceCurrencyAmountGroup
				for each LinkedTaxDistributionsRel
					LocalCalculateFinanceCurrencyAmountGroup.Operand = each.DistributionAmount
					LocalBoolean = LocalCalculateFinanceCurrencyAmountGroup.PerformAddition
				LocalTotalTaxDistributionAmount = LocalCalculateFinanceCurrencyAmountGroup.Total

				LocalTotalTaxableAmount			= TaxableAmount



				LocalCounter = 1
				while (LocalCounter < 99
				and    SplitDistributionArray.SplitDistribution[LocalCounter + 1].Percentage entered)
					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						assign result to NewPayablesInvoiceDistribution
						fill in fields from this instance
							except invoked.DistributionAmount
						invoked.GLFinanceCodeBlock							= SplitDistributionArray.SplitDistribution[LocalCounter].FinanceCodeBlock
						invoked.GLTTransactionCodeBlock						= SplitDistributionArray.SplitDistribution[LocalCounter].FinanceCodeBlock
						invoked.DistributionAccount							= SplitDistributionArray.SplitDistribution[LocalCounter].FinanceCodeBlock
						invoked.DistributionAmount.CurrencyAmount			= DistributionAmount.CurrencyAmount * SplitDistributionArray.SplitDistribution[LocalCounter].Percentage
						invoked.TaxableAmount								= TaxableAmount * SplitDistributionArray.SplitDistribution[LocalCounter].Percentage


					initialize LocalCalculateFinanceCurrencyAmountGroup
					LocalCalculateFinanceCurrencyAmountGroup.Total			= LocalTotalDistributionAmount
					LocalCalculateFinanceCurrencyAmountGroup.Operand		= NewPayablesInvoiceDistribution.DistributionAmount
					LocalBoolean = LocalCalculateFinanceCurrencyAmountGroup.PerformSubtraction
					LocalTotalDistributionAmount							= LocalCalculateFinanceCurrencyAmountGroup.Total


					initialize LocalCalculateFinanceCurrencyAmountGroup
					LocalCalculateFinanceCurrencyAmountGroup.Total			= LocalTotalTaxDistributionAmount
					for each NewPayablesInvoiceDistribution.PayablesInvoiceDistribution.LinkedTaxDistributionsRel
						LocalCalculateFinanceCurrencyAmountGroup.Operand	= each.DistributionAmount
						LocalBoolean = LocalCalculateFinanceCurrencyAmountGroup.PerformSubtraction
					LocalTotalTaxDistributionAmount							= LocalCalculateFinanceCurrencyAmountGroup.Total


					LocalTotalTaxableAmount								   -= NewPayablesInvoiceDistribution.TaxableAmount

					LocalCounter += 1




				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					assign result to NewPayablesInvoiceDistribution
					fill in fields from this instance
						except invoked.DistributionAmount
					invoked.GLFinanceCodeBlock			= SplitDistributionArray.SplitDistribution[LocalCounter].FinanceCodeBlock
					invoked.GLTTransactionCodeBlock		= SplitDistributionArray.SplitDistribution[LocalCounter].FinanceCodeBlock
					invoked.DistributionAccount			= SplitDistributionArray.SplitDistribution[LocalCounter].FinanceCodeBlock
					invoked.DistributionAmount			= LocalTotalDistributionAmount
					invoked.TaxableAmount				= LocalTotalTaxableAmount


				initialize LocalCalculateFinanceCurrencyAmountGroup
				LocalCalculateFinanceCurrencyAmountGroup.Total			= LocalTotalTaxDistributionAmount
				for each NewPayablesInvoiceDistribution.PayablesInvoiceDistribution.LinkedTaxDistributionsRel
					LocalCalculateFinanceCurrencyAmountGroup.Operand	= each.DistributionAmount
					LocalBoolean = LocalCalculateFinanceCurrencyAmountGroup.PerformSubtraction

				LocalTotalTaxDistributionAmountDifference				= LocalCalculateFinanceCurrencyAmountGroup.Total


				if (LocalTotalTaxDistributionAmountDifference entered)
					initialize LocalCalculateFinanceCurrencyAmountGroup
					LocalCalculateFinanceCurrencyAmountGroup.Total		= NewPayablesInvoiceDistribution.PayablesInvoiceDistribution.last LinkedTaxDistributionsRel.DistributionAmount
					LocalCalculateFinanceCurrencyAmountGroup.Operand	= LocalTotalTaxDistributionAmountDifference
					LocalBoolean = LocalCalculateFinanceCurrencyAmountGroup.PerformAddition

					invoke RestrictedUpdate NewPayablesInvoiceDistribution.PayablesInvoiceDistribution.last LinkedTaxDistributionsRel 
						invoked.GLTransactionAmount = LocalCalculateFinanceCurrencyAmountGroup.Total.CurrencyAmount
						invoked.DistributionAmount = LocalCalculateFinanceCurrencyAmountGroup.Total

			Exit Rules

				invoke Delete


		SplitFESDistributions is a Set Action
			default label is "FrontEndSplitDistributions"
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
					default label is "Company"
				PrmInvoice			is a PayablesInvoice
					default label is "Invoice"
				PrmInvokedFromMatch  is Boolean
			Parameter Rules
				PrmCompany
					required
				PrmInvoice
					required			
			Local Fields
				LocalForEachSumTotalTaxableAmount			is an InternationalAmount
				LocalForEachSumFESAmount					is an InternationalAmount
				LocalForEachSumUnitsAmount					is an UnitsAmount
				LocalForEachTaxAmount						is an InternationalAmount
			Instance Selection
				where (Company = PrmCompany
    			and PayablesInvoice = PrmInvoice
				and (Status.Unreleased
				or  (Status.Released
				and  PrmInvokedFromMatch))
        		and not CreatedByFES
				and DistributionAmount.CurrencyAmount != 0
        		and CanSplitFESDistribution
				and !PayablesInvoice.InvoiceNotInBalance
				and AddOnCharge not entered
				and DistributionAccount.FinanceDimension2 not entered
        		and DistributionAccount.Project entered
        		and !DistributionAccount.Project.ExcludeFromFES
        		and DistributionAccount.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)
			Action Rules
				Empty Set Rules	

				Set Rules
					Entrance Rules
						LocalFEGtext		= PrmCompany.FinanceEnterpriseGroup
        				LocalDerivedFESKey	= "AP-"+PrmCompany+"-"+PrmInvoice
						invoke Purge FESDistributionsByKeyLocalRel
					Exit Rules
						LocalFEGtext		= PrmCompany.FinanceEnterpriseGroup
        				LocalDerivedFESKey	= "AP-"+PrmCompany+"-"+PrmInvoice
						invoke Purge FESDistributionsByKeyLocalRel
				Instance Rules
					LocalFEGtext		= PrmCompany.FinanceEnterpriseGroup
					LocalDerivedFESKey	= "AP-"+PrmCompany+"-"+PrmInvoice
					invoke SplitDistribution FrontEndSplitDistributions in foreground
						invoked.PrmFinanceEnterpriseGroup 		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= GeneralLedgerCompanyRel.AccountingEntity
						invoked.PrmDistribution					= PayablesInvoiceDistribution
						invoked.PrmDerivedFESKey				= LocalDerivedFESKey
						invoked.PrmDistributionAmount			= DistributionAmount.CurrencyAmount
						invoked.PrmDistributionAmountWithTax	= DistributionAmount.CurrencyAmount
						if(UnitAmount entered)
							invoked.PrmDistributionUnitsAmount	= UnitAmount
						invoked.PrmTransactionDate				= DistributionAmount.ExchangeDate
						invoked.PrmPostingDate					= DistributionDate
						invoked.PrmTransactionCurrencyCode		= InvoiceCurrency
						invoked.PrmDistributionBy				= DistributionBy.ByAmount
						invoked.PrmNumberOfDecimalsQuantity		= NumberOfDecimalsQuantity.0Decimals
						invoked.PrmGeneralLedgerSystemCode		= GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
						invoked.PrmTransactionCodeBlock			= DistributionAccount
					initialize LocalForEachSumTotalTaxableAmount
					initialize LocalForEachSumFESAmount
					initialize LocalForEachSumUnitsAmount
					initialize LocalForEachTaxAmount
					initialize FESPayablesInvoiceDistribution
					if(FESDistByDistributionRel exists)
						if(initiating action = "PayablesInvoiceImport.InterfaceInvoices")
							initialize DetailTaxDistributionCodeFooter
							initialize TransientDistCodeTaxAmt
						for each FESDistByDistributionRel
							LocalForEachSumFESAmount			+= each.FESAmount
							LocalForEachSumTotalTaxableAmount	+= TaxableAmount * each.DerivedAmountToPercent
							LocalForEachSumUnitsAmount 			+= each.FESUnitsAmount
							invoke CreateFromBatchNoParms PayablesInvoiceDistribution
								assign result to FESPayablesInvoiceDistribution
								fill in fields from this instance
									except invoked.DistributionAmount
									except invoked.TransientPercent
								invoked.GLFinanceCodeBlock							= each.CodeBlock
								invoked.GLTTransactionCodeBlock						= each.CodeBlock
								invoked.DistributionAccount							= each.CodeBlock
								if (AdjustedDistribution)
									invoked.GLTGeneralLedgerEvent						= "CX"
								if (last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
									invoked.DistributionAmount.CurrencyAmount			= each.FESAmount + (DistributionAmount.CurrencyAmount - LocalForEachSumFESAmount)
									invoked.TaxableAmount								= ((TaxableAmount * each.DerivedAmountToPercent) + (TaxableAmount - LocalForEachSumTotalTaxableAmount))
									invoked.UnitAmount									= each.FESUnitsAmount + (UnitAmount - LocalForEachSumUnitsAmount)
								else
									invoked.DistributionAmount.CurrencyAmount			= each.FESAmount
									invoked.TaxableAmount								= TaxableAmount * each.DerivedAmountToPercent
									invoked.UnitAmount									= each.FESUnitsAmount
								invoked.CreatedByFES								= true
								invoked.BypassActiveCodeBlockEdit 					= true		
							LocalPayablesInvoiceDistribution = FESPayablesInvoiceDistribution.PayablesInvoiceDistribution
							LocalForEachTaxAmount += sum LocalLinkedTaxDistributionsRel.DistributionAmount.CurrencyAmount
						invoke Update last LocalLinkedTaxDistributionsRel
							invoked.DistributionAmount.CurrencyAmount	+= (sum LinkedTaxDistributionsRel.DistributionAmount.CurrencyAmount - LocalForEachTaxAmount)
							invoked.GLTransactionAmount					+= (sum LinkedTaxDistributionsRel.DistributionAmount.CurrencyAmount - LocalForEachTaxAmount)
						if(initiating action = "PayablesInvoiceDistributionImport.LoadInterfaceDistributions")
							BypassDistActionExitRules 		= false
						invoke Delete  

		DeleteFrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
					default label is "Company"
				PrmInvoice			is a PayablesInvoice
					default label is "Invoice"
			Parameter Rules
				PrmCompany
					required
				PrmInvoice
					required
			Local Fields

			Instance Selection
				where (Company = PrmCompany
    			and PayablesInvoice = PrmInvoice
				and Status.Unreleased
				and CreatedByFES)
			Action Rules
				Empty Set Rules

				Instance Rules
					invoke Delete

		4354ProcTaxDistrib	is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmPostDate				is Date
				PrmPaymentPerc			is a Percent
				PrmBaseDiscAmt			is an InternationalAmount
				PrmTranDiscAmt			is an InternationalAmount
				PrmTranPmtAmount		is an InternationalAmount
			Parameter Rules

			Exit Rules


				CalculateTax.Function				= "I"
				if (TaxAccountingEntity entered)
					CalculateTax.TaxEntity			= TaxAccountingEntity
				else
					CalculateTax.TaxEntity			= GeneralLedgerCompanyRel.AccountingEntity
				CalculateTax.TaxCode				= TaxCode
				CalculateTax.ProductTaxCategory 	= DerivedProductTaxCategory	
				CalculateTax.TaxUsageCode			= TaxUsageCode
				CalculateTax.InvoiceDate			= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate			= PrmPostDate
				CalculateTax.BypassMemberEdit		= true
				CalculateTax.System					= "AP"
				include LoadVertexGlobalInputFields
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax

				if (TaxType.Accrued
				and CalculateTax.TaxTable.TaxTableOutput[1].TaxTerms.Taxbeforeterms)
					LocalTranDiscAmt					= PrmTranDiscAmt
					LocalBaseDiscAmt					= PrmBaseDiscAmt
					LocalDistTrantaxDiscAmt1			= PrmPaymentPerc * DistributionAmount.CurrencyAmount * PayablesInvoice.DiscountPercent
					LocalDistTrantaxDiscAmt3			= ((PrmPaymentPerc * DistributionAmount.CurrencyAmount) * PayablesInvoice.DiscountPercent)


					LocalTaxTranAmount	= LocalDistTrantaxDiscAmt1 * -1





					LocalTranInvAmount = PrmTranPmtAmount

					include CreateTxTaxTrans	



	StateCycles

		PayablesDistributionLifeCycle is a StateCycle
			state field is Status
				

			Unreleased is a State
				
				Release is an Instance Action
					valid when (IsReleasable)
					restricted	
					Local Fields
						LocalAnswer is Alpha size 1
					Action Rules


						include ReleaseActionEdits
						include DoProjectContractProcessing


















						

						if (AssetFlag entered	
						and AssetDetailRel exists
						and (PayablesInvoice.MatchProcessType.Expense
						or   PayablesInvoiceDetail not entered
						or   (PayablesInvoiceDetail entered
						and   PayablesInvoiceDetail.PurchaseOrderLineAssetRel not exists)))
							if (AssetCompanyRel.PayablesDistributionWithTax.Summary)	
								if (IsExpenseDistribution)
									invoke CreateAssetInterface AssetDetailRel
							else
								if (IsExpenseDistribution
								or (PayablesInvoiceDetail entered 
								and IsLandedTaxDistribution)
								or (IsLinkedTaxDistribution
								and IsLandedTaxDistribution))

									invoke CreateAssetInterface AssetDetailRel

							invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel	
								invoked.Capitalize	= 1	

						include ReleaseGLTransactionDetail
						

						if (TaxCode entered
				 		and TaxIndicator.None)
							if (TaxPoint not entered)
								TaxPoint = DerivedTaxPoint

							if (PayablesInvoice.TaxEntityUsesInforTax	
							or ((PayablesInvoice.TaxEntityUsesVertex						
							or   PayablesInvoice.TaxEntityUsesSabrix)	
							and !InvoiceTaxEntityRel.VertexCallMethod.ByTransaction	
							and PayablesInvoice.TaxLineItemRel not exists))
								if  (PayablesInvoice.MatchProcessType.Expense
								and !TaxPoint.Payment)		

									invoke 585BuildTxTaxTrans			
										invoked.ApwsCancelledFl = "N"	
										invoked.ApwsReverseFlag = "N"
								else

									if ((InvoiceTaxEntityRel.ThirdParty.Sabrix
									and  (PayablesInvoice.TaxCode entered 
									or    PayablesInvoice.Location.PurchaseOrderTaxCode entered)
									and   PayablesInvoice.TaxLineItemRel exists)
									or  (InvoiceTaxEntityRel.ThirdParty.VertexOSeries 
									and   PayablesInvoice.TaxLineItemRel exists))							
										NextSentence = true  
									else 
									if  ((TaxPoint.Invoice
									or    TaxPoint.GLPostDate)
									and   TaxIndicator.None)

										invoke 585BuildTxTaxTrans			
											invoked.ApwsCancelledFl = "N"	
											invoked.ApwsReverseFlag = "N"






						if (PayablesInvoice.MatchProcessType.Expense
						and ((PayablesInvoice.TaxCode not entered
						or   PayablesInvoice.ShortPayCommentExists)		
						or  (PayablesInvoice.TaxCode entered					
						and  PayablesInvoice.DerivedTaxMethodInvOrAcc.Accrued	
						and  PayablesInvoice.AllowShortPay)						
						or  (PayablesInvoice.TaxCode.TaxType.TaxTableCode		

						and  DerivedTaxMethodInvOrAcc.Accrued))					
						and TaxCode entered
						and TaxIndicator.None
						and DistributionType.Distribution	

						and (TaxType.Accrued
						or   VATReverse)					
						and !TransientTaxReversal			
						and DistributionAmount.CurrencyAmount entered)


							if (TaxAccountingEntity entered)
								LocalTaxEntity	= TaxAccountingEntity
							else
								LocalTaxEntity	= GeneralLedgerCompanyRel.AccountingEntity
							
							LocalPayablesCompany	= PayablesInvoice.Company

							LocalOriginalDistribution	= OriginalDistribution		
							





							if (LocalAccrualCode not entered)
								if (first LinkedExpenseDistributionsRel.PayablesInvoiceTaxRel.TaxDetails.TaxTableOutput.AccrualCode entered)				
									LocalAccrualCode	= first LinkedExpenseDistributionsRel.PayablesInvoiceTaxRel.TaxDetails.TaxTableOutput.AccrualCode	

								else									
									if (CalculateTax.SabrixReturnedTaxCode entered)								
										LocalAccrualCode		= CalculateTax.SabrixReturnedTaxCode			



							if (LocalAccrualCode not entered)								

								if (!TaxEntityRel.UseTaxCodeAccounts)	
									if (TaxEntityRel.AccrualCode entered)
										LocalAccrualCode								= TaxEntityRel.AccrualCode
								else
									if (EntityTaxCodeRel.AccrualCode entered)
										LocalAccrualCode								= EntityTaxCodeRel.AccrualCode
								
								if (LocalAccrualCode not entered)
									LocalAccrualCode									= PayablesInvoice.AccrualCode
								






							constraint (PayablesAccrualCodeDetailRel exists)
								"Cannot_\Release;_\DetailNotDefinedFor_\Accrual_\Code<LocalAccrualCode>And_\Company<LocalPayablesCompany>"
							constraint (PayablesAccrualCodeDetailRel.Active)
								"Cannot_\Release;_\DetailNotActiveFor_\Accrual_\Code<LocalAccrualCode>And_\Company<LocalPayablesCompany>"
							
							invoke Create PayablesInvoiceDistribution
								assign result to TaxAccrualDistribution 
								fill in fields from this instance
									except invoked.TaxCode
									except invoked.TaxUsageCode		
									except invoked.TaxableAmount
									except invoked.DistributionAccount
									except invoked.GLFinanceCodeBlock
									except invoked.DistributionCode
									except invoked.PayablesInvoiceDetail
									except invoked.PurchaseOrder
									except invoked.PurchaseOrderLine
									except invoked.PurchasingContract
									except invoked.ContractLine
									except invoked.AddOnCharge
									except invoked.MatchCreated
									except invoked.OriginalDistribution
									except invoked.OriginalPOLineDistribution
									except invoked.OriginalContractLineDistribution
								invoked.DistributionType 												= "A"
								invoked.GLTransactionAmount  	  				   						= GLTransactionAmount * -1
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= DistributionAmount.FunctionalAmount * -1
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount * -1
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount2 * -1
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount3 * -1
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount		= DistributionAmount.ToFunctionalAmount * -1
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount * -1
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount2 * -1
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount3 * -1
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount			= DistributionAmount.ProjectAmount * -1
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount			= DistributionAmount.ReportAmount1 * -1
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount			= DistributionAmount.ReportAmount2 * -1
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount			= DistributionAmount.ReportAmount3 * -1
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount			= DistributionAmount.ReportAmount4 * -1
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount			= DistributionAmount.ReportAmount5 * -1
								invoked.DistributionAmount.CurrencyAmount		   						= DistributionAmount.CurrencyAmount * -1	
								invoked.DistributionAmount.ExchangeDate									= PayablesInvoice.InvoiceAmount.ExchangeDate 
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount				= GLTransactionAmount * -1
								invoked.TaxAccrualOffset												= true
								invoked.VATProcessing													= VATProcessing.Bypass		
								
								if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting)
									initialize LocalCalculatePayablesFinanceStructure
									LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
									LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
									LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= PayablesInvoiceDistribution
									LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
									LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount

									if (PayablesInvoice.TaxAccrualUsesTaxEntity)					
										LocalTaxCompany	= DistributionAccount.ToAccountingEntity	
										if (OverrideTaxAccrualDetailRel exists)						
											LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock					= OverrideTaxAccrualDetailRel.DistributionAccount
										else
											LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock.ToAccountingEntity	= DistributionAccount.ToAccountingEntity

									LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

									invoked.GLFinanceCodeBlock					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.DistributionAccount					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									invoked.GLTTransactionCodeBlock				= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
								else
									invoked.GLFinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount
									invoked.DistributionAccount					= PayablesAccrualCodeDetailRel.DistributionAccount
									invoked.GLTTransactionCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount

									if (PayablesInvoice.TaxAccrualUsesTaxEntity)					
										LocalTaxCompany	= DistributionAccount.ToAccountingEntity	
										if (OverrideTaxAccrualDetailRel exists)						
											invoked.GLFinanceCodeBlock		= OverrideTaxAccrualDetailRel.DistributionAccount	
											invoked.DistributionAccount		= OverrideTaxAccrualDetailRel.DistributionAccount	
											invoked.GLTTransactionCodeBlock	= OverrideTaxAccrualDetailRel.DistributionAccount	
										else	
											invoked.GLFinanceCodeBlock.ToAccountingEntity		= GLFinanceCodeBlock.ToAccountingEntity			
											invoked.DistributionAccount.ToAccountingEntity		= DistributionAccount.ToAccountingEntity		
											invoked.GLTTransactionCodeBlock.ToAccountingEntity	= GLTTransactionCodeBlock.ToAccountingEntity	

								invoked.Status												= 1
								invoked.GLTJournalizeGroup					= GLTransactionDetailRel.JournalizeGroup
						
								if (PayablesTaxDetailRel.TaxingJurisdiction entered)									
									invoked.TransientTaxingJurisdiction		= PayablesTaxDetailRel.TaxingJurisdiction	
								

						else

							if (!PayablesInvoice.MatchProcessType.Expense
							and initiating action = "PayablesInvoice.ReleaseAmendedInvoiceAmended"
							and TaxCode entered
							and DistributionType.Distribution
							and DerivedTaxMethodInvOrAcc.Accrued
							and !IsAccruedVATTax
							and !VATReverse
							and DistributionAmount.CurrencyAmount entered)


								if (TaxAccountingEntity entered)
									LocalTaxEntity	= TaxAccountingEntity
								else
									LocalTaxEntity	= GeneralLedgerCompanyRel.AccountingEntity


								invoke Create PayablesInvoiceDistribution
									assign result to TaxAccrualDistribution 
									fill in fields from this instance
										except invoked.TaxCode
										except invoked.TaxUsageCode		
										except invoked.TaxableAmount
										except invoked.DistributionAccount
										except invoked.GLFinanceCodeBlock
										except invoked.DistributionCode
										except invoked.PayablesInvoiceDetail
										except invoked.PurchaseOrder
										except invoked.PurchaseOrderLine
										except invoked.PurchasingContract
										except invoked.ContractLine
										except invoked.AddOnCharge
										except invoked.MatchCreated
										except invoked.OriginalDistribution
										except invoked.OriginalPOLineDistribution
										except invoked.OriginalContractLineDistribution
									invoked.DistributionType 												= "A"
									invoked.GLTransactionAmount  	  				   						= GLTransactionAmount * -1
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= DistributionAmount.FunctionalAmount * -1
									invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount * -1
									invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount2 * -1
									invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= DistributionAmount.AlternateAmount3 * -1
									invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount		= DistributionAmount.ToFunctionalAmount * -1
									invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount * -1
									invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount2 * -1
									invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount		= DistributionAmount.ToAlternateAmount3 * -1
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount			= DistributionAmount.ProjectAmount * -1
									invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount			= DistributionAmount.ReportAmount1 * -1
									invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount			= DistributionAmount.ReportAmount2 * -1
									invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount			= DistributionAmount.ReportAmount3 * -1
									invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount			= DistributionAmount.ReportAmount4 * -1
									invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount			= DistributionAmount.ReportAmount5 * -1
									invoked.DistributionAmount.CurrencyAmount		   						= DistributionAmount.CurrencyAmount * -1	
									invoked.DistributionAmount.ExchangeDate									= PayablesInvoice.InvoiceAmount.ExchangeDate 
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
									invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount				= GLTransactionAmount * -1
									invoked.TaxAccrualOffset												= true
									invoked.VATProcessing													= VATProcessing.Bypass		
									
									LocalPayablesCompany	= PayablesInvoice.Company

									initialize LocalAccrualCode

									if (CalculateTax.SabrixReturnedTaxCode entered)													
										LocalAccrualCode									= CalculateTax.SabrixReturnedTaxCode	

									else
									if (!TaxEntityRel.UseTaxCodeAccounts)	
										if (TaxEntityRel.AccrualCode entered)
											LocalAccrualCode								= TaxEntityRel.AccrualCode
									else
										if (EntityTaxCodeRel.AccrualCode entered)
											LocalAccrualCode								= EntityTaxCodeRel.AccrualCode
									
									if (LocalAccrualCode not entered)
										LocalAccrualCode									= PayablesInvoice.AccrualCode


									constraint (PayablesAccrualCodeDetailRel exists)
										"Cannot_\Release;_\DetailNotDefinedFor_\Accrual_\Code<LocalAccrualCode>And_\Company<LocalPayablesCompany>"
									
									if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting)
										initialize LocalCalculatePayablesFinanceStructure
										LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
										LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
										LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= PayablesInvoiceDistribution
										LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
										LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount

										if (PayablesInvoice.TaxAccrualUsesTaxEntity)					
											LocalTaxCompany	= DistributionAccount.ToAccountingEntity	
											if (OverrideTaxAccrualDetailRel exists)						
												LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock					= OverrideTaxAccrualDetailRel.DistributionAccount
											else
												LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock.ToAccountingEntity	= DistributionAccount.ToAccountingEntity

										LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

										invoked.GLFinanceCodeBlock					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
										invoked.DistributionAccount					= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
										invoked.GLTTransactionCodeBlock				= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
									else
										invoked.GLFinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount
										invoked.DistributionAccount					= PayablesAccrualCodeDetailRel.DistributionAccount
										invoked.GLTTransactionCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount

										if (PayablesInvoice.TaxAccrualUsesTaxEntity)					
											LocalTaxCompany	= DistributionAccount.ToAccountingEntity	
											if (OverrideTaxAccrualDetailRel exists)						
												invoked.GLFinanceCodeBlock		= OverrideTaxAccrualDetailRel.DistributionAccount	
												invoked.DistributionAccount		= OverrideTaxAccrualDetailRel.DistributionAccount	
												invoked.GLTTransactionCodeBlock	= OverrideTaxAccrualDetailRel.DistributionAccount	
											else	
												invoked.GLFinanceCodeBlock.ToAccountingEntity		= GLFinanceCodeBlock.ToAccountingEntity			
												invoked.DistributionAccount.ToAccountingEntity		= DistributionAccount.ToAccountingEntity		
												invoked.GLTTransactionCodeBlock.ToAccountingEntity	= GLTTransactionCodeBlock.ToAccountingEntity	
									
									invoked.Status												= 1
									invoked.GLTJournalizeGroup					= GLTransactionDetailRel.JournalizeGroup
							
									if (PayablesTaxDetailRel.TaxingJurisdiction entered)									
										invoked.TransientTaxingJurisdiction		= PayablesTaxDetailRel.TaxingJurisdiction	

							

						
						LocalEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						
						if (RecurringJournalExists)


							invoke AutoRelease Unreleased RecurringJournalControlRel

						if (IntercompanyBillingTransactionRel exists)
							invoke MakeReleased IntercompanyBillingTransactionRel

						make transition to Released

					Exit Rules
						if (Company.GlobalWithholding
						and Vendor.LineLevelWithholding)
							invoke UpdateReportableAmount PayablesInvoiceWithholdingRel
								invoked.PrmInvoiceAmount	= DistributionAmount.CurrencyAmount
								invoked.PrmTaxAmount		= sum LinkedTaxDistributionsRel.DistributionAmount.CurrencyAmount




				Approve is an Instance Action 
					default label is untranslatable
					restricted 
					Action Rules
						make transition to Approved
				
				Reject is an Instance Action
					default label is untranslatable
					restricted 
					Action Rules
						make transition to Rejected		


			Released is a State
				
				Unrelease is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						if (AssetDetailRel exists
						and (PayablesInvoice.MatchProcessType.Expense
						or   PayablesInvoiceDetail not entered))
							invoke DeleteAssetInterfaceRecords AssetDetailRel
						invoke Released.Delete GLTransactionDetailRel
						make transition to Unreleased

				MakeHistorical is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						make transition to Historical



			Pending is a State


			
			

			Approved is a State
				
				Unapprove is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						make transition to Unreleased			
				
				Release is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						if (AssetFlag entered)										
							if (AssetFlag.RepairAsset)								
								constraint (AssetDetailRel.Asset entered)			
									"RepairAssetIsRequiredOnDistribution<PayablesInvoiceDistribution>"
							else
								constraint (AssetDetailRel.AssetTemplate entered)	
									"AssetTemplateIsRequiredOnDistribution<PayablesInvoiceDistribution>"
									
															
						if (AssetFlag entered	
						and AssetDetailRel exists
						and (PayablesInvoice.MatchProcessType.Expense
						or   PayablesInvoiceDetail not entered
						or   (PayablesInvoiceDetail entered
						and   PayablesInvoiceDetail.PurchaseOrderLineAssetRel not exists)))
							if (AssetCompanyRel.PayablesDistributionWithTax.Summary)	
								if (IsExpenseDistribution)
									invoke CreateAssetInterface AssetDetailRel
							else
								if (IsExpenseDistribution
								or (PayablesInvoiceDetail entered 
								and IsLandedTaxDistribution)
								or (IsLinkedTaxDistribution
								and IsLandedTaxDistribution))
									invoke CreateAssetInterface AssetDetailRel
							invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules GLTransactionDetailRel	
								invoked.Capitalize	= 1	
						make transition to Released
						
			

			Rejected is a State
				
				Unrelease is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						make transition to Unreleased
						


			Historical is a State

				InterfaceCreate is a Create Action
					default label is untranslatable
					restricted
					Entrance Rules
						GLTSystem			= "AP"		
						BypassUpdatingInvoiceTotals = false	
						BypassDistActionExitRules 	= true    	
						BypassActiveCodeBlockEdit	= true		
						ActionType = ActionType.CreateType
						include UpdatePersistentFields
					
					Action Rules
						InterfaceCreate = true
						include CreateUpdateRules
						include CreateUpdateDeleteRules
						if (TaxCode entered)
							if (TaxCodeRel.TaxType.StandAlone
							or !TaxCodeRel.TaxType.TableMember)
								include CalculateTaxAmount
						
					Exit Rules
						InterfaceCreate = true
						if (TaxCodeRel.TaxType.TaxTableCode
						and TaxIndicator.Taxable)

							include DoTaxCodeProcessing		

						include CreateGLTransactionDetail
											
						include CreateTaxExitRules1

						include CreateUpdateDeleteExitRules
		
						include CreateTaxExitRules2

						include UpdateLastUpdatedFields
				

				Update is an Update Action
					default label is untranslatable
					restricted
				
				
				Delete is a Delete Action
					default label is untranslatable
					restricted			


				
				
				
FileCreationLogic.PayablesInvoiceDistribution is a BusinessClass

	Persistent Fields
	
	Local Fields

		LocalFinanceEnterpriseGroup is like FinanceEnterpriseGroup
		LocalFileCreationSetup		is like FileCreationSetup
					
	Relations

		FileCreationRecordNotProcessedRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 1
				related.Key1					= LocalPayablesCompany
				related.Key2					= LocalPayablesInvoice

		FileCreationRecordErrorRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 2
				related.Key1					= LocalPayablesCompany
				related.Key2					= LocalPayablesInvoice
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"PayablesInvoiceDistribution_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Sort Order is primary
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3

			Local Fields
				InPayablesInvoiceGroup					is Boolean
				LocalPayablesInvoiceGroupSelection		is a PayablesInvoice group in subject FileCreationPayablesInvoice

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      PayablesInvoice % PrmNumberOfRunGroups = PrmRunGroup)
				and	   update stamp > BeginTimeStamp
				and	   update stamp <= EndTimeStamp)

			Action Rules
				Instance Rules
					LocalFinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
					LocalFileCreationSetup	= FileCreationSetupPrm
					LocalPayablesCompany		= Company
					LocalPayablesInvoice		= PayablesInvoice
					if (FileCreationRecordNotProcessedRel not exist
					and	FileCreationRecordErrorRel not exist)
						LocalPayablesInvoiceGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (LocalPayablesInvoiceGroupSelection entered)
							InPayablesInvoiceGroup = false
							if (PayablesInvoice within LocalPayablesInvoiceGroupSelection)
								InPayablesInvoiceGroup = true

						if (LocalPayablesInvoiceGroupSelection not entered
						or	InPayablesInvoiceGroup)
												
							invoke Create FileCreationRecord
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
								invoked.FileCreationSetup	= FileCreationSetupPrm
								invoked.Key1				= Company
								invoked.Key2				= PayablesInvoice
								invoked.SystemTimeStamp		= EndTimeStamp
								invoked.EffectiveDate		= system current corporate date
								invoked.Status				= 1
