ConfigEntity is a BusinessClass
    owned by repository
    default label is "ConfigurationEntity"
    store using com.lawson.rdtech.framework.repository.ConfigEntityStorage

    Ontology
        symbolic key is ConfigEntity

    Patterns
    	implements ReadOnly
		implements ConfigurationMetadata
		implements DeleteFlag



    Persistent Fields
    	Entity          is BusinessObjectReference
    	EntityType      is a ConfigEntityType
    	    default label is "Type"
    	BusinessView
    	    default label is "BusinessClass"	
    	Name			is LPLName
    	Actor
    	UserFolder      is BusinessObjectReference to UserFolder
    	Status			is a UserObjectStatus
    	LPL				is LPL
    	LPLIndex        is Text
    	Description		is a ConfigDescription
    	ErrorText		is Text
    	Independent     is Boolean
    	InViewContext	is Boolean
    	UpdateStamp     is ChangeStamp
    	CreateStamp     is ChangeStamp
    	CfgEntryType    is LPLName
            default label is "ConfigurationType"
        UserEditorType
        Owner 			is like Actor

	Transient Fields
		TEnableTranslations is Boolean
			default label is "EnableTranslations"
			derive value from EnableTranslations

    Context Fields
        ConfigTagSearch is a ConfigurationTag  
            default label is "Tag"
        Snapshot is a ConfigBundleSnapshot

    Derived Fields
       	ShortDisplayName is a DerivedField
       		type is LPLName
   			if (EntityType.BusinessClass or EntityType.CubeConfiguration or EntityType.Cube)
                return BusinessView
			return Name

       	DisplayName is a DerivedField
       		type is LPLName
       		if (InViewContext)
       			if (EntityType.BusinessClass or EntityType.Cube or EntityType.CubeConfiguration)
       				return BusinessView
                else
                if (EntityType.KeyField)
                    return RelUserKeyField.UserBusClassName + "." + Name
       			return BusinessView + "." + Name
			return Name

        EntityTypeNoBusinessViewMF is a MessageField	
            "<EntityType>"

        EntityTypeBusinessViewMF is a MessageField
            "<EntityType>On_<BusinessView>"

        ConfigurationCardDisplayType is a DerivedField
            type is Alpha 200
            if (InViewContext)
                return EntityTypeBusinessViewMF
            else
                return EntityTypeNoBusinessViewMF

		DerivedLastChange is a MessageField
            "LastChanged<UpdateStamp.TimeStamp>By<UpdateStamp.Actor>"

        OverriddenCount is a DerivedField
            type is Numeric size 4
            if (EntityType.List)
                return Entity(UserList).OverriddenCount
            else
            if (EntityType.Form)
                return Entity(UserForm).OverriddenCount
            else
            if (EntityType.Menu)
                return Entity(UserMenu).OverriddenCount
            else
            if (EntityType.Page)
                return Entity(UserPage).OverriddenCount
            else
            if (EntityType.CardView)
                return Entity(UserCardView).OverriddenCount
            else
                return blank

        EditLPLInitialValue is a DerivedField
            type is LPL
            return LPL

        DescriptionParamInitialValue is a DerivedField
            type is Alpha size up to 500
            default label is "DescriptionInitialValue"
			return Description

        DerivedReportType is a DerivedField  
            type is Alpha 20
            if (UserFolder.AsOfDate entered)
                return "As of Dated Report"
            else
            if (UserFolder.Temporal entered)
                return "Audit Report"
            else
                return "Live Report"

		NotImplementedMsg is a MessageField
			restricted
			"Oops.ActionNotImplementedFor_'<EntityType>'!"

        ViewUILPLMessage is a MessageField
            restricted
            "View_BaseUI_LPL"

        ApplicationChangeUIType is a DerivedField
            type is Numeric size 1
            restricted

			if (EntityType.List)
				return 1

			if (EntityType.Form)
				return 2

			if (EntityType.CardView)
				return 6

			if (EntityType.Page)
				return 3

			if (EntityType.Menu)
				return 4

			if (EntityType.WebApplication)
				return 7
				
			if (EntityType.Navigation)
				return 8
				
			if (EntityType.DrillList)
				return 9

            return blank


        ApplicationChangeUIKey1 is a DerivedField
            type is LPLName
            restricted

			if (EntityType.List)
				return BusinessView

			if (EntityType.Form)
				return BusinessView

			if (EntityType.CardView)
				return BusinessView
				
			if (EntityType.Navigation)
				return BusinessView
				
			if (EntityType.DrillList)
				return BusinessView

			if (EntityType.Page)
				return Name

			if (EntityType.Menu)
				return Name

			if (EntityType.WebApplication)
				return Name

            return blank

        ApplicationChangeUIKey2 is a DerivedField
            type is LPLName
            restricted

			if (EntityType.List)
				return Name

			if (EntityType.Form)
				return Name

			if (EntityType.CardView)
				return Name
				
			if (EntityType.Navigation)
				return Name
				
			if (EntityType.DrillList)
				return Name

            return blank

		PreviousVersion is a DerivedField
			type is Alpha size 32

			return last ApplicationJarRel.ApplicationJar.Version

		PreviousVersionImpacted is a DerivedField
			type is Numeric size 4

			return last ApplicationJarRel.ApplicationJar.ImpactedConfigurations

		PreviousVersionLPL is a DerivedField
			type is LPL

			if (SupportsUIChangeFeature)
				return PreviousVersionUIChangeRel.OldBase
			else
				return blank

		CurrentLPL is a DerivedField
			type is LPL

			if (SupportsUIChangeFeature)
				return PreviousVersionUIChangeRel.CurrentBase
			else
				return blank

		CurrentFormattedLPL is a DerivedField
			type is LPL

			if (HasBaseLPL)
				if (EntityType.List)
					return BusinessListRel.BaseLPL

            	if (EntityType.Form)
            		return BusinessFormRel.BaseLPL

            	if (EntityType.CardView)
            		return BusinessCardViewRel.BaseLPL

				if (EntityType.Navigation)
            		return BusinessNavigationRel.BaseLPL 
            		
            	if (EntityType.DrillList)
            		return BusinessDrillListRel.BaseLPL 
            	
            	if (EntityType.Page)
            		return BusinessPageRel.BaseLPL

            	if (EntityType.Menu)
            		return BusinessMenuRel.BaseLPL

            	if (EntityType.WebApplication)
            		return WebAppRel.BaseLPL

				return blank
			else
			if (IsCopiedSecurityClass)
			    return CopiedFromSecurityLPL
			else
				return blank

		ReportCategory is a MessageField
			restricted
			"Report"

		ConfigurationCategory is a MessageField
			restricted
			"Configuration"

		PersonalizationCategory is a MessageField
			restricted
			"Personalization"

		SecurityClassCategory is a MessageField
			restricted
			"SecurityClass"

		Category is a DerivedField
			type is Alpha size 50

			if (IsReport)
				return ReportCategory
			if (IsConfiguration)
				return ConfigurationCategory
			if (IsPersonalization)
				return PersonalizationCategory
            if (IsSecurityClass)
                return SecurityClassCategory

			return ConfigurationCategory

        DerivedSecurityClassName is a DerivedField
            type is Alpha size 100
            if (EntityIsUserAction)
                return "UA_" + BusinessView + "_" + Name
            if (EntityType.BusinessClass or EntityType.KeyField)
                return "UBC_" + BusinessView
            return blank

		MissingSecurityWarning is a MessageField
			"No_Roles_Assigned"

        AssignedToSecurityRole is a DerivedField
            type is Boolean
            if (HasSecurityClass)
                return (instance count of RelUserActionSecurity.RoleSecurityClassRel > 0)
            else
            if (IsSecurityClass)
                return (instance count of RelSecurityClass.RoleSecurityClassRel > 0)
            else
                return false

        InSnapshot is a DerivedField
            type is Boolean

            if (Snapshot entered)
                for each SnapshotItemsRel
                    if (each.ConfigSnapshotItemInfo.ConfigEntityType = EntityType
                    and each.ConfigSnapshotItemInfo.BusinessView = BusinessView
                    and each.ConfigSnapshotItemInfo.Name = Name
                    and each.ConfigSnapshotItemInfo.Actor = Actor)
                        return true

            return false

        BaseClass is a DerivedField
            type is LPLName
            default label is "BaseClass"

			if (EntityType.SecurityClass)
				return Entity(SecurityClass).BaseClass
			else
				return blank

        CopiedFromSecurityClass is a DerivedField
            type is LPLName
            default label is "CopiedFrom"

			if (EntityType.SecurityClass)
			    return Entity(SecurityClass).CopiedFrom
            else
                return blank

        CopiedFromSecurityLPL is a DerivedField
            type is LPL

			if (EntityType.SecurityClass)
			    return RelCopiedFromSecurityClass.LPL
            else
                return blank

        ExtendedFromSecurityLPL is a DerivedField
            type is LPL

			if (EntityType.SecurityClass)
			    return RelExtendedFromSecurityClass.LPL
            else
                return blank

        CompareHeaderMF is a MessageField
            "Current_Application_Version_(Left)_vs_Current_Configuration_(Right)"

        SecurityCompareHeaderMF is a MessageField
            "<CopiedFromSecurityClass>_(Left)_vs_<Name>_(Right)"
            
        ExtendedSnapshotInfo is a DerivedField
            type is JSONObject
            restricted
            default label is untranslatable
            if (EntityType.SecurityClass)
                return Entity(SecurityClass).ExtendedSnapshotInfo
           
            return blank

    Local Fields
        LocSubject is LPLName

	Conditions
        CubeHasPendingChanges
            when (EntityType.CubeConfiguration
            and   Entity(UserCube).HasPendingChanges)

	    IsConfiguration
            default label is "Configuration"
            when (Actor not entered
            and   !IsFolder
            and   !EntityType.SecurityClass)

        IsPersonalization
            default label is "Personalization"
            when (Actor entered
            and   !IsFolder
            and   !EntityType.SecurityClass)

        IsReport
            default label is "Report"
            when (IsFolder
            and  ((EntityType.List
            and   UserFolder.Dynamic)
            or   EntityType.Page))

        IsFolder
            default label is "Folder"
            when (UserFolder.BusinessObjectKey entered)

        IsSecurityClass
            default label is "SecurityClass"
            when (EntityType.SecurityClass)

        SupportsPersonalization
            default label is "PersonalizationIsSupported"
            when (EntityType.List
            or EntityType.Form
            or EntityType.CardView
            or EntityType.Page
            or EntityType.Menu)

	    IsMakePersonalizationValid
            default label is "MakePersonalizationValid"
            when (IsConfiguration
            and   SupportsPersonalization
            and   not ConfigEntity.EntityType.Cube 
            and   ConfigEntityExists)

	    IsMakeConfigurationValid
            default label is "MakeConfigurationValid"
            when (IsPersonalization
            and   SupportsPersonalization
            and   not ConfigEntity.EntityType.Cube 
            and   ConfigEntityExists)
        
        IsOverridePersonalizationsValid
            restricted
            when (IsOverriddenByPersonalization and ConfigEntityExists)

		IsShareable
            default label is "Shareable"
            when (IsPersonalization
            and   EntityType.List
           	and   ConfigEntityExists)

        IsOverriddenByPersonalization
            default label is "OverriddenByPersonalization"





            when ((EntityType.List and Entity(UserList).IsOverridden)
            or (EntityType.Form and Entity(UserForm).IsOverridden)
            or (EntityType.CardView and Entity(UserCardView).IsOverridden)
            or (EntityType.Page and Entity(UserPage).IsOverridden)
            or (EntityType.Menu and Entity(UserMenu).IsOverridden))


        IsOverriddenByListPersonalization
            default label is "OverriddenByListPersonalization"
            when (EntityType.List and PersonalizedUserListsRel exists)
        IsOverriddenByFormPersonalization
            default label is "OverriddenByFormPersonalization"
            when (EntityType.Form and PersonalizedUserFormsRel exists)
        IsOverriddenByCardViewPersonalization
            default label is "OverriddenByViewPersonalization"
            when (EntityType.CardView and PersonalizedUserCardViewsRel exists)
        IsOverriddenByPagePersonalization
            default label is "OverriddenByPagePersonalization"
            when (EntityType.Page and PersonalizedUserPagesRel exists)
        IsOverriddenByMenuPersonalization
            default label is "OverriddenByMenuPersonalization"
            when (EntityType.Menu and PersonalizedUserMenusRel exists)

		EntityIsUserAction
			when (EntityType.Action or EntityType.ActionConfiguration or EntityType.ActionExtension or EntityType.UserAction)

        UpdatedLastFourteenDays
            when ((current timestamp - UpdateStamp.TimeStamp <= 1209600))  

		RecentConfigurationChanges
		    when (IsConfiguration
		    and  UpdatedLastFourteenDays)

        RecentPersonalizationChanges
            when (IsPersonalization
            and   UpdatedLastFourteenDays)

        ActorIsUpdateActor
            when (actor = UpdateStamp.Actor)

        HasErrorText
            default label is "ErrorTextEntered"
            when (ErrorText entered)

		HasConfigResults
            default label is "ConfigurationResultsExist"
			when (ConfigEntityResultsRel exists)

		HasValidateResults
            default label is "ValidationResultsExist"
			when (ValidateConfigurationsResultsRel exists)

		SupportsUIChangeFeature
			default label is "CurrentLPLSupportsUIChangeFeature"
			when (IsConfiguration and
			ConfigEntityExists and
			(EntityType.List
			or EntityType.Form
			or EntityType.CardView

			or EntityType.DrillList
			or EntityType.Page
			or EntityType.Menu
			or EntityType.WebApplication))

		HasPreviousVersionChange
			default label is "PreviousVersionChangeExists"
			when (SupportsUIChangeFeature and PreviousVersionUIChangeRel exists)

		IsCopiedSecurityClass
			default label is "CopiedSecurityClass"
			when (IsSecurityClass
			and CopiedFromSecurityClass entered)

		IsExtendedSecurityClass
			default label is "ExtendedSecurityClass"
			when (IsSecurityClass
			and BaseClass entered)

		HasBaseLPL
			default label is "BaseLPLExists"
			when (HasBaseListLPL or HasBaseFormLPL or HasBaseCardViewLPL
			or HasBaseCardViewLPL or HasBasePageLPL or HasBaseMenuLPL or HasBaseWebApplicationLPL or HasBaseNavigationLPL or HasBaseDrillListLPL)

		HasBaseListLPL
			default label is "BaseListLPLExists"
			when (EntityType.List and !Independent and !IsFolder and ConfigEntityExists)

		HasBaseFormLPL
			default label is "BaseFormLPLExists"
			when (EntityType.Form and !Independent and !IsFolder and ConfigEntityExists)

		HasBaseCardViewLPL
			default label is "BaseCardViewLPLExists"
			when (EntityType.CardView and !Independent and !IsFolder and ConfigEntityExists)
		
		HasBaseNavigationLPL
			default label is "BaseNavigationLPLExists"
			when (EntityType.Navigation and !Independent and !IsFolder and ConfigEntityExists)
			
		HasBaseDrillListLPL
			default label is "BaseDrillListLPLExists"
			when (EntityType.DrillList and !Independent and !IsFolder and ConfigEntityExists)

		HasBasePageLPL
			default label is "BasePageLPLExists"
			when (EntityType.Page and !Independent and !IsFolder and ConfigEntityExists)

		HasBaseMenuLPL
			default label is "BaseMenuLPLExists"
			when (EntityType.Menu and !Independent and !IsFolder and ConfigEntityExists)

		HasBaseWebApplicationLPL
			default label is "BaseWebApplicationLPLExists"
			when (EntityType.WebApplication and !Independent and !IsFolder and ConfigEntityExists)

        HasTags
        	default label is "TagsExist"
            when (TaggedItemsRel exists)

        HasSearchTags
        	default label is "SearchTagsExist"
            when (ConfigTagSearch not entered
            or    TaggedItemsSearchRel exists)

		ValidToTag 
			when (not EntityType.Cube and (not EntityType.SecurityClass or not RelSecurityClass.StandardTemplate))
		



		ConfigEntityExists
			default label is "ConfigurationEntityExists"
			when (ConfigEntity_DeleteFlag = blank)

		CanGUIEditProdLine
			restricted
			when (EntityType.ProductLine and Status.Active and ConfigEntityExists)

		CanEdit
			restricted
			when (not ConfigEntity.EntityType.Cube and ConfigEntityExists) 

		CanDelete
			restricted
			when (not ConfigEntity.EntityType.Cube and ConfigEntityExists) 
			
		CanActivate
			restricted
			when (not Status.Active and not ConfigEntity.EntityType.Cube and ConfigEntityExists) 
		
		CanDeactivate
			restricted
			when (not Status.Inactive and not ConfigEntity.EntityType.Cube and ConfigEntityExists) 
			 
		LPLViewerNavValid
			restricted
			when (InViewContext and ConfigEntityExists)
			
		UserBusinessClassNavValid
			restricted
			when (EntityType.BusinessClass and ConfigEntityExists)
			
		UserRelationNavValid
			restricted
			when (EntityType.Relation and ConfigEntityExists)
			
		UserKeyFieldNavValid
			restricted
			when (EntityType.KeyField and ConfigEntityExists)
			
		UserFieldNavValid
			restricted
			when (EntityType.Field and ConfigEntityExists)
			
		UserActionNavIsValid
			restricted
			when (EntityIsUserAction and ConfigEntityExists)
		
		UserCubeNavIsValid
			restricted
			when (EntityType.CubeConfiguration and ConfigEntityExists)
		
		UserCubeDeployedNavIsValid
			restricted
			when (EntityType.Cube and ConfigEntityExists)
			
		UserListNavIsValid
			restricted
			when (EntityType.List and ConfigEntityExists)
			
		UserFormNavIsValid
			restricted
			when (EntityType.Form and ConfigEntityExists)
			
		UserMenuNavIsValid
			restricted
			when (EntityType.Menu and ConfigEntityExists)
			
		UserPageNavIsValid
			restricted
			when (EntityType.Page and ConfigEntityExists)
			
		UserReportNavIsValid
			restricted
			when (EntityType.Report and ConfigEntityExists)
			
		UserImageNavIsValid
			restricted
			when (EntityType.ImageMap and ConfigEntityExists)
		
		UserProdNavIsValid
			restricted
			when (EntityType.ProductLine and ConfigEntityExists)
			
		SecurityClassNavIsValid
			restricted
			when (EntityType.SecurityClass and ConfigEntityExists)
		
		UserCardViewNavIsValid
			restricted
			when (EntityType.CardView and ConfigEntityExists)
			
		UserNavigationNavIsValid
			restricted
			when (EntityType.Navigation and ConfigEntityExists)
			
		UserDrillListNavIsValid
			restricted
			when (EntityType.DrillList and ConfigEntityExists)
			
		BusinessChartNavIsValid
			restricted
			when (EntityType.Chart and ConfigEntityExists)
			
		UserWebAppNavIsValid
			restricted
			when (EntityType.WebApplication and ConfigEntityExists)
			
		UserWebServiceInterfaceNavIsValid
			restricted
			when (EntityType.WebServiceInterface and ConfigEntityExists)

		ImplementsDataTranslations
			restricted
            when (EntityType.ProductLine and Entity(UserProd).ImplementsDataTranslations)

		EnableTranslations
			restricted
            when (EntityType.ProductLine and !Entity(UserProd).DisableTranslations)

        IsSecurable
		    restricted
		    when (EntityIsUserAction or EntityType.BusinessClass or EntityType.KeyField)

		HasSecurityClass
		    restricted
		    when (IsSecurable and RelUserActionSecurity exists)
			
		DisplayRelatedOptionButton
			restricted
			when (EntityType.KeyField or (EntityType.BusinessClass and Entity(UserBusinessClass).ProcessRelatedConfigurations) or (EntityIsUserAction and Entity(UserAction).DisplayRelatedOptionButton))

		DisplaySecurityClassCopyFrom
			restricted
			when (EntityType.SecurityClass and Entity(SecurityClass).DisplayTagCopyFromOption)
		
		ShowBusClassLplLink
			restricted
			when (InViewContext and !(EntityType.BusinessClass or EntityType.KeyField))

        MyPersonalizations
            when (IsPersonalization
            and  Actor = actor)

        MyReports
            when (IsReport
            and  UserFolder.ReportsCreatedByActor)
            
 		IsDuplicateConfiguration
 		    default label is "DuplicateConfiguration"
 			when (DuplicateConfigRel exists)
 			
 		CanConvertToIlineSearchForm
 			restricted	
 			when (EntityType.List and Entity(UserList).CanConvertToIlineSearchForm)

 		CanUpdateInlineStorage
 			restricted
 			when (EntityType.Field and Entity(UserField).BusinessClass.ImplementsInlineUserFields)

	Rule Blocks
		EditLPLRule
			if (EntityType.List)
				invoke Update Entity(UserList)
					invoked.Delta = LPL
			else
			if (EntityType.Form)
				invoke Update Entity(UserForm)
					invoked.LPL = LPL
			else
			if (EntityType.Menu)
				invoke Update Entity(UserMenu)
					invoked.LPL = LPL
			else
			if (EntityType.Page)
				invoke Update Entity(UserPage)
					invoked.LPL = LPL
			else
			if (EntityType.CardView)
				invoke Update Entity(UserCardView)
					invoked.LPL = LPL
			else
			if (EntityType.Navigation)
				invoke Update Entity(UserNavigation)
					invoked.LPL = LPL
			else
			if (EntityType.DrillList)
				invoke Update Entity(UserDrillList)
					invoked.LPL = LPL
			else
			if (EntityType.ProductLine)
				invoke Update Entity(UserProd)
					invoked.LPL = LPL
			else
			if (EntityType.WebApplication)
				invoke Update Entity(UserWebApp)
					invoked.LPL = LPL
			else
			if (EntityType.Field)
				invoke Update Entity(UserField)
					invoked.LPL = LPL
			else
			if (EntityType.Relation)
				invoke Update Entity(UserRelation)
					invoked.LPL = LPL
			else
			if (EntityIsUserAction)
				invoke Update Entity(UserAction)
					invoked.LPL = LPL
			else
			if (EntityType.Cube)
				invoke Update Entity(UserCubeDeployed)
					invoked.LPL = LPL
			else
			if (EntityType.CubeConfiguration)
				invoke Update Entity(UserCube)
					invoked.LPL = LPL
			else
			if (EntityType.WebServiceInterface)
				invoke Update Entity(UserWebServiceInterface)
					invoked.LPL = LPL
			else
			if (EntityType.KeyField)
				invoke Update Entity(UserKeyField)
					invoked.LPL = LPL
			else
			if (EntityType.BusinessClass)
				invoke Update Entity(UserBusinessClass)
					invoked.LPL = LPL
			else
			if (EntityType.SecurityClass)
				invoke Update Entity(SecurityClass)
					invoked.LPL = LPL
            else
            if (EntityType.Report)
                invoke Update Entity(UserSJRptMap)
                    invoked.LPL = LPL
			else
				constraint(false)
					"<NotImplementedMsg>"

	Actions
	    UpdateDescription is an Instance Action
	    	valid when (CanEdit)
			disable multiple instance selection
            completion message is "DescriptionUpdated"

			Parameters
				ParamDescription is a ConfigDescription
					default label is "Description"

			Parameter Rules
				ParamDescription
					initial value is DescriptionParamInitialValue

            Action Rules
                if (EntityType.List)
                    invoke Update Entity(UserList)
                        invoked.Description = ParamDescription
                else
                if (EntityType.Form)
                    invoke Update Entity(UserForm)
                        invoked.Description = ParamDescription
                else
                if (EntityType.Menu)
                    invoke Update Entity(UserMenu)
                        invoked.Description = ParamDescription
                else
                if (EntityType.Page)
                    invoke Update Entity(UserPage)
                        invoked.Description = ParamDescription
                else
                if (EntityType.CardView)
                    invoke Update Entity(UserCardView)
                        invoked.Description = ParamDescription
                else
                if (EntityType.Navigation)
                    invoke Update Entity(UserNavigation)
                        invoked.Description = ParamDescription
                else
                if (EntityType.DrillList)
                    invoke Update Entity(UserDrillList)
                        invoked.Description = ParamDescription
                else
                if (EntityType.ProductLine)
                    invoke Update Entity(UserProd)
                        invoked.Description = ParamDescription
                else
                if (EntityType.WebApplication)
                    invoke Update Entity(UserWebApp)
                        invoked.Description = ParamDescription
                else
                if (EntityType.Field)
                    invoke Update Entity(UserField)
                        invoked.Description = ParamDescription
                else
                if (EntityType.Relation)
                    invoke Update Entity(UserRelation)
                        invoked.Description = ParamDescription
                else
                if (EntityIsUserAction)
                    invoke Update Entity(UserAction)
                        invoked.Description = ParamDescription
                else
                if (EntityType.Cube)
                    invoke Update Entity(UserCubeDeployed)
                        invoked.Description = ParamDescription
                else
                if (EntityType.CubeConfiguration)
                    invoke Update Entity(UserCube)
                        invoked.Description = ParamDescription
                else
                if (EntityType.WebServiceInterface)
                    invoke Update Entity(UserWebServiceInterface)
                        invoked.Description = ParamDescription
                else
                if (EntityType.BusinessClass)
                    invoke Update Entity(UserBusinessClass)
                        invoked.Description = ParamDescription
               	else
               	if (EntityType.KeyField)
                    invoke Update Entity(UserKeyField)
                        invoked.Description = ParamDescription
               	else
               	if (EntityType.SecurityClass)
                    invoke Update Entity(SecurityClass)
                        invoked.Description = ParamDescription
               	else
               	if (EntityType.Report)
               		invoke Update Entity(UserSJRptMap)
                        invoked.Description = ParamDescription
                else
                    constraint(false)
                        "<NotImplementedMsg>"

	    Delete is an Instance Action
	    	valid when (CanDelete)
			disable multiple instance selection   
            confirmation required
                "AreYouSureYouWantTo_Delete?"

            Action Rules
                if (EntityType.List)
                    invoke Delete Entity(UserList)
                else
                if (EntityType.Form)
                    invoke Delete Entity(UserForm)
                else
                if (EntityType.Menu)
                    invoke Delete Entity(UserMenu)
                else
                if (EntityType.Page)
                    invoke Delete Entity(UserPage)
                else
                if (EntityType.CardView)
                    invoke Delete Entity(UserCardView)
                else
                if (EntityType.Navigation)
                    invoke Delete Entity(UserNavigation)
                else
                if (EntityType.DrillList)
                    invoke Delete Entity(UserDrillList)
                else
                if (EntityType.ProductLine)
                    invoke Delete Entity(UserProd)
                else
                if (EntityType.WebApplication)
                    invoke Delete Entity(UserWebApp)
                else
                if (EntityType.Field)
                    invoke Delete Entity(UserField)
                else
                if (EntityType.Relation)
                    invoke Delete Entity(UserRelation)
                else
                if (EntityIsUserAction)
                    invoke Delete Entity(UserAction)
                else
                if (EntityType.Cube)
                    invoke Delete Entity(UserCubeDeployed)
                else
                if (EntityType.CubeConfiguration)
                    invoke Delete Entity(UserCube)
                else
                if (EntityType.WebServiceInterface)
                    invoke Delete Entity(UserWebServiceInterface)
               	else
               	if (EntityType.BusinessClass)
               		invoke Delete Entity(UserBusinessClass)
               	else
               	if (EntityType.KeyField)
               		invoke Delete Entity(UserKeyField)
               	else
               	if (EntityType.SecurityClass)
               		invoke Delete Entity(SecurityClass)
               	else
               	if (EntityType.Report)
               		invoke Delete Entity(UserSJRptMap)
                else
                    constraint(false)
                        "<NotImplementedMsg>"

	    Activate is an Instance Action
            valid when (CanActivate)
            completion message is "<Category>_Activated"

            Action Rules
                if (EntityType.List)
                    invoke Activate Entity(UserList)
                else
                if (EntityType.Form)
                    invoke Activate Entity(UserForm)
                else
                if (EntityType.Menu)
                    invoke Activate Entity(UserMenu)
                else
                if (EntityType.Page)
                    invoke Activate Entity(UserPage)
                else
                if (EntityType.CardView)
                    invoke Activate Entity(UserCardView)
                else
                if (EntityType.Navigation)
                    invoke Activate Entity(UserNavigation)
                else
                if (EntityType.DrillList)
                    invoke Activate Entity(UserDrillList)
                else
                if (EntityType.ProductLine)
                    invoke Activate Entity(UserProd)
                else
                if (EntityType.WebApplication)
                    invoke Activate Entity(UserWebApp)
                else
                if (EntityType.Field)
                    invoke Activate Entity(UserField)
                else
                if (EntityType.Relation)
                    invoke Activate Entity(UserRelation)
                else
                if (EntityIsUserAction)
                    invoke Activate Entity(UserAction)
                else
                if (EntityType.Cube)
                    invoke Activate Entity(UserCubeDeployed)
                else
                if (EntityType.CubeConfiguration)
                    invoke Activate Entity(UserCube)
                else
                if (EntityType.WebServiceInterface)
                    invoke Activate Entity(UserWebServiceInterface)
                else
               	if (EntityType.ImageMap)
               		invoke Activate Entity(UserImageMap)
               	else
               	if (EntityType.SecurityClass)
               		invoke Activate Entity(SecurityClass)
               	else
               	if (EntityType.BusinessClass)
               		invoke Activate Entity(UserBusinessClass)
               	else
               	if (EntityType.KeyField)
               		invoke Activate Entity(UserKeyField)
               	else
               	if (EntityType.Report)
               		invoke Activate Entity(UserSJRptMap)
                else
                    constraint(false)
                        "<NotImplementedMsg>"

	    Deactivate is an Instance Action
            valid when (CanDeactivate)
            completion message is "<Category>_Deactivated"
            confirmation required
                "AreYouSureYouWantTo_Deactivate?"

            Action Rules
                if (EntityType.List)
                    invoke Deactivate Entity(UserList)
                else
                if (EntityType.Form)
                    invoke Deactivate Entity(UserForm)
                else
                if (EntityType.Menu)
                    invoke Deactivate Entity(UserMenu)
                else
                if (EntityType.Page)
                    invoke Deactivate Entity(UserPage)
                else
                if (EntityType.CardView)
                    invoke Deactivate Entity(UserCardView)
                else
                if (EntityType.Navigation)
                    invoke Deactivate Entity(UserNavigation)
                else
                if (EntityType.DrillList)
                    invoke Deactivate Entity(UserDrillList)
                else
                if (EntityType.ProductLine)
                    invoke Deactivate Entity(UserProd)
                else
                if (EntityType.WebApplication)
                    invoke Deactivate Entity(UserWebApp)
                else
                if (EntityType.Field)
                    invoke Deactivate Entity(UserField)
                else
                if (EntityType.Relation)
                    invoke Deactivate Entity(UserRelation)
                else
                if (EntityIsUserAction)
                    invoke Deactivate Entity(UserAction)
                else
                if (EntityType.Cube)
                    invoke Deactivate Entity(UserCubeDeployed)
                else
                if (EntityType.CubeConfiguration)
                    invoke Deactivate Entity(UserCube)
                else
                if (EntityType.WebServiceInterface)
                    invoke Deactivate Entity(UserWebServiceInterface)
                else
               	if (EntityType.ImageMap)
               		invoke Deactivate Entity(UserImageMap)
               	else
               	if (EntityType.SecurityClass)
               		invoke Deactivate Entity(SecurityClass)
               	else
               	if (EntityType.BusinessClass)
               		invoke Deactivate Entity(UserBusinessClass)
               	else
               	if (EntityType.KeyField)
               		invoke Deactivate Entity(UserKeyField)
               	else
               	if (EntityType.Report)
               		invoke Deactivate Entity(UserSJRptMap)
                else
                    constraint(false)
                        "<NotImplementedMsg>"

        EditWithComparisonInline is an Instance Action
        	valid when (CanEdit)
            completion message is "Changes_Saved"
            disable multiple instance selection
            restricted

            Parameters
                LPL                 is LPL

   			Parameter Rules
                LPL       
                    required
                    initial value is EditLPLInitialValue

            Action Rules
            	include EditLPLRule

        EditWithComparison is an Instance Action
        	valid when (CanEdit)
            completion message is "Changes_Saved"
            disable multiple instance selection
            restricted

            Parameters
            	HideDiff			is Boolean
            	CompareLPL			is LPL
                LPL            		is LPL
                	default label is "LPL"

   			Parameter Rules
                LPL       
                    required
                    initial value is EditLPLInitialValue
                CompareLPL
                    required
                    initial value is EditLPLInitialValue

            Action Rules
            	include EditLPLRule

        Edit is an Instance Action
        	valid when (CanEdit)
            completion message is "Changes_Saved"
            disable multiple instance selection

            Parameters
                LPL                 is LPL

   			Parameter Rules
                LPL       
                    required
                    initial value is EditLPLInitialValue

            Action Rules
            	include EditLPLRule

        DisableDataTranslation is an Instance Action
            restricted
            valid when (CanGUIEditProdLine)
            completion message is "Data_Translation_Disabled"
            disable multiple instance selection

            Action Rules
                invoke EvaluateDataTranslation
                    invoked.DisableTranslationsPrm = true

        EnableDataTranslation is an Instance Action
            restricted
            valid when (CanGUIEditProdLine)
            completion message is "Data_Translation_Enabled"
            disable multiple instance selection

            Action Rules
                invoke EvaluateDataTranslation
                    invoked.DisableTranslationsPrm = false

        EvaluateDataTranslation is an Instance Action
            restricted
            valid when (CanGUIEditProdLine)
            completion message is "Changes_Saved"
            disable multiple instance selection

            Parameters
                DisableTranslationsPrm is Boolean
                    default label is "DisableTranslations"

            Parameter Rules
                DisableTranslationsPrm
                    initial value is TEnableTranslations

            Local Fields
                LocalLPLParam is LPL

            Action Rules
                constraint (Status.Active)
                    "ProductLineConfigurationMustBeActive"

                constraint (ImplementsDataTranslations)
                    "ProductLineDoesNotImplementDataTranslations"

			    invoke Update Entity(UserProd)
					invoked.LPL = LocalLPLParam

        AddSubject is an Instance Action
            valid when (CanGUIEditProdLine)
            completion message is "Subject_Added"
            disable multiple instance selection

            Parameters
                SubjectPrm is LPLName
                    default label is "Subject"

            Parameter Rules
                SubjectPrm
                    required
                    LocSubject = SubjectPrm
                    constraint (!SubjectRel exists)
                        "SubjectAlreadyExists"

            Local Fields
                LocalLPLParam is LPL

            Action Rules
                constraint (Status.Active)
                    "ProductLineConfigurationMustBeActive"

			    invoke Update Entity(UserProd)
					invoked.LPL = LocalLPLParam

        RemoveSubject is an Instance Action
            valid when (CanGUIEditProdLine)
            completion message is "Subject_Removed"
            disable multiple instance selection

            Parameters
                SubjectPrm is a BusinessSubject
                    default label is "Subject"

            Parameter Rules
                SubjectPrm
                    required
                    LocSubject = SubjectPrm
                    constraint (SubjectPrm.IsPredefined)
                        "SubjectIsPredefinedAndCanNotBeRemoved"

            Local Fields
                LocalLPLParam is LPL

            Action Rules
                constraint (Status.Active)
                    "ProductLineConfigurationMustBeActive"

			    invoke Update Entity(UserProd)
					invoked.LPL = LocalLPLParam

        ConfigureProductLine is an Update Action
            valid when (EntityType.ProductLine)

        MakePersonalization is an Instance Action
            completion message is "ConfigurationIsNowYourPersonalization"
            valid when (IsMakePersonalizationValid)
            confirmation required
                "MoveThis_ConfigurationAsYour_Personalization?"

            Action Rules
                if (EntityType.List)
                    invoke Update Entity(UserList)
                        invoked.Actor = actor
                else
                if (EntityType.Form)
                    invoke Update Entity(UserForm)
                        invoked.Actor = actor
                else
                if (EntityType.Menu)
                    invoke Update Entity(UserMenu)
                        invoked.Actor = actor
                else
                if (EntityType.Page)
                    invoke Update Entity(UserPage)
                        invoked.Actor = actor
                else
                if (EntityType.CardView)
                    invoke Update Entity(UserCardView)
                        invoked.Actor = actor
                else
                    constraint(false)
                        "<NotImplementedMsg>"

        MakeConfiguration is an Instance Action
            completion message is "PersonalizationIsNowA_Configuration"
            valid when (IsMakeConfigurationValid)
            confirmation required
                "MoveThis_PersonalizationToA_Configuration?" 


            Action Rules
                if (EntityType.List)
                    invoke Update Entity(UserList)
                        invoked.Actor = blank
                else
                if (EntityType.Form)
                    invoke Update Entity(UserForm)
                        invoked.Actor = blank
                else
                if (EntityType.Menu)
                    invoke Update Entity(UserMenu)
                        invoked.Actor = blank
                else
                if (EntityType.Page)
                    invoke Update Entity(UserPage)
                        invoked.Actor = blank
                else
                if (EntityType.CardView)
                    invoke Update Entity(UserCardView)
                        invoked.Actor = blank
                else
                    constraint(false)
                        "<NotImplementedMsg>"

        OverridePersonalizations is an Instance Action
            completion message is "PersonalizationsSuccessfullyOverridden:<OverriddenCount>record(s)Changed"
            disable multiple instance selection
            valid when (IsOverridePersonalizationsValid)
            confirmation required
                "OverrideAllPersonalizations_(\DisplayName_'<DisplayName>'-_\EntityType_<EntityType>)WithThisConfiguration?"


            Action Rules
                if (EntityType.List)
                    invoke OverridePersonalizations Entity(UserList)
                        invoked.Config = RelUserList.UserList
                else
                if (EntityType.Form)
                    invoke OverridePersonalizations Entity(UserForm)
                        invoked.Config = RelUserForm.UserForm
                else
                if (EntityType.Menu)
                    invoke OverridePersonalizations Entity(UserMenu)
                        invoked.Config = RelUserMenu.UserMenu
                else
                if (EntityType.Page)
                    invoke OverridePersonalizations Entity(UserPage)
                        invoked.Config = RelUserPage.UserPage
                else
                if (EntityType.CardView)
                    invoke OverridePersonalizations Entity(UserCardView)
                        invoked.Config = RelUserCardView.UserCardView
                else
                    constraint(false)
                        "<NotImplementedMsg>"

        SharePersonalization is an Instance Action
            default label is "Share"
            completion message is "PersonalizationShared"
            valid when (IsShareable)
            Parameters
                ConfigEntity
                Actor
                ActorGroup
                OverrideExistingPersonalizations    is Numeric 1
                    States
                        Skip        value is 1
                        Overwrite   value is 2
                ActorGroupDescendants               is Boolean

            Parameter Rules
                ConfigEntity
                    required
                    if (ConfigEntity.Status.Inactive)
                        confirmation required
                            "PersonalizationIsInactive.DoYouWantToContinue?"
                    if (ConfigEntity.Status.Invalid)
                        confirmation required
                            "PersonalizationIsInvalid.DoYouWantToContinue?"
                Actor
                    if (ActorGroup not entered)
                        required
                            "ActorIsRequiredIf_Actor_GroupIsNotUsed"
                    else
                        cannot be entered
                            "If_Actor_GroupIsUsedYouCannotEnterActor"
                ActorGroup
                    if (Actor not entered)
                        required
                            "Actor_GroupIsRequiredIf_ActorIsNotUsed"
                    else
                        cannot be entered
                            "If_ActorIsUsedYouCannotEnter_Actor_Group"
                OverrideExistingPersonalizations
                    required
                    initial value is OverrideExistingPersonalizations.Skip

            Action Rules
                if (Actor not entered)
                    if (!ActorGroupDescendants) 
                        for each ActorGroup.GroupMemberRel

                            invoke SharePersonalization Entity(UserList)
                                invoked.CopyFromList = Entity(UserList).UserList
                                invoked.CopyToActor = each.Actor
                                invoked.OverrideExistingPersonalizations = OverrideExistingPersonalizations
                    else 
                        for each ActorGroup.ActorGroupMemberShadow set

                            invoke SharePersonalization Entity(UserList)
                                invoked.CopyFromList = Entity(UserList).UserList
                                invoked.CopyToActor = each.Actor
                                invoked.OverrideExistingPersonalizations = OverrideExistingPersonalizations
                else
                    invoke SharePersonalization Entity(UserList)
                        invoked.CopyFromList = Entity(UserList).UserList
                        invoked.CopyToActor = Actor
                        invoked.OverrideExistingPersonalizations = OverrideExistingPersonalizations

		TagItem is an Instance Action
			valid when (ValidToTag)
			Parameters
				ParamConfigurationTag is a ConfigurationTag
					default label is "Tag"
				ParamTagRelated is Boolean
					default label is "TagKnownRelatedConfiguredItems"
				ParamTagCopiedFrom is Boolean
					default label is "TagSecurityClassThisWasCopiedFrom"
					
			Parameter Rules
				ParamTagRelated
					initial value is DisplayRelatedOptionButton
						
			Entrance Rules
				if (not EntityType.BusinessClass and not EntityType.KeyField and not EntityIsUserAction) 
					if (Status.Inactive)
						confirmation required
							"ItemIsInactive,TagAnyway?"
							
					if (Status.Invalid)
						confirmation required
							"ItemIsInvalid,TagAnyway?"

			Action Rules
				if (EntityType.BusinessClass) 
				 	invoke TagItem RelUserBusinessClass
				 		invoked.ParamConfigurationTag = ParamConfigurationTag
				 		invoked.ParamTagRelated = ParamTagRelated
				else
				if (EntityType.KeyField)
					invoke TagItem RelUserKeyField
						invoked.ParamConfigurationTag = ParamConfigurationTag
						invoked.ParamTagRelated = ParamTagRelated
				else
				if (EntityIsUserAction)
					invoke TagItem RelUserAction
						invoked.ParamConfigurationTag = ParamConfigurationTag
						invoked.ParamTagRelated = ParamTagRelated
				else
				if (EntityType.SecurityClass)
					invoke TagItem RelSecurityClass
						invoked.ParamConfigurationTag = ParamConfigurationTag
						invoked.ParamTagCopiedFrom 	  = ParamTagCopiedFrom
				else
					invoke Create ConfigurationTagItem
						invoked.ConfigurationTag = ParamConfigurationTag
						invoked.ConfigurationTagItem.Reference = Entity
						
		ConvertToInlineSearchForm is an Instance Action 
			valid when (CanConvertToIlineSearchForm)
			completion message is "<Entity(UserList).SearchFormConvertedMessage>"
			
			Action Rules
				invoke ConvertToInlineSearchForm Entity(UserList)			
									











		ValidateConfigurations is a Set Action
			run in foreground
			no records message is "ProcessingComplete"
			Parameters
				UpdateConfigStatus is Boolean
				StrictParsing is Boolean
			Instance Selection
				where (false)
			Action Rules
				Empty Set Rules
					invoke ValidateConfigurations ValidateConfigsTask in foreground
						invoked.UpdateConfigStatus   = UpdateConfigStatus
						invoked.ConfigBundleSnapshot = blank
						invoked.ProcessRollback = false
						invoked.StrictParsing = StrictParsing
						
		ScheduleValidateConfigurations is a Set Action
			run in background
			no records message is "ProcessingComplete"
			Parameters
				UpdateConfigStatus is Boolean
				StrictParsing is Boolean
				EmailAddresses is MultiEmailAddressField
			Local Fields
				Results is Text
			Parameter Rules
				UpdateConfigStatus
					if (UpdateConfigStatus)
						confirmation required
							"UpdatingTheConfigurationStatusCouldCauseChangesWhenThisActionRuns.AreYouSure?"
				StrictParsing
					initial value is true
			Instance Selection
				where (false)
			Action Rules
				Empty Set Rules
					invoke ValidateConfigurations ValidateConfigsTask in foreground
						assign result to Results
						invoked.UpdateConfigStatus   = UpdateConfigStatus
						invoked.ConfigBundleSnapshot = blank
						invoked.ProcessRollback = false
						invoked.StrictParsing = StrictParsing
						
					if (EmailAddresses entered)
						send email
		                	to		EmailAddresses
		                	from	actor.ContactInfo.EmailAddress
		                	subject	"ConfigurationValidationResult"
		                	Contents	
		                		"ConfigurationValidationResultAttached"
	                		attachment Results
	                			name is "Results.txt"
	                			mime type is "text/plain"

        ExtendSecurityClass is an Instance Action
            valid when (IsSecurityClass)
            disable multiple instance selection
            completion message is "SecurityClassExtended"

            Parameters
                ParamName is Alpha size 100
                    default label is "Name"

            Parameter Rules
                ParamName
                    required

            Action Rules
               	if (EntityType.SecurityClass)
               		invoke CreateExtended Entity(SecurityClass)
               		    invoked.ExtendFromParam = Entity(SecurityClass).SecurityClass
               		    invoked.NameParam = ParamName

        CopySecurityClass is an Instance Action
            valid when (IsSecurityClass)
            disable multiple instance selection
            completion message is "SecurityClassCopied"

            Parameters
                ParamName is Alpha size 100
                    default label is "SecurityClassName"

            Parameter Rules
                ParamName
                    required

            Action Rules
               	if (EntityType.SecurityClass)
               		invoke CreateCopy Entity(SecurityClass)
               		    invoked.CopiedFromParam = Entity(SecurityClass).SecurityClass
               		    invoked.NameParam = ParamName

        UpdateInlineStorage is an Instance Action
            valid when (CanUpdateInlineStorage)
            completion message is "InlineStorageUpdateSubmitted"
            disable multiple instance selection

            Action Rules
                invoke UpdateInlineStorage Entity(UserField)
                    invoked.PrmBusinessClass = Entity(UserField).BusinessClass

	Relations

        ConfigEntityRel
            one-to-many relation to ConfigEntity
            Field Mapping uses ByBusinessView
            Instance Selection
                where (IsConfiguration)

		ConfigEntityResultsRel
			one-to-many relation to ConfigEntityResults
			Field Mapping uses ByCreateStamp

		ValidateConfigurationsResultsRel
			one-to-many relation using ConfigEntityResultsRel
			Instance Selection
				where (related.Type.ValidateInvalid)

        RelBusinessView
            one-to-one relation to BusinessView
            Field Mapping uses symbolic key
                related.BusinessView = BusinessView

		RelUserBusinessClass
			one-to-one relation to UserBusinessClass
			valid when (EntityType.BusinessClass)
			Field Mapping uses symbolic key
				related.UserBusinessClass = ConfigEntity

		RelUserRelation
			one-to-one relation to UserRelation
			valid when (EntityType.Relation)
			Field Mapping uses symbolic key
				related.UserRelation = ConfigEntity

		RelUserKeyField
			one-to-one relation to UserKeyField
			valid when (EntityType.KeyField)
			Field Mapping uses symbolic key
				related.UserKeyField = ConfigEntity

		RelUserField
			one-to-one relation to UserField
			valid when (EntityType.Field)
			Field Mapping uses symbolic key
				related.UserField = ConfigEntity

		RelUserAction
			one-to-one relation to UserAction
			valid when (EntityIsUserAction)
			Field Mapping uses symbolic key
				related.UserAction = ConfigEntity

		RelUserCube
			one-to-one relation to UserCube
			valid when (EntityType.CubeConfiguration)
			Field Mapping uses symbolic key
				related.UserCube = ConfigEntity
		
		RelUserCubeDeployed
			one-to-one relation to UserCubeDeployed
			valid when (EntityType.Cube)
			Field Mapping uses symbolic key
				related.UserCubeDeployed = ConfigEntity

		RelUserList
			one-to-one relation to UserList
			valid when (EntityType.List)
			Field Mapping uses symbolic key
				related.UserList = ConfigEntity

		RelUserForm
			one-to-one relation to UserForm
			valid when (EntityType.Form)
			Field Mapping uses symbolic key
				related.UserForm = ConfigEntity

		RelUserMenu
			one-to-one relation to UserMenu
			valid when (EntityType.Menu)
			Field Mapping uses symbolic key
				related.UserMenu = ConfigEntity

		RelUserPage
			one-to-one relation to UserPage
			valid when (EntityType.Page)
			Field Mapping uses symbolic key
				related.UserPage = ConfigEntity

		RelUserReport
			one-to-one relation to UserReport
			valid when (EntityType.Report)
			Field Mapping uses symbolic key
				related.UserReport = ConfigEntity

		RelUserImage
			one-to-one relation to UserImage
			valid when (EntityType.ImageMap)
			Field Mapping uses symbolic key
				related.UserImage = ConfigEntity

		RelUserProd
			one-to-one relation to UserProd
			valid when (EntityType.ProductLine)
			Field Mapping uses symbolic key
				related.UserProd = ConfigEntity

		RelSecurityClass
			one-to-one relation to SecurityClass
			valid when (EntityType.SecurityClass)
			Field Mapping uses symbolic key
				related.SecurityClass = Name

		RelUserCardView
			one-to-one relation to UserCardView
			valid when (EntityType.CardView)
			Field Mapping uses symbolic key
				related.UserCardView = ConfigEntity
				
		RelUserNavigation
			one-to-one relation to UserNavigation
			valid when (EntityType.Navigation)
			Field Mapping uses symbolic key
				related.UserNavigation = ConfigEntity
	
		RelUserDrillList
			one-to-one relation to UserDrillList
			valid when (EntityType.DrillList)
			Field Mapping uses symbolic key
				related.UserDrillList = ConfigEntity

		RelUserWebApp
			one-to-one relation to UserWebApp
			valid when (EntityType.WebApplication)
			Field Mapping uses symbolic key
				related.UserWebApp = ConfigEntity

		RelUserWebServiceInterface
			one-to-one relation to UserWebServiceInterface
			valid when (EntityType.WebServiceInterface)
			Field Mapping uses symbolic key
				related.UserWebServiceInterface = ConfigEntity

        UpdateStampActorRel
            one-to-one relation to Actor
            Field Mapping uses symbolic key
                related.Actor = UpdateStamp.Actor

        ActorRel
            one-to-one relation to Actor
            Field Mapping uses symbolic key
                related.Actor = Actor


        PersonalizedUserListsRel                                   
            one-to-many relation to UserList
            valid when (EntityType.List)
            Field Mapping uses symbolic key
            Instance Selection
                where (related.BusinessView     = BusinessView
                and    related.BusinessList        = Name
                and    not related.GlobalList
                and    not related.IsFolder)


        PersonalizedUserFormsRel
            one-to-many relation to UserForm
            valid when (EntityType.Form)
            Field Mapping uses symbolic key
            Instance Selection
                where (related.BusinessView     = BusinessView
                and    related.BusinessForm        = Name
                and    not related.Global
                and    not related.IsFolder)


        PersonalizedUserCardViewsRel
            one-to-many relation to UserCardView
            valid when (EntityType.CardView)
            Field Mapping uses symbolic key
            Instance Selection
                where (related.BusinessView     = BusinessView
                and    related.BusinessCardView    = Name
                and    not related.Global
                and    not related.IsFolder)


        PersonalizedUserPagesRel
            one-to-many relation to UserPage
            valid when (EntityType.Page)
            Field Mapping uses symbolic key
            Instance Selection
                where (related.UserPageName = Name
                and    not related.Global
                and    not related.HasFolder)


        PersonalizedUserMenusRel
            one-to-many relation to UserMenu
            valid when (EntityType.Menu)
            Field Mapping uses symbolic key
            Instance Selection
                where (related.UserMenuName = Name
                and    not related.Global
                and    not related.HasFolder)

        ApplicationJarRel is an ApplicationJar set

        PreviousVersionUIChangeRel
            one-to-one relation to ApplicationUIChange
            Field Mapping uses part of key
                related.ApplicationJar   = last ApplicationJarRel.ApplicationJar
		        related.ApplicationUIKey.UIType = ApplicationChangeUIType
		        related.ApplicationUIKey.Key1 = ApplicationChangeUIKey1
		        related.ApplicationUIKey.Key2 = ApplicationChangeUIKey2

		BusinessListRel
			one-to-one relation to BusinessList
			Field Mapping uses symbolic key
				related.BusinessView = BusinessView
				related.BusinessList = Name

		BusinessFormRel
			one-to-one relation to BusinessForm
			Field Mapping uses symbolic key
				related.BusinessView = BusinessView
				related.BusinessForm = Name

		BusinessPageRel
			one-to-one relation to BusinessPage
			Field Mapping uses symbolic key
				related.BusinessPage = Name

        BusinessMenuRel
            one-to-one relation to BusinessMenu
            Field Mapping uses symbolic key
                related.BusinessMenu = Name

		BusinessCardViewRel
			one-to-one relation to BusinessCardView
			Field Mapping uses symbolic key
				related.BusinessView = BusinessView
				related.BusinessCardView = Name
		
		BusinessNavigationRel
			one-to-one relation to BusinessNavigation
			Field Mapping uses symbolic key
				related.BusinessView = BusinessView
				related.BusinessNavigation = Name
				
		BusinessDrillListRel
			one-to-one relation to BusinessDrillList
			Field Mapping uses symbolic key
				related.BusinessView = BusinessView
				related.BusinessDrillList = Name

		WebAppRel
			one-to-one relation to WebApp
			Field Mapping uses symbolic key
				related.WebApp = Name

		TaggedItemsRel
            one-to-many relation to ConfigurationTagItem
            Field Mapping uses ByReference
            Instance Selection
                where (related.ConfigurationTagItem.Reference = Entity)

        TaggedItemsSearchRel
            one-to-many relation to ConfigurationTagItem
            Field Mapping uses ByReference
            Instance Selection
                where (related.ConfigurationTag like "*" + ConfigTagSearch + "*"
                and    related.ConfigurationTagItem.Reference = Entity)

        BusinessSubjectRel is an BusinessSubject set

		SubjectRel
			one-to-one relation to BusinessSubject
			Field Mapping uses symbolic key
				related.BusinessSubject = LocSubject

		RelUserActionSecurity
            one-to-one relation to SecurityClass
            valid when (IsSecurable)
            Field Mapping uses symbolic key
                related.SecurityClass   = DerivedSecurityClassName

        WhereUsedRel
            one-to-many relation to ConfigEntity
            Field Mapping uses symbolic key
            Instance Selection
                where (related.LPL matches "(?s)(.*)(\\W)" + ShortDisplayName + "(\\W)(.*)" and related.Entity != Entity)

        BusinessClassKeyFieldRel
            one-to-one relation to ConfigEntity
            valid when (EntityType.BusinessClass)
            Field Mapping uses symbolic key
                related.ConfigEntity    = Entity(UserBusinessClass).UserKeyField

        SnapshotItemsRel
            one-to-many relation to ConfigBundleSnapshotItem
            Field Mapping uses part of key
            Instance Selection
                where (related.ConfigBundleSnapshot = Snapshot)

		RelExtendedFromSecurityClass
			one-to-one relation to SecurityClass
			valid when (EntityType.SecurityClass)
			Field Mapping uses symbolic key
				related.SecurityClass = BaseClass

		RelCopiedFromSecurityClass
			one-to-one relation to SecurityClass
			valid when (EntityType.SecurityClass)
			Field Mapping uses symbolic key
				related.SecurityClass = CopiedFromSecurityClass
				
		DuplicateConfigRel
			one-to-many relation to ConfigEntity
			Field Mapping uses ByEntityType
				related.EntityType = EntityType
			   	related.BusinessView = BusinessView
			    related.Name = Name
			    related.Actor = Actor
			Instance Selection
				where (related.ConfigEntity != ConfigEntity
				and    !IsFolder) 
		
	Sets
		ByBusinessView
			Sort Order
			    BusinessView
			    EntityType
			    Name

		ByRecentlyUpdated
			Sort Order
			    UpdateStamp.TimeStamp
			    BusinessView
			    EntityType
			    Name

		ByEntityType
			Sort Order
				EntityType
			    BusinessView
			    Name
			    Actor
			Instance Selection
				where(!IsFolder)

		ByFolder
			Sort Order
			    UserFolder.BusinessObjectKey
			Instance Selection
				where(IsFolder)

		ConfigurationsByBusinessView
			Sort Order
			    BusinessView
			    EntityType
			    Name
            Instance Selection
                where(IsConfiguration)
