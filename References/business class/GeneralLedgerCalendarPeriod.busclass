GeneralLedgerCalendarPeriod is a BusinessClass
	default label is "GlobalLedgerCalendarPeriod"
	owned by GeneralLedger
	representative text is "<DerivedRepresentativeText>"

	
	prefix is GLCPd
	
	Ontology
		symbolic key is GeneralLedgerCalendarPeriod
			
	Patterns
        implements StaticJava
		implements ChildHierarchy
			children are ChildrenRel		
			child set is HierarchyDetailRel         
				child is SubordinatePeriod 
				aggregation percent is Weight
			top node when (IsTopNode)
		implements BODId

	Context Fields
		GeneralLedgerCalendar
		GeneralLedgerCalendarYear
		ParentCalendarYearMatch	
		GeneralLedgerCloseConfiguration
		GeneralLedgerCloseYear
		ReportingBasis
		SkipShadow
		AccountingEntity
		CreatingWeeksWithinMonths
		AnalysisYear	  
		FromSummaryPeriod
		InvokedByCalendar
#ifdef module integration
		FSMInboundBODTracker
#endif
		GeneralLedgerChartAccount
		AccountAnalysisSettings
		
	Persistent Fields
		DisplayPeriod		is Alpha 30
			translatable
		PeriodType			is Numeric 1
			States
				Year		     value is 1
				Quarter		     value is 2
				Month		     value is 3
				Week		     value is 4
				Day				 value is 8
				EndDate		     value is 5
				BeginningBalance value is 6
				TopNode          value is 7
				 
		Year				is a GeneralLedgerCalendarYear 
		Date				is Date    
		Quarter				is Numeric 1
			States
				Quarter1	value is 1
				Quarter2	value is 2
				Quarter3	value is 3
				Quarter4	value is 4
		Month				is Numeric 2
			States
				Period1		value is 1
				Period2		value is 2
				Period3     value is 3
				Period4		value is 4
				Period5		value is 5
				Period6		value is 6
				Period7		value is 7
				Period8		value is 8
				Period9		value is 9
				Period10	value is 10
				Period11	value is 11
				Period12	value is 12
				Period13	value is 13
		Week				is Numeric 2
			States
				Week1		value is 1
				Week2		value is 2
				Week3		value is 3
				Week4		value is 4
				Week5		value is 5
				Week6		value is 6	
				Week7		value is 7
				Week8		value is 8
				Week9		value is 9
				Week10		value is 10
				Week11		value is 11
				Week12		value is 12
				Week13		value is 13
				Week14		value is 14
				Week15		value is 15
				Week16		value is 16
				Week17		value is 17
				Week18		value is 18
				Week19		value is 19
				Week20		value is 20
				Week21		value is 21
				Week22		value is 22
				Week23		value is 23
				Week24		value is 24
				Week25		value is 25
				Week26		value is 26
				Week27		value is 27
				Week28		value is 28
				Week29		value is 29
				Week30		value is 30
				Week31		value is 31
				Week32		value is 32
				Week33		value is 33
				Week34		value is 34
				Week35		value is 35
				Week36		value is 36
				Week37		value is 37
				Week38		value is 38
				Week39		value is 39
				Week40		value is 40
				Week41		value is 41
				Week42		value is 42
				Week43		value is 43
				Week44		value is 44
				Week45		value is 45
				Week46		value is 46
				Week47		value is 47
				Week48		value is 48
				Week49		value is 49
				Week50		value is 50
				Week51		value is 51
				Week52		value is 52
				Week53		value is 53
		Day					 is Numeric 3 
		TopNode				 is AlphaUpper 20 
		IsTopNode			 is Boolean	  
		StartDateJulian		 is AlphaUpper 7
		EndDateJulian		 is AlphaUpper 7
				
	Transient Fields
		CreatePeriodType	is Numeric 1
			States
				Year		 value is 1
				EndDate		 value is 5			
		NewPeriod				is AlphaUpper 20
		CreateEndDate			is Date			
		ParentPeriod			is AlphaUpper 20
		IsClosePeriod			is Boolean
			derive value from ClosePeriodExists
		TransientStartDateJulian is AlphaUpper 7
			derive value from DerivedDisplayStartDateJulian
		TransientEndDateJulian   is AlphaUpper 7
			derive value from DerivedDisplayEndDateJulian
						
	Local Fields
		LocalTopNode			is AlphaUpper 20
		LocalPeriod		        is a GeneralLedgerCalendarPeriod
		LocalRelPeriod			is a GeneralLedgerCalendarPeriod 
		LocalYear				is Numeric 4
		LocalQuarter			is Numeric 1
		LocalMonth				is Alpha 2
		LocalMonthNumeric		is Numeric 2
		LocalWeek				is Alpha 2
		LocalWeekNumeric		is Numeric 2
		LocalDay				is Alpha 3
		LocalDayNumeric			is Numeric 3		
		LocalDate				is Date
		I1						is Numeric 3
		I2						is Numeric 3
		TempPeriod				is Numeric 3
		LocalBeginningBalanceKey is a GeneralLedgerCalendarPeriod
		LocalAlphaYear			is Alpha 4
		LocalAlphaDay			is Alpha 3
		LocalCloseConfiguration is a GeneralLedgerCloseConfiguration
		LocalCloseYear		    is a GeneralLedgerCloseYear
		TopNodeFound			is Boolean
		DatePeriod				is a GeneralLedgerCalendarPeriod
		LocalJulian				is Numeric 7
		LocalBeginPeriod		is a GeneralLedgerCalendarPeriod
		LocalEndPeriod			is a GeneralLedgerCalendarPeriod
		LocalYTDPeriod			is a GeneralLedgerCalendarPeriod
		LocalLTDPeriod			is a GeneralLedgerCalendarPeriod
		LocalParent				is a GeneralLedgerCalendarPeriod
		LocalChild				is a GeneralLedgerCalendarPeriod
		LocalPeriodType			is Alpha 1
		LocalActionCode					is an ActionCode
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
		SavePeriod				is a GeneralLedgerCalendarPeriod
		LookupYear				is Year
		LocalDateAlpha			is Alpha 8
		LocalPeriodTypeNumeric	is Numeric 1
		TempPeriodAlpha			is Alpha 3
		LocalYearAlpha			is Alpha 4
		LookupPeriod			is a GeneralLedgerCalendarPeriod
		SummaryPeriodArray
		LocalCreatedInHierarchy is Boolean
		LocalCreateForCurrentCalendar is Boolean
		
		TempDefaultYearDisplayPeriod    is Alpha 100
    		Text Variables
				Year						value is Year
				StartDateMM					value is DerivedStartDateMonth
				StartDateDD                 value is DerivedStartDateDay 
				StartDateYYYY    		    value is DerivedStartDate year
				StartDateMonthName			value is DerivedStartDate month name
				StartDateMonthAbbreviation	value is DerivedStartDate month short name
				EndDateMM					value is DerivedEndDateMonth
				EndDateDD            	    value is DerivedEndDateDay 
				EndDateYYYY    		        value is DerivedEndDate year
				EndDateMonthName			value is DerivedEndDate month name
				EndDateMonthAbbreviation	value is DerivedEndDate month short name

		TempDefaultQuarterDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is Year
				Quarter						value is DerivedNumericQuarter
				StartDateMM					value is DerivedStartDateMonth
				StartDateDD                 value is DerivedStartDateDay 
				StartDateYYYY    		    value is DerivedStartDate year
				StartDateMonthName			value is DerivedStartDate month name
				StartDateMonthAbbreviation	value is DerivedStartDate month short name
				EndDateMM					value is DerivedEndDateMonth
				EndDateDD            	    value is DerivedEndDateDay 
				EndDateYYYY    		        value is DerivedEndDate year
				EndDateMonthName			value is DerivedEndDate month name
				EndDateMonthAbbreviation	value is DerivedEndDate month short name

		TempDefaultMonthDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is Year
				Month						value is DerivedNumericMonth
				PaddedMonth					value is DerivedPaddedMonth  		
				StartDateMM					value is DerivedStartDateMonth
				StartDateDD                 value is DerivedStartDateDay 
				StartDateYYYY    		    value is DerivedStartDate year
				StartDateMonthName			value is DerivedStartDate month name
				StartDateMonthAbbreviation	value is DerivedStartDate month short name
				EndDateMM					value is DerivedEndDateMonth
				EndDateDD            	    value is DerivedEndDateDay 
				EndDateYYYY    		        value is DerivedEndDate year
				EndDateMonthName			value is DerivedEndDate month name
				EndDateMonthAbbreviation	value is DerivedEndDate month short name
				
		TempDefaultWeekDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is Year
				Week						value is DerivedNumericWeek
				PaddedWeek					value is DerivedPaddedWeek
				StartDateMM					value is DerivedStartDateMonth
				StartDateDD                 value is DerivedStartDateDay 
				StartDateYYYY    		    value is DerivedStartDate year
				StartDateMonthName			value is DerivedStartDate month name
				StartDateMonthAbbreviation	value is DerivedStartDate month short name
				EndDateMM					value is DerivedEndDateMonth
				EndDateDD            	    value is DerivedEndDateDay 
				EndDateYYYY    		        value is DerivedEndDate year
				EndDateMonthName			value is DerivedEndDate month name
				EndDateMonthAbbreviation	value is DerivedEndDate month short name	

		TempDefaultDayDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is Year
				Day							value is DerivedNumericDay
				PaddedDay					value is DerivedPaddedDay
				DateMM						value is DerivedEndDateMonth
				DateDD            	    	value is DerivedEndDateDay 
				DateYYYY    		        value is DerivedEndDate year   		
				MonthName					value is DerivedEndDate month name
				MonthAbbreviation			value is DerivedEndDate month short name
				DayName						value is DerivedEndDate day name
				DayNameAbbreviation			value is DerivedEndDate day name

		TempDefaultEndDateDisplayPeriod is Alpha up to 100
    		Text Variables
				Year						value is Year
				DateMM						value is DerivedDateMonth
				DateDD 						value is DerivedDateDay
				DateYYYY					value is Date year
				MonthName					value is Date month name
				MonthAbbreviation			value is Date month short name

		LocalBeginDate						is Alpha 8
		LocalGeneralLedgerCalendar			is like GeneralLedgerCalendar
		LocalReportingPeriod				is a GeneralLedgerCalendarPeriod
        LocalCurrency						is a Currency
        LocalSummaryAmountCalculated		is Boolean
		LocalDebitAmountCalculated			is Boolean
		LocalCreditAmountCalculated			is Boolean
        LocalCalculatedSummaryAmount		is like TotalAmount
		LocalCalculatedDebitAmount			is like TotalAmount
		LocalCalculatedCreditAmount			is like TotalAmount

		LocalNativeLPLBODTrigger			is Boolean
#ifdef module integration
		NewBODTracker  				is a FSMInboundBODTracker view
#endif
		LocalFSMInboundBODTracker	is Numeric 15
		Error            			is Boolean
	    ErrorMessage     			is Alpha 300
		LocalBODTrigger				is Boolean	
		BODActionCode				is Alpha 50
		LocalConfigurationParameter	is Alpha size up to 200

	Derived Fields
		DerivedNumericQuarter is a DerivedField
			type is Numeric 1
			return Quarter
			
		DerivedNumericMonth is a DerivedField
			type is Numeric 2
			return Month
			
		DerivedNumericWeek is a DerivedField
			type is Numeric 2
			return Week
			
		DerivedNumericDay is a DerivedField
			type is Numeric 3
			return Day
			
		DerivedPaddedMonth is a DerivedField
			type is Alpha 2
			LocalMonthNumeric = Month
			if (LocalMonthNumeric < 10)
				DerivedPaddedMonth	= "0" + LocalMonthNumeric
			else
				DerivedPaddedMonth 	= LocalMonthNumeric

		DerivedPaddedWeek is a DerivedField
			type is Alpha 2
			LocalWeekNumeric = Week
			if (LocalWeekNumeric < 10)
				DerivedPaddedWeek	= "0" + LocalWeekNumeric
			else
				DerivedPaddedWeek   = LocalWeekNumeric

		DerivedPaddedDay is a DerivedField
			type is Alpha 3
			LocalDayNumeric = Day
			if (LocalDayNumeric < 10)
				DerivedPaddedDay = "00" + LocalDayNumeric
			else
			if (LocalDayNumeric < 100)
				DerivedPaddedDay = "0" + LocalDayNumeric
			else
				DerivedPaddedDay = LocalDayNumeric

     	DerivedDefaultEndDateDisplayPeriod is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (PeriodType.EndDate)
	    		TempDefaultEndDateDisplayPeriod    = GeneralLedgerCalendar.DefaultEndDateDisplayPeriod
	    		DerivedDefaultEndDateDisplayPeriod = TempDefaultEndDateDisplayPeriod text
    			
    	DerivedDefaultYearDisplayPeriod is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (PeriodType.Year)
	    		TempDefaultYearDisplayPeriod 	 = GeneralLedgerCalendar.DefaultYearDisplayPeriod
	    		DerivedDefaultYearDisplayPeriod  = TempDefaultYearDisplayPeriod text

     	DerivedDefaultQuarterDisplayPeriod is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (PeriodType.Quarter)
	    		TempDefaultQuarterDisplayPeriod    = GeneralLedgerCalendar.DefaultQuarterDisplayPeriod
	    		DerivedDefaultQuarterDisplayPeriod = TempDefaultQuarterDisplayPeriod text
    		
    	DerivedDefaultMonthDisplayPeriod is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (PeriodType.Month)
	    		TempDefaultMonthDisplayPeriod 	 = GeneralLedgerCalendar.DefaultMonthDisplayPeriod
	    		DerivedDefaultMonthDisplayPeriod = TempDefaultMonthDisplayPeriod text
 
     	DerivedDefaultWeekDisplayPeriod is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (PeriodType.Week)
	  	  		TempDefaultWeekDisplayPeriod    = GeneralLedgerCalendar.DefaultWeekDisplayPeriod
	    		DerivedDefaultWeekDisplayPeriod = TempDefaultWeekDisplayPeriod text
	 
      	DerivedDefaultDayDisplayPeriod is a DerivedField
    		type is Alpha size 100
    		restricted
    		if (PeriodType.Day)
	    		TempDefaultDayDisplayPeriod     = GeneralLedgerCalendar.DefaultDayDisplayPeriod
	    		DerivedDefaultDayDisplayPeriod  = TempDefaultDayDisplayPeriod text
    		   		   		    			
		DerivedHierarchyDetailExists is a DerivedField
			type is Boolean
			if (HierarchyDetailRel exists)
				display "PeriodIs<GeneralLedgerCalendarPeriod>"
				display "SubordinateFound<first HierarchyDetailRel.SubordinatePeriod>"			
				return true
					
		StartDateNumeric is a DerivedField
			type is Numeric 7
			restricted
			return StartDateJulian

		EndDateNumeric is a DerivedField
			type is Numeric 7
			restricted
			return EndDateJulian

		NumberOfDays is a DerivedField
			type is Numeric 3
			restricted
			if (PeriodType.EndDate)
				return 1
			else
			if (!IsTopNode)			
				return ((EndDateNumeric  - StartDateNumeric) + 1)
				
		PriorYearAlpha is a DerivedField
			type is Alpha 4
			restricted
			return (Year - 1)
	
		DerivedCurrentDate is a DerivedField
			type is Date
        	restricted
			return current corporate date
	
		DerivedCurrentYear is a DerivedField
			type is Alpha 4
        	restricted
			return DerivedCurrentDate year

		DerivedCurrentYearDimValue is a DerivedField
			type is Alpha 30
			restricted
			return FinanceEnterpriseGroup + "/" + GeneralLedgerCalendarPeriod[1:2] + DerivedCurrentYear
			
		SamePeriodLastYear is a DerivedField
			type is Alpha 30
			restricted
			if (PeriodType.Week
			or  PeriodType.Month
			or  PeriodType.Quarter
			or  PeriodType.Day
			or  PeriodType.Year) 			
				I1 = 1
				while (I1 < 31)
					if (GeneralLedgerCalendarPeriod[I1] = "_")
						end while
					else
						I1 += 1
				I1 += 5
				return FinanceEnterpriseGroup + "/" + GeneralLedgerCalendarPeriod[1:2] + PriorYearAlpha + GeneralLedgerCalendarPeriod[I1:30]			

		YTDCrossReference is a DerivedField
			type is Alpha 30
			if (!PeriodType.TopNode and !GeneralLedgerCalendarPeriod like "*_YTD")
				if (PeriodType.Week
				or  PeriodType.Month
				or  PeriodType.Quarter
				or  PeriodType.Day
				or  PeriodType.Year)
					return FinanceEnterpriseGroup + "/" + GeneralLedgerCalendarPeriod + "_YTD"
				
		YTDCrossRefSPLY is a DerivedField
			type is Alpha 30
			if ((!PeriodType.TopNode and !SamePeriodLastYear like "*_YTD")
			and (PeriodType.Year or PeriodType.Month))
				return  FinanceEnterpriseGroup + "/" + SamePeriodLastYear + "_YTD"
				
		YearLink is a DerivedField
			type is Alpha 30		
			if (PeriodType.Year
			or  PeriodType.Quarter
			or  PeriodType.Month
			or  PeriodType.Week)
				I1 = 1
				while (I1 < 31)
					if (GeneralLedgerCalendarPeriod[I1] = "_")
						end while
					else
						I1 += 1
				I1 += 1
				return GeneralLedgerCalendarPeriod[I1:6]			

		MonthLink is a DerivedField
			type is Alpha 30		
			if (PeriodType.Year
			or  PeriodType.Quarter
			or  PeriodType.Month
			or  PeriodType.Week)
				I1 = 1
				while (I1 < 31)
					if (GeneralLedgerCalendarPeriod[I1] = "_")
						end while
					else
						I1 += 1
				I1 += 5
				return GeneralLedgerCalendarPeriod[I1:30]
	
		PeriodTypeName is a DerivedField
			type is Alpha 30
			restricted
			if (PeriodType.Year)
				return "Year"
			else
			if (PeriodType.Quarter)
				return "Quarter"
			else
			if (PeriodType.Month)
				return "Month"				
			else
			if (PeriodType.Week)
				return "Week"
			else
			if (PeriodType.Day)
				return "Day"
			else
			if (PeriodType.EndDate)
				return "EndDate"	
			else
			if (PeriodType.BeginningBalance)
				return "BeginningBalance"
			else
			if (PeriodType.TopNode)
				return "TopNode"				
			else
				return "Other"

		AlternateCaption is a DerivedField
			type is Alpha 120
			restricted
			if (PeriodType.Month)
				return DerivedStartDate month name
			if (!IsTopNode)
				return DisplayPeriod			
			if (CalendarRel exists)
				return CalendarRel.Description + " Top Level"
			if (YTDCalendarRel exists)
				return YTDCalendarRel.Description + " YTD Top Level"
			if (LTDCalendarRel exists)
				return LTDCalendarRel.Description + " LTD Top Level"				

		DerivedRepresentativeText	is a DerivedField
			type is Alpha 120
			restricted
			if (!IsTopNode)
				return DisplayPeriod
			if (CalendarRel exists)
				return CalendarRel.Description + " Top Level"
			if (YTDCalendarRel exists)
				return YTDCalendarRel.Description + " YTD Top Level"
			if (LTDCalendarRel exists)
				return LTDCalendarRel.Description + " LTD Top Level"

		DerivedWeight is a DerivedField
			type is Percent 6.3
			restricted
			if (GeneralLedgerCalendarPeriod like "*_YTD"
			or  PeriodType.BeginningBalance)
				return first SubordinateInYTDTopNodeRel.Weight
			else
			if (GeneralLedgerCalendarPeriod like "*_LTD")
				return first SubordinateInLTDTopNodeRel.Weight
			else
				return first SubordinateInTopNodeRel.Weight
							
		EndOfMonth		is a DerivedField
			type is Boolean
			restricted
			if (Date day = Date days in month)
				return true
				
		ValidDateForConfiguration is a DerivedField
			type is Boolean
			restricted
			if (GeneralLedgerCloseConfiguration.PeriodsAreEndOfMonth)
				if (EndOfMonth)
					return true
			else
				return true
				
		DerivedTopNode	is a DerivedField
			type is AlphaUpper 20
			restricted
			if (GeneralLedgerCalendar.TopNode entered)
				return GeneralLedgerCalendar.TopNode
			else
				return "NO_TOP_NODE"				

		DerivedYTDTopNode	is a DerivedField
			type is AlphaUpper 20
			restricted
			if (GeneralLedgerCalendar.TopNode entered)
				return GeneralLedgerCalendar.YTDTopNode
			else
				return "NO_YTD_TOP_NODE"	

		DerivedLTDTopNode	is a DerivedField
			type is AlphaUpper 20
			restricted
			if (GeneralLedgerCalendar.TopNode entered)
				return GeneralLedgerCalendar.LTDTopNode
			else
				return "NO_LTD_TOP_NODE"	
											
		SummaryNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"
			DisplayPeriod

		PrefixString	    	is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"
						
		DefaultDisplayPeriod is a DerivedField
			type is Alpha 30
			restricted
			if (PeriodType.EndDate)
				return DerivedDefaultEndDateDisplayPeriod
			else
			if (EndDateJulian entered) 
				if (PeriodType.Year)
					return DerivedDefaultYearDisplayPeriod
				else
				if (PeriodType.Quarter)
					return DerivedDefaultQuarterDisplayPeriod
				else
				if (PeriodType.Month)
					return DerivedDefaultMonthDisplayPeriod
				else
				if (PeriodType.Week)
					return DerivedDefaultWeekDisplayPeriod
				else
				if (PeriodType.Day)
					return DerivedDefaultDayDisplayPeriod

			I1 = 1
			while (I1 < 31)
				if (GeneralLedgerCalendarPeriod[I1] = "_")
					end while
				else
					I1 += 1
			I1 += 1		
			DefaultDisplayPeriod = GeneralLedgerCalendarPeriod[I1:30]  	
								
		DateWithinYearRange is a DerivedField
			type is Boolean
			restricted
			if (Year >= (GeneralLedgerCalendarYear - 1)
			and Year <= (GeneralLedgerCalendarYear + 1))
				return true

		DateWithinCloseYearRange is a DerivedField
			type is Boolean
			restricted
			if ((GeneralLedgerCloseYear entered)
			and (Date year >= (GeneralLedgerCloseYear - 1)
			and  Date year <= (GeneralLedgerCloseYear + 1)))
				if (GeneralLedgerCloseConfiguration.PeriodsAreEndOfMonth)
					if (EndOfMonth)
						return true
				else
					return true
			
		LastDateForPriorCloseYear is a DerivedField
			type is Date
			restricted
			LocalCloseConfiguration = GeneralLedgerCloseConfiguration
			LocalCloseYear          = (GeneralLedgerCloseYear - 1)
			return LocalCloseYear.last GeneralLedgerClosePeriod set.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date
							
		YearMatchesParent is a DerivedField
			type is Boolean
			restricted
			if (ParentCalendarYearMatch.Equal)
				if (Year = GeneralLedgerCalendarYear)
					return true
			else			
				return DateWithinYearRange
							
		YearMatch is a DerivedField
			type is Numeric 1
			restricted
			if (PeriodType.EndDate)
				return 2
			else
				return 1
									
		DerivedBeginningBalanceString is a StringField
			type is AlphaUpper 20
			restricted
			CreateEndDate year
			"000"

		DerivedBeginningBalanceForYear is a StringField
			type is AlphaUpper 20
			restricted
			Year
			"000"
			
		DerivedBeginningBalanceDisplayPeriod is a StringField
			type is Alpha 30
			restricted
			CreateEndDate year
			" Beginning Balance"
										
		NewEndDateString is a DerivedField
			type is AlphaUpper 20
			restricted
			LocalAlphaYear = LocalDate year
			LocalAlphaDay  = LocalDate year day
			NewEndDateString = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				NewEndDateString += "00"
			else
			if (LocalAlphaDay size = 2)
				NewEndDateString += "0"
			NewEndDateString += LocalAlphaDay 
									
		NewYearString is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"			
			Year
									
		NewQuarterString is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"					
			Year
			"Q"
			LocalQuarter
		
		NewMonthString is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"					
			Year
			"M"
			LocalMonth
			
		NewWeekString is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"		
			Year
			"W"
			LocalWeek				

		NewDayString is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"		
			Year
			"D"
			LocalDay
				
		PeriodName is a DerivedField
			type is Alpha 10
			restricted
			if (IsClosePeriod)
				return PeriodString
			else
			if (PotentialOrExistingClosePeriod)
				return BasisLabel
				
		PeriodString is a StringField
			type is Alpha 7
			restricted
			GeneralLedgerCloseYear
			"-"
			ClosePeriodRel.GeneralLedgerClosePeriod
								
		BasisLabel is a LabelField
			restricted
			"BasisDate"

		DerivedPeriodType is a DerivedField
			type is Numeric 1
			return PeriodType

		DerivedPreviousJulianDate is a DerivedField
			type is AlphaUpper 7
			restricted
			if ((!PreviousEndDateRel exists)
			or  (!last PreviousEndDateRel.GeneralLedgerCalendarPeriod.SubordinateInTopNodeRel exists))
				LocalPeriod = DerivedEndDateJulian
				LocalDate   = LocalPeriod.Date
				if(GeneralLedgerCalendar.CalendarType.544)
					if(WeeksInPeriodYearRel exists)
						LocalDate -= 7
					else
						LocalDate -= 35
				else
				if (GeneralLedgerCalendar.CalendarType.Months
				or 	GeneralLedgerCalendar.CalendarType.5253Week
				or  GeneralLedgerCalendar.CalendarType.445
				or  GeneralLedgerCalendar.CalendarType.454				
				or  GeneralLedgerCalendar.CalendarType.Other)
					LocalDate -= 1 month
				else
				if (GeneralLedgerCalendar.CalendarType.Weeks)
					LocalDate -= 7
				else
				if (GeneralLedgerCalendar.CalendarType.4WeekPeriods)
					LocalDate -= 28
				else




				if (GeneralLedgerCalendar.CalendarType.Days)
					LocalDate -= 1

  				LocalDate += 1
  				if (LocalDate > LocalPeriod.Date)
  					LocalDate = LocalPeriod.Date
				return NewEndDateString
								
			LocalDate = last PreviousEndDateRel.GeneralLedgerCalendarPeriod.Date
			if (LocalDate year day = LocalDate days in year)
				LocalJulian = (((LocalDate year + 1) * 1000) + 1)
				return LocalJulian
			else 						
				LocalJulian = (last PreviousEndDateRel.GeneralLedgerCalendarPeriod)
				return (LocalJulian + 1)
				
		DerivedStartDateJulian is a DerivedField
			type is AlphaUpper 7
			restricted
			if (PeriodType.EndDate)
				return GeneralLedgerCalendarPeriod
			if (PeriodType.BeginningBalance
			or  PeriodType.TopNode)
				return blank
			if (PeriodShadowSubordinateDatesRel exists)
				return (first PeriodShadowSubordinateDatesRel.GeneralLedgerCalendarPeriod.DerivedPreviousJulianDate)
			else
				return blank
			
		DerivedEndDateJulian is a DerivedField
			type is AlphaUpper 7
			restricted
			if (PeriodType.EndDate)
				return GeneralLedgerCalendarPeriod	
			if (PeriodType.BeginningBalance
			or  PeriodType.TopNode)
				return blank						
			return (last PeriodShadowSubordinateDatesRel.GeneralLedgerCalendarPeriod)				
		
		DerivedDisplayStartDateJulian is a DerivedField
			type is AlphaUpper 7
			restricted
			if (StartDateJulian entered)
				return StartDateJulian
			else
				return DerivedStartDateJulian

		DerivedDisplayEndDateJulian is a DerivedField
			type is AlphaUpper 7
			restricted
			if (EndDateJulian entered)
				return EndDateJulian
			else
				return DerivedEndDateJulian
										
		DerivedDEPMPeriod is a DerivedField
			type is AlphaUpper 7
			restricted
			if (PeriodType.Year)
				return Year
			if (PeriodType.Quarter)
				LocalQuarter = Quarter
				return "Q" + LocalQuarter + "_" + Year
			if (PeriodType.Month
			or  PeriodType.BeginningBalance)
				if (PeriodType.BeginningBalance)
					LocalMonthNumeric = 1
				else
					LocalMonthNumeric = Month
				if (Month < 10)
					return "0" + LocalMonthNumeric + "_" + Year
				else
					return MonthAndYearString
		
		MonthAndYearString is a StringField
			type is AlphaUpper 7
			restricted
			LocalMonthNumeric
			"_"
			Year

		DerivedPreviousYTDPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			I1 = LocalYTDPeriod size
			while (I1 > 0)
				if (LocalYTDPeriod[I1] = LocalPeriodType)
					I2 = I1
					I1 = 0
				else
					I1 -= 1
			if (LocalPeriodType = "M")					
				LocalMonthNumeric -= 1
				if (LocalMonthNumeric < 10)
					LocalMonth = ("0" + LocalMonthNumeric)
				else
					LocalMonth = LocalMonthNumeric
				DerivedPreviousYTDPeriod = (LocalYTDPeriod[1:I2] + (LocalMonth) + "_YTD")
			else
			if (LocalPeriodType = "W")
				LocalWeekNumeric -= 1			
				if (LocalWeekNumeric < 10)
					LocalWeek = ("0" + LocalWeekNumeric)
				else
					LocalWeek = LocalWeekNumeric
				DerivedPreviousYTDPeriod = (LocalYTDPeriod[1:I2] + (LocalWeek) + "_YTD")
			else
			if (LocalPeriodType = "D")
				LocalDayNumeric -= 1
				if (LocalDayNumeric < 10)
					LocalDay = ("00" + LocalDayNumeric)
				else
				if (LocalDayNumeric < 100)
					LocalDay = ("0" + LocalDayNumeric)
				else				
					LocalDay = LocalDayNumeric
				DerivedPreviousYTDPeriod = (LocalYTDPeriod[1:I2] + (LocalDay) + "_YTD")
				
		DerivedPreviousLTDPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			I1 = LocalLTDPeriod size
			while (I1 > 0)
				if (LocalLTDPeriod[I1] = LocalPeriodType)
					I2 = I1
					I1 = 0
				else
					I1 -= 1
			if (LocalPeriodType = "M")
				LocalMonthNumeric -= 1
				if (LocalMonthNumeric < 10)
					LocalMonth = ("0" + LocalMonthNumeric)
				else
					LocalMonth = LocalMonthNumeric
				DerivedPreviousLTDPeriod = (LocalLTDPeriod[1:I2] + (LocalMonth) + "_LTD")					
			else
			if (LocalPeriodType = "W")
				LocalWeekNumeric -= 1
				if (LocalWeekNumeric < 10)
					LocalWeek = ("0" + LocalWeekNumeric)
				else
					LocalWeek = LocalWeekNumeric
				DerivedPreviousLTDPeriod = (LocalLTDPeriod[1:I2] + (LocalWeek) + "_LTD")
			else
			if (LocalPeriodType = "D")
				LocalDayNumeric -= 1
				if (LocalDayNumeric < 10)
					LocalDay = ("00" + LocalDayNumeric)
				else
				if (LocalDayNumeric < 100)
					LocalDay = ("0" + LocalDayNumeric)
				else				
					LocalDay = LocalDayNumeric
				DerivedPreviousLTDPeriod = (LocalLTDPeriod[1:I2] + (LocalDay) + "_LTD")
														
		DerivedPriorYear is a DerivedField
			type is Year
			restricted
			return (Year - 1)
		
		DerivedPriorYearLTD is a StringField
			type is AlphaUpper 20
			restricted
			GeneralLedgerCalendar.CalendarSequence
			"_"
			LookupYear


		DerivedCurrentDatePeriodDimValue is a DerivedField
			type is Alpha 100 
			restricted





			if (GeneralLedgerCalendar.CalendarType.Weeks)
				LocalPeriodTypeNumeric = 4
			else
			if (GeneralLedgerCalendar.CalendarType.Days)
				LocalPeriodTypeNumeric = 8
			else
				LocalPeriodTypeNumeric = 3
			return first CurrentPeriodRel.GeneralLedgerCalendarPeriod cube dimension value
			
		DerivedStartDate is a DerivedField
			type is Date 
			restricted
			LocalDayNumeric = StartDateJulian[5:7]
			LocalDateAlpha  = StartDateJulian[1:4] + "0101" 
			LocalDate 		= LocalDateAlpha
			LocalDate 	   += (LocalDayNumeric - 1)
			return LocalDate
		
		DerivedStartDateMonth is a DerivedField
			type is Alpha 2
			if (DerivedStartDate month < 10)
				return "0" + DerivedStartDate month
			else
				return DerivedStartDate month
							
		DerivedStartDateDay is a DerivedField
			type is Alpha 2
			if (DerivedStartDate day < 10)
				return "0" + DerivedStartDate day
			else
				return DerivedStartDate day
					
		DerivedEndDate is a DerivedField
			type is Date 
			restricted
			LocalDayNumeric = EndDateJulian[5:7]
			LocalDateAlpha  = EndDateJulian[1:4] + "0101" 
			LocalDate 		= LocalDateAlpha
			LocalDate 	   += (LocalDayNumeric - 1)
			return LocalDate

		DerivedEndDateMonth is a DerivedField
			type is Alpha 2
			if (DerivedEndDate month < 10)
				return "0" + DerivedEndDate month
			else
				return DerivedEndDate month
							
		DerivedEndDateDay is a DerivedField
			type is Alpha 2
			if (DerivedEndDate day < 10)
				return "0" + DerivedEndDate day
			else
				return DerivedEndDate day

		DerivedDateMonth is a DerivedField
			type is Alpha 2
			if (Date month < 10)
				return "0" + Date month
			else
				return Date month
							
		DerivedDateDay is a DerivedField
			type is Alpha 2
			if (Date day < 10)
				return "0" + Date day
			else
				return Date day
														
		DerivedParentPeriodDimValue is a DerivedField
			type is Alpha 100 
			restricted
			LocalRelPeriod = GeneralLedgerCalendarPeriod
			if (GeneralLedgerCalendarPeriod like "*_YTD")
				return first YTDParentRel.GeneralLedgerCalendarPeriod cube dimension value
			else
			if (GeneralLedgerCalendarPeriod like "*_LTD")
				return first LTDParentRel.GeneralLedgerCalendarPeriod cube dimension value
			else			
				return first ParentRel.GeneralLedgerCalendarPeriod cube dimension value

		DerivedNextPeriodDimValue is a DerivedField
			type is Alpha 100 
			restricted
			if (!PeriodType.Week
			and !PeriodType.Month
			and !PeriodType.Quarter
			and !PeriodType.Day
			and !PeriodType.Year) 
				return GeneralLedgerCalendarPeriod cube dimension value
	
			LocalPeriodTypeNumeric = PeriodType
			
			LocalPeriod = first NextPeriodRel.GeneralLedgerCalendarPeriod cube dimension value
			
			if (!LocalPeriod entered)
				return GeneralLedgerCalendarPeriod cube dimension value
			else
				return LocalPeriod cube dimension value

		DerivedPreviousPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			if (!PeriodType.Week
			and !PeriodType.Month
			and !PeriodType.Quarter
			and !PeriodType.Day
			and !PeriodType.Year) 
				return GeneralLedgerCalendarPeriod
	
			LocalPeriodTypeNumeric = PeriodType
			
			LocalPeriod = last PreviousPeriodRel.GeneralLedgerCalendarPeriod
			
			if (!LocalPeriod entered)
				return GeneralLedgerCalendarPeriod
			else
				return LocalPeriod
								
		DerivedPreviousPeriodDimValue is a DerivedField
			type is Alpha 100 
			restricted
			if (!PeriodType.Week
			and !PeriodType.Month
			and !PeriodType.Quarter
			and !PeriodType.Day
			and !PeriodType.Year) 
				return GeneralLedgerCalendarPeriod cube dimension value
	
			LocalPeriodTypeNumeric = PeriodType
			
			LocalPeriod = last PreviousPeriodRel.GeneralLedgerCalendarPeriod cube dimension value
			
			if (!LocalPeriod entered)
				return GeneralLedgerCalendarPeriod cube dimension value
			else
				return LocalPeriod cube dimension value
			
		DerivedLTDBeginningBalancePeriodDimValue is a DerivedField
			type is Alpha 100
			restricted
			if (DerivedPreviousPeriod = GeneralLedgerCalendarPeriod)
				return blank
			else
				LocalPeriod = (((DerivedPreviousPeriod - "_LTD") - "_YTD") + "_LTD")	
				return LocalPeriod cube dimension value		

					
		DerivedLTDEndingBalancePeriodDimValue is a DerivedField
			type is Alpha 100 
			restricted
			LocalPeriod = (((GeneralLedgerCalendarPeriod - "_LTD") - "_YTD") + "_LTD")
			return LocalPeriod cube dimension value

			
		DerivedYTDBeginningBalancePeriodDimValue is a DerivedField
			type is Alpha 100 
			restricted

			if	((PeriodType.Month and Month.Period1)   
			or	(PeriodType.Week and Week.Week1)
			or 	(PeriodType.Quarter and Quarter.Quarter1)
			or 	(PeriodType.Year))

				LocalPeriod = DerivedBeginningBalanceForYear
				return LocalPeriod cube dimension value

			else
				LocalPeriod = (((DerivedPreviousPeriod - "_LTD") - "_YTD") + "_YTD")
				return LocalPeriod cube dimension value

						
		DerivedYTDEndingBalancePeriodDimValue is a DerivedField
			type is Alpha 100 
			restricted
			LocalPeriod = (((GeneralLedgerCalendarPeriod - "_LTD") - "_YTD") + "_YTD")
			return LocalPeriod cube dimension value


		UsedAsClosePeriod is a DerivedField
			type is Boolean
			restricted
			if (AccountingEntity entered)
				if (OpenPeriodsForEntityRel exists)
					return true
			else
				if (OpenPeriodsRel exists)
					return true
		
		BICalendarSequence  is a DerivedField
			type is AlphaUpper 8
			restricted
			if (CalendarRel exists)
				return CalendarRel.CalendarSequence
			else
			if (LTDCalendarRel exists)
				return LTDCalendarRel.CalendarSequence + "_LTD"
			else
			if (YTDCalendarRel exists)
				return YTDCalendarRel.CalendarSequence + "_YTD"
		
		IsEndOfQuarter is a DerivedField
			type is Boolean
			restricted
			if (GeneralLedgerCalendar entered
			and QuarterPeriodShadowRel exists)
				return true
				
		IsEndOfYear is a DerivedField
			type is Boolean
			restricted
			if (GeneralLedgerCalendar entered
			and YearPeriodShadowRel exists)
				return true
	
		DerivedClosePeriodName is a DerivedField
			type is Alpha 25
			return first OpenPeriodsRel.GeneralLedgerClosePeriod.PeriodName
		
		DerivedBeginDateGregorian is a DerivedField
			type is Date
			default label is untranslatable
			if (PeriodType.EndDate)
				LocalBeginDate = DisplayPeriod[1:6] + "01"
				return LocalBeginDate

		DynamicMeasure is a DerivedField
			type is LPLText
			restricted
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report1)
				DynamicMeasure = "NetReportAmount1"			
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report2)	
				DynamicMeasure = "NetReportAmount2"					
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report3)
				DynamicMeasure = "NetReportAmount3"			
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report4)
				DynamicMeasure = "NetReportAmount4"			
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report5)
				DynamicMeasure = "NetReportAmount5"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Functional)
				DynamicMeasure = "NetFunctionalAmount"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Alternate)
				DynamicMeasure = "NetAlternateAmount"	
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Alternate2)
				DynamicMeasure = "NetAlternateAmount2"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Alternate3)
				DynamicMeasure = "NetAlternateAmount3"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Units)
				DynamicMeasure = "NetUnitsAmount"

		DynamicMeasures is a DerivedField
			type is LPLText
			restricted
			if (AccountAnalysisSettingsRel.ReportingCurrency.Report1)
				DynamicMeasures = "NetReportAmount1\n"
				DynamicMeasures += "NetReportAmount1Debit\n"
				DynamicMeasures += "NetReportAmount1Credit"
			else
			if (AccountAnalysisSettingsRel.ReportingCurrency.Functional)
				DynamicMeasures = "NetFunctionalAmount\n"
				DynamicMeasures += "NetFunctionalAmountDebit\n"
				DynamicMeasures += "NetFunctionalAmountCredit"

        DerivedAmountDecimals is a DerivedField
			type is Numeric 1
            LocalCurrency = AccountAnalysisSettingsRel.DisplayReportingCurrency
			return LocalCurrency.NumberOfDecimals

    	CubeMap is a DerivedField
			type is LPLText
			restricted
			CubeMap = "related.GeneralLedgerTotal.EntityYearPeriod = LocalReportingPeriod\n"							
			CubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = GeneralLedgerChartAccountRel.GeneralLedgerChartAccount\n"
		    CubeMap += "related.Scenario = AccountAnalysisSettingsRel.Scenario\n"
            if (AccountAnalysisSettingsRel.AccountingEntity entered)
				CubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.AccountingEntity\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode entered)
					CubeMap += "related.AccountingEntity = AccountAnalysisSettingsRel.ReportingBasis.AccountingEntityTopNode\n"

			if (AccountAnalysisSettingsRel.AccountingUnit entered)
				CubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.AccountingUnit\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode entered)
					CubeMap += "related.GeneralLedgerTotal.AccountingUnit = AccountAnalysisSettingsRel.ReportingBasis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"

			if (AccountAnalysisSettingsRel.System entered)
				CubeMap += "related.GeneralLedgerTotal.System = AccountAnalysisSettingsRel.System\n"
				
			if (AccountAnalysisSettingsRel.Project entered)
				CubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.Project\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode entered)
					CubeMap += "related.GeneralLedgerTotal.Project = AccountAnalysisSettingsRel.ReportingBasis.ProjectTopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension1 entered)
				CubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.FinanceDimension1\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode entered)
					CubeMap += "related.FinanceDimension1 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension1TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension2 entered)
				CubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.FinanceDimension2\n"
			else			
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode entered)
					CubeMap += "related.FinanceDimension2 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension2TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension3 entered)
				CubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.FinanceDimension3\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode entered)
					CubeMap += "related.FinanceDimension3 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension3TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension4 entered)
				CubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.FinanceDimension4\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode entered)
					CubeMap += "related.FinanceDimension4 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension4TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension5 entered)
				CubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.FinanceDimension5\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode entered)
					CubeMap += "related.FinanceDimension5 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension5TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension6 entered)
				CubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.FinanceDimension6\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode entered)
					CubeMap += "related.FinanceDimension6 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension6TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension7 entered)
				CubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.FinanceDimension7\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode entered)
					CubeMap += "related.FinanceDimension7 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension7TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension8 entered)
				CubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.FinanceDimension8\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode entered)
					CubeMap += "related.FinanceDimension8 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension8TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension9 entered)
				CubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.FinanceDimension9\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode entered)
					CubeMap += "related.FinanceDimension9 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension9TopNode\n"

			if (AccountAnalysisSettingsRel.FinanceDimension10 entered)
				CubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.FinanceDimension10\n"
			else
				if (AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode entered)
					CubeMap += "related.FinanceDimension10 = AccountAnalysisSettingsRel.ReportingBasis.FinanceDimension10TopNode\n"

        SummaryAmount is a DerivedField
			type is like TotalAmount
				precision is DerivedAmountDecimals
			if (LocalSummaryAmountCalculated)
				return LocalCalculatedSummaryAmount
			LocalSummaryAmountCalculated = true
            LocalReportingPeriod = GeneralLedgerCalendarPeriod
            if (DynamicMeasure = "NetReportAmount1")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetReportAmount1
            else  			
            if (DynamicMeasure = "NetReportAmount2")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetReportAmount2
            else						
            if (DynamicMeasure = "NetReportAmount3")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetReportAmount3
            else										
            if (DynamicMeasure = "NetReportAmount4")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetReportAmount4
            else								
            if (DynamicMeasure = "NetReportAmount5")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetReportAmount5
            else
            if (DynamicMeasure = "NetFunctionalAmount")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetFunctionalAmount 
            else
            if (DynamicMeasure = "NetAlternateAmount")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetAlternateAmount
            else
            if (DynamicMeasure = "NetAlternateAmount2")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetAlternateAmount2 
            else	
            if (DynamicMeasure = "NetAlternateAmount3")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetAlternateAmount3
            else	
            if (DynamicMeasure = "NetUnitsAmount")
                LocalCalculatedSummaryAmount = SummaryCalculateAmountRel.NetUnitsAmount
			return LocalCalculatedSummaryAmount

		SummaryAmountDebit is a DerivedField
			type is like TotalAmount
				precision is DerivedAmountDecimals
			if (SummaryAmount >= 0)
				return SummaryAmount
			else
				return blank
		
		SummaryAmountCredit is a DerivedField
			type is like TotalAmount
				precision is DerivedAmountDecimals
			if (SummaryAmount < 0)
				return SummaryAmount
			else
				return blank

		AmountDebit is a DerivedField
			type is like TotalAmount
				precision is DerivedAmountDecimals
			if (LocalDebitAmountCalculated)
				return LocalCalculatedDebitAmount
			LocalDebitAmountCalculated = true
			LocalCreditAmountCalculated = true
            LocalReportingPeriod = GeneralLedgerCalendarPeriod
            if (DynamicMeasure = "NetReportAmount1")
                LocalCalculatedDebitAmount = DetailCalculateAmountRel.NetReportAmount1Debit
				LocalCalculatedCreditAmount	= DetailCalculateAmountRel.NetReportAmount1Credit
            else
            if (DynamicMeasure = "NetFunctionalAmount")
                LocalCalculatedDebitAmount = DetailCalculateAmountRel.NetFunctionalAmountDebit
				LocalCalculatedCreditAmount = DetailCalculateAmountRel.NetFunctionalAmountCredit  
			return LocalCalculatedDebitAmount

		AmountCredit is a DerivedField
			type is like TotalAmount
				precision is DerivedAmountDecimals
			if (LocalCreditAmountCalculated)
				return LocalCalculatedCreditAmount
			LocalDebitAmountCalculated = true
			LocalCreditAmountCalculated = true
            LocalReportingPeriod = GeneralLedgerCalendarPeriod
            if (DynamicMeasure = "NetReportAmount1")
				LocalCalculatedDebitAmount = DetailCalculateAmountRel.NetReportAmount1Debit
                LocalCalculatedCreditAmount = DetailCalculateAmountRel.NetReportAmount1Credit
            else
            if (DynamicMeasure = "NetFunctionalAmount")
				LocalCalculatedDebitAmount = DetailCalculateAmountRel.NetFunctionalAmountDebit
                LocalCalculatedCreditAmount = DetailCalculateAmountRel.NetFunctionalAmountCredit 
			return LocalCalculatedCreditAmount

		AccountAmountDebit is a DerivedField
			type is like TotalAmount
				precision is DerivedAmountDecimals
			if(AccountAnalysisSettingsRel.DetailTrialBalance)
				return AmountDebit
			else
				return SummaryAmountDebit
			
		AccountAmountCredit is a DerivedField
			type is like TotalAmount
				precision is DerivedAmountDecimals
			if(AccountAnalysisSettingsRel.DetailTrialBalance)
				return AmountCredit
			else
				return SummaryAmountCredit


#ifdef module integration
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
			
		DerivedBODVariationID is a DerivedField
			type is Alpha 25
			restricted
			return bod id.VariationID

		DerivedBODRevision is a DerivedField
			type is Alpha 25
			restricted
			return ""
				
		DerivedAccountingEntity is a DerivedField
			type is Alpha size 25
			restricted
			return  ""
					
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return current timestamp
			
		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (BODActionCode = "C")
				return "Add"
			else
				return "Replace"
							
					
		DerivedFinanceEnterpriseGroup is a DerivedField 
			type is AlphaUpper size 4
			restricted
			return FinanceEnterpriseGroup

		DerivedDocumentID is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedFinanceEnterpriseGroup + DerivedDelimiter + GeneralLedgerCalendarPeriod
		
		DerivedDisplayPeriod is a DerivedField
			type is Alpha size 50
			restricted
			return DisplayPeriod
		
		DerivedGLCPYear is a DerivedField
			type is Year
			restricted
			return Year
		
		DerivedGeneralLedgerCalendarPeriod is a DerivedField
			type is Alpha size 50
			restricted
			return GeneralLedgerCalendarPeriod

		DerivedPeriodTypeName is a DerivedField
			type is Alpha size 50
			restricted
			if(PeriodType = 6) 
				return "BeginningBalance"

		DerivedBODID is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID +":" + DerivedAccountingEntity + ":" + ":" +DerivedDocumentID + ":" +DerivedBODRevision+"?FinancialCalendar&verb=Sync&TrackerID="+ LocalFSMInboundBODTracker

		GLCPFinancialCalendarBODXML is a DerivedField
			type is XMLDocument
			restricted
			GLCPFinancialCalendarBODXML = template.IONSyncFinancialCalendar_GeneralLedgerCalendarPeriod_CalendarPeriod_ST document for this instance
#endif

				
	Conditions
		WithinAnalysisYear
			restricted
			when ((AnalysisYear entered
			and    Year = AnalysisYear)
			or	  !AnalysisYear entered)  
		
		ValidThruPeriod
			restricted
			when (FromSummaryPeriod entered
			and   PeriodType = FromSummaryPeriod.PeriodType
			and   GeneralLedgerCalendarPeriod > FromSummaryPeriod)
				
		PriorYearExistsInCalendar
			restricted
			when (PriorYearInCalendarRel exists)
			
		SubordinatesExist
			restricted
			when (HierarchyDetailRel exists)
			
		NotUsedInHierarchy	
			restricted
			when (PeriodType.EndDate
			and   DateWithinYearRange
			and   !SubordinateInTopNodeRel exists)
			
		HierarchyRecordsExist
			restricted
			when (SubordinateInTopNodeRel exists)
					
		SummaryWithinTopNode
			restricted
			when (SummaryNode
			and   YearMatchesParent			
			and   TopNode = DerivedTopNode)	
		
		SummaryNode
			restricted
			when (PeriodType.Year
			or    PeriodType.Quarter
			or    PeriodType.Month
			or    PeriodType.Week
			or	  PeriodType.Day)
			
		PeriodNode
			restricted
			when ((PeriodType.Quarter	
			or     PeriodType.Month
			or     PeriodType.Week
			or	   PeriodType.Day
			or     PeriodType.EndDate)
			and   (!GeneralLedgerCalendarPeriod like "*_*TD"))			

		ClosePeriodExists
			restricted
			when (ClosePeriodRel exists)
			
		EligibleForClosePeriod
			restricted
			when (PeriodType.EndDate
			and   Date >= GeneralLedgerCloseYear.DerivedStartDate
			and   Date <= GeneralLedgerCloseYear.DerivedEndDate

			and   ValidDateForConfiguration
			and   ClosePeriodDoesNotExist)

		PotentialOrExistingClosePeriod
			restricted
			when (PeriodType.EndDate
			and   Date >= GeneralLedgerCloseYear.DerivedStartDate
			and   Date <= GeneralLedgerCloseYear.DerivedEndDate

			and   ValidDateForConfiguration)
					
		ClosePeriodDoesNotExist
			restricted
			when (!ClosePeriodRel exists)
									
		BegBalAndEndDate
			restricted
			when (PeriodType.EndDate
			or	  PeriodType.BeginningBalance)
			
		EndDate
			restricted
			when (PeriodType.EndDate)
			
		NotUsedInCalendar
			restricted
			when (PeriodType.EndDate
			and  !SubordinateInTopNodeRel exists)

		SummaryPeriodNode
			restricted
			when (ReportingBasis.CalendarTopNode	= TopNode
			and   SummaryNotYTDOrLTD
			and  (PeriodType.Year			
			or    PeriodType.Quarter	
			or    PeriodType.Month
			or    PeriodType.Week))

		SummaryNotYTDOrLTD
			restricted
			when (SummaryNode
			and ((!GeneralLedgerCalendarPeriod like "*_YTD")
			and  (!GeneralLedgerCalendarPeriod like "*_LTD")))

		YearNotYTDOrLTD
			restricted
			when (PeriodType.Year
			and ((!GeneralLedgerCalendarPeriod like "*_YTD")
			and  (!GeneralLedgerCalendarPeriod like "*_LTD")))		

		UsedAsAnyClosePeriod
			when (AnyClosePeriodsRel exists)
			
		IsClosePeriodForContextConfiguration
			when (ClosePeriodForContextConfigurationRel exists
			and  (!GeneralLedgerCloseYear entered
			or   (GeneralLedgerCloseYear entered
			and   ClosePeriodForContextConfigurationRel.GeneralLedgerCloseYear = GeneralLedgerCloseYear)))

		OpenBackpostPeriodsExist
			restricted
            when ((AccountingEntity entered and OpenPeriodsForEntityRel exists) 
				or (AccountingEntity not entered and OpenPeriodsRel exists))		 
	
	Field Rules
	
		PeriodType
			required
			cannot be changed
		
		Date
			if (PeriodType.EndDate)
				required
			cannot be changed
			
		Year
			if (!PeriodType.TopNode)
				required
			if (old Year entered)
				cannot be changed
			
		Quarter
			if (PeriodType.Quarter)
				required
			cannot be changed
			
		Month
			if (PeriodType.Month)
				required
			cannot be changed
			
		Week
			if (PeriodType.Week)
				required
			cannot be changed
			
		Day	
			if (PeriodType.Day)
				required
			cannot be changed
						
		TopNode
			if (PeriodType.TopNode)
				required
			cannot be changed
						
	Relations
		BasisForLTDTopNodeRel is a ReportingBasis(CalendarTopNodeLTD) set
			
		ChildrenRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup	
				related.GeneralLedgerCalendarPeriod	 = HierarchyDetailRel.SubordinatePeriod		
				
		HierarchyDetailRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses ByParent
				related.FinanceEnterpriseGroup       = FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod  = GeneralLedgerCalendarPeriod

		ParentRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses BySubordinate
				related.FinanceEnterpriseGroup	     = FinanceEnterpriseGroup
				related.SubordinatePeriod  			 = GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.TopNode = DerivedTopNode)

		YTDParentRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses BySubordinate
				related.FinanceEnterpriseGroup	     = FinanceEnterpriseGroup
				related.SubordinatePeriod  			 = LocalRelPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.TopNode = DerivedYTDTopNode)
				
		LTDParentRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses BySubordinate
				related.FinanceEnterpriseGroup	     = FinanceEnterpriseGroup
				related.SubordinatePeriod  			 = LocalRelPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.TopNode = DerivedLTDTopNode)

		OldParentRel
			one-to-one relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses BySubordinate
				related.FinanceEnterpriseGroup	     = FinanceEnterpriseGroup
				related.SubordinatePeriod  			 = LocalRelPeriod
				related.GeneralLedgerCalendarPeriod	 = LocalParent

		SubordinateInTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedTopNode
				related.SubordinatePeriod			 = GeneralLedgerCalendarPeriod	
												
		SubordinateInYTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedYTDTopNode
				related.SubordinatePeriod			 = GeneralLedgerCalendarPeriod			

		SubordinateInLTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedLTDTopNode
				related.SubordinatePeriod			 = GeneralLedgerCalendarPeriod

		LocalSubordinateInYTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedYTDTopNode
				related.SubordinatePeriod			 = LocalYTDPeriod

		LocalSubordinateInLTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedLTDTopNode
				related.SubordinatePeriod			 = LocalLTDPeriod
				
		LocalParentInYTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses ByParentInTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedYTDTopNode
				related.GeneralLedgerCalendarPeriod  = LocalYTDPeriod						

		LocalParentInLTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses ByParentInTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedLTDTopNode
				related.GeneralLedgerCalendarPeriod  = LocalLTDPeriod	
						
		HigherSiblingsInYTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses ByParentInTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedYTDTopNode
				related.GeneralLedgerCalendarPeriod	 = LocalParent
			Instance Selection
				where (related.SubordinatePeriod	 > LocalChild
				and    related.SubordinatePeriod 	 like "*_YTD")	

		HigherSiblingsInLTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses ByParentInTopNode
				related.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
				related.TopNode			  			 = DerivedLTDTopNode
				related.GeneralLedgerCalendarPeriod	 = LocalParent
			Instance Selection
				where (related.SubordinatePeriod	 > LocalChild
				and    related.SubordinatePeriod 	 like "*_LTD")
								
		SubordinateInLocalTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup	  	 = FinanceEnterpriseGroup
				related.TopNode			  			 = LocalTopNode
				related.SubordinatePeriod 			 = GeneralLedgerCalendarPeriod	
						
		UnusedLeafRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup 		 = FinanceEnterpriseGroup 
				














		ClosePeriodRel
			one-to-one relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDateForYear 	
				related.FinanceEnterpriseGroup		    = FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration = GeneralLedgerCloseConfiguration
				related.GeneralLedgerCloseYear 			= GeneralLedgerCloseYear
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod
		
		ClosePeriodForContextConfigurationRel
			one-to-one relation to GeneralLedgerClosePeriod
			Field Mapping uses symbolic key 	
				related.FinanceEnterpriseGroup		    = FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration = GeneralLedgerCloseConfiguration
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod
			
		PreviousEndDateRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod < GeneralLedgerCalendarPeriod)

			
		CalendarRel
			one-to-one relation to GeneralLedgerCalendar
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
				
		YTDCalendarRel
			one-to-one relation to GeneralLedgerCalendar
			Field Mapping uses ByYTDTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.YTDTopNode			   = TopNode
				
		LTDCalendarRel
			one-to-one relation to GeneralLedgerCalendar
			Field Mapping uses ByLTDTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.LTDTopNode			   = TopNode
				
		PeriodShadowRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar       = GeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod

		QuarterPeriodShadowRel
			one-to-many relation using PeriodShadowRel
			Instance Selection
				where (related.SummaryPeriodType.Quarter
				and    related.SummaryGeneralLedgerCalendarPeriod.GeneralLedgerCalendarPeriod.EndDateJulian = GeneralLedgerCalendarPeriod)
		
		YearPeriodShadowRel
			one-to-many relation using PeriodShadowRel
			Instance Selection
				where (related.SummaryPeriodType.Year
				and    related.SummaryGeneralLedgerCalendarPeriod.GeneralLedgerCalendarPeriod.EndDateJulian = GeneralLedgerCalendarPeriod)
				
		LookupPeriodShadowRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar       = GeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod = LookupPeriod
				
		PeriodShadowSubordinateDatesRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup             = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar       	   = GeneralLedgerCalendar
				related.SummaryGeneralLedgerCalendarPeriod = (GeneralLedgerCalendarPeriod - "_YTD" - "_LTD")
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.PeriodType.EndDate)
				
		EndDatesWithinRange
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod >= LocalBeginPeriod
				and    related.GeneralLedgerCalendarPeriod <= LocalEndPeriod
				and    related.PeriodType.EndDate)	








		PriorYearInCalendarRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
				related.Year				   = LookupYear
		
		CurrentPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
				related.PeriodType			   = LocalPeriodTypeNumeric
			Instance Selection
				where (related.DerivedStartDate <= current corporate date
				and    related.DerivedEndDate 	>= current corporate date)

		NextPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
				related.PeriodType			   = LocalPeriodTypeNumeric
			Instance Selection	
				where (related.GeneralLedgerCalendarPeriod > GeneralLedgerCalendarPeriod)
					
		PreviousPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
				related.PeriodType			   = LocalPeriodTypeNumeric
			Instance Selection	
				where (related.GeneralLedgerCalendarPeriod < GeneralLedgerCalendarPeriod)
		
		AnyClosePeriodsRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByGeneralLedgerCalendarPeriod
				related.FinanceEnterpriseGroup 								 = FinanceEnterpriseGroup
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod																						
	
		OpenPeriodsForEntityRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 								 = FinanceEnterpriseGroup
				related.AccountingEntity									 = AccountingEntity
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.PeriodStatus.Open
				or     related.PeriodStatus.Backpost)	

		OpenPeriodsRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByYearPeriodEntityLedger
				related.FinanceEnterpriseGroup 								 = FinanceEnterpriseGroup
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.PeriodStatus.Open
				or     related.PeriodStatus.Backpost)	
				
		CalendarsForNewDateRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TopNode					= LocalTopNode
			Instance Selection
				where ((related.PeriodType.Month
				or     related.PeriodType.Week) 
				and    related.StartDateJulian <= GeneralLedgerCalendarPeriod
				and    related.EndDateJulian   >= GeneralLedgerCalendarPeriod)

		EndDatesWithinSummaryPeriodRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate)

		GeneralLedgerCalendarDateRel
			one-to-one relation to GeneralLedgerCalendarDate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.GeneralLedgerCalendar						= LocalGeneralLedgerCalendar
				related.GeneralLedgerCalendarDate					= LocalDate

		WeeksInPeriodYearRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TopNode					= DerivedTopNode
				related.Year					= Year
				related.PeriodType				= 4
		
		AccountAnalysisSettingsRel
			one-to-one relation to AccountAnalysisSettings
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Actor				    = GeneralLedgerChartAccountRel.DerivedActor
				related.AccountAnalysisSettings = AccountAnalysisSettings

		GeneralLedgerChartAccountRel
			one-to-one relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= GeneralLedgerChartAccount


#ifdef module integration
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "FinancialCalendar"
            	related.FSMBODConfiguration.Direction 	= 1
		
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker
#endif

	Cube Relations

		SummaryCalculateAmountRel
			cell relation to GeneralLedgerTotal
			dynamic mapping is CubeMap
			Dimension Mapping
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode
			dynamic preload measures are DynamicMeasure

		DetailCalculateAmountRel
			cell relation to GeneralLedgerTotal
			dynamic mapping is CubeMap
			Dimension Mapping
				related.GeneralLedgerTotal.Ledger	        = AccountAnalysisSettingsRel.ReportingBasis.LedgerTopNode
			dynamic preload measures are DynamicMeasures
	Sets				
	
		ByTopNode
			Sort Order
				FinanceEnterpriseGroup
				TopNode
				Year
				PeriodType
				GeneralLedgerCalendarPeriod	
				
		LeafRecords
			Sort Order
				FinanceEnterpriseGroup
				GeneralLedgerCalendarPeriod
			Instance Selection
				where (PeriodType.EndDate)
		
		ByTopNodeAndType
			Sort Order
				FinanceEnterpriseGroup
				TopNode
				PeriodType
				GeneralLedgerCalendarPeriod
		
		ByTopNodeTypeAndJulianDates
			Sort Order
				FinanceEnterpriseGroup
				TopNode
				PeriodType
				EndDateJulian
				StartDateJulian
				GeneralLedgerCalendarPeriod
							
	Action Exit Rules
		if (FinanceEnterpriseGroup.BODTrigger)
			if (!action type.Delete)
				if (action != "UpdateBODIdFields") 
					LocalActionCode = LocalActionCode.Update
					if (action type.Create)
						LocalActionCode = LocalActionCode.Create
					else
						if (action type.Delete)
							LocalActionCode = LocalActionCode.Delete
		
					increment bod id.VariationID
		
					trigger "GeneralLedgerCalendarPeriodService" PA service
						resume on error
						title is "EG:<FinanceEnterpriseGroup>"
						Criteria
							FinanceEnterpriseGroup
						Variables
							LocalActionCode
								variable name is ActionCode
							include persistent fields from FinanceEnterpriseGroup
							include persistent fields from GeneralLedgerCalendarPeriod
							include persistent fields from GeneralLedgerCalendar
							include persistent fields from GeneralLedgerCloseConfiguration
							include persistent fields from GeneralLedgerCloseYear
							include persistent fields from ReportingBasis
							LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
								variable name is CurrentTimeStamp

	Rule Blocks
		CreateShadowForDate
			if (!SkipShadow)
				DatePeriod 	 = LocalPeriod
				TopNodeFound = false
				invoke Delete LocalPeriod.PeriodShadowRel
				I1 = 0
				while (!TopNodeFound)
					LookupPeriod = first LocalPeriod.SubordinateInTopNodeRel.GeneralLedgerCalendarPeriod
					if (!LookupPeriod.PeriodType.TopNode)
						I1 += 1
						SummaryPeriodArray.SummaryPeriod[I1] = LookupPeriod									
						invoke Create GeneralLedgerPeriodShadow
							invoked.FinanceEnterpriseGroup 			   = FinanceEnterpriseGroup
							invoked.GeneralLedgerCalendar  			   = GeneralLedgerCalendar
							invoked.GeneralLedgerCalendarPeriod		   = DatePeriod
							invoked.SummaryGeneralLedgerCalendarPeriod = LookupPeriod
							invoked.SummaryPeriodType				   = LookupPeriod.PeriodType
					if (LookupPeriod.PeriodType.TopNode)
						TopNodeFound = true
					else
						LocalPeriod = LookupPeriod			

				I1 = 1
				while I1 < 6
					if (SummaryPeriodArray.SummaryPeriod[I1] != blank)
						LocalPeriod = SummaryPeriodArray.SummaryPeriod[I1]
						invoke SetJulianDates LocalPeriod
					I1 += 1

 		DeleteRules
			if (FinanceEnterpriseGroup.BODTrigger)
				LocalActionCode = LocalActionCode.Delete
	
				increment bod id.VariationID
				trigger "GeneralLedgerCalendarPeriodService" PA service
					resume on error
					title is "EG:<FinanceEnterpriseGroup>"
					Criteria
						FinanceEnterpriseGroup
					Variables
						LocalActionCode
							variable name is ActionCode
						include persistent fields from FinanceEnterpriseGroup
						include persistent fields from GeneralLedgerCalendarPeriod
						include persistent fields from GeneralLedgerCalendar
						include persistent fields from GeneralLedgerCloseConfiguration
						include persistent fields from GeneralLedgerCloseYear
						include persistent fields from ReportingBasis
						LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
							variable name is CurrentTimeStamp

		CreateForOtherCalendars
			if (!SkipShadow)
				for each FinanceEnterpriseGroup.GeneralLedgerCalendar set
					if ((!LocalCreatedInHierarchy)
					or  (LocalCreatedInHierarchy
					and  !each.GeneralLedgerCalendar = GeneralLedgerCalendar)
					or   LocalCreateForCurrentCalendar)
						LocalTopNode = each.TopNode
						if (CalendarsForNewDateRel exists)
							invoke PropagateNewDates each
								invoked.PrmPeriodArray.EndDateJulian[1] = GeneralLedgerCalendarPeriod
											
	Actions
		Create is an Action

			Action Rules
			
				constraint (CreatePeriodType.Year
				or          CreatePeriodType.EndDate)
					"CannotDirectlyCreateThisTypeOfPeriod"			

				if (CreatePeriodType.EndDate
				and !InvokedByCalendar)
					confirmation required
						"BeSureToRunThe_Rebuild_Period_Cross_ReferenceActionOnTheCalendarWhenYouAreDoneManuallyCreatingDates"			

				if (CreatePeriodType.Year)
					GeneralLedgerCalendarPeriod = NewYearString
				else					
					if (CreatePeriodType.EndDate)
						LocalDate					= CreateEndDate
						GeneralLedgerCalendarPeriod = NewEndDateString
						Date 						= CreateEndDate
						Year						= CreateEndDate year				
			
				PeriodType = CreatePeriodType
			
				if (!DisplayPeriod entered)
					DisplayPeriod = DefaultDisplayPeriod

				if (!PeriodType.EndDate)
					TopNode				= DerivedTopNode
				else
					StartDateJulian		= GeneralLedgerCalendarPeriod
					EndDateJulian		= GeneralLedgerCalendarPeriod
					
			Exit Rules
				if (PeriodType.Year)
					invoke Create GeneralLedgerPeriodHierarchy
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup				
						invoked.GeneralLedgerCalendarPeriod	= DerivedTopNode 
						invoked.SubordinatePeriod	    	= GeneralLedgerCalendarPeriod
						invoked.TopNode						= DerivedTopNode 

					if (!GeneralLedgerCalendar.CalendarType.Other
					and !GeneralLedgerCalendar.CalendarType.Days) 
						invoke CreateYTDYear
							fill in fields from this instance
							invoked.GeneralLedgerCalendarPeriod = (GeneralLedgerCalendarPeriod + "_YTD")
							invoked.DisplayPeriod				= (DisplayPeriod + "_YTD")
						invoke CreateLTDYear
							fill in fields from this instance
							invoked.GeneralLedgerCalendarPeriod = (GeneralLedgerCalendarPeriod + "_LTD")
							invoked.DisplayPeriod				= (DisplayPeriod + "_LTD")
				else
					LocalBeginningBalanceKey = DerivedBeginningBalanceString
					if (!LocalBeginningBalanceKey exists)
						invoke CreateBeginningBalanceKey
							invoked.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
							invoked.GeneralLedgerCalendarPeriod = LocalBeginningBalanceKey
							invoked.Year 						= CreateEndDate year
							invoked.DisplayPeriod				= DerivedBeginningBalanceDisplayPeriod			

					LocalCreateForCurrentCalendar = true
					include CreateForOtherCalendars

		T2VCreate is a Create Action
			restricted
			default label is untranslatable
			bypass field rules
					
		CreateYTDYear is a Create Action
			restricted
			Action Rules

				TopNode = DerivedYTDTopNode
					
			Exit Rules
				invoke Create GeneralLedgerPeriodHierarchy
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup				
					invoked.GeneralLedgerCalendarPeriod	= DerivedYTDTopNode 
					invoked.SubordinatePeriod	    	= GeneralLedgerCalendarPeriod
					invoked.TopNode						= DerivedYTDTopNode

		CreateLTDYear is a Create Action
			restricted
			Action Rules

				TopNode = DerivedLTDTopNode
					
			Exit Rules
				invoke Create GeneralLedgerPeriodHierarchy
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup				
					invoked.GeneralLedgerCalendarPeriod	= DerivedLTDTopNode 
					invoked.SubordinatePeriod	    	= GeneralLedgerCalendarPeriod
					invoked.TopNode						= DerivedLTDTopNode
										 											
		CreateSubordinate is a Create Action
			restricted
			Action Rules
				GeneralLedgerCalendarPeriod	= NewPeriod
				
				if (PeriodType.EndDate)
					Date            = CreateEndDate
					StartDateJulian = GeneralLedgerCalendarPeriod
					EndDateJulian   = GeneralLedgerCalendarPeriod
				else
					if (!PeriodType.BeginningBalance)
						TopNode	  = DerivedTopNode							
				
				if (!DisplayPeriod entered)
					DisplayPeriod = DefaultDisplayPeriod
				
			Exit Rules

				invoke Create GeneralLedgerPeriodHierarchy
					invoked.FinanceEnterpriseGroup    	= FinanceEnterpriseGroup
					invoked.GeneralLedgerCalendarPeriod	= ParentPeriod
					invoked.SubordinatePeriod	        = GeneralLedgerCalendarPeriod
					invoked.TopNode					    = DerivedTopNode 

			
				if (PeriodType.EndDate)	
					LocalBeginningBalanceKey = DerivedBeginningBalanceString
					if (!LocalBeginningBalanceKey exists)
						invoke CreateBeginningBalanceKey
							invoked.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
							invoked.GeneralLedgerCalendarPeriod = LocalBeginningBalanceKey
							invoked.Year 						= CreateEndDate year
							invoked.DisplayPeriod				= DerivedBeginningBalanceDisplayPeriod
					
					LocalPeriod   = GeneralLedgerCalendarPeriod
					include CreateShadowForDate
					LocalCreatedInHierarchy 	= true
					include CreateForOtherCalendars						
				
				if (!GeneralLedgerCalendar.CalendarType.Other
				and !GeneralLedgerCalendar.CalendarType.Days) 
					if (!PeriodType.EndDate)
						invoke CreateYTDSubordinate
							fill in fields from this instance
							invoked.GeneralLedgerCalendarPeriod = (GeneralLedgerCalendarPeriod + "_YTD")
							invoked.DisplayPeriod 				= (DisplayPeriod + "_YTD")
							invoked.ParentPeriod				= ParentPeriod
						
						invoke CreateLTDSubordinate
							fill in fields from this instance
							invoked.GeneralLedgerCalendarPeriod = (GeneralLedgerCalendarPeriod + "_LTD")
							invoked.DisplayPeriod 				= (DisplayPeriod + "_LTD")
							invoked.ParentPeriod				= ParentPeriod
						
						if (PeriodType.Week
						or (PeriodType.Month
						and !CreatingWeeksWithinMonths))			
							SavePeriod = (GeneralLedgerCalendarPeriod + "_YTD")
							invoke Create GeneralLedgerPeriodHierarchy
								invoked.FinanceEnterpriseGroup    	= FinanceEnterpriseGroup
								invoked.GeneralLedgerCalendarPeriod	= SavePeriod
								invoked.SubordinatePeriod	        = GeneralLedgerCalendarPeriod
								invoked.TopNode					    = DerivedYTDTopNode
	
							SavePeriod = (GeneralLedgerCalendarPeriod + "_LTD")
							invoke Create GeneralLedgerPeriodHierarchy
								invoked.FinanceEnterpriseGroup    	= FinanceEnterpriseGroup
								invoked.GeneralLedgerCalendarPeriod	= SavePeriod
								invoked.SubordinatePeriod	        = GeneralLedgerCalendarPeriod
								invoked.TopNode					    = DerivedLTDTopNode 
	
							if (Month.Period1
							or  Week.Week1)						













								SavePeriod = (GeneralLedgerCalendarPeriod + "_YTD")
								invoke Create GeneralLedgerPeriodHierarchy
									invoked.FinanceEnterpriseGroup    	= FinanceEnterpriseGroup
									invoked.GeneralLedgerCalendarPeriod	= SavePeriod
									invoked.SubordinatePeriod	        = DerivedBeginningBalanceForYear
									invoked.TopNode					    = DerivedYTDTopNode

								
								SavePeriod = (GeneralLedgerCalendarPeriod + "_LTD")
								LookupYear = (Year - 1)								
								while (PriorYearInCalendarRel exists)
									invoke Create GeneralLedgerPeriodHierarchy
										invoked.FinanceEnterpriseGroup    	= FinanceEnterpriseGroup
										invoked.GeneralLedgerCalendarPeriod	= SavePeriod
										invoked.SubordinatePeriod	        = DerivedPriorYearLTD
										invoked.TopNode					    = DerivedLTDTopNode
									LookupYear -= 1
							else
								if ((PeriodType.Month
								and  Month           > 1)
								or  (PeriodType.Week
								and  Week			 > 1)
								or  (PeriodType.Day
								and  Day			 > 1))
									LocalYTDPeriod	  = GeneralLedgerCalendarPeriod
									if (PeriodType.Month)
										LocalMonthNumeric = Month	
										LocalPeriodType   = "M"
									else
									if (PeriodType.Week)
										LocalWeekNumeric = Week
										LocalPeriodType  = "W"
									else
										LocalDayNumeric	 = Day
										LocalPeriodType  = "D"
									invoke Create GeneralLedgerPeriodHierarchy
										invoked.FinanceEnterpriseGroup    	= FinanceEnterpriseGroup
										invoked.GeneralLedgerCalendarPeriod	= (GeneralLedgerCalendarPeriod + "_YTD")
										invoked.SubordinatePeriod	        = DerivedPreviousYTDPeriod
										invoked.TopNode					    = DerivedYTDTopNode
										invoked.TransientWeight				= 1
									
									LocalLTDPeriod	  = GeneralLedgerCalendarPeriod
									if (PeriodType.Month)
										LocalMonthNumeric = Month	
									else
									if (PeriodType.Week)
										LocalWeekNumeric  = Week
									else
										LocalDayNumeric	  = Day
									invoke Create GeneralLedgerPeriodHierarchy
										invoked.FinanceEnterpriseGroup    	= FinanceEnterpriseGroup
										invoked.GeneralLedgerCalendarPeriod	= (GeneralLedgerCalendarPeriod + "_LTD")
										invoked.SubordinatePeriod	        = DerivedPreviousLTDPeriod
										invoked.TopNode					    = DerivedLTDTopNode
										invoked.TransientWeight				= 1
																	
		CreateYTDSubordinate is a Create Action
			restricted
			Action Rules

				TopNode 	= DerivedYTDTopNode
				LocalParent = (ParentPeriod + "_YTD")
					
			Exit Rules
				
				invoke Create GeneralLedgerPeriodHierarchy
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup				
					invoked.GeneralLedgerCalendarPeriod	= LocalParent 
					invoked.SubordinatePeriod	    	= GeneralLedgerCalendarPeriod
					invoked.TopNode						= DerivedYTDTopNode

		CreateLTDSubordinate is a Create Action
			restricted
			Action Rules

				TopNode 	= DerivedLTDTopNode
				LocalParent = (ParentPeriod + "_LTD")
					
			Exit Rules
				
				invoke Create GeneralLedgerPeriodHierarchy
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup				
					invoked.GeneralLedgerCalendarPeriod	= LocalParent 
					invoked.SubordinatePeriod	    	= GeneralLedgerCalendarPeriod
					invoked.TopNode						= DerivedLTDTopNode 
											
		CreateTopNode is a Create Action
			restricted
			
			Action Rules
				PeriodType					= PeriodType.TopNode
				IsTopNode		 			= true
				TopNode					    = GeneralLedgerCalendarPeriod
				
		CreateBeginningBalanceKey is a Create Action
			restricted
			
			Action Rules
				PeriodType    = PeriodType.BeginningBalance
			Exit Rules	
				if(PeriodType.BeginningBalance and FinanceEnterpriseGroup.BODTrigger)			
					invoke TriggerGeneralLedgerCalendarPeriod
						invoked.LocalActionCode = "C"






				
		Update is an Action
			Action Rules
			Exit Rules
				if (IsClosePeriod changed)
					if (ClosePeriodRel exists) 
						invoke PurgeClosePeriod
					else
						invoke CreateClosePeriod
						 							
		Delete is an Action
		
			Entrance Rules
				if (PeriodType.EndDate)
					confirmation required
						"MakeSureToRunThe_Rebuild_Period_Cross_ReferenceActionOnTheCalendarAfterDeletingPeriods"
					
				constraint (!HierarchyDetailRel exists)
					"CannotDelete,SubordinatePeriodsExist"

				if (PeriodType.EndDate)
					I1 = 0
					for each PeriodShadowRel
						I1 += 1
						SummaryPeriodArray.SummaryPeriod[I1] = each.SummaryGeneralLedgerCalendarPeriod
								
				invoke Delete SubordinateInTopNodeRel
				invoke Delete SubordinateInYTDTopNodeRel
				if (!PeriodType.EndDate)
				    LocalYTDPeriod = (GeneralLedgerCalendarPeriod + "_YTD")
				    invoke Delete LocalSubordinateInYTDTopNodeRel
				    invoke Delete LocalParentInYTDTopNodeRel
				    invoke Delete LocalYTDPeriod				
				invoke Delete SubordinateInLTDTopNodeRel
				if (!PeriodType.EndDate)
				    LocalLTDPeriod = (GeneralLedgerCalendarPeriod + "_LTD")
				    invoke Delete LocalSubordinateInLTDTopNodeRel
				    invoke Delete LocalParentInLTDTopNodeRel
				    invoke Delete LocalLTDPeriod
			
				if(PeriodType.BeginningBalance and FinanceEnterpriseGroup.BODTrigger)		
					invoke TriggerGeneralLedgerCalendarPeriod
						invoked.LocalActionCode = "D"





					
			Exit Rules			    
				if (PeriodType.EndDate)
					I1 = 1
					while I1 < 6
						if (SummaryPeriodArray.SummaryPeriod[I1] != blank)
							LocalPeriod = SummaryPeriodArray.SummaryPeriod[I1]
							invoke SetJulianDates LocalPeriod
						I1 += 1
						
				include DeleteRules
				
				
		RemovePeriodFromHierarchy is an Instance Action
			valid when (BegBalAndEndDate)
			Action Rules
				if (!SkipShadow)
					if (PeriodType.EndDate)
						I1 = 0
						for each PeriodShadowRel
							I1 += 1
							SummaryPeriodArray.SummaryPeriod[I1] = each.SummaryGeneralLedgerCalendarPeriod
										
				invoke Delete SubordinateInTopNodeRel
				invoke Delete PeriodShadowRel
				if (!GeneralLedgerCalendar.CalendarType.Other
				and !GeneralLedgerCalendar.CalendarType.Days) 
					invoke Delete SubordinateInYTDTopNodeRel
					if (!PeriodType.EndDate)
					    LocalYTDPeriod = (GeneralLedgerCalendarPeriod + "_YTD")
					    invoke Delete LocalSubordinateInYTDTopNodeRel
					    invoke Delete LocalParentInYTDTopNodeRel
					    invoke Delete LocalYTDPeriod					
					
					LocalRelPeriod = GeneralLedgerCalendarPeriod
					LocalParent    = first YTDParentRel.GeneralLedgerCalendarPeriod
					
					invoke Delete SubordinateInLTDTopNodeRel
					if (!PeriodType.EndDate)
					    LocalLTDPeriod = (GeneralLedgerCalendarPeriod + "_LTD")
					    invoke Delete LocalSubordinateInLTDTopNodeRel
					    invoke Delete LocalParentInLTDTopNodeRel
					    invoke Delete LocalLTDPeriod					
					
					LocalParent = first LTDParentRel.GeneralLedgerCalendarPeriod

				if (!SkipShadow)
					if (PeriodType.EndDate)
						I1 = 1
						while I1 < 6
							if (SummaryPeriodArray.SummaryPeriod[I1] != blank)
								LocalPeriod = SummaryPeriodArray.SummaryPeriod[I1]
								invoke SetJulianDates LocalPeriod
							I1 += 1
											
		CreatePeriodWithin is an Instance Action
			valid when (SummaryNotYTDOrLTD)			
			
			Parameters
				GeneralLedgerCalendarYear   
					default label is "GlobalLedgerCalendarYear"				
				ExistingEndDateBegin is a GeneralLedgerCalendarPeriod 
				ExistingEndDateEnd   is a GeneralLedgerCalendarPeriod
				NewPeriodType		 is Numeric 1
					States
						Quarter		 value is 2
						Month		 value is 3
						Week		 value is 4
						Day			 value is 8							
						EndDate		 value is 5
				CreateAll			 is Boolean						
				NewQuarter			 is Numeric 1
					States
						Quarter1	 value is 1
						Quarter2	 value is 2
						Quarter3	 value is 3
						Quarter4	 value is 4
				NewMonth			 is Numeric 2
					States
						Period1		 value is 1
						Period2		 value is 2
						Period3		 value is 3
						Period4		 value is 4
						Period5		 value is 5
						Period6		 value is 6
						Period7		 value is 7
						Period8		 value is 8
						Period9		 value is 9
						Period10	 value is 10
						Period11	 value is 11
						Period12	 value is 12
						Period13	 value is 13
				NewWeek				 is Numeric 2
					States
						Week1		 value is 1
						Week2		 value is 2
						Week3		 value is 3
						Week4		 value is 4
						Week5		 value is 5
						Week6		 value is 6	
						Week7		 value is 7
						Week8		 value is 8
						Week9		 value is 9
						Week10		 value is 10
						Week11		 value is 11
						Week12		 value is 12
						Week13		 value is 13
						Week14		 value is 14
						Week15		 value is 15
						Week16		 value is 16
						Week17		 value is 17
						Week18		 value is 18
						Week19		 value is 19
						Week20		 value is 20
						Week21		 value is 21
						Week22		 value is 22
						Week23		 value is 23
						Week24		 value is 24
						Week25		 value is 25
						Week26		 value is 26
						Week27		 value is 27
						Week28		 value is 28
						Week29		 value is 29
						Week30		 value is 30
						Week31		 value is 31
						Week32		 value is 32
						Week33		 value is 33
						Week34		 value is 34
						Week35		 value is 35
						Week36		 value is 36
						Week37		 value is 37
						Week38		 value is 38
						Week39		 value is 39
						Week40		 value is 40
						Week41		 value is 41
						Week42		 value is 42
						Week43		 value is 43
						Week44		 value is 44
						Week45		 value is 45
						Week46		 value is 46
						Week47		 value is 47
						Week48		 value is 48
						Week49		 value is 49
						Week50		 value is 50
						Week51		 value is 51
						Week52		 value is 52
						Week53		 value is 53
				NewDay				 is Numeric 3
				NumberOfDays		 is Numeric 3
					States
						365				 value is 365
						366				 value is 366
				NewEndDate 			 is Date			
				NewDisplayPeriod	 is Alpha 30
				
			Parameter Rules
				GeneralLedgerCalendarYear
					initial value is Year

				ExistingEndDateBegin
					if (!NewPeriodType entered)
						required
					else
						cannot be entered
				
				ExistingEndDateEnd
					default to ExistingEndDateBegin
					if (!NewPeriodType entered)
						required
					else
						cannot be entered
					constraint (ExistingEndDateEnd >= ExistingEndDateBegin)
						"InvalidRange"
													
				NewPeriodType
					if (!ExistingEndDateBegin entered)
						required
					else
						cannot be entered
						initialize NewQuarter
						initialize NewMonth
						initialize NewWeek
						initialize NewEndDate
						initialize NewDay
						initialize CreateAll
						initialize NewDisplayPeriod						
							
					if (NewPeriodType.Quarter)
						initialize NewMonth
						initialize NewWeek
						initialize NewEndDate
						initialize NewDay
						constraint (PeriodType.Year)
							"QuarterMustBeCreatedWithinAYear"
					else
						if (NewPeriodType.Month)
							initialize NewQuarter
							initialize NewWeek
							initialize NewEndDate
							initialize NewDay
							constraint (PeriodType.Year 
							or          PeriodType.Quarter)
								"MonthMustBeCreatedWithinAYearOrQuarter"							
						else
							if (NewPeriodType.Week)
								initialize NewQuarter
								initialize NewMonth
								initialize NewEndDate
								initialize NewDay
								constraint (PeriodType.Year 
								or          PeriodType.Quarter
								or			PeriodType.Month)
									"WeekMustBeCreatedWithinAYear,QuarterOrMonth"	
							else
								if (NewPeriodType.Day)
									initialize NewQuarter
									initialize NewMonth
									initialize NewWeek
									initialize NewEndDate
									constraint (PeriodType.Year 
									or          PeriodType.Month
									or			PeriodType.Week)
										"DayMustBeCreatedWithinAYear,MonthOrWeek" 
								else																		
									if (NewPeriodType.EndDate)
										initialize NewQuarter
										initialize NewMonth
										initialize NewWeek
										initialize NewDisplayPeriod
										constraint (PeriodType.Year 
										or          PeriodType.Quarter
										or          PeriodType.Month
										or			PeriodType.Week
										or 			PeriodType.Day)
											"EndDateMustBeCreatedWithinAYear,Quarter,Month,Week,OrDay"				
				
				CreateAll
					if (CreateAll)
						initialize NewQuarter
						initialize NewMonth
						initialize NewWeek
						initialize NewDay
						initialize NewDisplayPeriod
				
				NumberOfDays
					if (NewPeriodType.Day)
						if (CreateAll)
							required
						else
							cannot be entered						
				NewQuarter
					if (NewPeriodType.Quarter)
						if (!CreateAll)
							required
						else
							cannot be entered
					else
						cannot be entered								
									
				NewMonth
					if (NewPeriodType.Month)
						if (!CreateAll)
							required
						else
							cannot be entered
					else
						cannot be entered	
													
				NewWeek
					if (NewPeriodType.Week)
						if (!CreateAll)
							required
						else
							cannot be entered
					else
						cannot be entered	

				NewDay
					if (NewPeriodType.Day)
						if (!CreateAll)
							required
							constraint (NewDay < 367)
								"InvalidValue"
						else
							cannot be entered
					else
						cannot be entered	
																			
				NewDisplayPeriod
					if (ExistingEndDateBegin entered
					or 	CreateAll)
						cannot be entered						
				
				NewEndDate
					if (NewPeriodType.EndDate)
						required
					else
						cannot be entered
						
					constraint (!CreateAll)
						"CannotSpecifyCreateAllForEndDate"		
																	
			Action Rules
				if (NewPeriodType.EndDate
				and !InvokedByCalendar)
					confirmation required
						"BeSureToRunThe_Rebuild_Period_Cross_ReferenceActionOnTheCalendarWhenYouAreDoneManuallyCreatingDates"
				LocalDate		= NewEndDate
				LocalQuarter	= NewQuarter
				if (NewMonth entered)
					TempPeriod			= NewMonth
					if (NewMonth < 10)
						LocalMonth 		= "0" + TempPeriod
					else
						LocalMonth 	    = TempPeriod

				if (NewWeek entered)
					TempPeriod			= NewWeek
					if (NewWeek < 10)
						LocalWeek 		= "0" + TempPeriod
					else
						LocalWeek		= TempPeriod

				if (NewDay entered)
					TempPeriod			= NewDay
					if (NewDay < 10)
						LocalDay		= "00" + TempPeriod
					else
					if (NewDay < 100)
						LocalDay	 	= "0" + TempPeriod
					else
						LocalDay		= TempPeriod
										
				if (NewPeriodType.Quarter)
					LocalPeriod = NewQuarterString
				else
				if (NewPeriodType.Month)
					LocalPeriod = NewMonthString
				else
				if (NewPeriodType.Week)
					LocalPeriod = NewWeekString
				else
				if (NewPeriodType.Day)
					LocalPeriod = NewDayString
				else
				if (NewPeriodType.EndDate)
					LocalPeriod = NewEndDateString
				
				if (NewPeriodType entered)
					if (!CreateAll)						
						constraint (!LocalPeriod exists)
							"PeriodAlreadyExists"
				
			Exit Rules															
				if (NewPeriodType entered)
					if (!CreateAll)
						invoke CreateSubordinate
							invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
							invoked.PeriodType		       = NewPeriodType
							invoked.NewPeriod       	   = LocalPeriod
							invoked.DisplayPeriod		   = NewDisplayPeriod
							invoked.ParentPeriod		   = GeneralLedgerCalendarPeriod
							invoked.Quarter				   = NewQuarter
							invoked.Month				   = NewMonth
							invoked.Week  				   = NewWeek
							invoked.Day					   = NewDay
							invoked.CreateEndDate		   = NewEndDate
							if (NewPeriodType.EndDate)
								invoked.Year			   = NewEndDate year
							else
								invoked.Year			   = Year 
					else
						if (PeriodType.Year)
							I1 = 1
							if (NewPeriodType.Month)
								I2 = 12
							else
							if (NewPeriodType.Quarter)
								I2 = 4
							else
							if (NewPeriodType.Week)
								I2 = 52
							else
							if (NewPeriodType.Day)
								I2 = NumberOfDays
						else
						if (PeriodType.Quarter)
							if (NewPeriodType.Month)
								if (Quarter = 1)
									I1 = 1
									I2 = 3
								else
								if (Quarter = 2)
									I1 = 4
									I2 = 6
								else
								if (Quarter = 3)
									I1 = 7
									I2 = 9
								else
									I1 = 10
									I2 = 12
							else
								if (Quarter = 1)
									I1 = 1
									I2 = 13
								else
								if (Quarter = 2)
									I1 = 14
									I2 = 26
								else
								if (Quarter = 3)
									I1 = 27
									I2 = 39
								else
									I1 = 40
									I2 = 52
						while (I1 <= I2)
							invoke CreatePeriodWithin
								resume on error
								invoked.GeneralLedgerCalendarYear = GeneralLedgerCalendarYear
								invoked.NewPeriodType			  = NewPeriodType
								if (NewPeriodType.Quarter)
									invoked.NewQuarter			  = I1
								else
								if (NewPeriodType.Month)
									invoked.NewMonth		      = I1
								else
								if (NewPeriodType.Week)
									invoked.NewWeek			      = I1
								else
									invoked.NewDay				  = I1
							I1 += 1	
				else
					LocalBeginPeriod = ExistingEndDateBegin
					LocalEndPeriod   = ExistingEndDateEnd
					for each EndDatesWithinRange
						LookupPeriod = each.GeneralLedgerCalendarPeriod
						constraint (!LookupPeriodShadowRel exists)
							"DateAlreadyExistsInCalendar-<LookupPeriod>"
						invoke Create GeneralLedgerPeriodHierarchy set
							invoked.SubordinatePeriod	   = each.GeneralLedgerCalendarPeriod
							invoked.TopNode				   = DerivedTopNode
 						LocalPeriod   = each.GeneralLedgerCalendarPeriod
						include CreateShadowForDate	
				
		Move is an Instance Action
			valid when (PeriodNode)		
			Parameters
				GeneralLedgerCalendarYear 
					default label is "GlobalLedgerCalendarYear"
				ParentCalendarYearMatch					
				NewParent is a GeneralLedgerCalendarPeriod
							
			Parameter Rules
				GeneralLedgerCalendarYear
					initial value is Year
					
				ParentCalendarYearMatch
					initial value is YearMatch
											
				NewParent
					required
					constraint (NewParent.SummaryNode)
						"ParentMustBeASummaryNode"
					constraint (NewParent.TopNode = DerivedTopNode)
						"ParentDoesNotBelongToThisCalendar"
					if (PeriodType.Quarter)
						constraint (NewParent.PeriodType.Year)
							"ParentMustBeAYear"
					else
					if (PeriodType.Month)
						constraint (NewParent.PeriodType.Year
						or   	    NewParent.PeriodType.Quarter)
							"ParentMustBeAYearOrQuarter"
					else
					if (PeriodType.Week)
						constraint (NewParent.PeriodType.Year
						or		    NewParent.PeriodType.Month
						or			NewParent.PeriodType.Quarter)
							"ParentMustBeAYearOrMonthOrQuarter"
										
			Action Rules
				if (GeneralLedgerCalendarPeriod like "_YTD")
					LocalRelPeriod = (GeneralLedgerCalendarPeriod - "_YTD")
				else
				if (GeneralLedgerCalendarPeriod like "_LTD")
					LocalRelPeriod = (GeneralLedgerCalendarPeriod - "_LTD")
				else 
					LocalRelPeriod = GeneralLedgerCalendarPeriod
													
				LocalParent    = LocalRelPeriod.first ParentRel.GeneralLedgerCalendarPeriod
	
				invoke Delete OldParentRel
				invoke Create GeneralLedgerPeriodHierarchy
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.GeneralLedgerCalendarPeriod = NewParent
					invoked.SubordinatePeriod			= GeneralLedgerCalendarPeriod								
					invoked.TopNode				    	= DerivedTopNode
					
 				if (PeriodType.EndDate)
 					LocalPeriod   = GeneralLedgerCalendarPeriod
					include CreateShadowForDate		
				else
					invoke WalkDownHierarchy			  

				if (!GeneralLedgerCalendar.CalendarType.Other
				and !GeneralLedgerCalendar.CalendarType.Days) 		
					if (!GeneralLedgerCalendarPeriod like "*_YTD"
					and !GeneralLedgerCalendarPeriod like "*_LTD"
					and !GeneralLedgerCalendar.CalendarType.Other
					and !GeneralLedgerCalendar.CalendarType.Days) 
						LocalRelPeriod = GeneralLedgerCalendarPeriod
						LocalParent    += "_YTD"
						if (!PeriodType.EndDate)
							LocalRelPeriod = (GeneralLedgerCalendarPeriod + "_YTD")
						invoke Delete OldParentRel
		
						if ((PeriodType.EndDate
						and  NewParent.PeriodType.Year)
						or  (!PeriodType.EndDate))
							invoke Create GeneralLedgerPeriodHierarchy
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.GeneralLedgerCalendarPeriod = (NewParent + "_YTD")
								if (PeriodType.EndDate)
									invoked.SubordinatePeriod		= GeneralLedgerCalendarPeriod
								else
									invoked.SubordinatePeriod		= (GeneralLedgerCalendarPeriod + "_YTD")								
								invoked.TopNode				    	= DerivedYTDTopNode
	
						LocalParent    -= "_YTD"
						LocalParent    += "_LTD"
						if (!PeriodType.EndDate)						
							LocalRelPeriod = (GeneralLedgerCalendarPeriod + "_LTD")
						invoke Delete OldParentRel
		
						if ((PeriodType.EndDate
						and  NewParent.PeriodType.Year)
						or  (!PeriodType.EndDate))
							invoke Create GeneralLedgerPeriodHierarchy
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.GeneralLedgerCalendarPeriod = (NewParent + "_LTD")
								if (PeriodType.EndDate)
									invoked.SubordinatePeriod		= GeneralLedgerCalendarPeriod
								else
									invoked.SubordinatePeriod		= (GeneralLedgerCalendarPeriod + "_LTD")								
								invoked.TopNode				    	= DerivedLTDTopNode
		
				invoke PersistJulianRange GeneralLedgerCalendarPeriod
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmCalendar				  = GeneralLedgerCalendar
	
		WalkDownHierarchy is an Instance Action
			restricted
			Action Rules
				
				for each ChildrenRel
					if (each.PeriodType.EndDate)
						LocalPeriod   = each.GeneralLedgerCalendarPeriod
						include CreateShadowForDate								
					else
						invoke WalkDownHierarchy each.GeneralLedgerCalendarPeriod	

		CreateClosePeriod is an Instance Action

			Action Rules
				invoke Create GeneralLedgerClosePeriod
					invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
					invoked.GeneralLedgerCloseConfiguration = GeneralLedgerCloseConfiguration
					invoked.GeneralLedgerCloseYear 			= GeneralLedgerCloseYear
					invoked.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = GeneralLedgerCalendarPeriod
										
		PurgeClosePeriod is an Instance Action
			restricted
			Action Rules
				invoke Delete ClosePeriodRel	

		SetJulianDates is an Instance Action
			restricted
			
			Action Rules
				StartDateJulian = DerivedStartDateJulian
				EndDateJulian   = DerivedEndDateJulian	
										
		PersistJulianRange is a Set Action
			restricted
			disable checkpoint
			
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCalendar				  is a GeneralLedgerCalendar
					default label is "Calendar"
				PrmKeepInProcess		is Boolean
				
			Parameter Rules
				PrmFinanceEnterpriseGroup	
					required
				PrmCalendar
					required
			
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and   (TopNode = PrmCalendar.TopNode
				or     TopNode = PrmCalendar.YTDTopNode
				or	   TopNode = PrmCalendar.LTDTopNode))
							
			Action Rules
				Set Rules
					Exit Rules
						invoke BuildCalendarDateAndPeriod GeneralLedgerCalendarPeriod
							invoked.PrmFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
							invoked.PrmCalendar				  	= PrmCalendar
							invoked.PrmKeepInProcess			= PrmKeepInProcess
				
				Instance Rules
					StartDateJulian = DerivedStartDateJulian
					EndDateJulian   = DerivedEndDateJulian
					if (PeriodType.Year
					or  PeriodType.Quarter
					or  PeriodType.Month
					or  PeriodType.Week
					or  PeriodType.Day)
						if (GeneralLedgerCalendarPeriod like "*_YTD") 
							DisplayPeriod = DefaultDisplayPeriod + "_YTD"
						else
						if (GeneralLedgerCalendarPeriod like "*_LTD")
							DisplayPeriod = DefaultDisplayPeriod + "_LTD"
						else
							DisplayPeriod = DefaultDisplayPeriod
					
					for each EndDatesWithinSummaryPeriodRel
						invoke UpdateEndDateDisplayPeriod each.SubordinatePeriod
	
		UpdateEndDateDisplayPeriod is an Instance Action
			restricted
			Action Rules
				DisplayPeriod   = DefaultDisplayPeriod
				StartDateJulian = GeneralLedgerCalendarPeriod
				EndDateJulian   = GeneralLedgerCalendarPeriod

		DeleteEndDateCalendarPeriods is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and   (PeriodType.EndDate
				or     PeriodType.BeginningBalance))
						
			Action Rules
				Instance Rules
					invoke Delete
								
		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord	
					
		TriggerGeneralLedgerCalendarPeriod is an Instance Action
			default label is "TriggerGlobalLedgerCalendarPeriod"
			restricted 
			Parameters
				LocalActionCode		is an ActionCode
			Action Rules
				increment bod id.VariationID
				trigger "GLCPBeginningBalanceService" PA service
					resume on error
					title is "EG:<FinanceEnterpriseGroup>GLCP<GeneralLedgerCalendarPeriod>"
					Criteria
						FinanceEnterpriseGroup
					Variables
						LocalActionCode
							variable name is ActionCode
						include persistent fields from GeneralLedgerCalendarPeriod
						LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
							variable name is CurrentTimeStamp
						PeriodType 
							variable name is PeriodType 													

#ifdef module integration
		SendGeneralLedgerCalendarPeriodNativelpl is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is GLCPFinancialCalendarBODXML
					bod type is "Sync.FinancialCalendar"
					document id is DerivedDocumentID
					variation id is DerivedBODVariationID
				
					
		TriggerGeneralLedgerCalendarPeriodNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
				PrmLocalActionCode is Alpha size 30
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "FinancialCalendar"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "GeneralLedgerCalendarPeriod"
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
					invoked.PrmMainUserTemplate			= "IONSyncFinancialCalendar_GeneralLedgerCalendarPeriod_CalendarPeriod_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				LocalBODTrigger = true
				BODActionCode = PrmLocalActionCode
				if(FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "FinancialCalendar"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Reference1				= GeneralLedgerCalendarPeriod
							invoked.Reference2				= "GeneralLedgerCalendarPeriod"	
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODID					= DerivedBODID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Reference1				= GeneralLedgerCalendarPeriod
							invoked.Reference2				= "GeneralLedgerCalendarPeriod"					
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendGeneralLedgerCalendarPeriodNativelpl
						resume on error
							Error            							= true
							ErrorMessage     							= error message
					if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML								= GLCPFinancialCalendarBODXML
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODID									= DerivedBODID
							invoked.BODXML									= GLCPFinancialCalendarBODXML												

#endif
		BuildCalendarDateAndPeriod is a Set Action	
			restricted
			disable checkpoint

			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCalendar						is a GeneralLedgerCalendar
					default label is "Calendar"
				PrmKeepInProcess				is Boolean

			Parameter Rules
				

			Local Fields
				LocalDailyDate						is Date
				LocalPeriodEndDate					is Date
				LocalProcessTopNode					is Boolean
				LocalCalendar						is like GeneralLedgerCalendar

			Instance Selection
				where ((PeriodType.Year
				or      PeriodType.Quarter
				or      PeriodType.Month
				or      PeriodType.Week)
				and    (PrmFinanceEnterpriseGroup not entered or PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup)
				and    (PrmCalendar               not entered or PrmCalendar.TopNode       = TopNode))

			Sort Order	
				FinanceEnterpriseGroup
				TopNode
				Year
				PeriodType
				GeneralLedgerCalendarPeriod
						
			Action Rules
				Set Rules

					Exit Rules
						if(!PrmKeepInProcess
						and PrmCalendar.GenerationInProcess)
							invoke UpdateGenerationStatus PrmCalendar
								invoked.PrmGenerationInProcess = false

				TopNode Set Rules
					Entrance Rules
						initialize LocalCalendar
						initialize LocalProcessTopNode
						if (CalendarRel exists)											
							LocalProcessTopNode = true
							LocalCalendar		= CalendarRel.GeneralLedgerCalendar

				Instance Rules
					initialize LocalDailyDate
					initialize LocalPeriodEndDate

					LocalDailyDate						= DerivedStartDate				
					LocalPeriodEndDate					= DerivedEndDate				

					if (LocalProcessTopNode												
					and LocalDailyDate		entered
					and LocalPeriodEndDate	entered)
						while (LocalDailyDate			<= LocalPeriodEndDate)
							LocalDate					= LocalDailyDate
							LocalGeneralLedgerCalendar	= LocalCalendar
							if (not GeneralLedgerCalendarDateRel exists)
								invoke Create GeneralLedgerCalendarDate
									invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
									invoked.GeneralLedgerCalendar			= CalendarRel.GeneralLedgerCalendar
									invoked.GeneralLedgerCalendarDate		= LocalDailyDate
									invoked.Year							= Year
									if (PeriodType.Year)
										invoked.YearToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
									else
									if (PeriodType.Quarter)
										invoked.QuarterToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
									else
									if (PeriodType.Month)
										invoked.MonthToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
									else
									if (PeriodType.Week)
										invoked.WeekToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
							else
								invoke Update GeneralLedgerCalendarDateRel
									invoked.Year							= Year
									if (PeriodType.Year)
										invoked.YearToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
									else
									if (PeriodType.Quarter)
										invoked.QuarterToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
									else
									if (PeriodType.Month)
										invoked.MonthToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
									else
									if (PeriodType.Week)
										invoked.WeekToDateCalendarPeriod	= GeneralLedgerCalendarPeriod
							LocalDailyDate	+= 1
#ifdef module ad
		BuildDailyPeriod is a Set Action
			restricted
			disable checkpoint

			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCalendar						is a GeneralLedgerCalendar
					default label is "Calendar"
				PrmYear                         is a GeneralLedgerCalendarYear
					default label is "StartYear"
				PrmEndYear						is a GeneralLedgerCalendarYear
					default label is "EndYear"
				PrmCreateTopNodes				is Boolean
				PrmCreateDailyPeriods			is Boolean
				PrmCreateBeginningBalance		is Boolean
			Parameter Rules
				

			Local Fields
				LocalDailyDate						is Date
				LocalPeriodEndDate					is Date
				LocalProcessTopNode					is Boolean
				LocalCalendar						is like GeneralLedgerCalendar
				LocalCntPeriod                      is Numeric size 3
				LocalCalendarSequence				is Numeric 4
				LocalPeriodPadding					is Alpha size 6
				LocalMonthPadding                   is Alpha size 2
				LocalJulianDate						is AlphaUpper 7
				LocalDisplayPeriod                  is Alpha 30
				LocalDailyCalendarPeriod            is a DailyCalendarPeriod
				LocalDailyPeriodTopNode				is like DailyCalendarPeriod
				LocalCBTopNode						is like DailyCalendarPeriod
				LocalYAGTopNode						is like DailyCalendarPeriod
				LocalQAGTopNode						is like DailyCalendarPeriod
				LocalMAGTopNode						is like DailyCalendarPeriod
				LocalQuarterNumeric                 is Numeric 1
				LocalYearStartDate					is Date
				LocalYearStartJulianDate			is AlphaUpper 7
				LocalProcessYear                    is Year

			Instance Selection
				where (PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
				and    PrmCalendar.TopNode       = TopNode
				and   (Year >= PrmYear 
				and   (PrmEndYear not entered or Year <= PrmEndYear)))

			Sort Order	
				FinanceEnterpriseGroup
				TopNode
				Year
				PeriodType
				GeneralLedgerCalendarPeriod
						
			Action Rules
				FinanceEnterpriseGroup Set Rules
					Entrance Rules

				TopNode Set Rules
					Entrance Rules
						initialize LocalCalendar
						initialize LocalProcessTopNode
						initialize LocalCalendarSequence

						if (CalendarRel exists)											
							LocalProcessTopNode		= true
							LocalCalendar			= CalendarRel.GeneralLedgerCalendar
							LocalCalendarSequence	= CalendarRel.GeneralLedgerCalendar.CalendarSequence

							initialize LocalDailyPeriodTopNode
							initialize LocalCBTopNode
							initialize LocalYAGTopNode
							initialize LocalQAGTopNode
							initialize LocalMAGTopNode
							initialize LocalDailyCalendarPeriod
							LocalDailyPeriodTopNode = CalendarRel.TopNode
							LocalCBTopNode	= CalendarRel.CBTopNodeString
							LocalYAGTopNode	= CalendarRel.YAGTopNodeString
							LocalMAGTopNode	= CalendarRel.MAGTopNodeString
							LocalQAGTopNode	= CalendarRel.QAGTopNodeString

							if ((CalendarRel.GeneralLedgerCalendar.CBTopNode  not = LocalCBTopNode)
							or  (CalendarRel.GeneralLedgerCalendar.YAGTopNode not = LocalYAGTopNode)
							or  (CalendarRel.GeneralLedgerCalendar.MAGTopNode not = LocalMAGTopNode)
							or  (CalendarRel.GeneralLedgerCalendar.QAGTopNode not = LocalQAGTopNode))
								invoke Update CalendarRel
									invoked.CBTopNode  = LocalCBTopNode
									invoked.YAGTopNode = LocalYAGTopNode
									invoked.MAGTopNode = LocalMAGTopNode
									invoked.QAGTopNode = LocalQAGTopNode
							
							if (PrmCreateTopNodes)

								LocalDailyCalendarPeriod = LocalCBTopNode
								if (not LocalDailyCalendarPeriod exists)
									invoke CreateTopNode DailyCalendarPeriod
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
										invoked.DisplayPeriod          = ("Current Balance Top Node for " + LocalCalendar)
										invoked.TopNode                = LocalDailyCalendarPeriod
										invoked.CalendarTopNode        = TopNode

								initialize LocalDailyCalendarPeriod
								LocalDailyCalendarPeriod = LocalYAGTopNode
								if (not LocalDailyCalendarPeriod exists)
									invoke CreateTopNode DailyCalendarPeriod
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
										invoked.DisplayPeriod          = ("Yearly Aggregate Top Node for " + LocalCalendar)
										invoked.TopNode                = LocalDailyCalendarPeriod
										invoked.CalendarTopNode        = TopNode

								initialize LocalDailyCalendarPeriod
								LocalDailyCalendarPeriod = LocalMAGTopNode
								if (not LocalDailyCalendarPeriod exists)
									invoke CreateTopNode DailyCalendarPeriod
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
										invoked.DisplayPeriod          = ("Monthly Aggregate Top Node for " + LocalCalendar)
										invoked.TopNode                = LocalDailyCalendarPeriod
										invoked.CalendarTopNode        = TopNode

								initialize LocalDailyCalendarPeriod
								LocalDailyCalendarPeriod = LocalQAGTopNode
								if (not LocalDailyCalendarPeriod exists)
									invoke CreateTopNode DailyCalendarPeriod
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
										invoked.DisplayPeriod          = ("Quarterly Aggregate Top Node for " + LocalCalendar)
										invoked.TopNode                = LocalDailyCalendarPeriod
										invoked.CalendarTopNode        = TopNode
				Year Set Rules
					Entrance Rules
						if (PeriodType.Year)
							LocalYearStartDate       = DerivedStartDate
							LocalYearStartJulianDate = StartDateJulian
							LocalProcessYear         = Year
							LocalYearAlpha      	 = Year
	
							if (PrmCreateBeginningBalance)
								initialize LocalDailyCalendarPeriod
								CreateEndDate            = DerivedStartDate
								LocalDailyCalendarPeriod = LocalYearAlpha + "000"

								if (not LocalDailyCalendarPeriod exists)
									invoke CreateBeginningBalance DailyCalendarPeriod
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
										invoked.DisplayPeriod          = DerivedBeginningBalanceDisplayPeriod
										invoked.PeriodType             = PeriodType.BeginningBalance
										invoked.Year                   = Year

					Exit Rules
						if (PrmCreateDailyPeriods)
							invoke AttachEndDatesToDailyStructure DailyCalendarPeriod
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
								invoked.PrmCalendar               = PrmCalendar
								invoked.PrmYear                   = LocalProcessYear

				PeriodType Set Rules
					Entrance Rules
					Exit Rules

				Set Rules
					Exit Rules
						if(PrmCalendar.GenerationInProcess)
							invoke UpdateGenerationStatus PrmCalendar
								invoked.PrmGenerationInProcess = false
				
				Instance Rules
					if (PrmCreateDailyPeriods)

						initialize LocalDailyDate
						initialize LocalPeriodEndDate
						LocalDailyDate      = DerivedStartDate		
						LocalPeriodEndDate  = DerivedEndDate			
						LocalYearAlpha      = Year
						LocalMonthNumeric   = Month
						LocalQuarterNumeric = Quarter
						LocalCntPeriod      = 1
						if (LocalDailyDate     entered
						and LocalPeriodEndDate entered)
							while (LocalDailyDate <= LocalPeriodEndDate)
								initialize LocalDailyCalendarPeriod
								initialize LocalJulianDate
								LocalDate                = LocalDailyDate
								LocalJulianDate          = NewEndDateString
								LocalDailyCalendarPeriod = LocalJulianDate
								if (PeriodType.Year)

									if (not LocalDailyCalendarPeriod exists)
										invoke CreateEndDate DailyCalendarPeriod
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.Year                   = LocalDailyDate year
											invoked.Date                   = LocalDailyDate
											invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
											invoked.DisplayPeriod          = LocalDailyDate
											invoked.StartDateJulian        = LocalJulianDate
											invoked.EndDateJulian          = LocalJulianDate

									initialize LocalDailyCalendarPeriod
									initialize LocalDisplayPeriod
									if (LocalCntPeriod < 10)
										LocalPeriodPadding = ("D00" + LocalCntPeriod)
									else
										if (LocalCntPeriod < 100)
											LocalPeriodPadding = ("D0" + LocalCntPeriod)
										else
											LocalPeriodPadding = ("D" + LocalCntPeriod)
									LocalDisplayPeriod       = (LocalYearAlpha + LocalPeriodPadding + "_CB")
									LocalDailyCalendarPeriod = (LocalCalendarSequence + "_" + LocalYearAlpha + LocalPeriodPadding + "_CB")
									if (not LocalDailyCalendarPeriod exists)
										invoke CreateCBSummaryNode DailyCalendarPeriod
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
											invoked.DisplayPeriod          = LocalDisplayPeriod
											invoked.Year                   = Year
											invoked.Date                   = LocalDailyDate
											invoked.Day                    = LocalCntPeriod
											invoked.TopNode                = LocalCBTopNode
											invoked.StartDateJulian        = StartDateJulian
											invoked.EndDateJulian          = LocalJulianDate
											invoked.CalendarTopNode        = TopNode

									initialize LocalDailyCalendarPeriod
									initialize LocalDisplayPeriod
									LocalDisplayPeriod       = (LocalYearAlpha + LocalPeriodPadding + "_YAG")
									LocalDailyCalendarPeriod = (LocalCalendarSequence + "_" + LocalYearAlpha + LocalPeriodPadding + "_YAG")
									if (not LocalDailyCalendarPeriod exists)
										invoke CreateYAGSummaryNode DailyCalendarPeriod
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
											invoked.DisplayPeriod          = LocalDisplayPeriod
											invoked.Year                   = Year
											invoked.Date                   = LocalDailyDate
											invoked.Day                    = LocalCntPeriod
											invoked.TopNode                = LocalYAGTopNode
											invoked.StartDateJulian        = StartDateJulian
											invoked.EndDateJulian          = LocalJulianDate
											invoked.CalendarTopNode        = TopNode

								if (PeriodType.Quarter)
									initialize LocalDailyCalendarPeriod
									initialize LocalDisplayPeriod
									if (LocalCntPeriod < 10)
										LocalPeriodPadding = ("D0" + LocalCntPeriod)
									else
										if (LocalCntPeriod < 100)
											LocalPeriodPadding = ("D" + LocalCntPeriod)
									LocalDisplayPeriod       = (LocalYearAlpha + "Q" + LocalQuarterNumeric + LocalPeriodPadding + "_QAG")
									LocalDailyCalendarPeriod = (LocalCalendarSequence + "_" + LocalYearAlpha + "Q" + LocalQuarterNumeric + LocalPeriodPadding + "_QAG")
									if (not LocalDailyCalendarPeriod exists)
										invoke CreateQAGSummaryNode DailyCalendarPeriod
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
											invoked.DisplayPeriod          = LocalDisplayPeriod
											invoked.Year                   = Year
											invoked.Date                   = LocalDailyDate
											invoked.Quarter                = Quarter
											invoked.Day                    = LocalCntPeriod
											invoked.TopNode                = LocalQAGTopNode
											invoked.StartDateJulian        = StartDateJulian
											invoked.EndDateJulian          = LocalJulianDate
											invoked.CalendarTopNode        = TopNode

								if (PeriodType.Month)
									initialize LocalDailyCalendarPeriod
									initialize LocalDisplayPeriod

									if (LocalCntPeriod < 10)
										LocalPeriodPadding = ("D0" + LocalCntPeriod)
									else
										LocalPeriodPadding = ("D" + LocalCntPeriod)

									if (LocalMonthNumeric < 10)
										LocalMonthPadding = "M0" 
									else
										LocalMonthPadding = "M"
									LocalDisplayPeriod       = (LocalYearAlpha + LocalMonthPadding + LocalMonthNumeric + LocalPeriodPadding + "_MAG")
									LocalDailyCalendarPeriod = (LocalCalendarSequence + "_" + LocalYearAlpha + LocalMonthPadding + LocalMonthNumeric + LocalPeriodPadding + "_MAG")
									if (not LocalDailyCalendarPeriod exists)
										invoke CreateMAGSummaryNode DailyCalendarPeriod
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.DailyCalendarPeriod    = LocalDailyCalendarPeriod
											invoked.DisplayPeriod          = LocalDisplayPeriod
											invoked.Year                   = Year
											invoked.Date                   = LocalDailyDate
											invoked.Month                  = Month
											invoked.Day                    = LocalCntPeriod
											invoked.TopNode                = LocalMAGTopNode
											invoked.StartDateJulian        = StartDateJulian
											invoked.EndDateJulian          = LocalJulianDate
											invoked.CalendarTopNode        = TopNode
											invoked.TransientStartDateJulian  = LocalYearStartJulianDate

								LocalCntPeriod  += 1
								LocalDailyDate	+= 1
#endif
