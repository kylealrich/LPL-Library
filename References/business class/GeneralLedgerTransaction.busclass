GeneralLedgerTransaction is a BusinessClass
	default label is "GlobalLedgerTransaction"
    owned by GeneralLedger
    prefix is GLTRN

    Ontology
    	symbolic key is GeneralLedgerTransaction
    	
    Patterns
		implements InlineUserFields
			size is 1000
		implements IncrementalReplication
			index update stamp set
			indicator field is ColumnarReplicated
				replicate when false
					then set to true




 

















































































































   	
    Context Fields
    	BypassStructureRelationEdit
		SearchDateRange					is a DateRange
		PostingDateRange
		SearchPeriodRange				is a CloseCalendarPeriodRange
		Actor
		AccountAnalysisSettings		
		SummarizedInterfaceTransaction
		SearchGroup						is a GeneralLedgerTransaction group
		ColumnarSearchFinanceDimension1Structure	is a FinanceDimension1Structure
		ColumnarSearchFinanceDimension1				is a FinanceDimension1
		ColumnarSearchFinanceDimension2Structure	is a FinanceDimension2Structure
		ColumnarSearchFinanceDimension2				is a FinanceDimension2
		ColumnarSearchFinanceDimension3Structure	is a FinanceDimension3Structure
		ColumnarSearchFinanceDimension3				is a FinanceDimension3
		ColumnarSearchFinanceDimension4Structure	is a FinanceDimension4Structure
		ColumnarSearchFinanceDimension4				is a FinanceDimension4
		ColumnarSearchFinanceDimension5Structure	is a FinanceDimension5Structure
		ColumnarSearchFinanceDimension5				is a FinanceDimension5
		ColumnarSearchFinanceDimension6Structure	is a FinanceDimension6Structure
		ColumnarSearchFinanceDimension6				is a FinanceDimension6
		ColumnarSearchFinanceDimension7Structure	is a FinanceDimension7Structure
		ColumnarSearchFinanceDimension7				is a FinanceDimension7
		ColumnarSearchFinanceDimension8Structure	is a FinanceDimension8Structure
		ColumnarSearchFinanceDimension8				is a FinanceDimension8
		ColumnarSearchFinanceDimension9Structure	is a FinanceDimension9Structure
		ColumnarSearchFinanceDimension9				is a FinanceDimension9
		ColumnarSearchFinanceDimension10Structure	is a FinanceDimension10Structure
		ColumnarSearchFinanceDimension10			is a FinanceDimension10
		ColumnarSearchProjectStructure				is a ProjectStructure
		ColumnarSearchProject						is a Project
		ColumnarSearchAccountingUnitStructure		is a AccountingUnitStructure
		ColumnarSearchAccountingUnit				is a AccountingUnit
		ColumnarSearchReportingChart				is a ReportingChart
		ColumnarSearchGeneralLedgerChartAccount		is a GeneralLedgerChartAccount

#ifdef module reconciliation
		ReconciliationAccountStructure
		ReconciliationAccount
		PeriodEndReconciliation
#endif		
    Persistent Fields
        Status							is Numeric 1
            States
                Unreleased				value is 0
                Released	   			value is 1
                ManualEncumbrance		value is 6
                ProcessAutoReverse		value is 7
                Memo  					value is 8
                Posted					value is 9
        	disable Auditing
		FinanceCodeBlock				is a TransactionCodeBlock
	    DimensionCode
        GeneralLedgerEvent
        	default label is "GlobalLedgerEvent"
        TransactionDate					is an ExchangeDate
        CurrencyCode					is a FromCurrency
        TransactionAmount				is a CurrencyAmount 

        Reference
        Description						is Alpha up to 60
        UnitsAmount						
        AutoReverse			        	is Boolean
        PostingDate
    	ChartSection
		JournalType						is Numeric 1
		ReportCurrencyAmount			is a FinanceCurrencyAmount
    	System							is a GeneralLedgerSystemCode
    	GainLossRunSequence				is like RunSequence
    	GeneralLedgerCalendarPeriod
    		default label is "GlobalLedgerCalendarPeriod"
		PrimaryLedger					is a Ledger
		GainLosslinkSequence			is Numeric 6
		IsGainLossAccountTransaction	is Boolean
		CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected
		MigStatus
		ColumnarReplicated				is Boolean
			disable Auditing

	Local Fields

		LocalAllowRebuild				is Boolean					
		LocalCurrencyRelationship		is a CurrencyRelationship
		LocalCurrencyMultDiv			is Alpha size 1
		LocalClosePeriodRange			is a ClosePeriodRange
		LocalSystemAccount				is a SystemAccount
		LocalZoneAccountingUnit			is a AccountingUnit
		LocalZoneFinanceDimension		is a FinanceDimension1
		LocalInstCurrencyCode			is a Currency
		LocalCurrency					is like Currency
		LocalInstFinanceDimension1		is a FinanceDimension1
		LocalCurrencyCalculationGroup	is a CurrencyCalculationGroup
		LocalJournalAmountUpdated		is Boolean
		LocalInstAccountingEntity		is like AccountingEntity
		LocalInstAccountingUnit			is like AccountingUnit


		LocalBudgetEntity				is like AccountingEntity
		LocalBudgetLedger				is like Ledger
		LocalCloseYear					is like GeneralLedgerCloseYear
		LocalClosePeriod				is a GeneralLedgerClosePeriod
		LocalJournalControl 			is like GeneralLedgerJournalControl
		LocalRelatedJournalTransaction	is BusinessObjectReference
		LocalInstLedger					is like Ledger
		LocalInstCalendarPeriod 		is like GeneralLedgerCalendarPeriod
		LocalTranslationCode			is a GeneralLedgerTranslationCode
		LocalAmountForCalculation		is an InternationalAmount
#ifdef module reconciliation		
		LocalReconAccountStructure		is like ReconciliationAccountStructure
		LocalReconAccount				is like ReconciliationAccount
		LocalOriginatingTransaction		is BusinessObjectReference
#endif		
		LocalInstGeneralLedgerChartAccount	is like GeneralLedgerChartAccount
#ifdef module ad
		LocalADBTransaction				is a ADBTransaction
		LocalAverageDailyBalanceTransaction	is a AverageDailyBalanceTransaction
		LocalDailyPeriodTotal			is a DailyPeriodTotal
		LocalDailyCalendarPeriod		is a DailyCalendarPeriod
		LocalRebuildUREAccount			is Boolean
#endif
		LocalManualEncumbranceAmount	is like CurrencyAmount
		LocalScenario					is a Scenario
		LocalGeneralLedgerTotal			is a GeneralLedgerTotal
		LocalInstFinanceCodeBlock		is a FinanceCodeBlock
		LocalCurrencyCalc				is Boolean
		LocalSaveOverTolerance			is a SaveOverTolerance
		LocalIncudeAccountForADB		is Boolean
		LocalNonChartAccount			is Boolean
		LocalJournalBridgeAmount		is a InternationalAmount
		LocalRecurringTransAmount		is like CurrencyAmount
#ifdef module ap

		LocalInvoice					is like Invoice
		LocalPurchaseOrder				is like PurchaseOrder
		LocalVendor						is like Vendor
		LocalItem						is like Item
		LocalItemDescription			is like Description
		LocalAddOnCharge				is like AddOnCharge
		LocalTaxCode					is like TaxCode
		LocalInvoiceQuantity			is like Quantity
		LocalInvoiceUOM					is like UnitOfMeasure
		LocalInvoiceUnitCost			is like UnitCost
		LocalMatchProcessType			is like MatchProcessType	//"E" = Expense

		LocalOrigICDocument				is Numeric 10
		LocalOrigICLine					is Numeric 6
		LocalICPostingType				is like PostingType
		LocalICInventoryTransaction		is like InventoryTransaction
		LocalICTransactionSystemCode	is like TransactionSystemCode

		LocalLineNumber					is like PurchaseOrderLine
		LocalPOItem						is like Item
		LocalPOItemType					is like ItemType
		LocalPOUnitCost					is like UnitCost
		LocalPOUom						is like UnitOfMeasure
		LocalLineSource					is like SourceDocumentOrigin
		LocalCompany					is like InventoryCompany
		LocalDocumentNumeric			is like SourceDocumentNumeric
		LocalDocumentAlpha				is like SourceDocumentAlpha
#endif

		LocalGLJCCurrency				is Alpha size 5
		LocalGLJCCalendarYear			is Alpha size 5
		LocalGLJCClosePeriod			is Alpha size 20
		LocalGLJCJournalType			is Alpha size 150
		LocalInvoiceNumber				is Alpha size 60

		LocalCodeBlockDimensionType		is like CodeBlockDimensionType	
		LocalFinanceCodeBlockADB		is a FinanceCodeBlock			
		LocalFunctionalAmount         	is an InternationalAmount  
		LocalAlternateAmount			is an InternationalAmount
		LocalAlternateAmount2			is an InternationalAmount
		LocalAlternateAmount3			is an InternationalAmount
		LocalReportAmount1				is an InternationalAmount
		LocalReportAmount2				is an InternationalAmount
		LocalReportAmount3 				is an InternationalAmount
		LocalReportAmount4 				is an InternationalAmount
		LocalZeroStringLength			is Numeric 2
#ifdef module ap
		LocalDerivedFESKey 				is a FrontEndSplitKey
#endif
		LocalFEGtext					is like FinanceEnterpriseGroup	
#ifdef module cam
		LocalCustodialActivity	is Numeric size 1
#endif
		LocalDate				is Date
		LocalAlphaYear			is Alpha 4
		LocalAlphaDay			is Alpha 3
		LocalConfigurationParameter		is Alpha size up to 200
		LocalMatrixApprovalCode			is like ResponsibilityMatrixApproval
		LocalResponsibilityMatrix		is like ResponsibilityMatrix
	Transient Fields

		RecurringOption					is Numeric 1
			States
				None					value is 0
				Add						value is 1
        RecurringJournalType			is Numeric 1 
			States
				Normal			value is 0
				InterEntity		value is 1
			derive value from DerivedRecurringJournalType		
		RecurringJournalControl			is like RecurringJournalControl
			derive value from DerivedRecurringJournalControl		
		RecurringBeginningPeriod		is a GeneralLedgerClosePeriod
			derive value from DerivedRecurringBeginningPeriod		
		RecurringBeginningYear			is a GeneralLedgerCloseYear
			derive value from DerivedRecurringBeginningYear		
		RecurringEndPeriod				is a GeneralLedgerClosePeriod
			derive value from DerivedRecurringEndPeriod		
		RecurringEndYear				is a GeneralLedgerCloseYear
			derive value from DerivedRecurringEndYear		
		RecurringPostingDay				is Numeric 2
			derive value from DerivedRecurringPostingDay		
		RecurringTransactionDay			is Numeric 2
			derive value from DerivedRecurringTransactionDay		
		RecurringToCodeBlock			is a FinanceCodeBlock
        RecurringTransactionAmount		is a CurrencyAmount
        RecurringUnitsAmount			is a UnitsAmount
		RecurringGeneralLedgerEvent		is a GeneralLedgerEvent
			default label is "RecurringGlobalLedgerEvent"
        RecurringReference				is Alpha up to 30
			derive value from DerivedRecurringReference		
        RecurringDescription			is Alpha up to 60
			derive value from DerivedRecurringDescription		

		TransientFromProcessRE			is Boolean
        DoNotUpdateZoneTotal				 is Boolean
		TransientBypassStructureRelationEdit is a BypassStructureRelationEdit
		TransientJournalizeGroup			 is like JournalizeGroup
		TransientJournalControl				 is like GeneralLedgerJournalControl

		CurrentTransactionAmount			 is an InternationalAmount
 			derive value from DerivedCurrentTransactionAmount		
        	precision is CurrencyCode.NumberOfDecimals     
		CurrentFunctionalAmount				 is an InternationalAmount
			derive value from DerivedCurrentFunctionalAmount		
        	precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals     
		CalculatedFunctionalAmount			 is an InternationalAmount
        	precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals     
		CurrentAlternateAmount				 is an InternationalAmount
        	precision is AccountingEntity.AlternateCurrency.NumberOfDecimals     
		CalculatedAlternateAmount			 is an InternationalAmount
        	precision is AccountingEntity.AlternateCurrency.NumberOfDecimals     
		CurrentAlternateAmount2				 is an InternationalAmount
        	precision is AccountingEntity.AlternateCurrency2.NumberOfDecimals     
		CalculatedAlternateAmount2			 is an InternationalAmount
        	precision is AccountingEntity.AlternateCurrency2.NumberOfDecimals     
		CurrentAlternateAmount3				 is an InternationalAmount
        	precision is AccountingEntity.AlternateCurrency3.NumberOfDecimals     
		CalculatedAlternateAmount3			 is an InternationalAmount
        	precision is AccountingEntity.AlternateCurrency3.NumberOfDecimals     
		CurrentProjectAmount				 is an InternationalAmount
			precision is FinanceCodeBlock.Project.Currency.NumberOfDecimals
		CalculatedProjectAmount				 is an InternationalAmount
			precision is FinanceCodeBlock.Project.Currency.NumberOfDecimals
		CurrentReportAmount1				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
		CalculatedReportAmount1				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
		CurrentReportAmount2				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
		CalculatedReportAmount2				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
		CurrentReportAmount3				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
		CalculatedReportAmount3				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
		CurrentReportAmount4				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
		CalculatedReportAmount4				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
		CurrentReportAmount5				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
		CalculatedReportAmount5				 is an InternationalAmount
			precision is FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals

		CurrencyTable

		ManualEncumbranceAmount			 is an InternationalAmount
 			derive value from DerivedEncumbranceAmount
		
#ifdef module intercobilling
		FromBillingCompany					is a GeneralLedgerCompany
			disable surrogates        
			derive value from DerivedFromBillingCompany		
		ToBillingCompany					is a GeneralLedgerCompany
			disable surrogates        
			derive value from DerivedToBillingCompany	
		BillingRechargeItem					is a IntercompanyBillingRechargeItem
			derive value from DerivedBillingRechargeItem	
#endif							
        CreateTransactionInDetail			 is Boolean
        JournalizeSystemTransactions		 is Boolean
        TransientFromGainLoss				 is Boolean
		TransientDefaultCurrencyAmount       is Boolean
			
	Rule Blocks
		ColumnarDeleteRules
			if (ColumnarReplicated)
				ColumnarReplicated = false
				invoke modify update stamp this instance

		RecurringJournalInterface
			if (RecurringOption.Add)
				if (!RecurringJournalExists)
					invoke Create RecurringJournalControl
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.AccountingEntity		= AccountingEntity
						invoked.JournalType				= RecurringJournalType
						invoked.BeginningPeriod			= RecurringBeginningPeriod
						invoked.EndPeriod				= RecurringEndPeriod
						invoked.PostingDay				= RecurringPostingDay
						invoked.TransactionDay			= RecurringTransactionDay
						invoked.Reference				= RecurringReference
						invoked.Description				= RecurringDescription
						invoked.Ledger					= PrimaryLedger
						if (TransactionAmount	> 0)
							invoked.TotalDebit				= TransactionAmount
							invoked.TotalCredit				= (TransactionAmount * -1)
						else
							invoked.TotalDebit				= (TransactionAmount * -1)
							invoked.TotalCredit				= TransactionAmount
						if (UnitsAmount	> 0)
							invoked.UnitDebit				= UnitsAmount
							invoked.UnitCredit				= (UnitsAmount * -1)
						else
							invoked.UnitDebit				= (UnitsAmount * -1)
							invoked.UnitCredit				= UnitsAmount
						invoked.TransactionOrigin		= reference to this instance
				if (RecurringJournalExists
				and RecurringJournalControlRel.Status.Deleted)
					invoke Undelete Deleted RecurringJournalControlRel
					invoke Update Unreleased RecurringJournalControlRel
						invoked.JournalType				= RecurringJournalType
						invoked.BeginningPeriod			= RecurringBeginningPeriod
						invoked.EndPeriod				= RecurringEndPeriod
						invoked.PostingDay				= RecurringPostingDay
						invoked.TransactionDay			= RecurringTransactionDay
						invoked.Reference				= RecurringReference
						invoked.Description				= RecurringDescription
						invoked.Ledger					= PrimaryLedger
						if (TransactionAmount	> 0)
							invoked.TotalDebit				= TransactionAmount
							invoked.TotalCredit				= (TransactionAmount * -1)
						else
							invoked.TotalDebit				= (TransactionAmount * -1)
							invoked.TotalCredit				= TransactionAmount
						if (UnitsAmount	> 0)
							invoked.UnitDebit				= UnitsAmount
							invoked.UnitCredit				= (UnitsAmount * -1)
						else
							invoked.UnitDebit				= (UnitsAmount * -1)
							invoked.UnitCredit				= UnitsAmount
									
				invoke Create RecurringJournalBridge
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AccountingEntity		= AccountingEntity
					invoked.RecurringJournalControl	= RecurringJournalControlRel.RecurringJournalControl
					invoked.FrTransactionCodeBlock	= FinanceCodeBlock
					invoked.FromDimensionCode		= FinanceCodeBlock.DimensionCode
					invoked.ToTransactionCodeBlock	= RecurringToCodeBlock
					invoked.GeneralLedgerEvent		= RecurringGeneralLedgerEvent
					invoked.TransactionDate			= TransactionDate
					invoked.CurrencyCode			= CurrencyCode
					invoked.TransactionAmount		= RecurringTransactionAmount
					invoked.ReportCurrencyAmount	= ReportCurrencyAmount
					invoked.UnitsAmount				= RecurringUnitsAmount
					invoked.TransactionOrigin		= reference to this instance
					invoked.ReportCurrencyAmount.KeepRateOnly	= true
					initialize invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					initialize invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				initialize RecurringToCodeBlock
				initialize RecurringTransactionAmount
				initialize RecurringOption

		AddJournalTotals
			invoke UpdateJournalTotals GeneralLedgerJournalControl
				if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	> 0)
					invoked.PrmFunctionalDrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
				else
					invoked.PrmFunctionalCrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
				if (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	> 0)
					invoked.PrmAlternateDrAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
				else
					invoked.PrmAlternateCrAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
				if (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	> 0)
					invoked.PrmAlternateDrAmount2		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
				else
					invoked.PrmAlternateCrAmount2		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
				if (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	> 0)
					invoked.PrmAlternateDrAmount3		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
				else
					invoked.PrmAlternateCrAmount3		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount					
				if (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	> 0)
					invoked.PrmRpt1DrAmount				= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
				else
					invoked.PrmRpt1CrAmount				= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
				if (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	> 0)
					invoked.PrmRpt2DrAmount				= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
				else
					invoked.PrmRpt2CrAmount				= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
				if (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	> 0)
					invoked.PrmRpt3DrAmount				= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
				else
					invoked.PrmRpt3CrAmount				= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
				if (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	> 0)
					invoked.PrmRpt4DrAmount				= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
				else
					invoked.PrmRpt4CrAmount				= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
				if (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	> 0)
					invoked.PrmRpt5DrAmount				= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				else
					invoked.PrmRpt5CrAmount				= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				if (UnitsAmount > 0)
					invoked.PrmUnitsDrAmount			= UnitsAmount
				else
					invoked.PrmUnitsCrAmount			= UnitsAmount
				if (AutoReverse)
					if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	> 0)
						invoked.PrmAutoReverseDrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					else
						invoked.PrmAutoReverseCrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (UnitsAmount > 0)
						invoked.PrmAutoReverseUnitsDrAmount	= UnitsAmount
					else
						invoked.PrmAutoReverseUnitsCrAmount	= UnitsAmount
												
			if (AccountingEntity.BalanceTransactionCurrency)
				LocalInstCurrencyCode	= CurrencyCode
				invoke UpdateJournalCurrencyTotals GLCurrencyJournalControlRel in foreground
					if (TransactionAmount											> 0)
						invoked.PrmTransactionDrAmount			= TransactionAmount
					else
						invoked.PrmTransactionCrAmount			= TransactionAmount
					if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	> 0)
						invoked.PrmFunctionalDrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					else
						invoked.PrmFunctionalCrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	> 0)
						invoked.PrmAlternateDrAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					else
						invoked.PrmAlternateCrAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					if (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	> 0)
						invoked.PrmAlternateDrAmount2		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					else
						invoked.PrmAlternateCrAmount2		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					if (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	> 0)
						invoked.PrmAlternateDrAmount3		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					else
						invoked.PrmAlternateCrAmount3		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount						
					if (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	> 0)
						invoked.PrmRpt1DrAmount				= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					else
						invoked.PrmRpt1CrAmount				= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					if (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	> 0)
						invoked.PrmRpt2DrAmount				= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					else
						invoked.PrmRpt2CrAmount				= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					if (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	> 0)
						invoked.PrmRpt3DrAmount				= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					else
						invoked.PrmRpt3CrAmount				= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					if (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	> 0)
						invoked.PrmRpt4DrAmount				= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					else
						invoked.PrmRpt4CrAmount				= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					if (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	> 0)
						invoked.PrmRpt5DrAmount				= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					else
						invoked.PrmRpt5CrAmount				= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					if (AutoReverse)
						if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	> 0)
							invoked.PrmAutoReverseDrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							invoked.PrmAutoReverseCrAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount

		DeleteJournalTotals
			invoke UpdateJournalTotals GeneralLedgerJournalControl
				if (old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
					invoked.PrmFunctionalDrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseDrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
				else
					invoked.PrmFunctionalCrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseCrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
				if (old ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount > 0)
					invoked.PrmAlternateDrAmount	-= old ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
				else
					invoked.PrmAlternateCrAmount	-= old ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
				if (old ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount > 0)
					invoked.PrmAlternateDrAmount2	-= old ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
				else
					invoked.PrmAlternateCrAmount2	-= old ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
				if (old ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount > 0)
					invoked.PrmAlternateDrAmount3	-= old ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
				else
					invoked.PrmAlternateCrAmount3	-= old ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount					
				if (old ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount > 0)
					invoked.PrmRpt1DrAmount		-= old ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
				else
					invoked.PrmRpt1CrAmount		-= old ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
				if (old ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount > 0)
					invoked.PrmRpt2DrAmount		-= old ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
				else
					invoked.PrmRpt2CrAmount		-= old ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
				if (old ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount > 0)
					invoked.PrmRpt3DrAmount		-= old ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
				else
					invoked.PrmRpt3CrAmount		-= old ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
				if (old ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount > 0)
					invoked.PrmRpt4DrAmount		-= old ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
				else
					invoked.PrmRpt4CrAmount		-= old ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
				if (old ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount > 0)
					invoked.PrmRpt5DrAmount		-= old ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				else
					invoked.PrmRpt5CrAmount		-= old ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				if (old UnitsAmount > 0)
					invoked.PrmUnitsDrAmount	-= old UnitsAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseUnitsDrAmount -= old UnitsAmount
				else
					invoked.PrmUnitsCrAmount	-= old UnitsAmount
					if (old AutoReverse)
						invoked.PrmAutoReverseUnitsCrAmount -= old UnitsAmount
									
			if (AccountingEntity.BalanceTransactionCurrency)
				LocalInstCurrencyCode	= old CurrencyCode
				invoke UpdateJournalCurrencyTotals GLCurrencyJournalControlRel in foreground
					if (old TransactionAmount > 0)
						invoked.PrmTransactionDrAmount			-= old TransactionAmount
					else
						invoked.PrmTransactionCrAmount			-= old TransactionAmount
					if (old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
						invoked.PrmFunctionalDrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						if (old AutoReverse)
							invoked.PrmAutoReverseDrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					else
						invoked.PrmFunctionalCrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						if (old AutoReverse)
							invoked.PrmAutoReverseCrAmount	-= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (old ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount > 0)
						invoked.PrmAlternateDrAmount	-= old ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					else
						invoked.PrmAlternateCrAmount	-= old ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					if (old ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount > 0)
						invoked.PrmAlternateDrAmount2	-= old ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					else
						invoked.PrmAlternateCrAmount2	-= old ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					if (old ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount > 0)
						invoked.PrmAlternateDrAmount3	-= old ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					else
						invoked.PrmAlternateCrAmount3	-= old ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount						
					if (old ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount > 0)
						invoked.PrmRpt1DrAmount		-= old ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					else
						invoked.PrmRpt1CrAmount		-= old ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					if (old ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount > 0)
						invoked.PrmRpt2DrAmount		-= old ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					else
						invoked.PrmRpt2CrAmount		-= old ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					if (old ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount > 0)
						invoked.PrmRpt3DrAmount		-= old ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					else
						invoked.PrmRpt3CrAmount		-= old ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					if (old ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount > 0)
						invoked.PrmRpt4DrAmount		-= old ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					else
						invoked.PrmRpt4CrAmount		-= old ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					if (old ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount > 0)
						invoked.PrmRpt5DrAmount		-= old ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					else
						invoked.PrmRpt5CrAmount		-= old ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

		AssignCodeBlockDefaults
			constraint (FinanceCodeBlock.GeneralLedgerChartAccount entered)
				"BlankIsNotValidFor<FinanceEnterpriseGroup.AccountLabel>"
			ChartSection 	= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
			if (!GeneralLedgerCalendarPeriod entered)
				GeneralLedgerCalendarPeriod	= GeneralLedgerJournalControl.GeneralLedgerCalendarPeriod
			if (!FinanceCodeBlock.Ledger entered)
				FinanceCodeBlock.Ledger	= GeneralLedgerJournalControl.Ledger
			if (!PrimaryLedger entered)
				PrimaryLedger	= GeneralLedgerJournalControl.Ledger
			if (FinanceEnterpriseGroup.AccountingUnitRequired
			and FinanceCodeBlock.AccountingUnit not entered)
				FinanceCodeBlock.AccountingUnit		= SystemAccountingUnitRel.AccountingUnit
				constraint (FinanceCodeBlock.AccountingUnit entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.AccountingUnitLabel>"
			if (initiating action != "GeneralLedgerTotal.ProcessRetainedEarningsSummary")  
				if (!FinanceCodeBlock.GeneralLedgerChartAccount.SystemAccount.No)
					initialize FinanceCodeBlock.Project
					initialize ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
					initialize ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			if (FinanceEnterpriseGroup.FinanceDimension1Required
			and FinanceCodeBlock.FinanceDimension1 not entered)
				FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
				constraint (FinanceCodeBlock.FinanceDimension1 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension1Label>"
			if (FinanceEnterpriseGroup.FinanceDimension2Required
			and FinanceCodeBlock.FinanceDimension2 not entered)
				FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
				constraint (FinanceCodeBlock.FinanceDimension2 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension2Label>"
			if (FinanceEnterpriseGroup.FinanceDimension3Required
			and FinanceCodeBlock.FinanceDimension3 not entered)
				FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
				constraint (FinanceCodeBlock.FinanceDimension3 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension3Label>"
			if (FinanceEnterpriseGroup.FinanceDimension4Required
			and FinanceCodeBlock.FinanceDimension4 not entered)
				FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
				constraint (FinanceCodeBlock.FinanceDimension4 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension4Label>"
			if (FinanceEnterpriseGroup.FinanceDimension5Required
			and FinanceCodeBlock.FinanceDimension5 not entered)
				FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
				constraint (FinanceCodeBlock.FinanceDimension5 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension5Label>"
			if (FinanceEnterpriseGroup.FinanceDimension6Required
			and FinanceCodeBlock.FinanceDimension6 not entered)
				FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
				constraint (FinanceCodeBlock.FinanceDimension6 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension6Label>"
			if (FinanceEnterpriseGroup.FinanceDimension7Required
			and FinanceCodeBlock.FinanceDimension7 not entered)
				FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
				constraint (FinanceCodeBlock.FinanceDimension7 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension7Label>"
			if (FinanceEnterpriseGroup.FinanceDimension8Required
			and FinanceCodeBlock.FinanceDimension8 not entered)
				FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
				constraint (FinanceCodeBlock.FinanceDimension8 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension8Label>"
			if (FinanceEnterpriseGroup.FinanceDimension9Required
			and FinanceCodeBlock.FinanceDimension9 not entered)
				FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
				constraint (FinanceCodeBlock.FinanceDimension9 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension9Label>"
			if (FinanceEnterpriseGroup.FinanceDimension10Required
			and FinanceCodeBlock.FinanceDimension10 not entered)
				FinanceCodeBlock.FinanceDimension10	= FinanceDimension10Rel.FinanceDimension10								
				constraint (FinanceCodeBlock.FinanceDimension10 entered)
					"NeedToSetupSystem<FinanceEnterpriseGroup.FinanceDimension10Label>"
			if (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered)
				constraint (FinanceCodeBlock.Project entered)
					"<FinanceEnterpriseGroup.ProjectLabel>IsRequired"

		NoRulesCurrencyCalculation	
			if (!CurrencyTable entered)
				CurrencyTable														= GeneralLedgerJournalControl.CurrencyTable
			if (!CurrencyTable entered)
				CurrencyTable														= FinanceEnterpriseGroup.CurrencyTable
			LocalCurrencyCalculationGroup.SummarizedInterfaceTransaction			= SummarizedInterfaceTransaction
			LocalCurrencyCalculationGroup.CurrencyAmount							= TransactionAmount
			LocalCurrencyCalculationGroup.ExchangeDate								= TransactionDate
			LocalCurrencyCalculationGroup.FromCurrency								= CurrencyCode
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= FinanceEnterpriseGroup

			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= AccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyAmount	    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyAmount	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyAmount	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency					= FinanceCodeBlock.Project.Currency
			LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyFive
			LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

			ReportCurrencyAmount.FunctionalAmount.ToCurrency						= LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	
			ReportCurrencyAmount.AlternateAmount.ToCurrency						    = LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	
			ReportCurrencyAmount.AlternateAmount2.ToCurrency						= LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	
			ReportCurrencyAmount.AlternateAmount3.ToCurrency						= LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	
			ReportCurrencyAmount.ToFunctionalAmount.ToCurrency						= LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency	
			ReportCurrencyAmount.ToAlternateAmount.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency	
			ReportCurrencyAmount.ToAlternateAmount2.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency
			ReportCurrencyAmount.ToAlternateAmount3.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency	
			ReportCurrencyAmount.ProjectAmount.ToCurrency						    = LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency	
			ReportCurrencyAmount.ReportAmount1.ToCurrency							= LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency	
			ReportCurrencyAmount.ReportAmount2.ToCurrency							= LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency	
			ReportCurrencyAmount.ReportAmount3.ToCurrency							= LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency	
			ReportCurrencyAmount.ReportAmount4.ToCurrency							= LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency	
			ReportCurrencyAmount.ReportAmount5.ToCurrency							= LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency	
				
			if (!ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate entered)
				ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate  			 	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate 
			if (LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency entered
			and !ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate entered)
				ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate    		    = LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate 
			if (LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency entered
			and !ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate entered)
				ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate   		    = LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate 																
			if (LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency entered
			and !ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate entered)
				ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate   		    = LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate 																
			if (AccountingEntity		!= FinanceCodeBlock.ToAccountingEntity)
				if (LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency entered
				and !ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate     		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate 
				if (LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency entered
				and !ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate      		= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate 														
				if (LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency entered
				and !ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate     		= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate 
				if (LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency entered
				and !ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate     		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate 
			else
				initialize ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
				initialize ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
				initialize ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
				initialize ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
				initialize ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate
				initialize ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate
				initialize ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate
				initialize ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate
			if (LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency entered
			and !ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate entered)
				ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate    			    = LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate 								
			if (LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency entered
			and !ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate entered)
				ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate      		 	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate 
			if (LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency entered
			and !ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate entered)
				ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate     			 	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate 
			if (LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency entered
			and !ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate entered)
				ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate       			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate 
			if (LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency entered
			and !ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate entered)
				ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate  		    	= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate 
			if (LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency entered
			and !ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate entered)
				ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate  		     	= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate 

			if (TransactionAmount entered)
				if (!SystemTransactionEvents)
					ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount						
				if (AccountingEntity		!= FinanceCodeBlock.ToAccountingEntity)
					if (LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency entered)
						if (!SystemTransactionEvents)
							ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount	
					if (LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency entered)
						if (!SystemTransactionEvents)
							ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount	
					if (LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency entered)
						if (!SystemTransactionEvents)
							ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount	
					if (LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency entered)
						if (!SystemTransactionEvents)
							ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
				if (LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount	
				if (LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency entered)
					if (!SystemTransactionEvents)
						ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				if (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
				if (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
				if (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
				if (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
				if (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
				if (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate
				if (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate
				if (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate
				if (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate
				if (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount not entered)
					initialize ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate

		CurrencyRateDefault
			if (TransactionDate entered
			and TransactionDate		= GeneralLedgerJournalControl.TransactionDate)
				if (!ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate entered)
					ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate  			 	= GeneralLedgerJournalControl.JournalCurrencyRate.FunctionalAmount.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate entered)
					ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate    		    = GeneralLedgerJournalControl.JournalCurrencyRate.AlternateAmount.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate entered)
					ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate   		    = GeneralLedgerJournalControl.JournalCurrencyRate.AlternateAmount2.EnteredCurrencyRate 																
				if (!ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate entered)
					ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate   		    = GeneralLedgerJournalControl.JournalCurrencyRate.AlternateAmount3.EnteredCurrencyRate 																
				if (!ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate     		= GeneralLedgerJournalControl.JournalCurrencyRate.ToFunctionalAmount.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate      		= GeneralLedgerJournalControl.JournalCurrencyRate.ToAlternateAmount.EnteredCurrencyRate 														
				if (!ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate     		= GeneralLedgerJournalControl.JournalCurrencyRate.ToAlternateAmount2.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate     		= GeneralLedgerJournalControl.JournalCurrencyRate.ToAlternateAmount3.EnteredCurrencyRate 					
				if (!ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate    			    = GeneralLedgerJournalControl.JournalCurrencyRate.ProjectAmount.EnteredCurrencyRate 								
				if (!ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate      		 	= GeneralLedgerJournalControl.JournalCurrencyRate.ReportAmount1.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate     			 	= GeneralLedgerJournalControl.JournalCurrencyRate.ReportAmount2.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate       			= GeneralLedgerJournalControl.JournalCurrencyRate.ReportAmount3.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate  		    	= GeneralLedgerJournalControl.JournalCurrencyRate.ReportAmount4.EnteredCurrencyRate 
				if (!ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate entered)
					ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate  		     	= GeneralLedgerJournalControl.JournalCurrencyRate.ReportAmount5.EnteredCurrencyRate 

		CreateZoneTotalRecord
			LocalInstAccountingEntity	= FinanceCodeBlock.ToAccountingEntity
			LocalInstAccountingUnit		= FinanceCodeBlock.AccountingUnit
			LocalZoneAccountingUnit		= DerivedZoneAccountingUnit
			LocalInstFinanceDimension1	= FinanceCodeBlock.FinanceDimension1
			LocalZoneFinanceDimension	= DerivedZoneFinanceDimension
			if (AccountingEntity.AccountingUnitZoneBalancing
			and LocalZoneAccountingUnit		= GeneralLedgerJournalControl.BaseZoneAccountingUnit)
				initialize LocalZoneAccountingUnit
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing
			and LocalZoneFinanceDimension	= GeneralLedgerJournalControl.BaseZoneDimension1)
				initialize LocalZoneFinanceDimension
			if (LocalZoneFinanceDimension entered
			and !LocalZoneAccountingUnit entered)
				if (FinanceEnterpriseGroup.AccountingUnitRequired)
					if (AccountingEntity.AccountingUnitZoneBalancing)
						LocalZoneAccountingUnit		= DerivedZoneAccountingUnit
					else
						LocalZoneAccountingUnit		= SystemAccountingUnitRel.AccountingUnit
			if (LocalZoneAccountingUnit entered
			and !LocalZoneFinanceDimension entered)
				if (FinanceEnterpriseGroup.FinanceDimension1Required)
					if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
						LocalZoneFinanceDimension	= DerivedZoneFinanceDimension
					else
						LocalZoneFinanceDimension	= FinanceDimension1Rel.FinanceDimension1
			if (LocalZoneAccountingUnit entered
			or  LocalZoneFinanceDimension entered)
				LocalInstCurrencyCode		= CurrencyCode
				invoke Update GeneralLedgerZoneTotalRel
					invoked.TransactionAmount			+= TransactionAmount
					invoked.FunctionalAmount			+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.AlternateAmount				+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					invoked.AlternateAmount2			+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					invoked.AlternateAmount3			+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					invoked.ProjectAmount				+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					invoked.ReportAmount1				+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.ReportAmount2				+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.ReportAmount3				+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.ReportAmount4				+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.ReportAmount5				+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					invoked.UnitsAmount					+= UnitsAmount
					
		AddToBudgetTotals


			LocalInstLedger				= FinanceCodeBlock.Ledger
			if (BudgetEntityLedgerRel exists
			and EncumbranceOptionForUpdate)
				invoke UpdateGroupTotals BudgetTemplate
					invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup					= GeneralLedgerJournalControl.UniqueID
					invoked.PrmTransactionCodeBlock				= FinanceCodeBlock
					invoked.PrmEndDate							= GeneralLedgerCalendarPeriod
					invoked.PrmReportAmounts.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount1		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount2		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount3		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount4		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					invoked.PrmReportAmounts.ReportAmount5		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					if (!InterEntityTransaction)
						invoked.PrmReportAmounts.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					else
						invoked.PrmReportAmounts.FunctionalAmount	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount	= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount2	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						invoked.PrmReportAmounts.AlternateAmount3	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
					invoked.PrmAllowRebuild						= LocalAllowRebuild			

					invoked.PrmOriginatingDocument				= reference to GeneralLedgerJournalControl
				
		DeductFromBudgetTotals


			LocalInstLedger				= FinanceCodeBlock.Ledger
			if (BudgetEntityLedgerRel exists
			and EncumbranceOptionForUpdate)

				invoke UpdateGroupTotals BudgetTemplate
					invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup					= GeneralLedgerJournalControl.UniqueID
					if (FinanceCodeBlock changed)
						invoked.PrmTransactionCodeBlock			= old FinanceCodeBlock
					else
						invoked.PrmTransactionCodeBlock			= FinanceCodeBlock
					invoked.PrmEndDate							= GeneralLedgerCalendarPeriod
					invoked.PrmReportAmounts.ProjectAmount		= old ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
					invoked.PrmReportAmounts.ReportAmount1		= old ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
					invoked.PrmReportAmounts.ReportAmount2		= old ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
					invoked.PrmReportAmounts.ReportAmount3		= old ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
					invoked.PrmReportAmounts.ReportAmount4		= old ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
					invoked.PrmReportAmounts.ReportAmount5		= old ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
					if (!InterEntityTransaction)
						invoked.PrmReportAmounts.FunctionalAmount	= old ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
						invoked.PrmReportAmounts.AlternateAmount	= old ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1
						invoked.PrmReportAmounts.AlternateAmount2	= old ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
						invoked.PrmReportAmounts.AlternateAmount3	= old ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
					else
						invoked.PrmReportAmounts.FunctionalAmount	= old ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
						invoked.PrmReportAmounts.AlternateAmount	= old ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
						invoked.PrmReportAmounts.AlternateAmount2	= old ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
						invoked.PrmReportAmounts.AlternateAmount3	= old ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1


		PostActionSetLocalValues
			LocalChartSection			= ChartSection
			LocalSystem					= System
			LocalDimensionCode			= DimensionCode
			LocalCurrencyCode			= CurrencyCode
			LocalFinanceCodeBlock		= FinanceCodeBlock
			LocalEntityYearPeriod		= GeneralLedgerCalendarPeriod
			LocalPrimaryLedger			= PrimaryLedger
			LocalUpdateBudget			= false

		PostActionAccumulateTotal
			ADBFunctionalTotal			+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			TransactionAmountTotal		+= TransactionAmount
			FunctionalAmountTotal		+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			AlternateAmountTotal		+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
			AlternateAmount2Total		+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
			AlternateAmount3Total		+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
			ProjectAmountTotal			+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			ReportAmount1Total			+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
			ReportAmount2Total			+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
			ReportAmount3Total			+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
			ReportAmount4Total			+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
			ReportAmount5Total			+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
			UnitsAmountTotal			+= UnitsAmount
			if(ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount >= 0)
				FunctionalAmountDebitTotal		+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				FunctionalAmountCreditTotal		+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			if(ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount >= 0)
				ReportAmount1DebitTotal			+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
			else
				ReportAmount1CreditTotal		+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
			LocalInstLedger				= LocalFinanceCodeBlock.Ledger
			if (BudgetEntityLedgerRel exists)
				if (!EncumbranceOptionForUpdate)
					if (FinanceEnterpriseGroupExtRel.EntityFunctionalCounter entered)
						LocalUpdateBudget			= true
						BudgetFunctionalAmount		+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.EntityAlternateCounter entered)
						LocalUpdateBudget			= true
						BudgetAlternateAmount		+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.EntityAlternate2Counter entered)
						LocalUpdateBudget			= true
						BudgetAlternateAmount2		+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.EntityAlternate3Counter entered)
						LocalUpdateBudget			= true
						BudgetAlternateAmount3		+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.ProjectCurrencyCounter entered)
						LocalUpdateBudget			= true
						BudgetProjectAmount			+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.Report1Counter entered)
						LocalUpdateBudget			= true
						BudgetReportAmount1			+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.Report2Counter entered)
						LocalUpdateBudget			= true
						BudgetReportAmount2			+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.Report3Counter entered)
						LocalUpdateBudget			= true
						BudgetReportAmount3			+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.Report4Counter entered)
						LocalUpdateBudget			= true
						BudgetReportAmount4			+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					if (FinanceEnterpriseGroupExtRel.Report5Counter entered)
						LocalUpdateBudget			= true
						BudgetReportAmount5			+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
			
#ifdef module ap			
		ClearEncumbranceRecords					
			for each GLTransactionDetailExistsRel
				invoke UpdateRNIEncumbrance each
#endif													
		PostActionUpdateGeneralLedgerTotal
			LocalScenario										= PrmFinanceEnterpriseGroup.ActualsScenario
			LocalGeneralLedgerTotal.Ledger						= LocalFinanceCodeBlock.Ledger
			LocalGeneralLedgerTotal.System						= LocalSystem
			LocalGeneralLedgerTotal.Currency					= LocalCurrencyCode
			LocalGeneralLedgerTotal.EntityYearPeriod			= LocalEntityYearPeriod
			LocalGeneralLedgerTotal.AccountingUnit				= LocalFinanceCodeBlock.AccountingUnit
			LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= LocalFinanceCodeBlock.GeneralLedgerChartAccount
			LocalGeneralLedgerTotal.Project						= LocalFinanceCodeBlock.Project
			LocalGeneralLedgerTotal.DimensionCode				= LocalDimensionCode
			LocalGeneralLedgerTotal.PrimaryLedger				= LocalPrimaryLedger
			invoke PostTransactions LocalGeneralLedgerTotal
				invoked.TransactionAmount	= TransactionAmountTotal
				invoked.FunctionalAmount	= FunctionalAmountTotal
				invoked.AlternateAmount		= AlternateAmountTotal
				invoked.AlternateAmount2	= AlternateAmount2Total
				invoked.AlternateAmount3	= AlternateAmount3Total
				invoked.ProjectAmount		= ProjectAmountTotal
				invoked.ReportAmount1		= ReportAmount1Total
				invoked.ReportAmount2		= ReportAmount2Total
				invoked.ReportAmount3		= ReportAmount3Total
				invoked.ReportAmount4		= ReportAmount4Total
				invoked.ReportAmount5		= ReportAmount5Total
				invoked.UnitsAmount			= UnitsAmountTotal
				invoked.FunctionalAmountDebit		= FunctionalAmountDebitTotal
				invoked.ReportAmount1Debit			= ReportAmount1DebitTotal
				invoked.FunctionalAmountCredit		= FunctionalAmountCreditTotal
				invoked.ReportAmount1Credit			= ReportAmount1CreditTotal
				invoked.FinanceDimension1	= LocalFinanceCodeBlock.FinanceDimension1
				invoked.FinanceDimension2	= LocalFinanceCodeBlock.FinanceDimension2
				invoked.FinanceDimension3	= LocalFinanceCodeBlock.FinanceDimension3
				invoked.FinanceDimension4	= LocalFinanceCodeBlock.FinanceDimension4
				invoked.FinanceDimension5	= LocalFinanceCodeBlock.FinanceDimension5
				invoked.FinanceDimension6	= LocalFinanceCodeBlock.FinanceDimension6
				invoked.FinanceDimension7	= LocalFinanceCodeBlock.FinanceDimension7
				invoked.FinanceDimension8	= LocalFinanceCodeBlock.FinanceDimension8
				invoked.FinanceDimension9	= LocalFinanceCodeBlock.FinanceDimension9
				invoked.FinanceDimension10  = LocalFinanceCodeBlock.FinanceDimension10						
				invoked.PeriodEndingDate	= GeneralLedgerJournalControl.GeneralLedgerCalendarPeriod.Date

			if (LocalChartSection.IncomeStatement
			and !FinanceCodeBlock.GeneralLedgerChartAccount.AccountType.Memo)
				LocalInstFinanceCodeBlock						= LocalFinanceCodeBlock
				if (PrmFinanceEnterpriseGroup.FinanceDimension1Required
				and PrmFinanceEnterpriseGroup.Dimension1ZoneBalancing)
		    		LocalInstFinanceDimension1						= LocalFinanceCodeBlock.FinanceDimension1
					LocalInstFinanceCodeBlock.FinanceDimension1		= DerivedZoneFinanceDimension
				LocalSystemAccount 									= SystemAccount.UndistributedRetainedEarnings 
				constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
					"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
				LocalGeneralLedgerTotal.Ledger						= LocalFinanceCodeBlock.Ledger
				LocalGeneralLedgerTotal.System						= LocalSystem
				LocalGeneralLedgerTotal.Currency					= LocalCurrencyCode
				LocalGeneralLedgerTotal.EntityYearPeriod			= LocalEntityYearPeriod
				LocalGeneralLedgerTotal.AccountingUnit				= LocalFinanceCodeBlock.AccountingUnit
				if (PrmFinanceEnterpriseGroup.AccountingUnitRequired
				and PrmAccountingEntity.AccountingUnitZoneBalancing)
					LocalInstAccountingEntity						= LocalFinanceCodeBlock.ToAccountingEntity
		    		LocalInstAccountingUnit							= LocalFinanceCodeBlock.AccountingUnit
					LocalGeneralLedgerTotal.AccountingUnit			= DerivedZoneAccountingUnit
				LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount
				LocalGeneralLedgerTotal.Project						= LocalFinanceCodeBlock.Project
				LocalGeneralLedgerTotal.DimensionCode				= LocalInstFinanceCodeBlock.DimensionCode
				LocalGeneralLedgerTotal.PrimaryLedger				= LocalPrimaryLedger
				if (FinanceEnterpriseGroup.NoDimensionUREPosting)
					initialize LocalGeneralLedgerTotal.Project
					initialize LocalInstFinanceCodeBlock.FinanceDimension2
					initialize LocalInstFinanceCodeBlock.FinanceDimension3
					initialize LocalInstFinanceCodeBlock.FinanceDimension4
					initialize LocalInstFinanceCodeBlock.FinanceDimension5
					initialize LocalInstFinanceCodeBlock.FinanceDimension6
					initialize LocalInstFinanceCodeBlock.FinanceDimension7
					initialize LocalInstFinanceCodeBlock.FinanceDimension8
					initialize LocalInstFinanceCodeBlock.FinanceDimension9
					initialize LocalInstFinanceCodeBlock.FinanceDimension10
					LocalGeneralLedgerTotal.DimensionCode			= LocalInstFinanceCodeBlock.DimensionCode
				invoke PostTransactions LocalGeneralLedgerTotal 
					invoked.TransactionAmount	= TransactionAmountTotal
					invoked.FunctionalAmount	= FunctionalAmountTotal
					invoked.AlternateAmount		= AlternateAmountTotal
					invoked.AlternateAmount2	= AlternateAmount2Total
					invoked.AlternateAmount3	= AlternateAmount3Total
					if (FinanceEnterpriseGroup.NoDimensionUREPosting)
						invoked.ProjectAmount	= 0
					else
						invoked.ProjectAmount	= ProjectAmountTotal
					invoked.ReportAmount1		= ReportAmount1Total
					invoked.ReportAmount2		= ReportAmount2Total
					invoked.ReportAmount3		= ReportAmount3Total
					invoked.ReportAmount4		= ReportAmount4Total
					invoked.ReportAmount5		= ReportAmount5Total
					invoked.UnitsAmount			= UnitsAmountTotal
					invoked.FunctionalAmountDebit		= FunctionalAmountDebitTotal
					invoked.ReportAmount1Debit			= ReportAmount1DebitTotal
					invoked.FunctionalAmountCredit		= FunctionalAmountCreditTotal
					invoked.ReportAmount1Credit			= ReportAmount1CreditTotal
					invoked.FinanceDimension1	= LocalInstFinanceCodeBlock.FinanceDimension1
					invoked.FinanceDimension2	= LocalInstFinanceCodeBlock.FinanceDimension2
					invoked.FinanceDimension3	= LocalInstFinanceCodeBlock.FinanceDimension3
					invoked.FinanceDimension4	= LocalInstFinanceCodeBlock.FinanceDimension4
					invoked.FinanceDimension5	= LocalInstFinanceCodeBlock.FinanceDimension5
					invoked.FinanceDimension6	= LocalInstFinanceCodeBlock.FinanceDimension6
					invoked.FinanceDimension7	= LocalInstFinanceCodeBlock.FinanceDimension7
					invoked.FinanceDimension8	= LocalInstFinanceCodeBlock.FinanceDimension8
					invoked.FinanceDimension9	= LocalInstFinanceCodeBlock.FinanceDimension9
					invoked.FinanceDimension10	= LocalInstFinanceCodeBlock.FinanceDimension10							
					invoked.PeriodEndingDate	= GeneralLedgerJournalControl.GeneralLedgerCalendarPeriod.Date
					invoked.IsUREChartAccount	= true

				if (LocalUpdateBudget)
					invoke UpdateTemplateTotals BudgetTemplate
						invoked.PrmFinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
						invoked.PrmTransactionCodeBlock				= LocalFinanceCodeBlock
						invoked.PrmEndDate							= LocalEntityYearPeriod
						invoked.PrmReportAmounts.FunctionalAmount	= BudgetFunctionalAmount
						invoked.PrmReportAmounts.AlternateAmount	= BudgetAlternateAmount
						invoked.PrmReportAmounts.AlternateAmount2	= BudgetAlternateAmount2
						invoked.PrmReportAmounts.AlternateAmount3	= BudgetAlternateAmount3
						invoked.PrmReportAmounts.ProjectAmount		= BudgetProjectAmount
						invoked.PrmReportAmounts.ReportAmount1		= BudgetReportAmount1
						invoked.PrmReportAmounts.ReportAmount2		= BudgetReportAmount2
						invoked.PrmReportAmounts.ReportAmount3		= BudgetReportAmount3
						invoked.PrmReportAmounts.ReportAmount4		= BudgetReportAmount4
						invoked.PrmReportAmounts.ReportAmount5		= BudgetReportAmount5

		ADBTransactionUpdate
			initialize LocalInstAccountingUnit
			initialize LocalInstFinanceDimension1
			initialize LocalIncudeAccountForADB
			initialize LocalNonChartAccount

#ifdef module ad
			if (FinanceEnterpriseGroup.ExistingAverageDailyBalanceProcess)	
				LocalInstAccountingEntity				= PrmAccountingEntity
				LocalInstGeneralLedgerChartAccount		= LocalFinanceCodeBlock.GeneralLedgerChartAccount
				if (PrmFinanceEnterpriseGroup.AllBalanceSheetAccounts)
					if (LocalFinanceCodeBlock.GeneralLedgerChartAccount.ChartSection.BalanceSheet)
						LocalIncudeAccountForADB = true
						if (LocalInstGeneralLedgerChartAccount = LocalRetainedEarnings)
							LocalNonChartAccount = true
					else
						if (PrmFinanceEnterpriseGroup.IncludeUREInAverageDailyBalance
						and LocalFinanceCodeBlock.GeneralLedgerChartAccount.ChartSection.IncomeStatement
						and !LocalFinanceCodeBlock.GeneralLedgerChartAccount.AccountType.Memo)
							LocalIncudeAccountForADB = true
							LocalNonChartAccount     = true
							LocalInstGeneralLedgerChartAccount = LocalUndistributedRetainEarnings
				if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
					LocalInstAccountingUnit		= LocalFinanceCodeBlock.AccountingUnit
				else
				if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
					LocalInstFinanceDimension1	= LocalFinanceCodeBlock.FinanceDimension1
				if (PrmFinanceEnterpriseGroup.AllBalanceSheetAccounts
				and LocalIncudeAccountForADB = true
				and !ADBAccountMasterByAccountRel exists)
					invoke Create ADBAccountMaster
						invoked.FinanceEnterpriseGroup    = FinanceEnterpriseGroup
						invoked.AccountingEntity          = LocalInstAccountingEntity
						invoked.GeneralLedgerChartAccount = LocalInstGeneralLedgerChartAccount
						invoked.AccountingUnit            = LocalInstAccountingUnit
						invoked.FinanceDimension1         = LocalInstFinanceDimension1
						invoked.Active                    = true
						invoked.NonChartAccount           = LocalNonChartAccount	
				if (ADBAccountMasterByAccountRel exists)
					if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
						LocalADBTransaction.ADBOrganizationDimension	= LocalFinanceCodeBlock.AccountingUnit
					else
					if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
						LocalADBTransaction.ADBOrganizationDimension	= LocalFinanceCodeBlock.FinanceDimension1
					LocalADBTransaction.GeneralLedgerChartAccount		= LocalInstGeneralLedgerChartAccount
					LocalADBTransaction.PostingDate						= LocalPostingDate
					LocalADBTransaction.TransactionDate					= LocalTransactionDate
					LocalADBTransaction.RunDate							= LocalTimeStamp
					invoke Update LocalADBTransaction
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.AccountingEntity			= PrmAccountingEntity
						invoked.PrmFunctionalAmount			= ADBFunctionalTotal
						invoked.NonChartAccount           	= LocalNonChartAccount	
						if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
							invoked.AccountingUnit			= LocalFinanceCodeBlock.AccountingUnit
						if (PrmFinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
							invoked.FinanceDimension1		= LocalFinanceCodeBlock.FinanceDimension1
			else
			if (FinanceEnterpriseGroup.NewAverageDailyBalanceProcess)	
				LocalInstAccountingEntity				= PrmAccountingEntity
				LocalInstGeneralLedgerChartAccount		= LocalFinanceCodeBlock.GeneralLedgerChartAccount
				if (LocalFinanceCodeBlock.GeneralLedgerChartAccount.ChartSection.BalanceSheet)
					if (PrmFinanceEnterpriseGroup.AllBalanceSheetAccounts)
						LocalIncudeAccountForADB = true
						if (LocalInstGeneralLedgerChartAccount = LocalRetainedEarnings)
							LocalNonChartAccount = true
				else
					if (LocalFinanceCodeBlock.GeneralLedgerChartAccount.ChartSection.IncomeStatement
					and PrmFinanceEnterpriseGroup.IncludeIncomeStatementAccounts
					and !LocalRebuildUREAccount)	
						LocalIncudeAccountForADB = true
				initialize LocalFinanceCodeBlockADB
				initialize LocalInstLedger
				initialize LocalInstCurrencyCode
				if (PrmFinanceEnterpriseGroup.IncludeLedgerInAverageDailyBalance)
					LocalInstLedger			= LocalFinanceCodeBlock.Ledger
				if (PrmFinanceEnterpriseGroup.CalculateADBOption.AllCurrencyAmounts)
					LocalInstCurrencyCode	= LocalCurrencyCode
				LocalFinanceCodeBlockADB	= LocalFinanceCodeBlock
				if (LocalIncudeAccountForADB)
					if (AverageDailyBalanceAccountRel not exists)
						invoke Create AverageDailyBalanceAccount
							invoked.FinanceEnterpriseGroup									= PrmFinanceEnterpriseGroup
							invoked.AccountingEntity										= LocalInstAccountingEntity
							invoked.AverageDailyBalanceAccount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
							invoked.AverageDailyBalanceAccount.DimensionCode				= DerivedADBDimensionCode
							invoked.ADBDimension1		= DerivedADBDimension1
							invoked.ADBDimension2		= DerivedADBDimension2
							invoked.ADBDimension3		= DerivedADBDimension3
							invoked.Active				= true
							invoked.NonChartAccount		= LocalNonChartAccount	
							invoked.TransactionLedger	= LocalInstLedger
							invoked.TransactionCurrency	= LocalInstCurrencyCode
					if (AverageDailyBalanceAccountRel exists)
						LocalAverageDailyBalanceTransaction.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
						LocalAverageDailyBalanceTransaction.DimensionCode				= DerivedADBDimensionCode
						LocalAverageDailyBalanceTransaction.PostingDate					= LocalPostingDate
						LocalAverageDailyBalanceTransaction.TransactionDate				= LocalTransactionDate
						LocalAverageDailyBalanceTransaction.RunDate						= LocalTimeStamp
						invoke Update LocalAverageDailyBalanceTransaction
							invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.AccountingEntity		= PrmAccountingEntity
							invoked.PrmFunctionalAmount		= ADBFunctionalTotal
							invoked.ADBDimension1           = AverageDailyBalanceAccountRel.ADBDimension1	
							invoked.ADBDimension2           = AverageDailyBalanceAccountRel.ADBDimension2	
							invoked.ADBDimension3           = AverageDailyBalanceAccountRel.ADBDimension3	
							invoked.NonChartAccount         = LocalNonChartAccount							
							invoked.Year					= LocalYear
							invoked.TransactionLedger		= AverageDailyBalanceAccountRel.TransactionLedger
							invoked.TransactionCurrency		= AverageDailyBalanceAccountRel.TransactionCurrency
							invoked.PrmTransactionAmount	= TransactionAmountTotal
							invoked.PrmAlternateAmount1		= AlternateAmountTotal
							invoked.PrmAlternateAmount2		= AlternateAmount2Total
							invoked.PrmAlternateAmount3		= AlternateAmount3Total
							invoked.PrmReportAmount1		= ReportAmount1Total
							invoked.PrmReportAmount2		= ReportAmount2Total
							invoked.PrmReportAmount3		= ReportAmount3Total
							invoked.PrmReportAmount4		= ReportAmount4Total
							invoked.PrmReportAmount5		= ReportAmount5Total
				if (PrmFinanceEnterpriseGroup.IncludeUREInAverageDailyBalance
				and LocalFinanceCodeBlock.GeneralLedgerChartAccount.ChartSection.IncomeStatement
				and !LocalFinanceCodeBlock.GeneralLedgerChartAccount.AccountType.Memo)
					LocalNonChartAccount				= true
					LocalInstGeneralLedgerChartAccount	= LocalUndistributedRetainEarnings
					if (AverageDailyBalanceAccountRel not exists)
						invoke Create AverageDailyBalanceAccount
							invoked.FinanceEnterpriseGroup									= PrmFinanceEnterpriseGroup
							invoked.AccountingEntity										= LocalInstAccountingEntity
							invoked.AverageDailyBalanceAccount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
							invoked.AverageDailyBalanceAccount.DimensionCode				= DerivedADBDimensionCode
							invoked.ADBDimension1		= DerivedADBDimension1
							invoked.ADBDimension2		= DerivedADBDimension2
							invoked.ADBDimension3		= DerivedADBDimension3
							invoked.Active				= true
							invoked.NonChartAccount		= LocalNonChartAccount	
							invoked.TransactionLedger	= LocalInstLedger
							invoked.TransactionCurrency	= LocalInstCurrencyCode
					if (AverageDailyBalanceAccountRel exists)
						LocalAverageDailyBalanceTransaction.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
						LocalAverageDailyBalanceTransaction.DimensionCode				= DerivedADBDimensionCode
						LocalAverageDailyBalanceTransaction.PostingDate					= LocalPostingDate
						LocalAverageDailyBalanceTransaction.TransactionDate				= LocalTransactionDate
						LocalAverageDailyBalanceTransaction.RunDate						= LocalTimeStamp
						invoke Update LocalAverageDailyBalanceTransaction
							invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.AccountingEntity		= PrmAccountingEntity
							invoked.PrmFunctionalAmount		= ADBFunctionalTotal
							invoked.ADBDimension1           = AverageDailyBalanceAccountRel.ADBDimension1	
							invoked.ADBDimension2           = AverageDailyBalanceAccountRel.ADBDimension2	
							invoked.ADBDimension3           = AverageDailyBalanceAccountRel.ADBDimension3	
							invoked.NonChartAccount         = LocalNonChartAccount							
							invoked.Year					= LocalYear
							invoked.TransactionLedger		= AverageDailyBalanceAccountRel.TransactionLedger
							invoked.TransactionCurrency		= AverageDailyBalanceAccountRel.TransactionCurrency
							invoked.PrmTransactionAmount	= TransactionAmountTotal
							invoked.PrmAlternateAmount1		= AlternateAmountTotal
							invoked.PrmAlternateAmount2		= AlternateAmount2Total
							invoked.PrmAlternateAmount3		= AlternateAmount3Total
							invoked.PrmReportAmount1		= ReportAmount1Total
							invoked.PrmReportAmount2		= ReportAmount2Total
							invoked.PrmReportAmount3		= ReportAmount3Total
							invoked.PrmReportAmount4		= ReportAmount4Total
							invoked.PrmReportAmount5		= ReportAmount5Total

		AverageDailyBalanceProcess
			if (LocalAllowADBTransactionUpdate)
				include ADBTransactionUpdate

			if (PrmFinanceEnterpriseGroup.UseAverageDailyBalance)
				LocalDailyCalendarPeriod = DerivedDailyTotalPeriod
				if (LocalDailyCalendarPeriod exists)			
					include PostActionUpdateDailyPeriodTotal


		PostActionUpdateDailyPeriodTotal
			LocalScenario                                   = PrmFinanceEnterpriseGroup.ActualsScenario
			LocalDailyPeriodTotal.Ledger                    = LocalFinanceCodeBlock.Ledger
			LocalDailyPeriodTotal.System                    = LocalSystem
			LocalDailyPeriodTotal.Currency					= LocalCurrencyCode
			LocalDailyPeriodTotal.EntityYearPeriod			= LocalDailyCalendarPeriod
			LocalDailyPeriodTotal.AccountingUnit            = LocalFinanceCodeBlock.AccountingUnit
			LocalDailyPeriodTotal.GeneralLedgerChartAccount	= LocalFinanceCodeBlock.GeneralLedgerChartAccount
			LocalDailyPeriodTotal.Project                   = LocalFinanceCodeBlock.Project
			LocalDailyPeriodTotal.DimensionCode				= LocalDimensionCode
			LocalDailyPeriodTotal.PrimaryLedger				= LocalPrimaryLedger
			invoke PostTransactions LocalDailyPeriodTotal
				invoked.TransactionAmount	= TransactionAmountTotal
				invoked.FunctionalAmount	= FunctionalAmountTotal
				invoked.AlternateAmount		= AlternateAmountTotal
				invoked.AlternateAmount2	= AlternateAmount2Total
				invoked.AlternateAmount3	= AlternateAmount3Total
				invoked.ProjectAmount		= ProjectAmountTotal
				invoked.ReportAmount1		= ReportAmount1Total
				invoked.ReportAmount2		= ReportAmount2Total
				invoked.ReportAmount3		= ReportAmount3Total
				invoked.ReportAmount4		= ReportAmount4Total
				invoked.ReportAmount5		= ReportAmount5Total
				invoked.UnitsAmount			= UnitsAmountTotal
				invoked.FinanceDimension1	= LocalFinanceCodeBlock.FinanceDimension1
				invoked.FinanceDimension2	= LocalFinanceCodeBlock.FinanceDimension2
				invoked.FinanceDimension3	= LocalFinanceCodeBlock.FinanceDimension3
				invoked.FinanceDimension4	= LocalFinanceCodeBlock.FinanceDimension4
				invoked.FinanceDimension5	= LocalFinanceCodeBlock.FinanceDimension5
				invoked.FinanceDimension6	= LocalFinanceCodeBlock.FinanceDimension6
				invoked.FinanceDimension7	= LocalFinanceCodeBlock.FinanceDimension7
				invoked.FinanceDimension8	= LocalFinanceCodeBlock.FinanceDimension8
				invoked.FinanceDimension9	= LocalFinanceCodeBlock.FinanceDimension9
				invoked.FinanceDimension10  = LocalFinanceCodeBlock.FinanceDimension10
				invoked.PeriodEndingDate	= LocalDailyCalendarPeriod.Date

			if (LocalUndistributedRetainEarnings entered
			and LocalChartSection.IncomeStatement
			and !LocalFinanceCodeBlock.GeneralLedgerChartAccount.AccountType.Memo)
				LocalInstFinanceCodeBlock						= LocalFinanceCodeBlock
				if (PrmFinanceEnterpriseGroup.FinanceDimension1Required
				and PrmFinanceEnterpriseGroup.Dimension1ZoneBalancing)
		    		LocalInstFinanceDimension1                  = LocalFinanceCodeBlock.FinanceDimension1
					LocalInstFinanceCodeBlock.FinanceDimension1 = DerivedZoneFinanceDimension
				LocalDailyPeriodTotal.Ledger                    = LocalFinanceCodeBlock.Ledger
				LocalDailyPeriodTotal.System                    = LocalSystem
				LocalDailyPeriodTotal.Currency					= LocalCurrencyCode
				LocalDailyPeriodTotal.EntityYearPeriod			= LocalDailyCalendarPeriod
				LocalDailyPeriodTotal.AccountingUnit            = LocalFinanceCodeBlock.AccountingUnit
				if (PrmFinanceEnterpriseGroup.AccountingUnitRequired
				and PrmAccountingEntity.AccountingUnitZoneBalancing)
					LocalInstAccountingEntity                   = LocalFinanceCodeBlock.ToAccountingEntity
		    		LocalInstAccountingUnit                     = LocalFinanceCodeBlock.AccountingUnit
					LocalDailyPeriodTotal.AccountingUnit        = DerivedZoneAccountingUnit
				LocalDailyPeriodTotal.GeneralLedgerChartAccount	= LocalUndistributedRetainEarnings
				LocalDailyPeriodTotal.Project                   = LocalFinanceCodeBlock.Project
				LocalDailyPeriodTotal.DimensionCode				= LocalInstFinanceCodeBlock.DimensionCode
				LocalDailyPeriodTotal.PrimaryLedger				= LocalPrimaryLedger
				if (PrmFinanceEnterpriseGroup.NoDimensionUREPosting)
					initialize LocalDailyPeriodTotal.Project
					initialize LocalInstFinanceCodeBlock.FinanceDimension2
					initialize LocalInstFinanceCodeBlock.FinanceDimension3
					initialize LocalInstFinanceCodeBlock.FinanceDimension4
					initialize LocalInstFinanceCodeBlock.FinanceDimension5
					initialize LocalInstFinanceCodeBlock.FinanceDimension6
					initialize LocalInstFinanceCodeBlock.FinanceDimension7
					initialize LocalInstFinanceCodeBlock.FinanceDimension8
					initialize LocalInstFinanceCodeBlock.FinanceDimension9
					initialize LocalInstFinanceCodeBlock.FinanceDimension10
					LocalDailyPeriodTotal.DimensionCode			= LocalInstFinanceCodeBlock.DimensionCode
				invoke PostTransactions LocalDailyPeriodTotal 
					invoked.TransactionAmount	= TransactionAmountTotal
					invoked.FunctionalAmount	= FunctionalAmountTotal
					invoked.AlternateAmount		= AlternateAmountTotal
					invoked.AlternateAmount2	= AlternateAmount2Total
					invoked.AlternateAmount3	= AlternateAmount3Total
					if (PrmFinanceEnterpriseGroup.NoDimensionUREPosting)
						invoked.ProjectAmount	= 0
					else
						invoked.ProjectAmount	= ProjectAmountTotal
					invoked.ReportAmount1		= ReportAmount1Total
					invoked.ReportAmount2		= ReportAmount2Total
					invoked.ReportAmount3		= ReportAmount3Total
					invoked.ReportAmount4		= ReportAmount4Total
					invoked.ReportAmount5		= ReportAmount5Total
					invoked.UnitsAmount			= UnitsAmountTotal
					invoked.FinanceDimension1	= LocalInstFinanceCodeBlock.FinanceDimension1
					invoked.FinanceDimension2	= LocalInstFinanceCodeBlock.FinanceDimension2
					invoked.FinanceDimension3	= LocalInstFinanceCodeBlock.FinanceDimension3
					invoked.FinanceDimension4	= LocalInstFinanceCodeBlock.FinanceDimension4
					invoked.FinanceDimension5	= LocalInstFinanceCodeBlock.FinanceDimension5
					invoked.FinanceDimension6	= LocalInstFinanceCodeBlock.FinanceDimension6
					invoked.FinanceDimension7	= LocalInstFinanceCodeBlock.FinanceDimension7
					invoked.FinanceDimension8	= LocalInstFinanceCodeBlock.FinanceDimension8
					invoked.FinanceDimension9	= LocalInstFinanceCodeBlock.FinanceDimension9
					invoked.FinanceDimension10	= LocalInstFinanceCodeBlock.FinanceDimension10							
					invoked.PeriodEndingDate	= LocalDailyCalendarPeriod.Date
					invoked.IsUREChartAccount	= true
#endif

		PopulateGainLossFields
			if (GainLossResultRel.RunOption.Revalue)
				if (FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection.BalanceSheet)
					CurrentTransactionAmount	= GainLossTransactionAmountRel.YearToDateTransactionAmount
					CurrentFunctionalAmount		= GainLossTransactionAmountRel.YearToDateFunctionalAmount
					CurrentAlternateAmount		= GainLossTransactionAmountRel.YearToDateAlternateAmount
					CurrentAlternateAmount2		= GainLossTransactionAmountRel.YearToDateAlternateAmount2
					CurrentAlternateAmount3		= GainLossTransactionAmountRel.YearToDateAlternateAmount3
					CurrentProjectAmount		= GainLossTransactionAmountRel.YearToDateProjectAmount
					CurrentReportAmount1		= GainLossTransactionAmountRel.YearToDateReportAmount1
					CurrentReportAmount2		= GainLossTransactionAmountRel.YearToDateReportAmount2
					CurrentReportAmount3		= GainLossTransactionAmountRel.YearToDateReportAmount3
					CurrentReportAmount4		= GainLossTransactionAmountRel.YearToDateReportAmount4
					CurrentReportAmount5		= GainLossTransactionAmountRel.YearToDateReportAmount5
				else
					CurrentTransactionAmount	=  GainLossTransactionAmountRel.PeriodTransactionAmount
					CurrentFunctionalAmount		= GainLossTransactionAmountRel.PeriodFunctionalAmount
					CurrentAlternateAmount		= GainLossTransactionAmountRel.PeriodAlternateAmount
					CurrentAlternateAmount2		= GainLossTransactionAmountRel.PeriodAlternateAmount2
					CurrentAlternateAmount3		= GainLossTransactionAmountRel.PeriodAlternateAmount3
					CurrentProjectAmount		= GainLossTransactionAmountRel.PeriodProjectAmount
					CurrentReportAmount1		= GainLossTransactionAmountRel.PeriodReportAmount1
					CurrentReportAmount2		= GainLossTransactionAmountRel.PeriodReportAmount2
					CurrentReportAmount3		= GainLossTransactionAmountRel.PeriodReportAmount3
					CurrentReportAmount4		= GainLossTransactionAmountRel.PeriodReportAmount4
					CurrentReportAmount5		= GainLossTransactionAmountRel.PeriodReportAmount5
				LocalCurrencyRelationship.FromCurrency = CurrencyCode
				LocalCurrencyRelationship.ToCurrency = AccountingEntity.FunctionalCurrency
				if (CurrencyRelationshipRel exists)
					LocalCurrencyMultDiv		= CurrencyRelationshipRel.MultDiv
				if (LocalCurrencyMultDiv = "0")
					CalculatedFunctionalAmount	= CurrentTransactionAmount * ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
				else
					CalculatedFunctionalAmount	= CurrentTransactionAmount / ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
				LocalAmountForCalculation		= CurrentTransactionAmount
			else
				if (FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection.BalanceSheet
				or  LocalTranslationCode.RateType.EndingBalance
				or  LocalTranslationCode.RateType.HistoricalBalance)
					CurrentFunctionalAmount		= GainLossTransactionAmountRel.YearToDateFunctionalAmount
					CurrentAlternateAmount		= GainLossTransactionAmountRel.YearToDateAlternateAmount
					CurrentAlternateAmount2		= GainLossTransactionAmountRel.YearToDateAlternateAmount2
					CurrentAlternateAmount3		= GainLossTransactionAmountRel.YearToDateAlternateAmount3
					CurrentProjectAmount		= GainLossTransactionAmountRel.YearToDateProjectAmount
					CurrentReportAmount1		= GainLossTransactionAmountRel.YearToDateReportAmount1
					CurrentReportAmount2		= GainLossTransactionAmountRel.YearToDateReportAmount2
					CurrentReportAmount3		= GainLossTransactionAmountRel.YearToDateReportAmount3
					CurrentReportAmount4		= GainLossTransactionAmountRel.YearToDateReportAmount4
					CurrentReportAmount5		= GainLossTransactionAmountRel.YearToDateReportAmount5
				else
					CurrentFunctionalAmount		= GainLossTransactionAmountRel.PeriodFunctionalAmount
					CurrentAlternateAmount		= GainLossTransactionAmountRel.PeriodAlternateAmount
					CurrentAlternateAmount2		= GainLossTransactionAmountRel.PeriodAlternateAmount2
					CurrentAlternateAmount3		= GainLossTransactionAmountRel.PeriodAlternateAmount3
					CurrentProjectAmount		= GainLossTransactionAmountRel.PeriodProjectAmount
					CurrentReportAmount1		= GainLossTransactionAmountRel.PeriodReportAmount1
					CurrentReportAmount2		= GainLossTransactionAmountRel.PeriodReportAmount2
					CurrentReportAmount3		= GainLossTransactionAmountRel.PeriodReportAmount3
					CurrentReportAmount4		= GainLossTransactionAmountRel.PeriodReportAmount4
					CurrentReportAmount5		= GainLossTransactionAmountRel.PeriodReportAmount5
				LocalAmountForCalculation		= CurrentFunctionalAmount
		
			CalculatedAlternateAmount	= LocalAmountForCalculation * ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
			CalculatedAlternateAmount2	= LocalAmountForCalculation * ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
			CalculatedAlternateAmount3	= LocalAmountForCalculation * ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
			CalculatedProjectAmount		= LocalAmountForCalculation * ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
			CalculatedReportAmount1		= LocalAmountForCalculation * ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
			CalculatedReportAmount2		= LocalAmountForCalculation * ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
			CalculatedReportAmount3		= LocalAmountForCalculation * ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
			CalculatedReportAmount4		= LocalAmountForCalculation * ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
			CalculatedReportAmount5		= LocalAmountForCalculation * ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate

		CheckCurrencyAmount
			if ((ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered)
			or  (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate entered
			and !ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered))
				ReportCurrencyAmount.UseDerivedCalculations			= true
				LocalCurrencyCalc									= ReportCurrencyAmount.AssignToCurrency
				LocalCurrencyCalc									= ReportCurrencyAmount.DerivedCalculationsComplete
				if  (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
				if  (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
				if  (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
				if  (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
				if (!AccountingEntity				= FinanceCodeBlock.ToAccountingEntity)
					if  (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate entered
					and !ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered)
						initialize ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate
					if  (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate entered
					and !ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered)
						initialize ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate
					if  (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate entered
					and !ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered)
						initialize ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate
					if  (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate entered
					and !ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered)
						initialize ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate
				if (FinanceCodeBlock.Project entered)
					if  (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate entered
					and !ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered)
						initialize ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
				if  (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
				if  (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
				if  (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
				if  (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
				if  (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate entered
				and !ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered)
					initialize ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate

#ifdef module intercobilling
		IntercompanyBillingEdit
			constraint (!AutoReverse)
				"CannotReverseIntercompanyBillingTransaction"
			if  (FromBillingCompany entered
			or   ToBillingCompany entered
			or   BillingRechargeItem entered)
				constraint (FromBillingCompany entered)
					"BillFromCompanyIsRequired"
				constraint (ToBillingCompany entered)
					"BillToCompanyIsRequired"
				constraint (!FromBillingCompany = ToBillingCompany)
					"BillFromCompanyAndBillToCompanyCannotBeTheSame"
				constraint (FromBillingCompany.IsAValidIntercompanyBillingCompany)
					"BillFromCompanyIsNotSetupForIntercompanyBilling;TheGlobalLedgerCompanySetForIntercompanyBilling,AReceivableAndAPayablesCompanySetupWithDefaultsForIntercompanyBilling"
				constraint (ToBillingCompany.IsAValidIntercompanyBillingCompany)
					"BillToCompanyIsNotSetupForIntercompanyBilling;TheGlobalLedgerCompanySetForIntercompanyBilling,AReceivableAndAPayablesCompanySetupWithDefaultsForIntercompanyBilling"
				constraint (BillingRechargeItem entered)
					"BillingRechargeItemIsRequired"

				if (FromBillingCompany.ReceivableCompanyRel.ICBClearingAccountBuilt)
					if (FinanceCodeBlock.Ledger not entered)
						FinanceCodeBlock.Ledger					= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.Ledger

					FinanceCodeBlock.ToAccountingEntity			= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.ToAccountingEntity

					if (FinanceCodeBlock.AccountingUnit not entered)
						FinanceCodeBlock.AccountingUnit			= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.AccountingUnit

					if (FinanceCodeBlock.GeneralLedgerChartAccount not entered)
						FinanceCodeBlock.GeneralLedgerChartAccount	= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.GeneralLedgerChartAccount

					if (FinanceCodeBlock.Project not entered)
						FinanceCodeBlock.Project				= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.Project
						
					if (FinanceCodeBlock.FinanceDimension1 not entered)
						FinanceCodeBlock.FinanceDimension1		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension1

					if (FinanceCodeBlock.FinanceDimension2 not entered)
						FinanceCodeBlock.FinanceDimension2		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension2
						
					if (FinanceCodeBlock.FinanceDimension3 not entered)
						FinanceCodeBlock.FinanceDimension3		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension3

					if (FinanceCodeBlock.FinanceDimension4 not entered)
						FinanceCodeBlock.FinanceDimension4		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension4

					if (FinanceCodeBlock.FinanceDimension5 not entered)
						FinanceCodeBlock.FinanceDimension5		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension5

					if (FinanceCodeBlock.FinanceDimension6 not entered)
						FinanceCodeBlock.FinanceDimension6		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension6

					if (FinanceCodeBlock.FinanceDimension7 not entered)
						FinanceCodeBlock.FinanceDimension7		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension7

					if (FinanceCodeBlock.FinanceDimension8 not entered)
						FinanceCodeBlock.FinanceDimension8		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension8

					if (FinanceCodeBlock.FinanceDimension9 not entered)
						FinanceCodeBlock.FinanceDimension9		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension9

					if (FinanceCodeBlock.FinanceDimension10 not entered)
						FinanceCodeBlock.FinanceDimension10		= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.FinanceDimension10

		ValidateCurrencyCode
			if  (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal
			and  IntercompanyBillingTransactionRel.FromCompany entered
			and  IntercompanyBillingTransactionRel.ToCompany entered
			and	 IntercompanyBillingTransactionRel.IntercompanyBillingRechargeItem entered
			and  (IntercompanyBillingTransactionRel.FromCompany.ReceivableCompanyRel.UseBillFromFunctionalCurrency.Yes
			or   (IntercompanyBillingTransactionRel.FromCompany.ReceivableCompanyRel.UseBillFromFunctionalCurrency.UseIntercompanyBillingGroupValue
			and   IntercompanyBillingGroupRel.UseBillFromFunctionalCurrency)))
				constraint (CurrencyCode = AccountingEntity.FunctionalCurrency)
					"IntercompanyBillingTransaction:Currency<CurrencyCode>MustBeBillFromCompanyFunctionalCurrency<AccountingEntity.FunctionalCurrency>"
		
		UpdateIntercompanyBillingTransaction
			if (FromBillingCompany entered
			and !IntercompanyBillingTransactionRel exists)
				include ValidateCurrencyCode
				invoke Create IntercompanyBillingTransaction
					invoked.IntercompanyBillingGroup		= FinanceEnterpriseGroup
					invoked.FromCompany						= FromBillingCompany
					invoked.ToCompany						= ToBillingCompany
					invoked.Description						= Description
					invoked.IntercompanyBillingRechargeItem	= BillingRechargeItem
					invoked.OriginatingTransaction			= reference to this instance
					invoked.OriginatingDocument				= reference to GeneralLedgerJournalControl
					invoked.TransactionAmount				= TransactionAmount
					invoked.TransactionCurrency				= CurrencyCode
					invoked.CurrencyTable					= CurrencyTable
					invoked.CurrencyExchangeRate			= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.TransactionDate					= TransactionDate
					invoked.PostingDate						= PostingDate
					if (FinanceCodeBlock.GeneralLedgerChartAccount	= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.GeneralLedgerChartAccount)
						invoked.ReceivablesRevenueAccount			= FinanceCodeBlock

			if (IntercompanyBillingTransactionRel exists)
				if (FromBillingCompany entered)
					include ValidateCurrencyCode
					invoke Update IntercompanyBillingTransactionRel
						invoked.FromCompany						= FromBillingCompany
						invoked.ToCompany						= ToBillingCompany
						invoked.Description						= Description
						invoked.IntercompanyBillingRechargeItem	= BillingRechargeItem
						invoked.OriginatingTransaction			= reference to this instance
						invoked.OriginatingDocument				= reference to GeneralLedgerJournalControl
						invoked.TransactionAmount				= TransactionAmount
						invoked.TransactionCurrency				= CurrencyCode
						invoked.CurrencyTable					= CurrencyTable
						invoked.CurrencyExchangeRate			= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.TransactionDate					= TransactionDate
						invoked.PostingDate						= PostingDate
						invoked.ReceivablesRevenueAccount		= FinanceCodeBlock
						if (FinanceCodeBlock.GeneralLedgerChartAccount	= FromBillingCompany.ReceivableCompanyRel.ICBClearingAccount.GeneralLedgerChartAccount)
							invoked.ReceivablesRevenueAccount			= FinanceCodeBlock
						else
							invoked.ReceivablesRevenueAccount			= blank	
				else
					if (!FromBillingCompany entered)
						invoke Delete IntercompanyBillingTransactionRel
						FromBillingCompany		= DerivedFromBillingCompany
#endif
		VerifyTemplatesAreNotProcessing
			constraint (ProcessingTemplatesRel not exists)
				"CannotPostWhileTemplatesAreProcessing"
				
#ifdef module cb			
		UpdateCashCodeFundBalance 
			if  (FinanceEnterpriseGroup.FundAccounting
			and  Status.Released
			and (GLProcessingSystems
			or   System = "PR"
			or   System.RecordType.User
			or   GeneralLedgerJournalControl.OriginatingInterfaceRun entered)
			and  FinanceCodeBlock.GeneralLedgerChartAccount.AccountSubType	= "CASH"
			and  CashCodeByAccountRel exists)
				if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
					if (CashCodeFundByAccountingUnitRel !exist)
						invoke Create CashCodeFundByAccountingUnitRel
							invoked.PostedAmount	= TransactionAmount
					else
						invoke UpdatePostedAmount CashCodeFundByAccountingUnitRel
							if (TransactionAmount changed)
								invoked.PrmPostedAmount	= TransactionAmount - old TransactionAmount
							else
							if (action = "UnreleaseReleased")
								invoked.PrmPostedAmount = (TransactionAmount * -1)
							else
								invoked.PrmPostedAmount	= TransactionAmount
				else
					if (CashCodeFundByDimension1Rel !exist)
						invoke Create CashCodeFundByDimension1Rel
							invoked.PostedAmount	= TransactionAmount
					else
						invoke UpdatePostedAmount CashCodeFundByDimension1Rel
							if (TransactionAmount changed)
								invoked.PrmPostedAmount	= TransactionAmount - old TransactionAmount
							else
							if (action = "UnreleaseReleased")
								invoked.PrmPostedAmount = (TransactionAmount * -1)
							else
								invoked.PrmPostedAmount	= TransactionAmount
#endif													

































#ifdef module cam
		UpdateCustodialBalance
			if  (FinanceEnterpriseGroup.CustodialAccountManagement
			and  FinanceCodeBlock.FinanceDimension10 entered
			and  CustodialProcessingSystems
			and  FinanceCodeBlock.GeneralLedgerChartAccount.AccountSubType	= "CASH")
				initialize LocalCustodialActivity
				constraint (CustodialDetailAmountRel exists)
					"CustodialPosting_<FinanceCodeBlock.FinanceDimension10>_MustBeSetup"
				if (CustodialDetailAmountRel exists)
					if (System = "CM"
					and GeneralLedgerEvent = "TRF")
						invoke UpdateTransfers CustodialDetailAmountRel
							if (action = "UnreleaseReleased")
								invoked.PrmTransfers += (TransactionAmount * -1)
							else
								invoked.PrmTransfers += TransactionAmount
						if (TransactionAmount < 0)
							LocalCustodialActivity = 3		
					else
					if (System = "CA"
					and GeneralLedgerEvent = "INT")
						invoke UpdateInterest CustodialDetailAmountRel
							if (action = "UnreleaseReleased")
								invoked.PrmInterest += (TransactionAmount * -1)
							else
								invoked.PrmInterest += TransactionAmount
						LocalCustodialActivity = 4
					else
					if (TransactionAmount < 0)
						invoke UpdateDisbursements CustodialDetailAmountRel
							if (TransactionAmount changed)
								invoked.PrmDisbursements += ((TransactionAmount - old TransactionAmount) * -1)
							else
							if (action = "UnreleaseReleased")
								invoked.PrmDisbursements += TransactionAmount
							else
								invoked.PrmDisbursements += (TransactionAmount * -1)
						LocalCustodialActivity = 4
					else
					if (TransactionAmount > 0)
						invoke UpdateDeposits CustodialDetailAmountRel
							if (TransactionAmount changed)
								invoked.PrmDeposits	+= (TransactionAmount - old TransactionAmount)
							else
							if (action = "UnreleaseReleased")
								invoked.PrmDeposits += (TransactionAmount * -1)
							else
								invoked.PrmDeposits += TransactionAmount
						LocalCustodialActivity = 4	
	
					if (LocalCustodialActivity entered)	
						invoke Create CustodialActivity
							invoked.FinanceEnterpriseGroup  	 = FinanceEnterpriseGroup
							invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
							invoked.CustodialPosting		     = FinanceCodeBlock.FinanceDimension10
							invoked.ActivityDate				 = TransactionDate 		 
							invoked.ActivityType				 = LocalCustodialActivity
							invoked.DocumentNumber				 = GeneralLedgerJournalControl
							invoked.Description 				 = GeneralLedgerJournalControl.Description
							if (TransactionAmount changed)
								invoked.Amount						 = TransactionAmount - old TransactionAmount
							else
							if (action = "UnreleaseReleased")
								invoked.Amount						 = TransactionAmount * -1
							else
								invoked.Amount						 = TransactionAmount
							invoked.TransactionIDNumber			 = GeneralLedgerJournalControl
							invoked.AccountingEntity			 = AccountingEntity
							invoked.ClosePeriod					 = GeneralLedgerClosePeriod
#endif
		UpdateFESExpenditures
			if  (Status.Unreleased
			and  FinanceCodeBlock.Project entered
			and  FinanceCodeBlock.FinanceDimension2 entered
			and !FESExcludedEvent
			and  FinanceEnterpriseGroup.FrontEndSplits
			and  FinanceEnterpriseGroup.UseFundedAmounts
			and !FinanceCodeBlock.Project.ExcludeFromFES
			and  FinanceCodeBlock.Project.ParentDisplayContractRel.Project.ProjectContract.FrontEndSplitsEnabled
			and (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
			or   old ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered))
				invoke UpdateFESExpenditures ProjectFundingSourceRel
					invoked.TransactionDate = TransactionDate
					invoked.FinanceCodeBlock = FinanceCodeBlock
					if (action type.Create)
						invoked.Amount = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					if (action type.Update
					and ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount changed)
						invoked.Amount = (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount - old ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount)
					if (action type.Delete)	
						invoked.Amount = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1

    Derived Fields

		DerivedJournalPeriodNumber		is a DerivedField
    		type is Numeric 3
    		return GeneralLedgerClosePeriod.PeriodNumber

		AccountActualCurrency is a DerivedField
			type is like Currency
			return AccountAnalysisSettingsRel.DisplayReportingCurrency

		DerivedActualAmountDecimals is a DerivedField
			type is Numeric 1
			LocalInstCurrencyCode = AccountActualCurrency
			return LocalInstCurrencyCode.NumberOfDecimals


		
		DerivedFunctionalAmountDebit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 
			else
				return 0

		DerivedAlternateAmountDebit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount 
			else
				return 0

		DerivedAlternateAmount2Debit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 
			else
				return 0

		DerivedAlternateAmount3Debit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount1Debit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount2Debit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount3Debit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount4Debit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount5Debit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount >=  0)
				return ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 
			else
				return 0

		DerivedUnitsAmountDebit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (UnitsAmount >=  0)
				return UnitsAmount 
			else
				return 0


		DerivedFunctionalAmountCredit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 
			else
				return 0

		DerivedAlternateAmountCredit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount 
			else
				return 0

		DerivedAlternateAmount2Credit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 
			else
				return 0

		DerivedAlternateAmount3Credit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount1Credit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount2Credit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount3Credit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 
			else
				return 0

		DerivedReportAmount4Credit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 
			else
				return 0
		
		DerivedReportAmount5Credit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount <  0)
				return ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 
			else
				return 0

		DerivedUnitsAmountCredit is a DerivedField
            type is like InternationalAmount
				precision is DerivedActualAmountDecimals
			if (UnitsAmount <  0)
				return UnitsAmount 
			else
				return 0

    	DerivedJournalPeriodName		is a DerivedField
    		type is Alpha 25
    		return GeneralLedgerClosePeriod.PeriodName
    	DerivedTotalsPeriodName		    is a DerivedField
    		type is Alpha 30
    		return GeneralLedgerCalendarPeriod.DisplayPeriod
		DerivedActor				is a DerivedField
			type is like Actor
			return actor    
        ShortDesc						is a StringField
            type is Alpha size 15
            restricted
            Description
		CommentsIndicator				is a DerivedField
			type is Boolean
			if (HasComments)
				return true
			else
				return false
		DerivedEntityCurrency			is a DerivedField
			type is AlphaUpper size 5
			return AccountingEntity.FunctionalCurrency
		DerivedEventDescription			is a DerivedField
			type is Alpha 25
			restricted
			return GeneralLedgerEvent.Description

		DerivedDailyTotalPeriod is a DerivedField
			type is AlphaUpper 20
			restricted
			if (UsePostingDateOnlyToDailyTotal)										
				LocalDate = PostingDate
			else
				if (PostingDate >= GeneralLedgerClosePeriod.DerivedBeginGregorian
				and PostingDate <= GeneralLedgerClosePeriod.DerivedEndDate)
					LocalDate = PostingDate
				else
					LocalDate    = GeneralLedgerClosePeriod.DerivedBeginGregorian	

			return DerivedEndDateJulian

		DerivedEndDateJulian is a DerivedField
			type is AlphaUpper 20
			restricted
			LocalAlphaYear       = LocalDate year
			LocalAlphaDay        = LocalDate year day
			DerivedEndDateJulian = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				DerivedEndDateJulian += "00"
			else
			if (LocalAlphaDay size = 2)
				DerivedEndDateJulian += "0"
			DerivedEndDateJulian += LocalAlphaDay

		DerivedADBDimension1	is a DerivedField
			type is like AccountingUnit
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension1 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension1.Type
				return DerivedADBDimension
			else
				return ""
		DerivedADBDimension2	is a DerivedField
			type is like AccountingUnit
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension2 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension2.Type
				return DerivedADBDimension
			else
				return ""
		DerivedADBDimension3	is a DerivedField
			type is like AccountingUnit
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension3 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension3.Type
				return DerivedADBDimension
			else
				return ""
		DerivedADBDimension		is a DerivedField
			type is like AccountingUnit
			restricted
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.AccountingUnit)
				return LocalFinanceCodeBlockADB.AccountingUnit
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Project)
				return LocalFinanceCodeBlockADB.Project
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension1)
				return LocalFinanceCodeBlockADB.FinanceDimension1
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension2)
				return LocalFinanceCodeBlockADB.FinanceDimension2
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension3)
				return LocalFinanceCodeBlockADB.FinanceDimension3
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension4)
				return LocalFinanceCodeBlockADB.FinanceDimension4
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension5)
				return LocalFinanceCodeBlockADB.FinanceDimension5
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension6)
				return LocalFinanceCodeBlockADB.FinanceDimension6
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension7)
				return LocalFinanceCodeBlockADB.FinanceDimension7
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension8)
				return LocalFinanceCodeBlockADB.FinanceDimension8
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension9)
				return LocalFinanceCodeBlockADB.FinanceDimension9
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension10)
				return LocalFinanceCodeBlockADB.FinanceDimension10
			else
				return ""
		DerivedADBDimensionCode	is a StringField
			type is Alpha 70
			restricted
			DerivedADBTransactionCurrency
			DerivedADBLedger
			DerivedADBDimension1SeqNumber
			DerivedADBDimension2SeqNumber
			DerivedADBDimension3SeqNumber

		DerivedZeroString	is a StringField
			type is AlphaUpper 20
			restricted
			"00000000000000000000"
		DerivedADBLedger				is a DerivedField
			type is like Ledger
			restricted
			if (FinanceEnterpriseGroup.IncludeLedgerInAverageDailyBalance)
				LocalZeroStringLength = (DerivedZeroString size - LocalInstLedger size)
				if (LocalZeroStringLength > 0)
					DerivedADBLedger = DerivedZeroString[1:LocalZeroStringLength] + LocalInstLedger
				else
					return LocalInstLedger
			else
				return ""
		DerivedADBTransactionCurrency	is a DerivedField
			type is like Currency
			restricted
			if (FinanceEnterpriseGroup.CalculateADBOption.AllCurrencyAmounts)
				LocalZeroStringLength = (5 - LocalInstCurrencyCode size)
				if (LocalZeroStringLength > 0)
					DerivedADBTransactionCurrency = DerivedZeroString[1:LocalZeroStringLength] + LocalInstCurrencyCode
				else
					return LocalInstCurrencyCode
			else
				return ""
		DerivedADBDimension1SeqNumber	is a DerivedField
			type is AlphaRight 7
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension1 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension1.Type
				return DerivedADBDimensionSeqNumber
			else
				return ""
		DerivedADBDimension2SeqNumber	is a DerivedField
			type is AlphaRight 7
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension2 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension2.Type
				return DerivedADBDimensionSeqNumber
			else
				return ""
		DerivedADBDimension3SeqNumber	is a DerivedField
			type is AlphaRight 7
			restricted
			if (FinanceEnterpriseGroup.ADBDimensions.Dimension3 entered)
				LocalCodeBlockDimensionType	= FinanceEnterpriseGroup.ADBDimensions.Dimension3.Type
				return DerivedADBDimensionSeqNumber
			else
				return ""
		DerivedADBDimensionSeqNumber		is a DerivedField
			type is AlphaRight 7
			restricted
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.AccountingUnit)
				return LocalFinanceCodeBlockADB.AccountingUnit.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Project)
				return LocalFinanceCodeBlockADB.Project.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension1)
				return LocalFinanceCodeBlockADB.FinanceDimension1.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension2)
				return LocalFinanceCodeBlockADB.FinanceDimension2.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension3)
				return LocalFinanceCodeBlockADB.FinanceDimension3.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension4)
				return LocalFinanceCodeBlockADB.FinanceDimension4.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension5)
				return LocalFinanceCodeBlockADB.FinanceDimension5.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension6)
				return LocalFinanceCodeBlockADB.FinanceDimension6.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension7)
				return LocalFinanceCodeBlockADB.FinanceDimension7.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension8)
				return LocalFinanceCodeBlockADB.FinanceDimension8.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension9)
				return LocalFinanceCodeBlockADB.FinanceDimension9.DerivedSequenceNumber
			else
			if (LocalCodeBlockDimensionType = CodeBlockDimensionType.Dimension10)
				return LocalFinanceCodeBlockADB.FinanceDimension10.DerivedSequenceNumber
			else
				return ""


		DerivedSystemAccountingUnit		is a DerivedField
			type is AlphaUpper 25
			restricted
			return SystemAccountingUnitRel.AccountingUnit
		DerivedSystemDimension			is a DerivedField
			type is AlphaUpper 15
			restricted
			return FinanceDimension1Rel.FinanceDimension1
		DerivedGeneralLedgerTransaction		is a DerivedField
			type is Numeric 12
			default label is "DerivedGlobalLedgerTransaction"
			return GeneralLedgerTransaction
		DerivedZoneAccountingUnit		is a DerivedField
			type is like AccountingUnit 
			restricted
			if (AccountingEntity.AccountingUnitZoneBalancing)
				if (AUZoneAccountingUnitRel.ZoneAccountingUnit entered)
					return AUZoneAccountingUnitRel.ZoneAccountingUnit
				else
					return EntityZoneAccountingUnitRel.AccountingUnit
		DerivedZoneFinanceDimension		is a DerivedField
			type is like FinanceDimension1 
			restricted
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				if (FinDim1ZoneFinanceDimension1Rel.ZoneDimension entered)
	        		return FinDim1ZoneFinanceDimension1Rel.ZoneDimension
			    else
	        		return EnterpriseZoneFinanceDimension1Rel.FinanceDimension1

		DerivedRecurringJournalType		is a DerivedField
			type is Numeric 1 
			restricted
			return RecurringJournalControlRel.JournalType
		DerivedRecurringJournalControl		is a DerivedField
			type is like RecurringJournalControl 
			restricted
			return RecurringJournalControlRel.RecurringJournalControl
		DerivedRecurringBeginningPeriod		is a DerivedField
			type is like GeneralLedgerCalendarPeriod 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.BeginningPeriod.GeneralLedgerCalendarPeriod
			else
				return GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
		DerivedRecurringBeginningYear		is a DerivedField
			type is like GeneralLedgerCloseYear 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.BeginningPeriod.GeneralLedgerCloseYear
			else
				return GeneralLedgerClosePeriod.GeneralLedgerCloseYear
		DerivedRecurringEndPeriod			is a DerivedField
			type is like GeneralLedgerCalendarPeriod 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.EndPeriod.GeneralLedgerCalendarPeriod
			else
				return GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
		DerivedRecurringEndYear				is a DerivedField
			type is like GeneralLedgerCloseYear 
			restricted
			if (RecurringJournalControlRel exists)
				return RecurringJournalControlRel.EndPeriod.GeneralLedgerCloseYear
			else
				return GeneralLedgerClosePeriod.GeneralLedgerCloseYear
		DerivedRecurringPostingDay			is a DerivedField
			type is Numeric 2 
			restricted
			return RecurringJournalControlRel.PostingDay
		DerivedRecurringTransactionDay		is a DerivedField
			type is Numeric 2 
			restricted
			return RecurringJournalControlRel.TransactionDay
		DerivedRecurringDescription			is a DerivedField
			type is Alpha 60 
			restricted
			return RecurringJournalControlRel.Description
		DerivedRecurringReference			is a DerivedField
			type is Alpha 30 
			restricted
			return RecurringJournalControlRel.Reference

		DerivedAULabel						is a DerivedField
			type is Alpha 60
			restricted
			return actor.context.FinanceEnterpriseGroup.AccountingUnitLabel
		TotalJournalBridgeAmount			is a DerivedField
			type is like InternationalAmount
			return (sum RecurringJournalBridgeRel.TransactionAmount)
		BalanceBridgeAmount     			is a DerivedField
			type is like InternationalAmount
			return (TransactionAmount - TotalJournalBridgeAmount)
		DerivedJournalizeGroupResult		is a DerivedField
			type is like JournalizeGroupResult 
			restricted
			return GeneralLedgerJournalControl.JournalizeGroupResult
		DerivedOriginatingInterfaceRun		is a DerivedField
			type is like GLTransactionInterfaceResult 
			restricted
			return GeneralLedgerJournalControl.OriginatingInterfaceRun
		DerivedEncumbranceAmount	is a DerivedField
			type is like InternationalAmount
			initialize LocalManualEncumbranceAmount
			LocalManualEncumbranceAmount	= (GLCommitRel.TransactionAmount - sum CommitAgainstManualEncumbRel.TransactionAmount)
			if (GLCommitRel.Status.History
			or  LocalManualEncumbranceAmount	< 0)
				return 0
			return 	(LocalManualEncumbranceAmount)
		DerivedGLEncumbranceReference		is a StringField
			type is AlphaUpper 60
			AccountingEntity
			"-"
			GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
			"-"
			GeneralLedgerJournalControl
			"-"
			GeneralLedgerTransaction

		DerivedCurrentTransactionAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			LocalTranslationCode	= GainLossTransactionAmountRel.TranslationCode
			include PopulateGainLossFields
			return CurrentTransactionAmount

		DerivedCurrentFunctionalAmount   	is a DerivedField
			type is like InternationalAmount
			restricted
			LocalTranslationCode	= GainLossTransactionAmountRel.TranslationCode
			include PopulateGainLossFields
			return CurrentFunctionalAmount

		DerivedPrimaryLedger				is a DerivedField
			type is like Ledger
			return PrimaryLedger
		RelieveObligationMessage			is a StringField		
			type is AlphaUpper 60
			"JE_REJECTED "
			AccountingEntity
			"-"
			GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
			"-"
			GeneralLedgerJournalControl
#ifdef module intercobilling
		DerivedFromBillingCompany			is a DerivedField
			type is like GeneralLedgerCompany
			ToBillingCompany		= IntercompanyBillingTransactionRel.ToCompany
			BillingRechargeItem		= IntercompanyBillingTransactionRel.IntercompanyBillingRechargeItem
			return IntercompanyBillingTransactionRel.FromCompany

		DerivedToBillingCompany			is a DerivedField 
			type is like GeneralLedgerCompany
			FromBillingCompany		= IntercompanyBillingTransactionRel.FromCompany
			BillingRechargeItem		= IntercompanyBillingTransactionRel.IntercompanyBillingRechargeItem
			return IntercompanyBillingTransactionRel.ToCompany

		DerivedBillingRechargeItem		is a DerivedField 
			type is like IntercompanyBillingRechargeItem
			return IntercompanyBillingTransactionRel.IntercompanyBillingRechargeItem


#endif
		
#ifdef module ap		
		DerivedInvoiceNumber is a DerivedField
			type is Alpha 60
			restricted
			if (GLTransactionDetailExistsRel.System = "AP")
				return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
				
		DerivedVendor is a DerivedField
			type is Alpha 60
			restricted
			if (GLTransactionDetailExistsRel.System = "AP")
				return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Vendor
#endif		
		DerivedSystem is a DerivedField
			type is Alpha 60
			restricted
			return GLTransactionDetailExistsRel.System
			
		DerivedInvoice is a DerivedField
			type is Alpha 60
			restricted
#ifdef module ap			
			if (GLTransactionDetailExistsRel.System = "AP")
				return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Invoice
#endif				
#ifdef module ar				
			if (GLTransactionDetailExistsRel.System = "AR")
				return GLTransactionDetailExistsRel.OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ReceivableInvoice
#endif	
					
		DerivedCompany is a DerivedField
			type is Alpha 60
			restricted
#ifdef module ap			
			if (GLTransactionDetailExistsRel.System = "AP")
				return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice.Company
#endif				
#ifdef module ar				
			if (GLTransactionDetailExistsRel.System = "AR")
				return GLTransactionDetailExistsRel.OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ReceivableInvoice.Company
#endif
#ifdef module ap
		DerivedSuffix is a DerivedField
			type is Alpha 60
			restricted
			if (GLTransactionDetailExistsRel.System = "AP")
				return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Suffix
#endif								

#ifdef module integration
		DerivedIntegrationType is a DerivedField
			type is Alpha size 10
			restricted
			LocalConfigurationParameter = "IntegrationApplication"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
			
		DerivedSourceDocID	is a DerivedField
			type is Alpha size 900
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(DerivedSystem = "AP")
					if(DerivedSuffix != 0)
						DerivedSourceDocID = DerivedCompany + DerivedDelimiter + DerivedVendor + DerivedDelimiter + DerivedInvoice + DerivedDelimiter + DerivedSuffix + DerivedDelimiter + DerivedInvoiceNumber
					else
						DerivedSourceDocID = DerivedCompany + DerivedDelimiter + DerivedVendor + DerivedDelimiter + DerivedInvoice + DerivedDelimiter + DerivedInvoiceNumber
				else
				if(DerivedSystem = "AR")
					DerivedSourceDocID = DerivedCompany + DerivedDelimiter + DerivedInvoice
				else
				if(DerivedSystem = "BL")
					if(GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.IsManualInvoiceNumbering)
						DerivedSourceDocID  = GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoiceRel.Company using "%d" + DerivedDelimiter + GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.GlobalInvoiceNumber
					else 
						DerivedSourceDocID = GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoiceRel.Company using "%d" + DerivedDelimiter + GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.DerivedBillingInvoiceForParallelReference
				else
					DerivedSourceDocID    = ""
			else
				DerivedSourceDocID = ""
			return DerivedSourceDocID
		
		DerivedAccountDescription is a DerivedField
			type is Alpha size 60
			restricted
			return FinanceCodeBlock.GeneralLedgerChartAccount.AccountDescription
			
		DerivedReportCurrAmt is a DerivedField
			type is Decimal 19.3
			restricted
			return ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
		
		DerivedReportCurr is a DerivedField
			type is Alpha 5
			restricted
			return FinanceEnterpriseGroup.ReportCurrencyOne
					
		DerivedSrcDocRefType is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(DerivedSystem = "AP")
					return "SupplierInvoice"
				else
				if(DerivedSystem = "AR")
					return "Invoice"
				else
					return FinanceCodeBlock.GeneralLedgerSystemCode
			else
				return FinanceCodeBlock.GeneralLedgerSystemCode	
					
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedDebitCreditFlag is a DerivedField
			type is Alpha size 25
			restricted
			if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount > 0.0)
				return "DEBIT"
			if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount < 0.0)
				return "CREDIT"
			if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = 0.0)
				return ""
		
		BODUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODUpdateTimeStamp = update stamp.timestamp
			return BODUpdateTimeStamp
			
		BODFormattedUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODUpdateTimeStamp[1:4] + "-" + BODUpdateTimeStamp[5:6] + "-" + BODUpdateTimeStamp[7:8] + "T" + BODUpdateTimeStamp[9:10] + ":" + BODUpdateTimeStamp[11:12] + ":" + BODUpdateTimeStamp[13:14] + "Z"
		
		BODTransactionDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODTransactionDateTimeStamp = TransactionDate
			return BODTransactionDateTimeStamp
			
		BODFormattedTransactionDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODTransactionDateTimeStamp[1:4] + "-" + BODTransactionDateTimeStamp[5:6] + "-" + BODTransactionDateTimeStamp[7:8]
					
		BODPostingDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODPostingDateTimeStamp = PostingDate
			return BODPostingDateTimeStamp
			
		BODFormattedPostingDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODPostingDateTimeStamp[1:4] + "-" + BODPostingDateTimeStamp[5:6] + "-" + BODPostingDateTimeStamp[7:8]	
		
		DerivedStatus is a DerivedField
			type is Alpha size 25
			restricted
			if (Status = 0)
				return "Unreleased"
			if (Status = 1)
				return "Released"
			if (Status = 7)
				return "ProcessAutoReverse"
			if (Status = 8)
				return "Memo"
			if (Status = 9)
				return "Posted"
				
		DerivedReportingChartID is a DerivedField
			type is Alpha size 25
			restricted
			return FinanceCodeBlock.FinanceEnterpriseGroup+ DerivedDelimiter + FinanceCodeBlock.FinanceEnterpriseGroup.EnterpriseChart

		DerivedSSJEInvoice is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
#ifdef module bl
				if(GLTransactionDetailExistsRel.System = "BL")
					if(GeneralLedgerTransaction>1)
						return AccountingEntity+DerivedDelimiter+DerivedMultiBLListID
					else
					if(GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.IsManualInvoiceNumbering)
						return DerivedSSJEInvoiceNumber
					else
						return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.DerivedBillingInvoiceForParallelReference
#endif
#ifdef module ar
				else
				if (GLTransactionDetailExistsRel.System = "AR")
					return GLTransactionDetailExistsRel.OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ReceivableInvoice
#endif
#ifdef module ap
				else
				if (GLTransactionDetailExistsRel.System = "AP")
					return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Invoice
#endif
			else
				return ""	

#ifdef module bl
		DerivedSSJEInvoiceNumber is a DerivedField
			type is Alpha 60
			restricted
			if(GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.GlobalInvoiceNumber!="")
				for each GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.GlobalInvoiceNumber split on "-"
					DerivedSSJEInvoiceNumber += each
				LocalInvoiceNumber = DerivedSSJEInvoiceNumber
				DerivedSSJEInvoiceNumber = ""
				for each LocalInvoiceNumber split on "_"
					DerivedSSJEInvoiceNumber += each
				return DerivedSSJEInvoiceNumber	
#endif
#ifdef module integration
#ifdef module ar
#ifdef module bl
		DerivedCustomer is a DerivedField
			type is Alpha 60
			restricted
			if(GLTransactionDetailExistsRel.System = "AR")
				return GLTransactionDetailExistsRel.OriginatingTransaction(ReceivableGLDistribution).CustomerRel.Customer
			else 
			if(GLTransactionDetailExistsRel.System = "BL")
				return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).CustdescRel.Customer
			
		DerivedCustomerID is a DerivedField
			type is Alpha 60
			restricted	
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "AR")
					return DerivedCompany+DerivedDelimiter+DerivedCustomer
				else 
				if(GLTransactionDetailExistsRel.System = "BL")
					return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoiceRel.Company using "%d"+DerivedDelimiter+DerivedCustomer
				else
					return ""
			else
				return ""
		DerivedARBLInvoice is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "BL")
					if(GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.IsManualInvoiceNumbering)
						return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.GlobalInvoiceNumber
					else
						return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.DerivedBillingInvoiceForParallelReference
				else
				if(GLTransactionDetailExistsRel.System = "AR")
					return GLTransactionDetailExistsRel.OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ReceivableInvoice
				else
					return ""
			else
				return ""
#endif
#endif

#ifdef module ap				
		DerivedSupplierID is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "AP")
					return FinanceEnterpriseGroup+DerivedDelimiter+GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Vendor.VendorGroup +DerivedDelimiter+DerivedVendor
				else
					return "" 
			else
				return ""
		
		DerivedAPInvoice is a DerivedField
			type is Alpha 60
			restricted 
			if(DerivedIntegrationType = "Local.ly")
				if (GLTransactionDetailExistsRel.System = "AP")
					return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Invoice	
				else
					return ""
			else
				return ""
				
		DerivedAPLocation is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "AP")
					return FinanceEnterpriseGroup+DerivedDelimiter+AccountingEntity
				else
					return ""
			else
				return ""
#endif
		DerivedVocherType is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
				return DerivedSystem
			else
				return ""
				
#ifdef module bl		
		DerivedMultiBLInvoice is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return TransactionAmount
		
		DerivedMultiBLInvoiceBase is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
		
		DerivedMultiBLInvoiceReporting is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return GLTransactionDetailExistsRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					
		DerivedMultiBLInvoiceDate is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return BODFormattedPostingDateTimeStamp
		
		DerivedMultiBLAccountingEntity is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return FinanceEnterpriseGroup+DerivedDelimiter+AccountingEntity
					
		DerivedMultiBLCurrency is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return CurrencyCode
		
		DerivedMultiBLFunctionalCurrency is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return LocalGLJCCurrency
					
		DerivedMultiBLBaseCurrency is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					return DerivedReportCurr
					
		DerivedMultiBLListID is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "BL")
					if(GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.IsManualInvoiceNumbering)
						return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.GlobalInvoiceNumber
					else
						return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.DerivedBillingInvoiceForParallelReference
			
		DerivedMutiBLName is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "BL")
					if(GeneralLedgerTransaction>1)
						return AccountingEntity+DerivedDelimiter+DerivedMultiBLListID
		
		DerivedMultiBLSourceName is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "BL")
					if(GeneralLedgerTransaction>1)
						return AccountingEntity+DerivedDelimiter+DerivedMultiBLListID
					else
						return "lcl.SourceIdentifier"
				else
#ifdef module ap
				if(GLTransactionDetailExistsRel.System = "AP")
					return "lcl.SourceIdentifier"
#endif
		DerivedMultiBLCustName is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "BL")
					if(GeneralLedgerTransaction>1)
						return AccountingEntity+DerivedDelimiter+DerivedMultiBLListID
					else
						return "lcl.CustomerID"
				else
#ifdef module ap
				if(GLTransactionDetailExistsRel.System = "AP")
					if(GeneralLedgerTransaction>1)
						return DerivedCompany + DerivedDelimiter + DerivedVendor + DerivedDelimiter + DerivedInvoice + DerivedDelimiter + DerivedInvoiceNumber
					else
						return "lcl.CustomerID"
				else
					return "lcl.CustomerID"
#endif	
#endif
#ifdef module ap					
		DerivedAPId is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly" and GeneralLedgerTransaction>1)
				if(GLTransactionDetailExistsRel.System = "AP")
					return DerivedCompany + DerivedDelimiter + DerivedVendor + DerivedDelimiter + DerivedInvoice + DerivedDelimiter + DerivedInvoiceNumber
#endif
		DerivedListID is a DerivedField
			type is Alpha 60
			restricted
			if(DerivedIntegrationType = "Local.ly")
#ifdef module bl
				if(GLTransactionDetailExistsRel.System = "BL")
					if(GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.IsManualInvoiceNumbering)
						return DerivedSSJEInvoiceNumber
					else
						return GLTransactionDetailExistsRel.OriginatingTransaction(BillingGLDistribution).BillingInvoice.DerivedBillingInvoiceForParallelReference
#endif
#ifdef module ar
				else
				if (GLTransactionDetailExistsRel.System = "AR")
					return GLTransactionDetailExistsRel.OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ReceivableInvoice
#endif
#ifdef module ap
				else
				if (GLTransactionDetailExistsRel.System = "AP")
					if(GeneralLedgerTransaction>1)
						return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Invoice
					else
						return GLTransactionDetailExistsRel.OriginatingTransaction(PayablesInvoiceDistribution).Invoice
				else
					return ""
			else
				return ""	
		
		DerivedNounName is a DerivedField
			type is Alpha 20
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "AP")
					return "SupplierInvoice"
				else
					return "Invoice"
					
		DerivedName is a DerivedField
			type is Alpha 20
			restricted
			if(DerivedIntegrationType = "Local.ly")
				if(GLTransactionDetailExistsRel.System = "AP")
					return "lcl.SupplierID"
#endif
#endif



		ErrorSuspenseAlertDescription is a DerivedField
			type is Alpha 100
			restricted
			return "GeneralLedgerTransaction created for Amount "+ DerivedFromCurrency +DerivedFunctionalAmount+ " to ErrorSuspense Account " + DerivedGLAccount +"."

							
		DerivedTenantID is a DerivedField 
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
							 
		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ FinanceEnterpriseGroup +":"+ GeneralLedgerTransaction +":"+ "?ErrorSuspense&verb=Process"
		
		DerivedGLAccount is a DerivedField
			type is Alpha 60
			restricted
			return FinanceCodeBlock.GeneralLedgerChartAccount
								
		DerivedLedger is a DerivedField
			type is Alpha 60
			restricted
			return	FinanceCodeBlock.Ledger
			
		DerivedAccountingUnit is a DerivedField
			type is Alpha 25
			restricted
			return FinanceCodeBlock.AccountingUnit	
		
		DerivedFunctionalAmount is a DerivedField
			type is Alpha 20
			restricted
			return	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								
		DerivedFromCurrency is a DerivedField
			type is Alpha 10
			restricted
			return	ReportCurrencyAmount.FunctionalAmount.FromCurrency
							
		DerivedExchangeDate is a DerivedField
			type is Alpha 60
			restricted
			return	ReportCurrencyAmount.FunctionalAmount.ExchangeDate
						
		ErrorSuspenseAlertXML is a DerivedField
			type is XMLDocument
			restricted
			ErrorSuspenseAlertXML = template.IONErrorSuspenseAlert_GeneralLedgerTransaction_ST document for this instance			
#endif

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforGeneralLedgerTransaction"
			
		ContextMessageText is a MessageField
			restricted
			"GeneralLedgerTransaction<GeneralLedgerTransaction>"

		ColumnarAmount is a DerivedField
			type is like InternationalAmount
				precision is AccountingEntity.FunctionalCurrency.NumberOfDecimals
       		return ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
		
		ColumnarProjectAmount is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.Project.Currency.NumberOfDecimals
       		return ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount

		ApprovalTitle		is a StringField
			type is Alpha 200
			restricted
			"MatrixApproval:"
			FinanceEnterpriseGroup.AccountingEntityLabel
			"-"
			GeneralLedgerJournalControl.AccountingEntity
			":Journal-"
			GeneralLedgerJournalControl
			":Transaction-"
			GeneralLedgerTransaction
	
  	Field Groups

	Conditions
		NotBeginningBalancePeriod
			restricted	
			when (!GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod like "*000")
		PeriodWithinSearchPeriodRange
			when (GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod within SearchPeriodRange)
		IsReleasedOrPosted
			when (Status.Released
			or    Status.Posted)
		GainLossRevalRunOption
    		when (GainLossResultRel.RunOption.Revalue)	
		IsGainLossReval
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.RunOption.Revalue)	
		IsGainLossTranslation
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.RunOption.Translation)	
		IsGainLossFunctional
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Functional)	
		IsGainLossAlternate
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Alternate)	
		IsGainLossAlternate2
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Alternate2)	
		IsGainLossAlternate3
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Alternate3)	
		IsGainLossProject
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Project)	
		IsGainLossReport1
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Report1)	
		IsGainLossReport2
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Report2)	
		IsGainLossReport3
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Report3)	
		IsGainLossReport4
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Report4)	
		IsGainLossReport5
    		when (ControlForGainLossTransactionAmountRel exists
    		and   GainLossResultRel.Report5)	
		GainLossFunctionalSelected
    		when (GainLossResultRel.Functional)
		GainLossAlternateSelected
    		when (GainLossResultRel.Alternate)
		GainLossAlternate2Selected
    		when (GainLossResultRel.Alternate2)
		GainLossAlternate3Selected
    		when (GainLossResultRel.Alternate3)
		GainLossProjectSelected
    		when (GainLossResultRel.Project)
		GainLossReport1Selected
    		when (GainLossResultRel.Report1)
		GainLossReport2Selected
    		when (GainLossResultRel.Report2)
		GainLossReport3Selected
    		when (GainLossResultRel.Report3)
		GainLossReport4Selected
    		when (GainLossResultRel.Report4)
		GainLossReport5Selected
    		when (GainLossResultRel.Report5)
    	ProjectEntered
    		restricted
    		when (FinanceCodeBlock.Project entered)	
    	IsDebit
    		restricted
    		when (TransactionAmount > 0)	
    	IsCredit
    		restricted
    		when (TransactionAmount < 0)
    	HasComments
    		restricted
    		when (GLTransactionCommentRel exists)	
    	IsUnreleased
    		restricted
    		when (Status.Unreleased)	
    	IsReleased
    		restricted
    		when (Status.Released)
		UnreleasedJournalControl
			restricted
			when (GeneralLedgerJournalControl.Status.Unreleased)
		InterEntityClosePeriodTransaction
			restricted
			when (UnreleasedJournalControl
			and  GeneralLedgerJournalControl.JournalType.InterEntity
			and  ClosedPeriodAccountingEntity)
		ClosedPeriodAccountingEntity
			restricted
			when (ClosedLedgerPeriodForEntityRel.PeriodStatus.Limited
			or   ClosedLedgerPeriodForEntityRel.PeriodStatus.Final)
		SystemTransactionEvents
			restricted
			when (GeneralLedgerEvent = "CB"
			or    GeneralLedgerEvent = "AB"
			or    GeneralLedgerEvent = "ZB"
			or    GeneralLedgerEvent = "ES")
		GainLossTransactionOnly
			restricted
			when (GainLossRunSequence entered)
		IsACommitmentJournal
			restricted
			when (GeneralLedgerJournalControl.JournalType.ManualEncumbrance)
		IsAEncumbranceTransaction
			restricted
			when (Status.ManualEncumbrance)
		GeneralLedgerTransactionExists
			restricted
			when (GeneralLedgerTransaction entered)
    	InterEntityTransaction
    		restricted
    		when (!AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
		GLProcessingSystems
			restricted
			when (System 	= "GL"
			or    System	= "RJ"
			or    System 	= "CA")
		ExcludedProjectEvents
			restricted
			when (System = "AR"
			and   GeneralLedgerEvent != "NP")
#ifdef module intercobilling
    	RecurringJournalForm
    		restricted
			when ((!GeneralLedgerJournalControl.IsAIntercompanyBillingJournal
			and	   !GeneralLedgerJournalControl.JournalType.ManualEncumbrance)
			and	 (!GeneralLedgerJournalControl exists
			or	   Status.Unreleased)
			and    BalanceBridgeAmount entered
			and    RecurringJournalControlRel.LastProcessedPeriod not entered)
#endif
#ifndef module intercobilling
    	RecurringJournalForm
    		restricted
			when (!GeneralLedgerJournalControl.JournalType.ManualEncumbrance
			and  (!GeneralLedgerJournalControl exists
			or	   Status.Unreleased)
			and    BalanceBridgeAmount entered
			and    RecurringJournalControlRel.LastProcessedPeriod not entered)
#endif
    	RecurringJournalExists
    		restricted
			when (RecurringJournalControlRel exists)
		GainLossTransactionAmountExist
			restricted
			when (GainLossTransactionAmountRel exists)
		EncumbranceOptionForUpdate
			restricted
			when (System.EncumbranceOption.Track
			or    System.EncumbranceOption.TrackAndEdit)
		WithinSearchDateRange			
			restricted
			when (SearchDateRange not entered
			or   (SearchDateRange entered
			and   TransactionDate within SearchDateRange))
		PostingDateWithinSearchDateRange			
			restricted
			when (SearchDateRange not entered
			or   (SearchDateRange entered
			and   PostingDate within SearchDateRange))
		PostingWithinDateRange
			when ((PostingDateRange entered
			and    PostingDate within SearchDateRange)
			or    (!PostingDateRange entered))
        WithinPostingDateRange
        	restricted
			when (!PostingDateRange entered
        	or   (PostingDateRange entered
        	and   PostingDate within PostingDateRange))
		WithInPostingAndTransDateRange
			restricted
			when (WithinSearchDateRange
			and   WithinPostingDateRange
			and   WithinSearchGroup)
		AccountingUnitUsed
			restricted
			when (FinanceEnterpriseGroup.AccountingUnitLabel entered)
		Dimension1Used
			restricted
			when (FinanceEnterpriseGroup.FinanceDimension1Label entered)
		ProjectUsed
			restricted
			when (FinanceEnterpriseGroup.ProjectLabel entered)		






		TransactionDetailExists
			restricted
			when (GLTransactionDetailExistsRel exists)
		EncumbranceCanBeMaintained
			restricted
			when (DerivedEncumbranceAmount  > 0)
		SecurityGroupAllowsAccess
			when (AccountingEntity.AccountingEntitySecurityGroupAllowsAccess
			and  (FinanceCodeBlock.AccountingUnit !entered
			or    FinanceCodeBlock.AccountingUnit.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.Project !entered
			or    FinanceCodeBlock.Project.SecurityGroupAllowsAccess)
			and   FinanceCodeBlock.GeneralLedgerChartAccount.SecurityGroupAllowsAccess
			and  (FinanceCodeBlock.FinanceDimension1 !entered
			or    FinanceCodeBlock.FinanceDimension1.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension2 !entered
			or    FinanceCodeBlock.FinanceDimension2.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension3 !entered
			or    FinanceCodeBlock.FinanceDimension3.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension4 !entered
			or    FinanceCodeBlock.FinanceDimension4.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension5 !entered
			or    FinanceCodeBlock.FinanceDimension5.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension6 !entered
			or    FinanceCodeBlock.FinanceDimension6.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension7 !entered
			or    FinanceCodeBlock.FinanceDimension7.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension8 !entered
			or    FinanceCodeBlock.FinanceDimension8.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension9 !entered
			or    FinanceCodeBlock.FinanceDimension9.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension10 !entered
			or    FinanceCodeBlock.FinanceDimension10.SecurityGroupAllowsAccess))
		SecurityGroupAllowsAccessBlankValuesExcluded
			when (FinanceCodeBlock.AccountingEntity.AccountingEntitySecurityGroupAllowsAccess
			and  (FinanceCodeBlock.AccountingUnit.SecurityGroupAllowsAccess
			or    !FinanceEnterpriseGroup.AccountingUnitSelected)
			and  ((FinanceEnterpriseGroup.ProjectEntry  
			and   FinanceCodeBlock.Project.SecurityGroupAllowsAccess)
			or    !FinanceEnterpriseGroup.ProjectEntry)
			and   FinanceCodeBlock.GeneralLedgerChartAccount.SecurityGroupAllowsAccess
			and  ((FinanceEnterpriseGroup.FinanceDimension1Entry
			and   FinanceCodeBlock.FinanceDimension1.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension1Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension2Entry
			and   FinanceCodeBlock.FinanceDimension2.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension2Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension3Entry
			and   FinanceCodeBlock.FinanceDimension3.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension3Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension4Entry
			and   FinanceCodeBlock.FinanceDimension4.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension4Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension5Entry
			and   FinanceCodeBlock.FinanceDimension5.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension5Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension6Entry
			and   FinanceCodeBlock.FinanceDimension6.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension6Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension7Entry
			and   FinanceCodeBlock.FinanceDimension7.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension7Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension8Entry
			and   FinanceCodeBlock.FinanceDimension8.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension8Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension9Entry
			and   FinanceCodeBlock.FinanceDimension9.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension9Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension10Entry
			and   FinanceCodeBlock.FinanceDimension10.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension10Entry))		
		IsValidForExpense
			restricted
			when ((System = "AP" 
			or 	   System = "IC" 
			or	   System = "RQ"
			or 	   System = "PO")
			and	 (!GeneralLedgerEvent = "CB"
			and   !GeneralLedgerEvent = "AB"
			and   !GeneralLedgerEvent = "ZB"
			and   !GeneralLedgerEvent = "ES"))


#ifdef module cam
		CustodialProcessingSystems
			restricted
			when (System 	!= "CB"
			and   System	!= "AP"
			and   System 	!= "AR")
#endif
			
 		WithinSearchGroup
 			restricted
 			when (SearchGroup not entered
 			or    this instance within SearchGroup)

#ifdef module ap
		RecordEligibleForFES
			restricted
			when (FinanceEnterpriseGroup.FrontEndSplits
			and not CreatedByFES
			and TransactionAmount != 0
			and FinanceCodeBlock.FinanceDimension2 not entered
			and	FinanceCodeBlock.Project entered
			and !FinanceCodeBlock.Project.ExcludeFromFES
			and FinanceCodeBlock.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)
#endif
		FESExcludedEvent
			restricted
			when (GeneralLedgerEvent = "AR"
			or    GeneralLedgerEvent = "BI"
			or    GeneralLedgerEvent = "BIR"
			or    GeneralLedgerEvent = "RE"
			or    GeneralLedgerEvent = "RER"
			or    GeneralLedgerEvent = "BD"
			or    GeneralLedgerEvent = "LR"
			or    GeneralLedgerEvent = "PJ"
			or    GeneralLedgerEvent = "PL"
			or    GeneralLedgerEvent = "RI")

		ResponsibilityMatrixApprovalExists
			restricted
			when (ResponsibilityMatrixApprovalProcessorRel exists)

		ManualAllowed
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixApprovalProcessorRel.Status.PendingApproval)

		PendingForApproval
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixApprovalProcessorRel.Status.PendingApproval)

		Rejected
			restricted
			when (FinanceEnterpriseGroup.EnableResponsibilityMatrix
			and ResponsibilityMatrixApprovalProcessorRel.Status.Rejected)
#ifdef module cb
		CustodialAccountRequiredForFund			
            when (FinanceCodeBlock.FinanceDimension10 !entered
			and   FinanceEnterpriseGroup.FundAccounting
            and   (CashCodeFundByAccountingUnitRel.FundUsedForCustodialAccounting
			or     CashCodeFundByDimension1Rel.FundUsedForCustodialAccounting))
#endif
		MatchesColumnarSearchFinanceDimensions
			when (MatchesColumnarSearchFinanceDimension1
			and   MatchesColumnarSearchFinanceDimension2
			and   MatchesColumnarSearchFinanceDimension3
			and   MatchesColumnarSearchFinanceDimension4
			and   MatchesColumnarSearchFinanceDimension5
			and   MatchesColumnarSearchFinanceDimension6
			and   MatchesColumnarSearchFinanceDimension7
			and   MatchesColumnarSearchFinanceDimension8
			and   MatchesColumnarSearchFinanceDimension9
			and   MatchesColumnarSearchFinanceDimension10)
		MatchesColumnarSearchFinanceDimension1
			when ((ColumnarSearchFinanceDimension1Structure not entered
			and   ColumnarSearchFinanceDimension1 not entered)
			or   ((ColumnarSearchFinanceDimension1Structure entered
			and   ColumnarSearchFinanceDimension1 entered)
			and  (ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension1)))
		MatchesColumnarSearchFinanceDimension2
			when ((ColumnarSearchFinanceDimension2Structure not entered
			and   ColumnarSearchFinanceDimension2 not entered)
			or   ((ColumnarSearchFinanceDimension2Structure entered
			and   ColumnarSearchFinanceDimension2 entered)
			and  (ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension2)))
		MatchesColumnarSearchFinanceDimension3
			when ((ColumnarSearchFinanceDimension3Structure not entered
			and   ColumnarSearchFinanceDimension3 not entered)
			or   ((ColumnarSearchFinanceDimension3Structure entered
			and   ColumnarSearchFinanceDimension3 entered)
			and  (ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension3)))
		MatchesColumnarSearchFinanceDimension4
			when ((ColumnarSearchFinanceDimension4Structure not entered
			and   ColumnarSearchFinanceDimension4 not entered)
			or   ((ColumnarSearchFinanceDimension4Structure entered
			and   ColumnarSearchFinanceDimension4 entered)
			and  (ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension4)))
		MatchesColumnarSearchFinanceDimension5
			when ((ColumnarSearchFinanceDimension5Structure not entered
			and   ColumnarSearchFinanceDimension5 not entered)
			or   ((ColumnarSearchFinanceDimension5Structure entered
			and   ColumnarSearchFinanceDimension5 entered)
			and  (ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension5)))
		MatchesColumnarSearchFinanceDimension6
			when ((ColumnarSearchFinanceDimension6Structure not entered
			and   ColumnarSearchFinanceDimension6 not entered)
			or   ((ColumnarSearchFinanceDimension6Structure entered
			and   ColumnarSearchFinanceDimension6 entered)
			and  (ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension6)))
		MatchesColumnarSearchFinanceDimension7
			when ((ColumnarSearchFinanceDimension7Structure not entered
			and   ColumnarSearchFinanceDimension7 not entered)
			or   ((ColumnarSearchFinanceDimension7Structure entered
			and   ColumnarSearchFinanceDimension7 entered)
			and  (ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension7)))
		MatchesColumnarSearchFinanceDimension8
			when ((ColumnarSearchFinanceDimension8Structure not entered
			and   ColumnarSearchFinanceDimension8 not entered)
			or   ((ColumnarSearchFinanceDimension8Structure entered
			and   ColumnarSearchFinanceDimension8 entered)
			and  (ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension8)))
		MatchesColumnarSearchFinanceDimension9
			when ((ColumnarSearchFinanceDimension9Structure not entered
			and   ColumnarSearchFinanceDimension9 not entered)
			or   ((ColumnarSearchFinanceDimension9Structure entered
			and   ColumnarSearchFinanceDimension9 entered)
			and  (ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension9)))
		MatchesColumnarSearchFinanceDimension10
			when ((ColumnarSearchFinanceDimension10Structure not entered
			and   ColumnarSearchFinanceDimension10 not entered)
			or   ((ColumnarSearchFinanceDimension10Structure entered
			and   ColumnarSearchFinanceDimension10 entered)
			and  (ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension10)))
		MatchesColumnarSearchProject
			when ((ColumnarSearchProjectStructure not entered
			and   ColumnarSearchProject not entered)
			or   ((ColumnarSearchProjectStructure entered
			and   ColumnarSearchProject entered)
			and  (ColumnarSearchProjectHierarchyRel.DerivedLevel1Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel2Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel3Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel4Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel5Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel6Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel7Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel8Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel9Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel10Parent			= ColumnarSearchProject)))
		MatchesColumnarSearchAccountingUnit
			when ((ColumnarSearchAccountingUnitStructure not entered
			and   ColumnarSearchAccountingUnit not entered)
			or   ((ColumnarSearchAccountingUnitStructure entered
			and   ColumnarSearchAccountingUnit entered)
			and  (ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel1Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel2Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel3Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel4Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel5Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel6Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel7Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel8Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel9Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel10Parent		= ColumnarSearchAccountingUnit)))
		MatchesColumnarSearchAccount
			when ((ColumnarSearchReportingChart not entered
			and   ColumnarSearchGeneralLedgerChartAccount not entered)
			or   ((ColumnarSearchReportingChart entered
			and   ColumnarSearchGeneralLedgerChartAccount entered)
			and  (ColumnarSearchReportingChartAccountRel.DerivedLevel1Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel2Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel3Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel4Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel5Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel6Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel7Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel8Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel9Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel10Parent	= ColumnarSearchGeneralLedgerChartAccount)))



		AllowDocumentMaintenanceDuringBudgetTemplateProcessPending
			restricted
			when (config.AllowDocumentMaintenanceDuringProcessPending not= false)

		PendingFESTransactions
			when (FinanceCodeBlock.Project.ParentDisplayContract entered
			and	  FinanceCodeBlock.Project.ParentDisplayContractRel.Project.ProjectContract.FrontEndSplitsEnabled	
			and   !FinanceCodeBlock.Project.ExcludeFromFES
			and   FinanceCodeBlock.FinanceDimension2 != blank
			and   !FESExcludedEvent)

#ifdef module reconciliation		
		IsPrepaidReconciliationAccount
			restricted
			when (ReconciliationAccountRel exists
			and ReconciliationAccountRel.ReconciliationAccountType.Prepaid
			and ReconciliationIsOpen)
		ReconciliationIsOpen
			restricted
			when (!PeriodEndReconciliation.Status.Closed)
#endif
		AccountAnalysisFunctionalAmount
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Functional)

		AccountAnalysisAlternateAmount
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Alternate)

		AccountAnalysisAlternateAmount2
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Alternate2)

		AccountAnalysisAlternateAmount3
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Alternate3)

		AccountAnalysisReportAmount1
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Report1)

		AccountAnalysisReportAmount2
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Report2)

		AccountAnalysisReportAmount3
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Report3)

		AccountAnalysisReportAmount4
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Report4)

		AccountAnalysisReportAmount5
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Report5)

		AccountAnalysisUnitsAmount
			restricted
			when (AccountAnalysisSettingsRel.ReportingCurrency.Units)

		UsePostingDateOnlyToDailyTotal
			restricted
			when (config.ALLOW_POSTDATE_ONLY_TO_DAILYTOTAL = true)

    Relations
		SystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingEntity	 		= AccountingEntity
				related.GeneralLedgerSystemCode		= System
		CurrencyRelationshipRel
			one-to-one relation to CurrencyRelationship
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.CurrencyRelationship		= LocalCurrencyRelationship
		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.SystemAccount				= LocalSystemAccount
		SystemAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= AccountingEntity
		GLTransactionCommentRel		is a GLTransactionComment set
		EntityZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByEntityZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= LocalInstAccountingEntity
		AUZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingUnitStructure 	= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity			= LocalInstAccountingEntity
				related.AccountingUnit		    	= LocalInstAccountingUnit
		FinDim1ZoneFinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
				related.FinanceDimension1			= LocalInstFinanceDimension1
		EnterpriseZoneFinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByEnterpriseZoneDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure





		FinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension1Structure			= FinanceEnterpriseGroup.EnterpriseDim1Structure
		FinanceDimension2Rel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension2Structure			= FinanceEnterpriseGroup.EnterpriseDim2Structure
		FinanceDimension3Rel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension3Structure			= FinanceEnterpriseGroup.EnterpriseDim3Structure
		FinanceDimension4Rel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension4Structure			= FinanceEnterpriseGroup.EnterpriseDim4Structure
		FinanceDimension5Rel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension5Structure			= FinanceEnterpriseGroup.EnterpriseDim5Structure
		FinanceDimension6Rel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension6Structure			= FinanceEnterpriseGroup.EnterpriseDim6Structure
		FinanceDimension7Rel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension7Structure			= FinanceEnterpriseGroup.EnterpriseDim7Structure
		FinanceDimension8Rel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension8Structure			= FinanceEnterpriseGroup.EnterpriseDim8Structure
		FinanceDimension9Rel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension9Structure			= FinanceEnterpriseGroup.EnterpriseDim9Structure
		FinanceDimension10Rel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension10Structure			= FinanceEnterpriseGroup.EnterpriseDim10Structure
		GeneralLedgerZoneTotalRel
			one-to-one relation to GeneralLedgerZoneTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= AccountingEntity
				related.GeneralLedgerClosePeriod					= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl					= GeneralLedgerJournalControl
				related.GeneralLedgerZoneTotal.Currency				= LocalInstCurrencyCode
				related.GeneralLedgerZoneTotal.ZoneAccountingUnit	= LocalZoneAccountingUnit
				related.GeneralLedgerZoneTotal.ZoneFinanceDimension	= LocalZoneFinanceDimension
		GLCurrencyJournalControlRel
			one-to-one relation to GLCurrencyJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= AccountingEntity
				related.GeneralLedgerClosePeriod			= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl			= GeneralLedgerJournalControl
				related.FromCurrency						= LocalInstCurrencyCode
		CurrencyJournalControlRel
			one-to-one relation to GLCurrencyJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= LocalClosePeriod
				related.GeneralLedgerJournalControl	= LocalJournalControl
				related.FromCurrency				= LocalInstCurrencyCode
		GLTransactionDetailExistsRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByRelatedJournalTransaction
				related.RelatedJournalTransaction			= reference to this instance
		GLTransactionDetailRevenueRel
			one-to-many relation using GLTransactionDetailExistsRel
			Instance Selection
				where (related.RevenueRecognized.Unprocessed
				and   !related.Billed.Distributed
				and   (related.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount != 0
				or     related.UnitsAmount entered))
		GLTransactionDetailBillingRel
			one-to-many relation using GLTransactionDetailExistsRel
			Instance Selection
				where (related.Billed.Unprocessed
				and   (related.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount != 0
				or     related.UnitsAmount entered))
		GLTransactionDetailSplitRel
			one-to-many relation using GLTransactionDetailExistsRel
			Instance Selection
				where (related.Billed.Unprocessed
				and    related.RevenueRecognized.Unprocessed

				and   (related.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount != 0
				or     related.UnitsAmount entered))
		GLTransactionDetailBurdenRel
			one-to-many relation using GLTransactionDetailExistsRel
			Instance Selection
				where (related.IndirectBurden.Unprocessed
				and    related.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount != 0)
		ExpenseGLDetailExistsRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByRelatedJournalTransaction
				related.RelatedJournalTransaction			= reference to this instance
			Instance Selection
				where (related.ExpenseReportSystems
				and   !related.SystemTransactionEvents)
		TransactionToTransactionDetailRel
			one-to-one relation to GLTransactionDetail
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction				= reference to this instance
		GeneralLedgerTotalRel
			one-to-one relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario										= FinanceEnterpriseGroup.ActualsScenario
				related.AccountingEntity								= AccountingEntity
				related.GeneralLedgerTotal.Ledger						= FinanceCodeBlock.Ledger
				related.GeneralLedgerTotal.System						= System
				related.GeneralLedgerTotal.Currency						= CurrencyCode
				related.GeneralLedgerTotal.EntityYearPeriod				= GeneralLedgerCalendarPeriod
				related.GeneralLedgerTotal.AccountingUnit				= FinanceCodeBlock.AccountingUnit
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount
				related.GeneralLedgerTotal.Project						= FinanceCodeBlock.Project
				related.GeneralLedgerTotal.DimensionCode				= DimensionCode
				related.GeneralLedgerTotal.PrimaryLedger				= PrimaryLedger
		GeneralLedgerAccountTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByChartAccount
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario										= FinanceEnterpriseGroup.ActualsScenario
				related.AccountingEntity								= AccountingEntity
				related.GeneralLedgerTotal.Ledger						= FinanceCodeBlock.Ledger
				related.GeneralLedgerTotal.EntityYearPeriod				= GeneralLedgerCalendarPeriod
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount				
		RecurringJournalControlRel
			one-to-one relation to RecurringJournalControl
			Field Mapping uses ByTransactionOrigin
				related.TransactionOrigin								= reference to this instance
		RecurringJournalBridgeRel
			one-to-many relation to RecurringJournalBridge
			Field Mapping uses ByTransactionOrigin
				related.TransactionOrigin								= reference to this instance
		AccountingEntityLedgerPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.Ledger						= FinanceCodeBlock.Ledger
		ClosedLedgerPeriodForEntityRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= FinanceCodeBlock.ToAccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.Ledger						= FinanceCodeBlock.Ledger
		GLTransactionDetailRecordRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByRelatedJournalTransaction

			Instance Selection
				where (related.RelatedJournalTransaction.BusinessClassName	= LocalRelatedJournalTransaction.BusinessClassName
				and    related.RelatedJournalTransaction.BusinessObjectKey	= LocalRelatedJournalTransaction.BusinessObjectKey)
		GainLossGeneralLedgerTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByGainLosslinkSequence
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= AccountingEntity
				related.GainLossRunSequence					= GainLossRunSequence
				related.GainLosslinkSequence				= GainLosslinkSequence
			Instance Selection
				where (!related.IsGainLossAccountTransaction)
		GainLossTransactionAmountRel 
			one-to-one relation to GainLossTransactionAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl	= GeneralLedgerJournalControl
				related.GainLossTransactionAmount	= GeneralLedgerTransaction
		ControlForGainLossTransactionAmountRel 
			one-to-many relation to GainLossTransactionAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl	= GeneralLedgerJournalControl
		GeneralLedgerTotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "GeneralLedgerTotal"
#ifdef module ad
		DailyPeriodTotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "DailyPeriodTotal"
#endif
		BudgetEntityLedgerRel
			one-to-one relation to BudgetEntityLedger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= FinanceCodeBlock.ToAccountingEntity
				related.Ledger						= LocalInstLedger
		FinanceEnterpriseGroupExtRel		
			one-to-one relation to FinanceEnterpriseGroupExt
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroupExt	= FinanceEnterpriseGroup
		GainLossResultRel
			one-to-one relation to GainLossResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ReportingBasis			= GeneralLedgerJournalControl.GainLossReportingBasis
				related.GainLossResult			= GeneralLedgerJournalControl.GainLossRunSequence
		GeneralLedgerJournalCommentRel is a GeneralLedgerJournalComment set
		GeneralLedgerJournalDocumentRel is a GeneralLedgerJournalDocument set
#ifdef module cb			
		CashCodeByAccountRel
			one-to-many relation to CompanyCashCode
			Field Mapping uses ByCashGLAccount
				related.CashAccount.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount
			Instance Selection
				where (related.CashCode.CashManagementGroup		= FinanceEnterpriseGroup)
		CashCodeFundByAccountingUnitRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= FinanceEnterpriseGroup
				related.CashCode				= first CashCodeByAccountRel.CashCode
				related.AccountingEntity		= FinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= FinanceCodeBlock.AccountingUnit
				related.FinanceDimension1		= blank
		CashCodeFundByDimension1Rel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= FinanceEnterpriseGroup
				related.CashCode				= first CashCodeByAccountRel.CashCode
				related.AccountingEntity		= FinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= blank
				related.FinanceDimension1		= FinanceCodeBlock.FinanceDimension1
		CashCodeFundEditByAccountingUnitRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to GeneralLedgerJournalControl
		 		related.CashCode				= first CashCodeByAccountRel.CashCode
		 		related.AccountingEntity		= FinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= FinanceCodeBlock.AccountingUnit
		 		related.FinanceDimension1		= blank
		CashCodeFundEditByDimension1Rel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to GeneralLedgerJournalControl
		 		related.CashCode				= first CashCodeByAccountRel.CashCode
		 		related.AccountingEntity		= FinanceCodeBlock.ToAccountingEntity
		 		related.AccountingUnit			= blank
		 		related.FinanceDimension1		= FinanceCodeBlock.FinanceDimension1
#endif
#ifdef module reconciliation
		TransactionReconDetailRel
			one-to-many relation to TransactionReconDetail
			Field Mapping uses ByOriginatingGLTransaction
				related.ReconciliationManagementGroup	= FinanceEnterpriseGroup
				related.ReconciliationAccountStructure	= LocalReconAccountStructure
				related.ReconciliationAccount			= LocalReconAccount
				related.OriginatingGLTransaction		= LocalOriginatingTransaction
				
		ReconciliationManagementGroupRel
			one-to-one relation to ReconciliationManagementGroup
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup		= FinanceEnterpriseGroup
				
		ReconciliationAccountRel
			one-to-one relation to ReconciliationAccount
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup	= FinanceEnterpriseGroup
				related.ReconciliationAccountStructure	= ReconciliationAccountStructure 
				related.ReconciliationAccount			= ReconciliationAccount			 
#endif
#ifdef module intercobilling
		IntercompanyBillingTransactionRel
			one-to-one relation to IntercompanyBillingTransaction
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction 	= reference to this instance
				
		IntercompanyBillingGroupRel
			one-to-one relation to IntercompanyBillingGroup
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup 	= FinanceEnterpriseGroup
#endif		
#ifdef module ad
		ADBAccountMasterByAccountRel
			one-to-many relation to ADBAccountMaster
			Field Mapping uses ByEntityAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= LocalInstAccountingEntity
				related.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
				related.AccountingUnit				= LocalInstAccountingUnit
				related.FinanceDimension1			= LocalInstFinanceDimension1
		AverageDailyBalanceAccountRel
			one-to-one relation to AverageDailyBalanceAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup									= FinanceEnterpriseGroup
				related.AccountingEntity										= LocalInstAccountingEntity
				related.AverageDailyBalanceAccount.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
				related.AverageDailyBalanceAccount.DimensionCode				= DerivedADBDimensionCode
#endif
		FixESGeneralLedgerTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.GeneralLedgerClosePeriod	= GeneralLedgerClosePeriod
				related.GeneralLedgerJournalControl	= GeneralLedgerJournalControl
			Instance Selection
				where (related.CurrencyCode			= LocalInstCurrencyCode
				and   !related.Status.Memo)
		GLEncumbranceTrackRel
			one-to-many relation to GLCommit
			Field Mapping uses ByGLEncumbranceReference
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GLEncumbranceReference		= DerivedGLEncumbranceReference
		GLCommitRel
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction	= reference to this instance
		CommitAgainstManualEncumbRel
			one-to-many relation to GLCommit
			Field Mapping uses ByGLEncumbranceReference
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GLEncumbranceReference		= DerivedGLEncumbranceReference
			Instance Selection
				where (!related.System				= "GL"
				and		related.Status.Unreleased)
		AccountingEntitySecurityGroupMemberRel
			one-to-one relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AccountingEntityGroup   = actor.context.AccountingEntitySecurityGroup.FinanceDimensionStructure
				related.AccountingEntity        = AccountingEntity
		AccountAnalysisSettingsRel
			one-to-one relation to AccountAnalysisSettings
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Actor				    = actor
				related.AccountAnalysisSettings = AccountAnalysisSettings
		EntityWithADBProcessingRel
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses BySubordinate
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.SubordinateAccountingEntity	= LocalInstAccountingEntity
			Instance Selection
				where (related.ReportingBasisRel.ReportingBasis.AverageDailyBalance
				and    related.ReportingBasisRel.ReportingBasis.ADBRunDate entered)
				

#ifdef module integration				
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		



		FSMBODConfigurationPARel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1
        
        FSMBODConfigurationDetailPARel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2	
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.Alert						= "FSM_ION_ErrorSuspenseAlert"
				and	   related.Enable)
#endif

		ProcessingTemplatesRel	
			one-to-many relation to BudgetTemplate 
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.Status	!= 2 
				and related.Status 		!= 0 
				and related.Status 		!= 3) 


#ifdef module ap

		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey

		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= GeneralLedgerTransaction
#endif
		ProjectFundingSourceRel
			one-to-one relation to ProjectFundingSource
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= FinanceCodeBlock.Project.ParentDisplayContractRel.Project
				related.FinanceDimension2		= FinanceCodeBlock.FinanceDimension2	

#ifdef module cam
		CustodialAccountEditByPostingRel
			one-to-one relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to GeneralLedgerJournalControl
		  		related.AccountingEntity		= FinanceCodeBlock.ToAccountingEntity
		 		related.FinanceDimension10		= FinanceCodeBlock.FinanceDimension10

		CustodialAccountEditRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance
		  				 		
		CustodialDetailAmountRel
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses ByCustodialPosting
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.CustodialPosting       = FinanceCodeBlock.FinanceDimension10
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity	= FinanceCodeBlock.ToAccountingEntity)
#endif

		ColumnarSearchFinanceDimension1HierarchyRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= ColumnarSearchFinanceDimension1Structure
				related.FinanceDimension1			= FinanceCodeBlock.FinanceDimension1

		ColumnarSearchFinanceDimension2HierarchyRel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= ColumnarSearchFinanceDimension2Structure
				related.FinanceDimension2			= FinanceCodeBlock.FinanceDimension2

		ColumnarSearchFinanceDimension3HierarchyRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= ColumnarSearchFinanceDimension3Structure
				related.FinanceDimension3			= FinanceCodeBlock.FinanceDimension3

		ColumnarSearchFinanceDimension4HierarchyRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= ColumnarSearchFinanceDimension4Structure
				related.FinanceDimension4			= FinanceCodeBlock.FinanceDimension4

		ColumnarSearchFinanceDimension5HierarchyRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= ColumnarSearchFinanceDimension5Structure
				related.FinanceDimension5			= FinanceCodeBlock.FinanceDimension5

		ColumnarSearchFinanceDimension6HierarchyRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= ColumnarSearchFinanceDimension6Structure
				related.FinanceDimension6			= FinanceCodeBlock.FinanceDimension6

		ColumnarSearchFinanceDimension7HierarchyRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= ColumnarSearchFinanceDimension7Structure
				related.FinanceDimension7			= FinanceCodeBlock.FinanceDimension7

		ColumnarSearchFinanceDimension8HierarchyRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= ColumnarSearchFinanceDimension8Structure
				related.FinanceDimension8			= FinanceCodeBlock.FinanceDimension8

		ColumnarSearchFinanceDimension9HierarchyRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= ColumnarSearchFinanceDimension9Structure
				related.FinanceDimension9			= FinanceCodeBlock.FinanceDimension9

		ColumnarSearchFinanceDimension10HierarchyRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= ColumnarSearchFinanceDimension10Structure
				related.FinanceDimension10			= FinanceCodeBlock.FinanceDimension10

		ColumnarSearchProjectHierarchyRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ProjectStructure			= ColumnarSearchProjectStructure
				related.Project						= FinanceCodeBlock.Project

		ColumnarSearchAccountingUnitHierarchyRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingUnitStructure		= ColumnarSearchAccountingUnitStructure
				related.AccountingEntity			= FinanceCodeBlock.ToAccountingEntity
				related.AccountingUnit				= FinanceCodeBlock.AccountingUnit			

		ResponsibilityMatrixApprovalRel
			one-to-many relation to ResponsibilityMatrixApproval
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ResponsibilityMatrix        		= LocalResponsibilityMatrix
				related.ResponsibilityMatrixApproval		= LocalMatrixApprovalCode
			Instance Selection
                where (related.DocumentType.GLJournalEntry
				and		related.Active)														

		ResponsibilityMatrixResourceRel
			one-to-many relation to ResponsibilityMatrixResource
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ResponsibilityMatrix        	= LocalResponsibilityMatrix
				related.ResponsibilityMatrixApproval	= LocalMatrixApprovalCode
			Instance Selection
				where (related.DocumentType 	 	 = ApprovalTransactionForm.GLJournalEntry
				and		related.ApprovalAmount 		<= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
		
		ResponsibilityMatrixApprovalProcessorRel
			one-to-one relation to ApprovalProcessor
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.ApprovalProcessor.ApprovalType					= "CD"
				related.ApprovalProcessor.SystemCode					= System
				related.ApprovalProcessor.ApprovalTransactionForm		= ApprovalTransactionForm.GLJournalEntry
				related.ApprovalProcessor.TransactionHeader1			= AccountingEntity										
				related.ApprovalProcessor.TransactionHeader2			= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
				related.ApprovalProcessor.TransactionHeader3			= GeneralLedgerJournalControl	
				related.ApprovalProcessor.TransactionHeader4			= blank
				related.ApprovalProcessor.TransactionLine1				= blank
            	related.ApprovalProcessor.TransactionLine2            	= blank
				related.ApprovalProcessor.Transaction					= GeneralLedgerTransaction

		ResponsibilityMatrixRel
			one-to-many relation to ResponsibilityMatrix
			Field Mapping uses ByPriorityAndDimensionCount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
                where (related.Active)

		ColumnarSearchReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= ColumnarSearchReportingChart
				related.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount

    Sets
		ByGainLossRunSequence
			duplicates
            Instance Selection
                where (GainLossTransactionOnly)
			Sort Order
				FinanceEnterpriseGroup
				FinanceCodeBlock.Ledger
				FinanceCodeBlock.GeneralLedgerChartAccount
				GainLossRunSequence
				GeneralLedgerTransaction

		ByGainLosslinkSequence
			duplicates
            Instance Selection
                where (GainLossTransactionOnly)
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GainLossRunSequence
				GainLosslinkSequence
				GeneralLedgerTransaction
		
		ByEntityAccountingUnit
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				FinanceCodeBlock.AccountingUnit
				PostingDate descending
				GeneralLedgerJournalControl
				GeneralLedgerTransaction
				Status

		ByAccount
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceCodeBlock.GeneralLedgerChartAccount
				PostingDate descending
				AccountingEntity
				GeneralLedgerJournalControl
				GeneralLedgerTransaction
				Status
				
		ByGeneralLedgerTotalOrder
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerCalendarPeriod				
				FinanceCodeBlock.Ledger
				System
				CurrencyCode
				FinanceCodeBlock.AccountingUnit
				FinanceCodeBlock.GeneralLedgerChartAccount
				FinanceCodeBlock.Project
				DimensionCode
				PrimaryLedger
				
		ByProjectAndPostingDate
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				FinanceCodeBlock.Project
				PostingDate	descending
				Status			

		ByPostingDate
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				PostingDate descending
		        AccountingEntity 
		        GeneralLedgerJournalControl 
		        GeneralLedgerTransaction 
				Status
				
	Field Rules
		CurrencyTable
			initial value is GeneralLedgerJournalControl.CurrencyTable
			default to GeneralLedgerJournalControl.CurrencyTable

		TransactionDate
			initial value is GeneralLedgerJournalControl.TransactionDate
			default to GeneralLedgerJournalControl.TransactionDate
			required
		Description
			default to GeneralLedgerJournalControl.Description
		CurrencyCode
			initial value is GeneralLedgerJournalControl.Currency
			default to GeneralLedgerJournalControl.Currency
			default to AccountingEntity.FunctionalCurrency
			required
			if (CurrencyCode	!= AccountingEntity.FunctionalCurrency
			or (AccountingEntity.AlternateCurrency entered
			and CurrencyCode	!= AccountingEntity.AlternateCurrency)
			or (AccountingEntity.AlternateCurrency2 entered
			and  CurrencyCode	!= AccountingEntity.AlternateCurrency2)
			or (AccountingEntity.AlternateCurrency3 entered
			and  CurrencyCode	!= AccountingEntity.AlternateCurrency3)
			and !CurrencyTable entered)
				constraint (FinanceEnterpriseGroup.CurrencyTable entered)
					"CurrencyExchangeTableIsRequiredOnFinanceEnterpriseGroupForCurrencyTransaction"
#ifdef module intercobilling
			include ValidateCurrencyCode
#endif
		PostingDate
			initial value is GeneralLedgerJournalControl.PostingDate
			default to GeneralLedgerJournalControl.PostingDate
			required				
			constraint (PostingDate = GeneralLedgerJournalControl.PostingDate)
				"PostingDateNotEqualToJournalControlPostingDate"
		DimensionCode
			force default to FinanceCodeBlock.DimensionCode
		GeneralLedgerEvent
			initial value is GeneralLedgerJournalControl.GeneralLedgerEvent
			default to GeneralLedgerJournalControl.GeneralLedgerEvent	
			required
			if (FinanceCodeBlock.Ledger.CurrencyLedger
			and !SystemTransactionEvents)
				constraint (GeneralLedgerEvent = "CT"
				or			GeneralLedgerEvent = "GR")
					"<GeneralLedgerEvent>EventNotValidForLedger"
		ReportCurrencyAmount
			if (!CurrencyTable entered)
 				CurrencyTable				= GeneralLedgerJournalControl.CurrencyTable
			required
			if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
			or ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered)
				constraint (!FinanceCodeBlock.GeneralLedgerChartAccount.AccountType.StatCumulative		
				and	!FinanceCodeBlock.GeneralLedgerChartAccount.AccountType.StatNonCumulative)
					"StatisticalAccountDoesNotAllowAmounts"

		JournalType
			initial value is GeneralLedgerJournalControl.JournalType
			default to GeneralLedgerJournalControl.JournalType
		System
			initial value is GeneralLedgerJournalControl.System
			default to GeneralLedgerJournalControl.System
			if (FinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (System within FinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemForAccount"	
		Reference
			initial value is GeneralLedgerJournalControl.Reference
			default to GeneralLedgerJournalControl.Reference
		AutoReverse
			initial value is GeneralLedgerJournalControl.DefaultAutoReverse
		FinanceCodeBlock
			if (FinanceCodeBlock.ToAccountingEntity.ValidSystems entered
			and !GLProcessingSystems)
				constraint (System within FinanceCodeBlock.ToAccountingEntity.ValidSystems)
					"InvalidSystemForPosting<FinanceEnterpriseGroup.AccountingEntityLabel>"
			required
#ifdef module cam
			if (FinanceEnterpriseGroup.CustodialAccountManagement
			and FinanceCodeBlock.FinanceDimension10 entered)
				constraint (CustodialDetailAmountRel exist)
					"<FinanceEnterpriseGroup.FinanceDimension10Label>:_<FinanceCodeBlock.FinanceDimension10>_MustBeSetupAs_a_CustodialAccount"
				if (TransactionAmount < 0)
					constraint (FinanceCodeBlock.FinanceDimension10.Expendable)
						"<FinanceEnterpriseGroup.FinanceDimension10Label>:_<FinanceCodeBlock.FinanceDimension10>_IsNotExpendable"
#endif
		TransientBypassStructureRelationEdit
			default to BypassStructureRelationEdit
		PrimaryLedger
			default to GeneralLedgerJournalControl.PrimaryLedger
		GeneralLedgerCalendarPeriod
			default to GeneralLedgerJournalControl.GeneralLedgerCalendarPeriod
    	ChartSection
    		default to FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
		RecurringBeginningPeriod
			initial value is AccountingEntity.CurrentPeriod
			default to AccountingEntity.CurrentPeriod
		RecurringBeginningYear
			initial value is AccountingEntity.FiscalYear
			default to AccountingEntity.FiscalYear
		RecurringEndPeriod
			initial value is FinanceCodeBlock.ToAccountingEntity.CurrentPeriod
			default to FinanceCodeBlock.ToAccountingEntity.CurrentPeriod
		RecurringEndYear
			initial value is FinanceCodeBlock.ToAccountingEntity.FiscalYear
			default to FinanceCodeBlock.ToAccountingEntity.FiscalYear
			if (RecurringOption.Add)
				constraint (RecurringEndYear >= RecurringBeginningYear)
					"InvalidBeginningYearAndEndYearRange"
				if (RecurringEndYear = RecurringBeginningYear)
					constraint (!RecurringBeginningPeriod = RecurringEndPeriod)
						"InvalidPeriodRange"
		RecurringGeneralLedgerEvent
			initial value is GeneralLedgerJournalControl.GeneralLedgerEvent
			default to GeneralLedgerJournalControl.GeneralLedgerEvent	
		RecurringToCodeBlock
			if (RecurringOption.Add)
				default to FinanceCodeBlock
				required
		RecurringTransactionAmount
			if (RecurringOption.Add)
				required
				if (TransactionAmount < 0)
					LocalRecurringTransAmount	= (RecurringTransactionAmount * -1)
					LocalJournalBridgeAmount	= ((TotalJournalBridgeAmount + RecurringTransactionAmount) * -1)
					constraint (LocalRecurringTransAmount <= (TransactionAmount * -1))
						"RecurringTransactionAmountCannotExceedTransactionAmount"
					constraint (LocalJournalBridgeAmount  <= (TransactionAmount * -1))
						"TotalRecurringTransactionAmountCannotExceedTransactionAmount"
				else


					constraint (TotalJournalBridgeAmount + RecurringTransactionAmount	<= TransactionAmount)
						"TotalRecurringTransactionAmountCannotExceedTransactionAmount"
        RecurringDescription
			default to GeneralLedgerJournalControl.Description	
		CreatedByFES
			if(CreatedByFES
			and	action type.Update
			and	(FinanceCodeBlock.Ledger changed
			or	FinanceCodeBlock.ToAccountingEntity changed
			or	FinanceCodeBlock.AccountingUnit changed
			or	FinanceCodeBlock.GeneralLedgerChartAccount changed
			or	FinanceCodeBlock.Project changed
			or	FinanceCodeBlock.FinanceDimension1 changed
			or	FinanceCodeBlock.FinanceDimension2 changed
			or	FinanceCodeBlock.FinanceDimension3 changed
			or	FinanceCodeBlock.FinanceDimension4 changed
			or	FinanceCodeBlock.FinanceDimension5 changed
			or	FinanceCodeBlock.FinanceDimension6 changed
			or	FinanceCodeBlock.FinanceDimension7 changed
			or	FinanceCodeBlock.FinanceDimension8 changed
			or	FinanceCodeBlock.FinanceDimension9 changed
			or	FinanceCodeBlock.FinanceDimension10 changed
        	or	TransactionAmount changed))
				confirmation required
					"OverrideFrontEndSplit?"
				FESManuallyUpdated = true

	Create Rules
		ColumnarReplicated = false
	
	Actions
				
		TriggerErrorSuspenseAlert is an Instance Action
			restricted
			Action Rules		
				if (FinanceEnterpriseGroup.BODTrigger)		
					trigger "ErrorSuspenseService" PA service
						resume on error
						title is "FEG:<FinanceEnterpriseGroup>AccountingEntity:<AccountingEntity>"
						Criteria
							FinanceEnterpriseGroup
							AccountingEntity
						Variables
							FinanceCodeBlock.GeneralLedgerChartAccount
								variable name is Account
							GeneralLedgerJournalControl
								variable name is GLJournalControl
							GeneralLedgerTransaction
								variable name is GLTransaction
							FinanceCodeBlock.Ledger
								variable name is Ledger
							FinanceCodeBlock.AccountingUnit	
								variable name is AccountingUnit
							TransactionDate
								variable name is TransactionDate
							FinanceEnterpriseGroup
								variable name is FinanceEnterpriseGroup
							AccountingEntity
								variable name is AccountingEntity
							GeneralLedgerEvent
								variable name is GeneralLedgerEvent
							ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								variable name is VarFunctionalAmount
							ReportCurrencyAmount.FunctionalAmount.FromCurrency
								variable name is VarFromCurrency
							ReportCurrencyAmount.FunctionalAmount.ExchangeDate
								variable name is VarExchangeDate

		CreateGLCommit is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmClosePeriod				is a GeneralLedgerClosePeriod
					default label is "ClosePeriod"
				PrmJournalControl			is a GeneralLedgerJournalControl
					default label is "JournalControl"

			Parameter Rules

			Local Fields	

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    GeneralLedgerClosePeriod		= PrmClosePeriod
				and    GeneralLedgerJournalControl	= PrmJournalControl
				and    Status.Unreleased)
				
			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmClosePeriod
				PrmJournalControl

			Action Rules
				Empty Set Rules

				Set Rules

				Instance Rules
					invoke CreateProjectCommitment GLCommit
						fill in fields from this instance
						invoked.OriginatingTransaction		= reference to GeneralLedgerTransaction
						invoked.EntityYearPeriod			= GeneralLedgerCalendarPeriod
						invoked.TransactionDate				= PostingDate
						invoked.HeaderUniqueID				= GeneralLedgerJournalControl.UniqueID
						invoked.TransBusinessObjectRef		= reference to GeneralLedgerJournalControl
						invoked.GLEncumbranceReference		= DerivedGLEncumbranceReference

					invoke Release Unreleased this instance 


		CreateGLTransactionDetail is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmClosePeriod				is a GeneralLedgerClosePeriod
					default label is "ClosePeriod"
				PrmJournalControl			is a GeneralLedgerJournalControl
					default label is "JournalControl"

			Parameter Rules

			Local Fields	

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    GeneralLedgerClosePeriod		= PrmClosePeriod
				and    GeneralLedgerJournalControl	= PrmJournalControl
				and    Status.Unreleased)
				
			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmClosePeriod
				PrmJournalControl

			Action Rules
				Empty Set Rules

				Set Rules

				Instance Rules
					invoke CreateReleasedGLTransDetailNoRules Released GLTransactionDetail
						fill in fields from this instance
						invoked.JournalizeGroup					= "GL"+AccountingEntity+GeneralLedgerClosePeriod+GeneralLedgerJournalControl
						invoked.OriginatingTransaction			= reference to GeneralLedgerTransaction
						invoked.BaseZoneAccountingUnit			= GeneralLedgerJournalControl.BaseZoneAccountingUnit
						invoked.BaseZoneDimension1				= GeneralLedgerJournalControl.BaseZoneDimension1
						invoked.SkipFESExpenditures				= true
					invoke Release Unreleased this instance


		Post is a Set Action
			restricted
			Parameters
				PrmSkipAttachRule			is a SkipAttachRule			
					default label is untranslatable:"SkipAttachRule"	
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmGeneralLedgerClosePeriod	is a GeneralLedgerClosePeriod
					default label is "GlobalLedgerClosePeriod"
				PrmJournalControl			is a GeneralLedgerJournalControl
					default label is "JournalControl"
				PrmBypassCubeRefresh		is a BypassCubeRefresh

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	

				LocalChartSection				is a ChartSection

				LocalDimensionCode				is a DimensionCode
				LocalSystem						is a GeneralLedgerSystemCode
				LocalCurrencyCode				is a Currency
				LocalFinanceCodeBlock			is a FinanceCodeBlock
				LocalEntityYearPeriod			is a GeneralLedgerCalendarPeriod
				LocalPrimaryLedger				is a Ledger
				LocalUpdateBudget				is Boolean
				LocalAutoReverseCount			is like GeneralLedgerTransaction

				LocalPostingDate				is Date
				LocalTransactionDate			is Date
				LocalTimeStamp					is TimeStamp
				LocalUndistributedRetainEarnings	is like GeneralLedgerChartAccount
				LocalRetainedEarnings				is like GeneralLedgerChartAccount
				LocalAllowADBTransactionUpdate		is Boolean
				LocalYear							is a GeneralLedgerCalendarYear

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    GeneralLedgerClosePeriod		= PrmGeneralLedgerClosePeriod
				and    GeneralLedgerJournalControl	= PrmJournalControl
				and    GeneralLedgerJournalControl.Released.Yes
				and    Status.Released)

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
				PrmGeneralLedgerClosePeriod
				PrmJournalControl

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerClosePeriod
				Status
				PrimaryLedger
				FinanceCodeBlock.Ledger
				System
				CurrencyCode
				GeneralLedgerCalendarPeriod
	        	FinanceCodeBlock.AccountingUnit
    	        FinanceCodeBlock.GeneralLedgerChartAccount
            	FinanceCodeBlock.Project
				DimensionCode
				PostingDate
				TransactionDate

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal
				FunctionalAmountDebitTotal
				ReportAmount1DebitTotal
				FunctionalAmountCreditTotal
				ReportAmount1CreditTotal
				BudgetFunctionalAmount
				BudgetAlternateAmount
				BudgetAlternateAmount2
				BudgetAlternateAmount3
				BudgetProjectAmount
				BudgetReportAmount1
				BudgetReportAmount2
				BudgetReportAmount3
				BudgetReportAmount4
				BudgetReportAmount5
				
				ADBFunctionalTotal

			Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						include VerifyTemplatesAreNotProcessing						
						initialize LocalUndistributedRetainEarnings
						LocalSystemAccount  = SystemAccount.UndistributedRetainedEarnings
						if (FinanceEnterpriseGroup.IncludeUREInAverageDailyBalance)
							constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
								"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
						LocalUndistributedRetainEarnings = first SystemAccountRel.GeneralLedgerChartAccount

						initialize LocalRetainedEarnings
						if (PrmFinanceEnterpriseGroup.AllBalanceSheetAccounts)
							LocalSystemAccount			= SystemAccount.RetainedEarnings
							if (PrmFinanceEnterpriseGroup.SystemSubAccount entered)
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount.Account + "-" + PrmFinanceEnterpriseGroup.SystemSubAccount
							else
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount
							constraint (LocalRetainedEarnings entered)
								"InvalidRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
				
					Exit Rules
						invoke TriggerBOD GeneralLedgerJournalControl 
						
				AccountingEntity Set Rules
					Entrance Rules
						initialize LocalAutoReverseCount
						initialize LocalAllowADBTransactionUpdate
						LocalTimeStamp		= current timestamp
						if (PrmAccountingEntity.AverageDailyBalance)
							LocalInstAccountingEntity			= PrmAccountingEntity
							if (EntityWithADBProcessingRel exists)
								LocalAllowADBTransactionUpdate	= true

					Exit Rules
						invoke UpdateJournalControlStatus PrmJournalControl
							invoked.PrmStatus			= 5 




						if (!MigStatus.MigratedHistorical)
							if (LocalAutoReverseCount > 0)
								if (LocalAutoReverseCount > 50)
									invoke CreateAutoReversePeriodTransaction GeneralLedgerTransaction in background
										invoked.PrmEnterpriseGroup				= FinanceEnterpriseGroup
										invoked.PrmAccountingEntity				= AccountingEntity
										invoked.PrmClosePeriod					= PrmGeneralLedgerClosePeriod
										invoked.PrmJournalControl				= PrmJournalControl

										invoked.PrmSkipAttachRule				= true		
								else
									invoke CreateAutoReversePeriodTransaction GeneralLedgerTransaction in foreground
										invoked.PrmEnterpriseGroup				= FinanceEnterpriseGroup
										invoked.PrmAccountingEntity				= AccountingEntity
										invoked.PrmClosePeriod					= PrmGeneralLedgerClosePeriod
										invoked.PrmJournalControl				= PrmJournalControl

										invoked.PrmSkipAttachRule				= true		
									
						if  (FinanceEnterpriseGroup.CubeSetupExists
						and !PrmBypassCubeRefresh)
							invoke Refresh GeneralLedgerTotalCubeRel in background
#ifdef module ad
							if (FinanceEnterpriseGroup.UseAverageDailyBalance
							and DailyPeriodTotalCubeRel exists)
								invoke Refresh DailyPeriodTotalCubeRel in background
#endif







				DimensionCode  Set Rules
					Entrance Rules
						include PostActionSetLocalValues

					Exit Rules
						include PostActionUpdateGeneralLedgerTotal

				TransactionDate  Set Rules
					Entrance Rules
						LocalPostingDate			    = PostingDate
						if (PrmAccountingEntity.AverageDailyBalance)
							LocalTransactionDate		= TransactionDate
							LocalYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear

					Exit Rules
#ifdef module ad
						include AverageDailyBalanceProcess
#endif
				Instance Rules
					Status		= 9  	
					include PostActionAccumulateTotal
#ifdef module ap
					if (IsValidForExpense)
						if (instance count of GLTransactionDetailExistsRel > 50)
							invoke CreateProcurementExpense GLTransactionDetail in background
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
						else
							invoke CreateProcurementExpense GLTransactionDetail in foreground
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
						
					if ((System = "PO"
					and	GeneralLedgerEvent = "PO")
					and (System.EncumbranceOption.Track
					or   System.EncumbranceOption.TrackAndEdit)
					and (!SystemClosingControlRel.AutoPost))
						include ClearEncumbranceRecords
#endif
					if (AutoReverse
					and !MigStatus.MigratedHistorical)
						LocalAutoReverseCount	+= 1
#ifdef module am
					if (!FinanceEnterpriseGroup.CapitalizationUpgradeProgess.NotEnabled
					and FinanceCodeBlock.Project.Capital
					and	FinanceCodeBlock.Project.ProjectStatus.AllowCapitalization)
						if (instance count of GLTransactionDetailExistsRel > 50)
							invoke CreateAssetCapitalTransaction GLTransactionDetail in background
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
						else
							invoke CreateAssetCapitalTransaction GLTransactionDetail in foreground
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
#endif

		BatchPost is a Set Action
			restricted

			Parameters
				PrmSkipAttachRule			is a SkipAttachRule			
					default label is untranslatable:"SkipAttachRule"	
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmFiscalYear				is like GeneralLedgerCloseYear
					default label is "GlobalLedgerCloseYear"
				PrmGeneralLedgerCalendarPeriod	is a GeneralLedgerCalendarPeriod
					default label is "GlobalLedgerCalendarPeriod"
				PrmLedger					is a Ledger
					default label is "Ledger"
				PrmSystemCode				is a GeneralLedgerSystemCode
					default label is "SystemCode"
				PrmStatus					is Numeric 1
					default label is "Status"
		            States
		                Released				value is 1
		                Posted					value is 9
				PrmJournalPostingResult		is a JournalPostingResult
					default label is "JournalPostingResult"	
				PrmPostingTimeStamp			is TimeStamp
					default label is "PostingTimeStamp"
				PrmPostThroughDate is Date		
			
			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required



				PrmStatus
					default to PrmStatus.Released

			Local Fields	

				LocalChartSection				is a ChartSection

				LocalDimensionCode				is a DimensionCode
				LocalSystem						is a GeneralLedgerSystemCode
				LocalCurrencyCode				is a Currency
				LocalFinanceCodeBlock			is a FinanceCodeBlock
				LocalEntityYearPeriod			is a GeneralLedgerCalendarPeriod
				LocalPrimaryLedger				is a Ledger
				LocalLedger						is a Ledger
				LocalAsyncId					is a AsyncActionRequest
				CommitNow						is Boolean
				LocalUpdateBudget				is Boolean
				AutoReverseTransactionExist		is Boolean

				LocalPostingDate				is Date
				LocalTransactionDate			is Date
				LocalTimeStamp					is TimeStamp
				LocalClosePeriod				is a GeneralLedgerClosePeriod
				LocalUndistributedRetainEarnings	is like GeneralLedgerChartAccount
				LocalRetainedEarnings				is like GeneralLedgerChartAccount
				LocalAllowADBTransactionUpdate		is Boolean
				LocalYear							is a GeneralLedgerCalendarYear
				
			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity

				PrmGeneralLedgerCalendarPeriod

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    Status						= PrmStatus
				and    GeneralLedgerJournalControl.IsValidToPost
				and    GeneralLedgerJournalControl.ActPostDate entered
				and    GeneralLedgerJournalControl.update stamp <= PrmPostingTimeStamp 				
				and   ((PrmFiscalYear entered
				and     GeneralLedgerClosePeriod.GeneralLedgerCloseYear	= PrmFiscalYear)
				or 	   !PrmFiscalYear entered)
				and   ((PrmGeneralLedgerCalendarPeriod entered
				and     GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod)
				or 	   !PrmGeneralLedgerCalendarPeriod entered)
				and   ((PrmLedger entered
				and     FinanceCodeBlock.Ledger		= PrmLedger)
				or 	   !PrmLedger entered)
				and   ((PrmSystemCode entered
				and     System						= PrmSystemCode)
				or 	   !PrmSystemCode entered))


	

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerClosePeriod
				Status
				PrimaryLedger
				FinanceCodeBlock.Ledger
				System
				CurrencyCode
				GeneralLedgerCalendarPeriod
	        	FinanceCodeBlock.AccountingUnit
    	        FinanceCodeBlock.GeneralLedgerChartAccount
            	FinanceCodeBlock.Project
				DimensionCode
				PostingDate
				TransactionDate

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal
				FunctionalAmountDebitTotal
				ReportAmount1DebitTotal
				FunctionalAmountCreditTotal
				ReportAmount1CreditTotal
				BudgetFunctionalAmount
				BudgetAlternateAmount
				BudgetAlternateAmount2
				BudgetAlternateAmount3
				BudgetProjectAmount
				BudgetReportAmount1
				BudgetReportAmount2
				BudgetReportAmount3
				BudgetReportAmount4
				BudgetReportAmount5

				ADBFunctionalTotal

			Action Rules
				Empty Set Rules
					if (PrmStatus.Released)
						invoke ChangeStatusAndReleasedFlag GeneralLedgerJournalControl in background

							assign async action request id to LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.PrmAccountingEntity			= PrmAccountingEntity
				        	invoked.PrmJournalPostingResult		= PrmJournalPostingResult
				        	invoked.PrmGeneralLedgerCalendarPeriod = PrmGeneralLedgerCalendarPeriod
							invoked.PrmLedger					= PrmLedger
							invoked.PrmSystemCode				= PrmSystemCode
							invoked.PrmPostingTimeStamp			= PrmPostingTimeStamp
							invoked.PrmPostThroughDate			= PrmPostThroughDate		
						invoke UpdateAsyncId PrmAccountingEntity
							invoked.PrmAsyncId					= LocalAsyncId

				Set Rules
					Entrance Rules
						include VerifyTemplatesAreNotProcessing						
						initialize LocalUndistributedRetainEarnings
						LocalSystemAccount  = SystemAccount.UndistributedRetainedEarnings
						if (FinanceEnterpriseGroup.IncludeUREInAverageDailyBalance)
							constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
								"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
						LocalUndistributedRetainEarnings = first SystemAccountRel.GeneralLedgerChartAccount

						initialize LocalRetainedEarnings
						if (PrmFinanceEnterpriseGroup.AllBalanceSheetAccounts)
							LocalSystemAccount			= SystemAccount.RetainedEarnings
							if (PrmFinanceEnterpriseGroup.SystemSubAccount entered)
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount.Account + "-" + PrmFinanceEnterpriseGroup.SystemSubAccount
							else
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount
							constraint (LocalRetainedEarnings entered)
								"InvalidRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
					Exit Rules

				AccountingEntity Set Rules
					Entrance Rules
						initialize LocalAllowADBTransactionUpdate
						AutoReverseTransactionExist		= false
						LocalTimeStamp		= current timestamp
						if (!AccountingEntity.ProcessStatus.PostInProcess)
							invoke UpdateProcessStatus PrmAccountingEntity
								invoked.PrmProcessStatus			= 1

							CommitNow 			= true
						if (PrmAccountingEntity.AverageDailyBalance)
							LocalInstAccountingEntity			= PrmAccountingEntity						
							if (EntityWithADBProcessingRel exists)
								LocalAllowADBTransactionUpdate	= true

					Exit Rules
						invoke ChangeStatusAndReleasedFlag GeneralLedgerJournalControl in background

							assign async action request id to LocalAsyncId
							invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.PrmAccountingEntity				= PrmAccountingEntity
				        	invoked.PrmJournalPostingResult			= PrmJournalPostingResult
							invoked.PrmGeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod
							invoked.PrmLedger						= PrmLedger
							invoked.PrmSystemCode					= PrmSystemCode
							invoked.PrmPostingTimeStamp				= PrmPostingTimeStamp
							invoked.PrmPostThroughDate				= PrmPostThroughDate		
						

						if (PrmStatus.Released
						and AutoReverseTransactionExist)
							invoke CreateAutoReversePeriodTransaction GeneralLedgerTransaction in background
								run after LocalAsyncId
								assign async action request id to LocalAsyncId
								invoked.PrmEnterpriseGroup							= FinanceEnterpriseGroup
								invoked.PrmAccountingEntity							= AccountingEntity
								initialize invoked.PrmJournalControl
								invoked.PrmTimeStamp                                = current timestamp
								invoked.PrmSkipAttachRule							= true		
						invoke UpdateAsyncId PrmAccountingEntity
							invoked.PrmAsyncId					= LocalAsyncId

						CommitNow = true
							







				DimensionCode  Set Rules
					Entrance Rules
						include PostActionSetLocalValues

					Exit Rules
						include PostActionUpdateGeneralLedgerTotal

				TransactionDate  Set Rules
					Entrance Rules
						LocalPostingDate			    = PostingDate
						if (PrmAccountingEntity.AverageDailyBalance)
							LocalTransactionDate		= TransactionDate
							LocalYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear

					Exit Rules
#ifdef module ad
						include AverageDailyBalanceProcess
#endif
				Instance Rules
		
					if (CommitNow)
						commit transaction
						CommitNow = false
										
					if (PrmStatus.Released)
						if (AutoReverse
						and !MigStatus.MigratedHistorical)
							AutoReverseTransactionExist		= true
							Status		= 7  	
						else
							Status		= 9  	
#ifdef module ap
					if (IsValidForExpense)


						if (instance count of GLTransactionDetailExistsRel > 50)
							invoke CreateProcurementExpense GLTransactionDetail in background
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
						else
							invoke CreateProcurementExpense GLTransactionDetail in foreground
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
						
					if ((System = "PO"
					and	 GeneralLedgerEvent = "PO")
					and (System.EncumbranceOption.Track
					or   System.EncumbranceOption.TrackAndEdit)
					and (!SystemClosingControlRel.AutoPost))
						include ClearEncumbranceRecords
#endif
					include PostActionAccumulateTotal
#ifdef module am
					if (!FinanceEnterpriseGroup.CapitalizationUpgradeProgess.NotEnabled
					and FinanceCodeBlock.Project.Capital
					and	FinanceCodeBlock.Project.ProjectStatus.AllowCapitalization
					and Status = 9)
						if (instance count of GLTransactionDetailExistsRel > 50)
							invoke CreateAssetCapitalTransaction GLTransactionDetail in background
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
						else
							invoke CreateAssetCapitalTransaction GLTransactionDetail in foreground
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmRelatedJournalTransaction = reference to this instance
#endif

		RecalculateBTGT is a Set Action
			restricted
			Parameters
				PrmSkipAttachRule			is a SkipAttachRule
					default label is untranslatable:"SkipAttachRule"
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmGeneralLedgerClosePeriod	is a GeneralLedgerClosePeriod
					default label is "GlobalLedgerClosePeriod"
				PrmJournalControl			is a GeneralLedgerJournalControl
					default label is "JournalControl"
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    GeneralLedgerClosePeriod		= PrmGeneralLedgerClosePeriod
				and    GeneralLedgerJournalControl	= PrmJournalControl)
			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
				PrmGeneralLedgerClosePeriod
				PrmJournalControl
			Action Rules
				Instance Rules
					include AddToBudgetTotals

		RebuildTotalsFromPostedTransactions is a Set Action
			restricted

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"


				PrmGeneralLedgerCalendarPeriod	is a GeneralLedgerCalendarPeriod
					default label is "GlobalLedgerCalendarPeriod"












			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmGeneralLedgerCalendarPeriod

					required



			Local Fields	

				LocalChartSection				is a ChartSection

				LocalDimensionCode				is a DimensionCode
				LocalSystem						is a GeneralLedgerSystemCode
				LocalCurrencyCode				is a Currency
				LocalFinanceCodeBlock			is a FinanceCodeBlock
				LocalEntityYearPeriod			is a GeneralLedgerCalendarPeriod
				LocalPrimaryLedger				is a Ledger
				LocalLedger						is a Ledger
				LocalAsyncId					is a AsyncActionRequest
				CommitNow						is Boolean
				LocalUpdateBudget				is Boolean
				
			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity

				PrmGeneralLedgerCalendarPeriod

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   AccountingEntity				= PrmAccountingEntity
				and    Status.Posted





				and    GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod)











			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity

				GeneralLedgerClosePeriod
				Status
				PrimaryLedger
				FinanceCodeBlock.Ledger
				System
				CurrencyCode
				GeneralLedgerCalendarPeriod
	        	FinanceCodeBlock.AccountingUnit
    	        FinanceCodeBlock.GeneralLedgerChartAccount
            	FinanceCodeBlock.Project
				DimensionCode

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal
				FunctionalAmountDebitTotal
				ReportAmount1DebitTotal
				FunctionalAmountCreditTotal
				ReportAmount1CreditTotal
				BudgetFunctionalAmount
				BudgetAlternateAmount
				BudgetAlternateAmount2
				BudgetAlternateAmount3
				BudgetProjectAmount
				BudgetReportAmount1
				BudgetReportAmount2
				BudgetReportAmount3
				BudgetReportAmount4
				BudgetReportAmount5

				ADBFunctionalTotal

			Action Rules
				Empty Set Rules












				Set Rules

				AccountingEntity Set Rules
					Entrance Rules





					Exit Rules
























				DimensionCode  Set Rules
					Entrance Rules
						include PostActionSetLocalValues

					Exit Rules
						LocalUpdateBudget = false	
						include PostActionUpdateGeneralLedgerTotal

				Instance Rules
		



										


					include PostActionAccumulateTotal
					
		FixTransactionStatus is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				Status

			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    Status					= 3)

			Action Rules
				Instance Rules
					Status		= 1




















































































































































		CreateAutoReversePeriodTransaction is a Set Action
			restricted
			Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity		is a AccountingEntity
					default label is "AccountingEntity"
				PrmClosePeriod			is a GeneralLedgerClosePeriod
					default label is "ClosePeriod"
				PrmJournalControl			is a GeneralLedgerJournalControl
					default label is "JournalControl"
				PrmTimeStamp				is TimeStamp
					default label is "TimeStamp"
				PrmSkipAttachRule		is a SkipAttachRule
				
			Parameter Rules
				PrmEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmClosePeriod


			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	
				LocalAccountingEntityJournalView	is a GeneralLedgerJournalControl view
				LocalTransactionView				is a GeneralLedgerTransaction view
				LocalTransactionAmount				is an InternationalAmount 
				LocalFunctionalAmount				is an InternationalAmount 
				LocalAlternateAmount				is an InternationalAmount
				LocalAlternateAmount2				is an InternationalAmount
				LocalAlternateAmount3				is an InternationalAmount
				LocalProjectAmount					is an InternationalAmount
				LocalReportAmount1					is an InternationalAmount
				LocalReportAmount2					is an InternationalAmount
				LocalReportAmount3					is an InternationalAmount
				LocalReportAmount4					is an InternationalAmount
				LocalReportAmount5					is an InternationalAmount
				LocalUnitsAmount					is an UnitsAmount
				LocalEndDate						is Date
				LocalTransactionSequence			is like GeneralLedgerTransaction
				LocalJournalType					is Numeric 1
				LocalCurrencyCode					is like Currency
				LocalGeneralLedgerJournalControl	is a GeneralLedgerJournalControl

			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmClosePeriod
				PrmJournalControl

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and    AccountingEntity				= PrmAccountingEntity
				and	 ((PrmClosePeriod entered
				and    GeneralLedgerClosePeriod		= PrmClosePeriod)
				or    !PrmClosePeriod entered)
				and	   AutoReverse
				and   ((PrmTimeStamp entered
				and	    update stamp					< PrmTimeStamp)
				or      !PrmTimeStamp entered)
				and   ((PrmJournalControl entered
				and     GeneralLedgerJournalControl	= PrmJournalControl
				and		!Status.Memo)
				or 	   (!PrmJournalControl entered
				and		Status.ProcessAutoReverse)))




			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerClosePeriod
				Status
				GeneralLedgerJournalControl
				CurrencyCode
				GeneralLedgerTransaction

			Accumulators
				TransactionAmountDrTotal
				FunctionalAmountDrTotal
				AlternateAmountDrTotal
				AlternateAmount2DrTotal
				AlternateAmount3DrTotal
				ReportAmount1DrTotal
				ReportAmount2DrTotal
				ReportAmount3DrTotal
				ReportAmount4DrTotal
				ReportAmount5DrTotal
				TransactionAmountCrTotal
				FunctionalAmountCrTotal
				AlternateAmountCrTotal
				AlternateAmount2CrTotal
				AlternateAmount3CrTotal
				ReportAmount1CrTotal
				ReportAmount2CrTotal
				ReportAmount3CrTotal
				ReportAmount4CrTotal
				ReportAmount5CrTotal
				UnitsDrTotal
				UnitsCrTotal

			Action Rules
				Empty Set Rules

				Set Rules
				AccountingEntity Set Rules

					Exit Rules

				GeneralLedgerJournalControl Set Rules
					Entrance Rules
						initialize LocalTransactionSequence
						LocalGeneralLedgerJournalControl	= GeneralLedgerJournalControl

						if (GeneralLedgerJournalControl.AutoReverseDate entered)
							LocalEndDate		= GeneralLedgerJournalControl.AutoReverseDate
						else					
							if (!PrmEnterpriseGroup.AutoReverseWithinSamePeriod)
								LocalEndDate		= (AccountingEntityLedgerPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date + 1)
							else
								LocalEndDate		= GeneralLedgerJournalControl.PostingDate + 1
						if (GeneralLedgerJournalControl.JournalType.Normal)
							LocalJournalType				= GeneralLedgerJournalControl.JournalType.AutoReverseNormal
						else
							LocalJournalType				= GeneralLedgerJournalControl.JournalType.AutoReverseInterEntity
							TransientJournalControl			= LocalJournalControl
						invoke AutoCreate GeneralLedgerJournalControl
							assign result to LocalAccountingEntityJournalView
							fill in fields from GeneralLedgerJournalControl
								except invoked.UniqueJournalID							
							invoked.FinanceEnterpriseGroup		= PrmEnterpriseGroup
							invoked.AccountingEntity			= PrmAccountingEntity
							invoked.PostingDate					= LocalEndDate
							invoked.TransactionDate				= LocalEndDate
							invoked.Ledger						= GeneralLedgerJournalControl.Ledger
							invoked.System						= GeneralLedgerJournalControl.System
							invoked.AutoReverse					= false
							invoked.DefaultAutoReverse			= false
							invoked.AllowUnrelease				= false
							invoked.IsAutoReversed				= false
							invoked.JournalType					= LocalJournalType
							invoked.RelatedJournalTransaction	= reference to GeneralLedgerJournalControl
							invoked.GeneralLedgerJournalControl = TransientJournalControl
							initialize invoked.ActPostDate
							initialize invoked.NewManualJournalControlType
							initialize invoked.AutoReverseDate
				        	initialize invoked.FunctionalDebitAmount
				        	initialize invoked.AlternateDebitAmount
				        	initialize invoked.Alternate2DebitAmount
				        	initialize invoked.Alternate3DebitAmount
				        	initialize invoked.AutoReverseDebitAmount
					        initialize invoked.Rpt1DebitAmount
					        initialize invoked.Rpt2DebitAmount
					        initialize invoked.Rpt3DebitAmount
					        initialize invoked.Rpt4DebitAmount
					        initialize invoked.Rpt5DebitAmount
							initialize invoked.FunctionalCreditAmount
							initialize invoked.AlternateCreditAmount
							initialize invoked.Alternate2CreditAmount
							initialize invoked.Alternate3CreditAmount
							initialize invoked.AutoReverseCreditAmount
				    		initialize invoked.Rpt1CreditAmount
				    		initialize invoked.Rpt2CreditAmount
				    		initialize invoked.Rpt3CreditAmount
				    		initialize invoked.Rpt4CreditAmount
				    		initialize invoked.Rpt5CreditAmount
				    		initialize invoked.UnitsDebits
				    		initialize invoked.UnitsCredits
				    		initialize invoked.AutoReverseUnitsDebits
				    		initialize invoked.AutoReverseUnitsCredits
				    		initialize invoked.GainLossRunSequence
							initialize invoked.Status
							initialize invoked.Released
							initialize invoked.PostingOperator
							initialize invoked.GainLossReportingBasis
							initialize invoked.OriginatingInterfaceRun
							initialize invoked.IsAutoReversed
							initialize invoked.JournalizeGroupResult
							initialize invoked.JournalPostingResult

					Exit Rules
						invoke AutoRelease LocalAccountingEntityJournalView.GeneralLedgerJournalControl in foreground
							invoked.PrmFunctionalDrAmount	= FunctionalAmountDrTotal
							invoked.PrmFunctionalCrAmount	= FunctionalAmountCrTotal
							invoked.PrmAlternateDrAmount	= AlternateAmountDrTotal
							invoked.PrmAlternateCrAmount	= AlternateAmountCrTotal
							invoked.PrmAlternateDrAmount2	= AlternateAmount2DrTotal
							invoked.PrmAlternateCrAmount2	= AlternateAmount2CrTotal
							invoked.PrmAlternateDrAmount3	= AlternateAmount3DrTotal
							invoked.PrmAlternateCrAmount3	= AlternateAmount3CrTotal							
							invoked.PrmRpt1DrAmount			= ReportAmount1DrTotal
							invoked.PrmRpt1CrAmount			= ReportAmount1CrTotal
							invoked.PrmRpt2DrAmount			= ReportAmount2DrTotal
							invoked.PrmRpt2CrAmount			= ReportAmount2CrTotal
							invoked.PrmRpt3DrAmount			= ReportAmount3DrTotal
							invoked.PrmRpt3CrAmount			= ReportAmount3CrTotal
							invoked.PrmRpt4DrAmount			= ReportAmount4DrTotal
							invoked.PrmRpt4CrAmount			= ReportAmount4CrTotal
							invoked.PrmRpt5DrAmount			= ReportAmount5DrTotal
							invoked.PrmRpt5CrAmount			= ReportAmount5CrTotal
							invoked.PrmUnitsDrAmount		= UnitsDrTotal
							invoked.PrmUnitsCrAmount	    = UnitsCrTotal
				
						invoke UpdateIsAutoReversed LocalGeneralLedgerJournalControl

				CurrencyCode Set Rules
					Entrance Rules
						LocalCurrencyCode		= CurrencyCode

					Exit Rules
						if (AccountingEntity.BalanceTransactionCurrency)
							LocalClosePeriod			= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
							LocalJournalControl 		= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							LocalInstCurrencyCode		= LocalCurrencyCode
							invoke UpdateJournalCurrencyTotals CurrencyJournalControlRel in foreground
								invoked.PrmTransactionDrAmount	= TransactionAmountDrTotal
								invoked.PrmTransactionCrAmount	= TransactionAmountCrTotal
								invoked.PrmFunctionalDrAmount	= FunctionalAmountDrTotal
								invoked.PrmFunctionalCrAmount	= FunctionalAmountCrTotal
								invoked.PrmAlternateDrAmount	= AlternateAmountDrTotal
								invoked.PrmAlternateCrAmount	= AlternateAmountCrTotal
								invoked.PrmAlternateDrAmount2	= AlternateAmount2DrTotal
								invoked.PrmAlternateCrAmount2	= AlternateAmount2CrTotal
								invoked.PrmAlternateDrAmount3	= AlternateAmount3DrTotal
								invoked.PrmAlternateCrAmount3	= AlternateAmount3CrTotal							
								invoked.PrmRpt1DrAmount			= ReportAmount1DrTotal
								invoked.PrmRpt1CrAmount			= ReportAmount1CrTotal
								invoked.PrmRpt2DrAmount			= ReportAmount2DrTotal
								invoked.PrmRpt2CrAmount			= ReportAmount2CrTotal
								invoked.PrmRpt3DrAmount			= ReportAmount3DrTotal
								invoked.PrmRpt3CrAmount			= ReportAmount3CrTotal
								invoked.PrmRpt4DrAmount			= ReportAmount4DrTotal
								invoked.PrmRpt4CrAmount			= ReportAmount4CrTotal
								invoked.PrmRpt5DrAmount			= ReportAmount5DrTotal
								invoked.PrmRpt5CrAmount			= ReportAmount5CrTotal

				Instance Rules
					LocalTransactionAmount		= TransactionAmount * -1
					LocalFunctionalAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
					LocalAlternateAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount  * -1
					LocalAlternateAmount2		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
					LocalAlternateAmount3		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
					LocalProjectAmount			= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
					LocalReportAmount1			= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
					LocalReportAmount2			= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
					LocalReportAmount3			= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
					LocalReportAmount4			= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
					LocalReportAmount5			= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
					LocalUnitsAmount			= UnitsAmount * -1
					LocalTransactionSequence	+= 1
					invoke CreateReleasedSystemTransactionsNoRules Released GeneralLedgerTransaction
						assign result to LocalTransactionView
						fill in fields from this instance
						invoked.FinanceEnterpriseGroup			= PrmEnterpriseGroup
						invoked.AccountingEntity				= PrmAccountingEntity
						invoked.GeneralLedgerClosePeriod		= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
						invoked.GeneralLedgerJournalControl		= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
						invoked.GeneralLedgerTransaction		= LocalTransactionSequence
						invoked.AutoReverse						= false
						invoked.ReportCurrencyAmount			= ReportCurrencyAmount
						invoked.FinanceCodeBlock				= FinanceCodeBlock
						invoked.DimensionCode					= DimensionCode
						invoked.CurrencyCode					= CurrencyCode
						invoked.GeneralLedgerEvent				= GeneralLedgerEvent
						invoked.Description						= Description
						invoked.PostingDate						= LocalEndDate
						invoked.TransactionDate					= LocalEndDate
						invoked.System							= System
						invoked.TransactionAmount												= LocalTransactionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalFunctionalAmount
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalAlternateAmount
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalAlternateAmount2
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalAlternateAmount3
						invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalProjectAmount
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalReportAmount1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalReportAmount2
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalReportAmount3
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalReportAmount4
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalReportAmount5
						invoked.ReportCurrencyAmount.KeepRateOnly		= true
						invoked.UnitsAmount								= LocalUnitsAmount
						invoked.PrimaryLedger							= PrimaryLedger
						invoked.GeneralLedgerCalendarPeriod		= LocalAccountingEntityJournalView.GeneralLedgerCalendarPeriod
			    		initialize invoked.GainLossRunSequence
						
					if (LocalTransactionAmount	> 0)
						TransactionAmountDrTotal		+= LocalTransactionAmount
					else
						TransactionAmountCrTotal		+= LocalTransactionAmount
					if (LocalFunctionalAmount	> 0)
						FunctionalAmountDrTotal			+= LocalFunctionalAmount
					else
						FunctionalAmountCrTotal			+= LocalFunctionalAmount
					if (LocalAlternateAmount	> 0)
						AlternateAmountDrTotal			+= LocalAlternateAmount
					else
						AlternateAmountCrTotal			+= LocalAlternateAmount
					if (LocalAlternateAmount2	> 0)
						AlternateAmount2DrTotal			+= LocalAlternateAmount2
					else
						AlternateAmount2CrTotal			+= LocalAlternateAmount2
					if (LocalAlternateAmount3	> 0)
						AlternateAmount3DrTotal			+= LocalAlternateAmount3
					else
						AlternateAmount3CrTotal			+= LocalAlternateAmount3								
					if (LocalReportAmount1	> 0)
						ReportAmount1DrTotal			+= LocalReportAmount1
					else
						ReportAmount1CrTotal			+= LocalReportAmount1
					if (LocalReportAmount2	> 0)
						ReportAmount2DrTotal			+= LocalReportAmount2
					else
						ReportAmount2CrTotal			+= LocalReportAmount2
					if (LocalReportAmount3	> 0)
						ReportAmount3DrTotal			+= LocalReportAmount3
					else
						ReportAmount3CrTotal			+= LocalReportAmount3
					if (LocalReportAmount4	> 0)
						ReportAmount4DrTotal			+= LocalReportAmount4
					else
						ReportAmount4CrTotal			+= LocalReportAmount4
					if (LocalReportAmount5	> 0)
						ReportAmount5DrTotal			+= LocalReportAmount5
					else
						ReportAmount5CrTotal			+= LocalReportAmount5
					if (LocalUnitsAmount > 0)
						UnitsDrTotal					+= LocalUnitsAmount
					else
						UnitsCrTotal					+= LocalUnitsAmount

					LocalRelatedJournalTransaction		= reference to this instance
					if (Status.ProcessAutoReverse)
						Status		= 9  	

					if (instance count of GLTransactionDetailRecordRel > 50)
						invoke CreateDetailsForJournalTransaction GLTransactionDetail in background
							invoked.PrmRelatedJournalTransaction	= LocalRelatedJournalTransaction
							invoked.PrmDate							= LocalEndDate
							invoked.PrmNewJournalTransaction		= reference to LocalTransactionView.GeneralLedgerTransaction
							invoked.PrmJournalizeGroup				= "GL"+AccountingEntity+LocalAccountingEntityJournalView.GeneralLedgerClosePeriod+LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							invoked.PrmAutoReverse					= false
							invoked.ReverseAmounts					= true

					else
						invoke CreateDetailsForJournalTransaction GLTransactionDetail in foreground
							invoked.PrmRelatedJournalTransaction	= LocalRelatedJournalTransaction
							invoked.PrmDate							= LocalEndDate
							invoked.PrmNewJournalTransaction		= reference to LocalTransactionView.GeneralLedgerTransaction
							invoked.PrmJournalizeGroup				= "GL"+AccountingEntity+LocalAccountingEntityJournalView.GeneralLedgerClosePeriod+LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							invoked.PrmAutoReverse					= false
							invoked.ReverseAmounts					= true

		CopyTransaction is an Instance Action
			valid when (UnreleasedJournalControl)
			run in foreground
			completion message is "CopyComplete"
			Entrance Rules
			Action Rules
				invoke Create Unreleased GeneralLedgerTransaction
					fill in fields from this instance
					initialize invoked.GeneralLedgerTransaction
					invoked.ReportCurrencyAmount.KeepRateOnly	= true

		DeleteTransaction is a Delete Action
			restricted
			Entrance Rules
				include ColumnarDeleteRules

		DeleteData is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmLedger					is like Ledger
					default label is "Ledger"
				PrmAccountingEntity			is like AccountingEntity
					default label is "AccountingEntity"
				PrmPrimaryLedger			is like Ledger
					default label is "Ledger"
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   AccountingEntity 			= PrmAccountingEntity				
				and	   FinanceCodeBlock.Ledger		= PrmLedger
				and   ((PrmPrimaryLedger entered
				and    	PrimaryLedger		=  PrmPrimaryLedger)
				or	  (!PrmPrimaryLedger entered)))

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity


			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				FinanceCodeBlock.Ledger
				PrimaryLedger

			Action Rules
				Empty Set Rules
				Instance Rules
					invoke Delete GainLossTransactionAmount 
					invoke DeleteTransaction 

		CopyJournalTransaction is a Set Action
			restricted
			completion message is "CopyComplete,JournalCreate"
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmClosePeriod				is a GeneralLedgerClosePeriod
					default label is "ClosePeriod"
				PrmJournalControl			is a GeneralLedgerJournalControl
					default label is "JournalControl"

				NewPostDate					is Date
				NewTransactionDate			is Date
				NewUniqueJournalID			is a UniqueJournalID	

				AutoReverseOption			is Numeric 1 
					States
						OriginalJournal		value is 0 
						NonReversingLines	value is 1 
						ReversingLines		value is 2 
				ReverseAmounts 				is Boolean
				RetainCurrencyAmounts		is Boolean
				NewReference				is a Reference
				NewDescription				is like Description
				NewLedger					is a Ledger
				CopyJournalComments			is Boolean
				CopyTransactionComments		is Boolean
				AutoReverseTransactionsOnly is Boolean
				CopyAttachments				is Boolean

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Local Fields	
				LocalJournalView				is a GeneralLedgerJournalControl view
				LocalJournalTransactionView		is a GeneralLedgerTransaction view
		    	LocalSystem						is a GeneralLedgerSystemCode

			Set Is
				PrmEnterpriseGroup
				PrmAccountingEntity
				PrmClosePeriod
				PrmJournalControl

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and    AccountingEntity				= PrmAccountingEntity
				and	   GeneralLedgerClosePeriod		= PrmClosePeriod
				and    GeneralLedgerJournalControl	= PrmJournalControl
				and   ((AutoReverseTransactionsOnly
				and     AutoReverse)
				or     (!AutoReverseTransactionsOnly))
				and	  !SystemTransactionEvents
				and   !FinanceCodeBlock.Ledger.EliminationLedger)

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerClosePeriod
				GeneralLedgerJournalControl
				GeneralLedgerTransaction

			Action Rules
				Empty Set Rules

				Set Rules
				AccountingEntity Set Rules

					Exit Rules

				GeneralLedgerJournalControl Set Rules
					Entrance Rules


						LocalSystem				= System
						if (!System.RecordType.User)
							if (!System		= "GL")
								LocalSystem			= "GL"
						invoke Create CopyInProcess GeneralLedgerJournalControl
							assign result to LocalJournalView
							fill in fields from GeneralLedgerJournalControl
							invoked.PostingDate					= NewPostDate
							if (NewTransactionDate entered)
								invoked.TransactionDate			= NewTransactionDate
							if (NewReference entered)
								invoked.Reference				= NewReference
							if (NewDescription entered)
								invoked.Description				= NewDescription
							if (NewLedger entered)
								invoked.Ledger					= NewLedger
								invoked.PrimaryLedger			= NewLedger	
							invoked.System						= LocalSystem
							invoked.UniqueJournalID				= NewUniqueJournalID
							invoked.AllowUnrelease				= true
							if (this instance.GeneralLedgerJournalControl.JournalType.ManualEncumbrance)
								invoked.NewManualJournalControlType		= GeneralLedgerJournalControl.JournalType
								initialize invoked.NewJournalControlType
							else
								initialize invoked.NewManualJournalControlType
								invoked.NewJournalControlType           = GeneralLedgerJournalControl.JournalType
							initialize invoked.Status
							initialize invoked.Released
							initialize invoked.ReleaseDate
							initialize invoked.ActPostDate
							initialize invoked.ReleaseOperator
							initialize invoked.PostingOperator
							initialize invoked.FunctionalDebitAmount
							initialize invoked.FunctionalCreditAmount
							initialize invoked.AlternateDebitAmount
							initialize invoked.AlternateCreditAmount
							initialize invoked.Alternate2DebitAmount
							initialize invoked.Alternate2CreditAmount
							initialize invoked.Alternate3DebitAmount
							initialize invoked.Alternate3CreditAmount					
							initialize invoked.AutoReverseDebitAmount
							initialize invoked.AutoReverseCreditAmount
							initialize invoked.Rpt1DebitAmount
							initialize invoked.Rpt1CreditAmount
							initialize invoked.Rpt2DebitAmount
							initialize invoked.Rpt2CreditAmount
							initialize invoked.Rpt3DebitAmount
							initialize invoked.Rpt3CreditAmount
							initialize invoked.Rpt4DebitAmount
							initialize invoked.Rpt4CreditAmount
							initialize invoked.Rpt5DebitAmount
							initialize invoked.Rpt5CreditAmount
							initialize invoked.UnitsDebits
							initialize invoked.UnitsCredits
							initialize invoked.AutoReverseUnitsDebits
							initialize invoked.AutoReverseUnitsCredits
							initialize invoked.GainLossReportingBasis
							initialize invoked.GainLossRunSequence
							initialize invoked.RelatedJournalTransaction
							initialize invoked.OriginatingInterfaceRun
							initialize invoked.IsAutoReversed
							initialize invoked.JournalizeGroupResult
							initialize invoked.JournalPostingResult
							initialize invoked.PendingBudgetEdit
							initialize invoked.AutoReverseDate
							initialize invoked.ApprovalLevel
							initialize invoked.Approver
							initialize invoked.ApproverTeam
							if (AutoReverseOption.NonReversingLines)
								initialize invoked.DefaultAutoReverse
							if (!RetainCurrencyAmounts)
								initialize invoked.JournalCurrencyRate							
						invoke Create GeneralLedgerJournalCopyLog
							fill in fields from PrmJournalControl
							invoked.CopiedJournalID 			= LocalJournalView.UniqueID 
							invoked.NewPostDate					= NewPostDate
							invoked.NewTransactionDate			= NewTransactionDate
							invoked.NewUniqueJournalID			= NewUniqueJournalID	
							invoked.AutoReverseOption			= AutoReverseOption		
							invoked.ReverseAmounts				= ReverseAmounts
							invoked.RetainCurrencyAmounts		= RetainCurrencyAmounts
							invoked.NewReference				= NewReference
							invoked.NewDescription				= NewDescription
							invoked.CopyJournalComments			= CopyJournalComments
							invoked.CopyTransactionComments		= CopyTransactionComments
							invoked.AutoReverseTransactionsOnly = AutoReverseTransactionsOnly							
						if (CopyJournalComments)
							for each GeneralLedgerJournalCommentRel
								invoke Create GeneralLedgerJournalComment
									fill in fields from each
									invoked.GeneralLedgerClosePeriod		= LocalJournalView.GeneralLedgerClosePeriod
									invoked.GeneralLedgerJournalControl		= LocalJournalView.GeneralLedgerJournalControl
									invoked.Title							= each.Title
						if (CopyAttachments)
							for each GeneralLedgerJournalDocumentRel
								invoke Create GeneralLedgerJournalDocument
									fill in fields from each
									invoked.GeneralLedgerClosePeriod		= LocalJournalView.GeneralLedgerClosePeriod
									invoked.GeneralLedgerJournalControl		= LocalJournalView.GeneralLedgerJournalControl
									invoked.DocumentId						= each.DocumentId
									invoked.Description						= each.Description
									invoked.DocumentURL						= each.DocumentURL
									invoked.Attachment						= each.Attachment
					Exit Rules
						invoke UpdateJournalControlStatus LocalJournalView.GeneralLedgerJournalControl
							initialize invoked.PrmStatus		 

				Instance Rules
					if (TransactionAmount entered
					or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
					or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered
					or	UnitsAmount entered)

                        invoke CreateForCopyJournalTrans Unreleased GeneralLedgerTransaction
							assign result to LocalJournalTransactionView
							fill in fields from this instance
							invoked.GeneralLedgerClosePeriod		= LocalJournalView.GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl		= LocalJournalView.GeneralLedgerJournalControl

							invoked.PostingDate						= LocalJournalView.PostingDate
							invoked.TransactionDate					= LocalJournalView.TransactionDate


				    		invoked.DimensionCode				    = FinanceCodeBlock.DimensionCode
				    		initialize invoked.GainLossRunSequence
							if (ReverseAmounts)
								invoked.TransactionAmount			= (TransactionAmount * -1)
								invoked.UnitsAmount					= (UnitsAmount * -1)
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1)
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1)
							else
								invoked.TransactionAmount			= TransactionAmount
								invoked.ReportCurrencyAmount		= ReportCurrencyAmount
							if  (TransactionAmount entered
							and !RetainCurrencyAmounts)
								initialize invoked.ReportCurrencyAmount
							else
								if (RetainCurrencyAmounts  
								and TransactionAmount entered)
									invoked.ReportCurrencyAmount.KeepRateAndAmount = true
								else
									if (TransactionAmount entered)	
										invoked.ReportCurrencyAmount.KeepRateOnly	= true
									else
										invoked.ReportCurrencyAmount.KeepRateOnly	= false
							if (AutoReverseOption.NonReversingLines)
								invoked.AutoReverse					= false
							else
								if (AutoReverseOption.ReversingLines)
									invoked.AutoReverse				= true
							initialize invoked.Status
							invoked.GeneralLedgerCalendarPeriod		= LocalJournalView.GeneralLedgerCalendarPeriod
							if (NewLedger entered)
								invoked.PrimaryLedger				= NewLedger	
								invoked.FinanceCodeBlock.Ledger		= NewLedger
							else	
								invoked.PrimaryLedger				= LocalJournalView.PrimaryLedger
						if (CopyTransactionComments)
							for each GLTransactionCommentRel
								invoke Create GLTransactionComment
									fill in fields from each
									invoked.GeneralLedgerClosePeriod		= LocalJournalView.GeneralLedgerClosePeriod
									invoked.GeneralLedgerJournalControl		= LocalJournalView.GeneralLedgerJournalControl
									invoked.GeneralLedgerTransaction		= LocalJournalTransactionView.GeneralLedgerTransaction
									invoked.Title							= each.Title

#ifdef module reconciliation		
		LoadGLTransIntoReconciliation is a Set Action
			restricted
			Parameters
				PrmReconciliationManagementGroup	is a ReconciliationManagementGroup
				PrmReconciliationAccountStructure	is a ReconciliationAccountStructure
				PrmReconciliationAccount			is a ReconciliationAccount
				PrmCloseConfiguration				is a GeneralLedgerCloseConfiguration
				PrmGeneralLedgerClosePeriod			is a GeneralLedgerClosePeriod
					default label is "GlobalLedgerClosePeriod"
				PrmTransactionLevel					is Numeric 1
					States
						GeneralLedgerTransaction		value is 1
							default label is "GlobalLedgerTransaction"
						GeneralLedgerTransactionDetail	value is 2
							default label is "GlobalLedgerTransactionDetail"
						
			Parameter Rules
				PrmReconciliationManagementGroup	required
				PrmReconciliationAccountStructure	required
				PrmReconciliationAccount			required
				PrmCloseConfiguration				required
				PrmGeneralLedgerClosePeriod			required
					
			Instance Selection
				where (FinanceEnterpriseGroup = PrmReconciliationManagementGroup
				and    AccountingEntity = PrmReconciliationAccount.ReconciliationCodeBlock.AccountingEntity
				and    GeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod


				and    FinanceCodeBlock.GeneralLedgerChartAccount = PrmReconciliationAccount.ReconciliationCodeBlock.GeneralLedgerChartAccount
				and   (PrmReconciliationAccountStructure.ReconciliationLevel.Type.AccountingEntity
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.AccountingUnit
				and    FinanceCodeBlock.AccountingUnit = PrmReconciliationAccount.ReconciliationCodeBlock.AccountingUnit)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Project
				and    FinanceCodeBlock.Project = PrmReconciliationAccount.ReconciliationCodeBlock.Project)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension1
				and	   FinanceCodeBlock.FinanceDimension1 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension1)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension2
				and	   FinanceCodeBlock.FinanceDimension2 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension2)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension3
				and	   FinanceCodeBlock.FinanceDimension3 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension3)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension4
				and	   FinanceCodeBlock.FinanceDimension4 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension4)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension5
				and	   FinanceCodeBlock.FinanceDimension5 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension5)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension6
				and	   FinanceCodeBlock.FinanceDimension6 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension6)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension7
				and	   FinanceCodeBlock.FinanceDimension7 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension7)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension8
				and	   FinanceCodeBlock.FinanceDimension8 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension8)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension9
				and	   FinanceCodeBlock.FinanceDimension9 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension9)
				or	  (PrmReconciliationAccountStructure.ReconciliationLevel.Type.Dimension10
				and	   FinanceCodeBlock.FinanceDimension10 = PrmReconciliationAccount.ReconciliationCodeBlock.FinanceDimension10))
				and   (Status.Released
				or	   Status.Posted))

			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerClosePeriod
				Status
				GeneralLedgerJournalControl
				CurrencyCode
				GeneralLedgerTransaction

			Action Rules
				Instance Rules
					LocalReconAccountStructure = PrmReconciliationAccountStructure
					LocalReconAccount = PrmReconciliationAccount
					
					if (PrmTransactionLevel.GeneralLedgerTransaction)
						LocalOriginatingTransaction = reference to this instance
						
						if (!TransactionReconDetailRel exists)
							invoke Create TransactionReconDetail
								fill in fields from this instance 
								invoked.ReconciliationManagementGroup		= FinanceEnterpriseGroup
								invoked.ReconciliationAccountStructure		= PrmReconciliationAccountStructure
								invoked.ReconciliationAccount				= PrmReconciliationAccount
								invoked.PostingPeriod						= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
								invoked.ReconTransactionType				= 1 
								invoked.TransactionNumber					= GeneralLedgerJournalControl.UniqueJournalID
								invoked.TransactionDate						= TransactionDate
								invoked.PostingDate							= PostingDate
								invoked.CurrencyTable						= ReportCurrencyAmount.CurrencyTable
								invoked.Currency							= CurrencyCode
								invoked.SignedAmount.ExchangeDate			= TransactionDate	
								invoked.SignedAmount.CurrencyAmount			= TransactionAmount
								invoked.SignedAmount.FunctionalAmount		= ReportCurrencyAmount.FunctionalAmount
								invoked.SignedAmount.AlternateAmount		= ReportCurrencyAmount.AlternateAmount
								invoked.SignedAmount.AlternateAmount2		= ReportCurrencyAmount.AlternateAmount2
								invoked.SignedAmount.AlternateAmount3		= ReportCurrencyAmount.AlternateAmount3
								invoked.SignedAmount.ProjectAmount			= ReportCurrencyAmount.ProjectAmount
								invoked.SignedAmount.ReportAmount1			= ReportCurrencyAmount.ReportAmount1
								invoked.SignedAmount.ReportAmount2			= ReportCurrencyAmount.ReportAmount2
								invoked.SignedAmount.ReportAmount3			= ReportCurrencyAmount.ReportAmount3
								invoked.SignedAmount.ReportAmount4			= ReportCurrencyAmount.ReportAmount4
								invoked.SignedAmount.ReportAmount5			= ReportCurrencyAmount.ReportAmount5
								invoked.SignedAmount.KeepRateAndAmount		= true
								invoked.TransactionAmount.ExchangeDate		= TransactionDate
								invoked.TransactionAmount.KeepRateAndAmount	= true
								if (TransactionAmount > 0)
									invoked.TransactionAmount.CurrencyAmount	= TransactionAmount
									invoked.TransactionAmount.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount
									invoked.TransactionAmount.AlternateAmount	= ReportCurrencyAmount.AlternateAmount
									invoked.TransactionAmount.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2
									invoked.TransactionAmount.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3
									invoked.TransactionAmount.ProjectAmount		= ReportCurrencyAmount.ProjectAmount
									invoked.TransactionAmount.ReportAmount1		= ReportCurrencyAmount.ReportAmount1
									invoked.TransactionAmount.ReportAmount2		= ReportCurrencyAmount.ReportAmount2
									invoked.TransactionAmount.ReportAmount3		= ReportCurrencyAmount.ReportAmount3
									invoked.TransactionAmount.ReportAmount4		= ReportCurrencyAmount.ReportAmount4
									invoked.TransactionAmount.ReportAmount5		= ReportCurrencyAmount.ReportAmount5
									invoked.AmountType							= 1 
								else
									invoked.TransactionAmount.CurrencyAmount	= (TransactionAmount * -1)
									invoked.TransactionAmount.FunctionalAmount	= (ReportCurrencyAmount.FunctionalAmount * -1)
									invoked.TransactionAmount.AlternateAmount	= (ReportCurrencyAmount.AlternateAmount * -1)
									invoked.TransactionAmount.AlternateAmount2	= (ReportCurrencyAmount.AlternateAmount2 * -1)
									invoked.TransactionAmount.AlternateAmount3	= (ReportCurrencyAmount.AlternateAmount3 * -1)
									invoked.TransactionAmount.ProjectAmount		= (ReportCurrencyAmount.ProjectAmount * -1)
									invoked.TransactionAmount.ReportAmount1		= (ReportCurrencyAmount.ReportAmount1 * -1)
									invoked.TransactionAmount.ReportAmount2		= (ReportCurrencyAmount.ReportAmount2 * -1)
									invoked.TransactionAmount.ReportAmount3		= (ReportCurrencyAmount.ReportAmount3 * -1)
									invoked.TransactionAmount.ReportAmount4		= (ReportCurrencyAmount.ReportAmount4 * -1)
									invoked.TransactionAmount.ReportAmount5		= (ReportCurrencyAmount.ReportAmount5 * -1)
									invoked.AmountType							= 2 
								invoked.UnitsAmount							= UnitsAmount
								invoked.SystemCode							= System
								invoked.SourceCode							= GeneralLedgerEvent
								invoked.Reference							= Reference
								invoked.Description							= Description
								invoked.OriginatingGLTransaction			= reference to this instance
					else
						for each GLTransactionDetailExistsRel
							LocalOriginatingTransaction = reference to each.GLTransactionDetail
							
							if (!TransactionReconDetailRel exists)
								invoke Create TransactionReconDetail
									fill in fields from each 
									invoked.ReconciliationManagementGroup		= FinanceEnterpriseGroup
									invoked.ReconciliationAccountStructure		= PrmReconciliationAccountStructure
									invoked.ReconciliationAccount				= PrmReconciliationAccount
									invoked.PostingPeriod						= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
									invoked.ReconTransactionType				= 1 
									invoked.TransactionNumber					= each.DocumentNumber
									invoked.TransactionDate						= each.TransactionDate
									invoked.PostingDate							= each.PostingDate
									invoked.CurrencyTable						= each.ReportCurrencyAmount.CurrencyTable
									invoked.Currency							= each.CurrencyCode
									invoked.SignedAmount.ExchangeDate			= each.TransactionDate
									invoked.SignedAmount.CurrencyAmount			= each.TransactionAmount
									invoked.SignedAmount.FunctionalAmount		= each.ReportCurrencyAmount.FunctionalAmount
									invoked.SignedAmount.AlternateAmount		= each.ReportCurrencyAmount.AlternateAmount
									invoked.SignedAmount.AlternateAmount2		= each.ReportCurrencyAmount.AlternateAmount2
									invoked.SignedAmount.AlternateAmount3		= each.ReportCurrencyAmount.AlternateAmount3
									invoked.SignedAmount.ProjectAmount			= each.ReportCurrencyAmount.ProjectAmount
									invoked.SignedAmount.ReportAmount1			= each.ReportCurrencyAmount.ReportAmount1
									invoked.SignedAmount.ReportAmount2			= each.ReportCurrencyAmount.ReportAmount2
									invoked.SignedAmount.ReportAmount3			= each.ReportCurrencyAmount.ReportAmount3
									invoked.SignedAmount.ReportAmount4			= each.ReportCurrencyAmount.ReportAmount4
									invoked.SignedAmount.ReportAmount5			= each.ReportCurrencyAmount.ReportAmount5
									invoked.SignedAmount.KeepRateAndAmount		= true
									invoked.TransactionAmount.ExchangeDate		= each.TransactionDate
									invoked.TransactionAmount.KeepRateAndAmount	= true
									if (each.TransactionAmount > 0)
										invoked.TransactionAmount.CurrencyAmount	= each.TransactionAmount
										invoked.TransactionAmount.FunctionalAmount	= each.ReportCurrencyAmount.FunctionalAmount
										invoked.TransactionAmount.AlternateAmount	= each.ReportCurrencyAmount.AlternateAmount
										invoked.TransactionAmount.AlternateAmount2	= each.ReportCurrencyAmount.AlternateAmount2
										invoked.TransactionAmount.AlternateAmount3	= each.ReportCurrencyAmount.AlternateAmount3
										invoked.TransactionAmount.ProjectAmount		= each.ReportCurrencyAmount.ProjectAmount
										invoked.TransactionAmount.ReportAmount1		= each.ReportCurrencyAmount.ReportAmount1
										invoked.TransactionAmount.ReportAmount2		= each.ReportCurrencyAmount.ReportAmount2
										invoked.TransactionAmount.ReportAmount3		= each.ReportCurrencyAmount.ReportAmount3
										invoked.TransactionAmount.ReportAmount4		= each.ReportCurrencyAmount.ReportAmount4
										invoked.TransactionAmount.ReportAmount5		= each.ReportCurrencyAmount.ReportAmount5
										invoked.AmountType							= 1 
									else
										invoked.TransactionAmount.CurrencyAmount	= (each.TransactionAmount * -1)
										invoked.TransactionAmount.FunctionalAmount	= (each.ReportCurrencyAmount.FunctionalAmount * -1)
										invoked.TransactionAmount.AlternateAmount	= (each.ReportCurrencyAmount.AlternateAmount * -1)
										invoked.TransactionAmount.AlternateAmount2	= (each.ReportCurrencyAmount.AlternateAmount2 * -1)
										invoked.TransactionAmount.AlternateAmount3	= (each.ReportCurrencyAmount.AlternateAmount3 * -1)
										invoked.TransactionAmount.ProjectAmount		= (each.ReportCurrencyAmount.ProjectAmount * -1)
										invoked.TransactionAmount.ReportAmount1		= (each.ReportCurrencyAmount.ReportAmount1 * -1)
										invoked.TransactionAmount.ReportAmount2		= (each.ReportCurrencyAmount.ReportAmount2 * -1)
										invoked.TransactionAmount.ReportAmount3		= (each.ReportCurrencyAmount.ReportAmount3 * -1)
										invoked.TransactionAmount.ReportAmount4		= (each.ReportCurrencyAmount.ReportAmount4 * -1)
										invoked.TransactionAmount.ReportAmount5		= (each.ReportCurrencyAmount.ReportAmount5 * -1)
										invoked.AmountType							= 2 
									invoked.UnitsAmount							= each.UnitsAmount
									invoked.SystemCode							= each.System
									invoked.SourceCode							= each.GeneralLedgerEvent
									invoked.Reference							= each.Reference
									invoked.Description							= each.Description
									invoked.OriginatingGLTransaction			= reference to each.GLTransactionDetail
#endif

		FixDimensionCode is a Set Action
			restricted
		    Parameters
		        PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
		            default label is "FinanceEnterpriseGroup"
				PrmBusinessClassGroup 	  is a GeneralLedgerTransaction group
					default label is "CustomGroup"
		    Parameter Rules
		        PrmFinanceEnterpriseGroup
		            required
		        PrmBusinessClassGroup
		        	required
		    Instance Selection
		        where (GeneralLedgerTransaction within PrmBusinessClassGroup)
		    Sort Order
		        FinanceEnterpriseGroup
		        AccountingEntity
		        GeneralLedgerClosePeriod
		        Status
		    Action Rules
		        Instance Rules
		            if (DimensionCode != FinanceCodeBlock.DimensionCode)
		                DimensionCode = FinanceCodeBlock.DimensionCode
		
		UpdateDimensionCode is an Instance Action
		    restricted
		    Action Rules
		        if (DimensionCode != FinanceCodeBlock.DimensionCode)
		            DimensionCode = FinanceCodeBlock.DimensionCode

#ifdef module ad
		GetPostedJournalsBeforeADBEnabled is a Set Action
			restricted
		    Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmBasisYear				is like GeneralLedgerCloseYear
				PrmIncludeFutureYears		is Boolean

		    Parameter Rules
				PrmFinanceEnterpriseGroup
			 		required
				PrmAccountingEntity
					required
				PrmBasisYear
					required

		    Local Fields
				LocalFinanceCodeBlock			is a FinanceCodeBlock
				LocalPostingDate				is Date
				LocalTransactionDate			is Date
				LocalTimeStamp					is TimeStamp
				ADBFunctionalTotal              is an InternationalAmount
				TransactionAmountTotal			is an InternationalAmount
				FunctionalAmountTotal			is an InternationalAmount
				AlternateAmountTotal			is an InternationalAmount
				AlternateAmount2Total			is an InternationalAmount
				AlternateAmount3Total			is an InternationalAmount
				ReportAmount1Total				is an InternationalAmount	
				ReportAmount2Total				is an InternationalAmount
				ReportAmount3Total				is an InternationalAmount
				ReportAmount4Total				is an InternationalAmount
				ReportAmount5Total				is an InternationalAmount
				LocalUndistributedRetainEarnings	is like GeneralLedgerChartAccount
				LocalRetainedEarnings				is like GeneralLedgerChartAccount
				LocalYear							is a GeneralLedgerCalendarYear
				LocalCurrencyCode					is like Currency

		    Instance Selection
				where (FinanceEnterpriseGroup      = PrmFinanceEnterpriseGroup
				and	   AccountingEntity		       = PrmAccountingEntity
                and    Status.Posted)

		    Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				Status

				
		    Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						LocalTimeStamp		= current timestamp
						initialize LocalUndistributedRetainEarnings
						if (FinanceEnterpriseGroup.IncludeUREInAverageDailyBalance)
							LocalSystemAccount  = SystemAccount.UndistributedRetainedEarnings
							constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
								"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
							LocalUndistributedRetainEarnings = first SystemAccountRel.GeneralLedgerChartAccount

						initialize LocalRetainedEarnings
						if (PrmFinanceEnterpriseGroup.AllBalanceSheetAccounts)
							LocalSystemAccount			= SystemAccount.RetainedEarnings
							if (PrmFinanceEnterpriseGroup.SystemSubAccount entered)
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount.Account + "-" + PrmFinanceEnterpriseGroup.SystemSubAccount
							else
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount
							constraint (LocalRetainedEarnings entered)
								"InvalidRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"

		        Instance Rules
					if (ChartSection.BalanceSheet
					or  (ChartSection.IncomeStatement and (FinanceEnterpriseGroup.IncludeUREInAverageDailyBalance or FinanceEnterpriseGroup.IncludeIncomeStatementAccounts)))
						if ((PrmIncludeFutureYears     and GeneralLedgerClosePeriod.GeneralLedgerCloseYear >= PrmBasisYear)
						or  (not PrmIncludeFutureYears and GeneralLedgerClosePeriod.GeneralLedgerCloseYear  = PrmBasisYear))
							LocalFinanceCodeBlock       = FinanceCodeBlock
							LocalPostingDate			= PostingDate
							LocalTransactionDate		= TransactionDate
							LocalYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
							LocalCurrencyCode			= CurrencyCode
							ADBFunctionalTotal		    = ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							TransactionAmountTotal		= TransactionAmount
							AlternateAmountTotal		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							AlternateAmount2Total		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							AlternateAmount3Total		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
							ReportAmount1Total			= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							ReportAmount2Total			= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							ReportAmount3Total			= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							ReportAmount4Total			= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							ReportAmount5Total			= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
							include ADBTransactionUpdate

		RebuildADBTransaction is a Set Action	
			restricted
		    Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmAccountingEntity			is a AccountingEntity
				PrmFiscalYear				is like GeneralLedgerCloseYear
				PrmADBAccount				is a ADBAccountType
				PrmAccount					is like GeneralLedgerChartAccount
				PrmAccountingUnit			is like AccountingUnit
				PrmDimension1				is like FinanceDimension1
				PrmADBCodeBlock				is like ADBCodeBlock
				PrmDateRange				is a DateRange

		    Parameter Rules
				PrmFinanceEnterpriseGroup
			 		required
				PrmAccountingEntity
					required
				PrmADBAccount
					required
				PrmDateRange
					required

		    Local Fields
				LocalFinanceCodeBlock				is a FinanceCodeBlock
				LocalPostingDate					is Date
				LocalTransactionDate				is Date
				LocalTimeStamp						is TimeStamp
				ADBFunctionalTotal              	is an InternationalAmount
				TransactionAmountTotal				is an InternationalAmount
				FunctionalAmountTotal				is an InternationalAmount
				AlternateAmountTotal				is an InternationalAmount
				AlternateAmount2Total				is an InternationalAmount
				AlternateAmount3Total				is an InternationalAmount
				ReportAmount1Total					is an InternationalAmount	
				ReportAmount2Total					is an InternationalAmount
				ReportAmount3Total					is an InternationalAmount
				ReportAmount4Total					is an InternationalAmount
				ReportAmount5Total					is an InternationalAmount
				LocalUndistributedRetainEarnings	is like GeneralLedgerChartAccount
				LocalRetainedEarnings				is like GeneralLedgerChartAccount
				LocalYear							is a GeneralLedgerCalendarYear
				LocalCurrencyCode					is like Currency

		    Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and	   AccountingEntity		  = PrmAccountingEntity
                and    Status.Posted
				and    PostingDate within PrmDateRange)

		    Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				Status

		    Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						LocalTimeStamp		= current timestamp
						initialize LocalUndistributedRetainEarnings
						if (FinanceEnterpriseGroup.IncludeUREInAverageDailyBalance
						and PrmADBAccount.SystemUndistributedRetainedEarnings)
							LocalSystemAccount  = SystemAccount.UndistributedRetainedEarnings
							constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
								"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
							LocalUndistributedRetainEarnings = first SystemAccountRel.GeneralLedgerChartAccount

						initialize LocalRetainedEarnings
						if (PrmFinanceEnterpriseGroup.AllBalanceSheetAccounts)
							LocalSystemAccount			= SystemAccount.RetainedEarnings
							if (PrmFinanceEnterpriseGroup.SystemSubAccount entered)
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount.Account + "-" + PrmFinanceEnterpriseGroup.SystemSubAccount
							else
								LocalRetainedEarnings	= first SystemAccountRel.GeneralLedgerChartAccount
							constraint (LocalRetainedEarnings entered)
								"InvalidRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"

		        Instance Rules
					if  ((not PrmADBAccount.SystemUndistributedRetainedEarnings												
					or    (ChartSection.IncomeStatement and FinanceEnterpriseGroup.IncludeUREInAverageDailyBalance))		
					and  (PrmAccount                         not entered or PrmAccount                         = FinanceCodeBlock.GeneralLedgerChartAccount)
					and  (PrmADBCodeBlock.AccountingUnit     not entered or PrmADBCodeBlock.AccountingUnit     = FinanceCodeBlock.AccountingUnit)
					and  (PrmADBCodeBlock.Project            not entered or PrmADBCodeBlock.Project            = FinanceCodeBlock.Project)
					and  (PrmADBCodeBlock.FinanceDimension1  not entered or PrmADBCodeBlock.FinanceDimension1  = FinanceCodeBlock.FinanceDimension1)
					and  (PrmADBCodeBlock.FinanceDimension2  not entered or PrmADBCodeBlock.FinanceDimension2  = FinanceCodeBlock.FinanceDimension2)
					and  (PrmADBCodeBlock.FinanceDimension3  not entered or PrmADBCodeBlock.FinanceDimension3  = FinanceCodeBlock.FinanceDimension3)
					and  (PrmADBCodeBlock.FinanceDimension4  not entered or PrmADBCodeBlock.FinanceDimension4  = FinanceCodeBlock.FinanceDimension4)
					and  (PrmADBCodeBlock.FinanceDimension5  not entered or PrmADBCodeBlock.FinanceDimension5  = FinanceCodeBlock.FinanceDimension5)
					and  (PrmADBCodeBlock.FinanceDimension6  not entered or PrmADBCodeBlock.FinanceDimension6  = FinanceCodeBlock.FinanceDimension6)
					and  (PrmADBCodeBlock.FinanceDimension7  not entered or PrmADBCodeBlock.FinanceDimension7  = FinanceCodeBlock.FinanceDimension7)
					and  (PrmADBCodeBlock.FinanceDimension8  not entered or PrmADBCodeBlock.FinanceDimension8  = FinanceCodeBlock.FinanceDimension8)
					and  (PrmADBCodeBlock.FinanceDimension9  not entered or PrmADBCodeBlock.FinanceDimension9  = FinanceCodeBlock.FinanceDimension9)
					and  (PrmADBCodeBlock.FinanceDimension10 not entered or PrmADBCodeBlock.FinanceDimension10 = FinanceCodeBlock.FinanceDimension10))
						LocalFinanceCodeBlock       = FinanceCodeBlock
						LocalPostingDate			= PostingDate
						LocalTransactionDate		= TransactionDate
						LocalYear					= GeneralLedgerClosePeriod.GeneralLedgerCloseYear
						LocalCurrencyCode			= CurrencyCode
						ADBFunctionalTotal		    = ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						TransactionAmountTotal		= TransactionAmount
						AlternateAmountTotal		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						AlternateAmount2Total		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						AlternateAmount3Total		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						ReportAmount1Total			= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						ReportAmount2Total			= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						ReportAmount3Total			= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						ReportAmount4Total			= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						ReportAmount5Total			= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						if (PrmADBAccount.SystemUndistributedRetainedEarnings)
							LocalRebuildUREAccount = true
						else
							LocalRebuildUREAccount = false
						include ADBTransactionUpdate

		BuildDailyTotal is a Set Action
			restricted
			disable checkpoint
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmStartPeriod              is like GeneralLedgerCalendarPeriod
					default label is "StartPeriod"
				PrmEndPeriod                is like GeneralLedgerCalendarPeriod
					default label is "EndPeriod"
				PrmSystemUREAccountOnly		is Boolean
					default label is "SystemUREAccountOnly"







				PrmDateRange					is a DateRange	
					default label is "DateRange"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
			Local Fields	
				LocalChartSection				is a ChartSection
				LocalDimensionCode				is a DimensionCode
				LocalSystem						is a GeneralLedgerSystemCode
				LocalCurrencyCode				is a Currency
				LocalFinanceCodeBlock			is a FinanceCodeBlock
				LocalEntityYearPeriod			is a GeneralLedgerCalendarPeriod
				LocalPrimaryLedger				is a Ledger
				LocalPostingDate				is Date
				LocalTransactionDate			is Date
				LocalUndistributedRetainEarnings	is like GeneralLedgerChartAccount
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    AccountingEntity			= PrmAccountingEntity
				and    GeneralLedgerClosePeriod >= PrmStartPeriod
				and    GeneralLedgerClosePeriod <= PrmEndPeriod
				and    Status.Posted)

			Sort Order		
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerClosePeriod
				Status
				PrimaryLedger
				FinanceCodeBlock.Ledger
				System
				CurrencyCode
				GeneralLedgerCalendarPeriod
				FinanceCodeBlock.AccountingUnit
				FinanceCodeBlock.GeneralLedgerChartAccount
				FinanceCodeBlock.Project
				DimensionCode
				PostingDate
				TransactionDate
			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal
			Action Rules
				Empty Set Rules
				Set Rules
					Entrance Rules
						initialize LocalUndistributedRetainEarnings
						LocalSystemAccount  = SystemAccount.UndistributedRetainedEarnings
						LocalUndistributedRetainEarnings = first SystemAccountRel.GeneralLedgerChartAccount

				PostingDate Set Rules
					Entrance Rules
						LocalChartSection			= ChartSection
						LocalSystem					= System
						LocalDimensionCode			= DimensionCode
						LocalCurrencyCode			= CurrencyCode
						LocalFinanceCodeBlock		= FinanceCodeBlock
						LocalPrimaryLedger			= PrimaryLedger

					Exit Rules
						if (not PrmSystemUREAccountOnly
						or  (PrmSystemUREAccountOnly and ChartSection.IncomeStatement))
							LocalDailyCalendarPeriod = DerivedDailyTotalPeriod
							if (LocalDailyCalendarPeriod exists)	
								include PostActionUpdateDailyPeriodTotal
							else
								send notification
									to DerivedActor
									description is "DoesNotExistsInDailyCalendarPeriod"
									detail is "<DerivedDailyTotalPeriod>:PeriodIsNotDefinedInDailyCalendarPeriod"
				Instance Rules
					if (not PrmSystemUREAccountOnly
					or  (PrmSystemUREAccountOnly and ChartSection.IncomeStatement))
						TransactionAmountTotal		+= TransactionAmount
						FunctionalAmountTotal		+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						AlternateAmountTotal		+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						AlternateAmount2Total		+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						AlternateAmount3Total		+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						ProjectAmountTotal			+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						ReportAmount1Total			+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						ReportAmount2Total			+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						ReportAmount3Total			+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						ReportAmount4Total			+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						ReportAmount5Total			+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						UnitsAmountTotal			+= UnitsAmount
#endif
		RelieveObligation is a Set Action

			restricted
		    Parameters
				PrmEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity		is a AccountingEntity
				PrmClosePeriod			is a GeneralLedgerClosePeriod
				PrmJournalControl		is a GeneralLedgerJournalControl

		    Parameter Rules
				PrmEnterpriseGroup
			 		required
				PrmAccountingEntity
					required
				PrmClosePeriod
					required
				PrmJournalControl
					required

		    Local Fields
		    	LocalHeaderUniqueID					is UniqueID
				
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and    AccountingEntity				= PrmAccountingEntity
				and    GeneralLedgerClosePeriod		= PrmClosePeriod
				and    GeneralLedgerJournalControl	= PrmJournalControl)
						
		    Sort Order
		    				
		    Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						LocalHeaderUniqueID			= GeneralLedgerJournalControl.UniqueID

					Exit Rules
						invoke EditTotalsRoute BudgetTemplateGroupTotal
							invoked.PrmFinanceEnterpriseGroup			= PrmEnterpriseGroup
							invoked.PrmBudgetEditGroup					= LocalHeaderUniqueID
							invoked.PrmMode								= BudgetEditMode.UpdateOnly
							invoked.PrmTotalsProcessing					= BudgetEditTotalsProcessing.Reverse
							invoked.PrmBusinessClassName				= "GeneralLedgerTransaction"
							invoked.PrmEditContext						= RelieveObligationMessage

		        Instance Rules

		        	include DeductFromBudgetTotals

#ifdef module cb			
		UpdateCashCodeFundEdit is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (first CashCodeByAccountRel.CashCode.EditAvailableFunds)
					if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
						invoke Update CashCodeFundEditByAccountingUnitRel
							invoked.EditAmount += (TransactionAmount *-1)
					else
						invoke Update CashCodeFundEditByDimension1Rel
							invoked.EditAmount += (TransactionAmount *-1)
				if (first CashCodeByAccountRel.CashCode.RestrictedFunds)
					if (FinanceEnterpriseGroup.FundDimension.AccountingUnit
					and CashCodeFundEditByAccountingUnitRel !exists)
						invoke Update CashCodeFundEditByAccountingUnitRel
					else
						if (FinanceEnterpriseGroup.FundDimension.Dimension1
						and CashCodeFundEditByDimension1Rel !exists)
							invoke Update CashCodeFundEditByDimension1Rel
#endif		      


#ifdef module integration		            
		ErrorSuspenseAlert is an Instance Action
			restricted
			Parameters
			Action Rules
				if (FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPARel.Enable)
      				if(FSMBODConfigurationDetailPARel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "GLERRORSUSPENSEGROUP" 
							invoked.PrmMainXML 		= ErrorSuspenseAlertXML	
							invoked.PrmDescription	= ErrorSuspenseAlertDescription
							invoked.PrmBODID		= DerivedBODID		
#endif		      

#ifdef module ap
		FrontEndSplitTransactions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup					is a FinanceEnterpriseGroup
				PrmAccountingEntity							is a AccountingEntity
        		PrmGeneralLedgerClosePeriod					is a GeneralLedgerClosePeriod
				PrmGeneralLedgerJournalControl				is a GeneralLedgerJournalControl
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmGeneralLedgerClosePeriod
					required
				PrmGeneralLedgerJournalControl
					required
			Local Fields
				LocalForEachSumFESAmount					is an InternationalAmount
				LocalForEachSumUnitsAmount					is an UnitsAmount
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and	AccountingEntity = PrmAccountingEntity
				and	GeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
				and	GeneralLedgerJournalControl = PrmGeneralLedgerJournalControl
				and Status.Unreleased
				and (TransactionAmount != 0
				or (TransactionAmount = 0 
				and UnitsAmount entered))
				and not CreatedByFES
				and FinanceCodeBlock.FinanceDimension2 not entered
				and FinanceCodeBlock.Project entered
				and !FinanceCodeBlock.Project.ExcludeFromFES
        		and FinanceCodeBlock.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)
			Action Rules
				Empty Set Rules	
				Set Rules
					Entrance Rules
						LocalFEGtext		= PrmFinanceEnterpriseGroup
        				LocalDerivedFESKey	= "GL-"+PrmAccountingEntity+"-"+PrmGeneralLedgerClosePeriod+"-"+PrmGeneralLedgerJournalControl
						invoke Purge FESDistributionsByKeyLocalRel
					Exit Rules
						LocalFEGtext		= PrmFinanceEnterpriseGroup
        				LocalDerivedFESKey	= "GL-"+PrmAccountingEntity+"-"+PrmGeneralLedgerClosePeriod+"-"+PrmGeneralLedgerJournalControl
						invoke Purge FESDistributionsByKeyLocalRel
				Instance Rules
					LocalFEGtext		= PrmFinanceEnterpriseGroup
        			LocalDerivedFESKey	= "GL-"+PrmAccountingEntity+"-"+PrmGeneralLedgerClosePeriod+"-"+PrmGeneralLedgerJournalControl
					invoke SplitDistribution FrontEndSplitDistributions in foreground
						invoked.PrmFinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= PrmAccountingEntity
						invoked.PrmDistribution					= GeneralLedgerTransaction
						invoked.PrmDerivedFESKey				= LocalDerivedFESKey
						invoked.PrmDistributionAmount			= TransactionAmount
						invoked.PrmDistributionAmountWithTax	= TransactionAmount
						invoked.PrmDistributionUnitsAmount		= UnitsAmount
						invoked.PrmTransactionDate				= TransactionDate
						invoked.PrmPostingDate					= PostingDate
						invoked.PrmTransactionCurrencyCode		= CurrencyCode
						invoked.PrmDistributionBy				= DistributionBy.ByAmount
						invoked.PrmNumberOfDecimalsQuantity		= NumberOfDecimalsQuantity.0Decimals
						invoked.PrmGeneralLedgerSystemCode		= System
						invoked.PrmTransactionCodeBlock			= FinanceCodeBlock
					initialize LocalForEachSumFESAmount
					initialize LocalForEachSumUnitsAmount
					if(FESDistByDistributionRel exists)
						for each FESDistByDistributionRel
							LocalForEachSumFESAmount 		+= each.FESAmount
							LocalForEachSumUnitsAmount 		+= each.FESUnitsAmount
							invoke Create Unreleased GeneralLedgerTransaction
								fill in fields from this instance
									except invoked.ReportCurrencyAmount
								invoked.FinanceCodeBlock				= each.CodeBlock
								if (last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
									invoked.TransactionAmount			= each.FESAmount + (TransactionAmount - LocalForEachSumFESAmount)
									invoked.UnitsAmount					= each.FESUnitsAmount + (UnitsAmount - LocalForEachSumUnitsAmount)
								else
									invoked.TransactionAmount			= each.FESAmount
									invoked.UnitsAmount					= each.FESUnitsAmount
								invoked.CreatedByFES					= true
						invoke Unreleased.Delete 

		DeleteFrontEndSplitTransactions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup					is a FinanceEnterpriseGroup
				PrmAccountingEntity							is a AccountingEntity
        		PrmGeneralLedgerClosePeriod					is a GeneralLedgerClosePeriod
				PrmGeneralLedgerJournalControl				is a GeneralLedgerJournalControl
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmGeneralLedgerClosePeriod
					required
				PrmGeneralLedgerJournalControl
					required			
			Local Fields

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and	AccountingEntity = PrmAccountingEntity
				and	GeneralLedgerClosePeriod = PrmGeneralLedgerClosePeriod
				and	GeneralLedgerJournalControl = PrmGeneralLedgerJournalControl
				and Status.Unreleased
				and CreatedByFES)
			Action Rules
				Empty Set Rules

				Instance Rules
					invoke Unreleased.Delete
#endif

#ifdef module cam
		UpdateCustodialAccountEdit is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (FinanceCodeBlock.FinanceDimension10 entered)
					invoke Update CustodialAccountEditByPostingRel
						invoked.EditAmount += (TransactionAmount *-1)
#endif


		PurgeGLTransactionPostedRecords is a Set Action
			restricted
			disable checkpoint
	
			completion message is "<RecordsPurged>RecordsPurged"
		
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is an AccountingEntity
				PrmGeneralLedgerCloseYear		is a GeneralLedgerCloseYear
				PrmRecordType					is Numeric 1
				PrmSystemCodeSelectionOption 	is Numeric 1
				PrmGeneralLedgerSystemCode 		is a GeneralLedgerSystemCode
				PrmPurgeGLRecordsResult 		is a PurgeGLRecordsResult
				PrmPurgeGLRecordsResultDetail	is a PurgeGLRecordsResultDetail
				PrmReportOnly					is Boolean
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmGeneralLedgerCloseYear
					required
				PrmAccountingEntity
					required
				PrmPurgeGLRecordsResultDetail
					required
				PrmSystemCodeSelectionOption
					required
			
			Local Fields
				RecordsPurged				is Numeric 12
				PurgeGLBackgroundGroup		is AlphaUpper up to 200
				
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerClosePeriod
				Status
				PrimaryLedger
				FinanceCodeBlock.Ledger
				System
				CurrencyCode
				GeneralLedgerCalendarPeriod
	        	FinanceCodeBlock.AccountingUnit
    	        FinanceCodeBlock.GeneralLedgerChartAccount
            	FinanceCodeBlock.Project
				DimensionCode
			
			Instance Selection
				where (	FinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
				and 	AccountingEntity	    = PrmAccountingEntity
				and 	GeneralLedgerClosePeriod.GeneralLedgerCloseConfiguration = PrmGeneralLedgerCloseYear.GeneralLedgerCloseConfiguration
				and    	GeneralLedgerClosePeriod.GeneralLedgerCloseYear	= PrmGeneralLedgerCloseYear
				and    	Status.Posted
				and 	((PrmSystemCodeSelectionOption = 1
				and 	 System	= PrmGeneralLedgerSystemCode )
				or 		(PrmSystemCodeSelectionOption = 2
				and		 System.RecordType = PrmRecordType
				and 	 System					!= "TC"
				and 	 System					!= "CA") )
				and		((FinanceCodeBlock.Project entered
				and		FinanceCodeBlock.Project.ProjectStatus.AllowPurge)
				or		FinanceCodeBlock.Project not entered ) )	
				
			Action Rules
				
				Empty Set Rules
						
				
				Set Rules
					
					Entrance Rules
						initialize RecordsPurged
						PurgeGLBackgroundGroup = "PurgeGLTransactionHistoryRecord"
						
					Exit Rules
						invoke Update PrmPurgeGLRecordsResultDetail.PurgeGLRecordsResultDetail
							invoked.GLTransactionRecords = RecordsPurged



						if(!PrmReportOnly)
							invoke PurgeGLJournalPostedRecords GeneralLedgerJournalControl in background group(PurgeGLBackgroundGroup)
								invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.PrmAccountingEntity				= PrmAccountingEntity
								invoked.PrmGeneralLedgerCloseYear		= PrmGeneralLedgerCloseYear
								invoked.PrmSystemCodeSelectionOption	= PrmSystemCodeSelectionOption
								invoked.PrmRecordType					= PrmRecordType
								invoked.PrmGeneralLedgerSystemCode		= PrmGeneralLedgerSystemCode
								invoked.PrmPurgeGLRecordsResult			= PrmPurgeGLRecordsResult
								invoked.PrmPurgeGLRecordsResultDetail	= PrmPurgeGLRecordsResultDetail.PurgeGLRecordsResultDetail
								invoked.PrmReportOnly					= PrmReportOnly
				
				Instance Rules
					
					if (!PrmReportOnly)
						invoke Purge GainLossTransactionAmount 
						invoke Purge Posted this instance
					RecordsPurged += 1	



		ManualApprove is an Instance Action
			valid when (ManualAllowed)
			confirmation required
				"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Entrance Rules
				constraint (!create stamp.actor	= actor)
					"PersonCreatingTheJournalCannotBeTheApprover"
				constraint (!update stamp.actor	= actor)
					"PersonUpdatingTheJournalCannotBeTheApprover"
				
			Action Rules
				invoke ManualApprove ResponsibilityMatrixApprovalProcessorRel

		ManualReject is an Instance Action
			valid when (ManualAllowed)
			Action Rules
				invoke ManualReject ResponsibilityMatrixApprovalProcessorRel
#ifdef module reconciliation
		CreateReconcilingItem is an Instance Action
			valid when (ReconciliationIsOpen)
			Parameters
				PrmDescription			is a Description
					default label is "Description"
				PrmReconciliationReason	is a ReconciliationReason
					default label is "ReasonCode"
				PrmReferenceNumber		is AlphaUpper 50
					default label is "ReferenceNumber"
					
			Parameter Rules
				PrmDescription
					initial value is "Detail Reconciliation Reconciling Item"
					default to "Detail Reconciliation Reconciling Item"
					
				PrmReconciliationReason
					if(ReconciliationManagementGroupRel.ReconcilingItemReasonCodeRequired)
						required	
				
				PrmReferenceNumber
					required			
			Action Rules
				invoke CreateReconcilingItem ReconciliationPeriodDetail
					invoked.ReconciliationManagementGroup	= FinanceEnterpriseGroup
					invoked.ReconciliationAccountStructure	= ReconciliationAccountStructure
					if (ReconciliationAccount.IsAccountWithinConsolidatedGroup)
						invoked.ReconciliationAccount		= ReconciliationAccount.ParentReconciliationAccount
					else
						invoked.ReconciliationAccount		= ReconciliationAccount
					invoked.DetailType						= 2 
					invoked.GeneralLedgerCloseConfiguration	= ReconciliationAccount.CloseConfiguration
					invoked.DetailPeriod					= GeneralLedgerClosePeriod
					invoked.PeriodAmount					= (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
					invoked.ReconciliationReason			= PrmReconciliationReason
					invoked.ReferenceNumber					= PrmReferenceNumber
					invoked.StartPeriod						= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
            		invoked.EndPeriod						= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
            		invoked.PeriodTerm						= 1
					invoked.OriginatingTransaction 			= reference to this instance
		
		CreateDistribution is an Instance Action
			valid when (ReconciliationIsOpen)
			Parameters
				PrmDistributionAccount	is a FinanceCodeBlock 
					default label is "DistributionAccount"
				PrmCashAllocationCode	is a CashAllocationCode
					default label is "AllocationCode"
				PrmDescription			is a Description
					default label is "Description"
				PrmComment				is Text
					default label is "Comment"
						
			Parameter Rules
				PrmDistributionAccount
					
					if (!PrmCashAllocationCode entered)
						required
							"AccountingInformationOrAnAllocationCodeIsRequired"
					else
						cannot be entered
							"CanEnterEitherAccountingInformationOrAnAllocationCode"
						
				PrmCashAllocationCode
					if (!PrmDistributionAccount entered)
						required
							"AccountingInformationOrAnAllocationCodeIsRequired"
					else
						cannot be entered
							"CanEnterEitherAccountingInformationOrAnAllocationCode"
				
					constraint (!PrmCashAllocationCode.AllocationType.AccountOnly)
						"AllocationCodeMustBePercentOrAmountType"
				
				PrmDescription
					initial value is "Reconciliation Difference"
					default to "Reconciliation Difference"
					
			Action Rules
				if (PrmCashAllocationCode.AllocationType.Amount)
					constraint (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = PrmCashAllocationCode.ControlTotal)
						"AmountMustEqualControlTotalOf<PrmCashAllocationCode.ControlTotal>ForAmountTypeAllocationCodes"
				if (PrmDistributionAccount entered)
					invoke Create PeriodEndDistribution
						fill in fields from this instance
						invoked.ReconciliationManagementGroup		  					= FinanceEnterpriseGroup
						invoked.ReconciliationAccountStructure		  					= ReconciliationAccountStructure
						invoked.PeriodEndReconciliation.ReconciliationAccount			= ReconciliationAccount
						invoked.PeriodEndReconciliation.GeneralLedgerCloseConfiguration	= ReconciliationAccount.CloseConfiguration
						invoked.PeriodEndReconciliation.GeneralLedgerClosePeriod		= GeneralLedgerClosePeriod
						invoked.GLFinanceCodeBlock					  					= PrmDistributionAccount
						invoked.GLTransactionAmount					  					= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.DistributionAmount.CurrencyAmount	  					= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						if (PrmDescription entered)
							invoked.Description                                       	= PrmDescription
						else
							invoked.Description                                         = "Tolerance Adjustment"
						invoked.Comment													= PrmComment
						invoked.OriginatingTransaction 									= reference to this instance
				else
				if (PrmCashAllocationCode entered)
					for each PrmCashAllocationCode.CashAllocationCodeDetail set
						invoke Create PeriodEndDistribution
							fill in fields from each
							invoked.ReconciliationManagementGroup		  					= FinanceEnterpriseGroup
							invoked.ReconciliationAccountStructure		  					= ReconciliationAccountStructure
							invoked.PeriodEndReconciliation.ReconciliationAccount			= ReconciliationAccount
							invoked.PeriodEndReconciliation.GeneralLedgerCloseConfiguration	= ReconciliationAccount.CloseConfiguration
							invoked.PeriodEndReconciliation.GeneralLedgerClosePeriod		= GeneralLedgerClosePeriod
							invoked.GLFinanceCodeBlock					  					= each.AllocationAccount
							if (PrmCashAllocationCode.AllocationType.Amount)
								invoked.GLTransactionAmount									= each.AllocationAmount
								invoked.DistributionAmount.CurrencyAmount					= each.AllocationAmount
							if (PrmCashAllocationCode.AllocationType.Percent)
								invoked.GLTransactionAmount									= (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * each.AllocationPercent)
								invoked.DistributionAmount.CurrencyAmount					= (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * each.AllocationPercent)
							if (PrmCashAllocationCode.AllocationType.AccountOnly)
								invoked.BypassUnitAndAmountEdit 							= true
							if (PrmDescription entered)
								invoked.Description							  				= PrmDescription
							else
								invoked.Description							  				= "Tolerance Adjustment"
							invoked.Comment													= PrmComment
							invoked.OriginatingTransaction 									= reference to this instance
									
		CreateAmortization is an Instance Action
			valid when(IsPrepaidReconciliationAccount)
			Parameters
				PrmReferenceNumber				is AlphaUpper 50
					default label is "ReferenceNumber"
				PrmDescription					is Alpha 100
					default label is "Description"
				PrmDistributionDescription		is Alpha 30
					default label is "DistributionDescription"
				PrmStartPeriod					is a GeneralLedgerClosePeriod
					default label is "StartPeriod"
				PrmEndPeriod					is a GeneralLedgerClosePeriod
					default label is "EndPeriod"
				PrmCatchUpPeriod				is a GeneralLedgerClosePeriod
					default label is "CatchUpPeriod"
				PrmAmortizationExpenseAccount	is a FinanceCodeBlockFull
					default label is "AmortizationExpenseAccount"
				PrmAllocationCode				is a CashAllocationCode
					default label is "AllocationCode"
				PrmPeriodTerm					is Numeric 3
					default label is "PeriodTerm"
				PrmAmortizationSpread			is Numeric 1
		    		States
						ByPeriods				value is 0
						ByDays					value is 1
					default label is "AmortizationSpread"
					
			Action Rules
				invoke CreateAmortizationDetail ReconciliationAccountRel
					invoked.PrmReferenceNumber				= PrmReferenceNumber
					invoked.PrmDescription					= PrmDescription
					invoked.PrmDetailAmount					= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.PrmTransactionDate				= TransactionDate
					invoked.PrmPostingDate					= PostingDate 
					invoked.PrmStartPeriod					= PrmStartPeriod
					invoked.PrmEndPeriod					= PrmEndPeriod
					invoked.PrmCatchUpPeriod				= PrmCatchUpPeriod
					invoked.PrmAmortizationExpenseAccount	= PrmAmortizationExpenseAccount
					invoked.PrmAllocationCode				= PrmAllocationCode
					invoked.PrmPeriodTerm					= PrmPeriodTerm
					invoked.PrmAmortizationSpread			= PrmAmortizationSpread
					invoked.PrmDistributionDescription		= PrmDistributionDescription
					invoked.PrmOriginatingTransaction 		= reference to this instance
#endif
	StateCycles
		GeneralLedgerLTransactionLifeCycle is a StateCycle
			state field is Status
			
			Unreleased	is a State
				Create is a Create Action
					valid when (UnreleasedJournalControl)
					Entrance Rules
#ifdef module intercobilling
						if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
							include IntercompanyBillingEdit
#endif							
						constraint (GeneralLedgerJournalControl.AllowUnrelease)
							"CannotAddTransactionToInterfacedJournal"
						constraint (!GeneralLedgerJournalControl.ReleaseDate entered)
							"ReleaseInProcess;CannotAddTransaction"
						constraint (GeneralLedgerJournalControl.Ledger = FinanceCodeBlock.Ledger)
							"LedgerOnTransactionMustBeTheSameAsJournal" 
						constraint (GeneralLedgerJournalControl.Status.Unreleased)
							"GlobalLedgerJournalControlShouldBeUnreleased"
						constraint (GeneralLedgerJournalControl.Currency entered)
							"CurrencyCodeIsRequired"
						if (TransactionAmount entered)
							if (!CurrencyCode entered)
								if (GeneralLedgerJournalControl.Currency entered)
									CurrencyCode = GeneralLedgerJournalControl.Currency
								else
									CurrencyCode = AccountingEntity.FunctionalCurrency
							constraint (TransactionAmount decimals <= CurrencyCode.NumberOfDecimals)
								"TooManyDecimalsEnteredOn_Transaction_Amount"
						constraint (TransactionAmount entered
								or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered								
								or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered
								or	UnitsAmount entered)
							"AmountOrUnitsAmountIsRequired"
						LocalSaveOverTolerance	= true
						if (!CurrencyTable entered)
			 				CurrencyTable				= GeneralLedgerJournalControl.CurrencyTable
						if (CurrencyCode 		= GeneralLedgerJournalControl.Currency
						and TransactionAmount	entered
						and TransactionDate		= GeneralLedgerJournalControl.TransactionDate
						and CurrencyTable 		= GeneralLedgerJournalControl.CurrencyTable)
							include CurrencyRateDefault
							ReportCurrencyAmount.KeepRateOnly	= true

						if (GeneralLedgerJournalControl.JournalType.ManualEncumbrance)
							constraint (TransactionAmount > 0
									or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
								"CannotEnterNegativeAmount"
								
						if (FinanceCodeBlock.ToAccountingEntity != blank
						and FinanceCodeBlock.ToAccountingEntity	!= AccountingEntity
						and GeneralLedgerJournalControl.NormalJournalType)
							confirmation required
								"InterEntityTransactionDetected;DoYouWantToChangeJournalTypeToInterEntity?"	
							invoke ChangeToInterEntityJournal GeneralLedgerJournalControl							



						if (!TransactionAmount entered 
						and !UnitsAmount entered
						and ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered)
							confirmation required
								"ProjectAmountExistsWithNoTransactionAmount;DoYouWantToSave?"		
					Action Rules
						if (!PostingDate	entered)
							PostingDate			= GeneralLedgerJournalControl.PostingDate
						if (!TransactionDate	entered)
							TransactionDate		= GeneralLedgerJournalControl.TransactionDate
						System				= GeneralLedgerJournalControl.System
						if (TransactionAmount entered)
							include CheckCurrencyAmount
					Exit Rules
						include AddJournalTotals
						include RecurringJournalInterface
						LocalAllowRebuild = AllowDocumentMaintenanceDuringBudgetTemplateProcessPending	
						include AddToBudgetTotals
#ifdef module intercobilling
						if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
							include UpdateIntercompanyBillingTransaction
#endif
						if (GeneralLedgerEvent = "ES")
							invoke TriggerErrorSuspenseAlert	
#ifdef module integration
							invoke ErrorSuspenseAlert	
#endif		
						include UpdateFESExpenditures

				Update is an Update Action
					valid when (UnreleasedJournalControl)
					Entrance Rules
#ifdef module intercobilling
						if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
							include IntercompanyBillingEdit
#endif							
						constraint (GeneralLedgerJournalControl.AllowUnrelease)
							"CannotChangeInterfacedTransaction"
						constraint (!GeneralLedgerJournalControl.ReleaseDate entered)
							"ReleaseInProcess;CannotChangeTransaction"
						if (!CurrencyTable entered)
							CurrencyTable	= GeneralLedgerJournalControl.CurrencyTable
						LocalSaveOverTolerance	= true

						if (FinanceCodeBlock.Ledger changed)
							constraint (GeneralLedgerJournalControl.Ledger = FinanceCodeBlock.Ledger)
								"CannotChangeLedgerOnTransaction" 
						constraint (!SystemTransactionEvents) 
							"CannotChangeSystemCreatedTransaction"
						if (TransactionAmount entered)
							constraint (TransactionAmount decimals <= CurrencyCode.NumberOfDecimals)
								"TooManyDecimalsEnteredOn_Transaction_Amount"							
						constraint (TransactionAmount entered
								or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered
								or	UnitsAmount entered)
							"AmountOrUnitsAmountIsRequired"

						if (!TransactionAmount entered 	
						and !UnitsAmount entered
						and ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered)
							confirmation required
								"ProjectAmountExistsWithNoTransactionAmount;DoYouWantToSave?"

						if (TransactionAmount entered)
							include CheckCurrencyAmount

						if (CurrencyCode changed
						or  TransactionDate	changed
						or  AutoReverse changed
						or  TransactionAmount changed
						or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount changed
						or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate changed
						or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate changed
						or	UnitsAmount changed
						or (CurrencyTable entered
						and !CurrencyTable = GeneralLedgerJournalControl.CurrencyTable))
							LocalJournalAmountUpdated		= true
							include DeleteJournalTotals
						
						if (TransactionAmount changed
						and TransactionAmount entered)
							ReportCurrencyAmount.KeepRateOnly	= true
						else
							if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount changed
							or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount changed
							or  !CurrencyTable = GeneralLedgerJournalControl.CurrencyTable)
								ReportCurrencyAmount.KeepRateOnly	= false
	
						if (CurrencyCode changed
						or  TransactionDate	changed
						or !CurrencyTable = GeneralLedgerJournalControl.CurrencyTable)
							initialize ReportCurrencyAmount
					Action Rules
						if (!FinanceCodeBlock.Project.Currency = old FinanceCodeBlock.Project.Currency)
							initialize ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							initialize ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate

				    	ChartSection		= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection

					Exit Rules
						if (LocalJournalAmountUpdated)
							include AddJournalTotals
						include RecurringJournalInterface
						include DeductFromBudgetTotals
						LocalAllowRebuild = AllowDocumentMaintenanceDuringBudgetTemplateProcessPending	
						include AddToBudgetTotals
						if (!AccountingEntity.JournalApproval.None)
							invoke UpdateJournalControl GeneralLedgerJournalControl
#ifdef module intercobilling
						if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
							include UpdateIntercompanyBillingTransaction
#endif
						include UpdateFESExpenditures

						if (FinanceEnterpriseGroup.EnableResponsibilityMatrix
						and ResponsibilityMatrixApprovalProcessorRel.Status.Approved)
							invoke Delete ResponsibilityMatrixApprovalProcessorRel 

				CreateForCopyJournalTrans is a Create Action
					restricted
					Entrance Rules
#ifdef module intercobilling
						if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
							include IntercompanyBillingEdit
#endif							








						LocalSaveOverTolerance	= true
						constraint (TransactionAmount entered
								or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered								
								or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
								or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered
								or	UnitsAmount entered)
							"AmountOrUnitsAmountIsRequired"







						if (CurrencyCode 		= GeneralLedgerJournalControl.Currency
						and TransactionAmount	entered
						and TransactionDate		= GeneralLedgerJournalControl.TransactionDate
						and CurrencyTable 		= GeneralLedgerJournalControl.CurrencyTable)
							include CurrencyRateDefault
							ReportCurrencyAmount.KeepRateOnly	= true

					Action Rules
						if (!PostingDate	entered)
							PostingDate			= GeneralLedgerJournalControl.PostingDate
						if (!TransactionDate	entered)
							TransactionDate		= GeneralLedgerJournalControl.TransactionDate
						System				= GeneralLedgerJournalControl.System
						if (TransactionAmount entered)
							include CheckCurrencyAmount
					Exit Rules
						include AddJournalTotals
						include RecurringJournalInterface
						LocalAllowRebuild = AllowDocumentMaintenanceDuringBudgetTemplateProcessPending	
						include AddToBudgetTotals
#ifdef module intercobilling
						if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
							include UpdateIntercompanyBillingTransaction
#endif					
						include UpdateFESExpenditures

				Delete is a Delete Action
					valid when (UnreleasedJournalControl)
					Entrance Rules
						constraint (GeneralLedgerJournalControl.AllowUnrelease)
							"CannotDeleteInterfacedTransaction"
						constraint (!GeneralLedgerJournalControl.ReleaseDate entered)
							"ReleaseInProcess;CannotDeleteTransaction"
						constraint (!RecurringJournalBridgeRel exists)
							"CannotDelete;Linked_\Recurring_\JournalTransactionsExist"
						initialize RecurringDescription
						include DeleteJournalTotals
						include DeductFromBudgetTotals
#ifdef module intercobilling
						if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
							initialize FromBillingCompany
							include UpdateIntercompanyBillingTransaction
#endif						
						include UpdateFESExpenditures
						include ColumnarDeleteRules

				Purge is a Purge Action
					restricted
					Entrance Rules


						include UpdateFESExpenditures

				PurgeForJournalControl is a Set Action
					restricted
					
					Parameters
						PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
						PrmAccountingEntity					is a AccountingEntity
						PrmClosePeriod						is a GeneralLedgerClosePeriod
						PrmJournal							is a GeneralLedgerJournalControl
						
					Parameter Rules
						PrmFinanceEnterpriseGroup
							required
						PrmAccountingEntity
							required
						PrmClosePeriod
							required
						PrmJournal
							required
							
					Instance Selection
						where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						and    AccountingEntity				= PrmAccountingEntity
						and    GeneralLedgerClosePeriod		= PrmClosePeriod
						and    GeneralLedgerJournalControl	= PrmJournal)
						
					Action Rules
						Instance Rules
#ifdef module intercobilling
							if (GeneralLedgerJournalControl.IsAIntercompanyBillingJournal)
								initialize FromBillingCompany
								include UpdateIntercompanyBillingTransaction
#endif						
							invoke Purge Unreleased this instance

				Release is an Instance Action
					restricted
					Entrance Rules
						if (RecurringJournalExists)
							constraint (TotalJournalBridgeAmount = TransactionAmount) 
								"TransactionAmountDoesNotEqualRecurringTransactionAmountForLine<GeneralLedgerTransaction>"
#ifdef module intercobilling		
						include ValidateCurrencyCode
#endif
						
					Action Rules
						if (AccountingEntity			!= FinanceCodeBlock.ToAccountingEntity)
							make transition to Memo
						else
							if (GeneralLedgerJournalControl.JournalType.ManualEncumbrance)
								make transition to ManualEncumbrance
							else
								make transition to Released
						if (RecurringJournalExists)
							invoke AutoRelease Unreleased RecurringJournalControlRel
#ifdef module cb			
						include UpdateCashCodeFundBalance
#endif		
#ifdef module cam
						if (FinanceEnterpriseGroup.CustodialAccountManagement)
							include UpdateCustodialBalance
#endif

				SubmitForApproval is an Instance Action
					restricted
					Action Rules
						invoke SubmitForMatrixApproval first ResponsibilityMatrixRel
							invoked.PrmFinanceEnterpriseGroup 		= FinanceEnterpriseGroup
							invoked.PrmApprovalType					= "CD"
							invoked.PrmSystemCode					= System
							invoked.PrmApprovalTransactionForm		= ApprovalTransactionForm.GLJournalEntry
							invoked.PrmTransactionHeader1			= AccountingEntity
							invoked.PrmTransactionHeader2			= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
							invoked.PrmTransactionHeader3			= GeneralLedgerJournalControl
							invoked.PrmTransactionHeader4			= blank
							invoked.PrmTransactionLine1				= blank
							invoked.PrmTransactionLine2				= blank
							invoked.PrmTransaction					= GeneralLedgerTransaction
							invoked.PrmFinanceCodeBlock				= FinanceCodeBlock
							invoked.PrmApprovalTitle				= ApprovalTitle
							invoked.PrmApprovalAmount				= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount

            Released  	is a State
				CreateReleasedSystemTransactionsNoRules is a Create Action
					restricted
					bypass field rules

					Action Rules
						PostingDate			= GeneralLedgerJournalControl.PostingDate
						if (!PrimaryLedger entered)
							PrimaryLedger		= GeneralLedgerJournalControl.PrimaryLedger
						if (!TransactionDate entered)
							TransactionDate		= GeneralLedgerJournalControl.TransactionDate
						if (!Description entered)
							Description			= GeneralLedgerJournalControl.Description
						if (!System entered)
							System				= GeneralLedgerJournalControl.System
						if(TransientDefaultCurrencyAmount)
							ReportCurrencyAmount = blank
						include AssignCodeBlockDefaults												
						include NoRulesCurrencyCalculation
						DimensionCode		= FinanceCodeBlock.DimensionCode
						ChartSection		= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
						if (CreateTransactionInDetail
						and AccountingEntity		!= FinanceCodeBlock.ToAccountingEntity)
							make transition to Memo

					Exit Rules
						if (AccountingEntity	= FinanceCodeBlock.ToAccountingEntity
						and !DoNotUpdateZoneTotal)
							include CreateZoneTotalRecord 
						if(GeneralLedgerEvent = "ES")
							invoke TriggerErrorSuspenseAlert	
#ifdef module integration
							invoke ErrorSuspenseAlert		
#endif		
#ifdef module cb			
						include UpdateCashCodeFundBalance
#endif		
#ifdef module cam
						if (FinanceEnterpriseGroup.CustodialAccountManagement)
							include UpdateCustodialBalance
#endif
						if (TransientDefaultCurrencyAmount)
							if (GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate not entered
							and GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate not entered
							and GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate not entered
							and GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate not entered)
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate











				UpdateReleasedTransactionAmountsNoRules is an Update Action
					restricted
					bypass field rules
					
					Action Rules
						include NoRulesCurrencyCalculation
						if (AccountingEntity			!= FinanceCodeBlock.ToAccountingEntity)
							make transition to Memo							





#ifdef module cb			
						if (TransactionAmount changed)
							include UpdateCashCodeFundBalance
#endif		
#ifdef module cam
						if (TransactionAmount changed)
							if (FinanceEnterpriseGroup.CustodialAccountManagement)
								include UpdateCustodialBalance
#endif


				CreateReleasedGLSystemTransactionsNoRules is a Create Action
					restricted
					bypass field rules
					Entrance Rules
						if(TransientDefaultCurrencyAmount)
							LocalFunctionalAmount = ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 
							LocalAlternateAmount = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	
							LocalAlternateAmount2 = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	
							LocalAlternateAmount3 = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalReportAmount1  = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							LocalReportAmount2 = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	
							LocalReportAmount3 = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							LocalReportAmount4    = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount

					Action Rules
						PostingDate			= GeneralLedgerJournalControl.PostingDate
						if (!TransactionDate entered)
							TransactionDate		= GeneralLedgerJournalControl.TransactionDate
						if (!PrimaryLedger entered)
							PrimaryLedger		= GeneralLedgerJournalControl.PrimaryLedger
						if (!Description entered)
							Description			= GeneralLedgerJournalControl.Description
						if (!System entered)
							System				= GeneralLedgerJournalControl.System
						if (TransientFromGainLoss)
    						CurrencyTable = FinanceEnterpriseGroup.CurrencyTable
    					if(TransientDefaultCurrencyAmount)
							ReportCurrencyAmount = blank
								
						include AssignCodeBlockDefaults
						include NoRulesCurrencyCalculation
						DimensionCode		= FinanceCodeBlock.DimensionCode
						ChartSection		= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection

						if (!FinanceCodeBlock.GeneralLedgerChartAccount.UsedByATransaction)
							invoke UpdateGLChartAccount FinanceCodeBlock.GeneralLedgerChartAccount
								invoked.UsedByATransaction = true

					Exit Rules
						if(TransientDefaultCurrencyAmount)
							if (GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate not entered
							and GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate not entered
							and GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate not entered
							and GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate not entered)
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
    							GeneralLedgerTransaction.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate = GeneralLedgerTransaction.LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
    							ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = LocalFunctionalAmount 
								ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAlternateAmount
								ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount = LocalAlternateAmount2	
								ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount = LocalAlternateAmount3
								ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount    = LocalReportAmount1
								ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= LocalReportAmount2
								ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount    = LocalReportAmount3
								ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount    = LocalReportAmount4
    							
						invoke CreateHistoryGLTransDetailNoRules History GLTransactionDetail
							fill in fields from this instance
							if (TransientJournalizeGroup entered)
								invoked.JournalizeGroup					= TransientJournalizeGroup
							else
								invoked.JournalizeGroup					= "GL"+AccountingEntity+GeneralLedgerClosePeriod+GeneralLedgerJournalControl
							invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.AccountingEntity				= AccountingEntity
							invoked.TransactionAmount				= TransactionAmount
							invoked.ReportCurrencyAmount			= ReportCurrencyAmount
							invoked.FinanceCodeBlock				= FinanceCodeBlock
							invoked.PostingDate						= PostingDate
							invoked.TransactionDate					= TransactionDate
							invoked.PrimaryLedger					= PrimaryLedger
							if (JournalizeSystemTransactions)
								initialize invoked.OriginatingTransaction
							else
								invoked.OriginatingTransaction			= reference to GeneralLedgerTransaction
							invoked.RelatedJournalTransaction		= reference to GeneralLedgerTransaction
						if (!DoNotUpdateZoneTotal)
							include CreateZoneTotalRecord 
						if(GeneralLedgerEvent = "ES")
							invoke TriggerErrorSuspenseAlert
#ifdef module integration
							invoke ErrorSuspenseAlert

#endif
				Unrelease is an Instance Action
					restricted
					Action Rules
						if (RecurringJournalExists)
							invoke AutoUnrelease Released RecurringJournalControlRel
						invoke History.Purge GLTransactionDetailExistsRel
						if (SystemTransactionEvents)
							invoke Delete
						else


							LocalInstLedger				= FinanceCodeBlock.Ledger
							if (BudgetEntityLedgerRel exists
							and EncumbranceOptionForUpdate)
								invoke UpdateGroupTotals BudgetTemplate
									invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup					= GeneralLedgerJournalControl.UniqueID
									invoked.PrmTransactionCodeBlock				= FinanceCodeBlock
									invoked.PrmEndDate							= GeneralLedgerCalendarPeriod
									invoked.PrmReportAmounts.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
									invoked.PrmReportAmounts.ReportAmount1		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
									invoked.PrmReportAmounts.ReportAmount2		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
									invoked.PrmReportAmounts.ReportAmount3		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
									invoked.PrmReportAmounts.ReportAmount4		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
									invoked.PrmReportAmounts.ReportAmount5		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
									if (!InterEntityTransaction)
										invoked.PrmReportAmounts.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
										invoked.PrmReportAmounts.AlternateAmount	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1
										invoked.PrmReportAmounts.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
										invoked.PrmReportAmounts.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
									else
										invoked.PrmReportAmounts.FunctionalAmount	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
										invoked.PrmReportAmounts.AlternateAmount	= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
										invoked.PrmReportAmounts.AlternateAmount2	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
										invoked.PrmReportAmounts.AlternateAmount3	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
									invoked.PrmOriginatingDocument				= reference to GeneralLedgerJournalControl

#ifdef module cb			
							include UpdateCashCodeFundBalance
#endif		
#ifdef module cam
							if (FinanceEnterpriseGroup.CustodialAccountManagement)
								include UpdateCustodialBalance
#endif
							make transition to Unreleased

				Delete is a Delete Action
					restricted
					Entrance Rules
						include DeleteJournalTotals
						include ColumnarDeleteRules

            ManualEncumbrance is a State
				MaintainEncumbrance is an Instance Action
					completion message is "EncumbranceMaintainComplete"
					valid when (EncumbranceCanBeMaintained)
					Parameters
						ReduceEncumbranceBy			is like CurrencyAmount
						ZeroBalance					is Boolean
					Local Fields
						LocalTransactionAmount		is like CurrencyAmount
						LocalCommitTranAmount		is like CurrencyAmount
					Entrance Rules
						if (ZeroBalance)
							constraint (!ReduceEncumbranceBy entered)
								"CannotEnterReduceEncumbranceByAndZeroBalance"
						if (ReduceEncumbranceBy entered)
							constraint (DerivedEncumbranceAmount > ReduceEncumbranceBy)
								"ReduceEncumbranceByCannotbeGreaterThanBalanceAmount"
						constraint (GLCommitRel.Status.Released)
							"CannotChangeOrCancelEncumbrance"

					Action Rules
						if (ReduceEncumbranceBy entered)
							LocalTransactionAmount		= ReduceEncumbranceBy
						else
							LocalTransactionAmount		= DerivedEncumbranceAmount
						TransactionAmount				= TransactionAmount - LocalTransactionAmount

						if (!CurrencyTable entered)
							CurrencyTable														= GeneralLedgerJournalControl.CurrencyTable
						if (!CurrencyTable entered)
							CurrencyTable														= FinanceEnterpriseGroup.CurrencyTable
						LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
						LocalCurrencyCalculationGroup.CurrencyAmount							= TransactionAmount
						LocalCurrencyCalculationGroup.ExchangeDate								= TransactionDate
						LocalCurrencyCalculationGroup.FromCurrency								= CurrencyCode
			
						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= AccountingEntity.FunctionalCurrency
						LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= AccountingEntity.AlternateCurrency
						LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= AccountingEntity.AlternateCurrency2
						LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= AccountingEntity.AlternateCurrency3
						LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency
						LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency
						LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2
						LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3
						LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency					= FinanceCodeBlock.Project.Currency
						LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyOne
						LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyTwo
						LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyThree
						LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyFour
						LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= FinanceEnterpriseGroup.ReportCurrencyFive

						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyRate	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyRate		= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyRate	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyRate	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyRate			= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate			= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate			= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate			= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate			= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate			= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate

						ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
						if (AccountingEntity.AlternateCurrency entered)
							ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
						if (AccountingEntity.AlternateCurrency2 entered)
							ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
						if (AccountingEntity.AlternateCurrency3 entered)
							ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
						if (!AccountingEntity			= FinanceCodeBlock.ToAccountingEntity)
							ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
							if (FinanceCodeBlock.ToAccountingEntity.AlternateCurrency entered)
								ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
							if (FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2 entered)
								ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
							if (FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3 entered)
								ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
						if (FinanceCodeBlock.Project entered)
							ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
						if (FinanceEnterpriseGroup.ReportCurrencyOne entered)
							ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
						if (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
							ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
						if (FinanceEnterpriseGroup.ReportCurrencyThree entered)
							ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
						if (FinanceEnterpriseGroup.ReportCurrencyFour entered)
							ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
						if (FinanceEnterpriseGroup.ReportCurrencyFive entered)
							ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount

						LocalCommitTranAmount			= GLCommitRel.TransactionAmount
						LocalCurrencyCalculationGroup.CurrencyAmount							= LocalCommitTranAmount - LocalTransactionAmount
			
						invoke UpdateReleasedCommitment GLCommitRel
							invoked.TransactionAmount												= LocalCurrencyCalculationGroup.CurrencyAmount
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
							if (AccountingEntity.AlternateCurrency entered)
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
							if (AccountingEntity.AlternateCurrency2 entered)
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
							if (AccountingEntity.AlternateCurrency3 entered)
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
							if (!AccountingEntity			= FinanceCodeBlock.ToAccountingEntity)
								invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
								if (FinanceCodeBlock.ToAccountingEntity.AlternateCurrency entered)
									invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount 	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
								if (FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2 entered)
									invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
								if (FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3 entered)
									invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
							if (FinanceCodeBlock.Project entered)
								invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyOne entered)
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyThree entered)
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyFour entered)
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
							if (FinanceEnterpriseGroup.ReportCurrencyFive entered)
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount

			Memo 		is a State

			Posted	 	is a State
				CreatePostedGLSystemTransactionsNoRules is a Create Action
					restricted
					bypass field rules

					Entrance Rules
						include VerifyTemplatesAreNotProcessing						

					Action Rules
						PostingDate			= GeneralLedgerJournalControl.PostingDate
						if (!TransactionDate entered)
							TransactionDate		= GeneralLedgerJournalControl.TransactionDate
						if (!PrimaryLedger entered)
							PrimaryLedger		= GeneralLedgerJournalControl.PrimaryLedger
						if (!Description entered)
							Description			= GeneralLedgerJournalControl.Description
						if (!System entered)
							System				= GeneralLedgerJournalControl.System
						include AssignCodeBlockDefaults
						if (TransientFromGainLoss)
    						CurrencyTable = FinanceEnterpriseGroup.CurrencyTable
						if (initiating action != "GeneralLedgerTotal.ProcessRetainedEarningsSummary")  
							include NoRulesCurrencyCalculation
						DimensionCode		= FinanceCodeBlock.DimensionCode
						ChartSection		= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection

					Exit Rules
						invoke CreateHistoryGLTransDetailNoRules History GLTransactionDetail
							fill in fields from this instance
							if (TransientJournalizeGroup entered)
								invoked.JournalizeGroup					= TransientJournalizeGroup
							else
								invoked.JournalizeGroup					= "GL"+AccountingEntity+GeneralLedgerClosePeriod+GeneralLedgerJournalControl
							invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.AccountingEntity				= AccountingEntity
							invoked.TransactionAmount				= TransactionAmount
							invoked.ReportCurrencyAmount			= ReportCurrencyAmount
							invoked.FinanceCodeBlock				= FinanceCodeBlock
							invoked.PostingDate						= PostingDate
							invoked.TransactionDate					= TransactionDate
							invoked.PrimaryLedger					= PrimaryLedger
							if (JournalizeSystemTransactions)
								initialize invoked.OriginatingTransaction
							else
								invoked.OriginatingTransaction			= reference to GeneralLedgerTransaction
							invoked.RelatedJournalTransaction		= reference to GeneralLedgerTransaction

						if (!DoNotUpdateZoneTotal)
							include CreateZoneTotalRecord 
	
						LocalScenario										= FinanceEnterpriseGroup.ActualsScenario
						LocalGeneralLedgerTotal.Ledger						= FinanceCodeBlock.Ledger
						LocalGeneralLedgerTotal.System						= System
						LocalGeneralLedgerTotal.Currency					= CurrencyCode
						LocalGeneralLedgerTotal.EntityYearPeriod			= GeneralLedgerCalendarPeriod
						LocalGeneralLedgerTotal.AccountingUnit				= FinanceCodeBlock.AccountingUnit
						LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount
						LocalGeneralLedgerTotal.Project						= FinanceCodeBlock.Project
						LocalGeneralLedgerTotal.DimensionCode				= DimensionCode
						LocalGeneralLedgerTotal.PrimaryLedger				= PrimaryLedger
						invoke PostTransactions LocalGeneralLedgerTotal
							invoked.TransactionAmount	= TransactionAmount
							invoked.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AlternateAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							invoked.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							invoked.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
							invoked.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.ReportAmount1		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.ReportAmount2		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.ReportAmount3		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.ReportAmount4		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.ReportAmount5		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
							invoked.UnitsAmount			= UnitsAmount
							invoked.FinanceDimension1	= FinanceCodeBlock.FinanceDimension1
							invoked.FinanceDimension2	= FinanceCodeBlock.FinanceDimension2
							invoked.FinanceDimension3	= FinanceCodeBlock.FinanceDimension3
							invoked.FinanceDimension4	= FinanceCodeBlock.FinanceDimension4
							invoked.FinanceDimension5	= FinanceCodeBlock.FinanceDimension5
							invoked.FinanceDimension6	= FinanceCodeBlock.FinanceDimension6
							invoked.FinanceDimension7	= FinanceCodeBlock.FinanceDimension7
							invoked.FinanceDimension8	= FinanceCodeBlock.FinanceDimension8
							invoked.FinanceDimension9	= FinanceCodeBlock.FinanceDimension9
							invoked.FinanceDimension10  = FinanceCodeBlock.FinanceDimension10						
							invoked.PeriodEndingDate	= GeneralLedgerCalendarPeriod.Date

						if (ChartSection.IncomeStatement
						and !FinanceCodeBlock.GeneralLedgerChartAccount.AccountType.Memo)
							LocalInstFinanceCodeBlock						= FinanceCodeBlock
							if (FinanceEnterpriseGroup.FinanceDimension1Required
							and FinanceEnterpriseGroup.Dimension1ZoneBalancing)
					    		LocalInstFinanceDimension1						= FinanceCodeBlock.FinanceDimension1
								LocalInstFinanceCodeBlock.FinanceDimension1		= DerivedZoneFinanceDimension
							LocalSystemAccount 								= SystemAccount.UndistributedRetainedEarnings 
							constraint (first SystemAccountRel.GeneralLedgerChartAccount entered)
								"InvalidUndistributedRetainedEarnings<FinanceEnterpriseGroup.AccountLabel>"
							LocalGeneralLedgerTotal.Ledger					= FinanceCodeBlock.Ledger
							LocalGeneralLedgerTotal.System					= System
							LocalGeneralLedgerTotal.Currency				= CurrencyCode
							LocalGeneralLedgerTotal.EntityYearPeriod		= GeneralLedgerCalendarPeriod
							LocalGeneralLedgerTotal.AccountingUnit			= FinanceCodeBlock.AccountingUnit
							if (FinanceEnterpriseGroup.AccountingUnitRequired
							and AccountingEntity.AccountingUnitZoneBalancing)
								LocalInstAccountingEntity					= FinanceCodeBlock.ToAccountingEntity
					    		LocalInstAccountingUnit						= FinanceCodeBlock.AccountingUnit
								LocalGeneralLedgerTotal.AccountingUnit		= DerivedZoneAccountingUnit
							LocalGeneralLedgerTotal.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount
							LocalGeneralLedgerTotal.Project						= FinanceCodeBlock.Project
							LocalGeneralLedgerTotal.DimensionCode				= LocalInstFinanceCodeBlock.DimensionCode
							LocalGeneralLedgerTotal.PrimaryLedger				= PrimaryLedger
							if (FinanceEnterpriseGroup.NoDimensionUREPosting)
								initialize LocalGeneralLedgerTotal.Project
								initialize LocalInstFinanceCodeBlock.FinanceDimension2
								initialize LocalInstFinanceCodeBlock.FinanceDimension3
								initialize LocalInstFinanceCodeBlock.FinanceDimension4
								initialize LocalInstFinanceCodeBlock.FinanceDimension5
								initialize LocalInstFinanceCodeBlock.FinanceDimension6
								initialize LocalInstFinanceCodeBlock.FinanceDimension7
								initialize LocalInstFinanceCodeBlock.FinanceDimension8
								initialize LocalInstFinanceCodeBlock.FinanceDimension9
								initialize LocalInstFinanceCodeBlock.FinanceDimension10
								LocalGeneralLedgerTotal.DimensionCode			= LocalInstFinanceCodeBlock.DimensionCode
							invoke PostTransactions LocalGeneralLedgerTotal 
								invoked.TransactionAmount	= TransactionAmount
								invoked.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.AlternateAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
								if (FinanceEnterpriseGroup.NoDimensionUREPosting)
									invoked.ProjectAmount	= 0
								else
									invoked.ProjectAmount	= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
								invoked.ReportAmount1		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.ReportAmount2		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.ReportAmount3		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.ReportAmount4		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.ReportAmount5		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
								invoked.UnitsAmount			= UnitsAmount
								invoked.FinanceDimension1	= LocalInstFinanceCodeBlock.FinanceDimension1
								invoked.FinanceDimension2	= LocalInstFinanceCodeBlock.FinanceDimension2
								invoked.FinanceDimension3	= LocalInstFinanceCodeBlock.FinanceDimension3
								invoked.FinanceDimension4	= LocalInstFinanceCodeBlock.FinanceDimension4
								invoked.FinanceDimension5	= LocalInstFinanceCodeBlock.FinanceDimension5
								invoked.FinanceDimension6	= LocalInstFinanceCodeBlock.FinanceDimension6
								invoked.FinanceDimension7	= LocalInstFinanceCodeBlock.FinanceDimension7
								invoked.FinanceDimension8	= LocalInstFinanceCodeBlock.FinanceDimension8
								invoked.FinanceDimension9	= LocalInstFinanceCodeBlock.FinanceDimension9
								invoked.FinanceDimension10	= LocalInstFinanceCodeBlock.FinanceDimension10							
								invoked.PeriodEndingDate	= GeneralLedgerCalendarPeriod.Date
								invoked.IsUREChartAccount	= true
						if(GeneralLedgerEvent = "ES")
							invoke TriggerErrorSuspenseAlert
#ifdef module integration
							invoke ErrorSuspenseAlert
#endif

						LocalInstLedger						= FinanceCodeBlock.Ledger
						if (BudgetEntityLedgerRel exists
						and EncumbranceOptionForUpdate)
							invoke UpdateTemplateTotals BudgetTemplate
								invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
								invoked.PrmTransactionCodeBlock				= FinanceCodeBlock
								invoked.PrmEndDate							= GeneralLedgerCalendarPeriod
								invoked.PrmReportAmounts.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.PrmReportAmounts.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
								invoked.PrmReportAmounts.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
								invoked.PrmReportAmounts.ReportAmount1		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.PrmReportAmounts.ReportAmount2		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.PrmReportAmounts.ReportAmount3		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.PrmReportAmounts.ReportAmount4		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.PrmReportAmounts.ReportAmount5		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						if (TransientFromProcessRE)		
							include AddJournalTotals		

				Purge is a Purge Action
					restricted

FileCreationLogic.GeneralLedgerTransaction is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"GeneralLedgerTransaction_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
#ifdef module filecreation								
				FileCreationSetupPrm	is a FileCreationSetup
#endif				
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
#ifdef module filecreation							
				LocalGeneralLedgerTransactionGroupSelection		is a GeneralLedgerTransaction group in subject FileCreationGeneralLedgerTransaction
#endif
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      GeneralLedgerTransaction % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
#ifdef module filecreation															
					LocalGeneralLedgerTransactionGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalGeneralLedgerTransactionGroupSelection not entered
					or	GeneralLedgerTransaction within LocalGeneralLedgerTransactionGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= AccountingEntity
							invoked.Key2				= GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
							invoked.Key3				= GeneralLedgerJournalControl
							invoked.Key4				= GeneralLedgerTransaction
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
#endif
