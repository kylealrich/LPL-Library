PriceListItem is a BusinessClass
    owned by bl
    prefix is OPI
    classic name is OEPLITEM

    Ontology
        symbolic key is PriceListItem
            classic set name is OPISET1
            classic name is ITEM

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        BeginDate                 is Date
            classic name is BEG-DATE
        EndDate                   is Date
        SalesProhibited           is Boolean
            classic name is PROHIBIT-FL
        NoCharge				  is Boolean
            classic name is NO-CHARGE-FL
        SingleOrMultiplePricingUOM
            classic name is MULT-SPR-FL
        UnitOfMeasureBreakCode    is AlphaUpper size 1
            classic name is UOM-BRK-CD
            States
                UnitAddOn     value is "U"
                OverridePrice value is "O"
                Percentage    value is "P"
        UnitOfMeasures            is an UomX10InOeplitem
            classic name is UOM
        SellPriceFlags            is a SellPriceFlX10InOeplitem   		
            classic name is SELL-PRICE-FL
		UnitAddOnPercentPrice	  is a UnitAddOnPercentPriceGroupArray
        QuantityBreakCode         is AlphaUpper size 1
            classic name is QTY-BRK-CD
            States
                UnitAddOn     value is "U"
                OverridePrice value is "O"
                Percentage    value is "P"
		QuantityBreak			  is a QuantityPercentPriceAddOnGroupArray
        PriceDiscountCode
            classic name is DISC-CODE

	Derived Fields

		ProhibitedSaleMessage				is a MessageField
				restricted
				"ProhibitedSaleClass"
		NoChargeMessage						is a MessageField
				restricted
				"NoChargeSalesClass"
   			
   		DerivedMessageForSales				is a DerivedField
			type is MessageField
			restricted
   			if (SalesProhibited)
				return ProhibitedSaleMessage
			else
				return NoChargeMessage
    
    Conditions

        IsContract
            when (PriceListContractPromotion.Customer entered
            and   PriceListContractPromotion.Promotion not entered)

        IsPromotionNotEntered																			
            classic name is OPISET3
            restricted
            when (PriceListContractPromotion.Promotion not entered
            and   PriceListContractPromotion.Customer entered)

        IsPriceList		
        	restricted																				
            when (PriceListContractPromotion.Customer not entered
            and   PriceListContractPromotion.Promotion not entered)

        IsPromotion
        	restricted
            when (PriceListContractPromotion.Promotion entered
            and   PriceListContractPromotion.Customer not entered)
       
       	IsContractOrPromotion
       		restricted
       		when ((PriceListContractPromotion.Customer entered
            and    PriceListContractPromotion.Promotion not entered)     
			or    (PriceListContractPromotion.Promotion entered
            and    PriceListContractPromotion.Customer not entered))	
    Relations

		PriceBaseItemForUnitOfMeasureRel 
			one-to-many relation to PriceBaseItem
			Field Mapping uses symbolic key
				related.Company					     					 				= Company
			Instance Selection
				where (related.Currency									 				= PriceListContractPromotion.Currency
				and	   related.PriceBase								 				= PriceListContractPromotion.BaseName
				and    related.Item										 				= Item)	
    	
    	PriceListItemRel
			one-to-many relation to PriceListItem
			Field Mapping uses Set6
				related.Company										= Company
                related.PriceListContractPromotion.ListName			= PriceListContractPromotion.ListName
                related.Item										= Item
    		Instance Selection
    			where (related.PriceListContractPromotion.Promotion != PriceListContractPromotion.Promotion)
    	
    	OtherPriceListItemRel                                                                 
			one-to-many relation to PriceListItem
			Field Mapping uses Set5
			    related.Company										= Company
			    related.PriceListContractPromotion.Customer			= PriceListContractPromotion.Customer
			    related.Item										= Item
    		Instance Selection
    			where (related.PriceListContractPromotion.ListName != PriceListContractPromotion.ListName)
    	
    Sets

        Set3
            indexed
            Instance Selection
                where (IsPromotionNotEntered)
            Sort Order
                Company
                PriceListContractPromotion.Customer
                PriceListContractPromotion.ListName
				Item

        Set5
            indexed
            Instance Selection
                where (IsContract)
            Sort Order
                Company
                PriceListContractPromotion.Customer
				Item
                EndDate

        Set6
            indexed
            Instance Selection
                where (IsPromotion)
            Sort Order
                Company
                PriceListContractPromotion.ListName
				Item
                EndDate
		
		ByListName
			indexed
			Sort Order
				Company
				PriceListContractPromotion.ListName
				Item
				PriceListContractPromotion.Customer
				PriceListContractPromotion.Promotion
		
    Local Fields
    	I1 			 					is Numeric 2   					
    	I4 								is Numeric 2 	
    
    Field Rules
		BeginDate
			if (IsPromotion
			or  IsContract)
				default to PriceListContractPromotion.BeginDate
		
		EndDate
			if (IsPromotion
			or  IsContract)
				default to PriceListContractPromotion.EndDate
		
			if (IsPromotion)
				for each PriceListItemRel
					if (each.BeginDate >= BeginDate)
						constraint (each.BeginDate > EndDate)
							"DateOverlapsWithPromotion<each.PriceListContractPromotion.Promotion>"  	
					if (each.EndDate   >= BeginDate) 
						constraint (each.EndDate > EndDate)
							"DateOverlapsWithPromotion<each.PriceListContractPromotion.Promotion>"
					if (each.BeginDate <  BeginDate)
						constraint (each.EndDate < EndDate)
							"DateOverlapsWithPromotion<each.PriceListContractPromotion.Promotion>"
				
			if (IsContract)
				for each OtherPriceListItemRel
					if (each.BeginDate >= BeginDate)
						constraint (each.BeginDate > EndDate)
							"DateOverlapsWithContract<each.PriceListContractPromotion.ListName>"   		
					if (each.EndDate   >= BeginDate)
						constraint (each.EndDate > EndDate)
							"DateOverlapsWithContract<each.PriceListContractPromotion.ListName>"
					if (each.BeginDate <  BeginDate)
						constraint (each.EndDate < EndDate)
							"DateOverlapsWithContract<each.PriceListContractPromotion.ListName>"
		
		NoCharge
            if (SalesProhibited)
         		constraint (!NoCharge)
         			"CannotEnterNoChargeFor<DerivedMessageForSales>"														
		
		PriceDiscountCode
			if (SalesProhibited
			or NoCharge)
				cannot be entered
					"CannotEnterDiscountCodeFor<DerivedMessageForSales>"										
			
		UnitOfMeasureBreakCode
			if (SalesProhibited
			or  NoCharge)
				cannot be entered
					"CannotEnterUnitOfMeasurePricingCodeFor<DerivedMessageForSales>"	
			
			if (Company.CurrencyBasedPricing)																														
				constraint (UnitOfMeasureBreakCode.Percentage)
					"UnitOfMeasurePricingCodeOptionIsNotRequiredForACurrencyBasedPricingCompany"					
			
			if (SingleOrMultiplePricingUOM.SinglePricingUOM)																															
				cannot be entered
					"UnitOfMeasurePricingCodeOptionIsNotRequiredForAnItemWithOnePricingUnitOfMeasure"				
			
			if (IsPromotion)
				I1 = 1
				if (UnitOfMeasureBreakCode not entered)
					while (I1 <= 6)
						constraint (UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices 	   not entered
						or  UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices not entered
						or	UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents 				   = 0%)
							"UnitOfMeasurePricingCodeIsRequired"												
						I1 += 1
			
			if (action type.Update)
				I1 = 1
				while (I1 <= 6)
					if (UnitOfMeasures.UnitOfMeasure[I1] entered)
						if (UnitOfMeasureBreakCode.Percentage)
							constraint (UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices not entered
							and 		UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices not entered)
								"UnitAddOnAndOverridePriceAreNotRequiredFor<UnitOfMeasures.UnitOfMeasure[I1]>"
								
							constraint (UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents entered)
								"PercentIsRequiredFor<UnitOfMeasures.UnitOfMeasure[I1]>WhenUnitOfMeasureBreakCodeOptionIsPercentage"
						else
						if (UnitOfMeasureBreakCode.UnitAddOn)							
							constraint (UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents not entered
							and 		UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices not entered)
								"PercentsAndOverridePriceAreNotRequiredFor<UnitOfMeasures.UnitOfMeasure[I1].Description>"
	
							constraint (UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices entered)
								"UnitAddOnIsRequiredFor<UnitOfMeasures.UnitOfMeasure[I1]>WhenUnitOfMeasureBreakCodeOptionIsUnitAddOn"
						else
						if (UnitOfMeasureBreakCode.OverridePrice)
							constraint (UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents not entered
							and 		UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices not entered)
								"AndPercentsAndUnitAddOnAreNotRequiredFor<UnitOfMeasures.UnitOfMeasure[I1].Description>"
	
							constraint (UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices entered)
								"OverridePriceIsRequiredFor<UnitOfMeasures.UnitOfMeasure[I1]>WhenUnitOfMeasureBreakCodeOptionIsOverridePrice"
					else
						initialize UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices
						initialize UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents
						initialize UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices
						
					I1 += 1		
				
		QuantityBreakCode
			if (SalesProhibited
			or  NoCharge)
				cannot be entered
					"CannotEnterQuantityPricingCodeFor<DerivedMessageForSales>"          						
			
			if (Company.CurrencyBasedPricing)
				constraint (QuantityBreakCode.Percentage) 
					"CannotEnterQuantityPricingCodeOptionForACurrencyBasedPricingCompany"						
					
			if (SingleOrMultiplePricingUOM.MultiplePricingUOM)
				constraint (QuantityBreakCode.Percentage)
					"Item<Item>HasMultiplePricingUnitsOfMeasure,CannotEnterQuantityPricingCodeOption"				
			
			if (!SalesProhibited
			and	!NoCharge
			and	UnitOfMeasureBreakCode not entered)
				required
					"QuantityOrUnitOfMeasurePricingCodeRequiredWhenSalesIsNotProhibited"					

			constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[1].BreakQuantity entered)
				"UpperLimitIsRequired"        
			
		QuantityBreak
		
			if (QuantityBreakCode not entered)		
				constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[1].BreakQuantity not entered)
					"UpperLimitNotRequiredIfQuantityBreakCodeIsNotEntered" 									
			
			if (QuantityBreak.QuantityPercentPriceAddOnGroup.BreakQuantity entered)
				I1 = 1
				while (I1 <= 6)
					if (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity entered
					and QuantityBreak.QuantityPercentPriceAddOnGroup[I1 + 1].BreakQuantity not entered)
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity = 999999999)
							"LastUpperLimitShouldBe999999999"											
					I1 += 1
			
			if (QuantityBreak.QuantityPercentPriceAddOnGroup.BreakQuantity entered)
				I1 = 1
				while (I1 <= 6)																			
					if (I1 > 1
 					and QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity entered)
						I4 = I1 - 1
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity > QuantityBreak.QuantityPercentPriceAddOnGroup[I4].BreakQuantity)
							"UpperLimitShouldBeInIncreasingSequence"									
					I1 += 1	

			if (QuantityBreakCode not entered          
			or  QuantityBreakCode.Percentage
			or  QuantityBreakCode.UnitAddOn)
				constraint (QuantityBreak.QuantityPercentPriceAddOnGroup.BreakPrices not entered)
					"OverridePriceNotRequiredIfQuantityBreakCodeNotEntered,QuantityBreakCodeIsPercentageOrUnitAddOn"				
													
			if (QuantityBreakCode.OverridePrice)
				I1 = 1
				while (I1 <= 6)
					if (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity entered)
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices entered)
							"OverridePriceIsRequiredForThisQuantityBreakCodeOption"					
						I4 = I1 - 1	
						if (I1 > 1)
							constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices < QuantityBreak.QuantityPercentPriceAddOnGroup[I4].BreakPrices)
								"OverridePriceShouldBeInDecreasingSequence"							
					else
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPrices not entered)
							"OverridePriceIsNotRequired"											
					I1 += 1

			if (QuantityBreakCode not entered
			or  QuantityBreakCode.OverridePrice
			or  QuantityBreakCode.UnitAddOn)
				constraint (QuantityBreak.QuantityPercentPriceAddOnGroup.BreakPercent not entered)
					"PercentsNotRequiredIfQuantityBreakCodeNotEntered,QuantityBreakCodeIsOverridePriceOrUnitAddOn"		  		
				
			if (QuantityBreakCode.Percentage)
				I1 = 1
				while (I1 <= 6)
					if (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity entered)
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent entered)
							"PercentsIsRequiredForThisQuantityBreakCodeOption"	 	
						I4 = I1-1
						if (I1 > 1)


							constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent < QuantityBreak.QuantityPercentPriceAddOnGroup[I4].BreakPercent)
								"PercentShouldBeInIncreasingSequence"				
					else
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakPercent not entered)
							"PercentsIsNotRequired"							
					I1 += 1
			
			if (QuantityBreakCode not entered
			or	QuantityBreakCode.Percentage
			or 	QuantityBreakCode.OverridePrice)
				constraint (QuantityBreak.QuantityPercentPriceAddOnGroup.BreakAddOns not entered)
					"UnitAddOnsIsNotRequiredIfQuantityBreakCodeNotEntered,QuantityBreakCodeIsOverridePriceOrPercentage"				
				
			
			if (QuantityBreakCode.UnitAddOn)
				I1 = 1	
				while (I1 <= 6)
					if (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakQuantity entered)
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns entered)
							"UnitAddOnIsRequiredWhenQuantityBreakCodeOptionIsUnitAddOn"		
						I4 = I1-1
						if (I1 > 1)
							constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I4].BreakAddOns > QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns)
								"UnitAddOnShouldBeInDecreasingSequence"				
					else
						constraint (QuantityBreak.QuantityPercentPriceAddOnGroup[I1].BreakAddOns not entered)
							"UnitAddOnIsNotRequired"
					I1 += 1
			
		SingleOrMultiplePricingUOM
			if (current corporate date < PriceBaseItemForUnitOfMeasureRel.CurrentEffectiveDate)
				default to PriceBaseItemForUnitOfMeasureRel.LastMultipleSellPriceUnitsOfMeasure
			else 
			if (PriceBaseItemForUnitOfMeasureRel.NextEffectiveDate entered
			and current corporate date > PriceBaseItemForUnitOfMeasureRel.NextEffectiveDate)
				default to PriceBaseItemForUnitOfMeasureRel.NextMultipleSellPriceUnitsOfMeasure
			else
				default to PriceBaseItemForUnitOfMeasureRel.CurrentMultipleSellPriceUnitsOfMeasure
						
			
			if (SingleOrMultiplePricingUOM.MultiplePricingUOM)
				I1 = 1
				while (I1 <= 10)
					if (current corporate date < PriceBaseItemForUnitOfMeasureRel.CurrentEffectiveDate)
						UnitOfMeasures.UnitOfMeasure[I1] = PriceBaseItemForUnitOfMeasureRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure
					else 
					if (PriceBaseItemForUnitOfMeasureRel.NextEffectiveDate entered
					and current corporate date > PriceBaseItemForUnitOfMeasureRel.NextEffectiveDate)
						UnitOfMeasures.UnitOfMeasure[I1] = PriceBaseItemForUnitOfMeasureRel.NextSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure
					else
						UnitOfMeasures.UnitOfMeasure[I1] = PriceBaseItemForUnitOfMeasureRel.CurrentSellPriceByUOM.SellPriceByUOM[I1].UnitOfMeasure
					I1 += 1	
					
			if (SingleOrMultiplePricingUOM.SinglePricingUOM)
				if (current corporate date < PriceBaseItemForUnitOfMeasureRel.CurrentEffectiveDate)
					UnitOfMeasures.UnitOfMeasure[1] = PriceBaseItemForUnitOfMeasureRel.CurrentSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure
				else 
				if (PriceBaseItemForUnitOfMeasureRel.NextEffectiveDate entered
				and current corporate date > PriceBaseItemForUnitOfMeasureRel.NextEffectiveDate)
					UnitOfMeasures.UnitOfMeasure[1] = PriceBaseItemForUnitOfMeasureRel.NextSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure
				else
					UnitOfMeasures.UnitOfMeasure[1] = PriceBaseItemForUnitOfMeasureRel.CurrentSellPriceByUOM.SellPriceByUOM[1].UnitOfMeasure	
	Actions
		Create is a Create Action
			Action Rules
				increment PriceListContractPromotion.ItemCount

		T2VCreate is a Create Action				
			restricted 
			default label is untranslatable 
			bypass field rules 

		Update is an Update Action
		
		UpdateFromPriceListContractPromotion is an Instance Action
			Parameters
				PrmBeginDate is Date
				PrmEndDate   is Date
			Action Rules
				if (PrmBeginDate entered)
					BeginDate = PrmBeginDate
				
				if (PrmEndDate entered)
					EndDate   = PrmEndDate
		
		Delete is a Delete Action
			Action Rules
				decrement PriceListContractPromotion.ItemCount
