AssetTransactionImport is a BusinessClass
    owned by am
    prefix is TNC
    classic name is AMASTTRCNV

    Ontology
        symbolic key is AssetTransactionImport
            classic set name is TNCSET1
            classic name is SEQ-NUMBER


    Patterns
        implements StaticJava
        disable AuditIndex
		disable Auditing 
       	disable EffectiveDated

    Persistent Fields
		RunGroup
        RecordInError                 		is Boolean
		ErrorMessage						is Alpha 150
		Asset
		AssetTransaction
		AssetBookTransaction
		AssetManagementInterfaceResult

        Company                is an AssetCompany
        Book
        AssetLease
        AssetGroup
        TransactionDate        is Date
            classic name is TRANS-DATE
        TransactionAmount      is an InternationalAmount  
            classic name is TRANS-AMOUNT
		BookAmount 			   is an InternationalAmount
        Description
        AssetAccountGroup
            classic name is ACCT-GRP
        AssetType
            classic name for AssetType.Type is ASSET-TYPE
        AssetAccountType
            classic name is ACCT-TYPE
        AssetProcess
        DistributionAccount    is a FinanceCodeBlock
            classic name for DistributionAccount.AccountingUnit is ACCT-UNIT
            classic name for DistributionAccount.GeneralLedgerChartAccount is ACCOUNT
            classic name for DistributionAccount.Project is ACTIVITY
		PostingDate				is Date
		
	Transient Fields
        TransactionCurrency	   			is a FromCurrency	
        	derive value from DerivedTransactionCurrency
		TransientTransactionAmount		is a CurrencyExchangeDateGroup	
		
	Local Fields
    	InterfacedAssetTransaction		is an AssetTransaction view
    	InterfacedAssetBookTransaction	is an AssetBookTransaction view

		LocalByAsset					is AlphaUpper size 1
            States
                ByAsset				value is "A"
                    default label is "by Asset"
                ByConversionNumber	value is "C"
                    default label is "by Conversion Number"
		LocalYearEndDate				is Date
		LocalCreateAssetTransaction		is Boolean
		LocalTransactionAmount			is an InternationalAmount
		NewYearToDatePeriodDepreciation is an InternationalAmount
		NewCurrentPeriodDepreciation	is an InternationalAmount


		NewPeriodDepreciationLifeToDate	is an InternationalAmount
		I1								is Numeric size 2
		PreviousPeriod					is Numeric size 2		
		NewAssetBookPeriodHistory		is an AssetBookPeriodHistory view
		LocalPostingDate				is Date
		LocalDateRange					is a ProjectDateRange
				
    Conditions

        IsAstCnvExist
        	restricted
            when (AssetImportRel exists)

        IsBookCnvExist
        	restricted
            when (first AmastbkcnvRel exists)

        IsItemCnvExist
        	restricted
            when (first AmastitcnvRel exists)

		ExistingAssetBookExists
			restricted
			when (ExistingAssetBookRel exists)	
					
		ImportedAssetBookExists
			restricted
			when (ImportedAssetBookRel exists)	
			
    Derived Fields

        LocalAssetImport					is a DerivedField
            type is AlphaUpper size 22
            restricted
            return AssetImportRel.AssetImport

		AssetForImport						is a DerivedField
            type is like Asset
            restricted
			if (LocalByAsset.ByAsset)
				if (NonImportedAssetRel exists)
					return NonImportedAssetRel.Asset
				else
					return ImportedAssetByAssetRel.Asset
			else
				return last ImportedAssetByAssetImportRel.Asset
				
		DerivedBookCurrency					is a DerivedField
			type is like Currency
			return Book.Currency		
				
		DerivedTransactionCurrency			is a DerivedField
			type is like Currency
			if (Book.PostCurrency.Book)
				return Book.Currency
			else 
				if (AssetImportRel exists)					
					return AssetImportRel.Currency
				else 
					if (ImportedAssetByAssetRel exists)
						return ImportedAssetByAssetRel.Asset.Currency
					else
						if (NonImportedAssetRel exists)
							return NonImportedAssetRel.Currency
						else 
							constraint (AssetImportRel exists) 
								"AssetImportOrAssetIsRequired"
					
		

    Relations

        AmastbkcnvRel
            one-to-many relation to AssetBookImport
            Field Mapping uses Set1
                related.AssetImport 			= LocalAssetImport

        AmastitcnvRel
            one-to-many relation to AssetItemImport
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.AssetImport				= LocalAssetImport

        NonImportedAssetRel
            one-to-one relation to Asset
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset		 			= AssetTransactionImport.ConversionNumber

        ImportedAssetByAssetRel
            one-to-many relation to ImportedAsset
            Field Mapping uses Set2
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset		 			= AssetTransactionImport.ConversionNumber

        ImportedAssetByAssetImportRel
            one-to-many relation to ImportedAsset
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.AssetImport 			= AssetTransactionImport.ConversionNumber

        AssetImportRel
            one-to-one relation to AssetImport
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.AssetImport 			= AssetTransactionImport.ConversionNumber

        BookCalendarRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book
				related.Company		 			= Company
			Instance Selection
				where (related.YearBeginDate			<= LocalPostingDate
				and    related.BookCalendar.YearEndDate >= LocalPostingDate)
		
		AssetBookHistoryRel
			one-to-many relation to AssetBookHistory
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset		 					= AssetForImport
				related.Book							= Book
				related.Company		 					= Company
				related.YearEndDate						= LocalYearEndDate
		
		LastAssetBookHistoryRel
			one-to-many relation to AssetBookHistory
			Field Mapping uses Set3
				related.Asset		 					= AssetForImport
				related.Book							= Book
				related.Company		 					= Company
		
		AssetBookPeriodHistoryRel
			one-to-many relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
				related.Company		 							= Company
				related.Asset		 							= AssetForImport
				related.Book									= Book
				related.YearEndDate								= LocalYearEndDate
		
		CurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company	= Company
				related.Book	= Book
		
		ExistingAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book	
				
		ImportedAssetBookRel
			one-to-one relation to AssetBookImport
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup 
                related.AssetImport 			= AssetTransactionImport.ConversionNumber
            	related.Book					= Book
		
		AssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= AssetForImport
				related.Book					= Book
				
		ImportAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= AssetTransactionImport.ConversionNumber
				related.Book					= Book
				
        AssetRel
            one-to-one relation to Asset
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset		 			= AssetForImport
        
        AssetTransactionRel
        	one-to-one relation to AssetTransaction
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup	
                related.Asset                   = Asset
                related.Book					= Book
                related.Company					= Company
                related.AssetTransaction		= AssetTransaction
        
        AssetBookTransactionRel
        	one-to-one relation to AssetBookTransaction
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup	
                related.Asset                   = Asset
                related.Book					= Book
                related.Company					= Company
                related.AssetBookTransaction	= AssetBookTransaction


		AssetPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= DistributionAccount.Project
				related.GeneralLedgerSystemCode	= "AM"

    Sets

        Set1
            not indexed
            Sort Order
                AssetTransactionImport.ConversionNumber                
				AssetTransactionImport.SequenceNumber
				                


	Rule Blocks

		InterfaceThisAssetTransaction

	
			initialize RecordInError
			initialize ErrorMessage

			LocalCreateAssetTransaction		= false
			if (CurrentBookCalendarRel.PostingBook
			and Book = CurrentBookCalendarRel.Book)
				LocalCreateAssetTransaction = true
			












			if (LocalCreateAssetTransaction)
				if (AssetTransactionRel not exists)
					invoke Create AssetTransaction
						assign result to InterfacedAssetTransaction
						resume on error
							RecordInError						= true
							ErrorMessage						= error message
						if (DistributionAccount.Project entered)
							if (AssetPeriodOfPerformanceRel exists)
								LocalDateRange.BeginDate = AssetPeriodOfPerformanceRel.ProjectBeginDate
								LocalDateRange.EndDate   = AssetPeriodOfPerformanceRel.ProjectEndDate
							else
								LocalDateRange.BeginDate = DistributionAccount.Project.ProjectDateRange.BeginDate
								LocalDateRange.EndDate   = DistributionAccount.Project.ProjectDateRange.EndDate					
							constraint (PostingDate within LocalDateRange)
								"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<DistributionAccount.Project>DateRangeOf<LocalDateRange.BeginDate>Through<LocalDateRange.EndDate>"
						fill in fields from this instance
							except invoked.AssetTransactionAmount
						invoked.ProcessDate						= TransactionDate
						invoked.TransactionStatus				= TransactionStatus.History
						invoked.Asset							= AssetForImport
						invoked.ProcessAsset					= AssetForImport
						invoked.Reference						= "AssetManagementInterface"
						invoked.AssetAccountGroup				= AssetAccountGroup
						invoked.AssetManagementInterfaceResult	= PrmAssetManagementInterfaceResult
	   					if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency						= Book.Currency
							invoked.TransactionNumberOfDecimals 				= Book.Currency.NumberOfDecimals
						else
							invoked.TransientBookCurrency						= AssetRel.Currency 
							invoked.TransactionNumberOfDecimals					= AssetRel.Currency.NumberOfDecimals
						invoked.AssetTransactionAmount.TransactionAmount		= TransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate	  			= TransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= Book.Currency
						invoked.PostingDate										= PostingDate
						if (BookAmount entered)
							invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount = BookAmount
				else
					invoke Update AssetTransactionRel
						fill in fields from this instance
						invoked.AssetManagementInterfaceResult	= PrmAssetManagementInterfaceResult
							
			else
				if (AssetBookTransactionRel not exists)
					if (Book = CurrentBookCalendarRel.Book)
						invoke Create AssetBookTransaction
							assign result to InterfacedAssetBookTransaction
							resume on error
								RecordInError						= true
								ErrorMessage						= error message
							if (DistributionAccount.Project entered)
								if (AssetPeriodOfPerformanceRel exists)
									LocalDateRange.BeginDate = AssetPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.EndDate   = AssetPeriodOfPerformanceRel.ProjectEndDate
								else
									LocalDateRange.BeginDate = DistributionAccount.Project.ProjectDateRange.BeginDate
									LocalDateRange.EndDate   = DistributionAccount.Project.ProjectDateRange.EndDate					
								constraint (PostingDate within LocalDateRange)
									"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<DistributionAccount.Project>DateRangeOf<LocalDateRange.BeginDate>Through<LocalDateRange.EndDate>"
							fill in fields from this instance
							invoked.ProcessDate						= TransactionDate
							invoked.TransactionStatus				= TransactionStatus.History
							invoked.Asset							= AssetForImport
							invoked.Reference						= "AssetManagementInterface"
							invoked.AssetManagementInterfaceResult	= PrmAssetManagementInterfaceResult
		   					if (Book.PostCurrency.Book)
								invoked.TransientBookCurrency						= Book.Currency
								invoked.TransactionNumberOfDecimals 				= Book.Currency.NumberOfDecimals
							else
								invoked.TransientBookCurrency						= AssetRel.Currency 
								invoked.TransactionNumberOfDecimals					= AssetRel.Currency.NumberOfDecimals
							invoked.AssetTransactionAmount.TransactionAmount		= TransactionAmount
							invoked.AssetTransactionAmount.ExchangeDate	  			= TransactionDate
							invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= Book.Currency
							invoked.PostingDate										= PostingDate
							if (BookAmount entered)
								invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount = BookAmount
				else
					invoke Update AssetBookTransactionRel
						fill in fields from this instance
						invoked.AssetManagementInterfaceResult	= PrmAssetManagementInterfaceResult
			if (!RecordInError)
				Asset								= AssetForImport
				if (LocalCreateAssetTransaction)
					if (InterfacedAssetTransaction.AssetTransaction entered)
						AssetTransaction			= InterfacedAssetTransaction.AssetTransaction
					LocalPostingDate				= AssetTransaction.PostingDate
				else
					if (InterfacedAssetBookTransaction.AssetBookTransaction entered)
						AssetBookTransaction		= InterfacedAssetBookTransaction.AssetBookTransaction
					LocalPostingDate				= AssetBookTransaction.PostingDate
				AssetManagementInterfaceResult		= PrmAssetManagementInterfaceResult

				if (AssetAccountType.DepreciationExpense)
					if (AssetProcess.Addition
					or  AssetProcess.Adjustment
					or  AssetProcess.Disposal
					or  AssetProcess.Depreciation
					or  AssetProcess.Reinstatement
					or  AssetProcess.ReAdd)
						LocalYearEndDate = last BookCalendarRel.BookCalendar.YearEndDate
						if (AssetBookHistoryRel not exists
						and LocalYearEndDate entered)
							invoke Create AssetBookHistory
								invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
								invoked.Asset							= AssetForImport
								invoked.Book							= Book
								invoked.Company							= Company
								invoked.YearEndDate						= LocalYearEndDate
								invoked.BeginningLifeToDateDepreciation	= LastAssetBookHistoryRel.LifeToDateDepreciation
								invoked.LifeToDateDepreciation			= LastAssetBookHistoryRel.LifeToDateDepreciation
								invoked.Life							= AssetBookRel.Life
						

						if (AssetBookPeriodHistoryRel exists)
							for each AssetBookPeriodHistoryRel
								PreviousPeriod = each.AssetBookPeriodHistory.Period - 1
								display "ATI_PreviousPeriod<PreviousPeriod>"
								if (LocalPostingDate <= BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[each.AssetBookPeriodHistory.Period]
								and LocalPostingDate > BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[PreviousPeriod])
									if (LocalPostingDate < CurrentBookCalendarRel.YearBeginDate)
										display "ATI_1TransactionAmount<TransactionAmount>"
										NewYearToDatePeriodDepreciation = each.YearToDatePeriodDepreciation + PreviousPeriod
										invoke Update each
											invoked.YearToDatePeriodDepreciation = NewPeriodDepreciationLifeToDate
									else	
										NewCurrentPeriodDepreciation	= each.CurrentPeriodDepreciation + TransactionAmount
										NewYearToDatePeriodDepreciation = each.YearToDatePeriodDepreciation + TransactionAmount
										display "ATI_2TransactionAmount<TransactionAmount>"
										invoke Update each
											invoked.CurrentPeriodDepreciation		= NewCurrentPeriodDepreciation
											invoked.YearToDatePeriodDepreciation	= NewYearToDatePeriodDepreciation
											invoked.Basis							= AssetBookRel.Basis
										
										invoke UpdateFromImport each.AssetBookHistoryRel
											invoked.PrmTransactionAmount			= TransactionAmount
											display "ATI_3TransactionAmount<TransactionAmount>"
						else
							I1= 1
							while (I1 <= 55
							and BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] entered)
								PreviousPeriod = I1 - 1
								
								display "ATI_I1<I1>"
								display "ATI_XPreviousPeriod<PreviousPeriod>"
								display "ATI_XLocalYearEndDate<LocalYearEndDate>"
								
								if (LocalPostingDate <= BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]
								and LocalPostingDate > BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[PreviousPeriod]
								and LocalYearEndDate entered)
									display "ATI_X1TransactionAmount<TransactionAmount>"
									invoke Create AssetBookPeriodHistory
										assign result to NewAssetBookPeriodHistory
										invoked.Asset 							= AssetForImport
										invoked.Book							= Book
										invoked.Company							= Company
										invoked.YearEndDate						= LocalYearEndDate
										invoked.AssetBookPeriodHistory.Period	= I1
										invoked.CurrentPeriodDepreciation		= TransactionAmount
										invoked.YearToDatePeriodDepreciation	= TransactionAmount 
										invoked.Basis							= AssetBookRel.Basis

									invoke UpdateFromImport first NewAssetBookPeriodHistory.AssetBookPeriodHistory.AssetBookHistoryRel
										invoked.PrmTransactionAmount			= TransactionAmount
										display "ATI_X2TransactionAmount<TransactionAmount>"
									I1 = 55
								I1 += 1
							
			else
				invoke IncrementErrorCount PrmAssetManagementInterfaceResult
				if (AssetImportRel exists)
					invoke SetRecordInError AssetImportRel
		

    Field Rules
    	RunGroup
    		default to AssetImportRel.RunGroup

  		Description 
  			required
  			
        Book
            required
			if (Asset entered)
				constraint (ExistingAssetBookExists)
					"Book<Book>DoesNotExistInAsset<Asset>"
			else
				if (AssetImportRel exists)
					constraint (ImportedAssetBookExists)
						"AssetBook<Book>DoesNotExistInRunGroup<RunGroup>"
				else 
					constraint (ImportAssetBookRel exists)
						"AssetBook<Book>DoesNotExistInAsset<AssetTransactionImport.ConversionNumber>"
					
												
        Company
            required
            
		TransactionDate
			required
			if (PostingDate not entered)
				if (Company.DefaultPostingDate.CurrentPeriodEndDate)
					PostingDate = CurrentBookCalendarRel.CurrentPeriodDate
				else
					PostingDate = TransactionDate	
				
		
		TransactionAmount
			constraint (Book entered)
				"BookIsRequired"
			required
			if (TransactionCurrency = Book.Currency)	
				if (BookAmount not entered)
					BookAmount =  TransactionAmount
				else	
					constraint (BookAmount = TransactionAmount)
						"TransactionAndBookCurrenciesAreEqualTransactionAmountMustEqualBookAmount"
			else
				if (Book.PostCurrency.Asset)
					if (BookAmount not entered)
						TransientTransactionAmount.TransactionAmount 		= TransactionAmount
						TransientTransactionAmount.ExchangeDate 			= TransactionDate 
						TransientTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency	
						BookAmount =  TransientTransactionAmount.BaseAmount.EnteredCurrencyAmount
			
		AssetAccountType
			required

		AssetProcess
			required	
				
       	DistributionAccount
       		required
       		
       	PostingDate
			default to CurrentBookCalendarRel.CurrentPeriodDate 
			if (DistributionAccount.Project entered)
				if (AssetPeriodOfPerformanceRel exists)
					LocalDateRange.BeginDate = AssetPeriodOfPerformanceRel.ProjectBeginDate
					LocalDateRange.EndDate   = AssetPeriodOfPerformanceRel.ProjectEndDate
				else
					LocalDateRange.BeginDate = DistributionAccount.Project.ProjectDateRange.BeginDate
					LocalDateRange.EndDate   = DistributionAccount.Project.ProjectDateRange.EndDate					
				if (PostingDate not within LocalDateRange)
					confirmation required
						"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<DistributionAccount.Project>DateRange"  			     

	Actions
		Create is a Create Action

			Exit Rules
				if (TransactionCurrency = Book.Currency)	
					if (BookAmount not entered)
						BookAmount =  TransactionAmount
					else	
						constraint (BookAmount = TransactionAmount)
							"TransactionAndBookCurrenciesAreEqualTransactionAmountMustEqualBookAmount"
				else
					if (Book.PostCurrency.Asset)
						if (BookAmount not entered)
							TransientTransactionAmount.TransactionAmount 		= TransactionAmount
							TransientTransactionAmount.ExchangeDate 			= TransactionDate 
							TransientTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency	
							BookAmount =  TransientTransactionAmount.BaseAmount.EnteredCurrencyAmount
				
		Update is an Update Action

			Exit Rules
				if (TransactionCurrency = Book.Currency)	
					if (BookAmount not entered)
						BookAmount =  TransactionAmount
					else	
						constraint (BookAmount = TransactionAmount)
							"TransactionAndBookCurrenciesAreEqualTransactionAmountMustEqualBookAmount"
				else
					if (Book.PostCurrency.Asset)
						if (BookAmount not entered)
							TransientTransactionAmount.TransactionAmount 		= TransactionAmount
							TransientTransactionAmount.ExchangeDate 			= TransactionDate 
							TransientTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency	
							BookAmount =  TransientTransactionAmount.BaseAmount.EnteredCurrencyAmount
					
					
		Delete is a Delete Action
		
		InterfaceAssetTransactionsByLeaseCompany is a Set Action
			restricted
			completion message is "InterfaceAssetsSubmitted"
			Parameters
				PrmRunGroup							is a RunGroup
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
		        PrmLeaseCompany						is a GeneralLedgerCompany
		        PrmLease							is a Lease
		        PrmFromRange						is AlphaUpper 22
		        PrmToRange							is AlphaUpper 22
				PrmAssetManagementInterfaceResult	is a AssetManagementInterfaceResult
					context of PrmFinanceEnterpriseGroup

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				PrmLeaseCompany
					required

			Instance Selection			
				where (RunGroup									= PrmRunGroup
				and    FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
				and    AssetLease.LeaseCompany					= PrmLeaseCompany
				and   (AssetLease.Lease							= PrmLease
				or     PrmLease									not entered)
				and   (PrmFromRange								<= AssetTransactionImport.ConversionNumber
				and   (AssetTransactionImport.ConversionNumber	<= PrmToRange
				or     PrmToRange								not entered)))

			Local Fields
				Skip is Boolean
				
			Sort Order
				FinanceEnterpriseGroup
				AssetLease.LeaseCompany
				AssetLease.Lease
				AssetTransactionImport
				
			Action Rules

				Instance Rules

					LocalByAsset = PrmAssetManagementInterfaceResult.AttributeBy
					if (LocalByAsset.ByConversionNumber)
						Skip = AssetImportRel.RecordInError
					else
						Skip = false
					if (AssetBookRel exists)
						if (PrmAssetManagementInterfaceResult.ErrorCount < PrmAssetManagementInterfaceResult.ErrorLimit
						and AssetForImport entered
						and !Skip)
							include InterfaceThisAssetTransaction


		InterfaceAssetTransactionsByCompany is a Set Action
			restricted
			completion message is "InterfaceAssetsSubmitted"
			Parameters
				PrmRunGroup							is a RunGroup
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
		        PrmCompany							is a GeneralLedgerCompany
		        PrmFromRange						is AlphaUpper 22
		        PrmToRange							is AlphaUpper 22
				PrmAssetManagementInterfaceResult	is a AssetManagementInterfaceResult
					context of PrmFinanceEnterpriseGroup

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				PrmCompany
					required

			Instance Selection			
				where (RunGroup									= PrmRunGroup
				and    FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
				and    Company									= PrmCompany
				and   (PrmFromRange								<= AssetTransactionImport.ConversionNumber
				and   (AssetTransactionImport.ConversionNumber	<= PrmToRange
				or     PrmToRange								not entered)))

			Local Fields
				Skip is Boolean

			Sort Order
				FinanceEnterpriseGroup
				Company
				AssetTransactionImport
				
			Action Rules

				Instance Rules

					LocalByAsset = PrmAssetManagementInterfaceResult.AttributeBy
					if (LocalByAsset.ByConversionNumber)
						Skip = AssetImportRel.RecordInError
					else
						Skip = false
					if (AssetBookRel exists)
						if (PrmAssetManagementInterfaceResult.ErrorCount < PrmAssetManagementInterfaceResult.ErrorLimit
						and AssetForImport entered
						and !Skip)
							include InterfaceThisAssetTransaction
		
		FixAssetTransactions is a Set Action
			restricted
			completion message is "FixAssetTransactionsSubmitted"
			disable checkpoint			
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmAssetManagementInterfaceResult	is an AssetManagementInterfaceResult 	
			Instance Selection			
				where (RunGroup									not entered
				and    FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup

				and    AssetTransaction							not entered
				and    AssetBookTransaction						not entered)

			Sort Order
				FinanceEnterpriseGroup
				Company
				AssetTransactionImport
				
			Action Rules
				Instance Rules
	    			RunGroup = AssetImportRel.RunGroup
					AssetManagementInterfaceResult = PrmAssetManagementInterfaceResult
					
		FastDelete is a Purge Action
			restricted
			bypass relational integrity rules

		DeleteImportedRecords is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmRunGroup				  			is a RunGroup
				PrmAssetManagementInterfaceResult	is a AssetManagementInterfaceResult

			Instance Selection
				where (RunGroup					= PrmRunGroup
                and    FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
                and    AssetManagementInterfaceResult	= PrmAssetManagementInterfaceResult
				and   (AssetTransaction entered
				or     AssetBookTransaction entered)
				and   !RecordInError)
				
			Action Rules
			
				Instance Rules
					if (!AssetImportRel.RecordInError)
					    invoke FastDelete
		
		ResetAsset is an Instance Action
			restricted
			Action Rules
				Asset					= blank
				AssetTransaction		= blank
				AssetBookTransaction	= blank
		
