CustomerOrderLine is a BusinessClass
	owned by oe
	prefix is COL
	classic name is COLINE

	Ontology
		symbolic key is CustomerOrderLine
			classic set name is COLSET1
			classic name is LINE-NBR
			classic name for CustomerOrder is ORDER-NBR

	Patterns
		implements StaticJava
		disable AuditIndex
		enable explicit context override
		implements ContextualParent
		implements Archivable

	Persistent Fields

		Status                   			is Numeric size 1
			States
				NeedsCleanUp   value is 0
				Unreleased     value is 1
				Released       value is 2
				Canceled       value is 8
				ReadyForDelete value is 9
			protected
		FutureOrder 			 			is Boolean
			classic name is FUTURE-FL
		MajorSalesClass
			classic name is SALES-MAJCL
		MinorSalesClass
			classic name is SALES-MINCL
		InventoryLocation
			classic name is INV-LOC
		BillingProcessLevel
			classic name is PROCESS-LEVEL
		Customer
		CustomerItemEntered					is Boolean 
			classic name is CUST-ITEM-FL
		CustomerItem             			is a CustomerItemCrossReference
			classic name is CUST-ITEM
        LineType				 			is a BillingLineType
        	classic name is LINE-TYPE
        Item
        	classic name is ITEM
        ItemDescription
            classic name is ITEM-DESC
		OriginalLine			 			is Numeric size 4
			classic name is ORIG-LINE
		OriginalItem             is an Item
			classic name is ORIG-ITEM
		OriginalReplacementOrSubstitute     is AlphaUpper size 1
			classic name is ORIG-FL
			States
				ReplacementLine value is "R"
				SubstituteLine  value is "S"
		KitType					 			is AlphaUpper size 1
			classic name is KIT-FL
			States
				MakeToOrderKit value is "O"
				MakeToStockKit value is "S"
				NotAKit        value is "N"
		KitAllocated			   			is AlphaUpper size 1
			classic name is KIT-ALLOC-FL
			States
				KitAllocated          value is "0"
				KitNeedsOptionsChosen value is "1"
		HoldCode                 			is a ReceivableHoldCode
		SellUOM                  			is a UnitOfMeasure
			classic name is SELL-UOM
		SellingPriceUOM  					is a UnitOfMeasure
			classic name is SPR-UOM 
		SecondaryUOM             is a UnitOfMeasure
			classic name is SEC-UOM
		NoCharge							is Boolean
			classic name is NO-CHARGE-FL
		RateOverride             			is Boolean
			classic name is RATE-OVER-FL
        PriceStatus
        	classic name is PRICE-STATUS
        PriceDate         		       		is Date
        	classic name is PRICE-DATE
        EnteredPrice             			is a UnitPrice
        	classic name is ENTERED-PRICE
        	precision is DerivedEnteredPriceNumberOfDecimals
        		round to precision
        UnitPrice                			
        	classic name is UNIT-PRICE
        	precision is DerivedEnteredPriceNumberOfDecimals
		SellUnitPrice						is a UnitPrice
			classic name is SELL-UNIT-PRC
			precision is DerivedEnteredPriceNumberOfDecimals						
        SellPriceCurrency        			is a UnitPrice
        	classic name is SELL-PRC-CURR
        	precision is DerivedEnteredPriceNumberOfDecimals
        UnitCost                 			is an InternationalCost
        	classic name is UNIT-COST
		DiscountAmountCurrency   			is an InternationalAmount
			classic name is DISC-AMT-CURR
		DiscountCode						is a PriceDiscountCode
			classic name is DISC-CODE
		MultipleSellPrice      			is Boolean
			classic name is MULT-SPR-FL
		SellPriceToStock         			is a SellToStock
			classic name is SPR-TO-STOCK
		SellToStock
			classic name is SELL-TO-STOCK
		SecondaryToStock         			is a SellToStock
			classic name is SEC-TO-STOCK
		OrderDiscount			 			is Boolean
			classic name is ORD-DISC-FL
		CustomerShipTo
			classic name is CUST-SHIP-TO
		CreatePurchaseOrder      			is Boolean
			classic name is CREATE-PO
		Dropship				 			is Boolean
			classic name is DROPSHIP-FL
		Carrier                  			is a Vendor
			classic name is CARRIER
		PurchaseOrder
			classic name is PO-NUMBER
		POCode
			classic name is PO-CODE
		Vendor
			classic name is VENDOR
		PurchaseFromLocation
			context of Vendor
		ReferenceNumberForRequisition 		is like Requisition
			classic name is IF-REF-NBR
		RouteStop							is like RouteStop	
			classic name is STOP
		RouteCreate							is Boolean
			classic name is RTE-CREATE-FL
		RouteHeader							is like RouteHeader
			classic name for RouteHeader.Date is EXP-DELIV-DT
		Territory
			classic name is TERRITORY
		SalesRepresentative
			classic name is SALESMAN
		SalesRepresentative2	   			is a SalesRepresentative
			classic name is SALESMAN2
		CommissionSplitPercentage
			classic name is COMM-SPLIT
		CommissionRate1			 			is a ChrgRate
			classic name is COMM-RATE1
		CommissionRate2			 			is a ChrgRate
			classic name is COMM-RATE2
		EnteredDiscount              			is an InternationalAmount
			classic name is ENTERED-DISC
		DiscountTaken  	 		 			is an InternationalAmount
			classic name is DISC-TKN-CURR
		HSNSACCode                   
		TaxStatus							is AlphaUpper size 1
			States
				Taxable   value is "T"
				Exempt    value is "E"	
			classic name is TAX-EXEMPT-CD
		TaxCode
			classic name is TAX-CODE
		TaxableAmountCurrency          			is an InternationalAmount  
			classic name is TAXABLE-CURR
			protected
		OverrideTaxable			 			is an InternationalAmount
			classic name is OVR-TAXABLE
		EarlyDeliveryDate        			is Date
			classic name is EARLY-DL-DATE
		LateDeliveryDate         			is Date
			classic name is LATE-DL-DATE
		UserDate3                			is Date
		UserDate4                			is Date
		UserFld1                 			is a PurchaseOrderUserField2
			classic name is USER-FLD1
		UserFld2
			classic name is USER-FLD2
		UserFld3
			classic name is USER-FLD3
		ExpectedShipDate		 			is Date
			classic name is EXP-SHIP-DT
		AllocatedDate            			is Date
			classic name is ALLOCATE-DT
		ListName
			classic name is LIST-NAME
		ContractNumber           			is AlphaUpper size 14
			classic name is CONTRACT-NBR
		Promotion
			classic name is PROMOTION
		AtnObjId                 			is an ObjId
		AtnObjIdC                			is an ObjId
		BookedBySaleAnalysis     			is an AccountFlag			
			classic name is BOOKED-FL
		BookedDate               			is Date
			classic name is BOOKED-DATE
		BookedQuantity           			is a Quantity
			classic name is BOOKED-QTY
		Backordered		 					is Boolean
			classic name is BACK-ORD-FL
		OrderQuantity            			is a Quantity
			classic name is ORDER-QTY
		ShippedQuantity          			is a Quantity
			classic name is SHIPPED-QTY
			protected
		InvoiceQuantity          			is a Quantity
			classic name is INVOICE-QTY
			protected
		ReturnedQuantity         			is a Quantity
			classic name is RETURNED-QTY
			protected
		Firm                     			is Boolean
			classic name is FIRM-FL
		ShipComplete						is a ShipCompleteFlag
		PickingPriority
			classic name is PK-PRIORITY
		ProductTaxCategory
			classic name is PROD-TAX-CAT
		CancelledDate				 		is Date
			classic name is CXL-DATE
		CancelQuantity           			is a Quantity
			classic name is CXL-QTY
		CancelledOperator         			is a OrderEntryOperator
			classic name is CXL-OPR
		CancelledReason           			is a OrderCancelCreditReason
			classic name is CXL-REASON
		LastCommentSequence      			is a Sequence3
			classic name is LAST-COMM-SEQ
		LastAddOnChargeSequence  			is a Sequence3	
			classic name is LAST-MISC-SEQ
		MaterialSafetyDataSheet  			is Boolean
			classic name is MSDS-REQ-FL
		LastShipmentNumber       			is a WarehouseShipment
			classic name is LAST-SHIP-NBR
		WorkOrder
			classic name is WORK-ORDER
		WorkOrderSuf
			classic name is WORK-ORDER-SUF
		PriceRecType             			is AlphaUpper size 1
			classic name is PRICE-REC-TYPE
			States
				XClass value is "C"
				Item   value is "I"
		QuantityBreak         				is Boolean
			classic name is QTY-BREAK-FL
		InterCompany  						is AlphaUpper size 1
			classic name is INTR-COMP
			States
				InterCoCustomerOrder value is "O"
				InterCoShippingOrder value is "S"
				NotAnInterCoOrder    value is "N"
		ShipTerm
			classic name is FOB-CODE
		PortCode
			classic name is PORT-CD
		NatureOfTransactionCode  			is an IntrastatNatureOfTransactionCode
			classic name is NOTC
		StatisticalProcedure     			is an IntrastatStatisticalProcedure
			classic name is STAT-PROC
		SupplementaryUOM		 			is a UnitOfMeasure
		SupplementaryQuantity    			is a Quantity
			classic name is SUPLMNTARY-QTY
		ICNCode
			classic name is ICN-CODE
		GlobalLineType
			classic name is GLBL-LINE-TYPE
		SalesAccount             			is a TransactionCodeBlock
			classic name for SalesAccount.AccountingUnit is SLS-ACCT-UNIT
			classic name for SalesAccount.GeneralLedgerChartAccount is SLS-ACCOUNT
			classic name for SalesAccount.Project is ACTIVITY
		ExpenseAccount           			is a TransactionCodeBlock
			classic name for ExpenseAccount.AccountingUnit is EXP-ACCT-UNIT
			classic name for ExpenseAccount.GeneralLedgerChartAccount is EXP-ACCOUNT
		CostOfGoodsSoldAccount 				is a TransactionCodeBlock
			classic name for CostOfGoodsSoldAccount.AccountingUnit is CGS-ACCT-UNIT
			classic name for CostOfGoodsSoldAccount.GeneralLedgerChartAccount is CGS-ACCOUNT
			classic name for CostOfGoodsSoldAccount.Project is ACTIVITY-C
		FreightTotal					 	is an InternationalAmount
			classic name is FREIGHT-TOT
			protected
		InsuranceTotal					 	is an InternationalAmount
			classic name is INSURANCE-TOT
			protected
		CustomsTotal					 	is an InternationalAmount
			classic name is CSTMS-TOT
			protected
		OtherAddOnChargesTotal			 	is an InternationalAmount
			classic name is OTHER-AOC-TOT
			protected
		UNSPSCCode
		PointOfTitleTransfer

	Transient Fields
	
		CancelledQuantity 		                is a Quantity
		TermsCode
			derive value from CustomerOrder.TermsCode
		TransientOrderQuantity					is a Quantity
		TransientInventoryLocationCountry		is a Country
			default label is "Country/\Jurisdiction"
			derive value from CustomerOrder.InventoryLocation.PostalAddress.Country
		TransientIntrastatPortCode				is an IntrastatPortCode
			default label is "LoadingPort"
			derive value from DerivedPortCodeValue

	Context Fields
		CustomerOrderReturn	
	
	Local Fields
		ItemLocation
			context of Item
		UOMCalculation
			context of Item
		LocalCurrencyTable						is a CurrencyTable
		CurrencyExchange
		LocalItem								is an Item
		LocalProfitMargin						is Percent size 4.2
		LocalIntrastat							is Boolean
		LocalCurrency							is a Currency
		LocalCurrencyRate						is a CurrencyRate
		LocalCustomer							is like Customer
		LocalPromotion							is a Promotion
		I1										is Numeric size 2
		LocalContract							is a ListName
		LocalOrderQuantity						is a Quantity
		LocalOrderStockQuantity					is a Quantity
		LocalAvailableQuantity					is a Quantity
		LocalSellReplaceQuantity				is a Quantity
		LocalInputQuantity						is a Quantity
		LocalOutputQuantity						is a Quantity
		LocalPrintedQuantity					is a Quantity
		LocalQuantityInSellPriceUOM				is a Quantity
		LocalUnitCost							is like UnitCost
		LocalLineCost							is like UnitCost
		LocalSellToStock						is a SellToStock
		LocalSellPriceCurrency					is an InternationalCost
		LocalEnteredUnitPrice					is an InternationalCost
		LocalEnteredPrice						is an InternationalAmount
		LocalExtendedAmount 					is an InternationalAmount
		LocalEnteredDiscount					is an InternationalAmount	
		LocalDiscountAmountCurrency				is an InternationalAmount	
		LocalPriceBillAverage					is an InternationalAmount
		LocalPriceBaseAverage					is an InternationalAmount
		LocalOriginalMiscCurrency				is an InternationalAmount
		LocalCurrencyInput						is an InternationalAmount
		LocalOutputCurrencyAmount				is an InternationalAmount
		LocalInputCurrencyAmount				is an InternationalAmount
		LocalBreakQuantity		  				is 	Boolean
		LocalPriceQuantity						is like Quantity
		LocalDiscountCounter					is Numeric size 2
		LocalTotalDiscount						is an InternationalAmount
		LocalTotalAOC							is an InternationalAmount
		WorkNetAmount							is an InternationalAmount
		WorkAddonChargeDiscount					is an InternationalAmount
		TaxTotal			                    is like InternationalAmount
    	WorkNetAmountForCustomerOrderLine 		is like InternationalAmount
    	TotalWorkNetAmount						is like InternationalAmount
		GroupNetAmount              			is an InternationalAmount				    		
    	AddOnChargeWorkNetAmountForCustomerOrder is like InternationalAmount
		LocalTermsAmount			 			 is an  InternationalAmount
		LocalCalculateTerms			 			 is a CalculateTerms
		CalculateTax		
		LocalExecuteCalculateTax     			 is Alpha 1
		LocalDoCreateTaxLog						 is Boolean
		LocalTermsCalTrigger		 			 is Alpha 1
		LocalTermsDiscount						 is an  InternationalAmount
		LocalTermsDueDate			 			 is Date
		LocalPricePercent					     is Percent 5.2
		I2									     is Numeric size 2
		LocalPriceCurrency					     is a CurrencyRate
		LocalAccumulatePriceQuantity        	 is like Quantity
		LocalQuantityPrice                   	 is like Quantity
    	LocalAccumulatedQuantity            	 is like Quantity
    	LocalTransactionAmount					 is a CurrencyAmount
		LocalComputationForTotalsDone			 is Boolean
		LocalEnteredPriceCheck					 is Boolean
		LocalIntrastatComputed					 is Boolean
		LineTaxTotal							 is like InternationalAmount
		LocalComputedDiscount					 is like InternationalAmount
		WorkNetAmount2							 is like InternationalAmount
		LocalBasePrice							 is like InternationalCost
		LocalJurisdictionLookupKey  		     is Alpha 200
		LocalLineTotal							 is an InternationalAmount
		LocalDiscountableTotalAOC				 is an InternationalAmount
		LocalDiscountableAOC					 is an InternationalAmount
		LocalOrderQuantityDifference 			 is a Quantity

		LocalAlert	    						 is Alpha 100
		LocalConfigurationParameter				 is Alpha size up to 200


		LocalCompanyCurrency					is Alpha size 5
		LocalDerivedCurrency					is Alpha size 5
		LocalPrmFEG								is Alpha size 20
		LocalDelimiter							is Alpha size 5


		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2

		TaxLineItemView							is a TaxLineItem view
		LocalUniqueID							is like UniqueID
		LocalTaxLineItemCreated				is Boolean
		LocalTotalTaxLineItemAmount				is like InternationalAmount
		LocalLineItemNumber						is like DistributionSequence
		LocalExchangeDate						is an ExchangeDate
		Idx										is Numeric 2
		LocalMinorSalesClass					is like MinorSalesClass
		LocalGeneralLedgerSystemCode		    is a GeneralLedgerSystemCode
		
	Conditions
		IsOngoingAverageCalculation
			restricted
			when (InventoryCompanyRel.UseGlobalAverageCost
			and   GlobalAverageCostAndSOHRel.AverageComputation.Ongoing)

		CancelAllowed
			restricted
			when (Status.Released
			and  !CustomerOrder.OnProformaPaymentHold)
		
		TaxOutputDueAccount
			restricted
			when (TaxStatus.Taxable
			and TaxCode entered 
			and CompanyTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)
			
		TaxOutputAccount
			restricted
			when (TaxStatus.Taxable
			and TaxCode entered  
			and not CompanyTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)	
			
		ItemLocationExists
			restricted
			when (ItemLocationForCustomerOrderLocationRel exists)
		
		IsFullyReturned
			restricted
			when (ReturnedQuantity = OrderQuantity)
			
		HasItemCompanions
			when (ItemCompanionsRel exists)
			
		IsBackordered
			restricted
			when (WarehouseDemandLineForOrderRel.BackorderedQuantity entered)
		
		HasSubstituteItem
			restricted
			when (ItemSubstitutesRel exists)
			
		IsColset2
			restricted
			classic name is COLSET2
			when (Status.Released)

		IsColset4
			restricted
			classic name is COLSET4
			when (PriceStatus.AmalgamatedGroupPricing)

		IsOnHold
			restricted
			classic name is COLSET6
			when (HoldCode entered)

		IsColset7
			restricted
			classic name is COLSET7
			when (Status <  3)

		IsCommentsExist
			restricted
			when (first OrderEntryOrderCommentsForLineRel exists)

		IsCommitted
			restricted
			when (AtnObjId entered)

		IsCommittedCost
			restricted
			when (AtnObjIdC entered)

		IsCreatePurchaseOrder
			restricted
			when (Status.Released
			and   CreatePurchaseOrder
			and   OrderQuantity >  ShippedQuantity)

		IsInventoried
			restricted
			when (LineType.Inventoried)

		IsLocPricing	
			restricted
			when (Company.LocationBasedPricing)

		IsMadeToOrder
			restricted
			when (KitType.MakeToOrderKit)

		IsOverrideTxbl
			restricted
			when (OverrideTaxable entered)

		IsPoDropship
			restricted
			when (CreatePurchaseOrder
			and   Dropship
			and   Status.Released
			and   OrderQuantity >  InvoiceQuantity)

		IsReadyForPo
			restricted
			when (Status.Released
			and   HoldCode not entered
			and   CustomerOrder.HoldCode not entered
			and   CreatePurchaseOrder)

		IsSpecialOrNonStock
			restricted
			when (LineType.NonStock
			or    LineType.Special)
		
		IsInventoriedOrNonStock
			restricted
			when (LineType.NonStock
			or    LineType.Inventoried)
			
		IsSpecialItem
			restricted
			when (LineType.Special)

		IsCatchWeightItem
			restricted
			when (IsInventoriedOrNonStock
			and   Item.IsCatchWeightItem)
		
		IsStandardCostingCompany
			restricted
			when (InventoryCompanyRel.CostingMethod.StandardCosting)

		HasOrderWarehouseDemandLine
			restricted
			when (WarehouseDemandLineForOrderRel exists)
		   
		IsVendorAndLocationDefault
			restricted
			when (HoldCode entered
			or KitType.MakeToOrderKit
			or Company.RouteAndStop)
			
		IsUnreleased
			restricted
			when (Status.NeedsCleanUp
			or    Status.Unreleased)	

		IsPriceDateLessThanCurrentEffectiveDate
			restricted
			when (CustomerOrder.PriceDate <= PriceBaseItemRel.CurrentEffectiveDate)
		
		IsPriceDateBetweenCurrentandeffectiveDate		
			restricted	
			when (CustomerOrder.PriceDate > PriceBaseItemRel.CurrentEffectiveDate
			and   CustomerOrder.PriceDate < PriceBaseItemRel.NextEffectiveDate)
					
		IsPriceDateGreaterThanNextEffectiveDate			
			restricted
			when (CustomerOrder.PriceDate >= PriceBaseItemRel.NextEffectiveDate)
		
		IsShipmentExists
			restricted
			when (WarehouseShipmentLineRel exists)		
			
		HasDiscountable
			restricted
			when (OrderDiscount)
		
		HasNotDiscountable
			restricted
			when (!HasDiscountable)
		
		IsShipImmediate
			restricted
			when (CustomerOrder.OrderEntryOrderType.ShipImmediate)
		
		IsNotShipImmediateBackordered			
			restricted
			when (InventoryCompanyRel.AllocationMethod.Batch
			and   !CustomerOrder.OrderEntryOrderType.ShipImmediate
			and   !Backordered)
		
		HasBackorderControlForOrderEntry	
			restricted		
			when (Company.BackOrderControl.OrderEntryOnly
			or    Company.BackOrderControl.BothOrderEntryAndWarehouse)		
			
		IsPriceDateValid
			restricted
			when (IsPriceDateLessThanCurrentEffectiveDate
			or    IsPriceDateBetweenCurrentandeffectiveDate
			or    IsPriceDateGreaterThanNextEffectiveDate)
	
		HasPriceExists
			restricted
			when (PriceContractItemRel exists		
			or	PricePromotionItemRel exists
			or  PriceListItemRel      exists)
		
		HasPriceFromContract
			restricted
			when ((ContractItemRel exists
			or     PriceListSalesClassForContractRel exists
			or 	   DefaultContractRel exists)
			and    DefaultContractRel.BaseName.IsLineAPriceBaseItem)
			
		HasPriceFromPromotion
			restricted
			when ((PromotionItemRel exists
			or     PriceListSalesClassForPromotionRel exists
			or     DefaultPromotionRel exists)
			and    DefaultPromotionRel.BaseName.IsLineAPriceBaseItem)
			
		HasPriceFromPriceList
			restricted
			when ((PriceListItemRel exists
			or	   PriceListSalesClassForPriceListRel exists
			or     PriceListRel exists)
			and    PriceListRel.BaseName.IsLineAPriceBaseItem)
		
		DisplayPriceBreakFromPriceList
			restricted
			when (ListName entered and PriceRecType entered
			and   ContractNumber not entered
			and   Promotion not entered)
		
		DisplayPriceBreakFromContract
			restricted
			when (ContractNumber entered and PriceRecType entered)
			
		DisplayPriceBreakFromPromotion
			restricted
			when (Promotion entered and PriceRecType entered)
				
		DefaultPriceExists
			restricted
			when (HasPriceFromContract
			or	  HasPriceFromPromotion
			or    HasPriceFromPriceList)
			
		IsMultiplePricingUOM
			restricted
			when (PriceContractItemRel.SingleOrMultiplePricingUOM.MultiplePricingUOM		
			or	PricePromotionItemRel.SingleOrMultiplePricingUOM.MultiplePricingUOM
			or  PriceListItemRel.SingleOrMultiplePricingUOM.MultiplePricingUOM )


		IsUpdateQuantityChanged
			restricted
			when (OrderQuantity changed 
			or    SellUOM changed
			or    EnteredPrice changed
			or 	  SellingPriceUOM changed
			or	  NoCharge changed)
		
		IsUpdateLocationBasedPricing
			restricted
			when (Company.LocationBasedPricing entered
			and   InventoryLocation changed)
			
		HasCreatePurchaseOrder
			restricted
			when (CreatePurchaseOrder)
			
		IsNotCreatePurchaseOrder
			restricted
			when (!HasCreatePurchaseOrder)
					
		IsHoldCode
			when (Status.Released
			and HoldCode entered
			and CreatePurchaseOrder)  
			
		IsHoldCodeWithoutPO
			when (Status.Released
			and HoldCode entered
			and IsNotCreatePurchaseOrder)  
			
		IsNationalHoldCodeWithPO
			when (Status.Released
			and HoldCode not entered
			and Customer.ReceivableHoldCode not entered
			and CustomerOrder.CompanyCustomer.NationalAccountBalanceRel.ReceivableHoldCode entered
			and CreatePurchaseOrder)			
			
		IsNationalHoldCode
			when (Status.Released
			and HoldCode not entered
			and Customer.ReceivableHoldCode not entered
			and CustomerOrder.CompanyCustomer.NationalAccountBalanceRel.ReceivableHoldCode entered
			and IsNotCreatePurchaseOrder)			
			
		IsCustomerGroupHoldCodeWithPO
			when (Status.Released
			and HoldCode not entered
			and CustomerOrder.CompanyCustomer.ReceivableHoldCode not entered
			and Customer.ReceivableHoldCode entered
			and CreatePurchaseOrder)

		IsCustomerGroupHoldCode
			when (Status.Released
			and HoldCode not entered
			and CustomerOrder.CompanyCustomer.ReceivableHoldCode not entered
			and Customer.ReceivableHoldCode entered
			and IsNotCreatePurchaseOrder)

		IsCreateAllowed
			when ((CustomerOrder.Status.Released
			or    CustomerOrder.Status.Unreleased)
			and  !CustomerOrder.OnProformaPaymentHold)

		IsWarehouseDemandRequired
			when (not Dropship
			and not CustomerOrder.SalesQuote)

		IsAmalgamatedPricing
			when (PriceListSalesClassForPriceListRel.AmalgamatedPricing
			or	PriceListSalesClassForContractRel.AmalgamatedPricing
			or	PriceListSalesClassForPromotionRel.AmalgamatedPricing)

		DisplayOnlyForLoggedInUser
			restricted

			when  ((actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	
			and		DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany
			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.Customer)

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomer	
			and		Company = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany
			and		Customer = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.Customer))

		HasOpenQuantity
			restricted
			when (ShippedQuantity != OrderQuantity)

		IsCancelled
			restricted
			when (CancelQuantity entered)
		
		IsManualOverridePricing
			restricted
			when (LocalEnteredPriceCheck
			and  (action type.Create or EnteredPrice changed))
			
		HasBrokenCaseCharge
			restricted
			when  (OrderEntryCustomerRel.BrokenCaseCharge
			and    Item.BrokenCaseCharge		
			and    MultipleSellPrice
			and   (CustomerShipTo not entered
			or     CustomerShipTo.BrokenCaseCharge)
			and    CurrentPriceListRel.Miscellaneous entered)	
			
		TaxEntityUsesVertex										
			restricted				 							
			when (TaxEntityRel.ThirdParty.VertexOSeries)	

		HasValidOrderQuantityForItemLoc
			restricted
			when ((ItemLocationForCustomerOrderLocationRel.MinimumSaleQuantity not entered 
			or LocalOrderQuantity >=ItemLocationForCustomerOrderLocationRel.MinimumSaleQuantity)
			and (ItemLocationForCustomerOrderLocationRel.MaximumSaleQuantity not entered 
			or LocalOrderQuantity <= ItemLocationForCustomerOrderLocationRel.MaximumSaleQuantity))
			
		IsTaxAfterTerms
			restricted
			when ((TaxEntityRel.UseTaxCodeAccounts and TaxEntityRel.TaxTerms.Taxafterterms)
			or CompanyTaxCodeRel.TaxTerms.Taxafterterms)
			
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		DoTaxCalculation
            restricted
            when (not TaxEntityRel.ThirdParty.Sabrix   
            or    not TaxEntityRel.DelayTaxProcessing  
            or	  Status.Released
			or    Status.ReadyForDelete)			   
		
		IsOneSourceTax
			restricted
			when (TaxStatus.Taxable
			and	  TaxEntityRel.ThirdParty.Sabrix)
		
		HasPointOfTitleTransfer
			restricted
			when (PointOfTitleTransfer entered
			and	  TaxEntityRel.ThirdParty.Sabrix)
		
		SingleCallToOneSource
			restricted
			when (IsOneSourceTax
			and	  TaxEntityRel.DelayTaxProcessing
			and	  CustomerOrder.DerivedLineCount <= 200)

		IsVertexTax
			restricted
			when (TaxStatus.Taxable
			and   TaxEntityUsesVertex)

		SingleCallToVertex
			restricted
			when (IsVertexTax
			and	  TaxEntityRel.VertexCallMethod.ByTransaction
			and	  CustomerOrder.DerivedLineCount <= 200)

	Relations
		GlobalAverageCostAndSOHRel
            one-to-one relation to GlobalAverageCostAndSOH
            Field Mapping uses symbolic key
                related.Company           = Company
                related.Item              = Item
		
		TaxTableRel
			one-to-many relation to TaxTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxCode 				= TaxCode
			Instance Selection
				where (related.EffectiveDate	<= CustomerOrder.OrderDate)
				
		CustomerOrderLineDistributionsRel is a CustomerOrderLineDistribution set
		
		PurchasingCompanyRel
			one-to-one relation to PurchasingCompany
			Field Mapping uses symbolic key
				related.Company							= Company
		
		PayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company 						= Company

		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company 						= Company
				
		PurchaseOrderInterfacesRel
			one-to-many relation to PurchaseOrderInterface
			Field Mapping uses Set1
				related.ProcurementGroup				= PurchasingCompanyRel.ProcurementGroup
				related.Company							= Company
				related.Vendor							= Vendor
				related.PurchaseFromLocation    		= PurchaseFromLocation
			Instance Selection    
				where (related.PurchaseOrderInterface.SourceDocumentOrigin = "OE"
				and	   related.PurchaseOrderInterface.SourceDocumentNumeric = CustomerOrder)
		
				
		CustomerOrderLineUOMRel
			one-to-one relation to CustomerOrderLineUOM
			Field Mapping uses symbolic key
				related.Company           				= Company
				related.CustomerOrder     				= CustomerOrder
				related.CustomerOrderLine 				= CustomerOrderLine

		CustomerOrderAddOnChargesRel is a CustomerOrderAddOnCharge set

		CustomerOrderHeaderAddOnChargesRel 
			one-to-many relation to CustomerOrderAddOnCharge
			Field Mapping uses symbolic key
				related.Company  						= Company                
				related.CustomerOrder					= CustomerOrder
			Instance Selection
				where (related.CustomerOrderLine not entered)
		
		CurrentPriceListRel
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses ByListName
				related.Company								= Company
				related.PriceListContractPromotion.ListName	= DerivedPriceList
				 
		PriceListContractPromotionRel
			one-to-one relation to PriceListContractPromotion
			Field Mapping uses symbolic key
				related.Company                              = Company
				related.PriceListContractPromotion.Customer  = Customer
				related.PriceListContractPromotion.ListName  = ContractNumber
				related.PriceListContractPromotion.Promotion = blank

		OrderEntryCustomerRel
			one-to-one relation to OrderEntryCustomer
			Field Mapping uses symbolic key
				related.Company  						= Company
				related.Customer 						= Customer

		OrderEntryOrderCommentsForLineRel is a OrderEntryOrderComment set
			Instance Selection
				where (related.CustomerOrderLine = CustomerOrderLine)
		
		OrderCancelCreditReasonRel
			one-to-one relation to OrderCancelCreditReason
			Field Mapping uses symbolic key
				related.Company                 		= Company
				related.OrderCancelCreditReason 		= CancelledReason

		PurchaseOrderLineSourcesRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses Set2
				related.PurchaseOrderLineSource.OperatingCompany         = Company
				related.PurchaseOrderLineSource.SourceDocumentOrigin     = "OE"
				related.PurchaseOrderLineSource.SourceDocumentNumeric    = CustomerOrder
				related.PurchaseOrderLineSource.SourceDocumentLineNumber = CustomerOrderLine

		WarehouseDemandRel
			one-to-one relation to WarehouseDemand
			Field Mapping uses symbolic key
				related.Company                          = Company
				related.WarehouseDemand.DemandSystemCode = "OE"
				related.WarehouseDemand.DemandDocument   = CustomerOrder
	   			related.WarehouseDemand.DemandCompany	 = Company
	   			
		WarehouseDemandLinesRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set1
				related.Company 								= Company
				related.WarehouseDemand.DemandSystemCode 		= "OE"
				related.WarehouseDemand.DemandDocument 			= WarehouseDemandRel.WarehouseDemand.DemandDocument
				related.WarehouseDemand.DemandCompany			= WarehouseDemandRel.WarehouseDemand.DemandCompany

        WarehouseDemandLineForOrderRel
            one-to-one relation to WarehouseDemandLine
            Field Mapping uses symbolic key
                related.Company 								= Company
                related.WarehouseDemand.DemandSystemCode 		= DemandSystemCode.CustomerOrder //"OE" 
                related.WarehouseDemand.DemandDocument 			= WarehouseDemandRel.WarehouseDemand.DemandDocument
                related.WarehouseDemand.DemandCompany			= WarehouseDemandRel.WarehouseDemand.DemandCompany
                related.InventoryLocation 						= InventoryLocation
                related.Item								 	= Item
                related.WarehouseDemandLine.DemandDocumentType 	= DemandDocumentType.Shipment 
                related.WarehouseDemandLine.LineNumber 			= CustomerOrderLine
                related.WarehouseDemandLine.ComponentSequence 	= blank
		
		WarehouseDemandLineForCancelLineRel
            one-to-one relation to WarehouseDemandLine
            Field Mapping uses symbolic key
                related.Company 								= CustomerOrder.Company
                related.WarehouseDemand.DemandSystemCode 		= DemandSystemCode.CustomerOrder
                related.WarehouseDemand.DemandDocument 			= CustomerOrder
                related.WarehouseDemand.DemandCompany			= CustomerOrder.Company
                related.InventoryLocation 						= InventoryLocation
                related.Item								 	= Item
                related.WarehouseDemandLine.DemandDocumentType 	= DemandDocumentType.Shipment
                related.WarehouseDemandLine.LineNumber 			= CustomerOrderLine
                related.WarehouseDemandLine.ComponentSequence 	= blank

		WarehouseDemandLineOpenQuantityRel
            one-to-one relation to WarehouseDemandLine
            Field Mapping uses Set1
                related.Company 								= CustomerOrder.Company
                related.WarehouseDemand.DemandSystemCode 		= DemandSystemCode.CustomerOrder
                related.WarehouseDemand.DemandDocument 			= CustomerOrder
                related.WarehouseDemand.DemandCompany			= CustomerOrder.Company
                related.WarehouseDemandLine.LineNumber 			= CustomerOrderLine
                related.WarehouseDemandLine.ComponentSequence 	= blank
                related.InventoryLocation 						= InventoryLocation
                       
    	WarehouseDemandForCancelOrderRel
            one-to-many relation to WarehouseDemand
            Field Mapping uses symbolic key
                related.Company           						= CustomerOrder.Company
                related.WarehouseDemand.DemandSystemCode		= "OE" 
                related.WarehouseDemand.DemandDocument			= CustomerOrder 
	            related.WarehouseDemand.DemandCompany			= CustomerOrder.Company
	                		
		WarehouseDemandLinesForCancelOrderRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set5
				related.Company           						= CustomerOrder.Company
				related.InventoryLocation 						= CustomerOrder.InventoryLocation
				related.Item              						= Item		
				related.EstimatedTransactionDate				= ExpectedShipDate
				related.WarehouseDemandLine.DemandDocumentType	= "SH"
				related.WarehouseDemand.DemandSystemCode		= "OE" 
				related.WarehouseDemand.DemandDocument			= CustomerOrder
				related.WarehouseDemand.DemandCompany			= CustomerOrder.Company
				related.WarehouseDemandLine.LineNumber			= CustomerOrderLine
				related.WarehouseDemandLine.ComponentSequence	= blank

		WarehouseDemandLinesForItemLocationRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set5
				related.Company           						= Company
				related.InventoryLocation 						= CustomerOrder.InventoryLocation
				related.Item              						= Item
			Instance Selection
				where (related.WarehouseDemand.DemandSystemCode	= "OE"
				and    related.IsDemandType)

		WarehouseShipmentLineRel
			one-to-many relation to WarehouseShipmentLine
			Field Mapping uses Set2
				related.Company                             	= Company
				related.RequestingDocument.DemandSystemCode 	= "OE"
				related.RequestingDocument.DocumentNumber   	= WarehouseDemandRel.WarehouseDemand.DemandDocument
				related.WarehouseShipmentLine               	= CustomerOrderLine
				
		ItemCompanionsRel
			one-to-many relation to AssociatedItem
			Field Mapping uses symbolic key
				related.ItemGroup 					= InventoryCompanyRel.ItemGroup
				related.Item      					= Item
			Instance Selection
				where (related.AssociatedItem.AssociatedItemSubType.Companion)

		ItemSubstitutesRel
			one-to-many relation to AssociatedItem
			Field Mapping uses symbolic key
				related.ItemGroup 					= InventoryCompanyRel.ItemGroup
				related.Item      					= Item
			Instance Selection
				where (related.AssociatedItem.AssociatedItemSubType.Substitute)
		
		ReplacementItemSubstitutesRel
			one-to-many relation to AssociatedItem
			Field Mapping uses symbolic key
				related.ItemGroup 					= InventoryCompanyRel.ItemGroup
				related.Item      					= Item.ReplacementItem
			Instance Selection
				where (related.AssociatedItem.AssociatedItemSubType.Substitute)
				
		KitItemRel
			one-to-one relation to KitItem
			Field Mapping uses symbolic key
				related.ItemGroup					= InventoryCompanyRel.ItemGroup
				related.KitItem.Company				= Company
				related.KitItem.InventoryLocation	= InventoryLocation
				related.KitItem.Item				= Item

		KitItemNoCompanyNoLocationRel
			one-to-one relation to KitItem
			Field Mapping uses symbolic key
				related.ItemGroup					= InventoryCompanyRel.ItemGroup
				related.KitItem.Company				= blank
				related.KitItem.InventoryLocation	= blank
				related.KitItem.Item				= Item
				
		KitComponentsRel
			one-to-many relation to KitComponent
			valid when (IsMadeToOrder)
			Field Mapping uses symbolic key
				related.ItemGroup         			= InventoryCompanyRel.ItemGroup
				related.KitItem.Company           	= Company
				related.KitItem.InventoryLocation 	= InventoryLocation
				related.KitItem.Item	  			= Item

		KitItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company					    = Company
				related.InventoryLocation			= InventoryLocation
				related.Item						= LocalItem
				
		CustomerItemUPCRel
			one-to-many relation to ItemUPC
			Field Mapping uses symbolic key
				related.ItemGroup					= InventoryCompanyRel.ItemGroup
				related.Item						= Item
		
		DefaultSellingItemUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup					= InventoryCompanyRel.ItemGroup
				related.Item						= Item
			Instance Selection
				where (related.ValidForSelling.Default)
		
		DefaultSellingPriceItemUOMsRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup					= InventoryCompanyRel.ItemGroup
				related.Item						= Item
			Instance Selection
				where (related.ValidForSellPrice.Default)
		
		SellingItemUOMRel
	   		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellUOM
			Instance Selection
				where (related.OKForSelling)
				
	   	SellingPriceItemUOMRel
	   		one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingPriceUOM
			Instance Selection
				where (related.OKForSellPrice)

		ItemLocationForCustomerOrderLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company           			= Company
				related.InventoryLocation 			= CustomerOrder.InventoryLocation
				related.Item              			= Item

		BillingItemGeneralLedgerAccountRel
			one-to-one relation to BillingItemGeneralLedgerAccount
			Field Mapping uses symbolic key
				related.Company                                             = Company
				related.BillingItemGeneralLedgerAccount.BillingProcessLevel = BillingProcessLevel
				related.BillingItemGeneralLedgerAccount.MajorSalesClass     = Item.MajorSalesClass
				related.BillingItemGeneralLedgerAccount.MinorSalesClass     = Item.MinorSalesClass

		BillingItemGeneralLedgerAccountsRel
			one-to-one relation to BillingItemGeneralLedgerAccount
			Field Mapping uses symbolic key
				related.Company                                             = Company
				related.BillingItemGeneralLedgerAccount.BillingProcessLevel = BillingProcessLevel
				related.BillingItemGeneralLedgerAccount.MajorSalesClass     = Item.MajorSalesClass
				related.BillingItemGeneralLedgerAccount.MinorSalesClass     = LocalMinorSalesClass
				
		CustomerItemCrossReferencesRel
			one-to-many relation to CustomerItemCrossReference
			Field Mapping uses Set2
				related.Company    					= Company
				related.Customer					= Customer
			Instance Selection
				where (related.Item					= CustomerItem)
		
		CustomerItemCrossReferenceForCustomersRel
			one-to-many relation to CustomerItemCrossReference
			Field Mapping uses Set2
				related.Company    					= Company
				related.Customer					= LocalCustomer
			Instance Selection
				where (related.Item					= CustomerItem)
				
		MSDSAcknowledgementsRel
			one-to-many relation to MSDSAcknowledgement
			Field Mapping uses Set1
				related.Company    					= Company
				related.Item						= Item
				related.Customer					= Customer
				related.CustomerShipTo				= CustomerShipTo

		ItemReplenishmentSourcesRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses symbolic key
				related.Company    					= Company
				related.InventoryLocation			= InventoryLocation
				related.Item						= Item

  		BillingItemAddOnCostsRel
  			one-to-many relation to BillingItemAddOnCost
  			Field Mapping uses Set2
  				related.Company						= Company
  				related.BillingItemAddOnCost.Item	= Item

  		OrderEntryItemAddOnChargeRel
  			one-to-one relation to OrderEntryAddOnCharge
  			Field Mapping uses symbolic key
  				related.Company							= Company
  				related.OrderEntryAddOnCharge.Misc		= all BillingItemAddOnCostsRel.BillingItemAddOnCost.OrderEntryAddOnCharge.Misc
  				related.OrderEntryAddOnCharge.Currency	= LocalCurrency

  		PriceBaseItemRel
  			one-to-one relation to PriceBaseItem
  			Field Mapping uses symbolic key
  				related.Company				= Company
  				related.InventoryLocation	= DerivedLocation
  				related.Currency			= DerivedCurrency
  				related.PriceBase			= DerivedPriceBase
  				related.Item				= Item

		ContractItemRel
			one-to-many relation to PriceListItem
  			Field Mapping uses Set5
  			 	related.Company											= Company
				related.PriceListContractPromotion.Customer 			= CustomerOrder.Customer
				related.Item											= Item
			Instance Selection
				where (related.BeginDate	<=  CustomerOrder.PriceDate
				and	   related.EndDate		>=  CustomerOrder.PriceDate)
					
		PromotionItemRel
			one-to-many relation to PriceListItem
  			Field Mapping uses Set6
  			 	related.Company											= Company
				related.PriceListContractPromotion.ListName 			= CustomerOrder.ListName
				related.Item											= Item
			Instance Selection
				where (related.BeginDate	<=  CustomerOrder.PriceDate
				and	   related.EndDate		>=  CustomerOrder.PriceDate)

		DefaultContractRel
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses Set5
			 	related.Company										= Company
				related.PriceListContractPromotion.Customer			= CustomerOrder.Customer
			Instance Selection
				where (related.BeginDate						   <=  CustomerOrder.PriceDate
				and	   related.EndDate							   >=  CustomerOrder.PriceDate
				and    related.Percent entered)

	  	DefaultPromotionRel
	  		one-to-many relation to PriceListContractPromotion
	  		Field Mapping uses Set6
	  			related.Company										= Company
				related.PriceListContractPromotion.ListName			= CustomerOrder.ListName		
			Instance Selection
				where (related.BeginDate						   <=  CustomerOrder.PriceDate
				and	   related.EndDate							   >=  CustomerOrder.PriceDate
				and	   related.Percent entered)

		
  		PriceContractItemRel
  			one-to-many relation to PriceListItem
  			Field Mapping uses Set5
  			 	related.Company				= Company
				related.PriceListContractPromotion.Customer 			= CustomerOrder.Customer
				related.Item				= Item
			Instance Selection
				where (related.BeginDate	<=  CustomerOrder.PriceDate
				and	   related.EndDate		>=  CustomerOrder.PriceDate
				and    related.PriceListContractPromotion.Customer entered)
				
  		PricePromotionItemRel
  			one-to-many relation to PriceListItem
  			Field Mapping uses Set6
  			 	related.Company				= Company
				related.PriceListContractPromotion.ListName = CustomerOrder.ListName
				related.Item				= Item
			Instance Selection
				where (related.BeginDate	<=  CustomerOrder.PriceDate
				and	   related.EndDate		>=  CustomerOrder.PriceDate
				and    related.PriceListContractPromotion.Promotion entered)
				
  		PriceListItemRel
  			one-to-one relation to PriceListItem
  			Field Mapping uses symbolic key
  				related.Company										= Company
  				related.PriceListContractPromotion.Customer			= blank
  				related.PriceListContractPromotion.ListName			= CustomerOrder.ListName
  				related.PriceListContractPromotion.Promotion		= blank
				related.Item										= Item

		PriceListSalesClassForPriceListRel
	  		one-to-many relation to PriceListSalesClass
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PriceListContractPromotion.Customer				= blank
				related.PriceListContractPromotion.ListName				= CustomerOrder.ListName
				related.PriceListContractPromotion.Promotion			= blank
		   	Instance Selection
		   		where (related.PriceListSalesClass.MajorSalesClass		= MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass 		= MinorSalesClass  
  				or     related.PriceListSalesClass.MinorSalesClass 		= blank))

		PriceListSalesClassForContractRel
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set5	
				related.Company											= Company 		
				related.PriceListContractPromotion.Customer				= CustomerOrder.Customer
			Instance Selection        
				where (related.PriceListSalesClass.MajorSalesClass	= MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass 	= MinorSalesClass  
  				or     related.PriceListSalesClass.MinorSalesClass 	= blank)
  				and   (related.BeginDate						   <=  CustomerOrder.PriceDate
				and	   related.EndDate							   >=  CustomerOrder.PriceDate))    

		PriceListSalesClassForPromotionRel
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set6
				related.Company											= Company 		
				related.PriceListContractPromotion.ListName				= CustomerOrder.ListName
			Instance Selection        
				where (related.PriceListSalesClass.MajorSalesClass	= MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass 	= MinorSalesClass  
  				or     related.PriceListSalesClass.MinorSalesClass 	= blank)
  				and   (related.BeginDate						   <=  CustomerOrder.PriceDate
				and	   related.EndDate							   >=  CustomerOrder.PriceDate))

		PriceListContractRel	
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses Set5
			 	related.Company										= Company
				related.PriceListContractPromotion.Customer			= CustomerOrder.Customer
			Instance Selection
				where (related.BeginDate						   <=  CustomerOrder.PriceDate
				and	   related.EndDate							   >=  CustomerOrder.PriceDate)

	  	PriceListRel
	  		one-to-one relation to PriceListContractPromotion
	  		Field Mapping uses symbolic key
	  			related.Company										= Company
	  			related.PriceListContractPromotion.Customer			= blank
				related.PriceListContractPromotion.ListName			= CustomerOrder.ListName
				related.PriceListContractPromotion.Promotion		= blank
	
	  	PriceListPromotionRel
	  		one-to-many relation to PriceListContractPromotion
	  		Field Mapping uses Set6
	  			related.Company										= Company
				related.PriceListContractPromotion.ListName			= CustomerOrder.ListName		
			Instance Selection
				where (related.BeginDate						   <=  CustomerOrder.PriceDate
				and	   related.EndDate							   >=  CustomerOrder.PriceDate)
				
		ItemGroupKitItemRel
			one-to-one relation to KitItem
			Field Mapping uses symbolic key
				related.ItemGroup									= InventoryCompanyRel.ItemGroup
				related.KitItem.Company								= blank
				related.KitItem.InventoryLocation					= blank
				related.KitItem.Item								= Item
		
		AnotherCustomerOrderLineIsReleased									
			one-to-many relation to CustomerOrderLine
			Field Mapping uses symbolic key
				related.Company									    = Company
				related.CustomerOrder                               = CustomerOrder
			Instance Selection
				where (related.Status      				 	   		!= 8	
				and related.CustomerOrderLine                       != CustomerOrderLine)   
		
		ReplacementItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company										= Company
				related.InventoryLocation							= InventoryLocation
				related.Item										= Item.ReplacementItem
		
		DocumentKitComponentsRel
			one-to-many relation to DocumentKitComponent
			Field Mapping uses symbolic key
				related.Company										= Company
				related.DemandSystemCode							= "OE"
			Instance Selection
				where ((related.DocumentKitComponent.DocumentNumber	= CustomerOrder
				and    related.DocumentKitComponent.LineNumber		= CustomerOrderLine
				and    related.DocumentKitComponent.ComponentSequence entered)
				and   (!related.DocumentKitComponent.OptionCode.OptionDoesNotExist))

		OtherLocationsForItemRel
			one-to-many relation to ItemLocation
			Field Mapping uses Set2
				related.Company 						  = Company
				related.Item    						  = Item
			Instance Selection
				where (related.InventoryLocation      	 != InventoryLocation
				and    related.AvailableQuantity		 > 0)	
				
   		CustomerOrderLineAccumulatedGroupPricingRel
	   		one-to-many relation to CustomerOrderLine
	   		Field Mapping uses Set4
	   			related.Company 						 = Company
		  		related.CustomerOrder				  	 = CustomerOrder
		  		related.MajorSalesClass                  = MajorSalesClass
				related.MinorSalesClass                  = MinorSalesClass

		ItemLocationForAssociatedItemRel												
			one-to-many relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company 						 = Company
				related.InventoryLocation				 = InventoryLocation
				related.Item    						 = first ItemCompanionsRel.AssociatedItem.RelatedItem

		PickShipRouteRel
			one-to-many relation to PickShipRoute
			Field Mapping uses Set2
				related.Company        					 = Company
				related.InventoryLocation				 = InventoryLocation
				related.Customer                         = Customer
				related.CustomerShipTo					 = CustomerShipTo
				
		CompanyTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
				related.TaxCode 				= TaxCode
	
		NationalAccountInvoiceRel
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company		= Company
				related.NationalAccount.InvoiceAccountGroup.Customer	= Customer
		
		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
				
		IntrastatPortCodeRel
			one-to-one relation to IntrastatPortCode
			Field Mapping uses symbolic key
				related.Country					= CustomerOrder.InventoryLocation.PostalAddress.Country
				related.IntrastatPortCode		= PortCode
				
		IntrastatPortCodeForInventoryLocationRel
			one-to-many relation to IntrastatPortCode
			Field Mapping uses symbolic key
				related.Country					= TransientInventoryLocationCountry
				
		VertexConfigRel
			one-to-one relation to VertexConfig
			Field Mapping uses symbolic key
				related.VertexConfig 						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				
		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup 
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)

		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationPARel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 2
				related.FSMBODConfiguration.Noun 		= "PulseAlert"
				related.FSMBODConfiguration.Direction 	= 1
		
		FSMBODConfigurationDetailPARel
			one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 			= 2	
				related.FSMBODConfiguration.Noun 			= "PulseAlert"
				related.FSMBODConfiguration.Direction 		= 1
			Instance Selection
				where (related.Alert						= LocalAlert
				and	   related.Enable)

		TaxAttributesRel
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
				related.TaxAttribute           = TaxEntityRel.TaxAttributeCode

		CustomerOrderLineAddOnChargesRel 
        	one-to-many relation to CustomerOrderAddOnCharge
            Field Mapping uses symbolic key
                related.Company  						= Company                
                related.CustomerOrder					= CustomerOrder
            Instance Selection
            	where (related.CustomerOrderLine entered)

		CustomerOrderLineUserFieldsRel
			one-to-many relation to CustomerOrderLineUserFields
			Field Mapping uses symbolic key
				related.Company           				= Company
                related.CustomerOrder     				= CustomerOrder
                related.CustomerOrderLine 				= CustomerOrderLine
		    
		CustomerOrderLineAttachmentRel
			one-to-many relation to CustomerOrderLineAttachment
			delete cascades
			Field Mapping uses symbolic key
				related.Company           					= Company
                related.CustomerOrder     				= CustomerOrder
                related.CustomerOrderLine 				= CustomerOrderLine
		
		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = CustomerOrder.UniqueID
			Instance Selection
				where (related.InvoiceNumber				= CustomerOrder)
		
		TaxLineItemsForHeaderRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = CustomerOrder.UniqueID
			Instance Selection
				where (related.InvoiceNumber				= CustomerOrder
				and	   related.RelatedObjectReference		= reference to this instance)
		
		TaxLineItemsForLineRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
			Instance Selection
				where ((related.TaxLineItem.UniqueIdOfRelatedObject	= CustomerOrder.UniqueID
				or      related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID)
				and		related.InvoiceNumber						= CustomerOrder
				and	    related.RelatedObjectReference				= reference to this instance)

		BillingCompanyRel
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key 
				related.Company	= Company				
				
	Sets
		Set2
			indexed
			Instance Selection
				where (IsColset2)
			Sort Order
				Company
				InventoryLocation
				Item
				BillingProcessLevel
				CustomerOrder
				CustomerOrderLine

		Set3
			indexed
			Sort Order
				Company
				Customer
				Item
				CustomerOrder
				CustomerOrderLine

		Set4
			indexed
			Instance Selection
				where (IsColset4)
			Sort Order
				Company
				CustomerOrder
				MajorSalesClass
				MinorSalesClass
				CustomerOrderLine    

		Set7
			indexed
			Instance Selection
				where (IsColset7)
			Sort Order
				Company
				CustomerOrder
				CustomerOrderLine

		Set9
			indexed
			Instance Selection
				where (IsCreatePurchaseOrder)
			Sort Order
				Company
				CustomerOrder
				Vendor
				
				CustomerShipTo
				Dropship
				CustomerOrderLine
		Set10
			indexed
			Sort Order
				Company
				CustomerOrder
				TaxCode
				ProductTaxCategory
				CustomerOrderLine

		Set11
			indexed
			Instance Selection
				where (IsPoDropship)
			Sort Order
				Company
				Customer
				CustomerOrder
				CustomerOrderLine


		Set13
			indexed
			Sort Order
				Company
				CustomerOrderLine
				CustomerOrder

		ByCompany
			duplicates
			Sort Order
				Company
				
		ByProcessLevel
			duplicates
			Sort Order
				BillingProcessLevel
			
		ByHoldCode
			duplicates
			Sort Order
				HoldCode
		ByItem
			duplicates
			Sort Order
				Item
				
	Rule Blocks
		ValidateOngoingCalculation
			constraint (not IsOngoingAverageCalculation)
				"Global_\Average_\CostCalculationIsInProgress._\PleaseTryAgain."

		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Customer_Order"
				CalculateTax.System						= "OE"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= BillingProcessLevel
				CalculateTax.Invoice					= CustomerOrder
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= CustomerOrder.CustomerShipTo.ShipToAddress
				CalculateTax.CommodityCode				= DerivedUNSPSCCodeNoDash
				CalculateTax.InvoiceAmount				= NetAmountCurrency
				CalculateTax.BypassEditing				= true
				CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer 
				CalculateTax.DeliveryTerms				= ShipTerm
				if (SingleCallToOneSource)
					CalculateTax.UniqueIdOfRelatedObject	= CustomerOrder.UniqueID
				else
					CalculateTax.UniqueIdOfRelatedObject	= UniqueID
				CalculateTax.ItemNumber					= Item
				CalculateTax.Customer					= CustomerOrder.Customer
				CalculateTax.VendorCustomerName			= CustomerOrder.Customer.Name
				CalculateTax.Description				= ItemDescription	
				if (CustomerOrder.OrderEntryOrderType.BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"
		
		CreateTaxLineItemAndUserFields
			if ((TaxEntityRel.ThirdParty.Sabrix
			or (SingleCallToVertex
			and (Status.Released
			or  Status.ReadyForDelete)))
			and TaxLineItemsForLineRel not exists)
				invoke Create TaxLineItem
					assign result to TaxLineItemView
					invoked.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= CustomerOrder
					invoked.InvoiceDate					= current corporate date
					invoked.TaxEntity					= Company.AccountingEntity
					invoked.LineItemId					= Item
					invoked.RelatedObjectReference		= reference to CustomerOrderLine
					if (SingleCallToOneSource
					or SingleCallToVertex)
						LocalLineItemNumber 			= (last TaxLineItemsRel.LineItemNumber + 1)
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= CustomerOrder.UniqueID
					else
						LocalLineItemNumber 			= 1
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
					invoked.RelatedLineItemUniqueId		= UniqueID
					invoked.LineItemNumber				= LocalLineItemNumber
					invoked.InvoiceAmount				= NetAmountCurrency
					invoked.TaxableAmount				= OverrideTaxable
					invoked.ShipToTaxCode				= TaxCode
					invoked.ShipToTaxCodeDescription	= TaxCode.Description
					invoked.CommodityCode				= DerivedUNSPSCCodeNoDash
					invoked.ShipToAddress				= CustomerOrder.CustomerShipTo.ShipToAddress
					invoked.Description					= ItemDescription
					if (TaxEntityUsesVertex)
						invoked.ProductTaxCategory		= ProductTaxCategory
						invoked.Quantity				= OrderQuantity
						invoked.UnitPrice				= EnteredPrice
						invoked.ProductClass			= MajorSalesClass

					if (IsHSNSACCodeEnabled)
						invoked.CommodityCodeType		= "HSN"
						invoked.CommodityCode			= HSNSACCode
					else 
						invoked.CommodityCodeType		= "UNSPSC"
						invoked.CommodityCode			= DerivedUNSPSCCodeNoDash

				initialize AttributeCounter
				if (TaxEntityRel.ThirdParty.Sabrix
				and	TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= Company.FinanceEnterpriseGroup
							if (SingleCallToOneSource)
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= CustomerOrder.UniqueID
							else
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence

							if (each.LoadDynamicField.ValueIs.TaxEntity)
								if (TaxEntityRel exists)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
							else		
							if (each.LoadDynamicField.ValueIs.Company)	
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Company
							else
							if (each.LoadDynamicField.ValueIs.Description)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ItemDescription
							else
							if (each.LoadDynamicField.ValueIs.Customer)
								if (CustomerOrder.Customer entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerOrder.Customer
							else
							if (each.LoadDynamicField.ValueIs.PostingDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerOrder.OrderDate
							else
							if (each.LoadDynamicField.ValueIs.TaxDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerOrder.OrderDate
							else
							if (each.LoadDynamicField.ValueIs.GLAccount)
								if (SalesAccount.GeneralLedgerChartAccount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.GeneralLedgerChartAccount
							else
							if (each.LoadDynamicField.ValueIs.Location)
								if (InventoryLocation entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= InventoryLocation
							else
							if (each.LoadDynamicField.ValueIs.Currency)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerOrder.Currency
							else
							if (each.LoadDynamicField.ValueIs.DiscountAmount)
								if (EnteredDiscount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EnteredDiscount
							else
							if (each.LoadDynamicField.ValueIs.UnitCost)
								if (UnitCost entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= UnitCost
							else
							if (each.LoadDynamicField.ValueIs.ContractType)
								if (SalesAccount.Project.Project.ContractType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.Project.ContractType
							else
							if (each.LoadDynamicField.ValueIs.WorkType)
								if (SalesAccount.Project.Project.WorkType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.Project.WorkType
							else
							if (each.LoadDynamicField.ValueIs.AccountSubType)
								if (SalesAccount.GeneralLedgerChartAccount.AccountSubType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (each.LoadDynamicField.ValueIs.ServiceType)
								if (SalesAccount.Project.Project.ServiceType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.Project.ServiceType
							else
							if (each.LoadDynamicField.ValueIs.UsageType)
								if (SalesAccount.Project.Project.UsageType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.Project.UsageType
							else
							if (each.LoadDynamicField.ValueIs.Project)
								if (SalesAccount.Project entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project
							else
							if (each.LoadDynamicField.ValueIs.CommodityCode)
								if (UNSPSCCode entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedUNSPSCCodeNoDash
							else
							if (each.LoadDynamicField.ValueIs.UNSPSC)
								if (UNSPSCCode entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedUNSPSCCodeNoDash
							else			
							if (each.LoadDynamicField.ValueIs.ShipToName)
								if (CustomerOrder.CustomerShipTo.Name entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerOrder.CustomerShipTo.Name
							else
							if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)
								if (ProductTaxCategory entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ProductTaxCategory
							else
							if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
								if (SalesAccount.ToAccountingEntity entered)
									AttributeCounter += 1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= SalesAccount.ToAccountingEntity
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension1)						
								if (SalesAccount.FinanceDimension1 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension1
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension2)						
								if (SalesAccount.FinanceDimension2 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension2
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension3)						
								if (SalesAccount.FinanceDimension3 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension3
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension4)						
								if (SalesAccount.FinanceDimension4 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension4
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension5)						
								if (SalesAccount.FinanceDimension5 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension5
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension6)						
								if (SalesAccount.FinanceDimension6 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension6
							else				
							if (each.LoadDynamicField.ValueIs.FinanceDimension7)						
								if (SalesAccount.FinanceDimension7 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension7
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension8)						
								if (SalesAccount.FinanceDimension8 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension8
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension9)						
								if (SalesAccount.FinanceDimension9 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension9
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension10)						
								if (SalesAccount.FinanceDimension10 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension10
							else	
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value		= each.Value
				else
				if (TaxEntityUsesVertex
				and TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup							= Company.FinanceEnterpriseGroup
						if (SingleCallToVertex)
							invoked.TaxLineItem.UniqueIdOfRelatedObject 		= CustomerOrder.UniqueID
						else
							invoked.TaxLineItem.UniqueIdOfRelatedObject 		= UniqueID
						invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
							if (each.Code entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId 			= each.VertexFlexibleCode.FieldId
							if (each.ExternalValue.ValueIs.TaxEntity)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 				= TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= Company
							else
							if (each.ExternalValue.ValueIs.Description)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= ItemDescription
							else
							if (each.ExternalValue.ValueIs.Customer)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= CustomerOrder.Customer
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= InventoryLocation
							else
							if (each.ExternalValue.ValueIs.Currency)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= CustomerOrder.Currency
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= EnteredDiscount
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= EnteredPrice
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.CommodityCode)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= Item.CommodityCode
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= DerivedUNSPSCCodeNoDash
							else
							if (each.ExternalValue.ValueIs.ContractType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.Project.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.Project.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.AccountSubType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.Project.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.Project.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= ProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
							 	invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
							 	invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
							 	invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= SalesAccount.FinanceDimension10
							else
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  				= each.Code

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
							if (each.NumericValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId 					= each.VertexFlexibleNumeric.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= TaxEntityRel.TaxEntity
								else
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= SalesAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= Company
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= SalesAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= EnteredDiscount
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 		= 3
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= EnteredPrice
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 		= 3
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= SalesAccount.ToAccountingEntity
								else
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= each.NumericValue

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
							if (each.DateValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId 			= each.VertexFlexibleDate.FieldId
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= CustomerOrder.OrderDate
								else
								if (each.ExternalValue.ValueIs.PaymentDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= CustomerOrder.OrderDate
								else
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue		= CustomerOrder.OrderDate
								else
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= each.DateValue


		LoadVertexGlobalInputFields 
			if (TaxEntityUsesVertex)
		   		CalculateTax.TransactionSource				= "O"	
		   		CalculateTax.CallingModule					= "CustomerOrderLine"
				CalculateTax.Vendor							= CustomerOrder.Customer
				CalculateTax.FromTaxCode					= InventoryLocation.TaxCode
				if (CustomerShipTo.ShipToAddress.Country entered)
					CalculateTax.VATRegistrationCountry     = CustomerShipTo.ShipToAddress.Country 
				else
					CalculateTax.VATRegistrationCountry     = CustomerOrder.CompanyCustomer.VATRegistrationCountry
				if (CustomerShipTo.VATRegistrationNumber entered)
					CalculateTax.VATRegistrationNumber		= CustomerShipTo.VATRegistrationNumber 
				else
					CalculateTax.VATRegistrationNumber		= CustomerOrder.CompanyCustomer.VATRegistrationNumber
				CalculateTax.FromVATRegistrationCountry   	= TaxEntityRel.VATRegistrationCountry 
				CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber 
				CalculateTax.DefaultFilingCurrency 			= TaxEntityRel.DefaultFilingCurrency 
				CalculateTax.CurrencyRate					= CustomerOrder.CurrencyRate		
				CalculateTax.TransactionCurrency 			= CustomerOrder.Currency						 
				CalculateTax.BaseCurrency 					= Company.Currency
				CalculateTax.ProductClass					= MajorSalesClass
				CalculateTax.UnitCost						= EnteredPrice
				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode
				else
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= DerivedUNSPSCCodeNoDash
				if (CustomerOrder.OrderEntryOrderType.BillingInvoiceType.Credit)
					CalculateTax.DocumentType				= "CreditMemo"
				else
					CalculateTax.DocumentType				= "Invoice"
				CalculateTax.Quantity						= OrderQuantity
				CalculateTax.Location						= InventoryLocation
				include LoadVertexDebugOptions
				
		LoadVertexDebugOptions
			if (TaxEntityUsesVertex)					
				if (VertexConfigRel.DebugMode)				
					LocalJurisdictionLookupKey				= DefaultLookupKey	
					CalculateTax.AppendToJurisFile			= true					
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey				 
					CalculateTax.RelatedObjectReference     = reference to this instance	
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel
		
		VertexFlexibleFields
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else
							if (each.ExternalValue.ValueIs.Description)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ItemDescription
							else
							if (each.ExternalValue.ValueIs.Customer)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = CustomerOrder.Customer
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = InventoryLocation
							else
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = CustomerOrder.Currency
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredDiscount
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredPrice
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Item.CommodityCode
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedUNSPSCCodeNoDash
							else
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
							 	CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
							 	CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
							 	CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension10
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId 					= each.VertexFlexibleNumeric.FieldId
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue 			= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= SalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= Company
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= SalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= EnteredDiscount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals 		= 3
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= EnteredPrice
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals 		= 3
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= SalesAccount.ToAccountingEntity
							else
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 			= each.NumericValue

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId 			= each.VertexFlexibleDate.FieldId
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue 		= each.ExternalValue
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= CustomerOrder.OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue		= CustomerOrder.OrderDate
							else
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= each.DateValue

		UOMConversionIntoStockUOM
  			initialize UOMCalculation
			UOMCalculation.InputUOM		 = SellUOM
			UOMCalculation.InputQuantity = LocalInputQuantity
			UOMCalculation.Method		 = UOMCalculation.Method.ConvertToStock
			LocalOutputQuantity			 = UOMCalculation.OutputQuantity			
			
		CalcualteTermsDiscount
			if (CustomerOrder.TermsCode entered)
				initialize LocalCalculateTerms
				CalculateTax.TaxEntity					= Company.AccountingEntity	
				CalculateTax.ThirdPartyFunction			= "I"
				CalculateTax.Function					= "I"
				CalculateTax.TaxCode					= TaxCode
				if (LocalDoCreateTaxLog)
					CalculateTax.DontCreateLogFile			= false
					CalculateTax.DontCreateResultFiles		= false
				else
					CalculateTax.DontCreateLogFile			= true
					CalculateTax.DontCreateResultFiles		= true
				if (not SingleCallToVertex)
					LocalExecuteCalculateTax				= CalculateTax.ExecuteCalculateTax
				if (LocalTermsAmount entered)
					LocalCalculateTerms.TransactionDate		= ExpectedShipDate
					LocalCalculateTerms.TransactionAmount	= LocalTermsAmount		
				LocalTermsCalTrigger 					= LocalCalculateTerms.TermsCalTrigger
				constraint (LocalCalculateTerms.OutputErrorNumber not entered)
					"<LocalCalculateTerms.OutputErrorMessage>"	
				if (CalculateTax.TaxTable.TaxTableOutput[1].TaxTerms.Taxafterterms)	
					LocalTermsDiscount					= LocalCalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
					LocalTermsDueDate					= LocalCalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
	

		CalculateTaxByGroup
			if (not LocalComputationForTotalsDone)
				if ((EnteredDiscount entered
				or  CustomerOrder.OrderDiscountAmount entered)
				and OrderDiscount)
					WorkAddonChargeDiscount	+= ((EnteredDiscount + CustomerOrder.OrderDiscountAmount) *(WorkNetAmount/ CustomerOrder.DiscountableAmount))
				else
					initialize  WorkAddonChargeDiscount 
				WorkNetAmount 				-= WorkAddonChargeDiscount	
				WorkNetAmountForCustomerOrderLine += WorkNetAmount
				
				initialize  WorkAddonChargeDiscount
				initialize  WorkNetAmount
				for each CustomerOrderAddOnChargesRel
					if (each.ChargeType.FlatAmount)
						WorkNetAmount      	+= each.EnteredUnitPrice
					else
						if (each.ChargeType.Percentage)
							WorkNetAmount   += (((LocalOrderQuantity * LocalSellPriceCurrency) - LocalDiscountAmountCurrency - LocalEnteredDiscount) * each.PricePercent)  
						else
							if (each.ChargeType.UnitPrice)
								WorkNetAmount 	+= LocalOrderQuantity * each.EnteredUnitPrice
									
					if ((EnteredDiscount entered
					or  CustomerOrder.OrderDiscountAmount entered)
					and each.OrderDiscount)
						WorkAddonChargeDiscount	+= ((EnteredDiscount + CustomerOrder.OrderDiscountAmount) *(WorkNetAmount/ CustomerOrder.DiscountableAmount))
					else
						initialize  WorkAddonChargeDiscount         
		
				WorkNetAmount 					-= WorkAddonChargeDiscount
				AddOnChargeWorkNetAmountForCustomerOrder += WorkNetAmount 
				
				TotalWorkNetAmount 					= AddOnChargeWorkNetAmountForCustomerOrder + WorkNetAmountForCustomerOrderLine
				
				if (CustomerOrder.IsCompanyInvoiceOptionAndTermsAddOnCharge
				or  CustomerOrder.IsProcessLevelInvoiceOptionAndTermsAddOnCharge)
					LocalTermsAmount   				= AddOnChargeWorkNetAmountForCustomerOrder
					include CalcualteTermsDiscount
					GroupNetAmount 					-= LocalTermsDiscount


				initialize CalculateTax
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.System					= "OE"
				CalculateTax.TaxCode 				= TaxCode
				CalculateTax.ProcessLevel			= BillingProcessLevel
				CalculateTax.Invoice				= CustomerOrder
				CalculateTax.PostalAddress			= CustomerOrder.ShipPostalAddress
				CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
				CalculateTax.Function				= "C"
				CalculateTax.ThirdPartyFunction		= "I"
				CalculateTax.TransactionType		= "S"
				CalculateTax.TaxableAmount  		= OverrideTaxable
				CalculateTax.TaxDate				= CustomerOrder.TaxDate
				CalculateTax.ShipmentDate			= CustomerOrder.ExpectedShipDate
				if (CustomerOrder.TermsCode entered)
					CalculateTax.PaymentDate		= LocalTermsDueDate
				else
					CalculateTax.PaymentDate		= current corporate date
				CalculateTax.InvoiceDate			= current corporate date
				CalculateTax.GeneralLedgerDate		= current corporate date
				if (LocalDoCreateTaxLog)
					CalculateTax.DontCreateLogFile		= false
					CalculateTax.DontCreateResultFiles	= false
				else
					CalculateTax.DontCreateLogFile		= true
					CalculateTax.DontCreateResultFiles	= true
				CalculateTax.ProductTaxCategory		= ProductTaxCategory
				include LoadVertexGlobalInputFields
				include LoadOneSourceInputFields
				if (not SingleCallToOneSource
				and not SingleCallToVertex)
					include VertexFlexibleFields
					if (not LocalTaxLineItemCreated)
						include CreateTaxLineItemAndUserFields
					LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
					TaxTotal		               		+= CalculateTax.OutputTotalTaxAmount 	
			
					if (TaxTotal < 0)
						initialize TaxTotal
					LocalComputationForTotalsDone = true
				else
				if (TaxLineItemsForHeaderRel exists)
					TaxTotal = TaxLineItemsForHeaderRel.CalculatedTaxAmt

		CurrencyConversion
			CurrencyExchange.ToCurrency 					= Company.Currency
			CurrencyExchange.EnteredCurrencyRate 			= CustomerOrder.CurrencyRate
			LocalTransactionAmount							= LocalInputCurrencyAmount
		 	LocalOutputCurrencyAmount						= CurrencyExchange.OutputCurrencyAmount

		CalculateLineCharges
			initialize LocalOrderQuantity
			initialize LocalSellPriceCurrency
			initialize LocalSellToStock
			initialize LocalLineTotal
			if (OrderQuantity changed)
				LocalOrderQuantity = (OrderQuantity - old OrderQuantity)
			else
				LocalOrderQuantity = OrderQuantity

			if (SellPriceCurrency changed)
				LocalSellPriceCurrency = (SellPriceCurrency - old SellPriceCurrency)
			else
				LocalSellPriceCurrency = SellPriceCurrency

			if (SellToStock changed)
				LocalSellToStock = (SellToStock - old SellToStock)
			else
				LocalSellToStock = SellToStock

			LocalLineTotal			= NetAmountCurrency - OldNetAmountCurrency
			LocalOrderQuantity		= ((OrderQuantity * SellToStock) - (old OrderQuantity * old SellToStock))
			for each CustomerOrderAddOnChargesRel
				if (!each.Status.Canceled)
					initialize LocalOriginalMiscCurrency
					if (each.ChargeType.Percentage)
						LocalOriginalMiscCurrency	= LocalLineTotal * each.PricePercent
					else
					if (each.ChargeType.UnitPrice)
						LocalOriginalMiscCurrency	= LocalOrderQuantity * each.EnteredUnitPrice

					include CalculateOpenAmounts

		CalculateOpenAmounts	
			invoke UpdateCustomerOrderFromCustomerOrderLine CustomerOrder
				invoked.PrmTotalAddOnChargeAmount 			= LocalOriginalMiscCurrency
				if (each.TrackType.Freight)
					invoked.PrmFreightTotal 				= LocalOriginalMiscCurrency
			 	if (each.TrackType.Insurance)
					invoked.PrmInsuranceTotal 				= LocalOriginalMiscCurrency
				if (each.TrackType.CustomsCharges)
					invoked.PrmCustomsTotal 				= LocalOriginalMiscCurrency
				if (each.TrackType.OtherAOC)
					invoked.PrmOtherAddOnChargesTotal		= LocalOriginalMiscCurrency
				if (each.OrderDiscount)
					invoked.PrmDiscountableAmount 			= LocalOriginalMiscCurrency 
				if (each.TaxStatus.Taxable
				and each.EnteredTaxable not entered)
					invoked.PrmTaxableAmount				= LocalOriginalMiscCurrency
					










			FreightTotal 								   += LocalOriginalMiscCurrency
			InsuranceTotal 								   += LocalOriginalMiscCurrency
			CustomsTotal 								   += LocalOriginalMiscCurrency
			OtherAddOnChargesTotal 						   += LocalOriginalMiscCurrency
			
		UpdateAmountsInOrderForCreate
			invoke UpdateCustomerOrderAmounts CustomerOrder
				if (TaxStatus.Taxable)
					invoked.PrmTaxableAmount				= NetAmountCurrency 
				if (OrderDiscount)	
					invoked.PrmDiscountableAmount 			= NetAmountCurrency 
				if (IsInventoried)
					invoked.PrmInventoryGoodsAmount			= NetAmountCurrency 
					invoked.PrmInventoryGoodsBaseAmount		= NetAmountBase 
				else
					invoked.PrmNonInventoryGoodsAmount		= NetAmountCurrency 
					invoked.PrmNonInventoryGoodsBaseAmount	= NetAmountBase 
				invoked.PrmSkipTaxlogForHeaderAndAOC		= true
			
			initialize LocalTotalAOC
			initialize LocalDiscountableAOC
			initialize LocalDiscountableTotalAOC
			initialize LocalLineTotal
			if (CustomerOrderHeaderAddOnChargesRel exists) 
				LocalLineTotal = ((OrderQuantity * SellPriceCurrency) - EnteredDiscount)
				for each CustomerOrderHeaderAddOnChargesRel								
					if (each.Miscellaneous.ChargeType.Percentage)
						LocalTotalAOC		+= LocalLineTotal * each.PricePercent
						LocalDiscountableAOC = LocalLineTotal * each.PricePercent

						if (each.OrderDiscount
						and LocalDiscountableAOC entered)
							LocalDiscountableTotalAOC += LocalDiscountableAOC
			
			if (HasBrokenCaseCharge)
				LocalTotalAOC          += CurrentPriceListRel.Miscellaneous.Price 

			if (LocalTotalAOC entered)
				invoke UpdateOrderFromAddOnCharge CustomerOrder
					invoked.PrmTotalAddOnChargeAmount	= LocalTotalAOC
					invoked.PrmDiscountableAmount		= LocalDiscountableTotalAOC
						
		UpdateAmountsInOrder
			invoke UpdateCustomerOrderAmounts CustomerOrder
				if (TaxStatus.Taxable)
					invoked.PrmTaxableAmount				= NetAmountCurrency - OldNetAmountCurrency
				if (OrderDiscount changed)
					if (OrderDiscount) 
						invoked.PrmDiscountableAmount 		= NetAmountCurrency
					else 
						invoked.PrmDiscountableAmount 		= OldNetAmountCurrency * -1
				else
					if (OrderDiscount) 
						invoked.PrmDiscountableAmount 		= NetAmountCurrency - OldNetAmountCurrency
				
				if (IsInventoried)
					invoked.PrmInventoryGoodsAmount			= NetAmountCurrency - OldNetAmountCurrency
					invoked.PrmInventoryGoodsBaseAmount		= ((NetAmountCurrency - OldNetAmountCurrency) * CustomerOrder.CurrencyRate)
				else
					invoked.PrmNonInventoryGoodsAmount		= NetAmountCurrency - OldNetAmountCurrency
					invoked.PrmNonInventoryGoodsBaseAmount	= ((NetAmountCurrency - OldNetAmountCurrency) * CustomerOrder.CurrencyRate)
					
			if (CustomerOrderHeaderAddOnChargesRel exists) 
				initialize LocalTotalAOC
				initialize LocalDiscountableAOC
				initialize LocalDiscountableTotalAOC
				for each CustomerOrderHeaderAddOnChargesRel								
					if (each.Miscellaneous.ChargeType.Percentage)
						LocalTotalAOC		+= ((NetAmountCurrency - OldNetAmountCurrency) * each.PricePercent)
						LocalDiscountableAOC = ((NetAmountCurrency - OldNetAmountCurrency) * each.PricePercent)

						if (each.OrderDiscount
						and LocalDiscountableAOC entered)
							LocalDiscountableTotalAOC += LocalDiscountableAOC
				
				if (LocalTotalAOC entered)
					invoke UpdateOrderFromAddOnCharge CustomerOrder
						invoked.PrmTotalAddOnChargeAmount 	= LocalTotalAOC	
						invoked.PrmDiscountableAmount		= LocalDiscountableTotalAOC

		UpdateAmountsAfterDelete
			initialize LocalTotalAOC
			if (CustomerOrderHeaderAddOnChargesRel exists) 
				initialize LocalTotalAOC
				initialize LocalDiscountableAOC
				initialize LocalDiscountableTotalAOC
				for each CustomerOrderHeaderAddOnChargesRel								
					if (each.Miscellaneous.ChargeType.Percentage)
						LocalTotalAOC		+= (NetAmountCurrency * each.PricePercent)				
						LocalDiscountableAOC = (NetAmountCurrency * each.PricePercent)

						if (each.OrderDiscount
						and LocalDiscountableAOC entered)
							LocalDiscountableTotalAOC += LocalDiscountableAOC

			if (HasBrokenCaseCharge)
				LocalTotalAOC += CurrentPriceListRel.Miscellaneous.Price
				
			if (LocalTotalAOC entered)
				invoke UpdateOrderFromAddOnCharge CustomerOrder
					invoked.PrmTotalAddOnChargeAmount 	= LocalTotalAOC * -1
					invoked.PrmDiscountableAmount		= LocalDiscountableTotalAOC * -1

			invoke UpdateCustomerOrderAmounts CustomerOrder
				if (TaxStatus.Taxable)
					invoked.PrmTaxableAmount			   -= NetAmountCurrency
				if (OrderDiscount)
					invoked.PrmDiscountableAmount 		   -= NetAmountCurrency

				if (IsInventoried)
					invoked.PrmInventoryGoodsAmount		   -= NetAmountCurrency
					invoked.PrmInventoryGoodsBaseAmount	   -= NetAmountBase
				else
					invoked.PrmNonInventoryGoodsAmount		-= NetAmountCurrency
					invoked.PrmNonInventoryGoodsBaseAmount	-= NetAmountBase

		TaxCalculation
			if (TaxStatus.Taxable
			and DoTaxCalculation)
				TaxableAmountCurrency 						= NetAmountCurrency
				OverrideTaxable 							= NetAmountCurrency
				include CalculateTaxByGroup
				









		ConversionOfQuantityToAlternateUOM
			initialize UOMCalculation
			UOMCalculation.InputUOM							= SellUOM
			UOMCalculation.InputToUOM						= SellingPriceUOM
			UOMCalculation.InputQuantity					= LocalOrderQuantity
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
			LocalOutputQuantity								= UOMCalculation.OutputQuantity























			




































































































































































































		































































			





























		













		
		
		CalculatePricing	
					
			if (IsInventoriedOrNonStock)	
				if (not LocalEnteredPriceCheck
				and PriceBaseItemRel exists
				and IsPriceDateValid)



					if (CustomerOrder.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
						for each PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM
							if (DerivedUOMForEnteredPrice = each.UnitOfMeasure)
								LocalBasePrice					= each.SellPrice
								SellingPriceUOM					= each.UnitOfMeasure		
								SellPriceToStock				= each.UOMMultiplier
								end for each
					else
					if (PriceBaseItemRel.NextEffectiveDate not entered
					or  CustomerOrder.PriceDate < PriceBaseItemRel.NextEffectiveDate)
						for each PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM
							if (DerivedUOMForEnteredPrice = each.UnitOfMeasure)
								LocalBasePrice					= each.SellPrice
								SellingPriceUOM					= each.UnitOfMeasure		
								SellPriceToStock				= each.UOMMultiplier
								end for each
					else
						for each PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM
							if (DerivedUOMForEnteredPrice = each.UnitOfMeasure)
								LocalBasePrice					= each.SellPrice
								SellingPriceUOM					= each.UnitOfMeasure		
								SellPriceToStock				= each.UOMMultiplier
								end for each
					
					if (LocalBasePrice not entered)
						NoCharge		= true
					
					if (DefaultPriceExists)
						if (IsMultiplePricingUOM)
							MultipleSellPrice = true
							
						if (HasPriceFromContract)
							if (ContractItemRel exists)
								constraint (not ContractItemRel.SalesProhibited)
									"ItemIsProhibitedForSaleToThisCustomer"
								ContractNumber 				= ContractItemRel.PriceListContractPromotion.ListName
								DiscountCode 				= ContractItemRel.PriceDiscountCode
								PriceRecType				= PriceRecType.Item
								NoCharge					= ContractItemRel.NoCharge
									
								if (not NoCharge)
									if (ContractItemRel.UnitOfMeasureBreakCode entered)
										initialize I1
										I1 = 1
										while (SellUOM != ContractItemRel.UnitOfMeasures.UnitOfMeasure[I1])
											I1 += 1
											
										if (ContractItemRel.UnitOfMeasureBreakCode.Percentage)
											EnteredPrice    	 = LocalBasePrice * ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents
										else
										if (ContractItemRel.UnitOfMeasureBreakCode.UnitAddOn)
											EnteredPrice    	 = LocalBasePrice + ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices
										else
										if (ContractItemRel.UnitOfMeasureBreakCode.OverridePrice)
											EnteredPrice    	 = ContractItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices
									else
										for each ContractItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
											if (OrderQuantity <= each.BreakQuantity)
												if (ContractItemRel.QuantityBreakCode.Percentage)
													EnteredPrice    	= LocalBasePrice * each.BreakPercent
													end for each
												else
												if (ContractItemRel.QuantityBreakCode.UnitAddOn)
													EnteredPrice    	= LocalBasePrice +each.BreakAddOns
													end for each
												else
												if (ContractItemRel.QuantityBreakCode.OverridePrice)
													EnteredPrice        = each.BreakPrices
													end for each
							else 
							if (PriceListSalesClassForContractRel exists)
								constraint (not PriceListSalesClassForContractRel.SalesProhibited)
									"SalesClassIsProhibitedForSaleToThisCustomer"
								ContractNumber 				= PriceListSalesClassForContractRel.PriceListContractPromotion.ListName
								DiscountCode 				= PriceListSalesClassForContractRel.PriceDiscountCode
								PriceRecType				= PriceRecType.XClass
								NoCharge					= PriceListSalesClassForContractRel.NoCharge
								
								if (not NoCharge)
									for each PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup
										if (OrderQuantity <= each.BreakQuantity)
											EnteredPrice 			= LocalBasePrice * each.BreakPercent
											end for each
							else
								ContractNumber   = DefaultContractRel.PriceListContractPromotion.ListName
								DiscountCode 	 = DefaultContractRel.PriceDiscountCode

								EnteredPrice 	 = LocalBasePrice * DefaultContractRel.Percent

						else
						if (HasPriceFromPromotion)
							if (PromotionItemRel exists)
								constraint (not PromotionItemRel.SalesProhibited)
									"ItemIsProhibitedForSaleToThisCustomer"
								Promotion					= PromotionItemRel.PriceListContractPromotion.Promotion
								ListName					= PromotionItemRel.PriceListContractPromotion.ListName
								DiscountCode 				= PromotionItemRel.PriceDiscountCode
								PriceRecType				= PriceRecType.Item
								NoCharge 					= PromotionItemRel.NoCharge
								
								if (not NoCharge)
									if (PromotionItemRel.UnitOfMeasureBreakCode entered)
										initialize I1
										I1 = 1
										while (SellUOM != PromotionItemRel.UnitOfMeasures.UnitOfMeasure[I1])
											I1 += 1
											
										if (PromotionItemRel.UnitOfMeasureBreakCode.Percentage)
											EnteredPrice    	 = LocalBasePrice * PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents
										else
										if (PromotionItemRel.UnitOfMeasureBreakCode.UnitAddOn)
											EnteredPrice    	 = LocalBasePrice + PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices
										else
										if (PromotionItemRel.UnitOfMeasureBreakCode.OverridePrice)
											EnteredPrice    	 = PromotionItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices
									else
										for each PromotionItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
											if (OrderQuantity <= each.BreakQuantity)
												if (PromotionItemRel.QuantityBreakCode.Percentage)
													EnteredPrice    	= LocalBasePrice * each.BreakPercent
													end for each
												else
												if (PromotionItemRel.QuantityBreakCode.UnitAddOn)
													EnteredPrice    	= LocalBasePrice + each.BreakAddOns
													end for each
												else
												if (PromotionItemRel.QuantityBreakCode.OverridePrice)
													EnteredPrice    	= each.BreakPrices
													end for each
							else
							if (PriceListSalesClassForPromotionRel exists)
								constraint (not PriceListSalesClassForPromotionRel.SalesProhibited)
									"SalesClassIsProhibitedForSaleToThisCustomer"
								Promotion					= PriceListSalesClassForPromotionRel.PriceListContractPromotion.Promotion
								ListName					= PriceListSalesClassForPromotionRel.PriceListContractPromotion.ListName
								DiscountCode 				= PriceListSalesClassForPromotionRel.PriceDiscountCode
								PriceRecType				= PriceRecType.XClass
								NoCharge 					= PriceListSalesClassForPromotionRel.NoCharge
								
								if (not NoCharge)
									for each PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup
										if (OrderQuantity <= each.BreakQuantity)
											EnteredPrice 			= LocalBasePrice * each.BreakPercent
											end for each
							else
								Promotion	  = DefaultPromotionRel.PriceListContractPromotion.Promotion
								ListName	  = DefaultPromotionRel.PriceListContractPromotion.ListName
								DiscountCode  = DefaultPromotionRel.PriceDiscountCode
								EnteredPrice  = LocalBasePrice * DefaultPromotionRel.Percent
						else
						if (HasPriceFromPriceList)
							if (PriceListItemRel exists)
								constraint (not PriceListItemRel.SalesProhibited)
									"ItemIsProhibitedForSaleToThisCustomer"
								ListName					= PriceListItemRel.PriceListContractPromotion.ListName
								DiscountCode 				= PriceListItemRel.PriceDiscountCode
								PriceRecType				= PriceRecType.Item
								NoCharge					= PriceListItemRel.NoCharge
								
								if (not NoCharge)
									if (PriceListItemRel.UnitOfMeasureBreakCode entered)
										initialize I1
										I1 = 1
										while (SellUOM != PriceListItemRel.UnitOfMeasures.UnitOfMeasure[I1])
											I1 += 1
											
										if (PriceListItemRel.UnitOfMeasureBreakCode.Percentage)
											EnteredPrice    	 = LocalBasePrice * PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].Percents
										else
										if (PriceListItemRel.UnitOfMeasureBreakCode.UnitAddOn)
											EnteredPrice    	 = LocalBasePrice + PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].PriceBreakAddOnUnitPrices
										else
										if (PriceListItemRel.UnitOfMeasureBreakCode.OverridePrice)
											EnteredPrice    	 = PriceListItemRel.UnitAddOnPercentPrice.UnitAddOnPercentPriceGroup[I1].UnitPrices
									else
										for each PriceListItemRel.QuantityBreak.QuantityPercentPriceAddOnGroup
											if (OrderQuantity <= each.BreakQuantity)
												if (PriceListItemRel.QuantityBreakCode.Percentage)
													EnteredPrice    	= LocalBasePrice * each.BreakPercent
													end for each
												else
												if (PriceListItemRel.QuantityBreakCode.UnitAddOn)
													EnteredPrice    	= LocalBasePrice + each.BreakAddOns
													end for each
												else
												if (PriceListItemRel.QuantityBreakCode.OverridePrice)
													EnteredPrice		= each.BreakPrices
													end for each
							else
							if (PriceListSalesClassForPriceListRel exists)
								constraint (not PriceListSalesClassForPriceListRel.SalesProhibited)
									"SalesClassIsProhibitedForSaleToThisCustomer"
								ListName					= PriceListSalesClassForPriceListRel.PriceListContractPromotion.ListName
								DiscountCode 				= PriceListSalesClassForPriceListRel.PriceDiscountCode
								PriceRecType				= PriceRecType.XClass
								NoCharge 	 				= PriceListSalesClassForPriceListRel.NoCharge

								if (not NoCharge)
									for each PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup
										if (OrderQuantity <= each.BreakQuantity)
											EnteredPrice 			= LocalBasePrice * each.BreakPercent
											end for each
							else
								ListName	  = PriceListRel.PriceListContractPromotion.ListName
								DiscountCode  = PriceListRel.PriceDiscountCode
								EnteredPrice  = LocalBasePrice * PriceListRel.Percent
						
						
						if (OrderQuantity < 0)
							LocalPriceQuantity	= OrderQuantity * -1














				else	
				if (SellingPriceUOM changed) 
					SellPriceToStock = SellingPriceItemUOMRel.UOMConversion

				if (EnteredPrice entered) 
					if (SellUOM not = SellingPriceUOM)
		   				initialize UOMCalculation
		   				UOMCalculation.InputUOM							= SellUOM
						UOMCalculation.InputToUOM						= SellingPriceUOM
						UOMCalculation.InputQuantity					= OrderQuantity
						UOMCalculation.DoRounding						= true
						UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate	
		   				LocalQuantityInSellPriceUOM						= UOMCalculation.OutputQuantity						
					else
						LocalQuantityInSellPriceUOM						= OrderQuantity
				
					LocalExtendedAmount			 			 = EnteredPrice * LocalQuantityInSellPriceUOM 
					LocalInputCurrencyAmount				 = LocalExtendedAmount
					include CurrencyConversion
				 	

				 	UnitPrice 								 = LocalOutputCurrencyAmount / LocalQuantityInSellPriceUOM
				 	

					SellUnitPrice							 = ((UnitPrice/SellPriceToStock)* SellToStock)
					

					SellPriceCurrency        				 = ((EnteredPrice/SellPriceToStock)* SellToStock)

				LocalCurrencyRate = CustomerOrder.CurrencyRate
				
				if (!Company.MultipleCurrency
				and Company.Currency != CustomerOrder.Currency)
					if (CustomerOrder.CurrencyRate entered)
						LocalCurrencyRate = CustomerOrder.CurrencyRate
					else
						LocalCurrencyRate = PriceListContractPromotionRel.CurrencyRate
						
				if (OrderQuantity entered) 
					LocalPriceBillAverage = (LocalExtendedAmount / LocalQuantityInSellPriceUOM) 
					LocalPriceBaseAverage = ((LocalExtendedAmount * LocalCurrencyRate) / LocalQuantityInSellPriceUOM) 
				
				include CalculatePricingDiscount


		AssignValuesFromCalculatePricing
			if (!LineType.Special)















				















				

















				if (not LocalEnteredPriceCheck
				or  not PriceStatus.ManualOverrideOfPricing)
					if (IsManualOverridePricing)
						PriceStatus 		= PriceStatus.ManualOverrideOfPricing
					if (IsAmalgamatedPricing)
						PriceStatus			= PriceStatus.AmalgamatedGroupPricing
					else 
						PriceStatus			= PriceStatus.SystemCalculatedPricing
						
				if (IsManualOverridePricing)
					SellUnitPrice 		= ((LocalPriceBaseAverage/SellPriceToStock)* SellToStock) 
					UnitPrice 			= LocalPriceBaseAverage

					initialize MultipleSellPrice
					initialize DiscountCode
					initialize DiscountAmountCurrency
				else	
				if (IsAmalgamatedPricing)
					if (IsUnreleased)
						ContractNumber 		= LocalContract
						Promotion	   		= LocalPromotion
						PriceStatus			= PriceStatus.AmalgamatedGroupPricing
						UnitPrice 			= LocalPriceBaseAverage

						initialize MultipleSellPrice
						initialize DiscountCode
						initialize DiscountAmountCurrency
				else
					QuantityBreak 				= LocalBreakQuantity
					DiscountAmountCurrency 		= LocalTotalDiscount


			else
			if (LineType.Special)
				PriceStatus					= PriceStatus.ManualOverrideOfPricing
				SellPriceCurrency			= EnteredPrice
				OrderDiscount 				= true
				initialize DiscountCode
				initialize DiscountAmountCurrency
				if (CustomerOrder.Currency = Company.Currency)
					SellUnitPrice			= EnteredPrice
					UnitPrice				= EnteredPrice
				else
					LocalInputCurrencyAmount	= EnteredPrice
					include CurrencyConversion
				 	SellUnitPrice 				= LocalOutputCurrencyAmount
				 	UnitPrice 					= LocalOutputCurrencyAmount


		CalculatePricingDiscount
			initialize LocalDiscountCounter
			initialize LocalTotalDiscount
			if (DiscountCode entered)	
				LocalDiscountCounter = 2
				LocalTotalDiscount = LocalPriceBillAverage * DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[1].Percent * OrderQuantity
				while (LocalDiscountCounter <= 3)
					if (DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].ApplyToGross)
						LocalTotalDiscount += LocalPriceBillAverage * DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].Percent * OrderQuantity
					else
						LocalTotalDiscount += ((LocalPriceBillAverage - (LocalTotalDiscount / OrderQuantity)) * DiscountCode.PriceDiscountCodeAccountArray.PriceDiscountCodeAccountGroup[LocalDiscountCounter].Percent * OrderQuantity)
					
					LocalDiscountCounter += 1

		CalculateGroupPricing
			initialize  LocalAccumulatePriceQuantity
			LocalAccumulatePriceQuantity      = TotalAccumulatePriceQuantity
			if (LocalAccumulatePriceQuantity < 0)
				LocalAccumulatePriceQuantity	= LocalAccumulatePriceQuantity * -1
			initialize I1
			I1 =1 
			while (I1 < 6) 
				if (PriceListSalesClassForContractRel exists) 
					if (first PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalAccumulatePriceQuantity)
						LocalPricePercent 		= first PriceListSalesClassForContractRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				else
				if (PriceListSalesClassForPromotionRel exists)
					if (first PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalAccumulatePriceQuantity)
						LocalPricePercent 		= first PriceListSalesClassForPromotionRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				else
				if (PriceListSalesClassForPriceListRel exists)
					if (first PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup[I1].BreakQuantity >= LocalAccumulatePriceQuantity)
						LocalPricePercent 		= first PriceListSalesClassForPriceListRel.QuantityBreak.QuantityPercentGroup[I1].BreakPercent
						end while
				I1 += 1
			
			if (LocalPricePercent not entered)
				LocalPricePercent = 1
				
			if (ContractNumber	entered
			and Company.CurrencyBasedPricing)
				if (PriceListContractPromotionRel.CurrencyRate entered)
					LocalPriceCurrency		= PriceListContractPromotionRel.CurrencyRate
			else
				LocalPriceCurrency			= CustomerOrder.CurrencyRate
			initialize I2
			I2 =1 
			while (I2 <= 10)
				if (CustomerOrder.PriceDate < PriceBaseItemRel.CurrentEffectiveDate)
					if (PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].SellPriceCode.Default)
						SellingPriceUOM			= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].UnitOfMeasure
						SellPriceToStock		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].UOMMultiplier
						if (Company.CurrencyBasedPricing)
							EnteredPrice		= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].SellPrice
							UnitPrice			= PriceBaseItemRel.LastSellPriceByUOM.SellPriceByUOM[I2].SellPrice
						end while
				else
				if (CustomerOrder.PriceDate >= PriceBaseItemRel.NextEffectiveDate)
					if (PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].SellPriceCode.Default)
						SellingPriceUOM			= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].UnitOfMeasure
						SellPriceToStock 		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].UOMMultiplier
		  				if (Company.CurrencyBasedPricing)
							EnteredPrice		= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
							UnitPrice			= PriceBaseItemRel.NextSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
		   				end while
		   		else
				if (PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].SellPriceCode.Default)
					SellingPriceUOM				= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].UnitOfMeasure
					SellPriceToStock 			= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].UOMMultiplier
		   			if (Company.CurrencyBasedPricing)
						EnteredPrice			= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
						UnitPrice				= PriceBaseItemRel.CurrentSellPriceByUOM.SellPriceByUOM[I2].SellPrice 
					end while
				I2 += 1	
					
			EnteredPrice						= EnteredPrice * LocalPricePercent
			UnitPrice							= UnitPrice    * LocalPricePercent
			
			SellUnitPrice						= ((EnteredPrice/SellPriceToStock)* SellToStock)
			SellPriceCurrency        			= ((UnitPrice/SellPriceToStock)* SellToStock)
			LocalPriceBillAverage 				=  SellUnitPrice
			include CalculatePricingDiscount
		
		CreateWarehouseDemandForOrder
			if (WarehouseDemandRel not exists)
				invoke Create WarehouseDemand
					fill in fields from this instance
					invoked.Company											= CustomerOrder.Company
					invoked.WarehouseDemand.DemandSystemCode				= "OE"
					invoked.WarehouseDemand.DemandDocument					= CustomerOrder
					invoked.WarehouseDemand.DemandCompany					= CustomerOrder.Company
					invoked.DocumentNumberNumeric							= CustomerOrder
					invoked.Destination										= InventoryLocation
					invoked.Customer										= Customer
					invoked.FreightCode										= CustomerOrder.BillingFreightCode
					invoked.ShippingMethod									= CustomerOrder.ShippingMethod
					if (CustomerOrder.HoldCode entered)
						invoked.OnHold										= true
					if (CustomerOrder.ShipComplete.DoesNotAcceptPartials)
						invoked.RequireCompleteShipment						= true
					if (CustomerOrder.ShipImmediate)
						invoked.RequirePickingFeedback                      = false
						invoked.RequirePackingFeedback                      = false
					else	
					if (CustomerOrder.OrderEntryOrderType.WarehouseProcessType.RequirePickingFeedback)
						invoked.RequirePickingFeedback                      = true
						if (CustomerOrder.OrderEntryOrderType.WarehouseProcessType.RequirePackingFeedback)
							invoked.RequirePackingFeedback                  = true	
					else
					if (CustomerOrder.OrderEntryOrderType.WarehouseProcessType.RequirePackingFeedback)
						invoked.RequirePackingFeedback                      = true
			
			if (IsSpecialItem
			or  IsCatchWeightItem
			or  SellUOM = Item.StockUOM)
				LocalOrderQuantity = OrderQuantity
			else

				LocalInputQuantity = OrderQuantity
				include UOMConversionIntoStockUOM
				LocalOrderQuantity = LocalOutputQuantity
			
			if (WarehouseDemandLineForOrderRel not exists)	
				invoke Create WarehouseDemandLine
					fill in fields from this instance
					invoked.Company						    			 	 = CustomerOrder.Company
					invoked.InventoryLocation 							 	 = InventoryLocation
					invoked.WarehouseDemand.DemandSystemCode				 = DemandSystemCode.CustomerOrder					//"OE"
					invoked.WarehouseDemand.DemandDocument					 = CustomerOrder
					invoked.WarehouseDemand.DemandCompany					 = CustomerOrder.Company
					invoked.WarehouseDemandLine.DemandDocumentType           = DemandDocumentType.Shipment						//"SH"
					invoked.WarehouseDemandLine.LineNumber                   = CustomerOrderLine

					invoked.DocumentNumberNumeric							 = CustomerOrder   
					invoked.Item                                             = Item
					invoked.ItemDescription									 = ItemDescription 
					invoked.DemandRecordType                               	 = WarehouseDemandLine.DemandRecordType.Demand		//"D"
					invoked.RouteHeader										 = RouteHeader
					invoked.RouteStop										 = RouteStop
					invoked.EstimatedTransactionDate						 = ExpectedShipDate
					invoked.AllocationDate									 = AllocatedDate 
					invoked.LineType                                         = LineType
					invoked.Quantity                                         = LocalOrderQuantity
					invoked.FillOrKill										 = FillOrKill.FillBackorders						//"F"
					invoked.HSNSACCode										 = HSNSACCode 
					if (not CustomerOrder.Status.Released)
						invoked.LocalNotReadyForRelease 					 = true
					if (IsCatchWeightItem)																	
						invoked.TransactionUOM								 = SecondaryUOM
						invoked.TransactionUOMMultiplier					 = Item.SecondaryUOMMultiplier
						invoked.UnitPrice									 = SellUnitPrice
					else
						invoked.TransactionUOM                               = SellUOM
						invoked.TransactionUOMMultiplier                     = SellToStock
						invoked.UnitPrice									 = (UnitPrice / SellPriceToStock)
					if (Backordered)
						invoked.BackorderAllowed							= true
					else
						invoked.BackorderAllowed							= false		
					invoked.UnitCost										= UnitCost
					invoked.KitType											= KitType	
					invoked.FutureDemand									= FutureOrder
					invoked.OnHold											= IsOnHold
					invoked.Destination										= CustomerShipTo
		
		CreatePurchaseOrderInterface						
			invoke Create PurchaseOrderInterface
				fill in fields from this instance
				invoked.Company                                      = Company
				invoked.PurchaseOrderInterface.SourceDocumentOrigin  = "OE"
				invoked.PurchaseOrderInterface.SourceDocumentNumeric = CustomerOrder
				invoked.ProcurementGroup                             = InventoryCompanyRel.ItemGroup
				invoked.PurchaseOrderInterface.OperatingCompany      = Company
				initialize invoked.PurchaseOrderInterface.RequestingLocation
				initialize invoked.PurchaseOrderInterface.SourceDocumentAlpha
				invoked.PurchaseOrderInterface.LineNumber            = CustomerOrderLine
				invoked.EnteredUnitCost								 = UnitCost
				invoked.RequestedDeliveryDate						 = EarlyDeliveryDate
				invoked.LateDeliveryDate							 = LateDeliveryDate
				invoked.MSDSRequired								 = MaterialSafetyDataSheet
				invoked.Vendor								 		 = Vendor
				invoked.PurchaseFromLocation						 = PurchaseFromLocation
				invoked.POCode								 		 = POCode
				invoked.EnteredUOMMultiplier						 = SellToStock
				invoked.EnteredUOM								 	 = SellUOM
				invoked.Item								 		 = Item
				invoked.Description								 	 = ItemDescription
				invoked.ItemType								 	 = LineType
				invoked.Dropship								 	 = Dropship
				invoked.ProcessLevel								 = BillingProcessLevel
				invoked.ShipToLocation								 = InventoryLocation
				invoked.Quantity									 = OrderQuantity
				if (Dropship)
					invoked.DropshipName								 = CustomerOrder.ShipToName
					invoked.DropshipAddress                              = CustomerOrder.ShipPostalAddress









				
				if (TaxStatus.Taxable)
					invoked.Taxable									 = true
				else
					invoked.Taxable									 = false


		CreateCustomerOrderLineDistribution								
			invoke Create CustomerOrderLineDistribution
				invoked.Company 									= Company
				invoked.CustomerOrder								= CustomerOrder
				invoked.CustomerOrderLine							= CustomerOrderLine
				invoked.DistributionAccount							= ExpenseAccount
				
		DeleteWarehouseDemand
			invoke Delete WarehouseDemandLineForOrderRel
							
			if (WarehouseDemandLinesRel not exists
			and CustomerOrder.WarehouseShipment not entered)
				invoke Delete WarehouseDemandRel
				
		UpdateWarehouseDemandBasedOnRequired
			if (IsWarehouseDemandRequired)
				if  (HasOrderWarehouseDemandLine
				and (OrderQuantity		changed
				or   FutureOrder		changed
				or   HoldCode			changed
				or 	 ExpectedShipDate	changed
				or	 AllocatedDate		changed
				or   ShipComplete		changed
				or   CustomerShipTo		changed
				or   UnitCost			changed
				or   PickingPriority    changed))
					if (SellUOM != Item.StockUOM
					and not IsSpecialItem)
						LocalInputQuantity = OrderQuantity
						include UOMConversionIntoStockUOM
						LocalOrderQuantity = LocalOutputQuantity
					else
						LocalOrderQuantity = OrderQuantity
						
					invoke Update WarehouseDemandLineForOrderRel
						invoked.Quantity								= LocalOrderQuantity
						invoked.FutureDemand							= FutureOrder
						invoked.OnHold									= IsOnHold
						invoked.AllocationDate							= AllocatedDate
						invoked.EstimatedTransactionDate				= ExpectedShipDate
						invoked.CustomerShipTo							= CustomerShipTo
						invoked.Destination								= CustomerShipTo
						invoked.UnitCost								= UnitCost
						invoked.AllocationPriority						= PickingPriority

					
				else
					include CreateWarehouseDemandForOrder
			else
				if (HasOrderWarehouseDemandLine)
					include DeleteWarehouseDemand
			
    Derived Fields
    	DerivedEnteredPriceNumberOfDecimals is a ConditionalField
			type is Numeric size 1
			restricted
			if (LineType.Inventoried
			or  LineType.NonStock)
				Item.NumberOfDecimalsPrice
			else
			if (LineType.Special)
				Company.InventoryCompanyRel.ItemGroup.DefaultNumberOfDecimalsPrice
			else
				8
				
    	LineTaxAmount is a DerivedField
    		type is like InternationalAmount
    		initialize LineTaxTotal
    		if (OrderDiscount
    		and (CustomerOrder.EnteredDiscount entered
			or CustomerOrder.OrderDiscountAmount entered))
				LocalComputedDiscount = ((CustomerOrder.EnteredDiscount + CustomerOrder.OrderDiscountAmount) * (DerivedLineTaxableAmount / CustomerOrder.DerivedDiscountableAmount))
			else
				initialize LocalComputedDiscount
			
			if (TaxStatus.Taxable
			and DoTaxCalculation)
				WorkNetAmount2						= (DerivedLineTaxableAmount - LocalComputedDiscount)				
				if (CustomerOrder.IsCompanyInvoiceOptionAndTermsAddOnCharge
				or CustomerOrder.IsProcessLevelInvoiceOptionAndTermsAddOnCharge
				or IsTaxAfterTerms)
					
					LocalTermsAmount   				= WorkNetAmount2				
					include CalcualteTermsDiscount
					WorkNetAmount2 					-= LocalTermsDiscount
				initialize CalculateTax
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.System					= "OE"
				CalculateTax.TaxCode 				= TaxCode
				CalculateTax.ProcessLevel			= BillingProcessLevel
				CalculateTax.Invoice				= CustomerOrder
				CalculateTax.PostalAddress			= CustomerOrder.ShipPostalAddress
				CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
				CalculateTax.Function				= CalculateTax.Function.CalculateTax
				CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
				CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
				CalculateTax.TaxableAmount  		= WorkNetAmount2
				CalculateTax.TaxDate				= CustomerOrder.TaxDate
				CalculateTax.ShipmentDate			= CustomerOrder.ExpectedShipDate
				CalculateTax.InvoiceDate			= current corporate date
				CalculateTax.GeneralLedgerDate		= current corporate date
				CalculateTax.PaymentDate			= current corporate date
				CalculateTax.ProductTaxCategory		= ProductTaxCategory
				CalculateTax.DontCreateLogFile		= true
				include LoadVertexGlobalInputFields
				include LoadOneSourceInputFields
				LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
				LineTaxTotal = CalculateTax.OutputTotalTaxAmount 
			if (LineTaxTotal < 0)
				LineTaxTotal = 0
			return LineTaxTotal
		
				
		LineSplitTaxAmount is a DerivedField
			type is like InternationalAmount
			initialize LineTaxTotal
			if (OrderDiscount
			and (CustomerOrder.EnteredDiscount entered
			or CustomerOrder.OrderDiscountAmount entered))
				LocalComputedDiscount = ((CustomerOrder.EnteredDiscount + CustomerOrder.OrderDiscountAmount) * (DerivedLineTaxableAmount / CustomerOrder.DerivedDiscountableAmount))
			else
				initialize LocalComputedDiscount
			
			if (TaxStatus.Taxable)
				WorkNetAmount2						= (DerivedLineTaxableAmount - LocalComputedDiscount)				
				if (CustomerOrder.IsCompanyInvoiceOptionAndTermsAddOnCharge
				or CustomerOrder.IsProcessLevelInvoiceOptionAndTermsAddOnCharge
				or IsTaxAfterTerms)
					
					LocalTermsAmount   				= WorkNetAmount2				
					include CalcualteTermsDiscount
					WorkNetAmount2 					-= LocalTermsDiscount
				initialize CalculateTax
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.System					= "OE"
				CalculateTax.TaxCode 				= TaxCode
				CalculateTax.ProcessLevel			= BillingProcessLevel
				CalculateTax.Invoice				= CustomerOrder
				CalculateTax.PostalAddress			= CustomerOrder.ShipPostalAddress
				CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
				CalculateTax.Function				= CalculateTax.Function.CalculateTax
				CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
				CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
				CalculateTax.TaxableAmount  		= WorkNetAmount2
				CalculateTax.TaxDate				= CustomerOrder.TaxDate
				CalculateTax.ShipmentDate			= CustomerOrder.ExpectedShipDate
				CalculateTax.InvoiceDate			= current corporate date
				CalculateTax.GeneralLedgerDate		= current corporate date
				CalculateTax.PaymentDate			= current corporate date
				CalculateTax.ProductTaxCategory		= ProductTaxCategory
				CalculateTax.DontCreateLogFile		= true
				LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax


				for each CalculateTax.TaxTable.TaxTableOutput
					LineTaxTotal += each.TaxAmount


					
			if (LineTaxTotal < 0)
				LineTaxTotal = 0
			return LineTaxTotal
			
		LineExtendedAmount   	is a DerivedField
			type is like InternationalAmount
			return (EnteredPrice * OrderQuantity)
		
		LinesAOCSum						is a DerivedField
			type is like InternationalAmount
			return sum CustomerOrderAddOnChargesRel.DerivedAOCAmount
			
		DiscountedAmountBase   is a DerivedField
			type is like InternationalAmount
			return (DiscountAmountCurrency * CustomerOrder.CurrencyRate)

		AdditionalDiscountBase   is a DerivedField
			type is like InternationalAmount
			return (EnteredDiscount * CustomerOrder.CurrencyRate)

		DiscountTakenBase   is a DerivedField
			type is like InternationalAmount
			restricted
			return (DiscountTaken * CustomerOrder.CurrencyRate)

		TaxableBase   is a DerivedField
			type is like InternationalAmount
			if (IsOverrideTxbl)
				return (OverrideTaxable * CustomerOrder.CurrencyRate)
			else
				return (TaxableAmountCurrency * CustomerOrder.CurrencyRate)

		GrossAmountBase   is a DerivedField
			type is like InternationalCost
			return (OrderQuantity * SellUnitPrice)
		   
		OldGrossAmountsBase   is a DerivedField
			type is like InternationalCost
			restricted
			return (old OrderQuantity * old SellUnitPrice)

		NetAmountBase     is a DerivedField
			type is like InternationalAmount
			return (GrossAmountBase - DiscountedAmountBase - AdditionalDiscountBase)

		OldNetAmountCurrency     is a DerivedField
			type is like InternationalAmount
			restricted
			return ((old OrderQuantity * old SellPriceCurrency) - old DiscountAmountCurrency - old EnteredDiscount)
						
		GrossAmountCurrency     is a DerivedField
			type is like InternationalCost
			return (OrderQuantity * SellPriceCurrency)

		NetAmountCurrency       is a DerivedField                           
			type is like InternationalAmount
			return (GrossAmountCurrency - DiscountAmountCurrency - EnteredDiscount)
			
		OpenToAlloc   is a DerivedField    
			type is like Quantity	
			restricted
			return (OrderQuantity - WarehouseDemandLineForOrderRel.PrintedQuantity)

		ProjectedStandardCost   is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsInventoried)
				return (OrderQuantity * SellToStock * ItemLocation.StandardCost)
			else
				return (OrderQuantity * SellToStock * UnitCost * CustomerOrder.CurrencyRate)

		ProjectedAverageCost   is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsInventoried)
				return (SellToStock * OrderQuantity * ItemLocation.AverageCost)
			else
				return (SellToStock * OrderQuantity * UnitCost * CustomerOrder.CurrencyRate)

		ProjectedSpecialCost   is a DerivedField
			type is like InternationalAmount
			restricted
			return (OrderQuantity * SellToStock * UnitCost * CustomerOrder.CurrencyRate)

		ProjectedCost      is a DerivedField
			type is like InternationalAmount
			if (IsInventoried)
				if (IsStandardCostingCompany)
					return ProjectedStandardCost
				else
					return ProjectedAverageCost
			else
				return ProjectedSpecialCost

		ProjectedMargin    is a ComputeField
			type is Decimal size 5.2
			((NetAmountBase - ProjectedCost) / NetAmountBase)

		UnbilledQty   is a DerivedField   
			type is like Quantity	
			return (OrderQuantity - InvoiceQuantity)

		UnbilledBase  is a DerivedField                    
			type is like InternationalAmount
			restricted
			return (UnbilledQty * SellUnitPrice - (AdditionalDiscountBase - DiscountTakenBase) - DiscountedAmountBase * UnbilledQty / OrderQuantity)

		UnbilledCurr  is a DerivedField                    
			type is like InternationalAmount
			return (UnbilledQty * SellPriceCurrency - (EnteredDiscount - DiscountTaken) - DiscountAmountCurrency * UnbilledQty / OrderQuantity)

			
		OpenQuantity  is a DerivedField
			type is like Quantity
			return (old OrderQuantity - CancelledQuantity)
			
		CancelledAmount  is a DerivedField
			type is like InternationalAmount
			return (CancelQuantity * UnitPrice)
			
		DisplayAllocatedQuantity is a ConditionalField
			type is Decimal size 17.4
			if (HasOrderWarehouseDemandLine)
				if (IsInventoriedOrNonStock and Item.IsCatchWeightItem)
					ItemLocationForCustomerOrderLocationRel.AllocatedQuantity
				else
					WarehouseDemandLineForOrderRel.AllocatedQuantityInTransactionUOM
			else
				ShippedQuantity

		DisplayPrintedQuantity   is a ConditionalField
			type is Decimal size 17.4
			if (HasOrderWarehouseDemandLine)
				if (IsInventoriedOrNonStock and Item.IsCatchWeightItem)
					WarehouseDemandLineForOrderRel.PrintedQuantity
				else
					WarehouseDemandLineForOrderRel.PrintedQuantityInTransactionUOM
			else
				ShippedQuantity

		DisplayInProcessQuantity    is a ConditionalField
			type is Decimal size 17.4
			if (HasOrderWarehouseDemandLine)
				if (IsInventoriedOrNonStock and Item.IsCatchWeightItem)
					WarehouseDemandLineForOrderRel.InProcessQuantity
				else
					WarehouseDemandLineForOrderRel.InProcessQuantityInTransactionUOM
			else
				ShippedQuantity

		DisplayBackorderedQuantity   is a ConditionalField
			type is Decimal size 17.4
			if (HasOrderWarehouseDemandLine)
				if (Item.IsCatchWeightItem)
					WarehouseDemandLineForOrderRel.BackorderedQuantity
				else
					WarehouseDemandLineForOrderRel.BackorderedQuantityInTransactionUOM
			else
				0
		   
		LineTotal is a DerivedField
			type is like InternationalAmount
			if (not Status.Canceled
			and TaxStatus.Taxable
			and DoTaxCalculation)
				LocalTaxLineItemCreated = true
				LocalDoCreateTaxLog = false
				include CalculateTaxByGroup
			return (NetAmountCurrency + TaxTotal)
			
		TotalAccumulatePriceQuantity         is a DerivedField
			type is like Quantity
			restricted
			for each CustomerOrderLineAccumulatedGroupPricingRel
				LocalQuantityPrice  = (each.OrderQuantity * each.SellToStock)
				LocalAccumulatedQuantity += LocalQuantityPrice
			return LocalAccumulatedQuantity	
			
		HoldCodeMessage						is a MessageField
			"ReleaseCompletedOrder/CreditLimitHold,NoPOCreated"
		
		HoldCodeWithoutPOMessage			is a MessageField
			"ReleaseCompletedOrder/CreditLimitHold"
		
		NationalHoldCodeWithPOMessage		is a MessageField
			"ReleaseCompletedNationalAccountOnHold,NoPOCreated"
		
		NationalHoldCodeMessage				is a MessageField
			"ReleaseCompletedNationalAccountOnHold"
		
		CustomerGroupHoldCodeWithPOMessage	is a MessageField
			"ReleaseCompletedCustomerGroupOnHold,NoPOCreated"
		
		CustomerGroupHoldCodeMessage		is a MessageField	
			"ReleaseCompletedCustomerGroupOnHold"
			
		DerivedLocation 					is a DerivedField				
			type is like InventoryLocation
			restricted
			
			if (Company.LocationBasedPricing)
				return InventoryLocation
			else
				return blank
		
		DerivedCurrency						is a DerivedField
			type is like Currency
			restricted
			
			if (Company.CurrencyBasedPricing)
				return CustomerOrder.Currency
			else
				return Company.Currency
			
		DerivedPriceBase					is a DerivedField
			type is like PriceBase 
			if (HasPriceFromContract)
				return DefaultContractRel.BaseName
			else
			if (HasPriceFromPromotion)
				return DefaultPromotionRel.BaseName 
			else
			if (HasPriceFromPriceList)
				return PriceListRel.BaseName
			
		DerivedPriceList					is a DerivedField
			type is like ListName
			restricted
			
			if (CustomerOrder.ListName entered)
				return CustomerOrder.ListName
			else 
				if (PriceListContractRel exists)
					return PriceListContractRel.PriceListContractPromotion.ListName
				else
					if (PriceListPromotionRel exists)
						return PriceListPromotionRel.PriceListContractPromotion.ListName
		  			else
		  				if (PriceListRel exists)
		  					return PriceListRel.PriceListContractPromotion.ListName	

		DerivedTaxTotal			is a DerivedField
			type is like InternationalAmount
			default label is "TaxTotal"
			if (not Status.Canceled
			and TaxStatus.Taxable
			and DoTaxCalculation)
				LocalTaxLineItemCreated = true
				LocalDoCreateTaxLog = false
				include CalculateTaxByGroup
			return TaxTotal

		DerivedLineTaxableAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (OverrideTaxable entered)
				return OverrideTaxable
			else
				return NetAmountCurrency

		DerivedNationalCompany is a DerivedField
			type is like Company
			restricted
			if (CustomerOrder.CompanyCustomer.NationalAccountIndicator.No)
				return Company
			else
			if (CustomerOrder.CompanyCustomer.NationalAccountIndicator.Child)
				return CustomerOrder.CompanyCustomer.NationalCompany
			else
				return CustomerOrder.CompanyCustomer.Company

		DerivedNationalCustomer is a DerivedField
			type is like Customer
			restricted
			if (CustomerOrder.CompanyCustomer.NationalAccountIndicator.No)
				return Customer
			else
			if (CustomerOrder.CompanyCustomer.NationalAccountIndicator.Child)
				return NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return CustomerOrder.CompanyCustomer.Customer
				
		DerivedIntrastat is a DerivedField
			type is Boolean
			restricted
			if (not LocalIntrastatComputed)
				LocalIntrastat 			= CustomerOrder.DerivedIntrastatProcessing
				LocalIntrastatComputed 	= true
			return 	LocalIntrastat
			
		DerivedLineNumber is a DerivedField
			type is like CustomerOrderLine
			return CustomerOrderLine	
			
		DerivedStatus is a DerivedField
			type is like Status	
			return Status			
		
		DerivedUOMForEnteredPrice is a DerivedField
			type is like UnitOfMeasure
			if (SellingPriceUOM entered)
				return SellingPriceUOM
			else
				return SellUOM
				
		DerivedPortCodeValue is a DerivedField
			type is like IntrastatPortCode
			restricted
			if (action type.Create or action type.Update)
				return blank
			else
				return PortCode
			
		DerivedExpectedDeliveryDayNumber is a DerivedField
			type is Numeric 1
			restricted
			return CustomerOrder.ExpectedShipDate week day
			
		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"CustomerOrderLine"
			":"
			CurrentTimestamp
			
		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp
			
		ValidOrderQuantityRangeMessage is a MessageField
			"ValidOrderQuantityFor<CustomerOrder.InventoryLocation>Is<ItemLocationForCustomerOrderLocationRel.MinimumSaleQuantity>_<Item.StockUOM>To<ItemLocationForCustomerOrderLocationRel.MaximumSaleQuantity>_<Item.StockUOM>."
			
		ValidOrderQuantityMinimumMessage is a MessageField
			"MinimumOrderQuantityFor<CustomerOrder.InventoryLocation>Is<ItemLocationForCustomerOrderLocationRel.MinimumSaleQuantity>_<Item.StockUOM>."
			
		ValidOrderQuantityMaximumMessage is a MessageField
			"MaximumOrderQuantityFor<CustomerOrder.InventoryLocation>Is<ItemLocationForCustomerOrderLocationRel.MaximumSaleQuantity>_<Item.StockUOM>."
			
		DerivedValidOrderQuantityForItemLoc is a DerivedField
			type is MessageField
			if (ItemLocationForCustomerOrderLocationRel.MinimumSaleQuantity entered
			and ItemLocationForCustomerOrderLocationRel.MaximumSaleQuantity entered)
				return ValidOrderQuantityRangeMessage
			else
			if (ItemLocationForCustomerOrderLocationRel.MinimumSaleQuantity entered)
				return ValidOrderQuantityMinimumMessage
			else
				return ValidOrderQuantityMaximumMessage


		DerivedCleanDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return CustomerOrder.DerivedCleanDocumentID
					
		DerivedLineStatus is a DerivedField
			type is Alpha size 20
			restricted
			if (Status.Released)
				return "Open"
			else
				return "Closed"
				
		DerivedBusinessGroup is a DerivedField
			type is Alpha size 5
			restricted
			if (LineType.Inventoried or LineType.NonStock)
				return CustomerOrder.Company.BusinessGroup
			else
				return ""
		
		DerivedItemID is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedCleanDocumentID = "Y" or LineType.Special)
				return Item
			else
				return LocalPrmFEG + LocalDelimiter + CustomerOrder.Company.BusinessGroup + LocalDelimiter + Item
		
		DerivedEarlyDeliveryDate is a DerivedField
			type is Alpha size 40
			restricted
			DerivedEarlyDeliveryDate = EarlyDeliveryDate
			return DerivedEarlyDeliveryDate[1:4] + "-" + DerivedEarlyDeliveryDate[5:6] + "-" + DerivedEarlyDeliveryDate[7:8]
		
		DerivedShipToName is a DerivedField
			type is Alpha size 120
			restricted
			return CustomerShipTo.Name	
		
		DerivedShipToID is a DerivedField
			type is Alpha size 120
			restricted
			if(CustomerShipTo entered)
				if(DerivedCleanDocumentID = "Y")
					return Customer + LocalDelimiter + CustomerShipTo	
				else
					return Company +LocalDelimiter + Customer + LocalDelimiter + CustomerShipTo
			else
				return ""	

		

		DerivedTenantID is a DerivedField 
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
			
		CustomerOrderLineHoldDescription is a DerivedField
			type is Alpha 200
			restricted
			return "Customer Order "+ CustomerOrder + " line item " + Item +" has been placed on hold"
				
		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ Company.FinanceEnterpriseGroup +":"+ CustomerOrderLine +":"+ "?CustomerOrderLineOnHold&verb=Process"
			
		CustomerOrderLineOnHoldAlertXML is a DerivedField
			type is XMLDocument
			restricted
			CustomerOrderLineOnHoldAlertXML = template.IONCustomerOrderLineOnHold_CustomerOrderLine_ST document for this instance


		OrderEntryBackOrderAlertDesc is a DerivedField
			type is Alpha 100
			restricted
			return "Customer Order "+ CustomerOrder + " line item " + Item +" has been backordered"
				
		DerivedOEBackOrderBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ Company.FinanceEnterpriseGroup +":"+ CustomerOrderLine +":"+ "?OrderEntryBackOrderAlert&verb=Process"
			
		OrderEntryBackOrderAlertXML is a DerivedField
			type is XMLDocument
			restricted
			OrderEntryBackOrderAlertXML = template.IONOrderEntryBackOrder_CustomerOrderLine_ST document for this instance	
		
		DerivedOrderDate is a DerivedField
			type is Alpha size 20
			restricted
			return CustomerOrder.OrderDate
										
		DerivedBackorderedQuantity is a DerivedField
			type is Alpha size 20
			restricted
			return	WarehouseDemandLineForOrderRel.BackorderedQuantity

		DerivedUNSPSCCodeNoDash is a StringField
			type is Alpha 35
			restricted
			UNSPSCCode.UNSPSCSegment
			UNSPSCCode.UNSPSCFamily
			UNSPSCCode.UNSPSCClass
			UNSPSCCode.UNSPSCCommodity

		DropshipMessageTaxEgine 									is a MessageField
			restricted
			"DropshipNotAllowedWhenTaxEntitySetAsTaxEngine"

		DropshipMessageProcessShipmentBods 							is a MessageField
			restricted
			"DropshipNotAllowedWhenBillingCompanySetWithProcessShipmentBods"

		CreatePOMessageTaxEgine 									is a MessageField
			restricted
			"CreatePurchaseOrderNotAllowedWhenTaxEntitySetAsTaxEngine"

		CreatePOMessageProcessShipmentBods 							is a MessageField
			restricted
			"CreatePurchaseOrderNotAllowedWhenBillingCompanySetWithProcessShipmentBods"

		CannotUpdateCOLineTaxEgine 									is a MessageField
			restricted
			"CannotUpdateWhileAwaitingTaxApproval"

		CannotUpdateCOLineProcessShipmentBods 						is a MessageField
			restricted
			"CannotUpdateWhileShipmentAwaitingTaxApproval"

		CannotCancelCOLineMessageTaxEgine 							is a MessageField
			restricted
			"CannotCancelLineWhileAwaitingTaxApproval"

		CannotCancelCOLineProcessShipmentBods 						is a MessageField
			restricted
			"CannotCancelLineWhileShipmentAwaitingTaxApproval"

		CannotDeleteCOLineMessageTaxEgine 							is a MessageField
			restricted
			"CannotDeleteLineWhileAwaitingTaxApproval"

		CannotDeleteCOLineProcessShipmentBods 						is a MessageField
			restricted
			"CannotDeleteLineWhileShipmentAwaitingTaxApproval"

		DerivedCreatePOMessage 				is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CreatePOMessageTaxEgine
			else
				return CreatePOMessageProcessShipmentBods

		DerivedDropshipMessage 				is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return DropshipMessageTaxEgine
			else
				return DropshipMessageProcessShipmentBods

		CannotUpdateCOLineMessage			is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotUpdateCOLineTaxEgine
			else
				return CannotUpdateCOLineProcessShipmentBods

		CannotDeleteCOLineMessage			is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotDeleteCOLineMessageTaxEgine
			else
				return CannotDeleteCOLineProcessShipmentBods

		CannotCancelCOLineMessage			is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotCancelCOLineMessageTaxEgine
			else
				return CannotCancelCOLineProcessShipmentBods

		DerivedOpenQuantity is a DerivedField
			type is like Quantity
			restricted
			if(CreatePurchaseOrder
			and PurchaseOrderLineSourcesRel exists)
				return OrderQuantity - first PurchaseOrderLineSourcesRel.ProcessedQuantity 
			else 
				return ((WarehouseDemandLineOpenQuantityRel.Quantity -  WarehouseDemandLineOpenQuantityRel.PrintedQuantity) / SellToStock)

	Field Rules
		FutureOrder		
			if (CustomerOrder.OrderEntryOrderType.ShipImmediate)
				cannot be entered
					"ShipImmediateCannotHaveFutureOrderLine"
			else 
			if (action type.Create)
				default to CustomerOrder.FutureOrder
			
			if (FutureOrder changed
			and FutureOrder)
				constraint (WarehouseDemandLineForOrderRel.PrintedQuantity not entered)
					"CannotChangeIntoFutureOrderWhenPrintedQuantityExists"						
					
			constraint (!CreatePurchaseOrder)
				"FutureOrderAndCreatePurchaseOrderBothCannotBeEntered"



















		BookedQuantity
			if (FutureOrder)
				BookedQuantity = OrderQuantity - WarehouseDemandLineForOrderRel.AllocatedQuantityInTransactionUOM - WarehouseDemandLineForOrderRel.BackorderedQuantityInTransactionUOM
			else
				initialize BookedQuantity
										
		MajorSalesClass
			default to Item.MajorSalesClass
			
		MinorSalesClass
			default to Item.MinorSalesClass

		CustomerItemEntered
			if (CustomerItem entered)
				default to true
				
		CustomerItem
			if (Item not entered and not IsSpecialItem)
				required																		



		Item

			if (CustomerItem entered)
				force default to CustomerItem.Item
			
			required
			cannot be changed																		
			
			if (IsInventoriedOrNonStock)
				constraint (Item exists)
					"ItemDoesNotExists"																
				constraint (Item.Active)
					"ItemIsInactive"																
				if (ItemLocationExists)
					constraint (ItemLocationForCustomerOrderLocationRel.ItemLocation.Active)
						"ItemLocationIsInactive"
					LocalMinorSalesClass=Item.MinorSalesClass
					if( BillingItemGeneralLedgerAccountsRel not exists)
						LocalMinorSalesClass=blank													
						constraint (BillingItemGeneralLedgerAccountsRel exists)
							"SalesAccountsDoNotExistForItem"	
						
				if (IsInventoried)	
					constraint (ItemLocationForCustomerOrderLocationRel.InventoryTracked)
						"ItemIsNotAnInventoriedItem"

					if (Item.ReplacementItem not entered)				
						constraint (ItemLocation.AllowIssue)
							"ItemIssuesAreNotAllowed"												
					else
						constraint (ReplacementItemLocationRel exists)
							"ReplacementItemLocationDoesNotExistForLine<CustomerOrderLine>" 		
						
						constraint (ReplacementItemLocationRel.AllowIssue)	
							"ReplacementItemLocationDoesNotAllowIssueForLine<CustomerOrderLine>"	
			
			
			if (PriceContractItemRel exists)
				constraint (!PriceContractItemRel.SalesProhibited)
					"ItemIsProhibitedForSaleToThisCustomer"		
			else 
			if (PricePromotionItemRel exists)
				constraint (!PriceContractItemRel.SalesProhibited)
					"ItemIsProhibitedForSaleToThisCustomer"	
			else
				constraint (!PriceContractItemRel.SalesProhibited)
					"ItemIsProhibitedForSaleToThisCustomer"		
			
			if (PriceListSalesClassForContractRel exists)
				constraint (!PriceListSalesClassForContractRel.SalesProhibited)
					"ItemIsProhibitedForSaleToThisCustomer"	
			else
			if (PriceListSalesClassForPromotionRel exists)
				constraint (!PriceListSalesClassForPromotionRel.SalesProhibited)
					"ItemIsProhibitedForSaleToThisCustomer"	
			else
				constraint (!PriceListSalesClassForPriceListRel.SalesProhibited)
					"ItemIsProhibitedForSaleToThisCustomer"	

		LineType
			if (CustomerOrder.OrderEntryOrderType.Dropship or Dropship
			or  not ItemLocationForCustomerOrderLocationRel.InventoryTracked)
				default to LineType.NonStock
			else
				default to LineType.Inventoried



		ItemDescription
			if (CustomerItem entered)
				force default to CustomerItem.Description
			else
			if (IsInventoriedOrNonStock)
				force default to Item.Description

			required
			
			if (IsSpecialOrNonStock)
				cannot be changed	

		KitType
			if (InventoryLocation entered
			or  InventoryLocation changed)
				if (KitItemRel.Active)
					KitType = KitItemRel.MakeCode
				else
					if (KitItemNoCompanyNoLocationRel.Active)
						KitType = KitItemNoCompanyNoLocationRel.MakeCode
					else 
						KitType = KitType.NotAKit		
					
		HoldCode
			if (old HoldCode entered
			and HoldCode changed)
				cannot be changed
					"CannotUpdateHoldCode;UseUpdateHoldCodeActionToUpdate"
		
			if (HoldCode entered or (HoldCode entered  and HoldCode changed))				
				trigger "CustomerOrderLineHoldService" PA service
					resume on error
					title is "CO:<Company>Customer:<Customer>"
					Criteria
						Company						
					Variables
						Company
							variable name is Company	
						Customer
							variable name is Customer
						CustomerOrder
							variable name is CustomerOrder
						InventoryLocation
							variable name is InventoryLocation
						CustomerOrderLine
							variable name is CustomerOrderLine
						Item
							variable name is Item
						HoldCode
							variable name is HoldCode
							
				invoke CustomerOrderLineOnHoldAlert
					invoked.PrmAlertName = "FSM_ION_CustomerOrderLineHoldAlert"
				
		InventoryLocation
			initial value is CustomerOrder.InventoryLocation
			default to CustomerOrder.InventoryLocation
			
			if (CustomerOrder.OrderEntryOrderType.ShipImmediate)
				constraint (InventoryLocation = CustomerOrder.InventoryLocation)
					"OrderLineInventoryLocationMustBeEqualToOrderInventoryLocationForShipImmediate"	
					
			if (!CustomerOrder.OrderEntryOperator.AllowLocationTransfers)
				constraint (InventoryLocation = CustomerOrder.InventoryLocation)
					"LocationTransfersNotAllowedForUser"                 						
					
			if (WarehouseDemandLineForOrderRel.PrintedQuantity entered)
				cannot be changed
					"CannotChangeLocationAfterPickListPrints"									
				
			if (WarehouseDemandLineForOrderRel.DetailQuantity entered)
				cannot be changed
					"CannotChangeLocationAfterItemDetailIsAllocated"							
			
			if (Company.RouteAndStop
			and !IsUnreleased
			and RouteCreate)
				cannot be changed 
					"InventoryLocationCannotBeChanged;RouteHasBeenCreated"						
		
		SellUOM
			if (LineType.Special
			or  Company.UnitOfMeasureRequired)
				required																		
					"UnitOfMeasureIsRequired"
			else
				default to DefaultSellingItemUOMRel.UnitOfMeasure	
			
			if (IsInventoriedOrNonStock)
				constraint (SellingItemUOMRel exists)
					"<SellUOM>IsAnInvalidSellUnitOfMeasure"
	   							
			cannot be changed																	
				"CannotChangeSellUnitOfMeasure"	
		
		SellingPriceUOM
			if (LineType.Special)
				force default to SellUOM
			else
				default to DefaultSellingPriceItemUOMsRel.UnitOfMeasure 
			
			if (IsInventoriedOrNonStock)
				constraint (SellingPriceItemUOMRel exists)
					"<SellingPriceUOM>IsAnInvalidSellPriceUnitOfMeasure"
							
		SecondaryUOM
			if (Item.IsCatchWeightItem)
				default to Item.SecondaryUOM

		NoCharge
			if (PriceStatus.AmalgamatedGroupPricing)
				cannot be entered
					"AmalgamatedPricedItemCannotBeNochargeItem"									
				
		PriceStatus
			if  (not NoCharge
			and (not LocalEnteredPriceCheck
			or   not PriceStatus.ManualOverrideOfPricing))
				if  (IsManualOverridePricing)
					PriceStatus =  PriceStatus.ManualOverrideOfPricing 
				else	
				if (IsAmalgamatedPricing)
					PriceStatus = PriceStatus.AmalgamatedGroupPricing
				else
					PriceStatus = PriceStatus.SystemCalculatedPricing

			if (IsSpecialItem)
				PriceStatus = PriceStatus.ManualOverrideOfPricing

		PriceDate
			default to CustomerOrder.PriceDate
			default to current corporate date

		EnteredPrice
			if (NoCharge)
				cannot be entered
					"ForNoChargeItemPriceCannotBeEntered"										

			if (not NoCharge and EnteredPrice not entered)
				constraint (PriceBaseItemRel exists)
		   			"BasePriceDoesNotExist"
			
			if (NoCharge changed
			and !NoCharge)
				required
					"PriceIsRequiredWhenNoChargeIsNotSet"										

		SellPriceCurrency
			if (CustomerOrder.OrderEntryOperator.RestrictToDefaults)
				cannot be entered
					"ItemPriceCannotBeOverridden"												
					
		UnitCost
			if (IsInventoried)
				cannot be entered
					"UnitCostCannotBeEnteredForInventoryItems"									
								
			if 	(!CreatePurchaseOrder)
				if (LineType.NonStock)
					default to (ItemLocation.LastReceiptCost / CustomerOrder.CurrencyRate)
					
					if (InventoryCompanyRel.CostingMethod.StandardCosting)
						default to (ItemLocation.StandardCost / CustomerOrder.CurrencyRate)			
					else
					if (InventoryCompanyRel.CostingMethod.AverageCosting)
						default to (ItemLocation.DerivedItemAverageCost / CustomerOrder.CurrencyRate)
					else
						default to (ItemLocation.StandardCost / CustomerOrder.CurrencyRate)			

					if (!ItemLocation.NoCharge)					
						required																	
				
					if (WarehouseDemandLineForOrderRel.PrintedQuantity entered)
						cannot be changed
							"CannotChangeUnitCostAfterPickListPrints"							
				else
				if (LineType.Special)
					required
		
		SellPriceToStock
			if (IsSpecialItem)
				default to 1
			else
				default to SellingPriceItemUOMRel.UOMConversion

		SellToStock
			if (IsSpecialItem)
				default to 1
			else
				default to SellingItemUOMRel.UOMConversion
			
		SecondaryToStock
			default to Item.SecondaryUOMMultiplier

		OrderDiscount
			default to PriceListContractRel.OrderDiscount
			default to PriceListPromotionRel.OrderDiscount
			default to PriceListRel.OrderDiscount

																																			
		CustomerShipTo
			default to CustomerOrder.CustomerShipTo
			
			if (IsHSNSACCodeEnabled)
				if (CustomerShipTo changed)
					confirmation required
						"UpdatingCustomerShipToWillUpdateTheTaxCodeAccordingly,Continue?"
					initialize TaxCode
			
			if (WarehouseDemandLineForOrderRel.PrintedQuantity entered)
				cannot be changed											
					"CannotChangeLineCustomerShipToAfterPickListPrints"                    		
			
			if (CustomerOrder.OrderEntryOrderType.ShipImmediate)
				constraint (CustomerShipTo = CustomerOrder.CustomerShipTo)
					"ForShipImmediateOrderLineCustomerShipToMustBeEqualToOrderCustomerShipTo"	
			
			if (Company.RouteAndStop
			and !IsUnreleased
			and RouteCreate)
				cannot be changed 
					"CustomerShipToCannotBeChanged;RouteHasBeenCreated"							
			
			if (Dropship
			and !IsUnreleased)
				cannot be changed
					"CannotChangeCustomerShipToForDropshipOrders"								

		CreatePurchaseOrder
			if (TaxEntityRel.ThirdParty.TaxEngine
			or Company.ProcessShipmentBods)
				cannot be entered
					"<DerivedCreatePOMessage>"													

			if (!IsUnreleased
			and CustomerOrder.HoldCode entered)
				cannot be entered
					"CannotUpdateCreatePurchaseOrderLineIfOrderIsOnHold"						
			else
			if (CustomerOrder.OrderEntryOrderType.ShipImmediate)
				cannot be entered
					"ShipImmediateOrderCannotHaveACreatePurchaseOrder"							
				
			if (!IsUnreleased)
				cannot be changed
					"CannotChangeCreatePurchaseOrderAfterReleasingOrderLine"					
			
			
			constraint (!FutureOrder)
				"FutureOrderAndCreatePurchaseOrderBothCannotBeEntered"							
				
		Dropship
			if (TaxEntityRel.ThirdParty.TaxEngine
			or Company.ProcessShipmentBods)
				cannot be entered
					"<DerivedDropshipMessage>"								

			if (Vendor entered
			and !IsInventoried)
				if (CustomerOrder.ShipComplete.AcceptsPartialShipments)
					default to true
					
			if (ShipComplete.DoesNotAcceptPartials)
				cannot be entered
					"LineCannotBeBothDropshipAndShipComplete"									
			
			constraint (CreatePurchaseOrder)
				"DropshipOrderLineMustHaveCreatePurchaseOrder"									
			
			if (!IsUnreleased)
				cannot be changed
					"CannotChangeDropshipAfterReleasingOrder"									

		Carrier
			default to CustomerShipTo.Carrier
			default to CustomerOrder.Carrier

		PurchaseOrder
			if (!CreatePurchaseOrder)
				cannot be entered
					"PurchaseOrderNumberValidOnlyForCreatePurchaseOrderCustomerOrderLine"		
					
			if (IsUnreleased)
				cannot be entered
					"PurchaseOrderIsInvalidForUnreleasedOrder"									
			else
				cannot be changed
					"CannotChangePurchaseOrderAfterRelease"										
					
		POCode
			if (!CreatePurchaseOrder)
				cannot be entered
					"POCodeNumberValidOnlyForCreatePurchaseOrderCustomerOrderLine"				
					
			if (!IsUnreleased)
				cannot be changed
					"CannotChangePOCodeAfterRelease"											

		BillingProcessLevel
			default to CustomerOrder.BillingProcessLevel
			
		Customer
			default to CustomerOrder.Customer
																								
		Vendor
			if (!CreatePurchaseOrder)
				cannot be entered
					"VendorOnlyValidForCreatePurchaseOrderCustomerOrderLine"					
			else
			if (!IsInventoried)
				if (!IsVendorAndLocationDefault)
					if (CustomerOrder.CustomerShipTo not entered
					or  CustomerShipTo not entered)
						default to OrderEntryCustomerRel.Vendor
				
				default to CustomerShipTo.Vendor
				
			if (CreatePurchaseOrder
			and PurchaseOrder not entered
			and !IsSpecialItem)
				default to ItemReplenishmentSourcesRel.Vendor 
			
			if (!IsUnreleased)
				cannot be changed
					"CannotChangeVendorAfterReleasingOrderLine"									

		PurchaseFromLocation
			if (!CreatePurchaseOrder)
				cannot be entered
					"PurchaseFromLocationOnlyValidForCreatePurchaseOrderCustomerOrderLine"		
			else
				if (!IsInventoried)
					if (!IsVendorAndLocationDefault)
						if (CustomerOrder.CustomerShipTo not entered
						or  CustomerShipTo not entered)
							default to OrderEntryCustomerRel.PurchFrLoc
						
					default to CustomerShipTo.PurchaseFromLocation
					
					default to ItemLocation.PurchaseFromLocation
	
					if (Vendor = ItemReplenishmentSourcesRel.Vendor)
						default to ItemReplenishmentSourcesRel.PurchaseFromLocation

				if (PurchaseOrder not entered
				and !IsSpecialItem)
					default to ItemReplenishmentSourcesRel.PurchaseFromLocation 
			
			constraint (Vendor entered)
				"PurchaseFromLocationNotValidWithoutAVendor"									
					
			if (!IsUnreleased)
				cannot be changed
					"CannotChangePurchaseFromLocationAfterReleasingOrderLine"					
			
		RouteHeader
			if (PickShipRouteRel exists)
				initialize RouteHeader.Route
				for each PickShipRouteRel
					if (each.PickShipRoute.DayOfWeek >= DerivedExpectedDeliveryDayNumber)
						RouteHeader.Route = each.PickShipRoute.Route
						end for each
					else
						if (RouteHeader.Route not entered)
							RouteHeader.Route = each.PickShipRoute.Route
				
			constraint (Company.RouteAndStop)	
				"RouteInvalid;RouteProcessingNotAllowed"										
				
			cannot be changed
				"CannotChangeDefaultRoute;UseRouteMaintenanceProgram"							
		
		RouteStop
			default to first PickShipRouteRel.PickShipRoute.Stop

		Territory
			default to CustomerOrder.Territory
			required
			
		SalesRepresentative
			default to CustomerOrder.SalesRepresentative
			required
			
		SalesRepresentative2
			default to CustomerOrder.SalesRepresentative2
			
			if (CommissionSplitPercentage entered)
				required
					"SalesRepresentative2AndCommissionSplitPercentageBothRequired" 				
				
		CommissionSplitPercentage
			if (SalesRepresentative2 entered)
				default to CustomerOrder.CommissionSplitPercentage
				required
					"SalesRepresentative2AndCommissionSplitPercentageBothRequired"				
			else
				cannot be entered
				
		CommissionRate1
			default to CustomerOrder.CommissionRate1
			
			constraint ((CommissionRate1 + CommissionRate2) <= 100)
				"CommissionRateForSalesRepresentative1&2CannotExceed100%" 					 	
			
		CommissionRate2
			if (SalesRepresentative2 entered)
				default to CustomerOrder.CommissionRate2
			else
				cannot be entered

		EnteredDiscount
			if (NoCharge)
				cannot be entered
					"NochargeItemCannotHaveAdditionalDiscount"									
			
			constraint (EnteredDiscount >= DiscountTaken)
				"AdditionalDiscountCannotBeLessThanDiscountInvoiced"							

		TaxStatus
			if (CustomerOrder.TaxStatus.Exempt)
				default to CustomerOrder.TaxStatus
			
			if (TaxCode entered)
				default to TaxStatus.Taxable
			
			if (!IsSpecialItem)
				if (ItemLocation.TaxableWhenSold)
					default to TaxStatus.Taxable
				else
					default to TaxStatus.Exempt
			else
				default to CustomerOrder.TaxStatus
			
			if (TaxStatus.Taxable)
				constraint (CustomerOrder.TaxStatus.Taxable)
					"LineCannotBeTaxableWhenOrderIsTaxExempt"									
			
			if (InvoiceQuantity entered)
				cannot be changed
					"CannotChangeTaxStatusWhenQuantityIsInvoiced" 								
								
		TaxCode
			



			if (TaxStatus.Taxable)
				if (TaxEntityRel.ThirdParty.InforTax
				and IsHSNSACCodeEnabled)
					if (CustomerShipTo.TaxRegistrationType.Unregistered
					or  CustomerOrder.Customer.TaxRegistrationType.Unregistered)
						required
							"TaxCodeShouldBeEnteredForUnregisteredTaxTypeCustomer"		
							
					if (CustomerShipTo.ShipToAddress.Country entered
					and CustomerShipTo.ShipToAddress.Country.IsoCountryCode entered)
						if (CustomerShipTo.TaxRegistrationType.SpecialEconomicZone)
							default to HSNSACCode.ExportTaxCode
						if (CustomerShipTo.TaxRegistrationType.Registered)
							if (InventoryLocation.PostalAddress.Country.IsoCountryCode = "IN")
								if (CustomerShipTo.ShipToAddress.Country.IsoCountryCode = "IN")
									if (InventoryLocation.PostalAddress.StateProvince entered
									and CustomerShipTo.ShipToAddress.StateProvince entered)
										if (InventoryLocation.PostalAddress.StateProvince = CustomerShipTo.ShipToAddress.StateProvince)
											default to HSNSACCode.IntrastateTaxCode
										else
											default to HSNSACCode.InterstateTaxCode
								else
									default to HSNSACCode.ExportTaxCode
									
					else
					if (CustomerOrder.Customer.PostalAddress.Country entered
					and CustomerOrder.Customer.PostalAddress.Country.IsoCountryCode entered)
						if (CustomerOrder.Customer.TaxRegistrationType.SpecialEconomicZone)
							default to HSNSACCode.ExportTaxCode
						if (CustomerOrder.Customer.TaxRegistrationType.Registered)
							if (InventoryLocation.PostalAddress.Country.IsoCountryCode = "IN")
								if (CustomerOrder.Customer.PostalAddress.Country.IsoCountryCode = "IN")
									if (InventoryLocation.PostalAddress.StateProvince entered
									and CustomerOrder.Customer.PostalAddress.StateProvince entered)
										if (InventoryLocation.PostalAddress.StateProvince = CustomerOrder.Customer.PostalAddress.StateProvince)
											default to HSNSACCode.IntrastateTaxCode
										else
											default to HSNSACCode.InterstateTaxCode
								else
									default to HSNSACCode.ExportTaxCode
						
					required
						"TaxCodeShouldBeEnteredAsHSN_/SACCodeFlagIsEnabled"
						
				if (!IsSpecialItem
				and ItemLocation.TaxableWhenSold)
					default to ItemLocation.SellTaxCode
			
				if (IsSpecialItem
				or ItemLocation.TaxableWhenSold)
					default to CustomerShipTo.TaxCode
			
				default to CustomerOrder.TaxCode
				
				if (TaxEntityRel.UseTaxCodeAccounts)
					constraint (CompanyTaxCodeRel exists
					or TaxEntityRel.ThirdParty.VertexOSeries)
						"TaxCodeNotSetupForCompany"
						
				LocalDoCreateTaxLog = true		
			else
				cannot be entered
					"TaxCodeCannotBeEnteredAsTaxStatusIsExempt"
					
			if (InvoiceQuantity entered)
				cannot be changed
					"CannotChangeTaxCodeWhenQuantityIsInvoiced" 								

		EarlyDeliveryDate
			if (CustomerOrder.RequestedDate < current corporate date )
				default to current corporate date
			else
				default to CustomerOrder.RequestedDate
			
			if (EarlyDeliveryDate changed
			and Company.AllocateDate.RequestDate)
				initialize AllocatedDate
				
		LateDeliveryDate
			constraint (LateDeliveryDate >= EarlyDeliveryDate)
				"LateDeliveryDateCannotBeLessThanEarlyDeliveryDate"								
			
		ExpectedShipDate
			if (CustomerOrder.ExpectedShipDate < current corporate date)
				default to current corporate date
			else
				default to CustomerOrder.ExpectedShipDate										
			
			required																			
			
			if (ExpectedShipDate changed)
				constraint (ExpectedShipDate >= current corporate date)
					"ExpectedShipDateCannotBeLessThanToday'sDate"								
				if (Company.AllocateDate.ExpectedShipDate)
					initialize AllocatedDate
			
			if (CustomerOrder.OrderEntryOperator.RestrictToDefaults
			and CustomerOrder.OrderEntryOperator.DefaultShipDate entered)
				constraint (ExpectedShipDate = CustomerOrder.OrderEntryOperator.DefaultShipDate)
					"UserRestrictedToDefaults;CannotOverrideExpectedShipDate"					
			
			if (Company.RouteAndStop
			and !IsUnreleased
			and RouteCreate)
				cannot be changed 
					"ExpectedShipDateCannotBeChanged;RouteHasBeenCreated"						
								
		AllocatedDate
			if (Company.AllocateDate.ExpectedShipDate)
				default to ExpectedShipDate
			else
			if (Company.AllocateDate.RequestDate)
				default to EarlyDeliveryDate
			else
			if (Company.AllocateDate.EntryDate)
				default to current corporate date
			
		ContractNumber
	 		default to PriceContractItemRel.PriceListContractPromotion.ListName
	 		default to PriceListSalesClassForContractRel.PriceListContractPromotion.ListName
	 		default to PriceListContractRel.PriceListContractPromotion.ListName

	 	Promotion	
	 		default to PricePromotionItemRel.PriceListContractPromotion.Promotion
	 		default to PriceListSalesClassForPromotionRel.PriceListContractPromotion.Promotion
	 		default to PriceListPromotionRel.PriceListContractPromotion.Promotion
			
		ListName
			default to CustomerOrder.ListName

		BookedBySaleAnalysis
			default to BookedBySaleAnalysis.NotYetApproved
			
		BookedDate
			if (FutureOrder)
				default to ExpectedShipDate
			else
			if (CustomerOrder.Status.Released)
				default to current corporate date
			else
				default to CustomerOrder.OrderDate

		OrderQuantity
			required
			
			if (IsSpecialItem
			or  IsCatchWeightItem)
				LocalOrderQuantity 			 = OrderQuantity
				LocalOrderQuantityDifference = OrderQuantity - old OrderQuantity
			else
				LocalOrderQuantity 			 = OrderQuantity * SellToStock
				LocalOrderQuantityDifference = ((OrderQuantity - old OrderQuantity) * SellToStock)
			
			if (IsInventoriedOrNonStock) 
				constraint (HasValidOrderQuantityForItemLoc) 
					"<DerivedValidOrderQuantityForItemLoc>"
			
			if (WorkOrder entered)
				cannot be changed
					"CannotChangeQuantity;OrderIsDirectlyTiedToWorkOrder"						
			
			constraint (OrderQuantity >= InvoiceQuantity)
				"OrderQuantityCannotBeLessThanInvoiceQuantity"									
			
			constraint (OrderQuantity >= ShippedQuantity)
				"OrderQuantityCannotBeLessThanShippedQuantity"									
			
			if (WarehouseDemandLineForOrderRel.PrintedQuantity entered)
				if (IsCatchWeightItem)
					LocalPrintedQuantity = WarehouseDemandLineForOrderRel.PrintedQuantity
				else
					LocalPrintedQuantity = WarehouseDemandLineForOrderRel.PrintedQuantity / SellToStock
				
				constraint (OrderQuantity >= LocalPrintedQuantity)
					"OrderQuantityCannotBeLessThanPrintedQuantity"									
			
			if (IsInventoried)
				if (!FutureOrder
				and !CustomerOrder.SalesQuote)
					if (IsNotShipImmediateBackordered)
						LocalAvailableQuantity = ItemLocation.AvailableQuantityForOrderEntry
					else
						LocalAvailableQuantity = ItemLocation.AvailableQuantity
					
					if (!ItemLocation.AllowIssue)
						initialize LocalAvailableQuantity
					
					if (InventoryCompanyRel.AllocationMethod.Batch
					and Item.ReplacementItem entered)
						LocalAvailableQuantity -= ItemLocation.UnallocatedQuantity					




					if (!KitType.MakeToOrderKit)
						if (LocalOrderQuantityDifference > LocalAvailableQuantity)
							if (Item.ReplacementItem not entered)	
								if (CustomerOrder.OrderEntryOrderType.ShipImmediate
								or (!Backordered
								and HasBackorderControlForOrderEntry)
								or (!ItemLocation.AllowReceipt
								and LineType.Inventoried))
									if (HasSubstituteItem)
										constraint (!IsNotShipImmediateBackordered)
											"OrderQuantityGreaterThanAvailableToSellButSubstitutesExistForLine<CustomerOrderLine>" 			
										constraint (IsNotShipImmediateBackordered)
											"OrderQuantityGreaterThanAvailableToAllocateButSubstitutesExistForLine<CustomerOrderLine>"			//OECOL.143"
									else
										if (!ItemLocation.AllowReceipt)
											constraint (!IsNotShipImmediateBackordered)
												"OrderQuantityGreaterThanAvailableToSellAndReceivingNotAllowedForLine<CustomerOrderLine>" 		
											constraint (IsNotShipImmediateBackordered)
												"OrderQuantityGreaterThanAvailableToAllocateAndReceivingNotAllowedForLine<CustomerOrderLine>" 		//OECOL.144"	
										else
											constraint (!IsNotShipImmediateBackordered)
												"BackordersNotAllowed;AvailableToSellIsInsufficientForLine<CustomerOrderLine>"					//OECOL.263"
											constraint (IsNotShipImmediateBackordered)
												"BackordersNotAllowed;AvailableToAllocateIsInsufficientForLine<CustomerOrderLine>" 				// OECOL.140"	
							else
								LocalAvailableQuantity -= LocalOrderQuantity
								
								if (IsNotShipImmediateBackordered)
									LocalAvailableQuantity = ReplacementItemLocationRel.AvailableQuantityForOrderEntry
								else
									LocalAvailableQuantity = ReplacementItemLocationRel.AvailableQuantity		
								
								if (LocalOrderQuantity > LocalAvailableQuantity)
									if (CustomerOrder.OrderEntryOrderType.ShipImmediate
									or (!Backordered
									and HasBackorderControlForOrderEntry)
									or (!ReplacementItemLocationRel.AllowReceipt
									and LineType.Inventoried))
										if (ReplacementItemSubstitutesRel exists)
											constraint (!IsNotShipImmediateBackordered)
												"OrderQuantityGreaterThanAvailableToSellButSubstitutesExistForLine<CustomerOrderLine>" 			
											constraint (IsNotShipImmediateBackordered)
												"OrderQuantityGreaterThanAvailableToAllocateButSubstitutesExistForLine<CustomerOrderLine>"			//OECOL.143"
										else
											if (!ReplacementItemLocationRel.AllowReceipt)
												constraint (!IsNotShipImmediateBackordered)
													"OrderQuantityGreaterThanAvailableToSellAndReceivingNotAllowedForLine<CustomerOrderLine>" 		
												constraint (IsNotShipImmediateBackordered)
													"OrderQuantityGreaterThanAvailableToAllocateAndReceivingNotAllowedForLine<CustomerOrderLine>" 		//OECOL.144"	
											else
												constraint (!IsNotShipImmediateBackordered)
													"BackordersNotAllowed;AvailableToSellIsInsufficientForLine<CustomerOrderLine>"					//OECOL.263"
												constraint (IsNotShipImmediateBackordered)
													"BackordersNotAllowed;AvailableToAllocateIsInsufficientForLine<CustomerOrderLine>" 				// OECOL.140"																
																			
			if (IsInventoried
			and (ItemLocation.SerialTracked.SerialRequiredAtReceipt
			or  ItemLocation.SerialTracked.SerialRequiredAtIssue))
				constraint (OrderQuantity <= 999999)
					"OrderQuantityCannotBeGreaterThan999999ForASerialTrackedItem"				

		Firm
			default to CustomerOrder.OrderEntryOrderType.ShipImmediate
			
		ShipComplete					
			if (!Dropship)
				default to CustomerOrder.ShipComplete



			else
				if (ShipComplete.DoesNotAcceptPartials)
					cannot be entered
						"LineCannotBeBothDropshipAndShipComplete"									
		
		PickingPriority
			if (InventoryCompanyRel.AllocationBasis.ByDate)
				cannot be entered
					"AllocationPriorityCannotBeEnteredWhenAllocatingByDate"						
			else
				default to CustomerShipTo.PickingPriority
				default to CustomerOrder.PickingPriority

				default to InventoryCompanyRel.DefaultOEPriority
				required
					"AllocationPriorityRequired"												

		ProductTaxCategory
			if (!IsSpecialItem)
				default to Item.ProductTaxCategory
				
		MaterialSafetyDataSheet
		 	if (IsSpecialItem)
		 		cannot be entered
		 			"MaterialSafetyDataSheetCannotBeEnteredForSpecialItems"						
		 	else
		 		if (Item.MSDSRequired)
		 			if (MSDSAcknowledgementsRel not exists)
		 				default to true
		 			else
		 				if (MSDSAcknowledgementsRel.AcknowledgementDate year < ExpectedShipDate year)
		 					default to true
			
			if (IsInventoriedOrNonStock)
				constraint (Item.MSDSRequired)
					"MaterialSafetyDataSheetNotAllowedForThisItem"								

		InterCompany
			if (CustomerOrder.CustomerPurchaseOrder entered
			and !InterCompany.InterCoCustomerOrder)
				if (PurchaseOrderLineSourcesRel exists)
					default to InterCompany.InterCoShippingOrder
				else
					default to InterCompany.NotAnInterCoOrder

		ShipTerm
			if (action type.Create)
				default to CustomerOrder.ShipTerm
				
			if (DerivedIntrastat)
				default to CustomerShipTo.ShipTerm
				default to OrderEntryCustomerRel.ShipTerm

		PortCode
			force default to TransientIntrastatPortCode
			if (DerivedIntrastat)
				default to CustomerShipTo.PortCode
				default to OrderEntryCustomerRel.PortCode
				
			if (PortCode entered)
				constraint (IntrastatPortCodeRel exists)
					"LoadingPortCodeDoesNotExist"

		NatureOfTransactionCode
			if (DerivedIntrastat)
				default to CustomerOrder.NatureOfTransactionCode
				required

		SupplementaryUOM
			if (DerivedIntrastat
			and !IsSpecialItem)
				default to Item.ICNCode.SupplementaryUOM
				
		StatisticalProcedure
			default to CustomerOrder.StatisticalProcedure 
								
		SupplementaryQuantity
			if (DerivedIntrastat
			and !IsSpecialItem
			and Item.ICNCode.SupplementaryUOM entered)
				if (Item.ICNCode.SupplementaryUOM = SellingPriceUOM)
					default to OrderQuantity
				else
	   				initialize UOMCalculation
	   				UOMCalculation.InputUOM							= Item.StockUOM
					UOMCalculation.InputToUOM						= Item.ICNCode.SupplementaryUOM
					UOMCalculation.InputQuantity					= OrderQuantity
					UOMCalculation.DoRounding						= true
					UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate	
	   				SupplementaryQuantity							= UOMCalculation.OutputQuantity
																																				
		ICNCode
			if (IsInventoriedOrNonStock)
				default to Item.ICNCode
			if (DerivedIntrastat)
				required
		
		Backordered
			if (CustomerShipTo = CustomerOrder.CustomerShipTo)
				default to CustomerOrder.BackOrder
				
			default to CustomerShipTo.AllowBackorder
			default to CustomerOrder.CompanyCustomer.BackorderAllowed
			
			if (IsInventoried
			and (Backordered changed
			and  !Backordered)
			and (Company.BackOrderControl.OrderEntryOnly
			or   Company.BackOrderControl.BothOrderEntryAndWarehouse)
			and  WarehouseDemandLineForOrderRel.BackorderedQuantity not entered)
				cannot be changed
			 		"CustomerShipToDoesNotAllowBackorder;BackorderExistsForOrderLine"			
			 		
		SalesAccount
			if (!IsSpecialItem)
				default LocalMinorSalesClass to Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass = blank
				default to BillingItemGeneralLedgerAccountsRel.SalesAccount
			else
				default to BillingProcessLevel.SpecialOrderSalesAccount
			
			if (IsSpecialOrNonStock)
				required			
					"SalesAccountRequiredForSpecialAndNon-StockItems"								
			LocalGeneralLedgerSystemCode = "OE"
			if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
					
			if (CreatePurchaseOrder)
				cannot be changed
					"SalesAccountCannotBeChangedForCreatePurchaseOrderType"						
			
			if (IsInventoried)
				if (not BillingCompanyRel.SalesAccountOverride)
					cannot be changed
						"CannotOverrideDefaultAccountsForInventoryItems"							
				
					constraint (SalesAccount = BillingItemGeneralLedgerAccountsRel.SalesAccount)
						"AccountCannotBeEnteredForInventoryItems"									
			
		ExpenseAccount
			if (LineType.NonStock)
				default LocalMinorSalesClass to Item.MinorSalesClass
				if (BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass = blank
				default to  BillingItemGeneralLedgerAccountsRel.ExpenseAccount
		
			
			if (IsInventoried)
				default to ItemLocation.GeneralLedgerCategory.InventoryAccount
				
				cannot be changed
					"CannotOverrideDefaultAccountsForInventoryItems"							
				
				constraint (ExpenseAccount = ItemLocation.GeneralLedgerCategory.InventoryAccount)
					"AccountCannotBeEnteredForInventoryItems"									
				
			if (LineType.Special)
				default to BillingProcessLevel.ExpenseAccount
			
			if (IsSpecialOrNonStock)
				required			
					"ExpenseAccountRequiredForSpecialAndNon-StockItems"								
			LocalGeneralLedgerSystemCode = "OE"
			if (ExpenseAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within ExpenseAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<ExpenseAccount.GeneralLedgerChartAccount.Account>"
						
		CostOfGoodsSoldAccount
			if (!IsSpecialItem)
				default LocalMinorSalesClass to Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass = blank
				default to BillingItemGeneralLedgerAccountsRel.COGSAccount
			else
				default to BillingProcessLevel.SpecialOrderCOGSAccount
				
			LocalGeneralLedgerSystemCode = "OE"
			if (CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction)					
					"InvalidSystemCodeForAccount<CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account>"
			if (CreatePurchaseOrder)
				cannot be changed
					"CostOfGoodsSoldAccountCannotBeChangedForCreatePurchaseOrderType"			
			
			if (IsSpecialOrNonStock)
				required			
					"CostOfGoodsSoldAccountRequiredForSpecialAndNon-StockItems"								
					
			if (IsInventoried)
				cannot be changed
					"CannotOverrideDefaultAccountsForInventoryItems"							
					
				constraint (CostOfGoodsSoldAccount =  BillingItemGeneralLedgerAccountsRel.COGSAccount)
					"AccountCannotBeEnteredForInventoryItems"									
								
		TaxableAmountCurrency
			if (TaxStatus.Exempt)
				initialize TaxableAmountCurrency
			else
				default to NetAmountCurrency

		OverrideTaxable
			if (TaxStatus.Exempt)
				initialize OverrideTaxable
			else
				default to NetAmountCurrency

		LastAddOnChargeSequence
			force default to CustomerOrderAddOnChargesRel.CustomerOrderAddOnCharge
			
		HSNSACCode
			if (IsHSNSACCodeEnabled)
				if (IsInventoriedOrNonStock)
					default to Item.HSNSACCode
				if (!CustomerOrder.ProformaCashInAdvanceRequired)
					required
						"HSN_/SACCodeIsRequired"
			else
				cannot be entered	
					"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
		
		UNSPSCCode
			if (IsInventoriedOrNonStock)
				default to Item.UNSPSCCode
		
		PointOfTitleTransfer
			force default to CustomerOrder.PointOfTitleTransfer
					
	Actions
		ProcessOneSourceForLine is a Set Action
			restricted
			valid when (SingleCallToOneSource)
			Parameters
				PrmCompany				is a BillingCompany
				PrmCustomerOrder		is a CustomerOrder
			Sort Order
				Company
				CustomerOrder
				CustomerOrderLine
			Instance Selection
				where (Company		 = PrmCompany
				and	   CustomerOrder = PrmCustomerOrder
				and    TaxStatus.Taxable)
			Action Rules
				CustomerOrder Set Rules
					Exit Rules
						if (SingleCallToOneSource)
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= CustomerOrder.UniqueID
							CalculateTax.UserElementLevel					= "L"
							LocalExecuteCalculateTax						= CalculateTax.ExecuteCalculateTax
						
						if (TaxLineItemsRel exists)
							for each TaxLineItemsRel
								LocalTotalTaxLineItemAmount += each.CalculatedTaxAmt
							invoke FastUpdate CustomerOrder
								invoked.TaxTotal = LocalTotalTaxLineItemAmount
								invoked.TotalOrderAmount += LocalTotalTaxLineItemAmount
				Instance Rules
					LocalDoCreateTaxLog = CustomerOrder.TaxConfigurationRel.WriteToLogFile	
					include TaxCalculation
					include LoadOneSourceInputFields
					include CreateTaxLineItemAndUserFields

		ProcessVertexForLine is a Set Action
			restricted
			valid when (SingleCallToVertex)
			Parameters
				PrmCompany				is a BillingCompany
				PrmCustomerOrder		is a CustomerOrder

			Sort Order
				Company
				CustomerOrder
				CustomerOrderLine

			Instance Selection
				where (Company		 = PrmCompany
				and	   CustomerOrder = PrmCustomerOrder
				and    TaxStatus.Taxable)

			Action Rules
				CustomerOrder Set Rules
					Exit Rules
						if (SingleCallToVertex)
							initialize CalculateTax.UniqueLineNumber
							CalculateTax.POATaxCode							= CustomerOrder.BillingProcessLevel.TaxCode
							CalculateTax.POAAddress							= CustomerOrder.BillingProcessLevel.CompanyAddress
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= CustomerOrder.UniqueID
							CalculateTax.UserElementLevel					= "L"
							CalculateTax.InputReturnVertexTaxIn		        = "D"
							CalculateTax.TaxCode							= TaxCode
							CalculateTax.AppendToJurisFile					= true
							CalculateTax.JurisdictionResultsKey				= "OE:" + Company + ":" + CustomerOrder + ":" + current timestamp
							LocalExecuteCalculateTax						= CalculateTax.ExecuteCalculateTax

						if (TaxLineItemsRel exists)
							for each TaxLineItemsRel
								LocalTotalTaxLineItemAmount += each.CalculatedTaxAmt
							invoke FastUpdate CustomerOrder
								invoked.TaxTotal = LocalTotalTaxLineItemAmount
								invoked.TotalOrderAmount += LocalTotalTaxLineItemAmount

				Instance Rules
					LocalDoCreateTaxLog = CustomerOrder.TaxConfigurationRel.WriteToLogFile	
					include TaxCalculation
					include LoadVertexGlobalInputFields
					include CreateTaxLineItemAndUserFields

		CalculateFullTaxTotal is an Instance Action
			restricted
			Action Rules
				initialize CalculateTax
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.System					= "OE"
				CalculateTax.TaxCode 				= TaxCode
				CalculateTax.ProcessLevel			= BillingProcessLevel
				CalculateTax.Invoice				= CustomerOrder
				CalculateTax.PostalAddress			= CustomerOrder.ShipPostalAddress
				CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
				CalculateTax.Function				= "C"
				CalculateTax.ThirdPartyFunction		= "I"
				CalculateTax.TransactionType		= "S"
				CalculateTax.TaxableAmount  		= OverrideTaxable
				CalculateTax.TaxDate				= CustomerOrder.TaxDate
				CalculateTax.ShipmentDate			= CustomerOrder.ExpectedShipDate
				if (CustomerOrder.TermsCode entered)
					CalculateTax.PaymentDate		= LocalTermsDueDate
				else
					CalculateTax.PaymentDate		= current corporate date
				CalculateTax.InvoiceDate			= current corporate date
				CalculateTax.GeneralLedgerDate		= current corporate date

				CalculateTax.ProductTaxCategory		= ProductTaxCategory
				include LoadVertexGlobalInputFields
				include LoadOneSourceInputFields
				if (not SingleCallToVertex)
					include VertexFlexibleFields
					LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
		
		UpdateHoldCode is an Instance Action
			valid when (HoldCode entered)
			Parameters
				PrmHoldCode					is a ReceivableHoldCode

			Parameter Rules
				PrmHoldCode
					initial value is HoldCode
					
			Action Rules
				HoldCode = PrmHoldCode
			
			Exit Rules
				include UpdateWarehouseDemandBasedOnRequired
	
		UpdateOrderFromReturn is an Instance Action
			restricted
			Parameters
				PrmQuantity 	is a Quantity
				PrmSellToStock  is a SellToStock
			Action Rules
				ReturnedQuantity = (((ReturnedQuantity * SellToStock) + (PrmQuantity * PrmSellToStock)) / SellToStock)	
		
		UpdateOrderLineFromAddOnCharge is an Instance Action
			restricted
			Parameters
				PrmFreightTotal						is an InternationalAmount
				PrmInsuranceTotal					is an InternationalAmount
				PrmCustomsTotal						is an InternationalAmount
				PrmOtherAddOnChargesTotal			is an InternationalAmount
			
			Action Rules			
				if (PrmFreightTotal entered)
					FreightTotal 				+= PrmFreightTotal
				if (PrmInsuranceTotal entered)
					InsuranceTotal 				+= PrmInsuranceTotal
				if (PrmCustomsTotal entered)
					CustomsTotal 				+= PrmCustomsTotal
				if (PrmOtherAddOnChargesTotal entered)
					OtherAddOnChargesTotal 		+= PrmOtherAddOnChargesTotal
					
					
		SubstituteLineLocation is an Instance Action
			restricted			
			Parameters
				PrmInventoryLocation	is an InventoryLocation			
			Action Rules
				InventoryLocation		= PrmInventoryLocation								

		CreateOrderWarehouseDemand is an Instance Action
			restricted
			Action Rules
				include CreateWarehouseDemandForOrder

		UpdateShippedQuantity is an Instance Action
			restricted
			Parameters
				PrmShippedQuantity			is a Quantity
				
			Action Rules
				if (PrmShippedQuantity entered)
					ShippedQuantity 	+= PrmShippedQuantity            
	
		UpdateCancelQuantity is an Instance Action
			restricted
			Parameters
				PrmCancelQuantity			is a Quantity
				
			Action Rules
				if (PrmCancelQuantity entered)
					CancelQuantity		+= PrmCancelQuantity
					OrderQuantity		-= PrmCancelQuantity
				
				if (CancelQuantity > 0)
					CancelledDate = current corporate date
					if (CustomerOrder.OrderCancelCreditReason entered)
						CancelledReason = CustomerOrder.OrderCancelCreditReason
					else
					if (BillingProcessLevel.DefaultReason entered)
						CancelledReason = BillingProcessLevel.DefaultReason
					else	
						CancelledReason = Company.DefaultReason
					CancelledOperator = actor
				else
					initialize CancelledDate
					initialize CancelledReason
					initialize CancelledOperator

				include TaxCalculation
				include UpdateAmountsInOrder					
		
		CreateCustomerOrderReturnLine is an Instance Action
			Action Rules
				invoke Entered.Create CustomerOrderReturnLine
					invoked.Company								= Company
					invoked.CustomerOrderReturn 				= CustomerOrderReturn
					invoked.CustomerOrderReturnLine				= CustomerOrderLine
					invoked.InventoryLocation					= InventoryLocation
					invoked.Item								= Item
					invoked.LineType							= LineType
					invoked.Description							= ItemDescription
					invoked.ReasonCode							= CustomerOrderReturn.ReasonCode
					invoked.Quantity							= OrderQuantity
					invoked.SellingUnitOfMeasure				= SellUOM
					invoked.EnteredPrice						= EnteredPrice
					invoked.EnteredUnitCost						= UnitCost
					invoked.HSNSACCode							= HSNSACCode
	
	
					
					

		CustomerOrderLineOnHoldAlert is an Instance Action
			restricted
			Parameters
				PrmAlertName	is Alpha size 100
			Action Rules
				LocalAlert = PrmAlertName
				if (Company.FinanceEnterpriseGroup.BODTrigger  and FSMBODConfigurationPARel.Enable)
	  				if(FSMBODConfigurationDetailPARel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "ORDERPROCESSINGMANAGER" 
							invoked.PrmMainXML 		= CustomerOrderLineOnHoldAlertXML	
							invoked.PrmDescription	= CustomerOrderLineHoldDescription
							invoked.PrmBODID		= DerivedBODID	


		TriggerOEBackOrderAlert is an Instance Action
			restricted
			Parameters
				PrmAlertName	is Alpha size 100
			Action Rules
				LocalAlert = PrmAlertName
				if (Company.FinanceEnterpriseGroup.BODTrigger and  FSMBODConfigurationPARel.Enable)
	  				if(FSMBODConfigurationDetailPARel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "ORDERPROCESSINGMANAGER" 
							invoked.PrmMainXML 		= OrderEntryBackOrderAlertXML	
							invoked.PrmDescription	= OrderEntryBackOrderAlertDesc
							invoked.PrmBODID		= DerivedOEBackOrderBODID	

	StateCycles
		CustomerOrderTransaction is a StateCycle
			state field is Status		
	
			Unreleased is a State
				Create is a Create Action
					valid when (IsCreateAllowed)
					Field Rules
						CreatePurchaseOrder
							if (not CustomerOrder.OrderEntryOrderType.ShipImmediate)
								default to ItemLocationForCustomerOrderLocationRel.CreatePurchaseOrderForCustomerOrderLine
								default to CustomerOrder.OrderEntryOrderType.CreatePurchaseOrder
						
						Dropship
							if (not ShipComplete.DoesNotAcceptPartials)
								default to ItemLocationForCustomerOrderLocationRel.DropshipPurchaseOrderForCustomerOrderLine	
								default to CustomerOrder.OrderEntryOrderType.Dropship	
						OrderDiscount
							default to true
								
					Entrance Rules
						LocalCurrencyTable = CustomerOrder.CurrencyTable
						LocalExchangeDate	= CustomerOrder.OrderDate

					Action Rules
						include ValidateOngoingCalculation

						increment CustomerOrder.LastLineNumber
						  
						if (IsInventoried
						and Item.ReplacementItem entered)			
							SellToStock = DefaultSellingItemUOMRel.UOMConversion
							
							if (Item.IsCatchWeightItem)
								LocalOrderStockQuantity = OrderQuantity
							else
								LocalOrderStockQuantity = OrderQuantity * SellToStock
							
							if (ItemLocation.AllowIssue)	
								if (InventoryCompanyRel.AllocationMethod.Batch
								and !CustomerOrder.OrderEntryOrderType.ShipImmediate
								and !Backordered)
									LocalAvailableQuantity 		= ItemLocation.AvailableQuantityForOrderEntry 
								else
									LocalAvailableQuantity 		= ItemLocation.AvailableQuantity
									
								
								if (InventoryCompanyRel.AllocationMethod.Batch)
									LocalAvailableQuantity		-= ItemLocation.UnallocatedQuantity
						
								if (LocalOrderStockQuantity >= LocalAvailableQuantity)
									if (LocalAvailableQuantity <= 0)			
										OriginalReplacementOrSubstitute	= "R"
										OriginalItem					= Item
										Item							= Item.ReplacementItem
									else	
										LocalSellReplaceQuantity 		= (OrderQuantity - (LocalAvailableQuantity / SellToStock))
										OrderQuantity					= (LocalAvailableQuantity / SellToStock)
						
						if (EnteredPrice entered or NoCharge)
							LocalEnteredPriceCheck = true
							
					Exit Rules
						if (!IsSpecialItem
						and HoldCode not entered
						and BillingItemGeneralLedgerAccountRel.ProfitMargin entered)
							if (!KitType.MakeToOrderKit)
								if (IsInventoried)
									if (InventoryCompanyRel.CostingMethod.StandardCosting)
										LocalLineCost = (OrderQuantity * SellToStock * ItemLocation.StandardCost)
									else
										LocalLineCost = (OrderQuantity * SellToStock * ItemLocation.DerivedItemAverageCost)
								else
									LocalLineCost = (OrderQuantity * SellToStock * UnitCost * CustomerOrder.CurrencyRate)
							else
								for each KitComponentsRel
									LocalItem 			   = each.ComponentItem
									
									if (KitItemLocationRel.LastReceiptCost entered)
										LocalUnitCost = KitItemLocationRel.LastReceiptCost
									else
									if (InventoryCompanyRel.CostingMethod.StandardCosting)
										LocalUnitCost = KitItemLocationRel.StandardCost
									else
										LocalUnitCost = KitItemLocationRel.DerivedItemAverageCost									
										 
									LocalLineCost = ((each.Quantity * LocalUnitCost) + LocalLineCost)
						  	
				  			LocalProfitMargin	= ((NetAmountBase - LocalLineCost) / NetAmountBase)
				  			
						  	if (LocalProfitMargin < BillingItemGeneralLedgerAccountRel.ProfitMargin
						  	and BillingItemGeneralLedgerAccountRel.ProfitMarginHoldCode.CustomerOrderLineApplicable)
						  		HoldCode = BillingItemGeneralLedgerAccountRel.ProfitMarginHoldCode
					
						include CalculatePricing
						include AssignValuesFromCalculatePricing
						include TaxCalculation
						
						if (IsWarehouseDemandRequired)
							include CreateWarehouseDemandForOrder
						
						if (CustomerOrder.Status.Released)
							invoke Release
													
						if (!IsSpecialItem)
							if (CustomerOrder.Currency != Company.Currency
							and !Company.CurrencyBasedPricing)
								LocalCurrency = Company.Currency
							else
								LocalCurrency = CustomerOrder.Currency
								
							LocalInputCurrencyAmount	= EnteredPrice
							
							include UpdateAmountsInOrderForCreate
								
							for each BillingItemAddOnCostsRel
								invoke Create CustomerOrderAddOnCharge
									invoked.Company								= Company
									invoked.CustomerOrder						= CustomerOrder
									invoked.CustomerOrderLine					= CustomerOrderLine
									invoked.Miscellaneous.Misc					= each.BillingItemAddOnCost.OrderEntryAddOnCharge.Misc
									invoked.Miscellaneous.Currency				= each.BillingItemAddOnCost.OrderEntryAddOnCharge.Currency
									invoked.Description							= OrderEntryItemAddOnChargeRel.Description
									invoked.OrderDiscount						= OrderEntryItemAddOnChargeRel.OrderDiscount
									invoked.AddOnCharge							= OrderEntryItemAddOnChargeRel.AddOnCharge
									invoked.TrackType							= OrderEntryItemAddOnChargeRel.TrackType
									if (TaxStatus.Taxable)
										invoked.TaxStatus						= OrderEntryItemAddOnChargeRel.TaxStatus
										if (OrderEntryItemAddOnChargeRel.TaxCode not entered)
											invoked.TaxCode						= TaxCode
										else
											invoked.TaxCode						= OrderEntryItemAddOnChargeRel.TaxCode
									else
										invoked.TaxStatus						= "E"
									invoked.ProductTaxCategory					= OrderEntryItemAddOnChargeRel.ProductTaxCategory
									invoked.ChargeType							= OrderEntryItemAddOnChargeRel.ChargeType
									if (OrderEntryItemAddOnChargeRel.ChargeType.FlatAmount)
										if (CustomerOrder.Currency != Company.Currency
										and !Company.CurrencyBasedPricing)
											invoked.EnteredPrice			= (OrderEntryItemAddOnChargeRel.Price / CustomerOrder.CurrencyRate)
											LocalEnteredPrice				= (OrderEntryItemAddOnChargeRel.Price / CustomerOrder.CurrencyRate)
											invoked.Cost					= (OrderEntryItemAddOnChargeRel.Cost / CustomerOrder.CurrencyRate)
										else
											invoked.EnteredPrice				= OrderEntryItemAddOnChargeRel.Price
											LocalEnteredPrice					= OrderEntryItemAddOnChargeRel.Price
											invoked.Cost						= OrderEntryItemAddOnChargeRel.Cost
									else
									if (OrderEntryItemAddOnChargeRel.ChargeType.UnitPrice)
										if (CustomerOrder.Currency != Company.Currency
										and !Company.CurrencyBasedPricing)
											invoked.EnteredUnitPrice		= (OrderEntryItemAddOnChargeRel.UnitPrice / CustomerOrder.CurrencyRate)
											LocalEnteredUnitPrice			= (OrderEntryItemAddOnChargeRel.UnitPrice / CustomerOrder.CurrencyRate)
											invoked.UnitCost				= (OrderEntryItemAddOnChargeRel.UnitCost / CustomerOrder.CurrencyRate)
										else
											invoked.EnteredUnitPrice			= OrderEntryItemAddOnChargeRel.UnitPrice
											LocalEnteredUnitPrice				= OrderEntryItemAddOnChargeRel.UnitPrice
											invoked.UnitCost					= OrderEntryItemAddOnChargeRel.UnitCost

									if (OrderEntryItemAddOnChargeRel.ChargeType.FlatAmount)
										if (CustomerOrder.Currency != Company.Currency)
											LocalCurrencyInput					= LocalEnteredPrice
											include CurrencyConversion
											invoked.Price						= LocalOutputCurrencyAmount
											invoked.UnitPrice					= LocalOutputCurrencyAmount
										else
											invoked.Price						= LocalEnteredPrice
											invoked.UnitPrice					= LocalEnteredPrice
									else
									if (OrderEntryItemAddOnChargeRel.ChargeType.UnitPrice)
										if (CustomerOrder.Currency != Company.Currency)
											LocalCurrencyInput					= LocalEnteredUnitPrice
											include CurrencyConversion
											invoked.Price						= LocalOutputCurrencyAmount
											invoked.UnitPrice					= LocalOutputCurrencyAmount
										else
											invoked.Price						= LocalEnteredUnitPrice
											invoked.UnitPrice					= LocalEnteredUnitPrice
									invoked.PricePercent						= OrderEntryItemAddOnChargeRel.PricePercent
									invoked.CostPercent							= OrderEntryItemAddOnChargeRel.CostPercent		
										 
									invoked.CostOfGoodsSoldAccount				= OrderEntryItemAddOnChargeRel.CostOfGoodsSoldAccount
						
						if (IsSpecialItem)	
							include UpdateAmountsInOrderForCreate
							
						if(LocalSellReplaceQuantity entered)
							invoke Create CustomerOrderLine
								invoked.Company								= Company
								invoked.CustomerOrder						= CustomerOrder
								invoked.OrderQuantity						= LocalSellReplaceQuantity
								invoked.Item								= Item.ReplacementItem
								invoked.LocalItem							= Item
								invoked.OriginalItem						= Item
								invoked.OriginalLine						= CustomerOrderLine
								invoked.OriginalReplacementOrSubstitute		= "R"
						
						if(CustomerOrder.HoldCode entered and  CustomerOrder.OriginalOpenOrderAmount > CustomerOrder.CompanyCustomer.CreditLimit)
							trigger "CustomerCreditCheckFailService" PA service
								resume on error
								title is "CO:<Company>Customer:<Customer>"
								Criteria
									Company						
								Variables
									Company
										variable name is Company	
									Customer
										variable name is Customer
									CustomerOrder
										variable name is CustomerOrder
									CustomerOrder.OriginalOpenOrderAmount
										variable name is OpenOrderAmount
									CustomerOrder.HoldCode
										variable name is HoldCode
						if(Backordered and WarehouseDemandLineForOrderRel.BackorderedQuantity > 0)
							trigger "OrderEntryBackOrderService" PA service
								resume on error
								title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>COL:<CustomerOrderLine>"
								Criteria
									Company.FinanceEnterpriseGroup
									Company
								Variables
									Company
										variable name is Company	
									Customer
										variable name is Customer
									CustomerShipTo
										variable name is CustomerShipTo
									CustomerOrder
										variable name is CustomerOrder
									CustomerOrder.OrderDate
										variable name is OrderDate
									InventoryLocation
										variable name is InventoryLocation
									Item
										variable name is Item
									WarehouseDemandLineForOrderRel.BackorderedQuantity
										variable name is BackorderedQuantity
							
							invoke TriggerOEBackOrderAlert
								invoked.PrmAlertName = "FSM_ION_OrderEntryBackOrderAlert"
					
				Update is an Update Action
					Entrance Rules
						LocalCurrencyTable = CustomerOrder.CurrencyTable
						LocalExchangeDate	= CustomerOrder.OrderDate

					Action Rules
						if (CreatePurchaseOrder)
							constraint (PurchaseOrderInterfacesRel not exist)
								"NotAllowedAfterPurchaseOrderCreated,HasAPOAocAttached" 
														
						if (EnteredPrice	= old EnteredPrice
						and !PriceStatus.ManualOverrideOfPricing)
							initialize EnteredPrice
							
						if (EnteredPrice entered or NoCharge)
							LocalEnteredPriceCheck = true
						
						if (IsUpdateLocationBasedPricing
						or  IsUpdateQuantityChanged)
							include CalculatePricing
							include AssignValuesFromCalculatePricing
						
						if ((NetAmountCurrency != OldNetAmountCurrency
						or GrossAmountBase != OldGrossAmountsBase
						or OrderQuantity != old OrderQuantity)
						and LastAddOnChargeSequence entered)
							include CalculateLineCharges
																
					Exit Rules
						include UpdateWarehouseDemandBasedOnRequired
						initialize LocalTaxLineItemCreated
						include TaxCalculation
						include UpdateAmountsInOrder							
						
						if(CustomerOrder.HoldCode entered and  CustomerOrder.OriginalOpenOrderAmount > CustomerOrder.CompanyCustomer.CreditLimit)
							trigger "CustomerCreditCheckFailService" PA service
								resume on error
								title is "CO:<Company>Customer:<Customer>"
								Criteria
									Company						
								Variables
									Company
										variable name is Company	
									Customer
										variable name is Customer
									CustomerOrder
										variable name is CustomerOrder
									CustomerOrder.OriginalOpenOrderAmount
										variable name is OpenOrderAmount
									CustomerOrder.HoldCode
										variable name is HoldCode	
						
						
						
				Delete is a Delete Action
					valid when (!CustomerOrder.OnProformaPaymentHold)
					Entrance Rules
						constraint (WarehouseDemandLineForOrderRel.PrintedQuantity not entered)
							"DeleteShipmentLineBeforeDeletingSourceLine"
						decrement CustomerOrder.LastLineNumber					
						constraint (ShippedQuantity not entered)
							"CannotDelete;ShipmentExists"					
						if (CustomerOrder.WarehouseShipment entered)
							constraint (!RouteCreate)
								"CannotDelete;LineAssignedToRouteFile"		
						
						if (IsWarehouseDemandRequired)
							include DeleteWarehouseDemand
						
						invoke Unreleased.Delete CustomerOrderAddOnChargesRel
													
					Action Rules
						if (WorkOrder entered)
							invoke Update WorkOrder
								initialize invoked.DocumentNumberNumeric
								initialize invoked.LineNumber
								initialize invoked.SystemCode
					
					Exit Rules
						include UpdateAmountsAfterDelete
						
				GroupPricing is an Instance Action
					restricted
					Parameters
						PrmCurrency			is like Currency
					Action Rules
						initialize EnteredPrice
						
						include CalculatePricing
						include AssignValuesFromCalculatePricing
						
						constraint(PriceBaseItemRel exists)
							"BasePriceDoesNotExistForCustomerOrderLine<CustomerOrderLine>"
							
						if (PriceStatus.AmalgamatedGroupPricing)
							constraint (!NoCharge) 		
								"No-chargeItemCannotHaveAmalgamatedPricing"	
								
						include CalculateGroupPricing
						include UpdateAmountsInOrder

				ProjectedStatus is an Instance Action
					valid when (IsBackordered)
					Parameters
					   	PrmCompany								is a BillingCompany
					   	PrmInventoryLocation					is an InventoryLocation
					   	PrmItem									is an Item
					   	PrmSellUOM								is an UnitOfMeasure
					   	PrmStockOnHandQuantity					is like Quantity
					   	PrmAvailableQuantity					is like Quantity
					   	PrmEstimatedTransactionDate				is Date
					   	PrmDemandSystemCode 					is like DemandSystemCode
						
					Parameter Rules
						PrmCompany
							initial value is Company
						PrmInventoryLocation
							initial value is InventoryLocation
						PrmItem
							initial value is Item
						PrmSellUOM
							initial value is SellUOM
						PrmStockOnHandQuantity
							initial value is ItemLocation.StockOnHandQuantity
						PrmAvailableQuantity
						   	initial value is ItemLocation.AvailableQuantity
						PrmEstimatedTransactionDate
					   		initial value is WarehouseDemandLineForOrderRel.EstimatedTransactionDate
					   	PrmDemandSystemCode	
					   		initial value is WarehouseDemandLineForOrderRel.WarehouseDemand.DemandSystemCode 

				Release is an Instance Action
					restricted
					Action Rules
					
						if (IsInventoriedOrNonStock)
							constraint (Item.Active)
								"Item<Item>IsInactive"
							if (ItemLocationForCustomerOrderLocationRel.Active)
								constraint (ItemLocationForCustomerOrderLocationRel.ItemLocation.Active)
									"Item<Item>AtLocation<CustomerOrder.InventoryLocation>IsInactive"
						LocalGeneralLedgerSystemCode = "OE"
						if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
						if (ExpenseAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within ExpenseAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<ExpenseAccount.GeneralLedgerChartAccount.Account>"
						if (CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account>"

						if (CreatePurchaseOrder)	
							if (!Dropship)
								if (HoldCode not entered
								and CustomerOrder.HoldCode not entered
								and Customer.ReceivableHoldCode not entered
								and CustomerOrder.CompanyCustomer.NationalAccountBalanceRel.ReceivableHoldCode not entered)
									include CreatePurchaseOrderInterface
									include CreateCustomerOrderLineDistribution
							else
								if (not CustomerOrder.CompanyCustomer.OrderEntryCustomer.CheckCreditOnOrderAdd
								or  CustomerOrder.IsOrderWithinCustomerLimit) 
									include CreatePurchaseOrderInterface
									include CreateCustomerOrderLineDistribution
						
						invoke Release CustomerOrderAddOnChargesRel
						
						if (!CustomerOrder.ProformaCashInAdvanceRequired)
							invoke ReleaseCustomerOrder WarehouseDemandLineForOrderRel
								
						make transition to Released
					
					Exit Rules
						if (TaxEntityRel.DelayTaxProcessing)
							LocalDoCreateTaxLog = CustomerOrder.TaxConfigurationRel.WriteToLogFile	
						if (!SingleCallToOneSource)	
							include TaxCalculation

				ReleaseCustomerOrder is an Instance Action
					valid when (CustomerOrder.ShipImmediateAndOnProHold)
					Action Rules
						invoke Unreleased.Release CustomerOrder
						
				ReleaseShipImmediates	is an Instance Action
					valid when (CustomerOrder.ShipImmediateAndOnNotProHold)
					Action Rules
						invoke Unreleased.ReleaseShipImmediates CustomerOrder

			Released is a State
			
				ProformaReleasePostProcess is an Instance Action
					restricted
					Action Rules
						if (WarehouseDemandLineForOrderRel.Status.Unreleased)
							invoke ReleaseCustomerOrder WarehouseDemandLineForOrderRel
							
				CancellationUpdate  is an Instance Action
					restricted
					Action Rules
						constraint (DerivedOpenQuantity entered)
							"CannotCancelMoreThanOpenQuantity<DerivedOpenQuantity>ForLine<CustomerOrderLine>"
						CancelQuantity = OrderQuantity
						initialize OrderQuantity
						invoke Delete WarehouseDemandForCancelOrderRel 
						invoke Released.Cancel CustomerOrderAddOnChargesRel
						include TaxCalculation
						include UpdateAmountsInOrder
						make transition to Canceled

				Update is an Update Action
					valid when (!CustomerOrder.ProformaCashInAdvanceRequired)
					Entrance Rules
						if ((TaxEntityRel.ThirdParty.TaxEngine
						or Company.ProcessShipmentBods)
						and CustomerOrder.WarehouseShipment exists)
							constraint (CustomerOrder.WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotUpdateCOLineMessage>"
						
						LocalExchangeDate	= CustomerOrder.OrderDate

					Action Rules
						if (CreatePurchaseOrder)
							constraint (PurchaseOrderInterfacesRel not exist)
								"NotAllowedAfterPurchaseOrderCreated,HasAPOAocAttached" 
								
						if (EnteredPrice	= old EnteredPrice
						and !PriceStatus.ManualOverrideOfPricing)
							initialize EnteredPrice
							
						if (EnteredPrice entered or NoCharge)
							LocalEnteredPriceCheck = true
																	
						if (IsUpdateLocationBasedPricing
						or  IsUpdateQuantityChanged)
							include CalculatePricing
							include AssignValuesFromCalculatePricing
							
						if ((NetAmountCurrency != OldNetAmountCurrency
						or GrossAmountBase != OldGrossAmountsBase
						or OrderQuantity != old OrderQuantity)
						and LastAddOnChargeSequence entered)
							include CalculateLineCharges
						initialize LocalTaxLineItemCreated
						include TaxCalculation
						include UpdateAmountsInOrder	
						
					Exit Rules
						include UpdateWarehouseDemandBasedOnRequired					
						
						
				
				Delete is a Delete Action
					valid when (!CustomerOrder.ProformaCashInAdvanceRequired)
					Entrance Rules
						if ((TaxEntityRel.ThirdParty.TaxEngine
						or Company.ProcessShipmentBods)
						and CustomerOrder.WarehouseShipment exists)
							constraint (CustomerOrder.WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotDeleteCOLineMessage>"

						constraint (WarehouseDemandLineForOrderRel.PrintedQuantity not entered)
							"DeleteShipmentLineBeforeDeletingSourceLine"
						decrement CustomerOrder.LastLineNumber					
						constraint (ShippedQuantity not entered)
							"CannotDelete;ShipmentExists"					
						if (CustomerOrder.WarehouseShipment entered)
							constraint (!RouteCreate)
								"CannotDelete;LineAssignedToRouteFile"		
						
						if (IsWarehouseDemandRequired)
							include DeleteWarehouseDemand
						
						invoke Released.Delete CustomerOrderAddOnChargesRel
													
					Action Rules
						if (WorkOrder entered)
							invoke Update WorkOrder
								initialize invoked.DocumentNumberNumeric
								initialize invoked.LineNumber
								initialize invoked.SystemCode
					
					Exit Rules	
						include UpdateAmountsAfterDelete
						invoke Released.SetToCanceled CustomerOrder						
							
				CancelLine is an Instance Action
					valid when (CancelAllowed)
					Parameters
						PrmCancelledQuantity 				is a Quantity
					Entrance Rules
						if ((TaxEntityRel.ThirdParty.TaxEngine
						or Company.ProcessShipmentBods)
						and CustomerOrder.WarehouseShipment exists)
							constraint (CustomerOrder.WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotCancelCOLineMessage>"
						
					Action Rules
						CancelledQuantity = PrmCancelledQuantity
						
						constraint (CancelledQuantity <= OrderQuantity)
							"CancelledQuantityMustBeLessThanEqualToOrderQuantity"
						CancelQuantity +=CancelledQuantity

						if (CustomerOrder.CancelledDate entered)
							CancelledDate = CustomerOrder.CancelledDate
						else	
							CancelledDate = current corporate date
						if (CustomerOrder.OrderCancelCreditReason entered)
							CancelledReason = CustomerOrder.OrderCancelCreditReason
						else
						if (BillingProcessLevel.DefaultReason entered)
							CancelledReason = BillingProcessLevel.DefaultReason
						else	
							CancelledReason = Company.DefaultReason

						CancelledOperator = actor
						
						constraint (OrderCancelCreditReasonRel exists)
							"CancelReasonCodeNotFound"														
															
						constraint (OrderCancelCreditReasonRel.Canceled)		
							"ReasonCodeInvalidForCanceledOrderLines"		
						
						if (OrderQuantity = CancelledQuantity)
							invoke Delete WarehouseDemandLineForCancelLineRel 		
							invoke Released.Cancel CustomerOrderAddOnChargesRel
							OrderQuantity = OrderQuantity - CancelledQuantity
							include TaxCalculation
							include UpdateAmountsInOrder				
							make transition to Canceled
						else
							if(WarehouseDemandLineForCancelLineRel exists)
								OrderQuantity -= CancelledQuantity
								invoke Update WarehouseDemandLineForCancelLineRel
									invoked.Quantity		= OrderQuantity
							include TaxCalculation
							include UpdateAmountsInOrder
						
					Exit Rules
						if (AnotherCustomerOrderLineIsReleased not exists)
							invoke Released.SetToCanceled CustomerOrder
				
			Canceled is a State
				Purge is a Purge Action
					restricted
					Entrance Rules
						invoke Purge CustomerOrderLineUOMRel
						invoke Purge CustomerOrderLineUserFieldsRel
						invoke Purge CustomerOrderLineAddOnChargesRel
						invoke Purge CustomerOrderLineAttachmentRel
						invoke Purge OrderEntryOrderCommentsForLineRel
				
			ReadyForDelete is a State
				Purge is a Purge Action
					restricted
					Entrance Rules
						invoke Purge CustomerOrderLineUOMRel
						invoke Purge CustomerOrderLineUserFieldsRel
						invoke Purge CustomerOrderLineAddOnChargesRel
						invoke Purge CustomerOrderLineAttachmentRel
						invoke Purge OrderEntryOrderCommentsForLineRel
			

			
