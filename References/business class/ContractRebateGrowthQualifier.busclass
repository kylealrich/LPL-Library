ContractRebateGrowthQualifier is a BusinessClass
    owned by po
    prefix is CRGQ


    Ontology
    	symbolic key is ContractRebateGrowthQualifier
    		    	
        
    Persistent Fields
   		FirstGrowthOperator					is AlphaUpper size 2
    		States
    			GreaterThanOrEqual				value is "GE"
    				default label is "GreaterThanOrEqualTo"
    			GreaterThan						value is "GT"
    	FirstGrowthPercent					is a Percent
    	FirstGrowthAmount					is an InternationalAmount
    	FirstGrowthUnits					is Numeric size 10
   		SecondGrowthOperator				is AlphaUpper size 2
    		States
    			LessThanOrEqual   				value is "LE"
    				default label is "LessThanOrEqualTo"
     			LessThan						value is "LT"
    	SecondGrowthPercent					is a Percent
    	SecondGrowthAmount					is an InternationalAmount
    	SecondGrowthUnits					is Numeric size 10
    	PercentPaid							is a Percent
    	RebatePercentOfAmount				is an InternationalAmount		
    	RebateAmount						is an InternationalAmount		
    	RebateAmountPerUnit					is an InternationalAmount
    	
    Transient Fields
    	GrowthQualifierArray
    	ArrayCount 							is Numeric size 3
    	QualifierFound						is Boolean
    	
    Derived Fields
    	ConvertedPercent1 is a ComputeField
    		type is Decimal size 5.2
    		restricted
   			(FirstGrowthPercent * 100)
   			
    	ConvertedPercent2 is a ComputeField
    		type is Decimal size 5.2
    		restricted
   			(SecondGrowthPercent * 100)
   			
		DerivedPercent1 is a StringField
			type is Alpha 8
			restricted			
			ConvertedPercent1
			"%"
   			
		DerivedPercent2 is a StringField
			type is Alpha 8
			restricted			
			ConvertedPercent2
			"%"
			
		DerivedAmount1 is a StringField
			type is Alpha 19
			restricted			
			FirstGrowthAmount

		NumberOfAllGrowthQualifiers is a ComputeField
			type is Numeric 3
			restricted
			(instance count of ContractRebateGrowthQualifierRel)
				
    	NextQualifier is a ComputeField
    		type is Numeric size 3
    		restricted
   			(ArrayCount + 1)
				
    	PreviousQualifier is a ComputeField
    		type is Numeric size 3
    		restricted
   			(ArrayCount - 1)
			
	Sets
		ByPercentPaid
			duplicates
			Sort Order
				PercentPaid
				ContractGroup
				Contract
				ContractRebate
				ContractRebateGrowthQualifier
		ByAmount
			duplicates
			Sort Order
				RebateAmount
				ContractGroup
				Contract
				ContractRebate
				ContractRebateGrowthQualifier
			
    Conditions
    	GrowthPercentEntered
    		restricted
    		when (GrowthByPercentRel exists)
    	GrowthAmountEntered
    		restricted
    		when (GrowthByAmountRel exists)
    	GrowthUnitsEntered
			restricted
    		when (GrowthByUnitsRel exists)
    	GrowthAmountNotEntered
    		restricted
    		when (!GrowthByAmountRel exists)
    	GrowthRebateAmountEntered
    		restricted
    		when (GrowthAmountRebateRel exists)
    	GrowthRebateAmountPerUnitEntered
			restricted
    		when (GrowthAmountPerUnitRebateRel exists)
    	EitherAmountPerUnitOrAmountOrPercentRequired
			restricted
    		when (PercentPaid > 0
    		or   RebateAmount > 0
    		or   RebateAmountPerUnit > 0)
    	GrowthRebatePercentEntered
    		restricted
    		when (GrowthPercentRebateRel exists)
    	GrowthRebatePercentNotEntered
    		restricted
    		when (!GrowthPercentRebateRel exists)
    	AmountType
    		restricted
    		when (ContractRebate.first ContractRebateQualifierRel.SpendType.Amount)
    	UnitsType
    		restricted
    		when (ContractRebate.first ContractRebateQualifierRel.SpendType.Units)

    Relations
		GrowthByPercentRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.FirstGrowthPercent > 0
				or      related.SecondGrowthPercent > 0)
				and    (related.ContractRebateGrowthQualifier != ContractRebateGrowthQualifier))
		GrowthByAmountRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.FirstGrowthAmount > 0
				or      related.SecondGrowthAmount > 0)
				and    (related.ContractRebateGrowthQualifier != ContractRebateGrowthQualifier))
		GrowthByUnitsRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.FirstGrowthUnits > 0
				or      related.SecondGrowthUnits > 0)
				and    (related.ContractRebateGrowthQualifier != ContractRebateGrowthQualifier))
		GrowthAmountRebateRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.RebateAmount > 0
				and    related.ContractRebateGrowthQualifier != ContractRebateGrowthQualifier)
		GrowthPercentRebateRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.PercentPaid > 0
				and    related.ContractRebateGrowthQualifier != ContractRebateGrowthQualifier)
		GrowthAmountPerUnitRebateRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.RebateAmountPerUnit > 0
				and    related.ContractRebateGrowthQualifier != ContractRebateGrowthQualifier)
		GrowthQualifierIterationRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
		ContractRebateGrowthQualifierRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
    
	Field Rules
		FirstGrowthOperator
			required
				"FirstGrowthOperatorIsRequired"
		FirstGrowthPercent
			if (FirstGrowthPercent entered)
				constraint (FirstGrowthAmount = 0)
					"CannotEnterBothPercentsAndAmounts"
				constraint (FirstGrowthUnits = 0)
					"CannotEnterBothPercentsAndAmounts"
				constraint (!GrowthAmountEntered)
					"GrowthQualifiersByAmountAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (!GrowthUnitsEntered)
					"GrowthQualifiersByUnitsAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (FirstGrowthAmount = 0 and SecondGrowthAmount = 0)
					"CannotEnterBothPercentsAndAmountsOnGrowthQualifiers"
				constraint (FirstGrowthUnits = 0 and SecondGrowthUnits = 0)
					"CannotEnterBothPercentsAndUnitsOnGrowthQualifiers"
		FirstGrowthAmount
			if (FirstGrowthAmount entered)
				constraint (FirstGrowthPercent = 0)
					"CannotEnterBothAmountAndPercent"
				constraint (FirstGrowthUnits = 0)
					"CannotEnterBothAmountAndUnits"
				constraint (!GrowthPercentEntered)
					"GrowthQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!GrowthUnitsEntered)
					"GrowthQualifiersByUnitsAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (FirstGrowthPercent = 0 and SecondGrowthPercent = 0)
					"CannotEnterBothAmountsAndPercentsOnGrowthQualifiers"
				constraint (FirstGrowthUnits = 0 and SecondGrowthUnits = 0)
					"CannotEnterBothAmountAndAmountInUntsOnGrowthQualifiers"
		FirstGrowthUnits
			if (FirstGrowthUnits entered)
				constraint (FirstGrowthPercent = 0)
					"CannotEnterBothAmountAndPercent"
				constraint (FirstGrowthAmount = 0)
					"CannotEnterBothAmountAndUnits"
				constraint (!GrowthPercentEntered)
					"GrowthQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!GrowthAmountEntered)
					"GrowthQualifiersByAmountAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (FirstGrowthPercent = 0 and SecondGrowthPercent = 0)
					"CannotEnterBothAmountsAndPercentsOnGrowthQualifiers"
				constraint (FirstGrowthAmount = 0 and SecondGrowthAmount = 0)
					"CannotEnterBothAmountAndAmountInUntsOnGrowthQualifiers"
		SecondGrowthOperator
			if (SecondGrowthOperator entered)
				constraint (SecondGrowthPercent > 0 or SecondGrowthAmount > 0 or SecondGrowthUnits > 0)
					"ToPercentOrToAmountIsRequired"
			if (SecondGrowthPercent entered)
				required
					"SecondGrowthOperatorIsRequiredWhenEnteringToPercent"
			if (SecondGrowthAmount entered)
				required
					"SecondGrowthOperatorIsRequiredWhenEnteringToAmount"
			if (SecondGrowthUnits entered)
				required
					"SecondGrowthOperatorIsRequiredWhenEnteringToUnits"
		SecondGrowthPercent
			if (SecondGrowthPercent entered)
				constraint (!GrowthAmountEntered)
					"GrowthQualifiersByAmountAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (FirstGrowthAmount = 0 and SecondGrowthAmount = 0)
					"CannotEnterBothPercentsAndAmountsOnGrowthQualifiers"
				constraint (!GrowthUnitsEntered)
					"GrowthQualifiersByUnitsAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (FirstGrowthUnits = 0 and SecondGrowthUnits = 0)
					"CannotEnterBothPercentsAndAmountsOnGrowthQualifiers"
			if (SecondGrowthOperator entered)
				if (!SecondGrowthAmount entered)
					if (!SecondGrowthUnits entered)
						if (GrowthPercentEntered)
							required
								"ToPercentIsRequired"
			if (FirstGrowthPercent > 0
			and SecondGrowthPercent entered)
				constraint (SecondGrowthPercent > FirstGrowthPercent)
					"ToPercentMustBeGreaterThanFromPercent"
		SecondGrowthAmount
			if (SecondGrowthAmount entered)
				constraint (FirstGrowthPercent = 0 and SecondGrowthPercent = 0)
					"CannotMixBothAmountsAndPercentsOnGrowthQualifiers"
				constraint (!GrowthPercentEntered)
					"GrowthQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!GrowthUnitsEntered)
					"GrowthQualifiersByUnitsAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (FirstGrowthUnits = 0 and SecondGrowthUnits = 0)
					"CannotEnterBothAmountAndAmountInUntsOnGrowthQualifiers"
			if (SecondGrowthOperator entered)
				if (!SecondGrowthPercent entered)
					if (!SecondGrowthUnits entered)
						if (GrowthAmountEntered)
							required
								"ToAmountIsRequired"
			if (FirstGrowthAmount > 0
			and SecondGrowthAmount entered)
				constraint (SecondGrowthAmount > FirstGrowthAmount)
					"ToAmountMustBeGreaterThanFromAmount"
		SecondGrowthUnits
			if (SecondGrowthUnits entered)
				constraint (FirstGrowthPercent = 0 and SecondGrowthPercent = 0)
					"CannotMixBothAmountsAndPercentsOnGrowthQualifiers"
				constraint (!GrowthPercentEntered)
					"GrowthQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!GrowthAmountEntered)
					"GrowthQualifiersByAmountAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (FirstGrowthAmount = 0 and SecondGrowthAmount = 0)
					"CannotEnterBothAmountAndUnitsOnGrowthQualifiers"
			if (SecondGrowthOperator entered)
				if (!SecondGrowthPercent entered)
					if (!SecondGrowthAmount entered)
						if (GrowthUnitsEntered)
							required
								"ToUnitsIsRequired"
			if (FirstGrowthUnits > 0
			and SecondGrowthUnits entered)
				constraint (SecondGrowthUnits > FirstGrowthUnits)
					"ToUnitsMustBeGreaterThanFromUnits"
		PercentPaid
			if (PercentPaid > 0)
				constraint (RebateAmount = 0)
					"CannotEnterBothRebatePercentAndRebateAmountForGrowthQualifier"
				constraint (RebateAmountPerUnit = 0)
					"CannotEnterBothRebatePercentAndRebateAmountPerUnitForGrowthQualifier"
			constraint (!GrowthRebateAmountEntered)
				"GrowthQualifiersForRebateAmountAlreadyExist;CannotMixBothRebatePercentsAndRebateAmounts"
			constraint (!GrowthRebateAmountPerUnitEntered)
				"GrowthQualifiersForRebateAmountPerUnitAlreadyExist;CannotMixBothRebatePercentsAndRebateAmountsPerUnit"
		RebateAmount
			if (RebateAmount > 0)
				constraint (!ContractRebate.CalculateRebateAmountOnAllSpendForQualifyingContracts)
					"CannotUse_Rebate_AmountWith_'Entire_Contract_Calculation_Basis'_rebateOption"
				constraint (PercentPaid = 0)
					"CannotEnterBothRebateAmountAndRebatePercentForGrowthQualifier"
				constraint (RebateAmountPerUnit = 0)
					"CannotEnterBothRebateAmountAndRebateAmountPerUnitForGrowthQualifier"
			constraint (!GrowthRebatePercentEntered)
				"GrowthQualifiersForRebatePercentAlreadyExist;CannotMixBothRebateAmountsAndRebatePercents"
			constraint (!GrowthRebateAmountPerUnitEntered)
				"GrowthQualifiersForRebateAmountPerUnitAlreadyExist;CannotMixBothRebateAmountsAndRebateAmountsPerUnit"
		RebateAmountPerUnit
			if (RebateAmountPerUnit > 0)
				constraint (!ContractRebate.CalculateRebateAmountOnAllSpendForQualifyingContracts)
					"CannotUse_Rebate_Amount_Per_UnitWith_'Entire_Contract_Calculation_Basis'_rebateOption"
				constraint (FirstGrowthUnits > 0)
					"CannotEnterRebateAmountPerUnitUnlessThisGrowthQualifierIsUnitBased"
				constraint (PercentPaid = 0)
					"CannotEnterBothRebateAmountPerUnitAndRebatePercentForGrowthQualifier"
				constraint (RebateAmount = 0)
					"CannotEnterBothRebateAmountPerUnitAndRebateAmountForGrowthQualifier"
			constraint (!GrowthRebatePercentEntered)
				"GrowthQualifiersForRebatePercentAlreadyExist;CannotMixBothRebateAmountsPerUnitAndRebatePercents"
			constraint (!GrowthRebateAmountEntered)
				"GrowthQualifiersForRebateAmountAlreadyExist;CannotMixBothRebateAmountsPerUnitAndRebateAmounts"
			               
	Actions
		Create is a Create Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToAddGrowthRebateQualifier"   	
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToAddRebateGrowthQualifiers"
				constraint (EitherAmountPerUnitOrAmountOrPercentRequired)
					"RebatePercent,RebateAmountOrRebateAmountPerUnitIsRequired"
				if (PercentPaid > 0)
					constraint (PercentPaid > last GrowthQualifierIterationRel.PercentPaid)
						"RebatePercentMustGrowFromOneGrowthQualifierToTheNext"
				else
				if (RebateAmount > 0)
					constraint (RebateAmount > last GrowthQualifierIterationRel.RebateAmount)
						"RebateAmountMustGrowFromOneGrowthQualifierToTheNext"
						
				if (FirstGrowthPercent > 0)
					if (last GrowthQualifierIterationRel.SecondGrowthOperator.LessThan)
						constraint (FirstGrowthPercent not < last GrowthQualifierIterationRel.SecondGrowthPercent)
							"FromPercentMustBeGreaterThanOrEqualToTheToPercentOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
					else
					if (last GrowthQualifierIterationRel.SecondGrowthOperator.LessThanOrEqual)
						if (FirstGrowthOperator.GreaterThan)
							constraint (FirstGrowthPercent >= last GrowthQualifierIterationRel.SecondGrowthPercent)
								"FromPercentMustBeGreaterThanTheToPercentOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
						else
						if (FirstGrowthOperator.GreaterThanOrEqual)
							constraint (FirstGrowthPercent > last GrowthQualifierIterationRel.SecondGrowthPercent)
								"FromPercentMustBeGreaterThanTheToPercentOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
				else
				if (FirstGrowthAmount > 0)
					if (last GrowthQualifierIterationRel.SecondGrowthOperator.LessThan)
						constraint (FirstGrowthAmount not < last GrowthQualifierIterationRel.SecondGrowthAmount)
							"FromAmountMustBeGreaterThanOrEqualToTheToAmountOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
					else
					if (last GrowthQualifierIterationRel.SecondGrowthOperator.LessThanOrEqual)
						if (FirstGrowthOperator.GreaterThan)
							constraint (FirstGrowthAmount >= last GrowthQualifierIterationRel.SecondGrowthAmount)
								"FromAmountMustBeGreaterThanTheToAmountOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
						else
						if (FirstGrowthOperator.GreaterThanOrEqual)
							constraint (FirstGrowthAmount > last GrowthQualifierIterationRel.SecondGrowthAmount)
								"FromAmountMustBeGreaterThanTheToAmountOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
				else
				if (FirstGrowthUnits > 0)
					if (last GrowthQualifierIterationRel.SecondGrowthOperator.LessThan)
						constraint (FirstGrowthUnits not < last GrowthQualifierIterationRel.SecondGrowthUnits)
							"FromUnitsMustBeGreaterThanOrEqualToTheToUnitsOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
					else
					if (last GrowthQualifierIterationRel.SecondGrowthOperator.LessThanOrEqual)
						if (FirstGrowthOperator.GreaterThan)
							constraint (FirstGrowthUnits >= last GrowthQualifierIterationRel.SecondGrowthUnits)
								"FromUnitsMustBeGreaterThanTheToUnitsOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
						else
						if (FirstGrowthOperator.GreaterThanOrEqual)
							constraint (FirstGrowthUnits > last GrowthQualifierIterationRel.SecondGrowthUnits)
								"FromUnitsMustBeGreaterThanTheToUnitsOnGrowthQualifier<last GrowthQualifierIterationRel.ContractRebateGrowthQualifier>"
        			
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate

		Update is an Update Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToModifyGrowthRebateQualifier"
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToModifyRebateGrowthQualifiers"
				constraint (EitherAmountPerUnitOrAmountOrPercentRequired)
					"RebatePercent,RebateAmountOrRebateAmountPerUnitIsRequired"
				invoke BuildGrowthArray
				invoke PositionWithinGrowthArray
				invoke EditGrowthArray
			Exit Rules
				if (ContractRebate.GrowthByPercent
				and ContractRebate.CalculateExpectedRebateForGrowth = false)
					invoke FastUpdate ContractRebate
						invoked.CalculateExpectedRebateForGrowth = true
    			invoke SetQualifierChangedFlagToYes ContractRebate
		
		Delete is a Delete Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToDeleteGrowthRebateQualifier"
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToDeleteRebateGrowthQualifiers"
    				
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate

    	BuildGrowthArray is an Instance Action
    		restricted
    		Action Rules
    			initialize GrowthQualifierArray
    			initialize ArrayCount
    			for each ContractRebateGrowthQualifierRel
    				ArrayCount += 1
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].QualifierSeq 		   		= each.ContractRebateGrowthQualifier
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].FirstGrowthOperator   		= each.FirstGrowthOperator
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].FirstGrowthPercent    		= each.FirstGrowthPercent
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].FirstGrowthAmount 	   		= each.FirstGrowthAmount
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].FirstGrowthUnits   		= each.FirstGrowthUnits
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].SecondGrowthOperator  		= each.SecondGrowthOperator
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].SecondGrowthPercent   		= each.SecondGrowthPercent
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].SecondGrowthAmount    		= each.SecondGrowthAmount
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].SecondGrowthUnits			= each.SecondGrowthUnits
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].PercentPaid 		   		= each.PercentPaid
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].RebatePercentOfAmount 		= each.RebatePercentOfAmount
    				GrowthQualifierArray.GrowthQualifier[ArrayCount].RebateAmount 		   		= each.RebateAmount

    	PositionWithinGrowthArray is an Instance Action
    		restricted
    		Action Rules
				initialize ArrayCount
				QualifierFound = false
     			while (!QualifierFound and ArrayCount < NumberOfAllGrowthQualifiers)
     				for each GrowthQualifierArray.GrowthQualifier
    					ArrayCount += 1
     					if (each.QualifierSeq = ContractRebateGrowthQualifier)
							QualifierFound = true
							end for each

    	EditGrowthArray is an Instance Action
    		restricted
    		Action Rules
				if (QualifierFound)
					if (ArrayCount > 1)	
						if (PercentPaid > 0)
							constraint (PercentPaid > GrowthQualifierArray.GrowthQualifier[PreviousQualifier].PercentPaid)
								"RebatePercentMustGrowFromOneGrowthQualifierToTheNext"
						else
						if (RebateAmount > 0)
							constraint (RebateAmount > GrowthQualifierArray.GrowthQualifier[PreviousQualifier].RebateAmount)
								"RebateAmountMustGrowFromOneGrowthQualifierToTheNext"
								
						if (FirstGrowthPercent > 0)
							if (GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthOperator.LessThan)
								constraint (FirstGrowthPercent not < GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthPercent)
									"FromPercentMustBeGreaterThanOrEqualToTheToPercentOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
							else
							if (GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthOperator.LessThanOrEqual)
								if (FirstGrowthOperator.GreaterThan)
									constraint (FirstGrowthPercent >= GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthPercent)
										"FromPercentMustBeGreaterThanTheToPercentOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
								else
								if (FirstGrowthOperator.GreaterThanOrEqual)
									constraint (FirstGrowthPercent > last GrowthQualifierIterationRel.SecondGrowthPercent)
										"FromPercentMustBeGreaterThanTheToPercentOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
						else
						if (FirstGrowthAmount > 0)
							if (GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthOperator.LessThan)
								constraint (FirstGrowthAmount not < GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthAmount)
									"FromAmountMustBeGreaterThanOrEqualToTheToAmountOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
							else
							if (GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthOperator.LessThanOrEqual)
								if (FirstGrowthOperator.GreaterThan)
									constraint (FirstGrowthAmount >= GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthAmount)
										"FromAmountMustBeGreaterThanTheToAmountOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
								else
								if (FirstGrowthOperator.GreaterThanOrEqual)
									constraint (FirstGrowthAmount > GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthAmount)
										"FromAmountMustBeGreaterThanTheToAmountOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
						else
						if (FirstGrowthUnits > 0)
							if (GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthOperator.LessThan)
								constraint (FirstGrowthUnits not < GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthUnits)
									"FromUnitsMustBeGreaterThanOrEqualToTheToUnitsOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
							else
							if (GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthOperator.LessThanOrEqual)
								if (FirstGrowthOperator.GreaterThan)
									constraint (FirstGrowthUnits >= GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthUnits)
										"FromUnitsMustBeGreaterThanTheToUnitsOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
								else
								if (FirstGrowthOperator.GreaterThanOrEqual)
									constraint (FirstGrowthUnits > GrowthQualifierArray.GrowthQualifier[PreviousQualifier].SecondGrowthUnits)
										"FromUnitsMustBeGreaterThanTheToUnitsOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[PreviousQualifier].QualifierSeq>"
										
					if (ArrayCount < NumberOfAllGrowthQualifiers)
						if (PercentPaid > 0)
							constraint (PercentPaid < GrowthQualifierArray.GrowthQualifier[NextQualifier].PercentPaid)
								"RebatePercentMustGrowFromOneGrowthQualifierToTheNext"
						else
						if (RebateAmount > 0)
							constraint (RebateAmount < GrowthQualifierArray.GrowthQualifier[NextQualifier].RebateAmount)
								"RebateAmountMustGrowFromOneGrowthQualifierToTheNext"
								
						if (SecondGrowthPercent > 0)
							if (GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthOperator.GreaterThan)
								constraint (SecondGrowthPercent not > GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthPercent)
									"ToPercentMustBeLessThanOrEqualToTheFromPercentOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
							else
							if (GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthOperator.GreaterThanOrEqual)
								if (SecondGrowthOperator.LessThanOrEqual)
									constraint (SecondGrowthPercent < GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthPercent)
										"ToPercentMustBeLessThanTheFromPercentOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
								else
								if (SecondGrowthOperator.LessThan)
									constraint (SecondGrowthPercent not > GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthPercent)
										"ToPercentMustBeLessThanOrEqualToTheFromPercentOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
						else
						if (SecondGrowthAmount > 0)
							if (GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthOperator.GreaterThan)
								constraint (SecondGrowthAmount not > GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthAmount)
									"ToAmountMustBeLessThanOrEqualToTheFromAmountOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
							else
							if (GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthOperator.GreaterThanOrEqual)
								if (SecondGrowthOperator.LessThanOrEqual)
									constraint (SecondGrowthAmount < GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthAmount)
										"ToAmountMustBeLessThanTheFromAmountOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
								else
								if (SecondGrowthOperator.LessThan)
									constraint (SecondGrowthAmount not > GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthAmount)
										"ToAmountMustBeLessThanOrEqualToTheFromAmountOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
						else
						if (SecondGrowthUnits > 0)
							if (GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthOperator.GreaterThan)
								constraint (SecondGrowthUnits not > GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthUnits)
									"ToUnitsMustBeLessThanOrEqualToTheFromUnitsOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
							else
							if (GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthOperator.GreaterThanOrEqual)
								if (SecondGrowthOperator.LessThanOrEqual)
									constraint (SecondGrowthUnits < GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthUnits)
										"ToUnitsMustBeLessThanTheFromUnitsOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
								else
								if (SecondGrowthOperator.LessThan)
									constraint (SecondGrowthUnits not > GrowthQualifierArray.GrowthQualifier[NextQualifier].FirstGrowthUnits)
										"ToUnitsMustBeLessThanOrEqualToTheFromUnitsOnGrowthQualifier<GrowthQualifierArray.GrowthQualifier[NextQualifier].QualifierSeq>"
