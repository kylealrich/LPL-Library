WorkOrder is a BusinessClass
	owned by wo
	prefix is WOR
	classic name is WORDER

	Ontology
		symbolic key is WorkOrder
			classic set name is WORSET1
			classic name for WorkOrder is WORK-ORDER
			classic name for InventoryLocation is LOCATION

	Patterns
		implements StaticJava
		disable AuditIndex
		implements BODId
	
	Context Fields
		FSMInboundBODTracker

	Persistent Fields
		WorkOrderSuffix 	   			is Numeric size 2
	 	Reference1		 	   			is a Reference
		Reference2		 	   			is a Reference
		Item
		StartDate
		EndDate                		is Date
		DateNeeded             		is Date
			classic name is EXP-DELIV-DT
		Status                 			is Numeric size 1
			States
				Unreleased   value is 1
				Released     value is 2
				Exploded     value is 3
				InProduction value is 4
				Cancelled    value is 8
				Completed    value is 9
			protected
		PickingFeedbackStatus			is Numeric size 1
			classic name is PICK-FDBK-STAT
			States
				NotStarted value is 0
				InProcess  value is 1
				Finished   value is 2
				Complete   value is 3
			protected
		ProductionFeedbackStatus		is Numeric size 1
			classic name is PROD-FDBK-STAT
			States
				NotStarted value is 0
				InProcess  value is 1
				Finished   value is 2
				Completed  value is 3
			protected
		WalkThruRequired			is Boolean
			classic name is WALK-THRU-REQ
			protected
		HoldCode						is a ReceivableHoldCode
		Printed							is Boolean
			classic name is PRINTED-FL
			protected
		PickListPrinted					is Boolean
			classic name is PRTED-PL-FL
			protected
		OperatorID						is an Operator 
			holds pii
			classic name is OPR-CODE
		SystemCode 						 is AlphaUpper size 2
			classic name is SYSTEM-CD
			States
				Requisitions  	value is "RQ"
					default label is "REQUISITIONS"
				OrderEntry	 	value is "OE"
				WorkOrder     	value is "WO"
				MultipleSystems value is "MS"
		DocumentNumberNumeric
			classic name is DOC-NBR-NUM
		LineNumber
			classic name is LINE-NBR
		OriginalWorkOrder				is a WorkOrder
			protected
		OriginalWorkOrderSuffix 		is a WorkOrderSuf
		PlanQuantity					is a Quantity
			classic name is PLAN-QTY
		ActualQuantity					is a Quantity
			classic name is ACTUAL-QTY
		DetailQuantity					is a Quantity
			classic name is DETAIL-QTY
		ShrinkQuantity					is a Quantity
			classic name is SHRINK-QTY
		EstimatedComponentCost			is an InternationalCost  
			classic name is EST-COMP-COST
			protected
		ActualComponentCost				is an InternationalCost  
			classic name is ACT-COMP-COST
			protected
		EstimatedPackagingCost			is an InternationalCost  
			classic name is EST-PACK-COST
			protected
		ActualPackagingCost				is an InternationalCost  
			classic name is ACT-PACK-COST
			protected
		EstimatedBurdenCost				is an InternationalAmount
			classic name is EST-BRDN-COST
			protected
		ActualBurdenCost				is an InternationalAmount
			classic name is ACT-BRDN-COST
			protected
		FinishedGoodsVarianceAmount		is an InternationalCost
			classic name is FGV-AMOUNT
		Vendor
		OffsiteDate           			is Date
		ReturnedDate          			is Date
		ReversedByWorkOrder   			is a WorkOrder

		InProduction		  			is Boolean
			classic name is WF-PROD-FL
			protected
		Offsite				  			is Boolean
			classic name is WF-OFFSITE-FL
		LastComponentSequence 			is a Sequence3
			classic name is LAST-COMP-SEQ
		LastBurdenSequence    			is a Sequence3
			classic name is LAST-BRDN-SEQ
		LastByproductSequence 			is a Sequence3
			classic name is LAST-BYPRO-SEQ
		WoUserFld1            			is a User
		WoUserFld2            			is a UserFld3
		WoUserDate1           			is Date
		BurdenAbsorptionAccount			is a FinanceCodeBlock
			classic name for BurdenAbsorptionAccount.AccountingUnit is BA-ACCT-UNIT
			classic name for BurdenAbsorptionAccount.GeneralLedgerChartAccount is BA-ACCOUNT
		ProductionCreditAccount			is a FinanceCodeBlock
			classic name for ProductionCreditAccount.AccountingUnit is PC-ACCT-UNIT
			classic name for ProductionCreditAccount.GeneralLedgerChartAccount is PC-ACCOUNT
		BaSubAcct             			is Numeric size 4						
		PcSubAcct             			is Numeric size 4
		SplitFromWorkOrder 	  			is a WorkOrder
			delete ignored
		RelatedTransaction 	  			is an InventoryTransaction

	Local Fields
		ItemLocation
		UOMCalculation
		LocalAlternateUOM							is like UnitOfMeasure
		LocalUOM									is like UnitOfMeasure
		LocalNewAvailableQuantity					is like Quantity
		LocalQuantity 								is like Quantity
		LocalPlanQuantity							is like Quantity
		LocalQuantityChange							is like Quantity
		InventoryCostHistoryRemainingQuantity 		is like Quantity
		InventoryCostHistoryQuantity    	  		is like Quantity
		LocalUsedQuantity							is like Quantity
		LocalTolerance								is like Quantity
		LocalSpiltItemPlanQuantity					is like Quantity
		LocalSplitItemNewPlanQuantity				is like Quantity
		LocalSpiltByProductsPlanQuantity			is like Quantity
		LocalSplitByproductsNewPlanQuantity			is like Quantity
		LocalSplitNewPlanQuantity					is like Quantity
		LocalCalculateQuantity						is like Quantity
		LocalTotalQuantityAssigned					is like Quantity
		LocalConvertedQuantity						is like Quantity
		LocalTotalQuantityAssignedConverted			is like Quantity
		LocalCostTolerance							is an InternationalCost
		TotalInventoryHistoryCost					is an InternationalCost
		InventoryCostHistoryCost              		is an InternationalCost
		LocalOutputUnitCost							is like UnitCost
		TempUnitCost								is like UnitCost
		LocalTotalError 							is Boolean
		LocalComponentSequence						is Numeric size 3
		LocalSublot									is like Sublot
		LocalLot									is like ItemLot
		LocalBin									is like Bin
		LocalInventoryLocation						is like InventoryLocation
		LocalItem									is like Item
		NewWorkOrder								is a WorkOrder view
		LocalWorkOrder								is a WorkOrder
		LocalReverseByWorkOrder						is Boolean
		LocalInventoryTransaction     				is an InventoryTransaction
		NewInventoryTransaction		  				is an InventoryTransaction view
		LocalInventoryTransactionLine 				is like LineNumber	
		NewInventoryTransactionLine					is an InventoryTransactionLine view
		LocalDistributionAccount					is like TransactionCodeBlock
		LocalAmount									is an InternationalAmount
		LocalPostingType							is AlphaUpper size 2
		LocalDocumentType							is AlphaUpper size 2
		LocalBODCurrentTimeStamp		            is a BODCurrentTimeStamp
		ActionCode
		LocalActor									is an Actor
		LocalSkipUnitCostForByProduct				is Boolean

		LocalLineVariationID						is Alpha size 25
		LocalNativeLPLBODTrigger					is Boolean
		NewBODTracker  								is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker					is Numeric 15
		Error            							is Boolean
	    ErrorMessage     							is Alpha 300
	    LocalConfigurationParameter					is Alpha size up to 200


	Derived Fields
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforProductionReceiver"

		ContextMessageText is a MessageField
			restricted
			"WorkOrder<WorkOrder>"

		ToleranceMessage								is a MessageField
			restricted
			"QuantityOutsideOfTolerance"

		CostTolerance									is a MessageField
			restricted
			"CostIsOutsideOfTolerance"

		TotalPlanCost									is a DerivedField
			type is like  InternationalAmount
			return ((EstimatedComponentCost + EstimatedPackagingCost + EstimatedBurdenCost)/PlanQuantity)

		TotalActualCost									is a DerivedField
			type is like InternationalAmount
			if (ActualQuantity entered)
				return ((ActualComponentCost + ActualPackagingCost + ActualBurdenCost) / ActualQuantity)
			else
				return ((ActualComponentCost + ActualPackagingCost + ActualBurdenCost) / PlanQuantity)

		ConfirmationMessage								is a DerivedField
			type is MessageField
			if ((ActualQuantity + ShrinkQuantity) != PlanQuantity)
				if (KitItemRel.QuantityTolerancePercentage entered
				or  KitItemRel.ZeroQuantity)
					LocalUsedQuantity = ActualQuantity + ShrinkQuantity
					if (KitItemRel.ZeroQuantity)
						if (LocalUsedQuantity != PlanQuantity)
							LocalTotalError	= true
							return ToleranceMessage
					LocalTolerance = PlanQuantity * KitItemRel.QuantityTolerancePercentage
					if (LocalUsedQuantity > (PlanQuantity + LocalTolerance)
					or  LocalUsedQuantity < (PlanQuantity - LocalTolerance))
						LocalTotalError	= true
						return ToleranceMessage

			if (TotalPlanCost != TotalActualCost)
				if (!LocalTotalError)												
					if (KitItemRel.CostTolerancePercentage entered
					or  KitItemRel.ZeroCost)
						if (KitItemRel.ZeroCost)
							LocalTotalError = true
							return CostTolerance
						else
							LocalCostTolerance = TotalPlanCost * KitItemRel.CostTolerancePercentage   
							if (TotalActualCost > (TotalPlanCost + LocalCostTolerance)
							or  TotalActualCost < (TotalPlanCost - LocalCostTolerance))
								LocalTotalError = true
								return CostTolerance


		RecordsProcessedMessage is a MessageField
			restricted
			"RecordsProcessed"

		QuantityAssigned 								is a DerivedField
			type is like Quantity
			if(not DetailTracked)
				return ActualQuantity
			else
				if (ItemLocation.IsSerialTracked)
					return sum FinishedGoodDetailsRel.ActualQuantity
				else
					for each FinishedGoodDetailsRel
						if (Item.StockUOM != each.WorkOrderItemBinLotSerial.UnitOfMeasure)
							UOMCalculation.InputUOM							= each.WorkOrderItemBinLotSerial.UnitOfMeasure
							UOMCalculation.InputToUOM						= Item.StockUOM
							UOMCalculation.InputQuantity					= each.ActualQuantity
							UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
							LocalConvertedQuantity							= UOMCalculation.OutputQuantity
	
							LocalTotalQuantityAssignedConverted += LocalConvertedQuantity
						else
							LocalTotalQuantityAssigned += each.ActualQuantity
	
					return (LocalTotalQuantityAssignedConverted + LocalTotalQuantityAssigned)

		DerivedWorkOrder is a DerivedField
			type is Text
			restricted
			if (WorkOrder exists)
				return WorkOrder
			else
				return blank


		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID

		BODCurrentTimeStamp is a DerivedField
			type is TimeStamp
			restricted
			BODCurrentTimeStamp = system current timestamp
			return BODCurrentTimeStamp

		AlphaCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			return BODCurrentTimeStamp

		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaCurrentTimeStamp[1:4] + "-" + AlphaCurrentTimeStamp[5:6] + "-" + AlphaCurrentTimeStamp[7:8] + "T" + AlphaCurrentTimeStamp[9:10] + ":" + AlphaCurrentTimeStamp[11:12] + ":" + AlphaCurrentTimeStamp[13:14] + "Z"

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return Company.FinanceEnterpriseGroup

		DerivedAE is a DerivedField
		 	type is AlphaUpper size 12
		 	restricted
		 	return Company.AccountingEntity

		DerivedAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAE

		DerivedLawsonCompany is a DerivedField
			type is Alpha size 4
			restricted
			return Company using "%d"

		DerivedLocation is a DerivedField
			type is AlphaUpper size 50
			restricted
			return DerivedLawsonCompany + DerivedDelimiter + WorkOrder.InventoryLocation

		DerivedDocumentID is a DerivedField
			type is Alpha 75
			restricted
			return DerivedLawsonCompany + DerivedDelimiter + WorkOrder

		DerivedRevision is a DerivedField
			type is Alpha size 22
			restricted
			return ""

		DerivedActionCode is a DerivedField
			type is Alpha size 22
			restricted
			if(ActionCode.Create or action type.Create)
				return "Add"
			else
			if (ActionCode.Update or action type.Update or ActionCode.Delete or action type.Delete)
				return "Replace"

		DerivedStatusCode is a DerivedField
			type is Alpha size 22
			restricted
			if(ActionCode.Create or action type.Create or ActionCode.Update or action type.Update)
				return "Open"
			else
			if (ActionCode.Delete or action type.Delete)
				return "Deleted"

		DerivedMakeCode is a DerivedField
			type is AlphaUpper size 1
			restricted
			return KitItemRel.MakeCode

		DerivedKitItemMakeCode is a DerivedField
			type is AlphaUpper size 1
			restricted
			if(DerivedMakeCode = "O")
				return "O"
			else
			if (DerivedMakeCode ="S")
				return "S"

		DerivedItemUOM is a DerivedField
			type is AlphaUpper size 4
			restricted
			return Item.StockUOM

		DerivedCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.Currency

		DerivedBODID is a DerivedField
			type is Alpha size 100
			restricted
			return "infor-nid:"+DerivedTenantID+":"+DerivedAccountingEntity+ ":" + DerivedLocation + ":" + DerivedDocumentID + ":" + DerivedRevision +"?ProductionOrder&verb=Sync&TrackerID="+LocalFSMInboundBODTracker


		ProductionOrderDetailXML is a DerivedField
			type is XMLDocument
			restricted
			if (WorkOrderItemsRel exists)
				for each WorkOrderItemsRel
					ProductionOrderDetailXML += template.IONProductionOrderDetail_ST document for each
				return ProductionOrderDetailXML
			else
				return ""

		SyncProductionOrderXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			SyncProductionOrderXMLBOD = template.IONSyncProductionOrder_ST document for this instance
			return SyncProductionOrderXMLBOD



	Conditions
		RecordExists
			restricted
			when (WorkOrder exists)

		IsWorkOrderExists
			restricted
			when (WorkOrder exist)

		IsCancelled
			restricted
			when (Status.Cancelled)

		IsCompleted
			restricted
			when (Status.Completed)

		IsExploded
			restricted
			when (Status.Exploded)

		IsInProduction
			restricted
			when (Status.InProduction)

		IsReleased
			restricted
			when (Status.Released)

		IsUnreleased
			restricted
			when (Status.Unreleased)

		IsUserfieldEntered
			restricted
			classic name is USRFLD1ENTERED
			when (WoUserFld1 entered)

		IsFeedBackStatus
			restricted
			when (PickingFeedbackStatus.NotStarted
			or ProductionFeedbackStatus.NotStarted)

		IsWorkOrderProductionFeedbackNotStartedOrInProcess
			restricted
			when (ProductionFeedbackStatus.NotStarted
			or   ProductionFeedbackStatus.InProcess)

		IsWorkOrderItemFeedBackStatus
			restricted
			when ((!PickingFeedbackStatus.Finished)
			or (ProductionFeedbackStatus.NotStarted
			or ProductionFeedbackStatus.InProcess))

		IsUnreleasedReleasedOrExploded
			restricted
			when (IsUnreleased
			or    IsReleased
			or    IsExploded)

		IsExplodedOrInProduction
			restricted
			when (IsExploded
			or 	  IsInProduction)

		IsReleasedOrUnreleased
			restricted
			when (IsUnreleased
			or    IsReleased)

		IsUnreleasedReleasedOrInProduction
			restricted
			when (IsUnreleased
			or    IsReleased
			or    IsInProduction)

		IsProductionOrCancelledOrCompleted
			restricted
			when (IsInProduction
			or IsCancelled
			or IsCompleted)

		IsOffsiteOrReturned
			restricted
			when (HoldCode entered
 			or    ReturnedDate entered)

		IsSentOffsite
			restricted
			when (HoldCode entered
			and   ReturnedDate not entered)

		IsNotSentOffsite
			restricted
			when (HoldCode not entered
			and   OffsiteDate not entered)

		ReturnFromOffsite
			restricted
			when (HoldCode entered
			and   OffsiteDate entered)

		IsReturnedFromOffsite
			restricted
			when (HoldCode entered
 			or   ReturnedDate entered)

 		IsMaterialExpenseAccount
 			restricted
			when ((BurdenAbsorptionAccount changed
			and  BurdenAbsorptionAccount not entered)
			or  (ProductionCreditAccount changed
			and  ProductionCreditAccount not entered))

		IsPickingFeedbackStarted
			restricted
			when (not PickingFeedbackStatus.NotStarted)

		IsProductionFeedbackStarted
			restricted
			when (not ProductionFeedbackStatus.NotStarted)

		ForProductionFeedback
			restricted
 			when (Status.InProduction
			and !ProductionFeedbackStatus.NotStarted)

		IsPickingFeedbackFinishedOrComplete
			restricted
			when (PickingFeedbackStatus.Finished
			or    PickingFeedbackStatus.Complete)

		IsPickingFeedbackNotStartedOrInProcess
			restricted
			when (PickingFeedbackStatus.NotStarted
			or PickingFeedbackStatus.InProcess)

		IsOnlySerialTracked
			restricted
			when (ItemLocation.IsSerialTracked
			and  !ItemLocation.BinTracked)

		IsPlainItem
			restricted
			when (!ItemLocation.BinTracked
			and   !ItemLocation.IsLotTracked
			and   !ItemLocation.IsSerialTracked
			and   !Item.IsTrackedInAlternateUOM)

		DetailTracked
			restricted
			when (!IsPlainItem)

		IsSerialLotOrBinTracked
			restricted
			when (ItemLocation.BinTracked
			or    ItemLocation.IsLotTracked
			or    ItemLocation.IsSerialTracked)

		IsFeedBackStarted
			when (PickingFeedbackStatus.NotStarted
			and ProductionFeedbackStatus.NotStarted)

		HasDemand
			when (WarehouseDemandRel exists)

		HasDemandLine
			when (WarehouseDemandLineRel exists)

		IsSkippedPickingFeedbackAndProductionFeedbackFinished
			when (PickingFeedbackStatus.NotStarted
			and   ProductionFeedbackStatus.Finished)

		IsLotSerialBinTracked
			when ((ItemLocation.IsNotSerialTrackedOnIssue
			and    ItemLocation.BinTracked)
			or    (ItemLocation.IsNotLotTrackedOnIssue
			and    ItemLocation.BinTracked))

		IsLotOrSerialTracked
			when (ItemLocation.IsSerialTracked
			or    ItemLocation.IsLotTracked)

	Relations


		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter

		FSMBODConfigurationWORel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "ProductionOrder"
            	related.FSMBODConfiguration.Direction 	= 1
		
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker


		ItemLocationForWorkOrderItemRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company           = Company
				related.InventoryLocation = InventoryLocation
				related.Item              = LocalItem

		WorkOrderItemsRel is a WorkOrderItem set
		WorkOrderBurdensRel is a WorkOrderBurden set

		WorkOrderSourceRel is a WorkOrderSource set

		WorkOrderItemBinLotSerialRel is a WorkOrderItemBinLotSerial set 
			Instance Selection
				where (related.WorkOrderItem      = blank
				and    related.WorkOrderByproduct = blank)

		FinishedGoodDetailsRel is a WorkOrderItemBinLotSerial set
			Instance Selection
				where (related.WorkOrderItemBinLotSerial.DetailType.FinishedGood)

		WorkOrderByproductRel is a WorkOrderByproduct set

		KitItemRel
			one-to-one relation to KitItem
			Field Mapping uses symbolic key
				related.ItemGroup 		  		  = Company.ItemGroup
				related.KitItem.Company           = Company
				related.KitItem.InventoryLocation = InventoryLocation
				related.KitItem.Item      		  = Item

	   	WarehouseDemandRel
			one-to-one relation to WarehouseDemand
			Field Mapping uses symbolic key
				related.Company           					= Company
				related.WarehouseDemand.DemandSystemCode	= "WO"
				related.WarehouseDemand.DemandDocument		= WorkOrder
				related.WarehouseDemand.DemandCompany		= Company

		WarehouseDemandLineRel
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses Set5
				related.Company									= Company
				related.InventoryLocation						= InventoryLocation
				related.Item									= Item
				related.EstimatedTransactionDate				= StartDate
				related.WarehouseDemandLine.DemandDocumentType  = "WO"
				related.WarehouseDemand.DemandSystemCode	    = "WO"
				related.WarehouseDemand.DemandDocument		    = WorkOrder
				related.WarehouseDemand.DemandCompany			= Company
				related.WarehouseDemandLine.LineNumber		    = blank
				related.WarehouseDemandLine.ComponentSequence   = blank

		WarehouseDemandLineForSupplyRel
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses Set7
				related.Company									= Company
				related.InventoryLocation						= InventoryLocation
				related.WarehouseDemand.DemandSystemCode	    = "WO"
				related.WarehouseDemand.DemandDocument		    = WorkOrder
				related.WarehouseDemand.DemandCompany			= Company
				related.WarehouseDemandLine.LineNumber		    = blank
				related.WarehouseDemandLine.ComponentSequence   = blank

		ItemUOMForBurdenRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup								= Company.ItemGroup
				related.Item									= Item
				related.UnitOfMeasure 							= LocalAlternateUOM

		KitComponentsRel
			one-to-many relation to KitComponent
		   	Field Mapping uses symbolic key
				related.ItemGroup								= Company.ItemGroup
		   		related.KitItem.Company 						= Company
				related.KitItem.InventoryLocation  				= InventoryLocation
				related.KitItem.Item 							= Item

		WorkOrderItemsForWalkThruRel
			one-to-many relation to WorkOrderItem
			Field Mapping uses Set4
				related.Company           = Company
				related.InventoryLocation = InventoryLocation
				related.WorkOrder      	  = WorkOrder


	 	ItemUOMForStocKUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup		= Company.ItemGroup
				related.Item			= Item
				related.UnitOfMeasure 	= LocalUOM


	 	WorkOrderItemBinLotSerialForComponentRel is a WorkOrderItemBinLotSerial set
	 		Instance Selection
				where (related.WorkOrderItemBinLotSerial.DetailType.Component
				and   related.WorkOrderItem = LocalComponentSequence)

	 	WorkOrderItemBinLotSerialForByproductRel is a WorkOrderItemBinLotSerial set
	 		Instance Selection
				where (related.WorkOrderItemBinLotSerial.DetailType.Byproduct
				and   related.WorkOrderItem = LocalComponentSequence)

	 	WorkOrderByproductsRel is a WorkOrderByproduct set

		FinishedGoodsByproductRel
			one-to-many relation to FinishedGoodsByproduct
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.InventoryLocation								= InventoryLocation
			Instance Selection
				where (related.FinishedGoodsByproduct.FinishedGoodItem			= Item)

		FinishedGoodsBurdenRel
			one-to-many relation to FinishedGoodsBurden
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.InventoryLocation								= InventoryLocation
				related.Item											= Item

		WorkOrderItemForProductionFeedbackRel
			one-to-many relation to WorkOrderItem
			Field Mapping uses Set5
				related.Company 										= Company
				related.InventoryLocation								= InventoryLocation
				related.WorkOrder										= WorkOrder

   		WarehouseDemandLineForProductionRel
   			one-to-one relation to WarehouseDemandLine
   			Field Mapping uses Set1
   				related.Company 										= Company
				related.WarehouseDemand.DemandSystemCode	   			= "WO"
				related.WarehouseDemand.DemandDocument		   			= WorkOrder
				related.WarehouseDemand.DemandCompany					= Company
				related.WarehouseDemandLine.LineNumber		   			= LocalComponentSequence
				related.WarehouseDemandLine.ComponentSequence			= blank
				related.InventoryLocation								= LocalInventoryLocation

	   	StockOnHandDetailRel
			one-to-one relation to StockOnHandDetail
			Field Mapping uses symbolic key
				related.Company                         = Company
				related.InventoryLocation               = InventoryLocation
				related.Item                            = Item
				related.StockOnHandDetail.UnitOfMeasure = LocalUOM
				related.StockOnHandDetail.Lot           = LocalLot
				related.StockOnHandDetail.Sublot        = LocalSublot
				related.StockOnHandDetail.Bin           = LocalBin

   		WorkOrderItemRel
   			one-to-many relation to WorkOrderItem
			Field Mapping uses symbolic key
				related.Company           = Company
				related.InventoryLocation = InventoryLocation
				related.WorkOrder      	  = LocalWorkOrder
		 	Instance Selection
		 		where (related.Item = LocalItem)


		WorkOrderByproductForSplitRel
   			one-to-many relation to WorkOrderByproduct
			Field Mapping uses symbolic key
				related.Company           = Company
				related.InventoryLocation = InventoryLocation
				related.WorkOrder      	  = LocalWorkOrder
		 	Instance Selection
		 		where (related.Item = LocalItem)

		InventoryCostHistoryForLifoRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set5
				related.Company 					= Company
				related.InventoryLocation			= InventoryLocation
				related.Item						= Item

		InventoryCostHistoryFifoRel
			one-to-many relation to InventoryCostHistory
			Field Mapping uses Set3
				related.Company 					= Company
				related.InventoryLocation			= InventoryLocation
				related.Item						= Item

		InventoryTransactionLineRel
			one-to-many relation to InventoryTransactionLine
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction		= reference to this instance
				related.TransactionSystemCode 		= "WO"
				related.Company						= Company
				related.InventoryLocation 			= InventoryLocation
			Instance Selection
				where (related.InventoryTransactionLine.LineNumber = 1)

   	Rule Blocks
		CalculateUnitCostFromInventoryCostHistory
			if (Company.CostingMethod.LastInFirstOut)
				for each InventoryCostHistoryForLifoRel
					include InventoryCostHistory
			else
			if (Company.CostingMethod.FirstInFirstOut)
				for each InventoryCostHistoryFifoRel
					include InventoryCostHistory

		InventoryCostHistory
			InventoryCostHistoryRemainingQuantity = each.ReceivedQuantity - each.InspectionHoldQuantity - each.UsedQuantity
			if (LocalQuantity <= InventoryCostHistoryRemainingQuantity)
				InventoryCostHistoryQuantity 	= LocalQuantity
			else
				InventoryCostHistoryQuantity	= InventoryCostHistoryRemainingQuantity

			TempUnitCost						= each.UnitCost

			InventoryCostHistoryCost 			= InventoryCostHistoryQuantity * TempUnitCost
			TotalInventoryHistoryCost 		   += InventoryCostHistoryCost

   		UpdateWorkOrder
   			LocalQuantityChange	= (PlanQuantity - old PlanQuantity)
			if (PlanQuantity changed																	
			or  StartDate changed)
				invoke Update WarehouseDemandLineRel
					invoked.Quantity 							= PlanQuantity
					invoked.EstimatedTransactionDate			= StartDate

		CalculateAvailableQuantity
			if (Company.AvailableToAllocateWIP.AddToStockOnHand
			and (!Company.AllowNegativeStockOnHand))
				initialize LocalNewAvailableQuantity
				LocalNewAvailableQuantity = ItemLocation.AvailableQuantity - LocalCalculateQuantity
					constraint (LocalNewAvailableQuantity >= 0)
						"CannotDecreaseQuantity,Company<Company>DoesNotAllowNegativeStockOnHand"

		CancelWorkOrder
			LocalCalculateQuantity = PlanQuantity
			include CalculateAvailableQuantity

			include DeleteWorkOrderItemBurden

			include UpdateWarehouseItemLocationForDelete

		DeleteWorkOrder
			LocalCalculateQuantity = PlanQuantity
			include CalculateAvailableQuantity

			invoke Delete WorkOrderItemsRel
			invoke Delete WorkOrderByproductRel
			invoke Delete WorkOrderBurdensRel

			include UpdateWarehouseItemLocationForDelete

		UpdateWarehouseItemLocationForDelete
			if (WarehouseDemandLineRel.Quantity = PlanQuantity)
				invoke Delete WarehouseDemandLineRel
			else
				invoke Update WarehouseDemandLineRel
					invoked.Quantity		   			-= PlanQuantity

   		AddWorkOrderItemBurden
			if (OriginalWorkOrder not entered)
				for each KitComponentsRel
					LocalPlanQuantity  = each.Quantity * PlanQuantity
	   				constraint (LocalPlanQuantity <= each.ItemLocationRel.AvailableQuantity)
						"InsufficientQuantityForComponent<each.ComponentItem>AtLocation<each.InvLocation>"
	   				invoke Create WorkOrderItem set
	   					fill in fields from each
	   					invoked.Location					= each.InvLocation
	   					invoked.Item						= each.ComponentItem
	   					invoked.PlanQuantity				= LocalPlanQuantity
	   					if (InventoryLocation.UseIncomeStatementAccounts)
	   						invoked.MaterialExpenseAccount  = each.MaterialExpenseAccount

				for each FinishedGoodsByproductRel
					invoke Create WorkOrderByproduct set
						fill in fields from each
			 			invoked.Quantity					= (PlanQuantity * each.Quantity)

				for each FinishedGoodsBurdenRel
					invoke Create WorkOrderBurden set
						fill in fields from each
			else
				for each OriginalWorkOrder.WorkOrderItemsRel
					invoke ReverseWorkOrderItem each
						invoked.PrmWorkOrder				= WorkOrder

		DeleteWorkOrderItemBurden
			invoke Delete WorkOrderItemsRel
			invoke Delete WorkOrderByproductRel
			invoke Delete WorkOrderBurdensRel

			initialize  EstimatedBurdenCost
			initialize	EstimatedComponentCost
			initialize	EstimatedPackagingCost
			initialize	LastComponentSequence
			initialize	LastBurdenSequence
			initialize	LastByproductSequence

		CreateInventoryTransaction
			invoke Unreleased.Create InventoryTransaction
				assign result to NewInventoryTransaction
				fill in fields from this instance
				invoked.InventoryDocumentType 					 	 = LocalDocumentType
				if (LocalDocumentType = "IS"
				or  LocalSkipUnitCostForByProduct)
					invoked.SkipForWorkOrder						 = true
				invoked.OriginatingTransaction						 = reference to this instance

		CreateDistributionsForIncomeAccounts
			invoke Create InventoryTransactionLineDistribution
				fill in fields from this instance
				invoked.System												= "WO"
				invoked.TransactionSystemCode								= "WO"
				invoked.InventoryTransaction								= LocalInventoryTransaction

				invoked.InventoryTransactionLine.LineNumber					= LocalInventoryTransactionLine
				invoked.PostingType											= LocalPostingType
				invoked.PostingDate											= current corporate date 
				invoked.GLFinanceCodeBlock									= LocalDistributionAccount
				invoked.GLTransactionAmount									= LocalAmount	
				invoked.CurrencyCode										= Company.Currency
				invoked.UnitsAmount											= ActualQuantity
				invoked.TransactionDate										= current corporate date 
				invoked.GeneralLedgerEvent									= "WO"
				invoked.DocumentNumber										= WorkOrder
				initialize invoked.Status

	Sets

		Set2
			indexed
			Sort Order
				Company
				InventoryLocation
				Status
				WorkOrder

		Set3
			indexed
			Sort Order
				Company
				InventoryLocation
				Status
				StartDate
				WorkOrder

	Field Rules
		Company
			constraint (Company.WorkOrderInUse)
				"CannotCreateWorkOrder;CompanyNotSetUpToCreateWorkOrder"								

		InventoryLocation
			constraint (InventoryLocation.WorkOrderLocationType.ProductionLocation)
				"LocationNotSetUpForWorkOrders"        													

			constraint (ItemLocation exist)
				"ItemDoesNotExistAtLocation"															

		Item
			required

			constraint (Item exist)
				"ItemDoesNotExist"																		

			cannot be changed
				"CannotChangeFinishedGoodItem;UseDeleteAndReAdd"										

			constraint (KitItemRel exist)
				"KitItemDoesNotExist"															

			constraint (KitItemRel.MakeCode.MakeToStock)
				"KitItemMakeCodeIsNotMakeToStock"														


		PlanQuantity
			required

			if (IsInProduction)
				cannot be changed
					"PlannedQuantityCannotBeChangedForInProductionStatus"	   							

			if (PlanQuantity changed
			and PlanQuantity < old PlanQuantity)
				LocalCalculateQuantity = old PlanQuantity - PlanQuantity
				include CalculateAvailableQuantity					









			if (PlanQuantity changed)
				LocalQuantityChange = (PlanQuantity - old PlanQuantity)
				for each WorkOrderBurdensRel
					if (each.IsAmountPerFinishedGoodsUnit)
						if (each.AlternateUnitOfMeasure not entered							
						or  each.AlternateUnitOfMeasure = Item.StockUOM)
							EstimatedBurdenCost += (each.AmountPerUnit * LocalQuantityChange)
						else
							LocalAlternateUOM =  each.AlternateUnitOfMeasure
							constraint (ItemUOMForBurdenRel exists)
								"ItemUOMIsNotValidInventoryTrackedUnitOfMeasure"
							initialize UOMCalculation
							UOMCalculation.InputToUOM		= each.AlternateUnitOfMeasure
							UOMCalculation.InputUnitCost	= each.AmountPerUnit
							UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
							LocalOutputUnitCost				= UOMCalculation.OutputUnitCost
							EstimatedBurdenCost 			+= (LocalOutputUnitCost * LocalQuantityChange)

		HoldCode
			constraint (Status.InProduction)
				"HoldCodeIsAllowedOnlyInProductionStatus"														

		StartDate
			required

			if (IsInProduction)
				cannot be changed
					"StartDateCannotBeChangedForInProductionStatus"

		EndDate
			default to StartDate
			required

			constraint (EndDate >= StartDate)
				"EndDateShouldBeGreaterThanOrEqualToStartDate"														

		ProductionCreditAccount

			if (InventoryLocation.UseIncomeStatementAccounts)
				default to KitItemRel.ProductionCreditAccount
				required
			else
				cannot be entered

		BurdenAbsorptionAccount

			if (InventoryLocation.UseIncomeStatementAccounts)
				default to KitItemRel.BurdenAbsorptionAccount
				required
			else
				cannot be entered

		PickingFeedbackStatus
			if (HoldCode entered)
				constraint (!PickingFeedbackStatus.InProcess)
					"OffsiteProcessingInProgress;CannotChangePickingFeedbackStatus"										

		ProductionFeedbackStatus
			if (HoldCode entered)
				constraint (ProductionFeedbackStatus.NotStarted)
					"OffsiteProcessingInProgress;CannotChangeProductionFeedbackStatus"									

		OffsiteDate
			constraint (Status.InProduction)
				"OffsiteDateIsNotAllowedAtThisStatus"

			if (HoldCode entered)
				default to current corporate date

				constraint (OffsiteDate <= current corporate date)
					"OffsiteDateShouldBeLessThanOrEqualToCurrentDate"													

		ReturnedDate
			constraint (Status.InProduction)
				"ReturnedDateIsNotAllowedAtThisStatus"

			if (HoldCode entered)
				cannot be entered
					"ReturnedDateCannotBeEntered;WorkOrderNotSentToOffsite"												
			else
				if (OffsiteDate entered)
					default to current corporate date

					constraint (ReturnedDate <= current corporate date)
						"ReturnedDateShouldBeLessThanOrEqualToCurrentDate"												

					constraint (ReturnedDate >= OffsiteDate)
						"ReturnedDateShouldBeGreaterThanOrEqualToOffsiteDate"											
				else
					if (old ReturnedDate entered
					and old ReturnedDate != ReturnedDate)
						cannot be entered
							"ReturnedDateCannotBeUpdated;WorkOrderNotSentToOffsite"

	Actions
		UpdateWorkOrderForComponent is an Instance Action
			restricted
			Parameters
				PrmEstimatedComponentCost	is like InternationalCost
				PrmEstimatedPackagingCost   is like InternationalCost

			Action Rules
				if (PrmEstimatedComponentCost entered)
					EstimatedComponentCost += PrmEstimatedComponentCost

				if (PrmEstimatedPackagingCost entered)
					EstimatedPackagingCost += PrmEstimatedPackagingCost


		UpdateFromWorkOrderBurden is an Instance Action
			restricted

			Parameters
				PrmActualBurdenCost is like InternationalAmount
				PrmEstimatedAmount	is like InternationalAmount

			Action Rules
				if (PrmActualBurdenCost entered)
					ActualBurdenCost 	+= PrmActualBurdenCost

				if (PrmEstimatedAmount entered)
					EstimatedBurdenCost	+= PrmEstimatedAmount

		TriggerWorkOrder is an Instance Action
			restricted
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger)
					if (!action type.Delete)
						if (action != "UpdateBODIdFields") 
							ActionCode = ActionCode.Update
							if (action type.Create)
								ActionCode = ActionCode.Create

							increment bod id.VariationID

							trigger PayablesService.WorkOrderService PA service
								resume on error
								title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>INVL:<InventoryLocation>WO:<WorkOrder>"
								Criteria
									Company.FinanceEnterpriseGroup
									Company.GeneralLedgerCompany.AccountingEntity
									Company
								Variables
									include persistent fields from WorkOrder
									include persistent fields from InventoryLocation
									ActionCode
									Company.FinanceEnterpriseGroup
										variable name is FinanceEnterpriseGroup
									Company.ItemGroup
										variable name is ItemGroup
									LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
										variable name is CurrentTimeStamp
									Company.GeneralLedgerCompany.AccountingEntity
										variable name is AccountingEntity
									Company.Currency
										variable name is CurrencyCode
									Item.StockUOM
										variable name is ItemUOM
									KitItemRel.MakeCode
										variable name is MakeCode




		SendWorkOrderNativeLPLOUT is an Instance Action
			default label is untranslatable
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is SyncProductionOrderXMLBOD
					bod type is "Sync.ProductionOrder"
					accounting entity is DerivedAccountingEntity
					document id is  DerivedDocumentID
					variation id is DerivedVariationID
					location is DerivedLocation
					
		TriggerWorkOrderNativeLPLOUTBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationWORel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "ProductionOrder"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "WorkOrder"
					invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.PrmCompany 					= Company
					invoked.PrmMainUserTemplate			= "IONSyncProductionOrder_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationWORel.NativeLPLBODTrigger
				if(Company.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "ProductionOrder"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Reference1				= Company
							invoked.Reference2				= InventoryLocation
							invoked.Reference3				= WorkOrder
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Reference1				= Company
							invoked.Reference2				= InventoryLocation
							invoked.Reference3				= WorkOrder
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendWorkOrderNativeLPLOUT
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID					 			= DerivedBODID
							invoked.BODXML								= SyncProductionOrderXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status								= 3
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML								= SyncProductionOrderXMLBOD


		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
				PrmVariationID       is Alpha size 22
					default label is "VariationID"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				if (bod id.VariationID != PrmVariationID)
					bod id.VariationID			= PrmVariationID

		WorkOrderPurge is a Set Action
			completion message is "<RecordCount>_<RecordsProcessedMessage>"
			run in background
			restricted
			Parameters

				PrmInventoryCompany 				is a InventoryCompany
					default label is "Company"
				PrmInventoryLocation				is a InventoryLocation
					default label is "Location"
				PrmCutOffDate				is Date
					default label is "CutOffDate"
				PrmNumberOfDays 		is Numeric 10
					default label is "NumberOfDays"
				PrmDeleteDetailOnly  	is Boolean
					default label is "DeleteDetailOnly"
				PrmAddSubtract  is AlphaUpper size 1
					default label is "AddOrSubtract"
					States
						Add 		value is "A"
						Subtract 	value is "S"

			Parameter Rules
				PrmInventoryCompany
					required

				PrmInventoryLocation
					required

				PrmCutOffDate
					if (PrmNumberOfDays not entered)
						required

					if(PrmAddSubtract ="A")
						default to (current corporate date + PrmNumberOfDays)

					if(PrmAddSubtract ="S")
						default to (current corporate date - PrmNumberOfDays)

				PrmNumberOfDays
					if (PrmCutOffDate not entered
					and PrmAddSubtract entered )
						required
				PrmAddSubtract
					if (PrmNumberOfDays entered)
						required



			Local Fields
				RecordCount				is Numeric 10




			Instance Selection
				where ((Status = 9
				or		Status = 8)
				and     PrmInventoryCompany = Company
				and     PrmInventoryLocation = InventoryLocation
				and     PrmCutOffDate >= EndDate)




			Sort Order

			Accumulators

			Action Rules
				Empty Set Rules
					LocalActor = actor

					send notification
						to LocalActor
						description is "NoWorkOrderRecordsFoundToPurge"
						priority is high
						detail is "WorkOrderPurgeHasBeenCompletedfor<RecordCount>records"


				Set Rules
					Entrance Rules
						initialize RecordCount

					Exit Rules

						LocalActor = actor

						send notification
							to LocalActor
							description is "WorkOrderPurgeHasBeenCompleted"
							priority is high
							detail is "WorkOrderPurgeHasBeenCompletedFor<RecordCount>records"
				Instance Rules

					if (PrmDeleteDetailOnly)
						invoke Purge WorkOrderItemBinLotSerialRel
					else
						increment RecordCount
						invoke Purge  WorkOrderItemBinLotSerialRel
						invoke Purge  WorkOrderItemsRel
						invoke Purge  WorkOrderBurdensRel
						invoke Purge  WorkOrderSourceRel
						invoke Purge  WorkOrderByproductRel
						if (Status = 9)
							invoke Completed.Purge
						if (Status = 8)
							invoke Cancelled.Purge



	StateCycles

		WorkOrderCycle is a StateCycle
			state field is Status

			Unreleased	is a State
				Delete is a Delete Action
					Entrance Rules
						constraint (HoldCode not entered)
							"WorkOrderCannotBeDeleted;WorkOrderIsOffsite"
						include DeleteWorkOrder

				Create is a Create Action
					Field Rules
						WorkOrderSuffix
							cannot be entered																		

					Exit Rules
						invoke Create WarehouseDemand
							invoked.Company           						= Company
							invoked.WarehouseDemand.DemandSystemCode		= "WO"
							invoked.WarehouseDemand.DemandDocument			= WorkOrder
							invoked.WarehouseDemand.DemandCompany			= Company
							invoked.DocumentNumberNumeric					= WorkOrder

						invoke CreateSupply WarehouseDemandLine
							invoked.Company           						= Company
							invoked.InventoryLocation						= InventoryLocation
							invoked.WarehouseDemand.DemandSystemCode		= "WO"
							invoked.WarehouseDemand.DemandDocument			= WorkOrder
							invoked.WarehouseDemand.DemandCompany			= Company
							invoked.DocumentNumberNumeric					= WorkOrder
							invoked.WarehouseDemandLine.DemandDocumentType 	= DemandDocumentType.WorkOrder
							invoked.DemandRecordType						= WarehouseDemandLine.DemandRecordType.Supply
							invoked.Item									= WorkOrder.Item
							invoked.LineType								= WarehouseDemandLine.LineType.Inventoried//"I"
							invoked.Allocatable								= true
							invoked.TransactionUOM 							= Item.StockUOM
							invoked.Status									= WarehouseDemandLine.Status.ReleasedForProcessing
							if (OriginalWorkOrder entered)
								invoked.Quantity							= PlanQuantity * -1
							else
								invoked.Quantity							= PlanQuantity
							invoked.EstimatedTransactionDate				= StartDate

				Update is an Update Action
					Action Rules
						constraint (!InventoryLocation.Status.Inactive)									
							"InventoryLocation<InventoryLocation>IsInactive"
					Exit Rules
						include UpdateWorkOrder

				Cancel is an Instance Action
					Action Rules
						include CancelWorkOrder

						make transition to Cancelled

				Explode is an Instance Action
					Action Rules
						make transition to Exploded										

					Exit Rules
						include AddWorkOrderItemBurden

				Release is an Instance Action
					Action Rules
						make transition to Released

			Released is a State

				Update is an Update Action
					Action Rules
						constraint (!InventoryLocation.Status.Inactive)						
							"InventoryLocation<InventoryLocation>IsInactive"
					Exit Rules
						include UpdateWorkOrder

			   	Delete is a Delete Action
					Entrance Rules
						constraint (HoldCode not entered)
							"WorkOrderCannotBeDeleted;WorkOrderIsOffsite"
						include DeleteWorkOrder

			   	Cancel is an Instance Action
			   		Action Rules
						include CancelWorkOrder

						make transition to Cancelled

				Explode is an Instance Action
					Action Rules
						make transition to Exploded									

					Exit Rules
						include AddWorkOrderItemBurden

			Exploded is a State

				Update is an Update Action
					Action Rules
						constraint (!InventoryLocation.Status.Inactive)						
							"InventoryLocation<InventoryLocation>IsInactive"
						include UpdateWorkOrder						
						if (PlanQuantity changed)
							confirmation required
								"QuantityChanged;ReexplodeRequired"
							invoke Reexplode
							

				Delete is a Delete Action
					Entrance Rules
						constraint (HoldCode not entered)
							"WorkOrderCannotBeDeleted;WorkOrderIsOffsite"
						include DeleteWorkOrder

				Cancel is an Instance Action
					Action Rules
						include CancelWorkOrder

						make transition to Cancelled

				Reexplode    is an Instance Action  							
					Action Rules
						include DeleteWorkOrderItemBurden

						include AddWorkOrderItemBurden

			  	StartProduction is an Instance Action
			  		Action Rules
			  			for each WorkOrderItemsRel
			  				invoke InProductionValidationAction each

			  			make transition to InProduction

			InProduction	is a State
				Delete is a Delete Action
					Entrance Rules
						constraint (HoldCode not entered)
							"WorkOrderCannotBeDeleted;WorkOrderIsOffsite"
						constraint (PickingFeedbackStatus.NotStarted)
							"CannotDelete;WorkOrderPickingFeedbackStarted"
						constraint (ProductionFeedbackStatus.NotStarted)
							"CannotDelete;WorkOrderProductionFeedbackStarted"
						include DeleteWorkOrder

				UpdateActualComponentCostFromComponent is an Instance Action
					restricted
					Parameters
						PrmActualComponentCost         		is an InternationalCost
						PrmActualPackagingCost				is an InternationalCost
					Action Rules
						if (PrmActualComponentCost entered)
							ActualComponentCost   	+= PrmActualComponentCost
						if (PrmActualPackagingCost entered)
							ActualPackagingCost		+= PrmActualPackagingCost

				Update is an Update Action
					Action Rules
						constraint (!InventoryLocation.Status.Inactive)										
							"InventoryLocation<InventoryLocation>IsInactive"

						if (ForProductionFeedback)
							constraint (PickingFeedbackStatus.NotStarted
							or  		PickingFeedbackStatus.Complete)
								"PickingFeedbackStartedButNotCompleted"									

							constraint (ProductionFeedbackStatus.InProcess)
								"ChangeProhibited;ProductionFeedbackNotInProcess"				

							if (ActualQuantity changed
							or  ShrinkQuantity changed)
								if ((ActualQuantity + ShrinkQuantity) < PlanQuantity)
									LocalCalculateQuantity = PlanQuantity - (ActualQuantity + ShrinkQuantity)
									include CalculateAvailableQuantity


				Cancel is an Instance Action
					Action Rules
						constraint (IsFeedBackStatus)
							"WorkOrderCannotBeDeleted,FeedbackStarted"										

						constraint (HoldCode not entered)
							"WorkOrderCannotBeDeleted;WorkOrderIsOffsite"									

						include CancelWorkOrder

						make transition to Cancelled

				DeleteProductionFeedback is an Instance Action
					valid when (ProductionFeedbackStatus.InProcess)

					Action Rules
						constraint (PickingFeedbackStatus.NotStarted
							or  	PickingFeedbackStatus.Complete)
								"PickingFeedbackStartedButNotCompleted"										

						constraint (ProductionFeedbackStatus.InProcess)
							"DeleteProhibited;ProductionFeedbackNotInProcess"								

						constraint (HoldCode not entered)
							"DeleteNotAllowedWhenWorkOrderIsOffsite"										


						invoke DeleteProductionFeedback WorkOrderItemsRel


						invoke UpdateInitializeActualQuantityFromWorkOrder WorkOrderByproductRel


						invoke UpdateInitializeActualQuantities WorkOrderBurdensRel


						invoke UpdateFromWorkOrder FinishedGoodDetailsRel


						initialize ActualBurdenCost
						initialize ActualQuantity
						initialize ShrinkQuantity
						initialize ActualComponentCost
						initialize ActualPackagingCost

						ProductionFeedbackStatus = ProductionFeedbackStatus.NotStarted

				StartPickingFeedback is an Instance Action
					valid when (PickingFeedbackStatus.NotStarted)

					Action Rules
						constraint (PickingFeedbackStatus.NotStarted)
							"WorkOrderPickingFeedbackInProcess"                                       

						constraint (ProductionFeedbackStatus.NotStarted)
							"ProductionFeedbackBegunPickingNotAllowed"                                

						constraint (HoldCode not entered)
							"WorkOrderIsOffsite;CannotProcessPickingFeedback"

						invoke StartPickingFeedback WorkOrderItemsRel

						PickingFeedbackStatus = PickingFeedbackStatus.InProcess


				DeletePickingFeedback is an Instance Action
					valid when (PickingFeedbackStatus.InProcess)

					Action Rules
						constraint (PickingFeedbackStatus.InProcess)
							"WorkOrderFeedbackNotInProcess;DeleteNotAllowed"                             

						constraint (ProductionFeedbackStatus.NotStarted)
							"ProductionFeedbackBegunPickingNotAllowed"                                

						constraint (HoldCode not entered)
							"WorkOrderIsOffsite;CannotProcessPickingFeedback"

						invoke DeletePickingFeedback WorkOrderItemsRel

						PickingFeedbackStatus = PickingFeedbackStatus.NotStarted


				FinishPickingFeedback is an Instance Action
					valid when (PickingFeedbackStatus.InProcess)

					Action Rules
						constraint (PickingFeedbackStatus.InProcess)
							"WorkOrderFeedbackNotStarted;FinishNotAllowed"                             

						constraint (ProductionFeedbackStatus.NotStarted)
							"ProductionFeedbackBegunPickingNotAllowed"                                 

						constraint (HoldCode not entered)
							"WorkOrderIsOffsite;CannotProcessPickingFeedback"

						invoke FinishPickingFeedback WorkOrderItemsRel

						PickingFeedbackStatus = PickingFeedbackStatus.Finished

				ReleasePickingFeedback is an Instance Action												 
					valid when (PickingFeedbackStatus.Finished)

					Action Rules
						constraint (PickingFeedbackStatus.Finished)
							"PickingFeedbackNotFinished;UseFinishBeforeReleasing"

						constraint (ProductionFeedbackStatus.NotStarted)
							"ProductionFeedbackBegunPickingNotAllowed"

						constraint (HoldCode not entered)
							"WorkOrderIsOffsite;CannotProcessPickingFeedback"



						invoke DeleteWarehouseDemandLineForDemand WorkOrderItemsRel

						LocalDocumentType	= "IS"
						include CreateInventoryTransaction
						LocalInventoryTransaction 								 = NewInventoryTransaction.InventoryTransaction

						invoke CreateDistributions WorkOrderItemsRel
							invoked.PrmInventoryTransaction						= LocalInventoryTransaction

						invoke Unreleased.FinalRelease LocalInventoryTransaction

						PickingFeedbackStatus = PickingFeedbackStatus.Complete

				StartProductionFeedback is an Instance Action
					valid when (ProductionFeedbackStatus.NotStarted)

					Action Rules
						constraint (PickingFeedbackStatus.NotStarted
						or  		PickingFeedbackStatus.Complete)
							"PickingFeedbackStartedButNotCompleted"									

						constraint (ProductionFeedbackStatus.NotStarted)
							"ProductionFeedbackAlreadyStarted"                                   	

						constraint (HoldCode not entered)
							"WorkOrderIsOffsite;CannotStartProductionFeedback"						

						constraint (ActualQuantity entered)
							"ActualFinishedGoodQuantityProducedRequired" 							

						constraint (ActualQuantity <= PlanQuantity)
							"CannotStart;ActualQuantityGreaterThanPlannedQuantity"


						if ((ActualQuantity + ShrinkQuantity) < PlanQuantity)

							LocalCalculateQuantity = PlanQuantity - (ActualQuantity + ShrinkQuantity)
							include CalculateAvailableQuantity

							confirmation required
								"Warning,ThePlanQuantityIsGreaterThanTheActualProducedPlusShrinkageQuantityIndicateWhetherToSplitWorkOrder;Proceed?"

							LocalSplitNewPlanQuantity = PlanQuantity - ActualQuantity

							invoke Unreleased.Create WorkOrder
								assign result to NewWorkOrder
								fill in fields from this instance
									except invoked.ActualQuantity
									except invoked.ShrinkQuantity
									except invoked.EstimatedBurdenCost
									except invoked.EstimatedComponentCost
									except invoked.EstimatedPackagingCost
									except invoked.LastComponentSequence
									except invoked.LastBurdenSequence
									except invoked.LastByproductSequence
								invoked.PlanQuantity		= LocalSplitNewPlanQuantity
								invoked.SplitFromWorkOrder 	= WorkOrder

							LocalWorkOrder = NewWorkOrder.WorkOrder

							invoke Unreleased.Release LocalWorkOrder

							invoke Released.Explode LocalWorkOrder

							for each WorkOrderItemsRel
								LocalSpiltItemPlanQuantity    = each.PlanQuantity * (ActualQuantity / PlanQuantity)
								LocalSplitItemNewPlanQuantity = each.PlanQuantity - LocalSpiltItemPlanQuantity

								invoke Update each
									invoked.PlanQuantity = LocalSpiltItemPlanQuantity
								LocalItem 			= each.Item

								if (WorkOrderItemRel not exists)
									invoke Create WorkOrderItem set
										fill in fields from each
										invoked.WorkOrder 	  		= LocalWorkOrder
										invoked.PlanQuantity  		= LocalSplitItemNewPlanQuantity

							for each WorkOrderByproductRel
								LocalSpiltByProductsPlanQuantity    = each.Quantity * (ActualQuantity / PlanQuantity)
								LocalSplitByproductsNewPlanQuantity = each.Quantity - LocalSpiltItemPlanQuantity

								invoke Update each
									invoked.Quantity = LocalSpiltItemPlanQuantity
								LocalItem 			= each.Item

								if (WorkOrderByproductForSplitRel not exists)
									invoke Create WorkOrderByproduct set
										fill in fields from each
										invoked.WorkOrder 	 	= LocalWorkOrder
										invoked.Quantity 		= LocalSplitByproductsNewPlanQuantity

							invoke Exploded.StartProduction LocalWorkOrder

							PlanQuantity = ActualQuantity
							
							include UpdateWorkOrder

						ProductionFeedbackStatus = ProductionFeedbackStatus.InProcess

						invoke StartProductionFeedback WorkOrderItemForProductionFeedbackRel

						invoke UpdateWorkOrderBurdenFields WorkOrderBurdensRel

						invoke UpdateActualQuantityFromWorkOrder WorkOrderByproductRel

						if (ItemLocation.BinTracked
						and !ItemLocation.IsSerialTracked
						and !ItemLocation.IsLotTracked)
							if (ItemLocation.PreferredBin entered)
								invoke Create WorkOrderItemBinLotSerial
									invoked.Company									= Company
									invoked.InventoryLocation 						= InventoryLocation
									invoked.WorkOrder 								= WorkOrder
									invoked.WorkOrderItemBinLotSerial.DetailType 	= "F"
									invoked.WorkOrderItemBinLotSerial.Bin 			= ItemLocation.PreferredBin
									invoked.WorkOrderItemBinLotSerial.UnitOfMeasure = Item.StockUOM
									invoked.ActualQuantity							= ActualQuantity
									invoked.Item 									= Item
									invoked.UOMMultiplier							= ItemUOMForStocKUOMRel.UOMConversion

				FinishProductionFeedback is an Instance Action
					valid when (ProductionFeedbackStatus.InProcess)

					Action Rules
						constraint (PickingFeedbackStatus.NotStarted
							or  	PickingFeedbackStatus.Complete)
								"PickingFeedbackStartedButNotCompleted"							

						constraint (HoldCode not entered)
							"CannotEnterFeedback;WorkOrderIsOffsite"							

						constraint (ProductionFeedbackStatus.InProcess)
							"WorkOrderIsNotInProcess"											

						if (DetailTracked)
							constraint (FinishedGoodDetailsRel exists)
								"CannotFinish;FinishedGoodsDetailsDoNotExist"
								
							for each FinishedGoodDetailsRel
								if (each.WorkOrderItemBinLotSerial.UnitOfMeasure entered
									and each.WorkOrderItemBinLotSerial.UnitOfMeasure != Item.StockUOM)
										initialize UOMCalculation
										UOMCalculation.InputQuantity					= each.ActualQuantity
										UOMCalculation.InputUOM							= each.WorkOrderItemBinLotSerial.UnitOfMeasure
										UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
										LocalConvertedQuantity							+= UOMCalculation.OutputQuantity
								else
									LocalConvertedQuantity += each.ActualQuantity

							constraint (ActualQuantity = LocalConvertedQuantity)
								"CannotFinish;ActualQuantityOfFinishedGoodDoesNotMatchDetailsActualQuantity"

						invoke FinishProductionFeedback WorkOrderItemsRel

						invoke ValidateDetailsFromWorkOrder WorkOrderByproductsRel

						ProductionFeedbackStatus = ProductionFeedbackStatus.Finished


				ReleaseProductionFeedback is an Instance Action
					Action Rules
						constraint (PickingFeedbackStatus.NotStarted
							or  	PickingFeedbackStatus.Complete)
								"PickingFeedbackStartedButNotCompleted"									

						constraint (HoldCode not entered)
							"CannotEnterFeedback;WorkOrderIsOffsite"									

						constraint (ProductionFeedbackStatus.Finished
						or          ProductionFeedbackStatus.Completed)
							"UseFinishBeforeReleasing" 													

						constraint (ProductionFeedbackStatus.Finished
						or          ProductionFeedbackStatus.InProcess
						or          ProductionFeedbackStatus.NotStarted)
							"ProductionFeedbackAlreadyUpdated"											


						if (WarehouseDemandLineForSupplyRel exists)
							invoke Delete WarehouseDemandLineForSupplyRel

						if (IsSkippedPickingFeedbackAndProductionFeedbackFinished)
							invoke DeleteWarehouseDemandLineForDemand WorkOrderItemsRel



						invoke InProduction.CreateDistributions

						make transition to Completed

						if (OriginalWorkOrder not entered)        
							LocalPlanQuantity = PlanQuantity * -1
							invoke UpdateQuantities ItemLocation
								if (this instance.ItemLocation.BackorderedQuantity >= PlanQuantity)  
									invoked.PrmBackorderedQuantity = LocalPlanQuantity
						invoke TriggerWorkOrder

				SendOffsite is an Instance Action
					valid when (IsNotSentOffsite)
					Parameters
						PrmHoldCode					is a ReceivableHoldCode
						PrmVendor					is a Vendor
						PrmOffsiteDate				is Date

					Parameter Rules
						PrmHoldCode
							required
								"HoldCodeIsRequired"

						PrmOffsiteDate
							initial value is current corporate date
							default to current corporate date
							required
								"OffsiteDateIsRequired"

							constraint (PrmOffsiteDate <= current corporate date)
								"OffsiteDateShouldBeLessThanOrEqualToCurrentDate"								

					Action Rules
						constraint (IsNotSentOffsite)
							"OffsiteProcessingProhibited;RecordAlreadySentOffsite"

						constraint (ReturnedDate not entered)
							"OffsiteProcessingProhibited;ReturnedDateEntered"

						constraint (!PickingFeedbackStatus.InProcess)
							"OffsiteProcessingProhibited;PickingFeedbackInProcess"								

						constraint (ProductionFeedbackStatus.NotStarted)
							"OffsiteProcessingProhibited;ProductionFeedbackEntered"								

						if (PrmHoldCode entered)
							HoldCode			= PrmHoldCode

						if (PrmVendor entered)
							Vendor				= PrmVendor

						if (PrmOffsiteDate entered)
							OffsiteDate			= PrmOffsiteDate

				ReturnFromOffsite is an Instance Action
					valid when (IsSentOffsite)

					Parameters
						PrmReturnedDate				is Date

					Parameter Rules
						PrmReturnedDate
							initial value is current corporate date
							default to current corporate date
							required
								"ReturnedDateIsRequired"

							constraint (PrmReturnedDate >= OffsiteDate)
								"ReturnedDateShouldBeGreaterThanOrEqualToDateSent"


					Action Rules
						constraint (IsSentOffsite)
							"OffsiteProcessingAlreadyStarted;WorkOrderSentOffsite"

						initialize HoldCode
						initialize Vendor
						ReturnedDate	= PrmReturnedDate

				ResetOffsiteDetails is an Instance Action
					valid when (IsOffsiteOrReturned)

					Action Rules
						constraint (IsOffsiteOrReturned)
							"WorkOrderNotReturnedFromOffsite;CannotResetData"

						if (HoldCode entered)
							confirmation required
								"Warning,HoldCode,DateSentAndVendorWillBeRemoved;Proceed?"

						if (ReturnedDate entered)
							confirmation required
								"Warning,ReturnedDateAndDateSentWillBeRemoved;Proceed?"

						initialize HoldCode
						initialize ReturnedDate
						initialize OffsiteDate
						initialize Vendor

				CreateDistributions	is an Instance Action
					restricted


					Action Rules
						constraint (ProductionFeedbackStatus.Finished)
							"ProductionFeedbackHasNotFinished"


						if (OriginalWorkOrder entered)
							LocalDocumentType	= "AJ"
						else
							LocalDocumentType	= "RC"
						include CreateInventoryTransaction

						LocalInventoryTransaction 								= NewInventoryTransaction.InventoryTransaction

						invoke Unreleased.Create InventoryTransactionLine
							assign result to NewInventoryTransactionLine
							fill in fields from this instance
							invoked.TransactionSystemCode 						= "WO"
							invoked.InventoryTransaction						= LocalInventoryTransaction
							invoked.OriginatingTransaction						= reference to this instance
							invoked.Quantity									= ActualQuantity
							if (LocalDocumentType = "AJ")
								initialize invoked.UnitCost
							else
								invoked.UnitCost								= TotalActualCost
							invoked.KitType										= "S"
							invoked.TransactionUOM								= Item.StockUOM
							if (ItemLocation.BinTracked)
								invoked.MultipleBins							= true

						LocalInventoryTransactionLine							= NewInventoryTransactionLine.InventoryTransactionLine.LineNumber

						if (IsLotSerialBinTracked
						or  IsLotOrSerialTracked)
							invoke CreateDistributions WorkOrderItemBinLotSerialRel
								invoked.PrmInventoryTransaction						= LocalInventoryTransaction
								invoked.PrmInventoryTransactionLine 				= LocalInventoryTransactionLine

						if (InventoryLocation.UseIncomeStatementAccounts)
							LocalPostingType 									= "IP"
							LocalDistributionAccount 							= ProductionCreditAccount
							LocalAmount											= ActualComponentCost
							include CreateDistributionsForIncomeAccounts

							if (ActualBurdenCost entered)
								LocalPostingType 								= "IA"
								LocalDistributionAccount 						= BurdenAbsorptionAccount
								LocalAmount										= ActualBurdenCost * -1
								include CreateDistributionsForIncomeAccounts


						invoke CreateDistributions WorkOrderBurdensRel
							invoked.PrmInventoryTransaction						= LocalInventoryTransaction
							invoked.PrmInventoryTransactionLine 				= LocalInventoryTransactionLine
							invoked.PrmSystemCode								= "WO"

						invoke Unreleased.FinalRelease LocalInventoryTransaction


						if (WorkOrderByproductsRel exists)
							if (OriginalWorkOrder entered)
								LocalDocumentType	= "AJ"
							else
								LocalDocumentType	= "RC"

							LocalSkipUnitCostForByProduct						= true
							include CreateInventoryTransaction

							LocalInventoryTransaction 							= NewInventoryTransaction.InventoryTransaction

							invoke CreateDistributions WorkOrderByproductsRel
								invoked.PrmInventoryTransaction					= LocalInventoryTransaction

							invoke Unreleased.FinalRelease LocalInventoryTransaction


						if (IsSkippedPickingFeedbackAndProductionFeedbackFinished
						or	OriginalWorkOrder entered)
							
							if(OriginalWorkOrder entered)
								LocalDocumentType	= "RC"
							else
								LocalDocumentType	= "IS"

							include CreateInventoryTransaction

							LocalInventoryTransaction 								 = NewInventoryTransaction.InventoryTransaction

							invoke CreateDistributions WorkOrderItemsRel
								invoked.PrmInventoryTransaction						= LocalInventoryTransaction

							invoke Unreleased.FinalRelease LocalInventoryTransaction

						ProductionFeedbackStatus	= ProductionFeedbackStatus.Completed

						make transition to Completed


			Cancelled 		is a State
			  	Purge is a Purge Action
					restricted

			Completed		is a State


			  	Purge is a Purge Action
					restricted

				ReverseWorkOrder is an Instance Action
					valid when (ReversedByWorkOrder not entered)

					Action Rules
						constraint (ReversedByWorkOrder not entered)
							"WorkOrderHasAlreadyBeenReversedByWorkOrder<ReversedByWorkOrder>"

						constraint (ActualQuantity > 0)
							"CannotReverseWorkOrder;QuantityIsLessThanZero"

						if (Company.AllowNegativeStockOnHand)
							constraint (ItemLocationForWorkOrderItemRel.AvailableQuantity > ActualQuantity)
								"CannotReverseWorkOrder;AvailableFinishedGoodQuantityIsLessThanQuantityToReverse"

						invoke Unreleased.Create WorkOrder
							assign result to NewWorkOrder
							fill in fields from this instance
							invoked.ProductionFeedbackStatus	= 2
							invoked.ReversedByWorkOrder			= blank
							invoked.LocalReverseByWorkOrder		= true
							invoked.PlanQuantity				= PlanQuantity * -1
							invoked.EstimatedComponentCost		= EstimatedComponentCost * -1
							invoked.EstimatedPackagingCost		= EstimatedPackagingCost * -1
							invoked.EstimatedBurdenCost			= EstimatedBurdenCost * -1
							invoked.ActualQuantity				= ActualQuantity * -1
							invoked.ShrinkQuantity				= ShrinkQuantity * -1
							invoked.ActualComponentCost			= ActualComponentCost * -1
							invoked.ActualPackagingCost			= ActualPackagingCost * -1
							invoked.ActualBurdenCost			= ActualBurdenCost * -1
							invoked.OriginalWorkOrder			= WorkOrder

						LocalWorkOrder           				= NewWorkOrder.WorkOrder
						ReversedByWorkOrder 					= LocalWorkOrder

						invoke Unreleased.Release LocalWorkOrder
						invoke Released.Explode LocalWorkOrder

						invoke Exploded.StartProduction LocalWorkOrder

						for each WorkOrderBurdensRel
							invoke ReverseWorkOrderBurden each
								invoked.PrmWorkOrder				= LocalWorkOrder

						for each WorkOrderByproductRel
							invoke ReverseWorkOrderByproduct each
								invoked.PrmWorkOrder				= LocalWorkOrder

						if (DetailTracked)
							for each FinishedGoodDetailsRel
								invoke ReverseWorkOrderDetail each
									invoked.PrmWorkOrder			= LocalWorkOrder
									invoked.PrmItem					= Item

