FinanceEnterpriseGroup is a BusinessClass
	owned by GeneralLedger
	prefix is FINGP
	representative text is "<FinanceEnterpriseGroup>-<FinanceEnterpriseGroupDescription>"

	Ontology
		symbolic key is FinanceEnterpriseGroup

    Patterns
    	implements StaticJava
		implements BODId
		implements Proxy for DEPMDimensionMapRel
        implements Proxy for FinanceEnterpriseGroupExtRel
		implements AnalyticCube
        	disable continuous update
			dynamically calculate totals
			write to base level only 

	Context Fields
		ContextConfiguration is a GeneralLedgerCloseConfiguration
		ContextYear			 is a GeneralLedgerCloseYear
		ReportingBasis
		StructureDefaultCode
		ReportingBasisYear

	Persistent Fields
	    GeneralLedgerChartAccountLastSeq is Numeric 7
	    	default label is "GlobalLedgerChartAccountLastSeq"
	    	disable Auditing
	    AccountingEntityLastSeq         is Numeric 7
	    	disable Auditing	    
	    AccountingUnitLastSeq           is Numeric 7
	    	disable Auditing	    
	    ProjectLastSeq                  is Numeric 7
	    	disable Auditing	    
		Dimension1LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension2LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension3LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension4LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension5LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension6LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension7LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension8LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension9LastSeq				is Numeric 7
	    	disable Auditing		
		Dimension10LastSeq				is Numeric 7
			disable Auditing
		AccountingEntityOrder			is a CodeBlockOrder
		AccountingUnitOrder				is a CodeBlockOrder
		AccountOrder					is a CodeBlockOrder
		ProjectOrder					is a CodeBlockOrder
		FinanceDimension1Order	 		is a CodeBlockOrder
		FinanceDimension2Order			is a CodeBlockOrder
		FinanceDimension3Order			is a CodeBlockOrder
		FinanceDimension4Order			is a CodeBlockOrder
		FinanceDimension5Order			is a CodeBlockOrder
		FinanceDimension6Order	 		is a CodeBlockOrder
		FinanceDimension7Order			is a CodeBlockOrder
		FinanceDimension8Order			is a CodeBlockOrder
		FinanceDimension9Order			is a CodeBlockOrder
		FinanceDimension10Order			is a CodeBlockOrder		
		AccountingEntityLabel			is Alpha 25
			translatable
		AccountingUnitLabel				is Alpha 25
			translatable
		AccountLabel					is Alpha 25
			translatable
		ProjectLabel					is Alpha 25
			translatable
		FinanceDimension1Label	 		is Alpha 25
			translatable
		FinanceDimension2Label			is Alpha 25
			translatable
		FinanceDimension3Label			is Alpha 25
			translatable
		FinanceDimension4Label			is Alpha 25
			translatable
		FinanceDimension5Label			is Alpha 25
			translatable
		FinanceDimension6Label	 		is Alpha 25
			translatable
		FinanceDimension7Label			is Alpha 25
			translatable
		FinanceDimension8Label			is Alpha 25
			translatable
		FinanceDimension9Label			is Alpha 25
			translatable
		FinanceDimension10Label			is Alpha 25
			translatable			
		CurrencyTable
		ReportOne						is Alpha 15
			translatable
		ReportCurrencyOne				is a Currency
		ReportOneAutoBalanceThreshold 	is Unsigned Decimal 19.3
			precision is ReportCurrencyOne.NumberOfDecimals
		ReportTwo						is Alpha 15
			translatable
		ReportCurrencyTwo				is a Currency
		ReportTwoAutoBalanceThreshold 	is Unsigned Decimal 19.3
			precision is ReportCurrencyTwo.NumberOfDecimals
		ReportThree						is Alpha 15
			translatable
		ReportCurrencyThree				is a Currency
		ReportThreeAutoBalanceThreshold is Unsigned Decimal 19.3
			precision is ReportCurrencyThree.NumberOfDecimals
		ReportFour						is Alpha 15
			translatable
		ReportCurrencyFour				is a Currency
		ReportFourAutoBalanceThreshold 	is Unsigned Decimal 19.3
			precision is ReportCurrencyFour.NumberOfDecimals
		ReportFive						is Alpha 15
			translatable
		ReportCurrencyFive				is a Currency
		ReportFiveAutoBalanceThreshold 	is Unsigned Decimal 19.3
			precision is ReportCurrencyFive.NumberOfDecimals
		AccountingUnitRequired			is Boolean
		ProjectRequired					is Boolean
		FinanceDimension1Required	 	is Boolean
		FinanceDimension2Required	 	is Boolean
		FinanceDimension3Required	 	is Boolean
		FinanceDimension4Required	 	is Boolean
		FinanceDimension5Required	 	is Boolean
		FinanceDimension6Required	 	is Boolean
		FinanceDimension7Required	 	is Boolean
		FinanceDimension8Required	 	is Boolean
		FinanceDimension9Required	 	is Boolean
		FinanceDimension10Required	 	is Boolean		
		Dimension1ZoneBalancing			is Boolean					
		CoreLedger						is like Ledger
		CurrencyTranslationAndRevalue 	is Boolean















		UseSubAccounts					is Boolean		
		AccountRegularExpression		is Alpha 50
		EnterpriseChart					is a ReportingChart
		EnterpriseAUStructure			is an AccountingUnitStructure
		EnterpriseProjectStructure		is a ProjectStructure
		EnterpriseDim1Structure			is a FinanceDimension1Structure
		EnterpriseDim2Structure			is a FinanceDimension2Structure
		EnterpriseDim3Structure			is a FinanceDimension3Structure
		EnterpriseDim4Structure			is a FinanceDimension4Structure
		EnterpriseDim5Structure			is a FinanceDimension5Structure
		EnterpriseDim6Structure			is a FinanceDimension6Structure
		EnterpriseDim7Structure			is a FinanceDimension7Structure
		EnterpriseDim8Structure			is a FinanceDimension8Structure
		EnterpriseDim9Structure			is a FinanceDimension9Structure
		EnterpriseDim10Structure		is a FinanceDimension10Structure
		UnusedAccountChart				is a ReportingChart
			delete ignored
		UnusedAUStructure				is an AccountingUnitStructure
			delete ignored
		UnusedProjectStructure			is a ProjectStructure
			delete ignored
		UnusedDim1Structure				is a FinanceDimension1Structure
			delete ignored
		UnusedDim2Structure				is a FinanceDimension2Structure
			delete ignored
		UnusedDim3Structure				is a FinanceDimension3Structure
			delete ignored
		UnusedDim4Structure				is a FinanceDimension4Structure
			delete ignored
		UnusedDim5Structure				is a FinanceDimension5Structure
			delete ignored
		UnusedDim6Structure				is a FinanceDimension6Structure
			delete ignored
		UnusedDim7Structure				is a FinanceDimension7Structure
			delete ignored
		UnusedDim8Structure				is a FinanceDimension8Structure
			delete ignored
		UnusedDim9Structure				is a FinanceDimension9Structure
			delete ignored
		UnusedDim10Structure			is a FinanceDimension10Structure
			delete ignored				
		LastErrorRunGroupNumber			is Numeric 8
			disable Auditing
		UnitControl						is Numeric 1
			States
				Account					value is 0 
				AccountingUnit			value is 1
				Dimension1				value is 2
		HROrganization
		ProjectDateEdit					is Numeric 1
			States
				TransactionDate			value is 1
				PostingDate				value is 2
		ProjectBurdenDate				is Numeric 1
			States
				TransactionDate			value is 1
				PostingDate				value is 2
		ActualsScenario					is a Scenario
		CommitmentsScenario				is a Scenario
		EncumbrancesScenario			is a Scenario
		SystemDim1Defined				is Boolean
		DefaultZoneDim1Defined 			is Boolean
		EnterpriseZoneDim1Defined		is Boolean
		SystemDim2Defined				is Boolean
		SystemDim3Defined				is Boolean
		SystemDim4Defined				is Boolean
		SystemDim5Defined				is Boolean
		SystemDim6Defined				is Boolean
		SystemDim7Defined				is Boolean
		SystemDim8Defined				is Boolean
		SystemDim9Defined				is Boolean
		SystemDim10Defined				is Boolean
		SystemProjectDefined			is Boolean
		BODTrigger						is Boolean
		BODCostCenter 					is Numeric 2
			States
				AccountingUnit		 	value is 0
				Dimension1	 			value is 1
				Dimension2	 			value is 2
				Dimension3	 			value is 3
				Dimension4	 			value is 4
				Dimension5	 			value is 5
				Dimension6	 			value is 6
				Dimension7	 			value is 7
				Dimension8	 			value is 8
				Dimension9	 			value is 9
				Dimension10			 	value is 10
		ValidateFinanceStructure		is Boolean
		SystemSubAccount				is like GeneralLedgerSubAccount
		UseDEPMBudgeting				is Boolean
		ProjectInvoicing				is Boolean
		ThirdPartyInvoicePrint          is Boolean	
		BillingOverrideLevel			is Numeric size 2
			States
				Account				 	value is 0
				Dimension1	 			value is 1

				Dimension3	 			value is 3
				Dimension4	 			value is 4
				Dimension5	 			value is 5
				Dimension6	 			value is 6
				Dimension7	 			value is 7
				Dimension8	 			value is 8
				Dimension9	 			value is 9
				Dimension10			 	value is 10	
		AccountingEntityRegularExpression	is Alpha up to 50
		AccountingUnitRegularExpression		is Alpha up to 50
		ProjectRegularExpression			is Alpha up to 50
		FinanceDimension1RegularExpression	is Alpha up to 50
		FinanceDimension2RegularExpression	is Alpha up to 50
		FinanceDimension3RegularExpression	is Alpha up to 50
		FinanceDimension4RegularExpression	is Alpha up to 50
		FinanceDimension5RegularExpression	is Alpha up to 50
		FinanceDimension6RegularExpression	is Alpha up to 50
		FinanceDimension7RegularExpression	is Alpha up to 50
		FinanceDimension8RegularExpression	is Alpha up to 50
		FinanceDimension9RegularExpression	is Alpha up to 50
		FinanceDimension10RegularExpression	is Alpha up to 50
		SubAccounRegularExpression			is Alpha up to 50
		UpdateInterZoneBalance				is Boolean
		RequireUniqueJournalID				is Boolean
		FinanceStructureSmartSelect			is Boolean
		UseAverageDailyBalance				is Boolean			
			default label is "UseADBForAllDimensions"
			protected
		ADBSelection						is Numeric 1
			States
				None						value is 0 
				AccountOnly					value is 4
				AccountAndOneDimension		value is 5
				AccountAndTwoDimensions		value is 6
				AccountAndThreeDimensions	value is 7
				Account						value is 1
					default label is "\_Account"
				AccountAndAccountingUnit	value is 2
					default label is "\_AccountAndAccountingUnit"
				AccountAndDimension1		value is 3
					default label is "\_AccountAndDimension1"
		DimensionForDepartmentJournal		is Numeric 2
			States
				None						value is 0 
				AccountingUnit			 	value is 1
				Dimension1	 				value is 2
				Dimension2	 				value is 3
				Dimension3	 				value is 4
				Dimension4	 				value is 5
				Dimension5	 				value is 6
				Dimension6	 				value is 7
				Dimension7	 				value is 8
				Dimension8	 				value is 9
				Dimension9	 				value is 10
				Dimension10				 	value is 11
		InterEntityDimension			is Numeric size 2
			States
				SubAccount			 	value is 0
				Dimension1	 			value is 1
				Dimension2	 			value is 2
				Dimension3	 			value is 3
				Dimension4	 			value is 4
				Dimension5	 			value is 5
				Dimension6	 			value is 6
				Dimension7	 			value is 7
				Dimension8	 			value is 8
				Dimension9	 			value is 9
				Dimension10			 	value is 10	
		DefaultDecimalsOption				is Numeric 1
			States
				Zero						value is 1
				Two							value is 2
				Three						value is 3
		DefaultNumberOfDecimals				is Numeric 1
			States
				Zero						value is 0
				Two							value is 2
				Three						value is 3
		BypassCubeRefreshOnPost			is Boolean		
		AllBalanceSheetAccounts         is Boolean
			default label is "UseAllBalanceSheetAccounts"
		FundAccounting			        is Boolean
			protected
		IncludeUREInAverageDailyBalance is Boolean
			default label is "IncludeUndistributedRetainedEarnings"
		AutoReverseWithinSamePeriod		is Boolean
		FundDimension 					is Numeric 2
			States
				AccountingUnit		 	value is 1
				Dimension1	 			value is 2
		NettingJournalApproval		    is Boolean
		ADBDimensions
		ProjectStructureValidation		is Boolean
			protected
		StructureValidationDimension	is Numeric size 2
			States
				Dimension3	 			value is 3
				Dimension4	 			value is 4
				Dimension5	 			value is 5
				Dimension6	 			value is 6
				Dimension7	 			value is 7
				Dimension8	 			value is 8
				Dimension9	 			value is 9
				Dimension10			 	value is 10
				Account					value is 11
		ValidationDimensionRequiresProject		is Boolean						
#ifdef module lm 	
		LeaseAccountingMethod						
		LeaseAccountingStandard			is Numeric size 1
			States
				ASC 					value is 1
				GASB 					value is 2
				IFRS					value is 3
		ShortTermLiabilityAccounting	is Boolean	
		UseLeaseRateTable 				is Boolean	
#endif
		FrontEndSplits			        is Boolean
			default label is "FrontEndSplit"
			protected
		UseFundedAmounts				is Boolean
		IncludeLedgerInAverageDailyBalance	is Boolean
			default label is "CalculateADBByLedger"
		IncludeIncomeStatementAccounts		is Boolean
		CalculateADBOption					is Numeric 1
			default label is "CalculateADBFor"
			States
				FunctionalAmount			value is 0
				AllCurrencyAmounts			value is 1
		ADBProcessingDate					is Numeric 1
			States
				PostingDateAndTransactionDate  value is 0
				PostingDate                    value is 1
		CurrencyLedgerJournals              is Boolean		
#ifdef module cam
		CustodialAccountManagement	        is Boolean
			protected
#endif
		EnableRelatedPartyElimination		is Boolean				

		EnableIDMForAttachments				is Boolean
			default label is "Use_\IDMForAttachments"
		NoDimensionUREPosting				is Boolean
			default label is "ExcludeProjectAndDimensionsForUREPosting"
		EnableResponsibilityMatrix			is Boolean
			protected
		ResponsibilityMatrixSecurity		is Boolean
		PreferStructureRelationDefaulting	is Boolean
		CapitalizationUpgradeProgess		is Numeric 1
			default label is "CapitalizationUpgradeProgress"
			States
				NotEnabled	value is 0
				InProgress	value is 1
				Completed	value is 2
		PurgeCutOffDate						is Date
			protected
		LaborDistributionUpgradeComplete	is Boolean
			protected
		
		AccountingEntityApprovalOrder		is a CodeBlockOrder
		AccountingUnitApprovalOrder			is a CodeBlockOrder
		AccountApprovalOrder				is a CodeBlockOrder
		ProjectApprovalOrder				is a CodeBlockOrder
		FinanceDimension1ApprovalOrder	 	is a CodeBlockOrder
		FinanceDimension2ApprovalOrder		is a CodeBlockOrder
		FinanceDimension3ApprovalOrder		is a CodeBlockOrder
		FinanceDimension4ApprovalOrder		is a CodeBlockOrder
		FinanceDimension5ApprovalOrder		is a CodeBlockOrder
		FinanceDimension6ApprovalOrder	 	is a CodeBlockOrder
		FinanceDimension7ApprovalOrder		is a CodeBlockOrder
		FinanceDimension8ApprovalOrder		is a CodeBlockOrder
		FinanceDimension9ApprovalOrder		is a CodeBlockOrder
		FinanceDimension10ApprovalOrder		is a CodeBlockOrder	
	Transient Fields
		CreateAMonthlyCalendar				is Boolean
		TransientCurrencyTable				is like CurrencyTable

		CoreLedgerDescription   			is like Description
			derive value from LedgerRel.Description
		RetainedEarnings					is like GeneralLedgerChartAccount
		DisplayRetainedEarnings				is like GeneralLedgerChartAccount
			derive value from DerivedRetainedEarnings		
		RetainedEarningsDescription			is like Description
			derive value from DerivedRetainedEarningsDesc		
		RetainedEarningsChartSection		is Numeric 1
			derive value from DerivedRetainedEarningsChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2
		RetainedEarningsAccountType			is a AccountType
			derive value from DerivedRetainedEarningsAcctType			  

		UndistributedRetainedEarnings		is like GeneralLedgerChartAccount
		DisplayUndistributedRetainedEarnings	is like GeneralLedgerChartAccount
			derive value from DerivedUndistributedRetainedEarnings		
		UndistributedRetainedEarningsDescription	is like Description
			derive value from DerivedUndistributedRetainedEarningsDesc		
		UndistributedRetainedEarningsChartSection	is Numeric 1
			derive value from DerivedUndistributedRetainedEarningsChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		UndistribRetainedEarningsAccountType	is a AccountType
			derive value from DerivedUndistribRetainedEarningsAcctType

		SummaryExpense						is like GeneralLedgerChartAccount	
		DisplaySummaryExpense				is like GeneralLedgerChartAccount	
			derive value from DerivedSummaryExpense
		SummaryExpenseDescription			is like Description		
			derive value from DerivedSummaryExpenseDesc
		SummaryExpenseChartSection		is Numeric 1	
			derive value from DerivedSummaryExpenseChart
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2
		SummaryExpenseAccountType			is a AccountType	
			derive value from DerivedSummaryExpenseAcctType

		SummaryRevenue						is like GeneralLedgerChartAccount	
		DisplaySummaryRevenue				is like GeneralLedgerChartAccount	
			derive value from DerivedSummaryRevenue
		SummaryRevenueDescription			is like Description	
			derive value from DerivedSummaryRevenueDesc
		SummaryRevenueChartSection		is Numeric 1	
			derive value from DerivedSummaryRevenueChart
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2
		SummaryRevenueAccountType			is a AccountType	
			derive value from DerivedSummaryRevenueAcctType

		ErrorSuspense						is like GeneralLedgerChartAccount
		DisplayErrorSuspense				is like GeneralLedgerChartAccount
			derive value from DerivedErrorSuspense		
		ErrorSuspenseDescription			is like Description
			derive value from DerivedErrorSuspenseDesc		
		ErrorSuspenseChartSection			is Numeric 1
			derive value from DerivedErrorSuspenseChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		ErrorSuspenseAccountType			is a AccountType
			derive value from DerivedErrorSuspenseAcctType

		AutoBalance						is like GeneralLedgerChartAccount
		DisplayAutoBalance				is like GeneralLedgerChartAccount
			derive value from DerivedAutoBalance		
		AutoBalanceDescription			is like Description
			derive value from DerivedAutoBalanceDesc		
		AutoBalanceChartSection			is Numeric 1
			derive value from DerivedAutoBalanceChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		AutoBalanceAccountType			is a AccountType
			derive value from DerivedAutoBalanceAcctType

		RealizedGain						is like GeneralLedgerChartAccount
		DisplayRealizedGain					is like GeneralLedgerChartAccount
			derive value from DerivedRealizedGain		
		RealizedGainDescription				is like Description
			derive value from DerivedRealizedGainDesc		
		RealizedGainChartSection			is Numeric 1
			derive value from DerivedRealizedGainChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		RealizedGainAccountType				is a AccountType
			derive value from DerivedRealizedGainAcctType

		RealizedLoss						is like GeneralLedgerChartAccount
		DisplayRealizedLoss					is like GeneralLedgerChartAccount
			derive value from DerivedRealizedLoss		
		RealizedLossDescription				is like Description
			derive value from DerivedRealizedLossDesc		
		RealizedLossChartSection			is Numeric 1
			derive value from DerivedRealizedLossChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		RealizedLossAccountType				is a AccountType
			derive value from DerivedRealizedLossAcctType

		ZonePayables						is like GeneralLedgerChartAccount
		DisplayZonePayables					is like GeneralLedgerChartAccount
			derive value from DerivedZonePayables		
		ZonePayablesDescription				is like Description
			derive value from DerivedZonePayablesDesc		
		ZonePayablesChartSection			is Numeric 1
			derive value from DerivedZonePayablesChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		ZonePayablesAccountType				is a AccountType
			derive value from DerivedZonePayablesAcctType

		ZoneReceivables						is like GeneralLedgerChartAccount
		DisplayZoneReceivables				is like GeneralLedgerChartAccount
			derive value from DerivedZoneReceivables		
		ZoneReceivablesDescription			is like Description
			derive value from DerivedZoneReceivablesDesc		
		ZoneReceivablesChartSection			is Numeric 1
			derive value from DerivedZoneReceivablesChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		ZoneReceivablesAccountType			is a AccountType
			derive value from DerivedZoneReceivablesAcctType

		InterEntityPayables					is like GeneralLedgerChartAccount
		DisplayInterEntityPayables			is like GeneralLedgerChartAccount
			derive value from DerivedInterEntityPayables		
		InterEntityPayablesDescription		is like Description
			derive value from DerivedInterEntityPayablesDesc		
		InterEntityPayablesChartSection		is Numeric 1
			derive value from DerivedInterEntityPayablesChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		InterEntityPayablesAccountType		is a AccountType
			derive value from DerivedInterEntityPayablesAcctType

		InterEntityReceivables				is like GeneralLedgerChartAccount
		DisplayInterEntityReceivables		is like GeneralLedgerChartAccount
			derive value from DerivedInterEntityReceivables		
		InterEntityReceivablesDescription	is like Description
			derive value from DerivedInterEntityReceivablesDesc		
		InterEntityReceivablesChartSection	is Numeric 1
			derive value from DerivedInterEntityReceivablesChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		InterEntityReceivablesAccountType	is a AccountType
			derive value from DerivedInterEntityReceivablesAcctType

		TranslationGain						is like GeneralLedgerChartAccount
		DisplayTranslationGain				is like GeneralLedgerChartAccount
			derive value from DerivedTranslationGain		
		TranslationGainDescription			is like Description
			derive value from DerivedTranslationGainDesc		
		TranslationGainChartSection			is Numeric 1
			derive value from DerivedTranslationGainChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		TranslationGainAccountType			is a AccountType
			derive value from DerivedTranslationGainAcctType

		TranslationLoss					is like GeneralLedgerChartAccount
		DisplayTranslationLoss			is like GeneralLedgerChartAccount
			derive value from DerivedTranslationLoss		
		TranslationLossDescription			is like Description
			derive value from DerivedTranslationLossDesc		
		TranslationLossChartSection			is Numeric 1
			derive value from DerivedTranslationLossChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		TranslationLossAccountType			is a AccountType
			derive value from DerivedTranslationLossAcctType

		UnrealizedGain						is like GeneralLedgerChartAccount
		DisplayUnrealizedGain				is like GeneralLedgerChartAccount
			derive value from DerivedUnrealizedGain		
		UnrealizedGainDescription			is like Description
			derive value from DerivedUnrealizedGainDesc		
		UnrealizedGainChartSection			is Numeric 1
			derive value from DerivedUnrealizedGainChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		UnrealizedGainAccountType			is a AccountType
			derive value from DerivedUnrealizedGainAcctType

		UnrealizedLoss						is like GeneralLedgerChartAccount
		DisplayUnrealizedLoss				is like GeneralLedgerChartAccount
			derive value from DerivedUnrealizedLoss		
		UnrealizedLossDescription			is like Description
			derive value from DerivedUnrealizedLossDesc		
		UnrealizedLossChartSection			is Numeric 1
			derive value from DerivedUnrealizedLossChart		
			States
				BalanceSheet    	value is 1
				IncomeStatement 	value is 2  
		UnrealizedLossAccountType			is a AccountType
			derive value from DerivedUnrealizedLossAcctType
		SystemSubAccountDescription			is like Description
			derive value from DerivedSubAccountDescription


		FinanceEnterpriseGroupDescription is like Description
			derive value from FinanceEnterpriseGroup.Description
		Calendar 					is like GeneralLedgerCalendar
		CalendarDescription			is like Description
		CalendarType				is Numeric 2
			States
				Months				value is 1
				445        	   	    value is 2
				454                 value is 3
				544                 value is 4
				5253Week			value is 5
				4WeekPeriods		value is 6				
				Weeks				value is 7
				Days				value is 8
				Other				value is 99		
		YearEndMonth				is Numeric 2     
			States
				January				value is 1
				February			value is 2
				March				value is 3
				April				value is 4
				May					value is 5
				June				value is 6
				July				value is 7
				August				value is 8
				September			value is 9
				October				value is 10
				November			value is 11
				December			value is 12
		YearEndLastDay				is Numeric 1 
			States
				Sunday				value is 1
				Monday				value is 2
				Tuesday				value is 3
				Wednesday			value is 4
				Thursday			value is 5
				Friday				value is 6
				Saturday			value is 7
		YearEndLastDayMethod is Numeric 1
			States
				WithinYearEndMonth			value is 1
				NearestToEndOfYearEndMonth  value is 2			
		WeeksMethod			is Numeric 1
		    States
		    	ISO		   			value is 1
		    	Excel1     			value is 2
		    	Excel2     			value is 3
		    	Simple     			value is 4
		DaysHierarchy		is Numeric 1
			States
				DaysWithinYear		value is 1
				DaysWithinMonth 	value is 2
				DaysWithinWeek  	value is 3
						
		CloseConfiguration				is like GeneralLedgerCloseConfiguration
		CloseConfigurationDescription	is like Description
		PeriodsAreEndOfMonth 			is Boolean
		DefaultPeriodName	 			is Alpha 50
    		Text Variables
				MonthName
				MonthAbbreviation
				MonthNumber
				CloseYear
				EndDateYear
				NthPeriodOfYear
		StartYear				is Year
		StartDate				is Date	
		EndDate					is Date 
		RecreatingFollowingYear	is Boolean
		EndYear					is Year

		ChangeStructureOrderFrom	is a CodeBlockOrder
		ChangeStructureOrderTo		is a CodeBlockOrder
		ChangeApprovalOrderFrom		is a CodeBlockOrder
		ChangeApprovalOrderTo		is a CodeBlockOrder

	Dimensions
      
		FinanceEnterpriseGroup
			Attributes
				AccountingEntityLabel
				AccountingUnitLabel
				AccountLabel
				ProjectLabel
				FinanceDimension1Label
				FinanceDimension2Label
				FinanceDimension3Label
				FinanceDimension4Label
				FinanceDimension5Label
				FinanceDimension6Label
				FinanceDimension7Label
				FinanceDimension8Label
				FinanceDimension9Label
				FinanceDimension10Label
				ReportCurrencyOne
				ReportCurrencyTwo
				ReportCurrencyThree
				ReportCurrencyFour
				ReportCurrencyFive
				UseDEPMBudgeting
      
      	ReportingBasis
			Attributes
				FinanceEnterpriseGroup
				Description
				CalendarTopNodeCubeValue
				CalendarTopNodeYTDCubeValue
				CalendarTopNodeLTDCubeValue
				ChartAccountTopNodeCubeValue
				LedgerTopNodeCubeValue
				AccountingEntityTopNodeCubeValue
				ProjectTopNodeCubeValue
				AccountingUnitTopNodeCubeValue
				FinanceDimension1TopNodeCubeValue
				FinanceDimension2TopNodeCubeValue
				FinanceDimension3TopNodeCubeValue
				FinanceDimension4TopNodeCubeValue
				FinanceDimension5TopNodeCubeValue
				FinanceDimension6TopNodeCubeValue
				FinanceDimension7TopNodeCubeValue
				FinanceDimension8TopNodeCubeValue
				FinanceDimension9TopNodeCubeValue
				FinanceDimension10TopNodeCubeValue
				IsABudgetBasis
				AccountAnalysisString
				
	Measures
		MeasureAmt        

	Field Groups
		FieldsForCubeRefresh
			AccountingEntityLabel
			AccountingUnitLabel
			AccountLabel
			ProjectLabel
			FinanceDimension1Label
			FinanceDimension2Label
			FinanceDimension3Label
			FinanceDimension4Label
			FinanceDimension5Label
			FinanceDimension6Label
			FinanceDimension7Label
			FinanceDimension8Label
			FinanceDimension9Label
			FinanceDimension10Label
			ReportCurrencyOne
			ReportCurrencyTwo
			ReportCurrencyThree
			ReportCurrencyFour
			ReportCurrencyFive
			UseDEPMBudgeting
					
	Derived Fields
      	MeasureAmt              is a DerivedField
			type is Numeric 1
			restricted
			return blank
		DerivedEnabledForElimination is a DerivedField
			type is Boolean
			restricted
			return EnableRelatedPartyElimination
		NewLine								is a NativeField
			type is Alpha 1
			restricted
		InterfaceCompleteMessage			is a MessageField
			restricted
			"InterfaceComplete"
		InterfaceIncompleteMessage			is a MessageField
			restricted
			"InterfaceIncomplete;ErrorsFound"
		InterfaceErrorsMovedMessage			is a MessageField
			restricted
			"InterfaceIncomplete;ErrorsMovedToRunGroup"
		ConfigurationStartDate 				is a DerivedField
			type is Date
			restricted
			if (!ContextYear entered)
				return current corporate date
			return ContextYear.DerivedStartDate
		ConfigurationEndDate   				is a DerivedField
			type is Date
			restricted
			if (!ContextYear entered)
				return current corporate date			
			return ContextYear.DerivedEndDate
		AccountingEntityMessage				is a MessageField
			restricted
			"Accounting_\Entity"
		AccountingUnitMessage				is a MessageField
			restricted
			"Accounting_\Unit"
		AccountMessage						is a MessageField
			restricted
			"Account"
		ProjectMessage						is a MessageField
			restricted
			"Project"
		LedgerMessage						is a MessageField
			restricted
			"Ledger"
		BillingOverrideLevelLabel			is a DerivedField
			type is Alpha 25		
			if (BillingOverrideLevel.Account)
	    		return AccountLabel
	    	else					
			if (BillingOverrideLevel.Dimension1)	    	
				return FinanceDimension1Label
			else
			if (BillingOverrideLevel.Dimension3)	    	
				return FinanceDimension3Label
			else
			if (BillingOverrideLevel.Dimension4)	    	
				return FinanceDimension4Label
			else
			if (BillingOverrideLevel.Dimension5)	    	
				return FinanceDimension5Label
			else
			if (BillingOverrideLevel.Dimension6)
				return FinanceDimension6Label
			else
			if (BillingOverrideLevel.Dimension7)	    	
				return FinanceDimension7Label
			else
			if (BillingOverrideLevel.Dimension8)
				return FinanceDimension9Label
			else
			if (BillingOverrideLevel.Dimension9)	    	
				return FinanceDimension9Label
			else
			if (BillingOverrideLevel.Dimension10)	    	
				return FinanceDimension10Label
			else
				return blank	
		StructureValidationDimensionLabel		is a DerivedField
			type is Alpha 25		
			if (StructureValidationDimension.Dimension3)	    	
				return FinanceDimension3Label
			else
			if (StructureValidationDimension.Dimension4)	    	
				return FinanceDimension4Label
			else
			if (StructureValidationDimension.Dimension5)	    	
				return FinanceDimension5Label
			else
			if (StructureValidationDimension.Dimension6)
				return FinanceDimension6Label
			else
			if (StructureValidationDimension.Dimension7)	    	
				return FinanceDimension7Label
			else
			if (StructureValidationDimension.Dimension8)
				return FinanceDimension8Label
			else
			if (StructureValidationDimension.Dimension9)	    	
				return FinanceDimension9Label
			else
			if (StructureValidationDimension.Dimension10)	    	
				return FinanceDimension10Label
			else
			if (StructureValidationDimension.Account)	    	
				return AccountLabel
			else
				return blank
		AccountingUnitLabelExists 			is a DerivedField
			type is Boolean
			restricted
			if (AccountingUnitLabel entered)
				return true
		ProjectLabelExists 					is a DerivedField
			type is Boolean
			restricted
			if (ProjectLabel entered)
				return true
		Dimension1LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension1Label entered)
				return true
		Dimension2LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension2Label entered)
				return true
		Dimension3LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension3Label entered)
				return true
		Dimension4LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension4Label entered)
				return true
		Dimension5LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension5Label entered)
				return true
		Dimension6LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension6Label entered)
				return true
		Dimension7LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension7Label entered)
				return true
		Dimension8LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension8Label entered)
				return true
		Dimension9LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension9Label entered)
				return true
		Dimension10LabelExists 				is a DerivedField
			type is Boolean
			restricted
			if (FinanceDimension10Label entered)
				return true
		CoreLedgerMessage				is a MessageField
			restricted
			"CORE"
		ReportCurrencyOneEntered			is a ConditionalField
			type is Boolean
			restricted
			if (ReportCurrencyOne entered)
				true
			else
				false
		ReportCurrencyTwoEntered			is a ConditionalField
			type is Boolean
			restricted
			if (ReportCurrencyTwo entered)
				true
			else
				false
		ReportCurrencyThreeEntered			is a ConditionalField
			type is Boolean
			restricted
			if (ReportCurrencyThree entered)
				true
			else
				false
		ReportCurrencyFourEntered			is a ConditionalField
			type is Boolean
			restricted
			if (ReportCurrencyFour entered)
				true
			else
				false
		ReportCurrencyFiveEntered			is a ConditionalField
			type is Boolean
			restricted
			if (ReportCurrencyFive entered)
				true
			else
				false
		RequiredMessage is a DerivedField
			type is Boolean
			return true

      	HideMenuItem    is a DerivedField
			type is Boolean
			return true
			

		DerivedRetainedEarnings				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.RetainedEarnings
			if (SystemSubAccount entered
			and SystemAccountsRel exists)
				return SystemAccountsRel.Account + "-" + SystemSubAccount
			else
				return SystemAccountsRel.Account 
		DerivedRetainedEarningsDesc				 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.RetainedEarnings
			return SystemAccountsRel.AccountDescription 
		DerivedRetainedEarningsChart			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.RetainedEarnings
			return SystemAccountsRel.ChartSection
		DerivedRetainedEarningsAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.RetainedEarnings
			return SystemAccountsRel.AccountType

		DerivedUndistributedRetainedEarnings 	is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.UndistributedRetainedEarnings
			if (SystemSubAccount entered
			and SystemAccountsRel exists)
				return SystemAccountsRel.Account + "-" + SystemSubAccount
			else
				return SystemAccountsRel.Account 
		DerivedUndistributedRetainedEarningsDesc	 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.UndistributedRetainedEarnings
			return SystemAccountsRel.AccountDescription 
		DerivedUndistributedRetainedEarningsChart	 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.UndistributedRetainedEarnings
			return SystemAccountsRel.ChartSection 
		DerivedUndistribRetainedEarningsAcctType	is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.UndistributedRetainedEarnings
			return SystemAccountsRel.AccountType

		DerivedSummaryExpense				 is a DerivedField		
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.SummaryExpense
			if (SystemSubAccount entered
			and SystemAccountsRel exists)
				return SystemAccountsRel.Account + "-" + SystemSubAccount
			else
				return SystemAccountsRel.Account 
		DerivedSummaryExpenseDesc				 is a DerivedField	
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.SummaryExpense
			return SystemAccountsRel.AccountDescription 
		DerivedSummaryExpenseChart			is a DerivedField	
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.SummaryExpense
			return SystemAccountsRel.ChartSection
		DerivedSummaryExpenseAcctType			is a DerivedField	
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.SummaryExpense
			return SystemAccountsRel.AccountType

		DerivedSummaryRevenue				 is a DerivedField	
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.SummaryRevenue
			if (SystemSubAccount entered
			and SystemAccountsRel exists)
				return SystemAccountsRel.Account + "-" + SystemSubAccount
			else
				return SystemAccountsRel.Account 
		DerivedSummaryRevenueDesc				 is a DerivedField	
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.SummaryRevenue
			return SystemAccountsRel.AccountDescription 
		DerivedSummaryRevenueChart			is a DerivedField	
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.SummaryRevenue
			return SystemAccountsRel.ChartSection
		DerivedSummaryRevenueAcctType			is a DerivedField	
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.SummaryRevenue
			return SystemAccountsRel.AccountType

		DerivedErrorSuspense				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.ErrorSuspense
			if (SystemSubAccount entered
			and SystemAccountsRel exists)
				return SystemAccountsRel.Account + "-" + SystemSubAccount
			else
				return SystemAccountsRel.Account 
		DerivedErrorSuspenseDesc			 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.ErrorSuspense
			return SystemAccountsRel.AccountDescription 
		DerivedErrorSuspenseChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.ErrorSuspense
			return SystemAccountsRel.ChartSection 
		DerivedErrorSuspenseAcctType		is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.ErrorSuspense
			return SystemAccountsRel.AccountType

		DerivedAutoBalance				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.AutoBalance
			if (SystemSubAccount entered
			and SystemAccountsRel exists)
				return SystemAccountsRel.Account + "-" + SystemSubAccount
			else
				return SystemAccountsRel.Account 
		DerivedAutoBalanceDesc			 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.AutoBalance
			return SystemAccountsRel.AccountDescription 
		DerivedAutoBalanceChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.AutoBalance
			return SystemAccountsRel.ChartSection 
		DerivedAutoBalanceAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.AutoBalance
			return SystemAccountsRel.AccountType

		DerivedRealizedGain					 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.RealizedGain
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedRealizedGainDesc				 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.RealizedGain
				return SystemAccountsRel.AccountDescription 
		DerivedRealizedGainChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.RealizedGain
				return SystemAccountsRel.ChartSection 
		DerivedRealizedGainAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType
			else
				LocalSystemAccount		= SystemAccount.RealizedGain
				return SystemAccountsRel.AccountType

		DerivedRealizedLoss					 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.RealizedLoss
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedRealizedLossDesc				 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.RealizedLoss
				return SystemAccountsRel.AccountDescription 
		DerivedRealizedLossChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.RealizedLoss
				return SystemAccountsRel.ChartSection 
		DerivedRealizedLossAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType
			else
				LocalSystemAccount		= SystemAccount.RealizedLoss
				return SystemAccountsRel.AccountType
				
		DerivedZonePayables					 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.ZonePayables
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedZonePayablesDesc				 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.ZonePayables
				return SystemAccountsRel.AccountDescription 
		DerivedZonePayablesChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.ZonePayables
				return SystemAccountsRel.ChartSection 
		DerivedZonePayablesAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.ZonePayables
				return SystemAccountsRel.AccountType

		DerivedZoneReceivables				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.ZoneReceivables
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedZoneReceivablesDesc				 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.ZoneReceivables
				return SystemAccountsRel.AccountDescription 
		DerivedZoneReceivablesChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.ZoneReceivables
				return SystemAccountsRel.ChartSection 
		DerivedZoneReceivablesAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.ZonePayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.ZoneReceivables
				return SystemAccountsRel.AccountType

		DerivedInterEntityPayables			 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.InterEntityPayables
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedInterEntityPayablesDesc		 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.InterEntityPayables
				return SystemAccountsRel.AccountDescription 
		DerivedInterEntityPayablesChart		 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.InterEntityPayables
				return SystemAccountsRel.ChartSection 
		DerivedInterEntityPayablesAcctType	 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.InterEntityPayables
				return SystemAccountsRel.AccountType
				 
		DerivedInterEntityReceivables		 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.InterEntityReceivables
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedInterEntityReceivablesDesc	 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.InterEntityReceivables
				return SystemAccountsRel.AccountDescription 
		DerivedInterEntityReceivablesChart	 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.InterEntityReceivables
				return SystemAccountsRel.ChartSection 
		DerivedInterEntityReceivablesAcctType	is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.InterEntityPayablesAndReceivables
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.InterEntityReceivables
				return SystemAccountsRel.AccountType 

		DerivedTranslationGain				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.TranslationGain
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedTranslationGainDesc			 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.TranslationGain
				return SystemAccountsRel.AccountDescription 
		DerivedTranslationGainChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.TranslationGain
				return SystemAccountsRel.ChartSection 
		DerivedTranslationGainAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.TranslationGain
				return SystemAccountsRel.AccountType 

		DerivedTranslationLoss				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.TranslationLoss
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedTranslationLossDesc			 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.TranslationLoss
				return SystemAccountsRel.AccountDescription 
		DerivedTranslationLossChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.TranslationLoss
				return SystemAccountsRel.ChartSection 
		DerivedTranslationLossAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.TranslationGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.TranslationLoss
				return SystemAccountsRel.AccountType 

		DerivedUnrealizedGain				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedGain
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedUnrealizedGainDesc				 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedGain
				return SystemAccountsRel.AccountDescription 
		DerivedUnrealizedGainChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedGain
				return SystemAccountsRel.ChartSection 
		DerivedUnrealizedGainAcctType		is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedGain
				return SystemAccountsRel.AccountType 

		DerivedUnrealizedLoss				 is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				if (SystemSubAccount entered)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedLoss
				if (SystemSubAccount entered
				and SystemAccountsRel exists)
					return SystemAccountsRel.Account + "-" + SystemSubAccount
				else
					return SystemAccountsRel.Account 
		DerivedUnrealizedLossDesc			 is a DerivedField
			type is Alpha 60
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountDescription 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedLoss
				return SystemAccountsRel.AccountDescription 
		DerivedUnrealizedLossChart			 is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.ChartSection 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedLoss
				return SystemAccountsRel.ChartSection 
		DerivedUnrealizedLossAcctType			is a DerivedField
			type is Numeric 1
			restricted
			LocalSystemAccount		= SystemAccount.UnrealizedGainAndLoss
			if (SystemAccountsRel exists)
				return SystemAccountsRel.AccountType 
			else
				LocalSystemAccount		= SystemAccount.UnrealizedLoss
				return SystemAccountsRel.AccountType 
		DerivedSystemAccountExist			is a DerivedField
			type is Boolean
			restricted
			LocalSystemAccount					= SystemAccount.No
			if (AllSystemGeneralLedgerChartAccountRel exists)
				return true
			else
				return false
		DerivedLedgerToEntity				is a DerivedField
			type is Alpha 250
			restricted
			return "LedgerTo" + AccountingEntityLabel
		DerivedEntityToAcctUnit				is a DerivedField
			type is Alpha 250
			restricted
			return AccountingEntityLabel + "To" + AccountingUnitLabel
		BigX			is a MessageField
			restricted
			"X"

		FromYear			is a DerivedField
			type is Year
			restricted
			if (!ContextYear entered)
				return current year			
			return (ContextYear - 1)
			
		ToYear				is a DerivedField
			type is Year
			restricted
			if (!ContextYear entered)
				return current year			
			return (ContextYear + 1)

		DerivedSubAccountDescription	is a DerivedField
			type is Alpha 50
			restricted
			LocalSystemSubAccount	= SystemSubAccount
			return LocalSystemSubAccount.Description
		CubeSetupExists				is a DerivedField
			type is Boolean
			restricted
			if  (FinanceEnterpriseGroupCubeRel exists
			and  GeneralLedgerTotalCubeRel exists)
				return true
			else
				return false
		EntityAndUnitOutOfOrder		is a DerivedField
			type is Boolean
			restricted
			if (AccountingUnitOrder entered
			and AccountingEntityOrder	> AccountingUnitOrder)
				return true
			else
				return false

#ifdef module ma
        LastRunDateMatchingRateReport is a DerivedField
            type is TimeStamp
            return first MatchingRate set.update stamp				
#endif 

#ifdef module rq
		RequesterBaseURL is a DerivedField
			type is Alpha 300
			restricted
			return base url(webapp is Requester)

		RequisitionCenterURL is a DerivedField
			type is Text
			restricted
			if (actor.IsoLocale entered)
				return RequesterBaseURL + "/Requester/requisitions.html?csk.IsoLocale=" + actor.IsoLocale
			else
				return RequesterBaseURL + "/Requester/requisitions.html"

		MobileReceivingURL is a DerivedField
			type is Text
			restricted
			return RequesterBaseURL + "/Requester/page/MobileReceiving?csk.showusingxi=true&csk.hidemenubar=true"

		MobileShoppingURL is a DerivedField
			type is Text
			restricted
			return RequesterBaseURL + "/Requester/form/Requester(" + HROrganization + "," + actor.agent(Employee).Employee + ").MobileRequesterShoppingForm?action=_open&csk.showusingxi=true&csk.displayType=SMARTPHONE"

		MobileRequesterURL is a DerivedField
			type is Text
			restricted
			return RequesterBaseURL + "/Requester/form/Requester(" + HROrganization + "," + actor.agent(Employee).Employee + ").MobileRequester?action=_open&csk.showusingxi=true&csk.displayType=SMARTPHONE"
#endif

		BlankField is a DerivedField
			type is Alpha 1
			return blank

		DerivedAccountingEntitySecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "AccountingEntitySecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedCompanySecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "CompanySecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedCashCodeSecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "CashCodeSecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedAccountingUnitSecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "AccountingUnitSecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension1SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension1SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension2SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension2SecurityGroup"
			return ContextPropertyRel.ContextProperty												

		DerivedFinanceDimension3SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension3SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension4SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension4SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension5SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension5SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension6SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension6SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension7SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension7SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension8SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension8SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension9SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension9SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedFinanceDimension10SecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "FinanceDimension10SecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedProjectSecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "ProjectSecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedChartAccountSecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "ChartAccountSecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedBusinessGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "BusinessGroup"
			return ContextPropertyRel.ContextProperty

		DerivedCustomerBusinessGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "CustomerBusinessGroup"
			return ContextPropertyRel.ContextProperty
		
		DerivedVendorClassSecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "VendorClassSecurityGroup"
			return ContextPropertyRel.ContextProperty

		DerivedLedgerBasisSecurityGroupKeyField is a DerivedField
			type is like UniqueID
			LocalKeyField = "LedgerBasisSecurityGroup"
			return ContextPropertyRel.ContextProperty

		EntityLedgerRelation is a DerivedField
			type is like CodeBlockRelation
			restricted		
			return CodeBlockRelationForLedgerEntityRel.CodeBlockRelation
			
		FundReallocatedDescription is a MessageField
			restricted
			"Reallocated_For_Fund_Accounting"

		AllowPreviousADBOptions is a DerivedField
			type is Boolean
			restricted
			return config.ALLOW_PREVIOUS_ADB_OPTIONS

		AllowADBForAllDimensions is a DerivedField
			type is Boolean
			restricted
			return config.ALLOW_ADB_FOR_ALL_DIMENSIONS


		StructureRelationArraySize is a DerivedField
			type is Numeric size 19
			restricted
			if (config.structure_relation_array_size != blank)
				return config.structure_relation_array_size
			return 500

		ADBResetNotification is a MessageField
			"RunResetADBAndSetADBSelectionTo_\NoneToEnableRead-onlyCheckBox"

		RepresentativeText is a StringField
			type is Text
			default label is "FinanceEnterpriseGroup"
			FinanceEnterpriseGroup " - " FinanceEnterpriseGroup.Description

		ReportingPowerUserExists is a DerivedField
			type is Boolean
			restricted
			initialize LocalPowerUserActorRole
			for each PowerUserActorRoleRel
				LocalRole = each.ActorRole.Role
				if (PowerUserRoleSecurityClassForReportRel exists)
					LocalPowerUserActorRole = true
					end for each
						
			return LocalPowerUserActorRole

#ifdef module filecreation
		DerivedUpdateIONSchemasServiceDef is a DerivedField
			type is Alpha size 200
			restricted
			if(AnalyticsUpdateIONSchemasServiceDefRel.Value not entered)
				return "UpdateIONSchemas"
			else
				return AnalyticsUpdateIONSchemasServiceDefRel.Value
		
		DerivedDataFlowToAnalyticsFullLoadServiceDef is a DerivedField
			type is Alpha size 200
			restricted
			if(AnalyticsDataFlowToAnalyticsFullLoadServiceDefRel.Value not entered)
				return "DataFlowToAnalyticsFullLoad"
			else
				return AnalyticsDataFlowToAnalyticsFullLoadServiceDefRel.Value
		
		DerivedDataFlowToAnalyticsIncrementalLoadServiceDef is a DerivedField
			type is Alpha size 200
			restricted
			if(AnalyticsDataFlowToAnalyticsIncrementalLoadServiceDefRel.Value not entered)
				return "DataFlowToAnalyticsIncrementalLoad"
			else
				return AnalyticsDataFlowToAnalyticsIncrementalLoadServiceDefRel.Value

		DerivedDataTraceabilityServiceDef is a DerivedField
			type is Alpha size 200
			restricted
			return "DataTraceability"
			
		FSMIDMActor	is a StringField
			type is Alpha 30
			restricted
			"FSM.IDM-User"
		
		IDMUserRole is a StringField
			type is Alpha 30
			restricted
			"IDM-User"

		ApplicationAdministratorRole is a StringField
			type is Alpha 30
			restricted
			"ApplicationAdministrator_ST"
#endif
		
		3YearAgo is a DerivedField
			type is Date
			restricted
			return (current corporate date - 3 years)
			
		2YearAgo is a DerivedField
			type is Date
			restricted
			return (current corporate date - 2 years)
		
		1YearAgo is a DerivedField
			type is Date
			restricted
			return (current corporate date - 1 year)
			
		ArchivingEnabledMessage	is a MessageField
			"ArchivingEnabled"

		ArchivingDisabledMessage is a MessageField
			"ArchivingDisabled"

		DerivedApprovalOrderLabel is a DerivedField
			type is MessageField
			if (EnableResponsibilityMatrix)
				return "ApprovalOrder"
			else
				return blank

		LastApprovalOrder		 is a DerivedField
			type is like CodeBlockOrder
			restricted
			initialize LocalApprovalOrder
			if (AccountingEntityApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = AccountingEntityApprovalOrder
			if (AccountApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = AccountApprovalOrder
			if (AccountingUnitApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = AccountingUnitApprovalOrder
			if (ProjectApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = ProjectApprovalOrder
			if (FinanceDimension1ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension1ApprovalOrder
			if (FinanceDimension2ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension2ApprovalOrder
			if (FinanceDimension3ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension3ApprovalOrder
			if (FinanceDimension4ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension4ApprovalOrder
			if (FinanceDimension5ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension5ApprovalOrder
			if (FinanceDimension6ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension6ApprovalOrder
			if (FinanceDimension7ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension7ApprovalOrder
			if (FinanceDimension8ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension8ApprovalOrder
			if (FinanceDimension9ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension9ApprovalOrder
			if (FinanceDimension10ApprovalOrder > LocalApprovalOrder)
				LocalApprovalOrder = FinanceDimension10ApprovalOrder
			return LocalApprovalOrder

	Local Fields
		LocalEventDataDefination			is a GeneralLedgerEventData
		LocalSystemCodeDataDefination		is a GeneralLedgerSystemCodeData
		LocalAccountSubTypeDefinition		is an AccountSubTypeData
		LocalEventDescription				is like Description
		LocalSystemCodeDescription			is like Description
		LocalSubTypeDescription				is like Description
		LocalNoOfEvents						is Numeric 3
		LocalNoOfSystemCodes				is Numeric 3
		LocalNoOfSubTypes					is Numeric 3
		LocalArraySize						is Numeric 6
		LocalFieldSize						is Numeric 3
		LocalEventArray						is a EventArray
		LocalSubTypeArray					is an AccountSubTypeArray
		LocalEventIdx						is Numeric 3
		LocalSubTypeIdx						is Numeric 3
		LocalFromField						is Numeric 2
		LocalToField						is Numeric 2
		LocalDetailType						is Numeric 2
		LocalRowType						is Numeric 2
		LocalGeneralLedgerEvent				is a GeneralLedgerEvent
		LocalAccountType					is an AccountType
		LocalSubType						is AlphaUpper 10
		LocalYear							is Year
		LocalOrderTotal						is Numeric 3
		LocalOrderCount						is Numeric 2
		LocalOrderCheck						is a AlphaArray
		LocalSystemCodeArray				is a SystemCodeArray
		LocalCodeBlockRelation				is a CodeBlockRelation
		LocalSystemCodeIdx					is Numeric 3
		LocalGeneralLedgerSystemCode		is a GeneralLedgerSystemCode
		LocalSystemAccount 					is a SystemAccount
		LocalCloseConfiguration				is a GeneralLedgerCloseConfiguration
		LocalCloseYear						is Year
		LocalLedger							is a Ledger
		LocalAccountingEntity				is like AccountingEntity
		LocalActionCode						is an ActionCode
		LocalBODCurrentTimeStamp			is a BODCurrentTimeStamp
		LocalJournalizeGroup				is a JournalizeGroup
		LocalSystemSubAccount				is a GeneralLedgerSubAccount
		LocalAccount						is an Account
		LocalBlockRelationFromField			is a CodeBlockOrder
		LocalBlockRelationToField			is a CodeBlockOrder
		LocalOrderIdx						is a CodeBlockOrder
		LocalTempCodeBlockOrder				is a CodeBlockOrder
		StructureNotUpdated					is Boolean
		UpdateStructureRowAndDetail			is Boolean
		LocalCurrency						is a Currency
		LocalChangeEntityField				is a CodeBlockOrder
		LocalChangeAccountingUnitField		is a CodeBlockOrder
		LocalChangeAccountField				is a CodeBlockOrder
		LocalChangeProjectField				is a CodeBlockOrder
		LocalChangeDim1Field				is a CodeBlockOrder
		LocalChangeDim2Field				is a CodeBlockOrder
		LocalChangeDim3Field				is a CodeBlockOrder
		LocalChangeDim4Field				is a CodeBlockOrder
		LocalChangeDim5Field				is a CodeBlockOrder
		LocalChangeDim6Field				is a CodeBlockOrder
		LocalChangeDim7Field				is a CodeBlockOrder
		LocalChangeDim8Field				is a CodeBlockOrder
		LocalChangeDim9Field				is a CodeBlockOrder
		LocalChangeDim10Field				is a CodeBlockOrder
		LocalGeneralLedgerChartAccount		is like GeneralLedgerChartAccount
		LocalKeyField						is like KeyField
		LocalCopyFromActor					is like Actor
		LocalCopyToActor					is like Actor
		LocalCopyContextProperty			is like ContextProperty
		LocalStructureDefaultCode			is like StructureDefaultCode
		LocalStructureDefaultCodeDetail		is like StructureDefaultCodeDetail
		NewStructureDetail					is a StructureDetail view
		LocalStructureDetail				is a StructureDetail
		LocalCalendarPeriod 				is a GeneralLedgerCalendarPeriod 
		LocalFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		LocalCoreLedger						is a Ledger
		LocalApprover						is Numeric 13		
		LocalProjectCodeBlockDimension		is Numeric 2
		LocalRole							is Alpha 80
		LocalPowerUserActorRole				is Boolean
#ifdef module sharedfinance
		LocalApprovalCode					is a ApprovalCode	
#endif
		LocalBackgroundGroupAsyncId			is an AsyncActionRequest
		LocalApprovalOrderTotal				is Numeric 3
		LocalApprovalOrderCount				is Numeric 2
		LocalApprovalOrderCheck				is a AlphaArray
		LocalApprovalOrderIdx				is a CodeBlockOrder	
		LocalApprovalOrder					is a CodeBlockOrder
	Matrix Forms
		LedgerEntityCloseMatrixForm
			rows are AccountingEntityPeriodRel
			columns are CloseLedgerRel 
			cell is EntityLedgerPeriod 
				create instance 
					when (ChangePeriodStatus entered or ChangePeriodStatus changed)


		StructureDefaultValueMatrixForm
			rows are StructureDefaultCodeDetailRel
			columns are StructureDetailRel
			cell is StructureDefaultValue
				create all instances


					
		StructureRelationValueMatrixForm
			rows are StructureRowRel
			columns are StructureDetailRel
			cell is StructureRowValue

				create instance
					when (Value entered or Value changed)











	Relations
		AccountingEntityRel					is a AccountingEntity set
		AccountingUnitRel					is a AccountingUnit set
		AccountRel							is a Account set
		GeneralLedgerCalendarRel			is a GeneralLedgerCalendar set
		GLInterEntityRelationRel			is a GLInterEntityRelation set
#ifdef module po
		ContractGroupRel                    
			one-to-many relation to ContractGroup 
			Field Mapping uses symbolic key 
			Instance Selection 
				where (related.ContractGroup.BusinessGroup.FinanceEnterpriseGroup = FinanceEnterpriseGroup)
#endif







		StructureDefaultCodeDetailRel
			one-to-many relation to StructureDefaultCodeDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.StructureDefaultCode		= StructureDefaultCode
		CodeBlockRelationForLedgerEntityRel
			one-to-one relation to CodeBlockRelation
			Field Mapping uses ByFromTo
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.FromField				= 0
				related.ToField					= 1
		CodeBlockRelationDetailForLedgerEntityRel
			one-to-one relation to CodeBlockRelationDetail
			Field Mapping uses ByKeyValues
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.CodeBlockRelation					= CodeBlockRelationForLedgerEntityRel.CodeBlockRelation
				related.KeyFromValue						= LocalLedger
				related.KeyToValue							= LocalAccountingEntity
		StructureDetailRel 
			one-to-many relation to StructureDetail
			Field Mapping uses ByOrder

				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
		StructureRowRel
			one-to-many relation to StructureRow
			Field Mapping uses ByOrder

				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
		StructureRowValueRel
			one-to-many relation to StructureRowValue
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
		StructureDetailByTypeRel
			one-to-one relation to StructureDetail
			Field Mapping uses ByType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Type						= LocalDetailType
		StructureRowByTypeRel
			one-to-one relation to StructureRow
			Field Mapping uses ByType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Type						= LocalRowType						
		CodeBlockRelationDetailRel
			one-to-many relation to CodeBlockRelationDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup			
		AccountingEntityPeriodRel
			one-to-many relation to AccountingEntityPeriod
			Field Mapping uses ByEntityLedgerPeriodDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntityHierarchyRel.SubordinateAccountingEntity
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCloseYear	= ReportingBasisYear)
		AccountingEntityHierarchyRel
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= ReportingBasis.AccountingEntityTopNode
		CloseLedgerRel
			one-to-many relation to Ledger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Ledger						= LedgerHierarchyRel.SubordinateLedger
			Instance Selection
				where (!related.CloseLedger
				and    !related.IsTopNode)
		RetainedEarningsLedgerRel		
			one-to-many relation to Ledger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.RetainedEarningsLedger)
		LedgerHierarchyRel
			one-to-many relation to LedgerHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= ReportingBasis.LedgerTopNode
		GeneralLedgerEventRel
			one-to-one relation to GeneralLedgerEvent
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerEvent			= LocalGeneralLedgerEvent
		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= LocalGeneralLedgerSystemCode
		AccountSubTypeRel
			one-to-one relation to AccountSubType
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountType					= LocalAccountType
				related.AccountSubType				= LocalSubType
		GeneralLedgerEventDeleteRel
			one-to-many relation to GeneralLedgerEvent
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.SourceType.System)
		GeneralLedgerSystemCodeDeleteRel
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.RecordType.System)
		AccountSubTypeDeleteRel
			one-to-many relation to AccountSubType
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.SourceType.System)
		SystemAccountsRel
			one-to-many relation to Account
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SystemAccount			= LocalSystemAccount
		InterEntityPayablesRel
			one-to-many relation to Account
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.SystemAccount		    = SystemAccount.InterEntityPayables
		InterEntityReceivablesRel 
			one-to-many relation to Account
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.SystemAccount			= SystemAccount.InterEntityReceivables
			
		AllSystemAccountsRel
			one-to-many relation to Account
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.SystemAccount			> LocalSystemAccount)
		AllCodeBlockRelationRel
			one-to-many relation to CodeBlockRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
		AllActiveCodeBlockRelationRel
			one-to-many relation to CodeBlockRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
			Instance Selection
				where (related.Active)				
		CodeBlockRelationRel
			one-to-one relation to CodeBlockRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.CodeBlockRelation				= LocalCodeBlockRelation		
		ByFromToAllCodeBlockRelationRel
			one-to-many relation to CodeBlockRelation
			Field Mapping uses ByFromToAll
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.FromField						= LocalBlockRelationFromField



		FixEntityLedgerBlockRelationRel
			one-to-one relation to CodeBlockRelation
			Field Mapping uses ByFromToAll
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.FromField						= LocalBlockRelationFromField
				related.ToField							= LocalBlockRelationToField
		ByToFromAllCodeBlockRelationRel
			one-to-many relation to CodeBlockRelation
			Field Mapping uses ByToFromAll
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ToField 						= LocalBlockRelationFromField



		LedgerRel
			one-to-one relation to Ledger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Ledger						= CoreLedger

		GeneralLedgerChartAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup


		AllSystemGeneralLedgerChartAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.SystemAccount			> LocalSystemAccount)
		EnterpriseSummaryAccountsRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.ReportingChart		   = EnterpriseChart
			Instance Selection
				where (related.ChartType.Summary)
		JournalsToPostRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.Status					 = 1				
			Instance Selection
				where (((LocalLedger entered
				and      related.Ledger 		 = LocalLedger)
				or      !LocalLedger entered)
				and   ((LocalGeneralLedgerSystemCode entered
				and     related.System 			 = LocalGeneralLedgerSystemCode)
				or      !LocalGeneralLedgerSystemCode entered))

		ManualEncumbranceJournalRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
			Instance Selection
				where (related.JournalType 		 = 4)
		ReleasedJournalsRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.Status					 = 1				
		OtherFEGUsingHROrganizationRel
			one-to-many relation to FinanceEnterpriseGroup
			Field Mapping uses ByHROrganization
				related.HROrganization = HROrganization
			Instance Selection
				where (related.FinanceEnterpriseGroup != FinanceEnterpriseGroup)
		
		ActualsScenarioRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.CommitmentType = 0)

		CommitmentsScenarioRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.CommitmentType = 2)
								 
		EncumbrancesScenarioRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.CommitmentType = 1)								 

		EnterpriseSystemAcctUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AccountingUnitStructure = EnterpriseAUStructure
				related.AccountingEntity        = LocalAccountingEntity
		EnterpriseDefaultZoneAcctUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByDefaultZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AccountingUnitStructure = EnterpriseAUStructure
				related.AccountingEntity        = LocalAccountingEntity
		EnterpriseEntityZoneAcctUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByEntityZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AccountingUnitStructure = EnterpriseAUStructure
				related.AccountingEntity        = LocalAccountingEntity
		EnterpriseSystemDim1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension1Structure = EnterpriseDim1Structure
		EnterpriseDefaultZoneDim1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByDefaultZoneDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension1Structure = EnterpriseDim1Structure
		EnterpriseZoneDim1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByEnterpriseZoneDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension1Structure = EnterpriseDim1Structure
		EnterpriseSystemDim2Rel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension2Structure = EnterpriseDim2Structure
		EnterpriseSystemDim3Rel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension3Structure = EnterpriseDim3Structure
		EnterpriseSystemDim4Rel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension4Structure = EnterpriseDim4Structure
		EnterpriseSystemDim5Rel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension5Structure = EnterpriseDim5Structure
		EnterpriseSystemDim6Rel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension6Structure = EnterpriseDim6Structure
		EnterpriseSystemDim7Rel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension7Structure = EnterpriseDim7Structure
		EnterpriseSystemDim8Rel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension8Structure = EnterpriseDim8Structure
		EnterpriseSystemDim9Rel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup     = FinanceEnterpriseGroup
				related.FinanceDimension9Structure = EnterpriseDim9Structure
		EnterpriseSystemDim10Rel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.FinanceDimension10Structure = EnterpriseDim10Structure
		EnterpriseSystemProjectRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses BySystemProjectInStructure
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.ProjectStructure 			= EnterpriseProjectStructure
		EnterpriseAUStructureRel		is an AccountingUnitStructure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseDim1StructureRel		is a FinanceDimension1Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)		
		EnterpriseDim2StructureRel		is a FinanceDimension2Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseDim3StructureRel		is a FinanceDimension3Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseDim4StructureRel		is a FinanceDimension4Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)		
		EnterpriseDim5StructureRel		is a FinanceDimension5Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseDim6StructureRel		is a FinanceDimension6Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseDim7StructureRel		is a FinanceDimension7Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)		
		EnterpriseDim8StructureRel		is a FinanceDimension8Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseDim9StructureRel		is a FinanceDimension9Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseDim10StructureRel		is a FinanceDimension10Structure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseProjectStructureRel	is a ProjectStructure set
			Instance Selection
				where (related.IsEnterpriseStructure)
		EnterpriseSummaryProjectsRel
			one-to-many relation to Project
			Field Mapping uses ByDimensionStructure
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.DimensionStructure		= first EnterpriseProjectStructureRel.ProjectStructure
			Instance Selection
				where (related.ProjectType.Summary)
		EnterpriseSummaryFD2Rel
			one-to-many relation to FinanceDimension2
			Field Mapping uses ByDimensionStructure
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.DimensionStructure		= first EnterpriseDim2StructureRel.FinanceDimension2Structure
			Instance Selection
				where (related.DimensionType.Summary)
		DEPMDimensionMapRel
			one-to-one relation to DEPMDimensionMap
			Field Mapping uses symbolic key
				related.DEPMDimensionMap			= FinanceEnterpriseGroup
		OtherFEGUsingDEPMRel 
			one-to-many relation to FinanceEnterpriseGroup
			Field Mapping uses symbolic key
			Instance Selection
				where ((related.FinanceEnterpriseGroup != FinanceEnterpriseGroup)
				and (related.UseDEPMBudgeting))
		FinanceEnterpriseGroupExtRel		
			one-to-one relation to FinanceEnterpriseGroupExt
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroupExt	= FinanceEnterpriseGroup
		BudgetScenariosRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.CommitmentType.Budget)
		ScenariosUsingDEPMRel
			one-to-many relation to Scenario
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.IsDEPMBudget)
		BudgetTemplatesRel
			one-to-many relation to BudgetTemplate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
		ValidateCodeBlockRelationStringRel
			one-to-many relation to CodeBlockRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
			Instance Selection
				where (related.Active				
				and   !related.SystemDefinedRelations)
#ifdef module ap				
		AllPayGroupCompanyRelationshipsRel
			one-to-many relation to PayGroupCompanyRelationship
			Field Mapping uses symbolic key


		AllPayablesProcessLevelsRel
			one-to-many relation to PayablesProcessLevel
			Field Mapping uses symbolic key
		AllPayablesPayablesInvoiceImportRel
			one-to-many relation to PayablesInvoiceImport
			Field Mapping uses ByRunGroup
		AllMatchInvoiceImportRel
			one-to-many relation to MatchInvoiceImport
			Field Mapping uses ByRunGroup
		EDIInvoiceMatchInterfaceInputRel
			one-to-many relation to EDIInvoiceMatchInterfaceInput
			Field Mapping uses ByRunGroup
#endif			
		GeneralLedgerTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
			Instance Selection
				where (related.FinanceDimension1 entered)
		
		NettingGeneralLedgerTotalRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
		
		DuplicateNettingJournalRel
			one-to-many relation to GeneralLedgerJournalControl 
			Field Mapping uses ByStatus 
				related.FinanceEnterpriseGroup	 = LocalFinanceEnterpriseGroup
			Instance Selection 
				where ((related.Status			= 1
				or 		related.Status			= 2
				or 		related.Status          = 4)
				and    (related.AccountingEntity		 = LocalAccountingEntity)
				and    ((LocalCalendarPeriod entered
				and		 related.GeneralLedgerCalendarPeriod = LocalCalendarPeriod)
				or		 LocalCalendarPeriod not entered)
				and      related.InterEntityNettingJournal = true)
					
		UnpostedGeneralLedgerJournalControlRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Status			= 1
				or 	   related.Status			= 2)

		GLTransactionDetailForRunGroupRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.JournalizeGroup			= LocalJournalizeGroup





		PostInProcessJournalsRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.Status					 = 4
		FinanceEnterpriseGroupCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "FinanceEnterpriseGroup"
		GeneralLedgerTotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "GeneralLedgerTotal"
		GeneralLedgerCloseConfigurationRel	is a GeneralLedgerCloseConfiguration set
		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.PeriodType.EndDate)
		CalendarEndDatesForCloseConfigRel is a GeneralLedgerCalendarPeriod set
			Instance Selection
				where (related.PeriodType.EndDate
				and    related.Year = LocalYear)
		EnterpriseGroupRel
			one-to-one relation to EnterpriseGroup
			Field Mapping uses symbolic key
				related.EnterpriseGroup = FinanceEnterpriseGroup
		CurrencyTableRel is a CurrencyTable set



		GeneralLedgerZoneTotalRel
			one-to-many relation to GeneralLedgerZoneTotal
			Field Mapping uses ByBalanceUpdated
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.BalanceUpdated			 = 0				
		FinanceDimension1StructureRel		is a FinanceDimension1Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)		
		FinanceDimension2StructureRel		is a FinanceDimension2Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)
		FinanceDimension3StructureRel		is a FinanceDimension3Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)
		FinanceDimension4StructureRel		is a FinanceDimension4Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)		
		FinanceDimension5StructureRel		is a FinanceDimension5Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)
		FinanceDimension6StructureRel		is a FinanceDimension6Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)
		FinanceDimension7StructureRel		is a FinanceDimension7Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)		
		FinanceDimension8StructureRel		is a FinanceDimension8Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)
		FinanceDimension9StructureRel		is a FinanceDimension9Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)
		FinanceDimension10StructureRel		is a FinanceDimension10Structure set
			Instance Selection
				where (!related.UnusedDimensionStructure)
		FinanceDimension1Rel				is a FinanceDimension1 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension2Rel				is a FinanceDimension2 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension3Rel				is a FinanceDimension3 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension4Rel				is a FinanceDimension4 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension5Rel				is a FinanceDimension5 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension6Rel				is a FinanceDimension6 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension7Rel				is a FinanceDimension7 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension8Rel				is a FinanceDimension8 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension9Rel				is a FinanceDimension9 set
			Instance Selection
				where (!related.DimensionType.Node)
		FinanceDimension10Rel				is a FinanceDimension10 set
			Instance Selection
				where (!related.DimensionType.Node)
		LedgerToEntityCodeBlockRelationRel
			one-to-one relation to CodeBlockRelation
			Field Mapping uses ByFromTo
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.FromField				= 0
				related.ToField					= 1
		ActiveProjectContractRel
			one-to-many relation to ProjectContract
			Field Mapping uses ByActive
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		ProjectBillingOverrideRel
			one-to-many relation to ProjectBillingOverride
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		ProjectStructureValidationRel
			one-to-many relation to ProjectStructureValidation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		ProjectStructureValidationDimensionRel
			one-to-many relation to ProjectStructureValidation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.StructureDimension entered)
		ProjectContractAlternateChartRel
			one-to-many relation to ProjectContract
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.AlternateChart entered)
		GLTransactionDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup




		GLCommitDocumentRel
			one-to-many relation to GLCommitDocument
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
#ifdef module ad
		ADBAccountMasterRel			is a ADBAccountMaster set
		AverageDailyBalanceAccountRel		is a AverageDailyBalanceAccount set
#endif
		SingleGeneralLedgerChartAccountRel
			one-to-one relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount

	    FinanceEnterpriseGroupAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "FinanceEnterpriseGroup"
	    GeneralLedgerTotalAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "GeneralLedgerTotal"
		DEPMDimensionMapAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "DEPMDimensionMap"
		AllocationTransactionDetailAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "AllocationTransactionDetail"
	    DailyPeriodTotalAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "DailyPeriodTotal"
		GLSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "GL"
		PRSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "PR"

		POSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "PO"

		RQSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "RQ"

		APSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "AP"

		CBSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "CB"

		LegacyGltransRel
			one-to-many relation to LegacyGltrans
			Field Mapping uses Set1
			
		LegacyGltransCodeblockRel
			one-to-many relation to LegacyGltransCodeblock
			Field Mapping uses Set1
		
		LegacyActransCodeblockRel
			one-to-many relation to LegacyActransCodeblock
			Field Mapping uses Set1
		
		GeneralLedgerJournalControlRefRel
			one-to-many relation to GeneralLedgerJournalControlRef
			Field Mapping uses ByPostingDate
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup

		ContextPropertyRel
			one-to-one relation to ContextProperty
			Field Mapping uses ByKeyField
				related.KeyField = LocalKeyField
				related.DataArea = parentcontext.dataarea
				
		CopyActorContextRel
			one-to-one relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor			= LocalCopyToActor
				related.ContextProperty = LocalCopyContextProperty
				
		ActorContextForSecurityGroupsRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ContextProperty = DerivedAccountingEntitySecurityGroupKeyField
				or     related.ContextProperty = DerivedCompanySecurityGroupKeyField
				or	   related.ContextProperty = DerivedAccountingUnitSecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension1SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension2SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension3SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension4SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension5SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension6SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension7SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension8SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension9SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension10SecurityGroupKeyField
				or     related.ContextProperty = DerivedProjectSecurityGroupKeyField
				or     related.ContextProperty = DerivedChartAccountSecurityGroupKeyField
				or     related.ContextProperty = DerivedBusinessGroupKeyField
				or     related.ContextProperty = DerivedCustomerBusinessGroupKeyField
				or     related.ContextProperty = DerivedCashCodeSecurityGroupKeyField
				or     related.ContextProperty = DerivedVendorClassSecurityGroupKeyField
				or     related.ContextProperty = DerivedLedgerBasisSecurityGroupKeyField)

		ActorContextForActorAndSecurityGroupsRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor = LocalCopyFromActor
			Instance Selection
				where (related.ContextProperty = DerivedAccountingEntitySecurityGroupKeyField
				or     related.ContextProperty = DerivedCompanySecurityGroupKeyField
				or	   related.ContextProperty = DerivedAccountingUnitSecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension1SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension2SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension3SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension4SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension5SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension6SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension7SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension8SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension9SecurityGroupKeyField
				or     related.ContextProperty = DerivedFinanceDimension10SecurityGroupKeyField
				or     related.ContextProperty = DerivedProjectSecurityGroupKeyField
				or     related.ContextProperty = DerivedChartAccountSecurityGroupKeyField
				or     related.ContextProperty = DerivedBusinessGroupKeyField
				or     related.ContextProperty = DerivedCustomerBusinessGroupKeyField)

		SyntellisActorRel
			one-to-one relation to Actor
			Field Mapping uses symbolic key
				related.Actor			= "SYNTELLIS.INTEGRATION"

		SyntellisActorRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= "SYNTELLIS.INTEGRATION"
				related.ActorRole		= "FSMSyntellisInquiry_ST"

		AllStructureDefaultCodeDetailsRel
			one-to-many relation to StructureDefaultCodeDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.StructureDefaultCode.CanUpdateArray)
				
		CurrentStructureDefaultValueRel
			one-to-one relation to StructureDefaultValue
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.StructureDefaultCode		= LocalStructureDefaultCode
				related.StructureDefaultCodeDetail	= LocalStructureDefaultCodeDetail
				related.StructureDetail				= LocalStructureDetail
				
		EntityLedgerPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses ByLedgerEntity
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.Ledger						= LocalCoreLedger				
				related.AccountingEntity			= LocalAccountingEntity 
				related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = LocalCalendarPeriod
				
		ProjectCodeBlockDimensionRel
			one-to-one relation to ProjectCodeBlockDimension
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ProjectCodeBlockDimension	= LocalProjectCodeBlockDimension
#ifdef module sharedfinance		
		ApprovalCodeResourceByResourceRel
			one-to-one relation to ApprovalCodeResource 
			Field Mapping uses ByApprover
				related.FinanceEnterpriseGroup	    = LocalFinanceEnterpriseGroup
				related.ApprovalCode				= LocalApprovalCode
				related.Approver			        = LocalApprover
#endif		
		EnableXiPayablesRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "XiAP"

		ShowGlobalLedgerColumnarSearchRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "ShowGlobalLedgerColumnarSearch"

		ShowGlobalLedgerColumnarPanelsRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "ShowGlobalLedgerColumnarPanels"

		ShowProjectColumnarSearchRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "ShowProjectColumnarSearch"

		ShowGLReportDesignerRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "ShowGLReportDesigner"
				
		ShowCompanyCustomerBuildTextIndexesRel	
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "CompanyCustomerBuildTextIndexes"

		MenuVersion3Rel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "UI"
				related.ConfigurationParameter.Name				= "UIMenuVersion"

		ShowLegacyColumnarRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "ShowLegacyColumnar"

#ifdef module sharedfinance
		FinanceTeamRel
			one-to-many relation to FinanceTeam
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
#endif

#ifdef module cb
		CashCodeFundRel
			one-to-many relation to CashCodeFund
			Field Mapping uses symbolic key
				related.CashManagementGroup = FinanceEnterpriseGroup
		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
				related.CashManagementGroup = FinanceEnterpriseGroup
#endif

#ifdef module am
		AssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
		AssetItemFundRel
			one-to-many relation to AssetItemFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
		AssetImportFundRel
			one-to-many relation to AssetImportFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
		AssetItemImportFundRel
			one-to-many relation to AssetItemImportFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
		AssetItemAdjustmentFundRel
			one-to-many relation to AssetItemAdjustmentFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
		AssetInterfaceFundRel
			one-to-many relation to AssetInterfaceFund
			Field Mapping uses symbolic key
		AssetCompaniesRel
			one-to-many relation to AssetCompany
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Company.AccountingEntity.FinanceEnterpriseGroup = FinanceEnterpriseGroup)
		AssetFundControlRel
			one-to-one relation to AssetFundControl
			Field Mapping uses symbolic key
				related.AssetFundControl 		= FinanceEnterpriseGroup	
#endif

#ifdef module ar
		FSMColumnarARSTRel
		    one-to-one relation to ReplicationSet
		    Field Mapping uses symbolic key
		        related.ReplicationSet = "FSM_COLUMNAR_AR_ST"
#endif

		AccountingEntityTrueRel
    		one-to-many relation to AccountingEntity
    		Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
    		Instance Selection
        		where (related.AccountingUnitZoneBalancing = true)
		AllBasisRel
			one-to-many relation to ReportingBasis
			delete cascades
    		Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup

		ReportingBasisAssignJournalRel
			one-to-many relation to ReportingBasis
    		Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
        		where (related.JournalReference = true)

#ifdef module InventoryIntelligence
		IIHGlobalConfigurationRel
			one-to-one relation to IIHGlobalConfiguration
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
#endif
		
#ifdef module cam
		CustodialActivityRel
			one-to-many relation to CustodialActivity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
#endif

#ifdef module lm
		LeaseRel
			one-to-many relation to Lease
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Company.FinanceEnterpriseGroup = FinanceEnterpriseGroup)

		LeaseImpairmentRel
			one-to-many relation to LeaseImpairment
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Company.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				and    related.Status.Released)
#endif
		PowerUserActorRoleRel
			one-to-many relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor				= actor

		PowerUserRoleSecurityClassForReportRel
			one-to-one relation to RoleSecurityClass
			Field Mapping uses symbolic key
				related.Role				= LocalRole
				related.DataArea			= parentcontext.dataarea
				related.SecurityClass		= "GLReportSetupProcessing_ST"

#ifdef module idm
		IDMConfigurationRel
			one-to-one relation to IDMConfiguration
			Field Mapping uses symbolic key
				related.IDMConfiguration = FinanceEnterpriseGroup
	
		FSMIDMUserRel
			one-to-one relation to Actor
			Field Mapping uses symbolic key
				related.Actor = FSMIDMActor
				
		FSMIDMUserIdentityActorRel
			one-to-many relation to IdentityActor
			Field Mapping uses BySvcActIdent
				related.Service = "SSOPV2"
				related.Actor   = FSMIDMActor
			Instance Selection
				where (related.Identity entered)

		IDMUserActorRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= FSMIDMActor
				related.ActorRole		= IDMUserRole

		ApplicationAdministratorActorRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor			= FSMIDMActor
				related.ActorRole		= ApplicationAdministratorRole

		CashManagementAccountDocumentRel is a CashManagementAccountDocument set
			Instance Selection
				where (related.Attachment.FSMAttachmentIDM.IDMUniqueId entered)

		FinancialInstitutionDocumentRel is a FinancialInstitutionDocument set
			Instance Selection
				where (related.Attachment.FSMAttachmentIDM.IDMUniqueId entered)

		FinancialInstitutionBranchDocumentRel is a FinancialInstitutionBranchDocument set
			Instance Selection
				where (related.Attachment.FSMAttachmentIDM.IDMUniqueId entered)

#endif

#ifdef module filecreation
		PostPfiWorkunitsRel 
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByServDefWorkunit
				related.ServiceDefinition=DerivedUpdateIONSchemasServiceDef
			
		DataFlowToAnalyticsFLRel 
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByServDefWorkunit
				related.ServiceDefinition= DerivedDataFlowToAnalyticsFullLoadServiceDef
			
		DataFlowToAnalyticsILRel 
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByServDefWorkunit
				related.ServiceDefinition=DerivedDataFlowToAnalyticsIncrementalLoadServiceDef

		DataTraceabilityWorkunitsRel 
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByServDefWorkunit
				related.ServiceDefinition=DerivedDataTraceabilityServiceDef
				
		AnalyticsUpdateIONSchemasServiceDefRel
			one-to-one relation to AnalyticsConsoleConfigurations
			Field Mapping uses symbolic key
				related.AnalyticsConsoleConfigurations = "UpdateIONSchemasServiceDef"
				
		AnalyticsDataFlowToAnalyticsIncrementalLoadServiceDefRel
			one-to-one relation to AnalyticsConsoleConfigurations
			Field Mapping uses symbolic key
				related.AnalyticsConsoleConfigurations = "DataFlowToAnalyticsIncrementalLoadServiceDef"
				
		AnalyticsDataFlowToAnalyticsFullLoadServiceDefRel
			one-to-one relation to AnalyticsConsoleConfigurations
			Field Mapping uses symbolic key
				related.AnalyticsConsoleConfigurations = "DataFlowToAnalyticsFullLoadServiceDef"

		ODSIntegrationConfigurationRel
            one-to-many relation to IntegrationConfiguration
            Field Mapping uses ByIntegration
                related.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup
                related.Integration 		   = 30 
#endif

#ifdef module ic
		FSMColumnarICSTRel
			one-to-one relation to ReplicationSet
			Field Mapping uses symbolic key
				related.ReplicationSet = "FSM_COLUMNAR_IC_ST"

		FSMColumnarICSTItemLocationRel
			one-to-many relation to RepSetBC
			Field Mapping uses ByBusinessClass
				related.ReplicationSet = "FSM_COLUMNAR_IC_ST"
				related.BusinessClass  = "ItemLocation"
		FSMColumnarICSTInventoryTransactionLineRel
			one-to-many relation to RepSetBC
			Field Mapping uses ByBusinessClass
				related.ReplicationSet = "FSM_COLUMNAR_IC_ST"
				related.BusinessClass  = "InventoryTransactionLine"

		FSMPreferenceCardConfigurationRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "EnablePreferenceCard"
			Instance Selection
				where (related.ConfigurationParameter.Value 	= "true")

		FSMAHWConfigurationParameterRel
			one-to-many relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID  = "config"
                related.ConfigurationParameter.Name             = "EnableAdvancedWarehouse"
			Instance Selection
				where (related.ConfigurationParameter.Value 	= "true")
#endif

#ifdef module oe
		CustomerOrdersRel
			one-to-many relation to CustomerOrder
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Company.CustomerBusinessGroup.FinanceEnterpriseGroup = FinanceEnterpriseGroup)

#endif

		ShowMobileSupplyChainRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "mscm"
				related.ConfigurationParameter.Name				= "EnableMobileSupplyChain" 


#ifdef module rq
		RSSLPLAllocationPriorityLevelConfigurationRel
            one-to-many relation to ConfigurationParameter
            Field Mapping uses symbolic key
                related.ConfigurationParameter.ConfigurationID  = "config"
                related.ConfigurationParameter.Name             = "RSS_LPLAllocationPriorityLevel"
			Instance Selection
				where (related.ConfigurationParameter.Value = "true")
#endif

		ResponsibilityMatrixApprovalRel
			one-to-many relation to ResponsibilityMatrixApproval
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.LastOrderDimensionEntered)

		MatrixApprovalPendingRel
			one-to-many relation to ApprovalProcessor
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  			= FinanceEnterpriseGroup
            Instance Selection
				where (related.Status.PendingApproval)

 	Conditions
		IsGovCloud
			when (com.lawson.rdtech.type.FipsCryptoConstants.isFedRAMP()
			or  com.lawson.rdtech.type.FipsCryptoConstants.isFipsEnabled())
#ifdef module ar
		FSMColumnarARSTExists
			when (FSMColumnarARSTRel exists)
#endif 	
#ifdef module ic
		DaysOnHandInUse
			restricted
			when (first FSMColumnarICSTItemLocationRel exists
			and   first FSMColumnarICSTInventoryTransactionLineRel exists
			and   FSMColumnarICSTRel.LastRefreshStamp entered)
		
		FSMPreferenceCardEnabled
			restricted
			when (FSMPreferenceCardConfigurationRel exists)

		FSMAdvancedWarehouseEnabled
			restricted
			when (FSMAHWConfigurationParameterRel exists)
#endif

#ifdef module lm
		LeaseImpairmentsExists
			restricted
			when (LeaseImpairmentRel exists)
#endif

#ifdef module po
 		GHXGPOProcessing
			restricted 
			when (first ContractGroupRel.GPOUsed = 5)
		
		VizientGPOProcessing
			restricted 
			when (first ContractGroupRel.GPOUsed = 2)

		NoGPOProcessing 
			restricted 
			when (first ContractGroupRel.GPOUsed = 0)
		
		HealthTrustGPOProcessing
			restricted 
			when (first ContractGroupRel.GPOUsed = 4
			and   first ContractGroupRel.UseHealthtrustDeltaFiles = false)	
		
		HealthTrustGPODeltaProcessing
			restricted 
			when (first ContractGroupRel.GPOUsed = 4
			and   first ContractGroupRel.UseHealthtrustDeltaFiles)	

		ProcessYearEndEncumbranceForContractManagement
			restricted
			when (first ContractGroupRel.IncludeInYearEndCommitmentRollover)

		UpdateSpreadDatesForContractManagementRollover 
			restricted 
			when (first ContractGroupRel.YearEndSpreadCommitmentProcessing = 2)

		UpdateContractLineAttributesFromConsolidatedItemMaster 
			restricted 
			when (any ContractGroupRel.UseConsolidatedItemMasterForAttributeUpdate)

#endif
		TransactionsExists
 			restricted
 			when (GeneralLedgerTransaction set exists
 			or    GLTransactionDetailRel exists)
 		FEGMatchesContext
 			restricted
 			when (FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		FinanceEnterpriseGroupExists
			restricted
			when (FinanceEnterpriseGroup exists)
		EnterpriseGroupExists
			restricted
			when (EnterpriseGroupRel exists)			
		AccountingEntityExists
			restricted
			when (AccountingEntity set exists)
		ProjectEntry
			restricted
        	when (ProjectLabelExists)
		FinanceDimension1Entry
			restricted
        	when (Dimension1LabelExists)
		FinanceDimension2Entry
			restricted
        	when (Dimension2LabelExists)
		FinanceDimension3Entry
			restricted
        	when (Dimension3LabelExists)
		FinanceDimension4Entry
			restricted
        	when (Dimension4LabelExists)
		FinanceDimension5Entry
			restricted
        	when (Dimension5LabelExists)
		FinanceDimension6Entry
			restricted
        	when (Dimension6LabelExists)
		FinanceDimension7Entry
			restricted
        	when (Dimension7LabelExists)
		FinanceDimension8Entry
			restricted
        	when (Dimension8LabelExists)
		FinanceDimension9Entry
			restricted
        	when (Dimension9LabelExists)
		FinanceDimension10Entry
			restricted
        	when (Dimension10LabelExists)        	
        AccountingUnitSelected
        	restricted
        	when (AccountingUnitLabel entered)
        AccountingUnitNotSelected
        	restricted
        	when (AccountingUnitLabel not entered)
        AccountSelected
        	restricted
        	when (AccountLabel entered)
		StructureValidationDimensionEntry
			restricted
			when (StructureValidationDimension entered)
		RetainedEarningsLedgerExists	
			restricted
			when (RetainedEarningsLedgerRel exists)



        CodeBlockRelationExists
        	when (AllCodeBlockRelationRel exists)
        CodeBlockRelationDetailExists
        	restricted
        	when (CodeBlockRelationDetailRel exists)




        LabelChanged
        	restricted
        	when (AccountingEntityLabel changed
        	or    AccountingUnitLabel changed
        	or    AccountLabel changed
        	or    ProjectLabel changed
        	or    FinanceDimension1Label changed
        	or    FinanceDimension2Label changed
        	or    FinanceDimension3Label changed
        	or    FinanceDimension4Label changed
        	or    FinanceDimension5Label changed
        	or    FinanceDimension6Label changed
        	or    FinanceDimension7Label changed
        	or    FinanceDimension8Label changed
        	or    FinanceDimension9Label changed
        	or    FinanceDimension10Label changed)
        CodeBlockChanged
        	restricted
        	when (AccountingEntityOrder changed
        	or    AccountOrder changed
        	or	  ProjectOrder changed
        	or    FinanceDimension1Order changed
        	or    FinanceDimension2Order changed
        	or    FinanceDimension3Order changed
        	or    FinanceDimension4Order changed
        	or    FinanceDimension5Order changed
        	or    FinanceDimension6Order changed
        	or    FinanceDimension7Order changed
        	or    FinanceDimension8Order changed
        	or    FinanceDimension9Order changed
        	or    FinanceDimension10Order changed)
		UpdateStructure
			restricted
			when (LabelChanged
			or    CodeBlockChanged)
		GainLossAccountsEntered
			restricted
			when (TranslationGain entered
			and   TranslationLoss entered
			and   UnrealizedGain entered
			and   UnrealizedLoss entered)
		DisplayGainLossAccountsEntered
			restricted
			when (DisplayTranslationGain entered
			and   DisplayTranslationLoss entered
			and   DisplayUnrealizedGain entered
			and   DisplayUnrealizedLoss entered)
		RealGainLossAccountsEntered
			restricted
			when (RealizedGain entered
			and   RealizedLoss entered)
		DisplayRealGainLossAccountsEntered
			restricted
			when (DisplayRealizedGain entered
			and   DisplayRealizedLoss entered)
		InterZoneAccountsEntered
			restricted
			when (ZonePayables entered
			and   ZoneReceivables entered)
		DisplayInterZoneAccountsEntered
			restricted
			when (DisplayZonePayables entered
			and   DisplayZoneReceivables entered)
		ChartAndAccountExists
			restricted
			when (ReportingChart set exists
			and	  GeneralLedgerChartAccount set exists)
		DEPMDimensionMapExists
			restricted
			when (DEPMDimensionMapRel exists)
		DisplayDEPMDimensionMap
			restricted
			when (DEPMDimensionMapRel exists
			and UseDEPMBudgeting)
		SubAccountDisplayOnly
			restricted
			when (DerivedSystemAccountExist)


		JournalNeedsFix
			restricted

			when (PostInProcessJournalsRel exists)
		OtherFEGUsingDEPM
			restricted
			when (OtherFEGUsingDEPMRel exists)








		CurrencyTablesExist
			restricted
			when (CurrencyTableRel exists)
		IsProjectInvoicing
			restricted
			when (ProjectInvoicing)
		HasStructureValidationDimension 	
			restricted		
			when (StructureValidationDimension entered)
		EntityAfterUnitOrder
			restricted
			when (EntityAndUnitOutOfOrder)
		NoOrgCodesExist
			when (!GeneralLedgerOrganizationCode set exists)
		NoAccountCodesExist
			when (!GeneralLedgerAccountCode set exists)
		GLCommitDocumentExists
			when (GLCommitDocumentRel exists)
 		ADBEntityExists
 			restricted
 			when (AccountingEntityRel.AverageDailyBalance)
 		HasSecurityActorContextRecords
 			restricted
 			when (ActorContextForActorAndSecurityGroupsRel exists)
#ifdef module ad
 		ADBChartAccountExists
 			restricted
 			when (ADBAccountMasterRel exists
 			or    AverageDailyBalanceAccountRel exists)
#endif
		DisplayADBResetNotification
			restricted
			when (NewAverageDailyBalanceProcess
			and   (not (AllBalanceSheetAccounts
			and         IncludeUREInAverageDailyBalance
			and         IncludeLedgerInAverageDailyBalance)))
		AllowTurnOnAverageDailyBalance
			restricted
			when (not UseAverageDailyBalance)
 		ADBSelectionExists
 			when (!ADBSelection.None)
 		ExistingAverageDailyBalanceProcess
 			restricted
 			when (ADBSelection.Account
 			or    ADBSelection.AccountAndAccountingUnit
 			or    ADBSelection.AccountAndDimension1)
 		NewAverageDailyBalanceProcess
 			restricted
 			when (ADBSelection.AccountOnly
 			or    ADBSelection.AccountAndOneDimension
 			or    ADBSelection.AccountAndTwoDimensions
 			or    ADBSelection.AccountAndThreeDimensions)
		ConsolidatedLedgerInADB
 			restricted
			when (NewAverageDailyBalanceProcess
			and   not IncludeLedgerInAverageDailyBalance)
 		ADBAccountWithDimension
 			restricted
 			when (ADBSelection.AccountAndOneDimension
 			or    ADBSelection.AccountAndTwoDimensions
 			or    ADBSelection.AccountAndThreeDimensions)
 		ADBAccountWithTwoDimensions
 			restricted
 			when (ADBSelection.AccountAndTwoDimensions
 			or    ADBSelection.AccountAndThreeDimensions)
 		LegacyGltransExists
 			restricted
 			when (LegacyGltransRel exists)
		GLSystemTrackAndEdit
			when (!GLSystemCodeRel.EncumbranceOption.NotUsed)
		POSystemTrackAndEdit
			when (!POSystemCodeRel.EncumbranceOption.NotUsed)
		RQSystemTrackAndEdit
			when (!RQSystemCodeRel.EncumbranceOption.NotUsed)
		APSystemTrackAndEdit
			when (!APSystemCodeRel.EncumbranceOption.NotUsed)
		CBSystemTrackAndEdit
			when (!CBSystemCodeRel.EncumbranceOption.NotUsed)
		PayrollTrackAndEdit
			when (!PRSystemCodeRel.EncumbranceOption.NotUsed)
		ManualEncumbranceExists
			when (ManualEncumbranceJournalRel exists)
		JournalReferenceExists
			restricted
			when (GeneralLedgerJournalControlRefRel exists)
		ReportingBasisAssignJournal 
			restricted
			when (ReportingBasisAssignJournalRel exists)
		InvalidDimensionsExist

			when (FinanceDimensionWithInvalidSequence set exists)
		InvalidTransactionsExist

			when (GLTransactionWithInvalidDimensionCode set exists)
		StructureRelationRequired
			when (!UnitControl = 0)
#ifdef module ap
		ExpenseManagementIntegrated
			when (ExpenseManagementInterfaceConfiguration set exists)
		NewPaymentCloseConfigExists
			restricted
			when (config.RunNewPaymentClose = true)
#endif

		EnableXiPayables
			restricted
			when (EnableXiPayablesRel.Value = "true")
		ShowGlobalLedgerColumnarSearch
			restricted
			when (ShowGlobalLedgerColumnarSearchRel.Value = "true")
		ShowGlobalLedgerColumnarPanels
			restricted
			when (ShowGlobalLedgerColumnarPanelsRel.Value = "true")
		ShowProjectColumnarSearch
			restricted
			when (ShowProjectColumnarSearchRel.Value = "true")
		ShowReceivablesColumnarSearch
			restricted
			when (config.ShowReceivablesColumnarSearch = true)

		ShowGLReportDesigner
			restricted
			when (ShowGLReportDesignerRel.Value = "true")
		ShowGLReportDesignerLog
			restricted
			when (ShowGLReportDesignerRel.Value = "true")
		EnableFundDimension
			restricted
			when (FundAccounting or FrontEndSplits)
		FundDimensionExists
			restricted
			when (FundAccounting and FundDimension entered)
		AccountingUnitZoneBalancing	
			restricted
			when (!AccountingEntityTrueRel exists)
		ShowLegacyColumnar
			restricted
			when (ShowLegacyColumnarRel.Value = "true")

#ifdef module ma 
		MatchAgingExists
			when (MatchAging set exists)
		MatchAgingComplete
			when (first MatchAging set.Status.Complete)
#endif

#ifdef module InventoryIntelligence		
		IIProvisionCheck
			restricted
			when (IIHGlobalConfigurationRel exists)
#endif
		ConfiguredForElimination
			restricted
			when (DerivedEnabledForElimination)
				
		ShowCompanyCustomerBuildTextIndexesRelExists	
			restricted
			when (ShowCompanyCustomerBuildTextIndexesRel exists)
			
		MenuVersion3
			when (MenuVersion3Rel.Value = "v3"
			or   !MenuVersion3Rel exists)
			
		MenuVersion3XiPayablesEnabled
			when (MenuVersion3 and EnableXiPayables)
			
		MenuVersion3XiPayablesDisabled
			when (MenuVersion3 and !EnableXiPayables)
			
		MenuVersion2XiPayablesEnabled
			when (!MenuVersion3 and EnableXiPayables)
			
		MenuVersion2XiPayablesDisabled
			when (!MenuVersion3 and !EnableXiPayables)

#ifdef module oe
		CustomerOrdersExist
			restricted
			when (first CustomerOrdersRel exist)
#endif
		InterEntityNettingEligible
			restricted
			when (DerivedInterEntityPayables!=DerivedInterEntityReceivables)

		ShowMobileSupplyChain
			restricted
			when (ShowMobileSupplyChainRel.Value = true)


#ifdef module rq
		RSSLPLAllocationPriorityLevelEnabled
			restricted
            when (RSSLPLAllocationPriorityLevelConfigurationRel exists)
#endif

#ifdef module am
		CapitalizationUpgradeNotEnabled
			restricted
			when (CapitalizationUpgradeProgess.NotEnabled)
		
		CapitalizationUpgradeCompleted
			restricted
			when (CapitalizationUpgradeProgess.Completed)
#endif

		IsPurgeCutOffDateAfter3Years
			restricted
			when (PurgeCutOffDate > 3YearAgo)
			
		IsPurgeCutOffDateAfter2Years
			restricted
			when (PurgeCutOffDate > 2YearAgo)
			
		IsPurgeCutOffDateAfter1Year
			restricted
			when (PurgeCutOffDate > 1YearAgo)
			
		IsArchivingEnabled
			restricted
			when (archiving enabled)					
			
		ApprovalOrderChanged
        	restricted
        	when (AccountingEntityApprovalOrder changed
        	or    AccountApprovalOrder changed
			or	  AccountingUnitApprovalOrder changed
        	or	  ProjectApprovalOrder changed
        	or    FinanceDimension1ApprovalOrder changed
        	or    FinanceDimension2ApprovalOrder changed
        	or    FinanceDimension3ApprovalOrder changed
        	or    FinanceDimension4ApprovalOrder changed
        	or    FinanceDimension5ApprovalOrder changed
        	or    FinanceDimension6ApprovalOrder changed
        	or    FinanceDimension7ApprovalOrder changed
        	or    FinanceDimension8ApprovalOrder changed
        	or    FinanceDimension9ApprovalOrder changed
        	or    FinanceDimension10ApprovalOrder changed)
		
		EligibleToRemove
			restricted
			when (ChangeApprovalOrderFrom = LastApprovalOrder
			and !ChangeApprovalOrderTo entered)

	Sets
		ByHROrganization
			Sort Order
				HROrganization
				FinanceEnterpriseGroup

	Attach Rules
		if (parentcontext.name = "AccountingUnitStructure"
	    or  parentcontext.name = "AccountingUnit")
	    	constraint (AccountingUnitSelected)
	    		"AccountingUnitNotConfiguredInFinanceStructure"
	    		
		if (parentcontext.name = "ProjectStructure"
	    or  parentcontext.name = "Project")
	    	constraint (ProjectEntry)
	    		"ProjectNotConfiguredInFinanceStructure"

		if (parentcontext.name = "FinanceDimension1Structure"
	    or  parentcontext.name = "FinanceDimension1")
	    	constraint (FinanceDimension1Entry)
	    		"FinanceDimension1NotConfiguredInFinanceStructure"

		if (parentcontext.name = "FinanceDimension2Structure"
	    or  parentcontext.name = "FinanceDimension2")
	    	constraint (FinanceDimension2Entry)
	    		"FinanceDimension2NotConfiguredInFinanceStructure"

		if (parentcontext.name = "FinanceDimension3Structure"
	    or  parentcontext.name = "FinanceDimension3")
	    	constraint (FinanceDimension3Entry)
	    		"FinanceDimension3NotConfiguredInFinanceStructure"
	    		
		if (parentcontext.name = "FinanceDimension4Structure"
	    or  parentcontext.name = "FinanceDimension4")
	    	constraint (FinanceDimension4Entry)
	    		"FinanceDimension4NotConfiguredInFinanceStructure"	    		

		if (parentcontext.name = "FinanceDimension5Structure"
	    or  parentcontext.name = "FinanceDimension5")
	    	constraint (FinanceDimension5Entry)
	    		"FinanceDimension5NotConfiguredInFinanceStructure"
	    		
		if (parentcontext.name = "FinanceDimension6Structure"
	    or  parentcontext.name = "FinanceDimension6")
	    	constraint (FinanceDimension6Entry)
	    		"FinanceDimension6NotConfiguredInFinanceStructure"	
	    		
		if (parentcontext.name = "FinanceDimension7Structure"
	    or  parentcontext.name = "FinanceDimension7")
	    	constraint (FinanceDimension7Entry)
	    		"FinanceDimension7NotConfiguredInFinanceStructure"
	    		
		if (parentcontext.name = "FinanceDimension8Structure"
	    or  parentcontext.name = "FinanceDimension8")
	    	constraint (FinanceDimension8Entry)
	    		"FinanceDimension8NotConfiguredInFinanceStructure"
	    		
		if (parentcontext.name = "FinanceDimension9Structure"
	    or  parentcontext.name = "FinanceDimension9")
	    	constraint (FinanceDimension9Entry)
	    		"FinanceDimension9NotConfiguredInFinanceStructure"
	    		
		if (parentcontext.name = "FinanceDimension10Structure"
	    or  parentcontext.name = "FinanceDimension10")
	    	constraint (FinanceDimension10Entry)
	    		"FinanceDimension10NotConfiguredInFinanceStructure"	    			    			    			    		    			    			    		
	    			    			    			    				
 	Field Rules
		AccountingEntityLabel
			initial value is AccountingEntityMessage
			default to AccountingEntityMessage
		AccountingUnitLabel
			initial value is AccountingUnitMessage
			if (AccountingUnitLabel entered)
				AccountingUnitRequired = true
				constraint (AccountingUnitOrder entered)
					"AccountingUnitOrderIsRequired"
		AccountLabel
			required
			initial value is AccountMessage
			default to AccountMessage
		ProjectLabel
			initial value is ProjectMessage
			constraint (ProjectOrder entered)
				"OrderIsRequiredForProject"
		FinanceDimension1Label
			constraint (FinanceDimension1Order entered)
				"OrderIsRequiredForDimension1"
		FinanceDimension2Label
			if (ProjectInvoicing)
				default to "ProjectFunding"				
			constraint (FinanceDimension2Order entered)
				"OrderIsRequiredForDimension2"
		FinanceDimension3Label
			constraint (FinanceDimension3Order entered)
				"OrderIsRequiredForDimension3"
		FinanceDimension4Label
			constraint (FinanceDimension4Order entered)
				"OrderIsRequiredForDimension4"
		FinanceDimension5Label
			constraint (FinanceDimension5Order entered)
				"OrderIsRequiredForDimension5"
		FinanceDimension6Label
			constraint (FinanceDimension6Order entered)
				"OrderIsRequiredForDimension6"
		FinanceDimension7Label
			constraint (FinanceDimension7Order entered)
				"OrderIsRequiredForDimension7"
		FinanceDimension8Label
			constraint (FinanceDimension8Order entered)
				"OrderIsRequiredForDimension8"
		FinanceDimension9Label
			constraint (FinanceDimension9Order entered)
				"OrderIsRequiredForDimension9"
		FinanceDimension10Label
			constraint (FinanceDimension10Order entered)
				"OrderIsRequiredForDimension10"				
		AccountingEntityOrder
			initial value is 1
			default to 1
			if (AccountingEntityOrder changed
			and old AccountingEntityOrder entered)
				constraint (!CodeBlockRelationDetailExists)
					"RelationDetailExists;CannotChangeOrder"
		AccountingUnitOrder
			initial value is 3
			constraint (AccountingUnitLabel entered)
				"AccountingUnitLabelNotDefined"
			if (AccountingUnitOrder entered)
				constraint (AccountingUnitOrder > AccountingEntityOrder)
					"AccountingUnitOrderCannotBeGreaterThanAccountingEntityOrder"
			if (AccountingUnitOrder changed
			and old AccountingUnitOrder entered)
				constraint (!CodeBlockRelationDetailExists)
					"RelationDetailExists;CannotChangeOrder"
		AccountOrder
			initial value is 2
			default to 2
			if (AccountOrder changed
			and old AccountOrder entered)
				constraint (!CodeBlockRelationDetailExists)
					"RelationDetailExists;CannotChangeOrder"
		ProjectOrder
			initial value is 4
			if (ProjectOrder changed
			and old ProjectOrder entered)
				constraint (!CodeBlockRelationDetailExists)
					"RelationDetailExists;CannotChangeOrder"
		CoreLedger
			required
				"CoreLedgerIsRequired"
			initial value is CoreLedgerMessage
		UseDEPMBudgeting
			if (old UseDEPMBudgeting entered
			and UseDEPMBudgeting not entered)
				constraint (ScenariosUsingDEPMRel not exist)
					"BudgetScenariosUsing_EPMExist"
			constraint (!OtherFEGUsingDEPMRel exists)
				"EPMBudgetingAlreadySetOnFinanceEnterpriseGroup<first OtherFEGUsingDEPMRel.FinanceEnterpriseGroup>"
		DefaultDecimalsOption
			required
			default to DefaultDecimalsOption.Two
		DefaultNumberOfDecimals
			if (DefaultDecimalsOption.Zero)
				DefaultNumberOfDecimals = 0
			else
				DefaultNumberOfDecimals = DefaultDecimalsOption
		ReportCurrencyOne
			if (UseDEPMBudgeting)
				required
		ReportOne
			constraint (ReportCurrencyOne entered)
				"CurrencyCodeIsRequiredForReportCurrencyOne"
		ReportOneAutoBalanceThreshold
			constraint (ReportCurrencyOne entered)
				"CurrencyCodeIsRequiredForReportCurrencyOne"
		ReportTwo
			constraint (ReportCurrencyTwo entered)
				"CurrencyCodeIsRequiredForReportCurrencyTwo"
		ReportTwoAutoBalanceThreshold
			constraint (ReportCurrencyTwo entered)
				"CurrencyCodeIsRequiredForReportCurrencyTwo"				
		ReportThree
			constraint (ReportCurrencyThree entered)
				"CurrencyCodeIsRequiredForReportCurrencyThree"
		ReportThreeAutoBalanceThreshold
			constraint (ReportCurrencyThree entered)
				"CurrencyCodeIsRequiredForReportCurrencyThree"
		ReportFour
			constraint (ReportCurrencyFour entered)
				"CurrencyCodeIsRequiredForReportCurrencyFour"
		ReportFourAutoBalanceThreshold
			constraint (ReportCurrencyFour entered)
				"CurrencyCodeIsRequiredForReportCurrencyFour"
		ReportFive
			constraint (ReportCurrencyFive entered)
				"CurrencyCodeIsRequiredForReportCurrencyFive"
		ReportFiveAutoBalanceThreshold
			constraint (ReportCurrencyFive entered)
				"CurrencyCodeIsRequiredForReportCurrencyFive"
		AccountingUnitRequired
			initial value is true
			constraint (AccountingUnitOrder entered)
				"CannotBeRequiredWhenAccountingUnitOrderIsBlank"
			constraint (AccountingUnitLabel entered)
				"CannotBeRequiredWhenAccountingUnitLabelIsBlank"
			if (FundAccounting)
				if (FundDimension.AccountingUnit)
					required
						"AccountingUnitMustBeSetAsRequiredFor_Fund_Accounting"
		ProjectRequired
			constraint (ProjectLabel entered)
				"CannotBeRequiredWhenProjectLabelIsBlank"
		Dimension1ZoneBalancing
			constraint (FinanceDimension1Required)
				"SetRequiredFlagWhenDimension1ZoneBalancing"

			if(!FinanceEnterpriseGroup exists)
				constraint (InterZoneAccountsEntered)
					"RequiredZonePayablesAndReceivablesNotSetupFor<AccountLabel>"

			else
				constraint (DisplayInterZoneAccountsEntered)
					"RequiredZonePayablesAndReceivablesNotSetupFor<AccountLabel>"
		FinanceDimension1Required
			constraint (FinanceDimension1Label entered)
				"CannotBeRequiredWhenDimension1LabelIsBlank"
			if (FundAccounting)
				if (FundDimension.Dimension1)
					required
						"Dimension1MustBeSetAsRequiredFor_Fund_Accounting"
		FinanceDimension2Required
			constraint (FinanceDimension2Label entered)
				"CannotBeRequiredWhenDimension2LabelIsBlank"
		FinanceDimension3Required
			constraint (FinanceDimension3Label entered)
				"CannotBeRequiredWhenDimension3LabelIsBlank"
		FinanceDimension4Required
			constraint (FinanceDimension4Label entered)
				"CannotBeRequiredWhenDimension4LabelIsBlank"
		FinanceDimension5Required
			constraint (FinanceDimension5Label entered)
				"CannotBeRequiredWhenDimension5LabelIsBlank"
		RetainedEarnings
			if (AccountRegularExpression entered)
				constraint (RetainedEarnings matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"

		UndistributedRetainedEarnings
			if (AccountRegularExpression entered)
				constraint (UndistributedRetainedEarnings matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		ErrorSuspense
			if (AccountRegularExpression entered)
				constraint (ErrorSuspense matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		AutoBalance
			if (AccountRegularExpression entered)
				constraint (AutoBalance matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		RealizedGain
			if (AccountRegularExpression entered)
				constraint (RealizedGain matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		RealizedLoss
			if (AccountRegularExpression entered)
				constraint (RealizedLoss matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		ZonePayables
			if (AccountRegularExpression entered)
				constraint (ZonePayables matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		ZoneReceivables
			if (AccountRegularExpression entered)
				constraint (ZoneReceivables matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		InterEntityPayables
			if (AccountRegularExpression entered)
				constraint (InterEntityPayables matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		InterEntityReceivables
			if (AccountRegularExpression entered)
				constraint (InterEntityReceivables matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		TranslationGain
			if (AccountRegularExpression entered)
				constraint (TranslationGain matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		TranslationLoss
			if (AccountRegularExpression entered)
				constraint (TranslationLoss matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		UnrealizedGain
			if (AccountRegularExpression entered)
				constraint (UnrealizedGain matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		UnrealizedLoss
			if (AccountRegularExpression entered)
				constraint (UnrealizedLoss matches AccountRegularExpression)
					"InvalidFormatFor<AccountLabel>"
		CurrencyTranslationAndRevalue
			constraint (CurrencyTable entered
			or          TransientCurrencyTable entered)
				"CurrencyExchangeTableIsRequired"
			if(!FinanceEnterpriseGroup exists)
				constraint (GainLossAccountsEntered)
					"RequiredGainLossNotSetupFor<AccountLabel>"
			else
				constraint (DisplayGainLossAccountsEntered)
					"RequiredGainLossNotSetupFor<AccountLabel>"
		UnitControl
			if (UnitControl.AccountingUnit)
				constraint (AccountingUnitOrder entered)
					"CannotSelectAccountingUnit;ItIsNotBeingUsed"
			if (UnitControl.Dimension1)
				constraint (FinanceDimension1Order entered)
					"CannotSelectDimension1;ItIsNotBeingUsed"
		UseSubAccounts
			if (UseSubAccounts changed)
				if (!UseSubAccounts)
					constraint (!GeneralLedgerSubAccount set exists)
						"SubAccountsExist,CannotBeChanged"					
		HROrganization
			if (HROrganization entered)
				constraint (!OtherFEGUsingHROrganizationRel exists)
					"HROrganizationAlreadyAssignedTo<first OtherFEGUsingHROrganizationRel.FinanceEnterpriseGroup>"
		ProjectDateEdit
			if (ProjectLabel entered)
				required
			else
				cannot be entered
					"ProjectDateEditMustBeBlankWhenProjectIsNotSelected"
		ProjectBurdenDate
			if (ProjectIndirectBurdenCode set exists)
				required
					"ProjectBurdenDateRequiredToGenerateIndirectBurdenTransactions"
		SystemSubAccount
			if (SystemSubAccount changed)
				LocalSystemAccount					= SystemAccount.No
				constraint (!AllSystemGeneralLedgerChartAccountRel exists)
					"SystemSubAccountCannotBeChanged;NeedToDeleteAllSystemChart<AccountLabel>"
		ProjectInvoicing
			if (ProjectInvoicing)				
				constraint (ProjectLabel entered
				and    		FinanceDimension2Label entered)
					"ProjectAndDimension2AreRequiredForProjectInvoicing"
		BillingOverrideLevel
			constraint (ProjectInvoicing)
				"BillingOverrideLevelRequiresProjectInvoicing"
			if (BillingOverrideLevel changed)
				constraint (ProjectBillingOverrideRel not exists)
					"BillingOverrideRecordsExist;_LevelCannotBeChanged"
			if (BillingOverrideLevel changed
			and old BillingOverrideLevel.Account)
				constraint (ProjectContractAlternateChartRel not exists)
					"CannotChangeBillingOverrideLevel;_Alternate_ChartInUseForInvoiceSummarization<ProjectLabel>_Contract<first ProjectContractAlternateChartRel.DisplayContract>"
		StructureValidationDimension
			if (StructureValidationDimension changed
			and old StructureValidationDimension entered)
				constraint (ProjectStructureValidationDimensionRel not exists)
					"CannotChangeStructureValidationDimension;_ProjectStructureValidationRulesExist"
			if (ProjectStructureValidation)
				required
					"StructureValidationDimensionRequired;_ProjectStructureValidationHasBeenEnabled"
		ValidationDimensionRequiresProject			
			constraint (HasStructureValidationDimension)				
				"ValidationDimensionRequiresProjectOnlyValidWhenStructureValidationDimensionEntered"
		ThirdPartyInvoicePrint			
			constraint (ProjectInvoicing)
				"ThirdPartyInvoicePrintRequiresProjectInvoicing"
		AccountingUnitRegularExpression
			constraint (AccountingUnitLabel entered)
				"CannotEnterRegularExpressionFor<AccountingUnitLabel>"
		ProjectRegularExpression
			constraint (ProjectLabel entered)
				"CannotEnterRegularExpressionFor<ProjectLabel>"
		FinanceDimension1RegularExpression
			constraint (FinanceDimension1Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension1Label>"
		FinanceDimension2RegularExpression
			constraint (FinanceDimension2Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension2Label>"
		FinanceDimension3RegularExpression
			constraint (FinanceDimension3Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension3Label>"
		FinanceDimension4RegularExpression
			constraint (FinanceDimension4Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension4Label>"
		FinanceDimension5RegularExpression
			constraint (FinanceDimension5Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension5Label>"
		FinanceDimension6RegularExpression
			constraint (FinanceDimension6Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension6Label>"
		FinanceDimension7RegularExpression
			constraint (FinanceDimension7Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension7Label>"
		FinanceDimension8RegularExpression
			constraint (FinanceDimension8Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension8Label>"
		FinanceDimension9RegularExpression
			constraint (FinanceDimension9Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension9Label>"
		FinanceDimension10RegularExpression
			constraint (FinanceDimension10Label entered)
				"CannotEnterRegularExpressionFor<FinanceDimension10Label>"
		SubAccounRegularExpression
			constraint (UseSubAccounts)
				"CannotEnterRegularExpressionForSub<AccountLabel>"


		ChangeStructureOrderFrom
			constraint (ChangeStructureOrderTo entered)
				"ChangeStructureOrderToIsRequired"
		ChangeStructureOrderTo
			constraint (ChangeStructureOrderFrom entered)
				"ChangeStructureOrderFromIsRequired"
			constraint (!ChangeStructureOrderFrom = ChangeStructureOrderTo)
				"InvalidChangeStructureOrderRequest"
		ADBSelection
			if (ADBSelection.None)
				initialize AllBalanceSheetAccounts
				initialize IncludeUREInAverageDailyBalance
				initialize IncludeLedgerInAverageDailyBalance
				initialize IncludeIncomeStatementAccounts
				initialize CalculateADBOption
			if (ADBSelection.AccountAndAccountingUnit)
				constraint (AccountingUnitRequired)
					"<FinanceEnterpriseGroup.AccountingUnitLabel>IsNotARequiredField;CannotHaveAccountAndAccountingUnitForADBSelection"
			if (ADBSelection.AccountAndDimension1)
				constraint (FinanceDimension1Required)
					"<FinanceEnterpriseGroup.FinanceDimension1Label>IsNotARequiredField;CannotHaveAccountAndDimension1ForADBSelection"
			if (ADBSelection.AccountAndOneDimension
			or  ADBSelection.AccountAndTwoDimensions
			or  ADBSelection.AccountAndThreeDimensions)
				constraint (ADBDimensions.Dimension1 entered)
					"ADBDimension1IsRequired"
			if (ADBSelection.AccountAndTwoDimensions
			or  ADBSelection.AccountAndThreeDimensions)
				constraint (ADBDimensions.Dimension2 entered)
					"ADBDimension2IsRequired"
			if (ADBSelection.AccountAndThreeDimensions)
				constraint (ADBDimensions.Dimension3 entered)
					"ADBDimension3IsRequired"
#ifdef module ad
			if (ADBSelection changed)
				if (!old ADBSelection.None)
					constraint (!ADBEntityExists)
						"ADBSelectionCannotBeChanged;SetupExistsIn<FinanceEnterpriseGroup.AccountingEntityLabel>"
					constraint (!ADBChartAccountExists)
						"CannotChangeADBSelection;ADBRecordsExist"
				else
					if (not AllowPreviousADBOptions)
						constraint (not UseAverageDailyBalance)
							"ADBForAllDimensionsIsEnabled;CanOnlyUseOneADBOption."
						constraint (not ADBSelection.Account
						and         not ADBSelection.AccountAndAccountingUnit
						and         not ADBSelection.AccountAndDimension1)
							"CannotSelect<ADBSelection>;OptionIsNoLongerSupported"

		ADBDimensions
			if (ADBDimensions changed)
				constraint (!ADBChartAccountExists)
					"ADBDimensionsCannotBeChanged;SetupExistsInADBChartAccount"

		AllBalanceSheetAccounts
			if (not ADBSelection.None
			and old ADBSelection.None)
				force default to true							
			else
			if (AllBalanceSheetAccounts changed)
				constraint (not ADBChartAccountExists)
					"FieldCannotBeChanged;ADBRecordsExist"
				if (not ADBSelection.None
				and old AllBalanceSheetAccounts)
					constraint (ADBChartAccountExists)
						"ADBSelectionIsConfigured;CannotDisable"

		IncludeUREInAverageDailyBalance
			constraint (AllBalanceSheetAccounts)
				"MustUseAllBalanceSheetAccounts"
			if (not ADBSelection.None
			and old ADBSelection.None)
				force default to true							
			else
			if (IncludeUREInAverageDailyBalance changed)
				constraint (not ADBChartAccountExists)
					"FieldCannotBeChanged;ADBRecordsExist"
				if (not ADBSelection.None
				and old IncludeUREInAverageDailyBalance)
					constraint (ADBChartAccountExists)
						"ADBSelectionIsConfigured;CannotDisable"

		IncludeLedgerInAverageDailyBalance
			if (ADBSelection.Account
			or  ADBSelection.AccountAndAccountingUnit
			or  ADBSelection.AccountAndDimension1)
				constraint (not IncludeLedgerInAverageDailyBalance)
					"NotAllowedFor<ADBSelection>Option"
			else
				if (not ADBSelection.None
				and old ADBSelection.None)
					force default to true						
				else
				if (IncludeLedgerInAverageDailyBalance changed)
					constraint (not AverageDailyBalanceAccountRel exists)
						"FieldCannotBeChanged;ADBRecordsExist"
					if (not ADBSelection.None
					and old IncludeLedgerInAverageDailyBalance)
						constraint (ADBChartAccountExists)
							"ADBSelectionIsConfigured;CannotDisable"

		IncludeIncomeStatementAccounts
			if (ADBSelection.Account
			or  ADBSelection.AccountAndAccountingUnit
			or  ADBSelection.AccountAndDimension1)
				constraint (not IncludeIncomeStatementAccounts)
					"NotAllowedFor<ADBSelection>Option"
			if (IncludeIncomeStatementAccounts changed)
				constraint (not AverageDailyBalanceAccountRel exists)
					"FieldCannotBeChanged;ADBRecordsExist"

		CalculateADBOption
			if (ADBSelection.Account
			or  ADBSelection.AccountAndAccountingUnit
			or  ADBSelection.AccountAndDimension1)
				constraint (CalculateADBOption.FunctionalAmount)
					"NotAllowedFor<ADBSelection>Option"
			if (CalculateADBOption changed)
				constraint (not AverageDailyBalanceAccountRel exists)
					"FieldCannotBeChanged;ADBRecordsExist"

		ADBProcessingDate
			if (ADBSelection.Account
			or  ADBSelection.AccountAndAccountingUnit
			or  ADBSelection.AccountAndDimension1)
				constraint (not ADBProcessingDate.PostingDateAndTransactionDate)
					"NotAllowedFor<ADBSelection>Option"
		
#endif
		InterEntityDimension


			if (InterEntityDimension.Dimension1)
				constraint (Dimension1LabelExists)
		    		"FinanceDimension1NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension2)
				constraint (Dimension2LabelExists)
		    		"FinanceDimension2NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension3)
				constraint (Dimension3LabelExists)
		    		"FinanceDimension3NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension4)
				constraint (Dimension4LabelExists)
		    		"FinanceDimension4NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension5)
				constraint (Dimension5LabelExists)
		    		"FinanceDimension5NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension6)
				constraint (Dimension6LabelExists)
		    		"FinanceDimension6NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension7)
				constraint (Dimension7LabelExists)
		    		"FinanceDimension7NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension8)
				constraint (Dimension8LabelExists)
		    		"FinanceDimension8NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension9)
				constraint (Dimension9LabelExists)
		    		"FinanceDimension9NotConfiguredInFinanceStructure"
			if (InterEntityDimension.Dimension10)
				constraint (Dimension10LabelExists)
		    		"FinanceDimension10NotConfiguredInFinanceStructure"

		BODCostCenter
			if (BODTrigger)
				if (BODCostCenter.AccountingUnit)
					constraint (AccountingUnitLabel entered)
						"BOD_Cost_CenterCannotBeAccountingUnit;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension1)
					constraint (FinanceDimension1Label entered)
						"BOD_Cost_CenterCannotBe_Dimension1;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension2)
					constraint (FinanceDimension2Label entered)
						"BOD_Cost_CenterCannotBe_Dimension2;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension3)
					constraint (FinanceDimension3Label entered)
						"BOD_Cost_CenterCannotBe_Dimension3;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension4)
					constraint (FinanceDimension4Label entered)
						"BOD_Cost_CenterCannotBe_Dimension4;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension5)
					constraint (FinanceDimension5Label entered)
						"BOD_Cost_CenterCannotBe_Dimension5;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension6)
					constraint (FinanceDimension6Label entered)
						"BOD_Cost_CenterCannotBe_Dimension6;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension7)
					constraint (FinanceDimension7Label entered)
						"BOD_Cost_CenterCannotBe_Dimension7;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension8)
					constraint (FinanceDimension8Label entered)
						"BOD_Cost_CenterCannotBe_Dimension8;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension9)
					constraint (FinanceDimension9Label entered)
						"BOD_Cost_CenterCannotBe_Dimension9;_ItIsNotBeingUsed"
				if (BODCostCenter.Dimension10)
					constraint (FinanceDimension10Label entered)
						"BOD_Cost_CenterCannotBe_Dimension10;_ItIsNotBeingUsed"

		ResponsibilityMatrixSecurity
			if (ResponsibilityMatrixSecurity)
				confirmation required
					"SecurityGroupsWillBeCreatedFrom_Responsibility_Matrix.DoYouWantToContinue?"
				invoke BuildMatrixSecurity ResponsibilityMatrixResource
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup

		FundDimension
			if (FundAccounting)
				default to FundDimension.Dimension1
				if (FundDimension.AccountingUnit)
					AccountingUnitRequired		= true
				else
					FinanceDimension1Required	= true
#ifdef module cb
			if (CashCodeFundRel exists
			or  CashCodeFundEditRel exists)
				cannot be changed
					"FundDimensionCannotBeChanged.TransactionsExist."
#endif
#ifdef module am
			if (AssetFundRel exists
			or  AssetItemFundRel exists
			or  AssetImportFundRel exists
			or  AssetItemImportFundRel exists
			or  AssetItemAdjustmentFundRel exists
			or  AssetInterfaceFundRel exists)
				cannot be changed
					"FundDimensionCannotBeChanged.TransactionsExist."
			if (FundAccounting)
				if (!AssetFundControlRel exists)
					invoke FinanceEnterpriseGroupCreate AssetFundControl
						invoked.AssetFundControl 		= FinanceEnterpriseGroup
						if (FundDimension.AccountingUnit)
							invoked.AccountingUnit	 	= true
						else 
							invoked.FinanceDimension1 	= true
#endif
#ifdef module lm
		LeaseAccountingMethod			

		LeaseAccountingStandard
			if (LeaseRel exists)
				cannot be changed
					"CannotChangeLeaseAccountingStandard,LeasesExistsWithinThisFinanceEnterpriseGroup"
		ShortTermLiabilityAccounting
			if (LeaseRel exists)
				cannot be changed
					"CannotChangeShortTermLiabilityAccounting,LeasesExistsWithinThisFinanceEnterpriseGroup"

#endif

#ifdef module idm
		EnableIDMForAttachments
			initial value is true

			if (EnableIDMForAttachments changed
			or not EnableIDMForAttachments)
				constraint (EnableIDMForAttachments)
					"CannotInactivate_Use_IDM_For_Attachments"	
#endif


























	Rule Blocks			
		CurrencySetup
			if (!CurrencyTable entered)
				CurrencyTable = TransientCurrencyTable
			if (ReportOne not entered)
				initialize ReportCurrencyOne
				initialize ReportOneAutoBalanceThreshold
			if (ReportTwo not entered)
				initialize ReportCurrencyTwo
				initialize ReportTwoAutoBalanceThreshold
			if (ReportThree not entered)
				initialize ReportCurrencyThree
				initialize ReportThreeAutoBalanceThreshold
			if (ReportFour not entered)
				initialize ReportCurrencyFour
				initialize ReportFourAutoBalanceThreshold
			if (ReportTwo not entered)
				initialize ReportCurrencyFive
				initialize ReportFiveAutoBalanceThreshold
			if (ReportCurrencyOne entered
			or  ReportCurrencyTwo entered
			or  ReportCurrencyThree entered
			or  ReportCurrencyFour entered
			or  ReportCurrencyFive entered)
				constraint (CurrencyTable entered)
					"CurrencyExchangeTableIsRequired"
			if (ProjectDateEdit entered)
				constraint (ReportCurrencyOne entered)
					"<ProjectLabel>StructureRequiresReportCurrencyOne"
			if (old ReportCurrencyOne entered
			and ReportCurrencyOne	!= old ReportCurrencyOne)



				constraint (!TransactionsExists)
					"TransactionsExist;CurrencyCannotBeChanged"
			if (old ReportCurrencyTwo entered
			and ReportCurrencyTwo	!= old ReportCurrencyTwo)



				constraint (!TransactionsExists)
					"TransactionsExist;CurrencyCannotBeChanged"
			if (old ReportCurrencyThree entered
			and ReportCurrencyThree	!= old ReportCurrencyThree)



				constraint (!TransactionsExists)
					"TransactionsExist;CurrencyCannotBeChanged"
			if (old ReportCurrencyFour entered
			and ReportCurrencyFour	!= old ReportCurrencyFour)



				constraint (!TransactionsExists)
					"TransactionsExist;CurrencyCannotBeChanged"
			if (old ReportCurrencyFive entered
			and ReportCurrencyFive	!= old ReportCurrencyFive)



				constraint (!TransactionsExists)
					"TransactionsExist;CurrencyCannotBeChanged"

		CodeBlockOrderEdit


			initialize LocalOrderTotal
			initialize LocalOrderCount
			if (AccountingUnitLabel not entered)
				initialize AccountingUnitOrder
			if (ProjectLabel not entered)
				initialize ProjectOrder
			if (FinanceDimension1Label not entered)
				initialize FinanceDimension1Order
			if (FinanceDimension2Label not entered)
				initialize FinanceDimension2Order
			if (FinanceDimension3Label not entered)
				initialize FinanceDimension3Order
			if (FinanceDimension4Label not entered)
				initialize FinanceDimension4Order
			if (FinanceDimension5Label not entered)
				initialize FinanceDimension5Order
			if (FinanceDimension6Label not entered)
				initialize FinanceDimension6Order
			if (FinanceDimension7Label not entered)
				initialize FinanceDimension7Order
			if (FinanceDimension8Label not entered)
				initialize FinanceDimension8Order
			if (FinanceDimension9Label not entered)
				initialize FinanceDimension9Order
			if (FinanceDimension10Label not entered)
				initialize FinanceDimension10Order				

			if (UnitControl.AccountingUnit
			and AccountingUnitLabel not entered)
				UnitControl	= 0
				
			if (UnitControl.Dimension1
			and FinanceDimension1Label not entered)
				UnitControl	= 0

			LocalOrderTotal = AccountingEntityOrder + AccountOrder
			LocalOrderCount = 2
			if (AccountingUnitOrder entered)
				LocalOrderTotal += AccountingUnitOrder
				LocalOrderCount += 1
			if (ProjectOrder entered)
				LocalOrderTotal += ProjectOrder
				LocalOrderCount += 1
			if (FinanceDimension1Order entered)
				LocalOrderTotal += FinanceDimension1Order
				LocalOrderCount += 1
			if (FinanceDimension2Order entered)
				LocalOrderTotal += FinanceDimension2Order
				LocalOrderCount += 1
			if (FinanceDimension3Order entered)
				LocalOrderTotal += FinanceDimension3Order
				LocalOrderCount += 1
			if (FinanceDimension4Order entered)
				LocalOrderTotal += FinanceDimension4Order
				LocalOrderCount += 1
			if (FinanceDimension5Order entered)
				LocalOrderTotal += FinanceDimension5Order
				LocalOrderCount += 1
			if (FinanceDimension6Order entered)
				LocalOrderTotal += FinanceDimension6Order
				LocalOrderCount += 1
			if (FinanceDimension7Order entered)
				LocalOrderTotal += FinanceDimension7Order
				LocalOrderCount += 1
			if (FinanceDimension8Order entered)
				LocalOrderTotal += FinanceDimension8Order
				LocalOrderCount += 1
			if (FinanceDimension9Order entered)
				LocalOrderTotal += FinanceDimension9Order
				LocalOrderCount += 1
			if (FinanceDimension10Order entered)
				LocalOrderTotal += FinanceDimension10Order
				LocalOrderCount += 1				

			constraint (!LocalOrderCheck.AlphaElement[AccountingEntityOrder] = AccountingEntityOrder)
				"DuplicateOrderNumber"
			LocalOrderCheck.AlphaElement[AccountingEntityOrder] = AccountingEntityOrder
			constraint (!LocalOrderCheck.AlphaElement[AccountingUnitOrder] = AccountingUnitOrder)
				"DuplicateOrderNumber<AccountingUnitOrder>"
			LocalOrderCheck.AlphaElement[AccountingUnitOrder] = AccountingUnitOrder
			constraint (!LocalOrderCheck.AlphaElement[AccountOrder] = AccountOrder)
				"DuplicateOrderNumber<AccountOrder>"
			LocalOrderCheck.AlphaElement[AccountOrder] = AccountOrder
			if (ProjectOrder entered)
				constraint (!LocalOrderCheck.AlphaElement[ProjectOrder] = ProjectOrder)
					"DuplicateOrderNumber<ProjectOrder>"
				LocalOrderCheck.AlphaElement[ProjectOrder] = ProjectOrder
			if (FinanceDimension1Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension1Order] = FinanceDimension1Order)
					"DuplicateOrderNumber<FinanceDimension1Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension1Order] = FinanceDimension1Order
			if (FinanceDimension2Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension2Order] = FinanceDimension2Order)
					"DuplicateOrderNumber<FinanceDimension2Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension2Order] = FinanceDimension2Order
			if (FinanceDimension3Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension3Order] = FinanceDimension3Order)
					"DuplicateOrderNumber<FinanceDimension3Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension3Order] = FinanceDimension3Order
			if (FinanceDimension4Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension4Order] = FinanceDimension4Order)
					"DuplicateOrderNumber<FinanceDimension4Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension4Order] = FinanceDimension4Order
			if (FinanceDimension5Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension5Order] = FinanceDimension5Order)
					"DuplicateOrderNumber<FinanceDimension5Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension5Order] = FinanceDimension5Order
			if (FinanceDimension6Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension6Order] = FinanceDimension6Order)
					"DuplicateOrderNumber<FinanceDimension6Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension6Order] = FinanceDimension6Order
			if (FinanceDimension7Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension7Order] = FinanceDimension7Order)
					"DuplicateOrderNumber<FinanceDimension7Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension7Order] = FinanceDimension7Order
			if (FinanceDimension8Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension8Order] = FinanceDimension8Order)
					"DuplicateOrderNumber<FinanceDimension8Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension8Order] = FinanceDimension8Order
			if (FinanceDimension9Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension9Order] = FinanceDimension9Order)
					"DuplicateOrderNumber<FinanceDimension9Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension9Order] = FinanceDimension9Order
			if (FinanceDimension10Order entered)
				constraint (!LocalOrderCheck.AlphaElement[FinanceDimension10Order] = FinanceDimension10Order)
					"DuplicateOrderNumber<FinanceDimension10Order>"
				LocalOrderCheck.AlphaElement[FinanceDimension10Order] = FinanceDimension10Order
			if (LocalOrderCount  = 3)
				constraint (LocalOrderTotal = 6)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 4)
				constraint (LocalOrderTotal = 10)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 5)
				constraint (LocalOrderTotal = 15)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 6)
				constraint (LocalOrderTotal = 21)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 7)
				constraint (LocalOrderTotal = 28)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 8)
				constraint (LocalOrderTotal = 36)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 9)
				constraint (LocalOrderTotal = 45)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 10)
				constraint (LocalOrderTotal = 55)
					"IncorrectOrder,OrderNumberSkipped"
			else					
			if (LocalOrderCount  = 11)
				constraint (LocalOrderTotal = 66)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 12)
				constraint (LocalOrderTotal = 78)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 13)
				constraint (LocalOrderTotal = 91)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 14)
				constraint (LocalOrderTotal = 105)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalOrderCount  = 15)
				constraint (LocalOrderTotal = 120)
					"IncorrectOrder,OrderNumberSkipped"

			if (old FinanceDimension1Label entered
			and !FinanceDimension1Label	entered)
				constraint (!FinanceDimension1Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension1Label>"
				constraint (!FinanceDimension1StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension1Label>"

			if (old FinanceDimension2Label entered
			and !FinanceDimension2Label	entered)
				constraint (!FinanceDimension2Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension2Label>"
				constraint (!FinanceDimension2StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension2Label>"
			if (old FinanceDimension3Label entered
			and !FinanceDimension3Label	entered)
				constraint (!FinanceDimension3Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension3Label>"
				constraint (!FinanceDimension3StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension3Label>"
			if (old FinanceDimension4Label entered
			and !FinanceDimension4Label	entered)
				constraint (!FinanceDimension4Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension4Label>"
				constraint (!FinanceDimension4StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension4Label>"
			if (old FinanceDimension5Label entered
			and !FinanceDimension5Label	entered)
				constraint (!FinanceDimension5Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension5Label>"
				constraint (!FinanceDimension5StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension5Label>"
			if (old FinanceDimension6Label entered
			and !FinanceDimension6Label	entered)
				constraint (!FinanceDimension6Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension6Label>"
				constraint (!FinanceDimension6StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension6Label>"
			if (old FinanceDimension7Label entered
			and !FinanceDimension7Label	entered)
				constraint (!FinanceDimension7Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension7Label>"
				constraint (!FinanceDimension7StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension7Label>"
			if (old FinanceDimension8Label entered
			and !FinanceDimension8Label	entered)
				constraint (!FinanceDimension8Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension8Label>"
				constraint (!FinanceDimension8StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension8Label>"
			if (old FinanceDimension9Label entered
			and !FinanceDimension9Label	entered)
				constraint (!FinanceDimension9Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension9Label>"
				constraint (!FinanceDimension9StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension9Label>"
			if (old FinanceDimension10Label entered
			and !FinanceDimension10Label entered)
				constraint (!FinanceDimension10Rel exists)
					"CannotBeChanged;RecordsExistFor<old FinanceDimension10Label>"
				constraint (!FinanceDimension10StructureRel exists)
					"CannotBeChanged;StructureRecordsExistFor<old FinanceDimension10Label>"

		ChangeStructureOrder
			if (AccountingEntityOrder	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 1
			if (AccountingUnitOrder		= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 2
			if (AccountOrder			= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 3
			if (ProjectOrder			= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 4
			if (FinanceDimension1Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 6
			if (FinanceDimension2Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 7
			if (FinanceDimension3Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 8
			if (FinanceDimension4Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 9
			if (FinanceDimension5Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 10
			if (FinanceDimension6Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 11
			if (FinanceDimension7Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 12
			if (FinanceDimension8Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 13
			if (FinanceDimension9Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 14
			if (FinanceDimension10Order	= ChangeStructureOrderTo)
				LocalBlockRelationToField	= 15

			if (AccountingEntityOrder	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 1
				AccountingEntityOrder		= 99
			if (AccountingUnitOrder		= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 2
				AccountingUnitOrder			= 99
			if (AccountOrder			= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 3
				AccountOrder				= 99
			if (ProjectOrder			= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 4
				ProjectOrder				= 99
			if (FinanceDimension1Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 6
				FinanceDimension1Order	 	= 99
			if (FinanceDimension2Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 7
				FinanceDimension2Order		= 99
			if (FinanceDimension3Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 8
				FinanceDimension3Order		= 99
			if (FinanceDimension4Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 9
				FinanceDimension4Order		= 99
			if (FinanceDimension5Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 10
				FinanceDimension5Order		= 99
			if (FinanceDimension6Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 11
				FinanceDimension6Order	 	= 99
			if (FinanceDimension7Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 12
				FinanceDimension7Order		= 99
			if (FinanceDimension8Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 13
				FinanceDimension8Order		= 99
			if (FinanceDimension9Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 14
				FinanceDimension9Order		= 99
			if (FinanceDimension10Order	= ChangeStructureOrderFrom)
				LocalBlockRelationFromField	= 15
				FinanceDimension10Order		= 99

			initialize LocalChangeEntityField
			initialize LocalChangeAccountingUnitField
			initialize LocalChangeAccountField
			initialize LocalChangeProjectField
			initialize LocalChangeDim1Field
			initialize LocalChangeDim2Field
			initialize LocalChangeDim3Field
			initialize LocalChangeDim4Field
			initialize LocalChangeDim5Field
			initialize LocalChangeDim6Field
			initialize LocalChangeDim7Field
			initialize LocalChangeDim8Field
			initialize LocalChangeDim9Field
			initialize LocalChangeDim10Field
			if (ChangeStructureOrderFrom	< ChangeStructureOrderTo)
				LocalOrderIdx			= ChangeStructureOrderFrom + 1
				while (LocalOrderIdx 	<= ChangeStructureOrderTo)
					if (AccountingEntityOrder	= LocalOrderIdx)
						AccountingEntityOrder		= AccountingEntityOrder - 1
						LocalChangeEntityField		= 1
					if (AccountingUnitOrder		= LocalOrderIdx)
						AccountingUnitOrder			= AccountingUnitOrder - 1
						LocalChangeAccountingUnitField	= 2
					if (AccountOrder			= LocalOrderIdx)
						AccountOrder				= AccountOrder - 1
						LocalChangeAccountField		= 3
					if (ProjectOrder			= LocalOrderIdx)
						ProjectOrder				= ProjectOrder - 1
						LocalChangeProjectField		= 4
					if (FinanceDimension1Order	= LocalOrderIdx)
						FinanceDimension1Order	 	= FinanceDimension1Order - 1
						LocalChangeDim1Field		= 6
					if (FinanceDimension2Order	= LocalOrderIdx)
						FinanceDimension2Order		= FinanceDimension2Order - 1
						LocalChangeDim2Field		= 7
					if (FinanceDimension3Order	= LocalOrderIdx)
						FinanceDimension3Order		= FinanceDimension3Order - 1
						LocalChangeDim3Field		= 8
					if (FinanceDimension4Order	= LocalOrderIdx)
						FinanceDimension4Order		= FinanceDimension4Order - 1
						LocalChangeDim4Field		= 9
					if (FinanceDimension5Order	= LocalOrderIdx)
						FinanceDimension5Order		= FinanceDimension5Order - 1
						LocalChangeDim5Field		= 10
					if (FinanceDimension6Order	= LocalOrderIdx)
						FinanceDimension6Order	 	= FinanceDimension6Order - 1
						LocalChangeDim6Field		= 11
					if (FinanceDimension7Order	= LocalOrderIdx)
						FinanceDimension7Order		= FinanceDimension7Order - 1
						LocalChangeDim7Field		= 12
					if (FinanceDimension8Order	= LocalOrderIdx)
						FinanceDimension8Order		= FinanceDimension8Order - 1
						LocalChangeDim8Field		= 13
					if (FinanceDimension9Order	= LocalOrderIdx)
						FinanceDimension9Order		= FinanceDimension9Order - 1
						LocalChangeDim9Field		= 14
					if (FinanceDimension10Order	= LocalOrderIdx)
						FinanceDimension10Order		= FinanceDimension10Order - 1
						LocalChangeDim10Field		= 15
					LocalOrderIdx	+= 1
			else
				LocalOrderIdx			= ChangeStructureOrderFrom - 1
				while (LocalOrderIdx 	>= ChangeStructureOrderTo)
					if (AccountingEntityOrder	= LocalOrderIdx)
						AccountingEntityOrder		= AccountingEntityOrder + 1
						LocalChangeEntityField		= 1
					if (AccountingUnitOrder		= LocalOrderIdx)
						AccountingUnitOrder			= AccountingUnitOrder + 1
						LocalChangeAccountingUnitField	= 2
					if (AccountOrder			= LocalOrderIdx)
						AccountOrder				= AccountOrder + 1
						LocalChangeAccountField		= 3
					if (ProjectOrder			= LocalOrderIdx)
						ProjectOrder				= ProjectOrder + 1
						LocalChangeProjectField		= 4
					if (FinanceDimension1Order	= LocalOrderIdx)
						FinanceDimension1Order	 	= FinanceDimension1Order + 1
						LocalChangeDim1Field		= 6
					if (FinanceDimension2Order	= LocalOrderIdx)
						FinanceDimension2Order		= FinanceDimension2Order + 1
						LocalChangeDim2Field		= 7
					if (FinanceDimension3Order	= LocalOrderIdx)
						FinanceDimension3Order		= FinanceDimension3Order + 1
						LocalChangeDim3Field		= 8
					if (FinanceDimension4Order	= LocalOrderIdx)
						FinanceDimension4Order		= FinanceDimension4Order + 1
						LocalChangeDim4Field		= 9
					if (FinanceDimension5Order	= LocalOrderIdx)
						FinanceDimension5Order		= FinanceDimension5Order + 1
						LocalChangeDim5Field		= 10
					if (FinanceDimension6Order	= LocalOrderIdx)
						FinanceDimension6Order	 	= FinanceDimension6Order + 1
						LocalChangeDim6Field		= 11
					if (FinanceDimension7Order	= LocalOrderIdx)
						FinanceDimension7Order		= FinanceDimension7Order + 1
						LocalChangeDim7Field		= 12
					if (FinanceDimension8Order	= LocalOrderIdx)
						FinanceDimension8Order		= FinanceDimension8Order + 1
						LocalChangeDim8Field		= 13
					if (FinanceDimension9Order	= LocalOrderIdx)
						FinanceDimension9Order		= FinanceDimension9Order + 1
						LocalChangeDim9Field		= 14
					if (FinanceDimension10Order	= LocalOrderIdx)
						FinanceDimension10Order		= FinanceDimension10Order + 1
						LocalChangeDim10Field		= 15
					LocalOrderIdx	-= 1

			if (AccountingEntityOrder	= 99)
				AccountingEntityOrder		= ChangeStructureOrderTo
			if (AccountingUnitOrder		= 99)
				AccountingUnitOrder			= ChangeStructureOrderTo
			if (AccountOrder			= 99)
				AccountOrder				= ChangeStructureOrderTo
			if (ProjectOrder			= 99)
				ProjectOrder				= ChangeStructureOrderTo
			if (FinanceDimension1Order	= 99)
				FinanceDimension1Order	 	= ChangeStructureOrderTo
			if (FinanceDimension2Order	= 99)
				FinanceDimension2Order		= ChangeStructureOrderTo
			if (FinanceDimension3Order	= 99)
				FinanceDimension3Order		= ChangeStructureOrderTo
			if (FinanceDimension4Order	= 99)
				FinanceDimension4Order		= ChangeStructureOrderTo
			if (FinanceDimension5Order	= 99)
				FinanceDimension5Order		= ChangeStructureOrderTo
			if (FinanceDimension6Order	= 99)
				FinanceDimension6Order	 	= ChangeStructureOrderTo
			if (FinanceDimension7Order	= 99)
				FinanceDimension7Order		= ChangeStructureOrderTo
			if (FinanceDimension8Order	= 99)
				FinanceDimension8Order		= ChangeStructureOrderTo
			if (FinanceDimension9Order	= 99)
				FinanceDimension9Order		= ChangeStructureOrderTo
			if (FinanceDimension10Order	= 99)
				FinanceDimension10Order		= ChangeStructureOrderTo

 			if (ChangeStructureOrderFrom	< ChangeStructureOrderTo)
				for each ByFromToAllCodeBlockRelationRel
					if ((LocalChangeEntityField entered
					and  LocalChangeEntityField	= each.ToField)
					or	(LocalChangeAccountingUnitField entered
					and  LocalChangeAccountingUnitField	= each.ToField)
					or	(LocalChangeAccountField entered
					and  LocalChangeAccountField	= each.ToField)
					or	(LocalChangeProjectField entered
					and  LocalChangeProjectField	= each.ToField)
					or	(LocalChangeDim1Field entered
					and  LocalChangeDim1Field		= each.ToField)
					or	(LocalChangeDim2Field entered
					and  LocalChangeDim2Field		= each.ToField)
					or	(LocalChangeDim3Field entered
					and  LocalChangeDim3Field		= each.ToField)
					or	(LocalChangeDim4Field entered
					and  LocalChangeDim4Field		= each.ToField)
					or	(LocalChangeDim5Field entered
					and  LocalChangeDim5Field		= each.ToField)
					or	(LocalChangeDim6Field entered
					and  LocalChangeDim6Field		= each.ToField)
					or	(LocalChangeDim7Field entered
					and  LocalChangeDim7Field		= each.ToField)
					or	(LocalChangeDim8Field entered
					and  LocalChangeDim8Field		= each.ToField)
					or	(LocalChangeDim9Field entered
					and  LocalChangeDim9Field		= each.ToField)
					or	(LocalChangeDim10Field entered
					and  LocalChangeDim10Field		= each.ToField))
						LocalTempCodeBlockOrder		= each.FromField
						invoke SystemUpdate each
							invoked.FromField		= each.ToField
							invoked.ToField			= LocalTempCodeBlockOrder

						invoke RebuildRelationDetailOnRestructure CodeBlockRelationDetail  in background
							invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation	= each.CodeBlockRelation
			else
				for each ByToFromAllCodeBlockRelationRel
					if ((LocalChangeEntityField entered
					and  LocalChangeEntityField	= each.FromField)
					or	(LocalChangeAccountingUnitField entered
					and  LocalChangeAccountingUnitField	= each.FromField)
					or	(LocalChangeAccountField entered
					and  LocalChangeAccountField	= each.FromField)
					or	(LocalChangeProjectField entered
					and  LocalChangeProjectField	= each.FromField)
					or	(LocalChangeDim1Field entered
					and  LocalChangeDim1Field		= each.FromField)
					or	(LocalChangeDim2Field entered
					and  LocalChangeDim2Field		= each.FromField)
					or	(LocalChangeDim3Field entered
					and  LocalChangeDim3Field		= each.FromField)
					or	(LocalChangeDim4Field entered
					and  LocalChangeDim4Field		= each.FromField)
					or	(LocalChangeDim5Field entered
					and  LocalChangeDim5Field		= each.FromField)
					or	(LocalChangeDim6Field entered
					and  LocalChangeDim6Field		= each.FromField)
					or	(LocalChangeDim7Field entered
					and  LocalChangeDim7Field		= each.FromField)
					or	(LocalChangeDim8Field entered
					and  LocalChangeDim8Field		= each.FromField)
					or	(LocalChangeDim9Field entered
					and  LocalChangeDim9Field		= each.FromField)
					or	(LocalChangeDim10Field entered
					and  LocalChangeDim10Field		= each.FromField))
						LocalTempCodeBlockOrder		= each.FromField
						invoke SystemUpdate each
							invoked.FromField		= each.ToField
							invoked.ToField			= LocalTempCodeBlockOrder

						invoke RebuildRelationDetailOnRestructure CodeBlockRelationDetail in background
							invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation	= each.CodeBlockRelation

		CreateTranslationCodes
			invoke Create GeneralLedgerTranslationCode
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.GeneralLedgerTranslationCode		= "BS"
				invoked.Description							= "BalanceSheet"
				invoked.RateType							= 1
			invoke Create GeneralLedgerTranslationCode
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.GeneralLedgerTranslationCode		= "IS"
				invoked.Description							= "IncomeStatement"
				invoked.RateType							= 2
			invoke Create GeneralLedgerTranslationCode
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.GeneralLedgerTranslationCode		= "HB"
				invoked.Description							= "HistoricalBalance"
				invoked.RateType							= 3
			invoke Create GeneralLedgerTranslationCode
				invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				invoked.GeneralLedgerTranslationCode		= "RB"
				invoked.Description							= "RetainBalance"
				invoked.RateType							= 4

		CreateLedger
			if (!LedgerRel exists)
				invoke Create Ledger
					invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.Ledger							= CoreLedger
					invoked.Description						= CoreLedgerDescription
					invoked.RecordType						= 1

		CreateSystemSubAccount	
			if (SystemSubAccount entered)
				LocalSystemSubAccount			= SystemSubAccount
				if (!LocalSystemSubAccount exists)
					invoke Create GeneralLedgerSubAccount
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.GeneralLedgerSubAccount			= SystemSubAccount
						invoked.Description						= SystemSubAccountDescription
						invoked.Active							= true

		CreateSystemAccounts
			if (RetainedEarnings entered)
				LocalAccount = RetainedEarnings
				if (!LocalAccount exists)
					invoke Create Account
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.Account							= RetainedEarnings
						invoked.AccountDescription				= RetainedEarningsDescription
						invoked.ChartSection					= RetainedEarningsChartSection
						invoked.SystemAccount					= SystemAccount.RetainedEarnings
						invoked.AccountType						= RetainedEarningsAccountType
						invoked.Active							= true
						invoked.CreateMajorChartAccount			= true
			if (UndistributedRetainedEarnings entered)
				LocalAccount = UndistributedRetainedEarnings
				if (!LocalAccount exists)			
					invoke Create Account
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.Account							= UndistributedRetainedEarnings
						invoked.AccountDescription				= UndistributedRetainedEarningsDescription
						invoked.ChartSection					= UndistributedRetainedEarningsChartSection
						invoked.SystemAccount					= SystemAccount.UndistributedRetainedEarnings
						invoked.AccountType						= UndistribRetainedEarningsAccountType
						invoked.Active							= true
						invoked.CreateMajorChartAccount			= true
			if (ErrorSuspense entered)
				LocalAccount = ErrorSuspense
				if (!LocalAccount exists)			
					invoke Create Account
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.Account							= ErrorSuspense
						invoked.AccountDescription				= ErrorSuspenseDescription
						invoked.ChartSection					= ErrorSuspenseChartSection
						invoked.SystemAccount					= SystemAccount.ErrorSuspense
						invoked.AccountType						= ErrorSuspenseAccountType
						invoked.Active							= true
						invoked.CreateMajorChartAccount			= true
			if (AutoBalance entered)
				LocalAccount = AutoBalance
				if (!LocalAccount exists)			
					invoke Create Account
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.Account							= AutoBalance
						invoked.AccountDescription				= AutoBalanceDescription
						invoked.ChartSection					= AutoBalanceChartSection
						invoked.SystemAccount					= SystemAccount.AutoBalance
						invoked.AccountType						= AutoBalanceAccountType
						invoked.Active							= true
						invoked.CreateMajorChartAccount			= true
			if (RealizedGain entered)
				LocalAccount = RealizedGain
				if (!LocalAccount exists)			
					if (RealizedGain = RealizedLoss)
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= RealizedGain
							invoked.AccountDescription			= RealizedGainDescription
							invoked.ChartSection				= RealizedGainChartSection
							invoked.SystemAccount				= SystemAccount.RealizedGainAndLoss
							invoked.AccountType					= RealizedGainAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
					else
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= RealizedGain
							invoked.AccountDescription			= RealizedGainDescription
							invoked.ChartSection				= RealizedGainChartSection
							invoked.SystemAccount				= SystemAccount.RealizedGain
							invoked.AccountType					= RealizedGainAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
			if (RealizedLoss entered)
				if (RealizedGain != RealizedLoss)
					LocalAccount = RealizedLoss
					if (!LocalAccount exists)				
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= RealizedLoss
							invoked.AccountDescription			= RealizedLossDescription
							invoked.ChartSection				= RealizedLossChartSection
							invoked.SystemAccount				= SystemAccount.RealizedLoss
							invoked.AccountType					= RealizedLossAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
			if (ZonePayables entered)
				LocalAccount = ZonePayables
				if (!LocalAccount exists)			
					if (ZonePayables = ZoneReceivables)
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= ZonePayables
							invoked.AccountDescription			= ZonePayablesDescription
							invoked.ChartSection				= ZonePayablesChartSection
							invoked.SystemAccount				= SystemAccount.ZonePayablesAndReceivables
							invoked.AccountType					= ZonePayablesAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
					else
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= ZonePayables
							invoked.AccountDescription			= ZonePayablesDescription
							invoked.ChartSection				= ZonePayablesChartSection
							invoked.SystemAccount				= SystemAccount.ZonePayables
							invoked.AccountType					= ZonePayablesAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
			if (ZoneReceivables entered)
				if (ZonePayables != ZoneReceivables)
					LocalAccount = ZoneReceivables
					if (!LocalAccount exists)				
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= ZoneReceivables
							invoked.AccountDescription			= ZoneReceivablesDescription
							invoked.ChartSection				= ZoneReceivablesChartSection
							invoked.SystemAccount				= SystemAccount.ZoneReceivables
							invoked.AccountType					= ZoneReceivablesAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
			if (InterEntityPayables entered)
				LocalAccount = InterEntityPayables
				if (!LocalAccount exists)			
					if (InterEntityPayables	= InterEntityReceivables)
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= InterEntityPayables
							invoked.AccountDescription			= InterEntityPayablesDescription
							invoked.ChartSection				= InterEntityPayablesChartSection
							invoked.SystemAccount				= SystemAccount.InterEntityPayablesAndReceivables
							invoked.AccountType					= InterEntityPayablesAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
					else
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= InterEntityPayables
							invoked.AccountDescription			= InterEntityPayablesDescription
							invoked.ChartSection				= InterEntityPayablesChartSection
							invoked.SystemAccount				= SystemAccount.InterEntityPayables
							invoked.AccountType					= InterEntityPayablesAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
			if (InterEntityReceivables entered)
				if (InterEntityPayables	!= InterEntityReceivables)
					LocalAccount = InterEntityReceivables
					if (!LocalAccount exists)				
						invoke Create Account
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.Account						= InterEntityReceivables
							invoked.AccountDescription			= InterEntityReceivablesDescription
							invoked.ChartSection				= InterEntityReceivablesChartSection
							invoked.SystemAccount				= SystemAccount.InterEntityReceivables
							invoked.AccountType					= InterEntityReceivablesAccountType
							invoked.Active						= true
							invoked.CreateMajorChartAccount		= true
			if (CurrencyTranslationAndRevalue)
				if (TranslationGain entered)
					LocalAccount = TranslationGain
					if (!LocalAccount exists)				
						if (TranslationGain	= TranslationLoss)
							invoke Create Account
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Account					= TranslationGain
								invoked.AccountDescription		= TranslationGainDescription
								invoked.ChartSection			= TranslationGainChartSection
								invoked.SystemAccount			= SystemAccount.TranslationGainAndLoss
								invoked.AccountType				= TranslationGainAccountType
								invoked.Active					= true
								invoked.CreateMajorChartAccount	= true
						else
							invoke Create Account
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Account					= TranslationGain
								invoked.AccountDescription		= TranslationGainDescription
								invoked.ChartSection			= TranslationGainChartSection
								invoked.SystemAccount			= SystemAccount.TranslationGain
								invoked.AccountType				= TranslationGainAccountType
								invoked.Active					= true
								invoked.CreateMajorChartAccount	= true
				if (TranslationLoss entered)
					if (TranslationGain	!= TranslationLoss)
						LocalAccount = TranslationLoss
						if (!LocalAccount exists)					
							invoke Create Account
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Account					= TranslationLoss
								invoked.AccountDescription		= TranslationLossDescription
								invoked.ChartSection			= TranslationLossChartSection
								invoked.SystemAccount			= SystemAccount.TranslationLoss
								invoked.AccountType				= TranslationLossAccountType
								invoked.Active					= true
								invoked.CreateMajorChartAccount	= true
				if (UnrealizedGain entered)
					LocalAccount = UnrealizedGain
					if (!LocalAccount exists)				
						if (UnrealizedGain	= UnrealizedLoss)
							invoke Create Account
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Account					= UnrealizedGain
								invoked.AccountDescription		= UnrealizedGainDescription
								invoked.ChartSection			= UnrealizedGainChartSection
								invoked.SystemAccount			= SystemAccount.UnrealizedGainAndLoss
								invoked.AccountType				= UnrealizedGainAccountType
								invoked.Active					= true
								invoked.CreateMajorChartAccount	= true
						else
							invoke Create Account
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Account					= UnrealizedGain
								invoked.AccountDescription		= UnrealizedGainDescription
								invoked.ChartSection			= UnrealizedGainChartSection
								invoked.SystemAccount			= SystemAccount.UnrealizedGain
								invoked.AccountType				= UnrealizedGainAccountType
								invoked.Active					= true
								invoked.CreateMajorChartAccount	= true
				if (UnrealizedLoss entered)
					if (UnrealizedGain != UnrealizedLoss)
						LocalAccount = UnrealizedLoss
						if (!LocalAccount exists)					
							invoke Create Account
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Account					= UnrealizedLoss
								invoked.AccountDescription		= UnrealizedLossDescription
								invoked.ChartSection			= UnrealizedLossChartSection
								invoked.SystemAccount			= SystemAccount.UnrealizedLoss
								invoked.AccountType				= UnrealizedLossAccountType
								invoked.Active					= true
								invoked.CreateMajorChartAccount	= true
		UpdateSystemAccounts
			if (SystemAccountsRel exists)
				LocalGeneralLedgerChartAccount		= SystemAccountsRel.Account
				if (!SingleGeneralLedgerChartAccountRel exists)
					invoke Update SystemAccountsRel
						invoked.Active							= true
						invoked.CreateMajorChartAccount			= true
				else
					invoke Update SingleGeneralLedgerChartAccountRel
						invoked.SystemAccount					= LocalSystemAccount
				LocalSystemSubAccount				= SystemSubAccount
				if (SystemSubAccount entered)
					LocalGeneralLedgerChartAccount		= SystemAccountsRel.Account + "-" + SystemSubAccount
					if (!SingleGeneralLedgerChartAccountRel exists)
						invoke CreateChartAccount LocalSystemSubAccount
							invoked.PrmAccount			= SystemAccountsRel.Account
							invoked.LikeChartAccount	= SystemAccountsRel.Account

		ChangeSystemAccounts
			LocalSystemAccount					= SystemAccount.No
			if (AllSystemAccountsRel exists)
				LocalSystemAccount			= SystemAccount.RetainedEarnings
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.UndistributedRetainedEarnings
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.ErrorSuspense
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.TranslationGain
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.TranslationLoss
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.AutoBalance
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.IntercompanyBillingClearing
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.RealizedGain
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.RealizedLoss
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.UnrealizedGain
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.UnrealizedLoss
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.IntercompanyBillingExpenseClearing
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.ZonePayables
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.ZoneReceivables
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.InterEntityPayables
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.InterEntityReceivables
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.TranslationGainAndLoss
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.RealizedGainAndLoss
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.UnrealizedGainAndLoss
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.ZonePayablesAndReceivables
				include UpdateSystemAccounts
				LocalSystemAccount			= SystemAccount.InterEntityPayablesAndReceivables
				include UpdateSystemAccounts

		LoadPredefinedSystemData
			LocalSystemCodeArray	= LocalSystemCodeDataDefination.GeneralLedgerSystemCodeData
			LocalArraySize			= LocalSystemCodeDataDefination.GeneralLedgerSystemCodeData size
			LocalFieldSize			= (LocalSystemCodeArray.System[1].SystemCode size + LocalSystemCodeArray.System[1].Description size)
			LocalNoOfSystemCodes	= (LocalArraySize / LocalFieldSize)
			LocalSystemCodeIdx              		= 1
			while (LocalSystemCodeIdx <= LocalNoOfSystemCodes)
				LocalGeneralLedgerSystemCode	= LocalSystemCodeArray.System[LocalSystemCodeIdx].SystemCode
				LocalSystemCodeDescription		= LocalSystemCodeArray.System[LocalSystemCodeIdx].Description
				if (LocalGeneralLedgerSystemCode entered)
					if (!GeneralLedgerSystemCodeRel exists) 		
						invoke AutoCreate GeneralLedgerSystemCode
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.GeneralLedgerSystemCode		= LocalGeneralLedgerSystemCode
							invoked.Description					= LocalSystemCodeDescription
		 					invoked.UsedByATransaction			= true
					else
						invoke Update GeneralLedgerSystemCodeRel
							invoked.Description					= LocalSystemCodeDescription
							invoked.RecordType					= 1
		 					invoked.UsedByATransaction			= true
				LocalSystemCodeIdx += 1
				
		LoadPredefinedEventsData
			LocalEventArray 		= LocalEventDataDefination.EventData
			LocalArraySize			= LocalEventDataDefination.EventData size
			LocalFieldSize			= (LocalEventArray.Event[1].EventCode size + LocalEventArray.Event[1].Description size)
			LocalNoOfEvents			= (LocalArraySize / LocalFieldSize)
			LocalEventIdx           = 1
			while (LocalEventIdx	<= LocalNoOfEvents)
				LocalGeneralLedgerSystemCode	= LocalEventArray.Event[LocalEventIdx].System
				LocalGeneralLedgerEvent			= LocalEventArray.Event[LocalEventIdx].EventCode
				LocalEventDescription			= LocalEventArray.Event[LocalEventIdx].Description
				if (LocalGeneralLedgerEvent entered)
					if (!GeneralLedgerEventRel exists)
						invoke AutoCreate GeneralLedgerEvent
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.GeneralLedgerEvent			= LocalGeneralLedgerEvent
							invoked.Description					= LocalEventDescription
							invoked.Active						= true
							invoked.PrimarySystem				= LocalGeneralLedgerSystemCode
		 					invoked.UsedByATransaction			= true
					else
						invoke Update GeneralLedgerEventRel
							invoked.Description					= LocalEventDescription
							invoked.Active						= true
							invoked.PrimarySystem				= LocalGeneralLedgerSystemCode
							invoked.SourceType					= 1
		 					invoked.UsedByATransaction			= true
				LocalEventIdx += 1 	

		LoadPredefinedAccountSubTypeData
			LocalSubTypeArray		= LocalAccountSubTypeDefinition.SubTypeData
			LocalArraySize			= LocalAccountSubTypeDefinition.SubTypeData size
			LocalFieldSize			= (LocalSubTypeArray.AccountSubType[1].AlphaAccountType size
										+ LocalSubTypeArray.AccountSubType[1].AccountSubType size 
										+ LocalSubTypeArray.AccountSubType[1].Description size)
			LocalNoOfSubTypes		= (LocalArraySize / LocalFieldSize)
			LocalSubTypeIdx			= 1
			while (LocalSubTypeIdx <= LocalNoOfSubTypes)
				LocalAccountType			= LocalSubTypeArray.AccountSubType[LocalSubTypeIdx].AlphaAccountType
				LocalSubType				= LocalSubTypeArray.AccountSubType[LocalSubTypeIdx].AccountSubType
				LocalSubTypeDescription		= LocalSubTypeArray.AccountSubType[LocalSubTypeIdx].Description
				if (LocalSubType entered)
					if (!AccountSubTypeRel exists) 		
						invoke AutoCreate AccountSubType
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.AccountType					= LocalAccountType
							invoked.AccountSubType				= LocalSubType
							invoked.Description					= LocalSubTypeDescription
					else
						invoke Update AccountSubTypeRel
							invoked.Description					= LocalSubTypeDescription
							invoked.SourceType					= 1
				LocalSubTypeIdx += 1

		CreateStructureDetail
			LocalDetailType = 1
			if (!StructureDetailByTypeRel exists)
				invoke Create StructureDetail
					assign result to NewStructureDetail
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.StructureDetail						= AccountingEntityLabel
					invoked.Type								= 1
					invoked.SortOrder							= AccountingEntityOrder
					invoked.Label								= AccountingEntityLabel
				include CreateStructureDefaultValue
			else
				if (UpdateStructureRowAndDetail)
					invoke Update StructureDetailByTypeRel
						invoked.SortOrder						= AccountingEntityOrder
			if (AccountingUnitLabel entered)
				LocalDetailType = 2
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= AccountingUnitLabel
						invoked.Type							= 2
						invoked.SortOrder						= AccountingUnitOrder
						invoked.Label							= AccountingUnitLabel
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= AccountingUnitOrder
			LocalDetailType = 3
			if (!StructureDetailByTypeRel exists)
				invoke Create StructureDetail
					assign result to NewStructureDetail
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.StructureDetail						= AccountLabel
					invoked.Type								= 3
					invoked.SortOrder							= AccountOrder
					invoked.Label								= AccountLabel
				include CreateStructureDefaultValue
			else
				if (UpdateStructureRowAndDetail)
					invoke Update StructureDetailByTypeRel
						invoked.SortOrder						= AccountOrder
			if (ProjectLabel entered)
				LocalDetailType = 4
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= ProjectLabel
						invoked.Type							= 4
						invoked.SortOrder						= ProjectOrder
						invoked.Label							= ProjectLabel
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= ProjectOrder
			if (FinanceDimension1Label entered)
				LocalDetailType = 6
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension1Label
						invoked.Type							= 6
						invoked.SortOrder						= FinanceDimension1Order
						invoked.Label							= FinanceDimension1Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension1Order
			if (FinanceDimension2Label entered)
				LocalDetailType = 7
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension2Label
						invoked.Type							= 7
						invoked.SortOrder						= FinanceDimension2Order
						invoked.Label							= FinanceDimension2Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension2Order
			if (FinanceDimension3Label entered)
				LocalDetailType = 8
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension3Label
						invoked.Type							= 8
						invoked.SortOrder						= FinanceDimension3Order
						invoked.Label							= FinanceDimension3Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension3Order
			if (FinanceDimension4Label entered)
				LocalDetailType = 9
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension4Label
						invoked.Type							= 9
						invoked.SortOrder						= FinanceDimension4Order
						invoked.Label							= FinanceDimension4Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension4Order
			if (FinanceDimension5Label entered)
				LocalDetailType = 10
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension5Label
						invoked.Type							= 10
						invoked.SortOrder						= FinanceDimension5Order
						invoked.Label							= FinanceDimension5Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension5Order
			if (FinanceDimension6Label entered)
				LocalDetailType = 11
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension6Label
						invoked.Type							= 11
						invoked.SortOrder						= FinanceDimension6Order
						invoked.Label							= FinanceDimension6Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension6Order
			if (FinanceDimension7Label entered)
				LocalDetailType = 12
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension7Label
						invoked.Type							= 12
						invoked.SortOrder						= FinanceDimension7Order
						invoked.Label							= FinanceDimension7Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension7Order
			if (FinanceDimension8Label entered)
				LocalDetailType = 13
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension8Label
						invoked.Type							= 13
						invoked.SortOrder						= FinanceDimension8Order
						invoked.Label							= FinanceDimension8Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension8Order
			if (FinanceDimension9Label entered)
				LocalDetailType = 14
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension9Label
						invoked.Type							= 14
						invoked.SortOrder						= FinanceDimension9Order
						invoked.Label							= FinanceDimension9Label
					include CreateStructureDefaultValue
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension9Order
			if (FinanceDimension10Label entered)
				LocalDetailType = 15
				if (!StructureDetailByTypeRel exists)
					invoke Create StructureDetail
						assign result to NewStructureDetail
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureDetail					= FinanceDimension10Label
						invoked.Type							= 15
						invoked.SortOrder						= FinanceDimension10Order
						invoked.Label							= FinanceDimension10Label			
					include CreateStructureDefaultValue			
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureDetailByTypeRel
							invoked.SortOrder					= FinanceDimension10Order
		
		CreateStructureRow
			LocalRowType = 0
			if (!StructureRowByTypeRel exists)
				invoke Create StructureRow
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.StructureRow						= "Ledger"
					invoked.Type								= 0
					invoked.SortOrder							= 0
					invoked.Label								= "Ledger"
			LocalRowType = 1
			if (!StructureRowByTypeRel exists)
				invoke Create StructureRow
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.StructureRow						= AccountingEntityLabel
					invoked.Type								= 1
					invoked.SortOrder							= AccountingEntityOrder
					invoked.Label								= AccountingEntityLabel
			else
				if (UpdateStructureRowAndDetail)
					invoke Update StructureRowByTypeRel
						invoked.SortOrder						= AccountingEntityOrder
			if (AccountingUnitLabel entered)
				LocalRowType = 2
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= AccountingUnitLabel
						invoked.Type							= 2
						invoked.SortOrder						= AccountingUnitOrder
						invoked.Label							= AccountingUnitLabel
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= AccountingUnitOrder
			LocalRowType = 3
			if (!StructureRowByTypeRel exists)
				invoke Create StructureRow
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.StructureRow						= AccountLabel
					invoked.Type								= 3
					invoked.SortOrder							= AccountOrder
					invoked.Label								= AccountLabel
			else
				if (UpdateStructureRowAndDetail)
					invoke Update StructureRowByTypeRel
						invoked.SortOrder						= AccountOrder
			if (ProjectLabel entered)
				LocalRowType = 4
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= ProjectLabel
						invoked.Type							= 4
						invoked.SortOrder						= ProjectOrder
						invoked.Label							= ProjectLabel
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= ProjectOrder
			if (FinanceDimension1Label entered)
				LocalRowType = 6
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension1Label
						invoked.Type							= 6
						invoked.SortOrder						= FinanceDimension1Order
						invoked.Label							= FinanceDimension1Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension1Order
			if (FinanceDimension2Label entered)
				LocalRowType = 7
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension2Label
						invoked.Type							= 7
						invoked.SortOrder						= FinanceDimension2Order
						invoked.Label							= FinanceDimension2Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension2Order
			if (FinanceDimension3Label entered)
				LocalRowType = 8
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension3Label
						invoked.Type							= 8
						invoked.SortOrder						= FinanceDimension3Order
						invoked.Label							= FinanceDimension3Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension3Order
			if (FinanceDimension4Label entered)
				LocalRowType = 9
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension4Label
						invoked.Type							= 9
						invoked.SortOrder						= FinanceDimension4Order
						invoked.Label							= FinanceDimension4Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension4Order
			if (FinanceDimension5Label entered)
				LocalRowType = 10
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension5Label
						invoked.Type							= 10
						invoked.SortOrder						= FinanceDimension5Order
						invoked.Label							= FinanceDimension5Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension5Order
			if (FinanceDimension6Label entered)
				LocalRowType = 11
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension6Label
						invoked.Type							= 11
						invoked.SortOrder						= FinanceDimension6Order
						invoked.Label							= FinanceDimension6Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension6Order
			if (FinanceDimension7Label entered)
				LocalRowType = 12
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension7Label
						invoked.Type							= 12
						invoked.SortOrder						= FinanceDimension7Order
						invoked.Label							= FinanceDimension7Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension7Order
			if (FinanceDimension8Label entered)
				LocalRowType = 13
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension8Label
						invoked.Type							= 13
						invoked.SortOrder						= FinanceDimension8Order
						invoked.Label							= FinanceDimension8Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension8Order
			if (FinanceDimension9Label entered)
				LocalRowType = 14
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension9Label
						invoked.Type							= 14
						invoked.SortOrder						= FinanceDimension9Order
						invoked.Label							= FinanceDimension9Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension9Order
			if (FinanceDimension10Label entered)
				LocalRowType = 15
				if (!StructureRowByTypeRel exists)
					invoke Create StructureRow
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.StructureRow					= FinanceDimension10Label
						invoked.Type							= 15
						invoked.SortOrder						= FinanceDimension10Order
						invoked.Label							= FinanceDimension10Label
				else
					if (UpdateStructureRowAndDetail)
						invoke Update StructureRowByTypeRel
							invoked.SortOrder					= FinanceDimension10Order
			
		CreateCodeBlockRelationAndStructure			
			LocalRowType									= 0
			LocalDetailType									= 1
			invoke Create StructureRowValue
				invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
				invoked.StructureDetail							= StructureDetailByTypeRel.StructureDetail
				invoked.StructureRow							= StructureRowByTypeRel.StructureRow
				invoked.Value									= true
			if (AccountingUnitSelected)
				LocalRowType								= 1
				LocalDetailType								= 2
				invoke Create StructureRowValue
					invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					invoked.StructureDetail						= StructureDetailByTypeRel.StructureDetail
					invoked.StructureRow						= StructureRowByTypeRel.StructureRow
					invoked.Value								= true							
		
		UpdateScenarios
			if (!ActualsScenario entered
			or  !CommitmentsScenario entered
			or  !EncumbrancesScenario entered)
				invoke CreateCommitments Scenario
					invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				ActualsScenario 	 = first ActualsScenarioRel.Scenario
				CommitmentsScenario  = first CommitmentsScenarioRel.Scenario
				EncumbrancesScenario = first EncumbrancesScenarioRel.Scenario
				
















	
		CheckUnusedStructures
			if ((!UnusedAccountChart entered)
			or  (!UnusedAccountChart exists))
				invoke Create ReportingChart
					resume on error
					invoked.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
					invoked.ReportingChart 			 = "_UNUSED_"
					invoked.Description				 = "Unused Posting Dimensions"
					invoked.UnusedDimensionStructure = true
					invoked.Active					 = false
				UnusedAccountChart = "_UNUSED_"

				
			if (AccountingUnitLabelExists)
				if ((!UnusedAUStructure entered)
				or  (!UnusedAUStructure exists))
					invoke Create AccountingUnitStructure
						resume on error
						invoked.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
						invoked.AccountingUnitStructure  = "_UNUSED_"
						invoked.Description				 = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure = true
						invoked.Active					 = false
					UnusedAUStructure = "_UNUSED_"
			else
				initialize UnusedAUStructure


			if (ProjectLabelExists)
				if ((!UnusedProjectStructure entered)
				or  (!UnusedProjectStructure exists))
					invoke Create ProjectStructure
						resume on error
						invoked.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
						invoked.ProjectStructure  		 = "_UNUSED_"
						invoked.Description				 = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure = true
						invoked.Active					 = false
					UnusedProjectStructure = "_UNUSED_"
			else
				initialize UnusedProjectStructure

													
			if (Dimension1LabelExists)
				if ((!UnusedDim1Structure entered)
				or  (!UnusedDim1Structure exists))
					invoke Create FinanceDimension1Structure
						resume on error
						invoked.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
						invoked.FinanceDimension1Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim1Structure = "_UNUSED_"
			else
				initialize UnusedDim1Structure


			if (Dimension2LabelExists)
				if ((!UnusedDim2Structure entered)
				or  (!UnusedDim2Structure exists))
					invoke Create FinanceDimension2Structure
						resume on error
						invoked.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
						invoked.FinanceDimension2Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim2Structure = "_UNUSED_"
			else
				initialize UnusedDim2Structure

					
			if (Dimension3LabelExists)
				if ((!UnusedDim3Structure entered)
				or  (!UnusedDim3Structure exists))
					invoke Create FinanceDimension3Structure
						resume on error
						invoked.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
						invoked.FinanceDimension3Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim3Structure = "_UNUSED_"
			else
				initialize UnusedDim3Structure																									

					
			if (Dimension4LabelExists)
				if ((!UnusedDim4Structure entered)
				or  (!UnusedDim4Structure exists))
					invoke Create FinanceDimension4Structure
						resume on error
						invoked.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
						invoked.FinanceDimension4Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim4Structure = "_UNUSED_"
			else
				initialize UnusedDim4Structure					


			if (Dimension5LabelExists)
				if ((!UnusedDim5Structure entered)
				or  (!UnusedDim5Structure exists))
					invoke Create FinanceDimension5Structure
						resume on error
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.FinanceDimension5Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim5Structure = "_UNUSED_"
			else
				initialize UnusedDim5Structure						

					
			if (Dimension6LabelExists)
				if ((!UnusedDim6Structure entered)
				or   (!UnusedDim6Structure exists))
					invoke Create FinanceDimension6Structure
						resume on error
						invoked.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
						invoked.FinanceDimension6Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim6Structure = "_UNUSED_"
			else
				initialize UnusedDim6Structure						

					
			if (Dimension7LabelExists)
				if ((!UnusedDim7Structure entered)
				or  (!UnusedDim7Structure exists))
					invoke Create FinanceDimension7Structure
						resume on error
						invoked.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
						invoked.FinanceDimension7Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim7Structure = "_UNUSED_"
			else
				initialize UnusedDim7Structure						


			if (Dimension8LabelExists)
				if ((!UnusedDim8Structure entered)
				or  (!UnusedDim8Structure exists))
					invoke Create FinanceDimension8Structure
						resume on error
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.FinanceDimension8Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim8Structure = "_UNUSED_"
			else
				initialize UnusedDim8Structure					


			if (Dimension9LabelExists)
				if ((!UnusedDim9Structure entered)
				or  (!UnusedDim9Structure exists))
					invoke Create FinanceDimension9Structure
						resume on error
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.FinanceDimension9Structure  = "_UNUSED_"
						invoked.Description				    = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure    = true
						invoked.Active					    = false
					UnusedDim9Structure = "_UNUSED_"
			else
				initialize UnusedDim9Structure					


			if (Dimension10LabelExists)
				if ((!UnusedDim10Structure entered)
				or   (!UnusedDim10Structure exists))
					invoke Create FinanceDimension10Structure
						resume on error
						invoked.FinanceEnterpriseGroup	 	 = FinanceEnterpriseGroup
						invoked.FinanceDimension10Structure  = "_UNUSED_"
						invoked.Description				     = "Unused Posting Dimensions"
						invoked.UnusedDimensionStructure     = true
						invoked.Active					     = false
					UnusedDim10Structure = "_UNUSED_"
			else
				initialize UnusedDim10Structure					


		CreateCalendarAndCloseConfig
			if (Calendar entered)
				invoke Create GeneralLedgerCalendar
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.GeneralLedgerCalendar	= Calendar
					invoked.Description				= CalendarDescription
					invoked.CalendarType			= CalendarType.Months
					invoked.YearEndMonth			= YearEndMonth
					invoked.YearEndLastDay			= YearEndLastDay
					invoked.YearEndLastDayMethod	= YearEndLastDayMethod
					invoked.DaysHierarchy			= DaysHierarchy
					invoked.WeeksMethod				= WeeksMethod

			if (CloseConfiguration entered)
				invoke Create GeneralLedgerCloseConfiguration
					invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
					invoked.GeneralLedgerCloseConfiguration	= CloseConfiguration
					invoked.Description						= CloseConfigurationDescription
					invoked.PeriodsAreEndOfMonth			= true	
					invoked.DefaultPeriodName				= DefaultPeriodName

			if (Calendar entered
			and CloseConfiguration entered
			and StartYear entered)
				constraint (EndYear < (StartYear + 30))
					"RangeCannotBeMoreThan30Years"
				while (StartYear		<= EndYear)
	 				LocalFinanceEnterpriseGroup			= FinanceEnterpriseGroup
					LocalGeneralLedgerCalendar			= Calendar
					LocalCloseConfiguration				= CloseConfiguration
					invoke CreateYear LocalCloseConfiguration
						invoked.Year				= StartYear					
					invoke CreateCalendarYear LocalGeneralLedgerCalendar
						invoked.InvokedByFEGWizard  = true
						invoked.Year				= StartYear
						invoked.StartDate			= StartDate
						if (EndDate entered)
							invoked.EndDate			= EndDate
						invoked.CloseConfiguration  = CloseConfiguration
					StartYear	+= 1
					StartDate 	+= 1 year
					if (EndDate entered)
						EndDate	+= 1 year
				invoke BuildShadowFile LocalGeneralLedgerCalendar in background
					assign async background group id to LocalBackgroundGroupAsyncId
					invoked.BuildXref = true
#ifdef module ad
				if (UseAverageDailyBalance
				and LocalGeneralLedgerCalendar.UsedForADBReportingBasis)
					invoke BuildDailyPeriod GeneralLedgerCalendarPeriod
						run after action background group LocalBackgroundGroupAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmCalendar               = LocalGeneralLedgerCalendar
						invoked.PrmYear                   = StartYear
						invoked.PrmEndYear				  = EndYear
						invoked.PrmCreateBeginningBalance = true
						invoked.PrmCreateDailyPeriods	  = true		
#endif
				invoke CreatePeriodStatus LocalCloseConfiguration
		
		CreateStructureDefaultValue
			LocalStructureDetail = NewStructureDetail.StructureDetail
			for each AllStructureDefaultCodeDetailsRel
				LocalStructureDefaultCode		= each.StructureDefaultCode
				LocalStructureDefaultCodeDetail	= each.StructureDefaultCodeDetail
				if (CurrentStructureDefaultValueRel not exists)
					invoke Create StructureDefaultValue
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.StructureDefaultCode		= LocalStructureDefaultCode
						invoked.StructureDefaultCodeDetail	= LocalStructureDefaultCodeDetail
						invoked.StructureDetail				= LocalStructureDetail
						invoked.Value						= LocalStructureDefaultCodeDetail
			
			for each StructureDefaultCode set			
				invoke UpdateOrderArrays each

		ValidateApprovalOrder
			initialize LocalApprovalOrderTotal
			initialize LocalApprovalOrderCount
			
			if (ApprovalOrderChanged)
				constraint (AccountingEntityApprovalOrder entered)
					"AccountingEntityApprovalOrderIsRequired"

			if (AccountingEntityApprovalOrder not entered)
				initialize AccountingEntityApprovalOrder
			if (AccountApprovalOrder not entered)
				initialize AccountApprovalOrder
			if (AccountingUnitLabel not entered)
				initialize AccountingUnitApprovalOrder
			if (ProjectLabel not entered)
				initialize ProjectApprovalOrder
			if (FinanceDimension1Label not entered)
				initialize FinanceDimension1ApprovalOrder
			if (FinanceDimension2Label not entered)
				initialize FinanceDimension2ApprovalOrder
			if (FinanceDimension3Label not entered)
				initialize FinanceDimension3ApprovalOrder
			if (FinanceDimension4Label not entered)
				initialize FinanceDimension4ApprovalOrder
			if (FinanceDimension5Label not entered)
				initialize FinanceDimension5ApprovalOrder
			if (FinanceDimension6Label not entered)
				initialize FinanceDimension6ApprovalOrder
			if (FinanceDimension7Label not entered)
				initialize FinanceDimension7ApprovalOrder
			if (FinanceDimension8Label not entered)
				initialize FinanceDimension8ApprovalOrder
			if (FinanceDimension9Label not entered)
				initialize FinanceDimension9ApprovalOrder
			if (FinanceDimension10Label not entered)
				initialize FinanceDimension10ApprovalOrder
						
			if (AccountingEntityApprovalOrder entered)
				LocalApprovalOrderTotal +=  AccountingEntityApprovalOrder
				LocalApprovalOrderCount += 1
			if (AccountApprovalOrder entered)
				LocalApprovalOrderTotal +=  AccountApprovalOrder
				LocalApprovalOrderCount += 1
			if (AccountingUnitApprovalOrder entered)
				LocalApprovalOrderTotal += AccountingUnitApprovalOrder
				LocalApprovalOrderCount += 1
			if (ProjectApprovalOrder entered)
				LocalApprovalOrderTotal += ProjectApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension1ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension1ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension2ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension2ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension3ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension3ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension4ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension4ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension5ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension5ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension6ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension6ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension7ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension7ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension8ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension8ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension9ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension9ApprovalOrder
				LocalApprovalOrderCount += 1
			if (FinanceDimension10ApprovalOrder entered)
				LocalApprovalOrderTotal += FinanceDimension10ApprovalOrder
				LocalApprovalOrderCount += 1

			if (AccountingEntityApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[AccountingEntityApprovalOrder] = AccountingEntityApprovalOrder)
					"DuplicateOrderNumber"
				LocalApprovalOrderCheck.AlphaElement[AccountingEntityApprovalOrder] = AccountingEntityApprovalOrder
			if (AccountingUnitApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[AccountingUnitApprovalOrder] = AccountingUnitApprovalOrder)
					"DuplicateOrderNumber<AccountingUnitApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[AccountingUnitApprovalOrder] = AccountingUnitApprovalOrder
			if (AccountApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[AccountApprovalOrder] = AccountApprovalOrder)
					"DuplicateOrderNumber<AccountApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[AccountApprovalOrder] = AccountApprovalOrder
			if (ProjectApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[ProjectApprovalOrder] = ProjectApprovalOrder)
					"DuplicateOrderNumber<ProjectApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[ProjectApprovalOrder] = ProjectApprovalOrder
			if (FinanceDimension1ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension1ApprovalOrder] = FinanceDimension1ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension1ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension1ApprovalOrder] = FinanceDimension1ApprovalOrder
			if (FinanceDimension2ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension2ApprovalOrder] = FinanceDimension2ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension2ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension2ApprovalOrder] = FinanceDimension2ApprovalOrder
			if (FinanceDimension3ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension3ApprovalOrder] = FinanceDimension3ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension3ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension3ApprovalOrder] = FinanceDimension3ApprovalOrder
			if (FinanceDimension4ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension4ApprovalOrder] = FinanceDimension4ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension4ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension4ApprovalOrder] = FinanceDimension4ApprovalOrder
			if (FinanceDimension5ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension5ApprovalOrder] = FinanceDimension5ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension5ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension5ApprovalOrder] = FinanceDimension5ApprovalOrder
			if (FinanceDimension6ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension6ApprovalOrder] = FinanceDimension6ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension6ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension6ApprovalOrder] = FinanceDimension6ApprovalOrder
			if (FinanceDimension7ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension7ApprovalOrder] = FinanceDimension7ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension7ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension7ApprovalOrder] = FinanceDimension7ApprovalOrder
			if (FinanceDimension8ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension8ApprovalOrder] = FinanceDimension8ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension8ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension8ApprovalOrder] = FinanceDimension8ApprovalOrder
			if (FinanceDimension9ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension9ApprovalOrder] = FinanceDimension9ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension9ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension9ApprovalOrder] = FinanceDimension9ApprovalOrder
			if (FinanceDimension10ApprovalOrder entered)
				constraint (!LocalApprovalOrderCheck.AlphaElement[FinanceDimension10ApprovalOrder] = FinanceDimension10ApprovalOrder)
					"DuplicateOrderNumber<FinanceDimension10ApprovalOrder>"
				LocalApprovalOrderCheck.AlphaElement[FinanceDimension10ApprovalOrder] = FinanceDimension10ApprovalOrder
							
			if (LocalApprovalOrderCount  = 1)
				constraint (LocalApprovalOrderTotal = 1)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 2)
				constraint (LocalApprovalOrderTotal = 3)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 3)
				constraint (LocalApprovalOrderTotal = 6)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 4)
				constraint (LocalApprovalOrderTotal = 10)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 5)
				constraint (LocalApprovalOrderTotal = 15)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 6)
				constraint (LocalApprovalOrderTotal = 21)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 7)
				constraint (LocalApprovalOrderTotal = 28)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 8)
				constraint (LocalApprovalOrderTotal = 36)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 9)
				constraint (LocalApprovalOrderTotal = 45)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 10)
				constraint (LocalApprovalOrderTotal = 55)
					"IncorrectOrder,OrderNumberSkipped"
			else					
			if (LocalApprovalOrderCount  = 11)
				constraint (LocalApprovalOrderTotal = 66)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 12)
				constraint (LocalApprovalOrderTotal = 78)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 13)
				constraint (LocalApprovalOrderTotal = 91)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 14)
				constraint (LocalApprovalOrderTotal = 105)
					"IncorrectOrder,OrderNumberSkipped"
			else
			if (LocalApprovalOrderCount  = 15)
				constraint (LocalApprovalOrderTotal = 120)
					"IncorrectOrder,OrderNumberSkipped"

		RemoveApprovalOrder
			if (AccountingEntityApprovalOrder = LocalApprovalOrder)
				initialize AccountingEntityApprovalOrder
			if (AccountApprovalOrder = LocalApprovalOrder)
				initialize AccountApprovalOrder
			if (AccountingUnitApprovalOrder = LocalApprovalOrder)
				initialize AccountingUnitApprovalOrder
			if (ProjectApprovalOrder = LocalApprovalOrder)
				initialize ProjectApprovalOrder
			if (FinanceDimension1ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension1ApprovalOrder
			if (FinanceDimension2ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension2ApprovalOrder
			if (FinanceDimension3ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension3ApprovalOrder
			if (FinanceDimension4ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension4ApprovalOrder
			if (FinanceDimension5ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension5ApprovalOrder
			if (FinanceDimension6ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension6ApprovalOrder
			if (FinanceDimension7ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension7ApprovalOrder
			if (FinanceDimension8ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension8ApprovalOrder
			if (FinanceDimension9ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension9ApprovalOrder
			if (FinanceDimension10ApprovalOrder = LocalApprovalOrder)
				initialize FinanceDimension10ApprovalOrder

	Actions
 		CreateFinanceEnterprisegroupWizard is a Create Action
			default label is "Create"
			completion message is "<FinanceEnterpriseGroup>SucessfullyCreated"
			Local Fields
				LocalEnterPriseGroup			is a EnterpriseGroup
				LocalFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				LocalGeneralLedgerCalendar		is a GeneralLedgerCalendar
				LocalCloseConfiguration			is a GeneralLedgerCloseConfiguration
				LocalCurrencyTable				is like CurrencyTable
			Entrance Rules
				LocalCurrencyTable 				= TransientCurrencyTable
				constraint (CoreLedgerDescription entered)
					"CoreLedgerDescriptionIsRequired"
				if (!ProjectLabel entered)
					initialize ProjectDateEdit
					ProjectInvoicing	= false
					initialize BillingOverrideLevel
					ThirdPartyInvoicePrint = false					
				if (!FinanceDimension1Label entered)
					Dimension1ZoneBalancing	= false
				if (ProjectInvoicing
				and !FinanceDimension2Label entered)
					FinanceDimension2Label = "ProjectFunding"				
			
				LocalEnterPriseGroup		= FinanceEnterpriseGroup
				if (!LocalEnterPriseGroup exists)
					constraint (FinanceEnterpriseGroupDescription entered)
						"FinanceEnterpriseGroupDescriptionIsRequired"
					invoke Create LocalEnterPriseGroup
						invoked.Description				= FinanceEnterpriseGroupDescription
				if (Calendar entered)
					if (StartDate month = 1)
						constraint (StartYear = StartDate year)
							"Invalid_Start_DateFor_Start_Year"
					else
						constraint (StartYear = (StartDate year + 1))
							"Invalid_Start_DateFor_Start_Year"
					constraint (EndYear >= (StartYear + 2))
						"YearRangeMustSpanAMinimumOfThreeYears"
																				
			Action Rules
				include CodeBlockOrderEdit

				if (EnableResponsibilityMatrix)
					include ValidateApprovalOrder
 			Exit Rules
 				if (LocalCurrencyTable entered)
 					invoke Create CurrencyTable
 						resume on error
 						invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
 						invoked.CurrencyTable		   = LocalCurrencyTable
 						invoked.Description			   = LocalCurrencyTable
 				TransientCurrencyTable 		= LocalCurrencyTable
 			 	include CurrencySetup
 				include UpdateScenarios
				include LoadPredefinedSystemData
				include LoadPredefinedEventsData
				include LoadPredefinedAccountSubTypeData
				include CreateTranslationCodes

				include CreateStructureRow							

				include CreateStructureDetail

				include CreateCodeBlockRelationAndStructure			
					
				include CreateLedger
				include CreateSystemSubAccount
				include CreateSystemAccounts

				if (DEPMDimensionMapRel not exists)
					invoke Create DEPMDimensionMap
				include CheckUnusedStructures

				include CreateCalendarAndCloseConfig
				if (CubeSetupExists)
					invoke Refresh FinanceEnterpriseGroupCubeRel in background

 		T2VCreate is a Create Action
			restricted
			default label is untranslatable
			bypass field rules

 		T2VUpdate is an Update Action
			restricted
			default label is untranslatable
			bypass field rules

 		Create is a Create Action
 			restricted
			Local Fields
				LocalEnterPriseGroup			is a EnterpriseGroup
 			Field Rules
 				CoreLedgerDescription
 					required
						"CoreLedgerDescriptionIsRequired"
			Entrance Rules
				LocalEnterPriseGroup		= FinanceEnterpriseGroup
				if (!LocalEnterPriseGroup exists)
					constraint (FinanceEnterpriseGroupDescription entered)
						"FinanceEnterpriseGroupDescriptionIsRequired"
					invoke Create LocalEnterPriseGroup
						invoked.Description				= FinanceEnterpriseGroupDescription 		
			Action Rules
				include CodeBlockOrderEdit
				include CurrencySetup
				if (EnableResponsibilityMatrix)
					include ValidateApprovalOrder
 			Exit Rules
 				invoke RebuildProjectCodeBlockDimension
 				include UpdateScenarios
				include LoadPredefinedSystemData
				include LoadPredefinedEventsData
				include LoadPredefinedAccountSubTypeData
				include CreateTranslationCodes

				include CreateStructureRow							

				include CreateStructureDetail

				include CreateCodeBlockRelationAndStructure			
					
				include CreateLedger
				include CreateSystemSubAccount
				include CreateSystemAccounts

				invoke Create DEPMDimensionMap
				include CheckUnusedStructures

				if (CubeSetupExists)
					invoke Refresh FinanceEnterpriseGroupCubeRel in background
				
  		Update is an Update Action
			Local Fields
				LocalEnterPriseGroup			is a EnterpriseGroup
				LocalFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				LocalGeneralLedgerCalendar		is a GeneralLedgerCalendar
				LocalCloseConfiguration			is a GeneralLedgerCloseConfiguration
 			Field Rules
 				CoreLedgerDescription
 					cannot be changed
			Entrance Rules			
				if (Calendar entered)
					if (!CalendarDescription entered)
						initialize Calendar
						initialize CloseConfiguration
						initialize CloseConfigurationDescription
				if (Calendar entered)
					constraint (CalendarDescription entered)
						"CalendarDescriptionIsRequired"
					constraint (CloseConfiguration entered)
						"CloseConfigurationIsRequired"
					constraint (CloseConfigurationDescription entered)
						"CloseConfigurationDescriptionIsRequired"
					constraint (StartYear entered)
						"StartYearIsRequired"
					constraint (EndYear entered)
						"EndYearIsRequired"
					constraint (StartDate entered)
						"StartDateIsRequired"
					if (StartDate month = 1)
						constraint (StartYear = StartDate year)
							"Invalid_Start_DateFor_Start_Year"
					else
						constraint (StartYear = (StartDate year + 1))
							"Invalid_Start_DateFor_Start_Year"
					constraint (EndYear >= (StartYear + 2))
						"YearRangeMustSpanAMinimumOfThreeYears"
						
				if ((old AccountingUnitLabel not entered
				and  AccountingUnitLabel entered)
				or  (old ProjectLabel not entered
				and  ProjectLabel entered)
				or  (old FinanceDimension1Label not entered
				and  FinanceDimension1Label entered)
				or  (old FinanceDimension2Label not entered
				and  FinanceDimension2Label entered)
				or  (old FinanceDimension3Label not entered
				and  FinanceDimension3Label entered)
				or  (old FinanceDimension4Label not entered
				and  FinanceDimension4Label entered)
				or  (old FinanceDimension5Label not entered
				and  FinanceDimension5Label entered)
				or  (old FinanceDimension6Label not entered
				and  FinanceDimension6Label entered)
				or  (old FinanceDimension7Label not entered
				and  FinanceDimension7Label entered)
				or  (old FinanceDimension8Label not entered
				and  FinanceDimension8Label entered)
				or  (old FinanceDimension9Label not entered
				and  FinanceDimension9Label entered)
				or  (old FinanceDimension10Label not entered
				and  FinanceDimension10Label entered))
					confirmation required
						"BeSureToUpdateStructuresOn_Reporting_BasisAfterAddingNewDimensions"
																																												
			Action Rules			
				include CodeBlockOrderEdit
				include CurrencySetup
				include UpdateScenarios
				if (EnableResponsibilityMatrix)
					include ValidateApprovalOrder				

 			Exit Rules
 				if (StructureValidationDimension changed
 				or  FinanceDimension1Label changed
 				or  FinanceDimension2Label changed
 				or  FinanceDimension3Label changed
 				or  FinanceDimension4Label changed
 				or  FinanceDimension5Label changed
 				or  FinanceDimension6Label changed
 				or  FinanceDimension7Label changed
 				or  FinanceDimension8Label changed
 				or  FinanceDimension9Label changed
 				or  FinanceDimension10Label changed
 				or  AccountLabel changed)
	 				invoke RebuildProjectCodeBlockDimension

				if (CoreLedger changed
				and !LedgerRel exists)
					invoke Create Ledger
						invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
						invoked.Ledger							= CoreLedger
						invoked.Description						= CoreLedgerDescription
						invoked.RecordType						= 1

				include CreateSystemSubAccount





















				StructureNotUpdated	= true
				if (ChangeStructureOrderFrom entered)
					StructureNotUpdated	= false
					if (ChangeStructureOrderFrom	= AccountingEntityOrder)
						if (AccountingUnitOrder entered)		
							constraint (ChangeStructureOrderTo		< AccountingUnitOrder)
								"AccountingEntityOrderCannotBeGreaterThanAccountingUnitOrder"
							constraint (AccountingUnitOrder > ChangeStructureOrderFrom)
								"AccountingUnitOrderCannotBeGreaterThanAccountingEntityOrder"
					if (ChangeStructureOrderTo	= AccountingEntityOrder)
						if (AccountingUnitOrder entered)		
							constraint (ChangeStructureOrderFrom	< AccountingUnitOrder)
								"AccountingEntityOrderCannotBeGreaterThanAccountingUnitOrder"
							constraint (AccountingUnitOrder > ChangeStructureOrderTo)
								"AccountingUnitOrderCannotBeGreaterThanAccountingEntityOrder"
					if (ChangeStructureOrderFrom	= AccountingUnitOrder)
						constraint (ChangeStructureOrderTo	> AccountingEntityOrder)
							"AccountingEntityOrderCannotBeGreaterThanAccountingUnitOrder"
						constraint (AccountingEntityOrder < ChangeStructureOrderFrom)
							"AccountingUnitOrderCannotBeGreaterThanAccountingEntityOrder"
					if (ChangeStructureOrderTo	= AccountingUnitOrder)
						constraint (ChangeStructureOrderFrom	> AccountingEntityOrder)
							"AccountingEntityOrderCannotBeGreaterThanAccountingUnitOrder"
						constraint (AccountingEntityOrder < ChangeStructureOrderTo)
							"AccountingUnitOrderCannotBeGreaterThanAccountingEntityOrder"
					constraint (!LabelChanged)
						"CannotAddNewDimensionAndMoveStructureOrder"
					constraint (LocalOrderCount				<= last StructureDetailRel.SortOrder)
						"CannotChangeStructureOrderAndAddANewDimension"
					constraint (ChangeStructureOrderFrom	<= LocalOrderCount)
						"ChangeStructureOrderFromExceedsMax"
					constraint (ChangeStructureOrderTo		<= LocalOrderCount)
						"ChangeStructureOrderToExceedsMax"
					include ChangeStructureOrder
					UpdateStructureRowAndDetail	= true
					include CreateStructureRow
					include CreateStructureDetail
					invoke ValidateCodeBlockRelation FinanceEnterpriseGroup
					initialize ChangeStructureOrderFrom
					initialize ChangeStructureOrderTo

				else
				if (UpdateStructure)


					include CreateStructureRow
					include CreateStructureDetail

					if (old AccountingUnitLabel entered
					and AccountingUnitLabel not entered)
						invoke RestrictedDelete AccountingUnitStructure set
					if (old ProjectLabel entered
					and ProjectLabel not entered)
						invoke RestrictedDelete ProjectStructure set						
					if (old FinanceDimension1Label entered
					and FinanceDimension1Label not entered)
						invoke RestrictedDelete FinanceDimension1Structure set
					if (old FinanceDimension2Label entered
					and FinanceDimension2Label not entered)
						invoke RestrictedDelete FinanceDimension2Structure set
					if (old FinanceDimension3Label entered
					and FinanceDimension3Label not entered)
						invoke RestrictedDelete FinanceDimension3Structure set
					if (old FinanceDimension4Label entered
					and FinanceDimension4Label not entered)
						invoke RestrictedDelete FinanceDimension4Structure set
					if (old FinanceDimension5Label entered
					and FinanceDimension5Label not entered)
						invoke RestrictedDelete FinanceDimension5Structure set
					if (old FinanceDimension6Label entered
					and FinanceDimension6Label not entered)
						invoke RestrictedDelete FinanceDimension6Structure set
					if (old FinanceDimension7Label entered
					and FinanceDimension7Label not entered)
						invoke RestrictedDelete FinanceDimension7Structure set
					if (old FinanceDimension8Label entered
					and FinanceDimension8Label not entered)
						invoke RestrictedDelete FinanceDimension8Structure set
					if (old FinanceDimension9Label entered
					and FinanceDimension9Label not entered)
						invoke RestrictedDelete FinanceDimension9Structure set
					if (old FinanceDimension10Label entered
					and FinanceDimension10Label not entered)
						invoke RestrictedDelete FinanceDimension10Structure set

					if ((old AccountingUnitLabel not entered
					and AccountingUnitLabel entered)
					or  (old AccountingUnitOrder not entered
					and AccountingUnitOrder entered))
						LocalRowType								= 1
						LocalDetailType								= 2
						invoke Create StructureRowValue
							invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
							invoked.StructureDetail						= StructureDetailByTypeRel.StructureDetail
							invoked.StructureRow						= StructureRowByTypeRel.StructureRow
							invoked.Value								= true
					if ((old AccountingUnitLabel entered
					and AccountingUnitLabel not entered)
					or  (old AccountingUnitOrder entered
					and AccountingUnitOrder not entered))
						LocalDetailType = 2
						LocalRowType = 2
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old ProjectLabel entered
					and ProjectLabel not entered)
					or  (old ProjectOrder entered
					and ProjectOrder not entered))
						LocalDetailType = 4
						LocalRowType = 4
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel							
					if ((old FinanceDimension1Label entered
					and FinanceDimension1Label not entered)
					or  (old FinanceDimension1Order entered
					and FinanceDimension1Order not entered))
						LocalDetailType = 6
						LocalRowType = 6
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension2Label entered
					and FinanceDimension2Label not entered)
					or  (old FinanceDimension2Order entered
					and FinanceDimension2Order not entered))
						LocalDetailType = 7
						LocalRowType = 7
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension3Label entered
					and FinanceDimension3Label not entered)
					or  (old FinanceDimension3Order entered
					and FinanceDimension3Order not entered))
						LocalDetailType = 8
						LocalRowType = 8
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension4Label entered
					and FinanceDimension4Label not entered)
					or  (old FinanceDimension4Order entered
					and FinanceDimension4Order not entered))
						LocalDetailType = 9
						LocalRowType = 9
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension5Label entered
					and FinanceDimension5Label not entered)
					or  (old FinanceDimension5Order entered
					and FinanceDimension5Order not entered))
						LocalDetailType = 10
						LocalRowType = 10
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension6Label entered
					and FinanceDimension6Label not entered)
					or  (old FinanceDimension6Order entered
					and FinanceDimension6Order not entered))
						LocalDetailType = 11
						LocalRowType = 11
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension7Label entered
					and FinanceDimension7Label not entered)
					or  (old FinanceDimension7Order entered
					and FinanceDimension7Order not entered))
						LocalDetailType = 12
						LocalRowType = 12
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension8Label entered
					and FinanceDimension8Label not entered)
					or  (old FinanceDimension8Order entered
					and FinanceDimension8Order not entered))
						LocalDetailType = 13
						LocalRowType = 13
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension9Label entered
					and FinanceDimension9Label not entered)
					or  (old FinanceDimension9Order entered
					and FinanceDimension9Order not entered))
						LocalDetailType = 14
						LocalRowType = 14
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel
					if ((old FinanceDimension10Label entered
					and FinanceDimension10Label not entered)
					or  (old FinanceDimension10Order entered
					and FinanceDimension10Order not entered))
						LocalDetailType = 15
						LocalRowType = 15
						if (StructureRowByTypeRel exists)
							invoke Delete StructureRowByTypeRel
						if (StructureDetailByTypeRel exists)
							invoke Delete StructureDetailByTypeRel

				if (DEPMDimensionMapRel not exists)
					invoke Create DEPMDimensionMap
				include CheckUnusedStructures
				

				if (SystemSubAccount changed)
					include ChangeSystemAccounts

				include CreateCalendarAndCloseConfig
				if (FieldsForCubeRefresh changed)
					if (CubeSetupExists)
						invoke Refresh FinanceEnterpriseGroupCubeRel in background

 		Delete is a Delete Action
 		
 			Local Fields
 				LocalAccountingEntity	is an AccountingEntity
 				
			Entrance Rules
				constraint (!CodeBlockRelationExists)
					"FinanceStructureRelationsExistsCannotDelete"


				for each GeneralLedgerSystemCode set
					invoke Update each.GeneralLedgerSystemCode
	 					invoked.UsedByATransaction		= false
				for each GeneralLedgerEvent set
					invoke Update each.GeneralLedgerEvent
	 					invoked.UsedByATransaction		= false	
	 			invoke Delete GeneralLedgerChartAccountRel
	 			invoke Delete Account set
	 			invoke DeleteFromFinanceGroup GeneralLedgerEvent set
	 			invoke DeleteFromFinanceGroup GeneralLedgerSystemCode set

				invoke RestrictedDelete ReportingChart set
				if (AccountingUnitLabel entered)
					invoke RestrictedDelete AccountingUnitStructure set
				invoke RestrictedDelete AccountingEntity set
				if (ProjectLabel entered)
					invoke RestrictedDelete ProjectStructure set
				if (FinanceDimension1Label entered)
					invoke RestrictedDelete FinanceDimension1Structure set
				if (FinanceDimension2Label entered)
					invoke RestrictedDelete FinanceDimension2Structure set
				if (FinanceDimension3Label entered)
					invoke RestrictedDelete FinanceDimension3Structure set
				if (FinanceDimension4Label entered)
					invoke RestrictedDelete FinanceDimension4Structure set
				if (FinanceDimension5Label entered)
					invoke RestrictedDelete FinanceDimension5Structure set
				if (FinanceDimension6Label entered)
					invoke RestrictedDelete FinanceDimension6Structure set
				if (FinanceDimension7Label entered)
					invoke RestrictedDelete FinanceDimension7Structure set
				if (FinanceDimension8Label entered)
					invoke RestrictedDelete FinanceDimension8Structure set
				if (FinanceDimension9Label entered)
					invoke RestrictedDelete FinanceDimension9Structure set
				if (FinanceDimension10Label entered)
					invoke RestrictedDelete FinanceDimension10Structure set
				


				for each StructureRowValueRel
					invoke DeleteFromRelation each
	 			for each StructureDetailRel
	 				invoke Delete each
	 			for each StructureRowRel
	 				invoke Delete each

				if (CubeSetupExists)
					invoke Refresh FinanceEnterpriseGroupCubeRel in background

		RemoveAllFinanceStructureRelationSetup is an Instance Action
			valid when (CodeBlockRelationExists)
			confirmation required
				"AllStructureRelationsIncludingSystemDefinedWillBeRemoved;DoYouWishToContinue?"
			
			Action Rules
				for each AllCodeBlockRelationRel
					invoke SystemDeleteOfFEG each
		





















































		ResetSystemDimensionFlags is a Set Action
			
			Action Rules
			
				Instance Rules
					invoke SetEnterpriseChart
						invoked.PrmEnterpriseAUStructure    = first EnterpriseAUStructureRel.AccountingUnitStructure
						invoked.PrmEnterpriseDim1Structure  = first EnterpriseDim1StructureRel.FinanceDimension1Structure
						invoked.PrmEnterpriseDim2Structure  = first EnterpriseDim2StructureRel.FinanceDimension2Structure
						invoked.PrmEnterpriseDim3Structure  = first EnterpriseDim3StructureRel.FinanceDimension3Structure
						invoked.PrmEnterpriseDim4Structure  = first EnterpriseDim4StructureRel.FinanceDimension4Structure
						invoked.PrmEnterpriseDim5Structure  = first EnterpriseDim5StructureRel.FinanceDimension5Structure
						invoked.PrmEnterpriseDim6Structure  = first EnterpriseDim6StructureRel.FinanceDimension6Structure
						invoked.PrmEnterpriseDim7Structure  = first EnterpriseDim7StructureRel.FinanceDimension7Structure
						invoked.PrmEnterpriseDim8Structure  = first EnterpriseDim8StructureRel.FinanceDimension8Structure
						invoked.PrmEnterpriseDim9Structure  = first EnterpriseDim9StructureRel.FinanceDimension9Structure
						invoked.PrmEnterpriseDim10Structure = first EnterpriseDim10StructureRel.FinanceDimension10Structure
						invoked.PrmEnterpriseProjectStructure = first EnterpriseProjectStructureRel.ProjectStructure
					
		SetBudgetCurrencyCounters is a Set Action
			restricted
			run in foreground
			
			Action Rules
			
				Instance Rules
					invoke InitializeBudgetCurrencyCounters FinanceEnterpriseGroupExtRel.FinanceEnterpriseGroupExt
					for each BudgetTemplatesRel
						invoke SetCurrencyCounter each.BudgetTemplate

		ClearUseDEPMBudgetingFlag is a Set Action
			restricted
			run in foreground
			confirmation required
				"AreYouSureYouWantToClearThe_UseEPM_BudgetingFlag?"

			Action Rules
			
				Instance Rules
					initialize UseDEPMBudgeting

		SetEnterpriseChart is an Instance Action
			restricted
			
			Parameters
				PrmEnterpriseChart		   	is a ReportingChart
					default label is "EnterpriseChart"
				PrmClearChart				is Boolean
					default label is "ClearChart"
				PrmEnterpriseAUStructure	is an AccountingUnitStructure
					default label is "EnterpriseAccountingUnitStructure"
				PrmClearAUStructure			is Boolean
					default label is "ClearAccountingUnitStructure"
				PrmEnterpriseDim1Structure 	is a FinanceDimension1Structure
					default label is "EnterpriseDimension1Structure"
				PrmClearDim1Structure		is Boolean	
					default label is "ClearDimension1Structure"
				PrmEnterpriseDim2Structure 	is a FinanceDimension2Structure
					default label is "EnterpriseDimension2Structure"
				PrmClearDim2Structure		is Boolean	
					default label is "ClearDimension2Structure"
				PrmEnterpriseDim3Structure 	is a FinanceDimension3Structure
					default label is "EnterpriseDimension3Structure"
				PrmClearDim3Structure		is Boolean	
					default label is "ClearDimension3Structure"
				PrmEnterpriseDim4Structure 	is a FinanceDimension4Structure
					default label is "EnterpriseDimension4Structure"
				PrmClearDim4Structure		is Boolean	
					default label is "ClearDimension4Structure"
				PrmEnterpriseDim5Structure 	is a FinanceDimension5Structure
					default label is "EnterpriseDimension5Structure"
				PrmClearDim5Structure		is Boolean	
					default label is "ClearDimension5Structure"
				PrmEnterpriseDim6Structure 	is a FinanceDimension6Structure
					default label is "EnterpriseDimension6Structure"
				PrmClearDim6Structure		is Boolean	
					default label is "ClearDimension6Structure"
				PrmEnterpriseDim7Structure 	is a FinanceDimension7Structure
					default label is "EnterpriseDimension7Structure"
				PrmClearDim7Structure		is Boolean	
					default label is "ClearDimension7Structure"
				PrmEnterpriseDim8Structure 	is a FinanceDimension8Structure
					default label is "EnterpriseDimension8Structure"
				PrmClearDim8Structure		is Boolean	
					default label is "ClearDimension8Structure"
				PrmEnterpriseDim9Structure 	is a FinanceDimension9Structure
					default label is "EnterpriseDimension9Structure"
				PrmClearDim9Structure		is Boolean	
					default label is "ClearDimension9Structure"
				PrmEnterpriseDim10Structure	is a FinanceDimension10Structure
					default label is "EnterpriseDimension10Structure"
				PrmClearDim10Structure		is Boolean	
					default label is "ClearDimension1Structure"
				PrmEnterpriseProjectStructure	is a ProjectStructure
					default label is "EnterpriseProjectStructure"
				PrmClearProjectStructure		is Boolean	
					default label is "ClearProjectStructure"																																							

			Parameter Rules
					
			Action Rules
				if (PrmEnterpriseChart entered)
					EnterpriseChart			= PrmEnterpriseChart
				else
					if (PrmClearChart)
						initialize EnterpriseChart
				if (PrmEnterpriseAUStructure entered)
					EnterpriseAUStructure = PrmEnterpriseAUStructure
					for each AccountingEntity set
						LocalAccountingEntity = each.AccountingEntity
						invoke SetSystemDimensionFlags each
							if (EnterpriseSystemAcctUnitRel exists)
								invoked.PrmSystemAccountingUnitDefined      = true
							if (EnterpriseDefaultZoneAcctUnitRel exists)
								invoked.PrmDefaultZoneAccountingUnitDefined = true
							if (EnterpriseEntityZoneAcctUnitRel exists)
								invoked.PrmEntityZoneAccountingUnitDefined  = true
				else
					if (PrmClearAUStructure)
						initialize EnterpriseAUStructure
						invoke SetSystemDimensionFlags AccountingEntity set
							invoked.PrmSystemAccountingUnitDefined      = false
							invoked.PrmDefaultZoneAccountingUnitDefined = false
							invoked.PrmEntityZoneAccountingUnitDefined  = false
							
				if (PrmEnterpriseDim1Structure entered)
					EnterpriseDim1Structure = PrmEnterpriseDim1Structure
					if (EnterpriseSystemDim1Rel exists)
						SystemDim1Defined		  = true
					else
						SystemDim1Defined 		  = false
					if (EnterpriseDefaultZoneDim1Rel exists)
						DefaultZoneDim1Defined    = true
					else
						DefaultZoneDim1Defined    = false
					if (EnterpriseZoneDim1Rel exists)
						EnterpriseZoneDim1Defined = true	
					else
						EnterpriseZoneDim1Defined = false				
				else
					if (PrmClearDim1Structure)
						initialize EnterpriseDim1Structure
						initialize SystemDim1Defined
						initialize DefaultZoneDim1Defined
						initialize EnterpriseZoneDim1Defined
											 					
				if (PrmEnterpriseDim2Structure entered)
					EnterpriseDim2Structure = PrmEnterpriseDim2Structure
					if (EnterpriseSystemDim2Rel exists)
						SystemDim2Defined		  = true
					else
						SystemDim2Defined 		  = false				
				else
					if (PrmClearDim2Structure)
						initialize EnterpriseDim2Structure
						initialize SystemDim2Defined
						
				if (PrmEnterpriseDim3Structure entered)
					EnterpriseDim3Structure = PrmEnterpriseDim3Structure
					if (EnterpriseSystemDim3Rel exists)
						SystemDim3Defined		  = true
					else
						SystemDim3Defined 		  = false					
				else
					if (PrmClearDim3Structure)
						initialize EnterpriseDim3Structure
						initialize SystemDim3Defined
							
				if (PrmEnterpriseDim4Structure entered)
					EnterpriseDim4Structure = PrmEnterpriseDim4Structure
					if (EnterpriseSystemDim4Rel exists)
						SystemDim4Defined		  = true
					else
						SystemDim4Defined 		  = false					
				else
					if (PrmClearDim4Structure)
						initialize EnterpriseDim4Structure
						initialize SystemDim4Defined
							
				if (PrmEnterpriseDim5Structure entered)
					EnterpriseDim5Structure = PrmEnterpriseDim5Structure
					if (EnterpriseSystemDim5Rel exists)
						SystemDim5Defined		  = true
					else
						SystemDim5Defined 		  = false					
				else
					if (PrmClearDim5Structure)
						initialize EnterpriseDim5Structure
						initialize SystemDim5Defined
							
				if (PrmEnterpriseDim6Structure entered)
					EnterpriseDim6Structure = PrmEnterpriseDim6Structure
					if (EnterpriseSystemDim6Rel exists)
						SystemDim6Defined		  = true
					else
						SystemDim6Defined 		  = false					
				else
					if (PrmClearDim6Structure)
						initialize EnterpriseDim6Structure
						initialize SystemDim6Defined
							
				if (PrmEnterpriseDim7Structure entered)
					EnterpriseDim7Structure = PrmEnterpriseDim7Structure
					if (EnterpriseSystemDim7Rel exists)
						SystemDim7Defined		  = true
					else
						SystemDim7Defined 		  = false
				else
					if (PrmClearDim7Structure)
						initialize EnterpriseDim7Structure
						initialize SystemDim7Defined
							
				if (PrmEnterpriseDim8Structure entered)
					EnterpriseDim8Structure = PrmEnterpriseDim8Structure
					if (EnterpriseSystemDim8Rel exists)
						SystemDim8Defined		  = true
					else
						SystemDim8Defined 		  = false	
				else
					if (PrmClearDim8Structure)
						initialize EnterpriseDim8Structure
						initialize SystemDim8Defined
							
				if (PrmEnterpriseDim9Structure entered)
					EnterpriseDim9Structure = PrmEnterpriseDim9Structure
					if (EnterpriseSystemDim9Rel exists)
						SystemDim9Defined		  = true
					else
						SystemDim9Defined 		  = false				
				else
					if (PrmClearDim9Structure)
						initialize EnterpriseDim9Structure
						initialize SystemDim9Defined
							
				if (PrmEnterpriseDim10Structure entered)
					EnterpriseDim10Structure = PrmEnterpriseDim10Structure
					if (EnterpriseSystemDim10Rel exists)
						SystemDim10Defined		  = true
					else
						SystemDim10Defined 		  = false					
				else
					if (PrmClearDim10Structure)
						initialize EnterpriseDim10Structure
						initialize SystemDim10Defined
																																																							
				if (PrmEnterpriseProjectStructure entered)
					EnterpriseProjectStructure = PrmEnterpriseProjectStructure
					if (EnterpriseSystemProjectRel exists)
						SystemProjectDefined		  = true
					else
						SystemProjectDefined 		  = false
				else
					if (PrmClearProjectStructure)
						initialize EnterpriseProjectStructure
						initialize SystemProjectDefined
						

        FixupSequenceNumbers is an Instance Action
            restricted
            Action Rules
                invoke FixupSequenceNumbers GeneralLedgerChartAccount
                    invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
                invoke FixupSequenceNumbers AccountingEntity
                    invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
                invoke FixupSequenceNumbers AccountingUnit
                    invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
                invoke FixupSequenceNumbers Project
                    invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
                    











				
		NotifyNewStructureComponent is an Instance Action
			restricted
			Parameters
				PrmNewAccountingEntity				is like AccountingEntity
					default label is "NewAccountingEntity"
				PrmNewAccountingUnit				is like AccountingUnit
					default label is "NewAccountingUnit"
				PrmNewAccount						is like GeneralLedgerChartAccount
					default label is "NewAccount"
				PrmNewDimension1					is like FinanceDimension1
					default label is "NewDimension1"
				PrmNewDimension2					is like FinanceDimension2
					default label is "NewDimension2"
				PrmNewDimension3					is like FinanceDimension3
					default label is "NewDimension3"
				PrmNewDimension4					is like FinanceDimension4
					default label is "NewDimension4"
				PrmNewDimension5					is like FinanceDimension5
					default label is "NewDimension5"
				PrmNewDimension6					is like FinanceDimension6
					default label is "NewDimension6"
				PrmNewDimension7					is like FinanceDimension7
					default label is "NewDimension7"
				PrmNewDimension8					is like FinanceDimension8
					default label is "NewDimension8"
				PrmNewDimension9					is like FinanceDimension9
					default label is "NewDimension9"
				PrmNewDimension10					is like FinanceDimension10
					default label is "NewDimension10"
				PrmNewProject						is like Project
					default label is "NewProject"
			Action Rules
				for each AllActiveCodeBlockRelationRel
					if ((each.FromField.AccountingEntity
					or  each.ToField.AccountingEntity)
					and PrmNewAccountingEntity entered
					and PrmNewAccountingUnit not entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewAccountingEntity			= PrmNewAccountingEntity
					else
					if ((each.FromField.AccountingUnit
					or  each.ToField.AccountingUnit)
					and PrmNewAccountingUnit entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewAccountingEntity			= PrmNewAccountingEntity
							invoked.PrmNewAccountingUnit			= PrmNewAccountingUnit
					else
					if ((each.FromField.Account
					or  each.ToField.Account)
					and PrmNewAccount entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewAccount					= PrmNewAccount
					else
					if ((each.FromField.Dimension1
					or  each.ToField.Dimension1)
					and PrmNewDimension1 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension1				= PrmNewDimension1
					else
					if ((each.FromField.Dimension2
					or  each.ToField.Dimension2)
					and PrmNewDimension2 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension2				= PrmNewDimension2
					else
					if ((each.FromField.Dimension3
					or  each.ToField.Dimension3)
					and PrmNewDimension3 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension3				= PrmNewDimension3
					else
					if ((each.FromField.Dimension4
					or  each.ToField.Dimension4)
					and PrmNewDimension4 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension4				= PrmNewDimension4
					else
					if ((each.FromField.Dimension5
					or  each.ToField.Dimension5)
					and PrmNewDimension5 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension5				= PrmNewDimension5
					else
					if ((each.FromField.Dimension6
					or  each.ToField.Dimension6)
					and PrmNewDimension6 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension6				= PrmNewDimension6
					else
					if ((each.FromField.Dimension7
					or  each.ToField.Dimension7)
					and PrmNewDimension7 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension7				= PrmNewDimension7
					else
					if ((each.FromField.Dimension8
					or  each.ToField.Dimension8)
					and PrmNewDimension8 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension8				= PrmNewDimension8
					else
					if ((each.FromField.Dimension9
					or  each.ToField.Dimension9)
					and PrmNewDimension9 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension9				= PrmNewDimension9
					else
					if ((each.FromField.Dimension10
					or  each.ToField.Dimension10)
					and PrmNewDimension10 entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewDimension10				= PrmNewDimension10
					else
					if ((each.FromField.Project
					or  each.ToField.Project)
					and PrmNewProject entered)
						LocalCodeBlockRelation			= each.CodeBlockRelation
						invoke NotifyNewComponent CodeBlockRelationRel
							invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation			= each.CodeBlockRelation
							invoked.PrmNewProject					= PrmNewProject

		BuildAccountingUnitShadowFile is an Instance Action
			restricted
			Action Rules
			
				invoke BuildShadowFile AccountingUnitStructure set
				
		BuildFinanceDimension1ShadowFile is an Instance Action
			restricted
			Action Rules
			
				invoke BuildShadowFile FinanceDimension1Structure set				































































































































































































































































































































		InitiatePosting is an Instance Action
			restricted
			
			Parameters
				PrmPeriodOption				is Numeric 1
					default label is "PeriodOption"
					States
						CurrentPeriod			value is 1
						PreviousPeriod			value is 2
						NextPeriod				value is 3
						SpecifyYearAndPeriod	value is 4
						AllPeriods				value is 5


				PrmGeneralLedgerCalendarPeriod	is like GeneralLedgerCalendarPeriod
					default label is "GlobalLedgerCalendarPeriod"
				PrmLedger					is like Ledger
					default label is "Ledger"
				PrmSystemCode				is like GeneralLedgerSystemCode
					default label is "SystemCode"
				PrmJournalPostingResult		is a JournalPostingResult		
					default label is "JournalPostingResult"		

			Local Fields
				LocalAccountingEntity is a AccountingEntity
				
			Action Rules
				LocalLedger							= PrmLedger
				LocalGeneralLedgerSystemCode		= PrmSystemCode

				for each distinct FEGAndEntity in JournalsToPostRel	
					if (each.AccountingEntity.Status.Active)					
						invoke InitiatePosting each.AccountingEntity
							invoked.PrmPeriodOption					= PrmPeriodOption

							invoked.PrmGeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod
							invoked.PrmLedger						= PrmLedger
							invoked.PrmSystemCode					= PrmSystemCode												
							invoked.PrmJournalPostingResult			= PrmJournalPostingResult

		InitiateJournalizeForRunGroup is an Instance Action
			restricted
              
			Parameters
				PrmJournalizeGroup                  is a JournalizeGroup
					default label is "JournalizeGroup"              
				PrmOriginatingInterfaceRun    is a GLTransactionInterfaceResult
					default label is "GlobalLedgerTransactionInterfaceResult"      
				PrmInterfaceInDetail          is Boolean
					default label is "InterfaceInDetail"
				PrmJournalizeGroupDescription is a Description
					default label is "JournalizeGroupDescription"
				PrmAutoReverseDate			  is Date
					default label is "AutoReverseDate"
                  
            Local Fields
				LocalJournalizeGroupResult			is a JournalizeGroupResult		

			Action Rules
				LocalJournalizeGroup                      = PrmJournalizeGroup
				LocalJournalizeGroupResult                = PrmJournalizeGroup		
				if (LocalJournalizeGroupResult exists)
					invoke Update LocalJournalizeGroupResult
						invoked.RunTime						  = current timestamp
						invoked.Status						  = 2
				else
					invoke Create JournalizeGroupResult
						invoked.FinanceEnterpriseGroup		  = FinanceEnterpriseGroup
						invoked.JournalizeGroupResult		  = PrmJournalizeGroup
						invoked.RunTime						  = current timestamp
						invoked.Status						  = 2
						invoked.Description					  = PrmJournalizeGroupDescription

				if (!GLTransactionDetailForRunGroupRel exists)						
					if (LocalJournalizeGroupResult exists							
					and LocalJournalizeGroupResult.Status.Incomplete)				
						invoke UpdateStatus LocalJournalizeGroupResult				
							invoked.PrmStatus			= 1							

				for each distinct FEGAndEntity in GLTransactionDetailForRunGroupRel                           
					invoke InitiateJournalize each.AccountingEntity
						invoked.PrmJournalizeGroup            = PrmJournalizeGroup
						invoked.PrmOriginatingInterfaceRun    = PrmOriginatingInterfaceRun
						invoked.PrmJournalizeGroupDescription = PrmJournalizeGroupDescription
						invoked.PrmInterfaceInDetail          = PrmInterfaceInDetail
						invoked.PrmAutoReverseDate			  = PrmAutoReverseDate
						
		InvokeJournalPosting is an Instance Action
			restricted
						
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
		        PrmAccountingEntityOption	is Numeric 1
		        	default label is "AccountingEntityOption"
		        	States
		        		All				value is 1
		        		Single			value is 2
		        		Group			value is 3
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingEntityGroup	is a AccountingEntityGroup
					default label is "AccountingEntityGroup"


				PrmPeriod					is like GeneralLedgerCalendarPeriod
					default label is "Period"
				PrmLedger					is a Ledger
					default label is "Ledger"
				PrmSystem					is a GeneralLedgerSystemCode
					default label is "System"
				PrmPeriodOption				is Numeric 1
					default label is "PeriodOption"
					States
						CurrentPeriod			value is 1
						PreviousPeriod			value is 2
						NextPeriod				value is 3
						SpecifyYearAndPeriod	value is 4
						AllPeriods				value is 5
				PrmPostThroughDate			is Date		
				PrmSkipAttachRule			is a SkipAttachRule		
			
			Parameter Rules
				PrmPostThroughDate
					if (!PrmFinanceEnterpriseGroup.ADBSelection.None)
						default to current corporate date
				
			Local Fields	
				LocalJournalPostingResultView	is a JournalPostingResult view				

			Action Rules
				invoke Create JournalPostingResult
					assign result to LocalJournalPostingResultView
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.RunTime						= current timestamp
					invoked.AccountingEntityOption		= PrmAccountingEntityOption
					invoked.AccountingEntity			= PrmAccountingEntity
					invoked.AccountingEntityGroup		= PrmAccountingEntityGroup
					invoked.PeriodOption				= PrmPeriodOption

					invoked.Period						= PrmPeriod
					invoked.Ledger						= PrmLedger
					invoked.System						= PrmSystem
					invoked.PostThroughDate				= PrmPostThroughDate		

            	if (PrmAccountingEntityOption.Single)
					invoke InitiatePosting PrmAccountingEntity
						invoked.PrmPeriodOption					= PrmPeriodOption

						invoked.PrmGeneralLedgerCalendarPeriod	= PrmPeriod
						invoked.PrmLedger						= PrmLedger
						invoked.PrmSystemCode					= PrmSystem
						invoked.PrmJournalPostingResult			= LocalJournalPostingResultView.JournalPostingResult
						invoked.PrmPostThroughDate				= PrmPostThroughDate		
				else
				if (PrmAccountingEntityOption.Group)
					invoke InitiatePosting PrmAccountingEntityGroup in background
						invoked.PrmPeriodOption					= PrmPeriodOption

						invoked.PrmGeneralLedgerCalendarPeriod	= PrmPeriod
						invoked.PrmLedger						= PrmLedger
						invoked.PrmSystemCode					= PrmSystem				
						invoked.PrmJournalPostingResult			= LocalJournalPostingResultView.JournalPostingResult
						invoked.PrmPostThroughDate				= PrmPostThroughDate		
				else
					invoke InitiatePosting FinanceEnterpriseGroup in background
						invoked.PrmPeriodOption					= PrmPeriodOption

						invoked.PrmGeneralLedgerCalendarPeriod	= PrmPeriod
						invoked.PrmLedger						= PrmLedger
						invoked.PrmSystemCode					= PrmSystem
						invoked.PrmJournalPostingResult			= LocalJournalPostingResultView.JournalPostingResult
						
		FixDimensionOrder is an Instance Action
			
			Action Rules
				if (ProjectOrder entered)
					if (AccountingEntityOrder   = (ProjectOrder + 2)
					or  AccountingUnitOrder     = (ProjectOrder + 2)
					or  FinanceDimension1Order  = (ProjectOrder + 2)
					or  FinanceDimension2Order  = (ProjectOrder + 2)
					or  FinanceDimension3Order  = (ProjectOrder + 2)	
					or  FinanceDimension4Order  = (ProjectOrder + 2)	
					or  FinanceDimension5Order  = (ProjectOrder + 2)	
					or  FinanceDimension6Order  = (ProjectOrder + 2)	
					or  FinanceDimension7Order  = (ProjectOrder + 2)	
					or  FinanceDimension8Order  = (ProjectOrder + 2)	
					or  FinanceDimension9Order  = (ProjectOrder + 2)	
					or  FinanceDimension10Order = (ProjectOrder + 2))
						if (AccountingEntityOrder   != (ProjectOrder + 1)
						and AccountingUnitOrder     != (ProjectOrder + 1)
						and FinanceDimension1Order  != (ProjectOrder + 1)
						and FinanceDimension2Order  != (ProjectOrder + 1)
						and FinanceDimension3Order  != (ProjectOrder + 1)	
						and FinanceDimension4Order  != (ProjectOrder + 1)	
						and FinanceDimension5Order  != (ProjectOrder + 1)	
						and FinanceDimension6Order  != (ProjectOrder + 1)	
						and FinanceDimension7Order  != (ProjectOrder + 1)	
						and FinanceDimension8Order  != (ProjectOrder + 1)	
						and FinanceDimension9Order  != (ProjectOrder + 1)	
						and FinanceDimension10Order != (ProjectOrder + 1))
							if (AccountingEntityOrder > ProjectOrder)
								AccountingEntityOrder -= 1
							if (AccountingUnitOrder > ProjectOrder)
								AccountingUnitOrder -=1
							if (FinanceDimension1Order > ProjectOrder)
								FinanceDimension1Order -= 1
							if (FinanceDimension2Order > ProjectOrder)
								FinanceDimension2Order -= 1
							if (FinanceDimension3Order > ProjectOrder)
								FinanceDimension3Order -= 1
							if (FinanceDimension4Order > ProjectOrder)
								FinanceDimension4Order -= 1
							if (FinanceDimension5Order > ProjectOrder)
								FinanceDimension5Order -= 1
							if (FinanceDimension6Order > ProjectOrder)
								FinanceDimension6Order -= 1
							if (FinanceDimension7Order > ProjectOrder)
								FinanceDimension7Order -= 1
							if (FinanceDimension8Order > ProjectOrder)
								FinanceDimension8Order -= 1
							if (FinanceDimension9Order > ProjectOrder)
								FinanceDimension9Order -= 1
							if (FinanceDimension10Order > ProjectOrder)
								FinanceDimension10Order -= 1																																																																

		SetSystemDimensionFlags is an Instance Action
			restricted
			
			Parameters
				PrmDimension				is Numeric 2
					default label is "Dimension"
				PrmSystemDimDefined			is Boolean
					default label is "SystemDimensionDefined"
				PrmDefaultZoneDimDefined    is Boolean
					default label is "DefaultZoneDimensionDefined"
				PrmEnterpriseZoneDimDefined is Boolean
					default label is "EnterpriseZoneDimensionDefined"
					
			Parameter Rules
				PrmDimension
					required
					constraint (PrmDimension < 12)  
						"InvalidDimensionNumber"
						
			Action Rules
				if (PrmDimension = 1)
					SystemDim1Defined		  = PrmSystemDimDefined
					DefaultZoneDim1Defined    = PrmDefaultZoneDimDefined
					EnterpriseZoneDim1Defined = PrmEnterpriseZoneDimDefined	
				else
				if (PrmDimension = 2)
					SystemDim2Defined		  = PrmSystemDimDefined
				else
				if (PrmDimension = 3)
					SystemDim3Defined		  = PrmSystemDimDefined					
				else
				if (PrmDimension = 4)
					SystemDim4Defined		  = PrmSystemDimDefined	
				else
				if (PrmDimension = 5)
					SystemDim5Defined		  = PrmSystemDimDefined
				else
				if (PrmDimension = 6)
					SystemDim6Defined		  = PrmSystemDimDefined
				else
				if (PrmDimension = 7)
					SystemDim7Defined		  = PrmSystemDimDefined					
				else
				if (PrmDimension = 8)
					SystemDim8Defined		  = PrmSystemDimDefined	
				else
				if (PrmDimension = 9)
					SystemDim9Defined		  = PrmSystemDimDefined	
				else
				if (PrmDimension = 10)
					SystemDim10Defined		  = PrmSystemDimDefined
				else																							
				if (PrmDimension = 11)
					SystemProjectDefined	  = PrmSystemDimDefined

		UpdateSystemCodes is an Instance Action
			Action Rules
				for each GeneralLedgerSystemCodeDeleteRel
					invoke Update each.GeneralLedgerSystemCode
						invoked.RecordType				= 0
	 					invoked.UsedByATransaction		= false


				include LoadPredefinedSystemData

		UpdateEventCodes is an Instance Action
			Action Rules
				for each GeneralLedgerEventDeleteRel
					invoke Update each.GeneralLedgerEvent
						invoked.SourceType				= 0
	 					invoked.UsedByATransaction		= false


				include LoadPredefinedEventsData
				
		UpdateSubTypeCodes is an Instance Action
			Action Rules
				for each AccountSubTypeDeleteRel
					invoke Update each.AccountSubType set
						invoked.SourceType				= 0
				include LoadPredefinedAccountSubTypeData

		ValidateCodeBlockRelation is an Instance Action
			default label is "UpdateFinanceStructureRelationDefinition"
			Local Fields
				LocalCodeBlockRelationString	is Alpha up to 1000
				
			Action Rules
				for each ValidateCodeBlockRelationStringRel
					LocalCodeBlockRelationString	+= each.DerivedCodeBlockRelationString
				if (!FinanceEnterpriseGroupExtRel exists)
					invoke Create FinanceEnterpriseGroupExt
						invoked.CodeBlockRelationString		= LocalCodeBlockRelationString
				else
					invoke Update FinanceEnterpriseGroupExtRel
						invoked.CodeBlockRelationString		= LocalCodeBlockRelationString

		RebalanceFinanceDimension1Zones is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCalendarPeriod			is a GeneralLedgerCalendarPeriod
					default label is "BeginCalendarPeriod"
				PrmYearOption				is Numeric 1
	    			States
						AllYears			value is 1
						SpecificBeginYear	value is 2	
				PrmGeneralLedgerCloseYear   is like GeneralLedgerCloseYear
					default label is "FiscalYear"			
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
						"FinanceEnterpriseGroupIsRequired"
					constraint (!first UnpostedGeneralLedgerJournalControlRel exists)
						"CannotRebalanceWhenReleaseJournalsExist"
				PrmCalendarPeriod
					constraint (PrmCalendarPeriod.PeriodType.EndDate)
						"CalendarPeriodMustBeEndDateType"
					constraint (PrmCalendarPeriod.Year <= PrmGeneralLedgerCloseYear)							
						"FirstPeriodEndDateMustIncludeYearWhichIsLessThanOrEqualToBeginFiscalYear"					
					if (PrmGeneralLedgerCloseYear entered)				
						required										
							"MustEnterFirstPeriodEndingDateForBeginYear"		
				PrmGeneralLedgerCloseYear	
			Local Fields
            Instance Selection
                where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup)
			Action Rules
                Instance Rules
					for each distinct FEGAndEntity in GeneralLedgerTotalRel					
						invoke RebalanceFinanceDimension1Zones each.AccountingEntity
							invoked.PrmCalendarPeriod		= PrmCalendarPeriod
							invoked.PrmGeneralLedgerCloseYear	= PrmGeneralLedgerCloseYear

		FixPostInProcessJournals is an Instance Action
			valid when (JournalNeedsFix)
			Action Rules






				invoke PostInProcessJournals GeneralLedgerJournalControl in background	
					invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup


		RefreshGeneralLedgerTotalCube is an Instance Action
			default label is "RefreshGlobalLedgerTotalCube"
			restricted
			Action Rules
				invoke Refresh GeneralLedgerTotalCubeRel in background
						
		InvokeUpdateZonePayablesAndReceivables is an Instance Action
			restricted
						
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
		        PrmAccountingEntityOption	is Numeric 1
		        	default label is "AccountingEntityOption"
		        	States
		        		All				value is 1
		        		Single			value is 2
		        		Group			value is 3
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingEntityGroup	is a AccountingEntityGroup
					default label is "AccountingEntityGroup"
				PrmPeriod					is like GeneralLedgerCalendarPeriod
					default label is "Period"
				PrmPeriodOption				is Numeric 1
					default label is "PeriodOption"
					States
						CurrentPeriod			value is 1
						PreviousPeriod			value is 2
						NextPeriod				value is 3
						SpecifyYearAndPeriod	value is 4
				
			Local Fields	
				LocalAccountingEntity		is a AccountingEntity		
				
			Action Rules

            	if (PrmAccountingEntityOption.Single)
					invoke UpdateZonePayablesAndReceivablesBalance PrmAccountingEntity
						invoked.PrmPeriodOption					= PrmPeriodOption
						invoked.PrmGeneralLedgerCalendarPeriod	= PrmPeriod
				else
				if (PrmAccountingEntityOption.Group)
					invoke UpdateZonePayablesAndReceivablesBalance PrmAccountingEntityGroup in background
						invoked.PrmPeriodOption					= PrmPeriodOption
						invoked.PrmGeneralLedgerCalendarPeriod	= PrmPeriod
				else
					for each distinct AccountingEntity in GeneralLedgerZoneTotalRel		
						LocalAccountingEntity = each.AccountingEntity		
						invoke UpdateZonePayablesAndReceivablesBalance LocalAccountingEntity		
							invoked.PrmPeriodOption					= PrmPeriodOption
							invoked.PrmGeneralLedgerCalendarPeriod	= PrmPeriod

						
		FixEntityOrder is an Instance Action
			valid when (EntityAfterUnitOrder)
			Action Rules			
				ChangeStructureOrderFrom		= AccountingUnitOrder
				ChangeStructureOrderTo			= AccountingEntityOrder
				StructureNotUpdated	= true
				include ChangeStructureOrder

				LocalTempCodeBlockOrder		= FixEntityLedgerBlockRelationRel.FromField
				invoke SystemUpdate FixEntityLedgerBlockRelationRel
					invoked.FromField		= FixEntityLedgerBlockRelationRel.ToField
					invoked.ToField			= LocalTempCodeBlockOrder

				invoke RebuildRelationDetailOnRestructure CodeBlockRelationDetail  in background
					invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.PrmCodeBlockRelation	= FixEntityLedgerBlockRelationRel.CodeBlockRelation
				UpdateStructureRowAndDetail	= true
				include CreateStructureRow
				include CreateStructureDetail
				invoke ValidateCodeBlockRelation FinanceEnterpriseGroup
				initialize ChangeStructureOrderFrom
				initialize ChangeStructureOrderTo

#ifdef module ap
		RebuildPayGroupCompanyRelationshipRecords is an Instance Action
			confirmation required
				"AllPayGroupCompanyRelationshipRecordsWillBeDeletedAndNewValidPairingsCreated;DoYouWishToContinue?"
			Action Rules
				invoke Delete AllPayGroupCompanyRelationshipsRel
				for each AllPayablesProcessLevelsRel
					invoke Create each.PayGroupCompanyRelationshipRel
#endif			

		FixEntityPeriod is an Instance Action
			restricted
						
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCloseConfiguration	    is a GeneralLedgerCloseConfiguration
					default label is "CloseConfiguration"
				PrmYear						is like GeneralLedgerCloseYear
					default label is "GlobalLedgerCloseYear"
				PrmYearRange				is a CloseYearRange
					default label is "YearRange"
				PrmYearOption				is Numeric 1
					default label is "YearOption"
					States
						Single					value is 1
						Range					value is 2

			Local Fields
				LocalYear					is a GeneralLedgerCloseYear	

			Action Rules

            	if (PrmYearOption.Single)
					invoke FixEntityPeriod CodeBlockRelationDetail in background
						invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmCodeBlockRelation	= LedgerToEntityCodeBlockRelationRel.CodeBlockRelation
						invoked.PrmCloseConfiguration	= PrmCloseConfiguration
						invoked.PrmYear					= PrmYear
				else
					LocalYear				= PrmYearRange.Begin
					while (LocalYear			<= PrmYearRange.End)
						invoke FixEntityPeriod CodeBlockRelationDetail in background
							invoked.PrmEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.PrmCodeBlockRelation	= LedgerToEntityCodeBlockRelationRel.CodeBlockRelation
							invoked.PrmCloseConfiguration	= PrmCloseConfiguration
							invoked.PrmYear					= LocalYear
						LocalYear				+= 1
						
		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location" 
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"	
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord			

		UpdateFinancialCubes is a Set Action
			restricted
			Parameters
				UpdateFinanceEnterpriseGroup					is Boolean
				FinanceEnterpriseGroupOption					is a ProjectCubeUpdateOption
				UpdateGeneralLedgerTotal						is Boolean
					default label is "UpdateGlobalLedgerTotal"
				GeneralLedgerTotalOption    					is a ProjectCubeUpdateOption
					default label is "GlobalLedgerTotalOption"
				UpdateDEPMDimensionMap							is Boolean
				DEPMDimensionMapOption							is a ProjectCubeUpdateOption
				UpdateAllocationTransactionDetail				is Boolean
				AllocationTransactionDetailOption				is a ProjectCubeUpdateOption
				UpdateDailyPeriodTotal							is Boolean
					default label is "ADBTotal"
				DailyPeriodTotalOption							is a ProjectCubeUpdateOption
					default label is "ADBTotalOption"
			Parameter Rules
				UpdateFinanceEnterpriseGroup
					initial value is true
				FinanceEnterpriseGroupOption
					initial value is 1 
				UpdateGeneralLedgerTotal
					initial value is true
				GeneralLedgerTotalOption
					initial value is 1 
				UpdateDEPMDimensionMap
					initial value is true
				DEPMDimensionMapOption
					initial value is 1 
				UpdateAllocationTransactionDetail
					initial value is true
				AllocationTransactionDetailOption
					initial value is 1 
				UpdateDailyPeriodTotal
					initial value is actor.context.FinanceEnterpriseGroup.UseAverageDailyBalance	
				DailyPeriodTotalOption
					initial value is 1 

			Action Rules
				Set Rules
					Exit Rules
						if (UpdateFinanceEnterpriseGroup)
							if (FinanceEnterpriseGroupOption.Refresh)
								invoke Refresh FinanceEnterpriseGroupAnalyticCubeRel in background
							else
								invoke Reload FinanceEnterpriseGroupAnalyticCubeRel in background
						if (UpdateGeneralLedgerTotal)
							if (GeneralLedgerTotalOption.Refresh)
								invoke Refresh GeneralLedgerTotalAnalyticCubeRel in background
							else
								invoke Reload GeneralLedgerTotalAnalyticCubeRel in background
						if (UpdateDEPMDimensionMap)
							if (DEPMDimensionMapOption.Refresh)
								invoke Refresh DEPMDimensionMapAnalyticCubeRel in background
							else
								invoke Reload DEPMDimensionMapAnalyticCubeRel in background
						if (UpdateAllocationTransactionDetail)
							if (AllocationTransactionDetailOption.Refresh)
								invoke Refresh AllocationTransactionDetailAnalyticCubeRel in background
							else
								invoke Reload AllocationTransactionDetailAnalyticCubeRel in background
						if (UpdateDailyPeriodTotal)
							if (DailyPeriodTotalOption.Refresh)
								invoke Refresh DailyPeriodTotalAnalyticCubeRel in background
							else
								invoke Reload DailyPeriodTotalAnalyticCubeRel in background

		TurnOnUseIDMForAttachmentsSet is a Set Action
			restricted
			Instance Selection
				where (not EnableIDMForAttachments)
			Action Rules
				Instance Rules
					EnableIDMForAttachments = true


		TurnOnUseIDMForAttachments is an Instance Action 
			restricted


		TurnOffUseIDMForAttachmentsSet is a Set Action 
			restricted


		TurnOffUseIDMForAttachments is an Instance Action 
			restricted


#ifdef module idm

		CreateBusinessClassAttachmentsToIDM is a Set Action
			restricted
			Action Rules
				Instance Rules
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.AccountAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.BillingInvoiceAttachment	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.BillingInvoiceCommentAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.BillingInvoiceLineAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.BillingStandardCommentAttachment		
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.BudgetChangeOrderComment	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.BudgetChangeOrderLineComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashPaymentFormat
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CloseTaskDocumentation
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ClosePeriodTaskDocumentation
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractChangeOrder
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractDeliverableComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractDocument
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractLine
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractLineAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractLineComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractMilestoneComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractQuestion
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractQuestionAnswer
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractRedlineDocument
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractSubcontractorComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractSubcontractorPayment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractTermAndConditionAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractTermVersionTermAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ContractVersion				
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CustodialAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinanceCompany
					include IDM.CreateBusinessClassAttachmentsToIDM
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinanceResource
					include IDM.CreateBusinessClassAttachmentsToIDM
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinanceResourceDialogue
					include IDM.CreateBusinessClassAttachmentsToIDM
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinanceResourceSchedule
					include IDM.CreateBusinessClassAttachmentsToIDM
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FranchiseContractComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.GeneralLedgerDepartmentJournalDocument
					include IDM.CreateBusinessClassAttachmentsToIDM
						replace BusinessClassName with BusinessClassAttachmentsToIDM.GeneralLedgerJournalDocument
					include IDM.CreateBusinessClassAttachmentsToIDM    
                        replace BusinessClassName with BusinessClassAttachmentsToIDM.GrantReportingSettings   
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.IntercompanyBillingDocumentAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.IntercompanyBillingDocumentHeader
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ItemAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ItemCommentAttachment												
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.KitchenOrderInstruction
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.LeaseAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.LeaseComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.LeaseInvoiceComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.LeasePaymentDetailComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.MatchInvoiceMessageComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PayablesInvoice
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.SubleaseAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.SubleaseBillingInvoice
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.SubleaseComment						
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PayablesInvoiceDocument
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PurchaseOrderComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PurchaseOrderLineComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PurchaseOrderReceiptComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PurchaseOrderReceiptLineComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.RequisitionComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.RequisitionLineComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.StandardCommentCode
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectAssignmentComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectAssignmentLaborComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectAssignmentEffortComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectContractComment
					include IDM.CreateBusinessClassAttachmentsToIDM 
                        replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectContractInvoice
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectContractInvoiceComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectContractInvoiceLineComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectContractMilestoneComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectFSDeliverableComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectFundingSourceComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectFundingSourceChangeRequest
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectContractChangeRequest
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.POReceiptAdjustmentAndInspectionComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.POReceiptAdjustmentAndInspectionLineComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProcurementCardStatementTransactionComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PurchaseOrderInterfaceComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PurchaseOrderLineSourceComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.PurchasingVendorAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinanceDimension2Comment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectContractModification
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ProjectPerformanceObligationsComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.SalesRepresentativeAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReceivableInvoiceAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.OrderEntryCustomerAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReceivableInvoiceBatchAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReceivableOperatorAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReceivablePaymentAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReceivablePaymentHeaderAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CustomerRepresentativeComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CustomerRepresentativeMessage
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CustomerBillToAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CustomerAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CreditAnalystAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CompanyCustomerAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CompanyCustomerCommentAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CompanyCustomerContactAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.Asset
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.AssetAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.AssetComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.AssetCommentImport
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.AssetImpairment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.AssetLocation
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.RecipeInstruction
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReconciliationAccountComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReconciliationDetail
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReconciliationDetailComment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReconciliationPeriodDetail
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.RecurringJournalDocument
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.VendorAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.VendorDiversity
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashAccountComment	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashAccountCorrespondence	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashAccountLockboxComment	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashAccountResourceComment	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashManagementAccountDocument	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinancialInstitutionBranchContact	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinancialInstitutionBranchDocument
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.FinancialInstitutionDocument
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.OtherForecastTransaction	
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashLedgerCashReceiptHeader
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashLedgerElectronicFundsTransferTransaction
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashLedgerPayablesPayment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashLedgerPayment
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.CashLedgerTransaction
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.StudentActivityBankAccount
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.StudentActivityBankTransaction
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.StudentActivityReceipt
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.StudentActivityVendorInvoice
					include IDM.CreateBusinessClassAttachmentsToIDM	
						replace BusinessClassName with BusinessClassAttachmentsToIDM.ReceivableApplicationAdjustmentAttachment
					include IDM.CreateBusinessClassAttachmentsToIDM
						replace BusinessClassName with BusinessClassAttachmentsToIDM.MobileSupplyChainDeliveryEventAttachment
						
		MingleCreateFSMIDMUser is a Set Action 
			restricted

		CreateConfigurationParameterForFSMIDMUserGUID is a Set Action
			restricted
			Instance Selection
				where (false)

			Action Rules
				Empty Set Rules
					if (FSMIDMUserIdentityActorRel exists)
						invoke Create ConfigurationParameter
							resume on error
							invoked.ConfigurationParameter.ConfigurationID = "config"
							invoked.ConfigurationParameter.Name = "IDM_AUTH_OVERRIDE_USER"
							invoked.Type = 8222 
							invoked.Value = FSMIDMUserIdentityActorRel.Identity[6:200]

		UpdateCashManagementIDMAttributes is a Set Action
			default label is untranslatable
			restricted

			Local Fields
				LocalAsyncId is an AsyncActionRequest

			Action Rules
				Set Rules
					Entrance Rules
						LocalAsyncId = current async action request id
	
				Instance Rules
					if (CashManagementAccountDocumentRel exists)
						invoke UpdateCashManagementAccountDocumentIDMAttributes CashManagementAccountDocument in background
							assign async action request id to LocalAsyncId
							resume on error

					if (FinancialInstitutionDocumentRel exists)
						invoke UpdateFinancialInstitutionDocumentIDMAttributes FinancialInstitutionDocument in background
							run after LocalAsyncId
							assign async action request id to LocalAsyncId
							resume on error

					if (FinancialInstitutionBranchDocumentRel exists)
						invoke UpdateFinancialInstitutionBranchDocumentIDMAttributes FinancialInstitutionBranchDocument in background
							run after LocalAsyncId
							resume on error

					end set action instance loop
#endif	
 	
		CreateIntegrationUsers is a Set Action
			restricted
			Instance Selection
				where (false)

			Local Fields
				LocalSendBodForFSMIDMActor is Boolean

			Action Rules
				Empty Set Rules
					if (SyntellisActorRel not exists)
						invoke MingleCreate Actor
							invoked.Actor = "SYNTELLIS.INTEGRATION"
							invoked.PersonName.GivenName = "SYNTELLIS.INTEGRATION"
							invoked.PersonName.FamilyName = "SYNTELLIS.INTEGRATION"
							invoked.MingleId = "SYNTELLIS.INTEGRATION"
							invoked.ContactInfo.EmailAddress = "invalidsyntellis@infor.com"
						if (SyntellisActorRoleRel not exists)
							invoke AssignRoleToActor SyntellisActorRel
								invoked.Actor = "SYNTELLIS.INTEGRATION"
								invoked.Role = "FSMSyntellisInquiry_ST"
					else 
						if (SyntellisActorRoleRel not exists)
							invoke AssignRoleToActor SyntellisActorRel
								invoked.Actor = "SYNTELLIS.INTEGRATION"
								invoked.Role = "FSMSyntellisInquiry_ST"

#ifdef module idm
					if (FSMIDMUserRel not exists)
						invoke MingleCreate Actor
							resume on error
								log "MingleCreateFor<FSMIDMActor>Failed;ErrorMessage:<error message>"
							invoked.Actor = FSMIDMActor
							invoked.PersonName.GivenName = FSMIDMActor
							invoked.PersonName.FamilyName = FSMIDMActor
							invoked.MingleId = FSMIDMActor
							if (IsGovCloud)
								invoked.ContactInfo.EmailAddress = "DoNotDelete@inforgov.com"
							else
								invoked.ContactInfo.EmailAddress = "DoNotDelete@inforcloudsuite.com"
					
					if (IDMUserActorRoleRel not exists)
						invoke AssignRoleToActor FSMIDMUserRel
							resume on error
							invoked.Actor = FSMIDMActor
							invoked.Role  = IDMUserRole
						LocalSendBodForFSMIDMActor = true

					if (ApplicationAdministratorActorRoleRel not exists)
						invoke AssignRoleToActor FSMIDMUserRel
							resume on error
							invoked.Actor = FSMIDMActor
							invoked.Role  = ApplicationAdministratorRole
						LocalSendBodForFSMIDMActor = true
					
					if (LocalSendBodForFSMIDMActor
					or  FSMIDMUserIdentityActorRel not exists)
						invoke SendBODForActor FSMIDMUserRel
							resume on error
								log "SendBODForActor<FSMIDMActor>Failed;ErrorMessage:<error message>"
#endif

		RefreshFinancialCubes is a Set Action
			restricted
			Parameters
				UpdateFinanceEnterpriseGroup					is Boolean
				UpdateGeneralLedgerTotal						is Boolean
					default label is "UpdateGlobalLedgerTotal"
				UpdateDEPMDimensionMap							is Boolean	
				UpdateDailyPeriodTotal							is Boolean		
					default label is "ADBTotal"
			Parameter Rules
				UpdateFinanceEnterpriseGroup
					initial value is true
				UpdateGeneralLedgerTotal
					initial value is true
				UpdateDEPMDimensionMap
					initial value is true
				UpdateDailyPeriodTotal
					initial value is actor.context.FinanceEnterpriseGroup.UseAverageDailyBalance
				
			Action Rules
				Set Rules
					Exit Rules
						if (UpdateFinanceEnterpriseGroup)
							invoke Refresh FinanceEnterpriseGroupAnalyticCubeRel in background
						if (UpdateGeneralLedgerTotal)
							invoke Refresh GeneralLedgerTotalAnalyticCubeRel in background
						if (UpdateDEPMDimensionMap)
							invoke Refresh DEPMDimensionMapAnalyticCubeRel in background
						if (UpdateDailyPeriodTotal)
							invoke Refresh DailyPeriodTotalAnalyticCubeRel in background

		CopyActorContext is an Instance Action
			Parameters
				CopyFromActor		is an Actor
				CopyToActor			is an Actor
				OverwriteExisting	is Boolean
				
			Parameter Rules
			
				CopyFromActor
					required
					LocalCopyFromActor		= CopyFromActor
					LocalCopyToActor		= CopyToActor	
					constraint (HasSecurityActorContextRecords)
						"ActorHasNoSecurityRelatedActorContextRecords"
				CopyToActor
					required
					constraint (CopyToActor != CopyFromActor)
						"MustCopyToADifferentActor"
				
			Action Rules

				for each ActorContextForActorAndSecurityGroupsRel
					LocalCopyContextProperty = each.ContextProperty
					if (!CopyActorContextRel exists)
						invoke Create ActorContext
							invoked.Actor			= CopyToActor
							invoked.ContextProperty = LocalCopyContextProperty
							invoked.Value			= each.Value
					else
					if (OverwriteExisting)
						invoke Update CopyActorContextRel
							invoked.Value			= each.Value
							
		FindInvalidDimensionSequence is an Instance Action
		    completion message is "ActionSubmitted"
		    Local Fields
		    	LocalBackgroundGroup		is AlphaUpper 30
		    Action Rules
		    	LocalBackgroundGroup = "FINDINVALIDDIMENSIONS"
		        if (FinanceDimension1Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension1 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension2Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension2 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension3Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension3 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension4Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension4 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension5Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension5 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension6Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension6 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension7Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension7 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension8Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension8 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension9Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension9 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
		        if (FinanceDimension10Label entered)
		            invoke FindInvalidSequenceNumbers FinanceDimension10 in background group(LocalBackgroundGroup)
		                invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
			
				invoke CreateBusinessClassGroup FinanceDimensionWithInvalidSequence
					run after background group (LocalBackgroundGroup)
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup 

		FixGeneralLedgerTotalDimensionCode is an Instance Action
			default label is "FixGlobalLedgerTotalDimensionCode"
			completion message is "ActionSubmitted"
			confirmation required
				"ThisActionWillFixThe_Sequence\NumberOnDimensionsAndCorrectThe_Dimension\CodeOn_General\Ledger\Total;_SuspendTransactionInterfacesAndPostingUntilComplete"
			Parameters
				PrmStartingPeriod		  is a GeneralLedgerCalendarPeriod
					default label is "StartingPeriod"
		        PrmEndingPeriod			  is a GeneralLedgerCalendarPeriod
		        	default label is "EndingPeriod"
				PrmChartSection			  is a ChartSection
					default label is "ChartSection"
				PrmAccountingEntityOption is Numeric 1
					default label is "<AccountingEntityLabel>Option"
					States
						All				  value is 0
						Single			  value is 1
						Group			  value is 2
				PrmAccountingEntity		  is an AccountingEntity
					default label is "<AccountingEntityLabel>"
				PrmAccountingEntityGroup  is an AccountingEntityGroup
					default label is "<AccountingEntityLabel>Group"
				PrmDetailTransactionThreshold is Numeric 2
					default label is "DetailTransactionThreshold"
					
			Parameter Rules
				PrmEndingPeriod
					constraint (PrmEndingPeriod >= PrmStartingPeriod)
						"InvalidPeriodRange"
				PrmAccountingEntity
					constraint (PrmAccountingEntityOption.Single)
						"<AccountingEntityLabel>OnlyValidWith_SingleOption"
				PrmAccountingEntityGroup
					constraint (PrmAccountingEntityOption.Group)
						"<AccountingEntityLabel>_GroupOnlyValidWith_GroupOption"
				PrmDetailTransactionThreshold
					initial value is 5
					default to 5
					
			Local Fields
				LocalAsyncId				is an AsyncActionRequest
				LocalBackgroundGroup		is AlphaUpper 30
				
			Action Rules
				constraint (FinanceDimensionWithInvalidSequence set exists)
					"NoDimensionsExistWithInvalid_SequenceNumber"
				invoke FixDimensions FinanceDimensionWithInvalidSequence
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
				
				LocalBackgroundGroup 		= "FIXINVALIDDIMCODE"
				if (!PrmAccountingEntityOption.Group)		
					invoke FixDimensionCode GeneralLedgerTotal in background group(LocalBackgroundGroup)
						run after LocalAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmStartingPeriod		  = PrmStartingPeriod
						invoked.PrmEndingPeriod			  = PrmEndingPeriod
						invoked.PrmChartSection			  = PrmChartSection
						invoked.PrmAccountingEntity		  = PrmAccountingEntity
						invoked.PrmBusinessClassGroup     = ("_ZFDS_GLTOT_GROUP_" + FinanceEnterpriseGroup)
						invoked.PrmStartTime			  = current timestamp
						invoked.PrmDetailTransactionThreshold = PrmDetailTransactionThreshold
				else
					for each PrmAccountingEntityGroup.AccountingEntityGroupMember set
						if (each.AccountingEntity.Status.Active)					
							invoke FixDimensionCode GeneralLedgerTotal in background group(LocalBackgroundGroup)
								run after LocalAsyncId
								invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
								invoked.PrmStartingPeriod		  = PrmStartingPeriod
								invoked.PrmEndingPeriod			  = PrmEndingPeriod
								invoked.PrmChartSection			  = PrmChartSection
								invoked.PrmAccountingEntity		  = each.AccountingEntity
								invoked.PrmBusinessClassGroup     = ("_ZFDS_GLTOT_GROUP_" + FinanceEnterpriseGroup)
								invoked.PrmStartTime			  = current timestamp
								invoked.PrmDetailTransactionThreshold = PrmDetailTransactionThreshold										

				invoke FixDimensionCode GeneralLedgerTransaction
					run after background group (LocalBackgroundGroup)
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmBusinessClassGroup     = ("_ZFDS_GLTXN_GROUP_" + FinanceEnterpriseGroup)
					
				invoke FixDimensionCode GLTransactionDetail
					run after LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmBusinessClassGroup     = ("_ZFDS_GLTXND_GROUP_" + FinanceEnterpriseGroup)							

        PurgeTransactionDetailForGroup is an Instance Action
			restricted
			run in background
			
			Parameters
				PrmAccountingEntityGroup		is an AccountingEntityGroup
					default label is "AccountingEntityGroup"
				PrmPostingDateRange				is a DateRange
					default label is "PostingDateRange"
				PrmIncludeProjectRecordsInPurge	is Boolean
					default label is "IncludeProjectRecordsInPurge"
			Parameter Rules
				PrmAccountingEntityGroup
					required
				PrmPostingDateRange
					required
			
			Local Fields
				LocalInvokeCount			is Numeric 4
						
            Action Rules

				for each PrmAccountingEntityGroup.AccountingEntityGroupMember set
					invoke PurgeHistoryDetail GLTransactionDetail in background
						invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.PrmBusinessClassName   	 		= "GLTransactionDetail"
						invoked.PrmAccountingEntity		 		= each.AccountingEntity
						invoked.PrmPostingDateRange		 		= PrmPostingDateRange
						invoked.PrmIncludeProjectRecordsInPurge	= PrmIncludeProjectRecordsInPurge
					LocalInvokeCount += 1
					if (LocalInvokeCount = 50)
						commit transaction
						initialize LocalInvokeCount

        PurgeNotToBePostedDetailForGroup is an Instance Action
			restricted
			run in background
			
			Parameters
				PrmAccountingEntityGroup	is an AccountingEntityGroup
					default label is "AccountingEntityGroup"
				PrmPostingDateRange			is a DateRange
					default label is "PostingDateRange"
					
			Parameter Rules
				PrmAccountingEntityGroup
					required
				PrmPostingDateRange
					required
			
			Local Fields
				LocalInvokeCount			is Numeric 4
						
            Action Rules

				for each PrmAccountingEntityGroup.AccountingEntityGroupMember set
					invoke PurgeNotToBePostedDetail GLTransactionDetail in background
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmAccountingEntity		  = each.AccountingEntity
						invoked.PrmPostingDateRange		  = PrmPostingDateRange
					LocalInvokeCount += 1
					if (LocalInvokeCount = 50)
						commit transaction
						initialize LocalInvokeCount

		TurnOnFundAccounting is an Instance Action
			valid when (!FundAccounting)
			Parameters
				PrmFundDimension 				is Numeric 2
					default label is "FundDimension"
					States
						AccountingUnit		 	value is 1
						Dimension1	 			value is 2
			Parameter Rules
				PrmFundDimension
					initial value is FundDimension
					required
					
			Entrance Rules
			
					
			Action Rules
				FundDimension = PrmFundDimension
				if (PrmFundDimension.AccountingUnit)
					constraint (AccountingUnitRequired)
						"AccountingUnitMustBeSetAsRequiredFor_Fund_Accounting"
				else
					constraint (FinanceDimension1Required)
						"Dimension1MustBeSetAsRequiredFor_Fund_Accounting"
				FundAccounting = true

		TurnOffFundAccounting is an Instance Action
			valid when (FundAccounting)
			confirmation required
			Action Rules
				FundAccounting = false

#ifdef module cam
		TurnOnCustodialAccountManagement is an Instance Action
			valid when (!CustodialAccountManagement)
			confirmation required
			Action Rules
				if (FinanceDimension10Label entered)
					confirmation required
						"FinanceDimension10HasAlreadyBeenSetup,_doYouWantToContinue?"

				constraint (FinanceDimension10Label entered)
					"SetupFinanceDimension10AndThenTurnOnCustodialAccountManagement"
				
				constraint (FundAccounting)
					"FundAccountingMustBeTurnedOnToUseCustodialAccountManagement"
					
				CustodialAccountManagement = true
				log untranslatable:"TurnOnCustodialAccountManagement;CustodialAccountManagement:<CustodialAccountManagement>"

		TurnOffCustodialAccountManagement is an Instance Action
			valid when (CustodialAccountManagement)
			confirmation required
			Action Rules
				constraint (CustodialActivityRel not exists)
					"CannotTurnOffCustodialAccountManagement;ActivityExists"				
				CustodialAccountManagement = false
				log untranslatable:"TurnOffCustodialAccountManagement;CustodialAccountManagement:<CustodialAccountManagement>"
#endif

		InterEntityNetting is a Set Action
			restricted 
			Parameters 	
				PrmFinanceEnterpriseGroup 			is a FinanceEnterpriseGroup 
				PrmAccountingEntityOptions 			is Numeric 1
					States 
						All							value is 1 
						Single						value is 2
						Group 						value is 3
				PrmAccountingEntityGroup 			is a AccountingEntityGroup
				PrmAccountingEntity 				is a AccountingEntity			
				PrmPeriod							is a GeneralLedgerCalendarPeriod
				PrmPeriodOption						is Numeric 1
					States 
						SpecifyPeriod 				value is 1 
 						AllPeriods 					value is 2	
						PeriodRange					value is 3 		
#ifdef module sharedfinance			
				PrmApprovalCode						is a ApprovalCode  
#endif				
				PrmCreateInPendingApproval			is Boolean 
				PrmStartingPeriod		  			is a GeneralLedgerCalendarPeriod
					default label is "StartingPeriod"
	        	PrmEndingPeriod			 			is a GeneralLedgerCalendarPeriod
		        	default label is "EndingPeriod"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup 
					initial value is actor.context.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup 
						
				PrmAccountingEntityOptions 
					required 
						"<PrmFinanceEnterpriseGroup.AccountingEntityLabel>OptionIsRequired"
				
				PrmAccountingEntity 
					if (PrmAccountingEntityOptions.Single)
						required 
							"<PrmFinanceEnterpriseGroup.AccountingEntityLabel>IsRequired"
						
						LocalFinanceEnterpriseGroup	 = PrmFinanceEnterpriseGroup
						LocalAccountingEntity        = PrmAccountingEntity
						LocalCalendarPeriod			 = PrmPeriod
						constraint (DuplicateNettingJournalRel not exist)
							"UnpostedNettingJournalExistsForAccountingEntity:<LocalAccountingEntity>"
					
					constraint(PrmAccountingEntity.Status.Active)
						"<PrmFinanceEnterpriseGroup.AccountingEntityLabel>IsInactive"	
							
				PrmAccountingEntityGroup 
					constraint (PrmAccountingEntityOptions.Group)
						"CannotEnterGroupIfGroupOptionNotSelected"

					if (PrmAccountingEntityOptions.Group)
						required 
							"<PrmFinanceEnterpriseGroup.AccountingEntityLabel>GroupIsRequired"
				PrmPeriodOption
					required
						"PeriodOptionIsRequired"
				
				PrmPeriod 
					if (PrmPeriodOption.SpecifyPeriod)
						required
							"PeriodIsRequired"
							
					if (PrmAccountingEntityOptions.Single)
						if(PrmPeriod entered)
							LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
							LocalCoreLedger				= PrmFinanceEnterpriseGroup.CoreLedger 
							LocalAccountingEntity 		= PrmAccountingEntity
							LocalCalendarPeriod 		= PrmPeriod 
							constraint (EntityLedgerPeriodRel.OpenPeriod)
								"CannotProcessThisPeriod;PeriodIsClosed"	

				PrmCreateInPendingApproval
					initial value is actor.context.FinanceEnterpriseGroup.NettingJournalApproval
				
				PrmStartingPeriod 
					if (PrmPeriodOption.PeriodRange)
						required 
					else 
						cannot be entered 
							"StartingPeriodCannotBeEnteredIfOptionIsNotPeriodRange" 	
				PrmEndingPeriod
					if(PrmPeriodOption.PeriodRange)
						required
					else 
						cannot be entered 
							"EndingPeriodCannotBeEnteredIfOptionIsNotPeriodRange" 	 
					constraint (PrmEndingPeriod >= PrmStartingPeriod)
						"InvalidPeriodRange"	

#ifdef module sharedfinance			
				PrmApprovalCode
					if (PrmCreateInPendingApproval
					or PrmFinanceEnterpriseGroup.NettingJournalApproval)
						required 
							"ApprovalCodeIsRequired"
						
						LocalFinanceEnterpriseGroup  = PrmFinanceEnterpriseGroup
						LocalApprovalCode			 = PrmApprovalCode
						LocalApprover				 = actor.agent(Employee).Employee
						constraint (!ApprovalCodeResourceByResourceRel exists)
								"PersonCreatingTheJournalCannotBeTheApprover"	
					else 
						constraint (PrmApprovalCode not entered)
							"ApprovalCodeCannotBeEntered"			
#endif			   	
										 		
			Instance Selection	
				where  (PrmFinanceEnterpriseGroup entered
				and		PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup)
			 
			Action Rules
				Instance Rules
	            	if (PrmAccountingEntityOptions.Single)		
						invoke Netting PrmAccountingEntity
							invoked.PrmPeriodOption 				= PrmPeriodOption
							invoked.PrmGeneralLedgerCalendarPeriod	= PrmPeriod	 
							invoked.PrmStartingPeriod				= PrmStartingPeriod	
							invoked.PrmEndingPeriod 				= PrmEndingPeriod
#ifdef module sharedfinance	
							invoked.PrmApprovalCode					= PrmApprovalCode	
#endif							
							invoked.PrmCreateInPendingApproval		= PrmCreateInPendingApproval				
					else
					if (PrmAccountingEntityOptions.Group)
						invoke InitiateNetting PrmAccountingEntityGroup
							invoked.PrmPeriodOption 				 = PrmPeriodOption
							invoked.PrmGeneralLedgerCalendarPeriod   = PrmPeriod 
							invoked.PrmStartingPeriod				 = PrmStartingPeriod	
							invoked.PrmEndingPeriod 				 = PrmEndingPeriod	 
#ifdef module sharedfinance			
							invoked.PrmApprovalCode					 = PrmApprovalCode
#endif							
							invoked.PrmCreateInPendingApproval		 = PrmCreateInPendingApproval
					else
						invoke InitiateNetting PrmFinanceEnterpriseGroup
							invoked.PrmPeriodOption          		 = PrmPeriodOption 
							invoked.PrmGeneralLedgerCalendarPeriod   = PrmPeriod
							invoked.PrmStartingPeriod				 = PrmStartingPeriod	
							invoked.PrmEndingPeriod 				 = PrmEndingPeriod  
							invoked.PrmFinanceEnterpriseGroup		 = PrmFinanceEnterpriseGroup  
#ifdef module sharedfinance			
							invoked.PrmApprovalCode				 	 = PrmApprovalCode
#endif							
							invoked.PrmCreateInPendingApproval		 = PrmCreateInPendingApproval
							
		InitiateNetting is an Instance Action
			
			restricted
			Parameters 
				PrmPeriodOption						is Numeric 1 
					States 
						SpecifyPeriod 				value is 1 
						AllPeriods 					value is 2
						PeriodRange					value is 3 
						
				PrmGeneralLedgerCalendarPeriod 		is a GeneralLedgerCalendarPeriod
				PrmFinanceEnterpriseGroup			is like FinanceEnterpriseGroup  
#ifdef module sharedfinance			
				PrmApprovalCode						is a ApprovalCode  
#endif
				PrmCreateInPendingApproval			is Boolean 
				PrmStartingPeriod		  			is a GeneralLedgerCalendarPeriod
					default label is "StartingPeriod"
	        	PrmEndingPeriod			 			is a GeneralLedgerCalendarPeriod
		        	default label is "EndingPeriod"
				
			Parameter Rules 

			Local Fields 
				LocalActor 							is an Actor 
			
			Action Rules 
				LocalCalendarPeriod			= PrmGeneralLedgerCalendarPeriod
				LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				for each distinct FEGAndEntity in NettingGeneralLedgerTotalRel						
					LocalAccountingEntity = each.AccountingEntity 
					if (DuplicateNettingJournalRel not exist)
						if (each.AccountingEntity.Status.Active)	
							invoke Netting each.AccountingEntity 
								invoked.PrmPeriodOption					= PrmPeriodOption					
								invoked.PrmGeneralLedgerCalendarPeriod	= PrmGeneralLedgerCalendarPeriod
								invoked.PrmStartingPeriod				= PrmStartingPeriod	
								invoked.PrmEndingPeriod 				= PrmEndingPeriod
#ifdef module sharedfinance			
								invoked.PrmApprovalCode			 		= PrmApprovalCode
#endif							
								invoked.PrmCreateInPendingApproval	 	= PrmCreateInPendingApproval
					else
						LocalActor = actor
						send notification
							to LocalActor
							description is "UnPostedInterEntityJournalAlreadyExists"
							detail is "UnPostedInterEntityJournalAlreadyExistsForAccountingEntity:<LocalAccountingEntity>"
														
		CheckLedgerToToAccountingEntity is an Instance Action
			restricted
			Parameters 
				PrmLedger				is like Ledger
				PrmAccountingEntity		is like AccountingEntity
			Action Rules
				LocalLedger 			= PrmLedger
				LocalAccountingEntity	= PrmAccountingEntity
				constraint (CodeBlockRelationDetailForLedgerEntityRel exists)
					"<FinanceEnterpriseGroup>:Invalid<LedgerMessage>_<LocalLedger>For<AccountingEntityLabel>_<LocalAccountingEntity>"
			
		ProcessBatchEdits is an Instance Action 
			restricted
			Action Rules
				LocalGeneralLedgerSystemCode = "PO"
				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					invoke ProcessInterfaceBatchEdits BudgetEditBatch
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup 
						invoked.PrmBusinessClassName		= "PurchaseOrder"
	           															
		TurnOnFrontEndSplit is an Instance Action
			valid when (!FrontEndSplits)
			Parameters
				PrmFundDimension 				is Numeric 2
					default label is "FundDimension"
					States
						AccountingUnit		 	value is 1
						Dimension1	 			value is 2
				PrmUseFundedAmounts				is Boolean
					default label is "UseContractFundedAmounts"
			Parameter Rules
				PrmFundDimension
					initial value is FundDimension
				PrmUseFundedAmounts
					if (PrmUseFundedAmounts)
						confirmation required
							"RememberToRunThe_\Recalculate_\Funding_\Source_\F\E\S_\ExpendituresUtilityAction"
			Action Rules
				if(!FundDimensionExists)
					FundDimension = PrmFundDimension
				if (PrmFundDimension.AccountingUnit)
					constraint (AccountingUnitRequired)
						"AccountingUnitMustBeSetAsRequiredFor_Front_End_Split"
				else
					if(PrmFundDimension.Dimension1)
						constraint (FinanceDimension1Required)
							"Dimension1MustBeSetAsRequiredFor_Front_End_Split"
				FrontEndSplits		= true
				UseFundedAmounts	= PrmUseFundedAmounts

		TurnOffFrontEndSplit is an Instance Action
			valid when (FrontEndSplits)
			confirmation required
			Action Rules
				FrontEndSplits = false

		TurnOnProjectStructureValidation is an Instance Action
			valid when (!ProjectStructureValidation)
			Action Rules
				if (ProjectStructureValidationRel not exists)
					confirmation required
						"ProjectStructureValidationRulesMustBeDefinedIfProjectStructureValidationIsEnabled._Continue?"
				constraint (StructureValidationDimension entered)
					"ProjectStructureValidationCannotBeEnabled;_StructureValidationDimensionRequired"
				ProjectStructureValidation = true

		TurnOffProjectStructureValidation is an Instance Action
			valid when (ProjectStructureValidation)
			confirmation required
				"ProjectStructureValidationWillBeDisabled._Continue?"
			Action Rules
				ProjectStructureValidation = false

#ifdef module ad
		TurnOnAverageDailyBalance is an Instance Action
			default label is "TurnOnADBForAllDimensions"
			valid when (AllowTurnOnAverageDailyBalance)
			Parameters
				ReportingBasis
			Parameter Rules
				ReportingBasis
					required
			Entrance Rules
				if (ADBSelectionExists)
					constraint (AllowADBForAllDimensions)
						"<ADBSelection>IsEnabled;CanOnlyUseOneADBOption."
			Action Rules
				UseAverageDailyBalance = true
				invoke BuildDailyTotalForADB ReportingBasis

		TurnOffADBForAllDimensions is an Instance Action	
			valid when (UseAverageDailyBalance)
			confirmation required
			Action Rules
				UseAverageDailyBalance = false
				invoke TurnOffAverageDailyBalance

		TurnOffAverageDailyBalance is an Instance Action	
			restricted
			Parameters
				ReportingBasis
			Parameter Rules


			Local Fields
				LocalAsyncId				is an AsyncActionRequest
			Action Rules
				initialize LocalAsyncId
				for each AllBasisRel
					if (not each.AverageDailyBalanceStatus.Inactive)
						invoke Update each.ReportingBasis set
							invoked.AverageDailyBalanceStatus = 0	

				invoke PurgeData DailyPeriodTotal in background
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke PurgeData DailyPeriodHierarchy in background
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke PurgeData DailyCalendarPeriod in background
					run after LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
#endif

		RebuildCalendarDateAndPeriod is an Instance Action	
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCalendar						is a GeneralLedgerCalendar
					default label is "Calendar"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is actor.context.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup 

			Local Fields
				LocalRebuildAsyncId				is a AsyncActionRequest

			Action Rules
				invoke PurgeData GeneralLedgerCalendarDate in background
					assign async action request id to LocalRebuildAsyncId
					invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					invoked.PrmCalendar					= PrmCalendar
				invoke BuildCalendarDateAndPeriod GeneralLedgerCalendarPeriod in background
					run after LocalRebuildAsyncId
					invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					invoked.PrmCalendar					= PrmCalendar
					
		RebuildProjectCodeBlockDimension is an Instance Action
			restricted
			Action Rules
				LocalProjectCodeBlockDimension = 1
				if (AccountingEntityOrder entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = AccountingEntityLabel
							invoked.DimensionName  = "ToAccountingEntity"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = AccountingEntityLabel
							invoked.DimensionName  = "ToAccountingEntity"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 2
				if (AccountOrder entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = AccountLabel
							invoked.DimensionName  = "GeneralLedgerChartAccount"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = AccountLabel
							invoked.DimensionName  = "GeneralLedgerChartAccount"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 3
				if (AccountingUnitOrder entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = AccountingUnitLabel
							invoked.DimensionName  = "AccountingUnit"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = AccountingUnitLabel
							invoked.DimensionName  = "AccountingUnit"							
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 5
				if (FinanceDimension1Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension1Label
							invoked.DimensionName  = "FinanceDimension1"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension1Label
							invoked.DimensionName  = "FinanceDimension1"							
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 6
				if (FinanceDimension2Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension2Label
							invoked.DimensionName  = "FinanceDimension2"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension2Label
							invoked.DimensionName  = "FinanceDimension2"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 7
				if (FinanceDimension3Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension3Label
							invoked.DimensionName  = "FinanceDimension3"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension3Label
							invoked.DimensionName  = "FinanceDimension3"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 8
				if (FinanceDimension4Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension4Label
							invoked.DimensionName  = "FinanceDimension4"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension4Label
							invoked.DimensionName  = "FinanceDimension4"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 9
				if (FinanceDimension5Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension5Label
							invoked.DimensionName  = "FinanceDimension5"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension5Label
							invoked.DimensionName  = "FinanceDimension5"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 10
				if (FinanceDimension6Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension6Label
							invoked.DimensionName  = "FinanceDimension6"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension6Label
							invoked.DimensionName  = "FinanceDimension6"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 11
				if (FinanceDimension7Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension7Label
							invoked.DimensionName  = "FinanceDimension7"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension7Label
							invoked.DimensionName  = "FinanceDimension7"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 12
				if (FinanceDimension8Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension8Label
							invoked.DimensionName  = "FinanceDimension8"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension8Label
							invoked.DimensionName  = "FinanceDimension8"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 13
				if (FinanceDimension9Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension9Label
							invoked.DimensionName  = "FinanceDimension9"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension9Label
							invoked.DimensionName  = "FinanceDimension9"
				else
					invoke Delete ProjectCodeBlockDimensionRel
				LocalProjectCodeBlockDimension = 14
				if (FinanceDimension10Order entered)
					if (ProjectCodeBlockDimensionRel exists)
						invoke Update ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension10Label
							invoked.DimensionName  = "FinanceDimension10"
					else
						invoke Create ProjectCodeBlockDimensionRel
							invoked.DimensionLabel = FinanceDimension10Label
							invoked.DimensionName  = "FinanceDimension10"
				else
					invoke Delete ProjectCodeBlockDimensionRel


		CreateCashOffsetsForSelectedRunGroups is a Set Action
			completion message is "CreateCashOffsetsForSelectedRunGroupsSubmitted"
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				SelectRunGroupsLike     	is AlphaUpper 30
				PrmCashOffsetAccount		is a GeneralLedgerChartAccount
					default label is "CashOffsetAccount"
				PrmInterfaceAfterOffset		is Boolean
					default label is "InterfaceAfterOffset"
				PrmAccountingEntity			is an AccountingEntity
					default label is "<PrmFinanceEnterpriseGroup.AccountingEntityLabel>"
				PrmEditOnly					is Boolean
					default label is "EditOnlyNoUpdate"
				PrmEditAndInterface			is Boolean
					default label is "EditAndInterfaceIfNoErrors"
				PrmPartialUpdate			is Boolean
					default label is "PartialUpdate"
				PrmMoveErrorsToNewRunGroup  is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				PrmJournalizeByEntity		is Boolean
					default label is "JournalizeBy<PrmFinanceEnterpriseGroup.AccountingEntityLabel>"
				PrmJournalByJournalCode		is a JournalByJournalCode
					default label is "SplitJournalsByJournalCode"
				PrmByPassOrganizationCode	is Boolean
					default label is "ByPassOrganizationCode"
				PrmByPassAccountCode		is Boolean
					default label is "ByPassAccountCode"
				PrmBypassStructureRelationEdit is Boolean
					default label is "BypassStructureRelationValidation"
				PrmInterfaceInDetail		is Boolean
					default label is "InterfaceInDetail"
				PrmCurrencyTable			is a CurrencyTable
					default label is "CurrencyTable"
				PrmBypassNegativeRateEdit	is a BypassNegativeRateEdit
					default label is "BypassNegativeRateEdit"
				PrmBypassProjectDateEdit	is a BypassProjectDateEdit
					default label is "BypassProjectDateEdit"
				PrmBypassProjectEdits		is Boolean				
					default label is "BypassProjectEdits"
			Parameter Rules
				SelectRunGroupsLike
					required
				PrmCashOffsetAccount
					required
				PrmByPassOrganizationCode
					initial value is PrmFinanceEnterpriseGroup.NoOrgCodesExist
					if (!PrmFinanceEnterpriseGroup.GeneralLedgerOrganizationCode set exists)
						PrmByPassOrganizationCode = true
				PrmByPassAccountCode
					initial value is PrmFinanceEnterpriseGroup.NoAccountCodesExist
					initial value is true
					if (!PrmFinanceEnterpriseGroup.GeneralLedgerAccountCode set exists)
						PrmByPassAccountCode = true
				PrmJournalizeByEntity
					initial value is true
				PrmCurrencyTable
					initial value is PrmFinanceEnterpriseGroup.CurrencyTable
					default to PrmFinanceEnterpriseGroup.CurrencyTable
				PrmEditAndInterface
					constraint (!PrmEditOnly)
						"Edit_And_InterfaceOptionNotValidWith_Edit_Only_No_Update"
			Instance Selection
				where(FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)
			Action Rules
				Instance Rules
					for each distinct GLTransactionInterface.RunGroup in GLTransactionInterface set
						if (each.GLTransactionInterface.RunGroup like SelectRunGroupsLike)
							invoke CreateCashOffsets GLTransactionInterface
								invoked.PrmEnterpriseGroup  			= PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup						= each.GLTransactionInterface.RunGroup
								invoked.PrmCashOffsetAccount			= PrmCashOffsetAccount
								invoked.PrmInterfaceAfterOffset			= PrmInterfaceAfterOffset
								invoked.PrmAccountingEntity				= PrmAccountingEntity
								invoked.PrmEditOnly						= PrmEditOnly
								invoked.PrmEditAndInterface				= PrmEditAndInterface
								invoked.PrmPartialUpdate				= PrmPartialUpdate
								invoked.PrmMoveErrorsToNewRunGroup  	= PrmMoveErrorsToNewRunGroup
								invoked.PrmErrorRunGroupPrefix			= PrmErrorRunGroupPrefix
								invoked.PrmJournalizeByEntity			= PrmJournalizeByEntity
								invoked.PrmJournalByJournalCode			= PrmJournalByJournalCode
								invoked.PrmByPassOrganizationCode		= PrmByPassOrganizationCode
								invoked.PrmByPassAccountCode			= PrmByPassAccountCode
								invoked.PrmBypassStructureRelationEdit 	= PrmBypassStructureRelationEdit
								invoked.PrmInterfaceInDetail			= PrmInterfaceInDetail
								invoked.PrmCurrencyTable				= PrmCurrencyTable
								invoked.PrmBypassNegativeRateEdit		= PrmBypassNegativeRateEdit
								invoked.PrmBypassProjectDateEdit		= PrmBypassProjectDateEdit
								invoked.PrmBypassProjectEdits			= PrmBypassProjectEdits

		ResetAllErrorsForSelectedRunGroups is a Set Action
			completion message is "ResetAllErrorsForSelectedRunGroupsSubmitted"
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				SelectRunGroupsLike     	is AlphaUpper 30
			Parameter Rules
				SelectRunGroupsLike
					required
			Instance Selection
				where(FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)
			Action Rules
				Instance Rules
					for each distinct GLTransactionInterface.RunGroup in GLTransactionInterface set
						if (each.GLTransactionInterface.RunGroup like SelectRunGroupsLike)
							invoke ResetAllErrors GLTransactionInterface
								invoked.PrmFinanceEnterpriseGroup  			= PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup							= each.GLTransactionInterface.RunGroup

		RebuildAccountingEntityShadow  is an Instance Action
			completion message is "Rebuild<actor.context.FinanceEnterpriseGroup.AccountingEntityLabel>ShadowSubmitted"
			restricted
			confirmation required
				"ThisActionWillRebuildEntityShadow,DoYouWantToProceed?"
			Local Fields
				LocalAsyncId				is an AsyncActionRequest
			Action Rules
				invoke DeleteShadows AccountingEntityShadow in background
					assign async action request id to LocalAsyncId
					
				invoke BuildShadowFile AccountingEntityHierarchy in background
					run after LocalAsyncId

#ifdef module lm

		LoadAccountingStandardFields is a Set Action
			restricted
			Action Rules
				Instance Rules
					if (LeaseAccountingMethod = 0)
						LeaseAccountingStandard = 1
					else
						LeaseAccountingStandard = 2
#endif
						
#ifdef module filecreation
		CreateIntegrationConfigurationRecords is an Instance Action
			restricted
			Action Rules
				LocalFinanceEnterpriseGroup = FinanceEnterpriseGroup
				if (ODSIntegrationConfigurationRel not exists)
					invoke Create IntegrationConfiguration
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.Integration				= 30 
						invoked.Active					= true
#endif

		TurnOnResponsibilityMatrix is an Instance Action
			valid when (!EnableResponsibilityMatrix)
			confirmation required
			Action Rules
				EnableResponsibilityMatrix = true
				log untranslatable:"TurnOnResponsibilityMatrix;EnableResponsibilityMatrix:<EnableResponsibilityMatrix>"

		TurnOffResponsibilityMatrix is an Instance Action
			valid when (EnableResponsibilityMatrix)
			confirmation required
			Entrance Rules
				constraint (!MatrixApprovalPendingRel exists)
					"CannotTurnOff_Responsibility_Matrix;_Pending_Matrix_ApprovalsExist."
			Action Rules
				EnableResponsibilityMatrix = false
				log untranslatable:"TurnOffResponsibilityMatrix;EnableResponsibilityMatrix:<EnableResponsibilityMatrix>"	
#ifdef module po
                for each ContractGroupRel 
                    invoke Update each 
                        invoked.AllowResponsibilityMatrixApprovals = false  					
#endif
		RebuildResponsibilityMatrixSecurity is an Instance Action
			run in background
			valid when (ResponsibilityMatrixSecurity)
			Local Fields
				LocalAsyncId 		is an AsyncActionRequest
			Entrance Rules
				invoke DeleteMatrixEntityMembers AccountingEntityGroupMember in background
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
				invoke DeleteMatrixDetails FinanceDimensionSecurityGroupDetail in background
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
				invoke DeleteAccountingUnitMatrixDetails AccountingUnitSecurityGroupDetail in background
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
			Action Rules
				invoke BuildMatrixSecurity ResponsibilityMatrixResource in background
					run after LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
#ifdef module am
		UpdateCapitalizationProgress is an Instance Action
			restricted
			Parameters
				PrmCapitalizationUpgradeProgress		is Numeric 1
					States
						NotEnabled	value is 0
						InProgress	value is 1
						Completed	value is 2
			Local Fields
				LocalActor			is Actor
			Action Rules
				CapitalizationUpgradeProgess = PrmCapitalizationUpgradeProgress

				if (PrmCapitalizationUpgradeProgress.Completed)
					LocalActor = actor
					send notification
						to LocalActor
						description is "CapitalizationUpgradeComplete"
						priority is high
#endif

		ChangeApprovalOrder	is an Instance Action
			valid when (EnableResponsibilityMatrix)
			Parameters
				PrmChangeApprovalOrderFrom	is a CodeBlockOrder
					default label is "From"
				PrmChangeApprovalOrderTo	is a CodeBlockOrder
					default label is "To"
			Parameter Rules
				PrmChangeApprovalOrderFrom
					ChangeApprovalOrderFrom = PrmChangeApprovalOrderFrom
					ChangeApprovalOrderTo	= PrmChangeApprovalOrderTo
					if (EligibleToRemove)
						confirmation required
							"ApprovalOrder<PrmChangeApprovalOrderFrom>WillBeRemoved;DoYouStillWantToContinue?"
					else
						constraint (PrmChangeApprovalOrderTo entered)
							"ChangeApprovalOrderToIsRequired"
					constraint (PrmChangeApprovalOrderFrom entered)
						"ChangeApprovalOrderFromIsRequired"
				PrmChangeApprovalOrderTo
						constraint (PrmChangeApprovalOrderFrom entered)
							"ChangeApprovalOrderFromIsRequired"
					constraint (!PrmChangeApprovalOrderFrom = PrmChangeApprovalOrderTo)
						"FromAndToApprovalOrdersCannotBeTheSame"
			Action Rules
				if (EligibleToRemove)
					constraint (!ResponsibilityMatrixApprovalRel exists)
						"CannotRemove;MatrixRecordsExistWithOrder<PrmChangeApprovalOrderFrom>"
					LocalApprovalOrder = LastApprovalOrder
					include RemoveApprovalOrder
				else
					ChangeApprovalOrderFrom = PrmChangeApprovalOrderFrom
					ChangeApprovalOrderTo	= PrmChangeApprovalOrderTo
					
					if (AccountingEntityApprovalOrder	= ChangeApprovalOrderFrom)
						AccountingEntityApprovalOrder		= 99
					if (AccountingUnitApprovalOrder		= ChangeApprovalOrderFrom)
						AccountingUnitApprovalOrder			= 99
					if (AccountApprovalOrder			= ChangeApprovalOrderFrom)
						AccountApprovalOrder				= 99
					if (ProjectApprovalOrder			= ChangeApprovalOrderFrom)
						ProjectApprovalOrder				= 99
					if (FinanceDimension1ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension1ApprovalOrder	 	= 99
					if (FinanceDimension2ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension2ApprovalOrder		= 99
					if (FinanceDimension3ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension3ApprovalOrder		= 99
					if (FinanceDimension4ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension4ApprovalOrder		= 99
					if (FinanceDimension5ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension5ApprovalOrder		= 99
					if (FinanceDimension6ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension6ApprovalOrder	 	= 99
					if (FinanceDimension7ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension7ApprovalOrder		= 99
					if (FinanceDimension8ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension8ApprovalOrder		= 99
					if (FinanceDimension9ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension9ApprovalOrder		= 99
					if (FinanceDimension10ApprovalOrder	= ChangeApprovalOrderFrom)
						FinanceDimension10ApprovalOrder		= 99

					if (ChangeApprovalOrderFrom	< ChangeApprovalOrderTo)
						LocalApprovalOrderIdx			= ChangeApprovalOrderFrom + 1	
						while (LocalApprovalOrderIdx 	<= ChangeApprovalOrderTo)
							if (AccountingEntityApprovalOrder		= LocalApprovalOrderIdx)
								AccountingEntityApprovalOrder		= AccountingEntityApprovalOrder - 1
							if (AccountingUnitApprovalOrder		= LocalApprovalOrderIdx)
								AccountingUnitApprovalOrder			= AccountingUnitApprovalOrder - 1
							if (AccountApprovalOrder			= LocalApprovalOrderIdx)			
								AccountApprovalOrder				= AccountApprovalOrder - 1			
							if (ProjectApprovalOrder			= LocalApprovalOrderIdx)
								ProjectApprovalOrder				= ProjectApprovalOrder - 1
							if (FinanceDimension1ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension1ApprovalOrder	 	= FinanceDimension1ApprovalOrder - 1
							if (FinanceDimension2ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension2ApprovalOrder		= FinanceDimension2ApprovalOrder - 1
							if (FinanceDimension3ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension3ApprovalOrder		= FinanceDimension3ApprovalOrder - 1
							if (FinanceDimension4ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension4ApprovalOrder		= FinanceDimension4ApprovalOrder - 1
							if (FinanceDimension5ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension5ApprovalOrder		= FinanceDimension5ApprovalOrder - 1
							if (FinanceDimension6ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension6ApprovalOrder	 	= FinanceDimension6ApprovalOrder - 1
							if (FinanceDimension7ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension7ApprovalOrder		= FinanceDimension7ApprovalOrder - 1
							if (FinanceDimension8ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension8ApprovalOrder		= FinanceDimension8ApprovalOrder - 1
							if (FinanceDimension9ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension9ApprovalOrder		= FinanceDimension9ApprovalOrder - 1
							if (FinanceDimension10ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension10ApprovalOrder		= FinanceDimension10ApprovalOrder - 1
							LocalApprovalOrderIdx	+= 1
					else
						LocalApprovalOrderIdx			= ChangeApprovalOrderFrom - 1
						while (LocalApprovalOrderIdx 	>= ChangeApprovalOrderTo)
							if (AccountingEntityApprovalOrder		= LocalApprovalOrderIdx)
								AccountingEntityApprovalOrder		= AccountingEntityApprovalOrder + 1
							if (AccountingUnitApprovalOrder		= LocalApprovalOrderIdx)
								AccountingUnitApprovalOrder			= AccountingUnitApprovalOrder + 1
							if (AccountApprovalOrder			= LocalApprovalOrderIdx)
								AccountApprovalOrder				= AccountApprovalOrder + 1
							if (ProjectApprovalOrder			= LocalApprovalOrderIdx)
								ProjectApprovalOrder				= ProjectApprovalOrder + 1
							if (FinanceDimension1ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension1ApprovalOrder	 	= FinanceDimension1ApprovalOrder + 1
							if (FinanceDimension2ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension2ApprovalOrder		= FinanceDimension2ApprovalOrder + 1
							if (FinanceDimension3ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension3ApprovalOrder		= FinanceDimension3ApprovalOrder + 1
							if (FinanceDimension4ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension4ApprovalOrder		= FinanceDimension4ApprovalOrder + 1
							if (FinanceDimension5ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension5ApprovalOrder		= FinanceDimension5ApprovalOrder + 1
							if (FinanceDimension6ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension6ApprovalOrder	 	= FinanceDimension6ApprovalOrder + 1
							if (FinanceDimension7ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension7ApprovalOrder		= FinanceDimension7ApprovalOrder + 1
							if (FinanceDimension8ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension8ApprovalOrder		= FinanceDimension8ApprovalOrder + 1
							if (FinanceDimension9ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension9ApprovalOrder		= FinanceDimension9ApprovalOrder + 1
							if (FinanceDimension10ApprovalOrder	= LocalApprovalOrderIdx)
								FinanceDimension10ApprovalOrder		= FinanceDimension10ApprovalOrder + 1
							LocalApprovalOrderIdx	-= 1

					if (AccountingEntityApprovalOrder	= 99)
						AccountingEntityApprovalOrder		= ChangeApprovalOrderTo
					if (AccountingUnitApprovalOrder		= 99)
						AccountingUnitApprovalOrder			= ChangeApprovalOrderTo
					if (AccountApprovalOrder			= 99)
						AccountApprovalOrder				= ChangeApprovalOrderTo
					if (ProjectApprovalOrder			= 99)
						ProjectApprovalOrder				= ChangeApprovalOrderTo
					if (FinanceDimension1ApprovalOrder	= 99)
						FinanceDimension1ApprovalOrder	 	= ChangeApprovalOrderTo
					if (FinanceDimension2ApprovalOrder	= 99)
						FinanceDimension2ApprovalOrder		= ChangeApprovalOrderTo
					if (FinanceDimension3ApprovalOrder	= 99)
						FinanceDimension3ApprovalOrder		= ChangeApprovalOrderTo
					if (FinanceDimension4ApprovalOrder	= 99)
						FinanceDimension4ApprovalOrder		= ChangeApprovalOrderTo
					if (FinanceDimension5ApprovalOrder	= 99)
						FinanceDimension5ApprovalOrder		= ChangeApprovalOrderTo
					if (FinanceDimension6ApprovalOrder	= 99)
						FinanceDimension6ApprovalOrder	 	= ChangeApprovalOrderTo
					if (FinanceDimension7ApprovalOrder	= 99)
						FinanceDimension7ApprovalOrder		= ChangeApprovalOrderTo
					if (FinanceDimension8ApprovalOrder	= 99)
						FinanceDimension8ApprovalOrder		= ChangeApprovalOrderTo
					if (FinanceDimension9ApprovalOrder	= 99)
						FinanceDimension9ApprovalOrder		= ChangeApprovalOrderTo
					if (FinanceDimension10ApprovalOrder	= 99)
						FinanceDimension10ApprovalOrder		= ChangeApprovalOrderTo
			Exit Rules
				include ValidateApprovalOrder
				invoke UpdateApprovalOrder ResponsibilityMatrix in background
					invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.PrmChangeApprovalOrderFrom		= PrmChangeApprovalOrderFrom
					invoked.PrmChangeApprovalOrderTo		= PrmChangeApprovalOrderTo

		UpdateLaborDistributionUpgradeComplete is an Instance Action
			restricted
			Parameters
				PrmLaborDistributionUpgradeComplete is Boolean
			Action Rules
				LaborDistributionUpgradeComplete = PrmLaborDistributionUpgradeComplete
				
		UpdatePurgeCutOffDate is an Instance Action
			Parameters
				PrmPurgeCutOffDate 	is Date
					default label is "PurgeCutOffDate"
			confirmation required
				"AreYouSureToUpdatePurgeCutOffDate"
			Parameter Rules
				PrmPurgeCutOffDate
					required
					constraint (PrmPurgeCutOffDate < current corporate date)
						"DateMustBeInThePast"
#ifdef module am
					constraint (CapitalizationUpgradeProgess.Completed)
						"CapitalizationUpgradeProcessMustBeCompleted"
#endif						
			Action Rules		
				PurgeCutOffDate = PrmPurgeCutOffDate
FeatureToggle.FinanceEnterpriseGroup is a BusinessClass

	Persistent Fields

	Local Fields
		LocalFeatureToggle	is a FeatureToggle

	Derived Fields
	
		IsFeatureEnabled is a DerivedField
			type is Boolean
			if (ConfigParameterRel.Value = "true")
				return false
			return LocalFeatureToggle.EnabledDerived

		DisableFeatureConfigParam is a DerivedField		
			type is Alpha 60
			return "Disable" + "_FSM_" + LocalFeatureToggle




		FSM231001ReportingCatalogEnabled is a DerivedField	
			type is Boolean
			LocalFeatureToggle = "FSM231001"
			return IsFeatureEnabled

		FSM231002MenuConsolidationEnabled is a DerivedField	
			type is Boolean
			LocalFeatureToggle = "FSM231002"
			return IsFeatureEnabled

		FSM2404001MenuConsolidationEnabled is a DerivedField	
			type is Boolean
			LocalFeatureToggle = "FSM2404001"
			return IsFeatureEnabled

		FSM2404002ExternalMenuVersion3Enabled is a DerivedField	
			type is Boolean
			LocalFeatureToggle = "FSM2404002"
			return IsFeatureEnabled
			
#ifdef module filecreation
		FSM2404003FileCreationDynamicRowProcessingEnabled is a DerivedField	
			type is Boolean
			LocalFeatureToggle = "FSM2404003"
			return IsFeatureEnabled

		FSM2404004TraceabilityEnabled is a DerivedField	
			type is Boolean
			LocalFeatureToggle = "FSM2404004"
			return false
#endif


	Relations
		ConfigParameterRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID		= "config"
				related.ConfigurationParameter.Name					= DisableFeatureConfigParam
