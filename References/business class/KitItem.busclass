KitItem is a BusinessClass
	owned by ic
	prefix is KIT
	classic name is KITITEM

	Ontology
		symbolic key is KitItem
			classic set name is KITSET1
			classic name for KitItem.InventoryLocation is LOCATION

    Patterns
        implements StaticJava
        disable AuditIndex
        implements ContextualParent

    Persistent Fields
        OrderSize                       is Numeric size 8
        Notes
        ProcedureCode                   is Alpha size 7
            classic name is PROCEDURE-CD
        MakeCode                        is AlphaUpper size 1
            classic name is MAKE-CD
            States
                MakeToOrder value is "O"
                    default label is "Make to Order"
                MakeToStock value is "S"
                    default label is "Make to Stock"
        Active                          is Boolean
            classic name is ACTIVE-STATUS
        InventorySequence
            classic name is SEQ
            disable Auditing
        InstructionLine
            classic name is INST-LINE
            disable Auditing
        ContiguousProcess               is Boolean
            classic name is CTG-PROD-FLAG
        CostTolerancePercentage
            classic name is COST-TOL-PCT
        ZeroCost                        is Boolean
            classic name is ZERO-COST-FL
        QuantityTolerancePercentage
            classic name is QTY-TOL-PCT
        ZeroQuantity                    is Boolean
            classic name is ZERO-QTY-FL
        LastBurdenSequence              is an InventorySequence
            classic name is LAST-BRDN-SEQ
        LastByproductSequence           is an InventorySequence
            classic name is LAST-BYPRO-SEQ
        Capacity
        ScheduleIncrement
            classic name is SCHED-INCR
        ScheduleFrequency               is AlphaUpper size 1
            classic name is SCHED-FREQ
            States
                Daily   value is "D"
                Weekly  value is "W"
                Monthly value is "M"
        ProductionCreditAccount         is a FinanceCodeBlock
            classic name for ProductionCreditAccount.AccountingUnit is PC-ACCT-UNIT
            classic name for ProductionCreditAccount.GeneralLedgerChartAccount is PC-ACCOUNT
        BurdenAbsorptionAccount         is a FinanceCodeBlock
            classic name for BurdenAbsorptionAccount.AccountingUnit is BA-ACCT-UNIT
            classic name for BurdenAbsorptionAccount.GeneralLedgerChartAccount is BA-ACCOUNT
        FinishedGoodsVarianceAccount    is a FinanceCodeBlock
            classic name for FinishedGoodsVarianceAccount.AccountingUnit is FGV-ACCT-UNIT
            classic name for FinishedGoodsVarianceAccount.GeneralLedgerChartAccount is FGV-ACCOUNT

    Attach Rules
	
		constraint (Active)
			"KitItem<KitItem>MustBeActive"
    
    Derived Fields
    	ContextMessageEntityType is a StringField
			type is Alpha 50
			restricted
			"InforERPEnterpriseWarehousingAssemblyKit"
			
		ContextMessageText is a MessageField
			restricted
			"KitItem<KitItem>"

        ItemCodeUsed is a ConditionalField
            type is Numeric size 1
            restricted
            if (HasItem)
                1
            else
                blank
                

		DerivedKitCompany is a LabelField
			"<KitItem.Company.Name>_(<KitItem.Company>)"
		DerivedKitLocation is a LabelField
			"<KitItem.InventoryLocation.Name>_(<KitItem.InventoryLocation.Name>)"
		DerivedItemGroup is a LabelField
			"<ItemGroup.Description>_(<ItemGroup.Description>)"
		
	Local Fields
		LocalItem 			is an Item
		LocalCompany 		is a Company
		FromCompanyLocationBin
		LocalBurdenCode 	is AlphaUpper size 4
		
    
    Conditions
        IsActive
        	restricted
            when (Active)

        HasCompany
            classic name is ICCOMPANY
            restricted
            when (KitItem.Company entered)

        HasLocation
            classic name is ICLOCATION
        	restricted
            when (KitItem.InventoryLocation entered)

        IsInactive
        	restricted
            when (not Active)

        HasItem
            classic name is ITEM-ENTERED
            restricted
            when (KitItem.Item entered)
            
		IsMakeToOrder
			restricted
			when (MakeCode.MakeToOrder)
			
		IsMakeToStock
			restricted
			when (MakeCode.MakeToStock)
		
		HasComponentsWithStockOnHand
			restricted
			when (KitComponentsWithStockOnHandRel exists)
			
		RecordExists
			restricted
			when (KitItem exists)
			
		MakeToOrderExists
			restricted
			when (KitItem exists and MakeCode.MakeToOrder)
			
    Relations

        KitComponentsRel is a KitComponent set
            classic name is COMPONENT

        FinishedGoodsBurdensRel
            classic name is FGBURDEN
            one-to-many relation to FinishedGoodsBurden
            Field Mapping uses symbolic key
                related.Company           = KitItem.Company
                related.InventoryLocation = KitItem.InventoryLocation
                related.Item              = KitItem.Item
        
        FinishedGoodsByproductsRel
            classic name is FGBYPROD
            one-to-many relation to FinishedGoodsByproduct
            delete restricted
            Field Mapping uses symbolic key
                related.Company           = KitItem.Company
                related.InventoryLocation = KitItem.InventoryLocation
            Instance Selection
                where (related.FinishedGoodsByproduct.FinishedGoodItem = KitItem.Item)
		
		FinishedGoodByproductsRel
            one-to-many relation to FinishedGoodsByproduct
            Field Mapping uses symbolic key
                related.Company           = KitItem.Company
                related.InventoryLocation = KitItem.InventoryLocation
            Instance Selection
                where (related.FinishedGoodsByproduct.FinishedGoodItem = KitItem.Item)
                
        KitInstructionsRel
            classic name is KTINSTRUCT
            one-to-many relation to KitInstruction
            delete cascades
            Field Mapping uses symbolic key
                related.ItemGroup					= ItemGroup
                related.KitItem.Company				= KitItem.Company
                related.KitItem.InventoryLocation	= KitItem.InventoryLocation
                related.KitItem.Item				= KitItem.Item
			Instance Selection
                where (related.KitInstruction.Sequence = blank)
                
   		KitInstructionRel
            one-to-many relation to KitInstruction
            Field Mapping uses symbolic key
                related.ItemGroup         			= ItemGroup
                related.KitItem.Company           	= KitItem.Company
                related.KitItem.InventoryLocation 	= KitItem.InventoryLocation
            	related.KitItem.Item				= KitItem.Item
           	Instance Selection
           		where (related.KitInstruction.Sequence	= blank)
                  		
   		InventoryLocationRel
   			one-to-one relation to InventoryLocation
   			Field Mapping uses symbolic key
   				related.Company 		  			= KitItem.Company
   				related.InventoryLocation 			= KitItem.InventoryLocation
   				
		ItemLocationRel
   			one-to-one relation to ItemLocation
   			Field Mapping uses symbolic key
   				related.Company 		  			= KitItem.Company
   				related.InventoryLocation 			= KitItem.InventoryLocation
   				related.Item			  			= KitItem.Item
   		
   		ItemLocationsForCompanysUnderOneItemGroupRel
   			one-to-many relation to ItemLocation
   			Field Mapping uses Set2
   				related.Company 		  = LocalCompany
   				related.Item			  = KitItem.Item
   				
   	
		InventoryCompanyRel
			one-to-many relation to InventoryCompany
			Field Mapping uses Set2
				related.ItemGroup         = ItemGroup		
		
		KitComponentRel is a KitComponent set
     	 	Instance Selection
                where (related.StopDate not entered
				or 	   related.StopDate	>= current corporate date)

    	ItemRel
    		one-to-one relation to Item
    		Field Mapping uses symbolic key
                related.ItemGroup         		= ItemGroup
                related.Item           			= LocalItem
                
        ItemForKitItemRel
    		one-to-one relation to Item
    		Field Mapping uses symbolic key
                related.ItemGroup         		= ItemGroup
                related.Item           			= KitItem.Item        
           	      	
      	ItemLocationForEachComponentItemRel
    		one-to-one relation to ItemLocation
    		Field Mapping uses symbolic key
                related.Company	        		= KitItem.Company
                related.InventoryLocation 		= KitItem.InventoryLocation
                related.Item           			= LocalItem
                
     	KitItemForMimicItemRel
     		one-to-one relation to KitItem
    		Field Mapping uses Set2
    		    related.MakeCode	   				= MakeCode.MakeToOrder
                related.ItemGroup					= ItemGroup
                related.KitItem.Company				= KitItem.Company
                related.KitItem.InventoryLocation 	= KitItem.InventoryLocation
                related.KitItem.Item   				= KitItem.Item  
     	
     	OtherKitItemRel
     		one-to-many relation to KitItem
    		Field Mapping uses Set3
                related.ItemGroup					= ItemGroup
                related.KitItem.Item   				= KitItem.Item  
                
     	KitComponentInMimicItemRel
     		one-to-many relation to KitComponent
            Field Mapping uses Set2
                related.ItemGroup         			= ItemGroup
                related.ComponentItem     			= KitItem.Item
                related.KitItem.Item 				= KitItem.Item
				related.KitItem.Company 			= KitItem.Company
				related.KitItem.InventoryLocation   = KitItem.InventoryLocation
		
		KitComponentForDeleteActionRel
     		one-to-many relation to KitComponent
            Field Mapping uses Set2
                related.ItemGroup         			= ItemGroup
                related.ComponentItem     			= KitItem.Item
           	Instance Selection
                where (related.KitItem.Company 			   = KitItem.Company
				and    related.KitItem.InventoryLocation   = KitItem.InventoryLocation)
		
				
        KitInstructionsForMimicItemRel
            one-to-many relation to KitInstruction
            Field Mapping uses symbolic key
                related.ItemGroup					= ItemGroup
                related.KitItem.Company				= KitItem.Company
                related.KitItem.InventoryLocation	= KitItem.InventoryLocation
                related.KitItem.Item				= KitItem.Item

   		BurdenCodeRel
   			one-to-one relation to BurdenCode
   			Field Mapping uses symbolic key 
   				related.Company 		  			= KitItem.Company
   				related.InventoryLocation 			= KitItem.InventoryLocation
   				related.BurdenCode					= LocalBurdenCode
   		
   		BurdenCodesRel
   			one-to-one relation to BurdenCode
   			Field Mapping uses symbolic key 
   				related.Company 		  			= FromCompanyLocationBin.FromCompany
   				related.InventoryLocation 			= FromCompanyLocationBin.FromLocation
   				related.BurdenCode					= LocalBurdenCode
   		
   		KitComponentsWithStockOnHandRel is a KitComponent set
   			Instance Selection
   				where (related.HasStockOnHand)
   				
   				
   			
    Sets
        Set2
            indexed
            Sort Order
                MakeCode
                ItemGroup
                KitItem.Company
                KitItem.InventoryLocation
                KitItem.Item

		Set3 
			indexed
			Sort Order
				ItemGroup
				KitItem.Item
				KitItem.Company
                KitItem.InventoryLocation
                MakeCode

	Field Rules
		OrderSize
			if (IsMakeToOrder)
				default to 1

		MakeCode
			initial value is MakeCode.MakeToOrder
			default to MakeCode.MakeToOrder
			required
			
			if (MakeCode.MakeToOrder)
				initialize QuantityTolerancePercentage
				initialize CostTolerancePercentage
				initialize ZeroQuantity
				initialize ZeroCost
				initialize ContiguousProcess
				initialize ScheduleFrequency
				initialize ScheduleIncrement
				initialize Capacity
				initialize FinishedGoodsVarianceAccount
				initialize ProductionCreditAccount
				initialize BurdenAbsorptionAccount

		Active
            initial value is true
			if (Active changed
			and Active)
				if (IsMakeToOrder)
					if (KitItem.Company entered)
						for each KitComponentRel
							LocalItem	= each.KitComponent.ComponentItem
							if (each.KitComponent.OptionalComponentSequence entered)
								constraint (ItemLocationForEachComponentItemRel.Active)
									"CannotActivateKit;ItemLocationForComponentIsInactive"			
							if (each.KitComponent.OptionalComponentSequence not entered)
								constraint (ItemLocationForEachComponentItemRel.Active)
									"CannotActivateKit;OptionalComponentForComponentIsInactive"		
					else  
						for each KitComponentRel
							LocalItem	= each.KitComponent.ComponentItem
							if (each.KitComponent.OptionalComponentSequence not entered)
								constraint (ItemRel.Active)
									"CannotActivateKit;ItemForComponentIsInactive"					
							if (each.KitComponent.OptionalComponentSequence entered)
								constraint (ItemRel.Active)
									"CannotActivateKit;OptionalComponentForComponentIsInactive"		
				if (IsMakeToStock)
					for each KitComponentRel
						if (each.KitComponent.OptionalComponentSequence not entered)
							constraint (each.KitComponent.ComponentItem.Active)
								"CannotActivateFinishedGood;ComponentIsInactive"					
					for each FinishedGoodByproductsRel
						constraint (each.Item.Active)
							"CannotActivateFinishedGood;ByProductIsInactive"						
					for each FinishedGoodsBurdensRel
						constraint (each.BurdenCode.Active)
							"CannotActivateFinishedGood;BurdenIsInactive"							
			
			if (Active changed
			and Active = false)
				constraint (KitItem.Item.Active = true)
					"CannotSetKitItemToActiveWhenItemIsInactive"
							
        ContiguousProcess
            initial value is true

		KitItem
			if (IsMakeToOrder)
				if (KitItem.Company entered)
					if (ItemLocationRel exists)
						constraint (!ItemLocationRel.BinTracked)
							"ItemCannotBeMakeToOrderKit;ItemIsBinTracked"					
						constraint (ItemLocationRel.IsNotLotTracked)
							"ForMakeToOrder,KitItemCannotBeLotTracked"									
						constraint (ItemLocationRel.IsNotSerialTracked)
							"ForMakeToOrder,KitItemCannotBeSerialTracked"								
				else 
					for each InventoryCompanyRel
						LocalCompany = each.Company
						for each ItemLocationsForCompanysUnderOneItemGroupRel
							constraint (!each.BinTracked)
								"ItemCannotBeMakeToOrderKit;ItemIsBinTrackedAtLocation<each.InventoryLocation>"			
				
			if (IsMakeToStock)
				constraint (ItemLocationRel exists)
					"ItemLocationDoesNotExistForKitItem"	
				constraint (ItemLocationRel.InventoryTracked)
					"KitItemIsNotInventoryTracked"													
				constraint (KitItem.Company.WorkOrderInUse)
					"CompanyIsNotSetUpToUseWorkOrder"											
				constraint (InventoryLocationRel.IsProductionLocation)
					"LocationIsNotSetUpToUseWorkOrder"											
				constraint (!KitItem.Item.IsCatchWeightItem)
					"FinishedGoodCannotBeACatchWeightItem"										
					
				
		FinishedGoodsVarianceAccount
			if (IsMakeToStock)
				if (InventoryLocationRel.UseIncomeStatementAccounts)	
					default to InventoryLocationRel.FinishedGoodsVarianceAccount
		
		ProductionCreditAccount
			if (IsMakeToStock)
			 	if (InventoryLocationRel.UseIncomeStatementAccounts)
					required 
						"ProductionCreditAccountMustBeSpecified"								
				else
					cannot be entered
						"InventoryLocationDoesNotSpecifyTheUseOfAssetAccounts"					
		BurdenAbsorptionAccount
			if (IsMakeToStock)
				if (InventoryLocationRel.UseIncomeStatementAccounts)
					required 
						"BurdenAbsorptionAccountMustBeSpecified"								
				else
					cannot be entered
						"InventoryLocationDoesNotSpecifyTheUseOfAssetAccounts"					
		
		Capacity
			if (IsMakeToStock)
				default to InventoryLocationRel.Capacity
				
		ScheduleFrequency
			if (IsMakeToStock)
				default to InventoryLocationRel.ScheduleFrequency
					
		ScheduleIncrement
			if (IsMakeToStock)
				default to InventoryLocationRel.ScheduleIncrement
				if (ScheduleFrequency.Monthly)
					constraint (ScheduleIncrement <= 12)
						"ScheduleFrequencyMustNotBeGreaterThan12ForMonthlyScheduling"			
				if (ScheduleFrequency.Weekly)
					constraint (ScheduleIncrement <= 52)										
						"ScheduleFrequencyMustNotBeGreaterThan52ForMonthlyScheduling"			
		
		ZeroQuantity
			if (IsMakeToStock)
				if (QuantityTolerancePercentage entered)
					cannot be entered
						"ZeroQuantityCannotBeSelectedIfToleranceIsNotZero"						
						
		ZeroCost
			if (IsMakeToStock)
				if (CostTolerancePercentage entered)
					cannot be entered
						"ZeroCostCannotBeSelectedIfToleranceIsNotZero"							
								 			 
    Actions
    	Create is a Create Action
    		Action Rules
    			constraint (ItemForKitItemRel exists) 
    				"ItemDoesNotExist"
    			constraint (ItemForKitItemRel.CatchWeightCode.NotCatchWeight)
    				"KitItemOrComponentCannotBeCatchWeightItem"
  			Exit Rules
  				invoke UpdateItem KitItem.Item
					invoked.PrmKitItem = true


















					
	        						
		CreateByCopy is an Instance Action
			Parameters
				FromCompanyLocation
				CopyToItem 				is an Item
				PrmItemGroup 			is an ItemGroup
					default label is "ItemGroup"
				
			Parameter Rules
				FromCompanyLocation
					if (IsMakeToStock)
						required
				PrmItemGroup
					if (IsMakeToOrder)
						required
				CopyToItem
					if (IsMakeToOrder)
						required
							
			Action Rules
				constraint (KitComponentsRel exists)
					"MimicItemHasNoComponentUnderIt" 
				
				invoke UpdateItem CopyToItem
					invoked.PrmKitItem = true
				
				if (IsMakeToOrder)   											
					constraint (KitComponentInMimicItemRel	not exists)
						"ItemExistsAsComponentInMimicItem"	
				if (IsMakeToOrder) 		
					invoke Create KitItem
						fill in fields from this instance
						invoked.MakeCode								= MakeCode.MakeToOrder
						invoked.ItemGroup								= PrmItemGroup
						invoked.KitItem.Company							= FromCompanyLocation.FromCompany
						invoked.KitItem.InventoryLocation				= FromCompanyLocation.FromLocation
						invoked.KitItem.Item							= CopyToItem
	
					for each KitComponentsRel
						invoke Create KitComponent
							fill in fields from each
							invoked.ItemGroup							= PrmItemGroup
							invoked.KitItem.Company						= FromCompanyLocation.FromCompany
							invoked.KitItem.InventoryLocation			= FromCompanyLocation.FromLocation
							invoked.KitItem.Item						= CopyToItem
						
					for each KitInstructionsForMimicItemRel
						invoke Create KitInstruction
							fill in fields from each
							invoked.ItemGroup							= PrmItemGroup
							invoked.KitItem.Company						= FromCompanyLocation.FromCompany
							invoked.KitItem.InventoryLocation			= FromCompanyLocation.FromLocation
							invoked.KitItem.Item						= CopyToItem
							
				if (IsMakeToStock)
	       			invoke Create KitItem
						fill in fields from this instance
						invoked.MakeCode								= MakeCode.MakeToStock
						invoked.ItemGroup								= ItemGroup
						invoked.KitItem.Company							= FromCompanyLocation.FromCompany
						invoked.KitItem.InventoryLocation				= FromCompanyLocation.FromLocation
						invoked.KitItem.Item							= KitItem.Item

							 
					for each KitComponentsRel
						invoke Create KitComponent
							fill in fields from each
							invoked.ItemGroup							= ItemGroup
							invoked.KitItem.Company						= FromCompanyLocation.FromCompany
							invoked.KitItem.InventoryLocation			= FromCompanyLocation.FromLocation
							invoked.KitItem.Item						= KitItem.Item
						
					for each FinishedGoodByproductsRel
						invoke Create FinishedGoodsByproduct
							fill in fields from each
							invoked.Company										= FromCompanyLocation.FromCompany
							invoked.InventoryLocation							= FromCompanyLocation.FromLocation
							invoked.FinishedGoodsByproduct.FinishedGoodItem		= KitItem.Item
	       			
	       			for each FinishedGoodsBurdensRel
	       				FromCompanyLocationBin.FromCompany 				= FromCompanyLocation.FromCompany
	       				FromCompanyLocationBin.FromLocation 			= FromCompanyLocation.FromLocation
	        			LocalBurdenCode 								= each.BurdenCode
	        			if (BurdenCodesRel not exists)
		        			invoke Create BurdenCodeRel
		        				fill in fields from BurdenCodeRel 
		        				invoked.Company							= FromCompanyLocation.FromCompany
								invoked.InventoryLocation				= FromCompanyLocation.FromLocation
								invoked.BurdenCode						= LocalBurdenCode
							
	       			for each FinishedGoodsBurdensRel
	       				invoke Create FinishedGoodsBurden
	       					fill in fields from each
							invoked.Company								= FromCompanyLocation.FromCompany
							invoked.InventoryLocation					= FromCompanyLocation.FromLocation
							invoked.Item								= KitItem.Item
        			
        Update is an Update Action
						
        Delete is a Delete Action
        	Entrance Rules
        		if (IsMakeToStock)
        			constraint (KitComponentForDeleteActionRel not exists)
        				"CannotDeleteKit;UsedAsComponentInLocation"								
        			constraint (!ItemLocationRel.ReorderDocument.WorkOrder)
        				"CannotDeleteKit;ItemLocationReorderDocumentCodeIsWorkOrder"			
        		
        		if (OtherKitItemRel not exists)
        			invoke UpdateItem KitItem.Item
        				invoked.PrmKitItem = false
        		
        		invoke Delete KitComponentsRel
	        	
	        	invoke Delete KitInstructionsForMimicItemRel 
	        	
        		if (IsMakeToStock)
	        		invoke Delete FinishedGoodByproductsRel
			        invoke Delete FinishedGoodsBurdensRel
        		
        ChangeToMakeToStock is an Instance Action												
			valid when (IsMakeToOrder)
				
			Action Rules
				constraint (KitItem.Company.WorkOrderInUse)
					"CannotChangeMakeCode;CompanyNotSetupToUseWorkOrder"
				constraint (InventoryLocationRel.IsProductionLocation)
					"CannotChangeMakeCode;LocationNotSetUpToUseWorkOrder"	 						
				constraint (ItemLocationRel.InventoryTracked)
					"CannotChangeMakeCode;KitItemNotInventoryTracked" 
				constraint (!KitItem.Item.IsCatchWeightItem)
					"FinishedGoodCannotBeACatchWeightItem"									
				for each KitComponentsRel
					constraint (each.KitComponent.OptionalComponentSequence not entered)
						"CannotChangeMakeCode;KitHasOptionalComponents" 						
					LocalItem = each.KitComponent.ComponentItem
					constraint (ItemLocationForEachComponentItemRel exists)
						"CannotChangeMakeCode;ComponentNotValid"
					constraint (ItemLocationForEachComponentItemRel.InventoryTracked)
						"ComponentIsNotInventoryTracked" 										
				for each KitInstructionsRel
					constraint (each.KitInstruction.Sequence not entered)
						"CannotChangeMakeCode;KitHasInstructions"        						
					constraint (each.KitInstruction.Sequence entered)
						"CannotChangeMakeCode;ComponentHasInstructions"  						
				MakeCode = MakeCode.MakeToStock	
					   		
        ChangeToMakeToOrder is an Instance Action
        	valid when (IsMakeToStock)
        	
        	Action Rules
        		constraint (FinishedGoodsBurdensRel not exists)
        			"CannotChangeMakeCode;FinishedGoodsBurdensExists"
        		constraint (FinishedGoodByproductsRel not exists)
        			"CannotChangeMakeCode;FinishedGoodsByproductsExists"						
        		constraint (!ItemLocationRel.BinTracked)
        			"CannotChangeMakeCode;KitItemIsBinTrackedAtLocation"							
        		constraint (!ItemLocationRel.ReorderDocument.WorkOrder)
        			"CannotChangeMakeCode;ItemLocationHasReorderDocumentCodeAsWorkOrder"		
        		for each KitComponentsRel
        			LocalItem = each.ComponentItem
        			constraint (!ItemRel.IsCatchWeightItem)
        				"CannotChangeMakeCode;ComponentIsCatchWeightItem"						
        		MakeCode = MakeCode.MakeToOrder
        		
