ContractInterfaceCatalog is a BusinessClass
	owned by po
	
	prefix is CIC8
	
	Ontology
        symbolic key is ContractInterfaceCatalog
	
	Patterns
        implements StaticJava
        disable AuditIndex
		disable Auditing 
       	disable EffectiveDated
       	disable DataTranslations
	
	Persistent Fields

		ContractGroup                       
		RecordType              			is Numeric 1
        	States
				Header						value is 1
				Tier                        value is 2
				LineWithTierCosts  			value is 3
		WorkingContractID                   is AlphaUpper size 30

		Name 								is a Description
        Vendor 								is like Vendor
        Supplier 							is like Supplier
        ManufacturerCodeDivision            is a Manufacturer
        GlobalLocationNumber                is like GlobalLocationNumber

        EffectiveDate 						is Date
        ExpirationDate 						is Date

		ContractImportTier                  is like ContractImportTier
		TierDescription                     is a Description

        ItemNumber                          is like Item
        VendorItem 							is like VendorItem
        VendorItemDescription               is a Description
        BaseCost 							is an UnitCost
        UOM 								is like UnitOfMeasure
        ManufacturerNumber                  
        GlobalTradeItemNumber 				is like ItemGTIN
        Tier1                               is like ContractImportTier
        Tier1Cost                           is a UnitCost
        Tier2                               is like ContractImportTier
        Tier2Cost                           is a UnitCost
        Tier3                               is like ContractImportTier
        Tier3Cost                           is a UnitCost
        Tier4                               is like ContractImportTier
        Tier4Cost                           is a UnitCost
        Tier5                               is like ContractImportTier
        Tier5Cost                           is a UnitCost
		
	Local Fields
		LocalContractImportView				is a ContractImport view
		LocalContractLineImportView 		is a ContractLineImport view
		LocalContractGroup                  is like ContractGroup	
		LocalContractImport                 is like ContractImport
		LocalImportTier                     is like ContractImportTier				
		LocalUpdateContract                 is like Contract
			
	Field Rules
	
		RecordType
			required
			if (RecordType = 3)
				if (VendorItemDescription !entered)
					VendorItemDescription = VendorItem
				if (VendorItemDescription !entered)
					VendorItemDescription = ManufacturerNumber	
			
		WorkingContractID
			required
			
		Name
			if (RecordType = 1)
				required
				
		ContractImportTier
			if (RecordType = 2)
				required
				
		TierDescription
			if (RecordType = 2)
				required
				
	Relations
	
		ContractImportTierRel
			one-to-one relation to ContractImportTier
			Field Mapping uses symbolic key
				related.ContractGroup       = LocalContractGroup
				related.ContractImport      = LocalContractImport
				related.ContractImportTier  = LocalImportTier
				
		SupplierRel
			one-to-one relation to Supplier
			Field Mapping uses symbolic key
				related.SupplierGroup       = LocalContractGroup
				related.Supplier            = Supplier
				
		VendorSupplierRel
			one-to-many relation to Supplier
			Field Mapping uses ByVendor
				related.SupplierGroup       = LocalContractGroup
				related.Vendor              = Vendor
				
		GlobalLocationNumberSupplierRel
			one-to-many relation to Supplier
			Field Mapping uses GlobalLocationNumberSet
				related.GlobalLocationNumber = GlobalLocationNumber 
				
		WorkingContractIDRel
			one-to-many relation to ContractImport
			Field Mapping uses ByWorkingContract
				related.ContractGroup        = ContractGroup
				related.WorkingContractID    = WorkingContractID
				 
		CatalogLinesRel
			one-to-many relation to ContractInterfaceCatalog
			Field Mapping uses ByWorkingContractID
				related.ContractGroup        = ContractGroup
				related.WorkingContractID    = WorkingContractID
			Instance Selection
				where (RecordType = 3)
				
		CatalogTiersRel 
			one-to-many relation to ContractInterfaceCatalog
			Field Mapping uses ByWorkingContractID
				related.ContractGroup        = ContractGroup
				related.WorkingContractID    = WorkingContractID
			Instance Selection
				where (RecordType = 2)
				
		UpdateContractRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup        = LocalContractGroup
				related.Contract             = LocalUpdateContract
	
	Sets
	
		ByWorkingContractID
			Sort Order
				ContractGroup
				WorkingContractID
				ContractInterfaceCatalog
				
		ByRecordType
			Sort Order
				ContractGroup
				WorkingContractID
				RecordType
				ContractInterfaceCatalog				
	
	Actions
	
		Create is a Create Action
   				
        Update is an Update Action
        
        Delete is a Delete Action
        
        FastDelete is a Delete Action
			restricted
			bypass relational integrity rules
		
		CreateImportRecords is a Set Action
			default label is "CreateInterfaceRecords"		
			Parameters
				ContractGroup
				ParmWorkingContractID         is AlphaUpper size 30   
					default label is "WorkingContractID"
				ParmUpdateFunction           is Numeric size 1
					default label is "UpdateOrCreateLines"	
					States
						Create				value is 0
						Update              value is 1
				AutoUpdateContracts          is Boolean
				UpdateCostsOnly              is Boolean
				ProcessItemMasterOnly        is Boolean
				ParmUpdateContract           is a Contract
					default label is "ContractToUpdate"
				TolerancePercent		   	 is Percent size 6.3
				Connector
				ToleranceAmount			   	 is an InternationalAmount
				RejectAllCostIncreases	   	 is Boolean
                	default label is "RejectAllItemsWithCostDifferences"
                    				
			Parameter Rules
			
				ContractGroup
					required
					
				AutoUpdateContracts
					if (AutoUpdateContracts)
						constraint (ParmUpdateContract entered)
							"MustEnterContractToUpdateIfAutoUpdatingContracts"
				
				ParmUpdateContract
					if (ParmUpdateContract entered)
					    constraint (!ParmUpdateContract.ContractStatus.Closed)
	    					"ContractStatusCannotBeClosedToPerformContractUpdates" 
					 
				ParmUpdateFunction
					initial value is 1
				
				Connector
					if (TolerancePercent > 0 and ToleranceAmount > 0)
						required
							"ConnectorIsRequiredWhenTolerancePercentAndToleranceAmountAreEntered"
					else
						cannot be entered
							"CannotEnterConnectorUnlessTolerancePercentAndToleranceAmountAreEntered"
				RejectAllCostIncreases
					if (RejectAllCostIncreases)
						constraint (TolerancePercent = 0 and ToleranceAmount = 0)
							"CannotEnterTolerancePercentOrAmountWhenRejectingAllCostIncreases"
				
			Instance Selection
				where (ContractGroup = ContractGroup
				and   ((WorkingContractID entered
				and    ParmWorkingContractID = WorkingContractID)
				or     ParmWorkingContractID !entered))
			
			Sort Order
				WorkingContractID
				RecordType
				VendorItem
				UOM
				ContractImportTier		
			
			Local Fields
				LocalNewContractImport                 is a ContractImport
			
			Action Rules
			
				WorkingContractID Set Rules
				
					Exit Rules
					
						if (AutoUpdateContracts)
							invoke ProcessContractLineUpdates LocalNewContractImport
								invoked.ContractGroup 			= ContractGroup
								invoked.ContractImport			= LocalNewContractImport
								invoked.UpdateCostsOnly         = UpdateCostsOnly
								invoked.UpdateContract			= ParmUpdateContract
								invoked.TolerancePercent		= TolerancePercent	
								invoked.Connector               = Connector
								invoked.ToleranceAmount			= ToleranceAmount	
								invoked.RejectAllCostIncreases	= RejectAllCostIncreases							
								invoked.ProcessItemMasterOnly   = ProcessItemMasterOnly
								invoked.IndirectUpdate          = true
								if (ParmUpdateContract = true)
									invoked.FromCatalogUpdate   = true
				
				Instance Rules
				
					if (RecordType = 1)
						LocalContractGroup                  = ContractGroup
						LocalUpdateContract                 = ParmUpdateContract
						invoke CreateNoRules ContractImport
							assign result to LocalContractImportView
							invoked.ContractGroup     		= ContractGroup
							invoked.WorkingContractID 		= WorkingContractID	
							if (ParmUpdateContract entered)
								invoked.ContractType        		= UpdateContractRel.ContractType
								invoked.ContractSubtype     		= UpdateContractRel.ContractSubtype
								invoked.ContractClassification 		= UpdateContractRel.ContractClassification
								invoked.ContractSubclassification 	= UpdateContractRel.ContractSubclassification
								invoked.ManufacturerOrDistributor   = UpdateContractRel.ManufacturerOrDistributor
								invoked.CurrencyCode                = UpdateContractRel.CurrencyCode
								invoked.Priority                    = UpdateContractRel.Priority
								invoked.SupplierSourceId            = UpdateContractRel.SupplierSourceId
								invoked.LineLevelBreaks             = UpdateContractRel.LineLevelBreaks
								if (Name !entered)
									invoked.Name                    = UpdateContractRel.Name
								else
									invoked.Name                    = Name
								if (UpdateContractRel.ManufacturerCodeDivision.ManufacturerCode entered)
									invoked.ManufacturerCodeDivision.ManufacturerCode 	  = UpdateContractRel.ManufacturerCodeDivision.ManufacturerCode
								else
									invoked.ManufacturerCodeDivision.ManufacturerCode = ManufacturerCodeDivision.ManufacturerCode	
								if (UpdateContractRel.ManufacturerCodeDivision.ManufacturerDivision entered)
									invoked.ManufacturerCodeDivision.ManufacturerDivision = UpdateContractRel.ManufacturerCodeDivision.ManufacturerDivision
								else
									invoked.ManufacturerCodeDivision.ManufacturerDivision = ManufacturerCodeDivision.ManufacturerDivision		
							else
								invoked.ContractType				= ContractGroup.EdiDefaultContractType
								invoked.ContractClassification		= ContractGroup.EdiDefaultContractClassification
								invoked.Priority                    = 5
								invoked.SupplierSourceId            = 1
								if (SupplierRel.Vendor.InvoiceCurrency entered)
									invoked.CurrencyCode            = SupplierRel.Vendor.InvoiceCurrency
								else
									invoked.CurrencyCode            = ContractGroup.DefaultCurrency
								invoked.ManufacturerCodeDivision.ManufacturerCode = ManufacturerCodeDivision.ManufacturerCode
								invoked.ManufacturerCodeDivision.ManufacturerDivision = ManufacturerCodeDivision.ManufacturerDivision
								invoked.Name              		    = Name
							if (Vendor !entered
							and Supplier entered)
								invoked.Vendor            	= SupplierRel.Vendor
							else
								invoked.Vendor              = Vendor
							if (Supplier !entered
							and Vendor entered)
								invoked.Supplier            = first VendorSupplierRel.Supplier
							else
								invoked.Supplier       		= Supplier
							if (Supplier !entered
							and GlobalLocationNumber entered)
								invoked.Supplier            = first GlobalLocationNumberSupplierRel.Supplier
							invoked.EffectiveDate     		= EffectiveDate
							invoked.ExpirationDate    		= ExpirationDate
							invoked.ContractImportSource    = 2

						LocalContractImport                 = LocalContractImportView.ContractImport	
						LocalNewContractImport              = LocalContractImportView.ContractImport	
					if (RecordType = 2)
						if (LocalNewContractImport !entered)
							LocalNewContractImport = WorkingContractIDRel.ContractImport
						if (LocalNewContractImport entered)
							invoke Create ContractImportTier
								invoked.ContractGroup           = ContractGroup
								invoked.ContractImport          = LocalNewContractImport
								invoked.ContractImportTier      = ContractImportTier
								invoked.TierTitle               = ContractImportTier
								invoked.Description             = TierDescription
							if (WorkingContractIDRel.ManufacturerOrDistributor.ManufacturerContract = false)
								invoke FastUpdate WorkingContractIDRel
									invoked.ManufacturerOrDistributor.ManufacturerContract = true
					if (RecordType = 3)
						LocalContractGroup 	= ContractGroup
						if (LocalNewContractImport !entered)
							LocalNewContractImport = WorkingContractIDRel.ContractImport
						if (LocalNewContractImport entered)
							LocalContractImport = LocalNewContractImport
							if (Tier5 entered)
								LocalImportTier = Tier5
								if (ContractImportTierRel !exists)
									invoke Create ContractImportTier
										invoked.ContractGroup       = ContractGroup
										invoked.ContractImport      = LocalNewContractImport
										invoked.ContractImportTier  = Tier5
										invoked.TierTitle           = Tier5
							if (Tier1 entered)
								LocalImportTier = Tier1
								if (ContractImportTierRel !exists)
									invoke Create ContractImportTier
										invoked.ContractGroup       = ContractGroup
										invoked.ContractImport      = LocalNewContractImport
										invoked.ContractImportTier  = Tier1
										invoked.TierTitle           = Tier1
	
							if (Tier2 entered)
								LocalImportTier = Tier2
								if (ContractImportTierRel !exists)
									invoke Create ContractImportTier
										invoked.ContractGroup       = ContractGroup
										invoked.ContractImport      = LocalNewContractImport
										invoked.ContractImportTier  = Tier2
										invoked.TierTitle           = Tier2
							if (Tier3 entered)
								LocalImportTier = Tier3
								if (ContractImportTierRel !exists)
									invoke Create ContractImportTier
										invoked.ContractGroup       = ContractGroup
										invoked.ContractImport      = LocalNewContractImport
										invoked.ContractImportTier  = Tier3
										invoked.TierTitle           = Tier3
							if (Tier4 entered)
								LocalImportTier = Tier4
								if (ContractImportTierRel !exists)
									invoke Create ContractImportTier
										invoked.ContractGroup       = ContractGroup
										invoked.ContractImport      = LocalNewContractImport
										invoked.ContractImportTier  = Tier4
										invoked.TierTitle           = Tier4
							if (Tier1 entered
							or  Tier2 entered
							or  Tier3 entered
							or  Tier4 entered
							or  Tier5 entered)
								if (WorkingContractIDRel.ManufacturerOrDistributor.ManufacturerContract = false)
									invoke FastUpdate WorkingContractIDRel
										invoked.ManufacturerOrDistributor.ManufacturerContract = true
							invoke CreateNoRules ContractLineImport
								assign result to LocalContractLineImportView
								invoked.ContractGroup           = ContractGroup
								invoked.ContractImport          = LocalNewContractImport
								invoked.ItemNumber              = ItemNumber
								invoked.VendorItem              = VendorItem
								invoked.VendorItemDescription   = VendorItemDescription
								invoked.ItemDescription         = VendorItemDescription
								invoked.BaseCost                = BaseCost
								invoked.UOM                     = UOM
								invoked.ManufacturerInformation.Manufacturer.ManufacturerCode = LocalNewContractImport.ManufacturerCodeDivision.ManufacturerCode
								invoked.ManufacturerInformation.Manufacturer.ManufacturerDivision = LocalNewContractImport.ManufacturerCodeDivision.ManufacturerDivision							
								invoked.ManufacturerInformation.ManufacturerNumber      = ManufacturerNumber
								invoked.GlobalTradeItemNumber   = GlobalTradeItemNumber
								if (EffectiveDate entered)
									invoked.EffectiveDate  		= EffectiveDate
								else
									invoked.EffectiveDate       = LocalNewContractImport.EffectiveDate
								if (ExpirationDate entered)
									invoked.ExpirationDate 		= ExpirationDate
								else
									invoked.ExpirationDate      = LocalNewContractImport.ExpirationDate
								if (ParmUpdateFunction = 0)
									invoked.UpdateFunction      = "C"
								else 
								if (ParmUpdateFunction = 1)
									invoked.UpdateFunction      = "U" 
								invoked.CanUseForCostDefaulting = true
								invoked.TransientTierCost1      = Tier1Cost              
								invoked.TransientTier1          = Tier1        
								invoked.TransientTierCost2      = Tier2Cost        
								invoked.TransientTier2          = Tier2        
								invoked.TransientTierCost3      = Tier3Cost        
								invoked.TransientTier3          = Tier3        
								invoked.TransientTierCost4      = Tier4Cost        
								invoked.TransientTier4          = Tier4        
								invoked.TransientTierCost5      = Tier5Cost        
								invoked.TransientTier5          = Tier5        
							
					if (LocalNewContractImport entered)
						invoke FastDelete
							
							
				
	
