RecurringLeasePaymentDetail is a BusinessClass
    owned by lm
    prefix is LPR
    classic name is LMPAYRECUR

    Ontology
        symbolic key is RecurringLeasePaymentDetail
            classic set name is LPRSET3
            classic name is RECUR-NBR
            classic name for Vendor is PMT-VENDOR

    Patterns
        implements StaticJava
        disable AuditIndex
		implements Archivable

    Persistent Fields
		PaymentDateRange			is a DateRange
		FirstPaymentNumber			is a PaymentNumber
            classic name is PMT-NBR
		ExecutoryCostCode
			default label is "NonLeaseComponent"			
            classic name is EXEC-CODE
        Currency
            classic name is CURRENCY-CODE
        CurrencyNumberOfDecimals
            classic name is CURR-ND
        NumberOfPayments          	is Numeric size 6
            classic name is NBR-OF-PMTS
        Frequency					is AlphaUpper size 1
			States
	            Weekly       value is "W"
	            Monthly      value is "M"
	            Quarterly    value is "Q"
	            Yearly       value is "Y"
	            SemiAnnually value is "S"
	                default label is "Semi-annually"
        AuthorityCode             	is a PayablesAuthorityCode
            classic name is AUTH-CODE
        DueDate
        PaymentAmount             	is an InternationalAmount
        	precision is Lease.CurrencyNumberOfDecimals
            classic name is PAYMENT-AMT
        Released                  	is Boolean
            classic name is RELEASED-FL
		Taxable 					is Boolean							
        TaxCode
        PercentTaxable            	is a Percent
            classic name is PCNT-TAXABLE
        TaxUsageCode       
            classic name is TAX-USAGE-CD
        TransactionTaxableAmount  	is an InternationalAmount
        	precision is Lease.CurrencyNumberOfDecimals
            classic name is TRAN-TAXABLE
        TransactionLandTax        	is an InternationalAmount
        	precision is Lease.CurrencyNumberOfDecimals
            classic name is TRAN-LAND-TAX
		LeaseCompute
		ComputeGroup
        ComputeBaseAmount         is an InternationalAmount
            classic name is CMP-PMT-AMT
        AccountGroup												
        GeneralLedgerBudgetNumber is a BudgetNbr                   
            classic name is GL-BUDGET-NBR
            default label is "GlobalLedgerBudgetNumber"
        MaximumPayment            is an InternationalAmount
            classic name is MAXIMUM-PMT
        AdvancedComputeOption
            classic name is COMPUTE-OPT
        AccrueFlag                is Boolean                      
        AccrueReverseFlag	      is Boolean                       
            classic name is ACCRUE-RVRS
        AnnualChangeAmount		  is an InternationalAmount
        AnnualChangePercent		  is a Percent
		CombineWithLeasePayment	  is Boolean

	Local Fields
		LocalPaymentNumber		    is like PaymentNumber
		LocalDueDate				is Date
		LocalPeriodDate				is Date
		LocalDateDifference			is Numeric 3
		I1							is Numeric 3
		CalculateTax
		LocalCalculateTaxExecuted	is Alpha 1
		LocalTotalTaxAmount			is an InternationalAmount
		LocalPaymentAmount			is an InternationalAmount			
		LocalPeriodDateYear			is Year
		LocalInitalDueDateDay		is Numeric 3
		LocalInvoiceDay             is Numeric 3
		LocalPeriodDay				is Numeric 3
		LocalFirstDueDate           is Date
		LocalAction					is Alpha 1
		LocalIncreaseDate           is Date
		LocalCompletionMessage		is Text
		LocalUseBeginDate			is Boolean

	Derived Fields
		Sequence is a DerivedField
			type is like RecurringLeasePaymentDetail 
			return RecurringLeasePaymentDetail

		PaymentPlusTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (PaymentAmount + TransactionLandTax)
			
		TotalTaxAmount is a DerivedField
			type is like InternationalAmount
			initialize CalculateTax
			CalculateTax.TaxEntity										= Company.AccountingEntity
			CalculateTax.System											= "AP"
			CalculateTax.Vendor											= LeasePayment.Vendor
			CalculateTax.TaxCode 										= TaxCode
			CalculateTax.FromTaxCode									= LeasePayment.Vendor.TaxCode
			CalculateTax.ProcessLevel									= LeasePayment.ProcessLevel
			CalculateTax.PostalAddress									= LeasePayment.ProcessLevel.PostalAddress
			CalculateTax.FromPostalAddress								= LeasePayment.Vendor.VendorAddress
			CalculateTax.Function										= "C"
			CalculateTax.ThirdPartyFunction								= "I"
			if (LeasePayment.Lease.Ownership)
				CalculateTax.TransactionType							= "P"
			else
				CalculateTax.TransactionType							= "L"		
			if (PercentTaxable entered)
				CalculateTax.TaxableAmount 								= (PaymentAmount * PercentTaxable)
			else
				CalculateTax.TaxableAmount								= TransactionTaxableAmount
			CalculateTax.TaxDate										= DueDate
			CalculateTax.DontCreateLogFile								= true
			LocalCalculateTaxExecuted									= CalculateTax.ExecuteCalculateTax
			return CalculateTax.OutputTotalTaxAmount

		TotalInvoiceTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			initialize CalculateTax
			CalculateTax.TaxEntity										= Company.AccountingEntity
			CalculateTax.System											= "AP"
			CalculateTax.Vendor											= LeasePayment.Vendor
			CalculateTax.TaxCode 										= TaxCode
			CalculateTax.FromTaxCode									= LeasePayment.Vendor.TaxCode
			CalculateTax.ProcessLevel									= LeasePayment.ProcessLevel
			CalculateTax.PostalAddress									= LeasePayment.ProcessLevel.PostalAddress
			CalculateTax.FromPostalAddress								= LeasePayment.Vendor.VendorAddress
			CalculateTax.Function										= "C"
			CalculateTax.ThirdPartyFunction								= "I"
			if (LeasePayment.Lease.Ownership)
				CalculateTax.TransactionType							= "P"
			else
				CalculateTax.TransactionType							= "L"		
			if (PercentTaxable entered)
				CalculateTax.TaxableAmount 								= (PaymentAmount * PercentTaxable)
			else
				CalculateTax.TaxableAmount								= TransactionTaxableAmount
			CalculateTax.TaxDate										= DueDate
			CalculateTax.DontCreateLogFile								= true
			LocalCalculateTaxExecuted									= CalculateTax.ExecuteCalculateTax
			I1 = 1
			while (I1 <= 8)
				LocalTotalTaxAmount									   += CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount
				I1 += 1
			return LocalTotalTaxAmount

		TotalPaymentAmount is a DerivedField
			type is like InternationalAmount
			return (PaymentAmount + TotalInvoiceTaxAmount)
			
		LeaseRepresentativeText is a StringField
			type is Text
			default label is "Lease"
			Lease " - " Lease.Description
			
		CompanyRepresentativeText is a StringField
			type is Text
			default label is "Company"
			Company " - " Company.Name
			
		VendorRepresentativeText is a StringField
			type is Text
			default label is "Vendor"
			Vendor " - " Vendor.VendorName

		DerivedDueDateDifference is a DerivedField
			type is Numeric 3		
			if (LocalInitalDueDateDay != LocalInvoiceDay)
				DerivedDueDateDifference = LocalInvoiceDay - LocalInitalDueDateDay
				
		DerivedPeriodDateDifference is a DerivedField
			type is Numeric 3
			if (LocalInitalDueDateDay != LocalPeriodDay) 	
				DerivedPeriodDateDifference = LocalPeriodDay - LocalInitalDueDateDay		

		CreateRecurringLeasePaymentDetail							is a MessageField
			restricted
			"CreatedCompletedSucessfully"
		
		UpdateRecurringLeasePaymentDetail							is a MessageField
			restricted
			"UpdatedCompletedSucessfully"
		
		DeleteRecurringLeasePaymentDetail							is a MessageField
			restricted
			"DeleteCompletedSuccesfully"

		CreateRecurringLeasePaymentDetailWithAmortizationMessage	is a MessageField
			restricted
			"CreateComplete;AmortizationNeedsToBeRecalculated"
		
		UpdateRecurringLeasePaymentDetailWithAmortizationMessage	is a MessageField
			restricted
			"UpdateComplete;AmortizationNeedsToBeRecalculated"
		
		DeleteRecurringLeasePaymentDetailWithAmortizationMessage	is a MessageField
			restricted
			"DeleteComplete;AmortizationNeedsToBeRecalculated"

    Conditions
		PaymentOrComputeOrTaxableAmount
			restricted
			when (PaymentAmount entered
			or    LeaseCompute.ComputeStatement entered
			or    TransactionTaxableAmount entered) 

		IsLandedTax
			restricted
			when  (TaxCode entered
			and	 ((TaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.LandedCost)
			or 	 (!TaxEntityRel.UseTaxCodeAccounts
			and    TaxEntityRel.LandedCost)))

		HasAnnualIncreases
			restricted
			when (AnnualChangeAmount entered
			or	  AnnualChangePercent entered)

		AllowLandedTax
			when (ExecutoryCostCode entered)

    Relations

        LeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set6
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
                related.RecurringLeasePaymentDetail 				= RecurringLeasePaymentDetail
                
        LeasePaymentDetailDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
            Instance Selection
            	where (related.LeasePaymentDetail.ExecutoryCostCode not entered
            	and    related.PaymentAmount != 0)

        HistoricalLeasePaymentDetailDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
            Instance Selection
            	where (related.LeasePaymentDetail.ExecutoryCostCode not entered
            	and    related.Released)

        NonInvoicedLeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set6
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
                related.RecurringLeasePaymentDetail 				= RecurringLeasePaymentDetail
            Instance Selection
            	where (!related.Released)

        AnotherLeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set6
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                     					= Vendor
            Instance Selection
                where (related.RecurringLeasePaymentDetail 			!= RecurringLeasePaymentDetail
                and    related.LeasePaymentDetail.PaymentNumber 	= LocalPaymentNumber
                and    related.LeasePaymentDetail.ExecutoryCostCode = ExecutoryCostCode)

        AnotherLeasePaymentDetailDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set6
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
            Instance Selection
                where (related.LeasePaymentDetail.PaymentNumber 	 != LocalPaymentNumber
                and    related.LeasePaymentDetail.ExecutoryCostCode  = ExecutoryCostCode
                and    related.DueDate								 = LocalDueDate)

		LeaseExecutoryCostCodeRel
			one-to-one relation to LeaseExecutoryCostCode
			Field Mapping uses symbolic key		
				related.Company										= Company
				related.ExecutoryCostCode							= ExecutoryCostCode
				related.Lease										= Lease

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup
                related.TaxEntity 									= Company.AccountingEntity

        EntityTaxCodeRel
            classic name is TAXCODE
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup
                related.TaxEntity 									= Company.AccountingEntity
                related.TaxCode 									= TaxCode

		RecurringLeasePaymentDetailRel
            one-to-many relation to RecurringLeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
       		Instance Selection
                where (related.RecurringLeasePaymentDetail != RecurringLeasePaymentDetail)
        
        NonExecutoryRecurringLeasePaymentDetailRel
        	one-to-many relation using RecurringLeasePaymentDetailRel
        	Instance Selection
        		where (related.ExecutoryCostCode not entered)
        
        ExecutoryRecurringLeasePaymentDetailRel
        	one-to-many relation using RecurringLeasePaymentDetailRel
        	Instance Selection
        		where (related.ExecutoryCostCode = ExecutoryCostCode)
        				        
		NonExecutoryLeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set2
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
       		Instance Selection
                where (related.LeasePaymentDetail.ExecutoryCostCode not entered)
                
       	ExecutoryLeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set2
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
            Instance Selection
                where (related.LeasePaymentDetail.ExecutoryCostCode entered
                and	   related.LeasePaymentDetail.ExecutoryCostCode = ExecutoryCostCode)
        
    Sets

        Set2
            indexed
            Sort Order
                Company
                Lease
                Vendor
                RecurringLeasePaymentDetail descending

        Set1
            indexed
            Sort Order
                Company
                Lease
                Vendor
                RecurringLeasePaymentDetail

        Set4
            indexed
            Sort Order
                Company
                Lease
                Vendor
                RecurringLeasePaymentDetail

        ByExecutoryCostBeginDate
            indexed
            Sort Order
                Company
                Lease
                Vendor
				ExecutoryCostCode
				PaymentDateRange.Begin
                RecurringLeasePaymentDetail

        ByBeginDate
            indexed
            Sort Order
                Company
                Lease
                Vendor
				PaymentDateRange.Begin
				ExecutoryCostCode
                RecurringLeasePaymentDetail 
           









	Rule Blocks
		IncrementDueDate
			if (Frequency.Weekly)
				I1						 = 1
				LocalPaymentNumber		+= 1
				LocalDueDate 			+= 7 days
				LocalPeriodDate			+= 7 days
			else
			if (Frequency.Monthly)
				I1						 = 1
				LocalPaymentNumber		+= 1
				if (LocalDueDate = LocalPeriodDate)
					LocalDueDate 		+= 1 month
				LocalPeriodDate			+= 1 month
			else
			if (Frequency.Quarterly)
				I1						 = 3
				LocalPaymentNumber		+= 1
				if (!ExecutoryCostCode entered)

					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 3 months
					LocalPeriodDate		+= 1 month
				else
					LocalDueDate		+= 3 months
					LocalPeriodDate		+= 3 months
			else
			if (Frequency.SemiAnnually)
				I1						 = 6
				LocalPaymentNumber		+= 1
				if (!ExecutoryCostCode entered)

					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 6 months
					LocalPeriodDate		+= 1 month
				else
					LocalDueDate		+= 6 months
					LocalPeriodDate		+= 6 months
			else
			if (Frequency.Yearly)
				I1						 = 1
				LocalPaymentNumber		+= 1
				if (!ExecutoryCostCode entered)

					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 1 year
					LocalPeriodDate		+= 1 month
				else	
					LocalDueDate		+= 1 year
					LocalPeriodDate		+= 1 year
				
		TaxCalculation
			initialize CalculateTax
			CalculateTax.TaxEntity										= Company.AccountingEntity
			CalculateTax.System											= "AP"
			CalculateTax.Vendor											= LeasePayment.Vendor
			CalculateTax.TaxCode 										= TaxCode
			CalculateTax.FromTaxCode									= LeasePayment.Vendor.TaxCode
			CalculateTax.ThirdPartyFunction								= "I"
			CalculateTax.Function										= "I"
			CalculateTax.ProcessLevel									= LeasePayment.ProcessLevel
			CalculateTax.PostalAddress									= LeasePayment.ProcessLevel.PostalAddress
			CalculateTax.FromPostalAddress								= LeasePayment.Vendor.VendorAddress
			constraint (CalculateTax.OutputErrorNumber not entered) 
				"<CalculateTax.OutputErrorMessage>"
			CalculateTax.Function										= "C"
			CalculateTax.ThirdPartyFunction								= "I"
			if (LeasePayment.Lease.Ownership)
				CalculateTax.TransactionType							= "P"
			else
				CalculateTax.TransactionType							= "S"		
			if (PercentTaxable entered)
				CalculateTax.TaxableAmount 								= (PaymentAmount * PercentTaxable)
			else
				CalculateTax.TaxableAmount								= TransactionTaxableAmount
			CalculateTax.TaxDate										= DueDate
			LocalCalculateTaxExecuted									= CalculateTax.ExecuteCalculateTax
			if (IsLandedTax)
				if (ExecutoryCostCode not entered
				and !Lease.IsShortTermLease)
					constraint (!IsLandedTax) 
						"TaxCodeHasLandedTaxes.LandedTaxesAreCurrentlyNotSupportedOnLeases"
				else
					TransactionLandTax									= CalculateTax.OutputTotalTaxAmount	

	Field Rules
		PaymentDateRange
			required
			if (!ExecutoryCostCode entered)
				if (HistoricalLeasePaymentDetailDueDateRel exists)
					constraint (PaymentDateRange.Begin > last HistoricalLeasePaymentDetailDueDateRel.DueDate)
						"RecurringPaymentMustStartAfterTheLastHistoricalPaymentDueDate"
				else					
					if (!NonExecutoryRecurringLeasePaymentDetailRel exists)
						constraint (PaymentDateRange.Begin = Lease.BeginDate)
							"RecurringPaymentMustStartWithTheLeaseBeginDate"
					else
						if (LocalAction != "U")
							constraint (PaymentDateRange.Begin > last NonExecutoryRecurringLeasePaymentDetailRel.PaymentDateRange.End)
								"RecurringPaymentMustStartAfterTheLastRecurringPaymentDetail"
							
							constraint (PaymentDateRange.Begin <= last NonExecutoryRecurringLeasePaymentDetailRel.PaymentDateRange.End + 1 month)
								"RecurringPaymentMustStartWithinAMonthOfTheLastRecurringPaymentDetail"



			
			constraint (PaymentDateRange.End <= Lease.EndDate)
				"RecurringPaymentCannotEndAfterTheLeaseEndDate"	
						
		Currency
			default to Lease.Currency
			
		CurrencyNumberOfDecimals
			default to Lease.CurrencyNumberOfDecimals

		NumberOfPayments
			cannot be changed
			
		Frequency
            required
			cannot be changed
			if (!ExecutoryCostCode entered)
				constraint (!Frequency.Weekly)
					"WeeklyPaymentOnlyAllowedOnExecutoryCostCodePayments"
		
		DueDate
            required
			cannot be changed
			constraint (DueDate within PaymentDateRange)
				"DueDateMustBeWithinThePaymentDateRange"
				
		Released
			cannot be entered

		PaymentAmount
			if (Lease.IsReleased
			and Lease.LeaseClassification.Finance
			and ExecutoryCostCode not entered)
				cannot be changed
					"OnlyExecutoryPaymentAmountsCanBeChangedOnReleasedLease"
					
        Taxable
        	if (ExecutoryCostCode entered)
        		default to LeaseExecutoryCostCodeRel.Taxable
        		
        TaxCode
        	if (ExecutoryCostCode entered)
        		default to LeaseExecutoryCostCodeRel.TaxCode
        	else
        	if (Taxable)
        		default to LeasePayment.RemitToCode.TaxCode
        		default to LeasePayment.Vendor.TaxCode
        		required
			else
				cannot be entered
					"CannotEnterTaxCode,LineIsNotTaxable"

		TransactionLandTax
			if (!Taxable)
				initialize TransactionLandTax

        TaxUsageCode
        	if (ExecutoryCostCode entered)
        		default to LeaseExecutoryCostCodeRel.TaxUsageCode
        	else
        	if (Taxable)
        		default to LeasePayment.RemitToCode.TaxUsageCode
        		default to LeasePayment.Vendor.TaxUsageCode
			else

				cannot be entered
					"TaxUsageCodeNotValid,PaymentDetailIsNotTaxable"

		PercentTaxable
			constraint (PercentTaxable <= 100)
				"PercentTaxableMustBeBetween0And100"
			constraint (PercentTaxable >= 0)
				"PercentTaxableMustBeBetween0And100"	
								
			if (!Taxable)
				cannot be entered
					"PercentTaxableNotValid,PaymentDetailIsNotTaxable"
			else
				if (TransactionTaxableAmount entered)
					cannot be entered
						"CannotEnterBothTransactionTaxableAmountAndPercentTaxable"
				else
					required
						"MustEnterEitherTransactionTaxableAmountOrPercentTaxableIfPaymentSetToTaxable"
				        						
		TransactionTaxableAmount
			if (!Taxable)
				cannot be entered
					"TaxableAmountNotValid,PaymentDetailIsNotTaxable"
			else
				if (PercentTaxable entered)
					cannot be entered
						"CannotEnterBothTransactionTaxableAmountAndPercentTaxable"
				else
					required
						"MustEnterEitherTransactionTaxableAmountOrPercentTaxableIfPaymentSetToTaxable"
		
		AnnualChangeAmount
			constraint (!AnnualChangePercent entered)
				"CanEnterEitherAnAnnualAmountChangeOrAnnualPercentChange"
					
        AnnualChangePercent
        	constraint (!AnnualChangeAmount entered)
				"CanEnterEitherAnAnnualAmountChangeOrAnnualPercentChange"

		CombineWithLeasePayment
			cannot be changed
			if (ExecutoryCostCode entered)
				default to LeaseExecutoryCostCodeRel.CombineWithLeasePayment
			else
				CombineWithLeasePayment	= false

	Actions
		Create is a Create Action
			completion message is "<LocalCompletionMessage>"
			Entrance Rules
				LocalAction = "C"


				constraint (!Released)
					"CannotAdd;InvoiceAlreadyCreated"
				if (Lease.IsReleased
				and Lease.HasAmortizationSchedule)
					constraint (ExecutoryCostCode entered)
						"OnlyNonLeaseComponentPaymentsCanBeAddedToReleasedLease"
				if (ExecutoryCostCode entered)
					constraint (LeaseExecutoryCostCodeRel exists)
						"LeaseNonLeaseComponentNotAssignedToThisLease"

				if (!Lease.LeaseClassification.Operating)
					constraint (LeaseCompute.ComputeStatement entered
					or          TransactionTaxableAmount entered
					or          ExecutoryCostCode entered
					or          PaymentAmount entered)
						"PaymentAmount,ComputeNameOrTaxableAmountMustBeEntered"   
				if (Lease.HasAmortizationSchedule
				and ExecutoryCostCode not entered)
					LocalCompletionMessage	= CreateRecurringLeasePaymentDetailWithAmortizationMessage
				else
					LocalCompletionMessage = CreateRecurringLeasePaymentDetail

			Action Rules
				if (Taxable
				and LeaseCompute.ComputeStatement not entered)
					include TaxCalculation

			Exit Rules		
				if (!ExecutoryCostCode entered)
					if (PaymentDateRange.Begin = DueDate)
						LocalPeriodDate = DueDate
					else
					if (DueDate < PaymentDateRange.Begin + 1 month
					and DueDate day >= Lease.BeginDate day) 
						LocalPeriodDate = DueDate
					else
						LocalDateDifference = (((DueDate year - PaymentDateRange.Begin year) * 12) + (DueDate month - PaymentDateRange.Begin month))
						LocalPeriodDate = DueDate - LocalDateDifference as months
				else
					LocalPeriodDate = DueDate
				LocalDueDate = DueDate
				
				LocalPaymentAmount = PaymentAmount
				LocalPeriodDateYear = LocalPeriodDate year
				LocalFirstDueDate = DueDate
				LocalIncreaseDate = DueDate + 1 year
				LocalInitalDueDateDay = DueDate day
				while (LocalPeriodDate <= PaymentDateRange.End)
					initialize	LocalUseBeginDate
					if (HasAnnualIncreases
					and	LocalPeriodDate >= LocalIncreaseDate)
						if (AnnualChangeAmount entered)
							LocalPaymentAmount += AnnualChangeAmount
						else
							LocalPaymentAmount *= (1 + AnnualChangePercent)
						LocalIncreaseDate += 1 year
						
					if (!LocalFirstDueDate is last day in month)
						LocalInvoiceDay = LocalDueDate day
						LocalPeriodDay = LocalPeriodDate day
						if (DerivedDueDateDifference > 0)
							LocalDueDate -= DerivedDueDateDifference as days
						if (DerivedPeriodDateDifference > 0)
							LocalPeriodDate -= DerivedPeriodDateDifference as days		

					if (LocalPeriodDate < Lease.BeginDate
					and LocalDueDate != LocalPeriodDate)
						LocalUseBeginDate	= true	

					invoke Create LeasePaymentDetail
						fill in fields from this instance
						invoked.LeasePaymentDetail.ExecutoryCostCode	= ExecutoryCostCode
						if (LocalUseBeginDate)
							invoked.DueDate								= Lease.BeginDate
						else
							invoked.DueDate								= LocalPeriodDate
						invoked.CombineWithLeasePayment					= CombineWithLeasePayment
						if (LocalDueDate != LocalPeriodDate)
							initialize invoked.PaymentAmount
						else
							invoked.PaymentAmount						= LocalPaymentAmount	

					include IncrementDueDate	
					if (LocalDueDate = LocalPeriodDate)
						NumberOfPayments += 1
					
		RestrictedCreate is a Create Action
			restricted
			bypass field rules
			
		RestrictedUpdate is an Update Action  		
			restricted
			bypass field rules

		Update is an Update Action
			completion message is "<LocalCompletionMessage>"
			Entrance Rules
				LocalAction = "U"
				constraint (Lease.EitherUnreleasedOrReleased)
					"CannotModify;LeaseIs<Lease.Status>"
				if (Lease.IsReleased
				and Lease.HasAmortizationSchedule)
					constraint (ExecutoryCostCode entered)
						"OnlyNonLeaseComponentPaymentsCanBeUpdatedOnAReleasedLease"
				constraint (!Released)
					"CannotModify;InvoiceAlreadyCreated"
				constraint (NonInvoicedLeasePaymentDetailRel exists)
					"CannotModify;AllPaymentDetailsHaveBeenReleased"
				constraint (LeaseCompute.ComputeStatement entered
				or          TransactionTaxableAmount entered
				or          ExecutoryCostCode entered
				or          PaymentAmount entered)
					"PaymentAmount,ComputeNameOrTaxableAmountMustBeEntered"
				if (Lease.HasAmortizationSchedule
				and ExecutoryCostCode not entered)
					LocalCompletionMessage	= UpdateRecurringLeasePaymentDetailWithAmortizationMessage
				else
					LocalCompletionMessage = UpdateRecurringLeasePaymentDetail					
			Action Rules
				if (Taxable
				and LeaseCompute.ComputeStatement not entered)
					include TaxCalculation

			Exit Rules			
				LocalPeriodDateYear = LeasePaymentDetailDueDateRel.DueDate
				LocalPaymentAmount = PaymentAmount
				LocalIncreaseDate = LeasePaymentDetailDueDateRel.DueDate + 1 year
				for each LeasePaymentDetailRel
					LocalPeriodDate = each.DueDate
					if (HasAnnualIncreases
					and LocalPeriodDate >= LocalIncreaseDate)
						if (AnnualChangeAmount entered)
							LocalPaymentAmount += AnnualChangeAmount
						else
							LocalPaymentAmount *= (1 + AnnualChangePercent)
						LocalIncreaseDate += 1 year
						
					if (!each.Released
					and each.PaymentAmount != 0)
						invoke Update each
							fill in fields from this instance
								except invoked.LeasePaymentDetail.PaymentNumber
								except invoked.LeasePaymentDetail.ExecutoryCostCode
								except invoked.DueDate
							invoked.PaymentAmount = LocalPaymentAmount
				if (Taxable changed
				or	PaymentAmount changed)
					invoke StraightLineUpdate LeasePayment
											
		UpdateStatusAfterDeleteLeaseInvoice		is an Instance Action
			restricted
			Action Rules
				Released     = false
				
		Delete is a Delete Action
			completion message is "<LocalCompletionMessage>"
			Entrance Rules


				if (Lease.HasAmortizationSchedule
				and ExecutoryCostCode not entered)
					LocalCompletionMessage	= DeleteRecurringLeasePaymentDetailWithAmortizationMessage
					invoke RemoveAmortization Lease
				else
					LocalCompletionMessage = DeleteRecurringLeasePaymentDetail
				constraint (!Released)
					"CannotDelete;InvoiceAlreadyCreated"
				if (Lease.IsReleased
				and Lease.HasAmortizationSchedule)
					constraint (ExecutoryCostCode entered)
						"OnlyNonLeaseComponentPaymentsCanBeDeletedOnReleasedLease"
				if (Lease.Status.Unreleased)
					invoke Purge LeasePaymentDetailRel		
				else
					invoke Delete LeasePaymentDetailRel						

		RestrictedDelete is a Delete Action
			restricted
			Entrance Rules
				invoke Delete LeasePaymentDetailRel

		Purge is a Purge Action
			restricted					
