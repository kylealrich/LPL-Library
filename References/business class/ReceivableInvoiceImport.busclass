ReceivableInvoiceImport is a BusinessClass
	owned by ar
	prefix is AIT
	classic name is ARITRANS

	Ontology
		symbolic key is ReceivableInvoiceImport
			classic set name is AITSET2

	Patterns
		implements StaticJava
		disable AuditIndex
		enable explicit context override
		disable Auditing
		disable EffectiveDated
		disable DataTranslations
		implements InlineUserFields
			size is 1000

	Persistent Fields
		RunGroup
		Company									is a ReceivableCompany
		InvoiceType								is a ReceivableInvoiceType
		Invoice
		PaymentSeq								is a Sequence
		Customer
		InterfacedCustomer
			default label is "ExternalCustomer"
		Status									is Numeric size 1
			States
				Open			value is 1
				FullyApplied	value is 7
					default label is "Fully applied"
				Closed			value is 8
				Historical		value is 9
		GLStatus								is Numeric size 1
			States
				NotPosted	value is 2
					default label is "ToBePosted"  
				Posted		value is 9
					default label is "HasBeenPosted"  
		LastStatementDate						is Date
			classic name is LAST-STA-DATE
		BatchNumber
			classic name is BATCH-NBR
		ReceivableProcessLevel
			classic name is PROCESS-LEVEL
		TransactionDate							is an ExchangeDate
			classic name is TRANS-DATE
		GeneralLedgerDate						is a PostingDate
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		LastApplicationSequence
			classic name is APPLIED-SEQ
		LastFinanceChargeDate					is Date
			classic name is LAST-FC-DATE
		CustomerPurchaseOrder
			classic name is CUST-PO-NBR
		XrefCompany								is like ReceivableCompany
			disable surrogates
		XrefType								is AlphaUpper size 1
			States
				DebitMemo			value is "D"
				Invoice				value is "I"
				OrderNumberOrOther	value is "O"
		XrefNbr
		XrefPymtSeq
		Description
		ReceivableGeneralLedgerCode
			classic name is AR-CODE
		SalesRepresentative
			classic name is SALESMAN
		TransactionUserField1					is a TransUser1
			classic name is TRANS-USER1
		TransUser2								is a S3Agent
			classic name is TRANS-USER2
		TransUser3								is Date
			classic name is TRANS-USER3
		TransUser4
			classic name is TRANS-USER4
		TransUser5								is an InternationalAmount
			classic name is TRANS-USER5
		OriginalCurrency						is a FromCurrency
			classic name is ORIG-CURRENCY
			default label is "TransactionCurrency"	
		CurrencyRate							is an OrigRate				
			classic name is ORIG-RATE
			restricted														
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		InvoiceAmount				 			is a FinanceCurrencyAmountGroup
			default label is "InvoiceAmount"
		TransactionAmount						is an InternationalAmount	
			classic name is ORIG-AMT
			restricted														
		CurrencyRateToCustomerGroupCurrency
			sql name is CRateToCustomerGroupCurrency
			classic name is GROUP-RATE
		CustomerGroupCurrencyMultiplicationOrDivision
			sql name is CGCMultiplicationOrDivision
			classic name is GROUP-MUDV
		AppliedAmount							is an InternationalAmount
			classic name is ORIG-APP-AMT
		AdjustAmount							is an InternationalAmount
			classic name is ORIG-ADJ-AMT
		RevalueCurrencyTransactions				is Boolean
			classic name is REVALUE-FL
		CurrencyDecimalsNumber					is an OrigNd
			classic name is ORIG-ND
		TermsCode		
			classic name is TERMS-CD
		BankTransactionCode
			classic name is BANK-INST-CODE
		OpenOrderAmount							is an InternationalAmount
			classic name is OPEN-ORDS
		DiscDate								is Date
		DiscPct
		DueDate
		DiscAmt									is an InternationalAmount
		CustomerBillTo
			classic name is BILL-TO
		JournalBook
			classic name is JRNL-BOOK-NBR
			restricted
		AutomaticCashApplication				is Boolean
			classic name is AUTO-APP-FL
		Project			  						is a FinanceCodeBlockProjectOnly
			classic name is ACTIVITY
		AlternateReceivableInvoiceType			is AlphaUpper size 1
			classic name is ALT-TYPE
			States
				Invoice				value is "I"
				CreditMemo			value is "C"
				DebitMemo			value is "D"
		SummarizeDetail							is Boolean
			classic name is SUM-LINE
		System									is a GeneralLedgerSystemCode
		InvoiceObjID
			classic name is INV-OBJ-ID
		UserField01
			classic name is USR-FLD-01
			restricted
		UserField02
			classic name is USR-FLD-02
			restricted
		UserField03
			classic name is USR-FLD-03
			restricted
		UserField04
			classic name is USR-FLD-04
			restricted
		UserField05
			classic name is USR-FLD-05
			restricted
		ProjectContractCustomer					is an AcCustomerId
			classic name is AC-CUSTOMER-ID
		Sort1
		Sort2
		Sort3
		Sort4
		ShipTerm
			classic name is FOB-CODE
		NatureOfTransactionCode					is a IntrastatNatureOfTransactionCode
			classic name is NOTC
		StatisticalProcedure					is a IntrastatStatisticalProcedure
			classic name is STAT-PROC
		OriginIntrastatCountry					is a Country
			classic name is ORIGIN-COUNTRY
		DestinationIntrastatCountry				is a Country
			classic name is DEST-COUNTRY
		OriginIntrastatRegion					is a Region 
			classic name is ORIGIN-REGION
			context of OriginIntrastatCountry				 
		DestinationIntrastatRegion				is a Region 
			classic name is DEST-REGION
			context of DestinationIntrastatCountry


		IntrastatPortCode								
			context of DestinationIntrastatCountry					
		DropShipIndicator						is a DropShipInd
			classic name is DROP-SHIP-IND
		TransportMode
		ProjectContract							is a FinanceCodeBlockProjectOnly

		ReasonCode								is a CreditDebitMemoReason
		ForeignEconomicRegulatoryCode
			classic name is FOR-ECON-CODE
		GlobalDocumentType
			classic name is GLBL-DOC-TYPE
		ErrorFile								is Alpha 50
		ErrorMessage							is Alpha 200
		ReceivableInvoice
			delete ignored
		InterfaceRun							is a ReceivablesInterfaceResult
			delete ignored
		OffsetComplete							is Boolean
		PointOfTitleTransfer
		ReceivableInvoiceShipToGroup
		InvoiceFinanceCodeBlock					is a FinanceCodeBlock
		InvoiceTypeCode
		CustomerInvoiceTypeCode
		RegimeCode
		SenderLogicalID
		SenderComponentID
		SenderCreationDateTime
		SenderBODID
		SenderOriginalBOD
		ParallelReference						is Alpha size 100
		EWayBillNumber
		CertificationNumber							
		CertificationDate				is Date		
		GenerateIDMDocument				is Boolean
		IDMPrinter				




	Transient Fields
		ConversionInvoiceType					is AlphaUpper size 1
			derive value from InvoiceType
			States
				CreditMemo	value is "C"
				DebitMemo	value is "D"
				Invoice		value is "I"
		TransientFromEntity					is an AccountingEntity	
			derive value from GeneralLedgerCompanyRel.AccountingEntity
		CurrencyTable
			derive value from Company.FinanceEnterpriseGroup.CurrencyTable
			derive value from CompanySystemClosingControlRel.CurrencyTable
	    OpenOrHistoryStatus			is AlphaUpper size 2	
			States
				Open	  value is "1"
				History   value is "9"
			derive value from Status	
		
	Local Fields
		InterfacedInvoice					is a ReceivableInvoice view

		LocalReceivablesInterfaceResult		is like ReceivablesInterfaceResult

		LocalNationalCompany				is like Company
		LocalNationalCustomer				is like Customer

		LocalCustomer						is like Customer
		LocalOrigin							is like DstType

		LocalRunGroupHasDetails				is Boolean
		LocalRunGroupHasDistributions		is Boolean
		LocalRunGroupHasComments			is Boolean

		LocalMoveErrorsToNewRunGroup		is Boolean

		LocalErrorOccurred					is Boolean
		LocalErrorMessage					is Alpha 150
		LocalErrorFile						is Alpha 20
		LocalErrorRunGroup					is a RunGroup

		DetailCount							is Numeric size 9
		DistributionCount					is Numeric size 9

		ArCodeAmount						is an InternationalAmount
		WorkAmount							is an InternationalAmount
		AlternateWorkAmount					is like InternationalAmount
		AlternateWorkAmount2				is like InternationalAmount
		AlternateWorkAmount3				is like InternationalAmount
		ReportWorkAmount1					is like InternationalAmount
		ReportWorkAmount2					is like InternationalAmount
		ReportWorkAmount3					is like InternationalAmount
		ReportWorkAmount4					is like InternationalAmount
		ReportWorkAmount5					is like InternationalAmount
		CurrencyWork						is a ReceivableExchange

		CalculateTerms
		LocalTrigger						is Alpha size 1
		LoopCounter							is Numeric size 3
		Sub4								is Numeric size 3

		NextSentence						is Boolean

		CurrentReceivableProcessLevel		is like ReceivableProcessLevel
		CurrentCompany						is like ReceivableCompany
		CurrentCustomer						is like Customer
		LocalReceivableTransactionSummary	is like ReceivableTransactionSummary
		LocalTaxOriginCrossReference		is like ReceivableGLDistribution
		LocalTaxOriginCrossReferenceUID		is like UniqueID

		LocalProject						is a Project
		LocalDateRange						is a DateRange
		LocalPeriodOfPerformanceProject		is like Project
		LocalPeriodOfPerformanceSystem		is like GeneralLedgerSystemCode

		CalculateReceivableYearPeriod

		I1									is Numeric 3
		Done								is Boolean
		CurrentYear							is like Year
		CurrentPeriod						is like Period
		CurrentType							is Alpha 1

		SuccessfulRelease					is Boolean

		LocalDistributionTotal				is an InternationalAmount
		LocalProjectTotal					is an InternationalAmount
		LineProjectTotal					is an InternationalAmount

		CalculateTax
		LocalCalculateTaxExecuted			is Alpha 1

		LocalReceivableGeneralLedgerCode	is like ReceivableGeneralLedgerCode
		LocalFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		LocalMainUserTemplate				is Alpha size 250
		LocalDetailTransactionAmount		is an InternationalAmount
		LocalTotalDetailTransactionAmount	is like InternationalAmount
		NewBODTracker						is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker			is Numeric 15
		Error								is Boolean
		LocalBODTrigger						is Boolean
		LocalConfigurationParameter			is Alpha size up to 200
		LocalSequence						is a Sequence	
		ValidateReceivablePrefix							
		LocalDiscountAdjustmentReason		is an ApplicationAdjustmentReason		

	Context Fields
		FSMInboundBODTracker

	Field Groups
		SecondaryKeyFields
			RunGroup
			Company
			InvoiceType
			Invoice

	Derived Fields

		TranAmtCannotBeNegMsg is a MessageField	
			restricted
			"TransactionAmountCannotBeNegative"

		CurrencyAmountCannotBeNegativeMsg is a MessageField	
			restricted
			"CurrencyAmountCannotBeNegative"

		CustomerMismatchMsg is a MessageField
			restricted
			"CustomerDoesNotMatchInterfacedCustomer"

		GLStatusMustBePostedMsg is a MessageField
			restricted
			"GlobalLedgerStatusMustBePostedIfInvoiceStatusIsHistorical"

		LastStatementDateCannotBeEnteredMsg is a MessageField
			restricted
			"LastStatementDateCannotBeEntered"

		LastStatementDateMustBeGreaterThanTranDateMsg is a MessageField 
			restricted
			"LastStatementDateMustBeGreaterThanTransactionDate"

		LastFinanceChargeDateCannotBeEntered is a MessageField
			restricted
			"LastFinanceChargeDateCannotBeEntered"

		ApplicationAlreadyExistsMsg is a MessageField
			restricted
			"ApplicationAlreadyExistsForInvoiceAndBatch"

		TransAndAppldAmtEqualMsg is a MessageField	
			restricted
			"TransactionAndAppliedAmountMustBeEqualIfStatusNotOpen"

		CurrencyAndAppldAmtEqualMsg is a MessageField	
			restricted
			"CurrencyAmountAndAppliedAmountMustBeEqualIfStatusNotOpen"

		DistributionsOutOfBalanceMsg is a MessageField	
			restricted
			"TransactionAmountAndDistributionsShouldNetToZero"

		CurrencyAmountAndDistributionsOutOfBalanceMsg is a MessageField	
			restricted
			"CurrencyAmountAndDistributionsShouldNetToZero"

		BatchNumberRequiredMsg is a MessageField
			restricted
			"BatchNumberRequired"

		NoAppliedAmountForOpenMsg is a MessageField
			restricted
			"CannotEnterAppliedAmountForNonHistoricalStatusTransaction"  

		NoAdjustAmountForOpenMsg is a MessageField
			restricted
			"CannotEnterAdjustAmountForNonHistoricalStatusTransaction"  

		LineItemsRequiredForSummarizeMsg is a MessageField
			restricted
			"LineItemsRequiredForSummarize"

		LineItemsRequiredForMixedTransactionsMsg is a MessageField
			restricted
			"LineItemsRequiredForMixedTransactions"

		DistribsRequiredIfGLStatusNotPostedMsg is a MessageField
			restricted
			"DistributionsRequiredIfGlobalLedgerStatusIsNotPosted"

		CurrencyOverrideMsg is a MessageField
			restricted
			"CustomerDoesNotAllowOverride;CompanyIsNotMultiCurrency"

		StatusRequiredMsg is a MessageField
			restricted
			"StatusRequired"

		OpenStatusRequiredForZeroAmountInvMsg is a MessageField
			restricted
			"OpenStatusRequiredForZeroAmountInvoiceAsNoInvoiceDetailsWillBeCreated"

		InvalidInvoiceTypeMsg is a MessageField
			restricted
			"InvalidInvoiceType"

		InvalidInvoiceMsg is a MessageField
			restricted
			"FieldReceivableInvoiceIncorrectlyContainsAValue.ThisFieldIsForInternalUseOnly"

		GeneralLedgerStatusRequiredMsg is a MessageField
			restricted
			"GlobalLedgerStatusRequired"

		InterfaceTransactionMsg is a MessageField
			restricted
			"InterfaceTransaction"

		InterfaceZeroAmountTransactionMsg is a MessageField
			restricted
			"InterfaceZeroAmountTransaction"

		PaymentSeqRequiredMsg is a MessageField
			restricted
			"PaymentSequenceIsRequired"

		DueDateRequiredMsg is a MessageField
			restricted
			"DueDateIsRequired"

		DetailCountMustEqualDistributionCountMsg is a MessageField
			restricted
			"DetailCountMustEqualDistributionCount"

		DistributionProjectDoesNotMatchMsg is a MessageField
			restricted
			"DistributionProjectDoesNotMatchInvoiceProject"

		OnlyOneTaxCodePerTaxOriginCrossReferenceMsg is a MessageField
			restricted
			"TheTaxCodeIsOnlyAllowedOnTheTaxableDistributionForAUniqueTaxOriginCrossReferenceValue"
		
		TaxableDistributionsMustHaveTaxDistributionsMsg is a MessageField
			restricted
			"EachTaxableDistributionMustHaveAtLeastOneCorrespondingTaxDistributionWithTheSameTaxOriginCrossReferenceValue"

		TaxableDistributionsMustHaveTaxOriginCrossReferenceMsg is a MessageField
			restricted
			"EachTaxableDistributionMustHaveATaxOriginCrossReferenceValue"

		TaxDistributionsMustHaveTaxableDistributionsMsg is a MessageField
			restricted
			"EachTaxDistributionMustHaveACorrespondingTaxableDistributionWithTheSameTaxOriginCrossReferenceValue"

		DistAmDoesNotMatchSumProjectDetailAmountMsg is a MessageField
			restricted
			"DistributionAmountDoesNotMatchSumOfProjectDetailsAmounts"

		NoDistribsForDetailWithProjectMsg is a MessageField
			restricted
			"NoDistributionsFoundForInvoiceDetailWithProjectAssigned"

		TotalLineItemsDoesNotMatchTranAmtMsg is a MessageField		
			restricted
			"TotalOfLineItemsDoesNotMatchTransactionAmount"

		TotalLineItemsDoesNotMatchCurrencyAmtMsg is a MessageField	
			restricted
			"TotalOfLineItemsDoesNotMatchCurrencyAmount"
			
		TotalOfLineItemsMustBeLessThanZeroMsg is a MessageField
			restricted
			"TotalDebitAmountMustBeLessThanTotalCreditAmount"
			
		TotalOfLineItemsMustBeGreaterThanZeroMsg is a MessageField
			restricted
			"TotalDebitAmountMustBeGreaterThanTotalCreditAmount"

		ProjectMustBePostingTypeMsg is a MessageField
			restricted
			"<Company.FinanceEnterpriseGroup.ProjectLabel>MustBePostingType"

		TransactionDateOutsideProjectDateRangeMsg is a MessageField
			restricted
			"TransactionDateOutside<Company.FinanceEnterpriseGroup.ProjectLabel>DateRange"

		PostingDateOutsideProjectDateRangeMsg is a MessageField
			restricted
			"PostingDateOutside<Company.FinanceEnterpriseGroup.ProjectLabel>DateRange"

		NonZeroDistribReqMsg is a MessageField
			restricted
			"AtLeastOneNonZeroDistributionRequired"

		DetailsNotAllowedForZeroAmountInvMsg is a MessageField
			restricted
			"DetailsNotAllowedForZeroAmountInvoice"

		DetailTypeMustMatchIfNotMixedMsg is a MessageField
			restricted
			"DetailTypeMustMatchInvoiceTypeIfNotMixedSign"

		TypesMustMatchIfNotMixedMsg is a MessageField
			restricted
			"InvoiceTypeMustMatchAlternateTypeIfNotMixedSign"

		TranAmtRequiredForMixedSignInvMsg is a MessageField		
			restricted
			"TransactionAmountRequiredForMixedSignInvoice"

		CurrencyAmountRequiredForMixedSignInvMsg is a MessageField	
			restricted
			"CurrencyAmountRequiredForMixedSignInvoice"
			
		MixedSignLinesRequiredForMixedSignInvoiceInvMsg is a MessageField
			restricted
			"LineItemTransactionTypeMustBeInvoiceAndCreditForMixedSignInvoice"
		
		MixedSignLinesRequiredForMixedSignDebCredInvMsg is a MessageField
			restricted
			"LineItemTransactionTypeMustBeDebitAndCreditForMixedSignInvoice"
		
		TranAmtCannotBeNegMsgForDetail is a MessageField	
			restricted
			"TransactionAmountCannotBeNegative"

		OneCharacterPrefix				is a ComputeField
			type is Alpha size 1
			restricted
			(ReceivableInvoiceImport.Invoice[0:1])

		PrefixForValidationProcess is a ComputeField
			type is Alpha size 2
			restricted
			(ReceivableInvoiceImport.Invoice[1:2])

		ThreeCharacterPrefixForValidation is a ComputeField
			type is Alpha size 3
			restricted
			(ReceivableInvoiceImport.Invoice[1:3])

		FourCharacterPrefixForValidation is a ComputeField					
			type is Alpha size 4
			restricted
			(ReceivableInvoiceImport.Invoice[1:4])

		FiveCharacterPrefixForValidation is a ComputeField					
			type is Alpha size 5
			restricted
			(ReceivableInvoiceImport.Invoice[1:5])

		DerivedProjectCreditMemoPrefixValidation is a DerivedField			
			type is Alpha size 5
			restricted
			if (Company.ProjectCreditMemoPrefix size = 3)
				return ThreeCharacterPrefixForValidation
			if (Company.ProjectCreditMemoPrefix size = 4)
				return FourCharacterPrefixForValidation
			if (Company.ProjectCreditMemoPrefix size = 5)
				return FiveCharacterPrefixForValidation

		DerivedProjectInvoicePrefixValidation is a DerivedField				
			type is Alpha size 5
			restricted
			if (Company.ProjectInvoicePrefix size = 3)
				return ThreeCharacterPrefixForValidation
			if (Company.ProjectInvoicePrefix size = 4)
				return FourCharacterPrefixForValidation
			if (Company.ProjectInvoicePrefix size = 5)
				return FiveCharacterPrefixForValidation

		DerivedTaxDifference is a DerivedField
			type is like InternationalAmount
			restricted
			if (CalculateTax.OutputlTaxToleranceDiff < 0)
				return -1 * CalculateTax.OutputlTaxToleranceDiff
			else
				return CalculateTax.OutputlTaxToleranceDiff

		DerivedCustomer is a DerivedField
			type is like Customer
			if  (Customer not entered
			and  CustomerMappingTableInterfaceRel exists)
				return CustomerMappingTableInterfaceRel.Customer
			else
				return Customer

		DerivedTermsCode is a DerivedField
			type is like TermsCode
			LocalCustomer = DerivedCustomer
			return CurrentCompanyCustomerRel.TermsCode

		LineCountForRII is a DerivedField
			type is Numeric 10 
			return instance count of ReceivableInvoiceDetailImportRel

		DistributionCountForRII is a DerivedField
			type is Numeric 10
			return instance count of ReceivableInvoiceDistributionImportRel

		CommentCountForRII is a DerivedField
			type is Numeric 10
			return instance count of ReceivableInvoiceCommentImportRel		

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "appProdline"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			DerivedBODCurrentTimeStamp = system current timestamp
			return DerivedBODCurrentTimeStamp
			
		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedConfirmBODID is a DerivedField
			type is Alpha size 200
			restricted
			return "infor-nid:"+ DerivedTenantID +":"+ Company +":"+ Customer +":"+ Invoice +":"+"?BOD&verb=Confirm&TrackerID=" + LocalFSMInboundBODTracker

		DerivedErrorMessage is a DerivedField
			type is Alpha size 200
			restricted
			return "Failed message, " + "Message: "+ ErrorMessage + ", " +"Productline: " + DerivedappProdline
		
		DerivedAckResponse is a DerivedField
			type is Alpha size 200
			restricted
			if (ErrorMessage = "")
				return "Accepted"
			else
				return "Rejected"
			
		DerivedBODID is a DerivedField
			type is Alpha size 200
			restricted
			return "infor-nid:"+ DerivedTenantID +":"+ Company +":"+ Customer +":"+ Invoice +":"+"?BOD&verb=Ack&TrackerID=" + LocalFSMInboundBODTracker
		
		AcknowledgeInvoiceXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			AcknowledgeInvoiceXMLBOD = template.IONAcknowledgeInvoice_ReceivableInvoiceImport_AckBOD_ST document for this instance
				
		ConfirmBODXML is a DerivedField
			type is XMLDocument
			restricted
			ConfirmBODXML = template.IONAcknowledgeInvoice_ReceivableInvoiceImport_ConfirmBOD_ST document for this instance




	Conditions
		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		ErrorExists
			when (ErrorMessage entered)

		InterfaceInvoice
			when (PaymentSeq not entered)

		ConversionInvoice
			when (PaymentSeq entered)

		HasProjectDistributions
			when (ProjectDistributionRel exists)

		TaxEntityUsesVertex										
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		VertexCallByTransaction
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByTransaction)

		TaxEntityUsesOneSource
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)

		StaticTaxEntityUsesOneSource
			restricted
			when (StaticTaxEntityRel.ThirdParty.Sabrix)

		StaticTaxEntityUsesVertex
			restricted
			when (StaticTaxEntityRel.ThirdParty.VertexOSeries)

		StaticVertexCallByTransaction
			restricted
			when (StaticTaxEntityUsesVertex
			and   StaticTaxEntityRel.VertexCallMethod.ByTransaction)

		ParallelReferenceEnabled
			restricted
			when (Company.ParallelReferenceFormat entered)
		
		IsAltDetailInvoiceImportNotExist
			restricted
			when (AlternateReceivableInvoiceDetailInvoiceImportRel not exists)
			
		IsAltDetailCreditImportNotExist
			restricted
			when (AlternateReceivableInvoiceDetailCreditImportRel not exists)
			
		IsAltDetailDebitImportNotExist
			restricted
			when (AlternateReceivableInvoiceDetailDebitImportRel not exists)


	Relations
		BillingCompanyRel
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key
				related.Company					= Company
		
		BillingGlobalInvoiceNumberRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company								= Company
			Instance Selection
				where (related.GlobalInvoiceNumber			= Invoice)
				 
		LocalInterfaceRunRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult	 = LocalReceivablesInterfaceResult

		ActorInterfaceRunRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = LocalFinanceEnterpriseGroup
				related.ReceivablesInterfaceResult	 = LocalReceivablesInterfaceResult

		ReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = InvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
				
				
		ReceivableGLDistributionRoundingRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByReceivableInvoice
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = InvoiceType
				related.Invoice											 = ReceivableInvoice

		ReceivableInvoiceCertificationNumberRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = InvoiceType


			Instance Selection	
				where (related.ReceivableInvoice	 != Invoice	
				and CertificationNumber				 entered	
				and related.CertificationNumber		 = CertificationNumber)	


		ReceivableInvoiceDetailImportRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType

		AlternateReceivableInvoiceDetailImportRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				
		AlternateReceivableInvoiceDetailDebitImportRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
			Instance Selection
				where (related.InvoiceType = "D")
				
		AlternateReceivableInvoiceDetailInvoiceImportRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
			Instance Selection
				where (related.InvoiceType = "I")
				
		AlternateReceivableInvoiceDetailCreditImportRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
			Instance Selection
				where (related.InvoiceType = "C")

		NonmatchingDetailImportRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
			Instance Selection
				where (related.InvoiceType != AlternateReceivableInvoiceType)

		ProjectDetailsRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
			Instance Selection
				where (related.Project			 = LocalProject)

		ThisReceivableInvoiceDetailImportRel	
			one-to-one relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup					= RunGroup
				related.Company						= Company
				related.Invoice						= Invoice
				related.InvoiceType					= InvoiceType
				related.Sequence					= LocalSequence

		ReceivableInvoiceDistributionImportRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType

		LocalTaxOriginCrossReferenceGroupExceptSelfRel
			one-to-many relation using ReceivableInvoiceDistributionImportRel
			Instance Selection
				where (related.TaxOriginCrossReference 	 			= LocalTaxOriginCrossReference
				and    related.ReceivableInvoiceDistributionImport != LocalTaxOriginCrossReferenceUID)

		ProjectDistributionRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType
			Instance Selection
				where (related.DistributionAccount.Project entered)

		LocalProjectDistributionRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType
			Instance Selection
				where (related.DistributionAccount.Project = LocalProject)

		NonZeroDistributionInvoiceRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType
			Instance Selection
				where (related.TransactionAmount entered)


		ReceivableInvoiceCommentImportRel
			one-to-many relation to ReceivableInvoiceCommentImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company
				related.Customer				 = Customer
				related.InterfacedCustomer		 = InterfacedCustomer
				related.Invoice					 = Invoice
				related.InvoiceType				 = InvoiceType

		DetailImportRunGroupRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company

		DistributionImportRunGroupRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company

		CommentImportRunGroupRel
			one-to-many relation to ReceivableInvoiceCommentImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = RunGroup
				related.Company					 = Company

		OldReceivableInvoiceDetailImportRel
			one-to-many relation to ReceivableInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = old RunGroup
				related.Company					 = old Company
				related.Invoice					 = old Invoice

		OldReceivableInvoiceDistributionImportRel
			one-to-many relation to ReceivableInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = old RunGroup
				related.Company					 = old Company
				related.Invoice					 = old Invoice

		OldReceivableInvoiceCommentImportRel
			one-to-many relation to ReceivableInvoiceCommentImport
			Field Mapping uses ByRunGroup
				related.RunGroup				 = old RunGroup
				related.Company					 = old Company
				related.Customer				 = old Customer
				related.InterfacedCustomer		 = old InterfacedCustomer
				related.Invoice					 = old Invoice

		SameCustomerInvoiceRel
			one-to-many relation to ReceivableInvoiceImport
			Field Mapping uses Set1
				related.Company						 = Company
				related.Customer					 = Customer
				related.InvoiceType					 = InvoiceType
				related.Invoice						 = Invoice
			Instance Selection
				where (related.PaymentSeq			entered
				and	related.ReceivableInvoiceImport	 != ReceivableInvoiceImport)

		ReceivableInvoiceImportCertificationNumberRel
			one-to-many relation to ReceivableInvoiceImport
			Field Mapping uses Set1
				related.Company						 = Company


			Instance Selection	
				where (related.Invoice				 != Invoice	
				and CertificationNumber				 entered	
				and related.CertificationNumber		 = CertificationNumber)	


		ReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = InvoiceType
				and	related.ReceivableApplication.Invoice		 = Invoice
				and	related.ReceivableApplication.PaymentSeq	 = 1
				and	related.ReceivableApplication.BatchNumber	 = BatchNumber)

		CurrentCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 = CurrentCompany
				related.Customer	 = CurrentCustomer

		CurrentCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company		= CurrentCompany

		CompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		CurrentCustomerRel
			one-to-one relation to Customer
			Field Mapping uses symbolic key
				related.CustomerGroup	= CurrentCompanyRel.CustomerGroupField.CustomerGroup
				related.Customer		= CurrentCustomer

		CustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= Company.CustomerGroupField.CustomerGroup
				related.InterfacedCustomer			= InterfacedCustomer

		CurrentCompanyCustomerPeriodTotalsRel
			one-to-one relation to CompanyCustomerPeriodTotals
			Field Mapping uses symbolic key
				related.Company									 = CurrentCompany
				related.CompanyCustomerPeriodTotals.Customer	 = CurrentCustomer
				related.CompanyCustomerPeriodTotals.Year		 = CurrentYear

		ARWorkDistSumRel
			one-to-one relation to ARWorkDistSum
			Field Mapping uses ByResult

				related.ReceivablesInterfaceResult			= LocalReceivablesInterfaceResult 
				related.Company								= Company
				related.ReceivableGeneralLedgerCode			= ReceivableInvoice.ReceivableGeneralLedgerCode
				related.ARWorkDistSum.GLDate				= GeneralLedgerDate
				related.ARWorkDistSum.Origin				= LocalOrigin
				related.ARWorkDistSum.Currency				= OriginalCurrency
				related.ARWorkDistSum.Rate 					= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		ReceivableTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableProcessLevel			= ReceivableProcessLevel
				related.ReceivableTransactionSummary	= LocalReceivableTransactionSummary

		CustomerInvoiceTypeCodesRel
			one-to-many relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.Customer			 = LocalCustomer
			Instance Selection
				where (related.Default)

		CustomerInvoiceTypeCodeRel
			one-to-one relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.Customer			 = LocalCustomer
				related.InvoiceTypeCode		 = InvoiceTypeCode

		CompanyCustomerInvoiceTypeCodesRel
			one-to-many relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.Customer						= LocalCustomer

		AnyCustomerInvoiceTypeCodeRel
			one-to-one relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.Customer						= LocalCustomer
				related.InvoiceTypeCode					= InvoiceTypeCode

		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		GLCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= CurrentCompany

		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CurrentCompanyRel.Company.FinanceEnterpriseGroup
				related.TaxEntity				= GLCompanyRel.AccountingEntity

		StaticTaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				 = GeneralLedgerCompanyRel.AccountingEntity

		ProjectPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.Project				 = LocalPeriodOfPerformanceProject
				related.GeneralLedgerSystemCode = LocalPeriodOfPerformanceSystem

		LocalGeneralLedgerCodeRel
			classic name is ARCODE
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableGeneralLedgerCode = LocalReceivableGeneralLedgerCode

		NationalAccountBalanceParentRel
			one-to-many relation to NationalAccountBalance
			Field Mapping uses symbolic key
				related.Company						= LocalNationalCompany
				related.Customer						= LocalNationalCustomer

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AR"
				related.Company						= Company

		ErrorsInRunGroupRel	
			one-to-many relation to ReceivableInvoiceImport
			Field Mapping uses symbolic key
			Instance Selection
				where (related.RunGroup								= RunGroup
				and	related.ErrorMessage								!=""
				and	related.SenderOriginalBOD						= "CSV")



		FSMBODConfigurationParameterRel
			one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
				related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb		= 5
				related.FSMBODConfiguration.Noun		= "Invoice"
				related.FSMBODConfiguration.Direction	= 1
				
		FSMBODConfigurationDetailRel
			one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 5		
				related.FSMBODConfiguration.Noun 		= "Invoice"
				related.FSMBODConfiguration.Direction 	= 1
			Instance Selection
				where (related.TriggerFrom				= "ReceivableInvoiceImport")
		
		UserTemplateRel
			one-to-many relation to UserTemplate
			Field Mapping uses symbolic key
			Instance Selection
				where (related.UserTemplate   = LocalMainUserTemplate)
		
		FSMInboundBODTrackerRel
			one-to-one relation to FSMInboundBODTracker
			Field Mapping uses symbolic key
				related.FSMInboundBODTracker	= LocalFSMInboundBODTracker



		UserDefaultPrinterRel
			one-to-one relation to UserDefaultPrinter
			Field Mapping uses symbolic key
				related.UserDefaultPrinter.Actor	= actor

		ReceivableReasonRel										
			one-to-one relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company 				 =	CurrentCompany
				related.ReceivableReasonType	 =	"AD"
				related.ReceivableReason		 =	LocalDiscountAdjustmentReason

	Sets

		Set1
			indexed
			Sort Order
				Company
				Customer
				InvoiceType
				Invoice
				PaymentSeq

		ByCompanyInvoiceCustomer
			indexed
			Sort Order
				Company
				InvoiceType
				Invoice
				PaymentSeq
				Customer

		ByAlternateInvoiceType
			indexed
			Sort Order
				Company
				AlternateReceivableInvoiceType
				ReceivableInvoiceImport

		ByInvoice
			indexed
			Sort Order
				Company
				Invoice
				InvoiceType
				PaymentSeq

		ByRunGroup
			indexed
			Sort Order
				RunGroup
				Company
				Invoice
				InvoiceType
				PaymentSeq

		ByInterfaceRun
			Sort Order
				InterfaceRun
				RunGroup
				Company
				Invoice
				InvoiceType
				PaymentSeq

	Field Rules
		RunGroup
			required
		Company
			required
		InvoiceType
			required
		Invoice
			required
		BatchNumber
			required
		Status
			required
		    if (OpenOrHistoryStatus entered)    
		        Status = OpenOrHistoryStatus
		ReceivableProcessLevel
			required
			default to Company.DefaultReceivableProcessLevel
		ParallelReference
			if (not ParallelReferenceEnabled)
				initialize
		TransactionDate
			required
			InvoiceAmount.ExchangeDate = TransactionDate
		GenerateIDMDocument
			if (not Company.UseIDM
			or  not OpenOrHistoryStatus.Open)
				initialize
		
		IDMPrinter
			initial value is UserDefaultPrinterRel.IDMPrinter
			if (not Company.UseIDM)
				initialize












	Create Rules
		CurrentCompany		= Company
		CurrentCustomer		= DerivedCustomer
		if  (OriginalCurrency not entered)
			if (Company.MultiCurrencyProcessing)
				if  (CurrentCompanyCustomerRel.Currency entered)
					OriginalCurrency = CurrentCompanyCustomerRel.Currency
				else
					OriginalCurrency = Company.Currency

			if (!Company.MultiCurrencyProcessing)
				if (CurrentCompanyCustomerRel exists)
					if  (CurrentCompanyCustomerRel.Currency = Company.Currency
					or   Company.TransactionCurrencyOverride)
						OriginalCurrency = Company.Currency
					else
						LocalErrorOccurred		= true
						LocalErrorMessage	= CurrencyOverrideMsg
				else
					OriginalCurrency = Company.Currency

	Rule Blocks
		ValidateReceivableInvoice
			if (BillingCompanyRel.ManualInvoiceNumbering)
				constraint (BillingGlobalInvoiceNumberRel not exists)
					"TransactionAlreadyExistsInBilling"
		
		ValidatePrefix												
			initialize ValidateReceivablePrefix
			ValidateReceivablePrefix.EditReceivableCompany			= Company
			ValidateReceivablePrefix.EditReceivableInvoice			= Invoice
			ValidateReceivablePrefix.EditReceivableInvoiceType		= InvoiceType
			ValidateReceivablePrefix.EditAltReceivableInvoiceType	= AlternateReceivableInvoiceType
			ValidateReceivablePrefix.SkipForImportValidation		= true
			if (ValidateReceivablePrefix.ErrorNumber entered)
				LocalErrorMessage  = ValidateReceivablePrefix.ErrorMessage
				ErrorMessage 	   = ValidateReceivablePrefix.ErrorMessage
				LocalErrorOccurred = true
		
		InterfaceDefaults


			LocalErrorOccurred = false

			LocalCustomer = DerivedCustomer


			if  (AlternateReceivableInvoiceType not entered
			and  !InvoiceType.MixedSignLines)
				AlternateReceivableInvoiceType = InvoiceType
			
			if  (OriginalCurrency not entered)
				if (Company.MultiCurrencyProcessing)
					if  (CurrentCompanyCustomerRel.Currency entered)
						OriginalCurrency = CurrentCompanyCustomerRel.Currency
					else
						OriginalCurrency = Company.Currency

				if (!Company.MultiCurrencyProcessing)
					if (CurrentCompanyCustomerRel exists)
						if  (CurrentCompanyCustomerRel.Currency = Company.Currency
						or   Company.TransactionCurrencyOverride)
							OriginalCurrency = Company.Currency
						else
							LocalErrorOccurred		= true
							LocalErrorMessage	= CurrencyOverrideMsg
					else
						OriginalCurrency = Company.Currency

			if  (TermsCode not entered
			and  InvoiceTypeCode not entered)
				TermsCode = first CustomerInvoiceTypeCodesRel.TermsCode

			if  (TermsCode not entered)
				TermsCode = CustomerInvoiceTypeCode.TermsCode

			if  (TermsCode not entered)
				TermsCode = InvoiceTypeCode.TermsCode

			if  (TermsCode not entered)
				if  (!InvoiceType.Invoice
				and  !AlternateReceivableInvoiceType.Invoice)
					TermsCode = CurrentCompanyCustomerRel.DebitCreditMemoTermsCode
				else
					TermsCode = CurrentCompanyCustomerRel.TermsCode

			if (InvoiceTypeCode not entered)
				InvoiceTypeCode = first CustomerInvoiceTypeCodesRel.InvoiceTypeCode

			if (ReceivableProcessLevel not entered
			and Company.DefaultReceivableProcessLevel entered)
				ReceivableProcessLevel = Company.DefaultReceivableProcessLevel

		InterfaceEdits


			initialize DetailCount
			if (LocalRunGroupHasDetails)
				DetailCount	= instance count of AlternateReceivableInvoiceDetailImportRel

			if (ReceivableGeneralLedgerCode entered)
				LocalReceivableGeneralLedgerCode = ReceivableGeneralLedgerCode
			else
			if (CurrentCompanyCustomerRel.ReceivableGeneralLedgerCode entered)
				LocalReceivableGeneralLedgerCode = CurrentCompanyCustomerRel.ReceivableGeneralLedgerCode
			else
				LocalReceivableGeneralLedgerCode = ReceivableProcessLevel.ReceivableGeneralLedgerCode

			if (LastCodeBlock != LocalReceivableGeneralLedgerCode)

				LastCodeBlock = LocalReceivableGeneralLedgerCode
			
				invoke EditCodeBlock LocalGeneralLedgerCodeRel
					resume on error
						LocalErrorOccurred				= true
						LocalErrorMessage				= error message
						LocalErrorFile					= "Invoice"
					invoked.TransientTransactionDate	 		= TransactionDate
					invoked.TransientGeneralLedgerDate 			= GeneralLedgerDate
					invoked.BypassStructureRelationEdit 		= true 
					if  (GLStatus.Posted)
						invoked.BypassProjectDateEdit = true						

			if (LocalErrorMessage entered)
				LocalErrorMessage = "InvoiceGeneralLedgerCode:" + LocalErrorMessage

			if (!LocalErrorOccurred
			and GLStatus.NotPosted
			and InvoiceFinanceCodeBlock entered
			and Company.DetailedInvoiceAccrualDistributions)
				invoke ValidateInvoiceFinanceCodeBlock LocalGeneralLedgerCodeRel
					resume on error
						LocalErrorOccurred				= true
						LocalErrorMessage				= error message
						LocalErrorFile					= "Invoice"
					invoked.PrmInvoiceFinanceCodeBlock = InvoiceFinanceCodeBlock

			if (!LocalErrorOccurred				
			and  System not entered)					
				include ValidatePrefix

			if  (!LocalErrorOccurred)	
				if (!InvoiceType.MixedSignLines)
					for each AlternateReceivableInvoiceDetailImportRel
						if (each.TransactionAmount < 0)
							LocalErrorOccurred		= true
							LocalErrorMessage		= TranAmtCannotBeNegMsgForDetail
							LocalErrorFile			= "InvoiceDetail"
							end for each

			if  (!LocalErrorOccurred
			and  GLStatus.Posted)
				for each ReceivableInvoiceDistributionImportRel
					invoke EditCodeBlock each 
						resume on error
							LocalErrorOccurred				= true
							LocalErrorMessage				= error message
							LocalErrorFile					= "Distribution"
						invoked.BypassProjectDateEdit		= true
						
					if (LocalErrorOccurred)
						end for each
		
			if (!LocalErrorOccurred
			and (CurrentCompanyCustomerRel.DiscountAdjustmentReason entered 
			and !ReceivableReasonRel.Active))
				LocalErrorOccurred				= true
				LocalErrorMessage				= "Company Customer Discount Adjustment Reason Code Must Be Active"				

			if  (!LocalErrorOccurred
			and  GLStatus.NotPosted)
				initialize LocalDistributionTotal
				initialize DistributionCount
				initialize LocalProjectTotal
				
				if (HasProjectDistributions
				and InvoiceAmount.CurrencyAmount entered)
					for each distinct DistributionAccount.Project in ReceivableInvoiceDistributionImportRel 
						LocalProject		= each.DistributionAccount.Project
						if (sum LocalProjectDistributionRel.TransactionAmount != sum ProjectDetailsRel.DerivedTransactionAmount)
							LocalErrorOccurred	= true
							LocalErrorMessage	= DistAmDoesNotMatchSumProjectDetailAmountMsg
							LocalErrorFile		= "Distribution"
							end for each
					
				if (!LocalErrorOccurred)
					for each ReceivableInvoiceDistributionImportRel




















	
	
						DistributionCount		+= 1
						LocalDistributionTotal	+= each.TransactionAmount
						LocalProjectTotal		+= each.TransactionAmount
	
						if  (Project entered 
						and  each.DistributionAccount.Project entered
						and  each.DistributionAccount.Project != Project)
							LocalErrorOccurred		= true
							LocalErrorMessage		= DistributionProjectDoesNotMatchMsg
							LocalErrorFile			= "Distribution"
							end for each
	
						if  (!LocalErrorOccurred)
							invoke EditCodeBlock each 
								resume on error
									LocalErrorOccurred				= true
									LocalErrorMessage				= error message
									LocalErrorFile					= "Distribution"
	
							if (LocalErrorOccurred)
								end for each

						if (!LocalErrorOccurred
						and each.TaxCode entered
						and (VertexCallByTransaction
						or   TaxEntityUsesOneSource))
							if (each.TaxOriginCrossReference not entered)
								LocalErrorOccurred							= true
								LocalErrorMessage							= TaxableDistributionsMustHaveTaxOriginCrossReferenceMsg
								LocalErrorFile								= "Distribution"

						if (!LocalErrorOccurred
						and each.TaxOriginCrossReference entered
						and (VertexCallByTransaction
						or   TaxEntityUsesOneSource))
							LocalTaxOriginCrossReference 		= each.TaxOriginCrossReference
							LocalTaxOriginCrossReferenceUID		= each.ReceivableInvoiceDistributionImport
							if (each.TaxCode entered) 
								if (LocalTaxOriginCrossReferenceGroupExceptSelfRel not exists)
									LocalErrorOccurred							= true
									LocalErrorMessage							= TaxableDistributionsMustHaveTaxDistributionsMsg
									LocalErrorFile								= "Distribution"
								else
								if (any LocalTaxOriginCrossReferenceGroupExceptSelfRel.TaxCode entered)
									LocalErrorOccurred							= true
									LocalErrorMessage							= OnlyOneTaxCodePerTaxOriginCrossReferenceMsg
									LocalErrorFile								= "Distribution"
							else 
								if (LocalTaxOriginCrossReferenceGroupExceptSelfRel not exists)
									LocalErrorOccurred							= true
									LocalErrorMessage							= TaxDistributionsMustHaveTaxableDistributionsMsg
									LocalErrorFile								= "Distribution"
								else
								if (!(any LocalTaxOriginCrossReferenceGroupExceptSelfRel.TaxCode entered))
									LocalErrorOccurred							= true
									LocalErrorMessage							= TaxDistributionsMustHaveTaxableDistributionsMsg
									LocalErrorFile								= "Distribution"

						if  (!LocalErrorOccurred
						and  each.TransactionAmount entered
						and  each.TaxCode entered
						and	 !TaxEntityUsesOneSource
						and  !VertexCallByTransaction)
							initialize CalculateTax
							CalculateTax.TaxCode							= each.TaxCode
							CalculateTax.TaxEntity							= GLCompanyRel.AccountingEntity
							CalculateTax.TaxDate							= TransactionDate
							CalculateTax.InvoiceDate						= TransactionDate
							CalculateTax.PaymentDate						= TransactionDate
							CalculateTax.ShipmentDate						= TransactionDate
							CalculateTax.GeneralLedgerDate					= GeneralLedgerDate
							CalculateTax.TaxAmount							= each.TransactionAmount	
							CalculateTax.TaxableAmount						= each.TransactionTaxableAmount	
							CalculateTax.PostalAddress						= CurrentCustomerRel.PostalAddress	
							CalculateTax.ProcessLevel						= ReceivableProcessLevel	
							CalculateTax.Invoice							= Invoice	
							CalculateTax.Customer							= DerivedCustomer	
							CalculateTax.FromPostalAddress					= CurrentCompanyRel.PostalAddress	
							CalculateTax.Location							= DestinationIntrastatCountry
	
							CalculateTax.TaxCodeAccount						= each.DistributionAccount						
							CalculateTax.ProductTaxCategory					= blank
	
							CalculateTax.Quantity							= each.Units
							CalculateTax.Exempt								= CurrentCompanyCustomerRel.TaxExempt
							CalculateTax.Function							= "V"
							CalculateTax.System								= "AR"
	
							if (TaxEntityUsesVertex)
								CalculateTax.TransactionSource				= "O"	
								CalculateTax.CallingModule					= "Receivable_GL_Distribution"
								CalculateTax.InvoiceCompany					= Company
								CalculateTax.Vendor							= DerivedCustomer
								CalculateTax.LineNumber						= each.Sequence
								CalculateTax.FromTaxCode					= CurrentCompanyCustomerRel.TaxCode				 
								CalculateTax.PostalAddress					= CurrentCustomerRel.PostalAddress
								CalculateTax.FromPostalAddress				= CurrentCompanyRel.PostalAddress			
								CalculateTax.DeliveryTerms		  			= ShipTerm
								CalculateTax.VATRegistrationCountry	  		= TaxEntityRel.VATRegistrationCountry 			 
								CalculateTax.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber			 
								CalculateTax.FromVATRegistrationCountry   	= CurrentCompanyCustomerRel.VATRegistrationCountry	 
								CalculateTax.FromVATRegistrationNumber		= CurrentCompanyCustomerRel.VATRegistrationNumber	 
								CalculateTax.DefaultFilingCurrency 			= Company.Currency 
								CalculateTax.CurrencyRate					= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	
								CalculateTax.TransactionCurrency 			= OriginalCurrency							 
								CalculateTax.BaseCurrency 					= Company.Currency
	
							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax
							
							if (CalculateTax.OutputErrorNumber = 205)				
								LocalErrorOccurred							= true
								LocalErrorMessage							= "The difference " + DerivedTaxDifference + " between given tax amount " + each.TransactionAmount + " and calculated amount " + CalculateTax.LocalSaveTaxAmount + " is greater than the tolerance limit"
								LocalErrorFile								= "Distribution"
							else
							if (CalculateTax.OutputErrorNumber entered)
								LocalErrorOccurred							= true
								LocalErrorMessage							= CalculateTax.OutputErrorMessage
								LocalErrorFile								= "Distribution"















			if  (!LocalErrorOccurred)
				LocalDetailTransactionAmount = sum AlternateReceivableInvoiceDetailImportRel.DerivedTransactionAmount 
				LocalTotalDetailTransactionAmount = LocalDetailTransactionAmount
				if (LocalDetailTransactionAmount < 0)
					LocalDetailTransactionAmount = LocalDetailTransactionAmount * -1
				if  (DetailCount entered
				and  InvoiceAmount.CurrencyAmount != LocalDetailTransactionAmount)	
					LocalErrorOccurred	= true
					LocalErrorMessage	= TotalLineItemsDoesNotMatchCurrencyAmtMsg	
					LocalErrorFile		= "Invoice"


			if  (!LocalErrorOccurred
			and  GLStatus.NotPosted)
				for each AlternateReceivableInvoiceDetailImportRel
					if (each.Project.Project entered)
						LocalProject = each.Project.Project
						if  (!LocalProjectDistributionRel exists)
							LocalErrorOccurred	= true
							LocalErrorMessage	= NoDistribsForDetailWithProjectMsg
							LocalErrorFile		= "InvoiceDetail"
							end for each

						if (!LocalProject.ProjectType.Posting)
							LocalErrorOccurred	= true
							LocalErrorMessage	= ProjectMustBePostingTypeMsg
							LocalErrorFile		= "InvoiceDetail"
							end for each

						LocalPeriodOfPerformanceSystem	= "AR"
						LocalPeriodOfPerformanceProject	= each.Project

						initialize LocalDateRange

						if (LocalProject.HasPeriodOfPerformance)
							LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
							LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate

						if (!LocalDateRange entered)
							LocalDateRange.Begin			= LocalProject.ProjectDateRange.BeginDate
							LocalDateRange.End				= LocalProject.ProjectDateRange.EndDate

						if  (Company.FinanceEnterpriseGroup.ProjectDateEdit.TransactionDate
						and  TransactionDate not within LocalDateRange)
							LocalErrorOccurred	= true
							LocalErrorMessage	= TransactionDateOutsideProjectDateRangeMsg
							LocalErrorFile		= "InvoiceDetail"

						else
						if  (Company.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate
						and  GeneralLedgerDate not within LocalDateRange)
							LocalErrorOccurred	= true
							LocalErrorMessage	= PostingDateOutsideProjectDateRangeMsg
							LocalErrorFile		= "InvoiceDetail"
					
					if (!LocalErrorOccurred
					and each.InvoiceFinanceCodeBlock entered
					and Company.DetailedInvoiceAccrualDistributions)
						invoke ValidateInvoiceFinanceCodeBlock LocalGeneralLedgerCodeRel
							resume on error
								LocalErrorOccurred				= true
								LocalErrorMessage				= error message
								LocalErrorFile					= "InvoiceDetail"
							invoked.PrmInvoiceFinanceCodeBlock = each.InvoiceFinanceCodeBlock

			if  (!LocalErrorOccurred
			and  GLStatus.NotPosted)





				if  (AlternateReceivableInvoiceType.CreditMemo)
					if  (InvoiceAmount.CurrencyAmount != LocalDistributionTotal)
						LocalErrorOccurred		= true
						LocalErrorMessage	= CurrencyAmountAndDistributionsOutOfBalanceMsg	
				else
					if  (InvoiceAmount.CurrencyAmount != LocalDistributionTotal * -1)
						LocalErrorOccurred		= true
						LocalErrorMessage	= CurrencyAmountAndDistributionsOutOfBalanceMsg	


			if (!LocalErrorOccurred)
				if  (InvoiceAmount.CurrencyAmount < 0)
					LocalErrorOccurred		= true
					LocalErrorMessage		= CurrencyAmountCannotBeNegativeMsg	
				else
				if  (InvoiceAmount.CurrencyAmount not entered
				and  !Status.Open)
					LocalErrorOccurred		= true
					LocalErrorMessage		= OpenStatusRequiredForZeroAmountInvMsg
				else
				if  (InvoiceType.MixedSignLines
				and  InvoiceAmount.CurrencyAmount not entered)
					LocalErrorOccurred		= true
					LocalErrorMessage		= CurrencyAmountRequiredForMixedSignInvMsg	
				else
				if  (InvoiceAmount.CurrencyAmount not entered
				and  AlternateReceivableInvoiceDetailImportRel exists)
					LocalErrorOccurred		= true
					LocalErrorMessage		= DetailsNotAllowedForZeroAmountInvMsg
				else
				if  (Status not entered)
					LocalErrorOccurred		= true
					LocalErrorMessage	= StatusRequiredMsg
				else
				if  (GLStatus not entered)
					LocalErrorOccurred		= true
					LocalErrorMessage	= GeneralLedgerStatusRequiredMsg
				else
				if  (Status.Historical
				and  !GLStatus.Posted)
					LocalErrorOccurred		= true
					LocalErrorMessage	= GLStatusMustBePostedMsg
				else
				if  (Customer entered
				and  InterfacedCustomer entered
				and  Customer != CustomerMappingTableInterfaceRel.Customer)
					LocalErrorOccurred		= true
					LocalErrorMessage	= CustomerMismatchMsg
				else
				if  (LastStatementDate entered)
					LocalErrorOccurred		= true
					LocalErrorMessage	= LastStatementDateCannotBeEnteredMsg
				else
				if  (LastFinanceChargeDate entered)
					LocalErrorOccurred		= true
					LocalErrorMessage	= LastFinanceChargeDateCannotBeEntered
				else
				if  (BatchNumber not entered)
					LocalErrorOccurred		= true
					LocalErrorMessage	= BatchNumberRequiredMsg
				else
				if  (ReceivableApplicationRel exists)
					LocalErrorOccurred		= true
					LocalErrorMessage	= ApplicationAlreadyExistsMsg
				else
				if  (Status < 9  
				and  AppliedAmount entered)
					LocalErrorOccurred		= true
					LocalErrorMessage	= NoAppliedAmountForOpenMsg
				else
				if  (Status < 9 
				and  AdjustAmount entered)
					LocalErrorOccurred		= true
					LocalErrorMessage	= NoAdjustAmountForOpenMsg
				else
				if  (Status = 9 
				and  InvoiceAmount.CurrencyAmount != AppliedAmount + AdjustAmount)
					LocalErrorOccurred		= true
					LocalErrorMessage	= CurrencyAndAppldAmtEqualMsg	
				else
				if  (SummarizeDetail
				and  AlternateReceivableInvoiceDetailImportRel not exists)
					LocalErrorOccurred		= true
					LocalErrorMessage	= LineItemsRequiredForSummarizeMsg
				else
				if  (InvoiceType.MixedSignLines
				and  AlternateReceivableInvoiceDetailImportRel not exists)
					LocalErrorOccurred		= true
					LocalErrorMessage	= LineItemsRequiredForMixedTransactionsMsg
				else
				if  (InvoiceType.MixedSignLines
				and AlternateReceivableInvoiceType.Invoice
				and (AlternateReceivableInvoiceDetailDebitImportRel exists
				or   IsAltDetailInvoiceImportNotExist
				or   IsAltDetailCreditImportNotExist))
					LocalErrorOccurred		= true
					LocalErrorMessage		= MixedSignLinesRequiredForMixedSignInvoiceInvMsg
					LocalErrorFile		= "InvoiceDetail"
					
				else
				if  (InvoiceType.MixedSignLines
				and (AlternateReceivableInvoiceType.DebitMemo
				or  AlternateReceivableInvoiceType.CreditMemo)
				and (AlternateReceivableInvoiceDetailInvoiceImportRel exists
				or   IsAltDetailDebitImportNotExist
				or   IsAltDetailCreditImportNotExist))
					LocalErrorOccurred		= true
					LocalErrorMessage		= MixedSignLinesRequiredForMixedSignDebCredInvMsg
					LocalErrorFile		= "InvoiceDetail"
				else
				if  (GLStatus.NotPosted
				and  ReceivableInvoiceDistributionImportRel not exists)
					LocalErrorOccurred		= true
					LocalErrorMessage	= DistribsRequiredIfGLStatusNotPostedMsg
				else
				if  (!InvoiceType.MixedSignLines
				and  AlternateReceivableInvoiceType != InvoiceType)
					LocalErrorOccurred		= true
					LocalErrorMessage		= TypesMustMatchIfNotMixedMsg
				else
				if  (!InvoiceType.MixedSignLines
				and  NonmatchingDetailImportRel exists)
					LocalErrorOccurred		= true
					LocalErrorMessage		= DetailTypeMustMatchIfNotMixedMsg
				else
				if  (InvoiceType.MixedSignLines)
					LocalTotalDetailTransactionAmount = LocalTotalDetailTransactionAmount * -1
					if (AlternateReceivableInvoiceType.CreditMemo
					and LocalTotalDetailTransactionAmount > 0)
						LocalErrorOccurred	= true
						LocalErrorMessage	= TotalOfLineItemsMustBeLessThanZeroMsg
						LocalErrorFile		= "InvoiceDetail"
					else
					if (AlternateReceivableInvoiceType != "C"
					and LocalTotalDetailTransactionAmount < 0)
						LocalErrorOccurred	= true
						LocalErrorMessage	= TotalOfLineItemsMustBeGreaterThanZeroMsg
						LocalErrorFile		= "InvoiceDetail"

		DoError

			if  (LocalMoveErrorsToNewRunGroup
			and  LocalErrorRunGroup not entered)

				LocalErrorRunGroup				= "ERRORS_" 

				invoke Update LocalInterfaceRunRel
					invoked.ErrorRunGroup				= LocalErrorRunGroup
					invoked.Status						= 2
			else
				invoke Update LocalInterfaceRunRel
					invoked.Status						= 2

			ErrorMessage								= LocalErrorMessage
			ErrorFile									= LocalErrorFile
			if (LocalErrorRunGroup entered)
				RunGroup								= LocalErrorRunGroup







		InterfaceThisInvoice


			initialize LocalErrorOccurred
			
			if  (ReceivableInvoice entered
			and  !ReceivableInvoice exists)
				LocalErrorOccurred				= true
				LocalErrorMessage				= InvalidInvoiceMsg
				LocalErrorFile					= "Invoice"
				include DoError
			else
			if (ReceivableInvoice entered)
				InterfacedInvoice							= ReceivableInvoice.ReceivableInvoice
				invoke FastUpdate ReceivableInvoice
					invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult
					invoked.DueDate							= DueDate
					invoked.DiscountDate					= DiscDate
					invoked.TermsCode 						= TermsCode
				include InterfaceDefaults
			else
				include InterfaceDefaults
				include InterfaceEdits


				if  (instance count of AlternateReceivableInvoiceDetailImportRel < 2)
					SummarizeDetail									= false
				else
					SummarizeDetail									= Company.SummarizeMultiLineTransactions


				if (LocalErrorOccurred)
					include DoError
				else
					invoke InterfaceCreate ReceivableInvoice
						assign result to InterfacedInvoice
						resume on error
							LocalErrorOccurred		= true
							LocalErrorMessage	= error message
							LocalErrorFile		= "Invoice"
						fill in fields from this instance
							except invoked.Status
						fill in user fields from this instance
						
						invoked.Customer											= DerivedCustomer
						invoked.ReceivableInvoiceType								= InvoiceType
						invoked.ReceivableInvoice									= Invoice
						if  (Status.Open)
							invoked.Status											= 0   
						else
							invoked.Status											= 1
						invoked.TransactionUserField2 								= TransUser2
						invoked.TransactionUserField3 								= TransUser3
						invoked.TransactionUserField4 								= TransUser4
						invoked.TransactionUserField5 								= TransUser5
						invoked.InvoiceAmount.CurrencyAmount						= InvoiceAmount.CurrencyAmount
						invoked.TransientSignedTransactionAmount					= InvoiceAmount.CurrencyAmount
						invoked.ReceivableCrossReference.Company					= XrefCompany
						invoked.ReceivableCrossReference.ReceivableInvoiceType		= XrefType
						invoked.ReceivableCrossReference.ReceivableInvoice			= XrefNbr
						invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= XrefPymtSeq
						invoked.IntrastatNatureOfTransactionCode					= NatureOfTransactionCode
						invoked.IntrastatStatisticalProcedure						= StatisticalProcedure
						invoked.OriginatingInterfaceRun								= LocalReceivablesInterfaceResult
						invoked.InterfaceInProcess									= true
						invoked.CreditDebitMemoReason								= ReasonCode
						invoked.Origin												= "O"
						invoked.LatePaymentCharge									= true
						if	(TermsCode entered)
							if (DueDate entered
							and (TermsCode.IsNetTerms
							or TermsCode.IsProxTerms
							or TermsCode.IsSplitTerms))
								invoked.ReceivableInvoice.DueDate				= DueDate
								invoked.ReceivableInvoice.DiscountDate			= DiscDate
								invoked.ReceivableInvoice.DiscountAmount		= DiscAmt
								invoked.ReceivableInvoice.DiscountPercent		= DiscPct
						else
							invoked.ReceivableInvoice.DueDate				= DueDate
							invoked.ReceivableInvoice.DiscountDate			= DiscDate
							invoked.ReceivableInvoice.DiscountAmount		= DiscAmt
							invoked.ReceivableInvoice.DiscountPercent		= DiscPct		

						if (Description not entered)
							if (InvoiceAmount.CurrencyAmount not entered)
								invoked.Description									= InterfaceZeroAmountTransactionMsg
							else
								invoked.Description									= InterfaceTransactionMsg
						if (GLStatus.Posted)
							invoked.BypassGLDateEdit								= true

					if (LocalErrorOccurred)
						include DoError
					else
						ReceivableInvoice							= InterfacedInvoice.ReceivableInvoice


			if (!LocalErrorOccurred
			and InvoiceAmount.CurrencyAmount entered)
				initialize DetailCount
				if (LocalRunGroupHasDetails)
					DetailCount	= instance count of AlternateReceivableInvoiceDetailImportRel

				if (!LocalRunGroupHasDetails
				or  DetailCount = 0)


					if (ReceivableInvoice entered
					and ReceivableInvoice.ReceivableInvoiceDetailRel exists)
						NextSentence = true
					else
					if (TermsCode entered
					and InvoiceAmount.CurrencyAmount entered)
						initialize CalculateTerms
						CalculateTerms.TransactionDate = TransactionDate
						CalculateTerms.TransactionAmount = InvoiceAmount.CurrencyAmount

						CalculateTerms.OverrideDueDate			= DueDate
						CalculateTerms.OverrideDiscountRate	= DiscPct
						CalculateTerms.OverrideDiscountDate	= DiscDate
						CalculateTerms.OverrideDiscountAmount	= DiscAmt

						LocalTrigger = CalculateTerms.TermsCalTrigger
						if (CalculateTerms.OutputErrorNumber entered)
							LocalErrorOccurred		= true
							LocalErrorMessage	= CalculateTerms.OutputErrorMessage
							LocalErrorFile		= "Invoice"
							include DoError
						else
							LoopCounter = 1
							while (LoopCounter <= 99
							and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered
							and	!LocalErrorOccurred)

								invoke InterfaceCreate ReceivableInvoiceDetail
									resume on error
										LocalErrorOccurred		= true
										LocalErrorMessage	= error message
										LocalErrorFile		= "Invoice"
									fill in fields from this instance
									fill in fields from this instance.ReceivableInvoice
										except invoked.Status
									fill in fields from this instance
										except invoked.Status
									fill in user fields from this instance	
									if	(InvoiceType.MixedSignLines)
										invoked.AlternateReceivableInvoiceType = "M"
										if  (AlternateReceivableInvoiceType.CreditMemo)
											if (InvoiceAmount.CurrencyAmount < 0)
												invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
											else
												invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"												
										else
											if (InvoiceAmount.CurrencyAmount  > 0)
												if (AlternateReceivableInvoiceType = "D")												
													invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
												else
													invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"												
											else
												invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"													
									else
										invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= InvoiceType							
										invoked.AlternateReceivableInvoiceType						= AlternateReceivableInvoiceType

									invoked.Customer											= DerivedCustomer
									invoked.ReceivableInvoiceDetail.Invoice					 = Invoice
									invoked.AlternateReceivableInvoiceType						= InvoiceType
									if (Status.Open
									and CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment not entered)
										invoked.Status											= 7
									else
									if (Status.Open)
										invoked.Status											= 0
									else
										invoked.Status											= Status
									invoked.DueDate											= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
									invoked.InvoiceAmount.CurrencyAmount						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment

									invoked.DiscountDate.DiscDate[1]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountDate
									invoked.DiscountPercent.DiscPct[1]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountPercent
									invoked.DiscountAmount.OrigDiscAmt[1]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountPercent * CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
									invoked.ReceivableInvoiceDetail.PaymentSeq					= LoopCounter
									invoked.ReceivableCrossReference.Company					= XrefCompany
									invoked.ReceivableCrossReference.ReceivableInvoiceType		= XrefType
									invoked.ReceivableCrossReference.ReceivableInvoice			= XrefNbr
									invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= XrefPymtSeq
									invoked.LatePaymentCharge									= true
									if (Project not entered
									and HasProjectDistributions)
										invoked.Project											= ProjectDistributionRel.DistributionAccount.Project
									if (GLStatus.Posted)
										invoked.BypassGLDateEdit								= true

								if (LocalErrorOccurred)
									include DoError

								LoopCounter += 1

					else

						invoke InterfaceCreate ReceivableInvoiceDetail
							resume on error
								LocalErrorOccurred		= true
								LocalErrorMessage	= error message
								LocalErrorFile		= "Invoice"
							fill in fields from this instance
							fill in fields from this instance.ReceivableInvoice
								except invoked.Status
							fill in fields from this instance
								except invoked.Status
							fill in user fields from this instance	
							if	(InvoiceType.MixedSignLines)
								invoked.AlternateReceivableInvoiceType = "M"
								if  (AlternateReceivableInvoiceType.CreditMemo)
									if (InvoiceAmount.CurrencyAmount < 0)
										invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
									else
										invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"												
								else
									if (InvoiceAmount.CurrencyAmount  > 0)
										if (AlternateReceivableInvoiceType = "D")												
											invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
										else
											invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"												
									else
										invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"													
							else
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= InvoiceType							
								invoked.AlternateReceivableInvoiceType						= AlternateReceivableInvoiceType
							invoked.Customer											= DerivedCustomer
							invoked.ReceivableInvoiceDetail.Invoice					 = Invoice
							invoked.AlternateReceivableInvoiceType						= InvoiceType
							if (Status.Open
							and InvoiceAmount.CurrencyAmount not entered)
								invoked.Status											= 7
							else
							if (Status.Open)
								invoked.Status											= 0
							else
								invoked.Status											= Status
							invoked.DueDate 											= DueDate
							if (InvoiceAmount.CurrencyAmount < 0)
								invoked.InvoiceAmount.CurrencyAmount					= InvoiceAmount.CurrencyAmount * -1
							else
								invoked.InvoiceAmount.CurrencyAmount					= InvoiceAmount.CurrencyAmount
							invoked.ApplicationAmount.CurrencyAmount					= AppliedAmount
							invoked.AdjustmentAmount.CurrencyAmount						= AdjustAmount
							invoked.DiscountDate.DiscDate[1]							= DiscDate
							invoked.DiscountPercent.DiscPct[1]							= DiscPct									
							invoked.DiscountAmount.OrigDiscAmt[1]						= DiscAmt
							invoked.ReceivableInvoiceDetail.PaymentSeq					= 1
							invoked.ReceivableCrossReference.Company					= XrefCompany
							invoked.ReceivableCrossReference.ReceivableInvoiceType		= XrefType
							invoked.ReceivableCrossReference.ReceivableInvoice			= XrefNbr
							invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= XrefPymtSeq
							invoked.LatePaymentCharge									= true
							if (Project not entered
							and HasProjectDistributions)
								invoked.Project											= ProjectDistributionRel.DistributionAccount.Project
							if (GLStatus.Posted)
								invoked.BypassGLDateEdit								= true
						if (LocalErrorOccurred)
							include DoError


				else

					if (ReceivableInvoice entered
					and ReceivableInvoice.ReceivableInvoiceDetailRel exists) 
						invoke Delete ReceivableInvoice.ReceivableInvoiceDetailRel
						invoke FastUpdate ReceivableInvoice
							invoked.LastReceivableInvoiceDetail = 0
							
					for each AlternateReceivableInvoiceDetailImportRel
						Sub4 = 1

						if (TermsCode entered
						and InvoiceAmount.CurrencyAmount entered)

							initialize CalculateTerms
							CalculateTerms.TransactionDate = TransactionDate
							if (each.TransactionAmount < 0)
								CalculateTerms.TransactionAmount = each.TransactionAmount * -1
							else
								CalculateTerms.TransactionAmount = each.TransactionAmount

							CalculateTerms.OverrideDueDate			= DueDate
							CalculateTerms.OverrideDiscountRate	= DiscPct
							CalculateTerms.OverrideDiscountDate	= DiscDate
							CalculateTerms.OverrideDiscountAmount	= DiscAmt

							LocalTrigger = CalculateTerms.TermsCalTrigger
							if (CalculateTerms.OutputErrorNumber entered)
								LocalErrorOccurred		= true
								LocalErrorMessage	= CalculateTerms.OutputErrorMessage
								LocalErrorFile		= "InvoiceDetail"
								include DoError
							else
								LocalSequence = each.Sequence
								LoopCounter = 1
								while (LoopCounter <= 99
								and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered
								and	!LocalErrorOccurred)

									invoke InterfaceCreate ReceivableInvoiceDetail
										resume on error
											LocalErrorOccurred		= true
											LocalErrorMessage	= error message
											LocalErrorFile		= "Invoice"
										fill in fields from this instance.ReceivableInvoice
											except invoked.Status
										fill in fields from this instance
											except invoked.Status

										fill in fields from this instance.ReceivableInvoice
										fill in fields from each 
										fill in user fields from this instance	
										fill in user fields from ThisReceivableInvoiceDetailImportRel	
										if (InvoiceType.MixedSignLines)
											invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= each.InvoiceType									
											invoked.AlternateReceivableInvoiceType						= InvoiceType
										else
											invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= InvoiceType							
											invoked.AlternateReceivableInvoiceType						= AlternateReceivableInvoiceType
										invoked.Customer											= DerivedCustomer
										invoked.ReceivableInvoiceDetail.Invoice					 = Invoice
										invoked.AlternateReceivableInvoiceType						= InvoiceType
										if (Status.Open
										and CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment not entered)
											invoked.Status											= 7
										else
										if (Status.Open)
											invoked.Status											= 0
										else
											invoked.Status											= Status
										invoked.DueDate											= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
										invoked.InvoiceAmount.CurrencyAmount						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
										invoked.DiscountDate.DiscDate[1]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountDate
										invoked.DiscountPercent.DiscPct[1]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountPercent
										invoked.DiscountAmount.OrigDiscAmt[1]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountPercent * CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
										invoked.ReceivableInvoiceDetail.PaymentSeq					= Sub4
										invoked.ReceivableCrossReference.Company					= XrefCompany
										invoked.ReceivableCrossReference.ReceivableInvoiceType		= XrefType
										invoked.ReceivableCrossReference.ReceivableInvoice			= XrefNbr
										invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= XrefPymtSeq
										invoked.CreditDebitMemoReason								= ReasonCode
										invoked.LineSequence										= each.LineSeq
										invoked.LatePaymentCharge									= true
										if (GLStatus.Posted)
											invoked.BypassGLDateEdit								= true

									LoopCounter += 1
									Sub4 += 1

									if (LocalErrorOccurred)
										include DoError






						else



							LocalSequence = each.Sequence
							invoke InterfaceCreate ReceivableInvoiceDetail
								resume on error
									LocalErrorOccurred		= true
									LocalErrorMessage	= error message
									LocalErrorFile		= "Invoice"
								fill in fields from this instance.ReceivableInvoice
									except invoked.Status
								fill in fields from this instance
									except invoked.Status
								fill in fields from each
								fill in fields from this instance.ReceivableInvoice
								fill in user fields from this instance	
								fill in user fields from ThisReceivableInvoiceDetailImportRel	
								if (InvoiceType.MixedSignLines)
									invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= each.InvoiceType									
									invoked.AlternateReceivableInvoiceType						= InvoiceType
								else
									invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= InvoiceType							
									invoked.AlternateReceivableInvoiceType						= AlternateReceivableInvoiceType
								invoked.Customer											= DerivedCustomer
								invoked.ReceivableInvoiceDetail.Invoice					 = Invoice
								invoked.AlternateReceivableInvoiceType						= InvoiceType
								if (Status.Open
								and each.TransactionAmount not entered)
									invoked.Status											= 7
								else
								if (Status.Open)
									invoked.Status											= 0
								else
									invoked.Status											= Status
								invoked.DueDate											= DueDate
								if (each.TransactionAmount < 0)
									invoked.InvoiceAmount.CurrencyAmount					= each.TransactionAmount * -1
								else
									invoked.InvoiceAmount.CurrencyAmount					= each.TransactionAmount 
								invoked.DiscountDate.DiscDate[1]							= DiscDate
								invoked.DiscountPercent.DiscPct[1]							= DiscPct
								invoked.DiscountAmount.OrigDiscAmt[1]						= DiscAmt
								invoked.ReceivableInvoiceDetail.PaymentSeq					= each.Sequence 
								invoked.ReceivableCrossReference.Company					= XrefCompany
								invoked.ReceivableCrossReference.ReceivableInvoiceType		= XrefType
								invoked.ReceivableCrossReference.ReceivableInvoice			= XrefNbr
								invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= XrefPymtSeq
								invoked.CreditDebitMemoReason								= ReasonCode
								invoked.LineSequence										= each.LineSeq
								invoked.LatePaymentCharge									= true
								if (GLStatus.Posted)
									invoked.BypassGLDateEdit								= true

							if (LocalErrorOccurred)

								include DoError




			if (!LocalErrorOccurred)
				if (LocalRunGroupHasComments)
					for each ReceivableInvoiceCommentImportRel 



						
						invoke Create CompanyCustomerComment
							resume on error
								LocalErrorOccurred		= true
								LocalErrorMessage	= error message
								LocalErrorFile		= "Comment"
							fill in fields from each
							invoked.Customer							= DerivedCustomer
							invoked.CommentType							= "T"
							invoked.TransactionType						= InvoiceType
							invoked.Transaction							= Invoice
							if (each.PrintCode not entered)
								invoked.PrintCode						= "D"

						if (LocalErrorOccurred)
							include DoError



			if  (LocalErrorOccurred
			and  LocalMoveErrorsToNewRunGroup)
				invoke Update AlternateReceivableInvoiceDetailImportRel
					invoked.RunGroup = RunGroup

				invoke Update ReceivableInvoiceDistributionImportRel
					invoked.RunGroup = RunGroup

				invoke Update ReceivableInvoiceCommentImportRel
					invoked.RunGroup = RunGroup


		InvoiceOffset






			if  (!ErrorMessage entered 
			and  !OffsetComplete

			and  (Status > 1 
			or 	  GLStatus.Posted)	
			and  InvoiceAmount.CurrencyAmount entered)
				if  (GLStatus.NotPosted)
					include 1041Offset
				else
					if (Company.DetailedInvoiceAccrualDistributions
					and Company.InterfaceTransDistribCreate
					and ReceivableInvoice.ReceivableInvoiceDetailRel exists)
						invoke CreateInterfacedHistoricalInvoiceAccrualDistributionsForDetailedFinanceStructure ReceivableInvoice
					else
						initialize ArCodeAmount
						for each ReceivableInvoice.ReceivableGLDistributionInvoiceRel
							if  (each.AccumulationType.Detail
							and  each.GeneralLedgerAccount = ReceivableInvoice.ReceivableGeneralLedgerCodeRel.DistributionAccount)
								if  (AlternateReceivableInvoiceType.CreditMemo)
									ArCodeAmount -= each.DistributionAmount.CurrencyAmount
								else
									ArCodeAmount += each.DistributionAmount.CurrencyAmount

						if  (Company.InterfaceTransDistribCreate
						and  ArCodeAmount != InvoiceAmount.CurrencyAmount)
							if  (!Company.InterfaceTransDistribSummary)
								include 1041Offset
							else	
								include 1043Offset

		1041Offset

			invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
				resume on error
					LocalErrorOccurred		= true
					LocalErrorMessage	= error message
					LocalErrorFile		= "Distribution"
				fill in fields from this instance
				invoked.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				invoked.ReceivableCompanyDataGroup.TransactionCompany				= Company
				invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel			= ReceivableProcessLevel 

				invoked.ReceivableCompanyDataGroup.Customer							= DerivedCustomer
				invoked.ReceivableCompanyGroup.OriginCompany						= Company 
				invoked.ReceivableCompanyGroup.GlCompany							= Company
				invoked.TransType													= InvoiceType
				invoked.Invoice														= Invoice
				invoked.Status														= GLStatus
				invoked.GeneralLedgerAccount										= ReceivableInvoice.ReceivableGeneralLedgerCodeRel.DistributionAccount

				if  (AlternateReceivableInvoiceType.Invoice)
					invoked.AuditSummaryIndicator									= "01"	
				else
					invoked.AuditSummaryIndicator									= "02"	

				if  (GLStatus.Posted)
					if  (AlternateReceivableInvoiceType.CreditMemo)
						if (InvoiceAmount.CurrencyAmount - ArCodeAmount < 0)
							invoked.DistributionAmount.CurrencyAmount							= (InvoiceAmount.CurrencyAmount - ArCodeAmount)
						else
							invoked.DistributionAmount.CurrencyAmount							= ((InvoiceAmount.CurrencyAmount - ArCodeAmount) * -1)
					else
						if (InvoiceAmount.CurrencyAmount - ArCodeAmount < 0)
							invoked.DistributionAmount.CurrencyAmount							= ((InvoiceAmount.CurrencyAmount - ArCodeAmount) * -1)
						else
							invoked.DistributionAmount.CurrencyAmount							= InvoiceAmount.CurrencyAmount - ArCodeAmount
					invoked.Description												= "CreatedOffsetFromInvoiceInterface"					   	
					invoked.BypassGLDateEdit										= true
				else
					if  (AlternateReceivableInvoiceType.CreditMemo)
						if (InvoiceAmount.CurrencyAmount < 0)
							invoked.DistributionAmount.CurrencyAmount							= InvoiceAmount.CurrencyAmount
						else
							invoked.DistributionAmount.CurrencyAmount							= InvoiceAmount.CurrencyAmount * -1
					else
						if (InvoiceAmount.CurrencyAmount < 0)
							invoked.DistributionAmount.CurrencyAmount							= InvoiceAmount.CurrencyAmount * -1
						else
							invoked.DistributionAmount.CurrencyAmount							= InvoiceAmount.CurrencyAmount

					if (Description entered)
						invoked.Description											= Description
					else
						invoked.Description										= current corporate date + "-" + BatchNumber

			if (LocalErrorOccurred)
				include DoError
			else
				OffsetComplete = true

		1043Offset


			if  (AlternateReceivableInvoiceType.Invoice)
				LocalOrigin						= "RI"
			else
				LocalOrigin						= "RM"

			if (ARWorkDistSumRel exists)

				invoke FastUpdate ARWorkDistSumRel
					invoked.Amount					+= InvoiceAmount.CurrencyAmount - ArCodeAmount
			else

				invoke Create ARWorkDistSumRel
					invoked.Amount					= InvoiceAmount.CurrencyAmount - ArCodeAmount
					if (ReceivableGeneralLedgerCode entered)

						invoked.ReceivableGeneralLedgerCode = ReceivableGeneralLedgerCode
					else
					if (CurrentCompanyCustomerRel.ReceivableGeneralLedgerCode entered)

						invoked.ReceivableGeneralLedgerCode = CurrentCompanyCustomerRel.ReceivableGeneralLedgerCode
					else

						invoked.ReceivableGeneralLedgerCode = ReceivableProcessLevel.ReceivableGeneralLedgerCode

			OffsetComplete = true




		ConversionEdits


			initialize LocalErrorMessage
			initialize ErrorMessage

			LocalCustomer = DerivedCustomer

			if (System not entered)
				include ValidatePrefix					

			if (ReceivableProcessLevel not entered
			and Company.DefaultReceivableProcessLevel entered)
				ReceivableProcessLevel = Company.DefaultReceivableProcessLevel

			if (!LocalErrorOccurred)
				if  (ReceivableInvoice entered
				and  !ReceivableInvoice exists)
					ErrorMessage				= InvalidInvoiceMsg
				else
				if  (!InvoiceType.Invoice
				and  !InvoiceType.DebitMemo
				and  !InvoiceType.CreditMemo)
					ErrorMessage			= InvalidInvoiceTypeMsg
				else
				if  (Status not entered)
					ErrorMessage			= StatusRequiredMsg
				else
				if  (PaymentSeq not entered)
					ErrorMessage			= PaymentSeqRequiredMsg
				else
				if  (DueDate not entered)
					ErrorMessage			= DueDateRequiredMsg
				else
				if  (Customer entered
				and  InterfacedCustomer entered
				and  Customer != CustomerMappingTableInterfaceRel.Customer)
					ErrorMessage			= CustomerMismatchMsg
				else
				if  (LastStatementDate entered
				and  TransactionDate entered
				and  LastStatementDate < TransactionDate)
					ErrorMessage			= LastStatementDateMustBeGreaterThanTranDateMsg
				else
				if  (BatchNumber not entered)
					ErrorMessage			= BatchNumberRequiredMsg
				else
				if  (ReceivableApplicationRel exists)
					ErrorMessage			= ApplicationAlreadyExistsMsg
				else
				if  (Status.Open
				and  AppliedAmount entered)
					ErrorMessage			= NoAppliedAmountForOpenMsg
				else
				if  (Status.Open
				and  AdjustAmount entered)
					ErrorMessage			= NoAdjustAmountForOpenMsg
				else
				if  (Status > 6
				and  InvoiceAmount.CurrencyAmount 		!= AppliedAmount + AdjustAmount)
					ErrorMessage			= CurrencyAndAppldAmtEqualMsg	
				else
				if  (InvoiceAmount.CurrencyAmount < 0)
					ErrorMessage			= CurrencyAmountCannotBeNegativeMsg				

			if (ErrorMessage entered)
				LocalErrorOccurred			= true

				invoke Update LocalInterfaceRunRel
					invoked.Status						= 2



		CreateConversionInvoiceHeader

			invoke InterfaceCreate ReceivableInvoice
				assign result to InterfacedInvoice
				resume on error
					LocalErrorOccurred		= true
					ErrorMessage			= error message
				fill in fields from this instance

				fill in user fields from this instance
				
				invoked.InvoiceAmount.CurrencyAmount						= blank
				invoked.Customer											= DerivedCustomer
				invoked.ReceivableInvoiceType								= InvoiceType
				invoked.ReceivableInvoice									= Invoice
				invoked.Status												= 1
				invoked.TransactionUserField2								= TransUser2
				invoked.TransactionUserField3								= TransUser3
				invoked.TransactionUserField4								= TransUser4
				invoked.TransactionUserField5								= TransUser5
				invoked.ReceivableCrossReference.Company					= XrefCompany
				invoked.ReceivableCrossReference.ReceivableInvoiceType		= XrefType
				invoked.ReceivableCrossReference.ReceivableInvoice			= XrefNbr
				invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= XrefPymtSeq
				invoked.IntrastatNatureOfTransactionCode					= NatureOfTransactionCode
				invoked.IntrastatStatisticalProcedure						= StatisticalProcedure
				invoked.OriginatingInterfaceRun								= LocalReceivablesInterfaceResult
				invoked.InterfaceInProcess									= true
				invoked.CreditDebitMemoReason								= ReasonCode
				invoked.Origin												= "L"	//FSM-37824   "L" is Converted was "O" is External / Order Processing
				invoked.LatePaymentCharge									= true
				if (Description not entered)
					invoked.Description									= InterfaceTransactionMsg

				if  (instance count of SameCustomerInvoiceRel < 1)  
					invoked.SummarizeDetail									= false
				else
					invoked.SummarizeDetail									= Company.SummarizeMultiLineTransactions

			if (!LocalErrorOccurred)
				ReceivableInvoice											= InterfacedInvoice.ReceivableInvoice
				for each SameCustomerInvoiceRel
					invoke FastUpdate each
						invoked.ReceivableInvoice							= InterfacedInvoice.ReceivableInvoice


		ConvertInvoicePayment

			invoke InterfaceCreate ReceivableInvoiceDetail
				resume on error
					LocalErrorOccurred		= true
					ErrorMessage			= error message
				fill in fields from this instance
				fill in fields from ReceivableInvoiceRel.ReceivableInvoice
				fill in user fields from this instance	
				invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= InvoiceType
				invoked.AlternateReceivableInvoiceType						= InvoiceType
				invoked.ReceivableInvoiceDetail.Invoice						= Invoice
				invoked.ReceivableInvoiceDetail.PaymentSeq					= PaymentSeq
				invoked.Customer											= DerivedCustomer
				invoked.ReceivableInvoiceDetail.Invoice					 = Invoice
				invoked.Status												= Status
				invoked.DueDate 											= DueDate
				if (InvoiceAmount.CurrencyAmount < 0)
					invoked.InvoiceAmount.CurrencyAmount					= InvoiceAmount.CurrencyAmount * -1
				else
					invoked.InvoiceAmount.CurrencyAmount					= InvoiceAmount.CurrencyAmount
				invoked.ApplicationAmount.CurrencyAmount					= AppliedAmount
				invoked.AdjustmentAmount.CurrencyAmount						= AdjustAmount
				invoked.DiscountDate.DiscDate[1]							= DiscDate
				invoked.DiscountPercent.DiscPct[1]							= DiscPct
				invoked.DiscountAmount.OrigDiscAmt[1]						= DiscAmt
				invoked.ReceivableCrossReference.Company					= XrefCompany
				invoked.ReceivableCrossReference.ReceivableInvoiceType		= XrefType
				invoked.ReceivableCrossReference.ReceivableInvoice			= XrefNbr
				invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= XrefPymtSeq
				invoked.LatePaymentCharge									= true

		RefreshCurrencyAmounts
			if (InvoiceAmount.CurrencyAmount changed
			or	TransactionDate	changed
			or	OriginalCurrency changed
			or	InvoiceAmount.FunctionalAmount.EnteredCurrencyRate changed
			or  InvoiceAmount.AlternateAmount.EnteredCurrencyRate changed
			or  InvoiceAmount.AlternateAmount2.EnteredCurrencyRate changed
			or  InvoiceAmount.AlternateAmount3.EnteredCurrencyRate changed
			or	InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate changed
			or	InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate changed
			or	InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate changed
			or	InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate changed
			or  InvoiceAmount.ReportAmount1.EnteredCurrencyRate changed
			or  InvoiceAmount.ReportAmount2.EnteredCurrencyRate changed
			or  InvoiceAmount.ReportAmount3.EnteredCurrencyRate changed
			or  InvoiceAmount.ReportAmount4.EnteredCurrencyRate changed
			or  InvoiceAmount.ReportAmount5.EnteredCurrencyRate changed)
				initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
				initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
				initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount
				initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount
				initialize InvoiceAmount.ProjectAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount

			if (InvoiceAmount.CurrencyAmount changed
			or	TransactionDate	changed
			or	OriginalCurrency changed)
				initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				initialize InvoiceAmount.AlternateAmount.EnteredCurrencyRate
				initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
				initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
				initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate
				initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate
				initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate
				initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate
				initialize InvoiceAmount.ProjectAmount.EnteredCurrencyRate
				initialize InvoiceAmount.ReportAmount1.EnteredCurrencyRate
				initialize InvoiceAmount.ReportAmount2.EnteredCurrencyRate
				initialize InvoiceAmount.ReportAmount3.EnteredCurrencyRate
				initialize InvoiceAmount.ReportAmount4.EnteredCurrencyRate
				initialize InvoiceAmount.ReportAmount5.EnteredCurrencyRate


	Create Exit Rules
		if (ReceivableInvoice entered)
			initialize ReceivableInvoice


	Actions
		InterfaceInvoices is a Set Action
			default label is "InterfaceInvoices"
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany
				CustomerRange
				InterfacedCustomerRange

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup

				PrmRunGroup
					required
						"RunGroupIsRequired"

			Local Fields
				LocalInstanceCount					is Numeric 10
				LocalInterfaceResultView			is a ReceivablesInterfaceResult view
				RunGroupHasDetails					is Boolean
				RunGroupHasDistributions			is Boolean
				RunGroupHasComments					is Boolean
				LastCodeBlock						is like ReceivableGeneralLedgerCode
				LocalReceivableInvoiceCount	  	is Numeric 12  
				LocalReceivableInvoiceDetailCount	is Numeric 12
 				LocalInvoiceDistributionCount  		is Numeric 12
				LocalInvoiceCommentCount			is Numeric 12

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(PrmCompany						  not entered
				or	  Company	= PrmCompany)
				and	(CustomerRange				  not entered
				or	  Customer within CustomerRange)
				and	(InterfacedCustomerRange		  not entered
				or	  InterfacedCustomer within InterfacedCustomerRange)
				and	 InterfaceInvoice)   

			Sort Order
				RunGroup
				Company
				ReceivableProcessLevel
				Customer
				Invoice

			Action Rules

				Empty Set Rules
					if (DetailImportRunGroupRel exists)
						invoke InterfaceDistributions ReceivableInvoiceDistributionImport
							invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.PrmRunGroup		= PrmRunGroup
							invoked.PrmCompany			= PrmCompany
							invoked.CustomerRange		= CustomerRange
							invoked.InterfacedCustomerRange = InterfacedCustomerRange
							invoked.PrmInterfaceRun	= LocalInterfaceResultView.ReceivablesInterfaceResult
					else
						invoke Create ReceivablesInterfaceResult
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.RunTime						= current timestamp
							invoked.RunGroup					= PrmRunGroup
							invoked.RunType						= 1
							invoked.Company						= PrmCompany
							invoked.CustomerRange				= CustomerRange
							invoked.InterfacedCustomerRange	= InterfacedCustomerRange
							invoked.Status						= 1

				RunGroup Set Rules
					Entrance Rules
						invoke Create ReceivablesInterfaceResult
							assign result to LocalInterfaceResultView

							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.RunTime						= current timestamp
							invoked.RunGroup					= PrmRunGroup
							invoked.RunType						= 1
							invoked.Company						= PrmCompany
							invoked.CustomerRange				= CustomerRange
							invoked.InterfacedCustomerRange	= InterfacedCustomerRange
						
						if (DetailImportRunGroupRel exists)
							RunGroupHasDetails					= true
						else
							RunGroupHasDetails					= false

						if (DistributionImportRunGroupRel exists)
							RunGroupHasDistributions			= true
						else
							RunGroupHasDistributions			= false

						if (CommentImportRunGroupRel exists)
							RunGroupHasComments					= true
						else
							RunGroupHasComments					= false

					Exit Rules
						invoke Update LocalInterfaceResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed			= LocalInstanceCount

							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalReceivableInvoiceCount		 
							invoked.ReceivableInterfaceCounts.DetailCount			= LocalReceivableInvoiceDetailCount
							invoked.ReceivableInterfaceCounts.DistributionCount		= LocalInvoiceDistributionCount
							invoked.ReceivableInterfaceCounts.CommentCount			= LocalInvoiceCommentCount

						if (RunGroupHasDistributions)
							invoke InterfaceDistributions ReceivableInvoiceDistributionImport
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup			= PrmRunGroup
								invoked.PrmCompany				= PrmCompany
								invoked.CustomerRange			= CustomerRange
								invoked.InterfacedCustomerRange = InterfacedCustomerRange
								invoked.PrmInterfaceRun		= LocalInterfaceResultView.ReceivablesInterfaceResult
						else
							invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
								invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup			= PrmRunGroup
								invoked.PrmCompany				= PrmCompany
								invoked.CustomerRange			= CustomerRange
								invoked.InterfacedCustomerRange = InterfacedCustomerRange
								invoked.PrmInterfaceRun		= LocalInterfaceResultView.ReceivablesInterfaceResult
						invoke TrigerACKCSVBOD

				Instance Rules

					LocalErrorOccurred						= false
					LocalRunGroupHasDetails				= RunGroupHasDetails
					LocalRunGroupHasDistributions		= RunGroupHasDistributions
					LocalRunGroupHasComments			= RunGroupHasComments

					LocalReceivablesInterfaceResult	= LocalInterfaceResultView.ReceivablesInterfaceResult
					InterfaceRun						= LocalInterfaceResultView.ReceivablesInterfaceResult

					LocalReceivableInvoiceCount		+= 1
					LocalReceivableInvoiceDetailCount	+= LineCountForRII
					LocalInvoiceDistributionCount		+= DistributionCountForRII
					LocalInvoiceCommentCount			+= CommentCountForRII



					CurrentCompany						= Company
					CurrentCustomer						= DerivedCustomer
					LocalDiscountAdjustmentReason		= CurrentCompanyCustomerRel.DiscountAdjustmentReason			
					
					initialize ErrorMessage
					initialize ErrorFile

					include InterfaceThisInvoice
					LocalInstanceCount			+= 1




					invoke DeleteAllInterfaceInvoicesForRunGroupBOD


		ReleaseInterfaceInvoices is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany
				CustomerRange
				InterfacedCustomerRange
				PrmInterfaceRun				is like ReceivablesInterfaceResult

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Local Fields
				LastInvoiceDate						is Date
				LocalActor							is Actor

				WorkTable							is a CustomerPeriodTotalsTable

			Accumulators
				TotalProcessLevelInvoiceBaseAmount
				TotalProcessLevelMemoBaseAmount
				CompanyCustomerBalanceAmount
				LastInvoiceAmount
				CustomerBalanceAmount
				NationalAccountBalanceAmount

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(PrmCompany						  not entered
				or	  Company	= PrmCompany)
				and	(CustomerRange				  not entered
				or	  Customer within CustomerRange)
				and	(InterfacedCustomerRange		  not entered
				or	  InterfacedCustomer within InterfacedCustomerRange)
				and	 ErrorMessage					  not entered
				and	 InterfaceInvoice)  

			Sort Order
				RunGroup
				Company
				ReceivableProcessLevel
				Customer
				Invoice

			Action Rules
				Empty Set Rules
					LocalReceivablesInterfaceResult = PrmInterfaceRun
					LocalFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
					if (ActorInterfaceRunRel.Status.InProcess)
						invoke Update ActorInterfaceRunRel
							invoked.Status					= 1

				RunGroup Set Rules
					Exit Rules
						LocalReceivablesInterfaceResult = PrmInterfaceRun
						LocalFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup

						if (ActorInterfaceRunRel.Status.InProcess)

							invoke Update ActorInterfaceRunRel
								invoked.Status					= 1


						if (ActorInterfaceRunRel.HasUnprocessedWorkDistSum)

							invoke ProcessSummarizedDistributions ActorInterfaceRunRel

						LocalActor = actor
						send notification
							to LocalActor
							description is "ReceivableInvoiceInterfaceHasCompleted"
							priority is high
							detail is "ResultsCanBeSeenInInterfaceResults"

				ReceivableProcessLevel Set Rules
					Entrance Rules
						initialize TotalProcessLevelInvoiceBaseAmount
						initialize TotalProcessLevelMemoBaseAmount


					Exit Rules



						if (TotalProcessLevelInvoiceBaseAmount entered)	
							LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.Invoiced
							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel
							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount				= TotalProcessLevelInvoiceBaseAmount

						if (TotalProcessLevelMemoBaseAmount entered)
							LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.DebitsCredits
							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel
							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount				= TotalProcessLevelMemoBaseAmount

				Customer Set Rules
					Entrance Rules
						initialize CompanyCustomerBalanceAmount
						initialize LastInvoiceAmount
						initialize CustomerBalanceAmount
						initialize NationalAccountBalanceAmount
						initialize WorkTable

					Exit Rules



						invoke UpdateCurrentBalance CurrentCompanyCustomerRel
							invoked.ChangeAmount								= CompanyCustomerBalanceAmount
							invoked.PrmBalanceType								= 12	
							invoked.BypassCustomerAndNational					= true
							if (LastInvoiceAmount entered)
								invoked.InvoiceLastInvoiceDate					= LastInvoiceDate
								invoked.InvoiceLastInvoiceAmount				= LastInvoiceAmount

						invoke UpdateCurrentBalance CurrentCustomerRel
							invoked.ChangeAmount								= CustomerBalanceAmount

						if (CurrentCompanyCustomerRel.NationalAccountIndicator.Parent)
							invoke UpdateCurrentBalance CurrentCompanyCustomerRel.NationalAccountBalanceRel
								invoked.ChangeAmount							= NationalAccountBalanceAmount
						else
						if (CurrentCompanyCustomerRel.NationalAccountIndicator.Child)
							invoke UpdateCurrentBalance NationalAccountBalanceParentRel
								invoked.ChangeAmount							= NationalAccountBalanceAmount


						I1		= 1
						Done	= false


						while (WorkTable.Group[I1].Year entered)

							CurrentYear				= WorkTable.Group[I1].Year

							if (!CurrentCompanyCustomerPeriodTotalsRel exists)
								invoke Create CurrentCompanyCustomerPeriodTotalsRel

							invoke AddToBuckets CurrentCompanyCustomerPeriodTotalsRel
								invoked.Type			= WorkTable.Group[I1].Type
								invoked.Period			= WorkTable.Group[I1].Period
								invoked.Amount			= WorkTable.Group[I1].Amount

							I1 += 1

				Instance Rules



					CurrentReceivableProcessLevel	= ReceivableProcessLevel
					CurrentCompany					= Company
					CurrentCustomer				= DerivedCustomer

					LocalCustomer					= DerivedCustomer

					LocalReceivablesInterfaceResult = PrmInterfaceRun

					if  (GLStatus.NotPosted
					and Status.Open)















						WorkAmount = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						AlternateWorkAmount = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						AlternateWorkAmount2 = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						AlternateWorkAmount3 = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						ReportWorkAmount1 	 = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						ReportWorkAmount2 	 = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						ReportWorkAmount3 	 = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						ReportWorkAmount4 	 = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						ReportWorkAmount5 	 = sum ReceivableInvoice.ReceivableGLDistributionInvoiceRel.DistributionAmount.ReportAmount5.EnteredCurrencyAmount
						if  (WorkAmount < 0)
							WorkAmount *= -1
						WorkAmount 			 -= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						
						if  (AlternateWorkAmount < 0)
							AlternateWorkAmount *= -1
						AlternateWorkAmount  -= ReceivableInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
						
						if  (AlternateWorkAmount2 < 0)
							AlternateWorkAmount2 *= -1
						AlternateWorkAmount2 -= ReceivableInvoice.InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
						
						if  (AlternateWorkAmount3 < 0)
							AlternateWorkAmount3 *= -1
						AlternateWorkAmount3 -= ReceivableInvoice.InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
						
						if  (ReportWorkAmount1 < 0)
							ReportWorkAmount1 *= -1
						ReportWorkAmount1	 -= ReceivableInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
						
						if  (ReportWorkAmount2 < 0)
							ReportWorkAmount2 *= -1
						ReportWorkAmount2	 -= ReceivableInvoice.InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
						
						
						if  (ReportWorkAmount3 < 0)
							ReportWorkAmount3 *= -1
						ReportWorkAmount3	 -= ReceivableInvoice.InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
						
						if  (ReportWorkAmount4 < 0)
							ReportWorkAmount4 *= -1
						ReportWorkAmount4	 -= ReceivableInvoice.InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
						
						if  (ReportWorkAmount5 < 0)
							ReportWorkAmount5 *= -1
						ReportWorkAmount5	 -= ReceivableInvoice.InvoiceAmount.ReportAmount5.EnteredCurrencyAmount
						
						if  (WorkAmount entered
						or AlternateWorkAmount entered
						or AlternateWorkAmount2 entered
						or AlternateWorkAmount3 entered
						or ReportWorkAmount1 entered
						or ReportWorkAmount2 entered
						or ReportWorkAmount3 entered
						or ReportWorkAmount4 entered
						or ReportWorkAmount5 entered)
							invoke RoundingUpdate last ReceivableGLDistributionRoundingRel
								invoked.RoundAmount.FunctionalAmount += WorkAmount
								invoked.RoundAmount.AlternateAmount  += AlternateWorkAmount
								invoked.RoundAmount.AlternateAmount2 += AlternateWorkAmount2
								invoked.RoundAmount.AlternateAmount3 += AlternateWorkAmount3
								invoked.RoundAmount.ReportAmount1 	 += ReportWorkAmount1
								invoked.RoundAmount.ReportAmount2 	 += ReportWorkAmount2
								invoked.RoundAmount.ReportAmount3 	 += ReportWorkAmount3
								invoked.RoundAmount.ReportAmount4 	 += ReportWorkAmount4
								invoked.RoundAmount.ReportAmount5 	 += ReportWorkAmount5


					if  (!OffsetComplete)
						include InvoiceOffset




					if  (!LocalErrorOccurred)
						invoke FastUpdate ReceivableInvoice
							invoked.InterfaceInProcess	= false


						if (Status.Open)
							SuccessfulRelease = true

							invoke Unreleased.Release ReceivableInvoice
								resume on error
									SuccessfulRelease = false
									ErrorMessage = error message

							if  (!SuccessfulRelease)
								invoke Update ActorInterfaceRunRel
									if (invoked.Status.Incomplete)
										invoked.Status					= 4  
									else
										invoked.Status					= 3  

						if (Status.Open
						and  SuccessfulRelease)


							if (AlternateReceivableInvoiceType.Invoice)	
								TotalProcessLevelInvoiceBaseAmount 			+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else
							if (AlternateReceivableInvoiceType.DebitMemo)
								TotalProcessLevelMemoBaseAmount 			+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								TotalProcessLevelMemoBaseAmount 			+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1



							if (Status.Open)
								if (AlternateReceivableInvoiceType.CreditMemo)
									CompanyCustomerBalanceAmount				+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								else
									CompanyCustomerBalanceAmount				+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

								if  ((InvoiceType.Invoice 
								or	AlternateReceivableInvoiceType.Invoice)
								and   TransactionDate > LastInvoiceDate)
									LastInvoiceAmount							= InvoiceAmount.CurrencyAmount
									LastInvoiceDate								= TransactionDate

								if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
									CustomerBalanceAmount						+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								else
									CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup  
									CurrencyWork.ExchangeDate					= TransactionDate
									CurrencyWork.TransactionAmount				= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									CurrencyWork.FromCurrency					= Company.Currency
									CurrencyWork.BaseAmount.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency 
									CustomerBalanceAmount						+= CurrencyWork.BaseAmount.OutputCurrencyAmount

								LocalNationalCompany = CurrentCompanyCustomerRel.DerivedNationalCompany
								LocalNationalCustomer = CurrentCompanyCustomerRel.DerivedNationalCustomer

								if (CurrentCompanyCustomerRel.NationalAccountIndicator.Parent)
									NationalAccountBalanceAmount				+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								else
								if (CurrentCompanyCustomerRel.NationalAccountIndicator.Child)
									if (Company.Currency = CurrentCompanyCustomerRel.NationalAccountBalanceParentRel.Company.Currency)
										NationalAccountBalanceAmount			+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									else
										CurrencyWork.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup  
										CurrencyWork.ExchangeDate				= TransactionDate
										CurrencyWork.TransactionAmount			= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
										CurrencyWork.FromCurrency				= Company.Currency
										CurrencyWork.BaseAmount.ToCurrency		= CurrentCompanyCustomerRel.NationalAccountBalanceParentRel.Company.Currency 
										NationalAccountBalanceAmount			+= CurrencyWork.BaseAmount.OutputCurrencyAmount



								CalculateReceivableYearPeriod.Company			= Company
								CalculateReceivableYearPeriod.EffectiveDate		= GeneralLedgerDate
								LocalTrigger									= CalculateReceivableYearPeriod.CalculateYearPeriod
								CurrentYear										= CalculateReceivableYearPeriod.CurrentYear											
								CurrentPeriod									= CalculateReceivableYearPeriod.CurrentPeriod											


								if (AlternateReceivableInvoiceType.Invoice)	
									CurrentType									= "B"
								else
								if (AlternateReceivableInvoiceType.CreditMemo)
									CurrentType									= "M"

								I1		= 1
								Done	= false


								while (!Done)

									if  (WorkTable.Group[I1].Year not entered)

										WorkTable.Group[I1].Year 		= CurrentYear
										WorkTable.Group[I1].Period 		= CurrentPeriod
										WorkTable.Group[I1].Type 		= CurrentType
										WorkTable.Group[I1].Amount 		+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
										Done							= true
									else
									if  (WorkTable.Group[I1].Year		= CurrentYear
									and  WorkTable.Group[I1].Period	= CurrentPeriod
									and  WorkTable.Group[I1].Type		= CurrentType)

										WorkTable.Group[I1].Amount 		+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
										Done							= true
									else
										I1 += 1



						if  (ReceivableInvoiceImport exists
						and ErrorMessage not entered)
							if ((TaxEntityUsesOneSource
							or  VertexCallByTransaction)
							and Status.Open
							and !GLStatus.Posted)
								for each ReceivableInvoiceDistributionImportRel
									invoke FastDelete each
							
							for each AlternateReceivableInvoiceDetailImportRel 
								invoke FastDelete each
							for each ReceivableInvoiceCommentImportRel 
								invoke FastDelete each
							invoke FastDelete

						if ((TaxEntityUsesOneSource
						or  VertexCallByTransaction)
						and ReceivableInvoiceImport exists
						and ErrorMessage entered
						and ReceivableInvoice exists
						and Status.Open
						and !GLStatus.Posted)
							invoke Delete ReceivableInvoice.ReceivableInvoiceDetailRel
							invoke Delete ReceivableInvoice
							ReceivableInvoice = blank
							LocalReceivablesInterfaceResult = PrmInterfaceRun
							LocalFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
							invoke Update ActorInterfaceRunRel
								invoked.Status = 2

						if  (ReceivableInvoiceImport exists
						and  ReceivableInvoiceRel exists
						and  ErrorMessage entered
						and !(TaxEntityUsesOneSource
						or   VertexCallByTransaction))
							for each ReceivableInvoiceDistributionImportRel
								invoke FastDelete each
							for each AlternateReceivableInvoiceDetailImportRel 
								invoke FastDelete each
							for each ReceivableInvoiceCommentImportRel 
								invoke FastDelete each
							invoke FastDelete


		ConvertInvoices is a Set Action
			default label is "ConvertInvoices"
			Parameters
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany

			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Local Fields
				LocalInstanceCount					is Numeric 10
				LocalInterfaceResultView			is a ReceivablesInterfaceResult view



				LastInvoiceDate						is Date
				LocalReceivableInvoiceCount			is Numeric 12

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	Company.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
				and   (PrmCompany						  not entered
				or	 Company	= PrmCompany)
				and	ConversionInvoice)  

			Accumulators
				TotalProcessLevelInvoiceBaseAmount
				TotalProcessLevelMemoBaseAmount
				LastInvoiceAmount

			Sort Order
				RunGroup
				Company
				ReceivableProcessLevel
				Customer
				Invoice
				PaymentSeq

			Action Rules

				Empty Set Rules
					invoke Create ReceivablesInterfaceResult
						invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 5
						invoked.Company						= PrmCompany
						invoked.Status						= 1

				RunGroup Set Rules
					Entrance Rules
						invoke Create ReceivablesInterfaceResult
							assign result to LocalInterfaceResultView
							invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup
							invoked.RunTime						= current timestamp
							invoked.RunGroup					= PrmRunGroup
							invoked.RunType						= 5
							invoked.Company						= PrmCompany

					Exit Rules
						invoke Update LocalInterfaceResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed			= LocalInstanceCount
							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalReceivableInvoiceCount  
							if (!invoked.Status = 2)
								invoked.Status					= 1

				ReceivableProcessLevel Set Rules
					Entrance Rules
						initialize TotalProcessLevelInvoiceBaseAmount
						initialize TotalProcessLevelMemoBaseAmount

					Exit Rules



						if (TotalProcessLevelInvoiceBaseAmount entered)
							LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.Invoiced
							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel
							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount				= TotalProcessLevelInvoiceBaseAmount

						if (TotalProcessLevelMemoBaseAmount entered)
							LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.DebitsCredits
							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel
							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount				= TotalProcessLevelMemoBaseAmount

				Customer Set Rules
					Entrance Rules
						initialize LastInvoiceAmount
						initialize LastInvoiceDate

					Exit Rules
						if (LastInvoiceAmount entered)
							invoke FastUpdate CurrentCompanyCustomerRel
								invoked.LastInvoiceDate					= LastInvoiceDate
								invoked.LastInvoiceAmount				= LastInvoiceAmount

				Instance Rules


					LocalReceivablesInterfaceResult	= LocalInterfaceResultView.ReceivablesInterfaceResult
					InterfaceRun						= LocalInterfaceResultView.ReceivablesInterfaceResult
					LocalReceivableInvoiceCount	  	+= 1  
					LocalErrorOccurred					= false

					include ConversionEdits

					if (!LocalErrorOccurred)

						if  (ReceivableInvoice not entered)
							if  (ReceivableInvoiceRel exists
							and  ReceivableInvoiceRel.InterfaceInProcess)
								ReceivableInvoice = ReceivableInvoiceRel.ReceivableInvoice
							else
								include CreateConversionInvoiceHeader

								if (LocalErrorOccurred)
									invoke Update LocalInterfaceRunRel
										invoked.Status								= 2

					if (!LocalErrorOccurred)
						include ConvertInvoicePayment
						LocalInstanceCount						+= 1



						if (LocalErrorOccurred)
							invoke Update LocalInterfaceRunRel
								invoked.Status								= 2
						else
							if (Status.Open)
								if  (InvoiceType.Invoice 
								and  TransactionDate > LastInvoiceDate)
									LastInvoiceAmount						= InvoiceAmount.CurrencyAmount
									LastInvoiceDate							= TransactionDate


							if (AlternateReceivableInvoiceType.Invoice)	
								TotalProcessLevelInvoiceBaseAmount 			+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else
							if (AlternateReceivableInvoiceType.DebitMemo)
								TotalProcessLevelMemoBaseAmount 			+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								TotalProcessLevelMemoBaseAmount 			+= ReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1



							invoke FastUpdate ReceivableInvoice
								invoked.InvoiceAmount.CurrencyAmount		+= InvoiceAmount.CurrencyAmount
								if (!SameCustomerInvoiceRel exists)
									invoked.InterfaceInProcess	= false

							invoke FastDelete


		OneSourceInterfaceInvoicesCreateTaxLineItems is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany
				CustomerRange
				InterfacedCustomerRange
				PrmInterfaceRun				is like ReceivablesInterfaceResult

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	Company.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(PrmCompany						  not entered
				or	  Company	= PrmCompany)
				and	(CustomerRange				  not entered
				or	  Customer within CustomerRange)
				and	(InterfacedCustomerRange		  not entered
				or	  InterfacedCustomer within InterfacedCustomerRange)
				and	 InterfaceInvoice)

			Sort Order
				RunGroup
				Company
				ReceivableProcessLevel
				Customer
				Invoice

			Action Rules

				Empty Set Rules
					invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
						invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
						invoked.PrmRunGroup				 = PrmRunGroup
						invoked.PrmCompany				 = PrmCompany
						invoked.CustomerRange			 = CustomerRange
						invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
						invoked.PrmInterfaceRun			 = PrmInterfaceRun

				RunGroup Set Rules
					Exit Rules
						invoke OneSourceProcessInterfaceInvoices ReceivableInvoiceImport
							invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
							invoked.PrmRunGroup				 = PrmRunGroup
							invoked.PrmCompany				 = PrmCompany
							invoked.CustomerRange			 = CustomerRange
							invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
							invoked.PrmInterfaceRun			 = PrmInterfaceRun

				Instance Rules
					if (StaticTaxEntityUsesOneSource)
						if (Status.Open
						and !GLStatus.Posted
						and ErrorMessage not entered)
							invoke Purge ReceivableInvoice.TaxLineItemsRel
							invoke EditReceivableInvoiceForOneSource ReceivableInvoice
								resume on error
									ErrorMessage = error message
							if (ErrorMessage not entered)
								invoke OneSourceInterfaceInvoiceCreateTaxLineItems ReceivableInvoice
									resume on error
										ErrorMessage = error message

		
		OneSourceProcessInterfaceInvoices is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany
				CustomerRange
				InterfacedCustomerRange
				PrmInterfaceRun				is like ReceivablesInterfaceResult

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	Company.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(PrmCompany						  not entered
				or	  Company	= PrmCompany)
				and	(CustomerRange				  not entered
				or	  Customer within CustomerRange)
				and	(InterfacedCustomerRange		  not entered
				or	  InterfacedCustomer within InterfacedCustomerRange)
				and	 InterfaceInvoice)

			Sort Order
				RunGroup
				Company
				ReceivableProcessLevel
				Customer
				Invoice

			Action Rules

				Empty Set Rules
					invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
						invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
						invoked.PrmRunGroup				 = PrmRunGroup
						invoked.PrmCompany				 = PrmCompany
						invoked.CustomerRange			 = CustomerRange
						invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
						invoked.PrmInterfaceRun			 = PrmInterfaceRun

				RunGroup Set Rules
					Exit Rules
						invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
							invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
							invoked.PrmRunGroup				 = PrmRunGroup
							invoked.PrmCompany				 = PrmCompany
							invoked.CustomerRange			 = CustomerRange
							invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
							invoked.PrmInterfaceRun			 = PrmInterfaceRun

				Instance Rules
					if (StaticTaxEntityUsesOneSource)
						if (Status.Open
						and !GLStatus.Posted
						and ErrorMessage not entered)
							invoke OneSourceInterfaceInvoiceVerifyTaxTolerance ReceivableInvoice
								resume on error
									ErrorMessage = error message

						if (Status.Open
						and !GLStatus.Posted
						and ErrorMessage entered)
							invoke Delete ReceivableInvoice.ReceivableInvoiceDetailRel
							invoke Delete ReceivableInvoice
							ReceivableInvoice 				= blank
							LocalErrorMessage				= ErrorMessage
							LocalErrorFile					= "Distribution"
							LocalReceivablesInterfaceResult	= PrmInterfaceRun
							include DoError


		VertexInterfaceInvoicesCreateTaxLineItems is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany
				CustomerRange
				InterfacedCustomerRange
				PrmInterfaceRun				is like ReceivablesInterfaceResult

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	Company.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(PrmCompany						  not entered
				or	  Company	= PrmCompany)
				and	(CustomerRange				  not entered
				or	  Customer within CustomerRange)
				and	(InterfacedCustomerRange		  not entered
				or	  InterfacedCustomer within InterfacedCustomerRange)
				and	 InterfaceInvoice)

			Sort Order
				RunGroup
				Company
				ReceivableProcessLevel
				Customer
				Invoice

			Action Rules

				Empty Set Rules
					invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
						invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
						invoked.PrmRunGroup				 = PrmRunGroup
						invoked.PrmCompany				 = PrmCompany
						invoked.CustomerRange			 = CustomerRange
						invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
						invoked.PrmInterfaceRun			 = PrmInterfaceRun

				RunGroup Set Rules
					Exit Rules
						invoke VertexProcessInterfaceInvoices ReceivableInvoiceImport
							invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
							invoked.PrmRunGroup				 = PrmRunGroup
							invoked.PrmCompany				 = PrmCompany
							invoked.CustomerRange			 = CustomerRange
							invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
							invoked.PrmInterfaceRun			 = PrmInterfaceRun

				Instance Rules
					if (StaticVertexCallByTransaction)
						if (Status.Open
						and !GLStatus.Posted
						and ErrorMessage not entered)
							invoke Purge ReceivableInvoice.TaxLineItemsRel
							invoke VertexInterfaceInvoiceCreateTaxLineItems ReceivableInvoice
								resume on error
									ErrorMessage = error message


		VertexProcessInterfaceInvoices is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a ReceivableCompany
				CustomerRange
				InterfacedCustomerRange
				PrmInterfaceRun				is like ReceivablesInterfaceResult

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
				
				PrmRunGroup
					required
						"RunGroupIsRequired"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	Company.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(PrmCompany						  not entered
				or	  Company	= PrmCompany)
				and	(CustomerRange				  not entered
				or	  Customer within CustomerRange)
				and	(InterfacedCustomerRange		  not entered
				or	  InterfacedCustomer within InterfacedCustomerRange)
				and	 InterfaceInvoice)

			Sort Order
				RunGroup
				Company
				ReceivableProcessLevel
				Customer
				Invoice

			Action Rules

				Empty Set Rules
					invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
						invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
						invoked.PrmRunGroup				 = PrmRunGroup
						invoked.PrmCompany				 = PrmCompany
						invoked.CustomerRange			 = CustomerRange
						invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
						invoked.PrmInterfaceRun			 = PrmInterfaceRun

				RunGroup Set Rules
					Exit Rules
						invoke ReleaseInterfaceInvoices ReceivableInvoiceImport
							invoked.PrmFinanceEnterpriseGroup= PrmFinanceEnterpriseGroup
							invoked.PrmRunGroup				 = PrmRunGroup
							invoked.PrmCompany				 = PrmCompany
							invoked.CustomerRange			 = CustomerRange
							invoked.InterfacedCustomerRange	 = InterfacedCustomerRange
							invoked.PrmInterfaceRun			 = PrmInterfaceRun

				Instance Rules
					if (StaticVertexCallByTransaction)
						if (Status.Open
						and !GLStatus.Posted
						and ErrorMessage not entered)
							invoke VertexInterfaceInvoiceVerifyTaxTolerance ReceivableInvoice
								resume on error
									ErrorMessage = error message
						
						if (Status.Open
						and !GLStatus.Posted
						and ErrorMessage entered)
							invoke Delete ReceivableInvoice.ReceivableInvoiceDetailRel
							invoke Delete ReceivableInvoice
							ReceivableInvoice 				= blank
							LocalErrorMessage				= ErrorMessage
							LocalErrorFile					= "Distribution"
							LocalReceivablesInterfaceResult	= PrmInterfaceRun
							include DoError


		Create is a Create Action
			restricted
			Action Rules
				include ValidateReceivableInvoice
				LocalCustomer = DerivedCustomer

				if (InvoiceTypeCode not entered)
					if (CompanyCustomerInvoiceTypeCodesRel exists)
						InvoiceTypeCode	= first CustomerInvoiceTypeCodesRel.InvoiceTypeCode
				if (TermsCode not entered)
					TermsCode			= first CustomerInvoiceTypeCodesRel.TermsCode

			Exit Rules
				if (InvoiceTypeCode entered)
					if (CompanyCustomerInvoiceTypeCodesRel exists)
						constraint (AnyCustomerInvoiceTypeCodeRel exists)
							"InvoiceTypeCodeNotFoundInCustomer'sInvoiceTypeCodes"


		CreateInterfaceInvoice is a Create Action
			Action Rules
				constraint (PaymentSeq not entered)
					"DoNotEnterPaymentSequenceForInterfaceInvoice"

				invoke Create this instance


		CreateConversionInterface is a Create Action
			Action Rules
				constraint (PaymentSeq entered)
					"PaymentSequenceRequiredForConversionInvoice"
				InvoiceType = ConversionInvoiceType
				invoke Create this instance


		Update is an Update Action
			Action Rules
				include ValidateReceivableInvoice
				if  (old PaymentSeq not entered)
					constraint (PaymentSeq not entered)
						"DoNotEnterPaymentSequenceForInterfaceInvoice"
				else
				if  (old PaymentSeq entered)
					constraint (PaymentSeq entered)
						"PaymentSequenceRequiredForConversionInvoice"
					InvoiceType = ConversionInvoiceType

				LocalCustomer = DerivedCustomer

				if (SecondaryKeyFields changed)
					invoke Update OldReceivableInvoiceDetailImportRel
						invoked.RunGroup		= RunGroup
						invoked.Company			= Company
						invoked.Invoice			= Invoice
						if (!InvoiceType.MixedSignLines)
							invoked.InvoiceType		= InvoiceType
					invoke Update OldReceivableInvoiceDistributionImportRel
						invoked.RunGroup		= RunGroup
						invoked.Company			= Company
						invoked.Invoice			= Invoice
						invoked.InvoiceType		= InvoiceType
						invoked.TransientTransactionDate 	= TransactionDate
						invoked.TransientPostingDate 		= GeneralLedgerDate
					invoke Update OldReceivableInvoiceCommentImportRel
						invoked.RunGroup		= RunGroup
						invoked.Company			= Company
						invoked.Invoice			= Invoice
						invoked.InvoiceType		= InvoiceType

				if (InvoiceTypeCode changed
				and InvoiceTypeCode != old InvoiceTypeCode)
					confirmation required
						"ChangingInvoiceTypeCodeMayChangePaymentTerms;Proceed?"

					if (InvoiceTypeCode entered)
						if (CustomerInvoiceTypeCodeRel.TermsCode entered
						and TermsCode not changed)
							TermsCode	= CustomerInvoiceTypeCodeRel.TermsCode
						else
						if (InvoiceTypeCode.TermsCode entered
						and TermsCode not changed)
							TermsCode 	= InvoiceTypeCode.TermsCode

				include RefreshCurrencyAmounts
			Exit Rules

				if (InvoiceTypeCode entered)
					if (CompanyCustomerInvoiceTypeCodesRel exists)
						constraint (AnyCustomerInvoiceTypeCodeRel exists)
							"InvoiceTypeCodeNotFoundInCustomer'sInvoiceTypeCodes"






		FastUpdate is an Update Action
			restricted
			bypass field rules


		Delete is a Delete Action
			Entrance Rules
				if (InterfaceInvoice)
					invoke Delete AlternateReceivableInvoiceDetailImportRel
					invoke Delete ReceivableInvoiceDistributionImportRel
					invoke Delete ReceivableInvoiceCommentImportRel
				if (ReceivableInvoice entered)
					invoke Delete ReceivableInvoice


		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules


		ResetErrorMessage is an Instance Action
			valid when (ErrorExists)
			Action Rules
				initialize ErrorMessage
				initialize ErrorFile



		SetError is an Instance Action
			restricted
			Parameters
				PrmErrorMessage			is Alpha 150
				PrmErrorRunGroup		is like RunGroup
				PrmErrorFile			is Alpha 50
			Action Rules


				ErrorMessage					= PrmErrorMessage
				ErrorFile						= PrmErrorFile
				if (PrmErrorRunGroup entered)
					RunGroup			= PrmErrorRunGroup


		DeleteAllInterfaceInvoicesForRunGroupBOD is an Instance Action
			restricted
			default label is "DeleteAllTransactionsForRunGroup"
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger and ErrorMessage entered and SenderOriginalBOD != "CSV")
					if(SenderComponentID entered or SenderLogicalID entered or SenderBODID entered)
						trigger PayablesService.ReceivableInvoiceImportService PA service
							resume on error
							title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>RI:<Invoice>"
							Criteria
								Company.FinanceEnterpriseGroup
								Company	
							Variables
								include persistent fields from ReceivableInvoiceImport
								Company.FinanceEnterpriseGroup
									variable name is FinanceEnterpriseGroup



						if(ErrorMessage entered and SenderOriginalBOD != "CSV")
							invoke Delete


		TrigerACKCSVBOD is an Instance Action
			restricted
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger and ErrorMessage entered and SenderOriginalBOD = "CSV")
					if(SenderComponentID entered or SenderLogicalID entered or SenderBODID entered)
						trigger PayablesService.ARInvoiceCSVService PA service
							resume on error
							title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>RG:<RunGroup>"
							Criteria
								Company.FinanceEnterpriseGroup
								Company	
							Variables
								include persistent fields from ErrorsInRunGroupRel
								Company.FinanceEnterpriseGroup
									variable name is FinanceEnterpriseGroup
						for each ErrorsInRunGroupRel
							invoke Delete each


		DeleteAllInterfaceInvoicesForRunGroup is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required

			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	Company.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	InterfaceInvoice)

			Action Rules
				Instance Rules
					invoke Delete AlternateReceivableInvoiceDetailImportRel
					invoke Delete ReceivableInvoiceDistributionImportRel
					invoke Delete ReceivableInvoiceCommentImportRel
					if (ReceivableInvoice entered)
						invoke Delete ReceivableInvoice
					invoke FastDelete


		DeleteAllConversionInvoicesForRunGroup is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required

			Parameters
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	Company.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup
				and	ConversionInvoice)

			Action Rules
				Instance Rules
					if (ReceivableInvoice entered)
						invoke Delete ReceivableInvoice
					invoke FastDelete
					
		SendConfirmInvoiceNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(ErrorMessage entered)
					LocalMainUserTemplate = "IONAcknowledgeInvoice_ReceivableInvoiceImport_ConfirmBOD_ST"
					if(UserTemplateRel exists)
						send ion bod
							bod is ConfirmBODXML
							bod type is "Confirm.Invoice"
							document id is Invoice
							accounting entity is Company
									
		SendAcknowledgeInvoiceNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(ErrorMessage entered)
					LocalMainUserTemplate = "IONAcknowledgeInvoice_ReceivableInvoiceImport_AckBOD_ST"	
					if(UserTemplateRel exists)
						send ion bod
							bod is AcknowledgeInvoiceXMLBOD
							bod type is "Acknowledge.Invoice"
							document id is Invoice
							accounting entity is Company
		
		TriggerAcknowledgeInvoiceNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(FSMBODConfigurationRel.Enable)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 5
							invoked.Noun 					= "Invoice"					
							invoked.BODDocumentID			= Invoice
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= Company
							invoked.Invoice					= Invoice
							invoked.RunGroup				= RunGroup
							invoked.Reference1			 	= InvoiceType
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= Invoice
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= Company
							invoked.RunGroup				= RunGroup
							invoked.Invoice					= Invoice
							invoked.Reference1			 	= InvoiceType
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendConfirmInvoiceNativeLPLBOD
						resume on error
					   		Error											= true
							LocalErrorMessage	 							= error message
					if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= LocalErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= ConfirmBODXML
							invoked.BODID								= DerivedConfirmBODID
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status								= 3
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= ConfirmBODXML
							invoked.BODID								= DerivedConfirmBODID
					
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 5
							invoked.Noun 					= "Invoice"					
							invoked.BODDocumentID			= Invoice
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= Company
							invoked.Invoice					= Invoice
							invoked.RunGroup				= RunGroup
							invoked.Reference1			 	= InvoiceType
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= Invoice
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.BODAccountingEntity		= Company
							invoked.Invoice					= Invoice
							invoked.RunGroup				= RunGroup
							invoked.Reference1			 	= InvoiceType
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendAcknowledgeInvoiceNativeLPLBOD
						resume on error
					   		Error											= true
							LocalErrorMessage	 							= error message
					if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= LocalErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= AcknowledgeInvoiceXMLBOD
							invoked.BODID								= DerivedBODID
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status								= 3
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= AcknowledgeInvoiceXMLBOD
							invoked.BODID								= DerivedBODID





