Actor is a BusinessClass
    owned by person
    prefix is ACTR
    stored in environment

    representative text is "<FirstNameAndLastNameOrActor>"
    representative image is ActorPicture.File
    	missing image is missingphotoActor

    Ontology
        symbolic key is Actor

    Patterns
        implements CRUD
        implements SecurityCache



    Persistent Fields
        PersonName
        	translatable
        ContactInfo
        IsoLocale
        AlternateLocale    is a IsoLocale
        DefaultUICalendar  is a UICalendar
        CreatedFor is BusinessObjectReference
			default label is "BusinessObjectReferenceCreated"
        CustomActorFields
        AccountLockout
        LastSuccessfulLogin is TimeStamp
        IsRunAsEnabled is Boolean
			default label is "RunAsEnabled"
        IsActorDisabled is Boolean
			default label is "ActorDisabled"
        ActorPicture is an ImageAttachmentFw
		IsMingleUser is Boolean
			default label is "Ming.\leUser"
		IsActorIFSDisabled is Boolean 
			default label is "ActorIFSDisabled"
		MingleId is Alpha up to 100  
			default label is "Ming.\leId"
		IsAckBodReq is Boolean
			default label is "AcknowledgeBOD_Required"
		IsPictureUpdated is Boolean
			default label is "PictureUpdated"

		ActorType
			
    Transient Fields
        Service
        Password is Password
        NewPassword is Password
        Identity is Alpha 200
        IsPasswordResetRequired is Boolean
			default label is "PasswordResetRequired"
        SSODomain
        ContextProperty
		SetMingleUserFlag is Boolean	
			default label is "SetMing.\leUserFlag"
		

		AT_SystemUser				is Boolean
			derive value from ActorType.IsSystemUser
		AT_DataControlUser  		is Boolean
			derive value from ActorType.IsDataControlUser
		AT_ServiceUser   			is Boolean
			derive value from ActorType.IsServiceUser
		AT_Approver     			is Boolean	
			derive value from ActorType.IsApprover
        ActorConfigurableFeatures is a ConfigurableFeatures
            derive value from (ConfigurableFeaturesDerived)

	Context Fields
		ActorGroupContextField	is an ActorGroup
				
   	Field Rules
   		Identity
   			default to Actor
   		Password
   			default to Actor
   						
	Derived Fields
		EmailMessage is a NativeField
			type is Alpha size up to 255
			
		AlternateEmailMessage is a NativeField
			type is Alpha size up to 255

        FirstNameAndLastNameOrActor is a ConditionalField
            type is Alpha size 101
            default label is "User"
            if (PersonName.GivenName != blank and PersonName.FamilyName != blank)
                PersonName.FirstAndLastName
            else
                Actor

        ConfigurableFeaturesDerived is a DerivedField
            type is Text
            if (ConfigurableFeaturesChecked or ConfigurableFeaturesCalculated > 0)  
                return ConfigurableFeatures
            return ConfigurableFeatures

       	ConfigurableFeaturesCalculated is a DerivedField
       		type is Numeric 1
       		restricted
            LocalHideMenuPrintFiles = true
            LocalHideMenuNotifications = true
            LocalHideMenuInbasket = true
            LocalHideMenuJobs = true
            LocalHideMenuReports = true
            LocalHideMenuActions = true
            LocalHideMenuSearch = true
            LocalHideSearchFieldOptions = true
            LocalHideDeliveredReports = true
       		if (ConfigurableFeaturesConfigParamExists
       		and ConfigurableFeaturesCalculated = 0)
       			for each ConfigurableFeaturesRel
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.ExportToCSVEnabled)
       					ConfigurableFeatures.ExportToCSVEnabled = true

       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.ExportToCSVMultithreadingEnabled)
       					ConfigurableFeatures.ExportToCSVMultithreadingEnabled = true

       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.ExportToPDFEnabled)
       					ConfigurableFeatures.ExportToPDFEnabled = true 	
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.CreateReportEnabled)
       					ConfigurableFeatures.CreateReportEnabled = true 	

       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.CreateFolderEnabled)
       					ConfigurableFeatures.CreateFolderEnabled = true 	
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.DataMenuEnabled)
       					ConfigurableFeatures.DataMenuEnabled = true 	       					       					       					       					 	
       							
		       		if (each.ActorRole.Role.DataAreaConfigurableFeatures.UserContextMenuEnabled)
       					ConfigurableFeatures.UserContextMenuEnabled = true
		       		
		       		if (each.ActorRole.Role.DataAreaConfigurableFeatures.CreateWatchAndAlertEnabled)
       					ConfigurableFeatures.CreateWatchAndAlertEnabled = true
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.AsOfDateEnabled)
       					ConfigurableFeatures.AsOfDateEnabled = true 
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.ShowUserActionsOnInbasketListEnabled)
       					ConfigurableFeatures.ShowUserActionsOnInbasketListEnabled = true 
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.SecurityConfigurationEnabled)
       					ConfigurableFeatures.SecurityConfigurationEnabled = true 
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.ConfigurationEnabled)
       					ConfigurableFeatures.ConfigurationEnabled = true
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.PersonalizationEnabled)
       					ConfigurableFeatures.PersonalizationEnabled = true    
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.LimitedListPersonalizationEnabled)
       					ConfigurableFeatures.LimitedListPersonalizationEnabled = true    
       					
       				if (each.ActorRole.Role.DataAreaConfigurableFeatures.LimitedFormPersonalizationEnabled)
       					ConfigurableFeatures.LimitedFormPersonalizationEnabled = true           					       					       					        					       					       					       					 
 
        			if (each.ActorRole.Role.DataAreaConfigurableFeatures.LandingPagePersonalizationEnabled)
       					ConfigurableFeatures.LandingPagePersonalizationEnabled = true       				
       					 
        			if (each.ActorRole.Role.DataAreaConfigurableFeatures.ChangePreferredApplicationStartPageEnabled)
       					ConfigurableFeatures.ChangePreferredApplicationStartPageEnabled = true

        			if (each.ActorRole.Role.DataAreaConfigurableFeatures.ShowAllScheduleActionsEnabled)
       					ConfigurableFeatures.ShowAllScheduleActionsEnabled = true   
       					  				
        			if (each.ActorRole.Role.DataAreaConfigurableFeatures.SharingReportsAndFoldersEnabled)
       					ConfigurableFeatures.SharingReportsAndFoldersEnabled = true  
        					  				
        			if (each.ActorRole.Role.DataAreaConfigurableFeatures.SpreadSheetDesignerEnabled)
       					ConfigurableFeatures.SpreadSheetDesignerEnabled = true         					      					  				
      					      					  				
        			if (each.ActorRole.Role.DataAreaConfigurableFeatures.SpreasheetDesignerUpdateEnabled)
       					ConfigurableFeatures.SpreasheetDesignerUpdateEnabled = true  

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideMenuPrintFiles)
                        LocalHideMenuPrintFiles = false

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideMenuNotifications)
                        LocalHideMenuNotifications = false

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideMenuInbasket)
                        LocalHideMenuInbasket = false

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideMenuJobs)
                        LocalHideMenuJobs = false

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideMenuReports)
                        LocalHideMenuReports = false

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideMenuActions)
                        LocalHideMenuActions = false

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideMenuSearch)
                        LocalHideMenuSearch = false

                    if (each.ActorRole.Role.DataAreaConfigurableFeatures.ShowDeletedRecords)
                        ConfigurableFeatures.ShowDeletedRecords = true

                    if (each.ActorRole.Role.DataAreaConfigurableFeatures.ShowArchive)
						ConfigurableFeatures.ShowArchive = true					

                    if (each.ActorRole.Role.DataAreaConfigurableFeatures.SavedSearchesEnabled)
                        ConfigurableFeatures.SavedSearchesEnabled = true

					if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideDeliveredReports)
						LocalHideDeliveredReports = false

                    if (!each.ActorRole.Role.DataAreaConfigurableFeatures.HideSearchFieldOptions)
                        LocalHideSearchFieldOptions = false

                    if (each.ActorRole.Role.DataAreaConfigurableFeatures.AIAssistedRichTextEnabled)
                        ConfigurableFeatures.AIAssistedRichTextEnabled = true

                    if (each.ActorRole.Role.DataAreaConfigurableFeatures.DrillAroundEnabled)
                        ConfigurableFeatures.DrillAroundEnabled = true

                ConfigurableFeatures.HideMenuPrintFiles         = LocalHideMenuPrintFiles
                ConfigurableFeatures.HideMenuNotifications      = LocalHideMenuNotifications
                ConfigurableFeatures.HideMenuInbasket           = LocalHideMenuInbasket
                ConfigurableFeatures.HideMenuJobs               = LocalHideMenuJobs
                ConfigurableFeatures.HideMenuReports            = LocalHideMenuReports
                ConfigurableFeatures.HideMenuActions            = LocalHideMenuActions
                ConfigurableFeatures.HideMenuSearch             = LocalHideMenuSearch
                ConfigurableFeatures.HideSearchFieldOptions     = LocalHideSearchFieldOptions
                ConfigurableFeatures.HideDeliveredReports     	= LocalHideDeliveredReports

       			ConfigurableFeaturesChecked = true
       			ConfigurableFeaturesCalculated = 1	
       			
		SecUserMasterBOD is a NativeField	
			type is Text
			default label is "SecurityUserMasterBOD"	
		
		SecUserMasterBODXml is a DerivedField
			type is XMLDocument
			default label is "SecurityUserMasterBODXml"
			return SecUserMasterBOD
				
		IsSecIFSUserProvEnabled is a NativeField
			type is Boolean
			default label is "SecurityIFS_UserProvisioningEnabled"
				
		InforMingleCreateLabel is a LabelField 
			"InforMing.\leCreate"
		
		PrimaryServiceName is a NativeField
			type is Text
					
		UserBODConfig is a NativeField
			type is Text
			
		IsValidMingleId is a NativeField
			type is Boolean
			default label is "ValidMing.\leID"
		
		IsServerOnCloud is a NativeField
			type is Boolean
			default label is "ServerOnCloud"
			
		CaseInsensitiveActorExist is a NativeField
			type is Boolean
			default label is "CaseInsensitiveActorExist"
			
		LogicalId is a NativeField
			type is Alpha size up to 250		
		
		ActorTypeUpdated is a MessageField
			"ActorTypeUpdated"


	Local Fields
	    LocalTemplate                   is an ActorContextTemplate
		ConfigurableFeatures
		ConfigurableFeaturesChecked 	is Boolean
		EUEntityId						is Alpha 40	
		EUIdentity						is Alpha size 100
		EUAPICallResp					is JSONObject
		EUAPICallStatus					is Alpha 10	
		EUAPICallRespNode				is Alpha 1000
        LocalHideMenuPrintFiles         is Boolean
        LocalHideMenuNotifications      is Boolean
        LocalHideMenuInbasket           is Boolean
        LocalHideMenuJobs               is Boolean
        LocalHideMenuReports            is Boolean
        LocalHideMenuActions            is Boolean
        LocalHideMenuSearch             is Boolean
        LocalHideSearchFieldOptions     is Boolean
        LocalHideDeliveredReports		is Boolean

    Conditions
        HasCreatedFor
			default label is "CreatedBusinessObjectReferenceEntered"
            when ( CreatedFor.BusinessClassName entered or CreatedFor.BusinessObjectKey entered)
		EmailValidationRequired
			when ( (ContactInfo.EmailAddress entered and !ContactInfo.EmailAddressVerified)
				or (ContactInfo.AlternateEmail entered and !ContactInfo.AlternateEmailVerified) )
        EmailAddressEntered
            when (ContactInfo.EmailAddress entered)

		IsConfigurableFeaturesEnabled
			default label is "ConfigurableFeaturesEnabled"
			when (ConfigurableFeaturesConfigParamExists
			and  (ConfigurableFeaturesChecked or ConfigurableFeaturesCalculated > 0))
				
		ConfigurableFeaturesConfigParamExists
			when (config.configurablefeaturesenabled = "true")


    	IsExportToCSVEnabled
			default label is "ExportToCSVEnabled"
    		when (IsConfigurableFeaturesEnabled
    			and ConfigurableFeatures.ExportToCSVEnabled)

		IsMultiThreadedCSVEnabled
			default label is "MultithreadedExportToCSV"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.ExportToCSVMultithreadingEnabled)

		IsExportToPDFEnabled
			default label is "ExportToPDFEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.ExportToPDFEnabled)

		IsShowInbasketWorkFlowActionsEnabled
			default label is "ShowInbasketWorkFlowActionsEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.ShowUserActionsOnInbasketListEnabled)

		IsCreateReportEnabled
			default label is "CreateReportEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.CreateReportEnabled)

		IsCreateFolderEnabled
			default label is "CreateFolderEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.CreateFolderEnabled)

		IsAsOfDateEnabled
			default label is "AsOfDateEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.AsOfDateEnabled)

		IsDataMenuEnabled
			default label is "DataMenuEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.DataMenuEnabled)

		IsUserContextMenuEnabled
			default label is "UserContextMenuEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.UserContextMenuEnabled)

		IsCreateWatchAndAlertEnabled
			default label is "CreateWatchAndAlertEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.CreateWatchAndAlertEnabled)

		IsConfigurationEnabled
			default label is "ConfigurationEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.ConfigurationEnabled)

		IsPersonalizationEnabled
			default label is "PersonalizationEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.PersonalizationEnabled)

		IsLimitedListPersonalizationEnabled
			default label is "LimitedFormPersonalizationEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.LimitedListPersonalizationEnabled)

		IsLimitedFormPersonalizationEnabled
			default label is "LimitedFormPersonalizationEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.LimitedFormPersonalizationEnabled)

		IsSecurityConfigurationEnabled
			default label is "SecurityConfigurationEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.SecurityConfigurationEnabled)

		IsLandingPagePersonalizationEnabled
			default label is "LandingPagePersonalizationEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.LandingPagePersonalizationEnabled)

		IsChangePreferredApplicationStartPageEnabled
			default label is "ChangePreferredApplicationStartPageEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.ChangePreferredApplicationStartPageEnabled)

		IsAllActorGroupsEnabled
			default label is "AllActorGroupsEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.SharingReportsAndFoldersEnabled)

        IsShowDeletedRecordsEnabled
            default label is "ShowDeletedAndFutureRecords"
            when (IsConfigurableFeaturesEnabled
                and ConfigurableFeatures.ShowDeletedRecords)

        IsSavedSearchesEnabled
            default label is "SavedSearchesEnabled"
            when (IsConfigurableFeaturesEnabled
                and ConfigurableFeatures.SavedSearchesEnabled)

        IsDeliveredReportsHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideDeliveredReports)

        DisplayAIAssistedRichText
            default label is "AIAssistedRichTextEnabled"
            when (ConfigurableFeaturesConfigParamExists
                and   config.AIEnabled = "true")

        IsAIAssistedRichTextEnabled
            default label is "AIAssistedRichTextEnabled"
            when (IsConfigurableFeaturesEnabled
                and ConfigurableFeatures.AIAssistedRichTextEnabled)

        ShowDrillAroundEnabled
            default label is "EnableDrillAround"
            when (ConfigurableFeaturesConfigParamExists
                and   config.DrillAroundEnabled = "true")

        IsDrillAroundEnabled
            default label is "EnableDrillAround"
            when (IsConfigurableFeaturesEnabled
                and ConfigurableFeatures.DrillAroundEnabled)

        HideSearchFieldOptions
            default label is "HideSearchFieldOptions"
            when (IsConfigurableFeaturesEnabled
                and ConfigurableFeatures.HideSearchFieldOptions)

		IsAllScheduledActionsEnabled
			default label is "AllScheduledActionsEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.ShowAllScheduleActionsEnabled)

		IsSpreadSheetDesignerEnabled
			default label is "SpreadsheetDesignerEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.SpreadSheetDesignerEnabled)

		IsSpreasheetDesignerUpdateEnabled
			default label is "SpreadsheetDesignerUpdateEnabled"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.SpreasheetDesignerUpdateEnabled)

		EnableBirstModel
			restricted
			when (EnableBirstModelRel exists 
			and EnableBirstModelRel.Value = "true")
		
		MenuPrintFilesHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideMenuPrintFiles)

		MenuNotificationsHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideMenuNotifications)

		MenuInbasketHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideMenuInbasket)

		MenuJobsHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideMenuJobs)

		MenuReportsHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideMenuReports)

		MenuActionsHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideMenuActions)

		MenuSearchHidden
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.HideMenuSearch)

        ShowDeletedRecords
            when (IsConfigurableFeaturesEnabled
                and ConfigurableFeatures.ShowDeletedRecords)



		IsShowArchiveEnabled
			default label is "ShowArchive"
			when (IsConfigurableFeaturesEnabled
				and ConfigurableFeatures.ShowArchiveFeatureEnabled
				and ConfigurableFeatures.ShowArchive)



		IsAnonymous
			default label is "Anonymous"
		    when (actor = "Anonymous")

		SendBODEnabled
			when (IsSecIFSUserProvEnabled 
			and IsMingleUser 
			and not IsAckBodReq  
			and not IsActorDisabled
			and (not IsServerOnCloud or (IsServerOnCloud and not com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(Actor, "lawson"))) )

		ShowNewFrameworkApps		
			when (NewFrameworkAppsRel exists)

    Sets
        CreatedForSet
            indexed
            no duplicates
            Instance Selection
                where ( HasCreatedFor )
            Sort Order
                CreatedFor.BusinessClassName
                CreatedFor.BusinessObjectKey

        LastNameSet
        	indexed
        	no duplicates
        	Sort Order
        		PersonName.FamilyName
        		PersonName.GivenName
        		Actor

        EmailAddressSet
            sql name is "ActorByEmailAddress"
            indexed
            no duplicates
            Sort Order
                ContactInfo.EmailAddress
                Actor
            Instance Selection
                where (EmailAddressEntered)

	Relations
		ActorContextTemplateDetailRel
			one-to-many relation to ActorContextTemplateDetail
			Field Mapping uses symbolic key
				related.ActorContextTemplate     = LocalTemplate

		ActorIdentityRel
            one-to-many relation to Identity
            Field Mapping uses symbolic key
				related.Service = Service
                related.Identity = Identity
                
		ActorServiceRel
			one-to-many relation to Service
			Field Mapping uses symbolic key
				related.Service = Service
				
		RoleRel	is a Role set

		ContextActorGroupMemberRel
			one-to-one relation to ActorGroupMember
				Field Mapping uses part of key
					related.ActorGroup = ActorGroupContextField
					related.Actor = Actor

		ConfigurableFeaturesRel
			one-to-many relation to ActorRole
			delete cascades
			Field Mapping uses symbolic key
				related.Actor = Actor

 		ConfigurableFeaturesEnabledRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ConfigurationParameter.ConfigurationID = "config"
				and    related.ConfigurationParameter.Name = "configurablefeaturesenabled"
				and    related.Value = "true")

 		EnableBirstModelRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "Analytics"
				related.ConfigurationParameter.Name				= "EnableBirstModel"

 		IdentityActorPrimaryRel
            one-to-many relation to IdentityActor
            Field Mapping uses BySvcActIdent
            	related.Service = PrimaryServiceName
            	related.Actor = Actor
		
		ActorActorProxyRel
            one-to-many relation to ActorProxy
            Field Mapping uses ByGrantee
            	related.ActorProxy.Grantee = Actor

		NewFrameworkAppsRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "EnableNewFrameworkApps"	
			Instance Selection
				where (related.ConfigurationParameter.Value = "true")

	Audit Entry Rules
	    if (IsSecIFSUserProvEnabled
	    and IsMingleUser
	    and not IsActorDisabled
	    and not audit period.Future
	    and not action tag.IFS
	    and (not IsAckBodReq or (IsAckBodReq and action = "MingleCreate"))
	    and (not IsServerOnCloud or (IsServerOnCloud and not com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(Actor, "lawson")))
	    and (ContactInfo.EmailAddress changed 
	    or  PersonName.GivenName changed 
	    or  PersonName.FamilyName changed 
	    or  MingleId changed 
	    or  action type.Create))
			if (config.imsuserbod = true)
				send ion bod
					bod is SecUserMasterBODXml
					bod type is "Process.SecurityUserMaster"
			else
				invoke Create IONOutboxQueue
					invoked.BodXML = SecUserMasterBOD
					invoked.BodType = "Process.SecurityUserMaster"
					invoked.FromLogicalId = LogicalId
	
	Apply Pending Effective Rules
	    if (IsSecIFSUserProvEnabled
	    and IsMingleUser
	    and not IsActorDisabled
	    and not action tag.IFS
	    and (not IsAckBodReq or (IsAckBodReq and action = "MingleCreate"))
	    and (not IsServerOnCloud or (IsServerOnCloud and not com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(Actor, "lawson")))
	    and (ContactInfo.EmailAddress changed
		or  PersonName.GivenName changed
		or  PersonName.FamilyName changed
		or  MingleId changed
		or  action type.Create)
		and not action tag.IFS)
			if (config.imsuserbod = true)
				send ion bod
					bod is SecUserMasterBODXml
					bod type is "Process.SecurityUserMaster"
			else
				invoke Create IONOutboxQueue
					invoked.BodXML = SecUserMasterBOD
					invoked.BodType = "Process.SecurityUserMaster"
					invoked.FromLogicalId = LogicalId
	
	Rule Blocks
		Add_ActorType
			ActorType.Type = com.lawson.apps.security.base.BitOperator_ActionBase.or(ActorType.Type, {val})
			
		Remove_ActorType
			ActorType.Type = com.lawson.apps.security.base.BitOperator_ActionBase.xor(ActorType.Type, {val})

		Toggle_ActorType
			if ({cur_val} =	true )
				include Remove_ActorType
					replace val with {val}
			else
				include Add_ActorType
					replace val with {val}
    Actions
        Create is a Create Action
        	allow anonymous access
        	Action Rules
        		constraint (Actor not matches ".*\s.*")
   					"InvalidCharacterIn_Actor"
        		if ( (ContactInfo.EmailAddress != "") and (EmailMessage != "") )
        			send email
        				to ContactInfo.EmailAddress
        				from "LawsonAdmin"
        				subject "ValidateEmailAddressRequired"
        				Contents
        					"<EmailMessage>"
        		if ( (ContactInfo.AlternateEmail != "") and (AlternateEmailMessage != "") )
        			send email
        				to ContactInfo.AlternateEmail
        				from "LawsonAdmin"
        				subject "ValidateAlternateEmailAddressRequired"
        				Contents
        					"<AlternateEmailMessage>"

        CreateActorContextForAllActors is a Set Action
			Parameters
		        ActorContextTemplate
				ParamDuplicateHandling  is Boolean
				    default label is "DuplicateHandling"

			Action Rules
				Instance Rules
				    LocalTemplate = ActorContextTemplate
                    for each ActorContextTemplateDetailRel
                        invoke CreateActorContext each
                            invoked.ParamActor  = Actor
                            invoked.DuplicateHandling   = ParamDuplicateHandling

        MingleCreate is a Create Action
         	default label is "InforMingleCreate"			
         	valid when (IsSecIFSUserProvEnabled)			

        	Action Rules
        		constraint (Actor not matches ".*\s.*")
   					"InvalidCharacterIn_Actor"
        		if (UserBODConfig = "Default")
        			constraint (ContactInfo.EmailAddress entered)
        				"EmailAddressIsRequired"
        		if (UserBODConfig = "IFSCE")
        			constraint (MingleId entered)
        				"Ming.\leIdIsRequired"
        			constraint (IsValidMingleId)
        				"InvalidCharactersIn_Ming.\leId"
        		if (UserBODConfig = "IFSOnPrem")
        			constraint (MingleId entered)
        				"Ming.\leIdIsRequired"
        		constraint (!CaseInsensitiveActorExist)
					"ActorAlreadyExists"
        		if ( (ContactInfo.EmailAddress != "") and (EmailMessage != "") )
        			send email
        				to ContactInfo.EmailAddress
        				from "LawsonAdmin"
        				subject "ValidateEmailAddressRequired"
        				Contents
        					"<EmailMessage>"
        		if ( (ContactInfo.AlternateEmail != "") and (AlternateEmailMessage != "") )
        			send email
        				to ContactInfo.AlternateEmail
        				from "LawsonAdmin"
        				subject "ValidateAlternateEmailAddressRequired"
        				Contents
        					"<AlternateEmailMessage>"

        		IsMingleUser = true
				IsAckBodReq = true
				      							
        Delete is a Delete Action
			Entrance Rules
				constraint (Actor!="Anonymous")
        			"CannotDeleteAnonymousActor." 
				constraint (Actor!="lawson")
        			"CannotDeleteLawsonActor." 

				invoke Delete ActorGroupMember set

        CompleteActorDelete is a Delete Action
        	Local Fields
        		EUService			is a Service
        		
        	Entrance Rules
        	    constraint (Actor!="Anonymous")
        			"CannotDeleteAnonymousActor." 
				constraint (Actor!="lawson")
        			"CannotDeleteLawsonActor." 
        	
	        	if (not IsMingleUser)
        			EUEntityId = ""
        				
        			for each IdentityActor set
        				if (each.Service.HasExternalEntityIdValue)
        					EUService = each.Service
        					EUEntityId = first EUService.ServicePropertyEntityCodeRel.PropertyValue
        					EUIdentity =  each.Identity.FormBasedIdentityProperties.User
        					
        					end for each
									       	
				invoke Delete ActorGroupMember set
				
				invoke DeleteActorAppData 
					invoked.Actor = Actor
					
        		for each IdentityActor set
        			if (instance count of each.Identity.IdentityActor set = 1)
        				invoke Delete each.Identity
		      		else
		      			invoke Delete each
		      			
			Exit Rules
				if (not IsMingleUser and EUEntityId != blank and EUIdentity != blank)
    				invoke DeleteUser ExternalUserExecutor
						resume on error
						assign result to EUAPICallResp 
	
						invoked.EntityId = EUEntityId					
						invoked.UserIdentity = EUIdentity				
				
 	   	DeleteActor is an Instance Action
 	   		default label is "DeleteActorIdentity"
 	   		
        	Entrance Rules
 	        	if (not IsMingleUser)
        			EUEntityId = ""
        				
        			for each IdentityActor set
        			
        				for each each.Service.ServicePropertyEntityCodeRel
        					if (each.PropertyValue != blank)
        						EUEntityId = each.PropertyValue
        				
        				if (EUEntityId not = blank)
	        				invoke DisableUser ExternalUserExecutor
								resume on error
								assign result to EUAPICallResp 
			
								invoked.EntityId = EUEntityId					
								invoked.UserIdentity = each.Identity.FormBasedIdentityProperties.User	  
								invoked.IdentifierId = "PrimaryEmail"   
								invoked.IdentifierValue = ContactInfo.EmailAddress    
								
							EUAPICallStatus = EUAPICallResp select "$.responsestatus"
							if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(EUAPICallStatus, "Failure"))
								EUAPICallRespNode = EUAPICallResp select "$..errorlist[0].text"
								
								constraint (false)
									"FailedToDisableExternalUser.<EUAPICallRespNode>"
									        	 	   		
	     	Action Rules
	     	    constraint (Actor!="Anonymous")
        			"CannotDeleteAnonymousActor." 
				constraint (Actor!="lawson")
        			"CannotDeleteLawsonActor." 
	     	
     			for each IdentityActor set
	     			if (instance count of each.Identity.IdentityActor set = 1)
		     			invoke Delete each.Identity
		     		else
		     			invoke Delete each
	   			IsActorDisabled = true
				
	   	DeleteActorAppData is an Instance Action
	   		Entrance Rules
	   			Actor = Actor
	     	Parameters
	     		Actor
	     	Parameter Rules
				Actor required
			Action Rules
				for each ActorContext set
					invoke Delete each
				for each ActorInterfacePreference set
					invoke Delete each
				for each ActorAppInterfacePreference set
					invoke Delete each
				for each ParentAgent set
					invoke Update each
						invoked.Actor = blank

        PurgeActor is a Purge Action
        	Local Fields
        		EUService			is a Service
        		
        	Entrance Rules
        		constraint (Actor!="Anonymous")
        			"CannotPurgeAnonymousActor." 
				constraint (Actor!="lawson")
        			"CannotPurgeLawsonActor." 
	
	        	if (not IsMingleUser)
        			EUEntityId = ""
        				
        			for each IdentityActor set
        				if (each.Service.HasExternalEntityIdValue)
        					EUService = each.Service
        					EUEntityId = first EUService.ServicePropertyEntityCodeRel.PropertyValue
        					EUIdentity =  each.Identity.FormBasedIdentityProperties.User
        					
        					end for each
		      			      						 
 				invoke Purge ActorGroupMember set
				
				for each IdentityActor set
        			if (instance count of each.Identity.IdentityActor set = 1)
        				invoke Purge each.Identity
		      		else
		      			invoke Purge each
		      			
		      	for each ActorActorProxyRel 
		      		invoke Purge each
		      				
		      	for each ActorContext set
					invoke Purge each
					
				for each ActorInterfacePreference set
					invoke Purge each
					
				for each ActorAppInterfacePreference set
					invoke Purge each
					
				for each ParentAgent set
					invoke Update each
						invoked.Actor = blank
						
			Exit Rules
				if (not IsMingleUser and EUEntityId != blank and EUIdentity != blank)
    				invoke DeleteUser ExternalUserExecutor
						resume on error
						assign result to EUAPICallResp 
	
						invoked.EntityId = EUEntityId					
						invoked.UserIdentity = EUIdentity	  					
		      			
	   	DisableActor is an Instance Action
        	Entrance Rules
 	        	if (not IsMingleUser)
        			EUEntityId = ""
        				
        			for each IdentityActor set
        			
        				for each each.Service.ServicePropertyEntityCodeRel
        					if (each.PropertyValue != blank)
        						EUEntityId = each.PropertyValue
        				
        				if (EUEntityId not = blank)
	        				invoke DisableUser ExternalUserExecutor
								resume on error
								assign result to EUAPICallResp 
			
								invoked.EntityId = EUEntityId					
								invoked.UserIdentity = each.Identity.FormBasedIdentityProperties.User	  
								invoked.IdentifierId = "PrimaryEmail"   
								invoked.IdentifierValue = ContactInfo.EmailAddress    
								
							EUAPICallStatus = EUAPICallResp select "$.responsestatus"
							if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(EUAPICallStatus, "Failure"))
								EUAPICallRespNode = EUAPICallResp select "$..errorlist[0].text"
								
								constraint (false)
									"FailedToDisableExternalUser.<EUAPICallRespNode>"
									
	   		Action Rules
	   			IsActorDisabled = true

       	EnableActor is an Instance Action
        	Entrance Rules
 	        	if (not IsMingleUser)
        			EUEntityId = ""
        				
        			for each IdentityActor set
        			
        				for each each.Service.ServicePropertyEntityCodeRel
        					if (each.PropertyValue != blank)
        						EUEntityId = each.PropertyValue
        				
        				if (EUEntityId not = blank)
	        				invoke EnableUser ExternalUserExecutor
								resume on error
								assign result to EUAPICallResp 
			
								invoked.EntityId = EUEntityId					
								invoked.UserIdentity = each.Identity.FormBasedIdentityProperties.User	  
								invoked.IdentifierId = "PrimaryEmail"   
								invoked.IdentifierValue = ContactInfo.EmailAddress    
								
							EUAPICallStatus = EUAPICallResp select "$.responsestatus"
							if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(EUAPICallStatus, "Failure"))
								EUAPICallRespNode = EUAPICallResp select "$..errorlist[0].text"
								
								constraint (false)
									"FailedToEnableExternalUser.<EUAPICallRespNode>"
									
	   		Action Rules
	   			IsActorDisabled = false

        Update is an Update Action
        	Action Rules
				if (IsSecIFSUserProvEnabled and IsMingleUser)
					if (UserBODConfig = "Default")
        				constraint (ContactInfo.EmailAddress entered)
        					"EmailAddressIsRequired"
        			if (UserBODConfig = "IFSCE")
        				constraint (MingleId entered)
        					"Ming.\leIdIsRequired"
        				constraint (IsValidMingleId)
        					"InvalidCharactersIn_Ming.\leId"
        			if (UserBODConfig = "IFSOnPrem")
        				constraint (MingleId entered)
        					"Ming.\leIdIsRequired"

		SendBODForActor is an Instance Action
			valid when (SendBODEnabled)
        	Action Rules
				if (UserBODConfig = "Default")
    				constraint (ContactInfo.EmailAddress entered)
    					"EmailAddressIsRequired"
    			if (UserBODConfig = "IFSCE")
    				constraint (MingleId entered)
    					"Ming.\leIdIsRequired"
    				constraint (IsValidMingleId)
    					"InvalidCharactersIn_Ming.\leId"
    			if (UserBODConfig = "IFSOnPrem")
    				constraint (MingleId entered)
    					"Ming.\leIdIsRequired"	
		        				        				
        ValidateEmail is an Instance Action
        	Entrance Rules
        		Actor = actor

        	Local Fields
        		IsPrimaryEmail is Boolean

			completion message is "EmailValidationSuccessful"
			valid when ( EmailValidationRequired )
        	Action Rules
        		if ( IsPrimaryEmail )
        			send email
        				to ContactInfo.EmailAddress
        				from "LawsonAdmin"
        				subject "EmailValidationSuccessful"
        				Contents
        					"YourEmailAddressHasBeenValidated"
        		else
        			send email
        				to ContactInfo.AlternateEmail
        				from "LawsonAdmin"
        				subject "EmailValidationSuccessful"
        				Contents
        					"YourAlternateEmailHasBeenValidated"

		CreateUserWizard is a Create Action




			Field Rules
				Actor
	        		constraint (Actor not matches ".*\s.*")
	   					"InvalidCharacterIn_Actor"	
				Identity
					required
				Password
					required
				NewPassword
					required
				SSODomain
					required
			Exit Rules



					Service = SSODomain.PrimaryService



				if (Identity entered)
	                invoke Create Identity
	                	if (Service.ServiceType = "FormBased")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateFormBasedIdentityKey(Actor)
	                    	invoked.FormBasedIdentityProperties.User = Actor
	                    	invoked.FormBasedIdentityProperties.Password = Password
	                	if (Service.ServiceType = "Windows")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateWindowsIdentityKey(Actor)
	                		invoked.WindowsIdentityProperties.SID = Actor
	                		invoked.WindowsIdentityProperties.Password = Password
	                	if (Service.ServiceType = "Unix")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateUnixIdentityKey(Actor)
	                		invoked.UnixIdentityProperties.Login = Actor
	                		invoked.UnixIdentityProperties.Password = Password
	                	if (Service.ServiceType = "Database")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateDatabaseIdentityKey(Actor)
	                		invoked.DatabaseIdentityProperties.DatabaseLoginName = Actor
	                		invoked.DatabaseIdentityProperties.Password = Password
	                	if (Service.ServiceType = "MISocket")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateMISocketIdentityKey(Actor)
	                    	invoked.MISocketIdentityProperties.MIUser = Actor
	                    	invoked.MISocketIdentityProperties.Password = Password
	                	if (Service.ServiceType = "AS400")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateAS400IdentityKey(Actor)
	                    	invoked.AS400IdentityProperties.UserID = Actor
	                    	invoked.AS400IdentityProperties.Password = Password
	                    invoked.Service = Service
	                    invoked.ServiceType = Service.ServiceType
					invoke Create IdentityActor
	                	if (Service.ServiceType = "FormBased")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateFormBasedIdentityKey(Actor)
	                	if (Service.ServiceType = "Windows")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateWindowsIdentityKey(Actor)
	                	if (Service.ServiceType = "Unix")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateUnixIdentityKey(Actor)
	                	if (Service.ServiceType = "Database")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateDatabaseIdentityKey(Actor)
	                	if (Service.ServiceType = "MISocket")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateMISocketIdentityKey(Actor)
	                	if (Service.ServiceType = "AS400")
	                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateAS400IdentityKey(Actor)
	                	invoked.Service = Service
	                	invoked.Actor = Actor
				constraint(Password = NewPassword)
					"PasswordsDoNotMatch"
					
		CreateNewIdentityForActor is an Instance Action
			Parameters
				Service
				Identity is Alpha 200
				Password is Password
			Parameter Rules
				Service
					required
				Identity
					required
				Password
					required

			Action Rules
				invoke Create Identity
                	if (Service.ServiceType = "FormBased")
                		invoked.Service = Service
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateFormBasedIdentityKey(Identity)
                    	invoked.FormBasedIdentityProperties.User = Identity
                    	invoked.FormBasedIdentityProperties.Password = Password
                	if (Service.ServiceType = "Windows")
                		invoked.Service = Service
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateWindowsIdentityKey(Identity)
                		invoked.WindowsIdentityProperties.SID = Identity
                		invoked.WindowsIdentityProperties.Password = Password
                	if (Service.ServiceType = "Unix")
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateUnixIdentityKey(Identity)
                		invoked.UnixIdentityProperties.Login = Identity
                		invoked.UnixIdentityProperties.Password = Password
                	if (Service.ServiceType = "Database")
                		invoked.Service = Service
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateDatabaseIdentityKey(Identity)
                		invoked.DatabaseIdentityProperties.DatabaseLoginName = Identity
                		invoked.DatabaseIdentityProperties.Password = Password
                	if (Service.ServiceType = "MISocket")
                		invoked.Service = Service
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateMISocketIdentityKey(Identity)
                    	invoked.MISocketIdentityProperties.MIUser = Identity
                    	invoked.MISocketIdentityProperties.Password = Password
                	if (Service.ServiceType = "AS400")
                		invoked.Service = Service
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateAS400IdentityKey(Identity)
                    	invoked.AS400IdentityProperties.UserID = Identity
                    	invoked.AS400IdentityProperties.Password = Password
	                invoked.Service = Service
	                invoked.ServiceType = Service.ServiceType
				invoke Create IdentityActor
                	if (Service.ServiceType = "FormBased")
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateFormBasedIdentityKey(Identity)
                	if (Service.ServiceType = "Windows")
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateWindowsIdentityKey(Identity)
                	if (Service.ServiceType = "Unix")
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateUnixIdentityKey(Identity)
                	if (Service.ServiceType = "Database")
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateDatabaseIdentityKey(Identity)
                	if (Service.ServiceType = "MISocket")
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateMISocketIdentityKey(Identity)
                	if (Service.ServiceType = "AS400")
                    	invoked.Identity = com.lawson.apps.security.base.Identity_ActionBase.generateAS400IdentityKey(Identity)
                	invoked.Service = Service
                	invoked.Actor = Actor

        AssignExistingIdentityToActor is an Instance Action
			Parameters
				Actor
				Service
				Identity
			Parameter Rules
				Service
					required
				Identity
					required
			Action Rules
				invoke Create IdentityActor
					invoked.Identity = Identity
                	invoked.Service = Service
                	invoked.Actor = Actor

        CreateNewRoleForActor is an Instance Action
        	Parameters
        		Role is Alpha size 80
        		Description is a LSDescription
			Parameter Rules
				Role
					required
			Action Rules
				invoke Create Role
					invoked.Role = Role
					invoked.Description = Description
				invoke Create ActorRole
					invoked.Actor = Actor
					invoked.ActorRole.Role = Role

		AssignRoleToActor is an Instance Action
			Parameters
				Actor
				Role
			Parameter Rules
				Role
					required
			Action Rules
				invoke Create ActorRole
					invoked.Actor = Actor
					invoked.ActorRole.Role = Role
				
		AddActorToActorGroup is an Instance Action

			Parameters
				ActorGroup

			Action Rules
				invoke Create ActorGroupMember
					fill in fields from this instance
					invoked.ActorGroup = ActorGroup

		ViewFullSummary is an Update Action






























































		
		SendBODForAllActors is a Set Action
			valid when (IsSecIFSUserProvEnabled)
			
			Instance Selection
					where (!IsActorDisabled and IdentityActorPrimaryRel exist)
				
			Action Rules
				Instance Rules
					if(SetMingleUserFlag)
						IsMingleUser = true

		SystemUser_CheckChanged is an Instance Action
			default label is "_"
			completion message is "<ActorTypeUpdated>"
			restricted
			Action Rules
				include Toggle_ActorType
					replace cur_val with AT_SystemUser
					replace val with ActorType.Type.SystemUser
		
		DataControlUser_CheckChanged is an Instance Action
			default label is "_"
			completion message is "<ActorTypeUpdated>"
			restricted
			Action Rules
				include Toggle_ActorType
					replace cur_val with AT_DataControlUser
					replace val with ActorType.Type.DataControlUser

		ServiceUser_CheckChanged is an Instance Action
			default label is "_"
			completion message is "<ActorTypeUpdated>"
			restricted
			Action Rules
				include Toggle_ActorType
					replace cur_val with AT_ServiceUser
					replace val with ActorType.Type.ServiceUser
		
		Approver_CheckChanged is an Instance Action
			default label is "_"
			completion message is "<ActorTypeUpdated>"
			restricted
			Action Rules
				include Toggle_ActorType
					replace cur_val with AT_Approver
					replace val with ActorType.Type.Approver
