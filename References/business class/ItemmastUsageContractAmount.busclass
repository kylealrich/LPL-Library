ItemmastUsageContractAmount is a BusinessClass
    owned by procurement
    prefix is IUCAt

	Ontology
		symbolic key is ItemmastUsageContractAmount
		
	Patterns
		implements DynamicCreation
		implements ContextualParent

	Persistent Fields
		ContractAmount						is an InternationalAmount
		BaseCost							is an InternationalCost
		TierAchieved						is AlphaUpper size 4
		TierUnitCost						is an InternationalCost
		RebatePercent						is Decimal 6.3
		RebateAmount						is an InternationalAmount	
		PercentOfUsage						is Percent 3
		OriginalPercentOfUsage				is Percent 3
		Quantity	
		GrossAmount							is an InternationalAmount	
		PeriodForecastArray					is a UsageQuantityAmountArray
		RunningTotalAmount					is an InternationalAmount
		RunningTotalRebate					is an InternationalAmount
		RunningTotalPeriod					is Numeric 2
		
	Local Fields
		LocalAmount							is an InternationalAmount
		LocalQuantityToUse					is a Quantity
		LocalAmountForTier					is an InternationalAmount
		LocalQuantityForTier				is a Quantity
		LocalLastTierQuantity				is a Quantity
		LocalContractAmount					is an InternationalAmount
		LocalPreviousTiersAmount			is an InternationalAmount
		LocalPreviousTierCost				is an InternationalCost
		LocalLastTierAchieved				is AlphaUpper 4
		LocalRebateContract					is Numeric 15
		LocalRebateAmount					is an InternationalAmount
		LocalHighestRebateAmount			is an InternationalAmount
		LocalTotalRebateAmount 				is an InternationalAmount
		LocalHighestRebatePercent			is Decimal 6.3
		LocalTotalRebatePercent				is Decimal 6.3
		LocalContractRebateType				is AlphaUpper 25
		LocalPeriodBeginDate				is Date
		
	Derived Fields
		DerivedRebatePercent is a ComputeField
			type is Decimal 5.1
			(RebatePercent	* 100)
			
		DerivedNetUnitCost is a DerivedField
			type is like InternationalCost
			if (Quantity not entered)
				return BaseCost
			else
				return (ContractAmount / Quantity)
			
		DerivedPeriod1Total is a DerivedField
			type is like InternationalAmount 
			return (PeriodForecastArray.UsageQuantityAmount[1].ContractAmount)
				
		DerivedPeriod2Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[2].ContractAmount)
				
		DerivedPeriod3Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[3].ContractAmount)
				
		DerivedPeriod4Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[4].ContractAmount)
				
		DerivedPeriod5Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[5].ContractAmount)
				
		DerivedPeriod6Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[6].ContractAmount)
				
		DerivedPeriod7Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[7].ContractAmount)
				
		DerivedPeriod8Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[8].ContractAmount)
				
		DerivedPeriod9Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[9].ContractAmount)
				
		DerivedPeriod10Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[10].ContractAmount)
				
		DerivedPeriod11Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[11].ContractAmount)
				
		DerivedPeriod12Total is a DerivedField
			type is like InternationalAmount
			return (PeriodForecastArray.UsageQuantityAmount[12].ContractAmount)
		
		DerivedRunningTotalPeriodBeginDate is a StringField
			type is Date
			PeriodForecastArray.UsageQuantityAmount[RunningTotalPeriod].PeriodBeginDate		
			
	Conditions	
		LowestContractAmount
			restricted
			when (PercentOfUsage						= ItemmastUsage.PercentOfUsage
			and   ContractAmount						= ItemmastUsage.DerivedMinimumContractAmount)
			
		HighestContractAmount
			restricted
			when (PercentOfUsage						= ItemmastUsage.PercentOfUsage
			and   ContractAmount						= ItemmastUsage.DerivedMaximumContractAmount)
			
		HasRebate
			restricted
			when (RebatePercent	> 0)
			
		Period1TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[1].TierAchieved	entered
			and   PeriodForecastArray.UsageQuantityAmount[1].RebateAmount	not entered)
			
		Period2TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[2].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[1].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[2].RebatePercent	not entered)
			
		Period3TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[3].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[2].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[3].RebatePercent	not entered)
			
		Period4TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[4].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[3].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[4].RebatePercent	not entered)
			
		Period5TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[5].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[4].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[5].RebatePercent	not entered)
			
		Period6TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[6].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[5].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[6].RebatePercent	not entered)
			
		Period7TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[7].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[6].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[7].RebatePercent	not entered)
			
		Period8TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[8].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[7].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[8].RebatePercent	not entered)
			
		Period9TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[9].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[8].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[9].RebatePercent	not entered)
			
		Period10TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[10].TierAchieved		!= PeriodForecastArray.UsageQuantityAmount[9].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[10].RebatePercent	not entered)
			
		Period11TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[11].TierAchieved		!= PeriodForecastArray.UsageQuantityAmount[10].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[11].RebatePercent	not entered)
			
		Period12TierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[12].TierAchieved		!= PeriodForecastArray.UsageQuantityAmount[11].TierAchieved
			and   PeriodForecastArray.UsageQuantityAmount[12].RebatePercent	not entered)
			
		Period1NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[1].RebateAmount	entered
			and   PeriodForecastArray.UsageQuantityAmount[1].TierAchieved	not entered)
			
		Period2NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[2].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[2].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[1].TierAchieved)
			
		Period3NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[3].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[3].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[2].TierAchieved)
			
		Period4NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[4].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[4].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[3].TierAchieved)
			
		Period5NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[5].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[5].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[4].TierAchieved)
			
		Period6NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[6].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[6].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[5].TierAchieved)
			
		Period7NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[7].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[7].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[6].TierAchieved)
			
		Period8NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[8].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[8].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[7].TierAchieved)
			
		Period9NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[9].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[9].TierAchieved	= PeriodForecastArray.UsageQuantityAmount[8].TierAchieved)
			
		Period10NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[10].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[10].TierAchieved		= PeriodForecastArray.UsageQuantityAmount[9].TierAchieved)
			
		Period11NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[11].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[11].TierAchieved		= PeriodForecastArray.UsageQuantityAmount[10].TierAchieved)
			
		Period12NewRebate
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[12].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[12].TierAchieved		= PeriodForecastArray.UsageQuantityAmount[11].TierAchieved)
			
		Period1NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[1].RebateAmount	entered
			and   PeriodForecastArray.UsageQuantityAmount[1].TierAchieved	entered)
			
		Period2NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[2].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[2].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[1].TierAchieved)
			
		Period3NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[3].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[3].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[2].TierAchieved)
			
		Period4NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[4].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[4].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[3].TierAchieved)

		Period5NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[5].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[5].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[4].TierAchieved)
			
		Period6NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[6].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[6].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[5].TierAchieved)
			
		Period7NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[7].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[7].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[6].TierAchieved)
			
		Period8NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[8].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[8].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[7].TierAchieved)
			
		Period9NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[9].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[9].TierAchieved	!= PeriodForecastArray.UsageQuantityAmount[8].TierAchieved)
			
		Period10NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[10].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[10].TierAchieved		!= PeriodForecastArray.UsageQuantityAmount[9].TierAchieved)
			
		Period11NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[11].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[11].TierAchieved		!= PeriodForecastArray.UsageQuantityAmount[10].TierAchieved)
			
		Period12NewRebateAndTierChange
			restricted
			when (PeriodForecastArray.UsageQuantityAmount[12].RebatePercent	entered
			and   PeriodForecastArray.UsageQuantityAmount[12].TierAchieved		!= PeriodForecastArray.UsageQuantityAmount[11].TierAchieved)
			
		ShowRunningTotal
			restricted
			when (RunningTotalPeriod entered
			and   RunningTotalPeriod < 12)
			
		ContractHasRebates
			restricted
			when (ContractRebatesRel exists)
			
	Relations
		ItemmastUsageContractLinesSameContractLineRel	is an ItemmastUsageContractAmount set
			Instance Selection
				where (related.ItemmastContractLine		= ItemmastContractLine
				and    related.ItemmastUsage			!= ItemmastUsage)
				
		ContractRebatesRel
			one-to-many relation to ContractRebate
			Field Mapping uses symbolic key
				related.ContractGroup			= ItemmastContractLine.ContractGroup
				related.Contract				= ItemmastContractLine.Contract
							
		ContractRebateQualifierItemsRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByRebateItem
				related.ContractGroup			= ItemmastContractLine.ContractGroup
				related.Contract				= ItemmastContractLine.Contract
				related.ContractRebateType	= LocalContractRebateType
				related.ItemNumber			= Item 
				
		ContractRebateDuesForRebateRel
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup			= ItemmastContractLine.ContractGroup
				related.Contract				= ItemmastContractLine.Contract
				related.ContractRebateType		= LocalContractRebateType
			Instance Selection
				where (related.ContractRebateDue	> LocalPeriodBeginDate)
				
	Sets
		ByItemmastUsage
			duplicates
			Sort Order
				Item
				ItemmastUsageDateRange.Begin
				ItemmastUsageDateRange.End
				ItemmastUsage.UsageQuantityType
				OriginalPercentOfUsage
				ItemmastUsage.Annualized
				
		ByContract
			duplicates
			Sort Order
				Contract
				ContractLine

		ByPercent
			duplicates
			Sort Order
				Item
				PercentOfUsage	descending
								
	Actions
		Create is a Create Action
			restricted
					
		Update is an Update Action
			Local Fields
				LocalPercent									is Percent 3
				LocalPercentOfUsage								is Percent 3
				LocalUsageAmount								is an InternationalAmount
				LocalAmount										is an InternationalAmount
				LocalQuantityToUse								is a Quantity
				LocalQuantityForTier							is a Quantity
				LocalLastTierQuantity							is a Quantity
				LocalPreviousTiersAmount						is an InternationalAmount
				LocalLastTierAchieved							is AlphaUpper 4
				LocalRebateContract								is Numeric 15
				LocalTotalRebateAmount							is an InternationalAmount
				LocalTotalRebatePercent							is Decimal 6.3
				LocalRebateAmount								is an InternationalAmount
				LocalHighestRebateAmount						is an InternationalAmount
				LocalHighestRebatePercent						is Decimal 6.3
				LocalYearToDateContractAmount					is an InternationalAmount
				LocalYearToDateGrossAmount						is an InternationalAmount
				LocalPeriodPreviousTierCost						is an InternationalCost
				LocalPeriodLastTierAchieved						is AlphaUpper 4
				LocalYearToDateTotalRebateAmount 				is an InternationalAmount
				LocalPeriodTotalRebatePercent					is Decimal 6.3
				LocalYearToDateUsageQuantity					is a Quantity
				LocalPeriodUsageArray							is a UsageQuantityAmountArray
				LocalPreviousPeriodYearToDateContractAmount		is an InternationalAmount
				LocalPreviousPeriodYearToDateGrossAmount		is an InternationalAmount
				LocalPreviousPeriodYearToDateTotalRebateAmount 	is an InternationalAmount
				LocalBaseCost									is an InternationalCost
				LocalHandoffPeriodUsageArray					is a UsageQuantityAmountArray
				LocalPreviousPercentOfUsage						is Percent 3
				LocalPeriod										is Numeric 2
				LocalGrossAmount								is an InternationalAmount
				LocalContractAmount								is an InternationalAmount
				LocalPeriodGrossAmount							is an InternationalAmount
				LocalRebateDueDate								is Date
				LocalRebateDueDateChange						is Boolean
				LocalPreviousRebateDuesAmount					is an InternationalAmount
				LocalContractRebateDueAmountArray				is a ContractRebateDueAmountArray
				LocalRebateDueTotalRebateAmount					is an InternationalAmount
				LocalRebateCount								is Numeric 1
				LocalTotalQuantityForTier						is a Quantity
				LocalRebatePeriodCount							is Numeric 2
				LocalYearToDateRebatePercent					is Decimal 6.3
				
			Action Rules
				if (PercentOfUsage		!= old PercentOfUsage)
					initialize LocalYearToDateContractAmount
					initialize LocalYearToDateUsageQuantity
					initialize LocalYearToDateRebatePercent
					initialize LocalPreviousPeriodYearToDateContractAmount
					initialize LocalPreviousPeriodYearToDateGrossAmount
					initialize LocalPreviousPeriodYearToDateTotalRebateAmount
					initialize LocalPreviousRebateDuesAmount
					initialize LocalPeriodUsageArray
					initialize LocalRebateDueDate
					initialize LocalRebatePeriodCount
					initialize LocalContractRebateDueAmountArray
					initialize LocalHandoffPeriodUsageArray
					initialize LocalPeriodLastTierAchieved
					initialize LocalAmount
					initialize LocalQuantityToUse
					initialize LocalPeriod
					for each PeriodForecastArray.UsageQuantityAmount
						LocalPeriod						+= 1
						LocalAmount						+= (each.UsageAmount	* PercentOfUsage / old PercentOfUsage)
						LocalYearToDateUsageQuantity	+= (each.UsageQuantity 	* PercentOfUsage / old PercentOfUsage)
						LocalQuantityToUse				= LocalYearToDateUsageQuantity
						LocalPeriodPreviousTierCost		= BaseCost
						LocalPeriodBeginDate			= each.PeriodBeginDate
						initialize LocalQuantityForTier
						initialize LocalPreviousTiersAmount
						initialize LocalPeriodGrossAmount
						initialize LocalYearToDateGrossAmount
						initialize LocalRebateDueTotalRebateAmount
						initialize LocalTotalQuantityForTier
						for each Contract.ContractTierQualifiersByPurchaseAmountRel
							if (each.PurchaseBy.PurchasePrice)
								if (each.PurchaseOperator.GreaterThan)
									if (each.PurchaseAmtPct.PurchaseAmount entered)
										LocalQuantityForTier			= ((each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount) / LocalPeriodPreviousTierCost)
										LocalTotalQuantityForTier		+= LocalQuantityForTier	
										if (LocalYearToDateUsageQuantity	> LocalTotalQuantityForTier)		
											LocalYearToDateGrossAmount		+= (each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount)
											LocalQuantityToUse				-= LocalQuantityForTier
											LocalLastTierQuantity			= LocalQuantityForTier
											LocalPreviousTiersAmount		= each.PurchaseAmtPct.PurchaseAmount
											if (each.ContractTier.TierMarkupDiscount.Discount)
												if (each.ContractTier.TierPricingAmtPct.TierPercent entered)
													LocalPeriodPreviousTierCost	= (BaseCost * (100% - each.ContractTier.TierPricingAmtPct.TierPercent))
												else
													LocalPeriodPreviousTierCost	= (BaseCost - each.ContractTier.TierPricingAmtPct.TierCost)
											else
											if (each.ContractTier.TierMarkupDiscount.Fixed)
												LocalPeriodPreviousTierCost		= each.ContractTier.TierPricingAmtPct.TierCost
											LocalPeriodLastTierAchieved			= each.ContractTier
										else
											end for each
								else
								if (each.PurchaseOperator.GreaterThanOrEqualTo)
									if (each.PurchaseAmtPct.PurchaseAmount entered)
										LocalQuantityForTier			= ((each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount) / LocalPeriodPreviousTierCost)
										LocalTotalQuantityForTier		+= LocalQuantityForTier	
										if (LocalYearToDateUsageQuantity	> LocalTotalQuantityForTier)		
											LocalYearToDateGrossAmount		+= (each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount)
											LocalQuantityToUse				-= LocalQuantityForTier
											LocalLastTierQuantity			= LocalQuantityForTier
											LocalPreviousTiersAmount		= each.PurchaseAmtPct.PurchaseAmount
											if (each.ContractTier.TierMarkupDiscount.Discount)
												if (each.ContractTier.TierPricingAmtPct.TierPercent entered)
													LocalPeriodPreviousTierCost	= (BaseCost * (100% - each.ContractTier.TierPricingAmtPct.TierPercent))
												else
													LocalPeriodPreviousTierCost	= (BaseCost - each.ContractTier.TierPricingAmtPct.TierCost)
											else
											if (each.ContractTier.TierMarkupDiscount.Fixed)
												LocalPeriodPreviousTierCost		= each.ContractTier.TierPricingAmtPct.TierCost
											LocalPeriodLastTierAchieved			= each.ContractTier
										else
											end for each
						if (LocalQuantityToUse	> 0)
							LocalYearToDateGrossAmount	+= (LocalQuantityToUse * LocalPeriodPreviousTierCost)
						LocalPeriodGrossAmount		= LocalYearToDateGrossAmount - LocalPreviousPeriodYearToDateGrossAmount
							
						initialize LocalHighestRebateAmount
						initialize LocalHighestRebatePercent
						initialize LocalRebateContract
						initialize LocalContractRebateType
						initialize LocalPeriodTotalRebatePercent
						initialize LocalRebateCount
						if (LocalPeriodBeginDate			>= Contract.EffectiveDate)
							LocalRebatePeriodCount				+= 1
							if (LocalPeriodBeginDate			>= LocalRebateDueDate)
								LocalRebateDueDateChange		= true
								LocalPreviousRebateDuesAmount	= LocalPreviousPeriodYearToDateTotalRebateAmount
							else
								LocalRebateDueDateChange		= false
							for each ContractLine.RebateQualifierContractsRel
								if (LocalRebateCount			> 5)
									end for each
								if (each.Contract				!= LocalRebateContract
								or  each.ContractRebateType		!= LocalContractRebateType)
									LocalRebateDueTotalRebateAmount		+= LocalHighestRebateAmount
									LocalPeriodTotalRebatePercent		+= LocalHighestRebatePercent
									LocalRebateContract			= each.Contract
									LocalContractRebateType		= each.ContractRebateType
									initialize LocalHighestRebateAmount
									initialize LocalHighestRebatePercent
									if (LocalRebateContract		not entered
									and LocalContractRebateType	not entered)
										LocalRebateCount		= 1
									else
										LocalRebateCount		+= 1
									LocalRebateContract			= each.Contract
									LocalContractRebateType		= each.ContractRebateType
									if (LocalRebateDueDateChange)
										LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]	= LocalPeriodGrossAmount
										LocalRebateDueDate				= first ContractRebateDuesForRebateRel.ContractRebateDue
									else
										LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]	+= LocalPeriodGrossAmount
								if (ContractRebateQualifierItemsRel	exists)
									if (each.ContractRebateQualifier.PurchaseOperator.GreaterThan)
										if (each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
											if (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]	> each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount)
												LocalRebateAmount				= (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount] * (each.ContractRebate.RebatePercent / 100))
												if (LocalRebateAmount			> LocalHighestRebateAmount)
													LocalHighestRebateAmount	= LocalRebateAmount
													LocalHighestRebatePercent	= each.ContractRebate.RebatePercent
									else
									if (each.ContractRebateQualifier.PurchaseOperator.GreaterThanOrEqualTo)
										if (each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
											if (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]	>= each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount)
												LocalRebateAmount				= (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount] * (each.ContractRebate.RebatePercent / 100))
												if (LocalRebateAmount			> LocalHighestRebateAmount)
													LocalHighestRebateAmount	= LocalRebateAmount
													LocalHighestRebatePercent	= each.ContractRebate.RebatePercent
							LocalRebateDueTotalRebateAmount		+= LocalHighestRebateAmount
							LocalPeriodTotalRebatePercent		+= LocalHighestRebatePercent
				
						LocalYearToDateTotalRebateAmount					= LocalRebateDueTotalRebateAmount 	+ LocalPreviousRebateDuesAmount
						LocalYearToDateContractAmount						= LocalYearToDateGrossAmount 		- LocalYearToDateTotalRebateAmount
						LocalYearToDateRebatePercent						+= LocalPeriodTotalRebatePercent
						each.UsageQuantity									= (each.UsageQuantity * PercentOfUsage / old PercentOfUsage)
						each.UsageAmount									= (each.UsageAmount	* PercentOfUsage / old PercentOfUsage)
						each.TierAchieved									= LocalPeriodLastTierAchieved
						each.TierCost										= LocalPeriodPreviousTierCost
						each.RebatePercent									= LocalPeriodTotalRebatePercent
						if (LocalPeriod		= 1)
							each.ContractAmount								= LocalYearToDateContractAmount
							each.GrossAmount								= LocalYearToDateGrossAmount
							each.RebateAmount								= LocalYearToDateTotalRebateAmount
							
						else
							each.ContractAmount								= LocalYearToDateContractAmount - LocalPreviousPeriodYearToDateContractAmount
							each.GrossAmount								= LocalYearToDateGrossAmount - LocalPreviousPeriodYearToDateGrossAmount
							each.RebateAmount								= LocalYearToDateTotalRebateAmount - LocalPreviousPeriodYearToDateTotalRebateAmount
						each.YearToDateContractAmount						= LocalYearToDateContractAmount
						each.YearToDateGrossAmount							= LocalYearToDateGrossAmount
						each.YearToDateRebateAmount							= LocalYearToDateTotalRebateAmount
						each.PeriodBeginDate								= each.PeriodBeginDate
						LocalPreviousPeriodYearToDateContractAmount			= LocalYearToDateContractAmount
						LocalPreviousPeriodYearToDateGrossAmount			= LocalYearToDateGrossAmount
						LocalPreviousPeriodYearToDateTotalRebateAmount		= LocalYearToDateTotalRebateAmount
						
					ContractAmount			= LocalPreviousPeriodYearToDateContractAmount
					TierAchieved			= LocalPeriodLastTierAchieved
					if (LocalPeriodLastTierAchieved	not entered)
						initialize TierUnitCost
					else
						TierUnitCost			= LocalPeriodPreviousTierCost
					RebateAmount				= LocalPreviousPeriodYearToDateTotalRebateAmount
					if (LocalRebatePeriodCount entered)
						RebatePercent		= (LocalYearToDateRebatePercent / LocalRebatePeriodCount)
					else
						initialize RebatePercent	
					Quantity				= (Quantity * PercentOfUsage / old PercentOfUsage)
					GrossAmount				= LocalPreviousPeriodYearToDateGrossAmount
					if (RunningTotalPeriod	entered)
						RunningTotalAmount	= PeriodForecastArray.UsageQuantityAmount[RunningTotalPeriod].YearToDateContractAmount
						RunningTotalRebate	= PeriodForecastArray.UsageQuantityAmount[RunningTotalPeriod].YearToDateRebateAmount
					else
						initialize RunningTotalAmount
						initialize RunningTotalRebate

		Delete is a Delete Action
			restricted
						
		Purge is a Purge Action
			restricted
					
		DisplayYearToDateTotalForAPeriod is an Instance Action
			Parameters
				PrmPeriod					is Numeric 2
			Parameter Rules
				PrmPeriod
					required
					constraint (PrmPeriod < 13)
						"PeriodMustBeBetween1And12"
						
			Action Rules
				display "Contract<Contract>,Period<PrmPeriod>"
				RunningTotalPeriod				= PrmPeriod
				RunningTotalAmount				= PeriodForecastArray.UsageQuantityAmount[PrmPeriod].YearToDateContractAmount
				RunningTotalRebate				= PeriodForecastArray.UsageQuantityAmount[PrmPeriod].YearToDateRebateAmount
				invoke Update ItemmastContractLine
					invoked.RunningTotalPeriod	= RunningTotalPeriod
				
				
					
					
