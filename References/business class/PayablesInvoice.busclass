PayablesInvoice is a BusinessClass
	owned by ap
	prefix is API
	classic name is APINVOICE

	Ontology
		symbolic key is PayablesInvoice
			classic set name is APISET1
		symbolic key is VoucherNumber
			where (VoucherNumberEntered)
			classic set name is APIBYVOUCHER
			classic name is VOUCHER-NBR

	Patterns
		implements InlineUserFields
			size is 1000
		implements StaticJava
		disable AuditIndex
		implements AnalyticCube
			disable continuous update
		implements BODId
		implements ContextualParent
		implements ForceUIRefreshOnStale		
		implements Archivable

	Persistent Fields
		VendorGroup						is like VendorGroup	
		Vendor
		Invoice
			default label is "InvoiceNumber"
		Suffix
		CancelSequence
			classic name is CANCEL-SEQ
		CancelDate						is Date
		BatchNumber
			classic name is BATCH-NUM
		AuthorityCode					is a PayablesAuthorityCode
			classic name is AUTH-CODE
		ProcessLevel					is a PayablesProcessLevel
			classic name is PROC-LEVEL
		PayGroup
		MatchProcessType						
			classic name is MTCH-PROC-TYPE
		AccrualCode						is a PayablesAccrualCode
			classic name is ACCR-CODE
		InvoiceType						is a PayablesInvoiceType
		Reference
		CurrencyTable							
		InvoiceDate						is an ExchangeDate
			classic name is INVOICE-DTE
		PurchaseFromLocation			is a VendorLocation
			classic name is PURCH-FR-LOC
			context of Vendor
		InvoiceCurrency					is a FromCurrency
			classic name is INV-CURRENCY
		ServiceContract					is a Contract
		ExternalPurchaseOrder			is Alpha size 22 
		Description
		BaseNumberOfDecimals					
			classic name is BASE-ND
		InvoiceAmount					is a FinanceCurrencyAmountGroup
			default label is "InvoiceAmount"	
			classic name for InvoiceAmount.CurrencyAmount is TRAN-INV-AMT
			classic name for InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount is BASE-INV-AMT
		AllowableAmountForDiscount		is like InternationalAmount		
			classic name is TRAN-ALOW-AMT
			precision is RoundedNumberOfDecimals	
		TaxableAmount					is a CurrencyAmount	
			classic name is TRAN-TXBL-AMT
			precision is InvoiceCurrency.NumberOfDecimals
		NumberOfDecimals				is Numeric size 1		
			classic name is TRAN-ND
		TaxAmount						is a CurrencyAmount	
			classic name is TRAN-TAX-AMT
			precision is RoundedNumberOfDecimals	

		DiscountAmount                is a FinanceCurrencyAmountGroup
			default label is "DiscountAmount"	
			classic name is TRAN-DISC-AMT
		TotalPaymentAmount				is an PayablesCurrencyGroupTotals		
			default label is "TotalPaymentAmount"	
			disable Auditing
			classic name is TRAN-TOT-PMT
		TotalDistributionAmount			is a PayablesCurrencyGroupTotals
			default label is "TotalDistributionAmount"	
			disable Auditing
			classic name is BASE-TOT-DIST
		TotalTaxAmount					is a CurrencyAmount	
			classic name is TRAN-TOT-TAX
			precision is InvoiceCurrency.NumberOfDecimals
			disable Auditing
		TotalTaxableAmount				is a CurrencyAmount	
			classic name is TRAN-TOT-TXBL
			precision is InvoiceCurrency.NumberOfDecimals
			disable Auditing
		AmountPaid						is an InternationalAmount
			classic name is TRAN-PAID-AMT
			precision is InvoiceCurrency.NumberOfDecimals
		TermsCode
			classic name is TERMS-CD
		Anticipation					is Boolean
		DiscountPercent
			classic name is DISCOUNT-RT
		DiscountDate					is Date
			classic name is DISC-DATE
		DueDate
		RevaluedBaseAmount				is a FinanceCurrencyAmountGroup
			classic name is BASE-ACT-AMT
		NumberOfSplitPayments			is Numeric size 3
			classic name is NBR-SPLIT-PMT
		SplitPaymentSchedule
			classic name is SPLIT-PMT-SCH
		NumberOfRecurringInvoices		is Numeric size 3
			classic name is NBR-RECUR-PMT
		RecurringFrequency
			classic name is RECUR-FREQ
		PayVendor						is a Vendor
		RemitToCode						is a VendorLocation		
			context of PayVendor
			default label is "RemitToLocation"
		CashCode
		BankTransactionCode
			default label is "PaymentCode"
			classic name is BANK-INST-CODE
		RevalueCurrency					is Boolean
			classic name is CURR-RECALC
		TaxCode
		IncomeCode						is a PayablesIncomeCode
		DistributionCode				is a PayablesDistributionCode
			classic name is DIST-CODE
		Status							is Numeric size 1
			classic name is REC-STATUS
			States
				Unreleased		value is 0
				Released		value is 1
				Approved		value is 2
				PendingApproval	value is 3
				Rejected		value is 4
				Amended			value is 5
				Cancelled		value is 6		//	TODO - Change to one 'L' or change the 1 "l's" to two "L's"
				Paid			value is 8
				Historical		value is 9
		CreateDate						is TimeStamp			
		DistributionDate				is Date
			classic name is DISTRIB-DATE
		Operator
		PayCurrency						is a ToCurrency
		InvoiceGroup					is a PayablesInvoiceGroup		
		LastDistribution				is a DistributionSequence		
			classic name is LAST-DIST-SEQ
			disable Auditing
		LastPaymentSequence				is like PaymentSequence			
			classic name is LAST-PMT-SEQ
			disable Auditing
		DiscountCode					is a PayablesDiscountCode
		InvoiceSource					is AlphaUpper size 1
			States
				APAutomation			value is "A"
				Manual					value is blank
				EDI						value is "E"
					default label is "EDI_or_Match_\Interface"
				ERS						value is "R"			
				Payroll					value is "P"
				Tax						value is "T"
				Garnishment				value is "G"
				HR						value is "H"			//APCBINV - Not sure about what "H" is. (HR is a guess)
				Lease					value is "L"
				ReceivablesTransfer		value is "C"
				SubContractor			value is "S"
				ExpenseInterface		value is "X"
				TimeAndExpenseInterface	value is "I"
				ImagingSystem			value is "D"
				SupplierCreated			value is "U"
				IntercompanyBilling		value is "B"
				CreditForRebill			value is "Y"
				DebtorCreditMemo		value is "M"			
				Chargeback				value is "N"			
				BOD						value is "O"			
				InvoiceInterface 		value is "Z"			
		InvoiceReference				is a PayablesReferenceType	
			classic name is INVC-REF-TYPE











		VendorReturn
			classic name is RETURN-NUMBER
		JournalBook
			classic name is JRNL-BOOK-NBR
			restricted
		TaxPoint
		ReconciliationDate				is Date
			classic name is RECON-DATE
		ProofOfDeliveryPrinted			is Boolean
			classic name is POD-PRINTED
		MatchInvoice
			classic name is MATCH-FL
		ReceiptOfInvoiceDate			is Date
			classic name is RCPT-INV-DATE
		RetailAmount					is an InternationalAmount		
			classic name is RETAIL-AMT
		MatchStatus						is Numeric size 1
			States
				Unmatched					value is 0
				POCostMessagesExist			value is 1
				Matched						value is 2
				MatchedOutOfTolerance		value is 3
					default label is "MatchedOut_ofTolerance"
				MatchedInTolerance			value is 4
					default label is "Matched_inTolerance"
				MatchedWithAutoChargeback	value is 5
				ApprovedNoReceipt			value is 6
				POCancel  					value is 7
					default label is "PurchaseOrderInvoiceCancel"
		ReasonCode						is a ProcurementReasonCode
		MatchAmount						is an InternationalAmount
			classic name is MATCH-AMT
		AddOnChargeAmount				is an InternationalAmount
			classic name is AOC-ALLOW-AMT
		Location						is an InventoryLocation
			default label is "ShipToLocation"		
		MatchObjectID					is an ObjId
			classic name is MATCH-OBJ-ID
		PrintChargeback					is Boolean
			classic name is CBPRINT-FL
		MatchTable
		TaxAdjustment	
		LastMatchLine					is an OrigLine	
			classic name is LAST-MATCH-LN
			disable Auditing
		MatchLevel
		MatchDate						is Date
		MatchedFrom                     is Numeric 1
			States 
				AutoMatch				value is 1
				ReconciliationMatch		value is 2
				OnlineMatch 			value is 3
		MatchReferenceNumber
		POTaxAmount						is an InternationalAmount	
			classic name is PO-INV-TAX
		BypassMatch						is Boolean
		ServiceOnlyInvoice				is Boolean	
			classic name is SERVICE-FL
		ServiceAmount					is an InternationalAmount
			classic name is SERVICE-AMT
		Buyer
		FinalIntransitDistribution		is Boolean	
			classic name is FINAL-DST-FLAG
		NatureOfTransactionCode			is an IntrastatNatureOfTransactionCode
			classic name is NOTC
			default label is "Nature of Transaction Code"
		StatisticalProcedure			is an IntrastatStatisticalProcedure
			classic name is STAT-PROC
		ShippingMethod					is a ShipVia
			classic name is SHIP-VIA
		UnloadingPort					is an IntrastatPortCode
			context of DestinationCountry
		IntrastatNumber
			classic name is INTRASTAT-NBR
		Dropship						is Boolean	
			classic name is DROPSHIP-FL
		ShipTerm
			classic name is FOB-CODE
		JournalBookSequenceNumber		is a JbkSeqNbr
			classic name is JBK-SEQ-NBR
			restricted
		DiversityCode					is a PayablesDiversityCode
			classic name is DIVERSE-CODE
		FlexTerms						is Boolean
			classic name is FLEX-FLAG
		RuleGroup						is a MatchRule
		FloatDays
		MatchPrepayment					is Boolean		
			classic name is MTCH-PREPAY-FL
		MatchPrepaymentMethod
			classic name is MTCH-PREPAY-MT
		CostComponentMatch				is Boolean
			classic name is COCO-FL
		MatchedAddOnChargeAmount		is an InternationalAmount
			classic name is MATCH-AOC
		HashQuantity
			classic name is HASH-QTY
		CrossReferenceVendor
			classic name is XREF-VENDOR
			context of Vendor
		MatchErrorType					is Numeric size 2
			classic name is MTCH-ERR-TYPE
			States
				MatchInvoice			value is 1
				CostError				value is 2
				NoReceiptInformation	value is 3
				HashQuantityError		value is 4
				NoAOCOnPurchaseOrder	value is 5
				NoAOCCost				value is 6
				TaxOutOfBalance			value is 7
		BestTermsDiscountAmount			is an InternationalAmount
			classic name is BT-AMT
		DiscountPoint
			classic name is DISC-POINT
		TaxInterfaced					is Boolean
			classic name is TAX-FLAG
		OriginCountry					is a Country
		OriginRegion					is a Region
			context of OriginCountry
		DestinationCountry				is a Country
			classic name is DEST-COUNTRY
		DestinationRegion				is a Region
			classic name is DEST-REGION
			context of DestinationCountry
		TransportMode
		ProcurementCardProgram
		ProcurementCardStatement
			classic name is STATEMENT
		ContractRebateGroup
		RetainageAccrualCode			is a PayablesAccrualCode
			classic name is RET-ACCR-CODE
		RetainageAmount					is an InternationalAmount		
			classic name is RET-TRAN-AMT
			precision is InvoiceCurrency.NumberOfDecimals
		BaseRetainageAmount				is a PayablesCurrencyExchangeGroup	
			classic name is RET-BASE-AMT
		RetainagePaymentAmount			is an InternationalAmount		
			classic name is RET-TRAN-PMT
			precision is InvoiceCurrency.NumberOfDecimals
		BaseRetainagePaymentAmount		is an InternationalAmount		
			classic name is RET-BASE-PMT
		ReferenceInvoiceExists			is Boolean
			classic name is REF-INV-FL
		TaxType							is a TaxMethod     
		SecondaryWithholding			is Boolean
			classic name is SEC-WITHHOLD
		CreatedBy						is an Operator 
			holds pii
		LastUpdateDate					is TimeStamp			
			classic name is LAST-UPDT-DATE
		LastUpdateBy					is an Operator 
			holds pii
		ForeignEconomicRegulatoryCode
			classic name is FOR-ECON-CODE
		DiscountDate1					is Date
			classic name is DISC-DATE1
		DiscountDate2					is Date
			classic name is DISC-DATE2
		DiscountDate3					is Date
			classic name is DISC-DATE3
		DiscountPercent1				is a DiscountPercent
			classic name is DISCOUNT-RT1
		DiscountPercent2				is a DiscountPercent
			classic name is DISCOUNT-RT2
		DiscountPercent3				is a DiscountPercent
			classic name is DISCOUNT-RT3
		BaseDiscountAmount1				is an InternationalAmount	
			classic name is BASE-DISC-AMT1
		BaseDiscountAmount2				is an InternationalAmount
			classic name is BASE-DISC-AMT2
		BaseDiscountAmount3				is an InternationalAmount
			classic name is BASE-DISC-AMT3
		DiscountAmount1					is an InternationalAmount
			classic name is TRAN-DISC-AMT1
			precision is InvoiceCurrency.NumberOfDecimals
		DiscountAmount2					is an InternationalAmount
			classic name is TRAN-DISC-AMT2
			precision is InvoiceCurrency.NumberOfDecimals
		DiscountAmount3					is an InternationalAmount
			classic name is TRAN-DISC-AMT3
			precision is InvoiceCurrency.NumberOfDecimals
		FreightTotal					is an InternationalAmount
			classic name is FREIGHT-TOT
		InsuranceTotal					is an InternationalAmount
			classic name is INSURANCE-TOT
		CustomsTotal					is an InternationalAmount
			classic name is CSTMS-TOT
		OtherAddOnChargesTotal			is an InternationalAmount
			classic name is OTHER-AOC-TOT
		GlobalDocumentType
			classic name is GLBL-DOC-TYPE
		ReferenceType					is a NordicReferenceType
			classic name is REF-TYPE
		CustomerID
		PaymentCategoryCode				is a CashLedgerPaymentCategoryCode
			classic name is PMT-CAT-CODE
		NoPayConcern	
		ReferenceNumber	
			classic name is REFERENCE-NO
		CompanyCashCode
		APClerk							is a FinanceResource
			default label is "Processor"
		ProcessingTeam					is a FinanceTeam		
		ResponsiblePerson				is a FinanceResource	
			default label is "CurrentApprover"
		ResponsibleTeam					is a FinanceTeam
		ResponsibleRole					is a InvoiceApprovalAuthCode
		RoutingCategory					is an InvoiceRoutingCategory
			default label is "InvoiceRoutingCategory"
		RoutingCode						is a InvoiceRoutingCode
			default label is "ApprovalCode"
		RoutingApprovalLevel			is Numeric 8
		ImageIndex						is an InvoiceImageIndex		
			default label is "ImageID"
		InvoiceURL						is Alpha size up to 1000
		LastApprovalComment				is Alpha size up to 100
			default label is "Comment"
		ReassignToApprovalLevel			is an InvoiceRoutingCodeResource
		Workunit						is a PfiWorkunit
		CreationSource					is Numeric 1
			States
				Manual			value is 1
				ImagingSystem	value is 2
				SOM				value is 3
					default label is "SupplierOrderManagement"
				RNIP			value is 4		
					default label is "RequestNewInvoicePayment"
		AutoApproved					is Boolean
		SubmittedTimeStamp				is TimeStamp
		RejectReason					is AlphaUpper 20
		InvoiceSearchDocument			is Text
			sql name is SEARCHDOC
			text searchable
			disable Auditing
		ApprovedTimeStamp				is TimeStamp
		RejectedTimeStamp				is TimeStamp
		CancelledTimeStamp				is TimeStamp
		ReleasedTimeStamp				is TimeStamp
		SupplierCreatedInvoiceStatus	is Numeric 1
			States
				NotASupplierCreatedInvoice			value is 0
				UnsubmittedSupplierCreatedInvoice	value is 1
				SubmittedSupplierCreatedInvoice		value is 2
		VendorWithholdingCode
			context of Vendor
		IncomeWithholdingCode
		InterfaceInProcess				is Boolean
		OriginatingInterfaceRun			is a PayablesInvoiceInterfaceResult
			delete ignored
		BudgetEditProcessing			is Numeric size 1
			States
				NotInProcessing	value is 0
				InProcess		value is 1
				Failure			value is 2
				Success			value is 3
		BackgroundProcessing			is Numeric size 1
			States
				DistributionCode		value is 1
					default label is untranslatable
				CreateMatchInvoice		value is 2
					default label is untranslatable
				MatchInvoice			value is 3
					default label is untranslatable
				TaxProcessing			value is 4		
					default label is untranslatable
				UnmatchInvoice			value is 5
					default label is untranslatable
				CreateAccrualOffset		value is 6
					default label is untranslatable
				CreatePaymentAccrual	value is 7
					default label is untranslatable
				TaxPreProcessing		value is 8		
					default label is untranslatable
				ProcessingInBackground	value is 9
					default label is untranslatable
		TaxToleranceHoldProcess			is Numeric size 1		
			States
				FirstPass 		value is 0
					default label is untranslatable
				PayAsBilled		value is 1
				ShortPay		value is 2
		BypassDistActionExitRules		is Boolean
		ApprovalCostCenter				is like AccountingUnit		
		ApprovalCategory				
		BillToProcessLevel				is a PayablesProcessLevel	
		BillFromLocation				is a VendorLocation			
			context of Vendor
		IDMDocumentPID					is a DocumentPID		
			protected
			restricted
		BankInstructions1				is a BankInstruct1			
			classic name is BANK-INSTRUCT1
		BankInstructions2				is a BankInstruct2			
			classic name is BANK-INSTRUCT2
		BankInstructions3				is a BankInstruct3			
			classic name is BANK-INSTRUCT3
		BankInstructions4				is a BankInstruct4			
			classic name is BANK-INSTRUCT4

		AgingDate is Numeric size 3
			disable Auditing
		PastDueAgingPeriod is Alpha size 30
			disable Auditing
		AgingPeriod is Alpha size 30
			disable Auditing


		ScanDate						is TimeStamp
		ExternalReasonCode				is Numeric 8	
		ExternalReason					is Alpha size up to 100	//Error message. For example: "PO not found for Vendor"
		AlphaAttribute1					is Alpha size up to 100
		SupplierInvoiceAttachment		is an AlternateAttachment
		SupplierPODAttachment			is an AlternateAttachment
		ForIntercompanyBilling			is Boolean
		VendorPaymentCurrency			is a  Currency
		VendorPaymentAmount				is an InternationalAmount
		LetterOfGuarantee
			classic name is LTR-OF-GUARAN

		EAMWorkOrder
		EAMWorkOrderActivity
		IDMJob
			protected
			delete ignored
		RequiresApproval				is Boolean	
		IDMInvoiceSentToVendor			is Boolean
		IDMPrinter
		CertificationNumber							
		CertificationDate				is Date		
		VATSplitPayment					is Boolean	
		InvoiceRoutingCodeGroup						
		InvoiceRoutingCodeGroupLevel				
		ReassignToPreviousApprover		is Boolean				
		RoutingFinanceTeam				is a FinanceTeam		
		RoutingFinanceTeamMember		is a FinanceTeamMember	
			context of RoutingFinanceTeam
			delete ignored
		UsesMatrixApproval				is Boolean
		AccrualCodeProjectOverride 		is a Project	

	Local Fields
		LocalEmailCc								is like MultipleEmailAddress 
			holds pii




		LocalCheckAPMonitor							is Alpha 1					
		LocalDistributionType						is AlphaUpper 1		
		ActionCompleteMessage						is Alpha size 250			
		DoIntrastatReporting						is Boolean					
		EditSystemCode															
		LocalEditSystemCode							is AlphaUpper 1				
		IntrastatDataChanged						is Boolean					
		LastPayablesDistributionCodeDetail			is like PayablesDistributionCodeDetail			
		LocalActualPurchaseAmt						is like InternationalAmount	
		LocalAddToVendorBalance						is Boolean					
		LocalAmount									is like InternationalAmount	//	Used for "Prorate" Action
		LocalAmount1								is like InternationalAmount	
		LocalAmount2								is like InternationalAmount	
		LocalCancelDate								is Date						//	Used for "CancelInvoice" Action
		LocalCancelSequence							is like CancelSequence 		//	Used for "CancelInvoice" Action
		LocalCompany								is like Company				//	Used for "CancelInvoice" Action. Relations: RequestPayablesInvoiceDuplicateInvoiceRel.
		LocalFinanceEnterpriseGroup					is like FinanceEnterpriseGroup	
		LocalCounter 								is Numeric size 3			
		LocalMilestoneCounter						is Numeric size 3
		CommitCounter								is Numeric size 3			
		LocalDistributionCode						is a PayablesDistributionCode	
		LocalErrorType								is a PayablesInvoiceErrorType	
		LocalHasServiceLineType						is Boolean					
		LocalHasGoodsLineType						is Boolean					
		LocalHoldCode								is a PayablesHoldCode		
		LocalInvoice								is like Invoice				//	Used for "CancelInvoice" Action. Relations: RequestPayablesInvoiceDuplicateInvoiceRel, RequestPayablesInvoiceDuplicateInvoiceByVendorRel.
		LocalInvoiceDate							is Date						
		LocalInvoiceAmt 							is like InternationalAmount	
		LocalInvoiceDetailTaxDifference				is like InternationalAmount	
		LocalTaxDifference							is like InternationalAmount	
		LocalDifference								is like InternationalAmount	
		LocalRoundingDifference						is like InternationalAmount	
		LocalRoundingPercentAmount					is like InternationalAmount
		RoundingDifferenceWithinTolerance			is Boolean

		LocalOutOfBalanceCount						is Numeric size 1		
		LocalOutOfBalanceFlag						is Alpha size 1			
		LocalPayablesInvoiceDistribution			is a PayablesInvoiceDistribution view 
		LocalPayablesInvoiceTaxDistribution			is a PayablesInvoiceDistribution view 
		LocalAccrualDistribution					is a PayablesInvoiceDistribution view 
		LocalPayablesInvoiceDistrib					is like PayablesInvoiceDistribution	
		LocalRecurringPayablesInvoice				is a PayablesInvoice	

		LocalPoolOption								is a PoolOption			
		LocalPostToAccount							is a FinanceCodeBlock	
		LocalPreviousAOCCode						is an AddOnCharge		
		LocalRecurringInvoice						is a PayablesInvoice	
		LocalRunProgram								is a RunProgram			
		LocalSuffix									is like Suffix			//	Used for "CancelInvoice" Action
		LocalPostDate								is Date
		LocalTermsCalTrigger						is Alpha size 1			
		LocalTermsCode								is like TermsCode
		LocalThisCancelSequence						is like CancelSequence	//	Used for "CancelInvoice" Action
		LocalUpdateTransactionIDNumber				is Boolean				
		LocalJournalizeGroup						is like JournalizeGroup
		LocalVendor									is a Vendor				
		LocalVendorBalanceCurrency					is a Currency			
		LocalVendorBalanceLocation					is like VendorLocation	
		LoopCounter									is Numeric size 2		
		NewDistributionAmount 						is a CurrencyAmount		
		NewDistribTaxableAmount 					is a CurrencyAmount		
		NewDistribTaxAmount							is a CurrencyAmount		
		NewPayablesInvoiceDistribution				is a PayablesInvoiceDistribution view
		NewPrepayCredit								is a PayablesInvoice view	
		LocalPrepayCompany							is like PayablesCompany		
		LocalPrepayVendor							is a Vendor					
		LocalPrepayInvoice							is like InvoiceNum			
		VerifyPayablesMonitor										

		BypassActiveCodeBlockEdit
		BypassActiveResourceEdit
		BypassActiveVendorLocationEdit
		BypassInterfaceInProcessEdit				is Boolean
		BypassMatchInProgressEdit					is Boolean
		BypassOffsetAccruals						is Boolean
		ValidateCashPaymentFormat									
		LocalMatchInvoiceMessageInvoice				is like Invoice
		LocalMatchInvoiceMessageSuffix				is like Suffix
		LocalNoMoreMessages							is Boolean
		LocalBoolean								is Boolean				
		CalculateTerms														
		CalculateBestTerms													
		LocalTermsCalculation						is a TermsCalculation	
		ProcessTaxHistory													
		LocalTaxHistoryProcessed					is Alpha 1				
		LocalCalculateTaxExecuted					is Alpha 1				
		SumOfCalculatedTaxAmount					is an InternationalAmount		
		SumOfLineTaxableAmount						is an InternationalAmount		
		PayablesTaxTolerance												
		LocalPayablesTaxTolerance					is Alpha 1				
		LocalReversalAmount							is an InternationalAmount	
		DoConstraints								is Boolean
		ActionType									is AlphaUpper size 1
			States
				CreateType		value is "C"
				UpdateType		value is "U"
				InstanceType	value is "I"
		LocalPayGroup								is a PayGroup			
		LocalCreateTaxDistributions					is a CreateTaxDistributions
		LocalGroupTotalDistributions				is a PayablesCurrencyGroupTotals	
		LocalPIDTaxIndicator						is Boolean
		LocalPayablesInvoiceView					is a PayablesInvoice view		
		LocalPayablesInvoiceDistributionView		is a PayablesInvoiceDistribution view
		DoCreatePayment								is Boolean
		DoMultipleTermsPayments						is Boolean				

		ApinwsCalcTaxRateSwitch						is Boolean

		TotalTaxRate								is like InternationalCost





		ApinwsTTaxAmt								is like InternationalAmount


		ApinwsXXGoodsTxblAmt						is like InternationalAmount		

		ApinwsXXTaxTable							is a TaxTableField



		ApinwsClearTaxSwitch						is Boolean
		ApinwsTermsTranDiscTot						is like InternationalAmount
		ApinwsTermsBaseDiscTot						is an FinanceCurrencyAmountGroup		
		ApinwsAppLastSeqNbr							is like SeqNbr
		ApinwsTermsPmtAmt							is like InternationalAmount
		ApinwsTermsDiscAmt							is like InternationalAmount
		ApinwsTermsDueDate							is Date
		ApinwsTermsDiscDate							is Date
		ApinwsTermsDiscountRt						is like DiscountPercent			
		ApinwsXXMultipleAppRecs						is Boolean						
		ApwsDiff									is like InternationalAmount		
		ApinwsHoldProrateAmount						is like InternationalAmount		
		ApinwsEnterProrateAmount					is like InternationalAmount		
		ApinwsXXTranTotPmt							is like InternationalAmount		
		ApinwsXXBaseTotDist							is a PayablesCurrencyGroupTotals	
		ApinwsXXTranTotDist							is like InternationalAmount		
		ApinwsXXTranTotTax							is like InternationalAmount		
		ApinwsXXProrateDist							is like InternationalAmount		
		NextSentence								is Boolean
		DoNothing									is Boolean
		GoTo235End									is Boolean
		CreateSingleTaxDst							is Boolean					
		ApwsLastDistSeq								is like DistributionSequence	
		ApwsDistSeqNbr								is like DistributionSequence	
		AptxrwsTranTxblAmt							is like InternationalAmount	
		ApwsPostOption								is a PostingOption			
		ApinwsAccumulateTxbl						is like InternationalAmount	
		ApwsCancelledFl								is Alpha size 1				
		ApwsTranTotTax								is like InternationalCost		
		ApwsTranTotDist								is like InternationalCost		
		ApwsBaseTotDist								is an FinanceCurrencyAmount	
		ApinwsCreateTaxDisFrHdr						is Boolean					
		ApinwsSaveApdAccrCode						is like PayablesAccrualCode
		ApinwsSumDtlTaxAmt							is like InternationalAmount
		ApinwsEligibleAmt							is like InternationalAmount
		ApinwsProrateMultiplier						is like InternationalCost
		ApinwsCalcProrateTax						is like InternationalAmount
		ApinwsTotalProrateAmt						is like InternationalAmount
		ApinwsTaxIndSw								is Boolean
		ApinwsWorkTaxSeqNbr							is like TaxSequenceNumber
		ApinwsEligibleDistAmt						is like InternationalAmount
		ApwsTaxSeqNbr								is like TaxSequenceNumber
		ProrateDetail
		ApinwsDiff									is like InternationalAmount


















		ApinwsApxTaxCode							is a TaxCode		
		ApinwsTaxUsageCd							is like TaxUsageCode 

		AppDueDate									is Date
		AppDiscountRt								is like DiscountPercent
		AppDiscDate									is Date
		AppTranPmtAmt								is like InternationalAmount
		AppTranDiscAmt								is an InternalAmount		


		AppActCnvRate  								is like CurrencyExchangeRate
		AppDiscLostFlg 								is Boolean
		Sub											is Numeric size 3
		ApinwsXXAcctUnitFoundSwitch 				is Boolean
		ApinwsTblMaxUnits							is Numeric size 3
		Sub1										is Numeric size 3
		SpeedCounter								is Numeric size 2		
		WorkAmount1									is an InternationalCost

		LocalPTXEntTaxCode							is a TaxCode			
		LocalPTXTaxCode								is a TaxCode
		LocalPTXEntTaxableAmount					is a CurrencyAmount		
		LocalPTXTaxableAmount						is a CurrencyAmount
		LocalPTXEntTaxAmount						is a CurrencyAmount		
		LocalPTXTaxAmount							is a CurrencyAmount
		LocalPTXEntTaxCategory						is a ProductTaxCategory	
		LocalPTXTaxCategory							is a ProductTaxCategory
		LocalPTXLinkTaxOnDist						is Boolean
		LocalPTXTaxType								is a TaxType
		LocalPTXTaxMethod							is a TaxMethod





		LocalAccrualCode							is a PayablesAccrualCode	
		LocalAttributeCtr   						is Numeric 2
		LocalCashLedgerPayablesPayment				is a CashLedgerPayablesPayment view
		LocalContractGroup							is AlphaUpper size 4
		LocalContract								is like Contract
		LocalContractRebate							is a ContractRebate
		LocalContractRebateType						is a ContractRebateType
		LocalContractRebateQualifier				is a ContractRebateQualifier
		LocalContractRebateDue						is a ContractRebateDue
		LocalHasContractOnRebate					is Boolean
		LocalItemUsedForQualification				is Boolean
		LocalQuantity								is like Quantity
		LocalCmContract								is like Contract
		LocalPoCompany								is like Company
		LocalPoNumber								is like Reference
		LocalPurchaseOrder							is like PurchaseOrder
		LocalPurchaseOrderLine						is like PurchaseOrderLine
		LocalPoRelease								is Numeric size 4
		LocalPoCode									is a POCode
		LocalLineNbr								is like LineNumber
		LocalMultiplier								is Numeric size 1
		LocalReverseAccrual							is Boolean
		LocalReallocate								is Boolean
		LocalItem									is an Item
		LocalVendorItem								is like VendorItem
		LocalCommodityCode							is a CommodityCode
		LocalContractCurrencyExchange				is a CurrencyExchange
		LocalInvoiceAmount							is like InternationalAmount
		LocalLineSeqNbr								is like SeqNbr
		LocalMatchedQuantity						is like Quantity
		LocalInvoiceUnitCost						is like InternationalCost
		LocalTotBaseAmt								is like InternationalAmount
		LocalRunningAmount							is Decimal 13.2	
		LocalLargestTaxLinePID						is like PayablesInvoiceDistribution		
		LocalLargestTaxLineAmount					is a CurrencyAmount						
		LocalTaxAmount								is a CurrencyAmount			
		LocalReturnedTaxAmount						is a InternationalAmount	
		LocalTaxAccrualAmount						is like InternationalAmount
		LocalTaxCompany								is like Company				
		LocalCurrencyAmount							is a CurrencyAmount			
		LocalAssignToCurrency						is Boolean
		LocalNumberOfDecimals						is Numeric 1				
		LocalItemType								is AlphaUpper 32
		LocalItemDescription						is like Description
		LocalVpriUom								is like UnitOfMeasure
		LocalVpriUomMult							is Decimal 13.7
		LocalBuyer									is a Buyer
		LocalAPClerk								is like FinanceResource
		LocalAPClerkName							is Alpha 230
		LocalProcessingTeam							is like FinanceTeam			
		LocalTeamEmailAddressList					is Text 
			holds pii
		LocalFirstEmailAddressFound					is Boolean
		LocalRoleEmailAddressList					is Text 
			holds pii
		LocalProxyActor								is an Actor
		LocalEmailAddress							is an EmailAddressMulti 
			holds pii
		LocalSendNotApprovedInvoiceMessage			is Boolean					
		LocalActor									is an Actor
		LocalFinanceResource						is a FinanceResource
		LocalRoutingApprovalLevel					is Numeric 8
		LocalApprovalLevelsChecked					is Numeric 4
		LocalApproverList							is Alpha 250
		LocalFirstApproverAssigned					is Boolean
		LocalEscalated								is Boolean

		LocalInternalFull							is an InternalAmount		
		LocalInternalSum							is an InternalAmount		
			precision is RoundedNumberOfDecimals
				round to precision
		LocalInternalTax							is an InternalAmount		
			precision is RoundedNumberOfDecimals
				round to precision
		LocalDoCurrency								is Boolean
		LocalDocumentURL							is Alpha size up to 2000
		LocalDocumentBytes							is BinaryDocument
		LocalDocumentType							is MimeType

		LocAllowAmt									is an InternalAmount	
			precision is InvoiceCurrency.NumberOfDecimals
				round to precision

		LocDiscAmt									is an InternalAmount		
			precision is RoundedNumberOfDecimals
				round to precision

		LocalInvoiceRoutingRule						is like InvoiceRoutingRule		
		LocalParentInvoiceRoutingRule				is like InvoiceRoutingRule		
		LocalChildrenExist							is Boolean						
		LocalRoutingRuleFound						is Boolean						
		LocalGetRoutingRuleValueslsDone				is Boolean						
		LocalAutoApprove							is Boolean						
		LocalRoutingCode							is like InvoiceRoutingCode		
		LocalInvoiceRoutingCodeGroup				is like InvoiceRoutingCodeGroup	
		LocalResponsibilityMatrix					is Boolean
		LocalRoutingCodeGroupName					is a Name						
		LocalActiveApproversAtAllLevels				is Boolean
		LocalActiveApprover							is Boolean
		LocalTempApprovalLevel						is Numeric 3
		LocalRejectReason							is AlphaUpper 20
		LocalRejectComment							is Alpha size up to 500
		LocalEscalationDate							is Date
		LocalDefaultEscalationDays					is Numeric 3
		LocalDaysChecked							is Numeric 3
		LocalWorkingDays							is Numeric 3
		LocalOffDays								is Numeric 3				
		LocalDaysDiff								is Numeric 3				
		LocalTaxEntity								is a TaxEntity	
		LocalCompletionMessage						is Alpha 100
		LocalMatchAmount							is like InternationalAmount


		LocalReleaseInvoice							is Boolean
		LocalSubTotal								is like InternationalAmount

		WorkCost									is like InternationalCost
		WorkQuantity								is like Quantity
		HasLastMatchUnitCost						is Boolean
		NewRecurringInvoice							is a PayablesInvoice
		UOMCalculation
		IntrastatProcessing
		LocalTrigger								is Alpha 1

		LocalTaxableAmount							is an InternationalAmount




		LocalTotalTaxableAmount						is an InternationalAmount
		Idx											is Numeric size 2
		LocalYear 									is like Year 
		LocalMonth 									is Numeric size 2 
		LocalVertexDistributionAccount  			is a FinanceCodeBlock		
		LocalDistributionShipToLocation				is an InventoryLocation		
		LocalDistributionDescription				is a Description			
		LocalDistributionShipToAddress				is a PostalAddressV2		
		RemainingTaxAmount							is an InternationalAmount
		TaxableCount								is Numeric size 5
		LocalTaxRate								is a CnvRate
		LocalRecoverablePercent						is a TaxRateValue
		LocalRecoverableAmount						is an InternationalAmount
		LocalUnrecoverableAmount					is an InternationalAmount
		LocalTaxTableInvoicedAmount					is a CurrencyAmount			
		LocalUnadjustTaxTableAmount					is a CurrencyAmount			
		LocalOverrideVariancePct					is like InternationalAmount	
		LocalOutputTotalTaxAmount					is an InternationalAmount
		LocalTaxTable								is a TaxTableField



		InterfaceCreate								is Boolean
		DetailDistributionsInBalance				is Boolean
		SaveDueDate									is a DueDate
		LocalTaxTerms								is like TaxTerms
		LocalInvoiceDetailTotalAmount				is like InternationalAmount
		LocalInvoiceDetailTotalTax					is like InternationalAmount
		LocalAOCTotalAmount							is like InternationalAmount
		LocalAOCTotalTax							is like InternationalAmount
		LocalTaxDistribution						is like PayablesInvoiceDistribution
		SaveTaxCode									is like TaxCode				
		LocalEffectiveDate							is Date						
		LocalAsyncId 								is an AsyncActionRequest
		LocalTaxCode								is like TaxCode
		LocalTaxingJurisdiction						is a TaxingJurisdiction
		SplitAmount									is an InternationalAmount
		SplitDiscount								is an InternationalAmount
		SplitReportable								is an InternationalAmount
		TranAdjustment								is an InternationalAmount
		DiscAdjustment								is an InternationalAmount
		SplitRevalueAmount							is an InternationalAmount
		NewInvoice									is a PayablesInvoice view
		NewPayment									is a PayablesInvoicePayment view
		LocalMNRTestQuantity						is like Quantity
		LocalTotalReceiptMatchedQuantity			is like Quantity
		TempQuantity								is like Quantity
		FirstPaymentSequence						is like PaymentSequence
		LocalVendorBuyMatchedQuantity				is like Quantity
		LocalVendorPriceMatchedQuantity				is like Quantity
		NewMiscellaneousAddOnChargeInvoicedAmount	is like InternationalAmount
		LocalMiscAOC								is like InternationalAmount
		LocalInvoiceDetailUnitCost					is like UnitCost
		LocalVendorReturnLine						is a VendorReturnLine
		LocalTitle									is Alpha size 255
		LocalActionComment							is a CommentText			
		ActionCode									is Alpha size 1
			States
				Create value is "C"
				Update value is "U"
				Delete value is "D"
		CreateFromBatchSwitch						is Boolean
		LocalContinue								is Boolean
		LocalMatchDetailKey							is like MatchDetailKey
		NewMatchWork 								is a MatchWork view
		LocalAutoMatchResult						is like AutoMatchResult
		MatchInReleasedState						is Boolean
		LocalHasServiceLine							is Boolean
		LocalHasNonServiceLine						is Boolean
		LocalProcCardProgram						is a ProcurementCardProgram	
		LocalTotalNewTaxAmount						is an InternationalAmount
		LocalTotalAddOnChargeAmount					is an InternationalAmount
		TaxProcessing								is Alpha up to 200			
		TaxProcessing2								is Alpha up to 200			
		ProcessControl2								is Alpha up to 100			
		OldInvoiceAmount							is an InternationalAmount
		OldTaxAmount								is an InternationalAmount
		TaxArray														

		LocalSupplier                   is like Supplier
		LocalSupplierContact            is like SupplierSourceId
		OneTimeVendor								is a Vendor view
		LocalVendorReturnLineDistributionAccount	is like FinanceCodeBlock

		ValidateCheckDigit
		NewCompanyCustomer							is a CompanyCustomer view

		GetDerivedValues							is Boolean
		InvoiceDetailCounter						is Numeric size 9
		InvoiceAddOnChargeCounter					is Numeric size 9
		DistribCount								is Numeric size 9

		LocalPurgeCount								is Numeric 10
		LocalReceipt								is a PurchaseOrderReceipt
		LocalReceiptLine							is a PurchaseOrderReceiptLine
		LocalAddOnCharge 							is like AddOnCharge
		LocalTableTaxAmount							is an InternationalCost
		LocalExtendedAmount							is an InternationalAmount
		WillBeCancelled								is Boolean
		UpdateCashLedgerPayablesPayment				is Boolean				
		LocalVendorGroup							is like VendorGroup		
		LocalPayablesInvoiceTotal					is like PayablesInvoiceTotal
		MHCUser										is Alpha size up to 100	
		MHCDocID									is Alpha size up to 100	
		MHCKey										is Alpha size up to 100	
		LocalJSONResponse							is JSONObject			

		WebServiceError 							is Boolean
		WebServiceErrorMessage 						is Text
		TextErrorMessage							is Text
		MyHTTPInfo 									is a HTTPInfo
		FaultCode									is Alpha 30	
		ExceptionType								is Alpha 30	
		RootCause									is Alpha 60	
		FaultString									is Alpha 60	
		HttpStatusCode 								is Numeric 3	



		LocalInvoiceOnHold							is Boolean
		LocalProcessLevel							is like PayablesProcessLevel
		LocalClaimsAndLiabilitiesHeader				is like ClaimsAndLiabilitiesHeader
		LocalGotIDMDocumentURL						is Boolean				
		IDMItem																
		LocalNewIDMUniqueID							is a DocumentPID		
		LocalResult									is Boolean
		LocalIDMDocumentPID							is a DocumentPID
		AttributeCtr								is Numeric 2
		LocalExecute								is Boolean
		IDMXMLDefinition

		MultReceiptLines							is Boolean
#ifdef module idm
		IDMAttributes
		IDMItemCopy															
		IDMConnected								is Boolean
#endif
		AOCCount									is Numeric size 9
		TaxCount									is Numeric size 9
		NativeLPLBODTrigger							is Boolean
		NativeLPLBODTriggerExclude					is Boolean
		LocalInterfaceAnalysis						is like InterfaceAnalysis
		IDMGenerateDocument
		LocalIncludeReceiptDetail					is AlphaUpper 1
			States
				No value is "N"
				Yes value is "Y"
		LocalPrintComments							is AlphaUpper size 1
			States
				No value is "N"
				Yes value is "Y"
		TimeStampInGMT
		LocalSelectFromDate is TimeStamp
		LocalSelectToDate	is TimeStamp
		LocalPayablesChargebackIDMEmailSubject		is Alpha 255
			Text Variables
				CompanyName	value is Company.Name
				VendorName	value is Vendor.VendorName
				AsOfDate	value is current corporate date
		LocalIDMPrinter 							is an IDMPrinter
		LocalCalculatePayablesFinanceStructure		is a CalculatePayablesFinanceStructure
		LocalAnswer 								is Alpha size 1
		LocalToAccountingEntity						is like AccountingEntity
		LocalAccountingUnit							is like AccountingUnit
		LocalFinanceDimension1						is a FinanceDimension1
		LocalWithholdingCategory 					is a WithholdingCategory
		LocalWithholdingCode						is an IncomeWithholdingCode
		LocalWithholdingAmount						is a FinanceCurrencyAmountGroup
		LocalTotalWithholdingAmount					is a FinanceCurrencyAmountGroup
		NegativeFinanceCurrencyAmountGroup
		LocalAutoMatchPrepaymentRule				is like MatchRule
		LocalInvoiceRoutingCodeGroupLevel			is like InvoiceRoutingCodeGroupLevel	
		SetTransientFields							is Boolean								
		LocalNumberOfDistributions					is Numeric 6
		LocalDistributionCount						is Numeric 6
		LocalDistributionAmount						is a FinanceCurrencyAmountGroup
		LocalTotalDistributionAmount				is a FinanceCurrencyAmountGroup
		LocalTaxDistributionAmount					is a FinanceCurrencyAmountGroup
		LocalPercent								is a Percent
		LocalColSequence							is Numeric size 3
		LocalTransactionCount           			is Numeric size 6

		LocalTriggerFrom							is Alpha size 100
		LocalAOCCount								is Numeric size 9
		LocalTaxCount								is Numeric size 9
		LocalCommitDistribution						is Numeric 9
		NewBODTracker								is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker					is Numeric 15
		LocalSupplierInvoiceDistributionXMLBOD		is XMLDocument
		LocalSupplierInvoiceDetailXMLBOD			is XMLDocument
		LocalCommitmatchDetail						is Numeric 9
		LocalPurchaseOrderLineCount					is Numeric 9
		LocalAccountingEntity  						is Alpha 100
		LocalDummyInvLineNumber						is Numeric 9
		DummyLineTaxTotalAmount						is an InternationalAmount
		LocalDummyDistributionCount					is Numeric 9
		LocalPIDistribution							is Numeric 9
		LocalContractLineCount						is Numeric 9
		Error            							is Boolean
	    ErrorMessage    							is Alpha 300
	    LocalConfigurationParameter					is Alpha size up to 200
	    LocalAEAlreadyExecuted						is Boolean
	    LocalBODAEAlreadyExecuted					is Boolean
		LocalSummaryAccount							is a FinanceCodeBlock
		LocalManualApprove							is Boolean

		LocalReportCurrencyExchangeGroup			is a ReportCurrencyExchangeGroup
		SetCount									is Numeric 3	
		LocalInvoiceCutOffDate						is Date
		CurrentBackgroundGroup						is AlphaUpper up to 200
		LastBackgroundGroup							is AlphaUpper up to 200
		LocalBatchRelease							is Boolean 
		LocalOutputField        					is Alpha 50
		LocalGeneralLedgerCompanyGroup				is like GeneralLedgerCompanyGroup		
		MatchInvoiceErrorMessages											
		FESFundingSourceTable
		FESCounter									is Numeric 4
		LocalHasAssets 							    is Boolean				
		LocalBypassCMDueDateChange					is Boolean				
		LocalICBillToCompany						is like Company 		
		LocalICBillToAmountMismatch 				is Boolean				

		LocalInventoryTransaction 					is like InventoryTransaction 
		LocalUnitCostDifference						is like UnitCost 
		LocalShipToLocation 						is like Location 
		LocalLineNumber								is like LineNumber  			


#ifdef module cam
		LocalCustodialPosting						is a FinanceDimension10
		LocalCommittedAmount						is an InternationalAmount
		LocalCustodialAccountEdit					is a CustodialAccountEdit
#endif
		LocalPurgeInBackground                      is Boolean
		AccountRequiresUnits						is Boolean
		LocalPeriodOfPerformanceProject				is like Project
		
	Transient Fields
		TransientBypassEdit		is Numeric size 2				
			States												
				ReverseDistributionForUpdate	value is 10		
		TransientBypassActionExitRules		is Boolean		
		TransientBypassDistActionExitRules	is Boolean
		TransientBypassErrorUpdate			is Boolean
		TransientAcceptTaxOverride			is Boolean	
		TransientDoTaxToleranceOption		is Boolean	
		TransientSetRNIPTaxError			is Boolean	
		FirstPurchaseOrder					is a PurchaseOrder
			default label is "PurchaseOrder"
			derive value from first MatchPurchaseOrderInvoicesRel.PurchaseOrder
		InterfacedPurchaseOrder				is like PurchaseOrderImport
		InterfacedPOCode					is like POCode
		FirstPOCode							is a POCode
			default label is "POCode"
			derive value from first MatchPurchaseOrderInvoicesRel.PurchaseOrder.POCode
		CreditMemoReferenceInvoice			is like Invoice
		TransientCreateAllDetails			is Boolean
		TransientCreateDetails				is Numeric 1
			default label is "CreateDetails"
			States
				No					value is 1
				FromPurchaseOrder		value is 2
				FromReceipt				value is 3
				FromReceiptThenFromPO	value is 4
		TransientAddOnChargeOnly			is Boolean
		TransientAddOnCharge				is an AddOnCharge
			default label is "AddOnCharge"
		OriginalInvoice						is a PayablesInvoice
		TransientDistCodeAccount			is a FinanceCodeBlock
			default label is "DistributionCodeAccount"
		OverrideEnclosure					is a BooleanOverride		
		TransientInvoiceEntryTemplate		is Numeric 1
			default label is "InvoiceEntryTemplate"
			States
				Basic			value is 0
				TaxInvoice		value is 1								
				MatchInvoice	value is 4
				ServiceContract	value is 5
				Freight			value is 3
		TransientJobName					is AlphaUpper 20			
			default label is "JobName"
		OverridePayImmediately				is a BooleanOverride		
		TransientPaymentAmount				is an InternationalAmount
			default label is "PaymentAmount"
			derive value from DerivedPaymentAmount
		TransientDiscountLost				is Boolean
		TransientPaymentDate				is Date 
			default label is "PaymentOrDueDate"
			derive value from DerivedPaymentDate
		TransientPaymentNumber				is a TransactionNumber
			default label is "PaymentNumber"
			derive value from DerivedPaymentNumber
		TransientProrateAccount				is a FinanceCodeBlock
			default label is "ProrateAccount"
		TransientProrateAmount				is an InternationalAmount
			default label is "ProrateAmount"
		TransientRecreateRecurring			is Boolean
		TransientChangingVendor				is Boolean					
		TransientReleaseOnInvoiceAdd		is Boolean
		TransientBypassTaxAmountEdit		is Boolean					
		TransientUpdateTaxCode				is Boolean					
		TransientLineTax					is Boolean					
			default label is "LinkTaxOnDistributions"
		TransientReportableAmount			is an InternationalAmount
			default label is "ReportableIncomeAmount"
			derive value from DerivedReportableAmount					
		OverrideSeparatePayment				is a BooleanOverride		
		TransientVendorPriority 			is a PaymentPriority
			default label is "VendorPriority"
			derive value from DerivedPaymentPriority					
		TransientFromEntity					is a AccountingEntity	
			derive value from GeneralLedgerCompanyRel.AccountingEntity
		TransientToCurrency					is a ToCurrency			
		 	derive value from GeneralLedgerCompanyRel.Currency	
		TransientTransactionAmount			is a CurrencyAmount
		TransientTaxTableInvoicedAmount		is a CurrencyAmount			
		TransTaxTableInvoicedAmount			is a CurrencyAmount			
		TransTaxTableAccruedAmount			is a CurrencyAmount			
		TransientBypassMemberEdit			is Boolean					
		TransientEnteredTaxAmount			is a CurrencyAmount			
		TransientEnteredTaxableAmount		is a CurrencyAmount			
		TransientActualTaxAmountSum			is a CurrencyAmount			
		TransientExchangeDate				is an ExchangeDate
		TransientFromCurrency				is a FromCurrency
		TransientContextToCurrency			is a ToCurrency		
		TransientBankCheckAmount			is an InternationalAmount
		TransientHoldCode					is a PayablesHoldCode
			derive value from InvoiceHoldCode
			default label is "HoldCode"

		TestingOn							is Boolean

		VoucherRangeBegin					is a VoucherNumber
		VoucherRangeEnd						is a VoucherNumber
		TransientUnitsAmount				is an InternationalAmount	
			default label is "Units"
		NewUnitsAmount						is an InternationalAmount	
			default label is "Units"
		SumUnitsAmount						is an InternationalAmount	
			default label is "Units"
		UnitsAmount														
			derive value from DerivedUnitsAmount
		SpeedDistributionArray											
		UserElementGroup												
		TaxEntityValue						is a TaxEntity				
			derive value from Company.AccountingEntity
		TransientSupplierInvoiceType		is Numeric 2
			States
				Expense			value is 1
				POMatch			value is 2
				ServiceContract	value is 3
		TransientSuppressDueDate			is Boolean
		TransientDisplayTaxAmount			is Boolean
		TransientIsInterCompany				is Boolean	
		TransientInterCompanyEntity			is like ToAccountingEntity	
		BypassNegativeRateEdit
		UnmatchFrom							is Alpha 4
			States
				MA70 value is "MA70"
				MA75 value is "MA75"

		InvoiceTypeForMatch					is AlphaUpper size 1
			States
				Invoice			value is blank
				CreditMemo		value is "C"
				DebitMemo		value is "D"
				MatchPrepayment	value is "R"

		InvoiceTypeForExpense				is AlphaUpper size 1
			States
				Invoice		value is blank
				CreditMemo	value is "C"
				DebitMemo	value is "D"
				Prepayment	value is "P"
		ImportInvoiceHasImportPayment		is Boolean
		ImportInvoiceAccruedTaxCode			is like TaxCode			
		MatchRetainageAmount				is an InternationalAmount
		CreateOneTimeVendor					is Boolean
		SabrixError							is Alpha 15				
		SabrixMessage						is Text					
		TransientBypassBackgroundEdit		is Boolean
		TransientBypassOneSource			is Boolean
		TransientExcludeAllLinesFromTaxCall	is Boolean				
		TransientBypassCreateAocDetails 	is Boolean
		DoShortPayProcess					is Boolean
		CalculateTax											
		TransientVendorName					is like VendorName 
			holds pii
		TransientVendorSearchName			is like VendorName 
			holds pii
		TransientVendorAddress				is like PostalAddressV2
		TransientLegalName					is like VendorName 
			holds pii
		TransientTaxID						is like TaxID 
			holds pii
		TransientIncomeCode					is like PayablesIncomeCode
		TransientVATRegistrationCountry		is like Country
		TransientVATRegistrationNumber		is like VATRegistrationNumber 
			holds pii
		TransientCarrier					is Boolean
		TransientUpdateVendorBalance		is Boolean
		TransientUpdatePaymentBalance		is Boolean
		TransientAutoMatchError				is Alpha size up to 200
		TransientDetailTaxProcessing		is a DetailTaxDistributionCodeFooter	
		TransientTaxCategory				is a ProductTaxCategory					
			default label is "TaxCategory"
		TransientPointOfTitleTransfer		is a PointOfTitleTransfer		
			default label is "PointOfTitleTransfer"
			derive value from DerivedPointOfTitleTransfer
		TransientCurrencyRefresh			is Boolean
		IntrastatFiscalYear					is Year
			derive value from InvoiceDate year
		TransientBalanceOrRelease			is AlphaUpper 1
			States
				Balance value is "B"
				Release value is "R"
		TransientPostingStatus				is Numeric size 1
			States
				Unreleased	value is 0
				Open		value is 1
				History		value is 9
		GLTJournalizeGroup					is like JournalizeGroup
		TransientCreateEnteredTaxCodeRemovedComment	is Boolean	
		TransientRoutingApprovalLevel		is Numeric 8		
			derive value from DerivedNextTransRoutingApprover
		TransientRoutingCode				is a InvoiceRoutingCode					
		TransientInvoiceRoutingCodeGroupLevel is a InvoiceRoutingCodeGroupLevel
		TransientActor						is an Actor			
		TransientAllowAmountUpdate			is Boolean
		TransientSelectedForAR				is Boolean
			derive value from DerivedIsSelectedForAR
		TransientPaidLate					is Boolean
			default label is "PaidLate"
			derive value from DerivedPaidLate
		TransientCurrency					is a Currency
			default label is "Currency"
			derive value from DerivedCurrency
		OverrideRevalueCurrency				is a BooleanOverride				
		TransientGLCalendarPeriod			is a GeneralLedgerCalendarPeriod	
			derive value from GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod
		TransientTaxPointDate				is Date								
			default label is "TaxPointDate"
			derive value from PayablesInvoiceTaxRel.TaxPointDate
		TransientInUnmatch					is Boolean
		TransientInAutoMatch				is Boolean
		TransientAutoMatchResult			is an AutoMatchResult
		TransientIDMWatermark				is Alpha 9
		ShowDerivedTotals					is Boolean
		TransientRejectComment				is Alpha size up to 500
		TransientRejectReason				is AlphaUpper 20
		TransientWorkunit					is a PfiWorkunit	
		FirstPurchaseOrderFromDetail        is a PurchaseOrder
			default label is "PurchaseOrder"
			derive value from first PayablesInvoiceDetailRel.PurchaseOrder
		InvoiceApprovalEmailSubject 		is Alpha size 100	
            Text Variables
                Company			 value is PayablesInvoice.Company
				Invoice          value is PayablesInvoice.Invoice
                VendorName       value is PayablesInvoice.Vendor.VendorName
                VendorID         value is PayablesInvoice.Vendor                        
                InvoiceAmount    value is PayablesInvoice.InvoiceAmount.CurrencyAmount  
                InvoiceDate      value is PayablesInvoice.InvoiceDate                    
                DueDate          value is PayablesInvoice.DueDate                    
                InvoiceURL       value is PayablesInvoice.InvoiceURL

		InvoiceApprovedEmailSubject 		is Alpha size 100
            Text Variables
                Company			 value is PayablesInvoice.Company
                Invoice          value is PayablesInvoice.Invoice
                VendorName       value is PayablesInvoice.Vendor.VendorName
                VendorID         value is PayablesInvoice.Vendor                        
                InvoiceAmount    value is PayablesInvoice.InvoiceAmount.CurrencyAmount  
                InvoiceDate      value is PayablesInvoice.InvoiceDate                    
                DueDate          value is PayablesInvoice.DueDate                    
                InvoiceURL       value is PayablesInvoice.InvoiceURL
		
		InvoiceRejectEmailSubject 			is Alpha size 100	
            Text Variables
                Company			 value is PayablesInvoice.Company
				Invoice          value is PayablesInvoice.Invoice
                VendorName       value is PayablesInvoice.Vendor.VendorName
                VendorID         value is PayablesInvoice.Vendor                        
                InvoiceAmount    value is PayablesInvoice.InvoiceAmount.CurrencyAmount  
                InvoiceDate      value is PayablesInvoice.InvoiceDate                    
                DueDate          value is PayablesInvoice.DueDate                    
                InvoiceURL       value is PayablesInvoice.InvoiceURL

		TransientVendorNameSelect 		is a VendorName		

	Context Fields
		InvoiceDateInterval				is a DateRange
		FinanceResource
		InvoiceDateRange				is a DateRange2
		DueDateRange					is a DateRange
		PostDateRange					is a DateRange
		AuditDateRange					is a DateRange	
		VoucherNumberRange
		InvoiceTypeForSearch
		GeneralLedgerCompanyGroup
		SupplyManagementReportContext	is a SupplyManagementReport
		AsOfDate
		CurrencyType1
		AgingMethod
		AccountingEntity
		AccountingUnit
		Account
		Project
		FinanceDimension1
		FinanceDimension2
		FinanceDimension3
		FinanceDimension4
		FinanceDimension5
		FinanceDimension6
		FinanceDimension7
		FinanceDimension8
		FinanceDimension9
		FinanceDimension10
		OriginalVendor					is a Vendor
		SupplierGroup
		FSMInboundBODTracker
		
	Dimensions
		Company.FinanceEnterpriseGroup
			dimension name is FinanceEnterpriseGroup
		Company
		Vendor
		DueDatePeriod
			is a weekly period dimension with year of DueDateYear
				current year is CurrentYear
				current period is CurrentPeriod
		Status
			Instance Selection
				where (Status.Unreleased
				or	   Status.Released
				or	   Status.Approved
				or	   Status.PendingApproval
				or	   Status.Rejected
				or	   Status.Amended)
		ResponsiblePerson
			dimension name is CurrentApprover
		APClerk
			dimension name is Processor
		InvoiceSource

	Measures
		DerivedCubeCount
		InvoiceAmount.CurrencyAmount
		DerivedUnpaidAmount

	Rule Blocks
		TriggerSupplierInvoiceRules
			trigger PayablesService.PayablesInvoiceService PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					Company.FinanceEnterpriseGroup
					Company
				Variables
					ActionCode
					include persistent fields from PayablesInvoice
					include persistent fields from Vendor
					include persistent fields from Vendor.VendorGroup
					include persistent fields from Vendor.first VendorContactRel.VendorContact
					include persistent fields from Vendor.CurrentAddressRel.VendorAddress
					include persistent fields from PurchaseFromLocation 					
					include persistent fields from FirstPurchaseOrder
					include persistent fields from Company
					include persistent fields from PayablesInvoiceDistributionRel.ICNCode
					include persistent fields from PayablesInvoiceDistributionRel

					include persistent fields from PayablesInvoiceAddOnChargeRel
					include persistent fields from PayablesInvoiceDetailRel
					include persistent fields from TaxRateRel
					include persistent fields from EntityTaxCodeRel
					include persistent fields from InventoryCompanyRel

					include persistent fields from RemitToCode
					include persistent fields from RemitToCode.CurrentAddressRel.VendorAddress
					include persistent fields from VendorLocationRemitToCodesRel
					include persistent fields from VendorLocationRemitToCodesRel.VendorLocation.RemitToPrimaryAddressRel.VendorAddress
					include persistent fields from Company.GeneralLedgerCompany
					include persistent fields from Company.GeneralLedgerCompany.AccountingEntity
					include persistent fields from Company.FinanceEnterpriseGroup
					include persistent fields from PayablesInvoicePaymentRel
					include persistent fields from CashLedgerPayablesPaymentRel
					include persistent fields from PayablesInvoiceDistributionRel.PayablesInvoiceDistribution.PayablesTaxDetailRel
					include persistent fields from Location
					bod id.VariationID
						variable name is VariationId
					Company.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is AccountingEntity
					Company
						variable name is GeneralLedgerCompany
					InvoiceHoldCode
						variable name is InvoiceHoldCode
					PayablesInvoicePaymentRel.Enclosure
						variable name is Enclosure
					DerivedSeparatePayment
						variable name is SeparatePayment
					DueDate
						variable name is DueDate
					TermsCode.ProcessType
						variable name is TCProcessType
					TermsCode.Description.Desc[1]
						variable name is TCDescription
					TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
						variable name is TCDiscountPercent
					TransientPaymentDate
						variable name is CheckDate
					Company.GeneralLedgerCompany.AccountingEntity.AddressCode.PostalAddress.Country
						variable name is CountryCode
					PayVendor.TaxID
						variable name is PayVendorTaxID
					PayVendor.VendorName
						variable name is PayVendorName

		DisplayCalculateTaxInput
			display "="
			display "DisplayCalculateTaxInput:TXXP:Invoice=<PayablesInvoice.Invoice>:Function=<CalculateTax.Function>"


























































































































		DisplayCalculateTaxOutput
			display "="
			display "DisplayCalculateTaxOutput:TXXP:Invoice=<PayablesInvoice.Invoice>:Function=<CalculateTax.Function>"






























































































































































		DisplayCalcTermsValues
			display "DisplayCalculateTermsValues"





































		DisplayPayablesInvoiceTax
			display "DisplayPayablesInvoiceTax:Invoice=<Invoice>"

























		DoInvoiceCreateSumoLogging
			log untranslatable:"Invoice<Invoice>;Created<create date>;InvoiceSource<this instance(locale of blank).InvoiceSource>."	

		NewPerformDistributionCodeProcessing					

			if (TransientTaxTableInvoicedAmount entered)						
				LocalTaxAmount				= TransientTaxTableInvoicedAmount	
				LocalTaxTableInvoicedAmount	= TransientTaxTableInvoicedAmount	
			else																
				if (TaxAmount not entered
				and MatchProcessType.Expense

				and DerivedTaxMethodInvOrAcc.Invoiced		//	IEFIN-92081 - Replacing "and TaxType.Invoiced"
				and CalculateTax.OutputTotalTaxAmount entered)
					if (TaxEntityUsesThirdPartyTax)				
						TaxAmount = CalculateTax.OutputTotalTaxAmount
					LocalTaxAmount = CalculateTax.OutputTotalTaxAmount
				else
					if (TaxAmount entered)
						LocalTaxAmount = TaxAmount
					else
						if (PayablesInvoiceTaxRel.TotalInvoicedTaxAmount entered)	
							LocalTaxAmount = PayablesInvoiceTaxRel.TotalInvoicedTaxAmount


			if (PayablesInvoiceTaxRel.EnteredTaxableAmount entered)					
				LocalTaxableAmount	= PayablesInvoiceTaxRel.EnteredTaxableAmount	
			else																	
			if (PayablesInvoiceTaxRel.TaxDetails.TaxableAmount entered)				
				LocalTaxableAmount = PayablesInvoiceTaxRel.TaxDetails.TaxableAmount	
			else																	
			if (TaxAmount entered)													
				LocalTaxableAmount = InvoiceAmount.CurrencyAmount - TaxAmount		
			else																	
				LocalTaxableAmount = InvoiceAmount.CurrencyAmount					



			if (OldLinkedTaxDistributionsRel exists)			


				ActionType = ActionType.CreateType
				include ProcessTaxControl
				ActionType = ActionType.UpdateType



			invoke DeleteDistributionCodeDistributions OldDistributionsRel	



			if (DistributionCode not entered)

				include UpdateErrorRecords


			LocalDistributionCode = DistributionCode


			if (TaxCode entered																
			and TransientLineTax)															
				for each DistributionCodeDetailRel											
					constraint (each.DistributionAmount entered								
					or          each.DistributionPercent entered)							
						"AllDistributionCodeLinesMustHaveAn_\AmountOr_\PercentToLinkTax"	



			if (PayablesInvoiceTaxRel exists
			and PayablesInvoiceTaxRel.LinkedToDistributions
			and !TransientLineTax)
				TransientLineTax	= PayablesInvoiceTaxRel.LinkedToDistributions



			if (instance count of DistributionCodeDetailRel.PayablesDistributionCodeDetail > 30)
				BackgroundProcessing				= BackgroundProcessing.DistributionCode

				if  (InterfaceInProcess
				and  GLTJournalizeGroup	entered)
					LocalAsyncId	= OriginatingInterfaceRun.AsyncId
				invoke PerformDistributionCodeProcessing PayablesDistributionCodeDetail in background 
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmPayablesCompany		= Company
					invoked.PrmPayablesInvoice		= this instance.PayablesInvoice
					invoked.PrmTransientLineTax		= TransientLineTax			
					invoked.PrmTaxTableInvoicedAmount	= LocalTaxTableInvoicedAmount	
					invoked.PrmTaxMethod			= DerivedTaxMethodInvOrAcc			
					invoked.PrmDistributionCode		= LocalDistributionCode				
					invoked.PrmTaxAmount			= LocalTaxAmount					
					invoked.PrmTaxableAmount		= LocalTaxableAmount				
					if  (InterfaceInProcess)
						invoked.PrmBalanceOrRelease = TransientBalanceOrRelease
						invoked.PrmJournalizeGroup	= GLTJournalizeGroup
					invoked.PrmDistCodeAccount		= TransientDistCodeAccount	
					invoked.PrmUnitsAmount			= TransientUnitsAmount		
				if  (InterfaceInProcess
				and  GLTJournalizeGroup	entered)
					invoke Update OriginatingInterfaceRun
						invoked.AsyncId		= LocalAsyncId

				if (ErrorsExists)
					include UpdateErrorRecords

			else









				if (UseProcessDistributionCode2)
					invoke ProcessDistributionCodeNew			
						invoked.PrmTaxTableInvoicedAmount		= LocalTaxTableInvoicedAmount
						invoked.PrmTaxMethod					= DerivedTaxMethodInvOrAcc
						invoked.PrmDistributionCode				= LocalDistributionCode
						invoked.PrmTaxAmount					= LocalTaxAmount
						invoked.PrmTaxableAmount				= LocalTaxableAmount
						invoked.PrmLinkedTax					= TransientLineTax
						invoked.PrmUnitsAmount					= TransientUnitsAmount		
				else
					invoke ProcessDistributionCode		
						invoked.PrmTaxTableInvoicedAmount		= LocalTaxTableInvoicedAmount
						invoked.PrmTaxMethod					= DerivedTaxMethodInvOrAcc
						invoked.PrmDistributionCode				= LocalDistributionCode
						invoked.PrmTaxAmount					= LocalTaxAmount
						invoked.PrmTaxableAmount				= LocalTaxableAmount
						invoked.PrmLinkedTax					= TransientLineTax
						invoked.PrmUnitsAmount					= TransientUnitsAmount







		CreateEnteredTaxCodeRemovedComment		

			invoke Create PayablesInvoiceComment
				invoked.Company			= Company
				invoked.PayablesInvoice	= this instance.PayablesInvoice
				invoked.Title			= "EnteredTaxCodeRemoved"
				invoked.Type			= "N"
				invoked.SupplierCanView	= true
				invoked.Comment			= "The Distribution Code has a Tax Code; therefore, the entered Tax Code was removed."


		DeleteEnteredTaxCodeRemovedComment		

			for each PayablesInvoiceCommentRel
				if (each.Title = "EnteredTaxCodeRemoved")
					invoke Delete each


		CreateShortPayComment		

			invoke Create PayablesInvoiceComment
				invoked.Company			= Company
				invoked.PayablesInvoice	= this instance.PayablesInvoice
				invoked.Title			= "Short_Paid"		
				invoked.Type			= "A"
				invoked.SupplierCanView	= true
				invoked.Comment			= "The tax charged by the vendor on this invoice was incorrect and subsequently removed."

		CreateTaxOffsetTransaction

			invoke Create PayablesInvoiceDistribution
				assign result to LocalPayablesInvoiceTaxDistribution
				invoked.Company							= Company
				invoked.PayablesInvoice					= PayablesInvoice

				invoked.GLFinanceCodeBlock				= LocalPostToAccount
				invoked.GLTTransactionCodeBlock			= LocalPostToAccount
				invoked.GLTSystem						= "AP"
				invoked.GLTGeneralLedgerEvent			= "AP"
				invoked.CreateAlternateGLTransDetail	= true
				invoked.GLTransactionAmount				= LocalReversalAmount
				invoked.TaxRate							= LocalTaxRate				
				invoked.TaxCode							= LocalTaxCode
				invoked.TaxableAmount					= LocalTaxableAmount
				invoked.GLTCurrencyCode					= InvoiceCurrency
				invoked.InvoiceCurrency					= InvoiceCurrency
				invoked.GLTTransactionDate				= LocalPostDate
				invoked.GLTPostingDate					= LocalPostDate
				invoked.DistributionDate				= LocalPostDate				
				invoked.GLTDocumentNumber				= LocalReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
				invoked.Description						= Description
				invoked.DistributionAmount.ExchangeDate	= LocalPostDate
				invoked.DistributionReference			= Reference
				invoked.GLTJournalizeGroup				= LocalJournalizeGroup



			invoke AdjustDistributionsForCurrencyRounding
			invoke Release LocalPayablesInvoiceTaxDistribution.PayablesInvoiceDistribution



		CreateTaxTransactionPrepayment


			initialize LocalCreateTaxDistributions
			LocalCreateTaxDistributions.FinanceStructure		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
			LocalCreateTaxDistributions.TaxTable				= CalculateTax.TaxTable
			LocalCreateTaxDistributions.DistributionAmount		= TaxAmount
			if (!LocalCreateTaxDistributions.PerformCreateTaxDistributions)
				constraint (LocalCreateTaxDistributions.OutputErrorNumber not entered)
					"<LocalCreateTaxDistributions.OutputErrorMessage>"




		ProcessTierDiscounts

			if  ((action type.Create
			and   AllowableAmountForDiscount entered)
			or   (AllowableAmountForDiscount changed
			and  !TransientChangingVendor))
				if (!MultiplePayablesInvoicePaymentRelExists
				and !IsRecurringInvoice)

					invoke Unreleased.UpdateDiscountFromHeader first PayablesInvoicePaymentRel
						invoked.TransientAllowableAmount	= AllowableAmountForDiscount

					if  (DiscountPercent entered
					and (DiscountAmount.CurrencyAmount !entered
					or   AllowableAmountForDiscount changed))

						LocDiscAmt						= AllowableAmountForDiscount * DiscountPercent	
						DiscountAmount.CurrencyAmount	= LocDiscAmt									
						DiscountAmount.ExchangeDate 	= InvoiceAmount.ExchangeDate

				if (DiscountPercent1 entered)

					LocDiscAmt		= DiscountPercent1 * AllowableAmountForDiscount		
					DiscountAmount1	= LocDiscAmt										
				else
					if (DiscountAmount1 entered)
						DiscountPercent1 = DiscountAmount1 / AllowableAmountForDiscount

				if (DiscountPercent2 entered)

					LocDiscAmt		= DiscountPercent2 * AllowableAmountForDiscount		
					DiscountAmount2	= LocDiscAmt										
				else
					if (DiscountAmount2 entered)
						DiscountPercent2 = DiscountAmount2 / AllowableAmountForDiscount

				if (DiscountPercent3 entered)

					LocDiscAmt		= DiscountPercent3 * AllowableAmountForDiscount		
					DiscountAmount3	= LocDiscAmt										
				else
					if (DiscountAmount3 entered)
						DiscountPercent3 = DiscountAmount3 / AllowableAmountForDiscount

			if 	(DiscountAmount1 entered
			and	(DiscountPercent1 not entered
			or   DiscountAmount1 changed))
				if (DiscountAmount1 changed)
					if (InvoiceType.CreditMemo			
					or  InvoiceType.PrepaymentCredit)	
						if (DiscountAmount1 < AllowableAmountForDiscount)	
							initialize DiscountPercent1	
						else							
							DiscountPercent1 = DiscountAmount1 / AllowableAmountForDiscount	
					else
						if (DiscountAmount1 > AllowableAmountForDiscount)
							initialize DiscountPercent1
						else
							DiscountPercent1 = DiscountAmount1 / AllowableAmountForDiscount
				else
					if (AllowableAmountForDiscount entered)
						DiscountPercent1 = DiscountAmount1 / AllowableAmountForDiscount
					else
						DiscountPercent1 = DiscountAmount1 / InvoiceAmount.CurrencyAmount

			if  (DiscountPercent1 entered
			and (DiscountAmount1 not entered
			or   DiscountPercent1 changed))
				if (AllowableAmountForDiscount entered)

					LocDiscAmt		= DiscountPercent1 * AllowableAmountForDiscount		
					DiscountAmount1 = LocDiscAmt										
				else

					LocDiscAmt		= DiscountPercent1 * InvoiceAmount.CurrencyAmount	
					DiscountAmount1	= LocDiscAmt										


			if  (DiscountAmount2 entered
			and	(DiscountPercent2 not entered
			or	 DiscountAmount2 changed))
				if (DiscountAmount2 changed)
					if (InvoiceType.CreditMemo			
					or  InvoiceType.PrepaymentCredit)	
						if (DiscountAmount2 < AllowableAmountForDiscount)	
							initialize DiscountPercent2	
						else							
							DiscountPercent2 = DiscountAmount2 / AllowableAmountForDiscount	
					else
						if (DiscountAmount2 > AllowableAmountForDiscount)
							initialize DiscountPercent2
						else
							DiscountPercent2 = DiscountAmount2 / AllowableAmountForDiscount
				else
					if (AllowableAmountForDiscount entered)
						DiscountPercent2 = DiscountAmount2 / AllowableAmountForDiscount
					else
						DiscountPercent2 = DiscountAmount2 / InvoiceAmount.CurrencyAmount

			if  (DiscountPercent2 entered
			and (DiscountAmount2 not entered
			or   DiscountPercent2 changed))
				if (AllowableAmountForDiscount entered)

					LocDiscAmt		= DiscountPercent2 * AllowableAmountForDiscount		
					DiscountAmount2 = LocDiscAmt										
				else

					LocDiscAmt		= DiscountPercent2 * InvoiceAmount.CurrencyAmount	
					DiscountAmount2	= LocDiscAmt										

			if  (DiscountAmount3 entered
			and	(DiscountPercent3 not entered
			or   DiscountAmount3 changed))
				if (DiscountAmount3 changed)
					if (InvoiceType.CreditMemo			
					or  InvoiceType.PrepaymentCredit)	
						if (DiscountAmount3 < AllowableAmountForDiscount)	
							initialize DiscountPercent3	
						else							
							DiscountPercent3 = DiscountAmount3 / AllowableAmountForDiscount	
					else
						if (DiscountAmount3 > AllowableAmountForDiscount)
							initialize DiscountPercent3
						else
							DiscountPercent3 = DiscountAmount3 / AllowableAmountForDiscount
				else
					if (AllowableAmountForDiscount entered)
						DiscountPercent3 = DiscountAmount3 / AllowableAmountForDiscount
					else
						DiscountPercent3 = DiscountAmount3 / InvoiceAmount.CurrencyAmount

			if  (DiscountPercent3 entered
			and (DiscountAmount3 not entered
			or   DiscountPercent3 changed))
				if (AllowableAmountForDiscount entered)

					LocDiscAmt		= DiscountPercent3 * AllowableAmountForDiscount		
					DiscountAmount3 = LocDiscAmt										
				else

					LocDiscAmt		= DiscountPercent3 * InvoiceAmount.CurrencyAmount	
					DiscountAmount3	= LocDiscAmt										



		EditTermsData		


			initialize GoTo235End
			if (!Status.Unreleased			
			and !Status.PendingApproval)	
				GoTo235End = true			
			else							
			if (ActionType.UpdateType									
			and DiscountDate 					not entered
			and DiscountPercent 				not entered
			and DiscountAmount.CurrencyAmount 	not entered
			and AllowableAmountForDiscount 		not entered
			and TermsCode						not entered)	
				if (DueDate not entered)
					if (SaveDueDate entered)
						DueDate 	= SaveDueDate
					else
						DueDate = old DueDate
						SaveDueDate = DueDate		
				initialize DiscountAmount
				GoTo235End = true
			else

				if  (!MatchProcessType.Expense
				and  TermsCode entered
				and  !TaxAdjustment.IgnoreProductOnly
				and  !TaxAdjustment.Calculate
				and  !TaxAdjustment.IgnoreProductAndAOC)

					if  (TaxCode entered
					and  EntityTaxCodeRel.AccruedOrInvoiced.Invoiced
					and  IsTaxAfterTerms)

						constraint (TaxAmount entered)
							"TaxAmountRequiredIfDiscountAmountCalculatedAfterTax"  

						AllowableAmountForDiscount = CalculatedAllowableAmount

				initialize CalculateTerms
				if (TermsCode entered)
					LocalTermsCalculation = Vendor.TermsCalculation
					if (LocalTermsCalculation not entered)
						LocalTermsCalculation = Company.TermsCalculation
					if (IsChargebackSubType
					or !MatchProcessType.Expense)		
						if (LocalTermsCalculation.UseEarliestReceiptDate)
							if (first PurchaseOrderReceiptsRel.ReceivedDate entered)
								CalculateTerms.TransactionDate = first PurchaseOrderReceiptsRel.ReceivedDate
							else
							if (first PurchaseOrderReceiptSet3Rel.ReceivedDate entered)
								CalculateTerms.TransactionDate = first PurchaseOrderReceiptSet3Rel.ReceivedDate
							else
								CalculateTerms.TransactionDate = InvoiceDate
						else
						if (LocalTermsCalculation.UseLatestReceiptDate)
							if (last PurchaseOrderReceiptsRel.ReceivedDate entered)
								CalculateTerms.TransactionDate = last PurchaseOrderReceiptsRel.ReceivedDate
							else
							if (last PurchaseOrderReceiptSet3Rel.ReceivedDate entered)
								CalculateTerms.TransactionDate = last PurchaseOrderReceiptSet3Rel.ReceivedDate
							else
								CalculateTerms.TransactionDate = InvoiceDate
						else
						if (LocalTermsCalculation.UseShipToArriveDate)
							if (FirstPurchaseOrder.ShipToArriveDate entered)
								CalculateTerms.TransactionDate = FirstPurchaseOrder.ShipToArriveDate
							else
							if (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipToArriveDate entered)
								CalculateTerms.TransactionDate = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipToArriveDate
							else
								CalculateTerms.TransactionDate = InvoiceDate

					if  (MatchProcessType.Expense		
					and !TaxEntityUsesThirdPartyTax
					and  IsTaxAfterTerms
					and  TaxAmount !entered
					and  TaxCode entered)
						if (TaxCode.TaxType.TaxTableCode)
							LoopCounter = 1
							while (LoopCounter <= 8)

								if (CalculateTax.TaxTable.TaxTableOutput[LoopCounter].AccrualFlag = "I")
									constraint (TaxAmount entered)
										"TaxAmountRequiredIfDiscountAmountIsCalculatedAfterTax"
								increment LoopCounter
						else
							if (DerivedTaxMethodInvOrAcc.Invoiced)
								constraint (TaxAmount entered)
									"TaxAmountRequiredIfDiscountAmountIsCalculatedAfterTax"

					AllowableAmountForDiscount = CalculatedAllowableAmount		

					if (CalculateTerms.TransactionDate not entered)
						if (LocalTermsCalculation.UseReceiptOfInvoiceDate
						and ReceiptOfInvoiceDate > InvoiceDate)
							CalculateTerms.TransactionDate = ReceiptOfInvoiceDate
						else
							CalculateTerms.TransactionDate = InvoiceDate
						if (AllowableAmountForDiscount entered)
							CalculateTerms.TransactionAmount = AllowableAmountForDiscount
						else
							if (DiscountCode.DiscountPoint = 1		
							and MatchAmount entered)
								CalculateTerms.TransactionAmount = MatchAmount
							else
								CalculateTerms.TransactionAmount = InvoiceAmount.CurrencyAmount








					if (InvoiceDate changed)							
						CalculateTerms.TransactionDate	= InvoiceDate	










					include DisplayCalcTermsValues
					LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger
					include DisplayCalcTermsValues
					constraint (CalculateTerms.OutputErrorNumber not entered)
						"<CalculateTerms.OutputErrorMessage>"

					if (InvoiceSource.Payroll
					or  InvoiceSource.Tax
					or  InvoiceSource.Garnishment
					or  InvoiceSource.HR)
						constraint (CalculateTerms.ProcIndicator != "M")
							"DiscountAmountCannotBeGreaterThanInvoiceAmount"              

					if (ActionType.CreateType
					and (CalculateTerms.ProcIndicator = "M"
					or	 CalculateTerms.ProcIndicator = "S"))
						constraint (NumberOfRecurringInvoices not entered)
							"CannotRecur;MultiplePaymentsExist"                     
						constraint (RecurringFrequency not entered)
							"CannotRecur;MultiplePaymentsExist"                     

					if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].MultiplePayment entered)
						ApinwsXXMultipleAppRecs = true
						DoMultipleTermsPayments = true		

			if (TermsCode entered
			and !GoTo235End)
				if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate not entered
				and CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent not entered
				and CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount not entered)
					CalculateTerms.AllowedAmount = blank
				DueDate 						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
				Anticipation 					= CalculateTerms.Anticipation
				DiscountDate					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
				DiscountAmount.ExchangeDate 	= InvoiceAmount.ExchangeDate 
				DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				DiscountPercent					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
				DiscountAmount.CurrencyAmount	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
				GoTo235End						= true		

				if ((Status.Unreleased												
				or   Status.PendingApproval)										
				and (DiscountPercent			   	entered							
				or 	 DiscountAmount.CurrencyAmount 	entered))						
					AllowableAmountForDiscount 		= CalculateTerms.AllowedAmount	

				if (ActionType.CreateType
				or (ActionType.UpdateType		
				and TermsCode changed))
					DiscountDate1 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					DiscountPercent1 	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
					DiscountAmount1		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
					DiscountDate2 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
					DiscountPercent2 	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
					DiscountAmount2		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountAmount
					DiscountDate3		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
					DiscountPercent3	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent
					DiscountAmount3		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountAmount

				if (ApinwsXXMultipleAppRecs)
					if (AllowableAmountForDiscount not entered)
						LocDiscAmt 	= InvoiceAmount.CurrencyAmount * CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
						DiscountAmount.CurrencyAmount 	= LocDiscAmt	
						LocDiscAmt						= InvoiceAmount.CurrencyAmount * DiscountPercent1
						DiscountAmount1					= LocDiscAmt	
						LocDiscAmt						= InvoiceAmount.CurrencyAmount * DiscountPercent2
						DiscountAmount2					= LocDiscAmt	
						LocDiscAmt						= InvoiceAmount.CurrencyAmount * DiscountPercent3
						DiscountAmount3					= LocDiscAmt	
					else
						LocDiscAmt 	= AllowableAmountForDiscount * CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
						DiscountAmount.CurrencyAmount 	= LocDiscAmt	
						LocDiscAmt						= AllowableAmountForDiscount * DiscountPercent1
						DiscountAmount1					= LocDiscAmt	
						LocDiscAmt						= AllowableAmountForDiscount * DiscountPercent2
						DiscountAmount2					= LocDiscAmt	
						LocDiscAmt						= AllowableAmountForDiscount * DiscountPercent3
						DiscountAmount3					= LocDiscAmt	

			if (FloatDays not entered)						
				if (Vendor.FloatDays entered)				
					FloatDays	= Vendor.FloatDays			
				else										
					FloatDays	= Company.FloatDays			

			if (FloatDays entered)							
				if (DiscountDate entered)					
					DiscountDate += FloatDays as days		
				if (DiscountDate1 entered)					
					DiscountDate1 += FloatDays as days		
				if (DiscountDate2 entered)					
					DiscountDate2 += FloatDays as days		
				if (DiscountDate3 entered)					
					DiscountDate3 += FloatDays as days		
				if (Vendor.ApplyFloatDaysToDueDate			
				and DueDate entered)						
					DueDate += FloatDays as days			

			if (InvoiceAmount.CurrencyAmount not entered
			and !GoTo235End)
				initialize DiscountDate
				initialize DiscountPercent
				initialize DiscountAmount.CurrencyAmount
				initialize AllowableAmountForDiscount

			if ((DiscountDate     				entered
			or   DiscountPercent   				entered
			or   DiscountAmount.CurrencyAmount 	entered
			or   AllowableAmountForDiscount 	entered)
			and !GoTo235End)
				AllowableAmountForDiscount 		= CalculatedAllowableAmount
				DiscountAmount.CurrencyAmount 	= AllowableAmountForDiscount * DiscountPercent	
				include ProcessTierDiscounts


			if (IsChargebackSubType
			and !GoTo235End)
				if (DiscountDate 						entered
				and DiscountAmount.CurrencyAmount 	not entered)
					initialize DiscountDate
					initialize DiscountPercent
					initialize AllowableAmountForDiscount
				if (AllowableAmountForDiscount not entered)
					if (CalculateTerms.AllowedAmount entered)
						AllowableAmountForDiscount	= CalculateTerms.AllowedAmount
					else
						AllowableAmountForDiscount	= InvoiceAmount.CurrencyAmount

			if ((DiscountDate     				entered
			or   DiscountPercent   				entered
			or   DiscountAmount.CurrencyAmount 	entered
			or   AllowableAmountForDiscount 	entered)
			and !GoTo235End)
				if (DiscountDate1 		entered
				or  DiscountAmount1 	entered
				or  DiscountPercent1 	entered)
					if (DiscountPercent1 not entered
					and DiscountAmount1 entered)
						if (AllowableAmountForDiscount entered)
							DiscountPercent1 = DiscountAmount1 / AllowableAmountForDiscount
						else
							DiscountPercent1 = DiscountAmount1 / InvoiceAmount.CurrencyAmount
					if (DiscountPercent1 entered
					and DiscountAmount1 not entered)
						if (AllowableAmountForDiscount entered)
							DiscountAmount1 = DiscountPercent1 * AllowableAmountForDiscount
						else
							DiscountAmount1 = DiscountPercent1 * InvoiceAmount.CurrencyAmount
				if (DiscountDate2 		entered
				or  DiscountAmount2 	entered
				or  DiscountPercent2 	entered)
					if (DiscountPercent2 not entered
					and DiscountAmount2 entered)
						if (AllowableAmountForDiscount entered)
							DiscountPercent2 = DiscountAmount2 / AllowableAmountForDiscount
						else
							DiscountPercent2 = DiscountAmount2 / InvoiceAmount.CurrencyAmount
					if (DiscountPercent2 entered
					and DiscountAmount2 not entered)
						if (AllowableAmountForDiscount entered)
							DiscountAmount2 = DiscountPercent2 * AllowableAmountForDiscount
						else
							DiscountAmount2 = DiscountPercent2 * InvoiceAmount.CurrencyAmount
				if (DiscountDate3 		entered
				or  DiscountAmount3 	entered
				or  DiscountPercent3 	entered)
					if (DiscountPercent3 not entered
					and DiscountAmount3 entered)
						if (AllowableAmountForDiscount entered)
							DiscountPercent3 = DiscountAmount3 / AllowableAmountForDiscount
						else
							DiscountPercent3 = DiscountAmount3 / InvoiceAmount.CurrencyAmount
					if (DiscountPercent3 entered
					and DiscountAmount3 not entered)
						if (AllowableAmountForDiscount entered)
							DiscountAmount3 = DiscountPercent3 * AllowableAmountForDiscount
						else
							DiscountAmount3 = DiscountPercent3 * InvoiceAmount.CurrencyAmount


				if (DiscountAmount.CurrencyAmount not entered)
					DiscountAmount.CurrencyAmount = AllowableAmountForDiscount * DiscountPercent

				if (DiscountAmount1 not entered)
					DiscountAmount1 = AllowableAmountForDiscount * DiscountPercent1

				if (DiscountAmount2 not entered)
					DiscountAmount2 = AllowableAmountForDiscount * DiscountPercent2

				if (DiscountAmount3 not entered)
					DiscountAmount3 = AllowableAmountForDiscount * DiscountPercent3

				if (DiscountAmount.CurrencyAmount not entered)
					initialize DiscountAmount.FunctionalAmount.EnteredCurrencyAmount


				if (InvoiceCurrency != PayGroup.BaseCurrency)
					if (ActionType.UpdateType
					and DiscountAmount.CurrencyAmount 							not changed
					and DiscountAmount.FunctionalAmount.EnteredCurrencyAmount 	not changed
					and InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		not changed)
						NextSentence = true
					else
						if (DiscountAmount.CurrencyAmount 							not entered
						and DiscountAmount.FunctionalAmount.EnteredCurrencyAmount 	not entered)
							NextSentence = true
						else
							if (DiscountAmount.FunctionalAmount.EnteredCurrencyAmount entered)
								NextSentence = true
				else
					DiscountAmount.FunctionalAmount.EnteredCurrencyAmount = DiscountAmount.CurrencyAmount

				if (TermsCode 							entered		
				and DiscountAmount.CurrencyAmount 	not entered		
				and DiscountPercent					not entered)	
					initialize AllowableAmountForDiscount			

				if (InvoiceType.CreditMemo
				or  InvoiceType.PrepaymentCredit)
					include FlipInvoiceAmountFieldsToNeg
					include FlipDiscountAmountFieldsToNeg
					if (AllowableAmountForDiscount > 0)
						AllowableAmountForDiscount *= -1
				else		
					include FlipInvoiceAmountFieldsToPos		
					include FlipDiscountAmountFieldsToPos		
					if (AllowableAmountForDiscount < 0)			
						AllowableAmountForDiscount *= -1		

				if (InvoiceAmount.CurrencyAmount > 0)
					constraint (DiscountAmount.CurrencyAmount >= 0)
						"DiscountAndInvoiceAmtsMustHaveSameSign"                 
					constraint (AllowableAmountForDiscount >= 0)
						"AllowableAndInvoiceAmtsMustHaveSameSign"                
				if (InvoiceAmount.CurrencyAmount < 0)
					constraint (DiscountAmount.CurrencyAmount <= 0)
						"DiscountAndInvoiceAmtsMustHaveSameSign"                 
					constraint (AllowableAmountForDiscount <= 0)
						"AllowableAndInvoiceAmtsMustHaveSameSign"                


				if (!InvoiceType.CreditMemo
				and !InvoiceType.PrepaymentCredit)
					constraint (DiscountAmount.CurrencyAmount <= InvoiceAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount.CurrencyAmount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
					constraint (DiscountAmount2 <= InvoiceAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount2>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
					constraint (DiscountAmount3 <= InvoiceAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount3>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
					if (MatchProcessType.Expense)		
						constraint (AllowableAmountForDiscount <= InvoiceAmount.CurrencyAmount)
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
					else
						constraint (AllowableAmountForDiscount <= CalculatedAllowableAmount)		
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanCalculatedGoods<CalculatedAllowableAmount>"	
				else
					constraint (DiscountAmount.CurrencyAmount >= InvoiceAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount.CurrencyAmount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"   
					constraint (DiscountAmount2 >= InvoiceAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount2>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"    
					constraint (DiscountAmount3 >= InvoiceAmount.CurrencyAmount)
						"DiscountAmount<DiscountAmount3>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
					if (MatchProcessType.Expense)		
						constraint (AllowableAmountForDiscount >= InvoiceAmount.CurrencyAmount)
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
					else
						constraint (AllowableAmountForDiscount >= CalculatedAllowableAmount)		
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanCalculatedGoods<CalculatedAllowableAmount>"	







		FindProcurementCardPayVendor	

			if (FirstPurchaseOrder.UseProcurementCard)
				LocalProcCardProgram	= first ProcurementCardRequestsRel.ProcurementCardProgram
				if (ProcurementCardProgramRel.Vendor entered)
					PayVendor			= ProcurementCardProgramRel.Vendor



		DefaultMatchProcessType		


			if (MatchProcessType not entered)
				if (FirstPurchaseOrder entered
				or  TransientInvoiceEntryTemplate.MatchInvoice)
					if (TransientAddOnChargeOnly)
						MatchProcessType = MatchProcessType.AOCOnly
					else
					if (FirstPurchaseOrder.Dropship)
						MatchProcessType = MatchProcessType.DropShip
					else
					if  (FirstPurchaseOrder entered
					and FirstPurchaseOrder.HasServiceLinesOnly)
						MatchProcessType = MatchProcessType.Service
					else
					if  (MatchReferenceNumber entered)
						MatchProcessType = MatchProcessType.ReceiptMatch
					else
						MatchProcessType = MatchProcessType.ReceiptMatch
				else
				if (ServiceContract entered)
					MatchProcessType = MatchProcessType.ServiceContract
				else
				if (FirstPurchaseOrder not entered
				and MatchReferenceNumber entered
				and Vendor.RequireMatchReference)
					MatchProcessType = MatchProcessType.ReceiptMatch
				else
				if (FirstPurchaseOrder not entered
				and !TransientInvoiceEntryTemplate.MatchInvoice)
					MatchProcessType = MatchProcessType.Expense


			if  (MatchProcessType.AOCOnly)

				MatchInvoice = MatchInvoice.AOCInvoice
			else
			if  (MatchProcessType.Expense)

				MatchInvoice = MatchInvoice.ExpenseInvoice
			else

				MatchInvoice = MatchInvoice.POInvoice



		414AddUpApds		// Called from "Prorate" Instance Action

			for each PayablesInvoiceDistribution set
				if (each.TaxCode entered
				and each.TaxSequenceNumber entered)
					DoNothing = true
				else
					if (MatchProcessType.Expense)
						if (each.TaxCode entered
						and each.TaxIndicator not entered)
							DoNothing = true
						else
							if (each.AddOnCharge entered)
								DoNothing = true
							else
								ApinwsTotalProrateAmt += each.DistributionAmount.CurrencyAmount





		530MoveAppaymentData		


			AppTranDiscAmt			= DiscountAmount.CurrencyAmount
			AppDueDate 				= DueDate
			AppDiscountRt			= DiscountPercent
			AppDiscDate				= DiscountDate

			if (TermsCode entered
			and ActionType.CreateType
			and CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].MultiplePayment entered)
				AppDueDate 			= ApinwsTermsDueDate
				AppTranPmtAmt		= ApinwsTermsPmtAmt
				ApinwsXXTranTotPmt	+= ApinwsTermsPmtAmt
				AppDiscountRt		= ApinwsTermsDiscountRt
				AppDiscDate			= ApinwsTermsDiscDate
				AppTranDiscAmt		= ApinwsTermsDiscAmt
				AppActCnvRate		= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				if (TermsCode entered
				and (ActionType.CreateType
				or   ActionType.UpdateType)
				and !ApinwsXXMultipleAppRecs)
					AppDueDate 			= DueDate
					AppDiscountRt		= DiscountPercent
					AppDiscDate			= DiscountDate
					AppTranPmtAmt		= InvoiceAmount.CurrencyAmount
					ApinwsXXTranTotPmt	= InvoiceAmount.CurrencyAmount
					AppTranDiscAmt		= DiscountAmount.CurrencyAmount
					AppActCnvRate		= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				else
					if (!ApinwsXXMultipleAppRecs)
						AppDueDate 			= DueDate
						AppDiscountRt		= DiscountPercent
						AppDiscDate			= DiscountDate
						AppTranPmtAmt		= InvoiceAmount.CurrencyAmount
						ApinwsXXTranTotPmt	= InvoiceAmount.CurrencyAmount
						AppTranDiscAmt		= DiscountAmount.CurrencyAmount
						AppActCnvRate		= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate


			if (TransientPaymentNumber entered
			and !MultiplePayablesInvoicePaymentRelExists)	
				if (TransientPaymentAmount !entered)
					if (TransientDiscountLost)
						TransientPaymentAmount	= InvoiceAmount.CurrencyAmount
					else
						if (initiating action = "PayablesInvoiceImport.InterfaceInvoices")
							TransientPaymentAmount	= InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
						else
							if (DiscountAmount.CurrencyAmount entered		
							and DiscountDate >= TransientPaymentDate)
								TransientPaymentAmount	= InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
							else
								TransientPaymentAmount	= InvoiceAmount.CurrencyAmount
				if (TransientPaymentAmount = InvoiceAmount.CurrencyAmount
				and DiscountAmount.CurrencyAmount entered)
					AppDiscLostFlg = true
				else
					AppDiscLostFlg = false
				if (InterfaceInProcess
				and TransientReportableAmount entered)
					NextSentence = true
				else
				if (IncomeCode	entered)
					TransientReportableAmount	= TransientPaymentAmount
			else
				AppDiscLostFlg = false

			if (TransientPaymentNumber entered)	
				AppActCnvRate = 1

			if (ActionType.UpdateType)

				for each MultiplePayablesInvoicePaymentRel
					invoke Update each
						initialize invoked.TransientCurrencyRefresh 
						invoked.CashCode								= CashCode
						invoked.BankTransactionCode						= BankTransactionCode
						invoked.DiscountCode							= DiscountCode
						invoked.DiscountAccount							= PayablesDiscountCodeDetailRel.DiscountAccount
						invoked.SkipPayablesDiscount					= true
						invoked.DiscountPercent							= AppDiscountRt
						invoked.DiscountDate							= AppDiscDate
						invoked.RevaluedBaseAmount.CurrencyAmount		= AppTranPmtAmt
						invoked.RevaluedBaseAmount.ExchangeDate			= InvoiceAmount.ExchangeDate 
						if (!IsSplitInvoice)
							invoked.DueDate								= AppDueDate		
							invoked.DiscountAmount.CurrencyAmount		= AppTranDiscAmt
						invoked.DiscountAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
						invoked.DiscountLost							= AppDiscLostFlg
						invoked.InvoiceGroup							= InvoiceGroup
						invoked.PayVendor								= PayVendor
						invoked.RemitToCode								= RemitToCode
						invoked.ProcessLevel							= ProcessLevel
						if (each.Status < 2)			
							invoked.PayGroup							= PayGroup
						invoked.Anticipation							= Anticipation
						invoked.AccrualCode								= AccrualCode
						invoked.IncomeCode								= IncomeCode
						invoked.VendorPaymentCurrency					= VendorPaymentCurrency
						invoked.VendorPaymentAmount						= VendorPaymentAmount
						if (!MultiplePayablesInvoicePaymentRelExists)
							if (TransientPaymentNumber	entered)
								invoked.TransactionNumber					= TransientPaymentNumber	
								invoked.CheckDate							= TransientPaymentDate
								invoked.BankCheckAmount						= TransientPaymentAmount
								invoked.NetPaymentAmount.CurrencyAmount		= TransientPaymentAmount
								invoked.NetPaymentAmount.ExchangeDate		= TransientPaymentDate 
							invoked.PaymentAmount.CurrencyAmount		= AppTranPmtAmt
							invoked.PaymentAmount.ExchangeDate			= InvoiceAmount.ExchangeDate 
							invoked.ReportableIncomeAmount				= TransientReportableAmount

				if (TransientPaymentNumber entered	
				or  UpdateCashLedgerPayablesPayment)	
					if (!MultiplePayablesInvoicePaymentRelExists
					and BankTransactionCode.BankTransactionType.CashPayment)
						include CashLedgerPayablesPaymentProcessing
			else  
				DoCreatePayment = true

			initialize ApinwsTermsPmtAmt
			initialize ApinwsTermsDiscAmt
			initialize ApinwsTermsDueDate
			initialize ApinwsTermsDiscDate
			initialize ApinwsTermsDiscountRt

			if (!ActionType.CreateType)
				if (MultiplePayablesInvoicePaymentRelExists)
					ApinwsXXMultipleAppRecs = true








		PopulateTaxOverrideValues









			include DisplayLocalTaxTable
			initialize RemainingTaxAmount		

			LocalOverrideVariancePct	= TaxAmount / CalculateTax.OutputTotalTaxAmount
			LocalOutputTotalTaxAmount	= TaxAmount
			RemainingTaxAmount			= TaxAmount
			LocalRecoverableAmount	   *= LocalOverrideVariancePct
			LocalUnrecoverableAmount   *= LocalOverrideVariancePct

			LocalCounter = 1
			while (LocalCounter <= 8)
				LocalTaxTable.TaxTableOutput[LocalCounter].TaxAmount	*= LocalOverrideVariancePct
				LocalTaxTable.TaxTableOutput[LocalCounter].InTaxAmount	*= LocalOverrideVariancePct
				RemainingTaxAmount -= LocalTaxTable.TaxTableOutput[LocalCounter].TaxAmount
				increment LocalCounter



			if (RemainingTaxAmount != 0)	
				LocalTaxTable.TaxTableOutput[1].TaxAmount 	+= RemainingTaxAmount
				LocalTaxTable.TaxTableOutput[1].InTaxAmount += RemainingTaxAmount










		416AddTaxCodeApd		// Called from CreateExitRules, UpdateExitRules, & "CalculateRate" Instance Action


			if (LocalTaxEntity not entered)
				LocalTaxEntity = Company.AccountingEntity	

			if (ActionType.CreateType
			and TaxAdjustment.Calculate		
			and !MatchProcessType.Expense)
				include 416AddTaxCodeApdContinued
			else
				if (ActionType.CreateType
				and !ApinwsTaxIndSwitch)
					include 416AddTaxCodeApdContinued
				else
					if (ActionType.CreateType
					and ApinwsSumDtlTaxAmt not entered)
						DoNothing = true
					else
						include 416AddTaxCodeApdContinued


		416AddTaxCodeApdContinued		


			if (!ApinwsTaxIndSwitch
			and !TransientUpdateTaxCode			
			and TaxEntityRel.TaxableAmountEdit
			and MatchProcessType.Expense
			and	ApinwsXXGoodsTxblAmt entered)	
				ApinwsAccumulateTxbl = ApinwsXXGoodsTxblAmt
			else
				if (TaxableAmount entered)
					ApinwsAccumulateTxbl = TaxableAmount
				else
					if (DerivedTaxMethodInvOrAcc.Accrued)
						ApinwsAccumulateTxbl = InvoiceAmount.CurrencyAmount		
					else
						ApinwsAccumulateTxbl = PayablesInvoiceTaxRel.TaxSystemTaxableAmount		


			if (ApinwsAccumulateTxbl entered)
				if (ApinwsCalcTaxRateSwitch
				or  Vendor.VendorClass.TaxOverride)
					CalculateTax.Function = "I"
				else
					CalculateTax.Function = "C"
				CalculateTax.ProcessLevel	= ProcessLevel			
				CalculateTax.VoucherNumber	= VoucherNumber			
				CalculateTax.Invoice		= Invoice				
				CalculateTax.Suffix			= Suffix				
				CalculateTax.CancelSequence	= CancelSequence		
				CalculateTax.TaxCode 		= TaxCode
				CalculateTax.InvoiceAmount 	= InvoiceAmount.CurrencyAmount
				CalculateTax.TaxAmount		= TaxAmount
				CalculateTax.TaxableAmount	= ApinwsAccumulateTxbl
				CalculateTax.TaxEntity		= Company.AccountingEntity
				CalculateTax.InvoiceCompany	= Company
				CalculateTax.InvoiceDate	= InvoiceDate
				CalculateTax.PaymentDate	= InvoiceDate
				CalculateTax.TaxDate		= InvoiceDate
				CalculateTax.TaxPointDate	= DerivedTaxPointDate	
				CalculateTax.ProductTaxCategory	= TaxCode.ProductTaxCategory	
				CalculateTax.System			= "AP"
				include LoadVertexGlobalInputFields
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput

				if (!CalculateTax.DoTaxCalculation
				and !DoShortPayProcess)
					constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"


				if (CalculateTax.TaxType.TaxTableCode)		
					if (PayablesInvoiceTaxRel.EnteredTaxAmount not entered)	
						LocalCounter = 1
						initialize TaxAmount
						while (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxCode entered
						and	   LocalCounter <= 8)
							if (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].AccrualFlag = "I")		

								ApinwsTTaxAmt += CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount		

							increment LocalCounter













				ApinwsXXTaxTable = CalculateTax.TaxTable


				if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualCode entered)
					ApinwsSaveApdAccrCode = CalculateTax.TaxTable.TaxTableOutput[1].AccrualCode


				TaxType = CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag			


			if (!ApinwsCalcTaxRateSwitch)	
				initialize CalculateTax.TaxTable
				CalculateTax.TaxTable = ApinwsXXTaxTable



			if  (!DoDetailTaxProcessing			
			and (ApinwsCalcTaxRateSwitch
			or  (((TaxAmount entered
			and    TaxType.Invoiced)			
			or     TaxType.Accrued)				
			and  CalculateTax.TaxType != "T")))
				if (TaxAdjustment.Calculate)
					AptxrwsTranTxblAmt = TaxableAmount
				CreateSingleTaxDst = true


				CalculateTax.TaxTable.TaxTableOutput[1].TaxRate = TaxAmount / AptxrwsTranTxblAmt

				if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")
					CalculateTax.TaxTable.TaxTableOutput[1].TaxRate = TaxAmount / InvoiceAmount.CurrencyAmount

				else
					CalculateTax.TaxTable.TaxTableOutput[1].TaxRate = TaxAmount / (InvoiceAmount.CurrencyAmount - TaxAmount)


			if (CreateSingleTaxDst
			and !ApinwsCalcTaxRateSwitch
			and !TaxAdjustment.Calculate)
				CalculateTax.OutputlTaxToleranceDiff = TaxAmount / TaxableAmount
				CalculateTax.TaxTable.TaxTableOutput[1].TaxRate = CalculateTax.OutputlTaxToleranceDiff


			if (Vendor.VendorClass.PostingOption entered)
				ApwsPostOption	= Vendor.VendorClass.PostingOption
			else
				ApwsPostOption	= Company.PostingOption


			if (PayablesInvoiceTaxRel.EnteredTaxAmount not entered)						
				LocalOutputTotalTaxAmount	= CalculateTax.OutputTotalTaxAmount

			else																		
				LocalOutputTotalTaxAmount	= PayablesInvoiceTaxRel.EnteredTaxAmount	


			LocalTaxTable							= CalculateTax.TaxTable
			LocalRecoverablePercent					= CalculateTax.RecoverablePercent
			LocalRecoverableAmount					= CalculateTax.RecoverableAmount
			LocalUnrecoverableAmount				= CalculateTax.UnrecoverableAmount


			if (TransientAcceptTaxOverride)				
				include PopulateTaxOverrideValues		
				initialize TransientAcceptTaxOverride	











































			include DisplayLocalTaxTable

			include 545CreateTaxDistributions



			if (action type.Create
			and !TransientLineTax
			and TaxEntityUsesSabrix
			and CalculateTax.TaxingJurisdiction entered)
				for each TaxDistributionsRel
					invoke Update each.PayablesTaxDetailRel
						invoked.TaxingJurisdiction	= 	CalculateTax.TaxingJurisdiction
						invoked.InformationMessage	=	CalculateTax.OneSourceInformationMessage
						invoked.SentToTaxEngine		=	not CalculateTax.NotSentToSabrix
						invoked.ShipToLocation		= 	Location


			if (ApwsLastDistSeq != ApwsDistSeqNbr
			and Status.Released
			and InvoiceType.MatchPrepayment
			and MatchPrepaymentMethod.PrepayFromInvoice)
				for each PayablesInvoiceDistributionRel
					if (each.Status.Unreleased)
						invoke Unreleased.Release each
					if (each.TaxCode entered
					and (each.TaxPoint.Invoice
					or   each.TaxPoint.GLPostDate)
					and !each.TaxIndicator.Taxable)
						ApwsCancelledFl = "N"
						invoke 585BuildTxTaxTrans each
							invoked.ApwsCancelledFl = ApwsCancelledFl
			ApwsLastDistSeq = ApwsDistSeqNbr
			ApinwsXXTranTotTax	+= ApwsTranTotTax
			ApinwsXXTranTotDist	+= ApwsTranTotDist
			ApinwsXXBaseTotDist	+= ApwsBaseTotDist

			initialize ApinwsAccumulateTxbl







		545CreateTaxDistributions		


			initialize LocalCreateTaxDistributions
			LocalCreateTaxDistributions.TaxTable							= LocalTaxTable
			LocalCreateTaxDistributions.JurisdictionTable					= CalculateTax.OutputJurisdictions	
			LocalCreateTaxDistributions.DistributionAmount					= LocalOutputTotalTaxAmount
			LocalCreateTaxDistributions.RecoverablePercent					= LocalRecoverablePercent
			LocalCreateTaxDistributions.RecoverableAmount					= LocalRecoverableAmount
			LocalCreateTaxDistributions.UnrecoverableAmount					= LocalUnrecoverableAmount
			LocalCreateTaxDistributions.ApinwsXX							= ApinwsXXTaxTable
			LocalCreateTaxDistributions.ApinwsUseTaxDistSw					= true
			LocalCreateTaxDistributions.ApinwsProcessNlandSw				= true
			LocalCreateTaxDistributions.PostingOption						= ApwsPostOption
			LocalCreateTaxDistributions.AssetFlag							= blank
			LocalCreateTaxDistributions.CreateSingleTaxDst					= CreateSingleTaxDst
			if  (InterfaceCreate)
				LocalCreateTaxDistributions.FromInterface					= true
				if  (TransientPostingStatus.History)
					LocalCreateTaxDistributions.Historical					= true
			if (!LocalCreateTaxDistributions.PerformCreateTaxDistributions)
				constraint (LocalCreateTaxDistributions.OutputErrorNumber not entered)
					"<LocalCreateTaxDistributions.OutputErrorMessage>"
			ApwsTranTotTax	+= LocalCreateTaxDistributions.OutputTotalTransactionTaxAmount
			ApwsTranTotDist	+= LocalCreateTaxDistributions.OutputTotalTransactionDistributionAmount
			ApwsBaseTotDist.FunctionalAmount.EnteredCurrencyAmount	+= LocalCreateTaxDistributions.OutputTotalBaseDistributionAmount	




		ReleaseExitRules		


			include ReleaseDistributionsAndPayments
			if (UsesMatrixApproval)
				for each APDistributionAggregationRel
					if (!each.Status.Released)
						invoke Update each
							invoked.Status = 1	
						invoke Release each.ResponsibilityMatrixApprovalProcessorRel

			if (Company.BypassThirdPartyTaxCallWhenICNExclude)	
				TransientExcludeAllLinesFromTaxCall = true
				for each TotalTran1TaxableDistributionRel
					if (!each.ICNCode.ExcludeFromTaxEstimate)
						TransientExcludeAllLinesFromTaxCall = false
						end for each

			if  ((TaxLineItemRel exists					
			or    !Company.DelayTaxProcessing)			
			and (TaxEntityUsesSabrix					
			or  (TaxEntityUsesVertex					
			and  TaxEntityRel.VertexCallMethod.ByTransaction)))	


				invoke CreateTaxHistoryForInvoice	
			invoke Purge TaxLineItemRel				//	FSM-29303 - Outside 'if' to pick up "ByLine" TLI's.

			if (!InvoiceType.Prepayment
			and !old Status.Amended						
			and (OriginatingInterfaceRun not entered	
			or   !OriginatingInterfaceRun.RunType.PayablesInvoiceInterface 
			or   OriginatingInterfaceRun.UpdateVendorBalance))
				include AddToVendorBalance
			LocalRunProgram = RunProgram.InvoiceRelease

			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				include ReleaseGLCommit

			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
			and CashCode.EditAvailableFunds)
				invoke UpdateCommittedFunds CashCodeFundEditRel

#ifdef module cam
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
				initialize LocalCustodialAccountEdit
				for each CustodialAccountEditRel
					LocalToAccountingEntity		= each.AccountingEntity
					LocalCustodialPosting 		= each.FinanceDimension10
					LocalCommittedAmount		= each.EditAmount
					LocalCustodialAccountEdit 	= each.CustodialAccountEdit
					if (CustodialDetailAmountRel exists)
						invoke UpdateCommittedAmount LocalCustodialAccountEdit













#endif


		UpdateAndCloseVendorReturn


			if (InvoiceType.CreditMemo
			and VendorReturn.VendorClaimType.CreditMemo
			and VendorReturn entered
			and VendorReturnRel exists)
				LocalAmount = sum VendorReturnDistributionsRel.DistributionAmount.CurrencyAmount  
				invoke UpdateCreditReceived VendorReturn		
					invoked.PrmCreditReceived   += LocalAmount * -1 


				if (VendorReturn.CreditReceived > VendorReturn.ReturnValue)			
					ActionCompleteMessage = VendorReturnCreditedMoreThanReturnedMessage

				if (VendorReturn.CreditReceived >= VendorReturn.ReturnValue
				and VendorReturnRel.Status.WaitingForVendorAction)			
					invoke WaitingForVendorAction.Close VendorReturnRel


		CheckRevaluedAmount		

			initialize ApwsDiff
			ApwsDiff = sum PayablesInvoicePaymentRel.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
			if (ApwsDiff != RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount)
				first PayablesInvoicePaymentRel.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount += (RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount - ApwsDiff)


		CheckProrateAmount		

			if (!ApinwsEnterProrateAmount = ApinwsHoldProrateAmount)
				ApwsDiff = ApinwsEnterProrateAmount - ApinwsHoldProrateAmount
				ApinwsXXTranTotDist -= first PayablesInvoiceDistributionSet1Rel.DistributionAmount.CurrencyAmount
				ApinwsXXBaseTotDist -= first PayablesInvoiceDistributionSet1Rel.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				invoke Update first PayablesInvoiceDistributionSet1Rel
					invoked.DistributionAmount.CurrencyAmount += ApwsDiff


		ReleaseDistributionsAndPayments		//	Called from "Release" Instance Action & "ReleaseBatchedPayables" Instance Action


			if ((old Status.Unreleased
			or   old Status.PendingApproval
			or   old Status.Approved)
			and  Status.Released)
				for each PayablesInvoicePaymentRel
					if (each.Status.Unreleased
					or  each.Status.UnreleasedManualPayment)
						invoke Release each
				
				if (OriginatingInterfaceRun entered
				and OriginatingInterfaceRun.JournalizeGroup entered)
					if (InterfaceInProcess												
					and instance count of UnreleasedDistributionsRel < 10)				
						GLTJournalizeGroup	= OriginatingInterfaceRun.JournalizeGroup	
					else 																
						initialize GLTJournalizeGroup									
						invoke UpdateJournalizeGroup PayablesInvoiceDistributionRel		

				if (IsNotPrepayment)


					include CreateAccrualOffset


				initialize LocalTaxAccrualAmount

				if (TaxEntityRel.UseTaxCodeAccounts)

					if (EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
						LocalTaxAccrualAmount	= PayablesInvoiceTaxRel.TaxSystemTaxAmount	


				else

					if (TaxEntityRel.AccruedOrInvoiced.Accrued)
						LocalTaxAccrualAmount	= PayablesInvoiceTaxRel.TaxSystemTaxAmount	












				if ((EntityTaxCodeRel.VATReverseIndicator		
				or   PayablesInvoiceTaxRel.VATReverseCharge)	



				or  (LocalTaxAccrualAmount entered				
				and IsNotPrepayment)		
				and !ShortPayCommentExists						
				and !TaxCode.TaxType.TaxTableCode)				

					for each PayablesInvoiceDistributionRel					

						if (each.IsAccruedVATTax				
						or  each.IsAccruedTaxDistribution)		
							LocalTaxAccrualAmount				= each.DistributionAmount.CurrencyAmount	
							LocalTaxDistributionAmount			= each.DistributionAmount
							LocalPayablesInvoiceDistribution	= each.PayablesInvoiceDistribution
							if (TaxAccrualUsesTaxEntity)	
								LocalTaxEntity		  = each.DistributionAccount.ToAccountingEntity	
							include CreateTaxAccrualOffset					

				else									

					if (TaxCode.TaxType.TaxTableCode)	
						for each PayablesInvoiceDistributionRel		
							LocalTaxCode	= each.TaxCode			


							if  (LocalEntityTaxCodeRel.VATReverseIndicator)	
								if  (each.IsAccruedVATTax
								or   each.IsAccruedTaxDistribution)		
									LocalTaxAccrualAmount				= each.DistributionAmount.CurrencyAmount
									LocalTaxDistributionAmount			= each.DistributionAmount
									LocalPayablesInvoiceDistribution	= each.PayablesInvoiceDistribution
									if (TaxAccrualUsesTaxEntity)	
										LocalTaxEntity		  = each.DistributionAccount.ToAccountingEntity	
									include CreateTaxAccrualOffset





			if (instance count of UnreleasedDistributionsRel < 10)	
				for each UnreleasedDistributionsRel
					invoke Release each
				if (ForIntercompanyBilling)	
					invoke ProcessIntoBillingDocuments IntercompanyBillingTransaction	
						invoked.PrmIntercompanyBillingGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	
						invoked.PrmOriginatingDocument				= reference to this instance	




				include CreateAccruedWithholdingDistributions

			else													

				invoke ReleaseSet PayablesInvoiceDistribution		
					invoked.PrmCompany			= Company			
					invoked.PrmPayablesInvoice	= PayablesInvoice	




		UnReleaseDistributionsAndPayments		//	Called from "Unrelease" Instance Action



			for each PayablesInvoiceDistribution set
				invoke Released.Unrelease each

			for each PayablesInvoicePaymentRel
				invoke Released.Unrelease each


		DoOneSourceCancel		





			for each TotalTran1TaxableDistributionRel
				invoke CreateTaxLineItem each
					invoked.PrmCreateFromCancel		= true

			if (TotalTran1TaxableDistributionRel exists)	
				include PopulateCalcTaxInputFields
				include LoadVertexGlobalInputFields
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput




		CancelInvoiceEdits

			if (PayablesInvoice.CompanySystemClosingControlRel.Control)		
				constraint (LocalCancelDate within PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate)
					"CancelDateOf<LocalCancelDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.End>"
			constraint (ProcurementCardStatement not entered)
				"CannotCancel,_\P-\CardInvoice"	 
			constraint (AmountPaid not entered)
				"CannotCancel;PaymentsHaveBeenMade"	       
			if (Suffix = 111
			and Status.Historical)
				constraint (!InvoiceType.CreditMemo)
					"CannotCancelCreditMemo;AppliedToInvoice"	        
			if  (Suffix = 888
			or   Suffix = 999)
				constraint (MatchProcessType.Expense)
					"CannotMaintainACancelled_\P\OInvoice"		   
			if (UnpostedDistributionsRel exists)
				constraint (!InvoiceSource.SubContractor)
					"CannotCancelUnpostedDistributionFromSubcontractor"	   
				constraint (!InvoiceSource.ExpenseInterface)
					"CannotCancelUnpostedDistributionsFromProjectInterface"	
				constraint (!InvoiceSource.TimeAndExpenseInterface)
					"CannotCancelUnpostedDistributionsFromEmployeeExpenseOrProjects"	

			if  (MatchProcessType.Expense
			and  !TaxEntityUsesThirdPartyTax
			and (!InvoiceType.MatchPrepayment
			and  !InvoiceType.Prepayment
			and  !InvoiceType.PrepaymentCredit))



				constraint (RoundedTotalTaxAmount						= DerivedTotalTaxAmountField	
				and			TotalDistributionAmount.TransactionTotal	= InvoiceAmount.CurrencyAmount
				and			TotalPaymentAmount.TransactionTotal 		= InvoiceAmount.CurrencyAmount)
					"CannotCancelAnOutOfBalanceInvoice"	      
			if  (!MatchProcessType.Expense
			and  !InvoiceType.MatchPrepayment
			and  !InvoiceType.Prepayment
			and  !InvoiceType.PrepaymentCredit)
				constraint (TotalPaymentAmount.TransactionTotal	= InvoiceAmount.CurrencyAmount)
					"CannotCancelAnOutOfBalanceInvoice"	      
			if (MatchProcessType.AOCOnly)
				constraint (PayablesInvoiceAOCAlphaRel not exist)
					"CannotCancel,_\M\N\RQuantityHasBeenReceived"	      
			constraint (PayablesCreditMemoRel not exist)
				"CannotCancel;InvoiceAppliedToCreditMemo"	      
			if (Invoice[1:14] = "APTOARCLEARING")
				constraint (PayablesCreditMemo2Rel not exist)
					"CannotCancelInterfacedInvoice;CreditMemoAppliedToAnInvoice"
			constraint (!InvoiceType.PrepaymentCredit)
				"CannotCancelPrepaymentCreditMemo"			




		PerformInvoiceCancel


			if (NonCancelledChargebackRel exists)
				invoke CancelChargeback NonCancelledChargebackRel	
			LocalCancelSequence = 9999
			if (PayablesInvoiceHistorySuffixRel exists)
				for each PayablesInvoiceHistorySuffixRel
					if (each.PayablesInvoiceHistory.CancelSequence = LocalCancelSequence)
						decrement LocalCancelSequence
			else
				LocalCancelSequence = (9999 - instance count of PayablesInvoiceCancelRel)		

			if (!MatchProcessType.Expense)
				if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount)
					TotalDistributionAmount.TransactionTotal  = InvoiceAmount.CurrencyAmount
				if (TotalDistributionAmount.FunctionalTotal  != InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount)
					TotalDistributionAmount.FunctionalTotal   = InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
				if (TotalTaxAmount != TaxAmount)
					TotalTaxAmount = TaxAmount

			if (!MatchProcessType.Expense)
				invoke PurgeSetsAndResourceRecords MatchReconQueueRel
				invoke PurgeDetail MatchWorkRel
				invoke Purge MatchWorkRel
				invoke Purge MatchReconQueueRel

			if (MatchProcessType.Expense)
				include SubtractFromVendorBalances		

			if (MatchProcessType.Expense
			and TaxEntityUsesSabrix)		
				include DoOneSourceCancel	

			if (InvoiceType.CreditMemo
			and VendorReturn entered)
				include CheckPurchaseOrderReturnForClose

			CancelSequence = LocalCancelSequence

			invoke DeleteFromHeader OpenPayablesInvoicePaymentRel 
				invoked.PrmVoidDate		= CancelDate
			
			include CancelDistributions

			if  (!MatchProcessType.Expense
			and (BudgetEditProcessing entered
			or   PayablesInvoiceAuditRel exists))
				NextSentence = true  
			else
			if  (IsNotPrepayment								
			and  DistributionTypeIsDistributionRel exists		
			and !PayablesInvoiceDistributionExpenseAccrualRel exists)
				invoke Create PayablesInvoiceDistribution
					invoked.Company						= Company
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.GLTPostingDate				= CancelDate
					invoked.GLTTransactionDate			= InvoiceDate
					invoked.DistributionType			= "A"
					invoked.Status						= 1
					invoked.DistributionDate			= CancelDate
					invoked.GLTransactionAmount												= InvoiceAmount.CurrencyAmount
					invoked.DistributionAmount.ExchangeDate									= InvoiceAmount.ExchangeDate
					invoked.DistributionAmount.CurrencyAmount								= InvoiceAmount.CurrencyAmount
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= TotalDistributionAmount.FunctionalTotal
					invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		= TotalDistributionAmount.AlternateTotal
					invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= TotalDistributionAmount.AlternateTotal2
					invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= TotalDistributionAmount.AlternateTotal3
					invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal1
					invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal2
					invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal3
					invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal4
					invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal5
					invoked.GLFinanceCodeBlock												= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.DistributionAccount												= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.GLTJournalizeGroup												= GLTJournalizeGroup
					invoked.BypassActiveCodeBlockEdit										= true  
					invoked.BypassProjectDateEdit 											= true
					invoked.BypassStructureRelationEdit 									= true


			if (MatchProcessType.Expense)    
				include PerformBudgetEditsForCancel

				if (PayablesInvoiceTaxRel.TotalAccruedTaxableAmount entered		
				or  PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount entered)	
					invoke Update PayablesInvoiceTaxRel							
						initialize invoked.TotalAccruedTaxableAmount			
						initialize invoked.TotalInvoicedTaxableAmount			

			invoke TakeInvoiceOffHold
			if (InvoiceCurrency changed)
				include CheckGainLoss		
			if (InvoiceSource.Lease)
				invoke CancelLeaseInvoice LeaseInvoiceRel	
					invoked.PrmCancelSequence = LocalCancelSequence
			if (InvoiceType.Prepayment)
				invoke CancelCreditMemo PayablesInvoiceRecursRel	
					invoked.PrmCancelDate		= CancelDate			
					invoked.PrmCancelSequence	= CancelSequence		
					invoked.PrmActionComment	= LocalActionComment	
			if (InvoiceType.CreditMemo)
				for each PayablesCreditMemo2Rel		
					invoke Delete each
			if  ((MatchProcessType.DropShip
			or   MatchProcessType.Service)
			and  MatchStatus > 1) //IEFIN-75330  see ALLOW-TO-CANCEL in AP30PD - this logic was for "Invoices released on 900 then client upgrades to 901"
				for each MatchPurchaseOrderInvoicesRel
					invoke ProcessPOUpdate each.PurchaseOrder
						invoked.PrmCompany		   = Company
						invoked.PrmPayablesInvoice = PayablesInvoice

			if (MatchProcessType.AOCOnly)
				for each MatchPurchaseOrderInvoicesRel
					include ProcessAOCUpdates			

			if  (!MatchProcessType.Expense
			and (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit))
				for each PayablesInvoiceDetailRel 
				 	for each each.PurchaseOrderLine.CommittedPurchaseOrderLineDistributionsRel
				 		invoke InvoiceCancel each

				for each PayablesInvoiceAddOnChargeRel 
					for each each.POAndLineAOCRel.HeaderOrLineAddOnChargeDistributionRel
				 		invoke InvoiceCancel each 

				if (Status.Approved)
					NextSentence = true
				else

					for each MatchPurchaseOrderInvoicesRel
						invoke EditTotalsRoute BudgetTemplateGroupTotal
							invoked.PrmFinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup 			= each.PurchaseOrder.UniqueID
							invoked.PrmMode 					= BudgetEditMode.UpdateOnly
							invoked.PrmBusinessClassName		= "PayablesInvoice"
							invoked.PrmTotalsProcessing			= BudgetEditTotalsProcessing.Purge
							invoked.PrmEditContext              = "Cancel"
							if (OriginatingInterfaceRun entered					
							and OriginatingInterfaceRun.Status.InProcess)		
								invoked.PrmIsBatch	= true						

			if (Suffix 	= 111
			or !MatchProcessType.Expense
			or (MatchProcessType.Expense
			and BypassMatch))
				include UpdateMatchInvoiceDetail		
			for each MatchPurchaseOrderInvoicesRel
				if (each.PurchaseOrder.MatchPrepayment)
					invoke FastUpdate each.PurchaseOrder
						invoked.MatchPrepayment = false

			if  (!MatchProcessType.Expense
			and (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit))
				if (Status.Approved)

					invoke Delete BudgetTemplateGroupTotalRel
				else
					invoke EditTotalsRoute BudgetTemplateGroupTotal 	
						invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup          = UniqueID
						invoked.PrmMode						= BudgetEditMode.UpdateOnly
						invoked.PrmTotalsProcessing			= BudgetEditTotalsProcessing.Purge
						invoked.PrmBusinessClassName		= "PayablesInvoice"
						invoked.PrmEditContext              = "Cancel"
						if (OriginatingInterfaceRun entered					
						and OriginatingInterfaceRun.Status.InProcess)		
							invoked.PrmIsBatch	= true						


					include ReleaseGLCommit

			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
			and CashCode.EditAvailableFunds)
				invoke CancelCommittedFunds CashCodeFundEditRel

#ifdef module cam
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
				for each CustodialAccountEditRel
					LocalToAccountingEntity		= each.AccountingEntity
					LocalCustodialPosting 		= each.FinanceDimension10
					LocalCommittedAmount		= each.CommittedAmount
					LocalCustodialAccountEdit 	= each.CustodialAccountEdit
					if(CustodialDetailAmountRel exists)
						invoke CancelCommittedAmount LocalCustodialAccountEdit













#endif

			if (ForIntercompanyBilling		
			and Status.Released)
				if (IntercompanyBillingTransactionRel exists)
					invoke Cancel IntercompanyBillingTransactionRel



			Status			= Status.Historical
			if  (IsMatchInvoice)
				MatchErrorType = 1
				initialize MatchStatus
				initialize MatchLevel
				initialize MatchDate
				initialize MatchObjectID



		CashPaymentFormatEdits	
			initialize ValidateCashPaymentFormat
			ValidateCashPaymentFormat.VendorGroup			= Company.VendorGroup
			ValidateCashPaymentFormat.BankTransactionCode	= BankTransactionCode
			ValidateCashPaymentFormat.CashCode				= CashCode
			ValidateCashPaymentFormat.PayablesProcessGroup	= Vendor.PayablesProcessGroup
			LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat	
			constraint (ValidateCashPaymentFormat.OutputErrorNumber not entered)
				"<ValidateCashPaymentFormat.OutputErrorMessage>"
			if (ValidateCashPaymentFormat.OutputCashPaymentFormat.PaymentFormat.AchFile)
				if (PayVendor.BankEntity 	entered)
					constraint (PayVendor.BankAccountType.Checking
					or			PayVendor.BankAccountType.Savings
					or			PayVendor.BankAccountType.IBAN)								
						"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	
				else
				if (RemitToCode.BankEntity 	entered)
					constraint (RemitToCode.BankAccountType.Checking
					or			RemitToCode.BankAccountType.Savings
					or			RemitToCode.BankAccountType.IBAN)							
						"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	

		MatchEdits


			invoke Purge AsyncErrorRel

			constraint (!PayVendor.VendorStatus.Inactive)
				"<MatchInvoiceErrorMessages.VendorIsNotActiveMsg>"

			if (IsHSNSACCodeEnabled)
				constraint (PayablesInvoiceDistributionNoHSNSACCodeRel not exists)
					"HSN_/SACCodeIsRequiredOnAllDistributions"
			else
				constraint (PayablesInvoiceDistributionHSNSACCodeRel not exists)
					"CannotEnter_HSN_/SACCodeFlagOnAnyDistributions"

			constraint (NoOpenInvoiceMessages)
				"<MatchInvoiceErrorMessages.POCostMessagesExistMsg>"  
			constraint (MatchStatus.Unmatched)
				"<MatchInvoiceErrorMessages.InvoiceHasBeenMatchedMsg>"

			if (!TransientBypassBackgroundEdit)
				constraint  (BackgroundProcessing not entered)
					"<MatchInvoiceErrorMessages.CannotMatchBackgroundProcessMsg>"

			if (!InvoiceType.CreditMemo)  
				constraint  (!first PayablesInvoiceDetailRel.IsMatched)
					"<MatchInvoiceErrorMessages.MatchInProcessMsg>"

			if (Status.Released 
			and HasAllowReleaseOnlyMatchInvoice)
				NextSentence = true 
			else
			if (CompanySystemClosingControlRel.Control)
				constraint (DistributionDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostDateOf<DistributionDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

			if (TaxCode.TaxType.CalculatedRate)
				constraint (TaxAmount entered)
					"TaxAmountRequiredForCalculatedRateTypeTaxCode.AlsoVerifyCalculateRateActionHasBeenRunPriorToMatching"





			if ((TaxEntityUsesSabrix
			or  CallVertexByDocument)
			and !InvoiceSource.CreditForRebill)
				if (TaxEntityUsesSabrix
				and TaxConfigurationRel.OneSourceVersionType.Original)
					constraint (!Status.Released)
						"<MatchInvoiceErrorMessages.InvoiceHasBeenUnmatchedCancelAndRecreateMsg>"
				if (!CreditOrDebitMemo
				and !MatchProcessType.Service
				and !MatchProcessType.DropShip
				and !MatchProcessType.AOCOnly
				and !MatchProcessType.ServiceContract)
					constraint (HasReceiptsInPool = "Yes")
						"<MatchInvoiceErrorMessages.NoReceiptsAvailableMsg>"

				if (!TransientBypassOneSource)
					constraint (!InvoiceErrorsExists)
						"<MatchInvoiceErrorMessages.InvoiceOutOfBalanceMsg>:InvoiceAmount<InvoiceAmount.CurrencyAmount>GoodsAmount<MatchAmount>TaxAmount<TaxAmount>DetailTaxAmount<POTaxAmount>"
			else
				constraint (!InvoiceErrorsExists)
					"<MatchInvoiceErrorMessages.InvoiceErrorsExistCannotMatchMsg>"

			initialize InvoiceDetailCounter

			if (ServiceContract entered)
				for each MatchServiceContractInvoicesRel 
					invoke ValidateContract each.Contract
						invoked.EditDate			= InvoiceDate
						invoked.Source				= 3	
						invoked.PrmVendor			= Vendor
						invoked.PrmVendorLocation	= VendorLocationRel.VendorLocation


			for each PayablesInvoiceDetailRel
				InvoiceDetailCounter += 1

				if (!CreditOrDebitMemo
				and each.PurchaseOrderLine entered)

					constraint (!each.PurchaseOrderLine.Closed.Yes)
						"<MatchInvoiceErrorMessages.PurchaseOrderLineClosedMsg>;Line:<each.PurchaseOrderLine>"

				if (each.EnteredUnitCost not entered
				and !each.ItemType.Service)
					constraint (each.PurchaseOrderLine.CostOption.NoCharge)
						"<MatchInvoiceErrorMessages.DetailLineVendorDeterminedCostNotEnteredMsg>"

				if (PayablesInvoice.CreditOrDebitMemo
				and each.MemoAdjustType not entered)
					invoke PopulateMemoAdjustType each

				if  (!CreditOrDebitMemo
				and  each.PurchaseOrderReceiptLine entered)
					constraint (!each.EnteredGreaterThanReceivedQuantity)
						"<MatchInvoiceErrorMessages.MissingReceiptDetailMsg>For<each.Item>"

			if (MatchReferenceNumber entered
			and FirstPurchaseOrder not entered)
				NextSentence = true
			else
			if (InvoiceDetailCounter not entered
			and !MatchProcessType.AOCOnly
			and !MatchProcessType.ServiceContract
			and !CreditForRebill)
				constraint (FirstPurchaseOrder.NumberOfLines >  FirstPurchaseOrder.NumberOfClosedLines)
					"<MatchInvoiceErrorMessages.NoOpenLinesOnPurchaseOrderMsg>"

			InvoiceAddOnChargeCounter = instance count of PayablesInvoiceAddOnChargeRel

			if  (InvoiceDetailCounter + InvoiceAddOnChargeCounter > NumberOfLinesForSetAction)
				constraint (!POCostMessageRel exists)
					"<MatchInvoiceErrorMessages.CostChangesExistMatchInReconMsg>"

			if  (TransientJobName = "AUTOMATCH"
			and  InvoiceType.MatchPrepayment
			and  RuleGroup not entered)
				RuleGroup = LocalAutoMatchPrepaymentRule

			if (TransientJobName not entered
			and RuleGroup not entered
			and !TransientInAutoMatch)
				constraint (!InvoiceType.MatchPrepayment)
					"<MatchInvoiceErrorMessages.PrepaidRuleGroupMustBeSpecifiedOnInvoiceMsg>"
			else
			if (InvoiceType.MatchPrepayment
			and RuleGroup entered)

				if  (MatchPrepaymentMethod.PrepayFromInvoice)
					initialize LocalCounter
					while (LocalCounter < 6)
						LocalCounter += 1
						constraint (RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[LocalCounter].InvoiceMatchLevel.InvoiceMatch
						or          RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[LocalCounter].InvoiceMatchLevel not entered)
							"<MatchInvoiceErrorMessages.OnlyInvoiceMatchAllowedForPrepaymentMethodPrepayFromInvoiceMsg>"
				else
					initialize LocalCounter
					while (LocalCounter < 6)
						LocalCounter += 1
						constraint (RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[LocalCounter].InvoiceMatchLevel.DetailMatch
						or          RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[LocalCounter].InvoiceMatchLevel not entered)
							"<MatchInvoiceErrorMessages.OnlyDetailMatchAllowedForPrepaymentMethodEligibleForPrepayMsg>"

			if  (!MatchProcessType.Service
			and  !MatchProcessType.AOCOnly
			and  !InvoiceSource.CreditForRebill
			and  !MatchProcessType.ServiceContract)
				if (!MatchProcessType.DropShip
				or  ServiceAmount not entered)
					constraint (MatchAmount != 0
					or 			AllowZeroCostInvoice)		
						"<MatchInvoiceErrorMessages.GoodsAmountEqualsZeroMsg>"  

			if  (BypassMatch
			or  (MatchProcessType.ReceiptMatch
			and  InvoiceType.CreditMemo)
			or   MatchProcessType.Service
			or   MatchProcessType.DropShip
			or   MatchProcessType.ServiceContract)
				if (InvoiceType.CreditMemo)
					constraint (InvoiceDetailExists
					or          AddOnChargeExists)
						"<MatchInvoiceErrorMessages.NoDetailsEnteredOnMemoDetailsTabForCreditMemoMsg>"
				else
				if (!IsPOCancel)
					constraint (InvoiceDetailExists)
						"<MatchInvoiceErrorMessages.NoInvoiceDetailLinesExistMsg>"

			if (TaxEntityUsesSabrix
			and  TaxConfigurationRel.OneSourceVersionType.Original
  			and !InvoiceSource.CreditForRebill)
				constraint (PayablesInvoiceDistributionRel exists)
					"<MatchInvoiceErrorMessages.NoDistributionsExistMsg>"

			if (!TransientBypassOneSource)
				DoConstraints = true
				include ValidateMatchInvoiceBalanceEdits

			if (BankTransactionCode.PaymentOutputOption.ElectronicFile
			or	BankTransactionCode.PaymentOutputOption.Swift
			or	BankTransactionCode.PaymentOutputOption.WireTransfer)	
				constraint ((PayVendor.BankEntity 			entered
				and			 PayVendor.BankAccountNumber 	entered)
				or			(RemitToCode.BankEntity			entered		
				and   		 RemitToCode.BankAccountNumber	entered))
					"BankEntityAndBankAccountNumberRequiredOnPayVendor<PayVendor>ForInvoicesSetUpForElectronicPayment"
				if (PayVendor.BankEntity 		entered)
					constraint (PayVendor.BankAccountType 		entered) 	
						"BankAccountTypeRequiredOnVendor<PayVendor>ForElectronicPayment"
				else
				if (RemitToCode.BankEntity 		entered)
					constraint (RemitToCode.BankAccountType 	entered) 	
						"BankAccountTypeRequiredOnRemitLocation<RemitToCode>ForElectronicPayment"
			if  (BankTransactionCode.BankTransactionType.CashPayment
			and !BankTransactionCode.PaymentOutputOption.NoOutput)
				include CashPaymentFormatEdits	

			if (CashCode.EditAvailableFunds
			or  CashCode.RestrictedFunds)
				include PerformFundAmountEdit
				constraint (ExceedesCashCodeFundBalanceRel !exists)
					"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
#ifdef module cam
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
				include PerformCustodialAccountEdit
				constraint (ExceedsCustodialAccountBalanceRel !exists)
					"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif
			if (RequireRemitTo)		
				constraint (RemitToCode entered)
					"Field_\Remit_\To_\LocationIsRequiredBySetup"



		EditsForReleasedInvoice			// Called from Released Statecycle "Update" Action

			if (ProcessLevel changed)
				constraint (PayGroup.PostCompany = ProcessLevel.PayGroup.PostCompany)
					"Pay_\Group_\Post_\CompaniesNotSame,CannotChangeProcessLevel"      

			if (BankTransactionCode.PaymentOutputOption.ElectronicFile
			or	BankTransactionCode.PaymentOutputOption.Swift
			or	BankTransactionCode.PaymentOutputOption.WireTransfer)	
				constraint ((PayVendor.BankEntity 			entered
				and			 PayVendor.BankAccountNumber 	entered)
				or			(RemitToCode.BankEntity			entered		
				and   		 RemitToCode.BankAccountNumber	entered))
					"BankEntityAndBankAccountNumberRequiredOnPayVendor<PayVendor>ForInvoicesSetUpForElectronicPayment"
				if (PayVendor.BankEntity 		entered)
					constraint (PayVendor.BankAccountType 		entered) 	
						"BankAccountTypeRequiredOnVendor<PayVendor>ForElectronicPayment"
				else
				if (RemitToCode.BankEntity 		entered)
					constraint (RemitToCode.BankAccountType 	entered) 	
						"BankAccountTypeRequiredOnRemitLocation<RemitToCode>ForElectronicPayment"

			if  (BankTransactionCode.BankTransactionType.CashPayment
			and !BankTransactionCode.PaymentOutputOption.NoOutput)
				include CashPaymentFormatEdits	

			if  (MatchProcessType.ServiceContract)
				constraint (ServiceContract = old ServiceContract)
					"CannotChangeServiceContract"


			constraint (AccrualCode = old AccrualCode)
				"CannotChangeAccrualCode"

			constraint (RetainageAccrualCode = old RetainageAccrualCode)
				"CannotChangeRetainageAccrualCode"


			if (NumberOfRecurringInvoices 	changed
			or  RecurringFrequency			changed)
				invoke UpdateRecurringInvoice
					invoked.NumberOfRecurrences = NumberOfRecurringInvoices
					invoked.RecurrenceFrequency = RecurringFrequency

			if (PaymentsNotHistoricalRel exist)
				include UpdateInvoiceNonHistoricalPayments

			if (ProcessLevel changed)
				if (PayablesInvoiceDistribution set exist)
					include UpdateInvoiceDistributions

			if (DistributionDate changed)				
				if (TaxCode entered									
				and TaxPoint.GLPostDate								
				and old DistributionDate = TransientTaxPointDate)	
					invoke Update PayablesInvoiceTaxRel				
						invoked.TaxPointDate	= DistributionDate	
					TransientTaxPointDate		= DistributionDate	
				for each PayablesInvoiceDistribution set
					invoke UpdateFromHeader each
						if  (DistributionDate changed
						and (each.DistributionType.Distribution
						or   each.DistributionType.ExpenseAccrual)
						and !each.Status.Historical)
							invoked.DistributionDate = DistributionDate
				if  (!CancelledOrPostedDistributionsRel exists)
					invoke FastUpdate PayablesInvoiceDetailRel
						invoked.DistributionDate = DistributionDate



		UpdateInvoiceNonHistoricalPayments		

			for each PaymentsNotHistoricalRel
				invoke Update each.PayablesInvoicePayment

					if (!each.RetainagePayment)
						each.AccrualCode 	= AccrualCode
					each.PayVendor			= PayVendor
					if (!each.IsAppliedToInvoice)			
						each.PaymentPriority  	= TransientVendorPriority
					each.RemitToCode		= RemitToCode
					if (InvoiceGroup changed)
						each.InvoiceGroup = InvoiceGroup
					if (BankTransactionCode changed)
						each.BankTransactionCode = BankTransactionCode
					if (DiscountAmount.CurrencyAmount  changed)
						each.DiscountAmount = DiscountAmount.CurrencyAmount
					if (DiscountAmount.CurrencyAmount not entered)
						each.DiscountDate 	= blank
					if (ProcessLevel changed)
						each.ProcessLevel 	= ProcessLevel
						if (each.Status.Released)
							each.PayGroup		= ProcessLevel.PayGroup
							PayGroup			= ProcessLevel.PayGroup
					if (NumberOfRecurringInvoices entered
					and !PaymentAmountOutOfBalance)
						if (each.Status.SelectedForPayment)
							LocalRunProgram = RunProgram.InvoiceMaintenance
							LocalPayGroup = blank
							include VerifyProcessingMonitorRule
						if (InvoiceCurrency = PayGroup.BaseCurrency)
							each.PaymentAmount.CurrencyAmount							   = InvoiceAmount.CurrencyAmount
			  				each.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount 	   = InvoiceAmount.CurrencyAmount
			  				each.RevaluedBaseAmount.CurrencyAmount						   = InvoiceAmount.CurrencyAmount
			  				each.RevaluedBaseAmount.ExchangeDate						   = InvoiceAmount.ExchangeDate 
							each.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount = InvoiceAmount.CurrencyAmount
							each.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate   = 1
		  				else

						 	each.RevaluedBaseAmount.CurrencyAmount						= InvoiceAmount.CurrencyAmount
						 	each.RevaluedBaseAmount.ExchangeDate						= InvoiceAmount.ExchangeDate 
						 	initialize each.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
						 	initialize each.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate



		UpdateInvoiceDistributions 	

			for each PayablesInvoiceDistribution set
				invoke FastUpdate each	
					if (ProcessLevel changed)
						invoked.ProcessLevel		= ProcessLevel



		MoveIntrastatHeaderData			//	Called from "EditIntrastatInvoice"

			invoked.TransactionType						= "P"
			invoked.SystemCode							= "AP"
			invoked.NatureOfTransactionCode				= NatureOfTransactionCode
			invoked.DocumentNumber						= Invoice
			invoked.DeliveryDate						= InvoiceDate
			invoked.CurrencyRate						= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			invoked.Vendor								= Vendor
			invoked.VendorCurrencyCode					= InvoiceCurrency
			invoked.UnloadingPort						= UnloadingPort
			invoked.TransportMode						= ShippingMethod
			invoked.DeliveryTerms						= ShipTerm
			invoked.StatisticalProcedure				= StatisticalProcedure
			if (Dropship)
				invoked.DropShipIndicator				= "Y"								
			else																			
				invoked.DropShipIndicator				= "N"								
			invoked.PurchaseOrder						= FirstPurchaseOrder
			if (OriginCountry entered)														
				invoked.OriginCountry					= OriginCountry						
			else																			
				invoked.OriginCountry					= CalculateTax.FromCountryCode
			invoked.OriginRegion						= OriginRegion						
			invoked.VendorVATCountry					= Vendor.VATRegistrationCountry
			invoked.VendorVATRegistrationNumber			= Vendor.VATRegistrationNumber
			if (DestinationCountry entered)													
				invoked.DestinationCountry				= DestinationCountry				
			else																			
				invoked.DestinationCountry				= CalculateTax.ToCountryCode
			invoked.DestinationRegion					= DestinationRegion					


 		EditIntrastatInvoice		// Called from Released Statecycle "Update" Action

			IntrastatFiscalYear = InvoiceDate year	
			if (UnloadingPort changed)
				constraint (!IntrastatHasBeenPosted)
					"IntrastatDetailsAlreadyReported_-_\Cannot_\Change"       
			initialize LocalHasServiceLineType
			initialize LocalHasGoodsLineType								  
			if (IntrastatHeaderRel exist)
				if (UnloadingPort 				!= IntrastatHeaderRel.UnloadingPort
				or	NatureOfTransactionCode 	!= IntrastatHeaderRel.NatureOfTransactionCode
				or	StatisticalProcedure 		!= IntrastatHeaderRel.StatisticalProcedure
				or  Dropship					!= IntrastatHeaderRel.DropShipIndicator
				or  TransportMode				!= IntrastatHeaderRel.TransportMode
				or	ShipTerm 					!= IntrastatHeaderRel.DeliveryTerms)
					IntrastatDataChanged = true
				if  (IntrastatHeaderRel.Status.Open)
					if (!TaxEntityRel.IntrastatUsed)
						invoke Delete IntrastatHeaderRel
						for each PayablesInvoiceDistribution set
							if (each.LineType.Goods)
								invoke ClearIntrastatValues each
							else
							if (each.LineType.Service)				
								LocalHasServiceLineType = true
					else											
						for each PayablesInvoiceDistribution set	
							if (each.LineType.Goods)				
								LocalHasGoodsLineType = true		

			if (LocalHasServiceLineType
			or 	LocalHasGoodsLineType) 								
				if (IntrastatNumber not entered
				or  IntrastatHeaderRel not exist)
					invoke Create IntrastatHeader
						invoked.IntrastatHeader.FiscalYear			= InvoiceDate
						if (IntrastatNumber entered)
							invoked.IntrastatHeader.IntrastatNumber	= IntrastatNumber
						else
							invoked.IntrastatHeader.IntrastatNumber	= blank
						invoked.Status								= 1
						include MoveIntrastatHeaderData
					IntrastatNumber		= IntrastatHeaderRel.IntrastatHeader.IntrastatNumber
				else
					invoke Update IntrastatHeaderRel
						include MoveIntrastatHeaderData


		ProcessIntrastatDefaults		// Called from Released Statecycle "Update" Action

			if  (MatchProcessType.DropShip)
				Dropship = true
			else
				Dropship = false

			DoIntrastatReporting = false
			if (Dropship
			and FirstPurchaseOrder entered)
				DestinationCountry = FirstPurchaseOrder.DropshipAddress.Country
				DestinationRegion = FirstPurchaseOrder.DropshipAddress.Region
			else
			if (FirstPurchaseOrder entered
			and FirstPurchaseOrder.ShipToLocation entered)
				DestinationCountry		= FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Country
				DestinationRegion		= FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Region
			else
			if (Location entered)
				DestinationCountry = Location.PostalAddressForPurchaseOrder.Country
				DestinationRegion = Location.PostalAddressForPurchaseOrder.Region
			else
				DestinationCountry = DefaultProcessLevelRel.PostalAddress.Country
				DestinationRegion = DefaultProcessLevelRel.PostalAddress.Region

			if (DestinationCountry not entered)
				if (Dropship
				and FirstPurchaseOrder entered)
					CalculateTax.ToCountryCode			= FirstPurchaseOrder.DropshipAddress.Country
				else
				if (Location entered)
					CalculateTax.ToCountryCode			= Location.PostalAddressForPurchaseOrder.Country
				else
					CalculateTax.ToCountryCode			= ProcessLevel.PostalAddress.Country
				DestinationCountry = CalculateTax.ToCountryCode

			LocalTaxEntity 								= Company.AccountingEntity
			if (LocalTaxEntity.IntrastatUsed)
				if (Dropship
				and FirstPurchaseOrder entered)
					CalculateTax.ToCountryCode			= FirstPurchaseOrder.DropshipAddress.Country
				else
				if (Location entered)
					CalculateTax.ToCountryCode			= Location.PostalAddressForPurchaseOrder.Country
				else
					CalculateTax.ToCountryCode			= ProcessLevel.PostalAddress.Country

			if (PurchaseFromLocation entered)
				OriginCountry = PurchaseFromVendorLocAddressRel.PostalAddress.Country
				OriginRegion = PurchaseFromVendorLocAddressRel.PostalAddress.Region
				CalculateTax.VATRegistrationCountry	= PurchaseFromLocation.VATRegistrationCountry
				CalculateTax.VATRegistrationNumber	= PurchaseFromLocation.VATRegistrationNumber
			else
				OriginCountry = InvoiceVendorAddressRel.PostalAddress.Country
				OriginRegion = InvoiceVendorAddressRel.PostalAddress.Region
				CalculateTax.VATRegistrationCountry	= Vendor.VATRegistrationCountry
				CalculateTax.VATRegistrationNumber	= Vendor.VATRegistrationNumber

			if (OriginCountry not = DestinationCountry
			and DestinationCountry.MemberOfEC
			and	OriginCountry.MemberOfEC
			and !OriginRegion.ExcludeFromIntrastat
			and !DestinationRegion.ExcludeFromIntrastat)
				DoIntrastatReporting = true
				IntrastatFiscalYear = InvoiceDate year
				if (FirstPurchaseOrder entered)
					NatureOfTransactionCode = FirstPurchaseOrder.NatureOfTransactionCode
					StatisticalProcedure = FirstPurchaseOrder.StatisticalProcedure
					if (FirstPurchaseOrder.UnloadingPort entered)	
						UnloadingPort = FirstPurchaseOrder.UnloadingPort
					ShipTerm = FirstPurchaseOrder.ShipTerm
					ShippingMethod = FirstPurchaseOrder.ShippingMethod
					GlobalDocumentType = FirstPurchaseOrder.PurchaseOrder.GlobalDocumentType
				else
				if (first MatchPurchaseOrderInvoicesRel exists)
					NatureOfTransactionCode = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.NatureOfTransactionCode
					StatisticalProcedure = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.StatisticalProcedure
					if (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.UnloadingPort entered)	
						UnloadingPort = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.UnloadingPort
					ShipTerm = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipTerm
					ShippingMethod = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShippingMethod
					GlobalDocumentType = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.GlobalDocumentType
			else
				invoke Delete IntrastatHeaderRel


		EditIntrastatDataForRelease


			if (DoIntrastatReporting)
				if (IntrastatRequired)
					constraint (IntrastatInvoice)
						"IntrastatHeaderInformationRequired"
				for each PayablesInvoiceDistribution set
					if (each.DistributionType.Distribution) 							
						constraint (each.LineType entered)
							"LineTypeRequiredForIntrastatInvoice"						
					if (each.LineType.Goods)
						constraint (each.IntrastatDetailEntered)
							"IntrastatDetailFieldsMustBePopulated" 						
					if (each.IntrastatDetailExist)
						constraint (!OriginRegion.ExcludeFromIntrastat
				  		and         !DestinationRegion.ExcludeFromIntrastat)
				  			"Specified/Countries/RegionsNotValidForIntrastatReporting" 	



		CreateIntrastatRecords				

			if (DoIntrastatReporting)
				if (DistributionGoodsLineExist)											


					IntrastatFiscalYear = InvoiceDate year
					if  (!IntrastatHeaderRel exists
					or  IntrastatNumber not entered)
						initialize IntrastatProcessing

						IntrastatProcessing.HeaderFc					= "C"
						IntrastatProcessing.DetailFc					= blank
						IntrastatProcessing.TaxEntity					= GeneralLedgerCompanyRel.AccountingEntity
						IntrastatProcessing.FiscalYear					= IntrastatFiscalYear
						IntrastatProcessing.TransactionType				= "P"
						IntrastatProcessing.SystemCode					= "AP"
						IntrastatProcessing.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						IntrastatProcessing.VendorGrp					= Company.VendorGroup
						IntrastatProcessing.Vendor						= Vendor
						IntrastatProcessing.VendorVATRegCountry     	= Vendor.VATRegistrationCountry
						IntrastatProcessing.VendorVATRegNumber 			= Vendor.VATRegistrationNumber
						IntrastatProcessing.OriginCountry 				= OriginCountry
						IntrastatProcessing.OriginRegion				= OriginRegion
						IntrastatProcessing.DestinationCountry 			= DestinationCountry
						IntrastatProcessing.DestinationRegion			= DestinationRegion
						IntrastatProcessing.DocumentNumber				= Invoice
						IntrastatProcessing.NatureOfTransactionCode		= NatureOfTransactionCode
						IntrastatProcessing.InvoiceDate					= InvoiceDate
						IntrastatProcessing.DeliveryDate				= InvoiceDate
						IntrastatProcessing.CurrencyRate				= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						IntrastatProcessing.VendorCurrency				= InvoiceCurrency
						IntrastatProcessing.InvoiceCompany				= FirstPurchaseOrder.Company
						IntrastatProcessing.PurchaseOrder				= FirstPurchaseOrder
						IntrastatProcessing.UnloadingPort				= UnloadingPort
						IntrastatProcessing.TransportMode				= ShippingMethod
						IntrastatProcessing.DeliveryTerms				= ShipTerm
						IntrastatProcessing.StatisticalProcedure		= StatisticalProcedure
						IntrastatProcessing.RelatedObjectReference		= reference to this instance
						if  (MatchProcessType.DropShip)
							IntrastatProcessing.DropShip = "Y" 
						else
							IntrastatProcessing.DropShip = "N" 
						LocalTrigger									= IntrastatProcessing.MainTrigger
						constraint (IntrastatProcessing.LocalErrorNumber not entered)
							"<IntrastatProcessing.OutputErrorMessage>"
						IntrastatNumber									= IntrastatProcessing.OutputIntrastatNumber


					for each PayablesInvoiceDistribution set
						if (each.LineType.Goods)
							IntrastatProcessing.HeaderFc				= blank
							IntrastatProcessing.DetailFc				= "C"
							IntrastatProcessing.TaxEntity				= Company.AccountingEntity
							IntrastatProcessing.FiscalYear				= IntrastatFiscalYear
							IntrastatProcessing.IntrastatNumber 		= IntrastatNumber
							IntrastatProcessing.LineNumber				= blank
							IntrastatProcessing.ICNCode					= each.ICNCode
							IntrastatProcessing.StockWeight				= each.StockWeight
					   		IntrastatProcessing.ReceivedAmount      	= blank
							IntrastatProcessing.SupplementaryUOM      	= each.DerivedUOM
							IntrastatProcessing.SupplementaryQuantity	= each.SupplementaryQuantity
							IntrastatProcessing.BaseAmount				= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalTrigger								= IntrastatProcessing.MainTrigger
							constraint (IntrastatProcessing.LocalErrorNumber not entered)
								"<IntrastatProcessing.OutputErrorMessage>"
			else
			if (old Status.Released and Status.Released)
				constraint (UnloadingPort = blank
				and 		NatureOfTransactionCode = blank
				and			StatisticalProcedure = blank
				and 		TransportMode = blank
				and 		ShipTerm = blank)
					"Specified_\Countries/\RegionsNotValidFor_\Intrastat_\Reporting;IntrastatDataMustBeBlank"		  






		CancelDistributions		//	Called from CancelCreditMemo & "CancelInvoice" Instance Action		


			if (instance count of PayablesInvoiceDistributionNoCancelSequenceRel > 30)
				invoke MassCancelDistribution PayablesInvoiceDistribution in background 
					invoked.PrmPayablesCompany		= Company
					invoked.PrmPayablesInvoice		= PayablesInvoice
					invoked.PrmCancelSequence		= LocalCancelSequence
					invoked.PrmCancelDate			= LocalCancelDate
					invoked.PrmComment				= LocalActionComment
			else

				for each PayablesInvoiceDistributionNoCancelSequenceRel

					if  (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
					and !MatchProcessType.Expense
					and  each.MatchCreated.Unmatch)

						if (each.DistributionDate != LocalCancelDate
						and !each.Status.Historical) 
							invoke UpdateFromHeader each
								invoked.DistributionDate 	= LocalCancelDate
								invoked.CancelSequence		= LocalCancelSequence
								invoked.CommentText			= LocalActionComment
								invoked.ReverseFromCancel	= true
						else
							invoke FastUpdate each
								invoked.CancelSequence		= LocalCancelSequence
								invoked.CommentText			= LocalActionComment
								invoked.ReverseFromCancel	= true
					else
						invoke CancelDistribution each
							invoked.PrmCancelSequence	= LocalCancelSequence
							invoked.PrmCancelDate		= LocalCancelDate		
							invoked.PrmComment			= LocalActionComment	


		CancelPayments		

			for each PayablesInvoicePaymentRel
				if (each.Status.Released
				or  each.Status.SelectedForPayment)
					if (each.PayablesInvoice.InvoiceType.PrepaymentCredit)
						if (!Vendor.BalanceCurrency entered)
							invoke Update VendorBalanceRel
								invoked.CurrentBalance -= each.RevaluedBaseAmount.CurrencyAmount
							invoke Delete each
						else
							invoke Update VendorBalanceRel
								invoked.CurrentBalance -= each.PaymentAmount
							invoke Delete each
					else
						invoke Delete each
				else
					invoke Create PayablesInvoicePayment
						fill in fields from this instance
						invoked.CancelSequence = CancelSequence
					invoke Delete each



		CancelChargeback		// Called from "CancelInvoice" Instance Action		

			CancelSequence = CancelSequence
			if (PayablesInvoiceChargebackRel exists)
				CancelSequence = PayablesInvoiceChargebackRel.PayablesInvoice.CancelSequence - 1


			else
				CancelSequence = 9999
			for each PayablesInvoiceDetailRel	
				invoke UpdatePOLine each
			for each IntrastatDetailRel		
				invoke Delete each
			if (InvoiceCurrency != PayCurrency)		
				include CheckGainLoss	

			for each PayablesInvoiceAddOnChargeHistoryRel
				invoke Delete each
			for each PurchaseOrderReceiptInvoiceLinkSymbKeyRel
				invoke Delete each


		UpdateMatchInvoiceDetail	// Called from "CancelInvoice" Instance Action	

			for each MatchPurchaseOrderInvoicesRel		
				invoke RestrictedDelete each
			for each PayablesInvoiceSpreadAddOnChargeRel

				invoke DeleteNoInvoiceUpdate each
			for each PayablesInvoiceDetailRel			
				invoke DeleteNoInvoiceUpdate each
			for each PayablesInvoiceAddOnChargeRel		
				invoke DeleteNoInvoiceUpdate each
			for each MatchInvoiceMessageSet5Rel
				include UpdatePurchaseOrderLine 				
				include DeletePurchaseOrderReceiptInvoiceLink	
				invoke Delete each								


		CheckGainLoss		// Called from CancelChargeback & "CancelInvoice" Instance Action			

			for each MultiplePayablesInvoicePaymentRel
				if (each.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount != each.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
				and !each.Status.Historical)
					invoke Create PayablesInvoiceDistribution
						invoked.DistributionType 	= "G"
						invoked.ProcessLevel		= each.ProcessLevel
						invoked.Status				= 1
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= (each.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount - each.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount)
						invoked.DistributionAmount.CurrencyAmount 	= 0
						invoked.DistributionAmount.ExchangeDate		= each.CheckDate
						if (invoked.CreatedBy = blank)
							invoked.CreatedBy = actor



		ProcessAOCUpdates	// Called from "CancelInvoice" Instance Action		

			invoke ProcessAOCUpdates MatchPurchaseOrderInvoicesRel


		CheckPurchaseOrderReturnForClose	// Called from "CancelInvoice" Instance Action	

			if (VendorReturnRel exists)
				if (VendorReturnRel.CreditReceived entered)						
					invoke UpdateCreditReceived VendorReturnRel					
						invoked.PrmCreditReceived	= (VendorReturnRel.CreditReceived * -1)

				if  (VendorReturnRel.VendorClaimType.CreditMemo)		
					invoke ReopenFromInvoice VendorReturnRel
				else 
				if (VendorReturnRel.VendorClaimType.Chargeback)		
					if (VendorReturnRel.Status.Closed)								
						invoke Closed.Cancel VendorReturnRel						
					else															
						if (VendorReturnRel.Status.WaitingForVendorAction)			
							invoke WaitingForVendorAction.Cancel VendorReturnRel	




		UpdatePurchaseOrderLine		




			for each each.PayablesInvoiceDetailSet10Rel
				if (each.PayablesInvoice != PayablesInvoice
				and each.MatchObjectID entered)
					LocalMatchInvoiceMessageInvoice	= each.PayablesInvoice.Invoice
					LocalMatchInvoiceMessageSuffix	= each.PayablesInvoice.Suffix
					LocalNoMoreMessages				= true
					invoke Released.UpdatePOLineFromMatch each.PurchaseOrderLine
						if (LocalNoMoreMessages)
							invoked.PrmLastMatchUnitCost	= blank
						else
							for each each.MatchInvoiceMessageRel
								if (each.MatchMessageOrigin.PoCost
								and each.Status.Closed)
									invoked.PrmLastMatchUnitCost	= each.AdjustedUnitCost
									end for each


		DeletePurchaseOrderReceiptInvoiceLink	

			if (each.MatchMessageOrigin.PoCost
			and each.ApplicationAction.AdjustCost)
				for each PurchaseOrderReceiptInvoiceLinkSet3Rel
					if (each.Type 				= "CS"
					and each.PayablesInvoice	= PayablesInvoice)
						invoke Delete each




		AddToVendorBalance									
			LocalAddToVendorBalance				= true
			include UpdateVendorBalance

		SubtractFromVendorBalances							
			LocalAddToVendorBalance				= false
			include UpdateVendorBalance

		UpdateVendorBalance

			initialize LocalInvoiceAmt
			initialize LocalActualPurchaseAmt

			if (Vendor.BalanceCurrency not entered)
				LocalVendorBalanceCurrency	= Company.Currency	
				LocalInvoiceAmt				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				LocalVendorBalanceCurrency	= InvoiceCurrency
				LocalInvoiceAmt				= InvoiceAmount.CurrencyAmount

			if (RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount entered)
				LocalActualPurchaseAmt		= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				LocalActualPurchaseAmt		= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount




			if  (PurchaseFromLocation	not entered
			and  RemitToCode 			not entered)
				LocalVendorBalanceLocation 	= blank
				include UpdateVendorBalanceRecord

			if (PurchaseFromLocation	entered
			and RemitToCode				not entered)
				if (PayVendor = Vendor)
					LocalVendorBalanceLocation 	= PurchaseFromLocation
				else
					LocalVendorBalanceLocation	= blank
				include UpdateVendorBalanceRecord

			if  (PurchaseFromLocation 	not entered
			and  RemitToCode 			entered)
				if  (PayVendor = Vendor)
					LocalVendorBalanceLocation 	= RemitToCode
				else
					LocalVendorBalanceLocation	= blank
				include UpdateVendorBalanceRecord

			if  (PurchaseFromLocation entered
			and  RemitToCode entered)
				if  (PayVendor = Vendor)
					LocalVendorBalanceLocation 	= PurchaseFromLocation
				else
					LocalVendorBalanceLocation	= blank
				include UpdateVendorBalanceRecord

		UpdateVendorBalanceRecord
			invoke UpdateVendorBalance VendorBalanceRel
				invoked.PassedUpdatePeriodBalance 	= true
				if (Status.Historical)
					invoked.PassedUpdateCurrAndHighBal	= false
				else
					invoked.PassedUpdateCurrAndHighBal	= true
				invoked.PassedInvoiceDate 			= InvoiceDate
				invoked.PassedInvoiceAmt			= LocalInvoiceAmt
				invoked.PassedActualPurchaseAmt 	= LocalActualPurchaseAmt
				invoked.PassedAddToVendorBalance 	= LocalAddToVendorBalance
				invoked.PassedVendorBalanceCurrency = LocalVendorBalanceCurrency


		SubtractFromOldVendorBalance
			invoke UpdateVendorBalance VendorBalanceRel
				invoked.PassedAddToVendorBalance 	= false			
				invoked.PassedUpdatePeriodBalance 	= true
				invoked.PassedUpdateCurrAndHighBal	= true
				if (InvoiceDate changed)
					invoked.PassedInvoiceDate 		= old InvoiceDate
				else
					invoked.PassedInvoiceDate 		= InvoiceDate
				invoked.PassedVendorBalanceCurrency = LocalVendorBalanceCurrency
				invoked.PassedInvoiceAmt			= LocalInvoiceAmt
				if (RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount entered)
					LocalActualPurchaseAmt			= old RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
				else
					LocalActualPurchaseAmt			= old InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
				invoked.PassedActualPurchaseAmt 	= LocalActualPurchaseAmt

		AdjustVendorBalance
			if ((PurchaseFromLocation !entered				
			and (RemitToCode changed						
			and  PayVendor !changed							
			and  PayVendor = Vendor)						
			or  (PayVendor changed							
			and (Vendor = old PayVendor						
			or   Vendor = PayVendor))) 						
			or  InvoiceAmount.CurrencyAmount changed
			or  InvoiceCurrency changed						
			or  InvoiceDate changed)
				if (!InvoiceType.Prepayment)

					if (Vendor.BalanceCurrency not entered)
						LocalVendorBalanceCurrency			= Company.Currency	
						LocalInvoiceAmt						= old InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
					else
						LocalVendorBalanceCurrency			= InvoiceCurrency
						LocalInvoiceAmt						= old InvoiceAmount.CurrencyAmount

					if (RemitToCode changed
					and PayVendor !changed					
					and Vendor = PayVendor)					
						LocalVendorBalanceLocation 			= old RemitToCode
						include SubtractFromOldVendorBalance
					else
					if (PayVendor changed)					
						if (Vendor = old PayVendor)
							if (RemitToCode changed)
								LocalVendorBalanceLocation 	= old RemitToCode
							else
								LocalVendorBalanceLocation	= RemitToCode
						else
							LocalVendorBalanceLocation 	= blank
						include SubtractFromOldVendorBalance
					else
					if  (PurchaseFromLocation 	entered
					and  RemitToCode 			not entered)
						if (PayVendor = Vendor)
							LocalVendorBalanceLocation = PurchaseFromLocation
						else
							LocalVendorBalanceLocation = blank
						include SubtractFromOldVendorBalance
					else
					if (PurchaseFromLocation	not entered
					and RemitToCode 			entered)
						if (PayVendor = Vendor)
							LocalVendorBalanceLocation 	= RemitToCode
						else
							LocalVendorBalanceLocation 	= blank
						include SubtractFromOldVendorBalance
					else
					if  (PurchaseFromLocation 	entered
					and  RemitToCode 			entered)
						if (PayVendor = Vendor)
							LocalVendorBalanceLocation 	= PurchaseFromLocation
						else
							LocalVendorBalanceLocation 	= blank
						include SubtractFromOldVendorBalance
					include AddToVendorBalance








		DoAP30VerifyPayablesMonitor
			VerifyPayablesMonitor.Company 		= Company
			VerifyPayablesMonitor.PayGroup		= PayGroup
			VerifyPayablesMonitor.RunProgram	= "AP30"
			LocalCheckAPMonitor					= VerifyPayablesMonitor.CallVerifyPayablesMonitor
			constraint (VerifyPayablesMonitor.VerifyOk)
				"<VerifyPayablesMonitor.APMonitorProcessingMessage>"


		VerifyProcessingMonitorRule
			VerifyPayablesMonitor.Company 			= Company
			VerifyPayablesMonitor.PayGroup			= LocalPayGroup
			VerifyPayablesMonitor.RunProgram		= LocalRunProgram
			VerifyPayablesMonitor.ProcessGroup		= blank
			VerifyPayablesMonitor.ProcessLevel		= blank
			VerifyPayablesMonitor.AccountStructure	= blank
			VerifyPayablesMonitor.BatchNumber		= BatchNumber
			VerifyPayablesMonitor.AuthorityCode		= AuthorityCode
			LocalCheckAPMonitor						= VerifyPayablesMonitor.CallVerifyPayablesMonitor
			constraint (VerifyPayablesMonitor.NoErrors)
				"<VerifyPayablesMonitor.APMonitorProcessingMessage>"





		TaxedMatchPrepaymentReleaseRules
			initialize LocalTaxableAmount
			for each InventoriedItemRel
				if (each.TaxCode entered)
					initialize CalculateTax
					CalculateTax.ProcessLevel 	= ProcessLevel
					CalculateTax.VoucherNumber 	= VoucherNumber
					CalculateTax.Invoice 		= Invoice
					CalculateTax.TaxCode 		= each.TaxCode
					CalculateTax.InvoiceAmount 	= each.TotalDistributionAmount
					CalculateTax.TaxableAmount 	= each.TotalDistributionAmount
					CalculateTax.TaxEntity 		= Company.GeneralLedgerCompany.AccountingEntity
					CalculateTax.InvoiceCompany = Company
					CalculateTax.InvoiceDate 	= InvoiceDate
					CalculateTax.PaymentDate 	= InvoiceDate
					CalculateTax.TaxDate 		= InvoiceDate
					CalculateTax.ProductTaxCategory = each.TaxCode.ProductTaxCategory
					CalculateTax.System 		= "AP"
					CalculateTax.Function 		= CalculateTax.Function.CalculateTax
					LocalCalculateTaxExecuted 	= CalculateTax.ExecuteCalculateTax
					LocalCounter = 1
					while (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxCode entered
					and   LocalCounter <= 8)
						if (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount not entered)
							LocalCounter += 1
						else
							invoke CreateFromMatch PayablesInvoiceDistribution
								assign result to LocalPayablesInvoiceTaxDistribution
								invoked.Company 					= Company
								invoked.PayablesInvoice 			= PayablesInvoice
								invoked.DistributionType 			= "D"
								invoked.PayablesInvoiceDetail		= each.PayablesInvoiceDetail
								invoked.PurchaseOrder				= each.PurchaseOrder
								invoked.PurchaseOrderLine			= each.PurchaseOrderLine
								invoked.PurchasingContract			= each.Contract
								invoked.ContractLine				= each.ContractLine
								invoked.TaxCode 					= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxCode
								invoked.TaxableAmount 				= each.TotalDistributionAmount
								invoked.TaxRate 					= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxRate
								invoked.GLTransactionAmount 		= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount
								invoked.DistributionAmount.CurrencyAmount = CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount
								invoked.Status 						= 1

								invoked.TransientOriginalPayablesInvoiceTaxAmount = TaxAmount

								if  (!CalculateTax.TaxTable.TaxTableOutput[LocalCounter].LandCostFlag)

									if  (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxPoint = "P")
										invoked.GLFinanceCodeBlock				= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount
										invoked.DistributionAccount				= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount
									else
										invoked.GLFinanceCodeBlock				= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount
										invoked.DistributionAccount				= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount
								else
								if  (each.TaxCode != each.PurchaseOrderLine.TaxCode)
									if (each.ItemType.Inventoried
									and !each.ItemLocationRel.InventoryTracked)
										invoked.GLFinanceCodeBlock				= each.ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
										invoked.DistributionAccount				= each.ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
									else
									if  (ProcessLevel.CostVarianceAccount entered)
										invoked.GLFinanceCodeBlock				= ProcessLevel.CostVarianceAccount
										invoked.DistributionAccount				= ProcessLevel.CostVarianceAccount
									else
										invoked.GLFinanceCodeBlock				= MatchCompanyRel.CostVarianceAccount
										invoked.DistributionAccount				= MatchCompanyRel.CostVarianceAccount
								else
									if  (ProcessLevel.ReceiptAccrualAccount entered)
										invoked.GLFinanceCodeBlock				= ProcessLevel.ReceiptAccrualAccount
										invoked.DistributionAccount				= ProcessLevel.ReceiptAccrualAccount
									else
										invoked.GLFinanceCodeBlock				= MatchCompanyRel.ReceiptAccrualAccount
										invoked.DistributionAccount				= MatchCompanyRel.ReceiptAccrualAccount

							if  (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxPoint != "P")
								invoke 585BuildTxTaxTrans LocalPayablesInvoiceTaxDistribution.PayablesInvoiceDistribution
									invoked.ApwsCancelledFl = "N"
									invoked.ApwsReverseFlag = "N"
							LocalCounter += 1



		DeleteDistributions

			if (UseBackgroundDelete)
				invoke DeleteDistributionsForInvoice PayablesInvoiceDistribution in background
					invoked.PrmPayablesCompany	= Company
					invoked.PrmPayablesInvoice	= PayablesInvoice
			else
				invoke Delete NonLinkedTaxDistributionsRel


		DeleteEntranceRules

			if (IsPrepaymentType
			and !Status.Unreleased
			and !Status.Rejected
			and !Status.PendingApproval)
				constraint (MatchProcessType.Expense)
					"CannotDeletePurchaseOrderPrepaymentInvoice"	

			include VerifyProcessingMonitorRule

			if (initiating action != "CancelUnreleasedInvoiceUnreleased"		
			and initiating action != "CancelRejectedInvoiceRejected")		
				invoke Delete PayablesInvoiceCommentRel				

			invoke Purge MatchReconQueueFinanceResourceRel

			invoke Purge MatchReconQueueRel

			invoke Purge MatchServiceContractInvoicesRel 

			invoke PurgeDetail MatchWorkRel

			invoke Purge MatchWorkRel

			invoke Delete PayablesOnHoldPaymentRel

			invoke Delete PayablesInvoicePaymentRel	

			include UpdateMatchInvoiceDetail

			invoke DeleteNoInvoiceUpdate PayablesInvoiceDetailRel	

			invoke DeleteNoInvoiceUpdate PayablesInvoiceAddOnChargeRel	

			invoke Delete PayablesInvoiceSpreadAddOnCharge set

			invoke Delete MatchInvoiceReferenceRel

			LocalRunProgram = RunProgram.PayablesInvoice
			LocalPayGroup = blank

			if (BypassMatch)
				invoke Delete MatchPurchaseOrderInvoiceHistoryRel		


			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke PurgeAllGLCommitDocuments GLCommitDocumentsRel
				invoke Delete BudgetTemplateGroupTotalRel
				invoke Delete BudgetEditBatchRel

			if  (MatchAgingInvoiceRel exists)
				invoke Delete MatchAgingInvoiceRel


		CashLedgerPayablesPaymentProcessing

			LocalUpdateTransactionIDNumber = false
			if (BankTransactionCode.ManualPaymentNumberReservation
			or  CashLedgerPayablesPaymentRel exists)	
				if (BankTransactionCode.BankTransactionType.CashPayment)	
					if (TransientPaymentNumber entered)	
						if (CashLedgerPayablesPaymentRel exists
						and any PayablesInvoicePaymentRel.CashLedgerPayablesPaymentRel not exists)	
							if (BankTransactionCode.ManualPaymentNumberReservation)
								constraint (first CashLedgerPayablesPaymentRel.Status.ReservedForManualPayment)
									"ManualPaymentNumber<TransientPaymentNumber>AlreadyAssigned"    
							else	
								constraint (no CashLedgerPayablesPaymentRel.CheckType.ManuallyCreated)
									"PaymentNumber<TransientPaymentNumber>AlreadyUsed"	
				if (CashCode 				changed
				or  BankTransactionCode 	changed
				or  TransientPaymentNumber 	!= first CashLedgerPayablesPaymentRel.TransactionNumber
				or  TransientPaymentDate 	!= first CashLedgerPayablesPaymentRel.PaymentDate
				or  TransientPaymentAmount	!= first CashLedgerPayablesPaymentRel.PaymentAmount
				or  UpdateCashLedgerPayablesPayment)	
					if (!UpdateCashLedgerPayablesPayment)
						LocalUpdateTransactionIDNumber = true
					invoke Update first CashLedgerPayablesPaymentRel
						assign result to LocalCashLedgerPayablesPayment
						invoked.CashLedgerPayablesPayment.BankTransactionCode	 	= BankTransactionCode
						invoked.CashCode											= CashCode
						invoked.CashManagementGroup									= CashCode.CashManagementGroup
						invoked.TransactionNumber									= TransientPaymentNumber	
						invoked.Company												= DerivedCashPostingCompany 
						invoked.PayablesCompanyProcessLevel.PayablesCompany			= Company
						invoked.PayablesCompanyProcessLevel.PayablesProcessLevel	= ProcessLevel
						invoked.PayGroup											= PayGroup
						invoked.VendorGroup											= Vendor.VendorGroup
						invoked.PaidVendor											= PayVendor
						invoked.PaidName											= PayVendor.Vendor.VendorName
						invoked.Status												= 1
						invoked.RemitToCode											= RemitToCode
						invoked.InvoiceGroup										= InvoiceGroup
						invoked.PaymentAmount										= TransientPaymentAmount
						invoked.AppliedAmountBankAccountCurrency					= TransientPaymentAmount
						invoked.PaymentAmountBankAccountCurrency					= TransientPaymentAmount
						invoked.PaidAmountInvoiceCurrency							= TransientPaymentAmount
						invoked.PaymentDate											= TransientPaymentDate


						invoked.PayCurrency											= InvoiceCurrency
						invoked.CheckType											= "M"
						invoked.ReleasedStatus										= "Y"
			else
				LocalUpdateTransactionIDNumber = true
				invoke Create CashLedgerPayablesPaymentRel
					assign result to LocalCashLedgerPayablesPayment
					invoked.CashLedgerPayablesPayment.BankTransactionCode 		= BankTransactionCode
					invoked.CashCode											= CashCode
					invoked.CashManagementGroup									= CashCode.CashManagementGroup
					invoked.TransactionNumber									= TransientPaymentNumber 	
					invoked.Company												= DerivedCashPostingCompany 
					invoked.PayablesCompanyProcessLevel.PayablesCompany			= Company
					invoked.PayablesCompanyProcessLevel.PayablesProcessLevel	= ProcessLevel
					invoked.PayGroup											= PayGroup
					invoked.VendorGroup											= Vendor.VendorGroup
					invoked.PaidVendor											= PayVendor
					invoked.PaidName											= PayVendor.Vendor.VendorName
					invoked.Status												= 1
					invoked.RemitToCode											= RemitToCode
					invoked.InvoiceGroup										= InvoiceGroup
					invoked.PaymentAmount										= TransientPaymentAmount
					invoked.AppliedAmountBankAccountCurrency					= TransientPaymentAmount
					invoked.PaymentAmountBankAccountCurrency					= TransientPaymentAmount
					invoked.PaidAmountInvoiceCurrency							= TransientPaymentAmount
					invoked.PaymentDate											= TransientPaymentDate


					invoked.PayCurrency											= InvoiceCurrency
					invoked.CheckType											= "M"
					invoked.ReleasedStatus										= "Y"

			if (LocalUpdateTransactionIDNumber)
				invoke Update last PayablesInvoicePaymentRel
					initialize invoked.TransientCurrencyRefresh 
					invoked.TransactionIDNumber = CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment.TransactionIDNumber
				LocalUpdateTransactionIDNumber = false

			UpdateCashLedgerPayablesPayment = false	





		RefreshCurrencyAmounts















			initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ProjectAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount

			initialize DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
			initialize DiscountAmount.AlternateAmount.EnteredCurrencyAmount
			initialize DiscountAmount.AlternateAmount2.EnteredCurrencyAmount
			initialize DiscountAmount.AlternateAmount3.EnteredCurrencyAmount
			initialize DiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount
			initialize DiscountAmount.ToAlternateAmount.EnteredCurrencyAmount
			initialize DiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount
			initialize DiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount
			initialize DiscountAmount.ProjectAmount.EnteredCurrencyAmount
			initialize DiscountAmount.ReportAmount1.EnteredCurrencyAmount
			initialize DiscountAmount.ReportAmount2.EnteredCurrencyAmount
			initialize DiscountAmount.ReportAmount3.EnteredCurrencyAmount
			initialize DiscountAmount.ReportAmount4.EnteredCurrencyAmount
			initialize DiscountAmount.ReportAmount5.EnteredCurrencyAmount

			DiscountAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
			DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			DiscountAmount.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.EnteredCurrencyRate			
			DiscountAmount.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
			DiscountAmount.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
			DiscountAmount.ReportAmount1.EnteredCurrencyRate	= InvoiceAmount.ReportAmount1.EnteredCurrencyRate			
			DiscountAmount.ReportAmount2.EnteredCurrencyRate	= InvoiceAmount.ReportAmount2.EnteredCurrencyRate			
			DiscountAmount.ReportAmount3.EnteredCurrencyRate	= InvoiceAmount.ReportAmount3.EnteredCurrencyRate			
			DiscountAmount.ReportAmount4.EnteredCurrencyRate	= InvoiceAmount.ReportAmount4.EnteredCurrencyRate			
			DiscountAmount.ReportAmount5.EnteredCurrencyRate	= InvoiceAmount.ReportAmount5.EnteredCurrencyRate			

			initialize RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.AlternateAmount.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ToAlternateAmount.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ProjectAmount.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ReportAmount1.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ReportAmount2.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ReportAmount3.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ReportAmount4.EnteredCurrencyAmount
			initialize RevaluedBaseAmount.ReportAmount5.EnteredCurrencyAmount

			RevaluedBaseAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
			RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.EnteredCurrencyRate			
			RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
			RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
			RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate	= InvoiceAmount.ReportAmount1.EnteredCurrencyRate			
			RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate	= InvoiceAmount.ReportAmount2.EnteredCurrencyRate			
			RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate	= InvoiceAmount.ReportAmount3.EnteredCurrencyRate			
			RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate	= InvoiceAmount.ReportAmount4.EnteredCurrencyRate			
			RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate	= InvoiceAmount.ReportAmount5.EnteredCurrencyRate			

			for each PaymentsNotHistoricalRel
				invoke Update each
					if (InvoiceCurrency changed			
					and VendorPaymentAmount	!entered)
						initialize invoked.VendorPaymentCurrency

					initialize invoked.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount

					initialize invoked.PaymentAmount.AlternateAmount.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.AlternateAmount2.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.AlternateAmount3.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ToAlternateAmount.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ProjectAmount.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ReportAmount1.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ReportAmount2.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ReportAmount3.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ReportAmount4.EnteredCurrencyAmount
					initialize invoked.PaymentAmount.ReportAmount5.EnteredCurrencyAmount

					invoked.TransientCurrencyRefresh				= true
					invoked.PaymentAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
					invoked.PaymentAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.PaymentAmount.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.EnteredCurrencyRate			
					invoked.PaymentAmount.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
					invoked.PaymentAmount.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
					invoked.PaymentAmount.ReportAmount1.EnteredCurrencyRate	= InvoiceAmount.ReportAmount1.EnteredCurrencyRate				
					invoked.PaymentAmount.ReportAmount2.EnteredCurrencyRate	= InvoiceAmount.ReportAmount2.EnteredCurrencyRate				
					invoked.PaymentAmount.ReportAmount3.EnteredCurrencyRate	= InvoiceAmount.ReportAmount3.EnteredCurrencyRate				
					invoked.PaymentAmount.ReportAmount4.EnteredCurrencyRate	= InvoiceAmount.ReportAmount4.EnteredCurrencyRate				
					invoked.PaymentAmount.ReportAmount5.EnteredCurrencyRate	= InvoiceAmount.ReportAmount5.EnteredCurrencyRate				



					initialize invoked.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.AlternateAmount.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ToAlternateAmount.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ProjectAmount.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ReportAmount1.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ReportAmount2.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ReportAmount3.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ReportAmount4.EnteredCurrencyAmount
					initialize invoked.RevaluedBaseAmount.ReportAmount5.EnteredCurrencyAmount

					invoked.RevaluedBaseAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
					invoked.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.RevaluedBaseAmount.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.EnteredCurrencyRate			
					invoked.RevaluedBaseAmount.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
					invoked.RevaluedBaseAmount.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
					invoked.RevaluedBaseAmount.ReportAmount1.EnteredCurrencyRate	= InvoiceAmount.ReportAmount1.EnteredCurrencyRate			
					invoked.RevaluedBaseAmount.ReportAmount2.EnteredCurrencyRate	= InvoiceAmount.ReportAmount2.EnteredCurrencyRate			
					invoked.RevaluedBaseAmount.ReportAmount3.EnteredCurrencyRate	= InvoiceAmount.ReportAmount3.EnteredCurrencyRate			
					invoked.RevaluedBaseAmount.ReportAmount4.EnteredCurrencyRate	= InvoiceAmount.ReportAmount4.EnteredCurrencyRate			
					invoked.RevaluedBaseAmount.ReportAmount5.EnteredCurrencyRate	= InvoiceAmount.ReportAmount5.EnteredCurrencyRate			

					initialize invoked.DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.AlternateAmount.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.AlternateAmount2.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.AlternateAmount3.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ToAlternateAmount.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ProjectAmount.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ReportAmount1.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ReportAmount2.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ReportAmount3.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ReportAmount4.EnteredCurrencyAmount
					initialize invoked.DiscountAmount.ReportAmount5.EnteredCurrencyAmount

					invoked.DiscountAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
					invoked.DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.DiscountAmount.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.EnteredCurrencyRate			
					invoked.DiscountAmount.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
					invoked.DiscountAmount.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
					invoked.DiscountAmount.ReportAmount1.EnteredCurrencyRate	= InvoiceAmount.ReportAmount1.EnteredCurrencyRate			
					invoked.DiscountAmount.ReportAmount2.EnteredCurrencyRate	= InvoiceAmount.ReportAmount2.EnteredCurrencyRate			
					invoked.DiscountAmount.ReportAmount3.EnteredCurrencyRate	= InvoiceAmount.ReportAmount3.EnteredCurrencyRate			
					invoked.DiscountAmount.ReportAmount4.EnteredCurrencyRate	= InvoiceAmount.ReportAmount4.EnteredCurrencyRate			
					invoked.DiscountAmount.ReportAmount5.EnteredCurrencyRate	= InvoiceAmount.ReportAmount5.EnteredCurrencyRate			

					if  (InvoiceCurrency changed)
						invoked.InvoiceCurrency	= InvoiceCurrency
					if  (InvoiceDate changed)
						initialize invoked.DiscountDate
						initialize invoked.DiscountPercent
						initialize invoked.DueDate
						LocalDaysDiff 	= InvoiceDate - old InvoiceDate	
						DiscountDate1	+= LocalDaysDiff as days		
						DiscountDate2	+= LocalDaysDiff as days		
						DiscountDate3	+= LocalDaysDiff as days		

					if  (InvoiceDate changed
					or   CashCode changed
					or   BankTransactionCode changed)
						invoked.CashCode				= CashCode				
						invoked.BankTransactionCode		= BankTransactionCode	


			if (BackgroundProcessing.MatchInvoice)
				invoke MatchCurrencyRefreshUpdateSet PayablesInvoiceDistribution
					invoked.PrmCompany	= Company
					invoked.PrmInvoice 	= PayablesInvoice
				initialize BackgroundProcessing
			else
			if  (invoking action = "MatchWork.Match"
			or   invoking action = "MatchCurrencyRefresh"
			or   invoking action = "UpdateAfterMatch"
			or   invoking action = "UpdateCurrencyAmountsFromMatch")

				for each PayablesInvoiceDistribution set		
					invoke MatchCurrencyRefreshUpdate each
						initialize invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.AlternateAmount
						initialize invoked.DistributionAmount.AlternateAmount2
						initialize invoked.DistributionAmount.AlternateAmount3
						initialize invoked.DistributionAmount.ToFunctionalAmount
						initialize invoked.DistributionAmount.ToAlternateAmount
						initialize invoked.DistributionAmount.ToAlternateAmount2
						initialize invoked.DistributionAmount.ToAlternateAmount3
						initialize invoked.DistributionAmount.ProjectAmount
						initialize invoked.DistributionAmount.ReportAmount1
						initialize invoked.DistributionAmount.ReportAmount2
						initialize invoked.DistributionAmount.ReportAmount3
						initialize invoked.DistributionAmount.ReportAmount4
						initialize invoked.DistributionAmount.ReportAmount5
						invoked.TransientCurrencyRefresh				= true
						invoked.DistributionAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				include AdjustDistributionCurrencyAmountsForMatch		
			else

				for each PayablesInvoiceDistribution set		
					invoke Update each
						initialize invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.ToFunctionalAmount	
						initialize invoked.DistributionAmount.ToAlternateAmount		
						initialize invoked.DistributionAmount.ToAlternateAmount2	
						initialize invoked.DistributionAmount.ToAlternateAmount3	
						initialize invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						initialize invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

						invoked.TransientCurrencyRefresh				= true
						invoked.DistributionAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.EnteredCurrencyRate			
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate	= InvoiceAmount.ReportAmount1.EnteredCurrencyRate			
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate	= InvoiceAmount.ReportAmount2.EnteredCurrencyRate			
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate	= InvoiceAmount.ReportAmount3.EnteredCurrencyRate			
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate	= InvoiceAmount.ReportAmount4.EnteredCurrencyRate			
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate	= InvoiceAmount.ReportAmount5.EnteredCurrencyRate			

						if  (InvoiceCurrency changed)
							invoked.InvoiceCurrency	= InvoiceCurrency

				include AdjustDistributionCurrencyAmounts		





		RefreshCurrenciesForShortPay	



			InvoiceAmount.ExchangeDate 		= InvoiceDate
			InvoiceAmount.KeepRateOnly 		= true

			initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ProjectAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount

			LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency

			InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		= InvoiceAmount.FunctionalAmount.OutputCurrencyRate
			InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	= InvoiceAmount.FunctionalAmount.OutputCurrencyAmount

			InvoiceAmount.AlternateAmount.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount.OutputCurrencyRate
			InvoiceAmount.AlternateAmount.EnteredCurrencyAmount		= InvoiceAmount.AlternateAmount.OutputCurrencyAmount

			InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount2.OutputCurrencyRate
			InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount	= InvoiceAmount.AlternateAmount2.OutputCurrencyAmount

			InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount3.OutputCurrencyRate
			InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount	= InvoiceAmount.AlternateAmount3.OutputCurrencyAmount

			InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.ToFunctionalAmount.OutputCurrencyRate
			InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount	= InvoiceAmount.ToFunctionalAmount.OutputCurrencyAmount

			InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate		= InvoiceAmount.ToAlternateAmount.OutputCurrencyRate
			InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount	= InvoiceAmount.ToAlternateAmount.OutputCurrencyAmount

			InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.ToAlternateAmount2.OutputCurrencyRate
			InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount	= InvoiceAmount.ToAlternateAmount2.OutputCurrencyAmount

			InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.ToAlternateAmount3.OutputCurrencyRate
			InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount	= InvoiceAmount.ToAlternateAmount3.OutputCurrencyAmount

			InvoiceAmount.ProjectAmount.EnteredCurrencyRate			= InvoiceAmount.ProjectAmount.OutputCurrencyRate
			InvoiceAmount.ProjectAmount.EnteredCurrencyAmount		= InvoiceAmount.ProjectAmount.OutputCurrencyAmount

			InvoiceAmount.ReportAmount1.EnteredCurrencyRate			= InvoiceAmount.ReportAmount1.OutputCurrencyRate
			InvoiceAmount.ReportAmount1.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount1.OutputCurrencyAmount

			InvoiceAmount.ReportAmount2.EnteredCurrencyRate			= InvoiceAmount.ReportAmount2.OutputCurrencyRate
			InvoiceAmount.ReportAmount2.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount2.OutputCurrencyAmount

			InvoiceAmount.ReportAmount3.EnteredCurrencyRate			= InvoiceAmount.ReportAmount3.OutputCurrencyRate
			InvoiceAmount.ReportAmount3.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount3.OutputCurrencyAmount

			InvoiceAmount.ReportAmount4.EnteredCurrencyRate			= InvoiceAmount.ReportAmount4.OutputCurrencyRate
			InvoiceAmount.ReportAmount4.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount4.OutputCurrencyAmount

			InvoiceAmount.ReportAmount5.EnteredCurrencyRate			= InvoiceAmount.ReportAmount5.OutputCurrencyRate
			InvoiceAmount.ReportAmount5.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount5.OutputCurrencyAmount










		FlipInvoiceAmountFieldsToNeg	

			initialize LocalDoCurrency
			if (InvoiceAmount.CurrencyAmount > 0)
				InvoiceAmount.CurrencyAmount   *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
				InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.AlternateAmount.EnteredCurrencyAmount > 0)
				InvoiceAmount.AlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount > 0)
				InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount > 0)
				InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount > 0)
				InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount > 0)
				InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount > 0)
				InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount > 0)
				InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ProjectAmount.EnteredCurrencyAmount > 0)
				InvoiceAmount.ProjectAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount1.EnteredCurrencyAmount > 0)
				InvoiceAmount.ReportAmount1.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount2.EnteredCurrencyAmount > 0)
				InvoiceAmount.ReportAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount3.EnteredCurrencyAmount > 0)
				InvoiceAmount.ReportAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount4.EnteredCurrencyAmount > 0)
				InvoiceAmount.ReportAmount4.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount5.EnteredCurrencyAmount > 0)
				InvoiceAmount.ReportAmount5.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (LocalDoCurrency)
				InvoiceAmount.KeepRateOnly	= true
				initialize LocalDoCurrency



		FlipInvoiceAmountFieldsToPos	

			initialize LocalDoCurrency
			if (InvoiceAmount.CurrencyAmount < 0)
				InvoiceAmount.CurrencyAmount   *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount < 0)
				InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.AlternateAmount.EnteredCurrencyAmount < 0)
				InvoiceAmount.AlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount < 0)
				InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount < 0)
				InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount < 0)
				InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount < 0)
				InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount < 0)
				InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount < 0)
				InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ProjectAmount.EnteredCurrencyAmount < 0)
				InvoiceAmount.ProjectAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount1.EnteredCurrencyAmount < 0)
				InvoiceAmount.ReportAmount1.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount2.EnteredCurrencyAmount < 0)
				InvoiceAmount.ReportAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount3.EnteredCurrencyAmount < 0)
				InvoiceAmount.ReportAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount4.EnteredCurrencyAmount < 0)
				InvoiceAmount.ReportAmount4.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (InvoiceAmount.ReportAmount5.EnteredCurrencyAmount < 0)
				InvoiceAmount.ReportAmount5.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (LocalDoCurrency)
				InvoiceAmount.KeepRateOnly	= true
				initialize LocalDoCurrency



		FlipDiscountAmountFieldsToNeg	

			initialize LocalDoCurrency
			if (DiscountAmount.CurrencyAmount > 0)
				DiscountAmount.CurrencyAmount   *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
				DiscountAmount.FunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.AlternateAmount.EnteredCurrencyAmount > 0)
				DiscountAmount.AlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.AlternateAmount2.EnteredCurrencyAmount > 0)
				DiscountAmount.AlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.AlternateAmount3.EnteredCurrencyAmount > 0)
				DiscountAmount.AlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount > 0)
				DiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToAlternateAmount.EnteredCurrencyAmount > 0)
				DiscountAmount.ToAlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount > 0)
				DiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount > 0)
				DiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ProjectAmount.EnteredCurrencyAmount > 0)
				DiscountAmount.ProjectAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount1.EnteredCurrencyAmount > 0)
				DiscountAmount.ReportAmount1.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount2.EnteredCurrencyAmount > 0)
				DiscountAmount.ReportAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount3.EnteredCurrencyAmount > 0)
				DiscountAmount.ReportAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount4.EnteredCurrencyAmount > 0)
				DiscountAmount.ReportAmount4.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount5.EnteredCurrencyAmount > 0)
				DiscountAmount.ReportAmount5.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (LocalDoCurrency)
				DiscountAmount.KeepRateOnly	= true
				initialize LocalDoCurrency



		FlipDiscountAmountFieldsToPos	

			initialize LocalDoCurrency
			if (DiscountAmount.CurrencyAmount < 0)
				DiscountAmount.CurrencyAmount   *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.FunctionalAmount.EnteredCurrencyAmount < 0)
				DiscountAmount.FunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.AlternateAmount.EnteredCurrencyAmount < 0)
				DiscountAmount.AlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.AlternateAmount2.EnteredCurrencyAmount < 0)
				DiscountAmount.AlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.AlternateAmount3.EnteredCurrencyAmount < 0)
				DiscountAmount.AlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount < 0)
				DiscountAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToAlternateAmount.EnteredCurrencyAmount < 0)
				DiscountAmount.ToAlternateAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount < 0)
				DiscountAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount < 0)
				DiscountAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ProjectAmount.EnteredCurrencyAmount < 0)
				DiscountAmount.ProjectAmount.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount1.EnteredCurrencyAmount < 0)
				DiscountAmount.ReportAmount1.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount2.EnteredCurrencyAmount < 0)
				DiscountAmount.ReportAmount2.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount3.EnteredCurrencyAmount < 0)
				DiscountAmount.ReportAmount3.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount4.EnteredCurrencyAmount < 0)
				DiscountAmount.ReportAmount4.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (DiscountAmount.ReportAmount5.EnteredCurrencyAmount < 0)
				DiscountAmount.ReportAmount5.EnteredCurrencyAmount *= -1
				LocalDoCurrency					= true
			if (LocalDoCurrency)
				DiscountAmount.KeepRateOnly	= true
				initialize LocalDoCurrency



		ProcessTerms		










			if (RemitToCode not entered)		
				if (ServiceContract entered)
					if (ServiceContract.ApPoPurchaseFrom.VendorLocation entered
					and !ServiceContract.ApPoPurchaseFrom.VendorLocation.LocationType.PurchaseFrom)
						RemitToCode = ServiceContract.ApPoPurchaseFrom.VendorLocation		
					else
						if (ServiceContract.ApPoPurchaseFrom.PurchaseFromLocation entered
						and !ServiceContract.ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.LocationType.PurchaseFrom)
							RemitToCode = ServiceContract.ApPoPurchaseFrom.PurchaseFromLocation		
				if (RemitToCode not entered)
					if (PayVendor.NormalRemitToLocation entered)
						RemitToCode = PayVendor.NormalRemitToLocation			
					else
						if (FirstPurchaseOrder.PurchaseFromLocation.RemitToCode	entered)
							PurchaseFromLocation 	= FirstPurchaseOrder.PurchaseFromLocation		
						else
							if (MatchPurchaseOrderInvoicesRel.PurchaseOrder.PurchaseFromLocation.RemitToCode entered)
								PurchaseFromLocation 	= MatchPurchaseOrderInvoicesRel.PurchaseOrder.PurchaseFromLocation		
						if ((PayVendor = Vendor
						or   MatchProcessType.Expense)
						and  PurchaseFromLocation.RemitToCode entered)
							RemitToCode = PurchaseFromLocation.RemitToCode		

			if (FlexTerms
			and !CreateFromBatchSwitch)
				initialize TermsCode












			if ((ActionType.CreateType
			or  (ActionType.UpdateType		
			and  Vendor changed)) 			
			and !CreateFromBatchSwitch)
				if (DiscountCode not entered)	
					if (VendorCompanyDefaultRel.DiscountCode entered)
						DiscountCode = VendorCompanyDefaultRel.DiscountCode
					else	
						if (RemitToCode.DiscountCode entered)
							DiscountCode = RemitToCode.DiscountCode
						else
						if (PayVendor.first NormalRemitToLocationRel.VendorLocation.DiscountCode entered)
							DiscountCode = PayVendor.first NormalRemitToLocationRel.VendorLocation.DiscountCode
						else
						if (PurchaseFromLocation.RemitToCode.DiscountCode entered)
							DiscountCode = PurchaseFromLocation.RemitToCode.DiscountCode
						else	
							if (Vendor.DiscountCode entered)
								DiscountCode = Vendor.DiscountCode
							else	
								if (ProcessLevel not entered)
									if (!MatchProcessType.Expense)
										ProcessLevel = FirstPurchaseOrder.ProcessLevel
										if (ProcessLevel not entered)
											LocalProcessLevel = ServiceContract.ProcessLevelGroup.ProcessLevel
											if (ContractProcessLevelRel exists)
												ProcessLevel = ServiceContract.ProcessLevelGroup.ProcessLevel
									if (ProcessLevel not entered
									and VendorReturn entered)
										ProcessLevel = VendorReturn.ProcessLevel

									if (ProcessLevel not entered
									and VendorCompanyDefaultRel.ProcessLevel entered)
										ProcessLevel = VendorCompanyDefaultRel.ProcessLevel

									if (ProcessLevel not entered
									and DefaultProcessLevelExists)
										ProcessLevel = first DefaultProcessLevelRel.PayablesProcessLevel

								if (ProcessLevel.DiscountCode entered)
									DiscountCode = ProcessLevel.DiscountCode
								else	
									DiscountCode = Company.DiscountCode


				if   (DueDate entered
				and  !IsChargeback
				and  !TransientChangingVendor)
					initialize TermsCode
				else


					if (PayVendor not entered)				
						PayVendor = Vendor.PayVendor		
						if (PayVendor not entered)			
							PayVendor = Vendor				

					if (TermsCode not entered)
						if (FirstPurchaseOrder.TermCode entered)
							TermsCode = FirstPurchaseOrder.TermCode
						else
							if (ServiceContract.TermsCode entered)			
								TermsCode = ServiceContract.TermsCode		
							else											
								if (PurchaseFromLocation.TermsCode entered)						
									TermsCode = PurchaseFromLocation.TermsCode					
								else
									if (RemitToVendorCompanyDefaultRel.TermsCode entered)
										TermsCode = RemitToVendorCompanyDefaultRel.TermsCode
									else
										if (RemitToCode.TermsCode entered)
											TermsCode = RemitToCode.TermsCode
										else
											if (VendorCompanyDefaultRel.TermsCode entered)
												TermsCode = VendorCompanyDefaultRel.TermsCode
											else
												if (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode entered)
													TermsCode = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode
												else
													if (Vendor.TermsCode entered)
														TermsCode = Vendor.TermsCode

					if (TermsCode entered
					and !Company.BestTerms)
						include EditTermsData

			if (ActionType.UpdateType)
				if  ((DueDate		entered
				or	  SaveDueDate	entered)
				and  DueDate 	 	changed
				and  InvoiceDate not changed	
				and !TransientChangingVendor)
					initialize TermsCode
					initialize DiscountAmount
					initialize DiscountDate
					initialize DiscountPercent
					initialize AllowableAmountForDiscount
					initialize DiscountAmount1
					initialize BaseDiscountAmount1
					initialize DiscountDate1
					initialize DiscountPercent1
					initialize DiscountAmount2
					initialize BaseDiscountAmount2
					initialize DiscountDate2
					initialize DiscountPercent2
					initialize DiscountAmount3
					initialize BaseDiscountAmount3
					initialize DiscountDate3
					initialize DiscountPercent3
				else
					if (TermsCode entered)
						if (TermsCode 	changed
						or  DueDate not entered			
						or  InvoiceDate changed
						or (InvoiceAmount.CurrencyAmount changed		
						and OldInvoiceAmount	!entered))				
							initialize DueDate
							initialize DiscountAmount
							initialize DiscountDate
							initialize DiscountPercent
							include EditTermsData
						else
							DueDate = old DueDate
					else	
						if (DueDate not entered)	
							if (FirstPurchaseOrder.TermCode entered)
								TermsCode = FirstPurchaseOrder.TermCode
							else
								if (PurchaseFromLocation.TermsCode entered)						
									TermsCode = PurchaseFromLocation.TermsCode					
								else
									if (RemitToVendorCompanyDefaultRel.TermsCode entered)
										TermsCode = RemitToVendorCompanyDefaultRel.TermsCode
									else
										if (RemitToCode.TermsCode entered)
											TermsCode = RemitToCode.TermsCode
										else
											if (VendorCompanyDefaultRel.TermsCode entered)
												TermsCode = VendorCompanyDefaultRel.TermsCode
											else
												if (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode entered)
													TermsCode = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode
												else
													if (Vendor.TermsCode entered)
														TermsCode = Vendor.TermsCode
				
				if (TermsCode not entered)
					if (old TermsCode entered)
						initialize DiscountAmount
						initialize DiscountDate
						initialize DiscountPercent
						initialize AllowableAmountForDiscount
					if (DueDate 	not entered
					and SaveDueDate		entered)
						DueDate = SaveDueDate
					else								
						if (DueDate 	not entered		
						and SaveDueDate	not entered)	
							DueDate = old DueDate		

			if (Suffix = 111)
				NextSentence = true
			else
			if (TermsCode entered
			and Company.BestTerms
			and !FlexTerms
			and DueDate not entered)
				initialize DiscountAmount.CurrencyAmount
				initialize DueDate
				initialize DiscountPercent
				initialize DiscountDate
				LocalTermsCalculation = Vendor.TermsCalculation
				if (LocalTermsCalculation not entered)
					LocalTermsCalculation = Company.TermsCalculation
				if (LocalTermsCalculation.UseReceiptOfInvoiceDate
				and ReceiptOfInvoiceDate > InvoiceDate)
					CalculateBestTerms.InvoiceDate 		= ReceiptOfInvoiceDate
					CalculateBestTerms.PODate			= ReceiptOfInvoiceDate
				else
					CalculateBestTerms.InvoiceDate 		= InvoiceDate
					CalculateBestTerms.PODate 			= InvoiceDate
				CalculateBestTerms.InvoiceAmount		= InvoiceAmount.CurrencyAmount
				CalculateBestTerms.POAmount				= InvoiceAmount.CurrencyAmount
				CalculateBestTerms.InterestRate1		= CashCode.ReturnOnInvestmentRate

				if (FirstPurchaseOrder.TermCode entered)
					if (TermsCode != FirstPurchaseOrder.TermCode)
						CalculateBestTerms.InvoiceTermsCode	= TermsCode
						CalculateBestTerms.POTermsCode		= FirstPurchaseOrder.TermCode
						TermsCode							= CalculateBestTerms.BestTermsCode
				else
				if (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode entered)
					if (TermsCode != first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode)
						CalculateBestTerms.InvoiceTermsCode	= TermsCode
						CalculateBestTerms.POTermsCode		= FirstPurchaseOrder.TermCode
						TermsCode							= CalculateBestTerms.BestTermsCode

				if (TermsCode != VendorCompanyDefaultRel.TermsCode
				and VendorCompanyDefaultRel.TermsCode entered)
					CalculateBestTerms.InvoiceTermsCode	= TermsCode
					CalculateBestTerms.POTermsCode		= VendorCompanyDefaultRel.TermsCode
					TermsCode							= CalculateBestTerms.BestTermsCode

				if (TermsCode != Vendor.TermsCode
				and first Vendor.TermsCode entered)
					CalculateBestTerms.InvoiceTermsCode	= TermsCode
					CalculateBestTerms.POTermsCode		= Vendor.TermsCode
					TermsCode							= CalculateBestTerms.BestTermsCode

				if (TermsCode != PurchaseFromLocation.TermsCode
				and PurchaseFromLocation.TermsCode entered)
					CalculateBestTerms.InvoiceTermsCode	= TermsCode
					CalculateBestTerms.POTermsCode		= PurchaseFromLocation.TermsCode
					TermsCode							= CalculateBestTerms.BestTermsCode

			if ((DiscountDate					entered
			or DiscountDate1					entered
			or DiscountDate2					entered
			or DiscountDate3					entered
			or DiscountPercent					entered
			or DiscountPercent1					entered
			or DiscountPercent2					entered
			or DiscountPercent3					entered
			or DiscountAmount.CurrencyAmount	entered
			or DiscountAmount1					entered
			or DiscountAmount2					entered
			or DiscountAmount3					entered
			or TermsCode						entered
			or InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	changed
			or DiscountAmount.FunctionalAmount.EnteredCurrencyAmount	entered)
			and DueDate 					not entered)
				include EditTermsData




		PerformShortPayProcess





			DoShortPayProcess	= true
			InvoiceAmount.CurrencyAmount	-= LocalPTXTaxAmount


			if (TaxableAmount not entered)					
				if (LocalPTXTaxableAmount entered)
					TaxableAmount 	= LocalPTXTaxableAmount
				else
				if (PayablesInvoiceTaxRel.TaxSystemTaxableAmount entered)
					TaxableAmount	= PayablesInvoiceTaxRel.TaxSystemTaxableAmount



			if (InvoiceAmount.CurrencyAmount < TaxableAmount)
				TaxableAmount = InvoiceAmount.CurrencyAmount

			invoke Update first PayablesInvoicePaymentRel
				invoked.PaymentAmount.CurrencyAmount	= InvoiceAmount.CurrencyAmount
				invoked.PaymentAmount.ExchangeDate		= InvoiceAmount.ExchangeDate
				invoked.TransientCurrencyRefresh		= true


			initialize TaxAmount
			initialize CalculateTax
			include PopulateCalcTaxInputFields
			CalculateTax.TaxAmount		= TaxAmount
			CalculateTax.TaxableAmount	= TaxableAmount
			CalculateTax.Function	= "C"	
			include DisplayCalculateTaxInput
			LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
			include DisplayCalculateTaxOutput


			if  (CalculateTax.OutputErrorNumber = 202
			or   CalculateTax.OutputErrorNumber = 203
			or	 CalculateTax.OutputErrorNumber = 204
			or	 CalculateTax.OutputErrorNumber = 205)
				if (AllowShortPay)
					LocalContinue	= true
				else
					if  (Company.AllowToleranceOverride)		
						confirmation required
							"TaxChargedByVendor<TaxAmount>IsOutOfToleranceWithTheTaxEngineTaxAmount<CalculateTax.TaxAmount>;AcceptTheVendorChargedAmount?"
							TransientAcceptTaxOverride = true		
					else
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"
			else
				if (!CalculateTax.DoTaxCalculation)
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>"

			if (TaxableAmount not entered
			and MatchProcessType.Expense)
				TaxableAmount	= CalculateTax.OutputTotalTaxable












		NewShortPayProcess		





			DoShortPayProcess	= true






			if  (!MatchProcessType.Expense
			and  LocalPTXTaxAmount entered
			and  OneSourceDirectPay entered
			and  OneSourcePayAsBilled not entered)  



				include CreateShortPayComment
			else
			if ((TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate > 0		
			or  (SumOfCalculatedTaxAmount not entered							
			and  LocalPTXTaxAmount entered))									
			or  (LocalPTXTaxAmount entered					
			and  SumOfCalculatedTaxAmount entered			
			and !PayablesTaxTolerance.InTolerance))			

				include CreateShortPayComment



			invoke OneSourceShortPayUpdate  





			LocalCounter = 1
			while (TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution entered)



				if (TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction entered
				and PayablesInvoiceDistributionRel.PayablesTaxDetail.TaxingJurisdiction not entered)
					LocalTaxDistribution	= TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution
					invoke Update PayablesTaxDetailRel
						invoked.TaxingJurisdiction	=	TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
						invoked.InformationMessage	=	TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
						invoked.SentToTaxEngine		=	TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		

				if (TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate > 0)		
					LocalPayablesInvoiceDistrib		= TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution


					invoke CreateLandedTaxDistribution PayablesInvoiceDistribution1Rel
						invoked.PrmOriginalDistribution		= LocalPayablesInvoiceDistrib		
						invoked.PrmLocalTaxSeqNbr			= 1									
						invoked.PrmTaxAmount		= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount
						invoked.PrmTaxRate			= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate
						if  (!MatchProcessType.Expense				
						and  OneSourceDirectPay entered				
						and  OneSourcePayAsBilled not entered)		
							invoked.PrmTaxTypeOverride	= "A"		
						invoked.PrmTaxJurisdiction	= TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
						invoked.PrmInfoMessage		= TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
						invoked.PrmSentToTaxEngine	= TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		

				increment LocalCounter
				increment CommitCounter			
				if (CommitCounter > 30)			
					commit transaction			
					initialize CommitCounter	



		PayAsBilledProcess		







			initialize TransientActualTaxAmountSum		
			LocalCounter = 1
			while (TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution entered)

				LocalPayablesInvoiceDistrib	= TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution	



				if (TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction entered
				and PayablesInvoiceDistribution1Rel.PayablesTaxDetail.TaxingJurisdiction not entered)	
					LocalTaxDistribution	= TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution

					invoke Update PayablesTaxDetailRel
						invoked.TaxingJurisdiction	=	TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
						invoked.InformationMessage	=	TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
						invoked.SentToTaxEngine		=	TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		
						invoked.ShipToLocation		= 	Location	

				if ((!MatchProcessType.Expense
				and   OneSourcePayAsBilled = "Y") 
				or    CalculateTax.LocalExcludeFromSabrixCall)
					NextSentence = true
				else
				if (TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate entered
				and TaxArray.TaxArrayOutput[LocalCounter + 1].PayablesInvoiceDistribution entered)	
					TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount = ((TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount / SumOfLineTaxableAmount) * LocalPTXTaxAmount)
					TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxRate	= (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount / TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount)

				else

					if (TaxArray.TaxArrayOutput[LocalCounter + 1].PayablesInvoiceDistribution not entered)	
						TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount = (LocalPTXTaxAmount - TransientActualTaxAmountSum)	
						TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxRate	= (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount / TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount)







				if (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount != 0)

					invoke CreateLandedTaxDistribution PayablesInvoiceDistribution1Rel
						invoked.PrmOriginalDistribution		= LocalPayablesInvoiceDistrib		
						invoked.PrmLocalTaxSeqNbr			= 1									
						invoked.PrmTaxAmount		= TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount
						invoked.PrmTaxRate			= TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxRate


						if (LocalPTXTaxAmount not entered)			
							invoked.PrmTaxTypeOverride	= "A"		
						invoked.PrmTaxJurisdiction	= TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
						invoked.PrmInfoMessage		= TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
						invoked.PrmSentToTaxEngine	= TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		

				else



					if (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount not entered						
					and TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount entered)							

						LocalReturnedTaxAmount = TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount

						round LocalReturnedTaxAmount to nearest DerivedRoundTo


						invoke CreateLandedTaxDistribution PayablesInvoiceDistribution1Rel							
							invoked.PrmOriginalDistribution		= LocalPayablesInvoiceDistrib		
							invoked.PrmLocalTaxSeqNbr			= 1									
							invoked.PrmTaxAmount		= LocalReturnedTaxAmount 
							invoked.PrmTaxRate			= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate		

							if (LocalPTXTaxAmount not entered)			
								invoked.PrmTaxTypeOverride	= "A"		
							invoked.PrmTaxJurisdiction	= TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
							invoked.PrmInfoMessage		= TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
							invoked.PrmSentToTaxEngine	= TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		

				increment LocalCounter
				increment CommitCounter			
				if (CommitCounter > 30)			
					commit transaction			
					initialize CommitCounter	





		VertexPayAsBilledProcess		








			initialize LocalRunningAmount
			initialize LocalLargestTaxLineAmount
			initialize LocalLargestTaxLinePID
			LocalCounter = 1
			while (TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution entered)

				LocalPayablesInvoiceDistrib		= TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution		



				if (TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction entered
				and PayablesInvoiceDistribution1Rel.PayablesTaxDetail.TaxingJurisdiction not entered)		
					LocalTaxDistribution	= TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution
					invoke Update PayablesTaxDetailRel
						invoked.TaxingJurisdiction	=	TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
						invoked.InformationMessage	=	TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
						invoked.SentToTaxEngine		=	TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		
						invoked.ShipToLocation		= 	Location	
				



				if (TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate entered)


					TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount = ((TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount / SumOfCalculatedTaxAmount) * LocalPTXTaxAmount)
					TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxRate	= (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount / TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount)


				

				LocalPayablesInvoiceDistrib		= TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution		



				if (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount != 0)

					invoke CreateLandedTaxDistribution PayablesInvoiceDistribution1Rel
						invoked.PrmOriginalDistribution		= LocalPayablesInvoiceDistrib		
						invoked.PrmLocalTaxSeqNbr			= 1									
						invoked.PrmTaxAmount		= TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount
						invoked.PrmTaxRate			= TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxRate



						if (LocalPTXTaxAmount not entered)			
							invoked.PrmTaxTypeOverride	= "A"		
						invoked.PrmTaxJurisdiction	= TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
						invoked.PrmInfoMessage		= TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
						invoked.PrmSentToTaxEngine	= TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		
						invoked.PrmTaxAccount		= TaxArray.TaxArrayOutput[LocalCounter].DistributionAccount	
						invoked.PrmProductTaxCat	= TaxArray.TaxArrayOutput[LocalCounter].ProductTaxCategory	
						invoked.PrmRecoverablePct	= TaxArray.TaxArrayOutput[LocalCounter].RecoverablePercent	
						invoked.PrmRecoverableAmt	= TaxArray.TaxArrayOutput[LocalCounter].RecoverableAmount	
						invoked.PrmUnrecoverableAmt	= TaxArray.TaxArrayOutput[LocalCounter].UnrecoverableAmount	
						invoked.PrmImposition		= TaxArray.TaxArrayOutput[LocalCounter].Imposition			
						invoked.PrmReverseCharge	= TaxArray.TaxArrayOutput[LocalCounter].ReverseCharge		
					



					LocalRunningAmount += TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount	

					if (SumOfCalculatedTaxAmount > 0)		

						if (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount > LocalLargestTaxLineAmount)
							LocalLargestTaxLineAmount	= TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount
							LocalLargestTaxLinePID		= LocalPayablesInvoiceDistrib

					else	

						if (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount < LocalLargestTaxLineAmount)
							LocalLargestTaxLineAmount	= TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount
							LocalLargestTaxLinePID		= LocalPayablesInvoiceDistrib



				else


					if (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount not entered						
					and TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount entered)							

						invoke CreateLandedTaxDistribution PayablesInvoiceDistribution1Rel							
							invoked.PrmOriginalDistribution		= LocalPayablesInvoiceDistrib		
							invoked.PrmLocalTaxSeqNbr			= 1									
							invoked.PrmTaxAmount		= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount	
							invoked.PrmTaxRate			= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate		


							if (LocalPTXTaxAmount not entered)			
								invoked.PrmTaxTypeOverride	= "A"		
							invoked.PrmTaxJurisdiction	= TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction
							invoked.PrmInfoMessage		= TaxArray.TaxArrayOutput[LocalCounter].InformationMessage	
							invoked.PrmSentToTaxEngine	= TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine		
							invoked.PrmTaxAccount		= TaxArray.TaxArrayOutput[LocalCounter].DistributionAccount	
							invoked.PrmProductTaxCat	= TaxArray.TaxArrayOutput[LocalCounter].ProductTaxCategory	
							invoked.PrmRecoverablePct	= TaxArray.TaxArrayOutput[LocalCounter].RecoverablePercent	
							invoked.PrmRecoverableAmt	= TaxArray.TaxArrayOutput[LocalCounter].RecoverableAmount	
							invoked.PrmUnrecoverableAmt	= TaxArray.TaxArrayOutput[LocalCounter].UnrecoverableAmount	
							invoked.PrmImposition		= TaxArray.TaxArrayOutput[LocalCounter].Imposition			
							invoked.PrmReverseCharge	= TaxArray.TaxArrayOutput[LocalCounter].ReverseCharge		
						increment LocalRunningAmount by TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount	

				



						LocalRunningAmount += TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount	

						if (SumOfCalculatedTaxAmount > 0)		

							if (TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount > LocalLargestTaxLineAmount)
								LocalLargestTaxLineAmount	= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount
								LocalLargestTaxLinePID		= LocalPayablesInvoiceDistrib

						else	

							if (TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount < LocalLargestTaxLineAmount)
								LocalLargestTaxLineAmount	= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount
								LocalLargestTaxLinePID		= LocalPayablesInvoiceDistrib


				
				increment LocalCounter
				increment CommitCounter			
				if (CommitCounter > 30)			
					commit transaction			
					initialize CommitCounter	
			


			if (LocalPTXTaxAmount entered						
			and LocalRunningAmount != LocalPTXTaxAmount)		

				LocalPayablesInvoiceDistrib	= LocalLargestTaxLinePID


				invoke Update first PayablesInvoiceDistributionLinkedTaxRel		
					invoked.GLTransactionAmount		+= (LocalPTXTaxAmount - LocalRunningAmount)
					invoked.DistributionAmount.CurrencyAmount	+= (LocalPTXTaxAmount - LocalRunningAmount)




		DisplayTaxArray


			LocalCounter = 1

			while (TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution entered)


















				increment LocalCounter




		DisplayLocalTaxTable


			LocalCounter = 1
			while (LocalCounter <= 8)








				increment LocalCounter



		GetDefaultTaxCode			


			if (RemitToCode not entered)		
				if (PayVendor.NormalRemitToLocation entered)
					RemitToCode = PayVendor.NormalRemitToLocation
				else
					if (PurchaseFromLocation not entered)
						if (FirstPurchaseOrder.PurchaseFromLocation	entered)
							PurchaseFromLocation 	= FirstPurchaseOrder.PurchaseFromLocation
						else
							PurchaseFromLocation 	= MatchPurchaseOrderInvoicesRel.PurchaseOrder.PurchaseFromLocation

					if (ServiceContract entered)
						if (ServiceContract.ApPoPurchaseFrom.VendorLocation entered
						and !ServiceContract.ApPoPurchaseFrom.VendorLocation.LocationType.PurchaseFrom)
							RemitToCode = ServiceContract.ApPoPurchaseFrom.VendorLocation
						else
						if (ServiceContract.ApPoPurchaseFrom.PurchaseFromLocation entered
						and !ServiceContract.ApPoPurchaseFrom.PurchaseFromLocation.VendorLocationRel.LocationType.PurchaseFrom)
							RemitToCode = ServiceContract.ApPoPurchaseFrom.PurchaseFromLocation
					else
					if (PayVendor = Vendor			
					or  MatchProcessType.Expense)	
						RemitToCode = PurchaseFromLocation.RemitToCode

			if (DistributionCode entered)
				LocalDistributionCode	= DistributionCode	

			if (TaxCode not entered
			and ActionType.CreateType
			and Suffix != 111
			and VendorReturn not entered	
			and !Status.Historical
			and !TransientRecreateRecurring
			and initiating action != "ReinstateCancelledInvoiceCancelled"	
			and !InvoiceSource.ReceivablesTransfer
			and !DistributionCodeHasTax)	
				if (!MatchProcessType.Expense
				or  InvoiceType.PrepaymentCredit		
				or  InvoiceSource.IntercompanyBilling)
					TaxCode = blank
				else
					if  (Location entered								
					and (Location.TaxCode entered						
					or   Location.PurchaseOrderTaxCode entered))		
						if (Location.TaxCode entered)					
							TaxCode = Location.TaxCode					
						else											
							TaxCode = Location.PurchaseOrderTaxCode		
					else												
						if (ProcessLevel.TaxCode entered)		
							TaxCode = ProcessLevel.TaxCode
						else
							if (RemitToVendorCompanyDefaultRel.TaxCode entered)
								TaxCode = RemitToVendorCompanyDefaultRel.TaxCode
							else
								if (RemitToCode.TaxCode entered)
									TaxCode = RemitToCode.TaxCode
								else
									if (VendorCompanyDefaultRel.TaxCode entered)
										TaxCode = VendorCompanyDefaultRel.TaxCode
									else
										if (Vendor.TaxCode entered)
											TaxCode = Vendor.TaxCode
										else
											if (Vendor.VendorClass.TaxCode entered)
												TaxCode = Vendor.VendorClass.TaxCode



		SavePTXTaxValues

			initialize LocalPTXTaxCode
			initialize LocalPTXTaxableAmount
			initialize LocalPTXTaxAmount
			initialize LocalPTXTaxCategory
			initialize LocalPTXLinkTaxOnDist
			initialize LocalPTXTaxMethod




			LocalPTXTaxCode			= TaxCode

			if (TaxAmount entered)		
				LocalPTXTaxAmount	= TaxAmount
			else


				if (PayablesInvoiceTaxRel.EnteredTaxAmount entered
				and initiating action != "ShortPayAndAccrueTax")		
					LocalPTXTaxAmount	= PayablesInvoiceTaxRel.EnteredTaxAmount



			LocalPTXTaxMethod 		= DerivedTaxMethodInvOrAcc



			if (TaxableAmount entered)		
				LocalPTXTaxableAmount	= TaxableAmount

			else

				if (PayablesInvoiceTaxRel.EnteredTaxableAmount entered)		
					LocalPTXTaxableAmount	= PayablesInvoiceTaxRel.EnteredTaxableAmount

				else
					if (LocalPTXTaxMethod.Accrued)
						LocalPTXTaxableAmount	= InvoiceAmount.CurrencyAmount

					else
						if (LocalPTXTaxMethod.Invoiced)		
							if (LocalPTXTaxAmount entered)
								LocalPTXTaxableAmount	= (InvoiceAmount.CurrencyAmount - LocalPTXTaxAmount)


			if (TaxEntityUsesThirdPartyTax				
			and TaxableAmount not entered				
			and MatchProcessType.Expense				
			and LocalPTXTaxableAmount entered)			
				TaxableAmount = LocalPTXTaxableAmount	


			if (PayablesInvoiceTaxRel exists)
				if (PayablesInvoiceTaxRel.ProductTaxCategory entered)					
					LocalPTXTaxCategory		= PayablesInvoiceTaxRel.ProductTaxCategory	
			else
				if (TransientTaxCategory entered)
					LocalPTXTaxCategory		= TransientTaxCategory

			LocalPTXLinkTaxOnDist	= TransientLineTax















































		PerformOneSourceCalcTaxCall		







			include PopulateCalcTaxInputFields

			if  (!MatchProcessType.Expense)
				if (each.AddOnCharge entered
				and each.PurchaseOrderLine not entered)

					initialize LocalExtendedAmount
					initialize LocalPurchaseOrder
					initialize LocalLineNbr

					for each MatchPurchaseOrderInvoicesRel


						for each each.PurchaseOrder.PurchaseOrderLineRel

							if (each.ExtendedAmount > LocalExtendedAmount)

								LocalExtendedAmount				= each.ExtendedAmount
								LocalPurchaseOrder				= each.PurchaseOrder
								LocalLineNbr      				= each.PurchaseOrderLine

				invoke CreateTaxLineItem each
					if (each.AddOnCharge entered
					and each.PurchaseOrderLine not entered)
						invoked.PrmPurchaseOrder = LocalPurchaseOrder
						invoked.PrmPurchaseOrderLine = LocalLineNbr

			if (CommitCounter > 30)			
				commit transaction			
				initialize CommitCounter	

			CalculateTax.CommodityCode				= each.ICNCode
			CalculateTax.TaxCode					= each.TaxCode
			CalculateTax.TaxableAmount				= each.TaxableAmount

			if (!MatchProcessType.Expense
			and (each.PayablesInvoiceDetail entered
			or   each.AddOnCharge entered))
				initialize CalculateTax.TaxAmount
				if  (each.AddOnCharge entered)

					CalculateTax.BypassEditing				= true  
					CalculateTax.TaxCode					= each.PayablesInvoiceAddOnChargeRel.TaxCode
					CalculateTax.TaxableAmount				= each.DistributionAmount.CurrencyAmount
					CalculateTax.InvoiceAmount				= each.DistributionAmount.CurrencyAmount
					CalculateTax.Description				= each.AddOnCharge.Description
					CalculateTax.ItemNumber					= each.AddOnCharge
					CalculateTax.UniqueLineNumber			= each.PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnCharge + 1
					initialize CalculateTax.CommodityCode

					if  (each.PurchaseOrderLine entered)

						CalculateTax.PostalAddress		= each.PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder
						CalculateTax.EAMCommodityCode	= each.PurchaseOrderLine.DerivedCommodityCodeNoDash
						CalculateTax.LineNumber			= each.PurchaseOrderLine
					else
						CalculateTax.PostalAddress		= PurchaseOrderLinesRel.ShipToLocation.PostalAddressForPurchaseOrder
						CalculateTax.EAMCommodityCode	= PurchaseOrderLinesRel.DerivedCommodityCodeNoDash
						CalculateTax.LineNumber			= PurchaseOrderLinesRel.PurchaseOrderLine
				else

					CalculateTax.BypassEditing				= true  
					CalculateTax.TaxCode					= each.PayablesInvoiceDetail.TaxCode
					CalculateTax.PostalAddress				= each.PayablesInvoiceDetail.InventoryLocationRel.PostalAddressForPurchaseOrder
					CalculateTax.EAMCommodityCode			= each.PayablesInvoiceDetail.DerivedCommodityCodeNoDash
					initialize CalculateTax.CommodityCode
					CalculateTax.TaxableAmount				= each.DistributionAmount.CurrencyAmount
					CalculateTax.InvoiceAmount				= each.DistributionAmount.CurrencyAmount
					CalculateTax.Description				= each.PayablesInvoiceDetail.ItemDescription
					CalculateTax.ItemNumber					= each.PayablesInvoiceDetail.Item
					CalculateTax.LineNumber					= each.PayablesInvoiceDetail.PurchaseOrderLine
					CalculateTax.UniqueLineNumber			= each.PayablesInvoiceDetail

				UserElementGroup.UserElement[1].Number 	= 1
				UserElementGroup.UserElement[1].Name	= "ATTRIBUTE1"
				UserElementGroup.UserElement[1].Value	= "INVC"

				UserElementGroup.UserElement[2].Number 	= 2
				UserElementGroup.UserElement[2].Name	= "ATTRIBUTE3"
				UserElementGroup.UserElement[2].Value	= FirstPurchaseOrder

				if  (FirstPurchaseOrder.AribaPOType entered)
					UserElementGroup.UserElement[3].Number 	= 3
					UserElementGroup.UserElement[3].Name	= "ATTRIBUTE4"
					UserElementGroup.UserElement[3].Value	= FirstPurchaseOrder.AribaPOType





				CalculateTax.SabrixUserElement			= UserElementGroup						
				CalculateTax.CreateOutputUserFieldFile	= true

			initialize CalculateTax.TaxAmount
			CalculateTax.Function	= "C"	
			include DisplayCalculateTaxInput

			LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
			include DisplayCalculateTaxOutput
			if (!CalculateTax.DoTaxCalculation)
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorText>"

			TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution 	= each.PayablesInvoiceDistribution
			TaxArray.TaxArrayOutput[LocalCounter].TaxCode						= each.TaxCode
			TaxArray.TaxArrayOutput[LocalCounter].ICNCode						= each.ICNCode
			TaxArray.TaxArrayOutput[LocalCounter].TaxMethod						= each.TaxType	
			TaxArray.TaxArrayOutput[LocalCounter].TaxTableOutput				= CalculateTax.TaxTable.TaxTableOutput
			TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount					= each.TaxableAmount

			if (!MatchProcessType.Expense
			and each.PayablesInvoiceDetail entered)
				TaxArray.TaxArrayOutput[LocalCounter].TaxCode					= each.PayablesInvoiceDetail.TaxCode
				TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount				= each.DistributionAmount.CurrencyAmount
				TaxArray.TaxArrayOutput[LocalCounter].ICNCode					= each.PayablesInvoiceDetail.DerivedCommodityCodeNoDash


			if (!MatchProcessType.Expense
			and  OneSourcePayAsBilled = "Y") 
				TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount = ((each.DistributionAmount.CurrencyAmount / LocalPTXTaxableAmount) * TaxAmount)
				TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate	= (((each.DistributionAmount.CurrencyAmount / LocalPTXTaxableAmount) * TaxAmount) / each.DistributionAmount.CurrencyAmount)


			else
			if (CalculateTax.LocalExcludeFromSabrixCall)
				TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount = ((each.TaxableAmount / LocalPTXTaxableAmount) * TaxAmount)
				TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate	= (((each.TaxableAmount / LocalPTXTaxableAmount) * TaxAmount) / each.TaxableAmount)


			else
				TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount	= CalculateTax.OutputTotalTaxAmount
				TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate	= CalculateTax.OutputTaxRate





			initialize TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount
			initialize TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxRate
			TaxArray.TaxArrayOutput[LocalCounter].DistributionAccount			= CalculateTax.ReturnedTaxInputAccount
			TaxArray.TaxArrayOutput[LocalCounter].TaxingJurisdiction			= CalculateTax.TaxingJurisdiction
			TaxArray.TaxArrayOutput[LocalCounter].InformationMessage			= CalculateTax.OneSourceInformationMessage	
			TaxArray.TaxArrayOutput[LocalCounter].SentToTaxEngine				= not CalculateTax.NotSentToSabrix			

			LocalReturnedTaxAmount = TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount
			round LocalReturnedTaxAmount to nearest DerivedRoundTo


			SumOfCalculatedTaxAmount += LocalReturnedTaxAmount 

			if (TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount entered)
				SumOfLineTaxableAmount	 += TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount






		PerformVertexCalcTaxCall		







			
			LocalVertexDistributionAccount	= each.DistributionAccount		
			LocalDistributionShipToLocation	= each.TransientShipToLocation	
			LocalDistributionDescription	= each.Description				
			LocalDistributionShipToAddress	= each.PayablesTaxDetailRel.PayablesAddressCode.PostalAddress	

			include PopulateCalcTaxInputFields

			initialize LocalVertexDistributionAccount
			initialize LocalDistributionShipToLocation
			initialize LocalDistributionDescription
			initialize LocalDistributionShipToAddress

			if  (!MatchProcessType.Expense)
				invoke CreateTaxLineItem each

			CalculateTax.TaxCode					= each.TaxCode
			CalculateTax.TaxableAmount				= each.TaxableAmount
			CalculateTax.ProductTaxCategory			= each.ProductTaxCategory

			initialize CalculateTax.TaxAmount

			CalculateTax.Function	= "C"	
			include DisplayCalculateTaxInput

			LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
			include DisplayCalculateTaxOutput
			if (!CalculateTax.DoTaxCalculation)
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>"

			if (TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount entered)
				SumOfLineTaxableAmount	 += TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount



			Sub1 = 1
			while (Sub1 <= 8)

				if (CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxCode entered)

					TaxArray.TaxArrayOutput[LocalCounter].PayablesInvoiceDistribution 	= each.PayablesInvoiceDistribution
					TaxArray.TaxArrayOutput[LocalCounter].TaxCode						= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxCode
					TaxArray.TaxArrayOutput[LocalCounter].TaxMethod						= each.TaxType	
					TaxArray.TaxArrayOutput[LocalCounter].TaxTableOutput				= CalculateTax.TaxTable.TaxTableOutput[Sub1]	
					TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount					= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxableAmount
					TaxArray.TaxArrayOutput[LocalCounter].ProductTaxCategory			= CalculateTax.ProductTaxCategory	
					TaxArray.TaxArrayOutput[LocalCounter].ReverseCharge					= CalculateTax.ReverseCharge		
					TaxArray.TaxArrayOutput[LocalCounter].Imposition					= CalculateTax.Imposition			
					if (CalculateTax.LocalExcludeFromSabrixCall)
						TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount = ((each.TaxableAmount / LocalPTXTaxableAmount) * TaxAmount)
						TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate	= (((each.TaxableAmount / LocalPTXTaxableAmount) * TaxAmount) / each.TaxableAmount)
					else
						TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount	= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount
						TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxRate	= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxRate

					TaxArray.TaxArrayOutput[LocalCounter].RecoverablePercent			= CalculateTax.RecoverablePercent	
					TaxArray.TaxArrayOutput[LocalCounter].RecoverableAmount				= CalculateTax.RecoverableAmount	
					TaxArray.TaxArrayOutput[LocalCounter].UnrecoverableAmount			= CalculateTax.UnrecoverableAmount	
					if (CalculateTax.RecoverableAmount not entered							
					and CalculateTax.FilingRecoverableAmount entered)						
						TaxArray.TaxArrayOutput[LocalCounter].RecoverableAmount		= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount	
					if (CalculateTax.UnrecoverableAmount not entered						
					and CalculateTax.FilingUnrecoverableAmount entered)						
						TaxArray.TaxArrayOutput[LocalCounter].UnrecoverableAmount	= TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount	
					if (CalculateTax.TaxTable.TaxTableOutput[Sub1].RecoverablePercent entered)								

						TaxArray.TaxArrayOutput[LocalCounter].RecoverablePercent		= CalculateTax.TaxTable.TaxTableOutput[Sub1].RecoverablePercent	
					if (CalculateTax.TaxTable.TaxTableOutput[Sub1].RecoverableAmount entered)								

						TaxArray.TaxArrayOutput[LocalCounter].RecoverableAmount			= CalculateTax.TaxTable.TaxTableOutput[Sub1].RecoverableAmount	
					if (CalculateTax.TaxTable.TaxTableOutput[Sub1].UnrecoverableAmount entered)								

						TaxArray.TaxArrayOutput[LocalCounter].UnrecoverableAmount		= CalculateTax.TaxTable.TaxTableOutput[Sub1].UnrecoverableAmount	

					if (!MatchProcessType.Expense
					and each.PayablesInvoiceDetail entered)
						TaxArray.TaxArrayOutput[LocalCounter].TaxCode					= each.PayablesInvoiceDetail.TaxCode
						TaxArray.TaxArrayOutput[LocalCounter].TaxableAmount				= each.DistributionAmount.CurrencyAmount
						TaxArray.TaxArrayOutput[LocalCounter].ICNCode					= each.PayablesInvoiceDetail.EAMCommodityCode




					initialize TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxAmount
					initialize TaxArray.TaxArrayOutput[LocalCounter].CalculatedTaxRate
					TaxArray.TaxArrayOutput[LocalCounter].DistributionAccount			= CalculateTax.ReturnedTaxInputAccount
					TaxArray.TaxArrayOutput[LocalCounter].InformationMessage			= CalculateTax.TaxTable.TaxTableOutput[Sub1].Description


					SumOfCalculatedTaxAmount += TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount


					increment LocalCounter
					increment CommitCounter			


				increment Sub1




		PopulateCalcTaxInputFields

			initialize CalculateTax
			CalculateTax.CallingModule				= "Payables_Invoice"
			CalculateTax.System						= "AP"
			CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			CalculateTax.TaxEntity					= GeneralLedgerCompanyRel.AccountingEntity
			CalculateTax.InvoiceCompany				= Company
			CalculateTax.VendorGrp					= Company.VendorGroup
			CalculateTax.ProcessLevel				= ProcessLevel
			CalculateTax.Vendor						= Vendor
			CalculateTax.VendorCustomerName			= Vendor.VendorName
			CalculateTax.Location					= Location		
			CalculateTax.VoucherNumber				= VoucherNumber
			CalculateTax.Invoice					= Invoice
			CalculateTax.Suffix						= Suffix
			CalculateTax.CancelSequence				= CancelSequence
			CalculateTax.InvoiceAmount				= InvoiceAmount.CurrencyAmount
			CalculateTax.TaxCode					= LocalPTXTaxCode
			CalculateTax.TaxableAmount				= LocalPTXTaxableAmount
			CalculateTax.TaxAmount					= LocalPTXTaxAmount
			CalculateTax.ChargedTaxAmount			= LocalPTXTaxAmount
			CalculateTax.InvoiceDate				= InvoiceDate
			CalculateTax.ShipmentDate				= InvoiceDate
			CalculateTax.PaymentDate				= InvoiceDate
			CalculateTax.TaxDate					= InvoiceDate
			CalculateTax.TaxPointDate				= DerivedTaxPointDate	
			CalculateTax.ProductTaxCategory			= LocalPTXTaxCategory

			if (IsCreditInvoice)							
				CalculateTax.InvoicedOrCreditMemo	= "C"	
			else											
				CalculateTax.InvoicedOrCreditMemo	= "I"	

		   	CalculateTax.TransactionSource			= "I"
			CalculateTax.LineNumber					= LastDistribution + 1
			CalculateTax.DeliveryTerms          	= ShipTerm
			CalculateTax.PointOfTitleTransfer		= TransientPointOfTitleTransfer			
			CalculateTax.VATRegistrationCountry    	= TaxEntityRel.VATRegistrationCountry 			
			CalculateTax.VATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber			
			if (ProcessLevel.TaxCode entered)	
				if (RemitToCode.TaxCode entered)							
					CalculateTax.FromTaxCode		= RemitToCode.TaxCode	
				else														
					CalculateTax.FromTaxCode		= Vendor.TaxCode		


			if (RemitToCode.CurrentAddressRel exists	
			and RemitToCode.VATRegistrationNumber entered)
				CalculateTax.FromPostalAddress				= RemitToCode.CurrentAddressRel.PostalAddress
				CalculateTax.FromVATRegistrationCountry 	= RemitToCode.VATRegistrationCountry			
				CalculateTax.FromVATRegistrationNumber		= RemitToCode.VATRegistrationNumber				
			else
				CalculateTax.FromPostalAddress				= Vendor.CurrentAddressRel.PostalAddress		
				CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
				CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					


			CalculateTax.DefaultFilingCurrency 			= Company.Currency
			CalculateTax.CurrencyRate					= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			CalculateTax.TransactionCurrency 			= InvoiceCurrency								
			if (PayCurrency entered)
				CalculateTax.BaseCurrency 				= PayCurrency					
			else
				CalculateTax.BaseCurrency 				= PayGroup.BaseCurrency
			if (CalculateTax.BaseCurrency not entered)											
				CalculateTax.BaseCurrency				= ProcessLevel.PayGroup.BaseCurrency	

			CalculateTax.ReceiptSite					= ProcessLevel							
			CalculateTax.UniqueIdOfRelatedObject		= UniqueID								
			CalculateTax.SabrixUserElement				= UserElementGroup						
			CalculateTax.UserElementLevel				= "L"	

			if (MatchProcessType.Expense
			and TaxEntityUsesVertex)
				CalculateTax.VertexQuantumOption		= "C"	

			if (ProcessOneSourceValid)
				if (!MatchProcessType.Expense)
					CalculateTax.UserElementLevel		= blank
				CalculateTax.CreateOutputUserFieldFile	= true		


			if (Location.PostalAddress entered)									

				CalculateTax.PostalAddress 			= Location.PostalAddress	
			else
				if (LocalDistributionShipToAddress entered)										
					CalculateTax.PostalAddress		= LocalDistributionShipToAddress	
				else
				if (ProcessLevel.PostalAddress entered)
					CalculateTax.PostalAddress		= ProcessLevel.PostalAddress
				else
					CalculateTax.PostalAddress		= Company.AccountingEntity.AddressCode.PostalAddress	


			if (BillToProcessLevel.PostalAddress entered)
				CalculateTax.BuyerAdminDestAddress	= BillToProcessLevel.PostalAddress
			else
				if (ProcessLevel.PostalAddress entered)
					CalculateTax.BuyerAdminDestAddress	= ProcessLevel.PostalAddress		
				else
					CalculateTax.BuyerAdminDestAddress	= Company.AccountingEntity.AddressCode.PostalAddress	


			if (PurchaseFromLocation entered)
				CalculateTax.FromPostalAddress	= PurchaseFromLocation.VendorAddress 	
			else
				CalculateTax.FromPostalAddress	= Vendor.VendorAddress


			if (BillFromLocation entered)
				CalculateTax.POAAddress			= BillFromLocation.VendorAddress	 	
			else
				CalculateTax.POAAddress			= Vendor.VendorAddress


			CalculateTax.BypassEditing 			= true		
			CalculateTax.SendMultLineItems		= true		
			CalculateTax.UpdateLineItems		= true		

			include PopulateVertexFlexFields	




		SetTaxableAmount		





			if (!MatchProcessType.Expense)
				NextSentence = true
			else

				if (LocalPTXTaxMethod.Invoiced)
					if (IsCreditInvoice
					and TaxAmount > 0)
						TaxableAmount = (InvoiceAmount.CurrencyAmount + TaxAmount)

					else

						if (TaxAmount entered)
							TaxableAmount = (InvoiceAmount.CurrencyAmount - TaxAmount)

				else
					if (MatchProcessType.Expense)							
						if (!LocalPTXTaxType.TaxTableCode)					
							TaxableAmount = InvoiceAmount.CurrencyAmount	
					else													
						invoke FastUpdate	
							invoked.TaxableAmount = InvoiceAmount.CurrencyAmount


				if (TaxableAmount entered)							
					CalculateTax.TaxableAmount  = TaxableAmount
					LocalPTXTaxableAmount		= TaxableAmount





		ProcessTaxTable




			if (CalculateTax.TaxType.TaxTableCode)
				initialize TransTaxTableAccruedAmount
				initialize TransTaxTableInvoicedAmount
				initialize LocalCounter
				while (LocalCounter < 8)
					increment LocalCounter


					if (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].AccrualFlag = "A")
						TransTaxTableAccruedAmount += CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount

					if (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].AccrualFlag = "I")
						TransTaxTableInvoicedAmount += CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount







		PopulateVerifyTaxToleranceValues




			PayablesTaxTolerance.InvoiceTaxAmount			= LocalPTXTaxAmount
			PayablesTaxTolerance.TaxSystemTaxRate			= CalculateTax.OutputTaxRate	
			if (TaxableAmount entered)														
				PayablesTaxTolerance.VendorChargedTaxRate	= (TaxAmount / TaxableAmount)	
			else
			if (LocalPTXTaxableAmount entered)														
				PayablesTaxTolerance.VendorChargedTaxRate	= (TaxAmount / LocalPTXTaxableAmount)	

			if (MatchProcessType.Expense												
			and SumOfCalculatedTaxAmount entered										
			and initiating action = "ProcessVertex")									
				PayablesTaxTolerance.CalculatedTaxAmount	= SumOfCalculatedTaxAmount	
			else
			if (!CalculateTax.TaxType.TaxTableCode)
				PayablesTaxTolerance.CalculatedTaxAmount	= CalculateTax.OutputTotalTaxAmount		

			else			
				initialize PayablesTaxTolerance.CalculatedTaxAmount
				initialize LocalCounter
				while (LocalCounter < 8)
					increment LocalCounter


					if (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].AccrualFlag = "I")
						PayablesTaxTolerance.CalculatedTaxAmount += CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount















			PayablesTaxTolerance.AllowZeroTaxOverride		= true

			if (Company.PayablesTaxTolerance)		
				PayablesTaxTolerance.OverchargeLimitAmount		= Company.TaxToleranceOverAmount
				PayablesTaxTolerance.UnderchargeLimitAmount		= Company.TaxToleranceUnderAmount
				PayablesTaxTolerance.OverchargeRatePercent		= Company.TaxToleranceOverRate		
				PayablesTaxTolerance.UnderchargeRatePercent		= Company.TaxToleranceUnderRate		



		ProcessTaxControl		




			if (ActionType.CreateType)

				if (TaxCode not entered)
					include GetDefaultTaxCode

				else
					if (DistributionCode entered)
						LocalDistributionCode	= DistributionCode
						if (DistributionCodeHasTax)								
							initialize TaxCode									
							TransientCreateEnteredTaxCodeRemovedComment	= true	
			
				if (TaxCode entered)						
					if (Company.ForceLandedTaxToBeLinked
					and IsLandedTax)
						TransientLineTax = true
			
			if (ActionType.CreateType		
			or (ActionType.UpdateType
			and TaxAmount !entered)
			or (ActionType.UpdateType
			and TaxCode.TaxType.CalculatedRate
			and TaxableAmount !entered))
				if ((TaxCode 	entered
				or  (TaxAmount  entered			
				and  MatchProcessType.Expense))	
				or (!MatchProcessType.Expense
				and  TaxEntityUsesThirdPartyTax
				and  TaxAmount entered))

					include SavePTXTaxValues

					if (TaxEntityUsesThirdPartyTax
					and LocalPTXTaxableAmount not entered)		

						include SetTaxableAmount				

					if (AllowShortPay				
					and TaxAmount	not entered)	
						TaxType	= DerivedTaxMethodInvOrAcc	

					else							




						if (MatchProcessType.Expense)
							include PopulateCalcTaxInputFields
							if ((!DoTaxAfter				


							or  (!AllowShortPay						
							and  Company.AllowToleranceOverride)	

							or  !TransientLineTax)		
							and  TaxCode entered)
								if (DoTaxAfter								
								and DistributionCode entered)				
									constraint (TaxableAmount entered)		
										"TaxableAmountIsRequiredWithDistributionCodeAndDelayedTaxProcessing"

								if (InterfaceCreate			
								and Status.Historical)		
									NextSentence = true		
								else						
								if (TaxEntityRel.ThirdParty.TaxEngine)
									NextSentence = true
								else
									include NewProcessTax











		NewProcessTax






			CalculateTax.Function	= "I"	
			include DisplayCalculateTaxInput
			LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
			include DisplayCalculateTaxOutput
			if (!CalculateTax.DoTaxCalculation)
				if (!TransientLineTax)	
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>"
			LocalPTXTaxMethod 	= DerivedTaxMethodInvOrAcc
			TaxType 			= LocalPTXTaxMethod		
			LocalPTXTaxType 	= CalculateTax.TaxType	


			if (MatchProcessType.Expense						
			and !BypassMatch									
			and CalculateTax.TaxType.TaxTableCode)				
				constraint (TaxableAmount entered)				
					"TaxableAmountRequiredWhenUsingTaxTable" 	
			if (LocalPTXTaxType.TaxTableCode
			and DistributionCode entered)
				constraint (!TransientLineTax)
					"CannotLinkTaxTableToDistributionCodeLines"	
			if (InvoiceType.CreditMemo				
			or  InvoiceType.PrepaymentCredit)		
				if  (LocalPTXTaxAmount entered		
				and (LocalPTXTaxAmount < (InvoiceAmount.CurrencyAmount / 2))		
				and  DistributionCode entered)		
					constraint (!TransientLineTax)	
						"TaxAmountIsGreaterThanHalfTheInvoiceAmount:CannotLinkTaxToDistributionCodeLines"	
			else		
				if  (LocalPTXTaxAmount entered
				and (LocalPTXTaxAmount > (InvoiceAmount.CurrencyAmount / 2))
				and  DistributionCode entered)
					constraint (!TransientLineTax)
						"TaxAmountIsGreaterThanHalfTheInvoiceAmount:CannotLinkTaxToDistributionCodeLines"













			if (LocalPTXTaxType.CalculatedRate)
				CalculateTax.Function	= "C"//"R"	
				constraint (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag != "A")
					"CannotUseACalculatedRateTaxThatIsAccrued"			
				constraint (TaxAmount entered)
					"TaxAmountRequiredForCalculatedRateTypeTaxCode"		
				if (TaxAdjustment not entered
				and !MatchProcessType.Expense)
					TaxAdjustment = 1	
				if (!TaxAdjustment.OverrideProductOnly					
				and !TaxAdjustment.Calculate
				and !TaxAdjustment.OverrideProductAndAOC
				and !TaxAdjustment.OverrideTaxablePOLine
				and !TaxAdjustment.OverrideTaxablePOAndAOC)
					constraint (MatchProcessType.Expense)
						"CalculatedRateTaxCdAllowedForTaxAdj_1,_3,_4,_8Or_9"     
				if (!MatchProcessType.Expense										
				and !MatchProcessType.ServiceContract	
				and CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "I")	
					POTaxAmount = TaxAmount
				include DisplayCalculateTaxInput									
				LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax		
				include DisplayCalculateTaxOutput									
				if (!CalculateTax.DoTaxCalculation)									
					constraint (CalculateTax.OutputErrorNumber not entered)			
						"<CalculateTax.OutputErrorMessage>"							

			else	

				if (TaxableAmount not entered					
				and CalculateTax.TaxableAmount not entered		
				and TaxEntityUsesThirdPartyTax)					

					include SetTaxableAmount					


				if  (MatchProcessType.Expense
				and (LocalPTXTaxAmount not entered
				or   UsePayablesTaxTolerance))			



					CalculateTax.Function	= "C"	
					include DisplayCalculateTaxInput
					LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
					include DisplayCalculateTaxOutput
					if (!CalculateTax.DoTaxCalculation)
						if (IsPrepaymentType)											
							constraint (CalculateTax.OutputErrorNumber != 101)			
								"PrepaymentAmountOrTaxableAmountRequiredWithTaxCode"	
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"








			if  (MatchProcessType.Expense		
			and !LocalPTXTaxType.TaxTableCode)	
				if (!TaxEntityUsesThirdPartyTax		
				and  TaxableAmount !entered
				and  TaxCode entered)
					if (DistributionCode entered)
						LocalDistributionCode	= DistributionCode	
					if (LocalPTXTaxableAmount !entered		
					and !DistributionCodeHasTax)			
						LocalPTXTaxableAmount = CalculateTax.OutputTotalTaxable






















			if  (LocalPTXTaxAmount		entered
			and !LocalPTXTaxType.CalculatedRate		
			and  MatchProcessType.Expense)
				if (UsePayablesTaxTolerance)
					include PopulateVerifyTaxToleranceValues
					LocalPayablesTaxTolerance = PayablesTaxTolerance.VerifyTaxWithinTolerance

				else

					if (HasTaxTolerance				
					or  LocalPTXTaxType.TaxTableCode)	
						CalculateTax.Function	= "V"	
					else
						CalculateTax.Function	= "C"	
					CalculateTax.TaxAmount	= LocalPTXTaxAmount

					if (!InvoiceType.CreditMemo
					and !InvoiceType.PrepaymentCredit)
						if  (CalculateTax.InvoiceAmount < 0)
							CalculateTax.InvoiceAmount			*= -1
						if  (CalculateTax.TaxableAmount < 0)
							CalculateTax.TaxableAmount			*= -1
						if  (CalculateTax.TaxAmount < 0)
							CalculateTax.TaxAmount				*= -1
						if  (CalculateTax.ChargedTaxAmount < 0)
							CalculateTax.ChargedTaxAmount		*= -1

					include DisplayCalculateTaxInput
					LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
					include DisplayCalculateTaxOutput

					if  (MatchProcessType.Expense											
					and !LocalPTXTaxType.TaxTableCode										
					and TaxableAmount not entered)											


						if (LocalPTXTaxableAmount !entered)		
							LocalPTXTaxableAmount = CalculateTax.OutputTotalTaxable

				include ProcessTaxTable		








				if  (AllowShortPay
				and ((!UsePayablesTaxTolerance
				and  (CalculateTax.OutputErrorNumber = 202		
				or    CalculateTax.OutputErrorNumber = 203		
				or	  CalculateTax.OutputErrorNumber = 204		
				or	  CalculateTax.OutputErrorNumber = 205))	
				or   (UsePayablesTaxTolerance
				and  (!PayablesTaxTolerance.InTolerance
				or     PayablesTaxTolerance.ZeroTaxOverride)))
				and   !Company.AllowToleranceOverride			
				and   !Company.PutOutOfToleranceOnHold			
				and   !ExcludeFromTaxEstimate)					//	IEFIN-82684	-- Pay as Billed if within "Exclude Range"

					include PerformShortPayProcess		

				else

					if  (!ExcludeFromTaxEstimate	
					and  !DistributionCodeHasTax	
					and ((!CalculateTax.DoTaxCalculation
					and   !TransientLineTax)			
					or     LocalPayablesTaxTolerance = "N"))	



						if  (Company.AllowToleranceOverride		
						and (!PayablesTaxTolerance.InTolerance
						or    PayablesTaxTolerance.ZeroTaxOverride))


							if (invoking action = "ShortPayAndAccrueTax")			
								TransientAcceptTaxOverride 		= true				
								TransientDoTaxToleranceOption 	= true				
							else
								if (Company.PutOutOfToleranceOnHold		
								and Company.AllowShortPay				
								and TransientLineTax)					
									if (TaxCode.TaxType.TaxTableCode)
										confirmation required
											"TaxChargedByVendor_(<CalculateTax.TaxAmount>)_isOutOfToleranceWithTheTaxEngineTaxAmount_(<CalculateTax.OutputTotalTaxAmount>).Select_\'Ok'_toSaveTheInvoiceAndPutItOn_\Tax_\ToleranceHold"
											TransientAcceptTaxOverride 		= true		
											TransientDoTaxToleranceOption 	= true		


									else
										confirmation required
											"TaxChargedByVendor_(<CalculateTax.TaxAmount>)_isOutOfToleranceWithTheTaxEngineTaxAmount_(<CalculateTax.OutputTotalTaxAmount>).Select_\'Ok'_toSaveTheInvoiceAsBilledAndPutItOn_\Tax_\ToleranceHold"
											TransientAcceptTaxOverride 		= true		
											TransientDoTaxToleranceOption 	= true		


								else
									if (!CreationSource.RNIP)				
										confirmation required
											"TaxChargedByVendor<CalculateTax.TaxAmount>IsOutOfToleranceWithTheTaxEngineTaxAmount<CalculateTax.OutputTotalTaxAmount>;AcceptTheVendorChargedAmount?"
											TransientAcceptTaxOverride 		= true		
											TransientDoTaxToleranceOption 	= true		

									else	
										if (Company.PutOutOfToleranceOnHold				
										and Company.AllowShortPay)						
											TransientAcceptTaxOverride 		= true		
											TransientDoTaxToleranceOption 	= true		
										else											
											TransientSetRNIPTaxError		= true		





						else



							if (!CreationSource.RNIP)	
								if (UsePayablesTaxTolerance)		
									if (Company.PutOutOfToleranceOnHold				
									and Company.AllowShortPay)						
										TransientAcceptTaxOverride 		= true		
										TransientDoTaxToleranceOption 	= true		

									else

										constraint (PayablesTaxTolerance.InTolerance)	
											"TaxChargedByVendor<CalculateTax.TaxAmount>IsOutOfToleranceWithTheTaxEngineTaxAmount<PayablesTaxTolerance.CalculatedTaxAmount>"
										constraint (!PayablesTaxTolerance.ZeroTaxOverride)	
											"TaxEngineIsReturningZeroTaxOverrideTaxAmount<CalculateTax.OutputTotalTaxAmount>OfVendorChargedTaxAmount<CalculateTax.TaxAmount>"
								else

									constraint (CalculateTax.OutputErrorNumber not entered)
										"<CalculateTax.OutputErrorMessage>"
							else	

								if (UsePayablesTaxTolerance)						
									if (Company.PutOutOfToleranceOnHold				
									and Company.AllowShortPay)						
										TransientAcceptTaxOverride 		= true		
										TransientDoTaxToleranceOption 	= true		
										TransientSetRNIPTaxError		= true		
									else
										if (AllowShortPay)
											display "NeedToDoShortPayHere"
											include PerformShortPayProcess			
										else
											display "NeedToDoPayAsBilledHere"
											TransientSetRNIPTaxError	= true		













			if  (TaxableAmount not entered
			and !LocalPTXTaxType.TaxTableCode
			and  InvoiceAmount.CurrencyAmount = TaxAmount	
			and !DoShortPayProcess
			and  MatchProcessType.Expense)
				CalculateTax.Function	= "T"	
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput
				if (!CalculateTax.DoTaxCalculation)
					if (!CreationSource.RNIP)	
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"

				if (LocalPTXTaxableAmount !entered)		
					LocalPTXTaxableAmount = CalculateTax.OutputTotalTaxable






			if  (TaxCode entered														
			and (TaxAdjustment.OverrideProductOnly
			or   TaxAdjustment.OverrideProductAndAOC
			or   TaxAdjustment.OverrideTaxablePOLine
			or   TaxAdjustment.OverrideTaxablePOAndAOC)
			and !DoShortPayProcess
			and !LocalPTXTaxType.CalculatedRate)		


				if ((!MatchProcessType.Expense								
				or   BypassMatch)
				and  LocalPTXTaxMethod.Invoiced
				and  !TaxEntityUsesVertex 
				and  CalculateTax.TaxTable.TaxTableOutput[1].TaxRate entered)
					constraint (TaxAmount entered)
						"TaxAmountRequiredWithTaxAdjustmentOfOverrideAndInvoicedTax"    






























































			if (TaxableAmount not entered		
			and TaxAmount entered				
			and !DoShortPayProcess)

				if 	(TaxAdjustment entered
				and !TaxAdjustment.OverrideProductOnly		
				and !TaxAdjustment.OverrideProductAndAOC	
				and !TaxAdjustment.OverrideTaxablePOLine	
				and !TaxAdjustment.OverrideTaxablePOAndAOC)	

					if (LocalPTXTaxType.TaxTableCode)		
						initialize TotalTaxRate
						LoopCounter = 1
						while (LoopCounter <= 8)
							TotalTaxRate += CalculateTax.TaxTable.TaxTableOutput[LoopCounter].TaxRate

							increment LoopCounter		
					else		
						TotalTaxRate  = CalculateTax.TaxTable.TaxTableOutput[1].TaxRate









		LoadVertexGlobalInputFields


			if  (TaxEntityUsesThirdPartyTax
			and !InvoiceSource.IntercompanyBilling)
		   		CalculateTax.TransactionSource				= "I"
		   		CalculateTax.InvoiceCompany					= Company
		   		CalculateTax.ProcessLevel					= ProcessLevel
				CalculateTax.VendorGrp						= Company.VendorGroup
				CalculateTax.Vendor							= Vendor
				CalculateTax.VendorCustomerName				= Vendor.VendorName 	
				CalculateTax.Location						= Location				
				CalculateTax.Invoice 						= Invoice
				CalculateTax.LineNumber						= LastDistribution + 1
		   		if (TransientTaxCategory entered)
		   			CalculateTax.ProductTaxCategory	 		= TransientTaxCategory
		   		else
				if (PayablesInvoiceTaxRel.ProductTaxCategory entered)								
					CalculateTax.ProductTaxCategory	 	= PayablesInvoiceTaxRel.ProductTaxCategory		
				else
				if (PayablesInvoiceTaxRel.EnteredTaxCategory entered)
					CalculateTax.ProductTaxCategory	 	= PayablesInvoiceTaxRel.EnteredTaxCategory	
				if (IsCreditInvoice)							
					CalculateTax.InvoicedOrCreditMemo	= "C"	
				else											
					CalculateTax.InvoicedOrCreditMemo	= "I"	

		   		CalculateTax.ChargedTaxAmount       		= TaxAmount				
				CalculateTax.TaxPointDate					= DerivedTaxPointDate	
				CalculateTax.DeliveryTerms          		= ShipTerm
				CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
				CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
				if (ProcessLevel.TaxCode entered)	
					if (RemitToCode.TaxCode entered)									
						CalculateTax.FromTaxCode				= RemitToCode.TaxCode	
					else																
						CalculateTax.FromTaxCode				= Vendor.TaxCode		
				if (RemitToCode.CurrentAddressRel exists	
				and RemitToCode.VATRegistrationNumber entered)
					CalculateTax.FromPostalAddress				= RemitToCode.CurrentAddressRel.PostalAddress
					CalculateTax.FromVATRegistrationCountry 	= RemitToCode.VATRegistrationCountry			
					CalculateTax.FromVATRegistrationNumber		= RemitToCode.VATRegistrationNumber				
				else
					CalculateTax.FromPostalAddress				= Vendor.CurrentAddressRel.PostalAddress		
					CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
					CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					


				if (BillToProcessLevel.PostalAddress entered)									
					CalculateTax.BuyerAdminDestAddress		= BillToProcessLevel.PostalAddress	
				else																			
					CalculateTax.BuyerAdminDestAddress		= ProcessLevel.PostalAddress		


				if (BillFromLocation.VendorAddress entered)													
					CalculateTax.POAAddress					= BillFromLocation.VendorAddress	
				else																			
					CalculateTax.POAAddress					= Vendor.VendorAddress				

				CalculateTax.DefaultFilingCurrency			= Company.Currency
				CalculateTax.CurrencyRate					= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				CalculateTax.TransactionCurrency			= InvoiceCurrency								
				if (TaxableAmount entered)		
					CalculateTax.TaxableAmount				= TaxableAmount
				if (PayCurrency entered)
					CalculateTax.BaseCurrency 				= PayCurrency					
				else
					CalculateTax.BaseCurrency 				= PayGroup.BaseCurrency
				if (CalculateTax.BaseCurrency not entered)											
					CalculateTax.BaseCurrency				= ProcessLevel.PayGroup.BaseCurrency	
				if (Location.PostalAddress entered)											
					CalculateTax.PostalAddress				= Location.PostalAddress		
				else																		
					CalculateTax.PostalAddress				= ProcessLevel.PostalAddress	

				CalculateTax.ReceiptSite					= ProcessLevel								
				CalculateTax.UniqueIdOfRelatedObject		= UniqueID									
				CalculateTax.SabrixUserElement				= UserElementGroup							
				CalculateTax.UserElementLevel				= "L"		
				CalculateTax.InputReturnVertexTaxIn			= "D"		
				CalculateTax.SendMultLineItems				= true		
				CalculateTax.UpdateLineItems				= true		

			include PopulateVertexFlexFields	
			





		PopulateVertexFlexFields		

			if (TaxEntityRel.ThirdParty.VertexOSeries)

				if (LocalVertexDistributionAccount not entered)
					LocalVertexDistributionAccount	= first PayablesInvoiceDistributionRel.DistributionAccount
				
				if (LocalDistributionShipToLocation entered)
					CalculateTax.POAAddress				= LocalDistributionShipToLocation.PostalAddress	
					CalculateTax.Location				= LocalDistributionShipToLocation				
				else
				if (BillFromLocation entered)
					CalculateTax.POAAddress				= BillFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress				= Vendor.VendorAddress





				CalculateTax.CostCenter                      		= LocalVertexDistributionAccount.AccountingUnit 


				CalculateTax.PostDate                          		= DistributionDate                    
				CalculateTax.GeneralLedgerAccount 					= LocalVertexDistributionAccount.GeneralLedgerChartAccount 
				CalculateTax.ChargedTaxAmount       				= TaxAmount 	
				CalculateTax.TaxAmount                      		= TaxAmount 		







				Idx = 0




				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

					if (each.Code entered            
					or  each.ExternalValue entered)
						Idx +=1   

						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
						if (each.ExternalValue.ValueIs.TaxEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerCompanyRel.AccountingEntity
						else    
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
						else    
						if (each.ExternalValue.ValueIs.Vendor)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
						else    
						if (each.ExternalValue.ValueIs.PostingDate)
							if (DistributionDate entered)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DistributionDate
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = InvoiceDate
						else    
						if (each.ExternalValue.ValueIs.TaxDate)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedTaxPointDate
						else    
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity 
						else    
						if (each.ExternalValue.ValueIs.AccountingUnit)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
						else    
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
						else    
						if (each.ExternalValue.ValueIs.Location)
							if (LocalDistributionShipToLocation entered)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalDistributionShipToLocation	
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location
						else    
						if (each.ExternalValue.ValueIs.Currency)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = InvoiceCurrency
						else    



						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DiscountAmount.CurrencyAmount
						else    






						if (each.ExternalValue.ValueIs.ContractType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
						else    
						if (each.ExternalValue.ValueIs.WorkType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
						else    
						if (each.ExternalValue.ValueIs.AccountSubType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
						else    
						if (each.ExternalValue.ValueIs.ServiceType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
						else    



						if (each.ExternalValue.ValueIs.UNSPSC)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FirstPurchaseOrder.first PurchaseOrderLineRel.UNSPSCCode.UNSPSCCodeDisplay
						else    
						if (each.ExternalValue.ValueIs.ProductTaxCatagory)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TransientTaxCategory
						else    



						if (each.ExternalValue.ValueIs.Description) 		
							if (LocalDistributionDescription entered)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalDistributionDescription		
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
						else 
						if (each.ExternalValue.ValueIs.PaymentDate)			
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DueDate 
						else 






						if (each.ExternalValue.ValueIs.PaymentAmount)		
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TotalPaymentAmount.TransactionTotal
						else 
						if (each.ExternalValue.ValueIs.UsageType)			
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
						else 
						if (each.ExternalValue.ValueIs.CustomerType)			
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
						else 
						if (each.ExternalValue.ValueIs.Project)				
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
						else 
						if  (each.ExternalValue.ValueIs.Longitude)				
							if (LocalDistributionShipToLocation.PostalAddress.GeoLongitude entered)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalDistributionShipToLocation.PostalAddress.GeoLongitude	
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location.PostalAddress.GeoLongitude
						else 
						if  (each.ExternalValue.ValueIs.Latitude)			
							if (LocalDistributionShipToLocation.PostalAddress.GeoLatitude entered)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalDistributionShipToLocation.PostalAddress.GeoLatitude	
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location.PostalAddress.GeoLatitude
						else 
						if  (each.ExternalValue.ValueIs.Altitude)									
							if (LocalDistributionShipToLocation.PostalAddress.GeoAltitude entered)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalDistributionShipToLocation.PostalAddress.GeoAltitude	
							else	
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location.PostalAddress.GeoAltitude
						else 
						if (each.ExternalValue.ValueIs.FinanceDimension1)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension2)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension3)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension4)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension5)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension6)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension7)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension8)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension9)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
						else    
						if (each.ExternalValue.ValueIs.FinanceDimension10) 
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
						else    
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  









				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

					if (each.NumericValue entered            
					or  each.ExternalValue entered)
						Idx +=1   

						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
						else    
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
						else    
						if (each.ExternalValue.ValueIs.PaymentAmount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TotalPaymentAmount.TransactionTotal
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = DiscountAmount.CurrencyAmount
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
						else    




							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  









				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

					if (each.DateValue entered            
					or  each.ExternalValue entered)
						Idx +=1   

						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
						if (each.ExternalValue.ValueIs.PostingDate)
							if (DistributionDate entered)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = DistributionDate
							else
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = InvoiceDate
						else    
						if (each.ExternalValue.ValueIs.PaymentDate)
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = DueDate 
						else    
						if (each.ExternalValue.ValueIs.TaxDate)
							if (DerivedTaxPointDate entered)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = DerivedTaxPointDate
							else 
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = InvoiceDate 
						else    
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  









		CreateAndUpdateRules





			if (action type.Create
			and IsChargebackSubType)
				constraint (!VendorTemplateMatchExcludedRel exists)
					"InvoiceTemplateHasBeenExcludedForThisVendor"
				constraint (!VendorClassTemplateMatchExcludedRel exists)
					"InvoiceTemplateHasBeenExcludedForThisVendorClass"
			else
			if (action type.Create)
				constraint (!VendorTemplateExcludedRel exists)
					"InvoiceTemplateHasBeenExcludedForThisVendor"
				constraint (!VendorClassTemplateExcludedRel exists)
					"InvoiceTemplateHasBeenExcludedForThisVendorClass"

			if  (action type.Create
			and  FirstPurchaseOrder entered)

				if  (FirstPurchaseOrder.ReceiptCurrencyConversionRate entered
				and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.ReceiptCurrencyConversionRate
					InvoiceAmount.KeepRateOnly	= true
					DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.ReceiptCurrencyConversionRate
					DiscountAmount.KeepRateOnly	= true

				else
				if  (FirstPurchaseOrder.EnteredCurrencyConversionRate entered
				and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry)
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.EnteredCurrencyConversionRate
					InvoiceAmount.KeepRateOnly	= true
					DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.EnteredCurrencyConversionRate
					DiscountAmount.KeepRateOnly	= true





			if (action type.Update						
			and !IsChargeback                           
			and InvoiceAmount.CurrencyAmount changed)	

				if (TermsCode entered)					
					if (MatchProcessType.Expense)		
						AllowableAmountForDiscount *= InvoiceAmount.CurrencyAmount / old InvoiceAmount.CurrencyAmount	
					else
						AllowableAmountForDiscount = CalculatedAllowableAmount	







			if (InvoiceAmount.ExchangeDate not entered
			or  InvoiceDate changed)
				InvoiceAmount.ExchangeDate	= DerivedExchangeDate 
				DiscountAmount.ExchangeDate	= DerivedExchangeDate

			if (!BackgroundProcessing.MatchInvoice)

				include CurrencyTableRefresh


			if (RevaluedBaseAmount.ExchangeDate not entered)
				if (TransientPaymentDate != 0)  
					RevaluedBaseAmount.ExchangeDate = TransientPaymentDate
				else
					RevaluedBaseAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
					RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate



			if  (InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
				include FlipInvoiceAmountFieldsToNeg
				include FlipDiscountAmountFieldsToNeg
				if (!MatchProcessType.Expense
				and AllowanceAOCRel exists)
					NextSentence = true
				else
				if (TaxEntityRel.ThirdParty.TaxEngine)
					NextSentence = true 
				else 
				if (TaxAmount > 0)		
					TaxAmount *= -1		
				if (TaxableAmount > 0)		
					TaxableAmount *= -1		
			else		
				include FlipInvoiceAmountFieldsToPos		
				include FlipDiscountAmountFieldsToPos		
				if (!MatchProcessType.Expense
				and AllowanceAOCRel exists)
					NextSentence = true
				else
				if (TaxEntityRel.ThirdParty.TaxEngine)
					NextSentence = true 
				else 
				if (TaxAmount < 0)							
					TaxAmount *= -1							
				if (TaxableAmount < 0)		
					TaxableAmount *= -1		


			if (action type.Create)
				LocalPTXEntTaxableAmount	= TaxableAmount
				LocalPTXEntTaxAmount		= TaxAmount
				LocalPTXEntTaxCode			= TaxCode	
				LocalPTXEntTaxCategory		= TransientTaxCategory


			if (action type.Create					
			and Location not entered				
			and VendorReturn entered)							
				Location	= VendorReturn.ReturnFromLocation	

			if (action type.Update
			and PayablesInvoiceTaxRel exists)

				invoke UpdatePIT
					invoked.Function				= 2		
					if (InvoiceAmount.CurrencyAmount changed)
						invoked.PrmEntInvoiceAmt	= InvoiceAmount.CurrencyAmount
					if (LocalPTXTaxAmount entered
					and LocalPTXTaxAmount != TaxAmount)
						invoked.PrmEntTaxAmt		= LocalPTXTaxAmount
					else
					if (TaxAmount changed)						
						invoked.PrmEntTaxAmt	= TaxAmount		
					if  (LocalPTXTaxableAmount entered
					and (LocalPTXTaxableAmount != TaxableAmount
					or   LocalPTXTaxableAmount != PayablesInvoiceTaxRel.EnteredTaxableAmount))	
						invoked.PrmEntTaxableAmt	= LocalPTXTaxableAmount
					invoked.PrmEntTaxCategory		= TransientTaxCategory
					invoked.PrmTaxPointDate			= TransientTaxPointDate
					if (TransientLineTax)
						invoked.PrmLinked			= true




			if (Vendor changed)				
				TransientChangingVendor = true		
				PayVendor = Vendor.PayVendor
				initialize RemitToCode
				invoke RemoveDiscount
				SaveDueDate = DueDate
				initialize DiscountCode
				initialize DueDate
				initialize TermsCode
				LocalVendor = old Vendor                        
				if (PayablesOnHoldPaymentRel2 exists)           
					invoke Update PayablesOnHoldPaymentRel2     
						invoked.Vendor = Vendor                 
				for each MultiplePayablesInvoicePaymentRel
					invoke FastUpdate each						
						initialize invoked.CashCode				
						initialize invoked.BankTransactionCode	
						initialize invoked.InvoiceGroup			
						initialize invoked.IncomeCode
						initialize invoked.ReportableIncomeAmount
				initialize TransientReportableAmount
				if ((DistributionCode 		entered
				or   old DistributionCode 	entered)
				and Vendor.DistributionCode entered)
					invoke RemoveDistributionCode
						if (DistributionCode entered)
							invoked.PrmDistribCode 	= DistributionCode
						else
							invoked.PrmDistribCode 	= old DistributionCode
				invoke ChangeTaxCode
					initialize invoked.NewTaxCode
					initialize invoked.TaxableAmt
					initialize invoked.TaxAmt
				ActionType = ActionType.UpdateType 

			if ((InvoiceAmount.CurrencyAmount changed
				or   InvoiceDate changed						
				or   InvoiceCurrency changed)					
			and (DiscountDate						entered
				or	 DiscountPercent				entered
				or	 DiscountAmount.CurrencyAmount	entered
				or 	 AllowableAmountForDiscount		entered)
			and !IsChargeback                           
			and !IsTaxAfterTerms)			

				AllowableAmountForDiscount = CalculatedAllowableAmount


				if (DiscountPercent entered)
					DiscountAmount.CurrencyAmount 	= AllowableAmountForDiscount * DiscountPercent
					DiscountAmount.KeepRateOnly		= true
					DiscountAmount.ExchangeDate		= InvoiceAmount.ExchangeDate 
					DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

				include ProcessTierDiscounts






















			include FindProcurementCardPayVendor	

			include DefaultMatchProcessType

			constraint (!FirstPurchaseOrder.ApprovalStatus.NeedsApproval)
				"PurchaseOrderIsNotApproved"

			if ((!MatchProcessType.Expense
			or   Dropship
			or   MatchProcessType.Service)
			and  TaxCode entered
			and  TaxAdjustment not entered)
				TaxAdjustment = 1						




			if (action type.Create						
			and Vendor not entered)						
				if (FirstPurchaseOrder entered)			
					Vendor	= FirstPurchaseOrder.Vendor	
				else									
				if (ServiceContract entered)			
					Vendor	= ServiceContract.Vendor	


			if (action type.Create
			and PayVendor not entered)
				if (Vendor.PayVendor entered)
					PayVendor = Vendor.PayVendor
				else
					PayVendor = Vendor

			if (ReceiptOfInvoiceDate not entered)					
				ReceiptOfInvoiceDate	= current corporate date	

			if  (!IsChargebackSubType
			and (!IsTaxAfterTerms			
			or   TaxCode not entered))		
				include ProcessTerms
			else
				if (!MatchProcessType.Expense)  
					if (TermsCode not entered)
						if (FirstPurchaseOrder.TermCode entered)
							TermsCode = FirstPurchaseOrder.TermCode
						else
							if (ServiceContract.TermsCode entered)			
								TermsCode = ServiceContract.TermsCode		

				if (VendorCompanyDefaultRel.DiscountCode entered)
					DiscountCode = VendorCompanyDefaultRel.DiscountCode
				else	
					if (RemitToCode.DiscountCode entered)
						DiscountCode = RemitToCode.DiscountCode
					else
					if (PayVendor.first NormalRemitToLocationRel.VendorLocation.DiscountCode entered)
						DiscountCode = PayVendor.first NormalRemitToLocationRel.VendorLocation.DiscountCode
					else
					if (PurchaseFromLocation.RemitToCode.DiscountCode entered)
						DiscountCode = PurchaseFromLocation.RemitToCode.DiscountCode
					else	
						if (Vendor.DiscountCode entered)
							DiscountCode = Vendor.DiscountCode
						else	
							if (ProcessLevel not entered)
								if (!MatchProcessType.Expense)
									ProcessLevel = FirstPurchaseOrder.ProcessLevel
									if (ProcessLevel not entered)
										LocalProcessLevel = ServiceContract.ProcessLevelGroup.ProcessLevel
										if (ContractProcessLevelRel exists)
											ProcessLevel = ServiceContract.ProcessLevelGroup.ProcessLevel
								if (ProcessLevel not entered
								and VendorReturn entered)
									ProcessLevel = VendorReturn.ProcessLevel

								if (ProcessLevel not entered
								and VendorCompanyDefaultRel.ProcessLevel entered)
									ProcessLevel = VendorCompanyDefaultRel.ProcessLevel

								if (ProcessLevel not entered
								and DefaultProcessLevelExists)
									ProcessLevel = first DefaultProcessLevelRel.PayablesProcessLevel

							if (ProcessLevel.DiscountCode entered)
								DiscountCode = ProcessLevel.DiscountCode
							else	
								DiscountCode = Company.DiscountCode

			if  (!IsChargebackSubType
			and !IsTaxAfterTerms)			
				include ProcessTierDiscounts



			if (!InvoiceSource.IntercompanyBilling)
				include ProcessTaxControl




			if (IsTaxAfterTerms)			
				if (TermsCode not entered)	
					if (FirstPurchaseOrder.TermCode entered)
						TermsCode = FirstPurchaseOrder.TermCode
					else
						if (ServiceContract.TermsCode entered)			
							TermsCode = ServiceContract.TermsCode		
						else											
							if (PurchaseFromLocation.TermsCode entered)						
								TermsCode = PurchaseFromLocation.TermsCode					
							else
								if (RemitToVendorCompanyDefaultRel.TermsCode entered)
									TermsCode = RemitToVendorCompanyDefaultRel.TermsCode
								else
									if (RemitToCode.TermsCode entered)
										TermsCode = RemitToCode.TermsCode
									else
										if (VendorCompanyDefaultRel.TermsCode entered)
											TermsCode = VendorCompanyDefaultRel.TermsCode
										else
											if (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode entered)
												TermsCode = first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode
											else
												if (Vendor.TermsCode entered)
													TermsCode = Vendor.TermsCode


				if (TermsCode entered		
				and DueDate not entered)	
					initialize CalculateTerms
					include ProcessTerms		
					LocalTermsCalculation = Vendor.TermsCalculation
					if (LocalTermsCalculation not entered)
						LocalTermsCalculation = Company.TermsCalculation
					if (LocalTermsCalculation.UseReceiptOfInvoiceDate
					and ReceiptOfInvoiceDate > InvoiceDate)
						CalculateTerms.TransactionDate = ReceiptOfInvoiceDate
					else
						CalculateTerms.TransactionDate = InvoiceDate
					if (DiscountCode.DiscountPoint.CostOfGoods
					and MatchAmount entered)
						CalculateTerms.TransactionAmount	= MatchAmount
					else
						CalculateTerms.TransactionAmount	= InvoiceAmount.CurrencyAmount
					if  (DiscountCode.DiscountPoint.CostOfGoods
					and  AllowableAmountForDiscount entered
					and  ActionType.UpdateType)
						CalculateTerms.TransactionAmount = AllowableAmountForDiscount




					if (TermsCode entered)	
						include DisplayCalcTermsValues
						LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger
						include DisplayCalcTermsValues
						constraint (CalculateTerms.OutputErrorNumber not entered)
							"<CalculateTerms.OutputErrorMessage>"



				if (ActionType.CreateType)		
					if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment not entered)
						include 530MoveAppaymentData
					else
						DoMultipleTermsPayments = true
						DoCreatePayment			= true

			else  
				if (ActionType.CreateType)
					include 530MoveAppaymentData


			if (ActionType.UpdateType)

				if  (MultiplePayablesInvoicePaymentRelExists
				and (ApinwsTermsTranDiscTot != DiscountAmount.CurrencyAmount
				or   ApinwsTermsBaseDiscTot != DiscountAmount.FunctionalAmount.EnteredCurrencyAmount))
					invoke Update last MultiplePayablesInvoicePaymentRel
						initialize invoked.TransientCurrencyRefresh 
						invoked.DiscountAmount.CurrencyAmount	= last MultiplePayablesInvoicePaymentRel.DiscountAmount.CurrencyAmount + DiscountAmount.CurrencyAmount - ApinwsTermsTranDiscTot

			if (!Status.Historical)
				if (TermsCode not entered
				or  TaxCode not entered)
					if (RemitToVendorCompanyDefaultRel exists)
						ApinwsApxTaxCode	= RemitToVendorCompanyDefaultRel.TaxCode
						if (RemitToVendorCompanyDefaultRel.TaxCode entered
						and RemitToVendorCompanyDefaultRel.TaxUsageCode entered)
							ApinwsTaxUsageCd = RemitToVendorCompanyDefaultRel.TaxUsageCode
				if (ApinwsApxTaxCode not entered)
					ApinwsApxTaxCode = RemitToCode.TaxCode
					if (ApinwsApxTaxCode entered
					and ApinwsTaxUsageCd not entered)
						ApinwsTaxUsageCd = RemitToCode.TaxUsageCode


			initialize TransientChangingVendor		

			if (ActionType.CreateType
			and TaxCode entered
			and !TransientLineTax		
			and !InvoiceSource.IntercompanyBilling)
				ApinwsCreateTaxDisFrHdr = true
			else
				ApinwsCreateTaxDisFrHdr = false

			if (ActionType.CreateType
			and CreationSource not entered)
				CreationSource = 1	

			if (!Status.Historical						
			and Vendor.ValidateCertificationAmount)
				constraint (ValidateVendorCertificationMaxSpendExistsRel exists)
					"Vendor<Vendor>_-_<Vendor.VendorName>IsFlaggedForValidateCertificationAmount,ButNoCertificatesExistForThisVendor"









		UpdateRules		



			LocalRunProgram = RunProgram.PayablesInvoice
			LocalPayGroup = blank
			include VerifyProcessingMonitorRule

			ApinwsClearTaxSwitch = false
			if (InvoiceAmount.CurrencyAmount changed
			or  InvoiceCurrency changed					
			or  TaxAmount changed)
				ApinwsClearTaxSwitch = true

			if  (MatchProcessType.Expense)
				if (ApinwsClearTaxSwitch
				and ApinwsCalcTaxRateSwitch)
					if (any PayablesInvoiceDistributionRel.TaxIndicator entered)
						for each PayablesInvoiceDistributionSet10Rel
							if (!each.TaxType.Accrued)
								TotalDistributionAmount.FunctionalTotal  -= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								TotalDistributionAmount.TransactionTotal -= each.DistributionAmount.CurrencyAmount
							invoke Delete each
					else
						for each PayablesInvoiceDistributionRel
							if (each.TaxCode entered)
								if (!each.TaxType.Accrued)
									TotalDistributionAmount.FunctionalTotal  -= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
									TotalDistributionAmount.TransactionTotal -= each.DistributionAmount.CurrencyAmount
							invoke Delete each


				ApinwsXXTranTotPmt 		= TotalPaymentAmount.TransactionTotal
				ApinwsXXTranTotDist 	= TotalDistributionAmount.TransactionTotal
				ApinwsXXBaseTotDist 	= TotalDistributionAmount
				ApinwsXXTranTotTax		= TotalTaxAmount


			if (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate changed
			or  DistributionDate changed
			or  AccrualCode changed
			or  ProcessLevel changed)
				if (DistributionDate changed)							
					if (TaxCode entered									
					and TaxPoint.GLPostDate								
					and old DistributionDate = TransientTaxPointDate)	
						invoke Update PayablesInvoiceTaxRel				
							invoked.TaxPointDate	= DistributionDate	
						TransientTaxPointDate		= DistributionDate	


					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
 						invoke Delete HeaderBudgetEditErrorRel
						invoke Delete DistributionBudgetEditErrorRel
						initialize BudgetEditProcessing 
						
				for each PayablesInvoiceDistribution set


					invoke UpdateFromHeader each
						if (AccrualCode changed
						and !each.TaxType.Accrued)
							invoked.AccrualCode = AccrualCode
						if (ProcessLevel changed)
							invoked.ProcessLevel = ProcessLevel
						if  (DistributionDate changed
						and (each.DistributionType.Distribution		
						or   each.DistributionType.ExpenseAccrual)	
						and !each.Status.Historical)				
							invoked.DistributionDate = DistributionDate


				if  (DistributionDate changed
				and  !CancelledOrPostedDistributionsRel exists)
					invoke FastUpdate PayablesInvoiceDetailRel
						invoked.DistributionDate = DistributionDate

				if (DistributionDate changed)							
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
 						if (HeaderBudgetEditErrorRel exists
						or DistributionBudgetEditErrorRel exists)
							BudgetEditProcessing = BudgetEditProcessing.Failure 

			if (IsUpdateRecurringDetails)
				invoke UpdateRecurringInvoice
					invoked.NumberOfRecurrences = NumberOfRecurringInvoices
					invoked.RecurrenceFrequency = RecurringFrequency






		CreateAndUpdateExitRules









			if(VendorReturn entered and VendorReturnRel exists
			and PayablesInvoiceDistribution set not exists
			and VendorReturn.VendorClaimType.CreditMemo)




				if (TaxAmount not entered)
					TransientBypassTaxAmountEdit	= true			

				for each VendorReturn.VendorReturnLinesRel





					if (each.ItemType.Inventoried)


						invoke Create PayablesInvoiceDistribution
							invoked.Company								= Company
							invoked.Vendor								= Vendor
							invoked.PayablesInvoice						= PayablesInvoice
							if (each.IsCatchWeightItem)
								invoked.DistributionAmount.CurrencyAmount 	= ((each.CatchWeightQuantity * each.DerivedUnitCost) * -1)
								invoked.GLTransactionAmount				= ((each.CatchWeightQuantity * each.DerivedUnitCost) * -1)
							else
								invoked.DistributionAmount.CurrencyAmount 	= ((each.DerivedReturnQuantity * each.UnitCost) * -1)
								invoked.GLTransactionAmount				= ((each.DerivedReturnQuantity * each.UnitCost) * -1)
							invoked.GLFinanceCodeBlock					= VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount
							invoked.DistributionAmount.ExchangeDate		= VendorReturn.ReturnAuthorizationDate
							invoked.DistributionAccount					= VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount
							invoked.ICNCode								= each.ICNCode		
							invoked.HSNSACCode							= each.HSNSACCode
							invoked.PurchaseOrder						= each.OriginalPurchaseOrder			
							invoked.PurchaseOrderLine					= each.OriginalPurchaseOrderLine		
							if (each.TaxCode entered)
								invoked.TaxCode							= each.TaxCode
								invoked.TaxIndicator           			= TaxIndicator.Taxable
								invoked.TaxType							= each.DerivedTaxType
								if (each.IsCatchWeightItem)
									invoked.TaxableAmount 				= ((each.CatchWeightQuantity * each.DerivedUnitCost) * -1)
								else
									invoked.TaxableAmount 				= ((each.DerivedReturnQuantity * each.DerivedUnitCost) * -1)
							else
								if (TaxEntityUsesSabrix												
								and VendorReturn.ReturnFromLocation.PurchaseOrderTaxCode entered)	
									invoked.TaxCode						= VendorReturn.ReturnFromLocation.PurchaseOrderTaxCode
									invoked.TaxIndicator				= TaxIndicator.Taxable
					else
						LocalVendorReturnLine = each.VendorReturnLine

						for each LocalVendorReturnLine.VendorReturnLineDistributionsRel



							invoke Create PayablesInvoiceDistribution
								fill in fields from each			
								invoked.Company					= Company
								invoked.Vendor					= Vendor
								invoked.PayablesInvoice			= PayablesInvoice
								invoked.DistributionType 		= "D"
								invoked.PostingOption			= Vendor.VendorClass.PostingOption
								invoked.DistributionDate		= DistributionDate
								invoked.ICNCode					= LocalVendorReturnLine.ICNCode		
								invoked.HSNSACCode				= LocalVendorReturnLine.HSNSACCode
								invoked.PurchaseOrder			= LocalVendorReturnLine.OriginalPurchaseOrder			
								invoked.PurchaseOrderLine		= LocalVendorReturnLine.OriginalPurchaseOrderLine		
								if (InvoiceAmount.CurrencyAmount > 0)
									invoked.DistributionAmount.CurrencyAmount 	= each.DistributionAmount
									invoked.GLTransactionAmount					= each.DistributionAmount
								else
									invoked.DistributionAmount.CurrencyAmount 	-= each.DistributionAmount
									invoked.GLTransactionAmount					-= each.DistributionAmount
								if (LocalVendorReturnLine.ItemType.Inventoried
								and VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount entered)
									invoked.DistributionAccount		= VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount
									invoked.GLFinanceCodeBlock		= VendorReturn.ReturnFromLocation.VendorReturnSuspenseAccount
								else
									invoked.DistributionAccount		= each.DistributionAccount
									invoked.GLFinanceCodeBlock		= each.DistributionAccount
								invoked.Description				= Vendor + Vendor.VendorName 
								if (PayablesInvoice.TaxCode entered)
									invoked.TaxCode				= PayablesInvoice.TaxCode
									invoked.TaxIndicator		= TaxIndicator.Taxable		
								else
								if (LocalVendorReturnLine.TaxCode entered)
									invoked.TaxCode				= LocalVendorReturnLine.TaxCode
									invoked.TaxIndicator		= TaxIndicator.Taxable		
								else
								if (TaxEntityUsesSabrix													
								and each.VendorReturn.ReturnFromLocation.PurchaseOrderTaxCode entered)	
									invoked.TaxCode				= each.VendorReturn.ReturnFromLocation.PurchaseOrderTaxCode
									invoked.TaxIndicator		= TaxIndicator.Taxable

				if (VendorReturn.HandlingAccount entered
				and VendorReturn.HandlingAmount entered)
					invoke Create PayablesInvoiceDistribution
						invoked.Company								= Company
						invoked.Vendor								= Vendor
						invoked.PayablesInvoice						= PayablesInvoice
						invoked.DistributionType 					= "D"
						invoked.PostingOption						= Vendor.VendorClass.PostingOption
						invoked.DistributionDate					= DistributionDate
						invoked.DistributionAmount.CurrencyAmount 	= VendorReturn.HandlingAmount
						invoked.GLTransactionAmount					= VendorReturn.HandlingAmount
						invoked.DistributionAccount					= VendorReturn.HandlingAccount
						invoked.Description							= Vendor + Vendor.VendorName
						invoked.PurchaseOrder						= VendorReturn.CreatedFromPurchaseOrder	

				if (VendorReturn.OriginalFreightCreditAccount entered
				and VendorReturn.OriginalFreightCreditAmount entered)
					invoke Create PayablesInvoiceDistribution
						invoked.Company								= Company
						invoked.Vendor								= Vendor
						invoked.PayablesInvoice						= PayablesInvoice
						invoked.DistributionType 					= "D"
						invoked.PostingOption						= Vendor.VendorClass.PostingOption
						invoked.DistributionDate					= DistributionDate
						invoked.DistributionAmount.CurrencyAmount 	-= VendorReturn.OriginalFreightCreditAmount
						invoked.GLTransactionAmount					-= VendorReturn.OriginalFreightCreditAmount
						invoked.DistributionAccount					= VendorReturn.OriginalFreightCreditAccount
						invoked.Description							= Vendor + Vendor.VendorName
						invoked.PurchaseOrder						= VendorReturn.CreatedFromPurchaseOrder	

				if (VendorReturn.ReturnToVendorFreightCreditAccount entered
				and VendorReturn.ReturnToVendorFreightCreditAmount entered)
					invoke Create PayablesInvoiceDistribution
						invoked.Company								= Company
						invoked.Vendor								= Vendor
						invoked.PayablesInvoice						= PayablesInvoice
						invoked.DistributionType 					= "D"
						invoked.PostingOption						= Vendor.VendorClass.PostingOption
						invoked.DistributionDate					= DistributionDate
						invoked.DistributionAmount.CurrencyAmount 	-= VendorReturn.ReturnToVendorFreightCreditAmount
						invoked.GLTransactionAmount					-= VendorReturn.ReturnToVendorFreightCreditAmount
						invoked.DistributionAccount					= VendorReturn.ReturnToVendorFreightCreditAccount
						invoked.Description							= Vendor + Vendor.VendorName
						invoked.PurchaseOrder						= VendorReturn.CreatedFromPurchaseOrder	

				initialize TransientBypassTaxAmountEdit


			if (ActionType.CreateType
			and SpeedDistributionArray entered)
				SpeedCounter = 1
				while (SpeedCounter <= 10)
					if (SpeedDistributionArray.SpeedDistribution[SpeedCounter].FinanceCodeBlock 	entered
					and SpeedDistributionArray.SpeedDistribution[SpeedCounter].InternationalAmount 	entered)
						invoke Create PayablesInvoiceDistribution
							assign result to NewPayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.Vendor					= Vendor
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "D"
							invoked.GLTSystem				= "AP"
							invoked.TransactionDate			= DistributionDate
							invoked.DistributionDate		= DistributionDate
							invoked.PostingOption			= Vendor.VendorClass.PostingOption
							invoked.InvoiceCurrency			= InvoiceCurrency
							invoked.GLTCurrencyCode			= InvoiceCurrency
							invoked.DistributionAccount		= SpeedDistributionArray.SpeedDistribution[SpeedCounter].FinanceCodeBlock
							invoked.GLFinanceCodeBlock		= SpeedDistributionArray.SpeedDistribution[SpeedCounter].FinanceCodeBlock
							invoked.GLTransactionAmount 	= SpeedDistributionArray.SpeedDistribution[SpeedCounter].InternationalAmount
							invoked.UnitAmount				= SpeedDistributionArray.SpeedDistribution[SpeedCounter].UnitAmount
							if (TransientLineTax)																								
								invoked.TaxIndicator			= SpeedDistributionArray.SpeedDistribution[SpeedCounter].TaxIndicator			
					increment SpeedCounter
				initialize SpeedDistributionArray







			if ((ActionType.CreateType
			and DistributionCode entered)
			or  (ActionType.UpdateType
			and (DistributionCode changed

			or   TransientUpdateTaxCode		
			or  (DistributionCode entered
			and (initiating action = "CalculateRateUnreleased"	

			or   InvoiceAmount.CurrencyAmount changed)))))

				if  (ActionType.UpdateType
				and (DistributionCode 				changed
				or   InvoiceAmount.CurrencyAmount 	changed))
					LocalDistributionCode = old DistributionCode
				else
					LocalDistributionCode = DistributionCode

				if ((ActionType.UpdateType		
				or   action type.Update)
				and  DistributionCode changed
				and  TaxCode.TaxType.TaxTableCode)
					TransientTaxTableInvoicedAmount = sum ExpenseInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount
				


				if (CreationSource.RNIP														
				and TransientSetRNIPTaxError)												
					TransientTaxTableInvoicedAmount	= CalculateTax.OutputTotalTaxAmount		


				if (initiating action = "CalculateRateUnreleased")	
					TransientTaxTableInvoicedAmount = TaxAmount		


				if (DistributionCode entered		
				or  DistributionCode changed)		
					include NewPerformDistributionCodeProcessing		

					include AdjustDistributionCurrencyAmounts

				if (DistributionCode changed					
				and TaxCodeRemovedCommentExists)				
					include DeleteEnteredTaxCodeRemovedComment	

				if (TransientCreateEnteredTaxCodeRemovedComment		
				and !TaxCodeRemovedCommentExists)					
					include CreateEnteredTaxCodeRemovedComment				
					initialize TransientCreateEnteredTaxCodeRemovedComment	
					




			if (TransientDoTaxToleranceOption)										
				if (invoking action != "ShortPayAndAccrueTax"						
				and Company.AllowShortPay											
				and Company.PutOutOfToleranceOnHold)								
					LocalHoldCode = Company.VendorGroup.TaxToleranceHoldCode		

					constraint (LocalHoldCode entered)								
						"Tax_\ToleranceHoldCodeOn_\Vendor_\GroupIsNotDefined"		
					invoke PutInvoiceOnHold											
						invoked.HoldCode = LocalHoldCode							


			if  (Status.Unreleased
			and  ActionType.UpdateType
			and (TransientAddOnCharge 	 entered
			or   TransientProrateAmount  entered
			or   TransientProrateAccount entered))
				invoke Unreleased.Prorate
				initialize TransientAddOnCharge
				initialize TransientProrateAmount
				initialize TransientProrateAccount


			if (IsChargebackSubType)
				if (InvoiceAmount.CurrencyAmount != TotalDistributionAmount.TransactionTotal)
					constraint (!MatchProcessType.ReceiptMatch)
						"DistributionsOutOfBalance"			
					constraint (!Status.Historical)
						"InvoiceOutOfBalance;CannotCreateReleasedInvoice"	
				if (TaxAmount != RoundedTotalTaxAmount)
					constraint (!MatchProcessType.ReceiptMatch)
						"TaxOutOfBalance"					
					constraint (!Status.Historical)
						"InvoiceOutOfBalance;CannotCreateReleasedInvoice"	



			initialize ApwsDiff

			if (IsChargeback
			and (Operator = "MATCH"
			or   Operator = "MA168"))
				NextSentence = true
			else
			if (!InterfaceCreate)
				include UpdateErrorRecords


			if (!action type.Create)  
				if (TaxEntityRel.IntrastatUsed)				
					if (DestinationCountry changed
					or	UnloadingPort changed
					or 	Location changed
					or 	FirstPurchaseOrder changed)
						constraint (Status.Unreleased)
							"CannotChangeIntrastatInformationAfterInvoiceHasBeenReleased;GoToIntrastatMaintenanceToMaintain"
					include ProcessIntrastatDefaults	

			if (action type.Create)
				include DoInvoiceCreateSumoLogging	

			if  (action type.Create
			and  InterfaceInProcess)
				NextSentence = true
			else
			if (RoutingRuleFound)		
				RequiresApproval = true
			else
				RequiresApproval = false







		PerformSnapshotUpdates

			if (Vendor			changed
			or	Invoice			changed
			or	Suffix			changed
			or 	CancelSequence	changed
			or  DueDate			changed
			or  InvoiceDate		changed
			or  ProcessLevel	changed
			or  InvoiceAmount.CurrencyAmount != OldInvoiceAmount)  
				invoke PerformSnapshotUpdates


		UpdateExitRules


			include PerformSnapshotUpdates

			if  (!MatchProcessType.Expense
			and (InvoiceAmount.CurrencyAmount != OldInvoiceAmount
			or   TaxAmount != OldTaxAmount))
				invoke CheckAndCreateReconciliationQueueRecord

			if ((!MatchProcessType.Expense
			and  OneSourceGeneric)
			and (TransientPointOfTitleTransfer changed
			or   InvoiceAmount.CurrencyAmount changed
			or   TaxCode changed))
				invoke Update PayablesInvoiceTaxRel
					invoked.TaxCode = TaxCode
					invoked.EnteredInvoiceAmount = InvoiceAmount.CurrencyAmount
					invoked.PointOfTitleTransfer = TransientPointOfTitleTransfer

			if  (!MatchProcessType.Expense
			and   TaxCode changed
			and   TaxCode entered)
				initialize WorkAmount1 
				for each PayablesInvoiceTaxindicatorRel 
					if (each.TaxCode = TaxCode
					and each.IsTaxDistribution)
						WorkAmount1 += each.TaxableAmount 

					if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
						invoke Update PayablesInvoiceTaxRel
							invoked.TotalInvoicedTaxableAmount = WorkAmount1
					else 
						invoke Update PayablesInvoiceTaxRel
							invoked.TotalAccruedTaxableAmount = WorkAmount1











			if ((TaxCode entered
			and  ApinwsCreateTaxDisFrHdr)
			or   ApinwsAccumulateTxbl entered)


				if ((!MatchProcessType.Expense
				or   BypassMatch)
				and (TaxAdjustment.OverrideProductOnly
				or   TaxAdjustment.NoTax
				or   TaxAdjustment.OverrideProductAndAOC
				or   TaxAdjustment.OverrideTaxablePOLine
				or   TaxAdjustment.OverrideTaxablePOAndAOC))
					NextSentence = true  
				else
				if  (OriginatingInterfaceRun entered		
				and  HasHistoricalExpenseDistributions)		
					NextSentence = true					
				else

					if (DoTaxAfter		
					and DistributionCode not entered
					and TransientLineTax)
						NextSentence = true		
					else						

						if  (IsNotPrepayment					
						and (VendorReturn not entered 	
						or   MatchProcessType.Expense)	
						and ((TaxAdjustment.Calculate
						and   TaxAdjustment changed)
						or   TransientUpdateTaxCode))			
							include 416AddTaxCodeApd

			initialize ApwsDiff


			ApinwsXXTranTotDist = TotalDistributionAmount.TransactionTotal
			ApinwsXXBaseTotDist = TotalDistributionAmount


			if (SearchFieldChanged)

				include BuildTextIndexes

			if (IncomeWithholdingCode changed)
				invoke FastUpdate OpenPayablesInvoicePaymentRel
					invoked.IncomeWithholdingCode	= IncomeWithholdingCode








		PerformDocumentManagementWebserviceCalls

			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.HylandSoftware
			and ImageIndex entered
			and CreationSource.ImagingSystem)
				if (HylandOAuthExists) 
					invoke Purge WebServiceErrorRel
					invoke InputOutputDocUpdateAuthentication HylandDocumentSecureUpdateOAuth
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message	
						invoked.JSONRequest = HylandSaveDocumentDataJSON
						LocalJSONResponse 	= result.JSONResponse
						MyHTTPInfo			= result.HTTPResult

					if (!MyHTTPInfo.Failed and LocalJSONResponse entered)
						LocalOutputField = LocalJSONResponse select "$.documentUpdateResult"



					
					display "HTTPFail<MyHTTPInfo.Failed>WebServErr<WebServiceError>"
					if (MyHTTPInfo.Failed
					or  WebServiceError)
						TextErrorMessage		= "The Web Service To Update the Document Management Partner Failed.  Use 'Secure Update' to try again."
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Status: " + MyHTTPInfo.StatusCode
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Failed: " + MyHTTPInfo.Failed
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Url: " + MyHTTPInfo.Url
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Request: " + MyHTTPInfo.RequestBody
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Response: " + MyHTTPInfo.ResponseBody

						invoke Create PayablesInvoiceComment
							invoked.Company					= Company			
							invoked.PayablesInvoice			= PayablesInvoice	
							invoked.Title					= "Update OnBase Web Service Error:"
							invoked.Comment					= TextErrorMessage	
							invoked.Type					= "N"		
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 70	
									
				else
					invoke InputOutputDocUpdateAuthentication HylandDocumentSecureUpdate
						invoked.UpdateKeywords.DocumentData.DocumentHandle							= ImageIndex
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.FinanceGroup		= VendorGroup
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.Company				= Company
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.Vendor				= Vendor
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.Invoice				= Invoice
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.Suffix				= Suffix
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.CancelSequence		= CancelSequence
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.PurchaseOrderNumber	= FirstPurchaseOrder
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.PurchaseOrderRelease	= FirstPurchaseOrder.PORelease
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.PurchaseOrderCode	= FirstPurchaseOrder.POCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.InvoiceDate			= InvoiceDate
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.InvoiceAmount		= InvoiceAmount.CurrencyAmount
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VoucherNumber		= VoucherNumber
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.IncomeCode			= IncomeCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.BaseAmountCurrencyAmount	= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.BatchNumber			= BatchNumber
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.DistributionDate	= DistributionDate
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.Description			= Description
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.InvoiceCurrency		= InvoiceCurrency
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.OverrideExchangeRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.TaxAmount			= TaxAmount
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.TaxCode				= TaxCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.TaxableAmount		= TaxableAmount
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.ApCompanyVendorGroup	= VendorGroup
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.PayVendorAndRemitToLocationRemitToLocation	= RemitToCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.ProcessLevel		= ProcessLevel
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.BatchNumberBatchDate	= InvoiceDate
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.InvoiceGroup		= InvoiceGroup
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.TermCode			= TermsCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.DueDate				= DueDate
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.AuthorityCode		= AuthorityCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.AccrualCode			= AccrualCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.InvoiceType			= InvoiceType
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.DiscountPercent		= DiscountPercent
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.DiscountDate		= DiscountDate
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.DiscountCode		= DiscountCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.InvoiceSource		= InvoiceSource
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.ReferenceType		= ReferenceType
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.CashCode			= CashCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.DistributionCode	= DistributionCode
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.CreationDate		= CreateDate
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.Operator			= Operator
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VendorVendorVname	= Vendor.VendorName
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VendorVendorClass	= Vendor.VendorClass
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VendorAddr1			= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine1
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VendorAddr2			= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine2
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VendorCity			= Vendor.CurrentAddressRel.PostalAddress.Municipality
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VendorState			= Vendor.CurrentAddressRel.PostalAddress.StateProvince
						invoked.UpdateKeywords.DocumentData.Keywords.StandAlone.VendorPostalCode	= Vendor.CurrentAddressRel.PostalAddress.PostalCode

			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.MHCSoftware
			and CreationSource.ImagingSystem)
				if (MHCOAuthExists)	
					MHCKey 						= Company.VendorGroup.DocMgmtSystemKey
					MHCUser 					= "Infor: " + actor
					MHCDocID					= ImageIndex
					invoke SaveDocumentData MHCDocumentServiceMT
						invoked.JSONRequest = MHCSaveDocumentDataJSON
				else
					invoke SaveLawsonInvoice MHCDocumentService
						invoked.DocumentID							= ImageIndex
						invoked.Key									= Company.VendorGroup.DocMgmtSystemKey
						invoked.User								= actor
						invoked.Apinvoice.Company					= Company
						invoked.Apinvoice.Vendor					= Vendor
						invoked.Apinvoice.Invoice					= Invoice
						invoked.Apinvoice.Suffix					= 0
						invoked.Apinvoice.CancelSequence			= 0
						invoked.Apinvoice.PurchaseOrderNumber		= FirstPurchaseOrder
						invoked.Apinvoice.PurchaseOrderRelease		= FirstPurchaseOrder.PORelease
						invoked.Apinvoice.PurchaseOrderCode			= FirstPurchaseOrder.POCode
						invoked.Apinvoice.InvoiceDate				= InvoiceDate
						invoked.Apinvoice.VoucherNumber				= VoucherNumber
						invoked.Apinvoice.IncomeCode				= IncomeCode
						invoked.Apinvoice.CurrencyAmount			= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.Apinvoice.BatchNumber				= BatchNumber
						invoked.Apinvoice.DistributionDate			= DistributionDate
						invoked.Apinvoice.Description				= Description
						invoked.Apinvoice.InvoiceCurrency			= InvoiceCurrency
						invoked.Apinvoice.OverrideExchangeRate		= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.Apinvoice.TaxAmount					= TaxAmount
						invoked.Apinvoice.TaxCode					= TaxCode
						invoked.Apinvoice.TaxableAmount				= TaxableAmount
						invoked.Apinvoice.VendorGroup				= VendorGroup
						invoked.Apinvoice.RemitToLocation			= RemitToCode
						invoked.Apinvoice.ProcessLevel				= ProcessLevel
						invoked.Apinvoice.BatchDate					= InvoiceDate
						invoked.Apinvoice.InvoiceGroup				= InvoiceGroup
						invoked.Apinvoice.TermCode					= TermsCode
						invoked.Apinvoice.DueDate					= DueDate
						invoked.Apinvoice.AuthorityCode				= AuthorityCode
						invoked.Apinvoice.AccrualCode				= AccrualCode
						invoked.Apinvoice.InvoiceType				= InvoiceType
						invoked.Apinvoice.DiscountPercent			= DiscountPercent
						invoked.Apinvoice.DiscountDate				= DiscountDate
						invoked.Apinvoice.DiscountCode				= DiscountCode
						invoked.Apinvoice.InvoiceSource				= InvoiceSource
						invoked.Apinvoice.ReferenceType				= ReferenceType
						invoked.Apinvoice.CashCode					= CashCode
						invoked.Apinvoice.DistributionCode			= DistributionCode
						invoked.Apinvoice.CreationDate				= CreateDate
						invoked.Apinvoice.Operator					= Operator
						invoked.Apinvoice.VendorVName				= Vendor.VendorName
						invoked.Apinvoice.VendorClass				= Vendor.VendorClass
						invoked.Apinvoice.Addr1						= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine1
						invoked.Apinvoice.Addr2						= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine2
						invoked.Apinvoice.City						= Vendor.CurrentAddressRel.PostalAddress.Municipality
						invoked.Apinvoice.State						= Vendor.CurrentAddressRel.PostalAddress.StateProvince
						invoked.Apinvoice.PostalCode				= Vendor.CurrentAddressRel.PostalAddress.PostalCode

			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.AscendSoftware
			and CreationSource.ImagingSystem)
				invoke SaveDocumentData AscendDocumentService
					invoked.DocumentHandle						= ImageIndex
					invoked.Req.FinanceGroup					= VendorGroup
					invoked.Req.Company							= Company
					invoked.Req.Vendor							= Vendor
					invoked.Req.Invoice							= Invoice
					invoked.Req.Suffix							= 0
					invoked.Req.CancelSequence					= 0
					invoked.Req.PurchaseOrderNumber				= FirstPurchaseOrder
					invoked.Req.PurchaseOrderRelease			= FirstPurchaseOrder.PORelease
					invoked.Req.PurchaseOrderCode				= FirstPurchaseOrder.POCode
					invoked.Req.InvoiceDate						= InvoiceDate
					invoked.Req.VoucherNumber					= VoucherNumber
					invoked.Req.InvoiceAmount					= InvoiceAmount.CurrencyAmount
					invoked.Req.IncomeCode						= IncomeCode
					invoked.Req.BaseCurrencyAmount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.Req.BatchNumber						= BatchNumber
					invoked.Req.DistributionDate				= DistributionDate
					invoked.Req.Description						= Description
					invoked.Req.InvoiceCurrency					= InvoiceCurrency
					invoked.Req.OverrideExchangeRate			= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.Req.TaxAmount						= TaxAmount
					invoked.Req.TaxCode							= TaxCode
					invoked.Req.TaxableAmount					= TaxableAmount
					invoked.Req.VendorGroup						= VendorGroup
					invoked.Req.RemitToLocation					= RemitToCode
					invoked.Req.ProcessLevel					= ProcessLevel
					invoked.Req.BatchDate						= InvoiceDate
					invoked.Req.InvoiceGroup					= InvoiceGroup
					invoked.Req.TermCode						= TermsCode
					invoked.Req.DueDate							= DueDate
					invoked.Req.AuthorityCode					= AuthorityCode
					invoked.Req.AccrualCode						= AccrualCode
					invoked.Req.InvoiceType						= InvoiceType
					invoked.Req.DiscountPercent					= DiscountPercent
					invoked.Req.DiscountDate					= DiscountDate
					invoked.Req.DiscountCode					= DiscountCode
					invoked.Req.InvoiceSource					= InvoiceSource
					invoked.Req.ReferenceType					= ReferenceType
					invoked.Req.CashCode						= CashCode
					invoked.Req.DistributionCode				= DistributionCode
					invoked.Req.CreationDate					= CreateDate
					invoked.Req.Operator						= Operator
					invoked.Req.VendorVName						= Vendor.VendorName
					invoked.Req.VendorClass						= Vendor.VendorClass
					invoked.Req.VendorAddr1						= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine1
					invoked.Req.VendorAddr2						= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine2
					invoked.Req.VendorCity						= Vendor.CurrentAddressRel.PostalAddress.Municipality
					invoked.Req.VendorStateProv					= Vendor.CurrentAddressRel.PostalAddress.StateProvince
					invoked.Req.VendorPostalCode				= Vendor.CurrentAddressRel.PostalAddress.PostalCode

			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.PerceptiveSoftware
			and CreationSource.ImagingSystem)
				invoke UpdateInvoice PerceptiveDocumentService
					invoked.IncomingInvoiceHeader.DocId						= ImageIndex
					invoked.IncomingInvoiceHeader.FinanceGroup				= VendorGroup
					invoked.IncomingInvoiceHeader.Company					= Company
					invoked.IncomingInvoiceHeader.Vendor					= Vendor
					invoked.IncomingInvoiceHeader.VendorDetails.VendorName	= Vendor.VendorName
					invoked.IncomingInvoiceHeader.VendorDetails.VendorClass	= Vendor.VendorClass
					invoked.IncomingInvoiceHeader.VendorDetails.Addr1		= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine1
					invoked.IncomingInvoiceHeader.VendorDetails.Addr2		= Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine2
					invoked.IncomingInvoiceHeader.VendorDetails.City		= Vendor.CurrentAddressRel.PostalAddress.Municipality
					invoked.IncomingInvoiceHeader.VendorDetails.State		= Vendor.CurrentAddressRel.PostalAddress.StateProvince
					invoked.IncomingInvoiceHeader.VendorDetails.PostalCode	= Vendor.CurrentAddressRel.PostalAddress.PostalCode
					invoked.IncomingInvoiceHeader.Invoice					= Invoice
					invoked.IncomingInvoiceHeader.Suffix					= 0
					invoked.IncomingInvoiceHeader.CancelSequence			= 0
					invoked.IncomingInvoiceHeader.PurchaseOrderNumber		= FirstPurchaseOrder
					invoked.IncomingInvoiceHeader.PurchaseOrderRelease		= FirstPurchaseOrder.PORelease
					invoked.IncomingInvoiceHeader.PurchaseOrderCode			= FirstPurchaseOrder.POCode
					invoked.IncomingInvoiceHeader.InvoiceDate				= InvoiceDate
					invoked.IncomingInvoiceHeader.VoucherNumber				= VoucherNumber
					invoked.IncomingInvoiceHeader.InvoiceAmount				= InvoiceAmount.CurrencyAmount
					invoked.IncomingInvoiceHeader.IncomeCode				= IncomeCode
					invoked.IncomingInvoiceHeader.CurrencyAmount			= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
					invoked.IncomingInvoiceHeader.BatchNumber				= BatchNumber
					invoked.IncomingInvoiceHeader.DistributionDate			= DistributionDate
					invoked.IncomingInvoiceHeader.Description				= Description
					invoked.IncomingInvoiceHeader.InvoiceCurrency			= InvoiceCurrency
					invoked.IncomingInvoiceHeader.OverrideExchangeRate		= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.IncomingInvoiceHeader.TaxAmount					= TaxAmount
					invoked.IncomingInvoiceHeader.TaxCode					= TaxCode
					invoked.IncomingInvoiceHeader.TaxableAmount				= TaxableAmount
					invoked.IncomingInvoiceHeader.VendorGroup				= VendorGroup
					invoked.IncomingInvoiceHeader.RemitToLocation			= RemitToCode
					invoked.IncomingInvoiceHeader.ProcessLevel				= ProcessLevel
					invoked.IncomingInvoiceHeader.BatchDate					= InvoiceDate
					invoked.IncomingInvoiceHeader.InvoiceGroup				= InvoiceGroup
					invoked.IncomingInvoiceHeader.TermCode					= TermsCode
					invoked.IncomingInvoiceHeader.DueDate					= DueDate
					invoked.IncomingInvoiceHeader.AuthorityCode				= AuthorityCode
					invoked.IncomingInvoiceHeader.AccrualCode				= AccrualCode
					invoked.IncomingInvoiceHeader.InvoiceType				= InvoiceType
					invoked.IncomingInvoiceHeader.DiscountPercent			= DiscountPercent
					invoked.IncomingInvoiceHeader.DiscountDate				= DiscountDate
					invoked.IncomingInvoiceHeader.DiscountCode				= DiscountCode
					invoked.IncomingInvoiceHeader.InvoiceSource				= InvoiceSource
					invoked.IncomingInvoiceHeader.ReferenceType				= ReferenceType
					invoked.IncomingInvoiceHeader.CashCode					= CashCode
					invoked.IncomingInvoiceHeader.DistributionCode			= DistributionCode
					invoked.IncomingInvoiceHeader.CreationDate				= CreateDate
					invoked.IncomingInvoiceHeader.Operator					= Operator






		CreatePayablesInvoicePayment		

			if (!Status.Historical)
				invoke Create PayablesInvoicePayment
					fill in fields from this instance
					invoked.InvoiceCurrency							= InvoiceCurrency
					invoked.VendorClass								= Vendor.VendorClass
					invoked.ProcessGroup							= Vendor.PayablesProcessGroup
					if (IsPrepaymentType)
						invoked.Anticipation						= false
						invoked.DiscountLost						= false
						invoked.DueDate								= DueDate
					else
						invoked.Anticipation						= Anticipation
						invoked.DiscountLost						= AppDiscLostFlg
						invoked.DueDate								= AppDueDate
					invoked.DiscountCode							= DiscountCode
					invoked.CheckDate								= TransientPaymentDate
					invoked.DiscountPercent							= AppDiscountRt
					invoked.DiscountDate							= AppDiscDate
					invoked.DiscountAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
					invoked.PaymentAmount.CurrencyAmount			= AppTranPmtAmt
					invoked.PaymentAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
					invoked.PaymentAmount.FunctionalAmount.EnteredCurrencyRate = AppActCnvRate
					initialize invoked.RevaluedBaseAmount
					invoked.DiscountAmount.CurrencyAmount			= AppTranDiscAmt
					invoked.SkipPayablesDiscount					= true
					invoked.TransactionNumber						= TransientPaymentNumber	
					invoked.NetPaymentAmount.CurrencyAmount			= TransientPaymentAmount
					if (TransientPaymentDate entered)
						invoked.NetPaymentAmount.ExchangeDate		= TransientPaymentDate
					invoked.BankCheckAmount							= TransientPaymentAmount
					invoked.ReportableIncomeAmount					= TransientReportableAmount
					invoked.InvoiceGroup							= InvoiceGroup
					invoked.OverrideSeparatePayment					= OverrideSeparatePayment
					invoked.OverridePayImmediately					= OverridePayImmediately
					invoked.OverrideEnclosure						= OverrideEnclosure
					invoked.RemitToCode								= RemitToCode
					invoked.PayVendor								= PayVendor
					invoked.ProcessLevel							= ProcessLevel
					invoked.PayGroup								= PayGroup
					invoked.Anticipation							= Anticipation
					invoked.AccrualCode								= AccrualCode
					invoked.IncomeCode								= IncomeCode

					invoked.CashCode								= CashCode
					invoked.BankTransactionCode						= BankTransactionCode

			else
				invoke Historical.InterfaceCreate PayablesInvoicePayment
					fill in fields from this instance
					invoked.InvoiceCurrency							= InvoiceCurrency
					invoked.VendorClass								= Vendor.VendorClass
					invoked.ProcessGroup							= Vendor.PayablesProcessGroup
					invoked.DiscountLost							= AppDiscLostFlg
					invoked.DueDate									= AppDueDate
					invoked.CheckDate								= TransientPaymentDate
					invoked.DiscountPercent							= AppDiscountRt
					invoked.DiscountDate							= AppDiscDate
					invoked.DiscountAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
					invoked.PaymentAmount.CurrencyAmount			= AppTranPmtAmt
					invoked.PaymentAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
					invoked.PaymentAmount.FunctionalAmount.EnteredCurrencyRate = AppActCnvRate
					initialize invoked.RevaluedBaseAmount
					invoked.DiscountAmount.CurrencyAmount			= AppTranDiscAmt
					invoked.SkipPayablesDiscount					= true
					invoked.TransactionNumber						= TransientPaymentNumber	
					invoked.NetPaymentAmount.CurrencyAmount			= TransientPaymentAmount
					invoked.NetPaymentAmount.ExchangeDate			= TransientPaymentDate
					invoked.BankCheckAmount							= TransientBankCheckAmount
					invoked.ReportableIncomeAmount					= TransientReportableAmount
					invoked.InvoiceGroup							= InvoiceGroup
					invoked.TransientUpdatePaymentBalance			= TransientUpdatePaymentBalance
					invoked.OverrideSeparatePayment					= OverrideSeparatePayment
					invoked.OverridePayImmediately					= OverridePayImmediately
					invoked.OverrideEnclosure						= OverrideEnclosure



		CreateExitRules				//	TODO: Someday, this should move to "Create Exit Rules" section. Then the 'include' lines from each 'Create Action' can go away.





			if (LocalPTXTaxCode entered			
			or  LocalPTXTaxAmount entered		
			or  LocalPTXTaxableAmount entered)	

				invoke UpdatePIT
					invoked.Function		= 1	

			if (PayablesInvoiceTaxRel exists)		


				invoke UpdatePIT
					invoked.Function		= 2	
					if (TransientAcceptTaxOverride)
						invoked.PrmTaxTolOvrrd		= true
					if (DoShortPayProcess)
						invoked.PrmShortPaid		= true
					if (CalculateTax.OutputTotalTaxAmount entered)
						invoked.PrmCalcTaxAmt		= CalculateTax.OutputTotalTaxAmount


			if (!MatchProcessType.Expense
			and OneSourceGeneric)
				invoke Update PayablesInvoiceTaxRel
					invoked.TaxCode = PayablesInvoice.TaxCode
					invoked.EnteredInvoiceAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount
					if (TransientPointOfTitleTransfer entered)
						invoked.PointOfTitleTransfer = TransientPointOfTitleTransfer
					else
					if (FirstPurchaseOrder entered)
						invoked.PointOfTitleTransfer = FirstPurchaseOrder.PointOfTitleTransfer

			if (DoShortPayProcess)				
				include CreateShortPayComment	


			if  (!MatchProcessType.Expense													
			and  !MatchProcessType.AOCOnly)
				if  (InvoiceType.Invoice)
					constraint (!FirstPurchaseOrder.MatchPrepayment)
						"CannotHaveBothPrepaidAndNonPrepaidInvoicesForAPurchaseOrder"
				else
				if  (InvoiceType.MatchPrepayment)
					LocalPurchaseOrder = FirstPurchaseOrder
					for each LocalMatchPurchaseOrderInvoicesRel

						if (!each.PayablesInvoice.Status.Cancelled
						and !each.PayablesInvoice.IsMemoOnly
						and !each.PayablesInvoice.SystemGeneratedCreditMemoRel exists)
							constraint (MatchPrepayment = each.PayablesInvoice.MatchPrepayment)
								"CannotHaveBothPrepaidAndNonPrepaidInvoicesForAPurchaseOrder"

							constraint (MatchPrepaymentMethod = each.PayablesInvoice.MatchPrepaymentMethod)
								"CannotMixPrepaymentMethodsForAPurchaseOrder;SeeInvoice<each.PayablesInvoice.Invoice>"

							end for each


			if  (DoCreatePayment
			and  !DoMultipleTermsPayments				
			and (!InterfaceCreate
			or  (InterfaceCreate
			and  !ImportInvoiceHasImportPayment))
			and  !TransientUpdateTaxCode)				
				include CreatePayablesInvoicePayment	
			else										
				if (DoCreatePayment
				and DoMultipleTermsPayments				
				and (!InterfaceCreate
				or  (InterfaceCreate
				and  !ImportInvoiceHasImportPayment))
				and  !TransientUpdateTaxCode)			
					initialize ApinwsTermsTranDiscTot
					initialize ApinwsTermsBaseDiscTot
					initialize ApinwsAppLastSeqNbr

					LoopCounter = 1
					while (LoopCounter <= 99
					and    CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered)
						initialize ApinwsTermsPmtAmt
						initialize ApinwsTermsDiscAmt
						initialize ApinwsTermsDueDate
						initialize ApinwsTermsDiscDate
						initialize ApinwsTermsDiscountRt
						ApinwsTermsPmtAmt 	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
						ApinwsTermsDueDate	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
						if (!TermsCode.NetDueEOM
						and LoopCounter > 1)
							CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountAmount = blank
						if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountAmount entered)
							ApinwsTermsDiscDate 	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountDate
							ApinwsTermsDiscountRt	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
							ApinwsTermsDiscAmt		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DiscountAmount
						if (ApinwsTermsDiscAmt > 0
						and ApinwsTermsDiscAmt > ApinwsTermsPmtAmt)
							ApinwsTermsDiscAmt = ApinwsTermsPmtAmt * ApinwsTermsDiscountRt	
						if (ApinwsTermsDiscAmt < 0
						and ApinwsTermsDiscAmt < ApinwsTermsPmtAmt)
							ApinwsTermsDiscAmt = ApinwsTermsPmtAmt * ApinwsTermsDiscountRt 

						include 530MoveAppaymentData
						include CreatePayablesInvoicePayment	

						increment LoopCounter

			if (FromVendorReturn										
			and VendorReturnRel.VendorClaimType.Chargeback				
			and DerivedVendorReturnHoldCode entered)
				invoke PutInvoiceOnHold									
					invoked.HoldCode	= DerivedVendorReturnHoldCode	

			if (action type.Create
			and !InvoiceType.PrepaymentCredit
			and  initiating action != "CreateNextRecurringInvoice"				
			and Company.GlobalWithholding
			and Vendor.IncomeWithholding)

				if (RemitToCode entered
				and VendorLocationWithholdingDefaultRel exists)
					for each VendorLocationWithholdingDefaultRel
						if (each.IncomeWithholdingCode.Currency !entered
						or (each.IncomeWithholdingCode.Type.Payment
						and each.IncomeWithholdingCode.Currency = CashCode.Currency)
						or (each.IncomeWithholdingCode.Type.Accrued
						and each.IncomeWithholdingCode.Currency = InvoiceCurrency))
							invoke Create PayablesInvoiceWithholding
								fill in fields from each
								invoked.Company							= Company
								invoked.PayablesInvoice					= PayablesInvoice
				else	
					if (VendorWithholdingDefaultRel exists)
						for each VendorWithholdingDefaultRel
							if (each.IncomeWithholdingCode.Currency !entered
							or (each.IncomeWithholdingCode.Type.Payment
							and each.IncomeWithholdingCode.Currency = CashCode.Currency)
							or (each.IncomeWithholdingCode.Type.Accrued
							and each.IncomeWithholdingCode.Currency = InvoiceCurrency))
								invoke Create PayablesInvoiceWithholding
									fill in fields from each
									invoked.Company						= Company
									invoked.PayablesInvoice				= PayablesInvoice

			if (FirstPurchaseOrder != 0)
				invoke Create MatchPurchaseOrderInvoice
					invoked.Company						= Company
					invoked.PurchaseOrder				= FirstPurchaseOrder
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.Vendor						= Vendor
					invoked.TaxCode						= TaxCode
					invoked.InvoiceType					= InvoiceType
					if (MatchProcessType.AOCOnly
					and Location not entered
					and FirstPurchaseOrder.Dropship)
						invoked.Location				= FirstPurchaseOrder.ShipToLocation
					else
						invoked.Location				= Location

			if (ServiceContract entered
			and ThisMatchServiceContractInvoiceRel not exists)
				invoke Create MatchServiceContractInvoice 
					invoked.Company						= Company
					invoked.Contract 					= ServiceContract 
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.VendorGroup 				= Company.VendorGroup 




			if (TaxEntityRel.IntrastatUsed)				
				if (DestinationCountry changed
				or	UnloadingPort changed
				or 	Location changed
				or 	FirstPurchaseOrder changed)
					constraint (Status.Unreleased)
						"CannotChangeIntrastatInformationAfterInvoiceHasBeenReleased;GoToIntrastatMaintenanceToMaintain"
				include ProcessIntrastatDefaults	


			if (MatchPrepaymentMethod.PrepayFromInvoice)  
				initialize TransientCreateDetails         
			else
			if (MatchPrepaymentMethod.EligibleForPrepay
			and (TransientCreateDetails.FromReceipt
			or   TransientCreateDetails.FromReceiptThenFromPO))
				TransientCreateDetails = TransientCreateDetails.FromPurchaseOrder

			if  (!MatchProcessType.Expense
			and  !MatchProcessType.ServiceContract
			and (TransientCreateDetails.FromPurchaseOrder
			or   TransientCreateDetails.FromReceipt
			or   TransientCreateDetails.FromReceiptThenFromPO))         
				for each MatchPurchaseOrderInvoicesRel
					if (!MatchProcessType.AOCOnly)
						if (each.CreateDetailValid)
							if  (TransientCreateDetails.FromPurchaseOrder
							or   each.PurchaseOrder.Dropship)				
								invoke CreateDetailFromPurchaseOrder each
							else
							if  (TransientCreateDetails.FromReceipt)
								invoke CreateDetailFromReceipt each
							else											
								if (TransientCreateDetails.FromReceiptThenFromPO) 
									if (OpenReceiptsPool2Rel exists
									or  OpenReceiptsPool3Rel exists)
										invoke CreateDetailFromReceipt each 
									else
										invoke CreateDetailFromPurchaseOrder each


					if (MatchProcessType.AOCOnly)
						if (each.CreateAOCValid)
							invoke CreateAOCFromPurchaseOrder each


			initialize ApinwsXXGoodsTxblAmt
			if (ActionType.CreateType
			and MatchProcessType.Expense)

				if (TaxEntityRel.TaxableAmountEdit
				and MatchProcessType.Expense
				or (CalculateTax.TaxType = "T"
				and TaxableAmount not entered))										

					for each PayablesInvoiceDistributionRel

						if (each.DistributionAccount entered
						and (each.TaxIndicator.Taxable
						or   each.TaxIndicator.None)
						and each.TaxCode not entered)
							ApinwsXXGoodsTxblAmt += each.DistributionAmount.CurrencyAmount









			if ((TaxCode entered
			and  ApinwsCreateTaxDisFrHdr)
			or   ApinwsAccumulateTxbl entered)

				if ((!MatchProcessType.Expense
				or   BypassMatch)
				and (TaxAdjustment.OverrideProductOnly
				or   TaxAdjustment.NoTax
				or   TaxAdjustment.OverrideProductAndAOC
				or   TaxAdjustment.OverrideTaxablePOLine
				or   TaxAdjustment.OverrideTaxablePOAndAOC
				or   (initiating action = "CreditForRebill"
				and  ((TaxAdjustment.Calculate
				and   TaxCode.TaxType.CalculatedRate)
				or	 (!TaxAdjustment.Calculate
				and   !TaxCode.TaxType.CalculatedRate)))))
					NextSentence = true  

				else
				if  (OriginatingInterfaceRun entered		
				and  TransientPostingStatus.History)		
					NextSentence = true						

				else

					if (DoTaxAfter				
					and DistributionCode not entered
					and TransientLineTax)		
						NextSentence = true		

					else						

						if (TaxCode entered		
						and IsNotPrepayment		
						and (VendorReturn not entered 	
						or   MatchProcessType.Expense)	
						and (!TransientLineTax	
						or   !MatchProcessType.Expense))

							include 416AddTaxCodeApd

						else


							if (TaxCode entered
							and TaxAmount entered			
							and TransientLineTax			
							and DistributionCode entered	
							and MatchProcessType.Expense)




								NextSentence = true	

					if (CalculateTax.TaxType.TaxTableCode		
					and TaxAmount entered)
						LocalContinue = true

					else

						if (TaxAmount not entered)		
							if (TaxEntityUsesThirdPartyTax			
							and DerivedTaxMethodInvOrAcc.Invoiced)	
								TaxAmount = ApinwsXXTranTotTax		
								TaxAmount = RoundedTaxAmount		
































			if (!InterfaceCreate
			and TransientPaymentNumber entered	
			and BankTransactionCode.BankTransactionType.CashPayment)
				include CashLedgerPayablesPaymentProcessing


			if (TransientReleaseOnInvoiceAdd)
				invoke Unreleased.Release


			ApinwsXXTranTotDist = TotalDistributionAmount.TransactionTotal
			ApinwsXXBaseTotDist = TotalDistributionAmount

			if (IsChargebackSubType)
				if (Status.Released)
					include AddToVendorBalance

			if (APClerk !entered)			
				include AutoAssignAPClerk				
				if (APClerk not entered
				and ProcessingTeam not entered				
				and !InterfaceInProcess						
				and actor.agent(Employee).Employee entered)
					APClerk = actor.agent(Employee).Employee

			if  (!MatchProcessType.Expense
			and (!InterfaceInProcess
			or    MatchPrepayment))
				invoke InvoiceUpdate				

			if (SearchFieldEntered)

				include BuildTextIndexes

			if (OriginalInvoice entered
			and !MatchInvoiceReferenceRel exists)
				invoke Create MatchInvoiceReferenceRel
					invoked.OriginalInvoice			= OriginalInvoice

				ExternalPurchaseOrder = OriginalInvoice.ExternalPurchaseOrder

			initialize TransientInvoiceEntryTemplate		

			if (ServiceContract entered)										
				for each ServiceContract.ContractCommentRel						
					if (each.CommentUsedFor.DisplayOnInvoice)					
						invoke Create PayablesInvoiceComment					
							invoked.Company					= Company			
							invoked.PayablesInvoice			= PayablesInvoice	
							invoked.Title					= each.CommentTitle	
							invoked.Comment					= each.Description	
							invoked.Type					= "A"				

			if  (MatchAgingRel exists
			and  !InterfaceInProcess)
				if  (!MatchProcessType.Expense
				and (InvoiceType.Invoice
				or   Suffix not entered)
				and  MatchAgingInvoiceRel not exists)
					invoke Create MatchAgingInvoice 
						invoked.Company = Company
						invoked.PayablesInvoice = PayablesInvoice
			
#ifdef module idm

			if (IsIDMConfigured)
				if (IDMDocumentExists)	
					IDMItemCopy.SourceIDMUniqueId 		= IDMDocumentPID
					IDMItemCopy.SourceDocumentType 		= "FSM_ScannedDocument"

					IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName  	= "Company"
					IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue  	= Company
					IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName  	= "PayablesInvoice"
					IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue  	= PayablesInvoice
					IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName  	= "Invoice"
					IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue  	= Invoice
					IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName  	= "Vendor"
					IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue  	= Vendor
					IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName  	= "InvoiceType"
					IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue  	= DerivedInvoiceTypeForIDM
					IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName  	= "PurchaseOrder"
					IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue  	= FirstPurchaseOrder
					IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName  	= "ProcessLevel"
					IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue  	= ProcessLevel
					IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName  	= "Status"
					IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue  	= DerivedStatusForIDM
					IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName  	= "InvoiceAmount"
					IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue  	= InvoiceAmount.CurrencyAmount
					IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName  	= "CompanyName"
					IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeValue  	= Company.Name
					IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeName  	= "VendorName"
					IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeValue  	= Vendor.VendorName
					IDMItemCopy.DestinationAttributes	= IDMAttributes
					IDMItemCopy.DestinationDocumentType = "FSM_PayablesInvoice"
					IDMItemCopy.DestinationACL			= "CSFDefault"
					LocalNewIDMUniqueID					= IDMItemCopy.Execute
					if (LocalNewIDMUniqueID entered)
						initialize IDMItem
						IDMItem.IDMUniqueId				= IDMDocumentPID
						IDMItem.DocumentType			= "FSM_ScannedDocument"
						if (IDMItem.GetItemDetails)
							LocalIDMDocumentPID				= IDMItem.IDMItemDetails.PID
						initialize IDMAttributes
						IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName  	= "ReferenceID"
						IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue  	= LocalNewIDMUniqueID
						IDMAttributes.IDMDocumentType = "FSM_ScannedDocument"
						IDMAttributes.PID 	= LocalIDMDocumentPID
						LocalResult			= IDMAttributes.ExecuteUpdateAttributeByPID
						IDMDocumentPID = LocalNewIDMUniqueID
#endif











		CurrencyTableRefresh

			if  (ActionType.UpdateType
			and (CurrencyTable  	changed
			or   InvoiceDate		changed
			or   InvoiceCurrency	changed
			or   InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		changed
			or   InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	changed
			or   InvoiceAmount.AlternateAmount.EnteredCurrencyRate		changed			
			or   InvoiceAmount.AlternateAmount.EnteredCurrencyAmount	changed			
			or   InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		changed			
			or   InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount	changed			
			or   InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		changed			
			or   InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount	changed			
			or   InvoiceAmount.ReportAmount1.EnteredCurrencyRate		changed			
			or   InvoiceAmount.ReportAmount1.EnteredCurrencyAmount		changed			
			or   InvoiceAmount.ReportAmount2.EnteredCurrencyRate		changed			
			or   InvoiceAmount.ReportAmount2.EnteredCurrencyAmount		changed			
			or   InvoiceAmount.ReportAmount3.EnteredCurrencyRate		changed			
			or   InvoiceAmount.ReportAmount3.EnteredCurrencyAmount		changed			
			or   InvoiceAmount.ReportAmount4.EnteredCurrencyRate		changed			
			or   InvoiceAmount.ReportAmount4.EnteredCurrencyAmount		changed			
			or   InvoiceAmount.ReportAmount5.EnteredCurrencyRate		changed			
			or   InvoiceAmount.ReportAmount5.EnteredCurrencyAmount		changed))		
				if (InvoiceDate changed)		
					constraint (DistributionCode !changed)
						"CannotChangeDistributionCodeAndInvoiceDate"
				else
					constraint (DistributionCode !changed)
						"CannotChangeDistributionCodeIfCurrencyOrRateChanges"
				if (Vendor changed)
					constraint (Vendor.DistributionCode !entered)
						"VendorHasDefaultDistributionCode._\CannotChangeDistributionCodeIfCurrencyOrRateChanges."

				if  (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.OutputCurrencyRate	

				if  (InvoiceAmount.AlternateAmount.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.AlternateAmount.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.AlternateAmount.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.AlternateAmount.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.AlternateAmount.EnteredCurrencyRate		
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.OutputCurrencyRate	

				if  (InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.OutputCurrencyRate	

				if  (InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.OutputCurrencyRate	

				if  (InvoiceAmount.ReportAmount1.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.ReportAmount1.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.ReportAmount1.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.ReportAmount1.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.ReportAmount1.EnteredCurrencyRate			
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.ReportAmount1.EnteredCurrencyRate	= InvoiceAmount.ReportAmount1.OutputCurrencyRate	

				if  (InvoiceAmount.ReportAmount2.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.ReportAmount2.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.ReportAmount2.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.ReportAmount2.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.ReportAmount2.EnteredCurrencyRate			
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.ReportAmount2.EnteredCurrencyRate	= InvoiceAmount.ReportAmount2.OutputCurrencyRate	

				if  (InvoiceAmount.ReportAmount3.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.ReportAmount3.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.ReportAmount3.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.ReportAmount3.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.ReportAmount3.EnteredCurrencyRate			
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.ReportAmount3.EnteredCurrencyRate	= InvoiceAmount.ReportAmount3.OutputCurrencyRate	

				if  (InvoiceAmount.ReportAmount4.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.ReportAmount4.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.ReportAmount4.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.ReportAmount4.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.ReportAmount4.EnteredCurrencyRate			
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.ReportAmount4.EnteredCurrencyRate	= InvoiceAmount.ReportAmount4.OutputCurrencyRate	

				if  (InvoiceAmount.ReportAmount5.EnteredCurrencyAmount	changed		
				and  InvoiceAmount.ReportAmount5.EnteredCurrencyAmount	entered		
				and (InvoiceAmount.ReportAmount5.EnteredCurrencyRate	not changed		
				or   InvoiceAmount.ReportAmount5.EnteredCurrencyRate	not entered))	
					initialize InvoiceAmount.ReportAmount5.EnteredCurrencyRate			
					LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency			
					InvoiceAmount.ReportAmount5.EnteredCurrencyRate	= InvoiceAmount.ReportAmount5.OutputCurrencyRate	

				if (MatchProcessType.Expense)		
					constraint (InvoiceAmount.CurrencyAmount = TotalPaymentAmount.TransactionTotal)
						"InvoicePaymentAmountMustBeInBalanceWithInvoiceAmountToChangeCurrencyRateRelatedInformation"

				if (InvoiceDate		changed)
					SaveDueDate	= DueDate
					initialize DueDate
					initialize DiscountDate
					initialize DiscountAmount
					initialize DiscountPercent

				if (CurrencyTable	changed
				or  InvoiceDate		changed
				or  InvoiceCurrency changed)
					initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					initialize InvoiceAmount.AlternateAmount.EnteredCurrencyRate
					initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
					initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
					initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate
					initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate
					initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate
					initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate
					initialize InvoiceAmount.ProjectAmount.EnteredCurrencyRate
					initialize InvoiceAmount.ReportAmount1.EnteredCurrencyRate
					initialize InvoiceAmount.ReportAmount2.EnteredCurrencyRate
					initialize InvoiceAmount.ReportAmount3.EnteredCurrencyRate
					initialize InvoiceAmount.ReportAmount4.EnteredCurrencyRate
					initialize InvoiceAmount.ReportAmount5.EnteredCurrencyRate
				if (InvoiceCurrency changed			
				and VendorPaymentAmount	!entered)
					initialize VendorPaymentCurrency
				include RefreshCurrencyAmounts





		MatchPurchaseOrderCheck
			if (FirstPurchaseOrder != 0
			and !MatchPurchaseOrderInvoicesRel exists)

				invoke Create MatchPurchaseOrderInvoice
					invoked.Company			= Company
					invoked.PurchaseOrder	= FirstPurchaseOrder
					invoked.PayablesInvoice	= PayablesInvoice
					invoked.Vendor			= Vendor
					invoked.TaxCode			= TaxCode
					invoked.InvoiceType		= InvoiceType
					if (MatchProcessType.AOCOnly
					and Location not entered
					and FirstPurchaseOrder.Dropship)
						invoked.Location	= FirstPurchaseOrder.ShipToLocation
					else
						invoked.Location	= Location

			if (MatchProcessType.ServiceContract
			and ServiceContract entered 
			and ThisMatchServiceContractInvoiceRel not exists)
				invoke Create MatchServiceContractInvoice
					invoked.Company						= Company
					invoked.Contract 					= ServiceContract 
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.VendorGroup 				= Company.VendorGroup 


		AmendedInvoiceFundReallocation	
			LocalMultiplier = -1
			for each PayablesInvoiceDistributionsCreateAccrualFundAccountingRel
				if (each.Status.Unreleased)
					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

					invoke Create PayablesInvoiceDistribution
						invoked.Company 					= Company
						invoked.PayablesInvoice 			= PayablesInvoice
						invoked.GLTTransactionDate 			= InvoiceDate
						invoked.DistributionType 			= "A"
						invoked.Status						= 1
						invoked.GLTPostingDate	 			= DistributionDate
						invoked.DistributionDate			= DistributionDate
						invoked.GLTransactionAmount 		= (each.DistributionAmount.CurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.ExchangeDate 							= InvoiceAmount.ExchangeDate
						invoked.DistributionAmount.CurrencyAmount 							= (each.DistributionAmount.CurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalMultiplier)
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalMultiplier)
						invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount 		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.BypassActiveCodeBlockEdit 	= true 	
						invoked.BypassProjectDateEdit 		= true
						invoked.BypassStructureRelationEdit = true

			if (AmountPaid entered)
				for each HistoricalPayablesInvoicePaymentRel
					if (each.PayablesInvoicePayment.VoidSequence = 0)
						invoke CreatePaymentAccrualDistribution each
							invoked.PrmDescription 					= PaymentAccrualMessage
							invoked.PrmPostDate						= DistributionDate
							invoked.PrmAmendedReallocation			= true
						if (each.DiscountAmount.CurrencyAmount entered)
							invoke CreateDiscountDistribution each
								invoked.PrmDescription				= CashDiscountMessage
								invoked.PrmPostDate					= DistributionDate
								invoked.PrmAmendedReallocation			= true
						if (each.WithholdingAmount				entered
						or  each.FATCATransactionIncomeAmount	entered)
							invoke CreateWithholdingDistribution each
								invoked.PrmDescription				= IncomeWithholdingAccrualMessage
								invoked.PrmPostDate					= DistributionDate
								invoked.PrmAmendedReallocation			= true
						if (each.SecondaryWithholdingTransactionAmount1	entered)
							invoke CreateSecondaryWithholdingDistribution each
								invoked.PrmDescription				= SecondaryWithholdingAccrualMessage
								invoked.PrmSecondaryWithholding		= 1
								invoked.PrmPostDate					= DistributionDate
								invoked.PrmAmendedReallocation			= true
						if (each.SecondaryWithholdingTransactionAmount2	entered)
							invoke CreateSecondaryWithholdingDistribution each
								invoked.PrmDescription				= SecondaryWithholdingAccrualMessage
								invoked.PrmSecondaryWithholding		= 2
								invoked.PrmPostDate					= DistributionDate
								invoked.PrmAmendedReallocation			= true
						if (each.SecondaryWithholdingTransactionAmount3	entered)
							invoke CreateSecondaryWithholdingDistribution each
								invoked.PrmDescription				= SecondaryWithholdingAccrualMessage
								invoked.PrmSecondaryWithholding		= 3
								invoked.PrmPostDate					= DistributionDate
								invoked.PrmAmendedReallocation			= true




		CreateAccrualOffset
			if (LocalReverseAccrual)	
				LocalMultiplier = 1
			else
				LocalMultiplier = -1

			if  (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
			or  InvoiceType.Prepayment  
			or  InvoiceType.MatchPrepayment
			or  LocalReallocate)


				invoke CreateAccrualOffset PayablesInvoiceDistribution	
					invoked.Company						= Company
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.GLTPostingDate				= DistributionDate
					invoked.GLTTransactionDate			= InvoiceDate
					invoked.DistributionType			= "A"
					if (!MatchProcessType.Expense
					and  MatchPrepayment
					and  UnpostedDistributionsRel exists)
						invoked.Status					= 1
					else
					if (action = "UpdateAfterMatch"				
					or  action = "UpdateAfterMatchPart2")		
						invoked.Status                  = 1		
					else										
					if ((OriginatingInterfaceRun	entered		
					and  HasHistoricalExpenseDistributions)		
					or   Status.Historical)						
						invoked.Status					= 9		
					else										
						invoked.Status					= 1
					if (LocalReallocate)
						invoked.GLTPostingDate			= LocalPostDate				
						invoked.DistributionDate		= LocalPostDate
					else
						invoked.DistributionDate		= DistributionDate
					invoked.GLTransactionAmount  	  				    					= InvoiceAmount.CurrencyAmount * LocalMultiplier
					invoked.DistributionAmount.ExchangeDate									= InvoiceAmount.ExchangeDate 
					invoked.DistributionAmount.CurrencyAmount								= InvoiceAmount.CurrencyAmount * LocalMultiplier
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= TotalDistributionAmount.FunctionalTotal * LocalMultiplier
					invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		= TotalDistributionAmount.AlternateTotal * LocalMultiplier
					invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= TotalDistributionAmount.AlternateTotal2 * LocalMultiplier
					invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= TotalDistributionAmount.AlternateTotal3 * LocalMultiplier
					invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal1 * LocalMultiplier
					invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal2 * LocalMultiplier
					invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal3 * LocalMultiplier
					invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal4 * LocalMultiplier
					invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount			= TotalDistributionAmount.ReportTotal5 * LocalMultiplier
					invoked.GLFinanceCodeBlock												= PayablesAccrualCodeDetailRel.DistributionAccount
					invoked.DistributionAccount												= PayablesAccrualCodeDetailRel.DistributionAccount
					if (InvoiceType.MatchPrepayment		
					and AccrualCodeProjectOverride entered)
						invoked.GLFinanceCodeBlock.Project									= AccrualCodeProjectOverride
						invoked.DistributionAccount.Project									= AccrualCodeProjectOverride					
					invoked.GLTJournalizeGroup												= GLTJournalizeGroup
					invoked.BypassActiveCodeBlockEdit										= true 	
					invoked.BypassProjectDateEdit 											= true
					invoked.BypassStructureRelationEdit 									= true
					if (LocalReallocate)
						invoked.Description													= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription

			else
				if (!UseBackgroundCreateAccrualOffset)
					for each PayablesInvoiceDistributionsCreateAccrualFundAccountingRel
						initialize LocalCalculatePayablesFinanceStructure
						LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
						LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
						LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
						LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
						LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
						LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure


						invoke CreateAccrualOffset PayablesInvoiceDistribution	
							invoked.Company 					= Company
							invoked.PayablesInvoice 			= PayablesInvoice
							invoked.GLTTransactionDate 			= InvoiceDate
							invoked.DistributionType 			= "A"
							if (!MatchProcessType.Expense
							and  MatchPrepayment
							and  UnpostedDistributionsRel exists)
								invoked.Status					= 1
							else
							if (action = "UpdateAfterMatch"                
							or  action = "UpdateAfterMatchPart2")        
								invoked.Status                  = 1        
							else                                        
							if ((OriginatingInterfaceRun	entered		
							and  HasHistoricalExpenseDistributions)		
							or   Status.Historical)						
								invoked.Status					= 9		
							else										
								invoked.Status					= 1
							if (LocalPostDate entered)
								invoked.GLTPostingDate 			= LocalPostDate
								invoked.DistributionDate		= LocalPostDate
							else
								invoked.GLTPostingDate 			= DistributionDate
								invoked.DistributionDate		= DistributionDate
							invoked.GLTransactionAmount 		= (each.DistributionAmount.CurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.ExchangeDate 							= InvoiceAmount.ExchangeDate
							invoked.DistributionAmount.CurrencyAmount 							= (each.DistributionAmount.CurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * LocalMultiplier)
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * LocalMultiplier)
							invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
							invoked.DistributionAccount 		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
							invoked.GLTJournalizeGroup											= GLTJournalizeGroup
							invoked.BypassActiveCodeBlockEdit 	= true	
							invoked.BypassProjectDateEdit 		= true
							invoked.BypassStructureRelationEdit = true
				else
					BackgroundProcessing = BackgroundProcessing.CreateAccrualOffset

					invoke CreateAccrualOffsetBackground PayablesInvoiceDistribution
						invoked.PrmPayablesCompany	= Company
						invoked.PrmPayablesInvoice	= PayablesInvoice
						invoked.PrmGLTJournalizeGroup	= GLTJournalizeGroup



		CreateAccrualOffsetForRetainageInvoice

			if (LocalReverseAccrual)	
				LocalMultiplier = 1
			else
				LocalMultiplier = -1

			if  (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
			or  InvoiceType.Prepayment 		
			or  InvoiceType.MatchPrepayment)
				for each PayablesInvoicePaymentRel
					invoke Create PayablesInvoiceDistribution
						invoked.Company						= Company
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.GLTPostingDate				= DistributionDate
						invoked.GLTTransactionDate			= InvoiceDate
						invoked.DistributionType 			= "A"
						if (!MatchProcessType.Expense
						and  MatchPrepayment
						and  UnpostedDistributionsRel exists)
							invoked.Status                  = 1
						else
						if (action = "UpdateAfterMatch"				
						or  action = "UpdateAfterMatchPart2")		
							invoked.Status                  = 1		
						else										
						if ((OriginatingInterfaceRun	entered		
						and  HasHistoricalExpenseDistributions)		
						or   Status.Historical)						
							invoked.Status					= 9		
						else										
							invoked.Status					= 1
						invoked.DistributionDate												= DistributionDate
						invoked.GLTransactionAmount  	  				    					= each.PaymentAmount.CurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ExchangeDate									= InvoiceAmount.ExchangeDate 
						invoked.DistributionAmount.CurrencyAmount								= each.PaymentAmount.CurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= each.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		= each.PaymentAmount.AlternateAmount.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= each.PaymentAmount.AlternateAmount2.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= each.PaymentAmount.AlternateAmount3.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount		= each.PaymentAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= each.PaymentAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount		= each.PaymentAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount		= each.PaymentAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount			= each.PaymentAmount.ProjectAmount.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount			= each.PaymentAmount.ReportAmount1.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount			= each.PaymentAmount.ReportAmount2.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount			= each.PaymentAmount.ReportAmount3.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount			= each.PaymentAmount.ReportAmount4.EnteredCurrencyAmount * LocalMultiplier
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount			= each.PaymentAmount.ReportAmount5.EnteredCurrencyAmount * LocalMultiplier
						invoked.GLFinanceCodeBlock												= each.AccrualCodeDetailRel.DistributionAccount
						invoked.DistributionAccount												= each.AccrualCodeDetailRel.DistributionAccount
						invoked.AccrualCode 													= each.AccrualCode 
						invoked.Retainage 				 										= each.RetainagePayment   
						invoked.BypassActiveCodeBlockEdit 	= true		
						invoked.BypassProjectDateEdit 		= true
						invoked.BypassStructureRelationEdit = true
			else
				for each PayablesInvoiceDistributionsAndNonTableTaxDistributionsRel  
					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
					if (each.Retainage)
					    LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock			= RetainageAccrualCodeDetailRel.DistributionAccount
					else
					    LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock			= PayablesAccrualCodeDetailRel.DistributionAccount
					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

					invoke Create PayablesInvoiceDistribution
						invoked.Company = Company
						invoked.PayablesInvoice = PayablesInvoice
						invoked.GLTPostingDate = DistributionDate
						invoked.GLTTransactionDate = InvoiceDate
						invoked.DistributionType = "A"
						if (!MatchProcessType.Expense
						and  MatchPrepayment
						and  UnpostedDistributionsRel exists)
							invoked.Status                  = 1
						else
						if (action = "UpdateAfterMatch"				
						or  action = "UpdateAfterMatchPart2")		
							invoked.Status                  = 1		
						else										
						if ((OriginatingInterfaceRun	entered		
						and  HasHistoricalExpenseDistributions)		
						or   Status.Historical)						
							invoked.Status					= 9		
						else										
							invoked.Status = 1
						invoked.GLTransactionAmount = (each.DistributionAmount.CurrencyAmount * -1)
						invoked.DistributionAmount.ExchangeDate = InvoiceAmount.ExchangeDate
						invoked.DistributionAmount.CurrencyAmount = (each.DistributionAmount.CurrencyAmount * -1)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount = (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
						invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.DistributionAccount 		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
						invoked.AccrualCode 				= each.AccrualCode
						invoked.Retainage 				 	= each.Retainage  
						invoked.BypassActiveCodeBlockEdit 	= true 		
						invoked.BypassProjectDateEdit 		= true
						invoked.BypassStructureRelationEdit = true








		CreateTaxAccrualOffset

			if  (!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
			or  InvoiceType.Prepayment 
			or  InvoiceType.MatchPrepayment
			or  LocalReallocate)

				invoke CreateAccrualOffset PayablesInvoiceDistribution	
					assign result to LocalAccrualDistribution
					fill in fields from this instance
						except invoked.TaxCode
						except invoked.TaxableAmount
						except invoked.DistributionAccount
						except invoked.GLFinanceCodeBlock
						except invoked.DistributionCode
						except invoked.AccrualCode			
					invoked.DistributionType 							= "A"
					invoked.GLTransactionAmount  	  				   	= LocalTaxAccrualAmount * -1
					invoked.DistributionAmount.CurrencyAmount		   	= LocalTaxAccrualAmount * -1
					invoked.DistributionAmount.KeepRateOnly				= true
					if (LocalReallocate)
						invoked.GLTPostingDate							= LocalPostDate				
						invoked.DistributionDate						= LocalPostDate
					else
						invoked.DistributionDate						= DistributionDate
					invoked.DistributionAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
					invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalTaxAccrualAmount * -1
					if (!TaxEntityRel.UseTaxCodeAccounts)	
						LocalAccrualCode		= TaxEntityRel.AccrualCode
					else
						if (LocalEntityTaxCodeRel.AccrualCode entered)					
							LocalAccrualCode		= LocalEntityTaxCodeRel.AccrualCode	
						else
							LocalAccrualCode		= EntityTaxCodeRel.AccrualCode
					invoked.AccrualCode				= LocalAccrualCode		
					if (TaxAccrualCodeDetailRel exists)
						invoked.GLFinanceCodeBlock						= TaxAccrualCodeDetailRel.DistributionAccount
						invoked.DistributionAccount						= TaxAccrualCodeDetailRel.DistributionAccount
					else
						invoked.GLFinanceCodeBlock						= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.DistributionAccount						= PayablesAccrualCodeDetailRel.DistributionAccount


					if (TaxAccrualUsesTaxEntity)																	
						LocalTaxCompany = LocalTaxEntity															

						if (OverrideTaxAccrualDetailRel exists)														

							invoked.GLFinanceCodeBlock			= OverrideTaxAccrualDetailRel.DistributionAccount	
							invoked.DistributionAccount			= OverrideTaxAccrualDetailRel.DistributionAccount	
						else																						

							invoked.GLFinanceCodeBlock.ToAccountingEntity	= LocalTaxEntity						
							invoked.DistributionAccount.ToAccountingEntity	= LocalTaxEntity						


					if (!MatchProcessType.Expense
					and  MatchPrepayment
					and  UnpostedDistributionsRel exists)
						invoked.Status                  = 1
					else
					if ((OriginatingInterfaceRun	entered		
					and  HasHistoricalExpenseDistributions)		
					or   Status.Historical)						
						invoked.Status					= 9		
					else										
						invoked.Status					= 1
					invoked.GLTJournalizeGroup							= GLTJournalizeGroup
					if (LocalReallocate)
						invoked.Description								= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription
			else
				initialize LocalCalculatePayablesFinanceStructure
				LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
				LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.ExpenseAccrual
				LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount

				if (!TaxEntityRel.UseTaxCodeAccounts)
					LocalAccrualCode		= TaxEntityRel.AccrualCode
				else
					if (LocalEntityTaxCodeRel.AccrualCode entered)
						LocalAccrualCode		= LocalEntityTaxCodeRel.AccrualCode
					else
						LocalAccrualCode		= EntityTaxCodeRel.AccrualCode
				if (TaxAccrualCodeDetailRel exists)
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock			= TaxAccrualCodeDetailRel.DistributionAccount
				else
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock			= PayablesAccrualCodeDetailRel.DistributionAccount
				if (TaxAccrualUsesTaxEntity)
					LocalTaxCompany = LocalTaxEntity
					if (OverrideTaxAccrualDetailRel exists)
						LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock		= OverrideTaxAccrualDetailRel.DistributionAccount

				LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

				if (TaxAccrualUsesTaxEntity)
					LocalTaxCompany = LocalTaxEntity
					if (OverrideTaxAccrualDetailRel not exists)
						LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity	= LocalTaxEntity

				NegativeFinanceCurrencyAmountGroup = LocalTaxDistributionAmount
				LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation


				invoke CreateAccrualOffset PayablesInvoiceDistribution	
					assign result to LocalAccrualDistribution
					fill in fields from this instance
						except invoked.TaxCode
						except invoked.TaxableAmount
						except invoked.DistributionAccount
						except invoked.GLFinanceCodeBlock
						except invoked.DistributionCode
						except invoked.AccrualCode			
					invoked.DistributionType 			= "A"
					invoked.GLTransactionAmount 		= NegativeFinanceCurrencyAmountGroup.CurrencyAmount
					invoked.DistributionAmount			= NegativeFinanceCurrencyAmountGroup
					invoked.GLFinanceCodeBlock			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.DistributionAccount 		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock
					invoked.BypassActiveCodeBlockEdit 	= true 		
					invoked.BypassProjectDateEdit 		= true
					invoked.BypassStructureRelationEdit = true
					invoked.DistributionAmount.KeepRateOnly				= true

					if (LocalPostDate entered)
						invoked.GLTPostingDate 							= LocalPostDate
						invoked.DistributionDate						= LocalPostDate
					else
						invoked.GLTPostingDate 							= DistributionDate
						invoked.DistributionDate						= DistributionDate

					invoked.DistributionAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 

					if (!MatchProcessType.Expense
					and  MatchPrepayment
					and  UnpostedDistributionsRel exists)
						invoked.Status                  = 1
					else
					if ((OriginatingInterfaceRun	entered		
					and  HasHistoricalExpenseDistributions)		
					or   Status.Historical)						
						invoked.Status					= 9		
					else										
						invoked.Status					= 1
					invoked.GLTJournalizeGroup							= GLTJournalizeGroup







		CreateAccruedWithholdingDistributions

			if (AccruedPayablesInvoiceWithholdingRel exists and !old Status.Amended) 	
				for each distinct CategoryAndCode in AccruedPayablesInvoiceWithholdingRel
					LocalWithholdingCategory	= each.WithholdingCategory
					LocalWithholdingCode		= each.IncomeWithholdingCode

					LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyRate
					LocalWithholdingAmount.AlternateAmount.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyRate
					LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyRate
					LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyRate
					LocalWithholdingAmount.ReportAmount1.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyRate
					LocalWithholdingAmount.ReportAmount2.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyRate
					LocalWithholdingAmount.ReportAmount3.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyRate
					LocalWithholdingAmount.ReportAmount4.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyRate
					LocalWithholdingAmount.ReportAmount5.EnteredCurrencyRate			= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyRate
					LocalWithholdingAmount.CurrencyAmount								= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.CurrencyAmount
					LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
					LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount		= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount			= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
					LocalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount			= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
					LocalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount			= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
					LocalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount			= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
					LocalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount			= sum PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyAmount

					LocalTotalWithholdingAmount.FunctionalAmount.EnteredCurrencyRate	= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyRate
					LocalTotalWithholdingAmount.AlternateAmount.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyRate
					LocalTotalWithholdingAmount.AlternateAmount2.EnteredCurrencyRate	= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyRate
					LocalTotalWithholdingAmount.AlternateAmount3.EnteredCurrencyRate	= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyRate
					LocalTotalWithholdingAmount.ReportAmount1.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyRate
					LocalTotalWithholdingAmount.ReportAmount2.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyRate
					LocalTotalWithholdingAmount.ReportAmount3.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyRate
					LocalTotalWithholdingAmount.ReportAmount4.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyRate
					LocalTotalWithholdingAmount.ReportAmount5.EnteredCurrencyRate		= first PayablesInvoiceWithholdingByCodeRel.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyRate
					LocalTotalWithholdingAmount.CurrencyAmount							+= LocalWithholdingAmount.CurrencyAmount
					LocalTotalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount	+= LocalWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount	+= LocalWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount	+= LocalWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount	+= LocalWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
					LocalTotalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalWithholdingAmount.ReportAmount5.EnteredCurrencyAmount

					if (LocalWithholdingAmount.CurrencyAmount entered)
						NegativeFinanceCurrencyAmountGroup = LocalWithholdingAmount
						LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

						invoke CreateFromBatchNoParms PayablesInvoiceDistribution
							invoked.CreateAlternateGLTransDetail	= true
							invoked.GLTPostingDate				= DistributionDate
							invoked.DistributionDate			= DistributionDate
							invoked.GLTGeneralLedgerEvent		= "AD"
							invoked.DistributionAmount			= NegativeFinanceCurrencyAmountGroup
							invoked.GLTTransactionDate			= InvoiceDate
							invoked.Company						= Company
							invoked.GLTCurrencyCode				= InvoiceCurrency
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.DistributionType 			= "I"
							invoked.PostingOption				= "S"
							invoked.Status						= 1
							invoked.InvoiceCurrency				= InvoiceCurrency
							invoked.DistributionAmount.ExchangeDate			= InvoiceDate
							invoked.DistributionAmount.KeepRateAndAmount	= true
							invoked.GLFinanceCodeBlock			= first PayablesInvoiceWithholdingByCodeRel.WithholdingDistributionAccount
							invoked.GLTTransactionCodeBlock		= first PayablesInvoiceWithholdingByCodeRel.WithholdingDistributionAccount
							invoked.DistributionAccount			= first PayablesInvoiceWithholdingByCodeRel.WithholdingDistributionAccount
							invoked.GLTJournalizeGroup			= GLTJournalizeGroup
							invoked.BypassActiveCodeBlockEdit 	= true		

				if (LocalTotalWithholdingAmount.CurrencyAmount entered)
					invoke CreateFromBatchNoParms PayablesInvoiceDistribution
						invoked.CreateAlternateGLTransDetail	= true
						invoked.GLTPostingDate				= DistributionDate
						invoked.DistributionDate			= DistributionDate
						invoked.GLTGeneralLedgerEvent		= "AC"
						invoked.DistributionAmount			= LocalTotalWithholdingAmount
						invoked.GLTTransactionDate			= InvoiceDate
						invoked.Company						= Company
						invoked.GLTCurrencyCode				= InvoiceCurrency
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.DistributionType 			= "A"
						invoked.PostingOption				= "S"
						invoked.Status						= 1
						invoked.InvoiceCurrency				= InvoiceCurrency
						invoked.DistributionAmount.ExchangeDate			= InvoiceDate
						invoked.DistributionAmount.KeepRateAndAmount	= true
						invoked.GLFinanceCodeBlock			= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.GLTTransactionCodeBlock		= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.DistributionAccount			= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.GLTJournalizeGroup			= GLTJournalizeGroup
						invoked.BypassActiveCodeBlockEdit 	= true		





		AutoPopulateTaxableAndTaxAmounts		
			if (TaxableAmount !entered)
				TaxableAmount = PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount
			if (TaxAmount !entered)
				TaxAmount = PayablesInvoiceTaxRel.TotalInvoicedTaxAmount


		EditsForReleaseInstanceAction			





			if (MatchProcessType.Expense) 
				include AutoPopulateTaxableAndTaxAmounts		

			invoke Purge PayablesInvoiceError set














			constraint (MatchProcessType.Expense)
				"CannotReleaseMatchInvoice,MustPerformMatch"            
			constraint (MatchProcessType.Expense
			or			MatchProcessType not entered)
				"CannotReleaseMatchInvoice,MustPerformMatch"            
			constraint (PayablesAccrualCodeDetailRel exists)		
				"CannotRelease;AccrualCodeDistributionDetailNotSetup"
			constraint (PayablesAccrualCodeDetailRel.Active)		
				"CannotRelease;AccrualCodeDetailNotActive"
			constraint (DueDate entered)  
				"DueDateIsRequired"
			constraint (!BudgetEditInProgress)		
				"CannotRelease;BudgetEditInProgress"
			constraint (!OneSourceServerErrorsExist)									
				"CannotRelease;TaxSystemCommunicationError.ContactSystemAdministrator"	
			constraint (PayablesAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity = Company.AccountingEntity)		
				"AccountingEntity<PayablesAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity>OnAccrualCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"
			constraint (PayablesDiscountCodeDetailRel exists)							
				"PayablesDiscountCodeDetailDoesNotExist"
			constraint (PayablesDiscountCodeDetailRel.DiscountAccount.ToAccountingEntity = Company.AccountingEntity)		
				"AccountingEntity<PayablesDiscountCodeDetailRel.DiscountAccount.ToAccountingEntity>OnDiscountCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"
			if (IncomeWithholdingCode entered)
				constraint (IncomeWithholdingCodeDetailRel.WithholdingAccount.ToAccountingEntity = Company.AccountingEntity)		
					"AccountingEntity<IncomeWithholdingCodeDetailRel.WithholdingAccount.ToAccountingEntity>OnIncomeWithholdingCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"
			if (RetainageAccrualCode entered)
				constraint (RetainageAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity = Company.AccountingEntity)		
					"AccountingEntity<RetainageAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity>OnRetainageAccrualCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"
			if (BankTransactionCode.PaymentOutputOption.ElectronicFile
			or  BankTransactionCode.PaymentOutputOption.Swift
			or  BankTransactionCode.PaymentOutputOption.WireTransfer)	
				constraint ((PayVendor.BankEntity 			entered
				and			 PayVendor.BankAccountNumber 	entered)
				or			(RemitToCode.BankEntity			entered		
				and   		 RemitToCode.BankAccountNumber	entered))
					"BankEntityAndBankAccountNumberRequiredOnPayVendor<PayVendor>ForInvoicesSetUpForElectronicPayment"
				if (PayVendor.BankEntity 		entered)
					constraint (PayVendor.BankAccountType 		entered) 	
						"BankAccountTypeRequiredOnVendor<PayVendor>ForElectronicPayment"
				else
				if (RemitToCode.BankEntity 		entered)
					constraint (RemitToCode.BankAccountType 	entered) 	
						"BankAccountTypeRequiredOnRemitLocation<RemitToCode>ForElectronicPayment"
			if  (BankTransactionCode.BankTransactionType.CashPayment
			and !BankTransactionCode.PaymentOutputOption.NoOutput)
				include CashPaymentFormatEdits	
			if (IsUpdateRecurringDetails)
				invoke UpdateRecurringInvoice
					invoked.NumberOfRecurrences = NumberOfRecurringInvoices
					invoked.RecurrenceFrequency = RecurringFrequency
			if (RetainageAccrualCode entered)
				constraint (RetainageAccrualCodeDetailRel exists)	
					"CannotRelease;RetainageAccrualDistributionDetailNotSetup"
				constraint (RetainageAccrualCodeDetailRel.Active)	
					"CannotRelease;RetainageAccrualCodeDetailNotActive"
			if (TaxEntityRel.UseTaxCodeAccounts
			and	(Company.TaxToleranceAmount entered
			or   Company.TaxTolerancePercent entered))
				constraint (Company.TaxRoundingAccount entered)
					"TaxRoundingAccountNotSetForCompany"                   
			if (IsNotPrepayment)				







				constraint (!ExpenseAmountOutOfBalance)		
					"CannotRelease,_InvoiceIsOutOfBalance.Vendor:<Vendor>;_Invoice:<Invoice>"		
			else
				constraint (!PaymentAmountOutOfBalance)
					"PaymentsForInvoice:<Invoice>;_Vendor<Vendor>IsOutOfBalance"		  
				if (TaxEntityUsesInforTax		
				and TaxCode entered)												
					constraint (TaxCode.DerivedTaxPoint = "P")						
						"TaxCode<TaxCode>MustHave_\Tax_\PointOf_\PaymentFor_\Prepayments.CurrentlyIs<TaxCode.DerivedTaxPoint>."	
			if (TaxEntityRel.TaxableAmountEdit
			and MatchProcessType.Expense
			and !TaxEntityUsesThirdPartyTax)		
				constraint (TaxableOutOfBalanceAmount = 0)
					"TaxableAmountForInvoice:<Invoice>ForVendor<Vendor>IsOutOfBalanceBy<TaxableOutOfBalanceAmount>"			
			if (DiversityCode entered)
				constraint (DiversityCode.Active)
					"DiversityCodeForInvoice:<Invoice>IsInactive" 									 
			if (NatureOfTransactionCode entered
			or	StatisticalProcedure entered
			or	ShippingMethod entered
			or	UnloadingPort entered
			or	ShipTerm entered)
				constraint (IntrastatHeaderInfoRequired)
					"Intrastat_\HeaderInfoNotRequiredFor_\Invoice"	            
			if (InvoiceType.CreditMemo
			and VendorReturn entered
			and VendorReturnRel exists)
				constraint (VendorReturnRel.ShipmentDate entered)
					"ReturnsNotShippedForVendor<Vendor>;Invoice<Invoice>" 	

			if  (!MatchProcessType.Expense)
				include CheckInvoiceDetailsAndAOCs
				constraint (DetailDistributionsInBalance)
					"InvoiceDetailDistributionsAreOutOfBalance.VerifyPurchaseOrderLineOrContractLineAreEnteredOnCorrespondingDistributions."

			if (!BypassMatch
			and !MatchProcessType.Expense)
				initialize LocalInvoiceDetailTaxDifference
				if (!TaxCode.TaxType.CalculatedRate)
					LocalInvoiceDetailTaxDifference = (TaxAmount - (LocalInvoiceDetailTotalTax + LocalAOCTotalTax + TotalTaxAmount))
				if (LocalInvoiceDetailTaxDifference < 0)
					LocalInvoiceDetailTaxDifference *= -1

			if (MatchPurchaseOrderInvoicesRel exists)
				constraint (PayablesInvoiceDetailRel exists)
					"CannotRelease;NoInvoiceDetailLinesExist"		
				if (TaxAmount != (LocalInvoiceDetailTotalTax + LocalAOCTotalTax + TotalTaxAmount))
					constraint (LocalInvoiceDetailTaxDifference <= DerivedTaxToleranceAmount)
						"CannotRelease;InvoiceTaxIsOutOfBalanceBy<LocalInvoiceDetailTaxDifference>"		
				if (!BypassMatch)
					for each PayablesInvoiceDetailRel
						if  (each.PurchaseOrder entered)
							constraint (each.PurchaseOrderLine.Closed.No)
								"CannotReleaseInvoice<Invoice>;POLineIsClosed"		
			else
				if (DistributionCode not entered
				and !MatchProcessType.Expense)
					if  (TaxAmount entered
					or	InvoiceAmount.CurrencyAmount != MatchAmount + AddOnChargeAmount + TaxAmount + ServiceAmount + LocalInvoiceDetailTaxDifference)
						DoConstraints = true
						include ValidateMatchInvoiceBalanceEdits
				else




					if  (TaxIsOutOfBalance)			
						if (!TaxEntityUsesSabrix
						or  OneSourceTaxIsOutOfBalance)

							if (IsNotPrepayment)
								constraint (InvoiceAmount.CurrencyAmount	= TotalDistributionAmount.TransactionTotal)
									"CannotRelease;Vendor<Vendor>,Invoice<Invoice>HasDistributionsOutOfBalance"		
								if (DerivedTaxMethodInvOrAcc.Invoiced)
									constraint (TaxAmount = RoundedTotalTaxAmount)
										"CannotRelease;Vendor<Vendor>,Invoice<Invoice>HasTaxesOutOfBalance"		

			if (InvoiceType.Invoice
			or  InvoiceType.CreditMemo
			or  InvoiceType.DebitMemo)
				constraint (PayablesInvoiceDistributionRel exists)		
					"CannotRelease;NoDistributionsEntered"

			if (VendorReturn entered
			and ExternalPurchaseOrder not entered)
				ExternalPurchaseOrder = VendorReturnLinesRel.OriginalPurchaseOrder

			if (AllowVendorWithholdingCode)
				constraint (IncomeWithholdingCode entered)
					"VendorWithholdingCodeRequired"

			constraint (!Company.DisplaySecondaryWithholdingWarning)
				"CannotRelease;SecondaryWithholdingSetupIsIncompleteOnPayablesCompany<Company>"

			if (ForIntercompanyBilling) 
				include SubmitForApprovalOrReleaseIntercompanyBillingEdits

			constraint (!InvoiceErrorsExists)
				"CannotRelease;ErrorsExist.SeeErrorsTabForDetails"

			LocalHasAssets = false					
			if (!MatchProcessType.Expense)
				if (MatchPurchaseOrderInvoicesRel exists)
					for each MatchPurchaseOrderInvoicesRel
						if (each.HasAssets)
							LocalHasAssets = true
				else
				if  (first MatchPurchaseOrderInvoicesRel exists
				and  first MatchPurchaseOrderInvoicesRel.HasAssets)
					LocalHasAssets = true
					

			if (Company.VendorGroup.InvoiceNumberEdit.CompanyVendor)		
				if ((Vendor.AllowDuplicateInvoiceByDate					
				or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
				and !LocalHasAssets
				and !IsRecurringInvoice)						
					constraint (!PayablesInvoiceDuplicateInvoiceByDateRel exists)
						"Invoice<Invoice>AlreadyExistsForCompany<Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
				else
					constraint (!PayablesInvoiceDuplicateInvoiceRel exists)
						"Invoice<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"
			else
				if ((Vendor.AllowDuplicateInvoiceByDate					
				or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
				and !LocalHasAssets
				and !IsRecurringInvoice)					
					constraint (!PayablesInvoiceDuplicateInvoiceByVendorByDateRel exists)
						"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorByDateRel.Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
				else
					constraint (!PayablesInvoiceDuplicateInvoiceByVendorRel exists)
						"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"

			if (InvoiceType.Invoice
			and (Vendor.VendorClass.RestrictToOneInvoice
			or  Vendor.RestrictToOneInvoice))
				constraint (PayablesInvoiceMultipleInvoicesPerVendorRel !exists)	
					"VendorOrVendorClassRestrictedToOneInvoice:InvoiceAlreadyExistsForCompany<first PayablesInvoiceMultipleInvoicesPerVendorRel.Company>,Vendor<Vendor>AndInvoice<first PayablesInvoiceMultipleInvoicesPerVendorRel.Invoice>"

			if (IsHSNSACCodeEnabled)
				constraint (PayablesInvoiceDistributionNoHSNSACCodeRel not exists)	
					"HSN_/SACCodeIsRequiredOnAllDistributions"						
			else
				constraint (PayablesInvoiceDistributionHSNSACCodeRel not exists)	
					"CannotEnter_HSN_/SACCodeFlagOnAnyDistributions"				

			constraint (PayablesInvoiceDistributionAssetDetailEditRel not exists)	
				"AssetDetailsAreMissingFromAssetDistribution(s)"					

			constraint (!InvoiceIsOnTaxToleranceHold)				
				"InvoiceIsOn_\Tax_\ToleranceHold;CannotRelease"		

			if (CashCode.EditAvailableFunds
			or  CashCode.RestrictedFunds)
				include PerformFundAmountEdit
				constraint (ExceedesCashCodeFundBalanceRel !exists)
					"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"

#ifdef module cam
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
				include PerformCustodialAccountEdit
				constraint (ExceedsCustodialAccountBalanceRel !exists)
					"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif
			if (RequireRemitTo)										
				constraint (RemitToCode entered)
					"Field_\Remit_\To_\LocationIsRequiredBySetup"






		MassInvoiceReleaseEdits





			if (MatchProcessType.Expense) 
				include AutoPopulateTaxableAndTaxAmounts		

			invoke Purge PayablesInvoiceError set


















			if (PayablesAccrualCodeDetailRel not exists)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 35	//"CannotRelease;AccrualCodeDistributionDetailNotSetup"

			if (!PayablesAccrualCodeDetailRel.Active)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 36	//"CannotRelease;AccrualCodeDetailNotActive"
	
			if (PayablesAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity != Company.AccountingEntity)		
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 2		
					invoked.ErrorType		= 53	//"IncorrectAccountingEntityOnAccrualCode"
			if (PayablesDiscountCodeDetailRel not exists)																	
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 72	//"PayablesDiscountCodeDetailDoesNotExist"
			else
			if (PayablesDiscountCodeDetailRel.DiscountAccount.ToAccountingEntity != Company.AccountingEntity)		
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 2		
					invoked.ErrorType		= 54	//"IncorrectAccountingEntityOnDiscountCode"
			if (IncomeWithholdingCode entered
			and IncomeWithholdingCodeDetailRel.WithholdingAccount.ToAccountingEntity != Company.AccountingEntity)		
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 2		
					invoked.ErrorType		= 55	//"IncorrectAccountingEntityOnIncomeWithholdingCode"
			if (RetainageAccrualCode entered
			and RetainageAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity != Company.AccountingEntity)		
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 2		
					invoked.ErrorType		= 56	//"IncorrectAccountingEntityOnRetainageAccrualCode"

			if (BankTransactionCode.PaymentOutputOption.ElectronicFile
			or	BankTransactionCode.PaymentOutputOption.Swift
			or  BankTransactionCode.PaymentOutputOption.WireTransfer)	
				if (PayVendor.BankEntity 		not entered
				and RemitToCode.BankEntity 		not entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 37	//"BankEntityRequiredForElectronicPayment"
				if ((RemitToCode.BankEntity 			entered
				and  RemitToCode.BankAccountNumber 	not entered
				and (PayVendor.BankEntity 			not entered
				or   PayVendor.BankAccountNumber 	not entered))
				or  (PayVendor.BankEntity 				entered
				and  PayVendor.BankAccountNumber 	not entered
				and (RemitToCode.BankEntity 		not entered
				or   RemitToCode.BankAccountNumber	not entered)))
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 38	//"BankAccountNumberRequiredForElectronicPayment"
				if ((RemitToCode.BankEntity 			entered
				and  RemitToCode.BankAccountNumber 		entered
				and  RemitToCode.BankAccountType 	not entered
				and (PayVendor.BankEntity 			not entered
				or   PayVendor.BankAccountNumber 	not entered
				or   PayVendor.BankAccountType 		not entered))
				or  (PayVendor.BankEntity 				entered
				and  PayVendor.BankAccountNumber 		entered
				and  PayVendor.BankAccountType 		not entered
				and (RemitToCode.BankEntity 		not entered
				or   RemitToCode.BankAccountNumber 	not entered
				or   RemitToCode.BankAccountType 	not entered)))
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 39	//"BankAccountTypeRequiredForElectronicPayment"

			if  (BankTransactionCode.BankTransactionType.CashPayment
			and !BankTransactionCode.PaymentOutputOption.NoOutput)
				initialize ValidateCashPaymentFormat
				ValidateCashPaymentFormat.VendorGroup			= Company.VendorGroup
				ValidateCashPaymentFormat.BankTransactionCode 	= BankTransactionCode
				ValidateCashPaymentFormat.CashCode				= CashCode
				ValidateCashPaymentFormat.PayablesProcessGroup	= Vendor.PayablesProcessGroup
				LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat	
				if (ValidateCashPaymentFormat.OutputErrorNumber entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 60	//"CashPaymentFormatDoesNotExist"
				else
					if (ValidateCashPaymentFormat.OutputCashPaymentFormat.PaymentFormat.AchFile)
						if (PayVendor.BankEntity 	entered)
							if (!PayVendor.BankAccountType.Checking
							and	!PayVendor.BankAccountType.Savings
							and	!PayVendor.BankAccountType.IBAN)	
								invoke Create PayablesInvoiceError set
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 61	//"BankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat"
						else
						if (RemitToCode.BankEntity 	entered)
							if (!RemitToCode.BankAccountType.Checking
							and !RemitToCode.BankAccountType.Savings
							and	!RemitToCode.BankAccountType.IBAN)	
								invoke Create PayablesInvoiceError set
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 61	//"BankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat"

			if (IsUpdateRecurringDetails)
				invoke UpdateRecurringInvoice
					invoked.NumberOfRecurrences = NumberOfRecurringInvoices
					invoked.RecurrenceFrequency = RecurringFrequency

			if (RetainageAccrualCode entered)
				if (RetainageAccrualCodeDetailRel not exists)	
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 40	//"RetainageAccrualDistributionDetailNotSetup"
				if (!RetainageAccrualCodeDetailRel.Active)	
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 41	//"RetainageAccrualCodeDetailNotActive"

			if (TaxEntityRel.UseTaxCodeAccounts
			and	(Company.TaxToleranceAmount entered
			or   Company.TaxTolerancePercent entered)
			and Company.TaxRoundingAccount not entered)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 42	//"TaxRoundingAccountNotSetForCompany"	


			if (IsNotPrepayment)				
				if (ExpenseAmountOutOfBalance)		

					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 23	//"InvoiceIsOutOfBalance"
			else
				if (PaymentAmountOutOfBalance)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 33	//"PaymentIsOutOfBalance"


			if (TaxEntityRel.TaxableAmountEdit

			and  TaxAmountOutOfBalance
			and !TaxEntityUsesThirdPartyTax			
			and MatchProcessType.Expense)

				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 31	//"TaxAmountIsOutOfBalance"

			if  (DiversityCode entered
			and !DiversityCode.Active)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 43	//"DiversityCodeNotActive"

			if ((NatureOfTransactionCode entered
			or	 StatisticalProcedure entered
			or	 ShippingMethod entered
			or	 UnloadingPort entered
			or	 ShipTerm entered)
			and !IntrastatHeaderInfoRequired)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 44	//"IntrastatHeaderInformationNotAllowed"

			if (InvoiceType.CreditMemo
			and VendorReturn entered
			and VendorReturnRel exists
			and VendorReturnRel.ShipmentDate not entered)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 45	//"VendorReturnsNotShipped"

			if  (!MatchProcessType.Expense)
				include CheckInvoiceDetailsAndAOCs

			if  (!BypassMatch
			and  !MatchProcessType.Expense)
				include CheckInvoiceDetailsAndAOCs
				if (!DetailDistributionsInBalance)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 46	//"DetailDistributionsOutOfBalance"

				initialize LocalInvoiceDetailTaxDifference
				if (!TaxCode.TaxType.CalculatedRate)
					LocalInvoiceDetailTaxDifference = (TaxAmount - (LocalInvoiceDetailTotalTax + LocalAOCTotalTax + TotalTaxAmount))
				if (LocalInvoiceDetailTaxDifference < 0)
					LocalInvoiceDetailTaxDifference *= -1

			if  (MatchPurchaseOrderInvoicesRel exists)

				if  (!MatchProcessType.Expense
				and  !MatchPrepaymentMethod.PrepayFromInvoice
				and  !IsPOCancel
				and  !HasInvoiceLines
				and  !AddOnChargeExists)
					LocalBoolean = false
					initialize LocalCounter
					while (LocalCounter < 6)
						LocalCounter += 1
						if (RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[LocalCounter].InvoiceMatchLevel.InvoiceMatch)
							LocalBoolean = true
                            
					if (!LocalBoolean)
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass	= 2		
							invoked.ErrorType	= 47	

				if  (!TaxEntityRel.ThirdParty.Sabrix
				and  !CallVertexByDocument 
				and !MatchProcessType.Expense)
					if  (!DerivedMatchInvoiceInBalanceWithinTolerance)

						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 26	
					
					LocalInvoiceDetailTaxDifference = TaxAmount - (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount)
					if  (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount + DerivedMatchAdditionalTax != TaxAmount
					and  LocalInvoiceDetailTaxDifference > DerivedTaxToleranceAmount
					and !MatchPrepaymentMethod.PrepayFromInvoice)




						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 31	//"TaxOutOfBalance"

				if (!BypassMatch
				and !InvoiceType.CreditMemo)
					for each PayablesInvoiceDetailRel
						if  (each.PurchaseOrder entered
						and !each.PurchaseOrderLine.Closed.No)
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass		= 1		
								invoked.ErrorType		= 48	//"POLineIsClosed"
			else
				if (DistributionCode not entered
				and !MatchProcessType.Expense)
					if  (!DerivedMatchInvoiceInBalanceWithinTolerance)

						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 26	
				else

					LocalTaxDifference = TaxAmount - RoundedTotalTaxAmount
					if (LocalTaxDifference < 0)
						LocalTaxDifference *= -1


					if  (IsNotPrepayment)




						if  ((InvoiceAmount.CurrencyAmount	!= TotalDistributionAmount.TransactionTotal
						or    TaxAmount						!= RoundedTotalTaxAmount)
						and  ExpenseTaxIsOutOfBalance		
						and  (TotalTaxAmount not entered
						or    LocalTaxDifference > DerivedTaxToleranceAmount))

							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass		= 1		
								invoked.ErrorType		= 31	//"TaxOutOfBalance"

			if (MatchProcessType.Expense
			and IsNotPrepayment)								
				if (!PayablesInvoiceDistributionRel exists)		
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 19	//"MissingDistribution"

			if (VendorReturn entered
			and ExternalPurchaseOrder not entered)
				ExternalPurchaseOrder = VendorReturnLinesRel.OriginalPurchaseOrder

			if (AllowVendorWithholdingCode
			and IncomeWithholdingCode not entered)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 50	//"MissingVendorWithholdingCode"

			if (Company.DisplaySecondaryWithholdingWarning)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 52	//"SecondaryWithholdingSetupIsIncomplete"

			if (ForIntercompanyBilling
			and !IntercompanyBillingTransactionRel exists)
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 51	//"MissingIntercompanyBillingDistributions"

			if  (not InvoiceCurrency = Company.Currency
			and  ForIntercompanyBilling
			and  (ReceivableCompanyRel.UseBillFromFunctionalCurrency.Yes
			or   (ReceivableCompanyRel.UseBillFromFunctionalCurrency.UseIntercompanyBillingGroupValue
			and   IntercompanyBillingGroupRel.UseBillFromFunctionalCurrency)))
				invoke Create PayablesInvoiceError set
					invoked.ErrorLevel 		= 1		
					invoked.ErrorClass 		= 2		
					invoked.ErrorType		= 59	//"InvoiceSetForIntercompanyBillingAndRequiresInvoiceCurrency<InvoiceCurrency>ToBeInCompanyFunctionalCurrency<Company.Currency>"

			if (ForIntercompanyBilling) 
				for each distinct ToCompany in IntercompanyBillingTransactionRel
					LocalICBillToCompany = each.ToCompany
					if (sum IntercompanyBillingBillToCompanyTransactionRel.TransactionAmount = 0)
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 2		
							invoked.ErrorType		= 73	//"SumOfIntercompanyBillingBillToCompany<LocalICBillToCompany>DistributionAmountsEqualsZero;MustSumToANonZeroAmount"

			if (IsHSNSACCodeEnabled)												
				if (PayablesInvoiceDistributionNoHSNSACCodeRel exists)				
					invoke Create PayablesInvoice.PayablesInvoiceError set			
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 63	//"HSN_/SACCodeIsRequired"	
			else																	
				if (PayablesInvoiceDistributionHSNSACCodeRel exists)				
					invoke Create PayablesInvoice.PayablesInvoiceError set			
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 64	//"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGeneralLedgerCompany"

			if (PayablesInvoiceDistributionAssetDetailEditRel exists)				
				invoke Create PayablesInvoice.PayablesInvoiceError set				
					invoked.ErrorLevel		= 1		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 62	//"AssetDetailsAreMissing"		

			if (InvoiceIsOnTaxToleranceHold)										
				invoke Create PayablesInvoiceError set				
					invoked.ErrorLevel		= 2		
					invoked.ErrorClass		= 1		
					invoked.ErrorType		= 68	//"InvoiceIsOnTaxToleranceHold"	

				if (Status.Unreleased													
				and Company.PutOutOfToleranceOnHold										
				and TaxAmount entered													
				and TaxAmount != PayablesInvoiceTaxRel.TaxSystemTaxAmount)				
					invoke Create PayablesInvoiceError set								
						invoked.ErrorLevel		= 2		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 69	//"InvoiceOutsideTaxTolerance"	

			LocalHasAssets = false					
			if (!MatchProcessType.Expense)
				if (MatchPurchaseOrderInvoicesRel exists)
					for each MatchPurchaseOrderInvoicesRel
						if (each.HasAssets)
							LocalHasAssets = true
				else
				if  (first MatchPurchaseOrderInvoicesRel exists
				and first MatchPurchaseOrderInvoicesRel.HasAssets)
					LocalHasAssets = true
					

			if (Company.VendorGroup.InvoiceNumberEdit.CompanyVendor)		
				if ((Vendor.AllowDuplicateInvoiceByDate						
				or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
				and !LocalHasAssets
				and !IsRecurringInvoice)					
					constraint (!PayablesInvoiceDuplicateInvoiceByDateRel exists)
							"Invoice<Invoice>AlreadyExistsForCompany<Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
				else
					constraint (!PayablesInvoiceDuplicateInvoiceRel exists)
						"Invoice<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"
			else
				if ((Vendor.AllowDuplicateInvoiceByDate					
				or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
				and !LocalHasAssets
				and !IsRecurringInvoice)				
					constraint (!PayablesInvoiceDuplicateInvoiceByVendorByDateRel exists)
						"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorByDateRel.Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
				else
					constraint (!PayablesInvoiceDuplicateInvoiceByVendorRel exists)
						"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"

			if (CashCode.EditAvailableFunds
			or  CashCode.RestrictedFunds)
				include PerformFundAmountEdit
				if (ExceedesCashCodeFundBalanceRel exists)
					invoke Create PayablesInvoice.PayablesInvoiceError set
						invoked.ErrorLevel		= 1
						invoked.ErrorClass		= 1
						invoked.ErrorType		= 65	//"FundDistributionsExceededCashAmountAmountAvailableForFund"

#ifdef module cam
			if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
				include PerformCustodialAccountEdit
				if (ExceedsCustodialAccountBalanceRel exists)
					invoke Create PayablesInvoice.PayablesInvoiceError set
						invoked.ErrorLevel		= 1
						invoked.ErrorClass		= 1
						invoked.ErrorType		= 67	//"DistributionsAmountExceedsCashAmountAvailableForTheCustodialAccount"
#endif
			
			if (RequireRemitTo)										
				constraint (RemitToCode entered)
					"Field_\Remit_\To_\LocationIsRequiredBySetup"







		ValidateMatchInvoiceBalanceEdits


			LocalReleaseInvoice = true

			if (InvoiceErrorsExists)
				LocalReleaseInvoice = false

			if (MatchProcessType.AOCOnly)
				if (DoConstraints)
					constraint (AddOnChargeAmount entered)
						"<MatchInvoiceErrorMessages.AddOnChargeOnlyInvoiceRequiresAddOnChargeAmountMsg>"	
				if (AddOnChargeAmount not entered)
					LocalReleaseInvoice = false	

			if  (POTaxAmount entered)
				if (DoConstraints)
					constraint (TaxAmount entered)
						"<MatchInvoiceErrorMessages.TaxAmountRequiredWhenDetailLinesHaveTaxMsg>"
				else
					if (TaxAmount not entered)
						LocalReleaseInvoice = false

			if (ProcessOneSourceValid
			or  ProcessVertexValid)
				NextSentence = true
			else
			if (TaxCode entered)
				CalculateTax.TaxEntity 						= Company.AccountingEntity
				CalculateTax.VendorGrp						= Company.VendorGroup
				CalculateTax.Vendor		 					= Vendor
				CalculateTax.TaxCode						= TaxCode
				CalculateTax.InvoiceDate					= InvoiceDate
				CalculateTax.Function						= CalculateTax.Function.Inquire
				CalculateTax.System							= "AP"
				include LoadVertexGlobalInputFields
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput
				if (DoConstraints)
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>"
				if (CalculateTax.OutputErrorNumber entered)
					LocalReleaseInvoice = false

			if (TaxCode.TaxType.CalculatedRate
			and !TaxAdjustment.Calculate)
				LocalTaxRate							= TaxAmount / TaxableAmount
				for each PayablesInvoiceDetailRel
					if (each.TaxCode entered)
						if (each.TaxableUnitCost entered)
							LocalTaxAmount = (each.TaxableUnitCost * each.MatchedQuantity * LocalTaxRate)
						else
							LocalTaxAmount = (each.TotalDistributionAmount * LocalTaxRate)
						if (LocalTaxAmount > .01)
							if (DoConstraints)
								constraint (each.TaxAmount entered)
									"<MatchInvoiceErrorMessages.APBI108>"
							if (each.TaxAmount not entered)
								LocalReleaseInvoice = false
				if  (TaxAdjustment.OverrideProductAndAOC
				or   TaxAdjustment.OverrideTaxablePOAndAOC)
					for each PayablesInvoiceAddOnChargeRel
						LocalTaxAmount = (each.TotalDistributionAmount * LocalTaxRate)
						if (each.TaxCode entered)
							if (LocalTaxAmount > .01)
								if (DoConstraints)
									constraint (each.TaxAmount entered)
										"<MatchInvoiceErrorMessages.APBI108>"
								if (each.TaxAmount not entered)
									LocalReleaseInvoice = false

			if (TaxCode.TaxType.CalculatedRate)
				if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")
					initialize LocalSubTotal
					LocalSubTotal += MatchAmount
					LocalSubTotal += AddOnChargeAmount
					LocalSubTotal += DerivedMatchAdditionalDistributionsAmount 
					LocalSubTotal += ServiceAmount
					if (DoConstraints)
						constraint (InvoiceAmount.CurrencyAmount = LocalSubTotal)
							"<MatchInvoiceErrorMessages.APBI102>;<InvoiceAmount.CurrencyAmount>v<LocalSubTotal>"	
					if (InvoiceAmount.CurrencyAmount != LocalSubTotal)
						LocalReleaseInvoice = false
				else
					initialize LocalSubTotal
					LocalSubTotal += MatchAmount
					LocalSubTotal += AddOnChargeAmount
					LocalSubTotal += DerivedMatchAdditionalDistributionsAmount 
					LocalSubTotal += ServiceAmount
					LocalSubTotal += TaxAmount
					if (DoConstraints)
						constraint (InvoiceAmount.CurrencyAmount = LocalSubTotal)
							"<MatchInvoiceErrorMessages.APBI101>"
					if (InvoiceAmount.CurrencyAmount != LocalSubTotal)
						LocalReleaseInvoice = false

			if (PayablesInvoiceDetailRel exists
			or  PayablesInvoiceAddOnChargeRel exists)
				if  (DoConstraints)

					constraint (DerivedMatchInvoiceInBalanceWithinTolerance)
						"<MatchInvoiceErrorMessages.APBI101>"

					if  (!TaxEntityRel.ThirdParty.Sabrix
					and  !CallVertexByDocument)
						LocalInvoiceDetailTaxDifference = TaxAmount - (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount)
						if  (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount + DerivedMatchAdditionalTax != TaxAmount)
							constraint (LocalInvoiceDetailTaxDifference <= DerivedTaxToleranceAmount)
								"<MatchInvoiceErrorMessages.APBI101>"
				else
					if (!DerivedMatchInvoiceInBalanceWithinTolerance)
						LocalReleaseInvoice = false

					if  (!TaxEntityRel.ThirdParty.Sabrix
					and  !CallVertexByDocument)
						LocalInvoiceDetailTaxDifference = TaxAmount - (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount)
						if  (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount + DerivedMatchAdditionalTax != TaxAmount
						and  LocalInvoiceDetailTaxDifference > DerivedTaxToleranceAmount)
							LocalReleaseInvoice = false

			else
				if (TaxCode entered)
					if (ProcessOneSourceValid
					or  ProcessVertexValid)
						NextSentence = true
					else
						CalculateTax.TaxEntity				= Company.AccountingEntity
						CalculateTax.TaxCode				= TaxCode
						CalculateTax.Function				= CalculateTax.Function.Inquire
						CalculateTax.System					= "AP"
						include LoadVertexGlobalInputFields
						include DisplayCalculateTaxInput
						LocalCalculateTaxExecuted 			= CalculateTax.ExecuteCalculateTax
						include DisplayCalculateTaxOutput
						if (DoConstraints)
							constraint (CalculateTax.OutputErrorNumber not entered)
								"<CalculateTax.OutputErrorMessage>"
						if (CalculateTax.OutputErrorNumber entered)
							LocalReleaseInvoice = false
					if (CalculateTax.TaxType = "T"
					or  CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "I")
						initialize LocalSubTotal
						LocalSubTotal += MatchAmount
						LocalSubTotal += AddOnChargeAmount
						LocalSubTotal += DerivedMatchAdditionalDistributionsAmount 
						LocalSubTotal += ServiceAmount
						LocalSubTotal += TaxAmount
						LocalSubTotal -= TotalTaxAmount	
						if (DoConstraints)
							constraint (InvoiceAmount.CurrencyAmount = LocalSubTotal)
								"<MatchInvoiceErrorMessages.APBI103>"
						if (InvoiceAmount.CurrencyAmount != LocalSubTotal)
							LocalReleaseInvoice = false
					else
						initialize LocalSubTotal
						LocalSubTotal += MatchAmount
						LocalSubTotal += AddOnChargeAmount
						LocalSubTotal += DerivedMatchAdditionalDistributionsAmount 
						LocalSubTotal += ServiceAmount
						LocalSubTotal += TaxAmount
						LocalSubTotal -= TotalTaxAmount	
						if (DoConstraints)
							constraint (InvoiceAmount.CurrencyAmount = LocalSubTotal)
								"<MatchInvoiceErrorMessages.APBI103>"
						if (InvoiceAmount.CurrencyAmount != LocalSubTotal)
							LocalReleaseInvoice = false
				else
					if (TaxAmount entered)
						initialize LocalSubTotal
						LocalSubTotal += MatchAmount
						LocalSubTotal += AddOnChargeAmount
						LocalSubTotal += DerivedMatchAdditionalDistributionsAmount 
						LocalSubTotal += ServiceAmount
						LocalSubTotal += TaxAmount
						LocalSubTotal -= TotalTaxAmount	
						if (DoConstraints)
							constraint (InvoiceAmount.CurrencyAmount = LocalSubTotal)
								"<MatchInvoiceErrorMessages.APBI103>"
						if (InvoiceAmount.CurrencyAmount != LocalSubTotal)
							LocalReleaseInvoice = false
					else
						initialize LocalSubTotal
						LocalSubTotal += MatchAmount
						LocalSubTotal += AddOnChargeAmount
						LocalSubTotal += DerivedMatchAdditionalDistributionsAmount 
						LocalSubTotal += ServiceAmount
						LocalSubTotal += POTaxAmount
						if  ((DoOneSourceAfter
						or   CallVertexByDocument)
						and  MatchOneSourceAccruedTax)
							LocalSubTotal -= POTaxAmount
						if (InvoiceAmount.CurrencyAmount != LocalSubTotal)
							for each PayablesInvoiceSpreadAddOnChargeRel
								LocalSubTotal += each.SpreadDifference
						if (DoConstraints)
							constraint (InvoiceAmount.CurrencyAmount = LocalSubTotal)
								"<MatchInvoiceErrorMessages.APBI104>"
						if (InvoiceAmount.CurrencyAmount != LocalSubTotal)
							LocalReleaseInvoice = false








		PerformBudgetEditsForRelease








			if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess
 				ActionCompleteMessage = BudgetEditsInProgress
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel

				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup           										= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesCompany 	= Company
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesInvoice	= PayablesInvoice
					invoked.PrmMode																= BudgetEditMode.Hard	
					invoked.PrmBusinessClassName												= "PayablesInvoice"
					invoked.PrmEditContext              										= "Release"



					if (initiating action 	= "MassInvoiceRelease"		
					or	initiating action 	= "PayablesInvoiceImport.InterfaceInvoices"						
					or  initiating action 	= "PayablesInvoiceDistributionImport.LoadInterfaceDistributions"
					or  initiating action 	= "DocumentInterfaceInvoice.InterfaceThisInvoice"				
					or  initiating action 	= "DocumentInterfaceInvoice.InterfaceInvoices")					
						invoked.PrmIsBatch	= true						

			else

				if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
				and GLCommitRelExists)

					invoke EditTotalsRoute BudgetTemplateGroupTotal 	
						invoked.PrmFinanceEnterpriseGroup    		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup           		= UniqueID
						invoked.PrmMode								= BudgetEditMode.UpdateOnly
						invoked.PrmBusinessClassName				= "PayablesInvoice"
						invoked.PrmEditContext              		= "Release"



						if (initiating action 	= "MassInvoiceRelease"		
						or	initiating action 	= "PayablesInvoiceImport.InterfaceInvoices"						
						or  initiating action 	= "PayablesInvoiceDistributionImport.LoadInterfaceDistributions"
						or  initiating action 	= "DocumentInterfaceInvoice.InterfaceThisInvoice"				
						or  initiating action 	= "DocumentInterfaceInvoice.InterfaceInvoices")					
							invoked.PrmIsBatch	= true						


				invoke FinalRelease










		PerformBudgetEditsForApproval








			if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel

				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup           										= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesCompany 	= Company
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesInvoice	= PayablesInvoice
					invoked.PrmMode																= BudgetEditMode.Hard	
					invoked.PrmBusinessClassName												= "PayablesInvoice"
					invoked.PrmEditContext              										= "SubmitForApproval"



					if (initiating action 	= "MassInvoiceRelease"		
					or	initiating action 	= "PayablesInvoiceImport.InterfaceInvoices"						
					or  initiating action 	= "PayablesInvoiceDistributionImport.LoadInterfaceDistributions"
					or  initiating action 	= "DocumentInterfaceInvoice.InterfaceThisInvoice"				
					or  initiating action 	= "DocumentInterfaceInvoice.InterfaceInvoices")					
						invoked.PrmIsBatch	= true						

			else

				if (InvoiceType.MatchPrepayment)
					if  (AutoApproved
					or  (!RoutingRuleFound
					and	(APClerkEntered
					or	 ProcessingTeamEntered)))		
						invoke FinalRelease
					else
						if (!Status.PendingApproval)	
							make transition to PendingApproval

				else
				if (!MatchProcessType.Expense)
					if (!ApprovalErrors)	
						if (AutoApproved)
							make transition to Approved
						else
							if (!Status.PendingApproval)	
								make transition to PendingApproval
				else

					if (AutoApproved)
						include CanInvoiceBeReleased

						if (LocalReleaseInvoice)
							invoke FinalRelease
						else

							if (!ApprovalErrors)	
								make transition to Approved

								if  (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
								and  GLCommitRelExists)
									include ReleaseGLCommit
					else

						if (!ApprovalErrors)	
							if (!Status.PendingApproval)	
								make transition to PendingApproval


							if  (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
							and  GLCommitRelExists)

								include ReleaseGLCommit





#ifdef module cam




		PerformCustodialAccountEdit

			if (Status.Amended)											
				invoke InitializeEditAmount CustodialAccountEditRel
			else
				invoke Delete CustodialAccountEditRel

			for each PayablesInvoiceDistributionsCreateAccrualFundAccountingRel


				if (!Status.Amended
				or (Status.Amended
				and each.Status.Unreleased))
					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

					LocalToAccountingEntity		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
					LocalCustodialPosting	=	each.PayablesInvoiceDistribution.DistributionAccount.FinanceDimension10
					if (LocalCustodialPosting entered)
						constraint (CustodialDetailAmountRel exist)
							"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeSetupUnderCustodialAccounts"
						if (Vendor != CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
							constraint (LocalCustodialPosting.Expendable)
								"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Label>:_<LocalCustodialPosting>_MustBeExpendable"
						invoke Update CustodialAccountEditRel2
							invoked.EditAmount += each.DistributionAmount.CurrencyAmount
#endif







		PerformFundAmountEdit
			invoke Delete CashCodeFundEditRel

			for each PayablesInvoiceDistributionsCreateAccrualFundAccountingRel
				initialize LocalCalculatePayablesFinanceStructure
				LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
				LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
				LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
				LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
				LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

				LocalToAccountingEntity		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
					LocalAccountingUnit			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
				else
					LocalFinanceDimension1		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

				if (CashCode.EditAvailableFunds)
					invoke Update CashCodeFundEditByFundRel
						invoked.EditAmount += each.DistributionAmount.CurrencyAmount
				else
					if (CashCodeFundRel !exists)
						invoke Update CashCodeFundEditByFundRel

		PerformAmendedFundAmountEdit
			invoke InitializeEditAmount CashCodeFundEditRel

			for each PayablesInvoiceDistributionsCreateAccrualFundAccountingRel
				if (each.Status.Unreleased)
					initialize LocalCalculatePayablesFinanceStructure
					LocalCalculatePayablesFinanceStructure.InputPayablesCompany					= Company
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoice					= PayablesInvoice
					LocalCalculatePayablesFinanceStructure.InputPayablesInvoiceDistribution		= each.PayablesInvoiceDistribution
					LocalCalculatePayablesFinanceStructure.InputPayablesFinanceStructureType	= PayablesFinanceStructureType.Payment
					LocalCalculatePayablesFinanceStructure.InputFinanceCodeBlock				= PayablesAccrualCodeDetailRel.DistributionAccount
					LocalAnswer = LocalCalculatePayablesFinanceStructure.CalculatePayablesFinanceStructure

					LocalToAccountingEntity		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
						LocalAccountingUnit			= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
					else
						LocalFinanceDimension1		= LocalCalculatePayablesFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

					if (CashCode.EditAvailableFunds)
						invoke Update CashCodeFundEditByFundRel
							invoked.EditAmount += each.DistributionAmount.CurrencyAmount
					else
						if (CashCodeFundRel !exists)
							invoke Update CashCodeFundEditByFundRel






		PerformBudgetEditsForReject			


			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.Track
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
			and  GLCommitRelExists)
				if (!MatchProcessType.Expense		
				and UnreleasedGLCommitRel exists)	
					NextSentence = true				
				else
					invoke EditTotalsRoute BudgetTemplateGroupTotal 	
						invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup          = UniqueID
						invoked.PrmMode						= BudgetEditMode.UpdateOnly
						invoked.PrmBusinessClassName		= "PayablesInvoice"
						invoked.PrmEditContext              = "ManualReject"



						if (initiating action 	= "MassInvoiceRelease"		
						or	initiating action 	= "PayablesInvoiceImport.InterfaceInvoices"						
						or  initiating action 	= "PayablesInvoiceDistributionImport.LoadInterfaceDistributions"
						or  initiating action 	= "DocumentInterfaceInvoice.InterfaceThisInvoice"				
						or  initiating action 	= "DocumentInterfaceInvoice.InterfaceInvoices")					
							invoked.PrmIsBatch	= true						






		ResetFieldsForRestore


			initialize ResponsiblePerson
			initialize ResponsibleTeam
			initialize ResponsibleRole
			initialize InvoiceRoutingCodeGroup			
			initialize InvoiceRoutingCodeGroupLevel		
			initialize RoutingCode						
			initialize RoutingApprovalLevel
			initialize Workunit
			ReassignToPreviousApprover = false			


			invoke UpdateToReleased GLCommit in foreground
				invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				invoked.PrmUniqueID                 = UniqueID
				invoked.PrmAccountingEntity         = GeneralLedgerCompanyRel.AccountingEntity

			invoke RejectInvoice GLCommit
				invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				invoked.PrmUniqueID					= UniqueID
				invoked.PrmAccountingEntity			= Company.AccountingEntity






		PerformBudgetEditsForCancel


			if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
			or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup          = UniqueID
					invoked.PrmMode						= BudgetEditMode.UpdateOnly
					invoked.PrmBusinessClassName		= "PayablesInvoice"
					invoked.PrmEditContext              = "Cancel"



					if (initiating action 	= "MassInvoiceRelease"		
					or	initiating action 	= "PayablesInvoiceImport.InterfaceInvoices"						
					or  initiating action 	= "PayablesInvoiceDistributionImport.LoadInterfaceDistributions"
					or  initiating action 	= "DocumentInterfaceInvoice.InterfaceThisInvoice"				
					or  initiating action 	= "DocumentInterfaceInvoice.InterfaceInvoices")					
						invoked.PrmIsBatch	= true						

				include ReleaseGLCommit







		ReleaseGLCommit


			if (config.UpdateGLCommitInForeground = true
			and instance count of PayablesInvoiceDistributionRel < 20)
				invoke UpdateToReleased GLCommit in foreground
					invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmUniqueID                 = UniqueID
					invoked.PrmAccountingEntity         = GeneralLedgerCompanyRel.AccountingEntity
					if (MatchPrepaymentMethod.EligibleForPrepay
					and Status.Released 
					and (old Status.Unreleased
					or   old Status.PendingApproval
					or   old Status.Approved))
						invoked.PrmDoNotUpdateFES 			= true 
			else
				invoke UpdateToReleased GLCommit in background
					invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmUniqueID                 = UniqueID
					invoked.PrmAccountingEntity         = GeneralLedgerCompanyRel.AccountingEntity
					if (MatchPrepaymentMethod.EligibleForPrepay
					and Status.Released 
					and (old Status.Unreleased
					or   old Status.PendingApproval
					or   old Status.Approved))
						invoked.PrmDoNotUpdateFES 			= true 


		CanInvoiceBeReleased			

			LocalReleaseInvoice = true	


			include MassInvoiceReleaseEdits
			if (InvoiceErrorsExists)
				LocalReleaseInvoice = false







		CanAmendedInvoiceBeReleased

			LocalReleaseInvoice = true	

			invoke Purge PayablesInvoiceError set
			if (!MatchProcessType.Expense)
				if  (!DerivedMatchInvoiceInBalanceWithinTolerance)

					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass	= 2		
						invoked.ErrorType	= 26	

				if  (!MatchInvoiceOutOfBalanceErrorRel exists)
					for each PayablesInvoiceDetailRel
						if (!each.DistributionsInBalance)
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass	= 2		
								invoked.ErrorType	= 46	
						end for each

				if  (!MatchInvoiceOutOfBalanceErrorRel exists)
					for each PayablesInvoiceAddOnChargeRel
						if (!each.DistributionsInBalance)
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass	= 2		
								invoked.ErrorType	= 46	
						end for each
			else
				LocalTaxDifference = TaxAmount - TotalTaxAmount
				if (LocalTaxDifference < 0)
					LocalTaxDifference *= -1

				if  (IsNotPrepayment)
					if  ((InvoiceAmount.CurrencyAmount	!= TotalDistributionAmount.TransactionTotal

					or    TaxAmount						!= PayablesInvoiceTaxRel.TotalInvoicedTaxAmount)	
					and  (TotalTaxAmount not entered
					or    LocalTaxDifference > DerivedTaxToleranceAmount))
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 49	//"DistributionsOutOfBalance"



		GetRoutingRuleValues						


			if (!LocalGetRoutingRuleValueslsDone)

				if (Company.VendorGroup.ProcessRoutingRulesByHierarchy)			
					initialize LocalParentInvoiceRoutingRule
					LocalInvoiceRoutingRule	= first LocalInvoiceRoutingRuleByParentRel.InvoiceRoutingRule		

					if (LocalInvoiceRoutingRule entered)



						LocalRoutingRuleFound			= true
						LocalAutoApprove 				= LocalInvoiceRoutingRuleRel.AutoApprove
						LocalRoutingCode 				= LocalInvoiceRoutingRuleRel.RoutingCode
						LocalInvoiceRoutingCodeGroup	= LocalInvoiceRoutingRuleRel.InvoiceRoutingCodeGroup
						LocalResponsibilityMatrix		= LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix
						if (LocalInvoiceRoutingCodeGroup entered)
							LocalRoutingCodeGroupName	= LocalInvoiceRoutingRuleRel.InvoiceRoutingCodeGroup.Name

						if (LocalInvoiceRoutingRuleRel.InvoiceRoutingRule.HasChild)							
							LocalChildrenExist = true

							while (LocalChildrenExist)														
								LocalParentInvoiceRoutingRule = LocalInvoiceRoutingRule						
								LocalInvoiceRoutingRule	= first LocalInvoiceRoutingRuleByParentRel.InvoiceRoutingRule		

								if (LocalInvoiceRoutingRule entered)
									LocalAutoApprove 				= LocalInvoiceRoutingRuleRel.AutoApprove
									LocalRoutingCode 				= LocalInvoiceRoutingRuleRel.RoutingCode
									LocalInvoiceRoutingCodeGroup	= LocalInvoiceRoutingRuleRel.InvoiceRoutingCodeGroup
									LocalResponsibilityMatrix		= LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix
									if (LocalInvoiceRoutingCodeGroup entered)
										LocalRoutingCodeGroupName	= LocalInvoiceRoutingRuleRel.InvoiceRoutingCodeGroup.Name
									if (!LocalInvoiceRoutingRuleRel.InvoiceRoutingRule.HasChild)			
										LocalChildrenExist	= false
								else
									LocalChildrenExist = false
					else
						LocalRoutingRuleFound			= false

				else
					LocalInvoiceRoutingRule	= first InvoiceRoutingRuleRel.InvoiceRoutingRule



					if (LocalInvoiceRoutingRule entered)



						LocalRoutingRuleFound			= true
						LocalAutoApprove 				= LocalInvoiceRoutingRuleRel.AutoApprove
						LocalRoutingCode 				= LocalInvoiceRoutingRuleRel.RoutingCode
						LocalInvoiceRoutingCodeGroup	= LocalInvoiceRoutingRuleRel.InvoiceRoutingCodeGroup
						LocalResponsibilityMatrix		= LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix
						if (LocalInvoiceRoutingCodeGroup entered)
							LocalRoutingCodeGroupName	= LocalInvoiceRoutingRuleRel.InvoiceRoutingCodeGroup.Name

					else
						LocalRoutingRuleFound			= false


				LocalGetRoutingRuleValueslsDone	= true







		SubmitForApprovalEdits			

			if (TaxEntityRel.UseTaxCodeAccounts
			and	DerivedTaxToleranceAmount entered)
				constraint (Company.TaxRoundingAccount entered)
					"TaxRoundingAccountNotSetForCompany"                   
			if (!Company.VendorGroup.DistributionEntryOnApproval)
				if (IsNotPrepayment)				
					constraint (!ExpenseAmountOutOfBalance)		
						"Company:<Company>,Invoice:<Invoice>ForVendor<Vendor>IsOutOfBalance"		
				else
					constraint (!PaymentAmountOutOfBalance)
						"PaymentsForInvoice:<Invoice>Vendor<Vendor>IsOutOfBalance"		  
			if (!Company.VendorGroup.DistributionEntryOnApproval
			and MatchProcessType.Expense
			and !TaxEntityUsesThirdPartyTax			
			and	TaxEntityRel.TaxableAmountEdit)
				constraint (TaxableOutOfBalanceAmount = 0)
					"TaxableAmountForInvoice:<Invoice>ForVendor<Vendor>IsOutOfBalance"			
			constraint (!Company.DisplaySecondaryWithholdingWarning)
				"CannotSubmitForApproval;SecondaryWithholdingSetupIsIncompleteOnPayablesCompany<Company>"

			constraint (PayablesAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity = Company.AccountingEntity)		
				"AccountingEntity<PayablesAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity>OnAccrualCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"
			constraint (PayablesDiscountCodeDetailRel.DiscountAccount.ToAccountingEntity = Company.AccountingEntity)		
				"AccountingEntity<PayablesDiscountCodeDetailRel.DiscountAccount.ToAccountingEntity>OnDiscountCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"
			if (IncomeWithholdingCode entered)
				constraint (IncomeWithholdingCodeDetailRel.WithholdingAccount.ToAccountingEntity = Company.AccountingEntity)		
					"AccountingEntity<IncomeWithholdingCodeDetailRel.WithholdingAccount.ToAccountingEntity>OnIncomeWithholdingCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"
			if (RetainageAccrualCode entered)
				constraint (RetainageAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity = Company.AccountingEntity)		
					"AccountingEntity<RetainageAccrualCodeDetailRel.DistributionAccount.ToAccountingEntity>OnRetainageAccrualCodeDetail;MustEqualAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany"

			if (DiversityCode entered)
				constraint (DiversityCode.Active)
					"DiversityCodeForInvoice:<Invoice>IsInactive" 									 
			if (NatureOfTransactionCode entered
			or	StatisticalProcedure entered
			or	ShippingMethod entered
			or	UnloadingPort entered
			or	ShipTerm entered)
				constraint (IntrastatHeaderInfoRequired)
					"Intrastat_\HeaderInfoNotRequiredFor_\Inv"	            
			if (InvoiceType.CreditMemo
			and VendorReturn entered
			and VendorReturnRel exists)
				constraint (VendorReturnRel.ShipmentDate entered)
					"ReturnsNotShippedForVendor<Vendor>;Invoice<Invoice>" 	

			if (BankTransactionCode.PaymentOutputOption.ElectronicFile
			or	BankTransactionCode.PaymentOutputOption.Swift
			or  BankTransactionCode.PaymentOutputOption.WireTransfer)	
				constraint (PayVendor.BankEntity 		entered
				or			RemitToCode.BankEntity 		entered)
					"BankEntityRequiredOnPayVendor<PayVendor>OrRemitToLocation<RemitToCode>ForElectronicPayment"

				if (RemitToCode.BankEntity	not entered
				and PayVendor.BankEntity 		entered)
					constraint (PayVendor.BankAccountNumber	entered
					and         PayVendor.BankAccountType		entered)
						"BankEntityAndBankAccountNumberRequiredOnPayVendor<PayVendor>ForInvoicesSetUpForElectronicPayment"
				else
					if (PayVendor.BankEntity	not entered
					and RemitToCode.BankEntity		entered)	
						constraint (RemitToCode.BankAccountNumber	entered
						and         RemitToCode.BankAccountType		entered)
							"BankEntityAndBankAccountNumberRequiredOnRemitToLocation<RemitToCode>ForInvoicesSetUpForElectronicPayment"
					else	
						if  (RemitToCode.BankAccountNumber		not entered
						or   RemitToCode.BankAccountType		not entered)
							constraint	(PayVendor.BankAccountNumber	entered
							and          PayVendor.BankAccountType		entered)
								"BankAccountNumberAndBankAccountTypeRequiredOnPayVendorOrRemitToLocationForElectronicPayment"

			if  (BankTransactionCode.BankTransactionType.CashPayment
			and !BankTransactionCode.PaymentOutputOption.NoOutput)
				include CashPaymentFormatEdits	

			if (VendorReturn entered
			and ExternalPurchaseOrder not entered)
				ExternalPurchaseOrder = VendorReturnLinesRel.OriginalPurchaseOrder

			if (IsUpdateRecurringDetails)
				invoke UpdateRecurringInvoice
					invoked.NumberOfRecurrences = NumberOfRecurringInvoices
					invoked.RecurrenceFrequency = RecurringFrequency
			if (AllowVendorWithholdingCode)
				constraint (IncomeWithholdingCode entered)
					"VendorWithholdingCodeRequired"

			constraint (!ApprovalErrors)							
				"CannotApprove;TaxSystemCommunicationErrorsExist"	






		Messaging






			if (ActionType.CreateType)
				if (Vendor.VendorStatus.Restricted)
					ActionCompleteMessage = APMSG104		//	"RestrictedVendor;InvoiceAdded"
				else
				if (IncomeCode entered
				and Vendor.TaxID not entered)
					ActionCompleteMessage = APMSG200		//	"VendorNeedsTax_\I\D;InvoiceAdded"
				else
				if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
				and MatchProcessType.Expense
				and IsNotPrepayment)
					ActionCompleteMessage = APMSG198 		// "RecordsAdded;DistributionsOutOfBalance"
				else
				if (InvoiceCurrency != CashCode.Currency)
					ActionCompleteMessage = APMSG311		//	"RecordAdded;InvoiceCurrencyNotEqualToCashCodeCurrency"
				else
				if (TotalPaymentAmount.TransactionTotal	!= InvoiceAmount.CurrencyAmount)
					ActionCompleteMessage = APMSG103		//	"InvoiceAdded;PaymentsOutOfBalance"
				else
				if (!MatchProcessType.Expense
				and MatchPrepaymentMethod.PrepayFromInvoice)
					if  (Status.PendingApproval)
						ActionCompleteMessage = InvoiceAddedAndIsPendingApprovalMsg
					else
					if  (Status.Unreleased)
						ActionCompleteMessage = InvoiceAddedDetailCreated
					else
						ActionCompleteMessage = InvoiceAddedAndReleasedMsg
				else
				if (((!MatchProcessType.Expense
				and   !MatchProcessType.AOCOnly)
				or     BypassMatch)
				and   (MultiplePurchaseOrders))
					ActionCompleteMessage = APMSG495		
				else
				if (MatchProcessType.ReceiptMatch
				or  MatchProcessType.Service
				or  MatchProcessType.ServiceContract
				or  MatchProcessType.DropShip)
					if (InvoiceDetailExists)
						ActionCompleteMessage = InvoiceAddedDetailCreated
					else
						ActionCompleteMessage = APMSG547		
				else
				if  (MatchProcessType.DropShip
				and  MatchPurchaseOrderInvoicesRel exists 
				and !MatchPrepaymentMethod.PrepayFromInvoice)
					if (InvoiceDetailExists)
						ActionCompleteMessage = InvoiceAddedDetailCreated
					else
						ActionCompleteMessage = APMSG547		
				else
				if  (MatchProcessType.AOCOnly
				and  MultiplePurchaseOrders)
					ActionCompleteMessage = APMSG495		
				else
				if	(MatchProcessType.AOCOnly
				and  AddOnChargeAmount != (InvoiceAmount.CurrencyAmount - TotalDistributionAmount.TransactionTotal - TaxAmount - TotalTaxAmount))
					if (OtherAddOnChargesTotal entered)
						ActionCompleteMessage = APMSG545		
					else
						ActionCompleteMessage = APMSG546		
				else
				if  (MatchProcessType.ReceiptMatch
				and !MatchPrepaymentMethod.PrepayFromInvoice)
					if (InvoiceDetailExists)
						ActionCompleteMessage = InvoiceAddedDetailCreated
					else
						ActionCompleteMessage = APMSG547		
				else
				if (MatchProcessType.ServiceContract)
					if (InvoiceDetailExists)
						ActionCompleteMessage = InvoiceAddedDetailCreated
					else
						ActionCompleteMessage = APMSG547		
				else
				if (MatchProcessType.Service)
					if (PurchaseOrderLinesRel exists)
						ActionCompleteMessage = APMSG538		
					else
						ActionCompleteMessage = APMSG540		
				else
				if  ((BankTransactionCode.PaymentOutputOption.ElectronicFile
				or	 BankTransactionCode.PaymentOutputOption.Swift
				or   BankTransactionCode.PaymentOutputOption.WireTransfer)	
				and  RemitToCode not entered
				and (PayVendor.BankEntity 			not entered
				or   PayVendor.BankAccountNumber 	not entered
				or   PayVendor.BankAccountType 		not entered))
					ActionCompleteMessage = APMSG106		
				else
				if  ((BankTransactionCode.PaymentOutputOption.ElectronicFile
				or	 BankTransactionCode.PaymentOutputOption.Swift
				or   BankTransactionCode.PaymentOutputOption.WireTransfer)	
				and  RemitToCode entered
				and (RemitToCode.BankEntity 		not entered
				or   RemitToCode.BankAccountNumber 	not entered
				or   RemitToCode.BankAccountType 	not entered)
				and (PayVendor.BankEntity 			not entered		
				or   PayVendor.BankAccountNumber 	not entered		
				or   PayVendor.BankAccountType 		not entered))	
					ActionCompleteMessage = APMSG107		
				else	
				if  (BankTransactionCode.BankTransactionType.CashPayment
				and !BankTransactionCode.PaymentOutputOption.NoOutput)
					initialize ValidateCashPaymentFormat
					ValidateCashPaymentFormat.VendorGroup			= Company.VendorGroup
					ValidateCashPaymentFormat.BankTransactionCode 	= BankTransactionCode
					ValidateCashPaymentFormat.CashCode				= CashCode
					ValidateCashPaymentFormat.PayablesProcessGroup	= Vendor.PayablesProcessGroup
					LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat	
					if (ValidateCashPaymentFormat.OutputErrorNumber entered)
						ActionCompleteMessage = ValidateCashPaymentFormat.OutputErrorMessage	
					else
					if (ValidateCashPaymentFormat.OutputCashPaymentFormat.PaymentFormat.AchFile)
						if (PayVendor.BankEntity 	entered)
							if (!PayVendor.BankAccountType.Checking
							and	!PayVendor.BankAccountType.Savings
							and	!PayVendor.BankAccountType.IBAN)		
								ActionCompleteMessage =	InvoiceAddedBankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat
						else
						if (RemitToCode.BankEntity 	entered)
							if (!RemitToCode.BankAccountType.Checking
							and !RemitToCode.BankAccountType.Savings
							and !RemitToCode.BankAccountType.IBAN)		
								ActionCompleteMessage =	InvoiceAddedBankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat
				else
				if (IncomeWithholdingCode entered
				and IncomeWithholdingCodeDetailRel not exist)
					ActionCompleteMessage = InvoiceAddedIncomeWithholdingCodeDetailNotDefined
				else
				if (VoucherNumber entered)
					ActionCompleteMessage = APMSG410		//	"AddComplete-VoucherNumber=<VoucherNumber>"
				else
					ActionCompleteMessage = AddComplete




			if (ActionType.UpdateType)
				if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
				and MatchProcessType.Expense
				and IsNotPrepayment)
					ActionCompleteMessage = APMSG119 		// "RecordsProcessed;DistributionsOutOfBalance"
				else
				if (TotalPaymentAmount.TransactionTotal != InvoiceAmount.CurrencyAmount)
					ActionCompleteMessage = APMSG120		// "RecordsProcessed;PaymentsOutOfBalance"
				else
				if (Vendor.VendorStatus.Restricted)
					ActionCompleteMessage = APMSG201		// "RestrictedVendor;InvoiceChanged"
				else
				if (IncomeCode entered
				and Vendor.TaxID not entered)
					ActionCompleteMessage = APMSG105		// "VendorNeeds_\Tax_\I\D;InvoiceChanged"
				else
				if  ((BankTransactionCode.PaymentOutputOption.ElectronicFile
				or	 BankTransactionCode.PaymentOutputOption.Swift
				or   BankTransactionCode.PaymentOutputOption.WireTransfer)	
				and  RemitToCode not entered
				and (PayVendor.BankEntity 			not entered
				or   PayVendor.BankAccountNumber 	not entered
				or   PayVendor.BankAccountType 		not entered))
					ActionCompleteMessage = APMSG108		
				else
				if  ((BankTransactionCode.PaymentOutputOption.ElectronicFile
				or	 BankTransactionCode.PaymentOutputOption.Swift
				or   BankTransactionCode.PaymentOutputOption.WireTransfer)	
				and  RemitToCode entered
				and (RemitToCode.BankEntity 		not entered
				or   RemitToCode.BankAccountNumber 	not entered
				or   RemitToCode.BankAccountType 	not entered)
				and (PayVendor.BankEntity 			not entered		
				or   PayVendor.BankAccountNumber 	not entered		
				or   PayVendor.BankAccountType 		not entered))	
					ActionCompleteMessage = APMSG109		
				else	
				if  (BankTransactionCode.BankTransactionType.CashPayment
				and !BankTransactionCode.PaymentOutputOption.NoOutput
				and AmountPaid						not entered)    
					initialize ValidateCashPaymentFormat
					ValidateCashPaymentFormat.VendorGroup			= Company.VendorGroup
					ValidateCashPaymentFormat.BankTransactionCode 	= BankTransactionCode
					ValidateCashPaymentFormat.CashCode				= CashCode
					ValidateCashPaymentFormat.PayablesProcessGroup	= Vendor.PayablesProcessGroup
					LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat	
					if (ValidateCashPaymentFormat.OutputErrorNumber entered)
						ActionCompleteMessage = ValidateCashPaymentFormat.OutputErrorMessage	
					else
					if (ValidateCashPaymentFormat.OutputCashPaymentFormat.PaymentFormat.AchFile)
						if (PayVendor.BankEntity 	entered)
							if (!PayVendor.BankAccountType.Checking
							and	!PayVendor.BankAccountType.Savings
							and	!PayVendor.BankAccountType.IBAN)		
								ActionCompleteMessage =	InvoiceChangedBankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat
						else
						if (RemitToCode.BankEntity 	entered)
							if (!RemitToCode.BankAccountType.Checking
							and !RemitToCode.BankAccountType.Savings
							and	!RemitToCode.BankAccountType.IBAN)		
								ActionCompleteMessage =	InvoiceChangedBankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat
				else
				if (IncomeWithholdingCode entered
				and IncomeWithholdingCodeDetailRel not exist)
					ActionCompleteMessage = InvoiceChangedIncomeWithholdingCodeDetailNotDefined
				else
				if (InvoiceType.MatchPrepayment
				and Status.Released)
					ActionCompleteMessage = APMSG403		//	"ChangeComplete-InvoiceIsReleased"
				else
					ActionCompleteMessage = ChangeComplete	//	"ChangeComplete"


				LocalAmount1 = InvoiceAmount.CurrencyAmount - TaxAmount
				if  (ApinwsCalcTaxRateSwitch
				and  TaxAmount != TotalTaxAmount
				and ((CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A"
				and   TotalDistributionAmount.TransactionTotal = InvoiceAmount.CurrencyAmount)
				or   (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "I"
				and   TotalDistributionAmount.TransactionTotal = LocalAmount1)))
					ActionCompleteMessage = APMSG820      
				else
				if (TaxEntityRel.TaxableAmountEdit
				and TotalTaxableAmount != TaxableAmount
				and MatchProcessType.Expense)
					ActionCompleteMessage = InvoiceChangedTaxableAmountOutOfBalance    
				else


				if  (ExpenseTaxAmountIsOutOfBalance		
				and !ApinwsCalcTaxRateSwitch)

					ActionCompleteMessage = APMSG118  // APMSG.118  APMSG.199	//	"RecordsProcessed;TaxOutOfBalance<InvoiceTaxOutOfBalanceDifference>"
				else
				if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
				and MatchProcessType.Expense
				and IsNotPrepayment)
					ActionCompleteMessage = RecordsProcessedInvoiceOutOfBalance
				else
				if (InvoiceType.MatchPrepayment
				and Status.Released)
					ActionCompleteMessage = ChangeCompleteInvoiceIsReleased       










		AutoAssignAPClerk
			include SetDefaultClerkLocalFields
			APClerk = LocalAPClerk
			ProcessingTeam	= LocalProcessingTeam		

		SetDefaultClerkLocalFields
			include ClearDefaultClerkLocalFields
			for each InvoiceAssignmentRuleRel
				if (PayablesInvoice within each.APClerkAssignmentRule)
					LocalAPClerk = each.APClerk
					LocalAPClerkName = each.APClerk.PreferredSimplePresentationName
					LocalProcessingTeam = each.ProcessingTeam		
					end for each

		ClearDefaultClerkLocalFields
			LocalAPClerk = ""
			LocalAPClerkName = ""
			initialize LocalProcessingTeam		



		UpdateErrorRecords
			invoke Purge PayablesInvoiceError set
			if (Status.Cancelled)
				DoNothing = true
			else
				if (InvoiceSource.ImagingSystem)
					if (!ImageIndex entered)
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 5		
				else
					if (!Vendor entered)
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 9		

				if (!Invoice entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 4		
				if (!InvoiceDate entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 6		
				if (!MatchProcessType.Expense)				
					if (!InvoiceAmount.CurrencyAmount entered
					and !AllowZeroCostInvoice)				
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 2		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 7		
				if (!InvoiceCurrency entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 11	
				if (!DueDate entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 12	
				if (!MatchProcessType entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 32	

				if (!MatchProcessType.Expense)
					if (Vendor.PoolOption.UseCompany
					and MatchCompanyRel.PoolOption.CompanyVendorPurchaseOrderShipToLocation)
						if (Location not entered)
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass	= 1		
								invoked.ErrorType	= 29	
					else
					if (Vendor.PoolOption.CompanyVendorPoShipTo)
						if (Location not entered)
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass	= 1		
								invoked.ErrorType	= 29	

				if (TotalPaymentAmount.TransactionTotal != InvoiceAmount.CurrencyAmount		
				and MatchProcessType.Expense
				and IsNotPrepayment)
					if (!NonMatchInvoiceOutOfBalanceErrorRel exists)
						invoke Create PayablesInvoiceError set
							if (Company.VendorGroup.DistributionEntryOnApproval)
								invoked.ErrorLevel	= 2		
							else
								invoked.ErrorLevel	= 1		
							invoked.ErrorClass	= 2		
							invoked.ErrorType	= 33	



				if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
				and MatchProcessType.Expense
				and IsNotPrepayment)
					if (!NonMatchInvoiceOutOfBalanceErrorRel exists)

						invoke Create PayablesInvoiceError set
							if (Company.VendorGroup.DistributionEntryOnApproval)
								invoked.ErrorLevel	= 2		
							else
								invoked.ErrorLevel	= 1		
							invoked.ErrorClass	= 2		
							invoked.ErrorType	= 23	

				if (action type.Create)
					GetDerivedValues	= true


				if (MatchProcessType.Expense)						
					if  (TaxEntityUsesSabrix)						
						if (OneSourceTaxIsOutOfBalance)				
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel	= 1			
								invoked.ErrorClass 	= 2			
								invoked.ErrorType 	= 31		

					else

						if (TaxEntityUsesInforTax				
						and PayablesInvoiceTaxRel.TotalInvoicedTaxAmount != RoundedTaxAmount	
						and !TaxCode.TaxType.TaxTableCode				
						and !TaxCode.TaxType.CalculatedRate				
						and (TransientTaxTableInvoicedAmount not entered	
						or   CreationSource.RNIP)						
						and TaxCode entered								
						and IsNotPrepayment)							
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel	= 1			
								invoked.ErrorClass 	= 2			
								invoked.ErrorType 	= 31		

						else
							if (TaxEntityUsesVertex															
							and DerivedTaxMethodInvOrAcc.Invoiced			
							and PayablesInvoice.DerivedTotalTaxAmountField != PayablesInvoice.TaxAmount)	
								invoke Create PayablesInvoiceError set
									invoked.ErrorLevel	= 1			
									invoked.ErrorClass 	= 2			
									invoked.ErrorType 	= 31		


				if  (!MatchProcessType.Expense
				and  !MatchPrepaymentMethod.PrepayFromInvoice
				and  !IsPOCancel
				and  !HasInvoiceLines
				and  !AddOnChargeExists)
					LocalBoolean = false
					initialize LocalCounter
					while (LocalCounter < 6)
						LocalCounter += 1
						if (RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[LocalCounter].InvoiceMatchLevel.InvoiceMatch)
							LocalBoolean = true
                            
					if (!LocalBoolean)
						invoke Create PayablesInvoiceError set
							invoked.ErrorLevel		= 1		
							invoked.ErrorClass	= 2		
							invoked.ErrorType	= 47	

				if (!MatchProcessType.Expense)
					GetDerivedValues = true
					if  ((CallVertexByDocument
					or   (TaxEntityRel.ThirdParty.Sabrix
					and   TaxConfigurationRel.OneSourceVersionType.Generic))
					and BackgroundProcessing not entered
					and MatchStatus < 2)
						NextSentence = true
					else
					if (MatchPrepaymentMethod.PrepayFromInvoice)	
						NextSentence = true
					else
					if  ((HasInvoiceLines
					or    AddOnChargeExists)
					and  MatchStatus < 2)


						LocalTaxDifference = TaxAmount - (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount + DerivedMatchAdditionalTax)
						if (LocalTaxDifference < 0)
							LocalTaxDifference *= -1

						if (LocalTaxDifference entered
						and LocalTaxDifference > DerivedTaxToleranceAmount)



							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass 	= 2			
								invoked.ErrorType 	= 31		


							if (IsNotMatched
							and Company.PutOutOfToleranceOnHold
							and Company.AllowShortPay			
							and Company.VendorGroup.TaxToleranceHoldCode entered)
								invoke PutInvoiceOnHold
									invoked.HoldCode = Company.VendorGroup.TaxToleranceHoldCode							
					else
					if  (HasInvoiceLines
					and  MatchStatus > 1)
						LocalTaxDifference = TaxAmount - DerivedTotalTaxAmount
						if (LocalTaxDifference < 0)
							LocalTaxDifference *= -1

						if (LocalTaxDifference entered
						and LocalTaxDifference > DerivedTaxToleranceAmount)



							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass 	= 2			
								invoked.ErrorType 	= 31		

							if (IsNotMatched
							and Company.PutOutOfToleranceOnHold
							and Company.AllowShortPay			
							and Company.VendorGroup.TaxToleranceHoldCode entered)
								invoke PutInvoiceOnHold
									invoked.HoldCode = Company.VendorGroup.TaxToleranceHoldCode							

					GetDerivedValues = false

				if  (!MatchProcessType.Expense
				and  (HasInvoiceLines
				or    AddOnChargeExists
				or    MatchProcessType.AOCOnly))


					if  (!DerivedMatchInvoiceInBalanceWithinTolerance)

						if (!MatchInvoiceOutOfBalanceErrorRel exists)
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass	= 2		
								invoked.ErrorType	= 26	

				if  (!MatchProcessType.Expense
				and  (HasInvoiceLines
				or    AddOnChargeExists
				or    MatchProcessType.AOCOnly)
				and  !MatchInvoiceOutOfBalanceErrorRel exists)
					for each PayablesInvoiceDetailRel
						if (!each.DistributionsInBalance)
							invoke Create PayablesInvoiceError set
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass	= 2		
								invoked.ErrorType	= 46	
						end for each

					if  (!MatchInvoiceOutOfBalanceErrorRel exists)
						for each PayablesInvoiceAddOnChargeRel
							if (!each.DistributionsInBalance)
								invoke Create PayablesInvoiceError set
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass	= 2		
									invoked.ErrorType	= 46	
							end for each

				if (!CashCode entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 21	
				if (!BankTransactionCode entered)
					invoke Create PayablesInvoiceError set
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 22	

				if (CreatedBySupplier
				and PayablesInvoiceSupplierOpenAddOnChargeRel exists)
					invoke Create PayablesInvoiceError set 
						invoked.ErrorLevel		= 1		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 71	
				
				if (InvoiceIsOnTaxToleranceHold 										
				and MatchProcessType.Expense)
					invoke Create PayablesInvoiceError set				
						invoked.ErrorLevel		= 2		
						invoked.ErrorClass		= 1		
						invoked.ErrorType		= 68	//"InvoiceIsOnTaxToleranceHold"	

					if (Status.Unreleased													
					and Company.PutOutOfToleranceOnHold										
					and TaxAmount entered													
					and TaxAmount != PayablesInvoiceTaxRel.TaxSystemTaxAmount)				
						invoke Create PayablesInvoiceError set								
							invoked.ErrorLevel		= 2		
							invoked.ErrorClass		= 1		
							invoked.ErrorType		= 69	//"InvoiceOutsideTaxTolerance"	
				if (PayablesInvoiceSpreadAddOnChargeRel exists)		
					for each PayablesInvoiceSpreadAddOnChargeRel
						if (!each.SpreadAmount = each.DerivedSumAOCDistributions
						and !each.SpreadMethod.Rate)
							invoke Create PayablesInvoiceError		
								invoked.Company			= PayablesInvoice.Company
								invoked.PayablesInvoice	= PayablesInvoice
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass		= 2		
								invoked.ErrorType		= 74	
							end for each


		BuildProcessingTeamEmailAddressList			
			LocalTeamEmailAddressList = ""
			LocalFirstEmailAddressFound = false
			for each ProcessingTeam.FinanceTeamMemberRel
				if (each.FinanceTeamMember.TeamMember.EmailAddress entered)		
					if (each.FinanceTeamMember.TeamMember.NotifyWhenInvoiceRejected)		
						if (LocalFirstEmailAddressFound)
							LocalTeamEmailAddressList = LocalTeamEmailAddressList + "," + each.FinanceTeamMember.TeamMember.EmailAddress
						else
							LocalTeamEmailAddressList = each.FinanceTeamMember.TeamMember.EmailAddress
							LocalFirstEmailAddressFound = true

		BuildTeamEmailAddressList
			LocalTeamEmailAddressList = ""
			LocalFirstEmailAddressFound = false
			for each ResponsibleTeam.FinanceTeamMemberRel
				if (each.FinanceTeamMember.TeamMember.EmailAddress entered)		
					if (LocalFirstEmailAddressFound)
						LocalTeamEmailAddressList = LocalTeamEmailAddressList + "," + each.FinanceTeamMember.TeamMember.EmailAddress
					else
						LocalTeamEmailAddressList = each.FinanceTeamMember.TeamMember.EmailAddress
						LocalFirstEmailAddressFound = true

		InvoiceInterfaceEdits
			if (!TaxEntityRel.ThirdParty.TaxEngine)
				constraint (Suffix != 888 and Suffix != 999)
					"CannotUseSuffix<Suffix>,ReservedForCancelledInvoice"
			constraint (Suffix != 111)
				"CannotUseSuffix<Suffix>,ReservedForChargebackInvoice"
			if (CreateOneTimeVendor)
				constraint (RemitToCode not entered)
					"CannotEnterRemitToForOneTimeVendor"
				constraint (PurchaseFromLocation not entered)
					"CannotEnterPurchaseFromLocationForOneTimeVendor"

			if (CustomerID entered)
				constraint (ReferenceType entered)
					"ReferenceTypeRequiredIfCustomerIDReferenceEntered"

			if  (!InvoiceSource.APAutomation
			and  !InvoiceSource.InvoiceInterface	
			and  !InvoiceSource.EDI
			and  !InvoiceSource.ERS
			and  !InvoiceSource.Payroll
			and  !InvoiceSource.Tax
			and  !InvoiceSource.Garnishment
			and  !InvoiceSource.HR
			and  !InvoiceSource.CreditForRebill
			and  !InvoiceSource.Lease)
				constraint (InvoiceSource.Manual)
					"IfEntered,InvoiceSourceMustBeAPAutomation,EDI,ERS,Payroll,Tax,GarnishmentOrHumanResources"

			if (!Status.Historical)
				if  (TermsCode not entered
				and (InvoiceSource.Payroll
				or   InvoiceSource.Tax
				or   InvoiceSource.Garnishment
				or   InvoiceSource.HR))
					if (PurchaseFromLocation.TermsCode entered)						
						TermsCode = PurchaseFromLocation.TermsCode					
					else
					if (RemitToVendorCompanyDefaultRel.TermsCode entered)
						TermsCode = RemitToVendorCompanyDefaultRel.TermsCode
					else
					if (RemitToCode.TermsCode entered)
						TermsCode = RemitToCode.TermsCode
					else
					if (VendorCompanyDefaultRel.TermsCode entered)
						TermsCode = VendorCompanyDefaultRel.TermsCode
					else
					if (Vendor.TermsCode entered)
						TermsCode = Vendor.TermsCode

				if (TermsCode entered)
					if  (InvoiceSource.Payroll
					or   InvoiceSource.Tax
					or   InvoiceSource.Garnishment
					or   InvoiceSource.HR)
						initialize DueDate
					else
					if (DueDate entered
					or  FlexTerms)
						initialize TermsCode

			if (Status.Historical)
				constraint (DistributionCode not entered)
					"DistributionCodeCannotBeEnteredForHistoricalInvoices"
				constraint (TaxCode not entered)
					"TaxCodeCannotBeEnteredForHistoricalInvoices"

		BuildRoleEmailAddressList
			LocalRoleEmailAddressList = ""
			LocalFirstEmailAddressFound = false
			for each FinanceResourceInvApprovalRel
				if (each.FinanceResource.EmailAddress entered)		
					if (LocalFirstEmailAddressFound)
						LocalRoleEmailAddressList = LocalRoleEmailAddressList + "," + each.FinanceResource.EmailAddress
					else
						LocalRoleEmailAddressList = each.FinanceResource.EmailAddress
						LocalFirstEmailAddressFound = true

		SendAvailableInvoiceMessage
			if (PfiConfigurationFromEmailPropertyRel.Value entered
			and LocalEmailAddress entered)
				send email
					to LocalEmailAddress
					from PfiConfigurationFromEmailPropertyRel.Value
					subject "<Company.VendorGroup.FinalInvoiceApprovalEmailSubject>"
					Attachments
						if (InvoiceImageEntered)
							attachment PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File
								name is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.Title
								mime type is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.MimeType
						if (Company.VendorGroup.InvoiceApprovalIncludeRelatedDocs)
							for each PayablesInvoiceDocumentNonInvoiceTypeRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						"<Company.VendorGroup.FinalInvoiceApprovalEmailContent>"
						"<DerivedApprovalComments>"
						"<DerivedEmailLink>"
						"<DerivedEscalatedText>"

				invoke Create PayablesInvoiceEmail
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.SentToEmailAddressText	= LocalEmailAddress
					invoked.SentFromEmailAddress	= PfiConfigurationFromEmailPropertyRel.Value
					invoked.EmailSubjectLine		= Company.VendorGroup.FinalInvoiceApprovalEmailSubject
					invoked.EmailContent			= Company.VendorGroup.FinalInvoiceApprovalEmailContent
					invoked.Comment					= DerivedApprovalComments
					invoked.NotificationType		= 1	

		
		SendApprovedEmailMessage
			if (PfiConfigurationFromEmailPropertyRel.Value entered
			and	((APClerk.NotifyWhenInvoiceApproved 
			and   APClerk.EmailAddress entered)
			or   ProcessingTeam entered))
				send email
					to DerivedProcessingTeamToEmail		
					from PfiConfigurationFromEmailPropertyRel.Value
					subject "<Company.VendorGroup.FinalInvoiceApprovedEmailSubject>"
					Attachments
						if (PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File entered)
							attachment PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File
								name is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.Title
								mime type is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.MimeType
						if (Company.VendorGroup.InvoiceApprovedIncludeRelatedDocs)
							for each PayablesInvoiceDocumentNonInvoiceTypeRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						if (UsesMatrixApproval
						and !LocalManualApprove)
							"DistributionsHaveReceivedMatrixApproval."
						"<Company.VendorGroup.FinalInvoiceApprovedEmailContent>"

				invoke Create PayablesInvoiceEmail
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.SentToEmailAddressText	= DerivedProcessingTeamToEmail		
					invoked.SentToFinanceResource	= APClerk
					invoked.SentFromEmailAddress	= PfiConfigurationFromEmailPropertyRel.Value
					invoked.EmailSubjectLine		= Company.VendorGroup.FinalInvoiceApprovedEmailSubject
					invoked.EmailContent			= Company.VendorGroup.FinalInvoiceApprovedEmailContent
					invoked.NotificationType		= 5	


		SendRejectionEmailMessage
			if (PfiConfigurationFromEmailPropertyRel.Value entered
			and	((APClerk.NotifyWhenInvoiceRejected
			and   APClerk.EmailAddress entered)
			or   ProcessingTeam entered))
				send email
					to DerivedProcessingTeamToEmail		
					from PfiConfigurationFromEmailPropertyRel.Value
					subject "<Company.VendorGroup.FinalInvoiceRejectEmailSubject>"
					Attachments
						if (InvoiceImageEntered)
							attachment PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File
								name is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.Title
								mime type is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.MimeType
						if (Company.VendorGroup.InvoiceRejectIncludeRelatedDocs)
							for each PayablesInvoiceDocumentNonInvoiceTypeRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						if (UsesMatrixApproval
						and LocalSummaryAccount entered)
							"Distribution<LocalSummaryAccount>HasBeenRejected."
						"<Company.VendorGroup.FinalInvoiceRejectEmailContent>"
						"RejectionReason:<LocalRejectReason>"
						"RejectionComment:<LocalRejectComment>"

				invoke Create PayablesInvoiceEmail
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.SentToEmailAddressText	= DerivedProcessingTeamToEmail		
					invoked.SentToFinanceResource	= APClerk
					invoked.SentFromEmailAddress	= PfiConfigurationFromEmailPropertyRel.Value
					invoked.EmailSubjectLine		= Company.VendorGroup.FinalInvoiceRejectEmailSubject
					invoked.EmailContent			= Company.VendorGroup.FinalInvoiceRejectEmailContent
					invoked.Comment					= "Rejection Comment: " + LocalRejectComment
					invoked.ActionReason			= LocalRejectReason
					invoked.NotificationType		= 2	

		SendNotReassignedInvoiceMessage		
			if (PfiConfigurationFromEmailPropertyRel.Value entered
			and LocalEmailAddress entered)
				send email
					to LocalEmailAddress
					from PfiConfigurationFromEmailPropertyRel.Value
					subject "Invoice<Invoice>ForVendor<Vendor.VendorName>HasNotBeenReassigned"
					Attachments
						if (InvoiceImageEntered)
							attachment PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File
								name is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.Title
								mime type is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.MimeType
						if (Company.VendorGroup.InvoiceApprovalIncludeRelatedDocs)
							for each PayablesInvoiceDocumentNonInvoiceTypeRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						"InvoiceWasNotReassigned;PleasePopulate_\Reassign_\To_\Approval_\LevelFieldToReassignInvoice."

				invoke Create PayablesInvoiceEmail
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.SentToEmailAddressText	= LocalEmailAddress
					invoked.SentFromEmailAddress	= PfiConfigurationFromEmailPropertyRel.Value
					invoked.EmailSubjectLine		= "Invoice<Invoice>ForVendor<Vendor.VendorName>HasNotBeenReassigned"
					invoked.EmailContent			= "InvoiceWasNotReassigned;PleasePopulate_\Reassign_\To_\Approval_\LevelFieldToReassignInvoice."
					invoked.Comment					= DerivedApprovalComments
					invoked.NotificationType		= 3	

		SendNotApprovedInvoiceMessage		
			if (PfiConfigurationFromEmailPropertyRel.Value entered
			and LocalEmailAddress entered)
				send email
					to LocalEmailAddress
					from PfiConfigurationFromEmailPropertyRel.Value
					subject "<DerivedSendNotApprovedEmailSubject>"		
					Attachments
						if (InvoiceImageEntered)
							attachment PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File
								name is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.Title
								mime type is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.MimeType
						if (Company.VendorGroup.InvoiceApprovalIncludeRelatedDocs)
							for each PayablesInvoiceDocumentNonInvoiceTypeRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						"<DerivedSendNotApprovedEmailContents>"			

				invoke Create PayablesInvoiceEmail
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.SentToEmailAddressText	= LocalEmailAddress
					invoked.SentFromEmailAddress	= PfiConfigurationFromEmailPropertyRel.Value
					invoked.EmailSubjectLine		= "Invoice<Invoice>ForVendor<Vendor.VendorName>HasNotBeenApproved"
					invoked.EmailContent			= "InvoiceWasNotApproved;Reassign_\To_\Other_\Approver."
					invoked.Comment					= DerivedApprovalComments
					invoked.NotificationType		= 3	


		GetNextEscalationApprovalLevel
			if (RoutingCode.Currency entered		
			and RoutingCode.Currency != InvoiceCurrency)
				LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
				LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= RoutingCode.Currency
				LocalReportCurrencyExchangeGroup.ExchangeDate			= InvoiceDate
				LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
				LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
				LocalExtendedAmount										= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
			else
				LocalExtendedAmount										= InvoiceAmount.CurrencyAmount

			if (first LocalInvoiceRoutingCodeLevelRel.EscalateTo.NextApprovalLevel)


				LocalRoutingApprovalLevel = first LocalNextActiveInvoiceRoutingCodeLevelRel.ApprovalLevel		
				if (LocalRoutingApprovalLevel = "")		
					if (InvoiceRoutingCodeGroupLevel.NextCodeGroupLevelExists)	
						LocalInvoiceRoutingCodeGroupLevel	= InvoiceRoutingCodeGroupLevel.first NextInvoiceRoutingCodeGroupLevelRel.InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
						InvoiceRoutingCodeGroupLevel		= LocalInvoiceRoutingCodeGroupLevel
						RoutingCode							= InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
						for each RoutingCode.ActiveInvoiceRoutingCodeResourceRel
							if (RoutingCode.InitialApproverSelectionMethod.SpecificApprovalLevel)		
								if (RoutingCode.InitialApprovalLevel.ApprovalLevel = each.ApprovalLevel)
									LocalRoutingApprovalLevel = each.ApprovalLevel
									end for each
							else
								if (RoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
								or	LocalExtendedAmount <= each.DerivedMaxApprovalAmount)		


									LocalRoutingApprovalLevel = each.ApprovalLevel
									end for each
					else	
						LocalRoutingApprovalLevel = RoutingApprovalLevel
			else

				LocalRoutingApprovalLevel = first LocalInvoiceRoutingCodeLevelRel.DerivedNextActiveEscalatedApprovalLevel		

		GetNextRoutingApprovalLevel

			if (RoutingCode.Currency entered		
			and RoutingCode.Currency != InvoiceCurrency)
				LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
				LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= RoutingCode.Currency
				LocalReportCurrencyExchangeGroup.ExchangeDate			= InvoiceDate
				LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
				LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
				LocalExtendedAmount										= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
			else
				LocalExtendedAmount										= InvoiceAmount.CurrencyAmount


			if (LocalRoutingApprovalLevel < 1)

				for each RoutingCode.ActiveInvoiceRoutingCodeResourceRel		


					if (RoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
					or	LocalExtendedAmount <= each.DerivedMaxApprovalAmount)		


						LocalRoutingApprovalLevel = each.ApprovalLevel

						end for each
			else


				if (RoutingCode.FinalApproverSelectionMethod.FirstApprovalLevelAuthorizedToApproveInvoiceAmount
				and	LocalExtendedAmount <= first LocalInvoiceRoutingCodeLevelRel.DerivedMaxApprovalAmount)		


					LocalRoutingApprovalLevel	= ""	
					if(!InvoiceRoutingCodeGroup.ProcessApprovalsForAllGroupLevels)
						LocalReleaseInvoice			= true		

				else
				if (first LocalInvoiceRoutingCodeLevelRel.OverrideNextApprovalLevel)
					LocalRoutingApprovalLevel = first LocalInvoiceRoutingCodeLevelRel.DerivedNextActiveApprovalLevel		

				else
				if (LocalNextActiveInvoiceRoutingCodeLevelRel exists)		
					LocalRoutingApprovalLevel = first LocalNextActiveInvoiceRoutingCodeLevelRel.ApprovalLevel		

				else
					LocalRoutingApprovalLevel = ""


			if  (LocalRoutingApprovalLevel = ""		
			and !LocalReleaseInvoice				
			and  InvoiceRoutingCodeGroupLevel.NextCodeGroupLevelExists)
				if (!SetTransientFields)		
					LocalInvoiceRoutingCodeGroupLevel	= InvoiceRoutingCodeGroupLevel.first NextInvoiceRoutingCodeGroupLevelRel.InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
					InvoiceRoutingCodeGroupLevel		= LocalInvoiceRoutingCodeGroupLevel
					RoutingCode							= InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
					for each RoutingCode.ActiveInvoiceRoutingCodeResourceRel
						if (RoutingCode.InitialApproverSelectionMethod.SpecificApprovalLevel)		
							if (RoutingCode.InitialApprovalLevel.ApprovalLevel = each.ApprovalLevel)
								LocalRoutingApprovalLevel = each.ApprovalLevel

								end for each
						else
							if (RoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
							or	LocalExtendedAmount <= each.DerivedMaxApprovalAmount)		


								LocalRoutingApprovalLevel = each.ApprovalLevel

								end for each
				else
					LocalInvoiceRoutingCodeGroupLevel	= InvoiceRoutingCodeGroupLevel.first NextInvoiceRoutingCodeGroupLevelRel.InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
					TransientRoutingCode					= LocalInvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
					for each TransientRoutingCode.ActiveInvoiceRoutingCodeResourceRel
						if (TransientRoutingCode.InitialApproverSelectionMethod.SpecificApprovalLevel)		
							if (TransientRoutingCode.InitialApprovalLevel.ApprovalLevel = each.ApprovalLevel)
								LocalRoutingApprovalLevel = each.ApprovalLevel

								end for each
						else
							if (TransientRoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
							or	LocalExtendedAmount <= each.DerivedMaxApprovalAmount)		


								LocalRoutingApprovalLevel = each.ApprovalLevel

								end for each
			if (LocalRoutingApprovalLevel = ""		
			and !LocalReleaseInvoice
			and (RoutingCode.UsesTeamMemberAssignment		    
			or   InvoiceRoutingCodeGroup.FinalLevelUsesTeamMemberAssignment
			or   Company.VendorGroup.EnforceMaxInvoiceApprovalAmount)
			and LocalExtendedAmount > CurrentInvoiceRoutingCodeLevelRel.DerivedMaxApprovalAmount)
				LocalRoutingApprovalLevel = RoutingApprovalLevel

				if (ResponsiblePerson entered)
					LocalEmailAddress = ResponsiblePerson.EmailAddress
				else
					LocalFinanceResource = first AgentRel.BusinessObjectRef(Employee).Employee
					LocalEmailAddress		  = LocalFinanceResource.EmailAddress
				LocalSendNotApprovedInvoiceMessage = true		


			if (LocalRoutingApprovalLevel = ""			
			and initiating action ="UpdateApprovalLevel"
			and Company.EnforceProcessorCannotBeApprover
			and ((ResponsiblePerson entered 					
			and  APClerk = ResponsiblePerson)
			or	(ResponsiblePerson !entered 
			and  APClerk.FinanceResourceActor = LocalActor)))
				LocalRoutingApprovalLevel = RoutingApprovalLevel
				if (ResponsiblePerson entered)
					LocalEmailAddress = ResponsiblePerson.EmailAddress
				else
					LocalFinanceResource = first AgentRel.BusinessObjectRef(Employee).Employee
					LocalEmailAddress		  = LocalFinanceResource.EmailAddress
				LocalSendNotApprovedInvoiceMessage = true
			if (LocalSendNotApprovedInvoiceMessage)				
				include SendNotApprovedInvoiceMessage
			

		GetNextTransientRoutingApprovalLevel
			if (TransientRoutingCode.Currency entered
			and TransientRoutingCode.Currency != InvoiceCurrency)
				LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
				LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= RoutingCode.Currency
				LocalReportCurrencyExchangeGroup.ExchangeDate			= InvoiceDate
				LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
				LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
				LocalExtendedAmount										= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
			else
				LocalExtendedAmount										= InvoiceAmount.CurrencyAmount
			if (LocalRoutingApprovalLevel < 1)
				for each TransientRoutingCode.ActiveInvoiceRoutingCodeResourceRel		
					if (TransientRoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
					or	LocalExtendedAmount <= each.MaxApprovalAmount)
						LocalRoutingApprovalLevel = each.ApprovalLevel
						end for each
			else
				if (TransientRoutingCode.FinalApproverSelectionMethod.FirstApprovalLevelAuthorizedToApproveInvoiceAmount
				and	LocalExtendedAmount <= first TransientLocalInvoiceRoutingCodeLevelRel.MaxApprovalAmount)
					LocalRoutingApprovalLevel = 0	
				else
				if (first TransientLocalInvoiceRoutingCodeLevelRel.OverrideNextApprovalLevel)
					LocalRoutingApprovalLevel = first TransientLocalInvoiceRoutingCodeLevelRel.DerivedNextActiveApprovalLevel	
				else
				if (TransientNextActiveInvoiceRoutingCodeLevelRel exists)		
					LocalRoutingApprovalLevel = first TransientNextActiveInvoiceRoutingCodeLevelRel.ApprovalLevel	
				else
					LocalRoutingApprovalLevel = 0

		BuildLocalRoleApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each LocalFinanceResourceInvApprovalRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceResource.FinanceResourceActor
				else
					LocalApproverList = each.FinanceResource.FinanceResourceActor
					LocalFirstApproverAssigned = true

		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			if (RoutingCode.UsesTeamMemberAssignment		
			and RoutingFinanceTeam = first CurrentInvoiceRoutingCodeLevelRel.ApprovalTeam
			and RoutingFinanceTeamMember entered)
				LocalApproverList = RoutingFinanceTeamMember.TeamMember.FinanceResourceActor
			else
				for each FinanceTeamMembersFromCurrentApprovalLevelRel
					if (LocalFirstApproverAssigned)
						LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
					else
						LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
						LocalFirstApproverAssigned = true

		GetDocumentURL

			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.MHCSoftware)
				if (MHCOAuthExists)	
					MHCKey				= Company.VendorGroup.DocMgmtSystemKey
					MHCUser 			= "Infor: " + actor
					MHCDocID			= ImageIndex
					invoke GetDocumentURL MHCDocumentServiceMT
						invoked.JSONRequest = MHCGetDocumentJSON
						LocalJSONResponse 	= result.JSONResponse
					LocalDocumentURL	= LocalJSONResponse select "$.DocumentURL"
				else
					invoke GetDocumentURL MHCDocumentService
						invoked.DocumentID			= ImageIndex
	  					invoked.Key					= Company.VendorGroup.DocMgmtSystemKey
	  					invoked.User				= "Infor: " + actor
						LocalDocumentURL			= result.GetDocumentURLResponse.DocumentURL
			else
			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.HylandSoftware)
				if (HylandOAuthExists)	

					invoke GetDocumentURL HylandGetDocumentUrlOAuth
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message	
						invoked.JSONRequest = HylandGetUrlJSON
						LocalJSONResponse 	= result.JSONResponse
						MyHTTPInfo			= result.HTTPResult

					if (!MyHTTPInfo.Failed and LocalJSONResponse entered)
						LocalDocumentURL	= LocalJSONResponse select "$.documentUrl"



					
					display "HTTPFail<MyHTTPInfo.Failed>WebServErr<WebServiceError>"
					if (MyHTTPInfo.Failed
					or  WebServiceError)
						TextErrorMessage		= "The Web Service to retrieve the document URL failed.  Use 'Update Document URL' to try again."
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Status: " + MyHTTPInfo.StatusCode
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Failed: " + MyHTTPInfo.Failed
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Url: " + MyHTTPInfo.Url
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Request: " + MyHTTPInfo.RequestBody
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Response: " + MyHTTPInfo.ResponseBody

						invoke Create PayablesInvoiceComment
							invoked.Company					= Company			
							invoked.PayablesInvoice			= PayablesInvoice	
							invoked.Title					= "Get URL Web Service Error:"
							invoked.Comment					= TextErrorMessage	
							invoked.Type					= "N"				
				else
					invoke InputOutputURL HylandDocumentSecureService
						invoked.DocumentData.DocumentHandle			= ImageIndex
						LocalDocumentURL							= result.InputOutputURLResponse.GetDocumentURLResponse.GetDocumentURLResult
			else
			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.AscendSoftware)
				invoke GetDocumentURL AscendDocumentService
					invoked.DocumentHandle						= ImageIndex
					LocalDocumentURL							= result.GetDocumentURLResponse.GetDocumentURLResult.DocumentURL
			else
			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.PerceptiveSoftware)
				invoke GetDocumentUrl PerceptiveDocumentService
					invoked.DocId						= ImageIndex
					LocalDocumentURL					= result.DocumentInfo.DocumentURL

		GetDocumentBytes

			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.MHCSoftware)
				if (MHCOAuthExists)	
					MHCKey				= Company.VendorGroup.DocMgmtSystemKey
					MHCUser				= "Infor: " + actor
					MHCDocID			= ImageIndex
					invoke GetDocumentBytes MHCDocumentServiceMT
						invoked.JSONRequest 						= MHCGetDocumentJSON
						LocalJSONResponse 							= result.JSONResponse
					LocalDocumentBytes							= LocalJSONResponse select "$.DocumentImage"
					LocalDocumentType 							= LocalJSONResponse select "$.DocumentImageExtension"
				else
					invoke GetDocumentBytes MHCDocumentService
						invoked.DocID								= ImageIndex
						invoked.Key									= Company.VendorGroup.DocMgmtSystemKey
						invoked.User								= "Infor: " + actor
						LocalDocumentBytes							= result.GetDocumentBytesResponse.DocumentImage
						LocalDocumentType							= result.GetDocumentBytesResponse.DocumentImageExtension
			else
			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.HylandSoftware)
				if (HylandOAuthExists)	

					invoke GetDocumentImage HylandGetDocumentImageOAuth
						resume on error
							WebServiceError = true
							WebServiceErrorMessage = error message	
						invoked.JSONRequest = HylandGetDocumentJSON
						LocalJSONResponse 	= result.JSONResponse
						MyHTTPInfo			= result.HTTPResult

					if (!MyHTTPInfo.Failed and LocalJSONResponse entered)
						LocalDocumentBytes	= LocalJSONResponse select "$.base64FileStream"
						LocalDocumentType 	= LocalJSONResponse select "$.extension"




					
					display "HTTPFail<MyHTTPInfo.Failed>WebServErr<WebServiceError>"
					if (MyHTTPInfo.Failed
					or  WebServiceError)
						TextErrorMessage		= "The Web Service to retrieve the document image failed.  Use 'Save Document Locally' to try again."
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Status: " + MyHTTPInfo.StatusCode
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Failed: " + MyHTTPInfo.Failed
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Url: " + MyHTTPInfo.Url
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Request: " + MyHTTPInfo.RequestBody
						TextErrorMessage		+= Company.VendorGroup.NewLine 
						TextErrorMessage		+= "Response: " + MyHTTPInfo.ResponseBody

						invoke Create PayablesInvoiceComment
							invoked.Company					= Company			
							invoked.PayablesInvoice			= PayablesInvoice	
							invoked.Title					= "Get Document Web Service Error:"
							invoked.Comment					= TextErrorMessage	
							invoked.Type					= "N"				

				else
					invoke InputOutputDocBytes HylandDocumentSecureBytes
						invoked.DocumentData.DocumentHandle			= ImageIndex
						LocalDocumentBytes							= result.InputOutputDocBytesResponse.Response.DocumentBytes
						LocalDocumentType							= result.InputOutputDocBytesResponse.Response.Extension
			else
			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.AscendSoftware)
				invoke GetDocumentBytes AscendDocumentService
					invoked.DocumentHandle						= ImageIndex
					LocalDocumentBytes							= result.GetDocumentBytesResponse.GetDocumentBytesResult.DocumentBytes
					LocalDocumentType							= result.GetDocumentBytesResponse.GetDocumentBytesResult.Extension
			else
			if (Company.VendorGroup.UsingDocMgmtSystem
			and Company.VendorGroup.DocMgmtPartner.PerceptiveSoftware)
				invoke GetDocumentPage PerceptiveDocumentService
					invoked.DocId						= ImageIndex
					invoked.PageNo						= 1
					LocalDocumentBytes					= result.DocumentPage.PageByteStreamBase64
					LocalDocumentType					= result.DocumentPage.FileType

		InitiateApprovalProcessFromSpeedEntry						

			initiate InvoiceApproval process
				title is "<SpeedEntryInvoiceApprovalSubject>"		
				Criteria
					Company
					ProcessLevel
				Variables
					Company
					PayablesInvoice
				URLs
					"<linkback(webapp is Approver navigation is InvoiceLinkbackNav text is \"ViewInvoice\")>"

		InitiateApprovalProcessFromMassInvoiceRelease		

			initiate InvoiceApproval process
				title is "<MassInvoiceReleaseApprovalSubject>"
				Criteria
					Company
					ProcessLevel
				Variables
					Company
					PayablesInvoice
				URLs
					"<linkback(webapp is Approver navigation is InvoiceLinkbackNav text is \"ViewInvoice\")>"

		InitiateApprovalProcess

			initiate InvoiceApproval process

				title is "<Company.VendorGroup.FinalInvoiceApprovalEmailSubject>"		
				Criteria
					Company
					ProcessLevel
				Variables
					Company
					PayablesInvoice
				URLs
					"<linkback(webapp is Approver navigation is InvoiceLinkbackNav text is \"ViewInvoice\")>"

		BuildRoleApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceResourceInvApprovalRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceResource.FinanceResourceActor
				else
					LocalApproverList = each.FinanceResource.FinanceResourceActor
					LocalFirstApproverAssigned = true

		FindActiveRoleApprover
			if (LocalFinanceResourceInvApprovalRel exists)
				LocalActiveApprover = false
				for each LocalFinanceResourceInvApprovalRel
					if (each.FinanceResource.Active)
						LocalActiveApprover = true
				LocalActiveApproversAtAllLevels = LocalActiveApprover

		BuildTextIndexes
			build text search field InvoiceSearchDocument
				Fields
					Company.Name
					Vendor.VendorName
					Vendor.VendorSearchName			
					Vendor.Reference1
					Vendor.Reference2
					Vendor.LegacyVendor
					PayVendor.VendorName
					PayVendor.VendorSearchName		
					PayVendor.Reference1
					PayVendor.Reference2
					PayVendor.LegacyVendor
					Invoice
					VoucherNumber
					PayablesInvoice

		CheckInvoiceDetailsAndAOCs
			DetailDistributionsInBalance = true
			initialize LocalInvoiceDetailTotalAmount
			initialize LocalInvoiceDetailTotalTax
			initialize LocalAOCTotalAmount
			initialize LocalAOCTotalTax

			for each PayablesInvoiceDetailRel
				if (!each.DistributionsInBalance)
					DetailDistributionsInBalance	= false

				LocalInvoiceDetailTotalAmount		+= each.TotalDistributionAmount
				if (each.IsInvoicedTaxCode)		
					LocalInvoiceDetailTotalTax 		+= each.TaxAmount

			for each PayablesInvoiceAddOnChargeRel
				LocalAOCTotalAmount		 			+= each.AddOnChargeAmount
				LocalAOCTotalTax		 			+= each.InvoicedTaxAmount






		CheckPrepaids
			if  (InvoiceType.MatchPrepayment
			and  initiating action not = "ReinstateCancelledInvoiceCancelled"
			and (Status.Unreleased
			or   Status.PendingApproval)
			and  MatchStatus.Unmatched)

				if  (MatchAmount > 0
				or   MatchProcessType.Service
				or   MatchProcessType.ServiceContract
				or  (MatchProcessType.DropShip
				and  ServiceAmount entered))

					if  (PayablesInvoiceDetailRel exists
					or  (MatchPrepaymentMethod.PrepayFromInvoice
					and !TaxCode.TaxType.CalculatedRate))

						if  (initiating action = "CreateInvoiceUnreleased"
						and ((InvoiceAmount.CurrencyAmount - TaxAmount) > sum MatchPurchaseOrderInvoicesRel.PurchaseOrder.OpenPurchaseAmount))
							confirmation required
								"InvoiceAmountExceedsPurchaseOrderAmount-Continue?"


						include ValidateMatchInvoiceBalanceEdits

						if  (LocalReleaseInvoice)
							if  (not RequiresApproval           
							and  !RoutingRuleFound
							and	 (APClerkEntered
							or	  ProcessingTeamEntered		
							or    InterfaceInProcess))
								confirmation required
									"PrepaymentInvoiceWillBeReleased-Continue?"
								include PerformBudgetEditsForRelease













		RoundTotalDistributionAmount
			TotalDistributionAmount.TransactionTotal	= RoundedTotalDistributionAmount
			TotalDistributionAmount.FunctionalTotal		= RoundedTotDistFunctional
			TotalDistributionAmount.AlternateTotal		= RoundedTotDistAlternateTotal
			TotalDistributionAmount.AlternateTotal2		= RoundedTotDistAlternateTotal2
			TotalDistributionAmount.AlternateTotal3		= RoundedTotDistAlternateTotal3
			TotalDistributionAmount.ReportTotal1		= RoundedTotDistReportTotal1
			TotalDistributionAmount.ReportTotal2		= RoundedTotDistReportTotal2
			TotalDistributionAmount.ReportTotal3		= RoundedTotDistReportTotal3
			TotalDistributionAmount.ReportTotal4		= RoundedTotDistReportTotal4
			TotalDistributionAmount.ReportTotal5		= RoundedTotDistReportTotal5

		RoundTotalPaymentAmount
			TotalPaymentAmount.TransactionTotal		= RoundedTotalPaymentAmount
			TotalPaymentAmount.FunctionalTotal		= RoundedTotPmtFunctional
			TotalPaymentAmount.AlternateTotal		= RoundedTotPmtAlternateTotal
			TotalPaymentAmount.AlternateTotal2		= RoundedTotPmtAlternateTotal2
			TotalPaymentAmount.AlternateTotal3		= RoundedTotPmtAlternateTotal3
			TotalPaymentAmount.ReportTotal1			= RoundedTotPmtReportTotal1
			TotalPaymentAmount.ReportTotal2			= RoundedTotPmtReportTotal2
			TotalPaymentAmount.ReportTotal3			= RoundedTotPmtReportTotal3
			TotalPaymentAmount.ReportTotal4			= RoundedTotPmtReportTotal4
			TotalPaymentAmount.ReportTotal5			= RoundedTotPmtReportTotal5












		AdjustPaymentCurrencyAmounts
			include RoundTotalDistributionAmount
			include RoundTotalPaymentAmount
			if (Status.Released
			and InvoiceAmount.CurrencyAmount = TotalPaymentAmount.TransactionTotal
			and InvoiceAmount.CurrencyAmount = TotalDistributionAmount.TransactionTotal)
				invoke AdjustPaymentCurrencyAmounts last OpenPayablesInvoicePaymentRel	
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= (TotalDistributionAmount.FunctionalTotal		- TotalPaymentAmount.FunctionalTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= (TotalDistributionAmount.AlternateTotal		- TotalPaymentAmount.AlternateTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= (TotalDistributionAmount.AlternateTotal2		- TotalPaymentAmount.AlternateTotal2)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= (TotalDistributionAmount.AlternateTotal3		- TotalPaymentAmount.AlternateTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= (TotalDistributionAmount.ReportTotal1			- TotalPaymentAmount.ReportTotal1)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= (TotalDistributionAmount.ReportTotal2			- TotalPaymentAmount.ReportTotal2)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= (TotalDistributionAmount.ReportTotal3			- TotalPaymentAmount.ReportTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= (TotalDistributionAmount.ReportTotal4			- TotalPaymentAmount.ReportTotal4)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= (TotalDistributionAmount.ReportTotal5			- TotalPaymentAmount.ReportTotal5)
				TotalPaymentAmount = TotalDistributionAmount
				include RoundTotalPaymentAmount



		AdjustDistributionCurrencyAmounts
			include RoundTotalDistributionAmount
			include RoundTotalPaymentAmount
			if (InvoiceAmount.CurrencyAmount = TotalPaymentAmount.TransactionTotal
			and InvoiceAmount.CurrencyAmount = TotalDistributionAmount.TransactionTotal)
				invoke AdjustDistributionCurrencyAmounts last UnreleasedDistributionsRel	
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= (TotalPaymentAmount.FunctionalTotal		- TotalDistributionAmount.FunctionalTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= (TotalPaymentAmount.AlternateTotal		- TotalDistributionAmount.AlternateTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= (TotalPaymentAmount.AlternateTotal2		- TotalDistributionAmount.AlternateTotal2)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= (TotalPaymentAmount.AlternateTotal3		- TotalDistributionAmount.AlternateTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= (TotalPaymentAmount.ReportTotal1			- TotalDistributionAmount.ReportTotal1)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= (TotalPaymentAmount.ReportTotal2			- TotalDistributionAmount.ReportTotal2)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= (TotalPaymentAmount.ReportTotal3			- TotalDistributionAmount.ReportTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= (TotalPaymentAmount.ReportTotal4			- TotalDistributionAmount.ReportTotal4)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= (TotalPaymentAmount.ReportTotal5			- TotalDistributionAmount.ReportTotal5)
				TotalDistributionAmount = TotalPaymentAmount
				include RoundTotalDistributionAmount

		AdjustHistoricalDistributionCurrencyAmounts			
			include RoundTotalDistributionAmount
			include RoundTotalPaymentAmount
			if (InvoiceAmount.CurrencyAmount = TotalPaymentAmount.TransactionTotal
			and InvoiceAmount.CurrencyAmount = TotalDistributionAmount.TransactionTotal)
				invoke AdjustDistributionCurrencyAmounts last PayablesInvoiceDistribution set	
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= (TotalPaymentAmount.FunctionalTotal		- TotalDistributionAmount.FunctionalTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= (TotalPaymentAmount.AlternateTotal		- TotalDistributionAmount.AlternateTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= (TotalPaymentAmount.AlternateTotal2		- TotalDistributionAmount.AlternateTotal2)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= (TotalPaymentAmount.AlternateTotal3		- TotalDistributionAmount.AlternateTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= (TotalPaymentAmount.ReportTotal1			- TotalDistributionAmount.ReportTotal1)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= (TotalPaymentAmount.ReportTotal2			- TotalDistributionAmount.ReportTotal2)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= (TotalPaymentAmount.ReportTotal3			- TotalDistributionAmount.ReportTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= (TotalPaymentAmount.ReportTotal4			- TotalDistributionAmount.ReportTotal4)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= (TotalPaymentAmount.ReportTotal5			- TotalDistributionAmount.ReportTotal5)
				TotalDistributionAmount = TotalPaymentAmount
				include RoundTotalDistributionAmount
				
		AdjustDistributionCurrencyAmountsForMatch
			include RoundTotalDistributionAmount
			include RoundTotalPaymentAmount
			if ((InvoiceAmount.CurrencyAmount = TotalPaymentAmount.TransactionTotal
			and InvoiceAmount.CurrencyAmount = TotalDistributionAmount.TransactionTotal)
			and (TotalPaymentAmount.FunctionalTotal	not = TotalDistributionAmount.FunctionalTotal
			or   TotalPaymentAmount.AlternateTotal  not = TotalDistributionAmount.AlternateTotal
			or   TotalPaymentAmount.AlternateTotal2 not = TotalDistributionAmount.AlternateTotal2
			or   TotalPaymentAmount.AlternateTotal3 not = TotalDistributionAmount.AlternateTotal3
			or   TotalPaymentAmount.ReportTotal1    not = TotalDistributionAmount.ReportTotal1
			or   TotalPaymentAmount.ReportTotal2    not = TotalDistributionAmount.ReportTotal2
			or   TotalPaymentAmount.ReportTotal3    not = TotalDistributionAmount.ReportTotal3
			or   TotalPaymentAmount.ReportTotal4    not = TotalDistributionAmount.ReportTotal4
			or   TotalPaymentAmount.ReportTotal5    not = TotalDistributionAmount.ReportTotal5))
				invoke AdjustDistributionCurrencyAmounts last ReleasedAndUnreleasedDistributionsRel	
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= (TotalPaymentAmount.FunctionalTotal		- TotalDistributionAmount.FunctionalTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= (TotalPaymentAmount.AlternateTotal		- TotalDistributionAmount.AlternateTotal)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= (TotalPaymentAmount.AlternateTotal2		- TotalDistributionAmount.AlternateTotal2)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= (TotalPaymentAmount.AlternateTotal3		- TotalDistributionAmount.AlternateTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= (TotalPaymentAmount.ReportTotal1			- TotalDistributionAmount.ReportTotal1)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= (TotalPaymentAmount.ReportTotal2			- TotalDistributionAmount.ReportTotal2)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= (TotalPaymentAmount.ReportTotal3			- TotalDistributionAmount.ReportTotal3)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= (TotalPaymentAmount.ReportTotal4			- TotalDistributionAmount.ReportTotal4)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= (TotalPaymentAmount.ReportTotal5			- TotalDistributionAmount.ReportTotal5)
				TotalDistributionAmount = TotalPaymentAmount
				include RoundTotalDistributionAmount







		CXMLInvoiceStatusCreate
			invoke CreateCXMLInvoiceStatus OutboundCXMLInvoiceStatus
				invoked.DocumentNumber 				= Invoice
				invoked.InvoiceID 					= Invoice
				invoked.InvoiceDate					= InvoiceDate
				invoked.InvoiceStatus				= Status
					if (Status = 4)
						invoked.InvoiceComments		= LocalRejectComment
					if (Status = 6)
						invoked.InvoiceComments		= LocalActionComment
				invoked.VendorGroup					= VendorGroup
				invoked.Vendor						= Vendor
				invoked.PurchaseFromLocation 		= PurchaseFromLocation






		CXMLPaymentProposalRequestCreate
			if (CXMLConfigurationRel.PaymentProposal)
				invoke CreatePaymentProposalRequest PaymentProposalRequest
					fill in fields from this instance





		IDMXMLDefinition
			IDMGenerateDocument.IDMXMLDefinition.Busclass											= reference to this instance
			IDMGenerateDocument.IDMXMLDefinition.ListName											= "PayablesChargebackListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.DocumentName										= "PayablesChargeback"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName			= "PayablesInvoiceDetailRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName 			= "PayablesInvoiceDetailListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1		= 1
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag				= "PayablesInvoiceDetails"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag				= "PayablesInvoiceDetail"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName			= "VendorReturnLinesRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName 			= "VendorReturnLineListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1		= 2
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag				= "VendorReturnLines"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag				= "VendorReturnLine"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].RelationName			= "EntityTaxCodeForPayablesInvoiceRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListName 			= "TaxCodeListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection1		= 3
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListTag				= "InvoiceTaxCodes"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ItemTag				= "InvoiceTaxCode"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].RelationName			= "PurchaseOrderReceiptsForChargebackRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListName 			= "ReceiptDetailsListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].LevelSection1		= 4
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListTag				= "MatchReceipts"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ItemTag				= "MatchReceipt"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].RelationName			= "PurchaseOrderReceiptsForVendorReturnRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListName 			= "ReceiptDetailsListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].LevelSection1		= 5
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListTag				= "VendorReturnReceipts"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ItemTag				= "VendorReturnReceipt"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].RelationName			= "PayablesInvoiceCommentForIDMRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ListName 			= "PayablesInvoiceCommentListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].LevelSection1		= 6
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ListTag				= "InvoiceComments"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[6].ItemTag				= "InvoiceComment"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].RelationName			= "PayablesInvoiceDistributionForIDMRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ListName 			= "PayablesInvoiceDistributionListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].LevelSection1		= 7
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ListTag				= "InvoiceDistributions"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[7].ItemTag				= "InvoiceDistribution"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].RelationName			= "PayablesInvoiceCommentInterfacedItemDetailsForIDMRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ListName 			= "InvoiceCommentInterfacedItemListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].LevelSection1		= 8
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ListTag				= "InterfacedInvoiceDetails"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[8].ItemTag				= "InterfacedInvoiceDetail"

		PayablesDebitMemoIDMXMLDefinition
			IDMGenerateDocument.IDMXMLDefinition.Busclass		= reference to this instance
			IDMGenerateDocument.IDMXMLDefinition.ListName		= "PayablesDebitMemoListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.DocumentName	= "PayablesDebitMemo"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName		= "PayablesInvoiceCommentForIDMDebitMemoRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName			= "PayablesDebitMemoCommentListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1	= 1
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag			= "InterfacedInvoiceDetails"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag			= "InterfacedInvoiceDetail"

		PayablesInvoiceDocumentGeneration
			include IDMXMLDefinition
			initialize AttributeCtr
			initialize IDMAttributes
			IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName  	= "Company"
			IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue  	= Company
			IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName  	= "Vendor"
			IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue  	= Vendor
			IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName  	= "PayablesInvoice"
			IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue  	= PayablesInvoice
			IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName  	= "InvoiceType"
			IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue  	= DerivedInvoiceTypeForIDM
			IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName  	= "Invoice"
			IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue  	= Invoice
			IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName  	= "Status"
			IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue  	= DerivedStatusForIDM
			IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName  	= "PurchaseOrder"
			IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue  	= DerivedFirstPurchaseOrder
			IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName  	= "InvoiceAmount"
			IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue  	= InvoiceAmount.CurrencyAmount


			initialize LocalColSequence
			IDMAttributes.MultiValue1.IDMAttributeName = "Project"
			for each distinct DistributionAccount.Project in PayablesInvoiceDistributionRel
				if (LocalColSequence < 100)
					LocalColSequence = LocalColSequence + 1
					IDMAttributes.MultiValue1.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.Project
				else
					end for each

			initialize LocalColSequence
			IDMAttributes.MultiValue2.IDMAttributeName = "AccountingUnit"
			for each distinct DistributionAccount.AccountingUnit in PayablesInvoiceDistributionRel
				if (LocalColSequence < 100)
					LocalColSequence = LocalColSequence + 1
					IDMAttributes.MultiValue2.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.AccountingUnit
				else
					end for each


			IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName  	= "ProcessLevel"
			IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue  	= ProcessLevel
			IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName  	= "Suffix"
			IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeValue  	= Suffix
			IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeName  	= "CompanyName"
			IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeValue  	= Company.Name
			IDMAttributes.SingleValue.IDMAttribute[12].IDMAttributeName  	= "VendorName"
			IDMAttributes.SingleValue.IDMAttribute[12].IDMAttributeValue  	= Vendor.VendorName

			if (IDMAdditionalAttributesLinesRel exists)
				AttributeCtr = 13
				include IDM.IDMAdditionalAttributes

			IDMGenerateDocument.IDMAttributes		= IDMAttributes
			IDMGenerateDocument.TemplateUniqueId	= Company.PayablesChargebackTemplate.IDMUniqueId
			IDMGenerateDocument.DocumentType		= "FSM_PayablesInvoice"
			IDMGenerateDocument.FileName			= DerivedPayablesChargebackFileName + Company.PayablesChargebackTemplate.DerivedOutputFormat

			IDMGenerateDocument.IDMAccessControlList = "CSFDefined"


			if ((IDMInvoiceSentToVendor or (not IDMInvoiceSentToVendor and not TransientIDMWatermark = "Cancelled"))
			and Company.EmailPayablesChargeback
			and Vendor.AutomaticEmailingOfCreditMemo
			and Vendor.EmailAddress entered
			and IsVendorPrimaryContactEmailCreditMemoEnabled)

				IDMGenerateDocument.IDMEmail.From				= Company.PayablesChargebackFromAndReplyToEmail
				IDMGenerateDocument.IDMEmail.To					= Vendor.EmailAddress
				IDMGenerateDocument.IDMEmail.Cc					= DerivedCcEmailAddress

				if (Company.PayablesChargebackIDMEmailSubject entered)
					if (TransientIDMWatermark = "Cancelled")
						IDMGenerateDocument.IDMEmail.Subject		= "[CANCELLED] " + DerivedCompanyEmailSubject
					else
						IDMGenerateDocument.IDMEmail.Subject		= DerivedCompanyEmailSubject
				else
					if (TransientIDMWatermark = "Cancelled")
						IDMGenerateDocument.IDMEmail.Subject		= "[CANCELLED] " + DerivedEmailSubject
					else
						IDMGenerateDocument.IDMEmail.Subject		= DerivedEmailSubject

				if (Company.PayablesChargebackEmailTemplate entered)
					IDMGenerateDocument.EmailTemplateUniqueID	= Company.PayablesChargebackEmailTemplate.IDMUniqueId
				else
					IDMGenerateDocument.IDMEmail.Body			= ""

			if (not TransientIDMWatermark = "Cancelled"
			and Company.PrintPayablesChargeback)
				IDMGenerateDocument.IDMPrinter = LocalIDMPrinter 


		PurgeInvoiceData
			initialize LocalPurgeInBackground
			if(instance count of PayablesInvoiceWithholdingPurgeRel > 50)
				LocalPurgeInBackground = true
				invoke PurgePayablesInvoiceWithholding PayablesInvoiceWithholding in background group(PurgeInvoiceBackgroundGroupKey)
					invoked.PrmPayablesCompany	= Company
					invoked.PrmPayablesInvoice	= PayablesInvoice
			else
				invoke Purge PayablesInvoiceWithholdingPurgeRel
			invoke Purge PayablesInvoicePaymentsPurgeRel
			invoke Purge PayablesInvoiceAuditPurgeRel
			invoke Purge PayablesInvoiceTaxPurgeRel
			if(instance count of PayablesInvoiceDistributionPurgeRel > 50)
				LocalPurgeInBackground = true
				invoke PurgeDeleteDistributionsForInvoice PayablesInvoiceDistribution in background group(PurgeInvoiceBackgroundGroupKey)
					invoked.PrmPayablesCompany	= Company
					invoked.PrmPayablesInvoice	= PayablesInvoice
			else
				invoke Purge PayablesInvoiceDistributionPurgeRel
			invoke Purge PayablesInvoiceDistributionSummaryPurgeRel 
			invoke Purge PayablesCreditMemoPurgeRel
			invoke Purge PayablesInvoiceCommentsPurgeRel
			invoke Purge PayablesInvoiceEmailPurgeRel
			if(instance count of PayablesInvoiceRetainageDistributionPurgeRel > 50)
				LocalPurgeInBackground = true
				invoke PurgePayablesInvoiceRetainageDistribution PayablesInvoiceRetainageDistribution in background group(PurgeInvoiceBackgroundGroupKey)
					invoked.PrmPayablesCompany	= Company
					invoked.PrmPayablesInvoice	= PayablesInvoice
			else
				invoke Purge PayablesInvoiceRetainageDistributionPurgeRel
			invoke Purge MatchPurchaseOrderInvoicesPurgeRel
			if(instance count of PayablesInvoiceDetailPurgeRel > 50)
				LocalPurgeInBackground = true
				invoke PurgePayablesInvoiceDetail PayablesInvoiceDetail in background group(PurgeInvoiceBackgroundGroupKey)
					invoked.PrmPayablesCompany	= Company
					invoked.PrmPayablesInvoice	= PayablesInvoice	
			else
				invoke PurgeDetailRecords PayablesInvoiceDetailPurgeRel
			invoke Purge PayablesInvoiceAddOnChargePurgeRel
			invoke Purge PayablesInvoiceSpreadAddOnChargePurgeRel
			invoke Purge ProcurementTransactionDistributionPurgeRel
			invoke Purge PurchaseOrderReceiptInvoiceLinkPurgeSymbKeyRel
			invoke Purge MatchReconQueuePurgeRel
			invoke Purge MatchInvoiceReference2PurgeRel
			invoke Purge PayablesInvoiceSupplierAddOnChargePurgeRel
			invoke DeleteOnSendForPayment PayablesInvoiceDocumentRel 
			if  (MatchAgingInvoiceRel exists)
				if (IsMatched)
					invoke Unmatch MatchAgingInvoiceRel
				invoke Delete MatchAgingInvoiceRel

			if (!MatchProcessType.Expense)
				invoke PurgeSetsAndResourceRecords MatchReconQueueRel
				invoke PurgeDetail MatchWorkRel
				invoke Purge MatchWorkRel
				invoke Purge MatchReconQueueRel

			if (LocalPurgeInBackground)
				invoke Purge in background
					run after background group (PurgeInvoiceBackgroundGroupKey)
			else
				invoke Purge

		FESReleaseEdit
			initialize FESFundingSourceTable
			for each PayablesInvoiceDistribution set
				if (each.Status.Unreleased				
				and each.DistributionAccount.Project entered
				and each.DistributionAccount.FinanceDimension2 entered
				and each.ProjectFundingSourceRel exists
				and each.UncommittedProjectAmount entered)
					FESCounter = 1
					while (FESCounter < 1000)
						if (FESFundingSourceTable.FESFundingSource[FESCounter] not entered)
							FESFundingSourceTable.FESFundingSource[FESCounter].ProjectContract   = each.ProjectFundingSourceRel.ProjectContract
							FESFundingSourceTable.FESFundingSource[FESCounter].FinanceDimension2 = each.ProjectFundingSourceRel.FinanceDimension2
							FESFundingSourceTable.FESFundingSource[FESCounter].RemainingAmount	 = each.ProjectFundingSourceRel.RemainingFESAmount - each.UncommittedProjectAmount
							FESCounter = 1000
						else
						if (FESFundingSourceTable.FESFundingSource[FESCounter].ProjectContract   = each.ProjectFundingSourceRel.ProjectContract
						and	FESFundingSourceTable.FESFundingSource[FESCounter].FinanceDimension2 = each.ProjectFundingSourceRel.FinanceDimension2)
							FESFundingSourceTable.FESFundingSource[FESCounter].RemainingAmount  -= each.UncommittedProjectAmount
							FESCounter = 1000
						else
							FESCounter += 1
			FESCounter = 1
			while (FESCounter < 1000)
				if (FESFundingSourceTable.FESFundingSource[FESCounter] not entered)
					FESCounter = 1000
				else
					constraint (FESFundingSourceTable.FESFundingSource[FESCounter].RemainingAmount >= 0)
						"APFES:\Front_\End_\SplitAmountExceedsRemainingFundedAmountFor<FESFundingSourceTable.FESFundingSource[FESCounter].FinanceDimension2>"
				FESCounter += 1


		SubmitForApprovalOrReleaseIntercompanyBillingEdits 
			if (ForIntercompanyBilling)
				constraint (IntercompanyBillingTransactionRel exists)
					"InvoiceSetForIntercompanyBillingButDoesNotHaveAnyIntercompanyBillingDistributions"

				if  (ReceivableCompanyRel.UseBillFromFunctionalCurrency.Yes
				or  (ReceivableCompanyRel.UseBillFromFunctionalCurrency.UseIntercompanyBillingGroupValue
				and  IntercompanyBillingGroupRel.UseBillFromFunctionalCurrency))
					constraint (InvoiceCurrency = Company.Currency)
						"InvoiceSetForIntercompanyBillingAndRequiresInvoiceCurrency<InvoiceCurrency>ToBeInCompanyFunctionalCurrency<Company.Currency>"
				LocalICBillToAmountMismatch	 = false  
				for each distinct ToCompany in IntercompanyBillingTransactionRel
					LocalICBillToCompany = each.ToCompany
					if (sum IntercompanyBillingBillToCompanyTransactionRel.TransactionAmount = 0)
						LocalICBillToAmountMismatch	 = true
						end for each
				constraint (!LocalICBillToAmountMismatch)
					"SumOfIntercompanyBillingBillToCompany<LocalICBillToCompany>DistributionAmountsEqualsZero;MustSumToANonZeroAmount"





	Field Rules

		AccrualCode		
			default to VendorCompanyDefaultRel.AccrualCode
			default to Vendor.AccrualCode
			default to ProcessLevel.AccrualCode
			default to Company.AccrualCode
			if (InvoiceType.MatchPrepayment)		
				if (ProcessLevel.MatchPrepayAccrualCode entered)
					AccrualCode = ProcessLevel.MatchPrepayAccrualCode
				else
					if (Company.MatchPrepayAccrualCode entered)
						AccrualCode = Company.MatchPrepayAccrualCode			
			required
				"AccrualCodeIsRequired;DefaultNotDefinedForCompany<Company>"	
			constraint (PayablesAccrualCodeDetailRel exists)
				"AccrualCodeDetailRecordForAccrualCode<AccrualCode>DoesNotExistForCompany<Company>"
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed		

		AllowableAmountForDiscount		
			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be changed
					"CannotChangeAllowableAmount;MultiplePaymentsExist"    

			if (AllowableAmountForDiscount < 0)
				constraint (InvoiceAmount.CurrencyAmount < 0)
					"AllowableAmount<AllowableAmountForDiscount>AndInvoiceAmount<InvoiceAmount.CurrencyAmount>MustHaveTheSameSign"	
			else
			if (AllowableAmountForDiscount > 0)
				constraint (InvoiceAmount.CurrencyAmount > 0)
					"AllowableAmount<AllowableAmountForDiscount>AndInvoiceAmount<InvoiceAmount.CurrencyAmount>MustHaveTheSameSign"	

			if (!IsSplitInvoice)
				if (MatchProcessType.Expense		
				and !IsChargeback)
					if (InvoiceType.CreditMemo
					or  InvoiceType.PrepaymentCredit)
						constraint (AllowableAmountForDiscount >= InvoiceAmount.CurrencyAmount)
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanCreditAmount<InvoiceAmount.CurrencyAmount>"	
					else
						constraint (AllowableAmountForDiscount <= InvoiceAmount.CurrencyAmount)
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
				else
					if (InvoiceType.CreditMemo
					or  InvoiceType.PrepaymentCredit)
						constraint (AllowableAmountForDiscount >= CalculatedAllowableAmount)		
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanCalculatedGoods<CalculatedAllowableAmount>"	
					else
						constraint (AllowableAmountForDiscount <= CalculatedAllowableAmount)		
							"AllowableAmount<AllowableAmountForDiscount>CannotBeGreaterThanCalculatedGoods<CalculatedAllowableAmount>"	

			if (!Status.Unreleased
			and !TransientAllowAmountUpdate
			and !Status.PendingApproval)
				cannot be changed

		ApprovalCategory
			if (Company.EnforceExistenceOfApprovalCategory)			
				constraint (ApprovalCategory exists)
					"ApprovalCategoryDoesNotExist"
		
		AuthorityCode			
			if (ActionType.CreateType
			or (ActionType.UpdateType		
			and Vendor changed))			
				default to VendorCompanyDefaultRel.AuthorityCode
				default to Vendor.AuthorityCode
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		BankInstructions1		
			constraint (!InvoiceType.CreditMemo
			and			!InvoiceType.PrepaymentCredit)
				"CannotEnterBankInstructionsOnCreditMemo"
			if (AmountPaid entered
			or  PaymentsHaveBeenMadeRel exists
			or  PaymentsHaveBeenScheduledRel exists)
				cannot be changed
					"CannotChangeField;PaymentsHaveBeenMade,ScheduledOrInProcess"
			constraint (Company.AllowBankInstructionsOverride)		
				"BankInstructionsOverrideNotAllowedOnPayablesCompany<Company>"

			if (BankInstructions1 changed
			and BankInstructions1 entered)
				for each OpenPayablesInvoicePaymentRel
					invoke FastUpdate each
						invoked.SeparatePayment = true

		BankInstructions2		
			constraint (!InvoiceType.CreditMemo
			and			!InvoiceType.PrepaymentCredit)
				"CannotEnterBankInstructionsOnCreditMemo"
			if (AmountPaid entered
			or  PaymentsHaveBeenMadeRel exists
			or  PaymentsHaveBeenScheduledRel exists)
				cannot be changed
					"CannotChangeField;PaymentsHaveBeenMade,ScheduledOrInProcess"
			constraint (Company.AllowBankInstructionsOverride)		
				"BankInstructionsOverrideNotAllowedOnPayablesCompany<Company>"

			if (BankInstructions2 changed		
			and BankInstructions2 entered)		
				for each OpenPayablesInvoicePaymentRel
					invoke FastUpdate each
						invoked.SeparatePayment = true

		BankInstructions3		
			constraint (!InvoiceType.CreditMemo
			and			!InvoiceType.PrepaymentCredit)
				"CannotEnterBankInstructionsOnCreditMemo"
			if (AmountPaid entered
			or  PaymentsHaveBeenMadeRel exists
			or  PaymentsHaveBeenScheduledRel exists)
				cannot be changed
					"CannotChangeField;PaymentsHaveBeenMade,ScheduledOrInProcess"
			constraint (Company.AllowBankInstructionsOverride)		
				"BankInstructionsOverrideNotAllowedOnPayablesCompany<Company>"

			if (BankInstructions3 changed		
			and BankInstructions3 entered)		
				for each OpenPayablesInvoicePaymentRel
					invoke FastUpdate each
						invoked.SeparatePayment = true

		BankInstructions4		
			constraint (!InvoiceType.CreditMemo
			and			!InvoiceType.PrepaymentCredit)
				"CannotEnterBankInstructionsOnCreditMemo"
			if (AmountPaid entered
			or  PaymentsHaveBeenMadeRel exists
			or  PaymentsHaveBeenScheduledRel exists)
				cannot be changed
					"CannotChangeField;PaymentsHaveBeenMade,ScheduledOrInProcess"
			constraint (Company.AllowBankInstructionsOverride)		
				"BankInstructionsOverrideNotAllowedOnPayablesCompany<Company>"

			if (BankInstructions4 changed		
			and BankInstructions4 entered)		
				for each OpenPayablesInvoicePaymentRel
					invoke FastUpdate each
						invoked.SeparatePayment = true

		BankTransactionCode		
			default to RemitToVendorCompanyDefaultRel.BankTransactionCode
			default to RemitToCode.BankTransactionCode
			default to PayVendorCompanyDefaultRel.BankTransactionCode	
			default to PayVendor.BankTransactionCode					
			if (PayVendor not entered)									
				default to VendorCompanyDefaultRel.BankTransactionCode
				default to Vendor.BankTransactionCode
			default to Vendor.VendorClass.BankTransactionCode
			default to ProcessLevel.PayGroup.BankTransactionCode
			default to Company.PayGroup.BankTransactionCode
			default to PayGroup.BankTransactionCode
			required
				"PaymentCodeIsRequired"                   
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
					"PaymentCodeCannotBeChanged;InvoiceIs<Status>"
			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be changed
					"MultiplePaymentsExist;UsePaymentScheduleTabForChanges"    

			constraint (!BankTransactionCode.BankTransactionType.BankService)
				"PaymentCodeMustBeCashOr\B\O\EPaymentType"		

			if (TransientPaymentNumber 	entered
			or  TransientPaymentDate	entered
			or  TransientPaymentAmount	entered)
				cannot be changed
					"MustUnapplyPaymentBeforeChangingPaymentCode"	

			if  (BankTransactionCode.BankTransactionType.CashPayment
			and !BankTransactionCode.PaymentOutputOption.NoOutput
			and AmountPaid						not entered)   	   
				include CashPaymentFormatEdits	

			if (BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				constraint (InvoiceCurrency = CashCode.Currency)
					"CashCodeCurrencyMust_=_InvoiceCurrencyFor\B\O\EPayment"		

			if  (BankTransactionCode entered
			and !BankTransactionCode.UsedFlag)
				invoke SetAsInUse BankTransactionCode

		BaseNumberOfDecimals		
			force default to Company.CurrencyNumberOfDecimals	

		CancelSequence		
			cannot be changed
				"CannotUpdateACanceledInvoice"	   

		CashCode	
			default to RemitToVendorCompanyDefaultRel.CashCode
			default to RemitToCode.CashCode
			default to PayVendorCompanyDefaultRel.CashCode		
			default to PayVendor.CashCode						
			if (PayVendor not entered)							
				default to VendorCompanyDefaultRel.CashCode
				default to Vendor.CashCode
			default to Vendor.VendorClass.CashCode
			default to ProcessLevel.CashCode
			default to Company.CashCode
			default to PayGroup.CashCode
			required
			if (CashCode.DefaultPostCompany    entered)            
				constraint (CompanyCashCodeRel exists)
					"CompanyCashCodeRelationshipDoesNotExistForCashCode:<CashCode>WithDefaultPostCompany:<DerivedCashPostingCompany>"
				if (action type.Create
				or CashCode changed)
					constraint (CompanyCashCodeRel.Active)
						"CompanyCashCodeIsNotActive"
				if  (Company.AccountingEntity != CashCode.DefaultPostCompany.AccountingEntity)
					constraint (GLInterEntityRelationRel exists)
						"RelationshipBetweenCompanyAccountingEntityAndCashCodeDefaultPostCompanyAccountingEntityDoesNotExist"

				constraint (CashCode.DefaultPostCompany.Currency = Company.Currency)
					"TheCashCodeDefaultPostingCompanyCurrencyMustEqualCompanyCurrency"

			else
				constraint (PayGroup.BaseCurrency = Company.Currency)		
					"CompanyBaseCurrency:<Company.Currency>MustEqualPayGroupBaseCurrency:<PayGroup.BaseCurrency>;EnterDefaultPostCompanyOnCashCode"
				constraint (CompanyCashCodeRel exists)			
					"Company_\Cash_\CodeRelationshipDoesNotExistFor_\Pay_\Group<PayGroup>_\Post_\Company<DerivedCashPostingCompany>and_\Cash_\Code<CashCode>"    
				if (action type.Create
				or CashCode changed)
					constraint (CompanyCashCodeRel.Active)
						"Company_\Cash_\CodeRelationshipIsNotActiveFor_\Company<DerivedCashPostingCompany>and_\Cash_\Code<CashCode>"
  			if (CashCode changed)
				constraint (!any PayablesInvoicePaymentRel.TransactionIDNumber entered)
					"MustUnapplyPaymentBeforeChangingCashCode"	     
			if (InvoiceCurrency != CashCode.Currency)
				constraint (!BankTransactionCode.BankTransactionType.BillOfExchangePayment)
					"CashCodeCurrencyMust_=InvoiceCurrFor_\B\O\EPmt"          
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		Company		
			initial value is ActorAgentSupplierGroupRel.SupplierSubmittedInvoiceCompany

		ContractRebateGroup		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			if  (ActionType.UpdateType									
			and (ContractRebateGroup.ContractGroup 		changed			
			or   ContractRebateGroup.Contract 			changed			
			or   ContractRebateGroup.ContractRebateType changed			
			or   ContractRebateGroup.ContractRebateDue 	changed))		
				invoke Update PayablesInvoiceDistributionRel			
					invoked.ContractRebateGroup	= ContractRebateGroup	

		CreatedBy	
			default to actor
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		CurrencyTable	
			default to CompanySystemClosingControlRel.CurrencyTable
			default to Company.CurrencyTable

			if (!Status.Unreleased
			and !Status.PendingApproval
			and old CurrencyTable entered)	
				cannot be changed

		DiscountAmount	
			if (DiscountAmount.CurrencyAmount entered
			and DiscountAmount.ExchangeDate not entered)
				DiscountAmount.ExchangeDate	= InvoiceAmount.ExchangeDate 
				DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

			if (!InvoiceType.CreditMemo
			and !InvoiceType.PrepaymentCredit)
				constraint (DiscountAmount.CurrencyAmount <= InvoiceAmount.CurrencyAmount)
					"DiscountAmount<DiscountAmount.CurrencyAmount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	   
			else
				constraint (InvoiceAmount.CurrencyAmount <= DiscountAmount.CurrencyAmount)
					"DiscountAmount<DiscountAmount.CurrencyAmount>CannotBeGreaterThanCreditMemoAmount<InvoiceAmount.CurrencyAmount>"	   

			if (MultiplePayablesInvoicePaymentRelExists
			and (DiscountAmount.CurrencyAmount entered								
			or   DiscountAmount.FunctionalAmount.EnteredCurrencyAmount entered))	
				cannot be changed
					"CannotChangeDiscountAmount;MultiplePaymentsExist"                   

			if (RecurringFrequency entered
			and DiscountDate not entered
			and Status.Released)
				constraint (DiscountAmount.CurrencyAmount not changed)
					"ForRecurringInvoice;UsePaymentsTabToAddDiscount"			

			if ((DiscountDate entered
			and  DiscountPercent not entered)
			and  TermsCode not entered)
				required
					"DiscountAmountRequiredIfDiscountDateEntered"        

			if (RecurringFrequency entered
			and DiscountDate not entered
			and Status.Released)
				constraint (DiscountAmount.CurrencyAmount not changed)
					"ForRecurringInvoice;UsePaymentsTabToAddDiscount"		

			if (DiscountAmount.CurrencyAmount entered)
				constraint (DiscountDate entered)
					"DiscountDateRequiredIfDiscountAmountEntered"        

			if (!Status.Unreleased
			and !Status.PendingApproval
			and !TransientAllowAmountUpdate
			and !TransientCurrencyRefresh)
				constraint (DiscountAmount.CurrencyAmount not changed)
					"InvoiceIsReleased;DiscountAmountCannotChange"

			if (TermsCode						!entered
			and DiscountAmount.CurrencyAmount	entered)
				DiscountAmount1 = DiscountAmount.CurrencyAmount	

		DiscountAmount1	
			if  (DiscountDate1 						entered
			and  DiscountPercent1 				not entered)
				required
					"Tier1DiscountAmountOrRateRequiredIfDiscountDateEntered"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			if (IsCreditInvoice)
				constraint (DiscountAmount1 >= InvoiceAmount.CurrencyAmount)
					"TierDiscountAmount1<DiscountAmount1>CannotExceedInvoiceAmount<InvoiceAmount.CurrencyAmount>"
			else
				constraint (DiscountAmount1 <= InvoiceAmount.CurrencyAmount)
					"TierDiscountAmount1<DiscountAmount1>CannotExceedInvoiceAmount<InvoiceAmount.CurrencyAmount>"

		DiscountAmount2	
			if  (DiscountDate2 						entered
			and  DiscountPercent2 				not entered)
				required
					"Tier2DiscountAmountOrRateRequiredIfDiscountDateEntered"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			if (IsCreditInvoice)
				constraint (DiscountAmount2 >= InvoiceAmount.CurrencyAmount)
					"TierDiscountAmount2<DiscountAmount2>CannotExceedInvoiceAmount<InvoiceAmount.CurrencyAmount>"
			else
				constraint (DiscountAmount2 <= InvoiceAmount.CurrencyAmount)
					"TierDiscountAmount2<DiscountAmount2>CannotExceedInvoiceAmount<InvoiceAmount.CurrencyAmount>"

		DiscountAmount3	
			if  (DiscountDate3 						entered
			and  DiscountPercent3 				not entered)
				required
					"Tier3DiscountAmountOrRateRequiredIfDiscountDateEntered"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			if (IsCreditInvoice)
				constraint (DiscountAmount3 >= InvoiceAmount.CurrencyAmount)
					"TierDiscountAmount3<DiscountAmount3>CannotExceedInvoiceAmount<InvoiceAmount.CurrencyAmount>"
			else
				constraint (DiscountAmount3 <= InvoiceAmount.CurrencyAmount)
					"TierDiscountAmount3<DiscountAmount3>CannotExceedInvoiceAmount<InvoiceAmount.CurrencyAmount>"

		DiscountCode	
			required
				"DiscountCodeIsRequiredOnPayablesCompany"

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			if (DiscountCode changed
			and DiscountCode entered)
				invoke UpdateDiscountCode first PayablesInvoicePaymentRel
					invoked.PrmDiscountCode 		= DiscountCode

		DiscountDate	
			DiscountAmount.ExchangeDate		= InvoiceAmount.ExchangeDate 

			if (Vendor.TermsCalculation.UseInvoiceDate)
				LocalTermsCalculation = LocalTermsCalculation.UseInvoiceDate
			else
				if (Vendor.TermsCalculation.UseLatestReceiptDate)
					LocalTermsCalculation = LocalTermsCalculation.UseLatestReceiptDate

			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be changed
					"CannotChangeDiscountDate;MultiplePaymentsExist"					

			if ((DiscountAmount.CurrencyAmount  entered
			or   DiscountPercent entered)
			and  TermsCode not entered)
				required
					"DiscountDateRequired"												

			constraint (DiscountDate >= InvoiceDate)
				"DisountDate<DiscountDate>CannotBeBeforeInvoiceDate<InvoiceDate>"		

			if (DueDate entered)
				constraint (DiscountDate <= DueDate)
					"DiscountDate<DiscountDate>CannotBeGreaterThanDueDate<DueDate>"		




			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if (TermsCode 		!entered
			and DiscountDate	entered)
				DiscountDate1 = DiscountDate	

		DiscountDate1	
			if (DiscountAmount1 	entered
			or  DiscountPercent1 	entered)
				required
					"Tier1DiscountDateRequiredIfRateOrAmountEntered"  		
			constraint (DiscountDate1 >= InvoiceDate)
				"Tier1DiscountDateCannotBeLessThanInvoiceDate"			
			if (DueDate entered)
				constraint (DiscountDate1 <= DueDate)
					"Tier1DiscountDateCannotBeGreaterThanDueDate"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		DiscountDate2	
			if (DiscountAmount2 	entered
			or  DiscountPercent2 	entered)
				required
					"Tier2DiscountDateRequiredIfRateOrAmountEntered"  		
			constraint (DiscountDate2 >= InvoiceDate)
				"Tier2DiscountDateCannotBeLessThanInvoiceDate"			
			constraint (DiscountDate2 != DiscountDate)
				"Tier2DiscountDateCannotBeTheSameAsDiscountDate"
			constraint (DiscountDate1 != DiscountDate2)
				"Tier2DiscountDateCannotBeTheSameAsTier1DiscountDate"
			if (DueDate entered)
				constraint (DiscountDate2 <= DueDate)
					"Tier2DiscountDateCannotBeGreaterThanDueDate"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		DiscountDate3	
			if (DiscountAmount3 	entered
			or  DiscountPercent3 	entered)
				required
					"Tier3DiscountDateRequiredIfRateOrAmountEntered"  		
			constraint (DiscountDate3 >= InvoiceDate)
				"Tier3DiscountDateCannotBeLessThanInvoiceDate"			
			constraint (DiscountDate3 != DiscountDate)
				"Tier3DiscountDateCannotBeTheSameAsDiscountDate"
			constraint (DiscountDate3 != DiscountDate1)
				"Tier3DiscountDateCannotBeTheSameAsTier1DiscountDate"
			constraint (DiscountDate3 != DiscountDate2)
				"Tier3DiscountDateCannotBeTheSameAsTier2DiscountDate"
			if (DueDate entered)
				constraint (DiscountDate3 <= DueDate)
					"Tier3DiscountDateCannotBeGreaterThanDueDate"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		DiscountPercent		
			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be changed
					"CannotChangeDiscountRate;MultiplePaymentsExist"                  

			if ((DiscountAmount.CurrencyAmount 		not entered
			and (DiscountDate						entered
			or 	 AllowableAmountForDiscount 		entered))
			and  TermsCode 							not entered
			and  DiscountPercent1					not entered
			and  DiscountPercent2					not entered
			and  DiscountPercent3					not entered
			and  !FlexTerms)
				required
					"DiscountRateRequired"                

			constraint (DiscountDate entered)
				"DiscountDateRequired"                    

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if (TermsCode 		!entered
			and DiscountPercent	entered)
				DiscountPercent1 = DiscountPercent	

		DiscountPercent1	
			constraint (DiscountPercent1 >= 0%)
				"Tier1DiscountRateMustBePositive"                              
			if  (DiscountDate1 						entered
			and  DiscountAmount1 				not entered)
				required
					"Tier1DiscountPercentOrAmountRequiredIfDiscountDateEntered"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		DiscountPercent2	
			constraint (DiscountPercent2 >= 0%)
				"Tier2DiscountRateMustBePositive"                              
			if  (DiscountDate2 						entered
			and  DiscountAmount2 				not entered)
				required
					"Tier2DiscountPercentOrAmountRequiredIfDiscountDateEntered"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		DiscountPercent3	
			constraint (DiscountPercent3 >= 0%)
				"Tier3DiscountRateMustBePositive"                              
			if  (DiscountDate3 						entered
			and  DiscountAmount3 				not entered)
				required
					"Tier3DiscountPercentOrAmountRequiredIfDiscountDateEntered"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		DistributionCode	
			if (TransientDistCodeAccount entered)
				required
					"DistributionCodeRequiredWithDistributionCodeAccount"

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if  (DistributionCode entered)
				constraint (!MatchProcessType.ReceiptMatch)
					"CannotAddDistributionsToAnUnmatchedPurchaseOrderInvoice"		

		DistributionDate	
			if (Company.VendorGroup.InvoicePostDateDefaultOption.CurrentDate)		
				default to current corporate date									
			default to InvoiceDate



			if ((Status.Released													
			or  Status.Historical)
			and  !MatchPrepaymentMethod.PrepayFromInvoice 		
			and NonPostedDistributionRel !exists)
				cannot be changed
			if ((action type.Create					
			or   DistributionDate changed)			
			and	 !SkipValidationForRecurringInvoice	
			and  !TransientPostingStatus.History	
			and  CompanySystemClosingControlRel.Control 

			and  !InvoiceType.Prepayment
			and  !InvoiceType.PrepaymentCredit
			and  !Status.Amended)					
				constraint (DistributionDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostDateOf<DistributionDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

			if (InvoiceSource.IntercompanyBilling
			and !Status.Amended)
				cannot be changed
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"

		DiversityCode	
			default to RemitToVendorCompanyDefaultRel.DiversityCode
			default to RemitToCode.DiversityCode
			default to VendorCompanyDefaultRel.DiversityCode
			default to Vendor.DiversityCode

			if (Vendor.ValidateDiversityDates)
				constraint (ValidVendorDiversity)
					"DiversityCodeDoesNotExistForVendorOrVendorLocation"    
				if (VendorLocationDiversityRel exists)
					constraint (last VendorLocationDiversityRel.DiversityEffectiveDate <= InvoiceDate)
						"InvoiceDateOutsideDiversityCodeCertificationDateRange" 
					constraint (last VendorLocationDiversityRel.DiversityExpirationDate >= InvoiceDate)
						"InvoiceDateOutsideDiversityCodeCertificationDateRange" 
					if (InvoiceDate < last VendorLocationDiversityRel.DiversityEffectiveDate
					or  InvoiceDate > last VendorLocationDiversityRel.DiversityExpirationDate)
						DiversityCode = blank
				else
					constraint (last VendorDiversityRel.DiversityEffectiveDate <= InvoiceDate)
						"InvoiceDateOutsideDiversityCodeCertificationDateRange" 
					constraint (last VendorDiversityRel.DiversityExpirationDate >= InvoiceDate)
						"InvoiceDateOutsideDiversityCodeCertificationDateRange" 
					if (VendorDiversityRel exists)
						if (InvoiceDate < last VendorDiversityRel.DiversityEffectiveDate
						or  InvoiceDate > last VendorDiversityRel.DiversityExpirationDate)
							DiversityCode = blank
					else
						DiversityCode = blank

		DueDate	
			if  (InvoiceType.CreditMemo
			and	 Suffix = 111)
				default to current corporate date
			if (ActionType.UpdateType
			or  Vendor changed)				
				default to SaveDueDate
				default to old DueDate		
			if (!CreatedBySupplier)
		   		required		 
			constraint (DueDate >= InvoiceDate)
				"DueDateCannotBeBeforeInvoiceDate"                      

			if (RecurringFrequency.EndOfMonth)
				constraint (DueDate is last day in month)
					"IfRecurringScheduleIs_\EndOf_\Month,DueDate<DueDate>MustEqualEndOfMonth"	

			if (!Status.Unreleased)
				cannot be changed
					"CannotChangeDueDate;InvoiceStatusIs<Status>"	

		FirstPurchaseOrder		

			default to first MatchPurchaseOrderInvoicesRel.PurchaseOrder		

			if (MatchProcessType.AOCOnly)
				required
					"PurchaseOrderMustExistFor_\A\O\COnlyInvoice"             
			if (VendorReturn entered
			and InvoiceType.CreditMemo)
				cannot be entered
					"P\O_\NumberMustBeBlankWhenEntering_\Return_\Number"     

			if (MatchProcessType.Service
			and initiating action != "ReinstateCancelledInvoiceCancelled")
				required
					"P\ONumberRequiredForServiceOnlyInvoice"    

			if (ServiceContract entered)
				cannot be entered
					"P\ONumberCannotBeEnteredForServiceContractInvoice"

			if (MatchProcessType.ServiceContract)
				cannot be entered
					"P\ONumberCannotBeEnteredForServiceContractInvoice"

			if (FirstPurchaseOrder entered)
				if  (FirstPurchaseOrder.SubcontractorPurchaseOrder)
					constraint (FirstPurchaseOrder.Approved)
						"CannotAddTheInvoiceAsThePurchaseOrderIsNotApproved" 

				if  ((!MatchProcessType.AOCOnly
				or   BypassMatch)
				and  !IsPOCancel)
					constraint (Vendor = FirstPurchaseOrder.Vendor)
						"InvoiceVendorDifferentFromPurchaseOrderVendor<FirstPurchaseOrder.Vendor>" 

				if  (FirstPurchaseOrder.PurchaseFromLocation entered
				and (PurchaseFromLocation changed
				or   initiating action = "CreateInvoiceUnreleased")
				and  PurchaseFromLocation != FirstPurchaseOrder.PurchaseFromLocation
				and  !MatchProcessType.AOCOnly
				and  !IsPOCancel)
					confirmation required
						"InvoicePurchaseFromLocationDifferentThanPurchaseOrderPurchaseFromLocation<FirstPurchaseOrder.PurchaseFromLocation>"  

		FloatDays	


			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		ForIntercompanyBilling
			constraint (Company.IsAValidIntercompanyBillingCompany)
				"PayablesCompanyIsNotSetupForIntercompanyBilling;TheGlobalLedgerCompanySetForIntercompanyBilling,ThePayablesCompanyAndItsAssociatedReceivableCompanyMustBeSetupWithDefaultsForIntercompanyBilling"

			if (IntercompanyBillingTransactionRel exists)
				cannot be changed
					"For_Intercompany_BillingFlagCannotBeChanged;IntercompanyBillingDistributionsExists"

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
					"<InvoiceReleasedCannotChangeThisField>_For_Intercompany_Billing"

		IncomeCode	
			if  (ActionType.CreateType
			and !InvoiceSource.DebtorCreditMemo	
			or  (ActionType.UpdateType		
			and  Vendor changed))			
				default to VendorCompanyDefaultRel.IncomeCode
				default to Vendor.IncomeCode
				default to Vendor.VendorClass.IncomeCode

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
					"InvoiceReleased:Use_\Update_\Income_\CodeActionOn_\Pay_\ScheduleToChange_\Income_\Code"

		IncomeWithholdingCode	
			if (AllowVendorWithholdingCode)
				default to VendorWithholdingCodesAsDefaultRel.IncomeWithholdingCode
				if (IncomeWithholdingCode entered)
					constraint (VendorWithholdingCode exists)
						"DefaultVendorWithholdingCodeDoesNotExistOnVendor<Vendor>"
				else																	
					required
						"VendorWithholdingCodeIsRequired"
			else
			if (!Company.GlobalWithholding							
			and Vendor.IncomeWithholding)	
				default to ProcessLevel.IncomeWithholdingCode		
				default to Company.IncomeWithholdingCode
			else
				cannot be entered
					"VendorIsNotSetUpForIncomeWithholding"

		Invoice		

			constraint (PayablesInvoiceHistoryRel not exists)
				"Invoice<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"                
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if (InvoiceSource.IntercompanyBilling)
				cannot be changed
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"

			if (action type.Create					
			and !IsRecurringInvoice					
			and !IsChargebackSubType				
			and Suffix != 888						
			and Suffix != 999						
			and !InvoiceType.PrepaymentCredit)		
				constraint (DuplicateRecurringInvoiceRel not exist)	
					"CannotCreate;RecurringInvoiceExistsForThisVendor"

		InvoiceAmount	
			if (InvoiceAmount.ExchangeDate	!entered)
				InvoiceAmount.ExchangeDate	= DerivedExchangeDate

			if  (FirstPurchaseOrder entered
			and  FirstPurchaseOrder exists)

				if (!MatchProcessType.AOCOnly)
					if  (FirstPurchaseOrder.ReceiptCurrencyConversionRate entered
					and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.ReceiptCurrencyConversionRate
						InvoiceAmount.KeepRateOnly	= true

					else
					if  (FirstPurchaseOrder.EnteredCurrencyConversionRate entered
					and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry)
						InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.EnteredCurrencyConversionRate
						InvoiceAmount.KeepRateOnly	= true






			if (InvoiceAmount.CurrencyAmount changed
			or  InvoiceCurrency changed)					
				InvoiceAmount.KeepRateOnly	= true			




				initialize RevaluedBaseAmount

			if (InvoiceAmount.CurrencyAmount changed)
				constraint (!HasCreditApplied)				
				    "InvoiceHasCreditsApplied;MustUnapplyCreditsToChangeAmount"
				constraint (!IsInvoiceApplied)				
				    "CreditHasanInvoiceApplied;MustUnapplyInvoiceToChangeAmount"				

			if (NumOfInvoicePayments > 1
			and InvoiceAmount.CurrencyAmount changed)
				cannot be changed
					"CannotChangeInvoiceAmount;MultiplePaymentsExist"	     

			if (Vendor.MaximumInvoiceAmount entered)
				constraint (InvoiceAmount.CurrencyAmount <= Vendor.MaximumInvoiceAmount)		
					"InvoiceAmountExceedsVendorMaximumOf<Vendor.MaximumInvoiceAmount>"              

			if (InvoiceType.DebitMemo
			or  InvoiceType.Prepayment
			or  InvoiceType.MatchPrepayment
			or  InvoiceType not entered)
				include FlipInvoiceAmountFieldsToPos		
				include FlipDiscountAmountFieldsToPos		
				constraint (InvoiceAmount.CurrencyAmount >= 0)
					"ThisInvoiceTypeCannotHaveANegativeAmount"                
			else
				if (InvoiceType.CreditMemo
				or  InvoiceType.PrepaymentCredit)
					include FlipInvoiceAmountFieldsToNeg
					include FlipDiscountAmountFieldsToNeg

			InvoiceAmount.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency

			if (!Status.Unreleased
			and !Status.PendingApproval
			and !TransientAllowAmountUpdate
			and  InvoiceAmount.CurrencyAmount changed)
				cannot be changed

			if (InvoiceSource.IntercompanyBilling)
				constraint (InvoiceAmount.CurrencyAmount not changed)
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"

			if (MatchCompanyRel.MatchMemoDelayHardEdits)
				if (HasMatchInvoiceReferenceRel
				and AbsoluteValueInvoiceAmount > MatchInvoiceReferenceRel.OriginalInvoice.InvoiceAmount.CurrencyAmount)
					confirmation required
						"CreditMemoAmountCannotExceedOriginalInvoiceAmount<MatchInvoiceReferenceRel.OriginalInvoice.InvoiceAmount.CurrencyAmount>.Continue?" 
			else
			if ((InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
			and  HasMatchInvoiceReferenceRel)
				constraint (AbsoluteValueInvoiceAmount <= MatchInvoiceReferenceRel.OriginalInvoice.InvoiceAmount.CurrencyAmount)
					"CreditMemoAmountCannotExceedOriginalInvoiceAmount<MatchInvoiceReferenceRel.OriginalInvoice.InvoiceAmount.CurrencyAmount>" 
			else
			if ((InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
			and  OriginalInvoice entered)




				if  (OriginalInvoice.MatchProcessType.ServiceContract)
					if (OriginalInvoice.HasMultipleServiceContracts)
						initialize LocalAmount 
						for each OriginalInvoice.MatchServiceContractInvoicesRel 
							LocalAmount += each.Contract.AmountOrdered + each.Contract.TaxAmountOrdered + each.Contract.AddOnChargeAmountOrdered
						constraint (AbsoluteValueInvoiceAmount <= LocalAmount)
							"CreditMemoAmountCannotExceedAmountOrderedOnContract" 
					else
						constraint (AbsoluteValueInvoiceAmount <= ServiceContract.AmountOrdered + ServiceContract.TaxAmountOrdered + ServiceContract.AddOnChargeAmountOrdered)
							"CreditMemoAmountCannotExceedAmountOrderedOnContract" 
				else
					constraint (AbsoluteValueInvoiceAmount <= OriginalInvoice.InvoiceAmount.CurrencyAmount)
						"CreditMemoAmountCannotExceedOriginalInvoiceAmount" 


		InvoiceCurrency	
			default to first FirstPurchaseOrder.PurchaseOrder.Currency
			default to first MatchPurchaseOrderInvoicesRel.PurchaseOrder.Currency

			default to PurchaseFromLocation.InvoiceCurrency
			default to RemitToCode.InvoiceCurrency
			default to Vendor.InvoiceCurrency
			default to Vendor.VendorClass.Currency
			default to PayGroup.BaseCurrency
			default to Company.Currency	

			if (Vendor.BalanceCurrency entered)
				constraint (Vendor.BalanceCurrency = InvoiceCurrency)
					"InvoiceCurrencyMust_=VendorBalanceCurrency(<Vendor.BalanceCurrency>)"       

			if (!MatchProcessType.Expense
			and !MatchProcessType.ServiceContract
			and !MatchProcessType.AOCOnly)
				if  (MatchPurchaseOrderInvoicesRel exists)
					for each MatchPurchaseOrderInvoicesRel
						constraint (each.PurchaseOrder.Currency = InvoiceCurrency)
							"InvoiceCurrency<InvoiceCurrency>MustEqual_\P\OCurrency<each.PurchaseOrder.Currency>"                   
				else
				if  (FirstPurchaseOrder exists)
					constraint (FirstPurchaseOrder.Currency = InvoiceCurrency)
						"InvoiceCurrency<InvoiceCurrency>MustEqual_\P\OCurrency<FirstPurchaseOrder.Currency>"                   

			if (MatchProcessType.ServiceContract)
				constraint (ServiceContract.CurrencyCode = InvoiceCurrency)
					"InvoiceCurrency<InvoiceCurrency>MustEqualContractCurrency<ServiceContract.CurrencyCode>"                   

			if (!Status.Unreleased						
			and !Status.PendingApproval)				
				cannot be changed						

			if  (ForIntercompanyBilling
			and (ReceivableCompanyRel.UseBillFromFunctionalCurrency.Yes
			or   (ReceivableCompanyRel.UseBillFromFunctionalCurrency.UseIntercompanyBillingGroupValue
			and   IntercompanyBillingGroupRel.UseBillFromFunctionalCurrency)))
				constraint (InvoiceCurrency = Company.Currency)
					"InvoiceSetForIntercompanyBillingAndRequiresInvoiceCurrency<InvoiceCurrency>ToBeInCompanyFunctionalCurrency<Company.Currency>"

		InvoiceDate	
			constraint (InvoiceDate within Company.InvoiceDateRange)
				"Invoice_\DateNotWithin_\CompanyDateRange"                 
			if (IsPrepaymentType)
				required
					"PrepaymentDateIsRequired"
			else
				required	
					"InvoiceDateIsRequired"
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if (InvoiceSource.IntercompanyBilling)
				cannot be changed
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"

		InvoiceGroup	
			if  (ActionType.CreateType
			and !InvoiceSource.DebtorCreditMemo	
			or  (ActionType.UpdateType		
			and  Vendor changed))			
				default to RemitToCode.InvoiceGroup
				default to Vendor.InvoiceGroup
			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be changed
					"MultiplePaymentsExist;UsePaymentScheduleForChanges"              
			if (Status > 5)
				cannot be changed

		InvoiceReference	
			default to "IN"		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		InvoiceSearchDocument	
			initial value is InvoiceSearchInFieldMessage

		InvoiceType		
			if (!Status.Unreleased				
			or  InvoiceType.DebitMemo			
			or  InvoiceType.Prepayment			
			or  InvoiceType.PrepaymentCredit	
			or  InvoiceType.MatchPrepayment)	
				cannot be changed
					"CannotChangeInvoiceType"              

			if (TransientInvoiceEntryTemplate.MatchInvoice)
				constraint (!InvoiceType.Prepayment)
					"UseMatchPrepaymentInvoiceTypeForMatchTemplate"

			if (InvoiceType.MatchPrepayment
			and initiating action != "ReinstateCancelledInvoiceCancelled")	
				constraint (RetainageAccrualCode not entered)
					"CannotHavePrepaidInvoiceForRetainagePurchaseOrder"     

				constraint (FirstPurchaseOrder entered
				or          MatchPurchaseOrderInvoicesRel exists
				or          MatchReferenceNumber entered)
					"PurchaseOrderRequiredForMatchPrepayment"

		Location		
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if  (Location entered
			and  ServiceContract entered)
				if (ContractParticipantRestrictionsRel exists)
					constraint (ContractParticipantLocationsRel exists)
						"CannotAdd,LocationDoesNotParticipateInServiceContract"

		MatchInvoice	
			if (!Status.Unreleased)
				cannot be changed

		MatchReferenceNumber
			if (Vendor.RequireMatchReference
			and MatchProcessType.ReceiptMatch)
				required
					"VendorRequiresMatchReferenceNumber"
			else
				cannot be entered
					"VendorDoesNotUseMatchReferenceNumberMatching"

		MatchPrepayment			
			if (initiating action != "ChangeTemplate")
				cannot be changed

			if (MatchPrepayment not entered
			and InvoiceType.MatchPrepayment)
				MatchPrepayment = true
			else
			if (!InvoiceType.MatchPrepayment)
				MatchPrepayment = false

		MatchPrepaymentMethod			
			if (initiating action != "ChangeTemplate")
				cannot be changed

			if (InvoiceType.MatchPrepayment)
				default to Vendor.MatchPrepaymentMethod
				default to Vendor.VendorClass.MatchPrepaymentMethod
				required
					"MatchPrepaymentMethodRequiredForMatchPrepayment"
			else
				initialize MatchPrepaymentMethod	

			if (!MatchCompanyRel.EnablePOCostMessaging)
				constraint (!MatchPrepaymentMethod.EligibleForPrepay)
					"MatchCompanyMustEnablePOCostMessagingToUsePrepaymentMethodOfEligibleForPrepay"

			if (MatchPrepaymentMethod.PrepayFromInvoice)
				for each FirstPurchaseOrder.PurchaseOrderLine set
					for each each.PurchaseOrderLineDistributionsRel
						constraint (!each.DistributionByAmount)
							"UsePrepaymentMethodEligibleForPrepayIfPODistributionsAreByAmount"

			if  (MatchPrepaymentMethod.EligibleForPrepay
			and ((InvoiceAmount.CurrencyAmount - TaxAmount) < FirstPurchaseOrder.OpenPurchaseAmount))
				for each FirstPurchaseOrder.PurchaseOrderLine set
					if (each.Quantity = 1)
						confirmation required
							"PrepaymentMethodEligibleForPrepayUsesDetailMatchAndWillCloseReceiptLinesBasedOnQuantity.ForPartialPayments,MethodPrepayFromInvoiceIsRecommended.ContinueAnyway?"
						end for each

			if (MatchPrepaymentMethod entered
			and initiating action != "ReinstateCancelledInvoiceCancelled")	
				constraint (FirstPurchaseOrder.NonServiceLinesRel exists)
					"CannotCreateMatchPrepaymentForServicePurchaseOrder"

				constraint (!FirstPurchaseOrder.Dropship)
					"CannotCreateMatchPrepaymentForDropshipPurchaseOrder"

 		MatchProcessType	
			if (MatchProcessType entered
			and !Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if (FirstPurchaseOrder entered
			or  TransientInvoiceEntryTemplate.MatchInvoice)
				constraint (!MatchProcessType.Expense
				and         !MatchProcessType.ServiceContract)
					"CannotEnterAPurchaseOrderOnExpenseOrServiceContractInvoices"

				constraint (FirstPurchaseOrder entered
				or  MatchReferenceNumber entered)
					"PurchaseOrderRequiredForMatchInvoice"


		MatchTable		
			if  (!MatchProcessType.Expense)
				default to Vendor.MatchTable
				default to Vendor.VendorClass.MatchTable
				default to MatchCompanyRel.MatchTable
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		NatureOfTransactionCode	
			constraint (TaxEntityRel.IntrastatUsed)
				"TaxEntityNotDefinedFor_\IntrastatReporting"     
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		NumberOfDecimals		
			if (InvoiceCurrency = PayGroup.BaseCurrency)
				force default to Company.CurrencyNumberOfDecimals	
			else
				force default to InvoiceCurrency.NumberOfDecimals

		NumberOfRecurringInvoices		
			if (RecurringFrequency entered)
				required
					"NumberOfRecurrencesRequiredIfRecurringInvoice"

			if  (Status.Unreleased					
			and (Suffix not entered
			or   Suffix = 1))  
				if (Company.VendorGroup.InvoiceNumberEdit.CompanyVendor)
					constraint (!RecurringInvoiceDuplicateInvoiceRel exists)
						"CannotCreateRecurringInvoiceIfInvoiceAlreadyExists"
				else
					constraint (!RecurringInvoiceDuplicateInvoiceByVendorRel exists)
						"RecurringInvoice<Invoice>AlreadyExistsForCompany<first RecurringInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"

		OriginalInvoice

			if  (!MatchProcessType.Expense
			and (InvoiceType.DebitMemo
			or   InvoiceType.CreditMemo)
			and (Suffix != 999
			or   TaxEntityRel.ThirdParty.TaxEngine))

				if  (action type.Create)
					if (!MatchProcessType.AOCOnly)
						if  (CreditMemoReferenceInvoice entered
						and  CreditMemoReferenceInvoiceRel exists)
							default to CreditMemoReferenceInvoiceRel.PayablesInvoice

						if  (!MatchProcessType.ServiceContract)
							LocalPurchaseOrder = FirstPurchaseOrder
							if  (instance count of LocalMatchPurchaseOrderInvoicesRel = 1)
								default to first LocalMatchPurchaseOrderInvoicesRel.PayablesInvoice
				else
					OriginalInvoice	= MatchInvoiceReferenceRel.OriginalInvoice
				if  (!MatchCompanyRel.MatchMemoDelayHardEdits
				and  !MatchProcessType.ServiceContract
				and  !MatchProcessType.Service
				and  !MatchProcessType.AOCOnly)
					required
						"OriginalInvoiceRequiredForMatchDebitOrCreditMemo"

				if (OriginalInvoice entered)
					constraint (!OriginalInvoice.CreditOrDebitMemo)
						"OriginalInvoiceCannotBeDebitOrCredit"
					if (MatchCompanyRel.MatchMemoDelayHardEdits)
						if (OriginalInvoice.MatchStatus < 2)
							confirmation required
								"OriginalInvoiceIsNotMatched.Continue?"
						else
						if  (!OriginalInvoice.MatchProcessType.ServiceContract
						and  !OriginalInvoice.MatchProcessType.Service)
							if (!OriginalInvoice.MatchLevel.DetailMatch)
								confirmation required
									"OriginalInvoiceMustHaveBeenDetailMatched.Continue?"		
					else
						constraint (OriginalInvoice.MatchStatus > 1)
							"OriginalInvoiceMustBeMatched"
						if  (!OriginalInvoice.MatchProcessType.ServiceContract
						and  !OriginalInvoice.MatchProcessType.Service)
							constraint (OriginalInvoice.MatchLevel.DetailMatch)
								"OriginalInvoiceMustHaveBeenDetailMatched"		
		OriginCountry	
			if (PurchaseFromLocation entered)
				default to PurchaseFromVendorLocAddressRel.PostalAddress.Country
			else
				default to InvoiceVendorAddressRel.PostalAddress.Country

		OriginRegion	
			if (PurchaseFromLocation entered)
				default to PurchaseFromVendorLocAddressRel.PostalAddress.Region
			else
				default to InvoiceVendorAddressRel.PostalAddress.Region

		Operator		
			default to actor
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		PayCurrency	
			force default to CashCode.Currency 

		PayGroup	
			force default to ProcessLevel.PayGroup
			required
				"PayGroupIsRequiredOnTheCompanyOrProcLevel"       
			if (!Status.Unreleased
			and !Status.PendingApproval
			and !Status.Amended
			and !Status.Released)	
				cannot be changed

		PaymentCategoryCode
			default to Vendor.PaymentCategoryCode
			constraint (PaymentCategoryCode.Active)
				"PaymentCategoryIsInactive"
			if (Status.Released)
				cannot be changed
					"PaymentCategoryCodeCanNotBeChanged;InvoiceIsNotInUnreleasedState"

		PayVendor	
			initial value is Vendor.PayVendor
			default to Vendor.PayVendor		
			if (PayVendor changed)
				constraint (!PaymentsHaveBeenScheduledRel exists)	
					"CannotCancel;InvoiceScheduledForPayment"
				constraint (!PaymentsBeyondOpenStatusExist)
					"CannotChange;PaymentsHaveBeenMade"            
			if (Status.Paid
			or  Status.Historical
			or  any PayablesInvoicePaymentRel.Status.SelectedForPayment
			or  any PayablesInvoicePaymentRel.Status.SystemGeneratedPayment
			or  any PayablesInvoicePaymentRel.Status.ManuallyPaid
			or  any PayablesInvoicePaymentRel.Status.UnreleasedManualPayment)
				cannot be changed
					"PayVendorCannotBeChanged;PaymentsHaveBeenMade"
			constraint (!PayVendor.VendorStatus.Inactive)
				"VendorIsNotActive"                                
			if (Company.VendorGroup.EditForPayToVendor)					
				constraint (PayToVendorExistsRel exists)				
					"PayVendor<PayVendor>IsNotDefinedAsPayToVendorForVendor<Vendor>"
			if (InvoiceSource.IntercompanyBilling)
				cannot be changed
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"


		ProcessLevel	

			if (!MatchProcessType.Expense)
				default to FirstPurchaseOrder.ProcessLevel
				if (ProcessLevel !entered)
					LocalProcessLevel = ServiceContract.ProcessLevelGroup.ProcessLevel
					if (ContractProcessLevelRel exists)
						ProcessLevel = ServiceContract.ProcessLevelGroup.ProcessLevel
			default to VendorReturn.ProcessLevel
			default to VendorCompanyDefaultRel.ProcessLevel
			default to first DefaultProcessLevelRel.PayablesProcessLevel
			required	
				"ProcessLevelRequired"				
			if ((action type.Create														
			or   ProcessLevel	changed)
			and  MatchProcessType.Expense
			and  Vendor.VendorRestrictions.RestrictedProcessLevel entered)
				constraint (ProcessLevel = Vendor.VendorRestrictions.RestrictedProcessLevel)
					"VendorIsRestrictedToProcessLevel<Vendor.VendorRestrictions.RestrictedProcessLevel>"
			if (!Status.Unreleased
			and !Status.PendingApproval
			and !Status.Approved			
			and !Status.Amended				
			and !Status.Released)	
				cannot be changed

		PurchaseFromLocation	
			if (!MatchProcessType.Expense
			and !MatchProcessType.AOCOnly)
				BypassActiveVendorLocationEdit = true
				default to first FirstPurchaseOrder.PurchaseFromLocation
				default to first MatchPurchaseOrderInvoicesRel.PurchaseOrder.PurchaseFromLocation
				constraint (!PurchaseFromLocation.LocationType.RemitTo)							
					"PurchaseFromLocationTypeFromPurchaseOrderIsARemit-to,NotAPurchase-from"  	
			constraint (!PurchaseFromLocation.LocationType.RemitTo)
				"PurchaseFromLocationTypeIsRemit-to,NotPurchase-from"         
			if (MatchProcessType.Expense)
				constraint (PurchaseFromLocation.Status.Active)
					"PurchaseFromLocationIsInactive"                  
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		ReceiptOfInvoiceDate		
			initial value is current corporate date	
			default to current corporate date
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		Reference		

		ReferenceType
			if (CustomerID entered)
				required
					"Reference_\TypeIsRequiredIf_\N\O\R\D\I\C_\Reference_\NumberIsEntered"

				initialize ValidateCheckDigit
				if (ReferenceType.FikDenmark
				or	 ReferenceType.KidNorway)
					ValidateCheckDigit.ValidationType          = "T"
					ValidateCheckDigit.NumberToValidate = CustomerID		
					constraint (ValidateCheckDigit.IsNumberValid)
						"<ValidateCheckDigit.OutputErrorMessage>"		

				if (ReferenceType.ViiteFinland)
					ValidateCheckDigit.ValidationType          = "R"
					ValidateCheckDigit.NumberToValidate = CustomerID		
					constraint (ValidateCheckDigit.IsNumberValid)
						"<ValidateCheckDigit.OutputErrorMessage>"		


		RemitToCode	
			default to PayVendor.NormalRemitToLocation
			if (PayVendor = Vendor					
			or  MatchProcessType.Expense)			
				default to PurchaseFromLocation.RemitToCode
			constraint (!RemitToCode.LocationType.PurchaseFrom)
				"LocationTypeIsPurchase-from,NotRemit-to"           
			if (!TransientBypassEdit.ReverseDistributionForUpdate and Status.Unreleased)		
				constraint (!RemitToCode.Status.Inactive)
					"RemitToLocationIsInactive"               

		RevalueCurrency	
			if (OverrideRevalueCurrency entered)		
				if (OverrideRevalueCurrency.Yes)
					RevalueCurrency = true
				else
					RevalueCurrency = false
			else
				if (ActionType.CreateType
				and InvoiceCurrency = PayGroup.BaseCurrency)
					RevalueCurrency = false
				else
					if (ActionType.CreateType
					or (ActionType.UpdateType	
					and !RevalueCurrency
                    and InvoiceCurrency changed
                    and InvoiceCurrency != PayGroup.BaseCurrency))
						if (RemitToCode entered)
							default to RemitToCode.RevalueCurrency
						else
							if (PurchaseFromLocation entered)
								default to PurchaseFromLocation.RevalueCurrency
							else
								default to Vendor.RevalueCurrency

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		RoutingCategory	
			if (ActionType.CreateType
			or (ActionType.UpdateType		
			and Vendor changed))			
				default to VendorCompanyDefaultRel.InvoiceRoutingCategory
				default to PurchaseFromLocation.InvoiceRoutingCategory
				default to Vendor.InvoiceRoutingCategory
				default to Vendor.VendorClass.InvoiceRoutingCategory
				default to ProcessLevel.InvoiceRoutingCategory
				default to Company.InvoiceRoutingCategory

		SecondaryWithholding	
			if (ActionType.CreateType
			or (ActionType.UpdateType
			and Vendor changed))
				if (Vendor.ExemptFromSecondaryWithholding)
					SecondaryWithholding = false
				else
					SecondaryWithholding = Company.SecondaryWithholding

			if (!Company.SecondaryWithholding)
				constraint (!SecondaryWithholding)
					"CannotSet_\Secondary_\WithholdingTo\_'\True\';_\CompanySetTo\_'\False\'"	

			if (SecondaryWithholding changed)
				constraint (PaymentsHaveBeenMadeRel not exist)
					"CannotChangeSecondaryWithholding;_\PaymentsHaveBeenMade"	

		ServiceContract	
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			if (FirstPurchaseOrder entered
			or  MatchPurchaseOrderInvoicesRel exists)
				cannot be entered
					"CannotEnterBothPurchaseOrderAndServiceContract"
			if (!IsChargeback
			and Suffix != 888
			and Suffix != 999)
				constraint (MatchProcessType.ServiceContract)
					"MatchProcessTypeMustBeServiceContractWhenEnteringAServiceContract"

			if (TransientInvoiceEntryTemplate.ServiceContract
			or  MatchProcessType.ServiceContract)
				required

			if (PayablesInvoiceDetailRel exists)
				cannot be changed
					"CannotChangeServiceContractIfDetailsExist"

			if  (ServiceContract entered)
				if (ContractParticipantRestrictionsRel exists)
					constraint (ContractParticipantCompanyRel exists)
						"CannotAdd,CompanyDoesNotParticipateInServiceContract"

			constraint (ServiceContract.CurrencyCode = InvoiceCurrency)
				"InvoiceCurrency<InvoiceCurrency>MustEqualContractCurrency<ServiceContract.CurrencyCode>"                   

			if (ServiceContract entered
			and MatchStatus < 2)
				invoke ValidateContract ServiceContract
					invoked.EditDate			= InvoiceDate
					invoked.Source				= 3	
					invoked.PrmVendor			= Vendor
					invoked.PrmVendorLocation	= VendorLocationRel.VendorLocation

		ShippingMethod	
			constraint (TaxEntityRel.IntrastatUsed)
				"TaxEntityNotDefinedFor_\IntrastatReporting"	
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		ShipTerm	
			constraint (TaxEntityRel.IntrastatUsed)
				"TaxEntityNotDefinedFor_\IntrastatReporting"	
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		StatisticalProcedure	
			constraint (TaxEntityRel.IntrastatUsed)
				"TaxEntityNotDefinedFor_\IntrastatReporting"     
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		Suffix			
			if (!Status.Unreleased
			and !Status.PendingApproval
			and NumberOfRecurringInvoices not entered)		
				cannot be changed

		TaxableAmount		
			TaxableAmount = RoundedTaxableAmount		

			if (!MatchProcessType.Expense
			and AllowanceAOCRel exists)
				NextSentence = true
			else
			if (InvoiceType.CreditMemo
			or  InvoiceType.PrepaymentCredit)
				if (TaxableAmount > 0)		
					TaxableAmount *= -1
			else		
				if (TaxableAmount < 0)		
					TaxableAmount *= -1		

			if (TaxAdjustment.Calculate
			and !IsPOCancel)
				required
					"TaxableAmountRequiredWhenTaxAdjustmentSetToCalculate"         

				if (TaxAmount entered)
					constraint (TaxableAmount not = TaxAmount)
						"TaxAmountCannotEqualTaxableAmount"

			if (!Status.Unreleased
			and !TransientAllowAmountUpdate
			and !Status.PendingApproval)
				cannot be changed

		TaxAdjustment	
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

			if (FirstPurchaseOrder entered)
				if  (!MatchProcessType.Expense
				and (FirstPurchaseOrder.VendorInvoicedTaxAmount entered
				or   FirstPurchaseOrder.OtherVendorInvoicedTaxAmount entered
				or   FirstPurchaseOrder.AccruedTaxTotal entered)
				and (TaxAdjustment.OverrideProductOnly
				or   TaxAdjustment.OverrideProductAndAOC
				or   TaxAdjustment.OverrideTaxablePOLine
				or   TaxAdjustment.OverrideTaxablePOAndAOC))
					constraint (TaxableAmount not entered)
						"CannotEnterTaxableAmount,InvoiceHasPurchaseOrderThatIsTaxable"  

				if  (TaxAdjustment.IgnoreProductOnly
				or   TaxAdjustment.IgnoreProductAndAOC)
					constraint (FirstPurchaseOrder.VendorInvoicedTaxAmount entered
					or          FirstPurchaseOrder.OtherVendorInvoicedTaxAmount entered
					or          FirstPurchaseOrder.AccruedTaxTotal entered)
						"PurchaseOrderHasNoTaxableLines;TaxAdjustmentCannotBeIgnoreProductOnlyOrIgnoreProductAndAOC" 

			if (MatchProcessType.Expense)
				constraint (TaxAdjustment not entered)
					"CannotEnterTaxAdjustmentForExpenseInvoice" 

			if  (MatchProcessType.AOCOnly
			and  TaxCode entered)
				constraint (TaxAdjustment.OverrideProductAndAOC)
					"IfTaxCodeEnteredOnAddOnChargeOnlyInvoice,TaxAdjustmentMustBeOverrideProductAndAOC"  

		TaxAmount		
			TaxAmount = RoundedTaxAmount		

			if (!MatchProcessType.Expense
			and AllowanceAOCRel exists)
				NextSentence = true
			else
			if (TaxEntityRel.ThirdParty.TaxEngine)
				NextSentence = true 
			else 
			if (InvoiceType.CreditMemo
			or  InvoiceType.PrepaymentCredit)
				if (TaxAmount > 0)		
					TaxAmount *= -1
			else		
				if (TaxAmount < 0)		
					TaxAmount *= -1		











			if (CalculateTax.TaxType	= "C"
			and TaxAdjustment not entered
			and !MatchProcessType.Expense)
				TaxAdjustment = TaxAdjustment.OverrideProductOnly
				constraint (TaxAmount entered)	
					"TaxAmountRequiredForCalculatedRateTypeTaxCode"           

		TaxCode	
			if  (MatchProcessType.Expense
			and  !Status.Historical
			and  Suffix != 111
			and  VendorReturn not entered	
			and  !InvoiceType.PrepaymentCredit	
			and  !InvoiceSource.DebtorCreditMemo	
			and (ActionType.CreateType		
			or  (ActionType.UpdateType		

			and	(ProcessLevel changed
			or   Location changed)))	
			and  initiating action != "ReinstateCancelledInvoiceCancelled"	
			and  !DistributionCodeHasTax		
			and  !InvoiceSource.ReceivablesTransfer)			
				default to ProcessLevel.TaxCode	
				default to RemitToVendorCompanyDefaultRel.TaxCode
				default to RemitToCode.TaxCode
				default to VendorCompanyDefaultRel.TaxCode
				default to Vendor.TaxCode
				default to Vendor.VendorClass.TaxCode
				default to Location.PurchaseOrderTaxCode	
			if (VendorReturn entered
			and TaxEntityUsesSabrix)											
				default to VendorReturn.ReturnFromLocation.PurchaseOrderTaxCode	
				default to VendorReturn.ReturnFromLocation.TaxCode				
			if  (!Status.Unreleased						
			and  !Status.PendingApproval
			and  !Status.Approved)
				cannot be changed
					"InvoiceIsReleased;CannotChangeTaxCode"
			if  (Status.Approved						
			and !PayablesInvoice.Company.VendorGroup.DistributionEntryOnApproval)
				cannot be changed
					"InvoiceIsApproved;CannotChangeTaxCode"

			if (TaxAdjustment.Calculate)
				required
					"TaxCodeRequiredWithTaxAdjustmentOf\Calculate"                    

			if (TaxCode entered
			and PayablesInvoiceDetailRel exists)
				for each PayablesInvoiceDetailRel
					if(each.TaxCode entered
					and each.TaxCode.TaxType.CalculatedRate)
						constraint(TaxCode.TaxType.CalculatedRate)
							"CannotUseOtherTaxTypesWhenCalculatedRateTaxTypeExistsOnInvoiceDetails"
					if(each.TaxCode entered
					and !each.TaxCode.TaxType.CalculatedRate)
						constraint(!TaxCode.TaxType.CalculatedRate)
							"CannotUseCalculatedRateTaxTypeWhenOtherTaxTypeExistsOnInvoiceDetails"

			LocalTaxEntity = Company.AccountingEntity
			if (Vendor.VendorClass.TaxOverride
			and LocalTaxEntity.ThirdParty != blank
			and MatchProcessType.Expense)
				constraint (TaxCode.TaxType.CalculatedRate)
					"CalculatedRateTaxTypeRequiredWhenOverridingTax-SeeVendorClassTaxOverride"

			if (ApinwsAccumulateTxbl entered)
				if (ApinwsCalcTaxRateSwitch
				or  Vendor.VendorClass.TaxOverride)
					CalculateTax.Function = "I"
				else
					CalculateTax.Function = "C"
				CalculateTax.TaxEntity 		= Company.AccountingEntity
				CalculateTax.TaxCode 		= TaxCode
				CalculateTax.InvoiceAmount 	= InvoiceAmount.CurrencyAmount
				CalculateTax.TaxAmount		= blank
				CalculateTax.TaxableAmount	= ApinwsAccumulateTxbl
				CalculateTax.System			= "AP"
				CalculateTax.ProductTaxCategory	= TaxCode.ProductTaxCategory	
				include LoadVertexGlobalInputFields
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput
				if (TaxAmount not entered)
					TaxAmount = CalculateTax.OutputTotalTaxAmount




				TaxType	= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag
				if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualCode entered)
					ApinwsSaveApdAccrCode = CalculateTax.TaxTable.TaxTableOutput[1].AccrualCode

			if (TaxCode entered
			and TaxableAmount not entered
			and MatchProcessType.Expense)
				if (TaxEntityUsesThirdPartyTax									
				and TaxAmount entered)											
					TaxableAmount = InvoiceAmount.CurrencyAmount - TaxAmount	



			if (TaxCode not entered
			and old TaxCode entered)
				initialize TaxAdjustment

		TermsCode			
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			if (IsRecurringInvoice)
				constraint (!TermsCode.ProcessType.Multiple)	
					"CannotUseTermsTypeOf_'\Multiple'_onARecurringInvoice"

		TotalDistributionAmount	
			include RoundTotalDistributionAmount		

		TotalPaymentAmount	
			include RoundTotalPaymentAmount				
			if (!Status.Unreleased
			and !Status.PendingApproval
			and !TransientAllowAmountUpdate
			and  BackgroundProcessing not entered
			and  TotalPaymentAmount.TransactionTotal changed)
				cannot be changed

		TransientCreateDetails		
			initial value is TransientCreateDetails.FromReceipt

		TransientDistCodeAccount	
			constraint (DistributionCode entered)
				"DistributionCodeRequiredWithDistributionCodeAccount"

		TransientInvoiceEntryTemplate	
			initial value is actor.agent(FinanceResource).DefaultInvoiceTemplate

		TransientPaymentAmount		
			if (TransientPaymentNumber entered		
			or  TransientPaymentDate entered)

				if (TransientPaymentAmount !entered)		
					if (DiscountAmount.CurrencyAmount entered)
						if (DiscountDate >= TransientPaymentDate)
							TransientPaymentAmount	= InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount
						else
							TransientPaymentAmount	= InvoiceAmount.CurrencyAmount
					else
						TransientPaymentAmount	= InvoiceAmount.CurrencyAmount

			if (ApinwsXXMultipleAppRecs)
				cannot be entered
					"MultiplePaymentsExist;UsePaymentScheduleForPmtInfo"       

			if  (NumberOfSplitPayments > 0
			and (Status.Unreleased
			or   Status.PendingApproval))
				cannot be entered
					"UsePaymentScheduleToSetUpSplitPayments"        

			if (!MultiplePayablesInvoicePaymentRelExists)
				constraint (TransientPaymentAmount = InvoiceAmount.CurrencyAmount
				or			TransientPaymentAmount = (InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount))
					"PaymentAmount<TransientPaymentAmount>Must_=InvoiceAmount<InvoiceAmount.CurrencyAmount>LessAvailableDiscount<DiscountAmount.CurrencyAmount>"  

		TransientPaymentDate		
			if (TransientPaymentNumber entered	
			or  TransientPaymentAmount entered)
				required
					"Number,Date,AndAmountRequiredForPayments"      

			if  (NumberOfSplitPayments > 0
			and (Status.Unreleased
			or   Status.PendingApproval))
				cannot be entered
					"UsePaymentScheduleToSetUpSplitPayments"        

			if (ApinwsXXMultipleAppRecs)
				cannot be entered
					"MultiplePaymentsExist;UsePaymentScheduleForPmtInfo"       

		TransientPaymentNumber	
			if (Status.Unreleased
			and BankTransactionCode.BankTransactionType.CashPayment)
				if (TransientPaymentNumber entered)	
					if (CashLedgerPayablesPaymentRel exists)
						constraint (first CashLedgerPayablesPaymentRel.CheckType.ManuallyCreated)
							"PaymentNumber<TransientPaymentNumber>AlreadyUsed"	
					else
						constraint (!BankTransactionCode.ManualPaymentNumberReservation)
							"PaymentNumberMustBeReservedOnTheCashCode"       

			if ((Status.Unreleased
			or   Status.PendingApproval
			or   Status.Approved)
			and Company.AllowShortPay
			and TaxAmount entered)
				cannot be entered
				    "CannotCreateManualPaymentOnUnreleasedInvoiceWhenCompanyAllowsShortPay"

			if  (NumberOfSplitPayments > 0
			and (Status.Unreleased
			or   Status.PendingApproval))
				cannot be entered
					"UsePaymentScheduleToSetUpSplitPayments"        

			if  (Status.Unreleased									
			and (TransientPaymentDate entered		
			or   TransientPaymentAmount entered))
				required
					"Number,Date,AndAmountRequiredForPayments"      

			if (ApinwsXXMultipleAppRecs)		
				cannot be entered
					"MultPmtTermsCode;UsePmtSchedForPmtInfo"                  

			if (BankTransactionCode.TransactionNumberValue.NumericOnly)
				must be numeric
					"TransactionNumberMustBeNumeric"                          

		TransientPointOfTitleTransfer	
			initial value is DerivedPointOfTitleTransfer

		OverrideSeparatePayment	
			if (InvoiceType.CreditMemo
			or  InvoiceType.PrepaymentCredit)
				constraint (!OverrideSeparatePayment.Yes)
					"SeparatePaymentNotAllowedForCreditMemo"      

		ShowDerivedTotals
			default to false

		TransientTaxCategory	
			if (!TaxEntityUsesThirdPartyTax								
			and MatchProcessType.Expense								
			and !TaxCode.TaxType.TaxTableCode							
			and DerivedEffectiveDate != blank)							

				LocalEffectiveDate	= DerivedEffectiveDate				
				constraint (TaxRateRel exists)							
					"ATaxRateDoesNotExistForTaxCode<TaxCode>AndProductTaxCategory<TransientTaxCategory>"

		TransientTaxPointDate	
			if (TransientTaxPointDate entered)



				if (PayablesInvoiceTaxRel.TaxPointDate not entered)		
					constraint (!TaxPoint.Payment)
						"CannotEnterTaxPointDateWhenUsingTaxPointTypeOfPayment"

		UnloadingPort
			constraint (TaxEntityRel.IntrastatUsed)
				"TaxEntityNotDefinedFor_\IntrastatReporting"     
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		Vendor	
			default to first FirstPurchaseOrder.Vendor
			default to ServiceContract.Vendor
			required							
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
					"CannotChangeVendorIfStatusNotUnreleasedOrPendingApproval"                 

			if (InvoiceSource.IntercompanyBilling)
				cannot be changed
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"

			if (Vendor changed)					
				initialize AccrualCode
				initialize AuthorityCode
				initialize BankTransactionCode
				initialize CashCode
				initialize DiversityCode
				initialize FloatDays
				initialize IncomeCode
				initialize IncomeWithholdingCode

				initialize InvoiceGroup
				initialize MatchTable
				initialize PurchaseFromLocation
				initialize PayVendor
				initialize RemitToCode
				initialize RoutingCategory
				initialize TaxCode
				initialize RetainageAccrualCode
				initialize RuleGroup
				initialize LocalPoolOption
				initialize LocalGetRoutingRuleValueslsDone
				confirmation required
					"NOTICE:_\ChangingThe_\VendorWillAlsoChangeManyAdditionalDefaultableAttributesIncludingThe_\Pay_\Vendor._\TheNew_\Pay_\VendorWillBe<Vendor.PayVendor>:<Vendor.PayVendor.VendorName>._\Continue?"
				RequiresApproval = DerivedRoutingRuleFound

		VendorGroup		
			force default to Company.VendorGroup
			required

		VendorReturn	
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
			constraint (VendorReturnRel.Vendor = Vendor)																	
				"VendorReturn<VendorReturn>IsForVendor<VendorReturnRel.Vendor>.MustBeForSameVendor<Vendor>AsCreditMemo."	

		DestinationCountry	
			if (DestinationCountry not entered
			and UnloadingPort entered)
				DestinationCountry = UnloadingPort.Country
			if (TaxEntityRel.IntrastatUsed)
				if (Dropship
				and FirstPurchaseOrder entered)
					default to FirstPurchaseOrder.DropshipAddress.Country
				else
				if (FirstPurchaseOrder.ShipToLocation entered)
					default to FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Country
				else 
				if (Location entered)
					default to Location.PostalAddressForPurchaseOrder.Country
				else
					default to DefaultProcessLevelRel.PostalAddress.Country
				default to ProcessLevel.PostalAddress.Country




		AddOnChargeAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		AmountPaid
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		Anticipation
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		BestTermsDiscountAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		Buyer
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		BypassMatch
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		CancelDate
			cannot be changed
		CompanyCashCode
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		CostComponentMatch
			if  (action type.Create
			and  !CostComponentMatch)
				if (Vendor.CostComponentMatch
				or  Vendor.VendorClass.CostComponentMatch)
					CostComponentMatch = true

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		CreateDate
			default to current timestamp	
			cannot be changed
		CrossReferenceVendor
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		CustomsTotal
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		DiscountPoint
			initial value is DiscountCode.DiscountPoint	
			default to DiscountCode.DiscountPoint 		
			if (!Status.Unreleased
			and !Status.PendingApproval
			and old DiscountPoint entered)	
				cannot be changed
		Dropship
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		FinalIntransitDistribution
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		FlexTerms
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		ForeignEconomicRegulatoryCode
			initial value is Vendor.ForeignEconomicRegulatoryCode
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		FreightTotal
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		GlobalDocumentType
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		HashQuantity
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		InsuranceTotal
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		IntrastatNumber
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		InvoiceSource
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		LastPaymentSequence					
			if (!Status.Unreleased
			and !Status.PendingApproval
			and action != "UpdateAfterMatch")
				cannot be changed
		MatchAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		MatchDate
			if (!Status.Unreleased
			and !Status.PendingApproval
			and action != "UpdateAfterMatch")
				cannot be changed
		MatchedAddOnChargeAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		MatchErrorType
			if (!Status.Unreleased
			and !Status.PendingApproval
			and !TransientAllowAmountUpdate
			and action != "UpdateAfterMatch")
				cannot be changed
		MatchLevel
			if (!Status.Unreleased
			and !Status.PendingApproval
			and action != "UpdateAfterMatch")
				cannot be changed
		MatchObjectID
			if (!Status.Unreleased
			and !Status.PendingApproval
			and action != "UpdateAfterMatch")
				cannot be changed
		MatchStatus
			if (!Status.Unreleased
			and !Status.PendingApproval
			and action != "UpdateAfterMatch")
				cannot be changed
		NoPayConcern
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		NumberOfSplitPayments
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		OtherAddOnChargesTotal
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		POTaxAmount
			if (!Status.Unreleased
			and !Status.PendingApproval
			and !TransientAllowAmountUpdate
			and action != "UpdateAfterMatch")
				cannot be changed
		ProcurementCardProgram
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		ProcurementCardStatement
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		ProofOfDeliveryPrinted
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		ReasonCode
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		ReconciliationDate
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		ReferenceInvoiceExists
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		RetailAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		RetainageAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		RetainagePaymentAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		RuleGroup
			default to Vendor.RuleGroup
			default to Vendor.VendorClass.RuleGroup
			if (!IsNotMatched
			and action != "UpdateAfterMatch")
				cannot be changed
		ServiceAmount
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		SplitPaymentSchedule
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		TaxInterfaced
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		TaxPoint
			default to TaxCode.DerivedTaxPoint
			if (!Status.Unreleased
			and !Status.PendingApproval
			and old TaxPoint entered)
				cannot be changed
		TaxType
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
		TotalTaxableAmount
			if (!Status.Unreleased
			and !Status.PendingApproval
			and !TransientAllowAmountUpdate
			and action != "UpdateAfterMatch")
				cannot be changed
		TotalTaxAmount
			if (!Status.Unreleased
			and !Status.PendingApproval
			and !TransientAllowAmountUpdate
			and action != "UpdateAfterMatch")
				cannot be changed
		TransportMode
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		TransientSupplierInvoiceType
			initial value is  actor.agent(SupplierSourceId).Supplier.SupplierSubmittedInvoiceType

		TransientSuppressDueDate
			initial value is  actor.agent(SupplierSourceId).Supplier.SuppressDisplayOfDueDate

		TransientDisplayTaxAmount
			initial value is ActorAgentSupplierGroupRel.DisplayTaxAmount


		VendorPaymentCurrency
			if (Vendor.DefaultVendorPaymentCurrency.Invoice)		
				default to InvoiceCurrency
			else
				default to CashCode.Currency
			if (!Status.Unreleased
			and !Status.PendingApproval
			and old VendorPaymentCurrency entered)
				cannot be changed
					"VendorPaymentCurrencyCannotBeChanged;InvoiceIs<Status>"

		VendorPaymentAmount
			if (VendorPaymentCurrency	!= InvoiceCurrency
			and VendorPaymentCurrency	!= CashCode.Currency)
				required
					"VendorPaymentAmountRequiredWhenPaymentCurrencyNotInvoiceOrCashCodeCurrency"
			if (VendorPaymentCurrency	= InvoiceCurrency)
				constraint (VendorPaymentAmount	!entered)
					"VendorPaymentAmountCannotBeEnteredIfVendorPaymentCurrencyIsInvoiceCurrency;AmountWillBeCalculatedWhenPaid"
			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed
					"VendorPaymentAmountCannotBeChanged;InvoiceIs<Status>"

		IDMPrinter
			initial value is Company.UserDefaultPrinterRel.IDMPrinter









	SubType IsPrepaymentType Field Rules

		BankTransactionCode		
			constraint (BankTransactionCode.BankTransactionType.CashPayment)
				"PaymentCodeMustBeCashPaymentType"                   
			if (BankTransactionCode changed)
				constraint (!any PayablesInvoicePaymentRel.TransactionIDNumber entered)
					"MustUnapplyPaymentBeforeChangingBankTransactionCode"	     

		DistributionCode		
			if (InvoiceType.Prepayment)
				cannot be entered
					"DistributionCodeNotAllowedOnPrepayment"

		Invoice		
			required
				"PrepaymentNumberIsRequired"		
			if (Invoice entered)
				LocalHasAssets = false					
				if (!MatchProcessType.Expense)
					if (MatchPurchaseOrderInvoicesRel exists)
						for each MatchPurchaseOrderInvoicesRel
							if (each.HasAssets)
								LocalHasAssets = true
					else
					if  (first MatchPurchaseOrderInvoicesRel exists
					and  first MatchPurchaseOrderInvoicesRel.HasAssets)
						LocalHasAssets = true
					
				if (Company.VendorGroup.InvoiceNumberEdit.CompanyVendor)
					if ((Vendor.AllowDuplicateInvoiceByDate						
					or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
					and !LocalHasAssets
					and !IsRecurringInvoice)									
						constraint (!PayablesInvoiceDuplicateInvoiceByDateRel exists)
							"Prepayment<Invoice>AlreadyExistsForCompany<Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
					else
						constraint (!PayablesInvoiceDuplicateInvoiceRel exists)
							"Prepayment<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"
				else
					if ((Vendor.AllowDuplicateInvoiceByDate						
					or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
					and !LocalHasAssets
					and !IsRecurringInvoice)									
						constraint (!PayablesInvoiceDuplicateInvoiceByVendorByDateRel exists)
							"Prepayment<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorByDateRel.Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
					else
						constraint (!PayablesInvoiceDuplicateInvoiceByVendorRel exists)
							"Prepayment<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"

		Location		
			if  (FirstPurchaseOrder entered
			and  TaxEntityRel.ThirdParty.Sabrix
			and  TaxConfigurationRel.OneSourceVersionType.Generic)
				default to FirstPurchaseOrder.PurchaseOrder.ShipToLocation
				required
					"ShipToLocationRequiredWhenUsingOneSource"

		TaxCode		
			if (!Status.Unreleased					
			and !Status.PendingApproval
			and !Status.Approved)
				cannot be changed
					"CannotChangeTaxCodeOnPrepayment"
			if  (Status.Approved						
			and !PayablesInvoice.Company.VendorGroup.DistributionEntryOnApproval)
				cannot be changed
					"InvoiceIsApproved;CannotChangeTaxCode"

			if (TaxAmount entered
			and MatchProcessType.Expense)
				required
					"TaxCodeRequiredOnPrepaymentIfTaxAmountEntered"		
			constraint (!TaxCode.TaxType.CalculatedRate)
				"CannotUseCalculateRateTypeTaxCodesOnPrepayments"		
			LocalTaxEntity = Company.AccountingEntity
			if (MatchProcessType.Expense)
				if (TaxCode.TaxType.TaxTableCode)							
					constraint (TaxCode.TaxTableRel.TaxCode1.DerivedTaxPoint = "P")
						"TaxCode1OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
					if (TaxCode.TaxTableRel.TaxCode2 entered)
						constraint (TaxCode.TaxTableRel.TaxCode2.DerivedTaxPoint = "P")
							"TaxCode2OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
					if (TaxCode.TaxTableRel.TaxCode3 entered)
						constraint (TaxCode.TaxTableRel.TaxCode3.DerivedTaxPoint = "P")
							"TaxCode3OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
					if (TaxCode.TaxTableRel.TaxCode4 entered)
						constraint (TaxCode.TaxTableRel.TaxCode4.DerivedTaxPoint = "P")
							"TaxCode4OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
					if (TaxCode.TaxTableRel.TaxCode5 entered)
						constraint (TaxCode.TaxTableRel.TaxCode5.DerivedTaxPoint = "P")
							"TaxCode5OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
					if (TaxCode.TaxTableRel.TaxCode6 entered)
						constraint (TaxCode.TaxTableRel.TaxCode6.DerivedTaxPoint = "P")
							"TaxCode6OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
					if (TaxCode.TaxTableRel.TaxCode7 entered)
						constraint (TaxCode.TaxTableRel.TaxCode7.DerivedTaxPoint = "P")
							"TaxCode7OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
					if (TaxCode.TaxTableRel.TaxCode8 entered)
						constraint (TaxCode.TaxTableRel.TaxCode8.DerivedTaxPoint = "P")
							"TaxCode8OnTaxTable<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"
				else
					if (TaxEntityUsesInforTax)		
						constraint (TaxCode.DerivedTaxPoint = "P")
							"TaxCode<TaxCode>MustHaveTaxPoint=PaymentOnPrepayments"	

		TaxAmount			
			if (!TaxEntityUsesInforTax
			and !InvoiceType.MatchPrepayment)			
				constraint (TaxAmount not entered)		
					"TaxAmountMustBeBlankForPrepayment"
		
		NumberOfRecurringInvoices		
			cannot be entered
				"PrepaymentInvoiceCannotBeRecurring"			

		RecurringFrequency			
			cannot be entered
				"PrepaymentInvoiceCannotBeRecurring"		
		







	SubType IsNotPrepayment Field Rules

		BankTransactionCode		
			constraint (BankTransactionCode.BankTransactionType.CashPayment
			or          BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				"PaymentCodeNotCashOr_\B\O\EPaymentType"                   

		BypassMatch			
			constraint (ProcessLevel.InvoiceItemDetailAccount entered
			or          Company.InvoiceItemDetailAccount entered)
				"DetailAccountRequiredOnPayablesCompanySetupIfAllowItemDetailIsSelected"

		CashCode		
			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be changed
					"UsePaymentScheduleForChanges;MultiplePaymentsExist"              
			if (BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				constraint (CashCode.Currency = InvoiceCurrency)
					"CashCodeCurrency<CashCode.Currency>MustEqualInvoiceCurrency<InvoiceCurrency>For_\BillOf_\ExchangePayment"          
			if (CashCode changed
			and VendorPaymentAmount	!entered
			and !Vendor.DefaultVendorPaymentCurrency.Invoice)		
				VendorPaymentCurrency	= CashCode.Currency

		Company			
			if (TaxCode entered)
				LocalTaxEntity = Company.AccountingEntity
				constraint (LocalTaxEntity exist)
					"TaxEntityDoesNotExist"

		ContractRebateGroup		
			if (ContractRebateGroup.ContractRebateDue !entered)
				initialize ContractRebateGroup




		DistributionCode		
			if (!MatchProcessType.Expense
			and invoking action not = "ChangeTemplate")
				cannot be changed
					"CannotChangeTheDistributionCodeOnA_\P\OInvoice"          
			if (ContractRebateGroup.ContractGroup entered)
				cannot be entered
					"DistributionCodeNotAllowedOnRebateInvoice"               

			if (MatchProcessType.Expense
			and !InvoiceSource.Lease
			and Suffix != 111
			and Suffix != 888
			and Suffix != 999
			and ContractRebateGroup.ContractGroup not entered
			and !InvoiceSource.IntercompanyBilling
			and !InvoiceSource.DebtorCreditMemo		
			and !Status.Historical
			and ((InterfaceInProcess				
			and !TransientPostingStatus.History)	
			or  !InterfaceInProcess)				
			and (ActionType.CreateType
			or  (ActionType.UpdateType			
			and  Vendor changed))
			and  InvoiceSource != "C")				
				default to VendorCompanyDefaultRel.DistributionCode
				default to Vendor.DistributionCode
				default to ProcessLevel.DistributionCode
				default to Vendor.VendorClass.DistributionCode
				default to Company.DistributionCode


		DueDate		
			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be changed
					"CannotChangeDueDateOnInvoiceHeader;MultiplePaymentsExist.MakeChangesOnPaySchedule."      
			if (FlexTerms)
				default to DiscountDate


		Invoice		
			required							
				"InvoiceNumberIsRequired"
			if (Invoice entered)
				LocalHasAssets = false					
				if (!MatchProcessType.Expense)
					if (MatchPurchaseOrderInvoicesRel exists)
						for each MatchPurchaseOrderInvoicesRel
							if (each.HasAssets)
								LocalHasAssets = true
					else
					if  (first MatchPurchaseOrderInvoicesRel exists
					and  first MatchPurchaseOrderInvoicesRel.HasAssets)
						LocalHasAssets = true
					
				if  (Company.VendorGroup.InvoiceNumberEdit.CompanyVendor)						
					if ((Vendor.AllowDuplicateInvoiceByDate						
					or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
					and !LocalHasAssets)
						constraint (!PayablesInvoiceDuplicateInvoiceByDateRel exists)
							"Invoice<Invoice>AlreadyExistsForCompany<Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
					else
						constraint (!PayablesInvoiceDuplicateInvoiceRel exists)
							"Invoice<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"
				else
					if ((Vendor.AllowDuplicateInvoiceByDate						
					or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
					and !LocalHasAssets)
						constraint (!PayablesInvoiceDuplicateInvoiceByVendorByDateRel exists)
							"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorByDateRel.Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
					else
						constraint (!PayablesInvoiceDuplicateInvoiceByVendorRel exists)
							"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"
			if (InvoiceType.Invoice
			and InvoiceTypeForExpense.Invoice
			and InvoiceTypeForMatch.Invoice
			and (Vendor.VendorClass.RestrictToOneInvoice
			or  Vendor.RestrictToOneInvoice))
				constraint (PayablesInvoiceMultipleInvoicesPerVendorRel !exists)	
					"VendorOrVendorClassRestrictedToOneInvoice:InvoiceAlreadyExistsForCompany<first PayablesInvoiceMultipleInvoicesPerVendorRel.Company>,Vendor<Vendor>AndInvoice<first PayablesInvoiceMultipleInvoicesPerVendorRel.Invoice>"

		InvoiceReference		
			default to RemitToCode.InvoiceReference
			default to InvoiceReference.Invoice

		Location		
			if  (MatchProcessType.AOCOnly
			and (MatchPurchaseOrderInvoicesRel exists
			or   FirstPurchaseOrder entered))
				default to first FirstPurchaseOrder.PurchaseOrder.ShipToLocation
				default to first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipToLocation
			else
			if  (FirstPurchaseOrder entered
			and  TaxEntityRel.ThirdParty.Sabrix
			and  TaxConfigurationRel.OneSourceVersionType.Generic)
				default to FirstPurchaseOrder.PurchaseOrder.ShipToLocation
				required
					"ShipToLocationRequiredWhenUsingOneSource"
			else
			if  (ServiceContract entered
			and  TaxEntityRel.ThirdParty.Sabrix
			and  TaxConfigurationRel.OneSourceVersionType.Generic)
				required
					"ShipToLocationRequiredWhenUsingOneSource"

		NatureOfTransactionCode		
			if (!BypassMatch						
			and MatchProcessType.Service)			
				cannot be entered
					"NatureOfTransactionCodeNotAllowedOnThisTypeOf_\Invoice"     

			if (!TaxEntityRel.IntrastatUsed)
				constraint (UnloadingPort 			= blank
				and			NatureOfTransactionCode = blank
				and			StatisticalProcedure 	= blank
				and			TransportMode 			= blank
				and			ShipTerm 				= blank)
					"TaxEntity<Company.AccountingEntity>NotDefinedForIntrastatReporting"		

			if (IntrastatInvoice)
				required
					"N\O\T\CIsRequiredForIntrastatReporting"		

		NumberOfRecurringInvoices		
			if (NumberOfRecurringInvoices changed
			or RecurringFrequency changed)
				constraint (PayablesInvoiceRecurSuffixRel not exists)
					"RecurringDetailsCannotBeChanged"                         
				constraint (PayablesInvoiceHistoryRecurSuffixRel not exists)
					"RecurringDetailsCannotBeChanged"                         

			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be entered
					"CannotEnterNumberOfRecurrencesWhenMultiplePaymentsExist"                       

			constraint (MatchProcessType.Expense)
				"MatchInvoiceCannotBeRecurring"                           

			if (InvoiceType.CreditMemo
			or  InvoiceType.PrepaymentCredit)
				cannot be entered
					"CreditMemosCannotRecur"                                  
			if (old NumberOfSplitPayments entered)
				cannot be entered
					"CannotRecur;MultiplePaymentsExist"                       
			if (RecurringFrequency entered)
				required
					"NumberOfRecurrencesRequiredForRecurringInvoice"          
			constraint (InvoiceType.DebitMemo
			or			InvoiceType not entered)
				"RecurrenceNumberInvalidForThisInvoiceType"               
			if (NumberOfRecurringInvoices changed)
				constraint (NumberOfRecurringInvoices >= Suffix
				or		    PayablesInvoiceRecurSuffixRel not exist)
					"CannotDecreaseRecurrenceNumber"                          

		PrintChargeback		
			if (PrintChargeback)
				constraint (InvoiceType.CreditMemo)
					"Print_\Credit_\MemoAllowedOnCreditMemo'sOnly"            

		RecurringFrequency		
			if (MultiplePayablesInvoicePaymentRelExists)
				cannot be entered
					"CannotRecur;MultiplePaymentsExist"                       
			constraint (!MatchProcessType.ReceiptMatch
			and         !MatchProcessType.AOCOnly)
				"MatchInvoiceCannotBeRecurring"                           
			if (!MatchProcessType.Expense)
				cannot be entered
					"CannotMake_\P\OInvoiceRecurring"                         
			if (InvoiceType.CreditMemo
			or  InvoiceType.PrepaymentCredit)
				cannot be entered
					"CreditMemosCannotRecur"                                  
			if (old NumberOfSplitPayments entered)
				cannot be entered
					"CannotRecur;MultiplePaymentsExist"                       
			if (NumberOfRecurringInvoices entered)
				required
					"RecurringFrequencyRequiredForRecurringInvoice"

		RetainageAccrualCode		
			if (FirstPurchaseOrder entered)
				if ((ActionType.CreateType
				or  (ActionType.UpdateType		
				and  Vendor changed))			
				and  FirstPurchaseOrder.RetainagePercentCompleteTracking entered)
					default to Vendor.RetainageAccrualCode
					default to ProcessLevel.RetainageAccrualCode
					default to Company.RetainageAccrualCode

				if (RetainageAccrualCode entered)
					constraint (FirstPurchaseOrder.RetainagePercentCompleteTracking entered)
						"RetainageAccrualCodeOnlyAllowedForRetainagePurchaseOrder" 
					constraint (Company.VendorGroup.RetainageHoldCode entered)
						"RetainageHoldCodeRequiredOnVendorGroup"                  
					constraint (Company.RetainageAccrualCode entered)
						"RetainageAccrualCodeRequiredOnPayablesCompany"              
					constraint (RetainageAccrualCode != AccrualCode)
						"RetainageAndPayablesAccrualCodeCannotBeTheSame"            
				else
					constraint (FirstPurchaseOrder.RetainagePercentCompleteTracking not entered)
						"RetainageAccrualCodeRequiredOnRetainagePurchaseOrder"    

			if  (ServiceContract entered)
				if ((ActionType.CreateType
				or  (ActionType.UpdateType		
				and  Vendor changed))			
				and  ServiceContract.RetainagePercentCompleteTracking entered)
					default to Vendor.RetainageAccrualCode
					default to ProcessLevel.RetainageAccrualCode
					default to Company.RetainageAccrualCode

				if (RetainageAccrualCode entered)
					constraint (ServiceContract.RetainagePercentCompleteTracking entered)
						"RetainageAccrualCodeOnlyAllowedForRetainageContract" 
					constraint (Company.VendorGroup.RetainageHoldCode entered)
						"RetainageHoldCodeRequiredOnVendorGroup"                  
					constraint (Company.RetainageAccrualCode entered)
						"RetainageAccrualCodeRequiredOnPayablesCompany"              
					constraint (RetainageAccrualCode != AccrualCode)
						"RetainageAndPayablesAccrualCodeCannotBeTheSame"            
				else
					constraint (ServiceContract.RetainagePercentCompleteTracking not entered)
						"RetainageAccrualCodeRequiredOnRetainageContract"    

			if (!Status.Unreleased
			and !Status.PendingApproval)
				cannot be changed

		RetainageAmount		
			initialize BaseRetainageAmount.BaseAmount.EnteredCurrencyAmount
			initialize BaseRetainageAmount.BaseAmount.EnteredCurrencyRate
			BaseRetainageAmount.TransactionAmount 				= RetainageAmount

		RevaluedBaseAmount	
			if (RevaluedBaseAmount.CurrencyAmount !entered)
				RevaluedBaseAmount	= InvoiceAmount
			if (RevaluedBaseAmount.CurrencyAmount entered
			and RevaluedBaseAmount.ExchangeDate not entered)
				if (TransientPaymentDate != 0)  
					RevaluedBaseAmount.ExchangeDate = TransientPaymentDate
				else
					RevaluedBaseAmount.ExchangeDate							= InvoiceAmount.ExchangeDate 
					RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		RuleGroup		
			default to Vendor.RuleGroup
			default to Vendor.VendorClass.RuleGroup

		ShippingMethod		
			if (!BypassMatch						
			and MatchProcessType.Service)			
				cannot be entered
					"ShippingMethodNotAllowedOnThisTypeOf_\Invoice"     

		ShipTerm					
			if (!BypassMatch						
			and MatchProcessType.Service)			
				cannot be entered
					"ShipTermNotAllowedOnThisTypeOf_\Invoice"     

		StatisticalProcedure		
			if (!BypassMatch						
			and MatchProcessType.Service)			
				cannot be entered
					"StatisticalProcedureNotAllowedOnThisTypeOf_\Invoice"     

		TaxAdjustment		
			if (CalculateTax.TaxType	= "C")
				if (!MatchProcessType.Expense)
					default to TaxAdjustment.OverrideProductOnly
				if (!TaxAdjustment.OverrideProductOnly
				and !TaxAdjustment.Calculate
				and !TaxAdjustment.OverrideProductAndAOC
				and !TaxAdjustment.OverrideTaxablePOLine
				and !TaxAdjustment.OverrideTaxablePOAndAOC)
					constraint (MatchProcessType.Expense)
						"CalculatedRateTaxCdAllowedForTaxAdj_1,_3,_4,_8Or_9"     

			if (TaxAdjustment.OverrideProductOnly
			or  TaxAdjustment.IgnoreProductOnly
			or  TaxAdjustment.Calculate
			or  TaxAdjustment.OverrideProductAndAOC
			or  TaxAdjustment.IgnoreProductAndAOC
			or  TaxAdjustment.OverrideTaxablePOLine
			or  TaxAdjustment.OverrideTaxablePOAndAOC)
				constraint (!MatchProcessType.Expense)
					"TaxAdjustmentFlagValidOnMatchInvoicesOnly:<TaxAdjustment>"    

			if (TaxAdjustment.OverrideProductOnly
			or  TaxAdjustment.OverrideProductAndAOC
			or  TaxAdjustment.OverrideTaxablePOLine
			or  TaxAdjustment.OverrideTaxablePOAndAOC)
				constraint (TaxCode entered)
					"NoTaxCode,TaxAdjustmentFlagMustBeBlank"                  


			if (TaxCode not changed
			and initiating action != "ChangeTemplate")		
				cannot be changed
					"CannotChange_\Tax_\Adjust_\Flag"                          


		TransientPaymentAmount		
			if ((InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
			and  !Status.Amended										  
			and  !Status.Historical)
				cannot be entered
					"PaymentAmountNotAllowedWithCreditMemo"                   

		TransientPaymentDate		
			if ((InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
			and  !Status.Amended										  
			and  !Status.Historical)
				cannot be entered
					"PaymentDateNotAllowedWithCreditMemo"          

			if (BankTransactionCode.BankTransactionType.CashPayment)
				EditSystemCode.FinanceCodeBlock.ToAccountingEntity	= DerivedCashPostingCompany 
				EditSystemCode.System								= "AP"
				EditSystemCode.PostingDate							= TransientPaymentDate
				EditSystemCode.SkipDateEdit							= true	
				LocalEditSystemCode									= EditSystemCode.PerformEditSystemCode

		TransientPaymentNumber	
			if ((InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
			and  !Status.Historical)		
				cannot be entered
					"PaymentNumberNotAllowedWithCreditMemo"                   

			if (BankTransactionCode.BankTransactionType.CashPayment)
				initialize VerifyPayablesMonitor
				VerifyPayablesMonitor.PayGroup			= PayGroup
				VerifyPayablesMonitor.RunProgram		= RunProgram.PayablesInvoice
				LocalCheckAPMonitor						= VerifyPayablesMonitor.CallVerifyPayablesMonitor
				constraint (VerifyPayablesMonitor.NoErrors)
					"<VerifyPayablesMonitor.APMonitorProcessingMessage>"


		UnloadingPort			
			if (UnloadingPort entered)
				DestinationCountry = UnloadingPort.Country

			if (UnloadingPort entered 
			and TaxEntityRel.IntrastatUsed 
			and DestinationCountry not entered)

				if (FirstPurchaseOrder.DropshipAddress.Country entered)
					DestinationCountry = FirstPurchaseOrder.DropshipAddress.Country
				else
				if (FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Country entered)
					DestinationCountry = FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Country
				else 
				if (Location.PostalAddressForPurchaseOrder.Country entered)
					DestinationCountry = Location.PostalAddressForPurchaseOrder.Country
				else 
				if (UnloadingPort.Country entered)
					DestinationCountry = UnloadingPort.Country
				else
					DestinationCountry = ProcessLevel.PostalAddress.Country
			
			if (!BypassMatch						
			and MatchProcessType.Service)			
				cannot be entered
					"UnloadingPortNotAllowedOnThisTypeOf_\Invoice"     

		VendorReturn		
			if (!InvoiceType.CreditMemo)
				cannot be entered
					"ReturnNumberValidOnCreditMemos,Replacement_\P\O'sOnly"   
			if (ActionType.CreateType)				
				constraint (!VendorReturn.Status.Closed)		
					"ReturnIsClosedCreditMemoCannotBeCreated"
			if (VendorReturn.Status.Closed)					
				cannot be changed
					"ReturnIsClosed;CannotChange"
			if (VendorReturn entered
			and ExternalPurchaseOrder not entered)
				ExternalPurchaseOrder = VendorReturnLinesRel.OriginalPurchaseOrder






	SubType IsChargebackSubType Field Rules





		AccrualCode			
			default to Company.RetainageAccrualCode
			default to Company.AccrualCode

		AllowableAmountForDiscount		
			if ((InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
			and  AllowableAmountForDiscount > 0)
				AllowableAmountForDiscount *= -1

		DiscountAmount		
			if (AllowableAmountForDiscount	entered
			and DiscountPercent				entered
			and DiscountAmount.CurrencyAmount not entered)
				DiscountAmount.CurrencyAmount = (AllowableAmountForDiscount * DiscountPercent)

			if  (InvoiceType.CreditMemo
			or   InvoiceType.PrepaymentCredit)
				include FlipInvoiceAmountFieldsToNeg	
				include FlipDiscountAmountFieldsToNeg
			else		
				include FlipInvoiceAmountFieldsToPos		
				include FlipDiscountAmountFieldsToPos		

		DiscountDate		
			if ((DiscountAmount.CurrencyAmount 	entered
			or   DiscountPercent				entered)
			and  TermsCode 					not entered)
				required
					"DiscountDateIsRequiredIfDiscountAmountOrDiscountRateEntered"		

			constraint (DiscountDate >= InvoiceDate)
				"DiscountDateCannotBeLessThanInvoiceDate"		

			if (DueDate entered)
				constraint (DiscountDate <= DueDate)
					"DiscountDateCannotBeGreaterThanDueDate"	

		DiscountPercent		
			constraint (DiscountPercent >= 0%)
				"DiscountRateMustBePositive"		


		InvoiceAmount.CurrencyAmount		
			if  (FirstPurchaseOrder entered)
				if  (FirstPurchaseOrder.ReceiptCurrencyConversionRate entered
				and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.ReceiptCurrencyConversionRate
					InvoiceAmount.KeepRateOnly = true
				else
				if  (FirstPurchaseOrder.EnteredCurrencyConversionRate entered
				and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry)
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.EnteredCurrencyConversionRate
					InvoiceAmount.KeepRateOnly = true
			else
			if (MatchPurchaseOrderInvoicesRel exists)
				if  (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ReceiptCurrencyConversionRate entered
				and  first MatchPurchaseOrderInvoicesRel.PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ReceiptCurrencyConversionRate
					InvoiceAmount.KeepRateOnly = true
				else
				if  (FirstPurchaseOrder.EnteredCurrencyConversionRate entered
				and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry)
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.EnteredCurrencyConversionRate
					InvoiceAmount.KeepRateOnly = true

		InvoiceSource		
			constraint (InvoiceSource.EDI
			or          InvoiceSource.ERS
			or 			InvoiceSource.Chargeback			
			or          InvoiceSource.HR
			or          InvoiceSource.Payroll
			or          InvoiceSource.Tax
			or          InvoiceSource.Garnishment
			or			InvoiceSource.ReceivablesTransfer		
			or 			InvoiceSource.Lease
			or			InvoiceSource.SubContractor)
				"InvoiceSourceMustBeChargeback,EDI,ERS,Payroll,Tax,Garnishment,ARTransfer,Lease,Sub-\ContractorOrBlank" // Inv source must = "E", "R", "P", "T", "G", "H" or blank  

			if (InvoiceSource.HR
			or  InvoiceSource.Payroll
			or  InvoiceSource.Tax
			or  InvoiceSource.Garnishment
			or	InvoiceSource.ReceivablesTransfer		
			or  InvoiceSource.Lease
			or	InvoiceSource.SubContractor)
				constraint (CalculateTerms.ProcIndicator not = "M")
					"H\RInvoiceCannotHavePaymentTermsCodeOfMultiple"	

		LocalPoolOption			
			default to Vendor.PoolOption
			default to MatchCompanyRel.PoolOption

			if (Vendor.PoolOption entered)
				if (LocalPoolOption.CompanyVendorPo)
					constraint (FirstPurchaseOrder entered
					or  MatchReferenceNumber entered)
						"PurchaseOrderRequiredWithPoolOptionCompanyVendorPurchaseOrder"		
					constraint (!MultiplePurchaseOrders)
						"CannotHaveMultiplePurchaseOrdersWithPoolOptionCompanyVendorPurchaseOrder"	
				if (LocalPoolOption.CompanyVendorPoShipTo)
					constraint (FirstPurchaseOrder.ShipToLocation entered)
						"ShipToLocationRequiredWithPoolOptionCompanyVendorPurchaseOrderLocation"		
			else
			if (MatchCompanyRel.PoolOption entered)
				if (LocalPoolOption.CompanyVendorPo)
					constraint (FirstPurchaseOrder entered
					or  MatchReferenceNumber entered)
						"PurchaseOrderRequiredWithPoolOptionCompanyVendorPurchaseOrder"		
					constraint (!MultiplePurchaseOrders)
						"CannotHaveMultiplePurchaseOrdersWithPoolOptionCompanyVendorPurchaseOrder"	
				if (LocalPoolOption.CompanyVendorPoShipTo)
					for each MatchPurchaseOrderInvoicesRel
						constraint (each.PurchaseOrder.ShipToLocation entered)
							"ShipToLocationRequiredWithPoolOptionCompanyVendorPurchaseOrderLocation"		


		MatchProcessType	
			if (TransientJobName contains "EDI"
			and MatchProcessType.ReceiptMatch)
				for each PayablesInvoiceOriginalRel
					for each each.PayablesInvoiceSpreadAddOnChargeRel
						invoke Create PayablesInvoiceSpreadAddOnCharge
							fill in fields from each
							invoked.PayablesInvoice = this instance.PayablesInvoice


		NumberOfRecurringInvoices		
			cannot be entered
				"MatchInvoiceCannotBeRecurring"			


		ProofOfDeliveryPrinted		
			default to false


		RecurringFrequency			
			cannot be entered
				"MatchInvoiceCannotBeRecurring"		

		RuleGroup		
			default to Vendor.RuleGroup
			default to Vendor.VendorClass.RuleGroup

		TaxCode		
			if (Suffix = 111)
				NextSentence = true
			else
			if (ActionType.CreateType		
			or (ActionType.UpdateType		
			and Vendor changed))			
				if  (!Status.Historical)
					default to Vendor.TaxCode
					default to Vendor.VendorClass.TaxCode

			if ((MatchProcessType.ReceiptMatch
			or   MatchProcessType.AOCOnly)
			and  FirstPurchaseOrder.TaxCode entered)
				initialize TaxCode

			if (MultiplePurchaseOrders
			and  FirstPurchaseOrder.TaxCode entered)
				initialize TaxCode

			if (ProcessOneSourceValid
			or  ProcessVertexValid)			
				NextSentence = true
			else
			if (TaxAdjustment.OverrideProductOnly		
			or 	TaxAdjustment.OverrideProductAndAOC		
			or  TaxAdjustment.OverrideTaxablePOLine		
			or  TaxAdjustment.OverrideTaxablePOAndAOC)	
				CalculateTax.TaxCode			= TaxCode
				CalculateTax.TaxEntity 			= Company.AccountingEntity
				CalculateTax.Function			= CalculateTax.Function.Inquire
				include LoadVertexGlobalInputFields
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>"

			if (TaxAdjustment.Calculate)	
				if (TaxAmount entered
				and HasTaxTolerance)		
					CalculateTax.Function			= CalculateTax.Function.VerifyTax
				else
					CalculateTax.Function			= CalculateTax.Function.CalculateTax
				CalculateTax.TaxEntity 				= Company.AccountingEntity
				CalculateTax.TaxCode				= TaxCode
				CalculateTax.InvoiceAmount			= InvoiceAmount.CurrencyAmount
				CalculateTax.TaxableAmount			= TaxableAmount
				CalculateTax.TaxAmount				= TaxAmount
				CalculateTax.TaxDate				= InvoiceDate
				CalculateTax.TaxPointDate			= DerivedTaxPointDate	
				CalculateTax.GeneralLedgerDate		= InvoiceDate
				CalculateTax.InvoiceDate			= InvoiceDate
				CalculateTax.PaymentDate			= InvoiceDate
				CalculateTax.ProductTaxCategory		= blank
				CalculateTax.System					= "AP" 
				CalculateTax.TransactionCurrency	= InvoiceCurrency
				CalculateTax.BaseCurrency			= PayGroup.BaseCurrency
				include LoadVertexGlobalInputFields
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput
				if (!MatchProcessType.ReceiptMatch
				and !MatchProcessType.AOCOnly)
					if (FirstPurchaseOrder.Dropship)
						CalculateTax.PostalAddress	= FirstPurchaseOrder.DropshipAddress
					else
					if (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.Dropship)
						CalculateTax.PostalAddress	= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.DropshipAddress
					else
						CalculateTax.PostalAddress	= ProcessLevel.PostalAddress

				if (PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress	= PurchaseFromVendorLocAddressRel.PostalAddress
				else
					CalculateTax.FromPostalAddress	= InvoiceVendorAddressRel.PostalAddress

				include LoadVertexGlobalInputFields
				include DisplayCalculateTaxInput
				LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
				include DisplayCalculateTaxOutput
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>"
				if (TaxAmount not entered)
					TaxAmount 		= CalculateTax.OutputTotalTaxAmount
				if (TaxableAmount not entered
				and MatchProcessType.Expense)
					TaxableAmount 	= CalculateTax.OutputTotalTaxable

		TermsCode		
			if  (TermsCode entered
			and  !IsChargebackSubType)
				Anticipation	= CalculateTerms.Anticipation
				DueDate			= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
				DiscountDate	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
				DiscountPercent	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
				DiscountAmount.CurrencyAmount	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
				if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate 	not entered
				and CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent 	not entered
				and CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount 	not entered)
					initialize AllowableAmountForDiscount

				if (CalculateTerms.ProcIndicator = "M")
					DiscountDate1		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					DiscountPercent1	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
					DiscountAmount1		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
					DiscountDate2		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
					DiscountPercent2	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
					DiscountAmount2		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountAmount
					DiscountDate3		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
					DiscountPercent3	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent
					DiscountAmount3		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountAmount


		VendorReturn		
			constraint (InvoiceType.CreditMemo)
				"ReturnNumberValidOnCreditMemos,ReplacementPO'sOnly"	






	Conditions

		DistributionCodeHasTax		
			restricted
			when (DistributionCode entered
			and   any DistributionCodeDetailRel.TaxCode entered)
		
		DistributionAmountOutOfBalance		
			restricted
			when (InvoiceAmount.CurrencyAmount != TotalDistributionAmount.TransactionTotal
			and   IsNotPrepayment)

		ThirdPartyTaxAmountOutOfBalance		
			restricted
			when (!TaxEntityUsesInforTax
			and   TaxAmount != TotalTaxAmount)

		InforTaxAmountOutOfBalance		
			restricted
			when (TaxEntityUsesInforTax
			and   TaxAmount != PayablesInvoiceTaxRel.TotalInvoicedTaxAmount)
		
		TaxAmountInBalance		
			restricted
			when (!ThirdPartyTaxAmountOutOfBalance
			and   !InforTaxAmountOutOfBalance)

		TaxAmountOutOfBalance 		
			restricted
			when (!TaxAmountInBalance)
		
		DisplayOnOOBInvoiceList			
			restricted
			when (PaymentAmountOutOfBalance
			or    DistributionAmountOutOfBalance
			or    TaxAmountOutOfBalance)

		HasDistributionSummary 
			restricted 
			when (PayablesInvoiceDistributionSummaryRel exists)

		HasDistributionAggregation 
			restricted 
			when (APDistributionAggregationRel exists)
		
		AddOnChargeAmountEntered 
			restricted 
			when (AddOnChargeAmount entered)
		
		OldOneSourceMatch
			when (MatchCompanyRel.Name = "OldMatch")

		OneSourceMatchOneCallPerInvoice
			when (OneSourceMatchProcessByInvoiceRel.Value entered
			and   OneSourceMatchProcessByInvoiceRel.Value != "OFF")

		VertexMatchOneCallPerInvoice
			when (OneSourceMatchProcessByInvoiceRel.Value entered
			and   OneSourceMatchProcessByInvoiceRel.Value != "OFF")

		HasAllowReleaseOnlyMatchInvoice
			restricted
			when (AllowReleaseOnlyMatchInvoiceRel exists
			and   AllowReleaseOnlyMatchInvoiceRel.Value = "YES")

		HasPayablesInvoiceDetail
			when (PayablesInvoiceDetailRel exists)

		AllowReleaseOnlyMatchInvoice
			restricted
			when (AllowReleaseOnlyMatchInvoiceRel exists
			and   AllowReleaseOnlyMatchInvoiceRel.Value = "YES"
			and   MatchStatus < 2
			and   Status.Unreleased
			and   !MatchProcessType.Expense)

		IsInvoiceAmountNotZero
			when (InvoiceAmount.CurrencyAmount != 0
			and   InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount != 0)

		HasReceipts
			restricted
			when (PurchaseOrderReceiptsForInvoiceRel exists)

		HasLocations
			restricted
			when (VendorLocationRemitToCodesRel exists)

		DisplayLocationMessage
			restricted
			when (!HasRemitToCode
			and	  HasLocations)

		ShowBypassMatch
			restricted
			when (TransientInvoiceEntryTemplate.MatchInvoice
			or	  PurchaseOrderInvoice)

		ShowErrorsForm
			restricted
			when (IsOnHold
			or	  DisplayCreateInProgress
			or	  DisplayMatchInProgress
			or	  DisplayMatchInProgressWithAsyncFailure
			or	  DisplayTransientAutoMatchError
			or	  DisplayUnmatchInProgress
			or	  DisplayDistCodeInProcess
			or    DisplayTaxPreProcessing	
			or	  DisplayTaxInProgress
			or	  DisplaySabrixMessage
			or	  BudgetEditInProgress
			or	  BudgetEditFailure
			or	  DisplayMatchUnsuccessful)

		ShowErrorsPanel
			restricted
			when (ErrorsExists
			or	  ShowErrorsForm)

		PreviousApproverExists
			restricted
			when (DerivedPreviousRoutingApprover entered)

		NextApproverExists
			restricted
			when (DerivedNextRoutingApprover entered)

		InvoiceHoldCodeEntered
			restricted
			when (InvoiceHoldCode entered)

		RecordExists
			restricted
			when (PayablesInvoice exists)

		InvoiceIsOnTaxToleranceHold
			restricted
			when (IsOnHold
			and   InvoiceHoldCode = Company.VendorGroup.TaxToleranceHoldCode)

		HasInvoicedTax
			restricted
			when (TaxCode entered
			and   DerivedTaxMethodInvOrAcc.Invoiced)

		AllowShortPay				
			restricted

			when (TaxEntityUsesThirdPartyTax	
			and   Company.ShortPayAllowed)								


		AllowShortPayAndAccrueAction
			restricted
			when (!MatchProcessType.Expense
			and   TaxEntityUsesSabrix
			and   TaxConfigurationRel.OneSourceVersionType.Generic
			and   Company.ShortPayAllowed								
			and   (Status.Unreleased
			or	   Status.PendingApproval
			or	   Status.Approved)
			and    TaxAmount entered)

		AllowAddContract 
			when (MatchProcessType.ServiceContract
			and   !IsChargeback 
			and   (Status.Unreleased
			or	   Status.PendingApproval
			or	   Status.Approved))

		ProcessTaxOnHoldValid		
			restricted
			when (MatchProcessType.Expense
			and   DoOneSourceAfter
			and   Company.AllowShortPay
			and   Company.PutOutOfToleranceOnHold
			and   InvoiceIsOnTaxToleranceHold)

		ShortPayAndAccrueTaxValid			
			restricted
			when (MatchProcessType.Expense
			and   Company.AllowShortPay
			and  !TaxEntityUsesThirdPartyTax
			and  !Status.Released
			and  !Status.Rejected
			and  !Status.Cancelled
			and  !Status.Paid
			and  !Status.Historical
			and   HasInvoicedTax
			and   InvoiceIsOnTaxToleranceHold)

		ProcessTaxOnHoldValidForMatch
			restricted
			when (!MatchProcessType.Expense
			and   DoOneSourceAfter
			and   Company.PutOutOfToleranceOnHold
			and   InvoiceIsOnTaxToleranceHold)

		HasDialogForAInvoiceExists
			when (BuyerSupplierContactMessageRel exists)

		RequireICNCode			
			restricted

			when (OneSourceRequireICNCodeRel exists)	

		DoOneSourceAfter		
			restricted
			when (Company.DelayTaxProcessing	
			and   TaxEntityUsesSabrix)

		DoVertexAfter			
			restricted
			when (TaxEntityUsesVertex
			and   Company.DelayTaxProcessing)		

		CallVertexByDocument 
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByTransaction) 

		CallVertexByLine 
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByLine) 

		DoTaxAfter				
			restricted
			when (DoOneSourceAfter
			or    DoVertexAfter)

		HasTaxTolerance								
			restricted
			when ((!IsUseTaxCodeAccounts
			and  (TaxEntityRel.TaxToleranceLimit entered
			or    TaxEntityRel.FromRate entered
			or	  TaxEntityRel.ThruRate entered
			or    TaxEntityRel.TaxToleranceAmount entered))
			or   (IsUseTaxCodeAccounts
			and  (EntityTaxCodeRel.TaxToleranceLimit entered
			or    EntityTaxCodeRel.FromRate entered
			or	  EntityTaxCodeRel.ThruRate entered
			or    EntityTaxCodeRel.TaxToleranceAmount entered)))

		ManualOnlineCreate		
			restricted
			when (OnlineCreateInvoice
			or    OnlineCreateAndRelease)

		OnlineCreateInvoice		
			restricted
			when (action = "CreateInvoiceUnreleased"
			and   invoking action = "CreateInvoiceUnreleased"
			and   initiating action = "CreateInvoiceUnreleased")

		OnlineCreateAndRelease	
			restricted
			when (action = "CreateAndReleaseUnreleased"
			and   invoking action = "CreateAndReleaseUnreleased"
			and   initiating action = "CreateAndReleaseUnreleased")

		ApplyManualPaymentIsValid	
			restricted
			when (Status.Released
			and   AmountPaid !entered
			and   !PaymentsHaveBeenScheduledRel exists
			and   !PaymentsBeyondOpenStatusRel exists
			and   !PaymentsHaveBeenAppliedRel exists
			and   !InvoiceSource.IntercompanyBilling) 	

		ProcessOneSourceValid
			restricted
			when (DoOneSourceAfter
			and   TaxEntityUsesSabrix
			and   (Status.Unreleased
			or	   Status.PendingApproval
			or	   Status.Approved
			or	   Status.Amended)
			and	  !InvoiceSource.IntercompanyBilling 		
			and   ((MatchProcessType.Expense
			and     RequireICNCode
			and     any PayablesInvoiceDistributionRel.ICNCode entered)
			or    (MatchProcessType.Expense
			and    !RequireICNCode)
			or    (!MatchProcessType.Expense)))

		ProcessVertexValid						
			restricted
			when (Company.DelayTaxProcessing		
			and   TaxEntityUsesVertex
			and   IsNotPrepayment					

			and   (Status.Unreleased
			or	   Status.Amended))

		DisplayProcessVertex
			restricted
			when (ProcessVertexValid
			and  !BackgroundProcessing.TaxProcessing	
			and   MatchProcessType.Expense)

		DisplayProcessVertexForMatch  
			restricted 
			when (TaxEntityUsesVertex
			and   TaxEntityRel.TaxAttributeCode entered
			and  !BackgroundProcessing.TaxProcessing
			and  !CallVertexByDocument	
			and  !MatchProcessType.Expense)

		UsePayablesTaxTolerance
			restricted
			when (AllowShortPay			
			or    Company.AllowToleranceOverride		
			or    Company.PayablesTaxTolerance)		


		ExcludeFromTaxEstimate		
			restricted
			when  (MatchProcessType.Expense
			and   (TaxEntityUsesSabrix			
			or     TaxEntityUsesVertex)			
			and   ((TaxConfigurationRel.ExcludeFromInvoiceAmount entered
			and     TaxConfigurationRel.ExcludeFromInvoiceAmount <= InvoiceAmount.CurrencyAmount
			and     TaxConfigurationRel.ExcludeToInvoiceAmount entered
			and     TaxConfigurationRel.ExcludeToInvoiceAmount >= InvoiceAmount.CurrencyAmount)
			or     (TaxConfigurationRel.ExcludeFromInvoiceAmount entered
			and     TaxConfigurationRel.ExcludeFromInvoiceAmount <= InvoiceAmount.CurrencyAmount
			and     TaxConfigurationRel.ExcludeToInvoiceAmount not entered
			and     InvoiceAmount.CurrencyAmount < 0)
			or     (TaxConfigurationRel.ExcludeFromInvoiceAmount not entered
			and     InvoiceAmount.CurrencyAmount > 0
			and     TaxConfigurationRel.ExcludeToInvoiceAmount entered
			and     TaxConfigurationRel.ExcludeToInvoiceAmount >= InvoiceAmount.CurrencyAmount)
			or     (TaxEntityRel.OneSourceVersionType.Original	
			and     any PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate)
			or     (BypassNonUS)))

		BypassNonUS					
			restricted
			when (TaxConfigurationRel.ExcludeNonUSFromTaxEstimate
			and   DerivedTaxDeterminationCountry != "US"
			and   DerivedTaxDeterminationCountry != "")

		AllAPDistributionAggregationsAreApproved
			restricted
			when (instance count of APDistributionAggregationRel = instance count of APDistributionAggregationApprovedRel)

		DoDetailTaxProcessing										
			when (TaxEntityUsesVertex								
			and   CalculateTax.InputReturnVertexTaxIn.Detail)		

		AllowZeroCostInvoice			
			restricted
			when (!MatchProcessType.Expense
			and   (Company.PurchasingCompany.MatchCompany.AllowZeroCostInvoice
			or     Vendor.AllowZeroCostInvoice.Yes))

		AllowMarkAsPaid				
			restricted
			when (Company.MarkedAsPaidOffsetAccount entered
			and   Status.Released
			and   AmountPaid not entered
			and   !GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting)

		CanClearInvoiceAndCredits				
			restricted
			when  (Status.Released
			and   AmountPaid not entered
			and   Company.MarkedAsPaidOffsetAccount entered
			and	  HasCreditApplied
			and   DerivedUnappliedAmount = 0
			and   !GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting)

		AllowReopenMarkAsPaid	
			restricted
			when (MarkedAsPaidPayablesInvoicePaymentRel exists
			and   !InvoiceSource.IntercompanyBilling)

		BudgetEditingInformationExists
			when (BudgetTemplateGroupTotalRel exists)

		HeaderBudgetEditErrorExists
			when (HeaderBudgetEditErrorRel exists)

		DistributionBudgetEditErrorExists
			when (DistributionBudgetEditErrorRel exists)

		BudgetEditInProgress
			when (BudgetEditProcessing.InProcess)

		BudgetEditFailure
			when (BudgetEditProcessing.Failure)

		OneSourceServerErrorsExist		
			restricted
			when (any PayablesInvoiceErrorRel.ErrorType.SabrixTaxSevereError
			or 	  any PayablesInvoiceErrorRel.ErrorType.AsyncFailure)

		DisplayUpdateableReportableIncome
			when ((Status.Unreleased
			or     Status.PendingApproval)
			and  !MultiplePayablesInvoicePaymentRelExists)

		MissingDetailLinesFromContract
			restricted
			when (DerivedNumberOfContractLinesToInvoice > DerivedNumberOfInvoiceDetails)

		MissingDetailLinesFromPurchaseOrder
			restricted
			when (DerivedNumberOfPurchaseOrderLinesToInvoice > DerivedNumberOfInvoiceDetails)

		SubmittedSupplierPOInvoice
			when (SupplierCreatedInvoiceStatus.SubmittedSupplierCreatedInvoice
			and  (MatchProcessType.ReceiptMatch
			or    MatchProcessType.Service))

		SubmittedSupplierServiceInvoice
			when (SupplierCreatedInvoiceStatus.SubmittedSupplierCreatedInvoice
			and   MatchProcessType.ServiceContract)

		UnsubmittedSupplierPOInvoice
			when (SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice
			and  (MatchProcessType.ReceiptMatch
			or    MatchProcessType.Service))

		UnsubmittedSupplierServiceInvoice
			when (SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice
			and   MatchProcessType.ServiceContract)

		HasSupplier
			restricted
			when (Vendor.HasSupplier)

		HasSupplierContactForPurchaseFrom
			restricted
			when (DerivedSupplierSourceId entered)

		HasMessageDialog
			restricted
			when (SupplierContactMessageRel exists)

		HasMessageDialogOther
			restricted
			when (SupplierMessageDialogRel exists)

		CanCreateDialog
			restricted
			when (HasSupplier
			and   SupplierGroupRel.CanCreateDialogWithSupplier)

		SupplierContactHasInvoiceAccess
			restricted
			when (SupplierSourceIdValidRel.HasInvoiceAccess)

		CommitmentSearchFilter
			restricted
			when (MatchesAccountingEntitySearch
			and	  MatchesAccountingUnitSearch
			and	  MatchesProjectSearch
			and	  MatchesFinDim1Search
			and	  MatchesFinDim2Search
			and	  MatchesFinDim3Search
			and	  MatchesFinDim4Search
			and	  MatchesFinDim5Search
			and	  MatchesFinDim6Search
			and	  MatchesFinDim7Search
			and	  MatchesFinDim8Search
			and	  MatchesFinDim9Search
			and	  MatchesFinDim10Search
			and	  MatchesAccountSearch)





		IsValidForActorContext	
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		IsNotPrepayment 
			restricted
			when (!InvoiceType.Prepayment
			and   !InvoiceType.PrepaymentCredit
			and   !InvoiceType.MatchPrepayment)

		CreateBySupplierAvailableForSubmittal
			restricted
			when (SupplierCreatedInvoiceStatus = 1)


		CreateBySupplierUnsubmittedInvoices
			restricted
 			when (Company.VendorGroup			= actor.agent(SupplierSourceId).SupplierGroup
 			and   Vendor						= actor.agent(SupplierSourceId).Supplier.Vendor
 			and	  SupplierCreatedInvoiceStatus	= 1)

		CreateBySupplierSubmittedInvoices
			restricted
 			when (Company.VendorGroup			= actor.agent(SupplierSourceId).SupplierGroup
 			and   Vendor						= actor.agent(SupplierSourceId).Supplier.Vendor
 			and	  SupplierCreatedInvoiceStatus	= 2)

		CanEnterProofOfDelivery
			restricted
			when (CreateBySupplierValid
			and   !ProofOfDeliveryExists)

		CreateBySupplierValid
			restricted
			when (actor.agent(SupplierSourceId).SupplierGroup entered)

		CreateBySupplierInvoiceCanMaintain
			restricted
			when (SupplierCreatedInvoiceStatus = 1)

		CreateBySupplierInvoiceSubmitted
			restricted
			when (SupplierCreatedInvoiceStatus = 2)

		CreateBySupplierMatchToPO
			restricted
			when (TransientSupplierInvoiceType.POMatch
			or    MatchProcessType.Service
			or    MatchProcessType.ReceiptMatch)

		CreateBySupplierServiceContract
			restricted
			when (TransientSupplierInvoiceType.ServiceContract
			or    MatchProcessType.ServiceContract)

		CreatedBySupplier
			restricted
			when (SupplierCreatedInvoiceStatus = 1
			or    SupplierCreatedInvoiceStatus = 2)

		RefreshTotalTaxValid
			restricted
			when (MatchProcessType.Expense
			and  (Status.Unreleased
			or    Status.PendingApproval
			or 	  Status.Amended))		

		DisplayTaxAdjustment
			restricted
			when (!RecordExists
			or    TransientInvoiceEntryTemplate.MatchInvoice
			or    IsMatchInvoice)

		DisplayDistCodeInProcess
			restricted
			when (BackgroundProcessing.DistributionCode)

		DisplayCreateInProgress
			restricted
			when (BackgroundProcessing.CreateMatchInvoice)

		DisplayMatchInProgress
			restricted
			when (BackgroundProcessing.MatchInvoice
			and   !AsyncFailure)

		DisplayTaxPreProcessing	
			restricted
			when (BackgroundProcessing.TaxPreProcessing
			and   !AsyncFailure)

		DisplayTaxInProgress		
			restricted
			when (BackgroundProcessing.TaxProcessing
			and   !AsyncFailure)

		DisplayMatchInProgressWithAsyncFailure
			restricted
			when (BackgroundProcessing.MatchInvoice
			and   AsyncFailure)

		DisplayTransientAutoMatchError
			restricted
			when (TransientAutoMatchError entered)

		DisplayUnmatchInProgress
			restricted
			when (BackgroundProcessing.UnmatchInvoice)

		DisplayProcessingInBackground
			restricted
			when (BackgroundProcessing.ProcessingInBackground)

		DisplayMatchUnsuccessful
			restricted
			when (!InvoiceMatched
			and   BackgroundProcessing not entered
			and   BudgetEditProcessing not entered
			and   !MatchProcessType.Expense
			and  (MatchReconQueueRel.MatchWork.VerifyMatchMessage entered
			or    last AutoMatchResultInvoiceRel.ErrorMessage entered))

		DisplayExceedsMaxSpendAmount					
			restricted
			when (!Status.Historical
			and   Vendor.ValidateCertificationAmount
			and   ValidateVendorCertificationMaxSpendExistsRel exists	
			and  (first ValidateVendorCertificationMaxSpendExistsRel.CurrentSpendAmount + InvoiceAmount.CurrencyAmount) > first ValidateVendorCertificationMaxSpendExistsRel.MaximumSpendAmount)	
					
		AsyncFailure
			restricted
			when (AsyncErrorRel exists)

		InBackgroundProcessing
			restricted
			when (BackgroundProcessing entered)

		DisplaySabrixMessage					
			restricted
			when (SabrixError   entered)

		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		IsPrepaymentType
			restricted
			when (!IsNotPrepayment)

		IsChargebackSubType
			restricted
			when (InvoiceType.CreditMemo
			and   Suffix = 111)

		HasTaxDistribution
			restricted
			when  (TaxDistributionsRel exists)

		HasTaxOriginatingOnDistribution
			restricted
			when  (TaxDistributionsRel exists
			and    TaxCode not entered)

		HasHeaderLandedDistribs			
			restricted
			when (IsLandedTax
			and   TaxDistributionsRel exists)

		DisplayLandedTaxWarning			
			restricted
			when (IsLandedTax
			and   TaxDistributionsRel not exist
			and   TotalTran1TaxableDistributionRel not exist
			and  !DisplayDistCodeInProcess
			and   IsNotPrepayment)		

		ChangeTaxCodeValid
			restricted
			when  (RecordExists
			and   !HasTaxOriginatingOnDistribution
			and    MatchProcessType.Expense
			and  ((Status.Unreleased
			or     Status.PendingApproval)
			or   ((Status.Approved
			or     Status.Amended)				
			and    Company.VendorGroup.DistributionEntryOnApproval)))

		DisplayAddTaxCode
			restricted
			when (ChangeTaxCodeValid
			and   TaxCode not entered)

		DisplayChangeTaxCode
			restricted
			when (ChangeTaxCodeValid
			and   TaxCode entered)

		DisplayTaxSection		
			restricted
			when (RecordExists
			and   MatchProcessType.Expense
			and  !IsChargeback				
			and  (TaxCode 	entered
			or	  TaxAmount entered			
			or    PayablesInvoiceTaxRel.TotalInvoicedTaxAmount entered		
			or    PayablesInvoiceTaxRel.TotalAccruedTaxAmount entered))

		DisplayTaxSectionMatchInvoice        		
			restricted
			when (RecordExists
			and  (!MatchProcessType.Expense
			or    IsChargeback))  

		DisplayAddTaxCodeLink	
			restricted
			when (RecordExists
			and  !DisplayTaxSection)

		TaxAccrualUsesTaxEntity		
			restricted
			when (Company.TaxAccrualEntityOverride)

		VATTax
			restricted
			when (CalculateTax.Imposition = "VAT"
			or    CalculateTax.ReturnedTaxType = "VAT")

	   	IsForeignVAT
			restricted
			when (VATTax
			and  (ProcessLevel.PostalAddress.Country entered
			and  (ProcessLevel.PostalAddress.Country != Vendor.VendorCountry)))

		IsReverseCharge
			restricted
			when (CalculateTax.ReverseCharge)	

		ValidVendorDiversity
			restricted
			when (VendorDiversityRel exists
			or    VendorLocationDiversityRel exists)

		PayablesInvoiceTaxExists
			restricted
			when (PayablesInvoiceTaxRel exists)

		DisplayPayablesInvoiceTaxDrill
			restricted
			when (PayablesInvoiceTaxExists
			and   ShowPayablesInvoiceTaxDrillRel exists)

		PayablesInvoicePaymentRelExists
			restricted
			when (PayablesInvoicePaymentRel exists)

		CalculateRateActionValid
			restricted
			when (TaxCode.TaxType.CalculatedRate
			and  (not CreditForRebill 
			or    MatchProcessType.ServiceContract
			or    MatchProcessType.Service)
			and  (Status.Unreleased
			or    Status.PendingApproval
			or   (Company.VendorGroup.DistributionEntryOnApproval
			and   Status.Approved)))

		UnpostedDistributionsExist
			restricted 
			when (UnpostedDistributionsRel exists)

		CanUseMiscellaneousDetail
			restricted
			when (!CreditOrDebitMemo
			and   !MatchProcessType.Expense
			and    BypassMatch)

		CanUseApDetail
			restricted
			when (BypassMatch
			or    MatchProcessType.AOCOnly
			or    MatchProcessType.ReceiptMatch)

		IntrastatHeaderInfoRequired
			restricted
			when (PayablesInvoiceDistribution set exists
			and	  any PayablesInvoiceDistribution set.LineType.Goods)			

		DistributionGoodsLineExist	
			restricted
			when (PayablesInvoiceDistribution set exists
			and	  any PayablesInvoiceDistribution set.LineType.Goods)			

 		HasManualPaymentAvailableForDelete
 			restricted
 			when (Status.Unreleased
 			and   !MultiplePayablesInvoicePaymentRelExists
 			and   first PaymentsHaveBeenAppliedRel.IsManuallyCreated)

 		PaymentsBeyondOpenStatusExist
 			restricted
			when (PaymentsBeyondOpenStatusRel exists)

 		PaymentGainLossHasBeenDone
 			restricted
			when (PaymentGainLossHasBeenDoneRel exists)

		CancelledOrPostedDistributionsExist
			restricted
			when (CancelledOrPostedDistributionsRel exists)

		UpdateDiversityCodeValid
			restricted
			when (Status.Paid
			or    Status.Historical)

		BadStatusSwitch
			restricted
			when (PaymentGainLossHasBeenDoneRel exists
			or 	  PaymentsBeyondOpenStatusRel exists
			or    CancelledOrPostedDistributionsRel exists)

		DisplayEntryDistributionCode
			restricted
			when ((Status.Unreleased
			or     Status.PendingApproval)
			and   MatchProcessType.Expense)

		DisplayTextDistributionCode
			restricted
			when (!Status.Unreleased
			and   !Status.PendingApproval
			and   DistributionCode entered)

		HasDistributionCode
			restricted
			when (DistributionCode entered)

		DisplayReplacementInvoiceLink
			restricted
			when (CanceledInvoice
			and   ReplacementRecurringInvoiceRel exists)

		IntrastatHasBeenPosted
			restricted
			when (IntrastatHeaderRel exists
			and IntrastatHeaderRel.Status > 1)

		HasReversedIntransitDistribution
			restricted
			when (PayablesInvoiceDistribution set exists
			and	  first PayablesInvoiceDistribution set.IntransitDistribution.Reversed)

		IsHoldable
			restricted
			when (!Status.Historical
			and   !Status.Cancelled
			and   !Status.Paid
			and   !IsOnHold
			and   !InterfaceInProcess
			and   !InBackgroundProcessing)

		IsManualHoldable  
			restricted
			when (IsHoldable
			and   OpenPayablesInvoicePaymentRel	exists
			and   !InvoiceSource.IntercompanyBilling)	

		IsOnHold
			when (InvoiceHoldCode != blank)

		VendorIsOnHold
			when (Vendor.OnHold)

		CanEmailInvoice
			restricted
			when (!InBackgroundProcessing
			and   !InterfaceInProcess)

		HasPayablesInvoiceEmail
			when (PayablesInvoiceEmail set exists)

		WithinInvoiceTypeForSearch
			restricted
			when ((InvoiceTypeForSearch not in context
				or InvoiceTypeForSearch not entered)
			or (InvoiceTypeForSearch.Invoice
				and InvoiceType.Invoice)
			or (InvoiceTypeForSearch entered
				and !InvoiceTypeForSearch.Invoice
				and InvoiceType = InvoiceTypeForSearch))

		WithinDueDateRange
			restricted
			when (DueDateRange not entered
			or	 (DueDateRange entered
			and	  DueDate within DueDateRange))

		WithinInvoiceDateRange
			restricted
			when (InvoiceDateRange not entered
			or	 (InvoiceDateRange entered
			and	  InvoiceDate within InvoiceDateRange))

		WithinDateRanges
			restricted
			when (WithinInvoiceDateRange
			and   WithinDueDateRange)

		WithinPostDateRange
			restricted
			when (PostDateRange not entered
			or	 (PostDateRange entered
			and	  DistributionDate within PostDateRange))

		WithinVoucherNumberRange
			restricted
			when (VoucherNumberRange 	not entered
			or   (VoucherNumberRange		entered
			and   VoucherNumber.Prefix = VoucherNumberRange.Prefix
			and   VoucherNumber.Sequence within VoucherNumberRange))

		IsRecurrable
			restricted
			when (!Status.Historical
			and   !Status.Paid
			and   !Status.Cancelled
			and   !Status.Rejected
			and  (InvoiceType.Invoice
			or	  InvoiceType.DebitMemo))

		IsSplitable
			restricted
			when (!IsRecurringInvoice
			and   !Status.Historical
			and   !Status.Paid
			and   !Status.Cancelled
			and   !Status.Rejected
			and  (InvoiceType.Invoice
			or	  InvoiceType.DebitMemo)
			and  !PaymentsExist
			and   RecordExists)


		IsSplitInvoice
			restricted
			when (instance count of MultiplePayablesInvoicePaymentRel > 1)	
		
		DisplaySplitPaymentInfo
			restricted
			when (IsSplitInvoice)

		PaymentsExist
			restricted
			when (PaymentsHaveBeenMadeRel exists)

		CashLedgerPaymentsExist
			restricted
			when (CashLedgerPayablesPaymentRel exists)

		IsIncomeCodeUpdatable
			restricted
			when (!Status.Historical)

		IsPOCancel
			restricted
			when  (Suffix = 888
			or     Suffix = 999)

		IsCancelable
			restricted
			when  (CancelDate not entered
			and   !InvoiceType.PrepaymentCredit		
			and	   MatchObjectID not entered
			and    !IsPOCancel
			and   !InvoiceSource.IntercompanyBilling
			and    BackgroundProcessing not entered
			and   !BudgetEditProcessing.InProcess
			and   !TaxEntityRel.ThirdParty.TaxEngine 
			and   (Status.Approved					
			or     Status.Released))

		IsPrepaymentCreditWithTax			
			restricted
			when (InvoiceType.PrepaymentCredit
			and   HasTaxCode)

		IsCreditAvailableForInvoiceApplication
			restricted
			when (PayablesInvoiceForCompanyVendorRel exists
			and	  (Status.Released				
			or	   Status.Unreleased)

			and	  DerivedUnappliedAmount > 0		


			and  !InvoiceSource.IntercompanyBilling
			and  (InvoiceType.CreditMemo
			or    InvoiceType.PrepaymentCredit))

		IsInvoiceAvailableForCreditApplication
			restricted
			when  (PayablesInvoiceForCompanyVendorRel exists
			and   (Status.Released				
			or	   Status.Unreleased)

			and	  DerivedUnappliedAmount > 0		


			and   !InvoiceSource.IntercompanyBilling
			and   (InvoiceType.Invoice
			or	   InvoiceType.Prepayment
			or	   InvoiceType.DebitMemo
			or	   InvoiceType.MatchPrepayment))

		AddOnChargeExists
			restricted
			classic name is AOC-DTLS-EXIST
			when (first PayablesInvoiceAddOnChargeRel exists)

		UseReceiptAOCLinesWithAddOnCharge
			restricted
			when (UseReceiptAOCLinesForAnalysis
			and PurchaseOrderReceiptAddOnChargesByMatchIDRel exists)

		UseReceiptAOCLinkForAnalysisWithAddOnCharge
			restricted
			when (UseReceiptAOCLinkForAnalysis
			and PurchaseOrderReceiptInvoiceLinkAOCRel exists)

		NoMatchObjectIdEnteredWithAddOnCharge
			restricted
			when (!MatchObjectIdEntered
			and PurchaseOrderReceiptAddOnChargesForInvoiceRel exists)

		UseReceiptLinesForAnalysisForMatchedReceiptLines
			restricted
			when (UseReceiptLinesForAnalysis
			and PurchaseOrderReceiptLineRel exists)

		UseReceiptLinkForAnalysisForMatchedReceiptLines
			restricted
			when ( UseReceiptLinkForAnalysis
			and PurchaseOrderReceiptInvoiceLinkRel exists)

		NotMatchObjectIdEnteredForReceiptLines
			restricted
			when (!MatchObjectIdEntered
			and PurchaseOrderReceiptLinesForInvoiceRel exists)

		HasBatchNumber
			restricted
			classic name is APBATCH
			when (BatchNumber entered)

		PaymentAmountOutOfBalance
			restricted
			classic name is APISET11
			when (TotalPaymentAmount.TransactionTotal != InvoiceAmount.CurrencyAmount)

		Unreleased
			restricted
			classic name is APISET2
			when (Status.Unreleased)

		AmountOutOfBalance	
			restricted
			classic name is APISET7
			when (MatchProcessType.Expense
			and  (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
			or    TotalPaymentAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
			or    TotalTaxAmount != TaxAmount))

		ExpenseAmountOutOfBalance		
			restricted
			when (MatchProcessType.Expense
			and  (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
			or    TotalPaymentAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
			or    OneSourceTaxIsOutOfBalance		
			or    VertexTaxIsOutOfBalance			
			or    InforTaxIsOutOfBalance))			

		HasBeenMatched
			restricted
			classic name is APMATCHSTATUS
			when (MatchStatus > 1)

		NotMatched
			restricted
			classic name is APMATCHSTATUS
			when ((MatchStatus.Unmatched
				or MatchStatus.POCostMessagesExist)
			and   (!MatchProcessType.Expense)
			and   (Status.Unreleased
				or Status.PendingApproval
				or Status.Approved
				or Status.Released))

		IsNotMatched
			restricted
			when (MatchStatus.Unmatched
			or    MatchStatus.POCostMessagesExist)

		HasPurchaseFromLocation
			restricted
			classic name is APVENLOCPURCH
			when (PurchaseFromLocation entered)

		HasRemitToCode
			restricted
			classic name is APVENLOCREMIT
			when (RemitToCode entered)

		CreditOrDebitMemo
			restricted
			when (InvoiceType.CreditMemo
			or    InvoiceType.DebitMemo)

		CanViewRebateFields	
			restricted
			when (!RecordExists
			or	  InvoiceType.CreditMemo
			or    InvoiceType.DebitMemo)	

		MemoLawsonPo
			restricted
			when (CreditOrDebitMemo
			and   !MatchProcessType.Expense
			and   !MatchProcessType.ServiceContract
			and   Suffix != 111
			and   Suffix != 888
			and   Suffix != 999)

		ShowDetailsNoOriginalInvoice
			restricted
			when (MemoLawsonPo
			and   MatchInvoiceReferenceRel not exists)

		ShowDetailsOriginalInvoice
			restricted
			when (MemoLawsonPo
			and   MatchInvoiceReferenceRel exists)

		AvailableToMatch
			restricted
			classic name is AVAIL-TO-MATCH
			when (!MatchProcessType.Expense
			and   MatchStatus.Unmatched
			and  (Status.Unreleased
			or    Status.PendingApproval))

		MatchError
			restricted
			when (MatchErrorType > 1)

		BatchInvoice
			restricted
			when (BatchNumber entered)

		HasMatchPurchaseOrders
			restricted
			when (MatchPurchaseOrderInvoicesRel exists)

		HasMultipleMatchPurchaseOrders
			restricted
			when (NumberOfLinkedPurchaseOrders > 1)

		HasSingleMatchPurchaseOrder
			restricted
			when (NumberOfLinkedPurchaseOrders = 1)

		HasMultipleServiceContracts
			when (instance count of MatchServiceContractInvoicesRel > 1)

		HasContractAttachmentsAndComments
			when (ContractAttachmentRel exists
			or	  ContractCommentRel exists)

		HasSingleServiceContract
			when (instance count of MatchServiceContractInvoicesRel < 2)

		BypassMatchInvoice
			restricted
			classic name is BYPASS-INV
			when (BypassMatch)

		ReleasedCreditOrDebitMemo
			restricted
			classic name is C-OR-D-REL
			when ((InvoiceType.CreditMemo
				or    InvoiceType.DebitMemo)
			and   not MatchProcessType.AOCOnly
			and   not MatchProcessType.Expense
			and   Status.Released)

		UnreleasedCreditOrDebitMemo
			restricted
			classic name is C-OR-D-UNREL
			when ((InvoiceType.CreditMemo
				or    InvoiceType.DebitMemo)
			and   not MatchProcessType.AOCOnly
			and   not MatchProcessType.Expense
			and  (Status.Unreleased
			or    Status.PendingApproval))

		CanceledInvoice
			restricted
			classic name is CANCEL-INVOICE
			when (CancelSequence entered)

		CanceledExpenseInvoice
			restricted
			when (CanceledInvoice
			and   MatchProcessType.Expense)

		HasAppliedPayments
			when (HasCreditApplied
			or    IsInvoiceApplied)

		HasCreditApplied
			restricted
			when ((not InvoiceType.CreditMemo
			and    not InvoiceType.PrepaymentCredit)
			and    PayablesCreditMemoRel exists)

		IsCreditInvoice
			restricted
			when (InvoiceType.CreditMemo
			or    InvoiceType.PrepaymentCredit)

		IsCreditMemo
			restricted
			when (InvoiceType.CreditMemo)

		IsChargeback
			restricted
			when (InvoiceType.CreditMemo
			and   Suffix = 111)

		IsDebitMemo
			restricted
			classic name is DEBIT-INVOICE
			when (InvoiceType.DebitMemo)

		HasMatchedInvoices
			restricted
			when (first MatchTransPayablesInvoiceRel exists)

		IsUnreleasedExpenseCreditMemo	
			restricted
			when (Unreleased
			and   !InvoiceSource.IntercompanyBilling
			and	  IsNonMatchInvoice
			and   IsCreditMemo)

		IsUnreleasedExpenseInvoice		
			restricted
			when (Unreleased
			and   !InvoiceSource.IntercompanyBilling
			and	  IsNonMatchInvoice
			and   InvoiceType.Invoice)

		InvoiceDetailExists
			restricted
			classic name is DTLS-EXIST
			when (first PayablesInvoiceDetailRel exists)

		FromVendorReturn
			restricted
			classic name is FROM-RETURN
			when (VendorReturn entered)

		IntrastatInvoice
			restricted
			classic name is INTRAST-EXIST
			when (NatureOfTransactionCode entered
			or    StatisticalProcedure entered
			or    ShippingMethod entered
			or    UnloadingPort entered
			or    IntrastatNumber entered
			or    ShipTerm entered)

		IsInvoiceApplied
			restricted
			classic name is INV-APPLIED
			when ((InvoiceType.CreditMemo
			or     InvoiceType.PrepaymentCredit)
			and    PayablesCreditMemo2Rel exists)

		IsInvoiceHistory
			restricted
			classic name is INV-HISTORY
			when (Status.Historical
			and   CancelSequence not entered)

		IsReleased
			restricted
			classic name is INV-RELEASED
			when (Status.Released)

		IsInvoiceUnreleased
			restricted
			classic name is INV-UNRELEASED
			when (Status.Unreleased)

		InvoiceHasBeenAmended
			restricted
			when (Status.Amended)

		MatchAmended 
			restricted 
			when (Status.Amended 
			and   !MatchProcessType.Expense)
			
		IsTaxOverride
			restricted
			when (TaxAdjustment.OverrideProductOnly
			or    TaxAdjustment.OverrideProductAndAOC
			or	  TaxAdjustment.OverrideTaxablePOLine
			or	  TaxAdjustment.OverrideTaxablePOAndAOC)

		IsLawsonPo
			restricted
			when (!MatchProcessType.Expense
			and   !MatchProcessType.ServiceContract)

		PurchaseOrderInvoice
			restricted
			when (MatchProcessType.ReceiptMatch
			or    MatchProcessType.Service
			or    MatchProcessType.DropShip
			or    MatchProcessType.AOCOnly)

		ShowPurchaseOrderPanel
			when (PurchaseOrderInvoice
			and   !IsDebitMemo
			and  (!IsCreditMemo
			or    MatchInvoiceReferenceRel not exists))

		ShowSingleContract
			when (MatchProcessType.ServiceContract 
			and   HasSingleServiceContract) 

		ShowServiceContractPanel
			when (MatchProcessType.ServiceContract
			and   HasMultipleServiceContracts) 

		ShowServiceContractAttachmentsPanel
			when (MatchProcessType.ServiceContract
			and   HasContractAttachmentsAndComments) 

		ShowContractDetailPanel
			when (MatchProcessType.ServiceContract
			and   HasSingleServiceContract  
			and   !IsDebitMemo
			and   !IsChargeback 
			and  (!IsCreditMemo
			or    MatchInvoiceReferenceRel not exists))

		ShowAddOnChargebackDetails
			default label is untranslatable
			when (IsChargeback
			and   first PayablesInvoiceAddOnChargeRel exists)

		ShowMemoContractDetailPanel
			when (MatchProcessType.ServiceContract
			and   HasSingleServiceContract  
			and   MatchInvoiceReferenceRel exists
			and  (IsDebitMemo
			or    IsCreditMemo))

		ShowOriginalInvoice
			when (!MatchProcessType.Expense
			and   !MatchProcessType.ServiceContract
			and    IsMemoOnly
			and   !HasMatchInvoiceReferenceRel)

		PurchaseOrderOnlyInvoice
			when (MatchProcessType.ReceiptMatch
			or    MatchProcessType.DropShip
			or    MatchProcessType.AOCOnly)

		NonMemoLawsonPo
			restricted
			when (IsLawsonPo
			and   !IsDebitMemo
			and   !IsCreditMemo)

		NonMemoPurchaseOrderInvoice
			restricted
			when (IsLawsonPo
			and   !IsDebitMemo
			and   !IsCreditMemo)

		IsLinkNotMatch
			restricted
			when (MatchStatus.POCostMessagesExist)

		MatchInvoiceMessageRelExists
			restricted
			classic name is MAINVMSG-EXIST
			when (first MatchInvoiceMessageRel exists)

		ExceptionInvoice
			restricted
			when (!PaymentsExist
			and    MatchError
			and    MatchInvoiceMessageRelExists)

		ExceptionInvoicesByVendor
			restricted
 			when (SupplierInvoiceByVendor
  			and   MatchInvoiceMessageRelExists)

		OpenInvoicesByVendor
			restricted
 			when (SupplierInvoiceByVendor
  			and   IsOpenInvoice)

		PaidInvoicesByVendor
			restricted
			when (SupplierInvoiceByVendor
			and   PaidInvoice)

		OverdueInvoicesByVendor
			restricted
			when (SupplierInvoiceByVendor
			and   OverdueInvoice)

		HasHistoricalExpenseDistributions											
			restricted																
			when (CancelledOrPostedDistributionsExist								
			and   CancelledOrPostedDistributionsRel.DistributionType.Distribution)	

		HasOpenMatchInvoiceMessages
			when (OpenMatchInvoiceMessagesRel exists)

 		PriorityVendor
 			when (Vendor.PaymentPriority = 1)

		IsMatched
			restricted
			when (MatchObjectID entered
			and   !Status.Unreleased)

		IsMemoOnly
			restricted
			when (InvoiceType.CreditMemo
			or    InvoiceType.DebitMemo)

		IsNonBaseInvoice
			restricted
			classic name is NON-BASE-INV
			when (InvoiceCurrency != Company.Currency)	

		IsNonMatchInvoice
			restricted
			classic name is NON-MATCH-INV
			when (MatchProcessType.Expense)

		IsOpenCredit
			restricted
			when ((InvoiceType.CreditMemo
			or    InvoiceType.PrepaymentCredit)
			and   Status.Released)

		IsOpenInvoice
			restricted
			classic name is OPEN-INVOICES
			when (Status.Unreleased
			or    Status.PendingApproval
			or 	  Status.Approved
			or    Status.Released)

		IsPastDue
			restricted
			when (IsOpenInvoice
			and   current corporate date > DueDate)

		IsOpenPrepayment
			restricted
			classic name is OPEN-PREPAY
			when (InvoiceType.PrepaymentCredit
			and   Status.Released)

		IsOutBalPoInvoice
			restricted
			classic name is OUT-BAL-PO-INV
			when ((InvoiceAmount.CurrencyAmount 	!= TotalDistributionAmount.TransactionTotal
				or    InvoiceAmount.CurrencyAmount  != TotalPaymentAmount.TransactionTotal
				or    TaxAmount 	!= TotalTaxAmount)
			and   !MatchProcessType.Expense
			and   not Status.Unreleased)

		ExpenseTaxIsOutOfBalance		
			restricted
			when (VertexTaxIsOutOfBalance
			or	  OneSourceTaxIsOutOfBalance
			or    InforTaxIsOutOfBalance)

		TaxIsOutOfBalance
			restricted
			when (TaxAmount 	!= TotalTaxAmount
			and   MatchProcessType.Expense
			and   IsNotPrepayment					
			and   TaxEntityUsesThirdPartyTax		
			and  !Status.Cancelled
			and  !InBackgroundProcessing)

		OneSourceTaxIsOutOfBalance	
			restricted
			when (TaxEntityUsesSabrix
			and   TaxAmount entered
			and   TaxIsOutOfBalance)

		VertexTaxIsOutOfBalance	
			restricted
			when (TaxEntityUsesVertex
			and   TaxAmount entered
			and   TaxIsOutOfBalance)

		InforTaxIsOutOfBalance		
			restricted
			when (TaxAmount != PayablesInvoiceTaxRel.TotalInvoicedTaxAmount


			and   MatchProcessType.Expense
			and   IsNotPrepayment
			and  !Status.Cancelled
			and  !TaxEntityUsesThirdPartyTax
			and  !InBackgroundProcessing)

		IsOutOfBalance

			when (((IsNotPrepayment
			and  (InvoiceAmount.CurrencyAmount 	!= TotalDistributionAmount.TransactionTotal
			or    InvoiceAmount.CurrencyAmount  != TotalPaymentAmount.TransactionTotal
			or    ExpenseTaxIsOutOfBalance))		
			or   (IsPrepaymentType
			and  (InvoiceAmount.CurrencyAmount  != TotalPaymentAmount.TransactionTotal
			or    ExpenseTaxAmountIsOutOfBalance)))		
			and   MatchProcessType.Expense)

		ExpenseTaxAmountIsOutOfBalance		
			restricted
			when (MatchProcessType.Expense
			and  (TaxAmount != PayablesInvoiceTaxRel.TotalInvoicedTaxAmount
			and  !TaxEntityUsesThirdPartyTax)
			or   (TaxAmount != TotalTaxAmount
			and   TaxEntityUsesThirdPartyTax))

		PoNumberUsed
			restricted
			when (FirstPurchaseOrder entered)

		IsPodAvail
			restricted
			when (MatchStatus.Unmatched
			and   !MatchProcessType.Expense
			and   (Status.Unreleased
				or Status.PendingApproval
				or Status.Released))


		IsPool1
			restricted
			when (Vendor.PoolOption.CompanyVendor
			or    Vendor.PoolOption.UseCompany
			and   MatchCompanyRel.PoolOption.CompanyVendor)

		IsPool2
			restricted
			when (Vendor.PoolOption.CompanyVendorPo
			or    Vendor.PoolOption.UseCompany
			and   MatchCompanyRel.PoolOption.CompanyVendorPurchaseOrder)

		IsPool3
			restricted
			when (Vendor.PoolOption.CompanyVendorPoShipTo
			or    Vendor.PoolOption.UseCompany
			and   MatchCompanyRel.PoolOption.CompanyVendorPurchaseOrderShipToLocation)

		IsPrepaymentCredit
			restricted
			classic name is PREPAY-CREDIT
			when (InvoiceType.PrepaymentCredit)

		IsPrepayment
			restricted
			when (InvoiceType.Prepayment)

		RebatesExist
			restricted
			when (ContractRebateGroup.ContractGroup entered)

		IsUpdateRecurringDetails
			restricted
			when ((Status.Unreleased
			or	   Status.PendingApproval)
			and  ((Suffix not entered
			and    NumberOfRecurringInvoices entered)
			or    (Suffix entered
			and    NumberOfRecurringInvoices not entered
			and    RecurringFrequency entered
			and    !InvoiceType.PrepaymentCredit)))

		DisplayInvoiceSuffix
			restricted
			when (Suffix > 1
			or  ((IsRecurringInvoice
			or	  Suffix entered)	
			and   !Status.Unreleased
			and   !Status.PendingApproval))

		IsRecurringInvoice
			restricted
			when (NumberOfRecurringInvoices entered
			and   RecurringFrequency		entered)

		IsUpdatableRecurringInvoice
			restricted
			when (IsRecurringInvoice
			and  (Status.Unreleased
			or    Status.Released
			or    Status.Approved
			or    Status.PendingApproval
			or    Status.Amended)
			and   !PaymentsExist)

		DisplayRecurringInformation
			restricted
			when (((IsRecurringInvoice
			or      Status.Unreleased
			or      Status.PendingApproval)
			and    !IsSplitInvoice
			and     MatchProcessType.Expense)		
			or     !RecordExists)

		DisplayMatchInformation		
			restricted
			when (RecordExists
			and  !MatchProcessType.Expense)

		IsRecStat19
			restricted
			classic name is REC-STAT-1-9
			when (Status.Released
			or    Status.Historical)

		IsRegularInvoice
			restricted
			classic name is REGULAR-INVOIC
			when (InvoiceType.Invoice)

		IsRetainageInvoice
			restricted
			classic name is RETAINAGE-INV
			when (RetainageAmount entered)

		IsServiceInvoice
			restricted
			classic name is SERVICE-INV
			when (MatchProcessType.Service)

		IsTaxControl
			restricted
			classic name is TAXCNTRL
			when (TaxEntityRel.TaxableAmountEdit)

		SupplierShowPOLinks
			restricted
			when (MatchPurchaseOrderInvoicesRel exists
			and	  !actor.agent(SupplierSourceId).SupplierGroup.SPDisablePortalPOs)

		SupplierShowPaymentLinks
			restricted
			when (PaymentsExist
			and	  !actor.agent(SupplierSourceId).SupplierGroup.SPDisablePortalPayments)

		SupplierShowReceipt
			restricted
			when (PurchaseOrderReceiptsRel exists
			and	  !actor.agent(SupplierSourceId).SupplierGroup.SPDisablePortalReceipts)

		SupplierShowPO
			restricted
			when (instance count of MatchPurchaseOrderInvoicesRel = 1
			and	  !actor.agent(SupplierSourceId).SupplierGroup.SPDisablePortalPOs)

		SupplierShowPOs
			restricted
			when (instance count of MatchPurchaseOrderInvoicesRel > 1
			and	  !actor.agent(SupplierSourceId).SupplierGroup.SPDisablePortalPOs)

		SupplierShowInvoice
			restricted
			when (!SupplierShowPO
			and	  !SupplierShowPOs)

		SupplierInvoiceByVendor
			restricted
 			when ((Company.VendorGroup				= actor.agent(SupplierSourceId).SupplierGroup
 			and    Vendor	   						= actor.agent(SupplierSourceId).Supplier.Vendor)
  			and    CancelSequence 	= 0)

		SupplierCanView
			restricted
			when (Company.VendorGroup       = actor.agent(SupplierSourceId).SupplierGroup
 			and   Vendor			 		= actor.agent(SupplierSourceId).Supplier.Vendor
			and  ((actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay.AllDocuments)
			or  (!actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay.AllDocuments
			and   actor.agent(SupplierSourceId).Supplier.PrimaryContactViewAllDocuments = true
			and   actor.agent(SupplierSourceId).PrimaryContact)
			or  ((actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay.OnlyLocationDocuments
			or    actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay.LocationAndNoLocationDocuments)
			and  (actor.agent(SupplierSourceId).Supplier.PrimaryContactViewAllDocuments = false
			or   !actor.agent(SupplierSourceId).PrimaryContact)
			and   PurchaseFromLocation entered
			and   actor.agent(SupplierSourceId).VendorLocation = PurchaseFromLocation)
			or   (actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay.LocationAndNoLocationDocuments
			and   PurchaseFromLocation !entered)))

		IsLinkedDistCodeTax	
			restricted
			when (TaxCode entered
			and   TransientLineTax entered
			and   DerivedTaxMethodInvOrAcc.Invoiced

			and   DoTaxAfter
			and	  DistributionCode entered)

		InvoiceDateInRange
			restricted
			when (InvoiceDate within InvoiceDateInterval)

		VoucherNumberEntered
			restricted
			when (VoucherNumber.Sequence entered)

		ReleasedOrAmended
			restricted
			when (Status.Released
			or Status.Amended)

		AmendedAndOutOfBalance
			restricted
			when (Status.Amended
			and IsOutOfBalance)

		DistributionsAreOutOfBalance
			restricted
			when (DistributionOutOfBalanceAmount != 0
			and   IsNotPrepayment		
			and  !Status.Cancelled
			and  !InBackgroundProcessing)











		PaymentsAreOutOfBalance
			restricted
			when (PaymentOutOfBalanceAmount != 0
			and  !Status.Cancelled
			and  !InBackgroundProcessing)

		VendorInvoiceEntered
			restricted
			when (Vendor entered
			and	  Invoice entered)

		VendorEntered
			restricted
			when (Vendor entered)

		PayVendorEntered
			restricted
			when (PayVendor entered)

		PaidInvoice
			restricted
			when (((Status.Historical
			or    Status.Paid)
			and   CancelSequence = 0)
			or   (InvoiceType.MatchPrepayment					
			and   Status.Released								
			and   PayablesInvoicePaymentStatusRel not exist))	

		RoutingFinanceTeamEntered		
			restricted
			when (RoutingFinanceTeam entered)

		ResponsiblePersonEntered
			restricted
			when (ResponsiblePerson entered)

		FinanceResourceIsResponsiblePerson
			restricted
			when (ResponsiblePersonEntered
			and	  FinanceEnterpriseGroupRel.HROrganization = FinanceResource.HROrganization	
			and	  ResponsiblePerson = FinanceResource)

		FinanceResourceIsOnResponsibleTeam
			restricted
			when (FinanceResourceTeamMemberRel exists)

		FinanceResourceHasResponsibleRole
			restricted
			when (FinanceResourceApprovalRoleMemberRel exists)

		FinanceResourceIsApprover
			restricted
			when (FinanceResourceIsResponsiblePerson
			or	  FinanceResourceIsOnResponsibleTeam
			or	  FinanceResourceHasResponsibleRole)

		ProcessingTeamEntered				
			when (ProcessingTeam entered)

		APClerkEntered
			when (APClerk entered)

		AssignAPClerkValid
			restricted
			when ((Status.Unreleased
			or	  Status.PendingApproval
			or	  Status.Approved
			or	  Status.Rejected
			or	  Status.Cancelled)
			and	  !APClerkEntered
			and   !InterfaceInProcess
			and   !ProcessingTeamEntered)		

		ReassignAPClerkValid
			restricted
			when ((Status.Unreleased
			or	  Status.PendingApproval
			or	  Status.Approved
			or	  Status.Rejected
			or	  Status.Cancelled
			or    IsUpdatableRecurringInvoice)	
			and   !InterfaceInProcess
			and	 (APClerkEntered
			or    ProcessingTeamEntered))		

		EmailResponsiblePersonValid
			restricted
			when (Status.PendingApproval)

		ReassignApproverValid
			restricted
			when (Workunit entered
			and  !InBackgroundProcessing	
			and	  Status.PendingApproval)

		ApproveValidPlus					
			restricted
			when (Status.PendingApproval
			and   !BudgetEditInProgress
			and   Company.VendorGroup.RequireReasonCodeForManualInvoiceApproval)

		ApproveValid
			restricted
			when (Status.PendingApproval
			and   !BudgetEditInProgress
		    and   !Company.VendorGroup.RequireReasonCodeForManualInvoiceApproval)	

		RejectValid
			restricted
			when (Status.PendingApproval
			and   !BudgetEditInProgress)

		ReinstateValid
			restricted
			when (Status.Rejected
			or	  Status.Cancelled)

		RerouteValid
			restricted
			when ((Status.PendingApproval
			or 	   Status.Unreleased)
			and    !BudgetEditInProgress)

		ApprovedReleaseValid
			restricted
			when  (MatchProcessType.Expense
			and   !BudgetEditInProgress)

		CurrentActorIsAPClerk
			restricted
			when (APClerkEntered
			and	  FinanceEnterpriseGroupRel.HROrganization = actor.agent(Employee).HROrganization	
			and	  APClerk = actor.agent(Employee).Employee)

		CurrentActorIsOnProcessingTeam					
			restricted
			when (ProcessingTeam entered
			and	  FinanceEnterpriseGroupRel.HROrganization = actor.agent(Employee).HROrganization	
			and   ProcessingTeamMemberRel exists)

		CurrentActorIsOnResponsibleTeam
			restricted
			when (FinanceTeamMemberRel exists)

		CurrentActorHasResponsibleRole
			restricted
			when (ApprovalRoleMemberRel exists)

		CurrentActorIsResponsiblePerson
			restricted
			when (ResponsiblePersonEntered
			and	  FinanceEnterpriseGroupRel.HROrganization = actor.agent(Employee).HROrganization	
			and	  ResponsiblePerson = actor.agent(Employee).Employee)

		CurrentActorIsApprover
			restricted
			when (CurrentActorIsResponsiblePerson
			or	  CurrentActorIsOnResponsibleTeam
			or	  CurrentActorHasResponsibleRole)

		ResponsibleTeamEntered
			restricted
			when (ResponsibleTeam entered)

		ResponsibleRoleEntered
			restricted
			when (ResponsibleRole entered)

		DerivedAutoAssignedRoutingCodeEntered
			restricted
			when (DerivedAutoAssignedRoutingCode entered)

		DerivedAutoAssignedRoutingCodeGroupEntered
			restricted
			when (DerivedAutoAssignedRoutingCodeGroup entered)

		HasInvoiceMessages
			when (MatchInvoiceMessageRel exists)

		HasChargebacks
			when (PayablesInvoiceChargebackRel exists)

		InvoiceImageEntered
			restricted
			when (PayablesInvoiceDocumentInvoiceTypeRel exists)

		HistoricalByCurrentResource
			restricted
			when (HistoricalByCurrentResourceRel exists)

		DisplayDocumentMgmtButton
			restricted
			when ((ImageIndex entered
			and	  InvoiceSource.ImagingSystem
			and	  Company.VendorGroup.UsingDocMgmtSystem)
			or	  IDMDocumentExists)	

		DocumentManagementButtonValid
			restricted
			when ((DisplayDocumentMgmtButton
			and	  InvoiceURL entered)
			or	  IDMDocumentExists)	

		DisplayResponsiblePerson
			restricted
			when (ResponsiblePersonEntered entered
			or	  SingleApprovalResource)

		DisplayResponsibleRole
			restricted
			when (ResponsibleRoleEntered)


		SingleApprovalResource
			restricted
			when (DerivedApproverCount = 1)

		UpdateCurrencyTableValid
			restricted
			when (!RecordExists
			or	  Status.Unreleased
			or	  Status.PendingApproval)

		GLCommitRelExists
			restricted
			when (GLCommitRel exists)

		OpenGLCommitExists
			restricted
			when (OpenGLCommitDrillRel exists)


		MatchesProjectSearch
			restricted
			when ((Project entered
			and    ProjectCommitmentRel exists)
			or    !Project entered)

		MatchesFinDim1Search
			restricted
			when ((FinanceDimension1 entered
			and  Dimension1CommitmentRel exists)
			or   !FinanceDimension1 entered)

		MatchesFinDim2Search
			restricted
			when ((FinanceDimension2 entered
			and  Dimension2CommitmentRel exists)
			or   !FinanceDimension2 entered)

		MatchesFinDim3Search
			restricted
			when ((FinanceDimension3 entered
			and  Dimension3CommitmentRel exists)
			or   !FinanceDimension3 entered)

		MatchesFinDim4Search
			restricted
			when ((FinanceDimension4 entered
			and  Dimension4CommitmentRel exists)
			or   !FinanceDimension4 entered)

		MatchesFinDim5Search
			restricted
			when ((FinanceDimension5 entered
			and  Dimension5CommitmentRel exists)
			or   !FinanceDimension5 entered)

		MatchesFinDim6Search
			restricted
			when ((FinanceDimension6 entered
			and  Dimension6CommitmentRel exists)
			or   !FinanceDimension6 entered)

		MatchesFinDim7Search
			restricted
			when ((FinanceDimension7 entered
			and  Dimension7CommitmentRel exists)
			or   !FinanceDimension7 entered)

		MatchesFinDim8Search
			restricted
			when ((FinanceDimension8 entered
			and  Dimension8CommitmentRel exists)
			or   !FinanceDimension8 entered)

		MatchesFinDim9Search
			restricted
			when ((FinanceDimension9 entered
			and  Dimension9CommitmentRel exists)
			or   !FinanceDimension9 entered)

		MatchesFinDim10Search
			restricted
			when ((FinanceDimension10 entered
			and  Dimension10CommitmentRel exists)
			or   !FinanceDimension10 entered)

		MatchesAccountSearch
			restricted
			when ((Account entered
				and AccountCommitmentRel exists)
			or Account !entered)

		MatchesAccountingUnitSearch
			restricted
			when ((AccountingUnit entered
				and AccountingUnitCommitmentRel exists)
			or AccountingUnit !entered)

		MatchesAccountingEntitySearch
			restricted
			when ((AccountingEntity entered
				and AccountingEntityCommitmentRel exists)
			or AccountingEntity !entered)


		ChangeDiscountValid
			restricted


			when (Status.Unreleased
			or	  Status.PendingApproval)

		HasInvoiceLines
			restricted
			when (PayablesInvoiceDetailRel exists)

		ErrorsExists
			default label is "Error"
			when (PayablesInvoiceErrorRel exists
			or	 (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit			
			and  (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists)))


		HasInvoiceMatchRuleGroup
			when ((RuleGroup entered
			and    RuleGroup.HasInvoiceMatchRuleGroup)
			or    (Vendor.MatchTable entered
			and    Vendor.MatchTable.RuleGroup1.HasInvoiceMatchRuleGroup)
			or    (MatchCompanyRel.MatchTable entered
			and    MatchCompanyRel.MatchTable.RuleGroup1.HasInvoiceMatchRuleGroup))

		DisplayErrorWarning
			when (InvoiceErrorsExists
			and  !DisplayTaxPreProcessing	
			and  !DisplayTaxInProgress
			and  !DisplayDistCodeInProcess)

		InvoiceErrorsExists
			when (PayablesInvoiceErrorRel exists)

		AuditExists
			restricted
			when (PayablesInvoiceAuditRel exists)

		DisplayPOLink
			restricted
			when (FirstPurchaseOrder entered)	

		UseOldMethod												
			restricted												

			when (OneSourceExpenseProcessByDistribRel exists)		

		UseProcessDistributionCode1		
			restricted
			when (UseProcessDistributionCode2)	

		UseProcessDistributionCode2		
			restricted
			when (UseProcessDistributionCodeRel exists
			and   UseProcessDistributionCodeRel.Value = "New")	

		UseOldProcessDistributionCode		
			restricted
			when (UseOldProcessDistributionCodeRel exists)	

		UseNewTotalTaxAmountProcess		
			restricted
			when (UseNewTotalTaxAmountProcessRel exists)

		HasTaxCode

			when (TaxCode entered)

 		TaxInformationEntered
			restricted
 			when (TaxableAmount entered
 			or	  TaxCode entered
 			or	  TaxAmount entered
 			or	  (TaxAdjustment entered
 			and   !TaxAdjustment.NoTax))

		IsUseTaxCodeAccounts
			restricted
			when  (TaxCode entered
			and	   TaxEntityRel.UseTaxCodeAccounts)

		IsLandedTax
			restricted
			when  (TaxCode entered
			and	 ((TaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.LandedCost)
			or 	 (!TaxEntityRel.UseTaxCodeAccounts
			and    TaxEntityRel.LandedCost)))

		IsTaxAfterTerms			
			restricted
			when (TaxCode entered
			and	 ((TaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.TaxTerms.Taxafterterms)
			or   (!TaxEntityRel.UseTaxCodeAccounts
			and    TaxEntityRel.TaxTerms.Taxafterterms)))

		AllowUpdateOnApprove
			restricted
			when (Status.PendingApproval
			and	  CurrentActorIsApprover)

		ReassignToPreviousApproverValid		
			restricted
			when (ApprovedPayablesInvoiceAuditRel exists
			and  !ReassignToPreviousApprover
			and  !FirstApprovalLevelMatch)

		FirstApprovalLevelMatch		
			restricted
			when (RoutingCode			= first ApprovedPayablesInvoiceAuditRel.InvoiceRoutingCode
			and   RoutingApprovalLevel	= first ApprovedPayablesInvoiceAuditRel.RoutingApprovalLevel)

		UpdateDocumentURLValid
			restricted
			when (ImageIndex entered
			and	  Company.VendorGroup.UsingDocMgmtSystem
			and	  Company.VendorGroup.DocMgmtPartner entered
			and	  CreationSource.ImagingSystem)

		CanSaveDocumentLocally
			restricted
			when (ImageIndex entered
			and   Company.VendorGroup.UsingDocMgmtSystem
			and   Company.VendorGroup.DocMgmtPartner entered
			and   Company.VendorGroup.StoreDocumentLocally
			and	  CreationSource.ImagingSystem)

		DeleteFromServiceValid
			restricted
			when ((Status.Unreleased
			or 	   Status.PendingApproval
			or     Status.Rejected
			or     Status.Cancelled)
			and   ImageIndex entered
			and	  CreationSource.ImagingSystem)

		OverdueInvoice
			restricted
			when (DueDate entered
			and	  current corporate date > DueDate
			and   AmountPaid < InvoiceAmount.CurrencyAmount
			and   !Status.Cancelled
			and   !Status.Paid
			and   !Status.Historical)

		YellowDueDateAlertCond
			restricted
			when (DueDate entered
			and   current corporate date >= YellowDueDateAlert
			and	  current corporate date <= DueDate
			and   AmountPaid < InvoiceAmount.CurrencyAmount
			and   !Status.Cancelled
			and   !Status.Paid
			and   !Status.Historical)

		ShowDiscountDateAlert
			restricted
			when (DiscountDate entered
			and   current corporate date >= DiscountDateAlertDate
			and   current corporate date <= DiscountDate
			and   AmountPaid < InvoiceAmount.CurrencyAmount
			and   !Status.Cancelled
			and   !Status.Paid
			and   !Status.Historical)

		ShowYellowDueDateAlert
			restricted
			when (YellowDueDateAlertCond)

		ShowRedDueDateAlert
			restricted
			when (OverdueInvoice)

		DiscountInformationEntered		
			restricted
			when (DiscountDate entered
			or    DiscountPercent entered
			or    DiscountAmount.CurrencyAmount entered)

		Discount2InformationEntered		
			restricted
			when (DiscountDate2 entered
			or    DiscountPercent2 entered
			or    DiscountAmount2 entered)

		Discount3InformationEntered		
			restricted
			when (DiscountDate3 entered
			or    DiscountPercent3 entered
			or    DiscountAmount3 entered)

		SubmitErrorsExist
			when (PayablesInvoicePreventSubmitErrorRel exists)

		ApprovalErrors		
			restricted
			when (PayablesInvoicePreventApprovalErrorRel exists)	

		InvoiceNotInBalance
			when (ExpenseInvoiceOutOfBalance
			or	  MatchInvoiceOutOfBalance)

		SubmitActionValid

			when (RequiresApproval			




			and	  Status.Unreleased


			and   !BudgetEditProcessing.InProcess
			and   !ProcessTaxOnHoldValid
			and   !InBackgroundProcessing	
			and   !InterfaceInProcess

			and	 (!InvoiceNotInBalance
			or	  (InvoiceNotInBalance
			and	   (Company.VendorGroup.DistributionEntryOnApproval
			or      ProcessOneSourceValid
			or      ProcessVertexValid))))		

		IsManualPaymentNumberReservation	
			restricted
			when (BankTransactionCode.ManualPaymentNumberReservation)

		HasBankInstructions		
			restricted
			when (BankInstructions1 entered
			or    BankInstructions2 entered
			or    BankInstructions3 entered
			or    BankInstructions4 entered)

		HasMatchInvoiceReferenceRel
			restricted
			when (MatchInvoiceReferenceRel exists)

		AllowRemoveMatchInvoiceReferenceLink
			restricted
			when (MatchInvoiceReferenceRel exists
			and   PayablesInvoice.Status.Unreleased)

		AllowAddMatchInvoiceReferenceLink
			restricted
			when (InvoiceType.CreditMemo
			and  !MatchProcessType.Expense
			and   MatchInvoiceReferenceRel not exists
			and   PayablesInvoice.Status.Unreleased)

		FromInterface
			restricted
			when (CreationSource.ImagingSystem)

		DisplayXiApprovalPanel	
			restricted
			when (AuditExists
			or	InApprovalProcess)

		InApprovalProcess
			restricted
			when (Status.PendingApproval)

		DisplayApprovalInformationPanel
			restricted
			when (AuditExists
			and   first PfiWorkunitRel.HasProcessIndicator
			and   !UsesMatrixApproval)

		DisplayApprovalTrackingPanel
			restricted
			when (AuditExists
			and   !first PfiWorkunitRel.HasProcessIndicator
			and   !UsesMatrixApproval)

		InvoiceRoutingCodeGroupEntered		
			restricted
			when (InvoiceRoutingCodeGroup entered)

		IsAPurchaseOrderInvoice
			restricted
			when (MatchProcessType.ReceiptMatch
			or    MatchProcessType.Service
			or    MatchProcessType.DropShip
			or    MatchProcessType.AOCOnly
			or    MatchProcessType.ServiceContract)

		ShowAOCsForInvoice
			when (IsAPurchaseOrderInvoice
			and   !CreditForRebill)

		ShowSpreadForInvoice
			when (IsAPurchaseOrderInvoice
			and   !IsCreditMemo)

		DisplayAOCPanel		
			restricted
			when (ShowAOCsForInvoice
			or    ShowSpreadForInvoice)

		ShowAOCsForCreditOrDebit
			when (IsAPurchaseOrderInvoice
			and   CreditForRebill)

		InvoiceInProcess
			restricted

			when (!Status.Rejected
			and   !Status.Amended
			and   !Status.Cancelled
			and   !Status.Paid
			and   !Status.Historical)

		InvoiceDueInNextWeek
			restricted
			when (DueDate entered
			and	  DerivedDaysUntilDueDate >= 0
			and	  DerivedDaysUntilDueDate <= 6)

		InvoiceDiscountDateInNextWeek
			restricted
			when (DiscountDate entered
			and	  DerivedDaysUntilDiscountDate >= 0
			and	  DerivedDaysUntilDiscountDate <= 6)

		CommentsExist
			restricted
			when (PayablesInvoiceCommentRel exists)

		SupplierCommentsExist
			when (SupplierPayablesInvoiceCommentsRel exists)

		ShortPayCommentExists
			restricted
			when (PayablesInvoiceCommentRel exists
			and   any PayablesInvoiceCommentRel.Title = "Short_Paid")

		TaxCodeRemovedCommentExists		
			restricted
			when (PayablesInvoiceCommentRel exists
			and   any PayablesInvoiceCommentRel.Title = "EnteredTaxCodeRemoved")

		MatchOneSourceAccruedTax
			restricted
			when (ShortPayCommentExists
			or    MatchOneSourceAccruedDistributionsRel exists)

		MultipleCommentsExist
			restricted
			when (PayablesInvoiceCommentRel exists
			and   first PayablesInvoiceCommentRel.Title != last PayablesInvoiceCommentRel.Title)	

		IsCommentUpdateable
			restricted
			when (Status.Unreleased
			or	  Status.Approved
			or    Status.Amended		
			or    Status.Released
			or    Status.Historical
			or 	  Status.Rejected       
			or	  Status.PendingApproval)

		IsUpdateable
			restricted
			when ((Status.Unreleased
				or Status.Approved
				or (Status.PendingApproval
					and CurrentActorIsApprover))
			and   !InterfaceInProcess)

		AllowAdditionalPO 
			when (IsUpdateable 
			or    Status.Amended)
			
		IsMatchInvoice
			restricted
			when (MatchProcessType.ReceiptMatch
			or    MatchProcessType.Service
			or    MatchProcessType.AOCOnly
			or    MatchProcessType.ServiceContract)

		SinglePurchaseOrder
			restricted
			when (DerivedNumberOfPurchaseOrders = 1)

		MultiplePurchaseOrders
			restricted
			when (DerivedNumberOfPurchaseOrders > 1)

		HasSpreadAOCs
			restricted
			when (PayablesInvoiceSpreadAddOnChargeRel exists)

		HasMiscellaneousAOCs
			restricted 
			when (MiscPayablesInvoiceAddOnChargeRel exists)
		
		HasLineAOCsNotSpread 
			restricted 
			when (LineNotSpreadPayablesInvoiceAddOnChargeRel exists)
		
		ChangeInvoiceAmountValid	
			restricted


			when (Invoice !entered)		

		RefreshTotalsValid			
			restricted
			when (MatchProcessType.Expense
			and  (Status.Unreleased
			or    Status.Amended
			or    Status.PendingApproval))

		SearchFieldEntered
			restricted
			when (Company entered
			or	  Vendor entered
			or    PayVendor entered
			or	  Invoice entered
			or	  ImageIndex entered)		


		SearchFieldChanged
			restricted
			when (Company changed
			or	  Vendor changed
			or    PayVendor changed
			or	  Invoice changed
			or	  ImageIndex changed)		


		NoOpenInvoiceMessages
			restricted
			when (!OpenMatchInvoiceMessagesRel exists)

		PayGroupEntered
			restricted
			when (PayGroup entered)

		DefaultProcessLevelExists
			restricted
			when (DefaultProcessLevelRel exists)

		DisplayRemitToCodeLink
			restricted
			when (RemitToCode entered)

		DisplayPayVendorLink
			restricted
			when (PayVendor entered
			and	  RemitToCode not entered)

		DisplayVendorLink
			restricted
			when (Vendor entered
			and	  PayVendor not entered
			and	  RemitToCode not entered)

		DisplayChangeDiscountButton	
			restricted
			when (ChangeDiscountValid
			and	  !MultiplePayablesInvoicePaymentRelExists)








































		DisplayOnMassInvoiceReleasePreview
			when (IsValidForActorContext
			and  (ReleaseActionValid
				or SubmitActionValid)		
			and  (Status.Unreleased
				or Status.Amended)
			and  !SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice	
			and (!InvoiceErrorsExists
				or ProcessOneSourceValid	
				or ProcessVertexValid)		
			and  !InBackgroundProcessing
			and   WithinVoucherNumberRange
			and   CompanyWithinGLCompanyGroup)				


		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)

		HasOpenReceipt

			when (first OpenReceiptRel exists)

		HasHistoricalPayment

			when (first HistoricalPayablesInvoicePaymentRel exists)

		DisplayOnPrepaidInvoiceNotReceivedPreview
			when  (IsValidForActorContext
			and    InvoiceType.MatchPrepayment
			and    MatchStatus.Unmatched
			and    MatchObjectID not entered
			and    CompanyWithinGLCompanyGroup				

			and    !HasOpenReceipt
			and    HasHistoricalPayment)

		AllowUpdate
			restricted
			when (!InterfaceInProcess
			and   !BudgetEditInProgress		
			and   !InBackgroundProcessing)

		AllowDelete
			restricted
			when (!InterfaceInProcess
			and   !BudgetEditInProgress		
			and   !UseBackgroundDelete
			and   !InBackgroundProcessing
			and   !InvoiceSource.IntercompanyBilling)

		AllowBackgroundDelete
			restricted
			when (!InterfaceInProcess
			and   !BudgetEditInProgress		
			and    UseBackgroundDelete
			and   !InBackgroundProcessing
			and   !InvoiceSource.IntercompanyBilling)

		AllowUpdateToReleased
			restricted
			when (!InvoiceSource.IntercompanyBilling
			and   !IsPOCancel
			and   !TaxEntityRel.ThirdParty.TaxEngine
			and  (MatchProcessType.Expense
			or    !LinkedToCancelledPOInvoice))

		AllowAmendMatchInvoice
			restricted
			when (Status.Released
			and   !MatchProcessType.Expense
			and   IsNotMatched
			and   !IsPOCancel
			and    CancelDate not entered
			and   !CancelledOrPostedDistributionsRel exists
			and   !PaymentsBeyondOpenStatusRel exists)

		AllowMatchOneSource
			restricted
			when (!InvoiceMatched
			and   TaxEntityUsesSabrix
			and	 (APClerkEntered
			or	  ProcessingTeamEntered)		
			and   !MatchProcessType.Expense
			and   !BudgetEditInProgress
			and   !InBackgroundProcessing
			and   !InterfaceInProcess
			and	  (!RoutingRuleFound
			or      Status.Approved
			or      Status.Released)
			and   !MatchPrepayment
			and	  (PayablesInvoiceDetailRel exists
			or     PayablesInvoiceSpreadAddOnChargeRel exists
			or     PayablesInvoiceAddOnChargeRel exists
			or     MatchAmount entered))

		AllowOldMatchOneSource
			when (AllowMatchOneSource
			and   OldOneSourceMatch)

		AllowMatch
			restricted
			when (!InvoiceMatched
			and	 (APClerkEntered
			or	  ProcessingTeamEntered)		
			and   !MatchProcessType.Expense
			and   !BudgetEditInProgress
			and   !InBackgroundProcessing

			and   !TaxEntityUsesSabrix
			and   !CallVertexByDocument 
			and   !InvoiceErrorsExists
			and	  (PayablesInvoiceDetailRel exists
			or     PayablesInvoiceSpreadAddOnChargeRel exists
			or     PayablesInvoiceAddOnChargeRel exists
			or     MatchAmount entered))

		AllowMatchOneCallVertex 
			when (!InvoiceMatched 
			and   CallVertexByDocument 
			and   PayablesInvoice.LastDistribution < NumberOfLinesForVertexMatchProcessByInvoice
			and	 (APClerkEntered
			or	  ProcessingTeamEntered)		
			and   !MatchProcessType.Expense
			and   !BudgetEditInProgress
			and   !InBackgroundProcessing
			and   !InterfaceInProcess
			and	  (!RoutingRuleFound
			or      Status.Approved
			or      Status.Released)
			and   !MatchPrepayment
			and	  (PayablesInvoiceDetailRel exists
			or     PayablesInvoiceSpreadAddOnChargeRel exists
			or     PayablesInvoiceAddOnChargeRel exists
			or     MatchAmount entered))

		MatchActionValidForUnreleasedInvoice
			when (AllowMatch
			and   !InterfaceInProcess
			and   !RequiresApproval)		


		InvoiceToBeMatched		
			when (!MatchProcessType.Expense
			and   !RoutingRuleFound)

		ContractDetailRelExists
			restricted
			when (InvoiceDetailForContractRel exists)

		CreateContractDetailValid
			restricted
			when (PayablesInvoice.IsUpdateable
			and   MatchProcessType.ServiceContract
			and  !ServiceContract.ContractStatus.Closed
			and  !ServiceContract.ContractStatus.Inactive
			and  !ServiceContract.ContractTypeAllowsZeroMaxQuantity
			and  !ServiceContract.OnHold
		   	and  !InvoiceType.DebitMemo
		   	and  !InvoiceType.CreditMemo
			and	 !ContractDetailRelExists)

		NotMatchedAndNotInQueue
			when (MatchStatus < 2
				and !InvoiceType.DebitMemo
				and !InvoiceType.CreditMemo
				and !MatchProcessType.AOCOnly
				and !MatchProcessType.ServiceContract
				and !MatchProcessType.Expense
				and !InterfaceInProcess
				and !MatchReconQueueRel exists)

		AvailableForReconciliationQueue
			restricted
		   	when (MatchStatus.Unmatched
		   	and  (Status.Approved
		   	or    Status.Released	
		   	or   !RequiresApproval)
		   	and  !Status.Cancelled
		   	and  !Status.Historical
			and  !InterfaceInProcess
		   	and  !InvoiceType.DebitMemo
		   	and  !InvoiceType.CreditMemo
		   	and  !MatchProcessType.AOCOnly
		   	and  (!MatchProcessType.ServiceContract
			or    MatchCompanyRel.EnableServiceCostMessaging)
		   	and  !MatchProcessType.Expense)

		IsMemberOfFilterGeneralLedgerCompanyGroup
			restricted
			when (GeneralLedgerCompanyGroup not entered
			or   (GeneralLedgerCompanyGroup entered
			and   GLCompanyGroupMemberRel exists))

		CreateCompanyCustomerValid
			when (!HasCompanyCustomer
			and   !InterfaceInProcess)

		HasPrepaidPaymentsOnHold
			restricted
			when  (PrepaidPaymentsOnHoldRel exist)

		InvoiceRequiresMatch
			when (!MatchProcessType.Expense)

		InvoiceUnmatched
			restricted
			when (MatchStatus < 2)

		InvoiceMatched
			when (MatchStatus > 1)

		InvoiceHasBeenUnmatched
			when (!MatchProcessType.Expense
			and   MatchStatus < 2
			and   !Status.PendingApproval
			and   !Status.Approved
			and   !Status.Unreleased)

		ReleasedOrNonMatchInvoice
			when (MatchProcessType.Expense
			or    InvoiceMatched)

		MatchNeeded
			when (InvoiceRequiresMatch
			and	  InvoiceUnmatched)

		RoutingRuleFound

			when (DerivedRoutingRuleFound)

		TermsCodeWillDefault
			restricted
			when (FirstPurchaseOrder.TermCode entered
			or    PurchaseFromLocation.TermsCode entered					
			or    RemitToVendorCompanyDefaultRel.TermsCode entered
			or	  RemitToCode.TermsCode entered
			or    VendorCompanyDefaultRel.TermsCode entered
			or    Vendor.TermsCode entered)

		ExpenseInvoiceOutOfBalance
			restricted
			when (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
			and	  MatchProcessType.Expense
			and   IsNotPrepayment)

		MatchInvoiceOutOfBalance
			when (!MatchProcessType.Expense
			and   !IsMatched
			and	  !DerivedMatchInvoiceInBalanceWithinTolerance)

		InvoiceToBeReleased		
			when (MatchProcessType.Expense
			and  !RoutingRuleFound)

		ReleaseActionValid
			restricted
			when (MatchProcessType.Expense
			and  !RequiresApproval			

			and   !InterfaceInProcess
			and   !InBackgroundProcessing	
			and   !ProcessTaxOnHoldValid
			and   !BudgetEditInProgress)		



		AllowUnmatch
			restricted
			when (MatchObjectID entered)

		AllowInvoiceUnmatch
			restricted
			when (MatchObjectID entered
			and   !Status.Unreleased
			and   !Status.Amended					
			and   !InBackgroundProcessing			
			and   !IsPOCancel
			and   !IsChargeback
			and   !TaxEntityRel.ThirdParty.TaxEngine
			and    CancelDate not entered
			and   !CancelledOrPostedDistributionsRel exists
			and   !PaymentsBeyondOpenStatusRel exists)

		AllowPurchaseOrderInvoiceCancel
			restricted
			when (MatchObjectID entered
			and  !Status.Unreleased
			and  CancelDate not entered
			and  !SystemGeneratedCreditMemoRel exists
			and  !IsPOCancel
			and  !IsChargeback
			and  !InvoiceSource.CreditForRebill
			and  !TaxEntityRel.ThirdParty.TaxEngine
			and  (CancelledOrPostedDistributionsRel exists
			or   (!MatchCompanyRel.PurchaseOrderInvoiceCancel.DoNotAllowOnPaidInvoices
			and   PaymentsBeyondOpenStatusRel exists)))

		AllowChangeTemplate 
			restricted 
			when (Status.Unreleased
			and   BackgroundProcessing not entered
			and   !BudgetEditProcessing.InProcess)

		CancelActionValid
			restricted
			when (!InterfaceInProcess
			and   !BudgetEditInProgress		
			and   !InBackgroundProcessing
			and   !InvoiceSource.IntercompanyBilling)

		UnmatchedMatchPrepayment
			restricted
			when (MatchStatus.Unmatched
			and   InvoiceType.MatchPrepayment
			and  !Status.PendingApproval 
			and  !Status.Rejected 
			and  !Status.Cancelled
			and  !Status.Historical 
			and  (MatchProcessType.ReceiptMatch
			or    MatchProcessType.AOCOnly))

		AllowPrepaymentDetailMatch
			when (UnmatchedMatchPrepayment
			and   MatchPrepaymentMethod.EligibleForPrepay)

		UnmatchedAOCOnly
			restricted
			when  (MatchProcessType.AOCOnly
			and   (MatchStatus.Unmatched
			or     MatchStatus.POCostMessagesExist)
			and   !Status.Cancelled)

		TaxEntityUsesThirdPartyTax
			restricted
			when (TaxEntityUsesVertex
			or    TaxEntityUsesSabrix)

		TaxEntityUsesInforTax
			restricted
			when (TaxEntityRel.ThirdParty.InforTax)	
		
		TaxEntityUsesVertex
			restricted				 							

			when (TaxEntityRel.ThirdParty.VertexOSeries)	

		TaxEntityUsesSabrix										
			restricted				 							

			when (TaxEntityRel.ThirdParty.Sabrix)	

		OneSourceGeneric
			restricted
			when (TaxEntityUsesSabrix		
			and   TaxConfigurationRel.OneSourceVersionType.Generic)

		OneSourceOriginal
			restricted
			when (TaxEntityUsesSabrix		
			and   TaxConfigurationRel.OneSourceVersionType.Original)

		OneSourceResetValid
			restricted
			when (TaxEntityUsesSabrix		
			and   TaxConfigurationRel.OneSourceVersionType.Original
			and   !MatchProcessType.Expense
			and   !InvoiceType.CreditMemo
			and   IsNotMatched
			and   (POTaxAmount entered
			or     TaxAmount != PayablesInvoiceTaxRel.EnteredTaxAmount))

		ShowOneSourcePanels		
		   	when (false)		

		ShowOneSourceAttributesPanel		
			when (TaxEntityUsesSabrix		
			and   AllOneSourceOutputUserAttributesRel exists)

		ShowOneSourceTaxLineItemPanel		
			when (!MatchProcessType.Expense
			and    TaxEntityUsesSabrix		
			and    TaxLineItemRel exists)

		AvailableForPurchaseOrderInvoiceMatch
			restricted
			when (MatchStatus.Unmatched
			and  (Status.Unreleased
			or    Status.PendingApproval)
			and  !InvoiceType.DebitMemo
			and  !InvoiceType.CreditMemo
			and  !InvoiceType.MatchPrepayment
			and  !MatchProcessType.Expense)

		AllowAddOfInvoiceReference
			restricted
			when (!HasMatchInvoiceReferenceRel
			and   PayablesInvoice.IsUpdateable)

		ShowDistributionsPanel
			when (RecordExists
			and   !InvoiceType.Prepayment
			and   !InvoiceType.PrepaymentCredit)

		ViewFieldOnly
			restricted
			when (RecordExists
			and	 (!Status.Unreleased
				and !Status.PendingApproval
				or  MultiplePayablesInvoicePaymentRelExists))

		AllowSuperDelete
			restricted
			when (actor.PersonName.FamilyName = "SuperDelete")

		MatchObjectIdEntered
			restricted
			when (MatchObjectID entered)

		UseReceiptLinesForAnalysis
			when (MatchObjectIdEntered
			and   !PurchaseOrderReceiptInvoiceLinkRel exists)

		UseReceiptLinkForAnalysis
			when (MatchObjectIdEntered
			and   PurchaseOrderReceiptInvoiceLinkRel exists)

		UseReceiptAOCLinesForAnalysis
			when (MatchObjectIdEntered
			and   !PurchaseOrderReceiptInvoiceLinkAOCRel exists)

		UseReceiptAOCLinkForAnalysis
			when (MatchObjectIdEntered
			and   PurchaseOrderReceiptInvoiceLinkAOCRel exists)

		AllowVendorWithholdingCode
			restricted
			when (!Company.GlobalWithholding					
			and   Vendor.AllowWithholdingCodeOverride
			and   Vendor.IncomeWithholding)

		IsVendorWithholdingIncomeNoOverride
			restricted
			when (Vendor.IncomeWithholding
			and  !Vendor.AllowWithholdingCodeOverride)

		IsGroupedByDiversity									
			restricted
			when (PayablesInvoiceByDiversityCodeRel not exists)

		ProofOfDeliveryExists
			when (ProofOfDeliveryRel exists)

		HasDistributions
			restricted
			when (PayablesInvoiceDistribution set exists)

		HasAdjustCostToInvoiceMessage
			restricted
			when (AdjustCostToInvoiceMessageRel exists)

		IncludeInPayablesInvoiceTotals
			restricted
			when (IsNotPrepayment
			and  (Status.Unreleased
			or    Status.Released
			or    Status.Approved
			or    Status.PendingApproval
			or    Status.Rejected
			or    Status.Amended))

		ProcurementCardStatementEntered
			restricted
			when (ProcurementCardStatement entered)

		ShowChargebackDetails
			restricted
			when (IsChargeback
			and  (!MatchProcessType.ServiceContract
			or    !HasMultipleServiceContracts))

		ShowChargebackPanel
			restricted
			when (InvoiceType.Invoice
			and   !MatchProcessType.Expense
			and   !Status.Unreleased
			and   !Status.PendingApproval
			and    PayablesInvoiceChargebackRel exists)

		FromIntercompanyBilling
			when (IntercompanyBillingDocumentRel exists)

		FromIntercompanyPayablesInvoice
			restricted
			when (IntercompanyBillingDocumentRel.OriginatedFrom.PayablesInvoice)

		FromIntercompanyJournalControl
			restricted
			when (IntercompanyBillingDocumentRel.OriginatedFrom.JournalControl)

		UseDerivedTotalTaxAmount
			when  (TaxAdjustment.Calculate
			or 	   TaxAdjustment.IgnoreProductAndAOC)

		IntrastatRecordExist  
			restricted
			when (IntrastatHeaderRel exist)

		HasRetainage
			default label is "HasRetainage"	
			when (RetainageAccrualCode entered)

		HasRetainagePaymentOnHold		
			restricted
			when (HasRetainage
			and   any PayablesInvoicePayment set.IsRetainagePaymentOnHold)

		IntrastatRequired												
			restricted
			when (TaxEntityRel.IntrastatUsed
			and   !PayablesInvoice.BypassMatch
			and   !PayablesInvoice.MatchProcessType.ServiceContract)

		LinkedToCancelledPOInvoice

			when (CancelledPOInvoiceRel exists)

		CanDeleteDistributionsInError
			restricted
			when (Status.Cancelled
			and   IsMatchInvoice
			and   UnpostedDistributionsRel exists)

		UseBackgroundDelete
			restricted
			when (instance count of PayablesInvoiceDistribution set > 50)	

		UseBackgroundCreateAccrualOffset
			restricted
			when (instance count of PayablesInvoiceDistributionsAndNonTableTaxDistributionsRel > 50)










		IsSelectedForAR
			restricted
			when (APToARSelectRel exists)

		SelectForARInterfacingValid
			restricted
			when (!IsSelectedForAR
			and   !InterfaceInProcess
			and   !InvoiceSource.IntercompanyBilling)	

		HasCompanyCustomer
			restricted
			when(Vendor.Customer entered
			and  CompanyCustomerRel exists)

		IsEligibleForARInterface
			restricted
			when (IsCreditAvailableForInvoiceApplication
			or	  (IsInvoiceAvailableForCreditApplication
			and		Status.Released))		

		IsCreditMemoRequiredForARInterface
			restricted
			when (InvoiceType.Invoice
			or	  InvoiceType.Prepayment
			or	  InvoiceType.DebitMemo
			or	  InvoiceType.MatchPrepayment)

		IsDebitMemoRequiredForARInterface	
			restricted
			when (InvoiceType.CreditMemo
			or    InvoiceType.PrepaymentCredit)

		IsCreditOrDebitNotApplied
			restricted
			when (PayablesCreditMemoRel not exists
			and	  PayablesCreditMemo2Rel not exists)

		RetrospectiveInvoice
			restricted
			when (RetrospectiveOpenInvoices
			or    RetrospectivePaidInvoices)

		RetrospectiveOpenInvoices
			restricted
			when ((Status.Approved
			or   Status.Released)

			and  InvoiceDate <= current corporate date	
			and  !PaidInvoice)						

		RetrospectivePaidInvoices
			when (PaidInvoice
			and   DerivedAsOfDate < DerivedPaymentDate
			and   InvoiceDate <= DerivedAsOfDate)

		POInterfaceInUse
			restricted
			when (AnyInterfacedPurchaseOrderRel exists)

		HasPayablesInvoiceVoucherReference
			restricted
			when (PayablesInvoiceVoucherRefRel exists)

		VendorPayablesInvoiceTotalRelExists
			when (VendorPayablesInvoiceTotalRel exists)

		SkipValidationForRecurringInvoice	
			when (IsRecurringInvoice
			and	  Suffix > 1)

		SecurityExists		
			restricted
			when (Company.SecurityGroupRel exists)


		RouteForApprovalActionValid		
			restricted					


			when (Invoice !entered)		

		SecurityGroupAllowsAccess
			restricted
			when (Company.SecurityGroupAllowsAccess)


		MHCOAuthExists	
			when (MHCOAuthRel exists)

		HylandOAuthExists 
		    when (HylandOAuthRel exists)

		OriginatingICBIsFromGL
			restricted
			when (IntercompanyBillingDocumentRel.OriginatingJournalControlRel exists)

		OriginatingICBIsFromInvoice
			restricted
			when (IntercompanyBillingDocumentRel.OriginatingInvoiceRel exists)

		ShowOriginatingDocuments
			restricted
			when (FromIntercompanyBilling
			and  IntercompanyBillingDocumentRel.IntercompanyBillingGroup.ShowOriginatingDocument)

		INRInvoice			
			when  (IsNotMatched
			and    PayablesInvoiceDetailINRQuantityRel exists)

		CreditForRebillEnabled
			when (MatchCompanyRel.EnableCreditForRebill
			or    CreditForRebillConfig = "Y")

		AllowCreditForRebill
			when (MatchObjectID entered
			and   InvoiceType.Invoice
			and  !Status.Unreleased
			and  CancelDate not entered
			and  !SystemGeneratedCreditMemoRel exists
			and  !IsPOCancel
			and   !InterfaceInProcess
			and  (CancelledOrPostedDistributionsRel exists
			or    PaymentsBeyondOpenStatusRel exists
			or    TaxEntityUsesSabrix))

		CreditForRebill
			restricted
			when (InvoiceType.CreditMemo
			and   InvoiceSource = "Y" 
			and   MatchInvoiceReferenceRel exists)

		UnmatchedNoReceiptsInPool
			when (MatchProcessType.ReceiptMatch
			and   IsNotMatched
			and   !Status.Cancelled
			and   !MatchPrepayment
			and   !InvoiceType.DebitMemo
			and   !InvoiceType.CreditMemo
			and    MatchCompanyRel.WorkflowBasisDate entered
			and  ((MatchCompanyRel.WorkflowBasisDate.DueDate
			and    PayablesInvoice.DueDate <= (current corporate date + MatchCompanyRel.NoReceiptNotifyDays as days))
			or    (MatchCompanyRel.WorkflowBasisDate.DiscountDate
			and    PayablesInvoice.DiscountDate <= (current corporate date + MatchCompanyRel.NoReceiptNotifyDays as days)))
			and  ((PayablesInvoice.MatchReferenceNumber entered
			and    !PurchaseOrderReceiptMatchReferenceRel exists)
			or    (PayablesInvoice.MatchReferenceNumber not entered
			and    HasReceiptsInPool = "No")))

		ShowUnmatchedNoReceiptsInPoolAlert
			when ((MatchCompanyRel.NoReceiptNotifyOption.Online
			or     MatchCompanyRel.NoReceiptNotifyOption.OnlineAndBatch)
			and    UnmatchedNoReceiptsInPool)








		VendorLogoEntered		
			when (Vendor.Logo.File entered)

		APClerkEmailAddressEntered		
			when (APClerk.EmailAddress entered)

		ApprovalTeamEntered		
			when (DerivedNextApprovalTeam entered)

		PurchaseOrderEntered		
			when (DisplayPurchaseOrder entered)

		DiscountAmountEntered		
			when (DiscountAmount.CurrencyAmount entered)

		ServiceContractEntered		
			when (ServiceContract entered)

		FercTypeEntered
			restricted
			when   (ForeignEconomicRegulatoryCode.FercType entered)

		ApprovalCostCenterEntered
			restricted
			when   (ApprovalCostCenter entered)

		ApprovalCategoryEntered
			restricted
			when   (ApprovalCategory entered)

		IDMDocumentExists	
			when (IDMDocumentPID entered)
#ifdef module idm
		IsIDMConfigured	
			when (IDMConfigurationRel.DerivedDefaultConnection entered
			or IsIDMAuthDSConfigured)
		
		IsIDMAuthDSConfigured
			restricted
			when (config.AUTH_DS_PUBLIC_KEY != blank
			and config.AUTH_DS_SECRET_KEY != blank
			and config.AUTH_DS_URL != blank)
#endif
		ValidForGeneratingChargeback
			restricted
			when (Company.UseIDM
			and   InvoiceType.CreditMemo)

		ValidForGenerateAndPrint
			when (ValidForGeneratingChargeback
			and Company.PrintPayablesChargeback)

		ValidForGenerateOnly
			when (ValidForGeneratingChargeback
			and not Company.PrintPayablesChargeback)

		IsValidForIDMPrint
			restricted
			when (Company.UseIDM
			and IDMDocumentExists)

		IsValidForIDMEmail
			restricted
			when (Company.UseIDM
			and ((Company.EmailPayablesChargeback
			and   InvoiceType.CreditMemo)
			or   (Company.EmailPayablesDebitMemo
			and   InvoiceType.DebitMemo))
			and   IDMDocumentExists)

		SupplierMustEnterInvoices
			restricted
			when (SupplierRel exists
			and   first SupplierRel.RequireInvoiceEntryOnPortal)

		TaxToleranceOverridden	
			restricted
			when (PayablesInvoiceTaxRel.TaxToleranceOverridden)

		ValidForGeneratingDebitMemo
			restricted
			when (Company.UseIDM
			and   InvoiceType.DebitMemo)

		GlobalInvoiceWithholding
			restricted
			when (Company.GlobalWithholding
			and   Vendor.IncomeWithholding
			and  !Vendor.LineLevelWithholding)

		GlobalLineWithholding
			restricted
			when (Company.GlobalWithholding
			and   Vendor.LineLevelWithholding)

		IDMPrinterValidForSetup
			restricted
			when (Company.UseIDM
			and  (InvoiceType.CreditMemo
			or    InvoiceType.DebitMemo))

		IsValidForIDMCancel
			restricted
			when (IsCancelable
			and   Company.UseIDM)

		IsValidForNonIDMCancel
			restricted
			when (IsCancelable
			and   !TaxEntityRel.ThirdParty.TaxEngine
			and   not Company.UseIDM)

		IsValidForCancelAmended
			restricted
			when  (Status.Amended
			and   !MatchProcessType.Expense
			and    CancelDate not entered
			and   !InvoiceType.PrepaymentCredit		
			and	   MatchObjectID not entered
			and   !IsPOCancel
			and   !InvoiceSource.IntercompanyBilling
			and    BackgroundProcessing not entered
			and   !BudgetEditProcessing.InProcess
			and   !CancelledOrPostedDistributionsRel exists
			and   !UnreleasedDistributionsRel exists
			and   !PaymentsBeyondOpenStatusRel exists
			and   !TaxEntityRel.ThirdParty.TaxEngine
			and   not Company.UseIDM)

		NoVendorEmailAddress
			restricted
			when ((RemitToCode entered and RemitToCode.EmailAddress not entered)
			or   (RemitToCode not entered and PayVendor.EmailAddress not entered))

		CashPaymentFormatUsingIDMEmail
			restricted
			when (CashPaymentFormatRel.UsePaymentEMail
			or    CashPaymentFormatRel.UseSupplementaryEmail)

		ShowNoVendorEmailAddressMessage
			restricted
			when (CashPaymentFormatUsingIDMEmail
			and NoVendorEmailAddress)

		HasMatchInvoiceOutOfBalanceError
			restricted
			when (MatchInvoiceOutOfBalanceErrorRel exists)

		ExpenseAccrualFundReallocated
			restricted
			when (any PayablesInvoiceDistributionExpenseAccrualRel.Description = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription)

		PaymentAccrualFundReallocated
			restricted
			when (any PayablesInvoiceDistributionPaymentAccrualRel.Description = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundReallocatedDescription)

		DerivedBuyerEmailExists
			restricted
			when (Buyer.Employee.EmployeeWorkEmailAddressExists)

		DerivedBuyerPhoneExists
			restricted
			when (Buyer.Employee.EmployeeWorkPhoneExists)


		FrontEndSplitsEnabled
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FrontEndSplits)

		AllowFrontEndSplit
			restricted
			when (InvoiceType.CreditMemo
			or InvoiceType.Invoice
			or InvoiceType.DebitMemo
			and !MatchProcessType.ServiceContract
			and	!InterfaceInProcess
			and	!BudgetEditInProgress
			and	!InBackgroundProcessing
			and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FrontEndSplits
			and !GeneralLedgerCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts)

		HasFrontEndSplitDistributions
			restricted
			when (MatchProcessType.Expense
			and	!InterfaceInProcess
			and	!BudgetEditInProgress
			and	!InBackgroundProcessing
			and	DistributionsCreatedByFESRel exists)

		ExecuteFrontEndSplits
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FrontEndSplits
			and (InvoiceType.CreditMemo
			or InvoiceType.Invoice
			or InvoiceType.DebitMemo)
			and !MatchProcessType.ServiceContract)

		MatchPrepaymentMethodRequired
			restricted
			when (MatchPrepaymentMethod not entered)

		OriginalInvoiceRequired
			restricted
			when (OriginalInvoice not entered)

		FirstPurchaseOrderRequired
			restricted
			when (FirstPurchaseOrder not entered)

		ServiceContractRequired
			restricted
			when (ServiceContract not entered)

		VendorRequired
			restricted
			when (Vendor not entered)

		MatchReferenceNumberRequired
			restricted
			when (MatchReferenceNumber not entered)

		InvoiceNumberRequired
			restricted
			when (Invoice not entered)

		InvoiceDateRequired
			restricted
			when (InvoiceDate not entered)

		HasOpenSupplierAddOnCharges 
			restricted
			when (PayablesInvoiceSupplierOpenAddOnChargeRel exists)
		
		HasSupplierAddOnCharges 
			restricted
			when (PayablesInvoiceSupplierAddOnChargeRel exists)

		PurchaseOrderHasAddOnCharges 
			restricted 
			when (PurchaseOrderHasLineAddOnCharges
			or    PurchaseOrderHasHeaderAddOnCharges
			or    PurchaseOrderHasSpreadAddOnCharges)

		PurchaseOrderHasLineAddOnCharges 
			restricted 
			when (FirstPurchaseOrder.HasLineAddOnChargesNotFromSpread)
		
		PurchaseOrderHasHeaderAddOnCharges 
			restricted 
			when (FirstPurchaseOrder.HasHeaderAddOnCharges)

		PurchaseOrderHasSpreadAddOnCharges 
			restricted 
			when (FirstPurchaseOrder.HasSpreadAddOnCharges)

		HasPurchaseOrderOrSupplierAddOnCharges
			restricted 
			when (HasSupplierAddOnCharges
			or    PurchaseOrderHasAddOnCharges)

		HasPurchaseOrderOrAllowedSupplierAddOnCharges
			restricted 
			when (SupplierAllowedAdhocAOC
			or    PurchaseOrderHasAddOnCharges)

		AllAddOnCharges 
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   SupplierAllowedAdhocAOC)
		
		AllPOAddOnCharges 
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   !SupplierAllowedAdhocAOC)
		
		POHeaderAddOnChargesOnly 
			restricted 
			when (PurchaseOrderInvoice
			and   !PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   !PurchaseOrderHasSpreadAddOnCharges
			and   !SupplierAllowedAdhocAOC)

		POLineAddOnChargesOnly 
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   !PurchaseOrderHasHeaderAddOnCharges
			and   !PurchaseOrderHasSpreadAddOnCharges
			and   !SupplierAllowedAdhocAOC)

		POSpreadAddOnChargesOnly 
			restricted 
			when (PurchaseOrderInvoice
			and   !PurchaseOrderHasLineAddOnCharges
			and   !PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   !SupplierAllowedAdhocAOC)

		POHeaderAddOnChargesAndAdhoc 
			restricted 
			when (PurchaseOrderInvoice
			and	!PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   !PurchaseOrderHasSpreadAddOnCharges
			and   SupplierAllowedAdhocAOC)

		POLineAddOnChargesAndAdhoc 
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   !PurchaseOrderHasHeaderAddOnCharges
			and   !PurchaseOrderHasSpreadAddOnCharges
			and   SupplierAllowedAdhocAOC)

		POSpreadAddOnChargesAndAdhoc 
			restricted 
			when (PurchaseOrderInvoice
			and   !PurchaseOrderHasLineAddOnCharges
			and   !PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   SupplierAllowedAdhocAOC)

		POHeaderAndLineAddOnChargesAndAdhoc
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   !PurchaseOrderHasSpreadAddOnCharges
			and   SupplierAllowedAdhocAOC)

		POSpreadAndLineAddOnChargesAndAdhoc
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   !PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   SupplierAllowedAdhocAOC)

		POHeaderAndSpreadAddOnChargesAndAdhoc
			restricted 
			when (PurchaseOrderInvoice
			and   !PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   SupplierAllowedAdhocAOC)		

		POHeaderAndLineAddOnChargesOnly
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   !PurchaseOrderHasSpreadAddOnCharges
			and   !SupplierAllowedAdhocAOC)

		POSpreadAndLineAddOnChargesOnly
			restricted 
			when (PurchaseOrderInvoice
			and   PurchaseOrderHasLineAddOnCharges
			and   !PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   !SupplierAllowedAdhocAOC)

		POHeaderAndSpreadAddOnChargesOnly
			restricted 
			when (PurchaseOrderInvoice
			and   !PurchaseOrderHasLineAddOnCharges
			and   PurchaseOrderHasHeaderAddOnCharges
			and   PurchaseOrderHasSpreadAddOnCharges
			and   !SupplierAllowedAdhocAOC)		

		SupplierAllowedAdhocAOC 
			restricted 
			when (SupplierRel.AllowAdhocAddOnCharges)

		SupplierAllowedAdhocAOCOnly
			restricted 
			when ((CreateBySupplierServiceContract
			or     PurchaseOrderInvoice)
			and    SupplierAllowedAdhocAOC
			and   !PurchaseOrderHasLineAddOnCharges
			and   !PurchaseOrderHasHeaderAddOnCharges
			and   !PurchaseOrderHasSpreadAddOnCharges)

		CreateBySupplierMatchWithAOC 
			restricted 
			when ((TransientSupplierInvoiceType.POMatch
			or     MatchProcessType.ReceiptMatch)
			and    AddOnChargeExists)

		SupplierAOCAtSomeLevel
			restricted 
			when (CreateBySupplierMatchWithAOC
			or    HasSupplierAddOnCharges
			or    TaxAmount entered)

		DueDateRequired
			restricted
			when (DueDate not entered
			and TermsCode not entered
			and FirstPurchaseOrder.TermCode not entered                                                   
			and ServiceContract.TermsCode not entered                                                     
			and PurchaseFromLocation.TermsCode not entered                                                
			and RemitToVendorCompanyDefaultRel.TermsCode not entered                                      
			and RemitToCode.TermsCode not entered                                                         
			and VendorCompanyDefaultRel.TermsCode not entered                                             
			and first MatchPurchaseOrderInvoicesRel.PurchaseOrder.TermCode not entered                    
			and Vendor.TermsCode not entered)                                                             

		TaxCodeRequired
			restricted
			when (TaxCode not entered
			and TaxAdjustment.Calculate)

		NumberOfRecurrencesRequired
			restricted
			when (RecurringFrequency entered
			and NumberOfRecurringInvoices not entered)

		RecurringFrequencyRequired
			restricted
			when (NumberOfRecurringInvoices entered
			and RecurringFrequency not entered)

		ReferenceTypeRequired
			restricted
			when (CustomerID entered)

		TransientPaymentNumberRequired
			restricted
			when ((TransientPaymentDate entered
			or TransientPaymentAmount entered)
			and (TransientPaymentNumber not entered))

		TransientPaymentDateRequired
			restricted
			when ((TransientPaymentNumber entered
			or TransientPaymentAmount entered)
			and (TransientPaymentDate not entered))

		TransientPaymentAmountRequired
			restricted
			when ((TransientPaymentNumber entered
			or TransientPaymentDate entered)
			and (TransientPaymentAmount not entered))

		VendorPaymentAmountRequired
			restricted
			when (VendorPaymentCurrency != InvoiceCurrency
			and VendorPaymentCurrency != CashCode.Currency
			and VendorPaymentAmount not entered)

		WebServiceErrorExists
			restricted
			when (WebServiceErrorRel exists)

		AllowMatchPrepaymentAddOnCharge
			restricted 
			when (MatchPrepaymentMethod.PrepayFromInvoice
			and   Status.Released
			and   MatchStatus < 2)

		DetailCountExceedsVertexOneCallSetting 
			when (DerivedNumberOfInvoiceDetails + DerivedNumberOfAddOnCharges > NumberOfLinesForVertexMatchProcessByInvoice) 

		HasUnprocessedThirdPartyTaxDetails 
			when (UnprocessedThirdPartyDetailRel exists
			or    UnprocessedThirdPartyAddOnChargeRel exists)

		IsVendorPrimaryContactEmailCreditMemoEnabled
			restricted
			when (Vendor.PrimeVendorContactRel.EmailCreditMemo
			or not Vendor.PrimeVendorContactRel.OverrideIDMEmailDistribution)

		IsVendorPrimaryContactEmailDebitMemoEnabled
			restricted
			when (Vendor.PrimeVendorContactRel.EmailDebitMemo
			or not Vendor.PrimeVendorContactRel.OverrideIDMEmailDistribution)

		AllowUpdateInvoiceNumber
			restricted
			when (Status.Released
			and   !InvoiceSource.IntercompanyBilling) 	

		CompanyWithinGLCompanyGroup		
			when (GeneralLedgerCompanyGroup not entered
			or	  GLCompanyGroupMemberRel exists)

			
		AllowDuplicateInvoiceByDate							
			restricted
			when (Vendor.AllowDuplicateInvoiceByDate
			or Vendor.VendorClass.AllowDuplicateInvoiceByDate)

		RequireRemitTo				
			restricted
			when (((Vendor.RequireRemitTo.Yes)
			or 	(Vendor.RequireRemitTo.CompanyDefault
			and  Company.RequireRemitTo))
			and  !Status.Historical)

		RequireRemitToAlert				
			restricted
			when (RequireRemitTo
			and RemitToCode not entered)
				
		ViewExpenseManagementLink		
			restricted
    		when (InvoiceSource.ExpenseInterface 
			and  ExpenseManagementInterfaceConfigurationRel.XMURL entered)

		AllowMoveToAmended			
			restricted
			when  ((Status.Released
			or    Status.Historical)
			and   Suffix != 888
			and   Suffix != 999
			and  (MatchProcessType.Expense
			or    MatchProcessType.AOCOnly
			and   !LinkedToCancelledPOInvoice))


		IsInvoiceType
			restricted
			when  (InvoiceType.Invoice
			or     InvoiceType.CreditMemo
			or     InvoiceType.DebitMemo
			or     InvoiceType.PrepaymentCredit)

		IsPrepaymentOrPreCredit
			restricted
			when  (InvoiceType.Prepayment
			or     InvoiceType.PrepaymentCredit)

		IsPrepaymentOrMatch
			restricted
			when (InvoiceType.Prepayment
			or    InvoiceType.PrepaymentCredit
			or	  InvoiceType.MatchPrepayment)

		IsInvoiceMatched
			restricted
			when (InvoiceType.MatchPrepayment
			and  (MatchStatus.Matched
			or    MatchStatus.MatchedOutOfTolerance
			or	  MatchStatus.MatchedInTolerance
			or    MatchStatus.MatchedWithAutoChargeback))
		
		AllowMatrixApprovalsList
			restricted
			when (UsesMatrixApproval
			and  !Status.Unreleased)

		IsGarnishmentsExists		
			restricted
			when (PayablesInvoiceSensitiveData exists)
		
		IsUpdateGarnishments		
			restricted	
			when (IsGarnishmentsExists 
			and !PaymentsExist)

		AttachmentsAreLocallyStored
			restricted
			when (SupplierInvoiceAttachment.IsLocal
			or 	  SupplierPODAttachment.IsLocal)

		AttachmentsValidForIDMUpload
			restricted
			when (SupplierInvoiceAttachment.ValidForIDMUpload
			or 	  SupplierPODAttachment.ValidForIDMUpload)

		HasLeaseInvoices		
			restricted
			when (LeaseInvoiceRel exists)

		AuditStatusTagBlue
			restricted
			when (last PayablesInvoiceAudit set.Status.Assigned
			or    last PayablesInvoiceAudit set.Status.Reassigned
			or    last PayablesInvoiceAudit set.Status.PendingApprover
			or    last PayablesInvoiceAudit set.Status.Restored
			or    last PayablesInvoiceAudit set.Status.MatchReleased
			or    last PayablesInvoiceAudit set.Status.SentForPayment
			or    last PayablesInvoiceAudit set.Status.Submitted
			or    last PayablesInvoiceAudit set.Status.Matched
			or    last PayablesInvoiceAudit set.Status.Unmatched
			or    last PayablesInvoiceAudit set.Status.Amended)

		AuditStatusTagRed
			restricted
			when (last PayablesInvoiceAudit set.Status.Rejected
			or    last PayablesInvoiceAudit set.Status.Disapproved
			or    last PayablesInvoiceAudit set.Status.Cancelled
			or    last PayablesInvoiceAudit set.Status.ManuallyRejected)

		AuditStatusTagGreen
			restricted
			when (last PayablesInvoiceAudit set.Status.Approved
			or    last PayablesInvoiceAudit set.Status.AutoApproved
			or    last PayablesInvoiceAudit set.Status.ManuallyApproved
			or    last PayablesInvoiceAudit set.Status.Released)

		EligibleForVendorNameLookup		
			restricted
			when (!RecordExists
			and !TransientInvoiceEntryTemplate.MatchInvoice
			and !TransientInvoiceEntryTemplate.ServiceContract)






	Relations			

		AddOnChargeRel
			one-to-one relation to AddOnCharge
			Field Mapping uses symbolic key
				related.Company			= Company
				related.AddOnCharge		= LocalPreviousAOCCode

		VendorCommentsRel2
			classic name is APVENCOMMENTS2
			one-to-many relation to Apcomments
			Field Mapping uses Set2
				related.VendorCommentType = "V"
				related.VendorGroup       = Company.VendorGroup
				related.Vendor            = Vendor
				related.VendorLocation    = blank
				related.Company           = Company

		BasicAnalyticsCalendarPeriodRel
			one-to-one relation to BasicAnalyticsCalendarPeriod
			Field Mapping uses LeafRecordsGregorian
				related.Date = InvoiceDate

		GeneralLedgerCalendarPeriodXrefRel
			one-to-one relation to GeneralLedgerCalendarPeriodXref		
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriodXref	= InvoiceDate

		HeaderBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup         = UniqueID

		DistributionBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID                          = UniqueID

		ActorCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= actor.context.GeneralLedgerCompanyGroup
				related.Company      				= Company

		GeneralLedgerCompanyRel			
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		FinanceEnterpriseGroupRel		
			one-to-one relation to FinanceEnterpriseGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		CashLedgerPayablesPaymentRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set4
				related.CashManagementGroup		   						= CashCode.CashManagementGroup
				related.CashCode										= CashCode
				related.CashLedgerPayablesPayment.BankTransactionCode	= BankTransactionCode
				related.TransactionNumber								= TransientPaymentNumber	

		CashLedgerPayablesPaymentReservedRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set4
				related.CashManagementGroup		   						= CashCode.CashManagementGroup
				related.CashCode										= CashCode
				related.CashLedgerPayablesPayment.BankTransactionCode	= BankTransactionCode
			Instance Selection
				where (related.Status.ReservedForManualPayment)

		CashPaymentFormatRel
			one-to-one relation to CashPaymentFormat
			Field Mapping uses symbolic key
				related.CashManagementGroup 					= CashCode.CashManagementGroup
				related.CashCode								= CashCode
				related.CashPaymentFormat.BankTransactionCode	= BankTransactionCode
				related.CashPaymentFormat.PayablesProcessGroup	= Vendor.PayablesProcessGroup

		BudgetEditBatchRel
			one-to-many relation to BudgetEditBatch
			Field Mapping uses ByDocumentID
				related.DocumentID                          = UniqueID

		CompanyCashCodeRel											
			one-to-one relation to CompanyCashCode					
			Field Mapping uses symbolic key							
				related.Company			= DerivedCashPostingCompany 
				related.CashCode		= CashCode					

		GLInterEntityRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity		= GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity		= CashCode.DefaultPostCompany.AccountingEntity

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AP"
				related.Company						= Company

		CompanySystemClosingControl2Rel			
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AP"
				related.Company						= LocalCompany
		
		ContractAttachmentRel
			one-to-many relation to ContractAttachment
			Field Mapping uses part of key
				related.ContractGroup		= Company.VendorGroup
				related.Contract			= ServiceContract

		ContractCommentRel
			one-to-many relation to ContractComment
			Field Mapping uses part of key
				related.ContractGroup		= Company.VendorGroup
				related.Contract			= ServiceContract

		EntityLedgerPeriodRel					
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroupRel.FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.Ledger						= FinanceEnterpriseGroupRel.CoreLedger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date	not < DistributionDate		
				and	  (related.PeriodStatus.Open
				or    related.PeriodStatus.Backpost))









		ShowPayablesInvoiceTaxDrillRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "ShowPayablesInvoiceTaxDrill"
			Instance Selection
				where (related.Value	= "YES")

		UseNewTotalTaxAmountProcessRel		
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "UseNewTotalTaxAmountProcess"
			Instance Selection
				where (related.Value	= "YES")

		UseProcessDistributionCodeRel		
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "UseProcessDistributionCode"

		UseOldProcessDistributionCodeRel		
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "UseOldProcessDistributionCode"
			Instance Selection
				where (related.Value 	= "YES")










		OneSourceExpenseProcessByDistribRel													
			one-to-many relation to ConfigurationParameter									
			Field Mapping uses symbolic key													
				related.ConfigurationParameter.ConfigurationID	= "config"					
				related.ConfigurationParameter.Name				= "OneSourceByDistrib"		
			Instance Selection																
				where (related.Value	= "YES")											

		OneSourceRequireICNCodeRel															
			one-to-many relation to ConfigurationParameter									
			Field Mapping uses symbolic key													
				related.ConfigurationParameter.ConfigurationID	= "config"					
				related.ConfigurationParameter.Name				= "OneSourceRequireICNCode"	
			Instance Selection																
				where (related.Value	= "YES")											

















		OneSourceMatchProcessByInvoiceRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "OneSourceMatchByInvoice"

		VertexMatchByInvoiceRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "VertexMatchByInvoice"
		AllowReleaseOnlyMatchInvoiceRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "AllowReleaseOnlyMatchInvoice"

		AccountingUnitCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.AccountingUnit = AccountingUnit)

		AccountingEntityCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.ToAccountingEntity = AccountingEntity)

		AccountCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.GeneralLedgerChartAccount = Account)

		ProjectCommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.Project = Project)

		Dimension1CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension1 = FinanceDimension1)

		Dimension2CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension2 = FinanceDimension2)

		Dimension3CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension3 = FinanceDimension3)

		Dimension4CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension4 = FinanceDimension4)

		Dimension5CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension5 = FinanceDimension5)

		Dimension6CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension6 = FinanceDimension6)

		Dimension7CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension7 = FinanceDimension7)

		Dimension8CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension8 = FinanceDimension8)

		Dimension9CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension9 = FinanceDimension9)

		Dimension10CommitmentRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where ((related.Status = 0
				or     related.Status = 3)
				and    related.FinanceCodeBlock.FinanceDimension10 = FinanceDimension10)

		PrepaymentTaxTransactionRel		
			one-to-many relation to TaxTransaction
			Field Mapping uses ByVendorCustomerTaxCode
				related.TaxEntity		= GeneralLedgerCompanyRel.AccountingEntity
				related.VendorCustomer	= Vendor
				related.TaxCode			= LocalTaxCode
			Instance Selection
				where (related.Invoice	= Invoice
				and    related.InvoicedOrCreditMemo = "I")

		PrepaymentCreditTaxTransactionRel		
			one-to-many relation to TaxTransaction
			Field Mapping uses ByVendorCustomerTaxCode
				related.TaxEntity		= GeneralLedgerCompanyRel.AccountingEntity
				related.VendorCustomer	= Vendor
				related.TaxCode			= LocalTaxCode
			Instance Selection
				where (related.VoucherNumber = VoucherNumber)

		EntityTaxCodeRel
			classic name is TAXCODE
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= GeneralLedgerCompanyRel.AccountingEntity
				related.TaxCode 				= TaxCode

		LocalEntityTaxCodeRel
			classic name is TAXCODE
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= GeneralLedgerCompanyRel.AccountingEntity
				related.TaxCode 				= LocalTaxCode

		ContractRebateDueRel
			one-to-one relation to ContractRebateDue
			required
			Field Mapping uses symbolic key
				related.ContractGroup      = ContractRebateGroup.ContractGroup
				related.Contract           = ContractRebateGroup.Contract
				related.ContractRebateType = ContractRebateGroup.ContractRebateType
				related.ContractRebateDue  = ContractRebateGroup.ContractRebateDue

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= GeneralLedgerCompanyGroup
				related.Company						= Company

		LocalGLCompanyGroupMemberRel													
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup
				related.Company						= Company

		LocalGLCompanyGroupMembersRel			
			one-to-many relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup

		LocalGeneralLedgerSystemCodeRel			
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "AP"
		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "AP"

		POGeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"

		RealizedGainRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount             = SystemAccount.RealizedGain

		RealizedLossRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount             = SystemAccount.RealizedLoss

		RealizedGainAndLossRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount             = SystemAccount.RealizedGainAndLoss

		GLCommitRel		
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID	
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID	= UniqueID

		OpenGLCommitDrillRel	
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where (related.Status = 0
				or     related.Status = 2
				or     related.Status = 3)

		UnreleasedGLCommitRel		
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID	
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.HeaderUniqueID	= UniqueID
			Instance Selection
				where (related.Status = 0)

		GLCommitDocumentsRel	
			one-to-one relation to GLCommitDocument
			Field Mapping uses ByHeaderObjectReference
				related.HeaderObjectReference		= reference to this instance

		IncomeWithholdingCodeDetailRel
			one-to-one relation to IncomeWithholdingCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.IncomeWithholdingCode	= IncomeWithholdingCode
				related.Company					= Company

		IntercompanyBillingGroupRel
			one-to-one relation to IntercompanyBillingGroup
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		IntrastatDetailRel
			one-to-many relation to IntrastatDetail
			Field Mapping uses Set2
				related.TaxEntity						= GeneralLedgerCompanyRel.AccountingEntity
				related.IntrastatHeader.IntrastatNumber	= IntrastatNumber

	   	IntrastatHeaderRel
			one-to-one relation to IntrastatHeader
  			Field Mapping uses Set3
				related.TaxEntity						= GeneralLedgerCompanyRel.AccountingEntity
				related.IntrastatHeader.FiscalYear		= IntrastatFiscalYear
				related.IntrastatHeader.IntrastatNumber = IntrastatNumber

	   	IntrastatNumberRel
			one-to-one relation to IntrastatSequenceNumber
  			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity						= GeneralLedgerCompanyRel.AccountingEntity
				related.FiscalYear		= IntrastatFiscalYear

		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		LeaseInvoiceRel
			classic name is LMINVOICE
			one-to-one relation to LeaseInvoice
			Field Mapping uses Set7
				related.Company                     = Company
				related.Vendor                      = Vendor
				related.Invoice                     = Invoice
				related.Suffix                      = Suffix
				related.LeaseInvoice.CancelSequence = CancelSequence

		MatchCompanyRel
			classic name is MACOMPANY
			one-to-one relation to MatchCompany
			Field Mapping uses symbolic key
				related.Company = Company

		LocalMatchCompanyRel
			one-to-one relation to MatchCompany
			Field Mapping uses symbolic key
				related.Company = LocalCompany

		POCostMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and   (related.ApplicationAction.AcceptWorkInSmartRecon
				or    (related.ApplicationAction.AdjustCost
				and    related.AdjustedUnitCost != related.PayablesInvoiceDetail.MatchUnitCost)))

		AdjustCostToInvoiceMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and   (related.ApplicationAction.AdjustCost
				and    related.AdjustedUnitCost = related.PayablesInvoiceDetail.MatchUnitCost))

		MatchInvoiceMessageSet5Rel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice

		MatchInvoiceMessageRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set1
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice

		OpenMatchInvoiceMessagesRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.MessageNotClosed)	

		MatchInvoiceReferenceRel
			classic name is MAINVREF1
			one-to-one relation to MatchInvoiceReference
			Field Mapping uses symbolic key
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice

		MatchInvoiceReference2Rel
			classic name is MAINVREF2
			one-to-many relation to MatchInvoiceReference
			Field Mapping uses Set2
				related.Company			= Company
				related.Vendor			= Vendor
				related.OriginalInvoice	= PayablesInvoice

		MatchInvoiceReference2PurgeRel
			classic name is MAINVREF2
			one-to-many relation to MatchInvoiceReference
			Field Mapping uses Set2
				related.Company			= Company
				related.Vendor			= Vendor
				related.OriginalInvoice	= PayablesInvoice
			Instance Selection
				include deleted records	

		MatchPurchaseOrderInvoicesRel
			classic name is MAPOINV
			one-to-many relation to MatchPurchaseOrderInvoice
			Field Mapping uses Set2
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice

		MatchPurchaseOrderInvoicesPurgeRel
			classic name is MAPOINV
			one-to-many relation to MatchPurchaseOrderInvoice
			Field Mapping uses Set2
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				include deleted records

		MatchPurchaseOrderInvoiceHistoryRel
			one-to-many relation to MatchPurchaseOrderInvoiceHistory
			Field Mapping uses Set2
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice

		LocalMatchPurchaseOrderInvoicesRel								
			one-to-many relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PurchaseOrder			= LocalPurchaseOrder
			Instance Selection
				where (related.UniqueID	!= UniqueID)

		MatchServiceContractInvoicesRel
			one-to-many relation to MatchServiceContractInvoice
			Field Mapping uses symbolic key 
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
		ThisMatchServiceContractInvoiceRel
			one-to-one relation to MatchServiceContractInvoice
			Field Mapping uses symbolic key 
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
				related.Contract 		= ServiceContract 
		PayablesCreditMemoRel
			classic name is APCRMEMO
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses Set2
				related.Company                    = Company
				related.Vendor                     = Vendor
				related.PayablesCreditMemo.Invoice = Invoice
				related.PayablesCreditMemo.Suffix  = Suffix
			Instance Selection							
				where (related.PayablesCreditMemo.PayablesInvoice !entered
				or 	   related.PayablesCreditMemo.PayablesInvoice = PayablesInvoice)

		PayablesCreditMemoPurgeRel
			classic name is APCRMEMO
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses Set2
				related.Company                    = Company
				related.Vendor                     = Vendor
				related.PayablesCreditMemo.Invoice = Invoice
				related.PayablesCreditMemo.Suffix  = Suffix
			Instance Selection
				include deleted records							
				where (related.PayablesCreditMemo.PayablesInvoice !entered
				or 	   related.PayablesCreditMemo.PayablesInvoice = PayablesInvoice)

		PayablesCreditMemo2Rel
			classic name is APCRMEMO2
			one-to-many relation to PayablesCreditMemo
			Field Mapping uses symbolic key
				related.Company = Company
				related.Vendor  = Vendor
			Instance Selection
				where (related.PayablesCreditMemo.CreditMemoNumber = Invoice
				and    related.PayablesCreditMemo.CreditMemoSuffix = Suffix
				and   (related.PayablesCreditMemo.CreditMemoPayablesInvoice !entered		
				or     related.PayablesCreditMemo.CreditMemoPayablesInvoice = PayablesInvoice))

		DistributionCodeDetailRel		
			one-to-many relation to PayablesDistributionCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			 	 = Company.VendorGroup
				related.PayablesDistributionCode = LocalDistributionCode

		PayablesHoldCodeRel
			one-to-one relation to PayablesHoldCode
			Field Mapping uses symbolic key
				related.VendorGroup		= Company.VendorGroup
				related.HoldCode		= LocalHoldCode

		LocalPayablesInvoiceNumberRel		
			one-to-many relation to PayablesInvoice					
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= LocalInvoice
				related.Suffix			= Suffix
				related.CancelSequence	= blank
			Instance Selection			
				where (related.InvoiceDate	!= InvoiceDate)			

		PayablesInvoiceRecursRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 				= Company
				related.Vendor 					= Vendor
			Instance Selection
				where (related.Invoice 			= this instance.Invoice
				and    related.Suffix 			entered
				and    related.CancelSequence	not entered)

		NextRecurringInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 				= Company
				related.Vendor 					= Vendor
			Instance Selection
				where (related.Invoice 			= this instance.Invoice
				and    related.Suffix 			> Suffix
				and    related.CancelSequence	not entered)

		PayablesInvoiceCancelRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 			= Company
				related.Vendor 				= Vendor
			Instance Selection
				where  (related.Invoice 	= this instance.Invoice
				and     related.CancelSequence entered)

		PayablesInvoiceDuplicateInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice 
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= Invoice
				related.Suffix			= Suffix
				related.CancelSequence	= CancelSequence
			Instance Selection
				where (related.UniqueID	!= UniqueID)
		
		PayablesInvoiceDuplicateInvoiceByDateRel				
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice 
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= Invoice
				related.Suffix			= Suffix
				related.CancelSequence	= CancelSequence
				related.InvoiceDate		= InvoiceDate
			Instance Selection
				where (related.UniqueID	!= UniqueID)

		PayablesInvoiceDuplicateInvoiceByVendorRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor			= Vendor
				related.Invoice			= Invoice
			Instance Selection
				where (related.VendorGroup		= VendorGroup
				and    related.Suffix			= Suffix
				and    related.CancelSequence	= CancelSequence
				and    related.UniqueID			!= UniqueID)
				
		PayablesInvoiceDuplicateInvoiceByVendorByDateRel			
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor			= Vendor
				related.Invoice			= Invoice
			Instance Selection
				where (related.VendorGroup		= VendorGroup
				and    related.Suffix			= Suffix
				and    related.CancelSequence	= CancelSequence
				and	   related.InvoiceDate		= InvoiceDate
				and    related.UniqueID			!= UniqueID)

		PayablesInvoiceMultipleInvoicesPerVendorRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor			= Vendor
			Instance Selection
				where (!related.Status.Cancelled
				and    related.InvoiceType.Invoice
				and    related.UniqueID 		!= UniqueID
				and    related.VendorGroup		 = VendorGroup)

		RestrictToOneInvoiceByVendorRel				
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor					= LocalVendor
			Instance Selection
				where (related.InvoiceType.Invoice
        		and    !related.Status.Cancelled
        		and    related.VendorGroup		= LocalVendorGroup
        		and    related.UniqueID			!= UniqueID)

		PayablesInvoiceRecurSuffixRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 			= Company
				related.Vendor 				= Vendor
			Instance Selection
				where (related.Invoice 			= this instance.Invoice
				and    related.Suffix 			> 1
				and    related.CancelSequence	= this instance.CancelSequence)

		BuyerSupplierContactMessageRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses ByInvoice
				related.OriginatingCompany			= Company
				related.OriginatingInvoice			= PayablesInvoice

		RecurringInvoiceDuplicateInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice 
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= Invoice
			Instance Selection
				where (related.CancelSequence	= CancelSequence		
				and    related.UniqueID		   != UniqueID)

		RecurringInvoiceDuplicateInvoiceByVendorRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor			= Vendor
				related.Invoice			= Invoice
			Instance Selection
				where (related.VendorGroup		= VendorGroup
				and    related.CancelSequence	= CancelSequence
				and    related.UniqueID		   != UniqueID)

		DuplicateRecurringInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice 
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= Invoice
			Instance Selection
				where (related.IsRecurringInvoice)

		PayablesInvoiceChargebackRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 						= Company
				related.Vendor 							= Vendor
			Instance Selection
				where (related.Invoice 	= this instance.Invoice
				and    related.InvoiceDate = this instance.InvoiceDate			
				and    related.Suffix 	= 111		
				and    related.InvoiceType.CreditMemo
				and    related.UniqueID				not = UniqueID)

		NonCancelledChargebackRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 						= Company
				related.Vendor 							= Vendor
				related.Invoice							= Invoice
				related.Suffix							= 111
				related.CancelSequence					= blank
				related.InvoiceDate						= InvoiceDate				

		SystemGeneratedCreditMemoRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 						= Company
				related.Vendor 							= Vendor
			Instance Selection
				where (related.Invoice 	= this instance.Invoice
				and    related.Suffix 	= 999		
				and    related.InvoiceType.CreditMemo
				and    related.UniqueID				not = UniqueID)

		PayablesInvoiceOriginalRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 						= Company
				related.Vendor 							= Vendor
			Instance Selection
				where (related.Invoice 	= this instance.Invoice
				and    related.Suffix 	= blank
				and    related.InvoiceType.Invoice
				and    related.UniqueID				not = UniqueID)

		PayablesInvoiceNonCancelledChargebackRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 						= Company
				related.Vendor 							= Vendor
			Instance Selection
				where (related.Invoice 	= this instance.Invoice
				and    related.Suffix 	= 111		
				and    related.InvoiceType.CreditMemo
				and    related.UniqueID				not = UniqueID
				and    !related.Status.Cancelled)

		CancelledPOInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 						= Company
				related.Vendor 							= Vendor
				related.Invoice 						= Invoice
			Instance Selection
				where (related.Suffix 					= 888
				or     related.Suffix 					= 999)

		MatchTransPayablesInvoiceRel
			classic name is MATCH-TRANS
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set13
				related.Company       = Company
				related.Vendor        = Vendor
				related.MatchObjectID = MatchObjectID
			Instance Selection
				where (!related.IsPOCancel)

		PayablesInvoiceForCompanyVendorRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
			Instance Selection
				where (related.Status.Released)

		VendorInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendor2
				related.Company			= Company
				related.Vendor			= Vendor
			Instance Selection
				where (related.Status.Released
				and    !related.InvoiceType.CreditMemo
				and    !related.InvoiceType.DebitMemo)

		VendorNonPerfectMatchInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendor2
				related.Company			= Company
				related.Vendor			= Vendor
			Instance Selection
				where (!related.MatchProcessType.Expense
				and    !related.MatchProcessType.ServiceContract
				and    !related.InvoiceType.CreditMemo
				and    !related.InvoiceType.DebitMemo
				and   (related.MatchStatus > 2
				or    (related.MatchStatus = 2
				and    related.HasAdjustCostToInvoiceMessage)
				or     related.MatchProcessType.Service))

		UnsubmittedSCPurchaseOrderInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
			Instance Selection
				where (related.SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice
				and    related.FirstPurchaseOrder   = FirstPurchaseOrder)

		UnsubmittedSCContractInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
			Instance Selection
				where (related.SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice
				and    related.ServiceContract   = ServiceContract)

		SupplierContactMessageRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
				related.SupplierGroup				= actor.agent(SupplierSourceId).SupplierGroup
 				related.Supplier  			 		= actor.agent(SupplierSourceId).Supplier
				related.SupplierSourceId            = actor.agent(SupplierSourceId).SupplierSourceId
			Instance Selection
				where (related.OriginatingCompany			= Company
				and    related.OriginatingInvoice           = PayablesInvoice)

		PurchaseFromSupplierSourceIdRel
			one-to-one relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup    = SupplierGroupRel.SupplierGroup
				related.Supplier         = SupplierRel.Supplier
				related.SupplierSourceId = DerivedSupplierSourceId

		SupplierSourceIdValidRel
			one-to-one relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup    = SupplierGroupRel.SupplierGroup
				related.Supplier         = LocalSupplier
				related.SupplierSourceId = LocalSupplierContact

		InvoicesForServiceContractRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
			Instance Selection
				where (related.InvoiceType.Invoice
				and    related.MatchProcessType.ServiceContract)

		PrepayInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company 	= LocalPrepayCompany
				related.Vendor 		= LocalPrepayVendor
				related.Invoice 	= LocalPrepayInvoice

		NewPrepayCreditRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses symbolic key
				related.Company 		= NewPrepayCredit.Company
				related.PayablesInvoice = NewPrepayCredit.PayablesInvoice

		RequestPayablesInvoiceDuplicateInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice 
				related.Company			= LocalCompany
				related.Vendor			= LocalVendor
				related.Invoice			= LocalInvoice
			Instance Selection
				where (related.InvoiceDate	= LocalInvoiceDate)			

		RequestPayablesInvoiceDuplicateInvoiceByVendorRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor				= LocalVendor
				related.Invoice				= LocalInvoice
				related.Company				= LocalCompany			
			Instance Selection
				where (related.VendorGroup	= LocalVendorGroup		
				and	   related.InvoiceDate	= LocalInvoiceDate)		

		PayablesInvoiceAOCAlphaRel
			classic name is MAAOCDTL
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set1
				related.Company		= Company
				related.Vendor		= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.AocAlpha = "R")


		InvoiceAddOnChargeForContractRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set1
				related.Company 			= Company
				related.Vendor      		= Vendor
				related.PayablesInvoice 	= PayablesInvoice
			Instance Selection
				where (related.Contract		= ServiceContract)

		PayablesInvoiceAddOnChargeRel
			classic name is MAAOCDTL-2
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice

		LocalInvoiceAddOnChargeForPOLineRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder		= LocalPurchaseOrder
				related.PurchaseOrderLine	= LocalPurchaseOrderLine

		PayablesInvoiceAddOnChargeHistoryRel
			one-to-many relation to PayablesInvoiceAddOnChargeHistory
			Field Mapping uses Set1
				related.Company					= Company
				related.Vendor					= Vendor
				related.Invoice 				= Invoice
			Instance Selection
				where (related.PayablesInvoice	= PayablesInvoice)

		PayablesInvoiceSupplierAddOnChargeRel
			one-to-many relation to PayablesInvoiceSupplierAddOnCharge
			Field Mapping uses symbolic key 
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice

		PayablesInvoiceSupplierAddOnChargePurgeRel
			one-to-many relation to PayablesInvoiceSupplierAddOnCharge
			Field Mapping uses symbolic key 
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				include deleted records

		PayablesInvoiceSupplierOpenAddOnChargeRel
			one-to-many relation to PayablesInvoiceSupplierAddOnCharge
			Field Mapping uses symbolic key 
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection 
				where (related.InvoiceAddOnChargeCreated = false)				
	
		PayablesInvoiceChartOptionsRel is a PayablesInvoiceChartOptions set


		PayablesInvoiceDetailRel
			classic name is MAINVDTL-2
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.PayablesInvoice = PayablesInvoice

		InvoiceDetailForContractRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice 	= PayablesInvoice
				related.PurchaseOrder		= blank
				related.PurchaseOrderLine	= blank
			Instance Selection
				where (related.Contract		= ServiceContract)

		ServiceDetailsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company                 = Company
				related.Vendor                  = Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where  (related.ItemType.Service)

		MiscellaneousInvoiceDetailsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrderLine not entered
				and    related.ContractLine not entered)

		NoCostDetailsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company                 = Company
				related.Vendor                  = Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where  (related.EnteredUnitCost not entered)

		PayablesInvoiceDiscountRel
			classic name is APDISCACC
			one-to-many relation to PayablesInvoiceDiscount
			Field Mapping uses ByCompany
				related.Company = Company
				related.Vendor  = Vendor
			Instance Selection
				where (related.Invoice = Invoice
				and   related.Suffix = Suffix
				and   related.CancelSequence = CancelSequence)

		PayablesInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice

		PayablesInvoiceDistributionPurgeRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				include deleted records	

		PayablesInvoiceDistributionSummaryRel 
			one-to-many relation to PayablesInvoiceDistributionSummary 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice			

		PayablesInvoiceDistributionSummaryPurgeRel 
			one-to-many relation to PayablesInvoiceDistributionSummary 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice			
			Instance Selection
				include deleted records	

		PayablesInvoiceDistributionForSummaryRel 
			one-to-many relation to PayablesInvoiceDistribution 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice	
			Instance Selection
				where (related.DistributionType	= "D"
				and    related.TaxType         != "A")

		APDistributionAggregationRel 
			one-to-many relation to APDistributionAggregation 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice

		APDistributionAggregationRejectedRel 
			one-to-many relation to APDistributionAggregation 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (!related.Status 			= 7)

		APDistributionAggregationApprovedRel 
			one-to-many relation to APDistributionAggregation 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.Status 			= 6)

		APDistributionAggregationPendingApprovalRel 
			one-to-many relation to APDistributionAggregation 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.ResponsibilityMatrixApprovalProcessorRel.Status.PendingApproval)

		APDistributionForAggregationRel 
			one-to-many relation to PayablesInvoiceDistribution 
			Field Mapping uses symbolic key 
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType = "D"
				and	 ((related.IsNonLinkedDistribution)
				or    (related.IsLinkedTaxDistribution
				and    related.TaxType != "A")))

		PayablesInvoiceDistribution1Rel		
			one-to-one relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company						= Company
				related.Vendor						= Vendor
				related.PayablesInvoice				= PayablesInvoice
				related.PayablesInvoiceDistribution	= LocalPayablesInvoiceDistrib

		PayablesInvoiceDistributionLinkedTaxRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company						= Company
				related.Vendor						= Vendor
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.OriginalDistribution	= LocalPayablesInvoiceDistrib)
		PayablesInvoiceDistributionNoCancelSequenceRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.CancelSequence = blank)




		PayablesInvoiceDistributionByTypeRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.Suffix			= Suffix
				and    related.CancelSequence	= CancelSequence
				and    related.DistributionType = LocalDistributionType)

		PayablesInvoiceDistributionByTaxPointRel	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.TaxPoint			 = "P" 	
				and    related.TaxIndicator		!= 2	

				and    related.DistributionType != "R")	



		PayInvDistribAdjProrateRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.AddOnCharge		not entered)

		RecurringInvoiceDistributionsByTypeRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1
				related.Company				= Company
				related.PayablesInvoice		= LocalRecurringPayablesInvoice
			Instance Selection
				where (related.DistributionType = "D")

		NewRecurringInvoiceRel					
			one-to-one relation to PayablesInvoice
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= NewRecurringInvoice

		TotalTaxableDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxCode 			entered
				and   !related.VATReverse					
				and   (related.TaxIndicator 	not entered
				or     related.TaxIndicator		= 0))	

		TotalTran1TaxableDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxIndicator 	= 2)	

		TotalTran2TaxableDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxIndicator 	!= 1	
				and    related.TaxIndicator 	!= 2	
				and    related.TaxCode 			not entered
				and    related.TaxableAmount 	entered)

		TotalOrigTranTaxableDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxIndicator 	!= 1	
				and    related.TaxIndicator 	!= 2	
				and    related.TaxCode 			not entered
				and    related.TaxableAmount 	not entered)

		UnpostedDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.Status 			= 1)

		CancelledOrPostedDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.Status 			> 8)

		OldDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1		
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionCode = LocalDistributionCode
				and    related.DistributionCode != blank
				and   !related.IsLinkedTaxDistribution)			

		OldLinkedTaxDistributionsRel			
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1		
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionCode = LocalDistributionCode
				and    related.DistributionCode != blank
				and    related.IsLinkedTaxDistribution)

		MatchAdditionalDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoiceDetail not entered
				and    related.PurchaseOrderLine not entered
				and    related.ContractLine not entered
				and    related.AddOnCharge not entered
				and    related.MatchCreated not entered
				and    related.DistributionType = "D"
				and	  (related.TaxIndicator entered
				or     related.TaxCode not entered))

		MatchAdditionalTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoiceDetail not entered
				and    related.PurchaseOrderLine not entered
				and    related.ContractLine not entered
				and    related.AddOnCharge not entered
				and    related.MatchCreated not entered
				and    related.DistributionType = "D"
				and    related.TaxIndicator not entered
				and    related.EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)

		MatchAccruedTaxDistributionsRel 
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and   !related.VATReverse
				and    related.DistributionType.Distribution
				and    not related.TaxIndicator.Taxable
				and    not related.TaxIndicator.Exclude	
				and    not related.TaxIndicator.Exempt
				and   ((related.PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
				and     related.EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
				or     (!related.PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
				and     related.PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Accrued)))

		MatchAccruedTaxVATReverseDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and   !related.VATReverse
				and    related.VATReverseIndicator
				and    related.DistributionType.Distribution
				and   ((related.PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
				and     related.EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
				or     (!related.PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
				and     related.PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Accrued)))

		MatchInvoicedTaxDistributionsRel 	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.IsTaxDistribution		
				and    related.TaxType.Invoiced)

		MatchOneSourceAccruedDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.TaxType.Accrued)

		MatchOneSourceInvoicedDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.TaxType.Invoiced)

		PayablesInvoiceDistributionSet1Rel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice

		PayablesInvoiceDistributionSet10Rel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses NewSet10	
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice

		ReleasedAndUnreleasedDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key 
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.DistributionType.Distribution 
				and   (related.Status.Unreleased
				or     related.Status.Released)
				and	  (related.TaxCode not entered
				or     related.IsInvoicedTaxDistribution)
				and    related.DistributionAmount.CurrencyAmount entered)	
		TaxDistributionsRel is a PayablesInvoiceDistribution set		
			Instance Selection
				where (related.IsTaxDistribution)

		NonVATReversalTaxDistibutionsRel is a PayablesInvoiceDistribution set	
			Instance Selection
				where (related.IsInvoicedTaxDistribution	
				and   !related.VATReverse)

		NonVATReversalAccruedTaxDistibutionsRel is a PayablesInvoiceDistribution set	
			Instance Selection
				where (related.IsAccruedTaxDistribution
				and   !related.VATReverse)

		DistributionTypeIsDistributionRel is a PayablesInvoiceDistribution set		
			Instance Selection
				where (related.DistributionType.Distribution)

		PayablesInvoiceDistributionExpenseAccrualRel is a PayablesInvoiceDistribution set
			Instance Selection
				where (related.DistributionType.ExpenseAccrual)

		PayablesInvoiceDistributionPaymentAccrualRel is a PayablesInvoiceDistribution set
			Instance Selection
				where (related.DistributionType.PaymentAccrual)

		PayablesInvoiceDistributionPaymentRel is a PayablesInvoiceDistribution set
			Instance Selection
				where (related.DistributionType.Payment)

		PayablesInvoiceDistributionDistributionRel is a PayablesInvoiceDistribution set
			Instance Selection
				where (related.DistributionType.Distribution)

		NonPostedDistributionRel is a PayablesInvoiceDistribution set		
			Instance Selection
				where (related.DistributionType.Distribution
				and    !related.Status.Historical)

		CalculatedMatchTaxDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			valid when (!MatchProcessType.Expense)
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxCode			= TaxCode)

		TaxablePayablesInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxSequenceNumber not entered
				and   (related.TaxIndicator.Exempt
				or     related.TaxIndicator.Taxable))

		PayablesInvoiceDistributionDistributionTypeDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType	= "D")

		PayablesInvoiceDistributionsAndNonTableTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType	= "D"
				and   !related.VATReverse
				and    related.TaxSequenceNumber not entered
				and   !related.IsAccruedVATTax
				and   !related.IsAccruedTaxDistribution)	

		PayablesInvoiceDistributionsDisplayOnInvoiceRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where ((related.DistributionType	= "D"
				or	   related.DistributionType  = "I")			
				and   !related.VATReverse
				and    related.TaxSequenceNumber not entered)	

		PayablesInvoiceDistributionsCreateAccrualFundAccountingRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType	= "D"
				and  ((!related.VATReverse
				and     related.TaxSequenceNumber not entered
				and    !related.IsAccruedVATTax
				and    !related.IsAccruedTaxDistribution
				or    (related.IsLinkTaxDist
				and    related.TaxType.Invoiced))))

		PayablesInvoiceDistributionsTableTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionType.Distribution
				and   (related.IsAccruedVATTax
				or     related.IsAccruedTaxDistribution))	

		PayablesInvoiceDistributionsRequiringCustodialAccountRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9	
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where ((related.DistributionType = "D"
				or     related.DistributionType  = "I")
				and    !related.VATReverse
				and    related.TaxSequenceNumber not entered
				and    related.CustodialAccountRequiredForFund)

		TotalInvoicedTaxDistributionRel is a PayablesInvoiceDistribution set
			Instance Selection
				where (related.IsInvoicedTaxDistribution)

		InvoicedTaxDistributionRel is a PayablesInvoiceDistribution set
			Instance Selection
				where (related.IsInvoicedTaxDistribution		
				and      related.PurchaseOrderLine entered)

		ExpenseInvoicedTaxDistributionRel is a PayablesInvoiceDistribution set		
			Instance Selection
				where (related.IsInvoicedTaxDistribution
				and    related.PurchaseOrderLine !entered)

		MatchTaxDistributionRel is a PayablesInvoiceDistribution set
			Instance Selection
				where (related.TaxCode entered
				and    related.PurchaseOrderLine entered)

		PayablesInvoiceDistributionAccrualAccountRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.DistributionAccount	= ProcessLevel.ReceiptAccrualAccount
				or     related.DistributionAccount	= MatchCompanyRel.ReceiptAccrualAccount)

		PayablesInvoiceHistorySuffixRel
			one-to-many relation to PayablesInvoiceHistory
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.Vendor 				= Vendor
			Instance Selection
				where (related.PayablesInvoiceHistory.Invoice 	= Invoice
				and    related.PayablesInvoiceHistory.Suffix 	= Suffix)

		PayablesInvoiceHistoryRel
			one-to-many relation to PayablesInvoiceHistory
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.Vendor 				= Vendor
			Instance Selection
				where (related.PayablesInvoiceHistory.Invoice 	= Invoice
				and    related.PayablesInvoiceHistory.Suffix	!entered)

		PayablesInvoiceHistoryRecurSuffixRel
			one-to-many relation to PayablesInvoiceHistory
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.Vendor 				= Vendor
			Instance Selection
				where (related.PayablesInvoiceHistory.Invoice 			= Invoice
				and    related.PayablesInvoiceHistory.Suffix 			= 1
				and    related.PayablesInvoiceHistory.CancelSequence	= CancelSequence)

		PaymentsBeyondOpenStatusRel is a PayablesInvoicePayment set		
			Instance Selection
				where (related.PayablesInvoicePayment.VoidSequence	= blank
				and	   related.Status								> 1)

		PaymentGainLossHasBeenDoneRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.PayablesInvoicePayment.VoidSequence	= blank
				and	   related.LastCurrencyRevaluationDate			entered
				and	   related.Status								> 2)

		MultiplePayablesInvoicePaymentRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.PayablesInvoicePayment.VoidSequence	= blank)

		PaymentsHaveBeenMadeRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.CancelSequence						= blank
				and    related.PayablesInvoicePayment.VoidSequence	= blank
				and	   related.Status								> 1)

		PaymentsHaveBeenScheduledRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.CancelSequence						= blank
				and    related.PayablesInvoicePayment.VoidSequence	= blank
				and	   related.Status								= 1
				and    related.CashRequirementsResult				entered)

		PaymentsInPayCycleRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.CancelSequence						= blank
				and    related.PayablesInvoicePayment.VoidSequence	= blank
				and	  (related.Status								= 1
				or	   related.Status								= 2)
				and    related.CashRequirementsResult				entered)

		PaymentsHaveBeenAppliedRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.PayablesInvoicePayment.VoidSequence	= blank
				and   (related.TransactionNumber	entered
				or     related.TransactionIDNumber	entered))

		CreditNotAppliedRel is a PayablesInvoicePayment set		
			Instance Selection
				where (related.CancelSequence						= blank
				and    related.PayablesInvoicePayment.VoidSequence	= blank
				and	  !related.IsAppliedToInvoice)

		PaymentsNotHistoricalRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.PayablesInvoicePayment.VoidSequence	= blank
				and	   related.Status								< 9)

		PayablesInvoicePaymentStatusRel is a PayablesInvoicePayment set		
			Instance Selection
				where (related.Status < 3)

		HistoricalPayablesInvoicePaymentRel is a PayablesInvoicePayment set		
			Instance Selection
				where (related.Status = 9)

		OpenPayablesInvoicePaymentRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.CancelSequence						= blank
				and    related.PayablesInvoicePayment.VoidSequence	= blank
				and	   related.Status								< 2) 

		PayablesInvoicePaymentRel is a PayablesInvoicePayment set

		PayablesInvoicePaymentIsOnHoldRel is a PayablesInvoicePayment set
			Instance Selection
				where (related.IsOnHold)

		FirstPaymentRel
			one-to-one relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PayablesInvoicePayment.PaymentSequence	= FirstPaymentSequence
				related.PayablesInvoicePayment.VoidSequence		= blank

		PayablesInvoiceTaxRel		
			one-to-one relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
				related.PayablesInvoiceDistribution	= blank

		PayablesInvoiceTaxDistributionsRel		
			one-to-many relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection	
				where (related.PayablesInvoiceDistribution entered)

		ActorAgentSupplierGroupRel	
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
				related.SupplierGroup = actor.agent(SupplierSourceId).SupplierGroup

		PayablesInvoiceRetainageDistributionsRel
			classic name is APDISTPAY
			one-to-many relation to PayablesInvoiceRetainageDistribution
			Field Mapping uses symbolic key
				related.Company	= Company
				related.Vendor	= Vendor
			Instance Selection
				where (related.PayablesInvoiceRetainageDistribution.PayablesInvoice = PayablesInvoice)

		PayablesOnHoldPaymentRel
			one-to-many relation to PayablesOnHold		
			Field Mapping uses Set5
				related.HoldRecordType	= "P"
				related.VendorGroup		= Company.VendorGroup
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice

		PayablesOnHoldPaymentRel2                                               
			one-to-many relation to PayablesOnHold		
			Field Mapping uses Set5
				related.HoldRecordType	= "P"
				related.VendorGroup		= Company.VendorGroup
				related.Company			= Company
				related.Vendor			= LocalVendor
				related.PayablesInvoice	= PayablesInvoice

		PrepaidPaymentsOnHoldRel
			one-to-many relation to PayablesOnHold		
			Field Mapping uses Set5
				related.HoldRecordType	= "P"
				related.VendorGroup		= Company.VendorGroup
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.HoldCode = Company.VendorGroup.PrepaymentHoldCode)

		DefaultProcessLevelRel
			one-to-many relation to PayablesProcessLevel
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where (related.DefaultProcessLevel)

		ContractProcessLevelRel
			one-to-one relation to PayablesProcessLevel
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesProcessLevel	= LocalProcessLevel

		ContractParticipantRestrictionsRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup 					= ServiceContract.ContractGroup
				related.Contract						= ServiceContract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company entered
				or     related.ContractParticipant.ParticipantLocation.Location entered)

		ContractParticipantCompanyRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup 					= ServiceContract.ContractGroup
				related.Contract						= ServiceContract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company  = Company)

		ContractParticipantLocationsRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup 					= ServiceContract.ContractGroup
				related.Contract						= ServiceContract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company  = Company
				and   (related.ContractParticipant.ParticipantLocation.Location not entered
				or 	   related.ContractParticipant.ParticipantLocation.Location = Location))

		TaxCodeAndAOCDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				or     related.AddOnCharge entered)

		PayablesTaxDetailRel
			one-to-one relation to PayablesTaxDetail
			delete cascades
			Field Mapping uses symbolic key
				related.Company                 	= Company
				related.PayablesInvoice				= PayablesInvoice
				related.PayablesInvoiceDistribution	= LocalTaxDistribution

		ProcurementCardRequestsRel				
			one-to-many relation to ProcurementCardRequest
			Field Mapping uses Set2
				related.ProcurementCardNumber	= FirstPurchaseOrder.ProcurementCardNumber

		ProcurementCardProgramRel				
			one-to-one relation to ProcurementCardProgram
			Field Mapping uses symbolic key
				related.ProcurementGroup		= Company.VendorGroup
				related.ProcurementCardProgram	= LocalProcCardProgram

		PurchaseOrderReceiptInvoiceLinkSymbKeyRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
			Instance Selection
				where  (related.Company 				= Company
				and 	related.Vendor 					= Vendor
				and		related.PayablesInvoice.Invoice	= Invoice)

		PurchaseOrderReceiptInvoiceLinkPurgeSymbKeyRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
			Instance Selection
				include deleted records
				where  (related.Company 				= Company
				and 	related.Vendor 					= Vendor
				and		related.PayablesInvoice			= PayablesInvoice)

		PurchaseOrderReceiptInvoiceLinkSet3Rel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
			Instance Selection
				where  (related.Company 				= Company		
				and 	related.Vendor 					= Vendor		
				and		related.PayablesInvoice.Invoice	= Invoice)

		VendorDiversityGenRel
			classic name is APVENDIV
			one-to-many relation to VendorDiversity
			Field Mapping uses ByDateDescending
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = Vendor
				related.VendorLocation = Location

		PayablesInvoiceDetailZeroSuffixRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.Suffix = 0)

		PurchasingCompanyRel
			classic name is POCOMPANY
			one-to-one relation to PurchasingCompany
			Field Mapping uses symbolic key
				related.Company = Company

		ReceiptLinkMatchIDRel
			classic name is POMATCHOBJ
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company                                       = Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID = MatchObjectID

		PurchaseOrderReceiptInvoiceLinkRel
			classic name is POMATCHOBJ
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company                                       = Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID = MatchObjectID
			Instance Selection
				where (related.PurchaseOrderReceiptInvoiceLink.AddOnCharge not entered)

		PurchaseOrderReceiptInvoiceLinkAOCRel
			classic name is POMATCHOBJ
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company                                       = Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID = MatchObjectID
			Instance Selection
				where (related.PurchaseOrderReceiptInvoiceLink.AddOnCharge entered)

		VendorPurchaseOrdersRel
			classic name is PURCHORDER
			one-to-many relation to PurchaseOrder
			Field Mapping uses Set11
				related.Company                 = Company
				related.Vendor					= Vendor

		VendorContractsRel
			one-to-many relation to Contract 
			Field Mapping uses ByVendor
				related.ContractGroup			= Company.VendorGroup
				related.Vendor 					= Vendor

		LocalPurchaseOrderRel
			one-to-many relation to PurchaseOrder
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.PurchaseOrder			= LocalPurchaseOrder

		SupplierRel
			one-to-many relation to Supplier
			Field Mapping uses ByVendor
				related.SupplierGroup     = Company.VendorGroup
				related.Vendor            = Vendor

		PortalSupplierRel
			one-to-one relation to Supplier
			Field Mapping uses symbolic key
				related.SupplierGroup	= actor.agent(SupplierSourceId).SupplierGroup
				related.Supplier		= actor.agent(SupplierSourceId).Supplier

		SupplierGroupRel
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
				related.SupplierGroup   = Company.VendorGroup

		SupplierMessageDialogRel
			one-to-many relation to SupplierMessageDialog
			Field Mapping uses symbolic key
				related.SupplierGroup				= Company.VendorGroup


			Instance Selection
				where (related.SupplierContactMessage.OriginatingCompany	= Company
				and    related.SupplierContactMessage.OriginatingInvoice    = PayablesInvoice)

		PurchaseOrderLineSourceRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses Set1
				related.Company				= Company
				related.PurchaseOrder		= LocalPurchaseOrder
				related.PurchaseOrderLine 	= LocalLineNbr

		PurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= LocalPurchaseOrder
				related.PurchaseOrderLine 	= LocalLineNbr

		PurchaseOrderLineInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company             = Company
				related.Vendor              = Vendor
				related.PayablesInvoice     = PayablesInvoice
				related.PurchaseOrder       = LocalPurchaseOrder
				related.PurchaseOrderLine   = LocalLineNbr

		PurchaseOrderLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key	
				related.Company			= Company
    			related.PurchaseOrder	= FirstPurchaseOrder
    		Instance Selection
    			where (related.LineAddOnCharge
    			and   (!related.HeaderSpreadAddOnCharge
    			or     MatchProcessType.AOCOnly))

		PurchaseOrderLinesToMatchRel    
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= FirstPurchaseOrder
			Instance Selection
				where (related.AllowMatchCreateDetail)

		SCPurchaseOrderLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= FirstPurchaseOrder

		PurchaseOrderAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company			= Company
			Instance Selection
				where  (related.LinkedToContextInvoice
				and     related.PurchaseOrderLine not entered)

		PurchaseOrderAddOnChargesForVendorRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= FirstPurchaseOrder
			Instance Selection
				where  (related.Vendor = Vendor)

		PurchaseOrderSpreadAddOnChargeRel
			one-to-many relation to PurchaseOrderSpreadAddOnCharge
			Field Mapping uses ByVendor
				related.Company 									= Company
				related.Vendor										= Vendor

		PurchaseOrderReceiptsRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set3
				related.Company 				= Company
				related.PurchaseOrder			= FirstPurchaseOrder
			Instance Selection
				where (related.PurchaseFromLocation	= FirstPurchaseOrder.PurchaseFromLocation)

		PurchaseOrderReceiptsSupplierRel  
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set3
				related.Company 				= Company
				related.PurchaseOrder			= FirstPurchaseOrder
			Instance Selection
				where (related.PurchaseFromLocation	= FirstPurchaseOrder.PurchaseFromLocation)

		PurchaseOrderReceiptSet3Rel
			classic name is PORSET3
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set3
				related.Company                 = Company
				related.PurchaseOrder			= FirstPurchaseOrder


		PurchaseOrderReceiptVendorSet9Rel
			classic name is PORSET9-VEN
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company = Company
				related.Vendor  = Vendor

		PurchaseOrderReceiptsForInvoiceRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company       	= Company
				related.Vendor  		= Vendor
			Instance Selection
				where (related.LinkedToContextInvoice)

		OpenReceiptRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company				= Company
				related.Vendor				= Vendor
				related.PurchaseOrder		= FirstPurchaseOrder

		PurchaseOrderReceiptLineRel
			classic name is PORECLINE
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set11
				related.Company       = Company
				related.MatchObjectID = MatchObjectID

		PurchaseOrderReceiptLinesForInvoiceRel
			classic name is PORECLINE
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses ByCompanyVendor
				related.Company       	= Company
				related.Vendor  		= Vendor
			Instance Selection
				where (related.LinkedToContextInvoice)

		LocalPurchaseOrderReceiptLineRel
			one-to-one relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company       				= Company
				related.PurchaseOrderReceipt 		= LocalReceipt
				related.PurchaseOrderReceiptLine 	= LocalReceiptLine

		PrepaidPurchaseOrderReceiptLineRel 
			one-to-many relation to PurchaseOrderReceiptLine
				Field Mapping uses Set12
					related.Company						= Company
					related.PurchaseOrderReceipt		= LocalReceipt
					related.MatchDetailKey				= LocalMatchDetailKey

		PurchaseOrderReceiptAddOnChargesForInvoiceRel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses symbolic key
				related.Company       	= Company
			Instance Selection
				where (related.Vendor  		= Vendor
				and    related.LinkedToContextInvoice)

		PurchaseOrderReceiptAddOnChargesByMatchIDRel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses symbolic key
				related.Company       	= Company
			Instance Selection
				where (related.Vendor  		= Vendor
				and    related.LinkedToContextInvoice)

		PayablesInvoiceSpreadAOCHistoryRel
			one-to-many relation to PayablesInvoiceSpreadAddOnChargeHistory
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.Vendor											= Vendor
			Instance Selection
				where (related.PayablesInvoiceHistory.Invoice 			= Invoice
				and    related.PayablesInvoiceHistory.Suffix 			= Suffix
				and    related.PayablesInvoiceHistory.CancelSequence	= CancelSequence)

		ActivePayablesProcessingMonitorRel
			one-to-many relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
			Instance Selection
				where (related.PayablesProcessingMonitor.PayGroup  		= PayGroup
				and    related.PayablesProcessingMonitor.RunProgram		= LocalRunProgram
				and    related.Status.RunningOrWaitingRecovery)

		ActivePayablesProcessingMonitorByCompanyRel										
			one-to-many relation to PayablesProcessingMonitor
			Field Mapping uses Set2
				related.PayablesProcessingMonitor.Company  			= Company
			Instance Selection
				where (related.PayablesProcessingMonitor.RunProgram	= LocalRunProgram)

		TaxConfigurationRel						
			one-to-one relation to TaxConfiguration
			Field Mapping uses symbolic key
				related.TaxConfiguration		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup

	   	TaxAttributesRel		
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	 
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	
				related.TaxEntity 				= GeneralLedgerCompanyRel.AccountingEntity			

		TaxRateRel								
			one-to-many relation to TaxRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxCode					= TaxCode
				related.ProductTaxCategory		= TransientTaxCategory
			Instance Selection
				where (related.EffectiveDate 	<= LocalEffectiveDate)

		LocalTaxRateRel							
			one-to-many relation to TaxRate
			Field Mapping uses Set4
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxCode					= LocalTaxCode
			Instance Selection
				where (related.EffectiveDate 	 <= LocalEffectiveDate
				and    related.ProductTaxCategory = TransientTaxCategory)

		PurchaseFromVendorLocAddressRel
			one-to-one relation to VendorAddress
			Field Mapping uses symbolic key
				related.VendorGroup                     = Company.VendorGroup
				related.Vendor                          = Vendor
				related.VendorLocation                  = PurchaseFromLocation
				related.VendorContact.VendorContactCode = blank
				related.VendorContact.ContactLevel      = blank

		InvoiceVendorAddressRel
			one-to-one relation to VendorAddress
			Field Mapping uses symbolic key
				related.VendorGroup                     = Company.VendorGroup
				related.Vendor                          = Vendor
				related.VendorLocation                  = blank
				related.VendorContact.VendorContactCode = blank
				related.VendorContact.ContactLevel      = blank

		PayVendorAddressRel
			classic name is APPAYVENADDR
			one-to-one relation to VendorAddress
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor							= PayVendor
				related.VendorLocation					= blank
				related.VendorContact.VendorContactCode	= blank
				related.VendorContact.ContactLevel		= blank

		VendorBalanceRel
			one-to-one relation to VendorBalance
			Field Mapping uses symbolic key
				related.VendorGroup		= Company.VendorGroup
				related.Vendor			= Vendor
				related.VendorLocation	= LocalVendorBalanceLocation
				related.Company			= Company

		VenLocVendorCertificationRel
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup		= Vendor.VendorGroup
				related.Vendor			= Vendor
				related.VendorLocation	= RemitToCode

		VenLocInvalidDateVendorCertificationRel		
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Vendor.VendorGroup
				related.Vendor      	= Vendor
				related.VendorLocation	= RemitToCode
			Instance Selection
				where (related.CertificationEffectiveDate  > InvoiceDate
				or     related.CertificationExpirationDate < InvoiceDate)

		VenLocValidateVendorCertificationRel
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Vendor.VendorGroup
				related.Vendor      	= Vendor
				related.VendorLocation	= RemitToCode
			Instance Selection
				where (related.Validated
				and    related.CertificationEffectiveDate  <= InvoiceDate	
				and    related.CertificationExpirationDate >= InvoiceDate)	

		BlankVenLocVendorCertificationRel
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Vendor.VendorGroup
				related.Vendor      	= Vendor
				related.VendorLocation	= blank

		InvalidDateVendorCertificationRel		
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Vendor.VendorGroup
				related.Vendor      	= Vendor
				related.VendorLocation	= blank
			Instance Selection
				where (related.CertificationEffectiveDate  > InvoiceDate
				or     related.CertificationExpirationDate < InvoiceDate)

		ValidateVendorCertificationRel
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Vendor.VendorGroup
				related.Vendor      	= Vendor
				related.VendorLocation	= blank
			Instance Selection
				where (related.Validated
				and    related.CertificationEffectiveDate  <= InvoiceDate	
				and    related.CertificationExpirationDate >= InvoiceDate)	

		ValidateVendorCertificationMaxSpendExistsRel		
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Company.VendorGroup
				related.Vendor      	= PayVendor
				related.VendorLocation	= RemitToCode
			Instance Selection
				where (related.Validated
				and    related.CertificationEffectiveDate  <= DueDate
				and   (related.CertificationExpirationDate >= DueDate
				or     related.CertificationExpirationDate !entered))

		ValidateVendorCertificationByDueDateRel		
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup 	= Company.VendorGroup
				related.Vendor      	= PayVendor
				related.VendorLocation	= RemitToCode
			Instance Selection
				where (related.Validated
				and    related.CertificationEffectiveDate  <= DueDate
				and    related.CertificationExpirationDate >= DueDate)
		
		RemitToVendorCompanyDefaultRel
			one-to-one relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= RemitToCode
				related.Company 						= Company

		PayVendorCompanyDefaultRel						
			one-to-one relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= PayVendor
				related.VendorLocation					= blank
				related.Company 						= Company

		VendorCompanyDefaultRel
			one-to-one relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= blank
				related.Company 						= Company

		VendorLocationDiversityRel
			one-to-many relation to VendorDiversity
			Field Mapping uses ByDateDescending
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= RemitToCode
				related.DiversityCode					= DiversityCode

		VendorDiversityRel
			one-to-many relation to VendorDiversity
			Field Mapping uses ByDateDescending
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= blank
				related.DiversityCode					= DiversityCode

		VendorLocationRel
			classic name is APVENLOCPURCH
			one-to-one relation to VendorLocation
			valid when (HasPurchaseFromLocation)
			required
			Field Mapping uses symbolic key
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = Vendor
				related.VendorLocation = PurchaseFromLocation

		VendorLocationRemitRel
			classic name is APVENLOCREMIT
			one-to-one relation to VendorLocation
			valid when (HasRemitToCode)
			required
			Field Mapping uses symbolic key
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = PayVendor
				related.VendorLocation = RemitToCode

		VendorLocationRemitToCodesRel
			one-to-many relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = PayVendor
			Instance Selection
				where (!related.LocationType.PurchaseFrom
				and     related.Status.Active)

		VendorReturnRel
			classic name is PORETURNHD
			one-to-one relation to VendorReturn
			Field Mapping uses symbolic key
				related.Company      = Company
				related.VendorReturn = VendorReturn

		VendorReturnsByCompanyVendorRel
			classic name is PORETURNHD
			one-to-many relation to VendorReturn
			Field Mapping uses Set2
				related.Company     = Company
				related.Vendor 		= Vendor
			Instance Selection
				where (related.CreditNeeded)

		VendorReturnLineDistRel
			classic name is PORETURNHD
			one-to-many relation to VendorReturnLineDistribution
			Field Mapping uses symbolic key
				related.Company      = Company
				related.VendorReturn = VendorReturn

		UnreleasedDistributionsRel is a PayablesInvoiceDistribution set		
			Instance Selection
				where (related.Status.Unreleased)

   		LocalContractRel
   			one-to-one relation to Contract
   			Field Mapping uses symbolic key
   				related.ContractGroup       = Company.VendorGroup
   				related.Contract            = LocalContract

   		ContractRebateDueInvoiceLinesRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses ByInvoiceNbr
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice

		ContractRebateSupplierQualifiersRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses AllForSupplier
				related.ContractGroup			= Company.VendorGroup.ProcurementGroupRel.ProcurementGroup
			Instance Selection
				where (related.Vendor			= Vendor)

		ContractRebateDuesRel
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup			= LocalContractGroup
				related.Contract				= LocalContract
				related.ContractRebateType		= LocalContractRebateType
				related.ContractRebate			= blank
			Instance Selection
				where (related.ContractRebateDue	>= InvoiceDate)

		ContractRebateDueInvoiceLineRel
			one-to-one relation to ContractRebateDueInvoiceLine
			Field Mapping uses symbolic key
				related.ContractGroup						= LocalContractGroup
				related.Contract							= LocalContract
				related.ContractRebateType					= LocalContractRebateType
				related.ContractRebate						= blank
				related.ContractRebateDue 					= LocalContractRebateDue
				related.ContractRebateQualifier					= LocalContractRebateQualifier
				related.Company								= Company
				related.PayablesInvoice						= PayablesInvoice
				related.PurchaseOrder						= blank
				related.PurchaseOrderLine					= blank
				related.ContractLine                        = blank
				related.ContractRebateDueInvoiceLine		= 1

		InvoiceLineFactRel
			one-to-one relation to InvoiceLineFact
			Field Mapping uses ByPurchorder
				related.CompanyPurchaseOrder.PurchasingCompany			= LocalPoCompany
				related.CompanyPurchaseOrder.PurchaseOrder				= LocalPurchaseOrder
				related.LineNumber										= LocalLineNbr
				related.LineSequenceNumber								= LocalLineSeqNbr
				related.Company											= Company
				related.PayablesInvoice									= PayablesInvoice


		AllInvoiceLineFactsForVendorGroupRel
			one-to-many relation to InvoiceLineFact
			Field Mapping uses ByInvoice
				related.ProcurementGroup		= Company.VendorGroup.ProcurementGroupRel.ProcurementGroup

		PurchaseOrderLinesRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company								= Company
				related.PurchaseOrder						= LocalPurchaseOrder
				related.PurchaseOrderLine					= LocalLineNbr

		InvoiceLineFactsRel
			one-to-many relation to InvoiceLineFact
			Field Mapping uses ByInvoice
				related.ProcurementGroup	= Company.VendorGroup
				related.Company				= Company
				related.Vendor				= Vendor
				related.Invoice				= Invoice
				related.Suffix				= Suffix

		VendorReturnLinesRel
			one-to-many relation to VendorReturnLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.VendorReturn            = VendorReturn
			Instance Selection
				where (related.OriginalPurchaseOrder entered)

		LocalFinanceResourceInvApprovalRel
			one-to-many relation to FinanceResourceInvApproval
			Field Mapping uses ByRoleAndCategory
				related.InvoiceApprovalAuthCode	= first LocalInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode
				related.InvoiceRoutingCategory	= RoutingCategory

		TransientLocalFinanceResourceInvApprovalRel
			one-to-many relation to FinanceResourceInvApproval
			Field Mapping uses ByRoleAndCategory
				related.InvoiceApprovalAuthCode	= first TransientLocalInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode
				related.InvoiceRoutingCategory	= RoutingCategory

		TransientFinanceResourceInvApprovalRel		
			one-to-many relation to FinanceResourceInvApproval
			Field Mapping uses ByRoleAndCategory
				related.InvoiceApprovalAuthCode	= TransientInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode
				related.InvoiceRoutingCategory	= RoutingCategory

		LocalInvoiceRoutingCodeLevelRel
			one-to-many relation to InvoiceRoutingCodeResource
			Field Mapping uses ByApprovalLevel
				related.VendorGroup			= Company.VendorGroup
				related.InvoiceRoutingCode	= RoutingCode
				related.ApprovalLevel		= LocalRoutingApprovalLevel

		TransientLocalInvoiceRoutingCodeLevelRel	
			one-to-many relation to InvoiceRoutingCodeResource
			Field Mapping uses ByApprovalLevel
				related.VendorGroup			= Company.VendorGroup
				related.InvoiceRoutingCode	= TransientRoutingCode
				related.ApprovalLevel		= LocalRoutingApprovalLevel

		TransientInvoiceRoutingCodeLevelRel		
			one-to-many relation to InvoiceRoutingCodeResource
			Field Mapping uses ByApprovalLevel
				related.VendorGroup			= Company.VendorGroup

				related.InvoiceRoutingCode	= DerivedNextTransRoutingCode	
				related.ApprovalLevel		= TransientRoutingApprovalLevel

		LocalNextInvoiceRoutingCodeLevelRel
			one-to-many relation to InvoiceRoutingCodeResource
			Field Mapping uses ByApprovalLevel
				related.VendorGroup			= Company.VendorGroup
				related.InvoiceRoutingCode	= RoutingCode
				related.ApprovalLevel		= LocalRoutingApprovalLevel + 1

		LocalNextActiveInvoiceRoutingCodeLevelRel		
			one-to-many relation to InvoiceRoutingCodeResource
			Field Mapping uses ByApprovalLevel
				related.VendorGroup			= Company.VendorGroup
				related.InvoiceRoutingCode	= RoutingCode
			Instance Selection
				where (related.ApprovalLevel > LocalRoutingApprovalLevel
				and   (related.ActiveResource
				or     related.ActiveResourceRole))

		TransientNextActiveInvoiceRoutingCodeLevelRel
			one-to-many relation to InvoiceRoutingCodeResource
			Field Mapping uses ByApprovalLevel
				related.VendorGroup			= Company.VendorGroup
				related.InvoiceRoutingCode	= TransientRoutingCode
			Instance Selection
				where (related.ApprovalLevel > LocalRoutingApprovalLevel
				and   (related.ActiveResource
				or     related.ActiveResourceRole))

		PfiConfigurationFromEmailPropertyRel
			one-to-one relation to PfiConfigurationProperty
			Field Mapping uses symbolic key
				related.PfiConfiguration			= "main"
				related.PfiConfigurationProperty	= "FinanceAdminFromEmailAddress"

		PfiConfigurationGroupFromEmailPropertyRel
			one-to-one relation to PfiConfigurationProperty
			Field Mapping uses symbolic key
				related.PfiConfiguration			= "main"
				related.PfiConfigurationProperty	= "FinanceGroupFromEmailAddress"

		ActorProxyRel
			one-to-many relation to ActorProxy
			Field Mapping uses symbolic key
				related.Actor = LocalProxyActor

		FinanceResourceActorRel			
			one-to-many relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization	= FinanceEnterpriseGroupRel.HROrganization	
			Instance Selection
				where (related.FinanceResourceActor = LocalActor)


		LocalFinanceResourceActorRel	
			one-to-one relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization		= FinanceEnterpriseGroupRel.HROrganization	
				related.FinanceResource 	= LocalActor.agent(Employee).Employee

		ParentAgentRel					
			one-to-one relation to ParentAgent
			Field Mapping uses ActorSet
				related.Actor = LocalActor

		TransientParentAgentRel			
			one-to-one relation to ParentAgent
			Field Mapping uses ActorSet
				related.Actor = TransientActor

		AgentRel						
			one-to-many relation to Agent
			Field Mapping uses ParentSet
				related.ParentAgent = ParentAgentRel.ParentAgent
			Instance Selection
				where (related.BusinessObjectRef.BusinessClassName = "Employee")

		TransientAgentRel				
			one-to-many relation to Agent
			Field Mapping uses ParentSet
				related.ParentAgent = TransientParentAgentRel.ParentAgent
			Instance Selection
				where (related.BusinessObjectRef.BusinessClassName = "Employee")

		FinanceResourceTeamMemberRel
			one-to-one relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam						= ResponsibleTeam
				related.FinanceTeamMember.TeamMember	= FinanceResource

		FinanceResourceApprovalRoleMemberRel
			one-to-many relation to FinanceResourceInvApproval
			Field Mapping uses ByResource
				related.FinanceResource			= FinanceResource
				related.InvoiceApprovalAuthCode	= ResponsibleRole
				related.InvoiceRoutingCategory	= RoutingCategory

		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = UniqueID

		InvoiceAssignmentRuleRel
			one-to-many relation to InvoiceAssignmentRule
			Field Mapping uses ByPriority
				related.VendorGroup = Company.VendorGroup
			Instance Selection
				where (related.Active)

	 	PayablesInvoiceDocumentInvoiceTypeRel
			one-to-many relation to PayablesInvoiceDocument
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.DocumentType.Invoice		
				and	   related.Attachment.MimeType entered)	

	 	PayablesInvoiceDocumentNonInvoiceTypeRel
			one-to-many relation to PayablesInvoiceDocument
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.DocumentType != 1
				and	   related.Attachment.MimeType entered)	

		ProcessingTeamMemberRel
			one-to-one relation to FinanceTeamMember
			Field Mapping uses symbolic key

				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam						= ProcessingTeam
				related.FinanceTeamMember.TeamMember	= actor.agent(Employee).Employee

		FinanceTeamMemberRel
			one-to-one relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam						= ResponsibleTeam
				related.FinanceTeamMember.TeamMember	= actor.agent(Employee).Employee

   		FinanceResourceRel
			one-to-one relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization		= FinanceEnterpriseGroupRel.HROrganization	
				related.FinanceResource  	= actor.agent(Employee).Employee

		ApprovalRoleMemberRel
			one-to-many relation to FinanceResourceInvApproval
			Field Mapping uses ByResource
				related.FinanceResource			= actor.agent(Employee).Employee
				related.InvoiceApprovalAuthCode	= ResponsibleRole
				related.InvoiceRoutingCategory	= RoutingCategory

		FinanceResourceInvApprovalRel
			one-to-many relation to FinanceResourceInvApproval
			Field Mapping uses ByRoleAndCategory
				related.InvoiceApprovalAuthCode	= first CurrentInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode
				related.InvoiceRoutingCategory	= RoutingCategory

		CurrentInvoiceRoutingCodeLevelRel
			one-to-many relation to InvoiceRoutingCodeResource
			Field Mapping uses ByApprovalLevel
				related.VendorGroup			= Company.VendorGroup
				related.InvoiceRoutingCode	= RoutingCode
				related.ApprovalLevel		= RoutingApprovalLevel

		HistoricalByCurrentResourceRel
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.CurrentResource
				and	   related.Resource != ResponsiblePerson)

		PayablesInvoiceErrorLocalRel is a PayablesInvoiceError set		
			Instance Selection
				where (related.ErrorType = LocalErrorType)

		PayablesInvoiceErrorRel is a PayablesInvoiceError set

		PayablesInvoiceAuditRel is a PayablesInvoiceAudit set

		PayablesInvoiceDocumentRel is a PayablesInvoiceDocument set

		PayablesInvoiceCommentRel is a PayablesInvoiceComment set

		SupplierPayablesInvoiceCommentsRel is a PayablesInvoiceComment set
			Instance Selection
				where (related.SupplierCanView)

		NonInvoiceNoteCommentRel is a PayablesInvoiceComment set
			Instance Selection
				where (!related.Type.InvoiceNote)

		NonAccruedTaxDistributionsRel	is a PayablesInvoiceDistribution set	
			Instance Selection
				where (!related.DistributionType.ExpenseAccrual
				and	  ((related.TaxCode not entered
				or      (related.TaxCode entered
				and    related.TaxIndicator.Taxable))	
				or		  related.IsInvoicedTaxDistribution))	

		MatchNonAccruedTaxDistributionsRel	is a PayablesInvoiceDistribution set
			Instance Selection
				where (!related.DistributionType.ExpenseAccrual
				and    related.MatchCreated not entered
				and	  (related.TaxCode not entered
				or       related.IsInvoicedTaxDistribution))	

	 	PayablesInvoicePreventSubmitErrorRel
			one-to-many relation to PayablesInvoiceError
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (!related.ErrorLevel.Warning)	

		PayablesInvoicePreventApprovalErrorRel				
			one-to-many relation to PayablesInvoiceError
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ErrorType.SabrixTaxSevereError)	

		InvoiceRoutingRuleRel
			one-to-many relation to InvoiceRoutingRule
			Field Mapping uses ByPriority
				related.VendorGroup = Company.VendorGroup
			Instance Selection
				where (related.Active
				and	   PayablesInvoice within related.ApproverAssignmentRule

				and	  !related.HasChild
				and  ((MatchProcessType.Expense
				and   (related.UseResponsibilityMatrix
				or    !related.UseResponsibilityMatrix))
				or   (!MatchProcessType.Expense
				and   !related.UseResponsibilityMatrix)))

		LocalInvoiceRoutingRuleByParentRel 
			one-to-many relation to InvoiceRoutingRule
			Field Mapping uses ByParentPriorityKey
				related.VendorGroup					= Company.VendorGroup
				related.ParentInvoiceRoutingRule	= LocalParentInvoiceRoutingRule
			Instance Selection
				where (related.Active
				and	   PayablesInvoice within related.ApproverAssignmentRule
				and  ((MatchProcessType.Expense
				and   (related.UseResponsibilityMatrix
				or    !related.UseResponsibilityMatrix))
				or   (!MatchProcessType.Expense
				and   !related.UseResponsibilityMatrix)))

		LocalInvoiceRoutingRuleRel				
			one-to-one relation to InvoiceRoutingRule
			Field Mapping uses symbolic key
				related.VendorGroup			= Company.VendorGroup
				related.InvoiceRoutingRule	= LocalInvoiceRoutingRule

		FinanceTeamMembersRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam				= ResponsibleTeam

		PreviousAssignedPayablesInvoiceAuditRel		
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Status.Assigned
				and    related.RoutingApprovalLevel	= RoutingApprovalLevel
				and   (related.Workunit				= Workunit
				or     related.Workunit !entered))

		ApprovedPayablesInvoiceAuditRel
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where ((related.Status.Approved
				and    (related.Workunit	= Workunit		
				or      related.Workunit !entered))			
				or	    related.Status.AutoApproved
				or	    related.Status.ManuallyApproved)

		ApprovedPayablesInvoiceAudit2Rel
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Status.Approved
				or	   related.Status.AutoApproved
				or	   related.Status.ManuallyApproved)

		RejectedPayablesInvoiceAuditRel
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Status.Rejected
				or	   related.Status.ManuallyRejected)

		ReroutedPayablesInvoiceAuditRel
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Status.Rerouted)

		CancelledPayablesInvoiceAuditRel
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Status.Cancelled)

		MiscPayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company     		= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrderLine not entered
				and    related.ContractLine not entered)

		NonMiscPayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company     		= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrderLine entered
				or     related.ContractLine entered) 

		LineNotSpreadPayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company     		= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				where ((related.PurchaseOrderLine entered
				or      related.ContractLine entered)
				and    !related.HeaderSpreadAddOnCharge) 

		AllowanceAOCRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company     		= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				where (related.AddOnCharge.AddOnChargeType.Allowance)

		PayablesInvoiceSpreadAddOnChargeRel is a PayablesInvoiceSpreadAddOnCharge set
		
		PayablesInvoiceSpreadAddOnChargePurgeRel
			one-to-many relation to PayablesInvoiceSpreadAddOnCharge
			Field Mapping uses symbolic key
				related.Company     		= Company
				related.PayablesInvoice		= PayablesInvoice			
			Instance Selection
				include deleted records

		PayablesServiceInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company 		= Company
				related.Vendor  		= Vendor
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where (related.ItemType.Service)

		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam						= first CurrentInvoiceRoutingCodeLevelRel.ApprovalTeam

		FinanceTeamMembersFromTransientLocalApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam						= first TransientLocalInvoiceRoutingCodeLevelRel.ApprovalTeam

		CorporateCalendarWorkingDayRel
			one-to-many relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemCalendar	= Company.VendorGroup.CorporateCalendar
			Instance Selection
				where (related.IsWorkingDay
				and	   related.SystemCalendarDate = LocalEscalationDate)

		PayablesAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses Set1
				related.VendorGroup			= Company.VendorGroup
				related.Company				= Company
				related.PayablesAccrualCode	= AccrualCode

		PayablesDiscountCodeDetailRel
			one-to-one relation to PayablesDiscountCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.PayablesDiscountCode	= DiscountCode
				related.Company					= Company

		TaxAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			= Company.VendorGroup
				related.PayablesAccrualCode	= LocalAccrualCode
				related.Company				= Company

		OverrideTaxAccrualDetailRel									
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			= Company.VendorGroup
				related.PayablesAccrualCode	= LocalAccrualCode
				related.Company				= LocalTaxCompany

		RetainageAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			= Company.VendorGroup
				related.PayablesAccrualCode	= RetainageAccrualCode
				related.Company				= Company

		PayablesMatchInvoiceDetailGoodsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company 		= Company
				related.Vendor  		= Vendor
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where (related.ItemType.Inventoried
				or     related.ItemType.Special
				or     related.ItemType.NonStock)

		InventoriedItemRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company 		= Company
				related.Vendor  		= Vendor
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where (related.ItemType.Inventoried)

	 	NonMatchInvoiceOutOfBalanceErrorRel
			one-to-many relation to PayablesInvoiceError
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ErrorType.InvoiceOutOfBalance)

	 	MatchInvoiceOutOfBalanceErrorRel
			one-to-many relation to PayablesInvoiceError
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ErrorType.MatchInvoiceOutOfBalance)

	 	AsyncErrorRel
			one-to-many relation to PayablesInvoiceError
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ErrorType.AsyncFailure)

		ContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup				= Company.VendorGroup
				related.Contract 					= ServiceContract
			Instance Selection
				where (related.CanUseForInvoicePayment)

		ContractLineServiceCodeAmountRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup				= Company.VendorGroup
				related.Contract 					= ServiceContract
			Instance Selection
				where (related.ServiceCode.Amount)

		ContractLineAOCRel
			one-to-many relation to ContractLineAOC
			Field Mapping uses part of key
				related.ContractGroup				= Company.VendorGroup
				related.Contract 					= ServiceContract


		MatchReconQueueRel
			one-to-one relation to MatchReconQueue
			Field Mapping uses symbolic key
				related.Company 							= Company
				related.PayablesInvoice						= PayablesInvoice

		MatchedReconQueueRel
			one-to-many relation to MatchReconQueue
			Field Mapping uses symbolic key
			Instance Selection
				where (related.View.MatchComplete)

		MatchWorkRel
			one-to-many relation to MatchWork
			Field Mapping uses ByPayablesInvoice
				related.Company 							= Company
				related.PayablesInvoice						= PayablesInvoice

		LocalMatchReconQueueFinanceResourceRel
			one-to-many relation to MatchReconQueueFinanceResource
			Field Mapping uses symbolic key
			Instance Selection
				where (related.FinanceResource				= LocalAPClerk)

		MatchReconQueueFinanceResourceRel
			one-to-many relation to MatchReconQueueFinanceResource
			Field Mapping uses symbolic key
				related.Company 							= Company
				related.PayablesInvoice						= PayablesInvoice

		LocalAutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company 							= Company
				related.AutoMatchResult						= LocalAutoMatchResult
				related.PayablesInvoice						= PayablesInvoice

		LocalAutoMatchResultPORel
			one-to-many relation to AutoMatchResultInvoice
			Field Mapping uses ByCompanyPurchaseOrder
				related.Company 							= Company
				related.PurchaseOrder						= LocalPurchaseOrder
				related.AutoMatchResult						= LocalAutoMatchResult

		LocalAutoMatchResultSamePODiffInvoiceRel
			one-to-many relation to AutoMatchResultInvoice
			Field Mapping uses ByCompanyPurchaseOrder
				related.Company 							= Company
				related.PurchaseOrder						= LocalPurchaseOrder
				related.AutoMatchResult						= LocalAutoMatchResult
			Instance Selection
				where (related.PayablesInvoice != PayablesInvoice
				and    related.ErrorMessage not entered
				and    related.InvoiceUnmatched)

		AutoMatchResultInvoiceRel
			one-to-many relation to AutoMatchResultInvoice
			Field Mapping uses ByInvoice
				related.Invoice					= Invoice
				related.Company 				= Company
				related.PayablesInvoice			= PayablesInvoice

		MatchAgingRel
			one-to-many relation to MatchAging
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		MatchAgingInvoiceRel
			one-to-one relation to MatchAgingInvoice
			Field Mapping uses symbolic key
				related.Company 							= Company
				related.PayablesInvoice						= PayablesInvoice

		LocalMatchingRateRel
			one-to-many relation to MatchingRate
			Field Mapping uses YearMonth
				related.FinanceEnterpriseGroup 				= LocalFinanceEnterpriseGroup 
		LocalMatchingRateYearMonthRel
			one-to-many relation to MatchingRate
			Field Mapping uses YearMonth
				related.FinanceEnterpriseGroup 				= LocalFinanceEnterpriseGroup
				related.Year                   				= LocalYear
				related.Month                  				= LocalMonth

		VendorWithholdingCodesAsDefaultRel
			one-to-many relation to VendorWithholdingCode
			Field Mapping uses symbolic key
				related.VendorGroup							= Company.VendorGroup
				related.Vendor								= Vendor
				related.Company			 		           	= Company
			Instance Selection
				where (related.DefaultWithholdingCode)

		InvoiceSpendByDiversityCodeRel is a PayablesInvoicePayment set

		SupplyManagementReportRel
			one-to-one relation to SupplyManagementReport
			Field Mapping uses symbolic key
				related.ItemGroup	= Company.VendorGroup
				related.SupplyManagementReport	= SupplyManagementReportContext



		PayablesInvoiceByDiversityCodeRel						
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByDiversityCodeVendor
				related.DiversityCode 	= DiversityCode
				related.VendorGroup 	= VendorGroup
			Instance Selection
				where (related.UniqueID < UniqueID)



		PayablesInvoiceWithSameDiversityCodeRel					
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByDiversityCodeVendor
				related.DiversityCode 	= DiversityCode
				related.VendorGroup 	= VendorGroup

		OriginalInvoiceDetailsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= MatchInvoiceReferenceRel.OriginalInvoice

		AllPayablesInvoiceByVendorGroupRel						
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorGroupVendor
				related.VendorGroup = VendorGroup

		OldRecurringInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= LocalRecurringInvoice

		ReplacementRecurringInvoiceRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= Invoice
				related.Suffix			= Suffix
				related.CancelSequence	= blank
				related.InvoiceDate		= InvoiceDate						

		CreditMemoReferenceInvoiceRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= CreditMemoReferenceInvoice
				related.Suffix			= blank
				related.CancelSequence	= blank
				related.InvoiceDate		= InvoiceDate					

		ProofOfDeliveryRel
			one-to-many relation to PayablesInvoiceDocument
			Field Mapping uses symbolic key
				related.Company    		= Company
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where (related.DocumentType = 4)

		IntercompanyBillingTransactionRel
			one-to-many relation to IntercompanyBillingTransaction
			Field Mapping uses ByOriginatingDocument
				related.IntercompanyBillingGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.OriginatingDocument			= reference to this instance

		IntercompanyBillingBillToCompanyTransactionRel  
			one-to-many relation to IntercompanyBillingTransaction
			Field Mapping uses ByOriginatingDocument
				related.IntercompanyBillingGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.OriginatingDocument			= reference to this instance
			Instance Selection
				where (related.ToCompany			 = LocalICBillToCompany)

		VendorReturnPayablesInvoiceDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9	
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.DistributionAccount = LocalVendorReturnLineDistributionAccount)	

		ExpenseManagementInterfaceHeaderRel
			one-to-one relation to ExpenseManagementInterfaceHeader
			Field Mapping uses symbolic key
				related.VendorGroup									= VendorGroup
				related.ExpenseManagementInterfaceHeader.Document	= Invoice

		ExpenseManagementInterfaceDetailRel
			one-to-many relation to ExpenseManagementInterfaceDetail
			Field Mapping uses symbolic key
				related.VendorGroup							= VendorGroup
				related.ExpenseManagementInterfaceHeader	= PayablesInvoice

		ProcurementCardStatementRel
			one-to-one relation to ProcurementCardStatement
			Field Mapping uses symbolic key
				related.ProcurementGroup         = VendorGroup
				related.ProcurementCardProgram   = ProcurementCardProgram
				related.ProcurementCardStatement = ProcurementCardStatement

		IntercompanyBillingDocumentRel
			one-to-one relation to IntercompanyBillingDocumentHeader
			Field Mapping uses ByPayablesInvoice
				related.IntercompanyBillingGroup			= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.PayableEntity.Company				= Company
				related.PayableEntity.PayablesInvoice		= PayablesInvoice

		IntercompanyBillingDocumentByDateRel
			one-to-many relation to IntercompanyBillingDocumentHeader
			Field Mapping uses ByInvoiceDate
				related.IntercompanyBillingGroup				= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.InvoiceDate								= InvoiceDate
			Instance Selection
				where 	(related.PayableEntity.Company			= Company
				and		 related.PayableEntity.PayablesInvoice	= PayablesInvoice)

		NonLinkedTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company    		= Company
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where (related.OriginalDistribution = blank)

		HeaderTaxDistributionsRel	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company    		= Company
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where (related.OriginalDistribution = blank
				and    related.IsTaxDistribution)

		APToARSelectRel
			one-to-one relation to APToARSelect
			Field Mapping uses symbolic key
				related.Company                                 = Company
				related.PayablesInvoice							= PayablesInvoice

		ReceivableCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Customer		= Vendor.Customer

		InterfacedPurchaseOrderRel
			one-to-many relation to InterfacedPurchaseOrder
			Field Mapping uses ByImport
				related.Company                    	= Company
				related.PurchaseOrderImport 		= InterfacedPurchaseOrder
				related.POCode						= InterfacedPOCode

		AnyInterfacedPurchaseOrderRel
			one-to-many relation to InterfacedPurchaseOrder
			Field Mapping uses ByImport

		PayablesInvoiceVoucherRefRel
			one-to-one relation to PayablesInvoiceVoucherRef
			Field Mapping uses symbolic key
				related.Company = Company
				related.PayablesInvoiceVoucherRef = PayablesInvoice

		VendorPayablesInvoiceTotalRel
			one-to-one relation to PayablesInvoiceTotal
			Field Mapping uses symbolic key
				related.VendorGroup				= LocalVendorGroup
				related.Vendor					= LocalVendor
				related.PayablesInvoiceTotal	= LocalPayablesInvoiceTotal

		MHCOAuthRel	
			one-to-one relation to OAuth
			Field Mapping uses symbolic key
				related.OAuth = "MHCOAuth"

		HylandOAuthRel	
			one-to-one relation to OAuth
			Field Mapping uses symbolic key
				related.OAuth = "HylandOAuth"

		PayablesInvoiceEmailRel is a PayablesInvoiceEmail set

		PayablesInvoiceDetailINRQuantityRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company			= Company
				related.Vendor			= Vendor
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where  (related.HasINRQuantity
				and    !related.ItemType.Service
				and    !related.PurchaseOrderLine.CostOption.NoCharge)

		ClaimsAndLiabilitiesRel
			one-to-many relation to ClaimsAndLiabilities
			Field Mapping uses symbolic key
				related.Company				  	   = Company
				related.ClaimsAndLiabilitiesHeader = LocalClaimsAndLiabilitiesHeader
				related.Country				  	   = OriginCountry

		PurchasingVendorRel
			one-to-one relation to PurchasingVendor
			Field Mapping uses symbolic key
				related.VendorGroup					= VendorGroup
				related.Vendor						= Vendor


		PayablesInvoiceTaxindicatorRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered)

		PayablesInvoiceDistributionAOCSeqRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.AddOnCharge entered)

		PayablesInvoiceNoneTaxindicatorRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9		
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.TaxCode entered
				and    related.TaxIndicator.None)

		PayablesInvoiceDistributionHSNSACCodeRel		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.IsDistributionType
				and    related.HSNSACCode entered)

		PayablesInvoiceDistributionNoHSNSACCodeRel 		
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set9
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.IsDistributionType
				and    related.HSNSACCode not entered)

		CXMLConfigurationRel
			one-to-many relation to CXMLConfiguration
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.Default)

		PayablesInvoiceDistributionAssetDetailEditRel 	
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.AssetFlag entered
				and   !related.HasAssets)

		RetainageDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.Retainage)

		AllOneSourceOutputUserAttributesRel
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID)

		OneSourceOutputUserAttributesRel
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID
 				and    related.OneSourceUserAttribute.Type 						= "O")

		OneSourceOutputUserAttribute21Rel
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID
 				and    related.OneSourceUserAttribute.Type 						= "O"
 				and    related.Level											= "L" 
 				and    related.UserAttributeName								= "ATTRIBUTE21")

		OneSourceOutputUserAttribute25Rel
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID
 				and    related.OneSourceUserAttribute.Type 						= "O"
 				and    related.Level											= "L" 
 				and    related.UserAttributeName								= "ATTRIBUTE25")

	  	TaxLineItemRel
	  		one-to-many relation to TaxLineItem
	  		valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID

		InterfaceAnalysisDetailRel
			one-to-many relation to InterfaceAnalysisDetail
			Field Mapping uses AnalysisBucket
				related.InterfaceAnalysis	= LocalInterfaceAnalysis
				related.PayablesCompany		= Company
				related.Vendor				= Vendor
				related.Currency			= InvoiceCurrency
			Instance Selection
				where (related.MonthYear.Begin	<= InvoiceDate
				and    related.MonthYear.End	>= InvoiceDate)


		FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 1
				related.FSMBODConfiguration.Noun 		= "SupplierInvoice"
				related.FSMBODConfiguration.Direction 	= 1

		FSMInboundBODTrackerRel
			one-to-one relation to FSMInboundBODTracker
			Field Mapping uses symbolic key
				related.FSMInboundBODTracker				= LocalFSMInboundBODTracker

		BODVendorLocationRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup    = Company.VendorGroup
				related.Vendor         = Vendor
				related.VendorLocation = DerivedShipFromLocation
		
		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFGLC"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= DerivedCrossReferenceAccountingEntity)
		
		LinkedDistTypeDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company    		= Company
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where(related.DistributionType = "D"
				and related.OriginalDistribution = LocalPIDistribution)



		EntityTaxCodeForPayablesInvoiceRel
			one-to-many relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= GeneralLedgerCompanyRel.AccountingEntity
			Instance Selection
				where (related.HasPayablesInvoiceDetailsInIDM
				or	   related.HasVendorReturnLinesInIDM)

		PurchaseOrderReceiptsForChargebackRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set3
				related.Company       	= Company
				related.PurchaseOrder	= FirstPurchaseOrderFromDetail
			Instance Selection
				where (LocalIncludeReceiptDetail.Yes
				and    VendorReturn not entered
				and    related.Vendor	= Vendor)

		PurchaseOrderReceiptsForVendorReturnRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set3
				related.Company       	= Company
				related.PurchaseOrder   = VendorReturn.CreatedFromPurchaseOrder
			Instance Selection
				where (LocalIncludeReceiptDetail.Yes
				and    VendorReturn entered
				and    related.Status.Released)

		PurchaseOrderReceiptMatchReferenceRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company             		= Company
				related.Vendor						= Vendor
			Instance Selection
				where (related.MatchReferenceNumber = MatchReferenceNumber
				and   (related.ReceiptAmount > related.MatchedAmount  
				or     related.ReceiptAmount not entered))

		OpenReceiptsPool1Rel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company                 						= Company
				related.Vendor                  						= Vendor
			Instance Selection
				where (related.ReceiptAmount > related.MatchedAmount
				or     related.ReceiptAmount not entered)

		OpenReceiptsPool2Rel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company                 						= Company
				related.Vendor                  						= Vendor
				related.PurchaseOrder									= FirstPurchaseOrder
			Instance Selection
				where (related.ReceiptAmount > related.MatchedAmount
				or     related.ReceiptAmount not entered)

		OpenReceiptsPool3Rel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company                 						= Company
				related.Vendor                  						= Vendor
				related.PurchaseOrder									= FirstPurchaseOrder
			Instance Selection
				where (related.PurchaseFromLocation	= FirstPurchaseOrder.PurchaseFromLocation
				and   (related.ReceiptAmount > related.MatchedAmount
				or     related.ReceiptAmount not entered))

		PayablesInvoiceCommentForIDMRel is a PayablesInvoiceComment set
			Instance Selection
				where ((VendorReturn entered
				or Suffix = 111)
				and LocalPrintComments.Yes)

		ApproverFinanceResourceRel
			one-to-one relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization		= FinanceEnterpriseGroupRel.HROrganization	
				related.FinanceResource  	= last ApprovedPayablesInvoiceAuditRel.Resource

		VendorTemplateExcludedRel
			one-to-one relation to InvoiceTemplateExclusion
			Field Mapping uses Set1
				related.VendorGroup							= Vendor.VendorGroup
				related.VendorClass							= blank
				related.Vendor								= Vendor
				related.Template							= TransientInvoiceEntryTemplate

		VendorClassTemplateExcludedRel
			one-to-one relation to InvoiceTemplateExclusion
			Field Mapping uses Set1
				related.VendorGroup							= Vendor.VendorGroup
				related.VendorClass							= Vendor.VendorClass
				related.Vendor								= blank
				related.Template							= TransientInvoiceEntryTemplate

		VendorTemplateMatchExcludedRel
			one-to-one relation to InvoiceTemplateExclusion
			Field Mapping uses Set1
				related.VendorGroup							= Vendor.VendorGroup
				related.VendorClass							= blank
				related.Vendor								= Vendor
				related.Template							= 4 

		VendorClassTemplateMatchExcludedRel
			one-to-one relation to InvoiceTemplateExclusion
			Field Mapping uses Set1
				related.VendorGroup							= Vendor.VendorGroup
				related.VendorClass							= Vendor.VendorClass
				related.Vendor								= blank
				related.Template							= 4 

		PayablesInvoiceDistributionForIDMRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice 	= PayablesInvoice

		VendorReturnDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
			Instance Selection
				where (related.DistributionAmount.CurrencyAmount < 0)
		
		PayablesInvoiceCommentInterfacedItemDetailsForIDMRel is a PayablesInvoiceComment set
			Instance Selection
				where ((VendorReturn not entered
				and not Suffix = 111)
				and LocalPrintComments.Yes)


		PayablesInvoiceCommentForIDMDebitMemoRel is a PayablesInvoiceComment set 

		PayablesInvoiceWithholdingRel is a PayablesInvoiceWithholding set
			Instance Selection
				where (related.PayablesInvoicePayment 		!entered
				and    related.PayablesInvoiceDistribution	!entered)

		AccruedPayablesInvoiceWithholdingRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByAccruedCategoryWithholdingCode
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
				related.Type			= 1		

		PayablesInvoiceWithholdingByCodeRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByAccruedCategoryWithholdingCode
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
				related.Type					= 1		
				related.WithholdingCategory		= LocalWithholdingCategory
				related.IncomeWithholdingCode	= LocalWithholdingCode

		VendorLocationWithholdingDefaultRel
			one-to-many relation to VendorWithholdingDefault
			Field Mapping uses symbolic key
				related.VendorGroup		= VendorGroup
				related.Vendor			= Vendor
				related.VendorLocation	= RemitToCode

		VendorWithholdingDefaultRel
			one-to-many relation to VendorWithholdingDefault
			Field Mapping uses symbolic key
				related.VendorGroup	= VendorGroup
				related.Vendor		= Vendor

		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance

		CashCodeFundEditByFundRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.OriginatingTransaction	= reference to this instance
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		ExceedesCashCodeFundBalanceRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByExceedesFundBalance
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.OriginatingTransaction	= reference to this instance
				related.ExceedesFundBalance		= true

		PayablesInvoicePaymentsRel
 			one-to-many relation to PayablesInvoicePayment
 			Field Mapping uses symbolic key
 				related.Company						= Company
 				related.PayablesInvoice				= PayablesInvoice
 			Instance Selection
 				where (related.Status < 9
 				or    related.CheckDate > LocalInvoiceCutOffDate)

        PayablesInvoicePaymentsPurgeRel
 			one-to-many relation to PayablesInvoicePayment
 			Field Mapping uses symbolic key
 				related.Company						= Company
 				related.PayablesInvoice				= PayablesInvoice
 			Instance Selection
				include deleted records				
 				
 		PayablesInvoiceWithholdingPurgeRel
 			one-to-many relation to PayablesInvoiceWithholding
 			Field Mapping uses symbolic key
 				related.Company						= Company
 				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				include deleted records 			

		MarkedAsPaidPayablesInvoicePaymentRel is a PayablesInvoicePayment set	
			Instance Selection
				where (related.MarkedAsPaid)

 		PayablesDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1
				related.Company 			= Company
				related.PayablesInvoice 	= PayablesInvoice
			Instance Selection
				where (related.Status < 9
				or    related.DistributionDate > LocalInvoiceCutOffDate)

 		PayablesDistributionNotToPurgeRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses Set1
				related.Company 			= Company
				related.PayablesInvoice 	= PayablesInvoice
			Instance Selection
				where (related.Status < 9
				or    related.DistributionDate > LocalInvoiceCutOffDate
				or    (related.DistributionAccount.Project entered and !related.DistributionAccount.Project.ProjectStatus.AllowPurge))

		PayablesInvoiceCommentsRel
			one-to-many relation to PayablesInvoiceComment
			Field Mapping uses ByType
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice

		PayablesInvoiceCommentsPurgeRel
			one-to-many relation to PayablesInvoiceComment
			Field Mapping uses ByType
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				include deleted records

		PayablesInvoiceEmailPurgeRel is a PayablesInvoiceEmail set
			Instance Selection
				include deleted records

		PayablesInvoiceAuditPurgeRel
			one-to-many relation to PayablesInvoiceAudit
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				include deleted records

		PayablesInvoiceTaxPurgeRel
			one-to-many relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				include deleted records
								
		PayablesInvoiceDetailPurgeRel
   			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
   				related.Company 		= Company
				related.Vendor			= Vendor
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				include deleted records

		UnprocessedThirdPartyDetailRel
			one-to-many relation to PayablesInvoiceDetail 
			Field Mapping uses symbolic key
				related.Company     		= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				where (!related.ThirdPartyTaxHasBeenCalculated) 

		PayablesInvoiceAddOnChargePurgeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set1
    			related.Company 			= Company
    			related.Vendor				= Vendor
    			related.PayablesInvoice		= PayablesInvoice

		UnprocessedThirdPartyAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company     		= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				where (!related.ThirdPartyTaxHasBeenCalculated) 

		ProcurementTransactionDistributionRel
			one-to-many relation to ProcurementTransactionDistribution
			Field Mapping uses Set5
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice

		ProcurementTransactionDistributionPurgeRel
			one-to-many relation to ProcurementTransactionDistribution
			Field Mapping uses Set5
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
			Instance Selection
				include deleted records

		PayablesInvoiceRetainageDistributionPurgeRel
			one-to-many relation to PayablesInvoiceRetainageDistribution
			Field Mapping uses Set1
				related.Company				= Company
				related.Vendor				= Vendor
				related.Invoice				= Invoice
				related.Suffix				= Suffix
			Instance Selection
				include deleted records

 		PurchaseOrderReceiptInvoiceLinkPurgeRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company 										= Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID	= MatchObjectID
			Instance Selection
				where  (related.Vendor 						= Vendor
				and		related.PayablesInvoice.Invoice		= Invoice)

		MatchReconQueuePurgeRel
			one-to-one relation to MatchReconQueue
			include deleted record
			Field Mapping uses ByVendor
				related.Vendor								= Vendor
				related.Company 							= Company
				related.PayablesInvoice						= PayablesInvoice

	 	WebServiceErrorRel
			one-to-many relation to PayablesInvoiceError
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ErrorType.DocumentManagementWebServiceError)

		JurisdictionResultsForInvoiceRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)						


		DistributionsCreatedByFESRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice 	= PayablesInvoice
			Instance Selection
				where (related.CreatedByFES)

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "PAYABLESINVOICE"	
				related.AppsValue	= DerivedAppsValue	

		VendorSelectRel		
			one-to-many relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup	= Company.VendorGroup

		PayToVendorRel		
			one-to-many relation to PayToVendor
			Field Mapping uses symbolic key
				related.VendorGroup	= Company.VendorGroup
				related.Vendor		= Vendor
			Instance Selection
				where (related.PayType.PayToVendor)

		PayToVendorExistsRel		
			one-to-many relation to PayToVendor
			Field Mapping uses symbolic key
				related.VendorGroup	= Company.VendorGroup
				related.Vendor		= Vendor
			Instance Selection
				where (related.PayVendor    = PayVendor
				and    related.PayType.PayToVendor)

		PayVendorPayToVendorSelectRel		
			one-to-many relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup	= Company.VendorGroup
				related.Vendor		= PayToVendorRel.PayVendor
			
		PayVendorSelectRel		
			if (Company.VendorGroup.EditForPayToVendor)
				PayVendorPayToVendorSelectRel
			else
				VendorSelectRel

		ProjectPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.Project                 = LocalPeriodOfPerformanceProject
				related.GeneralLedgerSystemCode = "AP"

#ifdef module cam
		CustodialAccountEditRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance

		CustodialDetailAmountRel
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses ByCustodialPosting
				related.FinanceEnterpriseGroup  		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CustodialPosting          		= LocalCustodialPosting
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity	= LocalToAccountingEntity)

		CustodialAccountEditRel2
			one-to-one relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.AccountingEntity		= LocalToAccountingEntity
		 		related.FinanceDimension10		= LocalCustodialPosting

		ExceedsCustodialAccountBalanceRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByExceedsBalance
		 		related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedsBalance			= true

		ProcessingTemplatesRel		
			one-to-many relation to BudgetTemplate 
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.Status	!= 2 
				and related.Status 		!= 0 
				and related.Status 		!= 3) 
#endif
#ifdef module idm
		IDMConfigurationRel
			one-to-one relation to IDMConfiguration
			Field Mapping uses symbolic key
				related.IDMConfiguration = actor.context.FinanceEnterpriseGroup

		IDMAdditionalAttributesLinesRel
			one-to-many relation to IDMAdditionalAttributesLines
			Field Mapping uses symbolic key
				related.IDMAdditionalAttributesHeader = "FSM_PayablesInvoice"
			Instance Selection
				where(related.IDMAdditionalAttributesHeader.ActivateAdditionalAttributes
				and	  related.ActivateAdditionalAttributes.Active)
#endif
		
		ExpenseManagementInterfaceConfigurationRel		
			one-to-many relation to ExpenseManagementInterfaceConfiguration
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup                  = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				
		GLTransactionDetailRel	
	  		one-to-many relation to GLTransactionDetail
	  		valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction		 
				related.OriginatingTransaction	= reference to this instance

		VendorNameSelectRel
			one-to-many relation to Vendor
			Field Mapping uses Set5
				related.VendorGroup = Company.VendorGroup
			Instance Selection
				where (related.VendorSearchName like DerivedVendorNameSelect)

        LocalReceiptLineCostAdjustmentsRel
            one-to-many relation to InventoryTransactionLine

			Field Mapping uses ByItem 
				related.Company										= Company
				related.InventoryLocation							= LocalShipToLocation
				related.Item 										= LocalItem 
			Instance Selection

				where (related.TransactionSystemCode						= "PO"
				and    related.InventoryTransaction.InventoryDocumentType.CostAdjustment
				and    related.InventoryTransactionLine.WarehouseShipment	= blank
				and    related.InventoryTransactionLine.ComponentSequence	= blank)

		LocalItemLocationRel
            one-to-many relation to ItemLocation
			Field Mapping uses symbolic key  
				related.Company										= Company
				related.InventoryLocation							= LocalShipToLocation
				related.Item 										= LocalItem 

		





	Sets
		ByCurrencyCompanyVendor
			duplicates
			Sort Order
				OriginatingInterfaceRun
				InvoiceCurrency
				Company
				ProcessLevel 
				Vendor

		ByDiversityCodeVendor
			duplicates
			Sort Order
				DiversityCode
				VendorGroup		
				Company
				Vendor

		ByVendor2			
			Sort Order
				Company
				Vendor
				PayablesInvoice

		ByDueDate2			
			duplicates
			Sort Order
				Company
				DueDate

		ByInvoiceAmount2	
			duplicates
			Sort Order
				Company
				InvoiceAmount.CurrencyAmount

		ByDiscountDate2		
			duplicates
			Sort Order
				DiscountDate

		ByCompanyVendorInvoice
			Instance Selection
				where (VendorInvoiceEntered)
			Sort Order
				Company
				Vendor
				Invoice
				Suffix
				CancelSequence
				InvoiceDate						

		ByCompanyVendorPayablesInvoice
			Instance Selection
				where (VendorEntered)
			Sort Order
				Company
				Vendor
				PayablesInvoice

		ByProcessingStatus
			indexed
			Sort Order
				Status
				Company
				PayablesInvoice

		ByAPProcessor
			indexed
			Sort Order
				APClerk
				Company
				PayablesInvoice

		ByVendorInvoice
			Sort Order
				Vendor
				Invoice
				Company
				PayablesInvoice
				Status			

		ByInvoiceAmount
			Sort Order
				InvoiceAmount.CurrencyAmount
				Company
				PayablesInvoice
				Status			

		ByInvoiceDate
			Sort Order
				InvoiceDate
				Company
				PayablesInvoice
				Status			

		ByDueDate
			Sort Order
				DueDate
				Company
				PayablesInvoice
				Status			







		ByDiscountDate
			Sort Order
				DiscountDate
				Company
				PayablesInvoice

		Set10
			indexed
			Sort Order
				Company
				ReconciliationDate
				AccrualCode
				InvoiceCurrency
				Vendor
				PayablesInvoice
				Status

		Set13
			indexed
			Instance Selection
				where (VendorInvoiceEntered)
			Sort Order
				Company
				Vendor
				MatchObjectID
				Invoice
				Suffix
				CancelSequence
				InvoiceDate

		Set14
			indexed
			Instance Selection
				where (NotMatched)
			Sort Order
				Company
				Vendor
				DueDate
				PayablesInvoice

		Set2
			indexed
			Instance Selection
				where (Status.Unreleased)
			Sort Order
				Company
				BatchNumber
				AuthorityCode
				VoucherNumber
				Vendor
				PayablesInvoice

		Set3
			indexed
			Sort Order
				Status
				Company
				BatchNumber
				AuthorityCode
				Operator
				CreateDate
				Vendor
				PayablesInvoice

		Set4
			indexed
			Sort Order
				Company
				VoucherNumber
				Status
				Vendor
				PayablesInvoice

		Set6
			indexed
			Sort Order
				Company
				Vendor
				InvoiceDate descending
				PayablesInvoice

		Set7				
			indexed
			Instance Selection
				where (AmountOutOfBalance)
			Sort Order
				Company
				Status
				BatchNumber
				Vendor
				PayablesInvoice

		Set8
			indexed
			Instance Selection
				where (NotMatched)
			Sort Order
				Company
				DueDate
				Vendor
				PayablesInvoice

		ByVendorGroupSource
			indexed
			Sort Order
				VendorGroup
				InvoiceSource
				Status
				Company
				Vendor
				PayablesInvoice


		ByReturnNumber
			not indexed
			Instance Selection
				where (FromVendorReturn)
			Sort Order
				Company
				VendorReturn
				Vendor
				PayablesInvoice

		ByInvoice			
			Sort Order
				Invoice
				PayablesInvoice
				Vendor
				Company

		ByVendor			
			Sort Order
				Vendor
				Company
				PayablesInvoice

		ByVendorGroupVendor			
			Sort Order
				VendorGroup
				Vendor
				Company
				PayablesInvoice


		ByVendorGroupVendorAgingPeriod
 			Sort Order
				VendorGroup
				Vendor
				AgingPeriod
				Company
				PayablesInvoice

		ByVendorGroupVendorPastDueAgingPeriod
 			Sort Order
				VendorGroup
				Vendor
				PastDueAgingPeriod
				Company
				PayablesInvoice

		ByVendorGroupAgingPeriod
			duplicates
 			Sort Order
				VendorGroup
				AgingPeriod

		ByVendorGroupPastDueAgingPeriod
			duplicates
 			Sort Order
				VendorGroup
				PastDueAgingPeriod

		ByProcurementCardStatement
			Sort Order
				ProcurementCardProgram
				ProcurementCardStatement
				Company
				PayablesInvoice






	Create Rules		



		if (MatchProcessType.Expense
		and Vendor.VendorRestrictions.RestrictedCompany entered)									
			constraint (Company = Vendor.VendorRestrictions.RestrictedCompany)
				"VendorIsRestrictedToCompany<Vendor.VendorRestrictions.RestrictedCompany>"
		if (MatchProcessType.Expense
		and Vendor.VendorRestrictions.RestrictedCompanyGroup entered)								
			LocalGeneralLedgerCompanyGroup = Vendor.VendorRestrictions.RestrictedCompanyGroup
			constraint (LocalGLCompanyGroupMemberRel exists)
				"VendorIsRestrictedToCompanyGroup<Vendor.VendorRestrictions.RestrictedCompanyGroup>;Company<Company>IsNotAMemberOfGroup"

		if (!MatchProcessType.Expense)
			MatchErrorType = MatchErrorType.MatchInvoice
		else
			MatchErrorType = blank

		if (Vendor.ValidateCertificationDate)
			if (RemitToCode not entered)
				constraint (BlankVenLocVendorCertificationRel exists)
					"Vendor<Vendor>_-_<Vendor.VendorName>IsFlaggedForCertificateValidation,ButNoCertificatesExistForThisVendor"	
				constraint (ValidateVendorCertificationRel exists)
					"Vendor<Vendor>_-_<Vendor.VendorName>IsFlaggedForCertificateValidation,ButNoValidCertificatesExistForThisVendor"	
			else 	
				constraint (VenLocVendorCertificationRel exists)
					"Vendor_\Location<RemitToCode>_-_<RemitToCode.VendorName>,For_\Vendor<Vendor>_-_<Vendor.VendorName>IsFlaggedForCertificateValidation,ButNoCertificatesExistForThisVendorLocation"	
				constraint (VenLocValidateVendorCertificationRel exists)
					"Vendor_\Location<RemitToCode>_-_<RemitToCode.VendorName>,For_\Vendor<Vendor>_-_<Vendor.VendorName>IsFlaggedForCertificateValidation,ButNoValidCertificatesExistForThisVendorLocation"	

		if (Company entered)
			constraint (TaxEntityRel exists)
				"ATaxEntityMustExistForAccountingEntity<Company.AccountingEntity>OnGlobalLedgerCompany<Company>"

		if (TransientSupplierInvoiceType = 0)
			constraint (!SupplierMustEnterInvoices)
				"InvoicesMustBeCreatedBySupplierOnSupplierPortal"

		LastPaymentSequence = 0		

		initialize ApinwsXXTranTotPmt
		initialize ApinwsXXBaseTotDist
		initialize ApinwsXXTranTotDist
		initialize ApinwsXXTranTotTax
		initialize ApinwsXXProrateDist
		
		if (SupplierInvoiceAttachment.MimeType entered) 
			include IDM.CreateRules 
				replace AttachmentField with SupplierInvoiceAttachment
		
		if (SupplierPODAttachment.MimeType entered) 
			include IDM.CreateRules 
				replace AttachmentField with SupplierPODAttachment							





	Delete Rules
		if (SupplierInvoiceAttachment.MimeType entered)
			include IDM.DeleteRules
				replace AttachmentField with SupplierInvoiceAttachment
		
		if (SupplierPODAttachment.MimeType entered) 
			include IDM.DeleteRules 
				replace AttachmentField with SupplierPODAttachment

	Commit Rules
		if (SupplierInvoiceAttachment.MimeType entered)
			include IDM.CommitRules
				replace AttachmentField with SupplierInvoiceAttachment
		
		if (SupplierPODAttachment.MimeType entered) 
			include IDM.CommitRules 
				replace AttachmentField with SupplierPODAttachment

	Derived Fields
		DerivedAppsValue	is a DerivedField
			type is like PfiAppsValue
			return "InvoiceApproval" + UniqueID	

		CreditOrDebitFromEmailAddress is a DerivedField
			type is like EmailAddress
			restricted
			if (InvoiceType.CreditMemo)
				return Company.PayablesChargebackFromAndReplyToEmail
			else 
				return Company.PayablesDebitMemoFromAndReplyToEmail

		VendorMissingEmailAddress is a MessageField
			"VendorMissingEmailAddress;RelatedDocumentsCannotBeSentThroughEmail."

		DerivedPointOfTitleTransfer is a DerivedField		
			type is like PointOfTitleTransfer
			default label is "PointOfTitleTransfer"
			if (MatchProcessType.Expense)
				if (PayablesInvoiceTaxRel.PointOfTitleTransfer entered)
					return PayablesInvoiceTaxRel.PointOfTitleTransfer
				return "D"
			else
				return PayablesInvoiceTaxRel.PointOfTitleTransfer

		DerivedTotalDistributionAmountField is a DerivedField		
			type is like CurrencyAmount		
			default label is "TotalDistributionAmount"
			return TotalDistributionAmount.TransactionTotal

		DerivedTotalPaymentAmountField is a DerivedField		
			type is like CurrencyAmount		
			default label is "TotalPaymentAmount"
			return TotalPaymentAmount.TransactionTotal

		DerivedDisplayTaxSystemTaxAmount is a DerivedField	
			type is like CurrencyAmount
			default label is "TaxSystemTaxAmount"
			if (MatchProcessType.Expense)
				if (PayablesInvoiceTaxRel.TaxMethod.Invoiced)
					if (PayablesInvoiceTaxRel.TaxSystemTaxAmount entered)
						return PayablesInvoiceTaxRel.TaxSystemTaxAmount
					if (CallVertexByDocument										
					and PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount entered)	
						return PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount	
					if (PayablesInvoiceTaxRel.TaxSystemTaxAmount not entered
					and PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount entered)
						return sum PayablesInvoiceTaxDistributionsRel.TaxDetails.ReturnedTaxAmount		

		DerivedTotalTaxAmountField is a DerivedField		
			type is like CurrencyAmount
			default label is "TotalTaxAmount"

			if (TaxEntityUsesThirdPartyTax)  
				if (MatchProcessType.Expense)									

					if (PayablesInvoiceNoneTaxindicatorRel exists)				




						return sum PayablesInvoiceNoneTaxindicatorRel.DistributionAmount.CurrencyAmount		




					return PayablesInvoiceTaxRel.TotalInvoicedTaxAmount + PayablesInvoiceTaxRel.TotalAccruedTaxAmount	
				else															

					return PayablesInvoiceTaxRel.TotalInvoicedTaxAmount + PayablesInvoiceTaxRel.TotalAccruedTaxAmount  
			if (!TaxEntityUsesThirdPartyTax)						
				if (MatchProcessType.Expense)

					return PayablesInvoiceTaxRel.TotalInvoicedTaxAmount + PayablesInvoiceTaxRel.TotalAccruedTaxAmount

				return PayablesInvoiceTaxRel.TotalInvoicedTaxAmount

			if (!MatchProcessType.Expense)							

				return PayablesInvoiceTaxRel.TotalInvoicedTaxAmount 
			if (MatchProcessType.Expense							

			and !Status.Cancelled									
			and !PayablesInvoiceTaxRel.TaxMethod.Invoiced			
			and PayablesInvoiceTaxRel.TaxSystemTaxAmount entered)	

				return PayablesInvoiceTaxRel.TaxSystemTaxAmount		

			return RoundedTotalTaxAmount		

		DerivedSupplierAdhocAOCAmount is a DerivedField		
			type is like CurrencyAmount
			return sum PayablesInvoiceSupplierAddOnChargeRel.AddOnChargeAmount

		SupplierAddOnChargeMessage is a MessageField 
			"SupplierHasEnteredAddOnChargesWhichMustBeMovedToMiscellaneousOrSpreadAddOnCharges"
		
		DerivedSupplierEnteredAOCEmailContent is a DerivedField 
			type is Alpha 100
			if (HasSupplierAddOnCharges)
				return SupplierAddOnChargeMessage
			else	
				return blank 
		
		AddOnChargePlusLineDetails is a DerivedField 
			type is like CurrencyAmount
			return DetailExtendedAmount + AddOnChargeAmount + DerivedSupplierAdhocAOCAmount + TaxAmount
		
		DerivedInvoiceCurrencyAndDescription is a MessageField
			"<InvoiceCurrency.Description>_(<InvoiceCurrency>)"

		DerivedAECurrencyAndDescription is a MessageField
			"<Company.AccountingEntity.FunctionalCurrency.Description>_(<Company.AccountingEntity.FunctionalCurrency>)"

		DerivedFunctionalCurrencyAndDescription is a MessageField
			"<Company.AccountingEntity.FunctionalCurrency.Description>_(<Company.AccountingEntity.FunctionalCurrency>)"

		DerivedAlternateCurrencyAndDescription is a MessageField
			"<Company.AccountingEntity.AlternateCurrency.Description>_(<Company.AccountingEntity.AlternateCurrency>)"

		DerivedAlternateCurrency2CurrencyAndDescription is a MessageField
			"<Company.AccountingEntity.AlternateCurrency2.Description>_(<Company.AccountingEntity.AlternateCurrency2>)"

		DerivedAlternateCurrency3CurrencyAndDescription is a MessageField
			"<Company.AccountingEntity.AlternateCurrency3.Description>_(<Company.AccountingEntity.AlternateCurrency3>)"

		DerivedReportCurrencyOneCurrencyAndDescription is a MessageField
			"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.Description>_(<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne>)"

		DerivedReportCurrencyTwoCurrencyAndDescription is a MessageField
			"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.Description>_(<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo>)"

		DerivedReportCurrencyThreeCurrencyAndDescription is a MessageField
			"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.Description>_(<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree>)"

		DerivedReportCurrencyFourCurrencyAndDescription is a MessageField
			"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.Description>_(<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour>)"

		DerivedReportCurrencyFiveCurrencyAndDescription is a MessageField
			"<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.Description>_(<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive>)"

		DerivedSupplierSourceId is a DerivedField
			type is like SupplierSourceId
			restricted
			if (Vendor.SingleSupplier
			and PurchaseFromLocation entered
            and PurchaseFromLocation.SupplierSourceIdRel exists
            and PurchaseFromLocation.NumberOfSupplierContacts = 1)
   				return PurchaseFromLocation.SupplierSourceIdRel.SupplierSourceId
            else
				return blank

		DerivedSelectFromDate is a DerivedField
			type is Date
			TimeStampInGMT.Value = LocalSelectFromDate
			return TimeStampInGMT.CorporateDate

		DerivedSelectToDate is a DerivedField
			type is Date
			TimeStampInGMT.Value = LocalSelectToDate
			return TimeStampInGMT.CorporateDate

		DerivedCreateDate is a DerivedField
			type is Date
			TimeStampInGMT.Value = CreateDate
			return TimeStampInGMT.CorporateDate

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSupplierInvoice"

		ContextMessageText is a MessageField
			restricted
			"PayablesInvoice<PayablesInvoice>"


		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (InvoiceCurrency entered)
				return InvoiceCurrency.NumberOfDecimals
			else
				return 3


		DerivedRoundTo is a DerivedField		
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001


		DerivedLocalRoundTo is a DerivedField		
			type is Decimal 5.4
			restricted
			if (LocalNumberOfDecimals = 2)
				return .01
			else
			if (LocalNumberOfDecimals = 0)
				return 1
			else
			if (LocalNumberOfDecimals = 3)
				return .001
			else
			if (LocalNumberOfDecimals = 4)
				return .0001


		RoundedTaxAmount is a DerivedField		
			type is like CurrencyAmount		
			restricted
			if (TaxAmount entered)
				RoundedTaxAmount	      = TaxAmount
				round RoundedTaxAmount to nearest DerivedRoundTo
				return RoundedTaxAmount

		RoundedTotalTaxAmount is a DerivedField		
			type is like CurrencyAmount		
			default label is "TotalTaxAmount"

			if (TaxEntityUsesThirdPartyTax)				
				if (TotalTaxAmount entered)
					RoundedTotalTaxAmount		 = TotalTaxAmount
					round RoundedTotalTaxAmount to nearest DerivedRoundTo
					return RoundedTotalTaxAmount
			if (!TaxEntityUsesThirdPartyTax)				
				if (TotalTaxAmount entered)									
					RoundedTotalTaxAmount		 = TotalTaxAmount			
					round RoundedTotalTaxAmount to nearest DerivedRoundTo	
					return RoundedTotalTaxAmount							
				if (PayablesInvoiceTaxRel.TotalInvoicedTaxAmount entered)
					RoundedTotalTaxAmount		= PayablesInvoiceTaxRel.TotalInvoicedTaxAmount
					round RoundedTotalTaxAmount to nearest DerivedRoundTo
					return RoundedTotalTaxAmount
			return 0

		RoundedTaxableAmount is a DerivedField		
			type is like CurrencyAmount		
			restricted
			if (TaxableAmount entered)
				RoundedTaxableAmount = TaxableAmount
				round RoundedTaxableAmount to nearest DerivedRoundTo
				return RoundedTaxableAmount

		RoundedTotalTaxableAmount is a DerivedField		
			type is like CurrencyAmount		
			restricted
			if (TotalTaxableAmount entered)
				RoundedTotalTaxableAmount	      = TotalTaxableAmount
				round RoundedTotalTaxableAmount to nearest DerivedRoundTo
				return RoundedTotalTaxableAmount

		RoundedTotalDistributionAmount is a DerivedField		
			type is like CurrencyAmount		
			default label is "TotalDistributionAmount"

			if (TotalDistributionAmount.TransactionTotal entered)
				RoundedTotalDistributionAmount	      = TotalDistributionAmount.TransactionTotal
				round RoundedTotalDistributionAmount to nearest DerivedRoundTo
				return RoundedTotalDistributionAmount


		RoundedTotDistFunctional is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.FunctionalTotal entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				RoundedTotDistFunctional		= TotalDistributionAmount.FunctionalTotal
				round RoundedTotDistFunctional to nearest DerivedLocalRoundTo
				return RoundedTotDistFunctional

		RoundedTotDistAlternateTotal is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.AlternateTotal entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency.NumberOfDecimals
				RoundedTotDistAlternateTotal	= TotalDistributionAmount.AlternateTotal
				round RoundedTotDistAlternateTotal to nearest DerivedLocalRoundTo
				return RoundedTotDistAlternateTotal

		RoundedTotDistAlternateTotal2 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.AlternateTotal2 entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				RoundedTotDistAlternateTotal2	= TotalDistributionAmount.AlternateTotal2
				round RoundedTotDistAlternateTotal2 to nearest DerivedLocalRoundTo
				return RoundedTotDistAlternateTotal2

		RoundedTotDistAlternateTotal3 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.AlternateTotal3 entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				RoundedTotDistAlternateTotal3	= TotalDistributionAmount.AlternateTotal3
				round RoundedTotDistAlternateTotal3 to nearest DerivedLocalRoundTo
				return RoundedTotDistAlternateTotal3


		RoundedTotDistReportTotal1 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.ReportTotal1 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
				RoundedTotDistReportTotal1		= TotalDistributionAmount.ReportTotal1
				round RoundedTotDistReportTotal1 to nearest DerivedLocalRoundTo
				return RoundedTotDistReportTotal1

		RoundedTotDistReportTotal2 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.ReportTotal2 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
				RoundedTotDistReportTotal2		= TotalDistributionAmount.ReportTotal2
				round RoundedTotDistReportTotal2 to nearest DerivedLocalRoundTo
				return RoundedTotDistReportTotal2

		RoundedTotDistReportTotal3 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.ReportTotal3 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
				RoundedTotDistReportTotal3	    = TotalDistributionAmount.ReportTotal3
				round RoundedTotDistReportTotal3 to nearest DerivedLocalRoundTo
				return RoundedTotDistReportTotal3

		RoundedTotDistReportTotal4 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.ReportTotal4 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
				RoundedTotDistReportTotal4	    = TotalDistributionAmount.ReportTotal4
				round RoundedTotDistReportTotal4 to nearest DerivedLocalRoundTo
				return RoundedTotDistReportTotal4

		RoundedTotDistReportTotal5 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalDistributionAmount.ReportTotal5 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
				RoundedTotDistReportTotal5	    = TotalDistributionAmount.ReportTotal5
				round RoundedTotDistReportTotal5 to nearest DerivedLocalRoundTo
				return RoundedTotDistReportTotal5

		RoundedTotalPaymentAmount is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.TransactionTotal entered)
				RoundedTotalPaymentAmount	      = TotalPaymentAmount.TransactionTotal
				round RoundedTotalPaymentAmount to nearest DerivedRoundTo
				return RoundedTotalPaymentAmount


		RoundedTotPmtFunctional is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.FunctionalTotal entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				RoundedTotPmtFunctional	      	= TotalPaymentAmount.FunctionalTotal
				round RoundedTotPmtFunctional to nearest DerivedLocalRoundTo
				return RoundedTotPmtFunctional

		RoundedTotPmtAlternateTotal is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.AlternateTotal entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency.NumberOfDecimals
				RoundedTotPmtAlternateTotal		= TotalPaymentAmount.AlternateTotal
				round RoundedTotPmtAlternateTotal to nearest DerivedLocalRoundTo
				return RoundedTotPmtAlternateTotal

		RoundedTotPmtAlternateTotal2 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.AlternateTotal2 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				RoundedTotPmtAlternateTotal2	= TotalPaymentAmount.AlternateTotal2
				round RoundedTotPmtAlternateTotal2 to nearest DerivedLocalRoundTo
				return RoundedTotPmtAlternateTotal2

		RoundedTotPmtAlternateTotal3 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.AlternateTotal3 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				RoundedTotPmtAlternateTotal3	= TotalPaymentAmount.AlternateTotal3
				round RoundedTotPmtAlternateTotal3 to nearest DerivedLocalRoundTo
				return RoundedTotPmtAlternateTotal3

		RoundedTotPmtReportTotal1 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.ReportTotal1 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
				RoundedTotPmtReportTotal1	      = TotalPaymentAmount.ReportTotal1
				round RoundedTotPmtReportTotal1 to nearest DerivedLocalRoundTo
				return RoundedTotPmtReportTotal1

		RoundedTotPmtReportTotal2 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.ReportTotal2 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
				RoundedTotPmtReportTotal2		= TotalPaymentAmount.ReportTotal2
				round RoundedTotPmtReportTotal2 to nearest DerivedLocalRoundTo
				return RoundedTotPmtReportTotal2

		RoundedTotPmtReportTotal3 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.ReportTotal3 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
				RoundedTotPmtReportTotal3		= TotalPaymentAmount.ReportTotal3
				round RoundedTotPmtReportTotal3 to nearest DerivedLocalRoundTo
				return RoundedTotPmtReportTotal3

		RoundedTotPmtReportTotal4 is a DerivedField			
			type is like CurrencyAmount		

			if (TotalPaymentAmount.ReportTotal4 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
				RoundedTotPmtReportTotal4		= TotalPaymentAmount.ReportTotal4
				round RoundedTotPmtReportTotal4 to nearest DerivedLocalRoundTo
				return RoundedTotPmtReportTotal4

		RoundedTotPmtReportTotal5 is a DerivedField			
			type is like CurrencyAmount		
			restricted
			if (TotalPaymentAmount.ReportTotal5 entered)
				LocalNumberOfDecimals			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
				RoundedTotPmtReportTotal5		= TotalPaymentAmount.ReportTotal5
				round RoundedTotPmtReportTotal5 to nearest DerivedLocalRoundTo
				return RoundedTotPmtReportTotal5

		RoundedCurrencyAmount is a DerivedField			
			type is like CurrencyAmount		
			restricted
			if (LocalCurrencyAmount entered)
				RoundedCurrencyAmount	      = LocalCurrencyAmount
				round RoundedCurrencyAmount to nearest DerivedRoundTo
				return RoundedCurrencyAmount

		RoundedSplitAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (SplitAmount entered)
				RoundedSplitAmount		= SplitAmount
				round RoundedSplitAmount to nearest DerivedRoundTo
				return RoundedSplitAmount

		RoundedSplitDiscount is a DerivedField
			type is like InternationalAmount
			restricted
			if (SplitDiscount entered)
				RoundedSplitDiscount		= SplitDiscount
				round RoundedSplitDiscount to nearest DerivedRoundTo
				return RoundedSplitDiscount

		RoundedSplitRevalueAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (SplitRevalueAmount entered)
				RoundedSplitRevalueAmount		= SplitRevalueAmount
				round RoundedSplitRevalueAmount to nearest DerivedRoundTo
				return RoundedSplitRevalueAmount

		RoundedSplitReportable is a DerivedField
			type is like InternationalAmount
			restricted
			if (SplitReportable entered)
				RoundedSplitReportable		= SplitReportable
				round RoundedSplitReportable to nearest DerivedRoundTo
				return RoundedSplitReportable

		RoundedTranAdjustment is a DerivedField
			type is like InternationalAmount
			restricted
			if (TranAdjustment entered)
				RoundedTranAdjustment		= TranAdjustment
				round RoundedTranAdjustment to nearest DerivedRoundTo
				return RoundedTranAdjustment

		RoundedDiscAdjustment is a DerivedField
			type is like InternationalAmount
			restricted
			if (DiscAdjustment entered)
				RoundedDiscAdjustment		= DiscAdjustment
				round RoundedDiscAdjustment to nearest DerivedRoundTo
				return RoundedDiscAdjustment



		DerivedStatusForIDM is a DerivedField
			type is Alpha 20
			if (Status.Unreleased)
				return "Unreleased"
			else
			if (Status.Released)
				return "Released"
			else
			if (Status.Approved)
				return "Approved"
			else
			if (Status.PendingApproval)
				return "PendingApproval"
			else
			if (Status.Rejected)
				return "Rejected"
			else
			if (Status.Amended)
				return "Amended"
			else
			if (Status.Cancelled)
				return "Cancelled"	//	TODO - Change to one 'L' or change the 1 "l's" to two "L's"
			else
			if (Status.Paid)
				return "Paid"
			else
			if (Status.Historical)
				return "Historical"

		DerivedInvoiceTypeForIDM is a DerivedField
			type is Alpha 20
			if (InvoiceType.Invoice)
				return "Invoice"
			else
			if (InvoiceType.CreditMemo)
				return "CreditMemo"
			else
			if (InvoiceType.DebitMemo)
				return "DebitMemo"
			else
			if (InvoiceType.Prepayment)
				return "Prepayment"
			else
			if (InvoiceType.PrepaymentCredit)
				return "PrepaymentCredit"
			else
			if (InvoiceType.MatchPrepayment)
				return "MatchPrepayment"

		DerivedTransactionCount is a DerivedField
			type is Numeric 7
			return 1

		MultiplePayablesInvoicePaymentRelExists	is a DerivedField
			type is Boolean
			restricted
			if (action type.Create)
				return false
			return (instance count of MultiplePayablesInvoicePaymentRel > 1)

		DerivedExchangeDate	is a DerivedField
			type is Date
			if  (IsChargeback
			and  PayablesInvoiceOriginalRel exists)
				return PayablesInvoiceOriginalRel.InvoiceAmount.ExchangeDate
			else
			if  (MatchProcessType.Expense
			or   MatchProcessType.ServiceContract)
				return InvoiceDate
			else
			if (FirstPurchaseOrder exists)
				if  (FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					if (MatchObjectID entered)
						return first PurchaseOrderReceiptLineRel.ReceivedDate
					else
					if  (PurchaseOrderReceiptsRel.ReceivedDate entered)
						return last PurchaseOrderReceiptsRel.ReceivedDate
				if  (FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry)
					return first FirstPurchaseOrder.PurchaseOrderDate
			else
			if (MatchPurchaseOrderInvoicesRel exists)
				if  (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					if (MatchObjectID entered)
						return first PurchaseOrderReceiptLineRel.ReceivedDate
					else
					if  (PurchaseOrderReceiptsRel.ReceivedDate entered)
						return last PurchaseOrderReceiptsRel.ReceivedDate
				if  (first MatchPurchaseOrderInvoicesRel.PurchaseOrder.CurrencyExchangeSetPoint.Entry)
					return first MatchPurchaseOrderInvoicesRel.PurchaseOrder.PurchaseOrderDate
			else 
			if (VendorReturn entered
			and first VendorReturnLinesRel.OriginalPurchaseOrder entered)
				if  (first VendorReturnLinesRel.OriginalPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					if  (PurchaseOrderReceiptsRel.ReceivedDate entered)
						return last PurchaseOrderReceiptsRel.ReceivedDate
				if  (first VendorReturnLinesRel.OriginalPurchaseOrder.CurrencyExchangeSetPoint.Entry)
					return first VendorReturnLinesRel.OriginalPurchaseOrder.PurchaseOrderDate

			return InvoiceDate

		DerivedPaymentAmount	is a DerivedField
			type is like InternationalAmount
			if (!action type.Create)
				return sum PaymentsHaveBeenAppliedRel.DerivedCheckAmount				

		DerivedPaymentDate	is a DerivedField
			type is Date
			if (!action type.Create)
				return first PaymentsHaveBeenAppliedRel.CheckDate

 		DerivedPaymentNumber	is a DerivedField
 			type is like TransactionNumber
			if (!action type.Create)
				return first PaymentsHaveBeenAppliedRel.TransactionNumber

		DerivedPayImmediately is a DerivedField
			type is Boolean
			default label is "PayImmediately"
			return last PayablesInvoicePaymentRel.PayImmediately

		DerivedSeparatePayment is a DerivedField
			type is Boolean
			default label is "SeparatePayment"
			return last PayablesInvoicePaymentRel.SeparatePayment

		AutomaticallyApproved is a MessageField
			restricted
			"AutomaticallyApproved"






































































































		VoucherNumberDisplay is a DerivedField
			type is Alpha 15
			default label is "Voucher"

			if (VoucherNumber.Prefix entered)
				return VoucherNumber
			else
				return VoucherNumber.Sequence

		DerivedMouseOverInvoiceComment is a DerivedField	
			type is MessageField
			restricted
			if (MultipleCommentsExist)
				return MultipleCommentsMessage
			if (CommentsExist)
				return "Comment Exists: " + FirstInvoiceCommentMessage
			return blank

		MultipleCommentsMessage is a MessageField			
			restricted
			"MultipleCommentsExist;OpenInvoiceToView"

		FirstInvoiceCommentMessage is a DerivedField		
			type is MessageField
			restricted
			return first PayablesInvoiceCommentRel.Title	

		NetPayableAmount is a DerivedField
			type is like InternationalAmount
			classic name is NET-PAYABLE

			return (InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount)

		TaxOutOfBalanceAmount is a DerivedField
			type is like CurrencyAmount
			default label is "TaxOut_ofBalanceAmount"
			classic name is TAX-OUT-BAL
			if (!TaxEntityUsesThirdPartyTax)				
				if (TaxAmount entered
				or  PayablesInvoiceTaxRel.TotalInvoicedTaxAmount entered)		
					return (PayablesInvoiceTaxRel.TotalInvoicedTaxAmount - TaxAmount)	

				return (0)
			if (TaxAmount entered)	
				return (RoundedTotalTaxAmount - TaxAmount)

		TaxableOutOfBalanceAmount is a DerivedField

			type is like CurrencyAmount
			classic name is TXB-OUT-BAL
			restricted
			if (!TaxEntityUsesThirdPartyTax)				
				if (TaxCode.TaxType.TaxTableCode)	
					return 0						
				return (TaxableAmount - PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount)
			if (TaxableAmount < 0		
			and TotalTaxableAmount > 0)
				TotalTaxableAmount = TotalTaxableAmount * -1
			return (TaxableAmount - TotalTaxableAmount)

		InvoiceGoodsAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (InvoiceAmount.CurrencyAmount - sum TaxCodeAndAOCDistributionRel.DistributionAmount.CurrencyAmount)

		PaymentOutOfBalanceAmount      is a DerivedField
			type is like CurrencyAmount
			classic name is PMT-OUT-BAL
			return (TotalPaymentAmount.TransactionTotal - InvoiceAmount.CurrencyAmount)

		DetailExtendedAmount is a DerivedField
			type is like InternationalAmount

			if (!action type.Create)
				return (sum PayablesInvoiceDetailRel.DerivedExtendedAmount)

		DetailExtendedAmountForSpread is a DerivedField
			type is like InternationalAmount
			return (sum PayablesInvoiceDetailRel.DerivedExtendedAmount)

		DistributionOutOfBalanceAmount is a DerivedField
			type is like CurrencyAmount
			classic name is DIST-OUT-BAL
			return (TotalDistributionAmount.TransactionTotal - InvoiceAmount.CurrencyAmount)

		OutOfBalance                   is a ConditionalField
			type is AlphaUpper size 1
			classic name is OUT-BAL-FLAG

			if (IsOutOfBalance)
				"*"
			else
				blank

		InvoiceStatus                  is a MessageField
			"<Status>"

		HasPOCostMessages is a DerivedField
			type is MessageField
			default label is "HasPOCostMessages"

			if (MatchStatus.POCostMessagesExist)
				return "Yes"
			else
				return "No"

		DerivedPoolOption is a DerivedField
			type is like PoolOption
			if (!Vendor.PoolOption.UseCompany)
				return Vendor.PoolOption
			return MatchCompanyRel.PoolOption


		HasReceiptsInPool is a DerivedField
			type is MessageField
			default label is "HasReceiptsInPool"

			if  (Vendor.PoolOption entered)
				LocalPoolOption = Vendor.PoolOption
			else
				LocalPoolOption = MatchCompanyRel.PoolOption

			if  ((LocalPoolOption.CompanyVendor
			and   OpenReceiptsPool1Rel exists)
			or   (LocalPoolOption.CompanyVendorPo
			and   OpenReceiptsPool2Rel exists)
			or   (LocalPoolOption.CompanyVendorPoShipTo
			and   OpenReceiptsPool3Rel exists))
				return "Yes"
			else
				return "No"

		ReverseSignAmount              is a DerivedField
			type is like InternationalAmount
			classic name is REV-SIGN-AMT
			restricted
			return (InvoiceAmount.CurrencyAmount * -1)

		InvoiceTypeShortName           is a DerivedField
			type is MessageField
			classic name is TYPE-SHORT-NME
			restricted
			if (IsRegularInvoice)
				return blank
			else
			if (IsCreditInvoice)
				return "CREDIT"
			else
			if (IsDebitMemo)
				return "DEBIT"
			else
			if (IsPrepayment)
				return "PREPAY"
			else
				return blank

		SumDistributionTaxableAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (MatchProcessType entered
			and !MatchProcessType.Expense)
				return sum TotalTaxableDistributionRel.TaxableAmount  
			else
				return blank

		SumOneSourceInvoicedTaxDistribAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount

		SumOneSourceAccruedTaxDistribAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return sum MatchOneSourceAccruedDistributionsRel.DistributionAmount.CurrencyAmount

		InvoiceHoldCode is a DerivedField
			type is like PayablesHoldCode

			if (!action type.Create
			and PayablesOnHoldPaymentRel exist)
				return first PayablesOnHoldPaymentRel.HoldCode
			else
				return blank

		InvoiceHoldCodeDescription is a DerivedField
			type is like Description
			default label is "Description"
			if (!action type.Create
			and PayablesOnHoldPaymentRel exist)
				return first PayablesOnHoldPaymentRel.HoldCode.Description
			else
				return blank

		InvoiceOnHoldMessage is a MessageField
			"OnHold"

		DerivedVendorReturnHoldCode is a DerivedField
			type is like PayablesHoldCode
			restricted
			if (VendorReturnRel.VendorLocationRel.VendorClaimHoldCode entered)
				return VendorReturnRel.VendorLocationRel.VendorClaimHoldCode
			if (Vendor.VendorClaimHoldCode entered)
				return Vendor.VendorClaimHoldCode
			return MatchCompanyRel.VendorClaimHoldCode

		InvoiceOutOfBalance is a DerivedField
			type is Alpha size 1

			InvoiceOutOfBalance = blank
			LocalOutOfBalanceCount = 0
			LocalOutOfBalanceFlag = blank

			if (BypassMatch)
				return blank
			if (PaymentAmountOutOfBalance)

				LocalOutOfBalanceCount += 1
				LocalOutOfBalanceFlag = "P"
			if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount)

				LocalOutOfBalanceCount += 1
				LocalOutOfBalanceFlag = "D"
			if (TaxEntityUsesInforTax											
			and PayablesInvoiceTaxRel.TotalInvoicedTaxAmount != TaxAmount)		

				LocalOutOfBalanceCount += 1
				LocalOutOfBalanceFlag = "T"
			if (TaxEntityUsesThirdPartyTax					
			and DerivedTaxMethodInvOrAcc.Invoiced			
			and RoundedTotalTaxAmount != TaxAmount)			

				LocalOutOfBalanceCount += 1
				LocalOutOfBalanceFlag = "T"
			if (TaxEntityRel.TaxableAmountEdit
			and MatchProcessType.Expense
			and !TaxEntityUsesThirdPartyTax			
			and PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount != TaxableAmount		
			and PayablesInvoiceTaxRel.TotalAccruedTaxableAmount  != TaxableAmount		
			and TotalTaxableAmount != TaxableAmount)

				LocalOutOfBalanceCount += 1
				LocalOutOfBalanceFlag = "T"
			if (LocalOutOfBalanceCount > 1)

				return "*"
			else

				return LocalOutOfBalanceFlag

		DerivedPaymentPriority is a DerivedField
			type is Numeric size 2
			restricted
			if (PayablesInvoicePaymentRel exist)
				return first PayablesInvoicePaymentRel.PaymentPriority
			else
			if (Vendor.PaymentPriority entered)
				return Vendor.PaymentPriority
			else
			if (Vendor.VendorClass.PaymentPriority entered)
				return Vendor.VendorClass.PaymentPriority
			else
				return 1

		InvoiceTotalsOutOfBalance is a DerivedField
			type is Boolean
			restricted
			if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
			or  TotalDistributionAmount.FunctionalTotal != InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount)
				return true
			return false

		CreateBySupplierInvoiceSubmittedMessage is a MessageField
			restricted
			"ThisInvoiceHasBeenSubmitted"

		CreateBySupplierDerivedSubmitMessage is a ConditionalField
			type is Alpha 250
			restricted
			if (SupplierCreatedInvoiceStatus.SubmittedSupplierCreatedInvoice)
				CreateBySupplierInvoiceSubmittedMessage
			else
				SupplierGroupRel.InvoiceSummaryText

		ChangeCompleteMessage is a DerivedField
			type is Alpha size 100
			restricted
			if (ExpenseAmountOutOfBalance)		
				return InvoiceIsOutOfBalance

		RemainingRecurrences is a DerivedField
			type is Numeric size 3
			if (IsRecurringInvoice)
				return (NumberOfRecurringInvoices - Suffix)

		DisplayRemainingRecurrences is a DerivedField
			type is MessageField
			default label is "RemainingRecurrences"
			if (IsRecurringInvoice)
				return RemainingRecurrences
			else
				return blank

		NumOfInvoicePayments is a DerivedField
			type is Numeric 10
			restricted
			return instance count of PayablesInvoicePaymentRel

		NumberOfLinkedPurchaseOrders is a DerivedField
			type is Numeric 3
			restricted
			return instance count of MatchPurchaseOrderInvoicesRel

		DerivedTestingOn is a DerivedField
			type is Boolean
			restricted
			return false	

		InvoiceOutOfBalanceDifference is a DerivedField
			type is like InternationalAmount

			return (TotalDistributionAmount.TransactionTotal - InvoiceAmount.CurrencyAmount)

		InvoiceTaxOutOfBalanceDifference is a DerivedField
			type is like InternationalAmount

			return (RoundedTotalTaxAmount - TaxAmount)

		DerivedAppliedAmount	is a DerivedField
			type is like InternationalAmount

			default label is "AppliedAmount"
			if (PayablesCreditMemoRel exists)
				return (sum PayablesCreditMemoRel.AmountApplied)
			if (PayablesCreditMemo2Rel exists)
				return (sum PayablesCreditMemo2Rel.AmountApplied)

		DerivedUnappliedAmount	is a DerivedField
			type is like InternationalAmount

			default label is "UnappliedAmount"
			if (InvoiceAmount.CurrencyAmount < 0)
				return ((InvoiceAmount.CurrencyAmount * -1) - DerivedAppliedAmount)
			return (InvoiceAmount.CurrencyAmount - DerivedAppliedAmount)

		DerivedAmountToBePaid is a DerivedField
	  		type is like InternationalAmount
			return (InvoiceAmount.CurrencyAmount - AmountPaid)

		NoConsolidationPhrase is a LabelField
			restricted
			"'NoSpendConsolidation'"

		ConsolidationDateRangePhrase is a LabelField
			restricted
			"ConsolidationDateRange"

		ConsolidateLastTwelveMonthsPhrase is a LabelField
			restricted
			"'ConsolidateLastTwelveMonths'"

		OpenMessage is a MessageField
			restricted
			"Open"

		PaidMessage is a MessageField
			restricted
			"Paid"

		DerivedStatus is a ConditionalField
			type is Text

			if (Status = 0
			or  Status = 1)
				OpenMessage
			else
				PaidMessage

		SingleSpace is a StringField
			type is Alpha size 1
			restricted
			" "

		SemiColonSpace is a StringField
			type is Alpha size 1
			restricted
			"; "

		ApinwsTaxIndSwitch is a DerivedField
			type is Boolean
			restricted
			if (TaxablePayablesInvoiceDistributionRel exists)
				return true
			else
				return false

		DerivedTaxTerm is a DerivedField			
			type is like TaxTerms
			restricted
			if (TaxEntityRel.UseTaxCodeAccounts)
				return EntityTaxCodeRel.TaxTerms
			else
				return TaxEntityRel.TaxTerms

		DerivedEffectiveDate is a DerivedField		
			type is Date
			restricted
			if (TransientTaxPointDate entered)	
				return TransientTaxPointDate
			if (PayablesInvoiceTaxRel.TaxPointDate entered)
				return PayablesInvoiceTaxRel.TaxPointDate
			if (TaxCode.DerivedTaxPoint = "I")
				return InvoiceDate
			if (TaxCode.DerivedTaxPoint = "P")
				return blank	
			if (TaxCode.DerivedTaxPoint = "G")
				return DistributionDate

		DerivedTaxPointDate is a DerivedField	
			type is Date
			restricted
			if (TransientTaxPointDate entered)
				return TransientTaxPointDate
			else
				return DerivedEffectiveDate

		DerivedMatchAmount is a DerivedField
			type is like InternationalAmount

			if (PayablesMatchInvoiceDetailGoodsRel exists)
				return DerivedInvoiceDetailAmount
			else
			if (MatchProcessType.AOCOnly
			or  MatchProcessType.Expense
			or  MatchProcessType.Service
			or  MatchProcessType.ServiceContract)
				return blank
			else
			if  (MatchProcessType.DropShip					
			and  PayablesInvoiceDetailRel exists)
				return DerivedInvoiceDetailAmount
			else
			if (TaxCode entered
			and TaxAdjustment.Calculate)
				return InvoiceAmount.CurrencyAmount - (DerivedTotalAOCAmount + DerivedMatchTotalDistributionAmount + DerivedTotalServiceAmount)
			else
				return InvoiceAmount.CurrencyAmount - (DerivedTotalAOCAmount + DerivedMatchTotalDistributionAmount + DerivedTotalServiceAmount + TaxAmount)

		DerivedCashPostingCompany is a DerivedField	
			type is like Company
			restricted
			if (CashCode.DefaultPostCompany entered)
				return CashCode.DefaultPostCompany
			return PayGroup.PostCompany


		DerivedCubeCount is a DerivedField
			type is Numeric 9
			default label is "InvoiceCount"

			return 1

		DerivedCountByAuthCode is a DerivedField
			type is Numeric size 9
			default label is "OpenInvoiceCountByAuthorityCode"
			return 1

		DerivedUnpaidAmount is a DerivedField
			type is like InternationalAmount
				precision is RoundedNumberOfDecimals	
			default label is "UnpaidAmount"

			if (PaidInvoice)
				return 0
			else
				return InvoiceAmount.CurrencyAmount

		CurrentDate is a DerivedField
			type is Date
			restricted
			return current corporate date

		CurrentPeriod is a DerivedField
			type is Numeric 2
			restricted
			return CurrentDate week

		CurrentYear is a DerivedField
			type is Numeric 4
			restricted
			return CurrentDate year

		DueDatePeriod is a DerivedField
			type is Numeric 2
			default label is "Week /Year"
			restricted
			return DueDate week

		DueDateYear is a DerivedField
			type is Numeric 4
			restricted
			return DueDate year

		DerivedAutoAssignedAPClerkName is a DerivedField
			type is Alpha 230

			include SetDefaultClerkLocalFields
			return LocalAPClerkName

		DerivedAPClerkName is a DerivedField
			type is Alpha 250
			default label is "Processor"

			if (APClerk entered)
				return APClerk.PreferredSimplePresentationName
			else
				return ""

		DerivedNotifyAPClerkOnReject is a DerivedField
			type is Boolean
			restricted
			if (APClerk entered)
				return APClerk.NotifyWhenInvoiceRejected
			else
				return false

		DerivedAPClerkEmailAddress is a DerivedField 
			type is EmailAddressField with multiple addresses
			holds pii
			restricted
			if (APClerk entered)
				return APClerk.EmailAddress
			else
				return ""

		DerivedProcessingTeamEmailAddressList is a DerivedField		
			type is Text
			restricted
			include BuildProcessingTeamEmailAddressList
			return LocalTeamEmailAddressList

		DerivedProcessingTeamToEmail is a DerivedField				
			type is Text
			restricted
			if (APClerk.EmailAddress entered)
				return APClerk.EmailAddress
			if (ProcessingTeam entered)
				return DerivedProcessingTeamEmailAddressList
			return ""

		DerivedTeamEmailAddressList is a DerivedField 
			type is Text
			holds pii
			restricted
			include BuildTeamEmailAddressList
			return LocalTeamEmailAddressList

		DerivedRoleEmailAddressList is a DerivedField 
			type is Text
			holds pii
			restricted
			include BuildRoleEmailAddressList
			return LocalRoleEmailAddressList

		DerivedToEmail is a DerivedField 
			type is Text
			holds pii
			restricted
			if (ResponsibleRole entered)
				return DerivedRoleEmailAddressList
			else
			if (ResponsiblePerson entered)
				return ResponsiblePerson.EmailAddress
			else
			if (ResponsibleTeam entered)
				return DerivedTeamEmailAddressList
			else
				return ""

		DerivedEmailApproverLabel is a DerivedField
			type is MessageField
			restricted
			if (ResponsibleTeamEntered)
				return "Email Current Approvers"
			else
			if (ResponsibleRoleEntered
			and !ResponsiblePersonEntered)
				return "Email Current Approvers"
			else
			if (ResponsiblePersonEntered)
				return "Email Current Approver"
			else
				return ""

		DerivedApprovalLinkback is a MessageField
			restricted
			"<linkback(webapp is Approver navigation is InvoiceApproval text is \"here\")>"

		DerivedEmailLink is a DerivedField
			type is Alpha size up to 1000
			restricted
			if (Company.VendorGroup.InvoiceApprovalIncludeLink)
				return "Click " + DerivedApprovalLinkback + " to review the Invoice."
			else
				return ""
			
		DerivedEscalatedMessage is a MessageField
			restricted
			"ThisInvoiceHasBeenEscalated"
		
		DerivedEscalatedText is a DerivedField
			type is Alpha size up to 50
			restricted
			if (LocalEscalated)
				return DerivedEscalatedMessage
			return ""

		DerivedFirstMessageText is a DerivedField
			type is Alpha size 25
			restricted
			return first MatchInvoiceMessageRel.DerivedMessageType + " Message"

		DerivedDocumentManagementButtonText is a DerivedField
			type is MessageField
			restricted
			if (Company.VendorGroup.DocMgmtPartner.MHCSoftware)
				return "Open Image Express"
			else
			if (Company.VendorGroup.DocMgmtPartner.HylandSoftware)
				return "Open OnBase"
			else
			if (Company.VendorGroup.DocMgmtPartner.AscendSoftware)
				return "Open SmartTouch AP"
			else
			if (Company.VendorGroup.DocMgmtPartner.PerceptiveSoftware)
				return "Open Perceptive"
			else
			if (IDMDocumentExists)	
				return "Open Infor Document Management"
			else
				return "Document Management"

		DerivedFormTitle is a DerivedField
			type is MessageField
			restricted
			if (VendorInvoiceEntered)
				if (Suffix entered)
					return DerivedFormTitleInvoiceWithSuffixAndVendor
				else
					return DerivedFormTitleInvoiceAndVendor			//" " + DerivedFormTitleInvoiceAndVendor
			else
			if (VendorEntered)
				return DerivedFormTitleVendorOnly	//" " + DerivedFormTitleVendorOnly
			else
			if (Invoice entered)
				if (Suffix entered)
					return DerivedFormTitleInvoiceWithSuffixOnly	//" " + DerivedFormTitleInvoiceOnly
				else
					return DerivedFormTitleInvoiceOnly	//" " + DerivedFormTitleInvoiceOnly
			else
				return DerivedCreateMessage

		DerivedCreateMessage is a LabelField
			restricted
			"CreateInvoice"

		DerivedFormTitleInvoiceAndVendor is a LabelField
			restricted
			"Invoice<Invoice>_for_<Vendor.VendorName>"

		DerivedFormTitleInvoiceWithSuffixAndVendor is a LabelField
			restricted
			"Invoice<Invoice>-<Suffix>_for_<Vendor.VendorName>"

		DerivedFormTitleVendorOnly is a LabelField
			restricted
			"Invoice_for_<Vendor.VendorName>"

		DerivedFormTitleInvoiceOnly is a LabelField
			restricted
			"Invoice<Invoice>"

		DerivedFormTitleInvoiceWithSuffixOnly is a LabelField
			restricted
			"Invoice<Invoice>-<Suffix>"

		DerivedAppliedCreditCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesCreditMemoRel exists)
				return "(" + instance count of PayablesCreditMemoRel + ")"
			else
				return ""

		DerivedAppliedCreditIndicator is a DerivedField		
			type is Alpha 1
			if (PayablesCreditMemoRel exists)
				return "*"
			else
				return ""

		DerivedAppliedInvoiceCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesCreditMemo2Rel exists)
				return "(" + instance count of PayablesCreditMemo2Rel + ")"
			else
				return ""

		DerivedAppliedInvoiceIndicator is a DerivedField		
			type is Alpha 1
			if (PayablesCreditMemo2Rel exists)
				return "*"
			else
				return ""

		DerivedApproverCount is a DerivedField
			type is Numeric 4
			restricted
			return instance count of FinanceResourceInvApprovalRel

		DerivedDistributionCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceDistributionDistributionTypeDistributionsRel exists)
				return "(" + instance count of PayablesInvoiceDistributionDistributionTypeDistributionsRel + ")"
			else
				return ""

		DerivedDistributionIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoiceDistributionDistributionTypeDistributionsRel exists)
				return "*"
			else
				return ""

		DerivedPaymentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoicePayment set exists)
				return "(" + instance count of PayablesInvoicePayment set + ")"
			else
				return ""

		DerivedPaymentIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoicePayment set exists)
				return "*"
			else
				return ""

		DerivedDetailCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceDetailRel exists)
				return "(" + instance count of PayablesInvoiceDetailRel + ")"
			else
				return ""

		DerivedDetailIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoiceDetailRel exists)
				return "*"
			else
				return ""

		DerivedDetailAOCCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceAddOnChargeRel exists)
				return "(" + instance count of PayablesInvoiceAddOnChargeRel + ")"
			else
				return ""

		DerivedDetailAOCIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoiceAddOnChargeRel exists)
				return "*"
			else
				return ""

		DerivedMessageCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MatchInvoiceMessageRel exists)
				return "(" + instance count of MatchInvoiceMessageRel + ")"
			else
				return ""

		DerivedMessageIndicator is a DerivedField
			type is Alpha 1
			if (MatchInvoiceMessageRel exists)
				return "*"
			else
				return ""

		DerivedRelatedDocumentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceDocument set exists)
				return "(" + instance count of PayablesInvoiceDocument set + ")"
			else
				return ""

		DerivedRelatedDocumentIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoiceDocument set exists)
				return "*"
			else
				return ""

		DerivedDocumentationIndicator is a DerivedField		
			type is Alpha 1
			if (PayablesInvoiceDocument set exists
			or  PayablesInvoiceComment set exists)
				return "*"
			else
				return ""

		DerivedErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceError set exists)
				return "(" + instance count of PayablesInvoiceError set + ")"
			else
				return ""

		DerivedErrorIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoiceError set exists)
				return "*"
			else
				return ""

		DerivedAuditCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceAudit set exists)
				return "(" + instance count of PayablesInvoiceAudit set + ")"
			else
				return ""

		DerivedAuditIndicator is a DerivedField	
			type is Alpha 1
			if (PayablesInvoiceAudit set exists)
				return "*"
			else
				return ""

		DerivedCompanyNameID is a MessageField
			default label is "Company"
			"<Company.CompanyAndName>"		

		DerivedVendorNameID	is a DerivedField
			type is Alpha size up to 132	
			default label is "Vendor"
			if (Vendor entered)	
				return Vendor.VendorName + " (" + Vendor + ")"
			else
				return ""

		DerivedInvoiceType is a DerivedField
			type is Alpha 10
			default label is "InvoiceType"

			if (InvoiceType.Invoice)
				return "Invoice"
			else
			if (InvoiceType.CreditMemo)
				return "Credit Memo"
			else
			if (InvoiceType.DebitMemo)
				return "Debit Memo"
			else
				return ""

		DerivedClearingInvoiceType is a DerivedField
			type is AlphaUpper 1
			default label is "InvoiceType"

			if (InvoiceType.Invoice)
				return "I"
			else
			if (InvoiceType.CreditMemo)
				return "C"
			else
			if (InvoiceType.DebitMemo)
				return "D"
			else
			if (InvoiceType.Prepayment)
				return "P"
			else
			if (InvoiceType.PrepaymentCredit)
				return "Y"
			else
				return ""

		MultiplePurchaseOrderMsg is a MessageField
			restricted
			"InvoiceHasMultiplePurchaseOrders"

		DerivedProcessLevel is a DerivedField
			type is Alpha 40
			default label is "ProcessLevel"

			if (ProcessLevel entered)
				return ProcessLevel.Name + " (" + ProcessLevel + ")"
			else
				return ""

		DerivedRemitToNameID is a DerivedField
			type is Alpha size up to 138	
			default label is "RemitToLocation"

			if (RemitToCode entered)
				return RemitToCode.VendorName + " (" + RemitToCode + ")"
			else
				return ""


		DerivedTermCode is a DerivedField
			type is Alpha size up to 70
			default label is "TermCode"

			if (TermsCode entered)
				return TermsCode.Description + " (" + TermsCode + ")"
			else
				return ""

		DerivedInvoiceCurrency is a DerivedField
			type is Alpha size up to 70
			default label is "Currency"

			if (InvoiceCurrency entered)
				return InvoiceCurrency.Description + " (" + InvoiceCurrency + ")"
			else
				return ""

		DerivedDistributionCode is a DerivedField
			type is Alpha 45
			default label is "DistributionCode"

			if (DistributionCode entered)
				return DistributionCode.Description + " (" + DistributionCode + ")"
			else
				return ""

		DerivedReportableAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			if (!action type.Create)
				return sum MultiplePayablesInvoicePaymentRel.ReportableIncomeAmount			

		DerivedUnitsAmount is a DerivedField		
			type is like UnitsAmount
			restricted
			if (AccountRequiresUnits)
				return 1
			return 0

		DerivedTaxCode is a DerivedField
			type is Alpha 45

			default label is "TaxCode"
			if (TaxCode entered)
				return TaxCode.TaxCode.Description + " (" + TaxCode + ")"
			else
				return ""


		DerivedTotalPaymentAmount is a DerivedField
			type is like CurrencyAmount
			restricted
			return (sum MultiplePayablesInvoicePaymentRel.PaymentAmount.CurrencyAmount)	


		DerivedMatchTotalDistributionAmount is a DerivedField
			type is like CurrencyAmount
			restricted
			if (!action type.Create)
				return (sum MatchNonAccruedTaxDistributionsRel.DistributionAmount.CurrencyAmount)

		DerivedMatchAdditionalDistributionsAmount is a DerivedField  
			type is like CurrencyAmount
			return (sum MatchAdditionalDistributionsRel.DistributionAmount.CurrencyAmount)

		DerivedMatchInvoiceTaxAmount is a DerivedField
			type is like InternationalAmount
			default label is "InvoicedTaxAmount"
			if (MatchProcessType.Expense)
				return TaxAmount
			else
			if (TaxEntityUsesSabrix)
				return SumOneSourceInvoicedTaxDistribAmount
			else
				return POTaxAmount + DerivedMatchAdditionalTax

		DerivedMatchInvoiceAccruedTaxAmount is a DerivedField
			type is like InternationalAmount
			default label is "AccruedTaxAmount"
			if (TaxEntityUsesSabrix
			or  TaxAdjustment.Calculate)
				return SumOneSourceAccruedTaxDistribAmount
			else
				return TaxAmount - POTaxAmount

		DerivedMatchMiscellaneousTaxAmount is a DerivedField
			type is like InternationalAmount

            initialize LocalAmount
			for each MiscPayablesInvoiceAddOnChargeRel
				if (each.TaxCode.TaxType.TaxTableCode)

					initialize LocalTableTaxAmount
					initialize CalculateTax

					CalculateTax.TaxEntity 								= Company.AccountingEntity
					CalculateTax.TaxCode 								= each.TaxCode
					CalculateTax.ProductTaxCategory						= each.ProductTaxCategory

					CalculateTax.TaxableAmount							= each.TotalDistributionAmount
					CalculateTax.InvoiceAmount							= each.TotalDistributionAmount
					CalculateTax.System									= "AP"
					CalculateTax.TransactionCurrency					= PayablesInvoice.InvoiceCurrency
					CalculateTax.BaseCurrency							= Company.Currency
					CalculateTax.Location								= each.Location
					CalculateTax.PostalAddress							= each.InventoryLocationRel.PostalAddress
					if  (VendorLocationRel exists)
						CalculateTax.FromPostalAddress					= VendorLocationRel.CurrentAddressRel.PostalAddress
					else
						CalculateTax.FromPostalAddress					= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress

					CalculateTax.InvoiceDate							= InvoiceDate
					CalculateTax.PaymentDate 							= InvoiceDate
					CalculateTax.GeneralLedgerDate 						= InvoiceDate
					CalculateTax.TaxDate								= InvoiceDate
					CalculateTax.TaxPointDate							= DerivedTaxPointDate	
					CalculateTax.Function			 					= CalculateTax.Function.CalculateTax
					include LoadVertexGlobalInputFields
					include DisplayCalculateTaxInput
					LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax
					include DisplayCalculateTaxOutput
					LocalCounter = 1
					while (LocalCounter <= 8
					and    CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxCode entered)
						if (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].AccrualFlag = "I")
							LocalTableTaxAmount 						+= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount5DP
						LocalCounter += 1
					round LocalTableTaxAmount to nearest DerivedRoundTo
					LocalAmount											+= LocalTableTaxAmount
				else
			    if (each.IsInvoicedTax)
			        LocalAmount += each.TaxAmount

			round LocalAmount to nearest DerivedRoundTo
			return LocalAmount

		DerivedMatchTotalTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (TotalTaxAmount - sum MatchTaxDistributionRel.DistributionAmount.CurrencyAmount)

		DerivedRemainingDistributionAmount is a DerivedField
			type is like CurrencyAmount
			return (InvoiceAmount.CurrencyAmount - TotalDistributionAmount.TransactionTotal)

		DerivedApprovalComments is a DerivedField
			type is Alpha size up to 120
			restricted
			if (LastApprovalComment entered)
				return "Comment: " + LastApprovalComment
			else
				return ""

		DerivedNextRoutingApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			SetTransientFields = false		

			include GetNextRoutingApprovalLevel

			if (RoutingCode.AssignApproversUsingAuthorityCodes)

				if (LocalRoutingApprovalLevel > 0)
					LocalApprovalLevelsChecked = LocalRoutingApprovalLevel - 1

				include BuildLocalRoleApproverActorList


				while (LocalRoutingApprovalLevel > 0
				and	   (!LocalFinanceResourceInvApprovalRel exists
				or	   (LocalFinanceResourceInvApprovalRel exists
				and	    LocalApproverList not entered))
				and	   LocalApprovalLevelsChecked <= RoutingCode.DerivedLevelCount)
					increment LocalApprovalLevelsChecked
					include GetNextRoutingApprovalLevel
					include BuildLocalRoleApproverActorList

				LocalApprovalLevelsChecked = 0

			return LocalRoutingApprovalLevel

		DerivedNextLocalRoutingApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			include GetNextTransientRoutingApprovalLevel
			if (TransientRoutingCode.AssignApproversUsingAuthorityCodes)
				if (LocalRoutingApprovalLevel > 0)
					LocalApprovalLevelsChecked = LocalRoutingApprovalLevel - 1
				while (LocalRoutingApprovalLevel > 0
					and !TransientLocalFinanceResourceInvApprovalRel exists
					and LocalApprovalLevelsChecked <= TransientRoutingCode.DerivedLevelCount)
					increment LocalApprovalLevelsChecked
					include GetNextTransientRoutingApprovalLevel
				LocalApprovalLevelsChecked = 0
			return LocalRoutingApprovalLevel

		DerivedRoutingApprovalJSON is a DerivedField
			type is Text
			SetTransientFields = true
			TransientInvoiceRoutingCodeGroupLevel = InvoiceRoutingCodeGroupLevel
			TransientRoutingCode = RoutingCode
			LocalRoutingApprovalLevel = RoutingApprovalLevel
			LocalCounter = LocalRoutingApprovalLevel
			DerivedRoutingApprovalJSON = "{ "
			while (true)
				DerivedRoutingApprovalJSON += "\"" + TransientRoutingCode + "\": {"
				while (LocalRoutingApprovalLevel > 0)
					if (LocalMilestoneCounter > 0)
						DerivedRoutingApprovalJSON += ","
					increment LocalMilestoneCounter
					DerivedRoutingApprovalJSON += "\"" + LocalRoutingApprovalLevel + "\": {"
					DerivedRoutingApprovalJSON += "\"Label\": \"Level "+ LocalCounter
					if (first TransientLocalInvoiceRoutingCodeLevelRel.Approver entered)
						DerivedRoutingApprovalJSON += " - " + first TransientLocalInvoiceRoutingCodeLevelRel.Approver.PreferredGivenName
						DerivedRoutingApprovalJSON += " " + first TransientLocalInvoiceRoutingCodeLevelRel.Approver.PreferredFamilyName
					else
					if (first TransientLocalInvoiceRoutingCodeLevelRel.ApprovalTeam entered)
						DerivedRoutingApprovalJSON += " - " + first TransientLocalInvoiceRoutingCodeLevelRel.ApprovalTeam.Description
					else
					if (first TransientLocalInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode entered)
						DerivedRoutingApprovalJSON += " - " + first TransientLocalInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode.Description
					DerivedRoutingApprovalJSON += "\", "
					DerivedRoutingApprovalJSON += "\"Approver\": \"" + first TransientLocalInvoiceRoutingCodeLevelRel.Approver + "\", "
					DerivedRoutingApprovalJSON += "\"Role\": \"" + first TransientLocalInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode + "\", "
					DerivedRoutingApprovalJSON += "\"Actor\": \"" + first TransientLocalInvoiceRoutingCodeLevelRel.Approver.FinanceResourceActor + "\", "
					DerivedRoutingApprovalJSON += "\"ActorList\": ["
					LocalFirstApproverAssigned = false
					for each TransientLocalFinanceResourceInvApprovalRel
						if (LocalFirstApproverAssigned)
							DerivedRoutingApprovalJSON += ", \"" + each.FinanceResource.FinanceResourceActor + "\""
						else
							DerivedRoutingApprovalJSON += "\"" + each.FinanceResource.FinanceResourceActor + "\""
							LocalFirstApproverAssigned = true
					DerivedRoutingApprovalJSON += "], "
					DerivedRoutingApprovalJSON += "\"ApprovalTeam\": \"" + first TransientLocalInvoiceRoutingCodeLevelRel.ApprovalTeam + "\", "
					DerivedRoutingApprovalJSON += "\"TeamActorList\": ["
					LocalFirstApproverAssigned = false
					for each FinanceTeamMembersFromTransientLocalApprovalLevelRel
						if (LocalFirstApproverAssigned)
							DerivedRoutingApprovalJSON += ", \"" + each.FinanceTeamMember.TeamMember.FinanceResourceActor + "\""
						else
							DerivedRoutingApprovalJSON += "\"" + each.FinanceTeamMember.TeamMember.FinanceResourceActor + "\""
							LocalFirstApproverAssigned = true
					DerivedRoutingApprovalJSON += "], "
					DerivedRoutingApprovalJSON += "\"EscalationDays\": " + DerivedLocalApproverEscalationDays + "}"
					LocalRoutingApprovalLevel = DerivedNextLocalRoutingApprovalLevel
					if (LocalRoutingApprovalLevel = 0)
						LocalMilestoneCounter = 0
					increment LocalCounter
				if (TransientInvoiceRoutingCodeGroupLevel.NextCodeGroupLevelExists)
					TransientInvoiceRoutingCodeGroupLevel	= TransientInvoiceRoutingCodeGroupLevel.first NextInvoiceRoutingCodeGroupLevelRel.InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
					TransientRoutingCode					= TransientInvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
					for each TransientRoutingCode.ActiveInvoiceRoutingCodeResourceRel
						if (TransientRoutingCode.InitialApproverSelectionMethod.SpecificApprovalLevel)
							if (TransientRoutingCode.InitialApprovalLevel.ApprovalLevel = each.ApprovalLevel)
								LocalRoutingApprovalLevel = each.ApprovalLevel
								end for each
						else
							if (TransientRoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
							or	LocalExtendedAmount <= each.MaxApprovalAmount)
								LocalRoutingApprovalLevel = each.ApprovalLevel
								end for each
					DerivedRoutingApprovalJSON += "}, "
				else
					DerivedRoutingApprovalJSON += "}"
					end while
			DerivedRoutingApprovalJSON += "}"
			return DerivedRoutingApprovalJSON

		DerivedMilestoneLabel is a DerivedField
			type is Text

			initialize DerivedMilestoneLabel
			initialize LocalCounter
			initialize TransientInvoiceRoutingCodeGroupLevel
			initialize TransientRoutingCode
			initialize LocalRoutingApprovalLevel
			if (InvoiceRoutingCodeGroup entered)



				TransientInvoiceRoutingCodeGroupLevel = InvoiceRoutingCodeGroup.first ActiveInvoiceRoutingCodeGroupLevelRel.InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
				TransientRoutingCode = TransientInvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
				if (TransientRoutingCode.Currency entered
				and TransientRoutingCode.Currency != InvoiceCurrency)
					LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
					LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= RoutingCode.Currency
					LocalReportCurrencyExchangeGroup.ExchangeDate			= InvoiceDate
					LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
					LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
					LocalExtendedAmount										= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
				else
					LocalExtendedAmount										= InvoiceAmount.CurrencyAmount

				for each TransientRoutingCode.ActiveInvoiceRoutingCodeResourceRel
					if (TransientRoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
					or	LocalExtendedAmount <= each.MaxApprovalAmount)
						LocalRoutingApprovalLevel = each.ApprovalLevel
						end for each
				LocalCounter = 1

				while (TransientInvoiceRoutingCodeGroupLevel != InvoiceRoutingCodeGroupLevel or TransientRoutingCode != RoutingCode or LocalRoutingApprovalLevel != RoutingApprovalLevel)
					increment LocalCounter
					LocalRoutingApprovalLevel = DerivedNextLocalRoutingApprovalLevel
					if (LocalRoutingApprovalLevel < 1)
						if (TransientInvoiceRoutingCodeGroupLevel.NextCodeGroupLevelExists)
							TransientInvoiceRoutingCodeGroupLevel	= TransientInvoiceRoutingCodeGroupLevel.first NextInvoiceRoutingCodeGroupLevelRel.InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
							TransientRoutingCode					= TransientInvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
							for each TransientRoutingCode.ActiveInvoiceRoutingCodeResourceRel
								if (TransientRoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
								or	LocalExtendedAmount <= each.MaxApprovalAmount)
									LocalRoutingApprovalLevel = each.ApprovalLevel
									end for each
						else
							end while
			else
				LocalCounter = RoutingApprovalLevel
			DerivedMilestoneLabel += "Level " + LocalCounter
			if (first CurrentInvoiceRoutingCodeLevelRel.Approver entered)
				DerivedMilestoneLabel += " - " + first CurrentInvoiceRoutingCodeLevelRel.Approver.PreferredGivenName
				DerivedMilestoneLabel += " " + first CurrentInvoiceRoutingCodeLevelRel.Approver.PreferredFamilyName
			else
			if (first CurrentInvoiceRoutingCodeLevelRel.ApprovalTeam entered)
				DerivedMilestoneLabel += " - " + first CurrentInvoiceRoutingCodeLevelRel.ApprovalTeam.Description
			else
			if (first CurrentInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode entered)
				DerivedMilestoneLabel += " - " + first CurrentInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode.Description
			return DerivedMilestoneLabel

		DerivedPreviousRoutingApprover is a DerivedField		
			type is Alpha size up to 200
			default label is "PreviousApprover"
			if (last ApprovedPayablesInvoiceAuditRel.Resource entered)
				return last ApprovedPayablesInvoiceAuditRel.Resource.PresentationNameSnapshot
			else
				return ""

		DerivedNextRoutingApproverName is a DerivedField
			type is Alpha 230
			default label is "NextApprover"


			if (TransientInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode entered)	
            	return first TransientFinanceResourceInvApprovalRel.FinanceResource.PreferredSimplePresentationName
			return TransientInvoiceRoutingCodeLevelRel.DerivedFirstApproverName		

		DerivedNextRoutingApprover is a DerivedField		
			type is Alpha 230
			default label is "NextApprovalLevel"


			return TransientInvoiceRoutingCodeLevelRel.DerivedDescription		

		DerivedNextTransRoutingApprover is a DerivedField		
			type is Numeric 8	
			restricted
			LocalRoutingApprovalLevel = RoutingApprovalLevel
			SetTransientFields = true		
			include GetNextRoutingApprovalLevel
			return LocalRoutingApprovalLevel

		DerivedNextTransRoutingCode is a DerivedField		
			type is like InvoiceRoutingCode
			restricted
			LocalRoutingApprovalLevel = RoutingApprovalLevel
			SetTransientFields = true
			include GetNextRoutingApprovalLevel
			if (TransientRoutingCode !entered)
				TransientRoutingCode = RoutingCode
			return TransientRoutingCode

		DerivedFileName is a DerivedField
			type is Alpha 500
			restricted
			return ImageIndex + "." + LocalDocumentType

		DerivedMimeType is a DerivedField
			type is Alpha 100
			restricted
			if (LocalDocumentType = "tif"		
			or  LocalDocumentType = "tiff"		
			or  LocalDocumentType = "TIF"
			or  LocalDocumentType = "TIFF"
			or  LocalDocumentType = "Tif"
			or  LocalDocumentType = "Tiff")
				return "image/tiff"
			if (LocalDocumentType = "jpg"
			or  LocalDocumentType = "jpeg"
			or  LocalDocumentType = "jpe"
			or  LocalDocumentType = "JPG"
			or  LocalDocumentType = "JPEG"
			or  LocalDocumentType = "JPE"
			or  LocalDocumentType = "Jpg"
			or  LocalDocumentType = "Jpeg"
			or  LocalDocumentType = "Jpe")
				return "image/jpeg"
			if (LocalDocumentType = "pdf"
			or  LocalDocumentType = "PDF"
			or  LocalDocumentType = "Pdf")
				return "application/pdf"
			if (LocalDocumentType = "doc"
			or  LocalDocumentType = "DOC"
			or  LocalDocumentType = "Doc")
				return "application/msword"
			if (LocalDocumentType = "txt"
			or  LocalDocumentType = "TXT"
			or  LocalDocumentType = "Txt")
				return "text/plain"
			if (LocalDocumentType = "html"
			or  LocalDocumentType = "htm"
			or  LocalDocumentType = "HTML"
			or  LocalDocumentType = "HTM"
			or  LocalDocumentType = "Html"
			or  LocalDocumentType = "Htm")
				return "text/html"
			if (LocalDocumentType = "png"
			or  LocalDocumentType = "PNG"
			or  LocalDocumentType = "Png")
				return "image/png"
			if (LocalDocumentType = blank)
				return "text/plain"

		DerivedVendorName is a DerivedField
			type is Alpha size up to 120	

			default label is "VendorName"
			if (Vendor entered)
				return Vendor.VendorName
			else
				return ""

		DerivedVendorNameSelect is a StringField 		
			type is Alpha 122
			"*"
			TransientVendorNameSelect
			"*"

		DerivedInvoiceDueMonth is a DerivedField
			type is Alpha 2
			restricted
			return (DueDate month)

		DerivedInvoiceDueDay is a DerivedField
			type is Alpha 2
			restricted
			return (DueDate day)

		DerivedInvoiceDueYear is a DerivedField
			type is Alpha 4
			restricted
			return (DueDate year)

		DerivedFormattedInvoiceDueDate is a DerivedField
			type is Alpha 10
			restricted
			return DerivedInvoiceDueMonth + "/" + DerivedInvoiceDueDay + "/" + DerivedInvoiceDueYear

		DerivedInvoiceMonth is a DerivedField
			type is Alpha 2
			restricted
			return (InvoiceDate month)

		DerivedInvoiceDay is a DerivedField
			type is Alpha 2
			restricted
			return (InvoiceDate day)

		DerivedInvoiceYear is a DerivedField
			type is Alpha 4
			restricted
			return (InvoiceDate year)

		DerivedFormattedInvoiceDate is a DerivedField
			type is Alpha 10
			restricted
			return DerivedInvoiceMonth + "/" + DerivedInvoiceDay + "/" + DerivedInvoiceYear

		DerivedYellowDueDateAlertOffset is a DerivedField
			type is Numeric 6
			restricted
			return 7

		DerivedRedDueDateAlertOffset is a DerivedField
			type is Numeric 6
			restricted
			return 3

		DiscountDateAlertDate is a ComputeField
			type is Date
			restricted
			(DiscountDate - DerivedYellowDueDateAlertOffset as days)

		YellowDueDateAlert is a ComputeField
			type is Date
			restricted
			(DueDate - DerivedYellowDueDateAlertOffset as days)

		RedDueDateAlert is a ComputeField
			type is Date
			restricted
			(DueDate - DerivedRedDueDateAlertOffset as days)

		DerivedFirstErrorMessage is a DerivedField
			type is Alpha size up to 200

			if (PayablesInvoiceErrorRel exists)
				return first PayablesInvoiceErrorRel.ErrorMessage
			if (HeaderBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage
			if (DistributionBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage






		DerivedFormattedDueDate is a DerivedField
			type is Alpha 10
			restricted
			return DueDate month + "/" + DueDate day + "/" + DueDate year

		DerivedFormattedDistributionDate is a DerivedField
			type is Alpha 10
			restricted
			return DistributionDate month + "/" + DistributionDate day + "/" + DistributionDate year

		DerivedFormattedDiscountDate is a DerivedField
			type is Alpha 10
			restricted
			if (DiscountDate not entered)
				return blank
			return DiscountDate month + "/" + DiscountDate day + "/" + DiscountDate year

		DerivedFormattedCreateDate is a DerivedField
			type is Alpha 10
			restricted
			if (CreateDate not entered)
				return blank
			return CreateDate month + "/" + CreateDate day + "/" + CreateDate year

		DerivedInvoiceAmount2Decimal is a DerivedField
			type is Decimal 19.2
			return InvoiceAmount.CurrencyAmount

		DerivedTaxAmount2Decimal is a DerivedField
			type is Decimal 19.2
			return TaxAmount

		DerivedTaxableAmount2Decimal is a DerivedField
			type is Decimal 19.2
			return TaxableAmount

		DerivedExchangeRate6Decimal is a DerivedField
			type is Decimal 31.6
			return InvoiceAmount.FunctionalAmount.EnteredCurrencyRate


		MouseOverBudgetErrorMessage is a MessageField
			restricted
			"BudgetErrorsExist;SeeBudgetErrorTabForDetails"

		InvoiceInErrorMessage is a MessageField
			"ErrorsExist"

		VendorOnHoldMessage is a MessageField		
			"VendorOnHold"

		RemitToOnHoldMessage is a MessageField		
			"LocationIsOnHold"

		DerivedRoutingRuleFound is a DerivedField		
			type is Boolean
			restricted
			include GetRoutingRuleValues
			return LocalRoutingRuleFound

		DerivedAutoApprove is a DerivedField
			type is Boolean
			restricted
			include GetRoutingRuleValues		
			if (LocalRoutingRuleFound)			
				return LocalAutoApprove  		
			else
				return true

		DerivedAutoAssignedRoutingCode is a DerivedField
			type is AlphaUpper 30

			include GetRoutingRuleValues		

			return LocalRoutingCode		  		

		DerivedAutoAssignedRoutingCodeGroup is a DerivedField		
			type is like InvoiceRoutingCodeGroup		

			include GetRoutingRuleValues		

			return LocalInvoiceRoutingCodeGroup	

		DerivedAutoAssignedMatrixApproval is a DerivedField
			type is Boolean
			include GetRoutingRuleValues
			return LocalResponsibilityMatrix


















		DerivedRoutingInformation is a DerivedField		
			type is Alpha 150
			if (DerivedAutoApprove = true)
				return "Auto Approve"
			if (DerivedAutoAssignedRoutingCode entered)
				return "Approval Code: " + DerivedAutoAssignedRoutingCode
			if (DerivedAutoAssignedRoutingCodeGroup entered)
				return "Approval Code Group: " + LocalRoutingCodeGroupName	
			if (DerivedAutoAssignedMatrixApproval = true)
				return "Responsibility Matrix"

		DerivedCurrentApproverActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildRoleApproverActorList
			return LocalApproverList

		DerivedActiveApproversAtAllLevels is a DerivedField
			type is Boolean
			restricted
			LocalActiveApproversAtAllLevels = true
			LocalTempApprovalLevel = LocalRoutingApprovalLevel
			LocalRoutingApprovalLevel = 1
			while (LocalRoutingApprovalLevel <= RoutingCode.DerivedLevelCount
			and	   LocalActiveApproversAtAllLevels)
				include FindActiveRoleApprover
				LocalRoutingApprovalLevel = LocalRoutingApprovalLevel + 1
			LocalRoutingApprovalLevel = LocalTempApprovalLevel
			return LocalActiveApproversAtAllLevels

		DerivedInvoiceAmount is a DerivedField
			type is like CurrencyAmount
			return InvoiceAmount.CurrencyAmount

		DerivedInvoiceAmountAndCurrency is a DerivedField
			type is Alpha up to 27

			return DerivedInvoiceAmount	+ " " + InvoiceCurrency

		DerivedCurrencyLabel is a DerivedField
			type is Alpha up to 27
			return InvoiceCurrency

		DerivedInvoiceAmountAndCurrency2 is a DerivedField		
			type is Alpha up to 27
			return DerivedInvoiceAmount	+ " " + DerivedCurrencyLabel

		DerivedInvoiceAmountAndCurrencyIncludingTax is a DerivedField		
			type is Alpha up to 27
			return DerivedInvoiceAndTaxAmount	+ " " + DerivedCurrencyLabel

		DerivedCurrentApproverLabel is a DerivedField
			type is Alpha 250
			default label is "CurrentApprover_/Team_/Role"

			if (first PfiWorkunitRel.HasProcessIndicator)
				return DerivedMilestoneLabel
			else
				if (ResponsibleTeamEntered)
					return ResponsibleTeam.Description
				else
				if (ResponsibleRoleEntered
				and !ResponsiblePersonEntered)
					return ResponsibleRole
				else
				if (ResponsiblePersonEntered)
					return ResponsiblePerson.PreferredSimplePresentationName
				else
					return ""

		DerivedDifferenceAmount is a DerivedField
            type is like InternationalAmount
            if (MatchProcessType.ServiceContract)
                return (ServiceContract.AmountRemaining - DerivedInvoiceAmount)
            else
                return (DerivedInvoiceAmount - FirstPurchaseOrder.TotalOrderAmount)
		
		DerivedTotalAmount is a DerivedField
            type is like InternationalAmount
            if (MatchProcessType.ServiceContract)
                return ServiceContract.AmountRemaining
            else
                return FirstPurchaseOrder.TotalOrderAmount
		
		DerivedRemainingAmountLabel is a DerivedField
			type is MessageField
			if (MatchProcessType.ServiceContract)
                return ContractRemainingAmountLabel
            else
                return PurchaseOrderTotalAmountLabel

		ContractRemainingAmountLabel is a LabelField
			"ContractRemainingAmount"

        PurchaseOrderTotalAmountLabel is a LabelField
	    	"PurchaseOrderTotalAmount"
			
		DerivedApprovedBy is a DerivedField
			type is Alpha size up to 200

			if (last ApprovedPayablesInvoiceAudit2Rel.DerivedResourceTeamDisplay entered)
				return last ApprovedPayablesInvoiceAudit2Rel.DerivedResourceTeamDisplay
			else
				return "Auto Approved"

		DerivedApprovalDate is a DerivedField
			type is TimeStamp
			return last ApprovedPayablesInvoiceAudit2Rel.UpdateDate

		DerivedRejectedBy is a DerivedField
			type is Alpha size up to 200
			default label is "RejectedBy"

			return last RejectedPayablesInvoiceAuditRel.Resource.PresentationNameSnapshot

		DerivedRejectionResource is a DerivedField
			type is Numeric 9
			restricted
			return last RejectedPayablesInvoiceAuditRel.Resource

		DerivedRejectionComment is a DerivedField
			type is Alpha size up to 500

			return last RejectedPayablesInvoiceAuditRel.Comment

		DerivedRejectionDate is a DerivedField
			type is TimeStamp
			default label is "RejectionTime"
			return last RejectedPayablesInvoiceAuditRel.UpdateDate

		DerivedRejectionReason is a DerivedField
			type is AlphaUpper 20
			default label is "RejectionReason"
			restricted
			return last RejectedPayablesInvoiceAuditRel.ActionReason

		DerivedCancelledBy is a DerivedField
			type is Alpha size up to 200

			return last CancelledPayablesInvoiceAuditRel.Resource.PresentationNameSnapshot

		DerivedCancelComment is a DerivedField
			type is Alpha size up to 500
			default label is "RejectionReason"

			return last CancelledPayablesInvoiceAuditRel.Comment

		DerivedCancelDate is a DerivedField
			type is TimeStamp

			return last CancelledPayablesInvoiceAuditRel.UpdateDate
			
		DerivedCancelDateFromCancelledInvoice is a DerivedField
			type is Date
			if (MatchStatus.POCancel)
				return CancelledPOInvoiceRel.DistributionDate
			else
				return 0

		DerivedCancelReason is a DerivedField
			type is AlphaUpper 20

			return last CancelledPayablesInvoiceAuditRel.ActionReason

		DerivedTaxDeterminationCountry is a DerivedField		
			type is AlphaUpper 2
			restricted
			if (Location.PostalAddress.Country entered)
				return Location.PostalAddress.Country[1:2]
			if (ProcessLevel.PostalAddress.Country entered)
				return ProcessLevel.PostalAddress.Country[1:2]
			if (Company.AccountingEntity.AddressCode.PostalAddress.Country entered)
				return Company.AccountingEntity.AddressCode.PostalAddress.Country[1:2]
			return ""

		DerivedDisplayAddressLine1 is a DerivedField	
			type is like AddressLine

			if (RemitToCode entered)
				return RemitToCode.VendorAddressLine1
			else
			if (PayVendor entered)
				return PayVendor.VendorAddressLine1
			else
				return ""













































		DerivedFullAddressDisplay is a DerivedField
			type is Text
			if (RemitToCode entered)
				return RemitToCode.CurrentAddressRel.FullAddressDisplay
			else
			if (PayVendor entered)
				return PayVendor.CurrentAddressRel.FullAddressDisplay
			else
				return blank

		DerivedVendorVATRegistrationText is a StringField		
			type is Text
			default label is "VendorVATRegistration"
			Vendor.VATRegistrationCountry " - " Vendor.VATRegistrationNumber

		DerivedRemitVATRegistrationText is a StringField		
			type is Text
			default label is "RemitLocationVATRegistration"
			RemitToCode.VATRegistrationCountry " - " RemitToCode.VATRegistrationNumber

		DerivedMiscDetailAOCCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MiscPayablesInvoiceAddOnChargeRel exists)
				return "(" + instance count of MiscPayablesInvoiceAddOnChargeRel + ")"
			else
				return ""

		DerivedMiscDetailAOCIndicator is a DerivedField
			type is Alpha 1
			if (MiscPayablesInvoiceAddOnChargeRel exists)
				return "*"
			else
				return ""

		DerivedAOCIndicator is a DerivedField		
			type is Alpha 1
			if (MiscPayablesInvoiceAddOnChargeRel exists
			or  PayablesInvoiceSpreadAddOnChargeRel exists
			or  HasSupplierAddOnCharges)
				return "*"
			else
				return ""

		DerivedTotalTaxAmount is a DerivedField
			type is like CurrencyAmount
				precision is InvoiceCurrency.NumberOfDecimals

			if (!action type.Create
			or  GetDerivedValues)
				LocalAmount = (sum MatchInvoicedTaxDistributionsRel.GLTransactionAmount)	

			round LocalAmount to nearest DerivedRoundTo
			return LocalAmount

		DerivedTotalAOCAmount is a DerivedField
			type is like InternationalAmount

			if  (MatchProcessType.AOCOnly
			and (action type.Create
			or   !PayablesInvoiceAddOnChargeRel exists))
				return InvoiceAmount.CurrencyAmount
			else
				return (DerivedTotalAOCDetailAmount)   

		DerivedTotalAOCDetailAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (!action type.Create)
				return (sum PayablesInvoiceAddOnChargeRel.TotalDistributionAmount)  

		DerivedTotalServiceAmount is a DerivedField
			type is like InternationalAmount

			if (!action type.Create)
				return (sum PayablesServiceInvoiceDetailRel.TotalDistributionAmount)  


		DerivedInvoiceDetailTotalTaxAmount is a DerivedField
			type is like InternationalAmount

			initialize LocalAmount
			for each PayablesInvoiceDetailRel
                if (TaxEntityRel.ThirdParty.TaxEngine)
                    LocalAmount += each.TaxAmount
                else
				if (each.IsInvoicedTaxCode
				or  each.TaxCode.TaxType.TaxTableCode)		
					LocalAmount 										+= each.TaxAmount

			for each NonMiscPayablesInvoiceAddOnChargeRel
				if (each.CreatedDuringSpread = 1)
					LocalAmount 										+= each.TaxAmount
				else 
				if (each.TaxCode.TaxType.TaxTableCode)

					initialize LocalTableTaxAmount
					initialize CalculateTax

					CalculateTax.TaxEntity 								= Company.AccountingEntity
					CalculateTax.TaxCode 								= each.TaxCode
					CalculateTax.ProductTaxCategory						= each.ProductTaxCategory

					CalculateTax.TaxableAmount							= each.TotalDistributionAmount
					CalculateTax.InvoiceAmount							= each.TotalDistributionAmount
					CalculateTax.System									= "AP"
					CalculateTax.TransactionCurrency					= PayablesInvoice.InvoiceCurrency
					CalculateTax.BaseCurrency							= Company.Currency
					CalculateTax.Location								= each.Location
					CalculateTax.PostalAddress							= each.InventoryLocationRel.PostalAddress
					if  (VendorLocationRel exists)
						CalculateTax.FromPostalAddress					= VendorLocationRel.CurrentAddressRel.PostalAddress
					else
						CalculateTax.FromPostalAddress					= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress

					CalculateTax.InvoiceDate							= InvoiceDate
					CalculateTax.PaymentDate 							= InvoiceDate
					CalculateTax.GeneralLedgerDate 						= InvoiceDate
					CalculateTax.TaxDate								= InvoiceDate
					CalculateTax.TaxPointDate							= DerivedTaxPointDate	
					CalculateTax.Function			 					= CalculateTax.Function.CalculateTax
					include LoadVertexGlobalInputFields
					include DisplayCalculateTaxInput
					LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax
					include DisplayCalculateTaxOutput
					LocalCounter = 1
					while (LocalCounter <= 8
					and    CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxCode entered)
						if (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].AccrualFlag = "I")
							LocalTableTaxAmount 						+= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount5DP
						LocalCounter += 1
					round LocalTableTaxAmount to nearest DerivedRoundTo
					LocalAmount											+= LocalTableTaxAmount
				else
				if (each.IsInvoicedTax)		
					LocalAmount 										+= each.TaxAmount

			round LocalAmount to nearest DerivedRoundTo

			return LocalAmount

		DerivedInvoiceAndTaxAmount is a DerivedField
			type is like InternationalAmount

			return (InvoiceAmount.CurrencyAmount + TaxAmount)

		DerivedDaysUntilDueDate is a ComputeField
			type is Numeric 3
			restricted
			(DueDate - current corporate date)

		DaysFromInvoiceDatetoDueDate is a ComputeField
			type is Numeric 3
			restricted
			(DueDate - InvoiceDate)

		DerivedDaysAfterDueDate is a ComputeField
			type is Numeric 3
			(current corporate date - DueDate)

		DerivedDaysUntilDiscountDate is a ComputeField
			type is Numeric 3
			restricted
			(DiscountDate - current corporate date)

		DerivedCurrentApprovalResource is a DerivedField
			type is Numeric 13
			restricted
			return first CurrentInvoiceRoutingCodeLevelRel.Approver

		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentInvoiceRoutingCodeLevelRel.Approver.FinanceResourceActor

		DerivedCurrentApprovalTeam is a DerivedField
			type is AlphaUpper 20
			restricted
			return first CurrentInvoiceRoutingCodeLevelRel.ApprovalTeam

		DerivedNextApprovalTeam is a DerivedField		
			type is AlphaUpper 20
			restricted


			return TransientInvoiceRoutingCodeLevelRel.ApprovalTeam		

		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamApproverActorList
			return LocalApproverList

		DerivedCurrentApprovalRole is a DerivedField
			type is AlphaUpper 30
			restricted
			return first CurrentInvoiceRoutingCodeLevelRel.InvoiceApprovalAuthCode

		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentInvoiceRoutingCodeLevelRel.EscalationDays > 0)
				if (Company.VendorGroup.CorporateCalendar entered)
					LocalDefaultEscalationDays = first CurrentInvoiceRoutingCodeLevelRel.EscalationDays
					LocalEscalationDate = current corporate date
					LocalDaysChecked = 0
					LocalWorkingDays = 0
					LocalOffDays = 0	
					LocalEscalationDate = LocalEscalationDate + 1 day	

					while (LocalWorkingDays < LocalDefaultEscalationDays
					and	   LocalDaysChecked < 30)
						if (CorporateCalendarWorkingDayRel exists)
							LocalWorkingDays = LocalWorkingDays + 1
						else
							LocalOffDays = LocalOffDays + 1	
						LocalDaysChecked = LocalDaysChecked + 1
						LocalEscalationDate = LocalEscalationDate + 1 day
					return LocalDefaultEscalationDays + LocalOffDays	
				else
					return first CurrentInvoiceRoutingCodeLevelRel.EscalationDays
			else
				return 10000

		DerivedLocalApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first TransientLocalInvoiceRoutingCodeLevelRel.EscalationDays > 0)
				if (Company.VendorGroup.CorporateCalendar entered)
					LocalDefaultEscalationDays = first TransientLocalInvoiceRoutingCodeLevelRel.EscalationDays
					LocalEscalationDate = current corporate date
					LocalDaysChecked = 0
					LocalWorkingDays = 0
					LocalOffDays = 0	
					LocalEscalationDate = LocalEscalationDate + 1 day	

					while (LocalWorkingDays < LocalDefaultEscalationDays
					and	   LocalDaysChecked < 30)
						if (CorporateCalendarWorkingDayRel exists)
							LocalWorkingDays = LocalWorkingDays + 1
						else
							LocalOffDays = LocalOffDays + 1	
						LocalDaysChecked = LocalDaysChecked + 1
						LocalEscalationDate = LocalEscalationDate + 1 day
					return LocalDefaultEscalationDays + LocalOffDays	
				else
					return first TransientLocalInvoiceRoutingCodeLevelRel.EscalationDays
			else
				return 10000

		DerivedCommentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceComment set exists)
				return "(" + instance count of PayablesInvoiceComment set + ")"
			else
				return ""

		DerivedCommentIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoiceComment set exists)
				return "*"
			else
				return ""

		DerivedInvoiceDetailAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum PayablesMatchInvoiceDetailGoodsRel.TotalDistributionAmount)  

		DerivedNumberOfPurchaseOrders is a DerivedField
			type is Numeric 4
			restricted
			return instance count of MatchPurchaseOrderInvoicesRel

		DerivedNumberOfInvoiceDetails is a DerivedField
			type is Numeric 4
			restricted
			return instance count of PayablesInvoiceDetailRel

		DerivedNumberOfAddOnCharges is a DerivedField
			type is Numeric 4
			restricted
			return instance count of PayablesInvoiceAddOnChargeRel

		DerivedNumberOfPOInvoiceDistributions is a DerivedField
			type is Numeric 4
			restricted
			if (!MatchProcessType.Expense)
				return instance count of PayablesInvoiceDistributionRel
			return 0

		DerivedNumberOfPurchaseOrderLinesToInvoice is a DerivedField
			type is Numeric 4
			restricted
			return instance count of PurchaseOrderLinesToMatchRel

		DerivedNumberOfContractLinesToInvoice is a DerivedField
			type is Numeric 4
			restricted
			return instance count of ContractLineRel

		DerivedContractDetailsIndicator is a DerivedField		
			type is Alpha 1
			if (InvoiceDetailForContractRel exists)
				return "*"
			else
				return ""

		DerivedPurchaseOrderCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MatchPurchaseOrderInvoicesRel exists)
				return "(" + DerivedNumberOfPurchaseOrders + ")"
			else
				return blank	//	""

		DerivedPurchaseOrderIndicator is a DerivedField
			type is Alpha 1
			if (MatchPurchaseOrderInvoicesRel exists)
				return "*"
			else
				return ""

		DerivedPurchaseOrder is a DerivedField
			type is like PurchaseOrder
			restricted
			if(MatchPurchaseOrderInvoicesRel.PurchaseOrder entered)
				return first MatchPurchaseOrderInvoicesRel.PurchaseOrder
			else
				return FirstPurchaseOrder.PurchaseOrder

		DisplayPurchaseOrder is a DerivedField
			type is Alpha 9
			default label is "PurchaseOrder"

			if (DerivedNumberOfPurchaseOrders > 1)
				return "Multiple"
			else
			if (MatchPurchaseOrderInvoicesRel not exists)
				return blank
			else
				return first MatchPurchaseOrderInvoicesRel.PurchaseOrder

		DerivedSpreadAOCCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceSpreadAddOnChargeRel exists)
				return "(" + instance count of PayablesInvoiceSpreadAddOnChargeRel + ")"
			else
				return blank	//	""

		DerivedSpreadAOCIndicator is a DerivedField
			type is Alpha 1
			if (PayablesInvoiceSpreadAddOnChargeRel exists)
				return "*"
			else
				return ""

		DerivedPayGroup is a DerivedField
			type is Alpha 40
			default label is "PayGroup"

			if (PayGroupEntered)
				return PayGroup.Name + " (" + PayGroup + ")"
			else
				return blank	//	""

		DerivedCompanyWithinGLCompanyGroup is a DerivedField	
			type is Boolean
			if (GeneralLedgerCompanyGroup not entered)
				return true
			if (GLCompanyGroupMemberRel exists)
				return true
			return false

		PayablesInvoiceLinkBack is a MessageField
			restricted
			"<linkback(webapp is PayablesProcessor navigation is InvoiceLinkbackNav text is \"ViewInvoice\")>"

		DerivedMatchAdditionalTax is a DerivedField
			type is like InternationalAmount
			LocalAmount = sum MatchAdditionalTaxDistributionsRel.DistributionAmount.CurrencyAmount
			round LocalAmount to nearest DerivedRoundTo
			return LocalAmount

		DerivedTotalInvoiceDetailsInvoicedTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (!action type.Create)
				if (MatchStatus < 2)
					return (sum PayablesInvoiceDetailRel.TaxAmount)
				else
					return (sum InvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount)

		DerivedMatchTotals is a DerivedField
			type is like InternationalAmount
			if  (MatchStatus < 2)
				LocalAmount = DerivedPreMatchTotals
			else
				LocalAmount = DerivedAfterMatchTotals

			if  ((DoOneSourceAfter
			or   CallVertexByDocument)
			and  MatchOneSourceAccruedTax)
				LocalAmount -= TaxAmount

			round LocalAmount to nearest DerivedRoundTo
			return LocalAmount

		DerivedMatchTotalDifference is a DerivedField
			type is like InternationalAmount
			restricted
			LocalAmount = DerivedMatchTotals - InvoiceAmount.CurrencyAmount
			if  (LocalAmount < 0)
				LocalAmount *= -1
			return LocalAmount

		DerivedPreMatchTotals is a DerivedField
			type is like InternationalAmount
			restricted
			return (DerivedAOCTotalDistributionAmt +
			DerivedServiceDetailTotalDistributionAmt +
			POTaxAmount +					
			DerivedMatchAdditionalDistributionsAmount +   
			DerivedMatchAdditionalTax +
			DerivedMatchAmount
			+ DerivedDetailTotalDistributionAmt)

		DerivedAfterMatchTotals is a DerivedField
			type is like InternationalAmount
			restricted
			if (MatchLevel.InvoiceMatch)
				return InvoiceAmount.CurrencyAmount
			else
				return (DerivedAOCTotalDistributionAmt +
				DerivedServiceDetailTotalDistributionAmt +
				DerivedMatchAdditionalDistributionsAmount +  
				DerivedMatchAdditionalTax +
				DerivedMatchAmount
				+ POTaxAmount)

		DerivedMatchTotalDetails is a DerivedField
			type is like InternationalAmount
			restricted
			return DerivedInvoiceDetailAmount + AddOnChargeAmount + ServiceAmount + TaxAmount

		DerivedTaxToleranceAmount		is a DerivedField
			type is like InternationalAmount
			if (Company.TaxTolerancePercent entered)
				if (TaxEntityUsesSabrix)
					DerivedTaxToleranceAmount	= PayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount * Company.TaxTolerancePercent
				else
					DerivedTaxToleranceAmount	= DerivedMatchInvoiceTaxAmount * Company.TaxTolerancePercent

				if (DerivedTaxToleranceAmount < 0)
					DerivedTaxToleranceAmount *= -1 
					
				if (Company.TaxToleranceAmount > DerivedTaxToleranceAmount)
					DerivedTaxToleranceAmount = Company.TaxToleranceAmount
			else 
				DerivedTaxToleranceAmount = Company.TaxToleranceAmount 

			return DerivedTaxToleranceAmount

		DerivedMatchInvoiceInBalanceWithinTolerance is a DerivedField
			type is Boolean
			restricted

			if (MatchStatus > 1)  
				LocalDifference = InvoiceAmount.CurrencyAmount - DerivedMatchTotals
			else
				LocalDifference = InvoiceAmount.CurrencyAmount - DerivedPreMatchTotals
			LocalTaxDifference = TaxAmount - POTaxAmount - DerivedMatchAdditionalTax
			LocalRoundingDifference = InvoiceAmount.CurrencyAmount



			if  (TaxEntityUsesSabrix
			and (PayablesInvoice.ShortPayCommentExists
			or   MatchOneSourceAccruedTax
			or   PayablesInvoice.DoShortPayProcess))
				LocalDifference -= POTaxAmount 
			else
				LocalRoundingDifference -= TaxAmount




			LocalRoundingDifference -= sum PayablesInvoiceDetailRel.TotalDistributionAmount
			LocalRoundingDifference -= sum PayablesInvoiceAddOnChargeRel.TotalDistributionAmount
			LocalRoundingDifference -= DerivedMatchAdditionalDistributionsAmount



			if (LocalDifference < 0)
				LocalDifference *= -1

			if (LocalTaxDifference < 0)
				LocalTaxDifference *= -1

			if (LocalRoundingDifference < 0)
				LocalRoundingDifference *= -1

			if  (MatchPrepaymentMethod.PrepayFromInvoice
			and  PayablesInvoiceDetailRel not exists

			and	 IsNotMatched												
			and   DerivedMatchAdditionalDistributionsAmount not entered)
			    initialize LocalRoundingDifference
			    initialize LocalTaxDifference




			LocalRoundingPercentAmount	= InvoiceAmount.CurrencyAmount * MatchCompanyRel.InvoiceBalanceRoundingTolerancePercent
			RoundingDifferenceWithinTolerance = false
			if (LocalRoundingDifference not entered)
				RoundingDifferenceWithinTolerance = true
			else
			if (MatchCompanyRel.InvoiceBalanceRoundingToleranceCondition not entered)
				if  (MatchCompanyRel.InvoiceBalanceRoundingToleranceAmount entered
				and  LocalRoundingDifference <= MatchCompanyRel.InvoiceBalanceRoundingToleranceAmount)
					RoundingDifferenceWithinTolerance = true
				else
				if  (MatchCompanyRel.InvoiceBalanceRoundingTolerancePercent entered
				and  LocalRoundingDifference <= LocalRoundingPercentAmount)
					RoundingDifferenceWithinTolerance = true
			else
			if (MatchCompanyRel.InvoiceBalanceRoundingToleranceCondition.And)

				if (LocalRoundingDifference <= MatchCompanyRel.InvoiceBalanceRoundingToleranceAmount
				or   LocalRoundingDifference <= LocalRoundingPercentAmount)
					RoundingDifferenceWithinTolerance = true
			else
			if (MatchCompanyRel.InvoiceBalanceRoundingToleranceCondition.Or)

				if (LocalRoundingDifference <= MatchCompanyRel.InvoiceBalanceRoundingToleranceAmount
				and    LocalRoundingDifference <= LocalRoundingPercentAmount)
					RoundingDifferenceWithinTolerance = true

			if  (TaxEntityRel.ThirdParty.Sabrix
			and  TaxConfigurationRel.OneSourceVersionType.Generic
			and RoundingDifferenceWithinTolerance)
				return true
			else
			if  (CallVertexByDocument 
			and RoundingDifferenceWithinTolerance)
				return true
			else
			if (LocalDifference not entered
			or  (LocalTaxDifference <= DerivedTaxToleranceAmount
			and  RoundingDifferenceWithinTolerance))


				return true
			else


				return false



		DerivedAOCTotalDistributionAmt is a DerivedField
			type is like InternationalAmount
			return (sum PayablesInvoiceAddOnChargeRel.TotalDistributionAmount)  

		DerivedServiceDetailTotalDistributionAmt is a DerivedField
			type is like InternationalAmount
			return (sum PayablesServiceInvoiceDetailRel.TotalDistributionAmount)  

		DerivedDetailTotalDistributionAmt is a DerivedField
			type is like InternationalAmount
			return (sum PayablesInvoiceDetailRel.InvoicedTaxAmount)

		AbsoluteValueInvoiceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if  (PayablesInvoice.InvoiceAmount.CurrencyAmount > 0)
				return PayablesInvoice.InvoiceAmount.CurrencyAmount
			else
				return PayablesInvoice.InvoiceAmount.CurrencyAmount * -1

		SumOfDerivedTotalInvoiceCostWithTax is a DerivedField	
			type is like InternationalAmount

			return (sum PayablesInvoiceDetailRel.DerivedTotalInvoiceCostWithTax)


		SumOfDerivedTotalBaseAmount is a DerivedField	
			type is like InternationalAmount

			restricted
			return (sum PayablesInvoiceDetailRel.TotalBaseAmount)


		DerivedDiversity is a DerivedField
			type is Alpha size 50
			if (DiversityCode not entered)
				return "Non-Diverse"
			else
				return DiversityCode

		DerivedBaseTotalPaymentAmountByDiversity is a DerivedField
			type is like InternationalAmount
			restricted

			return 0		

		DerivedBaseTotalPaymentsAmountPercent is a DerivedField
			type is like Percent
			restricted

			return 0		

		DerivedBaseAmountGrandTotal is a DerivedField
			type is like InternationalAmount
			restricted

			return 0		

		DerivedPaymentsAppliedTotal is a DerivedField
			type is like InternationalAmount
			return sum PaymentsHaveBeenAppliedRel.PaymentAmount.CurrencyAmount

		DerivedNetPaymentsAppliedTotal is a DerivedField
			type is like InternationalAmount
			return sum PaymentsHaveBeenAppliedRel.NetPaymentAmount.CurrencyAmount

		DerivedActualCheckAmountTotal is a DerivedField
			type is like InternationalAmount
			return sum PaymentsHaveBeenAppliedRel.BankCheckAmount

		DerivedAutoMatchRoutingRule is a DerivedField
			type is Boolean
			restricted
			return RoutingRuleFound


		DueDateDiff is a DerivedField
			type is Numeric size 3
			restricted
			if (DueDate entered)
				return DueDate - CurrentDate
			else
				return 0

		DueDateDiffAlpha is a DerivedField
			type is Alpha size 5
			restricted
			return DueDateDiff


		DueRange is a DerivedField
			type is MessageField
			restricted
			if (DueDateDiff >= 0 and (Status.Unreleased or Status.Released or Status.Approved or Status.PendingApproval or Status.Amended))
				if (DueDateDiff = 0 or DerivedPayImmediately)
					return "Due_\Now"
				else
				if (DueDateDiff > 90)
					return "Due_\Over_90_\Days"
				else
				if (DueDateDiff > 60 and DueDateDiff <= 90)
					return "Due_90_\Days"
				else
				if (DueDateDiff > 30 and DueDateDiff <= 60)
					return "Due_60_\Days"
				else
				if (DueDateDiff > 15 and DueDateDiff <= 30)
					return "Due_30_\Days"
				else
				if (DueDateDiff > 0 and DueDateDiff <= 15)
					return "Due_15_\Days"
			else
			if (DueDateDiff < 0 and (Status.Unreleased or Status.Released or Status.Approved or Status.PendingApproval or Status.Amended))
				return "Overdue"
			else
				return "Due_\Range_Does_Not_Apply"


		AgingRange is a DerivedField
			type is MessageField
			restricted
			if (DueDateDiff < 0 and (Status.Unreleased or Status.Released or Status.Approved or Status.PendingApproval or Status.Amended))
				if (DueDateDiff < -90)
					return "Aged_\Over_90_\Days"
				else
				if (DueDateDiff < -60 and DueDateDiff >= -90)
					return "Aged_90_\Days"
				else
				if (DueDateDiff < -30 and DueDateDiff >= -60)
					return "Aged_60_\Days"
				else
				if (DueDateDiff < -15 and DueDateDiff >= -30)
					return "Aged_30_\Days"
				else
				if (DueDateDiff < 0 and DueDateDiff >= -15)
					return "Aged_15_\Days"
			else
			if (DueDateDiff >= 0 and (Status.Unreleased or Status.Released or Status.Approved or Status.PendingApproval or Status.Amended))
				return "Forecast"
			else
				return "Aging_Does_Not_Apply"

		LocationMessage	is a DerivedField
			type is MessageField
			if (VendorLocationRemitToCodesRel exists)
				return VendorLocationMessage
			else
				return blank


		DebugDisplayFields is a DerivedField
			type is MessageField
			restricted
			return "AcctgEnt:" + Company.AccountingEntity + ",Co:" + Company + ",Vdr:" + PayablesInvoice.Vendor + ",Inv:" + PayablesInvoice.Invoice + ",Status:" + Status

		CalculatedAllowableAmount is a DerivedField
			type is like InternationalAmount
			if  (MatchProcessType.Expense)
				if (AllowableAmountForDiscount entered)			
					return AllowableAmountForDiscount			
				if  (IsTaxAfterTerms)  
					return InvoiceAmount.CurrencyAmount - AddOnChargeAmount - TaxAmount
				else
					return InvoiceAmount.CurrencyAmount - AddOnChargeAmount
			else
				if   (TaxCode entered
				and   EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
					LocalTaxTerms 	= EntityTaxCodeRel.TaxTerms
				else
				if   (TaxCode not entered
				and   FirstPurchaseOrder.TaxCode entered
				and   FirstPurchaseOrder.CompanyTaxCodeRel.AccruedOrInvoiced.Invoiced)
					LocalTaxTerms 	= FirstPurchaseOrder.CompanyTaxCodeRel.TaxTerms

				if  (DiscountCode.DiscountPoint.CostOfGoods
				and (MatchAmount entered
				or   ServiceAmount entered))
					if  (LocalTaxTerms.Taxbeforeterms)
						if (InvoiceAmount.CurrencyAmount < MatchAmount + ServiceAmount + TaxAmount)
							return InvoiceAmount.CurrencyAmount
						else
							return MatchAmount + ServiceAmount + TaxAmount
					else
						if (InvoiceAmount.CurrencyAmount < MatchAmount + ServiceAmount)
							return InvoiceAmount.CurrencyAmount
						else
							return MatchAmount + ServiceAmount
				else
					if  (DiscountCode.DiscountPoint.CostOfGoodsAndAddOnCharge
					and (MatchAmount entered
					or   AddOnChargeAmount entered
					or   ServiceAmount entered))
						if  (LocalTaxTerms.Taxbeforeterms)
							return MatchAmount + ServiceAmount + AddOnChargeAmount + TaxAmount
						else
							return MatchAmount + ServiceAmount + AddOnChargeAmount
					else
						if  (LocalTaxTerms.Taxafterterms)
							return InvoiceAmount.CurrencyAmount	- TaxAmount
						else
							return InvoiceAmount.CurrencyAmount

		CalculatedDiscountAmount is a DerivedField
			type is like InternationalAmount
			return CalculatedAllowableAmount * DiscountPercent

		TierDiscountsExist is a DerivedField	
			type is Boolean
			restricted
			if (DiscountAmount2 entered
			or  DiscountAmount3 entered)
				return true
			return false





































		DerivedTaxMethodInvOrAcc is a DerivedField
			type is like TaxMethod
			restricted

			if  (TaxCode entered)
				if (TaxEntityRel.ThirdParty.InforTax)
					if (!TaxCode.TaxType.TaxTableCode)		


						if ((TaxEntityRel.UseTaxCodeAccounts
						and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
						or (!TaxEntityRel.UseTaxCodeAccounts
						and  TaxEntityRel.AccruedOrInvoiced.Accrued))

							return "A"
						else

							return "I"
					else

						return blank		
				else

					if (TaxEntityRel.ThirdParty.VertexOSeries)

						if (PayablesInvoiceTaxRel.TaxMethod entered)

							return PayablesInvoiceTaxRel.TaxMethod


						if  ((VATTax
						and   IsReverseCharge)
						or   (LocalPTXTaxAmount not entered							
						and   PayablesInvoiceTaxRel.EnteredTaxAmount not entered))

							return "A"
						else

							return "I"
					else

						if (TaxEntityRel.ThirdParty.Sabrix)	



							if ((LocalPTXTaxAmount entered
							or   PayablesInvoiceTaxRel.EnteredTaxAmount entered)	
							and !DoShortPayProcess				
							and !PayablesInvoiceTaxRel.ShortPaid	
							and !CalculateTax.ReverseCharge)	

								return "I"
							else

								return "A"

						return blank
			else
				if (TaxAmount entered				
				and TaxEntityUsesThirdPartyTax)		

					return "I"						
				else
				if (TaxAmount not entered			
				and TaxEntityUsesThirdPartyTax)		

					return "A"						

				return blank

		DerivedDaysPaidLate is a DerivedField
			type is Numeric 4
			if (DerivedPaymentDate > DueDate)
				return (DerivedPaymentDate - DueDate)
			else
				return 0

		DerivedPaidLate is a DerivedField
			type is Boolean
			if (DerivedDaysPaidLate > 0)
				return true
			else
				return false

		DerivedCurrency is a DerivedField
			type is like Currency
			if (CurrencyType1.Transaction)
				return InvoiceCurrency
			else
				return Company.AccountingEntity.FunctionalCurrency

		DerivedInvoiceAmountForOpenAging is a DerivedField		
			type is like InternationalAmount
			if (CurrencyType1.Transaction)
				return InvoiceAmount.CurrencyAmount
			else
				return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

		DerivedOpenInvoiceAmount is a DerivedField
			type is like InternationalAmount
			if (CurrencyType1.Transaction)
				return (InvoiceAmount.CurrencyAmount - AmountPaid)		
			else
				if (AmountPaid !entered)		
					return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount		
				else
					if (InvoiceAmount.CurrencyAmount = AmountPaid)
						return 0
					else
						return (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - sum PaymentsHaveBeenMadeRel.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount)	

		DerivedAsOfDate is a DerivedField
			type is Date
			if (AsOfDate entered)
				return AsOfDate
			else
				return current corporate date

		DefaultDueDate is a DerivedField
			type is Date
			if (TermsCode not entered)
				return DueDate

		AgeByDueDate is a DerivedField
			type is Numeric size 5
			return (DerivedAsOfDate - DueDate)

		AgeByInvoiceDate is a DerivedField
			type is Numeric size 5
			return (DerivedAsOfDate - InvoiceDate)

		PeriodCurrentAmount is a DerivedField
			type is like InternationalAmount

			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate <= 0)
					return DerivedOpenInvoiceAmount
			else
				if (AgeByInvoiceDate <= 0)
					return DerivedOpenInvoiceAmount

		PeriodOneAmount is a DerivedField
			type is like InternationalAmount

			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 0
				and AgeByDueDate <= 30)
					return DerivedOpenInvoiceAmount
			else
				if (AgeByInvoiceDate > 0
				and AgeByInvoiceDate <= 30)
					return DerivedOpenInvoiceAmount

		PeriodTwoAmount is a DerivedField
			type is like InternationalAmount

			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 30
				and AgeByDueDate <= 60)
					return DerivedOpenInvoiceAmount
			else
				if (AgeByInvoiceDate > 30
				and AgeByInvoiceDate <= 60)
					return DerivedOpenInvoiceAmount

		PeriodThreeAmount is a DerivedField
			type is like InternationalAmount

			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 60
				and AgeByDueDate <= 90)
					return DerivedOpenInvoiceAmount
			else
				if (AgeByInvoiceDate > 60
				and AgeByInvoiceDate <= 90)
					return DerivedOpenInvoiceAmount

		PeriodFourAmount is a DerivedField
			type is like InternationalAmount

			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 90
				and AgeByDueDate <= 120)
					return DerivedOpenInvoiceAmount
			else
				if (AgeByInvoiceDate > 90
				and AgeByInvoiceDate <= 120)
					return DerivedOpenInvoiceAmount

		AbovePeriodAmount is a DerivedField
			type is like InternationalAmount

			if (AgingMethod.AgeByDueDate)
				if (AgeByDueDate > 120)
					return DerivedOpenInvoiceAmount
			else
				if (AgeByInvoiceDate > 120)
					return DerivedOpenInvoiceAmount

		CreditForRebillConfig		is a DerivedField
			type is Alpha 1
			return config.enable_credit_rebill

		NumberOfLinesForSetActionConfig		is a DerivedField
			type is Numeric 9
			return config.match_invoice_number_of_lines_set_action

		NumberOfLinesForSetAction		is a DerivedField
			type is Numeric 9
			if (NumberOfLinesForSetActionConfig not entered)
				return 20
			else
				return NumberOfLinesForSetActionConfig

		NbrLinesOneSourceMatchByInvoiceConfig	is a DerivedField
			type is Alpha 2
			restricted
			return OneSourceMatchProcessByInvoiceRel.Value[1:2]

		NumberOfLinesForOneSourceMatchProcessByInvoice		is a DerivedField
			type is Numeric 2
			if (NbrLinesOneSourceMatchByInvoiceConfig is numeric
			and NbrLinesOneSourceMatchByInvoiceConfig > 1)
				return NbrLinesOneSourceMatchByInvoiceConfig
			else
				return 50

		NbrLinesVertexMatchByInvoiceConfig	is a DerivedField
			type is Alpha 2
			restricted
			return VertexMatchByInvoiceRel.Value[1:2]

		NumberOfLinesForVertexMatchProcessByInvoice		is a DerivedField
			type is Numeric 2
			if (NbrLinesVertexMatchByInvoiceConfig is numeric
			and NbrLinesVertexMatchByInvoiceConfig > 1)
				return NbrLinesVertexMatchByInvoiceConfig
			else
				return 50

		MHCSaveDocumentDataJSON is a DerivedField	
			type is JSONObject
			default label is untranslatable
			MHCSaveDocumentDataJSON = template.MHCSaveDocumentData_Template document for this instance

		MHCGetDocumentJSON is a DerivedField	
			type is JSONObject
			default label is untranslatable
			MHCGetDocumentJSON = template.MHCGetDocument_Template document for this instance

		HylandGetUrlJSON is a DerivedField	
			type is JSONObject
			HylandGetUrlJSON = template.HylandGetUrl_PayablesInvoice_Template_ST document for this instance

		HylandGetDocumentJSON is a DerivedField	
			type is JSONObject
			HylandGetDocumentJSON = template.HylandGetDocument_PayablesInvoice_Template_ST document for this instance

		HylandSaveDocumentDataJSON is a DerivedField	
			type is JSONObject
			default label is untranslatable
			HylandSaveDocumentDataJSON = template.HylandSaveDocumentData_Template_ST document for this instance

		DerivedPaymentType is a DerivedField	
			type is Numeric 1
			if (ForeignEconomicRegulatoryCode.FercType.ServicesOrTransfers)
				return 2
			else
			if (ForeignEconomicRegulatoryCode.FercType.CapitalFlows)
				return 4
			else
			if (ForeignEconomicRegulatoryCode.FercType.TradeInGoods)
				return 6

		DerivedPaymentTypeDesc is a DerivedField
			type is MessageField
			if (ForeignEconomicRegulatoryCode.FercType.ServicesOrTransfers)
				return "Outgoing services or transfers"
			else
			if (ForeignEconomicRegulatoryCode.FercType.CapitalFlows)
				return "Outgoing capital flows"
			else
			if (ForeignEconomicRegulatoryCode.FercType.TradeInGoods)
				return "Outgoing trade in goods"


		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "appProdline"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "RequiredCleanDocumentID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedConfigFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "IsMultipleFEG"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
		DerivedIntegrationApplicationLocally is a DerivedField
			type is Boolean
			restricted
			if (DerivedIntegrationApplication = "Local.ly")
				return true
			else
				return false

		BODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create)
				return "Add"
			else
				if (action type.Update)
					return "Replace"
				else
					return "Delete"

		BODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID

		DefaultBODLocation is a DerivedField
			type is AlphaUpper size 22
			restricted
			return Company using "%d" + DerivedDelimiter + Location

		DerivedLocation is a DerivedField
			type is AlphaUpper size 22
			restricted
			return ""

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		
		DerivedCrossReferenceAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				if(DerivedConfigFEG="Y")
					return DerivedFinanceEnterpriseGroup + DerivedDelimiter + Company using "%d"
				else
					return Company using "%d"
		
		DerivedCrossAE is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(LocalAEAlreadyExecuted != true)
				LocalAEAlreadyExecuted = true
				if (FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
					return LocalAccountingEntity
				else
					LocalAccountingEntity = DerivedCrossReferenceAccountingEntity
					return LocalAccountingEntity
			else
				return LocalAccountingEntity
				
				
		DerivedAccountingEntity is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return DerivedCrossAE
			else
				return Company.GeneralLedgerCompany.AccountingEntity
				
		BODAccountingEntity is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return DerivedCrossAE
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAccountingEntity
		
		GroupDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			if(bod id.DocumentID != "")
				return bod id.DocumentID
			else
				if(DerivedRequiredCleanDocId = "Y"  and Suffix not entered)
					return PayablesInvoice
				else
					if (Suffix entered)
						return Company using "%d" +DerivedDelimiter+ Vendor using "%d" +DerivedDelimiter+ DerivedInvoiceNumber + DerivedDelimiter +Suffix + DerivedDelimiter + PayablesInvoice using "%d"
					else
						return Company using "%d" +DerivedDelimiter + Vendor using "%d" +DerivedDelimiter + DerivedInvoiceNumber + DerivedDelimiter + PayablesInvoice using "%d"

		DerivedInvoiceNumber is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				for each Invoice split on "-"
					DerivedInvoiceNumber += each
				return DerivedInvoiceNumber
			else
				return Invoice

		BODFormattedId is a DerivedField
			type is Alpha 200
			restricted
			return "infor-nid:" + DerivedTenantID +":" + BODAccountingEntity +":"+DerivedLocation + ":" + GroupDocumentID + ":" + "?SupplierInvoice&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		BODCurrentTimeStamp is a DerivedField
			type is TimeStamp
			restricted
			BODCurrentTimeStamp = system current timestamp
			return BODCurrentTimeStamp

		AlphaCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			return BODCurrentTimeStamp

		MassBODTitleDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaCurrentTimeStamp[7:8]+AlphaCurrentTimeStamp[5:6]+AlphaCurrentTimeStamp[1:4]

		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaCurrentTimeStamp[1:4] + "-" + AlphaCurrentTimeStamp[5:6] + "-" + AlphaCurrentTimeStamp[7:8] + "T" + AlphaCurrentTimeStamp[9:10] + ":" + AlphaCurrentTimeStamp[11:12] + ":" + AlphaCurrentTimeStamp[13:14] + "Z"

		BODLastModificationDate is a DerivedField
			type is TimeStamp
			restricted
			BODLastModificationDate = LastUpdateDate
			return BODLastModificationDate

		AlphaLastModificationDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODLastModificationDate

		AlphaLastModificationTime is a DerivedField
			type is Alpha size 20
			restricted
			AlphaLastModificationTime = LastUpdateDate time
			return AlphaLastModificationTime

		BODLastModificationDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaLastModificationDate[1:4] + "-" + AlphaLastModificationDate[5:6] + "-" + AlphaLastModificationDate[7:8] + "T" + AlphaLastModificationTime[1:2] + ":" + AlphaLastModificationTime[3:4] + ":" + AlphaLastModificationTime[5:6] + "Z"

		DerivedDiscountPercent is a DerivedField
			type is Percent size 7
			restricted
			if(TermsCode entered and TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent > 0)
				return TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent * 100
			else
				return DiscountPercent* 100

		DerivedTCDiscountPercent is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedDiscountPercent="0.00000")
				return "0"
			else
				return DerivedDiscountPercent

		BODIsOnHold is a DerivedField
			type is Alpha size 5
			restricted
			if(LocalTriggerFrom = "PayablesOnHold")
				return "false"
			else
			if(IsOnHold)
				return "true"
			else
				return "false"

		BODPayamentDate is a DerivedField
			type is Alpha size 20
			restricted
			if(TransientPaymentDate = "00000000")
				return ""
			else
				return TransientPaymentDate

		BODReceiptOfInvoiceDate is a DerivedField
			type is Date
			restricted
			BODReceiptOfInvoiceDate = ReceiptOfInvoiceDate
			return BODReceiptOfInvoiceDate

		AlphaReceiptOfInvoiceDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODReceiptOfInvoiceDate

		DerivedReceiptOfInvoiceDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaReceiptOfInvoiceDate[1:4] + "-" + AlphaReceiptOfInvoiceDate[5:6] + "-" + AlphaReceiptOfInvoiceDate[7:8]

		BODCreateDate is a DerivedField
			type is Date
			restricted
			BODCreateDate = CreateDate
			return BODCreateDate

		AlphaCreateDate is a DerivedField
			type is Alpha size 20
			restricted
			return 	BODCreateDate

		BODCancelDate is a DerivedField
			type is TimeStamp
			restricted
			BODCancelDate = CancelDate
			return BODCancelDate

		AlphaCancelDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODCancelDate

		BODDocumentDate is a DerivedField
			type is Date
			restricted
			BODDocumentDate = InvoiceDate
			return BODDocumentDate

		AlphaDocumentDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODDocumentDate

		AlphaDocumentTime is a DerivedField
			type is Alpha size 20
			restricted
			return CreateDate time

		BODDocumentDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			if(Status.Cancelled)
				return AlphaCancelDate[1:4] + "-" + AlphaCancelDate[5:6] + "-" + AlphaCancelDate[7:8] + "T" + AlphaDocumentTime[1:2] + ":" + AlphaDocumentTime[3:4] + ":" + AlphaDocumentTime[4:5] + "Z"
			else
			if(DerivedIntegrationApplicationLocally)
				return AlphaDocumentDate[1:4] + "-" + AlphaDocumentDate[5:6] + "-" + AlphaDocumentDate[7:8] + "T" + AlphaDocumentTime[1:2] + ":" + AlphaDocumentTime[3:4] + ":" + AlphaDocumentTime[5:6] + "Z"
			else
				return DerivedCreateDateTime
		
		DerivedDocAccountingDate is a DerivedField
			type is Alpha size 25
			if(DerivedIntegrationApplicationLocally)
				return AlphaDocumentDate[1:4] + "-" + AlphaDocumentDate[5:6] + "-" + AlphaDocumentDate[7:8] + "T" + AlphaDocumentTime[1:2] + ":" + AlphaDocumentTime[3:4] + ":" + AlphaDocumentTime[5:6] + "Z"
			
		DerivedCreateDateTime is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaCreateDate[1:4] + "-" + AlphaCreateDate[5:6] + "-" + AlphaCreateDate[7:8] + "T" + AlphaDocumentTime[1:2] + ":" + AlphaDocumentTime[3:4] + ":" + AlphaDocumentTime[5:6] + "Z"

		BODCancelDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			if(Status.Cancelled)
				return AlphaCancelDate[1:4] + "-" + AlphaCancelDate[5:6] + "-" + AlphaCancelDate[7:8] + "T" + AlphaDocumentTime[1:2] + ":" + AlphaDocumentTime[3:4] + ":" + AlphaDocumentTime[4:5] + "Z"
			else
				return ""

		BODOffHoldDate is a DerivedField
			type is TimeStamp
			restricted
			BODOffHoldDate = PayablesInvoicePaymentRel.OffHoldDate
			return BODOffHoldDate

		AlphaOffHoldDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODOffHoldDate

		BODOnHoldDate is a DerivedField
			type is TimeStamp
			restricted
			BODOnHoldDate = PayablesInvoicePaymentRel.OnHoldDate
			return BODOnHoldDate

		AlphaOnHoldDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODOnHoldDate

		BODHoldCodeCreateDate is a DerivedField
			type is Alpha size 25
			restricted
			if(PayablesInvoicePaymentRel.OnHoldDate  entered)
				return AlphaOnHoldDate[1:4] + "-" + AlphaOnHoldDate[5:6] + "-" + AlphaOnHoldDate[7:8] + "T" + AlphaOnHoldDate[9:10] + ":" + AlphaOnHoldDate[11:12] + ":" + AlphaOnHoldDate[13:14] + "Z"
			else
				return ""

		BODHoldCodeDeleteDate is a DerivedField
			type is Alpha size 25
			restricted
			if(PayablesInvoicePaymentRel.OffHoldDate entered)
				return AlphaOffHoldDate[1:4] + "-" + AlphaOffHoldDate[5:6] + "-" + AlphaOffHoldDate[7:8] + "T" + AlphaOffHoldDate[9:10] + ":" + AlphaOffHoldDate[11:12] + ":" + AlphaOffHoldDate[13:14] + "Z"
			else
				return ""

		DerivedFiscalYear is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				return AlphaCreateDate[1:4]
			else
				return ""

		DerivedFiscalPeriod is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				return AlphaCreateDate[5:6]
			else
				return ""

		BODCertificationDateField is a DerivedField
			type is Date
			restricted
			BODCertificationDateField = CertificationDate
			return BODCertificationDateField

		AlphaCertificationDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODCertificationDateField

		DerivedCertificationDate is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and CertificationDate entered)
				return AlphaCertificationDate[1:4] + "-" + AlphaCertificationDate[5:6] + "-" + AlphaCertificationDate[7:8] + "T" + AlphaCurrentTimeStamp[9:10] + ":" + AlphaCurrentTimeStamp[11:12] + ":" + AlphaCurrentTimeStamp[13:14] + "Z"
			else
				return ""

		DerivedGlobalDocumentType is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return GlobalDocumentType
			else
				return ""

		BODDueDateField is a DerivedField
			type is Date
			restricted
			BODDueDateField = DueDate
			return BODDueDateField

		AlphaDueDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODDueDateField

		BODDueDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaDueDate[1:4] + "-" + AlphaDueDate[5:6] + "-" + AlphaDueDate[7:8]

		DerivedDisplayID is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				return PayablesInvoice
			else
				return Invoice

		DerivedLocallyAltDocIDschemeName is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and (DerivedCountryCode = "AR" or DerivedCountryCode = "MX"))
				return "lcl.Government"
			else
				return ""

		DerivedLocallyAltDocIDValue is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and (DerivedCountryCode = "AR" or DerivedCountryCode = "MX"))
				return CertificationNumber
			else
				return ""

		DerivedExtendedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(MatchInvoice = "Y")
					return MatchAmount
				else
					if(DerivedTaxMethodInvOrAcc.Accrued)
						return InvoiceAmount.CurrencyAmount
					else
						return InvoiceAmount.CurrencyAmount - TotalTaxAmount
			else
				if(DerivedTaxMethodInvOrAcc.Accrued)
					return InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount - AddOnChargeAmount
				else
					return InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount -TaxAmount - AddOnChargeAmount

		DerivedExtendedBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(MatchInvoice = "Y")
					return MatchAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				else
					if(DerivedTaxMethodInvOrAcc.Accrued)
						return DerivedExtendedAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					else
						return DerivedExtendedAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				if  (InvoiceCurrency != DerivedPayCurrency)
					return DerivedExtendedAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				else
					return DerivedExtendedAmount

		DerivedDiscountBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if  (InvoiceCurrency != DerivedPayCurrency)
				return DiscountAmount.CurrencyAmount *InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return DiscountAmount.CurrencyAmount

		DerivedDiscountReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if  (DerivedIntegrationApplicationLocally)
				return DiscountAmount.CurrencyAmount * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			else
				return DiscountAmount.CurrencyAmount

		DerivedDiscountReportCurrency is a DerivedField
			type is Alpha size 5
			restricted
			if  (DerivedIntegrationApplicationLocally)
				return GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
			else
				return InvoiceCurrency

		DerivedTaxBasisBaseAmount  is a DerivedField
			type is like InternationalAmount
			restricted
			if  (InvoiceCurrency != PayCurrency)
				return DerivedExtendedBaseAmount
			else
				return DerivedExtendedAmount

		DerivedTaxBaseAmount   is a DerivedField
			type is like InternationalAmount
			restricted
			if  (InvoiceCurrency != PayCurrency)
				return TaxAmount *InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return TaxAmount

		DerivedPO is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return DerivedPurchaseOrder
			else
				return Company using "%d" +DerivedDelimiter+ DerivedPurchaseOrder using "%d"

		BODStatus is a DerivedField
			type is Alpha size 25
			restricted
			if(BODIsOnHold = "true")
				return "Hold"
			else
			if(Status.Unreleased or Status.PendingApproval or Status.Rejected )
				return "Unapproved"
			else
			if(Status.Released or Status.Approved or Status.Amended)
				return "Open"
			else
			if(Status.Cancelled)
				return "Void"
			else
			if(Status.Paid or Status.Historical)
				return "Paid"
			else
				return "Open"

		BODEnteredCurrencyRate is a DerivedField
			type is Alpha size 25
			restricted
			return InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedIDMDocumentURL is a DerivedField	
			type is Alpha size up to 2083
			if (IDMDocumentExists)
 				if (IsIDMConfigured)
					if (not LocalGotIDMDocumentURL)
						IDMItem.DocumentType	= "FSM_PayablesInvoice"
						IDMItem.IDMUniqueId		= IDMDocumentPID
						LocalGotIDMDocumentURL	= true
						return IDMItem.GetLink
			return blank

		DerivedInvoiceURL is a DerivedField	
			type is Alpha size up to 2083
			if (IDMDocumentExists)
				return DerivedIDMDocumentURL
			else
				return InvoiceURL


		DerivedCustomerGroup is a DerivedField
			type is Alpha size 25
			restricted
			return Vendor.CustomerGroup

		BODVendorID	is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedRequiredCleanDocId = "Y")
				return Vendor
			else
				return GeneralLedgerCompanyRel.FinanceEnterpriseGroup+ DerivedDelimiter + VendorGroup + DerivedDelimiter + Vendor using "%d"

		BODVendorName is a DerivedField
			type is Alpha size 120
			restricted
			if(DerivedIntegrationApplicationLocally)
				return PayVendor.VendorName
			else
				return Vendor.VendorName

		BODVendorIncomeWithholding is a DerivedField
			type is Alpha size 5
			restricted
			return Vendor.IncomeWithholding

		VendorTaxID	is a DerivedField 
			type is Alpha size 25
			holds pii
			restricted
			if(DerivedIntegrationApplicationLocally and (DerivedCountryCode = "IN" or DerivedCountryCode = "AR"))
				return Vendor.VATRegistrationNumber
			else 
				return Vendor.TaxID
				
		DerivedVendorTaxIDAR is a DerivedField 
			type is Alpha size 25
			holds pii
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return Vendor.TaxID
			else 
				return ""
				
		DerivedPayVendorTaxID	is a DerivedField 
			type is Alpha size 25
			holds pii
			restricted
			if(DerivedIntegrationApplicationLocally)
				return PayVendor.TaxID
			else
				return ""

		DerivedLocallyschemeNameTaxID is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				return "TaxIdentificationNumber"
			else
				return ""

		DerivedLocallyschemeAgencyNameIN is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "IN_GST"
			else
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return "AR:VAT"
			else
				return ""
		
		DerivedLocallyschemeAgencyNameAR is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return "AR:IIBB"
			else
				return ""

		VendorContactName	is a DerivedField 
			type is Alpha size 120
			holds pii
			restricted
			if(Vendor.ContactName entered)
				return Vendor.ContactName

		VendorAddressAddressLine1 is a DerivedField	
			type is Alpha size 40
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine1

		VendorAddressAddressLine2 is a DerivedField	
			type is Alpha size 40
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine2

		VendorAddressAddressLine3 is a DerivedField	
			type is Alpha size 40
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine3

		VendorAddressAddressLine4 is a DerivedField	
			type is Alpha size 40
			restricted
			return Vendor.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine4

		VendorAddressMunicipality is a DerivedField	
			type is Alpha size 58
			return Vendor.CurrentAddressRel.PostalAddress.Municipality

		VendorAddressStateProvince is a DerivedField	
			type is AlphaUpper size 3
			restricted
			return Vendor.CurrentAddressRel.PostalAddress.StateProvince

		VendorAddressCountry is a DerivedField	
			type is AlphaUpper size 3
			restricted
			return Vendor.CurrentAddressRel.PostalAddress.Country

		VendorAddressPostalCode is a DerivedField	
			type is Alpha size 12
			restricted
			return Vendor.CurrentAddressRel.PostalAddress.PostalCode


		VendorContactLevel is a DerivedField
			type is Numeric 3
			restricted
			if(Vendor.first VendorContactRel.VendorContact.ContactLevel != "")
				return Vendor.first VendorContactRel.VendorContact.ContactLevel
			else
				return "0"

		VendorContactID is a DerivedField
			type is AlphaUpper size 20
			restricted
			return Vendor.first VendorContactRel.VendorContact.VendorContactCode+"-"+VendorContactLevel

		VCContactName	is a DerivedField 
			type is Alpha size 120
			holds pii
			restricted
			return Vendor.first VendorContactRel.VendorContact.ContactName

		VCEmailAddress	is a DerivedField 
			type is Alpha size 256
			holds pii
			restricted
			return Vendor.first VendorContactRel.VendorContact.EmailAddress

		VCEmailAddressDesc is a DerivedField
			type is Alpha size 15
			restricted
			if(VCEmailAddress entered)
				return "EMail"
			else
				return ""

		VCPInternationalPrefix	is a DerivedField
			type is Alpha size 6
			restricted
			return Vendor.first VendorContactRel.VendorContact.PhoneNumber.InternationalPrefix

		VCPSubscriberNumber is a DerivedField 
			type is Alpha size 15
			holds pii
			restricted
			return Vendor.first VendorContactRel.VendorContact.PhoneNumber.SubscriberNumber

		VCPSubscriberNumberDesc is a DerivedField
			type is Alpha size 15
			restricted
			if(VCPSubscriberNumber entered)
				return "Phone"
			else
				return ""

		VCPextension	is a DerivedField
			type is Alpha size 6
			restricted
			return Vendor.first VendorContactRel.VendorContact.PhoneNumber.Extension


		RemitLocationGroupId is a DerivedField
			type is Alpha size 25
			restricted
			if(VendorLocationRemitRel.VendorLocation entered)
				if(DerivedRequiredCleanDocId = "Y")
					return VendorLocationRemitRel.VendorLocation
				else
					return Company using "%d" +DerivedDelimiter +VendorLocationRemitRel.VendorLocation
			else
				return ""
		
		RemitLocationVendorName is a DerivedField
			type is Alpha size 120
			restricted
			return VendorLocationRemitRel.VendorName
			
		RemitAddressAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine1

		RemitAddressAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine2

		RemitAddressAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine3

		RemitAddressAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.VendorAddress.PostalAddress.DeliveryAddress.AddressLine4

		RemitAddressMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.PostalAddress.Municipality

		RemitAddressStateProvince is a DerivedField
			type is AlphaUpper size 3
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.PostalAddress.StateProvince

		RemitAddressCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.PostalAddress.Country

		RemitAddressPostalCode	is a DerivedField
			type is Alpha size 12
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.PostalAddress.PostalCode

		RemitInternationalPrefix	is a DerivedField
			type is Alpha size 6
			restricted
			return VendorLocationRemitRel.PrimeVendorLocationContactRel.PhoneNumber.InternationalPrefix

		RemitSubscriberNumber is a DerivedField 
			type is Alpha size 15
			holds pii
			restricted
			return VendorLocationRemitRel.PrimeVendorLocationContactRel.PhoneNumber.SubscriberNumber

		RemitSubscribeDesc	is a DerivedField
			type is Alpha size 25
			restricted
			if(RemitSubscriberNumber entered)
				return "Phone"
			else
				return ""

		Remitextension	is a DerivedField
			type is Alpha size 6
			restricted
			return VendorLocationRemitRel.PrimeVendorLocationContactRel.PhoneNumber.Extension

		Remitemail	is a DerivedField 
			type is Alpha size 256
			holds pii
			restricted
			return VendorLocationRemitRel.PrimeVendorLocationContactRel.EmailAddress

		RemitemailDesc	is a DerivedField
			type is Alpha size 25
			restricted
			if(Remitemail entered)
				return "EMail"
			else
				return ""


		PODropshipContact	is a DerivedField 
			type is Alpha size 20
			holds pii
			restricted
			return FirstPurchaseOrder.DropshipContact

		PODropshipName is a DerivedField 
			type is Alpha size 20
			holds pii
			restricted
			return FirstPurchaseOrder.DropshipName

		PODropship is a DerivedField
			type is Alpha size 20
			restricted
			return FirstPurchaseOrder.Dropship

		PODropshipDesc is a DerivedField
			type is Alpha size 20
			restricted
			if(FirstPurchaseOrder.Dropship)
				return "DropShip"
			else
				return ""

		PODropShipAddressAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			return FirstPurchaseOrder.DropshipAddress.DeliveryAddress.AddressLine1

		PODropShipAddressAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			return FirstPurchaseOrder.DropshipAddress.DeliveryAddress.AddressLine2

		PODropShipAddressAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			return FirstPurchaseOrder.DropshipAddress.DeliveryAddress.AddressLine3

		PODropShipAddressAddressLine4	is a DerivedField
			type is Alpha size 40
			return FirstPurchaseOrder.DropshipAddress.DeliveryAddress.AddressLine4

		PODropShipAddressMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return FirstPurchaseOrder.DropshipAddress.Municipality

		PODropShipAddressStateProvince is a DerivedField
			type is AlphaUpper size 3
			restricted
			return FirstPurchaseOrder.DropshipAddress.StateProvince

		PODropShipAddressCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			return FirstPurchaseOrder.DropshipAddress.County

		PODropShipAddressPostalCode	is a DerivedField
			type is Alpha size 12
			restricted
			return FirstPurchaseOrder.DropshipAddress.PostalCode

		PODropShipInternationalPrefix	is a DerivedField
			type is Alpha size 6
			restricted
			return FirstPurchaseOrder.DropshipPhoneNumber.InternationalPrefix

		PODropShipSubscriberNumber is a DerivedField 
			type is Alpha size 15
			holds pii
			restricted
			return FirstPurchaseOrder.DropshipPhoneNumber.SubscriberNumber

		PODropShipSubscriberDesc is a DerivedField
			type is Alpha size 15
			restricted
			if(PODropShipSubscriberNumber entered)
				return "Phone"
			else
				return ""

		PODropShipextension	is a DerivedField
			type is Alpha size 6
			restricted
			return FirstPurchaseOrder.DropshipPhoneNumber.Extension

		PODropShipemail	is a DerivedField 
			type is Alpha size 256
			holds pii
			restricted
			return FirstPurchaseOrder.EmailAddress


		ShipToPartyID is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return Company using "%d" + DerivedDelimiter + ProcessLevel
			else
				return ""
						
		ShipToTaxID is a DerivedField
			type is Alpha size 15
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ProcessLevel.PostalAddress.StateProvinceIDNumber
			else
				return ""
		
		ShipToschemeAgencyNameIN is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "IN_GST"
			else
				return ""
				
		DerivedTCProcessType is a DerivedField
			type is Alpha size 5
			restricted
			if (TermsCode.ProcessType entered)
				return TermsCode.ProcessType
			else
				return ""

		SpeedEntryInvoiceApprovalSubject is a DerivedField		
			type is MessageField
			restricted
			InvoiceApprovedEmailSubject    = Company.VendorGroup.InvoiceApprovedEmailSubject
			return InvoiceApprovedEmailSubject text

		MassInvoiceReleaseApprovalSubject is a DerivedField		
			type is MessageField
			restricted
			InvoiceApprovalEmailSubject    = Company.VendorGroup.InvoiceApprovalEmailSubject
			return InvoiceApprovalEmailSubject text

		OneSourcePayAsBilled is a DerivedField
			type is Alpha size 10
			restricted
			return first OneSourceOutputUserAttribute21Rel.UserAttributeValue

		OneSourceDirectPay is a DerivedField
			type is Alpha size 10
			restricted
			return first OneSourceOutputUserAttribute25Rel.UserAttributeValue

		RoundedNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (InvoiceCurrency entered)
				return InvoiceCurrency.NumberOfDecimals
			else
			if (actor.context.FinanceEnterpriseGroup.DefaultDecimalsOption entered)
				return actor.context.FinanceEnterpriseGroup.DefaultNumberOfDecimals
			else
				return 2

		DerivedShipFromAccountingEntity is a DerivedField
			type is Alpha size 30
			restricted
			if(PurchaseFromLocation entered and DerivedIntegrationApplicationLocally = false)
				if(DerivedRequiredCleanDocId = "Y")
					return DerivedAccountingEntity
				else
					return VendorGroup + DerivedDelimiter + DerivedAccountingEntity
			else
				return ""

		DerivedBODInvoiceType is a DerivedField
			type is Alpha 20
			restricted
			if (InvoiceType = "C")
				return "CreditMemo"
			else
			if (InvoiceType = "D")
				return "DebitMemo"
			else
			if (InvoiceType = "P")
				return "Prepayment"
			else
				return "Invoice"

		DerivedShipFromID is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(PurchaseFromLocation.VendorLocation entered)
					return VendorGroup + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + PurchaseFromLocation.VendorLocation
				else
					return VendorGroup + DerivedDelimiter + Vendor using "%d"
			else
			if(PurchaseFromLocation entered)
				if(DerivedRequiredCleanDocId = "Y")
					return PurchaseFromLocation
				else	
					return VendorGroup + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + PurchaseFromLocation
			else
				return ""

		DerivedShipFromschemeName is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(Vendor.TaxRegistrationType = 2)
					return "CountryIdentificationNumber"
				else
					return "TaxIdentificationNumber"
			else
				return ""

		DerivedShipFromSchemeAgency is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(Vendor.TaxRegistrationType = 2)
					return "IN_PAN"
				else
					return "IN_GST"
			else
				return ""

		DerivedShipFromTaxID is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(Vendor.TaxRegistrationType = 2)
					return Vendor.TaxID
				else
				if(BODVendorLocationRel exists and (PurchaseFromLocation.VendorLocation entered or RemitToCode entered))
					return BODVendorLocationRel.VATRegistrationNumber
				else 
					return ""
			else
				return ""

		DerivedShipFromLocation is a DerivedField
			type is Alpha size 40
			restricted
			if(MatchInvoice = "Y")
				return PurchaseFromLocation.VendorLocation
			else
				return RemitToCode

		DerivedReference is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and InvoiceReference = "BM")
				return Reference
			else
				return ""

		DerivedPOUnloadingPort is a DerivedField
			type is AlphaUpper size 5
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and InvoiceReference = "BM")
				return FirstPurchaseOrder.UnloadingPort
			else
				return ""

		DerivedLocallyReceiptOfInvoiceDate is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and InvoiceReference = "BM")
				return DerivedReceiptOfInvoiceDate
			else
				return ""
		
		DerivedTaxJurisdicationCode is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return Vendor.CurrentAddressRel.PostalAddress.StateProvince
			else
				return ""
		
		DerivedCountryCode is a DerivedField
			type is Alpha size 22
			restricted
			return Company.GeneralLedgerCompany.AccountingEntity.AddressCode.PostalAddress.Country

		DerivedPartyID is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return Company using "%d"
			else
				return ""

		DerivedPurchaseFromLocation is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(PurchaseFromLocation.VendorLocation entered)
					return VendorGroup + DerivedDelimiter + Vendor using "%d" + DerivedDelimiter + PurchaseFromLocation.VendorLocation
				else
					return VendorGroup + DerivedDelimiter + Vendor using "%d"
			else
				return ""

		DerivedReportCurrencyOne is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "IN")
				return GeneralLedgerCompanyRel.FinanceEnterpriseGroup.ReportCurrencyOne
			else
				return InvoiceCurrency

		DerivedExtendedPreTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(MatchInvoice = "Y")
					return MatchAmount+ AddOnChargeAmount + ServiceAmount
				else
					return InvoiceAmount.CurrencyAmount - (TotalTaxAmount + AddOnChargeAmount + ServiceAmount)		
			else
				return 0

		DerivedExtendedPreTaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedExtendedPreTaxAmount * BODEnteredCurrencyRate
			else
				return 0

		DerivedExtendedPreTaxReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedExtendedPreTaxAmount * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			else
				return 0

		DerivedExtendedReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(MatchInvoice = "Y")
					return MatchAmount * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
				else
					if(DerivedTaxMethodInvOrAcc.Accrued)
						return InvoiceAmount.CurrencyAmount * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
					else
						return InvoiceAmount.ReportAmount1.EnteredCurrencyRate * (InvoiceAmount.CurrencyAmount - TotalTaxAmount)
			else
				if(DerivedTaxMethodInvOrAcc.Accrued)
					return InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount - AddOnChargeAmount
				else
					return InvoiceAmount.CurrencyAmount - DiscountAmount.CurrencyAmount - AddOnChargeAmount -TaxAmount

		DerivedTotalReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
			else
				return 0

		DerivedRefDocID is a DerivedField
			type is Alpha size 100
			restricted
			if(InvoiceType.CreditMemo and ExternalPurchaseOrder entered and Suffix != "999" and VendorReturn not entered)
				return Company using "%d" + DerivedDelimiter + Vendor using "%d"+DerivedDelimiter + MatchInvoiceReferenceRel.OriginalInvoice.Invoice + DerivedDelimiter + MatchInvoiceReferenceRel.OriginalInvoice using "%d"
			else
				return DerivedInvoiceNumber

		DerivedEnclosure is a DerivedField
			type is Boolean
			restricted
			return last PayablesInvoicePaymentRel.Enclosure

		DerivedImageIndex is a DerivedField
			type is Alpha size 100
			restricted
			if (ImageIndex entered)
				return ImageIndex
			else
				return ""

		DerivedAccountingDate is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				DerivedAccountingDate = DistributionDate
				return DerivedAccountingDate[1:4] + "-" + DerivedAccountingDate[5:6] + "-" + DerivedAccountingDate[7:8] + "T" + AlphaDocumentTime[1:2] + ":" + AlphaDocumentTime[3:4] + ":" + AlphaDocumentTime[5:6] + "Z"

		DerivedCustomerVATRegistraionNumber is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(CompanyCustomerRel exists and DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return CompanyCustomerRel.VATRegistrationNumber	
		DerivedPayCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.GeneralLedgerCompany.Currency			

		SupplierInvoiceXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			SupplierInvoiceXMLBOD = template.IONSupplierInvoiceXML_ST document for this instance


		SupplierInvoiceAOCXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (PayablesInvoiceDistributionAOCSeqRel exist)
				initialize LocalAOCCount
				for each PayablesInvoiceDistributionAOCSeqRel
					if(each.TaxCode not entered and DerivedIntegrationApplication != "Local.ly" and (!MatchInvoice.POInvoice 
					or (MatchInvoice.POInvoice and each.PurchaseOrder >= 0 and each.PurchaseOrderLine = 0) 
					or (MatchInvoice.POInvoice  and each.PurchaseOrder >0  and each.PurchaseOrderLine > 0
					and each.InvoiceType.CreditMemo and each.Suffix = 999)))
						LocalAOCCount +=1
						each.AOCSequenceCount =  LocalAOCCount
						SupplierInvoiceAOCXMLBOD += template.IONSupplierInvoiceAOCXML_ST document for each
					else
						if(DerivedIntegrationApplicationLocally and each.TaxCode not entered and each.DistributionType = "D" and (!MatchInvoice.POInvoice 
						or (MatchInvoice.POInvoice and each.PurchaseOrder >= 0 and each.PurchaseOrderLine = 0) 
						or (MatchInvoice.POInvoice  and each.PurchaseOrder >0  and each.PurchaseOrderLine > 0
						and each.InvoiceType.CreditMemo and each.Suffix = 999)))
							LocalAOCCount +=1
							each.AOCSequenceCount =  LocalAOCCount
							SupplierInvoiceAOCXMLBOD += template.IONSupplierInvoiceAOCXML_ST document for each
				return SupplierInvoiceAOCXMLBOD
			else
				return ""


		SupplierInvoiceTaxXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (PayablesInvoiceTaxindicatorRel exist)
				initialize LocalTaxCount
				for each PayablesInvoiceTaxindicatorRel
					if(DerivedIntegrationApplication != "Local.ly" and (!MatchInvoice.POInvoice
					or (MatchInvoice.POInvoice and each.PurchaseOrder = 0 and each.PurchaseOrderLine = 0) 
					or (MatchInvoice.POInvoice  and each.PurchaseOrder >0  and each.PurchaseOrderLine > 0
					and each.InvoiceType.CreditMemo and each.Suffix = 999)))
						LocalTaxCount +=1
						each.TaxSequenceCount =  LocalTaxCount
						each.LocalTaxJurisdicationCode	=  DerivedTaxJurisdicationCode
						SupplierInvoiceTaxXMLBOD += template.IONSupplierInvoiceTaxXML_ST document for each
					else
						if(DerivedIntegrationApplicationLocally and each.DistributionType = "D" and each.IsTaxDistribution and (!MatchInvoice.POInvoice 
						or (MatchInvoice.POInvoice and each.PurchaseOrder = 0 and each.PurchaseOrderLine = 0) 
						or (MatchInvoice.POInvoice  and each.PurchaseOrder >0  and each.PurchaseOrderLine > 0
						and each.InvoiceType.CreditMemo and each.Suffix = 999)))
							LocalTaxCount +=1
							each.TaxSequenceCount =  LocalTaxCount
							each.LocalTaxJurisdicationCode	=  DerivedTaxJurisdicationCode
							SupplierInvoiceTaxXMLBOD += template.IONSupplierInvoiceTaxXML_ST document for each
				return SupplierInvoiceTaxXMLBOD
			else
				return ""


		SupplierInvoicePOXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if ((DerivedPurchaseOrder entered) or (FirstPurchaseOrder entered))
				SupplierInvoicePOXMLBOD = template.IONSupplierInvoicePOXML_ST document for this instance
				return SupplierInvoicePOXMLBOD
			else
				return ""


		SupplierInvoicePODropShipXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedPurchaseOrder entered and FirstPurchaseOrder.Dropship)
				SupplierInvoicePODropShipXMLBOD = template.IONSupplierInvoicePODropShipXML_ST document for this instance
				return SupplierInvoicePODropShipXMLBOD
			else
				return ""

		SupplierInvoiceDummyDetailXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and MatchInvoice != "Y")
				if(NonLinkedTaxDistributionsRel exist)
					initialize LocalDummyInvLineNumber 
					for each NonLinkedTaxDistributionsRel
						if(each.DistributionType.Distribution)
							LocalPIDistribution = each.PayablesInvoiceDistribution
							DummyLineTaxTotalAmount = each.GLTransactionAmount
							LocalDummyInvLineNumber += 1 
							each.DummyInvoiceLineNumber = LocalDummyInvLineNumber
							each.LocalInvoiceDescription = Description
							each.LocalCustomerVATRegistartionNumber = DerivedCustomerVATRegistraionNumber
							if (LinkedDistTypeDistributionRel exists and each.TaxCode.TaxType.TaxTableCode)
								for each LinkedDistTypeDistributionRel
									DummyLineTaxTotalAmount += each.GLTransactionAmount
							each.LocalDummyLineTaxTotalAmount = DummyLineTaxTotalAmount
							SupplierInvoiceDummyDetailXMLBOD += template.IONSupperInvoiceDummyDetailXML_ST document for each
					return SupplierInvoiceDummyDetailXMLBOD
		SupplierInvoiceLocalyDistributionXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			initialize LocalDummyDistributionCount
			if(PayablesInvoiceDistributionRel exists and DerivedIntegrationApplicationLocally)
				for each PayablesInvoiceDistributionRel
					if(each.AddOnCharge not entered  and each.TaxCode not entered and ((!PayablesInvoice.MatchInvoice.POInvoice ) or
					(PayablesInvoice.MatchInvoice.POInvoice and each.PurchaseOrder = 0 and each.PurchaseOrderLine = 0) or
					(PayablesInvoice.MatchInvoice.POInvoice and each.PurchaseOrder > 0 and each.PurchaseOrderLine > 0 and
					each.InvoiceType.CreditMemo and each.Suffix = 999)) and each.DistributionType.Distribution)
						SupplierInvoiceLocalyDistributionXMLBOD += template.IONSupplierInvoiceLocallyDistributionXML_ST document for each
					else
						if(each.TaxCode entered and !MatchInvoice.POInvoice and each.DistributionType.Distribution and each.TaxIndicator != 0 )
							LocalDummyDistributionCount += 1
							SupplierInvoiceLocalyDistributionXMLBOD += template.IONSupplierInvoiceLocallyDistributionXML_ST document for each
				return SupplierInvoiceLocalyDistributionXMLBOD

		SupplierInvoiceLocallyDetailXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			initialize LocalContractLineCount
			if(DerivedIntegrationApplicationLocally and ServiceContract entered and DerivedCountryCode = "IN" and MatchInvoice = "Y" )
				for each PayablesInvoiceDetailRel
					if(each.Contract  = PayablesInvoice.ServiceContract)
						LocalContractLineCount +=1
						each.LocalContractLineNumber	= LocalContractLineCount
						each.LocalServiceContract = ServiceContract
						SupplierInvoiceLocallyDetailXMLBOD += template.IONSupplierInvoiceLocallyDetailXML_ST document for each
				return SupplierInvoiceLocallyDetailXMLBOD
			else
				return ""



		DerivedWidgetRetrospectiveOpenInvoices is a DerivedField
			type is Boolean
			if(RetrospectiveOpenInvoices = true)
				return true
			else
				return false

		DerivedWidgetWithinInvoiceTypeForSearch is a DerivedField
			type is Boolean
			if(WithinInvoiceTypeForSearch = true)
				return true
			else
				return false

		DerivedWidgetWithinDateRanges is a DerivedField
			type is Boolean
			if(WithinDateRanges = true)
				return true
			else
				return false

		DerivedWidgetIsOutOfBalance	is a DerivedField
			type is Boolean
			if(IsOutOfBalance = true)
				return true
			else
				return false

		DerivedWidgetLinkedToCancelledPOInvoice	is a DerivedField
			type is Boolean
			if(LinkedToCancelledPOInvoice = true)
				return true
			else
				return false

		DerivedWidgetErrorMessage is a DerivedField	
            type is Alpha size 30
            if (DistributionsAreOutOfBalance = true)
                return "Out Of Balance"
            else
            if (DisplayMatchUnsuccessful = true)
                return "Match Error"
            else
            if (IsOnHold = true)
                return "On Hold"
            else
            if (RemitToCode.OnHold = true)
                return "On Hold"
            else
            if (VendorIsOnHold = true)
                return "On Hold"
            else
                return blank

        DerivedWidgetOnHold is a DerivedField 
            type is Boolean
            if (IsOnHold or RemitToCode.OnHold or VendorIsOnHold)
                return true
            else
                return false

        DerivedWidgetRedAlert is a DerivedField 
            type is Boolean
            if (ShowRedDueDateAlert)
                return true
            else
            	return false

        DerivedWidgetYellowAlert is a DerivedField	
            type is Boolean
            if (ShowYellowDueDateAlert)
                return true
            else
            	return false
            	
        DerivedOneYearReplicationData is a DerivedField
        	type is Boolean
            if ((current date - create date) <  360)
                return true
            else
                return false

































		APMSG103 is a MessageField
			restricted
			"InvoiceAdded;PaymentsOutOfBalance"

		APMSG104 is a MessageField
			restricted
			"RestrictedVendor;InvoiceAdded"

		APMSG105 is a MessageField
			restricted
			"VendorNeedsTax_\I\D;InvoiceChanged"

		APMSG106 is a MessageField
			restricted
			"PayVendorRequiresBankInformationForElectronicPayment;InvoiceAdded"

		APMSG107 is a MessageField
			restricted
			"RemitLocationRequiresBankInformationForElectronicPayment;InvoiceAdded"

		APMSG108 is a MessageField
			restricted
			"PayVendorRequiresBankInformationForElectronicPayment;InvoiceChanged"

		APMSG109 is a MessageField
			restricted
			"RemitLocationRequiresBankInformationForElectronicPayment;InvoiceChanged"

		APMSG113 is a MessageField
			restricted
			"Invoice(s)Released--DropShipMessage(s)Created"

		APMSG114 is a MessageField
			restricted
			"Invoice(s)Released--ServiceOnlyMessage(s)Created"

		APMSG116 is a MessageField
			restricted
			"Invoice(s)ExceedingBudgetNotReleased"

		APMSG118 is a MessageField
			restricted
			"RecordsProcessed;TaxOutOfBalance<InvoiceTaxOutOfBalanceDifference>"

		APMSG119 is a MessageField
			restricted
			"RecordsProcessed;DistributionsOutOfBalance"

		APMSG120 is a MessageField
			restricted
			"RecordsProcessed;PaymentsOutOfBalance"

		APMSG165  is a MessageField
			restricted
			"UnrealizedGain/Loss"

		APMSG198  is a MessageField
			restricted
			"RecordsAdded;DistributionsOutOfBalance"

		APMSG200 is a MessageField
			restricted
			"VendorNeedsTax_\I\D;InvoiceAdded"

		APMSG201 is a MessageField
			restricted
			"RestrictedVendor;InvoiceChanged"





		APMSG311 is a MessageField
			restricted
			"RecordAdded;InvoiceCurrency<InvoiceCurrency>IsNotEqualToCashCodeCurrency<CashCode.Currency>"





		APMSG403 is a MessageField
			restricted
			"ChangeComplete-InvoiceIsReleased"

		APMSG410 is a MessageField
			restricted
			"AddComplete-VoucherNumber=<VoucherNumberDisplay>"

		APMSG495 is a MessageField
			restricted
			"InvoiceAdded;SelectPO'sAssociatedWithThisInvoice"

		APMSG538 is a MessageField
			restricted
			"SelectServiceLinesToApprove"

		APMSG540 is a MessageField
			restricted
			"InvoiceAdded;NoAvailableServiceLinesForPO<FirstPurchaseOrder>"

		APMSG545 is a MessageField
			restricted
			"InvoiceAdded;ApproveMiscellaneousAOC"

		APMSG546 is a MessageField
			restricted
			"InvoiceAdded;ApproveLineAOC"

		APMSG547 is a MessageField
			restricted
			"InvoiceAdded;CreateLineItemDetail"

		InvoiceAddedIncomeWithholdingCodeDetailNotDefined is a MessageField
			restricted
			"InvoiceAdded;IncomeWithholdingCodeDetailNotDefined"

		InvoiceChangedIncomeWithholdingCodeDetailNotDefined is a MessageField
			restricted
			"InvoiceChanged;IncomeWithholdingCodeDetailNotDefined"

		InvoiceAddedDetailCreated is a MessageField
			restricted
			"InvoiceAddedAndDetailsCreated"

		APMSG557 is a MessageField
			restricted
			"InvoiceAdded;TaxableAmountOutOfBalance"

		APMSG819 is a MessageField
			restricted
			"InquireComplete;TaxRateNotCalculated"

		APMSG820 is a MessageField
			restricted
			"ChangeComplete;TaxRateNotCalculated"

		APMSG822 is a MessageField
			restricted
			"InvoiceAdded;TaxRateNotCalculated"

		AddComplete is a MessageField
			restricted
			"Add_\Complete"

		InvoiceAddedAndIsPendingApprovalMsg is a MessageField
			restricted
			"InvoiceAddedAndIsPendingApproval"

		InvoiceAddedAndReleasedMsg is a MessageField
			restricted
			"InvoiceAddedAndReleased"

		InvoiceHoldComplete is a MessageField
			restricted
			"Invoice_\Hold_\Complete"

		APMonitorBatchReleaseMessage is a MessageField
			restricted
			"CannotChangeDeleteOrRelease;BatchReleaseOrDeleteInProgress"		  

		APMonitorInvoiceReleaseMessage is a MessageField
			restricted
			"CannotChangeDeleteOrRelease;InvoiceRegistrationReleaseInProgress"	  

		APMonitorProcessingMessage is a DerivedField
			type is MessageField
			restricted
			return APMonitorInvoiceReleaseMessage

		ErrorsExistMessage is a MessageField		
			"ErrorsExist"

		CancelledMessage is a MessageField
			restricted
			"Cancelled"

		MarkedPaidMessage is a MessageField			
			restricted
			"MarkedPaid"

		CreditApplied is a MessageField			
			restricted
			"CreditApplied"

		CancelledPOInvoiceMsg is a MessageField
			restricted
			"CannotMaintainACancelledPurchaseOrderInvoice"		 

		ChangeComplete is a MessageField
			restricted
			"ChangeComplete"

		ChangeTermsCodeWithTierDiscountConfirmMessage is a MessageField
			restricted
			"ChangingTermsCodeWillClearAllTierDiscounts;_\Continue?"

		InvoiceIsOutOfBalance is a MessageField
			restricted
			"ChangeComplete;InvoiceIsOutOfBalance"

		DisplayOutOfBalMsg is a DerivedField
			type is MessageField
			restricted
			return OutOfBalanceMsg

		OutOfBalanceMsg is a MessageField
			restricted
			"***InvoiceIsOutOfBalance***"

		LandedTaxWarningMessage	is a MessageField		
			restricted
			"NOTICE_-_\LandedTaxCodeEnteredButNo_\TaxableDistributionsExist"

		ShortPayMessage is a MessageField
			restricted
			"InvoiceAmountAndTaxAmountAdjustedForShortPay"

		VendorLocationMessage is a MessageField
			restricted
			"Pay_\VendorHasOneOrMoreRemitToLocations"


		InvoiceRecordStatus is a DerivedField
			type is MessageField
		   	if (CanceledInvoice)		
				return "Cancelled"				
			else
			if (IsInvoiceUnreleased)
				return "Unreleased"
			else
			if (IsReleased)
				return "Released"
			else
			if (IsInvoiceHistory)
				return "History"
			if (InvoiceHasBeenAmended)
				return AmendedText

		AmendedText is a MessageField
			restricted
			"Amended"

		InvoicesReleasedMessage is a MessageField
			restricted
			"InvoicesReleased"

		UnreleasedMessage is a MessageField
			"Unreleased"

		InvoiceIsNowOnHoldViaHoldCode is a MessageField
			restricted
			"InvoiceIsNowOnHoldViaHoldCode"

		InvoicesPutOnHoldMessage is a MessageField
			restricted
			"InvoicesPutOnHold"

		InvoicesTakenOffHoldMessage is a MessageField
			restricted
			"InvoicesTakenOffHold"

		InvoiceIsAvailableForPayment is a MessageField
			restricted
			"InvoiceIsAvailableForPayment"

		InvoicesFoundToProcessMessage is a MessageField
			restricted
			"InvoicesFoundToProcess"

		InvoiceSearchInFieldMessage is a MessageField
			restricted
			"EnterCompany,VendorOrInvoiceInformation"

		IncomeCodeUpdated is a MessageField
			restricted
			"IncomeCodeUpdated"

		InvoiceApproved is a MessageField
			restricted
			"InvoiceApproved"

		NotApprovedMessage is a MessageField
			restricted
			"InvoiceHasErrorsAndCannotBeApproved;PleaseReviewInvoice"

		InvoiceReleasedCannotChangeThisField is a MessageField
			restricted
			"InvoiceIsReleased;CannotChange"

		InvoiceHistoricalCannotChangeThisField is a MessageField
			restricted
			"InvoiceIsHistorical;CannotChange"

		MultipleInvoicesExistForVoucherMsg is a MessageField
			restricted
			"Inquire_\Complete_-_\MultipleInvoicesExistForVoucher"      

		RecordsProcessedTaxOutOfBalance is a MessageField
			restricted
			"RecordsProcessed;TaxOutOfBalanceBy<InvoiceTaxOutOfBalanceDifference>"      

		RecordsProcessedInvoiceOutOfBalance is a MessageField
			restricted
			"RecordsProcessed;DistributionsOutOfBalance<InvoiceOutOfBalanceDifference>" 

		VendorCommentsExistMessage is a MessageField
			restricted
			"Vendor_\Comments_\Exist"                                   

		VendorHasComments is a DerivedField
			type is MessageField
			if (Vendor.HasCurrentVendorComments)
				return VendorCommentsExistMessage
			return blank

		VendorReturnCreditedMoreThanReturnedMessage is a MessageField		
			"VendorReturn<VendorReturn>HasCreditsOf<VendorReturn.CreditReceived>,WhichExceedsTheReturnValueOf<VendorReturn.ReturnValue>"

		MultiplePurchaseOrdersMsg is a MessageField
			"Multiple_\Purchase_\OrdersOn_\Invoice"

		YesMessage is a MessageField
			restricted
			"Yes"

		NoMessage is a MessageField
			restricted
			"No"

		DerivedMatchError is a DerivedField
			type is Text
			if (MatchError)
				return YesMessage
			else
				return NoMessage

		DerivedException is a DerivedField
			type is Text
			restricted
			if (ExceptionInvoice)
				return YesMessage
			else
				return NoMessage

		DerivedMessageExists is a DerivedField
			type is Text
			if (MatchInvoiceMessageRelExists)
				return YesMessage
			else
				return NoMessage

		WorkFlowHold is a MessageField
			restricted
			"WorkFlowHoldCode"

		InvoiceChangedTaxableAmountOutOfBalance is a MessageField
			restricted
			"InvoiceChanged,_\Taxable_\AmountOutOfBalance"    

		ChangeCompleteInvoiceIsReleased is a MessageField
			restricted
			"ChangeComplete_-InvoiceIsReleased"        

		InvoiceReleasedMessage is a MessageField
			restricted
			"InvoiceIsReleased"

		CreateDetailCompleteMessage is a MessageField
			restricted
			"CreateDetailComplete."
		LinesAddedMessage is a MessageField
			restricted
			"LinesAdded"
		LinesNotCreated is a MessageField
			restricted
			"LinesWithInvoiceQuantityOfZeroNotCreated"
		BudgetEditsInProgress is a MessageField
			"BudgetEditsInProgress"
		EditsCompleteBudgetEditsInProgress is a MessageField
			restricted
			"EditsComplete;BudgetEditsInProgress"
		ReleaseCompleteMessage is a MessageField
			restricted
			"ReleaseComplete"
		ReleaseNotCompleteMessage is a MessageField
			restricted
			"ErrorsExist;InvoiceCannotRelease"
		MatchComplete is a MessageField
			restricted
			"MatchComplete"
		MatchedPOCostMessagesExist is a MessageField
			restricted
			"Matched-POCostMessagesExist"
		MatchedOutOfTolerance is a MessageField
			restricted
			"MatchedOutOfTolerance"
		MatchedInTolerance is a MessageField
			restricted
			"MatchedInTolerance"
		MatchedWithAutoChargeback is a MessageField
			restricted
			"MatchedWithAutoChargeback"

		CreateDetailsProcessingInBackgroundMsg is a MessageField
			"CreationOfInvoiceDetailsIsProcessingInBackground"

		MatchProcessingInBackgroundMsg is a MessageField
			"MatchOfInvoiceIsProcessingInBackground"

		UnmatchProcessingInBackgroundMsg is a MessageField
			"UnmatchOfInvoiceIsProcessingInBackground"

		ProcessingInBackgroundMsg is a MessageField
			"InvoiceIsProcessingInBackground"

		MatchProcessingInBackgroundAsyncFailureMsg is a MessageField
			"MatchBackgroundActionFailed;CheckMyActionsOrAsyncQueue"

		InvoiceForPOAlreadySelectedMsg is a MessageField
			restricted
			"CannotMatch,InvoiceForThisPurchaseOrderAlreadySelectedForAutoMatch,RunAgain"

		InvoiceHasPaymentsOnHoldMsg is a MessageField		
			"InvoiceHasPaymentsOnHold"

		DistributionCodeIsProcessingInBackgroundMsg is a MessageField		
			"DistributionCodeIsProcessingInBackground...PleaseContinue"

		TaxIsProcessingInBackgroundMsg is a MessageField		
			"TaxIsProcessingInBackground...PleaseContinue"

		BudgetsExceededCouldNotReleaseMsg is a MessageField		
			"BudgetsExceeded;CouldNotRelease;SeeWarningsAndErrorsTab"

		LastMatchAttemptMsg is a MessageField		
			"LastMatchAttempt:<MatchReconQueueRel.MatchWork.VerifyMatchMessage>"

		ErrorsExistMsg is a MessageField		
			"Errors_\Exist_-_\SeeWarningsAndErrorsTabForDetails"

		ExceedsMaxSpendMsg is a MessageField	
			"PaymentAmountExceedsMaxSpendAmount;<first ValidateVendorCertificationMaxSpendExistsRel.MaximumSpendAmount>ForVendorCertificationCode;<first ValidateVendorCertificationMaxSpendExistsRel.PayablesCertificationCode>"	

		DerivedSabrixMessage is a DerivedField			
			type is MessageField
			if (SabrixMessage		entered
			and SabrixError   		entered)
				return "Sabrix<SabrixError>Message:_<SabrixMessage>"
			if (SabrixMessage	not entered
			or  SabrixError   		entered)
				return "SabrixReturnedMessageType:_<SabrixError>"
			if (SabrixMessage	not entered
			or  SabrixError   	not entered)
				return blank

		DerivedIsSelectedForAR is a DerivedField
			type is Boolean
			restricted
			if (IsSelectedForAR)
				return true
			else
				return false
		DerivedNoOpenInvoiceMessages is a DerivedField
			type is Boolean
			return NoOpenInvoiceMessages

		InvoiceAddedBankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat is a MessageField	
			restricted
			"InvoiceAdded;BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"		

		InvoiceChangedBankAccountTypeMustBeCheckingOrSavingsForACHPaymentFormat is a MessageField	
			restricted
			"InvoiceChanged;BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	






		DerivedChargebackIssueDate is a DerivedField
			type is Date
			if (CancelDate entered)
				return blank
			return current corporate date

		DerivedCancelMessage is a DerivedField
			type is Alpha 20
			if (Suffix = 111
			and CancelSequence entered)
				return "Chargeback Cancelled"

		DerivedVATRegistrationCountry is a DerivedField
			type is like Country
			if (TaxEntityRel exists)
				return TaxEntityRel.VATRegistrationCountry

		DerivedVATRegistrationNumber is a DerivedField 
			type is like VATRegistrationNumber
			holds pii
			if (TaxEntityRel exists)
				return TaxEntityRel.VATRegistrationNumber

		DerivedChargebackAmount is a DerivedField
			type is like InternationalAmount
			if (Suffix = 111) 
				initialize LocalInvoiceAmount
				LocalInvoiceAmount  = sum PayablesInvoiceDetailRel.TotalDistributionAmount
				LocalInvoiceAmount += sum PayablesInvoiceDetailRel.TaxAmount
				return LocalInvoiceAmount
			else 
				return InvoiceAmount.CurrencyAmount

		DerivedFirstPurchaseOrder is a DerivedField
			type is Alpha 20
			if (Suffix = 111) 
				return first PayablesInvoiceOriginalRel.FirstPurchaseOrder
			else 
				return ExternalPurchaseOrder

		DerivedOriginalInvoice is a DerivedField
			type is like PayablesInvoice
			return first PayablesInvoiceOriginalRel.PayablesInvoice

		DerivedHasInvoiceComments is a DerivedField
			type is Alpha 3
			if (PayablesInvoiceCommentForIDMRel exists)
				return "Yes"
			else
				return "No"

		DerivedLastMatchMessage is a DerivedField
			type is Alpha 200
			default label is "LastMatchAttemptMessage"
			if (last MatchWorkRel.VerifyMatchMessage entered)
				return last MatchWorkRel.VerifyMatchMessage
			return last AutoMatchResultInvoiceRel.ErrorMessage

		DerivedHasReceiptDetails is a DerivedField
			type is Alpha 3
			if (PurchaseOrderReceiptsForChargebackRel exists
			or  PurchaseOrderReceiptsForVendorReturnRel exists)
				return "Yes"
			else
				return "No"

		DerivedContractList is a DerivedField
			type is Alpha 150
			initialize LocalTitle
			LoopCounter = instance count of MatchServiceContractInvoicesRel
			Sub1 = 1
			if (LoopCounter = 0)
				LocalTitle = ServiceContract 
			else
				for each MatchServiceContractInvoicesRel
					LocalTitle += each.Contract

					if (Sub1 > 10)
						LocalTitle += "..."
						end for each
					if (LoopCounter > Sub1)
						LocalTitle += SemiColonSpace
					Sub1 += 1
			return LocalTitle

		DerivedPayablesChargebackFileName	is a StringField
			type is Alpha 100
			"Payables Chargeback "
			Company
			"-"
			Vendor
			"-"
			Invoice
			" As of "
			CurrentDate

		DerivedEmailSubject is a MessageField
			restricted
			"Invoice<Invoice>_ForVendor<Vendor.VendorName>"

		DerivedCompanyEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			if (InvoiceType.CreditMemo)
				LocalPayablesChargebackIDMEmailSubject = Company.PayablesChargebackIDMEmailSubject
			else
			if (InvoiceType.DebitMemo)
				LocalPayablesChargebackIDMEmailSubject = Company.PayablesDebitMemoIDMEmailSubject
			return LocalPayablesChargebackIDMEmailSubject text

		EmailNotificationMsg is a MessageField
			restricted
			"Company<Company>Invoice<Invoice>WasSentToVendor<Vendor>-<Vendor.VendorName>"

		PaymentAccrualMessage is a MessageField
			restricted
			"Payment_Accrual"

		CashDiscountMessage is a MessageField
			restricted
			"Cash_Discount"

		IncomeWithholdingAccrualMessage is a MessageField
			restricted
			"Income_Withholding_Accrual"

		SecondaryWithholdingAccrualMessage is a MessageField
			restricted
			"Secondary_Withholding_Accrual"

		ProcessIndicatorNotFoundMessage is a LabelField
			"ProcessIndicatorNotFound"

		DerivedChargebackInvoicedTaxTotal is a DerivedField
			type is like CurrencyAmount
			return sum EntityTaxCodeForPayablesInvoiceRel.DerivedIDMInvoiceTaxTotal

		DerivedCanceledOrIssueCreditMemo is a DerivedField
			type is Alpha 11
			if (TransientIDMWatermark = "Cancelled")
				return "Cancel Date"
			else
				return "Issue Date"

		DerivedCcEmailAddress is a DerivedField
			type is like MultipleEmailAddress
			restricted
			initialize LocalEmailCc
			if (CreditOrDebitFromEmailAddress not = config.DefaultFromEmailAddress)
				LocalEmailCc += CreditOrDebitFromEmailAddress

			if (InvoiceType.CreditMemo)
				for each Vendor.VendorContactForIDMEmailCreditMemoRel
					if (LocalEmailCc entered)
						LocalEmailCc += ", "
					LocalEmailCc += each.EmailAddress
			else
			if (InvoiceType.DebitMemo)
				for each Vendor.VendorContactForIDMEmailDebitMemoRel
					if (LocalEmailCc entered)
						LocalEmailCc += ", "
					LocalEmailCc += each.EmailAddress
			return LocalEmailCc



		DerivedPayablesDebitMemoFileName	is a StringField
			type is Alpha 100
			"Payables Debit Memo "
			Company
			"-"
			Vendor
			"-"
			Invoice
			" As of "
			CurrentDate

		DerivedDebitMemoPrintDate is a DerivedField
			type is Date
			return current corporate date

		DerivedIDMFlexTerms is a DerivedField
			type is Alpha 3
			if (FlexTerms)
				return "Yes"
			return "No"

		DerivedIDMAnticipation is a DerivedField
			type is Alpha 3
			if (Anticipation)
				return "Yes"
			return "No"

		DerivedIDMDebitMemoInterfacedInvoiceLinesCheck is a DerivedField
			type is Alpha 3
			if (PayablesInvoiceCommentForIDMDebitMemoRel exists)
				return "Yes"
			return "No"

		DerivedContractRebateDue is a DerivedField
			type is like ContractRebateDue
			restricted
			return first ContractRebateDueInvoiceLinesRel.ContractRebateDue

		DerivedCompanyRepresentativeText is a DerivedField
			type is Text
			return Company.RepresentativeText

		DerivedBuyerName is a DerivedField
			type is Alpha up to 101
			return Buyer.Employee.FirstLastName

		DerivedBuyerEmail is a DerivedField
			type is Alpha up to 100
			return Buyer.Employee.EmployeeWorkEmailAddress

		DerivedBuyerPhone is a DerivedField
			type is Alpha up to 100
			return Buyer.Employee.EmployeeWorkTelephone


		DerivedMemOfEu is a DerivedField
			type is Boolean
			restricted
			return Company.GeneralLedgerCompany.AccountingEntity.AddressCode.PostalAddress.Country.MemberOfEC

		DerivedVenMemofEu is a DerivedField
			type is Boolean
			restricted
			return Vendor.CurrentAddressRel.PostalAddress.Country.MemberOfEC

		DerivedVenLocMemOfEu is a DerivedField
			type is Boolean
			restricted
			return VendorLocationRemitRel.CurrentAddressRel.PostalAddress.Country.MemberOfEC

		
		DerivedReplacementInvoiceNavigationMessage is a DerivedField	
			type is Text
			restricted
			if (IsRecurringInvoice)
				return DerivedUpdatedRecurringInvoiceMessage
			return DerivedReinstatedInvoiceMessage
	
		DerivedUpdatedRecurringInvoiceMessage is a LabelField
			"GoToUpdatedReccuringInvoice"

		DerivedReinstatedInvoiceMessage is a LabelField
			"GoToReinstatedInvoice"

		DerivedApprovalTeamMaxApprovalAmount is a DerivedField     
			type is like CurrencyAmount
			return RoutingCode.InvoiceRoutingCodeResourceRel.DerivedMaxApprovalAmountForApprovalTeam

		DerivedApproverDescription is a DerivedField     
			type is Alpha 230
			return RoutingCode.InvoiceRoutingCodeResourceRel.DerivedDescription

		EnforceProcessorCannotBeApproverEmailSubject is a MessageField		
			restricted
			"Invoice<Invoice>For_\Vendor<Vendor.VendorName>HasNotBeenApproved:CannotApproveOwnInvoice"

		ExceedsMaxApprovalAmountEmailSubject is a MessageField				
			restricted
			"Invoice<Invoice>For_\Vendor<Vendor.VendorName>HasNotBeenApproved:ExceedsMaximumApprovalAmount"

		EnforceProcessorCannotBeApproverEmailMessage is a MessageField		
			restricted
			"InvoiceHasNotBeenApproved.AnInvoiceProcessorCannotApproveTheirOwnInvoice;PleaseReassignToAnother_\Approver."

		EnforceMaxApprovalAmountEmailMessage is a MessageField				
			restricted
			"InvoiceHasNotBeenApproved._\Vendor_\Group<Company.VendorGroup>EnforcesMaximumInvoiceApprovalAmountAndThe_\Invoice_\AmountOf<LocalExtendedAmount>IsGreaterThanTheMaximumApprovalAmountOf<first CurrentInvoiceRoutingCodeLevelRel.DerivedMaxApprovalAmount>For_\Final_\Approver;PleaseReassignToAnother_\Approver."

		RoutingCodeTeamMemberAssignmentEmailMessage is a MessageField		
			restricted
			"InvoiceHasNotBeenApproved.ApprovalCode<RoutingCode>Uses_\Team_\Member_\AssignmentAndThe_\Invoice_\AmountOf<LocalExtendedAmount>IsGreaterThanTheMaximumApprovalAmountOf<first CurrentInvoiceRoutingCodeLevelRel.DerivedMaxApprovalAmount>For_\Final_\Approver;PleaseReassignToAnother_\Approver."

		RoutingCodeGroupTeamMemberAssignmentEmailMessage is a MessageField	
			restricted
			"InvoiceHasNotBeenApproved.ApprovalCode<RoutingCode>Uses_\Team_\Member_\AssignmentWithin_\Approval_\Code_\Group<InvoiceRoutingCodeGroup.Name>AndThe_\Invoice_\AmountOf<LocalExtendedAmount>IsGreaterThanTheMaximumApprovalAmountOf<first CurrentInvoiceRoutingCodeLevelRel.DerivedMaxApprovalAmount>For_\Final_\Approver;PleaseReassignToAnother_\Approver."

		InvoiceAssignMsg is a MessageField 
			restricted 
			"AssignInvoice"

		InvoiceReassignMsg is a MessageField 
			restricted 
			"ReassignInvoice"
			
		DerivedSendNotApprovedEmailSubject is a DerivedField	   			
			type is MessageField
			restricted
			if (Company.EnforceProcessorCannotBeApprover)
				return EnforceProcessorCannotBeApproverEmailSubject
			if ((Company.VendorGroup.EnforceMaxInvoiceApprovalAmount
			or   RoutingCode.UsesTeamMemberAssignment
			or   InvoiceRoutingCodeGroup.FinalLevelUsesTeamMemberAssignment)
			and !Company.EnforceProcessorCannotBeApprover)
				return ExceedsMaxApprovalAmountEmailSubject

		DerivedSendNotApprovedEmailContents is a DerivedField	   			
			type is MessageField
			restricted
			if (Company.EnforceProcessorCannotBeApprover)
				return EnforceProcessorCannotBeApproverEmailMessage
			if (InvoiceRoutingCodeGroup.FinalLevelUsesTeamMemberAssignment
			and !Company.EnforceProcessorCannotBeApprover)
				return RoutingCodeGroupTeamMemberAssignmentEmailMessage
			if (RoutingCode.UsesTeamMemberAssignment
			and !Company.EnforceProcessorCannotBeApprover)
				return RoutingCodeTeamMemberAssignmentEmailMessage
			if (Company.VendorGroup.EnforceMaxInvoiceApprovalAmount
			and !RoutingCode.UsesTeamMemberAssignment
			and !InvoiceRoutingCodeGroup.FinalLevelUsesTeamMemberAssignment
			and !Company.EnforceProcessorCannotBeApprover)
				return EnforceMaxApprovalAmountEmailMessage

		DerivedPurgeCompletionDetailText	is a DerivedField
			type is RichText
			return DerivedPurgePayablesInvoiceText

		DerivedPurgePayablesInvoiceText is a MessageField
			"PayablesInvoicePurgeHasBeenCompletedFor<LocalPurgeCount>Records."

#ifdef module idm
		DerivedIDMConnected is a DerivedField
			type is Boolean
			restricted
			if (IDMConfigurationRel exists)
				IDMConnected = true
				invoke BackgroundTestConnection IDMConfigurationRel
					resume on error
						IDMConnected = false
				return IDMConnected
#endif

		RequireRemitToMessage is a MessageField 
			restricted
			"Field_\Remit_\To_\LocationRequiredBySetup"

		DerivedExpenseManagementURL is a DerivedField		
            type is Alpha size 2083
            return ExpenseManagementInterfaceConfigurationRel.XMURL + "=" + Invoice
            
		AccruedInvoiceMessageField is a MessageField 
			"Company:<Company>,_Invoice:<Invoice>,_Accrual"
			
		PurgeInvoiceBackgroundGroupKey is a StringField
			type is Alpha 150
			"PayablesInvoice-PurgeInvoiceData"
			"-"
			Company
			"-"
			PayablesInvoice
			

	Form Invokes




	Actions




		TriggerSupplierInvoiceNativeLPLBOD is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmTriggerFrom 			is Alpha size 100
				RestartFlag				is Boolean
				PrmFSMInboundBODTracker	is Numeric 15
			Entrance Rules
			Action Rules
				LocalTriggerFrom   			 = PrmTriggerFrom
				if(RestartFlag)
					LocalFSMInboundBODTracker = PrmFSMInboundBODTracker
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "SupplierInvoice"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= LocalTriggerFrom
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmBusinessGroup			= Vendor.VendorGroup
					invoked.PrmCompany 					= Company
					invoked.PrmAccountingEntity 		= Company.AccountingEntity
					invoked.PrmMainUserTemplate 		= "IONSupplierInvoiceXML_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					invoke TriggerSupplierInvoiceNativeLPL
						invoked.PrmTriggerFrom 						= LocalTriggerFrom
						invoked.RestartFlag							= RestartFlag
						invoked.PrmFSMInboundBODTracker				= PrmFSMInboundBODTracker
					
		TriggerSupplierInvoiceNativeLPL is an Instance Action
			default label is untranslatable
			restricted

			Parameters
				PrmTriggerFrom 			is Alpha size 100
				RestartFlag				is Boolean
				PrmFSMInboundBODTracker	is Numeric 15
			Entrance Rules
			Action Rules
				LocalTriggerFrom   			 = PrmTriggerFrom
				if(RestartFlag)
					LocalFSMInboundBODTracker = PrmFSMInboundBODTracker
				if(LocalFSMInboundBODTracker not entered)
					invoke Create FSMInboundBODTracker
						assign result to NewBODTracker
						invoked.Verb 					= 1
						invoked.Noun 					= "SupplierInvoice"					
						invoked.BODDocumentID			= GroupDocumentID
						invoked.BODVariationID			= BODVariationID
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.BODAccountingEntity		= BODAccountingEntity
						invoked.Direction				= 1
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.Company					= Company
						invoked.Invoice					= Invoice
						invoked.Vendor					= Vendor
						invoked.Reference1				= PayablesInvoice
						invoked.Reference2				= LocalTriggerFrom
						initialize invoked.Error			
						initialize invoked.ErrorMessage					
					LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
				else 
					invoke Update FSMInboundBODTrackerRel
						invoked.BODDocumentID			= GroupDocumentID
						invoked.BODVariationID			= BODVariationID
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.BODAccountingEntity		= BODAccountingEntity
						invoked.Direction				= 1
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.Company					= Company
						invoked.Invoice					= Invoice
						invoked.Vendor					= Vendor
						invoked.Reference1				= PayablesInvoice
						invoked.Reference2				= LocalTriggerFrom
						initialize invoked.Error			
						initialize invoked.ErrorMessage
						initialize invoked.BODXML
						
				if (PayablesInvoiceDistributionRel exist)
					LocalCommitDistribution = 0
					for each PayablesInvoiceDistributionRel
						if(DerivedIntegrationApplication != "Local.ly" and each.AddOnCharge not entered  and each.TaxCode not entered and ((!MatchInvoice.POInvoice)
						or (MatchInvoice.POInvoice and each.PurchaseOrder = 0 and each.PurchaseOrderLine = 0) 
						or (MatchInvoice.POInvoice  and each.PurchaseOrder >0  and each.PurchaseOrderLine > 0
						and each.InvoiceType.CreditMemo and each.Suffix = 999)))
							LocalCommitDistribution += 1
							LocalSupplierInvoiceDistributionXMLBOD += template.IONSupplierInvoiceDistributionXML_ST document for each
							if(LocalCommitDistribution = 500)
								invoke Update FSMInboundBODTrackerRel
									invoked.BODXML += LocalSupplierInvoiceDistributionXMLBOD
								initialize LocalSupplierInvoiceDistributionXMLBOD
								initialize LocalCommitDistribution
								commit transaction
								
					if(FSMInboundBODTrackerRel exists)
						invoke Update FSMInboundBODTrackerRel
							invoked.BODXML += LocalSupplierInvoiceDistributionXMLBOD
						LocalSupplierInvoiceDistributionXMLBOD = FSMInboundBODTrackerRel.BODXML


				if(MatchInvoice.POInvoice and ServiceContract not entered)
					if (PayablesInvoiceDetailRel exist)
						initialize LocalPurchaseOrderLineCount
						LocalCommitmatchDetail = 0
						for each PayablesInvoiceDetailRel
							LocalPurchaseOrderLineCount +=1
							each.LocalPurchaseOrderLineNumber	= LocalPurchaseOrderLineCount
							LocalCommitmatchDetail += 1
							LocalSupplierInvoiceDetailXMLBOD += template.IONSupplierInvoiceDetailXML_ST document for each
							if(LocalCommitmatchDetail = 500)
								invoke Update FSMInboundBODTrackerRel
									invoked.BODXML += LocalSupplierInvoiceDetailXMLBOD
								initialize LocalSupplierInvoiceDetailXMLBOD
								initialize LocalCommitmatchDetail
								commit transaction
								
						if(FSMInboundBODTrackerRel exists)
							invoke Update FSMInboundBODTrackerRel
								invoked.BODXML += LocalSupplierInvoiceDetailXMLBOD
							LocalSupplierInvoiceDetailXMLBOD = FSMInboundBODTrackerRel.BODXML
				
				invoke SendSyncSupplierInvoiceNativeLPLBOD
					resume on error
                   		Error            				= true
                        ErrorMessage     				= error message
                if(Error)
					invoke Update FSMInboundBODTrackerRel
						invoked.Error 					= Error
						invoked.ErrorMessage 			= ErrorMessage
						invoked.Status					= 2
						invoked.BODID					= BODFormattedId
						invoked.CloseDate				= system current timestamp
						invoked.BODXML					= SupplierInvoiceXMLBOD
				else
					invoke Update FSMInboundBODTrackerRel
						invoked.Status					= 3
						invoked.CloseDate				= system current timestamp
						invoked.BODID					= BODFormattedId
						invoked.BODXML					= SupplierInvoiceXMLBOD	
					
		SendSyncSupplierInvoiceNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				send ion bod
					bod is SupplierInvoiceXMLBOD
					bod type is "Sync.SupplierInvoice"
					accounting entity is BODAccountingEntity
					document id is GroupDocumentID
					variation id is BODVariationID

		TriggerSupplierInvoiceBOD is an Instance Action
			default label is untranslatable
			restricted
			Parameters


				PrmCreateTimeStamp is TimeStamp
				PrmUpdateTimeStamp is TimeStamp
				PrmInvoiceOnHold   is Boolean
				PrmHoldAction	   is Alpha size 1
			Action Rules
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger and (!Status.Unreleased))
					increment bod id.VariationID
					ActionCode = ActionCode.Update
					if (action type.Create)
						ActionCode = ActionCode.Create
					LastUpdateDate 	= current timestamp
					LastUpdateBy 	= actor
					LocalTitle = "EG:"+GeneralLedgerCompanyRel.FinanceEnterpriseGroup+"  CO:"+Company+" VN:"+Vendor+" INV:"+Invoice+" PI:"+PayablesInvoice+" SF:"+Suffix
					include TriggerSupplierInvoiceRules


		UpdateFieldsFromSupplierInvoiceInBOD is an Instance Action

			default label is untranslatable
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
				PrmVendor          	 is a Vendor
				PrmInvoice 			 is a Invoice
				PrmInvoiceDate       is an ExchangeDate
				PrmInvoiceType		 is Alpha size 20
				PrmProcessLevel	 	 is a PayablesProcessLevel
				PrmPONumber			 is a PurchaseOrder
				PrmRemitToCode		 is Alpha size 22
				PrmInvoiceAmount     is a CurrencyAmount
				PrmInvoiceCurrency   is a Currency
				PrmTaxCode  		 is a TaxCode
				PrmPayVendor         is a Vendor
				PrmDescription		 is a Description
			Action Rules
				InvoiceDate		= PrmInvoiceDate
				InvoiceType		= PrmInvoiceType
				ProcessLevel	=PrmProcessLevel
				if(MatchPurchaseOrderInvoicesRel exists)
					invoke Update MatchPurchaseOrderInvoicesRel
						invoked.PurchaseOrder = PrmPONumber
				RemitToCode		= PrmRemitToCode
				InvoiceAmount	= PrmInvoiceAmount
				InvoiceCurrency	= PrmInvoiceCurrency
				TaxCode			= PrmTaxCode
				PayVendor		= PrmPayVendor
				Description		= PrmDescription

		CreateVendorOffsetCreditMemo is a Create Action		
			default label is untranslatable
			restricted
			Action Rules
				ActionType			= ActionType.CreateType
				Invoice				= "DEBTOR"
				InvoiceSource		= InvoiceSource.DebtorCreditMemo
				MatchProcessType	= MatchProcessType.Expense
				MatchInvoice		= MatchInvoice.ExpenseInvoice
			Exit Rules
				Invoice				+= VoucherNumberDisplay
				include CreatePayablesInvoicePayment

		CreateChargeback is a Create Action		
			default label is untranslatable
			restricted
			completion message is "<ActionCompleteMessage>"
			Entrance Rules
				InvoiceType = "C"
				Suffix = 111
				BypassActiveResourceEdit = true
				if (InvoiceSource not entered)	
					InvoiceSource = "N"		
			Action Rules

				ActionType = ActionType.CreateType
				include CreateAndUpdateRules
			Exit Rules
				include CreateExitRules
				include CreateAndUpdateExitRules
				include Messaging
				ExternalPurchaseOrder = first PayablesInvoiceOriginalRel.ExternalPurchaseOrder




		UpdateBODIdFields is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord

		UploadToIDM is an Instance Action  
			valid when (AttachmentsValidForIDMUpload)
			Action Rules

				if (SupplierInvoiceAttachment.ValidForIDMUpload) 
					include IDM.MoveAttachmentsToIDM 
						replace AttachmentField with SupplierInvoiceAttachment

				if (SupplierPODAttachment.ValidForIDMUpload) 
					include IDM.MoveAttachmentsToIDM 
						replace AttachmentField with SupplierPODAttachment
						
						
									
		MoveAttachmentsToIDM is a Set Action
			restricted
			Instance Selection
				where (AttachmentsAreLocallyStored)

			Accumulators
				InstanceCount

			Action Rules
				Instance Rules
					increment InstanceCount	

					if (SupplierInvoiceAttachment.IsLocal) 
						include IDM.MoveAttachmentsToIDM 
							replace AttachmentField with SupplierInvoiceAttachment
					
					if (SupplierPODAttachment.IsLocal) 
						include IDM.MoveAttachmentsToIDM
							replace AttachmentField with SupplierPODAttachment 		

					commit transaction

					if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
						end set action instance loop
						
		SendApprovalProcessEmails is an Instance Action				
			default label is untranslatable
			restricted
			Parameters
				PrmCurrentApprover is an Actor
			Action Rules
				LocalActor = PrmCurrentApprover
				include SendApprovedEmailMessage

		CreatePrepaymentCredit is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmPrepayCompany	is a PayablesCompany
				PrmPrepayInvoice	is a PayablesInvoice
			Parameter Rules
				PrmPrepayCompany
					required
				PrmPrepayInvoice
					required
					constraint (PrmPrepayInvoice.InvoiceType.Prepayment)
						"InvoiceTypeMustBe_\Prepayment"
			Local Fields
				LocalPrepaySuffix		is a Suffix
				LocalDistributionDate  is Date
			Action Rules
				LocalPrepayCompany	= PrmPrepayInvoice.Company
				LocalPrepayVendor	= PrmPrepayInvoice.Vendor
				LocalPrepayInvoice	= PrmPrepayInvoice.Invoice
				LocalPrepaySuffix	= "1"						




				if (CompanySystemClosingControlRel.Control)    
					if (DistributionDate within CompanySystemClosingControlRel.ValidEntryDate)
						LocalDistributionDate = DistributionDate
					else
						LocalDistributionDate = CompanySystemClosingControlRel.ValidEntryDate.Begin
				else
					LocalDistributionDate = DistributionDate
				invoke CreateInvoice PayablesInvoice		
					assign result to NewPrepayCredit
					fill in user fields from PrmPrepayInvoice
					fill in fields from PrmPrepayInvoice
						except invoked.UniqueID
						except invoked.Status
						except invoked.CreateDate		
					invoked.InvoiceType 				= "Y"					
					invoked.Suffix						= LocalPrepaySuffix
					invoked.DistributionDate			= LocalDistributionDate 
					initialize invoked.CancelSequence
					initialize invoked.AllowableAmountForDiscount
					initialize invoked.DiscountAmount
					initialize invoked.DiscountDate
					initialize invoked.DiscountPercent
					initialize invoked.DiscountAmount1
					initialize invoked.BaseDiscountAmount1
					initialize invoked.DiscountDate1
					initialize invoked.DiscountPercent1
					initialize invoked.DiscountAmount2
					initialize invoked.BaseDiscountAmount2
					initialize invoked.DiscountDate2
					initialize invoked.DiscountPercent2
					initialize invoked.DiscountAmount3
					initialize invoked.BaseDiscountAmount3
					initialize invoked.DiscountDate3
					initialize invoked.DiscountPercent3
					initialize invoked.TransientPaymentAmount
					initialize invoked.TransientPaymentDate
					initialize invoked.TransientPaymentNumber
					initialize invoked.TotalPaymentAmount
					initialize invoked.TotalDistributionAmount
					initialize invoked.InvoiceGroup
					initialize invoked.TotalTaxAmount
					initialize invoked.BankInstructions1		
					initialize invoked.BankInstructions2		
					initialize invoked.BankInstructions3		
					initialize invoked.BankInstructions4		
					initialize invoked.OriginatingInterfaceRun	
					
				if (Company.GlobalWithholding)					
					for each PayablesInvoiceWithholdingRel	
						invoke Create PayablesInvoiceWithholding
							invoked.Company							= Company
							invoked.PayablesInvoice					= NewPrepayCredit.PayablesInvoice
							invoked.IncomeWithholdingCode			= each.IncomeWithholdingCode
							invoked.WithholdingCategory				= each.WithholdingCategory
							invoked.ReportableAmount				= each.ReportableAmount *-1
							invoked.WithholdingRate					= each.WithholdingRate

			Exit Rules
				LocalHoldCode			= Company.VendorGroup.PrepaymentHoldCode
				invoke PutInvoiceOnHold NewPrepayCreditRel
					invoked.HoldCode 	= LocalHoldCode
				invoke Unreleased.Release NewPrepayCreditRel


		DeleteInvoice is a Delete Action	
			default label is untranslatable
			restricted
			Entrance Rules
				include DeleteDistributions
				include DeleteEntranceRules

		FinishDelete is a Delete Action
			default label is untranslatable
			restricted
			Entrance Rules
				include DeleteEntranceRules


		CreateShortPayCommentAction is an Instance Action		
			default label is untranslatable
			restricted
			Action Rules
				include CreateShortPayComment


		CancelCreditMemo is an Instance Action		//Called from "CancelInvoice" Instance Action	440-CANCEL-CREDIT-MEMO
			default label is untranslatable
			restricted								
			Parameters
				PrmCancelDate		is Date					
				PrmCancelSequence	is like CancelSequence	
				PrmActionComment	is a CommentText		
			Entrance Rules
				LocalCancelDate		= PrmCancelDate			
				LocalCancelSequence	= PrmCancelSequence		
				LocalActionComment	= PrmActionComment		
				constraint (AmountPaid not entered)
					"CannotCancelPrepaymentCredit;PaymentsHaveBeenMade"		
				constraint (!PaymentsHaveBeenMadeRel exists)
					"CannotCancelPrepaymentCredit;InvoiceIsBeingProcessedForPayment"
				LocalRunProgram		= LocalRunProgram.CashRequirements
				constraint (!PaymentsHaveBeenScheduledRel exists)	
					"CannotCancelPrepaymentCredit;InvoiceScheduledForPayment"
			Action Rules
				include CancelDistributions		
				invoke TakeInvoiceOffHold
				CancelDate = LocalCancelDate
				CancelSequence = LocalCancelSequence
				Status = 6
				include CancelPayments			
				for each PayablesCreditMemo2Rel	
					invoke Delete each












		ProcessDistributionCode2 is an Instance Action			
			default label is untranslatable
			restricted
			Action Rules
				constraint (false)
					"ThisActionIsDeprecated;Use_\Process\Distribution\CodeAction"


		ProcessDistributionCodeNew is an Instance Action			
			default label is untranslatable
			restricted
			Parameters
				PrmTaxTableInvoicedAmount			is a CurrencyAmount
				PrmTaxMethod						is a TaxMethod
				PrmDistributionCode					is a PayablesDistributionCode
				PrmTaxAmount						is a CurrencyAmount
				PrmTaxableAmount					is an InternationalAmount
				PrmLinkedTax						is Boolean
				PrmUnitsAmount						is an InternationalAmount	

			Local Fields
				LocalStartingDistSum				is an InternalAmount	
				LocalStartingTaxableSum				is an InternalAmount	
				LocalStartingTaxSum					is an InternalAmount	
				LocalRunningDistSum					is an InternalAmount	
				LocalRunningTaxableSum				is an InternalAmount	
				LocalRunningTaxSum					is a CurrencyAmount	
				LocalExpenseAmtToSpread				is an InternalAmount	
				LocalTaxableAmtToSpread				is an InternalAmount	
				LocalTaxAmtToSpread					is an InternalAmount	
				LocalIsLast							is Boolean				
				LocalCalcedTaxAmt					is an InternalAmount	
				LocalTaxAmtAdjustment				is an InternalAmount	

			Action Rules





				initialize NewUnitsAmount			
				initialize SumUnitsAmount			
				initialize LocalStartingDistSum 	
				initialize LocalStartingTaxableSum	
				initialize LocalStartingTaxSum		
				initialize LocalRunningDistSum		
				initialize LocalRunningTaxableSum	
				initialize LocalRunningTaxSum		

				TransientLineTax					= PrmLinkedTax
				LocalDistributionCode				= PrmDistributionCode
				LastPayablesDistributionCodeDetail 	= last DistributionCodeDetailRel.PayablesDistributionCodeDetail



				for each PayablesInvoiceDistributionRel		
					if  (each.IsDistributionType
					and !each.IsAccruedTaxDistribution
					and !each.IsAccruedVATTax)
						if (!each.IsTaxDistribution)
							LocalStartingDistSum 		+= each.DistributionAmount.CurrencyAmount
							if (each.TaxIndicator.Taxable)
								LocalStartingTaxableSum += each.TaxableAmount
					if  (each.IsTaxDistribution
					and !each.IsAccruedVATTax)
						LocalStartingTaxSum  			+= each.DistributionAmount.CurrencyAmount




				LocalRunningTaxSum		= LocalStartingTaxSum				
				round LocalRunningTaxSum to nearest DerivedRoundTo			







				LocalRunningDistSum 	= LocalStartingDistSum		
				round LocalRunningDistSum to nearest DerivedRoundTo			

				LocalRunningTaxableSum	= LocalStartingTaxableSum				
				round LocalRunningTaxableSum to nearest DerivedRoundTo			










				LocalExpenseAmtToSpread	= ((InvoiceAmount.CurrencyAmount - PrmTaxAmount) - LocalRunningDistSum)		


				LocalTaxableAmtToSpread	= PrmTaxableAmount - LocalStartingTaxableSum			
				LocalTaxAmtToSpread		= PrmTaxAmount - LocalStartingTaxSum					




				for each DistributionCodeDetailRel
					initialize NewDistributionAmount
					initialize NewDistribTaxableAmount
					initialize NewDistribTaxAmount	
					if (each.PayablesDistributionCodeDetail = LastPayablesDistributionCodeDetail)
						LocalIsLast = true		


						TransientBypassErrorUpdate = false
						if (each.DistributionAmount entered)
							NewDistributionAmount 	= each.DistributionAmount
							NewDistribTaxableAmount	= NewDistributionAmount
						else

							if (each.DistributionPercent entered)


								if (TaxCode entered
								and LocalTaxAmtToSpread entered
								and LocalTaxTableInvoicedAmount not entered		
								and TransientLineTax)			

									TransientBypassTaxAmountEdit = true		
									if (PrmTaxMethod.Accrued)

										NewDistributionAmount = (InvoiceAmount.CurrencyAmount - LocalRunningDistSum) 

										if (LocalTaxableAmtToSpread entered)

											if (PayablesInvoiceTaxRel.EnteredTaxAmount not entered
											and PayablesInvoiceTaxRel.TaxSystemTaxAmount entered)

												NewDistribTaxAmount	= (PayablesInvoiceTaxRel.TaxSystemTaxAmount - LocalRunningTaxSum)

											else


												NewDistribTaxAmount		= ((LocalTaxAmtToSpread + LocalStartingTaxSum) - LocalRunningTaxSum)

											if (CalculateTax.OutputTaxRate entered)
												NewDistribTaxableAmount = (NewDistribTaxAmount / CalculateTax.OutputTaxRate)

												if (NewDistribTaxableAmount > NewDistributionAmount				
												or (NewDistribTaxableAmount < NewDistributionAmount				
												and PayablesInvoiceTaxRel.EnteredTaxableAmount not entered))	
													NewDistribTaxableAmount = NewDistributionAmount				

											else


												NewDistribTaxableAmount = (PrmTaxableAmount - (LocalTaxableAmtToSpread + LocalStartingTaxableSum))


										else

											NewDistribTaxableAmount = NewDistributionAmount
											NewDistribTaxAmount		= ((LocalTaxAmtToSpread + LocalStartingTaxSum) - LocalRunningTaxSum)

									else	

										if (LocalTaxableAmtToSpread entered)



											NewDistribTaxableAmount = ((LocalTaxableAmtToSpread + LocalStartingTaxableSum) - LocalRunningTaxableSum)

											if (DoTaxAfter)	
												NewDistribTaxAmount = LocalTaxAmtToSpread - LocalRunningTaxSum	

											else

												NewDistribTaxAmount	= ((LocalTaxAmtToSpread + LocalStartingTaxSum) - LocalRunningTaxSum)




											NewDistributionAmount 	= (LocalExpenseAmtToSpread - LocalRunningDistSum) 


										else
											NewDistributionAmount 	= ((InvoiceAmount.CurrencyAmount - ((LocalTaxAmtToSpread / 100%) * each.DistributionPercent)) - LocalRunningDistSum) 
											NewDistribTaxableAmount = NewDistributionAmount


											NewDistribTaxAmount		= ((LocalTaxAmtToSpread - LocalRunningTaxSum) + LocalStartingTaxSum)


								else	
									if (LocalTaxTableInvoicedAmount entered)	
										NewDistributionAmount = (InvoiceAmount.CurrencyAmount - LocalRunningDistSum)	

									else																				
										if (PrmTaxMethod.Accrued)
											NewDistributionAmount = (InvoiceAmount.CurrencyAmount - LocalRunningDistSum)	

											if (LocalTaxableAmtToSpread entered)
												NewDistribTaxableAmount	= (LocalTaxableAmtToSpread - LocalRunningTaxableSum)

										else	
											if (TransientLineTax)	
												NewDistributionAmount = (InvoiceAmount.CurrencyAmount - LocalRunningDistSum)	



											else 	

												NewDistributionAmount = (InvoiceAmount.CurrencyAmount - LocalRunningDistSum)	

											if (TaxAmount 		not entered
											and LocalTaxAmtToSpread 	not entered
											and CalculateTax.OutputTotalTaxAmount entered)
												NewDistribTaxAmount		= CalculateTax.OutputTotalTaxAmount

								if (PrmUnitsAmount entered)								
									NewUnitsAmount	= (TransientUnitsAmount - SumUnitsAmount)	
									SumUnitsAmount += NewUnitsAmount							
							else

								initialize NewDistributionAmount	
					else	

						TransientBypassErrorUpdate = true	
						if (each.DistributionAmount entered)
							NewDistributionAmount = each.DistributionAmount
							NewDistribTaxableAmount	= NewDistributionAmount
						else
							if (each.DistributionPercent entered)


								if (IsLinkedDistCodeTax)	



									NewDistribTaxableAmount	= ((LocalTaxableAmtToSpread / 100%) * each.DistributionPercent)
									NewDistributionAmount 	= ((LocalExpenseAmtToSpread / 100%) * each.DistributionPercent)






								else	
								if (TaxCode entered
								and LocalTaxTableInvoicedAmount not entered		
								and LocalTaxAmtToSpread entered
								and TransientLineTax)
									TransientBypassTaxAmountEdit = true		



									if (PrmTaxMethod.Accrued)	
										NewDistributionAmount = ((LocalExpenseAmtToSpread / 100%) * each.DistributionPercent)			



										if (LocalTaxableAmtToSpread entered)
											NewDistribTaxableAmount	= ((LocalTaxableAmtToSpread / 100%) * each.DistributionPercent)

										else
											NewDistribTaxableAmount = NewDistributionAmount


									else	





										NewDistribTaxableAmount	= ((LocalTaxableAmtToSpread / 100%) * each.DistributionPercent)				

										LocalCalcedTaxAmt		= (NewDistribTaxableAmount * CalculateTax.OutputTaxRate)					

										LocalTaxAmtAdjustment	= ((LocalTaxAmtToSpread * each.DistributionPercent) - LocalCalcedTaxAmt)	

										NewDistribTaxAmount	= (LocalCalcedTaxAmt + LocalTaxAmtAdjustment)									



										if  (LocalTaxableAmtToSpread entered
										and  CalculateTax.OutputTaxRate entered)	


											NewDistributionAmount = ((LocalExpenseAmtToSpread / 100%) * each.DistributionPercent)		








										else


											NewDistributionAmount 	= ((LocalExpenseAmtToSpread / 100%) * each.DistributionPercent)		







								else	

									if (LocalTaxTableInvoicedAmount entered)													
										NewDistributionAmount = (((LocalExpenseAmtToSpread - LocalTaxTableInvoicedAmount) / 100%) * each.DistributionPercent)			

									else																							

										NewDistributionAmount = ((LocalExpenseAmtToSpread / 100%) * each.DistributionPercent)	

										if (LocalTaxableAmtToSpread entered)
											NewDistribTaxableAmount	= ((LocalTaxableAmtToSpread / 100%) * each.DistributionPercent)

								if (PrmUnitsAmount entered)													
									NewUnitsAmount	= ((TransientUnitsAmount / 100%) * each.DistributionPercent)	
									SumUnitsAmount += NewUnitsAmount												

					LocalCurrencyAmount 	= NewDistributionAmount		
					NewDistributionAmount	= RoundedCurrencyAmount		




					LocalRunningDistSum 	+= NewDistributionAmount
					LocalRunningTaxSum  	+= NewDistribTaxAmount
					LocalRunningTaxableSum  += NewDistribTaxableAmount


					round LocalRunningDistSum to nearest DerivedRoundTo			
					round LocalRunningTaxableSum to nearest DerivedRoundTo		
					round LocalRunningTaxSum to nearest DerivedRoundTo			


					LocalPostToAccount		= each.DistributionAccount
					if (each.DistributionAccount.ToAccountingEntity not entered
					and TransientDistCodeAccount.ToAccountingEntity entered)
						LocalPostToAccount.ToAccountingEntity	= TransientDistCodeAccount.ToAccountingEntity

					if (each.DistributionAccount.AccountingUnit not entered
					and TransientDistCodeAccount.AccountingUnit entered)
						LocalPostToAccount.AccountingUnit	= TransientDistCodeAccount.AccountingUnit

					if (each.DistributionAccount.GeneralLedgerChartAccount not entered
					and TransientDistCodeAccount.GeneralLedgerChartAccount entered)
						LocalPostToAccount.GeneralLedgerChartAccount	= TransientDistCodeAccount.GeneralLedgerChartAccount

					if (each.DistributionAccount.Project not entered				
					and TransientDistCodeAccount.Project entered)
						LocalPostToAccount.Project	= TransientDistCodeAccount.Project

					if (each.DistributionAccount.FinanceDimension1 not entered		
					and TransientDistCodeAccount.FinanceDimension1 entered)
						LocalPostToAccount.FinanceDimension1	= TransientDistCodeAccount.FinanceDimension1

					if (each.DistributionAccount.FinanceDimension2 not entered		
					and TransientDistCodeAccount.FinanceDimension2 entered)
						LocalPostToAccount.FinanceDimension2	= TransientDistCodeAccount.FinanceDimension2

					if (each.DistributionAccount.FinanceDimension3 not entered		
					and TransientDistCodeAccount.FinanceDimension3 entered)
						LocalPostToAccount.FinanceDimension3	= TransientDistCodeAccount.FinanceDimension3

					if (each.DistributionAccount.FinanceDimension4 not entered		
					and TransientDistCodeAccount.FinanceDimension4 entered)
						LocalPostToAccount.FinanceDimension4	= TransientDistCodeAccount.FinanceDimension4

					if (each.DistributionAccount.FinanceDimension5 not entered		
					and TransientDistCodeAccount.FinanceDimension5 entered)
						LocalPostToAccount.FinanceDimension5	= TransientDistCodeAccount.FinanceDimension5

					if (each.DistributionAccount.FinanceDimension6 not entered		
					and TransientDistCodeAccount.FinanceDimension6 entered)
						LocalPostToAccount.FinanceDimension6	= TransientDistCodeAccount.FinanceDimension6

					if (each.DistributionAccount.FinanceDimension7 not entered		
					and TransientDistCodeAccount.FinanceDimension7 entered)
						LocalPostToAccount.FinanceDimension7	= TransientDistCodeAccount.FinanceDimension7

					if (each.DistributionAccount.FinanceDimension8 not entered		
					and TransientDistCodeAccount.FinanceDimension8 entered)
						LocalPostToAccount.FinanceDimension8	= TransientDistCodeAccount.FinanceDimension8

					if (each.DistributionAccount.FinanceDimension9 not entered		
					and TransientDistCodeAccount.FinanceDimension9 entered)
						LocalPostToAccount.FinanceDimension9	= TransientDistCodeAccount.FinanceDimension9

					if (each.DistributionAccount.FinanceDimension10 not entered		
					and TransientDistCodeAccount.FinanceDimension10 entered)
						LocalPostToAccount.FinanceDimension10	= TransientDistCodeAccount.FinanceDimension10

					invoke Create PayablesInvoiceDistribution
						assign result to NewPayablesInvoiceDistribution
						invoked.Company					= Company
						invoked.Vendor					= Vendor
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.DistributionType 		= "D"
						invoked.DistributionCode		= DistributionCode
						invoked.DistributionDate		= DistributionDate
						invoked.PostingOption			= Vendor.VendorClass.PostingOption
						invoked.InvoiceCurrency			= InvoiceCurrency
						invoked.GLTCurrencyCode			= InvoiceCurrency
						invoked.DistributionAccount		= LocalPostToAccount
						invoked.GLFinanceCodeBlock		= LocalPostToAccount
						if (NewUnitsAmount entered)							
							invoked.UnitAmount			= NewUnitsAmount	
						else
							invoked.UnitAmount			= each.UnitAmount
						invoked.GLTransactionAmount 	= NewDistributionAmount
						invoked.GLTSystem				= "AP"
						invoked.TransactionDate			= DistributionDate
						invoked.TransientBypassErrorUpdate	= TransientBypassErrorUpdate
						if (each.Description entered)
							invoked.Description			= each.Description
						invoked.DistributionReference	= each.DistributionReference
						if (each.AssetTemplate entered)
							invoked.AssetFlag			= "A"
						else
						if (each.Asset entered)
							invoked.AssetFlag			= "R"
						invoked.TransientAsset			= each.Asset
						invoked.TransientAssetTemplate	= each.AssetTemplate
						invoked.TransientTagNumber		= each.TagNumber
						invoked.TransientInServiceDate	= DistributionDate
						invoked.TransientPurchaseDate	= InvoiceDate
						invoked.TransientModelNumber	= each.ModelNumber
						invoked.TransientSerialNumber	= each.SerialNumber
						invoked.TransientHoldAsset		= each.HoldAsset
						invoked.TransientAssetGroup		= each.AssetGroup
						invoked.TransientCombine		= each.Combine
						invoked.TransientItemQuantity	= each.ItemQuantity
						invoked.TransientAccountingUnitGroup	= each.AssetAccountingUnitGroup
						invoked.TransientAssetDescription		= each.AssetDescription

						if (LocalTaxAmount entered)
							if (LocalIsLast)
								invoked.TransientDistCodeTaxAmt	= (LocalTaxAmtToSpread - LocalRunningTaxSum)	

							else
								invoked.TransientDistCodeTaxAmt = NewDistribTaxAmount


						if (TransientLineTax)					
							invoked.TaxIndicator		= 2		
							invoked.TaxCode				= TaxCode
							invoked.TaxableAmount		= NewDistribTaxableAmount

						if (!DoDetailTaxProcessing)						
							invoked.LandedTaxAmount		= NewDistribTaxAmount		

						if (each.PayablesDistributionCodeDetail = LastPayablesDistributionCodeDetail)		
							invoked.DetailTaxDistributionCodeFooter.TaxAmount		= NewDistribTaxAmount	
							invoked.DetailTaxDistributionCodeFooter.DistribSum		= LocalRunningDistSum	

						invoked.ProductTaxCategory	 	= PayablesInvoice.TransientTaxCategory	
						invoked.GLTJournalizeGroup		= GLTJournalizeGroup

						TransientDetailTaxProcessing.DistribSum	+= NewDistributionAmount					







					if (LocalIsLast)






						if  ((!DoTaxAfter
						and  (InvoiceAmount.CurrencyAmount != TotalDistributionAmount.TransactionTotal))									
						or  (DoTaxAfter
						and  InvoiceAmount.CurrencyAmount != (TotalDistributionAmount.TransactionTotal - PayablesInvoiceTaxRel.EnteredTaxAmount)))

							if (InvoiceAmount.CurrencyAmount = (TotalDistributionAmount.TransactionTotal + LocalStartingDistSum))	
								TotalDistributionAmount.TransactionTotal += LocalStartingDistSum									

							else


								if (InvoiceAmount.CurrencyAmount = ((TotalDistributionAmount.TransactionTotal - LocalStartingTaxSum) + LocalStartingDistSum))
									TotalDistributionAmount.TransactionTotal = ((TotalDistributionAmount.TransactionTotal - LocalStartingTaxSum) + LocalStartingDistSum)

								else
									initialize TotalDistributionAmount.TransactionTotal
									for each PayablesInvoiceDistributionRel

										if  (each.IsDistributionType
										and !each.IsAccruedTaxDistribution
										and !each.IsAccruedVATTax)
											TotalDistributionAmount.TransactionTotal += each.DistributionAmount.CurrencyAmount






					initialize NewUnitsAmount		
















































		ProcessDistributionCode is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				PrmTaxTableInvoicedAmount			is a CurrencyAmount
				PrmTaxMethod						is a TaxMethod
				PrmDistributionCode					is a PayablesDistributionCode
				PrmTaxAmount						is a CurrencyAmount
				PrmTaxableAmount					is an InternationalAmount
				PrmLinkedTax						is Boolean
				PrmUnitsAmount						is an InternationalAmount	
				PrmDistCodeAccount					is a FinanceCodeBlock		

			Local Fields
				LocalStartingDistSum				is an InternalAmount	
				LocalStartingTaxableSum				is an InternalAmount	
				LocalStartingTaxSum					is an InternalAmount	
				LocalRunningDistSum					is an InternalAmount	
				LocalRunningTaxableSum				is an InternalAmount	
				LocalRunningTaxSum					is a CurrencyAmount	
				LocalExpenseAmtToSpread				is an InternalAmount	
				LocalTaxableAmtToSpread				is an InternalAmount	
				LocalTaxAmtToSpread					is an InternalAmount	
				LocalIsLast							is Boolean				
				LocalCalcedTaxAmt					is an InternalAmount	
				LocalTaxAmtAdjustment				is an InternalAmount	

			Action Rules





				initialize NewUnitsAmount			
				initialize SumUnitsAmount			
				initialize LocalStartingDistSum 	
				initialize LocalStartingTaxableSum	
				initialize LocalStartingTaxSum		
				initialize LocalRunningDistSum		
				initialize LocalRunningTaxableSum	
				initialize LocalRunningTaxSum		

				if (PrmDistCodeAccount entered								
				and TransientDistCodeAccount not entered)					
					TransientDistCodeAccount		= PrmDistCodeAccount	
				TransientLineTax					= PrmLinkedTax
				LocalDistributionCode				= PrmDistributionCode
				LastPayablesDistributionCodeDetail 	= last DistributionCodeDetailRel.PayablesDistributionCodeDetail




				for each PayablesInvoiceDistributionRel		
					if  (each.IsDistributionType
					and !each.IsAccruedTaxDistribution
					and !each.IsAccruedVATTax)
						if (!each.IsTaxDistribution)
							LocalStartingDistSum 		+= each.DistributionAmount.CurrencyAmount
							if (each.TaxIndicator.Taxable)
								LocalStartingTaxableSum += each.TaxableAmount
						if  (each.IsTaxDistribution)			
							LocalStartingTaxSum  		+= each.DistributionAmount.CurrencyAmount









				LocalRunningTaxSum		= LocalStartingTaxSum
				LocalRunningDistSum 	= LocalStartingDistSum
				LocalRunningTaxableSum	= LocalStartingTaxableSum













				if (DoShortPayProcess
				or  PrmTaxMethod.Accrued)	
					LocalExpenseAmtToSpread	= (InvoiceAmount.CurrencyAmount - LocalRunningDistSum)	
				else
				if (TransientSetRNIPTaxError)	
					LocalExpenseAmtToSpread = ((InvoiceAmount.CurrencyAmount - TaxAmount) - LocalRunningDistSum)	
				else
					LocalExpenseAmtToSpread	= ((InvoiceAmount.CurrencyAmount - PrmTaxAmount) - LocalRunningDistSum)
				if (PrmTaxableAmount entered
				and PrmTaxableAmount >= LocalRunningTaxableSum)
					LocalTaxableAmtToSpread	= PrmTaxableAmount - LocalRunningTaxableSum
				if (InvoiceType.CreditMemo)
					if (PrmTaxAmount entered					
					and PrmTaxAmount <= LocalRunningTaxSum)		
						LocalTaxAmtToSpread		= PrmTaxAmount - LocalRunningTaxSum

				else
					if (PrmTaxAmount entered					
					and PrmTaxAmount >= LocalRunningTaxSum)		
						LocalTaxAmtToSpread		= PrmTaxAmount - LocalRunningTaxSum












				for each DistributionCodeDetailRel

					initialize NewDistributionAmount
					initialize NewDistribTaxableAmount
					initialize NewDistribTaxAmount	
					TransientBypassErrorUpdate = true	
					if (each.PayablesDistributionCodeDetail = LastPayablesDistributionCodeDetail)
						LocalIsLast = true		
						TransientBypassErrorUpdate = false	
















					if (each.DistributionAmount entered)
						NewDistributionAmount = each.DistributionAmount
						NewDistribTaxableAmount	= NewDistributionAmount
					else
						if (each.DistributionPercent entered)




							NewDistributionAmount = ((LocalExpenseAmtToSpread / 100%) * each.DistributionPercent)



							if (each.TaxCode entered	
							or (TaxCode entered
							and TransientLineTax))
								TransientBypassTaxAmountEdit = true

								if (LocalTaxableAmtToSpread entered)
									NewDistribTaxableAmount	= ((LocalTaxableAmtToSpread / 100%) * each.DistributionPercent)

								else
									NewDistribTaxableAmount = NewDistributionAmount



								if (TaxEntityUsesInforTax)		
									if (PrmTaxMethod.Invoiced
									or  each.TaxCode.DerivedTaxMethodInvOrAcc.Invoiced)	
										if (CalculateTax.OutputTaxRate entered)

											LocalCalcedTaxAmt		= (NewDistribTaxableAmount * CalculateTax.OutputTaxRate)					
										else

											LocalEffectiveDate	= DerivedEffectiveDate			
											if (LocalEffectiveDate not entered)					
												if (each.TaxCode.DerivedTaxPoint = "I")
													LocalEffectiveDate = InvoiceDate
												else
												if (each.TaxCode.DerivedTaxPoint = "P")
													LocalEffectiveDate = DueDate
												else
												if (each.TaxCode.DerivedTaxPoint = "G")
													LocalEffectiveDate = DistributionDate
												else
													LocalEffectiveDate = current date
					
											LocalTaxCode 		= each.TaxCode					


											LocalCalcedTaxAmt		= (NewDistribTaxableAmount * LocalTaxRateRel.Rate)		

										if (TaxCode entered
										and TransientLineTax)
											LocalTaxAmtAdjustment	= ((LocalTaxAmtToSpread * each.DistributionPercent) - LocalCalcedTaxAmt)	

											NewDistribTaxAmount		= (LocalCalcedTaxAmt + LocalTaxAmtAdjustment)									

										else	
											NewDistribTaxAmount		= LocalCalcedTaxAmt		


							if (PrmUnitsAmount entered)													
								NewUnitsAmount	= ((TransientUnitsAmount / 100%) * each.DistributionPercent)	
								SumUnitsAmount += NewUnitsAmount												




















							if (LocalIsLast)	



								if (NewDistribTaxAmount + LocalRunningTaxSum != LocalTaxAmtToSpread
								and TaxEntityUsesInforTax												
								and PrmTaxMethod.Invoiced)												
									NewDistribTaxAmount = LocalTaxAmtToSpread - LocalRunningTaxSum








								LocalCurrencyAmount 	= LocalExpenseAmtToSpread - (NewDistributionAmount + LocalRunningDistSum)	

								LocalInternalSum		= RoundedCurrencyAmount														


								if (!IsCreditInvoice)		
									NewDistributionAmount	+= LocalInternalSum

								else
									NewDistributionAmount	-= LocalInternalSum		


								LocalCurrencyAmount			= NewDistributionAmount

								NewDistributionAmount		= RoundedCurrencyAmount							






								LocalCurrencyAmount	= LocalRunningDistSum + NewDistributionAmount

								LocalInternalFull	= RoundedCurrencyAmount


								if (LocalInternalFull != LocalExpenseAmtToSpread)
									LocalInternalFull -= LocalExpenseAmtToSpread

									NewDistributionAmount -= LocalInternalFull



								if (IsCreditInvoice)		

									if (LocalTaxableAmtToSpread entered 		
									and NewDistribTaxableAmount - LocalRunningTaxableSum != LocalTaxableAmtToSpread)
										NewDistribTaxableAmount = LocalTaxableAmtToSpread + LocalRunningTaxableSum

									if (NewDistribTaxableAmount < NewDistributionAmount)
										NewDistribTaxableAmount	= NewDistributionAmount


								else

									if (NewDistribTaxableAmount + LocalRunningTaxableSum != LocalTaxableAmtToSpread)
										NewDistribTaxableAmount = LocalTaxableAmtToSpread - LocalRunningTaxableSum









							LocalRunningDistSum 	+= NewDistributionAmount
							LocalRunningTaxSum  	+= NewDistribTaxAmount
							LocalRunningTaxableSum  += NewDistribTaxableAmount
							round LocalRunningDistSum to nearest DerivedRoundTo			
							round LocalRunningTaxableSum to nearest DerivedRoundTo		
							round LocalRunningTaxSum to nearest DerivedRoundTo			







					LocalPostToAccount		= each.DistributionAccount
					if (each.DistributionAccount.ToAccountingEntity not entered
					and TransientDistCodeAccount.ToAccountingEntity entered)
						LocalPostToAccount.ToAccountingEntity	= TransientDistCodeAccount.ToAccountingEntity

					if (each.DistributionAccount.AccountingUnit not entered
					and TransientDistCodeAccount.AccountingUnit entered)
						LocalPostToAccount.AccountingUnit	= TransientDistCodeAccount.AccountingUnit

					if (each.DistributionAccount.GeneralLedgerChartAccount not entered
					and TransientDistCodeAccount.GeneralLedgerChartAccount entered)
						LocalPostToAccount.GeneralLedgerChartAccount	= TransientDistCodeAccount.GeneralLedgerChartAccount

					if (each.DistributionAccount.Project not entered				
					and TransientDistCodeAccount.Project entered)
						LocalPostToAccount.Project	= TransientDistCodeAccount.Project

					if (each.DistributionAccount.FinanceDimension1 not entered		
					and TransientDistCodeAccount.FinanceDimension1 entered)
						LocalPostToAccount.FinanceDimension1	= TransientDistCodeAccount.FinanceDimension1

					if (each.DistributionAccount.FinanceDimension2 not entered		
					and TransientDistCodeAccount.FinanceDimension2 entered)
						LocalPostToAccount.FinanceDimension2	= TransientDistCodeAccount.FinanceDimension2

					if (each.DistributionAccount.FinanceDimension3 not entered		
					and TransientDistCodeAccount.FinanceDimension3 entered)
						LocalPostToAccount.FinanceDimension3	= TransientDistCodeAccount.FinanceDimension3

					if (each.DistributionAccount.FinanceDimension4 not entered		
					and TransientDistCodeAccount.FinanceDimension4 entered)
						LocalPostToAccount.FinanceDimension4	= TransientDistCodeAccount.FinanceDimension4

					if (each.DistributionAccount.FinanceDimension5 not entered		
					and TransientDistCodeAccount.FinanceDimension5 entered)
						LocalPostToAccount.FinanceDimension5	= TransientDistCodeAccount.FinanceDimension5

					if (each.DistributionAccount.FinanceDimension6 not entered		
					and TransientDistCodeAccount.FinanceDimension6 entered)
						LocalPostToAccount.FinanceDimension6	= TransientDistCodeAccount.FinanceDimension6

					if (each.DistributionAccount.FinanceDimension7 not entered		
					and TransientDistCodeAccount.FinanceDimension7 entered)
						LocalPostToAccount.FinanceDimension7	= TransientDistCodeAccount.FinanceDimension7

					if (each.DistributionAccount.FinanceDimension8 not entered		
					and TransientDistCodeAccount.FinanceDimension8 entered)
						LocalPostToAccount.FinanceDimension8	= TransientDistCodeAccount.FinanceDimension8

					if (each.DistributionAccount.FinanceDimension9 not entered		
					and TransientDistCodeAccount.FinanceDimension9 entered)
						LocalPostToAccount.FinanceDimension9	= TransientDistCodeAccount.FinanceDimension9

					if (each.DistributionAccount.FinanceDimension10 not entered		
					and TransientDistCodeAccount.FinanceDimension10 entered)
						LocalPostToAccount.FinanceDimension10	= TransientDistCodeAccount.FinanceDimension10


					invoke Create PayablesInvoiceDistribution
						assign result to NewPayablesInvoiceDistribution
						invoked.Company					= Company
						invoked.Vendor					= Vendor
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.DistributionType 		= "D"
						invoked.DistributionCode		= DistributionCode
						invoked.DistributionDate		= DistributionDate
						invoked.PostingOption			= Vendor.VendorClass.PostingOption
						invoked.InvoiceCurrency			= InvoiceCurrency
						invoked.GLTCurrencyCode			= InvoiceCurrency
						invoked.DistributionAccount		= LocalPostToAccount
						invoked.GLFinanceCodeBlock		= LocalPostToAccount
						if (NewUnitsAmount entered)							
							invoked.UnitAmount			= NewUnitsAmount	
						else
							invoked.UnitAmount			= each.UnitAmount
						invoked.GLTransactionAmount 	= NewDistributionAmount
						invoked.GLTSystem				= "AP"
						invoked.TransactionDate			= DistributionDate
						invoked.TransientBypassErrorUpdate	= TransientBypassErrorUpdate
						invoked.ICNCode					= each.ICNCode		
						if (each.Description entered)
							invoked.Description			= each.Description
						invoked.DistributionReference	= each.DistributionReference
						if (each.AssetTemplate entered)
							invoked.AssetFlag			= "A"
						else
						if (each.Asset entered)
							invoked.AssetFlag			= "R"
						invoked.TransientAsset			= each.Asset
						invoked.TransientAssetTemplate	= each.AssetTemplate
						invoked.TransientTagNumber		= each.TagNumber
						invoked.TransientInServiceDate	= DistributionDate
						invoked.TransientPurchaseDate	= InvoiceDate
						invoked.TransientModelNumber	= each.ModelNumber
						invoked.TransientSerialNumber	= each.SerialNumber
						invoked.TransientHoldAsset		= each.HoldAsset
						invoked.TransientAssetGroup		= each.AssetGroup
						invoked.TransientCombine		= each.Combine
						invoked.TransientItemQuantity	= each.ItemQuantity
						invoked.TransientAccountingUnitGroup	= each.AssetAccountingUnitGroup
						invoked.TransientAssetDescription		= each.AssetDescription

						if (NewDistribTaxAmount entered)	
							invoked.TransientDistCodeTaxAmt = NewDistribTaxAmount


						if (each.TaxCode entered)									
							invoked.TaxIndicator		= 2		
							invoked.TaxCode				= each.TaxCode				
							invoked.TaxableAmount		= NewDistribTaxableAmount	
							TransientLineTax			= true						
						else
							LocalDistributionCode		= DistributionCode	
							if (TaxCode entered
							and PrmLinkedTax				
							and !DistributionCodeHasTax)	
								invoked.TaxIndicator		= 2		
								invoked.TaxCode				= TaxCode					
								invoked.TaxableAmount		= NewDistribTaxableAmount	
								TransientLineTax			= true						
						

						if (!DoDetailTaxProcessing)						
							invoked.LandedTaxAmount		= NewDistribTaxAmount		

						if (each.PayablesDistributionCodeDetail = LastPayablesDistributionCodeDetail)		
							invoked.DetailTaxDistributionCodeFooter.TaxAmount		= NewDistribTaxAmount	
							invoked.DetailTaxDistributionCodeFooter.DistribSum		= LocalRunningDistSum	

						if (Company.DelayTaxProcessing)					
							invoked.BypassTaxCodeProcessing = true		
						invoked.ProductTaxCategory	 	= PayablesInvoice.TransientTaxCategory	
						invoked.GLTJournalizeGroup		= GLTJournalizeGroup

						TransientDetailTaxProcessing.DistribSum	+= NewDistributionAmount					



























































					initialize NewUnitsAmount		























































		ProcessOneSource is an Instance Action		
			default label is untranslatable
			restricted
			Action Rules




				LocalPTXTaxAmount = TaxAmount
				if (Status.Unreleased)

					for each PayablesInvoiceDistributionRel


						if (each.IsTaxDistribution)
							invoke Delete each

				invoke FastUpdate
					if (BackgroundProcessing not entered)
						invoked.BackgroundProcessing = BackgroundProcessing.TaxProcessing
					if (Status.Unreleased)
						invoked.TaxAmount = LocalPTXTaxAmount



				initialize TaxArray
				initialize SumOfCalculatedTaxAmount
				initialize SumOfLineTaxableAmount
				initialize LocalCounter
				initialize CommitCounter			


				include SavePTXTaxValues

				invoke UpdatePIT
					invoked.Function	= 1	


				include SetTaxableAmount









				if  (!MatchProcessType.Expense)

					for each PayablesInvoiceDistributionRel
						increment LocalCounter
						increment CommitCounter			

						include PerformOneSourceCalcTaxCall

						invoke RemoveTaxLineItem each











					if (!MatchProcessType.Expense
					and  OneSourcePayAsBilled = "Y") 
						LocalTaxDifference  = SumOfCalculatedTaxAmount - TaxAmount

						if (LocalTaxDifference < 1 and LocalTaxDifference > -1)

							TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount -= LocalTaxDifference

				else

					for each PayablesInvoiceDistributionRel
						if (each.ICNCode entered
						and each.TaxCode entered		
						and each.TaxIndicator.Taxable)	
							increment LocalCounter
							increment CommitCounter			

							include PerformOneSourceCalcTaxCall

							invoke RemoveTaxLineItem each

					if (CalculateTax.LocalExcludeFromSabrixCall)
						LocalTaxDifference  = SumOfCalculatedTaxAmount - TaxAmount
						if (LocalTaxDifference < 1 and LocalTaxDifference > -1)
							TaxArray.TaxArrayOutput[LocalCounter].ReturnedTaxAmount -= LocalTaxDifference

				include DisplayTaxArray




				if  (UsePayablesTaxTolerance)

					PayablesTaxTolerance.InvoiceTaxAmount			= TaxAmount
					PayablesTaxTolerance.CalculatedTaxAmount		= SumOfCalculatedTaxAmount
					if (IsUseTaxCodeAccounts)
						PayablesTaxTolerance.OverchargeLimitAmount	= EntityTaxCodeRel.TaxToleranceAmount

					else
						PayablesTaxTolerance.OverchargeLimitAmount	= TaxEntityRel.TaxToleranceAmount

					PayablesTaxTolerance.AllowZeroTaxOverride		= true	


					LocalPayablesTaxTolerance = PayablesTaxTolerance.VerifyTaxWithinTolerance	


















				if  (!MatchProcessType.Expense)






					if  (OneSourcePayAsBilled entered
					or  (!OneSourceDirectPay entered and PayablesTaxTolerance.InTolerance)
					or  (SumOfCalculatedTaxAmount not entered
					and  LocalPTXTaxAmount not entered))
						include PayAsBilledProcess
					else
						include NewShortPayProcess
				else
				if ((UsePayablesTaxTolerance
				and (!PayablesTaxTolerance.InTolerance
				or   PayablesTaxTolerance.ZeroTaxOverride))
				or  (SumOfCalculatedTaxAmount not entered	
				and  LocalPTXTaxAmount entered))			


					include NewShortPayProcess
				else

					include PayAsBilledProcess


				include UpdateErrorRecords


				if (MatchProcessType.Expense)	
					initialize BackgroundProcessing







		ProcessVertex is an Instance Action		
			valid when (DisplayProcessVertex)			
			Action Rules




				LocalPTXTaxAmount = TaxAmount
				if (TaxAmount entered)			
					LocalPTXTaxMethod = "I"		
				else							
					LocalPTXTaxMethod = "A"		

				if (Status.Unreleased)
					invoke Delete TaxLineItemRel

					for each PayablesInvoiceDistributionRel

						if (each.IsTaxDistribution)
							invoke Delete each
						else

							invoke Update each.PayablesInvoiceTaxRel		
								initialize invoked.TaxDetails.ReturnedTaxAmount	
								initialize invoked.TaxDetails.ReturnedTaxRate	
					invoke Update PayablesInvoiceTaxRel
						initialize invoked.TaxDetails.ReturnedTaxAmount		
						initialize invoked.TaxDetails.ReturnedTaxRate		
					initialize TotalTaxAmount		



				BackgroundProcessing = BackgroundProcessing.TaxProcessing

				if (Status.Unreleased)
					if (LocalPTXTaxMethod.Invoiced)		
						TaxAmount = LocalPTXTaxAmount	
					else								
						initialize TaxAmount			







				initialize SumOfCalculatedTaxAmount
				initialize SumOfLineTaxableAmount
				initialize CommitCounter			
				LocalCounter	= 1

				include SavePTXTaxValues

				if (PayablesInvoiceTaxRel not exists)		
					invoke UpdatePIT
						invoked.Function	= 1	
				else
					invoke UpdatePIT										
						invoked.Function			= 2		
						invoked.PrmEntInvoiceAmt	= InvoiceAmount.CurrencyAmount
						invoked.PrmEntTaxAmt		= LocalPTXTaxAmount
						invoked.PrmEntTaxableAmt	= LocalPTXTaxableAmount


				include SetTaxableAmount









				if  (!MatchProcessType.Expense)

					for each PayablesInvoiceDistributionRel


						include PerformVertexCalcTaxCall

						invoke RemoveTaxLineItem each
				else
					if (CallVertexByDocument)		
						invoke FastUpdate															
							invoked.BackgroundProcessing = BackgroundProcessing.TaxPreProcessing	

						invoke ProcessOneSourceForExpenseInvoice in background 	
							invoked.PrmCompany			= Company									
							invoked.PrmVendor			= Vendor
							invoked.PrmPayablesInvoice	= PayablesInvoice							
					else

						for each PayablesInvoiceDistributionRel


							if (each.TaxIndicator.Taxable)	


								include PerformVertexCalcTaxCall

								invoke RemoveTaxLineItem each

						include DisplayTaxArray




						if  (UsePayablesTaxTolerance)

							LocalPTXTaxAmount	= TaxAmount
							include PopulateVerifyTaxToleranceValues

							LocalPayablesTaxTolerance = PayablesTaxTolerance.VerifyTaxWithinTolerance	







						if ((UsePayablesTaxTolerance
						and (!PayablesTaxTolerance.InTolerance
						or   PayablesTaxTolerance.ZeroTaxOverride))
						or  (SumOfCalculatedTaxAmount not entered	
						and  LocalPTXTaxAmount entered))			

							if (Company.AllowToleranceOverride)		

								if (CalculateTax.TaxAmount entered)
									confirmation required
										"TaxChargedByVendor<TaxAmount>IsOutOfToleranceWithTheTaxSystemTaxAmount<CalculateTax.TaxAmount>;AcceptTheVendorChargedAmount?"
								else
									confirmation required	
										"TaxChargedByVendor<TaxAmount>IsOutOfToleranceWithTheTaxEngineTaxAmount<SumOfCalculatedTaxAmount>;AcceptTheVendorChargedAmount?"

								TransientAcceptTaxOverride = true		


								include VertexPayAsBilledProcess							

							else
								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>"

						else

							include VertexPayAsBilledProcess
						include UpdateErrorRecords

						if (LocalPTXTaxMethod.Invoiced		
						and LocalPTXTaxAmount entered)		
							TaxAmount = LocalPTXTaxAmount	
							invoke Update PayablesInvoiceTaxRel								
								invoked.TotalInvoicedTaxAmount	= TaxAmount					
						else																
							invoke Update PayablesInvoiceTaxRel								
								invoked.TotalAccruedTaxAmount	= SumOfCalculatedTaxAmount	
						

						initialize BackgroundProcessing



		ProcessVertexForMatch is an Instance Action		
			default label is "ProcessVertex"
			valid when (DisplayProcessVertexForMatch)		
			Parameters
				ContinueWithMatch is Boolean
					default label is "ContinueWithMatch?"
			Action Rules
				BackgroundProcessing = BackgroundProcessing.TaxProcessing
				invoke ProcessVertexSet PayablesInvoiceDetail	
					invoked.PrmCompany = Company 
					invoked.PrmPayablesInvoice = PayablesInvoice
					if (ContinueWithMatch)
						invoked.PrmMatchFrom = 3 

		ReleaseOnlyMatchInvoice is an Instance Action
			default label is "ReleaseForPosting"
			valid when (AllowReleaseOnlyMatchInvoice)
			Entrance Rules
				constraint (AllowReleaseOnlyMatchInvoice)
					"ActionIsNotValid"

				constraint (PayablesInvoiceDistributionRel exists)
					"CannotReleaseForPosting;NoDistributionsExist"

				constraint (InventoriedItemRel not exists)
					"CannotReleaseForPostingIfInvoiceHasInventoriedItems"

				DoConstraints = true
				include ValidateMatchInvoiceBalanceEdits

				constraint (!PayablesInvoice.MatchStatus.POCostMessagesExist)
					"CannotReleaseForPosting;CostMessagesExist"

				constraint (PayablesInvoice.MatchStatus.Unmatched)
					"CannotReleaseForPosting;InvoiceHasAlreadyBeenMatched"

				constraint (PayablesInvoice.Status.Unreleased)
					"CannotReleaseForPosting;InvoiceNotInUnreleased,ReleasedOrApprovedStatus"

				constraint (!PayablesInvoice.MatchProcessType.Expense)
					"CannotPerformReleaseForPostingOnExpenseInvoice"

				constraint (PayablesInvoice.MatchProcessType entered)
					"MatchProcessTypeMustBeEnteredToPerformReleaseForPosting"

				if (BankTransactionCode.PaymentOutputOption.ElectronicFile
				or	BankTransactionCode.PaymentOutputOption.Swift
				or	BankTransactionCode.PaymentOutputOption.WireTransfer)	
					constraint ((PayVendor.BankEntity 			entered
					and			 PayVendor.BankAccountNumber 	entered)
					or			(RemitToCode.BankEntity			entered		
					and   		 RemitToCode.BankAccountNumber	entered))
						"BankEntityAndBankAccountNumberRequiredOnPayVendor<PayVendor>ForInvoicesSetUpForElectronicPayment"
					if (PayVendor.BankEntity 		entered)
						constraint (PayVendor.BankAccountType 		entered) 	
							"BankAccountTypeRequiredOnVendor<PayVendor>ForElectronicPayment"
					else
					if (RemitToCode.BankEntity 		entered)
						constraint (RemitToCode.BankAccountType 	entered) 	
							"BankAccountTypeRequiredOnRemitLocation<RemitToCode>ForElectronicPayment"
				if  (BankTransactionCode.BankTransactionType.CashPayment
				and !BankTransactionCode.PaymentOutputOption.NoOutput)
					include CashPaymentFormatEdits	

				if (CashCode.EditAvailableFunds
				or  CashCode.RestrictedFunds)
					include PerformFundAmountEdit
					constraint (ExceedesCashCodeFundBalanceRel !exists)
						"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"

#ifdef module cam
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
					include PerformCustodialAccountEdit
					constraint (ExceedsCustodialAccountBalanceRel !exists)
						"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif

			Action Rules
				invoke UpdateAfterMatch PayablesInvoice


		UpdateAfterMatch is an Update Action

			default label is untranslatable
			restricted
			bypass field rules
			Action Rules
			   	initialize MatchErrorType

				if  (IsChargebackSubType
				and  InvoiceAmount.CurrencyAmount != TotalDistributionAmount.TransactionTotal)
					InvoiceAmount.CurrencyAmount = TotalDistributionAmount.TransactionTotal

					invoke Update first PayablesInvoicePaymentRel
						invoked.PaymentAmount.CurrencyAmount	= TotalDistributionAmount.TransactionTotal
						invoked.PaymentAmount.ExchangeDate		= InvoiceAmount.ExchangeDate
						invoked.TransientCurrencyRefresh		= true

				if (FirstPurchaseOrder.CurrencyExchangeSetPoint.Invoicing)
					invoke CreateInventoriedGainLossDistributions 

				if (old Status = Status.Released
				and !IsChargeback)
					MatchInReleasedState = true 

				if (InvoiceType.MatchPrepayment
				and AmountPaid = InvoiceAmount.CurrencyAmount)
					Status	= 9	

				else
				if (!Status.Released)
					if (DiscountAmount.CurrencyAmount entered
					and DiscountAmount.CurrencyAmount changed)
						DiscountAmount.ExchangeDate = InvoiceAmount.ExchangeDate 

					make transition to Released
			Exit Rules

				if (Company.GlobalWithholding)
					if (!Vendor.LineLevelWithholding)
						invoke UpdateReportableAmount PayablesInvoiceWithholdingRel
							invoked.PrmInvoiceAmount	= (InvoiceAmount.CurrencyAmount - sum TotalInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount)
							invoked.PrmTaxAmount		= sum TotalInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount

				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
				and CashCode.EditAvailableFunds)
					invoke UpdateCommittedFunds CashCodeFundEditRel

#ifdef module cam
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
					for each CustodialAccountEditRel
						LocalToAccountingEntity		= each.AccountingEntity
						LocalCustodialPosting 		= each.FinanceDimension10
						LocalCommittedAmount		= each.EditAmount
						LocalCustodialAccountEdit 	= each.CustodialAccountEdit
						if (CustodialDetailAmountRel exists)
							invoke UpdateCommittedAmount LocalCustodialAccountEdit












#endif


				if  (BackgroundProcessing.MatchInvoice)
					invoke UpdateAfterMatchSet PayablesInvoiceDistribution
						invoked.PrmPayablesCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice
						invoked.MatchInReleasedState = MatchInReleasedState
						invoked.AutoMatchResult = TransientAutoMatchResult
						invoked.MatchRetainageAmount = MatchRetainageAmount
				else
					for each PayablesInvoiceDistributionRel

						if (each.Status.Unreleased)
							invoke Unreleased.Release each
						else		
						if (!MatchInReleasedState  
						or  OneSourceGeneric
						or  each.MatchCreated entered)
							if (MatchPrepaymentMethod.EligibleForPrepay
							and PaidInvoice
							and each.TaxCode entered
							and each.TaxPoint.Payment)
								ApwsCancelledFl = "N"
								invoke 585BuildTxTaxTrans each
									invoked.ApwsCancelledFl = ApwsCancelledFl
							else
							if (each.TaxCode entered
							and !each.MatchCreated.Unmatch
							and (each.TaxPoint.Invoice
							or   each.TaxPoint.GLPostDate)
							and  each.TaxIndicator.None)
								ApwsCancelledFl = "N"
								invoke 585BuildTxTaxTrans each
									invoked.ApwsCancelledFl = ApwsCancelledFl


					invoke UpdateAfterMatchPart2
						invoked.TransientAutoMatchResult = TransientAutoMatchResult


		UpdateAfterMatchPart2 is an Update Action

			default label is untranslatable
			restricted
			bypass field rules
			Action Rules
				BypassActiveCodeBlockEdit = true
				BypassActiveVendorLocationEdit = true

				if  (MatchPrepayment
				and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving
				and  !CancelledOrPostedDistributionsRel exists
				and  !PaymentsBeyondOpenStatusRel exists)
					invoke UpdateCurrencyAmountsFromMatch

				if (IsChargeback)
					include AutoPopulateTaxableAndTaxAmounts

				if  (HasAllowReleaseOnlyMatchInvoice
				and  PayablesInvoiceDistributionExpenseAccrualRel exists)
					BypassOffsetAccruals = true


				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					if (MatchPrepaymentMethod.EligibleForPrepay
					and first GLCommitRel.Status.Released
					and FrontEndSplitsEnabled)
						invoke APFESUpdateOnly GLCommitRel 
					else 
						include ReleaseGLCommit

					if (IsChargeback)
						invoke EditTotalsRoute BudgetTemplateGroupTotal
							invoked.PrmFinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup 			= UniqueID
							invoked.PrmMode 					= BudgetEditMode.UpdateOnly
							invoked.PrmBusinessClassName		= "PayablesInvoice"
							invoked.PrmEditContext              = "Match"
							if (OriginatingInterfaceRun entered					
							and OriginatingInterfaceRun.Status.InProcess)		
								invoked.PrmIsBatch	= true						
					else 
					if ((TaxEntityRel.ThirdParty.Sabrix
					or  CallVertexByDocument)
					and BudgetTemplateGroupTotalRel exists)
						invoke EditTotalsRoute BudgetTemplateGroupTotal
							invoked.PrmFinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup 			= UniqueID
							invoked.PrmMode 					= BudgetEditMode.UpdateOnly
							invoked.PrmBusinessClassName		= "PayablesInvoice"
							invoked.PrmEditContext              = "Match"


				if (CallVertexByDocument
				and !TaxConfigurationRel.DebugMode
				and !TaxConfigurationRel.WriteToLogFile)
					for each JurisdictionResultsForInvoiceRel

						invoke Purge each 

				if (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or 	POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)

					initialize InvoiceDetailCounter
					for each PayablesInvoiceDetailRel
						InvoiceDetailCounter += 1

					for each MatchPurchaseOrderInvoicesRel
						if (InvoiceDetailCounter < NumberOfLinesForSetAction)
							LocalPurchaseOrder = each.PurchaseOrder
							invoke FinishCommitmentFromMatch LocalPurchaseOrderRel
						else
							LocalPurchaseOrder = each.PurchaseOrder
							invoke FinishCommitmentFromMatch PurchaseOrderLineDistribution
							    invoked.PrmCompany = each.Company
							    invoked.PrmPurchaseOrder = each.PurchaseOrder


				initialize FirstPaymentSequence
				for each PayablesInvoicePaymentRel
					if (each.Status.Unreleased)

						if  (FirstPaymentSequence not entered)
							FirstPaymentSequence = each.PayablesInvoicePayment.PaymentSequence

						invoke MatchRelease each

				if  (RetainageAccrualCode entered
				and  MatchRetainageAmount not entered)
					MatchRetainageAmount = sum RetainageDistributionsRel.DistributionAmount.CurrencyAmount

				if  (HasAllowReleaseOnlyMatchInvoice
				and  BypassOffsetAccruals)
					NextSentence = true
				else
				if  (RetainageAccrualCode entered
				and  MatchRetainageAmount entered)
					if  (FirstPaymentSequence entered)
						invoke CreateRetainageSplit FirstPaymentRel
							invoked.RetainageAmount 	= MatchRetainageAmount
					include CreateAccrualOffsetForRetainageInvoice
				else
					include CreateAccrualOffset

				if  (HasAllowReleaseOnlyMatchInvoice
				and  BypassOffsetAccruals)
					NextSentence = true
				else
					include CreateAccruedWithholdingDistributions

				if  (MatchCompanyRel.DiscountRecognition.Match
				and  MatchObjectID entered
				and  FirstPaymentSequence entered
				and	 FirstPaymentRel.DiscountAmount.CurrencyAmount entered)
					invoke Create PayablesInvoiceDiscount
						fill in fields from FirstPaymentRel.PayablesInvoicePayment
							except invoked.DiscountAmount
						invoked.DiscountType						= "M"
						invoked.PostDate							= DistributionDate
						invoked.DiscountAmount.CurrencyAmount		= FirstPaymentRel.DiscountAmount.CurrencyAmount
						invoked.ProcessLevel						= ProcessLevel
						invoked.Status								= 1


				if  (HasAllowReleaseOnlyMatchInvoice
				and  BypassOffsetAccruals)
					NextSentence = true
				else
				if (TaxEntityRel.ThirdParty.Sabrix)
					for each MatchOneSourceAccruedDistributionsRel
						LocalAmount									= each.DistributionAmount.CurrencyAmount * -1
						LocalTaxCode								= each.TaxCode
						if  (TaxCode entered)
							LocalTaxCode							= TaxCode
						if (TaxConfigurationRel.OneSourceVersionType.Original)
							LocalTaxingJurisdiction					= each.PayablesTaxDetailRel.TaxingJurisdiction
						else
						if (each.AddOnCharge entered)
							LocalTaxingJurisdiction					= each.PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.TaxingJurisdiction
						else
							LocalTaxingJurisdiction					= each.PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.TaxingJurisdiction

						if  (LocalAmount entered)

							if (TaxAccrualUsesTaxEntity)	
								LocalTaxEntity		  = each.DistributionAccount.ToAccountingEntity	

							invoke Create PayablesInvoiceDistribution
								fill in fields from this instance
									except invoked.TaxCode
									except invoked.TaxableAmount
									except invoked.DistributionAccount
									except invoked.GLFinanceCodeBlock
									except invoked.DistributionCode
								invoked.DistributionType 							= "A"
								invoked.GLTransactionAmount  	  				   	= LocalAmount
								invoked.DistributionAmount.CurrencyAmount		   	= LocalAmount
								invoked.DistributionAmount.KeepRateOnly				= true
								invoked.DistributionDate							= DistributionDate
								invoked.DistributionAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
								invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalAmount
								invoked.TransientTaxingJurisdiction					= LocalTaxingJurisdiction

								if  (TaxConfigurationRel.OneSourceVersionType.Generic
								and  each.AddOnCharge entered)
									LocalAccrualCode		= each.PayablesInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.TaxAccrualCode
								else
								if  (TaxConfigurationRel.OneSourceVersionType.Generic)
									LocalAccrualCode		= each.PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.TaxAccrualCode
								else
								if (!TaxEntityRel.UseTaxCodeAccounts)	
									LocalAccrualCode		= TaxEntityRel.AccrualCode
								else
									LocalAccrualCode		= LocalEntityTaxCodeRel.AccrualCode

								if (TaxAccrualCodeDetailRel exists)
									invoked.GLFinanceCodeBlock							= TaxAccrualCodeDetailRel.DistributionAccount
									invoked.DistributionAccount							= TaxAccrualCodeDetailRel.DistributionAccount
								else
									invoked.GLFinanceCodeBlock							= PayablesAccrualCodeDetailRel.DistributionAccount
									invoked.DistributionAccount							= PayablesAccrualCodeDetailRel.DistributionAccount

								if (TaxAccrualUsesTaxEntity)																	
									LocalTaxCompany = LocalTaxEntity															
									if (OverrideTaxAccrualDetailRel exists)														
										invoked.GLFinanceCodeBlock			= OverrideTaxAccrualDetailRel.DistributionAccount	
										invoked.DistributionAccount			= OverrideTaxAccrualDetailRel.DistributionAccount	
									else																						

										invoked.GLFinanceCodeBlock.ToAccountingEntity	= LocalTaxEntity						
										invoked.DistributionAccount.ToAccountingEntity	= LocalTaxEntity						

								invoked.Status										= 1
								invoked.TransientBypassErrorUpdate					= true
				else
				if  (TaxEntityRel.VATRegistrationCountry entered
				and  MatchAccruedTaxVATReverseDistributionsRel exists)

					for each MatchAccruedTaxVATReverseDistributionsRel
						invoke MatchVATAccrualProcessing each
				else
				if (TaxType.Accrued
				or  MatchAccruedTaxDistributionsRel exists)  
					initialize LocalGroupTotalDistributions

					initialize LocalTaxCode
					initialize LocalTaxAccrualAmount
					initialize LocalTotalDistributionAmount
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting)
						for each MatchAccruedTaxDistributionsRel
							LocalTaxCode						= each.TaxCode
							LocalTaxAccrualAmount				= each.DistributionAmount.CurrencyAmount
							LocalTaxDistributionAmount			= each.DistributionAmount
							LocalPayablesInvoiceDistribution	= each.PayablesInvoiceDistribution
							if (TaxAccrualUsesTaxEntity)
								LocalTaxEntity		  			= each.DistributionAccount.ToAccountingEntity



							LocalGroupTotalDistributions.FunctionalTotal	-= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal		-= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal2	-= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal3	-= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal1		-= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal2		-= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal3		-= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal4		-= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal5		-= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

							include CreateTaxAccrualOffset


							LocalGroupTotalDistributions.FunctionalTotal	-= LocalAccrualDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal		-= LocalAccrualDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal2	-= LocalAccrualDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal3	-= LocalAccrualDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal1		-= LocalAccrualDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal2		-= LocalAccrualDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal3		-= LocalAccrualDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal4		-= LocalAccrualDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal5		-= LocalAccrualDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

					else
						for each MatchAccruedTaxDistributionsRel

							LocalGroupTotalDistributions.FunctionalTotal	-= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal		-= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal2	-= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal3	-= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal1		-= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal2		-= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal3		-= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal4		-= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal5		-= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

							if (LocalTaxCode entered
							and each.TaxCode != LocalTaxCode)
								LocalTaxDistributionAmount			= each.DistributionAmount
								include CreateTaxAccrualOffset
								initialize LocalTaxAccrualAmount

								LocalGroupTotalDistributions.FunctionalTotal	-= LocalAccrualDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalGroupTotalDistributions.AlternateTotal		-= LocalAccrualDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
								LocalGroupTotalDistributions.AlternateTotal2	-= LocalAccrualDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalGroupTotalDistributions.AlternateTotal3	-= LocalAccrualDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalGroupTotalDistributions.ReportTotal1		-= LocalAccrualDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
								LocalGroupTotalDistributions.ReportTotal2		-= LocalAccrualDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
								LocalGroupTotalDistributions.ReportTotal3		-= LocalAccrualDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
								LocalGroupTotalDistributions.ReportTotal4		-= LocalAccrualDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
								LocalGroupTotalDistributions.ReportTotal5		-= LocalAccrualDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

							LocalTaxCode				= each.TaxCode
							LocalTaxAccrualAmount 		+= each.DistributionAmount.CurrencyAmount

							if (TaxAccrualUsesTaxEntity)
								LocalTaxEntity		  	= each.DistributionAccount.ToAccountingEntity

						if (LocalTaxCode entered)
							include CreateTaxAccrualOffset
							initialize LocalTaxAccrualAmount
							initialize LocalTotalDistributionAmount


							LocalGroupTotalDistributions.FunctionalTotal	-= LocalAccrualDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal		-= LocalAccrualDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal2	-= LocalAccrualDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.AlternateTotal3	-= LocalAccrualDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal1		-= LocalAccrualDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal2		-= LocalAccrualDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal3		-= LocalAccrualDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal4		-= LocalAccrualDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							LocalGroupTotalDistributions.ReportTotal5		-= LocalAccrualDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount


					if (LocalGroupTotalDistributions.FunctionalTotal not entered
					and (LocalGroupTotalDistributions.AlternateTotal entered
					or  LocalGroupTotalDistributions.AlternateTotal2 entered
					or  LocalGroupTotalDistributions.AlternateTotal3 entered
					or  LocalGroupTotalDistributions.ReportTotal1 entered
					or  LocalGroupTotalDistributions.ReportTotal2 entered
					or  LocalGroupTotalDistributions.ReportTotal3 entered
					or  LocalGroupTotalDistributions.ReportTotal4 entered
					or  LocalGroupTotalDistributions.ReportTotal5 entered))
						invoke AdjustDistributionCurrencyAmounts last MatchAccruedTaxDistributionsRel
							invoked.PrmCurrencyAmountAdjustment = LocalGroupTotalDistributions 

				if  (MatchPrepayment
				and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving
				and  (CancelledOrPostedDistributionsRel exists
				or    PaymentsBeyondOpenStatusRel exists))
				 	invoke GainLossForReceiptDateSetPoint 

				if (MatchObjectID entered)
					include AddToVendorBalance

				invoke CreateNoRules PayablesInvoiceAudit
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.Resource				= actor.agent(Employee).Employee
					if (MatchStatus < 2)
						invoked.Status				= 9		
					else
						invoked.Status				= 16	
					invoked.UpdateDate				= current timestamp

				if (MatchObjectID entered)
					for each MatchPurchaseOrderInvoicesRel
						invoke UpdateFromMatch each.PurchaseOrder

				if (MatchObjectID entered)
					invoke FastUpdate MatchInvoiceMessageRel
						invoked.MatchObjectID						= MatchObjectID

				if (PayablesInvoice.OriginatingInterfaceRun entered
				and TransientAutoMatchResult entered
				and PayablesInvoice.OriginatingInterfaceRun = TransientAutoMatchResult.PrmInterfaceRun)
					invoke AddToResults PayablesInvoice.OriginatingInterfaceRun
						invoked.Company = Company
						invoked.PayablesInvoice = PayablesInvoice
						invoked.ReduceUnmatched = true


				if  (TransientAutoMatchResult entered)
					LocalAutoMatchResult = TransientAutoMatchResult

					invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel

				invoke Purge AsyncErrorRel

				if  (!FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					WorkAmount1 = PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - PayablesInvoice.TotalDistributionAmount.FunctionalTotal
					if (PayablesInvoice.TotalDistributionAmount 		= PayablesInvoice.InvoiceAmount.CurrencyAmount
					and WorkAmount1 entered)
						for each PayablesInvoiceDistributionAccrualAccountRel
							invoke AdjustBaseDistributionAmount each
								invoked.AdjustAmount 							= WorkAmount1
							end for each
				initialize BackgroundProcessing

				if ((TaxEntityRel.ThirdParty.Sabrix
				and  (TaxCode entered 
				or    Location.PurchaseOrderTaxCode entered)
				and   TaxLineItemRel exists)
				or  (TaxEntityRel.ThirdParty.VertexOSeries 
				and   TaxLineItemRel exists))
					invoke CreateTaxHistoryForInvoice

				if (TaxEntityRel.ThirdParty.Sabrix
				and !TaxConfigurationRel.DebugMode)
					invoke Purge OneSourceOutputUserAttributesRel

				if  (MatchAgingRel exists
				and (InvoiceType.Invoice
				or   Suffix not entered))
					if (MatchAgingInvoiceRel not exists)
						invoke Create MatchAgingInvoice 
							invoked.Company = Company
							invoked.PayablesInvoice = PayablesInvoice
					else
						invoke AddToAging MatchAgingInvoiceRel
							invoked.FromMatch = true  

				if  (ProcessTaxOnHoldValidForMatch
				and  IsOnHold)
					invoke TakeInvoiceOffHold

				log untranslatable:"Invoice<Invoice>MatchedFrom<this instance(locale of blank).MatchedFrom>;Created<create date>;MatchDate<MatchDate>MatchStatus<this instance(locale of blank).MatchStatus>."

				include PerformDocumentManagementWebserviceCalls	

				if (MatchCompanyRel.SummarizeAllDistributions)

					if (HasDistributionSummary)
						for each PayablesInvoiceDistributionSummaryRel 
							invoke Purge each 

					for each PayablesInvoiceDistributionForSummaryRel
						invoke CalculateDistributionSummary each 

				invoke TriggerSupplierInvoiceBOD



#ifdef module idm
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.IDMConfiguration.UpdatePayablesInvoiceAttributes)
					if (IsIDMConfigured)
						invoke UpdateIDMAttributes
#endif

		CreateTaxHistoryForInvoice is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				ProcessTaxHistory.HistoryType				= "O"
				ProcessTaxHistory.InTransactionId			= blank
				ProcessTaxHistory.InvoiceCompany			= PayablesInvoice.Company
				ProcessTaxHistory.TaxEntity			        = PayablesInvoice.Company.AccountingEntity	

				if (TaxCode not entered
				and TaxEntityRel.ThirdParty.Sabrix
				and Location.PurchaseOrderTaxCode entered) 
					ProcessTaxHistory.TaxCode				= Location.PurchaseOrderTaxCode
				else
				if (TaxCode not entered
				and TaxEntityRel.ThirdParty.VertexOSeries) 
					ProcessTaxHistory.TaxCode				= "00"
				else
				if (TaxCode not entered																
				and TaxEntityUsesSabrix																
				and first TotalTran1TaxableDistributionRel.TaxCode entered)							
					ProcessTaxHistory.TaxCode	= first TotalTran1TaxableDistributionRel.TaxCode	
				else
					ProcessTaxHistory.TaxCode				= TaxCode

				ProcessTaxHistory.SystemCode				= "AP"
				ProcessTaxHistory.VendorCustomer			= Vendor
				ProcessTaxHistory.VendorOrCustomerName		= Vendor.VendorSearchName
				ProcessTaxHistory.TaxID						= Vendor.TaxID
				ProcessTaxHistory.Invoice					= PayablesInvoice.Invoice
				ProcessTaxHistory.Suffix					= PayablesInvoice.Suffix
				ProcessTaxHistory.CancelSequence		    = PayablesInvoice.CancelSequence	
				ProcessTaxHistory.ProcessLevel				= ProcessLevel
				ProcessTaxHistory.InvoiceDate 				= PayablesInvoice.InvoiceDate
				ProcessTaxHistory.TransactionInvoiceAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount	
				ProcessTaxHistory.TransactionTaxAmount		= PayablesInvoice.TaxAmount		
				ProcessTaxHistory.ChargedTaxAmount 			= PayablesInvoice.TaxAmount 
				ProcessTaxHistory.AccruedOrInvoiced			= DerivedTaxMethodInvOrAcc		
				if (!MatchProcessType.Expense)
					if (PayablesInvoiceTaxRel.EnteredTaxAmount entered)
						ProcessTaxHistory.AccruedOrInvoiced = "I" 
					else 
						ProcessTaxHistory.AccruedOrInvoiced = "A"
				ProcessTaxHistory.CommodityCode				= first TotalTran1TaxableDistributionRel.ICNCode	

				if (PayablesInvoice.TaxableAmount entered)
					ProcessTaxHistory.TransactionTaxableAmount	= PayablesInvoice.TaxableAmount
				else 
					ProcessTaxHistory.TransactionTaxableAmount	= PayablesInvoice.InvoiceAmount.CurrencyAmount
				if (MatchProcessType.Expense												
				and ProcessTaxHistory.TransactionTaxableAmount not entered					
				and ProcessTaxHistory.TransactionInvoiceAmount not entered					
				and first TaxablePayablesInvoiceDistributionRel.TaxableAmount entered)		
					ProcessTaxHistory.TransactionTaxableAmount	= first TaxablePayablesInvoiceDistributionRel.TaxableAmount	

				ProcessTaxHistory.TransactionCurrency			= PayablesInvoice.InvoiceCurrency
				ProcessTaxHistory.TransactionNumberOfDecimals 	= NumberOfDecimals
				ProcessTaxHistory.BaseNumberOfDecimals			= BaseNumberOfDecimals
				ProcessTaxHistory.UserElementLevel 				= "L"
				ProcessTaxHistory.Location 						= PayablesInvoice.Location 

				ProcessTaxHistory.BaseInvoiceAmountGroup.TransactionAmount					= PayablesInvoice.InvoiceAmount.CurrencyAmount								
				ProcessTaxHistory.BaseInvoiceAmountGroup.BaseAmount.EnteredCurrencyAmount	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount		
				ProcessTaxHistory.BaseTaxableAmountGroup.TransactionAmount					= TaxableAmount																
				ProcessTaxHistory.BaseTaxAmountGroup.TransactionAmount						= TaxAmount											
				
				ProcessTaxHistory.BaseInvoiceAmountGroup.BaseAmount.ToCurrency				= Company.AccountingEntity.FunctionalCurrency				
				ProcessTaxHistory.BaseInvoiceAmountGroup.BaseAmount.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		

				ProcessTaxHistory.BaseTaxableAmountGroup.BaseAmount.ToCurrency				= Company.AccountingEntity.FunctionalCurrency				
				ProcessTaxHistory.BaseTaxableAmountGroup.BaseAmount.EnteredCurrencyRate		= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		

				ProcessTaxHistory.BaseTaxAmountGroup.BaseAmount.ToCurrency					= Company.AccountingEntity.FunctionalCurrency				
				ProcessTaxHistory.BaseTaxAmountGroup.BaseAmount.EnteredCurrencyRate			= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		

				if (PayablesInvoice.HasMatchPurchaseOrders)	
					ProcessTaxHistory.ToAddress					= PayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddress		
				else	
				if (PayablesInvoice.Location entered)	
					ProcessTaxHistory.ToAddress					= PayablesInvoice.Location.PostalAddress		
				else	
				if (PayablesInvoice.ProcessLevel.PostalAddress entered)
					ProcessTaxHistory.ToAddress					= PayablesInvoice.ProcessLevel.PostalAddress		
				else
				if (PayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress entered)
					ProcessTaxHistory.ToAddress					= PayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress	


				if  (PayablesInvoice.InvoiceSource.IntercompanyBilling	
				and (PayablesInvoice.TaxEntityUsesSabrix
				or	 PayablesInvoice.TaxEntityUsesVertex)
				and  PayablesInvoice.IntercompanyBillingDocumentByDateRel exists)
					
					if (PayablesInvoice.IntercompanyBillingDocumentByDateRel.ReceivableEntity.CustomerShipTo.ShipToAddress entered)
						ProcessTaxHistory.ToAddress	= PayablesInvoice.IntercompanyBillingDocumentByDateRel.ReceivableEntity.CustomerShipTo.ShipToAddress
					else
						ProcessTaxHistory.ToAddress	= PayablesInvoice.IntercompanyBillingDocumentByDateRel.ReceivableEntity.Customer.PostalAddress
					

				if (PayablesInvoice.BillToProcessLevel entered)	
					ProcessTaxHistory.BillToAddress				= PayablesInvoice.BillToProcessLevel.PostalAddress	
				else	
					ProcessTaxHistory.BillToAddress				= PayablesInvoice.ProcessLevel.PostalAddress		
					

				if (PayablesInvoice.PurchaseFromLocation entered)	
					ProcessTaxHistory.FromAddress		= PayablesInvoice.PurchaseFromVendorLocAddressRel.PostalAddress	
				else
					ProcessTaxHistory.FromAddress		= Vendor.CurrentAddressRel.PostalAddress						
					

				if (PayablesInvoice.PurchaseFromLocation entered)	
					ProcessTaxHistory.POAAddress		= PayablesInvoice.PurchaseFromVendorLocAddressRel.PostalAddress	
				else
					ProcessTaxHistory.POAAddress		= Vendor.CurrentAddressRel.PostalAddress						
					
				if (PayablesInvoice.PurchaseFromLocation entered)
					ProcessTaxHistory.TaxUsageCode				= PayablesInvoice.PurchaseFromLocation.VendorLocation.TaxUsageCode				
				ProcessTaxHistory.CurrencyRate					= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				if (PayablesInvoice.InvoiceType = "C")	
					ProcessTaxHistory.InvoicedOrCreditMemo		= "C"
				else
					ProcessTaxHistory.InvoicedOrCreditMemo		= "I"	
				ProcessTaxHistory.TaxYear						= blank
				ProcessTaxHistory.TaxPeriod						= blank
				ProcessTaxHistory.VoucherNumber					= VoucherNumber		
				
				ProcessTaxHistory.PostDate					= DistributionDate
				
				if (PayablesInvoiceTaxRel.TaxPointDate entered)	
					ProcessTaxHistory.TaxPointDate 				= PayablesInvoiceTaxRel.TaxPointDate
				else
				if (TaxPoint.Payment																			
				and last MultiplePayablesInvoicePaymentRel.CheckDate entered) 					
					ProcessTaxHistory.TaxPointDate    	= last MultiplePayablesInvoicePaymentRel.CheckDate 	
				else	
					ProcessTaxHistory.TaxPointDate		= InvoiceDate

				ProcessTaxHistory.TransactionNumberOfDecimals = NumberOfDecimals				
				ProcessTaxHistory.TransactionSource				= "I"
				if (PayablesInvoice.HasMatchPurchaseOrders)
					ProcessTaxHistory.PointOfTitleTransfer		= FirstPurchaseOrder.PointOfTitleTransfer
				else 
					ProcessTaxHistory.PointOfTitleTransfer			= DerivedPointOfTitleTransfer	
				ProcessTaxHistory.UniqueIdOfRelatedObject		= UniqueID

				if (Vendor.VATRegistrationCountry entered)
					ProcessTaxHistory.VATRegistrationCountry    = Vendor.VATRegistrationCountry
					ProcessTaxHistory.VATRegistrationNumber		= Vendor.VATRegistrationNumber
				else	
				if (PayablesInvoice.PurchaseFromLocation entered
				and PayablesInvoice.PurchaseFromLocation.VendorLocation.VATRegistrationCountry entered)
					ProcessTaxHistory.VATRegistrationCountry = PayablesInvoice.PurchaseFromLocation.VendorLocation.VATRegistrationCountry	
					ProcessTaxHistory.VATRegistrationNumber  = PayablesInvoice.PurchaseFromLocation.VendorLocation.VATRegistrationNumber

				ProcessTaxHistory.DeliveryTerms          		= PayablesInvoice.ShipTerm
				ProcessTaxHistory.DefaultFilingCurrency 		= Company.Currency 	
				if (PayablesInvoice.PayCurrency entered)
					ProcessTaxHistory.BaseCurrency 				= PayablesInvoice.PayCurrency					
				else	
					ProcessTaxHistory.BaseCurrency 				= PayablesInvoice.PayGroup.BaseCurrency
				ProcessTaxHistory.ChargedTaxAmount				= PayablesInvoice.TaxAmount	

				ProcessTaxHistory.PayablesCompany = Company 	
				ProcessTaxHistory.PayablesInvoice = PayablesInvoice 

				ProcessTaxHistory.TaxTransFunction			= "A"	
				
				if (Company.DelayTaxProcessing)							
					ProcessTaxHistory.SendMultLineItems		= true
				else
					ProcessTaxHistory.SendMultLineItems		= false		

				if (PayablesInvoice.TaxAmount not entered													
				and PayablesInvoiceTaxRel.TotalAccruedTaxAmount entered)									
					ProcessTaxHistory.TransactionTaxAmount	= PayablesInvoiceTaxRel.TotalAccruedTaxAmount	

				ProcessTaxHistory.UniqueIdOfRelatedObject			= PayablesInvoice.UniqueID
				ProcessTaxHistory.UserElementLevel					= "L"

				if  (!MatchProcessType.Expense				
				or  (MatchProcessType.Expense				
				and !TransientExcludeAllLinesFromTaxCall	
				and !BypassNonUS))							
					LocalTaxHistoryProcessed				= ProcessTaxHistory.TaxHistoryProcessed	

				if (!LocalTaxHistoryProcessed = "Y")
					if (MatchProcessType.Expense													
					and DoTaxAfter)																	

						if (ProcessTaxHistory.ReturnedErrorNumber = 701)	
							if (!ExcludeFromTaxEstimate													
							and !all TotalTran1TaxableDistributionRel.ICNCode.ExcludeFromTaxEstimate)	
								invoke Create PayablesInvoiceError set									
									invoked.ErrorLevel		= 2		
									invoked.ErrorClass		= 2		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"
								invoke ClearBackgroundProcessing 										
						else	
						if (ProcessTaxHistory.ReturnedErrorNumber  entered)	
							invoke Create PayablesInvoiceError set			
								invoked.ErrorLevel		= 2		
								invoked.ErrorClass		= 2		
								invoked.ErrorType		= 75	//"OneSourceTaxHistoryError"
							invoke ClearBackgroundProcessing
					else	
						constraint (ProcessTaxHistory.OutputErrorMessage not entered)
							"<ProcessTaxHistory.OutputErrorMessage>"	   	

				if (!MatchProcessType.Expense)
					for each PayablesInvoiceDistributionRel 
						if (each.TaxCode entered 
						and each.DistributionType.Distribution)
							ProcessTaxHistory.TaxTransactionAccount		= each.DistributionAccount
							ProcessTaxHistory.TaxCode 					= each.TaxCode 		
							ProcessTaxHistory.ProductTaxCategory		= each.ProductTaxCategory
							ProcessTaxHistory.TaxRate					= each.TaxRate
							ProcessTaxHistory.TransactionTaxableAmount 	= each.TaxableAmount

							ProcessTaxHistory.TransactionTaxAmount		= each.DistributionAmount.CurrencyAmount	
							ProcessTaxHistory.AccruedOrInvoiced 		= each.TaxType
							ProcessTaxHistory.CommodityCode				= each.ICNCode
							if (each.TaxUsageCode entered)
								ProcessTaxHistory.TaxUsageCode			= each.TaxUsageCode

							if  (each.PayablesInvoiceDetail entered)
								ProcessTaxHistory.CommodityCode			= each.PayablesInvoiceDetail.DerivedCommodityCodeNoDash
								if (each.AddOnCharge entered)
									ProcessTaxHistory.Quantity 			= each.PayablesInvoiceAddOnChargeRel.EnteredQuantity 
									ProcessTaxHistory.Description		= each.AddOnCharge.Description                                    
									ProcessTaxHistory.ItemNumber		= each.AddOnCharge
									ProcessTaxHistory.UniqueLineNumber	= each.PayablesInvoiceAddOnChargeRel.UniqueID	
									ProcessTaxHistory.LineNumber		= each.PurchaseOrderLine
									ProcessTaxHistory.Location 			= each.PayablesInvoiceAddOnChargeRel.Location 
									if (each.PayablesInvoiceAddOnChargeRel.Location entered)
										ProcessTaxHistory.ToAddress 	= each.PayablesInvoiceAddOnChargeRel.Location.PostalAddress

								else 
									ProcessTaxHistory.Quantity 			= each.PayablesInvoiceDetail.EnteredQuantity 
									ProcessTaxHistory.Description		= each.PayablesInvoiceDetail.ItemDescription                                    
									ProcessTaxHistory.ItemNumber		= each.PayablesInvoiceDetail.Item
									ProcessTaxHistory.LineNumber		= each.PayablesInvoiceDetail.PurchaseOrderLine
									ProcessTaxHistory.ProductClass 		= each.PurchaseOrderLine.Item.MajorPurchasingClass 
									ProcessTaxHistory.UniqueLineNumber	= each.PayablesInvoiceDetail.UniqueID
									ProcessTaxHistory.Location 			= each.PayablesInvoiceDetail.Location 
									if (each.PayablesInvoiceDetail.Location entered)
										ProcessTaxHistory.ToAddress 	= each.PayablesInvoiceDetail.Location.PostalAddress

							if (TaxEntityRel.ThirdParty.VertexOSeries)
								ProcessTaxHistory.CostCenter                = each.DistributionAccount.AccountingUnit 
								ProcessTaxHistory.GeneralLedgerAccount 		= each.DistributionAccount.GeneralLedgerChartAccount 

								if (IsHSNSACCodeEnabled)
									ProcessTaxHistory.CommodityCodeType     = "HSN"
									ProcessTaxHistory.HSNSACCode			= each.HSNSACCode 
								else 
									if  (each.AddOnCharge entered)
										if (each.AddOnCharge.UNSPSCCode entered)
											ProcessTaxHistory.CommodityCodeType = "UNSPSC"
											ProcessTaxHistory.CommodityCode 	= each.AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay 
									else 
									if (each.PurchaseOrderLine entered)
										if (each.PurchaseOrderLine.UNSPSCCode entered)
											ProcessTaxHistory.CommodityCodeType     = "UNSPSC"
											ProcessTaxHistory.UNSPSCCode			= each.PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay 
									else 
									if (each.ContractLine entered)
										if (each.ContractLine.UNSPSCCode entered)
											ProcessTaxHistory.CommodityCodeType     = "UNSPSC"
											ProcessTaxHistory.UNSPSCCode			= each.ContractLine.UNSPSCCode.UNSPSCCodeDisplay 





							ProcessTaxHistory.SendMultLineItems			= false 

							LocalTaxHistoryProcessed					= ProcessTaxHistory.TaxHistoryProcessed
				else 


					if  (!BypassNonUS 		
					and  TransientExcludeAllLinesFromTaxCall
					and  PayablesInvoice.TaxAmount not entered)	
						NextSentence = true						
					else										

						for each TaxLineItemRel															
							each.LocalCompany							= Company						
							each.LocalVendor							= Vendor						
							each.LocalPayablesInvoice					= PayablesInvoice				
							each.LocalPayablesInvoiceDistribution		= each.LineItemNumber			
							ProcessTaxHistory.InputTaxLineItemSequence	= each.TaxLineItem.Sequence		
							ProcessTaxHistory.TaxTransactionAccount		= each.PayablesInvoiceDistributionRel.DistributionAccount		
							LocalTaxHistoryProcessed					= ProcessTaxHistory.CreateTaxTransactionForInputTaxLineItem		
							if (ProcessTaxHistory.TransactionInvoiceAmount not entered			
							and ProcessTaxHistory.TransactionTaxableAmount not entered			
							and each.TaxableAmount entered)										
								ProcessTaxHistory.TransactionTaxableAmount = each.TaxableAmount	

		UpdateCurrencyAmountsFromMatch is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				invoke MatchCurrencyRefresh
					invoked.TransientCurrencyRefresh	= true

		MatchCurrencyRefresh is an Update Action
			default label is untranslatable
			restricted
			Action Rules
				initialize TransientExchangeDate

				for each PayablesInvoiceDetailRel
					if (TransientExchangeDate	!entered
					or  TransientExchangeDate	> each.PurchaseOrderReceipt.ReceivedDate)
						if (each.PurchaseOrderReceipt.ReceivedDate entered)						
							TransientExchangeDate	= each.PurchaseOrderReceipt.ReceivedDate
						else																	
							TransientExchangeDate	= InvoiceAmount.ExchangeDate				
					InvoiceAmount.ExchangeDate	= TransientExchangeDate
				include RefreshCurrencyAmounts

		GainLossForReceiptDateSetPoint is an Instance Action
			Action Rules

				if (MatchCompanyRel.CurrencyExchangeSetPoint.ReceiptDate)
					initialize LocalEffectiveDate 
					LocalEffectiveDate = first PurchaseOrderReceiptSet3Rel.ReceivedDate
					if (LocalEffectiveDate not entered)
						LocalEffectiveDate = FirstPurchaseOrder.PurchaseOrderDate

				if (MatchCompanyRel.CurrencyExchangeSetPoint.ReceiptDate
				and InvoiceDate != LocalEffectiveDate)
					BypassNegativeRateEdit = true
					initialize LocalDistributionAmount
					LocalDistributionAmount.ExchangeDate = DerivedExchangeDate 
					initialize LocalTotalDistributionAmount 
					LocalTotalDistributionAmount.ExchangeDate = LocalEffectiveDate

					for each PayablesInvoiceDistributionPaymentAccrualRel
						LocalPostToAccount                                                  = each.DistributionAccount 
						LocalDistributionAmount.CurrencyAmount 								+= each.DistributionAmount.CurrencyAmount
						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

					for each PayablesInvoiceDistributionExpenseAccrualRel
						LocalDistributionAmount.CurrencyAmount 								+= each.DistributionAmount.CurrencyAmount
						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

					if  (LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		entered)

						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							assign result to NewPayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "Y"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							invoked.DistributionDate		= DistributionDate  
							invoked.GLTGeneralLedgerEvent	= "AD"
							invoked.Description				= "Currency Gain Loss For Currency Set Point Receipt Date" 
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate			= DerivedExchangeDate 
							invoked.DistributionAmount.CurrencyAmount		= blank
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount    = LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount   = LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount  = LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount     	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount      = LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.KeepRateAndAmount						= true

							invoked.GLFinanceCodeBlock		                                    = LocalPostToAccount
							invoked.GLTTransactionCodeBlock	                                    = LocalPostToAccount
							invoked.DistributionAccount		                                    = LocalPostToAccount
							invoked.MatchCreated 												= "S"

						LocalPostToAccount		                                            = PayablesAccrualCodeDetailRel.DistributionAccount

						if (RealizedGainAndLossRel exists)
							LocalPostToAccount.GeneralLedgerChartAccount		            = RealizedGainAndLossRel.GeneralLedgerChartAccount
						else
						if  (LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount	    > 0
						or   LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount      > 0
						or   LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount	    > 0
						or   LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount	    > 0
						or   LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		> 0)
							LocalPostToAccount.GeneralLedgerChartAccount		            = RealizedGainRel.GeneralLedgerChartAccount
						else
							LocalPostToAccount.GeneralLedgerChartAccount		            = RealizedLossRel.GeneralLedgerChartAccount

						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "G"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							invoked.DistributionDate		= DistributionDate
							invoked.GLTGeneralLedgerEvent	= "AD" 
							invoked.Description				= "Currency Gain Loss For Currency Set Point Receipt Date" 
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate			= DerivedExchangeDate 
							invoked.DistributionAmount.CurrencyAmount		= blank
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	    = NewPayablesInvoiceDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount        = NewPayablesInvoiceDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount       = NewPayablesInvoiceDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= NewPayablesInvoiceDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	    = NewPayablesInvoiceDistribution.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount      = NewPayablesInvoiceDistribution.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount     = NewPayablesInvoiceDistribution.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	    = NewPayablesInvoiceDistribution.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount     	    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount      	= NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.KeepRateAndAmount							= true

							invoked.GLFinanceCodeBlock		                                    	= LocalPostToAccount
							invoked.GLTTransactionCodeBlock	                                    	= LocalPostToAccount
							invoked.DistributionAccount		                                    	= LocalPostToAccount
							invoked.MatchCreated 													= "S"

		CreateInventoriedGainLossDistributions is an Instance Action
			restricted

			Action Rules

				LocalEffectiveDate = FirstPurchaseOrder.PurchaseOrderDate

				if (FirstPurchaseOrder.CurrencyExchangeSetPoint.Invoicing
				and InvoiceDate != LocalEffectiveDate)
					BypassNegativeRateEdit = true
					initialize LocalDistributionAmount
					LocalDistributionAmount.ExchangeDate = DerivedExchangeDate 
					initialize LocalTotalDistributionAmount 
					LocalTotalDistributionAmount.ExchangeDate = LocalEffectiveDate

					for each PayablesInvoiceDistributionRel
						if (each.PurchaseOrderLine entered 
						and each.PurchaseOrderLine.ItemType.Inventoried 
						and (each.DistributionAccount = ProcessLevel.ReceiptAccrualAccount 
						or  each.DistributionAccount = MatchCompanyRel.ReceiptAccrualAccount))
							LocalPostToAccount                              = each.DistributionAccount 

							LocalTotalDistributionAmount.CurrencyAmount 	+= each.DistributionAmount.CurrencyAmount

							LocalDistributionAmount.CurrencyAmount 			+= each.DistributionAmount.CurrencyAmount

							LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount

							LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
							LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
							LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
							LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
							LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount

							LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

							LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
							LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							LocalReportCurrencyExchangeGroup.ExchangeDate			= LocalEffectiveDate
							LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
							LocalReportCurrencyExchangeGroup.TransactionAmount		= each.DistributionAmount.CurrencyAmount

							initialize LocalReportCurrencyExchangeGroup.BaseAmount
							LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.FunctionalCurrency
							LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount      -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (Company.AccountingEntity.AlternateCurrency entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency
								LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount       -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (Company.AccountingEntity.AlternateCurrency2 entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency2
								LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount      -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (Company.AccountingEntity.AlternateCurrency3 entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= GeneralLedgerCompanyRel.AccountingEntity.AlternateCurrency3
								LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount      -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.FunctionalCurrency entered
							and LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount entered 
							and InvoiceCurrency not = MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.FunctionalCurrency)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.FunctionalCurrency
								LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount    -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.AlternateCurrency entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.AlternateCurrency
								LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount     -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.AlternateCurrency2 entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.AlternateCurrency2
								LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount    -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.AlternateCurrency3 entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= MatchCompanyRel.ReceiptAccrualAccount.ToAccountingEntity.AlternateCurrency3
								LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount    -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (MatchCompanyRel.ReceiptAccrualAccount.Project.Currency entered) 
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= MatchCompanyRel.ReceiptAccrualAccount.Project.Currency
								LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount         -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOne entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOne
								LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount         -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyTwo
								LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount         -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyThree entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyThree
								LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount         -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFour entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFour
								LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount         -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

							if (InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFive entered)
								initialize LocalReportCurrencyExchangeGroup.BaseAmount
								LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency				= InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyFive
								LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount         -= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

					if  (LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	entered
					or   LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		entered
					or   LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		entered)

						if (RealizedGainAndLossRel exists)
							LocalPostToAccount.GeneralLedgerChartAccount		            = RealizedGainAndLossRel.GeneralLedgerChartAccount
						else
						if  (LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount	    > 0
						or   LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount      > 0
						or   LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount	    > 0
						or   LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount	    > 0
						or   LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	> 0
						or   LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount		> 0
						or   LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount		> 0)
							LocalPostToAccount.GeneralLedgerChartAccount		            = RealizedGainRel.GeneralLedgerChartAccount
						else
							LocalPostToAccount.GeneralLedgerChartAccount		            = RealizedLossRel.GeneralLedgerChartAccount

						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							assign result to NewPayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "D"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							invoked.DistributionDate		= DistributionDate  
							invoked.GLTGeneralLedgerEvent	= "AD"
							invoked.Description				= "Currency Gain Loss For Inventoried Items" 
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate			= DerivedExchangeDate 
							invoked.DistributionAmount.CurrencyAmount		= blank
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount    = LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount   = LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount  = LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount     	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount      = LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount

							invoked.GLFinanceCodeBlock		                                    = LocalPostToAccount
							invoked.GLTTransactionCodeBlock	                                    = LocalPostToAccount
							invoked.DistributionAccount		                                    = LocalPostToAccount
							invoked.MatchCreated 												= "S"


						invoke CreateGainLossFromBatchNoParms PayablesInvoiceDistribution
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DistributionType 		= "D"
							invoked.PostingOption			= "S"
							invoked.Status					= 1
							invoked.DistributionDate		= DistributionDate
							invoked.GLTGeneralLedgerEvent	= "AD" 
							invoked.Description				= "Currency Gain Loss For Inventoried Items" 
							invoked.GLTransactionAmount						= blank
							invoked.DistributionAmount.ExchangeDate			= DerivedExchangeDate 
							invoked.DistributionAmount.CurrencyAmount		= blank
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	    = NewPayablesInvoiceDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount        = NewPayablesInvoiceDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount       = NewPayablesInvoiceDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= NewPayablesInvoiceDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	    = NewPayablesInvoiceDistribution.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount      = NewPayablesInvoiceDistribution.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount     = NewPayablesInvoiceDistribution.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	    = NewPayablesInvoiceDistribution.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount     	    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount      	= NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		    = NewPayablesInvoiceDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.MatchCreated 													= "S"

							if (ProcessLevel.ReceiptAccrualAccount entered)
								invoked.GLFinanceCodeBlock		                                    = ProcessLevel.ReceiptAccrualAccount
								invoked.GLTTransactionCodeBlock	                                    = ProcessLevel.ReceiptAccrualAccount
								invoked.DistributionAccount		                                    = ProcessLevel.ReceiptAccrualAccount
							else 
								invoked.GLFinanceCodeBlock		                                    = MatchCompanyRel.ReceiptAccrualAccount
								invoked.GLTTransactionCodeBlock	                                    = MatchCompanyRel.ReceiptAccrualAccount
								invoked.DistributionAccount		                                    = MatchCompanyRel.ReceiptAccrualAccount
								

		UpdateFromMatchInvoiceMessage is an Update Action

			default label is untranslatable
			restricted
			bypass field rules
			Action Rules
				include CreateAccrualOffset

				if (TaxEntityRel.ThirdParty.Sabrix)
					for each MatchOneSourceAccruedDistributionsRel
						LocalAmount									= each.DistributionAmount.CurrencyAmount * -1
						LocalTaxCode								= each.TaxCode
						if  (TaxCode entered)
							LocalTaxCode							= TaxCode
						LocalTaxingJurisdiction						= each.PayablesTaxDetailRel.TaxingJurisdiction
						if  (LocalAmount entered)

							invoke Create PayablesInvoiceDistribution
								fill in fields from this instance
									except invoked.TaxCode
									except invoked.TaxableAmount
									except invoked.DistributionAccount
									except invoked.GLFinanceCodeBlock
									except invoked.DistributionCode
								invoked.DistributionType 							= "A"
								invoked.GLTransactionAmount  	  				   	= LocalAmount
								invoked.DistributionAmount.CurrencyAmount		   	= LocalAmount
								invoked.DistributionAmount.KeepRateOnly				= true
								invoked.DistributionDate							= DistributionDate
								invoked.DistributionAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
								invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalAmount
								invoked.TransientTaxingJurisdiction					= LocalTaxingJurisdiction

								if (!TaxEntityRel.UseTaxCodeAccounts)	
									LocalAccrualCode		= TaxEntityRel.AccrualCode
								else
									LocalAccrualCode		= LocalEntityTaxCodeRel.AccrualCode
								if (TaxAccrualCodeDetailRel exists)
									invoked.GLFinanceCodeBlock							= TaxAccrualCodeDetailRel.DistributionAccount
									invoked.DistributionAccount							= TaxAccrualCodeDetailRel.DistributionAccount
								else
									invoked.GLFinanceCodeBlock							= PayablesAccrualCodeDetailRel.DistributionAccount
									invoked.DistributionAccount							= PayablesAccrualCodeDetailRel.DistributionAccount
								invoked.Status										= 1
								invoked.TransientBypassErrorUpdate					= true
				else
				if  (TaxEntityRel.VATRegistrationCountry entered
				and  MatchAccruedTaxVATReverseDistributionsRel exists)

					for each MatchAccruedTaxVATReverseDistributionsRel
						invoke MatchVATAccrualProcessing each
				else
				if (TaxType.Accrued
				or  MatchAccruedTaxDistributionsRel exists)  
					initialize LocalDistributionAmount
					for each MatchAccruedTaxDistributionsRel
						LocalDistributionAmount.CurrencyAmount 								+= each.DistributionAmount.CurrencyAmount * -1
						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1

					if  (TaxCode entered)
						LocalTaxCode								= TaxCode
					else
						LocalTaxCode								= first MatchAccruedTaxDistributionsRel.TaxCode

					if  (LocalAmount not entered
					and  AllowShortPay)
						LocalAmount = TaxAmount * -1

					invoke CreateAccrualOffset PayablesInvoiceDistribution
						fill in fields from this instance
							except invoked.TaxCode
							except invoked.TaxableAmount
							except invoked.DistributionAccount
							except invoked.GLFinanceCodeBlock
							except invoked.DistributionCode
						invoked.DistributionType 							= "A"
						invoked.GLTransactionAmount  	  				   	= LocalDistributionAmount.CurrencyAmount
						invoked.DistributionAmount.CurrencyAmount		   	= LocalDistributionAmount.CurrencyAmount
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount    = LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount   = LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount  = LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
						invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount     	= LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount      = LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.DistributionAmount.KeepRateAndAmount						= true
						invoked.DistributionDate							= DistributionDate
						invoked.DistributionAmount.ExchangeDate				= InvoiceAmount.ExchangeDate 
						invoked.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount

						if (!TaxEntityRel.UseTaxCodeAccounts)	
							LocalAccrualCode		= TaxEntityRel.AccrualCode
						else
							LocalAccrualCode		= LocalEntityTaxCodeRel.AccrualCode
						if (TaxAccrualCodeDetailRel exists)
							invoked.GLFinanceCodeBlock							= TaxAccrualCodeDetailRel.DistributionAccount
							invoked.DistributionAccount							= TaxAccrualCodeDetailRel.DistributionAccount
						else
							invoked.GLFinanceCodeBlock							= PayablesAccrualCodeDetailRel.DistributionAccount
							invoked.DistributionAccount							= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.Status										= 1
						invoked.TransientBypassErrorUpdate					= true

				include AdjustDistributionCurrencyAmounts



		ShortPayAndAccrue is an Instance Action  
			valid when (AllowShortPayAndAccrueAction)
			Parameters
				PerformMatch is Boolean
					default label is "ContinueWithMatch?"
			Action Rules
				confirmation required
					"ThisActionWillDeductTheTaxFromTheInvoiceAmountAndRemoveTheTaxAmount.Continue?"
				constraint (AllowShortPayAndAccrueAction)
					"ActionIsNotAllowed"
				invoke OneSourceShortPayUpdate
				invoke CreateShortPayCommentAction
			Exit Rules
				if (PerformMatch)
					invoke OneSourceMatch


		OneSourceShortPayUpdate is an Update Action
			default label is untranslatable
			restricted
			bypass field rules
			Action Rules

				InvoiceAmount.CurrencyAmount   -= TaxAmount		
				if (InvoiceAmount.CurrencyAmount < TaxableAmount)
					TaxableAmount = InvoiceAmount.CurrencyAmount

				initialize TaxAmount		

				include RefreshCurrenciesForShortPay			

				invoke Update PayablesInvoiceTaxRel		
					invoked.ShortPaid	= true			


				if (AllowableAmountForDiscount entered
				and AllowableAmountForDiscount > InvoiceAmount.CurrencyAmount)
					AllowableAmountForDiscount		= InvoiceAmount.CurrencyAmount
					DiscountAmount.CurrencyAmount 	= AllowableAmountForDiscount * DiscountPercent
					include ProcessTierDiscounts

				invoke UpdatePaymentAmt first PayablesInvoicePaymentRel
					invoked.PaymentAmount.CurrencyAmount	= InvoiceAmount.CurrencyAmount
					invoked.PaymentAmount.ExchangeDate		= InvoiceAmount.ExchangeDate
					invoked.TransientCurrencyRefresh		= true

	   			initialize TotalPaymentAmount										
				initialize TotalPaymentAmount.OldCurrencyAmount						
				TotalPaymentAmount.TransactionTotal = InvoiceAmount.CurrencyAmount	
				TotalPaymentAmount.NewCurrencyAmount = InvoiceAmount				
				TotalPaymentAmount.PerformUpdate	  = true						
				LocalBoolean = TotalPaymentAmount.UpdateTotals						


		FastUpdate is an Update Action
			default label is untranslatable
			restricted
			bypass field rules

		FastUpdateFromPayment is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (InvoiceType != "R")
					Status = 9
				else
					if (IsInvoiceMatched)
						Status = 9

				if (Status = 9)
					invoke TriggerSupplierInvoiceBOD
						invoked.PrmInvoiceOnHold = false
				LastUpdateDate 	= current timestamp
				LastUpdateBy 	= actor

		ResetAfterError is an Instance Action		
			default label is untranslatable
			restricted
			Action Rules
				invoke ClearBackgroundProcessing
				invoke UpdateErrorRecordsAction

		RejectOtherAPDistributionAggregation is an Instance Action
			restricted											
			Action Rules
				if (APDistributionAggregationRejectedRel exists)
					invoke Update APDistributionAggregationRejectedRel
						invoked.Status = 8	
					for each APDistributionAggregationRejectedRel
						invoke CancelPAService each.ResponsibilityMatrixApprovalProcessorRel
						invoke Reject each.ResponsibilityMatrixApprovalProcessorRel

		ManualRejectAPDistributionAggregation is an Instance Action
			restricted											
			Action Rules
				invoke Update APDistributionAggregationRel
					invoked.Status = 7	
				for each APDistributionAggregationRel
					invoke ManualReject each.ResponsibilityMatrixApprovalProcessorRel

		ManualApproveAPDistributionAggregation is an Instance Action
			restricted
			Action Rules
				invoke Update APDistributionAggregationRel
					invoked.Status = 6	
				for each APDistributionAggregationRel
					invoke ManualApprove each.ResponsibilityMatrixApprovalProcessorRel

		CreateSupplierMessageAndDialog is an Instance Action  
			valid when (CreateBySupplierValid)
			Parameters
				ParmDialogMessage       is Alpha size 1000
					default label is "Message"
				ParmDialogAttachment	is an Attachment
					default label is "Attachment"
				ParmPriority            is Numeric 1
					States
						Low				value is 1
						Normal			value is 2
						High			value is 3
					default label is "Priority"
				ParmResponseRequested   is Boolean
					default label is "ResponseRequired"

			Parameter Rules
				ParmDialogMessage
					required

				ParmPriority
					initial value is 2

			Local Fields
				LocalSupplierContactMessage        is a SupplierContactMessage view

			Action Rules

				invoke Create SupplierContactMessage
					assign result to LocalSupplierContactMessage
					invoked.SupplierGroup  					= actor.agent(SupplierSourceId).SupplierGroup
 					invoked.Supplier    			 		= actor.agent(SupplierSourceId).Supplier
					invoked.SupplierSourceId                = actor.agent(SupplierSourceId).SupplierSourceId
					invoked.MessageTitle					= "Dialog for Invoice: " + Invoice
					invoked.MessageText                     = "User Created Message and Dialog for Invoice: " + Invoice
					invoked.Status							= 1
					invoked.Priority						= ParmPriority
					invoked.ReleaseStatus					= 2
					invoked.OriginatingCompany              = Company
					invoked.OriginatingInvoice              = PayablesInvoice

				invoke Create SupplierMessageDialog
					invoked.SupplierGroup  					= actor.agent(SupplierSourceId).SupplierGroup
 					invoked.Supplier    			 		= actor.agent(SupplierSourceId).Supplier
					invoked.SupplierSourceId                = actor.agent(SupplierSourceId).SupplierSourceId
					invoked.SupplierContactMessage 			= LocalSupplierContactMessage.SupplierContactMessage
					invoked.Message                 		= ParmDialogMessage
					invoked.MessageAttachment       		= ParmDialogAttachment
					invoked.ResponseRequested       		= ParmResponseRequested

		CreateMessageAndDialog is an Instance Action  
			default label is "StartASupplierDialog"
			valid when (CanCreateDialog)
			Parameters
				ParmSupplierGroup       is a SupplierGroup
				ParmSupplier            is a Supplier
					default label is "Supplier"
				ParmSupplierContact     is a SupplierSourceId
					default label is "SupplierContact"
				ParmDialogMessage       is Alpha size 1000
					default label is "Message"
				ParmDialogAttachment	is an Attachment
					default label is "Attachment"
				ParmPriority            is Numeric 1
					States
						Low				value is 1
						Normal			value is 2
						High			value is 3
					default label is "Priority"
				ParmResponseRequested   is Boolean
					default label is "ResponseRequired"

			Parameter Rules

				ParmSupplierGroup
					initial value is SupplierGroupRel.SupplierGroup

				ParmSupplier
					if (Vendor.SingleSupplier)
						default to Vendor.first SupplierRel.Supplier

				ParmSupplierContact
					if (Vendor.SingleSupplier
					and DerivedSupplierSourceId entered)
						default to DerivedSupplierSourceId
					else
					if (Vendor.SingleSupplierAndContact)
						default to Vendor.SupplierRel.PrimaryContact.SupplierSourceId

				ParmDialogMessage
					required

				ParmPriority
					initial value is 2

			Local Fields
				LocalSupplierContactMessage        is a SupplierContactMessage view

			Action Rules

				if (!Vendor.SingleSupplier)
					constraint (ParmSupplier entered)
						"MustEnterASupplier"

				if (!Vendor.SingleSupplierAndContact)
					constraint (ParmSupplierContact entered)
						"MustEnterASupplierContact"

				constraint (ParmSupplier.Vendor = Vendor)
					"SupplierNotValidForVendor"

				if (ParmSupplier entered)
					LocalSupplier        = ParmSupplier
				else
					LocalSupplier 		 = Vendor.SupplierRel.Supplier
				LocalSupplierContact = ParmSupplierContact

				constraint (SupplierSourceIdValidRel exists)
					"SupplierContactNotValidForSupplier"

				constraint (SupplierContactHasInvoiceAccess)
					"SupplierContactDoesNotHaveAccessToInvoices"

				invoke Create SupplierContactMessage
					assign result to LocalSupplierContactMessage
					invoked.SupplierGroup  					= ParmSupplierGroup
 					invoked.Supplier    			 		= ParmSupplier
					invoked.SupplierSourceId                = ParmSupplierContact
					invoked.MessageTitle					= "Dialog for Invoice: " + Invoice
					invoked.MessageText                     = "User Created Message and Dialog for Invoice: " + Invoice
					invoked.Status							= 1
					invoked.Priority						= ParmPriority
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = actor.agent(Employee).Employee
					invoked.OriginatingCompany              = Company
					invoked.OriginatingInvoice              = PayablesInvoice

				invoke Create SupplierMessageDialog
					invoked.SupplierGroup  					= ParmSupplierGroup
 					invoked.Supplier    			 		= ParmSupplier
					invoked.SupplierSourceId                = ParmSupplierContact
					invoked.SupplierContactMessage 			= LocalSupplierContactMessage.SupplierContactMessage
					invoked.Message                 		= ParmDialogMessage
					invoked.MessageAttachment       		= ParmDialogAttachment
					invoked.ResponseRequested       		= ParmResponseRequested
					invoked.Origin                          = 1



		OneSourceResetTax is an Instance Action
			valid when (OneSourceResetValid)
			Action Rules

				invoke OneSourceResetDistributions PayablesInvoiceDistribution
					invoked.PrmCompany = Company
					invoked.PrmPayablesInvoice = PayablesInvoice

		ResetAmounts is an Update Action 
			default label is untranslatable
			restricted
			bypass field rules
			Entrance Rules

				TransientAllowAmountUpdate = true
				initialize POTaxAmount
				LocalBoolean = false

				if (ShortPayCommentExists)
					for each PayablesInvoiceCommentRel
						if (each.Title = "Short_Paid")
							invoke Delete each
							end for each

				if (ShortPayCommentExists
				and  TotalDistributionAmount.TransactionTotal != MatchAmount + AddOnChargeAmount + ServiceAmount)
					initialize TotalDistributionAmount
					for each PayablesInvoiceDistributionRel
						if (not each.TaxType.Accrued)
							TotalDistributionAmount.FunctionalTotal += each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							TotalDistributionAmount.TransactionTotal += each.DistributionAmount.CurrencyAmount
							TotalDistributionAmount.AlternateTotal += each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
							TotalDistributionAmount.AlternateTotal2 += each.DistributionAmount.AlternateAmount2
							TotalDistributionAmount.AlternateTotal3 += each.DistributionAmount.AlternateAmount3
							TotalDistributionAmount.ToFunctionalTotal += each.DistributionAmount.ToFunctionalAmount
							TotalDistributionAmount.ProjectTotal += each.DistributionAmount.ProjectAmount
							TotalDistributionAmount.ReportTotal1 += each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
							TotalDistributionAmount.ReportTotal2 += each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
							TotalDistributionAmount.ReportTotal3 += each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
							TotalDistributionAmount.ReportTotal4 += each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
							TotalDistributionAmount.ReportTotal5 += each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

				if  (PayablesInvoiceTaxRel exists
				and (InvoiceAmount.CurrencyAmount 	!= PayablesInvoiceTaxRel.EnteredInvoiceAmount
				or   TaxAmount 						!= PayablesInvoiceTaxRel.EnteredTaxAmount))
					InvoiceAmount.CurrencyAmount   	= PayablesInvoiceTaxRel.EnteredInvoiceAmount
					TaxAmount 						= PayablesInvoiceTaxRel.EnteredTaxAmount
					TaxableAmount					= PayablesInvoiceTaxRel.EnteredTaxableAmount

					include RefreshCurrenciesForShortPay			


					if (AllowableAmountForDiscount entered
					and AllowableAmountForDiscount > InvoiceAmount.CurrencyAmount)
						AllowableAmountForDiscount		= InvoiceAmount.CurrencyAmount
						DiscountAmount.CurrencyAmount 	= AllowableAmountForDiscount * DiscountPercent
						include ProcessTierDiscounts

					invoke UpdatePaymentAmt first PayablesInvoicePaymentRel
						invoked.PaymentAmount.CurrencyAmount	= InvoiceAmount.CurrencyAmount
						invoked.PaymentAmount.ExchangeDate		= InvoiceAmount.ExchangeDate
						invoked.TransientCurrencyRefresh		= true

					initialize TotalPaymentAmount
					initialize TotalPaymentAmount.OldCurrencyAmount
					TotalPaymentAmount.TransactionTotal = InvoiceAmount.CurrencyAmount
					TotalPaymentAmount.NewCurrencyAmount = InvoiceAmount
					TotalPaymentAmount.PerformUpdate	  = true
					LocalBoolean = TotalPaymentAmount.UpdateTotals

				initialize BackgroundProcessing








































		PerformSnapshotUpdates is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				SetCount = NumberOfLinesForSetAction	

				if (CancelSequence	!entered) 
					if (Vendor  		changed
					or  Invoice 		changed
					or  Suffix			changed
					or  CancelSequence 	changed)
						if (instance count of PayablesInvoiceDistribution set < SetCount)	
							invoke UpdateSnapshotFields PayablesInvoiceDistribution set
						else
							invoke UpdateSnapshotFieldsSet PayablesInvoiceDistribution		
								invoked.PrmCompany		= Company							
								invoked.PrmInvoice		= this instance.PayablesInvoice		

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed
				or  CancelSequence 	changed)
					invoke UpdateSnapshotFields PayablesInvoicePayment set

				if (Vendor  		changed)		
					if (instance count of PayablesAssetDetail set < SetCount)			
						invoke UpdateSnapshotFields PayablesAssetDetail set
					else
						invoke UpdateSnapshotFieldsSet PayablesAssetDetail				
							invoked.PrmCompany		= Company							
							invoked.PrmInvoice		= this instance.PayablesInvoice		

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed
				or  CancelSequence 	changed)
					invoke UpdateSnapshotFields PayablesInvoiceDiscount set

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed
				or  CancelSequence 	changed
				or  DueDate			changed)
					if (instance count of MatchInvoiceMessage set < SetCount)			
						invoke UpdateSnapshotFields MatchInvoiceMessage set
					else
						invoke UpdateSnapshotFieldsSet MatchInvoiceMessage				
							invoked.PrmCompany		= Company							
							invoked.PrmInvoice		= this instance.PayablesInvoice		

				if (Invoice 		changed			
				or  Suffix			changed
				or  CancelSequence 	changed)
					if (instance count of PayablesInvoiceAddOnCharge set < SetCount)	
						invoke UpdateSnapshotFields PayablesInvoiceAddOnCharge set
					else
						invoke UpdateSnapshotFieldsSet PayablesInvoiceAddOnCharge		
							invoked.PrmCompany		= Company							
							invoked.PrmInvoice		= this instance.PayablesInvoice		

					if (instance count of PayablesInvoiceAddOnCharge set < SetCount)	
						invoke UpdateSnapshotFields PayablesInvoiceAddOnChargeHistory set
					else
						invoke UpdateSnapshotFieldsSet PayablesInvoiceAddOnCharge		
							invoked.PrmCompany		= Company							
							invoked.PrmInvoice		= this instance.PayablesInvoice		

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed)
					invoke UpdateSnapshotFields InvoiceLineFact set

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed
				or  CancelSequence 	changed)
					if (instance count of PayablesInvoiceDetail set < SetCount)			
						invoke UpdateSnapshotFields PayablesInvoiceDetail set
					else
						invoke UpdateSnapshotFieldsSet PayablesInvoiceDetail			
							invoked.PrmCompany		= Company							
							invoked.PrmInvoice		= this instance.PayablesInvoice		

				if (Vendor  		changed)		
					if (instance count of PayablesInvoiceDetailHistory set < SetCount)	
						invoke UpdateSnapshotFields PayablesInvoiceDetailHistory set
					else
						invoke UpdateSnapshotFieldsSet PayablesInvoiceDetailHistory		
							invoked.PrmCompany		= Company							
							invoked.PrmInvoice		= this instance.PayablesInvoice		

				if (Invoice 		changed
				or  Suffix			changed
				or  CancelSequence 	changed)
					invoke UpdateSnapshotFields PayablesOnHold set

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed
				or  CancelSequence 	changed
				or  DueDate			changed
				or  InvoiceAmount.CurrencyAmount != OldInvoiceAmount)	
					invoke UpdateSnapshotFields MatchReconQueueRel

				if (InvoiceDate		changed
				or  DueDate			changed)
					invoke UpdateSnapshotFields MatchReconQueueRel.MatchWorkInvoiceRel

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed
				or  CancelSequence 	changed)
					if (instance count of PayablesInvoiceWithholding set < SetCount)	
						invoke UpdateSnapshotFields PayablesInvoiceWithholding set
					else
						invoke UpdateSnapshotFieldsSet PayablesInvoiceWithholding		
							invoked.PrmCompany		= Company							
							invoked.PrmInvoice		= this instance.PayablesInvoice		

				if  (MatchAgingInvoiceRel exists)
					invoke UpdateSnapshotFields MatchAgingInvoiceRel

				if (Vendor  		changed
				or  Invoice 		changed
				or  Suffix			changed)
					invoke UpdateSnapshotFields PayablesInvoiceRetainageDistributionsRel

































































		ChangeCreditMemoToInvoice is an Instance Action				
			valid when (IsUnreleasedExpenseCreditMemo)
			completion message is "Invoice<Invoice>HasBeenChangedTo<InvoiceType>"
			Action Rules
				constraint (!InvoiceSource.IntercompanyBilling)
					"CannotChangeCreditMemoToInvoice;CreditMemoIsFrom_\I\C\B"
				invoke Update
					invoked.InvoiceType						= ""
					invoked.InvoiceAmount.CurrencyAmount	*= -1
					initialize TotalTaxableAmount
					if (TermsCode entered)
						initialize invoked.DueDate
						initialize invoked.DiscountAmount
						initialize invoked.DiscountAmount1
						initialize invoked.BaseDiscountAmount1
						initialize invoked.DiscountAmount2
						initialize invoked.BaseDiscountAmount2
						initialize invoked.DiscountAmount3
						initialize invoked.BaseDiscountAmount3
						initialize invoked.AllowableAmountForDiscount	



		ChangeExpenseInvoiceToCreditMemo is an Instance Action			
			default label is "ChangeInvoiceToCreditMemo"
			valid when (IsUnreleasedExpenseInvoice)
			completion message is "Invoice<Invoice>HasBeenChangedTo<InvoiceType>"
			Action Rules
				constraint (!InvoiceSource.IntercompanyBilling)
					"CannotChangeInvoiceToCreditMemo;InvoiceIsFrom_\I\C\B"
				invoke Update
					invoked.InvoiceType						= "C"
					invoked.InvoiceAmount.CurrencyAmount	*= -1
					initialize TotalTaxableAmount
					if (TermsCode entered)
						initialize invoked.DueDate
						initialize invoked.DiscountAmount
						initialize invoked.DiscountAmount1
						initialize invoked.BaseDiscountAmount1
						initialize invoked.DiscountAmount2
						initialize invoked.BaseDiscountAmount2
						initialize invoked.DiscountAmount3
						initialize invoked.BaseDiscountAmount3
						initialize invoked.AllowableAmountForDiscount	



		MassInvoiceRelease is a Set Action		
			Parameters
				PrmCompany						is a PayablesCompany
					default label is "Company"
				PrmGeneralLedgerCompanyGroup 	is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmAuthorityCode				is a PayablesAuthorityCode
					default label is "AuthorityCode"
				VoucherNumberRange
				PrmNumberOfThreads		is Numeric 3
					default label is "NumberOfThreads"
				PrmFinanceResource				is a FinanceResource
					context of HROrganization
					default label is "InvoiceProcessor"
				HROrganization

			Parameter Rules
				PrmCompany
					if (PrmGeneralLedgerCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupRequired"

				PrmGeneralLedgerCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"
					constraint (PrmAuthorityCode not entered)
						"CannotEnterAuthorityCodeIfCompanyGroupEntered"

				VoucherNumberRange.Prefix
					if (VoucherNumberRange.Begin 	entered
					or  VoucherNumberRange.End		entered)
						required
							"VoucherPrefixIsRequiredIfVoucherSequenceEntered"

				VoucherNumberRange.Begin
					if (VoucherNumberRange.End	entered)
						constraint (VoucherNumberRange.Begin <= VoucherNumberRange.End)
							"BeginningVoucherRangeSequenceCannotBeAfterEndingRange"
				
				PrmNumberOfThreads
					initial value is config.MassInvoiceReleaseThreads
					initial value is 6
					default to 1

			Local Fields
				LocalRunGroup	is Numeric 3

			Instance Selection
				where false
		
			Action Rules
				Empty Set Rules

					while (LocalRunGroup < PrmNumberOfThreads)

						invoke MassInvoiceReleaseAction
							resume on error
								display "MassInvRelError:Empty:22:Invoice=<Invoice>"
							invoked.PrmCompany						= PrmCompany
							invoked.PrmGeneralLedgerCompanyGroup	= PrmGeneralLedgerCompanyGroup
							invoked.PrmAuthorityCode				= PrmAuthorityCode
							invoked.VoucherNumberRange				= VoucherNumberRange
							invoked.PrmRunGroup						= LocalRunGroup
							invoked.PrmNumberOfThreads				= PrmNumberOfThreads
							invoked.PrmFinanceResource				= PrmFinanceResource
						LocalRunGroup += 1






		MassInvoiceReleaseAction is a Set Action		//	Changed from "MassInvoiceRelease" via FSM-20321

			restricted
			completion message is "<InvoiceCount>_<InvoicesReleasedMessage>"
			run in background		

			Parameters
				PrmCompany						is a PayablesCompany
				PrmGeneralLedgerCompanyGroup 	is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmAuthorityCode				is a PayablesAuthorityCode
				VoucherNumberRange
				PrmRunGroup						is Numeric 3
				PrmNumberOfThreads				is Numeric 3
				PrmFinanceResource				is like FinanceResource
			Parameter Rules
				PrmCompany
					if (PrmGeneralLedgerCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupRequired"

				PrmGeneralLedgerCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"


				VoucherNumberRange.Prefix
					if (VoucherNumberRange.Begin 	entered
					or  VoucherNumberRange.End		entered)
						required
							"VoucherPrefixIsRequiredIfVoucherSequenceEntered"

				VoucherNumberRange.Begin
					if (VoucherNumberRange.End	entered)
						constraint (VoucherNumberRange.Begin <= VoucherNumberRange.End)
							"BeginningVoucherRangeSequenceCannotBeAfterEndingRange"

			Local Fields
				InvoiceCount	is Numeric 8
				
			Instance Selection
				where  ((PrmNumberOfThreads	<=1
				or      (PayablesInvoice % PrmNumberOfThreads) = PrmRunGroup)

				and 	((PrmCompany entered
				and		 PrmCompany = Company)
				or		 PrmCompany not entered)

				and	    (PrmGeneralLedgerCompanyGroup	not entered
				or      (PrmGeneralLedgerCompanyGroup 	entered
				and      GeneralLedgerCompanyGroup		entered
				and      GeneralLedgerCompanyGroup = PrmGeneralLedgerCompanyGroup
				and      GLCompanyGroupMemberRelExists))

				and    ((PrmAuthorityCode entered
				and		 PrmAuthorityCode = AuthorityCode)
				or		 PrmAuthorityCode not entered)

				and    (!SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice)	

				and    (WithinVoucherNumberRange)

				and    (ReleaseActionValid
				or      SubmitActionValid)		

				and 	(Status.Unreleased
				or		 Status.Amended)

				and 	(!InvoiceErrorsExists
				or		 ProcessOneSourceValid		
				or       ProcessVertexValid)		

				and    ((PrmFinanceResource entered
				and		 PrmFinanceResource = APClerk)
				or		 PrmFinanceResource not entered)

				and		!BudgetEditInProgress)		



			Action Rules
				Empty Set Rules


				Set Rules
					Entrance Rules
						initialize LocalCounter
						initialize InvoiceCount

					Exit Rules

						if (PrmCompany entered)
							LocalFinanceEnterpriseGroup	= PrmCompany.FinanceEnterpriseGroup			

							if (LocalGeneralLedgerSystemCodeRel.EncumbranceOption.Track 			
							or  LocalGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit) 

								invoke ProcessInterfaceBatchEdits BudgetEditBatch
									invoked.PrmFinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup 
									invoked.PrmBusinessClassName 		= "PayablesInvoice"
						else	
							LocalGeneralLedgerCompanyGroup = PrmGeneralLedgerCompanyGroup

							for each LocalGLCompanyGroupMembersRel
								LocalFinanceEnterpriseGroup = each.Company.FinanceEnterpriseGroup	

								if (LocalGeneralLedgerSystemCodeRel.EncumbranceOption.Track
								or  LocalGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)

									invoke ProcessInterfaceBatchEdits BudgetEditBatch
										invoked.PrmFinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup 
										invoked.PrmBusinessClassName 		= "PayablesInvoice"
									end for each

				Instance Rules


					increment LocalCounter
					increment InvoiceCount

					if (LocalCounter > 5)
						commit transaction
						initialize LocalCounter


					include MassInvoiceReleaseEdits		


					if (!InvoiceErrorsExists
					or  ProcessOneSourceValid		
					or  ProcessVertexValid)			

						if (!RoutingRuleFound		
						and RequiresApproval)
							RequiresApproval = false



						if (Status.Unreleased
						and ReleaseActionValid)

							invoke Unreleased.Release
								resume on error

						else
						if (Status.Unreleased
						and SubmitActionValid)

							invoke Unreleased.SubmitForApproval
								resume on error
								invoked.AutoApprovePrm		= DerivedAutoApprove
								invoked.RoutingCodePrm		= DerivedAutoAssignedRoutingCode
								invoked.PrmRoutingCodeGroup	= DerivedAutoAssignedRoutingCodeGroup		

						else
						if (Status.Amended)

							invoke Amended.ReleaseAmendedInvoice
								resume on error









































		PrepaidInvoiceNotReceived is a Set Action
			restricted
			default label is "PrepaidInvoiceNotReceived"
			Parameters


				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup 
				PrmCompany						is a PayablesCompany 
				PrmVendor						is a Vendor
				PrmCompanyGroup					is a GeneralLedgerCompanyGroup 
				PrmVendorLocation 				is a VendorLocation 
				PrmDateRange					is a DateRange 

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup



				PrmCompany
					if (PrmCompanyGroup entered)
						cannot be entered
							"CannotEnterCompanyIfCompanyGroupEntered"
					else
						required

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"
					else
						required

				PrmVendorLocation
					if (PrmVendorLocation entered)
						constraint (PrmVendor entered)
							"CannotEnterVendorLocationWithoutVendorEntered"

				PrmDateRange
					required

			Local Fields
				FoundAPayable 								is Boolean
				FoundOpenReceipt							is Boolean
				LocalSeparatePayment						is a BooleanOverride
				RunDate										is TimeStamp
				ChargebackInvoiceView						is a PayablesInvoice view
				LocalPrepaidInvoiceNotReceivedResultView 	is a PrepaidInvoiceNotReceivedResult view

			Instance Selection

				where	(((PrmCompany 	entered
				and		PrmCompany 		= Company)
				or		PrmCompany 		not entered)

				and		((PrmCompanyGroup			entered
				and		GeneralLedgerCompanyGroup	entered
				and		GeneralLedgerCompanyGroup = PrmCompanyGroup)
				or		PrmCompanyGroup not entered)

				and 	((PrmVendorLocation 	entered
				and		PurchaseFromLocation 	= PrmVendorLocation)
				or		PrmVendorLocation 	not entered)

				and		((PrmVendor		entered
				and		PrmVendor		= Vendor)
				or		PrmVendor		not entered)

				and (NotMatched)

				and Status.Released

				and 	MatchStatus.Unmatched

				and InvoiceType = "R")

			Sort Order

			Action Rules
				Empty Set Rules
					invoke Create PrepaidInvoiceNotReceivedResult
						assign result to LocalPrepaidInvoiceNotReceivedResultView
						invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
						invoked.PrmCompany						= PrmCompany
						invoked.PrmVendor						= PrmVendor
						invoked.PrmCompanyGroup					= PrmCompanyGroup
						invoked.PrmVendorLocation				= PrmVendorLocation
						invoked.PrmDateRange					= PrmDateRange

				Set Rules
					Entrance Rules
						RunDate		= current timestamp
						invoke Create PrepaidInvoiceNotReceivedResult
							assign result to LocalPrepaidInvoiceNotReceivedResultView
							invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
							invoked.PrmCompany						= PrmCompany
							invoked.PrmVendor						= PrmVendor
							invoked.PrmCompanyGroup					= PrmCompanyGroup
							invoked.PrmVendorLocation				= PrmVendorLocation
							invoked.PrmDateRange					= PrmDateRange
							invoked.RunDate							= RunDate

					Exit Rules
						invoke FastUpdate LocalPrepaidInvoiceNotReceivedResultView.PrepaidInvoiceNotReceivedResult
							invoked.Complete = true

				Instance Rules 
					FoundAPayable = false

					for each HistoricalPayablesInvoicePaymentRel
						if (each.PayablesInvoicePayment.VoidSequence = 0
						and each.CheckDate within PrmDateRange)

							if (each.SeparatePayment)
								LocalSeparatePayment = BooleanOverride.Yes
							else
								LocalSeparatePayment = BooleanOverride.No
							FoundAPayable = true

					if (FoundAPayable)
						FoundOpenReceipt = false

						if (OpenReceiptRel exists) 
							if (MatchPrepaymentMethod.PrepayFromInvoice) 
								FoundOpenReceipt = true 
						else 
							LocalReceipt = first OpenReceiptRel.PurchaseOrderReceipt
							for each PayablesInvoiceDetailRel
								LocalMatchDetailKey = each.MatchDetailKey
								if (PrepaidPurchaseOrderReceiptLineRel exists)
									FoundOpenReceipt = true
									end for each

						if (!FoundOpenReceipt)


							invoke GetNextMatchObjectID MatchCompanyRel

							invoke CreateChargeback PayablesInvoice
								assign result to ChargebackInvoiceView
								invoked.InvoiceType								= "C"
								invoked.Suffix									= 111
								invoked.Operator								= "MA168"
								invoked.Invoice									= Invoice
								invoked.Status									= 1
								invoked.MatchProcessType						= "E" 
								invoked.MatchStatus								= MatchStatus.ApprovedNoReceipt

								invoked.MatchInvoice							= MatchInvoice.ExpenseInvoice

								invoked.OverrideSeparatePayment					= LocalSeparatePayment
								invoked.InvoiceSource							= InvoiceSource.EDI
								invoked.MatchObjectID							= MatchCompanyRel.LastMatchObjectID
								invoked.LastUpdateDate							= RunDate
								invoked.LastUpdateBy							= actor
								invoked.Vendor									= this instance.Vendor
								invoked.Invoice									= this instance.Invoice
								invoked.ProcessLevel							= this instance.ProcessLevel
								invoked.InvoiceDate								= this instance.InvoiceDate
								invoked.PurchaseFromLocation					= this instance.PurchaseFromLocation
								invoked.ExternalPurchaseOrder					= this instance.FirstPurchaseOrder
								invoked.Description								= this instance.Description
								invoked.CashCode								= this instance.CashCode
								invoked.BankTransactionCode						= this instance.BankTransactionCode
								invoked.AccrualCode								= this instance.AccrualCode
								invoked.RetainageAccrualCode					= this instance.RetainageAccrualCode
								invoked.MatchObjectID							= this instance.MatchObjectID
								invoked.VendorGroup								= this instance.VendorGroup
								invoked.TermsCode								= this instance.TermsCode
								invoked.InvoiceCurrency							= this instance.InvoiceCurrency
								invoked.DistributionDate						= this instance.DistributionDate
								invoked.PayVendor								= this instance.PayVendor
								invoked.InvoiceGroup							= this instance.InvoiceGroup
								invoked.DueDate									= this instance.InvoiceDate
								invoked.InvoiceAmount.CurrencyAmount			= this instance.InvoiceAmount.CurrencyAmount
								invoked.TaxAmount								= this instance.TotalTaxAmount

							for each PayablesInvoiceDistribution set
								if (each.DistributionType.Distribution)
									invoke CreateFromMatch each
										fill in fields from each
											except invoked.PayablesInvoice
											except invoked.DistributionAmount
											except invoked.Status
											except invoked.DistributionDate
											except invoked.TaxableAmount
											except invoked.UnitAmount
											except invoked.PayablesInvoiceDistributionObjectID
											except invoked.OriginalPOLineDistribution
											except invoked.OriginalContractLineDistribution
											except invoked.TransientPercent
											except invoked.GltObjId
										invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
										invoked.Status								= 1
										invoked.DistributionAmount.KeepRateOnly		= true
										if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
											invoked.GLFinanceCodeBlock				= ProcessLevel.PrepayAccount
											invoked.DistributionAccount				= ProcessLevel.PrepayAccount
										else
											invoked.GLFinanceCodeBlock				= MatchCompanyRel.PrepayAccount
											invoked.DistributionAccount				= MatchCompanyRel.PrepayAccount
										initialize invoked.TransientReferenceToThisInstance
										invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * -1
										invoked.DistributionAmount.KeepRateOnly		= true
										invoked.DistributionAmount.ExchangeDate		= each.DistributionAmount.ExchangeDate
										invoked.GLTransactionAmount					= each.DistributionAmount.CurrencyAmount * -1
										invoked.TaxableAmount						= each.TaxableAmount * -1
										invoked.UnitAmount							= each.UnitAmount * -1

							for each PayablesInvoiceDetailRel
								if  (each.ItemType.Inventoried)
									if  (!each.InvoiceDistributionsForPurchaseOrderLineRel exists)
										invoke CreateFromMatch PayablesInvoiceDistribution
											invoked.Company								= Company
											invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
											invoked.DistributionType					= "D"
											invoked.PurchaseOrder						= each.PurchaseOrder
											invoked.PurchaseOrderLine					= each.PurchaseOrderLine
											invoked.PurchasingContract					= each.Contract
											invoked.ContractLine						= each.ContractLine
											invoked.PayablesInvoiceDetail				= each.PayablesInvoiceDetail
											invoked.Status								= 1
											if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
												invoked.GLFinanceCodeBlock				= ProcessLevel.PrepayAccount
												invoked.DistributionAccount				= ProcessLevel.PrepayAccount
											else
												invoked.GLFinanceCodeBlock				= MatchCompanyRel.PrepayAccount
												invoked.DistributionAccount				= MatchCompanyRel.PrepayAccount
											invoked.DistributionAmount.CurrencyAmount	= each.TotalDistributionAmount * -1
											invoked.GLTransactionAmount					= each.TotalDistributionAmount * -1

									if  (TaxCode entered
									and  !each.TaxDistributionsForPurchaseOrderLineRel exists)
										invoke CreateFromMatch PayablesInvoiceDistribution
											invoked.Company								= Company
											invoked.PayablesInvoice						= ChargebackInvoiceView.PayablesInvoice
											invoked.PurchaseOrder						= each.PurchaseOrder
											invoked.PurchaseOrderLine					= each.PurchaseOrderLine
											invoked.PurchasingContract					= each.Contract
											invoked.ContractLine						= each.ContractLine
											invoked.PayablesInvoiceDetail				= each.PayablesInvoiceDetail
											invoked.Status								= 1
											if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
												invoked.GLFinanceCodeBlock				= ProcessLevel.PrepayAccount
												invoked.DistributionAccount				= ProcessLevel.PrepayAccount
											else
												invoked.GLFinanceCodeBlock				= MatchCompanyRel.PrepayAccount
												invoked.DistributionAccount				= MatchCompanyRel.PrepayAccount
											invoked.DistributionAmount.CurrencyAmount	= each.TaxAmount * -1
											invoked.GLTransactionAmount					= each.TaxAmount * -1
											invoked.TaxCode								= each.TaxCode
											invoked.TaxableAmount						= each.TotalDistributionAmount * -1



























							for each PaymentsNotHistoricalRel
								invoke Update each.PayablesInvoicePayment
									invoked.PayImmediately				= true
									invoked.LastUpdateDate				= RunDate
									invoked.LastUpdateBy				= actor

							invoke GetNextMatchObjectID MatchCompanyRel
							Status 								= 9
							MatchObjectID 						= MatchCompanyRel.LastMatchObjectID
							MatchStatus							= 6
							LastUpdateDate						= RunDate
							LastUpdateBy						= actor





		AutoMatch is a Set Action
			restricted
			default label is "AutoMatching"
			Parameters
				PrmFinanceEnterpriseGroup  		is a FinanceEnterpriseGroup
				PrmCompany                 		is a PayablesCompany
				PrmCompanyGroup					is a GeneralLedgerCompanyGroup
				PrmMatchPoint              		is AlphaUpper size 1
					States
						RuleGroup1 value is "1"
						RuleGroup2 value is "2"
						RuleGroup3 value is "3"
				PrmOverrideInvoiceRuleGroups	is Boolean
				PrmVendorRange					is a VendorNumberRange
				PrmInvoiceProcess          		is Numeric size 1
					States
						ExcludePrepayInvoices     value is 0
						IncludePrepayInvoices     value is 1
						PrepayInvoicesOnly        value is 2
						ExcludeServiceAndDropShip value is 3
				PrmPrepaymentInvoiceMatchRule      is a MatchRule
					context of PrmFinanceEnterpriseGroup
				PrmPrepaymentDetailMatchRule       is a MatchRule
					context of PrmFinanceEnterpriseGroup
				PrmDateType                		is AlphaRight size 1
					States
						DueDate     value is "D"
						InvoiceDate value is "I"
				PrmRunDate             	    	is Date
				PrmUseSystemDate				is Boolean
				PrmDaysBeforeRunDate           	is Numeric size 3
				PrmDaysAfterRunDate            	is Numeric size 3
				PrmExcludeVendors				is a AP146VendorArray
				PrmInterfaceRun					is like PayablesInvoiceInterfaceResult
				PrmSkipDays            	    	is Numeric 3
				PrmSkipDate                		is AlphaRight size 1
					States
						InvoiceDate 			value is "I"
						ReceiptOfInvoiceDate    value is "R"
				PrmSkipOnlyIfNoReceipt			is Boolean
				PrmSummarize					is Numeric 1
					States
						DoNotSummarize			value is 0
						Summarize				value is 1
			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup not entered
					and PrmInterfaceRun not entered)
						required
							"CompanyOrGlobalLedgerCompanyGroupRequired"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterGlobalLedgerCompanyGroupIfCompanyEntered"

				PrmMatchPoint
					required
				PrmInvoiceProcess
					initial value is 0
					default to 0
				PrmDateType
					initial value is "D"
					default to "D"
				PrmSkipDate
					if (PrmSkipDays entered)
						required
							"SkipDateRequiredIfSkipDaysEntered"

			Local Fields
				LocalAutoMatchResultView	is an AutoMatchResult view
				SelectDateRange				is a DateRange
				AutoMatchError				is Boolean
				AutoMatchErrorMessage		is Alpha 200

			Instance Selection
				where (!MatchProcessType.Expense
				and   (PayablesInvoice.Status.Unreleased
				or     PayablesInvoice.Status.Released
				or     PayablesInvoice.Status.Approved)
				and    !InterfaceInProcess
				and    !BudgetEditProcessing.InProcess
				and    InvoiceUnmatched
				and    (PrmCompany not entered
				or      Company	= PrmCompany)
				and	    (PrmCompanyGroup	not entered
				or      (PrmCompanyGroup 	entered
				and      GeneralLedgerCompanyGroup		entered
				and      GeneralLedgerCompanyGroup = PrmCompanyGroup
				and      GLCompanyGroupMemberRelExists))
				and	 	(APClerkEntered
				or	  	 ProcessingTeamEntered
				or       (OriginatingInterfaceRun entered
				and       !RequiresApproval))
				and    (PrmInterfaceRun not entered
				or      OriginatingInterfaceRun	= PrmInterfaceRun)
				and    (PrmVendorRange not entered
				or	    Vendor within PrmVendorRange))

			Sort Order

			Action Rules
				Empty Set Rules
					invoke Create AutoMatchResult
						assign result to LocalAutoMatchResultView
						invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
						invoked.PrmCompany						= PrmCompany
						invoked.PrmCompanyGroup					= PrmCompanyGroup
						invoked.PrmMatchPoint					= PrmMatchPoint
						invoked.PrmOverrideInvoiceRuleGroups	= PrmOverrideInvoiceRuleGroups
						invoked.PrmVendorRange					= PrmVendorRange
						invoked.PrmInvoiceProcess				= PrmInvoiceProcess
						invoked.PrmPrepaymentInvoiceMatchRule	= PrmPrepaymentInvoiceMatchRule
	   					invoked.PrmPrepaymentDetailMatchRule	= PrmPrepaymentDetailMatchRule
						invoked.PrmDateType						= PrmDateType
						invoked.PrmRunDate						= PrmRunDate
						invoked.PrmUseSystemDate				= PrmUseSystemDate
						invoked.PrmDaysBeforeRunDate			= PrmDaysBeforeRunDate
						invoked.PrmDaysAfterRunDate				= PrmDaysAfterRunDate
						invoked.PrmInterfaceRun					= PrmInterfaceRun
			        	invoked.PrmSummarize					= PrmSummarize
						invoked.PrmSkipDays						= PrmSkipDays
						invoked.PrmSkipDate						= PrmSkipDate
						invoked.PrmSkipOnlyIfNoReceipt			= PrmSkipOnlyIfNoReceipt
						invoked.SelectionComplete 				= true
						invoked.ProcessingComplete 				= true
						invoked.MarkedComplete 					= current timestamp 

				Set Rules
					Entrance Rules

						invoke Create AutoMatchResult
							assign result to LocalAutoMatchResultView
							invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
							invoked.PrmCompany						= PrmCompany
							invoked.PrmCompanyGroup					= PrmCompanyGroup
							invoked.PrmMatchPoint					= PrmMatchPoint
							invoked.PrmOverrideInvoiceRuleGroups	= PrmOverrideInvoiceRuleGroups
							invoked.PrmVendorRange					= PrmVendorRange
							invoked.PrmInvoiceProcess				= PrmInvoiceProcess
							invoked.PrmPrepaymentInvoiceMatchRule	= PrmPrepaymentInvoiceMatchRule
							invoked.PrmPrepaymentDetailMatchRule	= PrmPrepaymentDetailMatchRule
							invoked.PrmDateType						= PrmDateType
							invoked.PrmRunDate						= PrmRunDate
							invoked.PrmUseSystemDate				= PrmUseSystemDate
							invoked.PrmDaysBeforeRunDate			= PrmDaysBeforeRunDate
							invoked.PrmDaysAfterRunDate				= PrmDaysAfterRunDate
							invoked.PrmInterfaceRun					= PrmInterfaceRun
			        		invoked.PrmSummarize					= PrmSummarize
							invoked.PrmSkipDays						= PrmSkipDays
							invoked.PrmSkipDate						= PrmSkipDate
							invoked.PrmSkipOnlyIfNoReceipt			= PrmSkipOnlyIfNoReceipt


						if (PrmRunDate entered)
							SelectDateRange.Begin	= PrmRunDate - PrmDaysBeforeRunDate as days
							SelectDateRange.End		= PrmRunDate + PrmDaysAfterRunDate as days
						else
						if (PrmUseSystemDate)
							SelectDateRange.Begin	= current corporate date - PrmDaysBeforeRunDate as days
							SelectDateRange.End		= current corporate date + PrmDaysAfterRunDate as days

					Exit Rules
						invoke FastUpdate LocalAutoMatchResultView.AutoMatchResult
							invoked.SelectionComplete = true

				Instance Rules

					LocalAutoMatchResult = LocalAutoMatchResultView.AutoMatchResult
					LocalPurchaseOrder	 = FirstPurchaseOrder




					initialize AutoMatchError
					initialize AutoMatchErrorMessage

					if (PrmSkipDays entered)
						if (PrmSkipDate.InvoiceDate)
							LocalDaysDiff = current date - InvoiceDate

						else
						if (PrmSkipDate.ReceiptOfInvoiceDate)
							LocalDaysDiff = current date - ReceiptOfInvoiceDate


					if   (PrmExcludeVendors entered
					and  (Vendor = PrmExcludeVendors.Vendor[1]
					or    Vendor = PrmExcludeVendors.Vendor[2]
					or    Vendor = PrmExcludeVendors.Vendor[3]
					or    Vendor = PrmExcludeVendors.Vendor[4]
					or    Vendor = PrmExcludeVendors.Vendor[5]
					or    Vendor = PrmExcludeVendors.Vendor[6]
					or    Vendor = PrmExcludeVendors.Vendor[7]
					or    Vendor = PrmExcludeVendors.Vendor[8]
					or    Vendor = PrmExcludeVendors.Vendor[9]
					or    Vendor = PrmExcludeVendors.Vendor[10]))

						NextSentence = true
					else
					if 	 (PrmSkipDays entered
					and  (!PrmSkipOnlyIfNoReceipt
					or     HasReceiptsInPool = "No")
					and  (LocalDaysDiff < 0   
					or    LocalDaysDiff <= PrmSkipDays))

						NextSentence = true
					else
					if   ((PrmRunDate entered
					or     PrmUseSystemDate)
					and    PrmInterfaceRun not entered
					and    PrmDateType.DueDate
					and    DueDate not within SelectDateRange)
						NextSentence = true
					else
					if   ((PrmRunDate entered
					or     PrmUseSystemDate)
					and    PrmInterfaceRun not entered
					and    PrmDateType.InvoiceDate
					and    InvoiceDate not within SelectDateRange)
						NextSentence = true
					else
					if  (PrmInvoiceProcess.ExcludePrepayInvoices
					and    PrmInterfaceRun not entered
					and (InvoiceType.MatchPrepayment
					or   InvoiceType.DebitMemo))
						NextSentence = true
					else
					if  (PrmInvoiceProcess.PrepayInvoicesOnly
					and    PrmInterfaceRun not entered
					and (!InvoiceType.MatchPrepayment
					and  !InvoiceType.DebitMemo))
						NextSentence = true
					else
					if  (PrmInvoiceProcess.ExcludeServiceAndDropShip
					and    PrmInterfaceRun not entered
					and (MatchProcessType.Service
					or   MatchProcessType.ServiceContract
					or   MatchProcessType.DropShip))
						NextSentence = true
					else
					if (LocalAutoMatchResultInvoiceRel exists)  
						NextSentence = true
					else
					if  (RequiresApproval
					and (Status.Unreleased
					or   Status.PendingApproval))
						NextSentence = true
					else
					if (!RequiresApproval
					and  PrmInterfaceRun not entered 
					and  RoutingRuleFound)		
						RequiresApproval = true
					else
					if (InvoiceSource.SupplierCreated  
            		and SupplierCreatedInvoiceStatus.UnsubmittedSupplierCreatedInvoice)
						NextSentence = true
					else
					if  (PayablesInvoiceDetailRel not exists
					and  PayablesInvoiceSpreadAddOnChargeRel not exists
					and  PayablesInvoiceAddOnChargeRel not exists
					and  MatchAmount not entered)
						MatchErrorType = 2
						invoke Create AutoMatchResultInvoice
							invoked.AutoMatchResult 	= LocalAutoMatchResult
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= PayablesInvoice
							invoked.ErrorMessage 		= MatchInvoiceErrorMessages.NoDetailsMsg
							invoked.SystemOwner			= 1
							invoked.ErrorAmount			= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.MatchStatus			= MatchStatus
							invoked.MatchErrorType 		= 1
					else
					if  (BackgroundProcessing entered)
						MatchErrorType = 2
						invoke Create AutoMatchResultInvoice
							invoked.AutoMatchResult 	= LocalAutoMatchResult
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= PayablesInvoice
							invoked.ErrorMessage 		= MatchInvoiceErrorMessages.CannotMatchBackgroundProcessMsg
							invoked.SystemOwner			= 1
							invoked.ErrorAmount			= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.MatchStatus			= MatchStatus
							invoked.MatchErrorType 		= 1
					else
					if  (MatchStatus = 1)
						MatchErrorType = 2
						invoke Create AutoMatchResultInvoice
							invoked.AutoMatchResult 	= LocalAutoMatchResult
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= PayablesInvoice
							invoked.ErrorMessage 		= MatchInvoiceErrorMessages.POCostMessagesExistMsg //"CannotMatch,PurchaseOrderCostMessageExists"
							invoked.SystemOwner			= 2
							invoked.ErrorAmount			= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.MatchStatus			= MatchStatus
							invoked.MatchErrorType 		= 2
					else
					if  (ServiceAmount > 0
					and  MatchAmount   = 0
					and  !AllowZeroCostInvoice
					and  MatchProcessType.ReceiptMatch)
						invoke Create AutoMatchResultInvoice
							invoked.AutoMatchResult 	= LocalAutoMatchResult
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= PayablesInvoice
							invoked.ErrorMessage 		= MatchInvoiceErrorMessages.ZeroGoodsMsg //"CannotMatch,GoodsAmount=0AndProcessTypeIsReceiptMatch"
							invoked.SystemOwner			= 1
							invoked.ErrorAmount			= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.MatchErrorType 		= 1
					else
					if  (!CostComponentMatch
					and  MatchProcessType.ReceiptMatch
					and  MatchAmount   = 0
					and  !AllowZeroCostInvoice
					and  !InvoiceType.CreditMemo)
						invoke Create AutoMatchResultInvoice
							invoked.AutoMatchResult 	= LocalAutoMatchResult
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= PayablesInvoice
							invoked.ErrorMessage 		= MatchInvoiceErrorMessages.ZeroGoodsMsg //"CannotMatch,GoodsAmount=0AndProcessTypeIsReceiptMatch"
							invoked.SystemOwner			= 1
							invoked.ErrorAmount			= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.MatchErrorType 		= 1
					else
					if  (BypassMatch
					and (MatchProcessType.Service
					or   MatchProcessType.DropShip
					or   MatchProcessType.ServiceContract)
					and  !HasInvoiceLines)
						invoke Create AutoMatchResultInvoice
							invoked.AutoMatchResult 	= LocalAutoMatchResult
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= PayablesInvoice
							invoked.ErrorMessage 		= MatchInvoiceErrorMessages.NoDetailsMsg //"CannotMatch,NoInvoiceDetailsExist"
							invoked.SystemOwner			= 1
							invoked.ErrorAmount			= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.MatchErrorType 		= 1
					else
					if  (!AllowZeroCostInvoice
					and  MatchProcessType.ReceiptMatch
					and  MatchAmount   <= 0
					and  !InvoiceType.CreditMemo)
						NextSentence = true
					else












						invoke Create AutoMatchResultInvoice
							invoked.AutoMatchResult 	= LocalAutoMatchResult
							invoked.Company 			= Company
							invoked.PayablesInvoice 	= PayablesInvoice

						AutoMatchError 			= false


						TransientJobName				= "AUTOMATCH"

						if (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
						and PrmPrepaymentInvoiceMatchRule entered)
							LocalAutoMatchPrepaymentRule = PrmPrepaymentInvoiceMatchRule
						else
						if (PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay
						and PrmPrepaymentDetailMatchRule entered)
							LocalAutoMatchPrepaymentRule = PrmPrepaymentDetailMatchRule

						if (TaxEntityUsesSabrix)
							invoke OneSourceMatchEdits
								resume on error
									AutoMatchError 			= true
									AutoMatchErrorMessage	= error message
						else
							if (CallVertexByDocument)
								TransientBypassBackgroundEdit = true
								TransientBypassOneSource = true

							invoke MatchEdits
								resume on error
									AutoMatchError 			= true
									AutoMatchErrorMessage	= error message
								invoked.InAutoMatch			= true

						if  (AutoMatchError)



							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel
								invoked.ErrorMessage 				= AutoMatchErrorMessage
								invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount
								invoked.MatchErrorType 				= 1
								if  (AutoMatchErrorMessage = MatchInvoiceErrorMessages.NoReceiptsAvailableMsg
								or   AutoMatchErrorMessage = MatchInvoiceErrorMessages.NoOpenLinesOnPurchaseOrderMsg
								or   AutoMatchErrorMessage[1:25] = MatchInvoiceErrorMessages.PurchaseOrderLineClosedMsg[1:25])
									invoked.SystemOwner				= 2

						else

						if  (TaxEntityUsesSabrix)

							if  (!MatchProcessType.ServiceContract
							and  !MatchReferenceNumber entered
							and  LocalAutoMatchResultSamePODiffInvoiceRel exists
							and  LocalAutoMatchResultInvoiceRel.ErrorMessage not entered)

								invoke Update LocalAutoMatchResultInvoiceRel
									if (MatchPrepaymentMethod.PrepayFromInvoice
									and PrmPrepaymentInvoiceMatchRule entered)
										invoked.MatchNotAttempted	= false
									else
										invoked.MatchNotAttempted	= true
							else
							if  (LocalAutoMatchResultInvoiceRel.ErrorMessage not entered)
								BackgroundProcessing = BackgroundProcessing.MatchInvoice

								if  (OneSourceMatchOneCallPerInvoice)
									initialize DistribCount
									for each PayablesInvoiceDistributionDistributionTypeDistributionsRel
										DistribCount += 1
										if (DistribCount > NumberOfLinesForOneSourceMatchProcessByInvoice)
											end for each
										else
										if (each.DistributionAccount.ToAccountingEntity != Company.AccountingEntity)
											DistribCount = NumberOfLinesForOneSourceMatchProcessByInvoice + 1
											end for each




								if (CreditForRebill)

									invoke OneSourceCreditRebillMatch PayablesInvoiceDistribution
										resume on error
											AutoMatchError 			= true
											AutoMatchErrorMessage	= error message
										invoked.PrmCompany = Company
										invoked.PrmPayablesInvoice = PayablesInvoice
										invoked.PrmAutoMatchResult		= LocalAutoMatchResult
								else
								if  (OneSourceMatchOneCallPerInvoice
								and  (DistribCount < NumberOfLinesForOneSourceMatchProcessByInvoice))


									invoke LoadOneSourceForMatch PayablesInvoiceDistribution
										resume on error
											AutoMatchError 			= true
											AutoMatchErrorMessage	= error message
										invoked.PrmCompany = Company
										invoked.PrmPayablesInvoice = PayablesInvoice
										invoked.PrmAutoMatchResult		= LocalAutoMatchResult
								else
								if (TaxConfigurationRel.OneSourceVersionType.Generic)

									invoke ProcessOneSourceForMatch PayablesInvoiceDetail
										resume on error
											AutoMatchError 			= true
											AutoMatchErrorMessage	= error message
										invoked.PrmCompany = Company
										invoked.PrmPayablesInvoice = PayablesInvoice
										invoked.PrmAutoMatchResult		= LocalAutoMatchResult
								else
									invoke ProcessOneSourceForMatch PayablesInvoiceDistribution
										resume on error
											AutoMatchError 			= true
											AutoMatchErrorMessage	= error message
										invoked.PrmCompany = Company
										invoked.PrmPayablesInvoice = PayablesInvoice
										invoked.PrmAutoMatchResult		= LocalAutoMatchResult

								if  (AutoMatchError)

									invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel
										invoked.ErrorMessage 				= AutoMatchErrorMessage
										invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount

									invoke Update NewMatchWork.MatchWork
										initialize invoked.LinkedAutoMatchResult


						else

						if  (CallVertexByDocument 
						and  !CreditForRebill
						and  PayablesInvoice.LastDistribution < NumberOfLinesForVertexMatchProcessByInvoice)

							if  (!MatchProcessType.ServiceContract
							and  !MatchReferenceNumber entered
							and  LocalAutoMatchResultSamePODiffInvoiceRel exists
							and  LocalAutoMatchResultInvoiceRel.ErrorMessage not entered)

								invoke Update LocalAutoMatchResultInvoiceRel
									if (MatchPrepaymentMethod.PrepayFromInvoice
									and PrmPrepaymentInvoiceMatchRule entered)
										invoked.MatchNotAttempted	= false
									else
										invoked.MatchNotAttempted	= true
							else
							if  (LocalAutoMatchResultInvoiceRel.ErrorMessage not entered)
								BackgroundProcessing = BackgroundProcessing.MatchInvoice

								if  (DetailCountExceedsVertexOneCallSetting
								and  !HasUnprocessedThirdPartyTaxDetails)
									invoke ProcessVertexSet PayablesInvoiceDetail
										invoked.PrmCompany 			= Company
										invoked.PrmPayablesInvoice 	= PayablesInvoice
										invoked.PrmMatchFrom 		= 1 
										invoked.PrmAutoMatchResult	= LocalAutoMatchResult
								else 
									invoke ProcessVertexForMatch PayablesInvoiceDetail
										resume on error
											AutoMatchError 			= true
											AutoMatchErrorMessage	= error message
										invoked.PrmCompany 			= Company
										invoked.PrmPayablesInvoice 	= PayablesInvoice
										invoked.PrmAutoMatchResult	= LocalAutoMatchResult

								if  (AutoMatchError)

									invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel
										invoked.ErrorMessage 				= AutoMatchErrorMessage
										invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount

									invoke Update NewMatchWork.MatchWork
										initialize invoked.LinkedAutoMatchResult
						else

						if  (MatchPrepaymentMethod.PrepayFromInvoice
						and  LocalAutoMatchResultSamePODiffInvoiceRel exists)
							NextSentence = true 
						else 
							if  (MatchReconQueueRel exists
							and  MatchReconQueueRel.MatchWork entered)
								invoke PurgeDetail MatchWorkRel
								invoke Purge MatchWorkRel
								invoke FastUpdate MatchReconQueueRel
									initialize invoked.MatchWork


							invoke CreateOnly MatchWork
								assign result to NewMatchWork
								invoked.Company						= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.MatchPoint					= PrmMatchPoint
								invoked.ProcessMode					= "B"
								invoked.DocumentType				= "I"
								invoked.LinkedAutoMatchResult		= LocalAutoMatchResult

								if (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
								and PrmPrepaymentInvoiceMatchRule entered)
									invoked.MatchRule = PrmPrepaymentInvoiceMatchRule
								else
								if (PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay
								and PrmPrepaymentDetailMatchRule entered)
									invoked.MatchRule = PrmPrepaymentDetailMatchRule


							if   (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
							or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								if  (!MatchReconQueueRel exists)

									invoke CreateForBudgetProcessing MatchReconQueue
										invoked.Company				= Company
										invoked.PayablesInvoice		= PayablesInvoice
										invoked.MatchWork			= NewMatchWork.MatchWork
								else
								if  (MatchReconQueueRel.MatchWork not entered)

									invoke FastUpdate MatchReconQueueRel
										invoked.MatchWork			= NewMatchWork.MatchWork
							else
							if  (MatchReconQueueRel exists)
								invoke FastUpdate MatchReconQueueRel
									invoked.MatchWork			= NewMatchWork.MatchWork



							if  (!MatchProcessType.ServiceContract
							and  !MatchReferenceNumber entered
							and  LocalAutoMatchResultSamePODiffInvoiceRel exists
							and  LocalAutoMatchResultInvoiceRel.ErrorMessage not entered)

								invoke Update LocalAutoMatchResultInvoiceRel
									if (MatchPrepaymentMethod.PrepayFromInvoice
									and PrmPrepaymentInvoiceMatchRule entered)
										invoked.MatchNotAttempted	= false
									else
										invoked.MatchNotAttempted	= true
							else
							if  (LocalAutoMatchResultInvoiceRel.ErrorMessage not entered)



								BackgroundProcessing = BackgroundProcessing.MatchInvoice

								invoke BatchMatch NewMatchWork.MatchWork
									resume on error
										AutoMatchError 			= true
										AutoMatchErrorMessage	= error message

									invoked.PrmCompany 					= Company
									invoked.PrmInvoice 					= PayablesInvoice
									invoked.PrmMatchWork 				= NewMatchWork.MatchWork
									invoked.PrmAutoMatchResult			= LocalAutoMatchResult


								if  (AutoMatchError)

									invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel
										invoked.ErrorMessage 				= AutoMatchErrorMessage
										invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount

									invoke Update NewMatchWork.MatchWork
										initialize invoked.LinkedAutoMatchResult




		InvoiceHoldMassUpdate is a Set Action


			completion message is "<InvoiceCount>_<LocalCompletionMessage>"
			run in foreground	




			Parameters
				PrmVendorGroup		is a VendorGroup
				PrmPayGroup			is a PayGroup
					context of PrmVendorGroup
				PrmCompany			is a PayablesCompany
				PrmInvoiceGroup		is a PayablesInvoice group
				PrmVendorClass		is a VendorClass
					context of PrmVendorGroup
				PrmVendor			is a Vendor
					context of PrmVendorGroup
				PrmPurchaseOrder	is a PurchaseOrder
				PrmHoldAction		is Numeric size 1
					States
						AddHold		value is "0"
						RemoveHold	value is "1"
				PrmHoldCode			is a PayablesHoldCode
					context of PrmVendorGroup
				PrmStatus           is Numeric size 1	
					States
						Both		value is "0"
						Unreleased	value is "1"
						Released	value is "2"
				PrmInvoiceType		is Numeric size 1	
					States
						All					value is "0"
						Invoice				value is "1"
						CreditMemo			value is "2"
						DebitMemo			value is "3"
						PrepaymentCredit	value is "4"
				PrmAmount			is a CurrencyAmount

			Parameter Rules
				PrmCompany
					if (PrmVendorGroup 	not entered
					and	PrmPayGroup 	not entered
					and PrmInvoiceGroup not entered)
						required
							"Company,VendorGroup,PayGroupOrInvoiceGroupIsRequired"

				PrmVendorGroup
					if (PrmCompany entered)
						default to PrmCompany.VendorGroup
						constraint (PrmCompany.VendorGroup = PrmVendorGroup)
							"EnteredVendorGroupMustEqualVendorGroupOnEnteredCompany"
					if (PrmPayGroup entered)
						required
							"VendorGroupIsRequiredWithPayGroup"



				PrmPayGroup
					if (PrmCompany entered)
						constraint (PrmCompany.PayGroup = PrmPayGroup)
							"EnteredPayGroupMustEqualPayGroupOnEnteredCompany"

				PrmVendorClass
					if (PrmVendor entered)
						cannot be entered
							"CannotEnterBothVendorClassAndVendor"

				PrmVendor
					if (PrmVendorClass not entered)
						required
							"MustEnterVendorClassOrVendor"

				PrmHoldCode
					if (PrmHoldAction.AddHold)
						required
							"HoldCodeRequiredForAddHoldAction"

				PrmHoldAction
					if (PrmHoldAction.AddHold)
						LocalCompletionMessage = InvoicesPutOnHoldMessage
					else
						LocalCompletionMessage = InvoicesTakenOffHoldMessage

			Instance Selection
				where (((PrmCompany entered
				and      PrmCompany = Company)
				or       PrmCompany not entered)

				and    ((PrmVendorGroup entered
				and		 PrmVendorGroup = VendorGroup)
				or       PrmVendorGroup not entered)

				and    ((PrmPayGroup entered
				and		 PrmPayGroup = PayGroup)
				or    	 PrmPayGroup not entered)

				and    ((PrmInvoiceGroup entered
				and		 PayablesInvoice within PrmInvoiceGroup)
				or       PrmInvoiceGroup not entered)

				and    ((PrmVendorClass entered
				and  	 PrmVendorClass = Vendor.VendorClass)
				or		 PrmVendorClass not entered)

				and    ((PrmVendor entered
				and  	 PrmVendor = Vendor)
				or		 PrmVendor not entered)

				and    ((PrmStatus.Both
				and     (Status.Unreleased
				or       Status.Released))
				or      (PrmStatus.Unreleased
				and      Status.Unreleased)
				or      (PrmStatus.Released
				and      Status.Released))

				and    ((PrmInvoiceType.Invoice
				and      InvoiceType.Invoice)
				or	    (PrmInvoiceType.CreditMemo
				and      InvoiceType.CreditMemo)
				or	    (PrmInvoiceType.DebitMemo
				and      InvoiceType.DebitMemo)
				or	    (PrmInvoiceType.PrepaymentCredit
				and      InvoiceType.PrepaymentCredit)
				or		(PrmInvoiceType.All
				and     (InvoiceType.Invoice
				or       InvoiceType.CreditMemo
				or       InvoiceType.DebitMemo
				or		 InvoiceType.PrepaymentCredit)))

				and    ((PrmAmount entered
				and      PrmAmount <= InvoiceAmount.CurrencyAmount)
				or       PrmAmount not entered)

				and    ((PrmPurchaseOrder entered
				and      PrmPurchaseOrder = FirstPurchaseOrder)
				or		 PrmPurchaseOrder not entered)

				and    ((PrmHoldAction.AddHold
				and      IsHoldable)
				or      (PrmHoldAction.RemoveHold
				and      IsOnHold
				and    ((PrmHoldCode entered
				and      InvoiceHoldCode = PrmHoldCode)
				or       PrmHoldCode not entered))))


			Local Fields
				InvoiceCount is Numeric 8

			Action Rules
				Empty Set Rules
					LocalCompletionMessage = InvoicesFoundToProcessMessage

				Instance Rules
					if (PrmHoldAction.AddHold)
						invoke PutInvoiceOnHold
							resume on error
							invoked.HoldCode = PrmHoldCode
					else
						invoke TakeInvoiceOffHold
							resume on error
					increment InvoiceCount





		PutInvoiceOnHold is an Instance Action

			valid when (IsManualHoldable)
			completion message is "<InvoiceIsNowOnHoldViaHoldCode>:<HoldCode>"
			Parameters
				HoldCode is a PayablesHoldCode
			Parameter Rules
				HoldCode
					required
					if (IsPrepaymentType)
						constraint (HoldCode.HoldOnInvoice entered)
							"HoldCodeTypeIsNotValidForPrepayments"			
					else
						constraint (HoldCode.HoldOnInvoice entered)
							"HoldCodeTypeIsNotForInvoicesOrPayments"		
			Action Rules







				constraint (IsManualHoldable				
				or         (invoking action   = "PayablesInvoiceDistribution.CreateTaxDistributions"	
				or          initiating action = "PayablesInvoiceDistribution.CreateTaxDistributions"	
				and         HoldCode          = Company.VendorGroup.TaxToleranceHoldCode)				
				or         (initiating action = "PayablesInvoiceDetail.ProcessOneSourceForMatchPart2"	
				and         HoldCode          = Company.VendorGroup.TaxToleranceHoldCode)				
				or         (initiating action = "PayablesInvoiceDetail.ProcessOneSourceForMatch"	    
				and         HoldCode          = Company.VendorGroup.TaxToleranceHoldCode)				
				or			initiating action = "PayablesInvoiceImport.InterfaceInvoices")				
					"Invoice<Invoice>ForVendor<Vendor>IsNotEligibleToBePutOnHold"

				constraint (!InvoiceSource.IntercompanyBilling)
					"InvoiceIsNotEligibleToBePutOnHold;InvoiceIsFrom_\I\C\B"

				if (HoldCode.HoldOnInvoice.PermanentHold
				and any OpenPayablesInvoicePaymentRel.CashRequirementsResult entered)
					confirmation required		
						"InvoiceIsIncludedInPaymentCycle.PuttingItOnHoldWillRemoveItFromThePaymentCycle.Continue?"




				for each OpenPayablesInvoicePaymentRel	
					invoke PutOnHold each
						invoked.InvoiceHoldCode 	= HoldCode
				LocalHoldCode = HoldCode


				if (!PayablesHoldCodeRel.InUse)
					invoke SetAsInUse PayablesHoldCodeRel


		TakeInvoiceOffHold is an Instance Action

			valid when (IsOnHold)
			completion message is "<InvoiceIsAvailableForPayment>"
			Action Rules

				for each PayablesInvoicePaymentIsOnHoldRel
					invoke TakeOffHold each
				if (PayablesInvoiceErrorRel.ErrorType.InvoiceOnTaxToleranceHold)					
					LocalErrorType = PayablesInvoiceErrorRel.ErrorType.InvoiceOnTaxToleranceHold	
					invoke Purge PayablesInvoiceErrorLocalRel										




		UpdateDefaultIncomeCode is an Instance Action     

			default label is untranslatable
			valid when (IsIncomeCodeUpdatable)
			restricted		
			completion message is "<IncomeCodeUpdated>:<IncomeCode>"
			Parameters
				DefaultIncomeCode	is a PayablesIncomeCode
			Action Rules
				IncomeCode = DefaultIncomeCode



		UpdateDiversityCode is an Instance Action



			valid when (UpdateDiversityCodeValid)
			Parameters
				NewDiversityCode	is a PayablesDiversityCode
			Action Rules
				DiversityCode	= NewDiversityCode
				if (DiversityCode entered)	
					if (Vendor.ValidateDiversityDates)
						constraint (ValidVendorDiversity)
							"DiversityCodeDoesNotExistForVendorOrVendorLocation"    
						if (VendorLocationDiversityRel exists)
							constraint (last VendorLocationDiversityRel.DiversityEffectiveDate <= InvoiceDate)
								"InvoiceDateOutsideDiversityCodeCertificationDateRange" 
							constraint (last VendorLocationDiversityRel.DiversityExpirationDate >= InvoiceDate)
								"InvoiceDateOutsideDiversityCodeCertificationDateRange" 
						else
							constraint (last VendorDiversityRel.DiversityEffectiveDate <= InvoiceDate)
								"InvoiceDateOutsideDiversityCodeCertificationDateRange" 
							constraint (last VendorDiversityRel.DiversityExpirationDate >= InvoiceDate)
								"InvoiceDateOutsideDiversityCodeCertificationDateRange" 



		UpdateRecurringInvoice is an Instance Action

			default label is untranslatable
			completion message is "RecurringInvoiceUpdateComplete"
			restricted
			valid when (IsRecurrable)
			Parameters
				NumberOfRecurrences		is Numeric 3
				RecurrenceFrequency		is a RecurringFrequency
			Parameter Rules
				NumberOfRecurrences
					if (!Status.Unreleased
					and !Status.PendingApproval)
						required
							"CannotChangeReleasedRecurringInvoiceToNon-Recurring;MustCancelInvoice"
					if (RecurrenceFrequency entered)
						required

				RecurrenceFrequency
					if (NumberOfRecurrences > 1)
						required
					else
						cannot be entered
							"RecurringFrequencyNotAllowedForOnlyOneOccurence"

			Action Rules
				if (Status.Unreleased
				or  Status.PendingApproval)
					if (NumberOfRecurrences > 1)
						increment Suffix
					else
						initialize Suffix
					for each PayablesInvoicePaymentRel
						invoke FastUpdate each
							invoked.Suffix	= Suffix
					for each PayablesInvoiceDistributionRel
						invoke UpdateFromHeader each
							invoked.Suffix	= Suffix
















































		UpdatePIT is an Instance Action		

			default label is untranslatable
			restricted
			Parameters
				Function				is Numeric 1
					States
						Create		value is 1
						Update		value is 2
						Initialize	value is 3
						Delete		value is 4
				PrmLinked				is Numeric 1
					States
						Unchanged	value is 0
						True		value is 1
						False		value is 2
				PrmVATRevChg			is Numeric 1
					States
						Unchanged	value is 0
						True		value is 1
						False		value is 2
				PrmShortPaid			is Numeric 1
					States
						Unchanged	value is 0
						True		value is 1
						False		value is 2
				PrmTaxCode				is like TaxCode
				PrmEntInvoiceAmt		is a CurrencyAmount
				PrmEntTaxAmt			is a CurrencyAmount
				PrmEntTaxableAmt		is a CurrencyAmount
				PrmEntTaxCategory		is a ProductTaxCategory
				PrmTaxCategory			is a ProductTaxCategory
				PrmTaxPointDate			is Date
				PrmCalcTaxableAmt		is a CurrencyAmount		
				PrmCalcTaxAmt			is a CurrencyAmount
				PrmTaxRate				is a ChrgRate
				PrmTaxMethod			is a TaxMethod
				PrmTaxTolerance			is a PayablesTaxTolerance
				PrmTaxTolOvrrd			is Numeric 1
					States
						Unchanged	value is 0
						True		value is 1
						False		value is 2
				PrmTaxResult			is Text
				PrmTaxDetails			is a TaxArrayOutput
				PrmPointOfTitleTransfer	is a PointOfTitleTransfer	
			Parameter Rules
				Function
					required

			Action Rules






















				if (Function.Create
				and PayablesInvoiceTaxRel not exist)	

					invoke Update PayablesInvoiceTaxRel
						invoked.EnteredInvoiceAmount	= InvoiceAmount.CurrencyAmount
						invoked.TaxCode					= LocalPTXEntTaxCode
						invoked.EnteredTaxAmount		= LocalPTXEntTaxAmount
						invoked.EnteredTaxableAmount	= LocalPTXEntTaxableAmount
						invoked.EnteredTaxCategory		= LocalPTXEntTaxCategory
						invoked.LinkedToDistributions	= TransientLineTax
						invoked.TaxPointDate			= DerivedTaxPointDate
						invoked.TaxMethod				= DerivedTaxMethodInvOrAcc
						invoked.TaxSystemTaxAmount		= CalculateTax.OutputTotalTaxAmount		
						invoked.TaxDetails.TaxableAmount = LocalPTXTaxableAmount				
						invoked.TaxSystemTaxableAmount	= LocalPTXTaxableAmount					
						invoked.TaxRate					= PrmTaxRate							
						invoked.PointOfTitleTransfer	= TransientPointOfTitleTransfer			

				if (Function.Update)

					invoke Update PayablesInvoiceTaxRel

						if (PrmEntInvoiceAmt entered)
							invoked.EnteredInvoiceAmount	= PrmEntInvoiceAmt
						if (PrmEntTaxAmt entered)
							invoked.EnteredTaxAmount		= PrmEntTaxAmt
						if (PrmEntTaxableAmt entered)
							invoked.EnteredTaxableAmount	= PrmEntTaxableAmt
						if (PrmEntTaxCategory entered)
							invoked.EnteredTaxCategory		= PrmEntTaxCategory
						if (PrmPointOfTitleTransfer entered)
							invoked.PointOfTitleTransfer	= PrmPointOfTitleTransfer	

						if (PrmTaxCode entered)
							invoked.TaxCode					= PrmTaxCode
						if (PrmTaxCategory entered)
							invoked.ProductTaxCategory		= PrmTaxCategory
						if (PrmTaxPointDate entered)
							invoked.TaxPointDate			= PrmTaxPointDate
						if (PrmTaxMethod entered)
							invoked.TaxMethod				= PrmTaxMethod
						else
							if (this instance.PayablesInvoiceTaxRel.TaxMethod not entered)
								invoked.TaxMethod			= DerivedTaxMethodInvOrAcc
						if (PrmCalcTaxAmt entered)
							invoked.TaxSystemTaxAmount		= PrmCalcTaxAmt
						if (PrmCalcTaxableAmt entered)				
							invoked.TaxSystemTaxableAmount	= PrmCalcTaxableAmt
						if (PrmTaxRate entered)
							invoked.TaxRate					= PrmTaxRate
						if (PrmLinked.True)
							invoked.LinkedToDistributions	= true
						if (PrmLinked.False)
							invoked.LinkedToDistributions	= false
						if (PrmVATRevChg.True)
							invoked.VATReverseCharge		= true
						if (PrmVATRevChg.False)
							invoked.VATReverseCharge		= false
						if (PrmShortPaid.True)
							invoked.ShortPaid				= true
						if (PrmShortPaid.False)
							invoked.ShortPaid				= false
						if (PrmTaxTolerance entered)
							invoked.PayablesTaxTolerance	= PrmTaxTolerance
						if (PrmTaxTolOvrrd.True)
							invoked.TaxToleranceOverridden	= true
						if (PrmTaxTolOvrrd.False)
							invoked.TaxToleranceOverridden	= false
						if (PrmTaxResult entered)
							invoked.TaxResult				= PrmTaxResult
						if (PrmTaxDetails entered)
							invoked.TaxDetails				= PrmTaxDetails

				if (Function.Initialize)

					invoke Update PayablesInvoiceTaxRel
						initialize invoked.EnteredTaxAmount
						initialize invoked.EnteredTaxableAmount
						initialize invoked.EnteredTaxCategory
						initialize invoked.TaxPointDate
						initialize invoked.ProductTaxCategory
						initialize invoked.PointOfTitleTransfer		
						initialize invoked.TaxSystemTaxAmount
						initialize invoked.TaxRate
						initialize invoked.TaxMethod
						initialize invoked.LinkedToDistributions
						initialize invoked.VATReverseCharge
						initialize invoked.TaxDetails.TaxableAmount	
						initialize invoked.TaxCode					



				if (Function.Delete)

					invoke Delete PayablesInvoiceTaxRel

				include DisplayPayablesInvoiceTax



		RemoveManualPayment is an Instance Action

			default label is untranslatable
			completion message is "ManualPaymentRemoved-ClickRefreshToUpdateDisplay"
			restricted
			refresh and lock this instance
			valid when (HasManualPaymentAvailableForDelete)
			Action Rules
				invoke RemoveManualPaymentInfo first PaymentsHaveBeenAppliedRel
				invoke FastUpdate
					LastUpdateDate 	= current timestamp
					LastUpdateBy 	= actor


		RebuildCommitmentTotals is an Instance Action

			restricted
			Parameters
				IsBatch        is Boolean

			Action Rules

				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				for each PayablesInvoiceDistributionRel
					invoke RecalculateCommitmentAmounts each
					increment LocalTransactionCount
					if (LocalTransactionCount > 50)
						commit transaction
						initialize LocalTransactionCount


				invoke EditTotalsRoute BudgetTemplateGroupTotal
					invoked.PrmFinanceEnterpriseGroup    										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmBudgetEditGroup           										= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesCompany 	= Company
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesInvoice	= PayablesInvoice
					invoked.PrmMode																= BudgetEditMode.Hard	
					invoked.PrmBusinessClassName												= "PayablesInvoice"
					invoked.PrmEditContext              										= "Release"
					if ((OriginatingInterfaceRun entered
					and  OriginatingInterfaceRun.Status.InProcess)
					or   IsBatch)
						invoked.PrmIsBatch	= true



		SetupSplitPayments is an Instance Action		

			completion message is "PaymentSplitComplete"
			valid when (IsSplitable)					
			restricted
			Parameters
				SplitNumber			is Numeric 3
				SplitSchedule		is a SplitPaymentSchedule


			Parameter Rules
				SplitNumber
					required
				SplitSchedule
					if (SplitNumber > 1)
						required
					else
						cannot be entered

			Local Fields
				TotalDiscount			is an InternationalAmount
				DiscountDays			is Numeric 3
				SplitDueDate			is Date 
				SplitDiscExchDate		is an ExchangeDate






				DiscountTaken			is Boolean


			Entrance Rules
				constraint (NumberOfSplitPayments != SplitNumber
				or			SplitPaymentSchedule != SplitSchedule)
					"MustChangeEitherSplitNumberOrSplitScheduleOrBoth"

				if (Status.Released)	
					constraint (RetainageAmount = 0)
						"CannotSplitARetainageInvoice"        
					constraint (DiscountAmount1 = 0
					and			DiscountAmount2 = 0
					and			DiscountAmount3 = 0)
						"CannotSplitAMulti-tierDiscount"	   
					constraint (InvoiceType.Invoice
					or 			InvoiceType.CreditMemo
					or 			InvoiceType.PrepaymentCredit
					or			InvoiceType.DebitMemo
					or			InvoiceType.MatchPrepayment)
						"CannotSplitThisInvoiceType"	       
					constraint (!InvoiceSource.Payroll
					and			!InvoiceSource.Tax
					and			!InvoiceSource.Garnishment)
						"CannotSplitAn_\H\RInvoice"	   


				if (!MatchProcessType.Expense)
					constraint (!Company.BestTerms)
						"CannotSplitMatchInvoiceWhenUsing_\Best_\Terms" 	     
				constraint (NumberOfRecurringInvoices <= 1)
					"CannotSplitARecurringInvoice"	  


				constraint (all MultiplePayablesInvoicePaymentRel.Status < 2)
					"CannotSplit;PaymentHasBeenApplied"	 



				DiscountDays 		= DueDate - DiscountDate
				SplitAmount	 		= InvoiceAmount.CurrencyAmount / SplitNumber
				SplitAmount			= RoundedSplitAmount

				TotalDiscount		= DiscountAmount.CurrencyAmount
				if (TotalDiscount < 0)
					TotalDiscount *= -1
				SplitDiscount	 	= TotalDiscount	/ SplitNumber
				SplitDiscount		= RoundedSplitDiscount
				SplitDueDate		= DueDate
				SplitDiscExchDate	= DiscountAmount.ExchangeDate
				DiscountTaken		= false
				SplitRevalueAmount	= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount / SplitNumber
				SplitRevalueAmount	= RoundedSplitRevalueAmount
				if (DerivedReportableAmount != 0)
					SplitReportable = DerivedReportableAmount / SplitNumber
					SplitReportable = RoundedSplitReportable

				TranAdjustment		= (InvoiceAmount.CurrencyAmount - (SplitAmount * SplitNumber))
				DiscAdjustment		= (DiscountAmount.CurrencyAmount - (SplitDiscount * SplitNumber))
				TranAdjustment		= RoundedTranAdjustment
				DiscAdjustment		= RoundedDiscAdjustment

			Action Rules
				for each PayablesOnHoldPaymentRel
					invoke Delete each
				for each OpenPayablesInvoicePaymentRel
					invoke Delete each
				initialize LastPaymentSequence
				initialize TotalPaymentAmount	
				if (SplitNumber > 1)
					NumberOfSplitPayments 	= SplitNumber
				else
					initialize NumberOfSplitPayments
				SplitPaymentSchedule 	= SplitSchedule
				LoopCounter = 1
				while (LoopCounter <= SplitNumber)
					invoke Create PayablesInvoicePayment
						fill in fields from this instance
						invoked.InvoiceCurrency					= InvoiceCurrency
						invoked.VendorClass						= Vendor.VendorClass
						invoked.ProcessGroup					= Vendor.PayablesProcessGroup
						invoked.DiscountLost					= false
						invoked.DueDate							= SplitDueDate
						invoked.DiscountCode					= DiscountCode
						invoked.DiscountPercent					= DiscountPercent
						invoked.Company							= Company
						invoked.ProcessLevel					= ProcessLevel
						invoked.Vendor							= Vendor
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.PayablesInvoicePayment.VoidSequence = blank
						invoked.PayVendor						= PayVendor			
						invoked.RemitToCode						= RemitToCode
						if (LoopCounter = 1)
							invoked.PaymentAmount.CurrencyAmount	= SplitAmount + TranAdjustment
						else
							invoked.PaymentAmount.CurrencyAmount	= SplitAmount
						invoked.PaymentAmount.ExchangeDate		= InvoiceAmount.ExchangeDate 
						if (RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							invoked.RevaluedBaseAmount.CurrencyAmount							= SplitAmount
							invoked.RevaluedBaseAmount.ExchangeDate								= RevaluedBaseAmount.ExchangeDate
							invoked.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= SplitRevalueAmount
							invoked.RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate		= RevaluedBaseAmount.FunctionalAmount.EnteredCurrencyRate
						if (TotalDiscount entered)
							if (TotalDiscount < SplitAmount)	
								if (!DiscountTaken)
									invoked.DiscountAmount.CurrencyAmount	= TotalDiscount
									invoked.DiscountAmount.ExchangeDate		= InvoiceAmount.ExchangeDate 
									invoked.DiscountDate					= DiscountDate

									DiscountTaken							= true
								else
									initialize invoked.DiscountAmount
									initialize invoked.DiscountDate
									initialize invoked.DiscountPercent
							else
								if (LoopCounter = 1)
									invoked.DiscountAmount.CurrencyAmount	= SplitDiscount + DiscAdjustment
								else
									invoked.DiscountAmount.CurrencyAmount	= SplitDiscount
								invoked.DiscountAmount.ExchangeDate			= SplitDiscExchDate

								invoked.DiscountDate						= DiscountDate

						else
							initialize invoked.DiscountAmount
							initialize invoked.DiscountDate
							initialize invoked.DiscountPercent
						invoked.PayGroup						= PayGroup
						invoked.CashCode						= CashCode
						invoked.BankTransactionCode				= BankTransactionCode
						invoked.RemitToCode						= RemitToCode
						invoked.SeparatePayment					= first PayablesInvoicePaymentRel.SeparatePayment
						invoked.PayImmediately					= first PayablesInvoicePaymentRel.PayImmediately
						invoked.Enclosure						= first PayablesInvoicePaymentRel.Enclosure
						if (Status.Released)
							invoked.TransientReleaseAfterCreate = true

		 				invoked.IncomeCode						= IncomeCode
		 				if (IncomeCode entered)
							if (SplitReportable >= SplitAmount
							and LoopCounter = 1)
								invoked.ReportableIncomeAmount	= SplitReportable + TranAdjustment		
							else
								if (SplitReportable >= SplitAmount)
									invoked.ReportableIncomeAmount	= SplitAmount						
								else
									invoked.ReportableIncomeAmount	= SplitReportable					


						invoked.AccrualCode						= AccrualCode
						invoked.PayVendor						= PayVendor			
						if (Vendor.PaymentPriority > 0)
							invoked.PaymentPriority				= Vendor.PaymentPriority
						else
							invoked.PaymentPriority				= Vendor.VendorClass.PaymentPriority
						invoked.InvoiceGroup					= InvoiceGroup
						invoked.DiscountLost					= false
						invoked.Anticipation					= false
						invoked.CreatedBy						= actor


					increment LoopCounter


					if (SplitSchedule.Weekly)
						SplitDueDate += 7 days
					if (SplitSchedule.Monthly)
						SplitDueDate += 1 month
					if (SplitSchedule.Quarterly)
						SplitDueDate += 3 months
					if (SplitSchedule.SemiAnnually)
						SplitDueDate += 6 months
					if (SplitSchedule.Annually)
						SplitDueDate += 1 year

				include AdjustPaymentCurrencyAmounts
























		CreateCXMLInvoiceStatus is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (PurchaseFromLocation exists)
					if (PurchaseFromLocation.VendorLocation.PurchaseFromLocationRel.AribaEnabled.Integrated
						or PurchaseFromLocation.VendorLocation.PurchaseFromLocationRel.AribaEnabled.Flipper
						or PurchaseFromLocation.VendorLocation.PurchaseFromLocationRel.AribaEnabled.Light)
						include CXMLInvoiceStatusCreate
				else
					if (PurchasingVendorRel.AribaEnabled.Integrated
						or PurchasingVendorRel.AribaEnabled.Flipper
						or PurchasingVendorRel.AribaEnabled.Light)
						include CXMLInvoiceStatusCreate





		CreateCXMLPaymentProposalRequest is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (PurchaseFromLocation exists)
					if (PurchaseFromLocation.VendorLocation.PurchaseFromLocationRel.AribaEnabled.Integrated
						or PurchaseFromLocation.VendorLocation.PurchaseFromLocationRel.AribaEnabled.Flipper)
						include CXMLPaymentProposalRequestCreate
				else
					if (PurchasingVendorRel.AribaEnabled.Integrated
						or PurchasingVendorRel.AribaEnabled.Flipper)
						include CXMLPaymentProposalRequestCreate


		BuildSupplierRebateInvoiceLines is a Set Action			

			default label is untranslatable
			restricted
			completion message is "BuildOfSupplierRebateInvoiceLinesIsComplete"
			Parameters
				PrmApCompany            is a MatchCompany
				PrmVendor				is like Vendor
				PrmBeginInvoiceDate 	is Date
				PrmEndInvoiceDate   	is Date

			Parameter Rules
				PrmApCompany
					constraint (PrmApCompany exists)
						"MatchCompany<PrmApCompany>DoesNotExist"

			Instance Selection
				where (Company										= PrmApCompany
				and    Vendor										= PrmVendor
				and   (InvoiceDate		 							>= PrmBeginInvoiceDate
				and    InvoiceDate		  							<= PrmEndInvoiceDate)
				and    CancelSequence								= 0
				and    Status										> 0
				and    ContractRebateGroup.ContractRebateType       not entered)

			Sort Order
				Company
				Vendor
				InvoiceDate
				Invoice
				Suffix
				CancelSequence

			Action Rules
				Instance Rules
					for each ContractRebateSupplierQualifiersRel
						LocalContractGroup				= each.ContractGroup
						LocalContract					= each.Contract
						initialize LocalContractRebate
						LocalContractRebateType			= each.ContractRebateType
						LocalContractRebateQualifier	= each.ContractRebateQualifier
						LocalPurchaseOrder				= first MatchPurchaseOrderInvoicesRel.PurchaseOrder
						LocalPoNumber					= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.Reference1
						LocalPoRelease					= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.PORelease
						LocalPoCode						= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.POCode
						LocalLineNbr					= 0
						if (LocalContractRebateQualifier.PurchaseType.TargetedPurchases)
							if (InvoiceDate			>= LocalContractRebateQualifier.TargetedPurchasesFromDate
							and InvoiceDate			<= LocalContractRebateQualifier.TargetedPurchasesToDate)
								if (ContractRebateDuesRel	exists)
									LocalContractRebateDue			= first ContractRebateDuesRel.ContractRebateDue
									LocalHasContractOnRebate		= false
									LocalItemUsedForQualification	= false
									TransientTransactionAmount 		= InvoiceGoodsAmount
									TransientFromCurrency			= each.Contract.CurrencyCode
									TransientExchangeDate			= InvoiceDate

									if (InvoiceCurrency				!= each.Contract.CurrencyCode)
										LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
										LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
										initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
										LocalInvoiceAmount			= LocalContractCurrencyExchange.OutputCurrencyAmount
									else
										LocalInvoiceAmount			= InvoiceGoodsAmount
									invoke Update ContractRebateDueInvoiceLineRel
										invoked.Company						= Company
										invoked.Vendor						= Vendor
										invoked.Invoice						= Invoice
										invoked.HasContractOnRebate			= LocalHasContractOnRebate
										invoked.ItemUsedForQualification	= LocalItemUsedForQualification
										invoked.ManufacturerUnitCst			= 0
										invoked.MatchedQty  				= 0
										invoked.InvoiceDte    				= InvoiceDate
										invoked.CmContract					= 0
										invoked.ProcureGroup				= blank
										invoked.MfgContract					= 0
										invoked.Location					= blank
										invoked.ManufCode					= blank
										invoked.ManufDivision				= blank
										invoked.MultipleQualifierUpdate		= false
										invoked.InvoiceAmount				= LocalInvoiceAmount
										invoked.SupplierRebate				= true
										invoked.PurchaseFromLoc				= PurchaseFromLocation

										invoked.PurchaseFromLocation		= PurchaseFromLocation.VendorName					
						else
						if (InvoiceDate					>= LocalContractRel.EffectiveDate)
							if (LocalContractRel.LastInvoiceAllowedDate	entered)
								if (InvoiceDate			<= LocalContractRel.LastInvoiceAllowedDate)
									if (ContractRebateDuesRel	exists)
										LocalContractRebateDue				= first ContractRebateDuesRel.ContractRebateDue
										LocalHasContractOnRebate			= false
										LocalItemUsedForQualification		= false
										TransientTransactionAmount 			= InvoiceGoodsAmount
										TransientFromCurrency				= each.Contract.CurrencyCode
										TransientExchangeDate				= InvoiceDate

										if (InvoiceCurrency  				!= each.Contract.CurrencyCode)
											LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
											LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
											initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
											LocalInvoiceAmount				= LocalContractCurrencyExchange.OutputCurrencyAmount
										else
											LocalInvoiceAmount				= InvoiceGoodsAmount
										invoke Update ContractRebateDueInvoiceLineRel
											invoked.Company						= Company
											invoked.Vendor						= Vendor
											invoked.Invoice						= Invoice
											invoked.HasContractOnRebate			= LocalHasContractOnRebate
											invoked.ItemUsedForQualification	= LocalItemUsedForQualification
											invoked.ManufacturerUnitCst			= 0
											invoked.MatchedQty  				= 0
											invoked.InvoiceDte    				= InvoiceDate
											invoked.CmContract					= 0
											invoked.ProcureGroup				= blank
											invoked.MfgContract					= 0
											invoked.Location					= blank
											invoked.ManufCode					= blank
											invoked.ManufDivision				= blank
											invoked.MultipleQualifierUpdate		= false
											invoked.InvoiceAmount				= LocalInvoiceAmount
											invoked.SupplierRebate				= true
											invoked.PurchaseFromLoc				= PurchaseFromLocation
											invoked.PurchaseFromLocation		= VendorLocationRel.VendorName
							else
							if (LocalContractRel.ExpirationDate	entered)
								if (InvoiceDate			<= LocalContractRel.ExpirationDate)
									if (ContractRebateDuesRel	exists)
										LocalContractRebateDue				= first ContractRebateDuesRel.ContractRebateDue
										LocalHasContractOnRebate			= false
										LocalItemUsedForQualification		= false
										TransientTransactionAmount 			= InvoiceGoodsAmount
										TransientFromCurrency				= each.Contract.CurrencyCode
										TransientExchangeDate				= InvoiceDate

										if (InvoiceCurrency					!= each.Contract.CurrencyCode)
											LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
											LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
											initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
											LocalInvoiceAmount				= LocalContractCurrencyExchange.OutputCurrencyAmount
										else
											LocalInvoiceAmount				= InvoiceGoodsAmount
										invoke Update ContractRebateDueInvoiceLineRel
											invoked.Company						= Company
											invoked.Vendor						= Vendor
											invoked.Invoice						= Invoice
											invoked.HasContractOnRebate			= LocalHasContractOnRebate
											invoked.ItemUsedForQualification	= LocalItemUsedForQualification
											invoked.ManufacturerUnitCst			= 0
											invoked.MatchedQty  				= 0
											invoked.InvoiceDte    				= InvoiceDate
											invoked.CmContract					= 0
											invoked.ProcureGroup				= blank
											invoked.MfgContract					= 0
											invoked.Location					= blank
											invoked.ManufCode					= blank
											invoked.ManufDivision				= blank
											invoked.MultipleQualifierUpdate		= false
											invoked.InvoiceAmount				= LocalInvoiceAmount
											invoked.SupplierRebate				= true
											invoked.PurchaseFromLoc				= PurchaseFromLocation

											invoked.PurchaseFromLocation		= PurchaseFromLocation.VendorName					
							else
							if (ContractRebateDuesRel	exists)
								LocalContractRebateDue				= first ContractRebateDuesRel.ContractRebateDue
								LocalHasContractOnRebate			= false
								LocalItemUsedForQualification		= false
								TransientTransactionAmount 			= InvoiceGoodsAmount
								TransientFromCurrency				= each.Contract.CurrencyCode
								TransientExchangeDate				= InvoiceDate

								if (InvoiceCurrency					!= each.Contract.CurrencyCode)
									LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
									LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
									initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
									LocalInvoiceAmount				= LocalContractCurrencyExchange.OutputCurrencyAmount
								else
									LocalInvoiceAmount				= InvoiceGoodsAmount
								invoke Update ContractRebateDueInvoiceLineRel
									invoked.Company						= Company
									invoked.Vendor						= Vendor
									invoked.Invoice						= Invoice
									invoked.HasContractOnRebate			= LocalHasContractOnRebate
									invoked.ItemUsedForQualification	= LocalItemUsedForQualification
									invoked.ManufacturerUnitCst			= 0
									invoked.MatchedQty  				= 0
									invoked.InvoiceDte    				= InvoiceDate
									invoked.CmContract					= 0
									invoked.ProcureGroup				= blank
									invoked.MfgContract					= 0
									invoked.Location					= blank
									invoked.ManufCode					= blank
									invoked.ManufDivision				= blank
									invoked.MultipleQualifierUpdate		= false
									invoked.InvoiceAmount				= LocalInvoiceAmount
									invoked.SupplierRebate				= true
									invoked.PurchaseFromLoc				= PurchaseFromLocation

									invoked.PurchaseFromLocation		= PurchaseFromLocation.VendorName					

		CancelledSupplierRebateInvoiceLines is a Set Action			
			default label is untranslatable
			restricted
			completion message is "CancelledSupplierRebateInvoiceLinesIsComplete"
			Parameters
				PrmApCompany            is Numeric size 4
				PrmVendor				is like Vendor
				PrmBeginCancelDate 		is Date
				PrmEndCancelDate   		is Date

			Instance Selection
				where (Company							 = PrmApCompany
				and    Vendor							 = PrmVendor
				and   (CancelDate		 				>= PrmBeginCancelDate
				and    CancelDate		  				<= PrmEndCancelDate)
				and    CancelSequence					!= 0
				and    Status							> 0)

			Action Rules
				Instance Rules
					invoke Delete ContractRebateDueInvoiceLinesRel

		BuildSupplierRebateJustCreatedInvoiceLines is a Set Action			
			default label is untranslatable
			restricted
			completion message is "BuildOfSupplierRebateJustCreatedInvoiceLinesIsComplete"
			Parameters
				PrmApCompany            is Numeric size 4
				PrmVendor				is like Vendor
				PrmBeginCreateDate 		is Date
				PrmEndCreateDate   		is Date

			Instance Selection
				where (Company									= PrmApCompany
				and   (CreateDate		 						>= PrmBeginCreateDate
				and    CreateDate		  						<= PrmEndCreateDate)
				and    Vendor									= PrmVendor
				and    CancelSequence							not entered)

			Sort Order
				Status
				Company
				BatchNumber
				AuthorityCode
				Operator
				CreateDate
				Vendor
				Invoice
				Suffix
				CancelSequence

			Action Rules
				Instance Rules
					for each ContractRebateSupplierQualifiersRel
						LocalContractGroup				= each.ContractGroup
						LocalContract					= each.Contract
						initialize LocalContractRebate
						LocalContractRebateType			= each.ContractRebateType
						LocalContractRebateQualifier	= each.ContractRebateQualifier
						LocalPurchaseOrder				= first MatchPurchaseOrderInvoicesRel.PurchaseOrder
						LocalPoNumber					= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.Reference1
						LocalPoRelease					= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.PORelease
						LocalPoCode						= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.POCode
						LocalLineNbr					= 0
						if (LocalContractRebateQualifier.PurchaseType.TargetedPurchases)
							if (InvoiceDate			>= LocalContractRebateQualifier.TargetedPurchasesFromDate
							and InvoiceDate			<= LocalContractRebateQualifier.TargetedPurchasesToDate)
								if (ContractRebateDuesRel exists)
									LocalContractRebateDue		= first ContractRebateDuesRel.ContractRebateDue
									LocalHasContractOnRebate		= false
									LocalItemUsedForQualification	= false
									TransientTransactionAmount 		= InvoiceGoodsAmount
									TransientFromCurrency			= each.Contract.CurrencyCode
									TransientExchangeDate			= InvoiceDate

									if (InvoiceCurrency				!= each.Contract.CurrencyCode)
										LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
										LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
										initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
										LocalInvoiceAmount			= LocalContractCurrencyExchange.OutputCurrencyAmount
									else
										LocalInvoiceAmount			= InvoiceGoodsAmount
									invoke Update ContractRebateDueInvoiceLineRel
										invoked.Company						= Company
										invoked.Vendor						= Vendor
										invoked.Invoice						= Invoice
										invoked.HasContractOnRebate			= LocalHasContractOnRebate
										invoked.ItemUsedForQualification	= LocalItemUsedForQualification
										invoked.ManufacturerUnitCst			= 0
										invoked.MatchedQty  				= 0
										invoked.InvoiceDte    				= InvoiceDate
										invoked.CmContract					= 0
										invoked.ProcureGroup				= blank
										invoked.MfgContract					= 0
										invoked.Location					= blank
										invoked.ManufCode					= blank
										invoked.ManufDivision				= blank
										invoked.MultipleQualifierUpdate		= false
										invoked.InvoiceAmount				= LocalInvoiceAmount
										invoked.SupplierRebate				= true
										if (Status = 0)
											invoked.InvoiceStatus			= 1
						else
						if (InvoiceDate					>= LocalContractRel.EffectiveDate)
							if (LocalContractRel.LastInvoiceAllowedDate	entered)
								if (InvoiceDate			<= LocalContractRel.LastInvoiceAllowedDate)
									if (ContractRebateDuesRel exists)
										LocalContractRebateDue		= first ContractRebateDuesRel.ContractRebateDue
										LocalHasContractOnRebate		= false
										LocalItemUsedForQualification	= false
										TransientTransactionAmount 		= InvoiceGoodsAmount
										TransientFromCurrency			= each.Contract.CurrencyCode
										TransientExchangeDate			= InvoiceDate

										if (InvoiceCurrency					!= each.Contract.CurrencyCode)
											LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
											LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
											initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
											LocalInvoiceAmount				= LocalContractCurrencyExchange.OutputCurrencyAmount
										else
											LocalInvoiceAmount				= InvoiceGoodsAmount
										invoke Update ContractRebateDueInvoiceLineRel
											invoked.Company						= Company
											invoked.Vendor						= Vendor
											invoked.Invoice						= Invoice
											invoked.HasContractOnRebate			= LocalHasContractOnRebate
											invoked.ItemUsedForQualification	= LocalItemUsedForQualification
											invoked.ManufacturerUnitCst			= 0
											invoked.MatchedQty  				= 0
											invoked.InvoiceDte    				= InvoiceDate
											invoked.CmContract					= 0
											invoked.ProcureGroup				= blank
											invoked.MfgContract					= 0
											invoked.Location					= blank
											invoked.ManufCode					= blank
											invoked.ManufDivision				= blank
											invoked.MultipleQualifierUpdate		= false
											invoked.InvoiceAmount				= LocalInvoiceAmount
											invoked.SupplierRebate				= true
											if (Status = 0)
												invoked.InvoiceStatus			= 1
							else
							if (LocalContractRel.ExpirationDate	entered)
								if (InvoiceDate			<= LocalContractRel.ExpirationDate)
									if (ContractRebateDuesRel exists)
										LocalContractRebateDue		= first ContractRebateDuesRel.ContractRebateDue
										LocalHasContractOnRebate		= false
										LocalItemUsedForQualification	= false
										TransientTransactionAmount 		= InvoiceGoodsAmount
										TransientFromCurrency			= each.Contract.CurrencyCode
										TransientExchangeDate			= InvoiceDate

										if (InvoiceCurrency				!= each.Contract.CurrencyCode)
											LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
											LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
											initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
											LocalInvoiceAmount				= LocalContractCurrencyExchange.OutputCurrencyAmount
										else
											LocalInvoiceAmount				= InvoiceGoodsAmount
										invoke Update ContractRebateDueInvoiceLineRel
											invoked.Company						= Company
											invoked.Vendor						= Vendor
											invoked.Invoice						= Invoice
											invoked.HasContractOnRebate			= LocalHasContractOnRebate
											invoked.ItemUsedForQualification	= LocalItemUsedForQualification
											invoked.ManufacturerUnitCst			= 0
											invoked.MatchedQty  				= 0
											invoked.InvoiceDte    				= InvoiceDate
											invoked.CmContract					= 0
											invoked.ProcureGroup				= blank
											invoked.MfgContract					= 0
											invoked.Location					= blank
											invoked.ManufCode					= blank
											invoked.ManufDivision				= blank
											invoked.MultipleQualifierUpdate		= false
											invoked.InvoiceAmount				= LocalInvoiceAmount
											invoked.SupplierRebate				= true
											if (Status = 0)
												invoked.InvoiceStatus			= 1
							else
								if (ContractRebateDuesRel exists)
									LocalContractRebateDue		= first ContractRebateDuesRel.ContractRebateDue
									LocalHasContractOnRebate		= false
									LocalItemUsedForQualification	= false
									TransientTransactionAmount 		= InvoiceGoodsAmount
									TransientFromCurrency			= each.Contract.CurrencyCode
									TransientExchangeDate			= InvoiceDate

									if (InvoiceCurrency					!= each.Contract.CurrencyCode)
										LocalContractCurrencyExchange.ToCurrency			= InvoiceCurrency
										LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
										initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
										LocalInvoiceAmount				= LocalContractCurrencyExchange.OutputCurrencyAmount
									else
										LocalInvoiceAmount				= InvoiceGoodsAmount
									invoke Update ContractRebateDueInvoiceLineRel
										invoked.Company						= Company
										invoked.Vendor						= Vendor
										invoked.Invoice						= Invoice
										invoked.HasContractOnRebate			= LocalHasContractOnRebate
										invoked.ItemUsedForQualification	= LocalItemUsedForQualification
										invoked.ManufacturerUnitCst			= 0
										invoked.MatchedQty  				= 0
										invoked.InvoiceDte    				= InvoiceDate
										invoked.CmContract					= 0
										invoked.ProcureGroup				= blank
										invoked.MfgContract					= 0
										invoked.Location					= blank
										invoked.ManufCode					= blank
										invoked.ManufDivision				= blank
										invoked.MultipleQualifierUpdate		= false
										invoked.InvoiceAmount				= LocalInvoiceAmount
										invoked.SupplierRebate				= true
										if (Status = 0)
											invoked.InvoiceStatus			= 1

		LoadInvoiceLineFact is a Set Action
			default label is untranslatable
			restricted
			completion message is "LoadInvoiceLineFactIsComplete"
			Parameters
				PrmVendorGroup					is a VendorGroup
				InvoiceDateRange				is a DateRange
				ConsolidationDateRange			is a DateRange
				ConsolidateLastTwelveMonths		is Boolean
				LoadAndConsolidationOptions
				LastRunDate                     is Date

			Parameter Rules
				PrmVendorGroup
					required
						"VendorGroupRequired"

					constraint (LoadAndConsolidationOptions entered)
						"AtLeastOneConsolidationOptionMustBeSelected_(<NoConsolidationPhrase>optionCanBeChosenWhenNoConsolidationDateRangeIsEnteredAndNoOtherConsolidationOptionIsSelected)"

					if (!LoadAndConsolidationOptions.NoSpendConsolidation)
						constraint (ConsolidateLastTwelveMonths
						or          ConsolidationDateRange entered)
							"EitherA_<ConsolidationDateRangePhrase>_OrThe_<ConsolidateLastTwelveMonthsPhrase>_checkBoxIsRequired"

					if (InvoiceDateRange not entered)
						constraint (PrmVendorGroup.ProcurementGroupRel.ProcurementGroupSetActionInvoiceSpendExportAndConsolidateRel	exists)
							"InvoiceLineFactDateRangeRequiredForInitialLoad"
						InvoiceDateRange.Begin 		= PrmVendorGroup.ProcurementGroupRel.ProcurementGroupSetActionInvoiceSpendExportAndConsolidateRel.LastRunEndDate
						InvoiceDateRange.End		= current corporate date
					else
					if (InvoiceDateRange.End	not entered)
						InvoiceDateRange.End	= current corporate date

				InvoiceDateRange
					if (InvoiceDateRange not entered)
						constraint (PrmVendorGroup.ProcurementGroupRel.ProcurementGroupSetActionInvoiceSpendExportAndConsolidateRel	exists)
							"InvoiceLineFactDateRangeRequiredForInitialLoad"
						InvoiceDateRange.Begin 		= PrmVendorGroup.ProcurementGroupRel.ProcurementGroupSetActionInvoiceSpendExportAndConsolidateRel.LastRunEndDate
						InvoiceDateRange.End		= current corporate date
					else
					if (InvoiceDateRange.End	not entered)
						InvoiceDateRange.End	= current corporate date

				ConsolidationDateRange
					if (ConsolidationDateRange entered)
						constraint (!ConsolidateLastTwelveMonths)
							"CannotEnterConsolidationDateRangeIfSelectingToConsolidateLastTwelveMonths"
						constraint (ConsolidationDateRange.Begin entered)
							"ConsolidationDateRangeBeginDateIsRequired"
						constraint (ConsolidationDateRange.Begin	<= current date)
							"ConsolidationDateRangeBeginDateMustBePriorToOrEqualToToday'sDate"

						if (ConsolidationDateRange.Begin	entered
						and ConsolidationDateRange.End		not entered)
							ConsolidationDateRange.End		= current corporate date
					else
					if (!LoadAndConsolidationOptions.NoSpendConsolidation)
						constraint (ConsolidateLastTwelveMonths)
							"EitherConsolidationDateRangeOrConsolidateLastTwelveMonthsOptionIsRequiredWhenAConsolidationOptionIsChecked"

				ConsolidateLastTwelveMonths
					if (ConsolidateLastTwelveMonths)
						ConsolidationDateRange.End		= current corporate date
						ConsolidationDateRange.Begin	= current corporate date - 1 year

				LoadAndConsolidationOptions
					required
						"AtLeastOneConsolidationOptionMustBeSelected_(<NoConsolidationPhrase>optionCanBeChosenWhenNoConsolidationDateRangeIsEnteredAndNoOtherConsolidationOptionIsSelected)"

					if (LoadAndConsolidationOptions.NoSpendConsolidation)
						constraint (!ConsolidateLastTwelveMonths
						and          ConsolidationDateRange not entered)
							"CannotEnterConsolidationDateRangeOrChooseToConsolidateLastTwelveMonthsWhen_<NoConsolidationPhrase>optionIsSelected"

				LastRunDate
					initial value is PrmVendorGroup.SpendAnalysisLastRunDate

			Local Fields
				CurrentProcuregrpSetActionInvoiceSpendExportAndConsolidate	is a ProcurementGroupSetAction
				PolinesrcFound												is Boolean

			Instance Selection
				where (VendorGroup		= PrmVendorGroup
				and (((Status.Released
				or     Status.Historical)
				and  ((MatchDate entered
				and    MatchDate		within InvoiceDateRange)
				or    (MatchDate not entered
				and   (CancelDate       within InvoiceDateRange
				or     DerivedCreateDate within InvoiceDateRange
				or    (MatchProcessType.ReceiptMatch
				and    Suffix	entered)))))
				or   ((Status.Unreleased
				or     Status.PendingApproval)
				and    MatchProcessType.Expense
				and    DerivedCreateDate within InvoiceDateRange)))

			Sort Order
				VendorGroup
				Status
				MatchDate
				CreateDate
				CancelDate

			Rule Blocks
				BuildDetailInvoiceLineFact
					initialize LocalLineSeqNbr
					PolinesrcFound			= false
					for each PurchaseOrderLineSourceRel
						PolinesrcFound		= true
						LocalLineSeqNbr		+= 1
						if (PurchaseOrderLineRel.ShipToLocation	entered)
							invoke Update PurchaseOrderLineRel.SpendLocationRel
								invoked.Company					= Company
								invoked.SpendLocation			= PurchaseOrderLineRel.ShipToLocation
								invoked.LocationType			= PurchaseOrderLineRel.ShipToLocation.LocationType
								invoked.Name					= PurchaseOrderLineRel.ShipToLocation.Name
						if (InvoiceLineFactRel exists)
							invoke Update InvoiceLineFactRel
								if (each.EnteredUOM                                 = PurchaseOrderLineRel.EnteredBuyUOM)
									if (each.Quantity		= PurchaseOrderLineRel.Quantity)
										invoked.InvoiceAmount							= sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount
										invoked.SpendAmount								= sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount
									else
										invoked.InvoiceAmount							= ((sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount) * (each.Quantity / PurchaseOrderLineRel.Quantity))
										invoked.SpendAmount								= ((sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount) * (each.Quantity / PurchaseOrderLineRel.Quantity))
								else
									invoked.InvoiceAmount                           = sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount
									invoked.SpendAmount                             = sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount
								if (each.EnteredUOM                                 = PurchaseOrderLineRel.EnteredBuyUOM)
									if (each.Quantity		= PurchaseOrderLineRel.Quantity)
										invoked.MatchedQuantity							= sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity
										invoked.SpendQuantity							= sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity
									else
										invoked.MatchedQuantity							= ((sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity) * (each.Quantity / PurchaseOrderLineRel.Quantity))
										invoked.SpendQuantity							= ((sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity) * (each.Quantity / PurchaseOrderLineRel.Quantity))
								else
									invoked.MatchedQuantity                         = sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity
									invoked.SpendQuantity                           = sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity
						else
							invoke Create InvoiceLineFact
								invoked.Company										= Company
								invoked.PayablesInvoice								= PayablesInvoice
								invoked.CompanyPurchaseOrder.PurchasingCompany		= LocalPoCompany
								invoked.CompanyPurchaseOrder.PurchaseOrder      	= LocalPurchaseOrder
								invoked.LineNumber									= LocalLineNbr
								invoked.LineSequenceNumber							= LocalLineSeqNbr
								invoked.PayablesDiversityCode						= DiversityCode
								invoked.ProcurementGroup							= VendorGroup
								invoked.InvoiceDate									= InvoiceDate
								invoked.MatchDate									= MatchDate
								invoked.CreateDate									= CreateDate
								invoked.InvoiceStatus								= Status
								if (each.EnteredUOM                                 = PurchaseOrderLineRel.EnteredBuyUOM)
									if (each.Quantity		= PurchaseOrderLineRel.Quantity)
										invoked.InvoiceAmount							= LocalTotBaseAmt  
										invoked.SpendAmount								= LocalTotBaseAmt  
									else
										invoked.InvoiceAmount							= (LocalTotBaseAmt * (each.Quantity / PurchaseOrderLineRel.Quantity))
										invoked.SpendAmount								= (LocalTotBaseAmt * (each.Quantity / PurchaseOrderLineRel.Quantity))
								else
									invoked.InvoiceAmount                           = LocalTotBaseAmt
									invoked.SpendAmount                             = LocalTotBaseAmt
								invoked.Location									= PurchaseOrderLineRel.ShipToLocation
								invoked.RequestingLocation							= each.RequestingLocation
								invoked.ReturnNumber								= VendorReturn
								invoked.CurrencyCode								= InvoiceCurrency
								invoked.OrigCnvRate									= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.ItemDescription								= PurchaseOrderLineRel.Description
								invoked.VendorItem									= PurchaseOrderLineRel.VendorItem
								if (each.EnteredUOM                                 = PurchaseOrderLineRel.EnteredBuyUOM)
									if (each.Quantity		= PurchaseOrderLineRel.Quantity)
										invoked.MatchedQuantity							= LocalMatchedQuantity
										invoked.SpendQuantity							= LocalMatchedQuantity
									else
										invoked.MatchedQuantity							= (LocalMatchedQuantity * (each.Quantity / PurchaseOrderLineRel.Quantity))
										invoked.SpendQuantity							= (LocalMatchedQuantity * (each.Quantity / PurchaseOrderLineRel.Quantity))
								else
									invoked.MatchedQuantity                         = LocalMatchedQuantity
									invoked.SpendQuantity                           = LocalMatchedQuantity
								invoked.InvoiceUnitCost								= LocalInvoiceUnitCost
								invoked.PurchaseOrderUnitCost						= PurchaseOrderLineRel.EnteredUnitCost
								invoked.InvoiceBaseUnitCost							= (LocalTotBaseAmt / LocalMatchedQuantity)
								if (PurchaseOrderLineRel.Contract	not entered
								and !PurchaseOrderLineRel.CostCode.Punchout)
									invoked.OffContract								= PurchaseOrderLineRel.ItemOnContract
								else
									initialize invoked.OffContract
								invoked.CmContract                                  = PurchaseOrderLineRel.Contract
								invoked.MfgContract                                 = PurchaseOrderLineRel.ManufacturerContract
								if (LocalCommodityCode	entered)
									invoked.CommodityCode							= LocalCommodityCode
								else
									invoked.CommodityCode							= PurchaseOrderLineRel.CommodityCode
								invoked.ManufacturerCode							= PurchaseOrderLineRel.Manufacturer.ManufacturerCode
								invoked.ManufacturerDivision						= PurchaseOrderLineRel.Manufacturer.ManufacturerDivision
								invoked.ManufacturerNumber							= PurchaseOrderLineRel.ManufacturerNumber
								invoked.UNSPSC                                      = PurchaseOrderLineRel.UNSPSCCode
								if (PurchaseOrderLineRel.Contract	not entered)
									if (PurchaseOrderLineRel.CostCode.Punchout)
										invoked.SpendCategory						= 1
									else
									if (PurchaseOrderLineRel.ItemOnContract)
										invoked.SpendCategory						= 2
									else
										invoked.SpendCategory						= 3
								else
									invoked.SpendCategory							= 1
								invoked.PoDate										= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.PurchaseOrderDate
								invoked.InvoiceYear									= InvoiceDate year
								invoked.InvoiceMonth								= InvoiceDate month
								invoked.VpriUom    	                                = PurchaseOrderLineRel.VendorPriceUOM
								invoked.VpriUomMult                                 = PurchaseOrderLineRel.VendorPriceUOMMultiplier
								if (InvoiceDate month > 3)
									if (InvoiceDate month > 6)
										if (InvoiceDate month > 9)
											invoked.InvoiceQuarter					= 4
										else
											invoked.InvoiceQuarter					= 3
									else
										invoked.InvoiceQuarter						= 2
								else
									invoked.InvoiceQuarter							= 1
								fill in fields from PurchaseOrderLineRel

					if (!PolinesrcFound
					and  PurchaseOrderLineRel exists)
						LocalLineSeqNbr			= 1
						if (PurchaseOrderLineRel.ShipToLocation	entered)
							invoke Update PurchaseOrderLineRel.SpendLocationRel
								invoked.Company					= Company
								invoked.SpendLocation			= PurchaseOrderLineRel.ShipToLocation
								invoked.LocationType			= PurchaseOrderLineRel.ShipToLocation.LocationType
								invoked.Name					= PurchaseOrderLineRel.ShipToLocation.Name
						if (InvoiceLineFactRel exists)
							invoke Update InvoiceLineFactRel
								if (VendorReturn !entered)
									invoked.InvoiceAmount								= sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount
									invoked.SpendAmount									= sum PurchaseOrderLineInvoiceDetailRel.TotalBaseAmount
									invoked.MatchedQuantity								= sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity
									invoked.SpendQuantity								= sum PurchaseOrderLineInvoiceDetailRel.MatchedQuantity
								else
								if (VendorReturn entered)
									invoked.InvoiceAmount								= LocalTotBaseAmt
									invoked.SpendAmount									= LocalTotBaseAmt
									invoked.MatchedQuantity								= LocalMatchedQuantity
									invoked.SpendQuantity								= LocalMatchedQuantity
						else
							invoke Create InvoiceLineFact
								invoked.Company										= Company
								invoked.PayablesInvoice								= PayablesInvoice
								invoked.CompanyPurchaseOrder.PurchasingCompany		= LocalPoCompany
								invoked.CompanyPurchaseOrder.PurchaseOrder      	= LocalPurchaseOrder
								invoked.LineNumber									= LocalLineNbr
								invoked.LineSequenceNumber							= LocalLineSeqNbr
								invoked.PayablesDiversityCode						= DiversityCode
								invoked.ProcurementGroup							= VendorGroup
								invoked.InvoiceDate									= InvoiceDate
								invoked.MatchDate									= MatchDate
								invoked.CreateDate									= CreateDate
								invoked.InvoiceAmount								= LocalTotBaseAmt  
								invoked.SpendAmount									= LocalTotBaseAmt
								invoked.CurrencyCode								= InvoiceCurrency
								invoked.OrigCnvRate									= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.MatchedQuantity								= LocalMatchedQuantity
								invoked.SpendQuantity								= LocalMatchedQuantity
								invoked.InvoiceUnitCost								= LocalInvoiceUnitCost
								invoked.InvoiceBaseUnitCost							= (LocalTotBaseAmt / LocalMatchedQuantity)
								invoked.ReturnNumber								= VendorReturn
								invoked.InvoiceStatus								= Status
								invoked.InvoiceYear									= InvoiceDate year
								invoked.InvoiceMonth								= InvoiceDate month
								if (InvoiceDate month > 3)
									if (InvoiceDate month > 6)
										if (InvoiceDate month > 9)
											invoked.InvoiceQuarter					= 4
										else
											invoked.InvoiceQuarter					= 3
									else
										invoked.InvoiceQuarter						= 2
								else
									invoked.InvoiceQuarter							= 1
								if (PurchaseOrderLineRel exists)
									initialize invoked.RequestingLocation
									invoked.Location								= PurchaseOrderLineRel.ShipToLocation
									invoked.ItemDescription							= PurchaseOrderLineRel.Description
									invoked.VendorItem								= PurchaseOrderLineRel.VendorItem
									invoked.PurchaseOrderUnitCost					= PurchaseOrderLineRel.EnteredUnitCost
									invoked.VpriUom                                 = PurchaseOrderLineRel.VendorPriceUOM
									invoked.VpriUomMult                             = PurchaseOrderLineRel.VendorPriceUOMMultiplier
									if (PurchaseOrderLineRel.Contract	not entered
									and !PurchaseOrderLineRel.CostCode.Punchout)
										invoked.OffContract							= PurchaseOrderLineRel.ItemOnContract
									else
										initialize invoked.OffContract
									if (LocalCommodityCode	entered)
										invoked.CommodityCode						= LocalCommodityCode
									else
										invoked.CommodityCode						= PurchaseOrderLineRel.CommodityCode
									invoked.ManufacturerCode						= PurchaseOrderLineRel.Manufacturer.ManufacturerCode
									invoked.ManufacturerDivision					= PurchaseOrderLineRel.Manufacturer.ManufacturerDivision
									invoked.ManufacturerNumber						= PurchaseOrderLineRel.ManufacturerNumber
									invoked.UNSPSC                                  = PurchaseOrderLineRel.UNSPSCCode
									invoked.CmContract                              = PurchaseOrderLineRel.Contract
									invoked.MfgContract                             = PurchaseOrderLineRel.ManufacturerContract
									if (PurchaseOrderLineRel.Contract	not entered)
										if (PurchaseOrderLineRel.CostCode.Punchout)
											invoked.SpendCategory					= 1
										else
										if (PurchaseOrderLineRel.ItemOnContract)
											invoked.SpendCategory					= 2
										else
											invoked.SpendCategory					= 3
									else
										invoked.SpendCategory						= 1
									fill in fields from PurchaseOrderLineRel
								else
									if (LocalCmContract	entered)
										invoked.SpendCategory						= 1
									else
										invoked.SpendCategory						= 4
									invoked.Buyer									= LocalBuyer
									invoked.Item									= LocalItem
									invoked.ItemType								= LocalItemType
									invoked.ItemDescription							= LocalItemDescription
									invoked.VpriUom									= LocalVpriUom
									invoked.VpriUomMult								= LocalVpriUomMult
									invoked.CommodityCode							= LocalCommodityCode
									invoked.CmContract								= LocalCmContract
									initialize invoked.MfgContract
									initialize invoked.PreferredFlag
									initialize invoked.OffContract
									initialize invoked.PurchaseOrderUnitCost
									initialize invoked.Location
									initialize invoked.ManufacturerCode
									initialize invoked.ManufacturerDivision
									initialize invoked.ManufacturerNumber
									initialize invoked.UNSPSC
									initialize invoked.PurchMajcl
									initialize invoked.PurchMincl
								if (FirstPurchaseOrder entered)
									invoked.PoDate								= FirstPurchaseOrder.PurchaseOrderDate
								else
								if (first MatchPurchaseOrderInvoicesRel exists)
									invoked.PoDate								= first MatchPurchaseOrderInvoicesRel.PurchaseOrder.PurchaseOrderDate
								else
									initialize invoked.PoDate

			Action Rules
				Empty Set Rules
					invoke UpdateUnreleasedInvoiceLineFact InvoiceLineFact in background
						invoked.PrmVendorGroup			= PrmVendorGroup

					if (!LoadAndConsolidationOptions.NoSpendConsolidation)
						invoke Create InvoiceLineFactConsolidateControl
							invoked.ProcurementGroup									= PrmVendorGroup
							invoked.ConsolidationDateRange								= ConsolidationDateRange
							invoked.ConsolidationOptions.ConsolidateTotalSpend			= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateTotalSpend
							invoked.ConsolidationOptions.ConsolidateBuyerSpend			= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateBuyerSpend
							invoked.ConsolidationOptions.ConsolidateDiversitySpend		= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateDiversitySpend
							invoked.ConsolidationOptions.ConsolidateCommodityCodeSpend	= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateCommodityCodeSpend
							invoked.ConsolidationOptions.ConsolidateUNSPSCSpend			= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateUNSPSCSpend

				VendorGroup Set Rules
					Entrance Rules
						CurrentProcuregrpSetActionInvoiceSpendExportAndConsolidate	= 11

					Exit Rules
						invoke UpdateUnreleasedInvoiceLineFact InvoiceLineFact in background
							invoked.PrmVendorGroup			= PrmVendorGroup

						if (!LoadAndConsolidationOptions.NoSpendConsolidation)
							invoke Create InvoiceLineFactConsolidateControl
								invoked.ProcurementGroup									= PrmVendorGroup
								invoked.ConsolidationDateRange								= ConsolidationDateRange
								invoked.ConsolidationOptions.ConsolidateTotalSpend			= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateTotalSpend
								invoked.ConsolidationOptions.ConsolidateBuyerSpend			= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateBuyerSpend
								invoked.ConsolidationOptions.ConsolidateDiversitySpend		= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateDiversitySpend
								invoked.ConsolidationOptions.ConsolidateCommodityCodeSpend	= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateCommodityCodeSpend
								invoked.ConsolidationOptions.ConsolidateUNSPSCSpend			= LoadAndConsolidationOptions.ConsolidationOptions.ConsolidateUNSPSCSpend

						invoke Update CurrentProcuregrpSetActionInvoiceSpendExportAndConsolidate
							invoked.ProcurementGroup		= PrmVendorGroup
							invoked.LoadType				= 11
							if (InvoiceDateRange.End not entered)
								invoked.LastRunEndDate		= current corporate date
							else
							if (InvoiceDateRange.End		> current corporate date)
								invoked.LastRunEndDate		= current corporate date
							else
							if (InvoiceDateRange.End		> invoked.LastRunEndDate)
								invoked.LastRunEndDate		= InvoiceDateRange.End

				Instance Rules
					if  (Status			= 1
					and  MatchStatus.Unmatched
					and  MatchProcessType.ReceiptMatch)
						invoke Purge InvoiceLineFactsRel
					else
					if (MatchProcessType.Expense
					and VendorReturn		not entered
					and Suffix    not = 111
					and Suffix	  not = 888
					and InvoiceDate year     > 1900)
						if (CancelDate entered)
							invoke Purge InvoiceLineFactsRel
						else
							initialize LocalPoCompany
							initialize LocalPurchaseOrder
							initialize LocalPoNumber
							initialize LocalPoRelease
							initialize LocalPoCode
							initialize LocalLineNbr

							LocalLineSeqNbr		= 1
							if (InvoiceLineFactRel exists)
								invoke Update InvoiceLineFactRel
									invoked.Company														= Company
									invoked.PayablesInvoice												= PayablesInvoice
									initialize invoked.InvoiceLineFact.CompanyPurchaseOrder
									initialize invoked.InvoiceLineFact.LineNumber
									invoked.InvoiceLineFact.LineSequenceNumber							= LocalLineSeqNbr
									invoked.PayablesDiversityCode										= DiversityCode
									invoked.ProcurementGroup											= VendorGroup
									invoked.InvoiceDate													= InvoiceDate
									invoked.MatchDate													= MatchDate
									invoked.CreateDate													= CreateDate
									invoked.InvoiceAmount												= InvoiceAmount.CurrencyAmount
									invoked.SpendAmount													= InvoiceAmount.CurrencyAmount
									invoked.CurrencyCode												= InvoiceCurrency
									invoked.OrigCnvRate													= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
									invoked.TaxTotalAmount												= TotalTaxAmount
									invoked.SpendCategory												= 4
									invoked.Buyer														= Buyer
									invoked.InvoiceStatus												= Status
									invoked.InvoiceYear													= InvoiceDate year
									invoked.InvoiceMonth												= InvoiceDate month
									if (InvoiceDate month > 3)
										if (InvoiceDate month > 6)
											if (InvoiceDate month > 9)
												invoked.InvoiceQuarter									= 4
											else
												invoked.InvoiceQuarter									= 3
										else
											invoked.InvoiceQuarter										= 2
									else
										invoked.InvoiceQuarter											= 1
									initialize invoked.Location
									initialize invoked.RequestingLocation
									initialize invoked.Item
									initialize invoked.ItemType
									initialize invoked.ItemDescription
									initialize invoked.VendorItem
									initialize invoked.MatchedQuantity
									initialize invoked.SpendQuantity
									initialize invoked.VpriUom
									initialize invoked.VpriUomMult
									initialize invoked.InvoiceUnitCost
									initialize invoked.PurchaseOrderUnitCost
									initialize invoked.InvoiceBaseUnitCost
									initialize invoked.CmContract
									initialize invoked.MfgContract
									initialize invoked.PreferredFlag
									initialize invoked.ReturnNumber
									initialize invoked.OffContract
									initialize invoked.CommodityCode
									initialize invoked.ManufacturerCode
									initialize invoked.ManufacturerDivision
									initialize invoked.ManufacturerNumber
									initialize invoked.UNSPSC
									initialize invoked.PurchMajcl
									initialize invoked.PurchMincl
									initialize invoked.PoDate
							else
								invoke Create InvoiceLineFact
									invoked.Company														= Company
									invoked.PayablesInvoice												= PayablesInvoice
									initialize invoked.InvoiceLineFact.CompanyPurchaseOrder
									initialize invoked.InvoiceLineFact.LineNumber
									invoked.InvoiceLineFact.LineSequenceNumber							= LocalLineSeqNbr
									invoked.PayablesDiversityCode										= DiversityCode
									invoked.ProcurementGroup											= VendorGroup
									invoked.InvoiceDate													= InvoiceDate
									invoked.MatchDate													= MatchDate
									invoked.CreateDate													= CreateDate
									invoked.InvoiceAmount												= InvoiceAmount.CurrencyAmount
									invoked.SpendAmount													= InvoiceAmount.CurrencyAmount
									invoked.CurrencyCode												= InvoiceCurrency
									invoked.OrigCnvRate													= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
									invoked.TaxTotalAmount												= TotalTaxAmount
									invoked.SpendCategory												= 4
									invoked.Buyer														= Buyer
									invoked.InvoiceStatus												= Status
									invoked.InvoiceYear													= InvoiceDate year
									invoked.InvoiceMonth												= InvoiceDate month
									if (InvoiceDate month > 3)
										if (InvoiceDate month > 6)
											if (InvoiceDate month > 9)
												invoked.InvoiceQuarter									= 4
											else
												invoked.InvoiceQuarter									= 3
										else
											invoked.InvoiceQuarter										= 2
									else
										invoked.InvoiceQuarter											= 1
									initialize invoked.Location
									initialize invoked.RequestingLocation
									initialize invoked.Item
									initialize invoked.ItemType
									initialize invoked.ItemDescription
									initialize invoked.VendorItem
									initialize invoked.MatchedQuantity
									initialize invoked.SpendQuantity
									initialize invoked.VpriUom
									initialize invoked.VpriUomMult
									initialize invoked.InvoiceUnitCost
									initialize invoked.PurchaseOrderUnitCost
									initialize invoked.InvoiceBaseUnitCost
									initialize invoked.CmContract
									initialize invoked.MfgContract
									initialize invoked.PreferredFlag
									initialize invoked.ReturnNumber
									initialize invoked.OffContract
									initialize invoked.CommodityCode
									initialize invoked.ManufacturerCode
									initialize invoked.ManufacturerDivision
									initialize invoked.ManufacturerNumber
									initialize invoked.UNSPSC
									initialize invoked.PurchMajcl
									initialize invoked.PurchMincl
									initialize invoked.PoDate
					else
					if ((Suffix	= 999
					or   Suffix	= 888)
					and  InvoiceDate year	> 1900)
						for each PayablesInvoiceDetailZeroSuffixRel
							LocalPoCompany				= Company
							LocalPurchaseOrder			= each.PurchaseOrder
							LocalPoNumber				= each.PurchaseOrder
							LocalLineNbr				= each.PurchaseOrderLine
							LocalMatchedQuantity		= (each.MatchedQuantity * -1)
							LocalInvoiceUnitCost		= each.EnteredUnitCost
							LocalTotBaseAmt				= (each.TotalBaseAmount * -1)
							LocalItem					= each.Item
							LocalItemType				= each.ItemType
							LocalItemDescription		= each.ItemDescription
							LocalVendorItem				= each.VendorItem
							LocalVpriUom				= each.VendorPriceUOM
							LocalVpriUomMult			= each.VendorPriceUOMMultiplier
							LocalContract				= each.Contract
							LocalCommodityCode			= each.CommodityCode
							if (each.ContractRel exists)
								LocalBuyer				= each.ContractRel.Buyer
							else
								LocalBuyer				= Buyer

							if (each.Contract entered)
								LocalCmContract			= each.Contract
							else
								initialize LocalCmContract











							include BuildDetailInvoiceLineFact
					else
					if (VendorReturn			entered
					and InvoiceDate year         > 1900)
						if (CancelDate entered)
							invoke Purge InvoiceLineFactsRel
						else
							for each VendorReturnLinesRel
								LocalPoCompany					= Company
								LocalPurchaseOrder				= each.OriginalPurchaseOrder
								LocalPoNumber					= each.OriginalPurchaseOrder
								LocalLineNbr					= each.OriginalPurchaseOrderLine
								if (each.VendorPriceUOMMultiplier			entered)
									LocalMatchedQuantity		= ((each.ReturnQuantity * each.EnteredUOMMultiplier / each.VendorPriceUOMMultiplier) * -1)
								else
									LocalMatchedQuantity		= (each.ReturnQuantity * -1)

								if (PurchaseOrderLineRel exists)
									LocalInvoiceUnitCost		= PurchaseOrderLineRel.EnteredUnitCost
								else
									initialize LocalInvoiceUnitCost



								LocalItem					= each.Item
								LocalItemType				= each.ItemType
								LocalItemDescription		= each.Description
								LocalVendorItem				= each.VendorItem
								LocalVpriUom				= each.VendorPriceUOM
								LocalVpriUomMult			= each.VendorPriceUOMMultiplier
								LocalContract				= each.Contract
								LocalCommodityCode			= each.OriginalPurchaseOrderLineRel.CommodityCode
								LocalBuyer					= each.OriginalPurchaseOrderLineRel.PurchaseOrder.Buyer
								LocalCmContract				= each.OriginalPurchaseOrderLineRel.Contract

								TransientTransactionAmount 		= (LocalMatchedQuantity * LocalInvoiceUnitCost)	
								TransientFromCurrency			= InvoiceCurrency
								TransientExchangeDate			= InvoiceDate
								if (InvoiceCurrency					!= Company.Currency)
									LocalContractCurrencyExchange.ToCurrency			= Company.Currency
									LocalContractCurrencyExchange.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
									initialize LocalContractCurrencyExchange.EnteredCurrencyAmount
									LocalTotBaseAmt				= LocalContractCurrencyExchange.OutputCurrencyAmount
								else
									LocalTotBaseAmt					= (LocalMatchedQuantity * LocalInvoiceUnitCost)

								initialize LocalCommodityCode
								include BuildDetailInvoiceLineFact
					else
					if (InvoiceDate year > 1900)
						for each PayablesInvoiceDetailRel
							LocalPoCompany				= Company
							LocalPurchaseOrder			= each.PurchaseOrder
							LocalPoNumber				= each.PurchaseOrder
							LocalLineNbr				= each.PurchaseOrderLine
							LocalMatchedQuantity		= each.MatchedQuantity
							LocalInvoiceUnitCost		= each.EnteredUnitCost
							LocalTotBaseAmt				= each.TotalBaseAmount
							LocalItem					= each.Item
							LocalItemType				= each.ItemType
							LocalItemDescription		= each.ItemDescription
							LocalVendorItem				= each.VendorItem
							if (each.ContractRel exists
							and each.ContractRel.ServicePurchaseType)
								LocalVpriUom			= each.EnteredUOM
							else
								LocalVpriUom			= each.VendorPriceUOM

							LocalVpriUomMult			= each.VendorPriceUOMMultiplier
							LocalContract				= each.Contract
							LocalCommodityCode			= each.CommodityCode
							if (each.ContractRel exists)
								LocalBuyer				= each.ContractRel.Buyer
							else
								LocalBuyer				= Buyer

							if (each.Contract entered)
								LocalCmContract			= each.Contract
							else
								initialize LocalCmContract











							include BuildDetailInvoiceLineFact
























































































































































































































		SetTaxValues is a Set Action			

			restricted
		    Parameters
		        PrmCompany is a PayablesCompany
		            default label is "Company"

		    Instance Selection
		        where ((PrmCompany = Company
		        or      PrmCompany not entered)
		        and    (Status.Released
		        or      Status.Amended
		        or      Status.Paid
		        or      Status.Historical))

		    Local Fields
		        LocalInvTaxAmt			is a CurrencyAmount
				LocalAccTaxAmt			is a CurrencyAmount		
			

		    Action Rules
		        Instance Rules

					if (MatchProcessType.Expense)
		                initialize LocalInvTaxAmt
						if (TaxAmount not = PayablesInvoiceTaxRel.TotalInvoicedTaxAmount)
		                    if (TaxAmount entered)
		                        LocalInvTaxAmt  = TaxAmount
		                    else
		                        LocalInvTaxAmt 	= sum NonVATReversalTaxDistibutionsRel.DistributionAmount.CurrencyAmount
		                        TaxAmount       = LocalInvTaxAmt

						initialize LocalAccTaxAmt		
						LocalAccTaxAmt		= sum NonVATReversalAccruedTaxDistibutionsRel.DistributionAmount.CurrencyAmount	
						
						if (LocalInvTaxAmt entered
						or  LocalAccTaxAmt entered)
							invoke Update PayablesInvoiceTaxRel
								if (LocalInvTaxAmt entered)
									invoked.TotalInvoicedTaxAmount		= LocalInvTaxAmt
									if (TaxableAmount entered)	
										invoked.TotalInvoicedTaxableAmount  = TaxableAmount
								if (LocalAccTaxAmt entered)
									invoked.TotalAccruedTaxAmount   	= LocalAccTaxAmt	
									if (TaxableAmount entered)	
										invoked.TotalAccruedTaxableAmount   = TaxableAmount

						TotalTaxAmount  = DerivedTotalTaxAmountField

					else
		                if (not MatchProcessType.Expense)
		                    if (PayablesInvoiceTaxRel not exists
		                    or (PayablesInvoiceTaxRel.TotalInvoicedTaxAmount not entered
		                    and PayablesInvoiceTaxRel.TotalAccruedTaxAmount not entered))
		                        invoke Update PayablesInvoiceTaxRel
		                            invoked.TaxCode = PayablesInvoice.TaxCode
		                            invoked.EnteredInvoiceAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount
		                            invoked.EnteredTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
		                            invoked.TotalInvoicedTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
		                            invoked.TotalAccruedTaxAmount = sum MatchOneSourceAccruedDistributionsRel.DistributionAmount.CurrencyAmount



		SetDocumentTotals is an Instance Action

			default label is untranslatable
			restricted
			Parameters
				PrmTotalDistributionAmount		is a PayablesCurrencyGroupTotals
			Action Rules


				initialize TotalDistributionAmount
				TotalDistributionAmount	= PrmTotalDistributionAmount


				include RoundTotalDistributionAmount		











		UpdateBasePaymentTotals is an Instance Action

			default label is untranslatable
			restricted
			Parameters
				PrmTotalPaymentAmount		is a PayablesCurrencyGroupTotals
			Action Rules
				initialize TotalPaymentAmount
				TotalPaymentAmount = PrmTotalPaymentAmount
				include RoundTotalPaymentAmount		

				include AdjustPaymentCurrencyAmounts


		AdjustDistributionsForCurrencyRounding is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				include AdjustDistributionCurrencyAmounts

		AdjustHistoricalDistributionsForCurrencyRounding is an Instance Action		
			default label is untranslatable
			restricted
			Action Rules
				include AdjustHistoricalDistributionCurrencyAmounts
















		CheckPrepaids is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				include CheckPrepaids

		CreateAccrualOffset is an Instance Action		
			default label is untranslatable				
			restricted
			Action Rules
				include CreateAccrualOffset

		CreateAddOnChargeDistribution is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				PrmAddOnCharge		is an AddOnCharge
				PrmAOCAmount		is an InternationalAmount
				PrmLandedAccount	is a FinanceCodeBlock
			Action Rules
				invoke Create PayablesInvoiceDistribution
					invoked.Company								= Company
					invoked.Vendor								= Vendor
					invoked.PayablesInvoice						= PayablesInvoice
					invoked.DistributionType 					= "D"
					invoked.DistributionDate					= DistributionDate
					invoked.AddOnCharge							= PrmAddOnCharge
					invoked.InvoiceCurrency						= InvoiceCurrency
					invoked.GLTCurrencyCode						= InvoiceCurrency
					invoked.DistributionAmount.CurrencyAmount 	= PrmAOCAmount
					invoked.GLTransactionAmount 				= PrmAOCAmount
					invoked.GLTSystem							= "AP"
					invoked.TransactionDate						= DistributionDate
					if (PrmAddOnCharge.LandedAddOnCharge)
						invoked.DistributionAccount				= PrmLandedAccount
						invoked.GLFinanceCodeBlock				= PrmLandedAccount
					else
						invoked.DistributionAccount				= PrmAddOnCharge.PostingAccount
						invoked.GLFinanceCodeBlock				= PrmAddOnCharge.PostingAccount
					if (PrmAddOnCharge.Taxable)												
						invoked.TaxIndicator					= 2							
						invoked.TaxCode							= PrmAddOnCharge.TaxCode	




		ProcessSabrixSeverityMessage is an Instance Action			
			default label is untranslatable
			restricted
			Parameters
				PrmSabrixErrorSeverity	is Alpha 1
					States
						Informational	value is "0"
						Warning			value is "1"
						Severe			value is "2"
				PrmSabrixMessage		is Text
			Action Rules
				SabrixMessage = PrmSabrixMessage
				if (PrmSabrixErrorSeverity.Warning)
					SabrixError = "Warning"
				else
				if (PrmSabrixErrorSeverity.Severe)
					SabrixError = "Severe"
				else
					initialize SabrixError



		ClearBackgroundProcessing is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				initialize BackgroundProcessing

		MatchEdits is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				InAutoMatch is Boolean
			Action Rules
				TransientInAutoMatch = InAutoMatch
				include MatchEdits

		OneSourceMatchEdits is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				TransientBypassBackgroundEdit = true
				TransientBypassOneSource = true
				include MatchEdits

		OneSourceMatch is an Instance Action
			valid when (AllowMatchOneSource)
			default label is "Match"
			Exit Rules

				invoke OneSourceMatchEdits


				invoke Purge PayablesInvoiceError set

				BackgroundProcessing = BackgroundProcessing.MatchInvoice


				if  (OneSourceMatchOneCallPerInvoice)
					initialize DistribCount
					for each PayablesInvoiceDistributionDistributionTypeDistributionsRel
						DistribCount += 1
						if (DistribCount > NumberOfLinesForOneSourceMatchProcessByInvoice)
							end for each
						else
						if (each.DistributionAccount.ToAccountingEntity != Company.AccountingEntity)
							DistribCount = NumberOfLinesForOneSourceMatchProcessByInvoice + 1
							end for each



				if (CreditForRebill)

					invoke OneSourceCreditRebillMatch PayablesInvoiceDistribution
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice
				else
				if  (OneSourceMatchOneCallPerInvoice
				and  (DistribCount < NumberOfLinesForOneSourceMatchProcessByInvoice))


					invoke LoadOneSourceForMatch PayablesInvoiceDistribution
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice
				else
				if (TaxConfigurationRel.OneSourceVersionType.Generic)

					invoke ProcessOneSourceForMatch PayablesInvoiceDetail
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice
				else

					invoke ProcessOneSourceForMatch PayablesInvoiceDistribution
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice

		VertexMatch is an Instance Action
			valid when (AllowMatchOneCallVertex)
			default label is "Match"
			Exit Rules

				constraint (AllowMatchOneCallVertex)
					"ThisInvoiceDoesNotQualifyForSingleCallToVertex"

				TransientBypassBackgroundEdit = true
				TransientBypassOneSource = true
				invoke MatchEdits


				invoke Purge PayablesInvoiceError set

				BackgroundProcessing = BackgroundProcessing.MatchInvoice


				if (CreditForRebill)

					invoke VertexCreditRebillMatch PayablesInvoiceDistribution
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice
				else
				if  (DetailCountExceedsVertexOneCallSetting)
					invoke ProcessVertexSet PayablesInvoiceDetail
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice
						invoked.PrmMatchFrom = 3  
				else 
					invoke ProcessVertexForMatch PayablesInvoiceDetail
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice

		OldOneSourceMatchEdits is an Instance Action
			restricted
			Action Rules
				TransientBypassBackgroundEdit = true
				include MatchEdits

		OldOneSourceMatch is an Instance Action
			valid when (AllowOldMatchOneSource)
			default label is "OldOneSourceMatch"
			Exit Rules
				BackgroundProcessing = BackgroundProcessing.MatchInvoice

				invoke OldOneSourceMatchSet
					invoked.PrmCompany = Company
					invoked.PrmPayablesInvoice = PayablesInvoice

		OldOneSourceMatchSet is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice  is a PayablesInvoice

			Instance Selection
				where (Company	= PrmCompany
				and    PayablesInvoice	= PrmPayablesInvoice)

			Action Rules





				Instance Rules


					if  (MatchReconQueueRel exists
					and  MatchReconQueueRel.MatchWork entered)
						invoke PurgeDetail MatchWorkRel
						invoke Purge MatchWorkRel
						invoke FastUpdate MatchReconQueueRel
							initialize invoked.MatchWork

					initialize TransientAutoMatchError

					invoke CreateOnly MatchWork
						resume on error
			   				TransientAutoMatchError = error message
						assign result to NewMatchWork
						invoked.Company						= Company
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.MatchPoint					= "1"
						if (invoking action like "*Batch*")
							invoked.ProcessMode				= "B"
						else
							invoked.ProcessMode				= "O"
						invoked.DocumentType				= "I"
						invoked.BypassValidateMatchInvoiceBalance = true



					if  (TransientAutoMatchError not entered)
						if  (!MatchReconQueueRel exists)
							invoke CreateForBudgetProcessing MatchReconQueue
								invoked.Company				= Company
								invoked.PayablesInvoice		= PayablesInvoice
								invoked.MatchWork			= NewMatchWork.MatchWork
						else
							invoke FastUpdate MatchReconQueueRel
								invoked.MatchWork			= NewMatchWork.MatchWork


						invoke OldOneSourceMatchEdits
							resume on error
				   				TransientAutoMatchError = error message

					if  (TransientAutoMatchError entered)


						invoke OneSourceResetDistributions PayablesInvoiceDistribution
							invoked.PrmCompany = Company
							invoked.PrmPayablesInvoice = PayablesInvoice
						initialize BackgroundProcessing
						invoke Update NewMatchWork.MatchWork
							invoked.VerifyMatchMessage = TransientAutoMatchError
					else

						invoke BatchMatch NewMatchWork.MatchWork
							invoked.PrmCompany 			= Company
							invoked.PrmInvoice 			= PayablesInvoice
							invoked.PrmMatchWork 		= NewMatchWork.MatchWork


		InvoiceUpdate is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				FromPayablesInvoiceUpdateAction			is Boolean
				ResetBackgroundProcessing				is Boolean

			Action Rules


				if  (ResetBackgroundProcessing)
					initialize BackgroundProcessing
					initialize InterfaceInProcess

				if (!MatchProcessType.Expense)
					if  (MatchAgingRel exists
					and  !InterfaceInProcess)
						if  ((InvoiceType.Invoice 
						or    Suffix not entered)
						and  MatchAgingInvoiceRel not exists)
							invoke Create MatchAgingInvoice 
								invoked.Company = Company
								invoked.PayablesInvoice = PayablesInvoice

				initialize MatchAmount
				initialize HashQuantity
				initialize POTaxAmount
				initialize ServiceAmount
				initialize MatchedAddOnChargeAmount
				initialize AddOnChargeAmount
				initialize FreightTotal
				initialize InsuranceTotal
				initialize CustomsTotal
				initialize OtherAddOnChargesTotal

				LocalHasServiceLine 		= false
				LocalHasNonServiceLine 	= false

				for each PayablesInvoiceDetailRel



					if (TaxEntityUsesSabrix
					or TaxEntityRel.ThirdParty.TaxEngine)
						NextSentence = true
					else
					if (each.IsInvoicedTaxCode				
					or  each.TaxCode.TaxType.TaxTableCode)		
						if  (TaxEntityUsesThirdPartyTax
						and  TaxAmount not entered)
							NextSentence = true
						else
							POTaxAmount 				+= each.TaxAmount

					if (each.ItemType.Service)
						ServiceAmount					+= each.TotalDistributionAmount
						LocalHasServiceLine				= true
					else
						MatchAmount						+= each.TotalDistributionAmount 
						HashQuantity					+= each.MatchedQuantity
						LocalHasNonServiceLine			= true


					if (PayablesInvoice.CreditOrDebitMemo
					and each.MemoAdjustType not entered)
						invoke PopulateMemoAdjustType each

				if  (MatchProcessType.ReceiptMatch
				or   MatchProcessType.Service)
					if  (LocalHasServiceLine
					and  !LocalHasNonServiceLine)
						MatchProcessType = MatchProcessType.Service
					else
					if  (LocalHasNonServiceLine)
						MatchProcessType = MatchProcessType.ReceiptMatch
				else 
				if (MatchProcessType.DropShip 
				and !FirstPurchaseOrder.Dropship)
					for each MatchPurchaseOrderInvoicesRel
						invoke UpdateMatchProcessType each 
						end for each  

				for each PayablesInvoiceAddOnChargeRel

					MatchedAddOnChargeAmount			+= each.AddOnChargeAmount
					AddOnChargeAmount					+= each.AddOnChargeAmount

					if  (TaxEntityRel.ThirdParty.Sabrix 
					or TaxEntityRel.ThirdParty.TaxEngine)
						NextSentence = true
					else
						POTaxAmount			 				+= each.TaxAmount

					if (each.TrackType.Freight)
						FreightTotal					+= each.TotalDistributionAmount
					if (each.TrackType.Insurance)
						InsuranceTotal					+= each.TotalDistributionAmount
					if (each.TrackType.CustomsCharges)

						CustomsTotal					+= each.TotalDistributionAmount
					if (each.TrackType.OtherAOC)
						OtherAddOnChargesTotal			+= each.TotalDistributionAmount

				if (TaxEntityRel.ThirdParty.TaxEngine)
					POTaxAmount = TaxAmount

				if  (MatchAmount not entered
				and  !InvoiceSource.CreditForRebill
				and (MatchProcessType.ReceiptMatch
				or  (MatchProcessType.DropShip
				and !FirstPurchaseOrder.HasServiceLinesOnly)))
					if   (InvoiceType.MatchPrepayment
					and   MatchPrepaymentMethod.PrepayFromInvoice)
						MatchAmount					= InvoiceAmount.CurrencyAmount - TaxAmount

					if  (TaxCode entered)
						if (ProcessOneSourceValid
						or  ProcessVertexValid)
							NextSentence = true
						else
							CalculateTax.TaxEntity		= Company.AccountingEntity
							CalculateTax.TaxCode		= TaxCode
							CalculateTax.Function		= CalculateTax.Function.Inquire
							include LoadVertexGlobalInputFields
							include DisplayCalculateTaxInput
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
							include DisplayCalculateTaxOutput
						if (CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "I")
							if (!TaxAdjustment.Calculate)
								MatchAmount			= (InvoiceAmount.CurrencyAmount - (AddOnChargeAmount + TotalDistributionAmount + ServiceAmount + TaxAmount))
							else
								MatchAmount			= (InvoiceAmount.CurrencyAmount - (AddOnChargeAmount + TotalDistributionAmount + ServiceAmount))
						else
							MatchAmount				= (InvoiceAmount.CurrencyAmount - (AddOnChargeAmount + TotalDistributionAmount + ServiceAmount) - POTaxAmount)
					else
						if (TaxAmount entered)
							MatchAmount				= (InvoiceAmount.CurrencyAmount - (AddOnChargeAmount + TotalDistributionAmount + ServiceAmount + TaxAmount))
						else
							MatchAmount				= (InvoiceAmount.CurrencyAmount - (AddOnChargeAmount + TotalDistributionAmount + ServiceAmount) - TotalTaxAmount)

					if  (TaxCode.TaxType.CalculatedRate)
						POTaxAmount						= TaxAmount

				round MatchAmount to nearest DerivedRoundTo
				round AddOnChargeAmount to nearest DerivedRoundTo
				round ServiceAmount to nearest DerivedRoundTo
				round POTaxAmount to nearest DerivedRoundTo

				if  (NotMatched
				and  !Status.Released
				and  !MatchProcessType.Expense
				and  !IsChargebackSubType
				and  ((TermsCode entered
				and    DiscountCode entered)
				or 	   AllowableAmountForDiscount	entered))

					AllowableAmountForDiscount 		= CalculatedAllowableAmount

					WorkCost  					= AllowableAmountForDiscount * DiscountPercent
					round WorkCost to nearest DerivedRoundTo 
					DiscountAmount.CurrencyAmount = WorkCost 

					include ProcessTierDiscounts													

				if (OpenMatchInvoiceMessagesRel exists)
					MatchStatus					= 1
				else
				if (MatchStatus.POCostMessagesExist)
					initialize MatchStatus

				if (IsPOCancel
				or  IsChargeback)
					NextSentence = true
				else
					if  (!action type.Create)				
						include UpdateErrorRecords

					if (ErrorsExists)
						invoke PurgeSetsAndResourceRecords MatchReconQueueRel
						invoke PurgeDetail MatchWorkRel
						invoke Purge MatchWorkRel
						invoke Purge MatchReconQueueRel
					else
					if (!MatchProcessType.Expense
					and Suffix not entered)
						invoke CheckAndCreateReconciliationQueueRecord

					if (!FromPayablesInvoiceUpdateAction)
						include CheckPrepaids

		BatchValidateMatchInvoiceBalance	is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				initialize TransientAutoMatchError
				invoke ValidateMatchInvoiceBalance
					resume on error
						TransientAutoMatchError = error message

		ValidateMatchInvoiceBalance	is an Instance Action			
			default label is untranslatable
			restricted

			Action Rules
				DoConstraints = true
				include ValidateMatchInvoiceBalanceEdits

		CreateDetailFromContract is an Instance Action   
			default label is "CreateDetailForAllContractLines"
			valid when (CreateContractDetailValid)
			Local Fields
				LocalLineCount						is Numeric 9
			Entrance Rules
				constraint (PayablesInvoice.MatchStatus.Unmatched)
					"InvoiceHasBeenMatched"
			Action Rules
				if (HasMultipleServiceContracts)
					for each MatchServiceContractInvoicesRel
						initialize LocalLineCount
						for each each.ContractLineRel
							if  (each.ContractLineState.Active
							and  each.CanUseForInvoicePayment
							and  !each.ErrorsExist
							and  !each.OnHold)

								invoke Active.UpdateInvoiceDetailsFromContractLine each
									if (each.ServiceCode.Amount)
										invoked.PrmQuantity					= 1
										invoked.PrmUnitCost					= each.DerivedRemainingAmountInUse
									else
										invoked.PrmQuantity					= each.DerivedRemainingQuantityOrdered
										invoked.PrmUnitCost					= each.BaseCost
								LocalLineCount += 1
				else 
					initialize LocalLineCount
					for each ContractLineRel
						if  (each.ContractLineState.Active
						and  each.CanUseForInvoicePayment
						and  !each.ErrorsExist
						and  !each.OnHold)

							invoke Active.UpdateInvoiceDetailsFromContractLine each
								if (each.ServiceCode.Amount)
									invoked.PrmQuantity					= 1
									invoked.PrmUnitCost					= each.DerivedRemainingAmountInUse
								else
									invoked.PrmQuantity					= each.DerivedRemainingQuantityOrdered
									invoked.PrmUnitCost					= each.BaseCost
							LocalLineCount += 1

				invoke InvoiceUpdate

			Exit Rules
				if (LocalLineCount entered)
					LocalCompletionMessage = CreateDetailCompleteMessage + LocalLineCount + LinesAddedMessage
				else
					LocalCompletionMessage = CreateDetailCompleteMessage + LinesNotCreated

		BatchMatchSet is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice  is a PayablesInvoice

			Instance Selection
				where (Company	= PrmCompany
				and    PayablesInvoice	= PrmPayablesInvoice)

			Action Rules
				Instance Rules
					if (Status.Unreleased)
						invoke Unreleased.Match
					else
					if (Status.Released)
						invoke Released.Match


		BuildSmartReconciliationQueue is a Set Action 
			restricted
			completion message is "BuildSmartReconciliationQueueComplete"
			Parameters
				RunOption					is Numeric 1
					States
						Update				value is 1
						Delete				value is 2

				HROrganization
				PrmAPClerk					is a FinanceResource
					context of HROrganization
					default label is "Processor"
				PrmCompany						is a PayablesCompany 
				PrmVendorGroup					is a VendorGroup
				PrmVendor						is a Vendor
					context of PrmVendorGroup
				PrmCompanyGroup					is a GeneralLedgerCompanyGroup 

			Parameter Rules
				RunOption
					required
					default to RunOption.Update
					initial value is RunOption.Update
				PrmAPClerk
					BypassActiveResourceEdit = true
				PrmCompany
					if (PrmCompanyGroup entered)
						cannot be entered
							"CannotEnterCompanyIfCompanyGroupEntered"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"
				PrmVendorGroup
					if (PrmCompany entered)
						default to PrmCompany.VendorGroup
						constraint (PrmCompany.VendorGroup = PrmVendorGroup)
							"EnteredVendorGroupMustEqualVendorGroupOnEnteredCompany"

			Instance Selection
				where	(((PrmCompany 	entered
				and		PrmCompany 		= Company)
				or		PrmCompany 		not entered)
				and		((PrmCompanyGroup			entered
				and		GeneralLedgerCompanyGroup	entered
				and		GeneralLedgerCompanyGroup = PrmCompanyGroup)
				or		PrmCompanyGroup not entered)
				and    ((PrmVendorGroup entered
				and		 PrmVendorGroup = VendorGroup)
				or       PrmVendorGroup not entered)
				and		((PrmVendor		entered
				and		PrmVendor		= Vendor)
				or		PrmVendor		not entered)
				and    !MatchProcessType.Expense
				and     AvailableForReconciliationQueue
				and     Suffix not entered)

			Action Rules
				Empty Set Rules
					invoke Purge MatchedReconQueueRel

				Set Rules
					Entrance Rules
						invoke Purge MatchedReconQueueRel

				Instance Rules

					if (RunOption.Update)
						if  (!MatchReconQueueRel exists)
							invoke Create MatchReconQueue
								invoked.Company				= Company
								invoked.PayablesInvoice		= PayablesInvoice
					else
					if (RunOption.Delete)
						if  (PrmAPClerk entered
						and  APClerk = PrmAPClerk)
							invoke Purge MatchReconQueueFinanceResourceRel
						else
						if  (PrmAPClerk not entered)
							initialize LocalAPClerk
							invoke Purge MatchReconQueueFinanceResourceRel


		AddToQueue is an Instance Action
			default label is "AddToReconciliationList"
			valid when (NotMatchedAndNotInQueue)
			Action Rules

				constraint (!MatchStatus.POCostMessagesExist)
					"OpenMessagesExist;CannotAddToQueue"

			   	constraint  (Status.Approved
			   	or           Status.Released
		   		or  		!RoutingRuleFound)
					"InvoiceMustBeApprovedOrNotHaveARoutingRule"

				if (!TaxEntityUsesSabrix)
					constraint (!PayablesInvoiceErrorRel exists)
						"InvoiceHasErrors,CannotAddToQueue"

				constraint (Suffix not entered)
					"InvoiceHasASuffix,CannotBeAddedToQueue"

				if (!HasInvoiceLines)
					constraint (HasInvoiceMatchRuleGroup
					or         (MatchPrepayment
					and         MatchPrepaymentMethod.PrepayFromInvoice))
						"CannotAddToQueue,InvoiceDoesNotHaveDetails"

				invoke Create MatchReconQueue
					invoked.Company				= Company
					invoked.PayablesInvoice		= PayablesInvoice

		CheckAndCreateReconciliationQueueRecord is an Instance Action
			default label is untranslatable
			restricted
			Action Rules

				if  (MatchReconQueueRel exists)
					invoke FastUpdate MatchReconQueueRel
						invoked.Vendor							= Vendor
						invoked.VendorSearchName        		= Vendor.VendorSearchName
						invoked.Invoice							= Invoice
						invoked.Suffix							= Suffix
						invoked.CancelSequence        			= CancelSequence
						invoked.DueDate							= DueDate
						invoked.InvoiceAmount           		= InvoiceAmount.CurrencyAmount
						if (invoked.View.MatchComplete)
							if  (Vendor.RequireMatchReference)
								invoked.View = 1
							else
							if  (RuleGroup entered
							and  !MatchProcessType.Service
							and  !MatchProcessType.ServiceContract 
							and  !MatchProcessType.DropShip
							and  RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].InvoiceMatchLevel.InvoiceMatch)
								invoked.View = 1
							else
							if (MatchCompanyRel.MatchTable.RuleGroup1.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].InvoiceMatchLevel.InvoiceMatch)
								invoked.View = 1
							else
							if (MatchPrepayment
							and MatchPrepaymentMethod.PrepayFromInvoice)
								invoked.View = 1
							else
							if (MatchPrepayment
							and MatchPrepaymentMethod.EligibleForPrepay)
								invoked.View = 2
							else
							if (!HasInvoiceLines)
								invoked.View = 1
							else
								invoked.View = 2
				else
				if   (AvailableForReconciliationQueue
				and   Suffix not entered
				and  (HasInvoiceLines
				or    MatchPrepaymentMethod.PrepayFromInvoice
				or    HasInvoiceMatchRuleGroup)
				and  !InvoiceErrorsExists)
					invoke Create MatchReconQueue
						invoked.Company				= Company
						invoked.PayablesInvoice		= PayablesInvoice

		CheckRoutingRules is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (RoutingRuleFound)
					RequiresApproval = true
				else
					RequiresApproval = false


		DetailMatchPrepaymentReconciliation is an Instance Action
			default label is "DetailMatch"
			valid when (AllowPrepaymentDetailMatch)
			disable multiple instance selection
			Action Rules
				if  (!MatchReconQueueRel exists)
					invoke Create MatchReconQueue
						invoked.Company				= Company
						invoked.PayablesInvoice		= PayablesInvoice
			Exit Rules
				invoke PrepareDetailMatch MatchReconQueueRel

		InvoiceMatchPrepaymentReconciliation is an Instance Action
			default label is "InvoiceMatch"
			valid when (UnmatchedMatchPrepayment)
			disable multiple instance selection
			Action Rules
				if  (!MatchReconQueueRel exists)
					invoke Create MatchReconQueue
						invoked.Company				= Company
						invoked.PayablesInvoice		= PayablesInvoice
			Exit Rules
				invoke PrepareInvoiceMatch MatchReconQueueRel

		AOCOnlyReconciliation is an Instance Action
			default label is "Reconcile"
			valid when (UnmatchedAOCOnly)
			disable multiple instance selection
			Action Rules
				if  (!MatchReconQueueRel exists)
					invoke Create MatchReconQueue
						invoked.Company				= Company
						invoked.PayablesInvoice		= PayablesInvoice
			Exit Rules
				invoke PrepareAOCMatch MatchReconQueueRel






		AssignAPClerk is an Instance Action
			default label is "AssignProcessor"
			valid when (AssignAPClerkValid)
			subject is AssignInvoice 
			completion message is "InvoiceAssignedTo<APClerk.PreferredSimplePresentationName>"
			Parameters
				AssignmentMethod	is a ClerkAssignmentMethod
				ThisResource		is a FinanceResource
					default label is "CurrentProcessor"	
				AssignedTeam		is a FinanceTeam							

			Parameter Rules
				AssignmentMethod
					initial value is 1
				ThisResource
					if (AssignmentMethod.AssignSpecificAPClerk)
						required
							"ProcessorRequiredForSelectedAssignmentMethod"
				AssignedTeam													
					constraint (AssignmentMethod.AssignToTeam)
						"AssignedTeamOnlyValidIfAssigningToATeam"
					if (AssignmentMethod.AssignToTeam)
						required
							"AssignedTeamRequiredForSelectedAssignmentMethod"

			Action Rules
				if (Company.RequireReasonForInvoiceAssignment)
					constraint (reason code entered)
						"ReasonCodeRequiredForInvoiceAssignment" 
					constraint (action comment entered)
						"CommentRequiredForInvoiceAssignment" 

				if (AssignmentMethod.AutoAssignAPClerk)
					initialize ThisResource
					initialize ProcessingTeam									
					include SetDefaultClerkLocalFields
					constraint (LocalAPClerk 		entered
					or			LocalProcessingTeam entered)					
						"ProcessorCouldNotBeAutoAssigned;InvoiceDoesNotMatchAnyAssignmentRules."

				if (AssignmentMethod.AssignSpecificAPClerk)
					APClerk = ThisResource
					initialize ProcessingTeam									
				else
				if (AssignmentMethod.AssignToMe)
					initialize ThisResource
					initialize ProcessingTeam									
					APClerk = actor.agent(Employee).Employee
				else															
				if (AssignmentMethod.AssignToTeam)								
					ProcessingTeam	= AssignedTeam								
					initialize ThisResource										
					initialize APClerk											
				else	
					APClerk 		= LocalAPClerk
					ProcessingTeam	= LocalProcessingTeam						

			Exit Rules 
				if (Company.RequireReasonForInvoiceAssignment
				or  action comment entered)
					invoke Create PayablesInvoiceComment 
						invoked.Company					= Company			
						invoked.PayablesInvoice			= PayablesInvoice
						if (reason code entered)	
							invoked.Title				= reason code 
						else 
							invoked.Title				= InvoiceAssignMsg 

						invoked.Comment					= action comment 	
						invoked.Type					= "N"		

				if  (InvoiceType.MatchPrepayment)
					include CheckPrepaids

		ReassignAPClerk is an Instance Action
			default label is "ReassignProcessor"
			valid when (ReassignAPClerkValid)
			subject is AssignInvoice 
			completion message is "InvoiceAssignedTo<APClerk.PreferredSimplePresentationName>"
			Parameters
				ThisResource		is a FinanceResource
					default label is "NewProcessor"
				AssignedTeam		is a FinanceTeam							
				AssignmentMethod	is a ClerkAssignmentMethod

			Parameter Rules
				ThisResource
					if (AssignmentMethod.AssignSpecificAPClerk)
						required
							"ProcessorRequiredForSelectedAssignmentMethod"
				AssignedTeam													
					constraint (AssignmentMethod.AssignToTeam)
						"AssignedTeamOnlyValidIfAssigningToATeam"
					if (AssignmentMethod.AssignToTeam)
						required
							"AssignedTeamRequiredforSelectedAssignmentMethod"
				AssignmentMethod
					initial value is 1

			Action Rules
				if (Company.RequireReasonForInvoiceAssignment)
					constraint (reason code entered)
						"ReasonCodeRequiredForInvoiceAssignment" 
					constraint (action comment entered)
						"CommentRequiredForInvoiceAssignment" 

				if (AssignmentMethod.AutoAssignAPClerk)
					initialize ThisResource
					initialize ProcessingTeam									
					include SetDefaultClerkLocalFields
					constraint (LocalAPClerk 		entered
					or			LocalProcessingTeam entered)					
						"ProcessorCouldNotBeAutoAssigned;InvoiceDoesNotMatchAnyAssignmentRules."

				if (AssignmentMethod.AssignSpecificAPClerk)
					APClerk = ThisResource
					initialize ProcessingTeam									
				else
				if (AssignmentMethod.AssignToMe)
					initialize ThisResource
					initialize ProcessingTeam									
					APClerk = actor.agent(Employee).Employee
				else															
				if (AssignmentMethod.AssignToTeam)								
					ProcessingTeam	= AssignedTeam								
					initialize ThisResource										
					initialize APClerk											
				else	
					APClerk 		= LocalAPClerk
					ProcessingTeam	= LocalProcessingTeam						

			Exit Rules 
				if (Company.RequireReasonForInvoiceAssignment
				or  action comment entered)
					invoke Create PayablesInvoiceComment 
						invoked.Company					= Company			
						invoked.PayablesInvoice			= PayablesInvoice	
						if (reason code entered)	
							invoked.Title				= reason code 
						else 
							invoked.Title				= InvoiceReassignMsg 
						invoked.Comment					= action comment 	
						invoked.Type					= "N"		

		EmailResponsiblePerson is an Instance Action
			valid when (EmailResponsiblePersonValid)
			default label is "EmailCurrentApprover(s)"
			run in background
			completion message is "EmailSent"
			Parameters
				ToEmail			is EmailAddressField with multiple addresses 
					holds pii
				FromEmail		is an EmailAddress 
					holds pii
				CCEmail			is EmailAddressField with multiple addresses 
					holds pii
				BccEmail		is EmailAddressField with multiple addresses 
					holds pii
				Subject			is Text
				EmailContents	is RichText

			Parameter Rules
				ToEmail
					required
					initial value is DerivedToEmail
				FromEmail
					required
					initial value is actor.agent(Employee).Employee.EmployeeWorkEmailAddress
				Subject
					required
					initial value is "Invoice " + Invoice + " for Vendor " + Vendor.VendorName + " is pending your approval"
				EmailContents
					required

			Action Rules
				send email
					to ToEmail
					from FromEmail
					cc CCEmail
					bcc BccEmail
					subject "<Subject>"
					Attachments
						if (InvoiceImageEntered)
							attachment PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File
								name is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.Title
								mime type is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.MimeType
						if (Company.VendorGroup.InvoiceApprovalIncludeRelatedDocs)
							for each PayablesInvoiceDocumentNonInvoiceTypeRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						"<EmailContents>"
						"<DerivedEmailLink>"

			Exit Rules
				invoke Create PayablesInvoiceEmail
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.SentToEmailAddressText	= ToEmail
					invoked.SentToCcText			= CCEmail
					invoked.SentToBccText			= BccEmail
					invoked.SentFromFinanceResource	= actor.agent(Employee).Employee
					invoked.SentFromEmailAddress	= FromEmail
					invoked.EmailSubjectLine		= Subject
					invoked.EmailContent			= EmailContents
					invoked.NotificationType		= 3	

		EmailInvoice is an Instance Action
			valid when (CanEmailInvoice)
			run in background
			completion message is "EmailSent"
			disable multiple instance selection
			Parameters
				ToEmail			is EmailAddressField with multiple addresses 
					holds pii
				FromEmail		is an EmailAddress 
					holds pii
				CCEmail			is EmailAddressField with multiple addresses 
					holds pii
				BccEmail		is EmailAddressField with multiple addresses 
					holds pii
				Subject			is Text
				EmailContents	is RichText
				ToResource		is a FinanceResource

			Parameter Rules
				ToEmail
					constraint (!ToResource entered)
						"EnterEitherAnEmailAddressOrAResource,NotBoth"
					if (ToResource not entered)
						required
							"MustSelectToSendEmailToAResourceOrToAnEmailAddress"
				ToResource
					constraint (ToResource.EmailAddressAvailable)
						"To_\ResourceMustHaveAnEmailAddress"
				FromEmail
					required
						"EmailInvoiceFailed.FromEmailCouldNotBeFound.ConfigurationIsIncomplete."
					default to PfiConfigurationGroupFromEmailPropertyRel.Value
					default to actor.agent(Employee).Employee.EmployeeWorkEmailAddress
					default to PfiConfigurationFromEmailPropertyRel.Value
				Subject
					required
					initial value is Company.VendorGroup.FinalInvoiceEmailSubject
				EmailContents
					required
					initial value is Company.VendorGroup.FinalInvoiceEmailContent

			Local Fields
				LocalToEmail is EmailAddressField with multiple addresses

			Action Rules
				if (ToResource entered)
					LocalToEmail = ToResource.EmailAddress
				else
					LocalToEmail = ToEmail
				send email
					to LocalToEmail
					from FromEmail
					cc CCEmail
					bcc BccEmail
					subject "<Subject>"
					Attachments
						if (InvoiceImageEntered)
							attachment PayablesInvoiceDocumentInvoiceTypeRel.Attachment.File
								name is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.Title
								mime type is PayablesInvoiceDocumentInvoiceTypeRel.Attachment.MimeType
						if (Company.VendorGroup.InvoiceEmailIncludeRelatedDocs)
							for each PayablesInvoiceDocumentNonInvoiceTypeRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						"<EmailContents>"

			Exit Rules
				invoke Create PayablesInvoiceEmail
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.SentToEmailAddressText	= LocalToEmail
					invoked.SentToCcText			= CCEmail
					invoked.SentToBccText			= BccEmail
					invoked.SentFromFinanceResource	= actor.agent(Employee).Employee
					invoked.SentFromEmailAddress	= FromEmail
					invoked.EmailSubjectLine		= Subject
					invoked.EmailContent			= EmailContents
					invoked.NotificationType		= 4	

		EmailNoReceiptInPool is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				send email
					to FirstPurchaseOrder.Buyer.EmailAddress
					from config.DefaultFromEmailAddress
					subject "NotificationOfInvoiceMissingReceipt"
					Contents
						"Vendor:<Vendor>_\<Vendor.VendorName>"
						"Invoice_\Number:<PayablesInvoice.Invoice>"
						"Invoice_\Amount<InvoiceAmount.CurrencyAmount>"
						"Invoice_\Date:<InvoiceDate>"
						"Due_\Date:<DueDate>"
						"Purchase_\Order:<FirstPurchaseOrder>"
						"Processor:<APClerk.Employee.Name.PreferredFirstAndLastName>"
						"Processor_\Email:<APClerk.Employee.EmployeeWorkEmailAddress>"
						"Processor_\Phone:<APClerk.Employee.EmployeeWorkTelephone>"



		UpdateRoutingCode is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmRoutingCode	is an InvoiceRoutingCode
			Action Rules
				RoutingCode	= ParmRoutingCode


		UpdateResponsiblePersonTeam is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmCurrentApprover	is a FinanceResource
				ParmCurrentTeam		is a FinanceTeam
				ParmCurrentRole		is a InvoiceApprovalAuthCode
				ParmWorkUnit		is a PfiWorkunit
				ParmEscalated		is Boolean					
			Action Rules
				ResponsiblePerson	= ParmCurrentApprover
				ResponsibleTeam		= ParmCurrentTeam
				LocalEscalated		= ParmEscalated
				if (ResponsibleTeam entered		
				and RoutingCode.UsesTeamMemberAssignment
				and RoutingFinanceTeam entered
				and ResponsibleTeam = RoutingFinanceTeam)
					ResponsiblePerson = RoutingFinanceTeamMember
				ResponsibleRole		= ParmCurrentRole
				if (Workunit not entered)
					Workunit = ParmWorkUnit
				if (SingleApprovalResource)
					ResponsiblePerson = first FinanceResourceInvApprovalRel.FinanceResource
				invoke CreateNoRules PayablesInvoiceAudit
					invoked.Company			= Company
					invoked.PayablesInvoice	= PayablesInvoice
					invoked.Resource		= ResponsiblePerson
					invoked.Team			= ParmCurrentTeam
					invoked.Role			= ParmCurrentRole
					invoked.Status			= 1		
					invoked.UpdateDate		= current timestamp
					invoked.InvoiceRoutingCodeGroup	= InvoiceRoutingCodeGroup	
					invoked.InvoiceRoutingCodeGroupLevel = InvoiceRoutingCodeGroupLevel	
					invoked.InvoiceRoutingCode		= RoutingCode				
					invoked.RoutingApprovalLevel	= RoutingApprovalLevel		
					invoked.Workunit		= Workunit							
					invoked.InvoiceRoutingCategory	= RoutingCategory			
				if (ParmCurrentApprover entered
				or (RoutingCode.UsesTeamMemberAssignment						
				and ResponsiblePerson entered))									




					if (ResponsiblePerson.NotifyWhenInvoiceSubmitted)			
						LocalEmailAddress = ResponsiblePerson.EmailAddress
						include SendAvailableInvoiceMessage
						LocalProxyActor = ResponsiblePerson.FinanceResourceActor
					if (ActorProxyRel exists)
						for each ActorProxyRel
							if (each.Proxy.IsActive
							and each.Proxy.IsEnabled)
								LocalActor = each.ActorProxy.Grantee
								LocalFinanceResource = first AgentRel.BusinessObjectRef(Employee).Employee
								if (LocalFinanceResource.NotifyWhenInvoiceSubmitted)
									LocalEmailAddress = LocalFinanceResource.EmailAddress
									include SendAvailableInvoiceMessage
				if (ParmCurrentTeam entered)
					if (!RoutingCode.UsesTeamMemberAssignment		
					or  (RoutingCode.UsesTeamMemberAssignment		
					and  ResponsiblePerson !entered))				
						for each ParmCurrentTeam.FinanceTeamMemberRel
							if (each.FinanceTeamMember.TeamMember.NotifyWhenInvoiceSubmitted)
								LocalEmailAddress = each.FinanceTeamMember.TeamMember.EmailAddress
								include SendAvailableInvoiceMessage
								LocalProxyActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (ActorProxyRel exists)
									for each ActorProxyRel
										if (each.Proxy.IsActive
										and each.Proxy.IsEnabled)
											LocalActor = each.ActorProxy.Grantee
											LocalFinanceResource = first AgentRel.BusinessObjectRef(Employee).Employee
											if (LocalFinanceResource.NotifyWhenInvoiceSubmitted)
												LocalEmailAddress = LocalFinanceResource.EmailAddress
												include SendAvailableInvoiceMessage
				if (ParmCurrentRole entered)
					for each FinanceResourceInvApprovalRel
						if (each.FinanceResource.NotifyWhenInvoiceSubmitted)
							LocalEmailAddress = each.FinanceResource.EmailAddress
							include SendAvailableInvoiceMessage
							LocalProxyActor = each.FinanceResource.FinanceResourceActor
							if (ActorProxyRel exists)
								for each ActorProxyRel
									if (each.Proxy.IsActive
									and each.Proxy.IsEnabled)
										LocalActor = each.ActorProxy.Grantee
										LocalFinanceResource = first AgentRel.BusinessObjectRef(Employee).Employee
										if (LocalFinanceResource.NotifyWhenInvoiceSubmitted)
											LocalEmailAddress = LocalFinanceResource.EmailAddress
											include SendAvailableInvoiceMessage
				LastApprovalComment = ""


		UpdateApprovalHistory is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmActor		is an Actor
				ParmStatus		is Numeric 2
			Action Rules
				LocalActor = ParmActor


				if (ParmActor = actor)														
					LocalFinanceResource = actor.agent(Employee).Employee
				else
					LocalFinanceResource = first AgentRel.BusinessObjectRef(Employee).Employee
				invoke CreateNoRules PayablesInvoiceAudit
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.Resource				= LocalFinanceResource
					invoked.Status					= ParmStatus
					invoked.Comment					= LastApprovalComment
					invoked.UpdateDate				= current timestamp
					invoked.InvoiceRoutingCodeGroup	= InvoiceRoutingCodeGroup	
					invoked.InvoiceRoutingCodeGroupLevel = InvoiceRoutingCodeGroupLevel	
					invoked.InvoiceRoutingCode		= RoutingCode				
					invoked.RoutingApprovalLevel	= RoutingApprovalLevel		
					invoked.Workunit				= Workunit					
					invoked.InvoiceRoutingCategory	= RoutingCategory			


		UpdateApprovalLevel is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmEscalate	 is Boolean	
				ParmReassign	 is Boolean
				ParmCurrentActor is an Actor				
			Action Rules
				LocalActor = ParmCurrentActor
				TransientActor = LocalActor			
				if (ParmReassign)
					if (ReassignToApprovalLevel entered)
						RoutingApprovalLevel = ReassignToApprovalLevel.ApprovalLevel
						initialize ReassignToApprovalLevel
						ReassignToPreviousApprover = false		
					else
						if (RoutingCode.UsesTeamMemberAssignment		
						and RoutingFinanceTeam = first CurrentInvoiceRoutingCodeLevelRel.ApprovalTeam
						and RoutingFinanceTeamMember != ResponsiblePerson)
							ResponsiblePerson = RoutingFinanceTeamMember
							ReassignToPreviousApprover = false
						else
							if (ReassignToPreviousApprover)		
								if (InvoiceRoutingCodeGroup entered)
									InvoiceRoutingCodeGroupLevel	= last ApprovedPayablesInvoiceAuditRel.InvoiceRoutingCodeGroupLevel
								RoutingCode							= last ApprovedPayablesInvoiceAuditRel.InvoiceRoutingCode
								RoutingApprovalLevel				= last ApprovedPayablesInvoiceAuditRel.RoutingApprovalLevel
								if (RoutingCode.UsesTeamMemberAssignment
								and last ApprovedPayablesInvoiceAuditRel.Resource = last PreviousAssignedPayablesInvoiceAuditRel.Resource)
									RoutingFinanceTeam = CurrentInvoiceRoutingCodeLevelRel.ApprovalTeam
									RoutingFinanceTeamMember = last ApprovedPayablesInvoiceAuditRel.Resource
							else
								LocalEmailAddress	= ResponsiblePerson.EmailAddress		
								include SendNotReassignedInvoiceMessage
				else
					if (ParmEscalate)
						LocalRoutingApprovalLevel = RoutingApprovalLevel
						include GetNextEscalationApprovalLevel
						if (LocalRoutingApprovalLevel != RoutingApprovalLevel)
							RoutingApprovalLevel = LocalRoutingApprovalLevel
							invoke Update last PayablesInvoiceAuditRel
								invoked.Escalated = true
					else
						LocalRoutingApprovalLevel = RoutingApprovalLevel
						RoutingApprovalLevel = DerivedNextRoutingApprovalLevel
						ReassignToPreviousApprover = false		

		UpdateDocumentURL is an Instance Action
			valid when (UpdateDocumentURLValid)

			Action Rules
				initialize InvoiceURL
				include GetDocumentURL
				InvoiceURL = LocalDocumentURL

		UpdateDocumentURLSet is a Set Action
			default label is untranslatable
			restricted
			completion message is "InvoiceURLUpdated"
			run in background
			Parameters
				PrmPayablesCompany is a PayablesCompany
				PrmPayablesInvoice is a PayablesInvoice

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company = PrmPayablesCompany
				and    PayablesInvoice = PrmPayablesInvoice)

			Action Rules
				Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
					initialize InvoiceURL
					include GetDocumentURL
					InvoiceURL = LocalDocumentURL

		SaveDocumentLocally is an Instance Action
			valid when (CanSaveDocumentLocally)

			Action Rules

				for each PayablesInvoiceDocumentRel
					if (each.CreatedFromWebService)
						invoke DeleteOnSendForPayment each
				include GetDocumentBytes
				if (LocalDocumentBytes entered)

					invoke Create PayablesInvoiceDocument
						invoked.Company					= Company
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.DocumentID				= ImageIndex
						invoked.Description				= "FromPayablesInvoiceService"
						invoked.DocumentType			= 1
						invoked.Attachment.File			= LocalDocumentBytes	
						invoked.Attachment.Title		= DerivedFileName
						invoked.Attachment.MimeType		= DerivedMimeType
						invoked.CreatedFromWebService	= true

		SaveDocumentLocallySet is a Set Action
			default label is untranslatable
			restricted
			completion message is "InvoiceDocumentCreated"
			run in background
			Parameters
				PrmPayablesCompany		is a PayablesCompany
				PrmPayablesInvoice		is a PayablesInvoice

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company = PrmPayablesCompany
				and    PayablesInvoice = PrmPayablesInvoice)

			Action Rules
				Set Rules
					Entrance Rules

					Exit Rules

				Instance Rules
					for each PayablesInvoiceDocumentRel
						if (each.CreatedFromWebService)
							invoke DeleteOnSendForPayment each
					include GetDocumentBytes
					if (LocalDocumentBytes entered)
						invoke Create PayablesInvoiceDocument
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.DocumentID				= ImageIndex
							invoked.Description				= "FromPayablesInvoiceService"
							invoked.DocumentType			= 1
							invoked.Attachment.Title		= DerivedFileName
							invoked.Attachment.File			= LocalDocumentBytes
							invoked.Attachment.MimeType		= DerivedMimeType
							invoked.CreatedFromWebService	= true

		DeleteFromService is a Delete Action
			default label is untranslatable
			restricted
			valid when (DeleteFromServiceValid)
			Entrance Rules
				include DeleteDistributions


		UpdateErrorRecordsAction is an Instance Action
			default label is untranslatable
			restricted
			Action Rules

				include UpdateErrorRecords







































		DeletePOInformation is an Instance Action
			default label is untranslatable
			restricted
			Action Rules

		CreateMatchReferenceInvoice is an Instance Action
			valid when (IsMatched)
			Parameters
				Company
				MemoInvoice					is a PayablesInvoice
			Parameter Rules
				Company
					required
				MemoInvoice
					required
			Action Rules
				constraint (PayablesInvoiceDetailRel not exists)
					"CannotAddOriginalInvoiceWhenDetailsAlreadyExist"

				invoke Create MatchInvoiceReference
					invoked.Company			= Company
					invoked.PayablesInvoice	= MemoInvoice
					invoked.Vendor			= Vendor
					invoked.OriginalInvoice	= PayablesInvoice

				ExternalPurchaseOrder = OriginalInvoice.ExternalPurchaseOrder

		LinkToOriginalInvoice is an Instance Action
			default label is "LinkToOriginalInvoice"
			valid when (AllowAddMatchInvoiceReferenceLink)
			Parameters
				Company
				OriginalInvoice					is a PayablesInvoice
			Parameter Rules
				Company
					required
				OriginalInvoice
					required
			Action Rules
				constraint (InvoiceType.CreditMemo)
					"InvoiceMustBeACreditMemo"

				constraint (!MatchProcessType.Expense)
					"ActionNotAllowedOnExpenseInvoice"

				invoke Create MatchInvoiceReference
					invoked.Company			= Company
					invoked.PayablesInvoice	= PayablesInvoice
					invoked.Vendor			= Vendor
					invoked.OriginalInvoice	= OriginalInvoice

		RemoveLinkToOriginalInvoice is an Instance Action
			default label is "RemoveLinkToOriginalInvoice"
			valid when (AllowRemoveMatchInvoiceReferenceLink)
			Action Rules
				constraint (PayablesInvoice.Status.Unreleased)
					"InvoiceMustBeUnreleased"
				constraint (PayablesInvoiceDetailRel not exists)
					"CannotAddOriginalInvoiceWhenDetailsAlreadyExist"

				invoke Delete MatchInvoiceReferenceRel








		DeleteTaxCode is an Instance Action

			default label is untranslatable
			restricted
			completion message is "TaxCodeAndTaxDistributionsRemoved;ClickRefreshToUpdateScreen"
			Action Rules
				invoke ChangeTaxCode
					initialize invoked.NewTaxCode
					initialize invoked.TaxableAmt
					initialize invoked.TaxAmt
					initialize invoked.LinkTax
					initialize invoked.TaxCategory		
					initialize invoked.NewTaxPointDate	



		ChangeTaxCode is an Instance Action			

			restricted
			default label is "AddTaxCode"
			Parameters
				NewTaxCode				is a TaxCode
				TaxableAmt				is an InternationalAmount
					default label is "EnteredTaxableAmount"	//"TaxableAmount"		
				TaxAmt					is an InternationalAmount
					default label is "EnteredTaxAmount"	//"TaxAmount"		
				TaxCategory				is a ProductTaxCategory
				LinkTax					is Boolean
					default label is "LinkTaxOnDistributions"
				NewTaxPointDate			is Date	
					default label is "TaxPointDate"
				NewPointOfTitleTransfer	is a PointOfTitleTransfer		
					default label is "PointOfTitleTransfer"

			Parameter Rules
				NewTaxCode
					if (TaxableAmt entered)
						required
							"NewTaxCodeIsRequiredIfTaxableAmountEntered"
					if (IsPrepaymentType)												
						constraint (NewTaxCode.DerivedTaxPoint = "P")				
							"TaxCode<NewTaxCode>MustHave_\Tax_\Point=PaymentOnPrepayments"	

				TaxableAmt
					if (IsCreditInvoice)
						constraint (TaxableAmt <= 0)
							"TaxableAmountMustBeNegativeForCredit"
					else
						constraint (TaxableAmt >= 0)
							"TaxableAmountCannotBeNegative"

				TaxCategory
					TransientTaxCategory	= TaxCategory
					LocalPTXTaxCategory		= TaxCategory			

				NewTaxPointDate	
					constraint (NewTaxCode.DerivedTaxPoint != "P")		
						"CannotEnterTaxPointDateWhenUsingTaxPointTypeOfPayment"

			Action Rules





				TransientUpdateTaxCode	= true
				ActionType = ActionType.CreateType	


				for each TaxDistributionsRel
					invoke Delete each 			


				invoke UpdatePIT		
					invoked.Function		= 4		

				initialize TaxAmount
				initialize TotalTaxAmount
				initialize TaxableAmount
				initialize TotalTaxableAmount
				initialize TaxCode
				initialize TaxType
				initialize TaxPoint
				initialize TransientTaxPointDate	
				initialize TransientPointOfTitleTransfer	






				if (NewTaxCode not entered			
				or  TaxDistributionsRel exists)
					if  (DistributionCode entered
					and !TransientChangingVendor)		
						LocalDistributionCode = DistributionCode
						include NewPerformDistributionCodeProcessing		
					if (TaxEntityUsesThirdPartyTax
					and !TransientChangingVendor)		
						invoke ReevaluateDistributionTotal
					include UpdateErrorRecords




				if (NewTaxCode entered)
					TaxCode 				= NewTaxCode
					LocalPTXEntTaxCode		= TaxCode		
					TaxPoint				= TaxCode.DerivedTaxPoint
					TransientTaxPointDate	= NewTaxPointDate	
					TransientPointOfTitleTransfer	= NewPointOfTitleTransfer	
					TransientLineTax		= LinkTax
					if (TaxableAmt entered)
						TaxableAmount		= TaxableAmt
						TaxableAmount		= RoundedTaxableAmount		
						TransientEnteredTaxableAmount	= TaxableAmount	
					if (TaxAmt entered)
						TaxAmount			= TaxAmt
						TaxAmount			= RoundedTaxAmount			
						TransientEnteredTaxAmount	= TaxAmount			

					if (TransientLineTax)
						ApinwsCreateTaxDisFrHdr = false
					else
						ApinwsCreateTaxDisFrHdr = true
					include ProcessTaxControl

					LocalPTXEntTaxCode			= TaxCode
					LocalPTXEntTaxAmount		= TaxAmount
					LocalPTXEntTaxableAmount	= TaxableAmount
					LocalPTXEntTaxCategory		= TaxCategory
					LocalPTXTaxableAmount		= CalculateTax.OutputTotalTaxable

					invoke UpdatePIT		
						invoked.Function			= 1		
						invoked.PrmTaxRate			= CalculateTax.OutputTaxRate	



					if (!IsLandedTax
					or (invoking action = "ShortPayAndAccrueTax"		
					or  initiating action = "ShortPayAndAccrueTax"))	
						if (TransientLineTax)
							include UpdateExitRules

					if (TaxableAmount not entered
					and TaxType.Accrued)

						TotalTaxableAmount	= TaxableAmount
						TotalTaxableAmount	= RoundedTotalTaxableAmount		

					include CreateExitRules

					ActionType = ActionType.UpdateType	


					if (PayablesInvoiceTaxRel.TaxDetails.TaxableAmount not entered				
					and CalculateTax.OutputTotalTaxable entered)								
						invoke Update PayablesInvoiceTaxRel										
							invoked.TaxDetails.TaxableAmount = CalculateTax.OutputTotalTaxable	


					include CreateAndUpdateExitRules


					if (TransientLineTax							
					and TotalTaxableDistributionRel not exist)		

						for each TotalTran1TaxableDistributionRel	

							invoke Update each						
								invoked.TaxCode		= NewTaxCode	



				TransientUpdateTaxCode = false		
				invoke FastUpdate
					LastUpdateDate 	= current timestamp
					LastUpdateBy 	= actor
				if (action type.Update)
					ActionType = ActionType.UpdateType

		RemoveDistributionCode is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmDistribCode		is a PayablesDistributionCode
			Action Rules
				LocalDistributionCode	= PrmDistribCode
				invoke DeleteDistributionCodeDistributions OldDistributionsRel
				initialize DistributionCode
				include UpdateErrorRecords


		UpdateDistributionAndTaxPointDates is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				NewDistributionDate		is Date
			Action Rules
				DistributionDate		= NewDistributionDate
				if (TaxCode entered
				and TaxPoint.GLPostDate
				and old DistributionDate = TransientTaxPointDate)	
					invoke Update PayablesInvoiceTaxRel
						invoked.TaxPointDate	= NewDistributionDate
					TransientTaxPointDate		= NewDistributionDate


		ChangeTemplate is an Instance Action
			valid when (AllowChangeTemplate)
			Parameters
				NewTemplate		is Numeric 1
					default label is "InvoiceEntryTemplate"
					States
						Basic			value is 0
						TaxInvoice		value is 1
						MatchInvoice	value is 4
						ServiceContract	value is 5
						Freight			value is 3
				PrmServiceContract		is a Contract
					default label is "ServiceContract"
				PrmPurchaseOrder		is a PurchaseOrder
					default label is "PurchaseOrder"
				PrmKeepDistributions    is Boolean
					default label is "KeepDistributions"
				PrmChangeToInvoice      is Boolean   
				PrmOriginalInvoice 		is a PayablesInvoice 
			Parameter Rules
				PrmServiceContract
					if (NewTemplate.ServiceContract)
						required

				PrmPurchaseOrder
					if (NewTemplate.MatchInvoice)
						required

			Entrance Rules
				constraint (Status.Unreleased)
					"StatusIsNotUnreleased.CannotChangeTemplate."

				constraint (BackgroundProcessing not entered)
					"ActionInProcess;CannotChangeTemplate"

				constraint (!BudgetEditProcessing.InProcess)
					"BudgetEditsInProcess;CannotChangeTemplate"

				if (MatchProcessType.Expense)
					constraint (!NewTemplate.Basic
					and         !NewTemplate.TaxInvoice
					and         !NewTemplate.Freight)
						"InvoiceIsAlreadyAnExpenseInvoice"
				else
				if (MatchProcessType.ServiceContract)
					constraint (!NewTemplate.ServiceContract)
						"InvoiceIsAlreadyAServiceContractInvoice"
				else
					constraint (!NewTemplate.MatchInvoice)
						"InvoiceIsAlreadyAMatchInvoice"

				if (NewTemplate.MatchInvoice)
					constraint  (Vendor = PrmPurchaseOrder.Vendor)
						"InvoiceVendorDifferentFromPurchaseOrderVendor<PrmPurchaseOrder.Vendor>" 
					constraint (InvoiceCurrency = PrmPurchaseOrder.Currency)
						"InvoiceCurrency<InvoiceCurrency>MustEqual_\P\OCurrency<PrmPurchaseOrder.Currency>"                   
					if (InvoiceType.DebitMemo)
						constraint (PrmChangeToInvoice or PrmOriginalInvoice entered)
							"ThisIsCurrentlyADebitMemo.MustSelectOriginalInvoiceOrChangeToInvoiceType"
						constraint (!PrmChangeToInvoice or PrmOriginalInvoice not entered)
							"CannotSelectBothChangeToInvoiceAndEnterOriginalInvoice"
						if (PrmOriginalInvoice entered)
							constraint (PrmPurchaseOrder = PrmOriginalInvoice.FirstPurchaseOrder)
								"PurchaseOrderMustMatchPurchaseOrderForOriginalInvoice"
					if (InvoiceType.CreditMemo)
						constraint (PrmOriginalInvoice entered)
							"OriginalInvoiceRequiredForMatchDebitOrCreditMemo"
						if (PrmOriginalInvoice entered)
							constraint (PrmPurchaseOrder = PrmOriginalInvoice.FirstPurchaseOrder)
								"PurchaseOrderMustMatchPurchaseOrderForOriginalInvoice"
				else
				if (NewTemplate.ServiceContract)
					constraint  (Vendor = PrmServiceContract.Vendor)
						"InvoiceVendorDifferentFromServiceContractVendor<PrmServiceContract.Vendor>" 


			Action Rules



				if (MatchProcessType.Expense)
					if  (PayablesInvoiceDistributionRel exists)
						confirmation required
							"ExistingDistributionsWillBeDeleted.Continue?"
						invoke Delete PayablesInvoiceDistributionRel
						initialize TotalDistributionAmount
				else
					if  (PayablesInvoiceDetailRel exists
					or   PayablesInvoiceAddOnChargeRel exists
					or 	 PayablesInvoiceSpreadAddOnChargeRel exists)
						if (PrmKeepDistributions)
							confirmation required
								"ExistingInvoiceDetailsWillBeDeleted,ButDistributionsWillBeRetained.Continue?"
							invoke DeleteKeepDistribs PayablesInvoiceDetailRel
							invoke DeleteKeepDistribs PayablesInvoiceAddOnChargeRel
							invoke DeleteNoInvoiceUpdate PayablesInvoiceSpreadAddOnChargeRel
						else
							confirmation required
								"ExistingInvoiceDetailsAndDistributionsWillBeDeleted.Continue?"
							invoke DeleteNoInvoiceUpdate PayablesInvoiceDetailRel
							invoke DeleteNoInvoiceUpdate PayablesInvoiceAddOnChargeRel
							invoke DeleteNoInvoiceUpdate PayablesInvoiceSpreadAddOnChargeRel

					if (MatchProcessType.ServiceContract)
						initialize ServiceContract
						invoke Delete MatchServiceContractInvoicesRel 
					else
						invoke Delete MatchPurchaseOrderInvoicesRel

					invoke PurgeSetsAndResourceRecords MatchReconQueueRel
					invoke PurgeDetail MatchWorkRel
					invoke Purge MatchWorkRel
					invoke Purge MatchReconQueueRel


				LocalTermsCode = TermsCode

				if (NewTemplate.ServiceContract)
					if (InvoiceType.DebitMemo
					or  InvoiceType.Prepayment
					or  InvoiceType.MatchPrepayment)
						InvoiceType = InvoiceType.Invoice
						MatchPrepayment = false
						MatchPrepaymentMethod = 0
					ServiceContract = PrmServiceContract
					MatchProcessType = MatchProcessType.ServiceContract
					initialize DistributionCode
					initialize PurchaseFromLocation

					if (ServiceContract.TermsCode entered
					and TermsCode != ServiceContract.TermsCode)
						LocalTermsCode = ServiceContract.TermsCode

					include ProcessIntrastatDefaults

					if (MatchTable not entered)
						if (Vendor.MatchTable entered)
							MatchTable = Vendor.MatchTable
						else
						if (Vendor.VendorClass.MatchTable entered)
							MatchTable = Vendor.VendorClass.MatchTable
						else
						if (MatchCompanyRel.MatchTable entered)
							MatchTable = MatchCompanyRel.MatchTable

					invoke Create MatchServiceContractInvoice 
						invoked.Company						= Company
						invoked.Contract 					= ServiceContract 
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.VendorGroup 				= Company.VendorGroup 

					if (MatchAgingRel exists 
					and MatchAgingInvoiceRel not exists)
						invoke Create MatchAgingInvoice 
							invoked.Company = Company
							invoked.PayablesInvoice = PayablesInvoice

				else
				if (NewTemplate.MatchInvoice)
					initialize DistributionCode
					FirstPurchaseOrder = PrmPurchaseOrder
					initialize MatchProcessType
					initialize TaxableAmount
					include DefaultMatchProcessType

					if (InvoiceType.DebitMemo)
						if (PrmChangeToInvoice)
							InvoiceType = InvoiceType.Invoice 
						else 
							OriginalInvoice = PrmOriginalInvoice 
							invoke Create MatchInvoiceReference
								invoked.Company			= Company
								invoked.PayablesInvoice	= PayablesInvoice
								invoked.Vendor			= Vendor
								invoked.OriginalInvoice	= PrmOriginalInvoice

					if (InvoiceType.CreditMemo)
						OriginalInvoice = PrmOriginalInvoice 
						invoke Create MatchInvoiceReference
							invoked.Company			= Company
							invoked.PayablesInvoice	= PayablesInvoice
							invoked.Vendor			= Vendor
							invoked.OriginalInvoice	= PrmOriginalInvoice

					if (InvoiceType.Prepayment)
						InvoiceType = InvoiceType.Invoice 

					invoke Create MatchPurchaseOrderInvoice
						invoked.Company						= Company
						invoked.PurchaseOrder				= PrmPurchaseOrder
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.Vendor						= Vendor
						invoked.TaxCode						= TaxCode
						invoked.InvoiceType					= InvoiceType
						if (MatchProcessType.AOCOnly
						and Location not entered
						and FirstPurchaseOrder.Dropship)
							invoked.Location				= PrmPurchaseOrder.ShipToLocation
						else
							invoked.Location				= Location

					if (FirstPurchaseOrder.ProcessLevel entered)
						ProcessLevel							= FirstPurchaseOrder.ProcessLevel

					if (ProcessLevel not entered)
						if (ProcessLevel not entered
						and VendorCompanyDefaultRel.ProcessLevel entered)
							ProcessLevel = VendorCompanyDefaultRel.ProcessLevel

						if (ProcessLevel not entered
						and DefaultProcessLevelExists)
							ProcessLevel = first DefaultProcessLevelRel.PayablesProcessLevel

					if (ProcessLevel changed)
						PayGroup 		 					= ProcessLevel.PayGroup
						if (PayGroup changed)
							BankTransactionCode 			= PayGroup.BankTransactionCode 
							CashCode 						= PayGroup.CashCode 
							for each PayablesInvoicePaymentRel
								invoke FastUpdate each      
									invoked.PayGroup 			= PayGroup
									invoked.BankTransactionCode = PayGroup.BankTransactionCode 
									invoked.CashCode 			= PayGroup.CashCode 

					
					if (!MatchProcessType.AOCOnly)
						PurchaseFromLocation 				= PrmPurchaseOrder.PurchaseFromLocation

						if (RemitToCode not entered)
							RemitToCode 					= PurchaseFromLocation.RemitToCode

					if (FirstPurchaseOrder.TermCode entered
					and TermsCode != FirstPurchaseOrder.TermCode)
						LocalTermsCode = FirstPurchaseOrder.TermCode

					if  (FirstPurchaseOrder.ReceiptCurrencyConversionRate entered
					and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.ReceiptCurrencyConversionRate
						InvoiceAmount.KeepRateOnly = true
					else
					if  (FirstPurchaseOrder.EnteredCurrencyConversionRate entered
					and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry)
						InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.EnteredCurrencyConversionRate
						InvoiceAmount.KeepRateOnly = true

					include ProcessIntrastatDefaults

					if (MatchTable not entered)
						if (Vendor.MatchTable entered)
							MatchTable = Vendor.MatchTable
						else
						if (Vendor.VendorClass.MatchTable entered)
							MatchTable = Vendor.VendorClass.MatchTable
						else
						if (MatchCompanyRel.MatchTable entered)
							MatchTable = MatchCompanyRel.MatchTable

					invoke UpdateExternalPOForMatchInvoices

					if (MatchAgingRel exists 
					and MatchAgingInvoiceRel not exists)
						invoke Create MatchAgingInvoice 
							invoked.Company = Company
							invoked.PayablesInvoice = PayablesInvoice



				else
				if (NewTemplate.Basic
				or  NewTemplate.TaxInvoice
				or  NewTemplate.Freight)
					if (InvoiceType.MatchPrepayment)
						InvoiceType = InvoiceType.Invoice
						MatchPrepayment = false
						MatchPrepaymentMethod = 0
					MatchProcessType = MatchProcessType.Expense
					initialize TaxAdjustment

					if (PurchaseFromLocation.TermsCode entered
					and TermsCode != PurchaseFromLocation.TermsCode)
						LocalTermsCode = PurchaseFromLocation.TermsCode
					else
					if (RemitToVendorCompanyDefaultRel.TermsCode entered
					and TermsCode != RemitToVendorCompanyDefaultRel.TermsCode)
						LocalTermsCode = RemitToVendorCompanyDefaultRel.TermsCode
					else
					if (RemitToCode.TermsCode entered
					and TermsCode != RemitToCode.TermsCode)
						LocalTermsCode = RemitToCode.TermsCode
					else
					if (VendorCompanyDefaultRel.TermsCode entered
					and TermsCode != VendorCompanyDefaultRel.TermsCode)
						LocalTermsCode = VendorCompanyDefaultRel.TermsCode
					else
					if (Vendor.TermsCode entered
					and TermsCode != Vendor.TermsCode)
						LocalTermsCode = Vendor.TermsCode

				if (NewTemplate.Basic
				or  NewTemplate.TaxInvoice
				or  NewTemplate.Freight)
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						invoke Delete HeaderBudgetEditErrorRel
						invoke Delete DistributionBudgetEditErrorRel
						invoke Delete BudgetTemplateGroupTotalRel
						for each PayablesInvoiceDistributionRel
							invoke RecalculateCommitmentAmounts each

				if  (MatchAgingInvoiceRel exists)
					invoke Delete MatchAgingInvoiceRel



				if (LocalTermsCode != TermsCode)
					invoke Update
						invoked.TermsCode = LocalTermsCode
						initialize invoked.DueDate
						initialize invoked.DiscountAmount
						initialize invoked.DiscountAmount1
						initialize invoked.BaseDiscountAmount1
						initialize invoked.DiscountAmount2
						initialize invoked.BaseDiscountAmount2
						initialize invoked.DiscountAmount3
						initialize invoked.BaseDiscountAmount3
				else
					include CreateAndUpdateRules

					if  (!MatchProcessType.Expense)
						invoke InvoiceUpdate

					include UpdateErrorRecords


		UpdateBudgetResults is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				ParmSuccess    is Boolean
					default label is untranslatable
			Action Rules

				if (ParmSuccess)
					BudgetEditProcessing = BudgetEditProcessing.Success
					if (Status.Amended)
						include CanAmendedInvoiceBeReleased
						if (LocalReleaseInvoice)
							invoke FinalRelease
					else
					if (InvoiceType.MatchPrepayment
					and !Status.Released)
						invoke FinalRelease
					else
					if (MatchProcessType.Expense)

						if ((AutoApproved
						and !Status.Cancelled)		
						or  Status.Approved)
							include CanInvoiceBeReleased
							if (LocalReleaseInvoice)
								invoke FinalRelease
							else

								if (AutoApproved)	
									make transition to Approved
								if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.Track
								or    GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
								and  GLCommitRelExists)
									include ReleaseGLCommit

						else

							if (Status.Unreleased)	
								make transition to PendingApproval
							if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.Track
							or    GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
							and  GLCommitRelExists)
								include ReleaseGLCommit

					else
					if  (MatchCompanyRel.PerformBudgetEditsForApproval
					and (RoutingRuleFound
					or   RequiresApproval)
					and  Status.Unreleased)

						if (AutoApproved)
							make transition to Approved
						else
							make transition to PendingApproval
					else

						invoke FinishMatch MatchReconQueueRel.MatchWork
						if  (!BackgroundProcessing.MatchInvoice)
							invoke PurgeSetsAndResourceRecords MatchReconQueueRel
							invoke PurgeDetail MatchWorkRel
							invoke Purge MatchWorkRel
				else
					BudgetEditProcessing = BudgetEditProcessing.Failure

					if (!MatchProcessType.Expense)
						initialize BackgroundProcessing

						TransientAutoMatchResult = last AutoMatchResultInvoiceRel.AutoMatchResult
						if (!TransientAutoMatchResult.ProcessingComplete)
							LocalAutoMatchResult = TransientAutoMatchResult
							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel
								invoked.ErrorMessage 				= BudgetsExceededCouldNotReleaseMsg
								invoked.UnmatchedAmount				= PayablesInvoice.InvoiceAmount.CurrencyAmount

						invoke DeleteNoInvoiceUpdate MatchReconQueueRel.MatchWork.InvoiceDetailCreatedFromMatchRel





		CreateFromUnmatch is a Create Action
			default label is untranslatable
			restricted
			Entrance Rules
		        if (APClerk not exists) 
        		    initialize APClerk
				initialize TransientPaymentAmount
				initialize TransientPaymentDate
				initialize TransientPaymentNumber
				BypassActiveResourceEdit = true
			Exit Rules
				if (APClerk not entered) 
            		APClerk = actor.agent(Employee).Employee				
				if  (Suffix entered)
					ExternalPurchaseOrder = first PayablesInvoiceOriginalRel.ExternalPurchaseOrder

		PurchaseOrderInvoiceCancel is an Instance Action
			default label is "PurchaseOrderInvoiceCancel"
			valid when (AllowPurchaseOrderInvoiceCancel)
			Parameters
				PostDate							is Date
			Parameter Rules
				PostDate
					required
					default to current corporate date
			Entrance Rules
		        constraint (!TaxEntityRel.ThirdParty.TaxEngine)
		        	"ActionNotValidForTaxEngine"
				if   (MatchCompanyRel.PurchaseOrderInvoiceCancel.DoNotAllowOnPaidInvoices)
					constraint (!Status.Paid)
						"InvoiceHasBeenPaid.MatchCompanyPurchaseOrderInvoiceCancelDoesNotAllowCancelOfPaidInvoices."
					constraint (!Status.Historical)
						"InvoiceIsHistorical.MatchCompanyPurchaseOrderInvoiceCancelDoesNotAllowCancelOfPaidInvoices."
					constraint (!PaymentsBeyondOpenStatusRel exists)
						"PaymentsHaveBeenMade.MatchCompanyPurchaseOrderInvoiceCancelDoesNotAllowCancelOfPaidInvoices."

			Action Rules
				invoke Unmatch
					invoked.PostDate				= PostDate
					invoked.UnmatchFrom				= "MA75"

		InvoiceUnmatch is an Instance Action
			default label is "Unmatch"
			valid when (AllowInvoiceUnmatch)
			Action Rules
				invoke Unmatch
					invoked.UnmatchFrom				= "MA70"

		Unmatch is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PostDate							is Date
				UnmatchFrom							is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"



			Entrance Rules







				constraint (!TaxEntityRel.ThirdParty.TaxEngine)
					"CannotMaintainTaxEngineInvoice"

		        constraint (!InBackgroundProcessing)
        		    "CannotUnmatchWhileProcessingInBackground"

				if  (UnmatchFrom.MA70)
					constraint (!CancelledOrPostedDistributionsRel exists
					and         !PaymentsBeyondOpenStatusRel exists)
						"CannotUnmatch;PaymentsMadeOrDistributionsJournalized"
					if (CompanySystemClosingControlRel.Control)
						constraint (DistributionDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostDateOf<DistributionDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
				else
				if  (UnmatchFrom.MA75)
					constraint (CancelledOrPostedDistributionsRel exists
					or          PaymentsBeyondOpenStatusRel exists)
						"CannotCancel;NoPaymentsMadeAndNoDistributionsJournalized"

					if (CompanySystemClosingControlRel.Control)
						constraint (PostDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostDateOf<PostDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

				if  (CreditOrDebitMemo
				and  Suffix = blank)
					NextSentence = true
				else
				if  (instance count of MatchTransPayablesInvoiceRel > 1)
					confirmation required
						"MultipleInvoicesHaveBeenMatchedWithThisObjectID.AllWillBeUnmatched.Continue?"

				constraint (MatchObjectID entered)
					"MatchObjectIDNotEntered;CannotReverseApprovalInvoice"					

				if  (InvoiceType.CreditMemo)
					constraint (Suffix not entered)
						"CannotUnmatchChargebackInvoice"			

				if (InvoiceSource.CreditForRebill)
					constraint (!CancelledOrPostedDistributionsRel exists
					and         !PaymentsBeyondOpenStatusRel exists)
						"CannotCancelCreditForRebillIfPaidOrPosted"

					for each MatchInvoiceReferenceRel.OriginalInvoice.PurchaseOrderReceiptLineRel
						constraint (!each.InventoryTransactionLineCostAdjustmentDescendingRel exists)
							"CannotUnmatchIfOriginalInvoiceHadCostAdjustments"

				constraint (!Status.Amended)						
					"CannotUnmatch;InvoiceIsIn_\AmendedStatus"		

				LocalRunProgram		= LocalRunProgram.CashRequirements
				constraint (!PaymentsInPayCycleRel exists)  
					"CannotUnmatch;InvoiceScheduledForPayment"

				LocalRunProgram		= LocalRunProgram.InvoiceDistributionClosing
				constraint (!ActivePayablesProcessingMonitorByCompanyRel exists)
					"CannotCancel;InvoiceDistributionClosingRunning"

				if  (!CreditOrDebitMemo)
					for each MatchInvoiceReference2Rel
						constraint (each.PayablesInvoice.MatchStatus < 2)
							"Memo<each.PayablesInvoice.Invoice>MustBeUnmatchedFirst"
						constraint (!each.PayablesInvoice.InvoiceSource.CreditForRebill)
							"CannotUnmatch;CreditForRebillHasBeenDone."

				if  (UnmatchFrom.MA70)
					constraint (!PaymentsHaveBeenMadeRel exists)  
						"CannotUnmatchIfPaymentHasBeenMade"

					constraint (!CancelledOrPostedDistributionsExist)
						"CannotUnmatch;PostedDistributionsExist"			

					for each PayablesInvoiceDiscountRel
						constraint (!each.Status > 1)
							"CannotUnmatch;PostedDiscountAccrualsExist"			
				else




					for each PayablesInvoiceDiscountRel
						constraint (!each.Status > 2)
							"CannotUnmatch;UnpostedDiscountAccrualsExist"			

				for each MatchPurchaseOrderInvoicesRel
					constraint (!each.PurchaseOrder.Closed.Historical)
						"CannotCancel;RelatedPurchaseOrder<each.PurchaseOrder>IsPosted"	

				for each PurchaseOrderReceiptLineRel	
					constraint (each.ArchivedQuantity not entered
					or          each.MatchedQuantity entered
					or			!each.PurchaseOrderReceipt.Status.ArchivedClosed)
						"CannotUnmatch;PostedReceiptsExist"						

				for each PayablesInvoiceDetailRel
					InvoiceDetailCounter += 1
					if (!each.ItemType.Service
					and !MatchProcessType.DropShip)
						if (!CreditOrDebitMemo
						and !IsChargeback)
							if (each.ClosedChargebackReconMatchMessageRel exists
							and !each.ReceiptMNRExistRel exists)
								NextSentence = true
							else
							if (each.ExcessQuantityProcess.MatchNoReceipt)

								TempQuantity = each.TotalLinkedMatchedNotReceivedQuantity
								if (TempQuantity not entered)
									TempQuantity = each.MatchedQuantity

								constraint (each.PurchaseOrderLine.MatchedNotReceivedQuantity entered
								and			TempQuantity <= each.PurchaseOrderLine.MatchedNotReceivedQuantity)
									"CannotUnmatchOrCancel;MatchedNotReceivedQuantityHasBeenReceived"	

				for each PayablesInvoiceAddOnChargeRel
					InvoiceAddOnChargeCounter += 1
					initialize LocalTotalReceiptMatchedQuantity
					if (MatchProcessType.AOCOnly
					and !each.POAndLineAOCRel exists)
						NextSentence = true
					else
					if (!each.ItemType.Service
					and each.PurchaseOrderLine entered)
						for each each.ReceiptLineAOCByMatchObjectIdRel
							constraint (each.Status !=2)
								"CannotUnmatch;ArchiveWriteOffQuantityExistsOnReceived"		

							LocalTotalReceiptMatchedQuantity += each.MatchedQuantity

							for each each.PurchaseOrderReceipt.POReceiptAdjustmentAndInspectionRel
								constraint (each.UpdateDate <= MatchDate)
									"CannotUnmatch;ReceiverAdjustedLaterThanMatchDate"			

						if  (each.DerivedReceiptLinkMatchedQuantity > LocalTotalReceiptMatchedQuantity)
							LocalTotalReceiptMatchedQuantity = each.DerivedReceiptLinkMatchedQuantity

						if  (each.ItemType.Inventoried
						and  MatchProcessType.AOCOnly
						and  !each.AddOnCharge.SpreadMethod.NoSpread)
							TempQuantity = LocalTotalReceiptMatchedQuantity - each.MatchedQuantity
							if  (each.PurchaseOrderLine entered
							and  each.PurchaseOrderLine.EnteredBuyUOM != each.PurchaseOrderLine.VendorPriceUOM)
								TempQuantity = TempQuantity * (each.PurchaseOrderLine.EnteredBuyUOM / each.PurchaseOrderLine.VendorPriceUOM)

							constraint (TempQuantity >= 0
							or          each.POAndLineAOCRel.ReceivedQuantityToMatch = TempQuantity)
								"CannotUnmatchOrCancel;MatchedNotReceivedQuantityHasBeenReceived"			

			Action Rules
				if  (InvoiceDetailCounter + InvoiceAddOnChargeCounter > NumberOfLinesForSetAction)
					BackgroundProcessing = BackgroundProcessing.UnmatchInvoice
					BypassNegativeRateEdit = true
					TransientInUnmatch = true  
					if  (CreditOrDebitMemo
					and  Suffix = blank)

						if (PayablesInvoiceTaxRel not exists)
							invoke Update PayablesInvoiceTaxRel
								invoked.TaxCode = PayablesInvoice.TaxCode
								invoked.EnteredInvoiceAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount
								invoked.EnteredTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
								invoked.TotalInvoicedTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount	
								invoked.TotalAccruedTaxAmount = sum MatchOneSourceAccruedDistributionsRel.DistributionAmount.CurrencyAmount		
						invoke UnmatchPhase1 PayablesInvoiceDistribution
							invoked.PrmPayablesCompany		= Company
							invoked.PrmPayablesInvoice		= PayablesInvoice
							invoked.UnmatchFrom				= UnmatchFrom
							invoked.PostDate				= PostDate
							invoked.PrmMatchObjectID		= MatchObjectID
							invoked.PrmLastDistribution		= last PayablesInvoiceDistribution set.PayablesInvoiceDistribution 
					else
						for each MatchTransPayablesInvoiceRel
							if (each.PayablesInvoiceTaxRel not exists)
								invoke Update each.PayablesInvoiceTaxRel
									invoked.TaxCode = PayablesInvoice.TaxCode
									invoked.EnteredInvoiceAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount
									invoked.EnteredTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
									invoked.TotalInvoicedTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount	
									invoked.TotalAccruedTaxAmount = sum MatchOneSourceAccruedDistributionsRel.DistributionAmount.CurrencyAmount		

							invoke UnmatchPhase1 PayablesInvoiceDistribution
								invoked.PrmPayablesCompany	= each.Company
								invoked.PrmPayablesInvoice	= each.PayablesInvoice
								invoked.UnmatchFrom			= UnmatchFrom
								invoked.PostDate			= PostDate
								invoked.PrmMatchObjectID	= each.MatchObjectID
								invoked.PrmLastDistribution	= last PayablesInvoiceDistribution set.PayablesInvoiceDistribution 
				else
					if  (CreditOrDebitMemo
					and  Suffix = blank)
						invoke UnmatchRelatedInvoice
							invoked.UnmatchFrom			= UnmatchFrom
							invoked.PostDate			= PostDate
							invoked.PrimaryInvoice		= PayablesInvoice
					else
						for each MatchTransPayablesInvoiceRel
							invoke UnmatchRelatedInvoice each
								invoked.UnmatchFrom			= UnmatchFrom
								invoked.PostDate			= PostDate
								invoked.PrimaryInvoice		= PayablesInvoice

		UnmatchFinal is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				UnmatchFrom							is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"
			Action Rules

				TransientInUnmatch = true

				if (UnmatchFrom.MA70)

					Status 						= 1
					MatchErrorType 				= 1
					initialize MatchStatus
					initialize MatchLevel
					initialize MatchDate
					initialize MatchObjectID
					initialize RetainageAmount
					initialize BaseRetainageAmount

					if  (MatchProcessType.AOCOnly
					and !CostComponentMatch)
						include UpdateMatchInvoiceDetail

					if  (MatchProcessType.ServiceContract
					or  (CreditOrDebitMemo
					and  Suffix != 111))
						invoke DeleteNoInvoiceUpdate MatchPurchaseOrderInvoicesRel

					if  (CreditOrDebitMemo)
						invoke DeleteNoInvoiceUpdate PayablesInvoiceDetailRel
						invoke DeleteNoInvoiceUpdate PayablesInvoiceAddOnChargeRel
						invoke DeleteNoInvoiceUpdate PayablesInvoiceSpreadAddOnCharge set

					if  (CreditOrDebitMemo
					or   IsChargeback
					or   MatchProcessType.ServiceContract
					or  (MatchProcessType.AOCOnly
					and !CostComponentMatch))
						WillBeCancelled = true
					else
						WillBeCancelled = false


					if  (WillBeCancelled)
						include CancelChargeback
						make transition to Cancelled
						for each PayablesInvoiceDistributionNoCancelSequenceRel
							invoke FastUpdate each
								invoked.CancelSequence	= CancelSequence
						invoke TriggerSupplierInvoiceBOD




				else
					MatchStatus = 7  

					if  (MatchProcessType.AOCOnly)
						for each MatchPurchaseOrderInvoicesRel
							for each each.PurchaseOrder.PurchaseOrderLine set
								invoke UpdateFromMatch each
									initialize invoked.MatchedQuantity
									initialize invoked.MatchedNotReceivedQuantity
									initialize invoked.MatchedAmount
									initialize invoked.WriteOffQuantity

				initialize BackgroundProcessing

				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)

					invoke EditTotalsRoute BudgetTemplateGroupTotal 	
						invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmBudgetEditGroup          = UniqueID
						invoked.PrmMode						= BudgetEditMode.UpdateOnly
						invoked.PrmBusinessClassName		= "PayablesInvoice"
						invoked.PrmEditContext              = "Unmatch"
						invoked.PrmTotalsProcessing			= BudgetEditTotalsProcessing.Purge

					include ReleaseGLCommit



				invoke CreateNoRules PayablesInvoiceAudit
					invoked.Company					= Company
					invoked.PayablesInvoice			= PayablesInvoice
					invoked.Resource				= actor.agent(Employee).Employee
					invoked.Status					= 17	
					invoked.UpdateDate				= current timestamp

				if  (MatchAgingInvoiceRel exists)
					invoke Unmatch MatchAgingInvoiceRel

				if  (CreditOrDebitMemo
				and  Suffix = blank)
					invoke CheckAndCreateReconciliationQueueRecord


		UnmatchRelatedInvoice is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PostDate							is Date
				UnmatchFrom							is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"
				PrimaryInvoice						is like PayablesInvoice
			Action Rules
				BypassNegativeRateEdit = true
				TransientInUnmatch = true


				if (PayablesInvoiceTaxRel not exists)
					invoke Update PayablesInvoiceTaxRel
						invoked.TaxCode = PayablesInvoice.TaxCode
						invoked.EnteredInvoiceAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount
						invoked.EnteredTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
						invoked.TotalInvoicedTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount	
						invoked.TotalAccruedTaxAmount = sum MatchOneSourceAccruedDistributionsRel.DistributionAmount.CurrencyAmount		

				if  (UnmatchFrom.MA70)

					if  (CreditOrDebitMemo
					or   IsChargeback
					or   MatchProcessType.ServiceContract
					or  (MatchProcessType.AOCOnly
					and !CostComponentMatch))
						WillBeCancelled = true
					else
						WillBeCancelled = false



					include SubtractFromVendorBalances		

					if  (MatchProcessType.ServiceContract
					or  (MatchProcessType.AOCOnly
					and  !CostComponentMatch))
						TransientEnteredTaxAmount = TaxAmount
						for each PayablesInvoiceDistribution set
							if (each.MatchCreated entered   
							or (each.Status.Released		
							and WillBeCancelled)            
							or  !each.DistributionType.Distribution) 
								invoke UnmatchDelete each 

						for each OpenPayablesInvoicePaymentRel  
							invoke RestrictedDelete each
					else
						for each PayablesInvoicePaymentRel

							if  (RetainageAccrualCode entered
							or   IsChargeback)					
								invoke Delete PayablesInvoiceRetainageDistributionsRel
								invoke Delete PayablesOnHoldPaymentRel

							initialize FirstPaymentSequence

							if  (MatchCompanyRel.DiscountRecognition.Match
							and  each.DiscountAmount.CurrencyAmount entered)
								invoke Delete PayablesInvoiceDiscountRel

							if  (IsChargeback
							or   CreditOrDebitMemo)
								invoke RestrictedDelete each
							else
							if  (RetainageAccrualCode not entered)
								if  (MatchCompanyRel.DiscountRecognition.Match
								and  each.DiscountAmount.CurrencyAmount entered)
									invoke FastUpdate each
										initialize invoked.MatchDiscountTaken
							else
							if  (FirstPaymentSequence not entered)
								FirstPaymentSequence = each.PayablesInvoicePayment.PaymentSequence
							else
								invoke FastUpdate FirstPaymentRel		
									invoked.PaymentAmount.CurrencyAmount				+= each.PaymentAmount.CurrencyAmount
									invoked.RevaluedBaseAmount.CurrencyAmount			+= each.RevaluedBaseAmount.CurrencyAmount
									invoked.DiscountAmount.CurrencyAmount				+= each.DiscountAmount.CurrencyAmount
									invoked.NetPaymentAmount.CurrencyAmount				+= each.NetPaymentAmount.CurrencyAmount
									invoked.WithholdingAmount							+= each.WithholdingAmount

									invoked.ReportableIncomeAmount						+= each.ReportableIncomeAmount
									invoked.GainLossAmount								+= each.GainLossAmount
									invoked.BankCheckAmount								+= each.BankCheckAmount

								invoke RestrictedDelete each

							if  (RetainageAccrualCode entered
							and  FirstPaymentSequence entered)
								LastPaymentSequence											= FirstPaymentSequence

						TransientEnteredTaxAmount = TaxAmount

						for each PayablesInvoiceDistribution set

							if (each.MatchCreated entered   
							or (each.Status.Released		
							and WillBeCancelled)            
							or  !each.DistributionType.Distribution) 
								invoke UnmatchDelete each 
							else
							if (TaxEntityUsesSabrix
							and each.TaxCode entered)


								if (OneSourceOriginal)
									POTaxAmount				-= each.DistributionAmount.CurrencyAmount

									invoke FastUpdate each.PayablesInvoiceDetail
										invoked.TaxAmount 	-= each.DistributionAmount.CurrencyAmount

									invoke UnmatchDelete each
								else
								if  (OneSourceGeneric)
									invoke FastUpdate each.PayablesInvoiceDetail
										initialize invoked.TaxAmount
										initialize invoked.AccruedTaxAmount

									invoke UnmatchDelete each


					Status 						= 1
					MatchErrorType 				= 1


					invoke 1500MaUnmatch
						invoked.UnmatchFrom = UnmatchFrom
						invoked.PrimaryInvoice = PrimaryInvoice



					if  ((MatchProcessType.AOCOnly
					and   !CostComponentMatch)
					and  (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
					or    GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit))

						for each PayablesInvoiceAddOnChargeRel 

							if (each.LandedAddOnCharge)
								for each each.PurchaseOrderLine.CommittedPurchaseOrderLineDistributionsRel

									invoke InvoiceCancel each 
										invoked.AOCOnly = true 
							else 
								for each each.POAndLineAOCRel.CommittedPurchaseOrderLineDistributionsRel

									invoke InvoiceCancel each 
										invoked.AOCOnly = true 

					if  (MatchProcessType.AOCOnly
					and !CostComponentMatch)
						include UpdateMatchInvoiceDetail

					initialize MatchStatus
					initialize MatchLevel
					initialize MatchDate
					initialize MatchObjectID

					initialize RetainageAmount
					initialize BaseRetainageAmount

					if  (MatchProcessType.ServiceContract
					or  (CreditOrDebitMemo
					and  Suffix != 111))
						invoke DeleteNoInvoiceUpdate MatchPurchaseOrderInvoicesRel

					if  (CreditOrDebitMemo)
						invoke DeleteNoInvoiceUpdate PayablesInvoiceDetailRel
						invoke DeleteNoInvoiceUpdate PayablesInvoiceAddOnChargeRel
						invoke DeleteNoInvoiceUpdate PayablesInvoiceSpreadAddOnCharge set

					if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)


						invoke EditTotalsRoute BudgetTemplateGroupTotal 	
							invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup          = UniqueID
							invoked.PrmMode						= BudgetEditMode.UpdateOnly
							invoked.PrmBusinessClassName		= "PayablesInvoice"
							invoked.PrmEditContext              = "Unmatch"
							invoked.PrmTotalsProcessing			= BudgetEditTotalsProcessing.Purge

						include ReleaseGLCommit

					if  (TaxEntityUsesSabrix)
						for each PayablesInvoiceCommentRel
							if  (each.Title = "Short_Paid")
								invoke Delete each
							end for each

					invoke CreateNoRules PayablesInvoiceAudit
						invoked.Company					= Company
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.Resource				= actor.agent(Employee).Employee
						invoked.Status					= 17	
						invoked.UpdateDate				= current timestamp

					if  (MatchAgingInvoiceRel exists)
						invoke Unmatch MatchAgingInvoiceRel

					if  (WillBeCancelled)
						include CancelChargeback
						make transition to Cancelled
						for each PayablesInvoiceDistributionNoCancelSequenceRel
							invoke FastUpdate each
								invoked.CancelSequence	= CancelSequence
						invoke TriggerSupplierInvoiceBOD



					else
					if (PayablesInvoiceTaxRel exists)
						TaxAmount = PayablesInvoiceTaxRel.EnteredTaxAmount


					if (MatchReconQueueRel exists)
						invoke FastUpdate MatchReconQueueRel
							initialize invoked.BuildStamp
				else



					invoke CreateFromUnmatch PayablesInvoice
						assign result to NewInvoice
						fill in fields from this instance
							except invoked.InvoiceAmount
							except invoked.RevaluedBaseAmount
							except invoked.InvoiceAmount.CurrencyAmount
							except invoked.AllowableAmountForDiscount
							except invoked.TaxableAmount
							except invoked.TotalTaxableAmount
							except invoked.TaxAmount
							except invoked.TotalTaxAmount
							except invoked.DiscountDate1
							except invoked.DiscountDate2
							except invoked.DiscountDate3
							except invoked.DiscountPercent1
							except invoked.DiscountPercent2
							except invoked.DiscountPercent3
							except invoked.BaseDiscountAmount1
							except invoked.BaseDiscountAmount2
							except invoked.BaseDiscountAmount3
							except invoked.DiscountAmount1
							except invoked.DiscountAmount2
							except invoked.DiscountAmount3
							except invoked.TotalPaymentAmount
							except invoked.TotalDistributionAmount
							except invoked.RetailAmount
							except invoked.MatchAmount
							except invoked.AddOnChargeAmount
							except invoked.ServiceAmount
							except invoked.TaxAdjustment
							except invoked.OriginatingInterfaceRun
							except invoked.MatchStatus
							except invoked.PrintChargeback 

						if  (IsCreditMemo)
							invoked.InvoiceType			= "D"
						else
							invoked.InvoiceType			= "C"

						if  (IsChargeback)
							invoked.Suffix				= 888
							invoked.MatchStatus 		= 7
						else
							invoked.Suffix				= 999
							invoked.MatchStatus 		= 7

						invoked.DistributionDate		= PostDate
						invoked.Status 					= 1
						invoked.FirstPurchaseOrder		= this instance.FirstPurchaseOrder
						invoked.MatchErrorType 			= 1
						invoked.InvoiceAmount.CurrencyAmount	= this instance.InvoiceAmount.CurrencyAmount * -1
						invoked.InvoiceAmount.ExchangeDate		= this instance.InvoiceAmount.ExchangeDate
						invoked.TaxAmount 						= this instance.TaxAmount * -1
						invoked.CurrencyTable					= this instance.CurrencyTable

						initialize invoked.MatchLevel
						initialize invoked.MatchDate
						initialize invoked.ReconciliationDate
						initialize invoked.AmountPaid

					include SubtractFromVendorBalances		

					invoke Delete PayablesOnHoldPaymentRel

					for each PayablesInvoicePaymentRel

						if  (!each.PayablesInvoicePayment.VoidSequence entered)
							invoke CreateFromUnmatch PayablesInvoicePayment
								assign result to NewPayment
								fill in fields from each
									except invoked.PayablesInvoice
									except invoked.BankCheckAmount
									except invoked.LastCurrencyRevaluationDate
									except invoked.PaymentAmount
									except invoked.RevaluedBaseAmount
									except invoked.DiscountDate
									except invoked.DiscountPercent
									except invoked.DiscountAmount
									except invoked.NetPaymentAmount
									except invoked.WithholdingAmount
									except invoked.TransactionNumber
									except invoked.TransactionIDNumber
									except invoked.SeparatePayment
									except invoked.CheckDate
									except invoked.BankCheckAmount
									except invoked.CheckSuffix
									except invoked.GainLossAmount
									except invoked.TransientAllowableAmount
									except invoked.OnHold
									except invoked.OnHoldDate
									except invoked.OffHoldDate
									except invoked.CashRequirementsResult

								invoked.PayablesInvoice							= NewInvoice.PayablesInvoice
								invoked.InvoiceCurrency							= InvoiceCurrency
								invoked.Status = 1
								invoked.PaymentAmount.CurrencyAmount			= -1 * each.PaymentAmount.CurrencyAmount
								invoked.PaymentAmount.ExchangeDate				= each.PaymentAmount.ExchangeDate
								invoked.RevaluedBaseAmount.CurrencyAmount		= -1 * each.RevaluedBaseAmount.CurrencyAmount
								invoked.RevaluedBaseAmount.ExchangeDate			= each.RevaluedBaseAmount.ExchangeDate
								invoked.DiscountAmount.CurrencyAmount			= -1 * each.DiscountAmount.CurrencyAmount
								invoked.DiscountAmount.ExchangeDate				= each.DiscountAmount.ExchangeDate
								if (each.DiscountAmount.CurrencyAmount entered)
									invoked.DiscountDate						= each.DiscountDate
									invoked.DiscountPercent						= each.DiscountPercent
								invoked.NetPaymentAmount.CurrencyAmount			= -1 * each.NetPaymentAmount.CurrencyAmount
								invoked.NetPaymentAmount.ExchangeDate			= each.NetPaymentAmount.ExchangeDate
								if (each.IncomeCode entered)
									invoked.ReportableIncomeAmount					= -1 * each.ReportableIncomeAmount
								else
									initialize invoked.ReportableIncomeAmount

							if  (each.OnHold)
								invoke FastUpdate each
									invoked.OnHold								= false
									initialize invoked.OnHoldDate
									invoked.OffHoldDate = current timestamp

							if  (MatchCompanyRel.DiscountRecognition.Match
							and  each.DiscountAmount.CurrencyAmount entered)
								for each each.PayablesInvoiceDiscountRel
									invoke Create PayablesInvoiceDiscount
										fill in fields from each
											except invoked.PayablesInvoice
											except invoked.PayablesInvoicePayment
										invoked.PayablesInvoice					= NewInvoice.PayablesInvoice
										invoked.PayablesInvoicePayment			= NewPayment.PayablesInvoicePayment

					for each PayablesInvoiceDistribution set       
						if (each.DistributionType.Distribution)

							if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
							or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							and   each.MatchCreated not entered
							and   each.GLCommitRel exists)
								invoke ReverseBudgetForUnmatchOrCancel each 

							invoke CreateFromMatch each
								assign result to LocalPayablesInvoiceDistribution
								fill in fields from each
									except invoked.PayablesInvoice
									except invoked.Status
									except invoked.DistributionDate
									except invoked.TaxableAmount
									except invoked.UnitAmount
									except invoked.PayablesInvoiceDistributionObjectID
									except invoked.OriginalPOLineDistribution
									except invoked.OriginalContractLineDistribution
									except invoked.TransientPercent
									except invoked.GltObjId
								invoked.PayablesInvoice						= NewInvoice.PayablesInvoice
								invoked.Status								= 1
								invoked.DistributionDate					= PostDate
								invoked.TransientReversalPostDate			= PostDate
								invoked.TaxableAmount						= each.TaxableAmount * -1
								invoked.UnitAmount							= each.UnitAmount * -1
								invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * -1
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount 		= (each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.KeepRateAndAmount						= true 
								
								invoked.DistributionAmount.ExchangeDate		= each.DistributionAmount.ExchangeDate
								invoked.GLTransactionAmount					= each.DistributionAmount.CurrencyAmount * -1
								invoked.GLFinanceCodeBlock					= each.DistributionAccount
								initialize invoked.TransientReferenceToThisInstance
								invoked.FromUnmatch 						= true
								invoked.TransientTaxingJurisdiction			= each.PayablesTaxDetailRel.TaxingJurisdiction  
								invoked.BypassStructureRelationEdit 		= true 
								invoked.BypassProjectDateEdit				= true  

							if  (RetainageAccrualCode entered)
								for each each.PayablesInvoiceRetainageDistributionRel
									invoke Create PayablesInvoiceRetainageDistribution
										fill in fields from each
											except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice
											except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice = NewInvoice.PayablesInvoice
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PaymentAmount										= each.PaymentAmount * -1
										invoked.RetainageCalculatedAmount							= each.RetainageCalculatedAmount * -1


						else
						if (each.DistributionType.ExpenseAccrual)

							LocalMultiplier = -1

							invoke Create PayablesInvoiceDistribution
								fill in fields from each
									except invoked.PayablesInvoice
									except invoked.DistributionAmount
									except invoked.Status
									except invoked.DistributionDate
									except invoked.TaxableAmount
									except invoked.UnitAmount
									except invoked.PayablesInvoiceDistributionObjectID
									except invoked.OriginalPOLineDistribution
									except invoked.OriginalContractLineDistribution
									except invoked.TransientPercent
									except invoked.GltObjId

								invoked.Company						= Company
								invoked.PayablesInvoice				= NewInvoice.PayablesInvoice
								invoked.GLTPostingDate				= PostDate
								invoked.GLTTransactionDate			= NewInvoice.InvoiceDate
								invoked.DistributionType 			= "A"
								invoked.Status						= 1
								invoked.DistributionDate			= PostDate
								invoked.DistributionAccount			= each.DistributionAccount
								invoked.GLFinanceCodeBlock			= each.DistributionAccount

								invoked.GLTransactionAmount  	  			= each.DistributionAmount.CurrencyAmount * LocalMultiplier
								invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * LocalMultiplier
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 	= (each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = (each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 	= (each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = (each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount 		= (each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 		= (each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1)
								invoked.DistributionAmount.KeepRateAndAmount						= true 

								invoked.DistributionAmount.ExchangeDate		= NewInvoice.InvoiceAmount.ExchangeDate 
								invoked.DistributionAmount.KeepRateAndAmount	= true
								invoked.TaxableAmount						= each.TaxableAmount * LocalMultiplier
								invoked.UnitAmount							= each.UnitAmount * LocalMultiplier
								invoked.FromUnmatch 						= true
								invoked.TransientTaxingJurisdiction			= each.PayablesTaxDetailRel.TaxingJurisdiction

								initialize invoked.TransientReferenceToThisInstance

		            if  (DistributionTypeIsDistributionRel exists        
		            and !PayablesInvoiceDistributionExpenseAccrualRel exists)
		                invoke Create PayablesInvoiceDistribution
		                    invoked.Company                        = Company
		                    invoked.PayablesInvoice                = NewInvoice.PayablesInvoice
		                    invoked.GLTPostingDate                 = PostDate
		                    invoked.GLTTransactionDate             = NewInvoice.InvoiceDate
		                    invoked.DistributionType               = "A"
		                    invoked.Status                         = 1
		                    invoked.DistributionDate               = PostDate
		                    invoked.GLTransactionAmount                                            = InvoiceAmount.CurrencyAmount
		                    invoked.DistributionAmount.ExchangeDate                                = InvoiceAmount.ExchangeDate
		                    invoked.DistributionAmount.CurrencyAmount                              = InvoiceAmount.CurrencyAmount
		                    invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount      = TotalDistributionAmount.FunctionalTotal
		                    invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount       = TotalDistributionAmount.AlternateTotal
		                    invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount      = TotalDistributionAmount.AlternateTotal2
		                    invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount      = TotalDistributionAmount.AlternateTotal3
		                    invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount         = TotalDistributionAmount.ReportTotal1
		                    invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount         = TotalDistributionAmount.ReportTotal2
		                    invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount         = TotalDistributionAmount.ReportTotal3
		                    invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount         = TotalDistributionAmount.ReportTotal4
		                    invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount         = TotalDistributionAmount.ReportTotal5
		                    invoked.GLFinanceCodeBlock                                             = PayablesAccrualCodeDetailRel.DistributionAccount
		                    invoked.DistributionAccount                                            = PayablesAccrualCodeDetailRel.DistributionAccount
		                    invoked.BypassActiveCodeBlockEdit    								   = true

					if (MatchProcessType.ServiceContract)
						for each MatchServiceContractInvoicesRel 
							invoke Create MatchServiceContractInvoice 
								invoked.Company						= Company
								invoked.Contract 					= each.Contract  
								invoked.PayablesInvoice				= NewInvoice.PayablesInvoice
								invoked.VendorGroup 				= Company.VendorGroup 

					invoke 1500MaUnmatch
						invoked.PrmInvoice = NewInvoice.PayablesInvoice
						invoked.UnmatchFrom = UnmatchFrom
						invoked.PrimaryInvoice = PrimaryInvoice

					if  (MatchProcessType.AOCOnly)
						for each MatchPurchaseOrderInvoicesRel
							for each each.PurchaseOrder.PurchaseOrderLine set
								invoke UpdateFromMatch each
									initialize invoked.MatchedQuantity
									initialize invoked.MatchedNotReceivedQuantity
									initialize invoked.MatchedAmount
									initialize invoked.WriteOffQuantity


					if  (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
					or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						for each PayablesInvoiceDetailRel 
							for each each.PurchaseOrderLine.CommittedPurchaseOrderLineDistributionsRel
								invoke InvoiceCancel each

						for each PayablesInvoiceAddOnChargeRel 
							for each each.POAndLineAOCRel.HeaderOrLineAddOnChargeDistributionRel
								invoke InvoiceCancel each 

						for each MatchPurchaseOrderInvoicesRel
							invoke EditTotalsRoute BudgetTemplateGroupTotal
								invoked.PrmFinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup 			= each.PurchaseOrder.UniqueID
								invoked.PrmMode 					= BudgetEditMode.UpdateOnly
								invoked.PrmBusinessClassName		= "PurchaseOrder"
								invoked.PrmTotalsProcessing			= BudgetEditTotalsProcessing.Purge
								invoked.PrmEditContext              = "Cancel"

						invoke EditTotalsRoute BudgetTemplateGroupTotal 	
							invoked.PrmFinanceEnterpriseGroup   = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmBudgetEditGroup          = UniqueID
							invoked.PrmMode						= BudgetEditMode.UpdateOnly
							invoked.PrmBusinessClassName		= "PayablesInvoice"
							invoked.PrmEditContext              = "Cancel"
							invoked.PrmTotalsProcessing			= BudgetEditTotalsProcessing.Purge


					invoke CreateNoRules PayablesInvoiceAudit
						invoked.Company					= Company
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.Resource				= actor.agent(Employee).Employee
						invoked.Status					= 17	
						invoked.UpdateDate				= current timestamp

					MatchStatus = 7  

					if  (MatchAgingInvoiceRel exists)
						invoke Unmatch MatchAgingInvoiceRel
						invoke Delete MatchAgingInvoiceRel

			Exit Rules
				if  (!CreditOrDebitMemo
				and  Suffix = blank)
					invoke CheckAndCreateReconciliationQueueRecord

				invoke TriggerSupplierInvoiceBOD NewInvoice.PayablesInvoice 




		1500MaUnmatch is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmInvoice is like PayablesInvoice
				UnmatchFrom							is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"
				PrimaryInvoice                      is like PayablesInvoice
			Action Rules
				if (!IsChargeback)


					if (PurchaseOrderReceiptInvoiceLinkRel exists)		
						for each PurchaseOrderReceiptInvoiceLinkRel




							if  (each.PurchaseOrderLine.LastMatchUnitCost entered)
								HasLastMatchUnitCost = true 
							else 
								HasLastMatchUnitCost = false 

							if  (PayablesInvoice = each.PayablesInvoice
							and  each.PurchaseOrderReceiptInvoiceLink.AddOnCharge not entered
							and !each.Status.Cancelled
							and  each.Type = "MA")
								if  (each.PurchaseOrderLine entered
								and  each.PurchaseOrderLine.ItemType.Service)
									invoke Delete each
								else
									if  (each.PurchaseOrderLine entered
									and (!each.PurchaseOrderLine.CostOption.NoCharge
									or    each.PurchaseOrderLine.AllowZeroCostInvoice))			

										invoke UpdateFromMatch each.PurchaseOrderLine
											invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
											if (!each.PurchaseOrderLine.ItemType.Service)
												if (!CreditOrDebitMemo
												or   CreditForRebill)
													if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt entered)
														if  (!each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.IsCatchWeightItem
														and  each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.ReceivedUOM = each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderLine.EnteredBuyUOM
														and  each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.ReceivedUOM != each.PurchaseOrderLine.VendorPriceUOM)
															invoked.LocalUpdateFromMatchMatchedQuantity			= ((each.MatchedQuantity + each.MatchedNotReceivedQuantity + each.ChargebackQuantity + each.WriteOffQuantity) * (each.PurchaseOrderLine.VendorPriceUOMMultiplier / each.PurchaseOrderLine.EnteredBuyUOMMultiplier) * -1)
														else
															invoked.LocalUpdateFromMatchMatchedQuantity			= ((each.MatchedQuantity + each.MatchedNotReceivedQuantity + each.ChargebackQuantity + each.WriteOffQuantity) * -1)
													else
														invoked.LocalUpdateFromMatchMatchedQuantity				= each.MatchedQuantity * -1

													invoked.LocalUpdateFromMatchMatchedAmount					= each.MatchUnitCost

												invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity			= each.MatchedNotReceivedQuantity * -1
												invoked.LocalUpdateFromMatchChargebackQuantity					= each.ChargebackQuantity * -1
												invoked.LocalUpdateFromMatchWriteOffQuantity					= each.WriteOffQuantity * -1
												invoked.LocalUpdateFromMatchMemoQuantity						= each.MemoQuantity * -1
												if ((each.PurchaseOrderLine.MatchedNotReceivedQuantity - each.MatchedNotReceivedQuantity) < 0)
													invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity		= each.MatchedNotReceivedQuantity * -1

											if (each.PurchaseOrderLine.IsCatchWeightItem)
												if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt entered)
													invoked.LocalFromMatchCatchWeightMatchQuantity				= ((each.CatchWeightMatchQuantity + each.CatchWeightMatchedNotReceivedQuantity + each.CatchWeightChargebackQuantity + each.CatchWeightWriteOffQuantity) * -1)
												else
													invoked.LocalFromMatchCatchWeightMatchQuantity				= each.CatchWeightMatchQuantity * -1

												invoked.LocalFromMatchCatchWeightMNRQuantity					= each.CatchWeightMatchedNotReceivedQuantity * -1
												invoked.LocalFromMatchCatchWeightChargebackQuantity				= each.CatchWeightChargebackQuantity * -1
												invoked.LocalFromMatchCatchWeightWriteOffQuantity				= each.CatchWeightWriteOffQuantity * -1
												invoked.LocalFromMatchCatchWeightMemoQuantity					= each.CatchWeightMemoQuantity * -1
												if ((each.PurchaseOrderLine.CatchWeightMatchedNotReceivedQuantity - each.CatchWeightMatchedNotReceivedQuantity) < 0)
													invoked.LocalFromMatchCatchWeightMNRQuantity				= each.CatchWeightMatchedNotReceivedQuantity * -1

											if (InvoiceType.CreditMemo
											and not CreditForRebill
											and Suffix not entered)
												initialize invoked.LocalUpdateFromMatchMatchedQuantity

									if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine not entered)
										invoke Delete each
									else

										invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrder  
											invoked.PrmMatchObjID					= each.PurchaseOrderReceiptInvoiceLink.MatchObjectID
											invoked.PrmVendorBuyMatchedQuantity		= each.MatchedQuantity
											invoked.PrmPOLineVendorBuyUnitCost		= each.PurchaseOrderLine.VendorBuyUnitCost
										LocalLineNbr								= each.PurchaseOrderLine


										if ((each.PurchaseOrderLine.ItemType.Inventoried
										or  each.PurchaseOrderLine.ItemType.NonStock)
										and (HasLastMatchUnitCost
										or   each.IcvUcst entered)
										and  each.PurchaseOrderLine.ItemLocationRel.InventoryTracked
										and MatchLevel.DetailMatch)

											LocalPurchaseOrder						= each.PurchaseOrder
											LocalPurchaseOrderLine					= each.PurchaseOrderLine
											LocalReceipt 							= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
											LocalReceiptLine 						= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine
											if (CreditOrDebitMemo)
												LocalUnitCostDifference 			= each.MatchUnitCost  
											else 
												LocalUnitCostDifference 			= each.IcvUcst  
				
												if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.ReceivedUOM != each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderLine.EnteredBuyUOM)
													LocalUnitCostDifference 	= LocalUnitCostDifference / each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.VendorPriceUOMMultiplier
												else
													LocalUnitCostDifference 	= LocalUnitCostDifference / each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.ReceivedUOMMultiplier





											if (CreditOrDebitMemo)

												initialize LocalInventoryTransaction 
												LocalInventoryTransaction   = each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
												LocalShipToLocation 		= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.ShipToLocation 
												LocalItem 					= each.Item 
												LocalLineNumber 			= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine 





												for each LocalReceiptLineCostAdjustmentsRel



													if  (each.OriginatingTransactionDocument = LocalInventoryTransaction
													and  each.UnitCost = LocalUnitCostDifference)

														WorkCost = each.UnitCost * -1
														WorkQuantity = each.Quantity

														if  (WorkCost entered
														or   WorkQuantity entered)
															invoke UpdateForCostAdjustment each.ItemLocation 
																invoked.PrmCostDifference			= WorkCost
																invoked.PrmQuantity					= WorkQuantity
																invoked.PrmDocumentNumber			= LocalInventoryTransaction 
																invoked.PrmLineNumber				= LocalLineNumber 
																if (LocalInvoiceAddOnChargeForPOLineRel exists)
																	invoked.PrmAddOnChargeDifference	= true
																if (ProcessLevel.CostVarianceAccount entered)
																	invoked.PrmOffsetAccount			= ProcessLevel.CostVarianceAccount
																else
																	invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount
											else
												initialize LocalInventoryTransaction 
												LocalInventoryTransaction   = each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
												LocalShipToLocation 		= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.ShipToLocation 
												LocalItem 					= each.Item 
												LocalLineNumber 			= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine 





												LocalTransactionCount = instance count of LocalReceiptLineCostAdjustmentsRel

												for each LocalReceiptLineCostAdjustmentsRel



													if  (each.OriginatingTransactionDocument = LocalInventoryTransaction
													and  LocalTransactionCount = 1)
														WorkCost = each.UnitCost * -1
														WorkQuantity = each.Quantity

														if  (WorkCost entered
														or   WorkQuantity entered)

															invoke UpdateForCostAdjustment each.ItemLocation
																invoked.PrmCostDifference			= WorkCost
																invoked.PrmQuantity					= WorkQuantity
																invoked.PrmDocumentNumber		= LocalInventoryTransaction 
																invoked.PrmLineNumber			= LocalLineNumber 
																if (LocalInvoiceAddOnChargeForPOLineRel exists)
																	invoked.PrmAddOnChargeDifference	= true
																if (ProcessLevel.CostVarianceAccount entered)
																	invoked.PrmOffsetAccount			= ProcessLevel.CostVarianceAccount
																else
																	invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount

														end for each 
													
										if (!CreditOrDebitMemo)











											LocalQuantity							= each.MatchedQuantity

											invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine
												if (each.PurchaseOrderLine.IsCatchWeightItem)
													invoked.OpenToMatchQuantity				+= each.CatchWeightMatchQuantity 
													invoked.CatchWeightOpenToMatchQuantity  += each.MatchedQuantity 

													if  (LocalQuantity < each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.MatchedQuantity)
														invoked.MatchedQuantity			    -= LocalQuantity
													else
														initialize invoked.MatchedQuantity

													if  (each.CatchWeightMatchQuantity < each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.CatchWeightMatchedQuantity)
														invoked.CatchWeightMatchedQuantity			    -= each.CatchWeightMatchQuantity
													else
														initialize invoked.CatchWeightMatchedQuantity
												else 
													invoked.OpenToMatchQuantity				+= LocalQuantity

													if  (LocalQuantity < each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.MatchedQuantity)
														invoked.MatchedQuantity			    -= LocalQuantity
													else
														initialize invoked.MatchedQuantity

												initialize invoked.MatchObjectID
												initialize invoked.MatchSequence
												initialize invoked.ArchivedWriteOffQuantity
												initialize invoked.PayablesInvoice



											if  (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.VendorPriceUOMQuantity entered)
												LocalQuantity			= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
												LocalMatchAmount 		= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.OriginalUnitCost * each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
											else
												LocalQuantity			= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.EnteredReceivedQuantity
												LocalMatchAmount 		= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.OriginalUnitCost * each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.EnteredReceivedQuantity


											invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
												if ((invoked.MatchedAmount - LocalMatchAmount) < 0)
													initialize invoked.MatchedAmount
												else
													invoked.MatchedAmount -= LocalMatchAmount
												if ((invoked.HashQuantity - LocalQuantity) < 0)
													initialize invoked.HashQuantity
												else
													invoked.HashQuantity -= LocalQuantity
												invoked.Status	= 1


										else
										if (CreditForRebill)


											LocalMatchedQuantity = each.MatchedQuantity * -1							

											invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine
												invoked.MatchObjectID												= MatchInvoiceReferenceRel.OriginalInvoice.MatchObjectID
												invoked.MatchSequence												= MatchInvoiceReferenceRel.OriginalInvoice.first PurchaseOrderReceiptLineRel.MatchSequence
												invoked.ArchivedQuantity											-= each.ArchivedQuantity   
												invoked.MatchedQuantity												-= each.MatchedQuantity 
												invoked.OpenToMatchQuantity											+= each.MatchedQuantity 
												if (invoked.OpenToMatchQuantity < 0)
													initialize invoked.OpenToMatchQuantity


											invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
												invoked.MatchedAmount -= (each.MatchedQuantity * each.MatchUnitCost)
												invoked.HashQuantity  -= LocalQuantity	


										if (each.PurchaseOrderReceiptInvoiceLink.AddOnCharge not entered)
											invoke Delete each

					else
						for each PurchaseOrderReceiptLineRel			



							LocalReceipt = each.PurchaseOrderReceipt
							LocalReceiptLine = each.PurchaseOrderReceiptLine

							if  (each.PurchaseOrderLine.LastMatchUnitCost entered)
								HasLastMatchUnitCost = true 
							else 
								HasLastMatchUnitCost = false 



							if (each.MatchSequence > 0)


								if  (each.PurchaseOrderLine entered
								and  LocalMNRTestQuantity entered
								and (each.PurchaseOrderLine.MatchedNotReceivedQuantity entered
								or   each.PurchaseOrderLine.ChargebackQuantity entered
								or   each.PurchaseOrderLine.WriteOffQuantity entered
								or   each.PurchaseOrderLine.MatchedQuantity entered))

									if (each.InvoiceDetailMatchObjectIDAndSequenceRel exists)
										LocalMNRTestQuantity -= each.first InvoiceDetailMatchObjectIDAndSequenceRel.BuyUOMMatchedQuantity
										if (LocalMNRTestQuantity < 0)
											initialize LocalMNRTestQuantity
										else

											invoke UpdateFromMatch PurchaseOrderLineRel
												invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
												if (each.first InvoiceDetailMatchObjectIDAndSequenceRel.ExcessQuantityProcess.Chargeback)
													if (each.PurchaseOrderLine.ChargebackQuantity entered)
														if (LocalMNRTestQuantity > each.ChargebackQuantity)
															invoked.LocalUpdateFromMatchChargebackQuantity	= each.PurchaseOrderLine.ChargebackQuantity * -1
														else
															invoked.LocalUpdateFromMatchChargebackQuantity	= LocalMNRTestQuantity * -1
												else
												if (each.first InvoiceDetailMatchObjectIDAndSequenceRel.ExcessQuantityProcess.MatchWriteOff)
													if (each.PurchaseOrderLine.WriteOffQuantity entered)
														if (LocalMNRTestQuantity > each.PurchaseOrderLine.WriteOffQuantity)
															invoked.LocalUpdateFromMatchWriteOffQuantity	= each.PurchaseOrderLine.WriteOffQuantity * -1
														else
															invoked.LocalUpdateFromMatchWriteOffQuantity	= LocalMNRTestQuantity * -1
												else
												if (each.first InvoiceDetailMatchObjectIDAndSequenceRel.ExcessQuantityProcess.MatchNoReceipt)
													if (each.PurchaseOrderLine.MatchedNotReceivedQuantity entered)
														if (LocalMNRTestQuantity > each.PurchaseOrderLine.MatchedNotReceivedQuantity)
															invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity	= each.PurchaseOrderLine.MatchedNotReceivedQuantity * -1
														else
															invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity	= LocalMNRTestQuantity * -1

												if (each.PurchaseOrderLine.MatchedQuantity entered)
													if (LocalMNRTestQuantity > each.PurchaseOrderLine.MatchedQuantity)
														invoked.LocalUpdateFromMatchMatchedQuantity	= each.PurchaseOrderLine.MatchedQuantity * -1
													else
														invoked.LocalUpdateFromMatchMatchedQuantity	= LocalMNRTestQuantity * -1

								LocalMNRTestQuantity 		= each.MatchedQuantity




							else
								LocalMNRTestQuantity 		+= each.MatchedQuantity



							if ((each.ItemType.Inventoried
							or   each.ItemType.NonStock)
							and HasLastMatchUnitCost
							and (MatchLevel.DetailMatch
							or   IsChargeback)
							and  each.InvoiceDetailMatchObjectIDAndSequenceRel exists)

								LocalPurchaseOrder						= each.PurchaseOrder
								LocalPurchaseOrderLine					= each.PurchaseOrderLine

								initialize LoopCounter
								for each each.InventoryTransactionLineCostAdjustmentDescendingRel

									WorkCost = each.UnitCost * -1
									WorkQuantity = each.Quantity

									if  (WorkCost entered
									or   WorkQuantity entered)
										invoke UpdateForCostAdjustment each.ItemLocation
											invoked.PrmCostDifference			= WorkCost
											invoked.PrmQuantity					= WorkQuantity
											invoked.PrmDocumentNumber			= each.InventoryCostHistoryForCostAdjustmentRel.InventoryTransaction
											invoked.PrmLineNumber				= each.InventoryCostHistoryForCostAdjustmentRel.InventoryCostHistory.LineNumber
											if (LocalInvoiceAddOnChargeForPOLineRel exists)
												invoked.PrmAddOnChargeDifference	= true
											if (ProcessLevel.CostVarianceAccount entered)
												invoked.PrmOffsetAccount			= ProcessLevel.CostVarianceAccount
											else
												invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount

									end for each 

							if ((!each.PurchaseOrderLine.CostOption.NoCharge
							or    each.PurchaseOrderLine.AllowZeroCostInvoice)		
							and (MatchLevel.DetailMatch
							or   !IsChargeback))


								invoke UpdateFromMatch each.PurchaseOrderLine 
									invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
									if (!each.ItemType.Service
									or   each.PurchaseOrderLine.ServiceCode.Quantity)
										invoked.LocalUpdateFromMatchMatchedQuantity				= each.MatchedQuantity * -1
										invoked.LocalUpdateFromMatchChargebackQuantity			= each.PurchaseOrderLine.ChargebackQuantity * -1
										invoked.LocalUpdateFromMatchMemoQuantity				= each.PurchaseOrderLine.MemoQuantity * -1

									if (each.PurchaseOrderLine.ServiceCode.Amount)
										invoked.LocalUpdateFromMatchMatchedAmount				= each.PurchaseOrderLine.MatchedAmount * -1

									if (each.IsCatchWeightItem)
										invoked.LocalFromMatchCatchWeightMatchQuantity			= each.CatchWeightQuantity * -1


									if (InvoiceType.CreditMemo
									and Suffix not entered)
										initialize invoked.LocalUpdateFromMatchMatchedQuantity

								invoke UpdateFromMatch each.PurchaseOrder  
									invoked.PrmMatchObjID					= each.MatchObjectID
									invoked.PrmVendorBuyMatchedQuantity		= each.MatchedQuantity
									invoked.PrmPOLineVendorBuyUnitCost		= each.PurchaseOrderLine.VendorBuyUnitCost

							if (each.IntrastatNumber entered)

								IntrastatProcessing.DetailFc						= "C"
								IntrastatProcessing.TaxEntity						= Company.AccountingEntity
								IntrastatProcessing.IntrastatNumber 				= each.IntrastatNumber
								IntrastatProcessing.LineNumber						= each.PurchaseOrderReceiptLine
								initialize IntrastatProcessing.BaseAmount
								LocalTrigger										= IntrastatProcessing.MainTrigger


							if (!IsChargeback)

								invoke UpdateFromMatch each
									initialize invoked.MatchedQuantity
									initialize invoked.MatchObjectID
									initialize invoked.MatchSequence
									initialize invoked.Invoice
									initialize invoked.Suffix
									initialize invoked.ArchivedWriteOffQuantity

									if (each.VendorBuyUOM != each.VendorPriceUOM
									and each.CatchWeightQuantity > 0)
										invoked.OpenToMatchQuantity		= each.MatchedQuantity













									else
										invoked.OpenToMatchQuantity				= each.BuyUOMQuantity



								if  (each.VendorPriceUOMQuantity entered)
									LocalQuantity			= each.VendorPriceUOMQuantity
									LocalMatchAmount 		= each.OriginalUnitCost * each.VendorPriceUOMQuantity
								else
									LocalQuantity			= each.EnteredReceivedQuantity
									LocalMatchAmount 		= each.OriginalUnitCost * each.EnteredReceivedQuantity

								invoke UpdateFromMatch each.PurchaseOrderReceipt
									if ((invoked.MatchedAmount - LocalMatchAmount) < 0)
										initialize invoked.MatchedAmount
									else
										invoked.MatchedAmount -= LocalMatchAmount
									if ((invoked.HashQuantity - LocalQuantity) < 0)
										initialize invoked.HashQuantity
									else
										invoked.HashQuantity -= LocalQuantity
									invoked.Status	= 1


				if (UnmatchFrom.MA75)
					invoke DeleteNoInvoiceUpdate PayablesInvoiceSpreadAddOnChargeRel





				MultReceiptLines = false
				for each PayablesInvoiceDetailRel
					if (each.OtherDetailsCreatedFromReceiptRel exists)
						MultReceiptLines = true
						end for each


					if (!IsChargeback)
						if ((each.PurchaseOrderLine.ItemType.Inventoried
						or  each.PurchaseOrderLine.ItemType.NonStock)
						and  each.PurchaseOrderLine.ItemLocationRel.InventoryTracked
						and MatchLevel.DetailMatch)


							LocalShipToLocation 		= each.PurchaseOrderReceiptLine.ShipToLocation 
							LocalItem 					= each.Item 
							LocalCounter 				= instance count of LocalReceiptLineCostAdjustmentsRel
							LocalLineNumber 			= each.PurchaseOrderReceiptLine 
							LocalInventoryTransaction   = each.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction


							if (each.ReconChargebackCostMessageRel exists 
							and each.PurchaseOrderLine.LastMatchUnitCost not entered
							and LocalCounter = 2)
								for each LocalReceiptLineCostAdjustmentsRel
									invoke UpdateForCostAdjustment LocalItemLocationRel
										invoked.PrmCostDifference			= each.UnitCost * -1
										invoked.PrmQuantity					= each.Quantity  
										invoked.PrmDocumentNumber			= LocalInventoryTransaction
										invoked.PrmLineNumber				= LocalLineNumber
										if (ProcessLevel.CostVarianceAccount entered)
											invoked.PrmOffsetAccount			= ProcessLevel.CostVarianceAccount
										else
											invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount
							else 

							if (each.TaxCode != each.PurchaseOrderLine.TaxCode  
							and each.PurchaseOrderLine.LastMatchUnitCost not entered 
							and each.ReconCostMessageRel not exists) 

		                        LocalUnitCostDifference = ((each.PurchaseOrderLine.LandedUnitCost - each.PurchaseOrderLine.EnteredUnitCost) - (each.LandedTax / each.MatchedQuantity)) 


								if (each.VendorPriceUOMMultiplier != each.PurchaseOrderLine.EnteredBuyUOM)
									LocalUnitCostDifference 	= LocalUnitCostDifference / each.VendorPriceUOMMultiplier



								if (CreditOrDebitMemo)
									LocalUnitCostDifference = LocalUnitCostDifference * -1

								if  (LocalUnitCostDifference entered
								and  LocalReceiptLineCostAdjustmentsRel exists)

									invoke UpdateForCostAdjustment each.ItemLocationRel
										invoked.PrmCostDifference			= LocalUnitCostDifference
										invoked.PrmQuantity					= each.MatchedQuantity 
										invoked.PrmDocumentNumber			= each.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
										invoked.PrmLineNumber				= each.PurchaseOrderReceiptLine 
										invoked.PrmOriginatingPurchaseOrder	= each.PurchaseOrder
										if (ProcessLevel.CostVarianceAccount entered)
											invoked.PrmOffsetAccount			= ProcessLevel.CostVarianceAccount
										else
											invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount



					if  (MatchProcessType.ServiceContract)

						initialize LocalTotalAddOnChargeAmount
						LocalTotalNewTaxAmount							= each.TaxAmount

						for each each.PayablesInvoiceAddOnChargeRel
							LocalTotalNewTaxAmount						+= each.TaxAmount
							LocalTotalAddOnChargeAmount					+= each.TotalBaseAmount

						invoke UpdateAmountsAndQuantities each.ContractLine  
							if (IsChargeback) 
								if (each.ContractLine.TaxAmountOrdered not entered)
									initialize invoked.InTaxAmount 
								else
									invoked.InTaxAmount					= LocalTotalNewTaxAmount * -1

								if (each.ContractLine.AddOnChargeAmountOrdered not entered)
									initialize invoked.InAddOnChargeAmount 
								else 
									invoked.InAddOnChargeAmount			= LocalTotalAddOnChargeAmount * -1

								if (each.ContractLine.AmountOrdered not entered)
									initialize invoked.InAmount
								else  
									invoked.InAmount					= each.TotalDistributionAmount * -1

								if (each.ContractLine.QuantityOrdered not entered)
									initialize invoked.InQuantity
								else  
									invoked.InQuantity					= each.MatchedQuantity * -1
							else 
								invoked.InAddOnChargeAmount				= LocalTotalAddOnChargeAmount * -1
								invoked.InTaxAmount						= LocalTotalNewTaxAmount * -1
								invoked.InAmount						= each.TotalDistributionAmount * -1
								invoked.InQuantity						= each.MatchedQuantity * -1

							invoked.InDate								= PayablesInvoice.InvoiceDate
							invoked.InUOM.UnitOfMeasure					= each.EnteredUOM
							invoked.InCurrency                          = PayablesInvoice.InvoiceCurrency
							invoked.FromMatch                           = true
							if (PayablesInvoice.ServiceContract.UseRetainage)
								invoked.InInvoiceAmount                 = each.TotalDistributionAmount * -1

					if (each.ItemType.Service
					and (each.PurchaseOrderLine.MatchedQuantity entered 
					or   each.PurchaseOrderLine.MatchedAmount entered
					or   each.MemoAdjustType.QuantityAdjustment)
					and each.PurchaseOrderReceipt not entered)


						if (IsChargeback
						and each.PurchaseOrderLine.ServiceCode.Quantity)

							if  (each.PurchaseOrderLine.ChargebackQuantity entered
							and  each.MatchedQuantity entered)

								invoke UpdateFromMatch each.PurchaseOrderLine
									invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
									if (each.MatchedQuantity < 0
									and each.MatchedQuantity * -1 > each.PurchaseOrderLine.ChargebackQuantity)
										invoked.LocalUpdateFromMatchChargebackQuantity = each.MatchedQuantity
									else
									if  (each.MatchedQuantity > each.PurchaseOrderLine.ChargebackQuantity)
										invoked.LocalUpdateFromMatchChargebackQuantity = each.MatchedQuantity * -1
									else
										invoked.LocalUpdateFromMatchChargebackQuantity = each.PurchaseOrderLine.ChargebackQuantity * -1
						else
						if (each.PurchaseOrderLine.ServiceCode.Quantity
						and each.MemoAdjustType.CostAdjustment) 
							NextSentence = true 
						else 
						if (each.PurchaseOrderLine entered
						and !IsChargeback)



							invoke UpdateFromMatch each.PurchaseOrderLine
								invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
								if (CreditForRebill)
									if (each.PurchaseOrderLine.ServiceCode.Quantity)
										invoked.LocalUpdateFromMatchMatchedQuantity		= each.MatchedQuantity * -1
										invoked.LocalUpdateFromMatchMatchedAmount		= each.MatchUnitCost
									else
										invoked.LocalUpdateFromMatchMatchedQuantity		= 1
										initialize invoked.LocalUpdateFromMatchChargebackQuantity
										invoked.LocalUpdateFromMatchMatchedAmount		= ((each.PayablesInvoiceDetail.MatchedQuantity * each.PayablesInvoiceDetail.MatchUnitCost) * -1)
								else
									if (each.PurchaseOrderLine.ServiceCode.Quantity)
										invoked.LocalUpdateFromMatchMatchedQuantity		= each.MatchedQuantity * -1
										invoked.LocalUpdateFromMatchMatchedAmount		= each.TotalDistributionAmount * -1
									else
										invoked.LocalUpdateFromMatchMatchedQuantity		= -1
										initialize invoked.LocalUpdateFromMatchChargebackQuantity
										invoked.LocalUpdateFromMatchMatchedAmount		= ((each.PayablesInvoiceDetail.MatchedQuantity * each.PayablesInvoiceDetail.MatchUnitCost) * -1)


					if (UnmatchFrom.MA70)
						for each each.MatchInvoiceMessageRel		
							if (each.MatchMessageOrigin != 1)
								invoke Delete each

					if  (UnmatchFrom.MA70 
					and  MatchPrepaymentMethod.PrepayFromInvoice
					and (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
					or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track))
						invoke FastUpdate each
							initialize invoked.MatchObjectID
							if (!MultReceiptLines)
								initialize invoked.PurchaseOrderReceipt
								initialize invoked.PurchaseOrderReceiptLine
							if  (UnmatchFrom.MA70)
								initialize invoked.Status
							invoked.MatchUpdateDate			= current corporate date
					else 
					if  (UnmatchFrom.MA70
					and (each.RecordSource.CreatedWithinMatch
					or   each.RecordSource.GeneratedByAocSpread
					or   MatchProcessType.ServiceContract))
						invoke DeleteNoInvoiceUpdate each
							invoked.PrimaryInvoice = PrimaryInvoice
					else
					if  (each.RecordSource.Invoice
					or   each.RecordSource.LineMatchMa43
					or   UnmatchFrom.MA75)
						invoke FastUpdate each
							initialize invoked.MatchObjectID
							if (!MultReceiptLines)
								initialize invoked.PurchaseOrderReceipt
								initialize invoked.PurchaseOrderReceiptLine
							if  (UnmatchFrom.MA70)
								initialize invoked.Status
							invoked.MatchUpdateDate			= current corporate date

					if (PayablesInvoice.CreditOrDebitMemo
					and each.MemoAdjustType not entered)
						invoke PopulateMemoAdjustType each

				if (HasMultipleServiceContracts)
					for each MatchServiceContractInvoicesRel 
						invoke FinishUpdateContractAmounts each.Contract 
				else 
					invoke FinishUpdateContractAmounts ServiceContract

				for each PayablesInvoiceAddOnChargeRel  

					LocalAddOnCharge 			= each.AddOnCharge 
					LocalInvoiceDetailUnitCost	= each.MatchUnitCost
					LocalMiscAOC 				= each.POAndLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount - each.MatchUnitCost


					if  (!IsChargeback
					and   each.POAndLineAOCRel exists
					and  !each.POAndLineAOCRel.AddOnChargeOrigin.Matching)


						if (each.PurchaseOrderLine not entered)

							invoke UpdateFromMatch each.POAndLineAOCRel
								invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
								if (each.AddOnCharge.AddOnChargeType.Allowance 
								and each.TotalDistributionAmount < each.POAndLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount)
									invoked.MiscellaneousAddOnChargeInvoicedAmount	= each.POAndLineAOCRel.TotalAddOnChargeAmount
								else
								if (!each.AddOnCharge.AddOnChargeType.Allowance 
								and each.TotalDistributionAmount > each.POAndLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount)
									invoked.MiscellaneousAddOnChargeInvoicedAmount	-= each.POAndLineAOCRel.TotalAddOnChargeAmount
								else
									invoked.MiscellaneousAddOnChargeInvoicedAmount	-= each.TotalDistributionAmount

						else

							if  (each.POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOM entered
							and  each.POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOM != each.POAndLineAOCRel.PurchaseOrderLine.PurchaseOrderLine.EnteredBuyUOM)

								initialize UOMCalculation

								UOMCalculation.InputQuantity				= each.MatchedQuantity
								UOMCalculation.InputUOMConversion			= each.POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOMMultiplier
								UOMCalculation.InputToUOMConversion			= each.POAndLineAOCRel.PurchaseOrderLine.EnteredBuyUOMMultiplier
								UOMCalculation.Method					    = UOMCalculation.Method.ConvertToAlternate

								invoke UpdateFromMatch each.POAndLineAOCRel
									invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
									invoked.MatchedQuantity					-= UOMCalculation.OutputQuantity
									invoked.ReceivedQuantityToMatch			= each.PurchaseOrderLine.ReceivedQuantity

							else
								invoke UpdateFromMatch each.POAndLineAOCRel
									invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
									invoked.MatchedQuantity					-= each.MatchedQuantity
									invoked.ReceivedQuantityToMatch			= each.PurchaseOrderLine.ReceivedQuantity




					LocalUnitCostDifference 				= each.MatchUnitCost - each.POAndLineAOCRel.EnteredUnitCost
					if (!InvoiceType.CreditMemo
					or  Suffix not entered)

						if (ReceiptLinkMatchIDRel exists)  


							if  (MatchLevel.DetailMatch
							and  each.ItemType.Inventoried
							and  each.PurchaseOrderLine.ItemLocationRel.InventoryTracked
							and  MatchProcessType.AOCOnly)


								for each each.PurchaseOrderReceiptLineSet4Rel
									LocalReceipt = each.PurchaseOrderReceipt
									LocalReceiptLine = each.PurchaseOrderReceiptLine



									WorkCost = each.first InventoryTransactionLineRel.InventoryCostHistoryForReceivingAdjustmentRel.last CostAdjustmentInventoryTransactionLineRel.UnitCost * -1
									WorkQuantity = each.first InventoryTransactionLineRel.InventoryCostHistoryForReceivingAdjustmentRel.last CostAdjustmentInventoryTransactionLineRel.Quantity


									if  (WorkCost entered
									or   WorkQuantity entered)
										invoke UpdateForCostAdjustment each.ItemLocationRel
											invoked.PrmCostDifference			= WorkCost
											invoked.PrmQuantity					= WorkQuantity

											invoked.PrmDocumentNumber			= LocalReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
											invoked.PrmLineNumber				= LocalReceiptLine
											invoked.PrmAddOnChargeDifference	= true
											if (ProcessLevel.CostVarianceAccount entered)
												invoked.PrmOffsetAccount		= ProcessLevel.CostVarianceAccount
											else
												invoked.PrmOffsetAccount		= MatchCompanyRel.CostVarianceAccount

							for each each.PurchaseOrderReceiptInvoiceLinkSet4Rel		


								LocalVendorBuyMatchedQuantity = each.MatchedQuantity

								if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine not entered)	
									NewMiscellaneousAddOnChargeInvoicedAmount = each.MatchUnitCost


									invoke UpdateFromMatch each.PurchaseOrderReceiptLineAOCRel
										if (NewMiscellaneousAddOnChargeInvoicedAmount > each.PurchaseOrderReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount)
											invoked.MiscellaneousAddOnChargeInvoicedAmount	-= each.POAndLineAOCRel.TotalAddOnChargeAmount
										else
											invoked.MiscellaneousAddOnChargeInvoicedAmount -= NewMiscellaneousAddOnChargeInvoicedAmount

										initialize invoked.MatchedQuantity
										initialize invoked.ReceivedQuantityToMatch

										initialize invoked.MatchObjectID
										initialize invoked.MatchSequence
										invoked.Status					= 1
										invoked.Closed					= "N"
								else

									LocalVendorPriceMatchedQuantity = LocalVendorBuyMatchedQuantity
									if  (each.PurchaseOrderLine.VendorPriceUOMMultiplier entered
									and  each.PurchaseOrderLine.EnteredBuyUOMMultiplier entered
									and  each.PurchaseOrderLine.VendorPriceUOMMultiplier != each.PurchaseOrderLine.EnteredBuyUOMMultiplier)
										LocalVendorPriceMatchedQuantity = (LocalVendorBuyMatchedQuantity * (each.PurchaseOrderLine.EnteredBuyUOMMultiplier / each.PurchaseOrderLine.VendorPriceUOMMultiplier))

									invoke UpdateFromMatch each.PurchaseOrderReceiptLineAOCRel		
										initialize invoked.MatchObjectID
										initialize invoked.MatchSequence
										invoked.MatchedQuantity			-= LocalVendorBuyMatchedQuantity
										invoked.ReceivedQuantityToMatch	+= LocalVendorBuyMatchedQuantity
										invoked.ReceivedAmountToMatch	+= each.PurchaseOrderReceiptLineAOCRel.OriginalUnitCost * LocalVendorPriceMatchedQuantity
										invoked.OpenToMatchQuantity		+= LocalVendorBuyMatchedQuantity
										invoked.Status					= 1
										invoked.Closed					= "N"

								display "777;AocCostAdjustments"
								LocalPurchaseOrder						= each.PurchaseOrder
								LocalPurchaseOrderLine					= each.PurchaseOrderLine
								LocalReceipt 							= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
								LocalReceiptLine 						= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine
								initialize LocalInventoryTransaction 
								LocalInventoryTransaction   			= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
								LocalShipToLocation 					= each.PurchaseOrderLine.ShipToLocation 
								LocalItem 								= each.Item 
								LocalLineNumber 						= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine 





								for each LocalReceiptLineCostAdjustmentsRel



									if  (each.OriginatingTransactionDocument = LocalInventoryTransaction
									and  each.UnitCost = LocalUnitCostDifference)
										WorkCost = each.UnitCost * -1
										WorkQuantity = each.Quantity

										if  (WorkCost entered
										or   WorkQuantity entered)

											invoke UpdateForCostAdjustment each.ItemLocation
												invoked.PrmCostDifference			= WorkCost
												invoked.PrmQuantity					= WorkQuantity
												invoked.PrmDocumentNumber		= LocalInventoryTransaction 
												invoked.PrmLineNumber			= LocalLineNumber 
												if (LocalInvoiceAddOnChargeForPOLineRel exists)
													invoked.PrmAddOnChargeDifference	= true
												if (ProcessLevel.CostVarianceAccount entered)
													invoked.PrmOffsetAccount			= ProcessLevel.CostVarianceAccount
												else
													invoked.PrmOffsetAccount			= MatchCompanyRel.CostVarianceAccount

										end for each 

								if (MatchProcessType.AOCOnly
								and !IsChargeback
								and !each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt.Status.Released)
									invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
										invoked.Status = 1

								invoke Delete each
						else
							for each each.ReceiptLineAOCByMatchObjectIdRel		
								LocalVendorBuyMatchedQuantity		= each.MatchedQuantity


								if (each.PurchaseOrderReceiptLine not entered)	
									NewMiscellaneousAddOnChargeInvoicedAmount	= each.MiscellaneousAddOnChargeInvoicedAmount

									invoke UpdateFromMatch each
										if (NewMiscellaneousAddOnChargeInvoicedAmount > each.MiscellaneousAddOnChargeInvoicedAmount)
											initialize invoked.MiscellaneousAddOnChargeInvoicedAmount
										else
											invoked.MiscellaneousAddOnChargeInvoicedAmount	-= NewMiscellaneousAddOnChargeInvoicedAmount

										initialize invoked.MatchedQuantity
										initialize invoked.ReceivedQuantityToMatch
								else
									LocalVendorPriceMatchedQuantity			= LocalVendorBuyMatchedQuantity

									invoke UpdateFromMatch each		
										initialize invoked.MatchObjectID
										initialize invoked.MatchSequence
										invoked.MatchedQuantity 			-= LocalVendorBuyMatchedQuantity
										invoked.ReceivedQuantityToMatch 	+= LocalVendorBuyMatchedQuantity
										invoked.ReceivedAmountToMatch 		+= each.OriginalUnitCost * LocalVendorPriceMatchedQuantity
										invoked.OpenToMatchQuantity			= each.ReceivedQuantityToMatch + LocalVendorBuyMatchedQuantity
										invoked.Status						= 1
										invoked.Closed						= "N"

								if (MatchProcessType.AOCOnly
								and !IsChargeback
								and !each.PurchaseOrderReceipt.Status.Released)
									invoke UpdateFromMatch each.PurchaseOrderReceipt
										invoked.Status = 1

					if (each.RecordSource.CreatedWithinMatch
					or  each.RecordSource.GeneratedByAocSpread)
						invoke DeleteNoInvoiceUpdate each
					else
					if (each.RecordSource.Invoice
					or  each.RecordSource.LineMatchMa43)
						invoke FastUpdate each
							initialize invoked.MatchObjectID
							initialize invoked.MatchSequence
							initialize invoked.PurchaseOrderReceipt
							initialize invoked.PurchaseOrderReceiptLine
							if  (UnmatchFrom.MA70)
								initialize invoked.Status

		CancelChargeback is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				include CancelChargeback

		CreateWithBypassRules is a Create Action
			default label is untranslatable
			restricted
			bypass field rules

		CreateFromBatchNoParms is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				initialize InvoiceAmount.ExchangeDate
				initialize InvoiceAmount.FunctionalAmount
				initialize InvoiceAmount.AlternateAmount
				initialize InvoiceAmount.AlternateAmount2
				initialize InvoiceAmount.AlternateAmount3
				initialize InvoiceAmount.ToFunctionalAmount
				initialize InvoiceAmount.ToAlternateAmount
				initialize InvoiceAmount.ToAlternateAmount2
				initialize InvoiceAmount.ToAlternateAmount3
				initialize InvoiceAmount.ProjectAmount
				initialize InvoiceAmount.ReportAmount1
				initialize InvoiceAmount.ReportAmount2
				initialize InvoiceAmount.ReportAmount3
				initialize InvoiceAmount.ReportAmount4
				initialize InvoiceAmount.ReportAmount5
				initialize RevaluedBaseAmount
				initialize TotalPaymentAmount
				initialize AmountPaid
				initialize TotalDistributionAmount
				initialize TransientPaymentNumber
				initialize TransientPaymentDate
				initialize TransientPaymentAmount
				invoke CreateBatchInvoice this instance

		CreateFromBatch is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmPurchaseOrder is like PurchaseOrder
				PrmInvoiceCurrency   is a Currency
			Action Rules
				CreateFromBatchSwitch = true
				invoke CreateBatchInvoice this instance
					invoked.FirstPurchaseOrder 		= PrmPurchaseOrder
					invoked.TransientFromCurrency 	= PrmInvoiceCurrency
				if (APClerk not entered)
					include AutoAssignAPClerk

		CreateBatchInvoice is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				ActionType = ActionType.CreateType
				include CreateAndUpdateRules
			Exit Rules
				include DoInvoiceCreateSumoLogging	

		CreateBatchImportInvoice is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmPurchaseOrder	is like PurchaseOrder
				PrmInvoiceCurrency	is a Currency
			Action Rules
				CreateFromBatchSwitch = true
				invoke CreateImportInvoice this instance
					invoked.FirstPurchaseOrder		= PrmPurchaseOrder
					invoked.TransientFromCurrency	= PrmInvoiceCurrency

		CreateImportInvoice is a Create Action
			default label is untranslatable
			restricted
			completion message is "<ActionCompleteMessage>"
			Entrance Rules
				include InvoiceInterfaceEdits
				if (CreateOneTimeVendor)
					invoke CreateOneTimeVendor Vendor
						assign result to OneTimeVendor
						invoked.VendorGroup				= Company.VendorGroup
						invoked.VendorName				= TransientVendorName
						invoked.VendorSearchName		= TransientVendorSearchName
						invoked.VendorAddress			= TransientVendorAddress
						invoked.LegalName				= TransientLegalName
						invoked.TaxID					= TransientTaxID
						invoked.IncomeCode				= TransientIncomeCode
						invoked.VATRegistrationCountry	= TransientVATRegistrationCountry
						invoked.VATRegistrationNumber	= TransientVATRegistrationNumber
						invoked.Carrier					= TransientCarrier

					Vendor = OneTimeVendor.Vendor

			Action Rules
				ActionType = ActionType.CreateType
				InterfaceCreate = true

				if (FirstPurchaseOrder entered)
					InvoiceCurrency = FirstPurchaseOrder.PurchaseOrder.Currency
					round InvoiceAmount.CurrencyAmount to nearest DerivedRoundTo  

				if  (TermsCode not entered
				and  AllowableAmountForDiscount not entered
				and (DiscountAmount.CurrencyAmount entered
				or   DiscountPercent entered
				or   DiscountAmount1 entered
				or   DiscountPercent1 entered))
					AllowableAmountForDiscount = InvoiceAmount.CurrencyAmount  

				include CreateAndUpdateRules


			Exit Rules
				InterfaceCreate = true
				include CreateExitRules		
				include CreateAndUpdateExitRules		



				invoke CreateCXMLInvoiceStatus
					resume on error

		BuildTextIndexSetAction is a Set Action
			default label is "BuildTextIndex"		
			restricted
			Parameters
				PrmCompany					is a Company
					default label is "Company"
				InterfaceRun				is like PayablesInvoiceInterfaceResult

			Parameter Rules
				PrmCompany
					required
				InterfaceRun
					required

			Instance Selection
				where (PrmCompany = Company
				and    InterfaceRun = OriginatingInterfaceRun)

			Action Rules
				Instance Rules
					include BuildTextIndexes

		UpdateTextIndexSetAction is a Set Action 		
			default label is "UpdateTextIndex"			
			restricted

			Parameters
				UpdateAllNonHistorical		is Boolean
				SelectionStatus 			is Numeric size 1
					classic name is REC-STATUS
					States
						Unreleased			value is 0
						Released			value is 1
						Approved			value is 2
						PendingApproval		value is 3
						Rejected      		value is 4
						Amended				value is 5
						Cancelled			value is 6		//	TODO - Change to one 'L' or change the 1 "l's" to two "L's"
						Paid				value is 8
						Historical			value is 9

			Parameter Rules


			Instance Selection
				where ((UpdateAllNonHistorical
				and     Status < 9)
				or    (!UpdateAllNonHistorical
				and     Status = SelectionStatus))

			Action Rules
				Instance Rules
					include BuildTextIndexes





		SuperDeleteInvoiceRange is a Set Action
			valid when (AllowSuperDelete)
			default label is untranslatable
			Parameters
				PrmCompany					is like Company
				FromReceiptOfInvoiceDate	is Date
				ToReceiptOfInvoiceDate      is Date
			Parameter Rules
				PrmCompany
					required
				FromReceiptOfInvoiceDate
					required
				ToReceiptOfInvoiceDate
					required
					constraint (FromReceiptOfInvoiceDate <= ToReceiptOfInvoiceDate)
						"FromDateCannotBeGreaterThanToDate"

			Instance Selection
				where (Company = PrmCompany
				and    ReceiptOfInvoiceDate entered
				and    ReceiptOfInvoiceDate >= FromReceiptOfInvoiceDate
				and    ReceiptOfInvoiceDate <= ToReceiptOfInvoiceDate)


			Action Rules
				Instance Rules
					invoke SuperDeleteOfThisInvoice

		SuperDeleteOfThisInvoice is an Instance Action
			valid when (AllowSuperDelete)
			default label is untranslatable
			Action Rules
				invoke Purge MatchReconQueueRel
				invoke PurgeDetail MatchWorkRel
				invoke Purge MatchWorkRel
				for each PayablesInvoiceDistribution set
					if (each.AssetFlag entered)
						invoke Delete each.AssetDetailRel
				invoke Delete PayablesInvoiceDistribution set 
				invoke Delete PayablesOnHoldPaymentRel
				invoke Delete PayablesInvoicePaymentRel	
				for each MatchInvoiceMessageSet5Rel
					include DeletePurchaseOrderReceiptInvoiceLink	
					invoke Delete each								
				invoke DeleteNoInvoiceUpdate PayablesInvoiceDetailRel	
				invoke DeleteNoInvoiceUpdate PayablesInvoiceAddOnChargeRel	
				invoke DeleteNoInvoiceUpdate PayablesInvoiceSpreadAddOnCharge set
				invoke Delete MatchPurchaseOrderInvoiceHistoryRel		
				invoke DeleteInvoice


		SyncDueDateFromPayments is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				DueDate	= first PayablesInvoicePaymentRel.DueDate

		SyncAllowableAmountFromPayments is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (DiscountCode.DiscountPoint.CostOfGoodsAndAddOnCharge)
					AllowableAmountForDiscount 	= sum MultiplePayablesInvoicePaymentRel.TransientAllowableAmount
				else
					AllowableAmountForDiscount 	= sum MultiplePayablesInvoicePaymentRel.TransientAllowableAmount - AddOnChargeAmount
					if ((InvoiceType.CreditMemo
					and  AllowableAmountForDiscount < InvoiceAmount.CurrencyAmount)
					or  (!InvoiceType.CreditMemo
					and  AllowableAmountForDiscount > InvoiceAmount.CurrencyAmount))	
						AllowableAmountForDiscount = InvoiceAmount.CurrencyAmount
				DiscountDate					= first MultiplePayablesInvoicePaymentRel.DiscountDate
				DiscountDate1					= first MultiplePayablesInvoicePaymentRel.DiscountDate
				DiscountPercent					= first MultiplePayablesInvoicePaymentRel.DiscountPercent
				DiscountPercent1				= first MultiplePayablesInvoicePaymentRel.DiscountPercent
				DiscountAmount1					= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.CurrencyAmount
				DiscountAmount.CurrencyAmount							= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.CurrencyAmount
				DiscountAmount.FunctionalAmount.EnteredCurrencyAmount	= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
				DiscountAmount.AlternateAmount.EnteredCurrencyAmount	= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.AlternateAmount.EnteredCurrencyAmount
				DiscountAmount.AlternateAmount2.EnteredCurrencyAmount	= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.AlternateAmount2.EnteredCurrencyAmount
				DiscountAmount.AlternateAmount3.EnteredCurrencyAmount	= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.AlternateAmount3.EnteredCurrencyAmount
				DiscountAmount.ReportAmount1.EnteredCurrencyAmount		= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.ReportAmount1.EnteredCurrencyAmount
				DiscountAmount.ReportAmount2.EnteredCurrencyAmount		= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.ReportAmount2.EnteredCurrencyAmount
				DiscountAmount.ReportAmount3.EnteredCurrencyAmount		= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.ReportAmount3.EnteredCurrencyAmount
				DiscountAmount.ReportAmount4.EnteredCurrencyAmount		= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.ReportAmount4.EnteredCurrencyAmount
				DiscountAmount.ReportAmount5.EnteredCurrencyAmount		= sum MultiplePayablesInvoicePaymentRel.DiscountAmount.ReportAmount5.EnteredCurrencyAmount

				if (DiscountDate2 entered
				or  DiscountDate3 entered)
					DiscountAmount2 = AllowableAmountForDiscount * DiscountPercent2
					DiscountAmount3 = AllowableAmountForDiscount * DiscountPercent3
				if (first PaymentsHaveBeenAppliedRel.TransactionNumber entered)
					UpdateCashLedgerPayablesPayment = true
					include CashLedgerPayablesPaymentProcessing


		RemoveDiscount is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (!TransientChangingVendor)
					constraint (!IsSplitInvoice)
						"SplitInvoice;CannotChangeDiscountOnInvoiceHeader;UsePaySchedule"

				initialize AllowableAmountForDiscount
				initialize DiscountDate
				initialize DiscountPercent
				initialize DiscountAmount.CurrencyAmount
				initialize DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
				invoke Unreleased.UpdateDiscountFromHeader first PayablesInvoicePaymentRel
					initialize invoked.TransientAllowableAmount
					initialize invoked.DiscountDate
					initialize invoked.DiscountPercent
					initialize invoked.DiscountAmount.CurrencyAmount
					initialize invoked.DiscountAmount.KeepRateOnly
					initialize invoked.DiscountAmount.ExchangeDate



		ChangeDiscount is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmAllowableAmount		is an InternalAmount	
					precision is InvoiceCurrency.NumberOfDecimals
						round to precision
				PrmDiscountDate			is Date
				PrmDiscountRate			is a DiscountPercent
				PrmDiscountAmount		is a CurrencyAmount

				PrmDiscountDate2		is Date
				PrmDiscountRate2		is a DiscountPercent
				PrmDiscountAmount2		is a CurrencyAmount

				PrmDiscountDate3		is Date
				PrmDiscountRate3		is a DiscountPercent
				PrmDiscountAmount3		is a CurrencyAmount

				PrmRemoveDiscount		is Boolean		

			Parameter Rules
				PrmAllowableAmount									

					if (!PrmRemoveDiscount)		
						required
							"AllowableAmountIsRequired"
						if (MatchProcessType.Expense)		
							if (!InvoiceType.CreditMemo
							and !InvoiceType.PrepaymentCredit)
								constraint (PrmAllowableAmount <= InvoiceAmount.CurrencyAmount)
									"AllowableAmount<PrmAllowableAmount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
							else
								constraint (PrmAllowableAmount >= InvoiceAmount.CurrencyAmount)
									"AllowableAmount<PrmAllowableAmount>CannotBeGreaterThanInvoiceAmount<InvoiceAmount.CurrencyAmount>"	
						else
							if (!InvoiceType.CreditMemo
							and !InvoiceType.PrepaymentCredit)
								constraint (PrmAllowableAmount <= CalculatedAllowableAmount)		
									"AllowableAmount<PrmAllowableAmount>CannotBeGreaterThanCalculatedGoods<CalculatedAllowableAmount>"
							else
								constraint (PrmAllowableAmount >= CalculatedAllowableAmount)		
									"AllowableAmount<PrmAllowableAmount>CannotBeGreaterThanCalculatedGoods<CalculatedAllowableAmount>"

				PrmDiscountDate
					initial value is DiscountDate
					if (PrmDiscountRate 	entered
					or  PrmDiscountAmount	entered)
						required
							"DiscountDate1IsRequired"
					constraint (PrmDiscountDate <= DueDate)
						"DiscountDate1CannotBeAfterDueDate"

				PrmDiscountDate2
					initial value is DiscountDate2
					constraint (PrmDiscountDate2 <= DueDate)
						"DiscountDate2CannotBeAfterDueDate"

				PrmDiscountDate3
					initial value is DiscountDate3
					constraint (PrmDiscountDate3 <= DueDate)
						"DiscountDate3CannotBeAfterDueDate"

				PrmDiscountRate
					initial value is DiscountPercent
					constraint (PrmDiscountAmount not entered)
						"CannotEnterBothDiscountRateAndDiscountAmount"




				PrmDiscountRate2
					initial value is DiscountPercent2
					constraint (PrmDiscountAmount2 not entered)
						"CannotEnterBothDiscountRate2AndDiscountAmount2"

				PrmDiscountRate3
					initial value is DiscountPercent3
					constraint (PrmDiscountAmount3 not entered)
						"CannotEnterBothDiscountRate3AndDiscountAmount2"

				PrmDiscountAmount
					constraint (PrmDiscountAmount <= PrmAllowableAmount)	
						"DiscountAmountCannotExceedAllowableAmount"

				PrmDiscountAmount2
					constraint (PrmDiscountAmount2 <= PrmAllowableAmount)	
						"DiscountAmount2CannotExceedAllowableAmount"

				PrmDiscountAmount3
					constraint (PrmDiscountAmount3 <= PrmAllowableAmount)	
						"DiscountAmount3CannotExceedAllowableAmount"



			Action Rules
				constraint (!IsSplitInvoice)
					"SplitInvoice;CannotChangeDiscountOnInvoiceHeader;UsePaySchedule"

				if (PrmRemoveDiscount)			
					invoke RemoveDiscount		
				else
					AllowableAmountForDiscount 			= PrmAllowableAmount	
					LocAllowAmt							= PrmAllowableAmount

					DiscountDate						= PrmDiscountDate
					if (PrmDiscountRate entered)
						LocDiscAmt						= LocAllowAmt * PrmDiscountRate		
						DiscountAmount.CurrencyAmount	= PrmDiscountRate * PrmAllowableAmount	
						DiscountPercent					= PrmDiscountRate
						DiscountAmount.CurrencyAmount	= LocDiscAmt
					else
						DiscountPercent			= PrmDiscountAmount / LocAllowAmt
						DiscountAmount.CurrencyAmount	= PrmDiscountAmount
					DiscountAmount.KeepRateOnly			= true
					DiscountAmount.ExchangeDate			= InvoiceAmount.ExchangeDate 

					DiscountDate1						= DiscountDate
					DiscountAmount1						= DiscountAmount.CurrencyAmount
					DiscountPercent1					= DiscountPercent

					DiscountDate2						= PrmDiscountDate2
					if (PrmDiscountRate2 entered)
						DiscountAmount2					= PrmDiscountRate2 * PrmAllowableAmount		
						DiscountPercent2				= PrmDiscountRate2
					else
						DiscountPercent2				= PrmDiscountAmount2 / PrmAllowableAmount	
						DiscountAmount2					= PrmDiscountAmount2

					DiscountDate3						= PrmDiscountDate3
					if (PrmDiscountRate3 entered)
						DiscountAmount3					= PrmDiscountRate3 * PrmAllowableAmount	
						DiscountPercent3				= PrmDiscountRate3
					else
						DiscountPercent3				= PrmDiscountAmount3 / PrmAllowableAmount	
						DiscountAmount3					= PrmDiscountAmount3


					initialize DiscountAmount.FunctionalAmount.EnteredCurrencyAmount
					invoke Unreleased.UpdateDiscountFromHeader first PayablesInvoicePaymentRel
						invoked.TransientAllowableAmount		= PrmAllowableAmount	
						invoked.DiscountDate					= DiscountDate
						invoked.DiscountPercent					= DiscountPercent
						invoked.DiscountAmount.CurrencyAmount	= DiscountAmount.CurrencyAmount
						invoked.DiscountAmount.KeepRateOnly		= true
						invoked.DiscountAmount.ExchangeDate		= InvoiceAmount.ExchangeDate 




					if (first PaymentsHaveBeenAppliedRel.TransactionNumber entered)
						UpdateCashLedgerPayablesPayment = true
					invoke Unreleased.Update

		UpdateTaxValues is an Instance Action
			default label is untranslatable
			restricted		
			Parameters
				PrmTotalTaxAmtIncrement		is a CurrencyAmount		
				PrmTotalTaxableAmtIncrement	is a CurrencyAmount		
				PrmTaxAmtIncrement			is a CurrencyAmount		
				PrmTaxableAmtIncrement		is a CurrencyAmount		
			Action Rules











				TotalTaxAmount		+= PrmTotalTaxAmtIncrement
				TotalTaxableAmount	+= PrmTotalTaxableAmtIncrement
				TaxAmount			+= PrmTaxAmtIncrement
				TaxableAmount		+= PrmTaxableAmtIncrement

				TotalTaxAmount 		= RoundedTotalTaxAmount			
				TotalTaxableAmount 	= RoundedTotalTaxableAmount		
				TaxAmount 			= RoundedTaxAmount				
				TaxableAmount 		= RoundedTaxableAmount			



				invoke Update PayablesInvoiceTaxRel
					invoked.TaxDetails.ReturnedTaxAmount = TotalTaxAmount	









		ReevaluateDistributionTotal is an Instance Action
			default label is untranslatable
			restricted



			Action Rules
				initialize TotalTaxAmount
				initialize TotalDistributionAmount

				invoke RecalculateTotalDistributionAmount		

		RefreshTotalTax is an Instance Action
			default label is "RecalculateTotalTax"
			valid when (RefreshTotalTaxValid)	
			Action Rules

				if (MatchProcessType.Expense)
					if (TaxEntityUsesThirdPartyTax)		
						TotalTaxAmount		= sum NonVATReversalTaxDistibutionsRel.DistributionAmount.CurrencyAmount	



					else
						initialize TotalTaxAmount				
						invoke Update PayablesInvoiceTaxRel		
							invoked.TotalInvoicedTaxAmount	= sum NonVATReversalTaxDistibutionsRel.DistributionAmount.CurrencyAmount
							invoked.TotalAccruedTaxAmount	= sum NonVATReversalAccruedTaxDistibutionsRel.DistributionAmount.CurrencyAmount
						TotalTaxAmount	= DerivedTotalTaxAmountField	


		RecalculateTotalDistributionAmount is an Instance Action		
			restricted
			Action Rules
				initialize TotalDistributionAmount
				for each PayablesInvoiceDistributionDistributionTypeDistributionsRel
					if  (!each.IsAccruedTaxDistribution)
						TotalDistributionAmount.FunctionalTotal 	+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						TotalDistributionAmount.TransactionTotal 	+= each.DistributionAmount.CurrencyAmount
						TotalDistributionAmount.AlternateTotal 		+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						TotalDistributionAmount.AlternateTotal2 	+= each.DistributionAmount.AlternateAmount2
						TotalDistributionAmount.AlternateTotal3 	+= each.DistributionAmount.AlternateAmount3
						TotalDistributionAmount.ToFunctionalTotal 	+= each.DistributionAmount.ToFunctionalAmount
						TotalDistributionAmount.ProjectTotal 		+= each.DistributionAmount.ProjectAmount
						TotalDistributionAmount.ReportTotal1 		+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						TotalDistributionAmount.ReportTotal2		+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						TotalDistributionAmount.ReportTotal3 		+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						TotalDistributionAmount.ReportTotal4 		+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						TotalDistributionAmount.ReportTotal5 		+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount
				include AdjustDistributionCurrencyAmounts
				include UpdateErrorRecords



		RecalculateTotalPaymentAmount is an Instance Action		
			restricted
			Action Rules
				initialize TotalPaymentAmount
				for each MultiplePayablesInvoicePaymentRel
					TotalPaymentAmount.FunctionalTotal 		+= each.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount
					TotalPaymentAmount.TransactionTotal 	+= each.PaymentAmount.CurrencyAmount
					TotalPaymentAmount.AlternateTotal 		+= each.PaymentAmount.AlternateAmount.EnteredCurrencyAmount
					TotalPaymentAmount.AlternateTotal2 		+= each.PaymentAmount.AlternateAmount2
					TotalPaymentAmount.AlternateTotal3 		+= each.PaymentAmount.AlternateAmount3
					TotalPaymentAmount.ToFunctionalTotal 	+= each.PaymentAmount.ToFunctionalAmount
					TotalPaymentAmount.ProjectTotal 		+= each.PaymentAmount.ProjectAmount
					TotalPaymentAmount.ReportTotal1 		+= each.PaymentAmount.ReportAmount1.EnteredCurrencyAmount
					TotalPaymentAmount.ReportTotal2 		+= each.PaymentAmount.ReportAmount2.EnteredCurrencyAmount
					TotalPaymentAmount.ReportTotal3 		+= each.PaymentAmount.ReportAmount3.EnteredCurrencyAmount
					TotalPaymentAmount.ReportTotal4 		+= each.PaymentAmount.ReportAmount4.EnteredCurrencyAmount
					TotalPaymentAmount.ReportTotal5 		+= each.PaymentAmount.ReportAmount5.EnteredCurrencyAmount
				include AdjustPaymentCurrencyAmounts
				include UpdateErrorRecords


		ProcessOneSourceForExpenseInvoice is a Set Action		
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmVendor			is a Vendor
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoApprove		is Boolean
				PrmReleaseOrSubmit	is Numeric 1
					States
						Release		value is 1
						Submit		value is 2
						RelAmended 	value is 3		

			Parameter Rules
				PrmCompany
					required
				PrmVendor
					required
				PrmPayablesInvoice
					required

			Local Fields
				LocalHasAssets is Boolean



			Sort Order is ByVendor2

			Instance Selection
				where (Company			= PrmCompany
				and    Vendor			= PrmVendor
				and    PayablesInvoice	= PrmPayablesInvoice)

			Action Rules
				Set Rules
					Entrance Rules
						initialize TransientExcludeAllLinesFromTaxCall			

						if (PrmCompany.BypassThirdPartyTaxCallWhenICNExclude)	
							TransientExcludeAllLinesFromTaxCall = true
							for each TotalTran1TaxableDistributionRel
								if (!each.ICNCode.ExcludeFromTaxEstimate)
									TransientExcludeAllLinesFromTaxCall = false
									end for each


						ProcessControl2	= "ProcessControl2"
						invoke ProcessOneSourceForExpense PayablesInvoiceDistribution in background group (ProcessControl2)
							invoked.PrmCompany			= PrmCompany
							invoked.PrmPayablesInvoice	= PrmPayablesInvoice
							invoked.PrmRunInForeground	= false
							invoked.PrmReleaseOrSubmit	= PrmReleaseOrSubmit
							invoked.PrmAutoApprove		= PrmAutoApprove
							invoked.PrmExcludeFromCall	= TransientExcludeAllLinesFromTaxCall	

















		InvokedCreateAccruedWithholdingDistributions	is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				include CreateAccruedWithholdingDistributions



		FinishSubmitForApproval is an Instance Action	

			default label is untranslatable
			restricted
			Parameters
				AutoApprovePrm		is Boolean
			Action Rules

				if (!ApprovalErrors)
					if (AutoApprovePrm)
						AutoApproved = true
						include CanInvoiceBeReleased	
						if (LocalReleaseInvoice)

							include PerformBudgetEditsForRelease

						else

							include PerformBudgetEditsForApproval

					else

						include PerformBudgetEditsForApproval

			Exit Rules
				invoke ClearBackgroundProcessing
				initialize TaxToleranceHoldProcess		

				include MassInvoiceReleaseEdits		












 		ContinueReleaseAfterTaxProcessing is a Set Action	
 			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice

			Instance Selection
				where (Company			= PrmCompany
				and    PayablesInvoice 	= PrmPayablesInvoice)

			Action Rules
				Set Rules
					Entrance Rules







						include CanInvoiceBeReleased		

						if (LocalReleaseInvoice)			
							AutoApproved = true		
							include PerformBudgetEditsForRelease
							ActionCompleteMessage = ReleaseCompleteMessage

						else
							ActionCompleteMessage = ReleaseNotCompleteMessage



				Instance Rules

					invoke ClearBackgroundProcessing
					initialize TaxToleranceHoldProcess		


					include MassInvoiceReleaseEdits			




		AddToVendorBalance is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				LocalAddToVendorBalance = true
				include UpdateVendorBalance

		SubtractFromVendorBalances is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				LocalAddToVendorBalance = false
				include UpdateVendorBalance

		AttachProofOfDelivery is an Instance Action
			default label is "Attach Proof of Delivery"
			valid when (CanEnterProofOfDelivery)
			Parameters
				CreateBySupplierProofOfDelivery is an Attachment

			Parameter Rules
				CreateBySupplierProofOfDelivery
					required

			Action Rules
				invoke Create PayablesInvoiceDocument
					invoked.Company			= Company
					invoked.PayablesInvoice	= PayablesInvoice
					invoked.Attachment		= CreateBySupplierProofOfDelivery
					invoked.DocumentID		= Invoice
					invoked.DocumentType	= 4 

		CreateNextRecurringInvoice is an Instance Action
			default label is untranslatable
			restricted		
			Parameters
				PrmInvoiceDate		is Date
				PrmDueDate			is Date
				PrmDiscountDate		is Date
				PrmDistributionDate	is Date

			Local Fields
				LocalPayablesInvoiceView				is a PayablesInvoice view
				LocalPayablesInvoiceDistributionView	is a PayablesInvoiceDistribution view	

			Action Rules
				if (NextRecurringInvoiceRel !exist)
					invoke CreateFromBatchNoParms
						assign result to LocalPayablesInvoiceView
						fill in fields from this instance
							except invoked.PayablesInvoice
							except invoked.VoucherNumber
							except invoked.Status				

							except invoked.TotalTaxAmount
							except invoked.TotalTaxableAmount

							except invoked.TaxCode				
							except invoked.TaxAmount
							except invoked.TaxableAmount
							except invoked.DiscountDate1
							except invoked.DiscountPercent1
							except invoked.DiscountAmount1
							except invoked.BaseDiscountAmount1
							except invoked.DiscountDate2
							except invoked.DiscountPercent2
							except invoked.DiscountAmount2
							except invoked.BaseDiscountAmount2
							except invoked.DiscountDate3
							except invoked.DiscountPercent3
							except invoked.DiscountAmount3
							except invoked.BaseDiscountAmount3
							except invoked.TermsCode 
							except invoked.DiscountDate					
							except invoked.AllowableAmountForDiscount	
							except invoked.SecondaryWithholding			
							except invoked.OriginatingInterfaceRun		
						invoked.Suffix 					= Suffix + 1
						invoked.InvoiceDate				= PrmInvoiceDate
						invoked.DueDate					= PrmDueDate
						invoked.DiscountDate			= PrmDiscountDate
						invoked.DistributionDate		= PrmDistributionDate
						invoked.CreateFromBatchSwitch	= true
						invoked.BypassActiveResourceEdit = true		

					invoke FastUpdate LocalPayablesInvoiceView.PayablesInvoice		
						invoked.TaxCode					= TaxCode					
						invoked.TaxAmount				= RoundedTaxAmount			
						invoked.TaxableAmount			= RoundedTaxableAmount		
						invoked.TotalTaxAmount			= RoundedTotalTaxAmount		
						invoked.TotalTaxableAmount		= RoundedTotalTaxableAmount	
						invoked.TermsCode				= TermsCode					
						invoked.SecondaryWithholding	= SecondaryWithholding		

					LocalRecurringPayablesInvoice		= LocalPayablesInvoiceView.PayablesInvoice	

					invoke Create LocalRecurringPayablesInvoice.PayablesInvoiceTaxRel				
						invoked.TaxCode						= this instance.PayablesInvoiceTaxRel.TaxCode
						invoked.ProductTaxCategory			= this instance.PayablesInvoiceTaxRel.ProductTaxCategory
						invoked.EnteredTaxAmount			= this instance.PayablesInvoiceTaxRel.EnteredTaxAmount
						invoked.EnteredTaxableAmount		= this instance.PayablesInvoiceTaxRel.EnteredTaxableAmount
						invoked.EnteredInvoiceAmount		= this instance.PayablesInvoiceTaxRel.EnteredInvoiceAmount
						invoked.EnteredTaxCategory			= this instance.PayablesInvoiceTaxRel.EnteredTaxCategory
						invoked.TaxSystemTaxAmount			= this instance.PayablesInvoiceTaxRel.TaxSystemTaxAmount
						invoked.TaxRate						= this instance.PayablesInvoiceTaxRel.TaxRate
						invoked.TaxMethod					= this instance.PayablesInvoiceTaxRel.TaxMethod
						invoked.LinkedToDistributions		= this instance.PayablesInvoiceTaxRel.LinkedToDistributions
						invoked.VATReverseCharge			= this instance.PayablesInvoiceTaxRel.VATReverseCharge
						invoked.ShortPaid					= this instance.PayablesInvoiceTaxRel.ShortPaid
						invoked.PayablesTaxTolerance		= this instance.PayablesInvoiceTaxRel.PayablesTaxTolerance
						invoked.TaxToleranceOverridden		= this instance.PayablesInvoiceTaxRel.TaxToleranceOverridden
						invoked.TaxResult					= this instance.PayablesInvoiceTaxRel.TaxResult
						invoked.TaxDetails					= this instance.PayablesInvoiceTaxRel.TaxDetails
						invoked.TaxSystemTaxableAmount		= this instance.PayablesInvoiceTaxRel.TaxSystemTaxableAmount		
						invoked.TotalInvoicedTaxableAmount	= this instance.PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount	
						invoked.TotalInvoicedTaxAmount		= this instance.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount		
						invoked.TotalAccruedTaxableAmount	= this instance.PayablesInvoiceTaxRel.TotalAccruedTaxableAmount		
						invoked.TotalAccruedTaxAmount		= this instance.PayablesInvoiceTaxRel.TotalAccruedTaxAmount			

					for each MultiplePayablesInvoicePaymentRel
						invoke CreateFromBatch PayablesInvoicePayment
							fill in fields from each
								except invoked.Status
								except invoked.CashRequirementsResult
								except invoked.OnHold					
								except invoked.OnHoldDate				
								except invoked.OffHoldDate				
								except invoked.LastCurrencyRevaluationDate		
								except invoked.RevaluedBaseAmount		
								except invoked.ReportableIncomeAmount	
							invoked.PayablesInvoice	= LocalPayablesInvoiceView.PayablesInvoice
							invoked.DueDate			= PrmDueDate
							invoked.DiscountDate	= PrmDiscountDate
							if (each.ReportableIncomeAmount entered		
							and each.ReportableIncomeAmount != each.DerivedCheckAmount)
								invoked.ReportableIncomeAmount = each.ReportableIncomeAmount		



					if (IsNotPrepayment)			
						for each PayablesInvoiceDistributionDistributionTypeDistributionsRel
							invoke CreateFromBatchNoParms PayablesInvoiceDistribution
								assign result to LocalPayablesInvoiceDistributionView
								fill in fields from each
									except invoked.Status
									except invoked.TransientReferenceToThisInstance
									except invoked.DistributionCode
									except invoked.TaxCode								
									except invoked.TaxIndicator							
									except invoked.TaxableAmount						
									except invoked.GltObjId
								invoked.PayablesInvoice	= LocalPayablesInvoiceView.PayablesInvoice
								invoked.BypassDefaultTaxIndicator = true	
								invoked.BypassProjectDateEdit     = true
								invoked.BypassActiveCodeBlockEdit = true	

							invoke FastUpdate LocalPayablesInvoiceDistributionView.PayablesInvoiceDistribution	
								invoked.TaxCode			= each.TaxCode											
								invoked.TaxIndicator	= each.TaxIndicator										
								invoked.TaxableAmount	= each.TaxableAmount									
								invoked.TaxType			= each.TaxType											

					for each PayablesInvoiceComment set
						invoke Create PayablesInvoiceComment
							fill in fields from each
							invoked.PayablesInvoice	= LocalPayablesInvoiceView.PayablesInvoice

					if (InvoiceHoldCode entered)											
						invoke PutInvoiceOnHold LocalPayablesInvoiceView.PayablesInvoice	
							invoked.HoldCode	= InvoiceHoldCode							

					invoke FastUpdate LocalPayablesInvoiceView.PayablesInvoice				
						invoked.TotalDistributionAmount		= TotalDistributionAmount		
				
					if (Company.GlobalWithholding)						
						for each PayablesInvoiceWithholdingRel
							invoke Create PayablesInvoiceWithholding
								invoked.Company							= Company
								invoked.PayablesInvoice					= LocalPayablesInvoiceView.PayablesInvoice
								invoked.IncomeWithholdingCode			= each.IncomeWithholdingCode
								invoked.WithholdingCategory				= each.WithholdingCategory
								invoked.ReportableAmount				= each.ReportableAmount
								invoked.WithholdingRate					= each.WithholdingRate

			Exit Rules
				invoke Unreleased.Release LocalPayablesInvoiceView.PayablesInvoice
					resume on error


		PerformTaxReversal is an Instance Action	
			default label is untranslatable
			restricted		


			Parameters
				PrmTranTaxAmount 		is an InternationalAmount
				PrmPostDate				is Date
				PrmJournalizeGroup		is like JournalizeGroup
				PrmDiscountLost			is Boolean
				PrmTranPmtAmount		is an InternationalAmount
			Local Fields
				LocalAppliedPercent		is a Percent				
				LocalFinalPrepayCredPmt	is Boolean					


			Action Rules



				if (InvoiceType.PrepaymentCredit		
				and PrmTranPmtAmount > InvoiceAmount.CurrencyAmount)
					LocalAppliedPercent = (PrmTranPmtAmount / InvoiceAmount.CurrencyAmount)
					if (PaymentsNotHistoricalRel exist
					and instance count of PaymentsNotHistoricalRel = 1)
						LocalFinalPrepayCredPmt = true
						initialize LocalAppliedPercent
				if (CompanySystemClosingControlRel.Control)			
                    if (PrmPostDate within CompanySystemClosingControlRel.ValidEntryDate)
                        LocalPostDate = PrmPostDate
                    else
                        LocalPostDate = CompanySystemClosingControlRel.ValidEntryDate.Begin
                else
                    LocalPostDate = PrmPostDate
				LocalJournalizeGroup		= PrmJournalizeGroup
				TransientBypassMemberEdit	= true		
				if (!InvoiceType.Prepayment
				and !InvoiceType.PrepaymentCredit)

					for each PayablesInvoiceDistributionByTaxPointRel

						LocalTaxCode = each.TaxCode		
						if (!each.VATReverse					
						and (TaxEntityRel.TaxInputDueAccount			= each.DistributionAccount		
						or   LocalEntityTaxCodeRel.TaxInputDueAccount	= each.DistributionAccount		
						or   !each.IsLandedTaxDistribution))	
							if ((TaxEntityRel.UseTaxCodeAccounts																					
							and  LocalEntityTaxCodeRel.TaxInputDueAccount.ToAccountingEntity	!= each.DistributionAccount.ToAccountingEntity)		
							or  (!TaxEntityRel.UseTaxCodeAccounts																					
							and  TaxEntityRel.TaxInputDueAccount.ToAccountingEntity    	   		!= each.DistributionAccount.ToAccountingEntity))	
								TransientIsInterCompany = true
								TransientInterCompanyEntity	= each.DistributionAccount.ToAccountingEntity											
							else																													
								initialize TransientIsInterCompany																					
								initialize TransientInterCompanyEntity																					


							invoke ProcessReversingTaxDistribution each	
								invoked.PrmTranPmtAmt		= PrmTranTaxAmount
								invoked.PrmPostDate			= LocalPostDate
								invoked.PrmJournalizeGroup	= PrmJournalizeGroup
								invoked.PrmDiscountLost 	= PrmDiscountLost
								invoked.PrmTranPmtAmount	= PrmTranPmtAmount
								invoked.PrmIsInterCompany 	= TransientIsInterCompany	
								invoked.PrmInterCompanyEntity	= TransientInterCompanyEntity	
								invoked.PrmBypassTaxCodeProcessing	= true		

						else	
							invoke 585BuildTxTaxTrans each		
								invoked.ApwsReverseFlag	= "N"
								invoked.ApwsCancelledFl = "N"
				else
					if (InvoiceType.Prepayment)
						LocalReversalAmount		= PrmTranTaxAmount

						if (LocalReversalAmount not entered)								
							LocalReversalAmount = PayablesInvoiceTaxRel.TaxSystemTaxAmount	

					else
						LocalReversalAmount		= ((PrmTranTaxAmount / InvoiceAmount.CurrencyAmount) * InvoiceAmount.CurrencyAmount)

						if (LocalReversalAmount not entered)																								
							LocalReversalAmount = ((PayablesInvoiceTaxRel.TaxSystemTaxAmount / InvoiceAmount.CurrencyAmount) * InvoiceAmount.CurrencyAmount)	

					CalculateTax.TaxEntity		= Company.AccountingEntity
					if (TaxCode.TaxType.TaxTableCode)								
						CalculateTax.Function		= "C"
						CalculateTax.System			= "AP"
						CalculateTax.TaxEntity 		= Company.AccountingEntity
						CalculateTax.InvoiceAmount	= InvoiceAmount.CurrencyAmount
						CalculateTax.TaxableAmount	= TaxableAmount
						CalculateTax.TaxDate		= LocalPostDate
						CalculateTax.TaxPointDate	= DerivedTaxPointDate	
						CalculateTax.PostalAddress	= ProcessLevel.PostalAddress
					else
						CalculateTax.Function		= "I"
						LocalTaxCode				= TaxCode
					CalculateTax.InvoiceCompany	= Company
					CalculateTax.TaxCode		= TaxCode
					CalculateTax.InvoiceDate	= InvoiceDate
					CalculateTax.PaymentDate	= LocalPostDate
					include LoadVertexGlobalInputFields
					include DisplayCalculateTaxInput
					LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
					include DisplayCalculateTaxOutput
					if (TaxCode.TaxType.TaxTableCode)								
						LocalCounter = 1
						while (CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxCode entered
						and	   LocalCounter <= 8)

							LocalTaxCode			= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxCode
							LocalTaxRate			= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxRate   
							LocalPostToAccount		= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxInputAccount
							LocalTaxableAmount		= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxableAmount
							LocalReversalAmount		= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxAmount
							if (LocalAppliedPercent entered)		
								LocalTaxableAmount		= (LocalTaxableAmount * LocalAppliedPercent)
								LocalReversalAmount		= (LocalReversalAmount * LocalAppliedPercent)
							if (LocalFinalPrepayCredPmt)		
								LocalTaxableAmount		= ((sum PrepaymentTaxTransactionRel.TransactionTaxableAmount + sum PrepaymentCreditTaxTransactionRel.TransactionTaxableAmount) * -1)
								LocalReversalAmount		= ((sum PrepaymentTaxTransactionRel.TransactionTaxAmount + sum PrepaymentCreditTaxTransactionRel.TransactionTaxAmount) * -1)

							include CreateTaxOffsetTransaction		



							invoke CreatePrepaymentTaxTransaction LocalPayablesInvoiceTaxDistribution.PayablesInvoiceDistribution
								invoked.PrmPostDate		= LocalPostDate
								if (InvoiceType.PrepaymentCredit)		
									invoked.PrmTranInvAmount	= PrmTranPmtAmount
									invoked.PrmPrepayCredit		= true
							LocalReversalAmount 	*= -1
							LocalTaxableAmount		*= -1
							LocalPostToAccount		= CalculateTax.TaxTable.TaxTableOutput[LocalCounter].TaxInputDueAccount


							include CreateTaxOffsetTransaction		

							include CreateTaxTransactionPrepayment	


							increment LocalCounter
					else

						LocalTaxRate			= CalculateTax.OutputTaxRate		
						LocalPostToAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
						LocalTaxableAmount		= TaxableAmount
						if (LocalTaxableAmount !entered)		
							LocalTaxableAmount = PayablesInvoiceTaxRel.TaxSystemTaxableAmount
						if (LocalAppliedPercent entered)		
							LocalTaxableAmount		= (LocalTaxableAmount * LocalAppliedPercent)
							LocalReversalAmount		= (LocalReversalAmount * LocalAppliedPercent)
						if (LocalFinalPrepayCredPmt)		
							LocalTaxableAmount		= ((sum PrepaymentTaxTransactionRel.TransactionTaxableAmount + sum PrepaymentCreditTaxTransactionRel.TransactionTaxableAmount) * -1)
							LocalReversalAmount		= ((sum PrepaymentTaxTransactionRel.TransactionTaxAmount + sum PrepaymentCreditTaxTransactionRel.TransactionTaxAmount) * -1)


						include CreateTaxOffsetTransaction		



						invoke CreatePrepaymentTaxTransaction LocalPayablesInvoiceTaxDistribution.PayablesInvoiceDistribution
							invoked.PrmPostDate		= LocalPostDate
							if (InvoiceType.PrepaymentCredit)		
								invoked.PrmTranInvAmount	= PrmTranPmtAmount
								invoked.PrmPrepayCredit		= true
						LocalReversalAmount 	*= -1
						LocalTaxableAmount		*= -1		
						LocalPostToAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount


						include CreateTaxOffsetTransaction		

						include CreateTaxTransactionPrepayment	





		FinalRelease is an Instance Action
			restricted	
			default label is untranslatable
			Entrance Rules
				LocalRunProgram = RunProgram.InvoiceRelease
				LocalPayGroup 	= PayGroup

	 			include VerifyProcessingMonitorRule

			Action Rules


				if  (InvoiceType.MatchPrepayment
				and  MatchPrepaymentMethod.EligibleForPrepay)
					include TaxedMatchPrepaymentReleaseRules

				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				ActionCompleteMessage = ReleaseCompleteMessage
				if (Status.Amended
				and GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting)
					include AmendedInvoiceFundReallocation 		
				

				if (InvoiceType.MatchPrepayment 				
				and IsNotMatched) 
					make transition to Released 
				else 
				if ((AmountPaid = InvoiceAmount.CurrencyAmount
				and InvoiceAmount.CurrencyAmount != 0)			
				or (Status.Amended								
				and !OpenPayablesInvoicePaymentRel exists))		
					make transition to Historical
					invoke TriggerSupplierInvoiceBOD
					if (UsesMatrixApproval)
						invoke Update APDistributionAggregationRel
							invoked.Status = 9	



				else
					make transition to Released



			Exit Rules
				if (PayablesInvoice.OriginatingInterfaceRun entered
				and OriginatingInterfaceRun.RunType.MatchInvoiceInterface)
					invoke Update PayablesInvoice.OriginatingInterfaceRun
					    if (IsCreditMemo)
							invoked.ReleasedCreditCount		+= 1
							invoked.ReleasedCreditAmount	+= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.UnreleasedCreditCount	-= 1
							invoked.UnreleasedCreditAmount	-= PayablesInvoice.InvoiceAmount.CurrencyAmount
						else
							invoked.ReleasedExpenseCount	+= 1
							invoked.ReleasedExpenseAmount 	+= PayablesInvoice.InvoiceAmount.CurrencyAmount
							invoked.UnreleasedExpenseCount	-= 1
							invoked.UnreleasedExpenseAmount	-= PayablesInvoice.InvoiceAmount.CurrencyAmount

				if (Company.GlobalWithholding)
					if (!Vendor.LineLevelWithholding)
						invoke UpdateReportableAmount PayablesInvoiceWithholdingRel
							invoked.PrmInvoiceAmount	= (InvoiceAmount.CurrencyAmount - sum TotalInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount)
							invoked.PrmTaxAmount		= sum TotalInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount

				include UpdateAndCloseVendorReturn
				include ReleaseExitRules
				invoke TriggerSupplierInvoiceBOD





				if (ShortPayCommentExists)		


					if (PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount entered)
						invoke UpdateTotalTaxValues PayablesInvoiceTaxRel
							invoked.PrmTotalAccruedTaxableAmount	= PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount
							invoked.PrmTotalInvoicedTaxableAmount	= PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount * -1








				include PerformDocumentManagementWebserviceCalls	

#ifdef module idm
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.IDMConfiguration.UpdatePayablesInvoiceAttributes)
					if (IsIDMConfigured)
						invoke UpdateIDMAttributes
#endif



		SetInvoiceToAmendedStatus is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				make transition to Amended


		UpdateJournalizeGroup is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup
			Action Rules
				invoke UpdateJournalizeGroup PayablesInvoiceDistributionRel
					invoked.PrmJournalizeGroup		= PrmJournalizeGroup



		DeleteDistributionsInError is an Instance Action
			valid when (CanDeleteDistributionsInError)
			Action Rules
				invoke Delete UnpostedDistributionsRel



		Purge is a Purge Action
			default label is untranslatable
			restricted
			bypass relational integrity rules
			Action Rules
				if (SupplierInvoiceAttachment.MimeType entered)
					SupplierInvoiceAttachment.LocalPurgeTriggered = true
				if (SupplierPODAttachment.MimeType entered) 
					SupplierPODAttachment.LocalPurgeTriggered = true


		SetDiscountFields is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (DiscountAmount1 not entered)

					LocDiscAmt			= DiscountAmount.CurrencyAmount		
					DiscountAmount1		= LocDiscAmt						
					DiscountPercent1	= DiscountPercent
					DiscountDate1		= DiscountDate
				else
					if (DiscountAmount.CurrencyAmount not entered)

						LocDiscAmt						= DiscountAmount1	
						DiscountAmount.CurrencyAmount	= LocDiscAmt		
						DiscountPercent					= DiscountPercent1
						DiscountDate					= DiscountDate1

		BODDataInitialLoadPayablesInvoiceCriteria is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup					is a VendorGroup
				PrmFromCompany					is a PayablesCompany
				PrmToCompany					is a PayablesCompany
				PrmFromVendor					is a Vendor
					context of PrmVendorGroup
				PrmToVendor						is a Vendor
					context of PrmVendorGroup
				PrmFromInvoice					is a PayablesInvoice
					context of PrmFromCompany
				PrmToInvoice					is a PayablesInvoice
					context of PrmFromCompany
				PrmDateRange					is a DateRange
				PrmCreateDateRange				is a DateRange
				PrmStatus 						is Numeric size 1

			Parameter Rules
			Instance Selection
				where  (((PrmVendorGroup entered
				and		 PrmVendorGroup = VendorGroup)
				or		 PrmVendorGroup not entered)
				and    ((PrmFromCompany entered
				and		  PrmFromCompany <= Company)
				or		  PrmFromCompany not entered)
				and	   ((PrmToCompany entered
				and      PrmToCompany >= Company)
				or       PrmToCompany not entered)
				and    ((PrmFromVendor entered
				and		 PrmFromVendor <= Vendor)
				or		 PrmFromVendor not entered)
				and    ((PrmToVendor entered
				and		 PrmToVendor >= Vendor)
				or		 PrmToVendor not entered)
				and    ((PrmFromInvoice entered
				and		 PrmFromInvoice <= PayablesInvoice)
				or		 PrmFromInvoice not entered)
				and    ((PrmToInvoice entered
				and		 PrmToInvoice >= PayablesInvoice)
				or		 PrmToInvoice not entered)
				and    (InvoiceDate within PrmDateRange
				or		PrmDateRange not entered)
				and    (CreateDate within PrmCreateDateRange
				or		PrmCreateDateRange not entered)
				and     (Status = PrmStatus
				or       PrmStatus not entered))

			Sort Order
				PayablesInvoice

			Local Fields


			Action Rules

				Instance Rules
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger and (!Status.Unreleased) and GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
						increment bod id.VariationID
						ActionCode	= ActionCode.Create
						LocalInvoiceOnHold = IsOnHold


						LocalTitle = "MassBOD:"+MassBODTitleDate+": EG:"+GeneralLedgerCompanyRel.FinanceEnterpriseGroup+"  CO:"+Company+" VN:"+Vendor+" INV:"+Invoice+" PI:"+PayablesInvoice+" SF:"+Suffix
						include TriggerSupplierInvoiceRules





		SelectForARInterfacing is an Instance Action
			valid when (SelectForARInterfacingValid)
			Action Rules
				constraint (!IsSelectedForAR)
					"RecordIsAlreadySelected"

				constraint (Company.CustomerCreateAndInterfaceToAR)
					"A\PTo_\A\RInterfaceNotAllowedForThisCompany."

				constraint (ReceivableCompanyRel exists)
					"ReceivableCompany<Company>DoesNotExist"

				constraint (CompanyCustomerRel exists)
					"CompanyCustomerDoesNotExist;Company=<Company>,Customer=<Vendor.Customer>"

				if (Vendor.CustomerGroup entered)
					constraint (ReceivableCompanyRel.CustomerGroupField.CustomerGroup = Vendor.CustomerGroup)
						"VendorCustomerGroup<Vendor.CustomerGroup>DoesNotMatchARCompanyCustomerGroup<ReceivableCompanyRel.CustomerGroupField.CustomerGroup>"

				LocalRunProgram		= LocalRunProgram.CashRequirements


				constraint (!PaymentsHaveBeenScheduledRel exists)	
					"CannotSelect;InvoiceScheduledForPayment"

				LocalRunProgram		= LocalRunProgram.InvoiceDistributionClosing
				constraint (!ActivePayablesProcessingMonitorByCompanyRel exists)
					"CannotSelect;InvoiceDistributionClosingRunning"

				invoke Create APToARSelect
					invoked.Company									= Company
					invoked.Status									= 0

		CreateCompanyCustomer is an Instance Action
			valid when (CreateCompanyCustomerValid)
			Parameters
				PrmCustomer  is a Customer
				ReceivableCompany
				ReceivableDefaultCode
			Parameter Rules
				PrmCustomer
					default to Vendor.Customer
				ReceivableCompany
					required
				ReceivableDefaultCode
					required
			Action Rules
				invoke Create CompanyCustomer
					assign result to NewCompanyCustomer
					invoked.Company     			= ReceivableCompany
					invoked.Customer				= PrmCustomer
					invoked.ReceivableDefaultCode	= ReceivableDefaultCode
					invoked.TaxExempt				= ReceivableDefaultCode.TaxExempt

		UnSelectForARInterfacing is an Instance Action
			valid when (IsSelectedForAR)
			Action Rules
				invoke Delete APToARSelectRel


		CheckInvoiceDetailDistributionsInBalance is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				include CheckInvoiceDetailsAndAOCs
				constraint (DetailDistributionsInBalance)
					"InvoiceDetailDistributionsAreOutOfBalance.VerifyPurchaseOrderLineOrContractLineAreEnteredOnCorrespondingDistributions."

		CreditForRebill is an Instance Action
			valid when (AllowCreditForRebill)
			Parameters
				PrmInvoice is like Invoice
					default label is "InvoiceNumber"
				PrmInvoiceDate		is Date
					default label is "InvoiceDate"
				PrmTermsCode is a TermsCode
					default label is "TermsCode"
				PrmDueDate			is Date
					default label is "DueDate"
				PrmPostDate			is Date
					default label is "PostDate"
				PrmInvoiceAmount  is a CurrencyAmount
					default label is "InvoiceAmount"
				PrmTaxCode		  is a TaxCode
					default label is "TaxCode"
				PrmTaxAmount      is a CurrencyAmount
					default label is "TaxAmount"
				PrmCreditAllLines is Boolean
					default label is "CreditAllLines"

			Parameter Rules
				PrmInvoice
					required
				PrmInvoiceDate
					required
					default to InvoiceDate
					initial value is InvoiceDate
				PrmTermsCode
					default to TermsCode
					initial value is TermsCode
				PrmDueDate
					default to DefaultDueDate
					initial value is DefaultDueDate
				PrmPostDate
					required
					default to current corporate date
					initial value is current corporate date
				PrmInvoiceAmount
					default to InvoiceAmount.CurrencyAmount * -1
					initial value is InvoiceAmount.CurrencyAmount * -1
				PrmTaxCode
					default to TaxCode
					initial value is TaxCode
				PrmTaxAmount
					default to SumOneSourceInvoicedTaxDistribAmount * -1
					initial value is SumOneSourceInvoicedTaxDistribAmount * -1
				PrmCreditAllLines
					initial value is true

			Entrance Rules
				constraint (IsMatched)
					"FromInvoiceHasNotBeenMatched"

				constraint (MatchLevel.DetailMatch)
					"FromInvoiceRequiredToBeDetailMatchForCreditForRebill"

				constraint (CreditForRebillEnabled)
					"CreditForRebillHasNotBeenEnabledOnMatchCompany"

				constraint (AllowCreditForRebill)
					"CreditForRebillNotAllowedForThisInvoice"

				for each PayablesInvoiceDetailRel
					InvoiceDetailCounter += 1
					if (!each.ItemType.Service
					and !MatchProcessType.DropShip)
						if (!CreditOrDebitMemo
						and !IsChargeback)
							if (each.ClosedChargebackReconMatchMessageRel exists
							and !each.ReceiptMNRExistRel exists)
								NextSentence = true
							else
							if (each.ExcessQuantityProcess.MatchNoReceipt)

								TempQuantity = each.TotalLinkedMatchedNotReceivedQuantity
								if (TempQuantity not entered)
									TempQuantity = each.MatchedQuantity

								constraint (each.PurchaseOrderLine.MatchedNotReceivedQuantity entered
								and			TempQuantity <= each.PurchaseOrderLine.MatchedNotReceivedQuantity)
									"CannotPerformCreditForRebill;MatchedNotReceivedQuantityHasBeenReceived"	

			Action Rules

				invoke CreateCreditForRebill PayablesInvoice
					invoked.PrmCompany			= Company
					invoked.PrmFromInvoice		= PayablesInvoice
					invoked.PrmInvoice			= PrmInvoice
					invoked.PrmInvoiceDate		= PrmInvoiceDate
					invoked.PrmTermsCode		= PrmTermsCode
					invoked.PrmDueDate			= PrmDueDate
					invoked.PrmPostDate			= PrmPostDate

					invoked.PrmInvoiceAmount	= PrmInvoiceAmount
					invoked.PrmTaxCode			= PrmTaxCode
					invoked.PrmTaxAmount		= PrmTaxAmount
					invoked.PrmCreditAllLines	= PrmCreditAllLines

		CreateCreditForRebill is a Create Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany is a PayablesCompany
					default label is "Company"
				PrmFromInvoice is a PayablesInvoice
					default label is "FromInvoice"
				PrmInvoice is like Invoice
					default label is "InvoiceNumber"
				PrmInvoiceDate		is Date
					default label is "InvoiceDate"
				PrmTermsCode        is a TermsCode
					default label is "TermsCode"
				PrmDueDate			is Date
					default label is "DueDate"
				PrmPostDate			is Date
					default label is "PostDate"
				PrmInvoiceAmount  is a CurrencyAmount
					default label is "InvoiceAmount"
				PrmTaxCode		  is a TaxCode
					default label is "TaxCode"
				PrmTaxAmount      is a CurrencyAmount
					default label is "TaxAmount"
				PrmCreditAllLines is Boolean
					default label is "CreditAllLines"

			Parameter Rules
				PrmCompany
					required
				PrmFromInvoice
					required
				PrmInvoice
					required
				PrmInvoiceDate
					required
					default to current corporate date
				PrmDueDate
					default to current corporate date
				PrmPostDate
					required
					default to current corporate date

			Local Fields


			Entrance Rules
				constraint (PrmFromInvoice.IsMatched)
					"FromInvoiceHasNotBeenMatched"

				constraint (PrmFromInvoice.MatchLevel.DetailMatch)
					"FromInvoiceRequiredToBeDetailMatchForCreditForRebill"

				constraint (PrmFromInvoice.AllowCreditForRebill)
					"CreditRebillNotAllowedForInvoice"

				BypassActiveResourceEdit = true
			Action Rules

				if   (PrmFromInvoice.TaxEntityRel.ThirdParty.Sabrix)
					LocalTaxAmount = sum PrmFromInvoice.MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount


				invoke Unreleased.CreateInvoice this instance
					invoked.Company							= PrmCompany
					invoked.Invoice							= PrmInvoice
					invoked.Vendor							= PrmFromInvoice.Vendor
					invoked.FirstPurchaseOrder				= PrmFromInvoice.FirstPurchaseOrder
					invoked.ServiceContract					= PrmFromInvoice.ServiceContract
					invoked.MatchProcessType				= PrmFromInvoice.MatchProcessType
					invoked.OriginalInvoice					= PrmFromInvoice
					invoked.InvoiceType						= "C"
					invoked.ProcessLevel					= PrmFromInvoice.ProcessLevel
					invoked.InvoiceDate						= PrmInvoiceDate
					invoked.TermsCode						= PrmTermsCode
					if (PrmTermsCode not entered)
						invoked.DueDate						= PrmDueDate
					invoked.DistributionDate				= PrmPostDate
					invoked.InvoiceAmount.CurrencyAmount	= PrmInvoiceAmount
					invoked.TaxCode							= PrmTaxCode
					invoked.InvoiceSource					= "Y"  

					invoked.PurchaseFromLocation			= PrmFromInvoice.PurchaseFromLocation
					invoked.ExternalPurchaseOrder			= PrmFromInvoice.FirstPurchaseOrder
					invoked.Description						= PrmFromInvoice.Description
					invoked.VendorGroup						= PrmFromInvoice.VendorGroup
					invoked.InvoiceCurrency					= PrmFromInvoice.InvoiceCurrency
					invoked.PayVendor						= PrmFromInvoice.PayVendor
					invoked.InvoiceGroup					= PrmFromInvoice.InvoiceGroup
					invoked.Location						= PrmFromInvoice.Location
					invoked.RemitToCode						= PrmFromInvoice.RemitToCode
					invoked.TaxAdjustment					= PrmFromInvoice.TaxAdjustment

					if(PrmFromInvoice.TaxAdjustment.Calculate)
						invoked.TaxableAmount				= PrmFromInvoice.TaxableAmount * (PrmInvoiceAmount/PrmFromInvoice.InvoiceAmount.CurrencyAmount) * -1

					if   (PrmFromInvoice.TaxEntityRel.ThirdParty.Sabrix
					and  (PrmInvoiceAmount 	= (PrmFromInvoice.InvoiceAmount.CurrencyAmount * -1))
					and  (PrmTaxAmount 		= (PrmFromInvoice.TaxAmount * -1)))

						invoked.TaxAmount					= LocalTaxAmount
					else
						invoked.TaxAmount					= PrmTaxAmount

				if  (PrmCreditAllLines)
					invoke CreditForRebillSet PayablesInvoiceDetail
						invoked.PrmCompany 		= PrmCompany
						invoked.PrmInvoice 		= PrmFromInvoice
						invoked.MemoInvoice 	= this instance.PayablesInvoice


		CreatePayablesInvoiceVoucherRef is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany 		  	 is a PayablesCompany
				PrmPeriodStartDate 	 is Date
				PrmPeriodEndDate     is Date

			Local Fields



			Instance Selection
				where (Company 			 = PrmCompany
				and   (Status.Released or  Status.Historical)
				and   (DistributionDate >= PrmPeriodStartDate
				and    DistributionDate <= PrmPeriodEndDate)
				and    not HasPayablesInvoiceVoucherReference)

			Action Rules
				Instance Rules
					invoke Create PayablesInvoiceVoucherRef
						fill in fields from this instance
						invoked.PayablesInvoiceVoucherRef = PayablesInvoice
						invoked.VoucherReferenceNumber    = blank
						invoked.InvoiceAmount    	      = InvoiceAmount.CurrencyAmount



		ICNCodeTaxabilityOverride is an Instance Action			
			default label is untranslatable
			restricted		
			Action Rules
				if (any PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate)
					invoke DeleteTaxCode
					for each TotalTran1TaxableDistributionRel
						invoke FastUpdate each
							invoked.TaxIndicator = 3	
					TaxCode = old TaxCode






























		UpdateExternalPOForMatchInvoices is an Instance Action			
			default label is untranslatable
			restricted
			Action Rules
				if (!MatchProcessType.Expense)
					initialize ExternalPurchaseOrder
					for each MatchPurchaseOrderInvoicesRel
						if (each.InterfacedPurchaseOrderRel exists)
							ExternalPurchaseOrder = each.first InterfacedPurchaseOrderRel.PurchaseOrderImport
						else
							ExternalPurchaseOrder = each.PurchaseOrder
						end for each

					if  (FirstPurchaseOrder > 0
					and  (FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry 
					or    FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
					and   InvoiceAmount.ExchangeDate != DerivedExchangeDate)

						invoke Update 
							invoked.InvoiceAmount.ExchangeDate = DerivedExchangeDate 
							invoked.DiscountAmount.ExchangeDate	= DerivedExchangeDate
							if  (FirstPurchaseOrder.ReceiptCurrencyConversionRate entered
							and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.ReceiptCurrencyConversionRate
								invoked.DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.ReceiptCurrencyConversionRate
							else
							if  (FirstPurchaseOrder.EnteredCurrencyConversionRate entered
							and  FirstPurchaseOrder.CurrencyExchangeSetPoint.Entry)
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.EnteredCurrencyConversionRate
								invoked.DiscountAmount.FunctionalAmount.EnteredCurrencyRate	= FirstPurchaseOrder.EnteredCurrencyConversionRate
							initialize invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ProjectAmount.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
							initialize invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyRate

				else
				if  (Suffix entered)
					ExternalPurchaseOrder = first PayablesInvoiceOriginalRel.ExternalPurchaseOrder
				else
				if  (HasMatchInvoiceReferenceRel)
					ExternalPurchaseOrder = MatchInvoiceReferenceRel.OriginalInvoice.ExternalPurchaseOrder

		SetAgingFields is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup 		is a VendorGroup
					default label is "VendorGroup"

			Local Fields

			Instance Selection
				where (VendorGroup = PrmVendorGroup
				and    IncludeInPayablesInvoiceTotals)

			Action Rules
				Instance Rules

					AgingDate			= DueDate - current corporate date

					if (AgingDate < 0)
						if (AgingDate < -60)
							PastDueAgingPeriod	=  "Over 60 Days"
						else
							if (AgingDate < -30)
								PastDueAgingPeriod	=  "31 to 60 Days"
							else
								if (AgingDate < 0)
									PastDueAgingPeriod	= "1 to 30 Days"
					else
						PastDueAgingPeriod 		= blank

					if (AgingDate >= 0)
						if (AgingDate < 8)
							AgingPeriod	= "1 to 7 Days"
						else
							if (AgingDate < 15)
								AgingPeriod	= "8 to 14 Days"
							else
								if (AgingDate < 22)
									AgingPeriod	= "15 to 21 Days"
								else
									if (AgingDate < 29)
										AgingPeriod	= "22 to 28 Days"
									else
										if (AgingDate > 28)
											AgingPeriod	= "Over 28 Days"
					else
						AgingPeriod		= blank

		UpdateOpenPayablesInvoiceTotals is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup is a VendorGroup
					default label is "VendorGroup"

			Local Fields

			Accumulators
				NumberOfInvoices
				SumOfInvoices

			Instance Selection
				where (VendorGroup = PrmVendorGroup
				and    IncludeInPayablesInvoiceTotals
				and    AgingPeriod entered)

			Sort Order
				VendorGroup
				Vendor
				AgingPeriod
				Company
				PayablesInvoice

			Action Rules
				AgingPeriod Set Rules

					Exit Rules
						LocalVendorGroup			= VendorGroup
						LocalVendor					= Vendor
						LocalPayablesInvoiceTotal	= AgingPeriod

						invoke UpdateNoEdits VendorPayablesInvoiceTotalRel
							invoked.PrmNumberOfInvoices	= NumberOfInvoices
							invoked.PrmSumOfInvoices	= SumOfInvoices

						initialize NumberOfInvoices
						initialize SumOfInvoices

				Instance Rules

					NumberOfInvoices	+= 1
					SumOfInvoices		+= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

		UpdatePastDuePayablesInvoiceTotals is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup is a VendorGroup
					default label is "VendorGroup"

			Local Fields

			Accumulators
				NumberOfInvoices
				SumOfInvoices

			Instance Selection
				where (VendorGroup = PrmVendorGroup
				and    IncludeInPayablesInvoiceTotals
				and    PastDueAgingPeriod entered)

			Sort Order
				VendorGroup
				Vendor
				PastDueAgingPeriod
				Company
				PayablesInvoice

			Action Rules
				PastDueAgingPeriod Set Rules

					Exit Rules
						LocalVendorGroup			= VendorGroup
						LocalVendor					= Vendor
						LocalPayablesInvoiceTotal	= PastDueAgingPeriod

						invoke UpdateNoEdits VendorPayablesInvoiceTotalRel
							invoked.PrmNumberOfInvoices	= NumberOfInvoices
							invoked.PrmSumOfInvoices	= SumOfInvoices

						initialize NumberOfInvoices
						initialize SumOfInvoices

				Instance Rules
					NumberOfInvoices	+= 1
					SumOfInvoices		+= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount


		InvoiceStatisticsForBODValidation is a Set Action 			
			default label is "InvoiceStatisticsForTransferValidation"	
			restricted												
			completion message is "<LocalCompletionMessage>"		
			Parameters												
				RunTime			is TimeStamp						
				RunCompany		is a PayablesCompany				
				SelectFromDate	is TimeStamp								
				SelectToDate	is TimeStamp								
				RunByResource	is a FinanceResource
				EmailResultsTo	is a FinanceResource

			Parameter Rules
				RunTime
					initial value is current timestamp
					required

				RunCompany
					required

				SelectFromDate
					required
					LocalSelectFromDate = SelectFromDate

				SelectToDate
					if (SelectFromDate date entered)
						default to DerivedSelectFromDate
						LocalSelectToDate = SelectToDate
						constraint (DerivedSelectToDate = DerivedSelectFromDate)
							"SelectFromAndToDatesMustEqualIfRunningForTimeRange"
					else
						required
						LocalSelectToDate = SelectToDate


					if (DerivedSelectFromDate <= DerivedSelectToDate)
						constraint (SelectFromDate time < SelectToDate time)
							"SelectFromTimeMustBeBeforeSelectToTime"


				RunByResource
					initial value is actor.agent(Employee).Employee
					default to actor.agent(Employee).Employee

				EmailResultsTo
					required
					constraint (EmailResultsTo.EmailAddress entered)
						"EmailAddressIsRequired"


			Accumulators
				TotalCountOfInvoices
				TotalSumOfInvoices
				CountOfReleasedInvoices
				SumOfReleasedInvoices
				CountOfNonReleasedInvoices
				SumOfNonReleasedInvoices

			Sort Order
				Company
				CreateDate
				Vendor
				PayablesInvoice

			Instance Selection
				where  (Company = RunCompany
				and    (SelectFromDate not entered
				or     (SelectFromDate entered
				and     CreateDate time >= SelectFromDate time
				and     CreateDate time <= SelectToDate time))
				and    (DerivedCreateDate >= DerivedSelectFromDate
				and     DerivedCreateDate <= DerivedSelectToDate ))


			Action Rules
				Set Rules
					Entrance Rules
						initialize TotalCountOfInvoices
						initialize TotalSumOfInvoices
						initialize CountOfReleasedInvoices
						initialize SumOfReleasedInvoices
						initialize CountOfNonReleasedInvoices
						initialize SumOfNonReleasedInvoices


					Exit Rules

						if (PfiConfigurationFromEmailPropertyRel.Value entered)
							LocalCompletionMessage = "<RunTime>:<TotalCountOfInvoices>:<TotalSumOfInvoices>"
							send email
								to EmailResultsTo.EmailAddress
								from PfiConfigurationFromEmailPropertyRel.Value
								subject "CSFInvoiceBODValidation<RunTime>"
								Contents
									"CSFInvoiceBODValidation:RunTime=<RunTime>"
									"CSFInvoiceBODValidation:Company=<RunCompany>"
									"TotalCountOfInvoices:<TotalCountOfInvoices>"
									"TotalSumOfInvoices:<TotalSumOfInvoices>"
									"CountOfReleasedInvoices:<CountOfReleasedInvoices>"
									"SumOfReleasedInvoices:<SumOfReleasedInvoices>"
									"CountOfNonReleasedInvoices:<CountOfNonReleasedInvoices>"
									"SumOfNonReleasedInvoices:<SumOfNonReleasedInvoices>"
						else
							LocalCompletionMessage = "<RunTime>:<TotalCountOfInvoices>:<CountOfReleasedInvoices>:<TotalSumOfInvoices>:<SumOfReleasedInvoices>"


				Instance Rules
					TotalCountOfInvoices			+= 1
					TotalSumOfInvoices				+= InvoiceAmount.CurrencyAmount
					if (Status.Released)
						CountOfReleasedInvoices		+= 1
						SumOfReleasedInvoices		+= InvoiceAmount.CurrencyAmount
					else
						CountOfNonReleasedInvoices	+= 1
						SumOfNonReleasedInvoices	+= InvoiceAmount.CurrencyAmount


		CreateMatchAgingInvoice is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
				PrmMatchAging is a MatchAging
				FromDate is Date 

			Instance Selection
				where (!MatchProcessType.Expense
				and   (InvoiceType.Invoice 
				or     Suffix not entered)
				and    !InterfaceInProcess 
				and    !Status.Cancelled
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)
			Action Rules
				Empty Set Rules
					invoke Update PrmMatchAging
						invoked.Status = 1
				Set Rules
					Exit Rules
						invoke Update PrmMatchAging
							invoked.Status = 1

				Instance Rules
					if (Status.Historical
					and MatchDate not entered)
						NextSentence = true
					else
					if (create date < FromDate)
						NextSentence = true
					else 
					if (MatchAgingInvoiceRel not exists)
						invoke Create MatchAgingInvoice 
							invoked.Company = Company
							invoked.PayablesInvoice = PayablesInvoice

		ReportMatchRates is a Set Action
			restricted 
			Parameters
				PrmFinanceEnterpriseGroup  		is a FinanceEnterpriseGroup
			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
			Instance Selection 
				where (!MatchProcessType.Expense 
				and    MatchDate entered 
				and    MatchedFrom entered 
				and    !Status.Cancelled)
			Action Rules 
				Set Rules 
					Exit Rules 
	                    invoke MarkAllComplete MatchingRate  
    	                    invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup 
				Instance Rules 
					LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup 
					LocalYear  					= MatchDate year 
					LocalMonth  				= MatchDate month 

					if (LocalMatchingRateYearMonthRel exists)

						invoke Update first LocalMatchingRateYearMonthRel 
							if (MatchedFrom.OnlineMatch)
								invoked.OnlineMatchCount += 1 
								invoked.OnlineMatchAmount += InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else
							if (MatchedFrom.AutoMatch)
								invoked.AutoMatchCount += 1 
								invoked.AutoMatchAmount += InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else 
							if (MatchedFrom.ReconciliationMatch)
								invoked.ReconMatchCount += 1 
								invoked.ReconMatchAmount += InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
					else 

						invoke Create MatchingRate  
							invoked.FinanceEnterpriseGroup  = PrmFinanceEnterpriseGroup 
							invoked.Year                    = LocalYear
							invoked.Month                   = LocalMonth 
							if (MatchedFrom.OnlineMatch)
								invoked.OnlineMatchCount += 1 
								invoked.OnlineMatchAmount += InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else
							if (MatchedFrom.AutoMatch)
								invoked.AutoMatchCount += 1 
								invoked.AutoMatchAmount += InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else 
							if (MatchedFrom.ReconciliationMatch)
								invoked.ReconMatchCount += 1 
								invoked.ReconMatchAmount += InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							
		CreateMatchServiceContractInvoiceRecords is a Set Action
			restricted
			Instance Selection
				where (MatchProcessType.ServiceContract
				or     Suffix = 111)
			Action Rules

				Instance Rules
					if  (ServiceContract entered
					and  ThisMatchServiceContractInvoiceRel not exists)
						invoke CreateNoRules MatchServiceContractInvoice 
							invoked.Company						= Company
							invoked.Contract 					= ServiceContract 
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.VendorGroup 				= Company.VendorGroup 

		UpdateMatchStatusOnPOCancelInvoices is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				FromDate is Date 

			Instance Selection
				where ((Suffix = 888 
				or     Suffix = 999)
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)
			Action Rules

				Instance Rules
					if (InvoiceDate < FromDate)
						NextSentence = true
					else 
						MatchStatus = 7

						if (Suffix = 888)
							invoke FastUpdate PayablesInvoiceNonCancelledChargebackRel 
								invoked.MatchStatus = 7
						else 
						if (Suffix = 999)
							invoke FastUpdate PayablesInvoiceOriginalRel 
								invoked.MatchStatus = 7

		RequestNewInvoicePayment is a Create RequestAction		
			default label is "RequestInvoicePayment"
			request action process is RequestNewInvoicePayment
			request action linkback webapp is PayablesManager
			workflow event title is "Payment_Request:_<Invoice>_|_Priority:_<RequestPriority>_|_NeededBy:_<NeededBy month>/<NeededBy day>/<NeededBy year>"
			allow user fields as parameters
			Parameters
				ApproverActor			is Alpha 30
				RequesterActor			is an Actor
			 	RequestedBy				is Alpha 100
	 			RequesterPhone			is a Telephone 
	 				holds pii
			 	RequesterEmail			is an EmailAddressMulti 
			 		holds pii
				RequestPriority			is Numeric 1
					States
						High				value is 1
						Medium				value is 2
						Low					value is 3
				NeededBy				is Date
				RoutingCategory			is an InvoiceRoutingCategory
				Company					is a PayablesCompany
				ProcessLevel			is a PayablesProcessLevel
				InvoiceTypeForExpense   is AlphaUpper size 1
					States
						Invoice             value is blank
						CreditMemo          value is "C"
						DebitMemo           value is "D"
						Prepayment       	value is "P"
				Vendor
				RemitToCode				is a VendorLocation
				Invoice
				InvoiceDate				is an ExchangeDate
				DistributionDate 		is a PostingDate	
					default label is "PostDate"
				DueDate
				TermsCode
				PrmInvoiceAmount		is a CurrencyAmount
					default label is "InvoiceAmount"
				InvoiceCurrency			is a Currency
				TaxCode
				TaxableAmount			is a CurrencyAmount			
				TaxAmount				is an InternationalAmount
				LinkTaxOnDistributions	is Boolean
				CashCode
				BankTransactionCode
				OverrideSeparatePayment	is a BooleanOverride
				OverridePayImmediately	is a BooleanOverride
				PurchaseOrder
				Description
				DistributionCode		is a PayablesDistributionCode
				DistributionCodeAccount is a FinanceCodeBlock		
					default label is "DistributionCodeAccountOverride"
				Notes					is Text
				ApproverNotes			is Text
				Attachment
				ReceiptOfInvoiceDate	is Date
				DistributionArray		is a SpeedDistributionArray
					default label is "Distributions"
				DistCodeBlockEditor		is a TransactionCodeBlock	
				PrmShowMoreLines        is Boolean 
				PrmShowLine2			is Boolean
				PrmShowLine3			is Boolean
				PrmShowLine4			is Boolean
				PrmShowLine5			is Boolean
				PrmShowLine6			is Boolean
				PrmShowLine7			is Boolean
				PrmShowLine8			is Boolean
				PrmShowLine9			is Boolean
				PrmShowLine10			is Boolean
				GeneralLedgerSystemCode				
			Parameter Rules
				RequestPriority
					required

				NeededBy
					required

				Notes
					required

				RequesterActor
					initial value is actor
					default to actor

				ApproverActor
					if (!actor.initiator)
						default to actor

				RequestedBy
					initial value is RequesterActor.PersonName.GivenName + " " + RequesterActor.PersonName.FamilyName
					default to RequesterActor.PersonName.GivenName + " " + RequesterActor.PersonName.FamilyName

				RequesterPhone
					initial value is RequesterActor.ContactInfo.TelephoneNumber
					default to RequesterActor.ContactInfo.TelephoneNumber

				RequesterEmail
					initial value is RequesterActor.ContactInfo.EmailAddress
					default to RequesterActor.ContactInfo.EmailAddress

				Company
					required

				Invoice
					required

				InvoiceDate
					required
					default to NeededBy

				DistributionDate	
					LocalCompany = Company
					if (Company.VendorGroup.InvoicePostDateDefaultOption.CurrentDate)
						default to current corporate date
					default to InvoiceDate
					
					if  (!InvoiceTypeForExpense.Prepayment
					and  CompanySystemClosingControl2Rel.Control)
						constraint (DistributionDate within CompanySystemClosingControl2Rel.ValidEntryDate)
							"PostDateOf<DistributionDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControl2Rel.ValidEntryDate.Begin>-<CompanySystemClosingControl2Rel.ValidEntryDate.End>"

				Vendor
					required

				GeneralLedgerSystemCode		
					initial value is "AP"
					default to "AP"

				LinkTaxOnDistributions
					if (TaxAmount entered
					and !LinkTaxOnDistributions)
						constraint (!DistributionArray.SpeedDistribution[1].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine1"
						constraint (!DistributionArray.SpeedDistribution[2].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine2"
						constraint (!DistributionArray.SpeedDistribution[3].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine3"
						constraint (!DistributionArray.SpeedDistribution[4].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine4"
						constraint (!DistributionArray.SpeedDistribution[5].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine5"
						constraint (!DistributionArray.SpeedDistribution[6].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine6"
						constraint (!DistributionArray.SpeedDistribution[7].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine7"
						constraint (!DistributionArray.SpeedDistribution[8].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine8"
						constraint (!DistributionArray.SpeedDistribution[9].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine9"
						constraint (!DistributionArray.SpeedDistribution[10].TaxIndicator.Taxable)
							"TaxIsNotLinkedToDistributions;CannotEnterTaxableOnLine10"

				DistributionCode		
					if (DistributionCodeAccount entered)
						required
							"DistributionCodeRequiredWithDistributionCodeAccountOverride"
					constraint (!InvoiceTypeForExpense.Prepayment)
						"CannotEnterDistributionCodeOnAPrepayment"

					initialize LocalVendorGroup
					initialize LocalVendor
					initialize LocalInvoice
					initialize LocalPeriodOfPerformanceProject
					initialize LocalDateRange
					LocalFinanceEnterpriseGroup = Company.FinanceEnterpriseGroup

					if (DistributionCode entered)
						AccountingEntity 	= GeneralLedgerCompanyRel.AccountingEntity

						if (AccountingEntity not entered)
							AccountingEntity	= first DistributionCode.PayablesDistributionCodeDetailRel.DistributionAccount.ToAccountingEntity

						
						if (DistributionCode.PayablesDistributionCodeDetailRel exists)

							for each DistributionCode.PayablesDistributionCodeDetailRel

								if (each.DistributionAccount.Project entered)
									LocalDistributionCodeAccount    = each.DistributionAccount
									LocalPeriodOfPerformanceProject = each.DistributionAccount.Project
								if (DistributionCodeAccount.Project entered)	
									LocalDistributionCodeAccount    = DistributionCodeAccount
									LocalPeriodOfPerformanceProject = DistributionCodeAccount.Project

								if (LocalDistributionCodeAccount.Project entered)
									if (LocalDistributionCodeAccount.Project.HasPeriodOfPerformance)
										LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
										LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate
									else	
										LocalDateRange.Begin			= LocalDistributionCodeAccount.Project.ProjectDateRange.BeginDate
										LocalDateRange.End				= LocalDistributionCodeAccount.Project.ProjectDateRange.EndDate
									if (Company.FinanceEnterpriseGroup.ProjectDateEdit.TransactionDate)
										constraint (InvoiceDate within LocalDateRange)
											"TransactionDate<InvoiceDate>IsOutsideOfDateRange<Company.FinanceEnterpriseGroup.ProjectLabel>_<LocalPeriodOfPerformanceProject>"	
									if (Company.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)				
										constraint (DistributionDate within LocalDateRange)
											"PostingDate<DistributionDate>IsOutsideOfDateRange<Company.FinanceEnterpriseGroup.ProjectLabel>_<LocalPeriodOfPerformanceProject>"


								if (each.DistributionAccount.GeneralLedgerChartAccount.AllowUnits.Required)
									AccountRequiresUnits = true


								DistCodeBlockEditor	= each.DistributionAccount


								if (DistCodeBlockEditor.ToAccountingEntity not entered)
									if (GeneralLedgerCompanyRel.AccountingEntity entered)
										DistCodeBlockEditor.ToAccountingEntity 	= GeneralLedgerCompanyRel.AccountingEntity
									else
										DistCodeBlockEditor.ToAccountingEntity 	= DistCodeBlockEditor.AccountingEntity

								
								if (DistCodeBlockEditor.AccountingEntity not entered)
									if (GeneralLedgerCompanyRel.AccountingEntity entered)
										AccountingEntity 	= GeneralLedgerCompanyRel.AccountingEntity
									else
										AccountingEntity 	= DistCodeBlockEditor.ToAccountingEntity


								DistCodeBlockEditor.LocalEditMode = true		

								
								LocalCodeBlockRelationEditor = DistCodeBlockEditor.EditCodeBlockRelationDetail		

								if (DistCodeBlockEditor.ToAccountingEntity.ValidSystems entered)
									constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.ToAccountingEntity.ValidSystems)
										"InvalidSystemForPosting<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>OnDistributionCodeDetail"
								if (DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction entered)
									constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction)
										"InvalidSystem<GeneralLedgerSystemCode>ForAccount<DistCodeBlockEditor.GeneralLedgerChartAccount>OnDistributionCodeDetail"

				DistributionCodeAccount

					if (DistributionCode entered
					and DistributionCodeAccount entered
					and DistributionCodeAccount.ToAccountingEntity not entered)

						if (DistributionCodeAccount.AccountingEntity entered)
							DistributionCodeAccount.ToAccountingEntity	= DistributionCodeAccount.AccountingEntity
						else
						if (AccountingEntity entered)
							DistributionCodeAccount.ToAccountingEntity	= AccountingEntity
						else
						if (DistCodeBlockEditor.AccountingEntity entered)
							DistributionCodeAccount.ToAccountingEntity	= DistCodeBlockEditor.AccountingEntity
						else
						if (GeneralLedgerCompanyRel.AccountingEntity entered)
							DistributionCodeAccount.ToAccountingEntity	= GeneralLedgerCompanyRel.AccountingEntity



					if (DistributionCode entered
					and DistributionCodeAccount entered)
						if (DistributionCodeAccount.ToAccountingEntity entered)
							constraint (DistributionCodeAccount.ToAccountingEntity exists)
								"1Invalid<Company.FinanceEnterpriseGroup.AccountingEntityLabel><DistributionCodeAccount.AccountingEntity>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.GeneralLedgerChartAccount entered)
							constraint (DistributionCodeAccount.GeneralLedgerChartAccount exists)
								"2Invalid<Company.FinanceEnterpriseGroup.AccountLabel><DistributionCodeAccount.GeneralLedgerChartAccount>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.AccountingUnit entered)
							constraint (DistributionCodeAccount.AccountingUnit exists)
								"3Invalid<Company.FinanceEnterpriseGroup.AccountingUnitLabel><DistributionCodeAccount.AccountingUnit>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.Project entered)
							constraint (DistributionCodeAccount.Project exists)
								"4Invalid<Company.FinanceEnterpriseGroup.ProjectLabel><DistributionCodeAccount.Project>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension1 entered)
							constraint (DistributionCodeAccount.FinanceDimension1 exists)
								"5Invalid<Company.FinanceEnterpriseGroup.FinanceDimension1Label><DistributionCodeAccount.FinanceDimension1>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension2 entered)
							constraint (DistributionCodeAccount.FinanceDimension2 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension2Label><DistributionCodeAccount.FinanceDimension2>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension3 entered)
							constraint (DistributionCodeAccount.FinanceDimension3 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension3Label><DistributionCodeAccount.FinanceDimension3>OnDistributionCodeAccountOverride"									

						if (DistributionCodeAccount.FinanceDimension4 entered)
							constraint (DistributionCodeAccount.FinanceDimension4 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension4Label><DistributionCodeAccount.FinanceDimension4>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension5 entered)
							constraint (DistributionCodeAccount.FinanceDimension5 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension5Label><DistributionCodeAccount.FinanceDimension5>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension6 entered)
							constraint (DistributionCodeAccount.FinanceDimension6 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension6Label><DistributionCodeAccount.FinanceDimension6>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension7 entered)
							constraint (DistributionCodeAccount.FinanceDimension7 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension7Label><DistributionCodeAccount.FinanceDimension7>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension8 entered)
							constraint (DistributionCodeAccount.FinanceDimension8 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension8Label><DistributionCodeAccount.FinanceDimension8>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension9 entered)
							constraint (DistributionCodeAccount.FinanceDimension9 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension9Label><DistributionCodeAccount.FinanceDimension9>OnDistributionCodeAccountOverride"

						if (DistributionCodeAccount.FinanceDimension10 entered)
							constraint (DistributionCodeAccount.FinanceDimension10 exists)
								"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension10Label><DistributionCodeAccount.FinanceDimension10>OnDistributionCodeAccountOverride"																																																						

						if (DistributionCodeAccount.GeneralLedgerChartAccount entered
						and DistributionCodeAccount.GeneralLedgerChartAccount.AllowUnits.Required)
							AccountRequiresUnits = true


				DistributionArray

					initialize LoopCounter
					initialize LocalSubTotal
					initialize LocalInvoiceAmount

					while (LoopCounter < 10)
						initialize DistCodeBlockEditor
						increment LoopCounter



						if (DistributionArray.SpeedDistribution[LoopCounter].InternationalAmount entered)
							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock entered)
								"DistributionLine_#<LoopCounter>AmountEntered;LineFinanceStructureAlsoRequired"
						
						if (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock entered)
							constraint (DistributionArray.SpeedDistribution[LoopCounter].InternationalAmount entered)
								"DistributionLine_#<LoopCounter>FinanceStructureEntered;LineAmountAlsoRequired"

							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.ToAccountingEntity entered)
								"DistributionLine_#<LoopCounter>AccountingEntityRequired"
							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.ToAccountingEntity exists)
								"Invalid<Company.FinanceEnterpriseGroup.AccountingEntityLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingEntity>OnDistributionLine_#<LoopCounter>"

							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount entered)
								"DistributionLine_#<LoopCounter>AccountRequired"
							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount exists)
								"Invalid<Company.FinanceEnterpriseGroup.AccountLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.AccountingUnitRequired)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingUnit entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.AccountingUnitLabel>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingUnit exists)
									"Invalid<Company.FinanceEnterpriseGroup.AccountingUnitLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingUnit>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.ProjectRequired)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.Project entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.ProjectLabel>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.Project exists)
									"Invalid<Company.FinanceEnterpriseGroup.ProjectLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.Project>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension1Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension1 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension1Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension1 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension1Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension1>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension2Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension2 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension2Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension2 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension2Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension2>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension3Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension3 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension3Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension3 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension3Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension3>OnDistributionLine_#<LoopCounter>"									

							if (Company.FinanceEnterpriseGroup.FinanceDimension4Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension4 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension4Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension4 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension4Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension4>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension5Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension5 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension5Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension5 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension5Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension5>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension6Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension6 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension6Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension6 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension6Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension6>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension7Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension7 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension7Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension7 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension7Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension7>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension8Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension8 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension8Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension8 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension8Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension8>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension9Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension9 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension9Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension9 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension9Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension9>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension10Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension10 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension10Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension10 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension10Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension10>OnDistributionLine_#<LoopCounter>"																																																						

							if (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount.AllowUnits.Required)
								AccountRequiresUnits = true
								constraint (DistributionArray.SpeedDistribution[LoopCounter].UnitAmount entered)
									"DistributionLine#<LoopCounter>:<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountLabel>_<DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount>RequiresUnits"
							if (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount.AllowUnits.No)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].UnitAmount not entered)
									"DistributionLine#<LoopCounter>:<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountLabel>_<DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount>DoesNotAllowUnits"

							DistCodeBlockEditor	= DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock

														
							DistCodeBlockEditor.LocalEditMode = true											

							





							
							LocalCodeBlockRelationEditor = DistCodeBlockEditor.EditCodeBlockRelationDetail		


							if (!Company.VendorGroup.DistributionEntryOnApproval
							or  DistCodeBlockEditor.GeneralLedgerChartAccount entered)
								constraint (DistCodeBlockEditor.GeneralLedgerChartAccount.RecordExists)
									"InvalidAccount<DistCodeBlockEditor.GeneralLedgerChartAccount.Account>OnDistributionLine_#<LoopCounter>"


							if (DistCodeBlockEditor.ToAccountingEntity.ValidSystems entered)
								constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.ToAccountingEntity.ValidSystems)
									"InvalidSystemForPosting<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>OnDistributionLine_#<LoopCounter>"
							

							if (DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction entered)
								constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction)
									"InvalidSystem<GeneralLedgerSystemCode>ForAccount<DistCodeBlockEditor.GeneralLedgerChartAccount>OnDistributionLine_#<LoopCounter>"

							if (DistCodeBlockEditor.Project entered)
									LocalDistributionCodeAccount    = DistCodeBlockEditor
									LocalPeriodOfPerformanceProject = DistCodeBlockEditor.Project
								if (DistributionCodeAccount.Project entered)	
									LocalDistributionCodeAccount    = DistributionCodeAccount
									LocalPeriodOfPerformanceProject = DistributionCodeAccount.Project

								if (LocalDistributionCodeAccount.Project entered)
									if (LocalDistributionCodeAccount.Project.HasPeriodOfPerformance)
										LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
										LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate
									else	
										LocalDateRange.Begin			= LocalDistributionCodeAccount.Project.ProjectDateRange.BeginDate
										LocalDateRange.End				= LocalDistributionCodeAccount.Project.ProjectDateRange.EndDate
									if (Company.FinanceEnterpriseGroup.ProjectDateEdit.TransactionDate)
										constraint (InvoiceDate within LocalDateRange)
											"TransactionDate<InvoiceDate>IsOutsideOfDateRange<Company.FinanceEnterpriseGroup.ProjectLabel>_<LocalPeriodOfPerformanceProject>"	
									if (Company.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)				
										constraint (DistributionDate within LocalDateRange)
											"PostingDate<DistributionDate>IsOutsideOfDateRange<Company.FinanceEnterpriseGroup.ProjectLabel>_<LocalPeriodOfPerformanceProject>"

						LocalSubTotal += DistributionArray.SpeedDistribution[LoopCounter].InternationalAmount


						initialize AccountRequiresUnits
						initialize DistCodeBlockEditor



					constraint (!InvoiceTypeForExpense.Prepayment)
						"CannotEnterDistributionOnAPrepayment"


					LocalSubTotal = LocalSubTotal+TaxAmount

					if (InvoiceTypeForExpense.CreditMemo)
						if (PrmInvoiceAmount > 0)
							LocalInvoiceAmount = (PrmInvoiceAmount * -1)
							if (LocalSubTotal != LocalInvoiceAmount)
								confirmation required
									"TotalDistributionAmount<LocalSubTotal>IsNotEqualToCreditAmount<LocalInvoiceAmount>;Continue?"
						else
							if (LocalSubTotal != PrmInvoiceAmount)
								confirmation required
									"TotalDistributionAmount<LocalSubTotal>IsNotEqualToCreditMemoAmount<PrmInvoiceAmount>;Continue?"
					else
						if (LocalSubTotal != PrmInvoiceAmount)
							confirmation required
								"TotalDistributionAmount<LocalSubTotal>IsNotEqualToInvoiceAmount<PrmInvoiceAmount>;Continue?"	
					



					
					
					
					
					
					

			Local Fields
				AccountingEntity		
				LocalDateRange								is a DateRange
				LocalDistributionCodeAccount 				is a FinanceCodeBlock
				LocalCodeBlockRelationEditor				is Numeric 2				

			Action Rules



				invoke Unreleased.CreateInvoice this instance
					fill in fields from this instance
					fill in user fields from parameters
					invoked.Company							= Company
					invoked.ProcessLevel					= ProcessLevel
					invoked.VendorGroup						= Company.VendorGroup	
					invoked.Vendor							= Vendor
					invoked.RemitToCode						= RemitToCode
					invoked.InvoiceType						= InvoiceTypeForExpense	
					invoked.Invoice							= Invoice
					invoked.TaxCode							= TaxCode
					invoked.TaxableAmount					= TaxableAmount			
					invoked.TaxAmount						= TaxAmount
					invoked.TransientLineTax				= LinkTaxOnDistributions
					invoked.FirstPurchaseOrder				= PurchaseOrder
					invoked.InvoiceAmount.CurrencyAmount	= PrmInvoiceAmount
					invoked.InvoiceAmount.ExchangeDate		= InvoiceDate
					invoked.InvoiceAmount.KeepRateOnly		= true
					invoked.InvoiceCurrency					= InvoiceCurrency
					invoked.InvoiceDate						= InvoiceDate
					invoked.DueDate							= DueDate
					invoked.DistributionDate				= DistributionDate
					invoked.CashCode						= CashCode
					invoked.BankTransactionCode				= BankTransactionCode
					invoked.OverrideSeparatePayment			= OverrideSeparatePayment
					invoked.OverridePayImmediately			= OverridePayImmediately
					invoked.DistributionCode				= DistributionCode
					invoked.TransientDistCodeAccount		= DistributionCodeAccount	
					invoked.Description						= Description
					invoked.SpeedDistributionArray			= DistributionArray
					invoked.RoutingCategory					= RoutingCategory
					invoked.ReceiptOfInvoiceDate			= ReceiptOfInvoiceDate
					invoked.TermsCode						= TermsCode					
					invoked.CreationSource					= 4		
					invoked.AccountRequiresUnits			= AccountRequiresUnits


			Rule Blocks
				RequestNewInvoicePaymentRules

					LocalVendor = Vendor
					LocalInvoice = Invoice
					LocalInvoiceDate = InvoiceDate			
					LocalCompany = Company
					LocalVendorGroup = Company.VendorGroup	
					initialize LoopCounter
					if (Company.VendorGroup.InvoiceNumberEdit.CompanyVendor)		
						constraint (!RequestPayablesInvoiceDuplicateInvoiceRel exists)
							"Invoice<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"
						LocalHasAssets = false					
						if (MatchPurchaseOrderInvoicesRel exists)
							for each MatchPurchaseOrderInvoicesRel
								if (each.HasAssets)
									LocalHasAssets = true
									end for each
						else
						if  (first MatchPurchaseOrderInvoicesRel exists
						and  first MatchPurchaseOrderInvoicesRel.HasAssets)
							LocalHasAssets = true
					
						if ((Vendor.AllowDuplicateInvoiceByDate					
						or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
						and !LocalHasAssets)
							constraint (!PayablesInvoiceDuplicateInvoiceByDateRel exists)
								"Prepayment<Invoice>AlreadyExistsForCompany<Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
						else
							constraint (!PayablesInvoiceDuplicateInvoiceRel exists)
								"Prepayment<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"
						initialize LocalCompany
					else

						constraint (!RequestPayablesInvoiceDuplicateInvoiceByVendorRel exists)
							"Invoice<Invoice>AlreadyExistsForCompany<first RequestPayablesInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"
						if ((Vendor.AllowDuplicateInvoiceByDate						
						or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
						and !LocalHasAssets)
							constraint (!PayablesInvoiceDuplicateInvoiceByVendorByDateRel exists)
								"Prepayment<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorByDateRel.Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
						else
							constraint (!PayablesInvoiceDuplicateInvoiceByVendorRel exists)
								"Prepayment<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"

					
					if (Vendor.VendorClass.RestrictToOneInvoice 		
					or Vendor.RestrictToOneInvoice)
            			constraint (RestrictToOneInvoiceByVendorRel not exists)
                			"VendorOrVendorClassRestrictedToOneInvoice:InvoiceAlreadyExistsForCompany<first RestrictToOneInvoiceByVendorRel.Company>,Vendor<Vendor>AndInvoice<first RestrictToOneInvoiceByVendorRel.Invoice>"
					
					initialize LocalVendorGroup
					initialize LocalVendor
					initialize LocalInvoice
					initialize LocalPeriodOfPerformanceProject
					initialize LocalDateRange
					LocalFinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
					

					if (DistributionCode entered)
						if (DistributionCodeAccount.Project entered)
							LocalDistributionCodeAccount    = DistributionCodeAccount
							LocalPeriodOfPerformanceProject = DistributionCodeAccount.Project
						
						if (DistributionCode.PayablesDistributionCodeDetailRel exists)
							for each DistributionCode.PayablesDistributionCodeDetailRel

								if (each.DistributionAccount.Project entered)
									LocalDistributionCodeAccount    = each.DistributionAccount
									LocalPeriodOfPerformanceProject = each.DistributionAccount.Project

								if (LocalDistributionCodeAccount.Project entered)
									if (LocalDistributionCodeAccount.Project.HasPeriodOfPerformance)
										LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
										LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate
									else	
										LocalDateRange.Begin			= LocalDistributionCodeAccount.Project.ProjectDateRange.BeginDate
										LocalDateRange.End				= LocalDistributionCodeAccount.Project.ProjectDateRange.EndDate
									if (Company.FinanceEnterpriseGroup.ProjectDateEdit.TransactionDate)
										constraint (InvoiceDate within LocalDateRange)
											"TransactionDate<InvoiceDate>IsOutsideOfDateRange<Company.FinanceEnterpriseGroup.ProjectLabel>_<LocalPeriodOfPerformanceProject>"	
									if (Company.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)				
										constraint (DistributionDate within LocalDateRange)
											"PostingDate<DistributionDate>IsOutsideOfDateRange<Company.FinanceEnterpriseGroup.ProjectLabel>_<LocalPeriodOfPerformanceProject>"

								DistCodeBlockEditor	= each.DistributionAccount

								
								if (DistCodeBlockEditor.ToAccountingEntity not entered)
									if (GeneralLedgerCompanyRel.AccountingEntity entered)
										DistCodeBlockEditor.ToAccountingEntity 	= GeneralLedgerCompanyRel.AccountingEntity
									else
										DistCodeBlockEditor.ToAccountingEntity 	= DistCodeBlockEditor.AccountingEntity

								
								if (DistCodeBlockEditor.ToAccountingEntity.ValidSystems entered)
									constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.ToAccountingEntity.ValidSystems)
										"InvalidSystemForPosting<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>OnDistributionCodeDetail"
								if (DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction entered)
									constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction)
										"InvalidSystem<GeneralLedgerSystemCode>ForAccount<DistCodeBlockEditor.GeneralLedgerChartAccount>OnDistributionCodeDetail"



						if (DistributionCode entered
						and DistributionCodeAccount entered)
							if (DistributionCodeAccount.ToAccountingEntity entered)
								constraint (DistributionCodeAccount.ToAccountingEntity exists)
									"Invalid<Company.FinanceEnterpriseGroup.AccountingEntityLabel><DistributionCodeAccount.AccountingEntity>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.GeneralLedgerChartAccount entered)
								constraint (DistributionCodeAccount.GeneralLedgerChartAccount exists)
									"Invalid<Company.FinanceEnterpriseGroup.AccountLabel><DistributionCodeAccount.GeneralLedgerChartAccount>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.AccountingUnit entered)
								constraint (DistributionCodeAccount.AccountingUnit exists)
									"Invalid<Company.FinanceEnterpriseGroup.AccountingUnitLabel><DistributionCodeAccount.AccountingUnit>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.Project entered)
								constraint (DistributionCodeAccount.Project exists)
									"Invalid<Company.FinanceEnterpriseGroup.ProjectLabel><DistributionCodeAccount.Project>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension1 entered)
								constraint (DistributionCodeAccount.FinanceDimension1 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension1Label><DistributionCodeAccount.FinanceDimension1>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension2 entered)
								constraint (DistributionCodeAccount.FinanceDimension2 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension2Label><DistributionCodeAccount.FinanceDimension2>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension3 entered)
								constraint (DistributionCodeAccount.FinanceDimension3 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension3Label><DistributionCodeAccount.FinanceDimension3>OnDistributionCodeAccountOverride"									

							if (DistributionCodeAccount.FinanceDimension4 entered)
								constraint (DistributionCodeAccount.FinanceDimension4 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension4Label><DistributionCodeAccount.FinanceDimension4>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension5 entered)
								constraint (DistributionCodeAccount.FinanceDimension5 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension5Label><DistributionCodeAccount.FinanceDimension5>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension6 entered)
								constraint (DistributionCodeAccount.FinanceDimension6 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension6Label><DistributionCodeAccount.FinanceDimension6>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension7 entered)
								constraint (DistributionCodeAccount.FinanceDimension7 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension7Label><DistributionCodeAccount.FinanceDimension7>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension8 entered)
								constraint (DistributionCodeAccount.FinanceDimension8 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension8Label><DistributionCodeAccount.FinanceDimension8>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension9 entered)
								constraint (DistributionCodeAccount.FinanceDimension9 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension9Label><DistributionCodeAccount.FinanceDimension9>OnDistributionCodeAccountOverride"

							if (DistributionCodeAccount.FinanceDimension10 entered)
								constraint (DistributionCodeAccount.FinanceDimension10 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension10Label><DistributionCodeAccount.FinanceDimension10>OnDistributionCodeAccountOverride"																																																						

							if (DistributionCodeAccount.GeneralLedgerChartAccount entered
							and DistributionCodeAccount.GeneralLedgerChartAccount.AllowUnits.Required)
								AccountRequiresUnits = true




					initialize LocalSubTotal
					initialize LocalInvoiceAmount
					initialize LoopCounter

					while (LoopCounter < 10)
						increment LoopCounter



						if (DistributionArray.SpeedDistribution[LoopCounter].InternationalAmount entered)
							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock entered)
								"DistributionLine_#<LoopCounter>AmountEntered;LineFinanceStructureAlsoRequired"
						
						if (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock entered)
							if (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount.AllowUnits.Required)
								AccountRequiresUnits = true
								constraint (DistributionArray.SpeedDistribution[LoopCounter].UnitAmount entered)
									"DistributionLine#<LoopCounter>:<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountLabel>_<DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount>RequiresUnits"
							if (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount.AllowUnits.No)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].UnitAmount not entered)
									"DistributionLine#<LoopCounter>:<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountLabel>_<DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount>DoesNotAllowUnits"
							
							AccountingEntity 	= DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.ToAccountingEntity

							if (AccountingEntity.ValidSystems entered)		
								constraint (GeneralLedgerSystemCode within AccountingEntity.ValidSystems)
									"InvalidSystemFor<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>"
							
							DistCodeBlockEditor	= DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock








							if (DistCodeBlockEditor.ToAccountingEntity not entered)
								if (GeneralLedgerCompanyRel.AccountingEntity entered)
									DistCodeBlockEditor.ToAccountingEntity 	= GeneralLedgerCompanyRel.AccountingEntity
								else
									if (DistCodeBlockEditor.AccountingEntity entered)
										DistCodeBlockEditor.ToAccountingEntity 	= DistCodeBlockEditor.AccountingEntity

							else
								if (DistCodeBlockEditor.AccountingEntity not entered)
									AccountingEntity 	= DistCodeBlockEditor.ToAccountingEntity

							


							if (DistCodeBlockEditor.AccountingEntity = DistCodeBlockEditor.ToAccountingEntity)
								LocalAccountingEntity	=	DistCodeBlockEditor.ToAccountingEntity

							

							constraint (DistributionArray.SpeedDistribution[LoopCounter].InternationalAmount entered)
								"DistributionLine_#<LoopCounter>FinanceStructureEntered;LineAmountAlsoRequired"
							

							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.ToAccountingEntity entered)
								"DistributionLine_#<LoopCounter>AccountingEntityRequired"
							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.ToAccountingEntity exists)
								"Invalid<Company.FinanceEnterpriseGroup.AccountingEntityLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingEntity>OnDistributionLine_#<LoopCounter>"

							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount entered)
								"DistributionLine_#<LoopCounter>AccountRequired"
							constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount exists)
								"Invalid<Company.FinanceEnterpriseGroup.AccountLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.GeneralLedgerChartAccount>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.AccountingUnitRequired)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingUnit entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.AccountingUnitLabel>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingUnit exists)
									"Invalid<Company.FinanceEnterpriseGroup.AccountingUnitLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.AccountingUnit>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.ProjectRequired)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.Project entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.ProjectLabel>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.Project exists)
									"Invalid<Company.FinanceEnterpriseGroup.ProjectLabel><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.Project>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension1Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension1 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension1Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension1 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension1Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension1>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension2Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension2 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension2Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension2 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension2Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension2>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension3Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension3 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension3Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension3 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension3Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension3>OnDistributionLine_#<LoopCounter>"									

							if (Company.FinanceEnterpriseGroup.FinanceDimension4Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension4 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension4Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension4 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension4Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension4>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension5Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension5 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension5Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension5 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension5Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension5>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension6Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension6 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension6Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension6 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension6Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension6>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension7Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension7 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension7Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension7 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension7Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension7>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension8Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension8 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension8Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension8 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension8Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension8>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension9Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension9 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension9Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension9 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension9Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension9>OnDistributionLine_#<LoopCounter>"

							if (Company.FinanceEnterpriseGroup.FinanceDimension10Required)
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension10 entered)
									"DistributionLine_#<LoopCounter>_<Company.FinanceEnterpriseGroup.FinanceDimension10Label>Required"
								constraint (DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension10 exists)
									"Invalid<Company.FinanceEnterpriseGroup.FinanceDimension10Label><DistributionArray.SpeedDistribution[LoopCounter].FinanceCodeBlock.FinanceDimension10>OnDistributionLine_#<LoopCounter>"																																																						





							if (DistCodeBlockEditor.ToAccountingEntity.ValidSystems entered)
								constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.ToAccountingEntity.ValidSystems)
									"InvalidSystemForPosting<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingEntityLabel>OnDistributionLine_#<LoopCounter>"
							

							if (DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction entered)
								constraint (GeneralLedgerSystemCode within DistCodeBlockEditor.GeneralLedgerChartAccount.Account.SystemRestriction)
									"InvalidSystem<GeneralLedgerSystemCode>ForAccount<DistCodeBlockEditor.GeneralLedgerChartAccount>OnDistributionLine_#<LoopCounter>"


						if (DistributionCode not entered)

							LocalSubTotal += DistributionArray.SpeedDistribution[LoopCounter].InternationalAmount


					
					if (DistributionCode not entered)
						LocalSubTotal += TaxAmount

						if (InvoiceTypeForExpense.CreditMemo)
							if (PrmInvoiceAmount > 0)
								LocalInvoiceAmount = (PrmInvoiceAmount * -1)
								if (LocalSubTotal != LocalInvoiceAmount)
									confirmation required
										"TotalDistributionAmount<LocalSubTotal>IsNotEqualToCreditAmount<LocalInvoiceAmount>;Continue?"
							else
								if (LocalSubTotal != PrmInvoiceAmount)
									confirmation required
										"TotalDistributionAmount<LocalSubTotal>IsNotEqualToCreditMemoAmount<PrmInvoiceAmount>;Continue?"
						else
							if (LocalSubTotal != PrmInvoiceAmount)
								confirmation required
									"TotalDistributionAmount<LocalSubTotal>IsNotEqualToInvoiceAmount<PrmInvoiceAmount>;Continue?"	

					initialize AccountRequiresUnits
					initialize DistCodeBlockEditor

			InitiateRequest Rules

				include RequestNewInvoicePaymentRules


			UpdateRequest Rules

				include RequestNewInvoicePaymentRules


			Exit Rules

				LocalActor = RequesterActor
				invoke CreateNoRules PayablesInvoiceAudit
					invoked.Company			= Company
					invoked.PayablesInvoice	= this instance.PayablesInvoice
					invoked.Resource		= first AgentRel.BusinessObjectRef(Employee).Employee
					invoked.Status			= 20		
					invoked.UpdateDate		= current timestamp
					invoked.Comment			= Notes

				LocalActor = this instance.PayablesInvoice.create stamp.actor
				invoke CreateNoRules PayablesInvoiceAudit
					invoked.Company			= Company
					invoked.PayablesInvoice	= this instance.PayablesInvoice
					invoked.Resource		= first AgentRel.BusinessObjectRef(Employee).Employee
					invoked.Status			= 21		
					invoked.UpdateDate		= current timestamp
					invoked.Comment			= ApproverNotes

				if (Attachment entered)
					invoke Create PayablesInvoiceDocument
						invoked.Company			= Company
						invoked.PayablesInvoice	= this instance.PayablesInvoice
						invoked.Description 	= Invoice
						invoked.DocumentType 	= 1
						invoked.Attachment		= Attachment


		PayablesClaimsAndLiabilities is a Set Action
			default label is untranslatable
			restricted
			run in foreground
			Parameters
				PrmPayablesCompany 	 		  is a PayablesCompany
				PrmReportAsOfDate	 		  is Date
				PrmCountry			 		  is a Country
				PrmCurrency			 		  is a Currency
				PrmClaimsAndLiabilitiesHeader is a ClaimsAndLiabilitiesHeader
				PrmCurrencyTable			  is a CurrencyTable

			Instance Selection
				where (Company 		= PrmPayablesCompany
				and   InvoiceDate  <= PrmReportAsOfDate
				and   (Status.Released
				or    (Status.Historical and last PaymentsHaveBeenAppliedRel.CheckDate > PrmReportAsOfDate))
				and   (OriginCountry entered
				and    OriginCountry not = PrmCountry)
				and    VendorCompanyDefaultRel exists)

			Sort Order
				Company
				Vendor
				PayablesInvoice

			Local Fields
				LocalClaimsLessThan1Year		 	is an InternationalAmount
				LocalClaimsGreaterThan1Year		 	is an InternationalAmount
				LocalClaimsPrePayments		   	 	is an InternationalAmount
				LocalLiabilitiesLessThan1Year	 	is an InternationalAmount
				LocalLiabilitiesGreaterThan1Year 	is an InternationalAmount
				LocalLiabilitiesPrePayments		 	is an InternationalAmount
				LocalTotal							is an InternationalAmount
				LocalFunctionalAmount				is an InternationalAmount
					precision is Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				LocalNetPaymentAmount				is an InternationalAmount
					precision is Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				LocalFunctionalNetPaymentAmount	is an InternationalAmount
					precision is Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals

			Action Rules
				Instance Rules
					LocalClaimsAndLiabilitiesHeader = PrmClaimsAndLiabilitiesHeader

					initialize LocalClaimsLessThan1Year
					initialize LocalClaimsGreaterThan1Year
					initialize LocalClaimsPrePayments
					initialize LocalLiabilitiesLessThan1Year
					initialize LocalLiabilitiesGreaterThan1Year
					initialize LocalLiabilitiesPrePayments
					initialize LocalTotal
					initialize LocalFunctionalAmount
					initialize LocalReportCurrencyExchangeGroup
					initialize LocalNetPaymentAmount
					initialize LocalFunctionalNetPaymentAmount

					for each PaymentsHaveBeenAppliedRel
						if (each.CheckDate <= PrmReportAsOfDate)
							LocalNetPaymentAmount += each.PaymentAmount.CurrencyAmount

					if (InvoiceCurrency = Company.Currency)
						if (Status.Historical)
							LocalFunctionalAmount								= last PaymentsHaveBeenAppliedRel.PaymentAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							LocalFunctionalAmount								= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalFunctionalNetPaymentAmount						= LocalNetPaymentAmount
					else
						LocalReportCurrencyExchangeGroup.CurrencyTable			= PrmCurrencyTable
						LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
						LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= PrmCurrency
						LocalReportCurrencyExchangeGroup.ExchangeDate			= PrmReportAsOfDate
						LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
						LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
						LocalFunctionalAmount									= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

						if (LocalNetPaymentAmount > 0)
							initialize LocalReportCurrencyExchangeGroup
							LocalReportCurrencyExchangeGroup.CurrencyTable			= PrmCurrencyTable
							LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
							LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= PrmCurrency
							LocalReportCurrencyExchangeGroup.ExchangeDate			= PrmReportAsOfDate
							LocalReportCurrencyExchangeGroup.TransactionAmount		= LocalNetPaymentAmount
							LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
							LocalFunctionalNetPaymentAmount							= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

					LocalFunctionalAmount	= LocalFunctionalAmount - LocalFunctionalNetPaymentAmount

					if (InvoiceType.CreditMemo)
						if (DaysFromInvoiceDatetoDueDate > 365)
							LocalClaimsGreaterThan1Year = (LocalFunctionalAmount * -1)
						else
							LocalClaimsLessThan1Year = (LocalFunctionalAmount * -1)

						LocalTotal = (LocalFunctionalAmount * -1)
					else
						LocalTotal = LocalFunctionalAmount

						if (InvoiceType.PrepaymentCredit)
							LocalClaimsPrePayments = LocalFunctionalAmount
						else

						if (InvoiceType.Prepayment
						or  InvoiceType.MatchPrepayment)
							LocalLiabilitiesPrePayments = LocalFunctionalAmount
						else

						if (DaysFromInvoiceDatetoDueDate > 365)
							LocalLiabilitiesGreaterThan1Year = LocalFunctionalAmount
						else
							LocalLiabilitiesLessThan1Year = LocalFunctionalAmount

					if (ClaimsAndLiabilitiesRel exists)
						invoke Update ClaimsAndLiabilitiesRel
						 	if (VendorCompanyDefaultRel.Affiliate)
						 		if (VendorCompanyDefaultRel.AffiliateOwnership.ParentEnterprise)
									invoked.ClaimsLessThan1Year81           = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year81         + LocalClaimsLessThan1Year)
									invoked.ClaimsGreaterThan1Year82        = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year82      + LocalClaimsGreaterThan1Year)
									invoked.ClaimsPrePayments83             = (ClaimsAndLiabilitiesRel.ClaimsPrePayments83           + LocalClaimsPrePayments)
									invoked.LiabilitiesLessThan1Year84      = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year84    + LocalLiabilitiesLessThan1Year)
									invoked.LiabilitiesGreaterThan1Year85   = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year85 + LocalLiabilitiesGreaterThan1Year)
									invoked.LiabilitiesPrePayments86        = (ClaimsAndLiabilitiesRel.LiabilitiesPrePayments86      + LocalLiabilitiesPrePayments)
								else
								if (VendorCompanyDefaultRel.AffiliateOwnership.SubsidiaryEnterprise)
									invoked.ClaimsLessThan1Year87           = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year87 		 + LocalClaimsLessThan1Year)
									invoked.ClaimsGreaterThan1Year88        = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year88 	 + LocalClaimsGreaterThan1Year)
									invoked.ClaimsPrePayments89             = (ClaimsAndLiabilitiesRel.ClaimsPrePayments89 			 + LocalClaimsPrePayments)
									invoked.LiabilitiesLessThan1Year90      = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year90    + LocalLiabilitiesLessThan1Year)
									invoked.LiabilitiesGreaterThan1Year91   = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year91 + LocalLiabilitiesGreaterThan1Year)
									invoked.LiabilitiesPrePayments92        = (ClaimsAndLiabilitiesRel.LiabilitiesPrePayments92      + LocalLiabilitiesPrePayments)
								else
								if (VendorCompanyDefaultRel.AffiliateOwnership.FellowEnterprise)
									invoked.ClaimsLessThan1Year93           = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year93 		 + LocalClaimsLessThan1Year)
									invoked.ClaimsGreaterThan1Year94        = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year94 	 + LocalClaimsGreaterThan1Year)
									invoked.ClaimsPrePayments95             = (ClaimsAndLiabilitiesRel.ClaimsPrePayments95 			 + LocalClaimsPrePayments)
									invoked.LiabilitiesLessThan1Year96      = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year96 	 + LocalLiabilitiesLessThan1Year)
									invoked.LiabilitiesGreaterThan1Year97   = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year97 + LocalLiabilitiesGreaterThan1Year)
									invoked.LiabilitiesPrePayments98        = (ClaimsAndLiabilitiesRel.LiabilitiesPrePayments98 	 + LocalLiabilitiesPrePayments)
							else
								invoked.ClaimsLessThan1Year41           	= (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year41 		 + LocalClaimsLessThan1Year)
								invoked.ClaimsGreaterThan1Year42        	= (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year42 	 + LocalClaimsGreaterThan1Year)
								invoked.ClaimsPrePayments43             	= (ClaimsAndLiabilitiesRel.ClaimsPrePayments43 			 + LocalClaimsPrePayments)
								invoked.LiabilitiesLessThan1Year44      	= (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year44 	 + LocalLiabilitiesLessThan1Year)
								invoked.LiabilitiesGreaterThan1Year45   	= (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year45 + LocalLiabilitiesGreaterThan1Year)
								invoked.LiabilitiesPrePayments46        	= (ClaimsAndLiabilitiesRel.LiabilitiesPrePayments46 	 + LocalLiabilitiesPrePayments)

							invoked.RecordTotal								= (ClaimsAndLiabilitiesRel.RecordTotal + LocalTotal)

					else
						invoke Create ClaimsAndLiabilities
							invoked.Company							= Company
							invoked.ClaimsAndLiabilitiesHeader		= PrmClaimsAndLiabilitiesHeader
							invoked.Country							= OriginCountry
							invoked.RecordTotal						= LocalTotal

							if (VendorCompanyDefaultRel.Affiliate)
								if (VendorCompanyDefaultRel.AffiliateOwnership.ParentEnterprise)
									invoked.ClaimsLessThan1Year81 		    = LocalClaimsLessThan1Year
									invoked.ClaimsGreaterThan1Year82 		= LocalClaimsGreaterThan1Year
									invoked.ClaimsPrePayments83 			= LocalClaimsPrePayments
									invoked.LiabilitiesLessThan1Year84 		= LocalLiabilitiesLessThan1Year
									invoked.LiabilitiesGreaterThan1Year85 	= LocalLiabilitiesGreaterThan1Year
									invoked.LiabilitiesPrePayments86 		= LocalLiabilitiesPrePayments
								else
								if (VendorCompanyDefaultRel.AffiliateOwnership.SubsidiaryEnterprise)
									invoked.ClaimsLessThan1Year87 		    = LocalClaimsLessThan1Year
									invoked.ClaimsGreaterThan1Year88 		= LocalClaimsGreaterThan1Year
									invoked.ClaimsPrePayments89 			= LocalClaimsPrePayments
									invoked.LiabilitiesLessThan1Year90 		= LocalLiabilitiesLessThan1Year
									invoked.LiabilitiesGreaterThan1Year91 	= LocalLiabilitiesGreaterThan1Year
									invoked.LiabilitiesPrePayments92 		= LocalLiabilitiesPrePayments
								else
								if (VendorCompanyDefaultRel.AffiliateOwnership.FellowEnterprise)
									invoked.ClaimsLessThan1Year93 		    = LocalClaimsLessThan1Year
									invoked.ClaimsGreaterThan1Year94 		= LocalClaimsGreaterThan1Year
									invoked.ClaimsPrePayments95 			= LocalClaimsPrePayments
									invoked.LiabilitiesLessThan1Year96 		= LocalLiabilitiesLessThan1Year
									invoked.LiabilitiesGreaterThan1Year97 	= LocalLiabilitiesGreaterThan1Year
									invoked.LiabilitiesPrePayments98 		= LocalLiabilitiesPrePayments
							else
								invoked.ClaimsLessThan1Year41			= LocalClaimsLessThan1Year
								invoked.ClaimsGreaterThan1Year42		= LocalClaimsGreaterThan1Year
								invoked.ClaimsPrePayments43				= LocalClaimsPrePayments
								invoked.LiabilitiesLessThan1Year44      = LocalLiabilitiesLessThan1Year
								invoked.LiabilitiesGreaterThan1Year45   = LocalLiabilitiesGreaterThan1Year
								invoked.LiabilitiesPrePayments46		= LocalLiabilitiesPrePayments

#ifdef module idm
		UpdateIDMAttributes is an Instance Action
			default label is untranslatable
			run in background
			restricted
			Local Fields
				LocalAttrsSearch					is an IDMAttributeOccurs
				LocalColSequence               		is Numeric size 3
				LocalResult							is Boolean

			Action Rules
				LocalAttrsSearch.IDMAttribute[1].IDMAttributeName	= "Company"
				LocalAttrsSearch.IDMAttribute[1].IDMAttributeValue 	= Company
				LocalAttrsSearch.IDMAttribute[2].IDMAttributeName  	= "PayablesInvoice"
				LocalAttrsSearch.IDMAttribute[2].IDMAttributeValue  = PayablesInvoice

				initialize IDMAttributes
				initialize AttributeCtr

				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName  	= "Invoice"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue  	= Invoice
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName  	= "Vendor"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue  	= Vendor
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName  	= "InvoiceType"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue  	= DerivedInvoiceTypeForIDM
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName  	= "PurchaseOrder"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue  	= FirstPurchaseOrder
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName  	= "ProcessLevel"
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue  	= ProcessLevel
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName  	= "Status"
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue  	= DerivedStatusForIDM
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName  	= "InvoiceAmount"
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue  	= InvoiceAmount.CurrencyAmount
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName  	= "CompanyName"
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue  	= Company.Name
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName  	= "VendorName"
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue  	= Vendor.VendorName
				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 10
					include IDM.IDMAdditionalAttributes

				initialize LocalColSequence

				for each distinct DistributionAccount.Project in PayablesInvoiceDistributionRel
					if (LocalColSequence < 100)
						LocalColSequence = LocalColSequence + 1
						IDMAttributes.MultiValue1.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.Project
					else
						end for each

				IDMAttributes.MultiValue1.IDMAttributeName = "Project"

				initialize LocalColSequence

				for each distinct DistributionAccount.AccountingUnit in PayablesInvoiceDistributionRel
					if (LocalColSequence < 100)
						LocalColSequence = LocalColSequence + 1
						IDMAttributes.MultiValue2.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.AccountingUnit
					else
						end for each

				IDMAttributes.MultiValue2.IDMAttributeName = "AccountingUnit"

				IDMAttributes.IDMDocumentType = "FSM_PayablesInvoice"
				IDMAttributes.AttributeSearch = LocalAttrsSearch

				LocalResult = IDMAttributes.ExecuteUpdateAttribute



   		EmailCreditMemoToVendor is an Instance Action
   			valid when (IsValidForIDMEmail)
   			disable multiple instance selection
   			default label is "EmailIDMInvoiceToVendor"
   			completion message is "EmailSent"
   			Local Fields
   				LocalFileName	is Alpha 100
   			Parameters
   				PrmFrom is an EmailAddress
   					default label is "From"
   				PrmTo	is like MultipleEmailAddress 
					holds pii
   					default label is "To"
   				PrmCc	is like MultipleEmailAddress 
					holds pii
	   				default label is "Cc"
   			Parameter Rules
   				PrmFrom
   					initial value is CreditOrDebitFromEmailAddress
   					required
   				PrmTo
   					initial value is Vendor.EmailAddress
   					required
   				PrmCc
   					initial value is DerivedCcEmailAddress

   			Action Rules
   				initialize IDMItem

   				if (InvoiceType.CreditMemo)
					include IDMXMLDefinition
					IDMItem.IDMEmail.Subject = DerivedCompanyEmailSubject
					if (Company.PayablesChargebackEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID = Company.PayablesChargebackEmailTemplate.IDMUniqueId
					else
						IDMItem.IDMEmail.Body = blank

					LocalFileName = DerivedPayablesChargebackFileName
				else 
					include PayablesDebitMemoIDMXMLDefinition
					if (Company.PayablesDebitMemoEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID = Company.PayablesDebitMemoEmailTemplate.IDMUniqueId
					else
						IDMItem.IDMEmail.Body = blank

					LocalFileName = DerivedPayablesDebitMemoFileName
					IDMItem.IDMEmail.Subject = DerivedCompanyEmailSubject

				if (IDMItem.IDMEmail.Subject not entered)
					IDMItem.IDMEmail.Subject = DerivedEmailSubject

				IDMItem.DocumentType  	 = "FSM_PayablesInvoice"
				IDMItem.IDMXMLDefinition = IDMGenerateDocument.IDMXMLDefinition
				IDMItem.IDMUniqueId	  	 = IDMDocumentPID
				IDMItem.IDMEmail.From 	 = PrmFrom
				IDMItem.IDMEmail.To   	 = PrmTo
				IDMItem.IDMEmail.Cc		 = PrmCc


				constraint (IDMItem.GetItemDetails)
					"DocumentDoesNotExistInIDM"

				IDMItem.IDMPID     		 = IDMItem.IDMItemDetails.PID

				invoke SendToEmail IDMJob
					invoked.Description   = EmailNotificationMsg
					invoked.FileName      = LocalFileName
					invoked.IDMItem		  = IDMItem

#endif

		GenerateChargeback	is an Instance Action
			default label is "GenerateCreditMemo"
			valid when (ValidForGeneratingChargeback)
			Action Rules
				invoke GenerateChargebackInIDM
					invoked.PrmIncludeReceiptDetail = "Y"
					invoked.PrmPrintComments		= "Y"
					invoked.PrmActionSource			= "O"
					if (Company.PrintPayablesChargeback)
						invoked.PrmIDMPrinter 		= IDMPrinter

		GenerateChargebackWithPrint	is an Instance Action
			restricted
			Action Rules


		GenerateChargebackInIDM is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmIncludeReceiptDetail is AlphaUpper 1
					States
						No value is "N"
						Yes value is "Y"
				PrmPrintComments           is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmActionSource				is AlphaUpper 1
					States
						Online 	value is "O"
						Batch 	value is "B"
				PrmIDMPrinter			is an IDMPrinter

			Parameter Rules
				PrmIncludeReceiptDetail
					initial value is "Y"
					default to "Y"

				PrmPrintComments
					initial value is "Y"
					default to "Y"

			Local Fields


				IDMJobView	 		is an IDMJob view

			Action Rules
				LocalIncludeReceiptDetail	= PrmIncludeReceiptDetail
				LocalPrintComments			= PrmPrintComments
				LocalIDMPrinter				= PrmIDMPrinter
				if (Status.Cancelled)
					TransientIDMWatermark 	= "Cancelled"


				include PayablesInvoiceDocumentGeneration

				invoke CreateFromGenerateDocument IDMJob
					assign result to IDMJobView
					invoked.Actor				= actor
					invoked.Description			= "Payables Chargeback"
					invoked.IDMGenerateDocument	= IDMGenerateDocument

				IDMJob = IDMJobView.IDMJob

				PrintChargeback = true

				invoke UpdateIDMDocumentPID in background
					run after IDMJob.AsyncId

				invoke UpdateEmailSentFlag in background
					run after IDMJob.AsyncId

				invoke SendIDMNotifications



		UpdateIDMDocumentPID is an Instance Action
			restricted
			Action Rules
				if (IDMJob.MDSID entered)
					invoke FastUpdate
						invoked.IDMDocumentPID = IDMJob.MDSID

		UpdateEmailSentFlag is an Instance Action
			restricted
			Action Rules
				if (IDMJob.EmailStatus.Finished)
					invoke FastUpdate
						invoked.IDMInvoiceSentToVendor = true



		PrintChargebacksByBatchInIDM is a Set Action

			completion message is "SuccessfullyGeneratedChargebacksForCompany<PrmCompany>"
			Parameters
				PrmCompany					is a PayablesCompany
					default label is "Company"
				PrmVendor					is a Vendor
					default label is "Vendor"
				PrmFirstChargeback			is a PayablesInvoice
					default label is "Chargeback"
				PrmSecondChargeback			is a PayablesInvoice
				PrmThirdChargeback			is a PayablesInvoice
				PrmFourthChargeback			is a PayablesInvoice
				PrmFromDate					is Date
				PrmToDate					is Date
				PrmStatus					is Numeric size 1
					default label is "Status"
					States
						All 	value is 0
						Open 	value is 1
						Paid 	value is 9
				PrmPrintComments           	is AlphaUpper size 1
					default label is "InvoiceComments"
					States
						No  value is "N"
						Yes value is "Y"
				PrmIncludeReceiptDetail 	is AlphaUpper 1
					default label is "ReceiptDetails"
					States
						No 	value is "N"
						Yes value is "Y"
				PrmIncludePreviouslyPrinted	is AlphaUpper 1
					default label is "PreviouslyPrintedChargebacks"
					States
						No 	value is "N"
						Yes value is "Y"
				PrmIncludeChargebacksOnHold	is AlphaUpper 1
					default label is "ChargebacksOnHold"
					States
						No 	value is "N"
						Yes value is "Y"
				PrmIncludeManualChargebacks	is AlphaUpper 1
					default label is "ManualChargebacks"
					States
						No 	value is "N"
						Yes value is "Y"
				PrmIDMPrinter			is an IDMPrinter
					default label is "IDM_Printer"

			Parameter Rules
				PrmCompany
					required
					constraint (PrmCompany.UseIDM)
						"CompanyMustBeUsing_\I\D\MToProcessChargebacks"
				PrmFromDate
					if (PrmToDate entered)
						required
							"StartOfInvoiceDateRangeIsRequired"
						constraint (PrmFromDate <= PrmToDate)
							"StartingDateMustBeLessThanEndingDate"
				PrmToDate
					if (PrmFromDate entered)
						required
							"EndOfInvoiceDateRangeIsRequired"
						constraint (PrmToDate >= PrmFromDate)
							"EndingDateMustBeGreaterThanStartingDate"
				PrmVendor
					if (PrmFirstChargeback entered
					or  PrmSecondChargeback entered
					or  PrmThirdChargeback entered
					or  PrmFourthChargeback entered)
						required
							"VendorIsRequiredForWhenPrintingSpecificInvoices"
				PrmStatus
					initial value is 0
					default to 0
				PrmPrintComments
					initial value is "N"
					default to "N"
				PrmIncludeReceiptDetail
					initial value is "N"
					default to "N"
				PrmIncludePreviouslyPrinted
					initial value is "N"
					default to "N"
				PrmIncludeChargebacksOnHold
					initial value is "N"
					default to "N"
				PrmIncludeManualChargebacks
					initial value is "N"
					default to "N"
				PrmIDMPrinter
					initial value is PrmCompany.UserDefaultPrinterRel.IDMPrinter

			Instance Selection
				where (Company	= PrmCompany
				and   (PrmVendor not entered or (PrmVendor entered and Vendor = PrmVendor))
				and	  ((PrmFirstChargeback not entered and PrmSecondChargeback not entered and PrmThirdChargeback not entered and PrmFourthChargeback not entered)
				or	   (PayablesInvoice = PrmFirstChargeback
					or  PayablesInvoice = PrmSecondChargeback
					or  PayablesInvoice = PrmThirdChargeback
					or  PayablesInvoice = PrmFourthChargeback))
				and    ValidForGeneratingChargeback
				and   ((PrmIncludePreviouslyPrinted.No and not PrintChargeback) or PrmIncludePreviouslyPrinted.Yes)
				and   ((PrmIncludeChargebacksOnHold.No and not IsOnHold) or PrmIncludeChargebacksOnHold.Yes)
				and   ((PrmIncludeManualChargebacks.No and MatchObjectID entered) or PrmIncludeManualChargebacks.Yes)
				and   ((not PrmStatus.All and PrmStatus = Status) or PrmStatus.All)
				and   ((PrmFromDate not entered and PrmToDate not entered)
					or (PrmFromDate entered and PrmToDate entered
					and InvoiceDate >= PrmFromDate
					and InvoiceDate <= PrmToDate)))

			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoChargebackDocumentsToBeProcessedForCompany_<PrmCompany>"
						priority is high
						detail is "NoRecordsToProcessForPayablesChargeback.PleaseCheckTheParametersAndRunTheBatchProgramAgain."

				Instance Rules
					invoke GenerateChargebackInIDM
						invoked.PrmIncludeReceiptDetail = PrmIncludeReceiptDetail
						invoked.PrmPrintComments		= PrmPrintComments
						invoked.PrmActionSource			= "B"
						invoked.PrmIDMPrinter			= PrmIDMPrinter


		ProcessTaxOnHold is an Instance Action		
			valid when (ProcessTaxOnHoldValid)
			Parameters
				PrmFunction 				is Numeric 1
					default label is "Function"
					States
						PayAsBilled			value is 1
						ShortPayAndAccrue	value is 2
			Parameter Rules
				PrmFunction
					required
			Action Rules

				if (IsOnHold)
					invoke TakeInvoiceOffHold
				if (PrmFunction.ShortPayAndAccrue)
					TaxToleranceHoldProcess		= TaxToleranceHoldProcess.ShortPay

				else	
					TaxToleranceHoldProcess		= TaxToleranceHoldProcess.PayAsBilled

				invoke Update PayablesInvoiceTaxRel
					invoked.EnteredTaxAmount		= TaxAmount
					invoked.EnteredTaxableAmount	= TaxableAmount
				if (PrmFunction.PayAsBilled
				or  PrmFunction.ShortPayAndAccrue)

					if (ReleaseActionValid)
						invoke Unreleased.Release
					else
						invoke Unreleased.SubmitForApproval






		ShortPayAndAccrueTax is an Instance Action		
			valid when (ShortPayAndAccrueTaxValid)
			Parameters
				PrmAccruedTaxCode	is a TaxCode
					default label is "AccruedTaxCode"
			Parameter Rules
				PrmAccruedTaxCode
					required
					if (TaxEntityRel.UseTaxCodeAccounts)
						LocalTaxCode	= PrmAccruedTaxCode
						constraint (!LocalEntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
							"TaxCodeMustBeAccrued"
					else
						constraint (!TaxEntityRel.AccruedOrInvoiced.Invoiced)
							"TaxCodeMustBeAccrued"

			Local Fields
				LocalLinked			is Boolean
				LocalTaxableAmount	is a CurrencyAmount

			Action Rules





				LocalLinked = PayablesInvoiceTaxRel.LinkedToDistributions

				InvoiceAmount.CurrencyAmount   -= TaxAmount		
				if (TaxableAmount entered
				and InvoiceAmount.CurrencyAmount < TaxableAmount)
					TaxableAmount = InvoiceAmount.CurrencyAmount

				initialize TaxAmount		

				invoke UpdatePIT
					invoked.Function			= 2		
					initialize invoked.PrmEntTaxAmt

				if (PayablesInvoiceTaxRel.TaxDetails.TaxableAmount entered)
					LocalTaxableAmount		= PayablesInvoiceTaxRel.TaxDetails.TaxableAmount
				else
					LocalTaxableAmount		= PayablesInvoiceTaxRel.TaxSystemTaxableAmount



				include RefreshCurrenciesForShortPay			


				if (AllowableAmountForDiscount entered
				and AllowableAmountForDiscount > InvoiceAmount.CurrencyAmount)
					AllowableAmountForDiscount		= InvoiceAmount.CurrencyAmount
					DiscountAmount.CurrencyAmount 	= AllowableAmountForDiscount * DiscountPercent
					include ProcessTierDiscounts

				invoke UpdatePaymentAmt first PayablesInvoicePaymentRel
					invoked.PaymentAmount.CurrencyAmount	= InvoiceAmount.CurrencyAmount
					invoked.PaymentAmount.ExchangeDate		= InvoiceAmount.ExchangeDate
					invoked.TransientCurrencyRefresh		= true

				initialize TotalPaymentAmount										
				initialize TotalPaymentAmount.OldCurrencyAmount						
				TotalPaymentAmount.TransactionTotal = InvoiceAmount.CurrencyAmount	
				TotalPaymentAmount.NewCurrencyAmount = InvoiceAmount				
				TotalPaymentAmount.PerformUpdate	  = true						
				LocalBoolean = TotalPaymentAmount.UpdateTotals						


				invoke TakeInvoiceOffHold




				invoke DeleteTaxCode





				if (!LocalLinked)

					for each TotalTran1TaxableDistributionRel			

						if (each.TaxCode entered)

							invoke FastUpdate each
								initialize invoked.TaxCode
								initialize invoked.TaxRate
								initialize invoked.TaxType






				invoke ChangeTaxCode
					invoked.NewTaxCode		= PrmAccruedTaxCode
					invoked.TaxableAmt		= LocalTaxableAmount
					invoked.LinkTax			= LocalLinked





				invoke CreateShortPayCommentAction


		ProcessTaxOnHoldForMatch is an Instance Action
			default label is "ProcessTaxOnHold"
			valid when (ProcessTaxOnHoldValidForMatch)
			Parameters
				PrmFunction 				is Numeric 1
					default label is "Function"
					States
						PayAsBilled			value is 1
						ShortPayAndAccrue	value is 2
			Parameter Rules
				PrmFunction
					required
			Action Rules

				if (IsOnHold)
					invoke TakeInvoiceOffHold

				if (PrmFunction.ShortPayAndAccrue)
					confirmation required
						"ThisActionWillDeductTheTaxFromTheInvoiceAmountAndRemoveTheTaxAmount.Continue?"
					constraint (AllowShortPayAndAccrueAction)
						"ActionIsNotAllowed"
					BackgroundProcessing = BackgroundProcessing.MatchInvoice
					invoke OneSourceShortPayUpdate
					invoke CreateShortPayCommentAction
					invoke OneSourceMatch
				else
				if (PrmFunction.PayAsBilled)
					BackgroundProcessing = BackgroundProcessing.MatchInvoice
					invoke PayAsBilled PayablesInvoiceDetail
						invoked.PrmCompany = Company
						invoked.PrmPayablesInvoice = PayablesInvoice


		UpdateInterfaceAnalysisDetails is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmInterfaceAnalysis is like InterfaceAnalysis
			Instance Selection
				where ((MatchProcessType.Expense
				and    !InterfaceInProcess
				and	   (Status.Unreleased
				or      Status.PendingApproval
				or      Status.Approved))
				or     (!MatchProcessType.Expense
				and     MatchStatus.Unmatched))

			Local Fields
				LocalDateRange			is a DateRange
				LocalPrmPayablesTotal	is like InternationalAmount

			Sort Order is Set6

			Action Rules
				InvoiceDate Set Rules
					Entrance Rules
						LocalPrmPayablesTotal = blank

					Exit Rules
						LocalInterfaceAnalysis		= PrmInterfaceAnalysis
						if (InterfaceAnalysisDetailRel exists)
							invoke UpdateInterfaceAnalysisDetails InterfaceAnalysisDetailRel
								invoked.PrmPayablesTotal		= LocalPrmPayablesTotal
						else
							LocalDateRange.Begin	= InvoiceDate - InvoiceDate day + 1
							LocalDateRange.End		= LocalDateRange.Begin + 1 month - 1 day

							invoke Create InterfaceAnalysisDetail
								resume on error
								invoked.InterfaceAnalysis		= LocalInterfaceAnalysis
								invoked.PayablesCompany			= Company
								invoked.Vendor					= Vendor
								invoked.Currency				= InvoiceCurrency
								invoked.MonthYear				= LocalDateRange

								invoked.PayablesTotal			= LocalPrmPayablesTotal					

				Instance Rules
					LocalPrmPayablesTotal += InvoiceAmount.CurrencyAmount


		UpdateInvoicesRequiringApproval is a Set Action		

			completion message is "InvoicesHaveBeenUpdated"
			Parameters
				PrmCompany				is a PayablesCompany
					default label is "Company"
			Instance Selection
				where ((PrmCompany		not entered
				or	   (PrmCompany		entered
				and     Company			= PrmCompany))
				and     Status.Unreleased)
			Sort Order is ByProcessingStatus
			Action Rules
				Instance Rules
					if (RoutingRuleFound)
						RequiresApproval = true
					else
						RequiresApproval = false

		SendIDMNotifications is an Instance Action
			default label is untranslatable
			restricted
			Action Rules

				initialize LocalActor
				LocalActor = first PayablesInvoiceOriginalRel.Buyer.BuyerActor
				if (LocalActor entered)
					send notification
						to LocalActor
						description is "PayablesChargebackIDMDocumentGenerationSuccessful."
						priority is high
						detail is "PayablesChargebackCompleted.File<IDMGenerateDocument.FileName>IsAvailableToViewInIDM.RefreshTheIDM_JobListToViewTheLatestDocument."


				initialize LocalActor
				LocalActor = APClerk.FinanceResourceActor
				if (LocalActor entered)
					send notification
						to LocalActor
						description is "PayablesChargebackIDMDocumentGenerationSuccessful."
						priority is high
						detail is "PayablesChargebackCompleted.File<IDMGenerateDocument.FileName>IsAvailableToViewInIDM.RefreshTheIDM_JobListToViewTheLatestDocument."


				initialize LocalActor
				LocalActor = first PayablesInvoiceOriginalRel.ApproverFinanceResourceRel.FinanceResourceActor
				if (LocalActor entered)
					send notification
						to LocalActor
						description is "PayablesChargebackIDMDocumentGenerationSuccessful."
						priority is high
						detail is "PayablesChargebackCompleted.File<IDMGenerateDocument.FileName>IsAvailableToViewInIDM.RefreshTheIDM_JobListToViewTheLatestDocument."

		GenerateDebitMemoInIDM is an Instance Action
			default label is "GenerateDebitMemo"
			valid when (ValidForGeneratingDebitMemo)

			Local Fields
				IDMAttributes
				LocalColSequence	is Numeric size 3
				IDMJobView			is an IDMJob view

			Action Rules
				include PayablesDebitMemoIDMXMLDefinition
				initialize AttributeCtr
				initialize IDMAttributes
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName	= "Company"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue	= Company
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName	= "Vendor"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue	= Vendor
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName	= "PayablesInvoice"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue	= PayablesInvoice
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName	= "InvoiceType"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue	= DerivedInvoiceTypeForIDM
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName	= "Invoice"
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue	= Invoice
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName	= "Status"
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue	= DerivedStatusForIDM
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName	= "PurchaseOrder"
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue	= FirstPurchaseOrder
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName	= "InvoiceAmount"
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue	= InvoiceAmount.CurrencyAmount


				initialize LocalColSequence
				IDMAttributes.MultiValue1.IDMAttributeName = "Project"
				for each distinct DistributionAccount.Project in PayablesInvoiceDistributionRel
					if (LocalColSequence < 100)
						LocalColSequence = LocalColSequence + 1
						IDMAttributes.MultiValue1.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.Project
					else
						end for each

				initialize LocalColSequence
				IDMAttributes.MultiValue2.IDMAttributeName = "AccountingUnit"
				for each distinct DistributionAccount.AccountingUnit in PayablesInvoiceDistributionRel
					if (LocalColSequence < 100)
						LocalColSequence = LocalColSequence + 1
						IDMAttributes.MultiValue2.IDMAttributeValueOccurs.IDMAttributeValue[LocalColSequence] = each.DistributionAccount.AccountingUnit
					else
						end for each


				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName  	= "ProcessLevel"
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue  	= ProcessLevel
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName  	= "Suffix"
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeValue  	= blank
				IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeName  	= "CompanyName"
				IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeValue  	= Company.Name
				IDMAttributes.SingleValue.IDMAttribute[12].IDMAttributeName  	= "VendorName"
				IDMAttributes.SingleValue.IDMAttribute[12].IDMAttributeValue  	= Vendor.VendorName

				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 13
					include IDM.IDMAdditionalAttributes

				IDMGenerateDocument.IDMAttributes		= IDMAttributes
				IDMGenerateDocument.TemplateUniqueId	= Company.PayablesDebitMemoTemplate.IDMUniqueId
				IDMGenerateDocument.DocumentType		= "FSM_PayablesInvoice"
				IDMGenerateDocument.FileName			= DerivedPayablesDebitMemoFileName + Company.PayablesDebitMemoTemplate.DerivedOutputFormat

				IDMGenerateDocument.IDMAccessControlList = "CSFDefined"


				if (Company.EmailPayablesDebitMemo
				and Vendor.AutomaticEmailingOfDebitMemo
				and Vendor.EmailAddress entered
				and IsVendorPrimaryContactEmailDebitMemoEnabled)

					IDMGenerateDocument.IDMEmail.From				= Company.PayablesDebitMemoFromAndReplyToEmail
					IDMGenerateDocument.IDMEmail.To					= Vendor.EmailAddress
					IDMGenerateDocument.IDMEmail.Cc					= DerivedCcEmailAddress

					if (Company.PayablesDebitMemoIDMEmailSubject entered)
						IDMGenerateDocument.IDMEmail.Subject		= DerivedCompanyEmailSubject
					else
						IDMGenerateDocument.IDMEmail.Subject		= DerivedEmailSubject

					if (Company.PayablesDebitMemoEmailTemplate entered)
						IDMGenerateDocument.EmailTemplateUniqueID	= Company.PayablesDebitMemoEmailTemplate.IDMUniqueId
					else
						IDMGenerateDocument.IDMEmail.Body			= ""

				if (Company.PrintPayablesDebitMemo)
					IDMGenerateDocument.IDMPrinter = IDMPrinter 


				invoke CreateFromGenerateDocument IDMJob
					assign result to IDMJobView
					invoked.Actor				= actor
					invoked.Description			= "Payables Debit Memo"
					invoked.IDMGenerateDocument	= IDMGenerateDocument

				IDMJob = IDMJobView.IDMJob

				invoke UpdateIDMDocumentPID in background
					run after IDMJob.AsyncId

				invoke UpdateEmailSentFlag in background
					run after IDMJob.AsyncId


		PrintInvoice is an Instance Action
			valid when (IsValidForIDMPrint)
			Parameters
				PrmIDMPrinter		is an IDMPrinter
					default label is "IDMPrinter"

			Parameter Rules
				PrmIDMPrinter
					initial value is IDMPrinter
					default to IDMPrinter
					required

			Action Rules
				initialize IDMItem
				IDMItem.DocumentType = "FSM_PayablesInvoice"
				IDMItem.IDMUniqueId	 = IDMDocumentPID
				IDMItem.IDMPrinter	 = PrmIDMPrinter

				constraint (IDMItem.GetItemDetails)
					"DocumentDoesNotExistInIDM"

				IDMItem.IDMPID       = IDMItem.IDMItemDetails.PID
				IDMItem.FileName     = IDMItem.IDMItemDetails.FileName

				invoke SendToPrinter IDMJob
					invoked.Description = "Print Invoice"
					invoked.FileName	= IDMItem.FileName
					invoked.IDMItem		= IDMItem


		ReallocateDistributionsForFundAccounting is a Set Action
			restricted
			default label is untranslatable
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
				PrmPostDate					is Date
					default label is "PostDate"
			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    Status.Released
				and   !InvoiceSource.IntercompanyBilling
				and   !InvoiceType.Prepayment
				and   !InvoiceType.MatchPrepayment)
			Local Fields
				PerformCommit is Boolean
			Action Rules
				Instance Rules
					PerformCommit	= false
					LocalPostDate	= PrmPostDate
					if (!ExpenseAccrualFundReallocated)

						PerformCommit		= true
						LocalReverseAccrual = true
						LocalReallocate 	= true
						include CreateAccrualOffset

						LocalReallocate 	= true
						for each PayablesInvoiceDistributionRel
							if (each.DistributionType.Distribution
							and (each.IsAccruedVATTax
							or   each.IsAccruedTaxDistribution))
								LocalTaxAccrualAmount				= each.DistributionAmount.CurrencyAmount * -1
								LocalTaxDistributionAmount			= each.DistributionAmount * -1
								LocalPayablesInvoiceDistribution	= each.PayablesInvoiceDistribution
								if (TaxAccrualUsesTaxEntity)
									LocalTaxEntity		  = each.DistributionAccount.ToAccountingEntity
								include CreateTaxAccrualOffset


						LocalReverseAccrual = false
						LocalReallocate = false
						include CreateAccrualOffset

						LocalReallocate = false
						for each PayablesInvoiceDistributionRel
							if (each.DistributionType.Distribution
							and (each.IsAccruedVATTax
							or   each.IsAccruedTaxDistribution))
								LocalTaxAccrualAmount				= each.DistributionAmount.CurrencyAmount
								LocalTaxDistributionAmount			= each.DistributionAmount
								LocalPayablesInvoiceDistribution	= each.PayablesInvoiceDistribution
								if (TaxAccrualUsesTaxEntity)
									LocalTaxEntity		  = each.DistributionAccount.ToAccountingEntity
								include CreateTaxAccrualOffset


						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformFundAmountEdit
						if (CashCode.EditAvailableFunds)
							invoke UpdateCommittedFunds CashCodeFundEditRel

					if (!PaymentAccrualFundReallocated
					and AmountPaid entered)
						PerformCommit = true
						for each HistoricalPayablesInvoicePaymentRel
							invoke ReverseDistributionsForPaymentReinstatement each
								invoked.PrmReallocate	= true
								invoked.PrmPostDate		= PrmPostDate

						for each PayablesInvoiceDistributionPaymentRel
							invoke ReverseDistribution each
								invoked.PrmReallocate		= true
								invoked.PrmReversalPostDate	= PrmPostDate

						for each HistoricalPayablesInvoicePaymentRel
							invoke CreatePaymentAccrualDistribution each
								invoked.PrmDescription 					= PaymentAccrualMessage
								invoked.PrmPostDate						= PrmPostDate
							if (each.DiscountAmount.CurrencyAmount entered)
								invoke CreateDiscountDistribution each
									invoked.PrmDescription				= CashDiscountMessage
									invoked.PrmPostDate					= PrmPostDate
							if (each.WithholdingAmount				entered
							or  each.FATCATransactionIncomeAmount	entered)
								invoke CreateWithholdingDistribution each
									invoked.PrmDescription				= IncomeWithholdingAccrualMessage
									invoked.PrmPostDate					= PrmPostDate
							if (each.SecondaryWithholdingTransactionAmount1	entered)
								invoke CreateSecondaryWithholdingDistribution each
									invoked.PrmDescription				= SecondaryWithholdingAccrualMessage
									invoked.PrmSecondaryWithholding		= 1
									invoked.PrmPostDate					= PrmPostDate
							if (each.SecondaryWithholdingTransactionAmount2	entered)
								invoke CreateSecondaryWithholdingDistribution each
									invoked.PrmDescription				= SecondaryWithholdingAccrualMessage
									invoked.PrmSecondaryWithholding		= 2
									invoked.PrmPostDate					= PrmPostDate
							if (each.SecondaryWithholdingTransactionAmount3	entered)
								invoke CreateSecondaryWithholdingDistribution each
									invoked.PrmDescription				= SecondaryWithholdingAccrualMessage
									invoked.PrmSecondaryWithholding		= 3
									invoked.PrmPostDate					= PrmPostDate

					if (PerformCommit)
						commit transaction

		PurgeInvoices is a Set Action
			restricted
			Parameters
				PrmCompany					is a PayablesCompany
				PrmFromVendorInv			is a Vendor
				PrmToVendorInv				is a Vendor
				PrmInvCutoffDate			is Date

			Parameter Rules
				PrmCompany
					required
				PrmInvCutoffDate
					required

			Local Fields
				InvoiceDateYear is Year
				LocalSkip		is Boolean
				CurrentDate		is Date
				LocalSetPurgeCount is Numeric 10

			Instance Selection
				include deleted records
				where (Company = PrmCompany
				and   ((PrmFromVendorInv not entered and PrmToVendorInv not entered)
				or    (PrmFromVendorInv not entered and PrmToVendorInv entered and Vendor <= PrmToVendorInv)
				or    (PrmFromVendorInv entered and PrmToVendorInv entered and Vendor >= PrmFromVendorInv and Vendor <= PrmToVendorInv))
				and   InvoiceDate <= PrmInvCutoffDate
				and   (Status = 6 or Status = 9)
				and   !InvoiceSource.IntercompanyBilling)
				
			Set Is
				PrmCompany

			Action Rules
				Empty Set Rules
					LocalActor = actor
					send notification
						to LocalActor
						description is "NoPayablesInvoiceRecordsFoundToPurgeForCompany<PrmCompany>"
						priority is high
						detail is "ThereAreNoPayablesInvoiceRecordsPurged"
				Set Rules	
					Exit Rules
							LocalActor = actor
							LocalPurgeCount = LocalSetPurgeCount
							send notification
								to LocalActor
								description is "PurgeInvoicesHasBeenCompletedForCompany<PrmCompany>"
								priority is high
								detail is "<DerivedPurgeCompletionDetailText>"
							
				Instance Rules
					initialize LocalSkip
					LocalInvoiceCutOffDate = PrmInvCutoffDate

					if (IncomeCode entered)
						InvoiceDateYear	= InvoiceDate year
						CurrentDate		= current corporate date
						if (InvoiceDateYear = CurrentDate year)
							LocalSkip	= true
					
					if (!LocalSkip
					and PayablesInvoicePaymentsRel not exists

					and PayablesDistributionNotToPurgeRel not exists)
						include PurgeInvoiceData
						LocalSetPurgeCount +=1

		PurgeOneTimeInvoices is a Set Action
			restricted
			Parameters
				PrmCompany	is a PayablesCompany
				PrmVendor	is a Vendor

			Instance Selection
				include deleted records
				where	(Company	= PrmCompany
				and		Vendor 	= PrmVendor
				and		Status	= 9)
			Action Rules
				Instance Rules
					include PurgeInvoiceData

		CancelVendorDebtCreditMemo is an Instance Action		
			restricted
			default label is untranslatable
			Parameters
				PrmCancelDate				is Date
			Action Rules
				if (PayablesInvoice.IsValidForNonIDMCancel)
					invoke Released.Cancel PayablesInvoice
						invoked.subject					= "CancelInvoice"
						invoked.reason code				= reason code
						invoked.action comment			= "Cancel due to reset parameters"
						invoked.InvoiceCancelDate		= PrmCancelDate
				else
					invoke Released.IDMCancel PayablesInvoice
						invoked.PrmInvoiceCancelDate	= PrmCancelDate
						invoked.PrmReasonCode			= reason code
						invoked.PrmComment				= "Cancel due to reset parameters"

		ModifySubmittedInvoice is an Instance Action		//	"PendingApproval" state
			restricted
			valid when (RerouteValid)
			completion message is "InvoiceRestored"
			Parameters
				CommentPrm is Alpha size up to 500
					default label is "Comment"
				RoutingCategoryPrm is an InvoiceRoutingCategory
					default label is "InvoiceRoutingCategory"
				ApprovalCostCenterPrm is like AccountingUnit
					default label is "ApprovalCostCenter"
				ApprovalCategoryPrm is Alpha 20
					default label is "ApprovalCategory"
				RoutingFinanceTeamPrm is a FinanceTeam
					default label is "RoutingFinanceTeam"
				RoutingFinanceTeamMemberPrm is a FinanceTeamMember
					default label is "RoutingTeamMember"

			Parameter Rules
				RoutingCategoryPrm
					initial value is RoutingCategory
				ApprovalCostCenterPrm
					initial value is ApprovalCostCenter
				ApprovalCategoryPrm
					initial value is ApprovalCategory
				RoutingFinanceTeamPrm
					initial value is RoutingFinanceTeam
				RoutingFinanceTeamMemberPrm
					initial value is RoutingFinanceTeamMember.TeamMember
				CommentPrm
					initial value is last ReroutedPayablesInvoiceAuditRel.Comment
						when (Status.Unreleased)

			Action Rules
				if (RoutingCategory = RoutingCategoryPrm
				and ApprovalCostCenter = ApprovalCostCenterPrm
				and ApprovalCategory = ApprovalCategoryPrm
				and RoutingFinanceTeam = RoutingFinanceTeamPrm
				and RoutingFinanceTeamMember.TeamMember = RoutingFinanceTeamMemberPrm)
					confirmation required
						"NoInformationHasBeenChanged.AreYouSureYouWantToContinue?"

				if (Status.Unreleased)
					invoke Update last ReroutedPayablesInvoiceAuditRel
						invoked.UpdateDate				= current timestamp
						invoked.Comment					= CommentPrm
						invoked.InvoiceRoutingCategory	= RoutingCategoryPrm

				if (Status.PendingApproval)
					invoke CreateNoRules PayablesInvoiceAudit
						invoked.Company					= Company
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.Resource				= actor.agent(Employee).Employee
						invoked.Status					= 19		
						invoked.UpdateDate				= current timestamp
						invoked.Comment					= CommentPrm
						invoked.InvoiceRoutingCategory	= RoutingCategoryPrm

					include PerformBudgetEditsForReject
					cancel InvoiceApproval process
					include ResetFieldsForRestore

				RoutingCategory = RoutingCategoryPrm
				ApprovalCostCenter = ApprovalCostCenterPrm
				ApprovalCategory = ApprovalCategoryPrm
				RoutingFinanceTeam = RoutingFinanceTeamPrm
				RoutingFinanceTeamMember.TeamMember = RoutingFinanceTeamMemberPrm

			Exit Rules
				make transition to Unreleased

		SubmitModifiedInvoice is an Instance Action

			restricted
			completion message is "InvoiceSubmittedForApproval"
			valid when (SubmitActionValid)
			Parameters
				ApprovalOptions		is AlphaUpper 1
					States
						ApprovalCode		value is "C"
						ApprovalCodeGroup	value is "G"
				RoutingCodePrm		is a InvoiceRoutingCode
					default label is "ApprovalCode"
				PrmRoutingCodeGroup	is a InvoiceRoutingCodeGroup
					default label is "ApprovalCodeGroup"
				CommentPrm			is Alpha size up to 500
					default label is "Comment"
			Action Rules
				invoke Unreleased.SubmitForApproval
					invoked.ApprovalOptions		= ApprovalOptions
					invoked.RoutingCodePrm		= RoutingCodePrm
					invoked.PrmRoutingCodeGroup	= PrmRoutingCodeGroup		
					invoked.CommentPrm			= CommentPrm

		AddContract is an Instance Action
			default label is "AddContract"
			valid when (AllowAddContract) 
			Parameters 
				AdditionalContract is a Contract 
			Parameter Rules 
				AdditionalContract 
					required 
			Action Rules 
				if (ThisMatchServiceContractInvoiceRel not exists)
					invoke Create MatchServiceContractInvoice
						invoked.Company						= Company
						invoked.Contract 					= ServiceContract 
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.VendorGroup 				= Company.VendorGroup 

				invoke Create MatchServiceContractInvoice
					invoked.Company						= Company
					invoked.Contract 					= AdditionalContract  
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.VendorGroup 				= Company.VendorGroup 

		RemoveRetainage is an Instance Action
			valid when (HasRetainage)
			Action Rules

				constraint (!CancelledOrPostedDistributionsRel exists)
					"CannotRemoveRetainageIfThereArePostedDistributions"
				constraint (!PaymentsBeyondOpenStatusRel exists)
					"CannotRemoveRetainageIfPaymentsHaveBeenMade"

				if (FirstPurchaseOrder entered
				and FirstPurchaseOrder.RetainagePercentCompleteTracking entered)
					confirmation required
						"Warning:ThereIsRetainageOnThePurchaseOrder.ContinueWithRemovingRetainageOnThisInvoice?"
				else 
				if  (ServiceContract entered
				and  ServiceContract.RetainagePercentCompleteTracking entered)
					confirmation required
						"Warning:ThereIsRetainageOnTheServiceContract.ContinueWithRemovingRetainageOnThisInvoice?"
				
				initialize RetainageAccrualCode 
				initialize RetainageAmount 
				initialize BaseRetainageAmount 
				initialize RetainagePaymentAmount 
				initialize BaseRetainagePaymentAmount 

				invoke Purge PayablesInvoiceRetainageDistributionsRel

				for each PayablesInvoicePaymentRel
					if (each.RetainagePayment)
						invoke FastUpdate each 
							initialize invoked.RetainagePayment
							invoked.AccrualCode = PayablesInvoice.AccrualCode 
						invoke TakeOffHold each 

				for each PayablesInvoiceDistributionRel
					if (each.Retainage)
						if (each.DistributionType.ExpenseAccrual)
							invoke RestrictedUpdate each 
								initialize invoked.Retainage 
								invoked.AccrualCode = PayablesInvoice.AccrualCode 
								invoked.GLFinanceCodeBlock		= PayablesAccrualCodeDetailRel.DistributionAccount
								invoked.DistributionAccount		= PayablesAccrualCodeDetailRel.DistributionAccount
							if (each.Status.Unreleased)							
								invoke Unreleased.UpdateUnreleasedGLTransDetailNoRules each.GLTransactionDetailRel
									invoked.FinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount
							else
								if (each.Status.Released)
									invoke Released.UpdateReleasedGLTransDetailNoRules each.GLTransactionDetailRel
										invoked.FinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount
						else 
							invoke FastUpdate each 
								initialize invoked.Retainage 
								invoked.AccrualCode = PayablesInvoice.AccrualCode 

		RebuildRetainage is an Instance Action
			restricted 
			Action Rules

				invoke Delete PayablesInvoiceRetainageDistributionsRel
							
				for each PayablesInvoiceDistributionRel 
					if  (each.PayablesInvoiceDetail entered)
						LocalPayablesInvoiceDistribution = each.PayablesInvoiceDistribution 

						if (IsChargeback 
						or  IsPOCancel)
							if (PayablesInvoiceOriginalRel.RetainageAccrualCode entered)
								for each PayablesInvoicePaymentRel 
									invoke Create PayablesInvoiceRetainageDistribution
										fill in fields from LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice                = PayablesInvoice
										invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence         = each.PayablesInvoicePayment
										invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine              = LocalPayablesInvoiceDistribution.PurchaseOrderLine 
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution    = LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence      = LocalPayablesInvoiceDistribution.PayablesInvoiceDetail
										invoked.Contract                                                            = LocalPayablesInvoiceDistribution.PurchasingContract
										invoked.ContractLine                                                        = LocalPayablesInvoiceDistribution.ContractLine 
										invoked.Contract                                                            = LocalPayablesInvoiceDistribution.PurchasingContract
										invoked.RetainageCalculatedAmount                                           = LocalPayablesInvoiceDistribution.PayablesInvoiceDetail.TotalDistributionAmount

										invoked.PaymentAmount                                                       = LocalPayablesInvoiceDistribution.DistributionAmount.CurrencyAmount

										if (LocalPayablesInvoiceDistribution.Retainage)
											if  (LocalPayablesInvoiceDistribution.ContractLine entered 
											and  LocalPayablesInvoiceDistribution.PurchaseOrderLine not entered)
												if  (LocalPayablesInvoiceDistribution.ContractLine.Retainage)
													if  (LocalPayablesInvoiceDistribution.PurchasingContract.RetainagePercentCompleteTracking.HeaderLevel)
														invoked.RetainagePercentage                                 = LocalPayablesInvoiceDistribution.PurchasingContract.RetainagePercent1
													else
														invoked.RetainagePercentage                                 = LocalPayablesInvoiceDistribution.ContractLine.RetainagePercent1
											else
												if  (LocalPayablesInvoiceDistribution.PurchaseOrderLine.Retainage entered)
													if  (LocalPayablesInvoiceDistribution.PurchaseOrder.RetainagePercentCompleteTracking.PurchaseOrderLevel)
														invoked.RetainagePercentage                                 = LocalPayablesInvoiceDistribution.PurchaseOrder.RetainageFirstPercent
													else
														invoked.RetainagePercentage                                 = LocalPayablesInvoiceDistribution.PurchaseOrderLine.RetainageFirstPercent

						else 

						if (!each.Retainage)
							for each PayablesInvoicePaymentRel 
								if (each.AccrualCode = AccrualCode)
									invoke Create PayablesInvoiceRetainageDistribution
										fill in fields from LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice                = PayablesInvoice
										invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence         = each.PayablesInvoicePayment
										invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine              = LocalPayablesInvoiceDistribution.PurchaseOrderLine 
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution    = LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence      = LocalPayablesInvoiceDistribution.PayablesInvoiceDetail
										invoked.Contract                                                            = LocalPayablesInvoiceDistribution.PurchasingContract
										invoked.ContractLine                                                        = LocalPayablesInvoiceDistribution.ContractLine 
										invoked.PaymentAmount                                                       = (LocalPayablesInvoiceDistribution.PayablesInvoiceDetail.TotalDistributionAmount *  (each.PaymentAmount.CurrencyAmount / each.PayablesInvoice.InvoiceAmount.CurrencyAmount))
										invoked.Contract                                                            = LocalPayablesInvoiceDistribution.PurchasingContract
										invoked.RetainageCalculatedAmount                                           = LocalPayablesInvoiceDistribution.PayablesInvoiceDetail.TotalDistributionAmount
						else
							for each PayablesInvoicePaymentRel 
								if (each.AccrualCode = RetainageAccrualCode)
									invoke Create PayablesInvoiceRetainageDistribution
										fill in fields from LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice                = PayablesInvoice
										invoked.PayablesInvoiceRetainageDistribution.InvoicePaymentSequence         = each.PayablesInvoicePayment
										invoked.PayablesInvoiceRetainageDistribution.PayablesMatchLine              = LocalPayablesInvoiceDistribution.PurchaseOrderLine 
										invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution    = LocalPayablesInvoiceDistribution.PayablesInvoiceDistribution
										invoked.PayablesInvoiceRetainageDistribution.MatchDistributionSequence      = LocalPayablesInvoiceDistribution.PayablesInvoiceDetail
										invoked.Contract                                                            = LocalPayablesInvoiceDistribution.PurchasingContract
										invoked.ContractLine                                                        = LocalPayablesInvoiceDistribution.ContractLine 
										invoked.Contract                                                            = LocalPayablesInvoiceDistribution.PurchasingContract
										invoked.RetainageCalculatedAmount                                           = LocalPayablesInvoiceDistribution.PayablesInvoiceDetail.TotalDistributionAmount
										invoked.PaymentAmount                                                       = (LocalPayablesInvoiceDistribution.PayablesInvoiceDetail.TotalDistributionAmount *  (each.PaymentAmount.CurrencyAmount / each.PayablesInvoice.InvoiceAmount.CurrencyAmount))
										invoked.RetainagePercentage                                                 = (each.PaymentAmount.CurrencyAmount / each.PayablesInvoice.InvoiceAmount.CurrencyAmount)

		AdditionalAddOnCharge is an Instance Action
			valid when (AllowMatchPrepaymentAddOnCharge)
			Parameters
				AddOnCharge 
				Amount is like InternationalAmount
			Parameter Rules
				AddOnCharge 
					required
				Amount 
					required

			Entrance Rules 
        		if (AddOnCharge.AddOnChargeType.Allowance) 
            		if (Amount > 0)
                		Amount = Amount * -1

			Action Rules
				constraint (AllowMatchPrepaymentAddOnCharge)
					"ActionOnlyValidOnReleasedUnmatchedMatchPrepaymentInvoice"
				constraint (AddOnCharge.SpreadMethod.NoSpread)
					"ActionOnlyForNonSpreadAddOnCharges"

				invoke CreateMiscellaneousAddOnCosts PayablesInvoiceAddOnCharge
					invoked.Company                     = Company 
					invoked.PayablesInvoice             = PayablesInvoice
					invoked.AddOnCharge                 = AddOnCharge
					invoked.EnteredUnitCost             = Amount
					invoked.EnteredQuantity             = 1
					invoked.AddOnChargeAmount           = Amount
					invoked.TotalDistributionAmount     = Amount
					invoked.BypassInvoiceErrorChecking  = true
					invoked.BypassAllowUpdate           = true
					invoked.CreateFromBatchSwitch       = true

				AddOnChargeAmount += Amount 
				MatchAmount -= Amount

		ChangeToReceiptMatch is an Instance Action
			valid when (MatchProcessType.AOCOnly)
			Action Rules 
				constraint (Status.Unreleased 
				and         MatchStatus.Unmatched 
				and         MatchProcessType.AOCOnly)
					"ActionOnlyValidForUnmatchedAocOnlyInvoice"
				
				MatchProcessType = "R"
				MatchInvoice 	 = MatchInvoice.POInvoice
				
		ClearAppliedInvoiceAndCredits is an Instance Action			
			valid when (CanClearInvoiceAndCredits)
			confirmation required
				"ThisActionMarksAnInvoiceAsPaid.Continue?"
			completion message is "Invoice<Invoice>HasBeenMarkedAsPaid"
			Parameters
				PrmPostDate							is an ExchangeDate
					default label is "PostDate"
				PrmTransactionNumber				is like TransactionNumber
					default label is "TransactionNumber"
				PrmComment							is Alpha size up to 60
					default label is "Comment"
				PrmCalledFromReceivables			is Boolean
			Parameter Rules
				PrmPostDate
					initial value is current corporate date
					required
					LocalCompany	= Company
					if (CompanySystemClosingControl2Rel.Control)
						constraint (PrmPostDate within CompanySystemClosingControl2Rel.ValidEntryDate)
							"PostDateOf<PrmPostDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControl2Rel.ValidEntryDate.Begin>-<CompanySystemClosingControl2Rel.ValidEntryDate.End>"
				PrmTransactionNumber
					if (PrmTransactionNumber !entered)
						PrmTransactionNumber = CreditApplied
			Entrance Rules
				constraint (!BackgroundProcessing.MatchInvoice)
					"CannotMarkInvoiceAsPaidIfMatchInProgress"
				constraint (PaymentsHaveBeenScheduledRel !exists
				and			PaymentsHaveBeenMadeRel !exists)
					"InvoiceIsPaidOrScheduledToBePaid;CannotClearByCreditMemo"







				if (IsRecurringInvoice)
					constraint (Suffix < 1)
						"CannotClearByCreditMemoOnProcessedRecurringInvoices"
				if (!IsRecurringInvoice
				and !IsChargebackSubType
				and Suffix != 888
				and Suffix != 999
				and !InvoiceType.PrepaymentCredit)
					constraint (DuplicateRecurringInvoiceRel !exist)
						"RecurringInvoiceExistsForThisVendor;CannotClearByCreditMemo"
				constraint (TotalPaymentAmount.TransactionTotal	= InvoiceAmount.CurrencyAmount)
					"CannotClearAnOutOfBalanceInvoice"
				constraint (!IntercompanyBillingDocumentRel.AutoApplyInProgress)
					"CannotClearInvoiceIfIntercompanyBillingAutoApplyCreditInProgress"
			Action Rules
				if (PrmComment entered)
					invoke Create PayablesInvoiceComment
						invoked.Company			= Company
						invoked.PayablesInvoice	= this instance.PayablesInvoice
						invoked.Title			= "Clear Invoice"
						invoked.Type			= "N"
						invoked.SupplierCanView	= false
						invoked.Comment			= PrmComment

				invoke ClearPaymentFromCreditMemo OpenPayablesInvoicePaymentRel
					invoked.PrmCheckDate				= PrmPostDate
					invoked.PrmCheckNumber				= PrmTransactionNumber

			Exit Rules
				AmountPaid	=	InvoiceAmount.CurrencyAmount
				make transition to Historical
				for each PayablesCreditMemoRel
					invoke ClearPaymentFromCreditMemo each.PayablesInvoicePaymentCreditPayablesCreditMemoRel
						invoked.PrmCheckDate				= PrmPostDate
						invoked.PrmCheckNumber				= PrmTransactionNumber
						invoked.PrmUpdateAmountPaid			= true

		
		UpdateAmountPaid is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmPaymentAmount	is an InternationalAmount
				PrmReopenInvoice	is Boolean
			Action Rules
				display"PI:UAP:UpdateAmountPaidAction<PrmPaymentAmount>"
				if (PrmReopenInvoice)
					AmountPaid	-=	PrmPaymentAmount
					if (Status.Historical)
						Status	= Status.Released
				else 
					AmountPaid += PrmPaymentAmount
					if	(AmountPaid	= InvoiceAmount.CurrencyAmount)
						make transition to Historical
		
		AmendInvoiceDistributions is an Instance Action				
			valid when (AllowMoveToAmended)
			Parameters
				PrmPostDate		is Date
			Parameter Rules
				PrmPostDate
					initial value is DistributionDate
					default to DistributionDate

			Action Rules
				if (PrmPostDate within CompanySystemClosingControlRel.ValidEntryDate)
					DistributionDate = PrmPostDate
				else
					DistributionDate = PrmPostDate
					if (EntityLedgerPeriodRel exists)
						confirmation required
							"PostDate<DistributionDate>IsWithinAClosed_\PayablesPeriod;GLPeriod<first EntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.GeneralLedgerCloseYear>-<first EntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.PeriodName>IsOpen.SelectOkayToPostToCurrent_\GLPeriod?"
				make transition to Amended
				if (DistributionDate changed)
					invoke Amended.Update
			Exit Rules
				invoke TriggerSupplierInvoiceBOD PayablesInvoice
				
		RemoveAPPaidFromBatch is an Instance Action
			restricted
			Action Rules
				invoke RemoveAPPaid GLTransactionDetailRel

		CalculateRate is an Instance Action		//	"Unreleased" State
			valid when (CalculateRateActionValid)
			completion message is "CalculateRateComplete"
			Action Rules


				if (MatchProcessType.Expense)

					if (TaxAdjustment not entered)	

						LocalAmount1 = TotalDistributionAmount.TransactionTotal - RoundedTotalTaxAmount		
						LocalAmount2 = InvoiceAmount.CurrencyAmount - TaxAmount
						constraint (LocalAmount1 = LocalAmount2)
							"CannotCalculateTaxRate;DistributionsOutOfBalance"           


					if (TaxableAmount not entered)
						if  ((IsUseTaxCodeAccounts
						and   EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
						or  (!IsUseTaxCodeAccounts
						and   TaxEntityRel.AccruedOrInvoiced.Invoiced))

							LocalTaxableAmount = InvoiceAmount.CurrencyAmount - TaxAmount		
						else

							LocalTaxableAmount = InvoiceAmount.CurrencyAmount		
					else
						LocalTaxableAmount = TaxableAmount		


					LocalTaxRate = TaxAmount / LocalTaxableAmount		

					for each TaxDistributionsRel
						invoke Update each
							invoked.TaxRate				= LocalTaxRate
							invoked.GLTransactionAmount	= each.TaxableAmount * LocalTaxRate

				else

					invoke Delete CalculatedMatchTaxDistributionRel

					for each PayablesInvoiceDetailRel
						if (TaxCode = each.TaxCode)
							if (each.TaxableUnitCost entered)
								LocalTotalTaxableAmount += each.TaxableUnitCost * each.MatchedQuantity
							else
								LocalTotalTaxableAmount += each.TotalDistributionAmount

					for each PayablesInvoiceAddOnChargeRel
						if (TaxCode = each.TaxCode)
							LocalTotalTaxableAmount += each.TotalDistributionAmount

					if (IsCreditMemo)
						constraint (TaxAmount > LocalTotalTaxableAmount)
							"CannotCalculateTax;TaxAmountIsGreaterThanTaxableAmount"
					else
						constraint (TaxAmount < LocalTotalTaxableAmount)
							"CannotCalculateTax;TaxAmountIsGreaterThanTaxableAmount"

					LocalTaxRate							= TaxAmount / LocalTotalTaxableAmount
					RemainingTaxAmount 						= TaxAmount

					for each PayablesInvoiceDetailRel
						if (TaxCode = each.TaxCode)
							if (each.TaxableUnitCost entered)
								LocalTaxAmount = (each.TaxableUnitCost * each.MatchedQuantity * LocalTaxRate)
							else
								LocalTaxAmount = (each.TotalDistributionAmount * LocalTaxRate)

							round LocalTaxAmount to nearest DerivedRoundTo


							invoke CalculateRate each
								invoked.TaxAmount			= LocalTaxAmount
								invoked.TransientTaxRate 	= LocalTaxRate

							RemainingTaxAmount -= LocalTaxAmount


					for each PayablesInvoiceAddOnChargeRel
						if (TaxCode = each.TaxCode)
							LocalTaxAmount = (each.TotalDistributionAmount * LocalTaxRate)

							round LocalTaxAmount to nearest DerivedRoundTo

							invoke CalculateRate each
								invoked.TaxAmount			= LocalTaxAmount
								invoked.TransientTaxRate 	= LocalTaxRate

							RemainingTaxAmount -= LocalTaxAmount



					if (RemainingTaxAmount entered)
						if (PayablesInvoiceDetailRel exists)
							invoke FastUpdate last PayablesInvoiceDetailRel
								invoked.TaxAdjustAmount = RemainingTaxAmount
						else
							invoke FastUpdate last PayablesInvoiceAddOnChargeRel
								invoked.TaxAdjustAmount = RemainingTaxAmount

			Exit Rules
				if (!MatchProcessType.Expense)
					invoke InvoiceUpdate
				invoke RefreshTotalTax
				include UpdateErrorRecords
				initialize LocalTaxableAmount
				initialize TaxableCount

		CreateFromInvoice is a Create Action		
			Parameters
				PrmCompany						is a PayablesCompany
				PrmPayablesInvoice       		is a PayablesInvoice
				PrmInvoiceNumber				is an Invoice
				PrmInvoiceDate					is Date
				PrmDueDate						is Date
				PrmDistributionDate				is Date
				PrmInvoiceReceiptDate			is Date	
			Parameter Rules
				PrmCompany
					required
					default to PrmPayablesInvoice.Company
				PrmPayablesInvoice
					required
					constraint (PrmPayablesInvoice exists)
						"PayablesInvoiceDoesNotExist"
					constraint (PrmPayablesInvoice.MatchProcessType.Expense
					or PrmPayablesInvoice.MatchProcessType.ServiceContract)
						"OnlyExpenseOrServiceContractTypeInvoicesCanBeCopied"
				 
				PrmDistributionDate
 
				PrmInvoiceReceiptDate

				PrmInvoiceDate
 
				PrmDueDate
 
				PrmInvoiceNumber
					required
			Local Fields
				LocalPayablesInvoiceView				is a PayablesInvoice view
				LocalNewPayablesInvoice					is a PayablesInvoice
			Action Rules
				if (PrmDueDate entered				
				and PrmPayablesInvoice.TermsCode entered)		
					confirmation required
						"CopiedInvoiceHasTerms;EnteringDueDateWillOverrideDueDateAndDiscountInformation;Continue?"
				invoke Unreleased.CreateInvoice this instance
					fill in fields from PrmPayablesInvoice
						except invoked.UniqueID
						except invoked.CancelSequence
						except invoked.PayablesInvoice
						except invoked.VoucherNumber
						except invoked.Status
						except invoked.TotalTaxAmount
						except invoked.TotalTaxableAmount
						except invoked.SecondaryWithholding
						except invoked.OriginatingInterfaceRun
						except invoked.AmountPaid
						except invoked.CreateDate
						except invoked.ReconciliationDate
						except invoked.ReceiptOfInvoiceDate
						except invoked.CreatedBy
						except invoked.LastUpdateDate
						except invoked.APClerk
						except invoked.ProcessingTeam
						except invoked.ResponsiblePerson
						except invoked.ResponsibleRole
						except invoked.RoutingCode
						except invoked.RoutingApprovalLevel
						except invoked.ImageIndex
						except invoked.InvoiceURL
						except invoked.Workunit
						except invoked.AutoApproved
						except invoked.SubmittedTimeStamp
						except invoked.RejectReason
						except invoked.InvoiceSearchDocument
						except invoked.ApprovedTimeStamp
						except invoked.RejectedTimeStamp
						except invoked.CancelledTimeStamp
						except invoked.ReleasedTimeStamp
						except invoked.IDMDocumentPID
						except invoked.ScanDate
						except invoked.ExternalReasonCode
						except invoked.ExternalReason
						except invoked.AlphaAttribute1
						except invoked.SupplierInvoiceAttachment
						except invoked.SupplierPODAttachment
						except invoked.IDMJob
						except invoked.RequiresApproval
						except invoked.IDMInvoiceSentToVendor
						except invoked.IDMPrinter
						except invoked.InvoiceRoutingCodeGroup
						except invoked.InvoiceRoutingCodeGroupLevel
						except invoked.RoutingFinanceTeam
						except invoked.RoutingFinanceTeamMember
						except invoked.UsesMatrixApproval
						except invoked.Invoice
						except invoked.TotalPaymentAmount
						except invoked.TotalDistributionAmount
						except invoked.DistributionDate
						except invoked.ReceiptOfInvoiceDate
						except invoked.InvoiceDate
						except invoked.DueDate
						except invoked.MatchStatus
						except invoked.InvoiceAmount
						except invoked.TransientPaymentNumber
						except invoked.TransientPaymentAmount
						except invoked.TransientPaymentDate
						except invoked.TransientReportableAmount
						except invoked.TransientRoutingApprovalLevel
			
					invoked.Invoice					= PrmInvoiceNumber
					invoked.DistributionDate		= PrmDistributionDate
					invoked.ReceiptOfInvoiceDate	= PrmInvoiceReceiptDate
					invoked.InvoiceDate 			= PrmInvoiceDate
					invoked.DueDate					= PrmDueDate
					invoked.InvoiceAmount.CurrencyAmount = PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
					if (PrmDueDate entered				
					and PrmPayablesInvoice.TermsCode entered)		
						initialize invoked.TermsCode
						initialize invoked.DiscountAmount
						initialize invoked.DiscountDate
						initialize invoked.DiscountPercent
						initialize invoked.AllowableAmountForDiscount
						initialize invoked.DiscountAmount1
						initialize invoked.BaseDiscountAmount1
						initialize invoked.DiscountDate1
						initialize invoked.DiscountPercent1
						initialize invoked.DiscountAmount2
						initialize invoked.BaseDiscountAmount2
						initialize invoked.DiscountDate2
						initialize invoked.DiscountPercent2
						initialize invoked.DiscountAmount3
						initialize invoked.BaseDiscountAmount3
						initialize invoked.DiscountDate3
						initialize invoked.DiscountPercent3
				if (PrmPayablesInvoice.DistributionCode !entered)
					for each PrmPayablesInvoice.PayablesInvoiceDistribution set
						if (each.DistributionType.Distribution
						and each.PurchasingContract !entered)
							invoke CreateFromBatchNoParms PayablesInvoiceDistribution
								assign result to LocalPayablesInvoiceDistributionView
								fill in fields from each
									except invoked.Status
									except invoked.TransientReferenceToThisInstance
									except invoked.DistributionCode
									except invoked.GltObjId
								invoked.PayablesInvoice = this instance.PayablesInvoice 
								invoked.BypassDefaultTaxIndicator = true
						else
							if (each.DistributionType.ExpenseAccrual)
								end for each

				for each PrmPayablesInvoice.PayablesInvoiceComment set
					invoke Create PayablesInvoiceComment
						fill in fields from each
						invoked.PayablesInvoice	= this instance.PayablesInvoice

				if (PrmPayablesInvoice.ServiceContract entered)
					if (ThisMatchServiceContractInvoiceRel not exists)
						for each PrmPayablesInvoice.MatchServiceContractInvoicesRel
							invoke Create MatchServiceContractInvoice
								invoked.Company						= Company
								invoked.Contract 					= each.Contract  
								invoked.PayablesInvoice				= this instance.PayablesInvoice
								invoked.VendorGroup 				= Company.VendorGroup
								
					for each PrmPayablesInvoice.PayablesInvoiceDetailRel
						invoke CreateFromContractLine PayablesInvoiceDetail
							invoked.Company								= each.Company
							invoked.Vendor								= each.Vendor
							invoked.PayablesInvoice		                = this instance.PayablesInvoice
							invoked.Contract							= each.Contract
							invoked.ContractLine						= each.ContractLine
							invoked.ItemDescription						= each.ItemDescription
							invoked.ItemType							= each.ItemType
							invoked.CommodityCode						= each.CommodityCode
							invoked.VendorItem							= each.VendorItem
							invoked.RecordSource						= each.RecordSource
							invoked.EnteredUOM							= each.EnteredUOM
							invoked.EnteredUOMMultiplier				= each.EnteredUOMMultiplier
							invoked.TransactionNumberOfDecimals	        = each.TransactionNumberOfDecimals
							invoked.Location							= each.Location
							invoked.ItemGTIN							= each.ItemGTIN
							invoked.VendorPriceUOM						= each.VendorPriceUOM
							invoked.VendorPriceUOMMultiplier			= each.VendorPriceUOMMultiplier
							invoked.VendorBuyUOM						= each.VendorBuyUOM
							invoked.VendorBuyUOMMultiplier				= each.VendorBuyUOMMultiplier
							invoked.DistributionDate					= each.DistributionDate
							invoked.EnteredQuantity						= each.EnteredQuantity
							invoked.BuyUOMMatchedQuantity				= each.BuyUOMMatchedQuantity
							invoked.MatchedQuantity						= each.MatchedQuantity
							invoked.EnteredUnitCost						= each.EnteredUnitCost
							invoked.MatchUnitCost						= each.MatchUnitCost
							invoked.TaxUsageCode						= each.TaxUsageCode

				commit transaction
			
				invoke UpdateErrorRecordsAction this instance.PayablesInvoice




		PeriodEndInvoiceExpenseAccrual is a Set Action		

			restricted
			completion message is "<InvoiceCount>_<InvoicesReleasedMessage>"
			run in background		
			Parameters
				PrmCompany						is a PayablesCompany
					default label is "Company"
				PrmGeneralLedgerCompanyGroup 	is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmPostDate						is Date
					default label is "PostDate"
				PrmInterfaceRunGroup			is AlphaUpper 30
					default label is "InterfaceRunGroup"
				PrmOverrideAccrualAccount		is a FinanceCodeBlock
					default label is "OverrideAccrualAccount"
			Parameter Rules
				PrmCompany
					if (PrmGeneralLedgerCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupRequired"
				PrmGeneralLedgerCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"
				PrmPostDate
					required
				PrmInterfaceRunGroup
					required			
				PrmOverrideAccrualAccount
					constraint (PrmCompany entered)
						"OverrideAccrualAccountOnlyValidWhenRunningForSingularCompany"
			Local Fields
				InvoiceCount			is Numeric 8
				SequenceNumber  		is Numeric 12
				LocalAccrualAccount 	is a FinanceCodeBlock
			Instance Selection
				where  (((PrmCompany entered
				and		 PrmCompany = Company)
				or		 PrmCompany not entered)

				and	    (PrmGeneralLedgerCompanyGroup	not entered
				or      (PrmGeneralLedgerCompanyGroup 	entered
				and      GeneralLedgerCompanyGroup		entered
				and      GeneralLedgerCompanyGroup = PrmGeneralLedgerCompanyGroup
				and      GLCompanyGroupMemberRelExists))

				and 	Status.PendingApproval
				and 	DistributionDate <= PrmPostDate
				and 	TotalDistributionAmount.TransactionTotal = InvoiceAmount.CurrencyAmount)
			Sort Order is ByProcessingStatus
			Action Rules
				Empty Set Rules
				Set Rules
					Entrance Rules
						initialize LocalCounter
						initialize InvoiceCount
						initialize SequenceNumber
					Exit Rules
				Instance Rules
					increment LocalCounter
					increment InvoiceCount
					if (LocalCounter > 5)
						commit transaction
						initialize LocalCounter

					for each PayablesInvoiceDistributionRel
						increment SequenceNumber
						invoke Create GLTransactionInterface
							invoked.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.GLTransactionInterface.RunGroup 		= PrmInterfaceRunGroup
							invoked.GLTransactionInterface.SequenceNumber 	= SequenceNumber
							invoked.AutoReverse 							= true
							invoked.AccountingEntity						= AccountingEntity
							invoked.Status									= 0
							invoked.ToAccountingEntity						= each.DistributionAccount.ToAccountingEntity
							invoked.AccountingUnit							= each.DistributionAccount.AccountingUnit
							invoked.AccountCode								= each.DistributionAccount.GeneralLedgerChartAccount
							invoked.PostingDate								= PrmPostDate
							invoked.TransactionDate							= InvoiceDate
							invoked.TransactionAmount						= each.DistributionAmount.CurrencyAmount
							invoked.Project									= each.DistributionAccount.Project
							invoked.FinanceDimension1						= each.DistributionAccount.FinanceDimension1
							invoked.FinanceDimension2						= each.DistributionAccount.FinanceDimension2
							invoked.FinanceDimension3						= each.DistributionAccount.FinanceDimension3
							invoked.FinanceDimension4						= each.DistributionAccount.FinanceDimension4
							invoked.FinanceDimension5						= each.DistributionAccount.FinanceDimension5
							invoked.FinanceDimension6						= each.DistributionAccount.FinanceDimension6
							invoked.FinanceDimension7						= each.DistributionAccount.FinanceDimension7
							invoked.FinanceDimension8						= each.DistributionAccount.FinanceDimension8
							invoked.FinanceDimension9						= each.DistributionAccount.FinanceDimension9
							invoked.FinanceDimension10						= each.DistributionAccount.FinanceDimension10
							invoked.Ledger									= each.DistributionAccount.Ledger
							invoked.DocumentNumber							= VoucherNumberDisplay
							invoked.Description 							= AccruedInvoiceMessageField
							invoked.Reference								= Reference
					increment SequenceNumber
					if (PrmOverrideAccrualAccount entered)
						LocalAccrualAccount = PrmOverrideAccrualAccount
					else
						LocalAccrualAccount = PayablesAccrualCodeDetailRel.DistributionAccount
					invoke Create GLTransactionInterface
						invoked.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.GLTransactionInterface.RunGroup 		= PrmInterfaceRunGroup
						invoked.GLTransactionInterface.SequenceNumber 	= SequenceNumber
						invoked.AutoReverse 							= true
						invoked.AccountingEntity						= AccountingEntity
						invoked.Status									= 0
						invoked.ToAccountingEntity						= LocalAccrualAccount.ToAccountingEntity
						invoked.AccountingUnit							= LocalAccrualAccount.AccountingUnit
						invoked.AccountCode								= LocalAccrualAccount.GeneralLedgerChartAccount
						invoked.PostingDate								= PrmPostDate
						invoked.TransactionDate							= InvoiceDate
						invoked.TransactionAmount						= InvoiceAmount.CurrencyAmount * -1
						invoked.Project									= LocalAccrualAccount.Project
						invoked.FinanceDimension1						= LocalAccrualAccount.FinanceDimension1
						invoked.FinanceDimension2						= LocalAccrualAccount.FinanceDimension2
						invoked.FinanceDimension3						= LocalAccrualAccount.FinanceDimension3
						invoked.FinanceDimension4						= LocalAccrualAccount.FinanceDimension4
						invoked.FinanceDimension5						= LocalAccrualAccount.FinanceDimension5
						invoked.FinanceDimension6						= LocalAccrualAccount.FinanceDimension6
						invoked.FinanceDimension7						= LocalAccrualAccount.FinanceDimension7
						invoked.FinanceDimension8						= LocalAccrualAccount.FinanceDimension8
						invoked.FinanceDimension9						= LocalAccrualAccount.FinanceDimension9
						invoked.FinanceDimension10						= LocalAccrualAccount.FinanceDimension10
						invoked.Ledger									= LocalAccrualAccount.Ledger
						invoked.DocumentNumber							= VoucherNumberDisplay
						invoked.Description 							= AccruedInvoiceMessageField						
						invoked.Reference								= Reference




		PeriodClosePreprocessorToUpdatePostDate is a Set Action		
			Parameters
				PrmCompany 						is a PayablesCompany
					default label is "Company"
				PrmGeneralLedgerCompanyGroup	is a GeneralLedgerCompanyGroup
					default label is "CompanyGroup"
				NewPostingDate					is Date

			Parameter Rules
				PrmCompany
					if (PrmGeneralLedgerCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupRequired"

					LocalCompany	= PrmCompany
					if (CompanySystemClosingControl2Rel.Control)
						constraint (NewPostingDate within CompanySystemClosingControl2Rel.ValidEntryDate)
							"PostDateOf<NewPostingDate>NotWithinValidEntryDatesForCompany<PrmCompany>;ValidDateRangeIs<CompanySystemClosingControl2Rel.ValidEntryDate.Begin>-<CompanySystemClosingControl2Rel.ValidEntryDate.End>"

				PrmGeneralLedgerCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"

					LocalGeneralLedgerCompanyGroup	= PrmGeneralLedgerCompanyGroup
					for each LocalGLCompanyGroupMembersRel
						LocalCompany = each.Company
						if (CompanySystemClosingControl2Rel.Control)
							constraint (NewPostingDate within CompanySystemClosingControl2Rel.ValidEntryDate)
								"PostDateOf<NewPostingDate>NotWithinValidEntryDatesForCompany<PrmCompany>;ValidDateRangeIs<CompanySystemClosingControl2Rel.ValidEntryDate.Begin>-<CompanySystemClosingControl2Rel.ValidEntryDate.End>"

				NewPostingDate
					required
			
			Local Fields
				LocalCurrentPeriodEndDate	is Date
			Instance Selection
				where (((PrmCompany entered
				and		 PrmCompany = Company)
				or		 PrmCompany not entered)

				and	    (PrmGeneralLedgerCompanyGroup	not entered
				or      (PrmGeneralLedgerCompanyGroup 	entered
				and      GeneralLedgerCompanyGroup		entered
				and      GeneralLedgerCompanyGroup = PrmGeneralLedgerCompanyGroup
				and      GLCompanyGroupMemberRelExists))

				and    (Status.Unreleased
				or      Status.Amended)

				and 	DistributionDate < NewPostingDate)
			Sort Order is ByProcessingStatus

			Action Rules
				Empty Set Rules
				Set Rules
				Company Set Rules
					Entrance Rules

						LocalCompany				= Company
						LocalCurrentPeriodEndDate 	= CompanySystemClosingControl2Rel.CurrentPeriodEndDate



						if (LocalCurrentPeriodEndDate not entered)		
							LocalCurrentPeriodEndDate = NewPostingDate	


				Instance Rules



					if (DistributionDate <= LocalCurrentPeriodEndDate)	

						invoke UpdateDistributionAndTaxPointDates
							invoked.NewDistributionDate = NewPostingDate

						invoke FastUpdate PayablesInvoiceDetailRel
							invoked.DistributionDate 	= NewPostingDate
							invoked.LastUpdatedBy	 	= actor
							invoked.LastUpdateDate	 	= current timestamp

						invoke FastUpdate PayablesInvoiceAddOnChargeRel
							invoked.DistributionDate 	= NewPostingDate  
							invoked.UpdateDate		 	= current timestamp  

						invoke UpdateDistributionDateForClosingPreprocess PayablesInvoiceDistribution
							invoked.PrmCompany 				= Company
							invoked.PrmPayablesInvoice 		= PayablesInvoice
							invoked.PrmNewDistributionDate 	= NewPostingDate

	StateCycles
		PayablesInvoiceLifeCycle is a StateCycle
			state field is Status

			Unreleased is a State
				Entrance Rules
					invoke CreateCXMLInvoiceStatus
						resume on error				

				CreateInvoice is a Create Action		//	"Unreleased" State
					completion message is "<ActionCompleteMessage>"
					Entrance Rules

						if (InvoiceType not entered)
							if (InvoiceTypeForMatch entered)
								InvoiceType = InvoiceTypeForMatch
							else
								InvoiceType = InvoiceTypeForExpense
						initialize InvoiceTypeForMatch			

						invoke CreateCXMLInvoiceStatus
							resume on error

						if (TransientInvoiceEntryTemplate.MatchInvoice)
							if (FirstPurchaseOrder not entered)
								if (InterfacedPurchaseOrder entered)
									FirstPurchaseOrder = first InterfacedPurchaseOrderRel.PurchaseOrder
							else
								if (InterfacedPurchaseOrder entered)
									constraint FirstPurchaseOrder = first InterfacedPurchaseOrderRel.PurchaseOrder
										"InterfacedPurchaseOrderDoesNotMatchPurchaseOrder"
						else												
							if (ManualOnlineCreate)							
								initialize FirstPurchaseOrder				
								initialize TransientAddOnChargeOnly			
								initialize CostComponentMatch				
								initialize TransientCreateDetails			

						if (!TransientInvoiceEntryTemplate.ServiceContract	
						and  ServiceContract entered						
						and  ManualOnlineCreate)							
							initialize ServiceContract						
							invoke Delete MatchServiceContractInvoicesRel 

						if (!TransientInvoiceEntryTemplate.MatchInvoice
						and !TransientInvoiceEntryTemplate.ServiceContract	
						and  OriginalInvoice entered
						and  ManualOnlineCreate)
							initialize OriginalInvoice

						if (TransientInvoiceEntryTemplate.MatchInvoice
						and !InvoiceType.CreditMemo
						and !InvoiceType.DebitMemo
						and  OriginalInvoice entered
						and  ManualOnlineCreate)
							initialize OriginalInvoice


					Action Rules

						ActionType = ActionType.CreateType
						include CreateAndUpdateRules



					Exit Rules

						include CreateExitRules		

						include CreateAndUpdateExitRules		

						include Messaging


				CreateAndRelease is a Create Action	
					default label is "Create_andRelease"

					Action Rules
						invoke Unreleased.CreateInvoice this instance

						invoke CreateCXMLInvoiceStatus
							resume on error

					Exit Rules
						if (!ErrorsExists)
							if (IsMatchInvoice)
								if (MatchActionValidForUnreleasedInvoice)
									invoke Unreleased.Match
										resume on error
							else
								if (ReleaseActionValid)
									invoke Unreleased.Release
										resume on error
								else
									if (SubmitActionValid)
										invoke Unreleased.SubmitForApproval
											resume on error
											invoked.AutoApprovePrm		= DerivedAutoApprove
											invoked.RoutingCodePrm		= DerivedAutoAssignedRoutingCode
											invoked.PrmRoutingCodeGroup	= DerivedAutoAssignedRoutingCodeGroup		

				CreateBySupplier is a Create Action		//	"Unreleased" State
					valid when (CreateBySupplierValid)
					default label is "CreateInvoiceForSupplier"

					Entrance Rules

						Vendor = actor.agent(SupplierSourceId).Supplier.Vendor

					Action Rules

						ActionType = ActionType.CreateType
						if (InvoiceDate !entered)
							InvoiceDate = current corporate date
						
						if (TransientSupplierInvoiceType.Expense)

							constraint (SupplierInvoiceAttachment entered)
								"MustAttachAnInvoiceDocument"

						if (TransientSupplierInvoiceType.POMatch)
							constraint (FirstPurchaseOrder entered)
								"MustEnterAPurchaseOrder"

						constraint (!actor.agent(SupplierSourceId).SupplierSourceId.InactiveAtSomeLevel)
							"InactiveSupplierCannotCreateInvoice"

						SupplierCreatedInvoiceStatus		= 1		
						Vendor                              = actor.agent(SupplierSourceId).Supplier.Vendor
						InvoiceSource                       = InvoiceSource.SupplierCreated
						if (!Company entered)
							Company                         = actor.agent(SupplierSourceId).SupplierGroup.SupplierSubmittedInvoiceCompany
						if 	(TransientSupplierInvoiceType.POMatch)
							MatchProcessType                = MatchProcessType.ReceiptMatch
							initialize ServiceContract
							invoke Delete MatchServiceContractInvoicesRel 
						if  (TransientSupplierInvoiceType.ServiceContract)
							MatchProcessType                = MatchProcessType.ServiceContract
						if  (TransientSupplierInvoiceType.Expense)
							MatchProcessType                = MatchProcessType.Expense
							initialize ServiceContract
							invoke Delete MatchServiceContractInvoicesRel 
						if  (TransientSupplierInvoiceType.Expense
						or   TransientSupplierInvoiceType.ServiceContract)
							if (actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay = 1)
								if (actor.agent(SupplierSourceId).PrimaryContact = false
								or (actor.agent(SupplierSourceId).PrimaryContact = true
								and actor.agent(SupplierSourceId).Supplier.PrimaryContactViewAllDocuments = false))
									PurchaseFromLocation = actor.agent(SupplierSourceId).VendorLocation
						constraint (actor.agent(SupplierSourceId).Supplier.Vendor entered)
							"YouMustBeAssignedAVendorNumberToCreateExpenseInvoices"

						if (FirstPurchaseOrder entered)
							if (actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay = 1)
								if (actor.agent(SupplierSourceId).PrimaryContact = false
								or (actor.agent(SupplierSourceId).PrimaryContact = true
								and actor.agent(SupplierSourceId).Supplier.PrimaryContactViewAllDocuments = false))
									constraint (FirstPurchaseOrder.PurchaseFromLocation = actor.agent(SupplierSourceId).VendorLocation)
										"EnteredPurchaseOrderIsForADifferentPurchaseFromLocationThanYourLocation"
							if (actor.agent(SupplierSourceId).Supplier.ContactLocationDisplay = 2)
								if (actor.agent(SupplierSourceId).PrimaryContact = false
								or (actor.agent(SupplierSourceId).PrimaryContact = true
								and actor.agent(SupplierSourceId).Supplier.PrimaryContactViewAllDocuments = false))
									constraint (FirstPurchaseOrder.PurchaseFromLocation = actor.agent(SupplierSourceId).VendorLocation
									or          FirstPurchaseOrder.PurchaseFromLocation !entered)
										"EnteredPurchaseOrderHasAPurchaseFromLocationAndItIsForADifferentPurchaseFromLocationThanYourLocation"

							constraint (actor.agent(SupplierSourceId).Supplier.Vendor = FirstPurchaseOrder.Vendor)
								"EnteredPurchaseOrderIsForADifferentVendorThanYourVendor"
							if (UnsubmittedSCPurchaseOrderInvoiceRel exists)
								confirmation required
									"OtherUnsubmittedInvoicesForTheSamePurchaseOrderExist;DoYouWantToContinue?"

						if (ServiceContract entered)
							if (UnsubmittedSCContractInvoiceRel exists)
								confirmation required
									"OtherUnsubmittedInvoicesForTheSameContractExist;DoYouWantToContinue?"

						include CreateAndUpdateRules

					Exit Rules
						include CreateExitRules
						include CreateAndUpdateExitRules

						if (SupplierInvoiceAttachment entered)
							invoke Create PayablesInvoiceDocument
								invoked.Company			= Company
								invoked.PayablesInvoice	= this instance.PayablesInvoice
								invoked.Attachment		= SupplierInvoiceAttachment
								invoked.DocumentID		= Invoice
								invoked.DocumentType	= 1 

						if (SupplierPODAttachment entered)
							invoke Create PayablesInvoiceDocument
								invoked.Company			= Company
								invoked.PayablesInvoice	= this instance.PayablesInvoice
								invoked.Attachment		= SupplierPODAttachment
								invoked.DocumentID		= Invoice
								invoked.DocumentType	= 4 

						if (FirstPurchaseOrder entered
						and TransientCreateAllDetails)
							for each MatchPurchaseOrderInvoicesRel
								invoke CreateDetailFromPurchaseOrder each

						if (ServiceContract entered
						and TransientCreateAllDetails)
							invoke CreateDetailFromContract
						invoke TriggerSupplierInvoiceBOD





				Update is an Update Action    // "Unreleased" State
					valid when (AllowUpdate)
					completion message is "<ActionCompleteMessage>"
					Entrance Rules
						if (!BypassMatchInProgressEdit)
							constraint (!BackgroundProcessing.MatchInvoice)		
								"CannotUpdateInvoiceIfMatchInProgress"
						if (!BypassInterfaceInProcessEdit)  
							constraint (!InterfaceInProcess)		
								"CannotUpdateInvoiceIfInterfaceInProcess"
						constraint (!BudgetEditInProgress)		
							"CannotUpdateInvoiceIfBudgetEditInProcess"
						OldInvoiceAmount 		= old InvoiceAmount.CurrencyAmount
						OldTaxAmount 			= old TaxAmount
					Action Rules

						ActionType = ActionType.UpdateType
						if (TermsCode changed
						and TierDiscountsExist)
							confirmation required
								"<ChangeTermsCodeWithTierDiscountConfirmMessage>"
						include CreateAndUpdateRules
						include UpdateRules
						include MatchPurchaseOrderCheck
					Exit Rules
						if  (!MatchProcessType.Expense
						and (InvoiceAmount.CurrencyAmount changed
						or   TaxAmount changed))
							invoke InvoiceUpdate
								invoked.FromPayablesInvoiceUpdateAction = true

						if (IsNotPrepayment)
							include CreateAndUpdateExitRules
							include UpdateExitRules


						include CheckPrepaids
						include 530MoveAppaymentData 

						if (IsNotPrepayment)
							include Messaging	

				CreateBySupplierUpdate is an Update Action
					default label is "Update"
					valid when (CreateBySupplierInvoiceCanMaintain)

					Entrance Rules
						OldInvoiceAmount = old InvoiceAmount.CurrencyAmount
						OldTaxAmount 	 = old TaxAmount
					Action Rules
						ActionType = ActionType.UpdateType
						include CreateAndUpdateRules
						include UpdateRules
						include MatchPurchaseOrderCheck
					Exit Rules
						if  (!MatchProcessType.Expense
						and  InvoiceAmount.CurrencyAmount changed)
							invoke InvoiceUpdate
								invoked.FromPayablesInvoiceUpdateAction = true

						if (IsNotPrepayment)
							include CreateAndUpdateExitRules
							include UpdateExitRules
							include Messaging
						include 530MoveAppaymentData

				CreateBySupplierDelete is a Delete Action
					default label is "Delete"
					valid when (CreateBySupplierInvoiceCanMaintain)
					Entrance Rules
						include DeleteDistributions
						invoke Delete PayablesInvoiceCommentRel		
						include DeleteEntranceRules

				CreateBySupplierSubmitInvoice is an Instance Action
					default label is "Submit"
					valid when (CreateBySupplierInvoiceCanMaintain)

					Action Rules

						if (MatchProcessType.ServiceContract
						or  MatchProcessType.ReceiptMatch
						or  MatchProcessType.Service)
							constraint (HasInvoiceLines)
								"MustCreateInvoiceDetailsToSubmitInvoice"
						if (MatchProcessType.ServiceContract)
							constraint (InvoiceAmount.CurrencyAmount = ServiceAmount + TaxAmount + DerivedSupplierAdhocAOCAmount)
								"EnteredTotalsMustEqualInvoiceAmount"
						if (MatchProcessType.ReceiptMatch
						or  MatchProcessType.Service
						or  MatchProcessType.DropShip)
							constraint (InvoiceAmount.CurrencyAmount = (MatchAmount + ServiceAmount + AddOnChargeAmount + DerivedSupplierAdhocAOCAmount + TaxAmount))
								"EnteredTotalsMustEqualInvoiceAmount"
						if (!InvoiceDate entered)
							InvoiceDate		= current corporate date
						SupplierCreatedInvoiceStatus 			= 2		
						include UpdateErrorRecords
						if ((APClerkEntered
						and APClerk.EmailAddress entered)
						or  ProcessingTeamEntered)
							send email
								to DerivedProcessingTeamToEmail		
								from actor.agent(SupplierSourceId).EmailAddress
									subject "SupplierCreatedInvoiceSubmitted"
									Contents
										"Invoice<Invoice>HasBeenEnteredAndSubmittedByVendor<Vendor.VendorName>"
										"<DerivedSupplierEnteredAOCEmailContent>"

				BackgroundDelete is an Instance Action
					default label is "Delete"
					valid when (AllowBackgroundDelete)
					Entrance Rules							//	"Unreleased" State
						constraint (!InvoiceSource.IntercompanyBilling)
							"CannotDelete;InvoiceIsFrom_\I\C\B"
						constraint (BackgroundProcessing not entered)
							"CannotDeleteInvoiceIfProcessingInBackground"
						if (initiating action = "Delete")		
							constraint (!InterfaceInProcess)		
								"CannotDeleteInvoiceIfInterfaceInProcess"
						constraint (!BudgetEditInProgress)		
							"CannotDeleteInvoiceIfBudgetEditInProcess"
						BackgroundProcessing = 9
						invoke DeleteAllDistributionsForInvoice PayablesInvoiceDistribution
							invoked.PrmPayablesCompany = Company
							invoked.PrmPayablesInvoice = PayablesInvoice


				Delete is a Delete Action
					valid when (AllowDelete)
					Entrance Rules							//	"Unreleased" State
						constraint (ProcurementCardStatement !entered)		
							"CannotDeleteInvoiceCreatedFromProcurementCardStatement"
						constraint (!InvoiceSource.IntercompanyBilling)
							"CannotDelete;InvoiceIsFrom_\I\C\B"
						constraint (!BackgroundProcessing.MatchInvoice)
							"CannotDeleteInvoiceIfMatchInProgress"
						if (initiating action = "Delete")		
							constraint (!InterfaceInProcess)		
								"CannotDeleteInvoiceIfInterfaceInProcess"
						constraint (!BudgetEditInProgress)		
							"CannotDeleteInvoiceIfBudgetEditInProcess"
						include DeleteDistributions
						include DeleteEntranceRules

				CancelUnreleasedInvoice is an Instance Action   
					valid when (CancelActionValid)
					completion message is "CancelInvoiceComplete"
					subject is CancelInvoice
					reason code required
					action comment required
					Parameters
						InvoiceCancelDate		is Date
					Parameter Rules
						InvoiceCancelDate
							initial value is current corporate date
							required
								"CancelDateRequired"
					Action Rules
						constraint (!InvoiceSource.IntercompanyBilling)
							"CannotCancel;InvoiceIsFrom_\I\C\B"
						if (PayablesInvoice.CompanySystemClosingControlRel.Control)
							constraint (InvoiceCancelDate within PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate)
								"CancelDateOf<LocalCancelDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.End>"
						constraint (!BackgroundProcessing.MatchInvoice)
							"CannotCancelInvoiceIfMatchInProgress"
						constraint (!InterfaceInProcess)
							"CannotCancelInvoiceIfInterfaceInProcess"
						constraint (!BudgetEditInProgress)		
							"CannotCancelInvoiceIfBudgetEditInProcess"
						include DeleteDistributions
						include DeleteEntranceRules
						LocalCancelSequence = 9999
						if (PayablesInvoiceHistorySuffixRel exists)
							for each PayablesInvoiceHistorySuffixRel
								if (each.PayablesInvoiceHistory.CancelSequence = LocalCancelSequence)
									decrement LocalCancelSequence
						else
							LocalCancelSequence = (9999 - instance count of PayablesInvoiceCancelRel)
						CancelSequence = LocalCancelSequence
						CancelDate = InvoiceCancelDate
						initialize VendorReturn
						make transition to Cancelled




				RestrictedSubmitForApproval is an Instance Action	//	"Unreleased" State - Called from Speed Entry - Needed b/c of parms
					default label is untranslatable
					valid when (SubmitActionValid)
					restricted
					completion message is "InvoiceSubmittedForApproval"
					Action Rules
						invoke Unreleased.SubmitForApproval
							invoked.AutoApprovePrm		= DerivedAutoApprove
							invoked.RoutingCodePrm		= DerivedAutoAssignedRoutingCode
							invoked.PrmRoutingCodeGroup	= DerivedAutoAssignedRoutingCodeGroup		



				RouteForApproval is an Instance Action	//	"Unreleased" State	
					default label is "SendInvoiceForApproval"							
					valid when (RouteForApprovalActionValid)		





































					Action Rules
						constraint (Invoice !entered)		
							"SendInvoiceForApprovalIsNoLongerValid.UseSubmitForApproval"
















				ApproveInvoice is an Instance Action		
					valid when (SubmitActionValid)
					Parameters
						CommentPrm			is Alpha size up to 500
							default label is "Comment"
					Action Rules
						if (IsUpdateRecurringDetails)
							invoke UpdateRecurringInvoice
								invoked.NumberOfRecurrences = NumberOfRecurringInvoices
								invoked.RecurrenceFrequency = RecurringFrequency

						if (!RoutingRuleFound
						and RequiresApproval)
							RequiresApproval = false
							if (ReleaseActionValid)
								invoke Unreleased.Release
							else
								if (MatchActionValidForUnreleasedInvoice)
									invoke Unreleased.Match
						else
							invoke Unreleased.SubmitForApproval
								invoked.AutoApprovePrm		= true
								invoked.CommentPrm			= CommentPrm

				SubmitForApproval is an Instance Action				//	"Unreleased" State

					valid when (SubmitActionValid)
					completion message is "InvoiceSubmittedForApproval"

					Parameters
						ApprovalOptions		is AlphaUpper 1		
							States
								ApprovalCode		value is "C"
								ApprovalCodeGroup	value is "G"

						AutoApprovePrm		is Boolean
							default label is "AutoApprove"
						RoutingCodePrm		is a InvoiceRoutingCode
							default label is "ApprovalCode"
						PrmRoutingCodeGroup	is a InvoiceRoutingCodeGroup		
							default label is "ApprovalCodeGroup"
						CommentPrm			is Alpha size up to 500
							default label is "Comment"


					Parameter Rules
						ApprovalOptions		





							if (ApprovalOptions.ApprovalCode)
								initialize PrmRoutingCodeGroup
								AutoApprovePrm = false
							else
								if (ApprovalOptions.ApprovalCodeGroup)
									initialize RoutingCodePrm
									AutoApprovePrm = false
							if (!RoutingRuleFound)
								initialize ApprovalOptions
						AutoApprovePrm
							if (AutoApprovePrm = true)		
								initialize RoutingCodePrm
								initialize PrmRoutingCodeGroup
							else
								if (ApprovalOptions !entered		
								and !LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)
									default to DerivedAutoApprove





						RoutingCodePrm

							if (ApprovalOptions !entered		
							and AutoApprovePrm = false			
							and !LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)

								default to DerivedAutoAssignedRoutingCode

							if (ApprovalOptions.ApprovalCode		
							and !LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)

								required
									"ApprovalCodeRequiredWhenApprovalCodeOptionSelected"



						PrmRoutingCodeGroup		

							if (ApprovalOptions !entered		
							and AutoApprovePrm = false			
							and !LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)

								default to DerivedAutoAssignedRoutingCodeGroup

							if (ApprovalOptions.ApprovalCodeGroup
							and !LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)

								required
									"ApprovalCodeGroupRequiredWhenApprovalCodeGroupOptionSelected"
					Action Rules





						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
						and PayablesInvoiceDistributionsRequiringCustodialAccountRel exists)	
							confirmation required
								"OneOrMoreDistributionsMayRequireCustodialAccount;Continue?"
						if  (!RequiresApproval 
						and (initiating action 	= "EDIInvoiceMatchInterfaceInput.PostLoadInterface"						
						or  initiating action 	= "MatchInvoiceImport.PostLoadInterface"
						or  initiating action 	= "DocumentInterfaceInvoice.InvoiceUpdate"))
							if (RoutingRuleFound)
								RequiresApproval = true


						if (LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)
							constraint (MatchProcessType.Expense)
								"OnlyExpenseInvoicesCanUseMatrixApproval.PleaseAdjustInvoiceRoutingRules"
							constraint (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnableResponsibilityMatrix)
								"CannotUse_Responsibility_MatrixApprovalsWhenThe_Finance_Enterprise_GroupDoesNotHaveThe_Responsibility_MatrixTurnedOn._PleaseContactYourSystemAdministratorForFurtherAssistance."
							constraint (PayablesInvoiceDistributionRel exists)
								"CannotUse_Responsibility_MatrixApprovalsWhenNoDistributionsExist._PleaseCreateDistributionsOrUseADifferentApprovalProcess."

						if ((initiating action 	= "EDIInvoiceMatchInterfaceInput.PostLoadInterface"						
						or   initiating action 	= "MatchInvoiceImport.PostLoadInterface"
						or   initiating action 	= "DocumentInterfaceInvoice.InvoiceUpdate")
						and !MatchProcessType.Expense
						and !RequiresApproval)
							NextSentence = true

						else

						if (!RoutingRuleFound		
						and RequiresApproval)

							RequiresApproval = false
							if (ReleaseActionValid)
								invoke Unreleased.Release
							else
								if (MatchActionValidForUnreleasedInvoice)
									invoke Unreleased.Match
						else


							if (PrmRoutingCodeGroup entered)
								constraint (!PrmRoutingCodeGroup.ActiveGroupWithAllLevelsInactive)		
									"ApprovalCodeGroup<PrmRoutingCodeGroup>DoesNotHaveActiveLevels"
							if (!AutoApprovePrm
							and !LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)

								if (PrmRoutingCodeGroup entered)		
									InvoiceRoutingCodeGroup			= PrmRoutingCodeGroup		
									InvoiceRoutingCodeGroupLevel	= PrmRoutingCodeGroup.DerivedFirstActiveInvoiceRoutingCodeGroupLevel		

									if (RoutingFinanceTeam entered)		
										constraint (InvoiceRoutingCodeGroup.InvoiceRoutingCodeGroupLevelRel.RoutingFinanceTeamMatch)
											"RoutingFinanceTeamNotFoundInApprovalCodeGroup"
									if (InvoiceRoutingCodeGroup.UsesTeamMemberAssignment)		
										constraint (!InvoiceRoutingCodeGroup.InvoiceRoutingCodeGroupLevelRel.RoutingTeamMemberMissingMaxAmount)
											"MaxApprovalAmountMissingAtFinanceTeamMemberLevel"
									if (Company.VendorGroup.EnforceMaxInvoiceApprovalAmount)								
										if (LocalExtendedAmount !entered)		
											if (RoutingCode.Currency != InvoiceCurrency)
												LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
												LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
												LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= RoutingCode.Currency
												LocalReportCurrencyExchangeGroup.ExchangeDate			= InvoiceDate
												LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
												LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
												LocalExtendedAmount										= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
											else
												LocalExtendedAmount										= InvoiceAmount.CurrencyAmount
										if (!InvoiceRoutingCodeGroup.FinalLevelUsesTeamMemberAssignment							    
										and LocalExtendedAmount > InvoiceRoutingCodeGroup.DerivedMaxApprovalAmount
										and InvoiceRoutingCodeGroup.DerivedMaxApprovalAmount entered)
											confirmation required
												"InvoiceAmountIsGreaterThanMaximumApprovalAmountOf<InvoiceRoutingCodeGroup.DerivedMaxApprovalAmount>ForRoutingCodeWithinTheGroup.DoYouWantToProceed?"

								if (RoutingCodePrm entered)
									RoutingCode					= RoutingCodePrm
								else
									RoutingCode					= InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel		


								if (PrmRoutingCodeGroup! entered		
								and RoutingFinanceTeam entered)
									constraint (RoutingCode.InvoiceRoutingCodeResourceRoutingTeamMatchRel exists)
										"RoutingFinanceTeamNotFoundInApprovalCode"
								if (RoutingCode.UsesTeamMemberAssignment)		
									constraint (!RoutingCode.InvoiceRoutingCodeResourceRel.RoutingTeamMemberMissingMaxAmount)
										"MaxApprovalAmountMissingAtFinanceTeamMemberLevel"
								LocalRoutingApprovalLevel = ""
								LastApprovalComment = CommentPrm
								if (RoutingCode.InitialApproverSelectionMethod.SpecificApprovalLevel)
									RoutingApprovalLevel = RoutingCode.InitialApprovalLevel.ApprovalLevel

								else
									RoutingApprovalLevel = DerivedNextRoutingApprovalLevel



								if (RoutingApprovalLevel = ""		
								and RoutingCode.InitialApproverSelectionMethod.FirstApprovalLevelAuthorizedToApproveInvoiceAmount
								and InvoiceRoutingCodeGroupLevel.NextCodeGroupLevelExists)
									LocalInvoiceRoutingCodeGroupLevel	= InvoiceRoutingCodeGroupLevel.first NextInvoiceRoutingCodeGroupLevelRel.InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel
									InvoiceRoutingCodeGroupLevel		= LocalInvoiceRoutingCodeGroupLevel
									RoutingCode							= InvoiceRoutingCodeGroupLevel.ApprovalCodeGroupLevel

									if (RoutingCode.Currency entered		
									and RoutingCode.Currency != InvoiceCurrency)
										LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
										LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
										LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= RoutingCode.Currency
										LocalReportCurrencyExchangeGroup.ExchangeDate			= InvoiceDate
										LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
										LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
										LocalExtendedAmount										= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
									else
										LocalExtendedAmount										= InvoiceAmount.CurrencyAmount

									for each RoutingCode.ActiveInvoiceRoutingCodeResourceRel

										if (RoutingCode.InitialApproverSelectionMethod.SpecificApprovalLevel)		

											if (RoutingCode.InitialApprovalLevel.ApprovalLevel = each.ApprovalLevel)
												LocalRoutingApprovalLevel = each.ApprovalLevel

												end for each
										else

											if (RoutingCode.InitialApproverSelectionMethod.FirstApprovalLevel
											or	LocalExtendedAmount <= each.DerivedMaxApprovalAmount)		


												RoutingApprovalLevel = each.ApprovalLevel

												end for each
								if (Company.VendorGroup.EnforceMaxInvoiceApprovalAmount
								and PrmRoutingCodeGroup !entered)								
									if (LocalExtendedAmount !entered)		
										if (RoutingCode.Currency != InvoiceCurrency)
											LocalReportCurrencyExchangeGroup.CurrencyTable			= CurrencyTable
											LocalReportCurrencyExchangeGroup.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											LocalReportCurrencyExchangeGroup.BaseAmount.ToCurrency	= RoutingCode.Currency
											LocalReportCurrencyExchangeGroup.ExchangeDate			= InvoiceDate
											LocalReportCurrencyExchangeGroup.TransactionAmount		= InvoiceAmount.CurrencyAmount
											LocalReportCurrencyExchangeGroup.FromCurrency			= InvoiceCurrency
											LocalExtendedAmount										= LocalReportCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
										else
											LocalExtendedAmount										= InvoiceAmount.CurrencyAmount
									if (!RoutingCode.UsesTeamMemberAssignment
									and LocalExtendedAmount > RoutingCode.DerivedMaxApprovalAmount
									and RoutingCode.DerivedMaxApprovalAmount entered)


										confirmation required
											"InvoiceAmountIsGreaterThanMaximumApprovalAmountOf<RoutingCode.DerivedMaxApprovalAmount>ForApprovalCode<RoutingCode>.DoYouWantToProceed?"

								if (RoutingCode entered
								and	RoutingCode.AssignApproversUsingAuthorityCodes)
									constraint (RoutingCategory entered)
										"RoutingCategoryIsRequiredWhenUsingAnApprovalCodeThatAssignsApproversUsingRoles"

								constraint (RoutingApprovalLevel entered)														
									"RoutingApprovalLevelNotAssigned:RoutingRuleFoundButRoutingSetUpIsIncomplete"					
							if (RoutingCode entered)
								constraint (RoutingCode.ActiveResourcesExist)
									"NoActiveApproversAssignedToApprovalCode<RoutingCode.InvoiceRoutingCode>"







							if (!AutoApprovePrm
							and RoutingCode.AssignApproversUsingAuthorityCodes)
								constraint (DerivedCurrentApproverActorList entered)
									"UnableToFindApproversForSelectedApprovalCode"



							if(ExecuteFrontEndSplits)
								invoke SplitFESDistributions PayablesInvoiceDistribution in foreground
									invoked.PrmCompany		= Company
									invoked.PrmInvoice		= PayablesInvoice
								if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts)
									include FESReleaseEdit

							if (MatchProcessType.Expense 
							and ProcessOneSourceValid)


								if (initiating action != "PayablesInvoiceDistributionImport.LoadInterfaceDistributions")
									if (UseOldMethod)	


										if (instance count of PayablesInvoiceDistributionRel < 10)						
											invoke ProcessOneSourceForExpense PayablesInvoiceDistribution in foreground	
												invoked.PrmCompany			= Company									
												invoked.PrmPayablesInvoice	= PayablesInvoice							
												invoked.PrmRunInForeground	= true
										else
											invoke FastUpdate															
												invoked.BackgroundProcessing = BackgroundProcessing.TaxProcessing		
											invoke ProcessOneSourceForExpense PayablesInvoiceDistribution in background group (TaxProcessing)	
												invoked.PrmCompany			= Company									
												invoked.PrmPayablesInvoice	= PayablesInvoice							
												invoked.PrmRunInForeground	= false


									else	



										invoke FastUpdate															
											invoked.BackgroundProcessing = BackgroundProcessing.TaxPreProcessing	
										invoke ProcessOneSourceForExpenseInvoice in background 	
											invoked.PrmCompany			= Company									
											invoked.PrmVendor			= Vendor
											invoked.PrmPayablesInvoice	= PayablesInvoice							
											invoked.PrmReleaseOrSubmit	= 2		
											invoked.PrmAutoApprove		= AutoApprovePrm











							constraint (DueDate entered)  
								"DueDateIsRequired"

							if (AutoApprovePrm
							and MatchProcessType.Expense
							and !BackgroundProcessing.TaxProcessing		
							and !BackgroundProcessing.TaxPreProcessing	
							and !DoTaxAfter							
							and IsNotPrepayment)
								constraint (TotalDistributionAmount.TransactionTotal = InvoiceAmount.CurrencyAmount)
									"TotalDistributionAmountMustEqualInvoiceAmountWhenAutoApproveIsSelected"
							if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
							and MatchProcessType.Expense
							and IsNotPrepayment)
								confirmation required
									"TotalDistributionAmountIsNotEqualToInvoiceAmount.DoYouWantToProceed?"
							if (!MatchProcessType.Expense
							and !MatchProcessType.AOCOnly
							and !MatchPrepaymentMethod.PrepayFromInvoice
							and !InvoiceType.CreditMemo
							and !HasInvoiceLines)
								constraint (HasInvoiceMatchRuleGroup)
									"CannotSubmitInvoiceWithoutLinesForApprovalWhenUsingDetailMatching"

							if (!MatchProcessType.Expense
							and !TaxEntityUsesSabrix
							and !CallVertexByDocument 
							and  IsNotPrepayment)
								constraint (DerivedMatchInvoiceInBalanceWithinTolerance)
									"MatchInvoiceTotalMustEqualInvoiceAmount"

								LocalTaxDifference = TaxAmount - (DerivedInvoiceDetailTotalTaxAmount + DerivedMatchMiscellaneousTaxAmount + DerivedMatchAdditionalTax)
								if (LocalTaxDifference < 0)
									LocalTaxDifference *= -1

								if (LocalTaxDifference entered)
									constraint (LocalTaxDifference <= DerivedTaxToleranceAmount)
										"EnteredTaxAmountDoesNotMatchDetailTaxAmount"


							if (UseOldMethod)	
								include SubmitForApprovalEdits	
							else
								if (IsUpdateRecurringDetails)
									invoke UpdateRecurringInvoice
										invoked.NumberOfRecurrences = NumberOfRecurringInvoices
										invoked.RecurrenceFrequency = RecurringFrequency




							if (ForIntercompanyBilling)	
								include SubmitForApprovalOrReleaseIntercompanyBillingEdits	


							invoke CreateNoRules PayablesInvoiceAudit
								invoked.Company					= Company
								invoked.PayablesInvoice			= PayablesInvoice
								invoked.Resource				= actor.agent(Employee).Employee
								invoked.Status					= 11	
								invoked.Comment					= CommentPrm
								invoked.UpdateDate				= current timestamp
								invoked.InvoiceRoutingCodeGroup	= InvoiceRoutingCodeGroup	
								invoked.InvoiceRoutingCodeGroupLevel = InvoiceRoutingCodeGroupLevel	
								invoked.InvoiceRoutingCode		= RoutingCode				
								invoked.RoutingApprovalLevel	= RoutingApprovalLevel		
								invoked.InvoiceRoutingCategory	= RoutingCategory			










							SubmittedTimeStamp = current timestamp

							if (InvoiceType.MatchPrepayment)
								if (AutoApprovePrm)
									AutoApproved = true
									make transition to Approved			
									include CanInvoiceBeReleased	
									if (LocalReleaseInvoice)
										include PerformBudgetEditsForRelease
									else
										include PerformBudgetEditsForApproval
								else
									include PerformBudgetEditsForApproval

							else
							if  (TaxEntityUsesSabrix
							and  !MatchProcessType.Expense)
								if (AutoApprovePrm)
									make transition to Approved

								else
									make transition to PendingApproval


							else
							if (!MatchProcessType.Expense)
								include CanInvoiceBeReleased
								if  (MatchCompanyRel.PerformBudgetEditsForApproval)
									if (AutoApprovePrm)
										AutoApproved = true
									include PerformBudgetEditsForApproval
								else
								if (LocalReleaseInvoice)
									if (AutoApprovePrm)
										make transition to Approved

									else
										make transition to PendingApproval


							else
							if (!ProcessOneSourceValid)

								if (!BackgroundProcessing.TaxProcessing			
								and !BackgroundProcessing.TaxPreProcessing)		
									if (AutoApprovePrm)
										AutoApproved = true
										make transition to Approved			
										include CanInvoiceBeReleased	
										if (LocalReleaseInvoice)
											include PerformBudgetEditsForRelease
										else
											if (!ApprovalErrors)	
												include PerformBudgetEditsForApproval
									else
										if (!ApprovalErrors)	
											make transition to PendingApproval		
											include PerformBudgetEditsForApproval

								else
									if (UseOldMethod)	
										if (AutoApprovePrm)						
											make transition to Approved			
										else									
											make transition to PendingApproval	



										invoke FinishSubmitForApproval in background		
											run after background group (TaxProcessing2)
											invoked.AutoApprovePrm	= AutoApprovePrm




							if (AutoApprovePrm
							and (Status.Approved or Status.Released))
								RoutingCode = ""
								invoke CreateNoRules PayablesInvoiceAudit
									invoked.Company					= Company
									invoked.PayablesInvoice			= PayablesInvoice
									invoked.Status					= 6		
									invoked.UpdateDate				= current timestamp
									if (CommentPrm entered)
										invoked.Comment					= CommentPrm
									else
										invoked.Comment					= AutomaticallyApproved

						if (LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)
                            UsesMatrixApproval = true
                            if (HasDistributionAggregation)
								invoke Delete APDistributionAggregationRel
							invoke CalculateDistributionAggregation APDistributionForAggregationRel
							for each APDistributionAggregation set 
								invoke SubmitForApproval each



				BatchRelease is an Instance Action
					restricted
					Action Rules
						LocalBatchRelease = true
						if (RoutingRuleFound)
							RequiresApproval = true
							invoke SubmitForApproval
						else
							RequiresApproval = false
							invoke Release




				Release is an Instance Action			//	"Unreleased" State
					valid when (ReleaseActionValid)
					completion message is "<ActionCompleteMessage>"
					Action Rules


						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FundAccounting
						and PayablesInvoiceDistributionsRequiringCustodialAccountRel exists)		
							confirmation required
								"OneOrMoreDistributionsMayRequireCustodialAccount;Continue?"
						if (RoutingRuleFound		
						and !RequiresApproval
						and  initiating action != "CreateNextRecurringInvoice"
						and  initiating action != "PayablesInvoiceDistributionImport.LoadInterfaceDistributions"
						and	 initiating action != "PayablesInvoiceImport.InterfaceInvoices")	

							if  (initiating action != "EDIInvoiceMatchInterfaceInput.PostLoadInterface"	
							and  initiating action != "MatchInvoiceImport.PostLoadInterface"
							and  initiating action != "DocumentInterfaceInvoice.InvoiceUpdate")
								confirmation required
									"CannotRelease,RoutingRuleFound;Please_\Submit_\For_\Approval.IfRoutingRulesHaveBeenUpdated,Run_\Update_\Invoices_\Requiring_\ApprovalAction."
							RequiresApproval = true
						else


							if(ExecuteFrontEndSplits)
								invoke SplitFESDistributions PayablesInvoiceDistribution in foreground
									invoked.PrmCompany		= Company
									invoked.PrmInvoice		= PayablesInvoice
								if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts)
									include FESReleaseEdit

							if (MatchProcessType.Expense 
							and ProcessOneSourceValid)
								if (UseOldMethod)	


									if (initiating action != "PayablesInvoiceDistributionImport.LoadInterfaceDistributions")

										if (instance count of PayablesInvoiceDistributionRel < 10)						

											invoke ProcessOneSourceForExpense PayablesInvoiceDistribution in foreground	
												invoked.PrmCompany			= Company									
												invoked.PrmPayablesInvoice	= PayablesInvoice
												invoked.PrmRunInForeground	= true							
										else

											invoke FastUpdate															
												invoked.BackgroundProcessing = BackgroundProcessing.TaxProcessing		

											invoke ProcessOneSourceForExpense PayablesInvoiceDistribution in background group (TaxProcessing)	
												invoked.PrmCompany			= Company									
												invoked.PrmPayablesInvoice	= PayablesInvoice							
												invoked.PrmRunInForeground	= false




								else	


									invoke FastUpdate															
										invoked.BackgroundProcessing = BackgroundProcessing.TaxPreProcessing	

									invoke ProcessOneSourceForExpenseInvoice in background 	
										invoked.PrmCompany			= Company									
										invoked.PrmVendor			= Vendor
										invoked.PrmPayablesInvoice	= PayablesInvoice							
										invoked.PrmReleaseOrSubmit	= 1		





							if (UseOldMethod			
							or  !ProcessOneSourceValid)	
								if (!BackgroundProcessing.TaxProcessing			
								and !BackgroundProcessing.TaxPreProcessing)		
									if (LocalBatchRelease)  
										include MassInvoiceReleaseEdits
									else
										include EditsForReleaseInstanceAction

									if (InvoiceErrorsExists)
										ActionCompleteMessage = ReleaseNotCompleteMessage	
									else
										AutoApproved = true		
										include PerformBudgetEditsForRelease
										ActionCompleteMessage = ReleaseCompleteMessage
								else


									invoke ContinueReleaseAfterTaxProcessing in background group	
										on error
											invoke ResetAfterError
										run after background group (TaxProcessing2)
										invoked.PrmCompany			= Company
										invoked.PrmPayablesInvoice	= PayablesInvoice




					Exit Rules									

						if (UseOldMethod		
						and !RequiresApproval)		
							if (TaxEntityRel.IntrastatUsed)			
								include ProcessIntrastatDefaults	
								include EditIntrastatDataForRelease	
								include CreateIntrastatRecords		




#ifdef module idm
							if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.IDMConfiguration.UpdatePayablesInvoiceAttributes)
								if (IsIDMConfigured)
									invoke UpdateIDMAttributes
#endif




				UpdateMatchAmounts is an Update Action		//	"Unreleased" State
					default label is untranslatable
					bypass field rules
					restricted
					Exit Rules

				BatchMatch is an Instance Action			//	"Unreleased" State
					default label is untranslatable
					restricted
					Action Rules
						invoke BatchMatchSet
							invoked.PrmCompany = Company
							invoked.PrmPayablesInvoice = PayablesInvoice

				BatchAutoMatch is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						initialize TransientAutoMatchError
						invoke Match
							resume on error
								TransientAutoMatchError = error message

				InterfaceMatch is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						MatchPoint								is Alpha 1
							States
								RuleGroupOne	value is "1"
								RuleGroupTwo	value is "2"
								RuleGroupThree	value is "3"

					Entrance Rules
						include MatchEdits

					Action Rules
						invoke CreateOnly MatchWork
							assign result to NewMatchWork
							invoked.Company						= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.MatchPoint					= "1"
							invoked.ProcessMode					= "B"
							invoked.DocumentType				= "I"
							invoked.MatchPoint					= MatchPoint

						if   (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							if  (!MatchReconQueueRel exists)

								invoke CreateForBudgetProcessing MatchReconQueue
									invoked.Company				= Company
									invoked.PayablesInvoice		= PayablesInvoice
									invoked.MatchWork			= NewMatchWork.MatchWork
							else
							if  (MatchReconQueueRel.MatchWork not entered)

								invoke FastUpdate MatchReconQueueRel
									invoked.MatchWork			= NewMatchWork.MatchWork
						else
						if  (MatchReconQueueRel exists)
							invoke FastUpdate MatchReconQueueRel
								invoked.MatchWork			= NewMatchWork.MatchWork

					Exit Rules
						BackgroundProcessing = BackgroundProcessing.MatchInvoice
						LocalBoolean = false
						invoke BatchMatch NewMatchWork.MatchWork
							resume on error
								LocalBoolean 			= true
							invoked.PrmCompany 			= Company
							invoked.PrmInvoice 			= PayablesInvoice
							invoked.PrmMatchWork 		= NewMatchWork.MatchWork

						if  (LocalBoolean)
							invoke AddToResults OriginatingInterfaceRun
								invoked.Company 		= Company
								invoked.PayablesInvoice = PayablesInvoice










				Match is an Instance Action		
					valid when (MatchActionValidForUnreleasedInvoice)
					disable multiple instance selection
					completion message is "<LocalCompletionMessage>"
					Entrance Rules



						if (RoutingRuleFound		
						and !RequiresApproval)
							confirmation required
								"CannotMatch,RoutingRuleFound;Please_\Submit_\For_\Approval.IfRoutingRulesHaveBeenUpdated,Run_\Update_\Invoices_\Requiring_\ApprovalAction."
							RequiresApproval = true
						else
							include MatchEdits

							if  (MatchReconQueueRel exists
							and  MatchReconQueueRel.MatchWork entered)
								invoke PurgeDetail MatchWorkRel
								invoke Purge MatchWorkRel
								invoke FastUpdate MatchReconQueueRel
									initialize invoked.MatchWork

					Action Rules
						if (!RequiresApproval)		
							invoke CreateOnly MatchWork
								assign result to NewMatchWork
								invoked.Company						= Company
								invoked.PayablesInvoice				= PayablesInvoice
								invoked.MatchPoint					= "1"
								if (invoking action like "*Batch*")
									invoked.ProcessMode				= "B"
								else
									invoked.ProcessMode				= "O"
								invoked.DocumentType				= "I"


							if   (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
							or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								if  (!MatchReconQueueRel exists)

									invoke CreateForBudgetProcessing MatchReconQueue
										invoked.Company				= Company
										invoked.PayablesInvoice		= PayablesInvoice
										invoked.MatchWork			= NewMatchWork.MatchWork
								else
								if  (MatchReconQueueRel.MatchWork not entered)

									invoke FastUpdate MatchReconQueueRel
										invoked.MatchWork			= NewMatchWork.MatchWork
							else
							if  (MatchReconQueueRel exists)
								invoke FastUpdate MatchReconQueueRel
									invoked.MatchWork			= NewMatchWork.MatchWork

					Exit Rules
						if (!RequiresApproval)		
							if  ((InvoiceDetailCounter + InvoiceAddOnChargeCounter > NumberOfLinesForSetAction)
							or   (initiating action = "CreateAndReleaseUnreleased"))
								BackgroundProcessing = BackgroundProcessing.MatchInvoice
								invoke BatchMatch NewMatchWork.MatchWork
									invoked.PrmCompany 			= Company
									invoked.PrmInvoice 			= PayablesInvoice
									invoked.PrmMatchWork 		= NewMatchWork.MatchWork

							else
								invoke Match NewMatchWork.MatchWork

								if  (!BackgroundProcessing.MatchInvoice)
									if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
									or  !PayablesInvoice.GLCommitRelExists)
										invoke PurgeSetsAndResourceRecords MatchReconQueueRel
										invoke PurgeDetail MatchWorkRel
										invoke Purge MatchWorkRel


									if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
										LocalCompletionMessage = EditsCompleteBudgetEditsInProgress
									else
									if (MatchStatus.POCostMessagesExist)
										LocalCompletionMessage = MatchedPOCostMessagesExist
									else
									if (MatchStatus.MatchedOutOfTolerance)
										LocalCompletionMessage = MatchedOutOfTolerance
									else
									if (MatchStatus.MatchedInTolerance)
										LocalCompletionMessage = MatchedInTolerance
									else
									if (MatchStatus.MatchedWithAutoChargeback)
										LocalCompletionMessage = MatchedWithAutoChargeback
									else
										LocalCompletionMessage = MatchComplete
								else
									LocalCompletionMessage = MatchProcessingInBackgroundMsg

				ProcessMatchingFromBatch is an Instance Action 
					default label is untranslatable
					restricted
					Action Rules
						initialize TransientAutoMatchError
						invoke CreateOnly MatchWork
							assign result to NewMatchWork
							resume on error
								TransientAutoMatchError = error message
							invoked.Company						= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.MatchPoint					= "1"
							invoked.ProcessMode					= "B"
							invoked.DocumentType				= "I"

					Exit Rules
						if TransientAutoMatchError not entered
							invoke Match NewMatchWork.MatchWork
								resume on error
									TransientAutoMatchError = error message

						if TransientAutoMatchError not entered
							invoke CreateNoRules PayablesInvoiceAudit
								invoked.Company					= Company
								invoked.PayablesInvoice			= PayablesInvoice
								invoked.Resource				= actor.agent(Employee).Employee
								invoked.Status					= 16	
								invoked.UpdateDate				= current timestamp

						if  (!BackgroundProcessing.MatchInvoice)
							if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
							or  !PayablesInvoice.GLCommitRelExists)
								invoke PurgeSetsAndResourceRecords MatchReconQueueRel
								invoke PurgeDetail MatchWorkRel
								invoke Purge MatchWorkRel







				ApplyACreditToThisInvoice is an Instance Action	//	FSM-593 - "Unreleased" State - same action is in released state. Changes may need to be made in that section as well.
					valid when (IsInvoiceAvailableForCreditApplication)
					Parameters
						PrmCompany					is a PayablesCompany
						PrmVendor					is a Vendor
						PrmPayablesInvoice			is a PayablesInvoice
						PrmInvoiceNumber			is like Invoice
						PrmAppliedAmount			is an InternationalAmount
						PrmEnableAPToARInterface	is Boolean
						PrmBypassCMDueDateChange	is Boolean						
					Parameter Rules
						PrmCompany
							required
							initial value is this instance.Company
							force default to this instance.Company
						PrmVendor
							required
							initial value is this instance.Vendor
							force default to this instance.Vendor
						PrmPayablesInvoice
							constraint (PrmPayablesInvoice != this instance.PayablesInvoice)			
								"CannotApplyAnInvoiceToItself"
							constraint (PrmPayablesInvoice.Vendor = this instance.Vendor)
								"CreditMustBeForSameVendorAsInvoice"
							constraint (!IsOnHold)
								"CannotApply;InvoiceIsOnHold"
							if (PrmPayablesInvoice.IsOnHold)
								constraint (PrmPayablesInvoice.InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
									"CannotApply;CreditIsOnHold"
						PrmInvoiceNumber
							constraint (PrmPayablesInvoice !entered)
								"CannotSelectInvoiceRecordAndEnterInvoiceNumber"
						PrmAppliedAmount
							required
							initial value is PrmPayablesInvoice.first CreditNotAppliedRel.PaymentAmount.CurrencyAmount
							if (PrmAppliedAmount < 0)
								LocalAppliedAmount = PrmAppliedAmount * -1		
							else
								LocalAppliedAmount = PrmAppliedAmount

					Local Fields
						LocalAppliedAmount	is an InternationalAmount
					Action Rules
						constraint (!InvoiceSource.IntercompanyBilling)
							"CannotApplyACreditToThisInvoice;InvoiceIsFrom_\I\C\B"
						if (PrmInvoiceNumber entered)
							LocalInvoice = PrmInvoiceNumber
							constraint (LocalPayablesInvoiceNumberRel exists)
								"InvoiceNumberDoesNotExist"
						constraint (!MultiplePayablesInvoicePaymentRelExists)
							"MultiplePaymentsExist;MustApplyFromPaySchedule"
						if (PrmPayablesInvoice.IsOnHold
						and PrmPayablesInvoice.InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
							invoke TakeInvoiceOffHold PrmPayablesInvoice	
					
						invoke ApplyACreditToThisPayment first PayablesInvoicePaymentRel
							invoked.PrmCompany			= PrmCompany
							invoked.PrmVendor			= PrmVendor
							if (PrmInvoiceNumber entered)
								invoked.PrmPayablesInvoice	= first LocalPayablesInvoiceNumberRel.PayablesInvoice		
							else								
								invoked.PrmPayablesInvoice	= PrmPayablesInvoice
							invoked.PrmAppliedAmount	= LocalAppliedAmount	
							invoked.PrmEnableAPToARInterface = PrmEnableAPToARInterface
							invoked.PrmBypassCMDueDateChange = LocalBypassCMDueDateChange		

				ApplyAnInvoiceToThisCredit is an Instance Action	//	FSM-8885 - "Unreleased" State - same action is in released state. Changes may need to be made in that section as well.
					valid when (IsCreditAvailableForInvoiceApplication)
					Parameters
						PrmCompany					is a PayablesCompany
						PrmVendor					is a Vendor
						PrmPayablesInvoice			is a PayablesInvoice
						PrmInvoiceNumber			is like Invoice
						PrmAppliedAmount			is an InternationalAmount
						PrmBypassCMDueDateChange	is Boolean						
					Parameter Rules
						PrmCompany
							required
							initial value is this instance.Company
							force default to this instance.Company
						PrmVendor
							required
							initial value is this instance.Vendor
							force default to this instance.Vendor
						PrmPayablesInvoice


							constraint (PrmPayablesInvoice.Invoice != this instance.Invoice)
								"CannotApplyACreditToItself"
							constraint (PrmPayablesInvoice.Vendor = this instance.Vendor)
								"InvoiceMustBeForSameVendorAsCredit"
							if (IsOnHold)
								constraint (InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
									"CannotApply;CreditIsOnHold"
							constraint (!PrmPayablesInvoice.IsOnHold)
								"CannotApply;InvoiceIsOnHold"
							constraint (!PrmPayablesInvoice.MultiplePayablesInvoicePaymentRelExists)
								"CannotApply;MultipleInvoicePaymentsExistAndMustApplyFromInvoicePaySchedule"
						PrmInvoiceNumber

							constraint (PrmPayablesInvoice !entered)
								"CannotSelectInvoiceRecordAndEnterInvoiceNumber"
						PrmAppliedAmount
							required
							initial value is PrmPayablesInvoice.first PayablesInvoicePaymentRel.PaymentAmount.CurrencyAmount
							if (PrmAppliedAmount < 0)
								LocalAppliedAmount = PrmAppliedAmount * -1		
							else
								LocalAppliedAmount = PrmAppliedAmount
					Local Fields
						LocalAppliedAmount	is an InternationalAmount
					Action Rules
						constraint (!InvoiceSource.IntercompanyBilling)
							"CannotApplyAnInvoiceToThisCredit;CreditMemoIsFrom_\I\C\B"
						if (PrmInvoiceNumber entered)
							LocalInvoice = PrmInvoiceNumber
							constraint (LocalPayablesInvoiceNumberRel exists)
								"InvoiceNumberDoesNotExist"

						constraint (DiscountAmount.CurrencyAmount !entered)
							"CannotApply;CreditHasDiscount"

						if (IsOnHold
						and InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
							invoke TakeInvoiceOffHold 	

						invoke ApplyAnInvoiceToThisCredit first CreditNotAppliedRel
							invoked.PrmCompany			= PrmCompany
							invoked.PrmVendor			= PrmVendor
							if (PrmInvoiceNumber entered)
								invoked.PrmPayablesInvoice	= first LocalPayablesInvoiceNumberRel.PayablesInvoice
							else
								invoked.PrmPayablesInvoice	= PrmPayablesInvoice
							invoked.PrmAppliedAmount	= LocalAppliedAmount
							invoked.PrmBypassCMDueDateChange = LocalBypassCMDueDateChange		


	




























				Prorate is an Instance Action		//	"Unreleased" State

					default label is untranslatable
					restricted
					Parameters
						PurchasingCompany		is a PayablesCompany
						PrmSpreadAddOnCharge	is an AddOnCharge
							default label is "AddOnCharge"
						ProrateAmount			is an InternationalAmount
						ProrateAccount			is a FinanceCodeBlock
						PrmTaxCode				is a TaxCode
							default label is "TaxCode"
						PrmTaxableAmount		is an InternationalAmount
							default label is "Taxable"

					Local Fields
						LocalTotDistTranAmt 		is an InternationalAmount
						LocalTotDistBaseAmt 		is an InternationalAmount




						ApinwsProrateEntSwitch		is Boolean
						ApinwsTaxblDistribCnt		is Numeric size 6
						ApinwsProrateWorkTxbl		is an InternationalAmount
						ApinwsSaveCurrSub			is Numeric size 3

					Parameter Rules
						PurchasingCompany
							initial value is Company
							force default to Company
						ProrateAccount
							force default to TransientProrateAccount
						ProrateAmount
							force default to TransientProrateAmount
							if (PrmSpreadAddOnCharge entered)
								required
									"MustEnterSpreadAmountWithSpread_\A\O\CCode"		
							if (ProrateAmount entered)
								constraint (!MatchProcessType.Service)
									"Use_\A\O\CTabToEnter_\A\O\CFor_\Service_\Invoice"	
								constraint (!MatchProcessType.DropShip)
									"Use_\A\O\CTabToEnter_\A\O\CFor_\Service_\Invoice"	
						PrmSpreadAddOnCharge
							force default to TransientAddOnCharge
							if (PrmSpreadAddOnCharge entered)
								constraint (PrmSpreadAddOnCharge.Active)
									"A\O\CCodeIsInactive"                               
								if (!PrmSpreadAddOnCharge.SpreadMethod.Amount)
									constraint (MatchProcessType.ReceiptMatch
									or          MatchProcessType.AOCOnly)
										"CannotAdd,SpreadTypeMustBeSetToAmount"      	
							if (ContractRebateGroup.ContractGroup entered)
								cannot be entered
									"A\O\CNotAllowedOnRebateInvoice"					
							if (PrmSpreadAddOnCharge entered
							and ProrateAmount entered)
								constraint (MatchProcessType.Expense)
									"ProrateFor_\Exp_\InvOnly;Use_\A\O\CApprovalScreenToAdd_\A\O\C"       
						PrmTaxCode
							constraint (MatchProcessType.Expense)
								"ProrateTaxIsForExpenseInvoiceOnly"                    
							initialize CalculateTax
							CalculateTax.CallingModule	= "Payables_Invoice"
							CalculateTax.TaxCode		= PrmTaxCode
							CalculateTax.TaxEntity 		= Company.AccountingEntity
							CalculateTax.InvoiceDate	= InvoiceDate
							CalculateTax.PaymentDate	= InvoiceDate
							CalculateTax.Function		= "I"
							CalculateTax.System			= "AP"
							include LoadVertexGlobalInputFields
							include DisplayCalculateTaxInput
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
							include DisplayCalculateTaxOutput
							if (!CalculateTax.DoTaxCalculation)
								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>"
								constraint (CalculateTax.TaxType != "C")
									"CannotUseCalculatedRateTaxCodeToProrate"             
							if (PrmTaxCode entered)
								constraint (ApinwsTaxblDistribCnt > 1)
									"MustHaveAtLeast_2TaxableDistribLinesToProrateTax"    

						PrmTaxableAmount
							if (TaxCode not entered)
								cannot be entered
									"CannotEnterProrateTaxableAmtWithoutProrateTaxCode"   
							default to ApinwsProrateWorkTxbl
							constraint (PrmTaxableAmount <= ApinwsProrateWorkTxbl)
								"ProrateAmountCannotBeMoreThanTheTotalTaxableAmount"   

					Action Rules
						constraint (PayablesInvoiceDistributionRel exists)
							"MustEnterAtLeast_1DistributionAmtToSpread" 

						LocalTotDistTranAmt = TotalDistributionAmount.TransactionTotal
						LocalTotDistBaseAmt = TotalDistributionAmount.FunctionalTotal

						if (PrmSpreadAddOnCharge entered)
							if (PrmSpreadAddOnCharge.AddOnChargeType.Allowance
							and ProrateAmount > 0)
								ProrateAmount = ProrateAmount * -1

						if (PrmTaxableAmount entered)
							ApinwsProrateEntSwitch = true
						else
							ApinwsProrateEntSwitch = false

						initialize ApinwsTaxblDistribCnt
						initialize ApinwsEligibleAmt
						initialize ApinwsProrateWorkTxbl
						for each PayablesInvoiceDistributionRel  
							if ((each.TaxIndicator.Taxable
							or   each.TaxIndicator.None)
							and each.DistributionAmount.CurrencyAmount entered
							and each.TaxCode not entered)
								ApinwsTaxblDistribCnt 	+= 1
								ApinwsEligibleDistAmt	+= each.DistributionAmount.CurrencyAmount
								ApinwsProrateWorkTxbl	+= each.DistributionAmount.CurrencyAmount

						if (PrmTaxCode entered
						and ApinwsProrateEntSwitch)
							ApinwsProrateMultiplier = PrmTaxableAmount / ApinwsEligibleDistAmt
						else
							ApinwsProrateMultiplier = 1

						if (PrmTaxCode entered)
							initialize CalculateTax
							CalculateTax.CallingModule	= "Payables_Invoice"
							CalculateTax.Function		= "C"
							CalculateTax.TaxEntity 		= Company.AccountingEntity
							CalculateTax.InvoiceDate	= InvoiceDate
							CalculateTax.PaymentDate	= InvoiceDate
							CalculateTax.TaxCode		= PrmTaxCode
							CalculateTax.TaxableAmount	= PrmTaxableAmount
							CalculateTax.System			= "AP"
							include LoadVertexGlobalInputFields
							include DisplayCalculateTaxInput
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax
							include DisplayCalculateTaxOutput
							if (!CalculateTax.DoTaxCalculation)
								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>"
							ApinwsCalcProrateTax = CalculateTax.OutputTotalTaxAmount
							if (TaxableAmount not entered)
								TaxableAmount = PrmTaxableAmount

						if (ProrateAccount not entered
						and PrmSpreadAddOnCharge.LandedAddOnCharge)	
							initialize ApinwsTotalProrateAmt
							include 414AddUpApds


							for each PayInvDistribAdjProrateRel 
								if (each.TaxCode entered
								and each.TaxSequenceNumber entered)
									DoNothing = true
								else
									if (MatchProcessType.Expense
									and each.TaxCode entered
									and each.TaxIndicator not entered)
										DoNothing = true
									else
										ApinwsXXTranTotDist -= each.DistributionAmount.CurrencyAmount
										ApinwsXXProrateDist = ProrateAmount / ApinwsTotalProrateAmt * each.DistributionAmount.CurrencyAmount

										invoke Update each
											if (each.TaxableAmount = each.DistributionAmount.CurrencyAmount)						
												invoked.TaxableAmount					= each.TaxableAmount + ApinwsXXProrateDist	
											invoked.DistributionAmount.CurrencyAmount 	= each.DistributionAmount.CurrencyAmount + ApinwsXXProrateDist
											invoked.GLTransactionAmount 				= each.GLTransactionAmount + ApinwsXXProrateDist

										ApinwsXXTranTotDist += each.DistributionAmount.CurrencyAmount  	

										if (!MatchProcessType.Expense
										or  each.TaxIndicator entered)
											if (TaxCode entered
											or  ApinwsTaxIndSw)
												ApinwsWorkTaxSeqNbr = last PayablesInvoiceDistributionSet10Rel.TaxSequenceNumber
												ApwsTaxSeqNbr = ApinwsWorkTaxSeqNbr
												invoke 417BProrateAocTax each
													invoked.ProrateAccount	= ProrateAccount
													invoked.AddOnCharge		= PrmSpreadAddOnCharge

						else  
							initialize ApinwsTotalProrateAmt
							include 414AddUpApds
							initialize ProrateDetail

							for each PayInvDistribAdjProrateRel 
								if (each.TaxCode entered
								and each.TaxIndicator.None)
									DoNothing = true
								else

									Sub = 1
									ApinwsXXAcctUnitFoundSwitch = false
									ApinwsTblMaxUnits = 261
									while (Sub <= ApinwsTblMaxUnits
									and    !ApinwsXXAcctUnitFoundSwitch)
										if (ProrateDetail.ProrateTable[Sub].ApinwsTableAcctUnit not entered
										and ProrateDetail.ProrateTable[Sub].ApinwsTableDistCompany not entered)
											ProrateDetail.ProrateTable[Sub].ApinwsTableAcctUnit 	= each.DistributionAccount
											ProrateDetail.ProrateTable[Sub].ApinwsTableDistCompany	= each.DistributionAccount.ToAccountingEntity
											ApinwsSaveCurrSub = Sub
											ApinwsXXAcctUnitFoundSwitch = true

										if (ProrateDetail.ProrateTable[Sub].ApinwsTableAcctUnit		= each.DistributionAccount
										and ProrateDetail.ProrateTable[Sub].ApinwsTableDistCompany	= each.DistributionAccount.ToAccountingEntity)
											ApinwsSaveCurrSub = Sub
											ApinwsXXAcctUnitFoundSwitch = true

										Sub += 1


									Sub1 = ApinwsSaveCurrSub
									ProrateDetail.ProrateTable[Sub1].ApinwsTableDistAmt += each.DistributionAmount.CurrencyAmount


							initialize ApwsTranTotTax
							initialize ApwsTranTotDist
							initialize ApwsBaseTotDist
							Sub = 1
							ApinwsTblMaxUnits = 261
							while (Sub <= ApinwsTblMaxUnits
							and    ProrateDetail.ProrateTable[Sub].ApinwsTableAcctUnit entered)
								invoke Create PayablesInvoiceDistribution
									assign result to NewPayablesInvoiceDistribution
									invoked.Company																= Company
									invoked.Vendor																= Vendor
									invoked.PayablesInvoice														= PayablesInvoice
									invoked.AccrualCode															= AccrualCode
									invoked.InvoiceType															= InvoiceType
									invoked.InvoiceCurrency														= InvoiceCurrency
									invoked.ProcessLevel														= ProcessLevel
									invoked.DistributionDate													= DistributionDate
									if (ProrateAccount entered)																		
										invoked.DistributionAccount												= ProrateAccount	
									else																							
										invoked.DistributionAccount												= ProrateDetail.ProrateTable[Sub].ApinwsTableAcctUnit
									invoked.DistributionType													= "D"
									invoked.DistributionAmount.CurrencyAmount									= ProrateDetail.ProrateTable[Sub].ApinwsTableDistAmt / ApinwsTotalProrateAmt * ProrateAmount
									invoked.DistributionAmount.KeepRateOnly										= true
									invoked.DistributionAmount.ExchangeDate										= InvoiceAmount.ExchangeDate 
									invoked.PostingOption														= Vendor.VendorClass.PostingOption
									invoked.Description															= Description
									invoked.AddOnCharge															= PrmSpreadAddOnCharge
									if (PrmSpreadAddOnCharge.TaxCode entered)	
										invoked.TaxCode															= PrmSpreadAddOnCharge.TaxCode
										invoked.TaxableAmount													= ProrateDetail.ProrateTable[Sub].ApinwsTableDistAmt / ApinwsTotalProrateAmt * ProrateAmount
										invoked.TaxIndicator													= 2
									else
										invoked.TaxIndicator													= 1

								ApwsTranTotDist += NewPayablesInvoiceDistribution.DistributionAmount.CurrencyAmount

								Sub += 1

							if (ProrateAmount != ApwsTranTotDist)
								ApinwsDiff = ProrateAmount - ApwsTranTotDist
								ApinwsXXTranTotDist -= last PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount
								LocalAmount = last PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount + ApinwsDiff
								invoke Update last PayablesInvoiceDistributionRel
									invoked.DistributionAmount.CurrencyAmount = LocalAmount
									if (InvoiceCurrency = Company.Currency)	
										invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount = LocalAmount
									else
										invoked.DistributionAmount.KeepRateOnly		= true
										invoked.DistributionAmount.ExchangeDate		= InvoiceAmount.ExchangeDate 

								ApinwsXXTranTotDist += last PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount



							ApinwsXXTranTotDist += ApwsTranTotDist

							if (ApinwsTaxIndSwitch
							and PrmSpreadAddOnCharge.TaxCode entered)
								for each PayablesInvoiceDistributionRel 
									invoke 417BProrateAocTax each
										invoked.ProrateAccount		= ProrateAccount
										invoked.AddOnCharge			= PrmSpreadAddOnCharge
										invoked.ApinwsXXProrateDist	= each.DistributionAmount.CurrencyAmount








				RecreateRecurringInvoice is a Create Action		
					default label is untranslatable
					restricted									//	"Unreleased" State
					Action Rules
						TransientRecreateRecurring	= true
						ActionType = ActionType.CreateType
						include CreateAndUpdateRules
					Exit Rules
						include CreateExitRules



				CreateDistributionCopy is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmPayablesInvoice	is a PayablesInvoice
					Local Fields
						NewRecurringDistribution is a PayablesInvoiceDistribution view
					Action Rules
						LocalRecurringPayablesInvoice	= PrmPayablesInvoice
						for each RecurringInvoiceDistributionsByTypeRel
							invoke Create PayablesInvoiceDistribution set
								assign result to NewRecurringDistribution
								fill in fields from each
									except invoked.TransientReferenceToThisInstance
									except invoked.Status
									except invoked.GltObjId
									except invoked.DistributionCode
									except invoked.PayablesInvoiceDistributionObjectID
								invoked.PayablesInvoice		= this instance.PayablesInvoice
								invoked.Status				= 0
								invoked.GLTransactionAmount	= each.DistributionAmount.CurrencyAmount
								invoked.GLFinanceCodeBlock	= each.DistributionAccount


				FinishRecurringUpdate is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmSuffix				is a Suffix
						PrmDistributionCode		is a PayablesDistributionCode
						PrmTaxCode				is like TaxCode
					Action Rules
						Suffix				= PrmSuffix
						DistributionCode	= PrmDistributionCode
						TaxCode				= PrmTaxCode


				ChangeInvoiceAmount	is an Instance Action	
					valid when (ChangeInvoiceAmountValid)












					Action Rules
						constraint (Invoice !entered)		
							"ChangeInvoiceAmountIsNoLongerValid"




































				RefreshTotals is an Instance Action			
					restricted

					Action Rules
						constraint (false)
							"RefreshTotalsActionIsDeprecated"











				FrontEndSplitDistributions	is an Instance Action
					valid when(AllowFrontEndSplit)
					Action Rules
						invoke SplitFESDistributions PayablesInvoiceDistribution in foreground
							invoked.PrmCompany		= Company
							invoked.PrmInvoice		= PayablesInvoice

				DeleteFrontEndSplitDistributions	is an Instance Action
					valid when(HasFrontEndSplitDistributions)
					Action Rules
						invoke DeleteFrontEndSplitDistributions PayablesInvoiceDistribution
							invoked.PrmCompany		= Company
							invoked.PrmInvoice		= PayablesInvoice








			PendingApproval is a State
				Entrance Rules


					if (invoking action like "PayablesInvoiceSpeedEntry.Process*"		
					or  initiating action like "PayablesInvoiceSpeedEntry.Process*")		

						include InitiateApprovalProcessFromSpeedEntry					
					else
					if  (invoking action like "MassInvoiceReleaseAction"				
					or  initiating action like "MassInvoiceReleaseAction")				

						include InitiateApprovalProcessFromMassInvoiceRelease			
					else

						if (!LocalInvoiceRoutingRuleRel.UseResponsibilityMatrix)
							include InitiateApprovalProcess

				Update is an Update Action				//	"PendingApproval" state
					completion message is "<ActionCompleteMessage>"
					valid when (AllowUpdateOnApprove)
					Entrance Rules
						OldInvoiceAmount = old InvoiceAmount.CurrencyAmount
						OldTaxAmount = old TaxAmount
					Action Rules

						ActionType = ActionType.UpdateType
						include CreateAndUpdateRules
						include UpdateRules
						include MatchPurchaseOrderCheck
					Exit Rules
						if  (!MatchProcessType.Expense
						and  InvoiceAmount.CurrencyAmount changed)
							invoke InvoiceUpdate
								invoked.FromPayablesInvoiceUpdateAction			= true

						if (IsNotPrepayment)
							include CreateAndUpdateExitRules
							include UpdateExitRules
							include Messaging

						include CheckPrepaids
						include 530MoveAppaymentData  


				ReassignApprover is an Instance Action		//	"PendingApproval" state
					valid when (ReassignApproverValid)
					Parameters
						PrmRoutingCode				is a InvoiceRoutingCode
						PrmReassignToApprovalLevel	is an InvoiceRoutingCodeResource
						PrmComment					is Alpha size up to 100
					Parameter Rules
						PrmRoutingCode
							initial value is RoutingCode
						PrmReassignToApprovalLevel
							required
					Action Rules
						RoutingApprovalLevel = PrmReassignToApprovalLevel.ApprovalLevel
						ReassignToApprovalLevel = PrmReassignToApprovalLevel				
						LastApprovalComment = PrmComment
						invoke TakeAction Workunit
							invoked.Action	= "Reassign"
							invoked.Subject = "Reassign Approver"
							invoked.Message = "Reassign Approver"


				PflowApprove is an Instance Action		//	"PendingApproval" state
					default label is untranslatable
					restricted
					completion message is "<ActionCompleteMessage>"
					Action Rules
						ActionCompleteMessage = InvoiceApproved


						make transition to Approved		

						if (UsesMatrixApproval)
							include SendApprovedEmailMessage

						if (InvoiceType.MatchPrepayment)
							include ValidateMatchInvoiceBalanceEdits	
						else
							include CanInvoiceBeReleased	

						if (MatchProcessType.Expense
						or  InvoiceType.MatchPrepayment)
							if (LocalReleaseInvoice)
								include PerformBudgetEditsForRelease


				ManualApprovePlus is an Instance Action		//	"PendingApproval" state			
					default label is "ManualApprove"
					valid when (ApproveValidPlus)
					subject is ApproveInvoice
					completion message is "<ActionCompleteMessage>"
					Parameters
						PrmComment		is Alpha size up to 500	
					Action Rules
						if (Company.VendorGroup.RequireReasonCodeForManualInvoiceApproval)
							constraint (reason code entered)
								"ReasonCodeIsRequiredForManualApproval"
							constraint (PrmComment entered)
								"CommentIsRequiredForManualApproval"

						action comment = PrmComment
						invoke ManualApprove

				ManualApprove is an Instance Action		//	"PendingApproval" state
					valid when (ApproveValid)
					subject is ApproveInvoice		
					completion message is "<ActionCompleteMessage>"

					Action Rules
						ActionCompleteMessage = InvoiceApproved
						if (TotalDistributionAmount.TransactionTotal != InvoiceAmount.CurrencyAmount
						and MatchProcessType.Expense
						and IsNotPrepayment
						and Company.VendorGroup.DistributionEntryOnApproval)
							confirmation required
								"TotalDistributionAmountIsNotEqualToInvoiceAmount.DoYouWantToProceed?"
						if (!MatchProcessType.Expense
						and !DerivedMatchInvoiceInBalanceWithinTolerance)
							confirmation required
								"MatchInvoiceTotalIsNotEqualToInvoiceAmount.DoYouWantToProceed?"
						invoke CreateNoRules PayablesInvoiceAudit
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.Resource				= actor.agent(Employee).Employee
							invoked.Status					= 13		
							invoked.UpdateDate				= current timestamp
							invoked.ActionReason			= reason code					
							invoked.Comment					= action comment				

						if (!UsesMatrixApproval)
							cancel InvoiceApproval process
							initialize Workunit
						if (MatchProcessType.Expense
						or  InvoiceType.MatchPrepayment)
							if (InvoiceType.MatchPrepayment)
								include ValidateMatchInvoiceBalanceEdits
							else
								include CanInvoiceBeReleased
							if (LocalReleaseInvoice)
								make transition to Approved		
								if (UsesMatrixApproval)
									invoke ManualApproveAPDistributionAggregation
									LocalManualApprove = true
									include SendApprovedEmailMessage
								include PerformBudgetEditsForRelease
							else
								if (!InvoiceType.MatchPrepayment)
									if (Company.VendorGroup.DistributionEntryOnApproval)
										make transition to Approved

									else
										ActionCompleteMessage	= NotApprovedMessage
						else
							make transition to Approved


				PflowReject is an Instance Action		//	"PendingApproval" state
					default label is untranslatable
					restricted
					subject is RejectInvoice
					reason code required
					action comment required
					completion message is "InvoiceRejected"
					Action Rules
						LocalRejectReason = reason code
						LocalRejectComment = action comment
						invoke CreateNoRules PayablesInvoiceAudit
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.Resource				= actor.agent(Employee).Employee
							invoked.Status					= 3		
							invoked.UpdateDate				= current timestamp
							invoked.Comment					= action comment
							invoked.ActionReason			= reason code
							invoked.InvoiceRoutingCodeGroup	= InvoiceRoutingCodeGroup	
							invoked.InvoiceRoutingCodeGroupLevel = InvoiceRoutingCodeGroupLevel	
							invoked.InvoiceRoutingCode		= RoutingCode				
							invoked.RoutingApprovalLevel	= RoutingApprovalLevel		
							invoked.Workunit				= Workunit					
							invoked.InvoiceRoutingCategory	= RoutingCategory			

						include SendRejectionEmailMessage

						include PerformBudgetEditsForReject			

					Exit Rules
						make transition to Rejected


				MatrixPflowReject is an Instance Action		//	"PendingApproval" state
					restricted
					Parameters
						PrmRejectComment	is Alpha size up to 500
						PrmRejectReason		is AlphaUpper 20
						PrmWorkunit			is a PfiWorkunit	
						PrmSummaryAccount	is a FinanceCodeBlock
					Action Rules
						LocalRejectReason = PrmRejectReason
						LocalRejectComment = PrmRejectComment
						LocalSummaryAccount	= PrmSummaryAccount
						invoke CreateNoRules PayablesInvoiceAudit
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.Resource				= actor.agent(Employee).Employee
							invoked.Status					= 3		
							invoked.UpdateDate				= current timestamp
							invoked.Comment					= PrmRejectComment
							invoked.ActionReason			= PrmRejectReason
							invoked.Workunit				= PrmWorkunit
							invoked.InvoiceRoutingCategory	= RoutingCategory

						include SendRejectionEmailMessage

						include PerformBudgetEditsForReject

					Exit Rules
						invoke RejectOtherAPDistributionAggregation
						make transition to Rejected

				ManualReject is an Instance Action		//	"PendingApproval" state
					valid when (RejectValid)
					subject is RejectInvoice
					reason code required
					action comment required
					completion message is "InvoiceRejected"
					Action Rules
						invoke CreateNoRules PayablesInvoiceAudit
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.Resource				= actor.agent(Employee).Employee
							invoked.Status					= 14		
							invoked.UpdateDate				= current timestamp
							invoked.Comment					= action comment
							invoked.ActionReason			= reason code

						LocalRejectReason = reason code
						LocalRejectComment = action comment
						LocalFinanceResource = actor.agent(Employee).Employee
						include SendRejectionEmailMessage

						include PerformBudgetEditsForReject			
						
						if (UsesMatrixApproval)
							invoke ManualRejectAPDistributionAggregation
						else
							cancel InvoiceApproval process
							initialize Workunit

					Exit Rules
						make transition to Rejected



			Rejected is a State

				Entrance Rules


					RejectedTimeStamp = current timestamp
					RejectReason = DerivedRejectionReason
					initialize ResponsiblePerson
					initialize ResponsibleTeam
					initialize ResponsibleRole
					initialize InvoiceRoutingCodeGroup			
					initialize InvoiceRoutingCodeGroupLevel		
					initialize RoutingCode						
					initialize RoutingApprovalLevel
					initialize LastApprovalComment
					initialize Workunit
					ReassignToPreviousApprover = false			
					invoke CreateCXMLInvoiceStatus
						resume on error

				Delete is a Delete Action
					valid when(!InvoiceSource.IntercompanyBilling)
					Entrance Rules
						constraint (!InvoiceSource.IntercompanyBilling)
							"CannotDelete;InvoiceIsFrom_\I\C\B"
						include DeleteDistributions
						if (first GLCommitRel.Status.Released)			
							invoke RejectInvoice GLCommit				
								invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmUniqueID					= UniqueID
								invoked.PrmAccountingEntity			= Company.AccountingEntity
						include DeleteEntranceRules


				RestoreRejectedInvoice is an Instance Action
					valid when (ReinstateValid)
					subject is ReinstateInvoice
					completion message is "InvoiceRestoredAndAvailableForUpdate"
					Entrance Rules
						constraint (not BudgetEditInProgress)
							"CannotRestore;BudgetEditInProgress"
						constraint (ProcessingTemplatesRel not exists)	
							"CannotRestoreRejectInvoiceWhileTemplatesAreProcessing"						
					Action Rules
						invoke CreateNoRules PayablesInvoiceAudit
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.Resource				= actor.agent(Employee).Employee
							invoked.Status					= 8		
							invoked.UpdateDate				= current timestamp

						include ResetFieldsForRestore

						if (UsesMatrixApproval)
							if (HasDistributionAggregation)
								invoke Delete APDistributionAggregationRel
							UsesMatrixApproval = false

					Exit Rules
						make transition to Unreleased


				CancelRejectedInvoice is an Instance Action   
					valid when (CancelActionValid)
					completion message is "CancelInvoiceComplete"
					subject is CancelInvoice
					reason code required
					action comment required
					Parameters
						InvoiceCancelDate		is Date
					Parameter Rules
						InvoiceCancelDate
							initial value is current corporate date
							required
								"CancelDateRequired"
					Action Rules
						constraint (!InvoiceSource.IntercompanyBilling)
							"CannotCancel;InvoiceIsFrom_\I\C\B"
						if (PayablesInvoice.CompanySystemClosingControlRel.Control)
							constraint (InvoiceCancelDate within PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate)
								"CancelDateOf<LocalCancelDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate.End>"
						constraint (!BackgroundProcessing.MatchInvoice)
							"CannotCancelInvoiceIfMatchInProgress"
						constraint (!InterfaceInProcess)
							"CannotCancelInvoiceIfInterfaceInProcess"
						constraint (!BudgetEditInProgress)		
							"CannotCancelInvoiceIfBudgetEditInProcess"

						include DeleteDistributions
						if (first GLCommitRel.Status.Released)			
							invoke RejectInvoice GLCommit				
								invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmUniqueID					= UniqueID
								invoked.PrmAccountingEntity			= Company.AccountingEntity
						include DeleteEntranceRules
						LocalCancelSequence = 9999
						if (PayablesInvoiceHistorySuffixRel exists)
							for each PayablesInvoiceHistorySuffixRel
								if (each.PayablesInvoiceHistory.CancelSequence = LocalCancelSequence)
									decrement LocalCancelSequence
						else
							LocalCancelSequence = (9999 - instance count of PayablesInvoiceCancelRel)
						CancelSequence = LocalCancelSequence
						CancelDate = InvoiceCancelDate
						initialize VendorReturn
						make transition to Cancelled


			Approved is a State

				Entrance Rules

					ApprovedTimeStamp = current timestamp
					initialize ResponsiblePerson
					initialize ResponsibleTeam
					initialize ResponsibleRole
					initialize LastApprovalComment
					initialize Workunit


					if (!MatchProcessType.Expense)
						invoke CheckAndCreateReconciliationQueueRecord

				Release is an Instance Action		
					valid when (ApprovedReleaseValid)
					completion message is "<ActionCompleteMessage>"
					Action Rules
						include EditsForReleaseInstanceAction
						include PerformBudgetEditsForRelease

					Exit Rules
#ifdef module idm
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.IDMConfiguration.UpdatePayablesInvoiceAttributes)
							if (IsIDMConfigured)
								invoke UpdateIDMAttributes
#endif

				BatchAutoMatch is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						initialize TransientAutoMatchError
						invoke Approved.Match
							resume on error
								TransientAutoMatchError = error message

				Match is an Instance Action		
					valid when (AllowMatch)
					disable multiple instance selection
					completion message is "<LocalCompletionMessage>"
					Entrance Rules




						include MatchEdits

						if  (MatchReconQueueRel exists
						and  MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail MatchWorkRel
							invoke Purge MatchWorkRel
							invoke FastUpdate MatchReconQueueRel
								initialize invoked.MatchWork

					Action Rules

						invoke CreateOnly MatchWork
							assign result to NewMatchWork
							invoked.Company						= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"

						if   (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							if  (!MatchReconQueueRel exists)

								invoke CreateForBudgetProcessing MatchReconQueue
									invoked.Company				= Company
									invoked.PayablesInvoice		= PayablesInvoice
									invoked.MatchWork			= NewMatchWork.MatchWork
							else
							if  (MatchReconQueueRel.MatchWork not entered)

								invoke FastUpdate MatchReconQueueRel
									invoked.MatchWork			= NewMatchWork.MatchWork
						else
						if (MatchReconQueueRel exists)
							invoke FastUpdate MatchReconQueueRel
								invoked.MatchWork			= NewMatchWork.MatchWork

					Exit Rules
						if  (InvoiceDetailCounter + InvoiceAddOnChargeCounter > NumberOfLinesForSetAction)
							BackgroundProcessing = BackgroundProcessing.MatchInvoice
							invoke BatchMatch NewMatchWork.MatchWork
								invoked.PrmCompany 			= Company
								invoked.PrmInvoice 			= PayablesInvoice
								invoked.PrmMatchWork 		= NewMatchWork.MatchWork
						else
							invoke Match NewMatchWork.MatchWork

							if  (!BackgroundProcessing.MatchInvoice)
								if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
								or  !PayablesInvoice.GLCommitRelExists)
									invoke PurgeSetsAndResourceRecords MatchReconQueueRel
									invoke PurgeDetail MatchWorkRel
									invoke Purge MatchWorkRel


								if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
									LocalCompletionMessage = EditsCompleteBudgetEditsInProgress
								else
								if (MatchStatus.POCostMessagesExist)
									LocalCompletionMessage = MatchedPOCostMessagesExist
								else
								if (MatchStatus.MatchedOutOfTolerance)
									LocalCompletionMessage = MatchedOutOfTolerance
								else
								if (MatchStatus.MatchedInTolerance)
									LocalCompletionMessage = MatchedInTolerance
								else
								if (MatchStatus.MatchedWithAutoChargeback)
									LocalCompletionMessage = MatchedWithAutoChargeback
								else
									LocalCompletionMessage = MatchComplete
							else
								LocalCompletionMessage = MatchProcessingInBackgroundMsg


				InterfaceMatch is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						MatchPoint								is Alpha 1
							States
								RuleGroupOne	value is "1"
								RuleGroupTwo	value is "2"
								RuleGroupThree	value is "3"
					Entrance Rules
						include MatchEdits

					Action Rules
						invoke CreateOnly MatchWork
							assign result to NewMatchWork
							invoked.Company			= Company
							invoked.PayablesInvoice	= PayablesInvoice
							invoked.MatchPoint		= "1"
							invoked.ProcessMode		= "B"
							invoked.DocumentType	= "I"
							invoked.MatchPoint		= MatchPoint

						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							if (!MatchReconQueueRel exists)

								invoke CreateForBudgetProcessing MatchReconQueue
									invoked.Company			= Company
									invoked.PayablesInvoice	= PayablesInvoice
									invoked.MatchWork		= NewMatchWork.MatchWork
							else
							if (MatchReconQueueRel.MatchWork not entered)

								invoke FastUpdate MatchReconQueueRel
									invoked.MatchWork = NewMatchWork.MatchWork
						else
						if (MatchReconQueueRel exists)
							invoke FastUpdate MatchReconQueueRel
								invoked.MatchWork = NewMatchWork.MatchWork

					Exit Rules
						BackgroundProcessing = BackgroundProcessing.MatchInvoice
						invoke BatchMatch NewMatchWork.MatchWork
							invoked.PrmCompany		= Company
							invoked.PrmInvoice		= PayablesInvoice
							invoked.PrmMatchWork	= NewMatchWork.MatchWork

				Update is an Update Action	

					completion message is "<ActionCompleteMessage>"
					Entrance Rules
						OldInvoiceAmount = old InvoiceAmount.CurrencyAmount
						OldTaxAmount = old TaxAmount
					Action Rules

						ActionType = ActionType.UpdateType
						include CreateAndUpdateRules
						include UpdateRules
					Exit Rules
						if (!MatchProcessType.Expense
						and InvoiceAmount.CurrencyAmount changed)
							invoke InvoiceUpdate
								invoked.FromPayablesInvoiceUpdateAction = true

						if (IsNotPrepayment)
							include CreateAndUpdateExitRules
							include UpdateExitRules
							include Messaging

						include CheckPrepaids
						include 530MoveAppaymentData	


				CancelApprovedInvoice is an Instance Action	
					completion message is "CancelInvoiceComplete"
					valid when (IsCancelable)
					subject is CancelInvoice
					reason code required
					action comment required
					Parameters
						InvoiceCancelDate is Date

					Parameter Rules
						InvoiceCancelDate
							initial value is current corporate date
							required
								"CancelDateRequired"	

					Entrance Rules
						constraint (CancelDate !entered)	
							"CannotCancel;CancelDateAlreadyEntered"
						CancelDate = InvoiceCancelDate

					Action Rules			
						LocalCompany			= Company
						LocalVendor				= Vendor
						LocalInvoice			= Invoice
						LocalSuffix				= Suffix
						LocalThisCancelSequence	= CancelSequence
						LocalCancelDate			= InvoiceCancelDate

						include CancelInvoiceEdits

						include PerformInvoiceCancel
						make transition to Cancelled

					Exit Rules
						invoke PerformSnapshotUpdates
						include UpdateErrorRecords






			Released is a State

				Entrance Rules

					ReleasedTimeStamp = current timestamp
					log untranslatable:"Invoice<Invoice>;Created<create date>;ReleasedDate<ReleasedTimeStamp>."
					if (ApprovedTimeStamp not entered)
						ApprovedTimeStamp = current timestamp
					initialize ResponsiblePerson
					initialize ResponsibleTeam
					initialize ResponsibleRole
					initialize LastApprovalComment
					initialize Workunit

					if (old Status = 5)
						NextSentence = true 
					else 
					if (!MatchProcessType.Expense
					or  IsChargeback)
						if  (!FirstPurchaseOrder.CurrencyExchangeSetPoint.Receiving)
							include AdjustDistributionCurrencyAmountsForMatch
						else
						if (MatchPrepayment)
							NextSentence = true 
						else 
							invoke UpdateCurrencyAmountsFromMatch
					else 
						include AdjustDistributionCurrencyAmounts

					if (!MatchProcessType.Expense
					and  InvoiceType.MatchPrepayment)
						invoke CheckAndCreateReconciliationQueueRecord

					if (MatchProcessType.Expense)
						invoke CreateNoRules PayablesInvoiceAudit
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.Resource				= actor.agent(Employee).Employee

							if (Status = 5
							or  old Status = 5)
								invoked.Status				= 18		
							else
								invoked.Status				= 15		

							invoked.UpdateDate				= current timestamp
					else
						invoke CreateNoRules PayablesInvoiceAudit
							invoked.Company					= Company
							invoked.PayablesInvoice			= PayablesInvoice
							invoked.Resource				= actor.agent(Employee).Employee

							if (Status = 5
							or  old Status = 5)
								invoked.Status				= 18		
							else
								invoked.Status				= 15		
							invoked.UpdateDate				= current timestamp

					invoke CreateCXMLInvoiceStatus
						resume on error

					invoke CreateCXMLPaymentProposalRequest
						resume on error


				Field Rules			//	For "Released" State
					AllowableAmountForDiscount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>;UsePaySchedule."
					InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					CashCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountAmount.CurrencyAmount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountAmount2
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountAmount3
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountDate
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountPercent
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					InvoiceCurrency
						cannot be changed
							"CannotChangeCurrency;DeleteAndRe-\Add"              
					PurchaseFromLocation
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					RemitToCode
						if (PaymentsBeyondOpenStatusExist)
							cannot be changed
								"CannotChangeRemitToCode;PaymentsHaveBeenMade"	
					RevalueCurrency
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					TaxableAmount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"

				SubType IsNotPrepayment Field Rules
					AccrualCode
						if  (PaymentsBeyondOpenStatusExist
						or	 CancelledOrPostedDistributionsExist
						or	 PaymentGainLossHasBeenDone)
							cannot be changed
								"CannotChangeAccrCodeOfPosted,Paid,OrRevaluedInvoice"	 
					DistributionCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DueDate
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					InvoiceDate
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					InvoiceReference
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"



					RetainageAccrualCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					RuleGroup
						if (action != "UpdateAfterMatch"
						and action != "MatchCurrencyRefresh")
							cannot be changed
								"<InvoiceReleasedCannotChangeThisField>"
					TaxAdjustment
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					TermsCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					VendorReturn
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"

				BatchAutoMatchRelease is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						initialize TransientAutoMatchError
						invoke Released.Match
							resume on error
								TransientAutoMatchError = error message

				Update is an Update Action		//	"Released" State
					completion message is "<ActionCompleteMessage>"
					valid when (AllowUpdateToReleased)
					Field Rules
						ProcessLevel
							if (PaymentsBeyondOpenStatusExist)
								cannot be changed
									"ProcessLevelCannotBeChanged;ThereArePaymentsBeyondReleasedStatus"	   
					Entrance Rules
						OldInvoiceAmount 		= old InvoiceAmount.CurrencyAmount
						OldTaxAmount 			= old TaxAmount

					Action Rules

						if (InvoiceAmount.CurrencyAmount changed)
							constraint (!IsUpdatableRecurringInvoice)
								"UseAction_'\Update_\Recurring_\Invoice_\Amount'_ToChangeTheInvoiceAmount"
						constraint (!InvoiceAmount.CurrencyAmount changed)
							"<InvoiceReleasedCannotChangeThisField>"
						constraint (!CancelSequence entered)
							"CannotMaintainACanceledInvoice"                        
						if (CancelSequence entered)		
							constraint (!Suffix = 999
							and			!Suffix = 888)
								"CannotMaintainACancelled_\P\OInvoice"				

						constraint (!TaxEntityRel.ThirdParty.TaxEngine)
							"CannotMaintainTaxEngineInvoice"

						ActionType = ActionType.UpdateType

						if (!TaxEntityRel.IntrastatUsed)
							constraint (UnloadingPort = blank
							and			NatureOfTransactionCode = blank
							and			StatisticalProcedure = blank
							and			TransportMode = blank
							and			ShipTerm = blank)
								"TaxEntityNotDefinedForIntrastatReporting;CannotEnterDataOnIntrastatTab"    
						if (!MatchProcessType.Expense)
							constraint (UnloadingPort = blank
							and			NatureOfTransactionCode = blank
							and			StatisticalProcedure = blank
							and			TransportMode = blank
							and			ShipTerm = blank)
								"Intrastat_\InformationNotAllowedOnThisTypeOf_\Invoice"        

						if (!BypassMatch
						and MatchProcessType.Service)
							constraint (UnloadingPort = blank
							and 		NatureOfTransactionCode = blank
							and			StatisticalProcedure = blank
							and 		TransportMode = blank
							and 		ShipTerm = blank)
								"Intrastat_\InformationNotAllowedOnThisTypeOf_\Invoice"        
						if (TaxEntityRel.IntrastatUsed)
							include ProcessIntrastatDefaults
						if (IntrastatNumber entered)
							include EditIntrastatInvoice

						if (IsRecurringInvoice)
							if (InvoiceAmount.CurrencyAmount changed)
								invoke Update first PayablesInvoicePaymentRel
									invoked.TransientRecurrUpdateSwitch		= true
									invoked.PaymentAmount.CurrencyAmount	= InvoiceAmount.CurrencyAmount


					Exit Rules
						include EditsForReleasedInvoice		
						include AdjustVendorBalance
						include UpdateExitRules
						include Messaging
						invoke TriggerSupplierInvoiceBOD







				Unrelease is an Instance Action		//	"Released" State
					default label is untranslatable
					restricted
					Action Rules
						constraint (!BadStatusSwitch
						and			!Status.Historical
						and			CancelSequence not entered)
							"CannotUnreleaseInvoice;InvoicePaymentsOrDistributionsNotInCorrectStatus"
						constraint (MatchProcessType.Expense)
							"CannotUnreleaseAMatchInvoice"		

						include SubtractFromVendorBalances
						include UnReleaseDistributionsAndPayments
						make transition to Unreleased
						invoke TriggerSupplierInvoiceBOD



					Exit Rules




				UpdateInvoiceNumber is an Instance Action		//	"Released" State	IEFIN-54067
					valid when (AllowUpdateInvoiceNumber)
					completion message is "InvoiceHasBeenUpdatedTo<Invoice>"
					Parameters
						PrmInvoice is an Invoice
							default label is "NewInvoiceNumber"
					Parameter Rules
						PrmInvoice
							required
							constraint (PrmInvoice != old Invoice)
								"MustEnterANewInvoiceNumber"
					Entrance Rules
						constraint (!InvoiceType.PrepaymentCredit)
							"CannotChangeInvoiceNumberOnPrepaymentCredit"
						constraint (PayablesInvoiceChargebackRel !exists
						and			!Suffix = 111)
							"CannotChangeInvoiceNumberOnInvoicesWithChargebacks"
						constraint (CancelledPOInvoiceRel !exists
						and			!Suffix = 888
						and			!Suffix = 999)
							"CannotChangeInvoiceNumberOnCancelledPurchaseOrderInvoices"
				        constraint (!TaxEntityRel.ThirdParty.TaxEngine)
				        	"ActionNotValidForTaxEngine"
						if (IsRecurringInvoice)
							constraint (Suffix < 1)
								"CannotChangeInvoiceNumberOnProcessedRecurringInvoices"
						constraint (PaymentsHaveBeenScheduledRel !exists
						and			PaymentsHaveBeenMadeRel !exists
						and			AmountPaid not entered)
							"InvoiceIsPaidOrScheduledToBePaid;CannotChangeInvoiceNumber"
						constraint (!TaxEntityRel.ThirdParty.TaxEngine)
							"CannotMaintainTaxEngineInvoice"
						if (!IsRecurringInvoice
						and !IsChargebackSubType
						and Suffix != 888
						and Suffix != 999
						and !InvoiceType.PrepaymentCredit)
							constraint (DuplicateRecurringInvoiceRel !exist)
								"RecurringInvoiceExistsForThisVendor"
						constraint (PayablesCreditMemoRel !exists
						and			PayablesCreditMemo2Rel !exists)
							"CannotChangeInvoiceNumberIfPaymentsHaveBeenApplied"
						constraint (InvoiceSource.APAutomation		
						or			InvoiceSource.Manual
						or          InvoiceSource.InvoiceInterface
						or          InvoiceSource.EDI
						or			InvoiceSource.ImagingSystem)
							"UpdateInvoiceNumberOnlyAllowedOnManual,APAutomatedOrImagingSystemInvoices"

					Action Rules
						Invoice			= PrmInvoice

						constraint (PayablesInvoiceHistoryRel !exists)
							"Invoice<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"                
						if (Company.VendorGroup.InvoiceNumberEdit.CompanyVendor)
							LocalHasAssets = false					
							if (MatchProcessType.Expense)
								if (MatchPurchaseOrderInvoicesRel exists)
									for each MatchPurchaseOrderInvoicesRel
										if (each.HasAssets)
											LocalHasAssets = true
								else
								if  (first MatchPurchaseOrderInvoicesRel exists
								and  first MatchPurchaseOrderInvoicesRel.HasAssets)
									LocalHasAssets = true
					
							if ((Vendor.AllowDuplicateInvoiceByDate					
							or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
							and !LocalHasAssets
							and !IsRecurringInvoice)			
								constraint (!PayablesInvoiceDuplicateInvoiceByDateRel exists)
									"Invoice<Invoice>AlreadyExistsForCompany<Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
							else
								constraint (!PayablesInvoiceDuplicateInvoiceRel exists)
									"Invoice<Invoice>AlreadyExistsForCompany<Company>AndVendor<Vendor>"
						else
							if ((Vendor.AllowDuplicateInvoiceByDate					
							or  Vendor.VendorClass.AllowDuplicateInvoiceByDate)
							and !LocalHasAssets
							and !IsRecurringInvoice)			
								constraint (!PayablesInvoiceDuplicateInvoiceByVendorByDateRel exists)
									"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorByDateRel.Company>,Vendor<Vendor>AndInvoiceDate<InvoiceDate>"
							else
								constraint (!PayablesInvoiceDuplicateInvoiceByVendorRel exists)
									"Invoice<Invoice>AlreadyExistsForCompany<first PayablesInvoiceDuplicateInvoiceByVendorRel.Company>AndVendor<Vendor>"

						invoke PerformSnapshotUpdates
						include BuildTextIndexes
					Exit Rules		
						include PerformDocumentManagementWebserviceCalls
						invoke TriggerSupplierInvoiceBOD



#ifdef module idm
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.IDMConfiguration.UpdatePayablesInvoiceAttributes)
							if (IsIDMConfigured)
								invoke UpdateIDMAttributes
#endif



				UpdateRecurringInvoiceAmount is an Instance Action		//	"Released" State
					default label is "UpdateRecurringInvoiceAmount"
					confirmation required
						"ThisActionWillCancelThisInvoiceAndCreateAReplacementInvoiceRequiringDistributionMaintenanceBeforeReleasingIt.Continue?"
					completion message is "UpdateRecurringInvoiceAmountComplete"
					valid when (IsUpdatableRecurringInvoice)
					subject is CancelInvoice
					reason code required
					action comment required









					Parameters
						NewInvoiceAmount	is an InternationalAmount
					Parameter Rules
						NewInvoiceAmount
							required
							constraint (NewInvoiceAmount != InvoiceAmount.CurrencyAmount)
								"MustEnterAChangedAmount"
					Local Fields
						NewRecurringInvoiceView		is a PayablesInvoice view

					Action Rules
						constraint (this instance.PayablesInvoice = last PayablesInvoiceRecursRel.PayablesInvoice)
							"CannotChangeThisOccurrance;CanOnlyChangeTheLast(Current)OccurrenceOfARecurringInvoice."


						invoke Unreleased.RecreateRecurringInvoice 
							assign result to NewRecurringInvoiceView
							fill in fields from this instance
								except invoked.UniqueID
								except invoked.PayablesInvoice
								except invoked.VoucherNumber
								except invoked.Status				
								except invoked.CancelSequence
								except invoked.DistributionCode		
								except invoked.TotalPaymentAmount	
								except invoked.TotalDistributionAmount	
								except invoked.TotalTaxAmount
								except invoked.TotalTaxableAmount
								except invoked.TaxCode
								except invoked.TaxAmount
								except invoked.TaxableAmount
								except invoked.InvoiceAmount		
							invoked.PayablesInvoice					= PayablesInvoice + 1	
							invoked.Suffix 							= Suffix + 1	
							invoked.InvoiceAmount.CurrencyAmount	= NewInvoiceAmount
							invoked.InvoiceAmount.KeepRateOnly		= true
							invoked.InvoiceAmount.ExchangeDate		= InvoiceAmount.ExchangeDate 
							if (DiscountDate !entered)		
								initialize invoked.AllowableAmountForDiscount

						NewRecurringInvoice		= NewRecurringInvoiceView.PayablesInvoice

						invoke Unreleased.CreateDistributionCopy NewRecurringInvoiceRel
							invoked.PrmPayablesInvoice 	= this instance.PayablesInvoice


						invoke Cancel
							invoked.InvoiceCancelDate	= current corporate date


						invoke Unreleased.FinishRecurringUpdate NewRecurringInvoiceRel
							invoked.PrmSuffix	= Suffix	
							if (HasDistributionCode)
								invoked.PrmDistributionCode = DistributionCode
							if (TaxCode entered)
								invoked.PrmTaxCode			= TaxCode

						invoke PerformSnapshotUpdates NewRecurringInvoice	
						include UpdateErrorRecords






				ApplyACreditToThisInvoice is an Instance Action	//	"Released" State - same action is in Unreleased state. Changes may need to be made in that section as well.
					valid when (IsInvoiceAvailableForCreditApplication)
					Parameters
						PrmCompany					is a PayablesCompany
						PrmVendor					is a Vendor
						PrmPayablesInvoice			is a PayablesInvoice
						PrmInvoiceNumber			is like Invoice		
						PrmAppliedAmount			is an InternationalAmount
						PrmEnableAPToARInterface	is Boolean
					Parameter Rules
						PrmCompany
							required
							initial value is this instance.Company
							force default to this instance.Company
						PrmVendor
							required
							initial value is this instance.Vendor
							force default to this instance.Vendor
						PrmPayablesInvoice


							constraint (PrmPayablesInvoice != this instance.PayablesInvoice)	
								"CannotApplyAnInvoiceToItself"
							constraint (PrmPayablesInvoice.Vendor = this instance.Vendor)	
								"CreditMustBeForSameVendorAsInvoice"
							constraint (!IsOnHold)
								"CannotApply;InvoiceIsOnHold"		
							if (PrmPayablesInvoice.IsOnHold)
								constraint (PrmPayablesInvoice.InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
									"CannotApply;CreditIsOnHold"	
						PrmInvoiceNumber							

							constraint (PrmPayablesInvoice !entered)		
								"CannotSelectInvoiceRecordAndEnterInvoiceNumber"		
						PrmAppliedAmount
							required
							initial value is PrmPayablesInvoice.first CreditNotAppliedRel.PaymentAmount.CurrencyAmount	
							if (PrmAppliedAmount < 0)
								LocalAppliedAmount = PrmAppliedAmount * -1		
							else
								LocalAppliedAmount = PrmAppliedAmount

					Local Fields
						LocalAppliedAmount	is an InternationalAmount
					Action Rules
						if (PrmInvoiceNumber entered)			
							LocalInvoice = PrmInvoiceNumber		
							constraint (LocalPayablesInvoiceNumberRel exists)		
								"InvoiceNumberDoesNotExist"		
						constraint (!MultiplePayablesInvoicePaymentRelExists)		
							"MultiplePaymentsExist;MustApplyFromPaySchedule"







						if (PrmPayablesInvoice.IsOnHold
						and PrmPayablesInvoice.InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
							invoke TakeInvoiceOffHold PrmPayablesInvoice	

						invoke ApplyACreditToThisPayment first PayablesInvoicePaymentRel
							invoked.PrmCompany			= PrmCompany
							invoked.PrmVendor			= PrmVendor
							if (PrmInvoiceNumber entered)		
								invoked.PrmPayablesInvoice	= first LocalPayablesInvoiceNumberRel.PayablesInvoice		
							else								
								invoked.PrmPayablesInvoice	= PrmPayablesInvoice		
							invoked.PrmAppliedAmount	= LocalAppliedAmount	
							invoked.PrmEnableAPToARInterface = PrmEnableAPToARInterface






				ApplyAnInvoiceToThisCredit is an Instance Action	//	"Released" State
					valid when (IsCreditAvailableForInvoiceApplication)
					Parameters
						PrmCompany					is a PayablesCompany
						PrmVendor					is a Vendor
						PrmPayablesInvoice			is a PayablesInvoice
						PrmInvoiceNumber			is like Invoice		
						PrmAppliedAmount			is an InternationalAmount
					Parameter Rules
						PrmCompany
							required
							initial value is this instance.Company
							force default to this instance.Company
						PrmVendor
							required
							initial value is this instance.Vendor
							force default to this instance.Vendor
						PrmPayablesInvoice


							constraint (PrmPayablesInvoice.Invoice != this instance.Invoice)
								"CannotApplyACreditToItself"
							constraint (PrmPayablesInvoice.Vendor = this instance.Vendor)
								"InvoiceMustBeForSameVendorAsCredit"
							if (IsOnHold)
								constraint (InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
									"CannotApply;CreditIsOnHold"		
							constraint (!PrmPayablesInvoice.IsOnHold)
								"CannotApply;InvoiceIsOnHold"		
							constraint (!PrmPayablesInvoice.MultiplePayablesInvoicePaymentRelExists)		
								"CannotApply;MultipleInvoicePaymentsExistAndMustApplyFromInvoicePaySchedule"
						PrmInvoiceNumber							

							constraint (PrmPayablesInvoice !entered)	
								"CannotSelectInvoiceRecordAndEnterInvoiceNumber"		
						PrmAppliedAmount
							required
							initial value is PrmPayablesInvoice.first PayablesInvoicePaymentRel.PaymentAmount.CurrencyAmount
							if (PrmAppliedAmount < 0)
								LocalAppliedAmount = PrmAppliedAmount * -1		
							else
								LocalAppliedAmount = PrmAppliedAmount
					Local Fields
						LocalAppliedAmount	is an InternationalAmount
					Action Rules
						if (PrmInvoiceNumber entered)			
							LocalInvoice = PrmInvoiceNumber		
							constraint (LocalPayablesInvoiceNumberRel exists)		
								"InvoiceNumberDoesNotExist"		

						constraint (DiscountAmount.CurrencyAmount !entered)		
							"CannotApply;CreditHasDiscount"







						if (IsOnHold
						and InvoiceHoldCode = Company.VendorGroup.PrepaymentHoldCode)
							invoke TakeInvoiceOffHold 	

						invoke ApplyAnInvoiceToThisCredit first CreditNotAppliedRel	
							invoked.PrmCompany			= PrmCompany
							invoked.PrmVendor			= PrmVendor
							if (PrmInvoiceNumber entered)		
								invoked.PrmPayablesInvoice	= first LocalPayablesInvoiceNumberRel.PayablesInvoice		
							else								
								invoked.PrmPayablesInvoice	= PrmPayablesInvoice		
							invoked.PrmAppliedAmount	= LocalAppliedAmount




				ApplyManualPayment is an Instance Action	
					completion message is "<ActionCompleteMessage>"
					valid when (ApplyManualPaymentIsValid)
					Parameters
						PrmPaymentNumber			is like TransactionNumber
							default label is "PaymentNumber"
						PrmPaymentDate				is an ExchangeDate
							default label is "PaymentDate"
						PrmTotalPaymentAmount		is an InternationalAmount
							default label is "TotalPayment"
						PrmCashCode					is like CashCode
							default label is "CashCode"
						PrmBankTransactionCode		is like BankTransactionCode
							default label is "PaymentCode"
					Parameter Rules
						PrmPaymentNumber
							required
						PrmPaymentDate
							required


						PrmCashCode
							initial value is CashCode
							default to CashCode
						PrmBankTransactionCode
							initial value is BankTransactionCode
							default to BankTransactionCode
					
					Local Fields
						LocalReservedPayment	is Boolean		
						
					Action Rules
						TransientPaymentNumber	= PrmPaymentNumber
						TransientPaymentDate	= PrmPaymentDate
						TransientPaymentAmount	= PrmTotalPaymentAmount
						CashCode				= PrmCashCode
						BankTransactionCode		= PrmBankTransactionCode
						
						if (first CashLedgerPayablesPaymentRel.IsManualReserved)	
							LocalReservedPayment	= true							
							invoke Delete first CashLedgerPayablesPaymentRel		
						
						if (CashLedgerPayablesPaymentRel exists)
							constraint (first CashLedgerPayablesPaymentRel.PaidVendor = PayVendor)
								"ManualPaymentRecordExistsForVendor:<first CashLedgerPayablesPaymentRel.PaidVendor>"
							constraint (first CashLedgerPayablesPaymentRel.IsUpdateable)
								"ManualPaymentNumberAlreadyUsed"
							constraint (first CashLedgerPayablesPaymentRel.PaymentDate = TransientPaymentDate)
								"ExistingManualPaymentExistsForPaymentDate:<first CashLedgerPayablesPaymentRel.PaymentDate>"
							constraint (first CashLedgerPayablesPaymentRel.PayCurrency = InvoiceCurrency)		
								"InvoiceCurrency<InvoiceCurrency>MustMatchTheCurrency<first CashLedgerPayablesPaymentRel.PayCurrency>OfAnyPreviouslyAppliedInvoices"
							invoke ApplySelectedPayablesToCheck MultiplePayablesInvoicePaymentRel
								invoked.PrmCashCode						= CashCode
								invoked.PrmCashLedgerPayablesPayment 	= CashLedgerPayablesPaymentRel.CashLedgerPayablesPayment
						else
							invoke Create CashLedgerPayablesPaymentRel
								assign result to LocalCashLedgerPayablesPayment
								invoked.CashLedgerPayablesPayment.BankTransactionCode 		= BankTransactionCode
								invoked.CashCode											= CashCode
								invoked.CashManagementGroup									= CashCode.CashManagementGroup
								invoked.TransactionNumber									= TransientPaymentNumber
								invoked.Company												= DerivedCashPostingCompany
								invoked.PayablesCompanyProcessLevel.PayablesCompany			= Company
								invoked.PayablesCompanyProcessLevel.PayablesProcessLevel	= ProcessLevel
								invoked.PayGroup											= PayGroup
								invoked.VendorGroup											= Vendor.VendorGroup
								invoked.PaidVendor											= PayVendor
								invoked.PaidName											= PayVendor.Vendor.VendorName
								invoked.Status												= 1
								invoked.RemitToCode											= RemitToCode
								invoked.InvoiceGroup										= InvoiceGroup
								invoked.PaymentAmount										= TransientPaymentAmount
								invoked.PaymentDate											= TransientPaymentDate
								invoked.PayCurrency											= InvoiceCurrency
								invoked.CheckType											= "M"
								invoked.TransientApplyToReserved							= LocalReservedPayment		

							invoke ApplySelectedPayablesToCheck MultiplePayablesInvoicePaymentRel
								invoked.PrmCashCode						= CashCode
								invoked.PrmCashLedgerPayablesPayment 	= LocalCashLedgerPayablesPayment.CashLedgerPayablesPayment

						if (first CashLedgerPayablesPaymentRel.PaymentAmount =  first CashLedgerPayablesPaymentRel.PaidAmountInvoiceCurrency)
							invoke Unreleased.Release first CashLedgerPayablesPaymentRel


				MarkAsPaid is an Instance Action			//	"Released" State		IEFIN-40063		
					valid when (AllowMarkAsPaid)
					confirmation required
						"ThisActionMarksAnInvoiceAsPaid.Continue?"
					completion message is "Invoice<Invoice>HasBeenMarkedAsPaid"
					Parameters
						PrmPostDate							is an ExchangeDate		
							default label is "PostDate"
						PrmTransactionNumber				is like TransactionNumber	
							default label is "TransactionNumber"
						PrmOverrideDefaultAccount			is a FinanceCodeBlockFull	
							default label is "OverrideDefaultAccount"
						PrmComment							is Alpha size up to 60
							default label is "Comment"
						PrmCalledFromReceivables			is Boolean
					Parameter Rules
						PrmPostDate
							initial value is current corporate date
							required
							LocalCompany	= Company
							if (CompanySystemClosingControl2Rel.Control)
								constraint (PrmPostDate within CompanySystemClosingControl2Rel.ValidEntryDate)
									"PostDateOf<PrmPostDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControl2Rel.ValidEntryDate.Begin>-<CompanySystemClosingControl2Rel.ValidEntryDate.End>"
						PrmTransactionNumber
							if (PrmTransactionNumber !entered)
								PrmTransactionNumber = MarkedPaidMessage
						PrmOverrideDefaultAccount
							required
							initial value is Company.MarkedAsPaidOffsetAccount
					Entrance Rules
						constraint (!BackgroundProcessing.MatchInvoice)
							"CannotMarkInvoiceAsPaidIfMatchInProgress"
						constraint (PaymentsHaveBeenScheduledRel !exists
						and			PaymentsHaveBeenMadeRel !exists)
							"InvoiceIsPaidOrScheduledToBePaid;CannotMarkInvoiceAsPaid"
						constraint (PayablesCreditMemoRel !exists
						and			PayablesCreditMemo2Rel !exists)
							"CannotMarkInvoiceAsPaidIfPaymentsHaveBeenApplied"
						if (PayablesInvoiceChargebackRel exists)		
							confirmation required
								"InvoiceHasRelatedChargebacks;ChargebackMayAlsoNeedToBeMarkedAsPaid-Continue?"
						if (Suffix = 111)
							confirmation required
								"CreditMemoIsAChargeback;RelatedInvoiceMayAlsoNeedToBemarkedAsPaid-Continue?"







						if (IsRecurringInvoice)
							constraint (Suffix < 1)
								"CannotMarkInvoiceAsPaidOnProcessedRecurringInvoices"
						if (!IsRecurringInvoice
						and !IsChargebackSubType
						and Suffix != 888
						and Suffix != 999
						and !InvoiceType.PrepaymentCredit)
							constraint (DuplicateRecurringInvoiceRel !exist)
								"RecurringInvoiceExistsForThisVendor;CannotMarkInvoiceAsPaid"
						constraint (TotalPaymentAmount.TransactionTotal	= InvoiceAmount.CurrencyAmount)	
							"CannotMarkAnOutOfBalanceInvoiceAsPaid"			
						constraint (!IntercompanyBillingDocumentRel.AutoApplyInProgress) 
							"CannotMarkInvoiceAsPaidIfIntercompanyBillingAutoApplyCreditInProgress"
					Action Rules
						if (PrmComment entered)
							invoke Create PayablesInvoiceComment
								invoked.Company			= Company
								invoked.PayablesInvoice	= this instance.PayablesInvoice
								invoked.Title			= "Marked as Paid"
								invoked.Type			= "N"
								invoked.SupplierCanView	= false
								invoked.Comment			= PrmComment

						invoke MarkPaymentAsPaid OpenPayablesInvoicePaymentRel
							invoked.PrmCheckDate				= PrmPostDate
							invoked.PrmCheckNumber				= PrmTransactionNumber
							invoked.PrmOverrideDefaultAccount	= PrmOverrideDefaultAccount

						if  (FromIntercompanyBilling
						and !PrmCalledFromReceivables)
							invoke Released.MarkAsPaid IntercompanyBillingDocumentRel.ReceivableInvoiceRel
								invoked.PrmPostDate				= PrmPostDate
								invoked.PrmAdjAccount			= PrmOverrideDefaultAccount
								invoked.PrmComment				= PrmComment
								invoked.PrmCalledFromPayables	= true
							invoke UpdateStatusToMarkedAsPaid IntercompanyBillingDocumentRel

					Exit Rules
						AmountPaid = InvoiceAmount.CurrencyAmount  
						if (InvoiceType.MatchPrepayment 
						and IsNotMatched) 
							NextSentence = true 
						else 
							make transition to Historical



				Match is an Instance Action		//	"Released" State
					valid when (AllowMatch)
					disable multiple instance selection
					completion message is "<LocalCompletionMessage>"


					Entrance Rules
						if (TaxEntityRel.ThirdParty.Sabrix)
							constraint (!TaxConfigurationRel.OneSourceVersionType.Original)
								"InvoiceHasBeenUnmatched.PleaseCancelAndCreateANewInvoice"

						include MatchEdits

						if  (MatchReconQueueRel exists
						and  MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail MatchWorkRel
							invoke Purge MatchWorkRel
							invoke FastUpdate MatchReconQueueRel
								initialize invoked.MatchWork

					Action Rules

						invoke CreateOnly MatchWork
							assign result to NewMatchWork
							invoked.Company						= Company
							invoked.PayablesInvoice				= PayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"

						if   (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							if  (!MatchReconQueueRel exists)

								invoke CreateForBudgetProcessing MatchReconQueue
									invoked.Company				= Company
									invoked.PayablesInvoice		= PayablesInvoice
									invoked.MatchWork			= NewMatchWork.MatchWork
							else
							if  (MatchReconQueueRel.MatchWork not entered)

								invoke FastUpdate MatchReconQueueRel
									invoked.MatchWork			= NewMatchWork.MatchWork
						else
						if  (MatchReconQueueRel exists)
							invoke FastUpdate MatchReconQueueRel
								invoked.MatchWork			= NewMatchWork.MatchWork

					Exit Rules
						if  (InvoiceDetailCounter + InvoiceAddOnChargeCounter > NumberOfLinesForSetAction)
							BackgroundProcessing = BackgroundProcessing.MatchInvoice
							invoke BatchMatch NewMatchWork.MatchWork
								invoked.PrmCompany 			= Company
								invoked.PrmInvoice 			= PayablesInvoice
								invoked.PrmMatchWork 		= NewMatchWork.MatchWork
						else
							invoke Match NewMatchWork.MatchWork

							if  (!BackgroundProcessing.MatchInvoice)
								if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
								or  !PayablesInvoice.GLCommitRelExists)
									invoke PurgeSetsAndResourceRecords MatchReconQueueRel
									invoke PurgeDetail MatchWorkRel
									invoke Purge MatchWorkRel

								if (MatchStatus.POCostMessagesExist)
									LocalCompletionMessage = MatchedPOCostMessagesExist
								else
								if (MatchStatus.MatchedOutOfTolerance)
									LocalCompletionMessage = MatchedOutOfTolerance
								else
								if (MatchStatus.MatchedInTolerance)
									LocalCompletionMessage = MatchedInTolerance
								else
								if (MatchStatus.MatchedWithAutoChargeback)
									LocalCompletionMessage = MatchedWithAutoChargeback
								else
									LocalCompletionMessage = MatchComplete
							else
								LocalCompletionMessage = MatchProcessingInBackgroundMsg

				AmendMatchInvoice is an Instance Action	//	"Released" State
					valid when (AllowAmendMatchInvoice)
					Action Rules
						make transition to Amended

				Cancel is an Instance Action	
					completion message is "CancelInvoiceComplete"
					valid when (IsValidForNonIDMCancel)
					subject is CancelInvoice
					reason code required
					action comment required
					Parameters
						InvoiceCancelDate is Date

					Parameter Rules
						InvoiceCancelDate
							initial value is current corporate date
							required
								"CancelDateRequired"	

					Local Fields




					Entrance Rules
						constraint (CancelDate !entered)	
							"CannotCancel;CancelDateAlreadyEntered"
				        constraint (!TaxEntityRel.ThirdParty.TaxEngine)
				        	"ActionNotValidForTaxEngine"
						CancelDate = InvoiceCancelDate

					Action Rules			

						LocalCompany				= Company
						LocalVendor					= Vendor
						LocalInvoice				= Invoice
						LocalSuffix					= Suffix
						LocalThisCancelSequence		= CancelSequence
						LocalCancelDate				= InvoiceCancelDate
						LocalActionComment			= action comment		

						include CancelInvoiceEdits

						if (!InvoiceSource.DebtorCreditMemo)		
							constraint (!PaymentsHaveBeenMadeRel exists)	
								"CannotCancel;InvoiceIsBeingProcessedForPayment"
						LocalRunProgram		= LocalRunProgram.CashRequirements
						constraint (!PaymentsHaveBeenScheduledRel exists)	
							"CannotCancel;InvoiceScheduledForPayment"
						LocalRunProgram		= LocalRunProgram.InvoiceDistributionClosing
						constraint (!ActivePayablesProcessingMonitorByCompanyRel exists)	
							"CannotCancel;InvoiceDistributionClosingRunning"

						include PerformInvoiceCancel
						make transition to Cancelled
						invoke TriggerSupplierInvoiceBOD




						if  (MatchAgingInvoiceRel exists)
							invoke Delete MatchAgingInvoiceRel
					Exit Rules
						invoke PerformSnapshotUpdates
						include UpdateErrorRecords




				IDMCancel is an Instance Action
					default label is "Cancel"
					valid when (IsValidForIDMCancel)
					Parameters
						PrmInvoiceCancelDate is Date
							default label is "CancelDate"
						PrmSubject		is a BusinessSubject
							default label is "Subject"
						PrmReasonCode 	is an ActionReason
							default label is "Reason"
						PrmComment		is Text
							default label is "Comment"

					Parameter Rules
						PrmInvoiceCancelDate
							initial value is current corporate date
							required
								"CancelDateRequired"
						PrmSubject
							initial value is "CancelInvoice"
							force default to "CancelInvoice"

						PrmReasonCode
							required
								"ReasonCodeRequired"

						PrmComment
							required
								"CommentRequired"

					Local Fields




					Action Rules
						TransientIDMWatermark 		= "Cancelled"
						LocalIncludeReceiptDetail	= "Y"
						LocalPrintComments			= "Y"
						LocalActionComment 			= PrmComment


						CancelDate 					= PrmInvoiceCancelDate 
						if (ValidForGeneratingChargeback
						and IDMDocumentExists)
							invoke GenerateChargeback
						initialize CancelDate		






						invoke Released.Cancel
							invoked.subject 			= PrmSubject
							invoked.reason code 		= PrmReasonCode
							invoked.action comment 		= LocalActionComment
							invoked.InvoiceCancelDate 	= PrmInvoiceCancelDate






			Cancelled is a State	
				Entrance Rules
					invoke CreateNoRules PayablesInvoiceAudit
						invoked.Company					= Company
						invoked.PayablesInvoice			= PayablesInvoice
						invoked.Resource				= actor.agent(Employee).Employee
						invoked.Status					= 12	
						invoked.UpdateDate				= current timestamp
						invoked.Comment					= action comment
						invoked.ActionReason			= reason code
					CancelledTimeStamp = current timestamp
					LocalActionComment = action comment
					invoke CreateCXMLInvoiceStatus
						resume on error

					initialize ResponsiblePerson
					initialize ResponsibleTeam
					initialize ResponsibleRole
					initialize Workunit

					if  (CancelSequence not entered)
						LocalCancelSequence = 9999
						if (PayablesInvoiceHistorySuffixRel exists)
							for each PayablesInvoiceHistorySuffixRel
								if (each.PayablesInvoiceHistory.CancelSequence = LocalCancelSequence)
									decrement LocalCancelSequence
						else
							if (PayablesInvoiceCancelRel exists)
								for each PayablesInvoiceCancelRel
									if (each.PayablesInvoice.CancelSequence = LocalCancelSequence)
										decrement LocalCancelSequence
						CancelSequence = LocalCancelSequence

					if  (CancelDate not entered)
						CancelDate = current corporate date
#ifdef module idm
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.IDMConfiguration.UpdatePayablesInvoiceAttributes)
						if (IsIDMConfigured)
							invoke UpdateIDMAttributes
#endif
				ReinstateCancelledInvoice is an Instance Action			
					Parameters
						PrmDistributionDate	is Date
							default label is "DistributionDate"

					Parameter Rules 
						PrmDistributionDate
							initial value is DistributionDate
							default to DistributionDate 

					Local Fields
						LocalPayablesInvoiceView				is a PayablesInvoice view
						LocalPayablesInvoiceDistributionView	is a PayablesInvoiceDistribution view
						LocalNewPayablesInvoice					is a PayablesInvoice
					Action Rules

						invoke CreateFromBatchNoParms
							assign result to LocalPayablesInvoiceView
							fill in fields from this instance
								except invoked.UniqueID
								except invoked.CancelSequence
								except invoked.PayablesInvoice
								except invoked.VoucherNumber
								except invoked.Status				
								except invoked.TotalTaxAmount
								except invoked.TotalTaxableAmount
								except invoked.TaxCode				
								except invoked.TaxAmount
								except invoked.TaxableAmount		
								except invoked.DiscountDate1
								except invoked.DiscountPercent1
								except invoked.DiscountAmount1
								except invoked.BaseDiscountAmount1
								except invoked.DiscountDate2
								except invoked.DiscountPercent2
								except invoked.DiscountAmount2
								except invoked.BaseDiscountAmount2
								except invoked.DiscountDate3
								except invoked.DiscountPercent3
								except invoked.DiscountAmount3
								except invoked.BaseDiscountAmount3
								except invoked.TermsCode 
								except invoked.AllowableAmountForDiscount	
								except invoked.SecondaryWithholding			
								except invoked.OriginatingInterfaceRun
								except invoked.CancelDate			
								except invoked.DistributionCode		
								except invoked.AutoApproved			
								except invoked.UsesMatrixApproval
								except invoked.MatchStatus
								except invoked.MatchLevel
								except invoked.MatchDate
								except invoked.MatchObjectID
							invoked.CancelSequence			= blank		
							invoked.DistributionDate		= PrmDistributionDate
							invoked.CreateFromBatchSwitch	= true
							invoked.BypassActiveResourceEdit = true		
							invoked.MatchPrepayment 		= MatchPrepayment 
							if (!MatchProcessType.Expense)
								invoked.TaxCode				= TaxCode 				
								invoked.TaxAmount			= TaxAmount 


						invoke FastUpdate LocalPayablesInvoiceView.PayablesInvoice		
							invoked.TaxCode					= TaxCode					
							invoked.TaxAmount				= RoundedTaxAmount			
							invoked.TaxableAmount			= RoundedTaxableAmount		
							invoked.TotalTaxAmount			= RoundedTotalTaxAmount		
							invoked.TotalTaxableAmount		= RoundedTotalTaxableAmount	
							invoked.TermsCode				= TermsCode					
							invoked.SecondaryWithholding	= SecondaryWithholding		
						
						invoke Create LocalPayablesInvoiceView.PayablesInvoice.PayablesInvoiceTaxRel		
							invoked.TaxCode						= this instance.PayablesInvoiceTaxRel.TaxCode
							invoked.ProductTaxCategory			= this instance.PayablesInvoiceTaxRel.ProductTaxCategory
							invoked.EnteredTaxAmount			= this instance.PayablesInvoiceTaxRel.EnteredTaxAmount
							invoked.EnteredTaxableAmount		= this instance.PayablesInvoiceTaxRel.EnteredTaxableAmount
							invoked.EnteredInvoiceAmount		= this instance.PayablesInvoiceTaxRel.EnteredInvoiceAmount
							invoked.EnteredTaxCategory			= this instance.PayablesInvoiceTaxRel.EnteredTaxCategory
							invoked.TaxSystemTaxAmount			= this instance.PayablesInvoiceTaxRel.TaxSystemTaxAmount
							invoked.TaxRate						= this instance.PayablesInvoiceTaxRel.TaxRate
							invoked.TaxMethod					= this instance.PayablesInvoiceTaxRel.TaxMethod
							invoked.LinkedToDistributions		= this instance.PayablesInvoiceTaxRel.LinkedToDistributions
							invoked.VATReverseCharge			= this instance.PayablesInvoiceTaxRel.VATReverseCharge
							invoked.ShortPaid					= this instance.PayablesInvoiceTaxRel.ShortPaid
							invoked.PayablesTaxTolerance		= this instance.PayablesInvoiceTaxRel.PayablesTaxTolerance
							invoked.TaxToleranceOverridden		= this instance.PayablesInvoiceTaxRel.TaxToleranceOverridden
							invoked.TaxResult					= this instance.PayablesInvoiceTaxRel.TaxResult
							invoked.TaxDetails					= this instance.PayablesInvoiceTaxRel.TaxDetails
							invoked.TaxSystemTaxableAmount		= this instance.PayablesInvoiceTaxRel.TaxSystemTaxableAmount		




							

						invoke Create PayablesInvoicePayment
							fill in fields from this instance
								except invoked.CancelSequence
							invoked.PayablesInvoice = LocalPayablesInvoiceView.PayablesInvoice
							invoked.PaymentAmount.CurrencyAmount = InvoiceAmount.CurrencyAmount


						if (!MatchProcessType.ServiceContract)
							for each PayablesInvoiceDistribution set
								if (each.DistributionType.Distribution)
									invoke CreateFromBatchNoParms PayablesInvoiceDistribution
										assign result to LocalPayablesInvoiceDistributionView
										fill in fields from each
											except invoked.Status
											except invoked.TransientReferenceToThisInstance
											except invoked.DistributionCode
											except invoked.TaxCode								
											except invoked.TaxIndicator							
											except invoked.TaxableAmount						
											except invoked.GltObjId
											except invoked.PayablesInvoiceDetail
											except invoked.PurchaseOrder
											except invoked.PurchaseOrderLine
											except invoked.PurchasingContract
											except invoked.ContractLine
											except invoked.AddOnCharge
											except invoked.MatchCreated
											except invoked.OriginalPOLineDistribution
											except invoked.OriginalContractLineDistribution
										invoked.PayablesInvoice	= LocalPayablesInvoiceView.PayablesInvoice
										invoked.BypassDefaultTaxIndicator = true	

									invoke FastUpdate LocalPayablesInvoiceDistributionView.PayablesInvoiceDistribution	
										invoked.TaxCode			= each.TaxCode											
										invoked.TaxIndicator	= each.TaxIndicator										
										invoked.TaxableAmount	= each.TaxableAmount
										invoked.TaxType 		= each.TaxType
									
									if (each.TaxType.Accrued																											
									and each.IsTaxDistribution)																											
										invoke FastUpdate LocalPayablesInvoiceView.PayablesInvoice																		
											invoked.TotalDistributionAmount.TransactionTotal -= LocalPayablesInvoiceDistributionView.DistributionAmount.CurrencyAmount	
								
								else 
									if (each.DistributionType.ExpenseAccrual)
										end for each

						for each PayablesInvoiceComment set
							invoke Create PayablesInvoiceComment
								fill in fields from each
								invoked.PayablesInvoice	= LocalPayablesInvoiceView.PayablesInvoice
						
						for each PayablesInvoiceDocument set	
							invoke Create PayablesInvoiceDocument
								fill in fields from each
								invoked.PayablesInvoice	= LocalPayablesInvoiceView.PayablesInvoice
						
						if (InvoiceHoldCode entered)											
							invoke PutInvoiceOnHold LocalPayablesInvoiceView.PayablesInvoice	
								invoked.HoldCode	= InvoiceHoldCode							




						LocalNewPayablesInvoice = LocalPayablesInvoiceView.PayablesInvoice
						
						commit transaction
					
						for each LocalNewPayablesInvoice.PayablesInvoiceDistribution set 
							if (each.IsTaxDistribution)
								if (each.IsAccruedTaxDistribution)
									invoke Update LocalNewPayablesInvoice.PayablesInvoiceTaxRel
										invoked.TotalAccruedTaxAmount 		+= each.DistributionAmount.CurrencyAmount
										if (!each.IsLinkedTaxDistribution								
										and !LocalNewPayablesInvoice.TaxCode.TaxType.TaxTableCode)		
											invoked.TotalAccruedTaxableAmount 	+= each.TaxableAmount		
								else
									invoke Update LocalNewPayablesInvoice.PayablesInvoiceTaxRel
										invoked.TotalInvoicedTaxAmount 		+= each.DistributionAmount.CurrencyAmount
										if (!each.IsLinkedTaxDistribution								
										and !LocalNewPayablesInvoice.TaxCode.TaxType.TaxTableCode)		
											invoked.TotalInvoicedTaxableAmount 	+= each.TaxableAmount		
							else	
								if (each.TaxIndicator.Taxable)
									if (each.TaxCode.TaxType.TaxTableCode)
										invoke Update LocalNewPayablesInvoice.PayablesInvoiceTaxRel
											invoked.TotalAccruedTaxableAmount 	+= each.TaxableAmount
											invoked.TotalInvoicedTaxableAmount 	+= each.TaxableAmount 
									else	
										if (each.TaxType.Accrued)
											invoke Update LocalNewPayablesInvoice.PayablesInvoiceTaxRel
												invoked.TotalAccruedTaxableAmount 	+= each.TaxableAmount
										else	
											invoke Update LocalNewPayablesInvoice.PayablesInvoiceTaxRel
												invoked.TotalInvoicedTaxableAmount 	+= each.TaxableAmount 


						if ((LocalNewPayablesInvoice.PayablesInvoiceTaxRel.TotalAccruedTaxableAmount 	 	entered
						and  LocalNewPayablesInvoice.PayablesInvoiceTaxRel.TotalAccruedTaxAmount 	 	not entered)
						or  (LocalNewPayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxableAmount 		entered
						and  LocalNewPayablesInvoice.PayablesInvoiceTaxRel.TotalInvoicedTaxAmount 	 	not entered))
							invoke Update LocalNewPayablesInvoice.PayablesInvoiceTaxRel
								if (invoked.TotalAccruedTaxAmount not entered)
									initialize invoked.TotalAccruedTaxableAmount
								if (invoked.TotalInvoicedTaxAmount not entered)
									initialize invoked.TotalInvoicedTaxableAmount

						invoke UpdateErrorRecordsAction LocalPayablesInvoiceView.PayablesInvoice

						invoke CheckRoutingRules LocalPayablesInvoiceView.PayablesInvoice			
						if (Company.GlobalWithholding
						and Vendor.IncomeWithholding)
							if (RemitToCode entered
							and VendorLocationWithholdingDefaultRel exists)
								for each VendorLocationWithholdingDefaultRel
									if (each.IncomeWithholdingCode.Currency !entered
									or (each.IncomeWithholdingCode.Type.Payment
									and each.IncomeWithholdingCode.Currency = CashCode.Currency)
									or (each.IncomeWithholdingCode.Type.Accrued
									and each.IncomeWithholdingCode.Currency = InvoiceCurrency))
										invoke Create PayablesInvoiceWithholding
											fill in fields from each
											invoked.Company							= Company
											invoked.PayablesInvoice					= LocalPayablesInvoiceView.PayablesInvoice
							else
								if (VendorWithholdingDefaultRel exists)
									for each VendorWithholdingDefaultRel
										if (each.IncomeWithholdingCode.Currency !entered
										or (each.IncomeWithholdingCode.Type.Payment
										and each.IncomeWithholdingCode.Currency = CashCode.Currency)
										or (each.IncomeWithholdingCode.Type.Accrued
										and each.IncomeWithholdingCode.Currency = InvoiceCurrency))
											invoke Create PayablesInvoiceWithholding
												fill in fields from each
												invoked.Company = Company
												invoked.PayablesInvoice = LocalPayablesInvoiceView.PayablesInvoice

						if (!MatchProcessType.Expense 
						and !MatchProcessType.ServiceContract 
						and LocalPayablesInvoiceView.PayablesInvoice.MatchPurchaseOrderInvoicesRel not exists)
							LocalPurchaseOrder = ExternalPurchaseOrder
							if (LocalPurchaseOrderRel exists)
								invoke Create MatchPurchaseOrderInvoice
									invoked.Company                     = Company
									invoked.PurchaseOrder               = LocalPurchaseOrder
									invoked.PayablesInvoice             = LocalPayablesInvoiceView.PayablesInvoice
									invoked.Vendor                      = Vendor
									invoked.TaxCode                     = TaxCode
									invoked.InvoiceType                 = InvoiceType
									invoked.Location                    = Location

							if  (InvoiceType.MatchPrepayment)
								if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
								and  GLCommitRelExists)
									BudgetEditProcessing = BudgetEditProcessing.InProcess
									ActionCompleteMessage = BudgetEditsInProgress
									invoke EditTotalsRoute BudgetTemplateGroupTotal 	
										invoked.PrmFinanceEnterpriseGroup    										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
										invoked.PrmBudgetEditGroup           										= LocalPayablesInvoiceView.PayablesInvoice.UniqueID
										invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesCompany 	= Company
										invoked.PrmBudgetEditCallBack.BudgetEditCallBackPayables.PayablesInvoice	= LocalPayablesInvoiceView.PayablesInvoice
										invoked.PrmMode																= BudgetEditMode.Hard	
										invoked.PrmBusinessClassName												= "PayablesInvoice"
										invoked.PrmEditContext              										= "Release"
								else
									if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
									and GLCommitRelExists)
										invoke EditTotalsRoute BudgetTemplateGroupTotal 	
											invoked.PrmFinanceEnterpriseGroup    		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											invoked.PrmBudgetEditGroup           		= LocalPayablesInvoiceView.PayablesInvoice.UniqueID
											invoked.PrmMode								= BudgetEditMode.UpdateOnly
											invoked.PrmBusinessClassName				= "PayablesInvoice"
											invoked.PrmEditContext              		= "Release"

									invoke FinalRelease LocalPayablesInvoiceView.PayablesInvoice




			Amended is a State	

				Field Rules			//	For "Amended" State
					AllowableAmountForDiscount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>;UsePaySchedule."
					InvoiceAmount.FunctionalAmount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					CashCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountAmount.CurrencyAmount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountAmount2
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountAmount3
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountDate
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					DiscountPercent
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					InvoiceCurrency
						cannot be changed
							"CannotChangeCurrency;DeleteAndRe-\Add"              
					PurchaseFromLocation
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"




					RevalueCurrency
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					TaxableAmount
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"

				SubType IsNotPrepayment Field Rules
					AccrualCode
						if  (PaymentsBeyondOpenStatusExist
						or	 CancelledOrPostedDistributionsExist
						or	 PaymentGainLossHasBeenDone)
							cannot be changed
								"CannotChangeAccrCodeOfPosted,Paid,OrRevaluedInvoice"	 
					DistributionCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					InvoiceDate
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"



					RetainageAccrualCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					RuleGroup
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					TaxAdjustment
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					TermsCode
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"
					VendorReturn
						cannot be changed
							"<InvoiceReleasedCannotChangeThisField>"

				Entrance Rules
                    if  (!MatchProcessType.Expense
                    and  TaxAmount entered
                    and (PayablesInvoiceTaxRel not exists
                    or  (PayablesInvoiceTaxRel.TotalInvoicedTaxAmount not entered
                    and PayablesInvoiceTaxRel.TotalAccruedTaxAmount not entered)))
                        TaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
                        invoke Update PayablesInvoiceTaxRel
                            invoked.TaxCode = PayablesInvoice.TaxCode
                            invoked.EnteredInvoiceAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount
                            invoked.EnteredTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
                            invoked.TotalInvoicedTaxAmount = sum MatchOneSourceInvoicedDistributionsRel.DistributionAmount.CurrencyAmount
                            invoked.TotalAccruedTaxAmount = sum MatchOneSourceAccruedDistributionsRel.DistributionAmount.CurrencyAmount

				Update is an Update Action							//	"Amended" State
					completion message is "<ActionCompleteMessage>"
					Field Rules

					Entrance Rules
						OldInvoiceAmount 		= old InvoiceAmount.CurrencyAmount
						OldTaxAmount 			= old TaxAmount
					Action Rules
						if (DistributionDate within CompanySystemClosingControlRel.ValidEntryDate)				
							LocalContinue = true
						else
							if (EntityLedgerPeriodRel exists
							and !TransientBypassEdit.ReverseDistributionForUpdate)	
								confirmation required
									"PostDate,<DistributionDate>,WithinClosed_\PayablesPeriod;However,Current_\GLPeriod<first EntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.GeneralLedgerCloseYear>-<first EntityLedgerPeriodRel.AccountingEntityPeriod.GeneralLedgerClosePeriod.PeriodName>IsOpen.SelectOkayToPostToCurrent_\GLPeriod."

					Exit Rules

						if (DistributionDate changed)
							if (TaxCode entered									
							and TaxPoint.GLPostDate								
							and old DistributionDate = TransientTaxPointDate)	
								invoke Update PayablesInvoiceTaxRel				
									invoked.TaxPointDate	= DistributionDate	
								TransientTaxPointDate		= DistributionDate	

							invoke UpdateFromHeader UnreleasedDistributionsRel
								invoked.DistributionDate = DistributionDate

							if  (!CancelledOrPostedDistributionsRel exists)
								invoke FastUpdate PayablesInvoiceDetailRel
									invoked.DistributionDate = DistributionDate
						include Messaging
						include UpdateErrorRecords
						invoke TriggerSupplierInvoiceBOD




				ReleaseAmendedInvoice is an Instance Action				//	"Amended" State
					completion message is "<ActionCompleteMessage>"
					Action Rules


						if(ExecuteFrontEndSplits)
							invoke SplitFESDistributions PayablesInvoiceDistribution in foreground
								invoked.PrmCompany		= Company
								invoked.PrmInvoice		= PayablesInvoice
							if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts)
								include FESReleaseEdit
						if (!MatchProcessType.Expense
						and IsNotMatched)
							include ValidateMatchInvoiceBalanceEdits
							constraint (NoOpenInvoiceMessages)
								"CannotMatch;POCostMessagesExist"
					    else
							if (InvoiceOutOfBalance != blank	
							and RefreshTotalTaxValid)			
								invoke RefreshTotalTax			
							if (!TaxEntityUsesSabrix)			
								constraint (InvoiceOutOfBalance = blank)		
									"InvoiceIsOutOfBalance;CannotReleaseInvoiceAdjustments"

						if (IsHSNSACCodeEnabled)
							constraint (PayablesInvoiceDistributionNoHSNSACCodeRel not exists)
								"HSN_/SACCodeIsRequiredOnAllDistributions"
						else
							constraint (PayablesInvoiceDistributionHSNSACCodeRel not exists)
								"CannotEnter_HSN_/SACCodeFlagOnAnyDistributions"

						if (!DoTaxAfter)	
							constraint (!InvoiceErrorsExists)
								"CannotRelease;ErrorsExist.SeeErrorsTabForDetails"

						if (MatchProcessType.Expense)										
							for each UnreleasedDistributionsRel								
								invoke ValidateFinanceStructure each						
									invoked.PrmFinanceCodeBlock = each.DistributionAccount	

						if (!MatchProcessType.Expense)
							DetailDistributionsInBalance = true
							for each PayablesInvoiceDetailRel
								if (MatchCompanyRel.SummarizeDistribution.Summarize
								and each.SumOfDistributions = 0)
									NextSentence = true
								else
								if (!each.ItemType.Inventoried
								and  each.TotalDistributionAmount != each.SumOfDistributions)
									DetailDistributionsInBalance	= false

								if (each.EntityTaxCodeRel.AccruedOrInvoiced.Accrued
								or  each.TaxCode.TaxType.TaxTableCode)
									initialize LocalAmount

									for each each.TaxDistributionsRel 
										if (each.TaxType.Accrued)
											LocalAmount += each.DistributionAmount.CurrencyAmount 

									constraint (LocalAmount = each.AccruedTaxAmount)
										"AccruedTaxDistributionTotal<LocalAmount>DoesNotMatchAccruedTax<each.AccruedTaxAmount>ForLine<each.DerivedLine>"

							for each PayablesInvoiceAddOnChargeRel
								if (MatchCompanyRel.SummarizeDistribution.Summarize
								and each.SumOfDistributions = 0)
									NextSentence = true
								else
								if (!each.ItemType.Inventoried
								and  each.TotalDistributionAmount != each.SumOfDistributions)
									DetailDistributionsInBalance	= false

								if (each.EntityTaxCodeRel.AccruedOrInvoiced.Accrued
								or  each.TaxCode.TaxType.TaxTableCode)
									initialize LocalAmount

									for each each.AllDistributionsRel 
										if (each.TaxCode entered 
										and each.TaxType.Accrued)
											LocalAmount += each.DistributionAmount.CurrencyAmount 

									constraint (LocalAmount = each.AccruedTaxAmount)
										"AccruedTaxDistributionTotal<LocalAmount>DoesNotMatchAccruedTax<each.AccruedTaxAmount>ForLine<each.DerivedLine>"

							constraint (DetailDistributionsInBalance)
								"InvoiceDetailDistributionsAreOutOfBalance.VerifyPurchaseOrderLineOrContractLineAreEnteredOnCorrespondingDistributions."

						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformAmendedFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"

















#ifdef module cam
						if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CustodialAccountManagement)
							include PerformCustodialAccountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif













						

						if (TaxEntityUsesSabrix)		
							invoke ProcessOneSourceForExpenseInvoice in background
								invoked.PrmCompany			= Company
								invoked.PrmVendor			= Vendor
								invoked.PrmPayablesInvoice	= PayablesInvoice
								invoked.PrmReleaseOrSubmit	= 3		

						else
							include PerformBudgetEditsForRelease

						if (MatchCompanyRel.SummarizeAllDistributions)

							if (HasDistributionSummary)
								for each PayablesInvoiceDistributionSummaryRel 
									invoke Purge each 

							for each PayablesInvoiceDistributionForSummaryRel
								invoke CalculateDistributionSummary each 		

				CancelAmended is an Instance Action	
					default label is "CancelAmendedInvoice"
					completion message is "CancelInvoiceComplete"
					valid when (IsValidForCancelAmended)
					subject is CancelInvoice
					reason code required
					action comment required
					Parameters
						InvoiceCancelDate is Date

					Parameter Rules
						InvoiceCancelDate
							initial value is current corporate date
							required
								"CancelDateRequired"	

					Local Fields




					Entrance Rules
						constraint (CancelDate !entered)	
							"CannotCancel;CancelDateAlreadyEntered"
						CancelDate = InvoiceCancelDate

					Action Rules			

						LocalCompany				= Company
						LocalVendor					= Vendor
						LocalInvoice				= Invoice
						LocalSuffix					= Suffix
						LocalThisCancelSequence		= CancelSequence
						LocalCancelDate				= InvoiceCancelDate
						LocalActionComment			= action comment		

						include CancelInvoiceEdits

						if (!InvoiceSource.DebtorCreditMemo)		
							constraint (!PaymentsHaveBeenMadeRel exists)	
								"CannotCancel;InvoiceIsBeingProcessedForPayment"
						LocalRunProgram		= LocalRunProgram.CashRequirements
						constraint (!PaymentsHaveBeenScheduledRel exists)	
							"CannotCancel;InvoiceScheduledForPayment"
						LocalRunProgram		= LocalRunProgram.InvoiceDistributionClosing
						constraint (!ActivePayablesProcessingMonitorByCompanyRel exists)	
							"CannotCancel;InvoiceDistributionClosingRunning"
						constraint (!UnreleasedDistributionsRel exists)
							"CannotCancel;InvoiceHasUnreleasedDistributions"
						constraint (!CancelledOrPostedDistributionsRel exists)
							"CannotCancel;InvoiceHasPostedDistributions"

						include PerformInvoiceCancel
						make transition to Cancelled
						invoke TriggerSupplierInvoiceBOD




						if  (MatchAgingInvoiceRel exists)
							invoke Delete MatchAgingInvoiceRel
					Exit Rules
						invoke PerformSnapshotUpdates
						include UpdateErrorRecords



			Historical is a State


				Field Rules			//	For "Historical" State
					AllowableAmountForDiscount
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					AuthorityCode
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					InvoiceAmount.FunctionalAmount
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					CashCode
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DiscountAmount.CurrencyAmount
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DiscountAmount2
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DiscountAmount3
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DiscountCode
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DiscountDate
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DiscountPercent
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					IncomeCode
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					InvoiceAmount.CurrencyAmount
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					InvoiceCurrency
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"              
					PurchaseFromLocation
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					RemitToCode
						if (PaymentsBeyondOpenStatusExist)
							cannot be changed
								"<InvoiceHistoricalCannotChangeThisField>"				  
					RevalueCurrency
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					Status
						if (MatchPrepayment
						and action = "UpdateAfterMatch")
							NextSentence = true
						else
							cannot be changed
								"InvoiceHistoricalCannotChangeThisField"	
					TaxableAmount
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"

				SubType IsNotPrepayment Field Rules
					AccrualCode
						if  (PaymentsBeyondOpenStatusExist
						or	 CancelledOrPostedDistributionsExist
						or	 PaymentGainLossHasBeenDone)
							cannot be changed
								"<InvoiceHistoricalCannotChangeThisField>"	 
					DistributionCode
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DistributionDate
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					DueDate
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					InvoiceDate
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					InvoiceReference
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"



					NumberOfRecurringInvoices
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					RetainageAccrualCode
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					RuleGroup
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					TaxAdjustment
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					TermsCode
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"
					VendorReturn
						cannot be changed
							"<InvoiceHistoricalCannotChangeThisField>"


				ReopenMarkAsPaid is an Instance Action			
					valid when (AllowReopenMarkAsPaid)
					confirmation required
						"ThisActionReopensAnInvoiceMarkedAsPaid.Continue?"
					completion message is "Invoice<Invoice>HasBeenReopened"
					Parameters
						PrmPostDate							is an ExchangeDate
							default label is "PostDate"
						PrmOverrideDefaultAccount			is a FinanceCodeBlockFull
							default label is "OverrideMarkedAsPaidAccount"
						PrmComment							is Alpha size up to 60
							default label is "Comment"
					Parameter Rules
						PrmPostDate
							initial value is first MarkedAsPaidPayablesInvoicePaymentRel.CheckDate
							required
							LocalCompany	= Company
							if (CompanySystemClosingControl2Rel.Control)
								constraint (PrmPostDate within CompanySystemClosingControl2Rel.ValidEntryDate)
									"PostDateOf<PrmPostDate>NotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControl2Rel.ValidEntryDate.Begin>-<CompanySystemClosingControl2Rel.ValidEntryDate.End>"
						PrmOverrideDefaultAccount
							required
							initial value is last PayablesInvoiceDistributionPaymentAccrualRel.DistributionAccount
					Entrance Rules

					Action Rules
						if (PrmComment entered)
							invoke Create PayablesInvoiceComment
								invoked.Company			= Company
								invoked.PayablesInvoice	= this instance.PayablesInvoice
								invoked.Title			= "Reopened Marked as Paid"
								invoked.Type			= "N"
								invoked.SupplierCanView	= false
								invoked.Comment			= PrmComment

						invoke MarkPaymentAsPaid MarkedAsPaidPayablesInvoicePaymentRel
							invoked.PrmCheckDate				= PrmPostDate
							invoked.PrmOverrideDefaultAccount	= PrmOverrideDefaultAccount
							invoked.PrmReopenInvoice			= true

						initialize AmountPaid
					Exit Rules
						make transition to Released

				
				UpdateDistributionDate is an Instance Action		
					valid when (UnpostedDistributionsExist)
					Parameters
						NewDistributionDate is Date
					Action Rules
						DistributionDate= NewDistributionDate
						for each PayablesInvoiceDistribution set
							invoke UpdateFromHeader each
								if  (DistributionDate changed
								and (each.DistributionType.Distribution
								or   each.DistributionType.ExpenseAccrual)
								and !each.Status.Historical)
									invoked.DistributionDate = DistributionDate
						if  (!CancelledOrPostedDistributionsRel exists)
							invoke FastUpdate PayablesInvoiceDetailRel
									invoked.DistributionDate = DistributionDate

				CreateFromInterface is a Create Action		//	"Historical" State
					default label is untranslatable
					restricted
					Entrance Rules
						include InvoiceInterfaceEdits
						if (CreateOneTimeVendor)
							invoke CreateOneTimeVendor Vendor
								assign result to OneTimeVendor
								invoked.VendorName				= TransientVendorName
								invoked.VendorSearchName		= TransientVendorSearchName
								invoked.VendorAddress			= TransientVendorAddress
								invoked.LegalName				= TransientLegalName
								invoked.TaxID					= TransientTaxID
								invoked.IncomeCode				= TransientIncomeCode
								invoked.VATRegistrationCountry	= TransientVATRegistrationCountry
								invoked.VATRegistrationNumber	= TransientVATRegistrationNumber
								invoked.Carrier					= TransientCarrier

							Vendor = OneTimeVendor.Vendor

					Action Rules
						ActionType 								= ActionType.CreateType
						InterfaceCreate 						= true
						include CreateAndUpdateRules
					Exit Rules
						include CreateExitRules
						include CreateAndUpdateExitRules		

						if (ImportInvoiceAccruedTaxCode entered)	
							LocalTaxAccrualAmount	= TaxAmount		
							SaveTaxCode	= TaxCode					
							TaxCode	= ImportInvoiceAccruedTaxCode	
							include CreateTaxAccrualOffset			
							TaxCode	= SaveTaxCode					
							initialize SaveTaxCode					
						if  (TransientUpdateVendorBalance)
							include AddToVendorBalance

				Delete is a Delete Action
					default label is untranslatable
					restricted
					Entrance Rules							//	"Historical" State
						include DeleteDistributions
						include DeleteEntranceRules
					Action Rules




				
			
FileCreationLogic.PayablesInvoice is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"PayablesInvoice_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Sort Order is ByVendor2
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
				LocalPayablesInvoiceGroupSelection		is a PayablesInvoice group in subject FileCreationPayablesInvoice

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      PayablesInvoice % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
					LocalPayablesInvoiceGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalPayablesInvoiceGroupSelection not entered
					or	PayablesInvoice within LocalPayablesInvoiceGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= Company
							invoked.Key2				= PayablesInvoice
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
