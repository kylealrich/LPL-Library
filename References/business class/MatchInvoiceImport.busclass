MatchInvoiceImport is a BusinessClass
	owned by ma
	prefix is MAI
	classic name is MACINVOICE

	Ontology
		symbolic key is MatchInvoiceImport
			classic set name is MAISET1

	Patterns
		disable AuditIndex

		disable Auditing 
		disable EffectiveDated
		disable DataTranslations
		
	Persistent Fields

		RunGroup
		Company						is a MatchCompany
		Vendor
		OldVendor
		Invoice
		Suffix
		EDINumber
			classic name is EDI-NBR
		BatchNumber
			classic name is BATCH-NUM
		VoucherNumber
			classic name is VOUCHER-NBR
		Reference
		AuthorityCode				is a PayablesAuthorityCode
			classic name is AUTH-CODE
		ProcessLevel				is a PayablesProcessLevel
			classic name is PROC-LEVEL
		InvoiceType					is AlphaUpper size 1
			States
				Invoice			value is blank
				CreditMemo		value is "C"
				DebitMemo		value is "D"
				MatchPrepayment	value is "R"
		InvoiceCurrency				is a Currency
			classic name is INV-CURRENCY
		InvoiceDate					is Date
			classic name is INVOICE-DTE
		DistributionDate			is Date
			classic name is DISTRIB-DATE
		PurchaseFromLocation
			context of Vendor
			classic name is PURCH-FR-LOC
		ProcessType					is AlphaUpper size 2
			default label is "InvoiceEntryTemplate"
			States
				Basic			value is "B"
				Freight			value is "F"
				MatchInvoice	value is "M"
				AOCMatchInvoice	value is "A"
				ServiceContract	value is "V"
		PurchaseOrder
		ServiceContract				is a Contract
		ExternalPurchaseOrder		is like PurchaseOrderImport
		InterfacedPurchaseOrder		is like PurchaseOrderImport
		InterfacedPOCode			is like POCode
 		CreateDetails				is Numeric 1
 			default label is "CreateDetails"
 			States
 				FromPurchaseOrder	value is 2
 				FromReceipt			value is 3
				FromReceiptThenFromPO value is 4
		Description
		InvoiceTransactionAmount	is an InternationalAmount
			classic name is TRAN-INV-AMT
		AllowableAmountForDiscount	is an InternationalAmount
			classic name is TRAN-ALOW-AMT
		TaxableAmount				is an InternationalAmount
			classic name is TRAN-TXBL-AMT
		TotalTaxAmount				is an InternationalAmount
			classic name is TRAN-TAX-AMT
		DiscountAmount				is an InternationalAmount
			classic name is TRAN-DISC-AMT
		BaseCurrencyConversionRate	is an AcctRate
			classic name is ORIG-CNV-RATE
		DiscountPercent
			classic name is DISCOUNT-RT
		DiscountDate				is Date
			classic name is DISC-DATE
		DueDate
		PayVendor					is a Vendor
		InterfacedPayVendor			is an OldVendor
		RemitToCode					is like VendorLocation
		RetailAmount				is an InternationalAmount
			classic name is RETAIL-AMT
		InvoiceReceiptDate			is Date
			classic name is RCPT-INV-DATE
		ReasonCode					is a ProcurementReasonCode
		Operator
		TermsCode
		TaxCode
		TaxAdjustment				is AlphaUpper size 1
			classic name is TAX-CODE-CNTL
			States
				NoTax					value is "0"
				OverrideProductOnly		value is "1"
				IgnoreProductOnly		value is "2"
				Calculate				value is "3"
				OverrideProductAndAOC	value is "4"
				IgnoreProductAndAOC		value is "5"
				OverrideTaxablePOLine	value is "8"
				OverrideTaxablePOAndAOC	value is "9"
		Location					is an InventoryLocation
		RecordInError				is Boolean
			classic name is RECORD-ERROR
		ErrorMessage				is Alpha 150
		PrintChargeback				is Boolean
			classic name is CBPRINT-FL
		MatchReferenceNumber
		InvoiceReference			is a PayablesReferenceType	
			classic name is INVC-REF-TYPE












		MatchInvoiceUserField01		is an InvUsrFld01
			classic name is INV-USR-FLD-01
		MatchInvoiceUserField02		is AlphaUpper size 20
			classic name is INV-USR-FLD-02
		MatchInvoiceUserField03		is AlphaUpper size 20
			classic name is INV-USR-FLD-03
		MatchInvoiceUserField04		is AlphaUpper size 20
			classic name is INV-USR-FLD-04
		MatchInvoiceUserField05		is AlphaUpper size 20
			classic name is INV-USR-FLD-05
		VendorReturn
			classic name is RETURN-NUMBER
		JournalBook
			classic name is JRNL-BOOK-NBR
			restricted
		NatureOfTransactionCode		is an IntrastatNatureOfTransactionCode
			classic name is NOTC
			default label is "Nature of Transaction Code"
		StatisticalProcedure		is an IntrastatStatisticalProcedure
			classic name is STAT-PROC
		ShippingMethod
			classic name is SHIP-VIA
		UnloadingPort				is like IntrastatPortCode
		IntrastatNumber
			classic name is INTRASTAT-NBR
		Dropship
			classic name is DROPSHIP-FL
		ShipTerm
			classic name is FOB-CODE
		PayImmediately				is a BooleanOverride
			classic name is PAY-IMM-FLAG
		DiversityCode				is a PayablesDiversityCode
			classic name is DIVERSE-CODE
		MatchPrepayment				is Boolean
			classic name is MTCH-PREPAY-FL
		MatchPrepaymentMethod
			classic name is MTCH-PREPAY-MT
		FlexibleTermsFlag			is Boolean
			classic name is FLEX-FLAG
		RuleGroup					is a MatchRule
		ContractRebateGroup
		CreditMemoReferenceInvoice	is an Invoice
			classic name is REF-INV-NBR
		TaxType						is AlphaUpper size 1
			States
				Invoiced	value is "I"
				Accrued		value is "A"
		ForeignEconomicRegulatoryCode
			classic name is FOR-ECON-CODE
		DiscountPercent1			is a DiscountPercent
			classic name is DISCOUNT-RT1
		DiscountPercent2			is a DiscountPercent
			classic name is DISCOUNT-RT2
		DiscountPercent3			is a DiscountPercent
			classic name is DISCOUNT-RT3
		BaseDiscountAmount1			is an InternationalAmount
			classic name is BASE-DISC-AMT1
		BaseDiscountAmount2			is an InternationalAmount
			classic name is BASE-DISC-AMT2
		BaseDiscountAmount3			is an InternationalAmount
			classic name is BASE-DISC-AMT3
		DiscountAmount1				is an InternationalAmount
			classic name is TRAN-DISC-AMT1
		DiscountAmount2				is an InternationalAmount
			classic name is TRAN-DISC-AMT2
		DiscountAmount3				is an InternationalAmount
			classic name is TRAN-DISC-AMT3
		DiscountDate1				is Date
			classic name is DISC-DATE1
		DiscountDate2				is Date
			classic name is DISC-DATE2
		DiscountDate3				is Date
			classic name is DISC-DATE3
		FreightTotal				is an InternationalAmount
			classic name is FREIGHT-TOT
		InsuranceTotal				is an InternationalAmount
			classic name is INSURANCE-TOT
		CustomsTotal				is an InternationalAmount
			classic name is CSTMS-TOT
		OtherAddOnChargesTotal		is an InternationalAmount
			classic name is OTHER-AOC-TOT
		GlobalDocumentType
			classic name is GLBL-DOC-TYPE
		ReferenceType				is a NordicReferenceType	
			classic name is REF-TYPE






		CustomerID
		PaymentCategoryCode			is a CashLedgerPaymentCategoryCode
			classic name is PMT-CAT-CODE
		NoPayConcern
		VendorIncomeCode			is a PayablesIncomeCode
		ReportableIncomeAmount		is an InternationalAmount
		PayablesInvoice
			delete ignored	
		InterfaceRun				is a PayablesInvoiceInterfaceResult
			delete ignored
		LetterOfGuarantee
			classic name is LTR-OF-GUARAN
		LetterOfCredit
			classic name is LETTER-OF-CR
		SenderLogicalID
		SenderComponentID
		SenderCreationDateTime
		SenderBODID
		SenderOriginalBOD
		EAMWorkOrder
		EAMWorkOrderActivity
		TransientPaymentNumber		is a TransactionNumber
			default label is "PaymentNumber"
		TransientPaymentDate		is Date
			default label is "PaymentDate"
		TransientPaymentAmount		is an InternationalAmount
			default label is "PaymentAmount"
		InvoiceGroup				is a PayablesInvoiceGroup		
		CashCode
		BankTransactionCode
		IDMDocumentPID				is a DocumentPID
		CertificationNumber						
		CertificationDate			is Date		
		HoldCode                      is a PayablesHoldCode
		RoutingCategory				is an InvoiceRoutingCategory
			default label is "InvoiceRoutingCategory"
		
	Local Fields
		InterfacedInvoice				is a PayablesInvoice view
		LocalPayablesInvoiceInterfaceResult is like PayablesInvoiceInterfaceResult
		IntrastatProcessing
		LocalTrigger					is Alpha size 1
		Diff 							is Numeric size 16

		LocalFinanceEnterpriseGroup     is like FinanceEnterpriseGroup
		LocalRunGroup					is like RunGroup
		LocalCompany					is like Company
		LocalVendor						is like Vendor
		LocalTaxCode					is like TaxCode
				
		ErrorOccurred					is Boolean
		LocalErrorMessage				is Alpha 150
		LocalErrorRunGroup				is a RunGroup
		LocalTransactionTotal 			is an InternationalAmount	
		LocalFunctionalTotal 			is an InternationalAmount

		CheckCompany					is like Company
		CheckPurchaseOrder				is like PurchaseOrder
		LocalInterfaceAnalysis			is like InterfaceAnalysis

		InterfacedDistribution          is a PayablesInvoiceDistribution view
		LocalTaxSequence				is like DistributionSequence
		LocalPurchaseOrder				is like PurchaseOrder
		LocalLineNumber 				is like LineNumber
		LocalConfigurationParameter		is Alpha size up to 200
			
	Context Fields
	
   	Field Groups
   		SecondaryKeyFields
   			RunGroup
   			Company
   			Vendor
   			OldVendor
   			EDINumber
   			Invoice
   			Suffix

		RunGroupCompany
   			RunGroup
   			Company

	Derived Fields
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSupplierInvoice"

		ContextMessageText is a MessageField
			restricted
			"Invoice<Invoice>"
			
		InterfacedVendorNotFoundMsg is a MessageField
			restricted
			"InterfacedVendorNotFound"

		InterfacedPayVendorNotFoundMsg is a MessageField
			restricted
			"InterfacedPayVendorNotFound"

		ProcessTypeRequiredMsg is a MessageField
			restricted
			"ProcessTypeRequired"

		PurchaseOrderRequiredMsg is a MessageField
			restricted
			"PurchaseOrderOrInterfacedPurchaseOrderRequiredForThisProcessType"

		InterfacedPurchaseOrderNotFoundMsg is a MessageField
			restricted
			"InterfacedPurchaseOrderNotFound"

		ServiceContractRequiredMsg is a MessageField
			restricted
			"ServiceContractRequiredForThisProcessType"

		InvalidProcessTypeMsg is a MessageField
			restricted
			"InvalidProcessType"

		CannotSelectCreateDetailsMsg is a MessageField
			restricted
			"CannotSelectCreateDetailsIfInterfaceDetailsExist"
						
		NoDetailsForPrepaymentFromInvoice is a MessageField
			restricted
			"CannotHaveDetailsWhenMatchPrepaymentMethodIsPrepayFromInvoice"

		DerivedVendor is a DerivedField
			type is like Vendor
			if  (Vendor not entered)
				if  (VendorForLegacyVendorRel exists)
					return first VendorForLegacyVendorRel.Vendor 
				else
				if (InterfaceMappingVendorRel exists)
					return first InterfaceMappingVendorRel.Vendor
			else
				return Vendor

		DerivedPayVendor is a DerivedField
			type is like Vendor
			if  (PayVendor entered)
				return PayVendor
			else
			if  (InterfacedPayVendor entered)
				if  (LegacyPayVendorRel exists)
					return first LegacyPayVendorRel.Vendor 
				else
				if (InterfaceMappingPayVendorRel exists)
					return first InterfaceMappingPayVendorRel.Vendor

		NumericInterfacedPurchaseOrder is a DerivedField
			type is like PurchaseOrder
			if (InterfacedPurchaseOrder is numeric)
				return InterfacedPurchaseOrder

		NumberOfDetails is a DerivedField			
			type is Numeric 10		
			restricted
			return instance count of PayablesInvoiceDetailImportRel

		NumberOfDetailsTitle is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceDetailImportRel exists)
				return "(" + NumberOfDetails + ")"
			else
				return blank

		NumberOfPurchaseOrders is a DerivedField			
			type is Numeric 10		
			restricted
			return instance count of MatchPurchaseOrderInvoiceImportRel

		NumberOfPOsTitle is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MatchPurchaseOrderInvoiceImportRel exists)
				return "(" + NumberOfPurchaseOrders + ")"
			else
				return blank

		NumberOfContracts is a DerivedField			
			type is Numeric 10		
			restricted
			return instance count of MatchServiceContractInvoiceImportRel

		NumberOfContractsTitle is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MatchServiceContractInvoiceImportRel exists)
				return "(" + NumberOfContracts + ")"
			else
				return blank

		NumberOfDistributions is a DerivedField			
			type is Numeric 10	
			restricted	
			return instance count of MatchInvoiceDistributionImportRel

		NumberOfDistributionsTitle is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MatchInvoiceDistributionImportRel exists)
				return "(" + NumberOfDistributions + ")"
			else
				return blank

		NumberOfMiscellaneousAOCs is a DerivedField			
			type is Numeric 10		
			restricted
			return instance count of MiscPayablesInvoiceAddOnChargeImportRel

		NumberOfMiscellaneousAOCsTitle is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MiscPayablesInvoiceAddOnChargeImportRel exists)
				return "(" + NumberOfMiscellaneousAOCs + ")"
			else
				return blank

		NumberOfComments is a DerivedField			
			type is Numeric 10		
			restricted
			return instance count of MatchInvoiceImportCommentRel

		NumberOfCommentsTitle is a DerivedField
			type is Alpha size up to 20
			restricted
			if (MatchInvoiceImportCommentRel exists)
				return "(" + NumberOfComments + ")"
			else
				return blank

		SingleSpace is a StringField
			type is Alpha 1

			" "

#ifdef module integration
		DerivedTenantID is a DerivedField 
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ RunGroup +":"+ Invoice +":"+ "?MatchInvoiceImport&verb=Process"		
#endif						
		MatchInvoiceImportAlertDesc is a DerivedField
			type is Alpha 100
			restricted
			return "Unprocessed Match Invoice Detail: RunGroup: "+RunGroup+" , "+"Invoice" +" : "+Invoice
		
		DerivedMatchInvoiceImportAlertCreationDateTime is a DerivedField
			type is Alpha 50
			restricted 
			if (SenderCreationDateTime != "")
				return SenderCreationDateTime
			else
				return "0"
				
		DerivedMatchInvoiceImportAlertOriginalBOD is a DerivedField
			type is Alpha 100
			restricted 
			if (SenderOriginalBOD != "")
				return SenderOriginalBOD
			else
				return "0"
				
		MatchInvoiceImportAlertXML is a DerivedField
			type is XMLDocument
			restricted
			MatchInvoiceImportAlertXML = template.IONMatchInvoiceImportAlert_MatchInvoiceImport_ST document for this instance



	Conditions

		ImportValidationErrorExists
			classic name is MACREC-ERR

			when (RecordInError)

		NoErrorExists
			classic name is NO-REC-ERROR
			restricted
			when (not RecordInError)

		IsPartiallyImported
			when (PayablesInvoice entered)
			
		InterfaceRunEntered
			when (InterfaceRun entered)

		ContractEntered 
			when (ServiceContract entered )			

	Relations

		PayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company			 				= Company

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AP"
				related.Company						= Company
		InterfacedPurchaseOrderRel 
			one-to-many relation to InterfacedPurchaseOrder
			Field Mapping uses ByImport
				related.Company                     = Company
				related.PurchaseOrderImport 		= InterfacedPurchaseOrder
				related.POCode						= InterfacedPOCode

		MatchPurchaseOrderInvoiceImportRel			
			one-to-many relation to MatchPurchaseOrderInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix

		MatchServiceContractInvoiceImportRel			
			one-to-many relation to MatchServiceContractInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix

		PayablesInvoiceDetailImportRel
			one-to-many relation to PayablesInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix

		PayablesInvoiceAddOnChargeImportRel
			one-to-many relation to PayablesInvoiceAddOnChargeImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix
			Instance Selection
				where (related.Sequence					!= blank)

		MiscPayablesInvoiceAddOnChargeImportRel
			one-to-many relation to PayablesInvoiceAddOnChargeImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix
			Instance Selection
				where (related.Sequence					= blank)

		MatchInvoiceDistributionImportRel
			one-to-many relation to MatchInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix

		DetailImportRunGroupRel
			one-to-many relation to PayablesInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company

		DistributionImportRunGroupRel
			one-to-many relation to MatchInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company

		AddOnChargeImportRunGroupRel
			one-to-many relation to PayablesInvoiceAddOnChargeImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
			Instance Selection
				where (related.Sequence					!= blank)

		MiscAddOnChargeImportRunGroupRel
			one-to-many relation to PayablesInvoiceAddOnChargeImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= RunGroup
				related.Company			 				= Company
			Instance Selection
				where (related.Sequence					= blank)

		OldMatchPurchaseOrderInvoiceImportRel
			one-to-many relation to PayablesInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= old RunGroup
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix

		OldMatchServiceContractInvoiceImportRel
			one-to-many relation to PayablesInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= old RunGroup
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix

		OldPayablesInvoiceDetailImportRel
			one-to-many relation to PayablesInvoiceDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= old RunGroup
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix

		OldMatchInvoiceDistributionImportRel
			one-to-many relation to MatchInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= old RunGroup
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix

		OldPayablesInvoiceAddOnChargeImportRel
			one-to-many relation to PayablesInvoiceAddOnChargeImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= old RunGroup
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix
			Instance Selection
				where (related.Sequence					!= blank)

		OldMiscPayablesInvoiceAddOnChargeImportRel
			one-to-many relation to PayablesInvoiceAddOnChargeImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= old RunGroup
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix
			Instance Selection
				where (related.Sequence					= blank)

	   	TaxEntityRel				 
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
				
		TaxEngineTaxDetailRel
			one-to-many relation to TaxEngineTaxDetail
			Field Mapping uses ByCompanyInvoice
				related.Company					= Company
				related.Invoice					= Invoice
				related.PONumber				= PurchaseOrder
				related.Vendor					= Vendor

		EntityTaxCodeRel
			classic name is TAXCODE
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
				related.TaxCode 				= LocalTaxCode

		PurchaseFromVendorLocAddressRel
			one-to-one relation to VendorAddress
			Field Mapping uses symbolic key
				related.VendorGroup                     = Company.VendorGroup
				related.Vendor                          = Vendor
				related.VendorLocation                  = PurchaseFromLocation
				related.VendorContact.VendorContactCode = blank
				related.VendorContact.ContactLevel      = blank

		InvoiceVendorAddressRel
			one-to-one relation to VendorAddress
			Field Mapping uses symbolic key
				related.VendorGroup                     = Company.VendorGroup
				related.Vendor                          = Vendor
				related.VendorLocation                  = blank
				related.VendorContact.VendorContactCode = blank
				related.VendorContact.ContactLevel      = blank
				
		DestinationUnloadingPortRel
			one-to-one relation to IntrastatPortCode
			Field Mapping uses symbolic key

				related.Country							= IntrastatProcessing.DestinationCountry
				related.IntrastatPortCode				= UnloadingPort

		VendorForLegacyVendorRel
			one-to-many relation to Vendor
			Field Mapping uses ByLegacyVendor
				related.VendorGroup						= Company.VendorGroup
				related.LegacyVendor					= OldVendor

		InterfaceMappingVendorRel
			one-to-many relation to VendorMappingTableInterface
			Field Mapping uses symbolic key
				related.VendorGroup								= Company.VendorGroup
			Instance Selection
				where (related.VendorMappingTableInterface.OldVendor	= OldVendor)

		LegacyPayVendorRel
			one-to-many relation to Vendor
			Field Mapping uses ByLegacyVendor
				related.VendorGroup						= Company.VendorGroup
				related.LegacyVendor					= InterfacedPayVendor
			
		InterfaceMappingPayVendorRel
			one-to-many relation to VendorMappingTableInterface
			Field Mapping uses symbolic key
				related.VendorGroup								= Company.VendorGroup
			Instance Selection
				where (related.VendorMappingTableInterface.OldVendor	= InterfacedPayVendor)

		LocalInvoicesInRunGroupRel
			one-to-many relation to MatchInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= LocalRunGroup

		LocalInvoicesInRunGroupCompanyRel
			one-to-many relation to MatchInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= LocalRunGroup
				related.Company							= LocalCompany

		MatchInvoiceImportCommentRel
			one-to-many relation to MatchInvoiceImportComment
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix
				
		OldMatchInvoiceImportCommentRel
			one-to-many relation to MatchInvoiceImportComment
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix

		CheckPurchaseOrderRel
			one-to-one relation to PurchaseOrder
			Field Mapping uses symbolic key
				related.Company							= CheckCompany
				related.PurchaseOrder					= CheckPurchaseOrder 

		PayablesInvoiceInterfaceInProcessRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			= Company
				related.Vendor			= Vendor
				related.Invoice			= Invoice
				related.Suffix			= Suffix
				related.CancelSequence	= blank
			Instance Selection
				where (related.InterfaceInProcess)

		InterfaceAnalysisDetailRel
			one-to-many relation to InterfaceAnalysisDetail
			Field Mapping uses AnalysisBucket
				related.InterfaceAnalysis	= LocalInterfaceAnalysis
				related.PayablesCompany		= Company
				related.Vendor				= Vendor
				related.Currency			= InvoiceCurrency
			Instance Selection
				where (related.MonthYear.Begin	<= InvoiceDate
				and    related.MonthYear.End	>= InvoiceDate)

		LocalVendorRel
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor							= LocalVendor
			
		VendorLocationRel								
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup					= Company.VendorGroup
				related.Vendor 						= LocalVendor
				related.VendorLocation				= RemitToCode

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "AP"	

		InterfaceResultInProcessRel
			one-to-many relation to PayablesInvoiceInterfaceResult
			Field Mapping uses ByRunGroup
				related.RunGroup                        = LocalRunGroup
			Instance Selection
				where (related.FinanceEnterpriseGroup    = LocalFinanceEnterpriseGroup
				and    related.RunType                    = 2 
				and    related.Status.InProcess)

		InterfacedPODistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses ByPayablesInvoiceSuffixPOLine
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
				related.Suffix                          = blank
				related.PurchaseOrder                   = LocalPurchaseOrder
				related.PurchaseOrderLine               = LocalLineNumber

        

#ifdef module integration
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationPARel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1
        
        FSMBODConfigurationDetailPARel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2	
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.Alert						= "FSM_ION_MatchInvoiceImportAlert"
				and	   related.Enable)
#endif

				
    Sets

        ByRunGroup
            indexed
            Sort Order
                RunGroup
                Company
                Vendor
                OldVendor
				EDINumber
				Invoice
				Suffix

		ByCompanyVendorInvoice
			indexed
			Sort Order
				Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix

		ByInterfaceRun
			Sort Order
				InterfaceRun
				RunGroup
				Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix

        ByRunGroupInvoiceType
            indexed
            Sort Order
				RunGroup
				Company
				Vendor
				OldVendor
				EDINumber
				InvoiceType
				Invoice
				Suffix				

	Field Rules

		RunGroup
			required

		Vendor
			if (OldVendor not entered)
				required
					"MustEnterEitherVendorOrInterfacedVendor"

		Invoice
			required
					
		InvoiceDate
			required

		Dropship
			default to "N"

		ProcessType
			required

		PurchaseOrder
			if  ((ProcessType.MatchInvoice
			or    ProcessType.AOCMatchInvoice)
			and   InterfacedPurchaseOrder not entered
			and   MatchReferenceNumber not entered)
				required
					"<PurchaseOrderRequiredMsg>" 

		InterfacedPurchaseOrder
			if  ((ProcessType.MatchInvoice
			or    ProcessType.AOCMatchInvoice)
			and   PurchaseOrder not entered
			and   MatchReferenceNumber not entered)
				required
					"<PurchaseOrderRequiredMsg>"
				
		ServiceContract
			if (ProcessType.ServiceContract)
				required
			else	
				cannot be entered

		MatchPrepayment
			if (MatchPrepayment)
				constraint (MatchPrepaymentMethod entered)
					"MethodRequiredForMatchPrepayment"
			else
				constraint (MatchPrepaymentMethod not entered)
					"MethodNotAllowedIfNotMatchPrepayment"

		NatureOfTransactionCode
			if  (!TaxEntityRel.IntrastatUsed)
				cannot be entered
					"TaxEntityDoesNotUseIntrastatReporting"

		StatisticalProcedure
			if  (!TaxEntityRel.IntrastatUsed)
				cannot be entered
					"TaxEntityDoesNotUseIntrastatReporting"
				
		ShippingMethod
			if  (!TaxEntityRel.IntrastatUsed)
				cannot be entered
					"TaxEntityDoesNotUseIntrastatReporting"
				
		UnloadingPort
			if  (!TaxEntityRel.IntrastatUsed)
				cannot be entered
					"TaxEntityDoesNotUseIntrastatReporting"
				
		ShipTerm
			if  (!TaxEntityRel.IntrastatUsed)
				cannot be entered
					"TaxEntityDoesNotUseIntrastatReporting"
					
		PaymentCategoryCode
			default to Vendor.PaymentCategoryCode
			constraint (PaymentCategoryCode.Active)
				"PaymentCategoryIsInactive"

		BankTransactionCode
			if (BankTransactionCode.PaymentOutputOption.ElectronicFile
			or	BankTransactionCode.PaymentOutputOption.Swift
			or  BankTransactionCode.PaymentOutputOption.WireTransfer)	
				if (DerivedPayVendor not entered)
					LocalVendor		= DerivedVendor											
					if (RemitToCode entered)											
						constraint ((VendorLocationRel.BankEntity 			entered		
						and			 VendorLocationRel.BankAccountNumber 	entered		
						and 		 VendorLocationRel.BankAccountType 		entered)	
						or 			(LocalVendorRel.BankEntity 				entered				
						and			 LocalVendorRel.BankAccountNumber 		entered				
						and 		 LocalVendorRel.BankAccountType 		entered))			
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnVendor<LocalVendor>OrRemitLocation<RemitToCode>ForInvoicesSetUpForElectronicPayment"
					else
						constraint (LocalVendorRel.BankEntity 				entered
						and			LocalVendorRel.BankAccountNumber 		entered
						and 		LocalVendorRel.BankAccountType 			entered) 
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnVendor<LocalVendor>ForInvoicesSetUpForElectronicPayment"
				else
					LocalVendor		= DerivedPayVendor											
					if (RemitToCode entered)											
						constraint ((VendorLocationRel.BankEntity 			entered		
						and			 VendorLocationRel.BankAccountNumber 	entered		
						and 		 VendorLocationRel.BankAccountType 		entered)	
						or 			(LocalVendorRel.BankEntity 				entered			
						and			 LocalVendorRel.BankAccountNumber 		entered			
						and 		 LocalVendorRel.BankAccountType 			entered))		
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnPayVendor<LocalVendor>OrRemitLocation<RemitToCode>ForInvoicesSetUpForElectronicPayment"
					else
						constraint (LocalVendorRel.BankEntity 				entered		
						and			LocalVendorRel.BankAccountNumber 		entered		
						and 		LocalVendorRel.BankAccountType 			entered) 	
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnPayVendor<LocalVendor>ForInvoicesSetUpForElectronicPayment"


	Rule Blocks
		ProcessIntrastat
			IntrastatProcessing.TaxEntity                  	= Company.AccountingEntity
			
			if (Location entered)                                  
				IntrastatProcessing.DestinationCountry      = Location.PostalAddressForPurchaseOrder.Country
				IntrastatProcessing.DestinationRegion       = Location.PostalAddressForPurchaseOrder.Region
			else
				IntrastatProcessing.DestinationCountry      = ProcessLevel.PostalAddress.Country
				IntrastatProcessing.DestinationRegion       = ProcessLevel.PostalAddress.Region
						  
			if (PurchaseFromVendorLocAddressRel exists)
				IntrastatProcessing.OriginCountry 			= PurchaseFromVendorLocAddressRel.PostalAddress.Country
				IntrastatProcessing.OriginRegion 			= PurchaseFromVendorLocAddressRel.PostalAddress.Region
				IntrastatProcessing.VendorVATRegCountry		= PurchaseFromLocation.VATRegistrationCountry
				IntrastatProcessing.VendorVATRegNumber		= PurchaseFromLocation.VATRegistrationNumber
			else
				IntrastatProcessing.OriginCountry 			= InvoiceVendorAddressRel.PostalAddress.Country
				IntrastatProcessing.OriginRegion 			= InvoiceVendorAddressRel.PostalAddress.Region
				IntrastatProcessing.VendorVATRegCountry		= Vendor.VATRegistrationCountry
				IntrastatProcessing.VendorVATRegNumber		= Vendor.VATRegistrationNumber				

			LocalTrigger                             	   	= IntrastatProcessing.CheckCountries
			constraint (IntrastatProcessing.OutputErrorNumber not entered)
				"<IntrastatProcessing.OutputErrorMessage>"
	
			if (!IntrastatProcessing.DoIntrastatReporting)
				constraint (NatureOfTransactionCode not entered)
					"SpecifiedCountries/jurisdictionsOrRegionsNotValidForIntrastatProcessing"

				constraint (StatisticalProcedure not entered)
					"SpecifiedCountries/jurisdictionsOrRegionsNotValidForIntrastatProcessing"
				
				constraint (ShippingMethod not entered)
					"SpecifiedCountries/jurisdictionsOrRegionsNotValidForIntrastatProcessing"
				
				constraint (UnloadingPort not entered)
					"SpecifiedCountries/jurisdictionsOrRegionsNotValidForIntrastatProcessing"
				
				constraint (ShipTerm not entered)
					"SpecifiedCountries/jurisdictionsOrRegionsNotValidForIntrastatProcessing"
			else
			if (UnloadingPort entered)
				constraint (DestinationUnloadingPortRel exists)
					"UnloadingPortForDestinationCountry/jurisdictionDoesNotExist"

		InterfaceEdits
		
			if (!ErrorOccurred)
				if  (Vendor not entered
				and  OldVendor entered
				and !VendorForLegacyVendorRel exists
				and !InterfaceMappingVendorRel exists)
					ErrorOccurred		= true
					LocalErrorMessage	= InterfacedVendorNotFoundMsg
				else
				if  (PayVendor not entered
				and  InterfacedPayVendor entered
				and !LegacyPayVendorRel exists
				and !InterfaceMappingPayVendorRel exists)
					ErrorOccurred		= true
					LocalErrorMessage	= InterfacedPayVendorNotFoundMsg
				else					
				if  (ProcessType not entered)
					ErrorOccurred		= true
					LocalErrorMessage	= ProcessTypeRequiredMsg
				else
				if  (!ProcessType.Basic
				and  !ProcessType.Freight
				and  !ProcessType.MatchInvoice
				and  !ProcessType.AOCMatchInvoice
				and  !ProcessType.ServiceContract)
					ErrorOccurred		= true
					LocalErrorMessage	= InvalidProcessTypeMsg
				else
				if  ((CreateDetails.FromPurchaseOrder
				or    CreateDetails.FromReceipt
				or    CreateDetails.FromReceiptThenFromPO)
				and  (PayablesInvoiceDetailImportRel exists
				or    PayablesInvoiceAddOnChargeImportRel exists))
					ErrorOccurred		= true
					LocalErrorMessage	= CannotSelectCreateDetailsMsg
				else
				if  (MatchPrepaymentMethod.PrepayFromInvoice
				and (PayablesInvoiceDetailImportRel exists
				or   PayablesInvoiceAddOnChargeImportRel exists))
					ErrorOccurred		= true
					LocalErrorMessage	= NoDetailsForPrepaymentFromInvoice

			if (!ErrorOccurred)
				if  (ProcessType.MatchInvoice
				or   ProcessType.AOCMatchInvoice)
					CheckCompany = Company
					CheckPurchaseOrder = NumericInterfacedPurchaseOrder

					if  (PurchaseOrder not entered
					and  InterfacedPurchaseOrder not entered
					and  MatchReferenceNumber not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= PurchaseOrderRequiredMsg
					else				
					if  (PurchaseOrder not entered
					and  InterfacedPurchaseOrderRel not exists
					and  CheckPurchaseOrderRel not exists
					and  MatchReferenceNumber not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= InterfacedPurchaseOrderNotFoundMsg
				else
				if (ProcessType.ServiceContract
				and ServiceContract not entered)
					ErrorOccurred		= true
					LocalErrorMessage	= ServiceContractRequiredMsg
				

	Actions
		Create is a Create Action
			Action Rules
				if (TaxEntityRel.IntrastatUsed)
					include ProcessIntrastat

		CreateNoRules is a Create Action
			restricted
			bypass field rules
		
		Update is an Update Action
			Entrance Rules
				if (ProcessType changed
				and PayablesInvoice entered)
				    confirmation required
				        "InvoiceHasBeenPartiallyInterfaced.ChangingTheProcessTypeWillCauseRecordsAlreadyInterfacedToBeRemoved.Continue?"
				    invoke Unreleased.Delete PayablesInvoice
				    initialize PayablesInvoice    

				if (PayablesInvoice entered)
					constraint (InvoiceTransactionAmount = PayablesInvoice.InvoiceAmount.CurrencyAmount)
						"CannotChangeInvoiceAmountOnPartiallyInterfacedInvoice"
			Action Rules
				if (TaxEntityRel.IntrastatUsed)
					include ProcessIntrastat

				if (SecondaryKeyFields changed)
					invoke ChangeSecondaryKeyFields OldMatchPurchaseOrderInvoiceImportRel
						invoked.NewRunGroup			= RunGroup
						invoked.NewCompany			= Company
						invoked.NewVendor			= Vendor
						invoked.NewOldVendor		= OldVendor
						invoked.NewEDINumber		= EDINumber
						invoked.NewInvoice			= Invoice
						invoked.NewSuffix			= Suffix
					invoke ChangeSecondaryKeyFields OldMatchServiceContractInvoiceImportRel
						invoked.NewRunGroup			= RunGroup
						invoked.NewCompany			= Company
						invoked.NewVendor			= Vendor
						invoked.NewOldVendor		= OldVendor
						invoked.NewEDINumber		= EDINumber
						invoked.NewInvoice			= Invoice
						invoked.NewSuffix			= Suffix
					invoke ChangeSecondaryKeyFields OldPayablesInvoiceDetailImportRel
						invoked.NewRunGroup			= RunGroup
						invoked.NewCompany			= Company
						invoked.NewVendor			= Vendor
						invoked.NewOldVendor		= OldVendor
						invoked.NewEDINumber		= EDINumber
						invoked.NewInvoice			= Invoice
						invoked.NewSuffix			= Suffix
					invoke ChangeSecondaryKeyFields OldMatchInvoiceDistributionImportRel
						invoked.NewRunGroup			= RunGroup
						invoked.NewCompany			= Company
						invoked.NewVendor			= Vendor
						invoked.NewOldVendor		= OldVendor
						invoked.NewEDINumber		= EDINumber
						invoked.NewInvoice			= Invoice
						invoked.NewSuffix			= Suffix
					invoke ChangeSecondaryKeyFields OldPayablesInvoiceAddOnChargeImportRel
						invoked.NewRunGroup			= RunGroup
						invoked.NewCompany			= Company
						invoked.NewVendor			= Vendor
						invoked.NewOldVendor		= OldVendor
						invoked.NewEDINumber		= EDINumber
						invoked.NewInvoice			= Invoice
						invoked.NewSuffix			= Suffix
					invoke ChangeSecondaryKeyFields OldMiscPayablesInvoiceAddOnChargeImportRel
						invoked.NewRunGroup			= RunGroup
						invoked.NewCompany			= Company
						invoked.NewVendor			= Vendor
						invoked.NewOldVendor		= OldVendor
						invoked.NewEDINumber		= EDINumber
						invoked.NewInvoice			= Invoice
						invoked.NewSuffix			= Suffix
					invoke ChangeSecondaryKeyFields OldMatchInvoiceImportCommentRel
						invoked.NewCompany			= Company
						invoked.NewVendor			= Vendor
						invoked.NewOldVendor		= OldVendor
						invoked.NewEDINumber		= EDINumber
						invoked.NewInvoice			= Invoice
						invoked.NewSuffix			= Suffix
				
				if (ProcessType changed)
					if (!ProcessType.MatchInvoice
					and !ProcessType.AOCMatchInvoice)
					    initialize PurchaseOrder
					    initialize InterfacedPurchaseOrder
					    
						if (SecondaryKeyFields changed)
							invoke FastUpdate PayablesInvoiceDetailImportRel
								initialize invoked.PurchaseOrder
							invoke FastUpdate PayablesInvoiceAddOnChargeImportRel
								initialize invoked.PurchaseOrder
							invoke FastUpdate MiscPayablesInvoiceAddOnChargeImportRel
								initialize invoked.PurchaseOrder
						else
							invoke FastUpdate OldPayablesInvoiceDetailImportRel
								initialize invoked.PurchaseOrder
							invoke FastUpdate OldPayablesInvoiceAddOnChargeImportRel
								initialize invoked.PurchaseOrder
							invoke FastUpdate OldMiscPayablesInvoiceAddOnChargeImportRel
								initialize invoked.PurchaseOrder

					if (!ProcessType.ServiceContract)
					    initialize ServiceContract	

        		if (PurchaseOrder changed)
					if (!MatchPurchaseOrderInvoiceImportRel exists)
						for each PayablesInvoiceDetailImportRel
							if (each.PurchaseOrder = old PurchaseOrder)
								invoke FastUpdate each
									invoked.PurchaseOrder = PurchaseOrder 
						for each PayablesInvoiceAddOnChargeImportRel
							if (each.PurchaseOrder = old PurchaseOrder)
								invoke FastUpdate each
									invoked.PurchaseOrder = PurchaseOrder 
						for each MiscPayablesInvoiceAddOnChargeImportRel
							if (each.PurchaseOrder = old PurchaseOrder)
								invoke FastUpdate each
									invoked.PurchaseOrder = PurchaseOrder
							if (!ProcessType.ServiceContract)
								initialize ServiceContract					
					    

		FastUpdate is an Update Action
			restricted
			bypass field rules
					
		Delete is a Delete Action
			Entrance Rules
				if  (PayablesInvoice entered)
					confirmation required
						"InvoiceIsPartiallyInterfacedAndThoseRecordsWillAlsoBeDeleted"
					invoke Unreleased.Delete PayablesInvoice

				invoke Delete PayablesInvoiceDetailImportRel
				invoke Delete MatchInvoiceDistributionImportRel
				invoke Delete PayablesInvoiceAddOnChargeImportRel
				invoke Delete MiscPayablesInvoiceAddOnChargeImportRel
				invoke Delete MatchInvoiceImportCommentRel

		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules
					
		DeleteAllTransactionsForRunGroup is a Set Action
			confirmation required
		
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"
				DeletePartiallyInterfacedRecords is Boolean
					
			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is actor.context.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
			
			Instance Selection
				where (RunGroup	= PrmRunGroup
				and   (DeletePartiallyInterfacedRecords
				or     PayablesInvoice not entered))
				
			Action Rules
			
				Instance Rules
					if  (PayablesInvoice entered)
						invoke Unreleased.Delete PayablesInvoice

					if  (PayablesCompanyRel.Company.FinanceEnterpriseGroup         = PrmFinanceEnterpriseGroup)
						invoke FastDelete PayablesInvoiceDetailImportRel
						invoke FastDelete MatchInvoiceDistributionImportRel
						invoke FastDelete PayablesInvoiceAddOnChargeImportRel
						invoke FastDelete MiscPayablesInvoiceAddOnChargeImportRel
						invoke FastDelete MatchInvoiceImportCommentRel
						invoke FastDelete
					
					
 		ResetErrorMessage is an Instance Action
 			valid when (RecordInError)
			Action Rules
	 			initialize ErrorMessage
	 			RecordInError = false

 		SetError is an Instance Action
 			restricted
 			Parameters
 				PrmErrorMessage			is Alpha 150

			Action Rules


				RecordInError					= true
				ErrorMessage					= PrmErrorMessage
				
				invoke Update InterfaceRun
					invoked.Status = 2
					
				if  (InterfaceRun.MoveErrorsToNewRunGroup)
				
					if  (InterfaceRun.ErrorRunGroup not entered)
						increment Company.VendorGroup.LastErrorRunGroupNumber
						LocalErrorRunGroup					= InterfaceRun.ErrorRunGroupPrefix + "ERRORS_" + Company.VendorGroup.LastErrorRunGroupNumber

						invoke Update InterfaceRun
							invoked.ErrorRunGroup			= LocalErrorRunGroup
					else
						LocalErrorRunGroup					= InterfaceRun.ErrorRunGroup
						
					RunGroup								= LocalErrorRunGroup

					invoke ChangeRunGroup OldPayablesInvoiceDetailImportRel
						invoked.NewRunGroup					= LocalErrorRunGroup
					invoke ChangeRunGroup OldMatchInvoiceDistributionImportRel
						invoked.NewRunGroup					= LocalErrorRunGroup
					invoke ChangeRunGroup OldPayablesInvoiceAddOnChargeImportRel
						invoked.NewRunGroup					= LocalErrorRunGroup
					invoke ChangeRunGroup OldMiscPayablesInvoiceAddOnChargeImportRel
						invoked.NewRunGroup					= LocalErrorRunGroup
					invoke ChangeRunGroup OldMatchPurchaseOrderInvoiceImportRel
						invoked.NewRunGroup					= LocalErrorRunGroup
					invoke ChangeRunGroup OldMatchServiceContractInvoiceImportRel
						invoked.NewRunGroup					= LocalErrorRunGroup

		InterfaceInvoices is a Set Action
		    default label is "InterfaceMatchInvoices"
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a PayablesCompany
				PrmVendorGroup				is a VendorGroup	
				PrmVendor					is a Vendor
					context of PrmVendorGroup	
				PrmProcessLevel				is a PayablesProcessLevel
				PrmAuthorityCode			is a PayablesAuthorityCode
					context of PrmVendorGroup	
				InvoiceProcess          	is AlphaUpper size 1
					States
						Add         value is "A"
						AddAndMatch value is "M"
				MatchPoint					is Numeric 1
					States
						RuleGroupOne		value is 1
						RuleGroupTwo		value is 2
						RuleGroupThree		value is 3
				DefaultProcessLevel			is a PayablesProcessLevel
				DefaultAuthorityCode		is a PayablesAuthorityCode
					context of PrmVendorGroup	
				AllowMatchItemOrVendorItem			is Boolean
		    		default label is "AllowMatchOnEitherItemOrVendorItem"
				IncludeInvoicesInError		is Boolean
				MoveErrorsToNewRunGroup  	is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				AutoCreateDetails			is Numeric 1
					States
		 				FromPurchaseOrder		value is 2
		 				FromReceipt				value is 3
						FromReceiptThenFromPO	value is 4
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is actor.context.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
				PrmRunGroup
					required
						"RunGroupIsRequired"
					
					LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
					LocalRunGroup = PrmRunGroup
					
					for each InterfaceResultInProcessRel					
						Diff = (current timestamp - each.RunTime)
						constraint (Diff > 86400)
							"ExistingJobForThisRunGroupIsAlreadyInProcess"
				PrmCompany
					if (!PrmVendorGroup entered)		
						PrmVendorGroup = PrmCompany.PayablesCompany.VendorGroup
					if (PrmProcessLevel entered)
						required
							"CompanyRequiredWhenProcessLevelIsEntered"
				PrmVendorGroup		
					if (PrmVendor entered)
						required
							"VendorGroupRequiredWhenVendorIsEnteredWithoutCompany"
					if (PrmAuthorityCode entered)
						required
							"VendorGroupRequiredWhenAuthorityCodeIsEnteredWithoutCompany"
					constraint (!PrmCompany entered or PrmCompany.PayablesCompany.VendorGroup = PrmVendorGroup)
						"VendorGroupDifferentFromEnteredCompanyVendorGroup<PrmCompany.PayablesCompany.VendorGroup>"

				InvoiceProcess
					required
					initial value is "A"
				MatchPoint
					default to 1
					initial value is 1
			Local Fields
				LocalInstanceCount				is Numeric 10
				LocalInterfaceResultView		is a PayablesInvoiceInterfaceResult view	
				LocalInterfacedInvoiceCountTotal		is Numeric 10
				LocalInterfacedPurchaseOrderCount		is Numeric 10
				LocalInterfacedInvoiceAmountTotal		is an InternationalAmount
				LocalInterfaceInvoiceErrorCount			is Numeric 10
				LocalInterfacedCommentsCount			is Numeric 10
				LocalInterfaceCommentErrorCount			is Numeric 10
				LocalTaxEngineTaxAmount						is an InternationalAmount

				
			Instance Selection			
				where (RunGroup	= PrmRunGroup
				and    (PrmCompany            			  not entered
				or      Company	= PrmCompany)
				and	   (PrmVendorGroup						not entered		
				or 		Company.PayablesCompany.VendorGroup = PrmVendorGroup)
				and    (PrmVendor            			  not entered
				or      Vendor	= PrmVendor)
				and    (PrmProcessLevel            			  not entered
				or      ProcessLevel	= PrmProcessLevel)
				and    (PrmAuthorityCode       			  not entered
				or      AuthorityCode					= PrmAuthorityCode)
				and    (IncludeInvoicesInError
				or      !RecordInError))

			Sort Order is ByRunGroupInvoiceType

			Action Rules

				Empty Set Rules
					invoke Create PayablesInvoiceInterfaceResult
						assign result to LocalInterfaceResultView
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 2
						invoked.Company						= PrmCompany
						invoked.VendorGroup					= PrmVendorGroup	
						invoked.Vendor						= PrmVendor
						invoked.ProcessLevel				= PrmProcessLevel
						invoked.AuthorityCode				= PrmAuthorityCode
						invoked.IncludeInvoicesInError		= IncludeInvoicesInError
						invoked.InvoiceProcess				= InvoiceProcess
						invoked.MatchPoint					= MatchPoint
						invoked.ValidateVendorItem			= AllowMatchItemOrVendorItem
						invoked.AutoCreateDetails 			= AutoCreateDetails
						invoked.MoveErrorsToNewRunGroup		= MoveErrorsToNewRunGroup
						invoked.ErrorRunGroupPrefix			= PrmErrorRunGroupPrefix
						invoked.DefaultProcessLevel			= DefaultProcessLevel
						invoked.DefaultAuthorityCode		= DefaultAuthorityCode
						invoked.Status						= 1 
				
				RunGroup Set Rules
					Entrance Rules
					
						ErrorOccurred							= false
						
						invoke Create PayablesInvoiceInterfaceResult
							assign result to LocalInterfaceResultView
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.RunTime						= current timestamp
							invoked.RunGroup					= PrmRunGroup
							invoked.RunType						= 2
							invoked.Company						= PrmCompany
							invoked.VendorGroup					= PrmVendorGroup	
							invoked.Vendor						= PrmVendor
							invoked.ProcessLevel				= PrmProcessLevel
							invoked.AuthorityCode				= PrmAuthorityCode
							invoked.IncludeInvoicesInError		= IncludeInvoicesInError
							invoked.InvoiceProcess				= InvoiceProcess
							invoked.MatchPoint					= MatchPoint
							invoked.ValidateVendorItem			= AllowMatchItemOrVendorItem
							invoked.AutoCreateDetails 			= AutoCreateDetails
							invoked.ErrorRunGroupPrefix			= PrmErrorRunGroupPrefix
							invoked.MoveErrorsToNewRunGroup		= MoveErrorsToNewRunGroup 
							invoked.DefaultProcessLevel			= DefaultProcessLevel
							invoked.DefaultAuthorityCode		= DefaultAuthorityCode

					Exit Rules

						invoke Update LocalInterfaceResultView.PayablesInvoiceInterfaceResult
							invoked.RecordsProcessed			= LocalInstanceCount
							invoked.InterfacedInvoicesAmountTotal	= LocalInterfacedInvoiceAmountTotal
							invoked.InterfacedInvoicesCount			= LocalInterfacedInvoiceCountTotal
							invoked.InterfaceInvoiceErrorCount		= LocalInterfaceInvoiceErrorCount
							invoked.InterfacedCommentsCount			= LocalInterfacedCommentsCount
							invoked.InterfacedPurchaseOrdersCount    = LocalInterfacedPurchaseOrderCount

						invoke PurchaseOrderLoad MatchPurchaseOrderInvoiceImport
							invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.PrmRunGroup					= PrmRunGroup
							invoked.PrmCompany					= PrmCompany
							invoked.PrmVendor					= PrmVendor
							invoked.PrmVendorGroup				= PrmVendorGroup	
							invoked.PrmProcessLevel				= PrmProcessLevel
							invoked.PrmAuthorityCode			= PrmAuthorityCode
							invoked.InvoiceProcess				= InvoiceProcess
							invoked.MatchPoint					= MatchPoint
							invoked.AllowMatchItemOrVendorItem			= AllowMatchItemOrVendorItem
							invoked.PrmInterfaceRun				= LocalInterfaceResultView.PayablesInvoiceInterfaceResult
				
						invoke AcknowledgeForFailureRunGroupBOD 
							invoked.PrmRunGroup	= RunGroup
							
				Instance Rules
				

					if   (PayablesCompanyRel.Company.FinanceEnterpriseGroup         = PrmFinanceEnterpriseGroup
					and  (IncludeInvoicesInError
					or    !RecordInError))
						

						initialize ErrorMessage
						RecordInError						= false
						ErrorOccurred						= false
						InterfaceRun						= LocalInterfaceResultView.PayablesInvoiceInterfaceResult
						LocalPayablesInvoiceInterfaceResult = LocalInterfaceResultView.PayablesInvoiceInterfaceResult


						initialize ErrorOccurred

						if (PayablesInvoice entered
						and PayablesInvoice not exists)
						    initialize PayablesInvoice

						if (PayablesInvoice entered)

							if (TaxEntityRel.ThirdParty.TaxEngine)
								LocalTaxEngineTaxAmount = 0
								for each TaxEngineTaxDetailRel





									if  ((each.TaxClassification < 3
									and   InvoiceTransactionAmount > 0
									and   each.TaxAmount > 0)
									or    (each.TaxClassification < 3
									and   InvoiceTransactionAmount < 0
									and   each.TaxAmount < 0)
									or   (each.TaxClassification > 2
									and   InvoiceTransactionAmount > 0
									and   each.TaxAmount < 0)
									or   (each.TaxClassification > 2
									and   InvoiceTransactionAmount < 0
									and   each.TaxAmount > 0))
										LocalTaxCode = each.TaxCode
										if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
											LocalTaxEngineTaxAmount += each.TaxAmount

							InterfacedInvoice							= PayablesInvoice.PayablesInvoice

							if (DistributionDate entered 
							and DistributionDate not within CompanySystemClosingControlRel.ValidEntryDate)
								DistributionDate = PayablesInvoice.DistributionDate 

							invoke Update PayablesInvoice
								resume on error
									ErrorOccurred		= true
									LocalErrorMessage	= error message
								invoked.OriginatingInterfaceRun			= LocalPayablesInvoiceInterfaceResult
								invoked.BypassInterfaceInProcessEdit	= true 
								invoked.InvoiceDate 					= InvoiceDate
								if (DueDate entered)
								    invoked.DueDate 					= DueDate
								invoked.InvoiceAmount.CurrencyAmount	= InvoiceTransactionAmount
								if (!TaxEntityRel.ThirdParty.TaxEngine)
									invoked.TaxableAmount 				= TaxableAmount
									invoked.TaxAmount 					= TotalTaxAmount
								else 
									invoked.TaxAmount 					= LocalTaxEngineTaxAmount

								invoked.ReasonCode						= ReasonCode
								invoked.Description 					= Description
								if (DistributionDate entered)
								    invoked.DistributionDate 			= DistributionDate

								invoked.RemitToCode 					= RemitToCode	

							if (ErrorOccurred)
								LocalInterfaceInvoiceErrorCount			+= 1
								invoke SetError
									invoked.PrmErrorMessage			= LocalErrorMessage
							else
								LocalInterfacedInvoiceCountTotal		+= 1
								LocalInterfacedInvoiceAmountTotal		+= InvoiceTransactionAmount
								for each MatchInvoiceImportCommentRel 
				
									invoke Create PayablesInvoiceComment
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message
										fill in fields from each
										invoked.Company						= Company
										invoked.PayablesInvoice				= PayablesInvoice
					
									if (ErrorOccurred)
										LocalInterfaceCommentErrorCount	+= 1
										invoke SetError
											invoked.PrmErrorMessage			= LocalErrorMessage
									else
										LocalInterfacedCommentsCount	+= 1
										
										invoke Delete each
						else
							include InterfaceEdits
							if (ErrorOccurred)
								LocalInterfaceInvoiceErrorCount			+= 1
								invoke SetError
									invoked.PrmErrorMessage				= LocalErrorMessage
									
							if (!ErrorOccurred)

								if  (ProcessType.MatchInvoice
								or   ProcessType.AOCMatchInvoice)
									CheckCompany = Company
									CheckPurchaseOrder = NumericInterfacedPurchaseOrder
									
									if (InterfacedPurchaseOrder entered
									and PurchaseOrder not entered)

										if  (InterfacedPurchaseOrderRel exists)
											PurchaseOrder			= first InterfacedPurchaseOrderRel.PurchaseOrder
										else
										if  (CheckPurchaseOrderRel exists)
											PurchaseOrder			= NumericInterfacedPurchaseOrder
											
								if (TaxEntityRel.ThirdParty.TaxEngine)
									LocalTaxEngineTaxAmount = 0
									for each TaxEngineTaxDetailRel





										if  ((each.TaxClassification < 3
										and   InvoiceTransactionAmount > 0
										and   each.TaxAmount > 0)
										or    (each.TaxClassification < 3
										and   InvoiceTransactionAmount < 0
										and   each.TaxAmount < 0)
										or   (each.TaxClassification > 2
										and   InvoiceTransactionAmount > 0
										and   each.TaxAmount < 0)
										or   (each.TaxClassification > 2
										and   InvoiceTransactionAmount < 0
										and   each.TaxAmount > 0))
											LocalTaxCode = each.TaxCode
											if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
												LocalTaxEngineTaxAmount += each.TaxAmount

									if (InvoiceType.CreditMemo
									and CreditMemoReferenceInvoice not entered)
										CreditMemoReferenceInvoice = Invoice



								invoke CreateImportInvoice PayablesInvoice
									assign result to InterfacedInvoice
									resume on error
										ErrorOccurred		= true
										LocalErrorMessage	= error message
									fill in fields from this instance
										except invoked.InvoiceAmount
										except invoked.DiscountAmount
										except invoked.TotalTaxAmount
			
									invoked.Vendor								= DerivedVendor
									invoked.PayVendor							= DerivedPayVendor
			
									if  (ProcessType.Basic)
										invoked.TransientInvoiceEntryTemplate	= 0
										if (ExternalPurchaseOrder entered)
											invoked.ExternalPurchaseOrder		= ExternalPurchaseOrder 
										else
										if (InterfacedPurchaseOrder entered)
											invoked.ExternalPurchaseOrder		= InterfacedPurchaseOrder 
										else
										if (PurchaseOrder entered)
											invoked.ExternalPurchaseOrder		= PurchaseOrder 
									else
									if  (ProcessType.Freight)
										invoked.TransientInvoiceEntryTemplate	= 3
										if (ExternalPurchaseOrder entered)
											invoked.ExternalPurchaseOrder		= ExternalPurchaseOrder 
										else
										if (InterfacedPurchaseOrder entered)
											invoked.ExternalPurchaseOrder		= InterfacedPurchaseOrder 
										else
										if (PurchaseOrder entered)
											invoked.ExternalPurchaseOrder		= PurchaseOrder 
									else
									if  (ProcessType.ServiceContract)
										invoked.TransientInvoiceEntryTemplate	= 5
									else
									if  (ProcessType.MatchInvoice)
										invoked.TransientInvoiceEntryTemplate	= 4
										invoked.FirstPurchaseOrder				= PurchaseOrder

									else
									if  (ProcessType.AOCMatchInvoice)
										invoked.TransientInvoiceEntryTemplate	= 3
										invoked.FirstPurchaseOrder				= PurchaseOrder
										invoked.TransientAddOnChargeOnly 		= true
										
									if  (!PayablesInvoiceDetailImportRel exists
									and   PayablesInvoiceAddOnChargeImportRel exists)
										invoked.TransientAddOnChargeOnly 		= true

									if (ProcessLevel not entered)
										invoked.ProcessLevel					= DefaultProcessLevel
																				
									if (AuthorityCode not entered
									and DefaultAuthorityCode entered)
										invoked.AuthorityCode					= DefaultAuthorityCode

									invoked.InvoiceAmount.CurrencyAmount		= InvoiceTransactionAmount
									invoked.DiscountAmount.CurrencyAmount		= DiscountAmount
									invoked.DiscountAmount.FunctionalAmount.EnteredCurrencyRate = DiscountPercent
									invoked.DiscountAmount.ExchangeDate			= DiscountDate

									if (TaxEntityRel.ThirdParty.TaxEngine)
										invoked.TaxAmount							= LocalTaxEngineTaxAmount
									else
										invoked.TaxAmount							= TotalTaxAmount

									invoked.TaxableAmount						= TaxableAmount
			
									invoked.CreditMemoReferenceInvoice			= CreditMemoReferenceInvoice
									invoked.IDMDocumentPID						= IDMDocumentPID
									invoked.ReceiptOfInvoiceDate				= InvoiceReceiptDate
									
									invoked.OverridePayImmediately				= PayImmediately
									if (CreateDetails not entered
									and AutoCreateDetails entered
									and PayablesInvoiceDetailImportRel		not exists
									and PayablesInvoiceAddOnChargeImportRel not exists)
										invoked.TransientCreateDetails			= AutoCreateDetails
									else
										invoked.TransientCreateDetails			= CreateDetails
									display "AutoCreateDtl<AutoCreateDetails>"
									display "CreateDtl<CreateDetails>"
									invoked.IncomeCode							= VendorIncomeCode
									invoked.TransientReportableAmount			= ReportableIncomeAmount
									if  (TaxEntityRel.ThirdParty.TaxEngine
									and  InvoiceType.CreditMemo)
										invoked.InvoiceSource					= "Y"
									else
										invoked.InvoiceSource					= "E"
									invoked.InterfaceInProcess					= true
									invoked.OriginatingInterfaceRun				= LocalPayablesInvoiceInterfaceResult

									
								PayablesInvoice								= InterfacedInvoice.PayablesInvoice


								if (ErrorOccurred)
									LocalInterfaceInvoiceErrorCount			+= 1
									if  (PayablesInvoice exists)
										invoke Delete PayablesInvoice.PayablesInvoice
									else
									if  (PayablesInvoiceInterfaceInProcessRel exists
									and  PayablesInvoiceInterfaceInProcessRel.OriginatingInterfaceRun = LocalPayablesInvoiceInterfaceResult)
										invoke Delete PayablesInvoiceInterfaceInProcessRel

									invoke SetError
										invoked.PrmErrorMessage			= LocalErrorMessage
										
								else
									LocalInterfacedInvoiceCountTotal		+= 1
									LocalInterfacedInvoiceAmountTotal		+= InvoiceTransactionAmount
									if (PurchaseOrder entered
									or  InterfacedPurchaseOrder entered)
										LocalInterfacedPurchaseOrderCount += 1
									for each MatchInvoiceImportCommentRel 
					
										invoke Create PayablesInvoiceComment
											resume on error
												ErrorOccurred		= true
												LocalErrorMessage	= error message
											fill in fields from each
											invoked.Company						= Company
											invoked.PayablesInvoice				= PayablesInvoice
						
										if (ErrorOccurred)
											LocalInterfaceCommentErrorCount	+= 1
											invoke SetError
												invoked.PrmErrorMessage			= LocalErrorMessage
										else
											LocalInterfacedCommentsCount	+= 1
											
											invoke Delete each
												

						LocalInstanceCount			+= 1

						if  (!ErrorOccurred
						and  ProcessType.Basic
						and  PayablesInvoice exists
						and  TaxEntityRel.ThirdParty.TaxEngine)


							if (MatchInvoiceDistributionImportRel not exists)


								if (InvoiceType.Invoice
								and VendorReturn not entered)
									invoke CreateForTaxEngine PayablesInvoiceDistribution
										assign result to InterfacedDistribution
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message
										invoked.Company								= Company
										invoked.PayablesInvoice						= PayablesInvoice
										invoked.GLFinanceCodeBlock					= PayablesCompanyRel.InvoiceItemDetailAccount
										invoked.GLTransactionAmount					= InvoiceTransactionAmount - PayablesInvoice.TaxAmount 
										invoked.DistributionAmount.CurrencyAmount	= InvoiceTransactionAmount - PayablesInvoice.TaxAmount
										invoked.TransientBypassErrorUpdate 			= true
				
									if (ErrorOccurred)

										invoke SetError
											invoked.PrmErrorMessage					= LocalErrorMessage
							else
								for each MatchInvoiceDistributionImportRel
									invoke CreateForTaxEngine PayablesInvoiceDistribution
										assign result to InterfacedDistribution
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message

										fill in fields from each

										invoked.Company								= Company
										invoked.PayablesInvoice						= PayablesInvoice
										invoked.Vendor								= DerivedVendor
										invoked.GLFinanceCodeBlock					= each.DistributionAccount
										invoked.GLTransactionAmount					= each.OriginalTransactionAmount
										invoked.DistributionAmount.CurrencyAmount	= each.OriginalTransactionAmount
										invoked.TransientBypassErrorUpdate 			= true
				
									if (ErrorOccurred)
										invoke SetError 
											invoked.PrmErrorMessage					= LocalErrorMessage


							initialize LocalTaxSequence
							for each TaxEngineTaxDetailRel







								if  ((each.TaxClassification < 3
								and   InvoiceTransactionAmount > 0
								and   each.TaxAmount > 0)
								or    (each.TaxClassification < 3
								and   InvoiceTransactionAmount < 0
								and   each.TaxAmount < 0)
								or   (each.TaxClassification > 2
								and   InvoiceTransactionAmount > 0
								and   each.TaxAmount < 0)
								or   (each.TaxClassification > 2
								and   InvoiceTransactionAmount < 0
								and   each.TaxAmount > 0))

									if (PayablesInvoice.VendorReturn entered)
										LocalPurchaseOrder = PayablesInvoice.VendorReturn.CreatedFromPurchaseOrder
									else	
										LocalPurchaseOrder = ExternalPurchaseOrder

									LocalLineNumber = each.OrderLineNumber
									invoke CreateForTaxEngine PayablesInvoiceDistribution
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message

										invoked.Company								= Company
										invoked.PayablesInvoice						= PayablesInvoice
										invoked.DistributionAmount.CurrencyAmount	= each.TaxAmount
										invoked.GLTransactionAmount					= each.TaxAmount
										invoked.TransientBypassErrorUpdate 			= true

										if (each.TaxCode not entered)
											invoked.GLFinanceCodeBlock				= PayablesCompanyRel.InvoiceItemDetailAccount
										else
											LocalTaxCode = each.TaxCode
											invoked.TaxCode							= each.TaxCode

											if (EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
												invoked.TaxType 					= "A"
											else
												invoked.TaxType 					= "I"

											if (EntityTaxCodeRel.LandedCost
											and InterfacedPODistributionsRel exists)

												invoked.GLFinanceCodeBlock			= first InterfacedPODistributionsRel.DistributionAccount
											else
												if  (EntityTaxCodeRel.TaxPoint 		= "P")
													invoked.GLFinanceCodeBlock		= EntityTaxCodeRel.TaxInputDueAccount
												else
													invoked.GLFinanceCodeBlock		= EntityTaxCodeRel.TaxInputAccount

										if (PayablesInvoice.VendorReturn entered)
											invoked.PurchaseOrder					= LocalPurchaseOrder 
											invoked.PurchaseOrderLine 				= each.OrderLineNumber

									if (ErrorOccurred)

										invoke SetError 
											invoked.PrmErrorMessage					= LocalErrorMessage
										invoke Delete PayablesInvoice.PayablesInvoiceDistributionRel												

							if  (TaxEntityRel.ThirdParty.TaxEngine
							and  !ErrorOccurred)
								invoke Delete MatchInvoiceDistributionImportRel


 		PostLoadInterface is a Set Action
 			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is like PayablesCompany
				PrmVendor					is like Vendor
				PrmProcessLevel				is like PayablesProcessLevel
				PrmAuthorityCode			is like PayablesAuthorityCode
				InvoiceProcess          	is AlphaUpper size 1
					States
						Add         value is "A"
						AddAndMatch value is "M"
				MatchPoint					is Numeric 1
					States
						RuleGroupOne		value is 1
						RuleGroupTwo		value is 2
						RuleGroupThree		value is 3
				AllowMatchItemOrVendorItem			is Boolean
				IncludeInvoicesInError		is Boolean
				PrmInterfaceRun				is a PayablesInvoiceInterfaceResult
					context of PrmFinanceEnterpriseGroup		
				PrmVendorGroup				is a VendorGroup	

			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is actor.context.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
				PrmRunGroup
					required

			Accumulators
				PerfectMatchCount
				PerfectMatchAmount
				MatchedInToleranceCount
				MatchedInToleranceAmount
				MatchedOutOfToleranceCount
				MatchedOutOfToleranceAmount
				MatchedWithChargebackCount
				MatchedWithChargebackAmount
				TotalChargebackAmount
				MatchedWithServiceContractCount
				MatchedWithServiceContractAmount
				UnmatchedCount
				UnmatchedAmount
				ReleasedExpenseCount
				ReleasedExpenseAmount
				ReleasedCreditCount
				ReleasedCreditAmount
				UnreleasedExpenseCount
				UnreleasedExpenseAmount
				UnreleasedCreditCount
				UnreleasedCreditAmount

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and    (PrmCompany            			  not entered
				or      Company	= PrmCompany)
				and    (PrmVendor            			  not entered
				or      Vendor	= PrmVendor)
				and    (PrmProcessLevel            		  not entered
				or      ProcessLevel	= PrmProcessLevel)
				and    (PrmVendorGroup					not entered		
				or      Company.PayablesCompany.VendorGroup = PrmVendorGroup)
				and    (PrmAuthorityCode       			  not entered
				or      AuthorityCode					= PrmAuthorityCode)
				and     InterfaceRun					= PrmInterfaceRun)

			Sort Order is ByRunGroupInvoiceType

			Action Rules
				Empty Set Rules
						
					if (!PrmInterfaceRun.Status = 2)
						invoke Update PrmInterfaceRun
							invoked.Status        			= 1

				RunGroup Set Rules
						
					Exit Rules
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						
						invoke Update PrmInterfaceRun
							invoked.PerfectMatchCount					= PerfectMatchCount
							invoked.PerfectMatchAmount					= PerfectMatchAmount
							invoked.MatchedInToleranceCount				= MatchedInToleranceCount
							invoked.MatchedInToleranceAmount			= MatchedInToleranceAmount
							invoked.MatcedOutOfToleranceCount			= MatchedOutOfToleranceCount
							invoked.MatchedOutOfToleranceAmount			= MatchedOutOfToleranceAmount
							invoked.MatchedWithChargebackCount			= MatchedWithChargebackCount
							invoked.MatchedWithChargebackAmount			= MatchedWithChargebackAmount
							invoked.TotalChargebackAmount				= TotalChargebackAmount
							invoked.MatchedWithServiceContractCount		= MatchedWithServiceContractCount
							invoked.MatchedWithServiceContractAmount	= MatchedWithServiceContractAmount
							invoked.UnmatchedCount						= UnmatchedCount
							invoked.UnmatchedAmount						= UnmatchedAmount
							invoked.ReleasedExpenseCount				= ReleasedExpenseCount
							invoked.ReleasedExpenseAmount				= ReleasedExpenseAmount
							invoked.ReleasedCreditCount					= ReleasedCreditCount
							invoked.ReleasedCreditAmount				= ReleasedCreditAmount
							invoked.UnreleasedExpenseCount				= UnreleasedExpenseCount
							invoked.UnreleasedExpenseAmount				= UnreleasedExpenseAmount
							invoked.UnreleasedCreditCount				= UnreleasedCreditCount
							invoked.UnreleasedCreditAmount				= UnreleasedCreditAmount
							if (!invoked.Status = 2)
								invoked.Status        			= 1

						if  (GeneralLedgerSystemCodeRel.EncumbranceOption.Track     	
						or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)	
							invoke ProcessInterfaceBatchEdits BudgetEditBatch			
								invoked.PrmFinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup					
								invoked.PrmBusinessClassName 			= "PayablesInvoice" 

						if (InvoiceProcess.AddAndMatch)
							invoke ScheduleAutoMatch PrmInterfaceRun

				Instance Rules



					
					if   (!RecordInError
					and   PayablesInvoice.BackgroundProcessing.CreateMatchInvoice
					and   PayablesCompanyRel.Company.FinanceEnterpriseGroup         = PrmFinanceEnterpriseGroup)

						UnmatchedCount							+= 1
						UnmatchedAmount							+= PayablesInvoice.InvoiceAmount.CurrencyAmount

						invoke FastDelete 

					else
					if   (!RecordInError
					and   PayablesCompanyRel.Company.FinanceEnterpriseGroup         = PrmFinanceEnterpriseGroup)

						invoke FastUpdate PayablesInvoice
							invoked.InterfaceInProcess	= false

						ErrorOccurred		= false

						invoke UpdateErrorRecordsAction PayablesInvoice
							resume on error
								ErrorOccurred		= true
								LocalErrorMessage	= error message


						if (!ErrorOccurred)
							if  (!PayablesInvoice.MatchProcessType.Expense)

								invoke InvoiceUpdate PayablesInvoice
									resume on error
										ErrorOccurred		= true
										LocalErrorMessage	= error message


									
							if (!ErrorOccurred)
								if  (InvoiceProcess.AddAndMatch)

									invoke Unreleased.SubmitForApproval PayablesInvoice
										resume on error
											ErrorOccurred = true
											LocalErrorMessage	= error message

								else
								if  (PayablesInvoice.MatchProcessType.Expense
								and  ((PayablesInvoice.RemitToCode entered
								and    PayablesInvoice.RemitToCode.EDIAutoRelease)
								or    (PayablesInvoice.RemitToCode not entered
								and    PayablesInvoice.Vendor.EDIAutoRelease)))

									invoke Unreleased.Release PayablesInvoice
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message
								else
									invoke CheckRoutingRules PayablesInvoice
										resume on error

							if (ErrorOccurred)

								if  (ErrorOccurred)
									invoke Update PrmInterfaceRun
										invoked.MatchOrReleaseError = true								

									if  (!PayablesInvoice.MatchProcessType.Expense)
										invoke PurgeSetsAndResourceRecords PayablesInvoice.MatchReconQueueRel
										invoke PurgeDetail PayablesInvoice.MatchWorkRel
										invoke Purge PayablesInvoice.MatchWorkRel
	

						if (HoldCode entered)
							invoke PutInvoiceOnHold PayablesInvoice
								invoked.HoldCode = HoldCode

						if  (PayablesInvoice.MatchProcessType.Expense)
							if  (PayablesInvoice.InvoiceType.CreditMemo)
								if  (PayablesInvoice.Status.Unreleased)
									UnreleasedCreditCount				+= 1
									UnreleasedCreditAmount				+= PayablesInvoice.InvoiceAmount.CurrencyAmount
								else
									ReleasedCreditCount					+= 1
									ReleasedCreditAmount				+= PayablesInvoice.InvoiceAmount.CurrencyAmount
							else
								if  (PayablesInvoice.Status.Unreleased)
									UnreleasedExpenseCount				+= 1
									UnreleasedExpenseAmount				+= PayablesInvoice.InvoiceAmount.CurrencyAmount
								else
									ReleasedExpenseCount				+= 1
									ReleasedExpenseAmount				+= PayablesInvoice.InvoiceAmount.CurrencyAmount
						else
							UnmatchedCount							+= 1
							UnmatchedAmount							+= PayablesInvoice.InvoiceAmount.CurrencyAmount

						invoke FastDelete 


		AcknowledgeForFailureRunGroupBOD is a Set Action
			restricted
			Parameters
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"
			Instance Selection
				where (RunGroup	= PrmRunGroup
				and    Company.FinanceEnterpriseGroup    = actor.context.FinanceEnterpriseGroup
				and    SenderComponentID != "Payroll"
				and	   SenderLogicalID entered)
			Action Rules
				Instance Rules
					if (Company.FinanceEnterpriseGroup.BODTrigger and ErrorMessage entered)
						if(SenderLogicalID entered or SenderComponentID entered or SenderBODID entered )
							trigger PayablesService.MatchInvoiceImportService PA service 
								resume on error
								title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>MII:<Invoice>"
								Criteria
									Company.FinanceEnterpriseGroup      
									Company      
								Variables
									SenderLogicalID		
									SenderComponentID	
									SenderCreationDateTime 	
									SenderBODID	
									SenderOriginalBOD		
									Company 
									RunGroup	
									Invoice
		                            Company.FinanceEnterpriseGroup
		                            	variable name is FinanceEnterpriseGroup		
		                    invoke MatchInvoiceImportAlert			

				
		UpdateInterfaceAnalysisDetails is a Set Action
			restricted
			Parameters
				PrmInterfaceAnalysis is like InterfaceAnalysis
			Local Fields
				LocalDateRange 			is a DateRange
			Instance Selection			
				where (InvoiceTransactionAmount entered)
			Action Rules
				Instance Rules
					LocalInterfaceAnalysis		= PrmInterfaceAnalysis
					if (InterfaceAnalysisDetailRel exists)
						invoke UpdateInterfaceAnalysisDetails InterfaceAnalysisDetailRel
							invoked.PrmMatchInterfaceTotal	= InvoiceTransactionAmount
					else
						LocalDateRange.Begin	= InvoiceDate - InvoiceDate day + 1
						LocalDateRange.End		= LocalDateRange.Begin + 1 month - 1 day

						invoke Create InterfaceAnalysisDetail
							resume on error
							invoked.InterfaceAnalysis		= LocalInterfaceAnalysis
							invoked.PayablesCompany			= Company
							invoked.Vendor					= DerivedVendor
							invoked.Currency				= InvoiceCurrency
							invoked.MonthYear				= LocalDateRange
							invoked.MatchInterfaceTotal		= InvoiceTransactionAmount
							invoked.InterfaceTotal			= InvoiceTransactionAmount
							

#ifdef module integration
		MatchInvoiceImportAlert is an Instance Action
			restricted
			Parameters
			Action Rules
				if (FSMBODConfigurationPARel.Enable)
      				if(FSMBODConfigurationDetailPARel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "MATCHINVOICEFAILUREGROUP"
							invoked.PrmMainXML 		= MatchInvoiceImportAlertXML	
							invoked.PrmDescription	= MatchInvoiceImportAlertDesc
							invoked.PrmBODID		= DerivedBODID
#endif

							
