PayablesInvoiceDetail is a BusinessClass
	owned by ma
	prefix is MAD
	classic name is MAINVDTL

	Ontology
		symbolic key is PayablesInvoiceDetail
			classic set name is MADSET0
			classic name is SEQ-NBR
			classic name for PurchaseOrderLine is LINE-NBR
			classic name for ContractLine is CONTRACT-LINE-NBR

	Patterns
		implements StaticJava
		disable AuditIndex
		implements Archivable

	Persistent Fields
		Vendor						is a snapshot of PayablesInvoice.Vendor
		Invoice						is a snapshot of PayablesInvoice.Invoice
		Suffix						is a snapshot of PayablesInvoice.Suffix
		CancelSequence				is a snapshot of PayablesInvoice.CancelSequence
		PORelease					is a snapshot of PurchaseOrder.PORelease
		POCode						is a snapshot of PurchaseOrder.POCode
		Buyer						is a snapshot of PurchaseOrder.Buyer
		ItemType
		Item
		VendorItem
			classic name is VEN-ITEM
		ItemDescription				is a Description
			classic name is ITEM-DESC
		MatchedQuantity				is like Quantity
			classic name is MATCHED-QTY
			precision is DerivedNumberOfDecimalsQuantity
		MatchUnitCost				is an InternationalCost
			classic name is MATCH-UNIT-CST
			precision is DerivedNumberOfDecimalsCost
		VendorPriceUOM				is a UnitOfMeasure
			classic name is VPRI-UOM
		VendorPriceUOMMultiplier	is an UOMMultiplier
			classic name is VPRI-UOM-MULT
		EnteredQuantity				is a Quantity
			classic name is ENTERED-QTY
			default label is "Quantity"
			precision is DerivedNumberOfDecimalsQuantity
		EnteredUnitCost				is an InternationalCost
			classic name is ENT-UNIT-CST
			default label is "UnitCost"
			precision is DerivedNumberOfDecimalsCost
		EnteredUOM					is a UnitOfMeasure
			classic name is ENT-UOM
			default label is "UOM"
		EnteredUOMMultiplier		is an UOMMultiplier
			classic name is ENT-UOM-MULT
		InvoiceLineTaxable			is Boolean
			classic name is NO-TAX-FLAG
		TaxCode
		TaxType						is AlphaUpper size 1
		TaxAmount					is an InternationalAmount
		BuyUOMMatchedQuantity		is like Quantity
			classic name is VBUY-MATCH-QTY
			default label is "BuyQuantity"
			precision is DerivedNumberOfDecimalsQuantity
		VendorBuyUOM				is a UnitOfMeasure
			classic name is VBUY-UOM
		VendorBuyUOMMultiplier		is an UOMMultiplier
			classic name is VBUY-UOM-MULT
		MatchDetailKey
			classic name is MATCH-DTL-KEY
		RetailUnitCost				is an InternationalCost
			classic name is RTL-UNIT-COST
			precision is DerivedNumberOfDecimalsCost
		Location					is an InventoryLocation
		MatchObjectID				is an ObjId
			classic name is MATCH-OBJ-ID
		TransactionNumberOfDecimals	is an AcctNd
			classic name is TRAN-ND
		RecordSource				is a RecSource
			classic name is REC-SOURCE
		TotalDistributionAmount		is an InternationalAmount
			classic name is TOT-DIST-AMT
		TotalBaseAmount				is an InternationalAmount
			default label is "TotalFunctionalAmount"
			classic name is TOT-BASE-AMT
		Status						is Numeric size 1
			States
				Unreleased	value is 0
				Released	value is 1


		PurchaseOrderReceipt
			classic name is MA-REC-NBR
		PurchaseOrderReceiptLine	
			classic name is MA-LINE-NBR
		MatchSequence
			classic name is MATCH-SEQ-NBR
		ExcessQuantityProcess		is a MtchExcProc
			classic name is MTCH-EXC-PROC
		InvoiceType					is a PayablesInvoiceType
		DistributionDate			is Date
			classic name is DISTRIB-DATE
		UpdateDate					is TimeStamp
		TaxUsageCode
			classic name is TAX-USAGE-CD
		LastMessageSequence			is a Sequence
			classic name is LAST-MSG-SEQ
		ICNCode
		SupplementaryQuantity		is a Quantity
			classic name is SUPLMNTARY-QTY
			precision is DerivedNumberOfDecimalsQuantity
		SupplementaryUOM			is a UnitOfMeasure
			classic name is SUPLMNTARY-UOM
		StockWeight
			classic name is WEIGHT
		TermCode					is a TermsCode
			classic name is TERMS-CD
		DiscountRate
			classic name is DISC-RATE
		DiscountDate				is Date
			classic name is DISC-DATE
		FlexibleTermsFlag			is Boolean
			classic name is FLEX-FLAG













		MatchErrorType				is Numeric size 2
			classic name is MATCH-ERR-TYPE
			States
				CostError		value is 1
				QuantityError	value is 2
				ItemError		value is 3
		CatchWeightCost				is an InternationalCost
			classic name is CATCH-WGT-COST
			precision is DerivedNumberOfDecimalsCost
		ReasonCode					is a ProcurementReasonCode


		IrDiffAmt					is an InternationalAmount



		InvoicedTaxAmount			is an InternationalAmount
			classic name is INVC-TAX-AMT
		AccruedTaxAmount			is an InternationalAmount
			classic name is ACCR-TAX-AMT
		CommodityCode				
		RetainagePercent			is a Pct
			classic name is RET-PCT
		TaxableUnitCost				is an InternationalCost
			classic name is TAXBL-UNT-CST
			precision is DerivedNumberOfDecimalsCost
		ProductTaxCategory
			classic name is PROD-TAX-CAT
		ItemGTIN
			classic name is GTIN
		EAMOperationNumber			is an OperationNumber
			classic name is EAM-OPER-NBR
		EAMSequenceNumber			is a SeqNbr
			classic name is EAM-SEQ-NBR
		EAMWorkOrderNumber			is a WorkOrderNumber
			classic name is EAM-WO-NBR
		CreatedBy					is an Operator 
			holds pii
		LastUpdateDate				is TimeStamp
			classic name is LAST-UPDT-DATE
		LastUpdatedBy				is an Operator 
			holds pii
			classic name is LAST-UPDATE-BY
		GlobalLineType
			classic name is GLBL-LINE-TYPE
		MatchUpdateDate				is Date
		TotalExemptAmount			is an InternationalAmount
			default label is "ExemptAmount"
		TotalExemptAmountTaxCode	is a TaxCode
			default label is "ExemptAmountTaxCode"
		EAMWorkOrder
		EAMWorkOrderActivity
		EAMProjectID
		EAMProjectType
		EAMProjectTaxCode
		EAMManufacturing
		EAMTrade
		EAMCommodityCode
		EAMLineType
		Chemical					is Boolean
		RebuildRepair				is Boolean
		TestRequired				is Boolean
		EAMTool						is a EAMToolField	
		PointOfTitleTransfer
		HSNSACCode
		MemoAdjustType				is Numeric 1
			States
				CostAdjustment		value is 1
				QuantityAdjustment	value is 2
		
	Local Fields
		NewDistribution						is a PayablesInvoiceDistribution view
		NewMatchWork						is a MatchWork view
		NewInvoiceDetail					is a PayablesInvoiceDetail view
		LocalPayablesInvoiceDistrib			is like PayablesInvoiceDistribution
		LastTaxDistrib						is like PayablesInvoiceDistribution
		TaxLineItemView						is a TaxLineItem view
		LocalUniqueID						is like UniqueID 
		LocalCompany						is like Company
		LocalPayablesInvoice				is like PayablesInvoice
		LocalInvoice 						is like Invoice	
		LocalAccountingEntity				is an AccountingEntity
		LocalContractGroup					is AlphaUpper size 4
		LocalContract						is like Contract
		LocalContractLine					is like ContractLine
		LocalCommodityCode					is like CommodityCode
		LocalManufacturer					is a Manufacturer
		LocalMajorPurchasingClass			is like MajorPurchasingClass
		LocalMinorPurchasingClass			is like MinorPurchasingClass
		LocalUNSPSCSegment					is AlphaUpper size 2
		LocalUNSPSCFamily					is AlphaUpper size 2
		LocalUNSPSCClass					is AlphaUpper size 2
		LocalUNSPSCCommodity				is AlphaUpper size 2
		LocalPurchaseOrder					is like PurchaseOrder
		LocalOriginalInvoiceDetail			is like PayablesInvoiceDetail
		LocalPayablesInvoiceAddOnCharge     is like PayablesInvoiceAddOnCharge
		LocalAddOnCharge                    is like AddOnCharge
		LocalInventoryLocation				is like InventoryLocation

		LocalManufacturerContract			is Numeric size 15
		LocalLocation						is AlphaUpper size 5
		LocalAutoMatchResult				is like AutoMatchResult
		LocalInvoicedNotReceivedResult		is like InvoicedNotReceivedResult		
		I1									is Numeric 2
		I2									is Numeric 2
	    LocalRate 							is Percent size 6.3
		LocalDaysDiff						is Numeric 3				
		LocalItem							is like Item



		LocalMatchRule						is a MatchRule
		LocalOriginalInvoice				is like PayablesInvoice
		LocalAccrualCode					is like PayablesAccrualCode	
		CalculateTax												
		LocalTaxTable						is a TaxTableField
		LocalCalculateTaxExecuted			is Alpha 1				




		GetRetainage
		LocalGetRetainage					is Alpha 1
		IsInvoicedTax						is Boolean
		UnitOfMeasureEdit
		UOMCalculation
		LocalQuantity						is like Quantity
		LocalOldEnteredQuantity				is like Quantity
		LocalCostAmountDifference			is an InternationalCost
		LocalUnitCost						is an InternationalCost
		LocalOverToleranceAmount			is an InternationalAmount
		TestContractAmountToReverse         is an InternationalAmount
		TestContractUpdateAmountToReverse   is an InternationalAmount
		OldTestContractUpdateAmountToReverse is an InternationalAmount
		LocalOverCondition					is AlphaUpper size 3
			States
				And value is "AND"
				Or  value is "OR"
		LocalOverTolerancePercent			is Percent size 7.5
		LocalUnderToleranceAmount			is an InternationalAmount
		LocalUnderCondition					is AlphaUpper size 3
			States
				And value is "AND"
				Or  value is "OR"
		LocalUnderTolerancePercent			is Percent size 7.5
		LocalCostMessage					is Boolean
		LocalMatched						is Boolean
		LocalUnmatched						is Boolean
		MatchIndex							is Numeric 3
		LocalMessageType					is Alpha 1
		CurrencyWork						is a ReceivableExchange

		LocalResultQuantity					is Decimal 13.4
		LocalBaseAmount						is a CurrencyExchange
		LocalFromCurrency					is a FromCurrency
		LocalCurrencyAmount					is a CurrencyAmount
		LocalExchangeDate					is a ExchangeDate
		LocalTimeStamp						is TimeStamp
		LocalCommitmentAmountRemaining      is an InternationalAmount
		LocalEncumbranceDate				is Date












		LocalMatchUnitCost					is a InternationalCost
		LocalDistributionCode				is a PayablesDistributionCode

		ActionType							is Alpha 1
			States
				CreateType	value is "C"
				UpdateType	value is "U"
				DeleteType	value is "D"
				InquireType	value is "I"

		WorkCost							is like UnitCost
		PosapbUnitCost						is a UnitCost
		PosapbBreakLevel					is Alpha 1
		PosapbLineBreakQuantityAmount		is an InternationalAmount
		PosapbLineBreakPercent				is a Percent
		PosapbLineBreakCost					is a UnitCost
		PosapbBreakAmount					is an InternationalAmount
		PosapbBreakPercent					is a Percent
		PosapbCompareAmount					is an InternationalAmount
		PosapbPercent						is a Percent
		PosapbCostDifference				is an InternationalAmount


		AbsoluteUnitCost					is an InternationalCost
		CostDifference						is like UnitCost
		CostBasis							is an InternationalCost
		WorkEnteredQuantity					is like Quantity
		QuantityDifference					is like Quantity

		CostMessagesExistedPreviously		is Boolean

		RemainingAmount						is like InternationalAmount
		RemainingQuantity					is like Quantity
		LocalWorkAmount						is an InternationalCost
		PercentAccumulated					is like Percent
		QuantityAccumulated					is like Quantity

		OldEnteredQuantity					is like Quantity
		OldEnteredUnitCost					is like InternationalCost
		OldTaxableUnitCost					is like InternationalCost
		OldLocalLandedTaxAndAocUnitCost 	is like InternationalCost
		LocalLandedTaxAndAocUnitCost 		is like InternationalCost
		LocalPoAmountToCommit 				is like InternationalCost 






		LocalPassedCommitQuantity			is like Quantity
		LocalReversalUpdateAmount			is like InternationalAmount
		LocalWorkCommitAmount				is like InternationalAmount

		LocalCompletionMessage				is Alpha 100


		LocalAccruedTaxAmount				is an InternationalCost
		LocalInvoicedTaxAmount				is an InternationalCost
		LocalTaxAmount						is an InternationalCost

		OldMatchedQuantity					is like Quantity
		OldMatchUnitCost					is an InternationalCost
		OldTaxCode							is a TaxCode
		LocalTaxCode						is like TaxCode

		ProcessingTax						is Boolean
		CalculateTaxHasBeenCalled			is Boolean

		LocalDoRetainageDistribution		is Boolean
		LocalRetainageTaxableAmount			is an InternationalAmount
		LocalRetainageTranAmount			is an InternationalAmount

		LocalQuantityRatio					is like Rate
		NextSentence						is Boolean

		WorkDistributionAccount				is like FinanceCodeBlock
		WorkGLTransactionAmount				is an InternationalAmount

		WorkRetainage						is Boolean
		WorkTaxAmount						is an InternationalCost
		LocalPOLineDistribution				is like PurchaseOrderLineDistribution
		LocalContractLineDistrib			is like ContractLineDistribution
		LocalLastPoDistrib					is like PurchaseOrderLineDistribution 
		I9									is Numeric 3
		LocalCount							is Numeric 7


		LocalTotalNewTaxAmount				is an InternationalAmount
		LocalTotalAddOnChargeAmount			is an InternationalAmount

		LocalCommentText					is a CommentText				

		LocalMatchWork						is like MatchWork

		LocalEffectiveDate					is Date
		LocalReceiptQuantity				is like Quantity
		LocalReceiptQuantityComputed		is Boolean
		LocalSupplyManagementReport			is like SupplyManagementReport
		LocalDistributionAccount            is like FinanceCodeBlock

		LocalPurchaseOrderLineNumber		is like PurchaseOrderLine
		LocalUnmatchedCostLineTaxAmount		is an InternationalAmount
		LocalUnmatchedCostLineTaxableAmount	is an InternationalAmount
		LocalAOCPurchaseOrderLine			is like PurchaseOrderLine
		LocalLineTaxCount					is Numeric size 9
		LocalBODAccountingEntity  			is Alpha 100
		LocalServiceContract				is Numeric size 15
		LocalContractLineNumber				is Numeric size 9
		LocalConfigurationParameter			is Alpha size up to 200
		LocalVertexDistributionAccount      is a FinanceCodeBlock
		Idx									is Numeric 3

		LocalJurisdictionLookupKey  		is Alpha 200					

	Transient Fields
		TransientSystemCode					is a GeneralLedgerSystemCode
		TransientDocumentType				is a DocumentType
		TransientSeqNbr						is a SeqNbr
		BypassInvoiceErrorChecking			is Boolean
		BypassBudgetEdit   					is Boolean
		BypassDistributionCreate			is Boolean
		BypassActiveCodeBlockEdit
		FromInterface						is Boolean
		ChargebackFromRecon					is Boolean
		TransientCurrencyTable              is a CurrencyTable
		TransientAccountingEntity           is an AccountingEntity
		TransientExchangeDate               is an ExchangeDate
		TransientPostingDate                is a PostingDate
		TransientFromCurrency               is a FromCurrency
		TransientCurrencyAmount             is a CurrencyAmount
		ReportCurrencyAmount            	is a FinanceCurrencyAmount
		TransientTaxRate					is a CnvRate
		TransientDistributionAccount        is a FinanceCodeBlock
		TransientTransactionCodeBlock       is a TransactionCodeBlock
		TransientReportCurrencyAmount   	is a FinanceCurrencyAmount
		LocalForceCalculation		  		is Boolean
		TransientReversalUpdateReportCurrencyAmount is a FinanceCurrencyAmount
		CostOrQuantityAdjustment			is Boolean
		TaxAdjustAmount                     is an InternationalAmount
		TransientOriginalDetail				is like PayablesInvoiceDetail
		UserElementGroup
		TransientDeleteAndAdd               is Boolean
		BypassTaxDefault					is Boolean
		TransientLastInvoice				is Boolean	
	Context Fields
		MatchInvoiceReference
		MatchReconQueue
		SupplyManagementReportContext	is a SupplyManagementReport
		DueDateRange					is a DateRange		
		SelectedInvoiceType				is a PayablesInvoiceType	
		GeneralLedgerCompanyGroup
		FinanceResource
	Rule Blocks
		CheckTolerance

			LocalCostMessage = false
			if (PayablesInvoice.MatchPrepayment not entered
			or  !PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)

				if  (ItemType.Service)
					if  (Company.EnableServiceCostMessaging)
						if ((PurchaseOrderLine entered
						and  PurchaseOrderLine.ServiceCode.Quantity)
						or  (ContractLine entered
						and  ContractLine.ServiceCode.Quantity))
							include CheckToleranceServiceByQuantity
				else
				if  (Company.EnablePOCostMessaging)



					if (ItemType.Service
					and Company.ServiceMessageMatchRule entered)
						LocalMatchRule		= Company.ServiceMessageMatchRule
					else
					if (PayablesInvoice.RuleGroup entered)
						LocalMatchRule		= PayablesInvoice.RuleGroup
					else
						LocalMatchRule		= Company.POCostMessageMatchRule


					if (LocalMatchRule entered)
						initialize MatchIndex
						if 	(LocalMatchRule exists
						and  LocalMatchMessageToleranceRel exists)

							if  (ItemType.Service
							and  Company.ServiceMessageMatchRule entered
							and  PayablesInvoice.RuleGroup not entered)
								I1 = 1
								while ((I1 <= 6) and (MatchIndex not entered))
									if  (LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].MatchRuleOrder = Company.ServiceMessageRuleOrder
									and  LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].InvoiceMatchLevel.DetailMatch)
										MatchIndex = I1
										end while 
									else 
										I1 += 1
							else
							if  (Company.POCostMessageRuleOrder entered
							and  PayablesInvoice.RuleGroup not entered)
								I1 = 1
								while ((I1 <= 6) and (MatchIndex not entered))
									if  (LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].MatchRuleOrder = Company.POCostMessageRuleOrder
									and  LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].InvoiceMatchLevel.DetailMatch)
										MatchIndex = I1
										end while 
									else 
										I1 += 1
							else
								I1 = 1
								while ((I1 <= 6) and (MatchIndex not entered))
									if  (LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].InvoiceMatchLevel.DetailMatch)
										MatchIndex = I1
										end while
									else 	
										I1 += 1


						if (MatchIndex entered
						and PurchaseOrderLine entered)
							initialize LocalCostAmountDifference
							initialize LocalMessageType



							for each PurchaseOrderReceiptInvoiceLinkLastCostRel
								if (each.PayablesInvoice not = PayablesInvoice
								or  each.PoCostUpd = EnteredUnitCost)
									LocalUnitCost = each.PoCostUpd  //PERFORM 901-PROCESS-POMATCHOBJ-ROUTINES "I"/"LC"
									end for each 

							if (LocalUnitCost not entered)

								if (EnteredUnitCost = PurchaseOrderLine.EnteredUnitCost)
									LocalUnitCost = PurchaseOrderLine.EnteredUnitCost
								else
								if  (PurchaseOrderLine.LastMatchUnitCost entered)
									LocalUnitCost = PurchaseOrderLine.LastMatchUnitCost
								else
									LocalUnitCost = PurchaseOrderLine.EnteredUnitCost

							if  (PurchaseOrderLine.CostOption.VendorDetermined
							and  LocalUnitCost not entered)
								LocalUnitCost = PurchaseOrderReceiptLine.MatchUnitCost




							if  (EnteredUOM = PurchaseOrderLine.EnteredBuyUOM
							and  PurchaseOrderLine.EnteredBuyUOM != PurchaseOrderLine.VendorPriceUOM
							and  PurchaseOrderLine.VendorBuyUnitCost entered)
								LocalCostAmountDifference = EnteredUnitCost - PurchaseOrderLine.VendorBuyUnitCost
							else
								LocalCostAmountDifference = EnteredUnitCost - LocalUnitCost

							if  (EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
							and  !IsCatchWeight
							and  PurchaseOrderLine.VendorBuyUnitCost entered)

								initialize UOMCalculation

								UOMCalculation.InputUOM			= PurchaseOrderLine.EnteredBuyUOM
								UOMCalculation.InputToUOM		= EnteredUOM
								UOMCalculation.InputUnitCost	= PurchaseOrderLine.VendorBuyUnitCost
								UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate

								LocalCostAmountDifference		= EnteredUnitCost - UOMCalculation.OutputUnitCost

							LocalOverToleranceAmount 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].POCostOverToleranceAmount
							LocalOverCondition 			= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].POCostOverCondition
							LocalOverTolerancePercent 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].POCostOverTolerancePercent
							LocalUnderToleranceAmount 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].POCostUnderToleranceAmount
							LocalUnderCondition 		= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].POCostUnderCondition
							LocalUnderTolerancePercent 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].POCostUnderTolerancePercent

						if  (LocalCostAmountDifference < 0)
							LocalMessageType = "U"
							LocalCostAmountDifference 	= LocalCostAmountDifference * -1

							if (LocalUnderCondition.And)
								if (LocalCostAmountDifference > LocalUnderToleranceAmount
								and LocalCostAmountDifference > (LocalUnitCost * LocalUnderTolerancePercent))
									LocalCostMessage = true
							else
							if (LocalUnderCondition.Or)
								if (LocalCostAmountDifference > LocalUnderToleranceAmount
								or  LocalCostAmountDifference > (LocalUnitCost * LocalUnderTolerancePercent))
									LocalCostMessage = true
							else
							if  ((LocalUnderToleranceAmount entered
							and   LocalCostAmountDifference > LocalUnderToleranceAmount)
							or   (LocalUnderTolerancePercent entered
							and   LocalCostAmountDifference > (LocalUnitCost * LocalUnderTolerancePercent))
							or   (LocalUnderToleranceAmount not entered
							and   LocalUnderTolerancePercent not entered))
								LocalCostMessage = true
						else
						if  (LocalCostAmountDifference > 0)
							LocalMessageType = "O"

							if (LocalOverCondition.And)
								if (LocalCostAmountDifference > LocalOverToleranceAmount
								and LocalCostAmountDifference > (LocalUnitCost * LocalOverTolerancePercent))
									LocalCostMessage = true
							else
							if (LocalOverCondition.Or)
								if (LocalCostAmountDifference > LocalOverToleranceAmount
								or  LocalCostAmountDifference > (LocalUnitCost * LocalOverTolerancePercent))
									LocalCostMessage = true
							else
							if  ((LocalOverToleranceAmount entered
							and   LocalCostAmountDifference > LocalOverToleranceAmount)
							or   (LocalOverTolerancePercent entered
							and   LocalCostAmountDifference > (LocalUnitCost * LocalOverTolerancePercent))
							or   (LocalOverToleranceAmount not entered
							and   LocalOverTolerancePercent not entered))
								LocalCostMessage = true



		CheckToleranceServiceByQuantity

			LocalCostMessage = false
			if  (Company.EnableServiceCostMessaging
			and  Company.ServiceMessageMatchRule entered
			and  Company.ServiceMessageRuleOrder entered)

				if (PayablesInvoice.RuleGroup entered)
					LocalMatchRule		= PayablesInvoice.RuleGroup
				else
				if (Company.ServiceMessageMatchRule entered)
					LocalMatchRule		= Company.ServiceMessageMatchRule


				if (LocalMatchRule entered)
					initialize MatchIndex
					if 	(LocalMatchRule exists
					and  LocalMatchMessageToleranceRel exists)

						I1 = 1
						while ((I1 <= 6) and (MatchIndex not entered))
							if  (LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].MatchRuleOrder = Company.ServiceMessageRuleOrder
							and  LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].InvoiceMatchLevel.DetailMatch)
								MatchIndex = I1
								end while 
							else 
								I1 += 1

					if (MatchIndex entered)
						initialize LocalCostAmountDifference
						initialize LocalMessageType

						if  (PayablesInvoice.MatchProcessType.ServiceContract)
							if (ServiceByAmount)
								LocalUnitCost					= ContractLine.DerivedRemainingAmountInUse
								LocalCostAmountDifference 		= EnteredUnitCost - ContractLine.DerivedRemainingAmountInUse
							else
							if  (EnteredUOM != ContractLine.UOM)
								initialize UOMCalculation
								UOMCalculation.InputUOM			= ContractLine.UOM
								UOMCalculation.InputToUOM		= EnteredUOM
								if  (ContractLine.CurrentNetCost entered)
			    					UOMCalculation.InputUnitCost = ContractLine.CurrentNetCost
								else
									UOMCalculation.InputUnitCost = ContractLine.BaseCost
								UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
								LocalUnitCost					= UOMCalculation.OutputUnitCost
								LocalCostAmountDifference		= EnteredUnitCost - UOMCalculation.OutputUnitCost
							else
							if  (ContractLine.CurrentNetCost entered)
								LocalUnitCost					= ContractLine.CurrentNetCost
								LocalCostAmountDifference 		= EnteredUnitCost - ContractLine.CurrentNetCost
							else
								LocalUnitCost					= ContractLine.BaseCost
								LocalCostAmountDifference 		= EnteredUnitCost - ContractLine.BaseCost
						else
							if (ServiceByAmount)
								LocalUnitCost					= PurchaseOrderLine.OpenToMatchAmount
								LocalCostAmountDifference 		= EnteredUnitCost - PurchaseOrderLine.OpenToMatchAmount
							else
							if  (EnteredUOM != PurchaseOrderLine.EnteredBuyUOM)
								initialize UOMCalculation
								UOMCalculation.InputUOM			= PurchaseOrderLine.EnteredBuyUOM
								UOMCalculation.InputToUOM		= EnteredUOM
								UOMCalculation.InputUnitCost	= PurchaseOrderLine.VendorBuyUnitCost
								UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
								LocalUnitCost					= UOMCalculation.OutputUnitCost
								LocalCostAmountDifference		= EnteredUnitCost - UOMCalculation.OutputUnitCost
							else
								if (EnteredUnitCost = PurchaseOrderLine.EnteredUnitCost)
									LocalUnitCost = PurchaseOrderLine.EnteredUnitCost
								else
								if  (PurchaseOrderLine.LastMatchUnitCost entered)
									LocalUnitCost = PurchaseOrderLine.LastMatchUnitCost
								else
									LocalUnitCost = PurchaseOrderLine.EnteredUnitCost

								LocalCostAmountDifference 		= EnteredUnitCost - LocalUnitCost

					if (ServiceByAmount)
						LocalOverToleranceAmount 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceExtendedAmountTolerance
						LocalOverCondition 			= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceExtendedAmountCondition
						LocalOverTolerancePercent 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceExtendedAmountPercent
						initialize LocalUnderToleranceAmount
						initialize LocalUnderCondition
						initialize LocalUnderTolerancePercent
					else	
						LocalOverToleranceAmount 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceOverUnitCostToleranceAmount
						LocalOverCondition 			= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceOverUnitCostCondition
						LocalOverTolerancePercent 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceOverUnitCostTolerancePercent
						LocalUnderToleranceAmount 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceUnderUnitCostToleranceAmount
						LocalUnderCondition 		= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceUnderUnitCostCondition
						LocalUnderTolerancePercent 	= LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[MatchIndex].ServiceUnderUnitCostTolerancePercent

					if  (LocalCostAmountDifference < 0
					and  ServiceByQuantity)
						LocalMessageType = "U"
						LocalCostAmountDifference 	= LocalCostAmountDifference * -1

						if (LocalUnderCondition.And)
							if (LocalCostAmountDifference > LocalUnderToleranceAmount
							and LocalCostAmountDifference > (LocalUnitCost * LocalUnderTolerancePercent))
								LocalCostMessage = true
						else
						if (LocalUnderCondition.Or)
							if (LocalCostAmountDifference > LocalUnderToleranceAmount
							or  LocalCostAmountDifference > (LocalUnitCost * LocalUnderTolerancePercent))
								LocalCostMessage = true
						else
						if  ((LocalUnderToleranceAmount entered
						and   LocalCostAmountDifference > LocalUnderToleranceAmount)
						or   (LocalUnderTolerancePercent entered
						and   LocalCostAmountDifference > (LocalUnitCost * LocalUnderTolerancePercent))
						or   (LocalUnderToleranceAmount not entered
						and   LocalUnderTolerancePercent not entered))
							LocalCostMessage = true
					else
					if  (LocalCostAmountDifference > 0)
						LocalMessageType = "O"

						if (LocalOverCondition.And)
							if (LocalCostAmountDifference > LocalOverToleranceAmount
							and LocalCostAmountDifference > (LocalUnitCost * LocalOverTolerancePercent))
								LocalCostMessage = true
						else
						if (LocalOverCondition.Or)
							if (LocalCostAmountDifference > LocalOverToleranceAmount
							or  LocalCostAmountDifference > (LocalUnitCost * LocalOverTolerancePercent))
								LocalCostMessage = true
						else
						if  ((LocalOverToleranceAmount entered
						and   LocalCostAmountDifference > LocalOverToleranceAmount)
						or   (LocalOverTolerancePercent entered
						and   LocalCostAmountDifference > (LocalUnitCost * LocalOverTolerancePercent))
						or   (LocalOverToleranceAmount not entered
						and   LocalOverTolerancePercent not entered))
							LocalCostMessage = true


		CommonUpdates

			CostMessagesExistedPreviously = false

			if (EnteredUnitCost changed
			or  EnteredUOM changed
			or  LocalCostMessage)



				for each MatchInvoiceMessageRel

					if  (each.MatchMessageOrigin.PoCost
					and (each.Status.Unreleased
					or   each.Status.Open))
						CostMessagesExistedPreviously = true

					if  (each.AdjustedUnitCost = EnteredUnitCost)
						NextSentence = true 
					else 
					if  (each.Status.Unreleased
					or   each.Status.Open
					or   each.MatchObjectID not entered)



						if  (each.MatchMessageOrigin.PoCost
						and  each.ApplicationAction.AdjustCost)
							invoke Delete PurchaseOrderReceiptInvoiceLinkMessageRel

						invoke Delete each

			if (!RecordSource.CreatedWithinMatch)
				if (LocalCostMessage)

					invoke Create MatchInvoiceMessage
						fill in fields from this instance
						invoked.Company								= Company
						invoked.Vendor								= Vendor
						invoked.PayablesInvoice						= PayablesInvoice
						invoked.DueDate								= PayablesInvoice.DueDate
						invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail.PayablesInvoiceDetail
						invoked.PurchaseOrder						= PurchaseOrder
						invoked.PurchaseOrderLine					= PurchaseOrderLine
						invoked.MatchMessageOrigin					= 1
						invoked.Status								= 1
						invoked.MessageType							= "C"
						invoked.MessageSubType						= LocalMessageType
						invoked.Priority							= 2
						invoked.DiscountDate						= PayablesInvoice.DiscountDate
						invoked.Location							= PayablesInvoice.Location
						if  (PayablesInvoice.MatchProcessType.ServiceContract)
							invoked.Buyer									= PayablesInvoice.ServiceContract.Buyer
							invoked.BuyerOwner								= PayablesInvoice.ServiceContract.Buyer
							invoked.AuthorityCodeEmailAddress				= PayablesInvoice.ServiceContract.Buyer.EmailAddress
						else
							invoked.Buyer								= PurchaseOrder.Buyer
							if (PayablesAuthorizedBuyerRel exists)
								invoked.AuthorityCode					= first PayablesAuthorizedBuyerRel.AuthorityCode
								if (PayablesAuthorityCodeDetailRel exists)
									invoked.AuthorityCodeEmailAddress	= PayablesAuthorityCodeDetailRel.EmailAddress
								else
									invoked.AuthorityCodeEmailAddress	= first PayablesAuthorizedBuyerRel.AuthorityCode.EmailAddress
							else
								invoked.BuyerOwner						= PurchaseOrder.Buyer
					invoke TriggerPOCostService
					invoke TriggerPOCostMsgAlert
					include CostMessageProcessFlow


		ProcessContractRebateQualifiers

			invoke UpdateContractRebateDueInvoiceLine each	//This action is in both ContractRebateQualifierItem and ContractRebateQualifierCode. The correct action is chosen for whatever the "each" is in the for each loop (ContractRebateQualifierItem or ContractRebateQualifierCode).
				invoked.ParameterManufacturerContract		= DerivedManufacturerContract
				invoked.ParameterInvoiceDte					= PayablesInvoice.InvoiceDate
				invoked.ParameterCompany					= Company
				invoked.ParameterVendor						= Vendor
				invoked.ParameterInvoice 					= PayablesInvoice.Invoice
				invoked.ParameterSuffix						= PayablesInvoice.Suffix
				invoked.ParameterPoNumber  					= PurchaseOrder
				invoked.ParameterLineNbr   					= PurchaseOrderLine
				invoked.ParameterManufacturerUnitCost		= DerivedManufacturerUnitCost
				invoked.ParameterMatchUnitCost				= DerivedMatchUnitCost
				invoked.ParameterMatchedQty					= MatchedQuantity
				invoked.ParameterEntUnitCst					= EnteredUnitCost
				invoked.ParameterVendorReturn				= false
				invoked.ParameterCurrencyCode				= PayablesInvoice.InvoiceCurrency
				invoked.ParameterExchangeRate				= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				invoked.ParameterCurrencyTable				= PayablesInvoice.CurrencyTable
				invoked.ParameterPurchFrLocation			= PayablesInvoice.PurchaseFromLocation
				invoked.ParameterCmContract					= LocalContract
				invoked.ParameterProcureGroup				= LocalContractGroup
				invoked.ParameterMfgContract				= LocalManufacturerContract
				invoked.ParameterLocation					= LocalLocation
				invoked.ParameterManufCode					= LocalManufacturer.ManufacturerCode
				invoked.ParameterManufDivision				= LocalManufacturer.ManufacturerDivision
				invoked.ParameterServiceTypeContract		= false
				invoked.ParameterPoDate						= PurchaseOrder.PurchaseOrderDate
				invoked.ParameterCommCodes					= CommodityCode.CommCodes
				invoked.ParameterPurchMajorClass			= LocalMajorPurchasingClass
				invoked.ParameterPurchMinorClass			= LocalMinorPurchasingClass
				invoked.ParameterUNSPSCSegment				= LocalUNSPSCSegment
				invoked.ParameterUNSPSCFamily				= LocalUNSPSCFamily
				invoked.ParameterUNSPSCClass				= LocalUNSPSCClass
				invoked.ParameterUNSPSCCommodity			= LocalUNSPSCCommodity
				invoked.ParameterPayablesCompany			= Company
				invoked.ParameterPayablesInvoice			= PayablesInvoice
				invoked.ParameterPurchaseOrder				= PurchaseOrder
				invoked.ParameterPurchaseOrderLine			= PurchaseOrderLine
				invoked.ParameterPayablesInvoiceDetail		= PayablesInvoiceDetail


		ProcessContractRebateQualifiersViaPoline

			invoke UpdateContractRebateDueInvoiceLine each	//This action is in both ContractRebateQualifierItem and ContractRebateQualifierCode. The correct action is chosen for whatever the "each" is in the for each loop (ContractRebateQualifierItem or ContractRebateQualifierCode).
				invoked.ParameterManufacturerContract		= DerivedManufacturerContract
				invoked.ParameterInvoiceDte					= PayablesInvoice.InvoiceDate
				invoked.ParameterCompany					= Company
				invoked.ParameterVendor						= Vendor
				invoked.ParameterInvoice 					= PayablesInvoice.Invoice
				invoked.ParameterSuffix						= PayablesInvoice.Suffix
				invoked.ParameterPoNumber  					= PurchaseOrder
				if (PurchaseOrderLine entered)
					invoked.ParameterLineNbr   				= PurchaseOrderLine
				invoked.ParameterManufacturerUnitCost		= DerivedManufacturerUnitCost
				invoked.ParameterMatchUnitCost				= DerivedMatchUnitCost
				invoked.ParameterMatchedQty					= MatchedQuantity
				invoked.ParameterEntUnitCst					= EnteredUnitCost
				invoked.ParameterVendorReturn				= false
				invoked.ParameterCurrencyCode				= PayablesInvoice.InvoiceCurrency
				invoked.ParameterExchangeRate				= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				invoked.ParameterCurrencyTable				= PayablesInvoice.CurrencyTable
				invoked.ParameterPurchFrLocation			= PayablesInvoice.PurchaseFromLocation
				invoked.ParameterPayablesCompany			= Company
				invoked.ParameterPayablesInvoice			= PayablesInvoice
				invoked.ParameterPayablesInvoiceDetail		= PayablesInvoiceDetail
				if (PurchaseOrderLine	exists)
					invoked.ParameterCmContract				= PurchaseOrderLine.Contract
					invoked.ParameterProcureGroup			= PurchaseOrderLine.Company.ProcurementGroup
					invoked.ParameterMfgContract			= PurchaseOrderLine.ManufacturerContract
					invoked.ParameterLocation				= PurchaseOrderLine.ShipToLocation
					invoked.ParameterManufCode				= PurchaseOrderLine.Manufacturer.ManufacturerCode
					invoked.ParameterManufDivision			= PurchaseOrderLine.Manufacturer.ManufacturerDivision
					invoked.ParameterServiceTypeContract 	= false
					invoked.ParameterPoDate					= PurchaseOrder.PurchaseOrderDate
					invoked.ParameterPurchaseOrder			= PurchaseOrder
					invoked.ParameterPurchaseOrderLine		= PurchaseOrderLine
				else
					invoked.ParameterCmContract             = Contract
					invoked.ParameterProcureGroup			= Company.VendorGroup
					invoked.ParameterLineNbr                = ContractLine 
					invoked.ParameterMfgContract			= 0
					invoked.ParameterLocation				= blank
					invoked.ParameterManufCode				= blank
					invoked.ParameterManufDivision			= blank
					invoked.ParameterServiceTypeContract	= true
					invoked.ParameterPoDate					= PayablesInvoice.InvoiceDate
					initialize invoked.ParameterPurchaseOrder
					initialize invoked.ParameterPurchaseOrderLine

		UpdateQuantityAmountAndCost


			if (IsCatchWeight)
				constraint (BuyUOMMatchedQuantity entered)
			    	"BuyQuantityRequiredForCatchWeight"
			else
			if  ((ItemType.Inventoried or ItemType.NonStock)
			and  (PurchaseOrderLine.EnteredBuyUOM not = PurchaseOrderLine.VendorPriceUOM)
			or    EnteredUOM not = PurchaseOrderLine.VendorPriceUOM)
				UnitOfMeasureEdit.UnitOfMeasure = EnteredUOM
   				EnteredUOMMultiplier         	= UnitOfMeasureEdit.UOMConversion
				BuyUOMMatchedQuantity			= EnteredQuantity * (EnteredUOMMultiplier / VendorBuyUOMMultiplier)
			else
   				EnteredUOMMultiplier         	= 1
				BuyUOMMatchedQuantity			= EnteredQuantity



			if (!RecordSource.CreatedWithinMatch)
				MatchUnitCost 						= DerivedMatchUnitCost
				MatchedQuantity 					= DerivedMatchedQuantity

			TotalDistributionAmount 				= DerivedDistributionAmount
			TotalBaseAmount							= DerivedBaseAmount


		CallCalculateTax



			initialize CalculateTax


			CalculateTax.TaxableAmount							= TotalDistributionAmount
			CalculateTax.InvoiceAmount							= TotalDistributionAmount

			if  (TaxableUnitCost entered)
				if  (PayablesInvoice.InvoiceType.CreditMemo
				and  EnteredUnitCost > 0)
					CalculateTax.TaxableAmount					= TaxableUnitCost * MatchedQuantity * -1
					CalculateTax.InvoiceAmount					= TaxableUnitCost * MatchedQuantity * -1
				else
					CalculateTax.TaxableAmount					= TaxableUnitCost * MatchedQuantity
					CalculateTax.InvoiceAmount					= TaxableUnitCost * MatchedQuantity
			else
			if (PurchaseOrderLine.TaxableUnitCost entered
			and PurchaseOrderLine.TaxableUnitCost != PurchaseOrderLine.EnteredUnitCost)
				CalculateTax.TaxableAmount						= PurchaseOrderLine.TaxableUnitCost * MatchedQuantity
				CalculateTax.InvoiceAmount						= PurchaseOrderLine.TaxableUnitCost * MatchedQuantity

			if  (PayablesInvoice.InvoiceType.CreditMemo
			and  CalculateTax.TaxableAmount > 0)
				CalculateTax.TaxableAmount							*= -1
				CalculateTax.InvoiceAmount							*= -1

			if (TaxCode.TaxType.CalculatedRate)
				CalculateTax.TaxAmount							= TotalDistributionAmount

			if (TaxCode.TaxType.CalculatedRate)
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTaxRate
			else
			if  (TaxCode.TaxType.TaxTableCode)
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
			else
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTax

			include PopulateCalculateTaxInputFields

			LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax


		ReverseOriginalDistributions

			if  (!ItemType.Inventoried)
				for each OriginalInvoiceDetailRel.AllDistributionsRel        
					include CreditForRebillDistribution

		CreditForRebillDistribution






			invoke CreateFromMatch each
				assign result to NewDistribution
				invoked.Company								= Company
				invoked.PayablesInvoice						= PayablesInvoice
				invoked.Status								= 1
				invoked.UnitAmount							= each.UnitAmount * -1
				invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * -1
				invoked.DistributionAmount.KeepRateOnly		= true
				invoked.GLTransactionAmount					= each.DistributionAmount.CurrencyAmount * -1
				invoked.GLFinanceCodeBlock					= each.DistributionAccount
				invoked.DistributionAccount					= each.DistributionAccount

				invoked.DistributionType					= "D"
				invoked.PurchaseOrder						= PurchaseOrder
				invoked.PurchaseOrderLine					= PurchaseOrderLine
				invoked.PurchasingContract					= Contract
				invoked.ContractLine						= ContractLine
				invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail
				invoked.OriginalDistribution				= each.OriginalDistribution
				invoked.CommentText							= each.CommentText
				invoked.TransientAsset						= each.AssetDetailRel.Asset
				invoked.TransientAssetTemplate				= each.AssetDetailRel.AssetTemplate
				invoked.Retainage							= each.Retainage
				invoked.AccrualCode 						= each.AccrualCode 

				invoked.BypassUpdatingInvoiceTotals			= true
				invoked.Status								= 0




				invoked.ProductTaxCategory 				= each.ProductTaxCategory
				invoked.TaxRate							= each.TaxRate
				invoked.TaxableAmount					= each.TaxableAmount * -1
				invoked.TaxCode							= each.TaxCode
				invoked.TransientTaxingJurisdiction		= each.PayablesTaxDetailRel.TaxingJurisdiction  
				invoked.Imposition						= each.Imposition
				invoked.TaxType							= each.TaxType

			if  (PayablesInvoice.RetainageAccrualCode entered)

				for each each.PayablesInvoiceRetainageDistributionRel
					invoke Create PayablesInvoiceRetainageDistribution
						fill in fields from each
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution
							except invoked.Invoice
							except invoked.Suffix
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice = PayablesInvoice
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = NewDistribution.PayablesInvoiceDistribution
						invoked.Invoice 			= Invoice
						invoked.Suffix 				= Suffix

						invoked.PaymentAmount										= each.PaymentAmount * -1
						invoked.RetainageCalculatedAmount							= each.RetainageCalculatedAmount * -1

		ProcessDetailTax


			initialize TaxAmount
			initialize InvoicedTaxAmount
			initialize AccruedTaxAmount
			initialize LocalTaxAmount
			initialize LocalInvoicedTaxAmount
			initialize LocalAccruedTaxAmount

			if (TaxEntityRel.ThirdParty.TaxEngine)

				for each TaxEngineTaxDetailRel







					if  ((each.TaxClassification < 3
					and   TotalDistributionAmount > 0
					and   each.TaxAmount > 0)
					or    (each.TaxClassification < 3
					and   TotalDistributionAmount < 0
					and   each.TaxAmount < 0)
					or   (each.TaxClassification > 2
					and   TotalDistributionAmount > 0
					and   each.TaxAmount < 0)
					or   (each.TaxClassification > 2
					and   TotalDistributionAmount < 0
					and   each.TaxAmount > 0))

	                    LocalTaxCode = each.TaxCode

    	                if (LocalEntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
							TaxAmount += each.TaxAmount

			else		
			if  (TaxCode entered
			and  !PayablesInvoice.CallVertexByDocument
			and  !PayablesInvoice.DoOneSourceAfter)
				if (TaxCode.TaxType.CalculatedRate)
					if  (TransientTaxRate not entered)
						TransientTaxRate 								= PayablesInvoice.TaxAmount / PayablesInvoice.TaxableAmount

					if  (TaxableUnitCost entered)
						if  (PayablesInvoice.InvoiceType.CreditMemo
						and  EnteredUnitCost > 0)
							TaxAmount = TaxableUnitCost * TransientTaxRate * -1 * MatchedQuantity		
						else
							TaxAmount = TaxableUnitCost * TransientTaxRate * MatchedQuantity		
					else
					if  (PurchaseOrderLine.TaxableUnitCost entered
					and  PurchaseOrderLine.TaxableUnitCost != PurchaseOrderLine.EnteredUnitCost)
						if  (PayablesInvoice.InvoiceType.CreditMemo)
							TaxAmount = PurchaseOrderLine.TaxableUnitCost * TransientTaxRate * -1 * MatchedQuantity		
						else
							TaxAmount = PurchaseOrderLine.TaxableUnitCost * TransientTaxRate * MatchedQuantity		
					else
						TaxAmount = MatchUnitCost * TransientTaxRate * MatchedQuantity		
					round TaxAmount to nearest DerivedRoundTo
				else
					initialize CalculateTax

					CalculateTax.TaxableAmount							= TotalDistributionAmount
					CalculateTax.InvoiceAmount							= TotalDistributionAmount

					if  (TaxableUnitCost entered)
						if  (PayablesInvoice.InvoiceType.CreditMemo
						and  EnteredUnitCost > 0)
							CalculateTax.TaxableAmount					= TaxableUnitCost * MatchedQuantity * -1
							CalculateTax.InvoiceAmount					= TaxableUnitCost * MatchedQuantity * -1
						else
							CalculateTax.TaxableAmount					= TaxableUnitCost * MatchedQuantity
							CalculateTax.InvoiceAmount					= TaxableUnitCost * MatchedQuantity
					else
					if  (PurchaseOrderLine.TaxableUnitCost entered
					and  PurchaseOrderLine.TaxableUnitCost != PurchaseOrderLine.EnteredUnitCost)
						if  (PayablesInvoice.InvoiceType.CreditMemo)
							CalculateTax.TaxableAmount					= PurchaseOrderLine.TaxableUnitCost * MatchedQuantity * -1
							CalculateTax.InvoiceAmount					= PurchaseOrderLine.TaxableUnitCost * MatchedQuantity * -1
						else
							CalculateTax.TaxableAmount					= PurchaseOrderLine.TaxableUnitCost * MatchedQuantity
							CalculateTax.InvoiceAmount					= PurchaseOrderLine.TaxableUnitCost * MatchedQuantity






					if (TaxCode.TaxType.CalculatedRate)
						CalculateTax.TaxAmount							= TotalDistributionAmount

					if (TaxCode.TaxType.CalculatedRate)
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTaxRate
					else
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTax

					include PopulateCalculateTaxInputFields


					if  (CalculateTax.TaxableAmount entered
					or   CalculateTax.InvoiceAmount entered
					or   CalculateTax.UnitCost entered)
						LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>E1"

						CalculateTaxHasBeenCalled = true 

						LocalTaxTable = CalculateTax.TaxTable




						for each LocalTaxTable.TaxTableOutput


							LocalWorkAmount				= each.TaxAmount5DP 
							round LocalWorkAmount to nearest DerivedRoundTo

							if (each.AccrualFlag = "A")
								LocalAccruedTaxAmount += LocalWorkAmount 
							else
								LocalTaxAmount += LocalWorkAmount 


						round LocalTaxAmount to nearest DerivedRoundTo
						round LocalInvoicedTaxAmount to nearest DerivedRoundTo
						round LocalAccruedTaxAmount to nearest DerivedRoundTo

						TaxAmount 			= LocalTaxAmount
						AccruedTaxAmount	= LocalAccruedTaxAmount
						InvoicedTaxAmount 	= LocalInvoicedTaxAmount

						if (TaxCode = "00"
						and TaxEntityRel.ThirdParty.VertexOSeries)
							TaxCode = CalculateTax.TaxCode 

						if  (PayablesInvoice.TaxEntityUsesVertex
						and  !IsInvoicedTaxCode 
						and  PayablesInvoice.TaxAmount not entered)

							if (TaxAmount entered)
								AccruedTaxAmount += TaxAmount
							initialize LocalTaxAmount
							initialize TaxAmount

		PopulateCalculateTaxInputFields

			CalculateTax.TaxEntity 								= Company.AccountingEntity
			CalculateTax.CallingModule							= "Payables_Invoice"
			CalculateTax.System									= "AP"
			CalculateTax.Invoice 								= PayablesInvoice.Invoice 

			CalculateTax.TaxCode 								= TaxCode
			CalculateTax.ProductTaxCategory						= ProductTaxCategory
			CalculateTax.TransactionCurrency					= PayablesInvoice.InvoiceCurrency
			CalculateTax.BaseCurrency							= Company.Currency
			CalculateTax.Location								= Location
			CalculateTax.Quantity								= EnteredQuantity 
			if (PurchaseOrder.DropshipAddress entered)
				CalculateTax.PostalAddress						= PurchaseOrder.DropshipAddress
			else
				CalculateTax.PostalAddress						= InventoryLocationRel.PostalAddress
			if  (PayablesInvoice.VendorLocationRel exists)
				CalculateTax.FromPostalAddress					= PayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
			else
				CalculateTax.FromPostalAddress					= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress

			CalculateTax.InvoiceDate							= PayablesInvoice.InvoiceDate
			CalculateTax.PaymentDate 							= PayablesInvoice.InvoiceDate
			CalculateTax.GeneralLedgerDate 						= PayablesInvoice.InvoiceDate
			CalculateTax.TaxDate								= PayablesInvoice.InvoiceDate

			if (PayablesInvoice.TaxEntityUsesVertex)
				CalculateTax.VertexQuantumOption					= "C"

			if (TaxEntityUsesThirdPartyTax)
				CalculateTax.InputReturnVertexTaxIn				= "D"

				CalculateTax.VATRegistrationCountry					= TaxEntityRel.VATRegistrationCountry
				CalculateTax.VATRegistrationNumber					= TaxEntityRel.VATRegistrationNumber
				if (PayablesInvoice.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PayablesInvoice.PurchaseFromLocation.VendorAddress
					CalculateTax.FromVATRegistrationCountry 		= PayablesInvoice.PurchaseFromLocation.VATRegistrationCountry
					CalculateTax.FromVATRegistrationNumber			= PayablesInvoice.PurchaseFromLocation.VATRegistrationNumber
					CalculateTax.FromTaxCode						= PayablesInvoice.PurchaseFromLocation.TaxCode
				else
				if (PurchaseOrder.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PurchaseOrder.PurchaseFromLocation.VendorAddress
					CalculateTax.FromVATRegistrationCountry			= PurchaseOrder.PurchaseFromLocation.VATRegistrationCountry
					CalculateTax.FromVATRegistrationNumber			= PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber
					CalculateTax.FromTaxCode						= PurchaseOrder.PurchaseFromLocation.TaxCode
				else
					CalculateTax.FromPostalAddress					= Vendor.VendorAddress
					CalculateTax.FromVATRegistrationCountry			= Vendor.VATRegistrationCountry
					CalculateTax.FromVATRegistrationNumber			= Vendor.VATRegistrationNumber
					CalculateTax.FromTaxCode						= Vendor.TaxCode

				CalculateTax.InvoiceCompany							= Company
				CalculateTax.ProcessLevel							= PayablesInvoice.ProcessLevel
				CalculateTax.VendorGrp								= Company.VendorGroup
				CalculateTax.Vendor									= Vendor
				CalculateTax.VendorCustomerName						= PurchaseOrder.Vendor.VendorName
				CalculateTax.LineNumber								= PurchaseOrderLine
				CalculateTax.CommodityCode							= CommodityCode 
				if (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Original)
					CalculateTax.CommodityCode						= ICNCode
				CalculateTax.TaxUsageCode							= TaxUsageCode
				CalculateTax.DeliveryTerms							= PurchaseOrder.ShipTerm

				if (PurchaseOrder.DropshipAddress entered)
					CalculateTax.PostalAddress						= PurchaseOrder.DropshipAddress
				else
				if (Location entered)
					CalculateTax.PostalAddress						= Location.PostalAddress
				else
				if (PayablesInvoice.Location entered)
					CalculateTax.PostalAddress						= PayablesInvoice.Location.PostalAddress
				else
				if (PurchaseOrder entered
				and PurchaseOrder.ShipToLocation entered)
					CalculateTax.PostalAddress						= PurchaseOrder.ShipToLocation.PostalAddress
				else
					CalculateTax.PostalAddress						= PayablesInvoice.ProcessLevel.PostalAddress

				CalculateTax.DefaultFilingCurrency 					= Company.Currency
				CalculateTax.CurrencyRate							= PurchaseOrder.EnteredCurrencyConversionRate
				CalculateTax.TransactionCurrency 					= PayablesInvoice.InvoiceCurrency								
				CalculateTax.BaseCurrency 							= Company.Currency					
				CalculateTax.ReceiptSite							= PayablesInvoice.ProcessLevel
				CalculateTax.UniqueIdOfRelatedObject				= UniqueID


			if (TaxEntityRel.ThirdParty.VertexOSeries)

				if  (!ItemType.Inventoried)
					if  (PurchaseOrderLine entered)
						if (InvoiceDistributionsForPurchaseOrderLineRel exists)
							LocalVertexDistributionAccount    = first InvoiceDistributionsForPurchaseOrderLineRel.DistributionAccount
						else 
							LocalVertexDistributionAccount    = first PurchaseOrderLine.PurchaseOrderLineDistributionsRel.DistributionAccount
					else
					if  (ContractLine entered)
						if (InvoiceDistributionsForContractLineRel exists)
							LocalVertexDistributionAccount    = first InvoiceDistributionsForContractLineRel.DistributionAccount
						else 
							LocalVertexDistributionAccount    = first ContractLine.ContractLineDistributionRel.DistributionAccount
					else
						LocalVertexDistributionAccount    = first InvoiceDistributionsForMiscellaneousDetailRel.DistributionAccount
				else
					LocalVertexDistributionAccount 			= ItemLocationRel.GeneralLedgerCategory.InventoryAccount 


				if (PayablesInvoice.BillFromLocation entered)
					CalculateTax.POAAddress					= PayablesInvoice.BillFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress					= PayablesInvoice.Vendor.VendorAddress

				CalculateTax.ProductClass                   = PurchaseOrderLine.MajorPurchasingClass  
				CalculateTax.CostCenter                     = LocalVertexDistributionAccount.AccountingUnit 
				CalculateTax.PostDate                       = PayablesInvoice.DistributionDate                    
				CalculateTax.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 

				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode 
				else 
				if (ContractLine entered
				and PurchaseOrderLine not entered)
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= ContractLine.UNSPSCCode.UNSPSCCodeDisplay 
				else 
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay 

				if (TaxAttributesRel.VertexFlexibleFieldExist)

					LocalInventoryLocation = Location




					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DerivedTaxPointDate
							else    
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity 
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location 
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceCurrency
							else    



							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredUnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedCommodityCodeNoDash
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								if (ContractLine entered 
								and PurchaseOrderLine not entered)
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ContractLine.UNSPSCCode.UNSPSCCodeDisplay
								else 
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else    
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxUsageCode
							else 



							if (each.ExternalValue.ValueIs.PaymentDate)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceDate 
							else 









							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredUnitCost
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								if (PayablesInvoice.DerivedTaxPointDate entered)
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
								else 
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  





		UpdatePayablesInvoiceAddOnCharge	
			if (PayablesInvoiceAddOnChargeRel exists)
				for each PayablesInvoiceAddOnChargeRel
					if (EnteredUOM  not = VendorBuyUOM)
						LocalMatchUnitCost = each.TotalDistributionAmount / each.MatchedQuantity
					invoke Update each
						invoked.MatchedQuantity	= MatchedQuantity
						invoked.EnteredQuantity	= EnteredQuantity
						invoked.MatchUnitCost	= LocalMatchUnitCost
			else
				for each PurchaseOrderAocRel
					invoke CreateInvoiceAocFromPo each
						invoked.PayablesInvoice = PayablesInvoice

		ServiceContractPriceBreaks	

			initialize PosapbUnitCost
			initialize PosapbBreakLevel
			initialize PosapbLineBreakQuantityAmount
			initialize PosapbLineBreakPercent
			initialize PosapbLineBreakCost

			if  (Company.EnableServiceCostMessaging
			and  ContractLine.CurrentNetCost entered)
			    WorkCost = ContractLine.CurrentNetCost
			else
				WorkCost = ContractLine.BaseCost
				
			if  (ContractLine.ServiceCode.Quantity)
				if  (Contract.LineLevelBreaks.ContractTotals)
					PosapbCompareAmount	 				= EnteredQuantity + ContractLine.QuantityOrdered
				else
					PosapbCompareAmount	 				= EnteredQuantity
			else
			if  (ContractLine.ServiceCode.Amount)
				PosapbCompareAmount						= ContractLine.AmountOrdered

			if  (ContractLine.ServiceCode.Quantity
			or   ContractLine.ServiceCode.Amount)
				I1 = 1
				while (I1 <= 5)
					if  (ContractLine.PriceBreak.QuantityPercentPrice[I1].Quantity entered
					and  PosapbCompareAmount >= ContractLine.PriceBreak.QuantityPercentPrice[I1].Quantity)
						PosapbLineBreakQuantityAmount	= ContractLine.PriceBreak.QuantityPercentPrice[I1].Quantity
						PosapbLineBreakPercent			= ContractLine.PriceBreak.QuantityPercentPrice[I1].UnitPercent
						PosapbLineBreakCost				= ContractLine.PriceBreak.QuantityPercentPrice[I1].UnitPrice

					I1 += 1

				if  (PosapbLineBreakCost > 0)
					PosapbBreakLevel					= "L"
					PosapbUnitCost						= PosapbLineBreakCost
				else
				if (PosapbLineBreakPercent > 0%)
					PosapbBreakLevel					= "L"
					PosapbPercent						= PosapbLineBreakPercent
					PosapbCostDifference				= WorkCost * PosapbPercent
					if  (ContractLine.PricingMarkupOrDiscount.Markup)
						PosapbUnitCost					= WorkCost + PosapbCostDifference
					else
						PosapbUnitCost					= WorkCost - PosapbCostDifference

			if (PosapbBreakLevel not entered)
				initialize PosapbBreakAmount
				initialize PosapbBreakPercent

				if (ContractLine.CurrentBasePercentRel.PriceBreakAmount1 entered
				and ContractLine.CurrentBasePercentRel.AmountOrdered >= ContractLine.CurrentBasePercentRel.PriceBreakAmount1)
					PosapbBreakAmount					= ContractLine.CurrentBasePercentRel.PriceBreakAmount1
					PosapbBreakPercent					= ContractLine.CurrentBasePercentRel.PriceBreakPercent1

				if (ContractLine.CurrentBasePercentRel.PriceBreakAmount2 entered
				and ContractLine.CurrentBasePercentRel.AmountOrdered >= ContractLine.CurrentBasePercentRel.PriceBreakAmount2)
					PosapbBreakAmount					= ContractLine.CurrentBasePercentRel.PriceBreakAmount2
					PosapbBreakPercent					= ContractLine.CurrentBasePercentRel.PriceBreakPercent2

				if (ContractLine.CurrentBasePercentRel.PriceBreakAmount3 entered
				and ContractLine.CurrentBasePercentRel.AmountOrdered >= ContractLine.CurrentBasePercentRel.PriceBreakAmount3)
					PosapbBreakAmount					= ContractLine.CurrentBasePercentRel.PriceBreakAmount3
					PosapbBreakPercent					= ContractLine.CurrentBasePercentRel.PriceBreakPercent3

				if (ContractLine.CurrentBasePercentRel.PriceBreakAmount4 entered
				and ContractLine.CurrentBasePercentRel.AmountOrdered >= ContractLine.CurrentBasePercentRel.PriceBreakAmount4)
					PosapbBreakAmount					= ContractLine.CurrentBasePercentRel.PriceBreakAmount4
					PosapbBreakPercent					= ContractLine.CurrentBasePercentRel.PriceBreakPercent4

				if (ContractLine.CurrentBasePercentRel.PriceBreakAmount5 entered
				and ContractLine.CurrentBasePercentRel.AmountOrdered >= ContractLine.CurrentBasePercentRel.PriceBreakAmount5)
					PosapbBreakAmount					= ContractLine.CurrentBasePercentRel.PriceBreakAmount5
					PosapbBreakPercent					= ContractLine.CurrentBasePercentRel.PriceBreakPercent5

				if  (PosapbBreakPercent not entered)
					PosapbBreakPercent					= ContractLine.CurrentBasePercentRel.PricingBasePercent

				if  (PosapbBreakPercent entered)
					PosapbBreakLevel					= "H"
					PosapbPercent						= PosapbBreakPercent
					PosapbCostDifference				= WorkCost * PosapbPercent

					if  (ContractLine.CurrentBasePercentRel.PricingMarkupDiscount.Markup)
						PosapbUnitCost					= WorkCost + PosapbCostDifference
					else
						PosapbUnitCost					= WorkCost - PosapbCostDifference

			if (PosapbUnitCost not entered)
				if (ContractLine.ServiceCode.Quantity)
					PosapbUnitCost						= WorkCost
				else
					PosapbUnitCost						= WorkCost - ContractLine.AmountOrdered


		EditServiceLimits
			if (ContractLine.ServiceCode.Amount)
				invoke EditLimits ContractLine
					invoked.InDate									= PayablesInvoice.InvoiceDate
					invoked.InUOM.UnitOfMeasure						= EnteredUOM
					invoked.InAmount								= EnteredUnitCost 
					initialize invoked.InQuantity
					if (Company.EnableServiceCostMessaging)
					    invoked.BypassEditLimits = true
			else
				invoke EditLimits ContractLine
					invoked.InDate				= PayablesInvoice.InvoiceDate
					invoked.InUOM.UnitOfMeasure	= EnteredUOM
					invoked.InAmount			= EnteredQuantity * EnteredUnitCost
					invoked.InQuantity			= EnteredQuantity
					if (Company.EnableServiceCostMessaging)
					    invoked.BypassEditLimits = true

			if (Contract.CreateCommitments.HeaderSpread)
				invoke EditHeaderSpread Contract
					invoked.InAmount			= PayablesInvoice.DetailExtendedAmountForSpread
					invoked.InTransactionDate	= PayablesInvoice.InvoiceDate
					invoked.InCurrency			= PayablesInvoice.InvoiceCurrency

		CostMessageProcessFlow
			if  (MatchCompanyRel.POCostMessagingWorkflow.Yes
			and  !CostMessagesExistedPreviously)
				invoke InitiatePayablesProcess Vendor.VendorGroup
					invoked.PayablesService 	= PayablesService.POCostMsg
					invoked.Criterion1			= Company
					invoked.Criterion2			= PayablesInvoice.AuthorityCode
					invoked.Criterion3			= blank
					invoked.PayablesCompany		= Company
					invoked.PrmVendor			= Vendor
					invoked.PrmPayablesInvoice	= PayablesInvoice
					invoked.PrmPurchaseOrder	= PurchaseOrder
					invoked.ResumeOnError		= true

		DefaultingForCreateUsingBypassFieldRules

			if (ContractLine entered
			and PurchaseOrderLine not entered)
				if (Item not entered)
					Item = ContractLine.ItemNumber
				if (ItemType not entered)
					ItemType = ItemType.Service
				if (VendorItem not entered)
					VendorItem = ContractLine.VendorItem
				if (ItemDescription not entered)
					ItemDescription = ContractLine.ItemDescription
				if (ItemGTIN not entered)
					ItemGTIN = ContractLine.GlobalTradeItemNumber

				if (MatchDetailKey not entered)
					if (ItemType.Inventoried
					or  ItemType.NonStock)
						MatchDetailKey = Item
					else
					if (ItemType.Special)
						MatchDetailKey = VendorItem
					else
						MatchDetailKey = ItemDescription
				if (EnteredUOM not entered)
					EnteredUOM = ContractLine.UOM.UnitOfMeasure

				if (VendorBuyUOM not entered)
					VendorBuyUOM = EnteredUOM
				if (VendorPriceUOMMultiplier not entered)
					VendorPriceUOMMultiplier = 1

				if (EnteredUOMMultiplier not entered)
					EnteredUOMMultiplier = 1

				if (CommodityCode not entered)
					CommodityCode = ContractLine.CommodityCode

				if (VendorPriceUOM not entered)
					if (!ContractLine.ServiceCode.Amount)
						VendorPriceUOM = ContractLine.UOM.UnitOfMeasure

				if (VendorBuyUOMMultiplier not entered)
					VendorBuyUOMMultiplier = 1

			if  (PurchaseOrderLine entered)
				if (Item not entered)
					Item = PurchaseOrderLine.Item

				if (ItemType not entered)
					ItemType = PurchaseOrderLine.ItemType

				if (VendorItem not entered)
					VendorItem = PurchaseOrderLine.VendorItem

				if (ItemDescription not entered)
					ItemDescription = PurchaseOrderLine.Description

				if (ItemGTIN not entered)
					ItemGTIN = PurchaseOrderLine.ItemGTIN

				if (MatchDetailKey not entered)
					if  (ItemType.Inventoried
					or   ItemType.NonStock)
						MatchDetailKey = Item
					else
					if  (ItemType.Special)
						MatchDetailKey = VendorItem
					else
						MatchDetailKey = ItemDescription

				if (Location not entered)
					if (PurchaseOrderReceiptLine entered)
						Location = PurchaseOrderReceiptLine.ShipToLocation
					else
						Location = PurchaseOrderLine.ShipToLocation

				if (StockWeight not entered)
					StockWeight = PurchaseOrderLine.StockWeight

				if (ICNCode not entered)
					ICNCode = PurchaseOrderLine.ICNCode

				if (GlobalLineType not entered)
					GlobalLineType = PurchaseOrderLine.GlobalLineType

				if (SupplementaryQuantity not entered)
					SupplementaryQuantity = PurchaseOrderLine.SupplementaryQuantity

				if (SupplementaryUOM not entered)
					if  (ICNCode entered)
						SupplementaryUOM = ICNCode.SupplementaryUOM

				if (CommodityCode not entered)
					CommodityCode = PurchaseOrderLine.CommodityCode

				if (VendorPriceUOM not entered)
					VendorPriceUOM = PurchaseOrderLine.VendorPriceUOM

				if (VendorPriceUOMMultiplier not entered)
					VendorPriceUOMMultiplier = PurchaseOrderLine.VendorPriceUOMMultiplier

				if (VendorBuyUOMMultiplier not entered)
					VendorBuyUOMMultiplier = PurchaseOrderLine.EnteredBuyUOMMultiplier

				if (PurchaseOrderLine.Contract entered
				and Contract not entered)
				    Contract 		= PurchaseOrderLine.Contract
				    ContractLine 	= PurchaseOrderLine.ContractLine


		DoTransientAccountDistribution

			if  (PayablesInvoice.RetainageAccrualCode not entered
			or  (ProcessingTax
			and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued))
				LocalDoRetainageDistribution 			= false
			else
				LocalDoRetainageDistribution 			= true
				initialize GetRetainage
				GetRetainage.PurchaseOrder				= PurchaseOrder
				GetRetainage.PurchaseOrderLine			= PurchaseOrderLine
				GetRetainage.Contract					= Contract
				GetRetainage.ContractLine				= ContractLine
				LocalGetRetainage 						= GetRetainage.PerformGet

			if (ProcessingTax)
				if  (TaxCode.TaxType.TaxTableCode)
					WorkTaxAmount						= DerivedTaxAmount
					RemainingAmount						= WorkTaxAmount
					I9 = 1
					while (I9 <= 8
					and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
						LocalWorkAmount					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
						round LocalWorkAmount to nearest DerivedRoundTo
						include TransientAccountCreateDistribution
						RemainingAmount					-= LocalWorkAmount
						I9 += 1

					if  (RemainingAmount entered
					and (RemainingAmount >= .005
					or   RemainingAmount <= -.005))

						initialize LocalPOLineDistribution
						initialize LocalContractLineDistrib
						WorkDistributionAccount						= last PurchaseOrderLineDistributionRel.DistributionAccount
						if (WorkDistributionAccount not entered)
							if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
								WorkDistributionAccount				= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
							else
								WorkDistributionAccount				= Company.ToleranceOffsetAccount
						WorkGLTransactionAmount						= RemainingAmount
						include InvokeDistributionCreate
				else
				if  (TaxCode.TaxType.CalculatedRate)
					LocalWorkAmount						= TotalDistributionAmount * TransientTaxRate
					round LocalWorkAmount to nearest DerivedRoundTo
					include TransientAccountCreateDistribution
				else
					I9 = 1
					LocalWorkAmount						= DerivedTaxAmount
					round LocalWorkAmount to nearest DerivedRoundTo
					include TransientAccountCreateDistribution
			else
				LocalWorkAmount							= TotalDistributionAmount
				round LocalWorkAmount to nearest DerivedRoundTo
				include TransientAccountCreateDistribution

		TransientAccountCreateDistribution

			WorkDistributionAccount = TransientDistributionAccount

			if (!LocalDoRetainageDistribution)
				initialize LocalRetainageTaxableAmount
				WorkGLTransactionAmount					= LocalWorkAmount
				include InvokeDistributionCreate
			else
				LocalRetainageTranAmount				= LocalWorkAmount * GetRetainage.RetainagePercent
				WorkGLTransactionAmount					= LocalWorkAmount - LocalRetainageTranAmount
				if (ProcessingTax)
					LocalRetainageTaxableAmount			= TotalDistributionAmount - (TotalDistributionAmount * GetRetainage.RetainagePercent)

				include InvokeDistributionCreate

				WorkGLTransactionAmount					= LocalRetainageTranAmount
				WorkRetainage							= true
				if (ProcessingTax)
					LocalRetainageTaxableAmount			= (TotalDistributionAmount * GetRetainage.RetainagePercent)

				include InvokeDistributionCreate

		CopyPOLineDistributionsRuleBlock



			if  (PayablesInvoice.RetainageAccrualCode not entered
			or  (ProcessingTax
			and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued))
				LocalDoRetainageDistribution 			= false
			else
				LocalDoRetainageDistribution 			= true
				initialize GetRetainage
				GetRetainage.PurchaseOrder				= PurchaseOrder
				GetRetainage.PurchaseOrderLine			= PurchaseOrderLine
				GetRetainage.Contract					= Contract
				GetRetainage.ContractLine				= ContractLine
				LocalGetRetainage 						= GetRetainage.PerformGet

			initialize PercentAccumulated
			initialize QuantityAccumulated

			if  (ProcessingTax
			and !CalculateTaxHasBeenCalled
			and !TaxEntityRel.ThirdParty.TaxEngine) 
				include CallCalculateTax

			if 	(ProcessingTax
			and TaxEntityRel.ThirdParty.TaxEngine)
				WorkTaxAmount = TaxAmount
			else
			if  (ProcessingTax
			and  TaxCode.TaxType.CalculatedRate)
				if  (TaxableUnitCost entered)
					if  (PayablesInvoice.InvoiceType.CreditMemo
					and  EnteredUnitCost > 0)
						RemainingAmount							= TaxableUnitCost * MatchedQuantity * TransientTaxRate * -1
					else
						RemainingAmount							= TaxableUnitCost * MatchedQuantity * TransientTaxRate
				else
					RemainingAmount								= TotalDistributionAmount * TransientTaxRate
			else
			if  (ProcessingTax
			and  TaxCode.TaxType.TaxTableCode)
				WorkTaxAmount									= TaxAmount + AccruedTaxAmount
				RemainingAmount									= WorkTaxAmount
			else
			if  (ProcessingTax)
				WorkTaxAmount									= DerivedTaxAmount
				RemainingAmount									= WorkTaxAmount
			else
				RemainingAmount									= TotalDistributionAmount

			round RemainingAmount to nearest DerivedRoundTo


			RemainingQuantity									= PurchaseOrderLine.DistributionQuantityTotal
			LocalQuantityRatio 									= MatchedQuantity / PurchaseOrderLine.DistributionQuantityTotal

			if (ProcessingTax)
				I9 = 1					

	        LocalLastPoDistrib = last PurchaseOrderLineDistributionRel.PurchaseOrderLineDistribution 

			for each PurchaseOrderLineDistributionRel

				WorkDistributionAccount							= each.DistributionAccount
				LocalPOLineDistribution  						= each.PurchaseOrderLineDistribution


				if (each.DistributionPercent entered)
					LocalRate = each.DistributionPercent 
				else 
				if (each.DistributionQuantity entered)
					LocalRate							= (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal)
				else 
					LocalRate							= (each.DistributionAmount/PurchaseOrderLine.ExtendedAmount)


				if  (each.DistributionPercent entered)

					PercentAccumulated							+= each.DistributionPercent


					if  (ProcessingTax
					and TaxEntityRel.ThirdParty.TaxEngine)
						for each TaxEngineTaxDetailRel





							if  ((each.TaxClassification < 3
							and   TotalDistributionAmount > 0
							and   each.TaxAmount > 0)
							or    (each.TaxClassification < 3
							and   TotalDistributionAmount < 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount > 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount < 0
							and   each.TaxAmount > 0))

								LocalWorkAmount = each.TaxAmount
								LocalTaxCode = each.TaxCode
								include CreateInvoiceDetailDistribution
							
					else
					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   TaxEntityUsesThirdPartyTax))

						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							WorkDistributionAccount			= LocalPOLineDistributionRel.DistributionAccount
							LocalWorkAmount					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * each.DistributionPercent
							round LocalWorkAmount to nearest DerivedRoundTo
							RemainingAmount					-= LocalWorkAmount

							if (PercentAccumulated = 100%
							and RemainingAmount entered
							and (I9 = 8
							or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered))
								LocalWorkAmount += RemainingAmount
								initialize RemainingAmount



							include CreateInvoiceDetailDistribution
							I9 += 1
					else
					if (PercentAccumulated = 100%)

						LocalWorkAmount						= RemainingAmount
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax
					and  TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= TotalDistributionAmount * TransientTaxRate * each.DistributionPercent
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)

						LocalWorkAmount						= WorkTaxAmount * each.DistributionPercent
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
						LocalWorkAmount						= TotalDistributionAmount * each.DistributionPercent
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount

				else
				if (each.DistributionQuantity entered)

					QuantityAccumulated							+= each.DistributionQuantity 
					
					if  (ProcessingTax
					and TaxEntityRel.ThirdParty.TaxEngine)
						for each TaxEngineTaxDetailRel





							if  ((each.TaxClassification < 3
							and   TotalDistributionAmount > 0
							and   each.TaxAmount > 0)
							or    (each.TaxClassification < 3
							and   TotalDistributionAmount < 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount > 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount < 0
							and   each.TaxAmount > 0))
								LocalWorkAmount = each.TaxAmount
								LocalTaxCode    		= each.TaxCode
								include CreateInvoiceDetailDistribution
					else
	
					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   TaxEntityUsesThirdPartyTax))
						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							WorkDistributionAccount			= LocalPOLineDistributionRel.DistributionAccount

							LocalWorkAmount					= (CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal))
							round LocalWorkAmount to nearest DerivedRoundTo
							RemainingAmount						-= LocalWorkAmount

							if (QuantityAccumulated = PurchaseOrderLine.DistributionQuantityTotal 
							and RemainingAmount entered
							and (I9 = 8
							or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered))

								LocalWorkAmount += RemainingAmount
								initialize RemainingAmount

							include CreateInvoiceDetailDistribution
							I9 += 1
					else
					if (ProcessingTax
					and TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= (TotalDistributionAmount * TransientTaxRate * (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal))
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)
						LocalWorkAmount						= (WorkTaxAmount * (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal))
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
						LocalWorkAmount						= (TotalDistributionAmount * (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal))
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount

					RemainingQuantity						-= each.DistributionQuantity
				else

					
					if  (ProcessingTax
					and TaxEntityRel.ThirdParty.TaxEngine)
						for each TaxEngineTaxDetailRel





							if  ((each.TaxClassification < 3
							and   TotalDistributionAmount > 0
							and   each.TaxAmount > 0)
							or    (each.TaxClassification < 3
							and   TotalDistributionAmount < 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount > 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount < 0
							and   each.TaxAmount > 0))
								LocalWorkAmount = each.TaxAmount
								LocalTaxCode			= each.TaxCode
								include CreateInvoiceDetailDistribution
					else
					
					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   TaxEntityUsesThirdPartyTax))
						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							WorkDistributionAccount			= LocalPOLineDistributionRel.DistributionAccount
							LocalWorkAmount						= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * (each.DistributionAmount/PurchaseOrderLine.ExtendedAmount)
							round LocalWorkAmount to nearest DerivedRoundTo
							RemainingAmount  					-= LocalWorkAmount

							if  (LocalLastPoDistrib = each.PurchaseOrderLineDistribution
							and  RemainingAmount entered
							and (I9 = 8
							or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered))
								LocalWorkAmount += RemainingAmount
								initialize RemainingAmount


							include CreateInvoiceDetailDistribution
							I9 += 1
					else
					if  (ProcessingTax
					and  TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= TotalDistributionAmount * TransientTaxRate * (each.DistributionAmount/PurchaseOrderLine.ExtendedAmount)
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)
						LocalWorkAmount							= WorkTaxAmount * (each.DistributionAmount/PurchaseOrderLine.ExtendedAmount)
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount							-= LocalWorkAmount
					else
						LocalWorkAmount							= TotalDistributionAmount * (each.DistributionAmount/PurchaseOrderLine.ExtendedAmount)
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount							-= LocalWorkAmount




			if (RemainingAmount entered
			and (RemainingAmount >= .005
				or RemainingAmount <= -.005))

				initialize LocalPOLineDistribution
				WorkDistributionAccount						= last PurchaseOrderLineDistributionRel.DistributionAccount
				if (WorkDistributionAccount not entered)
					if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
						WorkDistributionAccount				= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
					else
						WorkDistributionAccount				= Company.ToleranceOffsetAccount
				WorkGLTransactionAmount						= RemainingAmount
				include InvokeDistributionCreate

		CreateInvoiceDetailDistribution

			if (ProcessingTax)

				if  (!TaxEntityRel.ThirdParty.TaxEngine)
					LocalTaxCode = CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode



				if  (TaxEntityRel.ThirdParty.TaxEngine)
					if (LocalEntityTaxCodeRel.LandedCost)
						if (ItemType.Inventoried)
							if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
								WorkDistributionAccount		= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount

							else
								WorkDistributionAccount		= Company.ReceiptAccrualAccount

						else
						if  (LocalEntityTaxCodeRel.TaxPoint = "P"
						and  LocalEntityTaxCodeRel.TaxInputDueAccount entered)
							WorkDistributionAccount			= LocalEntityTaxCodeRel.TaxInputDueAccount
						else
						if  (LocalEntityTaxCodeRel.TaxInputAccount entered)
							WorkDistributionAccount			= LocalEntityTaxCodeRel.TaxInputAccount
				else
				if  ((TaxCode.TaxType.TaxTableCode
				and   CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)
				or   (!TaxCode.TaxType.TaxTableCode
				and   !TaxEntityRel.UseTaxCodeAccounts
				and    TaxEntityRel.LandedCost)
				or   (!TaxCode.TaxType.TaxTableCode
				and    TaxEntityRel.UseTaxCodeAccounts
				and    LocalEntityTaxCodeRel.LandedCost))


					if (ItemType.Inventoried)
						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionAccount		= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount

						else
							WorkDistributionAccount		= Company.ReceiptAccrualAccount

				else
				if (TaxCode.TaxType.TaxTableCode
				and !CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)

					if  (CalculateTax.TaxTable.TaxTableOutput.TaxPoint = "P")
						WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount

						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputDueAccount
					else
						WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount

						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputAccount

					if  (WorkDistributionAccount not entered)
						LocalTaxCode = CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode
						if  (LocalEntityTaxCodeRel.TaxPoint 	= "P")
							WorkDistributionAccount		= LocalEntityTaxCodeRel.TaxInputDueAccount
						else
							WorkDistributionAccount		= LocalEntityTaxCodeRel.TaxInputAccount
				else
				if (!LocalEntityTaxCodeRel.LandedCost)
					LocalTaxCode = CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode
					if (LocalTaxCode not entered)
						LocalTaxCode = TaxCode 

					if  (TaxCode.TaxType.CalculatedRate)
						if  (LocalEntityTaxCodeRel.TaxPoint 	= "P")
							WorkDistributionAccount		= LocalEntityTaxCodeRel.TaxInputDueAccount
						else
							WorkDistributionAccount		= LocalEntityTaxCodeRel.TaxInputAccount
					else
					if (CalculateTax.TaxTable.TaxTableOutput.TaxPoint = "P")
						WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount

						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputDueAccount
						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= LocalEntityTaxCodeRel.TaxInputDueAccount
					else
						WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount

						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputAccount
						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= LocalEntityTaxCodeRel.TaxInputAccount








			if  (ProcessingTax
			and  PayablesInvoice.TaxEntityUsesVertex
			and  LocalWorkAmount 		not entered
			and  CalculateTax.TaxTable.TaxTableOutput[I9].TaxRate		not entered)
				NextSentence = true
			else
			if (!LocalDoRetainageDistribution
			or  GetRetainage.RetainagePercent not entered)
				initialize LocalRetainageTaxableAmount
				WorkGLTransactionAmount					= LocalWorkAmount
				include InvokeDistributionCreate
			else
				LocalRetainageTranAmount				= LocalWorkAmount * GetRetainage.RetainagePercent
				round LocalRetainageTranAmount to nearest DerivedRoundTo
				WorkGLTransactionAmount					= LocalWorkAmount - LocalRetainageTranAmount
				if (ProcessingTax)
					LocalRetainageTaxableAmount			= TotalDistributionAmount - (TotalDistributionAmount * GetRetainage.RetainagePercent)

				include InvokeDistributionCreate

				WorkGLTransactionAmount					= LocalRetainageTranAmount
				WorkRetainage							= true
				if (ProcessingTax)
					LocalRetainageTaxableAmount			= (TotalDistributionAmount * GetRetainage.RetainagePercent)

				include InvokeDistributionCreate



		InvokeDistributionCreate












			initialize LocalCommentText															
			if  (ContractLine entered
			and  ContractLine.ContractLineComment set exists)				
				for each ContractLine.ContractLineComment set				
					if (each.CommentUsedFor.DisplayOnInvoice)				
						LocalCommentText += each.Description				

			else
			if (PurchaseOrderReceiptLine entered
			and PurchaseOrderReceiptLine.PurchaseOrderReceiptLineCommentRel exists)

				for each PurchaseOrderReceiptLine.PurchaseOrderReceiptLineCommentRel			
					if (each.CommentType = "N")		
						LocalCommentText += each.CommentText									

				if (LocalCommentText not entered												
				and PurchaseOrderLine.PurchaseOrderLineComment set exists)						

					for each PurchaseOrderLine.PurchaseOrderLineComment set						
						if (each.CommentType = "N")			
							LocalCommentText += each.CommentText								
			else
			if (PurchaseOrderLine entered
			and PurchaseOrderLine.PurchaseOrderLineComment set exists)
				for each PurchaseOrderLine.PurchaseOrderLineComment set							
					if (each.CommentType = "N")			
						LocalCommentText += each.CommentText									

				if (LocalCommentText not entered												
				and PurchaseOrderReceiptLine.PurchaseOrderReceiptLineCommentRel exists)			

					for each PurchaseOrderReceiptLine.PurchaseOrderReceiptLineCommentRel		
						if (each.CommentType = "N")		
							LocalCommentText += each.CommentText								

			if (EAMWorkOrder entered
			and TaxEntityRel.ThirdParty.Sabrix
			and PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Original)
				include EAMWorkOrderAccountDefaulting


			invoke CreateFromMatch PayablesInvoiceDistribution
				if (ContractLine entered)
					fill in user fields from LocalContractLineDistributionRel.ContractLineDistribution
				else
					fill in user fields from LocalPOLineDistributionRel.PurchaseOrderLineDistribution
				invoked.Company								= Company
				invoked.PayablesInvoice						= PayablesInvoice
				invoked.DistributionType					= "D"
				invoked.PurchaseOrder						= PurchaseOrder
				invoked.PurchaseOrderLine					= PurchaseOrderLine
				invoked.PurchasingContract					= Contract
				invoked.ContractLine						= ContractLine
				invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail
				invoked.BypassBudgetEdit					= BypassBudgetEdit
				invoked.CommentText							= LocalCommentText					
				if (IsHSNSACCodeEnabled)
					invoked.HSNSACCode							= HSNSACCode

				if (LocalPOLineDistribution entered)
					invoked.OriginalDistribution			= LocalPOLineDistribution
					invoked.TransientAsset					= LocalPOLineDistributionRel.AssetInformation.Asset
					invoked.TransientAssetTemplate			= LocalPOLineDistributionRel.AssetInformation.AssetTemplate
					if (PurchaseOrderLine.DistributionBy.ByQuantity)
						invoked.TransientItemQuantity 		= LocalPOLineDistributionRel.DistributionQuantity 
				else
				if  (LocalContractLineDistrib entered)
					invoked.OriginalDistribution			= LocalContractLineDistrib

				invoked.GLFinanceCodeBlock					= WorkDistributionAccount	
				invoked.DistributionAccount					= WorkDistributionAccount

				invoked.GLTransactionAmount					= WorkGLTransactionAmount
				invoked.DistributionAmount.CurrencyAmount	= WorkGLTransactionAmount
				if  (ProcessingTax)
					if (TaxEntityRel.ThirdParty.TaxEngine)
						if (TaxEngineTaxDetailRel exists)
							invoked.TaxCode = LocalTaxCode

					else
					if  (TaxCode.TaxType.TaxTableCode
					and (LocalPOLineDistribution entered
					or   LocalContractLineDistrib entered))
						invoked.TaxCode						= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode
					else
						invoked.TaxCode						= TaxCode
						invoked.ProductTaxCategory 			= ProductTaxCategory
						invoked.TaxUsageCode				= TaxUsageCode

					if (TaxCode.TaxType.CalculatedRate)
						invoked.TaxRate						= TransientTaxRate
						invoked.TaxableAmount				= TotalDistributionAmount
					else
						invoked.TaxRate						= CalculateTax.TaxTable.TaxTableOutput[I9].TaxRate
						invoked.TaxableAmount				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxableAmount * LocalRate 
						if (PayablesInvoice.TaxEntityUsesVertex)
							invoked.TaxType					= CalculateTax.TaxTable.TaxTableOutput[I9].AccrualFlag

					invoked.Imposition						= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition

				if (WorkRetainage)
					invoked.Retainage						= true
					invoked.AccrualCode 					= PayablesInvoice.RetainageAccrualCode 
					if (ProcessingTax)
						invoked.TaxableAmount				= LocalRetainageTaxableAmount

				invoked.BypassUpdatingInvoiceTotals		= true
				invoked.TransientBypassErrorUpdate		= true

			WorkRetainage									= false


		CopyContractLineDistributionsRuleBlock



			if  (PayablesInvoice.RetainageAccrualCode not entered
			or  (ProcessingTax
			and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued))
				LocalDoRetainageDistribution 			= false
			else
				LocalDoRetainageDistribution 			= true
				initialize GetRetainage
				GetRetainage.PurchaseOrder				= PurchaseOrder
				GetRetainage.PurchaseOrderLine			= PurchaseOrderLine
				GetRetainage.Contract					= Contract
				GetRetainage.ContractLine				= ContractLine
				LocalGetRetainage 						= GetRetainage.PerformGet

			initialize PercentAccumulated

			if  (ProcessingTax
			and !CalculateTaxHasBeenCalled)
				include CallCalculateTax

			if  (ProcessingTax
			and  TaxCode.TaxType.CalculatedRate)
				if  (TaxableUnitCost entered)
					if  (PayablesInvoice.InvoiceType.CreditMemo
					and  EnteredUnitCost > 0)
						RemainingAmount							= TaxableUnitCost * MatchedQuantity * TransientTaxRate * -1
					else
						RemainingAmount							= TaxableUnitCost * MatchedQuantity * TransientTaxRate
				else
					RemainingAmount								= TotalDistributionAmount * TransientTaxRate
			else
			if  (ProcessingTax
			and  TaxCode.TaxType.TaxTableCode)
				WorkTaxAmount									= TaxAmount + AccruedTaxAmount
				RemainingAmount									= WorkTaxAmount
			else
			if  (ProcessingTax)
				WorkTaxAmount									= DerivedTaxAmount
				RemainingAmount									= WorkTaxAmount
			else
				RemainingAmount									= TotalDistributionAmount



			if (ProcessingTax)
				I9 = 1					

			for each ContractLineDistributionsRel

				LocalRate 										= each.Percent 
				LocalContractLineDistrib						= each.ContractLineDistribution
				WorkDistributionAccount							= each.DistributionAccount
				PercentAccumulated								+= each.Percent
				if (!TaxCode.TaxType.TaxTableCode
				and  PercentAccumulated = 100%)

					LocalWorkAmount								= RemainingAmount
					round LocalWorkAmount to nearest DerivedRoundTo
					include CreateInvoiceDetailDistribution
					RemainingAmount						-= LocalWorkAmount
				else
					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   TaxEntityUsesThirdPartyTax))

						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							WorkDistributionAccount			= LocalContractLineDistributionRel.DistributionAccount
							LocalWorkAmount					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * each.Percent
							round LocalWorkAmount to nearest DerivedRoundTo
							RemainingAmount					-= LocalWorkAmount
							if  (I9 = 8
							or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered)
								LocalWorkAmount += RemainingAmount
								initialize RemainingAmount

							include CreateInvoiceDetailDistribution
							I9 += 1
					else
					if  (ProcessingTax
					and  TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= TotalDistributionAmount * TransientTaxRate * each.Percent
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)

						I9 = 1
						LocalWorkAmount						= WorkTaxAmount * each.Percent
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
						LocalWorkAmount						= TotalDistributionAmount * each.Percent
						round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount


			if  (ProcessingTax 
			and  TaxCode.TaxType.CalculatedRate)
				NextSentence = true 
			else 
			if  (RemainingAmount entered
			and (RemainingAmount >= .005
			or   RemainingAmount <= -.005))
				WorkDistributionAccount						= last ContractLineDistributionsRel.DistributionAccount
				if (WorkDistributionAccount not entered)
					if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
						WorkDistributionAccount			= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
					else
						WorkDistributionAccount			= Company.ToleranceOffsetAccount

				WorkGLTransactionAmount						= RemainingAmount
				include InvokeDistributionCreate

		DeleteTaxDistributions
			if  (OldTaxCode entered)
				if  (!OldTaxCode.TaxType.TaxTableCode)
					LocalTaxCode						= OldTaxCode
					include DeleteTaxRelation
				else
					for each TaxDistributionsRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
								if (action = "Update")
									invoked.ParmDeleteAndAdd = true

		DeleteTaxRelation

			if (LocalTaxCode entered)
				if  (PurchaseOrderLine entered)
					for each TaxDistributionsForPurchaseOrderLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
								if (action = "Update")
									invoked.ParmDeleteAndAdd = true
				else
				if  (ContractLine entered)
					for each TaxDistributionsForContractLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
								if (action = "Update")
									invoked.ParmDeleteAndAdd = true
				else
				if  (PurchaseOrderLine not entered)
					for each TaxDistributionsForMiscellaneousDetailRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
								if (action = "Update")
									invoked.ParmDeleteAndAdd = true

		CheckPOCommitments

			if (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or  POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				initialize LocalWorkCommitAmount
				initialize LocalQuantity

				if (ProcurementGroupRel.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate)
					LocalEncumbranceDate = PurchaseOrderLine.EarlyDeliveryDate 
				else 
					LocalEncumbranceDate = PurchaseOrder.PurchaseOrderDate 


				if (EnteredUOM = PurchaseOrderLine.EnteredBuyUOM
				or  ItemType.Special)
					LocalQuantity 			= EnteredQuantity
					LocalOldEnteredQuantity = OldEnteredQuantity
				else
					initialize UOMCalculation

					UOMCalculation.InputToUOM		= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.InputUOM			= EnteredUOM
					UOMCalculation.InputQuantity	= EnteredQuantity
					UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
					LocalQuantity					= UOMCalculation.OutputQuantity

					initialize UOMCalculation

					UOMCalculation.InputToUOM		= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.InputUOM			= EnteredUOM
					UOMCalculation.InputQuantity	= OldEnteredQuantity
					UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
					LocalOldEnteredQuantity			= UOMCalculation.OutputQuantity

				if  (PurchaseOrderLine entered)

					LocalPoAmountToCommit = PurchaseOrderLine.AmountToCommit 
					round LocalPoAmountToCommit to nearest DerivedRoundTo 


					initialize LocalTaxAmount  
					for each DetailInvoiceDistributionsRel 

						if  ((each.IsLandedTaxDistribution
						and   TaxCode = PurchaseOrderLine.TaxCode)
						or   (each.IsLandedAOCDistribution
						and   each.PurchaseOrderAndLineAddOnChargeRel exists))
							LocalTaxAmount += each.DistributionAmount.CurrencyAmount 

					LocalLandedTaxAndAocUnitCost = LocalTaxAmount / MatchedQuantity 


					if  (action type.Create)
						if (!PurchaseOrderLine.ServiceCode.Amount)
							if (EnteredQuantity <= PurchaseOrderLine.QuantityToCommit)
								LocalPassedCommitQuantity 			= LocalQuantity
							else
								LocalPassedCommitQuantity           = PurchaseOrderLine.QuantityToCommit
							include UpdatePOCommitments
						if (PurchaseOrderLine.ServiceCode.Amount)

							if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit)
								LocalWorkCommitAmount = EnteredUnitCost + LocalLandedTaxAndAocUnitCost
							else
								LocalWorkCommitAmount = LocalPoAmountToCommit 
							include UpdatePOCommitments

					else
					if  (action type.Update)
						if  (!PurchaseOrderLine.ServiceCode.Amount)
							if  (EnteredQuantity != OldEnteredQuantity)
								if (LocalQuantity <= PurchaseOrderLine.QuantityToCommit
								and LocalOldEnteredQuantity <= PurchaseOrderLine.QuantityToCommit)
									LocalPassedCommitQuantity 			= (LocalQuantity - LocalOldEnteredQuantity)
								else
								if (LocalQuantity <= PurchaseOrderLine.QuantityToCommit
								and LocalOldEnteredQuantity > PurchaseOrderLine.QuantityToCommit)
									LocalPassedCommitQuantity           = (LocalQuantity - PurchaseOrderLine.QuantityToCommit)
								else
								if (LocalQuantity > PurchaseOrderLine.QuantityToCommit
								and LocalOldEnteredQuantity <= PurchaseOrderLine.QuantityToCommit)
									LocalPassedCommitQuantity           = (PurchaseOrderLine.QuantityToCommit - LocalOldEnteredQuantity)
								else
									LocalPassedCommitQuantity           = 0


							if  (EnteredUnitCost != OldEnteredUnitCost)






								if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit
								and OldEnteredUnitCost  + OldLocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit)
									LocalWorkCommitAmount = ((EnteredUnitCost - OldEnteredUnitCost) + (LocalLandedTaxAndAocUnitCost  - OldLocalLandedTaxAndAocUnitCost))

								else
								if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost < LocalPoAmountToCommit
								and OldEnteredUnitCost  + OldLocalLandedTaxAndAocUnitCost >= LocalPoAmountToCommit)
									LocalWorkCommitAmount = (EnteredUnitCost + LocalLandedTaxAndAocUnitCost - LocalPoAmountToCommit)

								else
								if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost > LocalPoAmountToCommit
								and OldEnteredUnitCost  + OldLocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit)
									LocalWorkCommitAmount = (LocalPoAmountToCommit - OldEnteredUnitCost - OldLocalLandedTaxAndAocUnitCost)


							if  (EnteredQuantity != OldEnteredQuantity
							or   EnteredUnitCost != OldEnteredUnitCost)
								include UpdatePOCommitments
						else
						if  (PurchaseOrderLine.ServiceCode.Amount)


							if (EnteredQuantity = OldEnteredQuantity)
								LocalPassedCommitQuantity 			= EnteredQuantity  
							else
								LocalPassedCommitQuantity           = EnteredQuantity - OldEnteredQuantity


							if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit
							and OldEnteredUnitCost  + OldLocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit)
								LocalWorkCommitAmount = ((EnteredUnitCost - OldEnteredUnitCost) + (LocalLandedTaxAndAocUnitCost  - OldLocalLandedTaxAndAocUnitCost))

							else
							if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost < LocalPoAmountToCommit
							and OldEnteredUnitCost  + OldLocalLandedTaxAndAocUnitCost >= LocalPoAmountToCommit)
								LocalWorkCommitAmount = (EnteredUnitCost + LocalLandedTaxAndAocUnitCost - LocalPoAmountToCommit)

							else
							if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost > LocalPoAmountToCommit
							and OldEnteredUnitCost  + OldLocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit)
								LocalWorkCommitAmount = (LocalPoAmountToCommit - OldEnteredUnitCost - OldLocalLandedTaxAndAocUnitCost)


							include UpdatePOCommitments
					else
					if  (action type.Delete)
						if (!PurchaseOrderLine.ServiceCode.Amount)
							if (PayablesInvoice.DistributionDate year not = LocalEncumbranceDate year
							or  PayablesInvoice.DistributionDate month not = LocalEncumbranceDate month)
								LocalPassedCommitQuantity 			= (LocalQuantity * -1)
							else
							if (LocalQuantity <= PurchaseOrderLine.QuantityToCommit)
								LocalPassedCommitQuantity 			= (LocalQuantity * -1)
							else
								LocalPassedCommitQuantity           = ((LocalQuantity - PurchaseOrderLine.QuantityToCommit) * -1)

							LocalWorkCommitAmount = (TotalDistributionAmount + (LocalLandedTaxAndAocUnitCost * MatchedQuantity) - (LocalPoAmountToCommit * PurchaseOrderLine.QuantityToCommit))

							if  (LocalWorkCommitAmount < 0)
								initialize LocalWorkCommitAmount

							include UpdatePOCommitments
						else
						if (PurchaseOrderLine.ServiceCode.Amount)
							LocalWorkCommitAmount = (TotalDistributionAmount + LocalLandedTaxAndAocUnitCost - LocalPoAmountToCommit)
							if  (LocalWorkCommitAmount < 0)
								initialize LocalWorkCommitAmount

							include UpdatePOCommitments
				else
				if (ContractLine entered
				and Contract.UseCommitments)
					include UpdateContractCommitments

		UpdatePOCommitments


			if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				BypassActiveCodeBlockEdit = true 
			for each PurchaseOrderLine.CommittedPurchaseOrderLineDistributionsRel


			 	initialize LocalReversalUpdateAmount
				if  (action type.Delete)
					LocalReversalUpdateAmount        = TotalDistributionAmount * each.DistributionPercent * -1
				else 
				if (each.PurchaseOrderLine.ServiceCode.Amount)
				 	if (each.DistributionByAmount)
				   		LocalReversalUpdateAmount = ((each.DistributionAmount/PurchaseOrderLine.ExtendedAmountToCommit) * LocalWorkCommitAmount)
			   		else
				   		if (each.DistributionByPercent)
				   			LocalReversalUpdateAmount = (each.DistributionPercent * LocalWorkCommitAmount)
				   		else
							LocalReversalUpdateAmount = ((each.DistributionQuantity/PurchaseOrderLine.QuantityToCommit) * LocalWorkCommitAmount)

				else   
				 	if (each.DistributionByAmount)
				   		LocalReversalUpdateAmount = ((LocalPassedCommitQuantity / each.PurchaseOrderLine.QuantityToCommit) * each.DistributionAmount)
			   		else
						if  (!action type.Delete
						and  LocalPassedCommitQuantity not entered)
							LocalWorkCommitAmount = LocalWorkCommitAmount * LocalQuantity 
						else 
						if  (!action type.Delete)

							LocalWorkCommitAmount = ((LocalPassedCommitQuantity * PurchaseOrderLine.CostToCommit))

							for each PurchaseOrderLine.LandedPurchaseOrderLineAddOnChargeRel
								LocalWorkCommitAmount -= each.LandedUnitCost * each.Quantity 


				   		if (each.DistributionByPercent)
				   			LocalReversalUpdateAmount = (each.DistributionPercent * LocalWorkCommitAmount)
				   		else
							LocalReversalUpdateAmount = ((each.DistributionQuantity/PurchaseOrderLine.QuantityToCommit) * LocalWorkCommitAmount)


                    if (LocalReversalUpdateAmount > TotalDistributionAmount + LocalTaxAmount)  
                        LocalReversalUpdateAmount = TotalDistributionAmount + LocalTaxAmount  



				if (action type.Create
				or  action type.Delete)
					initialize TransientReportCurrencyAmount
					TransientTransactionCodeBlock                       = each.DistributionAccount
					TransientCurrencyTable         						= Company.CurrencyTable
					TransientAccountingEntity      						= Company.AccountingEntity
					TransientExchangeDate          						= PayablesInvoice.DistributionDate
					TransientPostingDate           						= PayablesInvoice.DistributionDate
					TransientFromCurrency          						= PayablesInvoice.InvoiceCurrency
					LocalCurrencyAmount                                 = LocalReversalUpdateAmount
					TransientCurrencyAmount                             = LocalReversalUpdateAmount

					TransientReportCurrencyAmount.UseDerivedCalculations = true
					LocalForceCalculation	       						= TransientReportCurrencyAmount.AssignToCurrency
					LocalForceCalculation 	       						= TransientReportCurrencyAmount.DerivedCalculationsComplete



					invoke CreateBudgetTemplateReversal each.GLCommitRel
		  				invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
		  				invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
		  				invoked.PrmCodeBlock        					= each.DistributionAccount
		  				invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
		  				invoked.PrmTransAmount      					= LocalReversalUpdateAmount
		  				invoked.PrmCurrencyAmounts.FunctionalAmount     = TransientReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ProjectAmount	    = TransientReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount1        = TransientReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount2        = TransientReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount3        = TransientReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount4        = TransientReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount5        = TransientReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount      = TransientReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount2     = TransientReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount3     = TransientReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						if (LocalQuantity > PurchaseOrderLine.QuantityToCommit
						or  EnteredUnitCost != PurchaseOrderLine.EnteredUnitCost)
							invoked.PrmHasPriorYearPOCommit = true 

				else 
				if (action type.Update)
					initialize TransientReversalUpdateReportCurrencyAmount
					TransientTransactionCodeBlock                       = each.DistributionAccount
					TransientCurrencyTable         						= Company.CurrencyTable
					TransientAccountingEntity      						= Company.AccountingEntity
					TransientExchangeDate          						= PayablesInvoice.DistributionDate
					TransientPostingDate           						= PayablesInvoice.DistributionDate
					TransientFromCurrency          						= PayablesInvoice.InvoiceCurrency
					TransientCurrencyAmount                             = LocalReversalUpdateAmount    
					LocalCurrencyAmount                                 = LocalReversalUpdateAmount
					TransientReversalUpdateReportCurrencyAmount.UseDerivedCalculations = true
					LocalForceCalculation	       						= TransientReversalUpdateReportCurrencyAmount.AssignToCurrency
					LocalForceCalculation 	       						= TransientReversalUpdateReportCurrencyAmount.DerivedCalculationsComplete



					invoke CreateBudgetTemplateReversal each.GLCommitRel
		  				invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
		  				invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
		  				invoked.PrmCodeBlock        					= each.DistributionAccount
		  				invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
		  				invoked.PrmTransAmount      					= LocalReversalUpdateAmount
		  				invoked.PrmCurrencyAmounts.FunctionalAmount     = TransientReversalUpdateReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ProjectAmount	    = TransientReversalUpdateReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount1        = TransientReversalUpdateReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount2        = TransientReversalUpdateReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount3        = TransientReversalUpdateReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount4        = TransientReversalUpdateReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount5        = TransientReversalUpdateReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount      = TransientReversalUpdateReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount2     = TransientReversalUpdateReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount3     = TransientReversalUpdateReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						if (LocalQuantity > PurchaseOrderLine.QuantityToCommit
						or  EnteredUnitCost != PurchaseOrderLine.EnteredUnitCost)
							invoked.PrmHasPriorYearPOCommit = true
						if (LocalQuantity <= PurchaseOrderLine.QuantityToCommit
						and  EnteredUnitCost = PurchaseOrderLine.EnteredUnitCost)
							invoked.PrmHasPriorYearPOCommit = false  




			
			if (action type.Update)
				for each InvoiceDistributionsForPurchaseOrderLineRel
    				invoke SetGLCommitForRebuild each
						
						if (LocalQuantity > PurchaseOrderLine.QuantityToCommit
						or  EnteredUnitCost != PurchaseOrderLine.EnteredUnitCost)
							invoked.PrmHasPriorYearPOCommit    = true
							invoked.PrmSkipBudgetRebuild       = false
						else
						if (LocalQuantity <= PurchaseOrderLine.QuantityToCommit
						and  EnteredUnitCost = PurchaseOrderLine.EnteredUnitCost)
							invoked.PrmHasPriorYearPOCommit = false
							invoked.PrmSkipBudgetRebuild    = true   	

		UpdateContractCommitments
			if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				BypassActiveCodeBlockEdit = true 

			initialize LocalTaxAmount  
			for each DetailInvoiceDistributionsRel 

				if (each.IsLandedTaxDistribution
				or  each.IsLandedAOCDistribution)
					LocalTaxAmount += each.DistributionAmount.CurrencyAmount 

			LocalLandedTaxAndAocUnitCost = LocalTaxAmount / MatchedQuantity 



			for each InvoiceDistributionsForContractLineRel
		   		initialize LocalReversalUpdateAmount
		   		TestContractAmountToReverse = ((EnteredQuantity * (EnteredUnitCost + LocalLandedTaxAndAocUnitCost)) * (each.DistributionAmount.CurrencyAmount/TotalDistributionAmount))
				TestContractUpdateAmountToReverse = (((EnteredQuantity * (EnteredUnitCost + LocalLandedTaxAndAocUnitCost))) - (OldEnteredQuantity * (OldEnteredUnitCost + OldLocalLandedTaxAndAocUnitCost)) * (each.DistributionAmount.CurrencyAmount/TotalDistributionAmount))		   		
		   		OldTestContractUpdateAmountToReverse = ((OldEnteredQuantity * (OldEnteredUnitCost + OldLocalLandedTaxAndAocUnitCost)) * (each.DistributionAmount.CurrencyAmount/TotalDistributionAmount))


		   		if (action type.Create)
			   		if (Contract.CreateCommitments.Header)
			   			if (TestContractAmountToReverse <= (Contract.MaximumAmountRemaining - ContractTotalDetailAmount))
			   				LocalReversalUpdateAmount = TestContractAmountToReverse
						else
							LocalReversalUpdateAmount = (Contract.MaximumAmountRemaining - ContractTotalDetailAmount)
					else
					if (Contract.CreateCommitments.HeaderSpread)
						for each Contract.ContractSpreadForAmountUpdateRel
							if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
								if (TestContractAmountToReverse <= (each.AmountRemaining - ContractTotalDetailAmount))
									LocalReversalUpdateAmount = TestContractAmountToReverse
								else
									LocalReversalUpdateAmount = (each.AmountRemaining - ContractTotalDetailAmount)
								end for each
					else
					if (Contract.CreateCommitments.Line)
						if (TestContractAmountToReverse <= (ContractLine.CommitmentAmountRemaining * each.ContractLineDistributionRel.Percent))
							LocalReversalUpdateAmount = TestContractAmountToReverse
						else
							LocalReversalUpdateAmount = (ContractLine.CommitmentAmountRemaining * each.ContractLineDistributionRel.Percent)
					if (Contract.CreateCommitments.LineSpread)
						LocalDistributionAccount = each.DistributionAccount
						for each ContractLineDistributionSpreadByDateRel
							if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
								if (TestContractAmountToReverse <= each.AmountRemaining)
									LocalReversalUpdateAmount = TestContractAmountToReverse
								else
									LocalReversalUpdateAmount = each.AmountRemaining
								end for each						
		   		else
		   		if (action type.Delete)



			   		if (Contract.CreateCommitments.Header)
			   			if (TestContractAmountToReverse - LocalLandedTaxAndAocUnitCost <= (Contract.MaximumAmountRemaining - ContractTotalDetailAmount))
			   				LocalReversalUpdateAmount = (TestContractAmountToReverse * -1)
						else
							LocalReversalUpdateAmount = ((Contract.MaximumAmountRemaining - ContractTotalDetailAmount) * -1)

					else
					if (Contract.CreateCommitments.HeaderSpread)
						for each Contract.ContractSpreadForAmountUpdateRel
							if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
								if (TestContractAmountToReverse  - LocalLandedTaxAndAocUnitCost <= (each.AmountRemaining - ContractTotalDetailAmount))
									LocalReversalUpdateAmount = (TestContractAmountToReverse * -1)
								else
									LocalReversalUpdateAmount = ((each.AmountRemaining - ContractTotalDetailAmount) * -1)
								end for each
					else
					if (Contract.CreateCommitments.Line)

						if (ContractLine.ServiceCode.Amount)
							LocalReversalUpdateAmount = (TestContractAmountToReverse - ContractLine.CommitmentAmountRemaining)
							if  (LocalReversalUpdateAmount < 0)
								initialize LocalReversalUpdateAmount

						else 
						if (TestContractAmountToReverse  - LocalLandedTaxAndAocUnitCost <= ContractLine.CommitmentAmountRemaining)
							LocalReversalUpdateAmount = (TestContractAmountToReverse * -1)

						else
							LocalReversalUpdateAmount = (ContractLine.CommitmentAmountRemaining * -1)

					else
					if (Contract.CreateCommitments.LineSpread)
						LocalDistributionAccount = each.DistributionAccount
						for each ContractLineDistributionSpreadByDateRel
							if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
								if (TestContractAmountToReverse  - LocalLandedTaxAndAocUnitCost <= each.AmountRemaining)
									LocalReversalUpdateAmount = (TestContractAmountToReverse * -1)
								else
									LocalReversalUpdateAmount = (each.AmountRemaining * -1)
								end for each						
		   		else
		   		if (action type.Update)
			   		
			   		if (Contract.CreateCommitments.Header)
			   			if (!PayablesInvoice.IsChargeback)
				   			if (TestContractAmountToReverse <= (Contract.MaximumAmountRemaining - ContractTotalDetailAmount)
				   			and OldTestContractUpdateAmountToReverse <= (Contract.MaximumAmountRemaining - ContractTotalDetailAmount))
				   				LocalReversalUpdateAmount = (TestContractUpdateAmountToReverse)
				   			else
				   			if (TestContractAmountToReverse <= (Contract.MaximumAmountRemaining - ContractTotalDetailAmount)
				   			and OldTestContractUpdateAmountToReverse > (Contract.MaximumAmountRemaining - ContractTotalDetailAmount))
				   				LocalReversalUpdateAmount = ((OldTestContractUpdateAmountToReverse + ContractTotalDetailAmount - Contract.MaximumAmountRemaining) + TestContractUpdateAmountToReverse)  
							else
				   			if (TestContractAmountToReverse > (Contract.MaximumAmountRemaining - ContractTotalDetailAmount)
				   			and OldTestContractUpdateAmountToReverse <= (Contract.MaximumAmountRemaining - ContractTotalDetailAmount))
				   				LocalReversalUpdateAmount = (TestContractUpdateAmountToReverse - (TestContractAmountToReverse + ContractTotalDetailAmount - Contract.MaximumAmountRemaining))    						
							else
								LocalReversalUpdateAmount = 0
						else
						if (PayablesInvoice.IsChargeback)
							if (Contract.MaximumAmountRemaining + TestContractAmountToReverse >= 0)
								LocalReversalUpdateAmount = TestContractAmountToReverse	
							else
				   			if (Contract.MaximumAmountRemaining + TestContractAmountToReverse < 0)
								LocalReversalUpdateAmount = 0 		
					else
					if (Contract.CreateCommitments.HeaderSpread)
						if (!PayablesInvoice.IsChargeback)
							for each Contract.ContractSpreadForAmountUpdateRel	
								if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
									if (TestContractAmountToReverse <= (each.AmountRemaining - ContractTotalDetailAmount)
									and OldTestContractUpdateAmountToReverse <= (each.AmountRemaining - ContractTotalDetailAmount))
										LocalReversalUpdateAmount = TestContractUpdateAmountToReverse
		 							else
					   				if (TestContractAmountToReverse <= (each.AmountRemaining - ContractTotalDetailAmount)
					   				and OldTestContractUpdateAmountToReverse > (each.AmountRemaining - ContractTotalDetailAmount))
					   					LocalReversalUpdateAmount = ((OldTestContractUpdateAmountToReverse - each.AmountRemaining - ContractTotalDetailAmount) + (TestContractUpdateAmountToReverse))  
									else
					   				if (TestContractAmountToReverse > (each.AmountRemaining - ContractTotalDetailAmount)
					   				and OldTestContractUpdateAmountToReverse <= (each.AmountRemaining - ContractTotalDetailAmount))
					   					LocalReversalUpdateAmount = ((each.AmountRemaining - TestContractAmountToReverse - ContractTotalDetailAmount) + (TestContractUpdateAmountToReverse))  						
									else
										LocalReversalUpdateAmount = 0
									end for each
						else
						if (PayablesInvoice.IsChargeback)
							for each Contract.ContractSpreadForAmountUpdateRel	
								if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
									if (each.AmountRemaining + TestContractAmountToReverse >= 0)
										LocalReversalUpdateAmount = TestContractAmountToReverse	
									else
				   					if (each.AmountRemaining + TestContractAmountToReverse < 0)
										LocalReversalUpdateAmount = 0 									
					else
					if (Contract.CreateCommitments.Line)
						LocalCommitmentAmountRemaining = (ContractLine.CommitmentAmountRemaining * each.ContractLineDistributionRel.Percent)
						if (!PayablesInvoice.IsChargeback)						
							if (TestContractAmountToReverse 	 <= LocalCommitmentAmountRemaining
							and OldTestContractUpdateAmountToReverse <= LocalCommitmentAmountRemaining)
								LocalReversalUpdateAmount = (TestContractUpdateAmountToReverse)
							else
				   			if (TestContractAmountToReverse <= LocalCommitmentAmountRemaining
				   			and OldTestContractUpdateAmountToReverse > LocalCommitmentAmountRemaining)
				   				LocalReversalUpdateAmount = ((OldTestContractUpdateAmountToReverse - LocalCommitmentAmountRemaining) + (TestContractUpdateAmountToReverse))  
								
							else
				   			if (TestContractAmountToReverse > LocalCommitmentAmountRemaining
				   			and OldTestContractUpdateAmountToReverse <= LocalCommitmentAmountRemaining)
				   				LocalReversalUpdateAmount = ((LocalCommitmentAmountRemaining - TestContractAmountToReverse) + (TestContractUpdateAmountToReverse))  						
							else
								LocalReversalUpdateAmount = 0
						if (PayablesInvoice.IsChargeback)
							if (Contract.MaximumAmountRemaining + TestContractAmountToReverse >= 0)
								LocalReversalUpdateAmount = TestContractAmountToReverse	
							else
				   			if (Contract.MaximumAmountRemaining + TestContractAmountToReverse < 0)
								LocalReversalUpdateAmount = 0 								
						
					if (Contract.CreateCommitments.LineSpread)
						LocalDistributionAccount = each.DistributionAccount
						if (!PayablesInvoice.IsChargeback)
							for each ContractLineDistributionSpreadByDateRel
								if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
									if (TestContractAmountToReverse <= each.AmountRemaining
									and OldTestContractUpdateAmountToReverse <= each.AmountRemaining)
										LocalReversalUpdateAmount = (TestContractUpdateAmountToReverse)
		 							else
					   				if (TestContractAmountToReverse <= each.AmountRemaining
					   				and OldTestContractUpdateAmountToReverse > each.AmountRemaining)
					   					LocalReversalUpdateAmount = ((OldTestContractUpdateAmountToReverse - each.AmountRemaining) + (TestContractUpdateAmountToReverse))  
									else
					   				if (TestContractAmountToReverse > each.AmountRemaining
					   				and OldTestContractUpdateAmountToReverse <= each.AmountRemaining)
					   					LocalReversalUpdateAmount = ((each.AmountRemaining - TestContractAmountToReverse) + (TestContractUpdateAmountToReverse))  						
									else
										LocalReversalUpdateAmount = 0
									end for each
						if (PayablesInvoice.IsChargeback)
							for each ContractLineDistributionSpreadByDateRel
								if (PayablesInvoice.InvoiceDate >= each.SpreadDate)
									if (each.AmountRemaining + TestContractAmountToReverse >= 0)
										LocalReversalUpdateAmount = TestContractAmountToReverse	
									else
				   					if (each.AmountRemaining + TestContractAmountToReverse < 0)
										LocalReversalUpdateAmount = 0 													

				if (action type.Create
				or  action type.Delete)
					initialize TransientReportCurrencyAmount
					TransientTransactionCodeBlock                       = each.DistributionAccount
					TransientCurrencyTable         						= Company.CurrencyTable
					TransientAccountingEntity      						= Company.AccountingEntity
					TransientExchangeDate          						= PayablesInvoice.DistributionDate
					TransientPostingDate           						= PayablesInvoice.DistributionDate
					TransientFromCurrency          						= PayablesInvoice.InvoiceCurrency
					TransientCurrencyAmount                             = LocalReversalUpdateAmount    
					LocalCurrencyAmount                                 = LocalReversalUpdateAmount
					TransientReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = LocalReversalUpdateAmount
					TransientReportCurrencyAmount.UseDerivedCalculations = true
					LocalForceCalculation	       						= TransientReportCurrencyAmount.AssignToCurrency
					LocalForceCalculation 	       						= TransientReportCurrencyAmount.DerivedCalculationsComplete

					invoke CreateBudgetTemplateReversal each.GLCommitRel
		  				invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
		  				invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
		  				invoked.PrmCodeBlock        					= each.DistributionAccount
		  				invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
		  				invoked.PrmTransAmount      					= LocalReversalUpdateAmount
		  				invoked.PrmCurrencyAmounts.FunctionalAmount     = TransientReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ProjectAmount	    = TransientReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount1        = TransientReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount2        = TransientReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount3        = TransientReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount4        = TransientReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount5        = TransientReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount      = TransientReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount2     = TransientReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount3     = TransientReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
				else
				if (action type.Update)
					initialize TransientReversalUpdateReportCurrencyAmount
					TransientTransactionCodeBlock                       = each.DistributionAccount
					TransientCurrencyTable         						= Company.CurrencyTable
					TransientAccountingEntity      						= Company.AccountingEntity
					TransientExchangeDate          						= PayablesInvoice.DistributionDate
					TransientPostingDate           						= PayablesInvoice.DistributionDate
					TransientFromCurrency          						= PayablesInvoice.InvoiceCurrency
					TransientCurrencyAmount                             = LocalReversalUpdateAmount
					LocalCurrencyAmount                                 = LocalReversalUpdateAmount
					TransientReversalUpdateReportCurrencyAmount.UseDerivedCalculations = true
					LocalForceCalculation	       						= TransientReversalUpdateReportCurrencyAmount.AssignToCurrency
					LocalForceCalculation 	       						= TransientReversalUpdateReportCurrencyAmount.DerivedCalculationsComplete
					display "CallingBudgetTemplateReversalForContractUpdates"

					display "LocalReversalUpdateAmount<LocalReversalUpdateAmount>"
					display "TransientReversal<TransientReversalUpdateReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount>"



					invoke CreateBudgetTemplateReversal each.GLCommitRel
		  				invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
		  				invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
		  				invoked.PrmCodeBlock        					= each.DistributionAccount
		  				invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
		  				invoked.PrmTransAmount      					= LocalReversalUpdateAmount
		  				invoked.PrmCurrencyAmounts.FunctionalAmount     = TransientReversalUpdateReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ProjectAmount	    = TransientReversalUpdateReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount1        = TransientReversalUpdateReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount2        = TransientReversalUpdateReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount3        = TransientReversalUpdateReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount4        = TransientReversalUpdateReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.ReportAmount5        = TransientReversalUpdateReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount      = TransientReversalUpdateReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount2     = TransientReversalUpdateReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.PrmCurrencyAmounts.AlternateAmount3     = TransientReversalUpdateReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount

		EAMWorkOrderAccountDefaulting

			WorkDistributionAccount = PayablesInvoiceDetail.EAMWorkOrder.DistributionAccount 

			if (WorkDistributionAccount.Ledger not entered) 
				WorkDistributionAccount.Ledger = EAMTradeAccountOverrideRel.OverrideAccount.Ledger
			if (WorkDistributionAccount.ToAccountingEntity not entered)
				WorkDistributionAccount.ToAccountingEntity = EAMTradeAccountOverrideRel.OverrideAccount.ToAccountingEntity
			if (WorkDistributionAccount.AccountingUnit not entered)
				WorkDistributionAccount.AccountingUnit = EAMTradeAccountOverrideRel.OverrideAccount.AccountingUnit
			if (WorkDistributionAccount.GeneralLedgerChartAccount not entered)
				WorkDistributionAccount.GeneralLedgerChartAccount = EAMTradeAccountOverrideRel.OverrideAccount.GeneralLedgerChartAccount
			if (WorkDistributionAccount.Project not entered)
				WorkDistributionAccount.Project = EAMTradeAccountOverrideRel.OverrideAccount.Project
			if (WorkDistributionAccount.FinanceDimension1 not entered)
				WorkDistributionAccount.FinanceDimension1 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension1
			if (WorkDistributionAccount.FinanceDimension2 not entered)
				WorkDistributionAccount.FinanceDimension2 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension2
			if (WorkDistributionAccount.FinanceDimension3 not entered)
				WorkDistributionAccount.FinanceDimension3 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension3
			if (WorkDistributionAccount.FinanceDimension4 not entered)
				WorkDistributionAccount.FinanceDimension4 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension4
			if (WorkDistributionAccount.FinanceDimension5 not entered)
				WorkDistributionAccount.FinanceDimension5 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension5
			if (WorkDistributionAccount.FinanceDimension6 not entered)
				WorkDistributionAccount.FinanceDimension6 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension6
			if (WorkDistributionAccount.FinanceDimension7 not entered)
				WorkDistributionAccount.FinanceDimension7 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension7
			if (WorkDistributionAccount.FinanceDimension8 not entered)
				WorkDistributionAccount.FinanceDimension8 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension8
			if (WorkDistributionAccount.FinanceDimension9 not entered)
				WorkDistributionAccount.FinanceDimension9 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension9
			if (WorkDistributionAccount.FinanceDimension10 not entered)
				WorkDistributionAccount.FinanceDimension10 = EAMTradeAccountOverrideRel.OverrideAccount.FinanceDimension10
			
			if (WorkDistributionAccount.Ledger not entered) 
				WorkDistributionAccount.Ledger = LocalPOLineDistributionRel.DistributionAccount.Ledger
			if (WorkDistributionAccount.ToAccountingEntity not entered)
				WorkDistributionAccount.ToAccountingEntity = LocalPOLineDistributionRel.DistributionAccount.ToAccountingEntity
			if (WorkDistributionAccount.AccountingUnit not entered)
				WorkDistributionAccount.AccountingUnit = LocalPOLineDistributionRel.DistributionAccount.AccountingUnit
			if (WorkDistributionAccount.GeneralLedgerChartAccount not entered)
				WorkDistributionAccount.GeneralLedgerChartAccount = LocalPOLineDistributionRel.DistributionAccount.GeneralLedgerChartAccount
			if (WorkDistributionAccount.Project not entered)
				WorkDistributionAccount.Project = LocalPOLineDistributionRel.DistributionAccount.Project
			if (WorkDistributionAccount.FinanceDimension1 not entered)
				WorkDistributionAccount.FinanceDimension1 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension1
			if (WorkDistributionAccount.FinanceDimension2 not entered)
				WorkDistributionAccount.FinanceDimension2 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension2
			if (WorkDistributionAccount.FinanceDimension3 not entered)
				WorkDistributionAccount.FinanceDimension3 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension3
			if (WorkDistributionAccount.FinanceDimension4 not entered)
				WorkDistributionAccount.FinanceDimension4 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension4
			if (WorkDistributionAccount.FinanceDimension5 not entered)
				WorkDistributionAccount.FinanceDimension5 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension5
			if (WorkDistributionAccount.FinanceDimension6 not entered)
				WorkDistributionAccount.FinanceDimension6 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension6
			if (WorkDistributionAccount.FinanceDimension7 not entered)
				WorkDistributionAccount.FinanceDimension7 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension7
			if (WorkDistributionAccount.FinanceDimension8 not entered)
				WorkDistributionAccount.FinanceDimension8 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension8
			if (WorkDistributionAccount.FinanceDimension9 not entered)
				WorkDistributionAccount.FinanceDimension9 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension9
			if (WorkDistributionAccount.FinanceDimension10 not entered)
				WorkDistributionAccount.FinanceDimension10 = LocalPOLineDistributionRel.DistributionAccount.FinanceDimension10

	Derived Fields
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSupplierInvoice"

		ContextMessageText is a MessageField
			restricted
			"PurchaseOrderNumber<PurchaseOrder>ForVendor<Vendor.VendorName>"

		ChangeCompleteMsg is a MessageField
			restricted
			"ChangeComplete"

		ChangeCompleteDistributionsUpdatedMsg is a MessageField
			restricted
			"ChangeComplete:DistributionsUpdated"

		EnteredQtyGreaterThanReceivedQtyMsg is a MessageField
			"EnteredQuantityIsGreaterThanOpenToMatchQuantity,CannotChange.PleaseAddAdditionalReceiptOrDeleteInvoiceDetailFromReceiptLinesAndEnterInvoiceDetailsFromPOLines"

		QuantityExceedsWhatIsAvailableMsg is a MessageField
		    "QuantityExceedsWhatIsAvailableOnPurchaseOrderLine"
		    
		EnteredQtyGreaterThanOpenToMatchQtyMsg is a MessageField
			"EnteredQuantityIsGreaterThanOpenToMatchQuantity"

		DerivedFormTitle is a LabelField
			restricted
			"Invoice<Invoice>_|_Line<DerivedLine>Item<Item>"

		DisplayEnteredQuantityUOM is a LabelField
			"Quantity:<EnteredQuantity>_<EnteredUOM>"

		QuantityAlertMsg is a DerivedField
			type is MessageField
			if (ItemType.Service)
				return QuantityExceedsWhatIsAvailableMsg
			else
				return EnteredQtyGreaterThanOpenToMatchQtyMsg
				
		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (PayablesInvoice.InvoiceCurrency entered)
				return PayablesInvoice.InvoiceCurrency.NumberOfDecimals
			else
				return 2


		DerivedRoundTo is a DerivedField		
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001

		DerivedRoundToCost is a DerivedField
			type is like RoundTo
			restricted
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)
				return 0.00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return 0.0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return 0.001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return 0.01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return 0.1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1

		DerivedRoundToQuantity			is a DerivedField
			type is Unsigned Decimal 21.8

			if  (ItemType.Inventoried or ItemType.NonStock)
				if (Item.NumberOfDecimalsQuantity = 4)
					return .0001
				else
				if (Item.NumberOfDecimalsQuantity = 3)
					return .001
				else
				if (Item.NumberOfDecimalsQuantity = 2)
					return .01
				else
				if (Item.NumberOfDecimalsQuantity = 1)
					return .1
				else
				if (Item.NumberOfDecimalsQuantity = 0)
					return 1
				else
					return 0
			else 
				return .00000001

		DerivedItemType is a DerivedField
			type is Alpha size 12
			default label is "ItemType"
			if (ItemType.Inventoried)
				return "Inventoried"
			else
			if (ItemType.NonStock)
				return "NonStock"
			else
			if (ItemType.Service)
				return "Service"
			else
				return "Special"

		ChargebackYesOrNo is a DerivedField
			type is Alpha 10
			restricted
			if (ReconDetailRel.CreateChargeback)
				return "Yes"
			else
				return "No"

		DerivedManufacturerUnitCost is a DerivedField
			type is like InternationalCost
			restricted
			if  (PurchaseOrderLine exists
			and  PurchaseOrderLine.ManufacturerContract	entered)
				if (PurchaseOrderLine.ManufacturerContract	!= PurchaseOrderLine.Contract)	
					if (PurchaseOrderLine.ContractLineMemberRel		exists)
						return PurchaseOrderLine.ContractLineMemberRel.BaseCost
					else
					if (PurchaseOrderLine.ManufacturerContractLineRel	exists)
						if (PurchaseOrderLine.ManufacturerContractLineRel.CurrentNetCost	entered)
							return first PurchaseOrderLine.ManufacturerContractLineRel.CurrentNetCost
						else
							return first PurchaseOrderLine.ManufacturerContractLineRel.BaseCost
					else
						return PurchaseOrderLine.EnteredUnitCost
				else									
					return PurchaseOrderLine.EnteredUnitCost
			else
				if (PurchaseOrderLine exists)
					return PurchaseOrderLine.EnteredUnitCost
				else
					return EnteredUnitCost

		DerivedContractQuantity is a DerivedField
			type is like Quantity
			restricted
			if (ContractLine.ServiceCode.Amount)
				return 1
			else
				return ContractLine.DerivedRemainingQuantityOrdered

		DerivedContractLineDiscrepancy is a DerivedField
			type is like InternationalAmount
			default label is "Discrepancy"

			if (IsMatched)
			    if ((ContractLine.LifetimeMaximumAmount - ContractLine.AmountOrdered) < 0)
				    return (ContractLine.LifetimeMaximumAmount - ContractLine.AmountOrdered)
			else
			if (ContractLine.ServiceCode.Quantity)
				initialize LocalWorkAmount
				if  ((EnteredUnitCost > ContractLine.DerivedMatchBaseCost)
				and  (ContractLine.QuantityOrdered + EnteredQuantity > ContractLine.LifetimeMaximumQuantity))
					LocalWorkAmount += ((ContractLine.DerivedMatchBaseCost - EnteredUnitCost) * EnteredQuantity)
					LocalWorkAmount += ((ContractLine.LifetimeMaximumQuantity - ContractLine.QuantityOrdered - EnteredQuantity) * ContractLine.DerivedMatchBaseCost)
				else
				if  (EnteredUnitCost > ContractLine.DerivedMatchBaseCost)
					LocalWorkAmount += ((ContractLine.DerivedMatchBaseCost - EnteredUnitCost) * EnteredQuantity)
				else
				if  (ContractLine.QuantityOrdered + EnteredQuantity > ContractLine.LifetimeMaximumQuantity)
					LocalWorkAmount += ((ContractLine.LifetimeMaximumQuantity - ContractLine.QuantityOrdered - EnteredQuantity) * EnteredUnitCost)
				return LocalWorkAmount
			else



			if  (Contract.IncludeTaxInMaxEdits)
				if  (TotalDistributionAmount + TaxAmount > ContractLine.DerivedRemainingAmountInUse)
					return (ContractLine.DerivedRemainingAmountInUse - (TotalDistributionAmount + TaxAmount))
				else
					return 0
			else
			if  (TotalDistributionAmount > ContractLine.DerivedRemainingAmountInUse)
				return (ContractLine.DerivedRemainingAmountInUse - TotalDistributionAmount)
			else
				return 0

		ItemOrService is a DerivedField 
			type is Alpha 60
			if (PurchaseOrder entered)
				return Item 
			else
			if (ContractLine entered)
				return ItemDescription
		
		PurchaseOrderAndLineDerived is a DerivedField 
			type is Alpha 50 
			default label is "POAndLine"
			if (PurchaseOrder entered)
				return PurchaseOrderAndLine 
			else 
				return blank
		
		PurchaseOrderAndLine is a StringField
			type is Alpha 50 
			restricted
			PurchaseOrder 
			"-"
			PurchaseOrderLine
		
		DerivedMatchUnitCost is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost


			default label is "MatchUnitCost"
			initialize LocalUnitCost
			if (MiscellaneousDetail)
				return EnteredUnitCost
			else
			if (ItemType.Special or ItemType.Service)
				return EnteredUnitCost
			else
			if  (PurchaseOrderLine entered
			and (ItemType.Inventoried or ItemType.NonStock)
			and  !PurchaseOrderLine.IsCatchWeightItem
			and  EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
			and  EnteredUOM != PurchaseOrderLine.VendorPriceUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM						= EnteredUOM
				UOMCalculation.InputUnitCost				= EnteredUnitCost
				UOMCalculation.InputToUOM					= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
				UOMCalculation.ValidateDecimal				= false
				UOMCalculation.DoRounding					= false
				LocalUnitCost								= UOMCalculation.OutputUnitCost


			else
			if ((ItemType.Inventoried
			or   ItemType.NonStock)
			and EnteredUOM  not = VendorPriceUOM
			and VendorPriceUOM entered)

				initialize UOMCalculation

				UOMCalculation.InputUnitCost				= EnteredUnitCost
				UOMCalculation.InputToUOM					= VendorPriceUOM
				UOMCalculation.InputUOMConversion			= EnteredUOMMultiplier
				UOMCalculation.InputToUOMConversion			= VendorPriceUOMMultiplier
				UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
				UOMCalculation.ValidateDecimal				= false
				UOMCalculation.DoRounding					= false
				if (UOMCalculation.OutputUnitCost entered)
					LocalUnitCost							= UOMCalculation.OutputUnitCost


			if  (LocalUnitCost entered)
				return LocalUnitCost
			else
				return EnteredUnitCost

		ContractCostDifference is a DerivedField 
			type is like InternationalCost 
				precision is DerivedNumberOfDecimalsCost
			default label is "CostDifferenceToPOOrContract"
			if (PurchaseOrderLine entered)
				return (EnteredUnitCost - PurchaseOrderLine.EnteredUnitCost)
			else
			if (ContractLine entered)
				return (EnteredUnitCost - ContractLine.BaseCost)

		DerivedManufacturerContract is a ConditionalField
			type is Numeric size 15
			restricted
			if  (PurchaseOrderLine 				exists
			and  PurchaseOrderLine.Contract	not = 0
			and  PurchaseOrderLine.ManufacturerContract  = 0)
				PurchaseOrderLine.Contract
			else
			if  (PurchaseOrderLine 				exists
			and  PurchaseOrderLine.Contract	not = 0
			and  PurchaseOrderLine.ManufacturerContract not = 0)
				PurchaseOrderLine.ManufacturerContract
			else
			if (ContractLine entered
			and ContractLine exists
			and Contract.ServicePurchaseType)
				Contract
			else
				0

		DerivedExtendedAmount is a DerivedField
			type is like InternationalCost
			return (EnteredQuantity * EnteredUnitCost)

		DerivedExtendedMatchAmount is a DerivedField
			type is like InternationalCost
			return (MatchedQuantity * MatchUnitCost)

		DerivedExtendedInvoiceMatchAmount is a DerivedField
			type is like InternationalCost
			if (IsCatchWeight)
				return (BuyUOMMatchedQuantity * PurchaseOrderLine.EnteredUnitCost)
			else
				return (MatchedQuantity * MatchUnitCost)

		DerivedMatchInvoiceMessageInvoiceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (ItemType.Service
			and PayablesInvoice.MatchProcessType.ServiceContract)
				return (MatchedQuantity * EnteredUnitCost)
			else
				return (MatchedQuantity * MatchUnitCost)


		DerivedPOCostMessage is a DerivedField  
			type is Boolean
			restricted
			if (PayablesInvoice.RuleGroup entered)
				LocalMatchRule		= PayablesInvoice.RuleGroup
			else
				LocalMatchRule		= Company.POCostMessageMatchRule

			if (LocalMatchRule entered)
				if 	(LocalMatchRule exists
				and  LocalMatchMessageToleranceRel exists)
					if  (Company.POCostMessageRuleOrder entered
					and  PayablesInvoice.RuleGroup entered)
						I1 = 1
						while (I1 <= 6)
							if  (LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].MatchRuleOrder = Company.POCostMessageRuleOrder
							and  LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].InvoiceMatchLevel.DetailMatch)
								return true
							I1 += 1
					else
						I1 = 1
						while (I1 <= 6)
							if  (LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I1].InvoiceMatchLevel.DetailMatch)
								return true
							I1 += 1

			return false

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsQuantity
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4

		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsCost
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8
		DerivedBuyCatchWeightQuantity is a DerivedField
			type is like Quantity
			restricted
			return (PurchaseOrderLine.CatchWeightQuantity * (PurchaseOrderLine.VendorPriceUOMMultiplier / PurchaseOrderLine.EnteredBuyUOMMultiplier))

		DerivedInvoiceQuantity is a DerivedField
			type is Numeric 13
			return EnteredQuantity

		DerivedInvoiceUnitCost is a DerivedField
			type is like InternationalCost
			return EnteredUnitCost

		DerivedMatchedQuantity is a DerivedField
			type is like Quantity
			restricted

			if (MiscellaneousDetail)
				return EnteredQuantity
			else
			if (ItemType.Special or ItemType.Service)
				return EnteredQuantity
			else
			if  (PurchaseOrderLine entered
			and (ItemType.Inventoried or ItemType.NonStock)
			and  !PurchaseOrderLine.IsCatchWeightItem
			and  EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
			and  EnteredUOM != PurchaseOrderLine.VendorPriceUOM)
				initialize UOMCalculation
				UOMCalculation.InputUOM						= EnteredUOM
				UOMCalculation.InputQuantity				= EnteredQuantity
				UOMCalculation.InputToUOM					= PurchaseOrderLine.EnteredBuyUOM
				UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
				UOMCalculation.ValidateDecimal				= false
				UOMCalculation.DoRounding					= false
				LocalResultQuantity							= UOMCalculation.OutputQuantity


			else
			if ((ItemType.Inventoried or ItemType.NonStock)
			and  EnteredUOM  not = VendorPriceUOM)

				initialize UOMCalculation

				UOMCalculation.InputQuantity				= EnteredQuantity
				UOMCalculation.InputToUOM					= VendorPriceUOM
				UOMCalculation.InputUOMConversion			= EnteredUOMMultiplier
				UOMCalculation.InputToUOMConversion			= VendorPriceUOMMultiplier
				UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
				UOMCalculation.ValidateDecimal				= false
				UOMCalculation.DoRounding					= false
				LocalResultQuantity							= UOMCalculation.OutputQuantity
			else
				LocalResultQuantity 						= EnteredQuantity

			return LocalResultQuantity

		DerivedInvoiceLineQuantityWithPrecision is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity

			if (VendorPriceUOM		= EnteredUOM)
				return MatchedQuantity
			else
				return EnteredQuantity

		DerivedInvoiceLineUnitCostWithPrecision is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost

			if (VendorPriceUOM		= EnteredUOM)
				return MatchUnitCost
			else
				return EnteredUnitCost

		DerivedInvoiceLineUOM is a DerivedField
			type is like UnitOfMeasure

			if (VendorPriceUOM		= EnteredUOM)
				return VendorPriceUOM
			else
				return EnteredUOM

		DerivedDistributionAmount is a DerivedField
			type is like InternationalAmount
			restricted

			WorkCost	      = (MatchedQuantity * MatchUnitCost)
			round WorkCost to nearest DerivedRoundTo
			DerivedDistributionAmount = WorkCost 
			return DerivedDistributionAmount

		DerivedUnroundedDistributionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (MatchedQuantity * MatchUnitCost)

		DerivedBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			initialize LocalBaseAmount
			LocalBaseAmount.ToCurrency			= Company.Currency
			LocalBaseAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			LocalFromCurrency					= PayablesInvoice.InvoiceCurrency
			LocalCurrencyAmount					= DerivedDistributionAmount
			LocalExchangeDate 					= PayablesInvoice.InvoiceDate
			return LocalBaseAmount.OutputCurrencyAmount

		DerivedUpdateCompleteConditionalMessage is a ConditionalField
			type is Alpha size 60
			restricted
			if (!ItemType.Service
			and LocalCostMessage)
				DerivedUpdateCompleteWithPOCostMessage
			else
				DerivedUpdateComplete

		DerivedUpdateCompleteWithPOCostMessage	is a MessageField
			restricted
			"UpdateComplete,POCostMessageCreated"

		DerivedUpdateCompleteWithTaxRateMessage is a MessageField
			restricted
			"UpdateComplete,TaxRateNotCalculated"

		DerivedUpdateCompleteWithVerifyUnitCostMessage is a MessageField
			restricted
			"UpdateComplete,VerifyThatCreditUnitCostEqualsOriginalUnitCost"

		DerivedUpdateComplete is a MessageField
			restricted
			"UpdateComplete"

		InvoiceOutOfBalanceMsg is a MessageField
			restricted
			"DetailsOrTaxOutOfBalance"
			
		TaxAccrualOffsetCodeDoesNotExistMsg is a MessageField
			restricted
			"TaxAccrualOffsetCodeDoesNotExist:"

		SumOfDistributions is a DerivedField
			type is like InternationalAmount
			restricted
			if (MiscellaneousDetail)
				SumOfDistributions = (sum InvoiceDistributionsForMiscellaneousDetailRel.DistributionAmount.CurrencyAmount)
			else
			if (PurchaseOrderLine entered)
				SumOfDistributions = (sum InvoiceDistributionsForPurchaseOrderLineRel.DistributionAmount.CurrencyAmount)
			else
				SumOfDistributions = (sum InvoiceDistributionsForContractLineRel.DistributionAmount.CurrencyAmount)

			round SumOfDistributions to nearest DerivedRoundTo
			return SumOfDistributions

		SumOfTaxDistributions is a DerivedField
			type is like InternationalAmount
			if (OneSourceGeneric 
			and TaxCode entered) 
				SumOfTaxDistributions = (sum TaxDistributionsRel.DistributionAmount.CurrencyAmount)
				round SumOfTaxDistributions to nearest DerivedRoundTo
				return SumOfTaxDistributions

		SumOfLandedTaxDistributions is a DerivedField
			type is like InternationalAmount
			restricted
			initialize SumOfLandedTaxDistributions
			for each TaxDistributionsRel
				if (each.EntityTaxCodeRel.LandedCost
				or  each.InvoiceTaxEntityRel.LandedCost)	
					SumOfLandedTaxDistributions += each.DistributionAmount.CurrencyAmount

			return SumOfLandedTaxDistributions

		TotalCredits is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum CreditsAgainstThisLineRel.TotalDistributionAmount)

		TotalAddOnCost is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum LandedPayablesInvoiceAddOnChargeRel.TotalDistributionAmount)

		TotalAddOnCostTax is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum LandedPayablesInvoiceAddOnChargeRel.DerivedTaxAmount)

		TotalLinkedMatchedNotReceivedQuantity is a DerivedField
			type is like InternationalAmount
			restricted
			LocalQuantity = (sum PurchaseOrderReceiptInvoiceLinkMNRRel.MatchedNotReceivedQuantity)

			if  (LocalQuantity not entered
			and  ExcessQuantityProcess.MatchNoReceipt)
				LocalQuantity = MatchedQuantity

			return LocalQuantity

		OriginalInvoiceTotalMNR is a DerivedField
			type is like Quantity
			restricted
			LocalQuantity = (sum OriginalInvoiceDetailRel.PurchaseOrderReceiptInvoiceLinkMNRRel.MatchedNotReceivedQuantity)

			if  (LocalQuantity not entered
			and  ExcessQuantityProcess.MatchNoReceipt)
				LocalQuantity = MatchedQuantity

			return LocalQuantity

		AdjustmentType is a DerivedField
			type is Alpha 10
			if (PayablesInvoice.CreditOrDebitMemo)
				if  (CostAdjustment)
					return "Cost"
				else
				if  (QuantityAdjustment)
					return "Quantity"

		DerivedTotalInvoiceCostWithTax is a DerivedField	
			type is like InternationalAmount
			return (TaxAmount +(MatchedQuantity * MatchUnitCost))

		DerivedRetainagePercentComplete is a DerivedField
			type is like Percent
			default label is "RetainagePercentComplete"
			if (PurchaseOrder.RetainagePercentCompleteTracking entered
			or  Contract.RetainagePercentCompleteTracking entered)
				initialize GetRetainage
				GetRetainage.PurchaseOrder		= PurchaseOrder
				GetRetainage.PurchaseOrderLine	= PurchaseOrderLine
				GetRetainage.Contract			= Contract
				GetRetainage.ContractLine		= ContractLine
				LocalGetRetainage 				= GetRetainage.PerformGet
				return GetRetainage.RetainPercentComplete
			else
				return blank

		MatchTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if  (PayablesInvoice.MatchStatus.Unmatched
			and (InvoicedTaxAmount entered
			or   AccruedTaxAmount entered))
				return InvoicedTaxAmount
			else
				return TaxAmount



		DerivedTotalBaseAmountPerDiversityCode is a DerivedField  
			type is like InternationalAmount

			return DerivedTotalInvoiceCost

		DerivedTotalBaseAmountPerDiversityCodePercent is a DerivedField 
			type is Percent size 6.2
			return (DerivedTotalBaseAmountPerDiversityCode/DerivedTotalBaseAmountPerCommodityCode)

		DerivedTotalBaseAmountPerCommodityCode is a DerivedField 
			type is like InternationalAmount

			return DerivedTotalInvoiceCost

		DerivedTotalInvoiceCost is a DerivedField
			type is like InternationalCost
			return (MatchedQuantity * MatchUnitCost)

		DisplayDiversityCode is a DerivedField
			type is AlphaUpper size 8
			if (PayablesInvoice.DiversityCode entered)
				return PayablesInvoice.DiversityCode
			else
				return "Majority"


		DisplayVendorName is a LabelField
			"<Vendor>:_<Vendor.VendorName>"

		DerivedTotalForVendor is a DerivedField
			type is like InternationalAmount
			return (sum PayablesInvoiceDetailTotalsRel.TotalBaseAmount)

		DerivedTotalForVendorPercent is a DerivedField
			type is Percent size 6.2
			return (DerivedTotalForVendor/DerivedTotalForItem)

		DerivedTotalForItem is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum PayablesInvoiceDetailTotalPerItemRel.TotalBaseAmount)

		DerivedUnitCost is a DerivedField
			type is like InternationalAmount
			return (TotalBaseAmount/MatchedQuantity)

		DerivedRNIQuantity is a DerivedField
			type is like Quantity
			return (PurchaseOrderReceiptLine.EnteredReceivedQuantity - MatchedQuantity)

		DerivedRNIAmount is a DerivedField
			type is like InternationalAmount
			return (DerivedRNIQuantity * MatchUnitCost)

		DerivedTotalRNIAmountPerVendor is a DerivedField
			type is like InternationalAmount
			return (sum PayablesInvoiceDetailTotalsRel.DerivedRNIAmount)

		DerivedTotalRNIAmountPerItem is a DerivedField
			type is like InternationalAmount
			return (sum PayablesInvoiceDetailTotalPerItemRel.DerivedRNIAmount)

		DerivedTotalRNIQuantityPerVendor is a DerivedField
			type is like Quantity
			return (sum PayablesInvoiceDetailTotalsRel.DerivedRNIQuantity)

		DerivedTotalRNIQuantityPerItem is a DerivedField
			type is like Quantity
			return (sum PayablesInvoiceDetailTotalPerItemRel.DerivedRNIQuantity)

		DerivedTotalReceivedQuantityPerVendor is a DerivedField
			type is like Quantity
			return (sum PayablesInvoiceDetailTotalsRel.PurchaseOrderReceiptLine.EnteredReceivedQuantity)

		DerivedTotalReceivedQuantityPerItem is a DerivedField
			type is like Quantity
			return (sum PayablesInvoiceDetailTotalPerItemRel.PurchaseOrderReceiptLine.EnteredReceivedQuantity)

		DerivedTotalMatchedQuantityPerVendor is a DerivedField
			type is like Quantity
			return (sum PayablesInvoiceDetailTotalsRel.MatchedQuantity)

		DerivedTotalMatchedQuantityPerItem is a DerivedField
			type is like Quantity
			return (sum PayablesInvoiceDetailTotalPerItemRel.MatchedQuantity)

		DerivedINRQuantity is a DerivedField 
			type is like Quantity

			initialize LocalQuantity

			if  (PurchaseOrderLine.ReceivedQuantity > PurchaseOrderLine.MatchedQuantity)
				if (ItemRecordExists)
					initialize UOMCalculation

					UOMCalculation.InputUOM					= PurchaseOrderLine.EnteredBuyUOM
					UOMCalculation.InputToUOM				= EnteredUOM
					UOMCalculation.InputQuantity			= PurchaseOrderLine.ReceivedQuantity - PurchaseOrderLine.MatchedQuantity
					UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate

					if  (EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
					and  EnteredUOM != PurchaseOrderLine.VendorPriceUOM)
						UOMCalculation.InputToUOM			= PurchaseOrderLine.EnteredBuyUOM	
					else 
					if ((ItemType.Inventoried or ItemType.NonStock)
					and  EnteredUOM  not = VendorPriceUOM)
						UOMCalculation.InputToUOM			= VendorPriceUOM

					LocalQuantity 							= UOMCalculation.OutputQuantity
				else
					UOMCalculation.InputQuantity			= PurchaseOrderLine.ReceivedQuantity - PurchaseOrderLine.MatchedQuantity
					UOMCalculation.InputUOMConversion		= PurchaseOrderLine.VendorPriceUOMMultiplier
					UOMCalculation.InputToUOMConversion		= PurchaseOrderLine.EnteredBuyUOMMultiplier
					UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
					LocalQuantity							= UOMCalculation.OutputQuantity

			if  (MatchedQuantity > LocalQuantity)
				return (MatchedQuantity - LocalQuantity)
			else
				return 0

		DerivedInrUom is a DerivedField 
			type is like UnitOfMeasure

			if (ItemRecordExists)
				if  (EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
				and  EnteredUOM != PurchaseOrderLine.VendorPriceUOM)
					return PurchaseOrderLine.EnteredBuyUOM	
				else 
				if ((ItemType.Inventoried or ItemType.NonStock)
				and  EnteredUOM  not = VendorPriceUOM)
					return VendorPriceUOM

			return EnteredUOM 

		DerivedExtendedINRAmount is a DerivedField
			type is like InternationalAmount
			return (DerivedINRQuantity * MatchUnitCost)

		UnitCostVariance is a DerivedField
			type is like InternationalCost
			restricted
			return PurchaseOrderLine.EnteredUnitCost - EnteredUnitCost

		ExtendedAmountToCommit is a DerivedField
			type is like InternationalAmount
			restricted
			if (!PurchaseOrderLine.ServiceCode.Amount)
				return (MatchedQuantity * MatchUnitCost)
			else   
				return (MatchUnitCost)

		DerivedTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (TaxCode entered)
				if  (TaxAmount entered)
					return TaxAmount
				else
					return AccruedTaxAmount


		DerivedMiscellaneousDetailTax is a DerivedField
			type is like InternationalAmount
			restricted




			if (TaxCode not entered)
				return 0
			else
				initialize CalculateTax

				CalculateTax.TaxableAmount							= TotalDistributionAmount
				CalculateTax.InvoiceAmount							= TotalDistributionAmount

				CalculateTax.Function			 					= CalculateTax.Function.CalculateTax

				include PopulateCalculateTaxInputFields

				LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>E2"

				return CalculateTax.OutputTotalTaxAmount

		LandedTax is a DerivedField
			type is like InternationalCost
			restricted
			if (TaxCode entered)
				if (!TaxCode.TaxType.CalculatedRate)


					initialize CalculateTax
					CalculateTax.TaxableAmount							= TotalDistributionAmount
					CalculateTax.InvoiceAmount							= TotalDistributionAmount


					if (TaxCode.TaxType.CalculatedRate)
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTaxRate
					else
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTax

					include PopulateCalculateTaxInputFields

					if (TaxEntityRel.ThirdParty.TaxEngine)
						CalculateTax.TaxAmount = 0
						for each TaxEngineTaxDetailRel






							if  ((each.TaxClassification < 3
							and   TotalDistributionAmount > 0
							and   each.TaxAmount > 0)
							or    (each.TaxClassification < 3
							and   TotalDistributionAmount < 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount > 0
							and   each.TaxAmount < 0)
							or   (each.TaxClassification > 2
							and   TotalDistributionAmount > 0
							and   each.TaxAmount < 0))

								CalculateTax.TaxAmount += each.TaxAmount
					else
						LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>E3"



					return CalculateTax.DerivedTotalLandedTaxAmount5DP


		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedItemFlag is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter = "IsCSF_NonSOR_For_Item"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return Company.FinanceEnterpriseGroup

		DerivedAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists)
				if(DerivedConfigFEG="Y")
					LocalBODAccountingEntity = DerivedFinanceEnterpriseGroup + DerivedDelimiter + Company
				else
					LocalBODAccountingEntity= Company
				if (FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalBODAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
				return LocalBODAccountingEntity
			else
				return Company.GeneralLedgerCompany.AccountingEntity

		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists)
				if(DerivedConfigFEG="Y")
					LocalBODAccountingEntity = DerivedFinanceEnterpriseGroup + DerivedDelimiter + Company
				else
					LocalBODAccountingEntity= Company
				if (FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalBODAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
				return LocalBODAccountingEntity
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAccountingEntity


		BODInvoice	is a DerivedField
			type is AlphaUpper size 60
			restricted
			if(DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists)
				return Invoice
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + Company using "%d" +DerivedDelimiter + Invoice

		POShipToLocation is a DerivedField
			type is AlphaUpper size 22
			restricted
			return PurchaseOrderLine.ShipToLocation

		BODItemGroup is a DerivedField
			type is AlphaUpper size 22
			restricted
			return InventoryCompanyRel.ItemGroup

		BODItem is a DerivedField
			type is AlphaUpper size 60
			restricted
			if(DerivedItemFlag = "Y" or (DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists))
				return Item
			else
			if(ItemType.Special or ItemType.Service)
				return Item
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter +InventoryCompanyRel.ItemGroup+ DerivedDelimiter+ Item

		BODInvoiceCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceCurrency

		BODPurchaseOrder is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists)
				return PurchaseOrder
			else
				return Company using "%d" + DerivedDelimiter +PurchaseOrder using "%d"

		DerivedDistributionStatus is a DerivedField
			type is Alpha size 20
			restricted
			if	(Status.Unreleased)
				return "Unreleased"
			else
				return "Released"

		DerivedInvoiceCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceCurrency

		DerivedPayCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.PayCurrency

		DerivedDistributionType is a DerivedField
			type is Alpha size up to 60
			restricted
			if	(first DetailInvoiceDistributionsRel.DistributionType.Distribution)
				return "Distribution"
			if	(first DetailInvoiceDistributionsRel.DistributionType.GainLossDistribution)
				return "GainLossDistribution"
			if	(first DetailInvoiceDistributionsRel.DistributionType.TaxReversalDistribution)
				return "TaxReversalDistribution"
			if	(first DetailInvoiceDistributionsRel.DistributionType.ExpenseAccrual)
				return "ExpenseAccrual"
			if	(first DetailInvoiceDistributionsRel.DistributionType.Payment)
				return "Payment"
			if	(first DetailInvoiceDistributionsRel.DistributionType.PaymentAccrual)
				return "PaymentAccrual"
			if	(first DetailInvoiceDistributionsRel.DistributionType.PaymentWithholding)
				return "PaymentWithholding"
			if	(first DetailInvoiceDistributionsRel.DistributionType.PaymentDiscount)
				return "PaymentDiscount"
			if	(first DetailInvoiceDistributionsRel.DistributionType.MatchDiscountAccrual)
				return "MatchDiscountAccrual"
			else
				return "DiscountDistribution"

		BODDerivedDistributionStatus is a DerivedField
			type is Alpha size 20
			restricted
			if	(first DetailInvoiceDistributionsRel.Status.Unreleased)
				return "Unreleased"
			if	(first DetailInvoiceDistributionsRel.Status.Released)
				return "Released"
			if	(first DetailInvoiceDistributionsRel.Status.Historical)
				return "Historical"
			if	(first DetailInvoiceDistributionsRel.Status.Pending)
				return "Pending"
			if	(first DetailInvoiceDistributionsRel.Status.Approved)
				return "Approved"
			else
				return "Rejected"

		DerivedTaxIndicator is a DerivedField
			type is AlphaUpper size 20
			restricted
			if	(first DetailInvoiceDistributionsRel.TaxIndicator.None)
				return"None"
			if  (first DetailInvoiceDistributionsRel.TaxIndicator.Exempt)
				return "Exempt"
			if	(first DetailInvoiceDistributionsRel.TaxIndicator.Taxable)
				return "Taxable"
			else
				return "Exclude"

		DerivedLedger is a DerivedField
			type is AlphaUpper size 20
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.Ledger

		DerivedChartAccount is a DerivedField
			type is AlphaUpper size 26
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.GeneralLedgerChartAccount

		DerivedProject is a DerivedField
			type is AlphaUpper size 25
			return first DetailInvoiceDistributionsRel.DistributionAccount.Project

		DerivedAccountingUnit is a DerivedField
			type is AlphaUpper size 25
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.AccountingUnit

		DerivedFinanceDimension1 is a DerivedField
			type is AlphaUpper size 15
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension1

		DerivedFinanceDimension2 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension2

		DerivedFinanceDimension3 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension3

		DerivedFinanceDimension4 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension4

		DerivedFinanceDimension5 is a DerivedField
			type is AlphaUpper size 15
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension5

		DerivedFinanceDimension6 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension6

		DerivedFinanceDimension7 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension7

		DerivedFinanceDimension8 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension8

		DerivedFinanceDimension9 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension9

		DerivedFinanceDimension10 is a DerivedField
			type is AlphaUpper size 15
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.FinanceDimension10

		DerivedReportCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOne

		DerivedExtendedReportCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOne
			else
				return PayablesInvoice.InvoiceCurrency
		
		DerivedAlternateCurrencyRate is a DerivedField
			type is AlphaUpper size 31
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate

		DerivedAlternateCurrencyRate2 is a DerivedField
			type is AlphaUpper size 31
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate

		BODDistributionDate is a DerivedField
			type is Date
			restricted
			BODDistributionDate = first DetailInvoiceDistributionsRel.DistributionDate
			return BODDistributionDate

		AlphaDistributionDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODDistributionDate

		DerivedDistributionDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaDistributionDate[1:4] + "-" + AlphaDistributionDate[5:6] + "-" + AlphaDistributionDate[7:8]

		DerivedTaxPointDate2 is a DerivedField	
			type is Date
			restricted
			if (TaxCode.DerivedTaxPoint = "G")
				return PayablesInvoice.DistributionDate
			else
			if (TaxCode.DerivedTaxPoint = "P" 
			and PayablesInvoice.DerivedPaymentDate entered)
				return PayablesInvoice.DerivedPaymentDate
			else
				return PayablesInvoice.InvoiceDate

		DerivedICNCodeDesription is a DerivedField
			type is Alpha size 60
			restricted
			if(ICNCode entered)
				return ICNCode.Description
			else
				return ""
				
		DerivedAlternateCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.ToAccountingEntity.AlternateCurrency

		DerivedAlternateCurrency2 is a DerivedField
			type is AlphaUpper size 5
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAccount.ToAccountingEntity.AlternateCurrency2

		DerivedBaseEnteredAmount is a DerivedField
			type is AlphaUpper size 5
			restricted
			return first DetailInvoiceDistributionsRel.TransientFinanceCurrencyAmt.FunctionalAmount.EnteredCurrencyAmount

		DerivedReport1EnteredAmount is a DerivedField
			type is AlphaUpper size 5
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAmount.ReportAmount1.EnteredCurrencyAmount

		DerivedBaseCurrencyrate is a DerivedField
			type is AlphaUpper size 5
			restricted
			return first DetailInvoiceDistributionsRel.DistributionAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedUnmatchedCostLineType is a DerivedField
			type is AlphaUpper size 10
			restricted
			if(EAMLineType = "H")
				return "O"
			if(EAMLineType = "T")
				return "TOOL"
			if(EAMLineType = "S")
				return "X"

		BODPOShipToLocation is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists)
				return PurchaseOrder.ShipToLocation
			else
				if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PayablesInvoice.ServiceContract entered)
					return Company using "%d" + DerivedDelimiter + PayablesInvoice.Location
				else
					return Company using "%d" + DerivedDelimiter +PurchaseOrder.ShipToLocation

		DerivedToolID is a DerivedField
			type is Alpha size 12
			restricted
			if(EAMLineType = "T")
				return EAMTool
			else
				return ""

		DerivedWorkOrder is a DerivedField
			type is Alpha size 30
			restricted
			if(EAMWorkOrder entered)
				return EAMWorkOrder
			else
				return ""

		DerivedEAMWorkOrderActivity is a DerivedField
			type is Alpha size 8
			restricted
			if(EAMWorkOrder entered)
				return EAMWorkOrderActivity
			else
				return ""

		DerivedSIIncludeUDF is a DerivedField
			type is Boolean
			restricted
			LocalConfigurationParameter = "SyncSupplierInvoice_Out_Include_UDFs"
			if (FSMBODConfigurationParameterRel exists and FSMBODConfigurationParameterRel.Value = "Y")
				return true
			
		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter = "IntegrationApplication"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedIntegrationApplicationLocally is a DerivedField
			type is Boolean
			restricted
			if (DerivedIntegrationApplication = "Local.ly")
				return true
			else
				return false

		DerivedCountryCode is a DerivedField
			type is Alpha size 22
			restricted
			return Company.GeneralLedgerCompany.AccountingEntity.AddressCode.PostalAddress.Country


		ShipToPartyID is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return Company using "%d" + DerivedDelimiter + PayablesInvoice.ProcessLevel
			else
			if(DerivedIntegrationApplicationLocally) 
				if(PayablesInvoice.MatchInvoice != "Y")
					return DerivedAccountingEntity + DerivedDelimiter + PayablesInvoice.Location
				else	
					return DerivedAccountingEntity + DerivedDelimiter + PurchaseOrder.ShipToLocation
			else
				return ""
		
		DerivedLineShipToSchemeAgency is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "IN_PAN"
			else
				return "" 
		
		ShipToschemeAgencyNameIN is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "IN_GST"
			else
				return ""
		
		DerivedCustomerTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplicationLocally and CompanyCustomerRel exists)
				return CompanyCustomerRel.VATRegistrationNumber
			else
				return "" 
		
		ShipToTaxID is a DerivedField
			type is Alpha size 15
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.StateProvinceIDNumber
			else
				return ""				
		
		DerivedInventoryLocation is a DerivedField
			type is Alpha size 40
			restricted
			if(PayablesInvoice.MatchInvoice != "Y")
				return PayablesInvoice.Location
			else	
				return PurchaseOrder.ShipToLocation
				
		ShipToName is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.Name
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.Name
			else
				return ""
				
		ShipToPartyLocationID is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ShipToPartyID
			else
			if(DerivedIntegrationApplicationLocally)
				if(PayablesInvoice.MatchInvoice != "Y")
					return DerivedAccountingEntity + DerivedDelimiter + PayablesInvoice.Location
				else	
					return DerivedAccountingEntity + DerivedDelimiter + PurchaseOrder.ShipToLocation
			else
				return ""
		
		ShipToAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.DeliveryAddress.AddressLine1
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.DeliveryAddress.AddressLine1
			else
				return ""
		
		ShipToAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.DeliveryAddress.AddressLine2
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.DeliveryAddress.AddressLine2
			else
				return ""
		
		ShipToAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.DeliveryAddress.AddressLine3
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.DeliveryAddress.AddressLine3
			else
				return ""						
		
		ShipToAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.DeliveryAddress.AddressLine4
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.DeliveryAddress.AddressLine4
			else
				return ""
		
		ShipToMunicipality is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.Municipality
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.Municipality
			else
				return ""
				
		ShipToCountry is a DerivedField
			type is Alpha size 3
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.Country
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.Country
			else
				return ""
				
		ShipToStateProvince is a DerivedField
			type is Alpha size 3
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.StateProvince
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.StateProvince
			else
				return ""
		
		ShipToPostalCode is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.ProcessLevel.PostalAddress.PostalCode
			else
			if(DerivedIntegrationApplicationLocally and BODInventoryLocationRel exists)
				return BODInventoryLocationRel.PostalAddress.PostalCode
			else
				return ""
				

		DerivedShipFromID is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if (PayablesInvoice.PurchaseFromLocation entered)
					return Vendor.VendorGroup + DerivedDelimiter + Vendor using "%d"+ DerivedDelimiter + PayablesInvoice.PurchaseFromLocation
				else
					return Vendor.VendorGroup + DerivedDelimiter + Vendor using "%d"
			else
			if(DerivedIntegrationApplicationLocally)
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + Vendor.VendorGroup + DerivedDelimiter + Vendor using "%d"
			else
				return ""
		
		DerivedShipFromLocationID is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if (PayablesInvoice.PurchaseFromLocation entered)
					return Vendor.VendorGroup + DerivedDelimiter + Vendor using "%d"+ DerivedDelimiter + PayablesInvoice.PurchaseFromLocation
				else
					return Vendor.VendorGroup + DerivedDelimiter + Vendor using "%d"
			else
				return ""
		
		DerivedShipFromLocation is a DerivedField
			type is Alpha size 60
			restricted
			if(PayablesInvoice.MatchInvoice = "Y")
				return PayablesInvoice.PurchaseFromLocation.VendorLocation
			else
				return PayablesInvoice.RemitToCode
				
		ShipFromTaxID is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and BODVendorLocationRel exists)
				return BODVendorLocationRel.VATRegistrationNumber
			else
				return ""
		
		DerivedVendorName is a DerivedField
			type is Alpha size 120
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Vendor.VendorName
			else
				return ""
				
		ShipFromAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine1
			else
				return ""
		
		ShipFromAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine2
			else
				return ""
		
		ShipFromAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				return  Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine3
			else
				return ""						
		
		ShipFromAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				return  Vendor.CurrentAddressRel.PostalAddress.DeliveryAddress.AddressLine4
			else
				return ""
		
		ShipFromMunicipality is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally)
				return  Vendor.CurrentAddressRel.PostalAddress.Municipality
			else
				return ""
				
		ShipFromCountry is a DerivedField
			type is Alpha size 3
			restricted
			if(DerivedIntegrationApplicationLocally)
				return  Vendor.CurrentAddressRel.PostalAddress.Country
			else
				return ""
				
		ShipFromStateProvince is a DerivedField
			type is Alpha size 3
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Vendor.CurrentAddressRel.PostalAddress.StateProvince
			else
				return ""
		
		ShipFromPostalCode is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplicationLocally)
				return  Vendor.CurrentAddressRel.PostalAddress.PostalCode
			else
				return ""
		
		DerivedEAMManufacturing is a DerivedField
			type is Alpha size 1
			restricted
			if(DerivedSIIncludeUDF)
				return EAMManufacturing
			else
				return ""

		DerivedEAMProjectType is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedSIIncludeUDF)
				return EAMProjectType
			else
				return ""

		DerivedEAMCommodityCode is a DerivedField
			type is Alpha size 15
			restricted
			if(DerivedSIIncludeUDF)
				return EAMCommodityCode
			else
				return ""

		DerivedEAMProjectTaxCode is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedSIIncludeUDF)
				return EAMProjectTaxCode
			else
				return ""

		DerivedLocallyLineDescription is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.Description
			else
				return ""
		
		DerivedLocallyUAITCAppliesValue is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "1"
			else
				return ""
		
		DerivedStockUOM is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ""
			else
				return ""

		DerivedTotalAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return TotalDistributionAmount
			else
				return 0

		DerivedExtendedBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedTotalAmount * PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0

		DerivedExtendedReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedTotalAmount * PayablesInvoice.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			else
				return TotalDistributionAmount

		DerivedServiceIndicator is a DerivedField
			type is Alpha size 22
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and PayablesInvoice.ServiceContract entered)
				if (ItemType.Special)
					return "1"
				else
					return "0"
			else
				if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
					if (ItemType.Service)
						return "1"
					else
						return "0"
				else
					return ""

		DerivedSACCodeValue is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(ItemType.Service and HSNSACCode entered)
					return HSNSACCode
				else
					return ""
			else
				return ""

		DerivedHSNCodeValue is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				if(!ItemType.Service and HSNSACCode entered)
					return HSNSACCode
				else
					return ""
			else
				return ""

		DerivedLIneQuantity is a DerivedField
			type is like Quantity
			restricted
			if(PayablesInvoice.InvoiceType.CreditMemo)
				return 1
			else
				return MatchedQuantity
		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedConfigFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsMultipleFEG"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
		DerivedReferenceType is a DerivedField
			type is Alpha size 30
			restricted
			if(EAMWorkOrder entered)
				return "MaintenanceOrder"
			else
				return ""
		DerivedDummyUnitOfMeasure is a DerivedField
			type is AlphaUpper size 4
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return "EA"
			else
				return ""	
		DerivedReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return EnteredUnitCost * DerivedExtendedReportcurrRate
			else
				return 0	
		DerivedLineExtendedBaseAmount  is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedExtendedAmount * PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0
		DerivedLineExtendedReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedExtendedAmount * DerivedExtendedReportcurrRate
			else
				return 0
		DerivedTotalLineAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return PayablesInvoice.InvoiceAmount.CurrencyAmount
			else
				return 0
		DerivedTotalBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedTotalLineAmount * PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0
		DerivedTotalReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return DerivedTotalLineAmount * DerivedExtendedReportcurrRate
			else
				return 0
		DerivedUnmatchedCostLineTypeName is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedUnmatchedCostLineType entered)
				return "eam.UnmatchedCostLineType"
			else
				return "UnmatchedCostLineType"



		SupplierInvoiceDetailDistributionXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (first DetailInvoiceDistributionsRel exist)
				for each DetailInvoiceDistributionsRel
					if(each.TaxCode not entered and each.AddOnCharge not entered and DerivedIntegrationApplication != "Local.ly")
						SupplierInvoiceDetailDistributionXMLBOD += template.IONSupplierInvoiceDetailDistributionXML_ST document for each
					else
						if(each.TaxCode not entered and each.AddOnCharge not entered and each.PurchasingContract = PayablesInvoice.ServiceContract and DerivedIntegrationApplicationLocally)
							SupplierInvoiceDetailDistributionXMLBOD += template.IONSupplierInvoiceDetailDistributionXML_ST document for each
						else
							if(each.TaxCode not entered and each.AddOnCharge not entered and DerivedIntegrationApplicationLocally and each.DistributionType = "D")
								SupplierInvoiceDetailDistributionXMLBOD += template.IONSupplierInvoiceDetailDistributionXML_ST document for each
				return SupplierInvoiceDetailDistributionXMLBOD
			else
				return ""


		SupplierInvoiceDetailTaxXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			display "testentered4235:<instance count of DetailInvoiceDistributionsRel>"
			if (first DetailInvoiceDistributionsRel exist)
				initialize LocalLineTaxCount
				for each DetailInvoiceDistributionsRel
					if(each.TaxCode entered and DerivedIntegrationApplication != "Local.ly")
						LocalLineTaxCount +=1
						each.LineTaxSequenceCount		    =  LocalLineTaxCount
						LocalUnmatchedCostLineTaxableAmount = each.TaxableAmount
						LocalUnmatchedCostLineTaxAmount	= each.DistributionAmount.CurrencyAmount
						SupplierInvoiceDetailTaxXMLBOD += template.IONSupplierInvoiceDetailTaxXML_ST document for each
					else
						if(each.TaxCode entered and DerivedIntegrationApplicationLocally and each.PurchasingContract = PayablesInvoice.ServiceContract)
							LocalLineTaxCount +=1
							each.LineTaxSequenceCount		    =  LocalLineTaxCount
							SupplierInvoiceDetailTaxXMLBOD += template.IONSupplierInvoiceDetailTaxXML_ST document for each
						else	
							if(each.TaxCode entered and DerivedIntegrationApplicationLocally and each.DistributionType = "D")
								LocalLineTaxCount +=1
								each.LineTaxSequenceCount		    =  LocalLineTaxCount
								LocalUnmatchedCostLineTaxableAmount = each.TaxableAmount
								LocalUnmatchedCostLineTaxAmount	= each.DistributionAmount.CurrencyAmount
								SupplierInvoiceDetailTaxXMLBOD += template.IONSupplierInvoiceDetailTaxXML_ST document for each
				return SupplierInvoiceDetailTaxXMLBOD
			else
				return ""


		SupplierInvoiceAOCAllowanceXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (PayablesInvoiceAddOnChargesRel exist)
				for each PayablesInvoiceAddOnChargesRel
					SupplierInvoiceAOCAllowanceXMLBOD += template.IONSupplierInvoiceAOCAllowanceXML_ST document for each
				return SupplierInvoiceAOCAllowanceXMLBOD
			else
				return ""


		SupplierInvoiceDetailAOCXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (PayablesInvoiceAddOnChargesRel exist)
				for each PayablesInvoiceAddOnChargesRel
					SupplierInvoiceDetailAOCXMLBOD += template.IONSupplierInvoiceDetailAOCXML_ST document for each
				return SupplierInvoiceDetailAOCXMLBOD
			else
				return ""


		DerivedCommodityCodeNoDash is a StringField
			type is like CommCodes
			CommodityCode.CommodityCode.Segment[1]
			CommodityCode.CommodityCode.Segment[2]
			CommodityCode.CommodityCode.Segment[3]
			CommodityCode.CommodityCode.Segment[4]
			CommodityCode.CommodityCode.Segment[5]


		DerivedQuantityDifference is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return DerivedReceiptQuantity - DerivedChargebackInvoiceQuantity















		DerivedOriginalCost	is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			if (HasContract)
				return ContractLine.BaseCost
			else
			if (first PurchaseOrderReceiptInvoiceLinkMNRRel exists
			and first PurchaseOrderReceiptInvoiceLinkMNRRel.PoCostUpd entered)
				return first PurchaseOrderReceiptInvoiceLinkMNRRel.PoCostUpd
			else 
				return PurchaseOrderLine.EnteredUnitCost



		DerivedInvoicedUnitCost is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			if (HasContract)
                return ChargebackSourceContractInvoiceDetailRel.MatchUnitCost  
                return ContractLine.CurrentNetCost			
			else
			if (ChargebackSourceInvoiceDetailRel exists)
				return first ChargebackSourceInvoiceDetailRel.MatchUnitCost
			else
				return PurchaseOrderLine.EnteredUnitCost



		DerivedCostDifference is a DerivedField
			type is like InternationalAmount
				precision is DerivedNumberOfDecimalsCost
			return (DerivedOriginalCost - DerivedInvoicedUnitCost)








		DerivedTaxRate is a DerivedField
			type is like ChrgRate
				precision is 2
			if (EntityTaxCodeRel.AccruedOrInvoiced.Invoiced
			or  PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Invoiced)
				return first ChargebackTaxRateRel.Rate

		DerivedChargebackExtendedAmount is a DerivedField
			type is like InternationalAmount
			return EnteredUnitCost * EnteredQuantity

		DerivedEnteredQuantityWithDecimals is a DerivedField
			type is like Quantity
			return EnteredQuantity

		DerivedMatchedQuantityWithDecimals is a DerivedField
			type is like Quantity
			return MatchedQuantity

		DerivedVendorItemDescription is a DerivedField
			type is Alpha 35
			return VendorItem.VendorItemDescription

		DerivedInvoicedTypeTaxCode is a DerivedField
			type is like TaxCode
			if (HasContract)
				return ContractLine.TaxCode
			else
			if (IsInvoicedTaxCode)
				return TaxCode

		DerivedReceiptQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (not LocalReceiptQuantityComputed)
				initialize LocalReceiptQuantity
				if (HasContract)
					LocalReceiptQuantity = ContractLine.QuantityOrdered
				else
				if (ItemType.Service)
					LocalReceiptQuantity = PurchaseOrderLine.Quantity
				else				
				if (OtherDetailsCreatedFromReceiptRel exists) 
					for each PurchaseOrderReceiptLineByMatchObjectIDRel
						if (each.PurchaseOrderReceipt = PurchaseOrderReceipt) 
							LocalReceiptQuantity += each.VendorPriceUOMQuantity
				else 
					for each PurchaseOrderReceiptLineByMatchObjectIDRel
						LocalReceiptQuantity += each.VendorPriceUOMQuantity
				LocalReceiptQuantityComputed = true
			return LocalReceiptQuantity

		DerivedChargebackInvoiceQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (HasContract) 
				return ChargebackSourceContractInvoiceDetailRel.MatchedQuantity
				return ContractLine.QuantityOrdered
			else
			if (ChargebackSourceInvoiceDetailRel exists) 
				return first ChargebackSourceInvoiceDetailRel.MatchedQuantity
			else 
				return PurchaseOrderLine.MatchedQuantity

		DerivedFirstInvoiceDetailWithQuantityDifference is a DerivedField
			type is like PayablesInvoiceDetail
			return last ChargebackInvoiceDetailsForPOLineRel.PayablesInvoiceDetail - 1

		DerivedSecondInvoiceDetailWithQuantityDifference is a DerivedField
			type is like PayablesInvoiceDetail
			return last ChargebackInvoiceDetailsForPOLineRel.PayablesInvoiceDetail - 2



		DerivedTenantID is a DerivedField
			type is Alpha size 60
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
		POCostMsgPulseAlertDescription is a DerivedField
			type is Alpha size 100
			restricted
			return "PO " + PurchaseOrder + " has cost message for your review"

		DerivedPulseAlertBODID is a DerivedField
			type is Alpha size 100
			restricted
			return "infor-nid:" + DerivedTenantID +":"+Company.FinanceEnterpriseGroup +":"+ PurchaseOrder +":"+ "?POCostMsgALert&verb=Process"

		POCostMsgPulseAlertXML is a DerivedField
			type is XMLDocument
			restricted
			POCostMsgPulseAlertXML = template.IONPOCostMsgAlert_PayablesInvoiceDetail_ST document for this instance
			return POCostMsgPulseAlertXML



		
		DerivedPOLine is a DerivedField
			type is Numeric size 6
			restricted
			return PurchaseOrderLine.LineNumber
		
		DerivedLine is a DerivedField
			type is Numeric size 6
			restricted
			if (ContractLine not entered)
				return DerivedPOLine
			else
				return ContractLine
		
		DerivedInvCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted		
			return PayablesInvoice.InvoiceCurrency	
		
		DerivedAlternateCurr is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.AccountingEntity.AlternateCurrency
		
		DerivedExtendedReportcurrRate is a DerivedField
			type is Decimal size 31.15
			restricted
			return PayablesInvoice.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
		
		DerivedExtendedReportAmt is a DerivedField
			type is like InternationalAmount
			restricted
			return TotalDistributionAmount * DerivedExtendedReportcurrRate
		
		DerivedPIDItem is a DerivedField
			type is Alpha 32
			restricted
			if(ItemType != "X" or ItemType != "S")
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + BODItemGroup + DerivedDelimiter + Item
			else
				return Item

		ContractTotalDetailAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum OtherSameContractRel.DerivedExtendedAmount) 

		DerivedSplitLineUnitCost is a DerivedField
			type is like InternationalCost
			restricted
			if (PurchaseOrderLine.ServiceCode.Amount)
				return EnteredUnitCost - PurchaseOrderLine.OpenToMatchAmount
			else					
				return EnteredUnitCost

		DerivedSplitLineQuantity is a DerivedField
			type is like InternationalCost
			restricted
			if (!PurchaseOrderLine.ServiceCode.Amount)
				return EnteredQuantity - PurchaseOrderLine.OpenToMatchQuantity
			else					
				return 1


		DerivedWidgetSelectedInvoiceType is a DerivedField
			type is Boolean 
			if(IsSelectedInvoiceType = true)
				return true
			else		
				return false
				
		DerivedWidgetWithinCompanyGroupFilter is a DerivedField
			type is Boolean 
			if(WithinCompanyGroupFilter = true)
				return true
			else		
				return false
				
		DerivedWidgetWithinDueDateRange is a DerivedField
			type is Boolean 
			if(WithinDueDateRange = true)
				return true
			else		
				return false
				
		DerivedAccount is a DerivedField
			type is Alpha size 100
            if (ItemType.Inventoried)
                if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
                    return PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
                else
                    return Company.ReceiptAccrualAccount
            else
                return first DetailInvoiceDistributionsRel.DistributionAccount
 
		SingleSpace is a StringField
			type is Alpha 1
			restricted
			" "

		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"MA:"
			PayablesInvoice.Invoice 
			":"
			CurrentTimestamp

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp


		DerivedQuantityUOM is a DerivedField
			type is Alpha size 50
			return "Quantity: " + EnteredQuantity + " | " +"UOM: " + EnteredUOM
		
		DerivedUnitCostDistAmt is a DerivedField
			type is Alpha size 60
			return "Unit Cost: "+ EnteredUnitCost + " | " +"Total Distribution: "+ TotalDistributionAmount
		
		DerivedItemDesc is a DerivedField
			type is Alpha size up to 100
			return VendorItem + " - " + ItemDescription

				

	Conditions
		IsValidForActorContext
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		PurchaseOrderLineEntered
			restricted
			when (PurchaseOrderLine entered)

		ContractLineEntered
			when (ContractLine entered)

		HasContractCostDifference 
			restricted 
			when (InvoiceTypeIsInvoice
			and   ContractLineEntered
			and  !ContractLine.ServiceCode.Amount
			and   ContractLine.LineNotClosed
			and   Contract.RemoveFromCostDifferenceList = false 
			and   ContractCostDifference != 0)
		
		HasContractCostDifferenceAndLineStatusMatched 
			restricted 
			when (LineStatusIsMatched
			and	  HasContractCostDifference)

		HasLastMatchCost 
			restricted 
			when ((PurchaseOrderLine entered
			and	   PurchaseOrderLine.LastMatchUnitCost entered)
			or    (ContractLine entered
			and    ContractLine.CurrentNetCost != ContractLine.BaseCost))

		InvoiceHasChargeback 
			restricted 
			when (PayablesInvoice.HasChargebacks)	

		InvoiceTypeIsInvoice 
			restricted 
			when (InvoiceType.Invoice)
		
		HasContract
			classic name is HAS-AGRMT
			when (ContractLine entered
			and   PurchaseOrderLine not entered)

		MiscellaneousDetail
			when (PurchaseOrderLine not entered
			and   ContractLine not entered)

		HasINRQuantity
			restricted
			when (DerivedINRQuantity != 0)

		IsAccruedTax
			restricted
			when (TaxCode entered
			and ((PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
					and EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
				or (!PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
					and PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Accrued)))

		IsInvoicedTaxCode
			restricted
			when (TaxCode entered
			and  ((PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
			or		(!PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Invoiced)))

		LocalIsInvoicedTaxCode
			restricted
			when (LocalTaxCode entered
			and  ((PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    LocalEntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
			or		(!PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Invoiced)))

		ItemRecordExists
			classic name is ITEMMAST
			when (ItemType.Inventoried
			or    ItemType.NonStock)

		InventoryTypeExists								
			when (ItemType.Inventoried)

		PayablesInvoiceMessageExists
			classic name is MAINVMSG-EXIST
			when (first MatchInvoiceMessageRel exists)

		LineStatusIsMatched
			classic name is MATCHED
			when (Status.Released)

		IsMatched
			when (MatchObjectID entered)

		LineHasRetainage
			classic name is RETAINAGE-INV
			when (RetainagePercent entered)

		InventoriedOrNonstock
			restricted
			when (ItemType.Inventoried
			or    ItemType.NonStock)
		
		ItemOnContract
			when (ItemOnContractRel exists)

		FromInvoiceOrNotInvoicedNonService
			restricted
			when (RecordSource.Invoice
			or   (!RecordSource.Invoice
			and   !ItemType.Service))

		DistributionsInBalance
			when (SumOfDistributions = 0
			or    TotalDistributionAmount = SumOfDistributions)

		DisplayContractMaxExceededAlert
			when (Status.Unreleased
			and   ContractMaxExceeded)

		ContractMaxExceeded
			when (PayablesInvoice.MatchProcessType.ServiceContract
			and  (ContractLine.ServiceCode.Quantity
			and  (EnteredUnitCost > ContractLine.BaseCost
			or    EnteredQuantity > ContractLine.LifetimeMaximumQuantity - ContractLine.QuantityOrdered
			or    EnteredUnitCost * EnteredQuantity > (ContractLine.BaseCost * (ContractLine.LifetimeMaximumQuantity - ContractLine.QuantityOrdered))))
			or   (ContractLine.ServiceCode.Amount
			and   EnteredUnitCost * EnteredQuantity > (ContractLine.BaseCost - ContractLine.AmountOrdered)))

		MatchInvoiceReferenceInContext
			when (MatchInvoiceReference in context)

		AllowQuantityAdjustment
			when ((MatchInvoiceReferenceInContext
			or     PayablesInvoice.MatchProcessType.ServiceContract)
			and   !PayablesInvoice.CreditOrDebitMemo
			and   !MemoQuantityDetailRel exists
			and   !PurchaseOrderLine.ServiceCode.Amount
			and   !ContractLine.ServiceCode.Amount)

		AllowCostAdjustment
			when ((MatchInvoiceReferenceInContext
			or     PayablesInvoice.MatchProcessType.ServiceContract)
			and   !PayablesInvoice.CreditOrDebitMemo
			and   !MemoCostDetailRel exists)

		CreditForRebill
			restricted
			when (PayablesInvoice.InvoiceType.CreditMemo
			and   PayablesInvoice.InvoiceSource = "Y" 
			and   PayablesInvoice.MatchInvoiceReferenceRel exists)

		AllowCreditForRebill
			when ((MatchInvoiceReferenceInContext
				or PayablesInvoice.MatchProcessType.ServiceContract)
			and   !PayablesInvoice.CreditOrDebitMemo
			and   !MemoQuantityDetailRel exists
			and   !MemoCostDetailRel exists)

		CostAdjustment
			when (MemoAdjustType.CostAdjustment
			or   (MemoAdjustType not entered
			and   PayablesInvoice.CreditOrDebitMemo
			and   PayablesInvoiceDetail = 1
			and   PayablesInvoice.Suffix != 888
			and   PayablesInvoice.Suffix != 999))

		QuantityAdjustment
			when (MemoAdjustType.QuantityAdjustment
			or   (MemoAdjustType not entered
			and   PayablesInvoice.CreditOrDebitMemo
			and   PayablesInvoiceDetail = 2
			and   PayablesInvoice.Suffix != 888
			and   PayablesInvoice.Suffix != 999))

		LinkedToAsset
			when (PurchaseOrderLine.PurchaseOrderLineAssetRel exists)

		CreateAssetDetailsValid
			when (PurchaseOrderLineAssetRel exists
			and   PurchaseOrderLineAssetDetailRel not exists)








		IsGroupByItem
			when (IsItemHistoryByVendorGroupByItemHeaderRel not exists)

		IsGroupByItemVendor
			when (IsItemHistoryByVendorGroupByItemVendorHeaderRel not exists)

		IsSupplyManagementReportItemVendorValid
			when ((SupplyManagementReportContext.Item not entered
				or Item = SupplyManagementReportContext.Item)
			and	  (SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor not entered
				or Vendor = SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor))

		PayablesInvoiceDetailTotalsRelExists
			when (PayablesInvoiceDetailTotalsRel exists)

		CommodityCodeEntered
			when (CommodityCode entered)

		AllReceiptsInvoicedPerItem
			when (DerivedTotalRNIAmountPerItem = 0)

		AllReceiptsInvoicedPerVendor
			when (DerivedTotalRNIAmountPerVendor = 0)


		IsGroupByCommodity
			when (IsCommoditySpendByDiversityCodeGroupByCommCodeHeaderRel not exists)

		IsGroupByCommodityCodeDiversityCode
			when (IsCommoditySpendByDiversityCodeGroupByCommCodeDivCodeHeaderRel not exists)

		IsSupplyManagementReportCommodityCodeValid
			when	(SupplyManagementReportContext.CommodityCode not entered
			or		CommodityCode = SupplyManagementReportContext.CommodityCode)

		IsSupplyManagementReportCommodityCodeVendorValid
			when	((SupplyManagementReportContext.CommodityCode not entered
			or		CommodityCode = SupplyManagementReportContext.CommodityCode)
			and		(SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor not entered
			or		Vendor = SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor))

		CopyPOLineDistributionsValid
			when  (PurchaseOrderLine entered
			and    PayablesInvoice.IsUpdateable
			and   !ItemType.Inventoried)

		CopyContractLineDistributionsValid
			when  (ContractLine entered
			and    PayablesInvoice.IsUpdateable
			and   !ItemType.Inventoried)

		IsSelectedInvoiceType
			restricted
			when (SelectedInvoiceType not entered
			or      (SelectedInvoiceType entered
			and     PayablesInvoice.InvoiceType = SelectedInvoiceType))

		WithinDueDateRange
			restricted
			when (DueDateRange not entered
			or	   (DueDateRange entered
			and      PayablesInvoice.DueDate within DueDateRange))

		AllowCreateFromDistributionCode
			when (!ItemType.Inventoried
			and    AllowCreateUpdateDelete
			and   !MiscellaneousDetail)

		WithinCompanyGroupFilter
			restricted
			when (GeneralLedgerCompanyGroup not entered
			or    GLCompanyGroupMemberRel exists)

		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)

		NewCreditMemo
			when (PayablesInvoice.InvoiceType.CreditMemo
			and   PayablesInvoice.Suffix not entered)

		AllowCreateUpdateDelete
			restricted
			when ((PayablesInvoice.IsUpdateable
			or    PayablesInvoice.Status.Amended)
			and   MatchObjectID not entered
			and   !PayablesInvoice.BackgroundProcessing.MatchInvoice)

		RNINonClosedLineRelMessageExists
			when (MatchInvoiceMessageRNINonClosedLineRel exists)

		EnteredGreaterThanReceivedQuantity
			when (PurchaseOrderReceiptLine entered
			and   EnteredUOM = PurchaseOrderReceiptLine.ReceivedUOM
			and   EnteredQuantity > PurchaseOrderReceiptLine.OpenToMatchQuantity)

		ShowQuantityAlert
			when ((!IsMatched
			and    !IsCatchWeight
			and    EnteredUOM = PurchaseOrderLine.VendorPriceUOM
			and    EnteredQuantity > PurchaseOrderLine.DerivedOpenToPayablesInvoiceQuantity)
			or     ServiceLineExceedsPOLineQuantity)
			
		ShowEnteredGreaterThanReceivedQuantity
			when (!IsMatched
			and   !ItemType.Service
			and   EnteredGreaterThanReceivedQuantity)

		TaxEntityUsesThirdPartyTax
			when (PayablesInvoice.TaxEntityUsesThirdPartyTax)

		ServiceLineExceedsPOLineAmount
			when (ItemType.Service
			and   MatchObjectID not entered
			and   PurchaseOrderLine entered
			and   PurchaseOrderLine.ServiceCode.Amount
			and   EnteredUnitCost > (PurchaseOrderLine.EnteredUnitCost - (PurchaseOrderLine.MatchedAmount + PurchaseOrderLine.ServiceCancelAmount)))

		ServiceLineExceedsPOLineQuantity
			when (ItemType.Service
			and   MatchObjectID not entered
			and   PurchaseOrderLine entered
			and   PurchaseOrderLine.ServiceCode.Quantity
			and   EnteredQuantity > (PurchaseOrderLine.QuantityToProcess - PurchaseOrderLine.MatchedQuantity))

		ServiceLineExceedsContractLineAmount
			when (ItemType.Service
			and   MatchObjectID not entered
			and   ContractLine entered
			and   ContractLine.ServiceCode.Amount
			and   EnteredUnitCost > ContractLine.DerivedRemainingAmountInUse)

		ServiceLineExceedsContractLineQuantity
			when (ItemType.Service
			and   MatchObjectID not entered
			and   ContractLine entered
			and   ContractLine.ServiceCode.Quantity
			and   EnteredQuantity > ContractLine.DerivedRemainingQuantityOrdered)

		AssetDetailsInBalance
			restricted
			when (PurchaseOrderLine.PurchaseOrderLineAssetRel.DerivedTotalAssetDetails = 0
			or	  PurchaseOrderLine.PurchaseOrderLineAssetRel.DerivedTotalAssetDetails = PurchaseOrderLine.PurchaseOrderLineAssetRel.DerivedStockReceivedQuantity)

		ServiceByQuantity
			when (ItemType.Service
			and  ((PayablesInvoice.MatchProcessType.ServiceContract
					and ContractLine.ServiceCode.Quantity)
				or (!PayablesInvoice.MatchProcessType.ServiceContract
					and PurchaseOrderLine.ServiceCode.Quantity)))

		ServiceByAmount
			when (ItemType.Service
			and  ((PayablesInvoice.MatchProcessType.ServiceContract
					and ContractLine.ServiceCode.Amount)
				or (!PayablesInvoice.MatchProcessType.ServiceContract
					and PurchaseOrderLine.ServiceCode.Amount)))

		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		ShowMemoAddOnChargePanel
			when (!PayablesInvoice.MatchProcessType.ServiceContract
			and (PayablesInvoice.InvoiceType.DebitMemo
				or PayablesInvoice.InvoiceType.CreditMemo))

		ShowOneSourceAttributesPanel		
			when (TaxEntityRel.ThirdParty.Sabrix
			and   OneSourceUserAttributesRel exists)

		ShowTaxLineItemPanel		
			when (TaxEntityRel.ThirdParty.Sabrix
			and   TaxLineItemRel2 exists)

		ShowTaxLineItemPanelOneCall		
			when (TaxEntityRel.ThirdParty.Sabrix
			and   OneCallTaxLineItemRel2 exists)

		IsCatchWeight
			when (Item.CatchWeightCode.AllTransactionsRequireBoth
			or 	  Item.CatchWeightCode.ReceiptRequiresBoth)			

		AllowReleaseOnlyMatchInvoice
			when (AllowReleaseOnlyMatchInvoiceRel exists
			and   AllowReleaseOnlyMatchInvoiceRel.Value = "YES")

		AllowSplitLine
			when (AllowReleaseOnlyMatchInvoiceRel exists
			and   AllowReleaseOnlyMatchInvoiceRel.Value = "YES"
			and   PayablesInvoice.IsNotMatched
			and  (PayablesInvoice.Status.Released
			or   PayablesInvoice.Status.Amended)
			and   !PayablesInvoice.MatchProcessType.Expense)

		MatchOneCallPerInvoice
			when (MatchOneCallPerInvoiceRel exists
			and   MatchOneCallPerInvoiceRel.Value = "YES")

		PostedDistributionsExist
			when (first PostedDistributionsRel exists)	
		
		AllowSetChargeback
			when (PayablesInvoice.MatchProcessType.ServiceContract
			and   PayablesInvoice.MatchReconQueueRel exists
			and  !FinanceResource.RestrictChargebacks) 

		AllowOverrideOneSourceTaxAmount
		    when (TaxConfigurationRel.OneSourceVersionType.Generic
		    and   PayablesInvoiceDetailTaxRel exists
		    and   PayablesInvoice.IsNotMatched)
		    
		OneSourceGeneric
			when (TaxEntityRel.ThirdParty.Sabrix
			and   PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)

		Reviewed
			when (ReconDetailRel exists
			and   ReconDetailRel.SortSelect entered)

		NotReviewed
			when (ReconDetailRel not exists
			or    ReconDetailRel.SortSelect not entered)

		DisplayOnlyCommodityCode 
			when (ItemType.Inventoried
			and   Item.CommodityCode entered)

		SupplierHasReceipt 
			restricted 
			when (PurchaseOrderReceiptLineSupplierRel exists)
		
		HasReceiptComments
			when (PurchaseOrderReceiptCommentRel exists
			or    PurchaseOrderReceiptLineCommentRel exists)

		TaxOverridden 
			when (OneSourceGeneric 
			and   TaxAmount != PayablesInvoiceDetailTaxRel.CalculatedTaxAmount)	

		TaxToleranceApplied 
			when (OneSourceGeneric 
			and   TaxAmount != SumOfTaxDistributions 
			and   AccruedTaxAmount != SumOfTaxDistributions)	

        IsSubstitute
            when (PurchaseOrderReceiptLine entered 
			and   PurchaseOrderLine != PurchaseOrderReceiptLine)
			
		MyContract
			default label is "MyContracts"
			when (PrimaryContactRel.Contact = actor.agent(Employee).Employee)

		ThirdPartyTaxHasBeenCalculated 
			when (PayablesInvoiceDetailTaxRel exists)

	Relations
		ItemHistoryReportVendorRel
			one-to-one relation to ItemHistoryByVendorReport
			Field Mapping uses symbolic key
				related.ItemGroup							= Company.VendorGroup
				related.SupplyManagementReport 				= LocalSupplyManagementReport
				related.ItemHistoryByVendorReport.ItemType	= ItemType
				related.ItemHistoryByVendorReport.Item		= Item
				related.ItemHistoryByVendorReport.Vendor	= Vendor

		PayablesInvoiceRetainageDistributionRel
			classic name is APDISTPAY
			one-to-many relation to PayablesInvoiceRetainageDistribution
			delete cascades
			Field Mapping uses Set3
				related.Company = Company
			Instance Selection
				where (related.PurchaseOrder = PurchaseOrder
				and   related.PayablesInvoiceRetainageDistribution.PayablesMatchLine = PurchaseOrderLine
				and   related.PayablesInvoiceRetainageDistribution.PayablesInvoice	= PayablesInvoice
				and   related.Vendor = Vendor
				and   related.PayablesInvoiceRetainageDistribution.PayablesInvoice.Invoice = PayablesInvoice.Invoice
				and   related.PayablesInvoiceRetainageDistribution.PayablesInvoice.Suffix = PayablesInvoice.Suffix)

		ContractLineDistributionSpreadByDateRel  
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses BySpreadDate
				related.ContractGroup	= Company.VendorGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.ContractLineDistribution.DistributionAccount = LocalDistributionAccount)

		ContractLineDistributionSpreadRel  
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses BySpreadDate
				related.ContractGroup	= Company.VendorGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
    	ContractLineTaxCodeLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndLocationOnly 
    			related.ContractGroup						= Company.VendorGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= Company
				related.ContractAndLineLocation.Location	= Location
			Instance Selection 
				where (related.TaxCode entered)		

    	ContractTaxCodeLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLocationOnly 
    			related.ContractGroup						= Company.VendorGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= Company
				related.ContractAndLineLocation.Location	= Location
			Instance Selection 
				where (related.TaxCode entered)	

    	ContractLineTaxCodeCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndCompanyOnly 
    			related.ContractGroup						= Company.VendorGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= Company
			Instance Selection 
				where (related.TaxCode entered)		

    	ContractTaxCodeCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByCompanyOnly 
    			related.ContractGroup						= Company.VendorGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= Company
			Instance Selection 
				where (related.TaxCode entered)				









		InventoryCompanyRel
			classic name is ICCOMPANY
			one-to-one relation to InventoryCompany
			required
			Field Mapping uses symbolic key
				related.Company = Company

	   	TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity

		TaxConfigurationRel						
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration		= Company.FinanceEnterpriseGroup

		ContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup      = Company.VendorGroup
				related.Contract     	   = Contract

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "AP"

		POGeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"

 		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

	   	LocalTaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalPayablesCompanyRel.Company.FinanceEnterpriseGroup
				related.TaxEntity 				= LocalPayablesCompanyRel.Company.AccountingEntity

 		LocalTaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= LocalPayablesCompanyRel.Company.FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = LocalTaxEntityRel.TaxAttributeCode

		TaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
			Instance Selection
			    where (related.InvoiceNumber = LocalInvoice
				and    related.RelatedObjectReference 		= reference to this instance)

		TaxLineItemRel2	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
			Instance Selection
			    where (related.InvoiceNumber = Invoice
				and    related.RelatedObjectReference 		= reference to this instance)

		OneCallTaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
			Instance Selection
			    where (related.InvoiceNumber = LocalInvoice
				and    related.RelatedObjectReference 		= reference to this instance)

		OneCallTaxLineItemRel2	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
			Instance Selection
			    where (related.InvoiceNumber = PayablesInvoice.Invoice 
				and    related.RelatedObjectReference 		= reference to this instance)

		LocalAocTaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= LocalPayablesCompanyRel.Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= LocalUniqueID
			Instance Selection
			    where (related.InvoiceNumber = LocalInvoice
				and    related.RelatedObjectReference 		= reference to LocalPayablesAddOnChargeRel.PayablesInvoiceAddOnCharge)

		LocalInvoiceAocTaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= LocalPayablesCompanyRel.Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= LocalUniqueID
			Instance Selection
			    where (related.InvoiceNumber = LocalInvoice)

		OneCallAllLineItemsRel	
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= LocalPayablesCompanyRel.Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= LocalUniqueID
			Instance Selection
			    where (related.InvoiceNumber = LocalInvoice)

		TaxAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			= Company.VendorGroup
				related.PayablesAccrualCode	= LocalAccrualCode
				related.Company				= Company
				
		LocalPayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company				= LocalCompany

		ProcurementGroupRel
			one-to-one relation to ProcurementGroup			
			Field Mapping uses symbolic key
				related.ProcurementGroup			= Vendor.VendorGroup
		LocalTaxAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup			= LocalPayablesCompanyRel.VendorGroup
				related.PayablesAccrualCode	= LocalAccrualCode
				related.Company				= LocalCompany
				
		EAMWorkOrderRel
			one-to-one relation to EAMWorkOrder
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.EAMWorkOrder			= EAMWorkOrder

		EAMWorkOrderActivityRel
			one-to-one relation to EAMWorkOrderActivity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.EAMWorkOrder			= EAMWorkOrder
				related.EAMWorkOrderActivity	= EAMWorkOrderActivity

		ItemLocationRel
			classic name is ITEMLOC
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company				= Company
				related.InventoryLocation	= Location
				related.Item				= Item

		InventoryLocationRel
			classic name is LOCATION
			one-to-one relation to InventoryLocation
			required
			Field Mapping uses symbolic key
				related.Company				= Company
				related.InventoryLocation	= Location

		LocalInventoryLocationRel  
		    one-to-one relation to InventoryLocation
		    Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= LocalInventoryLocation

        ReceiptLineCostAdjustmentsRel
            one-to-many relation to InventoryTransactionLine

			Field Mapping uses ByItem 
				related.Company										= Company
				related.InventoryLocation							= Location
				related.Item 										= Item 
			Instance Selection

				where (related.TransactionSystemCode						= "PO"
				and    related.InventoryTransaction.InventoryDocumentType.CostAdjustment
				and    related.InventoryTransactionLine.WarehouseShipment	= blank
				and    related.InventoryTransactionLine.ComponentSequence	= blank)


		PayablesInvoiceDetailTaxRel
			one-to-one relation to PayablesInvoiceDetailTax
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.Contract			= Contract
				related.ContractLine		= ContractLine
				related.PayablesInvoiceDetail = PayablesInvoiceDetail

		PayablesInvoiceAddOnChargeRel
			classic name is MAAOCDTL
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.Contract			= Contract
				related.ContractLine		= ContractLine

		LandedPayablesInvoiceAddOnChargeRel
			classic name is MAAOCDTL
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.Contract			= Contract
				related.ContractLine		= ContractLine
			Instance Selection 
				where (related.LandedAddOnCharge)

		LocalPayablesAddOnChargeRel
			one-to-one relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 			= LocalCompany
				related.PayablesInvoice		= LocalPayablesInvoice
				related.PurchaseOrder		= LocalPurchaseOrder
				related.PurchaseOrderLine	= LocalPurchaseOrderLineNumber
				related.Contract			= LocalContract
				related.ContractLine		= LocalContractLine
				related.AddOnCharge			= LocalAddOnCharge
				related.PayablesInvoiceAddOnCharge = LocalPayablesInvoiceAddOnCharge

		LocalPayablesInvoiceAddOnChargeTaxRel
			one-to-one relation to PayablesInvoiceAddOnChargeTax
			Field Mapping uses symbolic key
				related.Company 			= LocalCompany
				related.PayablesInvoice		= LocalPayablesInvoice
				related.PurchaseOrder		= LocalPurchaseOrder
				related.PurchaseOrderLine	= LocalPurchaseOrderLineNumber
				related.Contract			= LocalContract
				related.ContractLine		= LocalContractLine
				related.AddOnCharge			= LocalAddOnCharge
				related.PayablesInvoiceAddOnCharge = LocalPayablesInvoiceAddOnCharge

		MatchInvoiceMessageRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set1
				related.Company 				= Company
				related.Vendor  				= Vendor
				related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
	 			related.Contract					= Contract
	 			related.ContractLine				= ContractLine
				related.PayablesInvoiceDetail	= PayablesInvoiceDetail

		POCostMatchInvoiceMessagesRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set1
				related.Company 				= Company
				related.Vendor  				= Vendor
				related.PayablesInvoice			= PayablesInvoice
	 			related.PurchaseOrder			= PurchaseOrder
	 			related.PurchaseOrderLine		= PurchaseOrderLine
	 			related.Contract				= Contract
	 			related.ContractLine			= ContractLine
				related.PayablesInvoiceDetail	= PayablesInvoiceDetail
			Instance Selection
				where (related.MatchMessageOrigin.PoCost)

		MatchPurchaseOrderInvoiceRel
			classic name is MAPOINV
			one-to-one relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
				related.PayablesInvoice	= PayablesInvoice
				related.Vendor			= PayablesInvoice.Vendor

		MatchServiceContractInvoiceRel
			one-to-one relation to MatchServiceContractInvoice
			Field Mapping uses symbolic key 
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
				related.Contract 		= Contract 
		PayablesAuthorityCodeDetailRel
			one-to-one relation to PayablesAuthorityCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.PayablesAuthorityCode	= first PayablesAuthorizedBuyerRel.AuthorityCode
				related.Company					= Company

		InvoiceDetailDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoiceDetail = PayablesInvoiceDetail
				and    related.NotMatchCreated)

		InvoiceDistributionsForMiscellaneousDetailRel
			one-to-many relation to PayablesInvoiceDistribution
			valid when (MiscellaneousDetail)
			Field Mapping uses ByPayablesInvoiceSuffixPOLine
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
				related.Suffix                          = blank
				related.PurchaseOrder                   = blank
				related.PurchaseOrderLine               = blank
			Instance Selection
				where  (related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										= blank
				and     related.NotMatchCreated)

		TaxDistributionsForMiscellaneousDetailRel  
			one-to-many relation to PayablesInvoiceDistribution
			valid when (PurchaseOrderLineEntered)
			Field Mapping uses ByPayablesInvoiceSuffixPOLine
				related.Company												= Company
				related.Vendor							= Vendor
				related.PayablesInvoice										= PayablesInvoice
				related.Suffix                          = blank
				related.PurchaseOrder                   = blank
				related.PurchaseOrderLine               = blank
			Instance Selection
				where  (related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										= LocalTaxCode
				and     related.NotMatchCreated)

		InvoiceDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			valid when (PurchaseOrderLineEntered)
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										= blank
				and     related.NotMatchCreated)

		TaxDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			valid when (PurchaseOrderLineEntered)
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrder			= PurchaseOrder
				and    related.PurchaseOrderLine		= PurchaseOrderLine
				and    related.PayablesInvoiceDetail	= PayablesInvoiceDetail
				and    related.AddOnCharge 				= blank
				and    related.TaxCode					= LocalTaxCode
				and    related.NotMatchCreated)

		InvoiceDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			valid when (ContractLineEntered)
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.PurchasingContract		= Contract
				and    related.ContractLine				= ContractLine
				and    related.PayablesInvoiceDetail	= PayablesInvoiceDetail
				and    related.AddOnCharge 				= blank
				and    related.TaxCode					= blank)


		TaxDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			valid when (ContractLineEntered)
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.PurchasingContract		= Contract
				and    related.ContractLine				= ContractLine
				and    related.PayablesInvoiceDetail	= PayablesInvoiceDetail
				and    related.AddOnCharge				= blank
				and    related.TaxCode					= LocalTaxCode)


		TaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.AddOnCharge 								= blank
				and     related.TaxCode entered)

		AccruedTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.AddOnCharge 								= blank
				and     related.TaxCode entered 
				and     related.TaxType.Accrued)

		InvoicedTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.AddOnCharge 								= blank
				and     related.TaxCode entered 
				and     related.TaxType.Invoiced)
		PurchaseOrderReceiptInvoiceLinkLastCostRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
				related.Company                 									= Company
				related.PurchaseOrder  												= PurchaseOrder
				related.PurchaseOrderLine											= PurchaseOrderLine
			Instance Selection
				where  (related.Status.Released
				and    (related.Type			= "PO"
				or      related.Type			= "CS"))

		ServiceContractLastCostRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
				related.Company                 									= Company
				related.PurchaseOrder  												= blank
				related.PurchaseOrderLine											= blank
			Instance Selection
				where  (related.Contract  											= Contract
				and     related.ContractLine										= ContractLine
				and     related.Status.Released
				and     related.Type			= "CS")

		ReceiptMNRExistRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set5
				related.Company                 									= Company
				related.PurchaseOrder  												= PurchaseOrder
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine    = PurchaseOrderReceiptLine
				related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchObjectID
			Instance Selection
				where  (related.Type					= "RC"
				and     related.PurchaseOrderLine    	= PurchaseOrderLine
				and     related.MatchedNotReceivedQuantity < 0)

		PurchaseOrderReceiptInvoiceLinkMNRRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company                 											= Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID						= MatchObjectID
			Instance Selection
				where  (related.PurchaseOrder  												= PurchaseOrder
				and     related.PurchaseOrderLine    										= PurchaseOrderLine
				and    (related.Status.Released
				or      related.Status.Processed)
				and     related.Type											= "MA"
				and     related.PurchaseOrderReceiptInvoiceLink.AddOnCharge		= blank)

		PurchaseOrderReceiptInvoiceLinkMessageRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
				related.Company                 									= Company
				related.PurchaseOrder  												= PurchaseOrder
				related.PurchaseOrderLine    										= PurchaseOrderLine
			Instance Selection
				where (related.Type						= "CS"
				and    related.PayablesInvoice			= PayablesInvoice)


		AllDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses ByPayablesInvoiceSuffixPOLine
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
				related.Suffix                          = blank
				related.PurchaseOrder                   = PurchaseOrder
				related.PurchaseOrderLine               = PurchaseOrderLine
			Instance Selection
				where  (related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge									= blank
				and     related.DistributionType.Distribution)

		PostedDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses ByPayablesInvoiceSuffixPOLine
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
				related.Suffix                          = blank
				related.PurchaseOrder                   = PurchaseOrder
				related.PurchaseOrderLine               = PurchaseOrderLine
			Instance Selection
				where  (related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.Status.Historical)

		ReceiptInvoiceLinkMatchObjectIDRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set2
				related.Company                                       	= Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID 	= MatchObjectID
			Instance Selection
				where  (related.PurchaseOrder  							= PurchaseOrder
				and     related.PurchaseOrderLine    					= PurchaseOrderLine
				and     related.PayablesInvoice							= PayablesInvoice
                and     related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt entered
				and     related.PurchaseOrderReceiptInvoiceLink.AddOnCharge not entered)

		PurchaseOrderReceiptInvoiceLinkMatchObjectIDRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set4
				related.Company                 							= Company
				related.PurchaseOrderReceiptInvoiceLink.MatchObjectID  		= MatchObjectID

		PurchaseOrderReceiptLineByMatchObjectIDRel
			classic name is PORECLINE
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set11
				related.Company                 = Company
				related.MatchObjectID			= MatchObjectID
			Instance Selection
				where (related.PurchaseOrder 		= PurchaseOrder
				and    related.PurchaseOrderLine    = PurchaseOrderLine)

		PurchaseOrderReceiptLineSupplierRel
			one-to-one relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company                 	= Company
				related.PurchaseOrderReceipt    	= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine

		PurchaseOrderReceiptLinesForPORel
			classic name is PORECLINE
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses ByPurchaseOrderLine
				related.Company                 	= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

		PurchaseOrderReceiptLinesForMatchDetailKey
			classic name is PORECLINE
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses ByPurchaseOrderLine
				related.Company                 	= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

 		LocalMatchWorkInvoiceDetailRel
			one-to-one relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= LocalMatchWork
				related.PayablesInvoice									= PayablesInvoice
				related.PurchaseOrder									= PurchaseOrder
				related.PurchaseOrderLine								= PurchaseOrderLine
				related.Contract										= Contract
				related.ContractLine									= ContractLine
				related.PayablesInvoiceDetail							= PayablesInvoiceDetail

 		ReconDetailRel
			one-to-one relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= PayablesInvoice.MatchReconQueueRel.MatchWork
				related.PayablesInvoice									= PayablesInvoice
				related.PurchaseOrder									= PurchaseOrder
				related.PurchaseOrderLine								= PurchaseOrderLine
				related.Contract										= Contract
				related.ContractLine									= ContractLine
				related.PayablesInvoiceDetail							= PayablesInvoiceDetail

		PurchaseOrderLineAssetRel
			one-to-one relation to PurchaseOrderLineAsset
			Field Mapping uses symbolic key
				related.Company                 		= Company
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine

		PurchaseOrderLineAssetDetailRel
			one-to-many relation to PurchaseOrderLineAssetDetail
			Field Mapping uses symbolic key
				related.Company                 		= Company
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLineAsset			= PurchaseOrderLine
		CommodityCodeRel
			classic name is COMMCODES
			one-to-one relation to CommodityCode
			Field Mapping uses symbolic key
				related.ItemGroup     = InventoryCompanyRel.ItemGroup
				related.CommodityCode = CommodityCode










		VendorItemRel
			classic name is POITEMVEN
			one-to-one relation to VendorItem
			required
			Field Mapping uses symbolic key
				related.ProcurementGroup = Company.ProcurementGroup
				related.Item             = Item
				related.Vendor           = Vendor
				related.VendorItem       = VendorItem

		PoInvLineFactRel
			one-to-one relation to PoInvLineFact
			Field Mapping uses PoInvLineFact symbolic key
				related.Company  					= Company
				related.PoInvLineFact.Vendor   		= Vendor
				related.PoInvLineFact.Invoice		= PayablesInvoice.Invoice
				related.PoInvLineFact.Suffix    	= PayablesInvoice.Suffix
				related.PoInvLineFact.PoNumber 		= PurchaseOrder
				related.PoInvLineFact.PoRelease		= 0
				related.PoInvLineFact.PoCode   		= blank
				related.PoInvLineFact.LineNbr 		= PurchaseOrderLine
				related.PoInvLineFact.SeqNbr    	= 0

		OneContractRebateDueInvoiceLinesRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses ByInvoiceNbr
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract

		ContractRebateDueInvoiceLinesRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses ByInvoiceNbr
				related.Company						= Company
				related.PayablesInvoice				= PayablesInvoice

		ContractRebateQualifierCodesManufInfoLevel2Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByManufInfo
				related.ManufacturerInfo.ManufacturerCode		= PurchaseOrderLine.Manufacturer.ManufacturerCode
				related.ManufacturerInfo.ManufacturerDivision	= PurchaseOrderLine.Manufacturer.ManufacturerDivision
			Instance Selection
				where (related.ItemCategory.ManufacturerInformation
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierCodesManufInfoLevel1Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByManufInfo
				related.ManufacturerInfo.ManufacturerCode		= PurchaseOrderLine.Manufacturer.ManufacturerCode
				related.ManufacturerInfo.ManufacturerDivision	= blank
			Instance Selection
				where (related.ItemCategory.ManufacturerInformation
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierCodesPurchClassLevel2Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByPurchClass
				related.MajorPurchasingClass		= PurchaseOrderLine.MajorPurchasingClass
				related.MinorPurchasingClass		= PurchaseOrderLine.MinorPurchasingClass
			Instance Selection
				where (related.ItemCategory.PurchasingClass
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierCodesPurchClassLevel1Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByPurchClass
				related.MajorPurchasingClass		= PurchaseOrderLine.MajorPurchasingClass
				related.MinorPurchasingClass		= blank
			Instance Selection
				where (related.ItemCategory.PurchasingClass
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierCodesUnspscCodeLevel4Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= PurchaseOrderLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= PurchaseOrderLine.UNSPSCCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity		= PurchaseOrderLine.UNSPSCCode.UNSPSCCommodity
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierCodesUnspscCodeLevel3Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= PurchaseOrderLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= PurchaseOrderLine.UNSPSCCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity		= blank
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierCodesUnspscCodeLevel2Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= PurchaseOrderLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= blank
				related.UnspscCode.UNSPSCCommodity		= blank
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierCodesUnspscCodeLevel1Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= blank
				related.UnspscCode.UNSPSCClass			= blank
				related.UnspscCode.UNSPSCCommodity		= blank
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ServiceContractRebateQualifierCodesUnspscCodeLevel4Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= ContractLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= ContractLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= ContractLine.UNSPSCCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity		= ContractLine.UNSPSCCode.UNSPSCCommodity
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ServiceContractRebateQualifierCodesUnspscCodeLevel3Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= ContractLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= ContractLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= ContractLine.UNSPSCCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity		= blank
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ServiceContractRebateQualifierCodesUnspscCodeLevel2Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= ContractLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= ContractLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= blank
				related.UnspscCode.UNSPSCCommodity		= blank
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ServiceContractRebateQualifierCodesUnspscCodeLevel1Rel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= ContractLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= blank
				related.UnspscCode.UNSPSCClass			= blank
				related.UnspscCode.UNSPSCCommodity		= blank
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		ContractRebateQualifierItemsRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByItemNumber
				related.ItemNumber					= LocalItem
			Instance Selection
				where (!related.Contract.ContractStatus.Closed
				and     related.Contract.RebateEligible)

		ContractRebateQualifierItemsForContractLineRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByItem
				related.ContractGroup									= Company.ProcurementGroup
				related.ContractRebateQualifierItem.RebateContract		= Contract
				related.ContractRebateQualifierItem.RebateContractLine	= ContractLine
			Instance Selection
				where (!related.Contract.ContractStatus.Closed
				and     related.Contract.RebateEligible)

		ContractRebateQualifierCodesLocalCommodityCodeRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByCommCode
				related.CommodityCode		= LocalCommodityCode
			Instance Selection
				where (related.ItemCategory.CommodityCode
				and   !related.Contract.ContractStatus.Closed
				and    related.Contract.RebateEligible)

		QualifierCodesManufInfoLevel2ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByManufInfo
				related.ManufacturerInfo.ManufacturerCode		= PurchaseOrderLine.Manufacturer.ManufacturerCode
				related.ManufacturerInfo.ManufacturerDivision	= PurchaseOrderLine.Manufacturer.ManufacturerDivision
				related.ContractGroup							= LocalContractGroup
				related.Contract								= LocalContract
			Instance Selection
				where (related.ItemCategory.ManufacturerInformation
				and    related.Contract.RebateEligible)

		QualifierCodesManufInfoLevel1ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByManufInfo
				related.ManufacturerInfo.ManufacturerCode		= PurchaseOrderLine.Manufacturer.ManufacturerCode
				related.ManufacturerInfo.ManufacturerDivision	= blank
				related.ContractGroup							= LocalContractGroup
				related.Contract								= LocalContract
			Instance Selection
				where (related.ItemCategory.ManufacturerInformation
				and    related.Contract.RebateEligible)

		QualifierCodesPurchClassLevel2ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByPurchClass
				related.MajorPurchasingClass		= PurchaseOrderLine.MajorPurchasingClass
				related.MinorPurchasingClass		= PurchaseOrderLine.MinorPurchasingClass
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
				where (related.ItemCategory.PurchasingClass
				and    related.Contract.RebateEligible)

		QualifierCodesPurchClassLevel1ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByPurchClass
				related.MajorPurchasingClass		= PurchaseOrderLine.MajorPurchasingClass
				related.MinorPurchasingClass		= blank
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
				where (related.ItemCategory.PurchasingClass
				and    related.Contract.RebateEligible)

		QualifierCodesUnspscCodeLevel4ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= PurchaseOrderLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= PurchaseOrderLine.UNSPSCCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity		= PurchaseOrderLine.UNSPSCCode.UNSPSCCommodity
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and    related.Contract.RebateEligible)

		QualifierCodesUnspscCodeLevel3ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= PurchaseOrderLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= PurchaseOrderLine.UNSPSCCode.UNSPSCClass
				related.UnspscCode.UNSPSCCommodity		= blank
				related.ContractGroup					= LocalContractGroup
				related.Contract						= LocalContract
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and    related.Contract.RebateEligible)

		QualifierCodesUnspscCodeLevel2ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment		= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily			= PurchaseOrderLine.UNSPSCCode.UNSPSCFamily
				related.UnspscCode.UNSPSCClass			= blank
				related.UnspscCode.UNSPSCCommodity		= blank
				related.ContractGroup					= LocalContractGroup
				related.Contract						= LocalContract
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and    related.Contract.RebateEligible)

		QualifierCodesUnspscCodeLevel1ForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByUnspscCode
				related.UnspscCode.UNSPSCSegment	= PurchaseOrderLine.UNSPSCCode.UNSPSCCode.UNSPSCSegment
				related.UnspscCode.UNSPSCFamily		= blank
				related.UnspscCode.UNSPSCClass		= blank
				related.UnspscCode.UNSPSCCommodity	= blank
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
				where (related.ItemCategory.UNSPSCCode
				and    related.Contract.RebateEligible)

		QualifierItemsForContractRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByItemNumber
				related.ItemNumber					= LocalItem
				related.ContractGroup				= LocalContractGroup
				related.Contract					= LocalContract
			Instance Selection
				where (related.Contract.RebateEligible)

		QualifierItemsForContractAndRebateQualifierContractRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByItem
				related.ContractGroup									= LocalContractGroup
				related.ContractRebateQualifierItem.RebateContract		= Contract
				related.ContractRebateQualifierItem.RebateContractLine	= ContractLine
				related.ItemNumber										= LocalItem
				related.Contract										= LocalContract
			Instance Selection
				where (related.Contract.RebateEligible)

		QualifierCodesLocalCommodityCodeForContractRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses ByCommCode
				related.CommodityCode		= CommodityCodeRel.CommodityCode
				related.ContractGroup		= LocalContractGroup
				related.Contract			= LocalContract
			Instance Selection
				where (related.ItemCategory.CommodityCode
				and    related.Contract.RebateEligible)

   		ContractRebateQualifiersRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = Company.ProcurementGroup
				related.Contract					= DerivedManufacturerContract

		ItemOnContractRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup 			= Company.VendorGroup
				related.ItemNumber    			= Item
			Instance Selection
				where (DistributionDate			>= related.EffectiveDate
				and   (DistributionDate			<= related.ExpirationDate
				or 		related.ExpirationDate	 = blank))

		ContractLineDistributionsRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup 			= Company.VendorGroup
				related.Contract				= Contract
				related.ContractLine			= ContractLine

		ContractLineSpecialItemLinkRel
			one-to-one relation to ContractLineSpecialItemLink
			Field Mapping uses ByContractLine
				related.ItemGroup	 			= Company.VendorGroup
				related.Contract				= Contract
				related.ContractLine            = ContractLine

		InvoiceSourceRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company 				= Company
				related.Vendor  				= Vendor
				related.PayablesInvoice 		= PayablesInvoice
			Instance Selection
				where (related.RecordSource.Invoice)

        InvoiceDetailCreateFromMatchInProcessRel
            classic name is MAINVDTL
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByPurchaseOrderLine
                related.Company 					= Company
				related.PurchaseOrder 				= PurchaseOrder 
				related.PurchaseOrderLine 			= PurchaseOrderLine 
            Instance Selection
            	where (related.RecordSource.CreatedWithinMatch
				and    related.MatchObjectID not entered) 

		LocalMatchMessageToleranceRel
			one-to-one relation to MatchMessageTolerance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.MatchRule 				= LocalMatchRule

		PayablesAuthorizedBuyerRel
			one-to-many relation to PayablesAuthorizedBuyer			
			Field Mapping uses Set2
				related.VendorGroup			= Company.VendorGroup
				related.Buyer				= PurchaseOrder.Buyer

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company = Company

		MatchCompanyRel
			one-to-one relation to MatchCompany
			Field Mapping uses symbolic key
				related.Company				= Company

		PurchaseOrderAocRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge	
			Field Mapping uses Set3	
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.Vendor = Vendor
				and   !related.Canceled
				and   !related.Closed.Yes)

		PayablesInvoiceAddOnChargesWithTaxRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set1
				related.Company												= Company
				related.Vendor                  							= Vendor
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where (related.TaxCode										= PayablesInvoice.TaxCode)

		PayablesInvoiceDetailWithTaxRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company 						= Company
				related.Vendor  						= Vendor
				related.PayablesInvoice 				= PayablesInvoice
			Instance Selection
				where (related.TaxCode					= PayablesInvoice.TaxCode)

		VendorCompanyDefaultRel
			one-to-one relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= Location
				related.Company 						= Company

		VendorLocationRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= Vendor
				related.VendorLocation					= Location

		PayablesDistributionCodeDetailsRel
			one-to-many relation to PayablesDistributionCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup                     = Company.VendorGroup
				related.PayablesDistributionCode		= LocalDistributionCode

		PurchaseOrderLineDistributionsRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
				related.Company                 		= Company
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine

		MatchInvoiceReferenceRel
			one-to-one relation to MatchInvoiceReference
			Field Mapping uses symbolic key
				related.Company               			= Company
				related.Vendor                			= Vendor
				related.PayablesInvoice					= PayablesInvoice

		OriginalInvoiceDetailRel
			one-to-one relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice 				= MatchInvoiceReferenceRel.OriginalInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	  					= Contract
				related.ContractLine    				= ContractLine
				related.PayablesInvoiceDetail			= LocalOriginalInvoiceDetail

		LocalOriginalInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice 				= MatchInvoiceReferenceRel.OriginalInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	  					= Contract
				related.ContractLine    				= ContractLine

		MemoCostDetailRel
			one-to-one relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice 				= MatchInvoiceReference.PayablesInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	  					= Contract
				related.ContractLine    				= ContractLine
				related.PayablesInvoiceDetail			= PayablesInvoiceDetail

		MemoQuantityDetailRel
			one-to-one relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice 				= MatchInvoiceReference.PayablesInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	  					= Contract
				related.ContractLine    				= ContractLine
				related.PayablesInvoiceDetail			= PayablesInvoiceDetail

		CreditsAgainstThisLineRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses Set10
				related.Company 						= Company
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
			Instance Selection
				where (related.Contract	  				= Contract
				and    related.ContractLine    			= ContractLine
				and    related.PayablesInvoice.InvoiceType.CreditMemo
				and    related.MatchInvoiceReferenceRel.OriginalInvoice = PayablesInvoice)


		OpenMatchInvoiceMessageRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
	 			related.PurchaseOrder					= PurchaseOrder
	 			related.PurchaseOrderLine				= PurchaseOrderLine
	 			related.Contract						= Contract
	 			related.ContractLine					= ContractLine
				related.PayablesInvoiceDetail			= PayablesInvoiceDetail
			Instance Selection
				where (!related.MatchMessageOrigin.PoCost
				and    !related.Status.Closed)

		ClosedChargebackReconMatchMessageRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
	 			related.PurchaseOrder					= PurchaseOrder
	 			related.PurchaseOrderLine				= PurchaseOrderLine
	 			related.Contract						= Contract
	 			related.ContractLine					= ContractLine
				related.PayablesInvoiceDetail			= PayablesInvoiceDetail
			Instance Selection
				where (related.MatchMessageOrigin.ReconMatch
				and    related.MessageType.Quantity
				and    related.ApplicationAction.Chargeback
				and    related.Status.Closed)

		ReconCostMessageRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
	 			related.PurchaseOrder					= PurchaseOrder
	 			related.PurchaseOrderLine				= PurchaseOrderLine
	 			related.Contract						= Contract
	 			related.ContractLine					= ContractLine
				related.PayablesInvoiceDetail			= PayablesInvoiceDetail
			Instance Selection
				where (related.MatchMessageOrigin.ReconMatch
				and    related.MessageType.Cost)

		ReconChargebackCostMessageRel
			classic name is MAINVMSG
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
	 			related.PurchaseOrder					= PurchaseOrder
	 			related.PurchaseOrderLine				= PurchaseOrderLine
	 			related.Contract						= Contract
	 			related.ContractLine					= ContractLine
				related.PayablesInvoiceDetail			= PayablesInvoiceDetail
			Instance Selection
				where (related.MatchMessageOrigin.ReconMatch
				and    related.ApplicationAction.Chargeback
				and    related.MessageType.Cost)

		AnotherCreditForRebillDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company 						= Company
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
			Instance Selection
				where (related.PayablesInvoice != PayablesInvoice
				and   (PurchaseOrderReceipt not entered
				or     related.PurchaseOrderReceipt = PurchaseOrderReceipt)
				and    related.PayablesInvoice.InvoiceSource.CreditForRebill
				and    related.PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice = PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice)

		CreditForRebillDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company 						= Company
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
			Instance Selection
				where (related.PayablesInvoice != PayablesInvoice
				and    related.PayablesInvoice.InvoiceSource.CreditForRebill)

		SameInvoiceAndPORel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	  					= Contract
				related.ContractLine    				= ContractLine

		SamePOLineDifferentInvoiceLineRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	  					= Contract
				related.ContractLine    				= ContractLine
			Instance Selection
				where (related.UniqueID != UniqueID)

		OtherSameContractRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.PurchaseOrder  					= PurchaseOrder
				related.PurchaseOrderLine    			= PurchaseOrderLine
				related.Contract	  					= Contract
			Instance Selection
				where (related.UniqueID != UniqueID)

		OriginalInvoiceAddOnChargeRel
			classic name is MAAOCDTL
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.PayablesInvoice					= MatchInvoiceReference.OriginalInvoice
				related.PurchaseOrder 					= PurchaseOrder
				related.PurchaseOrderLine 				= PurchaseOrderLine
				related.Contract	  					= Contract
				related.ContractLine    				= ContractLine

		DefaultVendorItemRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup			= Company.ProcurementGroup
				related.Item						= Item
				related.Vendor						= Vendor
			Instance Selection
				where (related.VendorItem.UseAsDefault
				and    related.VendorItem.Active)

		GLCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company			 				= Company

		EntityTaxCodeRel
			classic name is TAXCODE
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GLCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= GLCompanyRel.AccountingEntity
				related.TaxCode 				= TaxCode

		LocalEntityTaxCodeRel
			classic name is TAXCODE
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GLCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= GLCompanyRel.AccountingEntity
				related.TaxCode 				= LocalTaxCode
				
		TaxEngineTaxDetailRel
			one-to-many relation to TaxEngineTaxDetail
			Field Mapping uses ByCompanyInvoice
				related.Company					= Company
				related.Invoice					= Invoice
				related.PONumber				= PurchaseOrder
				related.Vendor					= Vendor
                related.OrderLineNumber         = PurchaseOrderLine
 
		ItemOnPurchaseOrderLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PurchaseOrder  			= LocalPurchaseOrder
			Instance Selection
				where (related.MatchDetailKey	= MatchDetailKey)

		ItemOnInvoiceRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
			Instance Selection
				where (related.UniqueID		   != UniqueID
				and    related.MatchDetailKey	= MatchDetailKey)

		SameItemDifferentPurchaseOrderLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PurchaseOrder  			= PurchaseOrder
			Instance Selection
				where (related.Item	= Item
				and    related.VendorItem = VendorItem
				and    related.Description = ItemDescription
				and    related.PurchaseOrderLine != PurchaseOrderLine)



		InvoiceByVendorCommodityCodeRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyCommodityCode
				related.Company         = Company
				related.CommodityCode   = CommodityCode
			Instance Selection
				where   ((SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor not entered
				or 		related.Vendor = SupplyManagementReportContext.SupplyManagementReportVendorGroupField.Vendor)
				and 	((SupplyManagementReportContext.FromDate not entered
				or		related.PayablesInvoice.InvoiceDate	>= SupplyManagementReportContext.FromDate)
				and		(SupplyManagementReportContext.ThruDate not entered
				or		related.PayablesInvoice.InvoiceDate	<= SupplyManagementReportContext.ThruDate)))


		PayablesInvoiceDetailTotalsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByItemTypeItemVendor
				related.Company 	= Company
				related.Item	 	= Item
				related.ItemType	= ItemType
				related.Vendor 		= Vendor
			Instance Selection
				where   (related.TotalBaseAmount entered
				and 	(SupplyManagementReportContext.Item.Description not entered
				or		related.Item.Description = SupplyManagementReportContext.Item.Description)
				and 	(SupplyManagementReportContext.FromDate not entered
				or		related.PayablesInvoice.InvoiceDate	>= SupplyManagementReportContext.FromDate)
				and		(SupplyManagementReportContext.ThruDate not entered
				or		related.PayablesInvoice.InvoiceDate <= SupplyManagementReportContext.ThruDate))

		PayablesInvoiceDetailTotalPerItemRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByItemTypeItemVendor
				related.Company = Company
				related.Item    = Item
				related.ItemType = ItemType
			Instance Selection
				where   (related.TotalBaseAmount entered
				and 	(SupplyManagementReportContext.Item.Description not entered
				or		related.Item.Description = SupplyManagementReportContext.Item.Description)
				and 	(SupplyManagementReportContext.FromDate not entered
				or		related.PayablesInvoice.InvoiceDate	>= SupplyManagementReportContext.FromDate)
				and		(SupplyManagementReportContext.ThruDate not entered
				or		related.PayablesInvoice.InvoiceDate <= SupplyManagementReportContext.ThruDate))

		IsItemHistoryByVendorGroupByItemVendorDisplayHeaderRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByItemTypeItemVendor
			Instance Selection
				where (related.Item = Item
				and IsSupplyManagementReportItemVendorValid
				and related.IsGroupByItemVendor
				and related.PayablesInvoiceDetailTotalsRelExists)

		IsItemHistoryByVendorGroupByItemHeaderRel 
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByItemTypeItemVendor
			Instance Selection
				where (related.Item = Item
				and related.UniqueID  < UniqueID)

		IsItemHistoryByVendorGroupByItemVendorHeaderRel 
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByItemTypeItemVendor
			Instance Selection
				where (related.Company.VendorGroup			= Company.VendorGroup
				and related.Item							= Item
				and related.Vendor							= Vendor
				and related.UniqueID  < UniqueID)


		IsCommoditySpendByDiversityCodeGroupByCommCodeHeaderRel	
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyCommodityCode
				related.Company			= Company
				related.CommodityCode	= CommodityCode
			Instance Selection
				where (related.UniqueID  < UniqueID)

		IsCommoditySpendByDiversityCodeGroupByCommCodeDivCodeHeaderRel 
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyCommodityCode
				related.Company			= Company
				related.CommodityCode	= CommodityCode
			Instance Selection
				where (related.PayablesInvoice.DiversityCode = PayablesInvoice.DiversityCode
				and related.UniqueID  < UniqueID)

		IsCommoditySpendByDiversityCodeGroupByCommCodeDivCodeDisplayHeaderRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyCommodityCode
				related.Company			= Company
				related.CommodityCode	= CommodityCode
			Instance Selection
				where (IsSupplyManagementReportCommodityCodeValid
				and related.IsGroupByCommodityCodeDiversityCode)

		CommoditySpendByDiversityCodeTotalPerDiversityCodeRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyCommodityCode
				related.Company			= Company
				related.CommodityCode	= CommodityCode
			Instance Selection
				where (related.PayablesInvoice.DiversityCode = PayablesInvoice.DiversityCode
				and		related.TotalBaseAmount entered
				and 	(SupplyManagementReportContext.Item not entered
				or		related.Item = SupplyManagementReportContext.Item)
				and 	(SupplyManagementReportContext.ItemType not entered
				or		related.ItemType = SupplyManagementReportContext.ItemType)
				and 	(SupplyManagementReportContext.Item.Description not entered
				or		related.Item.Description = SupplyManagementReportContext.Item.Description)
				and 	(SupplyManagementReportContext.FromDate not entered
				or		related.PayablesInvoice.InvoiceDate	>= SupplyManagementReportContext.FromDate)
				and		(SupplyManagementReportContext.ThruDate not entered
				or		related.PayablesInvoice.InvoiceDate <= SupplyManagementReportContext.ThruDate))

		CommoditySpendByDiversityCodeTotalPerCommodityCodeRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyCommodityCode
				related.Company			= Company
				related.CommodityCode	= CommodityCode
			Instance Selection
				where (related.TotalBaseAmount entered
				and 	(SupplyManagementReportContext.Item not entered
				or		related.Item = SupplyManagementReportContext.Item)
				and 	(SupplyManagementReportContext.ItemType not entered
				or		related.ItemType = SupplyManagementReportContext.ItemType)
				and 	(SupplyManagementReportContext.Item.Description not entered
				or		related.Item.Description = SupplyManagementReportContext.Item.Description)
				and 	(SupplyManagementReportContext.FromDate not entered
				or		related.PayablesInvoice.InvoiceDate	>= SupplyManagementReportContext.FromDate)
				and		(SupplyManagementReportContext.ThruDate not entered
				or		related.PayablesInvoice.InvoiceDate <= SupplyManagementReportContext.ThruDate))

		PurchaseOrderLineDistributionRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
				related.AddOnCharge						= blank

		LocalPOLineDistributionRel
			one-to-one relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
				related.AddOnCharge						= blank
				related.PurchaseOrderLineDistribution	= LocalPOLineDistribution

		LocalToPOLineDistributionRel
			one-to-one relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= LocalPurchaseOrderLineNumber
				related.AddOnCharge						= blank
				related.PurchaseOrderLineDistribution	= LocalPOLineDistribution

		LocalContractLineDistributionRel
			one-to-one relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup      				= Company.VendorGroup
				related.Contract						= Contract
				related.ContractLine					= ContractLine
				related.ContractLineDistribution		= LocalContractLineDistrib

		ValidItemUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup     = Company.VendorGroup
				related.Item          = Item
				related.UnitOfMeasure = EnteredUOM

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= GeneralLedgerCompanyGroup
				related.Company						= Company

		MatchInvoiceMessageRNINonClosedLineRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses Set5
				related.Company = Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Status <= 2)

 		AutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= PayablesInvoice

		LocalAutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= LocalPayablesInvoice
				
		EAMTradeAccountOverrideRel
			one-to-one relation to EAMTradeAccountOverride
			Field Mapping uses ByVendorTrade
				related.VendorGroup				= Company.VendorGroup
				related.Vendor					= Vendor
				related.VendorLocation			= PayablesInvoice.PurchaseFromLocation
				related.EAMTrade				= EAMTrade

		LocalAOCPurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.PurchaseOrder			= LocalPurchaseOrder
				related.PurchaseOrderLine		= LocalAOCPurchaseOrderLine



		DetailInvoiceDistributionsRel  
			one-to-many relation to PayablesInvoiceDistribution
			valid when (PurchaseOrderLineEntered)
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceDetail)

		PayablesInvoiceAddOnChargesRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set1
				related.Company												= Company
				related.Vendor                  							= Vendor
				related.PayablesInvoice										= PayablesInvoice
				related.PurchaseOrder										= PurchaseOrder
				related.PurchaseOrderLine									= PurchaseOrderLine

		TaxRateRel								
			one-to-many relation to TaxRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxCode					= TaxCode
				related.ProductTaxCategory		= ProductTaxCategory
			Instance Selection
				where (related.EffectiveDate 	<= LocalEffectiveDate)

		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company					= Company
				related.Customer                = Vendor.Customer
		
		BODInventoryLocationRel 
		    one-to-one relation to InventoryLocation
		    Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= DerivedInventoryLocation
		
		BODVendorLocationRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup    = Vendor.VendorGroup
				related.Vendor         = Vendor
				related.VendorLocation = DerivedShipFromLocation
				
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter

		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFGLC"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= LocalBODAccountingEntity)




		ChargebackTaxRateRel
			one-to-many relation to TaxRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxCode					= TaxCode

			Instance Selection
				where (related.EffectiveDate 	<= PayablesInvoice.InvoiceDate)

		OtherDetailsCreatedFromReceiptRel 
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder 		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.PayablesInvoiceDetail != PayablesInvoiceDetail
				and	   related.MatchObjectID 		= MatchObjectID
				and	   not related.PurchaseOrderReceipt = PurchaseOrderReceipt) 

        ChargebackSourceContractInvoiceDetailRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByContractLine
                related.Contract        = Contract
                related.ContractLine    = ContractLine
                related.Company         = Company
            Instance Selection
                where (related.Invoice  = Invoice
                and    related.Item     = Item
                and    related.Suffix  != 111)

		ChargebackSourceInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company						= Company
				related.PurchaseOrder 				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt 		= PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine
			Instance Selection
				where (related.Invoice	= Invoice
				and    related.Item     = Item
				and    related.Suffix  != 111)

		ChargebackInvoiceDetailsForPOLineRel 
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByCompanyVendorPayablesInvoice
				related.Company 				= Company
				related.Vendor  				= Vendor
				related.PayablesInvoice 		= PayablesInvoice
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine

		InvoiceDetailFromSameReceiptLineRel 
		 	one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder 		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.QuantityAdjustment
				and	   related.MatchObjectID 		= MatchObjectID
				and	   related.PurchaseOrderReceipt = PurchaseOrderReceipt)

		OtherQuantityAdjustmentsRel
		 	one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder 		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.Contract 			= Contract
				related.ContractLine		= ContractLine
			Instance Selection
				where (related.UniqueID != UniqueID 
				and    related.MemoAdjustType.QuantityAdjustment)
		OtherCostAdjustmentsRel
		 	one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder 		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.MemoAdjustType.CostAdjustment)

		OneSourceUserAttributesRel						
			one-to-many relation to OneSourceUserAttribute
			delete cascades
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID) 				
	
		AllowReleaseOnlyMatchInvoiceRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "AllowReleaseOnlyMatchInvoice"

		MatchOneCallPerInvoiceRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "MatchOneCallPerInvoice"



		FSMBODConfigurationPulseAlertRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 2
				related.FSMBODConfiguration.Noun 		= "PulseAlert"
				related.FSMBODConfiguration.Direction 	= 1

		FSMBODConfigurationDetailPulseAlertRel
			one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 			= 2
				related.FSMBODConfiguration.Noun 			= "PulseAlert"
				related.FSMBODConfiguration.Direction 		= 1
			Instance Selection
				where (related.Alert						= "FSM_ION_POCostMsgAlert"
				and	   related.Enable)

		PurchaseOrderReceiptCommentRel
			one-to-many relation to PurchaseOrderReceiptComment
			Field Mapping uses part of key
				related.Company  				= Company
				related.PurchaseOrderReceipt	= PurchaseOrderReceipt
			Instance Selection
				where (related.CommentType.InvoiceComments)

		PurchaseOrderReceiptLineCommentRel
			one-to-many relation to PurchaseOrderReceiptLineComment
			Field Mapping uses part of key
				related.Company  				= Company
				related.PurchaseOrderReceipt	= PurchaseOrderReceipt
			Instance Selection
				where (related.CommentType.InvoiceComments)

		JurisdictionResultsForInvoiceRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey 			= reference to PayablesInvoice)						


		MatchInvoiceMessagePurgeRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set5
                related.Company 		= Company
                related.PayablesInvoice	= PayablesInvoice
                
        PrimaryContactRel
			one-to-one relation to ContractAttachedContact
			Field Mapping uses ByPrimary
				related.ContractGroup = Company.VendorGroup
				related.Contract      = Contract

	Sets
		ByCompanyVendorSearch
			duplicates
			indexed
			Sort Order
				Company
				Vendor

		ByCompanyBuyerSearch
			duplicates
			indexed
			Sort Order
				Company
				Buyer

		ByCompanyItemTypeItemSearch
			duplicates
			indexed
			Sort Order
				Company
				ItemType
				Item

		ByItemTypeItemVendor  
			duplicates
			indexed
			Sort Order
				Company
				Item
				ItemType
				Vendor
				PayablesInvoice
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine

		ByCompanyCommodityCode  
			duplicates
			indexed
			Sort Order
				Company
				CommodityCode
				PayablesInvoice
				Vendor
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine

		Set10  
			indexed
			Instance Selection
				where (LineStatusIsMatched)
			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
				UpdateDate descending
				Vendor
				PayablesInvoiceDetail
				PayablesInvoice
				Contract
				ContractLine

		Set9  
			indexed
			Instance Selection
				where (InvoiceType.Invoice)
			Sort Order
				Company
				MatchObjectID
				MatchSequence
				Vendor
				PayablesInvoiceDetail
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoice

		ByContractLine  
			Sort Order

				Contract
				ContractLine
				Company
				Vendor


				PurchaseOrder
				PurchaseOrderLine
				PayablesInvoiceDetail
				PayablesInvoice

		ByCompanyVendorPayablesInvoice  
			Sort Order
				Company
				Vendor
				PayablesInvoice
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoiceDetail

		ByPurchaseOrderLine 
			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
				PurchaseOrderReceipt
				PurchaseOrderReceiptLine
				Vendor
				PayablesInvoice
				PayablesInvoiceDetail
				Contract
				ContractLine

		ByVendorItem
			indexed
			Sort Order
				Company
				PayablesInvoice
				VendorItem
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoiceDetail

	SubType HasContract Field Rules
		Item
			force default to ContractLine.ItemNumber
			cannot be changed

		ItemType
			default to ItemType.Service
			cannot be changed
			required

		VendorItem
			force default to ContractLine.VendorItem
			cannot be changed

		ItemDescription
			force default to ContractLine.ItemDescription


		ItemGTIN
			force default to ContractLine.GlobalTradeItemNumber

		MatchDetailKey
			if  (ItemType.Inventoried
			or   ItemType.NonStock)
				force default to Item
			else
			if  (ItemType.Special)
				force default to VendorItem
			else
				force default to ItemDescription
			cannot be changed

		EnteredQuantity
			if (Company.MatchMemoDelayHardEdits
			and PayablesInvoice.CreditOrDebitMemo)
			    NextSentence = true
			else
				required
					"InvoiceQuantityIsRequired"

			if  (!PayablesInvoice.CreditOrDebitMemo)
				if (ContractLine.ServiceCode.Amount)
					default to 1
					constraint (EnteredQuantity = 1)
						"QuantityMustBe1ForAmountBasedServiceItem"
				else
				if (!PayablesInvoice.InterfaceInProcess)
			 		default to ContractLine.DerivedRemainingQuantityOrdered

				constraint (EnteredQuantity >= 0)
				    "QuantityMustBeGreaterThanZero"
				    
				if (EnteredQuantity changed
				and PayablesInvoice.MatchProcessType.ServiceContract)
					include EditServiceLimits

				if (EnteredQuantity changed
				and EnteredUnitCost not entered)
				   	include ServiceContractPriceBreaks
				   	if  (PosapbUnitCost entered)
				   		EnteredUnitCost							= PosapbUnitCost


			if (NewCreditMemo)
				if  (QuantityAdjustment
				and  EnteredQuantity > 0)
					EnteredQuantity				= EnteredQuantity * -1
					if (MatchedQuantity > 0)
						MatchedQuantity *= -1
					TotalDistributionAmount 	= DerivedDistributionAmount
					TotalBaseAmount				= DerivedBaseAmount
				else 
				if  (CostAdjustment
				and  EnteredQuantity < 0)
					EnteredQuantity				= EnteredQuantity * -1
					if (MatchedQuantity < 0)
						MatchedQuantity *= -1
					TotalDistributionAmount 	= DerivedDistributionAmount
					TotalBaseAmount				= DerivedBaseAmount


				WorkEnteredQuantity = EnteredQuantity * -1

				if  (QuantityAdjustment)
					constraint (!ContractLine.ServiceCode.Amount)
						"QuantityAdjustmentNotAllowedOnAmountTypeServiceLine"						

				if (Company.MatchMemoDelayHardEdits)
					if  (ContractLine.ServiceCode.Quantity)
						if (WorkEnteredQuantity > ContractLine.QuantityOrdered)
						    confirmation required
								"CannotCreditMoreThanOrderedQuantity.Continue?"										
						else
						if (PayablesInvoice.MatchInvoiceReferenceRel exists)
							LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
							if (WorkEnteredQuantity > OriginalInvoiceDetailRel.EnteredQuantity)
							    confirmation required
								    "CostAdjustmentQuantityCannotBeGreaterThanOriginalInvoiceQuantity.Continue?"			
				else
					if  (ContractLine.ServiceCode.Quantity)
						constraint (WorkEnteredQuantity <= ContractLine.QuantityOrdered)
							"CannotCreditMoreThanOrderedQuantity"										
	
						if (PayablesInvoice.MatchInvoiceReferenceRel exists)
							LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
							constraint (WorkEnteredQuantity <= OriginalInvoiceDetailRel.EnteredQuantity)
								"CostAdjustmentQuantityCannotBeGreaterThanOriginalInvoiceQuantity"			

		EnteredUOM
			default to ContractLine.UOM.UnitOfMeasure
			if (Contract.AgreementType.Service)
				constraint (EnteredUOM = ContractLine.UOM.UnitOfMeasure)	
					"MustUseContractLineUOMForServiceContracts" 

		VendorBuyUOM
			default to EnteredUOM

		EnteredUnitCost
			if (Company.MatchMemoDelayHardEdits
			and PayablesInvoice.CreditOrDebitMemo)
			    NextSentence = true
			else
				required
					"UnitCostIsRequired"

			if (!PayablesInvoice.CreditOrDebitMemo)
				if (action type.Update
				and ContractLine.CostOption.CostRequired)
					required
						"UnitCostIsRequired"
				else 
				if (ContractLine.ServiceCode.Amount)
					default to ContractLine.DerivedRemainingAmountInUse
				else
				if  (Company.EnableServiceCostMessaging
				and  ContractLine.CurrentNetCost entered)
				    default to ContractLine.CurrentNetCost
				else
					default to ContractLine.BaseCost

				if (EnteredUnitCost not entered)
					include ServiceContractPriceBreaks
					if (PosapbUnitCost entered)
						EnteredUnitCost = PosapbUnitCost

				if (EnteredUnitCost changed
				and PayablesInvoice.MatchProcessType.ServiceContract)
					include EditServiceLimits

				if (!ContractLine.ServiceCode.Amount)
					constraint (EnteredUnitCost >= 0)
					    "EnteredUnitCostMustBeGreaterThanZero"
				else
				if (ContractLine.ServiceCode.Amount
				and EnteredUnitCost < 0)
					constraint (EnteredUnitCost * -1 <= ContractLine.DerivedMatchBaseCost) 
						"ServiceByAmountCreditCannotExceedContractLineMatchedAmount" 
				    

			if (NewCreditMemo)
				if  (QuantityAdjustment)
					if  (EnteredUnitCost < 0)
						EnteredUnitCost				= EnteredUnitCost * -1
						MatchUnitCost 				= DerivedMatchUnitCost
						TotalDistributionAmount 	= DerivedDistributionAmount
						TotalBaseAmount				= DerivedBaseAmount
					AbsoluteUnitCost				= EnteredUnitCost


				if  (CostAdjustment)
					if  (EnteredUnitCost > 0
					and  ItemType.Inventoried)
						EnteredUnitCost				= EnteredUnitCost * -1
						MatchUnitCost 				= DerivedMatchUnitCost
						TotalDistributionAmount 	= DerivedDistributionAmount
						TotalBaseAmount				= DerivedBaseAmount

					if  (EnteredUnitCost > 0)
						AbsoluteUnitCost			= EnteredUnitCost
					else
						AbsoluteUnitCost			= EnteredUnitCost * -1

				if (Company.MatchMemoDelayHardEdits)
					if (PayablesInvoice.MatchInvoiceReferenceRel exists)
						LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
						if (AbsoluteUnitCost > OriginalInvoiceDetailRel.EnteredUnitCost)
						    confirmation required
								"CostAdjustmentUnitCostCannotBeGreaterThanOriginalInvoiceUnitCost.Continue?"  
					else
						if (AbsoluteUnitCost > ContractLine.CurrentNetCost)
						    confirmation required
								"CostAdjustmentUnitCostMustBeLessThanContractLineUnitCost.Continue?"  
	
					if  (CostAdjustment
					and  ContractLine.ServiceCode.Quantity)
						if (PayablesInvoice.MatchInvoiceReferenceRel exists)
							if (OriginalInvoiceDetailRel.EnteredUnitCost + EnteredUnitCost > ContractLine.CurrentNetCost)
						    	confirmation required
									"OriginalCostPlusAdjustedCostIsGreaterThanContractLineCost.Continue?"						
						else
							if (EnteredUnitCost > ContractLine.CurrentNetCost)
						    	confirmation required
									"CostAdjustmentMustBeLessThanContractLineCost.Continue?"						
	
					if  (CostAdjustment)
						AbsoluteUnitCost 		= EnteredUnitCost * -1
						if  (ContractLine.ServiceCode.Amount)
							CostDifference 		= ContractLine.AmountOrdered - AbsoluteUnitCost
							if (CostDifference < 0)
						    	confirmation required
									"CostCreditCannotExceedAmountOrdered.Continue?"
				else
					if (PayablesInvoice.MatchInvoiceReferenceRel exists)
						LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
						if (TransientOriginalDetail entered)
							LocalOriginalInvoiceDetail = TransientOriginalDetail
						else
							LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail
						constraint (AbsoluteUnitCost <= OriginalInvoiceDetailRel.EnteredUnitCost)
							"CostAdjustmentUnitCostCannotBeGreaterThanOriginalInvoiceUnitCost"  
					else
						constraint (AbsoluteUnitCost <= ContractLine.DerivedMatchBaseCost)
							"CostAdjustmentUnitCostMustBeLessThanContractLineUnitCost"  
	
					if  (CostAdjustment
					and  ContractLine.ServiceCode.Quantity)
						constraint (AbsoluteUnitCost <= ContractLine.DerivedMatchBaseCost)
							"CostAdjustmentMustBeLessThanContractLineCost"						
	
					if  (CostAdjustment)
						if  (ContractLine.ServiceCode.Amount)
							CostDifference 		= ContractLine.AmountOrdered - AbsoluteUnitCost
							constraint (CostDifference >= 0)
								"CostCreditCannotExceedAmountOrdered"

		VendorPriceUOMMultiplier
			default to 1

		EnteredUOMMultiplier
			default to 1

		CommodityCode
			default to ContractLine.CommodityCode

		VendorPriceUOM
			if (!ContractLine.ServiceCode.Amount)
				default to ContractLine.UOM.UnitOfMeasure

		VendorBuyUOMMultiplier
			default to 1

	SubType PurchaseOrderLineEntered Field Rules
		Item
			if (PurchaseOrderReceiptLine entered
			and PurchaseOrderReceiptLine.Item entered)
				default to PurchaseOrderReceiptLine.Item
			else
				force default to PurchaseOrderLine.Item
			cannot be changed

		ItemType
			if (action type.Update)
				constraint (ItemType = PurchaseOrderLine.ItemType
				or          ItemType = PurchaseOrderReceiptLine.ItemType)
					"PurchaseOrderLineItemTypeHasChanged;PleaseDeleteAndRecreateInvoiceLine"
			if (PurchaseOrderReceiptLine entered)
				force default to PurchaseOrderReceiptLine.ItemType 
			else 
				force default to PurchaseOrderLine.ItemType
			cannot be changed

		VendorItem
			if (PurchaseOrderReceiptLine entered)
				force default to PurchaseOrderReceiptLine.VendorItem 
			else 
				force default to PurchaseOrderLine.VendorItem
			cannot be changed

		ItemDescription
			if (ItemType.Service)
				force default to PurchaseOrderLine.Description
			else 
			if (PurchaseOrderReceiptLine entered)
				force default to PurchaseOrderReceiptLine.Description 
			else 
				force default to PurchaseOrderLine.Description



		ItemGTIN
			default to PurchaseOrderLine.ItemGTIN

		MatchDetailKey
			if  (ItemType.Inventoried
			or   ItemType.NonStock)
				force default to Item
			else
			if  (ItemType.Special)
				force default to VendorItem
			else
				force default to ItemDescription

			cannot be changed

		Location
			if (PurchaseOrderReceiptLine entered)
				force default to PurchaseOrderReceiptLine.ShipToLocation
			else
				force default to PurchaseOrderLine.ShipToLocation







		EnteredQuantity

			if (Company.MatchMemoDelayHardEdits
			and PayablesInvoice.CreditOrDebitMemo)
			    NextSentence = true
			else
				required
					"InvoiceQuantityIsRequired"

			if (IsCatchWeight
			and EnteredQuantity changed
			and BuyUOMMatchedQuantity not changed)
				confirmation required
					"EnteredQuantityHasBeenChangedOnACatchWeightItem.PleaseVerifyBuyQuantityIsAlsoCorrect.Continue?"
			        

			if  (CreditForRebill
			and  !ItemType.Service)
				cannot be changed
					"CannotChangeQuantityOnCreditForRebill"


			if  (!PayablesInvoice.CreditOrDebitMemo)

				constraint (EnteredQuantity >= 0)
				    "QuantityMustBeGreaterThanZeroForInvoiceLine"
				    
				if (EnteredQuantity not entered)
					EnteredUOMMultiplier				= PurchaseOrderLine.EnteredBuyUOMMultiplier

				if  (ItemType.Service
				and  PurchaseOrderLine.ServiceCode.Amount)
					constraint (EnteredQuantity = 1)
						"QuantityMustBe1ForAmountBasedServiceItem"
				else
				if  (PurchaseOrderReceiptLine entered)
					default to PurchaseOrderReceiptLine.DerivedOpenToMatchQuantity
				else
				if (!PayablesInvoice.InterfaceInProcess)
					default to PurchaseOrderLine.DerivedOpenToPayablesInvoiceQuantity


			if (NewCreditMemo)
				if (TransientOriginalDetail entered)
					LocalOriginalInvoiceDetail = TransientOriginalDetail
				else
					LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail
				if  (QuantityAdjustment
				and  EnteredQuantity > 0)
					EnteredQuantity				= EnteredQuantity * -1
					if (MatchedQuantity > 0)
						MatchedQuantity *= -1
					TotalDistributionAmount 	= DerivedDistributionAmount
					TotalBaseAmount				= DerivedBaseAmount
				else
				if  (CostAdjustment
				and  EnteredQuantity < 0)
					EnteredQuantity				= EnteredQuantity * -1
					if (MatchedQuantity < 0)
						MatchedQuantity *= -1
					TotalDistributionAmount 	= DerivedDistributionAmount
					TotalBaseAmount				= DerivedBaseAmount

			if  (NewCreditMemo
			and  ItemType.Service)
				if  (QuantityAdjustment)
					constraint (!PurchaseOrderLine.ServiceCode.Amount)
						"QuantityAdjustmentNotAllowedOnAmountTypeServiceLine"							
				if (PurchaseOrderLine.ServiceCode.Amount)
					constraint  (EnteredQuantity = 1)
						"CreditQuantityMustBe1ForServiceByAmount"

			if (Company.MatchMemoDelayHardEdits)
				if  (NewCreditMemo
				and  ItemType.Service)
					WorkEnteredQuantity = EnteredQuantity * -1
	
					if (PayablesInvoice.MatchInvoiceReferenceRel exists)
						LocalOriginalInvoice = first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
						if (WorkEnteredQuantity > OriginalInvoiceDetailRel.EnteredQuantity)
							confirmation required
								"CreditQuantityCannotBeGreaterThanOriginalInvoiceQuantity.Continue?"  
	

					if (PurchaseOrderLine.ServiceCode.Quantity)
						if  (WorkEnteredQuantity > PurchaseOrderLine.MatchedQuantity)
							confirmation required
								"CreditQuantityCannotBeGreaterThanMatchedQuantity.Continue?"
				else
				if  (NewCreditMemo
				and  !CreditForRebill)
					if  (CostAdjustment)
						LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
						if (EnteredQuantity > OriginalInvoiceDetailRel.EnteredQuantity)
							confirmation required
								"CostAdjustmentQuantityCannotBeGreaterThanOriginalInvoiceQuantity.Continue?"  
	
					if  (QuantityAdjustment)


						WorkEnteredQuantity = EnteredQuantity * -1
						if (IsCatchWeight)
							if (WorkEnteredQuantity > PurchaseOrderLine.CatchWeightMatchQuantity)
								confirmation required
									"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanMatchedNotReceivedQuantity<PurchaseOrderLine.MatchedNotReceivedQuantity>.Continue?" 
							else
							if  (WorkEnteredQuantity > sum OriginalInvoiceDetailRel.PurchaseOrderReceiptInvoiceLinkMNRRel.CatchWeightMatchedNotReceivedQuantity)
								confirmation required
									"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanOriginalInvoiceMatchedNotReceivedQuantity.Continue?"   	
						else
						if  (PayablesInvoice.MatchProcessType.ReceiptMatch)
							if (WorkEnteredQuantity > PurchaseOrderLine.MatchedNotReceivedQuantity)
								confirmation required
									"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanMatchedNotReceivedQuantity<PurchaseOrderLine.MatchedNotReceivedQuantity>.Continue?" 
							else
							if  (WorkEnteredQuantity > OriginalInvoiceTotalMNR)
								confirmation required
									"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanOriginalInvoiceMatchedNotReceivedQuantity<OriginalInvoiceTotalMNR>.Continue?"   	
						else
							QuantityDifference			= PurchaseOrderLine.MatchedQuantity - PurchaseOrderLine.Quantity
							if  (QuantityDifference < 0)
								confirmation required
									"QuantityCreditNotAllowedIfOriginalInvoiceQuantityLessThanPurchaseOrderLineQuantity.Continue?"   	
							else
							if  (WorkEnteredQuantity > QuantityDifference)
								confirmation required
									"CreditQuantityCannotBeGreaterThanMatchedNotReceivedQuantity.Continue?"						
			else
				if  (NewCreditMemo
				and  ItemType.Service)
					WorkEnteredQuantity = EnteredQuantity * -1
	
					if (PayablesInvoice.MatchInvoiceReferenceRel exists)
						LocalOriginalInvoice = first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
						constraint (WorkEnteredQuantity <= OriginalInvoiceDetailRel.EnteredQuantity)
							"CreditQuantityCannotBeGreaterThanOriginalInvoiceQuantity"  
	

					if (PurchaseOrderLine.ServiceCode.Quantity)
						constraint  (WorkEnteredQuantity <= PurchaseOrderLine.MatchedQuantity)
							"CreditQuantityCannotBeGreaterThanMatchedQuantity"
				else
				if  (NewCreditMemo
				and  !CreditForRebill)
					if  (CostAdjustment)
						LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
						constraint (EnteredQuantity <= OriginalInvoiceDetailRel.EnteredQuantity)
							"CostAdjustmentQuantityCannotBeGreaterThanOriginalInvoiceQuantity"  
	
					if  (QuantityAdjustment)


						WorkEnteredQuantity = EnteredQuantity * -1
						if (IsCatchWeight)
							constraint (WorkEnteredQuantity <= PurchaseOrderLine.CatchWeightMatchQuantity)
								"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanMatchedNotReceivedQuantity<PurchaseOrderLine.MatchedNotReceivedQuantity>" 
							constraint  (WorkEnteredQuantity <= sum OriginalInvoiceDetailRel.PurchaseOrderReceiptInvoiceLinkMNRRel.CatchWeightMatchedNotReceivedQuantity)
								"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanOriginalInvoiceMatchedNotReceivedQuantity"   	
						else
						if  (PayablesInvoice.MatchProcessType.ReceiptMatch)
							constraint (WorkEnteredQuantity <= PurchaseOrderLine.MatchedNotReceivedQuantity)
								"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanMatchedNotReceivedQuantity<PurchaseOrderLine.MatchedNotReceivedQuantity>" 
							constraint  (WorkEnteredQuantity <= OriginalInvoiceTotalMNR)
								"CreditQuantity<WorkEnteredQuantity>CannotBeGreaterThanOriginalInvoiceMatchedNotReceivedQuantity<OriginalInvoiceTotalMNR>"   	
						else
							QuantityDifference			= PurchaseOrderLine.MatchedQuantity - PurchaseOrderLine.Quantity
							constraint  (QuantityDifference >= 0)
								"QuantityCreditNotAllowedIfOriginalInvoiceQuantityLessThanPurchaseOrderLineQuantity"   	
							constraint  (WorkEnteredQuantity <= QuantityDifference)
								"CreditQuantityCannotBeGreaterThanMatchedNotReceivedQuantity"						

		EnteredUOM
			if (EnteredUOM not entered)
				EnteredUOM 						= PurchaseOrderLine.VendorPriceUOM
				EnteredUOMMultiplier			= PurchaseOrderLine.VendorPriceUOMMultiplier

			if (IsSubstitute)
				if (!PurchaseOrderLine.IsCatchWeightItem)
					constraint (EnteredUOM = PurchaseOrderReceiptLine.ReceivedUOM)
						"MustUsePurchaseOrderReceiptLineUOMForSubstituteItems" 
			else 
			if (ItemType.Inventoried or ItemType.NonStock)
				if (Item.CatchWeightCode.NotCatchWeight)
					UnitOfMeasureEdit.UnitOfMeasure = EnteredUOM
					if  (PurchaseOrderReceiptLine entered
					and	 PayablesInvoice.InvoiceType.Invoice)
						constraint (EnteredUOM = PurchaseOrderReceiptLine.VendorPriceUOM)
							"MustUsePurchaseOrderReceiptLineVendorPriceUOM<PurchaseOrderReceiptLine.VendorPriceUOM>" 
					else
					if (!UnitOfMeasureEdit.ValidForBuying)
						constraint (EnteredUOM = PurchaseOrderLine.VendorPriceUOM)
							"MustUsePurchaseOrderLineVendorPriceUOM" 
				else
					constraint (EnteredUOM = Item.StockUOM)
						"MustUseCatchWeightUOMForCatchWeightItem"
			else
				if  (PurchaseOrderReceiptLine entered)
					constraint (EnteredUOM = PurchaseOrderReceiptLine.ReceivedUOM)
						"MustUsePurchaseOrderReceiptLineUOMForSpecialOrServiceItems" 
				else
					constraint (EnteredUOM = PurchaseOrderLine.VendorPriceUOM)
						"MustUsePurchaseOrderLineUOMForSpecialOrServiceItems" 

		VendorBuyUOM
			if (IsCatchWeight)
				default to PurchaseOrderLine.EnteredBuyUOM
			default to EnteredUOM

			if  ((ItemType.Inventoried or ItemType.NonStock)
			and   VendorBuyUOM != EnteredUOM)
				if (Item.CatchWeightCode.NotCatchWeight)
					UnitOfMeasureEdit.UnitOfMeasure = EnteredUOM
					if (!UnitOfMeasureEdit.ValidForBuying)
						constraint (EnteredUOM = PurchaseOrderLine.VendorPriceUOM)
							"MustUsePurchaseOrderLineVendorPriceUOM" 
			else
			if  ((ItemType.Special or ItemType.Service)
			and   EnteredUOM changed)
				VendorBuyUOM = EnteredUOM     
				VendorPriceUOM = EnteredUOM   

		EnteredUnitCost

			round EnteredUnitCost to nearest DerivedRoundToCost

			if (action != "CreateFromPurchaseOrderLine"
			and !PurchaseOrderLine.ServiceCode.Amount
			and !PurchaseOrderLine.AllowZeroCostInvoice)	
				if (Company.MatchMemoDelayHardEdits
				and PayablesInvoice.CreditOrDebitMemo)
				    NextSentence = true
				else
					required
						"UnitCostIsRequired"

			if (PurchaseOrderLine.CostOption.CostRequired
			and !PayablesInvoice.CreditOrDebitMemo
			and !PurchaseOrderLine.ServiceCode.Amount)
				required
					"UnitCostIsRequired"

			if  (CreditForRebill
			and  !ItemType.Service)
				cannot be changed
					"CannotChangeUnitCostOnCreditForRebill"


			if  (!PayablesInvoice.CreditOrDebitMemo)

				if (!PurchaseOrderLine.ServiceCode.Amount)
					constraint (EnteredUnitCost >= 0)
					    "UnitCostMustBeEqualToOrGreaterThanZeroForInvoiceLine"
				else
				if (PurchaseOrderLine.ServiceCode.Amount
				and EnteredUnitCost < 0)
					constraint (EnteredUnitCost * -1 <= PurchaseOrderLine.MatchedAmount) 				
						"ServiceByAmountCreditCannotExceedPurchaseOrderLineMatchedAmount" 
				    
				if  (ItemType.Service
				and  PurchaseOrderLine.ServiceCode.Amount)
	            	NextSentence = true

				else
					if (ActionType.CreateType)	
						default to first PurchaseOrderReceiptInvoiceLinkLastCostRel.PoCostUpd
						default to PurchaseOrderLine.LastMatchUnitCost
						default to PurchaseOrderLine.EnteredUnitCost
						if  (PurchaseOrderLine.CostOption.VendorDetermined)
							default to PurchaseOrderReceiptLine.MatchUnitCost


			if (NewCreditMemo)
				if (TransientOriginalDetail entered)
					LocalOriginalInvoiceDetail = TransientOriginalDetail
				else
					LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail
				if  (QuantityAdjustment)
					if  (EnteredUnitCost < 0)
						EnteredUnitCost				= EnteredUnitCost * -1
						MatchUnitCost 				= DerivedMatchUnitCost
						TotalDistributionAmount 	= DerivedDistributionAmount
						TotalBaseAmount				= DerivedBaseAmount

					AbsoluteUnitCost				= EnteredUnitCost

				if  (CostAdjustment)
					if  (EnteredUnitCost > 0
					and  ItemType.Inventoried)
						EnteredUnitCost				= EnteredUnitCost * -1
						MatchUnitCost 				= DerivedMatchUnitCost
						TotalDistributionAmount 	= DerivedDistributionAmount
						TotalBaseAmount				= DerivedBaseAmount

					if  (EnteredUnitCost > 0)
						AbsoluteUnitCost			= EnteredUnitCost
					else
						AbsoluteUnitCost			= EnteredUnitCost * -1

			if (Company.MatchMemoDelayHardEdits)
				if (NewCreditMemo)
					LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice

					if (PurchaseOrderLine.ServiceCode.Amount) 											
						if (AbsoluteUnitCost > PurchaseOrderLine.MatchedAmount) 				
							confirmation required
								"CostAdjustmentUnitCostCannotBeGreaterThanPurchaseOrderLineMatchedAmount.Continue?" 	
					else
					if (PayablesInvoice.MatchInvoiceReferenceRel exists)
						if (AbsoluteUnitCost > LocalOriginalInvoiceDetailRel.EnteredUnitCost)
							confirmation required
								"CostAdjustmentUnitCostCannotBeGreaterThanOriginalInvoiceUnitCost.Continue?"  
					else
						if (AbsoluteUnitCost > PurchaseOrderLine.EnteredUnitCost)
							confirmation required
								"CostAdjustmentMustBeLessThanPurchaseOrderLineUnitCost.Continue?"  
	
				if  (PayablesInvoice.CreditOrDebitMemo)
					if (TransientOriginalDetail entered)
						LocalOriginalInvoiceDetail = TransientOriginalDetail
					else
						LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail

					if  (ItemType.Service
					and  PurchaseOrderLine entered
					and  PurchaseOrderLine.ServiceCode.Amount)
						AbsoluteUnitCost = EnteredUnitCost * -1
						if (AbsoluteUnitCost > PurchaseOrderLine.MatchedAmount)
							confirmation required
								"CostCreditCannotBeGreaterThanPurchaseOrderLineMatchedAmount.Continue?"
					else
					if  (PayablesInvoice.MatchProcessType.ReceiptMatch

					and  PurchaseOrderLine.ItemType.Inventoried
					and  CostAdjustment)
						if (NewCreditMemo
						and  !CreditForRebill)
							if  (OriginalInvoiceDetailRel.PurchaseOrderReceiptLine entered 
							and  OriginalInvoiceDetailRel.PurchaseOrderReceiptLine.MatchObjectID = OriginalInvoiceDetailRel.MatchObjectID)
								AbsoluteUnitCost = EnteredUnitCost * -1
								if  (PurchaseOrderLine.CostOption.VendorDetermined
								or   OriginalInvoiceDetailRel.EnteredUnitCost = PurchaseOrderReceiptLine.OriginalUnitCost)
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - PurchaseOrderReceiptLine.MatchUnitCost
								else
								if  (VendorPriceUOM = PurchaseOrderLine.VendorPriceUOM)
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - PurchaseOrderLine.VendorPriceUnitCost
								else
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - PurchaseOrderLine.EnteredUnitCost
	
								if (CostDifference not entered)
									confirmation required
										"CostCreditNotAllowedIfNoCostDifferenceExists.Continue?" 							
								else
								if (CostDifference < 0)
									confirmation required
										"CostCreditNotAllowedIfOriginalInvoiceCostIsLessThanPOLineCost.Continue?" 				
								else
									CostBasis = OriginalInvoiceDetailRel.EnteredUnitCost
									if  (OriginalInvoiceDetailRel.EnteredUnitCost > CostDifference)
										CostBasis = CostDifference
									if (AbsoluteUnitCost > CostBasis)
										confirmation required
											"CostCreditCannotBeGreaterThanCostDifference.Continue?" 									
	
				if  (PayablesInvoice.InvoiceType.DebitMemo)
					if  (CostAdjustment)
						if (OriginalInvoiceDetailRel.EnteredUnitCost + EnteredUnitCost > PurchaseOrderLine.EnteredUnitCost)
							confirmation required
								"OriginalCostPlusAdjustedCostIsGreaterThanPOLineCost.Continue?"									

			else
				if (NewCreditMemo)
					LocalOriginalInvoice					= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice

					if (PurchaseOrderLine.ServiceCode.Amount) 											
						constraint (AbsoluteUnitCost <= PurchaseOrderLine.MatchedAmount) 				
							"CostAdjustmentUnitCostCannotBeGreaterThanPurchaseOrderLineMatchedAmount" 	
					else
					if (PayablesInvoice.MatchInvoiceReferenceRel exists)
						constraint (AbsoluteUnitCost <= LocalOriginalInvoiceDetailRel.EnteredUnitCost)
							"CostAdjustmentUnitCostCannotBeGreaterThanOriginalInvoiceUnitCost"  
					else
						constraint (AbsoluteUnitCost <= PurchaseOrderLine.EnteredUnitCost)
							"CostAdjustmentMustBeLessThanPurchaseOrderLineUnitCost"  
	
				if  (PayablesInvoice.CreditOrDebitMemo)
					if (TransientOriginalDetail entered)
						LocalOriginalInvoiceDetail = TransientOriginalDetail
					else
						LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail

					if  (ItemType.Service
					and  PurchaseOrderLine entered
					and  PurchaseOrderLine.ServiceCode.Amount)
						AbsoluteUnitCost = EnteredUnitCost * -1
						constraint (AbsoluteUnitCost <= PurchaseOrderLine.MatchedAmount)
							"CostCreditCannotBeGreaterThanPurchaseOrderLineMatchedAmount"
					else
					if  (PayablesInvoice.MatchProcessType.ReceiptMatch

					and  PurchaseOrderLine.ItemType.Inventoried
					and  CostAdjustment)
						if (NewCreditMemo
						and  !CreditForRebill)
							if  (OriginalInvoiceDetailRel.PurchaseOrderReceiptLine entered 
							and  OriginalInvoiceDetailRel.PurchaseOrderReceiptLine.MatchObjectID = OriginalInvoiceDetailRel.MatchObjectID)
								AbsoluteUnitCost = EnteredUnitCost * -1
								if  (PurchaseOrderLine.CostOption.VendorDetermined
								or   OriginalInvoiceDetailRel.EnteredUnitCost = PurchaseOrderReceiptLine.OriginalUnitCost)
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - PurchaseOrderReceiptLine.MatchUnitCost
								else
								if  (VendorPriceUOM = PurchaseOrderLine.VendorPriceUOM)
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - PurchaseOrderLine.VendorPriceUnitCost
								else
									CostDifference = OriginalInvoiceDetailRel.EnteredUnitCost - PurchaseOrderLine.EnteredUnitCost
	
								constraint (CostDifference entered)
									"CostCreditNotAllowedIfNoCostDifferenceExists" 							
								constraint (CostDifference > 0)
									"CostCreditNotAllowedIfOriginalInvoiceCostIsLessThanPOLineCost" 				
								CostBasis = OriginalInvoiceDetailRel.EnteredUnitCost
								if  (OriginalInvoiceDetailRel.EnteredUnitCost > CostDifference)
									CostBasis = CostDifference
								constraint (AbsoluteUnitCost <= CostBasis)
									"CostCreditCannotBeGreaterThanCostDifference" 									
	
				if  (PayablesInvoice.InvoiceType.DebitMemo)
					if  (CostAdjustment)
						constraint (OriginalInvoiceDetailRel.EnteredUnitCost + EnteredUnitCost <= PurchaseOrderLine.EnteredUnitCost)
							"OriginalCostPlusAdjustedCostIsGreaterThanPOLineCost"									


		ProductTaxCategory
			if (InventoriedOrNonstock)
				default to Item.ProductTaxCategory

		InvoiceLineTaxable
			if (OneSourceGeneric)
				InvoiceLineTaxable = true
			else			    
			if (TaxCode entered)
				InvoiceLineTaxable = true
			else
				InvoiceLineTaxable = false

		StockWeight
			if (!IsSubstitute)
				force default to PurchaseOrderLine.StockWeight

		ICNCode
			if (!IsSubstitute)
				force default to PurchaseOrderLine.ICNCode

		GlobalLineType
			if (PurchaseOrderReceiptLine entered)
				force default to PurchaseOrderReceiptLine.GlobalLineType
			else
				force default to PurchaseOrderLine.GlobalLineType

		SupplementaryQuantity
			if (!IsSubstitute)
				force default to PurchaseOrderLine.SupplementaryQuantity

		SupplementaryUOM
			if  (ICNCode entered)
				force default to ICNCode.SupplementaryUOM

		VendorPriceUOM
			default to PurchaseOrderLine.VendorPriceUOM

		VendorPriceUOMMultiplier
			default to PurchaseOrderLine.VendorPriceUOMMultiplier

		VendorBuyUOMMultiplier
			if (IsCatchWeight)
				default to PurchaseOrderLine.EnteredBuyUOMMultiplier
			default to PurchaseOrderLine.EnteredBuyUOMMultiplier

		EAMWorkOrder
			if (action type.Create)
				if  (EAMWorkOrder not entered)
					EAMWorkOrder = PayablesInvoice.EAMWorkOrder
					EAMWorkOrderActivity = PayablesInvoice.EAMWorkOrderActivity
				if  (EAMWorkOrder not entered)
					EAMWorkOrder = PurchaseOrderLine.EAMWorkOrder
					EAMWorkOrderActivity = PurchaseOrderLine.EAMWorkOrderActivity

			if (EAMWorkOrder entered)
				constraint (EAMWorkOrderRel exists)
					"EAMWorkOrderDoesNotExist"

			if (EAMWorkOrder changed)
			    EAMProjectID = EAMWorkOrder.ProjectID

		EAMWorkOrderActivity
			if (EAMWorkOrderActivity entered)
				constraint (EAMWorkOrderActivityRel exists)
					"EAMWorkOrderActivityDoesNotExist"

		EAMProjectID
			EAMProjectID = EAMWorkOrder.ProjectID

		EAMProjectType
			if (action type.Create)
				default to PurchaseOrderLine.EAMProjectType

		EAMProjectTaxCode
			if (action type.Create)
				default to PurchaseOrderLine.EAMProjectTaxCode

		EAMManufacturing
			if (action type.Create)
				default to PurchaseOrderLine.EAMManufacturing

		EAMTrade
			if (action type.Create)
				default to PurchaseOrderLine.EAMTrade

			if  (EAMTrade changed)
				if  (EAMWorkOrder.DistributionAccount not entered
				and  EAMTradeAccountOverrideRel.OverrideAccount entered)
					EAMCommodityCode = EAMTradeAccountOverrideRel.EAMCommodityCode

		EAMCommodityCode
			if (action type.Create)
				default to PurchaseOrderLine.EAMCommodityCode
				default to EAMTradeAccountOverrideRel.EAMCommodityCode

				if  (EAMWorkOrder.DistributionAccount not entered
				and  EAMTradeAccountOverrideRel.OverrideAccount entered)
					EAMCommodityCode = EAMTradeAccountOverrideRel.EAMCommodityCode

		CommodityCode
			if (action type.Create)
				default to PurchaseOrderLine.CommodityCode
				default to EAMTradeAccountOverrideRel.EAMCommodityCode

				if  (EAMWorkOrder.DistributionAccount not entered
				and  EAMTradeAccountOverrideRel.OverrideAccount entered)
					CommodityCode = EAMTradeAccountOverrideRel.EAMCommodityCode

		EAMLineType
			if (action type.Create)
				default to PurchaseOrderLine.EAMLineType

		Chemical
			if (action type.Create)
				default to PurchaseOrderLine.Chemical

		RebuildRepair
			if (action type.Create)
				default to PurchaseOrderLine.RebuildRepair

		TestRequired
			if (action type.Create)
				default to PurchaseOrderLine.TestRequired



	SubType MiscellaneousDetail Field Rules
		Item
			if (ItemType.Inventoried or ItemType.NonStock)
				required
			cannot be changed

		ItemType
			constraint (!ItemType.Service)
				"MiscellaneousDetailsCannotBeServiceItems"

			if  (Location not entered)
				Location = PayablesInvoice.Location

			if  (!PayablesInvoice.IsChargebackSubType)

				if (ItemLocationRel exists and ItemLocationRel.InventoryTracked)
					ItemType = ItemType.Inventoried
				else
				if (Item exists)
					ItemType = ItemType.NonStock
				else
					ItemType = ItemType.Special

				required

		VendorItem
			if  (!PayablesInvoice.IsChargebackSubType)
				if  (ItemType.Inventoried
				or   ItemType.NonStock)
					if (DefaultVendorItemRel exists)
						default to DefaultVendorItemRel.VendorItem
					else
						default to Item
				else
				if (ItemType.Special)
					required
						"VendorItemIsRequiredForSpecialItems"

		MatchDetailKey
			if  (!PayablesInvoice.IsChargebackSubType)
				if  (ItemType.Inventoried
				or   ItemType.NonStock)
					force default to Item
				else
				if  (ItemType.Special)
					force default to VendorItem
				else
					force default to ItemDescription

			LocalPurchaseOrder = PayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder
			constraint (!ItemOnPurchaseOrderLineRel exists)
				"ItemExistsOnPurchaseOrder;UsePurchaseOrderPanel"
			constraint (!ItemOnInvoiceRel exists)
				"ItemAlreadyEnteredOnInvoice"

			cannot be changed

		ItemDescription

			if  (!PayablesInvoice.IsChargebackSubType)
				if (ItemType.Inventoried or ItemType.NonStock)
					force default to Item.Description
				else
					default to VendorItem
				required

		EnteredQuantity
			required
				"InvoiceQuantityIsRequired"

		EnteredUnitCost
			required
				"UnitCostIsRequired"

		EnteredUOM
			if  (Location not entered)
				Location = PayablesInvoice.Location

			if (Item entered)
				default to VendorItem.VendorBuyUOM
				default to ItemLocationRel.DefaultSourceUOM.UnitOfMeasure
				default to Item.DefaultBuyUOM

				if (ItemType.Inventoried
				or  ItemType.NonStock)
					constraint (ValidItemUOMRel.DefaultForBuying
					or 			ValidItemUOMRel.OKForBuying)  
						"<EnteredUOM>IsNotAValidBuyUOMForItem<Item>"

			required

		Location
			default to PayablesInvoice.Location

		VendorBuyUOM
			force default to EnteredUOM

	Field Rules
		TransientCurrencyTable
			default to PayablesInvoice.CurrencyTable


		MatchedQuantity
			if (MiscellaneousDetail)
				force default to EnteredQuantity

			TotalDistributionAmount 						= DerivedDistributionAmount

			CurrencyWork.ExchangeDate						= PayablesInvoice.InvoiceDate
			CurrencyWork.TransactionAmount					= TotalDistributionAmount
			CurrencyWork.FromCurrency						= PayablesInvoice.InvoiceCurrency
			CurrencyWork.BaseAmount.ToCurrency				= Company.Currency
			CurrencyWork.BaseAmount.EnteredCurrencyRate     = PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			TotalBaseAmount 								= CurrencyWork.BaseAmount.OutputCurrencyAmount

		MatchUnitCost
			if (MiscellaneousDetail)
				force default to EnteredUnitCost

			if (MatchedQuantity not changed)
				TotalDistributionAmount 						= DerivedDistributionAmount

				CurrencyWork.ExchangeDate						= PayablesInvoice.InvoiceDate
				CurrencyWork.TransactionAmount					= TotalDistributionAmount
				CurrencyWork.FromCurrency						= PayablesInvoice.InvoiceCurrency
				CurrencyWork.BaseAmount.ToCurrency				= Company.Currency
				CurrencyWork.BaseAmount.EnteredCurrencyRate     = PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				TotalBaseAmount 								= CurrencyWork.BaseAmount.OutputCurrencyAmount

		TotalBaseAmount
			default to (MatchedQuantity * MatchUnitCost)

		TaxCode

			if (TaxCode not entered
			and TaxEntityRel.ThirdParty.TaxEngine)
				if (instance count of TaxEngineTaxDetailRel > 1
				and PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
					InvoiceLineTaxable = true
					TaxCode = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
				else
					InvoiceLineTaxable = true
					TaxCode = first TaxEngineTaxDetailRel.TaxCode
			else
			if (TaxCode not entered
			and action type.Create
			and !PayablesInvoice.DoOneSourceAfter
			and !PayablesInvoice.CallVertexByDocument
			and !CreditForRebill)

				if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
				and  !PayablesInvoice.TaxAdjustment.Calculate
				and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC
				and  !PayablesInvoice.TaxAdjustment.NoTax
				and  !TaxEntityRel.ThirdParty.TaxEngine) 

					initialize CalculateTax
					CalculateTax.TaxCode					= PayablesInvoice.TaxCode
					CalculateTax.TaxEntity					= Company.AccountingEntity
					CalculateTax.TaxableAmount				= TotalDistributionAmount
					CalculateTax.InvoiceAmount				= TotalDistributionAmount
					CalculateTax.System						= "AP"
					CalculateTax.TaxDate					= PayablesInvoice.InvoiceDate
					CalculateTax.Function					= CalculateTax.Function.Inquire
					LocalCalculateTaxExecuted 				= CalculateTax.ExecuteCalculateTax

					I1 = 1
					IsInvoicedTax = false
					while ((I1 <= 9) and (!IsInvoicedTax) and (CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered))
						if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag = "I")
							IsInvoicedTax = true
						I1 += 1



					if  (PayablesInvoice.TaxAdjustment.OverrideProductOnly
					or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
						if  (!PayablesInvoice.TaxCode.TaxType.CalculatedRate
						or   IsInvoicedTax
						or   PurchaseOrderLine.TaxCode not entered)
							default to PayablesInvoice.TaxCode

					if  (PayablesInvoice.TaxAdjustment.OverrideTaxablePOLine
					or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC)
						if (PurchaseOrderLine.Taxable)
							if  (!PayablesInvoice.TaxCode.TaxType.CalculatedRate
							or   IsInvoicedTax)
								default to PayablesInvoice.TaxCode

					default to PurchaseOrderLine.TaxCode

				if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate)
					default to PayablesInvoice.TaxCode

			if (TaxCode entered
			and !PayablesInvoice.DoOneSourceAfter
			and !PayablesInvoice.CallVertexByDocument
			and !CreditForRebill
			and !TaxEntityRel.ThirdParty.VertexOSeries
			and !TaxEntityRel.ThirdParty.TaxEngine) 


				InvoiceLineTaxable = true




				if  (TaxCode.TaxType.CalculatedRate)
					constraint (TaxCode = PayablesInvoice.TaxCode)
						"IfTaxCodeTypeIsCalculatedRateThenTheSameTaxCodeIsRequiredAtInvoiceHeader" 

				if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate)  
					constraint (TaxCode = PayablesInvoice.TaxCode)
						"IfTheInvoiceTaxCodeTypeIsCalculatedRateThenTheLineTaxCodeMustMatch" 

				initialize CalculateTax
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.System						= "AP"
				CalculateTax.TaxableAmount				= TotalDistributionAmount
				CalculateTax.InvoiceAmount				= TotalDistributionAmount
				CalculateTax.TaxDate					= PayablesInvoice.InvoiceDate
				CalculateTax.Function					= CalculateTax.Function.Inquire
				LocalCalculateTaxExecuted 				= CalculateTax.ExecuteCalculateTax
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>E5"

				I1 = 1
				IsInvoicedTax = false
				while ((I1 <= 9) and (!IsInvoicedTax) and (CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode entered))
					if (CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag = "I")
						IsInvoicedTax = true
					I1 += 1

				if  (TaxCode.TaxType.CalculatedRate
				and  TaxCode != PayablesInvoice.TaxCode)
					constraint (!IsInvoicedTax)
						"OnlyAccruedTaxesCanBeCombinedWithCalculatedRateTax" 

		InvoiceLineTaxable
			if (TaxCode entered)
				InvoiceLineTaxable = true

			if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
			and  !PayablesInvoice.TaxAdjustment.Calculate
			and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
				if  (PayablesInvoice.TaxAdjustment.OverrideTaxablePOLine
				or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC)
					InvoiceLineTaxable = false

		TaxAmount
			if (!InvoiceLineTaxable
			and !CreditForRebill)
				initialize TaxAmount

		TotalExemptAmount
		    if (TotalExemptAmount entered)
    			TaxableUnitCost = ((TotalDistributionAmount - TotalExemptAmount) / MatchedQuantity)
		TotalExemptAmountTaxCode
			if (TotalExemptAmountTaxCode entered)
			    constraint (TaxCode entered)
			        "ExemptAmountTaxCodeShouldOnlyBeUsedIfLineIsTaxed"
		    
		TaxableUnitCost
			if (EnteredUnitCost < 0)
				constraint (TaxableUnitCost >= EnteredUnitCost)
					"TaxableUnitCostCannotExceedEnteredUnitCost"
			else
				constraint (TaxableUnitCost <= EnteredUnitCost)
					"TaxableUnitCostCannotExceedEnteredUnitCost"

		TaxType
			default to TaxCode.TaxType
			default to PayablesInvoice.TaxType

		CommodityCode
			if (ItemRecordExists
			and CommodityCode entered
			and Item.CommodityCode entered)
				force default to Item.CommodityCode 

		RecordSource
			default to RecordSource.LineMatchMa43

		DistributionDate
			force default to PayablesInvoice.DistributionDate

		HSNSACCode
			if (IsHSNSACCodeEnabled)
				if (!PayablesInvoice.MatchProcessType.Expense)
					if (PayablesInvoice.MatchProcessType.ServiceContract)
						default to ContractLine.HSNSACCode
					default to PurchaseOrderLine.HSNSACCode
					required
						"HSN_/SACCodeIsRequired"
			else
				cannot be entered
					"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"

	Create Rules

		if  (ItemType.Inventoried or ItemType.NonStock)
			round EnteredQuantity to nearest DerivedRoundToQuantity 

   		constraint (!PayablesInvoice.MatchProcessType.AOCOnly)
			"CannotAddItemDetailForAOCOnlyInvoice" 

		if  (!PayablesInvoice.IsMemoOnly
		and   PurchaseOrderLine entered
		and   PurchaseOrderReceiptLine not entered
		and  !PurchaseOrderLine.ServiceCode.Amount)
			constraint (!SameInvoiceAndPORel exists)
				"OnlyOneInvoiceLineAllowedForEachPurchaseOrderLine"

		if  (PayablesInvoice.InvoiceType.MatchPrepayment
		and  PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
			constraint (RecordSource = "MA")
				"CannotAddDetailsToPrepaymentInvoiceUsingPrepayFromInvoiceMethod"

		if (MiscellaneousDetail)
			if (PayablesInvoice.MatchProcessType.Expense)
				constraint (PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount entered
				or          Company.InvoiceItemDetailAccount entered)
					"ItemDetailAccountRequiredInPayablesSetupForItemDetailsNotRelatedToPurchaseOrder"

		if  (PayablesInvoice.IsMemoOnly)
			if  (MemoAdjustType.CostAdjustment
			and  ItemType.Inventoried
			and !RecordSource.CreatedWithinMatch)
				constraint (!OtherCostAdjustmentsRel exists)
				    "CostAdjustmentAlreadyExistsForItem<Item>"
				    
			if  (MemoAdjustType.QuantityAdjustment
			and !RecordSource.CreatedWithinMatch
			and !MiscellaneousDetail)
				if (!ItemType.Service)
					if (PurchaseOrderReceiptLine not entered)
						constraint (!OtherQuantityAdjustmentsRel exists)
						    "QuantityAdjustmentAlreadyExistsForItem<Item>"
					else 
						for each OtherQuantityAdjustmentsRel
							constraint (PurchaseOrderReceipt != each.PurchaseOrderReceipt)
							    "QuantityAdjustmentAlreadyExistsForItem<Item>"
				else
				if  (ItemType.Service
				and  PurchaseOrderLine.ServiceCode.Quantity
				and  OtherQuantityAdjustmentsRel exists)
				    WorkEnteredQuantity = ((EnteredQuantity + sum OtherQuantityAdjustmentsRel.EnteredQuantity) * -1)
						constraint  (WorkEnteredQuantity <= PurchaseOrderLine.MatchedQuantity)
							"SumOfCreditQuantitiesCannotBeGreaterThanMatchedQuantity"

		if (action = "Create"
		or  action = "CreateFromPurchaseOrderLine")
			if (LinkedToAsset)
				if (not PayablesInvoice.InterfaceInProcess)	
					constraint (PayablesInvoice.IsUpdateable)
						"CannotAddAnInvoiceLineWithAnAssetIfInvoiceHasBeenReleased"


		if  (BypassTaxDefault)
		    NextSentence = true
		else
		if  (PurchaseOrderLine entered
		and !PayablesInvoice.InterfaceInProcess
		and !PayablesInvoice.InvoiceType.CreditMemo)
			if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
			and  !PayablesInvoice.TaxAdjustment.Calculate
			and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
				TaxCode = PurchaseOrderLine.TaxCode
				if  (PayablesInvoice.TaxAdjustment.OverrideProductOnly
				or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
					TaxCode = PayablesInvoice.TaxCode
				else
				if  (PayablesInvoice.TaxAdjustment.OverrideTaxablePOLine
				or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC)
					if  (PurchaseOrderLine.TaxCode entered)
						TaxCode = PayablesInvoice.TaxCode

				if (TaxCode entered)
					InvoiceLineTaxable = true
					

			if  (TaxCode entered
			and (ItemType.Inventoried
			or   ItemType.NonStock))
				ProductTaxCategory = PurchaseOrderLine.ProductTaxCategory

			if  (TaxCode entered
			and  InvoiceLineTaxable
			and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
			and  !PayablesInvoice.TaxAdjustment.Calculate
			and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
				if  (TaxCode entered
				and  PurchaseOrderLine.TaxUsageCode entered)
					TaxUsageCode				= PurchaseOrderLine.TaxUsageCode
				else
				if  (Location entered)
					if  (VendorCompanyDefaultRel exists
					and  VendorCompanyDefaultRel.TaxUsageCode entered)
						TaxUsageCode			= VendorCompanyDefaultRel.TaxUsageCode
					else
					if  (VendorLocationRel exists
					and  VendorLocationRel.TaxUsageCode entered)
						TaxUsageCode			= VendorLocationRel.TaxUsageCode
				else
					if  (VendorCompanyDefaultRel exists
					and  VendorCompanyDefaultRel.TaxUsageCode entered)
						TaxUsageCode			= VendorCompanyDefaultRel.TaxUsageCode
					else
					if  (Vendor.TaxUsageCode entered)
						TaxUsageCode			= Vendor.TaxUsageCode
					else
						TaxUsageCode			= Vendor.VendorClass.TaxUsageCode

				initialize GetRetainage
				GetRetainage.PurchaseOrder								= PurchaseOrder
				GetRetainage.PurchaseOrderLine							= PurchaseOrderLine
				GetRetainage.Contract									= Contract
				GetRetainage.ContractLine								= ContractLine
				LocalGetRetainage 										= GetRetainage.PerformGet
				RetainagePercent 										= GetRetainage.RetainagePercent

			if (NewCreditMemo)
				if  (QuantityAdjustment)
					constraint  (!PurchaseOrderLine.ServiceCode.Amount)
						"QuantityAdjustmentNotAllowedOnAmountTypeServiceLine"									

		else
		if  (ContractLine entered
		and !PayablesInvoice.InterfaceInProcess
		and !PayablesInvoice.InvoiceType.CreditMemo)
			if  (PayablesInvoice.InvoiceType.DebitMemo)
				constraint (!ContractLine.ServiceCode.Amount)
					"CannotIssueDebitMemoForAmountTypeServices"										

				if  (QuantityAdjustment)
					constraint (!ContractLine.ServiceCode.Quantity)
						"QuantityAdjustmentForQuantityTypeServiceNotAllowedOnDebitMemo"	

			if  (Location not entered)
				Location = PayablesInvoice.Location	
				
			if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
			and  !PayablesInvoice.TaxAdjustment.Calculate
			and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
				if (Location entered
				and ContractLineTaxCodeLocationRel exists)
					TaxCode = first ContractLineTaxCodeLocationRel.TaxCode 
				else
				if (ContractLineTaxCodeCompanyRel exists)
					TaxCode = first ContractLineTaxCodeCompanyRel.TaxCode 
				else 
				if (ContractLine.TaxCode entered)
					TaxCode = ContractLine.TaxCode
				else
				if (Location entered
				and ContractTaxCodeLocationRel exists)
					TaxCode = first ContractTaxCodeLocationRel.TaxCode
				else 
				if (ContractTaxCodeCompanyRel exists)
					TaxCode = first ContractTaxCodeCompanyRel.TaxCode 

				if  (PayablesInvoice.TaxAdjustment.OverrideProductOnly
				or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
					TaxCode = PayablesInvoice.TaxCode
				else
				if  (PayablesInvoice.TaxAdjustment.OverrideTaxablePOLine
				or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC)
					if  (PurchaseOrderLine.TaxCode entered)
						TaxCode = PayablesInvoice.TaxCode

			initialize GetRetainage
			GetRetainage.PurchaseOrder								= blank
			GetRetainage.PurchaseOrderLine							= blank
			GetRetainage.Contract									= Contract
			GetRetainage.ContractLine								= ContractLine
			LocalGetRetainage 										= GetRetainage.PerformGet
			RetainagePercent 										= GetRetainage.RetainagePercent

		if  (!PayablesInvoice.CreditOrDebitMemo
		and  PayablesInvoice.MatchProcessType.ServiceContract)
			
			include EditServiceLimits

		if  (PurchaseOrder entered 
		and  TaxCode entered 
		and !Suffix entered
		and  EntityTaxCodeRel.AccruedOrInvoiced.Invoiced
		and  EntityTaxCodeRel.TaxTerms.Taxafterterms
		and  PayablesInvoice.TermsCode entered
		and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
		and  !PayablesInvoice.TaxAdjustment.Calculate
		and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)

			constraint (PayablesInvoice.TaxAmount entered)
				"TaxAmountRequiredOnInvoiceIfDiscountAmountCalculatedAfterTax"  


	Create Exit Rules 


		if (CreditForRebill)

			NextSentence = true
		else
		if (MiscellaneousDetail
		and !RecordSource.CreatedWithinMatch)
			invoke CreateFromMatch PayablesInvoiceDistribution
				invoked.Company								= Company
				invoked.PayablesInvoice						= PayablesInvoice
				invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail
				invoked.DistributionType					= "D"
				if (PayablesInvoice.MatchProcessType.Expense)
					if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
						invoked.GLFinanceCodeBlock			= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount	
						invoked.DistributionAccount			= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
					else
						invoked.GLFinanceCodeBlock			= Company.ToleranceOffsetAccount	
						invoked.DistributionAccount			= Company.ToleranceOffsetAccount
				else
					if (PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount entered)
						invoked.GLFinanceCodeBlock			= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount	
						invoked.DistributionAccount			= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount
					else
						invoked.GLFinanceCodeBlock			= Company.InvoiceItemDetailAccount	
						invoked.DistributionAccount			= Company.InvoiceItemDetailAccount

				invoked.GLTransactionAmount					= TotalDistributionAmount

				if (BypassInvoiceErrorChecking)
					invoked.BypassUpdatingInvoiceTotals		= true
					invoked.TransientBypassErrorUpdate		= true

			if (TaxCode entered)
				TaxAmount									= DerivedMiscellaneousDetailTax
				round TaxAmount to nearest DerivedRoundTo

				invoke CreateFromMatch PayablesInvoiceDistribution
					invoked.Company								= Company
					invoked.PayablesInvoice						= PayablesInvoice
					invoked.DistributionType					= "D"
					if (!EntityTaxCodeRel.LandedCost)
						if (EntityTaxCodeRel.TaxPoint.PaymentDate)
							invoked.GLFinanceCodeBlock			= EntityTaxCodeRel.TaxInputDueAccount
							invoked.DistributionAccount			= EntityTaxCodeRel.TaxInputDueAccount
						else
							invoked.GLFinanceCodeBlock			= EntityTaxCodeRel.TaxInputAccount
							invoked.DistributionAccount			= EntityTaxCodeRel.TaxInputAccount
					else
					if (PayablesInvoice.MatchProcessType.Expense)
						if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
							invoked.GLFinanceCodeBlock			= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount	
							invoked.DistributionAccount			= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
						else
							invoked.GLFinanceCodeBlock			= Company.ToleranceOffsetAccount	
							invoked.DistributionAccount			= Company.ToleranceOffsetAccount
					else
						if (PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount entered)
							invoked.GLFinanceCodeBlock			= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount	
							invoked.DistributionAccount			= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount
						else
							invoked.GLFinanceCodeBlock			= Company.InvoiceItemDetailAccount	
							invoked.DistributionAccount			= Company.InvoiceItemDetailAccount
					invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail

					invoked.GLTransactionAmount					= TaxAmount
					invoked.BypassBudgetEdit					= BypassBudgetEdit
					invoked.TaxCode								= TaxCode
					invoked.TaxUsageCode						= TaxUsageCode
					invoked.ProductTaxCategory 					= ProductTaxCategory
					invoked.TaxableAmount						= TotalDistributionAmount

					if (BypassInvoiceErrorChecking)
						invoked.BypassUpdatingInvoiceTotals		= true
						invoked.TransientBypassErrorUpdate		= true

			invoke InvoiceUpdate PayablesInvoice

		else
		if  (ItemType.Service								
		and  RecordSource.CreatedWithinMatch
		and  Contract entered
		and  PurchaseOrder not entered
		and  PayablesInvoice.IsChargeback
		and  ChargebackFromRecon)
			BypassBudgetEdit  = true
			include CopyContractLineDistributionsRuleBlock

			if  (TaxCode entered
			and  !PayablesInvoice.CallVertexByDocument
			and  !PayablesInvoice.DoOneSourceAfter)
				BypassBudgetEdit  = true
				ProcessingTax = true
				include CopyContractLineDistributionsRuleBlock
				ProcessingTax = false
		else
		if  (!ItemType.Inventoried
		and  !RecordSource.CreatedWithinMatch
		and  !BypassDistributionCreate)
			if  (TransientDistributionAccount entered)
				BypassBudgetEdit  = true
				include DoTransientAccountDistribution
			else
			if  (PurchaseOrderLine entered)
				BypassBudgetEdit  = true
				include CopyPOLineDistributionsRuleBlock
			else
			if (ContractLine entered)
				BypassBudgetEdit  = true
				include CopyContractLineDistributionsRuleBlock


			if  (TaxCode entered
			and  !PayablesInvoice.DoOneSourceAfter
			and  !PayablesInvoice.CallVertexByDocument
			and  !TaxCode.TaxType.CalculatedRate
			and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
			and  !PayablesInvoice.TaxAdjustment.Calculate
			and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)

				if  (TransientDistributionAccount entered)
					BypassBudgetEdit  = true
					ProcessingTax = true
					include DoTransientAccountDistribution
					ProcessingTax = false
				else
				if  (PurchaseOrderLine entered)

					BypassBudgetEdit  = true
					ProcessingTax = true
					include CopyPOLineDistributionsRuleBlock
					ProcessingTax = false
				else
				if (ContractLine entered)
					BypassBudgetEdit  = true
					ProcessingTax = true
					include CopyContractLineDistributionsRuleBlock
					ProcessingTax = false




			if  (TransientDistributionAccount entered
			or   PurchaseOrderLine entered
			or   ContractLine entered)
				if (!PayablesInvoice.IsMemoOnly)
					include CheckPOCommitments

	Actions




		TriggerPOCostService is an Instance Action
			default label is untranslatable
	  	 	restricted
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger)
					trigger "POCostMessageService" PA service
						resume on error
						title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>PO:<PurchaseOrder>"
						Criteria
							Company.FinanceEnterpriseGroup
							Company


						Variables
							Company
								variable name is Company
							PurchaseOrder
								variable name is Purchaseorder
							Vendor
								variable name is Vendor
							Invoice
								variable name is Invoice
							Buyer
								variable name is Buyer
							Buyer.Employee.PresentationNameSnapshot
								variable name is BuyerName
							Buyer.Employee.EmployeeWorkEmailAddress
								variable name is BuyerEmailAddress
							Buyer.Employee.Name.GivenName
								variable name is BuyerLastName
							Buyer.Employee.Name.FamilyName
								variable name is BuyerFirstName








        
        
        
        
        Create is a Create Action
			valid when (AllowCreateUpdateDelete)
        	Entrance Rules

				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				if (RecordSource.LineMatchMa43)
					if (!PayablesInvoice.InvoiceType.MatchPrepayment
					or  !PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay)
						constraint (!InvoiceSourceRel exists)
							"CannotAddDetails;DetailsFromInvoiceEntryExist"	
    	    		    constraint (!PayablesInvoice.IsMatched)
	                		"CannotInterfaceLineIfInvoiceIsMatched"

				if (IsCatchWeight
				and BuyUOMMatchedQuantity not entered)
					if (PurchaseOrderLine.CatchWeightQuantity entered)
				    	BuyUOMMatchedQuantity	= (PurchaseOrderLine.ReceivedQuantity + PurchaseOrderLine.WriteOffQuantity + PurchaseOrderLine.ChargebackQuantity - PurchaseOrderLine.MatchedQuantity - PurchaseOrderLine.ArchivedQuantity)
					else
				    	BuyUOMMatchedQuantity	= PurchaseOrderLine.Quantity

				if ((PurchaseOrderLine.ItemType.Inventoried
					or PurchaseOrderLine.ItemType.NonStock)
				and !IsCatchWeight
				and  EnteredUOM != PurchaseOrderLine.VendorPriceUOM
				and  PurchaseOrderLine.VendorPriceUOM entered)


					constraint (ValidItemUOMRel.DefaultForBuying
					or 			ValidItemUOMRel.OKForBuying)  
						"<EnteredUOM>IsNotAValidBuyUOMForItem<Item>"

					initialize UOMCalculation
					UOMCalculation.InputQuantity = EnteredQuantity
					UOMCalculation.InputToUOM = PurchaseOrderLine.VendorPriceUOM
					UOMCalculation.InputUOMConversion = EnteredUOMMultiplier
					UOMCalculation.InputToUOMConversion = VendorPriceUOMMultiplier
					UOMCalculation.Method =  UOMCalculation.Method.ConvertToAlternate
					if (Item.NumberOfDecimalsQuantity.0Decimals)
						UOMCalculation.ValidateDecimal = true
					else
						UOMCalculation.DoRounding = true
					constraint (UOMCalculation.OutputQuantity entered)
						"CannotConvertQuantityCleanlyFor0DecimalItem;Use<PurchaseOrderLine.VendorPriceUOM>UOM"

				if (PurchaseOrderLine entered
				and PurchaseOrderLine.Contract entered)
				    Contract 		= PurchaseOrderLine.Contract
				    ContractLine 	= PurchaseOrderLine.ContractLine

			Exit Rules

				if (!RecordSource.CreatedWithinMatch
				and !MiscellaneousDetail)
					include CheckTolerance

				include UpdateQuantityAmountAndCost

				if  (!MiscellaneousDetail)
					include CommonUpdates

					if (!RecordSource.CreatedWithinMatch)
						ActionType = ActionType.CreateType
						if (TaxCode entered)
							include ProcessDetailTax

				if (!BypassInvoiceErrorChecking
				and !PayablesInvoice.InterfaceInProcess
				and !MiscellaneousDetail)

					invoke InvoiceUpdate PayablesInvoice

		CreateFromPurchaseOrderLine is a Create Action
			restricted
			valid when (PayablesInvoice.IsUpdateable)
			Entrance Rules

				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				constraint (!PayablesInvoice.MatchProcessType.ServiceContract)
					"CannotAddItemDetailForServiceContractInvoice"	


				constraint (PurchaseOrderLine entered)
					"PurchaseOrderLineRequired"
				constraint (PurchaseOrderLine.Closed.No or PurchaseOrderLine.Closed not entered)
					"CannotAdd;PurchaseOrderLineClosed"				

			Action Rules

				include CheckTolerance
				include UpdateQuantityAmountAndCost

			Exit Rules

				include CommonUpdates
	   			ActionType = ActionType.CreateType
				if (TaxCode entered)
					include ProcessDetailTax
				if (!BypassInvoiceErrorChecking
				and !PayablesInvoice.InterfaceInProcess)

					invoke InvoiceUpdate PayablesInvoice


		CreateFromContractLine is a Create Action

			restricted
			valid when (PayablesInvoice.IsUpdateable)
			Entrance Rules

				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				constraint (ContractLine entered)
					"ContractLineRequired"

				if (PayablesInvoice.InvoiceType.CreditMemo)
					if (EnteredUnitCost < 0)
						AbsoluteUnitCost = EnteredUnitCost * -1
					else
						AbsoluteUnitCost = EnteredUnitCost

				    if  (ContractLine.ServiceCode.Quantity
				    and (EnteredQuantity < 0
				    or   AbsoluteUnitCost = ContractLine.DerivedMatchBaseCost))
						MemoAdjustType				= 2
						CostOrQuantityAdjustment	= true
						if (EnteredQuantity > 0)
						    EnteredQuantity = EnteredQuantity * -1
						    MatchedQuantity = MatchedQuantity * -1
						if (EnteredUnitCost < 0)
						    EnteredUnitCost = EnteredUnitCost * -1
						    MatchUnitCost   = MatchUnitCost * -1
						    
					else
						MemoAdjustType				= 1
						CostOrQuantityAdjustment	= true
								    
			Action Rules

				constraint (PayablesInvoice.MatchProcessType.ServiceContract)
					"CannotCreateFromContractLinesIfMatchProcessTypeIsNotServiceContract"
				include CheckTolerance
				include UpdateQuantityAmountAndCost

			Exit Rules

				if (!PayablesInvoice.IsMemoOnly)
					include CommonUpdates
	   			ActionType = ActionType.CreateType
				if (TaxCode entered)
					include ProcessDetailTax
				if (!BypassInvoiceErrorChecking
				and !PayablesInvoice.InterfaceInProcess)
					invoke InvoiceUpdate PayablesInvoice


		MemoCreate is a Create Action
			restricted
			bypass field rules
			Entrance Rules


				if (PurchaseOrderLine not entered)
					initialize PurchaseOrder 
					
				PayablesInvoiceDetail = last SameInvoiceAndPORel.PayablesInvoiceDetail + 1  

				if (TransientOriginalDetail entered)
					LocalOriginalInvoiceDetail = TransientOriginalDetail
				else
					LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail

				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				if  (!MatchPurchaseOrderInvoiceRel exists
				and   PurchaseOrder entered 
				and  !PayablesInvoice.MatchProcessType.ServiceContract
				and  !PayablesInvoice.IsChargebackSubType)
					invoke Create MatchPurchaseOrderInvoice
						invoked.Company                           	= Company
						invoked.PurchaseOrder 					  	= PurchaseOrder
						invoked.PayablesInvoice						= PayablesInvoice
						invoked.Vendor                            	= PayablesInvoice.Vendor

				include DefaultingForCreateUsingBypassFieldRules



				Vendor						= PayablesInvoice.Vendor
				Invoice						= PayablesInvoice.Invoice
				Suffix						= PayablesInvoice.Suffix
				CancelSequence				= PayablesInvoice.CancelSequence
				PORelease					= PurchaseOrder.PORelease
				POCode						= PurchaseOrder.POCode
				Buyer						= PurchaseOrder.Buyer
				InvoiceType					= PayablesInvoice.InvoiceType		

				if (MemoAdjustType not entered)
				    if (EnteredQuantity < 0)
				        MemoAdjustType = 2
				    else
				    	MemoAdjustType = 1

				if  (PayablesInvoice.MatchProcessType.ServiceContract
				and  MatchServiceContractInvoiceRel not exists) 
					invoke Create MatchServiceContractInvoice 
						invoked.Company						= Company
						invoked.Contract 					= Contract  
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.VendorGroup 				= Company.VendorGroup 

			Action Rules
				include UpdateQuantityAmountAndCost
				if (TaxCode entered)
					if (TaxEntityRel.ThirdParty.TaxEngine)
						TaxAmount = TaxAmount * -1
					if (PayablesInvoice.IsChargeback
					and TaxCode.TaxType.TaxTableCode
					and TaxDistributionsRel exist)
						TaxAmount = sum InvoicedTaxDistributionsRel.DistributionAmount.CurrencyAmount
						AccruedTaxAmount = sum AccruedTaxDistributionsRel.DistributionAmount.CurrencyAmount
					else
						include ProcessDetailTax
						
			Exit Rules 				
				if (!BypassInvoiceErrorChecking
				and !PayablesInvoice.InterfaceInProcess)
					invoke InvoiceUpdate PayablesInvoice

		OnlineMemoCreate is a Create Action 
			restricted //This will operate identical to "MemoCreate" with the exception that it does not bypass field rules.
			Entrance Rules //it is only invoked by "CreateMemoCostAdjustment" && "CreateMemoQuantityAdjustment"

				if (PayablesInvoice.InvoiceSource.CreditForRebill)
					constraint (!AnotherCreditForRebillDetailRel exists)
						"LineHasAlreadyBeenCreditedOnOtherInvoice"

				if (PayablesInvoice.TaxAdjustment.NoTax)
					initialize TaxCode
					InvoiceLineTaxable = false

				PayablesInvoiceDetail = last SameInvoiceAndPORel.PayablesInvoiceDetail + 1  

				if (TransientOriginalDetail entered)
					LocalOriginalInvoiceDetail = TransientOriginalDetail
				else
					LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail

				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				if  (!MatchPurchaseOrderInvoiceRel exists
				and   PurchaseOrder entered 
				and  !PayablesInvoice.MatchProcessType.ServiceContract
				and  !PayablesInvoice.IsChargebackSubType)
					invoke Create MatchPurchaseOrderInvoice
						invoked.Company                           	= Company
						invoked.PurchaseOrder 					  	= PurchaseOrder
						invoked.PayablesInvoice						= PayablesInvoice
						invoked.Vendor                            	= PayablesInvoice.Vendor

				LocalOriginalInvoice 		= first PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
				Location	   				= OriginalInvoiceDetailRel.Location
				ItemType     				= OriginalInvoiceDetailRel.ItemType
				VendorItem     				= OriginalInvoiceDetailRel.VendorItem
				MatchDetailKey     			= OriginalInvoiceDetailRel.MatchDetailKey
				ItemDescription     		= OriginalInvoiceDetailRel.ItemDescription
				Vendor						= PayablesInvoice.Vendor

				Invoice						= PayablesInvoice.Invoice
				InvoiceType					= PayablesInvoice.InvoiceType
				Suffix						= PayablesInvoice.Suffix
				CancelSequence				= PayablesInvoice.CancelSequence
				PORelease					= PurchaseOrder.PORelease
				POCode						= PurchaseOrder.POCode
				Buyer						= PurchaseOrder.Buyer

				if (PurchaseOrderLine entered
				and PurchaseOrderLine.Contract entered)
				    Contract 		= PurchaseOrderLine.Contract
				    ContractLine 	= PurchaseOrderLine.ContractLine

				if  (PayablesInvoice.MatchProcessType.ServiceContract
				and  MatchServiceContractInvoiceRel not exists) 
					invoke Create MatchServiceContractInvoice 
						invoked.Company						= Company
						invoked.Contract 					= Contract  
						invoked.PayablesInvoice				= PayablesInvoice
						invoked.VendorGroup 				= Company.VendorGroup 
			Action Rules






				if (TransientOriginalDetail entered)
					LocalOriginalInvoiceDetail = TransientOriginalDetail
				else
					LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail

				if (FromInterface)
					if (Company.MatchMemoDelayHardEdits)
						NextSentence = true
					else
					if (CostAdjustment)
						constraint (!OriginalInvoiceDetailRel.OpenMatchInvoiceMessageRel exists)
							"CannotCreateMemoCostAdjustment;OpenMessageExistsOnOriginalInvoice"

						if  (ContractLine entered)
							if  (ContractLine.ServiceCode.Amount or ContractLine.ServiceCode.Quantity)
								constraint (!InvoiceType.DebitMemo)
									"CannotIssueDebitMemoForAmountOrQuantitTypeServices"			

						if  (ItemType.Service
						and  PurchaseOrderLine entered
						and  PurchaseOrderLine.ServiceCode.Amount)
							constraint (PurchaseOrderLine.MatchedAmount entered)
								"CannotCreateCostAdjustment.ThereIsNoRemainingMatchedAmountOnPurchaseOrderLine"
						else
						if  (OriginalInvoiceDetailRel.PurchaseOrderReceiptLine entered
						and  !PayablesInvoice.InvoiceType.DebitMemo
						and  !CreditForRebill)
							if  (IsCatchWeight)
								constraint (EnteredUnitCost > PurchaseOrderLine.EnteredUnitCost)
									"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost"
							else				    
							if  (PurchaseOrderLine.CostOption.VendorDetermined
							or   OriginalInvoiceDetailRel.EnteredUnitCost = PurchaseOrderReceiptLine.OriginalUnitCost)
								constraint (OriginalInvoiceDetailRel.EnteredUnitCost > OriginalInvoiceDetailRel.PurchaseOrderReceiptLine.MatchUnitCost)
									"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedReceiptLineUnitCost"
							else
							if  (EnteredUOM = PurchaseOrderLine.EnteredBuyUOM)
								constraint (OriginalInvoiceDetailRel.EnteredUnitCost > PurchaseOrderLine.EnteredUnitCost)
									"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost"
							else
							if  (VendorPriceUOM = PurchaseOrderLine.VendorPriceUOM)
								constraint (OriginalInvoiceDetailRel.EnteredUnitCost > PurchaseOrderLine.VendorPriceUnitCost)
									"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost"
					else
					if (QuantityAdjustment)
						if (ContractLine entered)
							constraint (!ContractLine.ServiceCode.Amount)
								"QuantityAdjustmentNotAllowedOnAmountTypeServiceLine"			
							if  (ContractLine.ServiceCode.Quantity)
								constraint (!InvoiceType.DebitMemo)
									"CannotIssueDebitMemoForAmountOrQuantitTypeServices"			

				include UpdateQuantityAmountAndCost
			Exit Rules
				if (CreditForRebill)
					include ReverseOriginalDistributions
				else
				if (TaxCode entered)
					include ProcessDetailTax
				if (!PayablesInvoice.BackgroundProcessing entered)
					invoke InvoiceUpdate PayablesInvoice

				if (OneSourceGeneric)
					invoke Update PayablesInvoiceDetailTaxRel
						invoked.TaxingJurisdiction		= OriginalInvoiceDetailRel.PayablesInvoiceDetailTaxRel.TaxingJurisdiction
						invoked.ShipToLocation			= OriginalInvoiceDetailRel.PayablesInvoice.Location
						invoked.TaxAccrualCode			= OriginalInvoiceDetailRel.PayablesInvoiceDetailTaxRel.TaxAccrualCode
					    invoked.OverrideTaxAmount 		= OriginalInvoiceDetailRel.PayablesInvoiceDetailTaxRel.OverrideTaxAmount * -1
						invoked.CalculatedTaxAmount		= OriginalInvoiceDetailRel.PayablesInvoiceDetailTaxRel.CalculatedTaxAmount * -1

		CreateTemporary is a Create Action

			default label is untranslatable
			restricted
			bypass field rules
			Entrance Rules
				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				PayablesInvoiceDetail = last SameInvoiceAndPORel.PayablesInvoiceDetail + 1

				if (!MatchPurchaseOrderInvoiceRel exists
				and  PurchaseOrder entered 
				and !PayablesInvoice.MatchProcessType.ServiceContract
				and !PayablesInvoice.IsChargebackSubType)
					invoke Create MatchPurchaseOrderInvoice
						invoked.Company			= Company
						invoked.PurchaseOrder	= PurchaseOrder
						invoked.PayablesInvoice	= PayablesInvoice
						invoked.Vendor			= PayablesInvoice.Vendor

			Action Rules
				include UpdateQuantityAmountAndCost

				if  (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
				and  TransientLastInvoice)
					initialize RemainingAmount 
					RemainingAmount = PurchaseOrderLine.Quantity * PurchaseOrderLine.EnteredUnitCost 

					RemainingAmount -= TotalDistributionAmount  

					for each InvoiceDetailCreateFromMatchInProcessRel
						RemainingAmount -= each.TotalDistributionAmount 


					round RemainingAmount to nearest DerivedRoundTo 
					
					if  (RemainingAmount < 1 
					and  RemainingAmount > -1)
						TotalDistributionAmount += RemainingAmount 




			Exit Rules
				BypassBudgetEdit  = true
				if (!ItemType.Inventoried)
					include CopyPOLineDistributionsRuleBlock

				include CheckPOCommitments
		
		CreateFromBatch is a Create Action
			restricted
			Exit Rules
				if (TaxCode entered)
					include ProcessDetailTax

        Update is an Update Action
			valid when (AllowCreateUpdateDelete)
			completion message is "<LocalCompletionMessage>"
			Entrance Rules

				if (AllowReleaseOnlyMatchInvoice)
				    constraint (!PostedDistributionsExist)
				        "CannotUpdate;PostedDistributionsExist"
				        
				if (!PayablesInvoice.InterfaceInProcess)
			        constraint (!TaxEntityRel.ThirdParty.TaxEngine)
			        	"ActionNotValidForTaxEngine"
				        			
				constraint (EnteredQuantity entered)  
				    "QuantityIsRequired"			  
				    
				LocalCompletionMessage = ChangeCompleteMsg
				if (PurchaseOrderLine entered
				and !PayablesInvoice.CreditOrDebitMemo)
					constraint (PurchaseOrderLine.Closed.No or PurchaseOrderLine.Closed not entered)
						"CannotChange;PurchaseOrderLineClosed" 

				if (!PayablesInvoice.CreditOrDebitMemo)
					constraint (!EnteredGreaterThanReceivedQuantity)
						"<EnteredQtyGreaterThanReceivedQtyMsg>"

				if (PayablesInvoice.CreditOrDebitMemo)



					LocalOriginalInvoiceDetail = first LocalOriginalInvoiceDetailRel.PayablesInvoiceDetail

				if (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					if  ((PurchaseOrderLine entered
					or    ContractLine entered)
					and  !PayablesInvoice.IsMemoOnly
					and  !ItemType.Inventoried)
						initialize LocalTaxAmount  
						for each DetailInvoiceDistributionsRel 
							if  ((each.IsLandedTaxDistribution
							and   TaxCode = PurchaseOrderLine.TaxCode)
							or   (each.IsLandedAOCDistribution
							and   each.PurchaseOrderAndLineAddOnChargeRel exists))
								LocalTaxAmount += each.DistributionAmount.CurrencyAmount 

						OldLocalLandedTaxAndAocUnitCost = LocalTaxAmount / MatchedQuantity 

			Action Rules

				OldEnteredQuantity	= old EnteredQuantity
				OldEnteredUnitCost	= old EnteredUnitCost
				OldTaxableUnitCost	= old TaxableUnitCost
				OldTaxCode			= old TaxCode
				OldMatchedQuantity	= old MatchedQuantity
				OldMatchUnitCost	= old MatchUnitCost

				if (!MiscellaneousDetail)
					if (PayablesInvoice.TaxCode.TaxType.CalculatedRate
					and PayablesInvoice.TaxCode entered)
						invoke FastUpdate PayablesInvoiceAddOnChargesWithTaxRel
							initialize invoked.TaxAmount
						invoke FastUpdate PayablesInvoiceDetailWithTaxRel
							initialize invoked.TaxAmount

				if (IsHSNSACCodeEnabled)
					if (HSNSACCode changed)
						for each AllDistributionsRel
							invoke Update each
								invoked.HSNSACCode	=	HSNSACCode

				include UpdateQuantityAmountAndCost

			Exit Rules
				if  (!MiscellaneousDetail
				and  !PayablesInvoice.IsMemoOnly)
					if (EnteredUnitCost changed
					or  EnteredQuantity changed			
					or  EnteredUOM changed)				
						include CheckTolerance

				if  (!MiscellaneousDetail
				and (!PayablesInvoice.IsMemoOnly
				or    PayablesInvoice.Suffix not entered))	
					include CommonUpdates
					ActionType = ActionType.UpdateType
					include ProcessDetailTax


				if (!PayablesInvoice.IsMemoOnly
				and !ItemType.Inventoried)
					if (TaxCode != OldTaxCode
					and OldTaxCode entered)

						include DeleteTaxDistributions

				if (BypassDistributionCreate)
					NextSentence = true
				else
				if (MiscellaneousDetail)
					if (EnteredQuantity != OldEnteredQuantity
					or  EnteredUnitCost != OldEnteredUnitCost)
						if (instance count of InvoiceDistributionsForMiscellaneousDetailRel = 1)
							invoke Update first InvoiceDistributionsForMiscellaneousDetailRel
								invoked.GLTransactionAmount					= TotalDistributionAmount

						LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg

					if  ((EnteredQuantity != OldEnteredQuantity
					or    EnteredUnitCost != OldEnteredUnitCost
					or    TaxableUnitCost != OldTaxableUnitCost)
					and  (TaxCode entered
					or    OldTaxCode entered))
						TaxAmount									= DerivedMiscellaneousDetailTax
						round TaxAmount to nearest DerivedRoundTo

						if (TaxCode = OldTaxCode)
							LocalTaxCode						= OldTaxCode
							if (instance count of TaxDistributionsForMiscellaneousDetailRel = 1)
								invoke Update first TaxDistributionsForMiscellaneousDetailRel
									invoked.DistributionAmount.CurrencyAmount	= DerivedTaxAmount
									invoked.GLTransactionAmount					= DerivedTaxAmount
						else
							if (TaxCode entered)
								invoke CreateFromMatch PayablesInvoiceDistribution
									invoked.Company								= Company
									invoked.PayablesInvoice						= PayablesInvoice
									invoked.DistributionType					= "D"
									if (!EntityTaxCodeRel.LandedCost)
										if (EntityTaxCodeRel.TaxPoint.PaymentDate)
											invoked.GLFinanceCodeBlock			= EntityTaxCodeRel.TaxInputDueAccount
											invoked.DistributionAccount			= EntityTaxCodeRel.TaxInputDueAccount
										else
											invoked.GLFinanceCodeBlock			= EntityTaxCodeRel.TaxInputAccount
											invoked.DistributionAccount			= EntityTaxCodeRel.TaxInputAccount
									else
									if (PayablesInvoice.MatchProcessType.Expense)
										if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
											invoked.GLFinanceCodeBlock			= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount	
											invoked.DistributionAccount			= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
										else
											invoked.GLFinanceCodeBlock			= Company.ToleranceOffsetAccount	
											invoked.DistributionAccount			= Company.ToleranceOffsetAccount
									else
										if (PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount entered)
											invoked.GLFinanceCodeBlock			= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount	
											invoked.DistributionAccount			= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount
										else
											invoked.GLFinanceCodeBlock			= Company.InvoiceItemDetailAccount	
											invoked.DistributionAccount			= Company.InvoiceItemDetailAccount
									invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail

									invoked.GLTransactionAmount					= DerivedTaxAmount
									invoked.BypassBudgetEdit					= BypassBudgetEdit
									invoked.TaxCode								= TaxCode
									invoked.TaxUsageCode						= TaxUsageCode
									invoked.ProductTaxCategory 					= ProductTaxCategory
									invoked.TaxableAmount						= TotalDistributionAmount

						LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
				else
				if  ((!PayablesInvoice.IsMemoOnly
				or     PayablesInvoice.Suffix not entered)
				and   !ItemType.Inventoried)

					if (EnteredQuantity != OldEnteredQuantity
					or  EnteredUnitCost != OldEnteredUnitCost)
						if  (PurchaseOrderLine entered)

							if (!PayablesInvoice.CreateBySupplierUnsubmittedInvoices)
								if  (instance count of InvoiceDistributionsForPurchaseOrderLineRel > 1)
									confirmation required
										"ExistingDistributionsWillBeDeletedAndRecreatedBasedOnNewValues.Continue?"
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForPurchaseOrderLineRel
								invoked.ParmDeleteAndAdd = true
							if  (PayablesInvoice.UnsubmittedSupplierPOInvoice
							or  (EnteredQuantity <= OldEnteredQuantity
							and  EnteredUnitCost <= OldEnteredUnitCost))
								BypassBudgetEdit = true
							include CopyPOLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
						else
						if  (ContractLine entered)
							if (!PayablesInvoice.CreateBySupplierUnsubmittedInvoices)
								if  (instance count of InvoiceDistributionsForContractLineRel > 1)
									confirmation required
										"ExistingDistributionsWillBeDeletedAndRecreatedBasedOnNewValues.Continue?"
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForContractLineRel
								invoked.ParmDeleteAndAdd = true
							if  (PayablesInvoice.UnsubmittedSupplierPOInvoice
							or  (EnteredQuantity <= OldEnteredQuantity
							and  EnteredUnitCost <= OldEnteredUnitCost))
								BypassBudgetEdit = true
							include CopyContractLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
					else
					if  (EAMWorkOrder changed
					or   EAMTrade changed)
						if  (PurchaseOrderLine entered)
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForPurchaseOrderLineRel
							if  (PayablesInvoice.UnsubmittedSupplierPOInvoice)
								BypassBudgetEdit = true
							include CopyPOLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
						else
						if  (ContractLine entered)
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForContractLineRel
							include CopyContractLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg

					if  ((EnteredQuantity != OldEnteredQuantity
					or    EnteredUnitCost != OldEnteredUnitCost
					or    TaxableUnitCost != OldTaxableUnitCost
					or    TaxCode         != OldTaxCode)
					and  (TaxCode entered
					or    OldTaxCode entered))

						if  (PurchaseOrderLine entered)
							if (!PayablesInvoice.CreateBySupplierUnsubmittedInvoices)
								if (instance count of InvoiceDistributionsForPurchaseOrderLineRel > 1)
									confirmation required
										"ExistingDistributionsWillBeDeletedAndRecreatedBasedOnNewValues.Continue?"

							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions

							if  (TaxCode entered
							and  !PayablesInvoice.DoOneSourceAfter
							and  !PayablesInvoice.CallVertexByDocument
							and  !PayablesInvoice.TaxAdjustment.Calculate
							and  !TaxCode.TaxType.CalculatedRate)
								ProcessingTax = true
								include CopyPOLineDistributionsRuleBlock
								ProcessingTax = false
						else
						if  (ContractLine entered)
							if (!PayablesInvoice.CreateBySupplierUnsubmittedInvoices)
								if (instance count of InvoiceDistributionsForContractLineRel > 1)
									confirmation required
										"ExistingDistributionsWillBeDeletedAndRecreatedBasedOnNewValues.Continue?"

							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions

							if  (TaxCode entered
							and  !PayablesInvoice.DoOneSourceAfter
							and  !PayablesInvoice.CallVertexByDocument
							and  !PayablesInvoice.TaxAdjustment.Calculate
							and  !TaxCode.TaxType.CalculatedRate)
								ProcessingTax = true
								include CopyContractLineDistributionsRuleBlock
								ProcessingTax = false


				if  (PurchaseOrderLine entered
				and  EnteredQuantity != OldEnteredQuantity)
					for each PayablesInvoiceAddOnChargeRel
						if (each.EnteredQuantity = OldEnteredQuantity)
							if (!each.HeaderSpreadAddOnCharge)
								invoke Update each
									invoked.EnteredQuantity			= EnteredQuantity
									if (PayablesInvoice.InterfaceInProcess)
										invoked.BypassAllowUpdate = true 
							else 
								invoke FastUpdate each
									invoked.EnteredQuantity			= EnteredQuantity
									if (PayablesInvoice.InterfaceInProcess)
										invoked.BypassAllowUpdate = true 

				 	for each PayablesInvoice.PayablesInvoiceSpreadAddOnChargeRel
						if (PurchaseOrder = each.PurchaseOrder)
				 			invoke RecalculateSpreadAOC each 

					if (EnteredUnitCost changed
					or  EnteredQuantity changed
					or  EnteredUOM changed)
						if  (PayablesInvoice.MatchReconQueueRel.MatchWork entered)
							LocalMatchWork = PayablesInvoice.MatchReconQueueRel.MatchWork
							if  (LocalMatchWorkInvoiceDetailRel exists)
								invoke FastUpdate LocalMatchWorkInvoiceDetailRel
									invoked.Selected = false
									initialize invoked.MatchReconQueueSet
									initialize invoked.SortSelect
									invoked.MatchedQuantity				= MatchedQuantity
									invoked.MatchUnitCost				= MatchUnitCost
									invoked.EnteredQuantity				= EnteredQuantity
									invoked.EnteredUnitCost				= EnteredUnitCost
									if (TotalDistributionAmount entered)
										invoked.MatchAmount				= TotalDistributionAmount
									else
										invoked.MatchAmount				= MatchedQuantity * MatchUnitCost

								invoke UnselectRecordForRecon LocalMatchWorkInvoiceDetailRel.SelectedReceiptLineRel

				if (!PayablesInvoice.InterfaceInProcess)
					invoke InvoiceUpdate PayablesInvoice

				if  ((PurchaseOrderLine entered
				or    ContractLine entered)
				and  !PayablesInvoice.IsMemoOnly
				and !ItemType.Inventoried)

					include CheckPOCommitments



		RecalculateUnreleasedObligations is an Instance Action 
			restricted 
			Action Rules 

				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency


				if (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or  POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					initialize LocalWorkCommitAmount
					initialize LocalQuantity

					if (ProcurementGroupRel.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate)
						LocalEncumbranceDate = PurchaseOrderLine.EarlyDeliveryDate 
					else 
						LocalEncumbranceDate = PurchaseOrder.PurchaseOrderDate 

					if (EnteredUOM = PurchaseOrderLine.EnteredBuyUOM
					or  ItemType.Special)
						LocalQuantity 			= EnteredQuantity
					else
						initialize UOMCalculation

						UOMCalculation.InputToUOM		= PurchaseOrderLine.EnteredBuyUOM
						UOMCalculation.InputUOM			= EnteredUOM
						UOMCalculation.InputQuantity	= EnteredQuantity
						UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
						LocalQuantity					= UOMCalculation.OutputQuantity

					initialize LocalTaxAmount  
					for each DetailInvoiceDistributionsRel 

						if  ((each.IsLandedTaxDistribution
						and   TaxCode = PurchaseOrderLine.TaxCode)
						or   (each.IsLandedAOCDistribution
						and   each.PurchaseOrderAndLineAddOnChargeRel exists))
							LocalTaxAmount += each.DistributionAmount.CurrencyAmount 

					LocalLandedTaxAndAocUnitCost = LocalTaxAmount / MatchedQuantity 




					for each PurchaseOrderLine.CommittedPurchaseOrderLineDistributionsRel

						LocalPoAmountToCommit = PurchaseOrderLine.AmountToCommit 
						round LocalPoAmountToCommit to nearest DerivedRoundTo 

						if (!PurchaseOrderLine.ServiceCode.Amount)
							if (EnteredQuantity <= PurchaseOrderLine.QuantityToCommit)
								LocalPassedCommitQuantity 			= LocalQuantity
							else
								LocalPassedCommitQuantity           = PurchaseOrderLine.QuantityToCommit
						else 
						if (PurchaseOrderLine.ServiceCode.Amount)

							if (EnteredUnitCost + LocalLandedTaxAndAocUnitCost <= LocalPoAmountToCommit)
								LocalWorkCommitAmount = EnteredUnitCost + LocalLandedTaxAndAocUnitCost
							else
								LocalWorkCommitAmount = LocalPoAmountToCommit 



						initialize LocalReversalUpdateAmount

						if (each.PurchaseOrderLine.ServiceCode.Amount)
							if (each.DistributionByAmount)
								LocalReversalUpdateAmount = ((each.DistributionAmount/PurchaseOrderLine.ExtendedAmountToCommit) * LocalWorkCommitAmount)
							else
								if (each.DistributionByPercent)
									LocalReversalUpdateAmount = (each.DistributionPercent * LocalWorkCommitAmount)

								else
									LocalReversalUpdateAmount = ((each.DistributionQuantity/PurchaseOrderLine.QuantityToCommit) * LocalWorkCommitAmount)

						else   
							if (each.DistributionByAmount)
								LocalReversalUpdateAmount = ((LocalPassedCommitQuantity / each.PurchaseOrderLine.QuantityToCommit) * each.DistributionAmount)
							else
								if  (LocalPassedCommitQuantity not entered)
									LocalWorkCommitAmount = LocalWorkCommitAmount * LocalQuantity 
								else 
									LocalWorkCommitAmount = ((LocalPassedCommitQuantity * PurchaseOrderLine.CostToCommit))

									for each PurchaseOrderLine.LandedPurchaseOrderLineAddOnChargeRel
										LocalWorkCommitAmount -= each.LandedUnitCost * each.Quantity 


									if (each.DistributionByPercent)
										LocalReversalUpdateAmount = (each.DistributionPercent * LocalWorkCommitAmount)
									else
										LocalReversalUpdateAmount = ((each.DistributionQuantity/PurchaseOrderLine.QuantityToCommit) * LocalWorkCommitAmount)


							if (LocalReversalUpdateAmount > TotalDistributionAmount + LocalTaxAmount)  
								LocalReversalUpdateAmount = TotalDistributionAmount + LocalTaxAmount  



						initialize TransientReportCurrencyAmount
						TransientTransactionCodeBlock                       = each.DistributionAccount
						TransientCurrencyTable         						= Company.CurrencyTable
						TransientAccountingEntity      						= Company.AccountingEntity
						TransientExchangeDate          						= PayablesInvoice.DistributionDate
						TransientPostingDate           						= PayablesInvoice.DistributionDate
						TransientFromCurrency          						= PayablesInvoice.InvoiceCurrency
						LocalCurrencyAmount                                 = LocalReversalUpdateAmount
						TransientCurrencyAmount                             = LocalReversalUpdateAmount

						TransientReportCurrencyAmount.UseDerivedCalculations = true
						LocalForceCalculation	       						= TransientReportCurrencyAmount.AssignToCurrency
						LocalForceCalculation 	       						= TransientReportCurrencyAmount.DerivedCalculationsComplete



						invoke CreateBudgetTemplateReversal each.GLCommitRel
							invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
							invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
							invoked.PrmCodeBlock        					= each.DistributionAccount
							invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
							invoked.PrmTransAmount      					= LocalReversalUpdateAmount
							invoked.PrmCurrencyAmounts.FunctionalAmount     = TransientReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ProjectAmount	    = TransientReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount1        = TransientReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount2        = TransientReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount3        = TransientReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount4        = TransientReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount5        = TransientReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount      = TransientReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount2     = TransientReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount3     = TransientReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount


		CheckCommitmentChargeback is an Instance Action
			default label is untranslatable
    		restricted
    		Action Rules
        		include CheckPOCommitments

		RemoveFromCostDifferenceList is an Instance Action
			valid when (HasContractCostDifferenceAndLineStatusMatched)
			default label is "RemoveWholeContractFromList"

			Action Rules
				confirmation required
					"Warning;ContractLinesWillBePermanentlyRemovedFromThisList.DoYouWantToContinue?"
				invoke FastUpdate Contract	
					invoked.RemoveFromCostDifferenceList = true

		UpdateSnapshotFields is an Instance Action
			restricted
			Action Rules
				Vendor			= PayablesInvoice.Vendor
				Invoice			= PayablesInvoice.Invoice
				Suffix			= PayablesInvoice.Suffix
				CancelSequence	= PayablesInvoice.CancelSequence
				PORelease		= PurchaseOrder.PORelease
				POCode			= PurchaseOrder.POCode
				Buyer			= PurchaseOrder.Buyer


		UpdateSnapshotFieldsSet is a Set Action			
			default label is untranslatable
			restricted
			Parameters
				PrmCompany		is a MatchCompany
				PrmInvoice		is a PayablesInvoice
			Parameter Rules
				PrmCompany
				PrmInvoice
				
			Instance Selection
				where (Company 			= PrmCompany
				and    PayablesInvoice	= PrmInvoice)
				
			Action Rules
				Instance Rules
					Vendor				= PrmInvoice.Vendor
					Invoice				= PrmInvoice.Invoice
					Suffix				= PrmInvoice.Suffix
					CancelSequence		= PrmInvoice.CancelSequence
					PORelease			= PurchaseOrder.PORelease
					POCode				= PurchaseOrder.POCode
					Buyer				= PurchaseOrder.Buyer
									
		FastUpdate is an Update Action
			restricted
			bypass field rules
			Action Rules
				if (MatchObjectID entered and old MatchObjectID not entered)
					LocalMatched = true
				else
				if (MatchObjectID not entered and old MatchObjectID entered)
					LocalUnmatched = true
			Exit Rules
				if  (TaxEntityRel.ThirdParty.VertexOSeries
				and  TaxAmount entered) 
					for each OneCallTaxLineItemRel2 
						invoke Update each 
							invoked.ChargedTax = TaxAmount  

				if (LocalMatched
				and PayablesInvoiceDetail.RecordSource.CreatedWithinMatch
				and PayablesInvoice.InvoiceType.MatchPrepayment
				and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
				and PurchaseOrderLineAssetRel exists)
					if (PayablesInvoice = PayablesInvoice.MatchReconQueueRel.MatchWork.PayablesInvoice)

						if (PurchaseOrderLineAssetRel.Status.Unreleased)
							invoke Match PurchaseOrderLineAssetRel
								invoked.PrmInvoice 			= PayablesInvoice
								invoked.PrmMatchedQuantity	= PurchaseOrderLine.Quantity

						for each InvoiceDistributionsForPurchaseOrderLineRel
							invoke Capitalize each 

							for each each.InvoiceDetailLandedTaxDistributionRel
								invoke Capitalize each 
							for each each.InvoiceDetailAllAddOnChargeDistributionsRel
								invoke Capitalize each 

				else
				if (LocalUnmatched
				and PayablesInvoiceDetail.RecordSource.CreatedWithinMatch
				and PayablesInvoice.InvoiceType.MatchPrepayment
				and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
				and PurchaseOrderLineAssetRel exists)

					invoke Unmatch PurchaseOrderLineAssetRel
						invoked.PrmInvoice 			= PayablesInvoice
						invoked.PrmMatchedQuantity	= PurchaseOrderLine.Quantity
				else
				if (LocalMatched)

					invoke Match PurchaseOrderLineAssetRel
						invoked.PrmInvoice 			= PayablesInvoice
						invoked.PrmInvoiceDetail    = PayablesInvoiceDetail 
						invoked.PrmMatchedQuantity	= MatchedQuantity

					if (PurchaseOrderLineAssetRel exists)
						for each InvoiceDistributionsForPurchaseOrderLineRel
							invoke Capitalize each 
							
							for each each.InvoiceDetailLandedTaxDistributionRel
								invoke Capitalize each 
							for each each.InvoiceDetailAllAddOnChargeDistributionsRel
								invoke Capitalize each 

					if (OneSourceGeneric
					and !TaxConfigurationRel.DebugMode)				
						invoke Purge OneSourceUserAttributesRel

				else
				if (LocalUnmatched)

					invoke Unmatch PurchaseOrderLineAssetRel
						invoked.PrmInvoice 			= PayablesInvoice
						invoked.PrmInvoiceDetail    = PayablesInvoiceDetail 
						invoked.PrmMatchedQuantity	= MatchedQuantity


				TaxAmount += TaxAdjustAmount
				if (TaxAdjustAmount entered)
					LocalTaxCode						= TaxCode

					if  (PurchaseOrderLine entered)
						invoke RestrictedUpdate last TaxDistributionsForPurchaseOrderLineRel
							invoked.DistributionAmount.CurrencyAmount += TaxAdjustAmount
							invoked.GLTransactionAmount				  += TaxAdjustAmount
					else
					if  (ContractLine entered)
						invoke RestrictedUpdate last TaxDistributionsForContractLineRel
							invoked.DistributionAmount.CurrencyAmount += TaxAdjustAmount
							invoked.GLTransactionAmount				  += TaxAdjustAmount
					else
					if  (PurchaseOrderLine not entered)
						invoke RestrictedUpdate last TaxDistributionsForMiscellaneousDetailRel
							invoked.DistributionAmount.CurrencyAmount += TaxAdjustAmount
							invoked.GLTransactionAmount				  += TaxAdjustAmount

		CalculateRate is an Update Action
			restricted
			bypass field rules
			Action Rules
				if ((!PayablesInvoice.IsMemoOnly
				or   PayablesInvoice.MatchProcessType.Service)
				and !ItemType.Inventoried)
					ProcessingTax = true
					if (PayablesInvoice.MatchProcessType.ServiceContract)
						include CopyContractLineDistributionsRuleBlock 
					else 
						include CopyPOLineDistributionsRuleBlock
					ProcessingTax = false

		UpdateFromCode is an Update Action
			restricted
			valid when (PayablesInvoice.IsUpdateable)

        Delete is a Delete Action
			valid when (AllowCreateUpdateDelete)
			Entrance Rules

				if (LinkedToAsset)
					constraint (PayablesInvoice.IsUpdateable)
						"CannotDeleteAnInvoiceLineWithAnAssetIfInvoiceHasBeenReleased"

				if  (PayablesInvoice.Status.Amended)
					constraint (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					and   		!GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						"CannotDeleteAnInvoiceLineIfInvoiceHasBeenMatchedAndBudgetTrackingIsEnabled"

				if (AllowReleaseOnlyMatchInvoice)
				    constraint (!PostedDistributionsExist)
				        "CannotUpdate;PostedDistributionsExist"
				        			
				LocalTaxCode						= TaxCode
				if  (PurchaseOrderLine entered
				or   ContractLine entered)
					if (PayablesInvoice.Status.Cancelled
					or  PayablesInvoice.CancelSequence entered
					or  initiating action = "PayablesInvoice.CancelReleased")
						NextSentence = true
					else
						include CheckPOCommitments


				if (MiscellaneousDetail)
					for each InvoiceDistributionsForMiscellaneousDetailRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				if  (PurchaseOrderLine entered)
					for each InvoiceDistributionsForPurchaseOrderLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				if  (ContractLine entered)
					for each InvoiceDistributionsForContractLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each

				if (TaxCode entered)
					OldTaxCode = TaxCode
					include DeleteTaxDistributions

				if (!MiscellaneousDetail)
					for each MatchInvoiceMessageRel
						if  (each.MatchMessageOrigin.PoCost
						and  each.ApplicationAction.AdjustCost)
							invoke Delete PurchaseOrderReceiptInvoiceLinkMessageRel
						invoke Delete each

				invoke Delete PayablesInvoiceAddOnChargeRel

			Exit Rules

			    if  (PayablesInvoice.Status.Amended
				and (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger
				or   GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track))
					if (MiscellaneousDetail)
						for each InvoiceDistributionsForMiscellaneousDetailRel
							if (each.Status.Pending)
								invoke FastUpdate each 
									invoked.Status = 0
								invoke Release each 
					if  (PurchaseOrderLine entered)
						for each InvoiceDistributionsForPurchaseOrderLineRel
							if (each.Status.Pending)
								invoke FastUpdate each 
									invoked.Status = 0
								invoke Release each 
					if  (ContractLine entered)
						for each InvoiceDistributionsForContractLineRel
							if (each.Status.Pending)
								invoke FastUpdate each 
									invoked.Status = 0
								invoke Release each 

				invoke InvoiceUpdate PayablesInvoice

		DeleteNoInvoiceUpdate is a Delete Action
			restricted
			Parameters
				PrimaryInvoice						is like PayablesInvoice

			Entrance Rules
				if (PurchaseOrderLineAssetRel exists
				and PayablesInvoiceDetail.MatchObjectID entered)
					if (RecordSource.CreatedWithinMatch
					and PayablesInvoice.InvoiceType.MatchPrepayment
					and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)

						if (PayablesInvoice = PrimaryInvoice)
							invoke Unmatch PayablesInvoiceDetail.PurchaseOrderLineAssetRel
								invoked.PrmInvoice 			= PayablesInvoice
								invoked.PrmMatchedQuantity	= PurchaseOrderLine.Quantity
					else
					if (PayablesInvoiceDetail.MatchObjectID entered)
						invoke Unmatch PayablesInvoiceDetail.PurchaseOrderLineAssetRel
							invoked.PrmInvoice 			= PayablesInvoice
							invoked.PrmInvoiceDetail    = PayablesInvoiceDetail 
							invoked.PrmMatchedQuantity	= PurchaseOrderLine.Quantity

				if  (PurchaseOrderLine entered
				or   ContractLine entered)
					if (PayablesInvoice.Status.Cancelled
					or  PayablesInvoice.CancelSequence entered
					or  initiating action = "PayablesInvoice.CancelReleased")
						NextSentence = true
					else
						include CheckPOCommitments

				if  (PayablesInvoice.CanceledInvoice)
					NextSentence = true
				else
				if (PayablesInvoice.Company.FinanceEnterpriseGroup.BODTrigger	
				and PayablesInvoice.TransientInUnmatch)							
					NextSentence = true
				else
				if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				and PayablesInvoice.TransientInUnmatch)							
					NextSentence = true
				else
					if (MiscellaneousDetail)
						for each InvoiceDistributionsForMiscellaneousDetailRel
							if (each.IsOpenDistribution)
								invoke DeleteInvoiceDetailDistributions each
					if  (PurchaseOrderLine entered)
						for each InvoiceDistributionsForPurchaseOrderLineRel
							if (each.IsOpenDistribution)
								invoke DeleteInvoiceDetailDistributions each
					if  (ContractLine entered)
						for each InvoiceDistributionsForContractLineRel
							if (each.IsOpenDistribution)
								invoke DeleteInvoiceDetailDistributions each

					if (TaxCode entered)
						OldTaxCode = TaxCode
						include DeleteTaxDistributions

				if (!MiscellaneousDetail)
					for each MatchInvoiceMessageRel
						if  (each.MatchMessageOrigin.PoCost
						and  each.ApplicationAction.AdjustCost)
							invoke Delete PurchaseOrderReceiptInvoiceLinkMessageRel
						invoke Delete each

					if (PayablesInvoice.MatchProcessType.ServiceContract
					and ContractLine.ServiceCode.Quantity)
					    initialize LocalUnitCost
					    initialize LocalTimeStamp
					    for each ServiceContractLastCostRel
					        if (each.TransactionDate > LocalTimeStamp)
					        	LocalTimeStamp     	= each.TransactionDate
					            LocalUnitCost 		= each.PoCostUpd
					            
					if (PayablesInvoice.MatchProcessType.ServiceContract)
					    if (LocalUnitCost not entered)
					        LocalUnitCost = ContractLine.BaseCost
					    
						invoke UpdateAmountsAndQuantities ContractLine 
							invoked.InServiceCostMessageAmount 			= LocalUnitCost
							invoked.FromMatch 							= true

				invoke DeleteNoInvoiceUpdate PayablesInvoiceAddOnChargeRel


			Exit Rules

		DeleteKeepDistribs is a Delete Action
			restricted
			default label is untranslatable
			Entrance Rules
				if  (PurchaseOrderLine entered
				or   ContractLine entered)
					include CheckPOCommitments

					for each AllDistributionsRel
						invoke FastUpdate each
						    initialize invoked.PayablesInvoiceDetail
						    initialize invoked.PurchaseOrderLine
						    initialize invoked.PurchaseOrder
						    initialize invoked.PurchasingContract
						    initialize invoked.ContractLine
							initialize invoked.OriginalDistribution

				if (!MiscellaneousDetail)
					for each MatchInvoiceMessageRel
						if  (each.MatchMessageOrigin.PoCost
						and  each.ApplicationAction.AdjustCost)
							invoke Delete PurchaseOrderReceiptInvoiceLinkMessageRel
						invoke Delete each

		Purge is a Delete Action
			restricted
			Action Rules



			Exit Rules
				if  (!RecordSource.InternalMatchDetails)
					if  (PurchaseOrderLine entered
					or   ContractLine entered)
						include CheckPOCommitments
						
		PurgeDetailRecords is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge MatchInvoiceMessagePurgeRel
				invoke Purge PayablesInvoiceDetailTaxRel

		CreateMemoCostAdjustment is an Instance Action
			valid when (AllowCostAdjustment)
			Parameters
				MemoCompany		is a PayablesCompany
				MemoInvoice 	is a PayablesInvoice
			Parameter Rules
				MemoCompany
					default to MemoInvoice.Company
				MemoInvoice
					constraint (MemoInvoice.CreditOrDebitMemo)
						"CostAdjustmentOnlyAllowedForDebitOrCreditMemos"
			Entrance Rules


				if  (ContractLine entered)
					if  (ContractLine.ServiceCode.Amount or ContractLine.ServiceCode.Quantity)
						constraint (!MemoInvoice.InvoiceType.DebitMemo)
							"CannotIssueDebitMemoForAmountOrQuantitTypeServices"			

				if (Company.MatchMemoDelayHardEdits)
					if (OpenMatchInvoiceMessageRel exists)
						confirmation required
							"OpenMessageExistsOnOriginalInvoice.Continue?"
	
					if  (IsCatchWeight)
						if (EnteredUnitCost <= PurchaseOrderLine.EnteredUnitCost)
							confirmation required
								"OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost.Continue?"
					else				    
					if  (ItemType.Service
					and  PurchaseOrderLine entered
					and  PurchaseOrderLine.ServiceCode.Amount)
						if (PurchaseOrderLine.MatchedAmount not entered)
							confirmation required
								"ThereIsNoRemainingMatchedAmountOnPurchaseOrderLine.Continue?"
					else
					if  (PurchaseOrderReceiptLine entered)
						if  (PurchaseOrderLine.CostOption.VendorDetermined
						or   EnteredUnitCost = PurchaseOrderReceiptLine.OriginalUnitCost)
							if (EnteredUnitCost <= PurchaseOrderReceiptLine.MatchUnitCost)
								confirmation required
									"OriginalInvoiceUnitCostDoesNotExceedReceiptLineUnitCost.Continue?"
						else
						if  (EnteredUOM = PurchaseOrderLine.EnteredBuyUOM)
							if (EnteredUnitCost <= PurchaseOrderLine.EnteredUnitCost)
								confirmation required
									"OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost.Continue?"
						else
						if  (VendorPriceUOM = PurchaseOrderLine.VendorPriceUOM)
							if (EnteredUnitCost <= PurchaseOrderLine.VendorPriceUnitCost)
								confirmation required
									"OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost.Continue?"
				else
				if (!MemoInvoice.InvoiceType.DebitMemo)
					constraint (!OpenMatchInvoiceMessageRel exists)
						"CannotCreateMemoCostAdjustment;OpenMessageExistsOnOriginalInvoice"
	
					if  (IsCatchWeight)
						constraint (EnteredUnitCost > PurchaseOrderLine.EnteredUnitCost)
							"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost"
					else				    
					if  (ItemType.Service
					and  PurchaseOrderLine entered
					and  PurchaseOrderLine.ServiceCode.Amount)
						constraint (PurchaseOrderLine.MatchedAmount entered)
							"CannotCreateCostAdjustment.ThereIsNoRemainingMatchedAmountOnPurchaseOrderLine"


					else
					if  (PurchaseOrderReceiptLine entered)
						if  (PurchaseOrderLine.CostOption.VendorDetermined
						or   EnteredUnitCost = PurchaseOrderReceiptLine.OriginalUnitCost)
							constraint (EnteredUnitCost > PurchaseOrderReceiptLine.MatchUnitCost)
								"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedReceiptLineUnitCost"
						else
						if  (EnteredUOM = PurchaseOrderLine.EnteredBuyUOM)
							constraint (EnteredUnitCost > PurchaseOrderLine.EnteredUnitCost)
								"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost"
						else
						if  (VendorPriceUOM = PurchaseOrderLine.VendorPriceUOM)
							constraint (EnteredUnitCost > PurchaseOrderLine.VendorPriceUnitCost)
								"CannotCreateCostAdjustment;OriginalInvoiceUnitCostDoesNotExceedPurchaseOrderLineUnitCost"
			Action Rules

				invoke OnlineMemoCreate PayablesInvoiceDetail
					fill in fields from this instance
						except invoked.Status
						except invoked.MatchObjectID
						except invoked.MatchSequence
						except invoked.MatchUpdateDate
						except invoked.TaxableUnitCost
					invoked.Company						= Company
					invoked.PayablesInvoice				= MemoInvoice
					invoked.MemoAdjustType				= 1
					invoked.EnteredQuantity				= EnteredQuantity
					invoked.CostOrQuantityAdjustment	= true

					if  (IsCatchWeight)
						invoked.EnteredUnitCost				= ((EnteredUnitCost - PurchaseOrderLine.EnteredUnitCost) * -1)
					else
					if  (PurchaseOrderReceiptLine entered)
						if  (PurchaseOrderLine.CostOption.VendorDetermined
						or   EnteredUnitCost = PurchaseOrderReceiptLine.OriginalUnitCost)
							invoked.EnteredUnitCost			= ((EnteredUnitCost - PurchaseOrderReceiptLine.MatchUnitCost) * -1)
						else
						if  (VendorPriceUOM = PurchaseOrderLine.VendorPriceUOM)
							invoked.EnteredUnitCost			= ((EnteredUnitCost - PurchaseOrderLine.VendorPriceUnitCost) * -1)
						else
							invoked.EnteredUnitCost			= ((EnteredUnitCost - PurchaseOrderLine.EnteredUnitCost) * -1)
					else
					if (PayablesInvoice.MatchProcessType.ServiceContract)
						if (ContractLine.ServiceCode.Quantity)
							invoked.EnteredUnitCost			= ((EnteredUnitCost - ContractLine.DerivedMatchBaseCost) * -1)
						else
						if (EnteredUnitCost > ContractLine.AmountOrdered)
							invoked.EnteredUnitCost			= ContractLine.AmountOrdered * -1
						else
							invoked.EnteredUnitCost			= EnteredUnitCost * -1
					else
					if  (ItemType.Service
					and  PurchaseOrderLine.ServiceCode.Amount
					and  PurchaseOrderLine.MatchedAmount > PurchaseOrderLine.EnteredUnitCost)

						invoked.EnteredUnitCost             = ((PurchaseOrderLine.MatchedAmount - PurchaseOrderLine.EnteredUnitCost) * -1)
					else
					if  (ItemType.Service
					and  PurchaseOrderLine.ServiceCode.Quantity
					and  EnteredUnitCost > PurchaseOrderLine.EnteredUnitCost)
						invoked.EnteredUnitCost				= ((EnteredUnitCost - PurchaseOrderLine.EnteredUnitCost) * -1)
					else
						invoked.EnteredUnitCost				= EnteredUnitCost * -1
					invoked.TransientOriginalDetail			= PayablesInvoiceDetail

		CreateMemoQuantityAdjustment is an Instance Action
			valid when (AllowQuantityAdjustment)
			Parameters
				MemoCompany		is a PayablesCompany
				MemoInvoice 	is a PayablesInvoice
			Parameter Rules
				MemoCompany
					default to MemoInvoice.Company
				MemoInvoice
					constraint (MemoInvoice.InvoiceType.CreditMemo)
						"QuantityAdjustmentOnlyAllowedForCreditMemos"
					if (PurchaseOrderLine entered
					and  !ItemType.Service)
						if (Company.MatchMemoDelayHardEdits)
							if (PurchaseOrderLine.MatchedNotReceivedQuantity <= 0)
							    confirmation required
									"PurchaseOrderLineDoesNotHaveMatchedNotReceivedQuantityAvailable.Continue?"
						else
							constraint (PurchaseOrderLine.MatchedNotReceivedQuantity > 0)
								"PurchaseOrderLineDoesNotHaveMatchedNotReceivedQuantityAvailable"
			Entrance Rules
				if (ContractLine entered)
					constraint (!ContractLine.ServiceCode.Amount)
						"QuantityAdjustmentNotAllowedOnAmountTypeServiceLine"			
					if  (ContractLine.ServiceCode.Quantity)
						constraint (!MemoInvoice.InvoiceType.DebitMemo)
							"CannotIssueDebitMemoForAmountOrQuantitTypeServices"			

			Action Rules

				invoke OnlineMemoCreate PayablesInvoiceDetail
					fill in fields from this instance
						except invoked.Status
						except invoked.MatchObjectID
						except invoked.MatchSequence
						except invoked.MatchUpdateDate
					invoked.Company						= Company
					invoked.PayablesInvoice				= MemoInvoice
					invoked.MemoAdjustType				= 2
					invoked.EnteredUnitCost				= EnteredUnitCost
					invoked.CostOrQuantityAdjustment	= true

					if  (IsCatchWeight)
						if (PurchaseOrderReceiptLine entered)
							invoked.EnteredQuantity			= ((EnteredQuantity - PurchaseOrderReceiptLine.CatchWeightQuantity) * -1)
							invoked.BuyUOMMatchedQuantity	= ((BuyUOMMatchedQuantity - PurchaseOrderReceiptLine.MatchedQuantity) * -1)				    
						else
							invoked.EnteredQuantity			= EnteredQuantity * -1
							invoked.BuyUOMMatchedQuantity	= BuyUOMMatchedQuantity * -1					    
					else
					if  (ContractLine entered
					and  ItemType.Service
					and  ContractLine.QuantityOrdered < EnteredQuantity)
						invoked.EnteredQuantity			= ContractLine.QuantityOrdered * -1
					else
					if  (PurchaseOrderLine entered
					and  ItemType.Service
					and  PurchaseOrderLine.MatchedNotReceivedQuantity not entered)
						if  (PurchaseOrderLine.ServiceCode.Quantity
						and  EnteredQuantity > PurchaseOrderLine.MatchedQuantity)
							invoked.EnteredQuantity		= PurchaseOrderLine.MatchedQuantity * -1
						else
						if (PurchaseOrderLine.MatchedQuantity > PurchaseOrderLine.Quantity)
							invoked.EnteredQuantity		= PurchaseOrderLine.Quantity - PurchaseOrderLine.MatchedQuantity
						else 
							invoked.EnteredQuantity		= EnteredQuantity * -1
					else
					if  (PurchaseOrderLine entered)
						invoked.EnteredQuantity			= PurchaseOrderLine.MatchedNotReceivedQuantity * -1
					else
						invoked.EnteredQuantity			= EnteredQuantity * -1
					invoked.TransientOriginalDetail		= PayablesInvoiceDetail

		CreditForRebillSet is a Set Action
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmInvoice			is a PayablesInvoice
				MemoInvoice 		is a PayablesInvoice
			Parameter Rules
				PrmCompany
					required
				PrmInvoice
					required
				MemoInvoice
					constraint (MemoInvoice.InvoiceSource.CreditForRebill)
						"CreditForRebillOnlyAllowedForCreditForRebillInvoice"
			Set Is  
				PrmCompany
				PrmInvoice

			Instance Selection
				where (Company			= PrmCompany
				and    PayablesInvoice 	= PrmInvoice)

			Action Rules

				Empty Set Rules
					invoke CreditForRebillSet PayablesInvoiceSpreadAddOnCharge
						invoked.PrmCompany 		= PrmCompany
						invoked.PrmInvoice 		= PrmInvoice
						invoked.MemoInvoice 	= MemoInvoice

				Set Rules
					Entrance Rules
						invoke FastUpdate MemoInvoice
							invoked.BackgroundProcessing = 2
					Exit Rules
						invoke CreditForRebillSet PayablesInvoiceSpreadAddOnCharge
							invoked.PrmCompany 		= PrmCompany
							invoked.PrmInvoice 		= PrmInvoice
							invoked.MemoInvoice 	= MemoInvoice

				Instance Rules

					if  (ItemType.Service
					and  ContractLine entered
					and  ContractLine.ServiceCode.Amount
					and (ContractLine.AmountOrdered <= EnteredUnitCost * -1))
						NextSentence = true
					else
					if  (ItemType.Service
					and  PurchaseOrderLine entered
					and  PurchaseOrderLine.ServiceCode.Amount
					and (PurchaseOrderLine.MatchedAmount <= EnteredUnitCost * -1))
						NextSentence = true
					else
					if (PurchaseOrderLine.MatchedQuantity <= EnteredQuantity * -1)
						NextSentence = true
					else
						invoke CreditForRebill
							resume on error
							invoked.MemoCompany		= PrmCompany
							invoked.MemoInvoice 	= MemoInvoice

		CreditForRebill is an Instance Action
			valid when (AllowCreditForRebill)
			Parameters
				MemoCompany		is a PayablesCompany
				MemoInvoice 	is a PayablesInvoice
			Parameter Rules
				MemoCompany
					default to MemoInvoice.Company
				MemoInvoice
					constraint (MemoInvoice.InvoiceSource.CreditForRebill)
						"CreditForRebillOnlyAllowedForCreditForRebillInvoice"

			Action Rules

				if  (ItemType.Service
				and  ContractLine entered
				and  ContractLine.ServiceCode.Amount)
					constraint (ContractLine.AmountOrdered >= EnteredUnitCost * -1)
						"EnteredUnitCostExceedsAmountOrdered;CannotCredit"
				else
				if  (ItemType.Service
				and  PurchaseOrderLine entered
				and  PurchaseOrderLine.ServiceCode.Amount)
					constraint (PurchaseOrderLine.MatchedAmount >= EnteredUnitCost * -1)
						"EnteredUnitCostExceedsPurchaseOrderLineMatchedAmount;CannotCredit"
				else
				if  (IsCatchWeight)
					constraint (PurchaseOrderLine.MatchedQuantity >= BuyUOMMatchedQuantity * -1)
						"BuyQuantityExceedsPurchaseOrderLineMatchedQuantity;CannotCredit"
				else
					constraint (PurchaseOrderLine.MatchedQuantity >= EnteredQuantity * -1)
						"EnteredQuantityExceedsPurchaseOrderLineMatchedQuantity;CannotCredit"


				invoke OnlineMemoCreate PayablesInvoiceDetail
					fill in fields from this instance
						except invoked.Status
						except invoked.MatchObjectID
						except invoked.MatchSequence
						except invoked.MatchUpdateDate
					invoked.Company						= MemoCompany
					invoked.PayablesInvoice				= MemoInvoice
					invoked.CostOrQuantityAdjustment	= true

					if  (ItemType.Service
					and ((PurchaseOrderLine entered
					and   PurchaseOrderLine.ServiceCode.Amount)
					or   (ContractLine entered
					and   ContractLine.ServiceCode.Amount)))
						invoked.EnteredQuantity			= EnteredQuantity
						invoked.EnteredUnitCost			= EnteredUnitCost * -1
						invoked.MemoAdjustType			= 1
					else
						invoked.EnteredQuantity			= EnteredQuantity * -1
						invoked.EnteredUnitCost			= EnteredUnitCost
						invoked.MemoAdjustType			= 2

					invoked.TaxCode						= TaxCode
					invoked.TaxAmount					= TaxAmount * -1
					invoked.TransientOriginalDetail		= PayablesInvoiceDetail

		ServiceItemAdjustment is a Create Action
			valid when (PayablesInvoice.InvoiceType.CreditMemo)
			    
			Field Rules
				PurchaseOrder
					default to PayablesInvoice.FirstPurchaseOrder
				PurchaseOrderLine
					required
				MemoAdjustType
					required
					    "MemoAdjustTypeIsRequired;UseQuantityAdjustmentToReopenForFutureInvoicing"
		
			Entrance Rules //it is only invoked by "CreateMemoCostAdjustment" && "CreateMemoQuantityAdjustment"

				if (MemoAdjustType not entered)
					if (EnteredUnitCost < 0)
						AbsoluteUnitCost = EnteredUnitCost * -1
					else
						AbsoluteUnitCost = EnteredUnitCost

					if  (EnteredQuantity < 0
					or  (PurchaseOrderLine.ServiceCode.Quantity
					and  AbsoluteUnitCost = PurchaseOrderLine.EnteredUnitCost))
					    MemoAdjustType = MemoAdjustType.QuantityAdjustment
					else	
					    MemoAdjustType = MemoAdjustType.CostAdjustment

				CostOrQuantityAdjustment	= true
				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency

				if (PurchaseOrderLine entered
				and PurchaseOrderLine.Contract entered)
				    Contract 		= PurchaseOrderLine.Contract
				    ContractLine 	= PurchaseOrderLine.ContractLine

			Action Rules





				constraint (PurchaseOrderLine.ItemType.Service)
				    "MustBeServiceItem"
				    
				if (CostAdjustment)

					if  (ItemType.Service
					and  PurchaseOrderLine entered
					and  PurchaseOrderLine.ServiceCode.Amount)
						constraint (PurchaseOrderLine.MatchedAmount entered)
							"CannotCreateCostAdjustment.ThereIsNoRemainingMatchedAmountOnPurchaseOrderLine"

				if (QuantityAdjustment)
					if (ContractLine entered)
						constraint (!ContractLine.ServiceCode.Amount)
							"QuantityAdjustmentNotAllowedOnAmountTypeServiceLine"			
						if  (ContractLine.ServiceCode.Quantity)
							constraint (!InvoiceType.DebitMemo)
								"CannotIssueDebitMemoForAmountOrQuantitTypeServices"			

			Exit Rules

				include UpdateQuantityAmountAndCost
				if (TaxCode entered)
					include ProcessDetailTax

				if (!PayablesInvoice.BackgroundProcessing entered)
					invoke InvoiceUpdate PayablesInvoice


		UpdatePOLine is an Instance Action	
			restricted
			Action Rules

				invoke Update PurchaseOrderLine
					if (invoked.ItemType.Service)
						invoked.ChargebackQuantity = 0
					else
						if (MatchedQuantity < 0)
							invoked.ChargebackQuantity += MatchedQuantity
						else
							invoked.ChargebackQuantity -= MatchedQuantity
					if (invoked.ChargebackQuantity < 0)
						invoked.ChargebackQuantity = 0

		CreateDistributionsFromDistributionCode is an Instance Action
			valid when (AllowCreateFromDistributionCode)

			Parameters
				PayablesDistributionCode

			Parameter Rules
				PayablesDistributionCode
					required

			Action Rules
				TransientCurrencyTable	= PayablesInvoice.CurrencyTable
				LocalDistributionCode	= PayablesDistributionCode

				if (PurchaseOrderLine entered
				and InvoiceDistributionsForPurchaseOrderLineRel exists)
					confirmation required
						"ExistingDistributionsWillBeDeletedAndRecreated.Continue?"
					invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForPurchaseOrderLineRel
				else
				if  (ContractLine entered
				and  InvoiceDistributionsForContractLineRel exists)
					confirmation required
						"ExistingDistributionsWillBeDeletedAndRecreated.Continue?"
					invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForContractLineRel


				if  (first PayablesDistributionCodeDetailsRel.DistributionPercent entered)
					RemainingQuantity									= EnteredQuantity

					for each PayablesDistributionCodeDetailsRel

						LocalWorkAmount									= TotalDistributionAmount * each.DistributionPercent
						round LocalWorkAmount to nearest DerivedRoundTo

						invoke CreateFromMatch PayablesInvoiceDistribution
							invoked.Company								= Company
							invoked.PayablesInvoice						= PayablesInvoice
							invoked.DistributionType					= "D"
							invoked.GLFinanceCodeBlock					= each.DistributionAccount	
							invoked.DistributionAccount					= each.DistributionAccount
							invoked.PurchaseOrder						= PurchaseOrder
							invoked.PurchaseOrderLine					= PurchaseOrderLine
							invoked.ContractLine						= ContractLine
							invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail

							invoked.GLTransactionAmount					= LocalWorkAmount

				else
					RemainingAmount										= TotalDistributionAmount

					for each PayablesDistributionCodeDetailsRel

						LocalWorkAmount									= TotalDistributionAmount * (each.DistributionAmount / TotalDistributionAmount)
						round LocalWorkAmount to nearest DerivedRoundTo

						RemainingAmount  								-= LocalWorkAmount

						invoke CreateFromMatch PayablesInvoiceDistribution
							invoked.Company								= Company
							invoked.PayablesInvoice						= PayablesInvoice
							invoked.DistributionType					= "D"
							invoked.GLFinanceCodeBlock					= each.DistributionAccount	
							invoked.DistributionAccount					= each.DistributionAccount
							invoked.PurchaseOrder						= PurchaseOrder
							invoked.PurchaseOrderLine					= PurchaseOrderLine
							invoked.ContractLine						= ContractLine
							invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail

							invoked.GLTransactionAmount					= LocalWorkAmount


				invoke InvoiceUpdate PayablesInvoice

		AccrueTax is an Instance Action
			restricted
			Action Rules
				TaxAmount = AccruedTaxAmount

		CreateDistributionsFromInterface is an Instance Action
			restricted
			Parameters
			    PrmOverrideAccount is a FinanceCodeBlock
				TaxOnly is Boolean
			Action Rules


				if  (!ItemType.Inventoried)
					if 	(TaxOnly)
						NextSentence = true 
					else 
					if  (PrmOverrideAccount entered)
						TransientDistributionAccount = PrmOverrideAccount
						BypassBudgetEdit  = true
						include DoTransientAccountDistribution
						if (!PayablesInvoice.IsMemoOnly)
							include CheckPOCommitments
					else
					if  (PurchaseOrderLine entered)


						BypassBudgetEdit  = true
						include CopyPOLineDistributionsRuleBlock

						if (!PayablesInvoice.IsMemoOnly)
							include CheckPOCommitments

					else
					if (ContractLine entered)
						BypassBudgetEdit  = true
						include CopyContractLineDistributionsRuleBlock

						if (!PayablesInvoice.IsMemoOnly)
							include CheckPOCommitments


					if  (TaxCode entered
					and  !PayablesInvoice.DoOneSourceAfter
					and  !PayablesInvoice.CallVertexByDocument
					and  !TaxCode.TaxType.CalculatedRate
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
					and  !PayablesInvoice.TaxAdjustment.Calculate
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)

						if  (PrmOverrideAccount entered)
							TransientDistributionAccount = PrmOverrideAccount
							BypassBudgetEdit  = true
							ProcessingTax = true
							include DoTransientAccountDistribution
							ProcessingTax = false
						else
						if  (PurchaseOrderLine entered)
							BypassBudgetEdit  = true
							ProcessingTax = true
							include CopyPOLineDistributionsRuleBlock
							ProcessingTax = false
						else
						if (ContractLine entered)
							BypassBudgetEdit  = true
							ProcessingTax = true
							include CopyContractLineDistributionsRuleBlock
							ProcessingTax = false

		CopyPOLineDistributions is an Instance Action
			default label is "CreateDistributionsFromPurchaseOrderLine"
			valid when (CopyPOLineDistributionsValid)

			Action Rules
				TransientCurrencyTable = PayablesInvoice.CurrencyTable

				if (InvoiceDistributionsForPurchaseOrderLineRel exists)
					confirmation required
						"ExistingDistributionsWillBeDeletedAndRecreatedBasedOnNewValues.Continue?"

					invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForPurchaseOrderLineRel
					OldTaxCode = TaxCode
					include DeleteTaxDistributions

				include CopyPOLineDistributionsRuleBlock

				if (TaxCode entered
				and !PayablesInvoice.DoOneSourceAfter
				and !PayablesInvoice.CallVertexByDocument
				and !TaxCode.TaxType.CalculatedRate
				and !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
				and !PayablesInvoice.TaxAdjustment.Calculate
				and !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
					ProcessingTax = true
					include CopyPOLineDistributionsRuleBlock
					ProcessingTax = false
			Exit Rules
				if (!PayablesInvoice.InterfaceInProcess)
					invoke InvoiceUpdate PayablesInvoice

				if (PayablesInvoice.InterfaceInProcess
				and !PayablesInvoice.IsMemoOnly)
					include CheckPOCommitments

		CopyContractLineDistributions is an Instance Action
			valid when (CopyContractLineDistributionsValid)

			Action Rules

				TransientCurrencyTable 							= PayablesInvoice.CurrencyTable
				if  (InvoiceDistributionsForContractLineRel exists)
					confirmation required
						"ExistingDistributionsWillBeDeletedAndRecreatedBasedOnNewValues.Continue?"

				invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForContractLineRel
				OldTaxCode = TaxCode
				include DeleteTaxDistributions

				include CopyContractLineDistributionsRuleBlock

				if  (TaxCode entered
				and  !PayablesInvoice.DoOneSourceAfter
				and  !PayablesInvoice.CallVertexByDocument
				and  !TaxCode.TaxType.CalculatedRate
				and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
				and  !PayablesInvoice.TaxAdjustment.Calculate
				and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
					ProcessingTax = true
					include CopyContractLineDistributionsRuleBlock
					ProcessingTax = false
			Exit Rules
				if (!PayablesInvoice.InterfaceInProcess)
					invoke InvoiceUpdate PayablesInvoice

				if (PayablesInvoice.InterfaceInProcess
				and !PayablesInvoice.IsMemoOnly)
					include CheckPOCommitments


		ExportToPoInvLineFact is a Set Action
			default label is "LoadInvoiceDetailsForTierReporting"
			restricted
			completion message is "LoadOfPOInvoiceLineFactIsComplete"
			Parameters
				ProcurementGroup
				BeginMatchDate		is Date
				EndMatchDate   		is Date

			Parameter Rules
				ProcurementGroup
					required
					if (BeginMatchDate not entered
					and EndMatchDate   not entered)
						if (ProcurementGroup.ProcurementGroupSetActionLoadPoInvLineRel	exists)
							BeginMatchDate 	= ProcurementGroup.ProcurementGroupSetActionLoadPoInvLineRel.LastRunEndDate
						EndMatchDate	= current corporate date
				EndMatchDate
					if (BeginMatchDate entered)
						required
					constraint (EndMatchDate	>= BeginMatchDate)
						"EndMatchDateCannotPrecedeBeginMatchDate"

			Local Fields
				CurrentProcurementGroupSetActionLoadPoInvLine	is a ProcurementGroupSetAction
				LocalUNSPSCCode							is an UNSPSCCode

			Instance Selection
				where (ProcurementGroup 	= Company.VendorGroup.ProcurementGroupRel.ProcurementGroup
				and    MatchUpdateDate		entered
				and    MatchUpdateDate		>= BeginMatchDate
				and    MatchUpdateDate		<= EndMatchDate
				and    Status				= 1)

			Sort Order
				Status
				MatchUpdateDate

			Action Rules
				Set Rules

					Entrance Rules
						CurrentProcurementGroupSetActionLoadPoInvLine	= 4

					Exit Rules
						invoke Update CurrentProcurementGroupSetActionLoadPoInvLine
							invoked.LoadType				= 4
							if (EndMatchDate	= 0)
								invoked.LastRunEndDate		= current corporate date
							else
							if (EndMatchDate	> current corporate date)
								invoked.LastRunEndDate		= current corporate date
							else
								invoked.LastRunEndDate		= EndMatchDate

				Instance Rules
					invoke Update PoInvLineFactRel
						invoked.Contract  						    = Contract
						invoked.VendorItem    						= VendorItem
						invoked.Item          						= Item
						invoked.MatchedQty    						= MatchedQuantity
						invoked.MatchUnitCst  						= EnteredUnitCost
						invoked.VpriUomMult   						= VendorPriceUOMMultiplier
						invoked.TotDistAmt	  						= TotalDistributionAmount
						invoked.ItemGroup	  						= ProcurementGroup
						invoked.VendorGroup   						= Company.VendorGroup
						invoked.InvoiceDte    						= PayablesInvoice.InvoiceDate
						invoked.VendorVname	  						= PayablesInvoice.Vendor.VendorName
						invoked.ItemOnContract						= ItemOnContract
						invoked.CommodityCode						= CommodityCode
						invoked.CurrencyCode						= PayablesInvoice.InvoiceCurrency
						if (PurchaseOrderLine exists)
							invoked.PurchFrLoc    						= PurchaseOrder.PurchaseFromLocation
							invoked.Contract      						= PurchaseOrderLine.Contract
							invoked.PoDate        						= PurchaseOrder.PurchaseOrderDate
							invoked.PoUnitCost	  						= PurchaseOrderLine.EnteredUnitCost
							invoked.ProcureGroup  						= PurchaseOrderLine.Company.ProcurementGroup
							invoked.MfgContract   						= PurchaseOrderLine.ManufacturerContract
							invoked.Location	  						= PurchaseOrderLine.ShipToLocation
							invoked.EntBuyUom	  						= PurchaseOrderLine.EnteredBuyUOM
							invoked.PreferredFlag 						= PurchaseOrderLine.Preferred
							invoked.ContractName						= PurchaseOrderLine.Contract.Name
							invoked.ContractGroup						= PurchaseOrderLine.Company.VendorGroup
							if (PurchaseOrderLine.Manufacturer.ManufacturerCode entered)
								if (PurchaseOrderLine.Manufacturer exists)
									invoked.ManufacturerCode			= PurchaseOrderLine.Manufacturer.ManufacturerCode
			 						invoked.ManufacturerDivision 		= PurchaseOrderLine.Manufacturer.ManufacturerDivision
									invoked.ManufacturerNumber 			= PurchaseOrderLine.ManufacturerNumber
								else
									initialize invoked.ManufacturerCode
			 						initialize invoked.ManufacturerDivision
									initialize invoked.ManufacturerNumber
							else
								initialize invoked.ManufacturerCode
		 						initialize invoked.ManufacturerDivision
								initialize invoked.ManufacturerNumber
							invoked.PurchMajcl							= PurchaseOrderLine.MajorPurchasingClass
							invoked.PurchMincl 							= PurchaseOrderLine.MinorPurchasingClass
							if (PurchaseOrderLine.UNSPSCCode.UNSPSCSegment entered)
								LocalUNSPSCCode.UNSPSCSegment			= PurchaseOrderLine.UNSPSCCode.UNSPSCSegment
								if (PurchaseOrderLine.UNSPSCCode.UNSPSCFamily not entered)
									LocalUNSPSCCode.UNSPSCFamily			= "00"
								else
									LocalUNSPSCCode.UNSPSCFamily	= PurchaseOrderLine.UNSPSCCode.UNSPSCFamily
								if (PurchaseOrderLine.UNSPSCCode.UNSPSCClass not entered)
									LocalUNSPSCCode.UNSPSCClass				= "00"
								else
									LocalUNSPSCCode.UNSPSCClass				= PurchaseOrderLine.UNSPSCCode.UNSPSCClass
								if (PurchaseOrderLine.UNSPSCCode.UNSPSCCommodity not entered)
									LocalUNSPSCCode.UNSPSCCommodity			= "00"
								else
									LocalUNSPSCCode.UNSPSCCommodity			= PurchaseOrderLine.UNSPSCCode.UNSPSCCommodity
								invoked.UNSPSCCode						= LocalUNSPSCCode
							else
								initialize invoked.UNSPSCCode
						else
							invoked.PurchFrLoc    						= ContractLine.Contract.ApPoPurchaseFrom.PurchaseFromLocation
							invoked.ContractGroup						= ContractLine.ContractGroup
							invoked.Contract      						= ContractLine.Contract
							invoked.ContractName						= ContractLine.Contract.Name
							invoked.PoDate        						= ContractLine.EffectiveDate
							invoked.PoUnitCost	  						= EnteredUnitCost
							invoked.ProcureGroup  						= ContractLine.ContractGroup
							invoked.MfgContract   						= 0
							invoked.EntBuyUom	  						= ContractLine.UOM
							invoked.PreferredFlag 						= 0

		BuildRebatesForMatchedInvoiceLines is a Set Action  
			completion message is "'BuildRebatesForMatchedInvoiceLines'HasStarted;ViewResultsUnder'MyScheduledActions'"
			restricted
			run in foreground
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is Numeric size 15
				PrmCompany					is Numeric size 4
				PrmPoNumber					is like PurchaseOrder
				PrmPoRelease				is Numeric size 4
				PrmPoCode					is AlphaUpper size 4
				PrmLineNbr					is like PurchaseOrderLine
				PrmBeginMatchDate 			is Date
				PrmEndMatchDate  	 		is Date
				PrmManufacturer				is a Manufacturer
				PrmMajorPurchasingClass		is like MajorPurchasingClass	
				PrmMinorPurchasingClass		is like MinorPurchasingClass	
				PrmUNSPSCSegment			is AlphaUpper size 2
				PrmUNSPSCFamily				is AlphaUpper size 2
				PrmUNSPSCClass				is AlphaUpper size 2
				PrmUNSPSCCommodity			is AlphaUpper size 2
				PrmManufacturerContract		is Numeric size 15
				PrmLocation					is AlphaUpper size 5

			Instance Selection
				where (PrmCompany					= Company
				and    PrmPoNumber					= PurchaseOrder
				and    PrmLineNbr		  			= PurchaseOrderLine
				and    MatchUpdateDate				>= PrmBeginMatchDate
				and    MatchUpdateDate				<= PrmEndMatchDate)

			Sort Order
				Company
				MatchUpdateDate
				Status
				PurchaseOrder
				PurchaseOrderLine


			Action Rules
				Instance Rules
					if (ContractLineSpecialItemLinkRel exists)			
						LocalItem				= ContractLineSpecialItemLinkRel.Item
					else
						LocalItem				= Item

					if (PrmContract entered)
						LocalContractGroup			= PrmContractGroup
						LocalContract				= PrmContract
						if (ItemType.Special
						or  ItemType.Service)								
							for each QualifierItemsForContractAndRebateQualifierContractRel
								include ProcessContractRebateQualifiers
						else
							for each QualifierItemsForContractRel		
								include ProcessContractRebateQualifiers

						if (CommodityCode entered)					
							I1 = 1
							while (I1 < 7)
								if (CommodityCode.Segment[I1] entered)
									initialize LocalCommodityCode
									I2 = 1
									while (I2 <= I1)
										LocalCommodityCode.Segment[I2]  	= CommodityCode.Segment[I2]
										I2									+= 1
									for each QualifierCodesLocalCommodityCodeForContractRel
										include ProcessContractRebateQualifiers
								I1	+= 1

						if (PurchaseOrderLine.Manufacturer.ManufacturerCode		entered)	
							for each QualifierCodesManufInfoLevel1ForContractRel
								include ProcessContractRebateQualifiers

							if (PurchaseOrderLine.Manufacturer.ManufacturerDivision		entered)
								for each QualifierCodesManufInfoLevel2ForContractRel
									include ProcessContractRebateQualifiers

						if (PurchaseOrderLine.MajorPurchasingClass 	entered)	
							for each QualifierCodesPurchClassLevel1ForContractRel
								include ProcessContractRebateQualifiers

							if (PurchaseOrderLine.MinorPurchasingClass	entered)
								for each QualifierCodesPurchClassLevel2ForContractRel
									include ProcessContractRebateQualifiers

						if (PurchaseOrderLine.UNSPSCCode.UNSPSCSegment 		entered)	
							for each QualifierCodesUnspscCodeLevel1ForContractRel
								include ProcessContractRebateQualifiers

							if (PurchaseOrderLine.UNSPSCCode.UNSPSCFamily		entered)
								for each QualifierCodesUnspscCodeLevel2ForContractRel
									include ProcessContractRebateQualifiers

								if (PurchaseOrderLine.UNSPSCCode.UNSPSCClass		entered)
									for each QualifierCodesUnspscCodeLevel3ForContractRel
										include ProcessContractRebateQualifiers

									if (PurchaseOrderLine.UNSPSCCode.UNSPSCCommodity		entered)
										for each QualifierCodesUnspscCodeLevel4ForContractRel
											include ProcessContractRebateQualifiers

		DeleteUnmatchedRebateInvoiceLines is a Set Action
			completion message is "DeleteOfRebateInvoiceLinesThatAreNowUnmatchedHasStarted;ViewResultsUnder'MyScheduledActions'"
			restricted
			run in foreground
			Parameters
				PrmCompany					is Numeric size 4
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract
				PrmPoNumber					is like PurchaseOrder
				PrmPoRelease				is Numeric size 4
				PrmPoCode					is AlphaUpper size 4
				PrmLineNbr					is like PurchaseOrderLine
				PrmBeginMatchDate 			is Date
				PrmEndMatchDate  	 		is Date

			Instance Selection
				where ((PrmCompany					= Company
				and     PrmPoNumber					= PurchaseOrder
				and     PrmLineNbr		  			= PurchaseOrderLine
				and     MatchUpdateDate				entered
				and     MatchUpdateDate				>= PrmBeginMatchDate
				and     MatchUpdateDate				<= PrmEndMatchDate)
				and   ((Status						= 0)
				or     (Status						= 1
				and     PurchaseOrderReceipt		= 0
				and     MatchObjectID				= 0
				and     PayablesInvoice.MatchStatus	= 2
				and    !Contract.AgreementType.Service)))

			Sort Order
				Company
				MatchUpdateDate
				Status
				PurchaseOrder
				PurchaseOrderLine

			Action Rules
				Instance Rules
					LocalContractGroup		= PrmContractGroup
					LocalContract			= PrmContract
					invoke Delete OneContractRebateDueInvoiceLinesRel		

		BuildAllRebatesContractRebateDueInvoiceLinesAllContracts is a Set Action
			completion message is "LoadOfAllRebatesContractRebateDueInvoiceLinesHasStarted;Check'MyScheduledActions'ForCompletion"
			restricted

			Parameters
				PrmCompany					is Numeric size 4
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract
				PrmBeginMatchDate 			is Date
				PrmEndMatchDate  	 		is Date

			Instance Selection
				where (PrmCompany		= Company
				and  ((PrmContract      = Contract
				and    PrmContract entered)
				or     PrmContract !entered)
				and    MatchUpdateDate	entered
				and    MatchUpdateDate 	>= PrmBeginMatchDate
				and    MatchUpdateDate  <= PrmEndMatchDate)

			Sort Order
				Company
				MatchUpdateDate
				Status

			Action Rules
				Instance Rules
					if (ContractLineSpecialItemLinkRel exists)			
						LocalItem				= ContractLineSpecialItemLinkRel.Item
					else
						LocalItem				= Item

					if (ItemType.Special
					or  ItemType.Service)
						for each ContractRebateQualifierItemsForContractLineRel	
							include ProcessContractRebateQualifiersViaPoline
					else
						for each ContractRebateQualifierItemsRel		
							include ProcessContractRebateQualifiersViaPoline

					if (CommodityCode entered)					
						I1 = 1
						while (I1 < 7)
							if (CommodityCode.Segment[I1] entered)
								initialize LocalCommodityCode
								I2 = 1
								while (I2 <= I1)
									LocalCommodityCode.Segment[I2]  	= CommodityCode.Segment[I2]
									I2									+= 1
								for each ContractRebateQualifierCodesLocalCommodityCodeRel
									include ProcessContractRebateQualifiersViaPoline
							I1	+= 1

					if (ContractLine entered)
						if (ContractLine.UNSPSCCode.UNSPSCSegment 		entered)	
							for each ServiceContractRebateQualifierCodesUnspscCodeLevel1Rel
								include ProcessContractRebateQualifiersViaPoline

							if (ContractLine.UNSPSCCode.UNSPSCFamily		entered)
								for each ServiceContractRebateQualifierCodesUnspscCodeLevel2Rel
									include ProcessContractRebateQualifiersViaPoline

								if (ContractLine.UNSPSCCode.UNSPSCClass		entered)
									for each ServiceContractRebateQualifierCodesUnspscCodeLevel3Rel
										include ProcessContractRebateQualifiersViaPoline

									if (ContractLine.UNSPSCCode.UNSPSCCommodity		entered)
										for each ServiceContractRebateQualifierCodesUnspscCodeLevel4Rel
											include ProcessContractRebateQualifiersViaPoline

					if (PurchaseOrderLine entered)
						if (PurchaseOrderLine.Manufacturer.ManufacturerCode		entered)	
							for each ContractRebateQualifierCodesManufInfoLevel1Rel
								include ProcessContractRebateQualifiersViaPoline

							if (PurchaseOrderLine.Manufacturer.ManufacturerDivision		entered)
								for each ContractRebateQualifierCodesManufInfoLevel2Rel
									include ProcessContractRebateQualifiersViaPoline

						if (PurchaseOrderLine.MajorPurchasingClass 	entered)	
							for each ContractRebateQualifierCodesPurchClassLevel1Rel
								include ProcessContractRebateQualifiersViaPoline

							if (PurchaseOrderLine.MinorPurchasingClass	entered)
								for each ContractRebateQualifierCodesPurchClassLevel2Rel
									include ProcessContractRebateQualifiersViaPoline

						if (PurchaseOrderLine.UNSPSCCode.UNSPSCSegment 		entered)	
							for each ContractRebateQualifierCodesUnspscCodeLevel1Rel
								include ProcessContractRebateQualifiersViaPoline

							if (PurchaseOrderLine.UNSPSCCode.UNSPSCFamily		entered)
								for each ContractRebateQualifierCodesUnspscCodeLevel2Rel
									include ProcessContractRebateQualifiersViaPoline

								if (PurchaseOrderLine.UNSPSCCode.UNSPSCClass		entered)
									for each ContractRebateQualifierCodesUnspscCodeLevel3Rel
										include ProcessContractRebateQualifiersViaPoline

									if (PurchaseOrderLine.UNSPSCCode.UNSPSCCommodity		entered)
										for each ContractRebateQualifierCodesUnspscCodeLevel4Rel
											include ProcessContractRebateQualifiersViaPoline

		DeletePayablesInvoiceDetailRebateInvoiceLinesForCompany is a Set Action			
			completion message is "DeleteOfUnmatchedInvoiceDetailRebatesInvoiceLinesHasStarted;Check'MyScheduledActions'ForCompletion"
			restricted

			Parameters
				PrmCompany					is Numeric size 4
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract
				PrmBeginMatchDate 			is Date
				PrmEndMatchDate  	 		is Date

			Instance Selection
				where ((PrmCompany					= Company
				and     MatchUpdateDate	entered
				and     MatchUpdateDate				>= PrmBeginMatchDate
				and     MatchUpdateDate				<= PrmEndMatchDate)
				and   ((Status						= 0)
				or     (Status						= 1
				and   	PurchaseOrderReceipt		= 0
				and     MatchObjectID				= 0
				and     PayablesInvoice.MatchStatus	= 2
				and    !Contract.AgreementType.Service)))

			Sort Order
				Company
				MatchUpdateDate
				Status

			Action Rules
				Instance Rules
					invoke Delete ContractRebateDueInvoiceLinesRel		

		PopulateBlankItem is a Set Action
			restricted
			Parameters
				PrmCompany		is a PurchasingCompany
			Instance Selection
				where (Company = PrmCompany
				and	  (ItemType.Service or ItemType.Special)
				and	   Item not entered)
			Action Rules
				Instance Rules
					if (ItemType.Special
					and VendorItem entered)
						Item = VendorItem
					else
						Item = ItemDescription

		PayAsBilled is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmFinanceEnterpriseGroup 
					default to PrmCompany.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Local Fields
				LocalTaxDifference  is like InternationalAmount
				LocalProrateAmount  is like InternationalAmount
				LocalTotalTax		is like InternationalAmount
				
			Action Rules
					
				Empty Set Rules
					LocalTaxDifference = PrmPayablesInvoice.TaxAmount - PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount


					for each PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
						if (each.TaxAmount entered)
						    LocalProrateAmount = (each.TaxAmount + (LocalTaxDifference * (each.TaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

							invoke Update each.PayablesInvoiceAddOnChargeTaxRel
							    invoked.OverrideTaxAmount = LocalProrateAmount
						    
							LocalTotalTax += LocalProrateAmount
						else
						if (each.AccruedTaxAmount entered)
						    LocalProrateAmount = (each.AccruedTaxAmount + (LocalTaxDifference * (each.AccruedTaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

							invoke Update each.PayablesInvoiceAddOnChargeTaxRel
							    invoked.OverrideTaxAmount = LocalProrateAmount
						    
							LocalTotalTax += LocalProrateAmount

					if (LocalTotalTax not = PrmPayablesInvoice.TaxAmount)
						for each PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
							if (each.InvoiceLineTaxable)
								invoke Update each.PayablesInvoiceAddOnChargeTaxRel
								    invoked.OverrideTaxAmount += (LocalTotalTax - PrmPayablesInvoice.TaxAmount)
								end for each
					
					invoke ProcessOneSourceForMatch
						invoked.PrmCompany = PrmCompany
						invoked.PrmPayablesInvoice = PrmPayablesInvoice

				Set Rules
					Entrance Rules
						LocalTaxDifference = PrmPayablesInvoice.TaxAmount - PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount

						for each PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
							if (each.TaxAmount entered)
							    LocalProrateAmount = (each.TaxAmount + (LocalTaxDifference * (each.TaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

								invoke Update each.PayablesInvoiceAddOnChargeTaxRel
								    invoked.OverrideTaxAmount = LocalProrateAmount

								LocalTotalTax += LocalProrateAmount
							else
							if (each.AccruedTaxAmount entered)
							    LocalProrateAmount = (each.AccruedTaxAmount + (LocalTaxDifference * (each.AccruedTaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

								invoke Update each.PayablesInvoiceAddOnChargeTaxRel
								    invoked.OverrideTaxAmount = LocalProrateAmount

								LocalTotalTax += LocalProrateAmount

					Exit Rules

					
						if (LocalTotalTax not = PrmPayablesInvoice.TaxAmount)
							if (PrmPayablesInvoice.PayablesInvoiceDetailRel exists)
								for each PrmPayablesInvoice.PayablesInvoiceDetailRel
									if (each.InvoiceLineTaxable)
										invoke Update each.PayablesInvoiceDetailTaxRel
										    invoked.OverrideTaxAmount += (LocalTotalTax - PrmPayablesInvoice.TaxAmount)
										end for each
							else
								for each PrmPayablesInvoice.PayablesInvoiceAddOnChargeRel
									if (each.InvoiceLineTaxable)
										invoke Update each.PayablesInvoiceAddOnChargeTaxRel
										    invoked.OverrideTaxAmount += (LocalTotalTax - PrmPayablesInvoice.TaxAmount)
										end for each
						
						invoke ProcessOneSourceForMatch
							invoked.PrmCompany = PrmCompany
							invoked.PrmPayablesInvoice = PrmPayablesInvoice

				Instance Rules
					if (TaxAmount entered)
					    LocalProrateAmount = (TaxAmount + (LocalTaxDifference * (TaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

						invoke Update PayablesInvoiceDetailTaxRel
						    invoked.OverrideTaxAmount = LocalProrateAmount
						LocalTotalTax += LocalProrateAmount
					else
					if (AccruedTaxAmount entered)
					    LocalProrateAmount = (AccruedTaxAmount + (LocalTaxDifference * (AccruedTaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

						invoke Update PayablesInvoiceDetailTaxRel
						    invoked.OverrideTaxAmount = LocalProrateAmount
						LocalTotalTax += LocalProrateAmount

					for each PayablesInvoiceAddOnChargeRel
						if (each.InvoiceLineTaxable)
							if (each.TaxAmount entered)
							    LocalProrateAmount = (each.TaxAmount + (LocalTaxDifference * (each.TaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

								invoke Update each.PayablesInvoiceAddOnChargeTaxRel
								    invoked.OverrideTaxAmount = LocalProrateAmount
								LocalTotalTax += LocalProrateAmount
							else
							if (each.AccruedTaxAmount entered)
							    LocalProrateAmount = (each.AccruedTaxAmount + (LocalTaxDifference * (each.AccruedTaxAmount / PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount)))

								invoke Update each.PayablesInvoiceAddOnChargeTaxRel
								    invoked.OverrideTaxAmount = LocalProrateAmount
								LocalTotalTax += LocalProrateAmount
					
		ProcessVertexSet is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmMatchFrom		is Numeric 1
					States 
						AutoMatch				value is 1
						ReconciliationMatch		value is 2
						OnlineMatch 			value is 3
				PrmReconMatchWork   is a MatchWork
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmFinanceEnterpriseGroup 
					default to PrmCompany.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    TaxCode entered)

			Rule Blocks 
				StartOfSetRules 
					invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
						invoked.TaxCode					= PrmPayablesInvoice.TaxCode
						invoked.EnteredInvoiceAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						invoked.EnteredTaxAmount		= PrmPayablesInvoice.TaxAmount	
						invoked.EnteredTaxableAmount	= PrmPayablesInvoice.TaxableAmount
						initialize invoked.TaxSystemTaxAmount
						if (PrmPayablesInvoice.TaxAmount entered
						and PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
							invoked.TaxMethod			= "I"
						else
							if (PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
								invoked.TaxMethod		= "A"

					invoke FastUpdate PrmPayablesInvoice
					    initialize invoked.POTaxAmount

			Action Rules				
				Empty Set Rules
					include StartOfSetRules 
					invoke ProcessVertexSet PayablesInvoiceAddOnCharge 
						invoked.PrmCompany 			= PrmCompany 
						invoked.PrmPayablesInvoice 	= PrmPayablesInvoice
						invoked.PrmAutoMatchResult 	= PrmAutoMatchResult
						invoked.PrmMatchFrom 		= PrmMatchFrom
						invoked.PrmReconMatchWork 	= PrmReconMatchWork

				Set Rules
					Exit Rules
						include StartOfSetRules 
						invoke ProcessVertexSet PayablesInvoiceAddOnCharge	
							invoked.PrmCompany 			= PrmCompany 
							invoked.PrmPayablesInvoice 	= PrmPayablesInvoice
							invoked.PrmAutoMatchResult 	= PrmAutoMatchResult
							invoked.PrmMatchFrom 		= PrmMatchFrom
							invoked.PrmReconMatchWork 	= PrmReconMatchWork

				Instance Rules

					invoke ProcessVertex 

		ProcessVertex is an Instance Action
			default label is untranslatable
			restricted
			Action Rules 
				initialize CalculateTax

				CalculateTax.TaxableAmount						= TotalDistributionAmount
				CalculateTax.InvoiceAmount						= TotalDistributionAmount
				if  (PayablesInvoice.InvoiceType.CreditMemo
				and  CalculateTax.TaxableAmount > 0)
					CalculateTax.TaxableAmount					*= -1
					CalculateTax.InvoiceAmount					*= -1

				include PopulateCalculateTaxInputFields
		
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
				LocalCalculateTaxExecuted 						= CalculateTax.ExecuteCalculateTax
				CalculateTaxHasBeenCalled						= true 

				LocalTaxTable = CalculateTax.TaxTable
				for each LocalTaxTable.TaxTableOutput
					


					if (each.AccrualFlag = "A")
						LocalAccruedTaxAmount += each.TaxAmount5DP
					else
						LocalTaxAmount += each.TaxAmount5DP

				round LocalTaxAmount to nearest DerivedRoundTo
				round LocalInvoicedTaxAmount to nearest DerivedRoundTo
				round LocalAccruedTaxAmount to nearest DerivedRoundTo

				if (TaxCode = "00")
					TaxCode = CalculateTax.TaxCode 	

				TaxAmount 			= LocalTaxAmount
				AccruedTaxAmount	= LocalAccruedTaxAmount
				InvoicedTaxAmount 	= LocalInvoicedTaxAmount

				invoke FastUpdate PayablesInvoice
					invoked.POTaxAmount += TaxAmount

				if (TaxAmount entered or AccruedTaxAmount entered)
					InvoiceLineTaxable				= true

				invoke Update PayablesInvoice.PayablesInvoiceTaxRel
					invoked.TaxSystemTaxAmount		+= TaxAmount 
					
				invoke Update PayablesInvoiceDetailTaxRel
					invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction
					invoked.ShipToLocation					= Location
					invoked.CalculatedTaxAmount 			= TaxAmount 

				if (TaxAmount 			not = LocalTaxAmount
				or  AccruedTaxAmount	not = LocalAccruedTaxAmount
				or  InvoicedTaxAmount 	not = LocalInvoicedTaxAmount
				or  TaxCode             not =  CalculateTax.TaxCode)

					if  (TaxCode entered)
						OldTaxCode						= TaxCode

					include DeleteTaxDistributions 

					if  (!ItemType.Inventoried)
						BypassBudgetEdit  = true
						ProcessingTax = true

						if  (PurchaseOrderLine entered)
							include CopyPOLineDistributionsRuleBlock
						else
						if (ContractLine entered)
							include CopyContractLineDistributionsRuleBlock

						ProcessingTax = false

		ProcessOneSourceForMatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmFinanceEnterpriseGroup 
					default to PrmCompany.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Local Fields
				SingleCallToOneSource           is Boolean
				ProcessAOC						is Boolean
				AutoMatchError					is Boolean
				AutoMatchErrorMessage			is Alpha 200
				LocalDistributionAccount    	is a FinanceCodeBlock
				LocalLineItemNumber    			is like DistributionSequence

				MiscAOCPurchaseOrderLine		is a PurchaseOrderLine view
				MiscAOCExtendedAmount			is an InternationalAmount

				OneSourceMatchWork				is a MatchWork view
				OneSourceAutoMatchError			is Alpha 200
				SetTaxError						is Boolean

			Rule Blocks
				
				SetCalculateTax		
				

					initialize CalculateTax
					CalculateTax.TaxEntity 								= PrmCompany.AccountingEntity
					CalculateTax.Function			 					= CalculateTax.Function.CalculateTax
					CalculateTax.CallingModule							= "Payables_Invoice"
					CalculateTax.InFinanceEnterpriseGroup				= PrmCompany.FinanceEnterpriseGroup

					if (SingleCallToOneSource)
						CalculateTax.TaxCode							= PrmPayablesInvoice.Location.PurchaseOrderTaxCode
					else
					if (ProcessAOC)
					    if (LocalPayablesAddOnChargeRel.TaxCode entered)
							CalculateTax.TaxCode 						= LocalPayablesAddOnChargeRel.TaxCode
						else
						if (LocalPayablesAddOnChargeRel.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
							CalculateTax.TaxCode     					= LocalPayablesAddOnChargeRel.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
						else
							CalculateTax.TaxCode     					= PrmPayablesInvoice.Location.PurchaseOrderTaxCode
					else
					if (TaxCode entered)
						CalculateTax.TaxCode 							= TaxCode
					else
					if (PurchaseOrderLine entered)
						CalculateTax.TaxCode  							= PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
					else 
					if (ContractLine entered)
						if (ContractLine.TaxCode entered)
							CalculateTax.TaxCode						= ContractLine.TaxCode
						else 
							CalculateTax.TaxCode						= PrmPayablesInvoice.Location.PurchaseOrderTaxCode

					CalculateTax.ChargedTaxAmount 						= PrmPayablesInvoice.TaxAmount 
					CalculateTax.Invoice								= PrmPayablesInvoice.Invoice
					CalculateTax.Suffix									= PrmPayablesInvoice.Suffix

					CalculateTax.VoucherNumber				= PrmPayablesInvoice.VoucherNumber
					CalculateTax.ShipmentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxPointDate				= PrmPayablesInvoice.DerivedTaxPointDate	
				   	CalculateTax.TransactionSource			= "I"	
					if (PrmPayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress			= PrmPayablesInvoice.BillFromLocation.VendorAddress	 	
					else
						CalculateTax.POAAddress			= PrmPayablesInvoice.Vendor.VendorAddress

					if (PrmPayablesInvoice.BillToProcessLevel.PostalAddress entered)									
						CalculateTax.BuyerAdminDestAddress		= PrmPayablesInvoice.BillToProcessLevel.PostalAddress	
					else
						if (PrmPayablesInvoice.ProcessLevel.PostalAddress entered)										
							CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.ProcessLevel.PostalAddress		
						else
							CalculateTax.BuyerAdminDestAddress	= Company.AccountingEntity.AddressCode.PostalAddress	
						

					CalculateTax.CallingModule							= "Payables_Invoice"
					CalculateTax.System									= "AP"
					CalculateTax.TransactionCurrency					= PrmPayablesInvoice.InvoiceCurrency
					CalculateTax.BaseCurrency							= PrmCompany.Currency
					if  (PrmPayablesInvoice.VendorLocationRel exists)
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
					else
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress
				
					CalculateTax.InvoiceDate							= PrmPayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate 							= PrmPayablesInvoice.InvoiceDate
					CalculateTax.GeneralLedgerDate 						= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxDate								= PrmPayablesInvoice.InvoiceDate
		
				    CalculateTax.VATRegistrationCountry    	 			= PrmPayablesInvoice.TaxEntityRel.VATRegistrationCountry 			
				    CalculateTax.VATRegistrationNumber					= PrmPayablesInvoice.TaxEntityRel.VATRegistrationNumber			
					if (PrmPayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.PurchaseFromLocation.VendorAddress 
				    	CalculateTax.FromVATRegistrationCountry 		= PrmPayablesInvoice.PurchaseFromLocation.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber			= PrmPayablesInvoice.PurchaseFromLocation.VATRegistrationNumber				
						CalculateTax.FromTaxCode						= PrmPayablesInvoice.PurchaseFromLocation.TaxCode
					else
					if (PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.VendorAddress 
				    	CalculateTax.FromVATRegistrationCountry 		= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber			= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
						CalculateTax.FromTaxCode						= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.TaxCode
					else
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.Vendor.VendorAddress		
				    	CalculateTax.FromVATRegistrationCountry 		= PrmPayablesInvoice.Vendor.VATRegistrationCountry					
				    	CalculateTax.FromVATRegistrationNumber			= PrmPayablesInvoice.Vendor.VATRegistrationNumber					
						CalculateTax.FromTaxCode						= PrmPayablesInvoice.Vendor.TaxCode
	
			   		CalculateTax.InvoiceCompany							= PrmCompany
			   		CalculateTax.ProcessLevel							= PrmPayablesInvoice.ProcessLevel 
					CalculateTax.VendorGrp								= PrmCompany.VendorGroup
					CalculateTax.Vendor									= PrmPayablesInvoice.Vendor 
					CalculateTax.VendorCustomerName						= PrmPayablesInvoice.FirstPurchaseOrder.Vendor.VendorName 	
					CalculateTax.DeliveryTerms          				= PrmPayablesInvoice.FirstPurchaseOrder.ShipTerm
					CalculateTax.PointOfTitleTransfer					= PrmPayablesInvoice.PayablesInvoiceTaxRel.PointOfTitleTransfer
	
					if (PrmPayablesInvoice.FirstPurchaseOrder.DropshipAddress entered)
						CalculateTax.PostalAddress						= PrmPayablesInvoice.FirstPurchaseOrder.DropshipAddress
					else
					if (PrmPayablesInvoice.Location entered)
						if (PrmPayablesInvoice.Location.PostalAddressForPurchaseOrder entered)
							CalculateTax.PostalAddress					= PrmPayablesInvoice.Location.PostalAddressForPurchaseOrder
						else 	
							CalculateTax.PostalAddress					= PrmPayablesInvoice.Location.PostalAddress	
					else
					if (PrmPayablesInvoice.FirstPurchaseOrder > 0
					and PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation entered)
						if (PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder entered)
							CalculateTax.PostalAddress					= PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
						else 	
							CalculateTax.PostalAddress					= PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddress	
					else
						CalculateTax.PostalAddress						= PrmPayablesInvoice.ProcessLevel.PostalAddress	
	
				    CalculateTax.DefaultFilingCurrency 					= PrmCompany.Currency 
					CalculateTax.CurrencyRate							= PrmPayablesInvoice.FirstPurchaseOrder.EnteredCurrencyConversionRate 		
				    CalculateTax.TransactionCurrency 					= PrmPayablesInvoice.InvoiceCurrency								
					CalculateTax.BaseCurrency 							= PrmCompany.Currency					
					CalculateTax.ReceiptSite							= PrmPayablesInvoice.ProcessLevel								


					if (SingleCallToOneSource)	
						CalculateTax.TaxableAmount 					= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						CalculateTax.InvoiceAmount					= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						CalculateTax.Location						= PrmPayablesInvoice.Location
						if (Location entered)
							if (Location.PostalAddressForPurchaseOrder entered)
								CalculateTax.PostalAddress			= Location.PostalAddressForPurchaseOrder
							else 	
								CalculateTax.PostalAddress			= Location.PostalAddress	
					else
					if (!ProcessAOC)
						CalculateTax.ProductTaxCategory				= ProductTaxCategory
						CalculateTax.TaxableAmount 					= TotalDistributionAmount
						CalculateTax.InvoiceAmount					= TotalDistributionAmount
						CalculateTax.Location						= Location
						CalculateTax.Quantity						= EnteredQuantity 
				   		CalculateTax.CommodityCode					= DerivedCommodityCodeNoDash				
				   		CalculateTax.EAMCommodityCode				= EAMCommodityCode				
						CalculateTax.TaxUsageCode					= TaxUsageCode					
						if (Location entered)
							if (Location.PostalAddressForPurchaseOrder entered)
								CalculateTax.PostalAddress			= Location.PostalAddressForPurchaseOrder
							else 	
								CalculateTax.PostalAddress			= Location.PostalAddress	
						CalculateTax.LineNumber						= PurchaseOrderLine		
						CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
	
						CalculateTax.Description					= ItemDescription                                    
						CalculateTax.ItemNumber						= Item
						CalculateTax.LineNumber						= PurchaseOrderLine
						CalculateTax.UniqueLineNumber				= UniqueID
					else
						CalculateTax.ProductTaxCategory				= LocalPayablesAddOnChargeRel.ProductTaxCategory
						CalculateTax.TaxableAmount 					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
						CalculateTax.InvoiceAmount					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
						CalculateTax.Location						= LocalPayablesAddOnChargeRel.Location
						CalculateTax.Quantity						= LocalPayablesAddOnChargeRel.EnteredQuantity 
						CalculateTax.TaxUsageCode					= LocalPayablesAddOnChargeRel.TaxUsageCode					
						if (LocalPayablesAddOnChargeRel.Location entered)
							if (LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder entered)
								CalculateTax.PostalAddress			= LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder
							else 	
								CalculateTax.PostalAddress			= LocalPayablesAddOnChargeRel.Location.PostalAddress	
						CalculateTax.LineNumber						= LocalPayablesAddOnChargeRel.PurchaseOrderLine		
						CalculateTax.UniqueIdOfRelatedObject		= LocalPayablesAddOnChargeRel.UniqueID													
	
						CalculateTax.Description					= LocalPayablesAddOnChargeRel.AddOnCharge.Description                                    
						CalculateTax.ItemNumber						= LocalPayablesAddOnChargeRel.AddOnCharge
						CalculateTax.LineNumber						= LocalPayablesAddOnChargeRel.PurchaseOrderLine
						CalculateTax.UniqueLineNumber				= LocalPayablesAddOnChargeRel.UniqueID

						if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode)
							CalculateTax.CommodityCode				= LocalPayablesAddOnChargeRel.AddOnCharge.DerivedCommodityCodeNoDash
						else 
						if (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
							CalculateTax.CommodityCode				= LocalPayablesAddOnChargeRel.PurchaseOrderLine.DerivedCommodityCodeNoDash
						else
						if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCodeFromLargestPOLine)
							CalculateTax.CommodityCode				= MiscAOCPurchaseOrderLine.DerivedCommodityCodeNoDash


					UserElementGroup.UserElement[1].Number 				= 1
					UserElementGroup.UserElement[1].Name				= "ATTRIBUTE1"
					UserElementGroup.UserElement[1].Value				= "INVC"
	
					UserElementGroup.UserElement[2].Number 				= 2
					UserElementGroup.UserElement[2].Name				= "ATTRIBUTE3"
					UserElementGroup.UserElement[2].Value				= PrmPayablesInvoice.FirstPurchaseOrder		
	
					if  (PrmPayablesInvoice.FirstPurchaseOrder.AribaPOType entered)
						UserElementGroup.UserElement[3].Number 			= 3
						UserElementGroup.UserElement[3].Name			= "ATTRIBUTE4"
						UserElementGroup.UserElement[3].Value			= PrmPayablesInvoice.FirstPurchaseOrder.AribaPOType		
	
					CalculateTax.SabrixUserElement						= UserElementGroup	
					CalculateTax.CreateOutputUserFieldFile				= true
			
					CalculateTax.ReceiptSite							= PrmPayablesInvoice.ProcessLevel							
					CalculateTax.UserElementLevel						= blank
		
					CalculateTax.BypassEditing							= true  
		
					if (PrmPayablesInvoice.IsCreditInvoice)			
						CalculateTax.InvoicedOrCreditMemo	= "C"	
					else											
						CalculateTax.InvoicedOrCreditMemo	= "I"	

					if (SingleCallToOneSource)	
						CalculateTax.SendMultLineItems					= true
						CalculateTax.UpdateLineItems					= true
						CalculateTax.UniqueIdOfRelatedObject			= PrmPayablesInvoice.UniqueID
						CalculateTax.UserElementLevel					= "L"
					else
					    include CalculateTaxLineItem

				CalculateTaxLineItem

					LocalCompany = PrmCompany
					LocalInvoice = PrmPayablesInvoice.Invoice
					

					if (!SingleCallToOneSource)
						if (ProcessAOC)
						    LocalUniqueID = LocalPayablesAddOnChargeRel.UniqueID
							for each LocalInvoiceAocTaxLineItemRel
								invoke Delete each.LineItemUserFieldsRel
								invoke Delete each
						else
							LocalUniqueID = UniqueID 
							for each TaxLineItemRel
								invoke Delete each.LineItemUserFieldsRel
								invoke Delete each
											
					invoke Create TaxLineItem
						assign result to TaxLineItemView
					
						invoked.FinanceEnterpriseGroup				= PrmCompany.FinanceEnterpriseGroup 
						invoked.InvoiceNumber						= PrmPayablesInvoice.Invoice
						invoked.InvoiceDate							= PrmPayablesInvoice.InvoiceDate
						invoked.TaxEntity							= PrmCompany.AccountingEntity
					
						if (ProcessAOC)
							
							if (SingleCallToOneSource)
								LocalLineItemNumber					+= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = PrmPayablesInvoice.UniqueID
							else
								LocalLineItemNumber					= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = LocalPayablesAddOnChargeRel.UniqueID
							invoked.LineItemId						= LocalAddOnCharge	
							invoked.RelatedObjectReference 			= reference to LocalPayablesAddOnChargeRel.PayablesInvoiceAddOnCharge
							invoked.RelatedLineItemUniqueId			= LocalPayablesAddOnChargeRel.UniqueID	

							invoked.LineItemNumber					= LocalLineItemNumber	

							invoked.InvoiceAmount					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
							invoked.TaxableAmount					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
							invoked.ShipToTaxCode					= LocalPayablesAddOnChargeRel.TaxCode									
							invoked.ShipToTaxCodeDescription		= LocalPayablesAddOnChargeRel.TaxCode.Description									
							invoked.ProductTaxCategory 				= LocalPayablesAddOnChargeRel.ProductTaxCategory
							invoked.Description 					= LocalPayablesAddOnChargeRel.AddOnCharge.Description 

							if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode)
								invoked.CommodityCode				= LocalPayablesAddOnChargeRel.AddOnCharge.DerivedCommodityCodeNoDash
							else 
							if (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
								invoked.CommodityCode				= LocalPayablesAddOnChargeRel.PurchaseOrderLine.DerivedCommodityCodeNoDash
							else
							if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCodeFromLargestPOLine)
								invoked.CommodityCode				= MiscAOCPurchaseOrderLine.DerivedCommodityCodeNoDash

							if (LocalPayablesAddOnChargeRel.PurchaseOrder.DropshipAddress entered)
								invoked.ShipToAddress		= LocalPayablesAddOnChargeRel.PurchaseOrder.DropshipAddress
							else
							if (LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder entered)
								invoked.ShipToAddress		= LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder
							else
								invoked.ShipToAddress		= LocalPayablesAddOnChargeRel.PurchaseOrder.ProcessLevel.PostalAddress
						else
							if (SingleCallToOneSource)
								LocalLineItemNumber					+= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = PrmPayablesInvoice.UniqueID
							else
								LocalLineItemNumber					= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = UniqueID
							invoked.LineItemId						= Item	
							invoked.RelatedObjectReference 			= reference to PayablesInvoiceDetail
							invoked.RelatedLineItemUniqueId			= UniqueID											
							if (SingleCallToOneSource)
								invoked.LineItemNumber				= LocalLineItemNumber	
							else
								invoked.LineItemNumber				= PurchaseOrderLine	

							invoked.InvoiceAmount					= TotalDistributionAmount
							invoked.TaxableAmount					= TotalDistributionAmount
							invoked.ShipToTaxCode					= TaxCode									
							invoked.ShipToTaxCodeDescription		= TaxCode.Description									
							invoked.CommodityCode					= DerivedCommodityCodeNoDash											
							invoked.ProductTaxCategory 				= ProductTaxCategory
							invoked.Description 					= ItemDescription 

							if (PurchaseOrder.DropshipAddress entered)
								invoked.ShipToAddress		= PurchaseOrder.DropshipAddress
							else
							if (Location.PostalAddressForPurchaseOrder entered)
								invoked.ShipToAddress		= Location.PostalAddressForPurchaseOrder
							else
								invoked.ShipToAddress		= PurchaseOrder.ProcessLevel.PostalAddress
	
					initialize I9

					if (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
					    LocalAOCPurchaseOrderLine 					= LocalPayablesAddOnChargeRel.PurchaseOrderLine
					else
						LocalAOCPurchaseOrderLine 					= PrmPayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLine set.PurchaseOrderLine

					if (LocalTaxAttributesRel.OneSourceTaxAttributeRel exists)

						invoke Create TaxLineItemUserFields

							for each LocalTaxAttributesRel.OneSourceTaxAttributeRel
		
								if (ProcessAOC)
									if  (LocalPayablesAddOnChargeRel.MiscellaneousAccount entered)
									    LocalDistributionAccount    = LocalPayablesAddOnChargeRel.MiscellaneousAccount
									else
									    LocalDistributionAccount    = LocalPayablesAddOnChargeRel.first AllDistributionsRel.DistributionAccount
								else
									if  (!ItemType.Inventoried)
									    LocalDistributionAccount    = first AllDistributionsRel.DistributionAccount
									else
									if  (PrmPayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
										LocalDistributionAccount	= PrmPayablesInvoice.ProcessLevel.ReceiptAccrualAccount
									else
										LocalDistributionAccount	= PrmPayablesInvoice.MatchCompanyRel.ReceiptAccrualAccount
								
								if ((each.LoadDynamicField.System	= "AP"
								or   each.LoadDynamicField.System not entered)
								and I9 < 50)



									invoked.FinanceEnterpriseGroup							= PrmCompany.FinanceEnterpriseGroup 

									if (SingleCallToOneSource)
										invoked.TaxLineItem.UniqueIdOfRelatedObject = PrmPayablesInvoice.UniqueID
									else
									if (ProcessAOC)
										invoked.TaxLineItem.UniqueIdOfRelatedObject = LocalPayablesAddOnChargeRel.UniqueID
									else
										invoked.TaxLineItem.UniqueIdOfRelatedObject = UniqueID

									invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
									if (each.LoadDynamicField.ValueIs.TaxEntity)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 	= I9
										invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value		= PrmCompany.AccountingEntity

									else
									if (each.LoadDynamicField.ValueIs.Company)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 	= I9
										invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value		= PrmCompany

									else
									if (each.LoadDynamicField.ValueIs.Vendor)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 	= I9
										invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value		= PrmPayablesInvoice.Vendor

									else
									if (each.LoadDynamicField.ValueIs.PostingDate)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 	= I9
										invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value		= PrmPayablesInvoice.DistributionDate

									else
									if (each.LoadDynamicField.ValueIs.TaxDate)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 	= I9
										invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value		= PrmPayablesInvoice.DerivedTaxPointDate

									else
									if (each.LoadDynamicField.ValueIs.GLAccount)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 	= I9
										invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.GeneralLedgerChartAccount

									else
									if (each.LoadDynamicField.ValueIs.Location)
										if  (ProcessAOC
										and  LocalPayablesAddOnChargeRel.Location entered)																
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number = I9
											invoked.UserElementGroup.UserElement[I9].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value	= LocalPayablesAddOnChargeRel.Location
										else
										if  (!ProcessAOC
										and  Location entered)																
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number = I9
											invoked.UserElementGroup.UserElement[I9].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value	= Location
										else
										if (PrmPayablesInvoice.Location entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number = I9
											invoked.UserElementGroup.UserElement[I9].Name	= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value	= PrmPayablesInvoice.Location

									else
									if (each.LoadDynamicField.ValueIs.Currency)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 	= I9
										invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value		= PrmPayablesInvoice.InvoiceCurrency

									else
									if (each.LoadDynamicField.ValueIs.DiscountAmount)
										if (PrmPayablesInvoice.DiscountAmount.CurrencyAmount entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= PrmPayablesInvoice.DiscountAmount.CurrencyAmount

									else
									if (each.LoadDynamicField.ValueIs.UnitCost)
										if  (!ProcessAOC
										and EnteredUnitCost entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= EnteredUnitCost

										else
										if  (ProcessAOC
										and LocalPayablesAddOnChargeRel.EnteredUnitCost entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalPayablesAddOnChargeRel.EnteredUnitCost

									else
									if (each.LoadDynamicField.ValueIs.ContractType)
										if (LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
									else
									if (each.LoadDynamicField.ValueIs.WorkType)
										if (LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
									else
									if (each.LoadDynamicField.ValueIs.AccountSubType)
										if (LocalDistributionAccount.GeneralLedgerChartAccount.AccountSubType entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.GeneralLedgerChartAccount.AccountSubType
									else
									if (each.LoadDynamicField.ValueIs.ServiceType)
										if (LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
									else
									if (each.LoadDynamicField.ValueIs.UsageType)
										if (LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
									else
									if (each.LoadDynamicField.ValueIs.CustomerType)
										if (LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
									else
									if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
										if (LocalDistributionAccount.ToAccountingEntity entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.ToAccountingEntity
									else
									if (each.LoadDynamicField.ValueIs.Project)
										if (LocalDistributionAccount.Project entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.Project
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension1)
										if (LocalDistributionAccount.FinanceDimension1 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension1
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension2)
										if (LocalDistributionAccount.FinanceDimension2 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension2
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension3)
										if (LocalDistributionAccount.FinanceDimension3 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension3
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension4)
										if (LocalDistributionAccount.FinanceDimension4 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension4
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension5)
										if (LocalDistributionAccount.FinanceDimension5 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension5
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension6)
										if (LocalDistributionAccount.FinanceDimension6 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension6
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension7)
										if (LocalDistributionAccount.FinanceDimension7 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension7
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension8)
										if (LocalDistributionAccount.FinanceDimension8 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension8
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension9)
										if (LocalDistributionAccount.FinanceDimension9 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension9
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension10)
										if (LocalDistributionAccount.FinanceDimension10 entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalDistributionAccount.FinanceDimension10
									else
									if (each.LoadDynamicField.ValueIs.CommodityCode)
										if (!ProcessAOC
										and CommodityCode entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= CommodityCode

									else
									if (each.LoadDynamicField.ValueIs.UNSPSC)
										if (!ProcessAOC)
											if (ContractLine entered
											and PurchaseOrderLine not entered)
												if (ContractLine.UNSPSCCode entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= ContractLine.UNSPSCCode.UNSPSCCodeDisplay

											else 
												if (PurchaseOrderLine.UNSPSCCode entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay

										else  
										if  (ProcessAOC 
										and  LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseUNSPSCCode
										and  LocalPayablesAddOnChargeRel.AddOnCharge.UNSPSCCode entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalPayablesAddOnChargeRel.AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay
									else
									if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)		//	"Category" is spelled wrong in 'UserFieldDynamicValue' state field
										if (!ProcessAOC
										and ProductTaxCategory entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= ProductTaxCategory

										else
										if (ProcessAOC
										and LocalPayablesAddOnChargeRel.ProductTaxCategory entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalPayablesAddOnChargeRel.ProductTaxCategory

									else
									if (each.LoadDynamicField.ValueIs.TaxUsageCode)
										if (!ProcessAOC
										and TaxUsageCode entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= TaxUsageCode
										else
										if (ProcessAOC
										and LocalPayablesAddOnChargeRel.TaxUsageCode entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalPayablesAddOnChargeRel.TaxUsageCode

									else		
									if (each.LoadDynamicField.ValueIs.EAMManufacturingIndicator)
										if  (ProcessAOC)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1] = blank)
												invoked.UserElementGroup.UserElement[I9].Value 	= "N"
										else
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 		= I9
											invoked.UserElementGroup.UserElement[I9].Name			= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value			= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
											if (EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1] = blank)
												invoked.UserElementGroup.UserElement[I9].Value 		= "N"
									else
									if (each.LoadDynamicField.ValueIs.EAMProjectID)

										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.ProjectID != blank)
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.ProjectID
										else
											if (EAMWorkOrder.ProjectID != blank)
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= EAMWorkOrder.ProjectID
									else
									if (each.LoadDynamicField.ValueIs.EAMProjectType)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23] != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]	
										else
											if (EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23] != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]	
									else
									if (each.LoadDynamicField.ValueIs.EAMTypeCode)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.TypeCode != blank)		
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value	= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.TypeCode		
										else
											if (EAMWorkOrder.TypeCode != blank)		
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= EAMWorkOrder.TypeCode		
									else
									if (each.LoadDynamicField.ValueIs.EAMPositionFacility)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.PositionFacility != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value	= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.PositionFacility	
										else
											if (EAMWorkOrder.PositionFacility != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= EAMWorkOrder.PositionFacility	
									else
									if (each.LoadDynamicField.ValueIs.EAMUserField30)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30] != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value	= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]	
										else
											if (EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30] != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]	
									else
									if (each.LoadDynamicField.ValueIs.EAMUserField24)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24] != blank)		
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]		
										else
											if  (EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24] != blank)		
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]		
									else
									if (each.LoadDynamicField.ValueIs.EAMWorkOrderShipTo)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]	
										else
											if (EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32] != blank)	
												increment I9
												invoked.UserElementGroup.UserElement[I9].Number 	= I9
												invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
												invoked.UserElementGroup.UserElement[I9].Value		= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]	
									else
									if (each.LoadDynamicField.ValueIs.EAMWorkOrderCountry)
										if  (ProcessAOC)
											LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
										else
											LocalInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  

										if  (LocalInventoryLocationRel exists
										and  LocalInventoryLocationRel.PostalAddress.Country entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddress.Country
									else
									if (each.LoadDynamicField.ValueIs.EAMWorkOrderState)
										if  (ProcessAOC)
											LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
										else
											LocalInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  

										if  (LocalInventoryLocationRel exists
										and  LocalInventoryLocationRel.PostalAddress.StateProvince entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddress.StateProvince
									else
									if (each.LoadDynamicField.ValueIs.Longitude)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder entered)
												LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
											else
											if (LocalPayablesAddOnChargeRel.Location entered)
												LocalInventoryLocation = LocalPayablesAddOnChargeRel.Location
											else
												LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.ShipToLocation
										else
											if (EAMWorkOrder entered)
												LocalInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
											else
												LocalInventoryLocation = Location

										if  (LocalInventoryLocationRel exists)
											if  (LocalInventoryLocationRel.PostalAddressForPurchaseOrder entered)
												if  (LocalInventoryLocationRel.PostalAddressForPurchaseOrder.GeoLongitude entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddressForPurchaseOrder.GeoLongitude
											else 
											if  (LocalInventoryLocationRel.PostalAddress entered)
												if  (LocalInventoryLocationRel.PostalAddress.GeoLongitude entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddress.GeoLongitude
									else
									if (each.LoadDynamicField.ValueIs.Latitude)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder entered)
												LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
											else
											if (LocalPayablesAddOnChargeRel.Location entered)
												LocalInventoryLocation = LocalPayablesAddOnChargeRel.Location
											else
												LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.ShipToLocation
										else
											if (EAMWorkOrder entered)
												LocalInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
											else
												LocalInventoryLocation = Location

										if  (LocalInventoryLocationRel exists)
											if  (LocalInventoryLocationRel.PostalAddressForPurchaseOrder entered)
												if  (LocalInventoryLocationRel.PostalAddressForPurchaseOrder.GeoLatitude entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddressForPurchaseOrder.GeoLatitude
											else 
											if  (LocalInventoryLocationRel.PostalAddress entered)
												if  (LocalInventoryLocationRel.PostalAddress.GeoLatitude entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddress.GeoLatitude
									else
									if (each.LoadDynamicField.ValueIs.Altitude)
										if  (ProcessAOC)
											if (LocalAOCPurchaseOrderLineRel.EAMWorkOrder entered)
												LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
											else
											if (LocalPayablesAddOnChargeRel.Location entered)
												LocalInventoryLocation = LocalPayablesAddOnChargeRel.Location
											else
												LocalInventoryLocation = LocalAOCPurchaseOrderLineRel.ShipToLocation
										else
											if (EAMWorkOrder entered)
												LocalInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]  
											else
												LocalInventoryLocation = Location

										if  (LocalInventoryLocationRel exists)
											if (LocalInventoryLocationRel.PostalAddressForPurchaseOrder entered)
												if (LocalInventoryLocationRel.PostalAddressForPurchaseOrder.GeoAltitude entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddressForPurchaseOrder.GeoAltitude
											else 
											if  (LocalInventoryLocationRel.PostalAddress entered)
												if  (LocalInventoryLocationRel.PostalAddress.GeoAltitude entered)
													increment I9
													invoked.UserElementGroup.UserElement[I9].Number 	= I9
													invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
													invoked.UserElementGroup.UserElement[I9].Value		= LocalInventoryLocationRel.PostalAddress.GeoAltitude
									else
									if (each.LoadDynamicField.ValueIs.AddOnCharge)
										if  (ProcessAOC
										and  LocalAddOnCharge entered)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[I9].Value		= LocalAddOnCharge
									else
									if (each.LoadDynamicField.ValueIs.AddOnChargeOnly)
										if  (ProcessAOC)
											increment I9
											invoked.UserElementGroup.UserElement[I9].Number 	= I9
											invoked.UserElementGroup.UserElement[I9].Name		= each.UserAttributeName
											if (PrmPayablesInvoice.MatchProcessType.AOCOnly)
												invoked.UserElementGroup.UserElement[I9].Value	= "Y"
											else
												invoked.UserElementGroup.UserElement[I9].Value	= "N"

									else

									if (each.Value entered)
										increment I9
										invoked.UserElementGroup.UserElement[I9].Number 		= I9
										invoked.UserElementGroup.UserElement[I9].Name			= each.UserAttributeName
										invoked.UserElementGroup.UserElement[I9].Value			= each.Value

				StartOfSetRules
					if (MatchOneCallPerInvoice
					and PrmPayablesInvoice.last PayablesInvoiceDistribution set.PayablesInvoiceDistribution < 200)
					    SingleCallToOneSource = true
					    initialize LocalLineItemNumber
					else
					    SingleCallToOneSource = false

					LocalCompany = PrmCompany
					LocalInvoice = PrmPayablesInvoice.Invoice

					initialize SetTaxError
					initialize OneSourceAutoMatchError


					invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
						invoked.TaxCode					= PrmPayablesInvoice.TaxCode
						invoked.EnteredInvoiceAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						invoked.EnteredTaxAmount		= PrmPayablesInvoice.TaxAmount	
						invoked.EnteredTaxableAmount	= PrmPayablesInvoice.TaxableAmount
						initialize invoked.TaxSystemTaxAmount
						if (PrmPayablesInvoice.TaxAmount entered
						and PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
							invoked.TaxMethod			= "I"
						else
							if (PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
								invoked.TaxMethod		= "A"

					invoke FastUpdate PrmPayablesInvoice
					    initialize invoked.POTaxAmount
					    								
					if (PrmFromRecon)
					
						OneSourceMatchWork = PrmReconMatchWork.MatchWork
						
						invoke FastUpdate PrmPayablesInvoice
							invoked.BackgroundProcessing = 3 

					else
						if  (PrmPayablesInvoice.MatchReconQueueRel exists 
						and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
							invoke Purge PrmPayablesInvoice.MatchWorkRel


						invoke CreateOnly MatchWork
							resume on error							
							assign result to OneSourceMatchWork
							invoked.Company						= PrmCompany
							invoked.PayablesInvoice				= PrmPayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"
							invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
							invoked.BypassValidateMatchInvoiceBalance = true						
							if (SetTaxError)
								invoked.VerifyMatchMessage      = OneSourceAutoMatchError

						if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
							invoke CreateForBudgetProcessing MatchReconQueue
								invoked.Company				= PrmCompany
								invoked.PayablesInvoice		= PrmPayablesInvoice
								invoked.MatchWork			= OneSourceMatchWork.MatchWork
						else
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.MatchWork			= OneSourceMatchWork.MatchWork



					if (!PrmPayablesInvoice.CreditForRebill)
						for each PrmPayablesInvoice.PayablesInvoiceDistributionRel
							if (each.IsTaxDistribution
							and each.Status.Unreleased)			
								invoke Delete each

					if (SingleCallToOneSource)
				        LocalUniqueID = PrmPayablesInvoice.UniqueID
						for each OneCallAllLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

				MiscAocRules

					if (PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel exists)


						initialize MiscAOCExtendedAmount
						for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
							for each each.PurchaseOrder.PurchaseOrderLineRel
								if (each.ExtendedAmount >= MiscAOCExtendedAmount)
									MiscAOCExtendedAmount				= each.ExtendedAmount
									MiscAOCPurchaseOrderLine			= each.PurchaseOrderLine


						ProcessAOC = true
						for each PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine


							if  (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)

								if (PrmPayablesInvoice.TaxAmount entered)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.AccruedTaxAmount
									if (!SingleCallToOneSource)	
										invoke FastUpdate PrmPayablesInvoice
											invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.TaxAmount
										
								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount

							else
							if (SingleCallToOneSource)	
							    include CalculateTaxLineItem
							else
							    include SetCalculateTax
								LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax  

								if  (CalculateTax.OutputErrorNumber entered)
									SetTaxError	= true
									OneSourceAutoMatchError	= CalculateTax.OutputErrorText
									invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
										invoked.ErrorLevel		= 1		
										invoked.ErrorClass		= 1		
										invoked.ErrorType		= 57	//"SabrixTaxServerError"
								else
									if (PrmPayablesInvoice.TaxAmount entered)

										invoke FastUpdate LocalPayablesAddOnChargeRel
											invoked.TaxAmount	= CalculateTax.OutputTotalTaxAmount
											if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
												invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
											initialize invoked.AccruedTaxAmount
											
											if (CalculateTax.OutputTotalTaxAmount not entered)
											    invoked.InvoiceLineTaxable	= false
											else
											    invoked.InvoiceLineTaxable	= true
										invoke FastUpdate PrmPayablesInvoice
											invoked.POTaxAmount += CalculateTax.OutputTotalTaxAmount
									else

										invoke FastUpdate LocalPayablesAddOnChargeRel
											invoked.AccruedTaxAmount	= CalculateTax.OutputTotalTaxAmount
											if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
												invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
											initialize invoked.TaxAmount

											if (CalculateTax.OutputTotalTaxAmount not entered)
											    invoked.InvoiceLineTaxable	= false
											else
											    invoked.InvoiceLineTaxable	= true


									invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
										invoked.TaxSystemTaxAmount		+= CalculateTax.OutputTotalTaxAmount	
	
									invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
										invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction
										invoked.InformationMessage				= CalculateTax.OneSourceInformationMessage	
										invoked.SentToTaxEngine					= not CalculateTax.NotSentToSabrix		
										invoked.ShipToLocation					= PrmPayablesInvoice.Location
										invoked.TaxAccrualCode					= CalculateTax.SabrixReturnedTaxCode
										invoked.CalculatedTaxAmount				= CalculateTax.OutputTotalTaxAmount

							if (SetTaxError)
								end for each

							if (!SingleCallToOneSource)	
								LocalCompany				= PrmCompany
								LocalAccrualCode			= LocalPayablesInvoiceAddOnChargeTaxRel.TaxAccrualCode
								if (LocalTaxAccrualCodeDetailRel not exists)
									SetTaxError	= true
									OneSourceAutoMatchError	= TaxAccrualOffsetCodeDoesNotExistMsg + LocalAccrualCode
									invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
										invoked.ErrorLevel		= 1		
										invoked.ErrorClass		= 1		
										invoked.ErrorType		= 57	//"SabrixTaxServerError"

								if (SetTaxError)
									end for each									    

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SingleCallToOneSource
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 


				
				
				EndOfSetRules		


	
					if (!SetTaxError)

						if  (OneSourceAutoMatchError not entered)

							invoke UpdateErrorRecordsAction PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message

						if  (OneSourceAutoMatchError not entered)
							if (PrmPayablesInvoice.InvoiceErrorsExists)
								OneSourceAutoMatchError = InvoiceOutOfBalanceMsg

					if (!SetTaxError
					and  OneSourceAutoMatchError not entered
					and !PrmFromRecon)

						if  (OneSourceAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message


	
						if  (!PrmFromRecon)
							if  (OneSourceAutoMatchError not entered)

								invoke BatchMatch OneSourceMatchWork.MatchWork
									resume on error							
						   				OneSourceAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= OneSourceMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult


					if  (SetTaxError entered
					or   OneSourceAutoMatchError entered)

						invoke Update OneSourceMatchWork.MatchWork
							invoked.VerifyMatchMessage = OneSourceAutoMatchError

						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= OneSourceAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update OneSourceMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
								initialize invoked.POTaxAmount
					else
					if  (PrmFromRecon)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch PrmReconMatchWork.MatchWork

			Action Rules
					
				Empty Set Rules
					include StartOfSetRules
					include MiscAocRules
					include EndOfSetRules

				Set Rules
					Entrance Rules
						include StartOfSetRules
					Exit Rules
						include MiscAocRules
						ProcessAOC = false
						if (SingleCallToOneSource)
							include SetCalculateTax
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax  
							if  (CalculateTax.OutputErrorNumber entered)
								SetTaxError	= true
								OneSourceAutoMatchError	= CalculateTax.OutputErrorText
								invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"
								include EndOfSetRules
							else
								PrmReconMatchWork = OneSourceMatchWork.MatchWork

							    invoke ProcessOneSourceForMatchPart2 PayablesInvoiceDetail
									invoked.PrmCompany			= PrmCompany
									invoked.PrmPayablesInvoice	= PrmPayablesInvoice
									invoked.PrmAutoMatchResult  = PrmAutoMatchResult
									invoked.PrmFromRecon		= PrmFromRecon
									invoked.PrmReconMatchWork   = PrmReconMatchWork
									invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
									invoked.OneSourceTaxMessage	= CalculateTax.OneSourceInformationMessage 
									invoked.SabrixReturnedTaxCode = CalculateTax.SabrixReturnedTaxCode
						else
							include EndOfSetRules

				Instance Rules

					ProcessAOC = false
				    if  (TotalDistributionAmount > 0
				    and  !SetTaxError)
				    	initialize TaxAmount
				    	initialize AccruedTaxAmount

						if (PayablesInvoiceDetailTaxRel.OverrideTaxAmount entered)

							if (PayablesInvoice.TaxAmount entered)
								TaxAmount	= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize AccruedTaxAmount
								if (!SingleCallToOneSource)	
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
								AccruedTaxAmount = PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize TaxAmount

							if (PurchaseOrderLine entered)
								TaxCode  						= PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
							else 
							if (ContractLine entered)
								if (ContractLine.TaxCode entered)
									TaxCode 					= ContractLine.TaxCode
								else 
									TaxCode     				= PayablesInvoice.Location.PurchaseOrderTaxCode
							
							invoke Update PayablesInvoice.PayablesInvoiceTaxRel
								invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
						else
						if (SingleCallToOneSource)	
							include CalculateTaxLineItem
						else
							include SetCalculateTax
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax  
	

							if  (CalculateTax.OutputErrorNumber entered)
								SetTaxError	= true
								OneSourceAutoMatchError	= CalculateTax.OutputErrorText
								invoke Create PayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"
							else
								if (PurchaseOrderLine entered)
									TaxCode  						= PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
								else 
								if (ContractLine entered)
									if (ContractLine.TaxCode entered)
										TaxCode 					= ContractLine.TaxCode
									else 
										TaxCode     				= PayablesInvoice.Location.PurchaseOrderTaxCode

								if (PayablesInvoice.TaxAmount entered)
									TaxAmount	= CalculateTax.OutputTotalTaxAmount
									initialize AccruedTaxAmount
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += CalculateTax.OutputTotalTaxAmount
								else
									AccruedTaxAmount = CalculateTax.OutputTotalTaxAmount
									initialize TaxAmount

								if (CalculateTax.OutputTotalTaxAmount not entered)
								    InvoiceLineTaxable				= false
								else
								    InvoiceLineTaxable				= true
	
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= CalculateTax.OutputTotalTaxAmount
									
								invoke Update PayablesInvoiceDetailTaxRel
									invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction
									invoked.InformationMessage				= CalculateTax.OneSourceInformationMessage	
									invoked.SentToTaxEngine					= not CalculateTax.NotSentToSabrix		
									invoked.ShipToLocation					= PrmPayablesInvoice.Location
									invoked.TaxAccrualCode					= CalculateTax.SabrixReturnedTaxCode
									invoked.CalculatedTaxAmount 			= CalculateTax.OutputTotalTaxAmount 

						LocalAccrualCode			= PayablesInvoiceDetailTaxRel.TaxAccrualCode

						if (!SingleCallToOneSource)	
							if (TaxAccrualCodeDetailRel not exists)
								SetTaxError	= true
								OneSourceAutoMatchError	= TaxAccrualOffsetCodeDoesNotExistMsg + LocalAccrualCode
								invoke Create PayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"

					if  (PayablesInvoice.MatchProcessType.ServiceContract 
					and !SingleCallToOneSource
					and (TaxAmount entered
					or   AccruedTaxAmount entered))
						BypassBudgetEdit  = true
						ProcessingTax = true
						CalculateTaxHasBeenCalled = true 
						initialize CalculateTax 
						LocalTaxCode 												= TaxCode 
						CalculateTax.TaxCode 											= TaxCode
						CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= TaxCode
						CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint			= LocalEntityTaxCodeRel.TaxPoint
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	= LocalEntityTaxCodeRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag			= LocalEntityTaxCodeRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag		= LocalEntityTaxCodeRel.LandedCost
						include CopyContractLineDistributionsRuleBlock
						ProcessingTax = false								

					if (!SetTaxError)

						ProcessAOC = true
						for each PayablesInvoiceAddOnChargeRel

							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine
							if (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)
								if (PayablesInvoice.TaxAmount entered)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
										else
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.AccruedTaxAmount
										
									if (!SingleCallToOneSource)	
										invoke FastUpdate PayablesInvoice
											invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
										else
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.TaxAmount
										
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
							if (SingleCallToOneSource)	
								include CalculateTaxLineItem
							else							
							    include SetCalculateTax
								LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax  

								if  (CalculateTax.OutputErrorNumber entered)
									SetTaxError	= true
									OneSourceAutoMatchError	= CalculateTax.OutputErrorText
									invoke Create PayablesInvoice.PayablesInvoiceError set			
										invoked.ErrorLevel		= 1		
										invoked.ErrorClass		= 1		
										invoked.ErrorType		= 57	//"SabrixTaxServerError"

								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										if (invoked.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
										else
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										if (PayablesInvoice.TaxAmount entered)
											invoked.TaxAmount	= CalculateTax.OutputTotalTaxAmount
											initialize invoked.AccruedTaxAmount
										else
											invoked.AccruedTaxAmount	= CalculateTax.OutputTotalTaxAmount
											initialize invoked.TaxAmount
										if (CalculateTax.OutputTotalTaxAmount not entered)
										    invoked.InvoiceLineTaxable	= false
										else
										    invoked.InvoiceLineTaxable	= true
		
									if (PayablesInvoice.TaxAmount entered)
										invoke FastUpdate PayablesInvoice
											invoked.POTaxAmount += CalculateTax.OutputTotalTaxAmount
		
									invoke Update PayablesInvoice.PayablesInvoiceTaxRel
										invoked.TaxSystemTaxAmount		+= CalculateTax.OutputTotalTaxAmount	
		
									invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
										invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction
										invoked.InformationMessage				= CalculateTax.OneSourceInformationMessage	
										invoked.SentToTaxEngine					= not CalculateTax.NotSentToSabrix		
										invoked.ShipToLocation					= PrmPayablesInvoice.Location
										invoked.TaxAccrualCode					= CalculateTax.SabrixReturnedTaxCode
										invoked.CalculatedTaxAmount				= CalculateTax.OutputTotalTaxAmount
	
							if (SetTaxError)
								end for each


							if (!SingleCallToOneSource)	
								LocalAccrualCode			= LocalPayablesInvoiceAddOnChargeTaxRel.TaxAccrualCode
								if (TaxAccrualCodeDetailRel not exists)
									SetTaxError	= true
									OneSourceAutoMatchError	= TaxAccrualOffsetCodeDoesNotExistMsg + LocalAccrualCode
									invoke Create PayablesInvoice.PayablesInvoiceError set			
										invoked.ErrorLevel		= 1		
										invoked.ErrorClass		= 1		
										invoked.ErrorType		= 57	//"SabrixTaxServerError"

							if (SetTaxError)
								end for each

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SingleCallToOneSource
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 

		ProcessOneSourceForMatchPart2 is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
				OneSourceTaxMessage is Text
				SabrixReturnedTaxCode is like TaxCode

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmFinanceEnterpriseGroup 
					default to PrmCompany.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Local Fields
				SingleCallToOneSource           is Boolean
				ProcessAOC						is Boolean
				AutoMatchError					is Boolean
				AutoMatchErrorMessage			is Alpha 200
				LocalDistributionAccount    	is a FinanceCodeBlock

				OneSourceMatchWork				is a MatchWork view
				OneSourceAutoMatchError			is Alpha 200
				SetTaxError						is Boolean

			Rule Blocks
				StartOfSetRules		
					if (MatchOneCallPerInvoice
					and PrmPayablesInvoice.last PayablesInvoiceDistribution set.PayablesInvoiceDistribution < 200)
					    SingleCallToOneSource = true
					else
					    SingleCallToOneSource = false




					OneSourceMatchWork = PrmReconMatchWork.MatchWork
					if (PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel exists)


						ProcessAOC = true
						for each PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine
						    LocalUniqueID 					= PrmPayablesInvoice.UniqueID
							LocalInvoice					= PrmPayablesInvoice.Invoice



							if  (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)

								if (PrmPayablesInvoice.TaxAmount entered)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.AccruedTaxAmount
									invoke FastUpdate PrmPayablesInvoice
										invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.TaxAmount
										
								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount

							else
								if (PrmPayablesInvoice.TaxAmount entered)



									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.AccruedTaxAmount
										
										if (LocalAocTaxLineItemRel.CalculatedTaxAmt not entered)
										    invoked.InvoiceLineTaxable	= false
										else
										    invoked.InvoiceLineTaxable	= true
									invoke FastUpdate PrmPayablesInvoice
										invoked.POTaxAmount += LocalAocTaxLineItemRel.CalculatedTaxAmt
								else

									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.TaxAmount

										if (LocalAocTaxLineItemRel.CalculatedTaxAmt not entered)
										    invoked.InvoiceLineTaxable	= false
										else
										    invoked.InvoiceLineTaxable	= true


								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= LocalAocTaxLineItemRel.CalculatedTaxAmt	

								invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
									invoked.TaxingJurisdiction				= LocalAocTaxLineItemRel.TaxingJurisdiction
									invoked.InformationMessage				= OneSourceTaxMessage	
									invoked.SentToTaxEngine					= true		
									invoked.ShipToLocation					= PrmPayablesInvoice.Location
									invoked.TaxAccrualCode					= SabrixReturnedTaxCode
									invoked.CalculatedTaxAmount				= LocalAocTaxLineItemRel.CalculatedTaxAmt

							LocalCompany				= PrmCompany
							LocalAccrualCode			= LocalPayablesInvoiceAddOnChargeTaxRel.TaxAccrualCode
							if (LocalTaxAccrualCodeDetailRel not exists)
								SetTaxError	= true
								OneSourceAutoMatchError	= TaxAccrualOffsetCodeDoesNotExistMsg + LocalAccrualCode
								invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"

							if (SetTaxError)
								end for each									    

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 

				EndOfSetRules	
					if (!SetTaxError)

						if  (OneSourceAutoMatchError not entered)

							invoke UpdateErrorRecordsAction PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message

						if  (OneSourceAutoMatchError not entered)
							if (PrmPayablesInvoice.InvoiceErrorsExists)
								OneSourceAutoMatchError = InvoiceOutOfBalanceMsg

					if (!SetTaxError
					and  OneSourceAutoMatchError not entered
					and !PrmFromRecon)

						if  (OneSourceAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				OneSourceAutoMatchError = error message


	
						if  (!PrmFromRecon)
							if  (OneSourceAutoMatchError not entered)

								invoke BatchMatch OneSourceMatchWork.MatchWork
									resume on error							
						   				OneSourceAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= OneSourceMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult


					if  (SetTaxError entered
					or   OneSourceAutoMatchError entered)

						invoke Update OneSourceMatchWork.MatchWork
							invoked.VerifyMatchMessage = OneSourceAutoMatchError

						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= OneSourceAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update OneSourceMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
								initialize invoked.POTaxAmount
					else
					if  (PrmFromRecon)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch PrmReconMatchWork.MatchWork

			Action Rules
					
				Empty Set Rules
					include StartOfSetRules
					include EndOfSetRules

				Set Rules
					Entrance Rules
						include StartOfSetRules
					Exit Rules
						include EndOfSetRules

				Instance Rules


					ProcessAOC = false
					LocalInvoice = PrmPayablesInvoice.Invoice

				    if  (TotalDistributionAmount > 0)
				    	initialize TaxAmount
				    	initialize AccruedTaxAmount

						if (PayablesInvoiceDetailTaxRel.OverrideTaxAmount entered)

							if (PayablesInvoice.TaxAmount entered)
								TaxAmount	= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize AccruedTaxAmount
								invoke FastUpdate PayablesInvoice
									invoked.POTaxAmount += PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
								AccruedTaxAmount = PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize TaxAmount

							if (PurchaseOrderLine entered)
								TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
							else 
							if (ContractLine entered)
								if (ContractLine.TaxCode entered)
									TaxCode 	= ContractLine.TaxCode
								else 
									TaxCode     = PayablesInvoice.Location.PurchaseOrderTaxCode
							
							invoke Update PayablesInvoice.PayablesInvoiceTaxRel
								invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
						else
							if (PurchaseOrderLine entered)
								TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
							else 
							if (ContractLine entered)
								if (ContractLine.TaxCode entered)
									TaxCode 	= ContractLine.TaxCode
								else 
									TaxCode     = PayablesInvoice.Location.PurchaseOrderTaxCode

							if (PayablesInvoice.TaxAmount entered)
								TaxAmount	= OneCallTaxLineItemRel.CalculatedTaxAmt
								initialize AccruedTaxAmount
								invoke FastUpdate PayablesInvoice
									invoked.POTaxAmount += OneCallTaxLineItemRel.CalculatedTaxAmt

							else
								AccruedTaxAmount = OneCallTaxLineItemRel.CalculatedTaxAmt
								initialize TaxAmount


							if (OneCallTaxLineItemRel.CalculatedTaxAmt not entered)
							    InvoiceLineTaxable				= false
							else
							    InvoiceLineTaxable				= true

							invoke Update PayablesInvoice.PayablesInvoiceTaxRel
								invoked.TaxSystemTaxAmount		+= OneCallTaxLineItemRel.CalculatedTaxAmt
								
							invoke Update PayablesInvoiceDetailTaxRel
								invoked.TaxingJurisdiction				= OneCallTaxLineItemRel.TaxingJurisdiction
								invoked.InformationMessage				= OneSourceTaxMessage	
								invoked.SentToTaxEngine					= true		
								invoked.ShipToLocation					= PayablesInvoice.Location
								invoked.TaxAccrualCode					= SabrixReturnedTaxCode
								invoked.CalculatedTaxAmount				= OneCallTaxLineItemRel.CalculatedTaxAmt

						LocalAccrualCode			= PayablesInvoiceDetailTaxRel.TaxAccrualCode
						if (TaxAccrualCodeDetailRel not exists)
							SetTaxError	= true
							OneSourceAutoMatchError	= TaxAccrualOffsetCodeDoesNotExistMsg + LocalAccrualCode
							invoke Create PayablesInvoice.PayablesInvoiceError set			
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass		= 1		
								invoked.ErrorType		= 57	//"SabrixTaxServerError"

					if (!SetTaxError)

						if  (PayablesInvoice.MatchProcessType.ServiceContract 
						and (TaxAmount entered
						or   AccruedTaxAmount entered))
							BypassBudgetEdit  = true
							ProcessingTax = true
							CalculateTaxHasBeenCalled = true 
							initialize CalculateTax 
							LocalTaxCode 												= TaxCode 
							CalculateTax.TaxCode 										= TaxCode
							CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= TaxCode
							CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint			= LocalEntityTaxCodeRel.TaxPoint
							CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	= LocalEntityTaxCodeRel.TaxInputDueAccount
							CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
							CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag			= LocalEntityTaxCodeRel.AccruedOrInvoiced
							CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag		= LocalEntityTaxCodeRel.LandedCost
							include CopyContractLineDistributionsRuleBlock
							ProcessingTax = false								


						ProcessAOC = true
						for each PayablesInvoiceAddOnChargeRel

							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine
							LocalUniqueID 					= PrmPayablesInvoice.UniqueID
							LocalInvoice					= PrmPayablesInvoice.Invoice
						
							if (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)
								if (PayablesInvoice.TaxAmount entered)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
										else
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.AccruedTaxAmount
										
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
										else
										if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
											invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode
										initialize invoked.TaxAmount
										
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
								invoke FastUpdate LocalPayablesAddOnChargeRel
									if (invoked.PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
										invoked.TaxCode     = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
									else
									if (PrmPayablesInvoice.Location.PurchaseOrderTaxCode entered)
										invoked.TaxCode     = PrmPayablesInvoice.Location.PurchaseOrderTaxCode

									if (PayablesInvoice.TaxAmount entered)
										invoked.TaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										initialize invoked.AccruedTaxAmount
									else
										invoked.AccruedTaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										initialize invoked.TaxAmount
									if (LocalAocTaxLineItemRel.CalculatedTaxAmt not entered)
									    invoked.InvoiceLineTaxable	= false
									else
									    invoked.InvoiceLineTaxable	= true
	
								if (PayablesInvoice.TaxAmount entered)
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += LocalAocTaxLineItemRel.CalculatedTaxAmt
	
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= LocalAocTaxLineItemRel.CalculatedTaxAmt	
	
								invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
									invoked.TaxingJurisdiction				= LocalAocTaxLineItemRel.TaxingJurisdiction
									invoked.InformationMessage				= OneSourceTaxMessage	
									invoked.SentToTaxEngine					= true		
									invoked.ShipToLocation					= PayablesInvoice.Location
									invoked.TaxAccrualCode					= SabrixReturnedTaxCode
									invoked.CalculatedTaxAmount				= LocalAocTaxLineItemRel.CalculatedTaxAmt
	
							LocalAccrualCode			= LocalPayablesInvoiceAddOnChargeTaxRel.TaxAccrualCode
							if (TaxAccrualCodeDetailRel not exists)
								SetTaxError	= true
								OneSourceAutoMatchError	= TaxAccrualOffsetCodeDoesNotExistMsg + LocalAccrualCode
								invoke Create PayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"

							if (SetTaxError)
								end for each

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 



		ProcessVertexForMatch is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmFinanceEnterpriseGroup 
					default to PrmCompany.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Local Fields
				SingleCallToVertex              is Boolean
				ProcessAOC						is Boolean
				AutoMatchError					is Boolean
				AutoMatchErrorMessage			is Alpha 200
				LocalDistributionAccount    	is a FinanceCodeBlock
				LocalLineItemNumber    			is like DistributionSequence

				MiscAOCPurchaseOrderLine		is a PurchaseOrderLine view
				MiscAOCExtendedAmount			is an InternationalAmount

				VertexMatchWork					is a MatchWork view
				VertexAutoMatchError			is Alpha 200
				SetTaxError						is Boolean

			Rule Blocks
				
				SetCalculateTax	

				

					initialize CalculateTax
					CalculateTax.TaxEntity 								= PrmCompany.AccountingEntity
					CalculateTax.Function			 					= CalculateTax.Function.CalculateTax
					CalculateTax.CallingModule							= "Payables_Invoice"
					CalculateTax.InFinanceEnterpriseGroup				= PrmCompany.FinanceEnterpriseGroup
					CalculateTax.InputReturnVertexTaxIn					= "D"

					if (SingleCallToVertex)
						CalculateTax.TaxCode							= "00" 
					else
					if (ProcessAOC)
						CalculateTax.TaxCode 							= LocalPayablesAddOnChargeRel.TaxCode
					else
					if (TaxCode entered)
						CalculateTax.TaxCode 							= TaxCode
					else
						CalculateTax.TaxCode     						= "00"
					CalculateTax.Invoice								= PrmPayablesInvoice.Invoice
					CalculateTax.Suffix									= PrmPayablesInvoice.Suffix

					CalculateTax.VoucherNumber				= PrmPayablesInvoice.VoucherNumber
					CalculateTax.ShipmentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxPointDate				= PrmPayablesInvoice.DerivedTaxPointDate	
				   	CalculateTax.TransactionSource			= "I"	
					if (PrmPayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress			= PrmPayablesInvoice.BillFromLocation.VendorAddress	 	
					else
						CalculateTax.POAAddress			= PrmPayablesInvoice.Vendor.VendorAddress

					if (PrmPayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipToLocation entered)
						if (PrmPayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder entered)
							CalculateTax.BuyerAdminDestAddress			= PrmPayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
						else 	
							CalculateTax.BuyerAdminDestAddress			= PrmPayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder.ShipToLocation.PostalAddress	

					CalculateTax.CallingModule							= "Payables_Invoice"
					CalculateTax.System									= "AP"
					CalculateTax.TransactionCurrency					= PrmPayablesInvoice.InvoiceCurrency
					CalculateTax.BaseCurrency							= PrmCompany.Currency
					if  (PrmPayablesInvoice.VendorLocationRel exists)
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
					else
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress
				
					CalculateTax.InvoiceDate							= PrmPayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate 							= PrmPayablesInvoice.InvoiceDate
					CalculateTax.GeneralLedgerDate 						= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxDate								= PrmPayablesInvoice.InvoiceDate
		
				    CalculateTax.VATRegistrationCountry    	 			= PrmPayablesInvoice.TaxEntityRel.VATRegistrationCountry 			
				    CalculateTax.VATRegistrationNumber					= PrmPayablesInvoice.TaxEntityRel.VATRegistrationNumber			
					if (PrmPayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.PurchaseFromLocation.VendorAddress 
				    	CalculateTax.FromVATRegistrationCountry 		= PrmPayablesInvoice.PurchaseFromLocation.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber			= PrmPayablesInvoice.PurchaseFromLocation.VATRegistrationNumber				
						CalculateTax.FromTaxCode						= PrmPayablesInvoice.PurchaseFromLocation.TaxCode
					else
					if (PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.VendorAddress 
				    	CalculateTax.FromVATRegistrationCountry 		= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber			= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
						CalculateTax.FromTaxCode						= PrmPayablesInvoice.FirstPurchaseOrder.PurchaseFromLocation.TaxCode
					else
						CalculateTax.FromPostalAddress					= PrmPayablesInvoice.Vendor.VendorAddress		
				    	CalculateTax.FromVATRegistrationCountry 		= PrmPayablesInvoice.Vendor.VATRegistrationCountry					
				    	CalculateTax.FromVATRegistrationNumber			= PrmPayablesInvoice.Vendor.VATRegistrationNumber					
						CalculateTax.FromTaxCode						= PrmPayablesInvoice.Vendor.TaxCode
	
			   		CalculateTax.InvoiceCompany							= PrmCompany
			   		CalculateTax.ProcessLevel							= PrmPayablesInvoice.ProcessLevel 
					CalculateTax.VendorGrp								= PrmCompany.VendorGroup
					CalculateTax.Vendor									= PrmPayablesInvoice.Vendor 
					CalculateTax.VendorCustomerName						= PrmPayablesInvoice.FirstPurchaseOrder.Vendor.VendorName 	
					CalculateTax.DeliveryTerms          				= PrmPayablesInvoice.FirstPurchaseOrder.ShipTerm
					CalculateTax.PointOfTitleTransfer					= PrmPayablesInvoice.PayablesInvoiceTaxRel.PointOfTitleTransfer
	
					if (PrmPayablesInvoice.FirstPurchaseOrder.DropshipAddress entered)
						CalculateTax.PostalAddress						= PrmPayablesInvoice.FirstPurchaseOrder.DropshipAddress
					else
					if (PrmPayablesInvoice.Location entered)
						if (PrmPayablesInvoice.Location.PostalAddressForPurchaseOrder entered)
							CalculateTax.PostalAddress					= PrmPayablesInvoice.Location.PostalAddressForPurchaseOrder
						else 	
							CalculateTax.PostalAddress					= PrmPayablesInvoice.Location.PostalAddress	
					else
					if (PrmPayablesInvoice.FirstPurchaseOrder > 0
					and PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation entered)
						if (PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder entered)
							CalculateTax.PostalAddress					= PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
						else 	
							CalculateTax.PostalAddress					= PrmPayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddress	
					else
						CalculateTax.PostalAddress						= PrmPayablesInvoice.ProcessLevel.PostalAddress	
	
				    CalculateTax.DefaultFilingCurrency 					= PrmCompany.Currency 
					CalculateTax.CurrencyRate							= PrmPayablesInvoice.FirstPurchaseOrder.EnteredCurrencyConversionRate 		
				    CalculateTax.TransactionCurrency 					= PrmPayablesInvoice.InvoiceCurrency								
					CalculateTax.BaseCurrency 							= PrmCompany.Currency					
					CalculateTax.ReceiptSite							= PrmPayablesInvoice.ProcessLevel								

					if (PrmPayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress							= PrmPayablesInvoice.BillFromLocation.VendorAddress	 	
					else
						CalculateTax.POAAddress							= PrmPayablesInvoice.Vendor.VendorAddress

					if (SingleCallToVertex)	
						CalculateTax.TaxableAmount 					= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						CalculateTax.InvoiceAmount					= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						CalculateTax.Location						= PrmPayablesInvoice.Location
					else
					if (!ProcessAOC)
						CalculateTax.ProductTaxCategory				= ProductTaxCategory
						CalculateTax.TaxableAmount 					= TotalDistributionAmount
						CalculateTax.InvoiceAmount					= TotalDistributionAmount
						CalculateTax.Location						= Location
						CalculateTax.Quantity						= EnteredQuantity 
				   		CalculateTax.CommodityCode					= DerivedCommodityCodeNoDash				
				   		CalculateTax.EAMCommodityCode				= EAMCommodityCode				
						CalculateTax.TaxUsageCode					= TaxUsageCode					
						if (Location entered)
							if (Location.PostalAddressForPurchaseOrder entered)
								CalculateTax.PostalAddress			= Location.PostalAddressForPurchaseOrder
							else 	
								CalculateTax.PostalAddress			= Location.PostalAddress	
						CalculateTax.LineNumber						= PurchaseOrderLine		
						CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
	
						CalculateTax.Description					= ItemDescription                                    
						CalculateTax.ItemNumber						= Item
						CalculateTax.LineNumber						= PurchaseOrderLine
						CalculateTax.UniqueLineNumber				= UniqueID
					else
						CalculateTax.ProductTaxCategory				= LocalPayablesAddOnChargeRel.ProductTaxCategory
						CalculateTax.TaxableAmount 					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
						CalculateTax.InvoiceAmount					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
						CalculateTax.Location						= LocalPayablesAddOnChargeRel.Location
						CalculateTax.Quantity						= LocalPayablesAddOnChargeRel.EnteredQuantity 
						CalculateTax.TaxUsageCode					= LocalPayablesAddOnChargeRel.TaxUsageCode					
						if (LocalPayablesAddOnChargeRel.Location entered)
							if (LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder entered)
								CalculateTax.PostalAddress			= LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder
							else 	
								CalculateTax.PostalAddress			= LocalPayablesAddOnChargeRel.Location.PostalAddress	
						CalculateTax.LineNumber						= LocalPayablesAddOnChargeRel.PurchaseOrderLine		
						CalculateTax.UniqueIdOfRelatedObject		= LocalPayablesAddOnChargeRel.UniqueID													
	
						CalculateTax.Description					= LocalPayablesAddOnChargeRel.AddOnCharge.Description                                    
						CalculateTax.ItemNumber						= LocalPayablesAddOnChargeRel.AddOnCharge
						CalculateTax.LineNumber						= LocalPayablesAddOnChargeRel.PurchaseOrderLine
						CalculateTax.UniqueLineNumber				= LocalPayablesAddOnChargeRel.UniqueID

						if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode)
							CalculateTax.CommodityCode				= LocalPayablesAddOnChargeRel.AddOnCharge.DerivedCommodityCodeNoDash
						else 
						if (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
							CalculateTax.CommodityCode				= LocalPayablesAddOnChargeRel.PurchaseOrderLine.DerivedCommodityCodeNoDash
						else
						if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCodeFromLargestPOLine)
							CalculateTax.CommodityCode				= MiscAOCPurchaseOrderLine.DerivedCommodityCodeNoDash


					CalculateTax.CreateOutputUserFieldFile				= false
			
					CalculateTax.ReceiptSite							= PrmPayablesInvoice.ProcessLevel							
					CalculateTax.UserElementLevel						= blank
		
					CalculateTax.BypassEditing							= true  
		
					if (PrmPayablesInvoice.IsCreditInvoice)			
						CalculateTax.InvoicedOrCreditMemo	= "C"	
					else											
						CalculateTax.InvoicedOrCreditMemo	= "I"	

					if (SingleCallToVertex)	
						CalculateTax.SendMultLineItems					= true
						CalculateTax.UpdateLineItems					= true
						CalculateTax.UniqueIdOfRelatedObject			= PrmPayablesInvoice.UniqueID

						LocalJurisdictionLookupKey						= "MA:" + PrmPayablesInvoice.Invoice + ":" + CurrentTimestamp 
						CalculateTax.AppendToJurisFile					= true					
						CalculateTax.JurisdictionResultsKey				= LocalJurisdictionLookupKey
						CalculateTax.RelatedObjectReference				= reference to PrmPayablesInvoice.PayablesInvoice  				 
					else
					    include CalculateTaxLineItem

				CalculateTaxLineItem

					LocalCompany = PrmCompany
					LocalInvoice = PrmPayablesInvoice.Invoice
					

					if (!SingleCallToVertex)
						if (ProcessAOC)
						    LocalUniqueID = LocalPayablesAddOnChargeRel.UniqueID
							for each LocalInvoiceAocTaxLineItemRel
								invoke Delete each.LineItemUserFieldsRel
								invoke Delete each
						else
							LocalUniqueID = UniqueID 
							for each TaxLineItemRel
								invoke Delete each.LineItemUserFieldsRel
								invoke Delete each

					if (ProcessAOC)
						if (LocalPayablesAddOnChargeRel.Location entered)
							LocalInventoryLocation = LocalPayablesAddOnChargeRel.Location
						else
							LocalInventoryLocation = LocalPayablesAddOnChargeRel.PurchaseOrderLine.ShipToLocation


						if  (LocalPayablesAddOnChargeRel.LandedAddOnCharge)						
							if (LocalPayablesAddOnChargeRel.ItemType.Inventoried)
								LocalVertexDistributionAccount 		= LocalPayablesAddOnChargeRel.PurchaseOrderLine.ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
							else 
							if  (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
								LocalVertexDistributionAccount    		= LocalPayablesAddOnChargeRel.first PurchaseOrderLineDistributionRel.DistributionAccount
							else
							if  (LocalPayablesAddOnChargeRel.ContractLine entered)
								LocalVertexDistributionAccount    		= LocalPayablesAddOnChargeRel.first ContractLineDistributionsRel.DistributionAccount
						else 
						if (LocalPayablesAddOnChargeRel.POAndLineAOCRel exists)
							LocalVertexDistributionAccount				= LocalPayablesAddOnChargeRel.POAndLineAOCRel.Account
						else
						if  (LocalPayablesAddOnChargeRel.MiscellaneousAccount entered)
							LocalVertexDistributionAccount    			= LocalPayablesAddOnChargeRel.MiscellaneousAccount
						else
							LocalVertexDistributionAccount				= LocalPayablesAddOnChargeRel.AddOnCharge.PostingAccount
					else 
						if  (!ItemType.Inventoried)
							if  (PurchaseOrderLine entered)
								if (InvoiceDistributionsForPurchaseOrderLineRel exists)
									LocalVertexDistributionAccount    = first InvoiceDistributionsForPurchaseOrderLineRel.DistributionAccount
								else 
									LocalVertexDistributionAccount    = first PurchaseOrderLine.PurchaseOrderLineDistributionsRel.DistributionAccount
							else
							if  (ContractLine entered)
								if (InvoiceDistributionsForContractLineRel exists)
									LocalVertexDistributionAccount    = first InvoiceDistributionsForContractLineRel.DistributionAccount
								else 
									LocalVertexDistributionAccount    = first ContractLine.ContractLineDistributionRel.DistributionAccount
							else
								LocalVertexDistributionAccount    = first InvoiceDistributionsForMiscellaneousDetailRel.DistributionAccount
						else
							LocalVertexDistributionAccount 			= ItemLocationRel.GeneralLedgerCategory.InventoryAccount 

					invoke Create TaxLineItem
						assign result to TaxLineItemView
					
						invoked.FinanceEnterpriseGroup				= PrmCompany.FinanceEnterpriseGroup 
						invoked.InvoiceNumber						= PrmPayablesInvoice.Invoice
						invoked.InvoiceDate							= PrmPayablesInvoice.InvoiceDate
						invoked.TaxEntity							= PrmCompany.AccountingEntity
					
						if (ProcessAOC)
							
							if (SingleCallToVertex)
								LocalLineItemNumber					+= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = PrmPayablesInvoice.UniqueID
							else
								LocalLineItemNumber					= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = LocalPayablesAddOnChargeRel.UniqueID
							invoked.LineItemId						= LocalAddOnCharge	
							invoked.RelatedObjectReference 			= reference to LocalPayablesAddOnChargeRel.PayablesInvoiceAddOnCharge
							invoked.RelatedLineItemUniqueId			= LocalPayablesAddOnChargeRel.UniqueID	

							invoked.LineItemNumber					= LocalLineItemNumber	

							invoked.InvoiceAmount					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
							invoked.TaxableAmount					= LocalPayablesAddOnChargeRel.TotalDistributionAmount
							if (LocalPayablesAddOnChargeRel.TaxCode != "00")
								invoked.ShipToTaxCode				= LocalPayablesAddOnChargeRel.TaxCode									
								invoked.ShipToTaxCodeDescription	= LocalPayablesAddOnChargeRel.TaxCode.Description									

							if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode)
								invoked.CommodityCode				= LocalPayablesAddOnChargeRel.AddOnCharge.DerivedCommodityCodeNoDash
							else 
							if (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
								invoked.CommodityCode				= LocalPayablesAddOnChargeRel.PurchaseOrderLine.DerivedCommodityCodeNoDash
							else
							if (LocalPayablesAddOnChargeRel.AddOnCharge.OneSourceTaxCallOverride.UseCommodityCodeFromLargestPOLine)
								invoked.CommodityCode				= MiscAOCPurchaseOrderLine.DerivedCommodityCodeNoDash

							if (LocalPayablesAddOnChargeRel.PurchaseOrder.DropshipAddress entered)
								invoked.ShipToAddress			= LocalPayablesAddOnChargeRel.PurchaseOrder.DropshipAddress
							else
							if (LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder entered)
								invoked.ShipToAddress			= LocalPayablesAddOnChargeRel.Location.PostalAddressForPurchaseOrder
							else
							if (LocalPayablesAddOnChargeRel.PurchaseOrder.ShipToLocation entered)
								invoked.ShipToAddress 			= LocalPayablesAddOnChargeRel.PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
							else 
								invoked.ShipToAddress			= LocalPayablesAddOnChargeRel.PurchaseOrder.ProcessLevel.PostalAddress

							invoked.CostCenter                      = LocalVertexDistributionAccount.AccountingUnit     
							invoked.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 
							invoked.ProductTaxCategory 				= LocalPayablesAddOnChargeRel.ProductTaxCategory

							if  (LocalPayablesAddOnChargeRel.AddOnCharge.UNSPSCCode entered)
								invoked.CommodityCodeType      		= "UNSPSC"
								invoked.CommodityCode 				= LocalPayablesAddOnChargeRel.AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay 
							else 
							if  (LocalPayablesAddOnChargeRel.AddOnCharge.HSNSACCode entered)
								invoked.CommodityCodeType      		= "HSN"
								invoked.CommodityCode 				= LocalPayablesAddOnChargeRel.AddOnCharge.HSNSACCode 

							if (LocalPayablesAddOnChargeRel.EnteredQuantity entered)
								invoked.Quantity 					= LocalPayablesAddOnChargeRel.EnteredQuantity 
							else 
								invoked.Quantity 					= 1 

							invoked.TaxableAmount 					= LocalPayablesAddOnChargeRel.TotalDistributionAmount

						else
							if (SingleCallToVertex)
								LocalLineItemNumber					+= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = PrmPayablesInvoice.UniqueID
							else
								LocalLineItemNumber					= 1
								invoked.TaxLineItem.UniqueIdOfRelatedObject = UniqueID
							invoked.LineItemId						= Item	
							invoked.RelatedObjectReference 			= reference to PayablesInvoiceDetail
							invoked.RelatedLineItemUniqueId			= UniqueID											
							if (SingleCallToVertex)
								invoked.LineItemNumber				= LocalLineItemNumber	
							else
								invoked.LineItemNumber				= PurchaseOrderLine	

							invoked.InvoiceAmount					= TotalDistributionAmount
							invoked.TaxableAmount					= TotalDistributionAmount
							if (TaxCode != "00")
								invoked.ShipToTaxCode				= TaxCode									
								invoked.ShipToTaxCodeDescription	= TaxCode.Description									
							invoked.CommodityCode					= DerivedCommodityCodeNoDash											

							if (PurchaseOrder.DropshipAddress entered)
								invoked.ShipToAddress		= PurchaseOrder.DropshipAddress
							else
							if (Location.PostalAddressForPurchaseOrder entered)
								invoked.ShipToAddress		= Location.PostalAddressForPurchaseOrder
							else
							if (LocalPayablesAddOnChargeRel.PurchaseOrder.ShipToLocation entered)
								invoked.ShipToAddress 		= LocalPayablesAddOnChargeRel.PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
							else 
								invoked.ShipToAddress		= PurchaseOrder.ProcessLevel.PostalAddress


							invoked.CostCenter                     	= LocalVertexDistributionAccount.AccountingUnit 
							invoked.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 
							invoked.ProductClass                   = PurchaseOrderLine.MajorPurchasingClass  
							invoked.ProductTaxCategory 				= ProductTaxCategory

							if (IsHSNSACCodeEnabled)
								invoked.CommodityCodeType      		= "HSN"
								invoked.CommodityCode				= HSNSACCode 
							else 
							if (ContractLine entered
							and PurchaseOrderLine not entered)
								invoked.CommodityCodeType      		= "UNSPSC"
								invoked.CommodityCode				= ContractLine.UNSPSCCode.UNSPSCCodeDisplay 
							else 
								invoked.CommodityCodeType      		= "UNSPSC"
								invoked.CommodityCode				= PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay 

							invoked.Quantity 						= EnteredQuantity 
							invoked.TaxableAmount 					= TotalDistributionAmount

					initialize I9

					if (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
					    LocalAOCPurchaseOrderLine 					= LocalPayablesAddOnChargeRel.PurchaseOrderLine
					else
						LocalAOCPurchaseOrderLine 					= PrmPayablesInvoice.FirstPurchaseOrder.first PurchaseOrderLine set.PurchaseOrderLine

					if (TaxAttributesRel.VertexFlexibleFieldExist)


						if (ProcessAOC)  
							if (LocalPayablesAddOnChargeRel.Location entered)
								LocalInventoryLocation 						= LocalPayablesAddOnChargeRel.Location
							else
								LocalInventoryLocation 						= LocalPayablesAddOnChargeRel.PurchaseOrderLine.ShipToLocation

							if  (LocalPayablesAddOnChargeRel.LandedAddOnCharge)						
								if (LocalPayablesAddOnChargeRel.ItemType.Inventoried)
									LocalVertexDistributionAccount 			= LocalPayablesAddOnChargeRel.PurchaseOrderLine.ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
								else 
								if  (LocalPayablesAddOnChargeRel.PurchaseOrderLine entered)
									LocalVertexDistributionAccount    		= LocalPayablesAddOnChargeRel.first PurchaseOrderLineDistributionRel.DistributionAccount
								else
								if  (LocalPayablesAddOnChargeRel.ContractLine entered)
									LocalVertexDistributionAccount    		= LocalPayablesAddOnChargeRel.first ContractLineDistributionsRel.DistributionAccount
							else 
							if (LocalPayablesAddOnChargeRel.POAndLineAOCRel exists)
								LocalVertexDistributionAccount				= LocalPayablesAddOnChargeRel.POAndLineAOCRel.Account
							else
							if  (LocalPayablesAddOnChargeRel.MiscellaneousAccount entered)
								LocalVertexDistributionAccount    			= LocalPayablesAddOnChargeRel.MiscellaneousAccount
							else
								LocalVertexDistributionAccount				= LocalPayablesAddOnChargeRel.AddOnCharge.PostingAccount
						else
							LocalInventoryLocation = Location
							if  (!ItemType.Inventoried)
								if  (PurchaseOrderLine entered)
									if (InvoiceDistributionsForPurchaseOrderLineRel exists)
										LocalVertexDistributionAccount    	= first InvoiceDistributionsForPurchaseOrderLineRel.DistributionAccount
									else 
										LocalVertexDistributionAccount    	= first PurchaseOrderLine.PurchaseOrderLineDistributionsRel.DistributionAccount
								else
								if  (ContractLine entered)
									if (InvoiceDistributionsForContractLineRel exists)
										LocalVertexDistributionAccount  	= first InvoiceDistributionsForContractLineRel.DistributionAccount
									else 
										LocalVertexDistributionAccount  	= first ContractLine.ContractLineDistributionRel.DistributionAccount
								else
									LocalVertexDistributionAccount    		= first InvoiceDistributionsForMiscellaneousDetailRel.DistributionAccount
							else
								LocalVertexDistributionAccount 				= ItemLocationRel.GeneralLedgerCategory.InventoryAccount 


						invoke Create TaxLineItemUserFields


							invoked.FinanceEnterpriseGroup						= PrmCompany.FinanceEnterpriseGroup 

							if (SingleCallToVertex)
								invoked.TaxLineItem.UniqueIdOfRelatedObject 	= PrmPayablesInvoice.UniqueID
							else
							if (ProcessAOC)
								invoked.TaxLineItem.UniqueIdOfRelatedObject 	= LocalPayablesAddOnChargeRel.UniqueID
							else
								invoked.TaxLineItem.UniqueIdOfRelatedObject 	= UniqueID

							invoked.TaxLineItem.Sequence 						= TaxLineItemView.TaxLineItem.Sequence




							Idx = 0

							for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

								if (each.Code entered            
								or  each.ExternalValue entered)
									Idx +=1   
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId

									if (each.ExternalValue.ValueIs.TaxEntity)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company.AccountingEntity
									else    
									if (each.ExternalValue.ValueIs.Company)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company
									else    
									if (each.ExternalValue.ValueIs.Vendor)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Vendor
									else    
									if (each.ExternalValue.ValueIs.PostingDate)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.DistributionDate
									else    
									if (each.ExternalValue.ValueIs.TaxDate)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.DerivedTaxPointDate
									else    
									if (each.ExternalValue.ValueIs.ToAccountingEntity)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity 
									else    
									if (each.ExternalValue.ValueIs.AccountingUnit)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
									else    
									if (each.ExternalValue.ValueIs.GLAccount)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
									else    
									if (each.ExternalValue.ValueIs.Location)
										if (ProcessAOC)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalPayablesAddOnChargeRel.Location 
										else 
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Location 
									else    
									if (each.ExternalValue.ValueIs.Currency)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.InvoiceCurrency
									else    



									if (each.ExternalValue.ValueIs.DiscountAmount)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
									else    
									if (each.ExternalValue.ValueIs.UnitCost)
										if (ProcessAOC)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalPayablesAddOnChargeRel.EnteredUnitCost
										else 
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = EnteredUnitCost
									else    



									if (each.ExternalValue.ValueIs.ContractType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
									else    
									if (each.ExternalValue.ValueIs.WorkType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
									else    
									if (each.ExternalValue.ValueIs.AccountSubType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
									else    
									if (each.ExternalValue.ValueIs.ServiceType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
									else    
									if (each.ExternalValue.ValueIs.CommodityCode)
										if (not ProcessAOC)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DerivedCommodityCodeNoDash
									else    
									if (each.ExternalValue.ValueIs.UNSPSC)
										if (not ProcessAOC)
											if (ContractLine entered 
											and PurchaseOrderLine not entered)
												invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ContractLine.UNSPSCCode.UNSPSCCodeDisplay
											else 
												invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay
									else    
									if (each.ExternalValue.ValueIs.ProductTaxCatagory)
										if (ProcessAOC)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalPayablesAddOnChargeRel.ProductTaxCategory
										else 
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ProductTaxCategory
									else    
									if (each.ExternalValue.ValueIs.TaxUsageCode)
										if (ProcessAOC)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalPayablesAddOnChargeRel.TaxUsageCode
										else 
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxUsageCode
									else 



									if (each.ExternalValue.ValueIs.PaymentDate)			
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesInvoice.InvoiceDate 
									else 









									if (each.ExternalValue.ValueIs.UsageType)			
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
									else 
									if (each.ExternalValue.ValueIs.CustomerType)	

										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
									else 
									if (each.ExternalValue.ValueIs.Project)				
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project
									else 
									if (each.ExternalValue.ValueIs.Longitude)				
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLongitude
									else 
									if (each.ExternalValue.ValueIs.Latitude)			
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLatitude
									else 
									if (each.ExternalValue.ValueIs.Altitude)									
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoAltitude
									else 
									if (each.ExternalValue.ValueIs.FinanceDimension1)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension2)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension3)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension4)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension5)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension6)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension7)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension8)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension9)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
									else    
									if (each.ExternalValue.ValueIs.FinanceDimension10) 
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
									else    
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code  






							Idx = 0
							for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

								if (each.NumericValue entered            
								or  each.ExternalValue entered)
									Idx +=1   
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 

									if (each.ExternalValue.ValueIs.Company)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = Company
									else    
									if (each.ExternalValue.ValueIs.GLAccount)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
									else    
									if (each.ExternalValue.ValueIs.DiscountAmount)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 3
									else    
									if (each.ExternalValue.ValueIs.UnitCost)
										if (ProcessAOC
										and LocalPayablesAddOnChargeRel.EnteredUnitCost entered)
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalPayablesAddOnChargeRel.EnteredUnitCost
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8 
										else 
										if (EnteredUnitCost entered)
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = EnteredUnitCost
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8 
									else    
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue  







							Idx = 0
							for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

								if (each.DateValue entered            
								or  each.ExternalValue entered)
									Idx +=1   
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId 

									if (each.ExternalValue.ValueIs.PostingDate)
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PayablesInvoice.DistributionDate
									else    
									if (each.ExternalValue.ValueIs.PaymentDate)
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PayablesInvoice.InvoiceDate 
									else    
									if (each.ExternalValue.ValueIs.TaxDate)
										if (PayablesInvoice.DerivedTaxPointDate entered)
											invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
										else 
											invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PayablesInvoice.InvoiceDate 
									else    
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue  






				StartOfSetRules







				    SingleCallToVertex = true 

					LocalCompany = PrmCompany
					LocalInvoice = PrmPayablesInvoice.Invoice

					initialize SetTaxError
					initialize VertexAutoMatchError


					invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
						invoked.TaxCode					= PrmPayablesInvoice.TaxCode
						invoked.EnteredInvoiceAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						invoked.EnteredTaxAmount		= PrmPayablesInvoice.TaxAmount	
						invoked.EnteredTaxableAmount	= PrmPayablesInvoice.TaxableAmount
						initialize invoked.TaxSystemTaxAmount
						if (PrmPayablesInvoice.TaxAmount entered
						and PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
							invoked.TaxMethod			= "I"
						else
							if (PrmPayablesInvoice.TaxEntityUsesThirdPartyTax)
								invoked.TaxMethod		= "A"

					invoke FastUpdate PrmPayablesInvoice
					    initialize invoked.POTaxAmount
					    								
					if (PrmFromRecon)
					
						VertexMatchWork = PrmReconMatchWork.MatchWork
						
						invoke FastUpdate PrmPayablesInvoice
							invoked.BackgroundProcessing = 3 

					else
						if  (PrmPayablesInvoice.MatchReconQueueRel exists 
						and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
							invoke Purge PrmPayablesInvoice.MatchWorkRel


						invoke CreateOnly MatchWork
							resume on error	 					
					   			VertexAutoMatchError = error message
							assign result to VertexMatchWork
							invoked.Company						= PrmCompany
							invoked.PayablesInvoice				= PrmPayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"
							invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
							invoked.BypassValidateMatchInvoiceBalance = true						
							if (SetTaxError)
								invoked.VerifyMatchMessage      = VertexAutoMatchError



						if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
							invoke CreateForBudgetProcessing MatchReconQueue
								invoked.Company				= PrmCompany
								invoked.PayablesInvoice		= PrmPayablesInvoice
								invoked.MatchWork			= VertexMatchWork.MatchWork
						else
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.MatchWork			= VertexMatchWork.MatchWork



					if (!PrmPayablesInvoice.CreditForRebill)
						for each PrmPayablesInvoice.PayablesInvoiceDistributionRel
							if (each.IsTaxDistribution
							and each.Status.Unreleased)			
								invoke Delete each

					if (SingleCallToVertex)
				        LocalUniqueID = PrmPayablesInvoice.UniqueID
						for each OneCallAllLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

					if (PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel exists)


						initialize MiscAOCExtendedAmount
						for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
							for each each.PurchaseOrder.PurchaseOrderLineRel
								if (each.ExtendedAmount >= MiscAOCExtendedAmount)
									MiscAOCExtendedAmount				= each.ExtendedAmount
									MiscAOCPurchaseOrderLine			= each.PurchaseOrderLine


						ProcessAOC = true
						for each PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine


							LocalTaxCode 					= LocalPayablesAddOnChargeRel.TaxCode 

							if  (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)

								if (LocalIsInvoicedTaxCode)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										initialize invoked.AccruedTaxAmount
									if (!SingleCallToVertex)	
										invoke FastUpdate PrmPayablesInvoice
											invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										initialize invoked.TaxAmount
										
								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount

							else
							if (SingleCallToVertex)	
								if (LocalPayablesAddOnChargeRel.TaxCode entered)
								    include CalculateTaxLineItem
							else
							    include SetCalculateTax
								LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax  

								if  (CalculateTax.OutputErrorNumber entered)
									SetTaxError	= true
									VertexAutoMatchError	= CalculateTax.OutputErrorText
									invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
										invoked.ErrorLevel		= 1		
										invoked.ErrorClass		= 1		
										invoked.ErrorType		= 57	//"SabrixTaxServerError"
								else
									if (LocalIsInvoicedTaxCode)

										invoke FastUpdate LocalPayablesAddOnChargeRel
											invoked.TaxAmount	= CalculateTax.OutputTotalTaxAmount
											initialize invoked.AccruedTaxAmount
											
											if (CalculateTax.OutputTotalTaxAmount not entered)
											    invoked.InvoiceLineTaxable	= false
											else
											    invoked.InvoiceLineTaxable	= true
										invoke FastUpdate PrmPayablesInvoice
											invoked.POTaxAmount += CalculateTax.OutputTotalTaxAmount
									else

										invoke FastUpdate LocalPayablesAddOnChargeRel
											invoked.AccruedTaxAmount	= CalculateTax.OutputTotalTaxAmount
											initialize invoked.TaxAmount

											if (CalculateTax.OutputTotalTaxAmount not entered)
											    invoked.InvoiceLineTaxable	= false
											else
											    invoked.InvoiceLineTaxable	= true


									invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
										invoked.TaxSystemTaxAmount		+= CalculateTax.OutputTotalTaxAmount	
	
									invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
										invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction

										invoked.SentToTaxEngine					= not CalculateTax.NotSentToSabrix		
										invoked.ShipToLocation					= PrmPayablesInvoice.Location
										invoked.TaxAccrualCode					= CalculateTax.SabrixReturnedTaxCode
										invoked.CalculatedTaxAmount				= CalculateTax.OutputTotalTaxAmount

							if (SetTaxError)
								end for each

							if (!SingleCallToVertex)	










								if (SetTaxError)
									end for each									    

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SingleCallToVertex
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 



				
				
				EndOfSetRules		


	
					if (!SetTaxError)

						if  (VertexAutoMatchError not entered)

							invoke UpdateErrorRecordsAction PrmPayablesInvoice
								resume on error							
					   				VertexAutoMatchError = error message

						if  (VertexAutoMatchError not entered)
							if (PrmPayablesInvoice.InvoiceErrorsExists)
								VertexAutoMatchError = InvoiceOutOfBalanceMsg

					if (!SetTaxError
					and  VertexAutoMatchError not entered
					and !PrmFromRecon)

						if  (VertexAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				VertexAutoMatchError = error message


	
						if  (!PrmFromRecon)
							if  (VertexAutoMatchError not entered)

								invoke BatchMatch VertexMatchWork.MatchWork
									resume on error							
						   				VertexAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= VertexMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult


					if  (SetTaxError entered
					or   VertexAutoMatchError entered)

						invoke Update VertexMatchWork.MatchWork
							invoked.VerifyMatchMessage = VertexAutoMatchError

						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= VertexAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update VertexMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
								initialize invoked.POTaxAmount
					else
					if  (PrmFromRecon)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch PrmReconMatchWork.MatchWork

			Action Rules
					
				Empty Set Rules
					include StartOfSetRules
					include EndOfSetRules

				Set Rules
					Entrance Rules
						include StartOfSetRules
					Exit Rules
						ProcessAOC = false
						if (SingleCallToVertex)

							include SetCalculateTax
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax 

							if  (CalculateTax.OutputErrorNumber entered)
								SetTaxError	= true
								VertexAutoMatchError	= CalculateTax.OutputErrorText
								invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"
								include EndOfSetRules
							else
								PrmReconMatchWork = VertexMatchWork.MatchWork

							    invoke ProcessVertexForMatchPart2 PayablesInvoiceDetail
									invoked.PrmCompany			= PrmCompany
									invoked.PrmPayablesInvoice	= PrmPayablesInvoice
									invoked.PrmAutoMatchResult  = PrmAutoMatchResult
									invoked.PrmFromRecon		= PrmFromRecon
									invoked.PrmReconMatchWork   = PrmReconMatchWork
									invoked.PrmFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup

									invoked.SabrixReturnedTaxCode = CalculateTax.SabrixReturnedTaxCode
						else
							include EndOfSetRules

				Instance Rules

					ProcessAOC = false
				    if  (TotalDistributionAmount > 0
				    and  !SetTaxError)
				    	initialize TaxAmount
				    	initialize AccruedTaxAmount
						LocalTaxCode = TaxCode 

						if (PayablesInvoiceDetailTaxRel.OverrideTaxAmount entered)

							if (IsInvoicedTaxCode)
								TaxAmount	= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize AccruedTaxAmount
								if (!SingleCallToVertex)	
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
								AccruedTaxAmount = PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize TaxAmount
						
							invoke Update PayablesInvoice.PayablesInvoiceTaxRel
								invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
						else
						if (SingleCallToVertex)	
							if (TaxCode entered)
								include CalculateTaxLineItem
						else
							include SetCalculateTax
							LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax  
	

							if  (CalculateTax.OutputErrorNumber entered)
								SetTaxError	= true
								VertexAutoMatchError	= CalculateTax.OutputErrorText
								invoke Create PayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"
							else
								if (IsInvoicedTaxCode)
									TaxAmount	= CalculateTax.OutputTotalTaxAmount
									initialize AccruedTaxAmount
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += CalculateTax.OutputTotalTaxAmount
								else
									AccruedTaxAmount = CalculateTax.OutputTotalTaxAmount
									initialize TaxAmount

								if (CalculateTax.OutputTotalTaxAmount not entered)
								    InvoiceLineTaxable				= false
								else
								    InvoiceLineTaxable				= true
	
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= CalculateTax.OutputTotalTaxAmount
									
								invoke Update PayablesInvoiceDetailTaxRel
									invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction

									invoked.SentToTaxEngine					= not CalculateTax.NotSentToSabrix		
									invoked.ShipToLocation					= PrmPayablesInvoice.Location
									invoked.TaxAccrualCode					= CalculateTax.SabrixReturnedTaxCode
									invoked.CalculatedTaxAmount 			= CalculateTax.OutputTotalTaxAmount 

						LocalAccrualCode			= PayablesInvoiceDetailTaxRel.TaxAccrualCode










					if (!SetTaxError)

						if  (PayablesInvoice.MatchProcessType.ServiceContract 
						and !SingleCallToVertex
						and (TaxAmount entered
						or   AccruedTaxAmount entered))
							BypassBudgetEdit  = true
							ProcessingTax = true
							CalculateTaxHasBeenCalled = true 
							initialize CalculateTax 
							LocalTaxCode 												= TaxCode 
							CalculateTax.TaxCode										= TaxCode
							CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= TaxCode
							CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint			= LocalEntityTaxCodeRel.TaxPoint
							CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	= LocalEntityTaxCodeRel.TaxInputDueAccount
							CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
							CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag			= LocalEntityTaxCodeRel.AccruedOrInvoiced
							CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag		= LocalEntityTaxCodeRel.LandedCost
							include CopyContractLineDistributionsRuleBlock
							ProcessingTax = false								

						ProcessAOC = true
						for each PayablesInvoiceAddOnChargeRel

							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine
							LocalTaxCode 					= each.TaxCode 
							if (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)
								if (LocalIsInvoicedTaxCode)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										initialize invoked.AccruedTaxAmount
										
									if (!SingleCallToVertex)	
										invoke FastUpdate PayablesInvoice
											invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										initialize invoked.TaxAmount
										
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
							if (SingleCallToVertex)	
								if (LocalPayablesAddOnChargeRel.TaxCode entered)
									include CalculateTaxLineItem
							else							
							    include SetCalculateTax
								LocalCalculateTaxExecuted	= CalculateTax.ExecuteCalculateTax  

								if  (CalculateTax.OutputErrorNumber entered)
									SetTaxError	= true
									VertexAutoMatchError	= CalculateTax.OutputErrorText
									invoke Create PayablesInvoice.PayablesInvoiceError set			
										invoked.ErrorLevel		= 1		
										invoked.ErrorClass		= 1		
										invoked.ErrorType		= 57	//"SabrixTaxServerError"

								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										if (LocalIsInvoicedTaxCode)
											invoked.TaxAmount	= CalculateTax.OutputTotalTaxAmount
											initialize invoked.AccruedTaxAmount
										else
											invoked.AccruedTaxAmount	= CalculateTax.OutputTotalTaxAmount
											initialize invoked.TaxAmount
										if (CalculateTax.OutputTotalTaxAmount not entered)
										    invoked.InvoiceLineTaxable	= false
										else
										    invoked.InvoiceLineTaxable	= true
		
									if (LocalIsInvoicedTaxCode)
										invoke FastUpdate PayablesInvoice
											invoked.POTaxAmount += CalculateTax.OutputTotalTaxAmount
		
									invoke Update PayablesInvoice.PayablesInvoiceTaxRel
										invoked.TaxSystemTaxAmount		+= CalculateTax.OutputTotalTaxAmount	
		
									invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
										invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction

										invoked.SentToTaxEngine					= not CalculateTax.NotSentToSabrix		
										invoked.ShipToLocation					= PrmPayablesInvoice.Location
										invoked.TaxAccrualCode					= CalculateTax.SabrixReturnedTaxCode
										invoked.CalculatedTaxAmount				= CalculateTax.OutputTotalTaxAmount
	
							if (SetTaxError)
								end for each

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SingleCallToVertex
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 

		ProcessVertexForMatchPart2 is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
				VertexTaxMessage is Text
				SabrixReturnedTaxCode is like TaxCode

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmFinanceEnterpriseGroup 
					default to PrmCompany.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Local Fields
				SingleCallToVertex           is Boolean
				ProcessAOC						is Boolean
				AutoMatchError					is Boolean
				AutoMatchErrorMessage			is Alpha 200
				LocalDistributionAccount    	is a FinanceCodeBlock

				VertexMatchWork				is a MatchWork view
				VertexAutoMatchError			is Alpha 200
				SetTaxError						is Boolean

			Rule Blocks
				StartOfSetRules		








					SingleCallToVertex = true 




					VertexMatchWork = PrmReconMatchWork.MatchWork
					if (PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel exists)


						ProcessAOC = true
						for each PrmPayablesInvoice.MiscPayablesInvoiceAddOnChargeRel
							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine
						    LocalUniqueID 					= PrmPayablesInvoice.UniqueID
							LocalInvoice					= PrmPayablesInvoice.Invoice


							LocalTaxCode 					= LocalPayablesAddOnChargeRel.TaxCode 
							if (LocalPayablesAddOnChargeRel.TaxCode = "00")
								LocalTaxCode     			= LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 

							if  (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)

								if (LocalIsInvoicedTaxCode)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.TaxCode = "00")
											invoked.TaxCode     = LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 
										initialize invoked.AccruedTaxAmount
									invoke FastUpdate PrmPayablesInvoice
										invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.TaxCode = "00")
											invoked.TaxCode     = LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 
										initialize invoked.TaxAmount
										
								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount

							else
								if (LocalIsInvoicedTaxCode)



									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										if (invoked.TaxCode = "00")
											invoked.TaxCode     = LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 
										initialize invoked.AccruedTaxAmount
										
										if (LocalAocTaxLineItemRel.CalculatedTaxAmt not entered)
										    invoked.InvoiceLineTaxable	= false
										else
										    invoked.InvoiceLineTaxable	= true
									invoke FastUpdate PrmPayablesInvoice
										invoked.POTaxAmount += LocalAocTaxLineItemRel.CalculatedTaxAmt
								else

									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										if (invoked.TaxCode = "00")
											invoked.TaxCode     = LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 
										initialize invoked.TaxAmount

										if (LocalAocTaxLineItemRel.CalculatedTaxAmt not entered)
										    invoked.InvoiceLineTaxable	= false
										else
										    invoked.InvoiceLineTaxable	= true


								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= LocalAocTaxLineItemRel.CalculatedTaxAmt	

								invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
									invoked.TaxingJurisdiction				= LocalAocTaxLineItemRel.TaxingJurisdiction

									invoked.SentToTaxEngine					= true		
									invoked.ShipToLocation					= PrmPayablesInvoice.Location
									invoked.TaxAccrualCode					= LocalAocTaxLineItemRel.ShipToTaxCode
									invoked.CalculatedTaxAmount				= LocalAocTaxLineItemRel.CalculatedTaxAmt











							if (SetTaxError)
								end for each									    

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 



				EndOfSetRules

	
					if (!SetTaxError)

						if  (VertexAutoMatchError not entered)

							invoke UpdateErrorRecordsAction PrmPayablesInvoice
								resume on error							
					   				VertexAutoMatchError = error message

						if  (VertexAutoMatchError not entered)
							if (PrmPayablesInvoice.InvoiceErrorsExists)
								VertexAutoMatchError = InvoiceOutOfBalanceMsg

					if (!SetTaxError
					and  VertexAutoMatchError not entered
					and !PrmFromRecon)



						if  (VertexAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				VertexAutoMatchError = error message



	
						if  (!PrmFromRecon)
							if  (VertexAutoMatchError not entered)

								invoke BatchMatch VertexMatchWork.MatchWork
									resume on error							
						   				VertexAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= VertexMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult




					if  (SetTaxError entered
					or   VertexAutoMatchError entered)

						invoke Update VertexMatchWork.MatchWork
							invoked.VerifyMatchMessage = VertexAutoMatchError

						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= VertexAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update VertexMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
								initialize invoked.POTaxAmount


						if (!TaxConfigurationRel.DebugMode
						and !TaxConfigurationRel.WriteToLogFile)
							for each JurisdictionResultsForInvoiceRel

								invoke Purge each 

					else
					if  (PrmFromRecon)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch PrmReconMatchWork.MatchWork



			Action Rules
					
				Empty Set Rules
					include StartOfSetRules
					include EndOfSetRules

				Set Rules
					Entrance Rules
						include StartOfSetRules
					Exit Rules
						include EndOfSetRules

				Instance Rules


					ProcessAOC = false
					LocalInvoice = PrmPayablesInvoice.Invoice

				    if  (TotalDistributionAmount > 0)
				    	initialize TaxAmount
				    	initialize AccruedTaxAmount

						if (TaxCode = "00")
							TaxCode     = OneCallTaxLineItemRel2.TaxingJurisdiction 

						LocalTaxCode = TaxCode 

						if (PayablesInvoiceDetailTaxRel.OverrideTaxAmount entered)


							if (IsInvoicedTaxCode)
								TaxAmount	= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize AccruedTaxAmount
								invoke FastUpdate PayablesInvoice
									invoked.POTaxAmount += PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
								AccruedTaxAmount = PayablesInvoiceDetailTaxRel.OverrideTaxAmount
								initialize TaxAmount
							
							invoke Update PayablesInvoice.PayablesInvoiceTaxRel
								invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
						else
							if (IsInvoicedTaxCode)
								TaxAmount	= OneCallTaxLineItemRel2.CalculatedTaxAmt
								initialize AccruedTaxAmount
								invoke FastUpdate PayablesInvoice
									invoked.POTaxAmount += OneCallTaxLineItemRel2.CalculatedTaxAmt

							else
								AccruedTaxAmount = OneCallTaxLineItemRel2.CalculatedTaxAmt
								initialize TaxAmount


							if (OneCallTaxLineItemRel2.CalculatedTaxAmt not entered)
							    InvoiceLineTaxable				= false
							else
							    InvoiceLineTaxable				= true

							invoke Update PayablesInvoice.PayablesInvoiceTaxRel
								invoked.TaxSystemTaxAmount		+= OneCallTaxLineItemRel2.CalculatedTaxAmt
								
							invoke Update PayablesInvoiceDetailTaxRel
								invoked.TaxingJurisdiction				= OneCallTaxLineItemRel2.TaxingJurisdiction

								invoked.SentToTaxEngine					= true		
								invoked.ShipToLocation					= PayablesInvoice.Location
								invoked.TaxAccrualCode					= SabrixReturnedTaxCode
								invoked.CalculatedTaxAmount				= OneCallTaxLineItemRel2.CalculatedTaxAmt










					if (!SetTaxError)

						if  (PayablesInvoice.MatchProcessType.ServiceContract 
						and (TaxAmount entered
						or   AccruedTaxAmount entered))
							BypassBudgetEdit  = true
							ProcessingTax = true
							CalculateTaxHasBeenCalled = true 
							initialize CalculateTax 
							LocalTaxCode 												= TaxCode 
							CalculateTax.TaxCode										= TaxCode
							CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= TaxCode
							CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint			= LocalEntityTaxCodeRel.TaxPoint
							CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	= LocalEntityTaxCodeRel.TaxInputDueAccount
							CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
							CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag			= LocalEntityTaxCodeRel.AccruedOrInvoiced
							CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag		= LocalEntityTaxCodeRel.LandedCost
							include CopyContractLineDistributionsRuleBlock
							ProcessingTax = false

						ProcessAOC = true
						for each PayablesInvoiceAddOnChargeRel

							LocalCompany					= PrmCompany
							LocalPayablesInvoice			= PrmPayablesInvoice
							LocalAddOnCharge 				= each.AddOnCharge
							LocalPayablesInvoiceAddOnCharge = each.PayablesInvoiceAddOnCharge
							LocalPurchaseOrder 				= each.PurchaseOrder
							LocalPurchaseOrderLineNumber 	= each.PurchaseOrderLine
							LocalContract 					= each.Contract
							LocalContractLine 				= each.ContractLine
							LocalUniqueID 					= PrmPayablesInvoice.UniqueID
							LocalInvoice					= PrmPayablesInvoice.Invoice
						
							LocalTaxCode 					= LocalPayablesAddOnChargeRel.TaxCode 
							if (LocalPayablesAddOnChargeRel.TaxCode = "00")
								LocalTaxCode     			= LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 

							if (LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount entered)
								if (LocalIsInvoicedTaxCode)
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.TaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.TaxCode = "00")
											invoked.TaxCode     = LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 
										initialize invoked.AccruedTaxAmount
										
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
								else
									invoke FastUpdate LocalPayablesAddOnChargeRel
										invoked.AccruedTaxAmount	= LocalPayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount
										if (invoked.TaxCode = "00")
											invoked.TaxCode     = LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 
										initialize invoked.TaxAmount
										
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= PayablesInvoiceDetailTaxRel.OverrideTaxAmount
							else
								invoke FastUpdate LocalPayablesAddOnChargeRel
									if (invoked.TaxCode = "00")
										invoked.TaxCode     = LocalPayablesAddOnChargeRel.OneCallTaxLineItemRel2.TaxingJurisdiction 
									if (LocalIsInvoicedTaxCode)
										invoked.TaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										initialize invoked.AccruedTaxAmount
									else
										invoked.AccruedTaxAmount	= LocalAocTaxLineItemRel.CalculatedTaxAmt
										initialize invoked.TaxAmount
									if (LocalAocTaxLineItemRel.CalculatedTaxAmt not entered)
									    invoked.InvoiceLineTaxable	= false
									else
									    invoked.InvoiceLineTaxable	= true

								LocalTaxCode = 	LocalPayablesAddOnChargeRel.TaxCode 
								if (LocalIsInvoicedTaxCode)
									invoke FastUpdate PayablesInvoice
										invoked.POTaxAmount += LocalAocTaxLineItemRel.CalculatedTaxAmt
	
								invoke Update PayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxSystemTaxAmount		+= LocalAocTaxLineItemRel.CalculatedTaxAmt	
	
								invoke Update LocalPayablesInvoiceAddOnChargeTaxRel
									invoked.TaxingJurisdiction				= LocalAocTaxLineItemRel.TaxingJurisdiction

									invoked.SentToTaxEngine					= true		
									invoked.ShipToLocation					= PayablesInvoice.Location
									invoked.TaxAccrualCode					= SabrixReturnedTaxCode
									invoked.CalculatedTaxAmount				= LocalAocTaxLineItemRel.CalculatedTaxAmt
	









							if (SetTaxError)
								end for each

							if  (PayablesInvoice.MatchProcessType.ServiceContract 
							and  !SetTaxError 
							and (LocalPayablesAddOnChargeRel.TaxAmount entered
							or   LocalPayablesAddOnChargeRel.AccruedTaxAmount entered))
								invoke CopyContractLineTaxDistributionsOneSource LocalPayablesAddOnChargeRel 



		CreateMatchWorkDetails is a Set Action
			restricted
			Parameters
				PrmCompany		is a PayablesCompany
				PrmInvoice 		is a PayablesInvoice
				PrmMatchWork	is a MatchWork
				FromRecon		is Boolean
				PrmAutoMatchResult is an AutoMatchResult
			Instance Selection
				where (Company 			= PrmCompany
				and    PayablesInvoice 	= PrmInvoice)
			Local Fields
				AutoMatchError							is Boolean
				AutoMatchErrorMessage					is Alpha 200

			Action Rules
				Empty Set Rules
					if (FromRecon)
						invoke FastUpdate PrmInvoice
							initialize invoked.BackgroundProcessing
					else
					if  (PrmAutoMatchResult entered)

						invoke BatchMatch2 MatchWork
							resume on error
								AutoMatchError 			= true
								AutoMatchErrorMessage	= error message
							invoked.PrmCompany 		= PrmCompany
							invoked.PrmInvoice 		= PrmInvoice
							invoked.PrmMatchWork 	= PrmMatchWork
							invoked.PrmAutoMatchResult = PrmAutoMatchResult


						if (AutoMatchError)
							LocalCompany				= PrmCompany
							LocalPayablesInvoice		= PrmInvoice
							LocalAutoMatchResult		= PrmAutoMatchResult
							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel
								invoked.ErrorMessage 				= AutoMatchErrorMessage
								invoked.UnmatchedAmount				= PrmInvoice.InvoiceAmount.CurrencyAmount
							invoke Update PrmMatchWork
								initialize invoked.LinkedAutoMatchResult
					else

						invoke BatchMatch2 MatchWork

							on error
								invoke CreateViaParameters PayablesInvoiceError
									invoked.PrmCompany			= PrmCompany
									invoked.PrmInvoice			= PrmInvoice
									invoked.PrmErrorLevel		= 2		
									invoked.PrmErrorClass		= 2		
									invoked.PrmErrorType		= 58	

							invoked.PrmCompany 		= PrmCompany
							invoked.PrmInvoice 		= PrmInvoice
							invoked.PrmMatchWork 	= PrmMatchWork

				Set Rules
					Exit Rules
						if (FromRecon)
							invoke AutoMatchFromBatch MatchReconQueue
								invoked.PrmCompany 		= PrmCompany
								invoked.PrmInvoice 		= PrmInvoice
						else
						if  (PrmAutoMatchResult entered)

							invoke BatchMatch2 MatchWork
								resume on error
									AutoMatchError 			= true
									AutoMatchErrorMessage	= error message
								invoked.PrmCompany 		= PrmCompany
								invoked.PrmInvoice 		= PrmInvoice
								invoked.PrmMatchWork 	= PrmMatchWork
								invoked.PrmAutoMatchResult = PrmAutoMatchResult


							if (AutoMatchError)
								LocalCompany				= PrmCompany
								LocalPayablesInvoice		= PrmInvoice
								LocalAutoMatchResult		= PrmAutoMatchResult
								invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel
									invoked.ErrorMessage 				= AutoMatchErrorMessage
									invoked.UnmatchedAmount				= PrmInvoice.InvoiceAmount.CurrencyAmount

								invoke Update PrmMatchWork
									initialize invoked.LinkedAutoMatchResult

						else

							invoke BatchMatch2 MatchWork
								on error
									invoke CreateViaParameters PayablesInvoiceError
										invoked.PrmCompany			= PrmCompany
										invoked.PrmInvoice			= PrmInvoice
										invoked.PrmErrorLevel		= 2		
										invoked.PrmErrorClass		= 2		
										invoked.PrmErrorType		= 58	

								invoked.PrmCompany 		= PrmCompany
								invoked.PrmInvoice 		= PrmInvoice
								invoked.PrmMatchWork 	= PrmMatchWork

				Instance Rules
					if (PurchaseOrderReceiptLine entered
					and EnteredQuantity > PurchaseOrderReceiptLine.OpenToMatchQuantity
					and (ItemType.Special 
					or   ItemType.Service
					or   Item.CatchWeightCode.NotCatchWeight))
						initialize PurchaseOrderReceipt
						initialize PurchaseOrderReceiptLine

					invoke Create MatchWorkInvoiceDetail
						fill in fields from this instance
						invoked.MatchWork 						= PrmMatchWork
						invoked.Company							= Company
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.PurchaseOrder					= PurchaseOrder
						invoked.PurchaseOrderLine				= PurchaseOrderLine
						invoked.PayablesInvoiceDetail			= PayablesInvoiceDetail
						if (ItemType.Service
						or  PayablesInvoice.MatchProcessType.DropShip)
							invoked.MatchToReceipt				= false
						else
							invoked.MatchToReceipt				= true

						if (TotalDistributionAmount entered)
							invoked.MatchedQuantity				= MatchedQuantity
							invoked.MatchUnitCost				= MatchUnitCost
							invoked.MatchAmount					= TotalDistributionAmount
						else
							invoked.MatchedQuantity				= MatchedQuantity
							invoked.MatchUnitCost				= MatchUnitCost
							invoked.MatchAmount					= MatchedQuantity * MatchUnitCost

		UnmatchPhase3InvoiceDetail is a Set Action
			restricted
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				UnmatchFrom					is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"
			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Action Rules
				Empty Set Rules
					invoke UnmatchPhase4InvoiceAddOnCharge PayablesInvoiceAddOnCharge
						invoked.PrmPayablesCompany		= PrmPayablesCompany
						invoked.PrmPayablesInvoice		= PrmPayablesInvoice
						invoked.UnmatchFrom 			= UnmatchFrom

				Set Rules
					Entrance Rules
						if (UnmatchFrom.MA75)
							invoke DeleteNoInvoiceUpdate PrmPayablesInvoice.PayablesInvoiceSpreadAddOnChargeRel
						invoke FastUpdate PrmPayablesInvoice
						    invoked.TransientInUnmatch = true
					Exit Rules
						invoke UnmatchPhase4InvoiceAddOnCharge PayablesInvoiceAddOnCharge
							invoked.PrmPayablesCompany		= PrmPayablesCompany
							invoked.PrmPayablesInvoice		= PrmPayablesInvoice
							invoked.UnmatchFrom 			= UnmatchFrom

						if (PrmPayablesInvoice.MatchProcessType.ServiceContract)
							invoke FinishUpdateContractAmounts PrmPayablesInvoice.ServiceContract 
				
				Instance Rules
					if  (MatchObjectID entered)
						if  (PayablesInvoice.MatchProcessType.ServiceContract)

							initialize LocalTotalAddOnChargeAmount
							LocalTotalNewTaxAmount							= TaxAmount

							for each PayablesInvoiceAddOnChargeRel
								LocalTotalNewTaxAmount						+= TaxAmount
								LocalTotalAddOnChargeAmount					+= TotalBaseAmount

							invoke UpdateAmountsAndQuantities ContractLine  
								if (PayablesInvoice.IsChargeback) 
									if (this instance.ContractLine.TaxAmountOrdered not entered)
										initialize invoked.InTaxAmount 
									else
										invoked.InTaxAmount					= LocalTotalNewTaxAmount * -1

									if (this instance.ContractLine.AddOnChargeAmountOrdered not entered)
										initialize invoked.InAddOnChargeAmount 
									else 
										invoked.InAddOnChargeAmount			= LocalTotalAddOnChargeAmount * -1

									if (this instance.ContractLine.AmountOrdered not entered)
										initialize invoked.InAmount
									else  
										invoked.InAmount					= TotalDistributionAmount * -1

									if (this instance.ContractLine.QuantityOrdered not entered)
										initialize invoked.InQuantity
									else  
										invoked.InQuantity					= MatchedQuantity * -1
								else 
									invoked.InTaxAmount						= LocalTotalNewTaxAmount * -1
									invoked.InAddOnChargeAmount				= LocalTotalAddOnChargeAmount * -1
									invoked.InAmount						= TotalDistributionAmount * -1
									invoked.InQuantity						= MatchedQuantity * -1

								invoked.InDate								= PayablesInvoice.InvoiceDate
								invoked.InUOM.UnitOfMeasure					= EnteredUOM
								invoked.InCurrency                          = PayablesInvoice.InvoiceCurrency
								invoked.FromMatch                           = true
								if (PayablesInvoice.ServiceContract.UseRetainage)
									invoked.InInvoiceAmount                 = TotalDistributionAmount * -1

						if (PayablesInvoice.MatchLevel.DetailMatch
						and ItemType.Service
						and PurchaseOrderReceipt not entered)


							if (PayablesInvoice.IsChargeback
							and PurchaseOrderLine.ServiceCode.Quantity)

								if  (PurchaseOrderLine.ChargebackQuantity entered
								and  MatchedQuantity entered)

									invoke UpdateFromMatch PurchaseOrderLine
										if (MatchedQuantity < 0
										and MatchedQuantity * -1 > this instance.PurchaseOrderLine.ChargebackQuantity)
											invoked.LocalUpdateFromMatchChargebackQuantity = MatchedQuantity
										else
										if  (MatchedQuantity > this instance.PurchaseOrderLine.ChargebackQuantity)
											invoked.LocalUpdateFromMatchChargebackQuantity = MatchedQuantity * -1
										else
											invoked.LocalUpdateFromMatchChargebackQuantity = PurchaseOrderLine.ChargebackQuantity * -1
							else
							if (PurchaseOrderLine entered
							and !PayablesInvoice.IsChargeback)



								invoke UpdateFromMatch PurchaseOrderLine
									invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
									if (CreditForRebill)
										if (this instance.PurchaseOrderLine.ServiceCode.Quantity)
											invoked.LocalUpdateFromMatchMatchedQuantity		= MatchedQuantity * -1
											invoked.LocalUpdateFromMatchMatchedAmount		= MatchUnitCost
										else
											invoked.LocalUpdateFromMatchMatchedQuantity		= 1
											initialize invoked.LocalUpdateFromMatchChargebackQuantity
											invoked.LocalUpdateFromMatchMatchedAmount		= ((MatchedQuantity * MatchUnitCost) * -1)
									else
										if (this instance.PurchaseOrderLine.ServiceCode.Quantity)
											invoked.LocalUpdateFromMatchMatchedQuantity		= MatchedQuantity * -1
											invoked.LocalUpdateFromMatchMatchedAmount		= TotalDistributionAmount * -1
										else
											invoked.LocalUpdateFromMatchMatchedQuantity		= -1
											initialize invoked.LocalUpdateFromMatchChargebackQuantity
											invoked.LocalUpdateFromMatchMatchedAmount		= ((MatchedQuantity * MatchUnitCost) * -1)


						if (UnmatchFrom.MA70)
							for each MatchInvoiceMessageRel		
								if (each.MatchMessageOrigin != 1)
									invoke Delete each

						if  (UnmatchFrom.MA70
						and (RecordSource.CreatedWithinMatch
						or   RecordSource.GeneratedByAocSpread
						or   PayablesInvoice.MatchProcessType.ServiceContract))
							invoke DeleteNoInvoiceUpdate
						else
						if  (RecordSource.Invoice
						or   RecordSource.LineMatchMa43
						or   UnmatchFrom.MA75)
							initialize MatchObjectID
							initialize PurchaseOrderReceipt
							initialize PurchaseOrderReceiptLine
							if  (UnmatchFrom.MA70)
								initialize Status
							MatchUpdateDate			= current corporate date

		DeleteNoInvoiceUpdateSet is a Set Action
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				PrmPurchaseOrder			is a PurchaseOrder
				PrmDetailsOnly		is Boolean
			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and   (PrmPurchaseOrder not entered 
				or     PurchaseOrder		= PrmPurchaseOrder))

			Action Rules
				Empty Set Rules
				
					if (!PrmDetailsOnly)
						invoke DeleteNoInvoiceUpdateSet PayablesInvoiceAddOnCharge
							invoked.PrmCompany 			= PrmCompany
							invoked.PrmPayablesInvoice 	= PrmPayablesInvoice
							invoked.PrmPurchaseOrder 	= PrmPurchaseOrder

				Set Rules
					Exit Rules
						if (!PrmDetailsOnly)
							invoke DeleteNoInvoiceUpdateSet PayablesInvoiceAddOnCharge
								invoked.PrmCompany 			= PrmCompany
								invoked.PrmPayablesInvoice 	= PrmPayablesInvoice
								invoked.PrmPurchaseOrder 	= PrmPurchaseOrder

				Instance Rules
					invoke DeleteNoInvoiceUpdate
					
		AdminCorrectPurchaseOrderLineMatchedQuantity is a Set Action
			restricted
			Local Fields
				TotalMatchedQuantity is a Quantity
			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
			Instance Selection
				where (MatchObjectID entered
				and   PurchaseOrderReceipt not entered
				and   ExcessQuantityProcess.MatchNoReceipt)

			Action Rules
				Instance Rules
					initialize TotalMatchedQuantity
					for each PurchaseOrderLine.PayablesInvoiceDetailsForPOLineRel
						if (each.MatchObjectID entered
						and each.Suffix not entered
						and !each.PayablesInvoice.Status.Cancelled)

							if (each.VendorPriceUOM entered
							and PurchaseOrderLine.EnteredBuyUOM != each.VendorPriceUOM)	

								initialize UOMCalculation
								UOMCalculation.InputQuantity		= each.MatchedQuantity
								UOMCalculation.InputUOM				= each.VendorPriceUOM
								UOMCalculation.InputToUOM			= PurchaseOrderLine.EnteredBuyUOM
								UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
								TotalMatchedQuantity				= UOMCalculation.OutputQuantity
							else
								TotalMatchedQuantity += each.MatchedQuantity

					if (TotalMatchedQuantity != PurchaseOrderLine.MatchedQuantity)


						invoke UpdateFromMatch PurchaseOrderLine
							invoked.LocalUpdateFromMatchMatchedQuantity = (TotalMatchedQuantity - PurchaseOrderLine.MatchedQuantity)
							invoked.LocalUpdateFromMatchMatchedAmount	= MatchUnitCost
							invoked.LastUpdateBy						= actor
							invoked.LastUpdateDate						= current timestamp

						invoke SystemCreateLine PurchaseOrderLineComment
							invoked.Company				  = Company
							invoked.PurchaseOrder         = PurchaseOrder
							invoked.PurchaseOrderLine     = PurchaseOrderLine
							invoked.CommentTitle		  = "AdminCorrectMatchedQuantity"
							invoked.CommentType			  =	"O"
							invoked.CommentText			  =	"MatchedQuantityUpdated"

		CreateItemHistoryRecord is a Set Action
			restricted
			Parameters
				PrmSupplyManagementReport	is a SupplyManagementReport
				PrmVendorGroup				is like VendorGroup
				PrmVendor					is like Vendor
				PrmPayablesCompany			is a PayablesCompany
				PrmItemType					is an ItemType
					default label is "ItemType"
				PrmItem						is an Item
					default label is "Item"
				PrmFromDate					is Date
				PrmThruDate					is Date
				PrmPrintParameters			is Boolean
					default label is "PrintParameters"
				PrmPrintGraph				is Boolean
					default label is "PrintGraph"
				PrmIncludeInvoiceDetail		is Boolean
					default label is "IncludeInvoiceDetail"
			Parameter Rules
				PrmVendorGroup
					required
				PrmPayablesCompany
					required
				PrmFromDate
					required
				PrmThruDate
					required
					constraint (PrmThruDate >= PrmFromDate)
						"ToInvoiceDateCannotPrecedeFromInvoiceDate"
				PrmPrintParameters
					initial value is true

			Instance Selection
				where (not ItemType.Service
				and    PrmVendorGroup			 										= Company.VendorGroup
				and    PrmPayablesCompany 												= Company
				and   (PrmItemType 				not entered or PrmItemType 				= ItemType)
				and   (PrmItem     				not entered or PrmItem 					= Item)
				and   (PrmVendor   				not entered or PrmVendor 				= Vendor)
				and   (PrmFromDate not entered or PayablesInvoice.InvoiceDate 		   >= PrmFromDate)
				and   (PrmThruDate not entered or PayablesInvoice.InvoiceDate 		   <= PrmThruDate))

			Sort Order
				Company
				ItemType
				Item

			Action Rules
				Empty Set Rules
					invoke GenerateItemHistoryReport PrmSupplyManagementReport
							invoked.PrmHasItemHistoryByVendorRecord		= false				

				ItemType Set Rules
					Entrance Rules
						invoke Create ItemHistoryByVendorReport
							invoked.ItemGroup							= PrmVendorGroup
							invoked.SupplyManagementReport				= PrmSupplyManagementReport
							invoked.ItemHistoryByVendorReport.ItemType	= ItemType

				Item Set Rules
					Entrance Rules
						invoke Create ItemHistoryByVendorReport
							invoked.ItemGroup							= PrmVendorGroup
							invoked.SupplyManagementReport				= PrmSupplyManagementReport
							invoked.ItemHistoryByVendorReport.ItemType	= ItemType
							invoked.ItemHistoryByVendorReport.Item		= Item
				
				Set Rules
					Exit Rules
						invoke GenerateItemHistoryReport PrmSupplyManagementReport
							invoked.PrmHasItemHistoryByVendorRecord		= true
				
				Instance Rules

					initialize LocalSupplyManagementReport

					LocalSupplyManagementReport = PrmSupplyManagementReport

					if (ItemHistoryReportVendorRel not exists)
						invoke Create ItemHistoryByVendorReport
							invoked.ItemGroup							= PrmVendorGroup
							invoked.SupplyManagementReport				= PrmSupplyManagementReport
							invoked.ItemHistoryByVendorReport.ItemType	= ItemType
							invoked.ItemHistoryByVendorReport.Item		= Item
							invoked.ItemHistoryByVendorReport.Vendor	= Vendor


		CreateAssetDetails is an Instance Action
			valid when (CreateAssetDetailsValid)
			Action Rules
				constraint (!PurchaseOrderLineAssetDetailRel exists)
					"AssetDetailAlreadyExists"

				while (LocalCount < PurchaseOrderLine.Quantity)
					LocalCount += 1
					invoke Create PurchaseOrderLineAssetDetail
						invoked.Company				   			= Company
						invoked.PurchaseOrder		   			= PurchaseOrder
						invoked.PurchaseOrderLineAsset 			= PurchaseOrderLine



		TriggerPOCostMsgAlert is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (Company.FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPulseAlertRel.Enable)
			  		if(FSMBODConfigurationDetailPulseAlertRel.Enable)
				   		invoke TriggerPulseAlert FSMBODConfigurationPulseAlertRel
							invoked.PrmActorGroup 	= "BUYER"
							invoked.PrmMainXML 		= POCostMsgPulseAlertXML
							invoked.PrmDescription	= POCostMsgPulseAlertDescription
							invoked.PrmBODID		= DerivedPulseAlertBODID



		PopulateMemoAdjustTypeSet is a Set Action
			restricted
			Instance Selection
				where (PayablesInvoice.CreditOrDebitMemo
				and    MemoAdjustType not entered)
			Action Rules
				Instance Rules
					invoke PopulateMemoAdjustType

		PopulateMemoAdjustType is an Instance Action
			restricted
			Action Rules
				if (MemoAdjustType not entered
				and PayablesInvoice.CreditOrDebitMemo)
					if (PayablesInvoiceDetail = 1)
						MemoAdjustType = 1
					else
					if (PayablesInvoiceDetail = 2)
						MemoAdjustType = 2

		SplitInvoiceLine is an Instance Action
		    default label is "SplitInvoiceLine"
		    valid when (AllowSplitLine)
			Parameters
				PostDate		is Date
				ToLine			is a PurchaseOrderLine
				ToQuantity		is a Quantity
				ToUnitCost 		is a UnitCost

			Parameter Rules
				PostDate
					initial value is PayablesInvoice.DistributionDate
					default to PayablesInvoice.DistributionDate
					
				ToLine
					required
					constraint (EnteredQuantity > PurchaseOrderLine.OpenToMatchQuantity
					or          EnteredUnitCost > PurchaseOrderLine.OpenToMatchAmount)
						"CannotSplit;NeitherQuantityOrCostExceedsPurchaseOrderLine"
						
					constraint (Item = ToLine.Item)
					    "ItemMustMatchToLineItem"
					    
					constraint (ItemType = ToLine.ItemType)
					    "ItemTypeMustMatchToLineItemType"

					LocalPurchaseOrderLineNumber = ToLine

				ToQuantity
					initial value is DerivedSplitLineQuantity
					required
					constraint (ToQuantity <= EnteredQuantity)
					    "ToQuantityMustBeLessThanInvoiceLineQuantity"
					constraint (ToQuantity <= ToLine.OpenToMatchQuantity)
					    "ToQuantityMustBeLessThanOrEqualToPurchaseOrderLineOpenToMatchQuantity"
				ToUnitCost
					required
					initial value is DerivedSplitLineUnitCost
					constraint (ToUnitCost <= EnteredUnitCost)
					    "ToUnitCostMustBeLessThanOrEqualToEnteredUnitCost"
					constraint (ToQuantity * ToUnitCost < TotalDistributionAmount)
					    "ToUnitCostTimesToQuantityCannotExceedTotalDistributionAmount"
					if (PurchaseOrderLine.ServiceCode.Amount)
						constraint (ToUnitCost <= ToLine.OpenToMatchAmount)
						    "ToUnitCostMustBeLessThanOrEqualToPurchaseOrderLineUnitCost"
					constraint (EnteredQuantity = ToQuantity
					or          EnteredUnitCost = ToUnitCost)
					    "CannotSplitBothQuantityAndCost"

			Entrance Rules
				constraint (AllowSplitLine)
				    "ActionIsNotValid"

				for each DetailInvoiceDistributionsRel
				    constraint (each.AddOnCharge not entered)
				        "CannotSplitLineIfLineHasAddOnCharges"
				        
			Action Rules
			
			Exit Rules
			
				LocalPayablesInvoiceDistrib = last InvoiceDistributionsForPurchaseOrderLineRel.PayablesInvoiceDistribution
				LastTaxDistrib = last TaxDistributionsForPurchaseOrderLineRel.PayablesInvoiceDistribution


				for each InvoiceDistributionsForPurchaseOrderLineRel
				    invoke ReverseDistributionForUpdate each
				    	invoked.PrmPostDate = PostDate
					if  (each.PayablesInvoiceDistribution >= LocalPayablesInvoiceDistrib)
						end for each
					

				if (TaxCode entered)
					LocalTaxCode = TaxCode
					for each TaxDistributionsForPurchaseOrderLineRel
						if (each.IsNonLandedTaxDistribution)
						    invoke ReverseDistributionForUpdate each
						    	invoked.PrmPostDate = PostDate
							if  (each.PayablesInvoiceDistribution >= LocalPayablesInvoiceDistrib)
								end for each

				if (EnteredQuantity = ToQuantity)
					EnteredUnitCost -= ToUnitCost
				else
					EnteredQuantity -= ToQuantity


				include UpdateQuantityAmountAndCost


				include CommonUpdates
				ActionType = ActionType.UpdateType

				include ProcessDetailTax


				include CopyPOLineDistributionsRuleBlock

				if  (TaxCode entered)
					ProcessingTax = true
					include CopyPOLineDistributionsRuleBlock
					ProcessingTax = false


				invoke CreateFromPurchaseOrderLine PayablesInvoiceDetail
					assign result to NewInvoiceDetail
					fill in fields from this instance
						except invoked.PurchaseOrderLine
						except invoked.EnteredQuantity
						except invoked.EnteredUnitCost
						except invoked.MatchedQuantity
						except invoked.MatchUnitCost
					
					invoked.PurchaseOrderLine	= ToLine	
					invoked.EnteredQuantity		= ToQuantity
					invoked.EnteredUnitCost		= ToUnitCost
					invoked.BypassTaxDefault	= true

				if (TaxCode entered)
					TaxAdjustAmount = old TaxAmount - TaxAmount - NewInvoiceDetail.TaxAmount

	
					if (TaxAdjustAmount entered)
						TaxAmount += TaxAdjustAmount
						LocalTaxCode						= TaxCode

						if  (PurchaseOrderLine entered)
							invoke RestrictedUpdate last TaxDistributionsForPurchaseOrderLineRel
								invoked.DistributionAmount.CurrencyAmount += TaxAdjustAmount
								invoked.GLTransactionAmount				  += TaxAdjustAmount
						else
						if  (ContractLine entered)
							invoke RestrictedUpdate last TaxDistributionsForContractLineRel
								invoked.DistributionAmount.CurrencyAmount += TaxAdjustAmount
								invoked.GLTransactionAmount				  += TaxAdjustAmount
						else
						if  (PurchaseOrderLine not entered)
							invoke RestrictedUpdate last TaxDistributionsForMiscellaneousDetailRel
								invoked.DistributionAmount.CurrencyAmount += TaxAdjustAmount
								invoked.GLTransactionAmount				  += TaxAdjustAmount

		PurchaseOrderCostMessageCheck is an Instance Action
			restricted
			Action Rules
				for each MatchInvoiceMessageRel

					if  (each.MatchMessageOrigin.PoCost
					and  each.ApplicationAction.AdjustCost)
						invoke Delete PurchaseOrderReceiptInvoiceLinkMessageRel

					invoke Delete each

				include CheckTolerance
				include CommonUpdates

				if (PayablesInvoice.MatchStatus.POCostMessagesExist
				and !PayablesInvoice.OpenMatchInvoiceMessagesRel exists)
					invoke FastUpdate PayablesInvoice
						initialize invoked.MatchStatus
					invoke CheckAndCreateReconciliationQueueRecord PayablesInvoice
				else
				if (PayablesInvoice.MatchStatus.Unmatched
				and PayablesInvoice.OpenMatchInvoiceMessagesRel exists)
					invoke FastUpdate PayablesInvoice
						invoked.MatchStatus = 1
						
		MarkAsReviewed is an Instance Action
			default label is "Select"
			valid when (NotReviewed)
			Action Rules
				invoke FastUpdate ReconDetailRel
					invoked.SortSelect = 1

		MarkAsNotReviewed is an Instance Action
			default label is "Unselect"
			valid when (Reviewed)
			Action Rules
				invoke FastUpdate ReconDetailRel
					initialize invoked.SortSelect

		SetChargeback is an Instance Action
			valid when (AllowSetChargeback)
			Parameters
				PrmChargeback			is Boolean
				PrmChargebackReason		is a ProcurementReasonCode
			Parameter Rules
				PrmChargeback
					initial value is ReconDetailRel.CreateChargeback
				PrmChargebackReason
					initial value is ReconDetailRel.ChargebackReason
					if (PrmChargeback)
						required
			Action Rules
				if (PayablesInvoice.MatchReconQueueRel.MatchWork not entered
				or  PayablesInvoice.MatchReconQueueRel.MatchWork not exists)
					invoke CreateFromRecon MatchWork
						assign result to NewMatchWork
						invoked.Company							= Company
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.PurchaseOrder					= PurchaseOrder
						invoked.MatchPoint						= "1"
						invoked.ProcessMode						= "R"
						invoked.DocumentType					= "I"
						invoked.ReconciliationMatchLevel		= "DM"
						invoked.MatchLevel						= "DM"
						invoked.BypassBuildWorkFileConstraints	= true

					invoke FastUpdate PayablesInvoice.MatchReconQueueRel
						invoked.MatchWork					= NewMatchWork.MatchWork
						invoked.BuildStamp 					= current timestamp

					LocalMatchWork = NewMatchWork.MatchWork
				else
					LocalMatchWork = PayablesInvoice.MatchReconQueueRel.MatchWork

				invoke FastUpdate ReconDetailRel
					invoked.CreateChargeback = PrmChargeback
					invoked.ChargebackReason = PrmChargebackReason
					if (PrmChargeback = false)
						initialize invoked.ChargebackReason

		OverrideOneSourceTaxAmount is an Instance Action
			valid when (AllowOverrideOneSourceTaxAmount)
			disable multiple instance selection
			Parameters
				OverrideTaxAmount 	is an InternationalAmount
				    	
			Action Rules
				invoke Update PayablesInvoiceDetailTaxRel
				    invoked.OverrideTaxAmount = OverrideTaxAmount
			Exit Rules 
				invoke InvoiceUpdate PayablesInvoice 
				

































































		PurgePayablesInvoiceDetail is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is like PayablesInvoice

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				include deleted records
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Action Rules
				Set Rules
						Exit Rules
				Instance Rules
					invoke PurgeDetailRecords
		
		InvoicedNotReceivedReport is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup  		is a FinanceEnterpriseGroup
				PrmCompany                 		is a PayablesCompany
				PrmCompanyGroup					is a GeneralLedgerCompanyGroup
				PrmVendorRange					is a VendorNumberRange
				PrmSkipDays            	    	is Numeric 3
			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup entered)
						cannot be entered
							"CannotEnterBothGlobalLedgerCompanyGroupAndCompany"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterBothGlobalLedgerCompanyGroupAndCompany"

			Local Fields
				LocalInvoicedNotReceivedResultView	is an InvoicedNotReceivedResult view

			Instance Selection
				where (!IsMatched
				and    Status.Unreleased 
				and   !PayablesInvoice.InterfaceInProcess
				and   !PurchaseOrder.Dropship			
				and   !ItemType.Service
				and   !PurchaseOrderLine.CostOption.NoCharge
				and    (PrmCompany not entered
				or      Company	= PrmCompany)
				and	    (PrmCompanyGroup	not entered
				or      (PrmCompanyGroup 	entered
				and      GeneralLedgerCompanyGroup		entered
				and      GeneralLedgerCompanyGroup = PrmCompanyGroup
				and      GLCompanyGroupMemberRelExists))
				and    (PrmVendorRange not entered
				or	    Vendor within PrmVendorRange))

			Action Rules
				Empty Set Rules
					invoke Create InvoicedNotReceivedResult
						assign result to LocalInvoicedNotReceivedResultView
						invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
						invoked.PrmCompany						= PrmCompany
						invoked.PrmCompanyGroup					= PrmCompanyGroup
						invoked.PrmVendorRange					= PrmVendorRange
						invoked.PrmSkipDays            	    	= PrmSkipDays
						invoked.ProcessingComplete 				= true

				Set Rules
					Entrance Rules

						invoke Create InvoicedNotReceivedResult
							assign result to LocalInvoicedNotReceivedResultView
							invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
							invoked.PrmCompany						= PrmCompany
							invoked.PrmCompanyGroup					= PrmCompanyGroup
							invoked.PrmVendorRange					= PrmVendorRange
							invoked.PrmSkipDays            	    	= PrmSkipDays

					Exit Rules
						invoke FastUpdate LocalInvoicedNotReceivedResultView.InvoicedNotReceivedResult
							invoked.ProcessingComplete = true


				Instance Rules
				
					LocalInvoicedNotReceivedResult = LocalInvoicedNotReceivedResultView.InvoicedNotReceivedResult

					if (PrmSkipDays entered)
						LocalDaysDiff = current date - PayablesInvoice.DueDate


					if 	 (PrmSkipDays entered
					and  (LocalDaysDiff < 0   
					or    LocalDaysDiff <= PrmSkipDays))

						NextSentence = true
					else
			        if  (!PayablesInvoice.Status.Cancelled
		    	    and  !PayablesInvoice.LinkedToCancelledPOInvoice
					and   HasINRQuantity)
						invoke Create InvoicedNotReceivedResultLine
							invoked.InvoicedNotReceivedResult = LocalInvoicedNotReceivedResult
							invoked.Company 				= Company
							invoked.PayablesInvoice 		= PayablesInvoice
							invoked.PurchaseOrder			= PurchaseOrder
							invoked.PurchaseOrderLine		= PurchaseOrderLine
							invoked.Contract 				= Contract
							invoked.ContractLine			= ContractLine
							invoked.PayablesInvoiceDetail 	= PayablesInvoiceDetail
							invoked.INRQuantity				= DerivedINRQuantity


			
							
