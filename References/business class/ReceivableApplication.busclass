ReceivableApplication is a BusinessClass
	owned by ar
	prefix is ARA
	classic name is ARAPPLIED

	Ontology
		symbolic key is ReceivableApplication
			classic set name is ARASET1
			classic name for ReceivableApplication.BatchNumber is BATCH-NBR
			classic name for ReceivableApplication.ApplicationSequence is APP-SEQ

	Patterns
		implements StaticJava
		disable AuditIndex
		implements Archivable

	Persistent Fields

		Status								is Numeric size 1
			States
				UnreleasedCashApplication	value is 0
				RequiresAuditListing		value is 2
				AvailableForPosting			value is 4
				ApplicationPosted			value is 5
		DepositDate							is an ExchangeDate
		ApplicationCurrency					is a Currency
			classic name is APP-CURR-CD
		ApplicationAmount					is a FinanceCurrencyAmountGroup
			default label is "AppliedAmount"
			sql prefix is APP
			classic name for ApplicationAmount.CurrencyAmount is ORIG-APP-AMT
			classic name for ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount is APPLD-AMT
		AdjustmentSequence
			classic name is ADJ-SEQ
		CreditTransaction














		BillOfExchangeCancelSequence		is Numeric size 4
			classic name is CR-CANCEL-SEQ
		CreditAppliedSequence				is a CrAppSeq
			classic name is CR-APP-SEQ





		CreditAdjustmentSequence			is Numeric size 3
			classic name is CR-ADJ-SEQ
		BaseDebitCreditAdjustAmount			is an InternationalAmount
			classic name is ADJ-AMT
			precision is Company.Currency.NumberOfDecimals
		ReceivableOperator
			classic name is OPR-CODE
		GeneralLedgerDate					is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		ReceivableGeneralLedgerCode
			classic name is AR-CODE
			default label is "ReceivableGlobalLedgerCode"
		GLOffsetCode						is like ReceivableGeneralLedgerCode
			default label is "GlobalLedgerOffsetCode"
			classic name is OFFSET-CODE
		ApplicationSource					is AlphaUpper size 1
			classic name is APP-SOURCE
			States
				AutoCashApplication			value is "A"
				Converted					value is "C"
				ManualCashApplication		value is "M"
				ReversalOfApplications		value is "R"
				CrossReferencedMemoApplied	value is "X"
				BillOfExchangeDraft			value is "B"
				ElectronicFundsTransfer		value is "E"
				AutomaticWriteOff			value is "W"
				TransferToAP				value is "T"
				MixedSignedApplication		value is "S"
				GroupedMemo					value is "G"
				AdjustmentMaintenance		value is "J"
				MarkedAsPaid				value is "P"	
		Result								is a ResultFl
			classic name is RESULT-FL
		ApplicationCurrencyType				is AlphaUpper size 1
			classic name is APP-CURR
			States
				Base						value is "B"
				NonBase						value is "N"
				Mixed						value is "M"
		Reverse								is Boolean
			classic name is REVERSE-FL
		Prepayment
			classic name is PREPAY-FLAG
		RecordDeleted						is AlphaUpper size 1
			classic name is DELETE-FL
			States
				CreditMemoDeleted			value is "C"
				DebitMemoDeleted			value is "D"
				InvoiceDeleted				value is "I"
				PaymentDeleted				value is "P"
		DistributionSetNeedsReview			is Boolean 
		DistributionSetState				is AlphaUpper size 2 
			States
				NeedsPaymentApply 					value is "NP"
				CreatedFromPaymentApply 			value is "CP"
				NeedsRemittanceApply 				value is "NR"
				CreatedFromRemittanceApply 			value is "CR"
				CreatedFromWriteoffApply 			value is "CW"
				NeedsWriteoffApply 					value is "NW"
				CreatedFromCreditMemoApply			value is "CC"
				NeedsCreditMemoApply				value is "NC"
				NeedsSettlementDetailApply		  value is "NS"
				CreatedFromSettlementDetailApply	value is "CS"
				MustBeDeleted						value is "MD"
				NotApplicable						value is "NA"
		InvoiceFinanceCodeBlock				is a FinanceCodeBlock
		CreditFinanceCodeBlock				is a FinanceCodeBlock
		HasPaymentCashDetail				is Boolean
		AmdArObjId							is an ObjId
		AmdOffObjId							is an ObjId
		CreditAdjustAmount					is an InternationalAmount 
			classic name is CR-ADJ-AMT
		OriginatingInterfaceRun				is like ReceivablesInterfaceResult
		CashApplicationResult				is like CashApplicationResult
		ApplicationCloseResult
			delete ignored
		ReceivablesJobResult				is like ReceivablesJobResult

		AppliedAmount						is an InternationalAmount	
			classic name is ORIG-APP-AMT
			restricted													
		BaseDebitAppliedAmount				is an InternationalAmount	
			classic name is APPLD-AMT
			precision is Company.Currency.NumberOfDecimals
			restricted													
		CreditAppliedAmount					is an InternationalAmount	
			classic name is CR-ORIG-AP-AMT
			restricted													
		BaseCreditAppliedAmount				is an InternationalAmount	
			classic name is CR-APP-AMT
			precision is Company.Currency.NumberOfDecimals
			restricted													
		ApplicationID						is Numeric size 12
		ReversalSource						is AlphaUpper size 2
			States
				PaymentReversal				value is "PR"
				TransactionReversal			value is "TR"

	Transient Fields
		TransientAccountingEntity							is an AccountingEntity
			derive value from GeneralLedgerCompanyRel.AccountingEntity
		DebitCurrency										is a FromCurrency
			derive value from DerivedDebitCurrency
		TransientDebitCustomer								is like Customer	
			derive value from DebitCustomer
			default label is "Customer"

		CreateAdjustProject									is a Project
			derive value from FirstAdjustmentProject
		CreateDescription									is a Description
			derive value from FirstAdjustmentDescription
		TransientSkipAPSelectEdit							is Boolean
		CreateAdjustReason									is like ReceivableReason
			derive value from FirstAdjustmentReason
		CreateAdjustAmount									is an InternationalAmount
			derive value from TotalAdjustments
		TransientTotalAdjustmentsCredit						is an InternationalAmount	
			derive value from TotalAdjustmentsCredit
			default label is "AdjustAmount"
		CreateReceivableReasonType							is a ReceivableReasonType	
		AdjustAccount										is a FinanceCodeBlock
		TransientWriteoffARIncomeWithholdingCode			is AlphaUpper size 10	
		TransientWriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	

		SetToPosted											is Boolean
		SkipToleranceCheck									is Boolean
		EnteredAmount										is a CurrencyAmount





		BypassOpenAmountEdit								is Boolean
		BypassAutoAdjust									is Boolean
		TransientBypassEligibleCheck						is Boolean
		CrossCustomer										is Boolean
			derive value from CrossPaid
		TransientZeroAmountApplication						is Boolean
		TransientSetToReviewed								is Boolean
		TransientProrateRunStarted							is Boolean
		BypassGLDateEdit									is Boolean
		TransientOverApplyInvoice							is Boolean
		TransientSelectedForPaymentReversal					is Alpha 3
			States
				No							value is blank
					default label is "_"
				Yes							value is "Yes"
			derive value from SelectIndicator
		TransientSelectedForInvoiceReversal					is Alpha 3
			States
				No							value is blank
					default label is "_"
				Yes							value is "Yes"
			derive value from SelectIndicatorForInvoice
		TransientInvoiceDetailTypeForApplication						is an InvoiceDetailTypeForApplication 
			derive value from DerivedInvoiceDetailTypeForApplication
		TransientInvoiceDetailSequenceForApplication					is an InvoiceDetailSequenceForApplication 
			derive value from DerivedInvoiceDetailSequenceForApplication
		TransientReceivableApplicationSequenceForContext				is a ReceivableApplicationSequenceForContext 
			derive value from DerivedReceivableApplicationSequenceForContext
		TransientReceivableCompanyForContext	is a ReceivableCompanyForContext 
			derive value from DerivedReceivableCompanyForContext
		TransientReceivableBatchForContext	is a ReceivableBatchForContext 
			derive value from DerivedReceivableBatchForContext
		TransientReceivableInvoiceForContext 	is a ReceivableInvoiceForContext 
			derive value from DerivedReceivableInvoiceForContext
		TransientFundDistributionSetState		is a FundDistributionSetState 
			derive value from DerivedFundDistributionSetState
		TransientDistributionSetState			is Numeric size 1 
			States
				OutOfBalance				value is 1
				ReadyForProcessing 			value is 2
				AwaitingApplicationClose 	value is 3
				Posted						value is 4
			derive value from DerivedDistributionSetState
		TransientFunctionalType  	is AlphaUpper 1  
			States
				CreditMemo 			    value is C
				DebitMemo  			    value is D
				Invoice    			    value is I
				CustomerPayment		    value is P
					default label is "CustomerPayment"
				BillOfExchangePayment	value is B
					default label is "BillOfExchangePayment"
			derive value from ReceivableApplication.TransType
		TransientFunctionalCreditType  	is AlphaUpper 1  
			States
				CreditMemo 			    value is C
				DebitMemo  			    value is D
				Invoice    			    value is I
				CustomerPayment		    value is P
					default label is "CustomerPayment"
				BillOfExchangePayment	value is B
					default label is "BillOfExchangePayment"
			derive value from ReceivableApplication.CreditTransaction.CreditType
		TransientAttachment				is an Attachment
		TransientApplicationOnHoldIndicator 	is Numeric size 1
			States
				AdjustmentNeedsAnAttachmentAndReview	value is 1
				AdjustmentNeedsAnAttachment 			value is 2
				AdjustmentNeedsReview 					value is 3
				DistributionNeedsReview					value is 4
			derive value from DerivedApplicationOnHoldIndicator
		TransientBaseApplicationAmount		is like InternationalAmount
			derive value from DerivedBaseApplicationAmount	
		TransientReversedApplicationAmount	is like CurrencyAmount
			derive value from DerivedReversedApplicationAmount
		TransientReversalCurrency			is like Currency
			derive value from DerivedReversalCurrency
		TransientReversalDate				is Date
			derive value from DerivedReversalDate
		TransientReversalOperator			is like ReceivableOperator
			derive value from DerivedReversalOperator
		TransientBaseApplicationAmountForErrorResult		is like InternationalAmount
			derive value from DerivedBaseApplicationAmountForErrorResult	
		TransientReversedApplicationAmountForErrorResult	is like CurrencyAmount
			derive value from DerivedReversedApplicationAmountForErrorResult
		TransientReversalCurrencyForErrorResult				is like Currency
			derive value from DerivedReversalCurrencyForErrorResult
		TransientReversalDateForErrorResult					is Date
			derive value from DerivedReversalDateForErrorResult
		TransientReversalOperatorForErrorResult				is like ReceivableOperator
			derive value from DerivedReversalOperatorForErrorResult





	Local Fields
		LocalCreateAdjustmentAmount			is an InternationalAmount
		LocalCurrencyTable					is a CurrencyTable
		NewReceivableApplication			is a ReceivableApplication view
		NewReceivableInvoice				is a ReceivableInvoice view
		NewInvoiceDetail					is a ReceivableInvoiceDetail view
		NewOverApplicationReceivableInvoice	is a ReceivableInvoice view
		NewOverApplicationInvoiceDetail		is a ReceivableInvoiceDetail view
		NewGLDistribution					is a ReceivableGLDistribution view
		LocalCreditTotal					is an InternationalAmount
		LocalDebitTotal						is an InternationalAmount
		LocalReceivableInvoiceDetailGroup	is a ReceivableInvoiceDetailGroup
		AutoAdjustReason					is like ReceivableReason
		AutoAdjustAmount					is an InternationalAmount
		I1									is Numeric 3
		CurrencyDateWork					is a ReceivableExchange
		CurrencyWork						is a FromCurrencyExchangeGroup
		LocalCurrency						is like Currency
		WorkAmount							is an InternationalAmount
		Work2Amount							is an InternationalAmount
		LocalPaymentApplicationAmount		is like InternationalAmount
		LocalPaymentAmountRemaining			is like InternationalAmount
		LocalIsPaymentCashDetail			is Boolean
		LocalDetailNumber					is Numeric 3
		LocalCashDetailAmountGroup			is like FinanceCurrencyAmountGroup
		LocalSumCashDetailAmountGroup		is like FinanceCurrencyAmountGroup
		NewCashDetailApplication			is a CashDetailApplication view
		LocalSetFinanceCodeBlockComponents	is a SetFinanceCodeBlockComponents
		NextSentence						is Boolean

		LocalCompany						is like ReceivableCompany
		LocalProcessLevel					is like ReceivableProcessLevel
		LocalReceivableTransactionSummary	is AlphaUpper size 2
			States
				BeginningBalance	value is "05"

		LocalFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		LocalApplicationCloseResult			is like ApplicationCloseResult
		LocalAppCloseResult					is like ApplicationCloseResult
		DbCompany							is like Company
		DbCustomer							is like Customer
		DbTransType							is like TransType
		DbInvoice							is like Invoice
		DbSequence							is like Sequence
		DbBatch								is like BatchNumber
		DbAppSeq							is like ApplicationSequence
		LocalGeneralLedgerCompanyGroup		is a GeneralLedgerCompanyGroup



		TermsCalc							is a ReceivableTerms
		CalculateTax
		LocalCalculateTaxExecuted			is Alpha 1




		PmtGainLoss							is Boolean
		PmtGainLossAmount					is like InternationalAmount
		IsCredit							is Boolean





		WsReverseTranAmount					is like InternationalAmount
		WsReverseBaseAmount					is like InternationalAmount
		WsAdjTranRevAmount					is like InternationalAmount
		WsAdjBaseRevAmount					is like InternationalAmount

		LocalAppSource						is Alpha 2

		WsCreditRate						is an OrigRate


		WsRevFlag							is Alpha 1

		WsAmdTransDate						is Date
		CreditAdjust						is Boolean







		Ws190TranAmount						is like InternationalAmount

		Ws190RoundAmount					is like InternationalAmount
		WsToCompanyBaseAmount				is like InternationalAmount
		WsDistSource						is AlphaUpper size 1
		WsFromDate							is Date
		WsAutoReverseUnrealizedGainLoss		is AlphaUpper 1
		WsUpdateSum							is Alpha 2
		WsMiscIAmt							is like InternationalAmount
		WsMiscAmount						is like InternationalAmount

		DoTaxHistory						is Boolean
		LocalUsePaymentDate					is Boolean
		SendTaxable							is Boolean

		WsDiscountPercent					is like Percent
		WsTaxRecoveryAmount					is like InternationalAmount
		WsBaseAmount						is like InternationalAmount
		WsHoldTaxableAmount					is like InternationalAmount
		WsHoldAmdDistSeq					is like SeqNbr
		WsAraTranAppldAmt					is like InternationalAmount
		WsAraBaseAppldAmt					is like InternationalAmount

		WsAppAmtSave						is like InternationalAmount
		Ws190AppliedAmountSave				is like InternationalAmount




		WsRecalcFlag						is Alpha 1
		WsRecalcTranAmt1					is like InternationalAmount
		WsRecalcTranAmt2					is like InternationalAmount	

		LocalTrigger						is Alpha size 1
		CalculateReceivableYearPeriod

		NewCompany							is like Company
		NewInvoiceType						is like ReceivableInvoiceDetailType
		NewInvoice							is like Invoice
		NewSequence							is like Sequence

		ArwsCompany							is like Company
		ArwsCustomer						is like Customer
		ArwsTransType						is like TransType
		ArwsGlDate							is Date
		ArwsxTranAmount						is like InternationalAmount
		ArwsDisputeAmount					is like InternationalAmount
		ArwsDay								is Numeric 9
		ArwsDay2							is Numeric 9
		ArwsChargeback						is Alpha 1
		ArwsResult							is Alpha 1
			States
				DelinquentPaidInFull		value is "D"
				PaidInFull					value is "F"
				CalculateIPADBTOnly			value is "C"
				Reversal					value is "R"
				Writeoff					value is "W"
				UpdateDispute				value is "S"
				NewDispute					value is "Z"

		WsBaseDistributionAmount			is like InternationalAmount
		WsTranDistributionAmount			is like InternationalAmount
		WsGeneralLedgerAccount				is like FinanceCodeBlock
		WsAdjGeneralLedgerAccount			is like FinanceCodeBlock
		WsUseAcctUnitOverride				is Boolean
		WsAmdDescription					is like Description
		InitBatch							is Boolean
		WsUseCreditSide						is Boolean
		WsUseTranDate						is Boolean
		WsAuditSum							is Alpha 2
		OverrideAccountingUnit				is like AccountingUnit

		WsDocumentCounter					is Numeric 5
		WsCbsCounter						is Numeric 5

		GainLossCalculation
		LocalNumberOfDecimals				is Numeric 1
		LocalCurrencyCalculationGroup		is a CurrencyCalculationGroup
		NegativeFinanceCurrencyAmount
		LocalAppliedDetailPercentage		is Decimal 31.15
		LocalBoolean						is Boolean
		LocalGainLossMessage				is Alpha 100
		LocalAccumulatedGainLoss			is a FinanceCurrencyAmountGroup
		LocalTaxRecovery					is Boolean

		LocalPrmComment						is a Description

		LocalGLAccount						is a FinanceCodeBlockFull
		LocalPaymentCashDetailAccount		is a FinanceCodeBlock
		
		LocalDescription					is like Description
		LocalNegative						is Boolean

		LocalSystemAccount					is a SystemAccount
		TranDateFlag						is Boolean

		LocalAbsoluteMax					is like InternationalAmount
		LocalActualMax						is like InternationalAmount
		LocalCurrAbsoluteMax				is like InternationalAmount
		LocalDifference						is like InternationalAmount
		LocalPaymentAmount					is like InternationalAmount
		LocalInvoiceAmount					is like InternationalAmount
		LocalIsFunctional					is Boolean
		ReceivablesGainLossCalculation
		LocalDistributionPercentage			is Decimal size 31.15
		LocalFlipAmount						is Boolean
		LocalAdjFEG							is like FinanceEnterpriseGroup
		LocalAdjCompany						is like ReceivableCompany
		LocalAdjCreateDate					is Date
		LocalAdjUnits						is like Unit
		LocalAdjReasonOverShort				is like ReceivableAdjustmentReasonType
		LocalAdjustmentReasonType			is a ReceivableAdjustmentReasonType
		LocalBaseAutoAdjustAmount			is like InternationalAmount
		UsePaymentDateForAdjustDistribution	is Boolean
		LocalNegate							is Boolean
		LocalChargeback						is Boolean
		LocalChargebackSummary				is Boolean
		LocalCanProrateDistributions		is Boolean

		LocalDetailLineNumber				is Numeric 15
		LocalReceivableProcessLevel 		is AlphaUpper size 5

		LocalRIDetailAmount					is like InternationalAmount
		LocalRIDetailBaseAmount				is like InternationalAmount
		LocalAlternateCurrencyAmount 		is like InternationalAmount
		LocalAlternateCurrencyAmount2		is like InternationalAmount
		LocalDesc							is Alpha size up to 60
		LocalStatus							is Numeric size 1
		LocalFunctionalCurrencyRate			is Decimal size 31.15
		LocalAlternateCurrencyRate			is Decimal size 31.15
		LocalAlternateCurrencyRate2			is Decimal size 31.15
		LocalRIDPaymentSeq					is Numeric 15
		LocalDelimiter						is Alpha 9
		LocalOriginalCurrency				is AlphaUpper size 5
		LocalRTBaseCurrency					is AlphaUpper size 5
		LocalFunctionalCurrency				is AlphaUpper size 5
		LocalAlternateCurrency				is AlphaUpper size 5
		LocalAlternateCurrency2				is AlphaUpper size 5
		LocalReceivableTransType			is Alpha 25
		LocalLineItemXML					is XMLDocument


		LocalSkipNegative					is Boolean
		LocalGLCompany						is like ReceivableCompany
		LocalAdjGLCompany					is like ReceivableCompany
		LocalOutputAndOutputDueTax			is Boolean







		LocalAnswer								is Boolean

		SumOfReceivableApplicationAdjustmentSetAmountsDone						is Boolean	
		SumOfReceivableApplicationAdjustmentSetAdjustmentAmountCurrencyAmount	is an InternationalAmount	
		SumOfReceivableApplicationAdjustmentSetCreditAdjustAmount				is an InternationalAmount	
		LocalAllocationType			is a AllocationType
		LocalPaymentTaxRate						is like ChrgRate
		LocalInvoiceTaxRate						is like ChrgRate
		InvoiceTaxAmount					is like InternationalAmount
		PaymentTaxAmount					is like InternationalAmount
		LocalSkipDeleteAll					is Boolean

		NativeLPLBODTrigger			is Boolean
		NativeLPLRTBODTrigger		is Boolean
		LocalTriggerFrom			is Alpha size 100

	 

		LocalLineNumber 							is Numeric size 9
		LocalTaxSequenceNumber						is Numeric size 9
		LocalMainUserTemplate						is Alpha size 250

		LocalClaimsAndLiabilitiesHeader				is like ClaimsAndLiabilitiesHeader
		LocalCompanyCountry							is like Country		
		LocalConfigurationParameter					is Alpha size up to 200
		BLLineTaxCodesArray 						is a TaxCodeArray
		LocalBLLineBasisAmount 						is a BLLineBasisAmountArray
		LocalIterator								is Numeric 9
		TaxFound									is Boolean
		LocalLengthArray							is Numeric size 9
		LocalTaxInvoiceCurr							is a Currency
		LocalTaxPayCurr								is a Currency
		LocalCurrencyMX								is a Currency
		LocalTaxRepCurrOne							is a Currency	
		LocalCurrExchangeRate 						is Decimal size 19.3
		LocalRepCurrRate							is Decimal size 19.3
		LocalBLLineRate								is Decimal size 7.5	
		LocalTaxableAmountMX						is Decimal size 19.3
		LocalSequenceNumber							is Numeric size 9
		ReceivableTrackerMxTaxXML					is XMLDocument
		LocalMxTaxableAmount						is Decimal size 15.2
		LocalBLLineTaxCode							is AlphaUpper size 15
		LocalPrepaymentTaxRate						is Percent size 7.5				
		LocalPrepaymentTaxAmount					is an InternationalAmount		
		LocalBeforeGSTAmount						is an InternationalAmount		
		LocalPrepaymentTaxDistribution				is Boolean						
		LocalCreateTaxTransaction					is Boolean						
		
	Context Fields

		TransactionDateRange				is a DateRange
		DepositDateRange					is a DateRange3
		DaysPaidLateRange					is a NumberRange
		ContextReceivableCompany			is a ReceivableCompany
		ContextReceivableInvoice			is a ReceivableInvoice
		ContextReceivableInvoiceDetail		is a ReceivableInvoiceDetail
		ContextReceivablePayment			is a ReceivablePayment
		ContextReceivablePaymentHeader		is a ReceivablePaymentHeader
		ContextReceivableProcessLevel		is a ReceivableProcessLevel
		DueDateRange						is a DateRange
		ApplicationPostDateRange			is a DateRange2
		ContextCrossPaid					is a YesOrNo


	Field Rules


		Company
			default to ContextReceivableInvoiceDetail.Company
			default to ContextReceivablePayment.Company
			required

		ReceivableApplication.TransType
			default to ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
			default to ContextReceivablePayment.TypeOfPayment
			required

		ReceivableApplication.Invoice

			default to ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
			default to ContextReceivablePayment.PaymentNumber
			required

		ReceivableApplication.PaymentSeq
			default to ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
			default to ContextReceivablePayment.TypeOfPayment
			required

		ReceivableApplication.BatchNumber
			default to ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.BatchNumber
			default to ContextReceivablePayment.ReceivablePaymentHeader
			required

		CreditTransaction.CreditCompany
			required
			default to ContextReceivablePayment.Company
			cannot be changed

		CreditTransaction.CreditBatch
			required
			default to ContextReceivablePayment.ReceivablePaymentHeader
			cannot be changed

		CreditTransaction.CreditSequence
			required
			default to ContextReceivablePayment.ReceivablePayment
			cannot be changed

		CreditTransaction.CreditType
			required
			default to ContextReceivablePayment.TypeOfPayment
			cannot be changed

		CreditTransaction.CreditNumber

			required
			default to ContextReceivablePayment.PaymentNumber
			cannot be changed

		AdjustmentSequence
			cannot be changed

		CreditTransaction.CreditCustomer
			cannot be changed

		CreditTransaction.CreditSuffix
			cannot be changed

		BillOfExchangeCancelSequence
			cannot be changed

		CreditAdjustmentSequence
			cannot be changed

		DepositDate
			default to ContextReceivablePaymentHeader.DepositDate
			default to ReceivablePaymentRel.DepositDate
			default to ContextReceivableInvoiceDetail.TransactionDate
			default to ReceivableCreditInvoiceDetailRel.TransactionDate

		ReceivableGeneralLedgerCode
			default to ContextReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
			default to ContextReceivableInvoiceDetail.ReceivableGeneralLedgerCode
			cannot be changed

		GLOffsetCode
			cannot be changed

		ApplicationSource
			if (PaymentInContext or InvoiceInContext)
				default to "M"
			cannot be changed

		ApplicationCurrency
			cannot be changed

		ApplicationCurrencyType










			if (ReceivableApplication.TransType.CustomerPayment)
				if  (CreditTransaction.CreditType.Payment)
					if  (ReceivablePaymentDebitRel.OriginalCurrency  = ReceivablePaymentRel.OriginalCurrency
					and  ReceivablePaymentDebitRel.OriginalCurrency	 = ReceivablePaymentDebitRel.Company.Currency)
						ApplicationCurrencyType = "B"
					else
					if  (ReceivablePaymentDebitRel.OriginalCurrency  = ReceivablePaymentRel.OriginalCurrency
					and  ReceivablePaymentDebitRel.OriginalCurrency	!= ReceivablePaymentDebitRel.Company.Currency)
						ApplicationCurrencyType = "N"
					else
						ApplicationCurrencyType = "M"
				else
					if  (ReceivablePaymentDebitRel.OriginalCurrency  = ReceivableCreditInvoiceDetailRel.OriginalCurrency
					and  ReceivablePaymentDebitRel.OriginalCurrency	 = ReceivablePaymentDebitRel.Company.Currency)
						ApplicationCurrencyType = "B"
					else
					if  (ReceivablePaymentDebitRel.OriginalCurrency  = ReceivableCreditInvoiceDetailRel.OriginalCurrency
					and  ReceivablePaymentDebitRel.OriginalCurrency	!= ReceivablePaymentDebitRel.Company.Currency)
						ApplicationCurrencyType = "N"
					else
						ApplicationCurrencyType = "M"
			else
				if  (CreditTransaction.CreditType.Payment)
					if  (ReceivableInvoiceDetailRel.OriginalCurrency  = ReceivablePaymentRel.OriginalCurrency
					and  ReceivableInvoiceDetailRel.OriginalCurrency  = ReceivableInvoiceDetailRel.Company.Currency)
						ApplicationCurrencyType = "B"
					else
					if  (ReceivableInvoiceDetailRel.OriginalCurrency  = ReceivablePaymentRel.OriginalCurrency
					and  ReceivableInvoiceDetailRel.OriginalCurrency != ReceivableInvoiceDetailRel.Company.Currency)
						ApplicationCurrencyType = "N"
					else
						ApplicationCurrencyType = "M"
				else
					if  (ReceivableInvoiceDetailRel.OriginalCurrency  = ReceivableCreditInvoiceDetailRel.OriginalCurrency
					and  ReceivableInvoiceDetailRel.OriginalCurrency  = ReceivableInvoiceDetailRel.Company.Currency)
						ApplicationCurrencyType = "B"
					else
					if  (ReceivableInvoiceDetailRel.OriginalCurrency  = ReceivableCreditInvoiceDetailRel.OriginalCurrency
					and  ReceivableInvoiceDetailRel.OriginalCurrency != ReceivableInvoiceDetailRel.Company.Currency)
						ApplicationCurrencyType = "N"
					else
						ApplicationCurrencyType = "M"

			cannot be changed

		Reverse
			cannot be changed

		ApplicationAmount



			if  ((action type.Update
			and  (!ApplicationAmount.FunctionalAmount.EnteredCurrencyRate changed
			or	  !ApplicationAmount.AlternateAmount.EnteredCurrencyRate changed
			or	  !ApplicationAmount.AlternateAmount2.EnteredCurrencyRate changed
			or	  !ApplicationAmount.AlternateAmount3.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount1.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount2.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount3.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount4.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount5.EnteredCurrencyRate changed))
			or   (action type.Create
			and  (ApplicationAmount.FunctionalAmount.EnteredCurrencyRate entered
			or	  ApplicationAmount.AlternateAmount.EnteredCurrencyRate entered
			or	  ApplicationAmount.AlternateAmount2.EnteredCurrencyRate entered
			or	  ApplicationAmount.AlternateAmount3.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount1.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount2.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount3.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount4.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount5.EnteredCurrencyRate entered)))
				ApplicationAmount.KeepRateOnly = true

			if (!Writeoff
			or   ApplicationSource.GroupedMemo)
				if  (ApplicationAmount.CurrencyAmount not entered)
					ApplicationAmount.CurrencyAmount = EnteredAmount

			if (!ApplicationSource.ReversalOfApplications
			and !ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo
			and !TransientZeroAmountApplication)
				constraint (ApplicationAmount.CurrencyAmount >= 0)
					"ApplicationAmount<ApplicationAmount.CurrencyAmount>CannotBeNegative"	

			if (GainLossAdjustmentRel exists)
				cannot be changed
					"CannotChangeAppliedAmount;GainLossAdjustmentExists;DeleteThroughPaymentBatchReview"

			if (!Writeoff
			and !ApplicationSource.GroupedMemo
			and !TransientZeroAmountApplication)
				constraint (ApplicationAmount.CurrencyAmount entered)
					"AppliedAmountIsRequired"




		CreditTransaction













			CreditTransaction.CreditApplicationAmount.KeepRateOnly								= true
			if (!TransientZeroAmountApplication)
				if  (!ApplicationSource.ReversalOfApplications
				and  !ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)
					constraint (CreditTransaction.CreditApplicationAmount.CurrencyAmount >= 0)
						"ApplicationAmount<CreditTransaction.CreditApplicationAmount.CurrencyAmount>CannotBeNegative"	

		CreditAppliedSequence
			cannot be changed
			if  (Writeoff)
				CreditAppliedSequence = ReceivableApplication.ApplicationSequence
			else
			if  (CreditTransaction.CreditType.Payment)
				autosequence using ReceivablePaymentRel.LastApplicationSequence
			else
			if (CreditIsInvoice)
				autosequence using ReceivableCreditInvoiceDetailRel.LastApplicationSequence
			else
			if  (CreditTransaction.CreditType.BillOfExchangePayment)
				autosequence using BillOfExchangePaymentRel.LastApplicationSequence


		GeneralLedgerDate
			required
			if (Company.DefaultApplicationDate.LatestTransactionPostDate)	
				if (ReceivableInvoiceDetailRel.GeneralLedgerDate > DerivedCreditTransactionPostDate)
					default to ReceivableInvoiceDetailRel.GeneralLedgerDate
			if (Company.DefaultApplicationDate.SystemDate)
				default to current corporate date
			default to ContextReceivablePayment.GeneralLedgerDate
			default to ReceivablePaymentRel.GeneralLedgerDate
			default to ContextReceivableInvoiceDetail.GeneralLedgerDate
			default to ReceivableCreditInvoiceDetailRel.GeneralLedgerDate

			if (action type.Create				
			or  GeneralLedgerDate changed)		
				if (!BypassGLDateEdit
				and (CompanySystemClosingControlRel.Control
				and  Company.VerifyGLDateWithinGLDateRange))
					constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
						"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
				if (CreditTransaction.CreditCompany != Company)
					if (CreditCompanySystemClosingControlRel.Control and CreditTransaction.CreditCompany.VerifyGLDateWithinGLDateRange)
						constraint (GeneralLedgerDate within CreditCompanySystemClosingControlRel.ValidEntryDate)
							"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<CreditTransaction.CreditCompany>;ValidDateRangeIs<CreditCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CreditCompanySystemClosingControlRel.ValidEntryDate.End>"


		ReceivableOperator
			default to actor
			default to ContextReceivablePayment.ReceivableOperator
			default to actor
			if (Company.CashOperatorRequired)
				constraint (ReceivableOperatorRel exists)
					"ReceivableOperator-Company<Company>Operator<ReceivableOperator>-DoesNotExist"	
				constraint (ReceivableOperatorRel.ActiveStatus.Active)
					"ReceivableOperator-Company<Company>Operator<ReceivableOperator>-IsNotActive"	


		Prepayment
			default to ContextReceivablePayment.Prepayment
			cannot be changed
			if (CreditTransaction.CreditType.Payment or CreditTransaction.CreditType.CreditMemo or CreditTransaction.CreditType.BillOfExchangePayment)
				if (ReceivableInvoiceDetailRel.CustomerInvoiceDistributionRel exists)
					Prepayment = Prepayment.Prepayment
				else
				if (CreditIsInvoice)
					if (ReceivableCreditInvoiceDetailRel.CustomerInvoiceDistributionRel exists)
						Prepayment = Prepayment.Prepayment

		CreateAdjustReason
			constraint (CreateAdjustReason != "CURR")
				"CURRIsAReseverdReasonCode"


	Rule Blocks
		RoundAmountsForChargebackSummary
			initialize LocalCurrencyCalculationGroup
			if  (CreditTransaction.CreditType.Payment)
				LocalCurrencyTable											= ReceivablePaymentRel.ReceivablePaymentHeader.CurrencyTable
				LocalCurrencyCalculationGroup.FromCurrency					= ReceivablePaymentRel.OriginalCurrency
				if (LocalChargebackSummary)
					LocalCurrencyCalculationGroup.ExchangeDate					= GeneralLedgerDate
				else
					LocalCurrencyCalculationGroup.ExchangeDate					= ReceivablePaymentRel.DepositDate
			else
				LocalCurrencyTable											= ReceivableCreditInvoiceDetailRel.ReceivableInvoiceRel.CurrencyTable
				LocalCurrencyCalculationGroup.FromCurrency					= ReceivableCreditInvoiceDetailRel.OriginalCurrency
				if (LocalChargebackSummary)
					LocalCurrencyCalculationGroup.ExchangeDate					= LocalAdjCreateDate
				else
					LocalCurrencyCalculationGroup.ExchangeDate					= ReceivableCreditInvoiceDetailRel.DerivedExchangeDate
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyRate = ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyRate	 = ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyRate = ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyRate = ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate
				LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyRate		 = ReceivableCreditInvoiceDetailRel.InvoiceAmount.ProjectAmount.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			if (LocalNegate)
				LocalCurrencyCalculationGroup.CurrencyAmount			= each.CreditAdjustAmount * -1
			else
				LocalCurrencyCalculationGroup.CurrencyAmount			= each.CreditAdjustAmount
			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= Company.AccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= Company.AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= Company.AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFive
			LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency	= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency	= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency		= each.DistributionAccount.Project.Currency	

			if  (CreditTransaction.CreditType.Payment)
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= ReceivablePaymentRel.CurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
				LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate
				LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyRate

			LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
			LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount

		EligibleForSelection
			if (ReceivableInvoiceApplyReverseHeaderRel.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "C")
				for each ReceivableInvoiceApplyReverseHeaderRel.PaymentApplicationsRel
					constraint (each.ReceivableApplicationInvoiceRel not exists)
						"CannotReverseCreditMemoApplicationsWithoutFirstReversingInvoiceApplicationsFor_\Payment_\Company<CreditTransaction.CreditCompany>,_\Payment_\Batch<CreditTransaction.CreditBatch>,_\Customer<CreditTransaction.CreditCustomer>,And_\Payment_\Number<CreditTransaction.CreditNumber>"





		ReverseUnpostedApplication
			if (CreditTransaction.CreditType.Payment)
				constraint (!ReceivablePaymentRel.Transferred)
					"CannotDelete;ReceivablePaymentForCompany<CreditTransaction.CreditCompany>,PaymentBatch<CreditTransaction.CreditBatch>,AndPayment<CreditTransaction.CreditNumber>TransferEstablishedANewPayment"	
				constraint (!ReceivablePaymentRel.Cancelled)
					"CannotDelete;ReceivablePaymentForCompany<CreditTransaction.CreditCompany>,PaymentBatch<CreditTransaction.CreditBatch>,AndPayment<CreditTransaction.CreditNumber>HasBeenCancelled;Return_\To_\MakerPaymentExists"	

				if (invoking action = "ReceivablePayment.DeleteAllApplicationsUnreleased"
				or	invoking action = "ReceivablePayment.DeleteAllApplicationsFullyApplied"
				or	invoking action = "ReceivablePayment.DeleteAllApplicationsOpen")
					LocalSkipDeleteAll = true

				if (!ReceivablePaymentRel.IsZeroPayment
				and !LocalSkipDeleteAll)
					if (ReceivableApplication.NegativePaymentWriteoff)
						constraint (!ReceivablePaymentRel.UnpostedDebitApplicationsRel exist)
							"CannotReverseNegativePaymentWriteoffWithoutFirstReversingInvoiceApplications"

					if (ReceivableApplication.TransType.CreditMemo
					and !ReceivablePaymentRel.UnpostedDebitApplications.NegativePaymentWriteoff)
						constraint (!ReceivablePaymentRel.UnpostedDebitApplications exist)
							"CannotReverseCreditMemoApplicationsWithoutFirstReversingInvoiceApplications"

				if  (ApplicationAmount.CurrencyAmount < 0
				and  ReceivableApplication.ApplicationSequence = 1)
					constraint (Status.UnreleasedCashApplication)
						"CannotProcessMemoChargebackApplication"


			constraint (!ApplicationCloseResult entered) 
				"CannotDelete;ApplicationCloseInProgess"
			constraint (!Reverse)
				"CannotProcess;ReversalApplicationExists"
			constraint (!ApplicationSource.ReversalOfApplications)
				"CannotProcess;ReversalApplicationExists"
			constraint (!ApplicationSource.TransferToAP)
				"CannotProcess;TransactionTransferredToAP"
			constraint (!ApplicationSource.MarkedAsPaid)	
				"CannotProcess;TransactionMarkAsPaid"	
			if (ApplicationAmount.CurrencyAmount < 0
			and ReceivableApplication.ApplicationSequence = 1)
				constraint (Status.UnreleasedCashApplication)
					"CannotProcess;MemoChargebackExists"
			constraint (!ReceivableInvoiceDetailRel.ReceivablePendingAdjustment2Rel exists)
				"CannotProcess;PendingAdjustmentExistsForInvoiceForCompany<Company>,ReceivableInvoiceDetailType<ReceivableApplication.TransType>,Invoice<ReceivableApplication.Invoice>,PaymentSeq<ReceivableApplication.PaymentSeq>"	

			include DecreaseTransactionAmounts

			LocalDebitTotal	= (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
			LocalCreditTotal	= (CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
			include CustomerBalance

			if (ReceivableApplication.TransType.DebitMemo
			and ReceivableInvoiceRel.Status.Unreleased)
				invoke Delete ReceivableInvoiceRel
				invoke Delete ReceivableInvoiceDetailRel
			else
			if (ReceivableApplication.TransType.CustomerPayment
			and ReceivableInvoiceDetailCrossReferenceRel exists
			and ReceivableInvoiceRel.Status.Unreleased)
				invoke Delete ReceivableInvoiceDetailCrossReferenceRel.ReceivableInvoiceRel
				invoke Delete ReceivableInvoiceDetailCrossReferenceRel

			if (AllowSelectDistributionSet)
				invoke Delete FundApplyDistribution set

			if (Company.DetailedRNADistributions)
				invoke Delete CashDetailApplicationRel

			invoke Delete ReceivableApplicationAdjustment set

		IncreaseTransactionAmounts

			if (ApplicationAmount.CurrencyAmount entered or ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
				if (ReceivableApplication.TransType.CustomerPayment)
					if (CreditTransaction.CreditNumber != ReceivableApplication.Invoice
					or  CreditTransaction.CreditType != ReceivableApplication.TransType)
						invoke UpdateAppliedAmounts ReceivablePaymentDebitRel
							invoked.AppliedAmount				+= ApplicationAmount.CurrencyAmount
							invoked.BaseAppliedAmount			+= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				else
				if (DebitIsInvoice)

					invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel
						invoked.ApplicationAmount.CurrencyAmount	+= ApplicationAmount.CurrencyAmount


			if (CreditTransaction.CreditApplicationAmount.CurrencyAmount entered or CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
				if (CreditTransaction.CreditType.Payment)
					if (CreditTransaction.CreditNumber != ReceivableApplication.Invoice
					or  CreditTransaction.CreditType != ReceivableApplication.TransType)
						if (ReceivableApplication.TransType.CreditMemo
						and !ReceivablePaymentRel.IsZeroPayment)
							invoke UpdateAppliedAmounts ReceivablePaymentRel
								invoked.CreditAppliedAmount			+= CreditTransaction.CreditApplicationAmount.CurrencyAmount
								invoked.BaseCreditAppliedAmount		+= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
						if  (!ReceivablePaymentRel.IsZeroPayment)
							invoke UpdateAppliedAmounts ReceivablePaymentRel
								invoked.AppliedAmount				+= CreditTransaction.CreditApplicationAmount.CurrencyAmount
								invoked.BaseAppliedAmount			+= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				else
				if (CreditIsInvoice)
					invoke UpdateAppliedAmounts ReceivableCreditInvoiceDetailRel
						invoked.ApplicationAmount.CurrencyAmount		+= CreditTransaction.CreditApplicationAmount.CurrencyAmount


		ChangeTransactionAmounts
			if (ApplicationAmount.CurrencyAmount changed or ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount changed)
				if (ReceivableApplication.TransType.CustomerPayment)
					if (CreditTransaction.CreditNumber != ReceivableApplication.Invoice
					or  CreditTransaction.CreditType != ReceivableApplication.TransType)
						invoke UpdateAppliedAmounts ReceivablePaymentDebitRel
							invoked.AppliedAmount	+= ApplicationAmount.CurrencyAmount - old ApplicationAmount.CurrencyAmount
							invoked.BaseAppliedAmount	+= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				else
				if (DebitIsInvoice)
					invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel
						invoked.ApplicationAmount.CurrencyAmount	+= ApplicationAmount.CurrencyAmount - old ApplicationAmount.CurrencyAmount


			if (CreditTransaction.CreditApplicationAmount.CurrencyAmount changed or CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount changed)
				if (CreditTransaction.CreditType.Payment)
					if (CreditTransaction.CreditNumber != ReceivableApplication.Invoice
					or  CreditTransaction.CreditType != ReceivableApplication.TransType)
						if (ReceivableApplication.TransType.CreditMemo
						and !ReceivablePaymentRel.IsZeroPayment)
							invoke UpdateAppliedAmounts ReceivablePaymentRel
								invoked.CreditAppliedAmount			+= CreditTransaction.CreditApplicationAmount.CurrencyAmount - old CreditTransaction.CreditApplicationAmount.CurrencyAmount
								invoked.BaseCreditAppliedAmount		+= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
						if  (!ReceivablePaymentRel.IsZeroPayment)
							invoke UpdateAppliedAmounts ReceivablePaymentRel
								invoked.AppliedAmount				+= CreditTransaction.CreditApplicationAmount.CurrencyAmount - old CreditTransaction.CreditApplicationAmount.CurrencyAmount
								invoked.BaseAppliedAmount			+= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				else
				if (CreditIsInvoice)
					invoke UpdateAppliedAmounts ReceivableCreditInvoiceDetailRel
						invoked.ApplicationAmount.CurrencyAmount		+= CreditTransaction.CreditApplicationAmount.CurrencyAmount - old CreditTransaction.CreditApplicationAmount.CurrencyAmount


		DecreaseTransactionAmounts
			if (ApplicationAmount.CurrencyAmount entered or ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
				if (ReceivableApplication.TransType.CustomerPayment)
					if (CreditTransaction.CreditNumber != ReceivableApplication.Invoice
					or  CreditTransaction.CreditType != ReceivableApplication.TransType)
						invoke UpdateAppliedAmounts ReceivablePaymentDebitRel
							invoked.AppliedAmount				-= ApplicationAmount.CurrencyAmount
							invoked.BaseAppliedAmount			-= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				else
				if (DebitIsInvoice)
					invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel
						invoked.ApplicationAmount.CurrencyAmount -= ApplicationAmount.CurrencyAmount


			if (CreditTransaction.CreditApplicationAmount.CurrencyAmount entered or CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
				if (CreditTransaction.CreditType.Payment)
					if (CreditTransaction.CreditNumber != ReceivableApplication.Invoice
					or  CreditTransaction.CreditType != ReceivableApplication.TransType)
						if (ReceivableApplication.TransType.CreditMemo
						and !ReceivablePaymentRel.IsZeroPayment)
							invoke UpdateAppliedAmounts ReceivablePaymentRel
								invoked.CreditAppliedAmount			-= CreditTransaction.CreditApplicationAmount.CurrencyAmount
								invoked.BaseCreditAppliedAmount		-= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
						if  (!ReceivablePaymentRel.IsZeroPayment)
							invoke UpdateAppliedAmounts ReceivablePaymentRel
								invoked.AppliedAmount				-= CreditTransaction.CreditApplicationAmount.CurrencyAmount
								invoked.BaseAppliedAmount			-= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				else
				if (CreditIsInvoice)
					invoke UpdateAppliedAmounts ReceivableCreditInvoiceDetailRel
						invoked.ApplicationAmount.CurrencyAmount	-= CreditTransaction.CreditApplicationAmount.CurrencyAmount


		CustomerBalance

			if  (ReceivableApplication.TransType.CustomerPayment)
				if (ReceivablePaymentDebitRel.Company != CreditTransaction.CreditCompany
				or  ReceivablePaymentDebitRel.Customer != CreditTransaction.CreditCustomer)
					if (ReceivablePaymentDebitRel.Status.Open)
						invoke UpdateCurrentBalance ReceivablePaymentDebitRel.CompanyCustomerRel
							invoked.ChangeAmount						= LocalDebitTotal
							invoked.TransactionDate						= DerivedTransactionDate
							invoked.PrmBalanceType						= 3	
							invoked.PrmReference						= Reference
					invoke UpdateCurrentBalance CreditCompanyCustomerRel
						if (CreditTransaction.CreditType.Payment or CreditTransaction.CreditType.CreditMemo)
							invoked.ChangeAmount						= LocalCreditTotal
							invoked.TransactionDate						= DerivedTransactionDate
						else
							invoked.ChangeAmount						= LocalCreditTotal * -1
							invoked.TransactionDate						= DerivedTransactionDate
						invoked.PrmBalanceType							= 3	
						invoked.PrmReference							= Reference

				if (LocalDebitTotal != LocalCreditTotal)
					if (ReceivablePaymentDebitRel.Status.Open)
						invoke UpdateCurrentBalance ReceivablePaymentDebitRel.CompanyCustomerRel
							invoked.ChangeAmount						= (LocalDebitTotal - LocalCreditTotal)
							invoked.TransactionDate						= DerivedTransactionDate
							invoked.PrmBalanceType						= 3	
							invoked.PrmReference						= Reference
			else


				if  ((ReceivableInvoiceDetailRel.Company != CreditTransaction.CreditCompany
				or	ReceivableInvoiceDetailRel.Customer != CreditTransaction.CreditCustomer)
				and   CreditTransaction.CreditType.Payment
				and   !ReceivablePaymentRel.Status.Unreleased)
					invoke UpdateCurrentBalance CreditCompanyCustomerRel
						if (ReceivableApplication.TransType.CreditMemo)
							invoked.ChangeAmount					= LocalCreditTotal * -1
						else
							invoked.ChangeAmount					= LocalCreditTotal
						invoked.TransactionDate					= DerivedTransactionDate
						invoked.PrmBalanceType					= 3	
						invoked.PrmReference					= Reference

				if  (CreditTransaction.CreditType.Payment)
					if  ((ReceivableInvoiceDetailRel.Company = CreditTransaction.CreditCompany
					and   ReceivableInvoiceDetailRel.Customer = CreditTransaction.CreditCustomer)
					and   !ReceivablePaymentRel.Status.Unreleased)

						NextSentence = true
					else
						invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel 
							if (CreditTransaction.CreditType.CreditMemo)
								invoked.ChangeAmount							= LocalDebitTotal
								invoked.TransactionDate							= DerivedTransactionDate
							else
								if (ReceivableApplication.TransType.CreditMemo)
									invoked.ChangeAmount						= LocalDebitTotal
								else
									invoked.ChangeAmount						= LocalDebitTotal * -1
								invoked.TransactionDate							= DerivedTransactionDate
							invoked.PrmBalanceType								= 3	
							invoked.PrmReference								= Reference
				
				if ((ReceivableInvoiceDetailRel.Company != CreditTransaction.CreditCompany					
				or  ReceivableInvoiceDetailRel.Customer != CreditTransaction.CreditCustomer)
				and CreditTransaction.CreditType.CreditMemo)
					invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
						invoked.ChangeAmount					= LocalDebitTotal * -1
						invoked.TransactionDate					= DerivedTransactionDate
						invoked.PrmBalanceType					= 3	
						invoked.PrmReference					= CreditReference
					invoke UpdateCurrentBalance CreditCompanyCustomerRel
						invoked.ChangeAmount					= LocalCreditTotal
						invoked.TransactionDate					= DerivedTransactionDate
						invoked.PrmBalanceType					= 3	
						invoked.PrmReference					= CreditReference

				if (LocalDebitTotal != LocalCreditTotal)
					invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel 
						if (CreditTransaction.CreditType.CreditMemo)
							invoked.ChangeAmount						= (LocalDebitTotal - LocalCreditTotal)
							invoked.TransactionDate						= DerivedTransactionDate
						else
							invoked.ChangeAmount						= ((LocalDebitTotal - LocalCreditTotal) * -1)
							invoked.TransactionDate						= DerivedTransactionDate
						invoked.PrmBalanceType							= 3	
						invoked.PrmReference							= Reference


		UpdateCommonRoutine
			
			if  (CreditTransaction.CreditApplicationAmount.CurrencyAmount changed
			and  ApplicationAmount.CurrencyAmount not changed)
					if  (DerivedCreditCurrency != DerivedDebitCurrency)
						initialize CurrencyDateWork
						CurrencyDateWork.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						CurrencyDateWork.ExchangeDate							= DepositDate
						CurrencyDateWork.FromCurrency							= DerivedCreditCurrency
						CurrencyDateWork.TransactionAmount						= CreditTransaction.CreditApplicationAmount.CurrencyAmount
						CurrencyDateWork.BaseAmount.ToCurrency					= DerivedDebitCurrency
						ApplicationAmount.CurrencyAmount						= CurrencyDateWork.BaseAmount.OutputCurrencyAmount
					else
						ApplicationAmount.CurrencyAmount						= CreditTransaction.CreditApplicationAmount.CurrencyAmount

			constraint (!CreditTransaction.CreditType.BillOfExchangePayment)
				"CannotChangeBillOfExchangeApplication"

			constraint (!ReceivableApplication.TransType.BillOfExchangePayment)
				"CannotChangeBillOfExchangeApplication"

			if (!ReceivableApplication.TransType.CustomerPayment)
				constraint (!ReceivableInvoiceDetailRel.Status.HistoricalTransaction)
					"InquireOnly;TransactionIsHistorical"

			include ValidateDetailFinanceStructure

			if (ReceivableApplication.TransType.CustomerPayment)
				constraint (!ReceivablePaymentDebitRel.Status.Historical)
					"InquireOnly;PaymentIsHistorical"

				if (ReceivablePaymentDebitRel.Status.Closed
				or  ReceivablePaymentDebitRel.Status.FullyApplied)
					constraint (!ReceivablePaymentDebitRel.Transferred)
						"InquireOnly;TransferredPayment"

					constraint (!ReceivablePaymentDebitRel.Cancelled)
						"InquireOnly;CancelledPayment"

			if (ApplicationAmount.CurrencyAmount changed or ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount changed)
				constraint (!ReceivableInvoiceDetailRel.ReceivablePendingAdjustment2Rel exists)
					"CannotChange;PendingAdjustmentExistsForInvoice"

				constraint (!ApplicationSource.ReversalOfApplications)
					"CannotChangeAppliedAmountsOnReversal"

				constraint (!Writeoff)
					"CannotChangeApplicationAmountOnWriteoff"









				if (ReceivableApplication.TransType.CustomerPayment)
					constraint (ApplicationAmount.CurrencyAmount - old ApplicationAmount.CurrencyAmount + CreateAdjustAmount <= ReceivablePaymentDebitRel.PaymentOpen)
						"SumOfAppliedAmountAndAdjustAmountExceedsPaymentOpenAmount<ReceivablePaymentDebitRel.PaymentOpen>"	
				else
					constraint (ApplicationAmount.CurrencyAmount - old ApplicationAmount.CurrencyAmount + CreateAdjustAmount <= ReceivableInvoiceDetailRel.OpenAmount)
						"SumOfAppliedAmountAndAdjustAmountExceedsTransactionOpenAmount<ReceivableInvoiceDetailRel.OpenAmount>"	

				if (CreditTransaction.CreditType.Payment)
					constraint (CreditTransaction.CreditApplicationAmount.CurrencyAmount - old CreditTransaction.CreditApplicationAmount.CurrencyAmount + CreateAdjustAmount <= ReceivablePaymentRel.PaymentOpen)
						"SumOfAppliedAmountAndAdjustAmountExceedsPaymentOpenAmount<ReceivablePaymentRel.PaymentOpen>"	
				else
					constraint (CreditTransaction.CreditApplicationAmount.CurrencyAmount - old CreditTransaction.CreditApplicationAmount.CurrencyAmount + CreateAdjustAmount <= ReceivableCreditInvoiceDetailRel.OpenAmount)
						"SumOfAppliedAmountAndAdjustAmountExceedsCreditMemoOpenAmount<ReceivableCreditInvoiceDetailRel.OpenAmount>"	













































































































		BatchCreateRules
			if (ReceivableApplication.TransType.CustomerPayment)
				ApplicationAmount.FunctionalAmount.ToCurrency			= ReceivablePaymentDebitRel.Company.Currency
				ApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentDebitRel.CurrencyRate
				ApplicationAmount.ExchangeDate							= ReceivablePaymentDebitRel.DepositDate
			else
				ApplicationAmount.FunctionalAmount.ToCurrency			= ReceivableInvoiceDetailRel.Company.Currency
				ApplicationAmount.ExchangeDate							= ReceivableInvoiceDetailRel.TransactionDate
				ApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				ApplicationAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
				ApplicationAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
				ApplicationAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
				ApplicationAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
				ApplicationAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
				ApplicationAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
				ApplicationAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
				ApplicationAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate

			ApplicationAmount.KeepRateOnly								= true




			if (CreditTransaction.CreditApplicationAmount.CurrencyAmount not entered)
				if  (EnteredAmount entered)
					CreditTransaction.CreditApplicationAmount.CurrencyAmount	= EnteredAmount
				else
				if  (DerivedDebitCurrency = DerivedCreditCurrency)
					CreditTransaction.CreditApplicationAmount.CurrencyAmount	= ApplicationAmount.CurrencyAmount


			if (CreditTransaction.CreditType.Payment)
				CreditTransaction.CreditApplicationAmount.FunctionalAmount.ToCurrency			= ReceivablePaymentRel.Company.Currency
				CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
				CreditTransaction.CreditApplicationAmount.ExchangeDate							= ReceivablePaymentRel.DepositDate
			else
				CreditTransaction.CreditApplicationAmount.FunctionalAmount.ToCurrency			= ReceivableCreditInvoiceDetailRel.Company.Currency
				CreditTransaction.CreditApplicationAmount.ExchangeDate							= ReceivableCreditInvoiceDetailRel.TransactionDate
				CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
				CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate


				if (CreditTransaction.CreditCompany != Company) 
					initialize CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate 
					initialize CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate 
					initialize CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate 

			if (Company != CreditTransaction.CreditCompany)
				initialize CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate

			CreditTransaction.CreditApplicationAmount.KeepRateOnly							= true

		CreateRules








			if  (!ApplicationSource.ReversalOfApplications)
				if (ReceivableApplication.TransType.CustomerPayment)
					ApplicationAmount.FunctionalAmount.ToCurrency			= ReceivablePaymentDebitRel.Company.Currency
					ApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentDebitRel.CurrencyRate
					ApplicationAmount.ExchangeDate							= ReceivablePaymentDebitRel.DepositDate
				else
					ApplicationAmount.FunctionalAmount.ToCurrency			= ReceivableInvoiceDetailRel.Company.Currency
					ApplicationAmount.ExchangeDate							= ReceivableInvoiceDetailRel.TransactionDate
					ApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					ApplicationAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
					ApplicationAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
					ApplicationAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
					ApplicationAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
					ApplicationAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
					ApplicationAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
					ApplicationAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
					ApplicationAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate

				ApplicationAmount.KeepRateOnly								= true

				if (CreditTransaction.CreditType.Payment)
					CreditTransaction.CreditApplicationAmount.FunctionalAmount.ToCurrency			= ReceivablePaymentRel.Company.Currency
					CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
					CreditTransaction.CreditApplicationAmount.ExchangeDate							= ReceivablePaymentRel.DepositDate
				else
					CreditTransaction.CreditApplicationAmount.FunctionalAmount.ToCurrency			= ReceivableCreditInvoiceDetailRel.Company.Currency
					CreditTransaction.CreditApplicationAmount.ExchangeDate							= ReceivableCreditInvoiceDetailRel.TransactionDate
					CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
					CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate

					if (CreditTransaction.CreditCompany != Company) 
						initialize CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate 
						initialize CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate 
						initialize CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate 

				CreditTransaction.CreditApplicationAmount.KeepRateOnly							= true

			if (ApplicationSource.MarkedAsPaid)	
				ApplicationCurrency	= ReceivableInvoiceRel.OriginalCurrency

			if  (!ApplicationSource.ReversalOfApplications
			and  !ApplicationSource.GroupedMemo)

				if  (ApplicationAmount.CurrencyAmount not entered)
					if  (ApplicationCurrency != DerivedDebitCurrency)
						initialize CurrencyDateWork
						CurrencyDateWork.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						CurrencyDateWork.ExchangeDate							= DepositDate
						CurrencyDateWork.FromCurrency							= ApplicationCurrency
						CurrencyDateWork.TransactionAmount						= EnteredAmount
						CurrencyDateWork.BaseAmount.ToCurrency					= DerivedDebitCurrency
						ApplicationAmount.CurrencyAmount						= CurrencyDateWork.BaseAmount.OutputCurrencyAmount
						if (CreateAdjustAmount entered)
							CurrencyDateWork.TransactionAmount					= CreateAdjustAmount
							CurrencyDateWork.FromCurrency						= ApplicationCurrency
							CurrencyDateWork.BaseAmount.ToCurrency				= DerivedDebitCurrency 
							LocalCreateAdjustmentAmount							= CurrencyDateWork.BaseAmount.OutputCurrencyAmount
					else
						ApplicationAmount.CurrencyAmount						= EnteredAmount
						LocalCreateAdjustmentAmount								= CreateAdjustAmount
				else
					LocalCreateAdjustmentAmount								= CreateAdjustAmount


				if  (ApplicationCurrency != DerivedDebitCurrency)
					WorkAmount = ReceivableInvoiceDetailRel.OpenAmount - (ApplicationAmount.CurrencyAmount + LocalCreateAdjustmentAmount)
					
					if  ((WorkAmount = -.01
					or   WorkAmount = -.02
					or   WorkAmount = -.03)
					or  (WorkAmount = 0.01
					or   WorkAmount = 0.02
					or   WorkAmount = 0.03))

						ApplicationAmount.CurrencyAmount						+= WorkAmount







				if (CreditTransaction.CreditApplicationAmount.CurrencyAmount not entered)
					if  (EnteredAmount entered)
						CreditTransaction.CreditApplicationAmount.CurrencyAmount	= EnteredAmount
					else
					if  (DerivedDebitCurrency = DerivedCreditCurrency)
						CreditTransaction.CreditApplicationAmount.CurrencyAmount	= ApplicationAmount.CurrencyAmount








			if (!ApplicationSource.ReversalOfApplications
			and  !ApplicationSource.GroupedMemo
			and !CashApplicationResult entered)	



				if (ReceivableApplication.TransType.CustomerPayment)
					constraint (ReceivablePaymentDebitRel exists)
						"ReceivablePaymentForCompany<Company>,Batch<ReceivableApplication.BatchNumber>,AndPayment<ReceivableApplication.PaymentSeq>DoesNotExist"	
					constraint (ApplicationAmount.CurrencyAmount + LocalCreateAdjustmentAmount <= (ReceivablePaymentDebitRel.PaymentOpen + ReceivablePaymentDebitRel.PendingAdjustMemoAmount))	
						"SumOfAppliedAmount<ApplicationAmount.CurrencyAmount>AndAdjustAmount<LocalCreateAdjustmentAmount>ExceedsPaymentOpenAmount<ReceivablePaymentDebitRel.PaymentOpen>AndPendingChargebackMemo<ReceivablePaymentDebitRel.PendingAdjustMemoAmount>"	
				else
					constraint (ReceivableInvoiceDetailRel exists)
						"ReceivableTransactionForCompany<Company>,ReceivableInvoiceDetailType<ReceivableApplication.TransType>,Invoice<ReceivableApplication.Invoice>,PaymentSeq<ReceivableApplication.PaymentSeq>DoesNotExist"	

					if (ReceivableInvoiceDetailRel.SummarizeDetail)
						if (!BypassOpenAmountEdit)
							if(!TransientOverApplyInvoice)
								constraint (ApplicationAmount.CurrencyAmount + LocalCreateAdjustmentAmount <= ReceivableInvoiceDetailRel.DerivedOpenAmount)  
									"SumOfAppliedAmount<ApplicationAmount.CurrencyAmount>AndAdjustAmount<LocalCreateAdjustmentAmount>ExceedsTransaction<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>OpenAmount<ReceivableInvoiceDetailRel.OpenAmount>"
						constraint (ReceivableInvoiceDetailRel.DerivedOpenAmount > 0)	
							"Invoice_\Number<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>For_\Company<ReceivableInvoiceDetailRel.Company>HasAnOpenBalanceOf<ReceivableInvoiceDetailRel.DerivedOpenAmount>"
					else

						if (!BypassOpenAmountEdit)
							if (!TransientOverApplyInvoice)
								constraint (ApplicationAmount.CurrencyAmount + LocalCreateAdjustmentAmount <= ReceivableInvoiceDetailRel.OpenAmount) 
									"SumOfAppliedAmount<ApplicationAmount.CurrencyAmount>AndAdjustAmount<LocalCreateAdjustmentAmount>ExceedsTransaction<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>OpenAmount<ReceivableInvoiceDetailRel.OpenAmount>"
						constraint (ReceivableInvoiceDetailRel.OpenAmount > 0)
							"Invoice_\Number<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>For_\Company<ReceivableInvoiceDetailRel.Company>HasAnOpenBalanceOf<ReceivableInvoiceDetailRel.OpenAmount>"

					constraint (ReceivableInvoiceDetailRel.CompanyCustomerRel.ReceivableProcessingMethod.OpenItem)
						"ThirdPartyPayerMustUseOpenItemProcessingForInvoiceCustomer"

					if (Company.VendorCreateAndInterfaceToAP
					and !TransientSkipAPSelectEdit)
						if (ReceivableInvoiceDetailRel.SummarizeDetail)
							constraint (!ReceivableInvoiceDetailRel.ARToAPApplicationSelectSumLineRel exists)
								"CannotSelect;UnreleasedARToAPInterfaceRecordsExist"
						else
							constraint (!ReceivableInvoiceDetailRel.ARToAPApplicationSelectRel exists)
								"CannotSelect;UnreleasedARToAPInterfaceRecordsExistForPaymentSequence<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq>"

					constraint (!ReceivableInvoiceDetailRel.ReceivablePendingAdjustment2Rel exists)
						"CannotSelect;PendingAdjustmentExistsForInvoice<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>"

					if (!BypassOpenAmountEdit)
						constraint (ReceivableInvoiceDetailRel.Status.OpenTransaction)
							"Invoice_\Number<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>For_\Company<ReceivableInvoiceDetailRel.Company>IsInA<ReceivableInvoiceDetailRel.Status>StatusAndIsNotOpen"



				if (CreditTransaction.CreditType.Payment)
					constraint (ReceivablePaymentRel exists)
						"PaymentDoesNotExist"
					if (!BypassOpenAmountEdit)
						constraint (CreditTransaction.CreditApplicationAmount.CurrencyAmount + CreditAdjustAmount <= ReceivablePaymentRel.PendingOpenAmount)  
							"SumOfAppliedAmount<CreditTransaction.CreditApplicationAmount.CurrencyAmount>AndAdjustAmount<CreditAdjustAmount>ExceedsPaymentPendingOpenAmount<ReceivablePaymentRel.PendingOpenAmount>-Invoice<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail>"

					if (!ReceivableApplication.TransType.CustomerPayment)
						if (!ReceivablePaymentRel.CompanyCustomerRel.ThirdPartyPayer)
							if (ReceivablePaymentRel.CompanyCustomerRel.NationalAccountIndicator.No)
								if (ReceivablePaymentRel.ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)	
									constraint (ReceivablePaymentRel.Customer			= ReceivableInvoiceDetailRel.Customer)	
										"Receivable_\Company<ReceivablePaymentRel.Company>DoesHave_Apply_\Cash_\Across_\Receivable_\CompaniesFlagged._\However,_\Payment_\Customer<ReceivablePaymentRel.Customer>For_\Payment<ReceivablePaymentRel.PaymentNumber>DoesNotMatch_\Transaction_\Customer<ReceivableInvoiceDetailRel.Customer>For_\Transaction<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>."	
								else	
									constraint (ReceivablePaymentRel.Company			= ReceivableInvoiceDetailRel.Company
									and		 ReceivablePaymentRel.Customer			= ReceivableInvoiceDetailRel.Customer)
										"Payment_\Company-<ReceivablePaymentRel.Company>_\Customer<ReceivablePaymentRel.Customer>For_\Payment<ReceivablePaymentRel.PaymentNumber>DoesNotMatch_\Transaction_\Company-<ReceivableInvoiceDetailRel.Company>_\Customer-<ReceivableInvoiceDetailRel.Customer>."




							else	
							if (ReceivablePaymentRel.ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies	
							and ReceivablePaymentRel.Customer			= ReceivableInvoiceDetailRel.Customer)	
								NextSentence = true	
							else
								constraint (ReceivablePaymentRel.DerivedNationalCompany		= ReceivableInvoiceDetailRel.DerivedNationalCompany
								and		 ReceivablePaymentRel.DerivedNationalCustomer	= ReceivableInvoiceDetailRel.DerivedNationalCustomer)
									"Payment_\Company-<ReceivablePaymentRel.Company>_\Customer<ReceivablePaymentRel.Customer>For_\Payment<ReceivablePaymentRel.PaymentNumber>IsA_\National_\Account._\However,_\No_\National_\AccountRelationshipBetweenPayment_\Company-<ReceivablePaymentRel.Company>_\Customer<ReceivablePaymentRel.Customer>And_\Transaction_\Company-<ReceivableInvoiceDetailRel.Company>_\Transaction_\Customer-<ReceivableInvoiceDetailRel.Customer>."
						else
							constraint (ReceivablePaymentRel.CompanyCustomerRel.ReceivableProcessingMethod.OpenItem)
								"ThirdPartyPayerMustUseOpenItemProcessingForPaymentCustomer"






						if (Company.VendorCreateAndInterfaceToAP
						and !TransientSkipAPSelectEdit)
							constraint (!ReceivablePaymentRel.ARToAPApplicationSelectRel exists)
								"PaymentPendingTransferToAP;CannotSelectForApplication"

						if (!BypassOpenAmountEdit)
							constraint (ReceivablePaymentRel.Status.Open or ReceivablePaymentRel.Status.Unreleased)
								"PaymentIsNotInOpenOrUnreleasedStatus"

							constraint (ReceivablePaymentRel.PaymentOpen > 0)
								"PaymentIsNotOpen"

							constraint (!ReceivablePaymentRel.RTMPaymentRel exists)
								"CannotApplyPayment.PaymentPendingRTM."

							constraint (ReceivablePaymentRel.CanApplyCash)
								"CannotApplyPayment"









				if (CreditTransaction.CreditType entered 
				and !CreditTransaction.CreditType.Payment
				and !CreditTransaction.CreditType.BillOfExchangePayment
				and !ApplicationSource.GroupedMemo)

					if (!Writeoff)
						constraint (CreditTransaction.CreditApplicationAmount.CurrencyAmount > 0)
							"CreditApplicationAmountMustBeGreaterThanZero"

					constraint (ReceivableCreditInvoiceDetailRel exists)
						"CreditTransactionDoesNotExist"

					constraint (CreditTransaction.CreditApplicationAmount.CurrencyAmount + CreditAdjustAmount <= ReceivableCreditInvoiceDetailRel.OpenAmount) 
						"SumOfAppliedAmountAndAdjustAmountExceedsCreditMemoOpenAmount"

					if (!Writeoff)
						if (!ReceivableCreditInvoiceDetailRel.CompanyCustomerRel.ThirdPartyPayer)
							if (ReceivableCreditInvoiceDetailRel.CompanyCustomerRel.NationalAccountIndicator.No)
								constraint (ReceivableCreditInvoiceDetailRel.Company			= ReceivableInvoiceDetailRel.Company
								and			ReceivableCreditInvoiceDetailRel.Customer			= ReceivableInvoiceDetailRel.Customer)
									"CreditCustomerDoesNotMatchDebitCustomer"
							else
								constraint (ReceivableCreditInvoiceDetailRel.DerivedNationalCompany		= ReceivableInvoiceDetailRel.DerivedNationalCompany
								and			ReceivableCreditInvoiceDetailRel.DerivedNationalCustomer	= ReceivableInvoiceDetailRel.DerivedNationalCustomer)
									"NoNationalAccountRelationshipBetweenPaymentAndTransactionCustomer"
						else
							constraint (ReceivableCreditInvoiceDetailRel.CompanyCustomerRel.ReceivableProcessingMethod.OpenItem)
								"ThirdPartyPayerMustUseOpenItemProcessingForCreditCustomer"

					if (Company.VendorCreateAndInterfaceToAP
					and !TransientSkipAPSelectEdit)
						constraint (!ReceivableCreditInvoiceDetailRel.ARToAPApplicationSelectRel exists)
							"CreditMemoPendingTransferToAP;CannotSelectForApplication"

					if (!BypassOpenAmountEdit)
						constraint (ReceivableCreditInvoiceDetailRel.Status.OpenTransaction)
							"CreditMemoIsNotOpen"

						constraint (ReceivableCreditInvoiceDetailRel.OpenAmount > 0)
							"CreditMemoIsNotOpen"

						constraint (!ReceivableCreditInvoiceDetailRel.CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)
							"CreditMemoCustomerHasBalanceForwardProcessing;CannotApplyCash"




		ValidateDetailFinanceStructure

			if (not ApplicationSource.ReversalOfApplications)
				initialize InvoiceFinanceCodeBlock
				initialize CreditFinanceCodeBlock
				initialize HasPaymentCashDetail

			if (Company != CreditTransaction.CreditCompany)
				constraint (Company.DetailedInvoiceAccrualDistributions = CreditTransaction.CreditCompany.DetailedInvoiceAccrualDistributions
				and			Company.DetailedCashDistributions = CreditTransaction.CreditCompany.DetailedCashDistributions
				and			Company.DetailedRNADistributions = CreditTransaction.CreditCompany.DetailedRNADistributions
				and			Company.DetailFinanceStructureOptions = CreditTransaction.CreditCompany.DetailFinanceStructureOptions)
					"Both_companies_must_have_the_same_Detail_Finance_Structure_selections"

			if (Company.DetailedInvoiceAccrualDistributions)
				if (DebitIsInvoice)
					InvoiceFinanceCodeBlock 		= ReceivableInvoiceDetailRel.InvoiceFinanceCodeBlock

				if (CreditIsInvoice)
					CreditFinanceCodeBlock 			= ReceivableCreditMemoDetailRel.InvoiceFinanceCodeBlock

			if (Company.DetailedRNADistributions)
				if  (IsCreditTypePayment
				and !ReceivablePaymentRel.CashDetailState.None)
					HasPaymentCashDetail 			= true
			
			if (Company.DetailedRNADistributions
			and not ApplicationSource.ReversalOfApplications)
				if (CreditTransaction.CreditType.Payment)
					if (HasPaymentCashDetail
					and not ReceivableApplication.TransType.CustomerPayment)
						LocalAnswer 										= ReceivableInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
						LocalPaymentCashDetailAccount 						= ReceivableInvoiceDetailRel.TransientAdditionalDimensions
						LocalPaymentAmountRemaining							= sum LocalPaymentCashDetailRel.OpenAmount
						if (action type.Update)
							LocalPaymentAmountRemaining 				   += sum CashDetailApplicationRel.DistributionAmount.CurrencyAmount
						constraint (ReceivablePaymentRel.CashDetailState.Released)
							"Payment_\Cash_\DetailsMustBeReleased.UseThe_\Release_\Cash_\DetailsAction."
						if (ReceivableApplication.TransType.CreditMemo)
							constraint (LocalPaymentCashDetailRel exists)
								"Payment_\Cash_\DetailsDoNotAlignWithThisCreditMemo"
						else
							constraint (LocalPaymentCashDetailRel exists)
								"Payment_\Cash_\DetailsDoNotAlignWithThisInvoice"
							constraint (LocalPaymentAmountRemaining >= CreditTransaction.CreditApplicationAmount.CurrencyAmount)
								"PaymentCashDetailsOpenAmount<LocalPaymentAmountRemaining>IsLessThanApplicationAmount<CreditTransaction.CreditApplicationAmount.CurrencyAmount>"
				else
				if (CreditTransaction.CreditType.CreditMemo
				and not Writeoff
				and CreditFinanceCodeBlock entered
				and ReceivableInvoiceDetailRel.InvoiceFinanceCodeBlock entered)
					LocalAnswer = ReceivableCreditMemoDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
					LocalAnswer = ReceivableInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
					constraint (ReceivableCreditMemoDetailRel.TransientAdditionalDimensions = ReceivableInvoiceDetailRel.TransientAdditionalDimensions)
						"CreditMemoDetailedFinanceStructureDoesNotAlignWithThisInvoice"


		ApplySpecificCashDetails
			for each LocalPaymentCashDetailRel
				if (ReceivableApplication.TransType.CreditMemo)
					LocalPaymentApplicationAmount	= LocalPaymentAmountRemaining
				else
					if (each.OpenAmount < LocalPaymentAmountRemaining)
						LocalPaymentApplicationAmount	= each.OpenAmount
					else
						LocalPaymentApplicationAmount	= LocalPaymentAmountRemaining
				LocalPaymentAmountRemaining	   	   -= LocalPaymentApplicationAmount
				if (LocalPaymentApplicationAmount != 0)
					invoke Create CashDetailApplication
						assign result to NewCashDetailApplication
						invoked.Company												= CreditTransaction.CreditCompany
						invoked.ReceivablePaymentHeader								= CreditTransaction.CreditBatch
						invoked.ReceivablePayment									= CreditTransaction.CreditSequence
						invoked.ReceivablePaymentCashDetail							= each.ReceivablePaymentCashDetail
						invoked.CashDetailApplicationGroup.Company					= Company
						invoked.CashDetailApplicationGroup.ReceivableApplication	= ReceivableApplication
						invoked.DistributionAmount.CurrencyAmount					= LocalPaymentApplicationAmount
						invoked.DistributionAmount.ExchangeDate						= CreditTransaction.CreditApplicationAmount.ExchangeDate
						invoked.ApplicationPostDate									= GeneralLedgerDate
						invoked.ApplicationSource									= "A"

					LocalSumCashDetailAmountGroup.CurrencyAmount 							+= NewCashDetailApplication.DistributionAmount.CurrencyAmount
					LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount 	+= NewCashDetailApplication.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount 		+= NewCashDetailApplication.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		+= NewCashDetailApplication.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		+= NewCashDetailApplication.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		+= NewCashDetailApplication.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		+= NewCashDetailApplication.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		+= NewCashDetailApplication.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

				if (LocalPaymentAmountRemaining = 0)
					end for each


		CreateUpdateCashDetailApplication
			if (Company.DetailedRNADistributions
			and HasPaymentCashDetail
			and CreditTransaction.CreditType.Payment
			and not ReceivableApplication.TransType.CustomerPayment
			and not ApplicationSource.ReversalOfApplications)
				if (action type.Update)
					invoke Delete CashDetailApplicationRel
				LocalAnswer 										= ReceivableInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
				LocalPaymentCashDetailAccount 						= ReceivableInvoiceDetailRel.TransientAdditionalDimensions
				initialize LocalSumCashDetailAmountGroup

				LocalPaymentAmountRemaining = CreditTransaction.CreditApplicationAmount.CurrencyAmount
				include ApplySpecificCashDetails

				constraint (LocalSumCashDetailAmountGroup.CurrencyAmount = CreditTransaction.CreditApplicationAmount.CurrencyAmount) 
					"CashDetailApplicationsAreLessThanApplicationAmount"

				LocalSumCashDetailAmountGroup.CurrencyAmount 							= CreditTransaction.CreditApplicationAmount.CurrencyAmount - LocalSumCashDetailAmountGroup.CurrencyAmount 
				LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount 	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount 		= CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount

				invoke RoundingUpdate last CashDetailApplicationRel
					invoked.PrmRoundAmount = LocalSumCashDetailAmountGroup

		SumReceivableApplicationAdjustmentSet
			if (!SumOfReceivableApplicationAdjustmentSetAmountsDone)
				initialize SumOfReceivableApplicationAdjustmentSetAdjustmentAmountCurrencyAmount
				initialize SumOfReceivableApplicationAdjustmentSetCreditAdjustAmount 
					for each ReceivableApplicationAdjustment set
						SumOfReceivableApplicationAdjustmentSetAdjustmentAmountCurrencyAmount += each.AdjustmentAmount.CurrencyAmount
						SumOfReceivableApplicationAdjustmentSetCreditAdjustAmount += each.CreditAdjustAmount
				SumOfReceivableApplicationAdjustmentSetAmountsDone = true


	Derived Fields
	
		DerivedCreditTransactionPostDate	is a DerivedField	
			type is Date
			restricted
			if (ContextReceivablePayment.GeneralLedgerDate entered)
				return ContextReceivablePayment.GeneralLedgerDate
			else
			if (ReceivablePaymentRel.GeneralLedgerDate entered)
				return ReceivablePaymentRel.GeneralLedgerDate
			else
			if (ContextReceivableInvoiceDetail.GeneralLedgerDate entered)
				return ContextReceivableInvoiceDetail.GeneralLedgerDate
			else
				return ReceivableCreditInvoiceDetailRel.GeneralLedgerDate
			
			
		DerivedPrefix is a DerivedField
			type is AlphaUpper 2
			restricted
			if(!BillingCompanyRel.Company.ManualInvoiceNumbering)
				return ReceivableApplication.Invoice[0:2]

		DerivedInvoice is a DerivedField
			type is Numeric 8
			restricted
			if(!BillingCompanyRel.Company.ManualInvoiceNumbering)
				return ReceivableApplication.Invoice[3:10]

		DerivedInvoicePaymentPercent is a DerivedField
			type is Decimal 20.5
			restricted
			return DerivedCurrencyAmount/DerivedInvoiceTotal

		DerivedCurrencyAmount is a DerivedField
			type is Decimal 19.3
			restricted
			return CreditTransaction.CreditApplicationAmount.CurrencyAmount

		DerivedInvoiceTotal is a DerivedField
			type is Decimal 19.3
			restricted
			if(BillingInvoiceLineRel.BillingInvoice.Currency = ReceivablePaymentRel.OriginalCurrency)
				return BillingInvoiceLineRel.BillingInvoice.InvoiceTotal
			else
			if(CurrExchangeMXRel exists)
				return BillingInvoiceLineRel.BillingInvoice.InvoiceTotal * CurrExchangeMXRel.Rate
			else
				return 1
		
		DerivedTaxBaseAmount is a DerivedField
			type is Decimal 19.3
			restricted
			return (LocalTaxableAmountMX * DerivedInvoicePaymentPercent)
		
		DerivedTaxBasisAmount is a DerivedField
			type is Decimal 19.3
			restricted
			return (DerivedTaxBaseAmount * LocalCurrExchangeRate)

		DerivedTaxBasisReportAmount is a DerivedField
			type is Decimal 19.3
			restricted
			return (DerivedTaxBaseAmount * LocalRepCurrRate)
		
		DerivedTaxableTotal is a DerivedField
			type is Decimal 19.3
			restricted
			return ((DerivedTaxBaseAmount * LocalBLLineRate) / 100)

		DerivedTaxableTotalBasis is a DerivedField
			type is Decimal 19.3
			restricted
			return ((DerivedTaxBasisAmount * LocalBLLineRate) / 100)

		DerivedTaxableReportTotal is a DerivedField
			type is Decimal 19.3
			restricted
			return ((DerivedTaxBasisReportAmount * LocalBLLineRate) / 100)

		ApplicationAmountForCardView is a DerivedField
			type is Alpha size 50
			return DebitCurrency + " " + ApplicationAmount.CurrencyAmount

		DerivedNameValue is a DerivedField
			type is Decimal size 19.3
			restricted
			if(Company.AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				return ReceivablePaymentRel.ReceivablePaymentHeader.CurrencyRate
			
		FxWhenTxnsInBaseCurrency is a DerivedField
			type is Boolean
			if (ApplicationCurrency	= DerivedDebitCurrency
			and ApplicationCurrency	= Company.Currency)
				if (ApplicationAmount.FunctionalAmount.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.AlternateAmount.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.AlternateAmount2.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.AlternateAmount3.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.ReportAmount1.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.ReportAmount2.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.ReportAmount3.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.ReportAmount4.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate)
					return true
				else
				if (ApplicationAmount.ReportAmount5.EnteredCurrencyRate != CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate)
					return true
				else
					return false
			else
				return false

		CrossPaid is a DerivedField
			type is Boolean
			if (CreditTransaction.CreditCustomer = DebitCustomer)
				return false
			else
				return true

		CurrGainLossMsg is a MessageField
			restricted
			"CurrencyGain-LossPaymentCredit"

		ReversalGainLossMsg is a MessageField
			restricted
			"ReversalGain-LossPaymentCredit"

		Msg8 is a MessageField
			restricted
			"PartialApplicationOf"

		ChargebackMemoMsg is a MessageField
			restricted
			"ChargebackMemoFor_"

		RNACashMsg is a MessageField
			restricted
			"RNACashAppliedOn"

		ARCashMsg is a MessageField
			restricted
			"ARCashAppliedOn"

		RealizedRNACashMsg is a MessageField
			restricted
			"RealizedCurrencyRNAOffset"

		RealizedARCCashMsg is a MessageField
			restricted
			"RealizedCurrencyAROffset"

		RealizedAdjustmentMsg is a MessageField
			restricted
			"RealizedCurrencyAdjustmentOffset"

		RealizedARAdjustmentMsg is a MessageField
			restricted
			"RealizedCurrencyARAdjustmentOffset"

		OffsetCredMsg is a MessageField
			restricted
			"OffsetCreditAppliedOn"

		ARCredMsg is a MessageField
			restricted
			"ARCreditAppliedOn"

		RoundingAdjMsg is a MessageField
			restricted
			"CashApplicationCurrencyRoundingAdjustment"

		DerivedCurrencyRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (Company.Currency.NumberOfDecimals = 2)
				return .01
			else
			if (Company.Currency.NumberOfDecimals = 0)
				return 1
			else
			if (Company.Currency.NumberOfDecimals = 3)
				return .001
			else
				return .01

		DerivedDisplayCurrency			is a DerivedField
			type is like Currency
			restricted
			LocalCurrency = actor.context.Currency
			return LocalCurrency

		CustomerPoNumber is a StringField
			type is Alpha size 20
			classic name is AR-CUST-PO-NBR
			restricted
			ReceivableInvoiceRel.CustomerPurchaseOrder

		DueDate		is a StringField
			type is Alpha size 8
			classic name is AR-DUE-DATE
			restricted
			ReceivableInvoiceDetailRel.DueDate

		ReviewPaymentApplicationsList2Title is a MessageField
			"Applications_For_Payment_<ContextReceivablePayment.PaymentNumber>"

		ReviewPaymentBatchApplicationsListTitle is a MessageField
			"Applications_For_Payment_Batch_<ContextReceivablePaymentHeader>"

		TransactionApplicationsListTitle is a MessageField
			"Applications_For_<ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_<ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice>"

		CreditsAppliedListTitle is a MessageField
			"Credits_Applied_For_<ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_<ContextReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice>"

		ApplicationType is a DerivedField
			type is Alpha 20
			restricted
			if (ReceivableApplication.TransType.CustomerPayment
			and HasCreditMemoOriginAdjustments)
				return "ConvertedToCreditMemo"
			else
			if (ReceivableApplication.TransType.CustomerPayment)
				return "WriteOff"
			else
				return "InvoiceApplication"

		DerivedTransactionAmount is a DerivedField
			type is like InternationalAmount
			if  (CreditTransaction.CreditType.Payment)
				return ReceivablePaymentRel.TransactionAmount
			else
				return ReceivableCreditInvoiceDetailRel.InvoiceAmount.CurrencyAmount

		DerivedCreditApplicationAmount is a DerivedField
			type is like InternationalAmount
			if (ReceivableApplication.TransType.CustomerPayment
			or  ReceivableApplication.TransType.CreditMemo)
				return CreditTransaction.CreditApplicationAmount.CurrencyAmount * -1
			else
				return CreditTransaction.CreditApplicationAmount.CurrencyAmount

		SelectIndicator is a DerivedField
			type is Alpha 3
			if (ReceivablePaymentApplyReverseDetailRel exists )
				return "Yes"

		SelectIndicatorForInvoice is a DerivedField
			type is Alpha 3
			if (ReceivableInvoiceApplyReverseDetailRel exists or ReceivableInvoiceApplyReverseDetailCMRel exists)
				return "Yes"

		DebitCustomer is a DerivedField
			type is like Customer
			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.Customer
			else
				return ReceivableInvoiceDetailRel.Customer

		DebitCustomerName is a DerivedField 
			type is like VendorName 
			holds pii
			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.Customer.Name
			else
				return ReceivableInvoiceDetailRel.Customer.Name

		DebitCompany is a DerivedField
			type is like ReceivableCompany
			restricted
			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.Company
			else
				return ReceivableInvoiceDetailRel.Company

		TotalAdjustments is a DerivedField	
			type is like InternationalAmount
			include SumReceivableApplicationAdjustmentSet	

			return (SumOfReceivableApplicationAdjustmentSetAdjustmentAmountCurrencyAmount)	

		TotalAdjustmentsCredit is a DerivedField	
			type is like InternationalAmount
			include SumReceivableApplicationAdjustmentSet	

			return (SumOfReceivableApplicationAdjustmentSetCreditAdjustAmount)	

		NumberOfAdjustments	is a DerivedField
			type is Decimal size 18
			restricted
			return (instance count of ReceivableApplicationAdjustment set)

		FirstAdjustmentReason is a DerivedField
			type is like ReceivableReason
			return first ApplicationAdjustmentsRel.AdjustmentReason

		FirstAdjustmentProject is a DerivedField
			type is like Project
			restricted
			return first ApplicationAdjustmentsRel.DistributionAccount.Project

		FirstAdjustmentDescription is a DerivedField
			type is Alpha 30
			return first ApplicationAdjustmentsRel.Description








		DerivedProcessLevel is a DerivedField
			type is like ReceivableProcessLevel
			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.ReceivableProcessLevel
			else
				return ReceivableInvoiceDetailRel.ReceivableProcessLevel

		DerivedOpenAmount is a DerivedField
			type is like Customer
			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.PaymentOpen
			else
				return ReceivableInvoiceDetailRel.OpenAmount

		DerivedTransactionDate is a DerivedField
			type is Date
			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.GeneralLedgerDate
			else
			if (DebitIsInvoice)
				return ReceivableInvoiceDetailRel.TransactionDate

		DerivedDueDatePlusGraceDays is a DerivedField
			type is Date
			restricted
			return (ReceivableInvoiceDetailRel.DueDate + CreditCompanyCustomerRel.FinanceChargeDueDateGraceDays)

		DaysPaidLate is a DerivedField
			type is Numeric size 5
			return DepositDate - ReceivableInvoiceDetailRel.DueDate

		DerivedDebitCurrency is a DerivedField
			type is like Currency

			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.OriginalCurrency
			else
			if (DebitIsInvoice)
				return ReceivableInvoiceDetailRel.OriginalCurrency

		DerivedDebitCurrencyDesc is a DerivedField
			type is like Description

			if (ReceivableApplication.TransType.CustomerPayment)
				return ReceivablePaymentDebitRel.OriginalCurrency.Description
			else
			if (DebitIsInvoice)
				return ReceivableInvoiceDetailRel.OriginalCurrency.Description

		DerivedCreditCurrency is a DerivedField
			type is like Currency
			if (CreditTransaction.CreditType.Payment)
				return ReceivablePaymentRel.OriginalCurrency
			else
			if (CreditIsInvoice)
				return ReceivableCreditInvoiceDetailRel.OriginalCurrency
			else
			if (CreditTransaction.CreditType.BillOfExchangePayment)
				return BillOfExchangeRel.OriginalCurrency

		DerivedCreditCurrencyDesc is a DerivedField
			type is like Description
			if (CreditTransaction.CreditType.Payment)
				return ReceivablePaymentRel.OriginalCurrency.Description
			else
			if (CreditIsInvoice)
				return ReceivableCreditInvoiceDetailRel.OriginalCurrency.Description
			else
			if (CreditTransaction.CreditType.BillOfExchangePayment)
				return BillOfExchangeRel.OriginalCurrency.Description

		BaseAppliedPlusAdjustAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			return (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + BaseDebitCreditAdjustAmount)

		DerivedCreditRate is a DerivedField
			type is like OrigRate
			if (CreditTransaction.CreditType.Payment)
				return ReceivablePaymentRel.CurrencyRate
			else
			if (CreditIsInvoice)
				return ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedFormTitle is a DerivedField
			type is MessageField
			restricted
			if (IsCreditTypePayment)
				return DerivedFormTitlePaymentApplications
			if (IsCreditMemo)
				return DerivedFormTitleCreditApplications

		DerivedFormTitlePaymentApplications is a LabelField
			restricted
			"PaymentApplications"

		DerivedFormTitleCreditApplications is a LabelField
			restricted
			"CreditApplications"

		DerivedPayment is a StringField
			type is Alpha 10
			restricted
			"Payment"

		Reference is a StringField
			type is Alpha 30
			restricted
			DerivedPayment
			" "
			ContextReceivablePayment.PaymentNumber

		CreditReference is a StringField		
			type is Alpha 30
			restricted
			DerivedPayment
			" "
			CreditTransaction.CreditNumber

		DerivedPaymentCount is a DerivedField
			type is Numeric 7
			if  (CreditTransaction.CreditType.Payment
			and  !ReceivableApplication.TransType.CreditMemo)
				return 1

		DerivedPaymentApplicationAmount is a DerivedField
			type is like InternationalAmount
			if  (CreditTransaction.CreditType.Payment
			and  !ReceivableApplication.TransType.CreditMemo)
				return CreditTransaction.CreditApplicationAmount.CurrencyAmount

		DerivedCreditMemoCount is a DerivedField
			type is Numeric 7
			if (CreditTransaction.CreditType.CreditMemo
			or  ReceivableApplication.TransType.CreditMemo)
				return 1

		DerivedCreditMemoApplicationAmount is a DerivedField
			type is like InternationalAmount
			if (CreditTransaction.CreditType.CreditMemo
			or  ReceivableApplication.TransType.CreditMemo)
				return CreditTransaction.CreditApplicationAmount.CurrencyAmount

		PartialCreditApplicationIndicator is a DerivedField
			type is Alpha 3  
			default label is "Partial"
			if  (CreditTransaction.CreditType.Payment)
				if  (ReceivablePaymentRel.Status < 7)
					return "Yes"  
			else
				if  (ReceivableCreditInvoiceDetailRel.Status < 7)
					return "Yes"  

		PartialDebitApplicationIndicator is a DerivedField
			type is Alpha 3  
			default label is "Partial"
			if (ReceivableApplication.TransType.CustomerPayment)
				if  (ReceivablePaymentDebitRel.Status < 7)
					return "Yes"  
			else
				if  (ReceivableInvoiceDetailRel.Status < 7)
					return "Yes"  

		DerivedTransactionCount is a DerivedField
			type is Numeric 7
			return 1

		DerivedDocumentNumberWithLeadingZeros is a DerivedField
			type is Alpha size 5
			restricted













			if (WsDocumentCounter < 10)	
				return "0000" + WsDocumentCounter	
			else	
			if (WsDocumentCounter < 100)	
				return "000" + WsDocumentCounter	
			else	
			if (WsDocumentCounter < 1000)	
				return "00" + WsDocumentCounter	
			else	
			if (WsDocumentCounter < 10000)	
				return "0" + WsDocumentCounter	
			else	
			if (WsDocumentCounter < 100000)	
				return WsDocumentCounter	


		DerivedCbsCounterWithLeadingZeros is a DerivedField
			type is Alpha size 5
			restricted













			if (WsCbsCounter < 10)	
				return "0000" + WsCbsCounter	
			else	
			if (WsCbsCounter < 100)	
				return "000" + WsCbsCounter	
			else	
			if (WsCbsCounter < 1000)	
				return "00" + WsCbsCounter	
			else	
			if (WsCbsCounter < 10000)	
				return "0" + WsCbsCounter	
			else	
			if (WsCbsCounter < 100000)	
				return WsCbsCounter	


		DerivedLocalRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (LocalNumberOfDecimals = 2)
				return .01
			else
			if (LocalNumberOfDecimals = 0)
				return 1
			else
			if (LocalNumberOfDecimals = 3)
				return .001
			else
			if (LocalNumberOfDecimals = 4)
				return .0001

		DerivedInvoiceDetailTypeForApplication is a DerivedField 
			type is AlphaUpper size 1
			restricted
			return ReceivableApplication.TransType

		DerivedInvoiceDetailSequenceForApplication is a DerivedField 
			type is Numeric size 6
			restricted
			return ReceivableApplication.PaymentSeq

		DerivedReceivableApplicationSequenceForContext is a DerivedField 
			type is Numeric size 6
			restricted
			return ReceivableApplication.ApplicationSequence

		DerivedReceivableCompanyForContext is a DerivedField 
			type is Numeric size 12
			restricted
			return Company 

		DerivedReceivableBatchForContext is a DerivedField 
			type is Numeric size 12
			restricted
			return ReceivableApplication.BatchNumber 

		DerivedReceivableInvoiceForContext is a DerivedField 
			type is AlphaUpper size 22
			restricted
			return ReceivableApplication.Invoice 

		DerivedFundDistributionSetState is a DerivedField 
			type is AlphaUpper size 2
			if (AllowSelectDistributionSet)
				return DistributionSetState
			else
				return ""

		DerivedHasCompletedDistributionSet is a DerivedField 
			type is Boolean
			if (AllowSelectDistributionSet)
				if ((DistributionSetState.CreatedFromPaymentApply
				or   DistributionSetState.CreatedFromRemittanceApply
				or   DistributionSetState.CreatedFromWriteoffApply
				or   DistributionSetState.CreatedFromCreditMemoApply
				or   DistributionSetState.CreatedFromSettlementDetailApply)
				and !DistributionSetNeedsReview)
					return true
				else
					return false
			else
				return false

		DerivedFundApplyTransactionDifference is a DerivedField 
			type is like InternationalAmount
			if (IsDistributionSetTypeWriteoffApply)
				if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					return TotalAdjustments - DerivedTransactionDistributionSetSum
				else
					return ((TotalAdjustments * -1) - DerivedTransactionDistributionSetSum)
			else
				if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					return ApplicationAmount.CurrencyAmount - DerivedTransactionDistributionSetSum
				else
					return ((ApplicationAmount.CurrencyAmount * -1) - DerivedTransactionDistributionSetSum)

		DerivedFundApplyCreditDifference is a DerivedField 
			type is like InternationalAmount
			if (ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
				return ApplicationAmount.CurrencyAmount - DerivedCreditDistributionSetSum
			else
				return ((ApplicationAmount.CurrencyAmount * -1) - DerivedCreditDistributionSetSum)
		
		DerivedTransactionDistributionSetSum is a DerivedField 
			type is like InternationalAmount
			return sum FundApplyTransactionDistributionRel.DistributionAmount.CurrencyAmount

		DerivedCreditDistributionSetSum is a DerivedField 
			type is like InternationalAmount
			return sum FundApplyCreditDistributionRel.DistributionAmount.CurrencyAmount

		DerivedDistributionSetState is a DerivedField 
			type is Numeric size 1
			restricted
			if (Status.ApplicationPosted)
				return 4
			if (!DistributionSetNeedsReview)
				return 3
			if (IsDistributionSetTypeCreditMemoApply)
				if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					if (DerivedTransactionDistributionSetSum = ApplicationAmount.CurrencyAmount)
						if (CreditAppliedDistributionSetStateForCreditMemo = 2)
							return 2
						else
							return 1
					else
						return 1	
				else
					if (DerivedTransactionDistributionSetSum = (ApplicationAmount.CurrencyAmount * -1))
						if (CreditAppliedDistributionSetStateForCreditMemo = 2)
							return 2
						else
							return 1
					else
						return 1
			else 
			if (IsDistributionSetTypeWriteoffApply)
				if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					if (DerivedTransactionDistributionSetSum = TotalAdjustments)
						return 2	
					else
						return 1	
				else
					if (DerivedTransactionDistributionSetSum = (TotalAdjustments * -1))
						return 2
					else
						return 1
			else
				if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					if (DerivedTransactionDistributionSetSum = ApplicationAmount.CurrencyAmount)
						return 2	
					else
						return 1	
				else
					if (DerivedTransactionDistributionSetSum = (ApplicationAmount.CurrencyAmount * -1))
						return 2
					else
						return 1
			return 0

		CreditAppliedDistributionSetStateForCreditMemo is a DerivedField 
			type is Numeric size 1
			if (IsDistributionSetTypeCreditMemoApply)
				if (ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					if (DerivedCreditDistributionSetSum = CreditTransaction.CreditApplicationAmount.CurrencyAmount)
						return 2	
					else
						return 1
				else
					if (DerivedCreditDistributionSetSum = (CreditTransaction.CreditApplicationAmount.CurrencyAmount * -1))
						return 2	
					else
						return 1
			else
				return 0

		CreditAppliedDistributionSetStateForCreditMemoText is a DerivedField 
			type is Alpha size 30
			if (IsDistributionSetTypeCreditMemoApply)
				if (Status.ApplicationPosted)
					return "Posted"
				if (!DistributionSetNeedsReview)
					return "Awaiting Application Close"
				if (CreditAppliedDistributionSetStateForCreditMemo = 2)
					return "Ready For Processing"
				else
					return "Out Of Balance"
			else
				return 0

		CreditAppliedDistributionSetStateForTransaction is a DerivedField 
			type is Numeric size 1
			if (IsDistributionSetTypeCreditMemoApply)
				if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					if (DerivedTransactionDistributionSetSum = ApplicationAmount.CurrencyAmount)
						return 2	
					else
						return 1	
				else
					if (DerivedTransactionDistributionSetSum = (ApplicationAmount.CurrencyAmount * -1))
						return 2
					else
						return 1
			else
				return 0

		CreditAppliedDistributionSetStateForTransactionText is a DerivedField 
			type is Alpha size 30
			if (IsDistributionSetTypeCreditMemoApply)
				if (Status.ApplicationPosted)
					return "Posted"
				if (!DistributionSetNeedsReview)
					return "Awaiting Application Close"
				if (CreditAppliedDistributionSetStateForTransaction = 2)
					return "Ready For Processing"
				else
					return "Out Of Balance"
			else
				return 0

		DerivedFundApplicationTypeShort is a DerivedField 
			type is Alpha size 24
			if (IsDistributionSetTypeMustBeDeleted)
				return "Must Delete"
			if (IsDistributionSetTypeWriteoffApply)
				return "Writeoff"
			else
			if (IsDistributionSetTypeCreditMemoApply)
				return "Credit Memo"
			else
				return "Payment"

		RealizedCurrencyGainLossMessage is a MessageField 
			restricted
			"RealizedCurrencyGainLoss"

		RealizedCurrencyGainMessage is a MessageField 
			restricted
			"RealizedCurrencyGain"

		RealizedCurrencyLossMessage is a MessageField 
			restricted
			"RealizedCurrencyLoss"

		RealizedCurrencyOffsetMessage is a MessageField 
			restricted
			"RealizedCurrencyAR"

		TransTypeValue is a DerivedField
			type is AlphaUpper size 1
			if (ReceivableApplication.TransType.CreditMemo)
				return "C"
			else
			if (ReceivableApplication.TransType.DebitMemo)
				return "D"
			else
			if (ReceivableApplication.TransType.Invoice)
				return "I"
			else
			if (ReceivableApplication.TransType.MixedSignLines)
				return "M"
			else
			if (ReceivableApplication.TransType.NonArPayment)
				return "N"
			else
			if (ReceivableApplication.TransType.CustomerPayment)
				return "P"
			else
				return "B" 


		DerivedCreditBatch is a DerivedField
			type is Numeric size 12
			restricted
			return CreditTransaction.CreditBatch

		DerivedCreditNumber is a DerivedField
			type is AlphaUpper size 22
			restricted
			return CreditTransaction.CreditNumber

		DerivedRTCreditApplicationAmount is a DerivedField
			type is Decimal 19.3
			restricted
			return CreditTransaction.CreditApplicationAmount.CurrencyAmount

		DerivedTransType is a DerivedField
			type is AlphaUpper size 5
			restricted
			return ReceivableApplication.TransType

		DerivedRTInvoice is a DerivedField
			type is AlphaUpper size 22
			restricted
			return ReceivableApplication.Invoice

		DerivedBatchNumber is a DerivedField
			type is Numeric size 12
			restricted
			return ReceivableApplication.BatchNumber

		DerivedApplicationSequence is a DerivedField
			type is Numeric size 7
			restricted
			return ReceivableApplication.ApplicationSequence

		DerivedPaymentSeq is a DerivedField
			type is Numeric size 7
			restricted
			return ReceivableApplication.PaymentSeq

		DerivedRTLineStatus is a DerivedField
			type is Alpha 40
			restricted
			if(LocalStatus = 1)
				return "Open"
			else
			if(LocalStatus = 7)
				return "Closed"
			else 
				return ""

		DerivedRTPaymentNumber is a DerivedField
			type is Alpha 40
			restricted
			return DerivedCreditBatch + LocalDelimiter + DerivedCreditNumber

		DerivedReceivableApplication is a DerivedField
			type is Alpha 100
			restricted
			return DerivedTransType + LocalDelimiter + DerivedRTInvoice + LocalDelimiter + DerivedPaymentSeq + LocalDelimiter + DerivedBatchNumber + LocalDelimiter + DerivedApplicationSequence 



		
		DerivedDelimiter is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
	
		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return Company.FinanceEnterpriseGroup + DerivedDelimiter + Company.GeneralLedgerCompany.AccountingEntity
		
		DerivedFEGReportCurOne is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.FinanceEnterpriseGroup.ReportCurrencyOne
	
		DerivedTransTypeVal is a DerivedField
			type is Alpha size 25
			if (ReceivableApplication.TransType.CreditMemo)
				return "CreditMemo"
			else
			if (ReceivableApplication.TransType.DebitMemo)
				return "DebitMemo"
			else
			if (ReceivableApplication.TransType.Invoice)
				return "Invoice"
			else
			if (ReceivableApplication.TransType.MixedSignLines)
				return "MixedSignLines"
			else
			if (ReceivableApplication.TransType.NonArPayment)
				return "NonArPayment"
			else
			if (ReceivableApplication.TransType.CustomerPayment)
				return "CustomerPayment"
			else
				return "BillOfExchangePayment"

		

		DerivedLineDocumentID is a DerivedField
			type is AlphaUpper size 30
			restricted
			return Company using "%d" + DerivedDelimiter + DerivedRTInvoice
		
		DerivedStatus is a DerivedField
			type is Alpha size 10
			restricted
			if(Status.AvailableForPosting)
				return "Paid"
				
		DerivedAssignmentDateTime is a DerivedField
			type is Alpha size 25
			restricted
			DerivedAssignmentDateTime = update stamp.timestamp
			return DerivedAssignmentDateTime[1:4] + "-" + DerivedAssignmentDateTime[5:6] + "-" + DerivedAssignmentDateTime[7:8] + "T" + DerivedAssignmentDateTime[9:10] + ":" + DerivedAssignmentDateTime[11:12] + ":" + DerivedAssignmentDateTime[13:14] + "Z"
		
		DerivedAssignedReportAmount is a DerivedField
			type is Decimal size 31.2
			restricted
			return ApplicationAmount.CurrencyAmount * ApplicationAmount.ReportAmount1.EnteredCurrencyRate
		
		DerivedFlag is a DerivedField
			type is Boolean
			restricted
			DerivedFlag = false
			if(ReceivableApplicationAdjustmentRel exists)
				for each ReceivableApplicationAdjustmentRel
					if(each.AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)
						DerivedFlag = true
						end for each
				return DerivedFlag
			return DerivedFlag
			
		
		ReceivableApplicationAdjTaxXML is a DerivedField
			type is XMLDocument
			restricted
			if (ReceivableApplicationAdjustmentRel exist)
				initialize LocalTaxSequenceNumber
				for each ReceivableApplicationAdjustmentRel
					if(each.AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)
						LocalTaxSequenceNumber +=1
						each.LocalTaxSequenceNumber = LocalTaxSequenceNumber
						ReceivableApplicationAdjTaxXML += template.IONSyncReceivableTrackerWithHoldingTax_ST document for each
						end for each
				return ReceivableApplicationAdjTaxXML
			else
				return ""

		DerivedBaseApplicationAmount		is a DerivedField
			type is like InternationalAmount
			restricted
			if (ApplicationSource.ReversalOfApplications)
				if (ReversalSource.PaymentReversal)
					return CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				else
				if (ReversalSource.TransactionReversal)
					return ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				if (ReversalSource.PaymentReversal)
					return CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1
				else
				if (ReversalSource.TransactionReversal)
					return ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1
		
		DerivedReversedApplicationAmount		is a DerivedField
			type is like CurrencyAmount
			restricted
			if (ApplicationSource.ReversalOfApplications)
				if (ReversalSource.PaymentReversal)
					return CreditTransaction.CreditApplicationAmount.CurrencyAmount
				else
				if (ReversalSource.TransactionReversal)
					return ApplicationAmount.CurrencyAmount
			else
				if (ReversalSource.PaymentReversal)
					return CreditTransaction.CreditApplicationAmount.CurrencyAmount * -1
				else
				if (ReversalSource.TransactionReversal)
					return ApplicationAmount.CurrencyAmount * -1

		DerivedReversalCurrency		is a DerivedField
			type is like Currency
			restricted
			if (ReversalSource.PaymentReversal)
				return DerivedCreditCurrency
			else
			if (ReversalSource.TransactionReversal)
				return DerivedDebitCurrency

		DerivedReversalDate			is a DerivedField
			type is Date
			restricted
			if (ReversalSource.PaymentReversal)
				if (ReceivablePaymentApplyReverseHeaderRel exists)
					return ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
				else
					return GeneralLedgerDate
			else
			if (ReversalSource.TransactionReversal)
				if (ReceivableInvoiceApplyReverseHeaderRel exists)
					return ReceivableInvoiceApplyReverseHeaderRel.GeneralLedgerDate
				else
					return GeneralLedgerDate
		
		DerivedReversalOperator 	is a DerivedField
			type is like ReceivableOperator  
			restricted
			if (ReversalSource.PaymentReversal)
				if (ReceivablePaymentApplyReverseHeaderRel exists)
					return ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
				else
					return ReceivableOperator
			else
			if (ReversalSource.TransactionReversal)
				if (ReceivableInvoiceApplyReverseHeaderRel exists)
					return ReceivableInvoiceApplyReverseHeaderRel.ReceivableOperator
				else
					return ReceivableOperator

		DerivedBaseApplicationAmountForErrorResult		is a DerivedField
			type is like InternationalAmount
			restricted
			if (ReceivablePaymentApplyReverseHeaderRel exists)
				return CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
			else
			if (ReceivableInvoiceApplyReverseHeaderRel exists)
				return ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
		
		DerivedReversedApplicationAmountForErrorResult		is a DerivedField
			type is like CurrencyAmount
			restricted
			if (ReceivablePaymentApplyReverseHeaderRel exists)
				return CreditTransaction.CreditApplicationAmount.CurrencyAmount * -1
			else
			if (ReceivableInvoiceApplyReverseHeaderRel exists)
				return ApplicationAmount.CurrencyAmount * -1

		DerivedReversalCurrencyForErrorResult		is a DerivedField
			type is like Currency
			restricted
			if (ReceivablePaymentApplyReverseHeaderRel exists)
				return DerivedCreditCurrency
			else
			if (ReceivableInvoiceApplyReverseHeaderRel exists)
				return DerivedDebitCurrency

		DerivedReversalDateForErrorResult					is a DerivedField
			type is Date
			restricted
			if (ReceivablePaymentApplyReverseHeaderRel exists)
				return ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
			else
			if (ReceivableInvoiceApplyReverseHeaderRel exists)
				return ReceivableInvoiceApplyReverseHeaderRel.GeneralLedgerDate
		
		DerivedReversalOperatorForErrorResult 				is a DerivedField
			type is like ReceivableOperator  
			restricted
			if (ReceivablePaymentApplyReverseHeaderRel exists)
				return ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
			else
			if (ReceivableInvoiceApplyReverseHeaderRel exists)
				return ReceivableInvoiceApplyReverseHeaderRel.ReceivableOperator
		
		DerivedApplicationOnHoldIndicator		is a DerivedField
			type is Numeric size 1
			restricted
			if (ApplicationCloseResult not entered)
				if (ApplicationAdjustmentsNeedsAttachments
				and ApplicationAdjustmentsNeedsApprovalExists)
					return 1
				else
				if (ApplicationAdjustmentsNeedsAttachments)
					return 2
				else
				if (ApplicationAdjustmentsNeedsApprovalExists)
					return 3
				else
				if (DistributionSetNeedsReview)
					return 4
			else
				return 0

	Conditions
		PaymentAppliedToCreditMemo
			when (CreditTransaction.CreditType.Payment
			and	  ReceivableApplication.TransType.CreditMemo)

		CreateGainLossEntries
			restricted
			when (HasGainLossCurrencyDifferences
			or	CreateGainLossAdjustment)

		IsEligibleForRealizedAdjustment
			restricted
			when (!LocalAdjustmentReasonType.Grouping
			and   !LocalAdjustmentReasonType.PaymentTransfer
			and   !LocalAdjustmentReasonType.MarkAsPaid
			and	  !LocalChargeback)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	CompanySecurityGroupMemberRel exists)

		MatchingCrossPaidCriteria
			restricted
			when (ContextCrossPaid not entered
			or   (ContextCrossPaid.Yes and CrossPaid)
			or   (ContextCrossPaid.No  and !CrossPaid))

		ReviewBillOfExchange
			restricted
			when (ReviewBillOfExchangeRel exists)

		WithinPostingDateRange
			restricted
			when (ApplicationPostDateRange not entered
			or   (ApplicationPostDateRange entered
			and   GeneralLedgerDate within ApplicationPostDateRange))

		WithinDueDateRange
			restricted
			when (DueDateRange not entered
			or   (DueDateRange entered
			and   ReceivableInvoiceDetailRel.DueDate within DueDateRange))

		WithinTransactionDateRange
			when (TransactionDateRange not entered
			or   (TransactionDateRange entered
			and   ReceivableInvoiceDetailRel.TransactionDate within TransactionDateRange))

		WithinDepositDateRange
			when (DepositDateRange not entered
			or   (DepositDateRange entered
			and   DepositDate within DepositDateRange))

		WithinDaysPaidLateRange
			when (DaysPaidLateRange not entered
			or   (DaysPaidLateRange entered
			and   DaysPaidLate within DaysPaidLateRange))

		CustomerInvoicesPaidLate
			restricted
			when (IsInvoiceOrDebitMemo
			and   ReceivableInvoiceDetailRel.Status >= 7
			and   ReceivableInvoiceDetailRel.OpenAmount = 0
			and   !Reverse
			and   !ApplicationSource.ReversalOfApplications
			and   DepositDate > DerivedDueDatePlusGraceDays
			and  (IsCreditTypePayment or IsCreditMemo))

		MatchingProcessLevelCriteria
			restricted
			when (ContextReceivableProcessLevel not entered
			or   ContextReceivableProcessLevel entered
			and  ReceivableInvoiceBatchRel.ReceivableProcessLevel = ContextReceivableProcessLevel)

		IsCreditTypePayment
			classic name is ARASET2
			restricted
			when (CreditTransaction.CreditType.Payment)

		CreditIsInvoice
			restricted
			when (CreditTransaction.CreditType.Invoice
			or	CreditTransaction.CreditType.DebitMemo
			or	CreditTransaction.CreditType.CreditMemo)

		DebitIsInvoice
			restricted
			when (ReceivableApplication.TransType.Invoice
			or	ReceivableApplication.TransType.DebitMemo
			or	ReceivableApplication.TransType.CreditMemo)

		IsInvoiceOrDebitMemo
			restricted
			when (ReceivableApplication.TransType.Invoice
			or	ReceivableApplication.TransType.DebitMemo)

		IsCreditCompany
			restricted
			classic name is ARASET3
			when (CreditTransaction.CreditCompany entered)

		RequiresAuditOrNotPosted
			restricted
			when (Status.RequiresAuditListing
			or	Status.AvailableForPosting)

		AuditOrNotPostedOrPendReverseOrUnreleased
			restricted
			when (Status.RequiresAuditListing
			or	Status.AvailableForPosting
			or	  Status.UnreleasedCashApplication
			or	  SelectedForReversal)

		IsNotPosted
			classic name is ARASET4
			restricted
			when (Status.UnreleasedCashApplication
			or	Status.RequiresAuditListing
			or	Status.AvailableForPosting)

		IsCreditCompanyGLDate
			classic name is ARASET6
			restricted
			when (CreditTransaction.CreditCompany entered)

		IsNotPaymentSource
			classic name is ARASET7
			restricted
			when (not CreditTransaction.CreditType.Payment)

		CreditCompanyEntered
			classic name is ARCRCOMP
			restricted
			when (CreditTransaction.CreditCompany entered)

		CreditCustomerEntered
			classic name is ARCRCUSTOMER
			restricted
			when (CreditTransaction.CreditCustomer entered
			and   CreditTransaction.CreditCustomer != "000000000")

		IsCreditMemo
			classic name is ARCRMEMO
			restricted
			when (CreditTransaction.CreditType.CreditMemo)

		IsNotPaymentOrigin
			classic name is ARO-APPLIED
			restricted
			when (not ReceivableApplication.TransType.CustomerPayment)

		IsNotReceivableInvoiceOrigin
			classic name is AROITEM-EXISTS
			restricted
			when (ReceivableInvoiceDetailRel exists)

		CreditTypePayment
			classic name is ARPAYMENT
			restricted
			when (CreditTransaction.CreditType.Payment)

		IsCreditTypeCreditMemo
			classic name is CREDIT-APPLY
			restricted
			when (CreditTransaction.CreditType.CreditMemo
			and   not ReceivableApplication.TransType.CreditMemo)

		IsCreditMemo2
			classic name is CUSTDESCPAY
			restricted
			when (CreditTransaction.CreditCustomer entered
			and   CreditTransaction.CreditCustomer != "000000000")

		IsCreditTypeDebitMemo
			classic name is DEBIT-GROUP
			restricted
			when (CreditTransaction.CreditType.DebitMemo)

		CreditTypeIsPayment
			classic name is PAYMENT-EXISTS
			restricted
			when (ReceivablePaymentRel exists)

		IsPaymentWriteoff
			classic name is PMT-WRITEOFF
			restricted
			when (ReceivableApplication.TransType.CustomerPayment)

		IsAvailableForPosting
			classic name is STATUS4
			restricted
			when (Status.AvailableForPosting)

		PaymentInContext
			restricted
			when (ContextReceivablePayment entered)

		InvoiceInContext
			restricted
			when (ContextReceivableInvoiceDetail entered)

		PaymentWriteoff
			restricted
			when (Writeoff
			and   ReceivableApplication.TransType.CustomerPayment)

		HasCreditMemoOriginAdjustments
			restricted
			when (CreditMemoOriginRel exists)

		SelectedForReversal
			restricted
			when (ReceivablePaymentApplyReverseDetailRel exists)

		ShowUnselectForReversal
			restricted
			when (SelectedForReversal
			and   !ReceivablePaymentRel.IsZeroPayment)

		SelectedForInvoiceReversal
			restricted
			when (ReceivableInvoiceApplyReverseDetailRel exists or ReceivableInvoiceApplyReverseDetailCMRel exists)

		AllowSelectForReversal
			restricted
			when (ReceivablePaymentApplyReverseHeaderRel exists
			and  !ReceivablePaymentApplyReverseDetailRel exists)

		ShowSelectForReversal
			restricted
			when (AllowSelectForReversal
			and   !ReceivablePaymentRel.IsZeroPayment)

		AllowSelectForInvoiceReversal
			restricted
			when (ContextReceivableInvoiceDetail.ReceivableInvoiceApplyReverseHeaderRel exists
			and  !SelectedForInvoiceReversal)

		InvoiceHistorical
			restricted
			when (ReceivableInvoiceDetailRel exists
			and   ReceivableInvoiceDetailRel.Status.HistoricalTransaction)	//When running with DBSessionDebug, it looks like the system treats this as an "or" statement.

		PaymentHistorical
			restricted
			when (ReceivablePaymentRel exists 
			and   ReceivablePaymentRel.Status.Historical)	//IEFIN-83925 - replaced ReceivablePaymentDebitRel.Status.Historical)	//When running with DBSessionDebug, it looks like the system treats this as an "or" statement.

		CanBeReversed
			restricted
			when (!Reverse
			and   ApplicationAmount.CurrencyAmount >= 0
			and  !ApplicationSource.ReversalOfApplications
			and  !ApplicationSource.TransferToAP
			and  !ApplicationSource.GroupedMemo
			and  !ApplicationSource.MarkedAsPaid	


			and  !HasCreditMemoOriginAdjustments)

		PostedCanBeReversed
			restricted
			when (Status.ApplicationPosted
			and   CanBeReversed)

		UnpostedCanBeReversed
			restricted
			when (IsNotPosted
			and   CanBeReversed)

		UnpostedCanBeUpdated	
			restricted
			when (!Status.ApplicationPosted
			and !ApplicationSource.MarkedAsPaid)

		AllowSelectDistributionSet 
			restricted
			when (Company.SelectFundDistributionSet
			and   Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		CreditTransactionAllowSelectDistributionSet 
			restricted
			when (CreditTransaction.CreditCompany.SelectFundDistributionSet
			and	  CreditTransaction.CreditCompany.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		AllowDistributionSetProcessing 
			restricted
			when (AllowSelectDistributionSet
			and  !HasCompletedDistributionSet
			and  !Status.ApplicationPosted
			and  !IsDistributionSetTypeMustBeDeleted
			and  !IsDistributionSetTypeNotApplicable)

		AllowProrateAndSelectAll 
			restricted
			when (AllowSelectDistributionSet
			and  !HasCompletedDistributionSet
			and  !TransientDistributionSetState.ReadyForProcessing
			and  !Status.ApplicationPosted
			and  !IsDistributionSetTypeMustBeDeleted
			and  !IsDistributionSetTypeNotApplicable)

		AllowMatchDistributionsForFundAccounting 
			restricted
			when (AllowProrateAndSelectAll
			and  (ReceivableInvoiceDetailRel.IsBillingInvoice
			or   (IsDistributionSetTypeCreditMemoApply
			and   ReceivableCreditMemoDetailRel.IsBillingInvoice)))

		HasCompletedDistributionSet 
			restricted
			when (DerivedHasCompletedDistributionSet)

		AllowReopenDistributionSet 
			restricted
			when (HasCompletedDistributionSet
			and  !Status.ApplicationPosted
			and  !IsDistributionSetTypeSettlementDetailApply
			and  !IsDistributionSetTypeMustBeDeleted
			and  !IsDistributionSetTypeNotApplicable)

		IsDistributionSetTypePaymentApply 
			when (DistributionSetState.CreatedFromPaymentApply
			or	  DistributionSetState.NeedsPaymentApply
			or	  DistributionSetState.NeedsRemittanceApply
			or	  DistributionSetState.CreatedFromRemittanceApply)

		IsDistributionSetTypeCreditMemoApply 
			when (DistributionSetState.CreatedFromCreditMemoApply
			or	  DistributionSetState.NeedsCreditMemoApply)

		IsDistributionSetTypeWriteoffApply 
			when (DistributionSetState.CreatedFromWriteoffApply
			or	  DistributionSetState.NeedsWriteoffApply)

		IsDistributionSetTypeSettlementDetailApply 
			when (DistributionSetState.CreatedFromSettlementDetailApply
			or	  DistributionSetState.NeedsSettlementDetailApply)

		IsDistributionSetTypeMustBeDeleted 
			when (DistributionSetState.MustBeDeleted)

		IsDistributionSetTypeNotApplicable 
			when (DistributionSetState.NotApplicable)

		MustBeDeletedHasNonWriteoffAdjustments 
			restricted
			when (IsDistributionSetTypeMustBeDeleted
			and   FundDistributionSetShowAdjustments)

		MustBeDeletedHasCompanyFundApplyMismatch 
			restricted
			when (IsDistributionSetTypeMustBeDeleted
			and   AllowSelectDistributionSet
			and  !CreditTransaction.CreditCompany.SelectFundDistributionSet)

		TransientDistributionSetStateNotProcessed 
			restricted
			when (!TransientDistributionSetState.AwaitingApplicationClose
			and   !TransientDistributionSetState.Posted)

		CreditAppliedDistributionSetStateForTransactionReadyForProcessing 
			restricted
			when (CreditAppliedDistributionSetStateForTransaction = 2)

		CreditAppliedDistributionSetStateForCreditMemoReadyForProcessing 
			restricted
			when (CreditAppliedDistributionSetStateForCreditMemo = 2)

		AllowDistributionSetNav 
			restricted
			when (AllowSelectDistributionSet
			and   DistributionSetState entered
			and  !IsDistributionSetTypeNotApplicable
			and  !IsDistributionSetTypeSettlementDetailApply)

		Writeoff
			restricted
			when (Company										= CreditTransaction.CreditCompany
			and   ReceivableApplication.TransType				= CreditTransaction.CreditType
			and   ReceivableApplication.Invoice					= CreditTransaction.CreditNumber
			and   ReceivableApplication.PaymentSeq				= CreditTransaction.CreditSequence)

		PaymentUnreleased
			restricted
			when ((ReceivableApplication.TransType.CustomerPayment
			and	ReceivablePaymentDebitRel.Status.Unreleased)
			or	(CreditTransaction.CreditType.Payment
			and	ReceivablePaymentRel.Status.Unreleased))

		IsPaymentOrigin
			restricted
			when (ReceivableApplication.TransType.CustomerPayment)

		HasAdjustments
			restricted
			when (AdjustmentSequence entered)

		HasCurrAdjustments
			when (GainLossAdjustmentRel exists)

		ShowAdjustments
			when (HasAdjustments
			and   CreditTransaction.CreditType.Payment)

		FundDistributionSetShowAdjustments 
			restricted
			when (AllowSelectDistributionSet
			and   ApplicationAdjustmentsRel exists
			and  !Writeoff)

		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)
			
		ApplicationAdjustmentsNeedsApprovalExists	
			restricted
			when (ApplicationAdjustmentNeedsApprovalRel exists)
		
		ApplicationAdjustmentsNeedsAttachments
			restricted
			when (ApplicationAdjustmentNeedsAttachmentRel exists)

		HasCurrencyDifferences
			when (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.AlternateAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount1.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount4.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount5.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount != 0)

		HasGainLossCurrencyDifferences
			when (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.AlternateAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount1.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount4.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ReportAmount5.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount != 0
			or	  ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount != 0
			or	ApplicationAmount.ProjectAmount.EnteredCurrencyAmount	- CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount !=0)

		MarkedForDelete
			when (RecordDeleted entered)

		IsOverApplied
			restricted
			when (first OverAppliedAdjustmentRel.ReceivableAdjustmentReasonType.OverApplied)

		IsCreditAppliedAmountChanged
			restricted
			when (CreditTransaction.CreditApplicationAmount.CurrencyAmount changed
			and CreditTransaction.CreditApplicationAmount.CurrencyAmount != old CreditTransaction.CreditApplicationAmount.CurrencyAmount)
	
		CreateGainLossAdjustment
			when (DerivedDebitCurrency != DerivedCreditCurrency)
		
		NegativePaymentWriteoff
			restricted
			when (Writeoff
			and ReceivableApplicationAdjustmentRel.CreditAdjustAmount < 0)


	Sets
		Set2
			indexed
			Instance Selection
				where (IsCreditTypePayment)
			Sort Order
				CreditTransaction.CreditCompany
				CreditTransaction.CreditBatch
				CreditTransaction.CreditSequence
				Company
				ReceivableApplication

		Set3
			indexed
			Instance Selection
				where (IsCreditCompany)
			Sort Order
				CreditTransaction.CreditCompany
				CreditTransaction.CreditCustomer
				CreditTransaction.CreditType
				CreditTransaction.CreditNumber
				CreditTransaction.CreditSequence
				CreditTransaction.CreditBatch
				CreditTransaction.CreditSuffix
				BillOfExchangeCancelSequence
				CreditAppliedSequence

		Set4
			indexed
			Instance Selection
				where (IsNotPosted)
			Sort Order
				Company
				ReceivableApplication

		Set5
			indexed
			Sort Order
				Company
				GeneralLedgerDate
				ReceivableApplication
				CreditTransaction.CreditCompany
				CreditTransaction.CreditBatch
				CreditTransaction.CreditSequence

		Set6
			indexed
			Instance Selection
				where (IsCreditCompanyGLDate)
			Sort Order
				CreditTransaction.CreditCompany
				GeneralLedgerDate
				CreditTransaction.CreditCustomer
				CreditTransaction.CreditType
				CreditTransaction.CreditNumber
				CreditTransaction.CreditSequence
				CreditTransaction.CreditSuffix
				BillOfExchangeCancelSequence
				CreditTransaction.CreditBatch
				CreditAppliedSequence

		SequenceDescending
			indexed
			Sort Order
				Company
				ReceivableApplication.TransType
				ReceivableApplication.Invoice
				ReceivableApplication.PaymentSeq
				ReceivableApplication.BatchNumber
				ReceivableApplication.ApplicationSequence descending

		ByCashApplicationResult
			Sort Order
				CashApplicationResult
				CreditTransaction.CreditCompany
				CreditTransaction.CreditType
				CreditTransaction.CreditNumber
				CreditTransaction.CreditSequence
				Company
				ReceivableApplication

		ByApplicationCloseResult
			Sort Order
				ApplicationCloseResult
				Company
				ReceivableApplication


	Relations
		BillingCompanyRel
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key
				related.Company 						= Company

		BillingInvoiceRel
			one-to-one relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company									= Company
				related.BillingInvoice.InvoicePrefix			= DerivedPrefix
				related.BillingInvoice.InvoiceNumber			= DerivedInvoice
				
		BillingInvoiceLineRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice.InvoicePrefix	= DerivedPrefix
				related.BillingInvoice.InvoiceNumber	= DerivedInvoice

		TaxTableRel	
			one-to-one relation to TaxTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
				related.TaxCode						= LocalBLLineTaxCode
				related.EffectiveDate				<= ReceivablePaymentRel.GeneralLedgerDate

		TaxCodeRel
			one-to-one relation to TaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
				related.TaxCode						= LocalBLLineTaxCode

		CurrExchangeMXRel
			one-to-one relation to CurrExchangeRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.CurrencyTable					= ReceivablePaymentRel.ReceivablePaymentHeader.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency= LocalCurrencyMX
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency= LocalTaxInvoiceCurr
				related.ExchangeDate				   <= ReceivablePaymentRel.GeneralLedgerDate

		ReportingCurrExchangeRel
			one-to-one relation to CurrExchangeRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.CurrencyTable					= ReceivablePaymentRel.ReceivablePaymentHeader.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency= ReceivablePaymentRel.OriginalCurrency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency= LocalTaxRepCurrOne
				related.ExchangeDate				   <= ReceivablePaymentRel.GeneralLedgerDate

		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company = Company

		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company



		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company

		CreditCompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = CreditTransaction.CreditCompany


		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount						= LocalSystemAccount

		ReceivableApplicationInvoiceRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
			Instance Selection
				where (related.CreditTransaction.CreditCompany				 =	Company
				and   related.CreditTransaction.CreditBatch					 =	CreditTransaction.CreditBatch
				and   related.CreditTransaction.CreditNumber				 =	CreditTransaction.CreditNumber
				and   related.CreditTransaction.CreditSequence				 =	CreditTransaction.CreditSequence
				and   related.CreditTransaction.CreditType					 =	"P"
				and   (related.ReceivableApplication.TransType				 =	"I"
				or	 related.ReceivableApplication.TransType				 =	"D")
				and   related.PostedCanBeReversed)

		ReceivableApplicationFundTestRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses ByApplicationCloseResult
				related.ApplicationCloseResult					 			= LocalAppCloseResult
				related.Company									 			= Company
			Instance Selection
				where (related.ReceivableApplication.Invoice	 			= ReceivableApplication.Invoice
				and    related.ReceivableInvoiceRel.ReceivableInvoiceType	= ReceivableInvoiceRel.ReceivableInvoiceType)

		ApplicationCloseUseOldFundAccountingReallocationMethodRel 
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "ApplicationCloseUseOldFundAccountingReallocationMethod"

		CreditCompanyCustomerRel
			classic name is ARCRCUSTOMER
			one-to-one relation to CompanyCustomer
			valid when (CreditCustomerEntered)
			required
			Field Mapping uses symbolic key
				related.Company												 =	CreditTransaction.CreditCompany
				related.Customer											 =	CreditTransaction.CreditCustomer

		ReceivablePaymentRelOnetoMany
			classic name is ARPAYMENT
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company												 =	CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader								 =	CreditTransaction.CreditBatch
				related.ReceivablePayment									 =	CreditTransaction.CreditSequence
				
		ReceivablePaymentRemittanceStatusRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses symbolic key
				related.Company							 = CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader			 = CreditTransaction.CreditBatch
				related.ReceivablePayment				 = CreditTransaction.CreditSequence
			Instance Selection
				where (related.Status						 = 2 
				and related.ReceivableInvoiceType			 =	ReceivableApplication.TransType
				and related.ReceivableInvoice				 = 	ReceivableApplication.Invoice
				and related.CashApplicationResult			 = CashApplicationResult)
				

		ReceivableInvoiceDetailRel
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail
			required
			Field Mapping uses symbolic key
				related.Company												 =	Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplication.TransType
				related.ReceivableInvoiceDetail.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 =	ReceivableApplication.PaymentSeq

		TransactionAssociatedReceivableGLDistributionRel 
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = ReceivableInvoiceDetailRel.ReceivableInvoiceRel.BatchNumber
				related.TransType										 = ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType
				related.Invoice											 = ReceivableApplication.Invoice
			Instance Selection
				where (related.AssociatedLine							 = ReceivableInvoiceDetailRel.AssociatedLine
				and	related.AccumulationType.Detail
				and	related.DistributionSource.AccountsReceivable
				and	   related.DistributionAmount.CurrencyAmount entered)

		ReceivablePaymentBatchRel
			one-to-one relation to ReceivablePaymentHeader
			valid when (CreditTransaction.CreditType.Payment)
			Field Mapping uses symbolic key
				related.Company												 =	CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader								 =	CreditTransaction.CreditBatch

		ReceivablePaymentRel
			classic name is ARPAYMENT
			one-to-one relation to ReceivablePayment
			valid when (CreditTransaction.CreditType.Payment)
			required
			Field Mapping uses symbolic key
				related.Company												 =	CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader								 =	CreditTransaction.CreditBatch
				related.ReceivablePayment									 =	CreditTransaction.CreditSequence

		CashDetailApplicationRel
			one-to-many relation to CashDetailApplication
			Field Mapping uses ByCashDetailApplicationGroup
				related.CashDetailApplicationGroup.Company 										= Company
				related.CashDetailApplicationGroup.ReceivableApplication.TransType				= ReceivableApplication.TransType
				related.CashDetailApplicationGroup.ReceivableApplication.Invoice				= ReceivableApplication.Invoice
				related.CashDetailApplicationGroup.ReceivableApplication.PaymentSeq				= ReceivableApplication.PaymentSeq
				related.CashDetailApplicationGroup.ReceivableApplication.BatchNumber			= ReceivableApplication.BatchNumber
				related.CashDetailApplicationGroup.ReceivableApplication.ApplicationSequence	= ReceivableApplication.ApplicationSequence

		ReceivableInvoiceRel
			classic name is AROIHDR
			one-to-one relation to ReceivableInvoice
			required
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableApplication.Invoice

		ReceivableCreditMemoDetailRel
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail
			required
			Field Mapping uses symbolic key
				related.Company												 =	CreditTransaction.CreditCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	CreditTransaction.CreditType
				related.ReceivableInvoiceDetail.Invoice						 =	CreditTransaction.CreditNumber
				related.ReceivableInvoiceDetail.PaymentSeq					 =	CreditTransaction.CreditSequence

		CreditMemoAssociatedReceivableGLDistributionRel 
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = CreditTransaction.CreditCompany
				related.BatchNumber										 = ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.BatchNumber
				related.TransType										 = ReceivableCreditMemoDetailRel.AlternateReceivableInvoiceType
				related.Invoice											 = CreditTransaction.CreditNumber
			Instance Selection
				where (related.AssociatedLine							 = ReceivableCreditMemoDetailRel.AssociatedLine
				and	related.AccumulationType.Detail
				and	related.DistributionSource.AccountsReceivable
				and	   related.DistributionAmount.CurrencyAmount entered)

		CreditCustomerRel
			classic name is CUSTDESCPAY
			one-to-one relation to Customer
			valid when (IsCreditMemo2)
			required
			Field Mapping uses symbolic key
				related.CustomerGroup										 =	CreditTransaction.CreditCompany.CustomerGroupField.CustomerGroup
				related.Customer											 =	CreditTransaction.CreditCustomer

		ReceivableCreditInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company												 =	CreditTransaction.CreditCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	CreditTransaction.CreditType
				related.ReceivableInvoiceDetail.Invoice						 =	CreditTransaction.CreditNumber
				related.ReceivableInvoiceDetail.PaymentSeq					 =	CreditTransaction.CreditSequence

		ReceivableInvoiceDetailCrossReferenceRel


			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key



				related.Company												 =	Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	"C"
				related.ReceivableInvoiceDetail.Invoice						 =	CreditTransaction.CreditNumber
				related.ReceivableInvoiceDetail.PaymentSeq					 =	1

		NewInvoiceDetailRel
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company												 =	NewCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	NewInvoiceType
				related.ReceivableInvoiceDetail.Invoice						 =	NewInvoice
				related.ReceivableInvoiceDetail.PaymentSeq					 =	NewSequence

		ReceivablePaymentDebitRel
			classic name is ARPAYMENT
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company												 =	Company
				related.ReceivablePaymentHeader								 =	ReceivableApplication.BatchNumber
				related.ReceivablePayment									 =	ReceivableApplication.PaymentSeq

		PrevSeqRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company												 =	Company
				related.ReceivableApplication.TransType						 =	ReceivableApplication.TransType
				related.ReceivableApplication.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq					 =	ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber					 =	ReceivableApplication.BatchNumber
			Instance Selection
				where (related.UniqueID != UniqueID)

		ReceivableApplicationAdjustmentRel
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company												 =	Company
				related.ReceivableApplication.TransType						 =	ReceivableApplication.TransType
				related.ReceivableApplication.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq					 =	ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber					 =	ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence			 =	ReceivableApplication.ApplicationSequence

		ApplicationAdjustmentNeedsApprovalRel
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company												 =	Company
				related.ReceivableApplication.TransType						 =	ReceivableApplication.TransType
				related.ReceivableApplication.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq					 =	ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber					 =	ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence			 =	ReceivableApplication.ApplicationSequence
			Instance Selection
				where (related.ReviewStatus.UnreleasedAdjustment
				or 	related.ReviewStatus.ReviewNeedsApproval
				or  related.ReviewStatus.PendingApproval)	

		ApplicationAdjustmentNeedsAttachmentRel
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company												 =	Company
				related.ReceivableApplication.TransType						 =	ReceivableApplication.TransType
				related.ReceivableApplication.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq					 =	ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber					 =	ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence			 =	ReceivableApplication.ApplicationSequence
			Instance Selection
				where (related.ApplicationAdjustmentAttachmentNotExists)
					
		AutoAdjustmentReasonRel
			one-to-one relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company												 =	ReceivableApplication.Company
				related.ReceivableReasonType 								 = "AD"
				related.ReceivableReason 			 						 =  AutoAdjustReason

		ReceivableReasonTaxWithholdingRel	
			one-to-many relation to ReceivableReason	
			Field Mapping uses symbolic key	
				related.Company												 =	ReceivableApplication.Company	
				related.ReceivableReasonType 								 = "AD"	
			Instance Selection	
				where (related.ReceivableAdjustmentReasonType.TaxWithholding	
				and related.Active)	

		CreditMemoOriginRel is a ReceivableApplicationAdjustment set
			Instance Selection
				where (related.CreditMemoOrigin)

		TransferAdjustmentRel is a ReceivableApplicationAdjustment set
			Instance Selection

				where (related.ReceivableAdjustmentReasonType.PaymentTransfer)

		ChargebackAdjustmentRel is a ReceivableApplicationAdjustment set
			Instance Selection
				where (related.ReceivableAdjustmentReasonType.Chargeback)

		MarkAsPaidAdjustmentRel is a ReceivableApplicationAdjustment set	
			Instance Selection	
				where (related.ReceivableAdjustmentReasonType.MarkAsPaid)	

		TaxWithholdingAdjustmentRel is a ReceivableApplicationAdjustment set	
			Instance Selection	
				where (related.ReceivableAdjustmentReasonType.TaxWithholding)	

		FundApplyCreditDistributionRel is a FundApplyDistribution set 
			Instance Selection
				where (related.IsCredit)

		FundApplyTransactionDistributionRel is a FundApplyDistribution set 
			Instance Selection
				where (related.IsTransaction)

		CreditAdjustmentRel
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company												 =	CreditTransaction.CreditCompany
				related.ReceivableApplication.TransType						 =	CreditTransaction.CreditType
				related.ReceivableApplication.Invoice						 =	CreditTransaction.CreditNumber
				related.ReceivableApplication.PaymentSeq					 =	CreditTransaction.CreditSequence
				related.ReceivableApplication.BatchNumber					 =	CreditTransaction.CreditBatch
				related.ReceivableApplication.ApplicationSequence			 =	CreditAppliedSequence

		ReceivablePendingAdjustmentRel
			classic name is ARPENDADJ
			one-to-many relation to ReceivablePendingAdjustment
			Field Mapping uses ByReceivablePendingAdjustmentRel
				related.Company																			 =	Company
				related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplication.TransType
				related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.PaymentSeq					 =	ReceivableApplication.PaymentSeq

		ReceivablePaymentApplyReverseHeaderRel
			classic name is ARPMTRVHDR
			one-to-one relation to ReceivablePaymentApplyReverseHeader
			Field Mapping uses symbolic key
				related.Company																			 =	CreditTransaction.CreditCompany
				related.ReceivablePaymentApplyReverseHeader.CreditBatchNumber							 =	CreditTransaction.CreditBatch
				related.ReceivablePaymentApplyReverseHeader.CreditPaymentSequence						 =	CreditTransaction.CreditSequence

		ReceivablePaymentApplyReverseDetailRel
			classic name is ARPMTRVDTL
			one-to-one relation to ReceivablePaymentApplyReverseDetail
			Field Mapping uses symbolic key
				related.ReceivablePaymentApplyReverseDetail.CreditCompany								 =	CreditTransaction.CreditCompany
				related.ReceivablePaymentApplyReverseDetail.CreditBatchNumber							 =	CreditTransaction.CreditBatch
				related.ReceivablePaymentApplyReverseDetail.CreditPaymentSequence						 =	CreditTransaction.CreditSequence
				related.ReceivablePaymentApplyReverseDetail.CreditApplicationSequence					 =	CreditAppliedSequence

		ReceivableInvoiceApplyReverseHeaderRel
			classic name is ARTRNRVHDR
			one-to-one relation to ReceivableInvoiceApplyReverseHeader
			Field Mapping uses symbolic key
				related.Company																					 =	Company
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplication.TransType
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.PaymentSeq					 =	ReceivableApplication.PaymentSeq

		ReceivableInvoiceApplyReverseCMHeaderRel
			classic name is ARTRNRVHDR
			one-to-one relation to ReceivableInvoiceApplyReverseHeader
			Field Mapping uses symbolic key
				related.Company																					 =	CreditTransaction.CreditCompany
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	CreditTransaction.CreditType
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.Invoice						 =	CreditTransaction.CreditNumber
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.PaymentSeq					 =	CreditTransaction.CreditSequence

		ReceivableInvoiceApplyReverseDetailRel
			one-to-one relation to ReceivableInvoiceApplyReverseDetail
			Field Mapping uses symbolic key

				related.Company															 =	ReceivableApplication.Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType				 =	ReceivableApplication.TransType
				related.ReceivableInvoiceDetail.Invoice									 =	ReceivableApplication.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq								 =	ReceivableApplication.PaymentSeq
				related.ReceivableInvoiceApplyReverseDetail								 =	ReceivableApplication.ApplicationSequence

		ReceivableInvoiceApplyReverseDetailCMRel
			one-to-one relation to ReceivableInvoiceApplyReverseDetail
			Field Mapping uses symbolic key
				related.Company															 =	ReceivableApplication.CreditTransaction.CreditCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType				 =	CreditTransaction.CreditType
				related.ReceivableInvoiceDetail.Invoice									 =	CreditTransaction.CreditNumber
				related.ReceivableInvoiceDetail.PaymentSeq								 =	CreditTransaction.CreditSequence
				related.ReceivableInvoiceApplyReverseDetail								 =	CreditAppliedSequence








		ReceivableOperatorRel
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company											 = Company
				related.ReceivableOperator								 = ReceivableOperator

		GainLossAdjustmentRel is a ReceivableApplicationAdjustment set
			Instance Selection
				where (related.AdjustmentReason = "CURR")

		ApplicationAdjustmentsRel is a ReceivableApplicationAdjustment set
			Instance Selection
				where (!related.GainLossAdjustment)

		BillOfExchangeRel
			one-to-one relation to CustomerDraft
			Field Mapping uses symbolic key
				related.Company											 = CreditTransaction.CreditCompany
				related.Customer										 = CreditTransaction.CreditCustomer
				related.CustomerDraft.DraftNumber						 = CreditTransaction.CreditNumber
				related.CustomerDraft.Suffix							 = CreditTransaction.CreditSequence
				related.CustomerDraft.CancelSequence					 = BillOfExchangeCancelSequence
				related.CustomerDraft.DraftSource						 = "R"

		BillOfExchangePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company											 = CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader							 = CreditTransaction.CreditBatch
				related.ReceivablePayment								 = CreditTransaction.CreditSequence

		ReviewBillOfExchangeRel
			one-to-many relation to CustomerDraft
			Field Mapping uses Set1
				related.Company											 = CreditTransaction.CreditCompany
				related.CustomerDraft.DraftNumber						 = CreditTransaction.CreditNumber
				related.CustomerDraft.Suffix							 = CreditTransaction.CreditSuffix
				related.Customer										 = CreditTransaction.CreditCustomer
				related.CustomerDraft.CancelSequence					 = BillOfExchangeCancelSequence
				related.CustomerDraft.DraftSource						 = "R"

		FundApplyDistributionTransactionDescendingRel 
			one-to-many relation to FundApplyDistribution
			Field Mapping uses SequenceDescending
				related.Company										 = Company
				related.ReceivableApplication.TransType				 = ReceivableApplication.TransType
				related.ReceivableApplication.Invoice				 = ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq			 = ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber			 = ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence	 = ReceivableApplication.ApplicationSequence
			Instance Selection
				where (related.IsTransaction)

		FundApplyDistributionCreditDescendingRel 
			one-to-many relation to FundApplyDistribution
			Field Mapping uses SequenceDescending
				related.Company										 = Company
				related.ReceivableApplication.TransType				 = ReceivableApplication.TransType
				related.ReceivableApplication.Invoice				 = ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq			 = ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber			 = ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence	 = ReceivableApplication.ApplicationSequence
			Instance Selection
				where (related.IsCredit)

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup						 = LocalGeneralLedgerCompanyGroup
				related.Company											 = Company

		CustomerGroupRel
			one-to-one relation to CustomerGroup
			Field Mapping uses symbolic key
				related.CustomerGroup									 = Company.CustomerGroupField.CustomerGroup

		ReceivableInvoiceBatchRel
			one-to-one relation to ReceivableInvoiceBatch
			Field Mapping uses symbolic key
				related.Company											 = Company
				related.ReceivableInvoiceBatch							 = ReceivableApplication.BatchNumber

		LocalCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company											 = LocalCompany

		ManualNegativeAdjustmentsRel
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company											 = Company
				related.ReceivableApplication.TransType					 = ReceivableApplication.TransType
				related.ReceivableApplication.Invoice					 = ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq				 = ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber				 = ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence		 = ReceivableApplication.ApplicationSequence
			Instance Selection
				where (!related.ReceivableAdjustmentReasonType.OverShort
				and	related.AdjustmentAmount.CurrencyAmount < 0)

		ReceivableTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company											 = LocalCompany
				related.ReceivableProcessLevel							 = LocalProcessLevel
				related.ReceivableTransactionSummary					 = LocalReceivableTransactionSummary

		SystemRealizedGainAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup							 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount									 = SystemAccount.RealizedGain

		SystemRealizedLossAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup							 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount									 = SystemAccount.RealizedLoss

		ArwsCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company											 = ArwsCompany
				related.Customer										 = ArwsCustomer

		ArwsCompanyCustomerPeriodTotalsRel
			one-to-one relation to CompanyCustomerPeriodTotals
			Field Mapping uses symbolic key
				related.Company											 = ArwsCompany
				related.CompanyCustomerPeriodTotals.Customer			 = ArwsCustomer
				related.CompanyCustomerPeriodTotals.Year				 = CalculateReceivableYearPeriod.CurrentYear

		DbReceivableGLDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = DbCompany
				related.BatchNumber										 = DbBatch
				related.TransType										 = DbTransType
				related.Invoice											 = DbInvoice
				related.ReceivableCompanyDataGroup.Customer				 = DbCustomer

		DbTaxReceivableGLDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = DbCompany
				related.BatchNumber										 = DbBatch
				related.TransType										 = DbTransType
				related.Invoice											 = DbInvoice
				related.ReceivableCompanyDataGroup.Customer				 = DbCustomer
			Instance Selection
				where (related.TaxCode entered)

		ApplicationTransactionDistributionRel  
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByApplicationCloseResult
				related.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApplicationCloseResult							= ApplicationCloseResult
			Instance Selection
				where (related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				and related.TransType											 = ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType
				and related.Invoice												 = ReceivableApplication.Invoice)

		DbCreditApplicationRel
			classic name is ARAPPLIEDCR
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany					 = DbCompany
				related.CreditTransaction.CreditCustomer				 = DbCustomer
				related.CreditTransaction.CreditType					 = DbTransType
				related.CreditTransaction.CreditNumber					 = DbInvoice
				related.CreditTransaction.CreditSequence				 = DbSequence
				related.CreditTransaction.CreditBatch					 = DbBatch
				related.CreditTransaction.CreditSuffix					 = blank
				related.BillOfExchangeCancelSequence					 = blank
				related.CreditAppliedSequence							 = DbAppSeq

		TaxPointPaymentDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set6
				related.ReceivableCompanyDataGroup.TransactionCompany	 = DbCompany
			Instance Selection
				where (related.TransType								 = DbTransType
				and	related.Invoice										 = DbInvoice
				and	related.TaxCode entered)

		TaxPointPaymentRecoveryDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set6
				related.ReceivableCompanyDataGroup.TransactionCompany   = DbCompany
			Instance Selection
				where (related.TransType								= DbTransType
				and	related.Invoice								= DbInvoice
				and	related.TaxCode entered
				and	   !related.TaxRecovery
				and related.ApplicationCloseResult not entered)

		ARCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 = CreditTransaction.CreditCompany
				related.ReceivableGeneralLedgerCode = GLOffsetCode

		GLCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableGeneralLedgerCode = ReceivableGeneralLedgerCode

		RoundingCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableGeneralLedgerCode = ReceivableInvoiceRel.ReceivableProcessLevel.CurrencyRoundingReceivableGeneralLedgerCode

		LocalPaymentCashDetailRel
			one-to-many relation to ReceivablePaymentCashDetail
			Field Mapping uses ByAdditionalDimensionsCodeBlock
				related.Company														= CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader										= CreditTransaction.CreditBatch
				related.ReceivablePayment											= CreditTransaction.CreditSequence
				related.AdditionalDimensionsCodeBlock.ToAccountingEntity			= LocalPaymentCashDetailAccount.ToAccountingEntity
                related.AdditionalDimensionsCodeBlock.AccountingUnit				= LocalPaymentCashDetailAccount.AccountingUnit
                related.AdditionalDimensionsCodeBlock.GeneralLedgerChartAccount		= LocalPaymentCashDetailAccount.GeneralLedgerChartAccount
                related.AdditionalDimensionsCodeBlock.Project						= LocalPaymentCashDetailAccount.Project
                related.AdditionalDimensionsCode									= LocalPaymentCashDetailAccount.DimensionCode

		UnreleasedPaymentCashDetailRel
			one-to-many relation to ReceivablePaymentCashDetail
			Field Mapping uses ByAdditionalDimensionsCodeBlock
				related.Company														= CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader										= CreditTransaction.CreditBatch
				related.ReceivablePayment											= CreditTransaction.CreditSequence
			Instance Selection
				where (related.Status.Unreleased)

		WorkApplicationCloseERel
			one-to-one relation to WorkApplicationCloseE
			Field Mapping uses RecKey
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.ApplicationCloseResult		= LocalApplicationCloseResult
				related.RecKey.Company				= Company
				related.RecKey.CrCompany			= CreditTransaction.CreditCompany
				related.RecKey.CrBatch				= CreditTransaction.CreditBatch
				related.RecKey.CrType				= CreditTransaction.CreditType
				related.RecKey.CrNbr				= CreditTransaction.CreditNumber
				related.RecKey.CrCustomer			= CreditTransaction.CreditCustomer
				related.RecKey.GlDate				= GeneralLedgerDate

		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company  = Company
				related.Customer = ReceivableInvoiceRel.Customer

		InterEntityInvoiceToPaymentRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity			= GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity			= CreditTransaction.CreditCompany.AccountingEntity

		InterEntityPaymentToInvoiceRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity			= CreditTransaction.CreditCompany.AccountingEntity
				related.ToAccountingEntity			= GeneralLedgerCompanyRel.AccountingEntity
		
		ReceivableApplicationAdjustmentForReversalRel
			one-to-one relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company										= Company
				related.ReceivableApplication.TransType				= ReceivableApplication.TransType
				related.ReceivableApplication.Invoice				= ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq			= ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber			= ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence	= ReceivableApplication.ApplicationSequence
				related.ReceivableApplicationAdjustment				= AdjustmentSequence

		OverAppliedAdjustmentRel is a ReceivableApplicationAdjustment set
			Instance Selection
				where (related.ReceivableAdjustmentReasonType.OverApplied)

		ReceivablePaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivablePaymentHeader	 = ReceivableApplication.BatchNumber

		CompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company			 = ReceivablePaymentHeaderRel.Company
				related.CashCode		 = ReceivablePaymentHeaderRel.CashCode

		ApplicationCloseResultDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByApplicationCloseResult
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApplicationCloseResult		= ApplicationCloseResult
		

		FSMBODConfigurationParameterRel
			one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
				related.FSMBODConfigurationParameter	= LocalConfigurationParameter


		ClaimsAndLiabilitiesRel
			one-to-many relation to ClaimsAndLiabilities
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.ClaimsAndLiabilitiesHeader	 = LocalClaimsAndLiabilitiesHeader
				related.Country						 = LocalCompanyCountry
				
		FutureDatedApplicationAdjustmentRel
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company												 =	Company
				related.ReceivableApplication.TransType						 =	ReceivableApplication.TransType
				related.ReceivableApplication.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq					 =	ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber					 =	ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence			 =	ReceivableApplication.ApplicationSequence
			Instance Selection
				where (related.AdjustmentReason != "CURR")
				
		ReceivableInvoiceFuturedateddetailsRel  	
			one-to-one relation to ReceivableInvoiceDetail  
			Field Mapping uses Set6
				related.Company												 =	Company
				related.Customer											 =  DebitCustomer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplication.TransType
				related.ReceivableInvoiceDetail.Invoice						 =	ReceivableApplication.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 =	ReceivableApplication.PaymentSeq

	Create Rules
		if (ReceivableApplication.ApplicationSequence not entered)
			if (!ReceivableApplication.TransType.CustomerPayment)
				increment ReceivableInvoiceDetailRel.LastApplicationSequence
				ReceivableApplication.ApplicationSequence = ReceivableInvoiceDetailRel.LastApplicationSequence
			else
				increment ReceivablePaymentRel.LastApplicationSequence
				ReceivableApplication.ApplicationSequence = ReceivablePaymentRel.LastApplicationSequence

		include ValidateDetailFinanceStructure

		if (AllowSelectDistributionSet) 

			if  (IsPaymentWriteoff
			or  (!ReceivableInvoiceRel.OriginIsFundAccountingSupported
			or   !ReceivableInvoiceRel.ProrateDistributionsRel exists))
				DistributionSetNeedsReview 	= false
				DistributionSetState		= "NA"
			else
				if (!Status.ApplicationPosted)
					if (!CreditTransaction.CreditCompany.SelectFundDistributionSet)
						DistributionSetNeedsReview 	= true
						DistributionSetState		= DistributionSetState.MustBeDeleted

				if (!Status.ApplicationPosted
				and !ApplicationSource.ReversalOfApplications
				and !ApplicationSource.CrossReferencedMemoApplied
				and !ApplicationSource.MixedSignedApplication)
					if (!HasCompletedDistributionSet)
						DistributionSetNeedsReview 	= true
						if (Writeoff)
							DistributionSetState	= DistributionSetState.NeedsWriteoffApply
						else
						if (CreditTypePayment)
							DistributionSetState	= DistributionSetState.NeedsPaymentApply
						else
						if (IsCreditTypeCreditMemo)
							DistributionSetState	= DistributionSetState.NeedsCreditMemoApply
			

		if (CreditTransaction.CreditCompany != Company
		and CreditTransaction.CreditCompany.AccountingEntity != Company.AccountingEntity)
			constraint (InterEntityInvoiceToPaymentRelationRel exists)
				"InterEntityRelationNotDefinedBetweenInvoiceCompany<Company>AndPaymentCompany<CreditTransaction.CreditCompany>"
			constraint (InterEntityPaymentToInvoiceRelationRel exists)
				"InterEntityRelationNotDefinedBetweenPaymentCompany<CreditTransaction.CreditCompany>AndInvoiceCompany<Company>"


	StateCycles	
		ReceivableApplicationLifeCycle is a StateCycle

			state field is Status

			UnreleasedCashApplication is a State

				Create is a Create Action
					restricted
					Entrance Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable

						include CreateRules

					Exit Rules





						LocalDebitTotal	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalCreditTotal	= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						if (!ApplicationSource.GroupedMemo)
							include CustomerBalance
						include IncreaseTransactionAmounts

						if (CreateAdjustAmount entered)

							invoke Create ReceivableApplicationAdjustment
								invoked.Company												= ReceivableApplication.Company
								invoked.ReceivableApplication									= ReceivableApplication

								invoked.AdjustmentReason										= CreateAdjustReason
								invoked.ReceivableAdjustType									= "N"
								invoked.CreditAdjustAmount										= CreateAdjustAmount
								if (CreateReceivableReasonType entered)
									invoked.ReceivableReasonType								= CreateReceivableReasonType
								if  (CreditTransaction.CreditType.Payment)
									invoked.ApplicationCurrency									= ReceivablePaymentRel.OriginalCurrency
								else
								if  (ApplicationSource.GroupedMemo)
									invoked.ApplicationCurrency									= ReceivableInvoiceDetailRel.OriginalCurrency
								else
								if  (ApplicationSource.MarkedAsPaid)	
									invoked.ApplicationCurrency									= ReceivableInvoiceDetailRel.OriginalCurrency
								else
									invoked.ApplicationCurrency									= ReceivableCreditInvoiceDetailRel.OriginalCurrency
								invoked.SkipTransferToAPEdit									= TransientSkipAPSelectEdit
								if (AdjustAccount entered)
									invoked.DistributionAccount									= AdjustAccount

								if (LocalPrmComment entered)
									invoked.LocalPrmComment										= LocalPrmComment
								if (TransientWriteoffARIncomeWithholdingCode entered)	
									invoked.ARIncomeWithholdingCode								= TransientWriteoffARIncomeWithholdingCode	
								if (TransientWriteoffARIncomeWithholdingDocumentNumber entered)	
									invoked.ARIncomeWithholdingDocumentNumber					= TransientWriteoffARIncomeWithholdingDocumentNumber	


								invoked.TransientSetToReviewed									= TransientSetToReviewed
								if (TransientAttachment entered)
									invoked.TransientAttachment									= TransientAttachment


						if  (!BypassAutoAdjust
						and  !ApplicationSource.GroupedMemo
						and  !ApplicationSource.MarkedAsPaid)	
							invoke CheckAutoAdjust

						if  (!SkipToleranceCheck
						and  !ApplicationSource.GroupedMemo
						and  !ApplicationSource.MarkedAsPaid)	
							if(Company.PreventWriteOffBeforeTransactionGLDate)
								if (ReceivablePaymentRel.GeneralLedgerDate <= GeneralLedgerDate
								and ReceivableInvoiceDetailRel.GeneralLedgerDate <= GeneralLedgerDate)
									if (CreditTransaction.CreditType.Payment
									and !ReceivablePaymentRel.IsZeroPayment)
										if (ReceivablePaymentRel.PaymentOpen entered)
											if (ReceivablePaymentRel.Status.Unreleased)
												invoke Unreleased.ToleranceCheck ReceivablePaymentRel
											else
											if (ReceivablePaymentRel.Status.Open)
												invoke Open.ToleranceCheck ReceivablePaymentRel
									else
									if (CreditTransaction.CreditType.CreditMemo
									and ReceivableCreditInvoiceDetailRel.OpenAmount entered)
										invoke ToleranceCheck ReceivableCreditInvoiceDetailRel
							else
								if (CreditTransaction.CreditType.Payment
								and !ReceivablePaymentRel.IsZeroPayment)

									if (ReceivablePaymentRel.PaymentOpen entered)
										if (ReceivablePaymentRel.Status.Unreleased)
											invoke Unreleased.ToleranceCheck ReceivablePaymentRel
										else
										if (ReceivablePaymentRel.Status.Open)
											invoke Open.ToleranceCheck ReceivablePaymentRel
								else
								if (CreditTransaction.CreditType.CreditMemo
								and ReceivableCreditInvoiceDetailRel.OpenAmount entered)
									invoke ToleranceCheck ReceivableCreditInvoiceDetailRel








						if  ((HasCurrencyDifferences
						or   CreateGainLossAdjustment)
						and ((CreditTransaction.CreditType.Payment
						and   ReceivablePaymentRel.Company.Currency = ReceivableInvoiceDetailRel.Company.Currency)
						or   (!CreditTransaction.CreditType.Payment
						and   ReceivableCreditInvoiceDetailRel.Company.Currency = ReceivableInvoiceDetailRel.Company.Currency)))
							invoke CreateGainLoss ReceivableApplicationAdjustment
								invoked.Company												= ReceivableApplication.Company
								invoked.ReceivableApplication									= ReceivableApplication
								invoked.AdjustmentReason										= "CURR"
								if  (CreditTransaction.CreditType.Payment
								and  ReceivablePaymentRel.OriginalCurrency != ApplicationCurrency)
									invoked.Description											= "Currency Gain Loss Payment Credit"
								else
									invoked.Description											= Company.GainLossReceivableReasonRel.Description
								invoked.ReceivableAdjustType									= "N"
								invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount1.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount4.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount5.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount
								if  (CreditTransaction.CreditType.Payment)
									invoked.ApplicationCurrency									= ReceivablePaymentRel.OriginalCurrency
								else
									invoked.ApplicationCurrency									= ReceivableCreditInvoiceDetailRel.OriginalCurrency
								invoked.SkipTransferToAPEdit									= TransientSkipAPSelectEdit
								invoked.GainLoss												= true


						if  (Company.Currency != Company.CustomerGroupField.CustomerGroup.Currency)
							if  (!Writeoff)
								initialize WorkAmount
								Work2Amount = BaseDebitCreditAdjustAmount - BaseDebitCreditAdjustAmount
								if (CreditTransaction.CreditType.CreditMemo)
									if (ReceivableCreditInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency != ReceivableInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency
									or  ReceivableCreditInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision != ReceivableInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision
									or  Company != CreditTransaction.CreditCompany
									or  ReceivableCreditInvoiceDetailRel.Customer != ReceivableInvoiceDetailRel.Customer)

										if (ReceivableCreditInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
											WorkAmount	= (Work2Amount * ReceivableCreditInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency)
										else
											WorkAmount	= (Work2Amount / ReceivableCreditInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency)

										if (ReceivableInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
											WorkAmount	-= (Work2Amount * ReceivableInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency)
										else
											WorkAmount	-= (Work2Amount / ReceivableInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency)

								else
								if (CreditTransaction.CreditType.Payment)
									if (ReceivablePaymentRel.CurrencyRateToCustomerGroupCurrency != ReceivableInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency
									or  ReceivablePaymentRel.CustomerGroupCurrencyMultiplicationOrDivision != ReceivableInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision
									or  Company != CreditTransaction.CreditCompany
									or  ReceivablePaymentRel.Customer != ReceivableInvoiceDetailRel.Customer)

										if (ReceivablePaymentRel.CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
											WorkAmount	= (Work2Amount * ReceivablePaymentRel.CurrencyRateToCustomerGroupCurrency)
										else
											WorkAmount	= (Work2Amount / ReceivablePaymentRel.CurrencyRateToCustomerGroupCurrency)

										if (ReceivableInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
											WorkAmount	= (Work2Amount * ReceivableInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency)
										else
											WorkAmount	= (Work2Amount / ReceivableInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency)

								if (WorkAmount entered)
									invoke BalanceUpdateGroupHasDifferentCurrency ReceivableInvoiceDetailRel.CompanyCustomerRel
										invoked.ChangeAmount			= WorkAmount

						include CreateUpdateCashDetailApplication


						if (SetToPosted)
							make transition to ApplicationPosted
						else
						if (!PaymentUnreleased)
							if (Company.ApplicationReviewRequired)
								make transition to RequiresAuditListing
							else
								make transition to AvailableForPosting

						if (ApplicationSource.MixedSignedApplication)
							make transition to ApplicationPosted





				Update is an Update Action
					Entrance Rules

						LocalCurrencyTable = Company.DerivedCurrencyTable

					Action Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable


						include UpdateCommonRoutine

						if ((CreditAdjustAmount entered and CreditAdjustAmount != TotalAdjustments)
						or  (CreateAdjustProject entered and CreateAdjustProject != FirstAdjustmentProject)
						or  (CreateDescription entered and CreateDescription != FirstAdjustmentDescription))
							constraint (ContextReceivableInvoiceDetail entered or ContextReceivablePayment entered)
								"CannotFindPaymentOrCreditMemoForApplication"
							constraint (ReceivableApplicationAdjustment set exists)
								"NoAdjustmentExistsToUpdate"
							constraint (NumberOfAdjustments = 1)
								"MultipleAdjustmentsExist;UseDetailFormToUpdate"

							invoke Update ApplicationAdjustmentsRel
								invoked.AdjustmentAmount.CurrencyAmount					= CreateAdjustAmount
								if (Writeoff)
									invoked.CreditAdjustAmount						= CreateAdjustAmount
								invoked.DistributionAccount.Project					= CreateAdjustProject
								invoked.Description									= CreateDescription


					Exit Rules						
						LocalDebitTotal	 = ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalCreditTotal = CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						include CustomerBalance
						include ChangeTransactionAmounts
						include CreateUpdateCashDetailApplication


				Remove is an Instance Action
					default label is "Delete"
					valid when (CanBeReversed)
					Entrance Rules

						if  (CreditTransaction.CreditType.Payment
						and  ReceivablePaymentRel.IsZeroPayment)
							constraint (invoking action = "ReceivablePayment.DeleteAllApplicationsUnreleased"
								or		  invoking action = "ReceivablePayment.DeleteAllApplicationsFullyApplied")
									"ForZeroAmountPayment,UsePaymentReviewApplicationsToDeleteAllTheApplicationsAtOnce.UsersCannotDeleteASingleApplication."


					Action Rules
						include ReverseUnpostedApplication
					Exit Rules
						invoke UnreleasedCashApplication.Delete


				Delete is a Delete Action
					restricted
					Action Rules
						if (!ReceivableApplication.TransType.CustomerPayment)
							LocalReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetailRel.ReceivableInvoiceDetail
							LocalReceivableInvoiceDetailGroup.Company					= ReceivableInvoiceDetailRel.Company


				ReleaseFromReceivablePaymentHeader is an Instance Action
					restricted
					Action Rules
						if (Company.ApplicationReviewRequired)
							make transition to RequiresAuditListing
						else
							make transition to AvailableForPosting



			RequiresAuditListing is a State

				Remove is an Instance Action
					default label is "Delete"
					valid when (CanBeReversed)
					Action Rules

						include ReverseUnpostedApplication
						if  (CreditTransaction.CreditType.Payment
						and  ReceivablePaymentRel.IsZeroPayment)
							constraint (invoking action = "ReceivablePayment.DeleteAllApplicationsUnreleased"
							or		  invoking action = "ReceivablePayment.DeleteAllApplicationsFullyApplied")
								"ForZeroAmountPayment,UsePaymentReviewApplicationsToDeleteAllTheApplicationsAtOnce.UsersCannotDeleteASingleApplication."

					Exit Rules
						invoke RequiresAuditListing.Delete


				Update is an Update Action
					Action Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable


						include UpdateCommonRoutine

						if ((CreateAdjustAmount entered and CreateAdjustAmount != TotalAdjustments)
						or  (CreateAdjustProject entered and CreateAdjustProject != FirstAdjustmentProject)
						or  (CreateDescription entered and CreateDescription != FirstAdjustmentDescription))
							constraint (ContextReceivableInvoiceDetail entered or ContextReceivablePayment entered)
								"CannotFindPaymentOrCreditMemoForApplication"
							constraint (ReceivableApplicationAdjustment set exists)
								"NoAdjustmentExistsToUpdate"
							constraint (NumberOfAdjustments = 1)
								"MultipleAdjustmentsExist;UseDetailFormToUpdate"

							invoke Update ApplicationAdjustmentsRel
								invoked.AdjustmentAmount.CurrencyAmount			= CreateAdjustAmount
								if (Writeoff)
									invoked.CreditAdjustAmount				= CreateAdjustAmount
								invoked.DistributionAccount.Project			= CreateAdjustProject
								invoked.Description							= CreateDescription
					Exit Rules					
						LocalDebitTotal	 = ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalCreditTotal = CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						include CustomerBalance
						include ChangeTransactionAmounts
						include CreateUpdateCashDetailApplication


				Delete is a Delete Action
					restricted
					Action Rules
						if (!ReceivableApplication.TransType.CustomerPayment)
							LocalReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetailRel.ReceivableInvoiceDetail
							LocalReceivableInvoiceDetailGroup.Company					= ReceivableInvoiceDetailRel.Company



			AvailableForPosting is a State

				Create is a Create Action
					restricted
					Field Rules
						CreditAppliedSequence	
							cannot be changed
							if  (Writeoff)
								CreditAppliedSequence = ReceivableApplication.ApplicationSequence
							else
							if  (CreditTransaction.CreditType.Payment)
								autosequence using ReceivablePaymentRel.LastApplicationSequence
							else
							if (CreditIsInvoice)
								autosequence using ReceivableCreditInvoiceDetailRel.LastApplicationSequence
							else
							if  (CreditTransaction.CreditType.BillOfExchangePayment)
								autosequence using BillOfExchangeRel.ApplicationSequence

					Entrance Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable
						include BatchCreateRules



					Action Rules


					Exit Rules

						LocalDebitTotal	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalCreditTotal	= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						include CustomerBalance
						include IncreaseTransactionAmounts
						include CreateUpdateCashDetailApplication


				Update is an Update Action
					Action Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable
						
						if (ReceivableApplicationAdjustmentRel.ReceivableAdjustmentReasonType.OverShort
						and Company.PreventWriteOffBeforeTransactionGLDate)		
							if (ReceivableApplication.TransType.CustomerPayment)
								constraint (GeneralLedgerDate >= ReceivablePaymentRel.GeneralLedgerDate)
									"ApplicationGlobalLedgerDateMustBeGreaterThanOrEqualToPaymentGlobalLedgerDate,PaymentWriteOffExists"
							else
								constraint (GeneralLedgerDate >= ReceivableInvoiceDetailRel.GeneralLedgerDate)
									"ApplicationGlobalLedgerDateMustBeGreaterThanOrEqualToInvoiceGlobalLedgerDate,InvoiceWriteOffExists"
									


						if (IsOverApplied)
							constraint (!IsCreditAppliedAmountChanged)
								"CannotChangeAppliedAmountForOverApplicationOfInvoice,MustDeleteAndReApply"
						include UpdateCommonRoutine

						if ((CreateAdjustAmount entered and CreateAdjustAmount != TotalAdjustments)
						or  (CreateAdjustProject entered and CreateAdjustProject != FirstAdjustmentProject)
						or  (CreateDescription entered and CreateDescription != FirstAdjustmentDescription))
							constraint (ContextReceivableInvoiceDetail entered or ContextReceivablePayment entered)
								"CannotFindPaymentOrCreditMemoForApplication"
							constraint (ReceivableApplicationAdjustment set exists)
								"NoAdjustmentExistsToUpdate"
							constraint (NumberOfAdjustments = 1)
								"MultipleAdjustmentsExist;UseDetailFormToUpdate"

							invoke Update ApplicationAdjustmentsRel
								invoked.AdjustmentAmount.CurrencyAmount							= CreateAdjustAmount
								if (Writeoff)
									invoked.CreditAdjustAmount					= CreateAdjustAmount
								invoked.DistributionAccount.Project								= CreateAdjustProject
								invoked.Description												= CreateDescription
				
					Exit Rules					
						LocalDebitTotal	 = ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalCreditTotal = CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - old CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						include CustomerBalance
						include ChangeTransactionAmounts
						include CreateUpdateCashDetailApplication

				Remove is an Instance Action
					default label is "Delete"
					valid when (CanBeReversed)
					Action Rules
						include ReverseUnpostedApplication



						if  (CreditTransaction.CreditType.Payment
						and  ReceivablePaymentRel.IsZeroPayment)
							constraint (invoking action = "ReceivablePayment.DeleteAllApplicationsUnreleased"
							or		  invoking action = "ReceivablePayment.DeleteAllApplicationsFullyApplied")
								"ForZeroAmountPayment,UsePaymentReviewApplicationsToDeleteAllTheApplicationsAtOnce.UsersCannotDeleteASingleApplication."


					Exit Rules
						invoke AvailableForPosting.Delete
						invoke TriggerReceivableInvoice ReceivableInvoiceRel
						invoke TriggerReceivableTracker	ReceivablePaymentRel
						invoke TriggerReceivableTransaction ReceivableInvoiceRel
						invoke TriggerCustomerPartyMaster CompanyCustomerRel
						




							






						
				Delete is a Delete Action
					restricted
					Action Rules
						if (!ReceivableApplication.TransType.CustomerPayment)
							LocalReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetailRel.ReceivableInvoiceDetail
							LocalReceivableInvoiceDetailGroup.Company					= ReceivableInvoiceDetailRel.Company


				Post is an Instance Action
					restricted	
					Action Rules

						make transition to ApplicationPosted



			ApplicationPosted is a State

				BillOfExchangeCreate is a Create Action
					valid when (CreditTransaction.CreditType.BillOfExchangePayment)
					restricted
					Field Rules
						CreditAppliedSequence
							if  (CreditTransaction.CreditType.BillOfExchangePayment)
								autosequence using BillOfExchangeRel.ApplicationSequence

					Entrance Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable
						include BatchCreateRules
					Exit Rules
						LocalDebitTotal	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalCreditTotal	= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						include IncreaseTransactionAmounts
						include CreateUpdateCashDetailApplication


				CreateFromConversion is a Create Action
					restricted

					Entrance Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable

						include BatchCreateRules
						BypassOpenAmountEdit = true






					Exit Rules
						if (CreditAppliedSequence not entered)
							if  (Writeoff)
								CreditAppliedSequence = ReceivableApplication.ApplicationSequence
							else
							if  (CreditTransaction.CreditType.Payment)
								increment ReceivablePaymentRel.LastApplicationSequence
								CreditAppliedSequence = ReceivablePaymentRel.LastApplicationSequence
							else
							if (CreditIsInvoice)
								increment ReceivableCreditInvoiceDetailRel.LastApplicationSequence
								CreditAppliedSequence = ReceivableCreditInvoiceDetailRel.LastApplicationSequence
							else
							if  (CreditTransaction.CreditType.BillOfExchangePayment)
								increment BillOfExchangePaymentRel.LastApplicationSequence
								CreditAppliedSequence = BillOfExchangePaymentRel.LastApplicationSequence

						include IncreaseTransactionAmounts
						include CreateUpdateCashDetailApplication



						if  (CreditTransaction.CreditType.Payment
						and  ReceivablePaymentRel.Status.Open)

							LocalCompany						= ReceivablePaymentRel.Company
							LocalProcessLevel					= ReceivablePaymentRel.ReceivableProcessLevel
							LocalReceivableTransactionSummary	= LocalReceivableTransactionSummary.BeginningBalance

							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel

							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount					= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + CreditAdjustAmount
						else
						if  (CreditTransaction.CreditType.CreditMemo
						and  ReceivableCreditInvoiceDetailRel.Status.OpenTransaction)
							LocalCompany						= ReceivableCreditInvoiceDetailRel.Company
							LocalProcessLevel					= ReceivableCreditInvoiceDetailRel.ReceivableProcessLevel
							LocalReceivableTransactionSummary	= LocalReceivableTransactionSummary.BeginningBalance
							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel

							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount					= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + CreditAdjustAmount



						if  (ReceivableApplication.TransType.CustomerPayment
						and  ReceivablePaymentDebitRel.Status.Open)

							LocalCompany						= ReceivablePaymentDebitRel.Company
							LocalProcessLevel					= ReceivablePaymentDebitRel.ReceivableProcessLevel
							LocalReceivableTransactionSummary	= LocalReceivableTransactionSummary.BeginningBalance

							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel

							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount					= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
						if  (ReceivableApplication.TransType.CreditMemo
						and  ReceivableInvoiceDetailRel.Status.OpenTransaction)
							LocalCompany						= ReceivableInvoiceDetailRel.Company
							LocalProcessLevel					= ReceivableInvoiceDetailRel.ReceivableProcessLevel
							LocalReceivableTransactionSummary	= LocalReceivableTransactionSummary.BeginningBalance
							if (!ReceivableTransactionSummaryRel exists)
								invoke Create ReceivableTransactionSummaryRel

							invoke AddAmount ReceivableTransactionSummaryRel
								invoked.Amount					= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount


				UpdateResultAndCheckGainLoss is an Instance Action
					restricted
					Action Rules
						if (ReceivableApplication.TransType.Invoice
						or  ReceivableApplication.TransType.DebitMemo
						or  ReceivableApplication.TransType.CreditMemo)
							if (Writeoff)
								Result = "W"  
							else
							if ((ReceivableApplication.ApplicationSequence < ReceivableInvoiceDetailRel.LastApplicationSequence)
							or  (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + BaseDebitCreditAdjustAmount  != ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount))
								if (ReceivablePaymentRel.DepositDate	  > ReceivableInvoiceDetailRel.DueDate)
									Result = "D"   
								else
									Result = "P"	
							else
								if (ReceivablePaymentRel.DepositDate	  > ReceivableInvoiceDetailRel.DueDate)
									Result = "L"	
								else
									Result = "F"	









						if  ((HasCurrencyDifferences
						or   CreateGainLossAdjustment)
						and ((CreditTransaction.CreditType.Payment
						and   ReceivablePaymentRel.Company.Currency = ReceivableInvoiceDetailRel.Company.Currency)
						or   (!CreditTransaction.CreditType.Payment
						and   ReceivableCreditInvoiceDetailRel.Company.Currency = ReceivableInvoiceDetailRel.Company.Currency)))
							invoke CreateGainLoss ReceivableApplicationAdjustment
								invoked.Company												= ReceivableApplication.Company
								invoked.ReceivableApplication									= ReceivableApplication
								invoked.AdjustmentReason										= "CURR"
								if  (CreditTransaction.CreditType.Payment
								and  ReceivablePaymentRel.OriginalCurrency != ApplicationCurrency)
									invoked.Description											= "Currency Gain Loss Payment Credit"
								else
									invoked.Description											= Company.GainLossReceivableReasonRel.Description
								invoked.ReceivableAdjustType									= "N"
								invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount1.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount4.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount	= ApplicationAmount.ReportAmount5.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount
								if  (CreditTransaction.CreditType.Payment)
									invoked.ApplicationCurrency									= ReceivablePaymentRel.OriginalCurrency
								else
									invoked.ApplicationCurrency									= ReceivableCreditInvoiceDetailRel.OriginalCurrency

								invoked.SkipTransferToAPEdit									= TransientSkipAPSelectEdit
								invoked.GainLoss												= true


				Update is an Update Action
					restricted
					Entrance Rules
						LocalCurrencyTable = Company.DerivedCurrencyTable


				SelectForReversal is an Instance Action
					valid when (AllowSelectForReversal)
					Action Rules
						if (AllowSelectForReversal)	//IEFIN-74079 - Adding "if" should cover when the "valid when" clause gets ignored when action is invoked by another action.
							if (ReceivableApplicationAdjustmentRel.ReceivableAdjustmentReasonType.OverShort
							and Company.PreventWriteOffBeforeTransactionGLDate)
								if (ReceivableApplication.TransType.CustomerPayment)
									constraint (ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate >= ReceivablePaymentRel.GeneralLedgerDate)
										"ReversalGlobalLedgerDateMustBeGreaterThanOrEqualToPaymentGlobalLedgerDate,PaymentWriteOffExists"
								else
									constraint (ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate >= ReceivableInvoiceDetailRel.GeneralLedgerDate)
										"ReversalGlobalLedgerDateMustBeGreaterThanOrEqualToInvoiceGlobalLedgerDate,InvoiceWriteOffExists"

							if (Company != CreditTransaction.CreditCompany) 
								if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
									constraint (ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
										"PostDate<ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

							if (CreditTransaction.CreditType.Payment)
								constraint (!ReceivablePaymentRel.RTMPaymentRel exists)
									"CannotReverseApplicationRelatedToRTMPayment"
	
							if  (CreditTransaction.CreditType.Payment
							and  ReceivablePaymentRel.IsZeroPayment)
								NextSentence = true
							else
								include EligibleForSelection






							invoke Create ReceivablePaymentApplyReverseDetailRel
								invoked.ReceivablePaymentApplyReverseDetail.CreditCompany				= CreditTransaction.CreditCompany
								invoked.ReceivablePaymentApplyReverseDetail.CreditBatchNumber			= CreditTransaction.CreditBatch
								invoked.ReceivablePaymentApplyReverseDetail.CreditPaymentSequence		= CreditTransaction.CreditSequence
								invoked.ReceivablePaymentApplyReverseDetail.CreditApplicationSequence	= CreditAppliedSequence
								invoked.Company															= Company 
								invoked.TransactionType													= ReceivableApplication.TransType
								invoked.Invoice															= ReceivableApplication.Invoice
								invoked.PaymentSequence													= ReceivableApplication.PaymentSeq
								invoked.BatchNumber														= ReceivableApplication.BatchNumber
								invoked.ApplicationSequence												= ReceivableApplication.ApplicationSequence


				UnselectReversal is an Instance Action
					valid when (ShowUnselectForReversal)
					Action Rules
						invoke Delete ReceivablePaymentApplyReverseDetailRel


				SelectForInvoiceReversal is an Instance Action
					valid when (AllowSelectForInvoiceReversal)
					Action Rules
						if (Company != CreditTransaction.CreditCompany) 
							if (CreditCompanySystemClosingControlRel.Control and CreditTransaction.CreditCompany.VerifyGLDateWithinGLDateRange)
								constraint (ReceivableInvoiceApplyReverseHeaderRel.GeneralLedgerDate within CreditCompanySystemClosingControlRel.ValidEntryDate)
									"PostDate<ReceivableInvoiceApplyReverseHeaderRel.GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<CreditTransaction.CreditCompany>;ValidDateRangeIs<CreditCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CreditCompanySystemClosingControlRel.ValidEntryDate.End>"
						
						include EligibleForSelection
						
						if (Company.PreventWriteOffBeforeTransactionGLDate 
						and ReceivableApplicationAdjustmentRel.ReceivableAdjustmentReasonType.OverShort)
							constraint (ReceivableInvoiceApplyReverseHeaderRel.GeneralLedgerDate >= ReceivableInvoiceDetailRel.GeneralLedgerDate)
								"ReversalGlobalLedgerDateMustBeGreaterThanOrEqualToInvoiceGlobalLedgerDate,WriteOffExists"

						if (CreditTransaction.CreditType.Payment)
							constraint (!ReceivablePaymentRel.RTMPaymentRel exists)
								"CannotReverseApplicationRelatedToRTMPayment"

						if (ApplicationSource.MixedSignedApplication
						and AllowSelectDistributionSet)
							constraint (false)
								"CannotReverseAutomaticMixedSignedApplication"

						invoke Create ReceivableInvoiceApplyReverseDetail
							if(ReceivableInvoiceApplyReverseCMHeaderRel exists and CreditTransaction.CreditType.CreditMemo and (ReceivableApplication.TransType.Invoice or ReceivableApplication.TransType.DebitMemo))
								invoked.CreditCompany														= ReceivableApplication.Company 
								invoked.CreditTransactionType												= ReceivableApplication.TransType
								invoked.CreditInvoice														= ReceivableApplication.Invoice 
								invoked.CreditPaymentSequence												= ReceivableApplication.PaymentSeq 
								invoked.CreditApplicationSequence											= ReceivableApplication.ApplicationSequence 
								invoked.CreditBatchNumber													= ReceivableApplication.BatchNumber
								invoked.Company																= ReceivableApplication.CreditTransaction.CreditCompany
								invoked.ReceivableInvoiceDetail.PaymentSeq									= CreditTransaction.CreditSequence
								invoked.CreditTransactionNumber												= ReceivableApplication.Invoice
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType					= CreditTransaction.CreditType
								invoked.ReceivableInvoiceDetail.Invoice										= CreditTransaction.CreditNumber
								invoked.BatchNumber															= CreditTransaction.CreditBatch
								invoked.ReceivableInvoiceApplyReverseDetail									= CreditAppliedSequence  
							else
								invoked.CreditCompany														= CreditTransaction.CreditCompany 
								invoked.CreditTransactionType												= CreditTransaction.CreditType
								if (CreditTransaction.CreditType = "P")
									invoked.CreditTransactionNumber											= CreditTransaction.CreditNumber
									invoked.CreditInvoice													= CreditTransaction.CreditNumber
								else
									invoked.CreditTransactionNumber											= CreditTransaction.CreditNumber
									invoked.CreditInvoice													= CreditTransaction.CreditNumber
								invoked.CreditPaymentSequence												= CreditTransaction.CreditSequence 
								invoked.CreditApplicationSequence											= CreditAppliedSequence 
								invoked.CreditBatchNumber													= CreditTransaction.CreditBatch
								invoked.Company																= ReceivableApplication.Company 
								invoked.ReceivableInvoiceDetail.PaymentSeq									= ReceivableApplication.PaymentSeq
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType					= ReceivableApplication.TransType
								invoked.ReceivableInvoiceDetail.Invoice										= ReceivableApplication.Invoice
								invoked.BatchNumber															= ReceivableApplication.BatchNumber
								invoked.ReceivableInvoiceApplyReverseDetail									= ReceivableApplication.ApplicationSequence


				UnselectInvoiceReversal is an Instance Action
					valid when (SelectedForInvoiceReversal)
					Action Rules
						invoke Delete ReceivableInvoiceApplyReverseDetailRel
						invoke Delete ReceivableInvoiceApplyReverseDetailCMRel


				UpdateCancelSequence is an Update Action
					restricted
					bypass field rules


				Reverse is an Instance Action
					restricted
					valid when (CanBeReversed)
					Parameters
						PrmReceivablesJobResult 	is a ReceivablesJobResult
						PrmUpdateRecords			is AlphaUpper size 1
							States
								No		value is "N"
								Yes		value is "Y"
						PrmReversalSource			is AlphaUpper size 2
							States
								PaymentReversal		value is "PR"
								TransactionReversal	value is "TR"
					
					Action Rules
						if (PrmUpdateRecords.No)
							ReceivablesJobResult	= PrmReceivablesJobResult
							ReversalSource			= PrmReversalSource
						else
							if (CanBeReversed)	//IEFIN-74079 - Adding "if" should cover when the "valid when" clause gets ignored when action is invoked by another action.  Since this action is restricted, it would always be invoked by another action.
								ReceivablesJobResult	= PrmReceivablesJobResult
								invoke AvailableForPosting.Create ReceivableApplication
									assign result to NewReceivableApplication
									fill in fields from this instance
										except invoked.Result
										except invoked.Reverse
										except invoked.RecordDeleted
										except invoked.AmdArObjId
										except invoked.AmdOffObjId 
										except invoked.OriginatingInterfaceRun
										except invoked.CashApplicationResult
										except invoked.ApplicationCloseResult

									initialize invoked.ReceivableApplication.ApplicationSequence
									initialize invoked.ReceivableApplication.CreditAppliedSequence
									initialize invoked.BaseDebitCreditAdjustAmount
									initialize invoked.CreditAdjustAmount
									invoked.Company								= this instance.Company
									invoked.Reverse								= false
									invoked.BaseDebitCreditAdjustAmount			= this instance.BaseDebitCreditAdjustAmount * -1

									invoked.ApplicationAmount.ExchangeDate								= this instance.ApplicationAmount.ExchangeDate
									invoked.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
									invoked.ApplicationAmount.AlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount.EnteredCurrencyRate
									invoked.ApplicationAmount.AlternateAmount2.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount2.EnteredCurrencyRate
									invoked.ApplicationAmount.AlternateAmount3.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount3.EnteredCurrencyRate
									invoked.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate	= this instance.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
									invoked.ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
									invoked.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
									invoked.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
									invoked.ApplicationAmount.ProjectAmount.EnteredCurrencyRate			= this instance.ApplicationAmount.ProjectAmount.EnteredCurrencyRate
									invoked.ApplicationAmount.ReportAmount1.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount1.EnteredCurrencyRate
									invoked.ApplicationAmount.ReportAmount2.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount2.EnteredCurrencyRate
									invoked.ApplicationAmount.ReportAmount3.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount3.EnteredCurrencyRate
									invoked.ApplicationAmount.ReportAmount4.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount4.EnteredCurrencyRate
									invoked.ApplicationAmount.ReportAmount5.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount5.EnteredCurrencyRate

									invoked.ApplicationAmount.CurrencyAmount							= this instance.ApplicationAmount.CurrencyAmount * -1
									invoked.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount	= this instance.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.AlternateAmount.EnteredCurrencyAmount		= this instance.ApplicationAmount.AlternateAmount.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount	= this instance.ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount	= this instance.ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount  = this instance.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount	= this instance.ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount  = this instance.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount  = this instance.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount		= this instance.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ReportAmount1.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount1.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ReportAmount2.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount2.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ReportAmount3.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount3.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ReportAmount4.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount4.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.ReportAmount5.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount5.EnteredCurrencyAmount * -1
									invoked.ApplicationAmount.KeepRateAndAmount							= true

									invoked.CreditTransaction.CreditApplicationAmount.ExchangeDate								= this instance.ApplicationAmount.ExchangeDate
									invoked.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount2.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount3.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate	= this instance.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate			= this instance.ApplicationAmount.ProjectAmount.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount1.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount2.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount3.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount4.EnteredCurrencyRate
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount5.EnteredCurrencyRate

									invoked.CreditTransaction.CreditApplicationAmount											= this instance.CreditTransaction.CreditApplicationAmount 
									invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount							= this instance.CreditTransaction.CreditApplicationAmount.CurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount  = this instance.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount  = this instance.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount  = this instance.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount * -1
									invoked.CreditTransaction.CreditApplicationAmount.KeepRateAndAmount							= true

									if (ReceivablePaymentApplyReverseHeaderRel exists)
										invoked.GeneralLedgerDate					= ReceivablePaymentApplyReverseHeaderRel.GeneralLedgerDate
										invoked.ReceivableOperator					= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
										invoked.TransientZeroAmountApplication		= true
									else
									if (ReceivableInvoiceApplyReverseCMHeaderRel exists)   
										invoked.GeneralLedgerDate					= ReceivableInvoiceApplyReverseCMHeaderRel.GeneralLedgerDate
										invoked.ReceivableOperator					= ReceivableInvoiceApplyReverseCMHeaderRel.ReceivableOperator
									else
										invoked.GeneralLedgerDate					= ReceivableInvoiceApplyReverseHeaderRel.GeneralLedgerDate
										invoked.ReceivableOperator					= ReceivableInvoiceApplyReverseHeaderRel.ReceivableOperator

									invoked.ApplicationSource					= "R"
									invoked.ReversalSource						= PrmReversalSource
								
								for each ReceivableApplicationAdjustment set
									invoke CreateOnly ReceivableApplicationAdjustment
										fill in fields from each
											except invoked.AdjustAmount
											except invoked.BaseAdjustAmount
										invoked.ReceivableApplication.ApplicationSequence		= NewReceivableApplication.ReceivableApplication.ApplicationSequence
										initialize invoked.ReceivableApplicationAdjustment

										invoked.AdjustmentAmount.ExchangeDate								= each.AdjustmentAmount.ExchangeDate
										invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate
										invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate
										invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate
										invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate
										invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate
										invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate
										invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate
										invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate
										invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate			= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate
										invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate
										invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate
										invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate
										invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate
										invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate

										invoked.AdjustmentAmount.CurrencyAmount								= each.AdjustmentAmount.CurrencyAmount * -1
										invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount * -1
										invoked.AdjustmentAmount.KeepRateAndAmount							= true

										invoked.CreditAdjustAmount				= each.CreditAdjustAmount * -1
										invoked.BaseEarnedDiscountAmount		= each.BaseEarnedDiscountAmount * -1
										invoked.BaseUnEarnedDiscountAmount		= each.BaseUnEarnedDiscountAmount * -1
										invoked.ReceivableAdjustType			= "N"
										if (each.Description				= "Currency gain - loss PmtCredit")
											invoked.Description				= "Reversal gain - loss PmtCredit"
										else
											invoked.Description					= "Reversal"

										invoked.Reversal						= true
										if (each.GainLossAdjustment)
											invoked.GainLoss					= true

								if (CreditAdjustAmount != 0)
									for each CreditAdjustmentRel  
										invoke CreateOnly ReceivableApplicationAdjustment
											fill in fields from each
											invoked.ReceivableApplication.ApplicationSequence	= NewReceivableApplication.ReceivableApplication.ApplicationSequence
											initialize invoked.ReceivableApplicationAdjustment

											invoked.AdjustmentAmount.ExchangeDate								= each.AdjustmentAmount.ExchangeDate
											invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate
											invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate
											invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate
											invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate
											invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate
											invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate
											invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate
											invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate
											invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate			= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate
											invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate
											invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate
											invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate
											invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate
											invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate

											invoked.AdjustmentAmount.CurrencyAmount								= each.AdjustmentAmount.CurrencyAmount * -1
											invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount * -1
											invoked.AdjustmentAmount.KeepRateAndAmount							= true

											invoked.CreditAdjustAmount				= each.CreditAdjustAmount * -1
											invoked.BaseEarnedDiscountAmount		= each.BaseEarnedDiscountAmount * -1
											invoked.BaseUnEarnedDiscountAmount		= each.BaseUnEarnedDiscountAmount * -1
											invoked.ReceivableAdjustType			= "N"
											if (each.Description				= "Currency gain - loss PmtCredit")
												invoked.Description				= "Reversal gain - loss PmtCredit"
											else
												invoked.Description					= "Reversal"

											invoked.Reversal						= true
											if (each.GainLossAdjustment)
												invoked.GainLoss					= true

								if (AllowSelectDistributionSet) 
									NextSentence = true
								else
								if(ReceivablePaymentRemittanceStatusRel exists)
									invoke FastUpdate ReceivablePaymentRemittanceStatusRel
										invoked.Status 						= 0

								if (AllowSelectDistributionSet 
								and FundApplyDistribution set exists)
									for each FundApplyDistribution set
										invoke Create FundApplyDistribution
											invoked.Company													= Company
											invoked.ReceivableApplication.TransType							= ReceivableApplication.TransType
											invoked.ReceivableApplication.Invoice							= ReceivableApplication.Invoice
											invoked.ReceivableApplication.PaymentSeq						= ReceivableApplication.PaymentSeq
											invoked.ReceivableApplication.BatchNumber						= ReceivableApplication.BatchNumber
											invoked.ReceivableInvoiceType									= each.ReceivableInvoiceType
											invoked.Customer												= each.Customer
											invoked.ReceivableApplication.ApplicationSequence				= NewReceivableApplication.ReceivableApplication.ApplicationSequence
											invoked.OriginalLastDistributionSequence						= each.OriginalLastDistributionSequence
											invoked.OriginalReceivableGLDistribution						= each.OriginalReceivableGLDistribution
											invoked.ApplyFundDistributionAccount							= each.ApplyFundDistributionAccount
											invoked.OriginalCurrency										= each.OriginalCurrency
											invoked.Type													= each.Type

											invoked.DistributionAmount.ExchangeDate								= each.DistributionAmount.ExchangeDate
											invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
											invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount.EnteredCurrencyRate
											invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
											invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
											invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
											invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
											invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
											invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
											invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= each.DistributionAmount.ProjectAmount.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount1.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount2.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount3.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount4.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount5.EnteredCurrencyRate

											invoked.DistributionAmount.CurrencyAmount							= each.DistributionAmount.CurrencyAmount * -1
											invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.KeepRateAndAmount						= true

								if (Company.DetailedRNADistributions
								and CashDetailApplicationRel exists)
									for each CashDetailApplicationRel
										invoke Create CashDetailApplication
											invoked.Company																	= CreditTransaction.CreditCompany
											invoked.ReceivablePaymentHeader													= CreditTransaction.CreditBatch
											invoked.ReceivablePayment														= CreditTransaction.CreditSequence
											invoked.ReceivablePaymentCashDetail												= each.ReceivablePaymentCashDetail
											invoked.CashDetailApplicationGroup.Company										= Company
											invoked.CashDetailApplicationGroup.ReceivableApplication.TransType				= ReceivableApplication.TransType
											invoked.CashDetailApplicationGroup.ReceivableApplication.Invoice				= ReceivableApplication.Invoice
											invoked.CashDetailApplicationGroup.ReceivableApplication.PaymentSeq				= ReceivableApplication.PaymentSeq
											invoked.CashDetailApplicationGroup.ReceivableApplication.BatchNumber			= ReceivableApplication.BatchNumber
											invoked.CashDetailApplicationGroup.ReceivableApplication.ApplicationSequence	= NewReceivableApplication.ReceivableApplication.ApplicationSequence
											invoked.ApplicationPostDate														= NewReceivableApplication.GeneralLedgerDate
											invoked.ApplicationSource														= "A"

											invoked.DistributionAmount.ExchangeDate								= each.DistributionAmount.ExchangeDate
											invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= each.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
											invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount.EnteredCurrencyRate
											invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
											invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= each.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
											invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate
											invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate
											invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate
											invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate
											invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= each.DistributionAmount.ProjectAmount.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount1.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount2.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount3.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount4.EnteredCurrencyRate
											invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= each.DistributionAmount.ReportAmount5.EnteredCurrencyRate

											invoked.DistributionAmount.CurrencyAmount							= each.DistributionAmount.CurrencyAmount * -1
											invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount = each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount = each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1
											invoked.DistributionAmount.KeepRateAndAmount						= true

								Reverse = true
								initialize Result


				BillOfExchangeReverse is an Instance Action
					restricted
					
					Parameters
						PrmCancelDate is Date
					
					Action Rules

						invoke ApplicationPosted.BillOfExchangeCreate ReceivableApplication
							assign result to NewReceivableApplication
							fill in fields from this instance
								except invoked.Result
								except invoked.Reverse
								except invoked.RecordDeleted
								except invoked.AmdArObjId
								except invoked.AmdOffObjId
								except invoked.OriginatingInterfaceRun
								except invoked.CashApplicationResult
								except invoked.ApplicationCloseResult

							initialize invoked.ReceivableApplication.ApplicationSequence
							initialize invoked.ReceivableApplication.CreditAppliedSequence
							initialize invoked.BaseDebitCreditAdjustAmount
							initialize invoked.CreditAdjustAmount
							invoked.Company								= this instance.Company
							invoked.Reverse							= false

							invoked.BaseDebitCreditAdjustAmount									= this instance.BaseDebitCreditAdjustAmount * -1

							invoked.ApplicationAmount.ExchangeDate								= this instance.ApplicationAmount.ExchangeDate
							invoked.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.ApplicationAmount.AlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount.EnteredCurrencyRate
							invoked.ApplicationAmount.AlternateAmount2.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							invoked.ApplicationAmount.AlternateAmount3.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							invoked.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate	= this instance.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							invoked.ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							invoked.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							invoked.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							invoked.ApplicationAmount.ProjectAmount.EnteredCurrencyRate			= this instance.ApplicationAmount.ProjectAmount.EnteredCurrencyRate
							invoked.ApplicationAmount.ReportAmount1.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount1.EnteredCurrencyRate
							invoked.ApplicationAmount.ReportAmount2.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount2.EnteredCurrencyRate
							invoked.ApplicationAmount.ReportAmount3.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount3.EnteredCurrencyRate
							invoked.ApplicationAmount.ReportAmount4.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount4.EnteredCurrencyRate
							invoked.ApplicationAmount.ReportAmount5.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount5.EnteredCurrencyRate

							invoked.ApplicationAmount.CurrencyAmount							= this instance.ApplicationAmount.CurrencyAmount * -1
							invoked.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount	= this instance.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.AlternateAmount.EnteredCurrencyAmount	= this instance.ApplicationAmount.AlternateAmount.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount	= this instance.ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount	= this instance.ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount  = this instance.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount	= this instance.ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount  = this instance.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount  = this instance.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount		= this instance.ApplicationAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ReportAmount1.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ReportAmount2.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ReportAmount3.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ReportAmount4.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.ReportAmount5.EnteredCurrencyAmount		= this instance.ApplicationAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.ApplicationAmount.KeepRateAndAmount							= true

							invoked.CreditTransaction.CreditApplicationAmount.ExchangeDate								= this instance.ApplicationAmount.ExchangeDate
							invoked.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate		= this instance.ApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate	= this instance.ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate		= this instance.ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate	= this instance.ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate			= this instance.ApplicationAmount.ProjectAmount.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount1.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount2.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount3.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount4.EnteredCurrencyRate
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate			= this instance.ApplicationAmount.ReportAmount5.EnteredCurrencyRate

							invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount							= this instance.CreditTransaction.CreditApplicationAmount.CurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount  = this instance.CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount	= this instance.CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount  = this instance.CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount  = this instance.CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount		= this instance.CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.CreditTransaction.CreditApplicationAmount.KeepRateAndAmount							= true

							invoked.GeneralLedgerDate					= PrmCancelDate
							invoked.ReceivableOperator					= ReceivablePaymentApplyReverseHeaderRel.ReceivableOperator
							invoked.ApplicationSource					= "R"

						for each ReceivableApplicationAdjustment set
							invoke CreateOnly ReceivableApplicationAdjustment
								fill in fields from each
								invoked.ReceivableApplication.ApplicationSequence		= NewReceivableApplication.ReceivableApplication.ApplicationSequence
								initialize invoked.ReceivableApplicationAdjustment

								invoked.AdjustmentAmount.ExchangeDate								= each.AdjustmentAmount.ExchangeDate
								invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate
								invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate
								invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate
								invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate
								invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate
								invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate
								invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate
								invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate			= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate
								invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate
								invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate
								invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate
								invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate
								invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate

								invoked.AdjustmentAmount.CurrencyAmount								= each.AdjustmentAmount.CurrencyAmount * -1
								invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount	= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount * -1
								invoked.AdjustmentAmount.KeepRateAndAmount							= true

								invoked.CreditAdjustAmount				= each.CreditAdjustAmount * -1
								invoked.BaseEarnedDiscountAmount		= each.BaseEarnedDiscountAmount * -1
								invoked.BaseUnEarnedDiscountAmount		= each.BaseUnEarnedDiscountAmount * -1
								invoked.ReceivableAdjustType			= "N"
								invoked.Description						= "Reversal"

								invoked.Reversal						= true
								if (each.GainLossAdjustment)
									invoked.GainLoss					= true

						if (CreditAdjustAmount != 0)
							for each CreditAdjustmentRel  
								invoke CreateOnly ReceivableApplicationAdjustment
									fill in fields from each
									invoked.ReceivableApplication.ApplicationSequence	= NewReceivableApplication.ReceivableApplication.ApplicationSequence
									initialize invoked.ReceivableApplicationAdjustment

									invoked.AdjustmentAmount.ExchangeDate								= each.AdjustmentAmount.ExchangeDate
									invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate
									invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyRate
									invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate
									invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate
									invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyRate
									invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyRate
									invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyRate
									invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate		= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyRate
									invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate			= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyRate
									invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyRate
									invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyRate
									invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyRate
									invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyRate
									invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate			= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyRate

									invoked.AdjustmentAmount.CurrencyAmount								= each.AdjustmentAmount.CurrencyAmount * -1
									invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount	= each.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount		= each.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount		= each.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount * -1
									invoked.AdjustmentAmount.KeepRateAndAmount							= true

									invoked.CreditAdjustAmount				= each.CreditAdjustAmount * -1
									invoked.BaseEarnedDiscountAmount		= each.BaseEarnedDiscountAmount * -1
									invoked.BaseUnEarnedDiscountAmount		= each.BaseUnEarnedDiscountAmount * -1
									invoked.ReceivableAdjustType			= "N"
									invoked.Description						= "Reversal"

									invoked.Reversal						= true
									if (each.GainLossAdjustment)
										invoked.GainLoss					= true

						Reverse = true
						initialize Result
				
				Purge is a Purge Action
					restricted
					Entrance Rules
						invoke Purge ReceivableApplicationAdjustmentRel 
						invoke Purge FundApplyDistribution set

	Actions
	
		TriggerReceivableTrackerMxLPL is an Instance Action
			restricted
			Action Rules
				initialize ReceivableTrackerMxTaxXML
				initialize LocalSequenceNumber
				initialize BLLineTaxCodesArray
				LocalLengthArray = 1
				for each BillingInvoiceLineRel	
					LocalBLLineTaxCode	= each.TaxCode
					LocalIterator= 1
					TaxFound = false
					if(LocalBLLineTaxCode entered)
						if(LocalLengthArray = 1)
							if(TaxTableRel not exists)
								BLLineTaxCodesArray.TaxCode[LocalLengthArray] = each.TaxCode
								LocalBLLineBasisAmount.TaxableAmt[LocalLengthArray] = each.TaxableAmount
								LocalLengthArray += 1
						else
							while(LocalIterator < LocalLengthArray)
								if(each.TaxCode = BLLineTaxCodesArray.TaxCode[LocalIterator])
									TaxFound = true
									LocalBLLineBasisAmount.TaxableAmt[LocalIterator] += each.TaxableAmount
								LocalIterator+=1							
							if(!TaxFound)
								BLLineTaxCodesArray.TaxCode[LocalLengthArray] = each.TaxCode
								LocalBLLineBasisAmount.TaxableAmt[LocalLengthArray] = each.TaxableAmount
								LocalLengthArray += 1
								TaxFound = false
				LocalIterator=1
				while(LocalIterator < LocalLengthArray)
					LocalCurrencyMX = BillingInvoiceRel.Currency
					LocalBLLineTaxCode = BLLineTaxCodesArray.TaxCode[LocalIterator]
					if(TaxTableRel not exists)
						LocalMxTaxableAmount = LocalBLLineBasisAmount.TaxableAmt[LocalIterator]
						LocalBLLineRate = TaxCodeRel.TxtaxrateRel.Rate * 100
						LocalCurrExchangeRate = ReceivablePaymentRel.CurrencyRate
						LocalTaxInvoiceCurr					= ReceivablePaymentRel.OriginalCurrency
						LocalTaxPayCurr						= Company.AccountingEntity.FunctionalCurrency
						LocalTaxRepCurrOne					= Company.FinanceEnterpriseGroup.ReportCurrencyOne
						if(LocalTaxInvoiceCurr != LocalTaxRepCurrOne)
							if(ReportingCurrExchangeRel exists)
								LocalRepCurrRate	= ReportingCurrExchangeRel.Rate
							else	
								LocalRepCurrRate 	= 1
						else
							LocalRepCurrRate = 1
						if(LocalCurrencyMX = ReceivablePaymentRel.OriginalCurrency)
							LocalTaxableAmountMX = LocalMxTaxableAmount
						else
						if(CurrExchangeMXRel exists)
							LocalTaxableAmountMX = LocalMxTaxableAmount * CurrExchangeMXRel.Rate
						else
							LocalTaxableAmountMX = 1
						LocalSequenceNumber +=1
						ReceivableTrackerMxTaxXML += template.IONSyncReceivableTrackerTaxXML_ST document for this instance
						LocalIterator += 1

		CheckAutoAdjust is an Instance Action
			restricted
			Action Rules

				if (ReceivableApplication.TransType.Invoice
				or  ReceivableApplication.TransType.DebitMemo)
					if  (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail = 1
					or  (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail = 0
					and  ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq = 1)
					or  (ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq = ReceivableInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail))
						AutoAdjustAmount	= ReceivableInvoiceDetailRel.OpenAmount

						if (ReceivableInvoiceDetailRel.OriginalCurrency != ReceivableInvoiceDetailRel.Company.Currency)
							CurrencyWork.TransactionAmount		= AutoAdjustAmount
							CurrencyWork.FromCurrency			= ReceivableInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency	= ReceivableInvoiceDetailRel.Company.Currency
							LocalBaseAutoAdjustAmount			= CurrencyWork.BaseAmount.OutputCurrencyAmount
						else
							LocalBaseAutoAdjustAmount			= AutoAdjustAmount


						if (AutoAdjustAmount > 0)
							initialize AutoAdjustReason

							I1 = 1
							while (I1 < 4)
								if  (ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1] entered
								and  ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1].Active)
									if (ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumAutoAdjustAmount.MaxAutoAmt[I1] entered
									and LocalBaseAutoAdjustAmount <= ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumAutoAdjustAmount.MaxAutoAmt[I1])
										AutoAdjustReason = ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1]
										end while
									else
									if (ReceivableInvoiceDetailRel.CompanyCustomerRel.MaxAutoPcts.MaxAutoPct[I1] entered
									and ((AutoAdjustAmount / ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount) <= ReceivableInvoiceDetailRel.CompanyCustomerRel.MaxAutoPcts.MaxAutoPct[I1]))
										AutoAdjustReason = ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1]
										end while


								I1 += 1


							if (AutoAdjustReason not entered)
								initialize AutoAdjustAmount





						if (ReceivableInvoiceDetailRel.OriginalCurrency != ApplicationCurrency)
							CurrencyWork.TransactionAmount		= AutoAdjustAmount
							CurrencyWork.FromCurrency			= ReceivableInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency	= ApplicationCurrency
							AutoAdjustAmount					= CurrencyWork.BaseAmount.OutputCurrencyAmount

						if (AutoAdjustAmount > 0)
							if(Company.PreventWriteOffBeforeTransactionGLDate)
								if (AutoAdjustmentReasonRel.ReceivableAdjustmentReasonType.OverShort
								and ReceivablePaymentRel.GeneralLedgerDate <= GeneralLedgerDate
								and ReceivableInvoiceDetailRel.GeneralLedgerDate <= GeneralLedgerDate)
									invoke Create ReceivableApplicationAdjustment
										invoked.Company												= ReceivableApplication.Company
										invoked.ReceivableApplication									= ReceivableApplication
										invoked.AdjustmentReason										= AutoAdjustReason
										invoked.ReceivableAdjustType									= "N"
										invoked.CreditAdjustAmount										= AutoAdjustAmount
										invoked.ApplicationCurrency										= ApplicationCurrency
							else
								invoke Create ReceivableApplicationAdjustment
									invoked.Company												= ReceivableApplication.Company
									invoked.ReceivableApplication									= ReceivableApplication
									invoked.AdjustmentReason										= AutoAdjustReason
									invoked.ReceivableAdjustType									= "N"
									invoked.CreditAdjustAmount										= AutoAdjustAmount
									invoked.ApplicationCurrency										= ApplicationCurrency

		CreateFromBatch is a Create Action
			restricted
			Entrance Rules
				LocalCurrencyTable = Company.DerivedCurrencyTable

				include BatchCreateRules
			
			Exit Rules
				include CreateUpdateCashDetailApplication
				if (AllowSelectDistributionSet) 
					if  (IsPaymentWriteoff
					or  (!ReceivableInvoiceRel.OriginIsFundAccountingSupported
					or   !ReceivableInvoiceRel.ProrateDistributionsRel exists))
						NextSentence = true
					else
					if (ApplicationSource.CrossReferencedMemoApplied)
						DistributionSetState	= DistributionSetState.NeedsCreditMemoApply
						invoke ProrateAndSelectAll
						DistributionSetState = DistributionSetState.CreatedFromCreditMemoApply
						DistributionSetNeedsReview = false


		UpdateAdjustAmounts is an Instance Action
			restricted
			Parameters
				Amount					is an InternationalAmount
			Action Rules
				BaseDebitCreditAdjustAmount								+= Amount

		MatchDistributionsForFundAccounting is an Instance Action 
			default label is "MatchDistributions"
			valid when (AllowMatchDistributionsForFundAccounting)
			Local Fields
				LocalAmountRemaining		is like InternationalAmount
				LocalDistributionOpenAmount	is like InternationalAmount
				LocalSelectedAmount			is like InternationalAmount
				LocalMatchSuccessful		is Boolean
			Action Rules

				invoke Delete FundApplyDistribution set
				LocalMatchSuccessful = true

				if  (IsPaymentWriteoff
				or  (!ReceivableInvoiceRel.OriginIsFundAccountingSupported
				or   !ReceivableInvoiceRel.ProrateDistributionsRel exists))
					LocalMatchSuccessful = false
				else
					if (ReceivableInvoiceDetailRel.IsBillingInvoice
					and ReceivableInvoiceDetailRel.AssociatedLine entered)
					
						if (IsDistributionSetTypeWriteoffApply)
							LocalAmountRemaining = TotalAdjustments
						else
							LocalAmountRemaining = ApplicationAmount.CurrencyAmount
						
						if (!ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
							LocalAmountRemaining *= -1
						
						for each TransactionAssociatedReceivableGLDistributionRel
							LocalDistributionOpenAmount = each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

							if (each.DistributionAmount.CurrencyAmount > 0)
								if (LocalAmountRemaining < LocalDistributionOpenAmount)
									LocalSelectedAmount 	= LocalAmountRemaining
									LocalAmountRemaining 	= 0
								else
									LocalSelectedAmount 	= LocalDistributionOpenAmount
									LocalAmountRemaining   -= LocalDistributionOpenAmount
							else
								if (LocalAmountRemaining > LocalDistributionOpenAmount)
									LocalSelectedAmount 	= LocalAmountRemaining
									LocalAmountRemaining 	= 0
								else
									LocalSelectedAmount 	= LocalDistributionOpenAmount
									LocalAmountRemaining   -= LocalDistributionOpenAmount
							
							if (LocalSelectedAmount != 0)
								invoke Create FundApplyDistribution set
									invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
									invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
									invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
									invoked.DistributionAmount.CurrencyAmount 				= LocalSelectedAmount
									invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
									invoked.OriginalCurrency								= each.OriginalCurrency
									invoked.Type											= "T"
									invoked.ReceivableInvoiceType							= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType
									invoked.Customer										= ReceivableInvoiceDetailRel.Customer

							if (LocalAmountRemaining = 0)
								end for each

						if (LocalAmountRemaining != 0)
							LocalMatchSuccessful = false
					
					if (IsDistributionSetTypeCreditMemoApply)

						if (ReceivableCreditMemoDetailRel.IsBillingInvoice
						and ReceivableCreditMemoDetailRel.AssociatedLine entered)
						
							LocalAmountRemaining = CreditTransaction.CreditApplicationAmount.CurrencyAmount

							for each CreditMemoAssociatedReceivableGLDistributionRel
								LocalDistributionOpenAmount = each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

								if (each.DistributionAmount.CurrencyAmount > 0)
									if (LocalAmountRemaining < LocalDistributionOpenAmount)
										LocalSelectedAmount 	= LocalAmountRemaining
										LocalAmountRemaining 	= 0
									else
										LocalSelectedAmount 	= LocalDistributionOpenAmount
										LocalAmountRemaining   -= LocalDistributionOpenAmount
								else
									if (LocalAmountRemaining > LocalDistributionOpenAmount)
										LocalSelectedAmount 	= LocalAmountRemaining
										LocalAmountRemaining 	= 0
									else
										LocalSelectedAmount 	= LocalDistributionOpenAmount
										LocalAmountRemaining   -= LocalDistributionOpenAmount
								
								if (LocalSelectedAmount != 0)
									invoke Create FundApplyDistribution set
										invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
										invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
										invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
										invoked.DistributionAmount.CurrencyAmount 				= LocalSelectedAmount
										invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
										invoked.OriginalCurrency								= each.OriginalCurrency
										invoked.Type											= "C"
										invoked.ReceivableInvoiceType							= ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType
										invoked.Customer										= ReceivableCreditMemoDetailRel.Customer

								if (LocalAmountRemaining = 0)
									end for each

							if (LocalAmountRemaining != 0)
								LocalMatchSuccessful = false
							
				constraint (LocalMatchSuccessful)
					"Distribution_MatchWasNotSuccessful.EitherProrateDistributionsOrSelectDistributionsManually."


		ProrateAndSelectAll is an Instance Action 
			default label is "ProrateDistributions"
			valid when (AllowProrateAndSelectAll)
			Local Fields
				LocalAdjustmentPercent 		is a Percent
				LocalInvoiceOpenAmount 		is an InternationalAmount
				LocalSumInvoiceFundApplied 	is an InternationalAmount
				LocalApplyAmount 			is an InternationalAmount
				LocalSumApplyAmounts 		is an InternationalAmount
				LocalNewAmount 				is an InternationalAmount
				LocalPreviousFundApplied	is an InternationalAmount
				LocalApplicationAmount		is an InternationalAmount
				LocalDifference				is an InternationalAmount
				LocalSumRoundAmounts 		is an InternationalAmount
				LocalAmountToAdd			is an InternationalAmount
				LocalDistributionOpenAmount	is an InternationalAmount
				LocalOldAmount				is an InternationalAmount
				LocalTotalAmount 			is an InternationalAmount


			Action Rules

				if  (IsPaymentWriteoff
				or  (!ReceivableInvoiceRel.OriginIsFundAccountingSupported
				or   !ReceivableInvoiceRel.ProrateDistributionsRel exists))
					NextSentence = true
				else
					invoke Delete FundApplyDistribution set

					if (IsDistributionSetTypeWriteoffApply)
						LocalTotalAmount = TotalAdjustments
					else
						LocalTotalAmount = ApplicationAmount.CurrencyAmount
					
					LocalSumInvoiceFundApplied 	= 0
					for each ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
						LocalSumInvoiceFundApplied += each.FundAppliedAmount
					
					if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
						LocalInvoiceOpenAmount 	= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount - LocalSumInvoiceFundApplied
					else
						LocalInvoiceOpenAmount 	= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount + LocalSumInvoiceFundApplied

					if (LocalInvoiceOpenAmount = LocalTotalAmount)
						for each ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
							if ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) != 0)
								invoke Create FundApplyDistribution set
									invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
									invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
									invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
									invoked.DistributionAmount.CurrencyAmount 				= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
									invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
									invoked.OriginalCurrency								= each.OriginalCurrency
									invoked.Type											= "T"
									invoked.ReceivableInvoiceType							= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType
									invoked.Customer										= ReceivableInvoiceDetailRel.Customer
					else
						for each ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
							LocalAdjustmentPercent 	= ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) / LocalInvoiceOpenAmount)
							LocalApplyAmount		= LocalTotalAmount * LocalAdjustmentPercent
							
							round LocalApplyAmount to nearest DerivedCurrencyRoundTo

							if (LocalApplyAmount > 0
							and LocalApplyAmount > (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
								LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
							
							if (LocalApplyAmount < 0
							and LocalApplyAmount < (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
								LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

							if (LocalApplyAmount != 0)
								LocalSumApplyAmounts += LocalApplyAmount
								invoke Create FundApplyDistribution set
									invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
									invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
									invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
									invoked.DistributionAmount.CurrencyAmount 				= LocalApplyAmount
									invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
									invoked.OriginalCurrency								= each.OriginalCurrency
									invoked.Type											= "T"
									invoked.ReceivableInvoiceType							= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType
									invoked.Customer										= ReceivableInvoiceDetailRel.Customer

						if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
							LocalApplicationAmount = LocalTotalAmount
						else
							LocalApplicationAmount = LocalTotalAmount * -1

						if (LocalSumApplyAmounts != LocalApplicationAmount)

							LocalDifference = LocalApplicationAmount - LocalSumApplyAmounts	
							
							for each FundApplyDistributionTransactionDescendingRel
								LocalDistributionOpenAmount  = each.TransactionReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - each.TransactionReceivableGLDistributionRel.FundAppliedAmount
								
								if (each.TransactionReceivableGLDistributionRel.DistributionAmount.CurrencyAmount > 0)
									if (LocalDifference <= LocalDistributionOpenAmount)
										LocalAmountToAdd	 = LocalDifference
										LocalDifference		 = 0
									else
										LocalAmountToAdd	 = LocalDistributionOpenAmount
										LocalDifference		-= LocalDistributionOpenAmount
								else
									if (LocalDifference >= LocalDistributionOpenAmount)
										LocalAmountToAdd	 = LocalDifference
										LocalDifference		 = 0
									else
										LocalAmountToAdd	 = LocalDistributionOpenAmount
										LocalDifference		-= LocalDistributionOpenAmount

								LocalOldAmount	= each.DistributionAmount.CurrencyAmount
								LocalNewAmount 	= LocalOldAmount + LocalAmountToAdd

								if (LocalNewAmount = 0)
									invoke Delete each
								else
									invoke Update each
										invoked.DistributionAmount.CurrencyAmount 				= LocalNewAmount
										invoked.TransientSupplyOldFundAppliedAmount				= true
										invoked.TransientOldFundAppliedAmount					= LocalOldAmount

								if (LocalDifference = 0)
									end for each
					
					if (IsDistributionSetTypeCreditMemoApply)
						
						LocalSumInvoiceFundApplied 	= 0
						for each ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
							LocalSumInvoiceFundApplied += each.FundAppliedAmount

						LocalTotalAmount = CreditTransaction.CreditApplicationAmount.CurrencyAmount
						LocalInvoiceOpenAmount 	= ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount - LocalSumInvoiceFundApplied

						if (LocalInvoiceOpenAmount = LocalTotalAmount)
							for each ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
								if ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) != 0)
									invoke Create FundApplyDistribution set
										invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
										invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
										invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
										invoked.DistributionAmount.CurrencyAmount 				= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
										invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
										invoked.OriginalCurrency								= each.OriginalCurrency
										invoked.Type											= "C"
										invoked.ReceivableInvoiceType							= ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType
										invoked.Customer										= ReceivableCreditMemoDetailRel.Customer
						else
							initialize LocalSumApplyAmounts
							for each ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
								LocalAdjustmentPercent 	= ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) / LocalInvoiceOpenAmount)
								LocalApplyAmount		= LocalTotalAmount * LocalAdjustmentPercent
								
								round LocalApplyAmount to nearest DerivedCurrencyRoundTo

								if (LocalApplyAmount > 0
								and LocalApplyAmount > (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
									LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
								
								if (LocalApplyAmount < 0
								and LocalApplyAmount < (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
									LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

								if (LocalApplyAmount != 0)
									LocalSumApplyAmounts += LocalApplyAmount
									invoke Create FundApplyDistribution set
										invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
										invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
										invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
										invoked.DistributionAmount.CurrencyAmount 				= LocalApplyAmount
										invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
										invoked.OriginalCurrency								= each.OriginalCurrency
										invoked.Type											= "C"
										invoked.ReceivableInvoiceType							= ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType
										invoked.Customer										= ReceivableCreditMemoDetailRel.Customer

							if (ReceivableCreditMemoDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
								LocalApplicationAmount = LocalTotalAmount
							else
								LocalApplicationAmount = LocalTotalAmount * -1

							if (LocalSumApplyAmounts != LocalApplicationAmount)

								LocalDifference = LocalApplicationAmount - LocalSumApplyAmounts	
								
								for each FundApplyDistributionCreditDescendingRel
									LocalDistributionOpenAmount  = each.CreditReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - each.CreditReceivableGLDistributionRel.FundAppliedAmount
									
									if (each.CreditReceivableGLDistributionRel.DistributionAmount.CurrencyAmount > 0)
										if (LocalDifference <= LocalDistributionOpenAmount)
											LocalAmountToAdd	 = LocalDifference
											LocalDifference		 = 0
										else
											LocalAmountToAdd	 = LocalDistributionOpenAmount
											LocalDifference		-= LocalDistributionOpenAmount
									else
										if (LocalDifference >= LocalDistributionOpenAmount)
											LocalAmountToAdd	 = LocalDifference
											LocalDifference		 = 0
										else
											LocalAmountToAdd	 = LocalDistributionOpenAmount
											LocalDifference		-= LocalDistributionOpenAmount

									LocalOldAmount	= each.DistributionAmount.CurrencyAmount
									LocalNewAmount 	= LocalOldAmount + LocalAmountToAdd

									if (LocalNewAmount = 0)
										invoke Delete each
									else
										invoke Update each
											invoked.DistributionAmount.CurrencyAmount 				= LocalNewAmount
											invoked.TransientSupplyOldFundAppliedAmount				= true
											invoked.TransientOldFundAppliedAmount					= LocalOldAmount

									if (LocalDifference = 0)
										end for each


		ProcessDistributionSetSelections is an Instance Action 
			valid when (AllowDistributionSetProcessing)
			Action Rules
			
				constraint (TransientDistributionSetState.ReadyForProcessing)
					"Distribution_SetIs_Out_Of_Balance"

				if (DistributionSetState.NeedsPaymentApply)
					DistributionSetState = DistributionSetState.CreatedFromPaymentApply
				else
				if (DistributionSetState.NeedsRemittanceApply)
					DistributionSetState = DistributionSetState.CreatedFromRemittanceApply
				else
				if (DistributionSetState.NeedsWriteoffApply)
					DistributionSetState = DistributionSetState.CreatedFromWriteoffApply
				else
				if (DistributionSetState.NeedsCreditMemoApply)
					DistributionSetState = DistributionSetState.CreatedFromCreditMemoApply

				DistributionSetNeedsReview = false


		ReopenDistributionSet is an Instance Action 
			valid when (AllowReopenDistributionSet)
			Action Rules
			
				invoke Delete FundApplyDistribution set

				if (DistributionSetState.CreatedFromPaymentApply)
					DistributionSetState = DistributionSetState.NeedsPaymentApply
				else
				if (DistributionSetState.CreatedFromRemittanceApply)
					DistributionSetState = DistributionSetState.NeedsRemittanceApply
				else
				if (DistributionSetState.CreatedFromWriteoffApply)
					DistributionSetState = DistributionSetState.NeedsWriteoffApply
				else
				if (DistributionSetState.CreatedFromCreditMemoApply)
					DistributionSetState = DistributionSetState.NeedsCreditMemoApply

				DistributionSetNeedsReview = true

		
		ChangeDistributionSetNeedsReview is an Instance Action 
			restricted
			Parameters
				PrmDistributionSetState			is AlphaUpper size 2
				PrmDistributionSetNeedsReview	is Boolean
			Action Rules
				if (!DistributionSetState.MustBeDeleted)
					DistributionSetState 		= PrmDistributionSetState
					DistributionSetNeedsReview 	= PrmDistributionSetNeedsReview
				
				if  (IsPaymentWriteoff
				or (!ReceivableInvoiceRel.OriginIsFundAccountingSupported
				or  !ReceivableInvoiceRel.ProrateDistributionsRel exists))
					DistributionSetNeedsReview 	= false
					DistributionSetState		= "NA"


		PostAll is a Set Action  
			run in foreground
			restricted
			Action Rules
				Instance Rules
					if (Status.AvailableForPosting)
						invoke AvailableForPosting.Post







		TriggerDebitTransferPostApplicationClose is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmApplicationCloseResult		is an ApplicationCloseResult
			Instance Selection
				where (ApplicationCloseResult = PrmApplicationCloseResult
				and	CreditTransaction.CreditType.Payment)

			Sort Order
				CreditTransaction.CreditCompany
				CreditTransaction.CreditBatch
			Action Rules
				CreditTransaction.CreditBatch Set Rules
					Exit Rules
						invoke FastUpdate ReceivablePaymentBatchRel
							invoked.bod id.VariationID += 1





		ApplicationClose is a Set Action
			restricted

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmCompany					is a ReceivableCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmApplicationCloseResult	is an ApplicationCloseResult
					context of PrmFinanceEnterpriseGroup
				PrmCreateDate				is TimeStamp
				PrmIsCreate 				is Boolean 	

			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup not entered)
						required
							"CompanyOrGlobalLedgerCompanyGroupRequired"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterGlobalLedgerCompanyGroupIfCompanyEntered"
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup


			Instance Selection
				where (Status.AvailableForPosting
				and	!MarkedForDelete
				and   ((PrmCompany entered
				and		PrmCompany = Company)
				or	 (PrmCompanyGroup entered
				and	 GLCompanyGroupMemberRelExists))
				and !ApplicationAdjustmentsNeedsApprovalExists
				and !ApplicationAdjustmentsNeedsAttachments
				and !DistributionSetNeedsReview) 

			Local Fields
				WsProgramSequence			is like ProgramSequence
				WsDistSeq					is a Sequence
				SetDocumentCounter			is Numeric 5
				SetCbsCounter				is Numeric 5
				LocalOverApply				is Boolean 
				LocalApplicationID			is Numeric 12
				PaymentWriteoffCashDetails
					do not save in checkpoint
				LocalApplicationCloseResultView is a ApplicationCloseResult view
				LocalDistTaxCode			is like TaxCode
				
			Sort Order is Set4 



			Rule Blocks

				ProcessGainLossAmountGroupMember
					LocalDifference	= LocalPaymentAmount - LocalInvoiceAmount
					if (LocalIsFunctional)
						LocalActualMax = LocalDifference
						if (LocalDifference < 0)
							LocalAbsoluteMax = LocalDifference * -1
						else
							LocalAbsoluteMax = LocalDifference
					else
						if (LocalDifference < 0)
							LocalCurrAbsoluteMax	= LocalDifference * -1
						if (LocalCurrAbsoluteMax > LocalAbsoluteMax)
							LocalAbsoluteMax = LocalCurrAbsoluteMax
							LocalActualMax = LocalDifference

					initialize LocalPaymentAmount
					initialize LocalInvoiceAmount
					initialize LocalIsFunctional


				AdjustmentDistributionCreation
					if (UsePaymentDateForAdjustDistribution)
						initialize LocalCurrencyCalculationGroup
						if  (CreditTransaction.CreditType.Payment)
							LocalCurrencyTable														= ReceivablePaymentRel.ReceivablePaymentHeader.CurrencyTable
							LocalCurrencyCalculationGroup.FromCurrency								= ReceivablePaymentRel.OriginalCurrency
							if (LocalChargebackSummary)
								LocalCurrencyCalculationGroup.ExchangeDate							= GeneralLedgerDate 
								LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
							else
								LocalCurrencyCalculationGroup.ExchangeDate							= ReceivablePaymentRel.DepositDate
								LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
						else
							LocalCurrencyTable														= ReceivableCreditInvoiceDetailRel.ReceivableInvoiceRel.CurrencyTable
							LocalCurrencyCalculationGroup.FromCurrency								= ReceivableCreditInvoiceDetailRel.OriginalCurrency
							if (LocalChargebackSummary)
								LocalCurrencyCalculationGroup.ExchangeDate							= LocalAdjCreateDate
							else
								LocalCurrencyCalculationGroup.ExchangeDate							= ReceivableCreditInvoiceDetailRel.DerivedExchangeDate
							LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate			= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate			= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate			= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate			= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate			= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyRate		= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyRate			= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ProjectAmount.EnteredCurrencyRate
						LocalCurrencyCalculationGroup.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						if (LocalNegate)
							LocalCurrencyCalculationGroup.CurrencyAmount							= each.CreditAdjustAmount * -1
						else
							if (LocalPrepaymentTaxDistribution)			
								LocalCurrencyCalculationGroup.CurrencyAmount							= WsTranDistributionAmount
							else
								LocalCurrencyCalculationGroup.CurrencyAmount							= each.CreditAdjustAmount
						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency					= Company.AccountingEntity.FunctionalCurrency
						LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency					= Company.AccountingEntity.AlternateCurrency
						LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency					= Company.AccountingEntity.AlternateCurrency2
						LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency					= Company.AccountingEntity.AlternateCurrency3
						LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency						= Company.FinanceEnterpriseGroup.ReportCurrencyOne
						LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency						= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
						LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency						= Company.FinanceEnterpriseGroup.ReportCurrencyThree
						LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency						= Company.FinanceEnterpriseGroup.ReportCurrencyFour
						LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency						= Company.FinanceEnterpriseGroup.ReportCurrencyFive
						LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency					= each.DistributionAccount.ToAccountingEntity.FunctionalCurrency
						LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency					= each.DistributionAccount.ToAccountingEntity.AlternateCurrency
						LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency					= each.DistributionAccount.ToAccountingEntity.AlternateCurrency2
						LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency					= each.DistributionAccount.ToAccountingEntity.AlternateCurrency3
						LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency						= each.DistributionAccount.Project.Currency						

					invoke CreateFromApplicationClose ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup												= LocalAdjFEG
						if (each.ReceivableAdjustmentReasonType.OverApplied)
							invoked.ReceivableCompanyGroup.GlCompany								= LocalAdjGLCompany
						else
							invoked.ReceivableCompanyGroup.GlCompany								= LocalAdjCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany						= LocalAdjCompany
						
						invoked.ReceivableGLDistribution.ProgramSequence							= WsProgramSequence
						invoked.LastDistributionSequence											= 1
						invoked.ApplicationID														= LocalApplicationID
						invoked.CreateDate															= PrmCreateDate

						invoked.GeneralLedgerAccount												= LocalGLAccount 
						if  (WsUseAcctUnitOverride
						and  OverrideAccountingUnit entered)
							invoked.GeneralLedgerAccount.AccountingUnit								= OverrideAccountingUnit

						invoked.GeneralLedgerDate													= GeneralLedgerDate

						if  (WsUseTranDate
						and  LocalAdjReasonOverShort												= ReceivableAdjustmentReasonType.OverShort)
							if  (ReceivableApplication.TransType.CustomerPayment)
								invoked.TransactionDate												= ReceivablePaymentDebitRel.DepositDate 
							else
								invoked.TransactionDate												= ReceivableInvoiceDetailRel.TransactionDate
						else
							if (TranDateFlag
							and ReceivableInvoiceDetailRel exists)
								invoked.TransactionDate												= ReceivableInvoiceDetailRel.TransactionDate
							else	
								invoked.TransactionDate												= LocalAdjCreateDate
						if (UsePaymentDateForAdjustDistribution)
							if(LocalChargebackSummary)
								if (CreditTransaction.CreditType.Payment)
									invoked.OriginalCurrency										= ReceivablePaymentRel.OriginalCurrency
								else
									invoked.OriginalCurrency										= ReceivableCreditInvoiceDetailRel.OriginalCurrency
							else
								if  (CreditTransaction.CreditType.Payment)
									invoked.TransactionDate											= ReceivablePaymentRel.DepositDate
									invoked.OriginalCurrency										= ReceivablePaymentRel.OriginalCurrency
								else
									invoked.TransactionDate											= ReceivableCreditInvoiceDetailRel.DerivedExchangeDate
									invoked.OriginalCurrency										= ReceivableCreditInvoiceDetailRel.OriginalCurrency
							invoked.DistributionAmount												= LocalCurrencyCalculationGroup
							invoked.ToCompanyBaseAmount												= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
						else
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= WsBaseDistributionAmount
							invoked.DistributionAmount.CurrencyAmount								= WsTranDistributionAmount
							invoked.ToCompanyBaseAmount												= WsToCompanyBaseAmount

						if (LocalNegative)
							invoked.FlipAmounts														= true

						if (ReceivableApplication.TransType.Invoice
						or ReceivableApplication.TransType.DebitMemo
						or ReceivableApplication.TransType.CreditMemo)
							invoked.TransType														= ReceivableInvoiceRel.ReceivableInvoiceType
						else
							invoked.TransType														= ReceivableApplication.TransType
						
						invoked.Invoice																= ReceivableApplication.Invoice

						if  (WsUseCreditSide)
							if  (CreditTransaction.CreditType.Payment)
								invoked.BatchNumber													= ReceivablePaymentRel.ReceivablePaymentHeader
								invoked.SequenceNumber												= ReceivablePaymentRel.ReceivablePayment
								invoked.ReceivableCompanyDataGroup.Customer							= ReceivablePaymentRel.Customer
								invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel			= ReceivablePaymentRel.ReceivableProcessLevel
								if (!UsePaymentDateForAdjustDistribution)
									invoked.OriginalCurrency										= ReceivablePaymentRel.OriginalCurrency
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = ReceivablePaymentRel.CurrencyRate
							else
								invoked.BatchNumber													= ReceivableCreditInvoiceDetailRel.BatchNumber
								invoked.ReceivableCompanyDataGroup.Customer							= ReceivableCreditInvoiceDetailRel.Customer
								invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel			= ReceivableCreditInvoiceDetailRel.ReceivableProcessLevel
								if (!UsePaymentDateForAdjustDistribution)
									invoked.OriginalCurrency										= ReceivableCreditInvoiceDetailRel.OriginalCurrency
									invoked.DistributionAmount.ExchangeDate							= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ExchangeDate 
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
									invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
									invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
									invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
									invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
									invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
									invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
									invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
									invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate
						else
						if  (ReceivableApplication.TransType.CustomerPayment)
							invoked.BatchNumber														= ReceivablePaymentDebitRel.ReceivablePaymentHeader
							invoked.SequenceNumber													= ReceivablePaymentDebitRel.ReceivablePayment
							invoked.ReceivableCompanyDataGroup.Customer								= ReceivablePaymentDebitRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel				= ReceivablePaymentDebitRel.ReceivableProcessLevel
							if (!UsePaymentDateForAdjustDistribution)
								invoked.OriginalCurrency											= ReceivablePaymentDebitRel.OriginalCurrency
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivablePaymentDebitRel.CurrencyRate
						else
							invoked.BatchNumber														= ReceivableInvoiceDetailRel.BatchNumber
							invoked.ReceivableCompanyDataGroup.Customer								= ReceivableInvoiceDetailRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel				= ReceivableInvoiceDetailRel.ReceivableProcessLevel
							if (!UsePaymentDateForAdjustDistribution)
								invoked.OriginalCurrency											= ReceivableInvoiceDetailRel.OriginalCurrency
								invoked.DistributionAmount.ExchangeDate								= ReceivableInvoiceDetailRel.InvoiceAmount.ExchangeDate 
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate

						if (InitBatch)
							initialize invoked.BatchNumber

						if (ApplicationSource.ReversalOfApplications)
							invoked.Origin = "RX"
						else
							invoked.Origin = "RQ"

						invoked.AccumulationType											= "D"
						invoked.DocumentNumber												= "7-" + DerivedDocumentNumberWithLeadingZeros
						invoked.Status														= 2

						invoked.AuditSummaryIndicator										= WsAuditSum

						if (LocalIsPaymentCashDetail)
							invoked.DistributionAmount										= LocalCashDetailAmountGroup





						invoked.Description													= LocalDescription
						invoked.Units														= LocalAdjUnits

						invoked.ApplicationCloseResult										= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader				= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 
						invoked.AllocationType												= LocalAllocationType
						if (LocalPrepaymentTaxDistribution
						and LocalCreateTaxTransaction)		
							invoked.DoTaxHistory											= true
							invoked.TransientPrepaymentTax									= true
							invoked.TaxCode													= ReceivablePaymentRel.Company.PrepaymentTaxCode
							invoked.TransactionTaxableAmount								= (each.AdjustmentAmount.CurrencyAmount / (1 + LocalPrepaymentTaxRate))

							invoked.TransientTaxable										= each.AdjustmentAmount.CurrencyAmount  


				CreateReceivedNotAppliedDistribution
					if (HasPaymentCashDetail)
						LocalIsPaymentCashDetail = true
						for each CashDetailApplicationRel
							LocalGLAccount = each.ReceivablePaymentCashDetail.RNAFinanceCodeBlock
							LocalCashDetailAmountGroup = each.DistributionAmount
							include RNADistributionCreation
						LocalIsPaymentCashDetail = false
					else
						include RNADistributionCreation


				RNADistributionCreation
					initialize LocalFlipAmount
					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution
						invoked.FinanceEnterpriseGroup											= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence						= WsProgramSequence
						invoked.LastDistributionSequence										= WsDistSeq
						invoked.CreateDate														= PrmCreateDate
						invoked.ApplicationID													= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany								= LocalGLCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany					= Company

						invoked.GeneralLedgerAccount											= LocalGLAccount
						invoked.GeneralLedgerDate												= GeneralLedgerDate
						invoked.TransactionDate													= CreditTransaction.CreditApplicationAmount.ExchangeDate 

						invoked.DistributionAmount.ExchangeDate									= CreditTransaction.CreditApplicationAmount.ExchangeDate

						invoked.DistributionAmount.CurrencyAmount								= ((CreditTransaction.CreditApplicationAmount.CurrencyAmount + first OverAppliedAdjustmentRel.CreditAdjustAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
						if (CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount entered
						and OverAppliedAdjustmentRel exists)
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount)* LocalDistributionPercentage)
						else
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= (CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage)
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount			= ((CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount)* LocalDistributionPercentage)
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount			= ((CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount)* LocalDistributionPercentage)
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount			= ((CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount)* LocalDistributionPercentage)
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount			= ((CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount)* LocalDistributionPercentage)
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount			= ((CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount)* LocalDistributionPercentage)

						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate

						if  (ReceivableApplication.TransType.CreditMemo
						or   ReceivableApplication.TransType.CustomerPayment)
							if (!LocalNegative)
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true
						else
							if (LocalNegative)
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true	

						if  (Company != CreditTransaction.CreditCompany)
							invoked.ToCompanyBaseAmount											= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount  * LocalDistributionPercentage
							if (LocalNegative
							and !LocalSkipNegative)
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true

						if (ReceivableApplication.TransType.Invoice
						or ReceivableApplication.TransType.DebitMemo
						or ReceivableApplication.TransType.CreditMemo)
							invoked.TransType														= ReceivableInvoiceRel.ReceivableInvoiceType
						else
							invoked.TransType														= ReceivableApplication.TransType
						
						invoked.Invoice															= ReceivableApplication.Invoice

						invoked.BatchNumber														= CreditTransaction.CreditBatch

						if  (ReceivableApplication.TransType.CustomerPayment)
							invoked.ReceivableCompanyDataGroup.Customer							= ReceivablePaymentDebitRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel			= ReceivablePaymentDebitRel.ReceivableProcessLevel
						else
							invoked.ReceivableCompanyDataGroup.Customer							= ReceivableInvoiceDetailRel.Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel			= ReceivableInvoiceDetailRel.ReceivableProcessLevel

						invoked.OriginalCurrency												= ApplicationCurrency
						invoked.Status															= 2
						invoked.Origin															= LocalAppSource
						invoked.AccumulationType												= "D"

						if (LocalIsPaymentCashDetail)
							invoked.DistributionAmount											= LocalCashDetailAmountGroup

						invoked.DocumentNumber													= "7-" + DerivedDocumentNumberWithLeadingZeros
						invoked.Description														= LocalDescription//RNACashMsg + " " + current corporate date
						if (ReceivablePaymentRel.TransactionAmount entered)
							invoked.AllocationType											= AllocationType.RNA
						invoked.ApplicationCloseResult											= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader					= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 
						if (LocalNegative)
							invoked.AuditSummaryIndicator										= "09"
	
				PrepaymentTaxDistributionCreation			
					initialize LocalFlipAmount
					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution
						invoked.FinanceEnterpriseGroup											= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence						= WsProgramSequence
						invoked.LastDistributionSequence										= WsDistSeq
						invoked.CreateDate														= PrmCreateDate
						invoked.ApplicationID													= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany								= LocalGLCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany					= LocalGLCompany

						invoked.GeneralLedgerAccount											= LocalGLAccount
						invoked.GeneralLedgerDate												= GeneralLedgerDate
						invoked.TransactionDate													= CreditTransaction.CreditApplicationAmount.ExchangeDate 

						invoked.DistributionAmount.ExchangeDate									= CreditTransaction.CreditApplicationAmount.ExchangeDate
						invoked.DistributionAmount.CurrencyAmount								= LocalPrepaymentTaxAmount

						if  (ReceivableApplication.TransType.CreditMemo
						or   ReceivableApplication.TransType.CustomerPayment)
							if (!LocalNegative)
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true
						else
							if (LocalNegative)
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true	

						if  (Company != CreditTransaction.CreditCompany)
							if (LocalPrepaymentTaxDistribution)
								invoked.ToCompanyBaseAmount											=CreditTransaction.CreditApplicationAmount.FunctionalAmount.OutputCurrencyAmount
							if (LocalNegative
							and !LocalSkipNegative)
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true

						
						invoked.TransType														= "P"
						
						invoked.Invoice															= ReceivablePaymentRel.PaymentNumber
						invoked.BatchNumber														= CreditTransaction.CreditBatch
						invoked.SequenceNumber												    = ReceivablePaymentRel.ReceivablePayment

						invoked.ReceivableCompanyDataGroup.Customer								= ReceivablePaymentRel.Customer
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel				= ReceivablePaymentRel.ReceivableProcessLevel

						invoked.OriginalCurrency												= ApplicationCurrency
						invoked.Status															= 2
						invoked.Origin															= LocalAppSource
						invoked.AccumulationType												= "D"
						invoked.DocumentNumber													= "7-" + DerivedDocumentNumberWithLeadingZeros
						invoked.Description														= LocalDescription//RNACashMsg + " " + current corporate date
						if (ReceivablePaymentRel.TransactionAmount entered)
							invoked.AllocationType											    = AllocationType.RNA
						invoked.ApplicationCloseResult											= PrmApplicationCloseResult
						if (LocalPrepaymentTaxDistribution
						and LocalCreateTaxTransaction)
							invoked.DoTaxHistory												= true
							invoked.TransientPrepaymentTax										= true
							invoked.TaxCode														= ReceivablePaymentRel.Company.PrepaymentTaxCode
							invoked.TransactionTaxableAmount									= LocalBeforeGSTAmount
							invoked.TransientTransactionTaxAmount								= LocalPrepaymentTaxAmount
							invoked.TransientTaxable											= CreditTransaction.CreditApplicationAmount.CurrencyAmount
															
				ARCDistributionCreation
					initialize LocalFlipAmount
					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution
						invoked.FinanceEnterpriseGroup												= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence							= WsProgramSequence
						invoked.LastDistributionSequence											= WsDistSeq
						invoked.CreateDate															= PrmCreateDate
						invoked.ApplicationID														= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany									= Company
						invoked.ReceivableCompanyDataGroup.TransactionCompany						= Company

						invoked.GeneralLedgerAccount												= LocalGLAccount 
						invoked.GeneralLedgerDate													= GeneralLedgerDate
						invoked.TransactionDate														= ApplicationAmount.ExchangeDate  
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel					= LocalProcessLevel
						invoked.Origin																= LocalAppSource
						invoked.Status																= 2
						invoked.OriginalCurrency													= ApplicationCurrency
						if (CreateGainLossEntries)
							invoked.OriginalCurrency												= DebitCurrency
							invoked.DistributionAmount.ExchangeDate									= ApplicationAmount.ExchangeDate
							
							invoked.DistributionAmount.CurrencyAmount								= ((ApplicationAmount.CurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.CurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		= ((ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		= ((ApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount)  * LocalDistributionPercentage)
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		= ((ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		= ((ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount		= ((ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		= ((ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount)  * LocalDistributionPercentage)
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount		= ((ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount		= ((ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
							if (ApplicationAmount.ProjectAmount.EnteredCurrencyAmount entered
							and OverAppliedAdjustmentRel exists)
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= ((ApplicationAmount.ProjectAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
							else
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= (ApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage)
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount			= ((ApplicationAmount.ReportAmount1.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount			= ((ApplicationAmount.ReportAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount			= ((ApplicationAmount.ReportAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount			= ((ApplicationAmount.ReportAmount4.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount) * LocalDistributionPercentage)
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount			= ((ApplicationAmount.ReportAmount5.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount) * LocalDistributionPercentage)

















							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate			= ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate			= ApplicationAmount.AlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate			= ApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate			= ApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate		= ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate		= ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate		= ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate		= ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate			= ApplicationAmount.ProjectAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate			= ApplicationAmount.ReportAmount1.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate			= ApplicationAmount.ReportAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate			= ApplicationAmount.ReportAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate			= ApplicationAmount.ReportAmount4.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate			= ApplicationAmount.ReportAmount5.EnteredCurrencyRate

							if  (ReceivableApplication.TransType.CreditMemo
							or   ReceivableApplication.TransType.CustomerPayment)
								invoked.FlipAmounts													= false
								LocalFlipAmount														= false
								if (LocalNegative)
									invoked.FlipAmounts												= true
									LocalFlipAmount													= true
							else
								invoked.FlipAmounts													= true
								LocalFlipAmount														= true

								if (LocalNegative)
									invoked.FlipAmounts												= false
									LocalFlipAmount													= false
						else
							if  (ReceivableApplication.TransType.CreditMemo
							or   ReceivableApplication.TransType.CustomerPayment)

								invoked.DistributionAmount.CurrencyAmount							= ((CreditTransaction.CreditApplicationAmount.CurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.CurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount)  * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount)  * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								if (CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount entered
								and OverAppliedAdjustmentRel exists)
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								else
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount	= (CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount) * LocalDistributionPercentage)

							else

								invoked.DistributionAmount.CurrencyAmount							= ((CreditTransaction.CreditApplicationAmount.CurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.CurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount)  * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount  + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount)  * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								if (CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount entered
								and OverAppliedAdjustmentRel exists)
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount	= ((CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount) * LocalDistributionPercentage)
								else
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount	= (CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount) * LocalDistributionPercentage)
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= ((CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount + first OverAppliedAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount) * LocalDistributionPercentage)

								invoked.FlipAmounts													= true
								LocalFlipAmount														= true
							invoked.DistributionAmount.ExchangeDate									= ApplicationAmount.ExchangeDate
						invoked.Description															= LocalDescription //ARCashMsg + " " + current corporate date
						invoked.AllocationType													= AllocationType.AR
						
						if (ReceivableApplication.TransType.Invoice
						or ReceivableApplication.TransType.DebitMemo
						or ReceivableApplication.TransType.CreditMemo)
							invoked.TransType														= ReceivableInvoiceRel.ReceivableInvoiceType
						else
							invoked.TransType														= ReceivableApplication.TransType
						
						invoked.Invoice																= ReceivableApplication.Invoice
						invoked.BatchNumber															= ReceivableApplication.BatchNumber

						if  (ReceivableApplication.TransType.CustomerPayment)
							invoked.ReceivableCompanyDataGroup.Customer								= ReceivablePaymentDebitRel.Customer
						else
							invoked.ReceivableCompanyDataGroup.Customer								= ReceivableInvoiceDetailRel.Customer

						invoked.DocumentNumber														= "7-" + DerivedDocumentNumberWithLeadingZeros
						if (!LocalNegative)
							invoked.AuditSummaryIndicator											= "03"	
						else
							invoked.AuditSummaryIndicator											= "09"
						invoked.AccumulationType													= "D"
						invoked.ApplicationCloseResult												= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader						= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 


				CreditRNADistributionCreation
					initialize LocalFlipAmount
					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution
						invoked.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence					= WsProgramSequence
						invoked.LastDistributionSequence									= WsDistSeq
						invoked.CreateDate													= PrmCreateDate
						invoked.ApplicationID												= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany							= CreditTransaction.CreditCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany				= Company
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel			= LocalProcessLevel

						invoked.GeneralLedgerAccount										= LocalGLAccount
						invoked.GeneralLedgerDate											= GeneralLedgerDate
						invoked.TransactionDate												= GeneralLedgerDate
						invoked.ReceivableCompanyDataGroup.Customer							= CreditTransaction.CreditCustomer

						invoked.Origin														= LocalAppSource
						invoked.Status														= 2
						invoked.OriginalCurrency											= ApplicationCurrency


						invoked.DistributionAmount.ExchangeDate								= CreditTransaction.CreditApplicationAmount.ExchangeDate

						invoked.DistributionAmount.CurrencyAmount							= CreditTransaction.CreditApplicationAmount.CurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount * LocalDistributionPercentage
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount * LocalDistributionPercentage

						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
						invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
						invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate


						if  (ReceivableApplication.TransType.CreditMemo
						or   ReceivableApplication.TransType.CustomerPayment)
							invoked.FlipAmounts												= true
							LocalFlipAmount													= true
							if (!LocalNegative)
								invoked.FlipAmounts											= false
								LocalFlipAmount												= false
						else
							if (LocalNegative)
								invoked.FlipAmounts											= true
								LocalFlipAmount												= true

						if  (Company != CreditTransaction.CreditCompany)
							invoked.ToCompanyBaseAmount										= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
							if (LocalNegative)
								invoked.FlipAmounts											= true
								LocalFlipAmount												= true

						invoked.Description													= LocalDescription
						invoked.AllocationType											= AllocationType.Credit
						
						if (ReceivableApplication.TransType.Invoice
						or ReceivableApplication.TransType.DebitMemo
						or ReceivableApplication.TransType.CreditMemo)
							invoked.TransType														= ReceivableInvoiceRel.ReceivableInvoiceType
						else
							invoked.TransType														= ReceivableApplication.TransType
						
						invoked.Invoice														= ReceivableApplication.Invoice
						invoked.BatchNumber													= ReceivableApplication.BatchNumber
						invoked.DocumentNumber												= "7-" + DerivedDocumentNumberWithLeadingZeros
						if (!LocalNegative)
							invoked.AuditSummaryIndicator									= "03"	
						else
							invoked.AuditSummaryIndicator									= "09"
						invoked.AccumulationType											= "D"
						invoked.ApplicationCloseResult										= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader				= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 


				CreditARCDistributionCreation
					initialize LocalFlipAmount
					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution
						invoked.FinanceEnterpriseGroup											= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence						= WsProgramSequence
						invoked.LastDistributionSequence										= WsDistSeq
						invoked.CreateDate														= PrmCreateDate
						invoked.ApplicationID													= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany								= Company
						invoked.ReceivableCompanyDataGroup.TransactionCompany					= Company

						invoked.GeneralLedgerAccount											= LocalGLAccount
						invoked.GeneralLedgerDate												= GeneralLedgerDate
						invoked.TransactionDate													= GeneralLedgerDate
						invoked.ReceivableCompanyDataGroup.Customer								= CreditTransaction.CreditCustomer
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel				= LocalProcessLevel

						invoked.Origin															= LocalAppSource
						invoked.Status															= 2
						invoked.OriginalCurrency												= ApplicationCurrency
						if (CreateGainLossEntries)
							invoked.OriginalCurrency											= DebitCurrency
							invoked.DistributionAmount.ExchangeDate								= ApplicationAmount.ExchangeDate

							invoked.DistributionAmount.CurrencyAmount							= ApplicationAmount.CurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= ApplicationAmount.ProjectAmount.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= ApplicationAmount.ReportAmount1.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= ApplicationAmount.ReportAmount2.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= ApplicationAmount.ReportAmount3.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= ApplicationAmount.ReportAmount4.EnteredCurrencyAmount * LocalDistributionPercentage
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= ApplicationAmount.ReportAmount5.EnteredCurrencyAmount * LocalDistributionPercentage

							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= ApplicationAmount.AlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= ApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= ApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= ApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= ApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= ApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= ApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= ApplicationAmount.ProjectAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= ApplicationAmount.ReportAmount1.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= ApplicationAmount.ReportAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= ApplicationAmount.ReportAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= ApplicationAmount.ReportAmount4.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= ApplicationAmount.ReportAmount5.EnteredCurrencyRate
							
							if  (ReceivableApplication.TransType.CreditMemo
							or   ReceivableApplication.TransType.CustomerPayment)
								invoked.FlipAmounts												= false
								LocalFlipAmount													= false
								if (LocalNegative)
									invoked.FlipAmounts											= true
									LocalFlipAmount												= true
							else
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true
								if (LocalNegative)
									invoked.FlipAmounts											= false
									LocalFlipAmount												= false
						else
							if  (ReceivableApplication.TransType.CreditMemo
							or   ReceivableApplication.TransType.CustomerPayment)
								invoked.DistributionAmount										= CreditTransaction.CreditApplicationAmount
							else
								invoked.DistributionAmount										= CreditTransaction.CreditApplicationAmount
								invoked.FlipAmounts												= true
								LocalFlipAmount													= true

						invoked.Description														= LocalDescription
						
						if (ReceivableApplication.TransType.Invoice
						or ReceivableApplication.TransType.DebitMemo
						or ReceivableApplication.TransType.CreditMemo)
							invoked.TransType														= ReceivableInvoiceRel.ReceivableInvoiceType
						else
							invoked.TransType														= ReceivableApplication.TransType
						
						invoked.Invoice															= ReceivableApplication.Invoice
						invoked.BatchNumber														= ReceivableApplication.BatchNumber
						invoked.DocumentNumber													= "7-" + DerivedDocumentNumberWithLeadingZeros
						if (!LocalNegative)
							invoked.AuditSummaryIndicator										= "04"	
						else
							invoked.AuditSummaryIndicator										= "09"
						invoked.AllocationType												= AllocationType.AR
						invoked.AccumulationType												= "D"
						invoked.ApplicationCloseResult											= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader					= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 


				700UpdateTotals	









					if  (ArwsResult.Writeoff)
						CalculateReceivableYearPeriod.Company				= ArwsCompany
						CalculateReceivableYearPeriod.EffectiveDate			= ArwsGlDate
						LocalTrigger										= CalculateReceivableYearPeriod.CalculateYearPeriod


						if (!ArwsCompanyCustomerPeriodTotalsRel exists)
							invoke Create ArwsCompanyCustomerPeriodTotalsRel

						invoke AddToBuckets ArwsCompanyCustomerPeriodTotalsRel
							invoked.Type									= "W"
							invoked.Period									= CalculateReceivableYearPeriod.CurrentPeriod
							invoked.Amount									= ArwsxTranAmount

					invoke FastUpdate ArwsCompanyCustomerRel
						if  (ArwsResult.PaidInFull
						and  ArwsChargeback = "N")
							invoked.PaidPrmpts.PaidPrmpt[1]					+= 1

						if  (ArwsResult.PaidInFull
						or   ArwsResult.DelinquentPaidInFull
						or   ArwsResult.CalculateIPADBTOnly
						or   ArwsResult.Reversal)
							invoked.InvPaids.InvPaid[1]						+= 1
							invoked.YearToDateCashPaid						+= ArwsxTranAmount
							invoked.DaysBeyondTermsYearToDateCash			+= ArwsxTranAmount
							invoked.CurrentCashDays							+= ArwsxTranAmount * ArwsDay
							invoked.YearToDateCashDays						+= ArwsxTranAmount * ArwsDay
							invoked.DaysBeyondTermsCashDays					+= ArwsxTranAmount * ArwsDay2
							invoked.DaysBeyondTermsYearToDateDays			+= ArwsxTranAmount * ArwsDay2

							if  (ArwsResult.Reversal)
								invoked.CurrentCashPaid						-= ArwsxTranAmount
								invoked.DaysBeyondTermsCash					-= ArwsxTranAmount
							else
								invoked.CurrentCashPaid						+= ArwsxTranAmount
								invoked.DaysBeyondTermsCash					+= ArwsxTranAmount

						if  (ArwsResult.UpdateDispute)
							invoked.DisputedInvoices						-= 1
							if  (ArwsTransType = "C")
								invoked.DisputedInvoiceAmount				+= ArwsxTranAmount
							else
								invoked.DisputedInvoiceAmount				-= ArwsxTranAmount

						else
						if  (ArwsResult.NewDispute)
							invoked.DisputedInvoices						-= 1
							if  (ArwsTransType = "C")
								invoked.DisputedInvoiceAmount				+= ArwsxTranAmount
								invoked.DisputedInvoiceAmount				-= ArwsDisputeAmount
							else
								invoked.DisputedInvoiceAmount				-= ArwsxTranAmount
								invoked.DisputedInvoiceAmount				+= ArwsDisputeAmount

					initialize ArwsCompany
					initialize ArwsCustomer
					initialize ArwsResult
					initialize ArwsxTranAmount
					initialize ArwsDisputeAmount
					initialize ArwsGlDate
					initialize ArwsDay
					initialize ArwsDay2


				1100DoAradjust




					if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.Chargeback)

						if  (each.AdjustmentReason.ChargebackType.Detail)

							include 2400CreateAroitem


							WsBaseDistributionAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							WsTranDistributionAmount					= each.AdjustmentAmount.CurrencyAmount
							WsGeneralLedgerAccount						= ReceivableGeneralLedgerCode.DistributionAccount
							WsAuditSum									= "02"

							LocalChargeback								= true
							LocalDescription							= each.DerivedAdjustmentDescription + " " + "-" + " " + "Chargeback AR"
							include CreateDistributionFromAdjustment

							WsBaseDistributionAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							WsTranDistributionAmount					= each.AdjustmentAmount.CurrencyAmount * -1
							WsGeneralLedgerAccount						= each.AdjustmentReason.ChargebackAccount
							WsUseAcctUnitOverride						= true
							LocalDescription							= each.DerivedAdjustmentDescription + " " + "-" + " " + "Chargeback Adjust"



							include CreateDistributionFromAdjustment
							initialize UsePaymentDateForAdjustDistribution
							initialize LocalNegate
							initialize LocalChargeback


						else
						if  (each.AdjustmentReason.ChargebackType.Memo)

							invoke FastUpdate ReceivableInvoiceDetailRel
								invoked.Status = 1
								invoked.TransientUpdateReceivableProjectTransaction = true

							invoke FastUpdate ReceivableInvoiceRel
								invoked.Status = 1

							if  (each.AdjustmentReason.ChargebackDisputeCode entered)

								invoke CreateDisputeFromReceivableInvoice ReceivableInvoiceDetailRel.ReceivableInvoiceDetail
									invoked.PrmInvoiceDisputeAmount		= ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount
									invoked.PrmDisputeCode				= each.AdjustmentReason.ChargebackDisputeCode
									invoked.PrmDisputeDate				= DepositDate
									invoked.PrmOriginalDisputeAmount	= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									invoked.PrmDescription				= each.AdjustmentReason.Description
									invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
									invoked.PrmSkipOpenDisputeCheck		= true


							WsBaseDistributionAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							WsTranDistributionAmount					= each.AdjustmentAmount.CurrencyAmount
							WsGeneralLedgerAccount						= ReceivableGeneralLedgerCode.DistributionAccount
							WsAuditSum									= "02"

							LocalChargeback								= true
							LocalDescription							= each.DerivedAdjustmentDescription + " " + "-" + " " + "Chargeback AR"
							include CreateDistributionFromAdjustment

							WsBaseDistributionAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							WsTranDistributionAmount					= each.AdjustmentAmount.CurrencyAmount * -1
							WsGeneralLedgerAccount						= each.AdjustmentReason.ChargebackAccount
							WsUseAcctUnitOverride						= true
							LocalDescription							= each.DerivedAdjustmentDescription + " " + "-" + " " + "Chargeback Adjust"



							include CreateDistributionFromAdjustment
							initialize UsePaymentDateForAdjustDistribution
							initialize LocalNegate
							initialize LocalChargeback


						else
						if  (each.AdjustmentReason.ChargebackType.Summary)

							LocalChargebackSummary = true
							include RoundAmountsForChargebackSummary
							include 3400BuildWork5



							WsBaseDistributionAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							WsTranDistributionAmount					= each.AdjustmentAmount.CurrencyAmount  * -1
							WsToCompanyBaseAmount						= each.AdjustmentAmount.CurrencyAmount * -1
							WsGeneralLedgerAccount						= each.AdjustmentReason.ChargebackAccount
							WsAmdDescription							= ChargebackMemoMsg + " " + CreditTransaction.CreditNumber
							InitBatch									= true
							WsUseAcctUnitOverride						= true


							UsePaymentDateForAdjustDistribution			= true
							LocalNegate									= true
							LocalChargeback								= true
							LocalChargebackSummary						= true
							include CreateDistributionFromAdjustment

							initialize UsePaymentDateForAdjustDistribution
							initialize LocalNegate
							initialize LocalChargeback
							initialize LocalChargebackSummary

					if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
						include CreateOverApplicationAroitem



					if  ((each.AdjustmentReason.ReceivableAdjustmentReasonType.OverShort
					or	each.AdjustmentReason.ReceivableAdjustmentReasonType.MarkAsPaid	
					or	each.AdjustmentReason.ReceivableAdjustmentReasonType.Discount)
					and   each.AdjustmentReason.ReceivableInvoiceDisputeCode entered
					and   DebitIsInvoice)

						if  (ReceivableInvoiceDetailRel.Status.OpenTransaction
						and  !ReceivableInvoiceDetailRel.ReceivableInvoiceUnresolvedDisputeRel exists)


							invoke CreateDisputeFromReceivableInvoice ReceivableInvoiceDetailRel
								invoked.PrmInvoiceDisputeAmount		= ReceivableInvoiceDetailRel.OpenAmount
								invoked.PrmOriginalDisputeAmount	= ReceivableInvoiceDetailRel.BaseOpenAmount
								invoked.PrmDisputeCode				= each.AdjustmentReason.ReceivableInvoiceDisputeCode
								if  (DepositDate < this instance.ReceivableInvoiceDetailRel.TransactionDate)
									invoked.PrmDisputeDate			= ReceivableInvoiceDetailRel.TransactionDate
								else
									invoked.PrmDisputeDate			= DepositDate
								invoked.PrmDescription				= each.AdjustmentReason.Description
								invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
								invoked.PrmSkipOpenDisputeCheck		= true


					if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.Chargeback)
						WsAmdTransDate			= each.CreateDate
						WsUpdateSum				= "06"	


					if  (each.AdjustmentReason = "CURR")
						if (!CreateGainLossEntries)
							include CalculateRealizedGainLoss

					else
					if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
						WsAmdTransDate			= ReceivableInvoiceDetailRel.TransactionDate
						WsUpdateSum				= "08"	
						LocalAllocationType 	= AllocationType.Adjust
					else
					if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.MarkAsPaid)	
						WsAmdTransDate			= ReceivableInvoiceDetailRel.TransactionDate	
						WsUpdateSum				= "13"	
						LocalAllocationType 	= AllocationType.Adjust
					else
					if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)	
						WsAmdTransDate			= ReceivableInvoiceDetailRel.TransactionDate	
						WsUpdateSum				= "15"	
						LocalAllocationType 	= AllocationType.Adjust	
					else	
					if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.Discount)
						WsAmdTransDate			= each.CreateDate
						WsUpdateSum				= "07"	
						LocalAllocationType 	= AllocationType.Adjust
					if  (each.AdjustmentReason != "CURR")


						WsBaseAmount								= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount

						if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.Discount)
							if  (Company.ApplicationDiscountTaxRecovery)


								WsDiscountPercent		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount / ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

								DbCompany				= each.Company
								DbBatch					= each.ReceivableApplication.BatchNumber
								DbTransType				= each.ReceivableApplication.TransType
								DbInvoice				= each.ReceivableApplication.Invoice
								DbCustomer				= ReceivableInvoiceDetailRel.Customer
								DbSequence				= each.ReceivableApplication.PaymentSeq
								DbAppSeq				= each.ReceivableApplication.ApplicationSequence
								initialize LocalDistTaxCode
								for each DbReceivableGLDistributionRel
									if (LocalDistTaxCode entered
									and	LocalDistTaxCode = each.TaxCode)
										end for each

									if (LocalDistTaxCode not entered)
										LocalDistTaxCode = each.TaxCode	
									WsHoldAmdDistSeq		= each.ReceivableGLDistribution

								if  (WsHoldAmdDistSeq entered)

									WsAppAmtSave			= ApplicationAmount.CurrencyAmount
									Ws190AppliedAmountSave	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount



									if  (ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice = CreditTransaction.CreditNumber
									and  ReceivableApplication.TransType.CreditMemo)
										for each DbCreditApplicationRel
											if  (each.ReceivableApplication.Invoice != each.CreditTransaction.CreditNumber)
												WsAppAmtSave			= each.ApplicationAmount.CurrencyAmount
												Ws190AppliedAmountSave	= each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
												end for each

									WsAdjGeneralLedgerAccount = each.DistributionAccount
									for each DbReceivableGLDistributionRel
										if (each.ReceivableGLDistribution <= WsHoldAmdDistSeq
										and each.TaxCode entered)
											include 1730LoopThruAmd

									if  (each.ReceivableApplication.TransType.CustomerPayment)
										invoke FastUpdate ReceivablePaymentRel
											invoked.LastDistributionSequence					= WsDistSeq
											invoked.TransientUpdateReceivableProjectTransaction = true
									else
										invoke FastUpdate ReceivableInvoiceRel
											invoked.LastDistributionSequence					= WsDistSeq

						if (CreditAdjust)

							WsBaseDistributionAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							WsTranDistributionAmount					= each.AdjustmentAmount.CurrencyAmount * -1
							WsToCompanyBaseAmount						= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							WsGeneralLedgerAccount						= each.DistributionAccount
							WsUseCreditSide								= true
							WsUseTranDate								= true
							UsePaymentDateForAdjustDistribution			= true
							LocalNegate									= true
							include CreateDistributionFromAdjustment
							initialize UsePaymentDateForAdjustDistribution
							initialize LocalNegate

							WsBaseDistributionAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							WsTranDistributionAmount					= each.AdjustmentAmount.CurrencyAmount
							WsToCompanyBaseAmount						= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount 
							WsUseCreditSide								= true
							WsUseTranDate								= true
							if  (CreditTransaction.CreditType.Payment)
								WsGeneralLedgerAccount					= ReceivablePaymentRel.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
							else
								WsGeneralLedgerAccount					= ReceivableCreditInvoiceDetailRel.ReceivableGeneralLedgerCode.DistributionAccount
							WsAuditSum									= WsUpdateSum

							include CreateDistributionFromAdjustment
						else

							if (each.ReceivableApplication.TransType.CustomerPayment
							or  each.ReceivableApplication.TransType.CreditMemo)
								WsBaseDistributionAmount				= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								WsTranDistributionAmount				= each.AdjustmentAmount.CurrencyAmount * -1
								WsToCompanyBaseAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								LocalNegate								= true
							else
								WsBaseDistributionAmount				= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
								WsTranDistributionAmount				= each.AdjustmentAmount.CurrencyAmount
								WsToCompanyBaseAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalNegate								= false
							if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								LocalDescription							= each.DerivedAdjustmentDescription + " " + "-" + " " + "AR"
								LocalOverApply								= true
							WsGeneralLedgerAccount						= each.DistributionAccount
							WsUseTranDate								= true
							if  (!each.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								UsePaymentDateForAdjustDistribution			= true
							
							include CreateFirstAdjustmentDistribution

							initialize UsePaymentDateForAdjustDistribution
							initialize LocalNegate
							


							if (each.ReceivableApplication.TransType.CustomerPayment
							or  each.ReceivableApplication.TransType.CreditMemo)
								WsBaseDistributionAmount				= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
								WsTranDistributionAmount				= each.AdjustmentAmount.CurrencyAmount
								WsToCompanyBaseAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								WsBaseDistributionAmount				= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								WsTranDistributionAmount				= each.AdjustmentAmount.CurrencyAmount * -1
								WsToCompanyBaseAmount					= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1

							if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)

								initialize WsUpdateSum
								LocalDescription						= each.DerivedAdjustmentDescription + " " + "-" + " " + "Adjustment"
								LocalOverApply							= true
								WsGeneralLedgerAccount					= ARCodeRel.DistributionAccount
								UsePaymentDateForAdjustDistribution		= true
								if (!each.ReceivableApplication.TransType.CreditMemo)
									LocalNegate								= true
								LocalAdjGLCompany						= each.ReceivableApplication.CreditTransaction.CreditCompany
								
							else
								WsGeneralLedgerAccount						= ReceivableGeneralLedgerCode.DistributionAccount
							WsUseTranDate								= true
							WsAuditSum									= WsUpdateSum
							TranDateFlag								= true

							include CreateSecondAdjustmentDistribution

							if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								initialize UsePaymentDateForAdjustDistribution
								initialize LocalNegate



							if  (CreditTransaction.CreditType.Payment
							and ReceivablePaymentRel.IsPrepaymentTaxWithHolding)
								initialize LocalPrepaymentTaxDistribution
								initialize LocalCreateTaxTransaction
								initialize CalculateTax
								CalculateTax.TaxEntity					= each.Company.AccountingEntity
								CalculateTax.TaxCode					= each.Company.PrepaymentTaxCode
								CalculateTax.TaxDate					= ReceivablePaymentRel.DepositDate
								CalculateTax.BypassMemberEdit			= true 
								CalculateTax.Function					= "I"
								LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
								LocalPrepaymentTaxRate		= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
								LocalBeforeGSTAmount 		= each.AdjustmentAmount.CurrencyAmount / (1 + LocalPrepaymentTaxRate)
								LocalPrepaymentTaxAmount	= each.AdjustmentAmount.CurrencyAmount - LocalBeforeGSTAmount
								if (each.ReceivableApplication.TransType.CustomerPayment)
									LocalPrepaymentTaxDistribution 			= true
									WsBaseDistributionAmount				= ((each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) - (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount / (1 + LocalPrepaymentTaxRate)))
									WsTranDistributionAmount				= ((each.AdjustmentAmount.CurrencyAmount) - (each.AdjustmentAmount.CurrencyAmount / (1 + LocalPrepaymentTaxRate)))
									WsToCompanyBaseAmount					= ((each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) - (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount / (1 + LocalPrepaymentTaxRate)))

									LocalDescription						= each.DerivedAdjustmentDescription + " " + "-" + " " + "Tax Output"
									WsGeneralLedgerAccount					= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
									LocalCreateTaxTransaction				= true
									WsUseTranDate							= true
									UsePaymentDateForAdjustDistribution		= true
								
									include CreateDistributionFromAdjustment
									initialize UsePaymentDateForAdjustDistribution
									initialize LocalNegate
									initialize LocalPrepaymentTaxDistribution
									initialize LocalCreateTaxTransaction
								
									LocalPrepaymentTaxDistribution			= true
									WsBaseDistributionAmount				= (((each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) - (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount / (1 + LocalPrepaymentTaxRate))) * -1)
									WsTranDistributionAmount				= (((each.AdjustmentAmount.CurrencyAmount) - (each.AdjustmentAmount.CurrencyAmount / (1 + LocalPrepaymentTaxRate))) * -1)
									WsToCompanyBaseAmount					= (((each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount) - (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount / (1 + LocalPrepaymentTaxRate))) * -1)
									LocalDescription						= each.DerivedAdjustmentDescription + " " + "-" + " " + "Tax Control"
									WsGeneralLedgerAccount					= Company.PrepaymentTaxControlGLAccount
									UsePaymentDateForAdjustDistribution		= true

									WsUseTranDate								= true


									include CreateDistributionFromAdjustment
									initialize UsePaymentDateForAdjustDistribution
									initialize LocalNegate
									initialize LocalPrepaymentTaxDistribution

					if  (DebitIsInvoice)	

						if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.Discount)


							invoke UpdatePeriodTotals ReceivableInvoiceDetailRel.CompanyCustomerRel
								invoked.Type					= "D"
								if (each.ReceivableApplication.TransType.CreditMemo)
									invoked.Amount				= each.BaseEarnedDiscountAmount * -1
									invoked.Amount2				= each.BaseUnEarnedDiscountAmount * -1
								else
									invoked.Amount				= each.BaseEarnedDiscountAmount
									invoked.Amount2				= each.BaseUnEarnedDiscountAmount

								invoked.EffectiveDate			= DepositDate 

						if  (each.AdjustmentReason.ChargebackType.Detail)

							ArwsCompany				= NewInvoiceDetailRel.Company
							ArwsCustomer			= NewInvoiceDetailRel.Customer
							WorkAmount				= NewInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							if  (NewInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								WorkAmount			*= -1

							invoke UpdateCurrentBalance ArwsCompanyCustomerRel
								invoked.TransactionDate				= GeneralLedgerDate
								invoked.ChangeAmount				= WorkAmount
								invoked.PrmBalanceType				= 4
								invoked.PrmReference				= NewReceivableInvoice.Reference


							invoke UpdatePeriodTotals ArwsCompanyCustomerRel
								invoked.Type						= "C"
								invoked.Amount						= WorkAmount

								invoked.EffectiveDate				= GeneralLedgerDate 


						if  (each.AdjustmentReason.ChargebackType.Memo)

							if  (Company							 != CreditTransaction.CreditCompany
							or   ReceivableInvoiceDetailRel.Customer != CreditTransaction.CreditCustomer)
								invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel 
									invoked.TransactionDate				= GeneralLedgerDate
									if  (ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
										invoked.ChangeAmount			= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									else
										invoked.ChangeAmount			= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

								invoke UpdatePeriodTotals ReceivableInvoiceDetailRel.CompanyCustomerRel
									invoked.Type					= "C"
									if (each.ReceivableApplication.TransType.CreditMemo)
										invoked.Amount				= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									else
										invoked.Amount				= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

									invoked.EffectiveDate			= GeneralLedgerDate

						if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								ArwsCompany				= NewInvoiceDetailRel.Company
								ArwsCustomer			= NewInvoiceDetailRel.Customer
								WorkAmount				= NewInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								if  (NewInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									WorkAmount			*= -1
								invoke UpdateCurrentBalance ArwsCompanyCustomerRel
									invoked.TransactionDate				= GeneralLedgerDate
									invoked.ChangeAmount				= WorkAmount
									invoked.PrmBalanceType				= 14
									invoked.PrmReference				= NewOverApplicationReceivableInvoice.Reference

								invoke UpdatePeriodTotals ArwsCompanyCustomerRel
									invoked.Type						= "C"
									invoked.Amount						= WorkAmount

									invoked.EffectiveDate				= GeneralLedgerDate

						if  (!each.AdjustmentReason.ChargebackType.Detail
						and  !each.AdjustmentReason.ChargebackType.Memo)
							if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverShort)

								if  (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount > 0
								or  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount < 0)

									ArwsCompany				= Company
									ArwsCustomer			= ReceivableInvoiceRel.Customer
									ArwsResult				= "W"	
									ArwsGlDate				= GeneralLedgerDate
									if  (each.ReceivableApplication.TransType.CustomerPayment
									or   each.ReceivableApplication.TransType.CreditMemo)
										ArwsxTranAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									else
										ArwsxTranAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
									include 700UpdateTotals

							else
							if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.MarkAsPaid)	

								if  (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount > 0	
								or  (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount < 0	
								and  ApplicationSource.ReversalOfApplications))	
									ArwsCompany				= Company	
									ArwsCustomer			= ReceivableInvoiceRel.Customer	
									ArwsResult				= "W"	
									ArwsGlDate				= GeneralLedgerDate	
									if  (each.ReceivableApplication.TransType.CustomerPayment	
									or   each.ReceivableApplication.TransType.CreditMemo)	
										ArwsxTranAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1	
									else	
										ArwsxTranAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount	
									include 700UpdateTotals	

							else
							if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)	

								if  (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount > 0	
								or  (each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount < 0	
								and  ApplicationSource.ReversalOfApplications))	
									ArwsCompany				= Company	
									ArwsCustomer			= ReceivableInvoiceRel.Customer	
									ArwsResult				= "W"	
									ArwsGlDate				= GeneralLedgerDate	
									if  (each.ReceivableApplication.TransType.CustomerPayment	
									or   each.ReceivableApplication.TransType.CreditMemo)	
										ArwsxTranAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1	
									else	
										ArwsxTranAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount	
									include 700UpdateTotals	

					else
					if  (Writeoff)

						ArwsCompany				= Company
						ArwsCustomer			= ReceivablePaymentRel.Customer
						ArwsResult				= "W"	
						ArwsGlDate				= GeneralLedgerDate
						ArwsxTranAmount			= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						include 700UpdateTotals




				1730LoopThruAmd


					if  (each.ReceivableGLDistribution > WsHoldAmdDistSeq)
						end for each
					else
					if  (each.TaxCode entered)

						WsTaxRecoveryAmount			= (Ws190TranAmount * WsDiscountPercent)


						if (ApplicationSource.ReversalOfApplications)
							WsAraTranAppldAmt			= WsAppAmtSave * -1
							WsAraBaseAppldAmt			= Ws190AppliedAmountSave * -1
						else
							WsAraTranAppldAmt			= WsAppAmtSave
							WsAraBaseAppldAmt			= Ws190AppliedAmountSave

						WsReverseTranAmount			= each.DistributionAmount.CurrencyAmount - ((WsAraTranAppldAmt / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount) * each.DistributionAmount.CurrencyAmount)
						WsReverseBaseAmount			= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount - ((WsAraBaseAppldAmt / ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount) * each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount)


						if  (each.ReceivableCompanyGroup.GlCompany != each.ReceivableCompanyDataGroup.TransactionCompany)
							if  (each.ReceivableCompanyGroup.GlCompany.Currency = each.ReceivableCompanyDataGroup.TransactionCompany.Currency)
								WsToCompanyBaseAmount				= WsReverseBaseAmount
							else
								initialize CurrencyDateWork
								CurrencyDateWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								CurrencyDateWork.ExchangeDate			= each.GeneralLedgerDate
								CurrencyDateWork.FromCurrency			= each.OriginalCurrency 
								CurrencyDateWork.TransactionAmount		= WsReverseTranAmount
								CurrencyDateWork.BaseAmount.ToCurrency	= each.ReceivableCompanyGroup.GlCompany.Currency
								WsToCompanyBaseAmount					= CurrencyDateWork.BaseAmount.OutputCurrencyAmount * -1

						initialize CalculateTax
						CalculateTax.TaxEntity			= each.ReceivableCompanyGroup.GlCompany.AccountingEntity
						CalculateTax.TaxCode			= each.TaxCode
						CalculateTax.BypassMemberEdit	= true
						CalculateTax.Function			= "I"
						if (each.TaxPoint = "P")
							LocalUsePaymentDate			= true
						LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax

						WsHoldTaxableAmount			= each.BaseTaxableAmount * WsDiscountPercent

						if  (!ApplicationSource.ReversalOfApplications)
							WsBaseDistributionAmount				= WsReverseBaseAmount * -1
							WsTranDistributionAmount				= WsReverseTranAmount * -1
							WsToCompanyBaseAmount					= WsToCompanyBaseAmount * -1
						else
							WsBaseDistributionAmount				= WsReverseBaseAmount
							WsTranDistributionAmount				= WsReverseTranAmount

						WsGeneralLedgerAccount						= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
						WsAuditSum									= each.AuditSummaryIndicator
						WsDistSource								= each.DistributionSource


						DoTaxHistory								= true
						LocalTaxRecovery = true
						include CreateDistribFromDistrib



						WsBaseDistributionAmount					= WsBaseDistributionAmount * -1
						WsTranDistributionAmount					= WsTranDistributionAmount * -1
						WsToCompanyBaseAmount						= WsToCompanyBaseAmount * -1
						WsGeneralLedgerAccount						= WsAdjGeneralLedgerAccount
						WsAuditSum									= each.AuditSummaryIndicator
						WsDistSource								= each.DistributionSource

						SendTaxable									= true

						LocalTaxRecovery = true
						include CreateDistribFromDistrib

						initialize WsToCompanyBaseAmount


				CalculateRealizedGainLoss 
					initialize LocalAccumulatedGainLoss

					if (ReceivableInvoiceRel.CanProrateDistributions)
						initialize LocalAppliedDetailPercentage
						LocalAppliedDetailPercentage = (ApplicationAmount.CurrencyAmount / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)
						for each ReceivableInvoiceRel.ProrateDistributionsRel


							initialize LocalCurrencyCalculationGroup
							if (DerivedDebitCurrency != DerivedCreditCurrency)	
								initialize CurrencyDateWork
								CurrencyDateWork.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								CurrencyDateWork.ExchangeDate												= DepositDate
								CurrencyDateWork.FromCurrency												= DerivedDebitCurrency	
								CurrencyDateWork.TransactionAmount											= each.DistributionAmount.CurrencyAmount
								CurrencyDateWork.BaseAmount.ToCurrency										= DerivedCreditCurrency	
								LocalCurrencyCalculationGroup.CurrencyAmount								= CurrencyDateWork.BaseAmount.OutputCurrencyAmount
								LocalCurrencyCalculationGroup.FromCurrency									= DerivedCreditCurrency
							else
								LocalCurrencyCalculationGroup.CurrencyAmount								= each.DistributionAmount.CurrencyAmount
								LocalCurrencyCalculationGroup.FromCurrency									= DerivedDebitCurrency


							LocalCurrencyCalculationGroup.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							LocalCurrencyTable																= ReceivableInvoiceRel.CurrencyTable
							LocalCurrencyCalculationGroup.ExchangeDate										= DepositDate
							LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency						= Company.AccountingEntity.FunctionalCurrency
							LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency						= Company.AccountingEntity.AlternateCurrency
							LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency						= Company.AccountingEntity.AlternateCurrency2
							LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency						= Company.AccountingEntity.AlternateCurrency3
							LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency						= each.GeneralLedgerAccount.ToAccountingEntity.FunctionalCurrency
							LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency						= each.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency
							LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency						= each.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency2
							LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency						= each.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency3
							LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency							= each.GeneralLedgerAccount.Project.Currency
							LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency							= Company.FinanceEnterpriseGroup.ReportCurrencyOne
							LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency							= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
							LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency							= Company.FinanceEnterpriseGroup.ReportCurrencyThree
							LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency							= Company.FinanceEnterpriseGroup.ReportCurrencyFour
							LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency							= Company.FinanceEnterpriseGroup.ReportCurrencyFive

							LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyRate					= CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate					= CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate					= CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate					= CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate					= CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate					= CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate


							initialize GainLossCalculation
							GainLossCalculation.DefaultSystemAccount										= 2 
							GainLossCalculation.AccountType													= 1 
							GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ProjectAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
							GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate

							if (first GainLossAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount - each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount  
							if (first GainLossAdjustmentRel.AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount - each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount 
							if (first GainLossAdjustmentRel.AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount - each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount 
							if (first GainLossAdjustmentRel.AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount - each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount 
							GainLossCalculation.NewCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount - each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount 
							GainLossCalculation.NewCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount - each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount 
							GainLossCalculation.NewCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount - each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount 
							GainLossCalculation.NewCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount - each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount 
							if (first GainLossAdjustmentRel.AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount - each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
							if (first GainLossAdjustmentRel.AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount - each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount 
							if (first GainLossAdjustmentRel.AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount - each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount 
							if (first GainLossAdjustmentRel.AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount - each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount 
							if (first GainLossAdjustmentRel.AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount - each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount 
							if (first GainLossAdjustmentRel.AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount entered)
								GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount - each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount 
							GainLossCalculation.SkipCurrencyExchange											= true
							GainLossCalculation.OriginFinanceCodeBlock											= each.GeneralLedgerAccount

							LocalBoolean = GainLossCalculation.DerivedCalculateAmount

							include ProrateGain
							include ProrateLoss
							include CreateGainLossDistributions
					else


						initialize GainLossCalculation
						GainLossCalculation.DefaultSystemAccount											= 2 
						if (ReceivableApplication.TransType.CustomerPayment
						or  ReceivableApplication.TransType.CreditMemo)
							GainLossCalculation.AccountType													= 0 
						else
							GainLossCalculation.AccountType													= 1 
						GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate			= CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate		= CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ProjectAmount.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
						GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyRate				= CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate

						GainLossCalculation.NewCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.AlternateAmount.EnteredCurrencyAmount			= ApplicationAmount.AlternateAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= ApplicationAmount.AlternateAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= ApplicationAmount.AlternateAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount		= ApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToFunctionalAmount.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount		= ApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToAlternateAmount.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount		= ApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToAlternateAmount2.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount		= ApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ToAlternateAmount3.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ProjectAmount.EnteredCurrencyAmount			= ApplicationAmount.ProjectAmount.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ProjectAmount.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ReportAmount1.EnteredCurrencyAmount			= ApplicationAmount.ReportAmount1.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ReportAmount2.EnteredCurrencyAmount			= ApplicationAmount.ReportAmount2.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ReportAmount3.EnteredCurrencyAmount			= ApplicationAmount.ReportAmount3.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ReportAmount4.EnteredCurrencyAmount			= ApplicationAmount.ReportAmount4.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyAmount
						GainLossCalculation.NewCurrencyAmount.ReportAmount5.EnteredCurrencyAmount			= ApplicationAmount.ReportAmount5.EnteredCurrencyAmount - CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyAmount
						GainLossCalculation.SkipCurrencyExchange											= true
						GainLossCalculation.OriginFinanceCodeBlock											= ReceivableGeneralLedgerCode.DistributionAccount

						LocalBoolean = GainLossCalculation.DerivedCalculateAmount

						include CreateGainLossDistributions


					WsProgramSequence += 1
					if (WsProgramSequence = 0)
						WsProgramSequence = 1

					invoke CreateFromApplicationClose ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup								= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence			= WsProgramSequence
						invoked.LastDistributionSequence							= WsDistSeq
						invoked.CreateDate											= PrmCreateDate
						invoked.ApplicationID										= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany					= Company
						invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company

						invoked.GeneralLedgerAccount								= GLCodeRel.DistributionAccount
						invoked.GeneralLedgerDate									= GeneralLedgerDate
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= LocalProcessLevel
						invoked.Status												= 2
						invoked.OriginalCurrency									= ApplicationCurrency

						invoked.DistributionAmount.ExchangeDate						= CreditTransaction.CreditApplicationAmount.ExchangeDate
						invoked.DistributionAmount.CurrencyAmount					= blank
						invoked.DistributionAmount.FunctionalAmount					= LocalAccumulatedGainLoss.FunctionalAmount
						invoked.DistributionAmount.AlternateAmount					= LocalAccumulatedGainLoss.AlternateAmount
						invoked.DistributionAmount.AlternateAmount2					= LocalAccumulatedGainLoss.AlternateAmount2
						invoked.DistributionAmount.AlternateAmount3					= LocalAccumulatedGainLoss.AlternateAmount3
						invoked.DistributionAmount.ToFunctionalAmount				= LocalAccumulatedGainLoss.ToFunctionalAmount
						invoked.DistributionAmount.ToAlternateAmount				= LocalAccumulatedGainLoss.ToAlternateAmount
						invoked.DistributionAmount.ToAlternateAmount2				= LocalAccumulatedGainLoss.ToAlternateAmount2
						invoked.DistributionAmount.ToAlternateAmount3				= LocalAccumulatedGainLoss.ToAlternateAmount3
						invoked.DistributionAmount.ProjectAmount					= LocalAccumulatedGainLoss.ProjectAmount
						invoked.DistributionAmount.ReportAmount1					= LocalAccumulatedGainLoss.ReportAmount1
						invoked.DistributionAmount.ReportAmount2					= LocalAccumulatedGainLoss.ReportAmount2
						invoked.DistributionAmount.ReportAmount3					= LocalAccumulatedGainLoss.ReportAmount3
						invoked.DistributionAmount.ReportAmount4					= LocalAccumulatedGainLoss.ReportAmount4
						invoked.DistributionAmount.ReportAmount5					= LocalAccumulatedGainLoss.ReportAmount5
						invoked.DistributionAmount.KeepRateAndAmount				= true


						invoked.Description											= RealizedCurrencyOffsetMessage + " " + TransTypeValue + " " + ReceivableApplication.Invoice
						invoked.TransType											= ReceivableApplication.TransType
						invoked.Invoice												= ReceivableApplication.Invoice
						invoked.BatchNumber											= ReceivableApplication.BatchNumber
						if  (ReceivableApplication.TransType.CustomerPayment)
							invoked.ReceivableCompanyDataGroup.Customer					= ReceivablePaymentDebitRel.Customer
							invoked.TransactionDate										= ReceivablePaymentDebitRel.GeneralLedgerDate
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivablePaymentDebitRel.ReceivableProcessLevel
						else
							invoked.ReceivableCompanyDataGroup.Customer					= ReceivableInvoiceDetailRel.Customer
							invoked.TransactionDate										= ReceivableInvoiceDetailRel.TransactionDate
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceDetailRel.ReceivableProcessLevel
						if  (ApplicationSource.ReversalOfApplications)
							invoked.Origin											= "RX"
						else
							invoked.Origin											= "RQ"
						invoked.DocumentNumber										= "7-" + DerivedDocumentNumberWithLeadingZeros
						invoked.AuditSummaryIndicator								= "09"	
						invoked.AccumulationType									= "D"
						invoked.AutoReverseUnrealizedGainLoss						= "C"
						invoked.ApplicationCloseResult								= PrmApplicationCloseResult
						invoked.TransientIntercompanyBillingSettlementHeader		= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 


				ProrateGain
					if (LocalAppliedDetailPercentage != 1)
						GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ToFunctionalAmount.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ToAlternateAmount.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ToAlternateAmount.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ToAlternateAmount2.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ToAlternateAmount3.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ProjectAmount.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ProjectAmount.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount
						GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount

						LocalNumberOfDecimals = Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
						round GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency.NumberOfDecimals
						round GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency2.NumberOfDecimals
						round GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency3.NumberOfDecimals
						round GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
						round GainLossCalculation.GainAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
						round GainLossCalculation.GainAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
						round GainLossCalculation.GainAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
						round GainLossCalculation.GainAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.Project.Currency.NumberOfDecimals
						round GainLossCalculation.GainAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
						round GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
						round GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
						round GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
						round GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
						round GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo


				ProrateLoss
					if (LocalAppliedDetailPercentage != 1)
						GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount	
						GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ToFunctionalAmount.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ToAlternateAmount.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ToAlternateAmount.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ToAlternateAmount2.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ToAlternateAmount3.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ProjectAmount.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ProjectAmount.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount
						GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount		= LocalAppliedDetailPercentage * GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount

						LocalNumberOfDecimals = Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
						round GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency.NumberOfDecimals
						round GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency2.NumberOfDecimals
						round GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency3.NumberOfDecimals
						round GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
						round GainLossCalculation.LossAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
						round GainLossCalculation.LossAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
						round GainLossCalculation.LossAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
						round GainLossCalculation.LossAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.Project.Currency.NumberOfDecimals
						round GainLossCalculation.LossAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
						round GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
						round GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
						round GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
						round GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
						LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
						round GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo


				CreateGainLossDistributions

					if (GainLossCalculation.GainLossFound)
						if (GainLossCalculation.SingleSystemAccount)
							WsProgramSequence += 1
							if (WsProgramSequence = 0)
								WsProgramSequence = 1

							if ((ReceivableApplication.TransType.CustomerPayment
							or   ReceivableApplication.TransType.CreditMemo)
							and  !ReceivableInvoiceRel.CanProrateDistributions)
								NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount 
								LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
								GainLossCalculation.GainAmount = NegativeFinanceCurrencyAmount

							LocalGainLossMessage = RealizedCurrencyGainLossMessage

							invoke CreateFromApplicationClose ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.ReceivableGLDistribution.ProgramSequence				= WsProgramSequence
								invoked.LastDistributionSequence								= 1
								invoked.CreateDate												= PrmCreateDate
								invoked.ReceivableCompanyGroup.GlCompany						= Company
								invoked.ApplicationID											= LocalApplicationID
								invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
								invoked.GeneralLedgerDate										= GeneralLedgerDate
								invoked.GeneralLedgerAccount									= GainLossCalculation.GainAccount

								invoked.DistributionAmount.ExchangeDate							= DepositDate
								invoked.DistributionAmount.CurrencyAmount						= blank
								invoked.DistributionAmount.FunctionalAmount						= GainLossCalculation.GainAmount.FunctionalAmount
								invoked.DistributionAmount.AlternateAmount						= GainLossCalculation.GainAmount.AlternateAmount
								invoked.DistributionAmount.AlternateAmount2						= GainLossCalculation.GainAmount.AlternateAmount2
								invoked.DistributionAmount.AlternateAmount3						= GainLossCalculation.GainAmount.AlternateAmount3
								invoked.DistributionAmount.ToFunctionalAmount					= GainLossCalculation.GainAmount.ToFunctionalAmount
								invoked.DistributionAmount.ToAlternateAmount					= GainLossCalculation.GainAmount.ToAlternateAmount
								invoked.DistributionAmount.ToAlternateAmount2					= GainLossCalculation.GainAmount.ToAlternateAmount2
								invoked.DistributionAmount.ToAlternateAmount3					= GainLossCalculation.GainAmount.ToAlternateAmount3
								invoked.DistributionAmount.ProjectAmount						= GainLossCalculation.GainAmount.ProjectAmount
								invoked.DistributionAmount.ReportAmount1						= GainLossCalculation.GainAmount.ReportAmount1
								invoked.DistributionAmount.ReportAmount2						= GainLossCalculation.GainAmount.ReportAmount2
								invoked.DistributionAmount.ReportAmount3						= GainLossCalculation.GainAmount.ReportAmount3
								invoked.DistributionAmount.ReportAmount4						= GainLossCalculation.GainAmount.ReportAmount4
								invoked.DistributionAmount.ReportAmount5						= GainLossCalculation.GainAmount.ReportAmount5
								invoked.DistributionAmount.KeepRateAndAmount					= true

								invoked.OriginalCurrency										= ApplicationCurrency
								invoked.TransType												= ReceivableApplication.TransType
								invoked.Invoice													= ReceivableApplication.Invoice
								if  (ReceivableApplication.TransType.CustomerPayment)
									invoked.BatchNumber											= ReceivablePaymentDebitRel.ReceivablePaymentHeader
									invoked.SequenceNumber										= ReceivablePaymentDebitRel.ReceivablePayment
									invoked.ReceivableCompanyDataGroup.Customer					= ReceivablePaymentDebitRel.Customer
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivablePaymentDebitRel.ReceivableProcessLevel
									invoked.TransactionDate										= ReceivablePaymentDebitRel.GeneralLedgerDate
								else
									invoked.BatchNumber											= ReceivableInvoiceDetailRel.BatchNumber
									invoked.ReceivableCompanyDataGroup.Customer					= ReceivableInvoiceDetailRel.Customer
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceDetailRel.ReceivableProcessLevel
									invoked.TransactionDate										= ReceivableInvoiceDetailRel.TransactionDate
								if  (ApplicationSource.ReversalOfApplications)
									invoked.Origin												= "RX"
								else
									invoked.Origin												= "RQ"
								invoked.AccumulationType										= "D"
								invoked.DocumentNumber											= "7-" +  DerivedDocumentNumberWithLeadingZeros
								invoked.Status													= 2
								invoked.Description												= LocalGainLossMessage + " " + TransTypeValue + " " + ReceivableApplication.Invoice
								invoked.Units													= each.Units
								invoked.AuditSummaryIndicator									= "09"	
								invoked.AutoReverseUnrealizedGainLoss							= "C"










								invoked.ApplicationCloseResult									= PrmApplicationCloseResult
								invoked.TransientIntercompanyBillingSettlementHeader			= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 

							NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount 
							LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

							LocalAccumulatedGainLoss.FunctionalAmount.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
							LocalAccumulatedGainLoss.AlternateAmount.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
							LocalAccumulatedGainLoss.AlternateAmount2.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
							LocalAccumulatedGainLoss.AlternateAmount3.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
							LocalAccumulatedGainLoss.ReportAmount1.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
							LocalAccumulatedGainLoss.ReportAmount2.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
							LocalAccumulatedGainLoss.ReportAmount3.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
							LocalAccumulatedGainLoss.ReportAmount4.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
							LocalAccumulatedGainLoss.ReportAmount5.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate
								
							LocalAccumulatedGainLoss.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ToAlternateAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ProjectAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ReportAmount1.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ReportAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ReportAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ReportAmount4.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							LocalAccumulatedGainLoss.ReportAmount5.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						else

							if (GainLossCalculation.AmountType.Positive
							or  GainLossCalculation.AmountType.NegativeAndPositive)
								WsProgramSequence += 1
								if (WsProgramSequence = 0)
									WsProgramSequence = 1

								if ((ReceivableApplication.TransType.CustomerPayment
								or   ReceivableApplication.TransType.CreditMemo)
								and  !ReceivableInvoiceRel.CanProrateDistributions)
									NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount 
									LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
									GainLossCalculation.GainAmount = NegativeFinanceCurrencyAmount

								LocalGainLossMessage = RealizedCurrencyGainMessage

								invoke CreateFromApplicationClose ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableGLDistribution.ProgramSequence				= WsProgramSequence
									invoked.LastDistributionSequence								= 1
									invoked.CreateDate												= PrmCreateDate
									invoked.ReceivableCompanyGroup.GlCompany						= Company
									invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
									invoked.GeneralLedgerDate										= GeneralLedgerDate
									invoked.ApplicationID											= LocalApplicationID
									invoked.GeneralLedgerAccount									= GainLossCalculation.GainAccount
									invoked.DistributionAmount.ExchangeDate							= DepositDate
									invoked.DistributionAmount.CurrencyAmount						= blank
									invoked.DistributionAmount.FunctionalAmount						= GainLossCalculation.GainAmount.FunctionalAmount
									invoked.DistributionAmount.AlternateAmount						= GainLossCalculation.GainAmount.AlternateAmount
									invoked.DistributionAmount.AlternateAmount2						= GainLossCalculation.GainAmount.AlternateAmount2
									invoked.DistributionAmount.AlternateAmount3						= GainLossCalculation.GainAmount.AlternateAmount3
									invoked.DistributionAmount.ToFunctionalAmount					= GainLossCalculation.GainAmount.ToFunctionalAmount
									invoked.DistributionAmount.ToAlternateAmount					= GainLossCalculation.GainAmount.ToAlternateAmount
									invoked.DistributionAmount.ToAlternateAmount2					= GainLossCalculation.GainAmount.ToAlternateAmount2
									invoked.DistributionAmount.ToAlternateAmount3					= GainLossCalculation.GainAmount.ToAlternateAmount3
									invoked.DistributionAmount.ProjectAmount						= GainLossCalculation.GainAmount.ProjectAmount
									invoked.DistributionAmount.ReportAmount1						= GainLossCalculation.GainAmount.ReportAmount1
									invoked.DistributionAmount.ReportAmount2						= GainLossCalculation.GainAmount.ReportAmount2
									invoked.DistributionAmount.ReportAmount3						= GainLossCalculation.GainAmount.ReportAmount3
									invoked.DistributionAmount.ReportAmount4						= GainLossCalculation.GainAmount.ReportAmount4
									invoked.DistributionAmount.ReportAmount5						= GainLossCalculation.GainAmount.ReportAmount5
									invoked.DistributionAmount.KeepRateAndAmount					= true

									invoked.OriginalCurrency										= ApplicationCurrency
									invoked.TransType												= ReceivableApplication.TransType
									invoked.Invoice													= ReceivableApplication.Invoice
									if  (ReceivableApplication.TransType.CustomerPayment)
										invoked.BatchNumber											= ReceivablePaymentDebitRel.ReceivablePaymentHeader
										invoked.SequenceNumber										= ReceivablePaymentDebitRel.ReceivablePayment
										invoked.ReceivableCompanyDataGroup.Customer					= ReceivablePaymentDebitRel.Customer
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivablePaymentDebitRel.ReceivableProcessLevel
										invoked.TransactionDate										= ReceivablePaymentDebitRel.GeneralLedgerDate
									else
										invoked.BatchNumber											= ReceivableInvoiceDetailRel.BatchNumber
										invoked.ReceivableCompanyDataGroup.Customer					= ReceivableInvoiceDetailRel.Customer
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceDetailRel.ReceivableProcessLevel
										invoked.TransactionDate										= ReceivableInvoiceDetailRel.TransactionDate
									if  (ApplicationSource.ReversalOfApplications)
										invoked.Origin												= "RX"
									else
										invoked.Origin												= "RQ"
									invoked.AccumulationType										= "D"
									invoked.DocumentNumber											= "7-" +  DerivedDocumentNumberWithLeadingZeros
									invoked.Status													= 2
									invoked.Description												= LocalGainLossMessage + " " + TransTypeValue + " " + ReceivableApplication.Invoice
									invoked.Units													= each.Units
									invoked.AuditSummaryIndicator									= "09"	
									invoked.AutoReverseUnrealizedGainLoss							= "C"










									invoked.ApplicationCloseResult									= PrmApplicationCloseResult
									invoked.TransientIntercompanyBillingSettlementHeader			= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 

								NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount 
								LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

								LocalAccumulatedGainLoss.FunctionalAmount.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
								LocalAccumulatedGainLoss.AlternateAmount.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
								LocalAccumulatedGainLoss.AlternateAmount2.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
								LocalAccumulatedGainLoss.AlternateAmount3.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount1.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount2.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount3.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount4.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount5.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate

								LocalAccumulatedGainLoss.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToAlternateAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ProjectAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount1.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount4.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount5.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount


							if (GainLossCalculation.AmountType.Negative
							or  GainLossCalculation.AmountType.NegativeAndPositive)
								WsProgramSequence += 1
								if (WsProgramSequence = 0)
									WsProgramSequence = 1
								
								if ((ReceivableApplication.TransType.CustomerPayment
								or   ReceivableApplication.TransType.CreditMemo)
								and  !ReceivableInvoiceRel.CanProrateDistributions)
									NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount 
									LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
									GainLossCalculation.LossAmount = NegativeFinanceCurrencyAmount

								LocalGainLossMessage = RealizedCurrencyLossMessage

								invoke CreateFromApplicationClose ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableGLDistribution.ProgramSequence				= WsProgramSequence
									invoked.LastDistributionSequence								= 1
									invoked.CreateDate												= PrmCreateDate
									invoked.ReceivableCompanyGroup.GlCompany						= Company
									invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
									invoked.GeneralLedgerDate										= GeneralLedgerDate
									invoked.GeneralLedgerAccount									= GainLossCalculation.LossAccount

									invoked.DistributionAmount.ExchangeDate							= DepositDate
									invoked.DistributionAmount.CurrencyAmount						= blank
									invoked.DistributionAmount.FunctionalAmount						= GainLossCalculation.LossAmount.FunctionalAmount
									invoked.DistributionAmount.AlternateAmount						= GainLossCalculation.LossAmount.AlternateAmount
									invoked.DistributionAmount.AlternateAmount2						= GainLossCalculation.LossAmount.AlternateAmount2
									invoked.DistributionAmount.AlternateAmount3						= GainLossCalculation.LossAmount.AlternateAmount3
									invoked.DistributionAmount.ToFunctionalAmount					= GainLossCalculation.LossAmount.ToFunctionalAmount
									invoked.DistributionAmount.ToAlternateAmount					= GainLossCalculation.LossAmount.ToAlternateAmount
									invoked.DistributionAmount.ToAlternateAmount2					= GainLossCalculation.LossAmount.ToAlternateAmount2
									invoked.DistributionAmount.ToAlternateAmount3					= GainLossCalculation.LossAmount.ToAlternateAmount3
									invoked.DistributionAmount.ProjectAmount						= GainLossCalculation.LossAmount.ProjectAmount
									invoked.DistributionAmount.ReportAmount1						= GainLossCalculation.LossAmount.ReportAmount1
									invoked.DistributionAmount.ReportAmount2						= GainLossCalculation.LossAmount.ReportAmount2
									invoked.DistributionAmount.ReportAmount3						= GainLossCalculation.LossAmount.ReportAmount3
									invoked.DistributionAmount.ReportAmount4						= GainLossCalculation.LossAmount.ReportAmount4
									invoked.DistributionAmount.ReportAmount5						= GainLossCalculation.LossAmount.ReportAmount5
									invoked.DistributionAmount.KeepRateAndAmount					= true

									invoked.OriginalCurrency										= ApplicationCurrency
									invoked.TransType												= ReceivableApplication.TransType
									invoked.Invoice													= ReceivableApplication.Invoice
									if  (ReceivableApplication.TransType.CustomerPayment)
										invoked.BatchNumber											= ReceivablePaymentDebitRel.ReceivablePaymentHeader
										invoked.SequenceNumber										= ReceivablePaymentDebitRel.ReceivablePayment
										invoked.ReceivableCompanyDataGroup.Customer					= ReceivablePaymentDebitRel.Customer
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivablePaymentDebitRel.ReceivableProcessLevel
										invoked.TransactionDate										= ReceivablePaymentDebitRel.GeneralLedgerDate
									else
										invoked.BatchNumber											= ReceivableInvoiceDetailRel.BatchNumber
										invoked.ReceivableCompanyDataGroup.Customer					= ReceivableInvoiceDetailRel.Customer
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceDetailRel.ReceivableProcessLevel
										invoked.TransactionDate										= ReceivableInvoiceDetailRel.TransactionDate
									if  (ApplicationSource.ReversalOfApplications)
										invoked.Origin												= "RX"
									else
										invoked.Origin												= "RQ"
									invoked.AccumulationType										= "D"
									invoked.DocumentNumber											= "7-" +  DerivedDocumentNumberWithLeadingZeros
									invoked.Status													= 2
									invoked.Description												= LocalGainLossMessage + " " + TransTypeValue + " " + ReceivableApplication.Invoice
									invoked.Units													= each.Units
									invoked.AuditSummaryIndicator									= "09"	
									invoked.AutoReverseUnrealizedGainLoss							= "C"










									invoked.ApplicationCloseResult									= PrmApplicationCloseResult
									invoked.TransientIntercompanyBillingSettlementHeader			= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 

								NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount
								LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

								LocalAccumulatedGainLoss.FunctionalAmount.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyRate
								LocalAccumulatedGainLoss.AlternateAmount.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount.EnteredCurrencyRate
								LocalAccumulatedGainLoss.AlternateAmount2.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount2.EnteredCurrencyRate
								LocalAccumulatedGainLoss.AlternateAmount3.EnteredCurrencyRate		 = CreditTransaction.CreditApplicationAmount.AlternateAmount3.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount1.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount1.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount2.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount2.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount3.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount3.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount4.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount4.EnteredCurrencyRate
								LocalAccumulatedGainLoss.ReportAmount5.EnteredCurrencyRate			 = CreditTransaction.CreditApplicationAmount.ReportAmount5.EnteredCurrencyRate

								LocalAccumulatedGainLoss.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToAlternateAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ProjectAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount1.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount4.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								LocalAccumulatedGainLoss.ReportAmount5.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount










































































				2400CreateAroitem


					initialize CurrencyDateWork
					CurrencyDateWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					if  (ReceivableApplication.TransType.CustomerPayment)
						if  (ReceivablePaymentDebitRel.CompanyCustomerRel.DetailChargebackDate.Invoice)
							CurrencyDateWork.ExchangeDate				= ReceivablePaymentDebitRel.GeneralLedgerDate
						else
							CurrencyDateWork.ExchangeDate				= ReceivablePaymentDebitRel.DepositDate
						CurrencyDateWork.BaseAmount.EnteredCurrencyRate = ReceivablePaymentDebitRel.CurrencyRate
						CurrencyDateWork.FromCurrency					= ReceivablePaymentDebitRel.OriginalCurrency 
					else
						CurrencyDateWork.ExchangeDate					= ReceivableInvoiceDetailRel.TransactionDate
						CurrencyDateWork.BaseAmount.EnteredCurrencyRate = ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						if  (ReceivablePaymentDebitRel.CompanyCustomerRel.DetailChargebackDate.Payment)
							if (CreditTransaction.CreditType.CreditMemo)
								CurrencyDateWork.ExchangeDate = ReceivableCreditInvoiceDetailRel.TransactionDate
								if (ReceivableCreditInvoiceDetailRel.OriginalCurrency = ReceivableInvoiceDetailRel.OriginalCurrency)
									CurrencyDateWork.BaseAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								else
									initialize CurrencyDateWork.BaseAmount.EnteredCurrencyRate
							else
								CurrencyDateWork.ExchangeDate = ReceivablePaymentRel.DepositDate
								if (ReceivablePaymentRel.OriginalCurrency = ReceivableInvoiceDetailRel.OriginalCurrency)
									CurrencyDateWork.BaseAmount.EnteredCurrencyRate = ReceivablePaymentRel.CurrencyRate
								else
									initialize CurrencyDateWork.BaseAmount.EnteredCurrencyRate

						CurrencyDateWork.FromCurrency					= ReceivableInvoiceDetailRel.OriginalCurrency

					CurrencyDateWork.TransactionAmount					= each.AdjustmentAmount.CurrencyAmount
					CurrencyDateWork.BaseAmount.ToCurrency				= Company.Currency


					LocalCompany										= each.Company
					if  (ReceivableInvoiceDetailRel.IsCreditMemo
					or	 each.AdjustmentAmount.CurrencyAmount < 0)
						increment LocalCompanyRel.LastCreditChargebackNumber by 1
					else
						increment LocalCompanyRel.LastChargebackNumber by 1
						increment LocalCompanyRel.LastChargebackBatchNumber by 1


					invoke Released.CreateFromApplicationClose ReceivableInvoice
						assign result to NewReceivableInvoice
						invoked.Company												= each.Company
						if (each.AdjustmentReason.ChargebackType.Detail)
							if  (each.AdjustmentAmount.CurrencyAmount < 0)
								invoked.ReceivableInvoiceType							= "C"
								invoked.AlternateReceivableInvoiceType					= "C"
								invoked.ReceivableInvoice								= each.Company.CreditChargebackPrefix + "-" + each.Company.ZeroFilledLastCreditChargeback
								invoked.InvoiceAmount.CurrencyAmount					= each.AdjustmentAmount.CurrencyAmount * -1
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount = CurrencyDateWork.BaseAmount.OutputCurrencyAmount * -1
								invoked.BalancingDistributionAmountCompanyCurrency		= CurrencyDateWork.BaseAmount.OutputCurrencyAmount * -1
							else
								invoked.ReceivableInvoiceType							= "D"
								invoked.AlternateReceivableInvoiceType					= "D"
								invoked.ReceivableInvoice								= "CB-" + each.Company.ZeroFilledLastChargeback
								invoked.InvoiceAmount.CurrencyAmount					= each.AdjustmentAmount.CurrencyAmount 
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount = CurrencyDateWork.BaseAmount.OutputCurrencyAmount
								invoked.BalancingDistributionAmountCompanyCurrency		= CurrencyDateWork.BaseAmount.OutputCurrencyAmount 

						if  (ReceivableApplication.TransType.CustomerPayment)
							invoked.BatchNumber										= ReceivablePaymentDebitRel.ReceivablePaymentHeader
							invoked.Customer										= ReceivablePaymentDebitRel.Customer
							invoked.ReceivableProcessLevel							= ReceivablePaymentDebitRel.ReceivableProcessLevel
							invoked.BankTransactionCode								= ReceivablePaymentDebitRel.CompanyCustomerRel.BankTransactionCode
							invoked.BankTransactionType								= ReceivablePaymentDebitRel.CompanyCustomerRel.BankTransactionCode.BankTransactionType
							invoked.OriginalCurrency								= ReceivablePaymentDebitRel.OriginalCurrency
							invoked.CurrencyRateToCustomerGroupCurrency				= ReceivablePaymentDebitRel.CurrencyRateToCustomerGroupCurrency
							invoked.CustomerGroupCurrencyMultiplicationOrDivision	= ReceivablePaymentDebitRel.CustomerGroupCurrencyMultiplicationOrDivision
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = ReceivablePaymentDebitRel.CurrencyRate
							invoked.CurrencyMultiplicationOrDivision				= ReceivablePaymentDebitRel.CurrencyMultiplicationOrDivision
							invoked.SalesRepresentative								= ReceivablePaymentDebitRel.CompanyCustomerRel.SalesRepresentative
							invoked.TermsCode										= ReceivablePaymentDebitRel.CompanyCustomerRel.TermsCode
							if  (ReceivablePaymentDebitRel.OriginalCurrency != Company.Currency)
								invoked.RevalueCurrencyTransactions					= true
						else
							invoked.BatchNumber										= ReceivableInvoiceDetailRel.BatchNumber
							invoked.Customer										= ReceivableInvoiceDetailRel.Customer
							invoked.ReceivableProcessLevel							= ReceivableInvoiceDetailRel.ReceivableProcessLevel
							invoked.CustomerPurchaseOrder							= ReceivableInvoiceDetailRel.CustomerPurchaseOrder
							invoked.TransactionUserField1							= ReceivableInvoiceDetailRel.TransactionUserField1
							invoked.BankTransactionCode								= ReceivableInvoiceDetailRel.CompanyCustomerRel.BankTransactionCode
							invoked.BankTransactionType								= ReceivableInvoiceDetailRel.CompanyCustomerRel.BankTransactionCode.BankTransactionType
							invoked.OriginalCurrency								= ReceivableInvoiceDetailRel.OriginalCurrency
							invoked.CurrencyRateToCustomerGroupCurrency				= ReceivableInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency
							invoked.CustomerGroupCurrencyMultiplicationOrDivision	= ReceivableInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision
							if  (ReceivablePaymentDebitRel.CompanyCustomerRel.DetailChargebackDate.Invoice)
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyRate  = ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
								invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate = ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
								invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate = ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
								invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyRate	= ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate
							else
								if  (CreditTransaction.CreditType.CreditMemo)
									invoked.InvoiceAmount.ExchangeDate							= ReceivableCreditInvoiceDetailRel.TransactionDate
									if (ReceivableCreditInvoiceDetailRel.OriginalCurrency = ReceivableInvoiceDetailRel.OriginalCurrency)
										invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								else
									invoked.InvoiceAmount.ExchangeDate							= ReceivablePaymentRel.DepositDate
									if (ReceivablePaymentRel.OriginalCurrency = ReceivableInvoiceDetailRel.OriginalCurrency)
										invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate

							invoked.CurrencyMultiplicationOrDivision				= ReceivableInvoiceDetailRel.CurrencyMultiplicationOrDivision
							invoked.SalesRepresentative								= ReceivableInvoiceDetailRel.CompanyCustomerRel.SalesRepresentative
							invoked.TermsCode										= ReceivableInvoiceDetailRel.CompanyCustomerRel.TermsCode
							if  (ReceivableInvoiceDetailRel.OriginalCurrency != Company.Currency)
								invoked.RevalueCurrencyTransactions					= true

							invoked.TransactionUserField1							= ReceivableInvoiceRel.TransactionUserField1
							invoked.TransactionUserField2							= ReceivableInvoiceRel.TransactionUserField2
							invoked.TransactionUserField3							= ReceivableInvoiceRel.TransactionUserField3
							invoked.TransactionUserField4							= ReceivableInvoiceRel.TransactionUserField4
							invoked.TransactionUserField5							= ReceivableInvoiceRel.TransactionUserField5

						if (each.AdjustmentReason.ChargebackType.Detail)
							if  (each.Description entered)
								invoked.Description									= each.Description
							else
								invoked.Description									= "CB Detail" + each.ReceivableApplication.TransType + ReceivableApplication.Invoice

						invoked.GeneralLedgerDate									= GeneralLedgerDate
						invoked.ReceivableGeneralLedgerCode							= ReceivableGeneralLedgerCode

						invoked.ChargebackReason									= each.AdjustmentReason
						invoked.ChargebackSequence									= each.ReceivableApplication.ApplicationSequence

						invoked.ReceivableCrossReference.ReceivableInvoiceType		= each.ReceivableApplication.TransType
						invoked.ReceivableCrossReference.ReceivableInvoice			= each.ReceivableApplication.Invoice
						invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= each.ReceivableApplication.PaymentSeq
						
						if (each.AdjustmentReason.ChargebackType.Detail)
							invoked.Origin											= "E"
						invoked.System												= "AR"

						if  (ReceivableApplication.TransType.CustomerPayment)
							if  (ReceivablePaymentDebitRel.CompanyCustomerRel.DetailChargebackDate.Invoice)
								invoked.TransactionDate								= ReceivablePaymentDebitRel.GeneralLedgerDate
							else
								invoked.TransactionDate								= ReceivablePaymentDebitRel.DepositDate
						else
							if  (ReceivableInvoiceDetailRel.CompanyCustomerRel.DetailChargebackDate.Invoice)
								invoked.TransactionDate								= ReceivableInvoiceDetailRel.TransactionDate
							else
							if  (CreditTransaction.CreditType.CreditMemo)
								invoked.TransactionDate								= ReceivableCreditInvoiceDetailRel.TransactionDate
							else
								invoked.TransactionDate								= ReceivablePaymentRel.DepositDate


					invoke Create ReceivableInvoiceDetail
						assign result to NewInvoiceDetail
						fill in fields from NewReceivableInvoice.ReceivableInvoice
							except invoked.Description

						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= NewReceivableInvoice.ReceivableInvoiceType
						invoked.AlternateReceivableInvoiceType						= NewReceivableInvoice.ReceivableInvoiceType
						invoked.ReceivableInvoiceDetail.Invoice						= NewReceivableInvoice.ReceivableInvoice
						invoked.ReceivableInvoiceDetail.PaymentSeq					= 1
						invoked.Status												= 1
						invoked.InvoiceAmount.CurrencyAmount						= NewReceivableInvoice.InvoiceAmount.CurrencyAmount

						if  (ReceivableApplication.TransType.CustomerPayment)
							if  (ReceivablePaymentDebitRel.CompanyCustomerRel.DetailChargebackDate.Invoice)
								invoked.TransactionDate								= ReceivablePaymentDebitRel.GeneralLedgerDate
								invoked.DueDate										= ReceivablePaymentDebitRel.GeneralLedgerDate
							else
								invoked.TransactionDate								= ReceivablePaymentDebitRel.DepositDate
								initialize TermsCalc
								TermsCalc.TermsCode								= ReceivablePaymentDebitRel.CompanyCustomerRel.DebitCreditMemoTermsCode
								TermsCalc.CalculateTerms.TransactionDate			= ReceivablePaymentDebitRel.DepositDate
								TermsCalc.CalculateTerms.TransactionAmount			= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
								TermsCalc.CalculateTerms.OverrideDiscountRate		= ReceivablePaymentDebitRel.CurrencyRate
								LocalTrigger = TermsCalc.CalculateTerms.TermsCalTrigger
								invoked.DueDate									= TermsCalc.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
						else
							if  (ReceivableInvoiceDetailRel.CompanyCustomerRel.DetailChargebackDate.Invoice)
								invoked.TransactionDate								= ReceivableInvoiceDetailRel.TransactionDate
								invoked.DueDate										= ReceivableInvoiceDetailRel.DueDate
							else
							if  (CreditTransaction.CreditType.CreditMemo)
								invoked.TransactionDate								= ReceivableCreditInvoiceDetailRel.TransactionDate
								invoked.DueDate										= ReceivableCreditInvoiceDetailRel.DueDate
							else
								invoked.TransactionDate								= ReceivablePaymentRel.DepositDate
								initialize TermsCalc
								TermsCalc.TermsCode								= ReceivablePaymentRel.CompanyCustomerRel.DebitCreditMemoTermsCode
								TermsCalc.CalculateTerms.TransactionDate			= ReceivablePaymentRel.DepositDate
								TermsCalc.CalculateTerms.TransactionAmount			= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
								TermsCalc.CalculateTerms.OverrideDiscountRate		= ReceivablePaymentRel.CurrencyRate
								LocalTrigger = TermsCalc.CalculateTerms.TermsCalTrigger
								invoked.DueDate									= TermsCalc.CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate

						if  (!ReceivableApplication.TransType.CustomerPayment)
							invoked.Sort1											= ReceivableInvoiceDetailRel.Sort1
							invoked.Sort2											= ReceivableInvoiceDetailRel.Sort2
							invoked.Sort3											= ReceivableInvoiceDetailRel.Sort3
							invoked.Sort4											= ReceivableInvoiceDetailRel.Sort4

						invoked.SortAmount											= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

						if (each.AdjustmentReason.ChargebackType.Detail)
							if  (each.Description entered)
								invoked.Desc										= each.Description
							else
								invoked.Desc										= "CB Detail" + each.ReceivableApplication.TransType + ReceivableApplication.Invoice

						if  (ReceivableApplication.TransType.CustomerPayment)
							invoked.Project											= ReceivablePaymentDebitRel.Project
							invoked.ProjectContract									= ReceivablePaymentDebitRel.ProjectContract
						else
							invoked.Project											= ReceivableInvoiceDetailRel.Project
							invoked.ProjectContract									= ReceivableInvoiceDetailRel.ProjectContract

						invoked.ApplicationCloseResult								= PrmApplicationCloseResult

					NewCompany														= NewInvoiceDetail.Company
					NewInvoiceType													= NewInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					NewInvoice														= NewInvoiceDetail.ReceivableInvoiceDetail.Invoice
					NewSequence														= NewInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq



					if  (each.AdjustmentReason.ChargebackDisputeCode entered)

						invoke CreateDisputeFromReceivableInvoice NewInvoiceDetailRel.ReceivableInvoiceDetail
							invoked.PrmInvoiceDisputeAmount							= NewInvoiceDetailRel.InvoiceAmount.CurrencyAmount
							invoked.PrmDisputeCode									= each.AdjustmentReason.ChargebackDisputeCode
							invoked.PrmDisputeDate									= DepositDate
							invoked.PrmApplicationCloseResult						= PrmApplicationCloseResult
							invoked.PrmSkipOpenDisputeCheck							= true


				3200BuildWork1














					if (ApplicationSource.ReversalOfApplications)
						LocalAppSource		= "RY"
					else
						LocalAppSource		= "RL"


					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1

					WsDistSeq += 1

					AmdOffObjId = WsProgramSequence
					LocalCompany = Company
					LocalGLAccount					= ARCodeRel.DistributionAccount
					LocalDescription				= RNACashMsg + " " + current corporate date
					LocalDistributionPercentage = 1
					LocalGLCompany = CreditTransaction.CreditCompany

					include CreateReceivedNotAppliedDistribution

					initialize LocalGLCompany

					if (CreateGainLossEntries)
						if (ReceivableInvoiceRel.CanProrateDistributions)
							initialize LocalDistributionPercentage
							LocalCanProrateDistributions = true

						else
							LocalDistributionPercentage = 1
							WsProgramSequence += 1
							if  (WsProgramSequence = 0)
								WsProgramSequence = 1
							WsDistSeq += 1
							AmdOffObjId = WsProgramSequence

							LocalDescription				= RealizedRNACashMsg + " " + current corporate date
							LocalGLAccount					= GLCodeRel.DistributionAccount 

							LocalSystemAccount = SystemAccount.RealizedGainAndLoss

							if (SystemAccountRel not exists)
								ReceivablesGainLossCalculation.PaymentCurrencyAmount	= CreditTransaction.CreditApplicationAmount
								ReceivablesGainLossCalculation.InvoiceCurrencyAmount	= ApplicationAmount
								if (ApplicationSource.ReversalOfApplications)
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.CurrencyAmount	  *= -1	           
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1	
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1			
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1			
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1			
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1	
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.CurrencyAmount	  *= -1	           
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1	
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1			
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1			
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1			
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1
									
								ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= GLCodeRel.DistributionAccount 
								if  (PaymentAppliedToCreditMemo)
									ReceivablesGainLossCalculation.PaymentAppliedToCreditMemo = true
								LocalBoolean = ReceivablesGainLossCalculation.CalculateGainLoss

								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
							else
								ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= GLCodeRel.DistributionAccount 
								LocalBoolean = ReceivablesGainLossCalculation.SystemCodeBlockDefaults
								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
								LocalGLAccount.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount
							if  (Company != CreditTransaction.CreditCompany
							and (ReceivableApplication.TransType.CreditMemo
							or   ReceivableApplication.TransType.CustomerPayment))
								LocalSkipNegative = true
							LocalNegative					= true
							LocalGLCompany = Company
							include RNADistributionCreation
							initialize LocalNegative
							initialize LocalSkipNegative
							initialize LocalGLAccount
							initialize LocalGLCompany
					

					if (CreditTransaction.CreditType.Payment
					and ReceivablePaymentRel.IsPrepaymentTaxWithHolding)
						initialize LocalPrepaymentTaxDistribution
						initialize LocalCreateTaxTransaction
						initialize CalculateTax
						CalculateTax.TaxEntity					= CreditTransaction.CreditCompany.AccountingEntity
						CalculateTax.TaxCode					= CreditTransaction.CreditCompany.PrepaymentTaxCode
						CalculateTax.TaxDate					= ReceivablePaymentRel.DepositDate
						CalculateTax.BypassMemberEdit			= true 
						CalculateTax.Function					= "I"
						LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
						LocalNumberOfDecimals 					= ReceivablePaymentRel.OriginalCurrency.NumberOfDecimals
						LocalPrepaymentTaxRate		= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
						LocalBeforeGSTAmount 		= CreditTransaction.CreditApplicationAmount.CurrencyAmount / (1 + LocalPrepaymentTaxRate)
						round LocalBeforeGSTAmount to nearest DerivedLocalRoundTo
						LocalPrepaymentTaxAmount	= CreditTransaction.CreditApplicationAmount.CurrencyAmount - LocalBeforeGSTAmount
						round LocalPrepaymentTaxAmount to nearest DerivedLocalRoundTo
						
						WsProgramSequence += 1
						if  (WsProgramSequence = 0)
							WsProgramSequence = 1

						WsDistSeq += 1

						AmdOffObjId = WsProgramSequence
						LocalPrepaymentTaxDistribution 			= true
						LocalGLCompany							= CreditTransaction.CreditCompany
						LocalDescription						= "Cash" + " " + "-" + " " + "Prepayment Tax Output Account"
						LocalGLAccount							= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
						LocalCreateTaxTransaction				= true
					
						include PrepaymentTaxDistributionCreation
						initialize LocalPrepaymentTaxDistribution
						initialize LocalCreateTaxTransaction
						initialize LocalCurrencyCalculationGroup
					
						WsProgramSequence += 1
						if  (WsProgramSequence = 0)
							WsProgramSequence = 1

						WsDistSeq += 1

						AmdOffObjId = WsProgramSequence
						LocalPrepaymentTaxDistribution			= true
						LocalNegative							= true
						LocalGLCompany							= CreditTransaction.CreditCompany
						LocalDescription						= "Cash" + " " + "-" + " " + "Prepayment Tax Control GL Account"
						LocalGLAccount							= CreditTransaction.CreditCompany.PrepaymentTaxControlGLAccount
						
						include PrepaymentTaxDistributionCreation
						initialize LocalPrepaymentTaxDistribution
						initialize LocalCurrencyCalculationGroup
						initialize LocalNegative


					LocalProcessLevel		= DerivedProcessLevel
					if (ApplicationSource.ReversalOfApplications)
						LocalAppSource		= "RY"
					else
						LocalAppSource		= "RL"


					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1
					WsDistSeq += 1
					AmdArObjId = WsProgramSequence

					if (InvoiceFinanceCodeBlock entered)
						LocalGLAccount 				= InvoiceFinanceCodeBlock
					else
						LocalGLAccount				= GLCodeRel.DistributionAccount
					LocalDescription				= ARCashMsg + " " + current corporate date
					LocalDistributionPercentage		= 1
					include ARCDistributionCreation
					if (CreateGainLossEntries)
						if (LocalCanProrateDistributions)
							initialize LocalDistributionPercentage

						else
							LocalDistributionPercentage = 1
							WsProgramSequence += 1
							if  (WsProgramSequence = 0)
								WsProgramSequence = 1
							WsDistSeq += 1
							AmdArObjId = WsProgramSequence
							LocalDescription				= RealizedARCCashMsg + " " + current corporate date
							LocalGLAccount									= GLCodeRel.DistributionAccount
							if (SystemAccountRel not exists)
								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock

							else
								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
								LocalGLAccount.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount
							LocalNegative					= true
							include ARCDistributionCreation
							initialize LocalNegative


				3300BuildWork2












					if (ApplicationSource.ReversalOfApplications)
						LocalAppSource		= "RY"
					else
						LocalAppSource		= "RL"

					LocalProcessLevel		= DerivedProcessLevel

					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1
					AmdOffObjId = WsProgramSequence
					WsDistSeq += 1


					LocalCompany			= Company
					if (CreditFinanceCodeBlock entered)
						LocalGLAccount		= CreditFinanceCodeBlock
					else
						LocalGLAccount		=	ARCodeRel.DistributionAccount
					LocalDescription		=	OffsetCredMsg + " " + PrmCreateDate
					LocalDistributionPercentage = 1
					include CreditRNADistributionCreation
					if (CreateGainLossEntries)
						LocalSystemAccount = SystemAccount.RealizedGainAndLoss
						if (ReceivableInvoiceRel.CanProrateDistributions)
							initialize LocalDistributionPercentage
							LocalCanProrateDistributions = true

						else
							LocalDistributionPercentage = 1
							WsProgramSequence += 1
							if  (WsProgramSequence = 0)
								WsProgramSequence = 1
							WsDistSeq += 1
							AmdOffObjId = WsProgramSequence

							LocalDescription				= RealizedRNACashMsg + " " + current corporate date
							LocalGLAccount					= GLCodeRel.DistributionAccount

							if (SystemAccountRel not exists)
								ReceivablesGainLossCalculation.PaymentCurrencyAmount	= CreditTransaction.CreditApplicationAmount
								ReceivablesGainLossCalculation.InvoiceCurrencyAmount	= ApplicationAmount
								if (ApplicationSource.ReversalOfApplications)
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.CurrencyAmount	  *= -1	           
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1	
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1			
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1			
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1			
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1	
									ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.CurrencyAmount	  *= -1	           
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1	
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1			
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1			
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1			
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1		
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1
									ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

								ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= GLCodeRel.DistributionAccount 
								if  (PaymentAppliedToCreditMemo)
									ReceivablesGainLossCalculation.PaymentAppliedToCreditMemo = true
								LocalBoolean = ReceivablesGainLossCalculation.CalculateGainLoss
								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
							else
								ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= GLCodeRel.DistributionAccount 
								LocalBoolean = ReceivablesGainLossCalculation.SystemCodeBlockDefaults
								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
								LocalGLAccount.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount

							LocalNegative					= true
							include CreditRNADistributionCreation
							initialize LocalNegative


					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1
					AmdArObjId = WsProgramSequence
					WsDistSeq += 1	

					if (InvoiceFinanceCodeBlock entered)
						LocalGLAccount		= InvoiceFinanceCodeBlock
					else
						LocalGLAccount		=	GLCodeRel.DistributionAccount
					LocalDescription		=	ARCredMsg + " " + PrmCreateDate
					LocalDistributionPercentage = 1
					include CreditARCDistributionCreation
					if (CreateGainLossEntries)
						if (LocalCanProrateDistributions)
							initialize LocalDistributionPercentage

						else
							LocalDistributionPercentage = 1
							WsProgramSequence += 1
							if  (WsProgramSequence = 0)
								WsProgramSequence = 1
							WsDistSeq += 1
							AmdArObjId = WsProgramSequence
							LocalDescription				= RealizedARCCashMsg + " " + current corporate date
							LocalGLAccount					= GLCodeRel.DistributionAccount
							ReceivablesGainLossCalculation.OriginFinanceCodeBlock	= GLCodeRel.DistributionAccount
							if (SystemAccountRel not exists)
								if  (PaymentAppliedToCreditMemo)
									ReceivablesGainLossCalculation.PaymentAppliedToCreditMemo = true
								LocalBoolean = ReceivablesGainLossCalculation.CalculateGainLoss
								LocalGLAccount = ReceivablesGainLossCalculation.GLAccountCodeBlock
							else
								LocalBoolean = ReceivablesGainLossCalculation.SystemCodeBlockDefaults
								LocalGLAccount = ReceivablesGainLossCalculation.GLAccountCodeBlock
								LocalGLAccount.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount


							LocalNegative					= true
							include CreditARCDistributionCreation
							initialize LocalNegative


				3400BuildWork5


					initialize CurrencyDateWork
					CurrencyDateWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyDateWork.ExchangeDate					= GeneralLedgerDate
					CurrencyDateWork.TransactionAmount				= each.CreditAdjustAmount
					if  (CreditTransaction.CreditType.Payment)
						CurrencyDateWork.FromCurrency				= ReceivablePaymentRel.OriginalCurrency
					else
						CurrencyDateWork.FromCurrency				= ReceivableCreditInvoiceDetailRel.OriginalCurrency
					CurrencyDateWork.BaseAmount.ToCurrency			= Company.Currency
					CurrencyDateWork.BaseAmount.EnteredCurrencyRate = ReceivablePaymentRel.CurrencyRate


					if  (WorkApplicationCloseERel exists)

						invoke FastUpdate WorkApplicationCloseERel
							invoked.TranAmt							+= each.CreditAdjustAmount
							invoked.BaseAmt							+= CurrencyDateWork.BaseAmount.OutputCurrencyAmount

							invoked.DistributionAmount.CurrencyAmount		+= LocalCurrencyCalculationGroup.CurrencyAmount
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	+= LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		+= LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyAmount

							if (invoked.CbDisputeFl not entered)
								if  (each.AdjustmentReason.ChargebackDisputeCode != invoked.CbDisputeCd)
									invoked.CbDisputeFl = "N"
									invoked.CbDisputeCd	= blank
								else
									invoked.CbDisputeCd	= each.AdjustmentReason.ChargebackDisputeCode

							if (invoked.ProjectFl = blank)
								if  (ReceivableInvoiceDetailRel.Project		!= invoked.Project
								or   ReceivableInvoiceDetailRel.ProjectContract != invoked.ProjectContract)
									invoked.ProjectFl = "N"
									initialize invoked.Project
									initialize invoked.ProjectContract
								else
									invoked.Project								= ReceivableInvoiceDetailRel.Project 
									invoked.ProjectContract						= ReceivableInvoiceDetailRel.ProjectContract

					else

						SetCbsCounter += 1
						WsCbsCounter = SetCbsCounter

						WsProgramSequence += 1
						if  (WsProgramSequence = 0)
							WsProgramSequence = 1

						invoke Create WorkApplicationCloseE
							invoked.FinanceEnterpriseGroup		= PrmApplicationCloseResult.FinanceEnterpriseGroup
							invoked.ApplicationCloseResult		= PrmApplicationCloseResult
							invoked.RecKey.Company				= Company
							invoked.RecKey.CrCompany			= CreditTransaction.CreditCompany
							invoked.RecKey.CrBatch				= CreditTransaction.CreditBatch
							invoked.RecKey.CrType				= CreditTransaction.CreditType
							invoked.RecKey.CrNbr				= CreditTransaction.CreditNumber
							invoked.RecKey.CrCustomer			= CreditTransaction.CreditCustomer
							invoked.RecKey.GlDate				= GeneralLedgerDate
							invoked.ProgramSequence				= WsProgramSequence

							invoked.DepositDate					= DepositDate
							invoked.DocumentNbr					= "7-" + DerivedCbsCounterWithLeadingZeros
							invoked.CbDisputeCd					= each.AdjustmentReason.ChargebackDisputeCode

							invoked.TranAmt						= each.CreditAdjustAmount
							invoked.BaseAmt						= CurrencyDateWork.BaseAmount.OutputCurrencyAmount

							invoked.TransientFromCurrency								= LocalCurrencyCalculationGroup.FromCurrency
							invoked.TransientCurrencyTable								= LocalCurrencyTable
							invoked.DistributionAmount.ExchangeDate						= LocalCurrencyCalculationGroup.ExchangeDate

							invoked.DistributionAmount.FunctionalAmount.ToCurrency		= LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency
							invoked.DistributionAmount.AlternateAmount.ToCurrency		= LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency
							invoked.DistributionAmount.AlternateAmount2.ToCurrency		= LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency
							invoked.DistributionAmount.AlternateAmount3.ToCurrency		= LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency
							invoked.DistributionAmount.ToFunctionalAmount.ToCurrency	= LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency
							invoked.DistributionAmount.ToAlternateAmount.ToCurrency		= LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency
							invoked.DistributionAmount.ToAlternateAmount2.ToCurrency	= LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency
							invoked.DistributionAmount.ToAlternateAmount3.ToCurrency	= LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency
							invoked.DistributionAmount.ProjectAmount.ToCurrency			= LocalCurrencyCalculationGroup.ProjectAmount.ToCurrency
							invoked.DistributionAmount.ReportAmount1.ToCurrency			= LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency
							invoked.DistributionAmount.ReportAmount2.ToCurrency			= LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency
							invoked.DistributionAmount.ReportAmount3.ToCurrency			= LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency
							invoked.DistributionAmount.ReportAmount4.ToCurrency			= LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency
							invoked.DistributionAmount.ReportAmount5.ToCurrency			= LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency

							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate	= LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate

							invoked.DistributionAmount.CurrencyAmount							= LocalCurrencyCalculationGroup.CurrencyAmount
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ProjectAmount.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyAmount
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyAmount

							invoked.DistributionAmount.KeepRateAndAmount = true

							if  (CreditTransaction.CreditType.Payment)
								invoked.ProcessLevel				= ReceivablePaymentRel.ReceivableProcessLevel
								invoked.OrigCurrency				= ReceivablePaymentRel.OriginalCurrency
								invoked.OrigRate					= ReceivablePaymentRel.CurrencyRate
								invoked.CurrMudv					= ReceivablePaymentRel.CurrencyMultiplicationOrDivision
								invoked.GroupRate					= ReceivablePaymentRel.CurrencyRateToCustomerGroupCurrency
								invoked.GroupMudv					= ReceivablePaymentRel.CustomerGroupCurrencyMultiplicationOrDivision
							else
								invoked.ProcessLevel				= ReceivableCreditInvoiceDetailRel.ReceivableProcessLevel
								invoked.OrigCurrency				= ReceivableCreditInvoiceDetailRel.OriginalCurrency
								invoked.OrigRate					= ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.CurrMudv					= ReceivableCreditInvoiceDetailRel.CurrencyMultiplicationOrDivision
								invoked.GroupRate					= ReceivableCreditInvoiceDetailRel.CurrencyRateToCustomerGroupCurrency
								invoked.GroupMudv					= ReceivableCreditInvoiceDetailRel.CustomerGroupCurrencyMultiplicationOrDivision

							invoked.Project						= ReceivableInvoiceDetailRel.Project 
							invoked.ProjectContract				= ReceivableInvoiceDetailRel.ProjectContract
							invoked.Sort1						= ReceivableInvoiceDetailRel.Sort1
							invoked.Sort2						= ReceivableInvoiceDetailRel.Sort2
							invoked.Sort3						= ReceivableInvoiceDetailRel.Sort3
							invoked.Sort4						= ReceivableInvoiceDetailRel.Sort4



				3700BuildWork8



					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1
					WsDistSeq += 1

					invoke CreateFromApplicationClose ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence		= WsProgramSequence
						invoked.LastDistributionSequence						= WsDistSeq
						invoked.CreateDate										= PrmCreateDate
						invoked.ApplicationID									= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany				= Company
						invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company

						invoked.GeneralLedgerAccount							= RoundingCodeRel.DistributionAccount
						invoked.GeneralLedgerDate								= GeneralLedgerDate
						invoked.TransactionDate									= GeneralLedgerDate

						if  (ReceivableApplication.TransType.CreditMemo
						or   ReceivableApplication.TransType.CustomerPayment)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= Ws190RoundAmount * -1
						else
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= Ws190RoundAmount

						invoked.TransType										= ReceivableApplication.TransType
						invoked.Invoice											= ReceivableApplication.Invoice
						invoked.BatchNumber										= ReceivableApplication.BatchNumber
						invoked.ReceivableCompanyDataGroup.Customer				= ReceivableInvoiceRel.Customer
						invoked.SequenceNumber									= ReceivableApplication.PaymentSeq
						invoked.OriginalCurrency								= ApplicationCurrency
						invoked.LastDistributionSequence						= ReceivableApplication.ApplicationSequence

						if (ApplicationSource.ReversalOfApplications)
							invoked.Origin										= "RY"
						else
							invoked.Origin										= "RL"

						invoked.AccumulationType								= "D"
						invoked.Status											= 2

						invoked.Description										= RoundingAdjMsg
						invoked.ApplicationCloseResult							= PrmApplicationCloseResult
						invoked.TransientRoundingDistrib						= true
						invoked.TransientIntercompanyBillingSettlementHeader	= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 

					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1
					WsDistSeq += 1


					invoke CreateFromApplicationClose ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence		= WsProgramSequence
						invoked.LastDistributionSequence						= WsDistSeq
						invoked.CreateDate										= PrmCreateDate

						invoked.ReceivableCompanyGroup.GlCompany				= Company
						invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company

						invoked.GeneralLedgerAccount							= ARCodeRel.DistributionAccount
						invoked.GeneralLedgerDate								= GeneralLedgerDate
						invoked.TransactionDate									= GeneralLedgerDate

						if  (ReceivableApplication.TransType.CreditMemo
						or   ReceivableApplication.TransType.CustomerPayment)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= Ws190RoundAmount 
						else
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= Ws190RoundAmount * -1

						invoked.TransType										= ReceivableApplication.TransType
						invoked.Invoice											= ReceivableApplication.Invoice
						invoked.BatchNumber										= ReceivableApplication.BatchNumber
						invoked.ReceivableCompanyDataGroup.Customer				= ReceivableInvoiceRel.Customer
						invoked.SequenceNumber									= ReceivableApplication.PaymentSeq
						invoked.OriginalCurrency								= ApplicationCurrency
						invoked.LastDistributionSequence						= ReceivableApplication.ApplicationSequence

						if (ApplicationSource.ReversalOfApplications)
							invoked.Origin										= "RY"
						else
							invoked.Origin										= "RL"

						invoked.AccumulationType								= "D"
						invoked.Status											= 2

						invoked.Description										= "Cash App Curr Rounding Adj"
						invoked.AuditSummaryIndicator							= "01"	
						invoked.ApplicationCloseResult							= PrmApplicationCloseResult
						invoked.TransientRoundingDistrib						= true
						invoked.TransientIntercompanyBillingSettlementHeader	= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 


				5000TaxPoint




					for each TaxPointPaymentRecoveryDistributionRel

						if (!each.TransType.CreditMemo)
							if  (AdjustmentSequence entered)
								WsReverseTranAmount = (((ApplicationAmount.CurrencyAmount + WsAdjTranRevAmount) / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount) * each.DistributionAmount.CurrencyAmount)
								WsReverseBaseAmount = (((ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + WsAdjBaseRevAmount) / ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount) * each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
							else
								WsReverseTranAmount = ((ApplicationAmount.CurrencyAmount / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount) * each.DistributionAmount.CurrencyAmount)
								WsReverseBaseAmount = ((ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount / ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount) * each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount)
						else
							if  (AdjustmentSequence entered
							and  each.TaxPoint != "P")
								WsReverseTranAmount = (((ApplicationAmount.CurrencyAmount + WsAdjTranRevAmount) / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount) * each.DistributionAmount.CurrencyAmount)
								WsReverseBaseAmount = (((ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + WsAdjBaseRevAmount) / ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount) * each.DistributionAmount.CurrencyAmount)
							else
							if (each.TaxPoint = "P")
								WsReverseTranAmount = each.DistributionAmount.CurrencyAmount
								WsReverseBaseAmount = each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								WsReverseTranAmount = ((ApplicationAmount.CurrencyAmount/ ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)* each.DistributionAmount.CurrencyAmount)
								WsReverseBaseAmount = ((ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount/ ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount)* each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount)

						initialize CalculateTax
						CalculateTax.TaxEntity					= each.ReceivableCompanyGroup.GlCompany.AccountingEntity
						CalculateTax.TaxCode					= each.TaxCode
						CalculateTax.TaxDate					= ReceivablePaymentRel.DepositDate
						CalculateTax.BypassMemberEdit			= true 
						CalculateTax.Function					= "I"
						LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
						
						WsGeneralLedgerAccount					= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputDueAccount

						if (IsCredit
						or  !ReceivableApplication.TransType.CreditMemo)
							WsBaseDistributionAmount			= WsReverseBaseAmount * -1
							WsTranDistributionAmount			= WsReverseTranAmount * -1
						else
							WsBaseDistributionAmount			= WsReverseBaseAmount * -1
							WsTranDistributionAmount			= WsReverseTranAmount * -1
						WsRecalcTranAmt1						= WsReverseBaseAmount
						WsAuditSum								= each.AuditSummaryIndicator
						LocalOutputAndOutputDueTax				= true

						include CreateDistribFromDistrib


						WsGeneralLedgerAccount					= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
						
						if (IsCredit
						or  !ReceivableApplication.TransType.CreditMemo)
							WsBaseDistributionAmount				= WsReverseBaseAmount 
							WsTranDistributionAmount				= WsReverseTranAmount 
						else
							WsBaseDistributionAmount				= WsReverseBaseAmount 
							WsTranDistributionAmount				= WsReverseTranAmount 

						WsRecalcTranAmt2						= WsReverseBaseAmount 

						
						if  (each.ReceivableCompanyGroup.GlCompany != each.ReceivableCompanyDataGroup.TransactionCompany)
							if  (each.ReceivableCompanyGroup.GlCompany.Currency = each.ReceivableCompanyDataGroup.TransactionCompany.Currency)
								WsToCompanyBaseAmount				= WsReverseBaseAmount
							else
								initialize CurrencyDateWork
								CurrencyDateWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								CurrencyDateWork.ExchangeDate			= each.GeneralLedgerDate
								CurrencyDateWork.FromCurrency			= each.OriginalCurrency
								CurrencyDateWork.TransactionAmount		= WsReverseTranAmount
								CurrencyDateWork.BaseAmount.ToCurrency	= each.ReceivableCompanyGroup.GlCompany.Currency
								WsToCompanyBaseAmount					= CurrencyDateWork.BaseAmount.OutputCurrencyAmount * -1

						WsAuditSum									= each.AuditSummaryIndicator
						DoTaxHistory								= true
						LocalUsePaymentDate = true

						include CreateDistribFromDistrib
						initialize LocalOutputAndOutputDueTax

						initialize WsToCompanyBaseAmount
						
						if (ReceivableInvoiceRel.IsAllocateForTaxPointPaymentSupported)
							LocalPaymentTaxRate						= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
							initialize CalculateTax
							CalculateTax.TaxEntity			= each.ReceivableCompanyDataGroup.TransactionCompany.AccountingEntity
							CalculateTax.TaxCode			= each.TaxCode
							CalculateTax.TaxDate			= each.TransactionDate
							CalculateTax.InvoiceDate		= each.TransactionDate
							CalculateTax.PaymentDate		= each.TransactionDate
							CalculateTax.ShipmentDate		= each.TransactionDate
							CalculateTax.GeneralLedgerDate	= each.GeneralLedgerDate
							CalculateTax.BypassMemberEdit	= true
							CalculateTax.Function			= "I"
							LocalCalculateTaxExecuted		= CalculateTax.ExecuteCalculateTax
							LocalInvoiceTaxRate					= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
							if(LocalPaymentTaxRate != LocalInvoiceTaxRate)
								PaymentTaxAmount				=  ((ApplicationAmount.CurrencyAmount / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount) * (each.TransactionTaxableAmount * LocalPaymentTaxRate))
								InvoiceTaxAmount				= WsReverseTranAmount
								WsGeneralLedgerAccount 			= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
								WsTranDistributionAmount		= PaymentTaxAmount - InvoiceTaxAmount
								DoTaxHistory		= true
								LocalUsePaymentDate = true
								include CreateDistribFromDistrib
								WsGeneralLedgerAccount 			= each.ReceivableGLDistributionTaxPointPaymentRel.GeneralLedgerAccount
								WsTranDistributionAmount		= InvoiceTaxAmount - PaymentTaxAmount

								LocalUsePaymentDate = true
								include CreateDistribFromDistrib

						if  (each.DistributionAmount.FunctionalAmount.EnteredCurrencyRate != DerivedCreditRate)
							WsRecalcFlag = "Y"
							WsCreditRate = DerivedCreditRate
							WsBaseDistributionAmount = WsTranDistributionAmount * WsCreditRate
							WsRecalcTranAmt2			= WsBaseDistributionAmount
							

						if (WsRecalcFlag			  =  "Y"
						and each.TaxPoint != "P")
							initialize					   WsRecalcFlag

							WsProgramSequence += 1
							if  (WsProgramSequence = 0)
								WsProgramSequence = 1

							invoke CreateFromApplicationClose ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup								= each.FinanceEnterpriseGroup
								invoked.ReceivableGLDistribution.ProgramSequence			= WsProgramSequence
								invoked.LastDistributionSequence							= 1
								invoked.CreateDate											= PrmCreateDate
								invoked.ApplicationID										= LocalApplicationID
								invoked.ReceivableCompanyGroup.GlCompany					= each.ReceivableCompanyGroup.GlCompany
								invoked.ReceivableCompanyDataGroup.TransactionCompany		= each.ReceivableCompanyDataGroup.TransactionCompany

								if (WsRecalcTranAmt1 - WsRecalcTranAmt2 < 0)
									invoked.GeneralLedgerAccount.GeneralLedgerChartAccount	= first SystemRealizedLossAccountRel.GeneralLedgerChartAccount
								else
									invoked.GeneralLedgerAccount.GeneralLedgerChartAccount	= first SystemRealizedGainAccountRel.GeneralLedgerChartAccount

								invoked.GeneralLedgerDate									= GeneralLedgerDate

								if  (ReceivableApplication.TransType.CustomerPayment)
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount = ((WsRecalcTranAmt1 - WsRecalcTranAmt2) * -1)
									invoked.Description										= ReversalGainLossMsg
								else
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount =  WsRecalcTranAmt1 - WsRecalcTranAmt2
									invoked.Description										= CurrGainLossMsg

								if  (ApplicationSource.ReversalOfApplications)
									invoked.Origin											= "RX"
								else
									invoked.Origin											= "RQ"

								invoked.TransType											= ReceivableApplication.TransType
								invoked.Invoice												= ReceivableApplication.Invoice

								if  (ReceivableApplication.TransType.CustomerPayment)
									invoked.BatchNumber										= ReceivablePaymentDebitRel.ReceivablePaymentHeader
									invoked.SequenceNumber									= ReceivablePaymentDebitRel.ReceivablePayment
									invoked.ReceivableCompanyDataGroup.Customer				= ReceivablePaymentDebitRel.Customer
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivablePaymentDebitRel.ReceivableProcessLevel
									invoked.TransactionDate									= ReceivablePaymentDebitRel.GeneralLedgerDate
								else
									invoked.BatchNumber										= ReceivableInvoiceDetailRel.BatchNumber
									invoked.ReceivableCompanyDataGroup.Customer				= ReceivableInvoiceDetailRel.Customer
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceDetailRel.ReceivableProcessLevel
									invoked.TransactionDate									= ReceivableInvoiceDetailRel.TransactionDate

								invoked.AutoReverseUnrealizedGainLoss						= "C"
								invoked.OriginalCurrency									= each.OriginalCurrency
								initialize invoked.DistributionAmount.CurrencyAmount
								initialize invoked.ToCompanyBaseAmount
								initialize invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate

								invoked.AccumulationType									= "D"
								invoked.DocumentNumber										= "7-" +  DerivedDocumentNumberWithLeadingZeros
								invoked.Status												= 2
								invoked.Description											= each.Description
								invoked.Units												= each.Units
								invoked.AuditSummaryIndicator								= "09"	

								invoked.AutoReverseUnrealizedGainLoss						= "C"
								invoked.TransientIntercompanyBillingSettlementHeader		= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 

								if (each.TransType = "C")
									PmtGainLossAmount										= ((WsRecalcTranAmt1 - WsRecalcTranAmt2) * -1)
								else
									PmtGainLossAmount										= (WsRecalcTranAmt1 - WsRecalcTranAmt2)

								PmtGainLoss = true


				AddAdjustmentDistributionsFromPaymentCashDetails
					LocalIsPaymentCashDetail = true
					LocalDetailNumber = 1
					initialize PaymentWriteoffCashDetails
					for each CashDetailApplicationRel
						PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].WsGeneralLedgerAccount = each.ReceivablePaymentCashDetail.AdditionalDimensionsCodeBlock
						PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].CashDetailAmountGroup = each.DistributionAmount
						LocalDetailNumber += 1
					LocalDetailNumber = 1
					while (LocalDetailNumber <= 30)
						if (PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].WsGeneralLedgerAccount entered)
							initialize LocalSetFinanceCodeBlockComponents
							LocalSetFinanceCodeBlockComponents.InputFinanceCodeBlock = each.DistributionAccount
							LocalSetFinanceCodeBlockComponents.DefaultFinanceCodeBlock = PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].WsGeneralLedgerAccount
							LocalAnswer = LocalSetFinanceCodeBlockComponents.SetIndividualFields
							WsGeneralLedgerAccount = LocalSetFinanceCodeBlockComponents.OutputFinanceCodeBlock
							LocalCashDetailAmountGroup = PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].CashDetailAmountGroup
							LocalCashDetailAmountGroup.CurrencyAmount							*= -1
							LocalCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	*= -1
							LocalCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	*= -1
							LocalCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	*= -1
							LocalCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	*= -1
							LocalCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount *= -1
							LocalCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	*= -1
							LocalCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount *= -1
							LocalCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount *= -1
							LocalCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount 		*= -1
							LocalCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		*= -1
							LocalCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		*= -1
							LocalCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		*= -1
							LocalCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		*= -1
							LocalCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		*= -1
							include CreateDistributionFromAdjustment
						LocalDetailNumber += 1
					LocalIsPaymentCashDetail = false
					initialize TranDateFlag	
					initialize OverrideAccountingUnit
					initialize WsAmdDescription
					initialize InitBatch
					initialize WsUseTranDate
					initialize WsUseAcctUnitOverride
					initialize WsUseCreditSide
					initialize WsAuditSum
					initialize WsToCompanyBaseAmount


				AddAdjustmentRNADistributionsFromPaymentCashDetails
					LocalIsPaymentCashDetail = true
					LocalDetailNumber = 1
					initialize PaymentWriteoffCashDetails
					for each CashDetailApplicationRel
						PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].WsGeneralLedgerAccount = each.ReceivablePaymentCashDetail.RNAFinanceCodeBlock
						PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].CashDetailAmountGroup = each.DistributionAmount
						LocalDetailNumber += 1
					LocalDetailNumber = 1
					while (LocalDetailNumber <= 30)
						if (PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].WsGeneralLedgerAccount entered)
							WsGeneralLedgerAccount = PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].WsGeneralLedgerAccount
							LocalCashDetailAmountGroup = PaymentWriteoffCashDetails.PaymentWriteoffCashDetail[LocalDetailNumber].CashDetailAmountGroup
							include CreateDistributionFromAdjustment
						LocalDetailNumber += 1
					LocalIsPaymentCashDetail = false
					initialize TranDateFlag	
					initialize OverrideAccountingUnit
					initialize WsAmdDescription
					initialize InitBatch
					initialize WsUseTranDate
					initialize WsUseAcctUnitOverride
					initialize WsUseCreditSide
					initialize WsAuditSum
					initialize WsToCompanyBaseAmount


				CreateFirstAdjustmentDistribution
					if (IsPaymentWriteoff
					and HasPaymentCashDetail)
						include AddAdjustmentDistributionsFromPaymentCashDetails
					else
					if (InvoiceFinanceCodeBlock entered)
						initialize LocalSetFinanceCodeBlockComponents
						LocalSetFinanceCodeBlockComponents.InputFinanceCodeBlock = each.DistributionAccount
						LocalAnswer = ReceivableInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
						LocalSetFinanceCodeBlockComponents.DefaultFinanceCodeBlock = ReceivableInvoiceDetailRel.TransientAdditionalDimensions
						LocalAnswer = LocalSetFinanceCodeBlockComponents.SetIndividualFields
						WsGeneralLedgerAccount = LocalSetFinanceCodeBlockComponents.OutputFinanceCodeBlock
						include CreateDistributionFromAdjustment
					else
						include CreateDistributionFromAdjustment


				CreateSecondAdjustmentDistribution
					if (IsPaymentWriteoff
					and HasPaymentCashDetail)
						include AddAdjustmentRNADistributionsFromPaymentCashDetails
					else
					if (InvoiceFinanceCodeBlock entered)
						if  (each.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
							WsGeneralLedgerAccount		= ARCodeRel.DistributionAccount
						else
							WsGeneralLedgerAccount		= InvoiceFinanceCodeBlock
						include CreateDistributionFromAdjustment
					else
						include CreateDistributionFromAdjustment


				CreateDistributionFromAdjustment


					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1

					if  (WsUseAcctUnitOverride)
						initialize OverrideAccountingUnit

						if  (each.AdjustmentReason.AccountingUnitOverrideFlag.AllowProcessLevelFinanceCodeBlockOverride)
							if  (ReceivableApplication.TransType.CustomerPayment)
								OverrideAccountingUnit = ReceivablePaymentDebitRel.ReceivableProcessLevel.AccountingUnitFinanceCodeBlock.AccountingUnit
							else
								OverrideAccountingUnit = ReceivableInvoiceDetailRel.ReceivableProcessLevel.AccountingUnitFinanceCodeBlock.AccountingUnit

							if  (OverrideAccountingUnit not entered)
								OverrideAccountingUnit	= each.AdjustmentReason.ChargebackAccount.AccountingUnit

							if  (OverrideAccountingUnit entered)
								invoke EditCodeBlock each.AdjustmentReason
									resume on error
										initialize OverrideAccountingUnit
									invoked.TransientCodeBlock					= each.AdjustmentReason.ChargebackAccount
									invoked.TransientCodeBlock.AccountingUnit	= OverrideAccountingUnit


					LocalGLAccount					= WsGeneralLedgerAccount
					if (!LocalOverApply
					and !LocalPrepaymentTaxDistribution)		
						if  (WsAmdDescription entered)
							LocalDescription		= WsAmdDescription
						else
							if (!LocalChargeback)
								if (UsePaymentDateForAdjustDistribution)
									LocalDescription		= each.DerivedAdjustmentDescription + " " + "-" + " " + "Adjustment"
								else
									LocalDescription		= each.DerivedAdjustmentDescription + " " + "-" + " " + "AR"
					LocalAdjFEG = each.Company.CustomerBusinessGroup.FinanceEnterpriseGroup
					LocalAdjCompany = each.Company
					LocalAdjCreateDate = each.CreateDate
					LocalAdjUnits = each.Units
					LocalAdjReasonOverShort = each.AdjustmentReason.ReceivableAdjustmentReasonType.OverShort
					include AdjustmentDistributionCreation
					initialize LocalAdjGLCompany

					LocalAdjustmentReasonType	= each.ReceivableAdjustmentReasonType
					if (IsEligibleForRealizedAdjustment
					and CreateGainLossEntries
					and !LocalPrepaymentTaxDistribution) 
						if (UsePaymentDateForAdjustDistribution)
							LocalDescription		= RealizedAdjustmentMsg + " " + current corporate date
						else
							LocalDescription		= RealizedARAdjustmentMsg + " " + current corporate date
						LocalGLAccount			= ReceivableGeneralLedgerCode.DistributionAccount						
						LocalSystemAccount		= SystemAccount.RealizedGainAndLoss
						ReceivablesGainLossCalculation.InvoiceCurrencyAmount						= each.AdjustmentAmount

						initialize LocalCurrencyCalculationGroup
						LocalCurrencyTable											= each.ReceivablePaymentRel.ReceivablePaymentHeader.CurrencyTable
						LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						LocalCurrencyCalculationGroup.ExchangeDate					= each.ReceivablePaymentRel.DepositDate
						LocalCurrencyCalculationGroup.CurrencyAmount				= each.CreditAdjustAmount
						LocalCurrencyCalculationGroup.FromCurrency					= each.ReceivablePaymentRel.OriginalCurrency

						LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency
						LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= Company.AccountingEntity.AlternateCurrency
						LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= Company.AccountingEntity.AlternateCurrency2
						LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= Company.AccountingEntity.AlternateCurrency3
						LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyOne
						LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
						LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyThree
						LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFour
						LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFive


						LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= each.ReceivablePaymentRel.CurrencyRate
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ExchangeDate		= each.ReceivablePaymentRel.DepositDate


						if (CreditTransaction.CreditType.CreditMemo)
							LocalCurrencyTable       				   =  each.ReceivableApplicationRel.ReceivableCreditInvoiceDetailRel.ReceivableInvoiceRel.CurrencyTable
							LocalCurrencyCalculationGroup.ExchangeDate = each.ReceivableApplicationRel.ReceivableCreditInvoiceDetailRel.TransactionDate
							LocalCurrencyCalculationGroup.FromCurrency = each.ReceivableApplicationRel.ReceivableCreditInvoiceDetailRel.OriginalCurrency
							LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate = each.ReceivableApplicationRel.ReceivableCreditInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ExchangeDate  = each.ReceivableApplicationRel.ReceivableCreditInvoiceDetailRel.TransactionDate
						ReceivablesGainLossCalculation.PaymentCurrencyAmount				   = LocalCurrencyCalculationGroup
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.CurrencyAmount		= each.CreditAdjustAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount
						ReceivablesGainLossCalculation.PaymentCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ProjectAmount.OutputCurrencyAmount
						if (ApplicationSource.ReversalOfApplications)
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.CurrencyAmount	  *= -1	           
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1	
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1			
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1			
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1			
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1	
							ReceivablesGainLossCalculation.PaymentCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.CurrencyAmount	  *= -1	           
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   *= -1	
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    *= -1			
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   *= -1			
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1			
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	  *= -1		
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	  *= -1
							ReceivablesGainLossCalculation.InvoiceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  *= -1

						if	(ReceivablesGainLossCalculation.GainLossAccount not entered)
							if (SystemAccountRel not exists)
								ReceivablesGainLossCalculation.OriginFinanceCodeBlock = ReceivableGeneralLedgerCode.DistributionAccount

								LocalBoolean = ReceivablesGainLossCalculation.CalculateGainLoss
								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
							else
								ReceivablesGainLossCalculation.OriginFinanceCodeBlock = ReceivableGeneralLedgerCode.DistributionAccount
								LocalBoolean = ReceivablesGainLossCalculation.SystemCodeBlockDefaults
								LocalGLAccount								= ReceivablesGainLossCalculation.GLAccountCodeBlock
								LocalGLAccount.GeneralLedgerChartAccount	= first SystemAccountRel.GeneralLedgerChartAccount
						else
							LocalGLAccount = ReceivablesGainLossCalculation.GLAccountCodeBlock

						if (ReceivablesGainLossCalculation.HasGainLossCurrencyDifferences)
							initialize LocalNegative
							LocalNegative			= true
							WsProgramSequence += 1
							if (WsProgramSequence = 0)
								WsProgramSequence = 1
							WsAuditSum = "09"
							if (each.ReceivableAdjustmentReasonType.OverApplied)
								LocalAdjGLCompany	= each.Company
							include AdjustmentDistributionCreation
							initialize LocalNegative
							initialize LocalAdjGLCompany

					if (!LocalIsPaymentCashDetail)
						initialize TranDateFlag	
						initialize OverrideAccountingUnit
						initialize WsAmdDescription
						initialize InitBatch
						initialize WsUseTranDate
						initialize WsUseAcctUnitOverride
						initialize WsUseCreditSide
						initialize WsAuditSum
						initialize WsToCompanyBaseAmount


				CreateDistribFromDistrib

					WsProgramSequence += 1
					if  (WsProgramSequence = 0)
						WsProgramSequence = 1

					WsDistSeq += 1



					invoke CreateFromApplicationClose ReceivableGLDistribution
						assign result to NewGLDistribution

						invoked.FinanceEnterpriseGroup							= each.FinanceEnterpriseGroup
						invoked.ReceivableGLDistribution.ProgramSequence		= WsProgramSequence
						invoked.LastDistributionSequence						= WsDistSeq
						invoked.CreateDate										= PrmCreateDate
						invoked.ApplicationID									= LocalApplicationID
						invoked.ReceivableCompanyGroup.GlCompany				= each.ReceivableCompanyGroup.GlCompany
						invoked.ReceivableCompanyGroup.OriginCompany			= each.ReceivableCompanyGroup.OriginCompany
						invoked.ReceivableCompanyDataGroup.TransactionCompany	= each.ReceivableCompanyDataGroup.TransactionCompany

						invoked.GeneralLedgerAccount							= WsGeneralLedgerAccount
						if (ApplicationSource.ReversalOfApplications)
							invoked.GeneralLedgerDate							= GeneralLedgerDate
						else
							if (Company.DefaultApplicationDate.LatestTransactionPostDate)		
								if (CreditTransaction.CreditType.Payment)
									if (ReceivablePaymentRel.GeneralLedgerDate > each.GeneralLedgerDate)
										invoked.GeneralLedgerDate							= ReceivablePaymentRel.GeneralLedgerDate
									else
										invoked.GeneralLedgerDate							= each.GeneralLedgerDate
								else
									if (ReceivableCreditMemoDetailRel.GeneralLedgerDate > each.GeneralLedgerDate)
										invoked.GeneralLedgerDate							= ReceivableCreditMemoDetailRel.GeneralLedgerDate
									else
										invoked.GeneralLedgerDate							= each.GeneralLedgerDate
							else
								if (CreditTransaction.CreditType.Payment)
									invoked.GeneralLedgerDate							= ReceivablePaymentRel.GeneralLedgerDate	
								else
									invoked.GeneralLedgerDate							= ReceivableCreditMemoDetailRel.GeneralLedgerDate
						if (LocalUsePaymentDate)
							invoked.TransientPaymentDate						= DepositDate
						invoked.TransactionDate									= each.TransactionDate

						invoked.TransType										= each.TransType
						invoked.Invoice											= each.Invoice
						invoked.BatchNumber										= each.BatchNumber
						invoked.SequenceNumber									= each.SequenceNumber
						invoked.ReceivableCompanyDataGroup.Customer				= each.ReceivableCompanyDataGroup.Customer
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableInvoiceDetailRel.ReceivableProcessLevel
						invoked.OriginalCurrency								= each.OriginalCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = each.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount1.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount2.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount3.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount4.EnteredCurrencyRate
						invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount5.EnteredCurrencyRate

						if  (WsCreditRate entered)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = WsCreditRate
						else
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = each.DistributionAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount1.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount2.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount3.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount4.EnteredCurrencyRate
							invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate	= each.DistributionAmount.ReportAmount5.EnteredCurrencyRate

						invoked.TaxCode											= each.TaxCode

						invoked.DistributionAmount.CurrencyAmount							= WsTranDistributionAmount 
						if(LocalOutputAndOutputDueTax)
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= WsBaseDistributionAmount


						if  (WsToCompanyBaseAmount entered)
							invoked.ToCompanyBaseAmount							= WsToCompanyBaseAmount
						else
						if  (each.ReceivableCompanyGroup.GlCompany != each.ReceivableCompanyDataGroup.TransactionCompany)
							invoked.ToCompanyBaseAmount							= WsBaseDistributionAmount
						
						if  (WsTranDistributionAmount > 0
						and  each.TransactionTaxableAmount < 0)
							invoked.TransactionTaxableAmount					= each.TransactionTaxableAmount * -1
							invoked.BaseTaxableAmount							= each.BaseTaxableAmount * -1
							if  (WsCreditRate entered)
								invoked.BaseTaxableAmount						= each.TransactionTaxableAmount * WsCreditRate
						else
							invoked.TransactionTaxableAmount					= each.TransactionTaxableAmount
							invoked.BaseTaxableAmount							= each.BaseTaxableAmount
							if  (WsCreditRate entered)
								invoked.BaseTaxableAmount						= each.TransactionTaxableAmount * WsCreditRate


						invoked.Origin											= each.Origin
						invoked.DistributionSource								= WsDistSource

						invoked.AccumulationType								= each.AccumulationType
						invoked.DocumentNumber									= each.DocumentNumber
						invoked.Status											= 2

						invoked.Description										= each.Description
						invoked.Units											= each.Units
						invoked.AuditSummaryIndicator							= WsAuditSum


						if  (WsAutoReverseUnrealizedGainLoss entered)
							invoked.AutoReverseUnrealizedGainLoss				= WsAutoReverseUnrealizedGainLoss
						else
							invoked.AutoReverseUnrealizedGainLoss				= each.AutoReverseUnrealizedGainLoss

						invoked.DoTaxHistory									= DoTaxHistory

						if (SendTaxable)
							invoked.TransientTaxable						= WsHoldTaxableAmount
						else
							invoked.TransientTaxable						= each.BaseTaxableAmount
						invoked.ApplicationCloseResult							= PrmApplicationCloseResult
						invoked.TaxRecovery										= LocalTaxRecovery
						invoked.TransientIntercompanyBillingSettlementHeader	= ReceivablePaymentRel.OriginatingICBSettlement(IntercompanyBillingSettlementHeader).IntercompanyBillingSettlementHeader 
						invoked.SkipTaxOriginCrossReference					= true
					initialize WsAutoReverseUnrealizedGainLoss
					initialize WsCreditRate
					initialize WsDistSource
					initialize DoTaxHistory
					initialize LocalTaxRecovery
					initialize LocalUsePaymentDate


				CreateOverApplicationAroitem
					initialize CurrencyDateWork
					CurrencyDateWork.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyDateWork.ExchangeDate						= ReceivablePaymentRel.GeneralLedgerDate
					CurrencyDateWork.BaseAmount.EnteredCurrencyRate		= ReceivablePaymentRel.CurrencyRate
					CurrencyDateWork.FromCurrency						= ReceivablePaymentRel.OriginalCurrency 
					CurrencyDateWork.TransactionAmount					= each.CreditAdjustAmount
					CurrencyDateWork.BaseAmount.ToCurrency				= Company.Currency
					LocalCompany = each.Company

					if ((!ApplicationSource.ReversalOfApplications
					and  each.ReceivableApplication.TransType = "C")
					or  (ApplicationSource.ReversalOfApplications
					and  each.ReceivableApplication.TransType != "C"))
						increment LocalCompanyRel.LastOverApplyCreditDebitNumber by 1
					else
						increment LocalCompanyRel.LastOverApplyInvoiceCreditNumber by 1

					invoke Released.CreateFromApplicationClose ReceivableInvoice
						assign result to NewOverApplicationReceivableInvoice
						invoked.Company												= each.Company
						if ((!ApplicationSource.ReversalOfApplications
						and  each.ReceivableApplication.TransType = "C")
						or  (ApplicationSource.ReversalOfApplications
						and  each.ReceivableApplication.TransType != "C"))
							invoked.ReceivableInvoiceType							= "D"
							invoked.AlternateReceivableInvoiceType					= "D"
							invoked.ReceivableInvoice								= Company.OverApplyCreditDebitPrefix + "-" + Company.ZeroFilledLastOverApplyCreditDebitNumber
						else
							invoked.ReceivableInvoiceType							= "C"
							invoked.AlternateReceivableInvoiceType					= "C"
							invoked.ReceivableInvoice								= Company.OverApplyInvoiceCreditPrefix+ "-" + Company.ZeroFilledLastOverApplyInvoiceCreditNumber

						if  (each.CreditAdjustAmount < 0)
							invoked.InvoiceAmount.CurrencyAmount						= each.CreditAdjustAmount * -1
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount= CurrencyDateWork.BaseAmount.OutputCurrencyAmount * -1
							invoked.BalancingDistributionAmountCompanyCurrency			= CurrencyDateWork.BaseAmount.OutputCurrencyAmount * -1
						else
							invoked.InvoiceAmount.CurrencyAmount						= each.CreditAdjustAmount
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount= CurrencyDateWork.BaseAmount.OutputCurrencyAmount
							invoked.BalancingDistributionAmountCompanyCurrency			= CurrencyDateWork.BaseAmount.OutputCurrencyAmount

						invoked.BatchNumber											= ReceivableInvoiceDetailRel.BatchNumber
						invoked.Customer											= ReceivableInvoiceDetailRel.Customer
						invoked.ReceivableProcessLevel								= ReceivableInvoiceDetailRel.ReceivableProcessLevel
						invoked.BankTransactionCode									= ReceivableInvoiceDetailRel.BankTransactionCode
						invoked.BankTransactionType									= ReceivableInvoiceDetailRel.BankTransactionCode.BankTransactionType
						invoked.OriginalCurrency									= ReceivablePaymentRel.OriginalCurrency
						invoked.CurrencyRateToCustomerGroupCurrency					= ReceivablePaymentRel.CurrencyRateToCustomerGroupCurrency
						invoked.CustomerGroupCurrencyMultiplicationOrDivision		= ReceivablePaymentRel.CustomerGroupCurrencyMultiplicationOrDivision
						invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivablePaymentRel.CurrencyRate
						invoked.CurrencyMultiplicationOrDivision					= ReceivablePaymentRel.CurrencyMultiplicationOrDivision
						invoked.SalesRepresentative									= ReceivableInvoiceDetailRel.SalesRepresentative
						invoked.TermsCode											= ReceivableInvoiceDetailRel.TermsCode
						if  (ReceivablePaymentRel.OriginalCurrency	 != CreditTransaction.CreditCompany.Currency)
							invoked.RevalueCurrencyTransactions						= true
						invoked.Description											= "OverApply-" + CreditTransaction.CreditType +" " + CreditTransaction.CreditNumber +", Company "+ CreditTransaction.CreditCompany
						invoked.GeneralLedgerDate									= ReceivablePaymentRel.DepositDate
						invoked.ReceivableGeneralLedgerCode							= ReceivableInvoiceDetailRel.ReceivableGeneralLedgerCode
						invoked.ReceivableCrossReference.ReceivableInvoiceType		= each.ReceivableApplication.TransType
						invoked.ReceivableCrossReference.ReceivableInvoice			= each.ReceivableApplication.Invoice
						invoked.ReceivableCrossReference.ReceivableInvoiceDetail	= each.ReceivableApplication.PaymentSeq
						invoked.ReceivableCrossReference.Company					= each.Company
						invoked.Origin												= "D"
						invoked.System												= "AR"
						invoked.TransactionDate										= ReceivablePaymentRel.DepositDate


					invoke Create ReceivableInvoiceDetail
						assign result to NewOverApplicationInvoiceDetail
						fill in fields from NewOverApplicationReceivableInvoice.ReceivableInvoice
							except invoked.Description

						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= NewOverApplicationReceivableInvoice.ReceivableInvoiceType
						invoked.AlternateReceivableInvoiceType						= NewOverApplicationReceivableInvoice.ReceivableInvoiceType
						invoked.ReceivableInvoiceDetail.Invoice						= NewOverApplicationReceivableInvoice.ReceivableInvoice
						invoked.ReceivableInvoiceDetail.PaymentSeq					= 1
						invoked.Status												= 1
						invoked.DueDate												= ReceivablePaymentRel.DepositDate
						invoked.InvoiceAmount.CurrencyAmount						= NewOverApplicationReceivableInvoice.InvoiceAmount.CurrencyAmount
						invoked.Desc												= "OverApply-" + CreditTransaction.CreditType + CreditTransaction.CreditNumber
						invoked.Project												= ReceivableInvoiceDetailRel.Project
						invoked.ProjectContract										= ReceivableInvoiceDetailRel.ProjectContract
						invoked.ApplicationCloseResult								= PrmApplicationCloseResult

					NewCompany														= NewOverApplicationInvoiceDetail.Company
					NewInvoiceType													= NewOverApplicationInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					NewInvoice														= NewOverApplicationInvoiceDetail.ReceivableInvoiceDetail.Invoice
					NewSequence														= NewOverApplicationInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq







			Action Rules
				Empty Set Rules
					if (!PrmIsCreate)				

						constraint (PrmCompany entered or PrmCompanyGroup entered)
							"CompanyOr_\Company_\GroupIsRequired"
						if (PrmCompany entered)
							LocalFinanceEnterpriseGroup 			= PrmCompany.FinanceEnterpriseGroup
						else 
						if (PrmCompanyGroup entered)
							LocalFinanceEnterpriseGroup 			= PrmCompanyGroup.first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup
						if (LocalFinanceEnterpriseGroup not entered)
							LocalFinanceEnterpriseGroup 			= actor.context.FinanceEnterpriseGroup
						constraint (LocalFinanceEnterpriseGroup entered)
							"Finance_\Enterprise_\GroupIsRequired"

						invoke Create ApplicationCloseResult
							assign result to LocalApplicationCloseResultView
							invoked.FinanceEnterpriseGroup			= LocalFinanceEnterpriseGroup
							invoked.PrmCompanyGroup					= PrmCompanyGroup
							invoked.PrmCompany						= PrmCompany
							invoked.RunTime							= current timestamp
							
						invoke UpdateStatusOnResult LocalApplicationCloseResultView.ApplicationCloseResult

					if (PrmIsCreate
					and PrmFinanceEnterpriseGroup.FundAccounting
					and ApplicationCloseUseOldFundAccountingReallocationMethodRel not exists)
						invoke UpdateStatusOnResult PrmApplicationCloseResult

				Set Rules
					Entrance Rules
						if (!PrmIsCreate) 		

							if (PrmCompany entered)
								LocalFinanceEnterpriseGroup 			= PrmCompany.FinanceEnterpriseGroup
							else 
							if (PrmCompanyGroup entered)
								LocalFinanceEnterpriseGroup 			= PrmCompanyGroup.first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup
							if (LocalFinanceEnterpriseGroup not entered)
								LocalFinanceEnterpriseGroup 			= actor.context.FinanceEnterpriseGroup
							constraint (LocalFinanceEnterpriseGroup entered)
								"Finance_\Enterprise_\GroupIsRequired"

							invoke Create ApplicationCloseResult
								assign result to LocalApplicationCloseResultView
								invoked.FinanceEnterpriseGroup			= LocalFinanceEnterpriseGroup
								invoked.PrmCompanyGroup					= PrmCompanyGroup
								invoked.PrmCompany						= PrmCompany
								invoked.RunTime							= current timestamp
							
							LocalFinanceEnterpriseGroup = LocalApplicationCloseResultView.FinanceEnterpriseGroup
							PrmFinanceEnterpriseGroup = LocalFinanceEnterpriseGroup
							PrmApplicationCloseResult = LocalApplicationCloseResultView.ApplicationCloseResult
							PrmCreateDate  	 = current timestamp

					Exit Rules
						invoke ProrateForAllApplications ReceivableApplication
							invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
							invoked.PrmCreateDate				= PrmCreateDate

						invoke TriggerDebitTransferPostApplicationClose ReceivableApplication
							invoked.PrmFinanceEnterpriseGroup = PrmApplicationCloseResult.FinanceEnterpriseGroup
							invoked.PrmApplicationCloseResult = PrmApplicationCloseResult

						if (PrmFinanceEnterpriseGroup.FundAccounting)
							if (ApplicationCloseUseOldFundAccountingReallocationMethodRel exists) 
								invoke ProrateForFundApplications ReceivableApplication in background group (PrmApplicationCloseResult.DerivedBackgroundGroup) 
									invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
									invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
							else 
								invoke ProrateForFundApplications ReceivableGLDistribution in background group (PrmApplicationCloseResult.DerivedBackgroundGroup) 
									invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
									invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
									invoked.PrmProcessAllInSingleAction	= true
						
						if (!PrmIsCreate)			
							invoke Process WorkApplicationCloseE
								invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.PrmApplicationCloseResult		= PrmApplicationCloseResult
								invoked.PrmCreateDate					= PrmCreateDate


				Instance Rules





					LocalFinanceEnterpriseGroup	= PrmApplicationCloseResult.FinanceEnterpriseGroup
					LocalApplicationCloseResult = PrmApplicationCloseResult
					LocalApplicationID += 1
					ApplicationID = LocalApplicationID
					ApplicationCloseResult		= PrmApplicationCloseResult
					ArwsChargeback = "N"
					WsRevFlag = "N"

					if  (ReceivableApplication.TransType.CustomerPayment)
						WsDistSeq = ReceivablePaymentRel.last ReceivableGLDistributionRel.LastDistributionSequence

					else 
						WsDistSeq = ReceivableInvoiceRel.last ReceivableGLDistributionRel.LastDistributionSequence


					if  (AdjustmentSequence entered)
						for each ReceivableApplicationAdjustmentRel

							if  (each.ReviewStatus.ReviewNeedsApproval
							or   each.ReviewStatus.PendingApproval)
								WsRevFlag = "Y"
								end for each

							if (each.AdjustmentReason.ReceivableAdjustmentReasonType.Chargeback)
								ArwsChargeback = "Y"


					LocalCompany = Company
					if  (WsRevFlag		  = "N")
						
						SetDocumentCounter += 1
						WsDocumentCounter = SetDocumentCounter

						if (CreditAdjustAmount entered)

							for each CreditAdjustmentRel
								CreditAdjust = true
								include 1100DoAradjust

						if (AdjustmentSequence entered)

							for each ReceivableApplicationAdjustmentRel
								CreditAdjust = false
								include 1100DoAradjust






						if  (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							if  (IsCreditTypePayment)
								include 3200BuildWork1
							else
							if  (IsCreditTypeCreditMemo)
								include 3300BuildWork2


						if  (!HasCurrAdjustments
						and  ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount		!= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						and  PrmCompany.MultiCurrencyProcessing
						and  ApplicationCurrencyType.Mixed
						and  ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount = ApplicationAmount.CurrencyAmount)
							if  (Company			!= CreditTransaction.CreditCompany
							and  Company.Currency	!= CreditTransaction.CreditCompany.Currency)
								NextSentence = true
							else
								Ws190RoundAmount = ((CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount) * -1)

								if  (PmtGainLoss
								and  PmtGainLossAmount = Ws190RoundAmount)
									NextSentence = true
								else
									if  (PmtGainLoss)
										Ws190RoundAmount   -= PmtGainLossAmount

									include 3700BuildWork8

						if  (DebitIsInvoice)
							if  (ReceivableInvoiceDetailRel.DisputeSequence entered)
								for each ReceivableInvoiceDetailRel.ReceivableInvoiceUnresolvedDisputeRel


									if (each.ReceivableInvoiceDetail.MiscAmount = each.ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount)
										invoke FastUpdate each
											invoked.ResolveDate				= GeneralLedgerDate
											invoked.ApplicationCloseResult	= PrmApplicationCloseResult 
										ArwsCompany				= each.Company
										ArwsCustomer			= each.Customer
										ArwsxTranAmount			= each.DisputedAmount
										ArwsTransType			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
										ArwsResult				= "S"	
										include 700UpdateTotals
									else
										WsMiscIAmt  = each.ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount  - each.ReceivableInvoiceDetail.MiscAmount

										if  (each.DisputedAmount > each.ReceivableInvoiceDetail.OpenAmount
										and  each.ReceivableInvoiceDetail.OpenAmount entered)
											invoke FastUpdate each
												invoked.ResolveDate				= GeneralLedgerDate
												invoked.ApplicationCloseResult	= PrmApplicationCloseResult 

											invoke Create ReceivableInvoiceDispute
												fill in fields from each
													except invoked.ReceivableInvoiceDispute
													except invoked.OriginalDisputeAmount
													except invoked.DisputedAmount
													except invoked.Description
													except invoked.ResolveDate
													except invoked.OriginatingInterfaceRun

												invoked.DisputedAmount			= each.ReceivableInvoiceDetail.OpenAmount
												invoked.OriginalDisputeAmount	= each.ReceivableInvoiceDetail.BaseOpenAmount
												invoked.Description			= Msg8 + " " + each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType + " "  + each.ReceivableInvoiceDetail.Invoice
												invoked.ApplicationCloseResult	= PrmApplicationCloseResult
												invoked.TransientSkipOpenDisputeCheck	= true

											ArwsCompany				= Company
											ArwsCustomer			= ReceivableInvoiceDetailRel.Customer
											ArwsDisputeAmount		= WsMiscIAmt
											ArwsResult				= "Z"	
											ArwsTransType			= ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
											include 700UpdateTotals

									end for each   

						if  (ReceivableInvoiceDetailRel.LastFinanceChargeDate not entered)
							WsFromDate  = ReceivableInvoiceDetailRel.DueDate + ReceivableInvoiceDetailRel.CompanyCustomerRel.FinanceChargeDueDateGraceDays as days

						else
							initialize WsFromDate

						WsMiscAmount  = ReceivableInvoiceDetailRel.ApplicationAmount.CurrencyAmount + ReceivableInvoiceDetailRel.AdjustmentAmount.CurrencyAmount

						if  (ApplicationSource.ReversalOfApplications)
							initialize Result
						else
						if (ReceivableApplication.ApplicationSequence < ReceivableInvoiceDetailRel.LastApplicationSequence
						or  WsMiscAmount != ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount)
							if  (DepositDate > WsFromDate)
								Result			= Result.DelinquentApplication
							else
								Result			= Result.PartialApplication
						else
							if  (DepositDate > WsFromDate)
								Result			= Result.FullyAppliedLate
							else
								Result			= Result.FullyAppliedOnTime

						if  (ReceivableApplication.TransType.Invoice
						and  CreditTransaction.CreditType.Payment)
							ArwsCompany				= Company
							ArwsCustomer			= ReceivableInvoiceDetailRel.Customer
							ArwsxTranAmount			= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
							ArwsDay					= DepositDate - ReceivableInvoiceDetailRel.TransactionDate
							ArwsDay2				= DepositDate - ReceivableInvoiceDetailRel.DueDate
							if  (Result = "D")
								ArwsResult			= "D"	
							else
							if  (Result = "F")
								ArwsResult			= "F"	
							else
								ArwsResult			= "C"	

							if  (ApplicationSource.ReversalOfApplications)
								ArwsResult			= "R"	

							include 700UpdateTotals



						if  ((!CreditTransaction.CreditType.CreditMemo
						and	AdjustmentSequence entered)
						or   (CreditTransaction.CreditType.CreditMemo
						and   AdjustmentSequence entered))

							initialize WsAdjTranRevAmount
							initialize WsAdjBaseRevAmount
							initialize WsReverseTranAmount
							initialize WsReverseBaseAmount

							for each ReceivableApplicationAdjustmentRel
								if (each.AdjustmentReason  != "CURR")
									WsAdjTranRevAmount	+= each.AdjustmentAmount.CurrencyAmount
									WsAdjBaseRevAmount  += each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
								else
									WsAdjTranRevAmount	+= each.AdjustmentAmount.CurrencyAmount
									WsAdjBaseRevAmount  += each.AdjustmentAmount.CurrencyAmount


						IsCredit = false

						if  (Prepayment.Prepayment)
							if  (CreditTransaction.CreditType.CreditMemo)
								if  (Company							= CreditTransaction.CreditCompany
								and  ReceivableApplication.Invoice		= CreditTransaction.CreditNumber
								and  ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType	= ReceivableCreditInvoiceDetailRel.AlternateReceivableInvoiceType)
									NextSentence = true
								else
								if  (ReceivableCreditInvoiceDetailRel.ReceivableInvoiceRel.TaxInterface.Yes)
									DbCompany	= CreditTransaction.CreditCompany
									DbTransType = CreditTransaction.CreditType
									DbInvoice	= CreditTransaction.CreditNumber
									IsCredit = true

									include 5000TaxPoint
									IsCredit = false
							else
							if  (CreditTransaction.CreditType.Payment)
								DbCompany	= Company
								DbTransType = ReceivableApplication.TransType
								DbInvoice	= ReceivableApplication.Invoice

								include 5000TaxPoint
								IsCredit = false
						if (!LocalCanProrateDistributions)
							Status						= Status.ApplicationPosted
						ApplicationCloseResult		= PrmApplicationCloseResult
						
						invoke TriggerReceivableTransaction ReceivableInvoiceRel
							invoked.PrmReceivableCompany		= CreditTransaction.CreditCompany
							if  (CreditTransaction.CreditType.Payment)
								invoked.PrmReceivablePaymentHeader	= CreditTransaction.CreditBatch
								invoked.PrmReceivablePayment		= CreditTransaction.CreditSequence
						ApplicationID								= LocalApplicationID
						invoke TriggerReceivableInvoice ReceivableInvoiceRel










		ProrateForAllApplications is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmApplicationCloseResult	is an ApplicationCloseResult
				PrmCreateDate				is Date
				PrmWsProgramSequence		is like ProgramSequence
				PrmProrate					is Alpha 4

			Local Fields
				LocalInvoiceTransType				is like ReceivableInvoiceType
				LocalInvoiceCustomer				is like Customer

			Instance Selection
				where (ApplicationCloseResult = PrmApplicationCloseResult)

			Action Rules
				Set Rules
					Exit Rules

				Instance Rules
					if  (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered
					and CreateGainLossEntries
					and ReceivableInvoiceRel.CanProrateDistributions)

						PrmWsProgramSequence = AmdArObjId
						LocalInvoiceTransType	= ReceivableInvoiceRel.ReceivableInvoiceType
						LocalInvoiceCustomer	= ReceivableInvoiceRel.Customer

						if (PrmProrate not entered)
							if  (IsCreditTypePayment)
								PrmProrate = "RNA"
							else
							if  (IsCreditTypeCreditMemo)
								PrmProrate = "CRNA"


						invoke RealizedProrateDistributions ReceivableGLDistribution
							invoked.PrmReceivableCompany		= Company
							invoked.PrmBatchNumber				= ReceivableApplication.BatchNumber
							invoked.PrmReceivableInvoice		= ReceivableApplication.Invoice
							invoked.PrmTransType				= LocalInvoiceTransType
							invoked.PrmCustomer					= LocalInvoiceCustomer
							invoked.PrmReceivableApplication	= ReceivableApplication
							invoked.PrmCreateDate				= PrmCreateDate
							invoked.PrmWsProgramSequence		= PrmWsProgramSequence
							invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
							invoked.PrmProrateLevel				= PrmProrate	

		ProrateForFundApplications is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmApplicationCloseResult	is an ApplicationCloseResult

			Sort Order is ByApplicationCloseResult

			Instance Selection
				where (ApplicationCloseResult = PrmApplicationCloseResult
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)

			Local Fields
				LocalInvoiceTransType						is like ReceivableInvoiceType
				LocalInvoiceCustomer						is like Customer
				LocalPreviousInvoice						is an Invoice
				LocalPreviousInvoiceType					is like ReceivableInvoiceType
				LocalPreviousCompany						is like Company
				SkipDuplicateFundAccountingProcessing		is Boolean

			Action Rules
				Instance Rules
					if (ReceivableInvoiceRel.AllowFundAccountingReallocations)
						LocalInvoiceTransType	= ReceivableInvoiceRel.ReceivableInvoiceType
						LocalInvoiceCustomer	= ReceivableInvoiceRel.Customer

						if (LocalPreviousInvoice entered
						and LocalPreviousInvoice 	 = ReceivableApplication.Invoice
						and LocalPreviousInvoiceType = ReceivableInvoiceRel.ReceivableInvoiceType
						and LocalPreviousCompany 	 = ReceivableInvoiceRel.Company)  
							SkipDuplicateFundAccountingProcessing = true
						else
							if (LocalInvoiceTransType = "M")						
								LocalAppCloseResult = PrmApplicationCloseResult
								if (ReceivableApplication = first ReceivableApplicationFundTestRel.ReceivableApplication
								and Company				  = first ReceivableApplicationFundTestRel.Company)
									invoke ProrateForFundApplications ApplicationCloseResultDistributionRel in background group (PrmApplicationCloseResult.DerivedBackgroundGroup) 
										invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
										invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
										invoked.PrmReceivableCompany		= Company
										invoked.PrmReceivableInvoice		= ReceivableApplication.Invoice
										invoked.PrmTransType				= LocalInvoiceTransType
										invoked.PrmCustomer					= LocalInvoiceCustomer
										invoked.PrmReceivableApplication	= ReceivableApplication
							else
								invoke ProrateForFundApplications ApplicationCloseResultDistributionRel in background group (PrmApplicationCloseResult.DerivedBackgroundGroup) 
									invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
									invoked.PrmApplicationCloseResult	= PrmApplicationCloseResult
									invoked.PrmReceivableCompany		= Company
									invoked.PrmReceivableInvoice		= ReceivableApplication.Invoice
									invoked.PrmTransType				= LocalInvoiceTransType
									invoked.PrmCustomer					= LocalInvoiceCustomer
									invoked.PrmReceivableApplication	= ReceivableApplication

							LocalPreviousInvoice 		= ReceivableApplication.Invoice
							LocalPreviousInvoiceType 	= ReceivableInvoiceRel.ReceivableInvoiceType
							LocalPreviousCompany 		= ReceivableInvoiceRel.Company


		UpdateStatus is an Instance Action
			restricted
			Parameters
				PrmStatus								is Numeric size 1
			Action Rules
				Status =	PrmStatus

		ReceivableClaimsAndLiabilities is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmReceivableCompany		  is a ReceivableCompany
				PrmClaimsAndLiabilitiesHeader is a ClaimsAndLiabilitiesHeader				
				PrmReportAsOfDate			  is Date
				PrmCustomerCountry			  is a Country
				PrmCurrency					  is a Currency
				PrmCurrencyTable			  is a CurrencyTable
				PrmTransType				  is a 	TransType
				PrmInvoice					  is an Invoice
				PrmPaymentSeq				  is a PaymentSeq
				PrmBatchNumber				  is a BatchNumber	
				PrmDaysFromTranDateToDueDate  is Numeric 9
			Instance Selection
				where (Company								= PrmReceivableCompany
				and ReceivableApplication.TransType			= PrmTransType
				and ReceivableApplication.Invoice			= PrmInvoice
				and ReceivableApplication.PaymentSeq		= PrmPaymentSeq
				and ReceivableApplication.BatchNumber		= PrmBatchNumber
				and DepositDate		 					   <= PrmReportAsOfDate
				and Status > 0 )
			Sort Order is SequenceDescending
			Local Fields
				LocalLiabilitiesLessThan1Year		is an InternationalAmount
				LocalClaimsLessThan1Year			is an InternationalAmount
				LocalClaimsGreaterThan1Year			is an InternationalAmount
				LocalTotal							is an InternationalAmount
				LocalLiabilitiesGreaterThan1Year	is an InternationalAmount
				LocalFunctionalAmount				is an InternationalAmount
				LocalFunctionalAdjusmentAppliedPayment is an InternationalAmount
				LocalFunctionalAdjustmentAmount		is an InternationalAmount
				LocalFunctionalAppliedPayment	   is an InternationalAmount
				LocalPayments						is an InternationalAmount
				LocalAdjustmentPaymentAmount		is an InternationalAmount
				LocalAppliedPaymentAmount			is an InternationalAmount			
			Action Rules
				Instance Rules
					initialize LocalClaimsLessThan1Year		
					initialize LocalClaimsGreaterThan1Year		
					initialize LocalLiabilitiesLessThan1Year	
					initialize LocalLiabilitiesGreaterThan1Year					
					initialize LocalTotal						
					initialize LocalFunctionalAmount			
					initialize LocalFunctionalAdjusmentAppliedPayment		
					initialize LocalFunctionalAdjustmentAmount	
					initialize LocalFunctionalAppliedPayment
					initialize LocalPayments					
					initialize LocalAdjustmentPaymentAmount	
					initialize LocalAppliedPaymentAmount			

					LocalClaimsAndLiabilitiesHeader 	= PrmClaimsAndLiabilitiesHeader
					LocalCompanyCountry					= PrmCustomerCountry		
								
					if (PrmTransType.CreditMemo)
						if (ApplicationCurrency = Company.Currency)
							LocalAppliedPaymentAmount	= CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							LocalAppliedPaymentAmount   = CreditTransaction.CreditApplicationAmount.CurrencyAmount
					else
						if (ApplicationCurrency = Company.Currency)
							LocalAppliedPaymentAmount	= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							LocalAppliedPaymentAmount	= ApplicationAmount.CurrencyAmount

					LocalAdjustmentPaymentAmount		= TotalAdjustments

					if (ApplicationCurrency = Company.Currency)
						LocalFunctionalAppliedPayment					= LocalAppliedPaymentAmount
						LocalFunctionalAdjustmentAmount					= LocalAdjustmentPaymentAmount
					else
						initialize CurrencyDateWork
						CurrencyDateWork.CurrencyTable					= PrmCurrencyTable
						CurrencyDateWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						CurrencyDateWork.ExchangeDate					= PrmReportAsOfDate
						CurrencyDateWork.TransactionAmount				= LocalAppliedPaymentAmount
						CurrencyDateWork.FromCurrency					= ApplicationCurrency
						CurrencyDateWork.BaseAmount.ToCurrency			= PrmCurrency
						LocalFunctionalAppliedPayment					= CurrencyDateWork.BaseAmount.OutputCurrencyAmount

						if (LocalAdjustmentPaymentAmount > 0)
							initialize CurrencyDateWork
							CurrencyDateWork.CurrencyTable				= PrmCurrencyTable
							CurrencyDateWork.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyDateWork.ExchangeDate				= PrmReportAsOfDate
							CurrencyDateWork.TransactionAmount			= LocalAdjustmentPaymentAmount
							CurrencyDateWork.FromCurrency				= ApplicationCurrency
							CurrencyDateWork.BaseAmount.ToCurrency		= PrmCurrency
							LocalFunctionalAdjustmentAmount				= CurrencyDateWork.BaseAmount.OutputCurrencyAmount
				
					LocalFunctionalAdjusmentAppliedPayment		 		= ((LocalFunctionalAppliedPayment + LocalFunctionalAdjustmentAmount) * -1)
					
					if (PrmTransType.CreditMemo)
						if (PrmDaysFromTranDateToDueDate > 365)
							LocalLiabilitiesGreaterThan1Year = LocalFunctionalAdjusmentAppliedPayment
						else
							LocalLiabilitiesLessThan1Year 	= LocalFunctionalAdjusmentAppliedPayment
					else
						if (PrmDaysFromTranDateToDueDate > 365)
							LocalClaimsGreaterThan1Year 	 = LocalFunctionalAdjusmentAppliedPayment
						else
							LocalClaimsLessThan1Year 		 = LocalFunctionalAdjusmentAppliedPayment

					LocalTotal = LocalFunctionalAdjusmentAppliedPayment
	
					if (ClaimsAndLiabilitiesRel exists)
						invoke Update ClaimsAndLiabilitiesRel
							if (CompanyCustomerRel.Affiliate)
								if (CompanyCustomerRel.AffiliateOwnership.ParentEnterprise)
									invoked.ClaimsLessThan1Year81			 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year81		 + LocalClaimsLessThan1Year)	
									invoked.ClaimsGreaterThan1Year82		 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year82	  + LocalClaimsGreaterThan1Year)	
									invoked.LiabilitiesLessThan1Year84		 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year84	+ LocalLiabilitiesLessThan1Year)
									invoked.LiabilitiesGreaterThan1Year85	 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year85 + LocalLiabilitiesGreaterThan1Year)
								else
								if (CompanyCustomerRel.AffiliateOwnership.SubsidiaryEnterprise)
									invoked.ClaimsLessThan1Year87			 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year87 		  + LocalClaimsLessThan1Year)	
									invoked.ClaimsGreaterThan1Year88		 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year88	  + LocalClaimsGreaterThan1Year)
									invoked.LiabilitiesLessThan1Year90		 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year90	+ LocalLiabilitiesLessThan1Year)
									invoked.LiabilitiesGreaterThan1Year91	 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year91 + LocalLiabilitiesGreaterThan1Year)
								else
								if (CompanyCustomerRel.AffiliateOwnership.FellowEnterprise)
									invoked.ClaimsLessThan1Year93			 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year93		 + LocalClaimsLessThan1Year)	
									invoked.ClaimsGreaterThan1Year94		 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year94	  + LocalClaimsGreaterThan1Year)
									invoked.LiabilitiesLessThan1Year96		 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year96	+ LocalLiabilitiesLessThan1Year)
									invoked.LiabilitiesGreaterThan1Year97	 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year97 + LocalLiabilitiesGreaterThan1Year)
							else
								invoked.ClaimsLessThan1Year41				 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year41		 + LocalClaimsLessThan1Year)
								invoked.ClaimsGreaterThan1Year42			 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year42	  + LocalClaimsGreaterThan1Year)
								invoked.LiabilitiesLessThan1Year44			 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year44	+ LocalLiabilitiesLessThan1Year)
								invoked.LiabilitiesGreaterThan1Year45		 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year45 + LocalLiabilitiesGreaterThan1Year)
	
							invoked.RecordTotal								 = (ClaimsAndLiabilitiesRel.RecordTotal + LocalTotal)
					else
						invoke Create ClaimsAndLiabilities
							invoked.Company									 = Company
							invoked.ClaimsAndLiabilitiesHeader				 = PrmClaimsAndLiabilitiesHeader
							invoked.Country									 = PrmCustomerCountry
							invoked.RecordTotal								 = LocalTotal
	
							if (CompanyCustomerRel.Affiliate)
								if (CompanyCustomerRel.AffiliateOwnership.ParentEnterprise)
									invoked.ClaimsLessThan1Year81			 = LocalClaimsLessThan1Year
									invoked.ClaimsGreaterThan1Year82		 = LocalClaimsGreaterThan1Year
									invoked.LiabilitiesLessThan1Year84		 = LocalLiabilitiesLessThan1Year
									invoked.LiabilitiesGreaterThan1Year85	 = LocalLiabilitiesGreaterThan1Year
								else
								if (CompanyCustomerRel.AffiliateOwnership.SubsidiaryEnterprise)
									invoked.ClaimsLessThan1Year87			 = LocalClaimsLessThan1Year
									invoked.ClaimsGreaterThan1Year88		 = LocalClaimsGreaterThan1Year
									invoked.LiabilitiesLessThan1Year90		 = LocalLiabilitiesLessThan1Year
									invoked.LiabilitiesGreaterThan1Year91	 = LocalLiabilitiesGreaterThan1Year
								else
								if (CompanyCustomerRel.AffiliateOwnership.FellowEnterprise)
									invoked.ClaimsLessThan1Year93			 = LocalClaimsLessThan1Year
									invoked.ClaimsGreaterThan1Year94		 = LocalClaimsGreaterThan1Year
									invoked.LiabilitiesLessThan1Year96		 = LocalLiabilitiesLessThan1Year
									invoked.LiabilitiesGreaterThan1Year97	 = LocalLiabilitiesGreaterThan1Year
							else
								invoked.ClaimsLessThan1Year41				 = LocalClaimsLessThan1Year
								invoked.ClaimsGreaterThan1Year42			 = LocalClaimsGreaterThan1Year
								invoked.LiabilitiesLessThan1Year44			 = LocalLiabilitiesLessThan1Year
								invoked.LiabilitiesGreaterThan1Year45		 = LocalLiabilitiesGreaterThan1Year

		FutureApplicationReportHeader is an Instance Action 
				restricted
				Parameters
					PrmFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
					PrmCompany							is a ReceivableCompany
					PrmGeneralLedgerEndDate				is Date
					PrmARCode							is a ReceivableGeneralLedgerCode
					PrmApplicationStatus				is Numeric size 1
						States
							ApplicationPosted			value is 0
							ApplicationNotPosted		value is 1
							All							value is 2
					PrmFutureApplicationReportHeader	is a FutureApplicationReportHeader


				Parameter Rules
					PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup			


				Local Fields
					LocalBaseDebitCreditAdjustAmount	is like InternationalAmount
					LocalInvoice						is a ReceivableInvoiceDetail
					LocalToCurrency						is a ToCurrency
				
				Action Rules
					LocalInvoice 		= ReceivableInvoiceFuturedateddetailsRel.ReceivableInvoiceDetail

					invoke Create FutureApplicationReportDetail
						invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
						invoked.Company									= Company
						invoked.Customer								= DebitCustomer
						invoked.ARCode									= ReceivableGeneralLedgerCode
						invoked.ReceivableInvoiceDetail.Invoice			= ReceivableApplication.Invoice
						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= ReceivableApplication.TransType
						invoked.ReceivableInvoiceDetail.PaymentSeq		= ReceivableApplication.PaymentSeq
						invoked.FutureApplicationReportHeader			= PrmFutureApplicationReportHeader
						invoked.TransactionStatus						= LocalInvoice.Status
						invoked.TransactionDate							= LocalInvoice.TransactionDate
						invoked.TransactionGLDate						= LocalInvoice.GeneralLedgerDate

						if ((ReceivableApplication.TransType.CreditMemo
						or   ReceivableApplication.TransType.DebitMemo
						or   ReceivableApplication.TransType.Invoice)
						and  CreditTransaction.CreditType.Payment)
							invoked.PaymentDepositeDate					= ReceivablePaymentRel.DepositDate
							invoked.PaymentGLDate						= ReceivablePaymentRel.GeneralLedgerDate
							invoked.Type								= "P"
							
						if ((ReceivableApplication.TransType.DebitMemo
						or   ReceivableApplication.TransType.Invoice)
						and  CreditTransaction.CreditType.CreditMemo)
							invoked.PaymentDepositeDate					= ReceivableCreditMemoDetailRel.TransactionDate
							invoked.PaymentGLDate						= ReceivableCreditMemoDetailRel.GeneralLedgerDate
							invoked.Type								= "CM"
							
						if (ReceivableApplication.Invoice = CreditTransaction.CreditNumber)
							invoked.Type								= "W"
						
						LocalToCurrency									= Company.Currency
						LocalBaseDebitCreditAdjustAmount				= sum FutureDatedApplicationAdjustmentRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						
						if (ReceivableApplication.TransType.CreditMemo)
							invoked.ApplicationAmount					= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.ApplicationAdjustAmount				= LocalBaseDebitCreditAdjustAmount * -1
						else
							invoked.ApplicationAmount					= ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount 
							invoked.ApplicationAdjustAmount				= LocalBaseDebitCreditAdjustAmount
						
						invoked.ApplicationGLDate						= GeneralLedgerDate
						invoked.ApplicationStatus						= Status

