SupplierSourceId is a BusinessClass
	owned by procurement
	prefix is SSID
	representative text is "<SupplierSourceId.MainContact.FirstAndLastName>_(<SupplierSourceId>)"
	representative image is Picture.File
		missing image is random background
			foreground text is "<MainContact.Initials>"

	Ontology
		symbolic key is SupplierSourceId

	Persistent Fields
		LoginName						is LoginName  
			default label is "UserName"
		Password						is Password
		ConfirmPassword					is Password
		MainContact						is an PersonName 
			holds pii
		ContactTitle					is a Description
		LocationName					is a VendorName 
			holds pii
		LocationAddress					is a PostalAddressV2	
			holds pii
		EmailAddress 
			holds pii
		ConfirmEmailAddress				is an EmailAddress 
			holds pii
		TelephoneNumber 
			holds pii
		MobilePhone 
			holds pii
		FaxNumber 
			holds pii
		LocationVendor					is a snapshot of Supplier.Vendor
		VendorLocation
		ReceiveEmailNotification		is Boolean
		Active							is Boolean
		PortalInactiveSource			is Numeric size 1
			States
				Buyer		value is 1
				Supplier	value is 2
		InactiveTimeStamp				is TimeStamp
		GlnNumberContact				is a GlobalLocationNumber
		SentContactCertificationNotice	is Date
		PrimaryContact					is Boolean
		VendormateUserId				is Alpha size up to 40
		BankInformationGroup
			context of SupplierGroup
		Picture							is an ImageAttachment
		AutoApprove                     is Boolean
		AllowTemplate                   is Boolean
		AllowAdHoc                      is Boolean
		AllowContractSearch             is Boolean
		ContractItemsOnly               is Numeric 1
			default label is "WhenNonContractItemsExist"
			States
				ErrorOnSubmit    value is 1
				WarningOnSubmit  value is 2
		DefaultRequester                is a Requester
			context of DefaultCompany
		DefaultRequestingLocation       is a RequestingLocation
		DefaultCompany                  is an InventoryCompany
		ShowProcedureDetails					   is AlphaUpper size 1
			States
            	DefaultFromSupplierGroup 	value is blank
				FromSupplierContact         value is "C"		
		SupplierViewVisitNumber                    is Boolean
			default label is "VisitNumber"
		SupplierViewMedicalRecordNumber            is Boolean
			default label is "MedicalRecordNumber"
		SupplierViewCaseID                         is Boolean
			default label is "CaseID"
		SupplierViewProcedure                      is Boolean
			default label is "Procedure"


		SupplierViewPractitioner                   is Boolean
			default label is "Practitioner"	
		SupplierViewNurseCoordinator               is Boolean
			default label is "Coordinator"
		SupplierViewPatientName					   is Boolean
			default label is "PatientName"
		SupplierViewPatientBirthdate			   is Boolean
			default label is "PatientBirthdate"
		SupplierViewPatientGender				   is Boolean
			default label is "PatientGender"
		SupplierViewSupplierOrderNumber            is Boolean
			default label is "SupplierOrderNumber"
		SupplierViewLotNumber                      is Boolean          
			default label is "LotNumber"
		SupplierViewSerialNumber                   is Boolean
			default label is "SerialNumber"
		SupplierViewUniqueDeviceId                 is Boolean
			default label is "UDI"
		SupplierViewGTIN                           is Boolean
			default label is "GTIN"
		SupplierViewManufacturingDate              is Boolean
			default label is "ManufacturingDate"
		SupplierViewExpirationDate                 is Boolean
			default label is "ExpirationDate"
		MigratedToExternalUser						is Boolean
			default label is "Migrated"
		ExternalUserMigrationMismatch				is Boolean
		NotifiedMigrationChangedSignIn				is Boolean
		ConvertedLowerCaseEmailAddress				is an EmailAddress 
			holds pii

	Context Fields
		SupplyManagementReportContext is a SupplyManagementReport
		EventDateRange                is a DateRange		
		ContextSupplier               is a Supplier

	Transient Fields
		ChangeTaxID                     is Boolean
		LocationRel						is AlphaUpper size 4
		BankCountry						is a Country
		ConfirmBankEntity				is like BankEntity     
		ConfirmBankAccountNumber		is like BankAccountNumber 
			holds pii

		TransientSingleJSONNode					is Alpha 400
		TransientNextAction						is Alpha 100
		TransientUserVerificationId				is Alpha 100
        TransientUserIdentity					is Alpha 50
		TransientResponseStatus					is Alpha 100
 		TransientAutogeneratedActorId			is Alpha 30
		TransientVerificationCode				is Alpha 20
		TransientUserRegistered					is Boolean
		TransientUserVerified					is Boolean
		FieldToConvert							is Alpha 250
		TransientStringHolder					is Alpha 3000
		TransientRawText						is RichText
		TransientDefaultDevice					is Alpha 400
		TransientMFAEnforced					is Boolean
		TransientHasRegisteredDevice			is Boolean

		TransientSingleJSONNodeEmail			is Alpha 400
		TransientNextActionEmail				is Alpha 100
		TransientUserVerificationIdEmail		is Alpha 100
        TransientUserIdentityEmail				is Alpha 50
		TransientResponseStatusEmail			is Alpha 100
		TransientVerificationCodeEmail			is Alpha 20
		TransientNewEmailAddress				is an EmailAddress
		TransientConfirmNewEmailAddress			is an EmailAddress
		TransientEmailPassword					is Password
		TransientSendVerificationCodeEmail		is Boolean
		TransientResendVerificationCodeEmail	is Boolean
		TransientUserUpdateInitiated			is Boolean
		TransientStringHolderEmail				is Alpha 3000
		TransientVerificationCodeResentEmail	is Boolean
		TransientFinanceEnterpriseGroup			is like FinanceEnterpriseGroup

	Local Fields
		LocalGlnType				is Numeric size 2
		LocalCompany				is like Company 
		LocalSourcingEvent			is Numeric size 8
		LocalContactInfo            is a ContactInfo
		LocalPreviousEventId 		is Numeric size 8
		LocalEventCount				is Numeric size 21
		LocalPrimaryContactChanged  is Boolean
		LocalService				is a Service
		LocalIdentity				is an Identity
		LocalBankAccountNumber      is a BankAccountNumber
		LocalBankCountry            is a Country
		ValidateBankAccountNumber
		FromSupplier                is Boolean
		LocalFromMismatch           is Boolean

		LocalText					is Text	
		LocalText2					is Text	

		JSONResponse				is JSONObject
		LocalCreateIdentity			is Boolean
		LocalEmailAddress			is an EmailAddress
		LocalExternalUserEmail		is like EmailAddress
		LocalExternalUserActorId	is like Actor
		LocalElementCounter			is Numeric size 4
		LocalArraySize				is Numeric size 4

	Field Groups
		SupplierSourceIdFields
			MainContact
			ContactTitle
			LocationName
			LocationAddress
			EmailAddress
			TelephoneNumber
			MobilePhone
			FaxNumber
			ReceiveEmailNotification
			LoginName
			Password
			ConfirmPassword
			BankInformationGroup

		CompareFields
			LocationName
			LocationAddress
			MainContact
			TelephoneNumber
			FaxNumber
			MobilePhone
			BankInformationGroup
			EmailAddress			

	Derived Fields
		RepresentativeText is a StringField
			type is Text
			default label is "SupplierContact"
			SupplierSourceId  " - " SupplierSourceId.MainContact.FirstAndLastName

		TotalSourceIdEventsBid is a DerivedField
			type is Numeric size 21
			initialize LocalEventCount
			initialize LocalPreviousEventId
			for each UniqueSourcingEventLineResponsesForResponseHistoryRel
				if (each.SourcingEvent != LocalPreviousEventId)
					LocalPreviousEventId = each.SourcingEvent
					LocalEventCount+=1
			return (LocalEventCount)

		TotalSourceIdEventAwards is a DerivedField
			type is Numeric size 21
			initialize LocalEventCount
			initialize LocalPreviousEventId
			for each UniqueSourcingEventLineResponsesForResponseHistoryRel
				if (each.SourcingEvent != LocalPreviousEventId and each.IsAwarded)
					LocalPreviousEventId = each.SourcingEvent
					LocalEventCount+=1
			return (LocalEventCount)

		TotalSourceIdEventBidSuccess is a DerivedField
			type is Percent size 6.1
			return (TotalSourceIdEventAwards/TotalSourceIdEventsBid)
		TotalParticipation is a DerivedField
			type is Percent size 6.1
			if (TotalSourceIdEventsBid/NumberOfClosedEventInvites > 100%)
				return 100%
			else
				return (TotalSourceIdEventsBid/NumberOfClosedEventInvites)
		TotalSourceIdLinesBid is a DerivedField
			type is Numeric size 21
			return (instance count of UniqueSourcingEventLineResponsesForResponseHistoryRel)
		TotalSourceIdAwardedLines is a DerivedField
			type is Numeric size 21
			return (instance count of UniqueSourcingEventLineResponsesAwardedForResponseHistoryRel)
		TotalSourceIdLineBidSuccess is a DerivedField
			type is Percent size 6.1
			return (TotalSourceIdAwardedLines/TotalSourceIdLinesBid)

		TotalSourceIdBid is a DerivedField
			type is Decimal size 21.2
			return (sum UniqueSourcingEventLineResponsesForResponseHistoryRel.ExtendedPrice)
		TotalSourceIdAwarded is a DerivedField
			type is Decimal size 21.2
			return (sum UniqueSourcingEventLineResponsesAwardedForResponseHistoryRel.ExtendedPrice)
		TotalSourceIdAmountBidSuccess is a DerivedField
			type is Percent size 6.1
			return (TotalSourceIdAwarded / TotalSourceIdBid)

		TotalSourceIdEventsBidWithDiversity is a DerivedField
			type is Numeric size 21
			restricted
			initialize LocalEventCount
			initialize LocalPreviousEventId
			for each UniqueSourcingEventLineResponsesWithDiversityForResponseHistoryRel
				if (each.SourcingEvent != LocalPreviousEventId)
					LocalPreviousEventId = each.SourcingEvent
					LocalEventCount+=1
			return (LocalEventCount)

		TotalSourceIdEventAwardsWithDiversity is a DerivedField
			type is Numeric size 21
			restricted
			initialize LocalEventCount
			initialize LocalPreviousEventId
			for each UniqueSourcingEventLineResponsesAwardedWithDiversityForResponseHistoryRel
				if (each.SourcingEvent != LocalPreviousEventId and each.IsAwarded)
					LocalPreviousEventId = each.SourcingEvent
					LocalEventCount+=1
			return (LocalEventCount)

		TotalSourceIdEventBidWithDiversitySuccess is a DerivedField
			type is Percent size 6.1
			restricted
			return (TotalSourceIdEventAwardsWithDiversity/TotalSourceIdEventsBidWithDiversity)

		TotalSourceIdLinesBidWithDiversity is a DerivedField
			type is Decimal size 21
			restricted
			return (instance count of UniqueSourcingEventLineResponsesWithDiversityForResponseHistoryRel)
		TotalSourceIdAwardedLinesWithDiversity is a DerivedField
			type is Decimal size 21
			restricted
			return (instance count of UniqueSourcingEventLineResponsesAwardedWithDiversityForResponseHistoryRel)
		TotalSourceIdLineBidWithDiversitySuccess is a DerivedField
			type is Percent size 6.1
			restricted
			return (TotalSourceIdAwardedLinesWithDiversity/TotalSourceIdLinesBidWithDiversity)

		TotalSourceIdBidWithDiversity is a DerivedField
			type is Decimal size 21.2
			restricted
			return (sum UniqueSourcingEventLineResponsesWithDiversityForResponseHistoryRel.ExtendedPrice)
		TotalSourceIdAwardedWithDiversity is a DerivedField
			type is Decimal size 21.2
			restricted
			return (sum UniqueSourcingEventLineResponsesAwardedWithDiversityForResponseHistoryRel.ExtendedPrice)
		TotalSourceIdAmountBidWithDiversitySuccess is a DerivedField
			type is Percent size 6.1
			restricted
			return (TotalSourceIdAwardedWithDiversity / TotalSourceIdBidWithDiversity)

		DerivedBankAccountValidationType is a DerivedField
			type is like BankAccountValidationType

			if (CountryBankInformationRel exists)
				return CountryBankInformationRel.BankAccountValidationType
			else
			if (DefaultCountryBankInformationRel exists)
				return DefaultCountryBankInformationRel.BankAccountValidationType

		TaxCertificationMessage is a MessageField
			restricted
			"TaxCertification"

		TaxCertificationLabel is a DerivedField
			type is Alpha 25
			restricted
			if (Supplier.TaxIdGroup.TaxIdType entered
			and Supplier.TaxIdentificationTypeRel.TaxCertificationLabel entered)
				return Supplier.TaxIdentificationTypeRel.TaxCertificationLabel
			else
				return TaxCertificationMessage

		FullName is a MessageField
			"<ContactTitle>_<MainContact.GivenName>_<MainContact.FamilyName>"

		SameAddressTag is a MessageField
			"Remit_AddressIsThe_Same"

		NotifyTag is a MessageField
			"Notify"

		DoNotNotifyTag is a MessageField
			"Do_Not_Notify"

		SummaryText is a ConditionalField
			type is Alpha size 350
			restricted
			if (RegistrationComplete)
				SupplierGroup.CompleteRegistrationText
			else
				SupplierGroup.IncompleteRegistrationText

		CompleteWarningMessage is a MessageField
			restricted
			"PleaseNote:YouHaveNotSelectedAnyCommodityCodesAndWillNotBeNotifiedOfFutureBiddingOpportunities"

		CompleteWarning is a ConditionalField
			type is Text
			restricted
			if (RegistrationComplete
			and SupplierGroup.AllowCommoditySelect
			and	!SupplierGroup.RequireCommodityRegistration
			and	 SupplierCommodityCode set !exists)
				CompleteWarningMessage
			else
				blank

		NotCompleteQMessage is a MessageField
			restricted
			"QuestionsExist;PleaseUseThisButtonToAnswerQuestions;AllRequiredQuestionsMustBeAnsweredToCompleteRegistration"

		NotCompleteQuestions is a ConditionalField
			type is Text
			restricted
			if (IncompleteQuestions)
				NotCompleteQMessage
			else
				blank

		NotCompleteQAMessage is a MessageField
			restricted
			"-YouHaveNotEnteredAnAttachmentForAllQuestionsRequiringAttachmentsAsPartOfTheRegistrationProcess."

		NotCompleteQuestionAttachments is a ConditionalField
			type is Text
			restricted
			if (IncompleteQuestionAttachments)
				NotCompleteQAMessage
			else
				blank

		NotCompleteCMessage is a MessageField
			restricted
			"YouMustAddCommodityCodesToBeNotifiedOfFutureOpportunities"

		NotCompleteCommodities is a ConditionalField
			type is Text
			restricted
			if (IncompleteCommodities)
				NotCompleteCMessage
			else
				blank

		CompleteMessage is a MessageField
			restricted
			"Complete"

		NotCompleteMessage is a MessageField
			restricted
			"Incomplete"

		NotReceivingNotifications is a MessageField
			"Do_Not_Notify"

		RegistrationStatus is a DerivedField
			type is like Description
			if (RegistrationComplete)
				return CompleteMessage
			else
				return NotCompleteMessage

		IsRegistrationIncomplete is a ConditionalField
			type is Numeric 1
			restricted
			if (!RegistrationComplete)
				1
			else
				blank

		NumberOfEventInvites is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SupplierNotificationsRel)

		NumberOfClosedEventInvites is a ComputeField
			type is Numeric 6
			(instance count of ClosedSupplierNotificationsRel)

		NumberOfEventResponses is a ComputeField
			type is Numeric 6
			(instance count of ActualEventResponses)

		NumberOfEventsNoBid is a ComputeField
			type is Numeric 6
			(instance count of NoBidEventResponses)

		NumberOfLinesBid is a ComputeField
			type is Numeric 6
			(instance count of ActualEventLineResponses)

		NumberOfAlternateLinesBid is a ComputeField
			type is Numeric 6
			(instance count of ActualEventLineAlternateResponses)

		NumberOfLinesNoBid is a ComputeField
			type is Numeric 6
			(instance count of NoBidEventLineResponses)

		NumberOfLinesAwarded is a ComputeField
			type is Numeric 6
			(NumberOfLinesAwardedPO + NumberOfLinesAwardedCM)

		NumberOfAlternateLinesAwarded is a ComputeField
			type is Numeric 6
			(NumberOfAlternateLinesAwardedPO + NumberOfAlternateLinesAwardedCM)

		NumberOfLinesAwardedPO is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AwardedPOEventLineResponses)

		NumberOfAlternateLinesAwardedPO is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AwardedPOEventLineAlternateResponses)

		NumberOfLinesAwardedCM is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AwardedCMEventLineResponses)

		NumberOfAlternateLinesAwardedCM is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AwardedCMEventLineAlternateResponses)

		LinesAwardedSuccessRate is a ComputeField
			type is Percent size 4.1
			(NumberOfLinesAwarded / NumberOfLinesBid)

		TotalAmountOfLinesBid is a DerivedField
			type is like InternationalAmount
			return (sum ActualEventLineResponses.BaseExtendedPrice)

		TotalAmountOfAlternateBids is a DerivedField
			type is like InternationalAmount
			return (sum ActualEventLineAlternateResponses.BaseAlternateExtendedPrice)

		TotalAmountOfPOLinesAwarded is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum AwardedPOEventLineResponses.BaseAwardExtendedPrice)

		TotalAmountOfPOAlternateAwards is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum AwardedPOEventLineAlternateResponses.BaseAlternateAwardExtendedPrice)

		TotalAmountOfCMLinesAwarded is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum AwardedCMEventLineResponses.BaseAwardExtendedPrice)

		TotalAmountOfCMAlternateAwards is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum AwardedCMEventLineAlternateResponses.BaseAlternateAwardExtendedPrice)

		TotalAmountOfLinesAwarded is a DerivedField
			type is like InternationalAmount
			return (TotalAmountOfPOLinesAwarded + TotalAmountOfCMLinesAwarded)

		TotalAmountOfAlternateAwards is a DerivedField
			type is like InternationalAmount
			return (TotalAmountOfPOAlternateAwards + TotalAmountOfCMAlternateAwards)

		AmountAwardedSuccessRate is a ComputeField
			type is Percent size 4.1
			(TotalAmountOfLinesAwarded / TotalAmountOfLinesBid)


		NumberOfSupplierPerformanceEvaluations is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SupplierPerformanceEvaluationRel)

		NumberOfExpiringSupplierContactCertifications is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of ExpiringContactCertificationsRel)

		ExpiringContactCertsCount is a MessageField
			"ViewContactCertifications(<NumberOfExpiringSupplierContactCertifications>)"

		DerivedActive is a StringField
			type is Boolean
			Active

		DerivedLoginName is a StringField
			type is LoginName
			SupplierGroup
			"-"
			Supplier
			"-"
			SupplierSourceId

		ExpiringCertificationsMessageContents is a DerivedField
			type is Text
			restricted
			for each ExpiringContactCertificationsRel
				ExpiringCertificationsMessageContents = ExpiringCertificationsMessageContents + each.SupplierCertification.PayablesCertificationCode.Description + " ; " + each.CertificationExpirationDate + SupplierGroup.NewLine
			return ExpiringCertificationsMessageContents

		SupplierCommodityCodeCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SupplierCommodityCode set exists)
				return "(" + instance count of SupplierCommodityCode set + ")"
			else
				return ""

		SupplierContactCertificationCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SupplierContactCertificationRel exists)
				return "(" + instance count of SupplierContactCertificationRel + ")"
			else
				return ""

		SupplierProxyCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SupplierContactProxy set exists)
				return "(" + instance count of SupplierContactProxy set + ")"
			else
				return ""

		CityStateZIPDisplay is a DerivedField
			type is Text
			restricted
			initialize LocalText2

			if (LocationAddress.Municipality entered)
				LocalText2 += LocationAddress.Municipality
				if (LocationAddress.StateProvince entered
					or LocationAddress.PostalCode entered)
					LocalText2 += ", "

			if (LocationAddress.StateProvince entered
				and LocationAddress.PostalCode entered)
				LocalText2 += LocationAddress.StateProvince + " " + LocationAddress.PostalCode
			else
				LocalText2 += LocationAddress.StateProvince + LocationAddress.PostalCode
			return LocalText2

		FullAddressDisplay is a DerivedField	
			type is Text
			default label is "VendorAddress"
			initialize LocalText

			if (LocationAddress.DeliveryAddress.AddressLine1 entered)
				LocalText += LocationAddress.DeliveryAddress.AddressLine1
				if (LocationAddress.DeliveryAddress.AddressLine2 entered
					or LocationAddress.DeliveryAddress.AddressLine3 entered
					or LocationAddress.DeliveryAddress.AddressLine4 entered
					or CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (LocationAddress.DeliveryAddress.AddressLine2 entered)
				LocalText += LocationAddress.DeliveryAddress.AddressLine2
				if (LocationAddress.DeliveryAddress.AddressLine3 entered
					or LocationAddress.DeliveryAddress.AddressLine4 entered
					or CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (LocationAddress.DeliveryAddress.AddressLine3 entered)
				LocalText += LocationAddress.DeliveryAddress.AddressLine3
				if (LocationAddress.DeliveryAddress.AddressLine4 entered
					or CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (LocationAddress.DeliveryAddress.AddressLine4 entered)
				LocalText += LocationAddress.DeliveryAddress.AddressLine4
				if (CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (CityStateZIPDisplayEntered)
				LocalText += CityStateZIPDisplay
			return LocalText

		LocationAddressCityStateZip is a StringField
			type is Alpha size 30
			LocationAddress.Municipality
			", "
			LocationAddress.StateProvince
			" "
			LocationAddress.PostalCode

		MailingAddressCityStateZip is a StringField
			type is Alpha size 30
			Supplier.MailingAddress.Municipality
			", "
			Supplier.MailingAddress.StateProvince
			" "
			Supplier.MailingAddress.PostalCode

		BillingAddressCityStateZip is a StringField
			type is Alpha size 30
			Supplier.BillingAddress.Municipality
			", "
			Supplier.BillingAddress.StateProvince
			" "
			Supplier.BillingAddress.PostalCode

		UpdateLinkback is a MessageField    
			restricted
			"<linkback(webapp is SupplyManagementSupplier navigation is UpdateContactInformation text is \"SupplierPortal\" session key SupplierGroup is SupplierGroup)>"

		SupplierService is a DerivedField
			type is AlphaUpper size 100
			restricted
			return config.SUPPLIER_SERVICE

		YesMessage is a MessageField
			restricted
			"Yes"

		NoMessage is a MessageField
			restricted
			"No"

		FromGroupMessage is a MessageField
			restricted
			"SupplierGroup"

		FromContactMessage is a MessageField
			restricted
			"Contact"

		FromSOMAllMessage is a MessageField
			restricted
			"ContactAllSOMRole"

		EventAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryEventAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierEventAccess)
			or  SupplierContactEventRel exists)
				YesMessage
			else
				NoMessage

		EventAccessFrom is a ConditionalField
			type is Alpha size 30
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryEventAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierEventAccess)
				FromGroupMessage
			else
			if (SupplierContactEventRel exists)
				FromContactMessage
			else
				blank

		PlanHolderAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryPlanHolderAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierPlanHolderAccess)
			or  SupplierContactPlanHolderRel exists)
				YesMessage
			else
				NoMessage

		PlanHolderAccessFrom is a ConditionalField
			type is Alpha size 30
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryPlanHolderAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierPlanHolderAccess)
				FromGroupMessage
			else
			if (SupplierContactPlanHolderRel exists)
				FromContactMessage
			else
				blank

		EventMetricsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryEventMetricsAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierEventMetricsAccess)
			or  SupplierContactEventMetricsRel exists)
				YesMessage
			else
				NoMessage

		EventMetricsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryEventMetricsAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierEventMetricsAccess)
				FromGroupMessage
			else
			if (SupplierContactEventMetricsRel exists)
				FromContactMessage
			else
				blank

		CMAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryCMAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierCMAccess)
			or  SupplierContactCMRel exists)
				YesMessage
			else
				NoMessage

		CMAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryCMAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierCMAccess)
				FromGroupMessage
			else
			if (SupplierContactCMRel exists)
				FromContactMessage
			else
				blank

		TermsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryTermsAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierTermsAccess)
			or  SupplierContactTermsRel exists)
				YesMessage
			else
				NoMessage

		TermsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryTermsAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierTermsAccess)
				FromGroupMessage
			else
			if (SupplierContactTermsRel exists)
				FromContactMessage
			else
				blank

		SubcontractorAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySubcontractorAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSubcontractorAccess)
			or  SupplierContactSubcontractorRel exists)
				YesMessage
			else
				NoMessage

		SubcontractorAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySubcontractorAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSubcontractorAccess)
				FromGroupMessage
			else
			if (SupplierContactSubcontractorRel exists)
				FromContactMessage
			else
				blank

		OrdersAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySOMOrdersAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSOMOrdersAccess)
			or  SupplierContactOrdersRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		OrdersAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySOMOrdersAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSOMOrdersAccess)
				FromGroupMessage
			else
			if (SupplierContactOrdersRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		ItemsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySOMItemsAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSOMItemsAccess)
			or  SupplierContactItemsRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		ItemsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySOMItemsAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSOMItemsAccess)
				FromGroupMessage
			else
			if (SupplierContactItemsRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		AcknowledgementCreateAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySOMAcknowledgementCreateAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSOMAcknowledgementCreateAccess)
			or  SupplierContactAcknowledgementCreateRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		AcknowledgementCreateAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySOMAcknowledgementCreateAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSOMAcknowledgementCreateAccess)
				FromGroupMessage
			else
			if (SupplierContactAcknowledgementCreateRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		ReceiptsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySOMReceiptsAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSOMReceiptsAccess)
			or  SupplierContactReceiptsRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		ReceiptsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySOMReceiptsAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSOMReceiptsAccess)
				FromGroupMessage
			else
			if (SupplierContactReceiptsRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		ReturnsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryVendorReturnsAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierVendorReturnsAccess)
			or  SupplierContactReturnsRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		ReturnsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryVendorReturnsAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierVendorReturnsAccess)
				FromGroupMessage
			else
			if (SupplierContactReturnsRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		PaymentsAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySOMPaymentsAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSOMPaymentsAccess)
			or  SupplierContactPaymentsRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		PaymentsAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySOMPaymentsAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSOMPaymentsAccess)
				FromGroupMessage
			else
			if (SupplierContactPaymentsRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		InvoicesAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySOMInvoicesAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSOMInvoicesAccess)
			or  SupplierContactInvoicesRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		InvoicesAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySOMInvoicesAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSOMInvoicesAccess)
				FromGroupMessage
			else
			if (SupplierContactInvoicesRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		InvoiceAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimarySOMInvoiceCreateAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierSOMInvoiceCreateAccess)
			or  SupplierContactInvoiceCreateRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		InvoiceAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimarySOMInvoiceCreateAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierSOMInvoiceCreateAccess)
				FromGroupMessage
			else
			if (SupplierContactInvoiceCreateRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		MessagesAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryMessagesAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierMessagesAccess)
			or  SupplierContactMessagesRel exists)
				YesMessage
			else
				NoMessage

		MessagesAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryMessagesAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierMessagesAccess)
				FromGroupMessage
			else
			if (SupplierContactMessagesRel exists)
				FromContactMessage
			else
				blank

		RequisitionAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryRequisitionAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierRequisitionAccess)
			or  SupplierContactRequisitionRel exists)
				YesMessage
			else
				NoMessage

		RequisitionAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryRequisitionAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierRequisitionAccess)
				FromGroupMessage
			else
			if (SupplierContactRequisitionRel exists)
				FromContactMessage
			else
				blank

		PerformanceAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryPerformanceAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierPerformanceAccess)
			or  SupplierContactPerformanceRel exists
			or  SupplierContactSOMAllRel exists)
				YesMessage
			else
				NoMessage

		PerformanceAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryPerformanceAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierPerformanceAccess)
				FromGroupMessage
			else
			if (SupplierContactPerformanceRel exists)
				FromContactMessage
			else
			if (SupplierContactSOMAllRel exists)
				FromSOMAllMessage
			else
				blank

		RecallAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryRecallAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierRecallAccess)
			or  SupplierContactRecallRel exists)
				YesMessage
			else
				NoMessage

		RecallAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryRecallAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierRecallAccess)
				FromGroupMessage
			else
			if (SupplierContactRecallRel exists)
				FromContactMessage
			else
				blank

		ItemProposalAccess is a ConditionalField
			type is Alpha size 10
			if ((PrimaryContact
			and SupplierGroup.SupplierPrimaryItemProposalAccess)
			or  (!PrimaryContact
			and SupplierGroup.SupplierItemProposalAccess)
			or  SupplierContactItemProposalRel exists)
				YesMessage
			else
				NoMessage

		ItemProposalAccessFrom is a ConditionalField
			type is Alpha size 20
			if (PrimaryContact
			and SupplierGroup.SupplierPrimaryItemProposalAccess)
				FromGroupMessage
			else
			if  (!PrimaryContact
			and SupplierGroup.SupplierItemProposalAccess)
				FromGroupMessage
			else
			if (SupplierContactItemProposalRel exists)
				FromContactMessage
			else
				blank

		PrimaryContactRoleMessage is a MessageField
			"SupplierPrimaryContact_ST"

		PrimaryTag is a MessageField
			"Primary_Contact"

		ContactRoleMessage is a MessageField
			"SupplierContact_ST"

		DerivedRole is a DerivedField
			type is Alpha size 30
			if (PrimaryContact)
				return PrimaryContactRoleMessage
			else
				return ContactRoleMessage

		DerivedSupplierSourceNameID is a StringField
			type is Alpha size 42
			default label is "SupplierSourceID"
			SupplierSourceId.MainContact.FirstAndLastName + " (" + SupplierSourceId + ")"

		DerivedTelephoneNumber is a StringField
			type is Alpha size 60
			default label is "TelephoneNumber"
			TelephoneNumber.InternationalPrefix + " " + TelephoneNumber.SubscriberNumber + " " + TelephoneNumber.Extension

		DerivedMobileNumber is a StringField
			type is Alpha size 60
			default label is "MobileNumber"
			MobilePhone.MobilePhoneNumber.InternationalPrefix + " " + MobilePhone.MobilePhoneNumber.SubscriberNumber + " " + MobilePhone.MobilePhoneNumber.Extension

		DerivedFaxNumber is a StringField
			type is Alpha size 60
			default label is "FaxNumber"
			FaxNumber.InternationalPrefix + " " + FaxNumber.SubscriberNumber + " " + FaxNumber.Extension

		IsPrimaryMesssage is a MessageField
			"Primary"

		ActiveMessage is a MessageField
			"Active"

		InactiveMessage is a MessageField
			"Inactive"

		SupplierActive is a DerivedField
			type is Alpha size 20
			if (Supplier.Active)
				return ActiveMessage
			else
				return InactiveMessage

		ActiveTag is a DerivedField
			type is Alpha size 20
			if (Active)
				return ActiveMessage
			else
				return InactiveMessage

		RegistrationTag is a MessageField
			"Registration<RegistrationStatus>"




		ConvertToLowerCase is a NativeField
			type is Alpha 250
			restricted

		LowerCaseEmailAddress is a DerivedField
			type is LoginName
			restricted
			LowerCaseEmailAddress = ConvertToLowerCase
			
		DerivedVerificationCodeRequired is a DerivedField
			type is Boolean
			default label is untranslatable
			if (Supplier.SupplierExtEntityEnabled)
				invoke GetExternalEntity ExternalUserExecutor
					resume on error
					assign result to JSONResponse
					invoked.EntityId = Supplier.SupplierExtEntityGUID
				TransientResponseStatus = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
					return JSONResponse select "$.response.externalentity.enableuserverification"
				else
					return false
			else
				return false

		DerivedContactRegisteredInIFS is a DerivedField
			type is Boolean
			default label is untranslatable
			if (Supplier.SupplierExtEntityEnabled)
				if (LoginName not entered)
					return false
				else
					if (LoginName = EmailAddress)
						return false
					else
						invoke GetUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId				= Supplier.SupplierExtEntityGUID
							invoked.UserIdentity			= LoginName 
						TransientResponseStatus = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
							return true
						else
							return false
			else
				return false

		DerivedVerificationCodeRequiredEmailChange is a DerivedField
         	type is Alpha 250
			default label is untranslatable

			initialize TransientStringHolderEmail
			
			if (TransientNewEmailAddress not entered)
				TransientStringHolderEmail = "New email address is required"
				return DerivedVerificationCodeRequiredEmailChange

			if (SupplierGroup.SupplierGroup.RequireEmailConfirmation)
				if (TransientConfirmNewEmailAddress not entered)
					TransientStringHolderEmail = "Confirm new email address is required"
					return DerivedVerificationCodeRequiredEmailChange
				if (TransientConfirmNewEmailAddress != TransientNewEmailAddress)
					TransientStringHolderEmail = "Confirm new email address does not match new email address"
					return DerivedVerificationCodeRequiredEmailChange

			if (TransientNewEmailAddress = EmailAddress)
				TransientStringHolderEmail = "New email address is the same as the current email address"
				return DerivedVerificationCodeRequiredEmailChange

			if (TransientEmailPassword not entered)
				TransientStringHolderEmail = "Password is required"
				return DerivedVerificationCodeRequiredEmailChange
				
			if (DerivedVerificationCodeRequired)
				if (TransientNewEmailAddress entered
				and TransientEmailPassword entered
				and !TransientUserUpdateInitiated)

					FieldToConvert				= TransientNewEmailAddress
					TransientNewEmailAddress	= LowerCaseEmailAddress		
					invoke UpdateUserIdentifier ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= Supplier.SupplierExtEntityGUID
						invoked.UserIdentity	= LoginName
						invoked.IdentifierId	= "PrimaryEmail"
						invoked.IdentifierValue	= TransientNewEmailAddress
						invoked.IsPrimary		= true
						invoked.Password		= TransientEmailPassword

					TransientResponseStatusEmail = JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatusEmail, "Success"))
						TransientUserUpdateInitiated		= true
						TransientSendVerificationCodeEmail	= true
						TransientNextActionEmail			= JSONResponse select "$.response.nextaction.action"
						TransientUserVerificationIdEmail	= JSONResponse select "$.response.nextaction.userverificationid"
						TransientUserIdentityEmail			= JSONResponse select "$.response.nextaction.useridentity"
					else
						TransientSingleJSONNodeEmail	= JSONResponse select "$.errorlist[0].code"
						TransientStringHolderEmail		= JSONResponse select "$.errorlist[0].languagetext"
			return DerivedVerificationCodeRequiredEmailChange

		DerivedResendVerificationCodeEmail is a DerivedField
         	type is Alpha 250
			default label is untranslatable
			if (TransientUserIdentityEmail entered
			and TransientUserVerificationIdEmail entered
			and !TransientVerificationCodeResentEmail)
				invoke ResendVerification ExternalUserExecutor
					resume on error
					assign result to JSONResponse
					invoked.EntityId			= Supplier.SupplierExtEntityGUID
					invoked.UserIdentity 		= TransientUserIdentityEmail
					invoked.VerificationId 		= TransientUserVerificationIdEmail

				TransientResponseStatusEmail = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatusEmail, "Success"))
					TransientResendVerificationCodeEmail	= true
					TransientVerificationCodeResentEmail	= true
				else
					TransientSingleJSONNodeEmail	= JSONResponse select "$.errorlist[0].code"
					TransientStringHolderEmail		= JSONResponse select "$.errorlist[0].languagetext"
			return DerivedResendVerificationCodeEmail

		
		DerivedContactCompleteRegistrationURL is a DerivedField
			type is RichText
			restricted
			return SupplierGroup.SupplyManagementSupplierBaseURL + "/SupplyManagementSupplier/form/Supplier.ExternalEntityRegistrationProfile?action=SupplierCreateImport&csk.SupplierGroup="+SupplierGroup+"&csk.Supplier="+Supplier+"&csk.SupplierSourceId="+SupplierSourceId

		DerivedClickHereText is a MessageField
			restricted
			"Click_Here"

		DerivedRegisterHereLink is a StringField
			type is RichText
			restricted
			"<a target='_blank' href='"+DerivedContactCompleteRegistrationURL+"'>" +DerivedClickHereText+"</a>"

		DerivedIdentity is a StringField
			type is Alpha 200
			"User:" + LoginName

		DerivedMFAEnabled is a DerivedField
			type is Boolean
			default label is untranslatable
			if (Supplier.SupplierExtEntityEnabled)
				invoke GetExternalEntity ExternalUserExecutor
					resume on error
					assign result to JSONResponse
					invoked.EntityId = Supplier.SupplierExtEntityGUID
				TransientResponseStatus = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
					TransientSingleJSONNode	= JSONResponse select "$.response.externalentity.mfaenable"
					TransientMFAEnforced = JSONResponse select "$.response.externalentity.mfaenforce"
					return JSONResponse select "$.response.externalentity.mfaenable"
				else
					return false
			else
				return false

		DerivedRegisteredMFADevices is a DerivedField
			type is RichText
			default label is untranslatable
			if (Supplier.SupplierExtEntityEnabled)
				if (Supplier.SupplierExtEntityGUID != blank)
					invoke GetRegisteredMFADeviceInfo ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= Supplier.SupplierExtEntityGUID
						invoked.UserIdentity	= LoginName

					LocalElementCounter		= 0
					TransientSingleJSONNode	= JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientSingleJSONNode, "Success"))
						TransientRawText = blank
						if (!com.lawson.apps.security.base.JSON_ActionBase.isArrayEmpty(JSONResponse, "mfaprovider"))
							TransientHasRegisteredDevice = true
							TransientSingleJSONNode = JSONResponse select "$..mfaprovider[*]"
							if (com.lawson.apps.security.base.Security_ActionBase.isNumeric(TransientSingleJSONNode))
								LocalArraySize = java.lang.Integer.parseInt(TransientSingleJSONNode)
							else
								LocalArraySize = 1
							while (LocalElementCounter < LocalArraySize)
								TransientSingleJSONNode = JSONResponse select "$..mfaprovider[<LocalElementCounter>].providerName"
								if (TransientSingleJSONNode = "EMAIL")
									TransientSingleJSONNode = JSONResponse select "$..mfaprovider[<LocalElementCounter>].identifiervalue"
								else
									TransientSingleJSONNode = JSONResponse select "$..mfaprovider[<LocalElementCounter>].deviceName"
								TransientDefaultDevice = JSONResponse select "$..mfaprovider[<LocalElementCounter>].isDefault"
								if (TransientDefaultDevice = "true")
									TransientSingleJSONNode = TransientSingleJSONNode + "<span style=\"color:#FFFFFF;display:inline-block;outline:none;border:1px solid transparent;padding:0px 10px;background-color:#0066D4 !important;font-size:14px;border-radius:20px;margin-left:10px\">" + DefaultMF + "</span>"
								TransientRawText += TransientSingleJSONNode + DerivedNewLineMF
								LocalElementCounter += 1
					else
						TransientRawText = RegisteredMFADevicesErrorMF
				else
					TransientRawText = MissingIdentityMF
			return TransientRawText

		DerivedNewLineMF is a DerivedField
			type is RichText
			restricted
			return "<br>"

		MissingIdentityMF is a MessageField
			restricted
			"MissingExternalEntityIdentityId"

		RegisteredMFADevicesErrorMF is a MessageField
			restricted
			"RegisteredMFADevicesCannotBeDisplayedAtThisTime"

		DefaultMF is a MessageField

			"Default"

		MFARequiredMF is a MessageField
			"Required_For_Your_Account"

		MFAAddDeviceMF is a MessageField
			"AddADeviceForVerification"

		MFASecureAccountMF is a MessageField
			"Secure_Your_Account"
			
		MFAAccountProtectedMF is a MessageField
			"Your_Account_Is_Protected"

		MFAVerificationCodeMF is a MessageField
			"VerificationCodesCanBeSentTo:"

		MFASecureAccountFullMF is a MessageField
			"SecureYourAccountByAddingADeviceForVerification"

		MFAAccountProtectedFullMF is a MessageField
			"YourAccountIsCurrentlyProtected._VerificationCodesCanBeSentTo:"

		MFADeviceRequiredMF is a MessageField
			"AMultifactorAuthenticationDeviceIsRequiredForYourAccount."



		SupplierBankName is a ConditionalField
			type is like BankName
			if (Supplier.BankInformationGroup.BankEntityExists)
				Supplier.BankInformationGroup.BankEntity.BankName
			else
				Supplier.BankInformationGroup.BankEntityName


	Conditions

		HasActor
			restricted
			when (actor.agent(SupplierSourceId).SupplierSourceId exists)

		SupplierCanUpdateInformation
			restricted
			when (HasActor
			and   IsPrimary
			and   Supplier.IsUpdatable)

		SupplierViewAnyVisitInformation
			restricted 
			when (SupplierViewVisitNumber                    
		    or    SupplierViewMedicalRecordNumber            
	    	or    SupplierViewCaseID                         
		    or    SupplierViewProcedure                     
		    or    SupplierViewPractitioner                   
		    or    SupplierViewNurseCoordinator)   

		SupplierViewAnyProcedureInformation 
			restricted 
			when  (ProcedureDetailsFromContact
			and   (SupplierViewAnyVisitInformation
			or     SupplierViewPatientName					   
			or     SupplierViewPatientBirthdate			   
			or     SupplierViewPatientGender				   
			or     SupplierViewSupplierOrderNumber            
			or     SupplierViewLotNumber                                
			or     SupplierViewSerialNumber                   
			or     SupplierViewUniqueDeviceId                 
			or     SupplierViewGTIN                           
			or     SupplierViewManufacturingDate              
			or     SupplierViewExpirationDate))
		
		ProcedureDetailsFromContact
			restricted 
			when (ShowProcedureDetails = "C")
		
		ProcedureDetailsFromSupplierGroup 
			restricted 
			when (ShowProcedureDetails = " ")
		
		AnonymizeLogAnonymizeRelExists
			restricted
			when (first AnonymizeLogAnonymizeRel exists)

		AnonymizeLogPurgeRelExists
			restricted
			when (first AnonymizeLogPurgeRel exists)

		HasSourcingEventLineResponsesForResponseHistory
			restricted
			when (SourcingEventLineResponsesForResponseHistoryRel exists)

		CanCreateContractOnCreate
			restricted
			when ((IsPrimary
			and    SupplierGroup.SupplierPrimaryTermsAccess)
			or    (!IsPrimary
			and    SupplierGroup.SupplierTermsAccess))

		HasContactRoles
			restricted
			when (HasLocalEventAccess
			or    HasLocalMetricsAccess
			or    HasLocalCMAccess
			or    HasLocalTermsAccess
			or    HasLocalSubcontractorAccess
			or    HasLocalOrdersAccess
			or    HasLocalReceiptsAccess
			or    HasLocalInvoicesAccess
			or    HasLocalPaymentsAccess
			or    HasLocalInvoiceAccess
			or    HasLocalItemsAccess
			or    HasLocalAcknowledgementCreateAccess
			or    HasLocalPerformanceAccess
			or    HasLocalMessagesAccess
			or    HasLocalRecallAccess
			or    HasLocalItemProposalAccess
			or    SupplierContactSOMAllRel exists)

		HasEventAccess
			restricted
			when (EventAccess = YesMessage)
		
		NoEventAccess
			restricted
			when (EventAccessFrom = blank)

		HasLocalEventAccess
			restricted
			when (EventAccessFrom = FromContactMessage)

		NoPlanHolderAccess
			restricted
			when (PlanHolderAccessFrom = blank)

		HasLocalPlanHolderAccess
			restricted
			when (PlanHolderAccessFrom = FromContactMessage)

		NoMetricsAccess
			restricted
			when (EventMetricsAccessFrom = blank)

		HasLocalMetricsAccess
			restricted
			when (EventMetricsAccessFrom = FromContactMessage)

		NoCMAccess
			restricted
			when (CMAccessFrom = blank)

		HasLocalCMAccess
			restricted
			when (CMAccessFrom = FromContactMessage)

		HasContractAccess
			restricted
			when (CMAccess = YesMessage) 

		NoTermsAccess
			restricted
			when (TermsAccessFrom = blank)

		HasLocalTermsAccess
			restricted
			when (TermsAccessFrom = FromContactMessage)

		NoSubcontractorAccess
			restricted
			when (SubcontractorAccessFrom = blank)

		HasLocalSubcontractorAccess
			restricted
			when (SubcontractorAccessFrom = FromContactMessage)

		NoOrdersAccess
			restricted
			when (OrdersAccessFrom = blank)

		HasLocalOrdersAccess
			restricted
			when (OrdersAccessFrom = FromContactMessage)

		HasOrdersAccess  
			restricted
			when (OrdersAccess = YesMessage)
			
		NoReceiptsAccess
			restricted
			when (ReceiptsAccessFrom = blank)

		HasLocalReceiptsAccess
			restricted
			when (ReceiptsAccessFrom = FromContactMessage)

		HasReceiptsAccess
			restricted
			when (ReceiptsAccess = YesMessage)
		
		NoInvoicesAccess
			restricted
			when (InvoicesAccessFrom = blank)

		HasLocalInvoicesAccess
			restricted
			when (InvoicesAccessFrom = FromContactMessage)

		NoPaymentsAccess
			restricted
			when (PaymentsAccessFrom = blank)

		HasLocalPaymentsAccess
			restricted
			when (PaymentsAccessFrom = FromContactMessage)

		HasPaymentAccess
			restricted
			when (PaymentsAccess = YesMessage)

		NoInvoiceAccess
			restricted
			when (InvoiceAccessFrom = blank)

		HasLocalInvoiceAccess
			restricted
			when (InvoiceAccessFrom = FromContactMessage)

		HasInvoiceAccess
			restricted
			when (InvoicesAccess = YesMessage)

		NoItemsAccess
			restricted
			when (ItemsAccessFrom = blank)

		HasLocalItemsAccess
			restricted
			when (ItemsAccessFrom = FromContactMessage)

		NoReturnsAccess
			restricted
			when (ReturnsAccessFrom = blank)

		HasLocalReturnsAccess
			restricted
			when (ReturnsAccessFrom = FromContactMessage)

		HasReturnsAccess
			restricted
			when (ReturnsAccess = YesMessage)
		
		NoAcknowledgementCreateAccess
			restricted
			when (AcknowledgementCreateAccessFrom = blank)

		HasLocalAcknowledgementCreateAccess
			restricted
			when (AcknowledgementCreateAccessFrom = FromContactMessage)

		HasAcknowledgementAccess
			restricted
			when (AcknowledgementCreateAccess = YesMessage)
		
		NoMessagesAccess
			restricted
			when (MessagesAccessFrom = blank)

		HasLocalMessagesAccess
			restricted
			when (MessagesAccessFrom = FromContactMessage)

		NoRequisitionAccess
			restricted
			when (RequisitionAccessFrom = blank)

		HasLocalRequisitionAccess
			restricted
			when (RequisitionAccessFrom = FromContactMessage)

		HasSomeRequisitionAccess
			restricted
			when ((PrimaryContact
			and    SupplierGroup.SupplierPrimaryRequisitionAccess)
			or    (IsNotPrimary
			and    SupplierGroup.SupplierRequisitionAccess)
			or     SupplierContactRequisitionRel exists)

		NoPerformanceAccess
			restricted
			when (PerformanceAccessFrom = blank)

		HasLocalPerformanceAccess
			restricted
			when (PerformanceAccessFrom = FromContactMessage)

		NoRecallAccess
			restricted
			when (RecallAccessFrom = blank)

		HasLocalRecallAccess
			restricted
			when (RecallAccessFrom = FromContactMessage)

		NoItemProposalAccess
			restricted
			when (ItemProposalAccessFrom = blank)

		HasLocalItemProposalAccess
			restricted
			when (ItemProposalAccessFrom = FromContactMessage)

		HasPicture
			restricted
			when (Picture.File entered)

		IsPrimary
			restricted
			when (PrimaryContact)

		IsNotPrimary 
			restricted 
			when (PrimaryContact = false)
		
		IsPrimaryNotConditional
			restricted
			when (PrimaryContact
			and   SupplierGroup.UseConditionalQuestions = false)

		IsPrimaryConditional
			restricted
			when (PrimaryContact
			and   SupplierGroup.UseConditionalQuestions)

		IsPrimaryAndPortalContact
			restricted
			when (IsPrimary
			and   PortalContact)

		RegistrationComplete
			restricted
			when (((SupplierGroup.RequireCommodityRegistration
			and     SupplierCommodityCode set exists)
			or		!SupplierGroup.RequireCommodityRegistration)
			and   ((IsPrimary
			and	   	Supplier.RequiredQuestionCountSameAsAnswerCount
			and		Supplier.RequiredAttachmentCountSameAsAnswerCount)
			or 	    !IsPrimary))

		MissingCommodityCode
			restricted
			when (SupplierGroup.RequireCommodityRegistration
			and  SupplierCommodityCode set !exists)

		MissingRequiredAnswers
			restricted
			when (IsPrimary
			and	 !Supplier.RequiredQuestionCountSameAsAnswerCount
			or	 !Supplier.RequiredAttachmentCountSameAsAnswerCount)

		PrimaryQuestionResponse
			restricted
			when (IsPrimary
			and   SupplierGroup.QuestionsExist)

		PrimaryDiversityResponse
			restricted
			when (IsPrimary
			and   SupplierGroup.AllowDiversitySelect)

		PrimaryQuestionResponsePortalContact
			restricted
			when (PrimaryQuestionResponse
			and   PortalContact)

		PrimaryDiversityResponsePortalContact
			restricted
			when (IsPrimary
			and   PortalContact)

		ContactExists
			restricted
			when (SupplierSourceId exists)

		CanDisplayBankInformation
			restricted
			when (SupplierGroup.AllowBankInformation
			and   ContactExists)

		CanViewAndDisplayBankInformation		
			restricted
			when (CanDisplayBankInformation)

		CanDisplayBankInformationPortalContact
			restricted
			when (CanDisplayBankInformation
			and   PortalContact)

		BankInformationAllowed
			restricted
			when (SupplierGroup.AllowBankInformation)

		CanDisplayBankInformationIsPrimary
			restricted
			when (SupplierGroup.AllowBankInformation
			and   ContactExists
			and   IsPrimary)

		CanDisplayBankInformationIsPrimaryPortalContact
			restricted
			when (CanDisplayBankInformationIsPrimary
			and   PortalContact)

		CanDisplayAllCertifications
			restricted
			when (IsPrimary)

		CanDisplayAllCertificationsPortalContact
			restricted
			when (CanDisplayAllCertifications
			and   PortalContact)

		CanDisplayMyCertificationsPortalContact
			restricted 
			when (PortalContact
			and  !IsPrimary)
		
		IsRequiredForUpdate
			restricted
			when (IsPrimary
			and	  !SupplierGroup.RequireUpdatedSupplierValidation)

		IsRequiredForCreate
			restricted
			when (IsPrimary
			and	  !SupplierGroup.RequireNewSupplierValidation)

		VendorLocationEntered
			restricted
			when (VendorLocation entered)

		VendorLocationNotEnteredAndVendorEntered
			restricted
			when  (!VendorLocationEntered
			and    LocationVendor entered)

		ContactLocationMismatch
			restricted
			when (VendorLocationEntered)

		PurchasingVendorExists
			restricted
			when (Supplier.PurchasingVendorRel exists)

		CertificationsExist
			restricted
			when (SupplierContactCertificationRel exists)

		ActiveCertificationsExist
			restricted
			when (ActiveSupplierContactCertRel exists)

		NewContactValid
			restricted
			when (Supplier.IsUpdatable
			and   actor.agent(SupplierSourceId).SupplierSourceId exists)

		PortalVendor
			restricted
 			when (SupplierGroup 	= actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	   		= actor.agent(SupplierSourceId).Supplier)

		PortalContact
			restricted
			when (SupplierGroup 	= actor.agent(SupplierSourceId).SupplierGroup
 			and   Supplier	   		= actor.agent(SupplierSourceId).Supplier
 			and	  SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId)

		CanChangeBillingAndMailingAddress
			restricted
			when (IsPrimary
			and	  Supplier.SameAsAddressAbove)

		CanChangeSeparateAddresses
			restricted
			when (IsPrimary
			and	  !Supplier.SameAsAddressAbove)

		BuyerEmailAddressExists
			restricted
			when (Supplier.Vendor.PurchasingVendor.Buyer.EmailAddress entered)

		EventsForContact
			restricted
			when (SupplierNotificationsRel exists)

		EventsForContactNotSupplier
			restricted
			when (SupplierNotificationsRel exists
			and   !HasActor)

		ContractsForContact
			restricted
			when (ContractsRel exists)

		ContractsForContactNotSupplier
			restricted
			when (ContractsRel exists
			and  !HasActor)

		ResponsesForContact
			restricted
			when (ResponseExists exists)

		ResponsesForContactNotSupplier
			restricted
			when (ResponseExists exists
			and  !HasActor)

		PrimaryContactLoggedIn
			restricted
			when (actor.agent(SupplierSourceId).SupplierSourceId.IsPrimary)

		PortalSupplierCanActivate
			restricted
			when (PrimaryContactLoggedIn
			and	  !Active
			and	  PortalInactiveSource.Supplier)

		PortalSupplierCanInactivate
			restricted
			when (PrimaryContactLoggedIn
			and	  Active
			and	  !IsPrimary)

		IsSupplierPortal
			restricted
			when (actor.agent(SupplierSourceId).SupplierSourceId entered)

		LocationAddressExists
			restricted
			when (LocationAddress entered)

		AllowBuyerToInactivateContact
			restricted
			when (Active
			and	  !IsSupplierPortal)

		AllowSupplierToInactivateContact
			restricted
			when (Active
			and	  IsSupplierPortal)

		MultipleSupplierPerformanceEvaluations
			restricted
			when (NumberOfSupplierPerformanceEvaluations > 1)

		GlnEntered
			restricted
			when (GlnNumberContact entered)
		GlnChanged
			restricted
			when (GlnNumberContact != old GlnNumberContact)
		VendorLocationChanged
			restricted
			when (VendorLocation != old VendorLocation)
		ExpiringContactCertifications
			restricted
			when (ExpiringContactCertificationsRel.ContactExpirationDateRedAlert
			or    ExpiringContactCertificationsRel.ContactExpirationDateYellowAlert)
		ExpiringContactCertificationsNew
			restricted
			when (ExpiringContactCertificationsRelNew.ContactExpirationDateRedAlert
			or    ExpiringContactCertificationsRelNew.ContactExpirationDateYellowAlert)
		EmailToSupplierContactsValid
			restricted
			when (ExpiringContactCertifications
			and	  ReceiveEmailNotification)
		CreationRequiredFieldsEntered
			restricted
			when (LoginName entered
			and	  Password entered
			and	  MainContact entered)

		IncompleteQuestions
			restricted
			when (!RegistrationComplete
			and IsPrimary
			and	!Supplier.RequiredQuestionCountSameAsAnswerCount)

		IncompleteQuestionAttachments
			restricted
			when (!RegistrationComplete
			and IsPrimary
			and	!Supplier.RequiredAttachmentCountSameAsAnswerCount)

		SomeRequiredQuestionsOrAttachmentsNotAnswered
			restricted
			when (IncompleteQuestions
			or    IncompleteQuestionAttachments)

		IncompleteCommodities
			restricted
			when (!RegistrationComplete
			and	SupplierGroup.RequireCommodityRegistration
			and	!SupplierCommodityCode set exists)

		CommodityCodesExist
			restricted
			when (SupplierCommodityCode set exists)

		ProxyExists
			restricted
			when (SupplierContactProxy set exists)

		AgentExists
			restricted
			when (AgentRel exists)

		InactiveAtSomeLevel
			restricted
			when (!Supplier.Active
			or    !Active)

		SupplierBankAccountEntered
			restricted
			when (Supplier.BankInformationGroup.BankAccountNumberEntered)

		SupplierCreditCardNumberEntered
			restricted
			when (Supplier.BankInformationGroup.CreditCardNumberEntered)

		UsesSupplierPortal
			restricted
			when (SupplierGroup.UseSupplierPortal)

		CanUpdateBankInformation
			restricted
			when ((SupplierGroupFromSupplierRel.AllowBankInformation
			or    SupplierGroup.AllowBankInformation)
			and   Supplier.IsUpdatable)

		CountryBankInformationExists
			restricted
			when (CountryBankInformationRel exists)

		DefaultCountryBankInformationExists
			restricted
			when (DefaultCountryBankInformationRel exists
			and   !CountryBankInformationExists)

		HasBankInformation
			restricted
			when (BankInformationGroup.BankInformationGroupEntered)

		NoCountryBankInformationExists
			restricted
			when (!CountryBankInformationExists
			and   !DefaultCountryBankInformationExists)

		CanEnterInvoices
			restricted
			when ((PrimaryContact
			and    SupplierGroup.SupplierPrimarySOMInvoiceCreateAccess)
			or   (!PrimaryContact
			and    SupplierGroup.SupplierSOMInvoiceCreateAccess)
			or     SupplierContactInvoiceCreateRel exists
			or     SupplierContactSOMAllRel exists)

		CanActivateContact
			restricted
			when (!Active
			and ((IsSupplierPortal
					and PortalInactiveSource = 2)
				or (!IsSupplierPortal
					and PortalInactiveSource = 1)))

		BypassRuleForTheseFiles
			restricted
			when (parentcontext.name	!= "SupplierContactMessage"
			or  parentcontext.name		!= "AnonymizeSupplierData"
			or  parentcontext.name		!= "PurgeAuditLogSupplierData"
			or  parentcontext.name		!= "SupplierSourceId")


		EmailAddressEntered
			restricted
			when (EmailAddress entered)

		TelephoneNumberEntered
			restricted
			when (TelephoneNumber entered)

		HasMobile
			restricted
			when (MobilePhone.MobilePhoneNumber.SubscriberNumber entered)

		CurrentUser
			restricted
			when (actor.agent(SupplierSourceId).SupplierSourceId = SupplierSourceId)

		CityStateZIPDisplayEntered	
			when(LocationAddress.Municipality entered
				or LocationAddress.StateProvince entered
				or LocationAddress.PostalCode entered)


		AutogeneratedActorIDExists
			restricted
			when (ActorByAutogeneratedActorId exists)

		DisplayForVerificationEmail
			restricted
			when (DerivedVerificationCodeRequired)

		ContactIsMe
			restricted
			when (SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup		
			and   SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId)	

		MFADeviceRequired
			when (DerivedMFAEnabled
			and   TransientMFAEnforced
			and   DerivedRegisteredMFADevices not entered)


		ValidToSendUsernameMismatchEmail
			restricted
			when (Active
			and   ExternalUserMigrationMismatch)


	Relations
		SourcingEventLineResponsesForResponseHistoryRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup = Supplier.SupplierGroup
				related.NotifiedSupplier.Supplier = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where  (related.SourcingEvent.Status.Closed)

		CountryBankInformationRel
			one-to-many relation to CountryBankInformation
			Field Mapping uses ByCountry
				related.Country          = LocalBankCountry

		DefaultCountryBankInformationRel
			one-to-many relation to CountryBankInformation
			Field Mapping uses ByCountry
				related.Country          = blank

		SupplierGroupFromSupplierRel
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
				related.SupplierGroup   = actor.agent(SupplierSourceId).SupplierGroup

		AnonymizeLogAnonymizeRel
			one-to-many relation to AnonymizeLog
			Field Mapping uses BySupplierSourceId
				related.FinanceEnterpriseGroup	= SupplierGroup.FinanceEnterpriseGroup
				related.SupplierGroup			= SupplierGroup
				related.Supplier				= Supplier
				related.SupplierSourceId        = SupplierSourceId
			Instance Selection
				where (related.Status.Anonymized)

		AnonymizeLogPurgeRel
			one-to-many relation to AnonymizeLog
			Field Mapping uses BySupplierSourceId
				related.FinanceEnterpriseGroup	= SupplierGroup.FinanceEnterpriseGroup
				related.SupplierGroup			= SupplierGroup
				related.Supplier				= Supplier
				related.SupplierSourceId        = SupplierSourceId
			Instance Selection
				where (related.Status.AuditLogPurged)

		UniqueSourcingEventLineResponsesForResponseHistoryRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup = Supplier.SupplierGroup
				related.NotifiedSupplier.Supplier = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where (not related.ResponseAmount.NoBid
				and    related.SourcingEvent.Status.Closed)

		UniqueSourcingEventLineResponsesAwardedForResponseHistoryRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup = Supplier.SupplierGroup
				related.NotifiedSupplier.Supplier = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where (not related.ResponseAmount.NoBid
				and    related.IsAwarded
				and    related.SourcingEvent.Status.Closed)

		SourcingEventResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses symbolic key
				related.NotifiedSupplier.SupplierGroup		= SupplierGroup
				related.NotifiedSupplier.Supplier			= Supplier
				related.NotifiedSupplier.SupplierSourceId	= SupplierSourceId
			Instance Selection
				where ((SupplyManagementReportContext.FromDate not entered
				or related.SourcingEvent.FinalizedDate	>= SupplyManagementReportContext.FromDate)
				and (SupplyManagementReportContext.ThruDate not entered
				or related.SourcingEvent.FinalizedDate <= SupplyManagementReportContext.ThruDate)
				and (related.SourcingEvent = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent not entered))

		UniqueSourcingEventLineResponsesWithDiversityForResponseHistoryRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup = Supplier.SupplierGroup
				related.NotifiedSupplier.Supplier = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where ((SupplyManagementReportContext.FromDate not entered
				or related.SourcingEvent.FinalizedDate	>= SupplyManagementReportContext.FromDate)
				and (SupplyManagementReportContext.ThruDate not entered
				or related.SourcingEvent.FinalizedDate <= SupplyManagementReportContext.ThruDate)
				and (related.SourcingEvent = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent not entered)
				and not related.ResponseAmount.NoBid
				and related.DiversityExist)

		UniqueSourcingEventLineResponsesAwardedWithDiversityForResponseHistoryRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup = Supplier.SupplierGroup
				related.NotifiedSupplier.Supplier = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where ((SupplyManagementReportContext.FromDate not entered
				or related.SourcingEvent.FinalizedDate	>= SupplyManagementReportContext.FromDate)
				and (SupplyManagementReportContext.ThruDate not entered
				or related.SourcingEvent.FinalizedDate <= SupplyManagementReportContext.ThruDate)
				and (related.SourcingEvent = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent not entered)
				and not related.ResponseAmount.NoBid
				and related.DiversityExist
				and related.IsAwarded)

		CommodityCodes
			one-to-many relation to CommodityCode
			Field Mapping uses symbolic key
				related.ItemGroup = SupplierGroup

		VendorLocRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup		= SupplierGroup
				related.Vendor			= Supplier.Vendor
				related.VendorLocation	= LocationRel

		PurchaseFromLocationRel
			one-to-one relation to PurchaseFromLocation
			Field Mapping uses symbolic key
				related.VendorGroup				= SupplierGroup
				related.Vendor					= Supplier.Vendor
				related.PurchaseFromLocation	= VendorLocation

		ProxyToBeNotified is a SupplierContactProxy set
			Instance Selection
				where (related.ReceiveEmailNotification)

		PayablesDiversityCodeRel
			one-to-many relation to PayablesDiversityCode
			Field Mapping uses symbolic key
				related.VendorGroup          = SupplierGroup

		ResponseExists
			one-to-many relation to SourcingEventResponse
			Field Mapping uses symbolic key
				related.NotifiedSupplier.SupplierGroup		= SupplierGroup
				related.NotifiedSupplier.Supplier			= Supplier
				related.NotifiedSupplier.SupplierSourceId	= SupplierSourceId

		SupplierCertificationRel is a SupplierCertification set

		SupplierContactCertificationRel is a SupplierCertification set
			Instance Selection
				where (related.SupplierSourceId !=0)

		ActiveSupplierContactCertRel
			one-to-many relation to SupplierCertification
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= Supplier
				related.SupplierSourceId 	= SupplierSourceId
			Instance Selection
				where (related.Active
				and    related.CommodityCode = blank)

		Certification is a VendorCertification set

		SupplierPerformanceEvaluationRel
			one-to-many relation to SupplierPerformanceEvaluation
			Field Mapping uses symbolic key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.IsEvaluationComplete)

		SupplierNotificationsRel
			one-to-many relation to SourcingEventNotification
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where (related.SourcingEvent.Status.Open
				or	   related.SourcingEvent.Status.Closed)

		ClosedSupplierNotificationsRel
			one-to-many relation to SourcingEventNotification
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where (related.SourcingEvent.Status.Closed)

		SupplierNotificationsExistRel
			one-to-one relation to SourcingEventNotification
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
				related.Company                           = LocalCompany
				related.SourcingEvent                     = LocalSourcingEvent

		SupplierPlanHolderExistRel
			one-to-one relation to SourcingEventPlanHolder
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
				related.Company                           = LocalCompany
				related.SourcingEvent                     = LocalSourcingEvent

		SupplierResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	  = SupplierGroup
				related.NotifiedSupplier.Supplier		  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where (related.SourcingEvent.Status.Open
				or	   related.SourcingEvent.Status.Closed)

		SupplierResponsesClosedRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	  = SupplierGroup
				related.NotifiedSupplier.Supplier		  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where (related.SourcingEvent.Status.Closed)

		ActualEventResponses
			one-to-many relation using SupplierResponsesRel
			Instance Selection
				where (related.SourcingEvent.Status.Closed
				and   !related.NoBid)

		NoBidEventResponses
			one-to-many relation using SupplierResponsesRel
			Instance Selection
				where (related.SourcingEvent.Status.Closed
				and    related.NoBid)

		SupplierLineResponsesRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where (related.SourcingEvent.Status.Open
				or	   related.SourcingEvent.Status.Closed)

		ActualEventLineResponses
			one-to-many relation using SupplierLineResponsesRel
			Instance Selection
				where (related.SourcingEvent.Status.Closed
				and    related.ResponseAmount entered
				and   !related.ResponseAmount.NoBid)

		NoBidEventLineResponses
			one-to-many relation using SupplierLineResponsesRel
			Instance Selection
				where (related.SourcingEvent.Status.Closed
				and    related.ResponseAmount.NoBid)

		AwardedPOEventLineResponses
			one-to-many relation using SupplierLineResponsesRel
			Instance Selection
				where (related.IsAwarded
				and    related.ResponseAmount entered
				and	   related.SourcingEvent.Status.Closed
				and    related.SourcingEventLine.OutputType.PO)

		AwardedCMEventLineResponses
			one-to-many relation using SupplierLineResponsesRel
			Instance Selection
				where (related.IsAwarded
				and    related.ResponseAmount entered
				and	   related.SourcingEvent.Status.Closed
				and    !related.SourcingEventLine.OutputType.PO)

		ActualEventLineAlternateResponses
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = Supplier
				related.NotifiedSupplier.SupplierSourceId = SupplierSourceId
			Instance Selection
				where  (related.SourcingEvent.Status.Closed
				and     related.AlternatesExist)

		AwardedPOEventLineAlternateResponses
			one-to-many relation using ActualEventLineAlternateResponses
			Instance Selection
				where (related.AltIsAwarded
				and	   related.SourcingEvent.Status.Closed
				and     related.SourcingEventLine.OutputType.PO)

		AwardedCMEventLineAlternateResponses
			one-to-many relation using ActualEventLineAlternateResponses
			Instance Selection
				where (related.AltIsAwarded
				and	   related.SourcingEvent.Status.Closed
				and    !related.SourcingEventLine.OutputType.PO)

		ContractsRel
			one-to-many relation to Contract
			Field Mapping uses BySupplierSourceId
				related.Supplier	   	  = Supplier
				related.SupplierSourceId  = SupplierSourceId

		CurrentVendorAddress
			one-to-many relation to VendorAddress
			Field Mapping uses symbolic key
				related.VendorGroup					= SupplierGroup
				related.Vendor 						= LocationVendor
				related.VendorLocation			 	= VendorLocation

		SupplierVendorMismatchContactRel
			one-to-one relation to SupplierVendorMismatch
			Field Mapping uses symbolic key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier

		GlobalLocationNumberRel
			one-to-many relation to GlobalLocationNumber
			Field Mapping uses symbolic key
				related.ItemGroup			 = SupplierGroup
				related.GlobalLocationNumber = GlnNumberContact

		ExpiringContactCertificationsRel is a SupplierCertification set
			Instance Selection
				where ((related.SupplierSourceId	= SupplierSourceId)
				and	  (related.ContactExpirationDateRedAlert
				or     related.ContactExpirationDateYellowAlert)
				and   (related.Active))

		ExpiringContactCertificationsRelNew 
			one-to-many relation to SupplierCertification 
			Field Mapping uses symbolic key 
				related.SupplierGroup 	  = SupplierGroup
				related.Supplier	   	  = Supplier
				related.SupplierSourceId = SupplierSourceId
			Instance Selection 
				where (related.Active
				and   (related.ContactExpirationDateRedAlert
				or     related.ContactExpirationDateYellowAlert))

		ExistingPrimaryContactRel
			one-to-many relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.PrimaryContact
				and    related.SupplierSourceId	!= SupplierSourceId)

		OtherContactsRel
			one-to-many relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.SupplierSourceId	!= SupplierSourceId)

		SupplierContactEventRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierEventAccess_ST"

		SupplierContactPlanHolderRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierPlanHolderAccess_ST"

		SupplierContactEventMetricsRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierEventMetricsAccess_ST"

		SupplierContactCMRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierCMAccess_ST"

		SupplierContactTermsRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierTermsAccess_ST"

		SupplierContactSubcontractorRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierSubcontractorAccess_ST"

		SupplierContactSOMAllRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtAllAccess_ST"

		SupplierContactOrdersRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtOrders_ST"

		SupplierContactReceiptsRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtReceipts_ST"

		SupplierContactReturnsRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtReturns_ST"

		SupplierContactInvoicesRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtInvoices_ST"

		SupplierContactPaymentsRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtPayments_ST"

		SupplierContactItemsRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtItems_ST"

		SupplierContactAcknowledgementCreateRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtAcknowledgements_ST"

		SupplierContactInvoiceCreateRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtInvoiceCreate_ST"

		SupplierContactRecallRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierRecallAccess_ST"

		SupplierContactItemProposalRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierItemProposalAccess_ST"

		SupplierContactMessagesRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierMessagesAccess_ST"

		SupplierContactRequisitionRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = LoginName 
				related.ActorRole.Role  = "SupplierRequisitions_ST"

		SupplierContactPerformanceRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = agent(Actor).Actor 
				related.ActorRole.Role  = "SupplierOrderMgmtPerformance_ST"

		SupplierPrimaryContactSTRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor 			= agent(Actor).Actor 
				related.ActorRole.Role	= "SupplierPrimaryContact_ST"

		SupplierContactSTRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor 			= agent(Actor).Actor 
				related.ActorRole.Role	= "SupplierContact_ST"

		ContactRolesRel
			one-to-many relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor           = LoginName

		SupplierGroupExtensionRel
			one-to-one relation to SupplierGroupExtension
			Field Mapping uses symbolic key
				related.SupplierGroup   = SupplierGroup

		ActorGroupMemberRel
			one-to-one relation to ActorGroupMember
			Field Mapping uses part of key
				related.ActorGroup      = SupplierGroup.SupplierInactivationActorGroup
				related.Actor           = agent(Actor).Actor 

		ParentAgentRel  
			one-to-one relation to ParentAgent
			Field Mapping uses ActorSet
				related.Actor           = LoginName

		ActorRel
	 		one-to-one relation to Actor
	 		Field Mapping uses symbolic key
	 			related.Actor				= agent(Actor).Actor 

		IdentityActorRel 
			one-to-one relation to IdentityActor
			Field Mapping uses symbolic key
				related.Service             = "SSOPV2"
				related.Identity            = "User:" + LoginName
				related.Actor               = LoginName

		IdentityRel   
			one-to-one relation to Identity
			Field Mapping uses symbolic key
				related.Service		= LocalService
				related.Identity	= LocalIdentity

		AgentRel
			one-to-many relation to Agent
			Field Mapping uses ByKeyText
				related.KeyText = SupplierGroup + ", " + Supplier + ", " + SupplierSourceId

		CustomLandingPageRel is a LandingPage set
			Instance Selection
				where (related.Actor       = agent(Actor).Actor 
				and    related.Description = "InactiveSuppliers")


		ActorByAutogeneratedActorId
			one-to-many relation to Actor
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Actor like TransientAutogeneratedActorId)

		SupplierSourceIdEmailExistsRel
			one-to-many relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
			Instance Selection
				where ((related.EmailAddress					= LocalEmailAddress
				or      related.ConvertedLowerCaseEmailAddress	= LocalEmailAddress)
				and    (related.UniqueID					   != UniqueID))

		MigrationExternalUserRel  
			one-to-one relation to SupplierSourceId
			Field Mapping uses ByEmailAddress
				related.EmailAddress	= LocalExternalUserEmail
				related.LoginName		= LocalExternalUserActorId

		SupplierContactPreMigrationIssuesAllRel
			one-to-many relation to SupplierContactPreMigrationIssues
			Field Mapping uses symbolic key

		SupplierContactPreMigrationIssuesSummaryRel
			one-to-one relation to SupplierContactPreMigrationIssues
			Field Mapping uses symbolic key
				related.SupplierContactPreMigrationIssues.RecordType	= 1 
				related.SupplierContactPreMigrationIssues.Sequence		= 1

		EEMigrationActorRel
	 		one-to-one relation to Actor
	 		Field Mapping uses symbolic key
	 			related.Actor				= LoginName  

		EEMigrationDuplicateEmailRel
			one-to-many relation to SupplierSourceId
			Field Mapping uses ByEEMigrationEmailAddress
				related.ConvertedLowerCaseEmailAddress = ConvertedLowerCaseEmailAddress
			Instance Selection
				where (related.UniqueID	!= UniqueID)

		MFAIdentityRel
			one-to-one relation to Identity
			Field Mapping uses symbolic key
				related.Service		= Supplier.SupplyManagementSupplierService  //use "SSOPV2" for sandbox testing
				related.Identity	= DerivedIdentity  //"User:" + LoginName


	Sets
		IsPrimaryContact
			indexed
			Sort Order
				SupplierGroup
				Supplier
			Instance Selection
				where (PrimaryContact)

		ByEmailAddress  
			Sort Order
				EmailAddress
				LoginName  

		ByEEMigrationEmailAddress
			indexed
			duplicates
			Sort Order
				ConvertedLowerCaseEmailAddress
				SupplierGroup
				Supplier
				SupplierSourceId

	Field Rules
		LocationName
			if (VendorLocation entered)
				force default to VendorLocation.VendorName
			else
				default to Supplier.SupplierName

		LocationAddress
			default to Supplier.MailingAddress

		ReceiveEmailNotification
			default to true

		LoginName
			if (!Supplier.SupplierExtEntityEnabled)
				if (Password entered)
					required
						"UserNameIsRequired"
				cannot be changed
		Password
			if (!Supplier.SupplierExtEntityEnabled)
				if (LoginName entered)
					required
						"PasswordIsRequired"
				cannot be changed
		ConfirmPassword
			if (!Supplier.SupplierExtEntityEnabled)
				constraint (Password = ConfirmPassword)
					"ConfirmPasswordDoesNotMatchPassword"
				if (Password entered)
					required
						"ConfirmPasswordIsRequired"
				cannot be changed

		EmailAddress
			FieldToConvert	= EmailAddress
			EmailAddress	= LowerCaseEmailAddress
			if (SupplierGroup.RequireEmailConfirmation
			and !Supplier.SupplierExtEntityEnabled)
				FieldToConvert		= ConfirmEmailAddress
				ConfirmEmailAddress	= LowerCaseEmailAddress

				constraint (EmailAddress = ConfirmEmailAddress)
					"ConfirmEmailAddressDoesNotMatchEmailAddress"

		DefaultRequestingLocation
			constraint (DefaultRequestingLocation.HasFromCompanyAndLocation)
				"DefaultRequestingLocationMustHaveAFromCompanyAndLocation"

	Attach Rules
		constraint (Active
		or 			BypassRuleForTheseFiles)
				"SupplierContactIsInactive"

	Rule Blocks
		CreateValidationEmail
			send email
				to SupplierGroup.NotificationEmailAddress
				from SupplierGroup.AdminEmailAddress
				subject "<SupplierGroupExtensionRel.FinalNewValidationEmailSubject>"
				Contents
					"<SupplierGroupExtensionRel.FinalNewValidationEmailContent>"
					"<current timestamp>"

		UpdateValidationEmail
			send email
				to SupplierGroup.NotificationEmailAddress
				from SupplierGroup.AdminEmailAddress
				subject "<SupplierGroupExtensionRel.FinalUpdatedValidationEmailSubject>"
				Contents
					"<SupplierGroupExtensionRel.FinalUpdatedValidationEmailContent>"
					"SupplierInformationWasModifiedOn<update stamp>"

    	ValidateBankAccount

			initialize ValidateBankAccountNumber
			ValidateBankAccountNumber.BankAccountValidationType = DerivedBankAccountValidationType
			ValidateBankAccountNumber.BankAccountNumber 		= LocalBankAccountNumber
			constraint (ValidateBankAccountNumber.IsValidBankAccount)
				"<ValidateBankAccountNumber.ErrorMessage>ForAccount<LocalBankAccountNumber>"

		UpdateRules
			if (BankInformationGroup.Country entered
			and BankInformationGroup.BankAccountNumber entered)
				LocalBankCountry       = BankInformationGroup.Country
				LocalBankAccountNumber = BankInformationGroup.BankAccountNumber
				include ValidateBankAccount

			if  ((CompareFields changed
			or    BankInformationGroup changed)
			and   SupplierGroup.AutoCompare
			and   Supplier.Vendor entered
			and  (PrimaryContact
			or    VendorLocation entered))
				invoke CompareSupplierAndVendor Supplier
					invoked.ParmSupplierGroup	= SupplierGroup
					invoked.ParmSupplier        = Supplier
					invoked.CompareSupplier	    = true
					invoked.CompareContacts     = true

		UpdateExitRules
			if (BankInformationGroup.BankEntity entered
			and !BankInformationGroup.DisplayBankEntity)
				initialize BankInformationGroup.BankEntity
			if (BankInformationGroup.BankAccountNumber entered
			and !BankInformationGroup.DisplayBankAccountNumber)
				initialize BankInformationGroup.BankAccountNumber
			if (BankInformationGroup.BankAccountType entered
			and !BankInformationGroup.DisplayBankAccountType)
				initialize BankInformationGroup.BankAccountType
			if (BankInformationGroup.BankCurrency entered
			and !BankInformationGroup.DisplayBankCurrency)
				initialize BankInformationGroup.BankCurrency
			if (BankInformationGroup.CrossBorderIdentifier entered
			and !BankInformationGroup.DisplayCrossBorderIdentifier)
				initialize BankInformationGroup.CrossBorderIdentifier
			if (BankInformationGroup.SwiftID entered
			and !BankInformationGroup.DisplaySwiftID)
				initialize BankInformationGroup.SwiftID
			if (BankInformationGroup.BankingCode entered
			and !BankInformationGroup.DisplayBankingCode)
				initialize BankInformationGroup.BankingCode
			if (BankInformationGroup.BankID entered
			and !BankInformationGroup.DisplayBankID)
				initialize BankInformationGroup.BankID
			if (BankInformationGroup.AssignmentNumber entered
			and !BankInformationGroup.DisplayAssignmentNumber)
				initialize BankInformationGroup.AssignmentNumber
			if (BankInformationGroup.GiroNumber entered
			and !BankInformationGroup.DisplayGiroNumber)
				initialize BankInformationGroup.GiroNumber
			if (BankInformationGroup.BACSReference entered
			and !BankInformationGroup.DisplayBACSReference)
				initialize BankInformationGroup.BACSReference
			if (BankInformationGroup.CreditCardNumber entered
			and !BankInformationGroup.DisplayCreditCardNumber)
				initialize BankInformationGroup.CreditCardNumber
			if (BankInformationGroup.BACSName entered
			and !BankInformationGroup.DisplayBACSName)
				initialize BankInformationGroup.BACSName


 	Create Rules

    	if (LocationAddress.Country entered)
    		BankInformationGroup.Country = LocationAddress.Country
    	else
    		BankInformationGroup.Country = Supplier.BillingAddress.Country

	Create Exit Rules
		
		if (PrimaryContact)
			invoke ContactSearchUpdate Supplier

 	Actions

		GiveEventAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierEventAccess_ST"

		RemoveEventAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactEventRel

		GivePlanHolderAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierPlanHolderAccess_ST"

		RemovePlanHolderAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactPlanHolderRel

		GiveMetricsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierEventMetricsAccess_ST"

		RemoveMetricsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactEventMetricsRel

		GiveCMAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierCMAccess_ST"

		RemoveCMAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactCMRel

		GiveTermsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierTermsAccess_ST"

		RemoveTermsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactTermsRel

		GiveSubcontractorAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierSubcontractorAccess_ST"

		RemoveSubcontractorAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactSubcontractorRel

		GiveOrdersAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtOrders_ST"

		RemoveOrdersAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactOrdersRel

		GiveReceiptsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtReceipts_ST"

		RemoveReceiptsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactReceiptsRel

		GiveInvoicesAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtInvoices_ST"

		RemoveReturnsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactReturnsRel

		GiveReturnsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtReturns_ST"

		RemoveInvoicesAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactInvoicesRel

		GivePaymentsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtPayments_ST"

		RemovePaymentsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactPaymentsRel

		GiveInvoiceCreateAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtInvoiceCreate_ST"

		RemoveInvoiceCreateAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactInvoiceCreateRel

		GiveItemsAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtItems_ST"

		RemoveItemsAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactItemsRel

		GiveAcknowledgementCreateAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtAcknowledgements_ST"

		RemoveAcknowledgementCreateAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactAcknowledgementCreateRel

		GiveRequisitionAccess is an Instance Action
			restricted
			Action Rules
				constraint (Supplier.Vendor entered)
					"SupplierMustBeAssociatedWithAVendorToGiveAccessToRequisitions"
				
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierRequisitions_ST"

		RemoveRequisitionAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactRequisitionRel

		GiveMessagesAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierMessagesAccess_ST"

		RemoveMessagesAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactMessagesRel

		GivePerformanceAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierOrderMgmtPerformance_ST"

		RemovePerformanceAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactPerformanceRel

		GiveRecallAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierRecallAccess_ST"

		RemoveRecallAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactRecallRel

		GiveItemProposalAccess is an Instance Action
			restricted
			Action Rules
				invoke Create ActorRole
					invoked.Actor          = agent(Actor).Actor 
					invoked.ActorRole.Role = "SupplierItemProposalAccess_ST"

		RemoveItemProposalAccess is an Instance Action
			restricted
			Action Rules
				invoke Delete SupplierContactItemProposalRel

		ForgotUserName is a Set Action
			completion message is "YourUserIDInformationWillBeSentIfAValidEmailAddressIsFound"
			restricted
			run in foreground
			allow anonymous access
			Parameters
				ParameterEmailAddress 			is an EmailAddress 
					holds pii
				ParameterConfirmEmailAddress	is an EmailAddress 
					holds pii

			Parameter Rules
				ParameterEmailAddress
					required
						"EmailAddressIsRequired"
					FieldToConvert			= ParameterEmailAddress
					ParameterEmailAddress	= LowerCaseEmailAddress

				ParameterConfirmEmailAddress
					required
						"ConfirmEmailAddressIsRequired"
					FieldToConvert					= ParameterConfirmEmailAddress
					ParameterConfirmEmailAddress	= LowerCaseEmailAddress
					constraint (ParameterEmailAddress = ParameterConfirmEmailAddress)
						"ConfirmEmailAddressDoesNotMatchEmailAddress"

			Sort Order
				EmailAddress
				SupplierGroup
				Supplier
				SupplierSourceId

			Action Rules
				Instance Rules

					if (EmailAddress = ParameterEmailAddress)
					
						send email
							to ParameterEmailAddress
							from SupplierGroup.AdminEmailAddress
							subject "<SupplierGroupExtensionRel.ForgotUsernameEmailSubject>"
							Contents
								"<SupplierGroupExtensionRel.ForgotUsernameEmailContent>"
								"<LoginName>"

		Create is a Create Action 
			allow anonymous access
				
			Field Rules
				LoginName
					if (true)
						if (!Supplier.SupplierExtEntityEnabled)
							required
								"UserNameIsRequired"
				Password

					if	(!Supplier.CreatedByBuyer)
						required
							"PasswordIsRequired"
				MainContact
					if (true)
						required

				TelephoneNumber
					if (true)
						required
							"TelephoneNumberIsRequired"

			Action Rules
				if (CreationRequiredFieldsEntered)
					constraint (EmailAddress entered)
						"EmailAddressIsRequired"
				Active = true
				PrimaryContact = true

				if (Supplier.SupplierExtEntityEnabled)
					if (!TransientUserRegistered)
						FieldToConvert	= EmailAddress
						EmailAddress	= LowerCaseEmailAddress
						if (SupplierGroup.RequireEmailConfirmation)		
							FieldToConvert		= ConfirmEmailAddress
							ConfirmEmailAddress	= LowerCaseEmailAddress
							constraint (EmailAddress = ConfirmEmailAddress)
								"ConfirmEmailAddressDoesNotMatchEmailAddress"
						if (!Supplier.CreatedByBuyer)   
							invoke RegisterUser ExternalUserExecutor
								resume on error
								assign result to JSONResponse
								invoked.EntityId				= Supplier.SupplierExtEntityGUID
								invoked.IdentifierId 			= "PrimaryEmail"
								invoked.IdentifierValue 		= EmailAddress
								invoked.Password 				= Password 
								invoked.EnableUserVerification	= false
								invoked.FirstName				= MainContact.GivenName
								invoked.LastName				= MainContact.FamilyName


							TransientResponseStatus = JSONResponse select "$.responsestatus"
							if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
								TransientSingleJSONNode = JSONResponse select "$.response.user.userIdentity"
		
								LoginName = TransientSingleJSONNode
		
								invoke QuickUpdate Supplier
									invoked.LoginName			= TransientSingleJSONNode
									invoked.ContactIsRegistered	= true
									initialize invoked.RegistrationPassword
									initialize invoked.RegistrationConfirmPassword
							else
								TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
								TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
								constraint (false)
									"<TransientStringHolder>"
						else
							LocalEmailAddress = EmailAddress
							constraint (!SupplierSourceIdEmailExistsRel exists)
								"EmailAddressAlreadyExistsAsAContactInTheSystem"
					else
						if (TransientVerificationCode entered
						and !TransientUserVerified)
							invoke VerifyUser ExternalUserExecutor
								resume on error
								assign result to JSONResponse
								invoked.EntityId			= Supplier.SupplierExtEntityGUID
								invoked.UserIdentity		= TransientUserIdentity
								invoked.VerificationId		= TransientUserVerificationId
								invoked.VerificationCode	= TransientVerificationCode
							TransientResponseStatus = JSONResponse select "$.responsestatus"
							if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
								TransientUserVerified	= true
								TransientSingleJSONNode = TransientUserIdentity
								LoginName				= TransientUserIdentity
	
								invoke QuickUpdate Supplier
									invoked.LoginName				= TransientSingleJSONNode
									invoked.ContactIsRegistered		= true
									invoked.TransientUserVerified	= TransientUserVerified
									initialize invoked.RegistrationPassword
									initialize invoked.RegistrationConfirmPassword
							else
								TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
								TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
								constraint (false)
									"<TransientStringHolder>"
											
			Exit Rules
				if (!Supplier.SupplierExtEntityEnabled)
					if (EmailAddress entered
					and	ReceiveEmailNotification)
						if (!Supplier.CreatedByBuyer
						or (Supplier.CreatedByBuyer
						and SupplierGroup.SendForBuyerCreatedSupplier))
							send email
								to EmailAddress
								from SupplierGroup.AdminEmailAddress
								subject "<SupplierGroupExtensionRel.FinalRegistrationEmailSubject>"
								Contents
									"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
									"<LoginName>"

				if (Supplier.SupplierExtEntityEnabled)
					if (Supplier.CreatedByBuyer)
						send email
							to EmailAddress
							from SupplierGroup.AdminEmailAddress
							subject "Complete_Your_Registration"
							Contents
								"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
								"_"
								"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
								"_"
								"<DerivedRegisterHereLink>"
					else
						if (ReceiveEmailNotification)
							send email
								to EmailAddress
								from SupplierGroup.AdminEmailAddress
								subject "<SupplierGroupExtensionRel.FinalRegistrationEmailSubject>"
								Contents
									"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
									"<EmailAddress>"

				LocalContactInfo.EmailAddress    = EmailAddress
				LocalContactInfo.TelephoneNumber = TelephoneNumber
				LocalContactInfo.MobilePhone     = MobilePhone

				if (Supplier.SupplierExtEntityEnabled)
					
					TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()
					while (AutogeneratedActorIDExists)
						TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()

					if	(!Supplier.CreatedByBuyer)
						register new actor
							login name is TransientAutogeneratedActorId
							password is Password
							webapp is SupplyManagementSupplier
							role is "SupplierPrimaryContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is true
							user identity is TransientSingleJSONNode

					else
						register new actor
							login name is TransientAutogeneratedActorId
							webapp is SupplyManagementSupplier
							role is "SupplierPrimaryContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is false
				else
					constraint (LoginName != actor)
						"UserNameCannotBeSameAsLoggedInActor"
					register new actor
						login name is LoginName
						password is Password
						webapp is SupplyManagementSupplier
						person name is MainContact
						role is "SupplierPrimaryContact_ST"

				invoke Update agent(Actor).Actor
					invoked.PersonName					= MainContact
					invoked.ContactInfo.EmailAddress	= EmailAddress
					invoked.ContactInfo.TelephoneNumber	= TelephoneNumber
					invoked.ContactInfo.MobilePhone		= MobilePhone
				if (SupplierGroup.RequireNewSupplierValidation)
					include CreateValidationEmail

   		T2VCreate is a Create Action				
			restricted 
			default label is untranslatable 
			bypass field rules 
			
		CreateFromMigration is a Create Action 
			restricted
			Action Rules
				Active = true
				PrimaryContact = true

			Exit Rules

				LocalContactInfo.EmailAddress    = EmailAddress
				LocalContactInfo.TelephoneNumber = TelephoneNumber
				LocalContactInfo.MobilePhone     = MobilePhone

				if (Supplier.SupplierExtEntityEnabled)  
					TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()
					while (AutogeneratedActorIDExists)
						TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()

					register new actor
						login name is TransientAutogeneratedActorId
						password is Password
						webapp is SupplyManagementSupplier
						role is "SupplierPrimaryContact_ST"
						person name is MainContact
						contact info is LocalContactInfo
						self register is true
						user identity is LoginName

					invoke Update agent(Actor).Actor
						invoked.PersonName					= MainContact
						invoked.ContactInfo.EmailAddress	= EmailAddress
						invoked.ContactInfo.TelephoneNumber	= TelephoneNumber
						invoked.ContactInfo.MobilePhone		= MobilePhone
				else
					register new actor
						login name is LoginName
						password is Password
						webapp is SupplyManagementSupplier
						person name is MainContact
						role is "SupplierPrimaryContact_ST"

					invoke Update agent(Actor).Actor
						invoked.PersonName					= MainContact
						invoked.ContactInfo.EmailAddress	= EmailAddress
						invoked.ContactInfo.TelephoneNumber	= TelephoneNumber
						invoked.ContactInfo.MobilePhone		= MobilePhone

   		NewContact is a Create Action 
			default label is "CreateContact"
			valid when (NewContactValid)

			Field Rules
				LoginName
					if (true)
						if (!Supplier.SupplierExtEntityEnabled)
							required
								"UserNameIsRequired"
				Password
					if (true)
						if (!Supplier.SupplierExtEntityEnabled)
							required
								"PasswordIsRequired"
				MainContact
					if (true)
						required

				EmailAddress
					required
						"EmailAddressIsRequired"

					if (Supplier.SupplierExtEntityEnabled)
						FieldToConvert	= EmailAddress
						EmailAddress	= LowerCaseEmailAddress		

						LocalEmailAddress = EmailAddress
						constraint (!SupplierSourceIdEmailExistsRel exists)
							"EmailAddressAlreadyExistsAsAContactInTheSystem"

						if (SupplierGroup.RequireEmailConfirmation)		
							FieldToConvert		= ConfirmEmailAddress
							ConfirmEmailAddress	= LowerCaseEmailAddress
							constraint (EmailAddress = ConfirmEmailAddress)
								"ConfirmEmailAddressDoesNotMatchEmailAddress"

				TelephoneNumber
					required
						"PhoneNumberIsRequired"

			Action Rules

				Active = true

			Exit Rules
				if (!Supplier.SupplierExtEntityEnabled)
					if (EmailAddress entered
					and	ReceiveEmailNotification)
						send email
							to EmailAddress
							from SupplierGroup.AdminEmailAddress
							subject "<SupplierGroupExtensionRel.FinalRegistrationEmailSubject>"
							Contents
								"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
								"<LoginName>"

				if (Supplier.SupplierExtEntityEnabled)

					send email
						to EmailAddress
						from SupplierGroup.AdminEmailAddress
						subject "Complete_Your_Registration"
						Contents
							"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
							"_"
							"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
							"_"
							"<DerivedRegisterHereLink>"

					LocalContactInfo.EmailAddress    = EmailAddress
					LocalContactInfo.TelephoneNumber = TelephoneNumber
					LocalContactInfo.MobilePhone     = MobilePhone

					TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()
					while (AutogeneratedActorIDExists)
						TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()

					register new actor
						login name is TransientAutogeneratedActorId
						webapp is SupplyManagementSupplier
						role is "SupplierContact_ST"
						person name is MainContact
						contact info is LocalContactInfo
						self register is false
				else
					constraint (LoginName != actor)
						"UserNameCannotBeSameAsLoggedInActor"
					if (LoginName entered)
						register new actor
							login name is LoginName
							password is Password
							webapp is SupplyManagementSupplier
							person name is MainContact
							role is "SupplierContact_ST"

			   	invoke Update agent(Actor).Actor
					invoked.PersonName					= MainContact
					invoked.ContactInfo.EmailAddress	= EmailAddress
					invoked.ContactInfo.TelephoneNumber = TelephoneNumber
					invoked.ContactInfo.MobilePhone		= MobilePhone

				if (SupplierGroup.RequireUpdatedSupplierValidation
				and	Supplier.SupplierStatus.Validated)
					invoke StatusUpdate Supplier

					include CreateValidationEmail

	  	BuyerCreateContacts is a Create Action 
			default label is "CreateContact"
			valid when (Supplier.IsUpdatable)
			Field Rules
				MainContact
					required

				LoginName
					if (true)
						if (!Supplier.SupplierExtEntityEnabled)
							required
								"UserNameIsRequired"
				Password

					if (!Supplier.SupplierExtEntityEnabled)
						required
							"PasswordIsRequired"

			Action Rules
				constraint (TelephoneNumber entered)
					"PhoneNumberIsRequired"
				constraint (EmailAddress entered)
					"EmailAddressIsRequired"

				if (Supplier.SupplierExtEntityEnabled)
					FieldToConvert	= EmailAddress
					EmailAddress	= LowerCaseEmailAddress		

					LocalEmailAddress = EmailAddress
					constraint (!SupplierSourceIdEmailExistsRel exists)
						"EmailAddressAlreadyExistsAsAContactInTheSystem"

					if (SupplierGroup.RequireEmailConfirmation)		
						FieldToConvert		= ConfirmEmailAddress
						ConfirmEmailAddress	= LowerCaseEmailAddress
						constraint (EmailAddress = ConfirmEmailAddress)
							"ConfirmEmailAddressDoesNotMatchEmailAddress"

				if (PrimaryContact
				and ExistingPrimaryContactRel exists)
					confirmation required
						"Warning:TheExistingPrimaryContactOf<first ExistingPrimaryContactRel.MainContact.FirstAndLastName>WillChangeToNoLongerBeThePrimaryContact;DoYouWantToContinue?"
					invoke UpdatePrimaryContact ExistingPrimaryContactRel
						invoked.PrimaryContact	= false

				if (Supplier.ContactLocationDisplay > 0
				and VendorLocation !entered)
					confirmation required
						"ThisSupplierOnlyAllowsContactsToViewDocumentsForTheirVendorLocation;PleaseAttachAVendorLocationAfterContactIsCreated"

				Active = true

			Exit Rules
				if (Supplier.SupplierExtEntityEnabled)

					LocalContactInfo.EmailAddress		= EmailAddress
					LocalContactInfo.TelephoneNumber	= TelephoneNumber
					LocalContactInfo.MobilePhone		= MobilePhone

					TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()
					while (AutogeneratedActorIDExists)
						TransientAutogeneratedActorId = com.lawson.apps.person.extensions.Actor_ActionBase.generateActorId()

					if (PrimaryContact)
						register new actor
							login name is TransientAutogeneratedActorId
							webapp is SupplyManagementSupplier
							role is "SupplierPrimaryContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is false
					else
						register new actor
							login name is TransientAutogeneratedActorId
							webapp is SupplyManagementSupplier
							role is "SupplierContact_ST"
							person name is MainContact
							contact info is LocalContactInfo
							self register is false
				else
					if (LoginName entered)
						constraint (LoginName != actor)
							"UserNameCannotBeSameAsLoggedInActor"
						if (PrimaryContact)
							register new actor
								login name is LoginName
								password is Password
								webapp is SupplyManagementSupplier
								person name is MainContact
								role is "SupplierPrimaryContact_ST"
						else
							register new actor
								login name is LoginName
								password is Password
								webapp is SupplyManagementSupplier
								person name is MainContact
								role is "SupplierContact_ST"

						invoke Update agent(Actor).Actor
							invoked.PersonName					= MainContact
							invoked.ContactInfo.EmailAddress	= EmailAddress
							invoked.ContactInfo.TelephoneNumber	= TelephoneNumber
							invoked.ContactInfo.MobilePhone		= MobilePhone

				if (SupplierGroup.RequireUpdatedSupplierValidation
				and	Supplier.SupplierStatus.Validated)
					invoke StatusUpdate Supplier

					include CreateValidationEmail

				if (!Supplier.SupplierExtEntityEnabled)
					if (EmailAddress entered
					and	ReceiveEmailNotification)
						if (!Supplier.CreatedByBuyer
						or (Supplier.CreatedByBuyer
						and SupplierGroup.SendForBuyerCreatedSupplier))
							send email
								to EmailAddress
								from SupplierGroup.AdminEmailAddress
								subject "<SupplierGroupExtensionRel.FinalRegistrationEmailSubject>"
								Contents
									"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
									"<LoginName>"

				if (Supplier.SupplierExtEntityEnabled)
					send email
						to EmailAddress
						from SupplierGroup.AdminEmailAddress
						subject "Complete_Your_Registration"
						Contents
							"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
							"_"
							"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
							"_"
							"<DerivedRegisterHereLink>"

		CreateVendorLocation is an Instance Action
			valid when (VendorLocationNotEnteredAndVendorEntered)
	  		Parameters
	  			Location		        is AlphaUpper size 4
	  			CreatePoLocation	    is Boolean
	  			TransferCertifications  is Boolean

	  		Parameter Rules
  				Location
  					LocationRel = Location
  					constraint (!VendorLocRel exists)
  						"VendorLocationAlreadyExists"
  					required
			Local Fields
				Vendor

			Action Rules
				constraint (Supplier.Vendor exists)
					"VendorMustBeAssociatedToSupplierToCreateALocation"
				constraint (Supplier.Vendor.VendorStatus.Active)
					"CannotCreateVendorLocation;VendorIsInactive"
				constraint (RegistrationComplete)
  					"CannotCreateVendorLocationUntilRegistrationStatusIsComplete"
  				constraint (Supplier.SupplierStatus.Validated)
  					"CannotCreateVendorLocationUntilSupplier<Supplier>IsValidated"
  				constraint (LocationAddress.DeliveryAddress.AddressLine1 entered)
  					"AddressLine1IsRequired"
				if (GlnNumberContact entered)
					if (GlobalLocationNumberRel exists)
						constraint (first GlobalLocationNumberRel.Active)
							"GlobalLocationNumber<first GlobalLocationNumberRel.GlobalLocationNumber>MustBeActive"
				invoke Create VendorLocation
					invoked.VendorGroup					= SupplierGroup
					invoked.Vendor						= Supplier.Vendor
					invoked.VendorLocation				= Location
					invoked.VendorName					= LocationName
					invoked.ContactName					= MainContact.FirstAndLastName
					invoked.PhoneNumber					= TelephoneNumber
					invoked.FaxNumber					= FaxNumber
					invoked.EmailAddress				= EmailAddress
					invoked.VendorAddress               = LocationAddress
					invoked.BankAccountType     		= BankInformationGroup.BankAccountType
					invoked.BankEntity          		= BankInformationGroup.BankEntity
					invoked.BankAccountNumber   		= BankInformationGroup.BankAccountNumber
					invoked.BankCurrency        		= BankInformationGroup.BankCurrency
					invoked.CrossBorderIdentifier 		= BankInformationGroup.CrossBorderIdentifier
					invoked.SwiftID             		= BankInformationGroup.SwiftID
					invoked.BankingCode         		= BankInformationGroup.BankingCode
					invoked.BankID              		= BankInformationGroup.BankID
					invoked.AssignmentNumber    		= BankInformationGroup.AssignmentNumber
					invoked.GiroNumber          		= BankInformationGroup.GiroNumber
					invoked.BACSReference       		= BankInformationGroup.BACSReference
					invoked.BACSName            		= BankInformationGroup.BACSName
					invoked.CreditCardNumber    		= BankInformationGroup.CreditCardNumber

				if (TransferCertifications)
					for each ActiveSupplierContactCertRel
	 					invoke Create VendorCertification
	 						invoked.VendorGroup  				= SupplierGroup
 							invoked.Vendor 	 	 				= Supplier.Vendor
 							invoked.VendorLocation				= Location
 							invoked.PayablesCertificationCode	= each.SupplierCertification.PayablesCertificationCode
 							invoked.CertificationEffectiveDate 	= each.SupplierCertification.CertificationEffectiveDate
 							invoked.CertificationExpirationDate = each.CertificationExpirationDate

  				if (CreatePoLocation)
	  				invoke Create PurchaseFromLocation
						invoked.VendorGroup						= SupplierGroup
						invoked.Vendor							= Supplier.Vendor
						invoked.PurchaseFromLocation			= Location

				VendorLocation = Location

			Exit Rules

				if (GlnNumberContact entered)
					if (!GlobalLocationNumberRel exists)
						invoke Create GlobalLocationNumber
							invoked.ItemGroup				= SupplierGroup
							invoked.GlobalLocationNumber	= GlnNumberContact
			  				invoked.Active					= true

					invoke Create GlobalLocationNumberDetail
						invoked.ItemGroup											= SupplierGroup
						invoked.GlobalLocationNumber 								= GlnNumberContact
						invoked.GlobalLocationNumberDetail.GlobalLocationNumberType = 8
						invoked.VendorAndVendorLocation.Vendor						= Supplier.Vendor
						invoked.VendorAndVendorLocation.VendorLocation              = Location

					if (CreatePoLocation)
						invoke Create GlobalLocationNumberDetail
							invoked.ItemGroup												= SupplierGroup
							invoked.GlobalLocationNumber 									= GlnNumberContact
							invoked.GlobalLocationNumberDetail.GlobalLocationNumberType   	= 10
							invoked.VendorAndVendorLocation.Vendor							= Supplier.Vendor
							invoked.VendorAndVendorLocation.VendorLocation              	= Location

		UpdateVendor is an Instance Action  
			restricted
			Parameters
				ParmNewVendor is like Vendor
			Action Rules
				LocationVendor = ParmNewVendor

		UpdateEmailAddress is an Instance Action
			restricted
			Action Rules
				ConfirmEmailAddress = EmailAddress

		SupplierUpdate is an Update Action
			default label is "UpdateContact"
			valid when (Active)
			completion message is "UpdateIsCompleteSomeChangesMayNotTakeEffectUntilYourNextLogin"
			Field Rules
				LoginName
					if (!Supplier.SupplierExtEntityEnabled)
						if (IsPrimary)
							required
								"UserNameIsRequired"
				Password
					if (!Supplier.SupplierExtEntityEnabled)
						if (IsPrimary)
							required
				MainContact
					required

			Action Rules
				constraint (TelephoneNumber entered)
					"PhoneNumberIsRequired"
				constraint (EmailAddress entered)
					"EmailAddressIsRequired"

				if (Supplier.SupplierExtEntityEnabled
				and EmailAddress changed)
					FieldToConvert	= EmailAddress
					EmailAddress	= LowerCaseEmailAddress		

					LocalEmailAddress = EmailAddress
					constraint (!SupplierSourceIdEmailExistsRel exists)
						"EmailAddressAlreadyExistsAsAContactInTheSystem"

				include UpdateRules

				if (ConvertedLowerCaseEmailAddress entered
				and EmailAddress changed)
					FieldToConvert					= EmailAddress
					ConvertedLowerCaseEmailAddress	= LowerCaseEmailAddress		

			Exit Rules
				if (MainContact changed
				or	EmailAddress changed
				or  TelephoneNumber changed
				or  MobilePhone  changed)
					invoke Update agent(Actor).Actor
						invoked.PersonName					= MainContact
						invoked.ContactInfo.EmailAddress	= EmailAddress
						invoked.ContactInfo.TelephoneNumber = TelephoneNumber
						invoked.ContactInfo.MobilePhone		= MobilePhone

				if  (SupplierGroup.RequireUpdatedSupplierValidation
				and	 Supplier.SupplierStatus.Validated
				and  SupplierSourceIdFields changed)
					invoke StatusUpdate Supplier

					include UpdateValidationEmail

		Update is an Update Action 
			valid when (Supplier.IsUpdatable)
			Field Rules
				LoginName
					if (old LoginName entered)
						cannot be changed
							"UserNameCannotBeChanged"
				Password
					if (old LoginName entered) 
						cannot be changed
							"PasswordCannotBeChanged-SeeSecurityAdministrator"
				ConfirmPassword
					if (old LoginName entered) 
						cannot be changed
							"PasswordCannotBeChanged-SeeSecurityAdministrator"
				MainContact
					required

				ReceiveEmailNotification
					if (ReceiveEmailNotification = false)
						constraint (!ProxyToBeNotified exists)
							"CannotSetSupplierContactToNotReceiveEmailNotificationWhenProxiesAreSetToReceiveNotification"

			Action Rules
				constraint (TelephoneNumber entered)
					"PhoneNumberIsRequired"
				constraint (EmailAddress entered)
					"EmailAddressIsRequired"

				if (Supplier.SupplierExtEntityEnabled
				and EmailAddress changed)
					FieldToConvert	= EmailAddress
					EmailAddress	= LowerCaseEmailAddress		

					LocalEmailAddress = EmailAddress
					constraint (!SupplierSourceIdEmailExistsRel exists)
						"EmailAddressAlreadyExistsAsAContactInTheSystem"

				if (!LocalFromMismatch)
					if (HasSomeRequisitionAccess) 
						if (AllowTemplate = false
						and AllowAdHoc     = false)
							constraint (AllowContractSearch)
								"IfSupplierContactCanEnterRequisitions,MustSelectAtLeastOneOfAllowTemplateAndAllowAdHocAndAllowContractSearch"

				if (!Active
				and PrimaryContact changed)
					constraint (!PrimaryContact)
						"CannotMakeAnInactiveContactThePrimaryContact"

				if (PrimaryContact
				and PrimaryContact changed)
					LocalPrimaryContactChanged = true

					invoke Delete SupplierContactSTRel
					invoke Create ActorRole
						invoked.Actor			= agent(Actor).Actor 
						invoked.ActorRole.Role	= "SupplierPrimaryContact_ST"

					if (ReceiveEmailNotification
					and SupplierGroup.NotifyNewPrimaryContact)
						send email
							to EmailAddress
							from SupplierGroup.AdminEmailAddress
							subject "<SupplierGroup.PrimaryContactEmailSubject>"
							Contents
								"<SupplierGroup.PrimaryContactEmailContent>"

				if (PrimaryContact changed)
					constraint (!old PrimaryContact)
						"MustHaveAPrimaryContact"
				include UpdateRules

				if (ConvertedLowerCaseEmailAddress entered
				and EmailAddress changed)
					FieldToConvert					= EmailAddress
					ConvertedLowerCaseEmailAddress	= LowerCaseEmailAddress		

			Exit Rules

				if (PrimaryContact
				and LocalPrimaryContactChanged)
					confirmation required
						"Warning:TheExistingPrimaryContactOf<first ExistingPrimaryContactRel.MainContact.FirstAndLastName>WillChangeToNoLongerBeThePrimaryContact;DoYouWantToContinue?"
					invoke UpdatePrimaryContact ExistingPrimaryContactRel
						invoked.PrimaryContact	= false
					invoke ContactSearchUpdate Supplier

				if (MainContact changed
				or	EmailAddress changed
				or  TelephoneNumber changed
				or  MobilePhone changed)
					invoke Update agent(Actor).Actor
						invoked.PersonName					= MainContact
						invoked.ContactInfo.EmailAddress	= EmailAddress
						invoked.ContactInfo.TelephoneNumber = TelephoneNumber
						invoked.ContactInfo.MobilePhone		= MobilePhone

				if (SupplierGroup.RequireUpdatedSupplierValidation
				and	Supplier.SupplierStatus.Validated
				and	SupplierSourceIdFields changed)
					invoke StatusUpdate Supplier

					include UpdateValidationEmail

		UpdateSupplierPortalInformation is an Instance Action
			default label is "UpdateSupplierInformation"
			valid when (SupplierCanUpdateInformation)
			Parameters
				ParmSupplierName		  is a VendorName 
					holds pii
				ParmDBA                   is Alpha size 30
				ParmDAndB                 is Alpha size 20
				ParmBusinessType          is Numeric size 2
 	   				States
						Corporation 				value is 1
						NotForProfit 				value is 2
						SoleProprietorship 			value is 3
						ForeignCorporation 			value is 4
						PublicAgency 				value is 5
				ParmTaxIDType             is a TaxIdentificationType
				ParmTaxCertification      is an AttachmentWithTitleAudited
				ParmTaxID                 is AlphaUpper size 25
				ParmVATCountry            is a Country
				ParmVATNumber             is AlphaUpper size 25
				ParmGLN                   is a GlobalLocationNumber
				ParmURL                   is URL

			Parameter Rules
				ParmSupplierName
					initial value is Supplier.SupplierName
				ParmDBA
					initial value is Supplier.DoingBusinessAs
				ParmDAndB
					initial value is Supplier.DandBNbr
				ParmBusinessType
					initial value is Supplier.BusinessType
				ParmTaxIDType
					initial value is Supplier.TaxIdGroup.TaxIdType
				ParmTaxID
					initial value is Supplier.TaxIdGroup.TaxId
				ParmTaxCertification
					initial value is Supplier.TaxCertification
				ParmVATCountry
					initial value is Supplier.VATRegistrationCountry
				ParmVATNumber
					initial value is Supplier.VATRegistrationNumber
				ParmGLN
					initial value is Supplier.GlobalLocationNumber
				ParmURL
					initial value is Supplier.WebAddress

			Action Rules
				invoke UpdateSupplierInformation Supplier
					invoked.ParmSupplierName	= ParmSupplierName
					invoked.ParmDBA				= ParmDBA
					invoked.ParmDAndB			= ParmDAndB
					invoked.ParmBusinessType    = ParmBusinessType
					invoked.ParmTaxIDType       = ParmTaxIDType
					invoked.ParmTaxID           = ParmTaxID
					invoked.ParmTaxCertification = ParmTaxCertification
				   	invoked.ParmVATCountry     	= ParmVATCountry
				   	invoked.ParmVATNumber      	= ParmVATNumber
					invoked.ParmGLN       		= ParmGLN
			   		invoked.ParmURL             = ParmURL

		RegisterSupplierSourceId is an Update Action  
			restricted
			bypass field rules
			Action Rules
				if (!TransientUserRegistered)  
					if (!DerivedContactRegisteredInIFS)	
						invoke RegisterUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId				= Supplier.SupplierExtEntityGUID
							invoked.IdentifierId 			= "PrimaryEmail"
							invoked.IdentifierValue 		= EmailAddress
							invoked.Password 				= Password 
							invoked.EnableUserVerification	= false
							invoked.FirstName				= MainContact.GivenName
							invoked.LastName				= MainContact.FamilyName



						TransientResponseStatus = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
							TransientSingleJSONNode = JSONResponse select "$.response.user.userIdentity"
	
							LoginName = TransientSingleJSONNode
							invoke QuickUpdate Supplier
								invoked.LoginName			= TransientSingleJSONNode
								invoked.ContactIsRegistered	= true
								initialize invoked.RegistrationPassword
								initialize invoked.RegistrationConfirmPassword
	
							LocalCreateIdentity = true						
						else
							TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
							TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
							constraint (false)
								"<TransientStringHolder>"
				else
					if (TransientVerificationCode entered
					and !TransientUserVerified)
						invoke VerifyUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId			= Supplier.SupplierExtEntityGUID
							invoked.UserIdentity		= TransientUserIdentity
							invoked.VerificationId		= TransientUserVerificationId
							invoked.VerificationCode	= TransientVerificationCode
						TransientResponseStatus = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
							TransientUserVerified	= true
							TransientSingleJSONNode = TransientUserIdentity
							LoginName				= TransientUserIdentity

							invoke QuickUpdate Supplier
								invoked.LoginName				= TransientSingleJSONNode
								invoked.ContactIsRegistered		= true
								invoked.TransientUserVerified	= TransientUserVerified
								initialize invoked.RegistrationPassword
								initialize invoked.RegistrationConfirmPassword
	
							LocalCreateIdentity = true						
						else
							TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
							TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
							constraint (false)
								"<TransientStringHolder>"
			Exit Rules
				if (LocalCreateIdentity)
						invoke CreateFormBasedIdentity Identity
							assign result to LocalIdentity
							invoked.Service									= Supplier.SupplyManagementSupplierService
							invoked.FormBasedIdentityProperties.User		= TransientSingleJSONNode
							invoked.FormBasedIdentityProperties.Password	= "ThisFieldNotUsedForExternalEntity"

						invoke Create IdentityActor
							invoked.Service									= Supplier.SupplyManagementSupplierService
							invoked.Identity								= LocalIdentity
							invoked.Actor									= agent(Actor).Actor					


		UpdatePrimaryContact is an Update Action
			restricted

			Action Rules

				invoke Delete SupplierPrimaryContactSTRel
				invoke Create ActorRole
					invoked.Actor			= agent(Actor).Actor 
					invoked.ActorRole.Role	= "SupplierContact_ST"

				if (ReceiveEmailNotification
				and SupplierGroup.NotifyPreviousPrimaryContact)
					send email
						to EmailAddress
						from SupplierGroup.AdminEmailAddress
						subject "<SupplierGroupExtensionRel.ContactEmailSubject>"
						Contents
							"<SupplierGroupExtensionRel.ContactEmailContent>"

			Exit Rules
			
				invoke ContactSearchUpdate Supplier 

		DeleteFromSupplier is an Instance Action
			restricted
			Action Rules
				FromSupplier = true
				invoke Delete

		Delete is an Action
			valid when (Supplier.IsUpdatable)
			Action Rules
				if (!FromSupplier)
					if (OtherContactsRel exists)
						constraint (!PrimaryContact)
							"CannotDeletePrimaryContact;MustDesignateAnotherContactAsThePrimaryContactBeforeDeletingThisContact"
					else
						constraint (!PrimaryContact)
							"CannotDeletePrimaryContact;MustDeleteSupplier"
					constraint (!ResponseExists exists)
						"CannotDeleteContact;<Supplier>-<SupplierSourceId>HasRespondedToAnEvent"
				else
					constraint (!ResponseExists exists)
						"CannotDeleteSupplier;AContactHasRespondedToAnEvent"

				invoke PurgeActor ActorRel

			Exit Rules
				if (SupplierGroup.RequireUpdatedSupplierValidation
				and	Supplier.SupplierStatus.Validated
				and !FromSupplier)
					invoke StatusUpdate Supplier

					include UpdateValidationEmail

		DeleteFromMigration is an Instance Action
			restricted
			Action Rules
				invoke PurgeActor ActorRel

		UpdateSupplierBankCountry is an Instance Action
			default label is "UpdateSupplierBankCountry/\Jurisdiction"
			valid when (CanUpdateBankInformation)
			Parameters
				ParmBankCountry             is a Country

			Parameter Rules
				ParmBankCountry
					initial value is Supplier.BankInformationGroup.Country

			Action Rules
				invoke UpdateBankInformation Supplier
					invoked.ParmCountry = ParmBankCountry

		UpdateSupplierBankInformation is an Instance Action
			valid when (CanUpdateBankInformation)
			Parameters
				ParmBankAccountNumber   	is a BankAccountNumber
				ParmCreditCardNumber    	is a CrCardNumber 
					holds pii
				ParmBankEntity        		is a BankEntity
				ParmBankEntityName          is a BankName
					default label is "BankName"
				ParmBankAccountType   		is a BankAccountType
				ParmBankCurrency      		is a Currency
				ParmCrossBorderIdentifier 	is a CrossBorderIdentifier
				ParmSwiftID                 is a SwiftID
				ParmBankingCode             is a BankingCode
				ParmBankID                  is a BankID
				ParmAssignmentNumber        is an AssignmentNumber
				ParmGiroNumber              is a GiroNumber
				ParmBACSReference           is a BACSReference
				ParmBACSName                is an AccountName
				ConfirmBankEntity           is like BankEntity
				ConfirmBankAccountNumber    is like BankAccountNumber 
					holds pii

			Parameter Rules

				ParmBankAccountNumber


					LocalBankCountry = Supplier.BankInformationGroup.Country
					if (DerivedBankAccountValidationType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>"

					if (Supplier.BankInformationGroup.Country entered
					and ParmBankAccountNumber entered)
						LocalBankCountry        = Supplier.BankInformationGroup.Country
						LocalBankAccountNumber  = ParmBankAccountNumber
						include ValidateBankAccount

					if (BankInformationGroup.BankAccountNumberConfirmationRequired)
						if (ParmBankAccountNumber entered)
							constraint (ConfirmBankAccountNumber entered)
								"MustConfirm<BankInformationGroup.DerivedBankAccountNumberLabel>If<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

						constraint (ParmBankAccountNumber = ConfirmBankAccountNumber)
							"<BankInformationGroup.DerivedBankAccountNumberLabel>AndConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>DoNotMatch"

				ConfirmBankAccountNumber

					if (ConfirmBankAccountNumber entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>"

				ParmBankEntity
					initial value is Supplier.BankInformationGroup.BankEntity

					if (SupplierGroup.RequireValidBankEntity
					and ParmBankEntity entered)
						constraint (ParmBankEntity exists)
							"MustSelectAnExisting<BankInformationGroup.DerivedBankEntityLabel>From<BankInformationGroup.DerivedBankEntityLabel>List"

					if (ParmBankEntity entered
					and ParmBankEntity !exists)
						constraint (ParmBankEntityName entered)
							"MustEnterNameIf<BankInformationGroup.DerivedBankEntityLabel>IsEntered"

						if (BankInformationGroup.EntityConfirmationRequired)
							constraint (ConfirmBankEntity entered)
								"MustConfirm<BankInformationGroup.DerivedBankEntityLabel>If<BankInformationGroup.DerivedBankEntityLabel>Entered"
							constraint (ParmBankEntity = ConfirmBankEntity)
								"<BankInformationGroup.DerivedBankEntityLabel>AndConfirmation<BankInformationGroup.DerivedBankEntityLabel>DoNotMatch"

				ConfirmBankEntity

					if (!ParmBankEntity exists)
						if (ConfirmBankEntity entered)
							constraint (ParmBankEntity entered)
								"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankEntityLabel>"

				ParmBankEntityName
					initial value is Supplier.BankInformationGroup.BankEntityName
					if (ParmBankEntityName entered)
						constraint (ParmBankEntity entered)
							"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfNameIsEntered"
				ParmBankAccountType
					initial value is Supplier.BankInformationGroup.BankAccountType

					if (ParmBankAccountType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfBankAccountTypeIsEntered"

				ParmBankCurrency
					initial value is Supplier.BankInformationGroup.BankCurrency
				ParmCrossBorderIdentifier
					initial value is Supplier.BankInformationGroup.CrossBorderIdentifier
				ParmSwiftID
					initial value is Supplier.BankInformationGroup.SwiftID
					if (ParmSwiftID entered)
						constraint (ParmBankEntity entered or ParmBankAccountNumber entered)
							"CrossBorderValidOnlyIfBankIdentificationOr<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

					LocalBankCountry = Supplier.BankInformationGroup.Country
					if ((ParmBankEntity entered or ParmBankAccountNumber entered)
					and  DerivedBankAccountValidationType.IbanAndBIC)
						required
							"B\I\CNumber_&_\I\B\A\NRequiredWhenVendorBankIdentification_=_\Z"

					if (DerivedBankAccountValidationType.BicCode or DerivedBankAccountValidationType.IbanAndBIC)
						ParmCrossBorderIdentifier = CrossBorderIdentifier.Swift
						constraint (ParmSwiftID entered)
							"VendorB\I\CNumberRequiredForB\I\CCodeOrI\B\A\NAndB\I\CValidationTypes"

				ParmBankingCode
					initial value is Supplier.BankInformationGroup.BankingCode
				ParmBankID
					initial value is Supplier.BankInformationGroup.BankID
				ParmAssignmentNumber
					initial value is Supplier.BankInformationGroup.AssignmentNumber
				ParmGiroNumber
					initial value is Supplier.BankInformationGroup.GiroNumber
				ParmBACSReference
					initial value is Supplier.BankInformationGroup.BACSReference
				ParmBACSName
					initial value is Supplier.BankInformationGroup.BACSName
				ParmCreditCardNumber
					initial value is BankInformationGroup.CreditCardNumber

			Action Rules

				invoke UpdateBankInformation Supplier
					if (ParmBankAccountNumber entered)
						invoked.ParmBankAccountNumber = ParmBankAccountNumber
					invoked.ParmCreditCardNumber  = ParmCreditCardNumber
					invoked.ParmBankEntity        = ParmBankEntity
					invoked.ParmBankEntityName    = ParmBankEntityName
					invoked.ParmBankID            = ParmBankID
					invoked.ParmSwiftID           = ParmSwiftID
					invoked.ParmCrossBorderIdentifier = ParmCrossBorderIdentifier
					invoked.ParmBACSReference     = ParmBACSReference
					invoked.ParmBACSName          = ParmBACSName
					invoked.ParmBankCurrency      = ParmBankCurrency
					invoked.ParmGiroNumber        = ParmGiroNumber
					invoked.ParmBankAccountType   = ParmBankAccountType
					invoked.ParmBankingCode       = ParmBankingCode
					invoked.ParmAssignmentNumber  = ParmAssignmentNumber

		MobileUpdateSupplierBankInformation is an Instance Action
			default label is "UpdateSupplierBankInformation"
			valid when (CanUpdateBankInformation)

			Parameters
				ParmBankAccountNumber   	is a BankAccountNumber
				ParmCreditCardNumber    	is a CrCardNumber 
					holds pii
				ParmBankEntity        		is a BankEntity
				ParmBankEntityName          is a BankName
					default label is "BankName"
				ParmBankAccountType   		is a BankAccountType
				ParmBankCurrency      		is a Currency
				ParmCrossBorderIdentifier 	is a CrossBorderIdentifier
				ParmSwiftID                 is a SwiftID
				ParmBankingCode             is a BankingCode
				ParmBankID                  is a BankID
				ParmAssignmentNumber        is an AssignmentNumber
				ParmGiroNumber              is a GiroNumber
				ParmBACSReference           is a BACSReference
				ParmBACSName                is an AccountName
				ConfirmBankEntity           is like BankEntity
				ConfirmBankAccountNumber    is like BankAccountNumber 
					holds pii

			Parameter Rules

				ParmBankAccountNumber
					initial value is Supplier.BankInformationGroup.DerivedDisplayBankAccountNumber

					LocalBankCountry = Supplier.BankInformationGroup.Country
					if (DerivedBankAccountValidationType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>"

					if (Supplier.BankInformationGroup.Country entered
					and ParmBankAccountNumber entered)
						LocalBankCountry        = Supplier.BankInformationGroup.Country
						LocalBankAccountNumber  = ParmBankAccountNumber
						include ValidateBankAccount

					if (BankInformationGroup.BankAccountNumberConfirmationRequired)
						if (ParmBankAccountNumber entered)
							constraint (ConfirmBankAccountNumber entered)
								"MustConfirm<BankInformationGroup.DerivedBankAccountNumberLabel>If<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

						constraint (ParmBankAccountNumber = ConfirmBankAccountNumber)
							"<BankInformationGroup.DerivedBankAccountNumberLabel>AndConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>DoNotMatch"

				ConfirmBankAccountNumber
					if (ConfirmBankAccountNumber entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>"

				ParmBankEntity
					initial value is Supplier.BankInformationGroup.BankEntity

					if (SupplierGroup.RequireValidBankEntity
					and ParmBankEntity entered)
						constraint (ParmBankEntity exists)
							"MustSelectAnExisting<BankInformationGroup.DerivedBankEntityLabel>From<BankInformationGroup.DerivedBankEntityLabel>List"

					if (ParmBankEntity entered
					and ParmBankEntity !exists)
						constraint (ParmBankEntityName entered)
							"MustEnterNameIf<BankInformationGroup.DerivedBankEntityLabel>IsEntered"

						if (BankInformationGroup.EntityConfirmationRequired)
							constraint (ConfirmBankEntity entered)
								"MustConfirm<BankInformationGroup.DerivedBankEntityLabel>If<BankInformationGroup.DerivedBankEntityLabel>Entered"
							constraint (ParmBankEntity = ConfirmBankEntity)
								"<BankInformationGroup.DerivedBankEntityLabel>AndConfirmation<BankInformationGroup.DerivedBankEntityLabel>DoNotMatch"

				ConfirmBankEntity
					if (!ParmBankEntity exists)
						if (ConfirmBankEntity entered)
							constraint (ParmBankEntity entered)
								"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankEntityLabel>"

				ParmBankEntityName
					initial value is Supplier.BankInformationGroup.BankEntityName
					if (ParmBankEntityName entered)
						constraint (ParmBankEntity entered)
							"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfNameIsEntered"
				ParmBankAccountType
					initial value is Supplier.BankInformationGroup.BankAccountType

					if (ParmBankAccountType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfBankAccountTypeIsEntered"

				ParmBankCurrency
					initial value is Supplier.BankInformationGroup.BankCurrency
				ParmCrossBorderIdentifier
					initial value is Supplier.BankInformationGroup.CrossBorderIdentifier
				ParmSwiftID
					initial value is Supplier.BankInformationGroup.SwiftID
					if (ParmSwiftID entered)
						constraint (ParmBankEntity entered or ParmBankAccountNumber entered)
							"CrossBorderValidOnlyIfBankIdentificationOr<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

					LocalBankCountry = Supplier.BankInformationGroup.Country
					if ((ParmBankEntity entered or ParmBankAccountNumber entered)
					and  DerivedBankAccountValidationType.IbanAndBIC)
						required
							"B\I\CNumber_&_\I\B\A\NRequiredWhenVendorBankIdentification_=_\Z"

					if (DerivedBankAccountValidationType.BicCode or DerivedBankAccountValidationType.IbanAndBIC)
						ParmCrossBorderIdentifier = CrossBorderIdentifier.Swift
						constraint (ParmSwiftID entered)
							"VendorB\I\CNumberRequiredForB\I\CCodeOrI\B\A\NAndB\I\CValidationTypes"

				ParmBankingCode
					initial value is Supplier.BankInformationGroup.BankingCode
				ParmBankID
					initial value is Supplier.BankInformationGroup.BankID
				ParmAssignmentNumber
					initial value is Supplier.BankInformationGroup.AssignmentNumber
				ParmGiroNumber
					initial value is Supplier.BankInformationGroup.GiroNumber
				ParmBACSReference
					initial value is Supplier.BankInformationGroup.BACSReference
				ParmBACSName
					initial value is Supplier.BankInformationGroup.BACSName
				ParmCreditCardNumber
					initial value is BankInformationGroup.CreditCardNumber

			Action Rules
				invoke UpdateSupplierBankInformation
					invoked.ParmBankAccountNumber		= ParmBankAccountNumber
					invoked.ParmCreditCardNumber		= ParmCreditCardNumber
					invoked.ParmBankEntity				= ParmBankEntity
					invoked.ParmBankEntityName			= ParmBankEntityName
					invoked.ParmBankAccountType 		= ParmBankAccountType
					invoked.ParmBankCurrency			= ParmBankCurrency
					invoked.ParmCrossBorderIdentifier	= ParmCrossBorderIdentifier
					invoked.ParmSwiftID 				= ParmSwiftID
					invoked.ParmBankingCode 			= ParmBankingCode
					invoked.ParmBankID					= ParmBankID
					invoked.ParmAssignmentNumber		= ParmAssignmentNumber
					invoked.ParmGiroNumber				= ParmGiroNumber
					invoked.ParmBACSReference			= ParmBACSReference
					invoked.ParmBACSName				= ParmBACSName
					invoked.ConfirmBankEntity			= ConfirmBankEntity
					invoked.ConfirmBankAccountNumber	= ConfirmBankAccountNumber

		UpdateContactBankCountry is an Instance Action
			default label is "UpdateContactBankCountry/\Jurisdiction"
			valid when (CanUpdateBankInformation)
			Parameters
				ParmCountry                 is a Country

			Parameter Rules
				ParmCountry
					initial value is BankInformationGroup.Country
					required
						"MustEnterABankCountry/\Jurisdiction"

			Action Rules
				if (SupplierGroup.RequireUpdatedSupplierValidation
				and	Supplier.SupplierStatus.Validated)
					invoke StatusUpdate Supplier

					include CreateValidationEmail

				BankInformationGroup.Country           			= ParmCountry

				include UpdateExitRules

		UpdateContactBankAccountNumber is an Instance Action
			valid when (CanUpdateBankInformation)
			Parameters
				ParmBankAccountNumber    is a BankAccountNumber
				ConfirmBankAccountNumber is like BankAccountNumber 
					holds pii

			Parameter Rules
				ParmBankAccountNumber
					required
						"MustEnterNew<BankInformationGroup.DerivedBankAccountNumberLabel>"

					LocalBankCountry = BankInformationGroup.Country

					if (BankInformationGroup.Country entered)
						LocalBankCountry        = BankInformationGroup.Country
						LocalBankAccountNumber  = ParmBankAccountNumber
						include ValidateBankAccount

					if (BankInformationGroup.BankAccountNumberConfirmationRequired)
						constraint (ConfirmBankAccountNumber entered)
							"MustConfirm<BankInformationGroup.DerivedBankAccountNumberLabel>If<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

						constraint (ParmBankAccountNumber = ConfirmBankAccountNumber)
							"<BankInformationGroup.DerivedBankAccountNumberLabel>AndConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>DoNotMatch"

				ConfirmBankAccountNumber

					if (ConfirmBankAccountNumber entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>"

			Action Rules

				BankInformationGroup.BankAccountNumber = ParmBankAccountNumber

			Exit Rules

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation)
					invoke StatusUpdate Supplier
					include UpdateValidationEmail

		UpdateContactCreditCardNumber is an Instance Action
			valid when (CanUpdateBankInformation)
			Parameters
				ParmCreditCardNumber   is a CrCardNumber 
					holds pii
					default label is "NewCreditCardNumber"

			Parameter Rules
				ParmCreditCardNumber
					required
						"MustEnterNewCreditCardNumber"

			Action Rules

				BankInformationGroup.CreditCardNumber = ParmCreditCardNumber

			Exit Rules

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation)
					invoke StatusUpdate Supplier
					include UpdateValidationEmail

		MobileUpdateContactBankInformation is an Instance Action
			default label is "UpdateContactBankInformation"
			valid when (CanUpdateBankInformation)
			Parameters
				ParmBankAccountNumber   	is a BankAccountNumber
				ParmBankEntity        		is a BankEntity
				ParmBankEntityName          is a BankName
					default label is "BankName"
				ParmBankAccountType   		is a BankAccountType
				ParmBankCurrency      		is a Currency
				ParmCrossBorderIdentifier 	is a CrossBorderIdentifier
				ParmSwiftID                 is a SwiftID
				ParmBankingCode             is a BankingCode
				ParmBankID                  is a BankID
				ParmAssignmentNumber        is an AssignmentNumber
				ParmGiroNumber              is a GiroNumber
				ParmBACSReference           is a BACSReference
				ParmBACSName                is an AccountName
				ParmCreditCardNumber   		is a CrCardNumber 
					holds pii
				ConfirmBankEntity           is like BankEntity
				ConfirmBankAccountNumber    is like BankAccountNumber 
					holds pii

			Parameter Rules
				ParmBankAccountNumber

					initial value is BankInformationGroup.DerivedDisplayBankAccountNumber

					LocalBankCountry = BankInformationGroup.Country
					if (DerivedBankAccountValidationType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>"

					if (ParmBankAccountNumber entered
					and BankInformationGroup.Country entered)
						LocalBankCountry        = BankInformationGroup.Country
						LocalBankAccountNumber  = ParmBankAccountNumber
						include ValidateBankAccount

					if (BankInformationGroup.BankAccountNumberConfirmationRequired)
						if (ParmBankAccountNumber entered)
							constraint (ConfirmBankAccountNumber entered)
								"MustConfirm<BankInformationGroup.DerivedBankAccountNumberLabel>If<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

						constraint (ParmBankAccountNumber = ConfirmBankAccountNumber)
							"<BankInformationGroup.DerivedBankAccountNumberLabel>AndConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>DoNotMatch"


				ConfirmBankAccountNumber

					if (ConfirmBankAccountNumber entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>"

				ParmBankEntity

					initial value is BankInformationGroup.BankEntity

					if (SupplierGroup.RequireValidBankEntity
					and ParmBankEntity entered)
						constraint (ParmBankEntity exists)
							"MustSelectAnExistingBankEntityFromBankEntityList"

					if (ParmBankEntity entered
					and ParmBankEntity !exists)
						constraint (ParmBankEntityName entered)
							"MustEnterNameIf<BankInformationGroup.DerivedBankEntityLabel>IsEntered"

						if (BankInformationGroup.EntityConfirmationRequired)
							constraint (ConfirmBankEntity entered)
								"MustConfirm<BankInformationGroup.DerivedBankEntityLabel>If<BankInformationGroup.DerivedBankEntityLabel>Entered"
							constraint (ParmBankEntity = ConfirmBankEntity)
								"<BankInformationGroup.DerivedBankEntityLabel>AndConfirmation<BankInformationGroup.DerivedBankEntityLabel>DoNotMatch"

				ConfirmBankEntity

					if (!ParmBankEntity exists)
						if (ConfirmBankEntity entered)
							constraint (ParmBankEntity entered)
								"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankEntityLabel>"

				ParmBankEntityName
					initial value is BankInformationGroup.BankEntityName
					if (ParmBankEntityName entered)
						constraint (ParmBankEntity entered)
							"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfNameEntered"
				ParmBankAccountType
					initial value is BankInformationGroup.BankAccountType

					if (ParmBankAccountType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnterBankAccountNumberIfBankAccountTypeIsEntered"

				ParmBankCurrency
					initial value is BankInformationGroup.BankCurrency
				ParmCrossBorderIdentifier
					initial value is BankInformationGroup.CrossBorderIdentifier
				ParmSwiftID
					initial value is BankInformationGroup.SwiftID
					if (ParmSwiftID entered)
						constraint (ParmBankEntity entered or ParmBankAccountNumber entered)
							"CrossBorderValidOnlyIfBankIdentificationOr<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

					LocalBankCountry = BankInformationGroup.Country
					if ((ParmBankEntity entered or ParmBankAccountNumber entered)
					and  DerivedBankAccountValidationType.IbanAndBIC)
						required
							"B\I\CNumber_&_\I\B\A\NRequiredWhenVendorBankIdentification_=_\Z"

					if (DerivedBankAccountValidationType.BicCode or DerivedBankAccountValidationType.IbanAndBIC)
						ParmCrossBorderIdentifier = CrossBorderIdentifier.Swift
						constraint (ParmSwiftID entered)
							"VendorB\I\CNumberRequiredForB\I\CCodeOrI\B\A\NAndB\I\CValidationTypes"

				ParmBankingCode
					initial value is BankInformationGroup.BankingCode
				ParmBankID
					initial value is BankInformationGroup.BankID
				ParmAssignmentNumber
					initial value is BankInformationGroup.AssignmentNumber
				ParmGiroNumber
					initial value is BankInformationGroup.GiroNumber
				ParmBACSReference
					initial value is BankInformationGroup.BACSReference
				ParmBACSName
					initial value is BankInformationGroup.BACSName
				ParmCreditCardNumber
					initial value is BankInformationGroup.CreditCardNumber

			Action Rules
				invoke UpdateContactBankInformation
					invoked.ParmBankAccountNumber		= ParmBankAccountNumber
					invoked.ParmBankEntity				= ParmBankEntity
					invoked.ParmBankEntityName			= ParmBankEntityName
					invoked.ParmBankAccountType 		= ParmBankAccountType
					invoked.ParmBankCurrency			= ParmBankCurrency
					invoked.ParmCrossBorderIdentifier	= ParmCrossBorderIdentifier
					invoked.ParmSwiftID 				= ParmSwiftID
					invoked.ParmBankingCode 			= ParmBankingCode
					invoked.ParmBankID					= ParmBankID
					invoked.ParmAssignmentNumber		= ParmAssignmentNumber
					invoked.ParmGiroNumber				= ParmGiroNumber
					invoked.ParmBACSReference			= ParmBACSReference
					invoked.ParmBACSName				= ParmBACSName
					invoked.ParmCreditCardNumber		= ParmCreditCardNumber
					invoked.ConfirmBankEntity			= ConfirmBankEntity
					invoked.ConfirmBankAccountNumber	= ConfirmBankAccountNumber


		UpdateContactBankInformation is an Instance Action
			valid when (CanUpdateBankInformation)
			Parameters
				ParmBankAccountNumber   	is a BankAccountNumber
				ParmBankEntity        		is a BankEntity
				ParmBankEntityName          is a BankName
					default label is "BankName"
				ParmBankAccountType   		is a BankAccountType
				ParmBankCurrency      		is a Currency
				ParmCrossBorderIdentifier 	is a CrossBorderIdentifier
				ParmSwiftID                 is a SwiftID
				ParmBankingCode             is a BankingCode
				ParmBankID                  is a BankID
				ParmAssignmentNumber        is an AssignmentNumber
				ParmGiroNumber              is a GiroNumber
				ParmBACSReference           is a BACSReference
				ParmBACSName                is an AccountName
				ParmCreditCardNumber   		is a CrCardNumber 
					holds pii
				ConfirmBankEntity           is like BankEntity
				ConfirmBankAccountNumber    is like BankAccountNumber 
					holds pii

			Parameter Rules
				ParmBankAccountNumber

					LocalBankCountry = BankInformationGroup.Country
					if (DerivedBankAccountValidationType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>"

					if (ParmBankAccountNumber entered
					and BankInformationGroup.Country entered)
						LocalBankCountry        = BankInformationGroup.Country
						LocalBankAccountNumber  = ParmBankAccountNumber
						include ValidateBankAccount

					if (BankInformationGroup.BankAccountNumberConfirmationRequired)
						if (ParmBankAccountNumber entered)
							constraint (ConfirmBankAccountNumber entered)
								"MustConfirm<BankInformationGroup.DerivedBankAccountNumberLabel>If<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

						constraint (ParmBankAccountNumber = ConfirmBankAccountNumber)
							"<BankInformationGroup.DerivedBankAccountNumberLabel>AndConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>DoNotMatch"


				ConfirmBankAccountNumber

					if (ConfirmBankAccountNumber entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>"

				ParmBankEntity

					if (SupplierGroup.RequireValidBankEntity
					and ParmBankEntity entered)
						constraint (ParmBankEntity exists)
							"MustSelectAnExistingBankEntityFromBankEntityList"

					if (ParmBankEntity entered
					and ParmBankEntity !exists)
						constraint (ParmBankEntityName entered)
							"MustEnterNameIf<BankInformationGroup.DerivedBankEntityLabel>IsEntered"

						if (BankInformationGroup.EntityConfirmationRequired)
							constraint (ConfirmBankEntity entered)
								"MustConfirm<BankInformationGroup.DerivedBankEntityLabel>If<BankInformationGroup.DerivedBankEntityLabel>Entered"
							constraint (ParmBankEntity = ConfirmBankEntity)
								"<BankInformationGroup.DerivedBankEntityLabel>AndConfirmation<BankInformationGroup.DerivedBankEntityLabel>DoNotMatch"

				ConfirmBankEntity

					if (!ParmBankEntity exists)
						if (ConfirmBankEntity entered)
							constraint (ParmBankEntity entered)
								"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankEntityLabel>"

				ParmBankEntityName
					initial value is BankInformationGroup.BankEntityName
					if (ParmBankEntityName entered)
						constraint (ParmBankEntity entered)
							"MustEnter<BankInformationGroup.DerivedBankEntityLabel>IfNameEntered"
				ParmBankAccountType
					initial value is BankInformationGroup.BankAccountType

					if (ParmBankAccountType entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnterBankAccountNumberIfBankAccountTypeIsEntered"

				ParmBankCurrency
					initial value is BankInformationGroup.BankCurrency
				ParmCrossBorderIdentifier
					initial value is BankInformationGroup.CrossBorderIdentifier
				ParmSwiftID
					initial value is BankInformationGroup.SwiftID
					if (ParmSwiftID entered)
						constraint (ParmBankEntity entered or ParmBankAccountNumber entered)
							"CrossBorderValidOnlyIfBankIdentificationOr<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

					LocalBankCountry = BankInformationGroup.Country
					if ((ParmBankEntity entered or ParmBankAccountNumber entered)
					and  DerivedBankAccountValidationType.IbanAndBIC)
						required
							"B\I\CNumber_&_\I\B\A\NRequiredWhenVendorBankIdentification_=_\Z"

					if (DerivedBankAccountValidationType.BicCode or DerivedBankAccountValidationType.IbanAndBIC)
						ParmCrossBorderIdentifier = CrossBorderIdentifier.Swift
						constraint (ParmSwiftID entered)
							"VendorB\I\CNumberRequiredForB\I\CCodeOrI\B\A\NAndB\I\CValidationTypes"

				ParmBankingCode
					initial value is BankInformationGroup.BankingCode
				ParmBankID
					initial value is BankInformationGroup.BankID
				ParmAssignmentNumber
					initial value is BankInformationGroup.AssignmentNumber
				ParmGiroNumber
					initial value is BankInformationGroup.GiroNumber
				ParmBACSReference
					initial value is BankInformationGroup.BACSReference
				ParmBACSName
					initial value is BankInformationGroup.BACSName
				ParmCreditCardNumber
					initial value is BankInformationGroup.CreditCardNumber

			Action Rules
				if (SupplierGroup.RequireUpdatedSupplierValidation
				and	Supplier.SupplierStatus.Validated)
					invoke StatusUpdate Supplier

					include CreateValidationEmail

				BankInformationGroup.BankAccountNumber = ParmBankAccountNumber
				BankInformationGroup.BankEntity        = ParmBankEntity
				BankInformationGroup.BankEntityName    = ParmBankEntityName
				BankInformationGroup.BankID            = ParmBankID
				BankInformationGroup.SwiftID           = ParmSwiftID
				BankInformationGroup.CrossBorderIdentifier = ParmCrossBorderIdentifier
				BankInformationGroup.BACSReference     = ParmBACSReference
				BankInformationGroup.BACSName          = ParmBACSName
				BankInformationGroup.BankCurrency      = ParmBankCurrency
				BankInformationGroup.GiroNumber        = ParmGiroNumber
				BankInformationGroup.BankAccountType   = ParmBankAccountType
				BankInformationGroup.BankingCode       = ParmBankingCode
				BankInformationGroup.AssignmentNumber  = ParmAssignmentNumber
				BankInformationGroup.CreditCardNumber  = ParmCreditCardNumber

				
			Exit Rules
			
				if (SupplierGroup.AutoCompare
				and LocationVendor entered)
					invoke CompareSupplierAndVendor Supplier
						invoked.ParmSupplierGroup	= SupplierGroup
						invoked.ParmSupplier        = Supplier
						invoked.CompareContacts	    = true					

		AttachToEvent is an Instance Action
			Parameters
				Company            is a SourcingCompany
				SourcingEvent

			Parameter Rules
				Company
					required
				SourcingEvent
					required

			Action Rules
				LocalSourcingEvent = SourcingEvent
				LocalCompany	   = Company

				constraint (!SupplierNotificationsExistRel exists)
					"SupplierContactAlreadyHasANotificationOnThisSourcingEvent"
				constraint (Company.SourcingGroup = SupplierGroup)
					"SupplierDoesNotBelongToSupplierGroup"
				constraint (SourcingEvent.InActionableState)
					"CannotCreateNotificationsForEventThatIsCancelled,Closed,OrInEventPendingStatus"
				invoke Create SourcingEventNotification
					invoked.Company								= Company
					invoked.SourcingEvent						= SourcingEvent
					invoked.NotifiedSupplier.SupplierGroup  	= SupplierGroup
					invoked.NotifiedSupplier.Supplier			= Supplier
					invoked.NotifiedSupplier.SupplierSourceId	= SupplierSourceId
				if (SourcingEvent.DisplayPlanHoldersList
				and	!SupplierPlanHolderExistRel exists)
					invoke Create SourcingEventPlanHolder
						invoked.Company								= Company
						invoked.SourcingEvent						= SourcingEvent
						invoked.NotifiedSupplier.SupplierGroup  	= SupplierGroup
						invoked.NotifiedSupplier.Supplier			= Supplier
						invoked.NotifiedSupplier.SupplierSourceId	= SupplierSourceId

		AttachToEventAsPlanHolder is an Instance Action
			Parameters
				Company			is a SourcingCompany
				SourcingEvent

			Parameter Rules
				Company
					required
				SourcingEvent
					required

			Action Rules
				LocalSourcingEvent = SourcingEvent
				LocalCompany	   = Company

				constraint (!SupplierPlanHolderExistRel exists)
					"SupplierContactAlreadyIsAPlanHolderOnThisSourcingEvent"
				constraint (Company.SourcingGroup = SupplierGroup)
					"SupplierDoesNotBelongToSupplierGroup"
				constraint (SourcingEvent.InActionableState)
					"CannotCreatePlanHolderForEventThatIsCancelled,Closed,OrInEventPendingStatus"
				invoke Create SourcingEventPlanHolder
					invoked.Company								= Company
					invoked.SourcingEvent						= SourcingEvent
					invoked.NotifiedSupplier.SupplierGroup  	= SupplierGroup
					invoked.NotifiedSupplier.Supplier			= Supplier
					invoked.NotifiedSupplier.SupplierSourceId	= SupplierSourceId

		ActivateSupplierContact is an Instance Action
			default label is "ActivateContact"
			valid when (CanActivateContact)

			Action Rules
				Active = true

				InactiveTimeStamp = ""


			Exit Rules
				if (!RegistrationComplete)
					if (SupplierGroup.RequireUpdatedSupplierValidation
					and	Supplier.SupplierStatus.Validated)
						invoke StatusUpdate Supplier

						include UpdateValidationEmail
				if (Supplier.Active)
					invoke UpdateLandingPageForActive


				invoke EnableActor agent(Actor).Actor


		InactivateSupplierContact is an Instance Action
			default label is "InactivateContact"
			valid when (AllowBuyerToInactivateContact)

			subject is BuyerInactivateSupplierContact
			reason code required
			confirmation required
				"InactivatingThisContactWillPreventAccessToTheSupplierPortal;DoYouWantToContinue?"
			Action Rules
				if (PrimaryContact)
					confirmation required
						"YouAreInactivatingThePrimaryContact;DoYouWantToContinue?"

				Active = false
				InactiveTimeStamp = current timestamp
				PortalInactiveSource = 1
				if (Supplier.Active)
					invoke UpdateLandingPageForInactive


				invoke DisableActor agent(Actor).Actor


		InactivateContact is an Instance Action
			valid when (AllowSupplierToInactivateContact)
			subject is SupplierInactivateSupplierContact
			reason code required
			confirmation required
				"InactivatingThisContactWillPreventAccessToTheSupplierPortal;DoYouWantToContinue?"
			Action Rules
				Active = false
				InactiveTimeStamp = current timestamp
				PortalInactiveSource = 2
				if (Supplier.Active)
					invoke UpdateLandingPageForInactive


				invoke DisableActor agent(Actor).Actor

		UpdateLandingPageForActive is an Instance Action  
			restricted
			Action Rules
				if (ActorGroupMemberRel exists)
					invoke Delete ActorGroupMemberRel
				
				if (CustomLandingPageRel exists)
					invoke Update CustomLandingPageRel
						invoked.Active         = true
						invoked.effective date = current corporate date

		UpdateLandingPageForInactive is an Instance Action 
			restricted
			Action Rules
				if (SupplierGroup.SupplierInactivationActorGroup entered
				and SupplierGroup.ActorGroupRel exists)
					invoke Create ActorGroupMember
						invoked.ActorGroup	= SupplierGroup.SupplierInactivationActorGroup
						invoked.Actor		= agent(Actor).Actor 
				if (CustomLandingPageRel exists)
					invoke Update CustomLandingPageRel
						invoked.Active         = false
						invoked.effective date = current corporate date

		EmailToSupplierContacts is an Instance Action
			default label is "SendEmail"
			valid when (EmailToSupplierContactsValid)
			Parameters
				ToEmail 		is an EmailAddress 
					holds pii
				FromEmail  		is an EmailAddress 
					holds pii
				Subject   		is Text
				EmailContents 	is Text

			Parameter Rules
				ToEmail
					initial value is SupplierSourceId.EmailAddress
				FromEmail
					initial value is actor.ContactInfo.EmailAddress
					required
				Subject
					initial value is SupplierGroupExtensionRel.ExpiringCertificationsEmailSubject
					required
				EmailContents
					initial value is SupplierGroupExtensionRel.ExpiringCertificationsEmailContent + SupplierGroup.NewLine + ExpiringCertificationsMessageContents
					required

			Action Rules
				send email
					to ToEmail
					from FromEmail
					subject "<Subject>"
					Contents
						"<EmailContents>"

				SentContactCertificationNotice = current corporate date

				invoke Create SupplierContactMessage
					invoked.SupplierGroup 					= SupplierGroup
					invoked.Supplier 						= Supplier
					invoked.SupplierSourceId				= SupplierSourceId
					invoked.CreationDateTime				= current timestamp
					invoked.MessageTitle					= SupplierGroupExtensionRel.ExpiringCertificationsEmailSubject
					invoked.MessageText						= SupplierGroupExtensionRel.ExpiringCertificationsEmailContent + SupplierGroup.NewLine + ExpiringCertificationsMessageContents
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = actor.agent(Employee).Employee

		CreateContactMismatchDetail is an Instance Action
			restricted
			Action Rules
				if (Active = true
				and VendorLocation.Status.Active)
					if (LocationName != VendorLocation.VendorName)
					 	if (!SupplierVendorMismatchContactRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  	= SupplierGroup
								invoked.Supplier				= Supplier
								invoked.SupplierSourceId		= SupplierSourceId
								invoked.Type 					= 1
								invoked.SupplierValue 			= LocationName
								invoked.VendorValue   			= VendorLocation.VendorName
					if (LocationAddress.DeliveryAddress.AddressLine1 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine1)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type						= 6
							invoked.SupplierValue 				= LocationAddress.DeliveryAddress.AddressLine1
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine1
					if (LocationAddress.DeliveryAddress.AddressLine2 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine2)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					    = 7
							invoked.SupplierValue 				= LocationAddress.DeliveryAddress.AddressLine2
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine2
					if  (LocationAddress.DeliveryAddress.AddressLine3 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine3)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					    = 8
							invoked.SupplierValue 				= LocationAddress.DeliveryAddress.AddressLine3
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine3
					if  (LocationAddress.DeliveryAddress.AddressLine4 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine4)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					    = 9
							invoked.SupplierValue 				= LocationAddress.DeliveryAddress.AddressLine4
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine4
					if (LocationAddress.Municipality != CurrentVendorAddress.PostalAddress.Municipality)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					    = 10
							invoked.SupplierValue 				= LocationAddress.Municipality
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Municipality
					if (LocationAddress.StateProvince    != CurrentVendorAddress.PostalAddress.StateProvince)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					    = 11
							invoked.SupplierValue 				= LocationAddress.StateProvince
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.StateProvince
					if (LocationAddress.PostalCode	!= CurrentVendorAddress.PostalAddress.PostalCode)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
				 			invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 12
							invoked.SupplierValue 				= LocationAddress.PostalCode
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.PostalCode
					if (LocationAddress.County    != CurrentVendorAddress.PostalAddress.County)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					    = 13
							invoked.SupplierValue 				= LocationAddress.County
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.County
					if (LocationAddress.Country	!= CurrentVendorAddress.PostalAddress.Country)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 14
							invoked.SupplierValue 				= LocationAddress.Country
							invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Country
					if (VendorLocation.ContactName entered
					and MainContact.FirstAndLastName  != VendorLocation.ContactName)
						if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
						invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					    = 15
							invoked.SupplierValue 				= MainContact.FirstAndLastName
							invoked.VendorValue   				= VendorLocation.ContactName

					if (TelephoneNumber.InternationalPrefix	!= VendorLocation.PhoneNumber.InternationalPrefix)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 64
							invoked.SupplierValue 				= TelephoneNumber.InternationalPrefix
							invoked.VendorValue   				= VendorLocation.PhoneNumber.InternationalPrefix
					if (TelephoneNumber.SubscriberNumber	!= VendorLocation.PhoneNumber.SubscriberNumber)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 17
							invoked.SupplierValue 				= TelephoneNumber.SubscriberNumber
							invoked.VendorValue   				= VendorLocation.PhoneNumber.SubscriberNumber
					if (TelephoneNumber.Extension != VendorLocation.PhoneNumber.Extension)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 18
							invoked.SupplierValue 				= TelephoneNumber.Extension
							invoked.VendorValue   				= VendorLocation.PhoneNumber.Extension
					if (MobilePhone.MobilePhoneNumber.InternationalPrefix	!= VendorLocation.MobileNumber.MobilePhoneNumber.InternationalPrefix)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 66
							invoked.SupplierValue 				= MobilePhone.MobilePhoneNumber.InternationalPrefix
							invoked.VendorValue   				= VendorLocation.MobileNumber.MobilePhoneNumber.InternationalPrefix
					if (MobilePhone.MobilePhoneNumber.SubscriberNumber	!= VendorLocation.MobileNumber.MobilePhoneNumber.SubscriberNumber)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 33
							invoked.SupplierValue 				= MobilePhone.MobilePhoneNumber.SubscriberNumber
							invoked.VendorValue   				= VendorLocation.MobileNumber.MobilePhoneNumber.SubscriberNumber
					if (FaxNumber.InternationalPrefix	!= VendorLocation.FaxNumber.InternationalPrefix)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 65
							invoked.SupplierValue 				= FaxNumber.InternationalPrefix
							invoked.VendorValue   				= VendorLocation.FaxNumber.InternationalPrefix
					if (FaxNumber.SubscriberNumber	!= VendorLocation.FaxNumber.SubscriberNumber)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 20
							invoked.SupplierValue 				= FaxNumber.SubscriberNumber
							invoked.VendorValue   				= VendorLocation.FaxNumber.SubscriberNumber
					if (FaxNumber.Extension != VendorLocation.FaxNumber.Extension)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 21
							invoked.SupplierValue 				= FaxNumber.Extension
							invoked.VendorValue   				= VendorLocation.FaxNumber.Extension
					if (EmailAddress != VendorLocation.EmailAddress)
				 		if (!SupplierVendorMismatchContactRel exists)
					 		invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
				 		invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId			= SupplierSourceId
							invoked.Type					 	= 22
							invoked.SupplierValue 				= EmailAddress
							invoked.VendorValue   				= VendorLocation.EmailAddress
					if (BankInformationGroup.BankAccountNumber != VendorLocation.BankAccountNumber)
					 	if (!SupplierVendorMismatchContactRel exists)
				 			invoke Create SupplierVendorMismatch
								invoked.SupplierGroup                        = SupplierGroup
								invoked.Supplier                             = Supplier
								invoked.Vendor						         = LocationVendor
					 	invoke Create SupplierVendorMismatchDetail
							invoked.SupplierGroup		  		= SupplierGroup
							invoked.Supplier					= Supplier
							invoked.SupplierSourceId            = SupplierSourceId
							invoked.Type					 	= 50
							invoked.SupplierValue 				= BankInformationGroup.BankAccountNumber
							invoked.VendorValue   				= VendorLocation.BankAccountNumber

						if (BankInformationGroup.BankEntity != VendorLocation.BankEntity)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 51
								invoked.SupplierValue 				= BankInformationGroup.BankEntity
								invoked.VendorValue   				= VendorLocation.BankEntity

						if (BankInformationGroup.BankAccountType != VendorLocation.BankAccountType)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 52
								invoked.SupplierValue 				= BankInformationGroup.BankAccountType
								invoked.VendorValue   				= VendorLocation.BankAccountType

						if (BankInformationGroup.BankCurrency != VendorLocation.BankCurrency)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 53
								invoked.SupplierValue 				= BankInformationGroup.BankCurrency
								invoked.VendorValue   				= VendorLocation.BankCurrency

						if (BankInformationGroup.CrossBorderIdentifier != VendorLocation.CrossBorderIdentifier)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 54
								invoked.SupplierValue 				= BankInformationGroup.CrossBorderIdentifier
								invoked.VendorValue   				= VendorLocation.CrossBorderIdentifier

						if (BankInformationGroup.SwiftID != VendorLocation.SwiftID)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 55
								invoked.SupplierValue 				= BankInformationGroup.SwiftID
								invoked.VendorValue   				= VendorLocation.SwiftID

						if (BankInformationGroup.BankingCode != VendorLocation.BankingCode)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 56
								invoked.SupplierValue 				= BankInformationGroup.BankingCode
								invoked.VendorValue   				= VendorLocation.BankingCode

						if (BankInformationGroup.BankID != VendorLocation.BankID)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 57
								invoked.SupplierValue 				= BankInformationGroup.CrossBorderIdentifier
								invoked.VendorValue   				= VendorLocation.CrossBorderIdentifier

						if (BankInformationGroup.AssignmentNumber != VendorLocation.AssignmentNumber)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 58
								invoked.SupplierValue 				= BankInformationGroup.AssignmentNumber
								invoked.VendorValue   				= VendorLocation.AssignmentNumber

						if (BankInformationGroup.GiroNumber != VendorLocation.GiroNumber)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 59
								invoked.SupplierValue 				= BankInformationGroup.GiroNumber
								invoked.VendorValue   				= VendorLocation.GiroNumber

						if (BankInformationGroup.BACSReference != VendorLocation.BACSReference)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 60
								invoked.SupplierValue 				= BankInformationGroup.BACSReference
								invoked.VendorValue   				= VendorLocation.BACSReference

						if (BankInformationGroup.BACSName != VendorLocation.BACSName)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 61
								invoked.SupplierValue 				= BankInformationGroup.BACSName
								invoked.VendorValue   				= VendorLocation.BACSName

						if (BankInformationGroup.CreditCardNumber != VendorLocation.CreditCardNumber)
					 		if (!SupplierVendorMismatchContactRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = LocationVendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.SupplierSourceId			= SupplierSourceId
								invoked.Type					 	= 62
								invoked.SupplierValue 				= BankInformationGroup.CreditCardNumber
								invoked.VendorValue   				= VendorLocation.CreditCardNumber


		UpdateSupplierInformation is an Instance Action
			restricted
			completion message is "SupplierInformationHasBeenUpdated"

			Parameters
				SupplierName 					is a VendorName 
					holds pii
				DoingBusinessAs 				is Alpha size 30
				DandBNbr 						is Alpha size 20
				BusinessType 					is Numeric size 2
					States
						Corporation 				value is 1
						NotForProfit 				value is 2
						SoleProprietorship 			value is 3
						ForeignCorporation 			value is 4
						PublicAgency 				value is 5
				TaxIdGroup
				GlobalLocationNumber
				WebAddress						is URL
				MailingAddress 					is a PostalAddressV2	
					holds pii
				BillingFirstName				is Alpha size 30
				BillingLastName					is Alpha size 30
				SameAsAddressAbove				is Boolean
				BillingAddress 					is a PostalAddressV2	
					holds pii

			Parameter Rules
				SupplierName
					initial value is Supplier.SupplierName
				DoingBusinessAs
					initial value is Supplier.DoingBusinessAs
				DandBNbr
					initial value is Supplier.DandBNbr
				BusinessType
					initial value is Supplier.BusinessType
				TaxIdGroup.TaxIdType
					initial value is Supplier.TaxIdGroup.TaxIdType
				TaxIdGroup.TaxId
					initial value is Supplier.TaxIdGroup.TaxId
				GlobalLocationNumber
					initial value is Supplier.GlobalLocationNumber
				WebAddress
					initial value is Supplier.WebAddress
				MailingAddress
					initial value is Supplier.MailingAddress
				BillingFirstName
					initial value is Supplier.BillingFirstName
				BillingLastName
					initial value is Supplier.BillingLastName
				SameAsAddressAbove
					initial value is Supplier.SameAsAddressAbove
				BillingAddress
					initial value is Supplier.BillingAddress

			Action Rules
				invoke SupplierUpdate Supplier
					invoked.SupplierName		= SupplierName
					invoked.DoingBusinessAs		= DoingBusinessAs
					invoked.DandBNbr			= DandBNbr
					invoked.BusinessType		= BusinessType
					invoked.TaxIdGroup.TaxIdType = TaxIdGroup.TaxIdType
					invoked.TaxIdGroup.TaxId	= TaxIdGroup.TaxId
					invoked.GlobalLocationNumber = GlobalLocationNumber
					invoked.WebAddress			= WebAddress
					invoked.MailingAddress		= MailingAddress
					invoked.BillingFirstName	= BillingFirstName
					invoked.BillingLastName		= BillingLastName
					invoked.SameAsAddressAbove	= SameAsAddressAbove
					invoked.BillingAddress		= BillingAddress


		UpdateMyContactInformation is an Instance Action
			restricted
			completion message is "ContactInformationHasBeenUpdated"

			Parameters
				NewContactTitle					is a Description
				NewMainContact					is an PersonName 
					holds pii
				NewEmailAddress                 is an EmailAddress 
					holds pii
				NewTelephoneNumber              is a TelephoneNumber 
					holds pii
				NewFaxNumber                    is a FaxNumber
				NewMobilePhone                  is a MobilePhone 
					holds pii
				NewReceiveEmailNotification 	is Boolean
				NewLocationAddress				is a PostalAddressV2	
					holds pii

			Parameter Rules
				NewContactTitle
					initial value is ContactTitle
				NewMainContact
					initial value is MainContact
				NewEmailAddress
					initial value is EmailAddress
				NewTelephoneNumber
					initial value is TelephoneNumber
				NewFaxNumber
					initial value is FaxNumber
				NewMobilePhone
					initial value is MobilePhone
				NewReceiveEmailNotification
					initial value is ReceiveEmailNotification
				NewLocationAddress
					initial value is LocationAddress

			Action Rules
				invoke SupplierUpdate SupplierSourceId
					invoked.ContactTitle				= NewContactTitle
					invoked.MainContact					= NewMainContact
					invoked.EmailAddress                = NewEmailAddress
					invoked.TelephoneNumber             = NewTelephoneNumber
					invoked.FaxNumber                   = NewFaxNumber
					invoked.MobilePhone                 = NewMobilePhone
					invoked.ReceiveEmailNotification	= NewReceiveEmailNotification
					invoked.LocationAddress				= NewLocationAddress

		ResetSupplierContactPassword is an Instance Action  
			restricted
			Action Rules


		ResetSupplierContactPasswordSetAction is a Set Action  
			restricted

			Instance Selection
				where (false)

			Action Rules

				Empty Set Rules


		UpdateBankInformationCountry is a Set Action
			restricted
			Parameters
				SupplierGroup

			Instance Selection
				where (SupplierGroup = SupplierGroup)

			Action Rules

				Instance Rules
					if (BankInformationGroup.Country !entered)
						BankInformationGroup.Country = LocationAddress.Country

		Anonymize is an Instance Action	
			restricted

			Action Rules
				if (AnonymizeLogAnonymizeRelExists)
					confirmation required
						"Warning,TheAnonymizeActionIsNonReversableAndAnonymizeRecordAlreadyExists;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToAnonymizeAgain?"
				else
					confirmation required
						"Warning,TheAnonymizeActionIsNonReversable;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToAnonymize?"

				if (ProxyExists)
					for each SupplierContactProxy set
						invoke Delete each

				MainContact.GivenName 				= SupplierSourceId
				MainContact.FamilyName 				= SupplierSourceId
				MainContact.PreferredFamilyName     = SupplierSourceId
				MainContact.PreferredGivenName      = SupplierSourceId
				initialize ContactTitle
				initialize LocationName
				initialize LocationAddress
				EmailAddress         				= "initialized@initialized.com"
				ConvertedLowerCaseEmailAddress		= "initialized@initialized.com"
				TelephoneNumber.SubscriberNumber  	= 9999999999
				initialize MobilePhone
				initialize FaxNumber
				initialize VendormateUserId
				initialize BankInformationGroup

			Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup		= SupplierGroup.FinanceEnterpriseGroup
					invoked.Status						= 1
					invoked.AffectedBusinessClass		= "PC2"
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= Supplier
					invoked.SupplierSourceId            = SupplierSourceId

		PurgeAuditLog is an Instance Action	
			restricted
			Action Rules
				constraint (AnonymizeLogAnonymizeRelExists)
					"CannotPurge;SupplierContactMustBeAnonymizedFirst"
				if (AnonymizeLogPurgeRelExists)
					confirmation required
						"Warning,ThePurgeAuditLogActionIsNonReversableAndAnonymizeRecordAlreadyExists;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToPurgeAuditLogAgain?"
				else
					confirmation required
						"Warning,ThePurgeAuditLogActionIsNonReversable;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToPurgeAuditLog?"

				invoke purge audit log entries

		  	Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup		= SupplierGroup.FinanceEnterpriseGroup
					invoked.Status						= 2
					invoked.AffectedBusinessClass		= "PC2"
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= Supplier
					invoked.SupplierSourceId            = SupplierSourceId


		UpdateEmail is an Update Action  
			restricted
			Action Rules
				confirmation required
					"SignInAuthenticationIsAffectedByChangingTheEmailAddress.Continue?"
					
				constraint (TransientNewEmailAddress entered)
					"NewEmailAddressIsRequired"

				FieldToConvert				= TransientNewEmailAddress
				TransientNewEmailAddress	= LowerCaseEmailAddress

				if (SupplierGroup.RequireEmailConfirmation)
					constraint (TransientConfirmNewEmailAddress entered)
						"ConfirmNewEmailAddressIsRequired"

					FieldToConvert					= TransientConfirmNewEmailAddress
					TransientConfirmNewEmailAddress	= LowerCaseEmailAddress

					constraint (TransientNewEmailAddress = TransientConfirmNewEmailAddress)
						"ConfirmNewEmailAddressDoesNotMatchNewEmailAddress"

				constraint (TransientEmailPassword entered)
					"PasswordIsRequired"

				constraint (TransientNewEmailAddress != EmailAddress)
					"NewEmailAddressIsTheSameAsTheCurrentEmailAddress"
				
				LocalEmailAddress = TransientNewEmailAddress
				constraint (!SupplierSourceIdEmailExistsRel exists)
					"EmailAddressAlreadyExistsAsAContactInTheSystem"

				if (DerivedVerificationCodeRequired)
					constraint (TransientVerificationCodeEmail entered)
						"VerificationCodeIsRequired"

				if (!TransientUserUpdateInitiated)
					invoke UpdateUserIdentifier ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= Supplier.SupplierExtEntityGUID
						invoked.UserIdentity	= LoginName
						invoked.IdentifierId	= "PrimaryEmail"
						invoked.IdentifierValue	= TransientNewEmailAddress
						invoked.IsPrimary		= true
						invoked.Password		= TransientEmailPassword
					
					TransientResponseStatusEmail = JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatusEmail, "Success"))
						EmailAddress			= TransientNewEmailAddress
						if (SupplierGroup.RequireEmailConfirmation)
							ConfirmEmailAddress	= TransientNewEmailAddress
						invoke Update agent(Actor).Actor
							invoked.ContactInfo.EmailAddress	= EmailAddress
					else
						TransientSingleJSONNodeEmail	= JSONResponse select "$.errorlist[0].code"
						TransientStringHolderEmail		= JSONResponse select "$.errorlist[0].languagetext"
						constraint (false)
							"<TransientStringHolderEmail>"
				else
					if (TransientVerificationCodeEmail entered
					and !TransientUserVerified)
						invoke VerifyUser ExternalUserExecutor
							resume on error
							assign result to JSONResponse
							invoked.EntityId			= Supplier.SupplierExtEntityGUID
							invoked.UserIdentity		= TransientUserIdentityEmail
							invoked.VerificationId		= TransientUserVerificationIdEmail
							invoked.VerificationCode	= TransientVerificationCodeEmail
						TransientResponseStatusEmail = JSONResponse select "$.responsestatus"
						if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatusEmail, "Success"))
							TransientUserVerified	= true
							EmailAddress				= TransientNewEmailAddress
							if (SupplierGroup.RequireEmailConfirmation)
								ConfirmEmailAddress		= TransientNewEmailAddress
							invoke Update agent(Actor).Actor
								invoked.ContactInfo.EmailAddress	= EmailAddress
						else
							TransientSingleJSONNodeEmail	= JSONResponse select "$.errorlist[0].code"
							TransientStringHolderEmail		= JSONResponse select "$.errorlist[0].languagetext"
							constraint (false)
								"<TransientStringHolderEmail>"
						TransientResendVerificationCodeEmail	= false

			Exit Rules
				if (EmailAddress changed)
					if (ConvertedLowerCaseEmailAddress entered)
						ConvertedLowerCaseEmailAddress = EmailAddress
					if (DerivedMFAEnabled)
						invoke LoadDevices


		AdminUpdateEmail is an Instance Action
			restricted
			Parameters
				PrmNewEmailAddress			is an EmailAddress
				PrmConfirmNewEmailAddress	is an EmailAddress

			Parameter Rules
				PrmNewEmailAddress
					required
						"NewEmailAddressIsRequired"
					FieldToConvert		= PrmNewEmailAddress
					PrmNewEmailAddress	= LowerCaseEmailAddress

				PrmConfirmNewEmailAddress
					if (SupplierGroup.RequireEmailConfirmation)
						required
							"ConfirmNewEmailAddressIsRequired"
						FieldToConvert				= PrmConfirmNewEmailAddress
						PrmConfirmNewEmailAddress	= LowerCaseEmailAddress
						constraint (PrmConfirmNewEmailAddress = PrmNewEmailAddress)
							"ConfirmNewEmailAddressDoesNotMatchNewEmailAddress"

			Action Rules
				confirmation required
					"SignInAuthenticationIsAffectedByChangingTheEmailAddress.Continue?"
					
				constraint (PrmNewEmailAddress != EmailAddress)
					"NewEmailAddressIsTheSameAsTheCurrentEmailAddress"

				LocalEmailAddress = PrmNewEmailAddress
				constraint (!SupplierSourceIdEmailExistsRel exists)
					"EmailAddressAlreadyExistsAsAContactInTheSystem"

				if (DerivedContactRegisteredInIFS)
					invoke AdminUpdateUserIdentifier ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId		= Supplier.SupplierExtEntityGUID
						invoked.UserIdentity	= LoginName
						invoked.IdentifierId	= "PrimaryEmail"
						invoked.IdentifierValue	= PrmNewEmailAddress
						invoked.IsPrimary		= true
					
					TransientResponseStatusEmail = JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatusEmail, "Success"))
						EmailAddress			= PrmNewEmailAddress
						if (SupplierGroup.RequireEmailConfirmation)
							ConfirmEmailAddress	= PrmNewEmailAddress
						invoke Update agent(Actor).Actor
							invoked.ContactInfo.EmailAddress	= EmailAddress
					else
						TransientSingleJSONNodeEmail	= JSONResponse select "$.errorlist[0].code"
						TransientStringHolderEmail		= JSONResponse select "$.errorlist[0].languagetext"
						constraint (false)
							"<TransientStringHolderEmail>"
				else
					EmailAddress			= PrmNewEmailAddress
					if (SupplierGroup.RequireEmailConfirmation)
						ConfirmEmailAddress	= PrmNewEmailAddress
					invoke Update agent(Actor).Actor
						invoked.ContactInfo.EmailAddress	= EmailAddress
			Exit Rules
				if (EmailAddress changed)
					if (ConvertedLowerCaseEmailAddress entered)
						ConvertedLowerCaseEmailAddress = EmailAddress
					if (DerivedContactRegisteredInIFS)
						if (Supplier.DerivedVerificationCodeRequired)
							send email
								to EmailAddress
								from SupplierGroup.AdminEmailAddress
								subject "Your_Access_Information_Has_Changed"
								Contents
									"ToCompleteTheChange,PleaseUseThe_Forgot_PasswordLinkTheNextTimeYouSignIn"
						else
							send email
								to EmailAddress
								from SupplierGroup.AdminEmailAddress
								subject "Your_Access_Information_Has_Changed"
								Contents
									"PleaseUseTheNewEmailAddressTheNextTimeYouSignIn"
					else	
						send email
							to EmailAddress
							from SupplierGroup.AdminEmailAddress
							subject "Complete_Your_Registration;_Access_Information_Change"
							Contents
								"<SupplierGroupExtensionRel.FinalRegistrationEmailContent>"
								"_"
								"PleaseUseTheLinkToCompleteYourRegistrationProcessForUserName:__<EmailAddress>"
								"_"
								"<DerivedRegisterHereLink>"
		        	if (DerivedMFAEnabled)
						invoke LoadDevices


		LoadDevices is an Instance Action
			restricted
			Action Rules
				invoke LoadRegisteredMFADevices MFAIdentityRel


		ClearDevices is an Instance Action
			restricted
			Action Rules
				invoke ClearRegisteredMFADevices MFAIdentityRel
		

		ExternalUserMigration is an Import Action  
			restricted
			Parameters
				PrmExternalUserEmail	is like EmailAddress
				PrmExternalUserActorId	is like Actor
				PrmExternalUserGUID		is like Identity

			Parameter Rules
				PrmExternalUserEmail
					required
				PrmExternalUserActorId
					required
				PrmExternalUserGUID
					required

			Action Rules
				LocalExternalUserEmail		= PrmExternalUserEmail
				LocalExternalUserActorId	= PrmExternalUserActorId
				if (MigrationExternalUserRel exists)
					if (PrmExternalUserEmail != PrmExternalUserActorId)
						if (MigrationExternalUserRel.Active)
							invoke RestrictedBypassUpdate MigrationExternalUserRel
								invoked.LoginName 						= PrmExternalUserGUID
								invoked.MigratedToExternalUser			= true 
								invoked.ExternalUserMigrationMismatch	= true
								invoked.NotifiedMigrationChangedSignIn	= true

							SupplierGroup = MigrationExternalUserRel.SupplierGroup
							send email
								to PrmExternalUserEmail
								from SupplierGroupExtensionRel.EEMigrationUsernameChangeFromEmailAddress
								subject "<SupplierGroupExtensionRel.EEMigrationUsernameChangeEmailSubject>"
								Contents
									"<SupplierGroupExtensionRel.EEMigrationUsernameChangeEmailContent>"
									"<current timestamp>"
						else
							invoke RestrictedBypassUpdate MigrationExternalUserRel
								invoked.LoginName 						= PrmExternalUserGUID
								invoked.MigratedToExternalUser			= true 
								invoked.ExternalUserMigrationMismatch	= true
					else
						invoke RestrictedBypassUpdate MigrationExternalUserRel
							invoked.LoginName 					= PrmExternalUserGUID
							invoked.MigratedToExternalUser		= true 
				else
					constraint (false)
						"ApplicationRecordNotFound;ActorEmailAddressAndActorIdDoNotMatchAnySupplierContactEmailAddressAndLoginName"


		SendEmailForExternalUserMigrationUsernameChange is an Instance Action
			valid when (ValidToSendUsernameMismatchEmail)
			Parameters
				ToEmail 		is an EmailAddress 
					holds pii
				FromEmail  		is an EmailAddress 
					holds pii
				Subject   		is Text
				EmailContents 	is Text

			Parameter Rules
				ToEmail
					initial value is EmailAddress
					required
				FromEmail
					initial value is SupplierGroupExtensionRel.EEMigrationUsernameChangeFromEmailAddress
					required
				Subject
					initial value is SupplierGroupExtensionRel.EEMigrationUsernameChangeEmailSubject
					required
				EmailContents
					initial value is SupplierGroupExtensionRel.EEMigrationUsernameChangeEmailContent
					required

			Action Rules
				send email
					to ToEmail
					from FromEmail
					subject "<Subject>"
					Contents
						"<EmailContents>"
						"<current timestamp>"

		RestrictedBypassUpdate is an Update Action
			restricted
			bypass field rules

		ExternalEntityPreMigrationCheck is a Set Action
			restricted
			Parameters
				PrmRunMode			is Numeric 1
					States
						ReportOnly			value is 0
						ReportAndUpdate		value is 1
			
			Local Fields
				LocalSupplierSourceIdCount						is Numeric 9
				LocalSupplierSourceIdErrorCount					is Numeric 9
				LocalMissingActorCount							is Numeric 9
				LocalContactAndActorMissingEmailCount			is Numeric 9
				LocalContactMissingEmailCount					is Numeric 9
				LocalActorMissingEmailCount						is Numeric 9
				LocalContactAndActorEmailMismatchCount			is Numeric 9
				LocalContactAndActorMissingFirstNameCount		is Numeric 9
				LocalContactMissingFirstNameCount				is Numeric 9
				LocalActorMissingFirstNameCount					is Numeric 9
				LocalContactAndActorFirstNameMismatchCount		is Numeric 9
				LocalContactAndActorMissingLastNameCount		is Numeric 9
				LocalContactMissingLastNameCount				is Numeric 9
				LocalActorMissingLastNameCount					is Numeric 9
				LocalContactAndActorLastNameMismatchCount		is Numeric 9
				LocalDuplicateEmailAddressCount					is Numeric 9
				LocalIssueEncountered							is Boolean
				LocalUpdateContactEmailAddress					is Boolean
				LocalUpdateContactFirstName						is Boolean
				LocalUpdateContactLastName						is Boolean
				LocalUpdateActorEmailAddress					is Boolean
				LocalUpdateActorFirstName						is Boolean
				LocalUpdateActorLastName						is Boolean


			Sort Order
				SupplierGroup
				Supplier
				SupplierSourceId

			Instance Selection
				where (MigratedToExternalUser = false)

			Action Rules
				Set Rules
					Entrance Rules

						invoke Purge SupplierContactPreMigrationIssuesAllRel

						invoke Create SupplierContactPreMigrationIssues
							invoked.SupplierContactPreMigrationIssues.RecordType	= 1 
							invoked.SupplierContactPreMigrationIssues.Sequence		= 1
							invoked.RunMode											= PrmRunMode
							invoked.RunDateStart									= current timestamp

					Exit Rules

						invoke Update SupplierContactPreMigrationIssuesSummaryRel
							invoked.SupplierSourceIdCount					= LocalSupplierSourceIdCount
							invoked.SupplierSourceIdErrorCount				= LocalSupplierSourceIdErrorCount
							invoked.MissingActorCount						= LocalMissingActorCount
							invoked.ContactAndActorMissingEmailCount		= LocalContactAndActorMissingEmailCount
							invoked.ContactMissingEmailCount				= LocalContactMissingEmailCount
							invoked.ActorMissingEmailCount					= LocalActorMissingEmailCount
							invoked.ContactAndActorEmailMismatchCount		= LocalContactAndActorEmailMismatchCount
							invoked.ContactAndActorMissingFirstNameCount	= LocalContactAndActorMissingFirstNameCount
							invoked.ContactMissingFirstNameCount			= LocalContactMissingFirstNameCount
							invoked.ActorMissingFirstNameCount				= LocalActorMissingFirstNameCount
							invoked.ContactAndActorFirstNameMismatchCount	= LocalContactAndActorFirstNameMismatchCount
							invoked.ContactAndActorMissingLastNameCount		= LocalContactAndActorMissingLastNameCount
							invoked.ContactMissingLastNameCount				= LocalContactMissingLastNameCount
							invoked.ActorMissingLastNameCount				= LocalActorMissingLastNameCount
							invoked.ContactAndActorLastNameMismatchCount	= LocalContactAndActorLastNameMismatchCount
							invoked.DuplicateEmailAddressCount				= LocalDuplicateEmailAddressCount
							invoked.RunDateEnd = current timestamp

				Instance Rules
					LocalSupplierSourceIdCount = LocalSupplierSourceIdCount + 1
					LocalIssueEncountered			= false
					LocalUpdateContactEmailAddress	= false
					LocalUpdateContactFirstName		= false
					LocalUpdateContactLastName		= false
					LocalUpdateActorEmailAddress	= false
					LocalUpdateActorFirstName		= false
					LocalUpdateActorLastName		= false


					if (EEMigrationActorRel not exists)
						LocalMissingActorCount = LocalMissingActorCount + 1
						LocalIssueEncountered = true

						invoke Create SupplierContactPreMigrationIssues
							invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
							invoked.SupplierGroup									= SupplierGroup
							invoked.Supplier										= Supplier
							invoked.SupplierSourceId								= SupplierSourceId
							invoked.SupplierContactEmailAddress						= EmailAddress
							invoked.SupplierContactName								= MainContact
							invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
							invoked.ActorName										= EEMigrationActorRel.PersonName
							invoked.PreventsMigration								= true
							invoked.ProcessMessage									= "Actor record does not exist.  Manual correction is required."
					else
						
						if (EmailAddress not entered
						and EEMigrationActorRel.ContactInfo.EmailAddress not entered)
							LocalContactAndActorMissingEmailCount = LocalContactAndActorMissingEmailCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.PreventsMigration								= true
								invoked.ProcessMessage									= "Contact and Actor records are missing email address.  Manual correction is required."

						if (EmailAddress not entered
						and EEMigrationActorRel.ContactInfo.EmailAddress entered)
							LocalContactMissingEmailCount = LocalContactMissingEmailCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Contact record is missing email address.  Email exists on Actor.  System will update Contact with Actor email address."
								else
									invoked.ProcessMessage								= "Contact record was missing email address.  System updated Contact with Actor email address."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateContactEmailAddress = true

						if (EEMigrationActorRel.ContactInfo.EmailAddress not entered
						and EmailAddress entered)
							LocalActorMissingEmailCount = LocalActorMissingEmailCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor record is missing email address.  Email exists on Contact.  System will update Actor with Contact email address."
								else
									invoked.ProcessMessage								= "Actor record was missing email address.  System updated Actor with Contact email address."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorEmailAddress = true

						if (EmailAddress entered
						and EEMigrationActorRel.ContactInfo.EmailAddress entered
						and EmailAddress != EEMigrationActorRel.ContactInfo.EmailAddress)
							LocalContactAndActorEmailMismatchCount = LocalContactAndActorEmailMismatchCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor email address does not match Contact email address.  System will update Actor with Contact email address."
								else	
									invoked.ProcessMessage								= "Actor email address did not match Contact email address.  System updated Actor with Contact email address."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorEmailAddress = true

						if (MainContact.GivenName not entered
						and EEMigrationActorRel.PersonName.GivenName not entered)
							LocalContactAndActorMissingFirstNameCount = LocalContactAndActorMissingFirstNameCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.ProcessMessage									= "Contact and Actor records are missing first name.  Manual correction is required."

						if (MainContact.GivenName not entered
						and EEMigrationActorRel.PersonName.GivenName entered)
							LocalContactMissingFirstNameCount = LocalContactMissingFirstNameCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Contact record is missing first name.  Name exists on Actor.  System will update Contact with Actor first name."
								else
									invoked.ProcessMessage								= "Contact record was missing first name.  System updated Contact with Actor first name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateContactFirstName = true

						if (EEMigrationActorRel.PersonName.GivenName not entered
						and MainContact.GivenName entered)
							LocalActorMissingFirstNameCount = LocalActorMissingFirstNameCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor record is missing first name.  Name exists on Contact.  System will update Actor with Contact first name."
								else
									invoked.ProcessMessage								= "Actor record was missing first name.  System updated Actor with Contact first name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorFirstName = true

						if (MainContact.GivenName entered
						and EEMigrationActorRel.PersonName.GivenName entered
						and MainContact.GivenName != EEMigrationActorRel.PersonName.GivenName)
							LocalContactAndActorFirstNameMismatchCount = LocalContactAndActorFirstNameMismatchCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor first name does not match Contact first name.  System will update Actor with Contact first name."
								else	
									invoked.ProcessMessage								= "Actor first name did not match Contact first name.  System updated Actor with Contact first name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorFirstName = true

						if (MainContact.FamilyName not entered
						and EEMigrationActorRel.PersonName.FamilyName not entered)
							LocalContactAndActorMissingLastNameCount = LocalContactAndActorMissingLastNameCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.ProcessMessage									= "Contact and Actor records are missing last name.  Manual correction is required."

						if (MainContact.FamilyName not entered
						and EEMigrationActorRel.PersonName.FamilyName entered)
							LocalContactMissingLastNameCount = LocalContactMissingLastNameCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Contact record is missing last name.  Name exists on Actor.  System will update Contact with Actor last name."
								else
									invoked.ProcessMessage								= "Contact record was missing last name.  System updated Contact with Actor last name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateContactLastName = true

						if (EEMigrationActorRel.PersonName.FamilyName not entered
						and MainContact.FamilyName entered)
							LocalActorMissingLastNameCount = LocalActorMissingLastNameCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor record is missing last name.  Name exists on Contact.  System will update Actor with Contact last name."
								else
									invoked.ProcessMessage								= "Actor record was missing last name.  System updated Actor with Contact last name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorLastName = true

						if (MainContact.FamilyName entered
						and EEMigrationActorRel.PersonName.FamilyName entered
						and MainContact.FamilyName != EEMigrationActorRel.PersonName.FamilyName)
							LocalContactAndActorLastNameMismatchCount = LocalContactAndActorLastNameMismatchCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								if (PrmRunMode.ReportOnly)
									invoked.ProcessMessage								= "Actor last name does not match Contact last name.  System will update Actor with Contact last name."
								else	
									invoked.ProcessMessage								= "Actor last name did not match Contact last name.  System updated Actor with Contact last name."

							if (PrmRunMode.ReportAndUpdate)
								LocalUpdateActorLastName = true

					if (EmailAddress entered)
						if (EEMigrationDuplicateEmailRel exists)
							LocalDuplicateEmailAddressCount = LocalDuplicateEmailAddressCount + 1
							LocalIssueEncountered = true

							invoke Create SupplierContactPreMigrationIssues
								invoked.SupplierContactPreMigrationIssues.RecordType	= 2 
								invoked.SupplierGroup									= SupplierGroup
								invoked.Supplier										= Supplier
								invoked.SupplierSourceId								= SupplierSourceId
								invoked.SupplierContactEmailAddress						= EmailAddress
								invoked.SupplierContactName								= MainContact
								invoked.ActorEmailAddress								= EEMigrationActorRel.ContactInfo.EmailAddress
								invoked.ActorName										= EEMigrationActorRel.PersonName
								invoked.DuplicateSupplierGroup							= EEMigrationDuplicateEmailRel.SupplierGroup
								invoked.DuplicateSupplier								= EEMigrationDuplicateEmailRel.Supplier
								invoked.DuplicateSupplierSourceId						= EEMigrationDuplicateEmailRel.SupplierSourceId
								invoked.DuplicateEmailAddress							= EEMigrationDuplicateEmailRel.EmailAddress
								invoked.DuplicateName									= EEMigrationDuplicateEmailRel.MainContact
								invoked.PreventsMigration								= true
								invoked.ProcessMessage									= "Duplicate email address found on another Contact.  Manual correction is required."

					if (LocalIssueEncountered)
						LocalSupplierSourceIdErrorCount = LocalSupplierSourceIdErrorCount + 1

					if (PrmRunMode.ReportAndUpdate)
						if (LocalUpdateActorEmailAddress
						or  LocalUpdateActorFirstName
						or  LocalUpdateActorLastName)
							invoke Update EEMigrationActorRel
								if (LocalUpdateActorEmailAddress)
									invoked.ContactInfo.EmailAddress	= EmailAddress
								if (LocalUpdateActorFirstName)
									invoked.PersonName.GivenName		= MainContact.GivenName
								if (LocalUpdateActorLastName)
									invoked.PersonName.FamilyName		= MainContact.FamilyName

						if (LocalUpdateContactEmailAddress
						or  LocalUpdateContactFirstName
						or  LocalUpdateContactLastName)
							invoke RestrictedBypassUpdate
								if (LocalUpdateContactEmailAddress)
									invoked.EmailAddress			= EEMigrationActorRel.ContactInfo.EmailAddress
								if (LocalUpdateContactFirstName)
									invoked.MainContact.GivenName	= EEMigrationActorRel.PersonName.GivenName
								if (LocalUpdateContactLastName)
									invoked.MainContact.FamilyName	= EEMigrationActorRel.PersonName.FamilyName


		StoreEmailAddressInLowerCase is a Set Action
			restricted
			disable checkpoint
			Sort Order
				SupplierGroup
				Supplier
				SupplierSourceId

			Instance Selection
				where (ConvertedLowerCaseEmailAddress not entered)

			Action Rules
				Instance Rules
					FieldToConvert		= EmailAddress

					invoke RestrictedBypassUpdate in background
						invoked.ConvertedLowerCaseEmailAddress 	= LowerCaseEmailAddress
