SourcingEventLine is a BusinessClass
	owned by ss
	prefix is EVL

	Ontology
		symbolic key is SourcingEventLine

	Patterns
		implements CompoundDocument
			Document Components
				SourcingEventLineQuestion set
				SourcingEventLineComment set
				SourcingEventLineSource set
				SourcingEventLineAttachment set

	Persistent Fields
		Name						is a Description
		Status						is Numeric size 2
			States
				Draft		value is 1
				Open		value is 2
				Cancelled	value is 3
				Awarded		value is 4
				Closed		value is 5
		AwardApprovalStatus			is Numeric size 1
			States
				NeedsApproval	value is 1
				Approved		value is 2
		AwardNotificationStatus		is Numeric size 1
			States
				NotNotified	value is 1
				Notified	value is 2
		OutputType					is Numeric size 2
			States
				PO				value is 1
				Contract		value is 2
				Blanket			value is 3
				CatalogQuote	value is 4
				Standing		value is 5
				Service			value is 6
				NoOutput		value is 7
		OutputCreated				is Boolean
		RequireResponse				is Boolean
		ShipTo						is an InventoryLocation
		DeliverTo					is Alpha size 30
		ItemType
		ItemNumber					is an Item
		ItemDescription				is a Description
		ItemDescription2			is a Description
		ItemDescription3			is a Description3
		Description					is RichText
		ServiceCode
		Quantity					is an UnsignedQuantity
			precision is DerivedNumberOfDecimalsQuantity
		CommodityCode
		EstimatedQuantity 			is Boolean
		UOM 						is a UnitOfMeasureEdit
		PerUnitEstimate				is a UnitCost
			precision is DerivedNumberOfDecimalsCost
		UomMultiplier				is Decimal size 13.7
		ManufacturerInformation
		RequestedDeliveryDate		is Date
		AllowAlternateResponses		is Boolean
		AllowAddOnCharge			is Boolean
		AllowAdvancedPricing		is Boolean
		DistributionType			is a LineDistributionType
		DistCode					is a PayablesDistributionCode
		CancelDate					is TimeStamp
		UnspscCode					is a UNSPSCCode
		LineWeighting				is a Percent
		WeightingCriteria
		DiversityScoreAllocation	is a ScoreAllocation
		DeliveryScoreAllocation		is a ScoreAllocation
		DeliveryScoringOption		is Numeric size 1
			States
				AsSoonAsPossible		value is 1
				OnRequestedDeliveryDate	value is 2
		LowestBidOption				is Numeric size 1
			States
				LessThanLowestBid			value is 1
				LessThanOrEqualToLowestBid	value is 2
		DisplayLowestBidAmount		is Boolean
		RequireFullQuantity			is Boolean
		CancelledQuantity			is a Quantity
		GlobalTradeItemNumber		is an ItemGTIN
			default label is "GTIN"
		DefaultContractType			is a ContractType
		DefaultContractSubType		is a ContractSubtype
		DefaultContractClass		is a ContractClassification
		DefaultContractSubClass		is a ContractSubclassification
		DefaultEffectiveDate		is Date
		DefaultExpirationDate		is Date
		DefaultScheduleFrequency	is a ScheduleFrequency
		DefaultMaxReleaseNumber		is Numeric size 4
		DefaultParticipant			is a Participant
		LastQuestionDisplayOrder	is a SequenceNumber
			disable Auditing

	Transient Fields
	 	CreateFromAnother		is Boolean
		TemplateApplied			is Boolean
		FromRQ					is Boolean
		SavedFromCurrency		is a FromCurrency
		SavedCurrencyTable		is a CurrencyTable
		SavedTransactionAmount	is a CurrencyAmount
		SavedExchangeDate		is a ExchangeDate
		SavedExchangeAmt		is an InternationalCost
		AltSavedExchangeAmt		is an InternationalCost
		SavedEnterpriseGroup	is a EnterpriseGroup

	Local Fields
		SavedContract						is a Contract
		SavedSourceContract					is a Contract
		SavedContractLine					is Numeric size 6
		SavedRequisition					is like Requisition
		SavedQuestion						is a Question
		SavedComment						is a Description
		SavedAttachmentTitle				is DocumentTitle size 50
		LocalCompany						is Numeric size 4
		LocalIcCompany						is Numeric size 4
		LocalLocation						is like InventoryLocation
		LocalRqLoc							is like RequestingLocation
		LocalParticipant					is like Participant
		LocalParticipantGroup				is like ParticipantGroup
		LocalOutputType						is Numeric size 2
		LocalSupplierGroup					is like SupplierGroup
		LocalSupplier						is like Supplier
		LocalSupplierSourceId				is Numeric size 4 
		LocalCurrencyExchange				is a CurrencyExchange
		LocalItemNumber						is like Item
		LocalAwardQuantity					is a Quantity
		LocalProxyEmailAddressList			is an EmailAddressMulti 
			holds pii
		LocalProxyEmailAddressFound			is Boolean
		LocalNotifiedSupplier				is a NotifiedSupplier
		LocalPONumber						is a PurchaseOrder
		LocalPOLine							is a PurchaseOrderLine
		LocalAddOnCharge					is an AddOnCharge
		LocalEventLineSource				is a SourcingEventLineSource
		SavedPurchaseOrder					is a PurchaseOrder view
		SavedPurchaseOrderLine				is a PurchaseOrderLine view
		SavedPurchaseOrderLineSource		is a PurchaseOrderLineSource view
		LocalPOLineQuantity					is a Quantity
		LocalPOLineVendorItem				is like VendorItem
		LocalPOLineEnteredUOM				is a UnitOfMeasureEdit
		LocalPOLineRequestedDeliveryDate	is Date
		LocalPOLineEnteredUnitCost			is a UnitCost
		LocalPOLineCurrencyUnitCost			is a UnitCost
		LocalPOLineDescription				is Alpha size 30
		LocalPOLineCostOption				is Numeric size 1
		LocalPOLineItemGTIN					is an ItemGTIN
		LocalPOLineItemType					is like ItemType
		LocalReqNumber						is like Requisition
		LocalBudgetEffectiveDate			is Date
		LocalBudgetLifetimeMaximumAmount	is an InternationalAmount
		LocalBudgetUnitPrice				is a UnitCost
		LocalBudgetMaxQuantity				is a Quantity
		LocalContractUniqueID				is UniqueID
		GTINCheckDigit
		LocalValidCheckDigit				is Boolean
		LocalQuestion						is Numeric size 8
		LocalSourcingEventQuestion			is Numeric size 8

	Context Fields
		Requisition
		SupplyManagementReportContext is a SupplyManagementReport

	Field Groups
		RevisionControlled
			Name
			Description
			OutputType
			RequireResponse
			CommodityCode
			ItemNumber
			ItemDescription
			Quantity
			UOM
			ShipTo
			RequestedDeliveryDate
			AllowAlternateResponses
			AllowAddOnCharge
			AllowAdvancedPricing

		InitializedFields
			Status
			OutputCreated
			RequestedDeliveryDate
			CancelDate
			CancelledQuantity

		RqControlled
			ItemNumber
			ItemType
			ServiceCode
			ItemDescription
			UOM
			Quantity

	Rule Blocks
		DefaultDistributions
			if (!FromRQ)
				if (ItemType.Inventoried
				and ItemLocationRel exists)
					invoke InvDelete SourcingEventLineDistribution set

					invoke InvCreate SourcingEventLineDistribution set
						invoked.DistributionAccount					= ItemLocationRel.GeneralLedgerCategory.InventoryAccount
						if (DistributionType.Quantity)
							invoked.Quantity										= Quantity
						else
						if (DistributionType.Percent)
							invoked.Percent											= 1
				else
				if (!SourcingEventLineDistribution set exists)
					if (SourcingEvent.DefaultAccount entered)
						if (DistributionType.Quantity)
							invoke InvCreate SourcingEventLineDistribution set
								invoked.Quantity	= Quantity
						else
						if (DistributionType.Percent)
							invoke InvCreate SourcingEventLineDistribution set
								invoked.Percent		= 1
					else
					if (ItemType.NonStock
					and ItemLocationRel exists)
						invoke Create SourcingEventLineDistribution set
							invoked.DistributionAccount									= ItemLocationRel.GeneralLedgerCategory.InventoryAccount
							if (DistributionType.Quantity)
								invoked.Quantity										= Quantity
							else
							if (DistributionType.Percent)
								invoked.Percent											= 1

		CreateDistributionsFromDistCode
			for each DistCode.PayablesDistributionCodeDetail set
				invoke Create SourcingEventLineDistribution set
					invoked.DistributionAccount									= each.DistributionAccount
					invoked.Percent												= each.DistributionPercent
					if (!SourcingEventLine.InventoryBalance)
						invoked.AssetInformation.Asset								= each.Asset
						invoked.AssetInformation.AssetTemplate						= each.AssetTemplate

		CancelRemainingQuantity
			if (TotalAwardQuantity != Quantity)
				if (OutputType.PO)
					for each UnprocessedSourceLines
						invoke Cancel each.PurchaseOrderInterfaceRel
						CancelledQuantity += each.UnprocessedQuantity
				else
				if (OutputType.NoOutput)
					CancelledQuantity += (Quantity - TotalAwardQuantity)
			
			if (CreatedfromRQ)
				for each OriginCodeRQ
					if (each.Quantity > TotalAwardQuantity)
						invoke Processed.UpdateInterfaceCancelQuantity each.RequisitionLineRel
							invoked.PrmCancelQuantity  = (each.Quantity - TotalAwardQuantity)

		ResponseCurrencyTranslation
			initialize LocalCurrencyExchange

			if (!OutputType.NoOutput
			and Company.CurrencyTable entered
			and each.ResponseAmount.UnitPrice entered)   
				if (each.Contract exists
				and each.Contract.CurrencyCode 				!= each.SourcingEventResponse.EnteredCurrencyCode
				and each.Contract.CurrencyCode              != SourcingEvent.CurrencyCode)
					SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
				else
				if (each.SourcingEventResponse.CurrencyCode != each.SourcingEventResponse.EnteredCurrencyCode)
					SavedFromCurrency     					= each.NotifiedSupplier.Supplier.Vendor.InvoiceCurrency

				if (SavedFromCurrency entered)
					SavedEnterpriseGroup					= Company.ProcurementGroup
					SavedCurrencyTable      				= Company.CurrencyTable
					SavedTransactionAmount      			= each.ResponseAmount.UnitPrice
					SavedExchangeDate		 	 			= current corporate date
					LocalCurrencyExchange.ToCurrency 		= SourcingEvent.CurrencyCode

					SavedExchangeAmt					    = LocalCurrencyExchange.OutputCurrencyAmount

		MaintainCommodityCode

			if (ItemNumber exists)
				if (ItemNumber.CommodityCode entered
				and !ItemType.Special
				and !ItemType.Service)
					CommodityCode = ItemNumber.CommodityCode
				else
				if (ContractOutput)
					if (Company.BuyerCanAddCommodityCode = false)
						constraint (!CommodityCode entered)
							"CannotEnterCommodityCodeHereForItemMasterItem;CommodityCodeMustBeMaintainedOnItem"
					else
					if (CommodityCode entered
					and Company.BuyerCanAddCommodityCode = true)
						confirmation required
							"EnteredCommodityCodeWillBeAddedToItem;DoYouWantToContinue?"
						invoke UpdateCommodityCode ItemRel
							invoked.PrmCommodityCode   = CommodityCode
						if (Company.CommodityCodeEmail entered)
							send email
								to Company.CommodityCodeEmail
								from SourcingEvent.Buyer.EmployeeWorkEmailAddress
								subject "CommodityCodeAddedToItem"
								Contents
									"CommodityCode<CommodityCode>HasBeenAddedToItem<ItemNumber>FromEvent<SourcingEvent>"

		CommonAwardedLineEdits
			constraint (each.NotifiedSupplier.Supplier.SupplierStatus.Validated)
				"CannotFinalAwardUntilSupplier<each.NotifiedSupplier.Supplier>IsValidated"
			constraint (each.NotifiedSupplier.Supplier.Active)
				"CannotFinalAwardSupplier<each.NotifiedSupplier.Supplier>IsNotActive"
			constraint (each.NotifiedSupplier.SupplierSourceId.Active)
				"CannotFinalAwardSupplierContact<each.NotifiedSupplier.SupplierSourceId>IsNotActive"
			if (!OutputType.NoOutput)
				constraint (!each.NotifiedSupplier.Supplier.Vendor pending
				and 		each.NotifiedSupplier.Supplier.Vendor entered)
					"VendorDoesNotExistForAwardedSupplier<each.NotifiedSupplier.Supplier>"
				constraint (each.NotifiedSupplier.Supplier.Vendor.VendorStatus.Active)
					"CannotFinalAward;Vendor<each.NotifiedSupplier.Supplier.Vendor>ForSupplier<each.NotifiedSupplier.Supplier>IsNotActive"
				if (each.NotifiedSupplier.SupplierSourceId.VendorLocationEntered)
					constraint (each.NotifiedSupplier.SupplierSourceId.VendorLocation.Status.Active)
						"CannotFinalAward;VendorLocation<each.NotifiedSupplier.SupplierSourceId.VendorLocation>ForContact<each.NotifiedSupplier.SupplierSourceId.MainContact.FirstAndLastName>IsNotActive"

			if (each.AwardQuantity entered)
				constraint (!each.SELRDuplicateNewGTINRel exists)
					"MultipleResponsesExistForEventWithDifferentGTINNumbersForTheSameItem,ManufacturerInformation,AndUOM"
			if (!ContractOutput
			and	each.SourcingEventResponse.RequestToNegotiateTerms)
				constraint (each.TermsHaveBeenNegotiated)
					"CannotFinalAwardUntilTermsHaveBeenNegotiatedForSupplier<each.NotifiedSupplier.Supplier>"
			constraint (!each.SourcingEventResponse.BidBondNeeded)
				"MustIndicateThatABidBondHasBeenProvidedToAwardToThisSupplier"
			if (OutputType.PO
			and !ItemType.Service)
				if (each.AwardQuantity entered)
					constraint (each.DeliveryDateOverride entered)
						"DeliveryDateIsRequiredForAwardedLine<each.SourcingEventLine>;Supplier<each.NotifiedSupplier.Supplier>"
					constraint (each.DeliveryDateOverride >= current corporate date)
						"DeliveryDateCannotBeBeforeCurrentDateForAwardedSupplier<each.NotifiedSupplier.Supplier>;MustOverrideOnAwardScreen"
				if (each.AlternateResponseArray entered)
					if (each.DeliveryDateOverride = each.DeliveryDate)
						if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity entered)
							constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate >= current corporate date)
								"EnteredDeliveryDateCannotBeBeforeCurrentDateForFirstAlternateResponse"
						if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity entered)
							constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate >= current corporate date)
								"EnteredDeliveryDateCannotBeBeforeCurrentDateForSecondAlternateResponse"
						if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity entered)
							constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate >= current corporate date)
								"EnteredDeliveryDateCannotBeBeforeCurrentDateForThirdAlternateResponse"
						if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity entered)
							constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate >= current corporate date)
								"EnteredDeliveryDateCannotBeBeforeCurrentDateForFourthAlternateResponse"
						if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity entered)
							constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate >= current corporate date)
								"EnteredDeliveryDateCannotBeBeforeCurrentDateForFifthAlternateResponse"

			if (each.SourcingEventLine.NonServiceContracts)
				if (each.Contract exists
				and each.Contract.ContractStatus.Draft)

					if (each.AwardQuantity entered)
						if (OutputType.Standing)
							constraint (!each.NonMatchItemVenItemRel exists)
								"ContractLineAlreadyExistsForItemAndVendorItemWithDifferentUOMThanLineNumber<each.SourcingEventLine>-MustCreateNewContractOrChangeVendorItem"

						constraint (!each.GTINOnContractLineRel exists)
							"ContractLine<each.GTINOnContractLineRel.ContractLine>AlreadyExistsForGTIN<each.GlobalTradeItemNumber>OnTheResponseToSourcingEventLineNumber<each.SourcingEventLine>"

			if (OutputType.Standing
			and each.AwardQuantity entered)
				constraint (!each.MatchItemVenItemRel exists)
					"SourcingEventLineResponseExistsForItemAndVendorItemWithDifferentUOMThanLineNumber<each.SourcingEventLine>-CannotCombineOnSameContract"
				constraint (!each.AltMatchItemVenItemRel exists)
					"SourcingEventLineAlternateResponseExistsForItemAndVendorItemWithDifferentUOMThanLineNumber<each.SourcingEventLine>-CannotCombineOnSameContract"

			if (each.VendorItem entered
			and each.AwardQuantity entered)
				if (OutputType.PO)
					if (each.ItemType.Inventoried
					or  each.ItemType.NonStock)
						if (each.VendorItemDefault exists)
							constraint (each.VendorItemByItemRel exists)
								"VendorItem<each.VendorItem>NotAValidVendorItemForItem<ItemNumber>"
							constraint (each.VendorItem.Active)
								"VendorItem<each.VendorItem>EnteredOnLine<each.SourcingEventLine>IsInactive"

				if (NonServiceContracts)

					if (each.ManufacturerInformation entered)
						constraint (!each.POVendorItemForSameMfgInfoRel exists)
							"VendorItem<each.first POVendorItemForSameMfgInfoRel.VendorItem>AlreadyExistsForThisVendorWithTheSameManufacturerInformationAsFoundOnLine<each.SourcingEventLine>WithVendorItem<each.VendorItem>"

				if (each.VendorItem.VendorPriceUOM entered
				and each.VendorItem.VendorBuyUOM entered)
					constraint (each.VendorItem.VendorPriceUOM = UOM)
						"PriceUOMOf<each.VendorItem.VendorPriceUOM>ForVendorItem<each.VendorItem>DoesNotMatchResponseUOMOf<each.UOM>OnLineNumber<each.SourcingEventLine>"
				else
				if (each.VendorItem.VendorBuyUOM entered
				and !SourcingEventLine.OutputType.PO)
					constraint (each.VendorItem.VendorBuyUOM = UOM)
						"BuyUOMOf<each.VendorItem.VendorBuyUOM>ForVendorItem<each.VendorItem>DoesNotMatchResponseUOMOf<each.UOM>OnLineNumber<each.SourcingEventLine>"
				else
				if (each.VendorItem.VendorPriceUOM entered)
					constraint (each.VendorItem.VendorPriceUOM = UOM)
						"PriceUOMOf<each.VendorItem.VendorPriceUOM>ForVendorItem<each.VendorItem>DoesNotMatchResponseUOMOf<each.UOM>OnLineNumber<each.SourcingEventLine>"

				if (each.VendorItemByItemRel exists)
					if (each.GlobalTradeItemNumber exists)
						constraint (each.GlobalTradeItemNumber.Manufacturer.ManufacturerCode 			= 	each.VendorItem.Manufacturer.ManufacturerCode
						and         each.GlobalTradeItemNumber.Manufacturer.ManufacturerDivision		= 	each.VendorItem.Manufacturer.ManufacturerDivision
						and         each.GlobalTradeItemNumber.ManufacturerNumber 						= 	each.VendorItem.ManufacturerNumber)
							"ManufacturerInformationMustBeTheSameOnGTIN<each.GlobalTradeItemNumber>AndVendorItem<each.VendorItem>OnLineNumber<each.SourcingEventLine>"

				if (each.Contract exists
				and !each.ItemType.Special)
					constraint (!each.ItemOnContractLineRel exists)
						"VendorItem<each.VendorItem>WithUOMOf<each.UOM>OnLineNumber<each.SourcingEventLine>IsAlreadyOnTheExistingContract"

			if (each.PurchaseOrder exists)
				constraint (!each.PurchaseOrder.Closed.Yes)
					"CannotAppendToPurchaseOrderThatIsAlreadyClosed"
				constraint (!each.PurchaseOrder.Canceled)
					"CannotAppendToPurchaseOrderThatIsAlreadyCancelled<each.PurchaseOrder>"
				if (each.DropShipAddressRel exists)
					constraint (each.first DropShipAddressRel.PurchaseOrderInterfaceRel.DropshipAddress = each.PurchaseOrder.DropshipAddress)
						"CannotAppendToAnExistingPurchaseOrderWithDifferentDropshipAddress"
				if (each.AwardQuantity entered)
					constraint (each.DeliveryDateOverride >= each.PurchaseOrder.PurchaseOrderDate)
						"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>ForExistingPurchaseOrderForAwardedSupplier<each.NotifiedSupplier.Supplier>;MustOverrideOnAwardScreen"
				if (each.AlternateResponseArray entered)
					if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity entered)
						constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
							"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>ForExistingPurchaseOrderForAwardedSupplier<each.NotifiedSupplier.Supplier>ForFirstAlternateResponse;MustOverrideOnAwardScreen"
					if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity entered)
						constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
							"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>ForExistingPurchaseOrderForAwardedSupplier<each.NotifiedSupplier.Supplier>ForSecondAlternateResponse;MustOverrideOnAwardScreen"
					if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity entered)
						constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
							"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>ForExistingPurchaseOrderForAwardedSupplier<each.NotifiedSupplier.Supplier>ForThirdAlternateResponse;MustOverrideOnAwardScreen"
					if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity entered)
						constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
							"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>ForExistingPurchaseOrderForAwardedSupplier<each.NotifiedSupplier.Supplier>ForFourthAlternateResponse;MustOverrideOnAwardScreen"
					if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity entered)
						constraint (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
							"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>ForExistingPurchaseOrderForAwardedSupplier<each.NotifiedSupplier.Supplier>ForFifthAlternateResponse;MustOverrideOnAwardScreen"
			if (each.Participant entered)
				LocalCompany = each.Participant.Company
				constraint (PoCompanyRel exists)
					"ParticipantCompanysProcurementGroupDoesNotEqualTheSourcingCompanysProcurementGroupOnLineNumber<each.SourcingEventLine>"

			if (each.GlobalTradeItemNumber entered
			and each.AwardQuantity entered)
				if (each.ItemNumber exists)
					constraint (!each.ItemGTINItemMismatchRel exists)
						"GTIN<each.GlobalTradeItemNumber>OnEventLine<each.SourcingEventLine>IsAlreadyAssociatedWithADifferentItem"
				if (each.GlobalTradeItemNumber exists)
					constraint (each.GlobalTradeItemNumber.UnitOfMeasure = UOM)
						"UOMMustBeTheSameOnGTIN<each.GlobalTradeItemNumber>AndEventLine<each.SourcingEventLine>"
					constraint (each.GlobalTradeItemNumber.Active)
						"GTIN<each.GlobalTradeItemNumber>OnEventLine<each.SourcingEventLine>IsInactive"

				if (!each.GlobalTradeItemNumber exists
				and each.SourcingEventLine.ContractOutput)
					constraint (each.ManufacturerInformation.Manufacturer.ManufacturerCode entered)
						"ManufacturerCodeIsRequiredForGTIN<each.GlobalTradeItemNumber>OnEventLine<each.SourcingEventLine>"
					constraint (each.ManufacturerInformation.ManufacturerNumber entered)
						"ManufacturerNumberIsRequiredForGTIN<each.GlobalTradeItemNumber>OnEventLine<each.SourcingEventLine>"

				if (each.SourcingEventLine.ContractOutput)
					if (each.PovendoritemRel exists)
						constraint (each.GlobalTradeItemNumber exists)
							"GTIN<each.GlobalTradeItemNumber>OnEventLine<each.SourcingEventLine>DoesNotExist;MustMaintainOnItemMaster"

				initialize GTINCheckDigit
				GTINCheckDigit.ItemGTIN		= each.GlobalTradeItemNumber
				LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
				constraint (LocalValidCheckDigit = true)
					"GTINCheckDigitIsInvalid"



			if (each.SourcingEventLine.OutputType.PO
			and each.AwardQuantity entered)
				if (each.SourcingEventLine.ItemNumber exists)
					if (each.GlobalTradeItemNumber entered)
						constraint (each.GlobalTradeItemNumber exists)
							"GTIN<each.GlobalTradeItemNumber>OnEventLine<each.SourcingEventLine>DoesNotExist;MustMaintainOnItemMaster"

		SendLineCancelledEmailMessage
			LocalNotifiedSupplier = each.NotifiedSupplier
			send email
				to each.NotifiedSupplier.SupplierSourceId.EmailAddress
				cc DerivedProxyEmailAddressList
				from DerivedFromEmail
				subject "<Company.FinalCancelEmailSubject>"
				Contents
					"<Company.FinalCancelEmailContent>"
					"<SourcingEvent.DerivedEmailLink>"

		CreateLineCancelledSupplierContactMessage
			invoke Create SupplierContactMessage
				invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
				invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
				invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
				invoked.CreationDateTime				= current timestamp
				invoked.MessageTitle					= Company.FinalCancelEmailSubject
				invoked.MessageText						= Company.FinalCancelEmailContent
				invoked.Status							= 1
				invoked.Priority						= 2
				invoked.SystemGenerated					= true
				invoked.ReleaseStatus					= 2
				invoked.OriginatingEvent    			= SourcingEvent
				invoked.OriginatingCompany  			= Company
                invoked.MessageOwner                    = SourcingEvent.Buyer

		SendAwardedEmailMessage
			LocalNotifiedSupplier = each.NotifiedSupplier
			send email
				to each.NotifiedSupplier.SupplierSourceId.EmailAddress
				cc DerivedProxyEmailAddressList
				from DerivedFromEmail
				subject "<Company.FinalAwardEmailSubject>"
				Contents
					"<Company.FinalAwardEmailContent>"

		CreateAwardedSupplierContactMessage
			invoke Create SupplierContactMessage
				invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
				invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
				invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
				invoked.CreationDateTime				= current timestamp
				invoked.MessageTitle					= Company.FinalAwardEmailSubject
				invoked.MessageText						= Company.FinalAwardEmailContent
				invoked.Status							= 1
				invoked.Priority						= 2
				invoked.SystemGenerated					= true
				invoked.ReleaseStatus					= 2
				invoked.OriginatingEvent    			= SourcingEvent
				invoked.OriginatingCompany  			= Company
				invoked.MessageOwner                    = SourcingEvent.Buyer

		BuildProxyEmailAddressList
			LocalProxyEmailAddressFound = false
			LocalProxyEmailAddressList  = ""
			for each SupplierContactProxyRel
				if (LocalProxyEmailAddressFound)
					LocalProxyEmailAddressList = LocalProxyEmailAddressList + "," + each.EmailAddress
				else
					LocalProxyEmailAddressList = each.EmailAddress
					LocalProxyEmailAddressFound = true

		CreatePurchaseOrderLine

			invoke Unreleased.Create PurchaseOrderLine
				assign result to SavedPurchaseOrderLine
				invoked.Company                     	= Company
				invoked.PurchaseOrder               	= LocalPONumber
				if (LocalPOLineItemType = "I"
				or  LocalPOLineItemType = "N")
					invoked.Item                        = LocalItemNumber
				else
				if (LocalPOLineItemType = "X"
				or  LocalPOLineItemType = "S")
					if (LocalItemNumber entered)
						invoked.Item                    = LocalItemNumber
					else
						invoked.Item                    = LocalPOLineVendorItem
				invoked.ItemType                    	= LocalPOLineItemType
				invoked.ServiceCode                     = ServiceCode
				invoked.Description                 	= LocalPOLineDescription
				invoked.Quantity                    	= LocalPOLineQuantity
				invoked.EarlyDeliveryDate				= LocalPOLineRequestedDeliveryDate
				invoked.EnteredBuyUOM					= LocalPOLineEnteredUOM
				if (LocalPOLineEnteredUnitCost > 0)
					if (LocalPONumber.Currency          = each.SourcingEventResponse.EnteredCurrencyCode)
						invoked.EnteredUnitCost         = LocalPOLineCurrencyUnitCost
					else
					if (LocalPONumber.Currency          = SourcingEvent.CurrencyCode)
						invoked.EnteredUnitCost         = LocalPOLineEnteredUnitCost
					else
						initialize LocalCurrencyExchange

						SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
						SavedEnterpriseGroup					= Company.ProcurementGroup
						SavedCurrencyTable      				= Company.CurrencyTable
						SavedTransactionAmount      			= LocalPOLineCurrencyUnitCost
						SavedExchangeDate		 	 			= current corporate date
						LocalCurrencyExchange.ToCurrency 		= LocalPONumber.Currency

						invoked.EnteredUnitCost 			    = LocalCurrencyExchange.OutputCurrencyAmount

				invoked.VendorItem                  	= LocalPOLineVendorItem
				if (LocalPOLineItemType = "X"
				or  LocalPOLineItemType = "S")
					invoked.CommodityCode         		= CommodityCode
				invoked.ShipToLocation              	= ShipTo
				invoked.CostOption						= LocalPOLineCostOption
				invoked.ItemGTIN						= LocalPOLineItemGTIN
				invoked.Manufacturer                	= ManufacturerInformation.Manufacturer
				invoked.ManufacturerNumber          	= ManufacturerInformation.ManufacturerNumber
				invoked.SourcingEvent                   = SourcingEvent
				if (DistributionType = DistributionType.Percent)
					invoked.DistributionBy = 0 
				else
				if (DistributionType = DistributionType.Quantity)
					invoked.DistributionBy = 2 
				else
				if (DistributionType = DistributionType.Amount)
					invoked.DistributionBy = 1 
				invoked.CostCode                    	= "R"
				invoked.BypassDistributionCreation    	= true
				invoked.TransientBypassCostDefaulting 	= true
				if (CreatedfromRQ)
					invoked.Taxable                     = LocalSourceLine.RequisitionLineRel.PurchaseTaxable
					invoked.TaxCode                     = LocalSourceLine.RequisitionLineRel.PurchaseTaxCode
					invoked.LateDeliveryDate            = LocalSourceLine.RequisitionLineRel.LateDeliveryDate
					invoked.MajorPurchasingClass        = LocalSourceLine.RequisitionLineRel.MajorPurchasingClass
					invoked.MinorPurchasingClass        = LocalSourceLine.RequisitionLineRel.MinorPurchasingClass
					invoked.UserDate3                   = LocalSourceLine.RequisitionLineRel.UserDate3
					invoked.UserDate4                   = LocalSourceLine.RequisitionLineRel.UserDate4
					invoked.PurchaseOrderUserField2     = LocalSourceLine.RequisitionLineRel.PurchaseOrderUserField2
					invoked.PurchaseOrderUserField4     = LocalSourceLine.RequisitionLineRel.PurchaseOrderUserField4
					invoked.PurchaseOrderUserField6     = LocalSourceLine.RequisitionLineRel.PurchaseOrderUserField6
					invoked.InspectionRequired          = LocalSourceLine.RequisitionLineRel.InspectionRequired
					invoked.CertificationRequired       = LocalSourceLine.RequisitionLineRel.CertificationRequired
					invoked.PunchoutId                  = LocalSourceLine.RequisitionLineRel.PunchoutId
					invoked.UseProcurementCard          = LocalSourceLine.RequisitionLineRel.UseProcurementCard
					invoked.EAMOperationNumber          = LocalSourceLine.RequisitionLineRel.EAMOperationNumber
					invoked.EAMSequenceNumber           = LocalSourceLine.RequisitionLineRel.EAMSequenceNumber
					invoked.EAMWorkOrderNumber          = LocalSourceLine.RequisitionLineRel.EAMWorkOrderNumber
					invoked.CnCode                      = LocalSourceLine.RequisitionLineRel.ConsignCode
					invoked.GlobalLineType              = LocalSourceLine.RequisitionLineRel.GlobalLineType


			if  (CreatedfromRQ
			and  InventoryBalance
			and (Company != LocalSourceLine.OperatingCompany
			or 	 LocalSourceLine.RequestingLocation != ShipTo))
				invoke CreateWarehouseDemand LocalSourceLine.RequisitionLineRel
					invoked.PrmAllocate			= false
			invoke SystemCreate PurchaseOrderLineSource
				assign result to SavedPurchaseOrderLineSource
				invoked.Company                                         = Company
				invoked.PurchaseOrder									= LocalPONumber
				invoked.PurchaseOrderLine 								= SavedPurchaseOrderLine.PurchaseOrderLine
				invoked.PurchaseOrderLineSource.SourceDocumentOrigin	= LocalSourceLine.OriginCode
				invoked.PurchaseOrderLineSource.OperatingCompany		= LocalSourceLine.OperatingCompany
				invoked.PurchaseOrderLineSource.SourceDocumentNumeric	= LocalSourceLine.SourceDocumentNumeric
				invoked.PurchaseOrderLineSource.SourceDocumentLineNumber= LocalSourceLine.LineNumber
				invoked.RequestingLocation								= LocalSourceLine.RequestingLocation
				invoked.Quantity                                        = LocalPOLineQuantity
				invoked.EnteredUOM                                      = LocalPOLineEnteredUOM
				invoked.RequestedDeliveryDate                           = LocalPOLineRequestedDeliveryDate
				if (CreatedfromRQ)
					invoked.Requester                                   = LocalSourceLine.RequisitionHeaderRel.Requester
					invoked.DeliverTo	                                = LocalSourceLine.RequisitionLineRel.DeliverTo
					invoked.AllocationPriority                          = LocalSourceLine.RequisitionLineRel.AllocationPriority
			if (CreatedfromRQ)
				for each LocalSourceLine.RequisitionLineRel.RequisitionLineComment set
					if (not each.CommentType.PrintOnPickList
					and not each.CommentType.PrintOnRequisition)
						invoke SystemCreateLine PurchaseOrderLineComment
							fill in fields from each
								except invoked.Attachment.FSMAttachmentIDM
							invoked.PurchaseOrder		= LocalPONumber
							invoked.PurchaseOrderLine	= SavedPurchaseOrderLine.PurchaseOrderLine
							invoked.Attachment.File		= each.Attachment.File
							invoked.Attachment.MimeType	= each.Attachment.MimeType
							invoked.Attachment.Title	= each.Attachment.Title

					if (each.CommentType.PrintOnDeliveryTicket)
						invoke SystemCreate PurchaseOrderLineSourceComment
							fill in fields from each
							invoked.PurchaseOrder			= LocalPONumber
							invoked.PurchaseOrderLine		= SavedPurchaseOrderLine.PurchaseOrderLine
							invoked.PurchaseOrderLineSource	= SavedPurchaseOrderLineSource.PurchaseOrderLineSource
			if (!CreatedfromRQ
			and !InventoryBalance)
				for each SourcingEventLineDistribution set
					invoke CreateRestricted PurchaseOrderLineDistribution
						invoked.Company                     = Company
						invoked.PurchaseOrder           	= LocalPONumber
						invoked.PurchaseOrderLine			= SavedPurchaseOrderLine.PurchaseOrderLine
						invoked.AddOnCharge                 = blank
						invoked.DistributionAccount			= each.DistributionAccount
						invoked.AssetInformation            = each.AssetInformation
						invoked.DistributionPercent			= each.Percent
						if (NumberOfResponsesAwarded > 0
						and each.Quantity > 0)
							invoked.DistributionQuantity    = (each.Quantity * (LocalPOLineQuantity/TotalAwardQuantity))
						else
							invoked.DistributionQuantity	= each.Quantity
						invoked.DistributionAmount			= each.Amount
						invoked.TransientBypassCommittedContractValidation = true
			else
			if (CreatedfromRQ
			and !InventoryBalance)
				for each LocalSourceLine.ReqProcurementTransactionDistributionRel
					invoke CreateRestricted PurchaseOrderLineDistribution
						invoked.Company                     = Company
						invoked.PurchaseOrder           	= LocalPONumber
						invoked.PurchaseOrderLine			= SavedPurchaseOrderLine.PurchaseOrderLine
						invoked.AddOnCharge                 = blank
						invoked.DistributionAccount			= each.DistributionAccount
						if (DistributionType.Percent)
							invoked.DistributionPercent			= each.DistributionPercent
						if (DistributionType.Quantity)
							invoked.DistributionQuantity		= each.DistributionQuantity
						if (DistributionType.Amount)
							invoked.DistributionAmount			= each.DistributionAmount
						invoked.TransientBypassCommittedContractValidation = true
			for each SourcingLineComment
				if (!each.Type.PrintOnDeliveryTicket)
					invoke SystemCreateLine PurchaseOrderLineComment
						invoked.Company         	= Company
						invoked.PurchaseOrder		= LocalPONumber
						invoked.PurchaseOrderLine 	= SavedPurchaseOrderLine.PurchaseOrderLine
						invoked.CommentType     	= each.Type
						invoked.CommentText     	= each.Comment
						invoked.CommentTitle    	= each.Title
						invoked.Attachment.File     = each.Attachment.File
						invoked.Attachment.MimeType = each.Attachment.MimeType
						invoked.Attachment.Title  	= each.Attachment.Title
				if (each.Type.PrintOnDeliveryTicket)
					invoke SystemCreate PurchaseOrderLineSourceComment
						invoked.Company         		= Company
						invoked.PurchaseOrder			= LocalPONumber
						invoked.PurchaseOrderLine 		= SavedPurchaseOrderLine.PurchaseOrderLine
						invoked.PurchaseOrderLineSource	= SavedPurchaseOrderLineSource.PurchaseOrderLineSource
						invoked.CommentType     		= "D"
						invoked.CommentText     		= each.Comment
						invoked.CommentTitle    		= each.Title
						invoked.Attachment      		= each.Attachment
			LocalSupplierGroup 		= each.SourcingEventResponse.NotifiedSupplier.SupplierGroup
			LocalSupplier 			= each.SourcingEventResponse.NotifiedSupplier.Supplier
			LocalSupplierSourceId 	= each.SourcingEventResponse.NotifiedSupplier.SupplierSourceId
			for each SourcingEventLineResponseAOCsRel
				if (each.NotifiedSupplier.SupplierGroup     = LocalSupplierGroup
				and each.NotifiedSupplier.Supplier 			= LocalSupplier
				and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId
				and each.SomethingEntered)
					LocalPOLine      = SavedPurchaseOrderLine.PurchaseOrderLine
					LocalAddOnCharge = each.AOC
					if (PurchaseOrderAndLineAddOnChargeRel !exists)
						invoke Create PurchaseOrderAndLineAddOnCharge
							invoked.Company                     				= Company
							invoked.PurchaseOrder           					= LocalPONumber
							invoked.PurchaseOrderLine							= SavedPurchaseOrderLine.PurchaseOrderLine
							invoked.AddOnCharge 								= each.AOC
							invoked.ZeroCost                                    = each.ZeroCost
							invoked.AddOnChargeOrigin                           = each.AddOnChargeOrigin
							invoked.Account                                     = each.Account
							if (each.AOCRate > 0)
								invoked.AddOnChargeEntryMethod = "R"
								invoked.AddOnChargePercent     = each.AOCRate
							else
							if (each.AOCOption.PerUnit)
								invoked.AddOnChargeEntryMethod = "U"
								if (LocalPONumber.Currency     = each.SourcingEventResponse.EnteredCurrencyCode)
									invoked.EnteredUnitCost    = each.CurrencyAOCCost
								else
								if (LocalPONumber.Currency     = SourcingEvent.CurrencyCode)
									invoked.EnteredUnitCost    = each.AOCCost
								else
									initialize LocalCurrencyExchange

									SavedFromCurrency     		= each.SourcingEventResponse.EnteredCurrencyCode
									SavedEnterpriseGroup		= Company.ProcurementGroup
									SavedCurrencyTable      	= Company.CurrencyTable
									SavedTransactionAmount      = each.CurrencyAOCCost
									SavedExchangeDate		 	= current corporate date
									LocalCurrencyExchange.ToCurrency 		= LocalPONumber.Currency

									invoked.EnteredUnitCost 	= LocalCurrencyExchange.OutputCurrencyAmount
							else
							if (each.AOCOption.Total)
								invoked.AddOnChargeEntryMethod = "T"
								if (LocalPONumber.Currency     = each.SourcingEventResponse.EnteredCurrencyCode)
									invoked.TotalAddOnChargeAmount    = each.CurrencyAOCCost
								else
								if (LocalPONumber.Currency     = SourcingEvent.CurrencyCode)
									invoked.TotalAddOnChargeAmount    = each.AOCCost
								else
									initialize LocalCurrencyExchange

									SavedFromCurrency     		= each.SourcingEventResponse.EnteredCurrencyCode
									SavedEnterpriseGroup		= Company.ProcurementGroup
									SavedCurrencyTable      	= Company.CurrencyTable
									SavedTransactionAmount      = each.CurrencyAOCCost
									SavedExchangeDate		 	= current corporate date
									LocalCurrencyExchange.ToCurrency 		= LocalPONumber.Currency

									invoked.TotalAddOnChargeAmount 	= LocalCurrencyExchange.OutputCurrencyAmount

	Derived Fields
		NumberOfLineComments is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SourcingEventLineComment set)

		NumberOfSuppliersWhoResponded is a ComputeField
			type is Numeric 6
			(instance count of SubmittedResponses)

		NumberOfLineSources is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SourcingEventLineSource set)

		NumberOfResponsesAwarded is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SomeQuantityAwarded)

		TotalDistributionQuantity is a DerivedField
			type is like Quantity
			restricted
			return (sum QuantityDistributions.Quantity)

		TotalDistributionPercent is a ComputeField
			type is Percent size 6.3
			restricted
   			(sum PercentDistributions.Percent)

   		TotalAwardQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			return (sum SomeQuantityAwarded.TotalAwardQuantity)


		TotalAwardedByLine is a DerivedField
			type is like InternationalAmount
			return (TotalMainAwardAmount + TotalAlternateAwardAmount)

		TotalMainAwardAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum AwardedLines.AwardTotalResponse)

		TotalAlternateAwardAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum AwardedAlternateLines.AwardTotalResponse)

   		LineCancelQuantity is a DerivedField
			type is like Quantity
			restricted
   			return (Quantity - TotalAwardQuantity)

   		NumberOfLineQuestions is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SourcingEventLineQuestion set)

		NumberOfLineAttachments is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SourcingEventLineAttachment set)

   		LineQuestion is a MessageField
			restricted
			"AdditionalQuestionsExistForOneOrMoreEventLines.YouCanViewTheseQuestionsInTheLinesTab."

		LineQuestionExist is a ConditionalField
			type is Alpha size 100
			restricted
			if (SourcingEventLineQuestion set exist)
				LineQuestion
			else
				blank

		LineInfo is a StringField
			type is Alpha size 20
			restricted
			Quantity
			" "
			UOM.UnitOfMeasure

		ContractType is a ConditionalField
			type is Numeric size 1
			restricted
			if (OutputType.Contract)
				1
			else
			if (OutputType.Blanket)
				2
			else
			if (OutputType.Standing)
				3
			else
			if (OutputType.CatalogQuote)
				4
			else
			if (OutputType.Service)
				5
			else
				blank

		DraftMessage is a LabelField
			restricted
			"Draft"

		OpenMessage is a LabelField
			restricted
			"Open"

		PendingAwardApprovalMessage is a LabelField
			restricted
			"PendingAwardApproval"

		PendingOutputMessage is a LabelField
			restricted
			"PendingOutput"

		CancelledMessage is a LabelField
			restricted
			"Cancelled"

		ClosedMessage is a LabelField
			restricted
			"Closed"
		
		SourcingEventLineItemRepresentativeText is a LabelField
			"<ItemNumber>_-_<ItemDescription>"

		DerivedStatus is a ConditionalField
			type is Alpha 55
			if (Status.Draft)
				DraftMessage
			else
			if (Status.Open)
				OpenMessage
			else
			if (Status.Awarded
			and AwardApprovalStatus.NeedsApproval
			and AwardNotificationStatus.NotNotified)
				PendingAwardApprovalMessage
			else
			if (Status.Awarded
			and !OutputCreated)
				PendingOutputMessage
			else
			if (Status.Awarded)
				AwardedMessage
			else
			if (Status.Cancelled)
				CancelledMessage
			else
			if (Status.Closed)
				ClosedMessage
			else
				blank

		AwardedMessage is a MessageField
			restricted
			"Awarded"

		VendorItemNotEnteredSupplier is a StringField
			type is Alpha size 10
			restricted
			first VendorItemNotEntered.SourcingEventResponse.NotifiedSupplier.Supplier

		IsResponseRequired is a ConditionalField
			type is Alpha size 10
			if (RequireResponse)
				RequiredLine
			else
				SourcingEventLine

		RequiredLine is a StringField
			type is Alpha size 10
			"*"SourcingEventLine

		ViewMessage is a MessageField
			restricted
			"View"

		LineAttachments is a ConditionalField
			type is Alpha size 10
			if (LineAttachmentsExist)
				ViewMessage
 			else
 				blank

		LineQuestions is a ConditionalField
			type is Alpha size 10
			if (LineQuestionsExist)
				ViewMessage
 			else
 				blank

 		TotalWeightingByLine is a ComputeField
			type is Percent size 6.3
   			(WeightingCriteria.PriceWeighting + WeightingCriteria.DiversityWeighting + WeightingCriteria.DeliveryWeighting + TotalLineQuestionWeighting)

		TotalLineQuestionWeighting is a ComputeField
			type is Percent size 6.3
   			(sum LineQuestionsWithWeighting.QuestionWeighting)

		LowestBidDisplay is a ConditionalField
			type is Alpha size 20
			if (DisplayLowestBidAmount
			and LowestBid entered)
				LowestBid
			else
				blank

		YesMessage is a MessageField
			restricted
			"Yes"

		NoMessage is a MessageField
			restricted
			"No"

		ItemByManufacturerCount         is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ItemByManufacturerRel)

		ContractAwardedLines is a ConditionalField
			type is Alpha size 12
			if (SomeContractAwardExists)
				YesMessage
			else
			if (ContractOutput)
				NoMessage
			else
				blank

		LowestBid is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			restricted
			LowestBid = first CurrentBid.NetUnitPrice
			for each CurrentBid
				if (each.NetUnitPrice < LowestBid)
					LowestBid = each.NetUnitPrice

		DisplayNoChargeMsg is a MessageField
			restricted
			"NoChargeBidsExistForThisEventLine"

		DisplayNoChargeMessage is a ConditionalField
			type is Alpha size 100
			restricted
			if (NoChargeBid exists)
	 			DisplayNoChargeMsg
			else
				blank

		DisplayLowestMsg1 is a MessageField
			restricted
			"ThisEventLineRequiresTheUnitPriceToBeLowerThanTheCurrentLowestBid"

		DisplayLowestMsg2 is a MessageField
			restricted
			"ThisEventLineRequiresTheUnitPriceToBeLowerThanOrEqualToTheCurrentLowestBid"

		DisplayLowestMessage is a ConditionalField
			type is Text
			restricted
			if (LowestBidOption.LessThanLowestBid)
	 			DisplayLowestMsg1
			else
			if (LowestBidOption.LessThanOrEqualToLowestBid)
 				DisplayLowestMsg2
			else
				blank

		BestLineScoreCalc is a DerivedField
	 		type is like InternationalAmount
				precision is DerivedNumberOfDecimalsCost
			restricted
			BestLineScoreCalc = first SubmittedResponsesConsiderForScoring.TotalLineScore
			for each SubmittedResponsesConsiderForScoring
				if (each.TotalLineScore >= BestLineScoreCalc)
					BestLineScoreCalc  = each.TotalLineScore

		DisplayQuantityMsg is a MessageField
			restricted
			"ThisEventLineRequiresTheResponseQuantityToEqualTheLineQuantity"

		DisplayQuantityMessage is a ConditionalField
			type is Text
			restricted
			if (RequireFullQuantity)
	 			DisplayQuantityMsg
			else
				blank

		DisputedTermsMessage is a MessageField
			restricted
 			"DisputedTermAndCondition"

		EnterAwardDefaultsMessage is a MessageField
			restricted
			"EnterAwardDefaults"

		ViewAwardDefaultsMessage is a MessageField
			restricted
			"ViewAwardDefaults"

		DerivedAwardDefaults is a ConditionalField
			type is Text
			restricted
			if (!DefaultsEntered)
				EnterAwardDefaultsMessage
			else
				ViewAwardDefaultsMessage

		POMessage is a MessageField
			restricted
			"PO"

		ContractMessage is a MessageField
			restricted
			"Contract"

		BlanketMessage is a MessageField
			restricted
			"Blanket"

		CatalogQuoteMessage is a MessageField
			restricted
			"CatalogQuote"

		StandingMessage is a MessageField
			restricted
			"Standing"

		ServiceMessage is a MessageField
			restricted
			"Service"

		NoOutputCMMessage is a MessageField
			restricted
			"ContractNoOutput"

		NoOutputMessage is a MessageField
			restricted
			"NoOutput"

		DerivedOutputType is a ConditionalField
			type is Text
			if (OutputType.PO)
				POMessage
			else
			if (OutputType.Contract)
				ContractMessage
			else
			if (OutputType.Blanket)
				BlanketMessage
			else
			if (OutputType.CatalogQuote)
				CatalogQuoteMessage
			else
			if (OutputType.Standing)
				StandingMessage
			else
			if (OutputType.Service)
				ServiceMessage
			else
			if (OutputType.NoOutput
			and CreatedfromCM)
				NoOutputCMMessage
			else
				NoOutputMessage

		DerivedStrippedManufacturerNumber is a DerivedField
			type is like ManufacturerNumber
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(ManufacturerInformation.ManufacturerNumber)

		MultipleLocationsMessage is a MessageField
			restricted
			"MultipleLocations"

		RequestingLocationsLink is a DerivedField
			type is Text
			if (instance count of OriginCodeRQ > 1)
				return MultipleLocationsMessage
			else
			if (instance count of OriginCodeRQ = 1)
				return first OriginCodeRQ.RequestingLocation
			else
				return ""

		DerivedPerUnitEstimateAOC is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (sum SourcingEventLineAOC set.PerUnitEstimate)

		DerivedNetUnitPriceEstimate is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (PerUnitEstimate + DerivedPerUnitEstimateAOC)

		ShipToLocationOnRequisition is a DerivedField
			type is like InventoryLocation
			restricted
			if (CreatedfromRQ)
				return first OriginCodeRQ.ShipTo
			else
				return ""

		DerivedExtendedEstimate is a DerivedField
			type is like InternationalAmount
			return (Quantity * PerUnitEstimate)

		DerivedExtendedAOCEstimate is a DerivedField
			type is like InternationalAmount
			return (Quantity * DerivedPerUnitEstimateAOC)

		DerivedTotalEstimate is a DerivedField
			type is like InternationalAmount
			return (DerivedExtendedEstimate + DerivedExtendedAOCEstimate)

		LineQuestionCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventLineQuestion set exists)
				return "(" + instance count of SourcingEventLineQuestion set + ")"
			else
				return ""

		LineSupplierQuestionCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SELSupplierQuestionPortalRel exists)
				return "(" + instance count of SELSupplierQuestionPortalRel + ")"
			else
				return ""

		LineDistributionCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventLineDistribution set exists)
				return "(" + instance count of SourcingEventLineDistribution set + ")"
			else
				return ""

		LineCommentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventLineComment set exists)
				return "(" + instance count of SourcingEventLineComment set + ")"
			else
				return ""

		LineAttachmentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventLineAttachment set exists)
				return "(" + instance count of SourcingEventLineAttachment set + ")"
			else
				return ""

		LineWeightingIndicator is a DerivedField
			type is Alpha size up to 20
			restricted
			if (WeightingEnteredForLine)
				return "*"
			else
				return ""

		LineAOCCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventLineAOC set exists)
				return "(" + instance count of SourcingEventLineAOC set + ")"
			else
				return ""

		DerivedProxyEmailAddressList is a DerivedField 
			type is EmailAddressField with multiple addresses
			holds pii
			restricted
			include BuildProxyEmailAddressList
			return LocalProxyEmailAddressList

 		DerivedItemDescription is a StringField
 			type is Alpha size 80
 			ItemNumber
			"-"
			ItemNumber.Description

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemNumber exists)
				ItemNumber.NumberOfDecimalsQuantity
			else
				InventoryCompanyRel.NumberOfDecimalsQuantity

		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemNumber exists)
				ItemNumber.NumberOfDecimalsCost
			else
				InventoryCompanyRel.NumberOfDecimalsCost
		
		DerivedFromEmail is a DerivedField
			type is Alpha size 100
			if (Company.EmailAddressOption.UseCompanyEmailAddress)
				return Company.EventEmailAddress
			else
				return SourcingEvent.Buyer.EmailAddress
	Conditions
		RecordExists
			restricted
			when (SourcingEventLine exists)

		IsATemplate
			restricted
			when (SourcingEvent.Template = true)

		AwardDistributionExists
			restricted
			when (AwardDistribution exists)

		MultipleLineSource
			restricted
			when (NumberOfLineSources > 1)

		SupplierCanViewAward
			restricted
			when (AwardedLineResponses exists)

		DistributionsTotal
			restricted
			when (DistributionType.Amount
			or   (DistributionType.Percent
			and   TotalDistributionPercent 	= 100%)
			or	 (DistributionType.Quantity
			and   TotalDistributionQuantity	= Quantity))

		DistributionsTotalAtAward
			restricted
			when (DistributionType.Amount
			or   (DistributionType.Percent
			and   TotalDistributionPercent 	= 100%)
			or	 (DistributionType.Quantity
			and   TotalDistributionQuantity	= TotalAwardQuantity))

		PurchaseOrderLineSourceExists
			restricted
			when (PurchaseOrderLineSourceRel exists)

		RQPurchaseOrderLineSourceExists
			restricted
			when (PurchaseOrderLineSourceRel exists)

		GTINEntered
			restricted
			when (GlobalTradeItemNumber entered)

		LineAwarded
			restricted
			when (TotalAwardQuantity = Quantity)

		Awarded
			when (Status.Awarded)

   		CreatedfromSource
			restricted
   			when (CreatedfromRQ
   			or	  CreatedfromCM)

   		CreatedfromRQ
			restricted
   			when (OriginCodeRQ exists)

   		SSAmountDistributions
			restricted
   			when (!CreatedfromRQ
			and  (!CreatedfromCM
			or    SourcingEventLineDistribution set exists)
   			and    DistributionType.Amount)

   		SSQuantityDistributions
			restricted
   			when (!CreatedfromRQ
			and  (!CreatedfromCM
			or    SourcingEventLineDistribution set exists)
   			and    DistributionType.Quantity)

   		SSPercentDistributions
			restricted
   			when (!CreatedfromRQ
			and  (!CreatedfromCM
			or    SourcingEventLineDistribution set exists)			
   			and    DistributionType.Percent)

   		CreatedfromCM
			restricted
   			when (OriginCodeCM exists)

   		InLineActionableState
			restricted
			when (Status.Draft
			or	  Status.Open)

		NotCancelledOrClosed
			restricted
			when (Status.Draft
			or	  Status.Open
			or	 (Status.Awarded
			and   !OutputCreated))

		PointerfaceCreated
			restricted
			when (PointerfaceCreatedOnSource exists)

		ContractOutput
			restricted
			when (OutputType.Contract
			or	  OutputType.Blanket
			or 	  OutputType.CatalogQuote
			or    OutputType.Standing
			or    OutputType.Service
			or   (OutputType.NoOutput
			and   CreatedfromCM))

		BlanketOrStanding
			restricted
			when (OutputType.Blanket
			or    OutputType.Standing)

		Standing
			restricted
			when (OutputType.Standing)

		NonServiceContracts
			restricted
			when (OutputType.Contract
			or	  OutputType.Blanket
			or 	  OutputType.CatalogQuote
			or    OutputType.Standing)

		NonStandingContracts
			restricted
			when (OutputType.Contract
			or	  OutputType.Blanket
			or 	  OutputType.CatalogQuote
			or    OutputType.Service)

		BlanketOrContract
			restricted
			when (OutputType.Contract
			or	  OutputType.Blanket)

		NonStandingOrServiceContracts
			restricted
			when (OutputType.Contract
			or	  OutputType.Blanket
			or 	  OutputType.CatalogQuote)

		EffectiveDateOutputTypes
			restricted
			when (OutputType.Contract
			or	  OutputType.Blanket
			or 	  OutputType.CatalogQuote
			or    OutputType.Standing
			or    OutputType.Service
			or   (OutputType.NoOutput
			and   CreatedfromCM))

		AllVendorItemsEntered
			restricted
			when  (SourcingEvent.VendorItemProcessing != 4
			or    !NonServiceContracts
			or     ItemType.Service
			or    (SourcingEvent.VendorItemProcessing = 4
			and    NonServiceContracts
			and   !ItemType.Service
			and    VendorItemNotEntered !exists))

		LineQuestionsExist
			restricted
			when (SourcingEventLineQuestion set exists)

		LineAttachmentsExist
			restricted
			when (SourcingEventLineAttachment set exists)

		LineReqQuestions
			restricted
			when (LineReqQuestionsRel exists)

		SELSupplierQuestionPortalExists
			restricted
			when (SELSupplierQuestionPortalRel exists)

		LineQuestionsExistNoSupplierQuestions
			restricted
			when (SELSupplierQuestionPortalRel !exists
			and   LineQuestionsExist)

		SELSupplierQuestionsExist
			restricted
			when (SELSupplierQuestionPortalRel exists
			and   SourcingEvent.LineQuestionsExist)

		SELQuestionsAreConditional
			restricted
			when (SourcingEvent.AllowsConditionalQuestions
			and   SourcingEvent.LineQuestionsExist)

		SELQuestionsAreNotConditional
			restricted
			when (!SourcingEvent.AllowsConditionalQuestions
			and   SourcingEvent.LineQuestionsExist)

		InventoryBalance
			restricted
			when (OutputType.PO
			and   ItemType.Inventoried)

		Itemmast
			restricted
			when (ItemType.Inventoried
			or	  ItemType.NonStock)
		FinalAwardValid
			restricted
			when (Status.Open
			and   SourcingEvent.Status.Open
			and  (((OutputType.PO
			or    (OutputType.NoOutput
			and   !CreatedfromCM))
			and   TotalAwardQuantity > 0)
			or   (ContractOutput
			and   SomeContractAwardExists)))
		MainContractAwardExists
			restricted
			when (AwardedContractLines exists)
		AlternateContractAwardExists
			restricted
			when (AllowAlternateResponses
			and   AwardedAlternateContractLines exists)

		SomeContractAwardExists
			restricted
			when (MainContractAwardExists
			or    AlternateContractAwardExists)
		CreateOutputValid
			restricted
			when (Status.Awarded
			and	  !OutputCreated
			and   SourcingEvent.Status.Open)
		ChangeAwardValid
			restricted
			when (Status.Awarded
			and   !OutputCreated
			and   SourcingEvent.Status.Open)
		LineCommentsExist
			restricted
			when (SourcingEventLineComment set exists)
		SupplierLineCommentsExist
			restricted
			when (SupplierSourcingEventLineCommentsRel exists)
		SupplierLineAttachmentsExist
			restricted
			when (SupplierSourcingEventLineAttachmentsRel exists)
		LineDistExist
			restricted
			when (SourcingEventLineDistribution set exists)
		QtyAlert
			restricted
			when (TotalAwardQuantity != 0
			and   TotalAwardQuantity != Quantity)
		DeleteAwardValid
			restricted
			when (AwardedContractLines exists
			or   AwardedPOLines exists
			or   AwardedAlternateLines exists)
		WeightingsTotalByLine
			restricted
			when (TotalWeightingByLine = 100%)
		DisplayLineWeighting
			restricted
			when (SourcingEvent.WeightingCriteria.PriceWeighting entered
			or	 (OutputType.PO
			and	  SourcingEvent.WeightingCriteria.DeliveryWeighting entered))
		WeightingEnteredForLine
			restricted
			when (TotalWeightingByLine > 0)
		LowestBidCond
			restricted
			when (LowestBidOption.LessThanLowestBid
			or    LowestBidOption.LessThanOrEqualToLowestBid)
		EventWithNegotiatedTerms
			restricted
			when (SourcingEvent.ResponsesWithNegotiatedTerms exists)
		AddOnChargesExist
			restricted
			when (SourcingEventLineOnlyAOCsRel exists)
		SubmittedAlternateResponsesExist
			restricted
			when (SubmittedAlternateResponses exists)
		MainBidsExist
			restricted
			when (MainBidsRel exists)
		DisplayLineResponsesBySupplierNotFinalNotTwoStep
			restricted
			when (MainBidsExist
			and   !SourcingEvent.BestAndFinalOffer
			and   !SourcingEvent.TwoStepBidding.Separate
			and   !SourcingEvent.TwoStepBidding.Combined)
		DisplayLineResponsesBySupplierBestAndFinalFirstStep
			restricted
			when  (MainBidsExist
			and    SourcingEvent.BestAndFinalOffer)
		AlternateResponsesExist
			restricted
			when (AlternateResponsesEnteredRel exists)
		DisplayAltLineResponsesBySupplierBestAndFinalFirstStep
			restricted
			when (SubmittedAlternateResponsesExist
			and   SourcingEvent.BestAndFinalOffer)
		DisplayLineResponsesBySupplierSecondSteps
			restricted
			when  (MainBidsExist
			and   (SourcingEvent.BestAndFinalStarted
			or    (SourcingEvent.StepTwoStarted
			and   !SourcingEvent.BestAndFinalOffer)))
		AlternateResponsesBySupplierSecondSteps
			restricted
			when  (SubmittedAlternateResponsesExist
			and   (SourcingEvent.BestAndFinalStarted
			or    (SourcingEvent.StepTwoStarted
			and   !SourcingEvent.BestAndFinalOffer)))
		DisplayVendorItem
			restricted
			when (!OutputType.Service)
		HasCancelledQuantity
			restricted
			when (CancelledQuantity entered)
		HasAlternateAward
			restricted
			when (AlternateQuantityOrContractAwarded exists)
		HasAlternateNonAward
			restricted
			when (NonAwardedAlternateLines exists)
		HasAward
			restricted
			when (QuantityOrContractAwarded exists)
		HasSecondDescription
			restricted
			when (ItemDescription2 entered)
		HasThirdDescription
			restricted
			when (ItemDescription3 entered)

		DefaultsEntered
			restricted
			when (DefaultContractType 		entered
			or    DefaultContractClass 		entered
			or    DefaultEffectiveDate      entered
			or    DefaultExpirationDate     entered
			or    DefaultScheduleFrequency  entered
			or    DefaultMaxReleaseNumber   entered
			or    DefaultParticipant        entered)

		ResponseWithDifferentGTIN
			restricted
			when (NonMatchingGTINResponseLines exists)

		GlobalTradeItemNumberExists
			restricted
			when (IcitemgtinGTINRel exists)

		DefaultDataFromEvent
			restricted
			when (!SourcingEvent.CreateByCopy
			or	  FromRQ
			or	  CreatedfromCM)

		PerUnitEstimateEntered
			restricted
			when (PerUnitEstimate entered)

		AOCPerUnitEstimateEntered
			restricted
			when (AOCWithEstimateRel exists)

		BuyerActorContextExists
			restricted
			when (ActorContextBuyerRel exists)
		CategoryActorContextExists
			restricted
			when (ActorContextCategoryRel exists)
		SubCategoryActorContextExists
			restricted
			when (ActorContextSubCategoryRel exists)
		ItemByManufacturerRelExists
			restricted
			when (ItemByManufacturerRel exists
			and   ItemByManufacturerCount = 1)
		ItemsByManufacturerRelExist
			restricted
			when (ItemByManufacturerRel exists
			and   ItemByManufacturerCount > 1)


		CommodityCodeRequired
			restricted
			when ((RecordExists
				and Status.Draft
				and (!ContractOutput
					or !ItemNumber.CommodityCode exists))
			or (Status.Open
				and SourcingEvent.IsEvent))
		DescriptionRequired
			restricted
			when (RecordExists
			and Status.Draft
			and (ItemType.Special
				or ItemType.Service))
		DisplayLowestBidAmountRequired
			restricted
			when (RecordExists
			and Status.Draft
			and LowestBidCond)
		ItemDescriptionRequired
			restricted
			when (!ItemNumber exists
				and !GlobalTradeItemNumberExists
				and !Name entered)
		ItemNumberRequired
			restricted
			when (ItemType.Inventoried
			or ItemType.NonStock
			or ((NonServiceContracts
					or OutputType.PO)
				and ItemType.Service))
		ItemTypeRequired
			restricted
			when (Status.Open
			and SourcingEvent.IsEvent)
		OutputTypeRequired
			restricted
			when ((RecordExists
				and Status.Draft)
			or (Status.Open
				and SourcingEvent.IsEvent))
		QuantityRequired
			when (Status.Open
			and SourcingEvent.IsEvent)
		RequestedDeliveryDateRequired
			restricted
			when ((Status.Open
				and SourcingEvent.IsEvent
				and OutputType.PO
				and (DeliveryScoringOption.OnRequestedDeliveryDate
					or SourcingEvent.DeliveryScoringOption.OnRequestedDeliveryDate))
			or (RecordExists
				and Status.Draft
				and OutputType.PO
				and ((!ItemType.Service
						and !SourcingEvent.InformalQuote)
					or DeliveryScoringOption.OnRequestedDeliveryDate
					or SourcingEvent.DeliveryScoringOption.OnRequestedDeliveryDate)))
		RequireResponseRequired
			restricted
			when (WeightingCriteria.PriceWeighting entered
			or 	WeightingCriteria.DeliveryWeighting entered)
		ShipToRequired
			restricted
			when ((RecordExists
				and Status.Draft
				and OutputType.PO)
			or (Status.Open
				and SourcingEvent.IsEvent
				and OutputType.PO))
		UOMRequired
			restricted
			when (OutputType.PO
			or NonServiceContracts
			or (OutputType.Service
				and ServiceCode.Quantity)
			or (OutputType.NoOutput
				and CreatedfromCM))

		HasItemLocationStockUOM
			when (ItemNumber exists
			and	  ItemLocationRel.HasItemLocationStockUOM)

		QuestionResponsesExist 
			restricted 
			when (SourcingEventLineQuestionResponseRel exists)

	Relations
		CurrentSourcingEventLineRel
			one-to-one relation to SourcingEventLine
			Field Mapping uses symbolic key
				related.Company	= Company
				related.SourcingEvent = SourcingEvent
				related.SourcingEventLine = SourcingEventLine

		SourcingEventLineResponsesRel is a SourcingEventLineResponse set
			Instance Selection
				where ((related.Company = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingCompany
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingCompany not entered)
				and (related.SourcingEvent = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent not entered)
				and (related.SourcingEventLine = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEventLine
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEventLine not entered))

		SourcingEventLineResponseAOCsRel
			one-to-many relation to SourcingEventLineResponseAOC
			Field Mapping uses ByEvent
				related.Company	= Company
   				related.SourcingEvent = SourcingEvent
   				related.SourcingEventLine = SourcingEventLine

		SourcingEventHeaderResponseAOCsRel
			one-to-many relation to SourcingEventLineResponseAOC
			Field Mapping uses ByEvent
				related.Company	= Company
   				related.SourcingEvent = SourcingEvent
   				related.SourcingEventLine = 0

		SourcingEventLineOnlyAOCsRel
			one-to-many relation to SourcingEventLineAOC
			Field Mapping uses symbolic key
				related.Company	= Company
   				related.SourcingEvent = SourcingEvent
   			Instance Selection
   				where (related.SourcingEventLine > 0)

		QuantityDistributions is a SourcingEventLineDistribution set
			Instance Selection
				where (related.Quantity entered)

		PercentDistributions is a SourcingEventLineDistribution set
			Instance Selection
				where (related.Percent entered)

		ItemGroupRel
			one-to-one relation to ItemGroup
			Field Mapping uses symbolic key
				related.ItemGroup  = Company.SourcingGroup

		QuantityOrContractAwarded is a SourcingEventLineResponse set
			Instance Selection
				where (related.AwardQuantity entered
				or     related.AwardForContract)

		AlternateQuantityOrContractAwarded is a SourcingEventLineResponse set
			Instance Selection
				where (related.AltIsAwarded)

		SomeQuantityAwarded is a SourcingEventLineResponse set
			Instance Selection
				where (related.SomeAwardQuantity)

		NonAwardedLines is a SourcingEventLineResponse set
			Instance Selection
				where (!related.TotalAwardQuantity entered
				and     related.AwardForContract = false)

		NonAwardedAlternateLines is a SourcingEventLineResponse set
			Instance Selection
				where (!related.AltIsAwarded
				and     related.AlternatesExist)

		CurrentBid
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses symbolic key
				related.Company				= Company
				related.SourcingEvent		= SourcingEvent
				related.SourcingEventLine   = SourcingEventLine
			Instance Selection
				where (related.ResponseAmount.UnitPrice entered
				and    related.Status.Submitted)

		NoChargeBid is a SourcingEventLineResponse set
			Instance Selection
				where (related.ResponseAmount.NoCharge
				and    related.Status.Submitted)

		OriginCodeRQ is a SourcingEventLineSource set
			Instance Selection
				where (related.OriginCode = "RQ")

		OriginCodeCM is a SourcingEventLineSource set
			Instance Selection
				where (related.OriginCode = "CM")

		PointerfaceCreatedOnSource is a SourcingEventLineSource set
	   		Instance Selection
				where (related.PointerfaceCreated)

		SubmittedResponses is a SourcingEventLineResponse set
			Instance Selection
				where (related.Status.Submitted)

		SubmittedResponsesForBidTabulation is a SourcingEventLineResponse set
			Instance Selection
				where (related.Status.Submitted
				and    SourcingEvent.DisplayBidTabulationReport)				

		SubmittedResponsesConsiderForScoring is a SourcingEventLineResponse set
			Instance Selection
				where (related.Status.Submitted
				and    related.SourcingEventResponse.ConsiderForScoring)

		SubmittedAlternateResponses is a SourcingEventLineResponse set
			Instance Selection
				where (related.Status.Submitted
				and    related.AlternatesExist)

		MainBidsRel is a SourcingEventLineResponse set
			Instance Selection
				where (related.Status.Submitted)

		SecondStepsRel is a SourcingEventLineResponse set
			Instance Selection
				where (related.Status.Submitted
				and    (related.SourcingEventResponse.BestAndFinalSupplier
				or     (related.SourcingEventResponse.TechnicalProposalAccepted
				and    !SourcingEvent.BestAndFinalOffer)))

		AwardedLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.IsAwarded)

		AwardedPOLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.SomeAwardQuantity)

		AlternateResponsesEnteredRel is a SourcingEventLineResponse set
			Instance Selection
				where (related.AlternatesExist)

		AwardedAlternateLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.AltIsAwarded)

		AwardedAlternateContractLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.AltIsAwardedForContract)		
		
		AwardedAlternatePOLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.AltIsAwardedForPO)

		AwardedAlternate1POLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.Alt1IsAwardedForPO)

		AwardedAlternate2POLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.Alt2IsAwardedForPO)

		AwardedAlternate3POLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.Alt3IsAwardedForPO)

		AwardedAlternate4POLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.Alt4IsAwardedForPO)

		AwardedAlternate5POLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.Alt5IsAwardedForPO)

		AwardedContractLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.AwardForContract)

		AwardedAnyContractLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.AwardForContract
				or     related.AltIsAwarded)

		AwardedAnyNoOutputLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.SomeAwardQuantity)

		VendorItemNotEntered
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses symbolic key
				related.Company            = Company
				related.SourcingEvent      = SourcingEvent
				related.SourcingEventLine  = SourcingEventLine
			Instance Selection
				where (related.VendorItem !entered
				and	   related.IsAwarded)

		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company				= Company
				related.InventoryLocation	= ShipTo
				related.Item				= ItemNumber

		AltItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company				= Company
				related.InventoryLocation	= ShipTo
				related.Item				= LocalItemNumber

		LocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= Company
				related.InventoryLocation 					= ShipTo
				related.Item								= ItemNumber
				related.UnitOfMeasure						= UOM 

		LocationItemUOMDefaultBuyingRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= Company
				related.InventoryLocation 					= ShipTo
				related.Item								= ItemNumber
			Instance Selection
				where (related.DefaultForBuying)

		LocationItemLocationRel
			one-to-many relation to ItemLocation
			Field Mapping uses Set2
				related.Company 		= Company
				related.Item			= ItemNumber

		GTINByManufRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup  								= Company.SourcingGroup
				related.Manufacturer       						= ManufacturerInformation.Manufacturer
				related.ManufacturerNumber      				= ManufacturerInformation.ManufacturerNumber
				related.Item  									= ItemNumber
				related.UnitOfMeasure							= UOM

		IcitemgtinRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup  			= Company.SourcingGroup
				related.ItemGTIN 		 	= GlobalTradeItemNumber
			Instance Selection
				where (related.Item		!= ItemNumber)

		IcitemgtinGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup  			= Company.SourcingGroup
				related.ItemGTIN 			= GlobalTradeItemNumber

		EventCommodities
			one-to-one relation to SourcingEventCommodities
			Field Mapping uses part of key
				related.Company         	= Company
				related.SourcingEvent   	= SourcingEvent
				related.CommodityCode		= CommodityCode

		OldEventCommodities
			one-to-one relation to SourcingEventCommodities
			Field Mapping uses part of key
				related.Company         	= Company
				related.SourcingEvent   	= SourcingEvent
				related.CommodityCode		= old CommodityCode

		AwardDistribution
			one-to-many relation to SourcingEventLineResponseAward
			Field Mapping uses symbolic key
				related.Company             = Company
				related.SourcingEvent       = SourcingEvent
				related.SourcingEventLine   = SourcingEventLine

		DuplicateAwardDistribution is a SourcingEventLineResponseAward set
			Instance Selection
				where (related.SourcingEventLineSource   = LocalEventLineSource
				and    related.NotifiedSupplier          = LocalNotifiedSupplier)

		QuestionRel
			one-to-many relation to Question
			Field Mapping uses symbolic key
				related.ProcurementGroup	= Company.SourcingGroup
			Instance Selection
				where (related.Question.Active
				and	   !related.IsListQuestionWithoutAnswers
				and	   !related.NoCorrectAnswerDefined)

		QuestionActiveRel
			one-to-one relation to Question
			Field Mapping uses symbolic key
				related.ProcurementGroup	= Company.SourcingGroup
				related.Question			= LocalQuestion

		SourcingLineComment is a SourcingEventLineComment set
			Instance Selection
		 		where (!related.Type.Event)

		SourcingLinePOComment is a SourcingEventLineComment set
			Instance Selection
		 		where (related.Type.PrintOnInternalDocuments
		 		or     related.Type.PrintOnDeliveryTicket
		 		or     related.Type.PrintOnReceivingDocument)

	 	SupplierSourcingEventLineCommentsRel is a SourcingEventLineComment set
			Instance Selection
				where (related.SupplierCanView)

		SupplierSourcingEventLineAttachmentsRel is a SourcingEventLineAttachment set
			Instance Selection
				where (related.SupplierCanView)

	 	SourcingEventLineCommCode
			one-to-many relation to SourcingEventLine
			Field Mapping uses symbolic key
				related.Company         	= Company
				related.SourcingEvent   	= SourcingEvent
			Instance Selection
				where (related.UniqueID 		!= UniqueID
				and    related.CommodityCode	 = old CommodityCode)

		BlankNonAwardReasons is a SourcingEventLineResponse set
			Instance Selection
				where (!related.AwardReason entered
				and	   related.Status.Submitted
				and    !related.NoBid)

	 	ItemCommCodeRel
			one-to-many relation to SourcingEventLine
			Field Mapping uses symbolic key
				related.Company          				= Company
				related.SourcingEvent    				= SourcingEvent
			Instance Selection
				where	(related.UniqueID 			!= UniqueID
				and 	(related.ItemNumber entered
				and      related.ItemNumber			 = ItemNumber)
				and      related.CommodityCode		!= CommodityCode
				and      related.ItemType.Special
				and      related.ContractOutput)

		CMLineQuestions is a SourcingEventLineQuestion set
			Instance Selection
				where (related.CMQuestion)

		CMLineComments is a SourcingEventLineComment set
			Instance Selection
				where (related.CMComment)

		CMLineAttachments is a SourcingEventLineAttachment set
			Instance Selection
				where (related.CMAttachment)

		LineReqQuestionsRel is a SourcingEventLineQuestion set
			Instance Selection
				where (related.ResponseRequired)

		RelatedSSContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup		= Company.SourcingGroup
				related.Contract			= SavedContract
				related.RelatedContractID	= SourcingEvent
				related.RelatedContractType = 5

		RelatedCMContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup		= Company.SourcingGroup
				related.Contract			= SavedContract
				related.RelatedContractID	= SavedSourceContract
				related.RelatedContractType = 6

		RelatedRQContractRel
			one-to-many relation to RelatedContract
			Field Mapping uses ByRelatedID
				related.ContractGroup		= Company.SourcingGroup
				related.Contract			= SavedContract
				related.RelatedContractID	= SavedRequisition
				related.RelatedContractType = 13

		ContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup		= Company.SourcingGroup
				related.Contract			= SavedContract

		ContractQuestionRel
			one-to-many relation to ContractQuestion
			Field Mapping uses ByQuestion
				related.ContractGroup    	= Company.SourcingGroup
				related.Question			= SavedQuestion
				related.Contract			= SavedContract

		ContractLineCommentRel
			one-to-many relation to ContractLineComment
			Field Mapping uses ByTitleAttachment
				related.ContractGroup    	= Company.SourcingGroup
				related.Contract			= SavedContract
				related.ContractLine		= SavedContractLine
				related.CommentTitle		= SavedComment
				related.Attachment.Title	= SavedAttachmentTitle

		ContractLineAttachmentRel
			one-to-many relation to ContractLineAttachment
			Field Mapping uses ByTitleAttachment
				related.ContractGroup    	= Company.SourcingGroup
				related.Contract			= SavedContract
				related.ContractLine		= SavedContractLine
				related.Attachment.Title	= SavedAttachmentTitle

		SourcingEventQuestionRel 
			one-to-one relation to SourcingEventQuestion 
			Field Mapping uses symbolic key
				related.Company					= Company 
				related.SourcingEvent			= SourcingEvent 
				related.SourcingEventQuestion	= LocalSourcingEventQuestion

		SourcingEventLineQuestionContractRel 
			one-to-one relation to SourcingEventLineQuestion 
			Field Mapping uses symbolic key
				related.Company							= Company 
				related.SourcingEvent					= SourcingEvent
				related.SourcingEventLine				= SourcingEventLine 
				related.SourcingEventLineQuestion		= SELSupplierQuestionRel.SourcingEventLineQuestion

		SourcingEventSupplierQuestionRel 
			one-to-many relation to SourcingEventSupplierQuestion 
			Field Mapping uses symbolic key
				related.NotifiedSupplier.SupplierGroup	= LocalSupplierGroup
	 			related.NotifiedSupplier.Supplier		= LocalSupplier
	 			related.NotifiedSupplier.SupplierSourceId = LocalSupplierSourceId
				related.Company							= Company
				related.SourcingEvent					= SourcingEvent
			Instance Selection
				where (related.CMQuestion)

		SELSupplierQuestionRel 
			one-to-many relation to SELSupplierQuestion 
			Field Mapping uses symbolic key
				related.Company							= Company
				related.SourcingEvent					= SourcingEvent
				related.SourcingEventLine				= SourcingEventLine
				related.NotifiedSupplier.SupplierGroup	= LocalSupplierGroup
	 			related.NotifiedSupplier.Supplier		= LocalSupplier
	 			related.NotifiedSupplier.SupplierSourceId = LocalSupplierSourceId
			Instance Selection
				where (related.CMQuestion)

		PoCompanyRel
			one-to-one relation to PurchasingCompany
			Field Mapping uses Set2
		  		related.ProcurementGroup	= Company.SourcingGroup
		  		related.Company				= LocalCompany

		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company	= Company

		LineDistributionRel is a SourcingEventLineDistribution set
			Instance Selection
				where (related.AssetInformation.Asset entered
				or     related.AssetInformation.AssetTemplate entered
				or     related.Quantity entered)

		LineDistributionAssetRel is a SourcingEventLineDistribution set
			Instance Selection
				where (related.AssetInformation.Asset entered
				or     related.AssetInformation.AssetTemplate entered)

		PoItemVenRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= Company.SourcingGroup
				related.Item	  			= ItemNumber

		LineSourceRel is a SourcingEventLineSource set
			Instance Selection
				where	(related.OriginCode = "SS")

		SourcingEventLineSourceRel
			one-to-many relation to SourcingEventLineSource
			delete cascades
			Field Mapping uses symbolic key
				related.Company          				= Company
				related.SourcingEvent    				= SourcingEvent
				related.SourcingEventLine               = SourcingEventLine

		UpdateResponseLinesWithContract
			one-to-many relation to SourcingEventLineResponse
	 		Field Mapping uses ByNotifiedSupplier
	 			related.Company          				  = Company
				related.SourcingEvent    				  = SourcingEvent
 				related.NotifiedSupplier.SupplierGroup	  = LocalSupplierGroup
				related.NotifiedSupplier.Supplier 		  = LocalSupplier
				related.NotifiedSupplier.SupplierSourceId = LocalSupplierSourceId
	 		Instance Selection
	 			where (!related.Contract entered
	 			and	   related.SourcingEventLine.OutputType 	= LocalOutputType
	 			and	   !related.NonAwardReasonEntered
	 			and     related.Participant.Company  			= LocalParticipant.Company
	 			and     related.Participant.Location        	= LocalParticipant.Location
	 			and     related.Participant.RequestingLocation	= LocalParticipant.RequestingLocation
	 			and     related.ParticipantGroup            	= LocalParticipantGroup)

		ItemByManufacturerRel
			one-to-many relation to Item
			Field Mapping uses Set8
				related.ItemGroup                   = Company.SourcingGroup
				related.Manufacturer                = ManufacturerInformation.Manufacturer
				related.ManufacturerNumber          = ManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.Active
				and    related.Manufacturer entered
				and    related.ManufacturerNumber entered)

		LineSourceWithDropshipRel
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company          				= Company
				related.SourcingEvent    				= SourcingEvent
			Instance Selection
				where	(related.OriginCode			    = "RQ"
				and		 related.PurchaseOrderInterfaceRel.DropshipAddress entered)

		LineQuestionsWithWeighting is a SourcingEventLineQuestion set
			Instance Selection
				where (related.QuestionWeighting entered)

		FullyAwardedLine is a SourcingEventLineResponse set
			Instance Selection
				where (related.AwardQuantity  = Quantity)

		AwardedLineResponses is a SourcingEventLineResponse set
			Instance Selection
				where  ((related.IsAwarded
				and      related.NotifiedSupplier.SupplierGroup.AllowNonAwardedView)		
				or      (related.IsAwarded
				and     !related.NotifiedSupplier.SupplierGroup.AllowNonAwardedView		
				and      related.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
				and      related.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		and      related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId))

		UnprocessedSourceLines is a SourcingEventLineSource set
			Instance Selection
				where (related.UnprocessedQuantity > 0)

		RequisitionRel is a SourcingEventLineSource set
			Instance Selection
				where (related.ProcurementGroup			= Company.SourcingGroup
				and	   related.OriginCode				= "RQ"
				and	   related.SourceDocumentNumeric	= Requisition)

		NonMatchingGTINResponseLines is a SourcingEventLineResponse set
			Instance Selection
				where (related.GlobalTradeItemNumber entered
				and    related.GlobalTradeItemNumber != GlobalTradeItemNumber)

		EventLineDuplicateNewGTINRel
			one-to-many relation to SourcingEventLine
			Field Mapping uses symbolic key
				related.Company         	= Company
				related.SourcingEvent   	= SourcingEvent
			Instance Selection
				where (related.ItemNumber													= ItemNumber
				and	   related.ManufacturerInformation.Manufacturer.ManufacturerCode		= ManufacturerInformation.Manufacturer.ManufacturerCode
				and	   related.ManufacturerInformation.Manufacturer.ManufacturerDivision	= ManufacturerInformation.Manufacturer.ManufacturerDivision
				and    related.ManufacturerInformation.ManufacturerNumber           		= ManufacturerInformation.ManufacturerNumber
				and	   related.UOM		 													= UOM
				and	   related.GlobalTradeItemNumber entered
				and	   !related.GlobalTradeItemNumber exists
				and	   related.GlobalTradeItemNumber										!= GlobalTradeItemNumber
				and	   related.UniqueID 	   != UniqueID)

		ActorContextBuyerRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "Buyer")

		ActorContextCategoryRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "Category")

		ActorContextSubCategoryRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor                    = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "SubCategory")

		SourcingEventLineAlternateResponseRel is a SourcingEventLineResponse set
			Instance Selection
				where (related.AlternateResponseArray entered)

		AOCWithEstimateRel is a SourcingEventLineAOC set
			Instance Selection
				where (related.PerUnitEstimateEntered)

		SELSupplierQuestionPortalRel
            one-to-many relation to SELSupplierQuestion 
            Field Mapping uses symbolic key
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine					= SourcingEventLine
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId

		ConditionalQuestionsRel 
			one-to-many relation to ConditionalQuestion 
			Field Mapping uses symbolic key 
				related.ProcurementGroup		= Company.SourcingGroup 
				related.Question				= SourcingEventLineQuestionRel.Question 

		SourcingEventLineQuestionRel
            one-to-many relation to SourcingEventLineQuestion 
			delete cascades
            Field Mapping uses symbolic key
            	related.Company					= Company
            	related.SourcingEvent			= SourcingEvent
				related.SourcingEventLine		= SourcingEventLine

		SupplierContactProxyRel
			one-to-many relation to SupplierContactProxy
			Field Mapping uses part of key
				related.SupplierGroup		= LocalNotifiedSupplier.SupplierGroup
				related.Supplier			= LocalNotifiedSupplier.Supplier
				related.SupplierSourceId	= LocalNotifiedSupplier.SupplierSourceId
			Instance Selection
				where (related.ReceiveEmailNotification)

		PurchaseOrderLineSourceRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses FromStrategicSourcing
				related.PurchaseOrderLineSource.SourceDocumentOrigin   = "SS"
				related.PurchaseOrderLineSource.OperatingCompany       = Company
				related.PurchaseOrderLineSource.SourceDocumentNumeric  = SourcingEvent
			Instance Selection
				where (related.PurchaseOrder  = LocalPONumber)

		ReqPurchaseOrderLineSourceRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses FromStrategicSourcing
				related.PurchaseOrderLineSource.SourceDocumentOrigin   = "RQ"
				related.PurchaseOrderLineSource.OperatingCompany       = Company
				related.PurchaseOrderLineSource.SourceDocumentNumeric  = LocalReqNumber
			Instance Selection
				where (related.PurchaseOrder  = LocalPONumber)

		PurchaseOrderAndLineAddOnChargeRel
			one-to-one relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company                   = Company
				related.PurchaseOrder             = LocalPONumber
				related.PurchaseOrderLine         = LocalPOLine
				related.AddOnCharge               = LocalAddOnCharge

		PurchaseOrderSpreadAddOnChargeRel
			one-to-one relation to PurchaseOrderSpreadAddOnCharge
			Field Mapping uses symbolic key
				related.Company                   = Company
				related.PurchaseOrder             = LocalPONumber
				related.AddOnCharge               = LocalAddOnCharge

	  	ItemRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup               = Company.SourcingGroup
				related.Item                    = ItemNumber

		ItemUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup               = Company.SourcingGroup
				related.Item                    = ItemNumber
				related.UnitOfMeasure           = UOM.UnitOfMeasure



		EventLineResponseRel	
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier


			Instance Selection
				where (related.Company                  = Company
				and    related.SourcingEvent            = SourcingEvent
				and    related.SourcingEventLine    	= SourcingEventLine)

		SourcingEventLineQuestionResponseRel
			one-to-many relation to SourcingEventLineQuestionResponse
			Field Mapping uses ByQuestion
				related.Company							= Company
				related.SourcingEvent 					= SourcingEvent
				related.SourcingEventLine               = SourcingEventLine


	Field Rules
		Name
			if (ItemDescription entered)
				default to ItemDescription
			else
			if (ItemNumber exists)
				default to ItemNumber.Description
			else
			if (GlobalTradeItemNumberExists)
				default to first IcitemgtinGTINRel.FullDescription

		OutputType
			initial value is SourcingEvent.OutputType
			default to SourcingEvent.OutputType
			if (!OutputType.PO
			and SourcingLinePOComment exists)
				cannot be changed
					"CannotChangeOutputTypePOTypeCommentsExist"

			if (WeightingCriteria.DeliveryWeighting entered)
				constraint (OutputType.PO)
					"MustHavePOOutputTypeToUseDeliveryWeightingCriteria"

			if (OutputType changed
			and !OutputType.PO)
				if (SourcingEvent.WeightingCriteria.DeliveryWeighting entered)
					constraint (SourcingEvent.HasPoLines)
						"EventDeliveryWeightingIsDefinedAndNoLinesExistsWithPOOutputType"
				if (LineWeighting entered
				and !SourcingEvent.WeightingCriteria.PriceWeighting entered)
					constraint (SourcingEvent.WeightingCriteria.DeliveryWeighting entered
					and 		OutputType.PO)
						"CannotEnterLineWeightingOverridePercentageUnlessEventLevelPriceOrDeliveryWeightingWithPoOutputIsEntered"

			if (!DefaultContractType.PurchaseType   = ContractType
			and !DefaultContractSubType entered
			and  DefaultContractType exists)
				initialize DefaultContractType
			if (!DefaultContractSubType.PurchaseType = ContractType
			and  DefaultContractSubType entered
			and  DefaultContractSubType exists)
				initialize DefaultContractType
				initialize DefaultContractSubType
			if (!EffectiveDateOutputTypes)
				initialize DefaultContractClass
				initialize DefaultContractSubClass
			if (!EffectiveDateOutputTypes)
				initialize DefaultEffectiveDate
				initialize DefaultExpirationDate
			if (!OutputType.Standing)
				initialize DefaultScheduleFrequency
				initialize DefaultMaxReleaseNumber
				initialize DefaultParticipant
			if (!OutputType.PO)
				initialize RequestedDeliveryDate
				initialize ShipTo
				initialize DeliverTo

  		RequireResponse
  			if (SourcingEvent.RequireAllLines)
  				RequireResponse = true
			if (WeightingCriteria.PriceWeighting entered
			or 	WeightingCriteria.DeliveryWeighting entered)
	   			required
	   				"MustRequireResponseWhenUsingPriceOrDeliveryWeightingCriteria"

		ShipTo
			initial value is SourcingEvent.DefaultShipTo
				when (SourcingEvent.OutputType.PO)
			if (OutputType.PO)
				default to SourcingEvent.DefaultShipTo
				required
			else
			if (OutputType.NoOutput
			and !CreatedfromCM)
				default to SourcingEvent.DefaultShipTo
			else
				cannot be entered
					"CannotEnterShipToForContractOutputTypes"
			if (OutputType.PO)
				if (CreatedfromRQ)
					constraint (ShipTo = ShipToLocationOnRequisition)
						"ShipToLocation_(<ShipTo>)MustMatchTheLocation_(<ShipToLocationOnRequisition>)OnRequisitionLine"

		DeliverTo
			constraint (OutputType.PO)
				"DeliverToOnlyValidForOutputTypeOfPO"
		ItemNumber
			if  (ItemType.Inventoried
			or	 ItemType.NonStock
			or ((NonServiceContracts
			or   OutputType.PO)
			and  ItemType.Service))
				required

			if (ItemNumber exists)
				constraint (ItemNumber.Active)
					"ItemNumberIsInactive"
				if (OutputType.PO)
					if (ItemLocationRel exists)
						constraint (ItemLocationRel.ItemLocation.Active)
							"ItemLocationIsInactive"

			if (OutputType.Service)
				cannot be entered
					"ItemNumberCannotBeEnteredForServiceContracts"
		ItemType


			if (GlobalTradeItemNumberExists)
				if (!ItemNumber entered)
					ItemNumber = first IcitemgtinGTINRel.Item

			if (!ItemNumber entered)
				if (ItemByManufacturerRelExists)
					ItemNumber = first ItemByManufacturerRel.Item
				constraint (!ItemsByManufacturerRelExist)
					"MultipleItemsExistWithEnteredManufacturerInformation;EnterManufacturerInformationInItemSearchAndSelectAnItem"

			if (ItemNumber exists)
				if (ItemLocationRel exists)
					if (ItemLocationRel.InventoryTracked)
						default to ItemType.Inventoried
					else
						default to ItemType.NonStock
						constraint (!ItemType.Inventoried)
							"ItemTypeCannotBeInventoried;ItemNotInventoryTracked"
				else
					if (NonServiceContracts)
						ItemType = ItemType.NonStock
					else
					if (OutputType.Service)
						ItemType = ItemType.Service
					default to ItemType.NonStock
					constraint (!ItemType.Inventoried)
						"ItemTypeCannotBeInventoried;ItemDoesNotExistAtThisLocation"

				if (OutputType.Service)
					cannot be entered
						"ItemNumberCannotBeEnteredForServiceContracts"

				if (ItemType.Inventoried
				or	ItemType.NonStock)
					ItemDescription		= ItemNumber.Description
					ItemDescription2	= ItemNumber.Description2
					ItemDescription3    = ItemNumber.Description3
			else
			if (OutputType.Service)
				ItemType = ItemType.Service
			else
				default to ItemType.Special

			if (!ItemNumber exists)
				constraint (ItemType.Service
				or  	    ItemType.Special)
					"ItemTypeMustBeSpecialOrServiceWhenItemNumberNotInItemMaster"

			if (OutputType.Service)
				constraint (ItemType.Service)
					"ItemTypeMustBeServiceForOutputTypeOfService"

		ItemDescription

			if (ItemNumber exists)
				default to ItemNumber.Description
			else
			if (GlobalTradeItemNumberExists)
				default to first IcitemgtinGTINRel.FullDescription
			else
			if (Name entered)
				default to Name
			else
				required

		ItemDescription2
			if (ItemType.Inventoried
			or 	ItemType.NonStock)
				ItemDescription2	= ItemNumber.Description2
		ItemDescription3
			if (ItemType.Inventoried
			or 	ItemType.NonStock)
				ItemDescription3    = ItemNumber.Description3
		ServiceCode
			if (OutputType.Service)
				default to ServiceCode.Quantity
				constraint (ServiceCode.Quantity
				or			ServiceCode.Amount)
					"ServiceCodeMustBeQuantityOrAmountWhenOutputTypeEqualsService"
			else
				if (ItemType.Service)
					default to ServiceCode.Quantity
					constraint (ServiceCode.Quantity
					or			ServiceCode.Amount)
						"ServiceCodeMustBeQuantityOrAmountWhenItemTypeEqualsService"
				else
					ServiceCode = ServiceCode.NotAServiceItem
		Quantity
			if (ServiceCode.Amount)
				constraint (Quantity = 1)
					"QuantityCannotBeGreaterThanOneWhenServiceCodeEqualsAmount"
			default to 1

		UOM
			if (ItemNumber exists)
				if (!UOM entered)
					if (ItemLocationRel exists
					and ItemLocationRel.DefaultSourceUOM entered)
						default to ItemLocationRel.DefaultSourceUOM
					else
					if (GlobalTradeItemNumber exists)
						constraint (!GlobalTradeItemNumber.ItemUOMRel.ValidForBuying.Inactive)
							"GTIN_UOMOf<GlobalTradeItemNumber.UnitOfMeasure>IsAnInactiveBuyUOMForItem<ItemNumber>"
						constraint (GlobalTradeItemNumber.ItemUOMRel.OKForBuying)
							"GTIN_UOMOf<GlobalTradeItemNumber.UnitOfMeasure>IsNotAValidBuyUOMForItem<ItemNumber>"
						default to GlobalTradeItemNumber.UnitOfMeasure
					else
						if (OutputType.PO
						and HasItemLocationStockUOM)
							default to LocationItemUOMDefaultBuyingRel.UnitOfMeasure
						else
							default to ItemNumber.DefaultBuyUOM
				else
					if (ItemNumber exists)
						constraint (!ItemUOMRel.ValidForBuying.Inactive)
							"<UOM>IsAnInactiveBuyUOMForThisItem"
						constraint (ItemUOMRel exists)
							"<UOM>IsAnInvalidUOMForThisItem"
						constraint (ItemUOMRel.OKForBuying)
							"<UOM>IsNotAValidBuyUOMForThisItem"
						if (OutputType.PO
						and HasItemLocationStockUOM)
							constraint (LocationItemUOMRel.OKForBuying)
								"<UOM>IsNotValidUnitOfMeasureForTheLocationOfThisItem<ItemNumber>"

				if (ItemLocationRel.DefaultSourceUOM entered)
					constraint (ItemLocationRel.DefaultSourceUOM = UOM)
						"UOMMustMatchTheDefaultSourceUOMOf<ItemLocationRel.DefaultSourceUOM>ForShipTo<ShipTo>"

			if (OutputType.PO
			or	NonServiceContracts
			or  (OutputType.Service
			and  ServiceCode.Quantity)
			or  (OutputType.NoOutput
			and  CreatedfromCM))
				required

		ManufacturerInformation
			if (ContractOutput
			and ItemType.Service)
				cannot be entered
					"CannotEnterManufacturerInformationForServiceItemsWithContractOutput"
			if (ManufacturerInformation entered)
				if (GlobalTradeItemNumber exists) 	
					constraint (ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
					and         ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
					and         ManufacturerInformation.ManufacturerNumber                  = GlobalTradeItemNumber.ManufacturerNumber)
						"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndEventLine"
			else
				if (GlobalTradeItemNumber exists)
					ManufacturerInformation.Manufacturer.ManufacturerCode     = GlobalTradeItemNumber.Manufacturer.ManufacturerCode
					ManufacturerInformation.Manufacturer.ManufacturerDivision = GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
					ManufacturerInformation.ManufacturerNumber		          = GlobalTradeItemNumber.ManufacturerNumber

		RequestedDeliveryDate
			if (RequestedDeliveryDate entered)
				constraint (OutputType.PO
				or   		OutputType.NoOutput
				or			!OutputType entered)
					"CannotEnterRequestedDeliveryDateForContractOutputTypes"

				if (SourcingEvent.DisputeCloseDate entered)
					constraint (RequestedDeliveryDate >= SourcingEvent.DisputeCloseDate)
				   		"RequestedDeliveryDateMustBeGreaterThanDisputeCloseDate"
				else
				if (SourcingEvent.CloseDate entered)
					constraint (RequestedDeliveryDate >= SourcingEvent.CloseDate)
						"RequestedDeliveryDateMustBeGreaterThanEventCloseDate"
		AllowAdvancedPricing
			constraint (OutputType.Contract
			or			OutputType.Blanket
			or			OutputType.CatalogQuote
			or		   (OutputType.Service
			and 		ServiceCode.Quantity))
				"PriceBreaksOnlyAllowedForContract,Blanket,Catalog,OrQuantityServiceContractTypes"
		DistributionType
			default to DistributionType.Percent
			if (DistCode entered)
				constraint (DistributionType.Percent)
					"DistributionTypeMustBePercentWhenDistributionCodeEntered"

			if (DistributionType changed)
				invoke Update SourcingEventLineDistribution set
					if (DistributionType.Percent)
						invoked.Percent	 = 100%
						invoked.Quantity = 0
						invoked.Amount	 = 0
					else
					if (DistributionType.Quantity)
						invoked.Quantity = Quantity
						invoked.Percent	 = 0
						invoked.Amount	 = 0
					else
					if (DistributionType.Amount)
						invoked.Quantity = 0
						invoked.Percent	 = 0

		DistCode
			if (DistCode changed)
				invoke InvDelete SourcingEventLineDistribution set
			if (ItemType.Inventoried
			and OutputType.PO)
				cannot be entered
					"CannotEnterDistributionCodeForInventoryItems"
			constraint (DistCode.IsPercentDistributionCode)
				"TheDistributionCodeMustBeDefinedWithPercents,NotAmounts"

		UnspscCode
			if (ItemNumber exists)
				UnspscCode   = ItemNumber.UNSPSCCode

			if (!ItemNumber exists) 
				if (OutputType.PO)
					constraint (!UnspscCode entered)
	   					"CannotEnterUnspscCodeForSpecialAndServiceItemsOnPurchaseOrders"
	   			else
	   			if (ContractOutput)
					constraint (ItemType.Special
					and			NonServiceContracts)
						"CanOnlyEnterUnspscCodeForSpecialItemsOnNonServiceContracts"

		LineWeighting
			constraint (LineWeighting <= 100%)
				"LineWeightingCannotBeGreaterThan100%"
			constraint (LineWeighting > 0)
				"LineWeightingCannotBeLessThanZero"

		WeightingCriteria.DeliveryWeighting
			constraint (OutputType.PO)
				"MustHavePOOutputTypeToUseDeliveryWeightingCriteria"

		DiversityScoreAllocation
			if (!WeightingCriteria.DiversityWeighting entered)
				initialize

		DeliveryScoreAllocation
			if (DeliveryScoringOption.AsSoonAsPossible)
				initialize
			if (!WeightingCriteria.DeliveryWeighting entered)
				initialize

		DeliveryScoringOption
			if (WeightingCriteria.DeliveryWeighting entered)
				default to DeliveryScoringOption.AsSoonAsPossible
			else
				initialize

		LowestBidOption
			constraint (!SourcingEvent.Sealed)
				"CannotSelectLowestBidOptionOnSealedBid"

		DisplayLowestBidAmount
			constraint (!SourcingEvent.Sealed)
				"CannotDisplayLowestBidAmountOnSealedBid"

		AllowAlternateResponses
			if (AlternateResponsesExist)
				cannot be changed
					"CannotChange;AlternateResponsesExistForThisLine"

		AllowAddOnCharge
			if (AllowAddOnCharge)
				constraint (!OutputType.Service)
					"CannotAllowAddOnChargesForAServiceContract"

			if (AllowAddOnCharge changed
			and !AllowAddOnCharge
			and AddOnChargesExist)
				cannot be changed
					"CannotChange;AddOnChargesExistForThisLine"

		DefaultEffectiveDate
			constraint (EffectiveDateOutputTypes)
					"CannotEnterEffectiveDateForPoOutputOrNoOutputTypeThatIsNotFromContractManagement"

		DefaultExpirationDate
			constraint (EffectiveDateOutputTypes)
					"CannotEnterExpirationDateForPoOutputOrNoOutputTypeThatIsNotFromContractManagement"
			if (OutputType.Standing)
				if (DefaultMaxReleaseNumber entered)
					cannot be entered
						"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"
			if (DefaultEffectiveDate entered)
				constraint (DefaultExpirationDate > DefaultEffectiveDate)
					"DefaultExpirationDateMustBeLaterThanDefaultEffectiveDate"

		DefaultContractType
			if (!DefaultContractSubType entered
			and  OutputType entered)
				constraint (DefaultContractType.PurchaseType   = ContractType)
					"TypeForContractTypeDoesNotMatchOutputType"

		DefaultContractSubType
			constraint (DefaultContractType entered)
				"CannotEnterContractSubtypeWithoutContractType"
			constraint (DefaultContractSubType.PurchaseType   = ContractType)
					"TypeForContractSubtypeDoesNotMatchOutputType"

		DefaultContractSubClass
			constraint (DefaultContractClass entered)
				"CannotEnterContractSubclassificationWithoutContractClassification"

		DefaultScheduleFrequency
			constraint (Standing)
				"CanOnlyEnterScheduleFrequencyForStandingOutputType"

		DefaultMaxReleaseNumber
			constraint (Standing)
				"CanOnlyEnterMaximumReleaseNumberForStandingOutputType"
			if (OutputType.Standing)
				if (DefaultExpirationDate entered)
					cannot be entered
						"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"

		DefaultParticipant
			constraint (Standing)
					"CanOnlyEnterParticipantForStandingOutputType"

		GlobalTradeItemNumber
			if (ItemNumber exists
			and ManufacturerInformation entered
			and GlobalTradeItemNumber entered
			and !GlobalTradeItemNumber exists)
				constraint (!EventLineDuplicateNewGTINRel exists)
					"EventLine<first EventLineDuplicateNewGTINRel.SourcingEventLine>ExistsWithADifferentGTINForThisItem,ManufacturerInformation,AndUOM"

			if (ItemNumber exists
			and ManufacturerInformation entered)
				if (GTINByManufRel exists)
					if (GlobalTradeItemNumber entered)
						constraint (GlobalTradeItemNumber = GTINByManufRel.ItemGTIN)
							"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"
					default to first GTINByManufRel.ItemGTIN

			if (GlobalTradeItemNumber exists)
				if (!ManufacturerInformation entered)
					ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
					ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
					ManufacturerInformation.ManufacturerNumber				    = GlobalTradeItemNumber.ManufacturerNumber
				else
					constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		= 	ManufacturerInformation.Manufacturer.ManufacturerCode
					and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= 	ManufacturerInformation.Manufacturer.ManufacturerDivision
					and         GlobalTradeItemNumber.ManufacturerNumber    =   ManufacturerInformation.ManufacturerNumber)
						"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndSourcingEventLine"

				constraint (GlobalTradeItemNumber.Active)
					"GTIN<GlobalTradeItemNumber>IsInactive"

				if (UOM entered)
					constraint (GlobalTradeItemNumber.UnitOfMeasure = UOM)
						"GTINUnitOfMeasureMustBeTheSameAsUOM"

			if (GlobalTradeItemNumber entered)
				constraint (!IcitemgtinRel exists)
					"GTINAlreadyExistsForItem<first IcitemgtinRel.Item>"

				constraint (!ResponseWithDifferentGTIN)
					"AResponseExistsWithA_GTINThatDoesNotMatchTheGTINEnteredOnTheEventLine"

				if (ContractOutput)
					constraint (!SourcingEventLine.ItemType.Service)
						"CannotEnterGTINForServiceItemWithContractOutput"

				if (ContractOutput)
					constraint (ManufacturerInformation.Manufacturer.ManufacturerCode entered)
						"ManufacturerCodeIsRequired"
					constraint (ManufacturerInformation.ManufacturerNumber entered)
						"ManufacturerNumberIsRequired"

				if (OutputType.PO)
					if (ItemNumber exists)
						constraint (GlobalTradeItemNumber exists)
							"GTINDoesNotExist;MustMaintainOnItemMaster"

				initialize GTINCheckDigit
				GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
				LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
				constraint (LocalValidCheckDigit = true)
					"GTINCheckDigitIsInvalid"


	SubType SourcingEvent.IsTemplate Field Rules
		RequestedDeliveryDate
			cannot be entered

	Actions
		RecallSourcingEventLineQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup			is a RecallGroup
				PrmRecallNotice			is Numeric size 8
				PrmRecallProduct		is Numeric size 8
				PrmCompany				is an InventoryCompany
				PrmItem					is like Item
				PrmManufacturerNumber	is like ManufacturerNumber
				PrmManufacturerCode		is like ManufacturerCode
				PrmManufacturerDivision is like ManufacturerDivision
				PrmQueryPriority		is Numeric size 2
					States
		   				High				value is 1
		   				Medium				value is 2
		   				Low					value is 3
				PrmQueryDueDate			is TimeStamp
				PrmQueryDocumentUser	is Numeric size 8
				PrmInstructions         is AlphaUpper size 50
				PrmCreateTasks          is Boolean

			Sort Order
				ItemNumber
				ManufacturerInformation
				Company
				SourcingEvent
				SourcingEventLine

			Instance Selection
				where (((ItemNumber = PrmItem
				and    ItemNumber entered)
				or    (ManufacturerInformation entered
				and    DerivedStrippedManufacturerNumber = PrmManufacturerNumber
				and    ItemType.Special
				and   (PrmManufacturerCode !entered
				or    (PrmManufacturerCode entered
				and    PrmManufacturerDivision !entered
				and    ManufacturerInformation.Manufacturer.ManufacturerCode = PrmManufacturerCode)
				or    (PrmManufacturerDivision entered
				and    ManufacturerInformation.Manufacturer.ManufacturerCode = PrmManufacturerCode
				and    ManufacturerInformation.Manufacturer.ManufacturerDivision = PrmManufacturerDivision))))
				and    Company.ProcurementGroup = PrmRecallGroup
				and    !ItemType.Service
				and	   NotCancelledOrClosed)

			Action Rules
				Instance Rules
					invoke Create RecallProductTransaction
						invoked.RecallGroup									= PrmRecallGroup
						invoked.RecallNotice								= PrmRecallNotice
						invoked.RecallProduct								= PrmRecallProduct
						invoked.ActivityType								= 12 
						invoked.SourcingEventLineGroup.SourcingCompany		= Company
						invoked.SourcingEventLineGroup.SourcingEvent		= SourcingEvent
						invoked.SourcingEventLineGroup.SourcingEventLine	= SourcingEventLine
						invoked.LocalPriority								= PrmQueryPriority
						invoked.LocalDueDate								= PrmQueryDueDate
						invoked.LocalRecallUser								= PrmQueryDocumentUser
						invoked.LocalInstructions                           = PrmInstructions
						invoked.TransactionDate								= RequestedDeliveryDate
						invoked.LocalCreateTasks                            = PrmCreateTasks

		MessageNotifiedSuppliersOfAward is a Set Action 
			restricted 
			Parameters 
				ParmSourcingCompany	is a SourcingCompany 
				ParmEvent           is a SourcingEvent 
				ParmEventLine       is a SourcingEventLine 

			Instance Selection 

				where (ParmSourcingCompany = Company 
				and    ParmEvent           = SourcingEvent
				and    ParmEventLine       = SourcingEventLine)

			Action Rules 

				Instance Rules 
					for each SourcingEvent.SourcingEventNotification set
						if (Company.CreateAwardedMessage)
							include CreateAwardedSupplierContactMessage
						if (Company.SendAwardedEmail)
							include SendAwardedEmailMessage


	StateCycles
		EventLifeCycle is a StateCycle
			state field is Status

			Draft is a State
				Create is a Create Action
					valid when (SourcingEvent.Status.Draft)
					Field Rules
						RequestedDeliveryDate
							if (DefaultDataFromEvent)
								if (OutputType.PO)
									default to SourcingEvent.RequestedDeliveryDate
						WeightingCriteria
							if (DefaultDataFromEvent
							and SourcingEvent.DefaultWeightingToLines)
								default to SourcingEvent.WeightingCriteria
								if (!OutputType.PO)
									initialize WeightingCriteria.DeliveryWeighting
						DiversityScoreAllocation
							if (DefaultDataFromEvent
							and SourcingEvent.DefaultWeightingToLines)
								default to SourcingEvent.DiversityScoreAllocation
						LowestBidOption
							if (DefaultDataFromEvent)
								default to SourcingEvent.LowestBidOption
						DisplayLowestBidAmount
							if (DefaultDataFromEvent)
								default to SourcingEvent.DisplayLowestBidAmount
								if (LowestBidCond)
									default to true
						RequireFullQuantity
							if (DefaultDataFromEvent)
								default to SourcingEvent.RequireFullQuantity
						AllowAlternateResponses
							if (DefaultDataFromEvent)
								default to SourcingEvent.AllowAlternateResponses
						AllowAddOnCharge
							if  (DefaultDataFromEvent
							and !OutputType.Service)
								default to SourcingEvent.AllowAddOnCharge

						DefaultEffectiveDate
							if (EffectiveDateOutputTypes)
								default to SourcingEvent.DefaultEffectiveDate

						DefaultExpirationDate
							if (EffectiveDateOutputTypes)
								default to SourcingEvent.DefaultExpirationDate

						DefaultContractType
							if (SourcingEvent.DefaultContractType.PurchaseType = ContractType
							and !DefaultContractSubType entered)
								default to SourcingEvent.DefaultContractType

						DefaultContractSubType
							if  (SourcingEvent.DefaultContractSubType.PurchaseType = ContractType
							and  SourcingEvent.DefaultContractType = DefaultContractType
							and  SourcingEvent.DefaultContractSubType entered)
								default to SourcingEvent.DefaultContractSubType

						DefaultContractClass
							if (!DefaultContractSubClass entered)
								default to SourcingEvent.DefaultContractClass

						DefaultContractSubClass
							if (SourcingEvent.DefaultContractClass = DefaultContractClass
							and SourcingEvent.DefaultContractSubClass entered)
								default to SourcingEvent.DefaultContractSubClass

						DefaultScheduleFrequency
							if (OutputType.Standing)
								default to SourcingEvent.DefaultScheduleFrequency

						DefaultMaxReleaseNumber
							if (OutputType.Standing)
								default to SourcingEvent.DefaultMaxReleaseNumber

						DefaultParticipant
							if (OutputType.Standing)
								default to SourcingEvent.DefaultParticipant

					Action Rules
						constraint (SourcingEvent.Status.Draft)
							"CanOnlyUseActionWhenEventIsInDraftStatus"
						if (!FromRQ
						and OutputType.PO)
							constraint (!LineSourceWithDropshipRel exists)
								"CannotAddALineToAnEventThatWasCreatedFromRequisitionsWithADropshipAddress"

						include MaintainCommodityCode

					Exit Rules
						if (CommodityCode entered)
							invoke Update EventCommodities
						if (!OutputType.NoOutput
						and !CreateFromAnother)
							if (!DistCode entered)
								include DefaultDistributions
							else
								include CreateDistributionsFromDistCode
						if (!OutputType.NoOutput
						and ItemType.Inventoried
						and CreateFromAnother)
							if (!DistCode entered)
								include DefaultDistributions
							else
								include CreateDistributionsFromDistCode

				CreateFromWizard is a Create Action

					Field Rules
			   			RequestedDeliveryDate
			   				if (DefaultDataFromEvent)
								if (OutputType.PO)
									default to SourcingEvent.RequestedDeliveryDate
						WeightingCriteria
							if (DefaultDataFromEvent
							and SourcingEvent.DefaultWeightingToLines)
	   							default to SourcingEvent.WeightingCriteria
	   							if (!OutputType.PO)
	   								initialize WeightingCriteria.DeliveryWeighting
	   					DiversityScoreAllocation
							if (DefaultDataFromEvent
							and SourcingEvent.DefaultWeightingToLines)
	   							default to SourcingEvent.DiversityScoreAllocation
						LowestBidOption
							if (DefaultDataFromEvent)
								default to SourcingEvent.LowestBidOption
						DisplayLowestBidAmount
							if (DefaultDataFromEvent)
								default to SourcingEvent.DisplayLowestBidAmount
								if (LowestBidCond)
									default to true
					   	RequireFullQuantity
							if (DefaultDataFromEvent)
						   		default to SourcingEvent.RequireFullQuantity
						AllowAlternateResponses
							if (DefaultDataFromEvent)
								default to SourcingEvent.AllowAlternateResponses
						AllowAddOnCharge
							if  (DefaultDataFromEvent
							and !OutputType.Service)
								default to SourcingEvent.AllowAddOnCharge

						DefaultEffectiveDate
							if (EffectiveDateOutputTypes)
								default to SourcingEvent.DefaultEffectiveDate

						DefaultExpirationDate
							if (EffectiveDateOutputTypes)
								default to SourcingEvent.DefaultExpirationDate

						DefaultContractType
							if (SourcingEvent.DefaultContractType.PurchaseType = ContractType
							and !DefaultContractSubType entered)
								default to SourcingEvent.DefaultContractType

						DefaultContractSubType
							if  (SourcingEvent.DefaultContractSubType.PurchaseType = ContractType
							and  SourcingEvent.DefaultContractType = DefaultContractType
							and  SourcingEvent.DefaultContractSubType entered)
								default to SourcingEvent.DefaultContractSubType

						DefaultContractClass
							if (!DefaultContractSubClass entered)
								default to SourcingEvent.DefaultContractClass

						DefaultContractSubClass
							if (SourcingEvent.DefaultContractClass = DefaultContractClass
							and SourcingEvent.DefaultContractSubClass entered)
								default to SourcingEvent.DefaultContractSubClass

						DefaultScheduleFrequency
							if (OutputType.Standing)
								default to SourcingEvent.DefaultScheduleFrequency

						DefaultMaxReleaseNumber
							if (OutputType.Standing)
								default to SourcingEvent.DefaultMaxReleaseNumber

						DefaultParticipant
							if (OutputType.Standing)
								default to SourcingEvent.DefaultParticipant

					Action Rules
						constraint (SourcingEvent.Status.Draft)
							"CanOnlyUseActionWhenEventIsInDraftStatus"
						if (!FromRQ
						and OutputType.PO)
							constraint (!LineSourceWithDropshipRel exists)
								"CannotAddALineToAnEventThatWasCreatedFromRequisitionsWithADropshipAddress"

						include MaintainCommodityCode

					Exit Rules
						if (CommodityCode entered)
							invoke Update EventCommodities
						if (!OutputType.NoOutput
						and !CreateFromAnother)
							if (!DistCode entered)
								include DefaultDistributions
							else
								include CreateDistributionsFromDistCode
						if (!OutputType.NoOutput
						and ItemType.Inventoried
						and CreateFromAnother)
							if (!DistCode entered)
								include DefaultDistributions
							else
								include CreateDistributionsFromDistCode


				Update is an Update Action
					Field Rules
						DistCode
							if ((ContractOutput
							or  (OutputType.PO
							and  !ItemType.Inventoried))
							and  !SourcingEventLineDistribution set exists)
								include CreateDistributionsFromDistCode
						ShipTo
							if (OutputType.PO
							and (ItemType.Inventoried
							or   old ItemType.Inventoried))
								invoke InvDelete SourcingEventLineDistribution set
						OutputType
							if (ContractOutput
							and old OutputType.PO
							and old ItemType.Inventoried)
								invoke InvDelete SourcingEventLineDistribution set

							if (CreatedfromCM)
								constraint (EffectiveDateOutputTypes)
									"LineOriginatedInContractManagement;CannotOutputToPO"

						ItemType

							if (OutputType changed)
								if (old OutputType entered)
									if (OutputType != old OutputType)
										if (!ItemType.Service)
											initialize ItemType

							if (ItemNumber changed)
								if (old ItemNumber exists)
									if (ItemNumber != old ItemNumber)
										if (!ItemType.Service)
											initialize ItemType

						DisplayLowestBidAmount
							if (LowestBidCond)
								required
									"DisplayLowestBidAmountIsRequiredWhenUsingTheLowestBidOption"

					Action Rules
						if (ItemNumber changed)
							if (ItemNumber exists)
								if (old ItemNumber.Description = Name)
									Name = ItemNumber.Description

						if (CreatedfromRQ
						and OutputType changed
						and old OutputType.PO
						and !OutputType.NoOutput
						and (first OriginCodeRQ.ReqProcurementTransactionDistributionRel.DistributionAmount entered
						or   first OriginCodeRQ.ReqProcurementTransactionDistributionRel.DistributionQuantity entered))
							confirmation required
								"OutputChangedToContractForALineFromARequisitionThatHasAmountOrQuantityDistributions;WhenContractLineIsCreatedDistributionWillBeChangedToPercent;DoYouWantToContinue?"

						if (RqControlled changed
						and CreatedfromRQ)
							confirmation required
								"ValuesAreBeingChangedForARecordThatOriginatedFromRequisitions;RequesterWillBeNotified;DoYouWantToContinue?"
							send email
								to first OriginCodeRQ.RequisitionHeaderRel.RequesterEmailAddress
								from SourcingEvent.Buyer.EmployeeWorkEmailAddress
								subject "RequisitionLineInformationHasBeenChangedOnSourcingEvent"
								Contents
									"InformationFromYourRequisition<first OriginCodeRQ.SourceDocumentNumeric>HasBeenChangedOnSourcingEvent<SourcingEvent>;PleaseReviewChanges"
									"SourcingEventLineInformation-"
									"ItemNumber:<ItemNumber>"
									"ItemType:<ItemType>"
									"ServiceCode:<ServiceCode>"
									"ItemDescription:<ItemDescription>"
									"UOM:<UOM>"
									"Quantity:<Quantity>"
									"RequisitionLineInformation-"
									"ItemNumber:<first OriginCodeRQ.RequisitionLineRel.Item>"
									"ItemType:<first OriginCodeRQ.RequisitionLineRel.ItemType>"
									"ServiceCode:<first OriginCodeRQ.RequisitionLineRel.ServiceCode>"
									"ItemDescription:<first OriginCodeRQ.RequisitionLineRel.Description>"
									"UOM:<first OriginCodeRQ.RequisitionLineRel.EnteredUOM>"
									"Quantity:<first OriginCodeRQ.RequisitionLineRel.Quantity>"
						if (OutputType changed
						and OutputType.PO)
							constraint (!LineSourceWithDropshipRel exists)
								"CannotAddALineToAnEventThatWasCreatedFromRequisitionsWithADropshipAddress"

						if (PerUnitEstimate changed)
							constraint (DerivedTotalEstimate >= 0)
								"CannotChangeEstimatedUnitCostWhereTotalEstimateIsLessThanZero"

						if (Quantity changed
						or  ShipTo changed)
							if (SourcingEventLineSourceRel exists)
								for each SourcingEventLineSourceRel
									invoke Update each
										if (!each.OriginCode.Requisitions
										or   Quantity > old Quantity)
											invoked.Quantity	= Quantity
										invoked.ShipTo		= ShipTo

						include MaintainCommodityCode

					Exit Rules
						if (!SourcingEventLineCommCode exists)
 							invoke Delete OldEventCommodities
						if (CommodityCode entered)
							invoke Update EventCommodities
						if (!OutputType.NoOutput)
							include DefaultDistributions

				UpdateLineFromWorksheet is an Update Action
					restricted
					Action Rules
						if (CommodityCode entered)
							invoke Update EventCommodities

				Delete is a Delete Action
					Action Rules
						invoke SSDelete SourcingEventLineDistribution set

					Exit Rules
						if (CommodityCode entered)
							if (!SourcingEventLineCommCode exists
							and	CommodityCode != any SourcingEvent.SourcingEventLine set.CommodityCode)
								invoke Delete EventCommodities

				ReleaseEvent is an Instance Action
					valid when (!IsATemplate)
					Action Rules
						invoke Release Draft SourcingEvent

				Release is an Instance Action
					restricted
					Action Rules
						if (ItemType.Special
						and OutputType.Standing)
							constraint (Quantity decimals <= 0)
				 				"TooManyDecimalDigitsEnteredForQuantityOnLine<SourcingEventLine>:MaxIs0"
						if (OutputType.PO)
							constraint (ShipTo entered)
								"ShipToIsRequiredForLine<SourcingEventLine>"
						if (ItemType.Special
						or 	ItemType.Service)
							constraint (Description entered)
								"DescriptionIsRequiredForLine<SourcingEventLine>IfSpecialOrService"
						if (!CommodityCode entered
						and ContractOutput
						and ItemNumber exists)
							force default CommodityCode to ItemNumber.CommodityCode
							constraint (CommodityCode entered)
								"CommodityCodeIsRequiredForLine<SourcingEventLine>;MustBeMaintainedOnItem"
						constraint (CommodityCode entered)
							"CommodityCodeIsRequiredForLine<SourcingEventLine>"
						constraint (OutputType entered)
							"OutputTypeIsRequiredForLine<SourcingEventLine>"
						constraint (!ItemCommCodeRel exists)
							"CommodityCodeMismatchForItemmast<ItemNumber>ThatWillBeCreated"
						if (OutputType.PO)
							if (!ItemType.Service
							and !SourcingEvent.InformalQuote)
								constraint (RequestedDeliveryDate entered)
									"RequestedDeliveryDateIsRequiredForLine<SourcingEventLine>"
							if (DeliveryScoringOption.OnRequestedDeliveryDate
							or	SourcingEvent.DeliveryScoringOption.OnRequestedDeliveryDate)
								constraint (RequestedDeliveryDate entered)
									"RequestedDeliveryDateIsRequiredForLine<SourcingEventLine>"
							if (RequestedDeliveryDate entered)
								if (SourcingEvent.DisputeCloseDate entered)
									constraint (RequestedDeliveryDate >= SourcingEvent.DisputeCloseDate)
										"DeliveryDateMustBeGreaterThanDisputeCloseDateForLine<SourcingEventLine>"
								else
								if (SourcingEvent.CloseDate entered)
									constraint (RequestedDeliveryDate >= SourcingEvent.CloseDate)
										"DeliveryDateMustBeGreaterThanEventCloseDateForLine<SourcingEventLine>"
							if (ItemType.Inventoried)
								constraint (!LineDistributionAssetRel exists)
									"DistributionsCannotContainAssetInformationOnLine<SourcingEventLine>,WhichHasInventoryItemTypeAndPOOutput"

						if (SourcingEvent.RequireAllLines)
							RequireResponse = true

						if (!OutputType.NoOutput)
							include DefaultDistributions

						if (SourcingEventLineDistribution set exists)
							constraint (DistributionsTotal)
								"DistributionsDoNotEqualLineQuantityOr100%ForLine<SourcingEventLine>"

						if (TotalWeightingByLine > 0)
							constraint (WeightingsTotalByLine)
								"WeightingPercentagesMustEqual100%ForLine<SourcingEventLine>"

						for each LineQuestionsWithWeighting
							constraint (each.ScoreAllocationEntered exists)
								"WeightingIsEnteredForLine<each.SourcingEventLine>,Question<each.SourcingEventLineQuestion>;MustDefineAScoreAllocation"

						if (ContractOutput)
							constraint (!LineDistributionRel exists)
								"DistributionsCannotContainAssetInformationOrQuantityValuesForContractOutputTypeForLine<SourcingEventLine>"

						if (!CreatedfromRQ
						or  !CreatedfromCM)
							if (!SourcingEventLineSource set exists)
								invoke Create SourcingEventLineSource
									invoked.Company					= Company
									invoked.SourcingEvent			= SourcingEvent
									invoked.SourcingEventLine		= SourcingEventLine
									invoked.ProcurementGroup		= Company.ProcurementGroup
									invoked.Vendor					= blank
									invoked.PurchaseFromLocation	= blank
									invoked.OriginCode				= "SS"
									invoked.SourceDocumentNumeric	= SourcingEvent
									invoked.OperatingCompany		= Company
									invoked.LineNumber				= SourcingEventLine
									invoked.Quantity				= Quantity
									invoked.ShipTo					= ShipTo
						if (CreatedfromRQ)
							for each SourcingEventLineSource set
								invoke DeletePurchaseOrderInterface each
						make transition to Open

			Open is a State
				SubType SourcingEvent.IsEvent Field Rules
					Quantity
						required
					ShipTo
						if (OutputType.PO)
							required
					ItemNumber
						if (ItemNumber changed)
							cannot be changed
								"ItemNumberCannotBeChangedForAnOpenEvent"
					ItemType
						required
						cannot be changed
							"ItemTypeCannotBeChangedForAnOpenEvent"
					OutputType
						required
					CommodityCode
						required
					RequestedDeliveryDate
						if (!RequestedDeliveryDate entered
						and OutputType.PO
						and (DeliveryScoringOption.OnRequestedDeliveryDate
						or	 SourcingEvent.DeliveryScoringOption.OnRequestedDeliveryDate))
							constraint (RequestedDeliveryDate entered)
								"RequestedDeliveryDateIsRequiredForLine<SourcingEventLine>"

				Create is a Create Action
					valid when (SourcingEvent.Status.Open)

					Field Rules
						RequestedDeliveryDate
							if (OutputType.PO)
								default to SourcingEvent.RequestedDeliveryDate
						WeightingCriteria
							if (SourcingEvent.DefaultWeightingToLines)
								default to SourcingEvent.WeightingCriteria
								if (!OutputType.PO)
									initialize WeightingCriteria.DeliveryWeighting
						DiversityScoreAllocation
							if (SourcingEvent.DefaultWeightingToLines)
								default to SourcingEvent.DiversityScoreAllocation
						LowestBidOption
							default to SourcingEvent.LowestBidOption
						DisplayLowestBidAmount
							default to SourcingEvent.DisplayLowestBidAmount
							if (LowestBidCond)
								default to true
						RequireFullQuantity
							default to SourcingEvent.RequireFullQuantity

						AllowAlternateResponses
							default to SourcingEvent.AllowAlternateResponses

						DefaultEffectiveDate
							if (EffectiveDateOutputTypes)
								default to SourcingEvent.DefaultEffectiveDate

						DefaultExpirationDate
							if (EffectiveDateOutputTypes)
								default to SourcingEvent.DefaultExpirationDate

						DefaultContractType
							if (SourcingEvent.DefaultContractType.PurchaseType = ContractType
							and !DefaultContractSubType entered)
								default to SourcingEvent.DefaultContractType

						DefaultContractSubType
							if  (SourcingEvent.DefaultContractSubType.PurchaseType = ContractType
							and  SourcingEvent.DefaultContractType = DefaultContractType
							and  SourcingEvent.DefaultContractSubType entered)
								default to SourcingEvent.DefaultContractSubType

						DefaultContractClass
							if (!DefaultContractSubClass entered)
								default to SourcingEvent.DefaultContractClass

						DefaultContractSubClass
							if (SourcingEvent.DefaultContractClass = DefaultContractClass
							and SourcingEvent.DefaultContractSubClass entered)
								default to SourcingEvent.DefaultContractSubClass

						DefaultScheduleFrequency
							if (OutputType.Standing)
								default to SourcingEvent.DefaultScheduleFrequency

						DefaultMaxReleaseNumber
							if (OutputType.Standing)
								default to SourcingEvent.DefaultMaxReleaseNumber

						DefaultParticipant
							if (OutputType.Standing)
								default to SourcingEvent.DefaultParticipant

					Action Rules
						constraint (SourcingEvent.Status.Open)
							"CanOnlyUseActionWhenEventIsInOpenStatus"
						constraint (SourcingEvent.ApprovalStatus.Approved)
							"CannotUseActionWhenEventIsNotApproved"
						if (SourcingEvent.InformalQuote)
							constraint (SourcingEvent.InActionableState)
								"CannotAddWhileEventIsPendingAward,Cancelled,OrClosed"
						else
							constraint (current timestamp <= SourcingEvent.CloseDate)
								"CannotAddNewLineAfterEventCloseDate"
						if (OutputType.PO)
							constraint (!LineSourceWithDropshipRel exists)
								"CannotAddALineToAnEventThatWasCreatedFromRequisitionsWithADropshipAddress"

						include MaintainCommodityCode

					Exit Rules
						if (CommodityCode entered)
							invoke Update EventCommodities
						invoke Create SourcingEventLineSource
								invoked.Company					= Company
								invoked.SourcingEvent 			= SourcingEvent
								invoked.SourcingEventLine		= SourcingEventLine
								invoked.ProcurementGroup		= Company.ProcurementGroup
								invoked.OriginCode				= "SS"
								invoked.SourceDocumentNumeric	= SourcingEvent
								invoked.OperatingCompany		= Company
								invoked.LineNumber				= SourcingEventLine
								invoked.Quantity				= Quantity
								invoked.ShipTo					= ShipTo
						if (SourcingEvent.InInitiateAmendmentState
						and Company.AmendmentCriteria.AddSourcingEventLine)
							invoke Amend Open.Notified SourcingEvent
						if (!OutputType.NoOutput
						and !CreateFromAnother)
							if (!DistCode entered)
								include DefaultDistributions
							else
								include CreateDistributionsFromDistCode
						if (!OutputType.NoOutput
						and ItemType.Inventoried
						and CreateFromAnother)
							if (!DistCode entered)
								include DefaultDistributions
							else
								include CreateDistributionsFromDistCode

				Update is an Update Action
					Field Rules
						ItemType

							if (OutputType changed)
								if (old OutputType entered)
									if (OutputType != old OutputType)
										if (!ItemType.Service)
											initialize ItemType

							if (ItemNumber changed)
								if (old ItemNumber exists)
									if (ItemNumber != old ItemNumber)
										if (!ItemType.Service)
											initialize ItemType

						DistCode
							if ((ContractOutput
							or  (OutputType.PO
							and  !ItemType.Inventoried))
							and  !SourcingEventLineDistribution set exists)
								include CreateDistributionsFromDistCode
						DisplayLowestBidAmount
							cannot be changed
								"CannotChangeDisplayLowestBidAmountAfterEventIsOpen"
						LowestBidOption
							cannot be changed
								"CannotChangeLowestBidOptionAfterEventIsOpen"

					Action Rules

						if (ItemNumber changed)
							if (ItemNumber exists)
								if (old ItemNumber.Description = Name)
									Name = ItemNumber.Description
									
						if (CreatedfromRQ
						and OutputType changed
						and old OutputType.PO
						and !OutputType.NoOutput
						and (first OriginCodeRQ.ReqProcurementTransactionDistributionRel.DistributionAmount entered
						or   first OriginCodeRQ.ReqProcurementTransactionDistributionRel.DistributionQuantity entered))
							confirmation required
								"OutputChangedToContractForALineFromARequisitionThatHasAmountOrQuantityDistributions;WhenContractLineIsCreatedDistributionWillBeChangedToPercent;DoYouWantToContinue?"
						if (RqControlled changed
						and CreatedfromRQ)
							confirmation required
								"ValuesAreBeingChangedForARecordThatOriginatedFromRequisitions;RequesterWillBeNotified;DoYouWantToContinue?"
							send email
								to first OriginCodeRQ.RequisitionHeaderRel.RequesterEmailAddress
								from SourcingEvent.Buyer.EmployeeWorkEmailAddress
								subject "RequisitionLineInformationHasBeenChangedOnSourcingEvent"
								Contents
									"InformationFromYourRequisition<first OriginCodeRQ.SourceDocumentNumeric>HasBeenChangedOnSourcingEvent<SourcingEvent>;PleaseReviewChanges"
									"SourcingEventLineInformation-"
									"ItemNumber:<ItemNumber>"
									"ItemType:<ItemType>"
									"ServiceCode:<ServiceCode>"
									"ItemDescription:<ItemDescription>"
									"UOM:<UOM>"
									"Quantity:<Quantity>"
									"RequisitionLineInformation-"
									"ItemNumber:<first OriginCodeRQ.RequisitionLineRel.Item>"
									"ItemType:<first OriginCodeRQ.RequisitionLineRel.ItemType>"
									"ServiceCode:<first OriginCodeRQ.RequisitionLineRel.ServiceCode>"
									"ItemDescription:<first OriginCodeRQ.RequisitionLineRel.Description>"
									"UOM:<first OriginCodeRQ.RequisitionLineRel.EnteredUOM>"
									"Quantity:<first OriginCodeRQ.RequisitionLineRel.Quantity>"
						constraint (SourcingEvent.ApprovalStatus.Approved)
							"CanOnlyUpdateWhenEventIsApproved"
						constraint (!Status.Awarded
						or			!Status.Cancelled)
							"CannotUpdateLineIfAwardedOrCancelled"
						if (SourcingEvent.InformalQuote)
							constraint (SourcingEvent.InActionableState)
								"CannotUpdateWhileEventIsPendingAward,Cancelled,OrClosed"
						else
						if (RevisionControlled changed)
							constraint (SourcingEvent.CloseDate >= current timestamp)
								"CannotAmendLineAfterEventCloseDate"
						if (SourcingEvent.BeforeActive)
							invoke TransitionToDraft Open.Notified SourcingEvent set
							make transition to Draft
						if ((SourcingEvent.OpenPreview
						or	SourcingEvent.OpenAvailable)
						and RevisionControlled changed
						and SourcingEvent.InInitiateAmendmentState
						and Company.AmendmentCriteria.UpdateSourcingEventLine)
							invoke Amend Open.Notified SourcingEvent
						if (Quantity changed
						or  ShipTo changed)
							if (SourcingEventLineSourceRel exists)
								for each SourcingEventLineSourceRel
									invoke Update each
										if (!each.OriginCode.Requisitions
										or  Quantity > old Quantity)
											invoked.Quantity	= Quantity
										invoked.ShipTo		= ShipTo
						if (OutputType changed
						and OutputType.PO)
							constraint (!LineSourceWithDropshipRel exists)
								"CannotAddALineToAnEventThatWasCreatedFromRequisitionsWithADropshipAddress"
						if (PerUnitEstimate changed)
							constraint (DerivedTotalEstimate >= 0)
								"CannotChangeEstimatedUnitCostWhereTotalEstimateIsLessThanZero"

						include MaintainCommodityCode

					Exit Rules
						if (SourcingEvent.InActionableState
						and !SourcingEventLineCommCode exists)
							invoke Delete OldEventCommodities
						if (CommodityCode entered)
							invoke Update EventCommodities

				Delete is a Delete Action
					restricted

				TransitionToDraft is an Instance Action
					restricted
					Action Rules
						make transition to Draft

				CancelLines is an Instance Action
					restricted
					Action Rules
						constraint (!Status.Cancelled)
							"EventLine<SourcingEventLine>IsAlreadyCancelled"
						constraint (!Status.Awarded)
							"CannotCancel-EventLine<SourcingEventLine>IsAlreadyAwarded"
						if (CreatedfromRQ)
							for each OriginCodeRQ
								invoke Processed.UpdateInterfaceCancelQuantity each.RequisitionLineRel
									if (each.Quantity <= each.RequisitionLineRel.Quantity)
										invoked.PrmCancelQuantity  = each.Quantity
									else 
										invoked.PrmCancelQuantity  = each.RequisitionLineRel.Quantity
						make transition to Cancelled

				ValidateAward is an Instance Action
					restricted

					Action Rules

						if (!ContractOutput)
							constraint (TotalAwardQuantity <= Quantity)
								"CannotAwardMoreThanTheLineQuantityForLine<SourcingEventLine>"
							if (TotalAwardQuantity < Quantity)
								confirmation required
									"Line<SourcingEventLine>HasNotBeenFullyAwardedAndTheRemainingQuantityOf<LineCancelQuantity>WillBeCancelledWhenOutputIsCreated;DoYouWantToContinue?"
						if (Company.RequireNonAwardReason)
							constraint (!BlankNonAwardReasons exists)
								"MustSpecifyNonAwardReasonsForEachNonAwardedSupplier-Line<SourcingEventLine>"
						constraint (AllVendorItemsEntered)
							"VendorItemRequiredForLine<SourcingEventLine>,Supplier<VendorItemNotEnteredSupplier>"
						constraint (!SourcingEvent.NotificationStatus.Amended)
							"EventStatusIsAmendmentInProgress;MustReleaseBeforeFinalAward"
						if  (SourcingEventLineDistribution set exists
						and !CreatedfromRQ)
							constraint (DistributionsTotalAtAward)
								"DistributionsDoNotEqualTotalAwardedQuantityOr100%ForLine<SourcingEventLine>"
						if (TotalWeightingByLine > 0)
							constraint (WeightingsTotalByLine)
								"WeightingPercentagesMustEqual100%ForLine<SourcingEventLine>"
						if (!SourcingEvent.InformalQuote)
							constraint (SourcingEvent.CloseDate <= current timestamp)
								"CannotFinalizeAwardBeforeEventCloseDate"
						if  ((OutputType.PO
						and  !ItemType.Inventoried
						and  !CreatedfromRQ)
						or	 ((OutputType.Standing
						or	 OutputType.Service)
						and  !CreatedfromCM
						and  !CreatedfromRQ))
							constraint (SourcingEventLineDistribution set exists)
								"DistributionInformationRequiredForLine<SourcingEventLine>"

						for each AwardedLines
							include CommonAwardedLineEdits

							if ((each.LifetimeMaximumAmount entered or each.ServiceCommitment)
							and !CreatedfromRQ)
								constraint (SourcingEventLineDistribution set exists)
										"DistributionInformationRequiredForLine<SourcingEventLine>ForCommitments"
								if (each.SourcingEventResponse.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
									if (each.Contract entered)
										LocalBudgetEffectiveDate        = each.Contract.EffectiveDate
									else
									if (each.EffectiveDate entered)
										LocalBudgetEffectiveDate    	= each.EffectiveDate
									else
										LocalBudgetEffectiveDate        = current corporate date
									LocalBudgetLifetimeMaximumAmount	= each.LifetimeMaximumAmount
									LocalBudgetUnitPrice				= each.ResponseAmount.UnitPrice
									LocalBudgetMaxQuantity				= each.LifetimeMaxQuantity
									if (each.Contract exists)
										LocalContractUniqueID			= each.UniqueID

									for each SourcingEventLineDistribution set
										invoke PerformBudgetEditFinalAward each
											invoked.PrmCommitmentDate = LocalBudgetEffectiveDate
											if (!OutputType.Service)
												invoked.PrmCommitmentAmount = LocalBudgetLifetimeMaximumAmount
											else
											if (ServiceCode.Amount)
												invoked.PrmCommitmentAmount = LocalBudgetUnitPrice
											else
											if (ServiceCode.Quantity)
												invoked.PrmCommitmentAmount = (LocalBudgetUnitPrice * LocalBudgetMaxQuantity)
											invoked.PrmContractUniqueID		= LocalContractUniqueID

							if (each.GlobalTradeItemNumber exists
							and each.SourcingEventLine.ManufacturerInformation entered)
								constraint (each.GlobalTradeItemNumber.Manufacturer.ManufacturerCode		= each.SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerCode
								and         each.GlobalTradeItemNumber.Manufacturer.ManufacturerDivision	= each.SourcingEventLine.ManufacturerInformation.Manufacturer.ManufacturerDivision
								and         each.GlobalTradeItemNumber.ManufacturerNumber					= each.SourcingEventLine.ManufacturerInformation.ManufacturerNumber)
									"ManufacturerInformationMustBeTheSameOnGTIN<each.GlobalTradeItemNumber>AndEventLine<each.SourcingEventLine>"

							if (each.PovendoritemRel exists)
								if (ManufacturerInformation entered
								and !GlobalTradeItemNumber exists)
									constraint (ManufacturerInformation.Manufacturer.ManufacturerCode		= each.PovendoritemRel.Manufacturer.ManufacturerCode
									and         ManufacturerInformation.Manufacturer.ManufacturerDivision	= each.PovendoritemRel.Manufacturer.ManufacturerDivision
									and         ManufacturerInformation.ManufacturerNumber					= each.PovendoritemRel.ManufacturerNumber)
										"ManufacturerInformationMustBeTheSameOnEventLine<each.SourcingEventLine>AndVendorItem"

							if (each.ItemNumber exists
							and each.ManufacturerInformation entered)
								if (each.GTINsByManufRel exists)
									if (each.GlobalTradeItemNumber entered)
										constraint (each.GlobalTradeItemNumber = each.GTINsByManufRel.ItemGTIN)
											"GTIN<each.GlobalTradeItemNumber>OnEventLineResponseDoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"

				FinalAward is an Instance Action
					valid when (FinalAwardValid)
					Local Fields
						SourceQuantity		is a Quantity
						TheAwardQuantity	is a Quantity
						SourceLine			is Iteration of SourcingEventLineSource

					Action Rules
	  					invoke ValidateAward

	  					if (OutputType.PO)
		  					SourceLine = first iteration of SourcingEventLineSource set
		  					SourceQuantity = SourceLine.Quantity

		   					for each AwardedPOLines

		   						TheAwardQuantity = each.AwardQuantity
		   						while (TheAwardQuantity > 0)
			   						invoke Create each.SourcingEventLineResponseAward set
			   							invoked.NotifiedSupplier.SupplierGroup   	= each.NotifiedSupplier.SupplierGroup
			   							invoked.NotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
			   							invoked.NotifiedSupplier.SupplierSourceId   = each.NotifiedSupplier.SupplierSourceId
			   							invoked.SourcingEventLineSource				= SourceLine.SourcingEventLineSource
			   							invoked.SourcingEventLine					= SourcingEventLine
			   							if (SourceQuantity <= TheAwardQuantity)
			   								invoked.AwardQuantity = SourceQuantity
			   							else
			   								invoked.AwardQuantity = TheAwardQuantity

			   						if (SourceQuantity <= TheAwardQuantity)
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += SourceQuantity

			   							TheAwardQuantity = TheAwardQuantity - SourceQuantity
			   							SourceLine     	 = next SourceLine
			   							SourceQuantity   = SourceLine.Quantity
			   						else
										invoke Update SourceLine
											invoked.AwardedQuantity += TheAwardQuantity

										SourceQuantity   = SourceQuantity - TheAwardQuantity
										TheAwardQuantity = 0

							for each AwardedAlternate1POLines

								TheAwardQuantity = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity
								while (TheAwardQuantity > 0)
									LocalNotifiedSupplier    = each.NotifiedSupplier
									LocalEventLineSource     = SourceLine.SourcingEventLineSource

									if (!DuplicateAwardDistribution exists)
										invoke Create each.SourcingEventLineResponseAward set
											invoked.NotifiedSupplier.SupplierGroup		= each.NotifiedSupplier.SupplierGroup
											invoked.NotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
											invoked.NotifiedSupplier.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
											invoked.SourcingEventLineSource				= SourceLine.SourcingEventLineSource
											invoked.SourcingEventLine					= SourcingEventLine
											if (SourceQuantity <= TheAwardQuantity)
												invoked.AltAwardQuantity1 = SourceQuantity
											else
												invoked.AltAwardQuantity1 = TheAwardQuantity
									else
										invoke Update first DuplicateAwardDistribution
											if (SourceQuantity <= TheAwardQuantity)
												invoked.AltAwardQuantity1 = SourceQuantity
											else
												invoked.AltAwardQuantity1 = TheAwardQuantity

									if (SourceQuantity <= TheAwardQuantity)
										invoke Update SourceLine
											invoked.AwardedQuantity += SourceQuantity

			   							TheAwardQuantity = TheAwardQuantity - SourceQuantity
			   							SourceLine       = next SourceLine
			   							SourceQuantity   = SourceLine.Quantity
			   						else
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += TheAwardQuantity

			   							SourceQuantity   = SourceQuantity - TheAwardQuantity
			   							TheAwardQuantity = 0

							for each AwardedAlternate2POLines

		   						TheAwardQuantity = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity
		   						while (TheAwardQuantity > 0)
			   						LocalNotifiedSupplier    = each.NotifiedSupplier
			   						LocalEventLineSource     = SourceLine.SourcingEventLineSource

			   						if (!DuplicateAwardDistribution exists)
			   							invoke Create each.SourcingEventLineResponseAward set
				   							invoked.NotifiedSupplier.SupplierGroup   	= each.NotifiedSupplier.SupplierGroup
			   								invoked.NotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
			   								invoked.NotifiedSupplier.SupplierSourceId   = each.NotifiedSupplier.SupplierSourceId
			   								invoked.SourcingEventLineSource				= SourceLine.SourcingEventLineSource
			   								invoked.SourcingEventLine					= SourcingEventLine
				   							if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity2 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity2 = TheAwardQuantity
		   							else
		   								invoke Update first DuplicateAwardDistribution
		   									if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity2 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity2 = TheAwardQuantity

			   						if (SourceQuantity <= TheAwardQuantity)
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += SourceQuantity

			   							TheAwardQuantity = TheAwardQuantity - SourceQuantity
			   							SourceLine       = next SourceLine
			   							SourceQuantity   = SourceLine.Quantity
			   						else
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += TheAwardQuantity

			   							SourceQuantity   = SourceQuantity - TheAwardQuantity
			   							TheAwardQuantity = 0

							for each AwardedAlternate3POLines

		   						TheAwardQuantity = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity
		   						while (TheAwardQuantity > 0)
			   						LocalNotifiedSupplier    = each.NotifiedSupplier
			   						LocalEventLineSource     = SourceLine.SourcingEventLineSource

			   						if (!DuplicateAwardDistribution exists)
			   							invoke Create each.SourcingEventLineResponseAward set
				   							invoked.NotifiedSupplier.SupplierGroup   	= each.NotifiedSupplier.SupplierGroup
			   								invoked.NotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
			   								invoked.NotifiedSupplier.SupplierSourceId   = each.NotifiedSupplier.SupplierSourceId
			   								invoked.SourcingEventLineSource				= SourceLine.SourcingEventLineSource
			   								invoked.SourcingEventLine					= SourcingEventLine
				   							if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity3 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity3 = TheAwardQuantity
		   							else
		   								invoke Update first DuplicateAwardDistribution
		   									if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity3 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity3 = TheAwardQuantity

			   						if (SourceQuantity <= TheAwardQuantity)
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += SourceQuantity

			   							TheAwardQuantity = TheAwardQuantity - SourceQuantity
			   							SourceLine       = next SourceLine
			   							SourceQuantity   = SourceLine.Quantity
			   						else
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += TheAwardQuantity

			   							SourceQuantity   = SourceQuantity - TheAwardQuantity
			   							TheAwardQuantity = 0

	   						for each AwardedAlternate4POLines

		   						TheAwardQuantity = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity
		   						while (TheAwardQuantity > 0)
			   						LocalNotifiedSupplier    = each.NotifiedSupplier
			   						LocalEventLineSource     = SourceLine.SourcingEventLineSource

			   						if (!DuplicateAwardDistribution exists)
			   							invoke Create each.SourcingEventLineResponseAward set
				   							invoked.NotifiedSupplier.SupplierGroup   	= each.NotifiedSupplier.SupplierGroup
			   								invoked.NotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
			   								invoked.NotifiedSupplier.SupplierSourceId   = each.NotifiedSupplier.SupplierSourceId
			   								invoked.SourcingEventLineSource				= SourceLine.SourcingEventLineSource
			   								invoked.SourcingEventLine					= SourcingEventLine
				   							if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity4 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity4 = TheAwardQuantity
		   							else
		   								invoke Update first DuplicateAwardDistribution
		   									if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity4 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity4 = TheAwardQuantity

			   						if (SourceQuantity <= TheAwardQuantity)
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += SourceQuantity

			   							TheAwardQuantity = TheAwardQuantity - SourceQuantity
			   							SourceLine       = next SourceLine
			   							SourceQuantity   = SourceLine.Quantity
			   						else
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += TheAwardQuantity

			   							SourceQuantity   = SourceQuantity - TheAwardQuantity
			   							TheAwardQuantity = 0

			   				for each AwardedAlternate5POLines

		   						TheAwardQuantity = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity
		   						while (TheAwardQuantity > 0)
			   						LocalNotifiedSupplier    = each.NotifiedSupplier
			   						LocalEventLineSource     = SourceLine.SourcingEventLineSource

			   						if (!DuplicateAwardDistribution exists)
			   							invoke Create each.SourcingEventLineResponseAward set
				   							invoked.NotifiedSupplier.SupplierGroup   	= each.NotifiedSupplier.SupplierGroup
			   								invoked.NotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
			   								invoked.NotifiedSupplier.SupplierSourceId   = each.NotifiedSupplier.SupplierSourceId
			   								invoked.SourcingEventLineSource				= SourceLine.SourcingEventLineSource
			   								invoked.SourcingEventLine					= SourcingEventLine
				   							if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity5 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity5 = TheAwardQuantity
		   							else
		   								invoke Update first DuplicateAwardDistribution
		   									if (SourceQuantity <= TheAwardQuantity)
				   								invoked.AltAwardQuantity5 = SourceQuantity
				   							else
			   									invoked.AltAwardQuantity5 = TheAwardQuantity

			   						if (SourceQuantity <= TheAwardQuantity)
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += SourceQuantity

			   							TheAwardQuantity = TheAwardQuantity - SourceQuantity
			   							SourceLine       = next SourceLine
			   							SourceQuantity   = SourceLine.Quantity
			   						else
			   							invoke Update SourceLine
			   								invoked.AwardedQuantity += TheAwardQuantity

			   							SourceQuantity   = SourceQuantity - TheAwardQuantity
			   							TheAwardQuantity = 0

						if (OutputType.NoOutput
						and !CreatedfromCM)
							OutputCreated = true
							make transition to Closed
						else
							make transition to Awarded

					Exit Rules
						if (OutputType.NoOutput
						and !CreatedfromCM)
							invoke CloseEvent Open.Notified SourcingEvent

							include CancelRemainingQuantity

							for each AwardedAnyNoOutputLines
								if (OriginCodeRQ exists)
									LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
									LocalSupplier 	   = each.NotifiedSupplier.Supplier
									for each OriginCodeRQ
										SavedRequisition = each.SourceDocumentNumeric

				DeleteAward is an Instance Action
					valid when (DeleteAwardValid)
 					Action Rules
						for each AwardedLines
							invoke DeleteAward Submitted each
						initialize CancelledQuantity

				Cancel is an Instance Action
					confirmation required
   	 				Action Rules
   	 					constraint (!Status.Cancelled)
							"EventLine<SourcingEventLine>IsAlreadyCancelled"
						constraint (!Status.Awarded)
							"CannotCancel-EventLine<SourcingEventLine>IsAlreadyAwarded"
						if (SourcingEvent.InInitiateAmendmentState
						and Company.AmendmentCriteria.CancelSourcingEventLine)
							invoke Amend Open.Notified SourcingEvent
						if (current timestamp > SourcingEvent.CloseDate
						or	SourcingEvent.InformalQuote)
							if (!SourcingEvent.PostingOptions.DoNotDisplayOnPortal)
								if ((!SourcingEvent.CreateAmendments)
								and ((current timestamp >= SourcingEvent.OpenDate)
								or (SourcingEvent.PreviewDate entered
								and current timestamp >= SourcingEvent.PreviewDate))
								or  (SourcingEvent.CreateAmendments
								and current timestamp > SourcingEvent.CloseDate
								and !SourcingEvent.InformalQuote)
		  						or  (SourcingEvent.InformalQuote
								and  SourcingEvent.AnyLinePrelimAwarded)
								or (!Company.AmendmentCriteria.CancelSourcingEventLine
								or  !SourcingEvent.CreateAmendments))
									if (Company.SendLineCanceledEmail
									and !SourcingEvent.StepTwoInProcess)
										for each SourcingEvent.SupplierSourceIdsToNotify
											include SendLineCancelledEmailMessage

										for each SourcingEvent.RespondedButNotNotified
											include SendLineCancelledEmailMessage

										for each SourcingEvent.PlanHoldersToNotifyRel
											include SendLineCancelledEmailMessage

									else
									if (SourcingEvent.StepTwoInProcess)
										for each SourcingEvent.ResponsesAcceptedTechnicalSendEmail
											include SendLineCancelledEmailMessage

										for each SourcingEvent.ResponsesBestAndFinalSendEmail
											include SendLineCancelledEmailMessage

									if (Company.CreateLineCanceledMessage
									and !SourcingEvent.StepTwoInProcess)

										for each SourcingEvent.SourcingEventNotification set
											include CreateLineCancelledSupplierContactMessage

										for each SourcingEvent.AllRespondedButNotNotified
											include CreateLineCancelledSupplierContactMessage

										for each SourcingEvent.PlanHoldersToNotifyRel
											include CreateLineCancelledSupplierContactMessage

									else
									if (SourcingEvent.StepTwoInProcess)
										for each SourcingEvent.ResponsesAcceptedTechnicalSendEmail
											include CreateLineCancelledSupplierContactMessage

										for each SourcingEvent.ResponsesBestAndFinalSendEmail
											include CreateLineCancelledSupplierContactMessage

						if (CreatedfromRQ)
							for each OriginCodeRQ
								invoke Processed.UpdateInterfaceCancelQuantity each.RequisitionLineRel
									if (each.Quantity <= each.RequisitionLineRel.Quantity)
										invoked.PrmCancelQuantity  = each.Quantity
									else 
										invoked.PrmCancelQuantity  = each.RequisitionLineRel.Quantity

						for each AwardedLines
							invoke DeleteAward Submitted each

						for each AwardedAlternateLines
							invoke DeleteAward Submitted each

						make transition to Cancelled

					Exit Rules
						if (!Company.AmendmentCriteria.CancelSourcingEventLine
						or  !SourcingEvent.CreateAmendments
						or  (!SourcingEvent.InformalQuote
						and   SourcingEvent.CloseDate < current timestamp)
  						or  (SourcingEvent.InformalQuote
						and  SourcingEvent.AnyLinePrelimAwarded))
							invoke CloseCancel SourcingEvent

				ReleaseAmended is an Instance Action
					restricted
					Action Rules
						if (!OutputType.NoOutput)
							include DefaultDistributions
						if (SourcingEventLineDistribution set exists)
							constraint (DistributionsTotal)
								"DistributionsDoNotEqualLineQuantityOr100%ForLine<SourcingEventLine>"
						if (TotalWeightingByLine > 0)
							constraint (WeightingsTotalByLine)
								"WeightingPercentagesMustEqual100%ForLine<SourcingEventLine>"
						for each LineQuestionsWithWeighting
							constraint (each.ScoreAllocationEntered exists)
								"WeightingIsEnteredForLine<each.SourcingEventLine>,Question<each.SourcingEventLineQuestion>;MustDefineAScoreAllocation"
						if (ContractOutput)
							constraint (!LineDistributionRel exists)
								"DistributionsCannotContainAssetInformationOrQuantityValuesForContractOutputTypeForLine<SourcingEventLine>"

			Cancelled is a State
				Entrance Rules
					CancelDate = current timestamp

				ReinstateDraft is an Instance Action
					restricted
					Action Rules
						constraint (!CreatedfromRQ)
							"CannotReinstateIfOriginatedFromRequisitions"
						make transition to Draft

						initialize CancelDate

				ReinstateOpen is an Instance Action
					restricted
					Action Rules
						constraint (!CreatedfromRQ)
							"CannotReinstateIfOriginatedFromRequisitions"
						make transition to Open

						initialize CancelDate

				Reinstate is an Instance Action
					Action Rules
						constraint (!CreatedfromRQ)
							"CannotReinstateIfOriginatedFromRequisitions"
						constraint (!SourcingEvent.Status.Cancelled)
							"MustReinstateEntireEvent"
						make transition to Open

					Exit Rules
						if (SourcingEvent.Status.Closed)
							invoke OpenEvent Closed SourcingEvent

						initialize CancelDate

			Awarded is a State
				Approval is a StateCycle
					state field is AwardApprovalStatus

					NeedsApproval is a State
						Entrance Rules
							if (!Company.AwardApprovalRequired)
								invoke Approve
							else
								initiate SEAwardApproval process
									title is "Company<Company>SourcingEvent<SourcingEvent>"
									Criteria
										Company
									category filter is SourcingEvent.Buyer
									Variables
										Company
										SourcingEvent
										SourcingEventLine
										Name
									URLs
										"<linkback(webapp is SourcingManager navigation is AwardEventApproval text is \"ViewEvent\")>"

						Approve is an Instance Action
							restricted
							Action Rules
								make transition to Approved

						Disapprove is an Instance Action
							restricted
							Action Rules
								invoke Delete AwardDistribution
								make transition to Open
						ManualApprove is an Instance Action
							Action Rules
								make transition to Approved
								cancel SEAwardApproval process

						ManualDisapprove is an Instance Action
							Action Rules
								invoke Delete AwardDistribution
								make transition to Open
								cancel SEAwardApproval process

					Approved is a State

						ValidateOutput is an Instance Action
							restricted
							Action Rules
								if (!ContractOutput)
									if (TotalAwardQuantity < Quantity)
				  						confirmation required
				  							"Line<SourcingEventLine>HasNotBeenFullyAwardedAndTheRemainingQuantityOf<LineCancelQuantity>WillBeCancelled;DoYouWantToContinue?"
				  					constraint (TotalAwardQuantity <= Quantity)
										"CannotAwardMoreThanTheLineQuantityForLine<SourcingEventLine>"
								if (Company.RequireNonAwardReason)
									constraint (!BlankNonAwardReasons exists)
										"MustSpecifyNonAwardReasonsForEachNonAwardedSupplier-Line<SourcingEventLine>"
								constraint (AllVendorItemsEntered)
									"VendorItemRequiredForLine<SourcingEventLine>,Supplier<VendorItemNotEnteredSupplier>"
								if (Company.DisputePeriod)
									constraint (current timestamp >= SourcingEvent.DisputeCloseDate)
										"CannotCreateOutputUntilAfterDisputePeriodEnds"
								constraint (!OutputCreated)
									"PurchaseOrderOrContractAlreadyCreatedForLine<SourcingEventLine>"
								constraint (!SourcingEvent.NotificationStatus.Amended)
									"EventStatusIsAmendmentInProgress;MustReleaseBeforeCreateOutput"
								for each AwardedLines
									constraint (each.NotifiedSupplier.Supplier.SupplierStatus.Validated)
										"CannotCreateOutputUntilSupplier<each.NotifiedSupplier.Supplier>IsValidated"
									constraint (each.NotifiedSupplier.Supplier.Active)
										"CannotCreateOutput;Supplier<each.NotifiedSupplier.Supplier>IsNotActive"
									constraint (each.NotifiedSupplier.SupplierSourceId.Active)
										"CannotCreateOutput;SupplierContact<each.NotifiedSupplier.SupplierSourceId>IsNotActive"
									if (!OutputType.NoOutput)
										constraint (!each.NotifiedSupplier.Supplier.Vendor pending
										and			each.NotifiedSupplier.Supplier.Vendor entered)
											"VendorDoesNotExistForAwardedSupplier<each.NotifiedSupplier.Supplier>"
										constraint (each.NotifiedSupplier.Supplier.Vendor.VendorStatus.Active)
											"CannotCreateOutput;Vendor<each.NotifiedSupplier.Supplier.Vendor>ForSupplier<each.NotifiedSupplier.Supplier>IsNotActive"
										if (each.NotifiedSupplier.SupplierSourceId.VendorLocationEntered)
											constraint (each.NotifiedSupplier.SupplierSourceId.VendorLocation.Status.Active)
												"CannotCreateOutput;VendorLocation<each.NotifiedSupplier.SupplierSourceId.VendorLocation>ForContact<each.NotifiedSupplier.SupplierSourceId.MainContact.FirstAndLastName>IsNotActive"

									if (each.VendorItem entered)
										if (OutputType.PO)
											if (ItemType.Inventoried
											or  ItemType.NonStock)
												if (each.VendorItemDefault exists)
													constraint (each.VendorItemByItemRel exists)
														"VendorItem<each.VendorItem>NotAValidVendorItemForItem<ItemNumber>"
													constraint (each.VendorItem.Active)
														"VendorItem<each.VendorItem>EnteredOnLine<each.SourcingEventLine>IsInactive"

										if (ItemType.Special)
											if (ContractOutput)
												constraint (each.PovendoritemRel !exists)
													"VendorItem<each.VendorItem>AlreadyExistsForDifferentItemForAwardedSupplier<each.NotifiedSupplier.Supplier>"

										if (each.Contract exists
										and !ItemType.Special)
											constraint (!each.ItemOnContractLineRel exists)
												"VendorItem<each.VendorItem>WithUOMOf<each.UOM>OnLineNumber<each.SourcingEventLine>IsAlreadyOnTheExistingContract"

									if (OutputType.PO
									and !ItemType.Service
									and each.AwardQuantity entered)
										constraint (each.DeliveryDateOverride >= current corporate date)
											"DeliveryDateCannotBeBeforeCurrentDateForAwardedSupplier<each.NotifiedSupplier.Supplier>;MustOverrideOnLineAwardForms"

									if (each.PurchaseOrder exists)
										constraint (!each.PurchaseOrder.Closed.Yes)
											"CannotAppendToPurchaseOrderThatIsAlreadyClosed"
										constraint (!each.PurchaseOrder.Canceled)
											"CannotCreateOutputForCancelledPurchaseOrder:<each.PurchaseOrder>"
										if (each.DropShipAddressRel exists)
											constraint (each.first DropShipAddressRel.PurchaseOrderInterfaceRel.DropshipAddress = each.PurchaseOrder.DropshipAddress)
												"CannotAppendToAnExistingPurchaseOrderWithDifferentDropshipAddress"

									if (each.Participant entered)
										LocalCompany = each.Participant.Company
										constraint (PoCompanyRel exists)
											"ParticipantCompanysProcurementGroupDoesNotEqualTheSourcingCompanysProcurementGroupOnLineNumber<each.SourcingEventLine>"

									if (OutputType.PO)

										if (each.AwardQuantity entered)
											LocalPOLineRequestedDeliveryDate		= each.SourcingEventLineResponse.DeliveryDateOverride
											if (each.PurchaseOrder exists)
												constraint (LocalPOLineRequestedDeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
													"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>Perform_Change_Award;MustOverrideOnAwardScreen"
											else
												constraint (LocalPOLineRequestedDeliveryDate >= current corporate date)
													"DeliveryDateCannotBeBeforePODate;Perform_Change_Award;MustOverrideOnAwardScreen"

										if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardQuantity entered)
											if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
											or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate)
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.DeliveryDateOverride
											else
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate

											if (each.PurchaseOrder exists)
												constraint (LocalPOLineRequestedDeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
													"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>Perform_Change_Award;MustOverrideOnAwardScreen"
											else
												constraint (LocalPOLineRequestedDeliveryDate >= current corporate date)
													"DeliveryDateCannotBeBeforePODate;Perform_Change_Award;MustOverrideOnAwardScreen"

										if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardQuantity entered)
											if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
											or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate)
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.DeliveryDateOverride
											else
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate

											if (each.PurchaseOrder exists)
												constraint (LocalPOLineRequestedDeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
													"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>Perform_Change_Award;MustOverrideOnAwardScreen"
											else
												constraint (LocalPOLineRequestedDeliveryDate >= current corporate date)
													"DeliveryDateCannotBeBeforePODate;Perform_Change_Award;MustOverrideOnAwardScreen"

										if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardQuantity entered)
											if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
											or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate)
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.DeliveryDateOverride
											else
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate

											if (each.PurchaseOrder exists)
												constraint (LocalPOLineRequestedDeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
													"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>Perform_Change_Award;MustOverrideOnAwardScreen"
											else
												constraint (LocalPOLineRequestedDeliveryDate >= current corporate date)
													"DeliveryDateCannotBeBeforePODate;Perform_Change_Award;MustOverrideOnAwardScreen"

										if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardQuantity entered)
											if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
											or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate)
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.DeliveryDateOverride
											else
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate

											if (each.PurchaseOrder exists)
												constraint (LocalPOLineRequestedDeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
													"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>Perform_Change_Award;MustOverrideOnAwardScreen"
											else
												constraint (LocalPOLineRequestedDeliveryDate >= current corporate date)
													"DeliveryDateCannotBeBeforePODate;Perform_Change_Award;MustOverrideOnAwardScreen"

										if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardQuantity entered)
											if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
											or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate)
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.DeliveryDateOverride
											else
												LocalPOLineRequestedDeliveryDate	= each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate

											if (each.PurchaseOrder exists)
												constraint (LocalPOLineRequestedDeliveryDate >= each.PurchaseOrder.PurchaseOrderDate)
													"DeliveryDateCannotBeBeforePODate<each.PurchaseOrder.PurchaseOrderDate>Perform_Change_Award;MustOverrideOnAwardScreen"
											else
												constraint (LocalPOLineRequestedDeliveryDate >= current corporate date)
													"DeliveryDateCannotBeBeforePODate;Perform_Change_Award;MustOverrideOnAwardScreen"

						CreateOutput is an Instance Action
							valid when (CreateOutputValid)
							Action Rules
								invoke ValidateOutput

								if (OutputType.PO)
									invoke CreatePoOutput
								else
									invoke CreateContractOutput

								for each AwardedLines 
									if (!each.SourcingEventResponse.ConsolidateOutput)
										if (!SourcingEvent.PostingOptions.DoNotDisplayOnPortal)
											if (Company.SendOutputEmail)
												if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
													LocalNotifiedSupplier = each.NotifiedSupplier
													send email
														to each.NotifiedSupplier.SupplierSourceId.EmailAddress
														cc DerivedProxyEmailAddressList
														from DerivedFromEmail
														subject "<Company.FinalOutputEmailSubject>"
														Contents
															"<Company.FinalOutputEmailContent>"

											if (Company.CreateOutputMessage)
												invoke Create SupplierContactMessage
													invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
													invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
													invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
													invoked.CreationDateTime				= current timestamp
													invoked.MessageTitle					= Company.FinalOutputEmailSubject
													invoked.MessageText						= Company.FinalOutputEmailContent
													invoked.Status							= 1
													invoked.Priority						= 2
													invoked.SystemGenerated					= true
													invoked.ReleaseStatus					= 2
									                invoked.OriginatingEvent    			= SourcingEvent
													invoked.OriginatingCompany  			= Company
									                invoked.MessageOwner        			= SourcingEvent.Buyer

											if (Company.ConsolidateEmails)
												invoke UpdateConsolidateOutput Submitted each.SourcingEventResponse
													invoked.ConsolidateOutputParam = true

							Exit Rules
								invoke CloseEvent Open.Notified SourcingEvent

						CreatePoOutput is an Instance Action
							restricted
							Local Fields
								LocalSourceLine			is a SourcingEventLineSource

							Action Rules
								for each AwardDistribution
									LocalSourceLine = each.SourcingEventLineSource
									if  (!each.SourcingEventLineResponse.PurchaseOrder entered)
										invoke Unreleased.Create PurchaseOrder
											assign result to SavedPurchaseOrder
											invoked.Company                     		= Company
											invoked.POCode                      		= each.SourcingEventLineResponse.POCode
											invoked.Vendor                      		= each.SourcingEventResponse.NotifiedSupplier.Supplier.Vendor
											invoked.Currency                    		= each.SourcingEventResponse.CurrencyCode
											invoked.Buyer                       		= SourcingEvent.Buyer
											invoked.ShipToLocation              		= ShipTo
											invoked.TransientFromSourcing                   = true
											if (CreatedfromRQ)
												invoked.Dropship                		= LocalSourceLine.RequisitionHeaderRel.Dropship
												invoked.DropshipName            		= LocalSourceLine.RequisitionHeaderRel.DropshipName
												invoked.DropshipAddress          		= LocalSourceLine.RequisitionHeaderRel.DropshipAddress
												invoked.DropshipPhoneNumber     		= LocalSourceLine.RequisitionHeaderRel.DropshipPhoneNumber
												invoked.DropshipContact         		= LocalSourceLine.RequisitionHeaderRel.DropshipContact
												invoked.PurchaseOrderUserField1 		= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderUserField1
												invoked.PurchaseOrderUserField3 		= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderUserField3
												invoked.PurchaseOrderUserField5 		= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderUserField5
												invoked.PurchaseOrderUserField7 		= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderUserField7
												invoked.UserDate1               		= LocalSourceLine.RequisitionHeaderRel.UserDate1
												invoked.UserDate2               		= LocalSourceLine.RequisitionHeaderRel.UserDate2
												invoked.PurchaseOrderBillToName 		= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderBillToName
												invoked.PurchaseOrderBillToAddress 		= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderBillToAddress
												invoked.PurchaseOrderBillToContact 		= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderBillToContact
												invoked.ProcurementCardNumber   		= LocalSourceLine.RequisitionHeaderRel.ProcurementCardNumber
												invoked.PurchaseOrderBillToPhoneNumber 	= LocalSourceLine.RequisitionHeaderRel.PurchaseOrderBillToPhoneNumber
												invoked.PurchaseOrderBillToEmailAddress = LocalSourceLine.RequisitionHeaderRel.PurchaseOrderBillToEmailAddress
												invoked.ProcessLevel                    = LocalSourceLine.RequisitionHeaderRel.RequestingLocation.ProcessLevel

										invoke Update Submitted each.SourcingEventLineResponse
											invoked.PurchaseOrder               = SavedPurchaseOrder.PurchaseOrder

										invoke UpdatePurchaseOrder Submitted each.SourcingEventResponse
											invoked.ParmPOCode          	    = each.SourcingEventLineResponse.POCode
											invoked.ParmPurchaseOrder   		= SavedPurchaseOrder.PurchaseOrder

									LocalPONumber = each.SourcingEventLineResponse.PurchaseOrder
									if (!PurchaseOrderLineSourceExists)
										for each SourcingEvent.SourcingPOHdrComment
											invoke SystemCreate PurchaseOrderComment
												invoked.Company         = Company
												invoked.PurchaseOrder	= LocalPONumber
												invoked.CommentType     = each.Type
												invoked.CommentText     = each.Comment
												invoked.CommentTitle    = each.Title
												invoked.Attachment.File      = each.Attachment.File
												invoked.Attachment.MimeType  = each.Attachment.MimeType
												invoked.Attachment.Title     = each.Attachment.Title

									if (CreatedfromRQ)
										LocalReqNumber = LocalSourceLine.SourceDocumentNumeric
										if (!RQPurchaseOrderLineSourceExists)
											for each LocalSourceLine.RequisitionHeaderRel.RequisitionComment set
												if (not each.CommentType.PrintOnPickList
												and not each.CommentType.PrintOnRequisition
												and not each.CommentType.DisplayOnly)
													invoke SystemCreate PurchaseOrderComment
														fill in fields from each
														invoked.PurchaseOrder	= LocalPONumber

									if (each.AwardQuantity entered)
										if (each.SourcingEventLineResponse.UseItemFromVendorItem = true)
											LocalItemNumber                        = each.SourcingEventLineResponse.PovendoritemRel.Item
										else
											LocalItemNumber                        = ItemNumber
											LocalPOLineItemType                    = ItemType
											LocalPOLineDescription                 = ItemDescription
										LocalPOLineQuantity                        = each.AwardQuantity
										LocalPOLineVendorItem                      = each.SourcingEventLineResponse.VendorItem
										LocalPOLineEnteredUOM                      = UOM
										LocalPOLineRequestedDeliveryDate           = each.SourcingEventLineResponse.DeliveryDateOverride
										LocalPOLineCurrencyUnitCost                 = each.SourcingEventLineResponse.CurrencyResponseUnitPrice
										LocalPOLineEnteredUnitCost                  = each.SourcingEventLineResponse.ResponseAmount.UnitPrice
										if (each.SourcingEventLineResponse.ResponseAmount.NoCharge)
											LocalPOLineCostOption							= 2
										else
											LocalPOLineCostOption							= 1
										LocalPOLineItemGTIN	                       = each.SourcingEventLineResponse.GlobalTradeItemNumber
										include CreatePurchaseOrderLine

									if (each.AltAwardQuantity1 entered)
										LocalPOLineQuantity                        = each.AltAwardQuantity1
										LocalItemNumber					           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item entered)
											if (AltItemLocationRel exists)
												LocalPOLineItemType = "I"
											else
												LocalPOLineItemType = "N"
										else
											if (ItemType = ItemType.Service)
												LocalPOLineItemType = "S"
											else
												LocalPOLineItemType = "X"
										LocalPOLineVendorItem                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem
										LocalPOLineEnteredUOM                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].UOM
										if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
										or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate)
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.DeliveryDateOverride
										else
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].DeliveryDate
										LocalPOLineEnteredUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount.UnitPrice
										LocalPOLineCurrencyUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].CurrencyResponseUnitPrice
										LocalPOLineDescription                     = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItemDescription
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount.NoCharge)
											LocalPOLineCostOption				   = 2
										else
											LocalPOLineCostOption				   = 1
										LocalPOLineItemGTIN				           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].GlobalTradeItemNumber

										include CreatePurchaseOrderLine

									if (each.AltAwardQuantity2 entered)
										LocalPOLineQuantity                        = each.AltAwardQuantity2
										LocalItemNumber					           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Item
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Item entered)
											if (AltItemLocationRel exists)
												LocalPOLineItemType = "I"
											else
												LocalPOLineItemType = "N"
										else
											if (ItemType = ItemType.Service)
												LocalPOLineItemType = "S"
											else
												LocalPOLineItemType = "X"
										LocalPOLineVendorItem                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItem
										LocalPOLineEnteredUOM                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].UOM
										if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
										or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate)
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.DeliveryDateOverride
										else
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].DeliveryDate
										LocalPOLineEnteredUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount.UnitPrice
										LocalPOLineCurrencyUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].CurrencyResponseUnitPrice
										LocalPOLineDescription                     = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItemDescription
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount.NoCharge)
											LocalPOLineCostOption				   = 2
										else
											LocalPOLineCostOption				   = 1
										LocalPOLineItemGTIN				           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].GlobalTradeItemNumber

										include CreatePurchaseOrderLine

									if (each.AltAwardQuantity3 entered)
										LocalPOLineQuantity                        = each.AltAwardQuantity3
										LocalItemNumber					           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Item
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Item entered)
											if (AltItemLocationRel exists)
												LocalPOLineItemType = "I"
											else
												LocalPOLineItemType = "N"
										else
											if (ItemType = ItemType.Service)
												LocalPOLineItemType = "S"
											else
												LocalPOLineItemType = "X"
										LocalPOLineVendorItem                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItem
										LocalPOLineEnteredUOM                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].UOM
										if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
										or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate)
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.DeliveryDateOverride
										else
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].DeliveryDate
										LocalPOLineEnteredUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount.UnitPrice
										LocalPOLineCurrencyUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].CurrencyResponseUnitPrice
										LocalPOLineDescription                     = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItemDescription
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount.NoCharge)
											LocalPOLineCostOption				   = 2
										else
											LocalPOLineCostOption				   = 1
										LocalPOLineItemGTIN				           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].GlobalTradeItemNumber

										include CreatePurchaseOrderLine

									if (each.AltAwardQuantity4 entered)
										LocalPOLineQuantity                        = each.AltAwardQuantity4
										LocalItemNumber					           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Item
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Item entered)
											if (AltItemLocationRel exists)
												LocalPOLineItemType = "I"
											else
												LocalPOLineItemType = "N"
										else
											if (ItemType = ItemType.Service)
												LocalPOLineItemType = "S"
											else
												LocalPOLineItemType = "X"
										LocalPOLineVendorItem                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItem
										LocalPOLineEnteredUOM                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].UOM
										if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
										or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate)
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.DeliveryDateOverride
										else
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].DeliveryDate
										LocalPOLineEnteredUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount.UnitPrice
										LocalPOLineCurrencyUnitCost                = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].CurrencyResponseUnitPrice
										LocalPOLineDescription                     = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItemDescription
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount.NoCharge)
											LocalPOLineCostOption				   = 2
										else
											LocalPOLineCostOption				   = 1
										LocalPOLineItemGTIN				           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].GlobalTradeItemNumber

										include CreatePurchaseOrderLine

									if (each.AltAwardQuantity5 entered)
										LocalPOLineQuantity                        = each.AltAwardQuantity5
										LocalItemNumber					           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Item
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Item entered)
											if (AltItemLocationRel exists)
												LocalPOLineItemType = "I"
											else
												LocalPOLineItemType = "N"
										else
											if (ItemType = ItemType.Service)
												LocalPOLineItemType = "S"
											else
												LocalPOLineItemType = "X"
										LocalPOLineVendorItem                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItem
										LocalPOLineEnteredUOM                      = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].UOM
										if (each.SourcingEventLineResponse.DeliveryDateOverride != each.SourcingEventLineResponse.DeliveryDate
										or  current corporate date > each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate)
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.DeliveryDateOverride
										else
											LocalPOLineRequestedDeliveryDate       = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].DeliveryDate
										LocalPOLineEnteredUnitCost                 = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount.UnitPrice
										LocalPOLineCurrencyUnitCost                = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].CurrencyResponseUnitPrice
										LocalPOLineDescription                     = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItemDescription
										if (each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount.NoCharge)
											LocalPOLineCostOption				   = 2
										else
											LocalPOLineCostOption				   = 1
										LocalPOLineItemGTIN				           = each.SourcingEventLineResponse.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].GlobalTradeItemNumber

										include CreatePurchaseOrderLine

									for each SourcingEventHeaderResponseAOCsRel
										if (each.NotifiedSupplier.SupplierGroup     = LocalSupplierGroup
										and each.NotifiedSupplier.Supplier 			= LocalSupplier
										and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId
										and each.SomethingEntered)
											LocalPOLine      = 0
											LocalAddOnCharge = each.AOC
											if (!each.IsSpread)
												if (PurchaseOrderAndLineAddOnChargeRel !exists)
													invoke Create PurchaseOrderAndLineAddOnCharge
														invoked.Company                     				= Company
														invoked.PurchaseOrder           					= LocalPONumber
														invoked.AddOnCharge 								= each.AOC
														invoked.ZeroCost                                    = each.ZeroCost
														invoked.AddOnChargeOrigin                           = each.AddOnChargeOrigin
														invoked.Account                                     = each.Account
														if (each.AOCRate > 0)
															invoked.AddOnChargeEntryMethod = "R"
															invoked.AddOnChargePercent     = each.AOCRate
														else
														if (each.AOCOption.Total)
															invoked.AddOnChargeEntryMethod = "T"
															if (LocalPONumber.Currency     = each.SourcingEventResponse.EnteredCurrencyCode)
																invoked.TotalAddOnChargeAmount    = each.CurrencyAOCCost
															else
															if (LocalPONumber.Currency     = SourcingEvent.CurrencyCode)
																invoked.TotalAddOnChargeAmount    = each.AOCCost
															else
																initialize LocalCurrencyExchange

																SavedFromCurrency     		= each.SourcingEventResponse.EnteredCurrencyCode
																SavedEnterpriseGroup		= Company.ProcurementGroup
																SavedCurrencyTable      	= Company.CurrencyTable
																SavedTransactionAmount      = each.CurrencyAOCCost
																SavedExchangeDate		 	= current corporate date
																LocalCurrencyExchange.ToCurrency 		= LocalPONumber.Currency

																invoked.TotalAddOnChargeAmount = LocalCurrencyExchange.OutputCurrencyAmount
											else
											if (each.IsSpread)
												if (PurchaseOrderSpreadAddOnChargeRel !exists)
													invoke Create PurchaseOrderSpreadAddOnCharge
														invoked.Company                     				= Company
														invoked.PurchaseOrder           					= LocalPONumber
														invoked.AddOnCharge 								= each.AOC
														invoked.SpreadMethod                                = each.SpreadMethod
														if (each.AOCRate > 0)
															invoked.AddOnChargePercent     = each.AOCRate
														else
														if (each.AOCOption.Total)
															invoked.EnteredAddOnChargeAmount = each.AOCCost
															if (LocalPONumber.Currency     = each.SourcingEventResponse.EnteredCurrencyCode)
																invoked.EnteredAddOnChargeAmount    = each.CurrencyAOCCost
															else
															if (LocalPONumber.Currency     = SourcingEvent.CurrencyCode)
																invoked.EnteredAddOnChargeAmount    = each.AOCCost
															else
																initialize LocalCurrencyExchange

																SavedFromCurrency     		= each.SourcingEventResponse.EnteredCurrencyCode
																SavedEnterpriseGroup		= Company.ProcurementGroup
																SavedCurrencyTable      	= Company.CurrencyTable
																SavedTransactionAmount      = each.CurrencyAOCCost
																SavedExchangeDate		 	= current corporate date
																LocalCurrencyExchange.ToCurrency 		= LocalPONumber.Currency

																invoked.EnteredAddOnChargeAmount 	= LocalCurrencyExchange.OutputCurrencyAmount

								include CancelRemainingQuantity

								OutputCreated = true

						CreateContractOutput is an Instance Action
							restricted
							Local Fields
								LocalContract			is a Contract view
								LocalContractArticle	is a ContractArticle view
								LocalContractLine		is a ContractLine view
								LocalContractQuestion	is a ContractQuestion view
								LocalExistingContract   is Boolean

							Action Rules
								for each AwardedAnyContractLines

									include ResponseCurrencyTranslation

									LocalSupplierGroup		= each.NotifiedSupplier.SupplierGroup
									LocalSupplier			= each.NotifiedSupplier.Supplier
									LocalSupplierSourceId	= each.NotifiedSupplier.SupplierSourceId

									if (each.Contract entered)
										LocalExistingContract = true
									if (!each.Contract entered)
										LocalOutputType			= each.SourcingEventLine.OutputType
										LocalParticipant		= each.Participant
										LocalParticipantGroup	= each.ParticipantGroup

										invoke Create Draft Contract
											assign result to LocalContract
											invoked.CreateByCopy					= true
											invoked.ContractGroup					= Company.SourcingGroup
											invoked.Name							= SourcingEvent.Name
											invoked.Description						= SourcingEvent.Description
											invoked.Supplier						= each.NotifiedSupplier.Supplier
											invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
											invoked.Vendor							= each.NotifiedSupplier.Supplier.Vendor
											invoked.CurrencyCode					= each.SourcingEventResponse.CurrencyCode
											if (BlanketOrStanding)
												invoked.Buyer						= SourcingEvent.Buyer
											invoked.ContractSource					= 4
											invoked.ContractType					= each.ContractType
											invoked.ContractSubtype					= each.ContractSubtype
											invoked.ContractClassification			= each.ContractClassification
											invoked.ContractSubclassification		= each.ContractSubclassification
											invoked.EffectiveDate					= each.EffectiveDate
											invoked.ExpirationDate					= each.ExpirationDate
											if (each.ScheduleFrequency = "W")
												invoked.ScheduleFrequency = 1
											else
											if (each.ScheduleFrequency = "B")
												invoked.ScheduleFrequency = 2
											else
											if (each.ScheduleFrequency = "M")
												invoked.ScheduleFrequency = 3
											else
											if (each.ScheduleFrequency = "Q")
												invoked.ScheduleFrequency = 4
											invoked.MaximumReleaseNumber			= each.MaxReleaseNumber
											if (each.ItemUOMVen
											and each.SourcingEventLine.NonServiceContracts)
												invoked.UOMSMustMatch               = "Y"
											if (each.LifetimeMaximumAmount entered
											or  each.ServiceCommitment = true)
												invoked.CreateCommitments	= 2
												invoked.CommitmentCompany   = Company
											if (each.SourcingEventResponse.RequestToNegotiateTerms
											and !each.TermsHaveBeenNegotiated)
												invoked.EventTermsNeedToBeNegotiated = true
											invoked.CreateFromLibrary = true

										SavedContract = LocalContract.Contract

										if (UpdateResponseLinesWithContract exists)
											invoke UpdateContract Submitted UpdateResponseLinesWithContract
												invoked.ContractParam					= SavedContract.Contract
												invoked.ContractTypeParam				= SavedContract.ContractType
												invoked.ContractSubtypeParam			= SavedContract.ContractSubtype
												invoked.ContractClassificationParam		= SavedContract.ContractClassification
												invoked.ContractSubclassificationParam	= SavedContract.ContractSubclassification
												invoked.NewContractCreationParam		= true
												invoked.EffectiveDateParam				= SavedContract.EffectiveDate
												invoked.ExpirationDateParam				= SavedContract.ExpirationDate
												if (each.ContractType.PurchaseType.Standing)
													if (SavedContract.ScheduleFrequency = 1)
														invoked.ScheduleFrequencyParam = "W"
													else
													if (SavedContract.ScheduleFrequency = 2)
														invoked.ScheduleFrequencyParam = "B"
													else
													if (SavedContract.ScheduleFrequency = 3)
														invoked.ScheduleFrequencyParam = "M"
													else
													if (SavedContract.ScheduleFrequency = 4)
														invoked.ScheduleFrequencyParam = "Q"
													invoked.MaxReleaseNumberParam			= SavedContract.MaximumReleaseNumber

										if (each.Participant.Company entered
										and	!each.ContractParticipant exists)
											invoke Create ContractParticipant
												invoked.ContractGroup							= Company.SourcingGroup
												invoked.Contract								= SavedContract
												invoked.ContractParticipant.ParticipantLocation	= each.Participant
												invoked.Company									= each.Company
												invoked.AccountingUnit                          = each.Participant.DefaultAccountingInformation

										if (each.ParticipantGroup entered)
											invoke ImportParticipantsFromGroup Draft ContractRel
												invoked.ParticipantGroup	= each.ParticipantGroup

										if (each.BasePercent entered)
											invoke UpdateContractPricing each.ContractPricingRel
												invoked.PricingBasePercentParam		= each.SourcingEventLineResponse.BasePercent
												invoked.PricingMarkupDiscountParam	= each.SourcingEventLineResponse.MarkupDiscount

										for each each.SourcingEvent.ActiveCMArticles
											invoke Create Draft ContractArticle
												assign result to LocalContractArticle
												invoked.ContractGroup	= Company.SourcingGroup
												invoked.Contract		= SavedContract
												invoked.Title			= each.Title
												invoked.HeaderText		= each.HeaderText
												invoked.DisplayOrder	= each.DisplayOrder
												invoked.Article			= each.Article
												invoked.Active			= true
												invoked.SSArticle		= true
												invoked.FromSourcing    = true
											invoke AutoCreate ContractArticleUpdate
												invoked.ContractGroup 				= Company.SourcingGroup
												invoked.Contract 		           	= SavedContract
												invoked.ContractArticle            	= LocalContractArticle.ContractArticle
											for each each.ActiveContractTermsBySourcingEventArticleRel
												invoke Create Draft LocalContractArticle.ContractArticle.ContractTermAndCondition set
													fill in fields from each
													invoked.ContractGroup		= Company.SourcingGroup
													invoked.Contract			= SavedContract
													invoked.ContractTermAndCondition = each.SourcingEventTermAndCondition
													invoked.Modified			= each.RepositoryModified
													invoked.TermAndCondition	= each.TermAndConditionNumber
													invoked.ContractArticle		= LocalContractArticle.ContractArticle
													invoked.SSTerm				= true
													invoked.FromSourcing    	= true
												invoke AutoCreate ContractTermAndConditionUpdate
													invoked.ContractGroup 				= Company.SourcingGroup
													invoked.Contract 		           	= SavedContract
													invoked.ContractArticle            	= LocalContractArticle.ContractArticle
													invoked.ContractTermAndCondition   	= each.SourcingEventTermAndCondition
												for each each.SourcingEventTermAndConditionAttachment set
													invoke AutoCreate ContractTermAndConditionAttachment
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractArticle				= LocalContractArticle.ContractArticle
														invoked.ContractTermAndCondition	= each.SourcingEventTermAndCondition
														invoked.ContractTermAndConditionAttachment = each.SourcingEventTermAndConditionAttachment
														fill in fields from each

										if (!SourcingEvent.AllowsConditionalQuestions)
											for each each.SourcingEvent.CMQuestions
												LocalQuestion					= each.SourcingEventQuestion.Question
												if (QuestionActiveRel.Active
												or  LocalQuestion				= 0)
													invoke Create ContractQuestion
														assign result to LocalContractQuestion
														invoked.ContractGroup	= Company.SourcingGroup
														invoked.Contract		= SavedContract
														invoked.QuestionSource 	= 3
														invoked.SSQuestion	   	= true
														fill in fields from each

													if (each.ResponseType.List)
														for each each.SourcingEventQuestionValue set
															invoke CreateDisplay ContractQuestionListValue
																invoked.ContractGroup             = Company.SourcingGroup
																invoked.Contract                  = SavedContract
																invoked.ContractQuestion          = LocalContractQuestion.ContractQuestion
																invoked.ContractQuestionListValue = each.SourcingEventQuestionValue
																fill in fields from each

													for each each.SourcingEventQuestionResponse(SourcingEventQuestion) set
														if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
														and each.NotifiedSupplier.Supplier 			= LocalSupplier
														and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)
															invoke Create ContractQuestionAnswer
																invoked.ContractGroup											= Company.SourcingGroup
																invoked.Contract												= SavedContract
																invoked.ContractQuestion										= LocalContractQuestion.ContractQuestion
																invoked.ContractQuestionAnswerGroup.TextAnswer					= each.SourcingEventQuestionAnswer.TextValue
																invoked.ContractQuestionAnswerGroup.NumericAnswer				= each.SourcingEventQuestionAnswer.NumericValue
																invoked.ContractQuestionAnswerGroup.DateAnswer					= each.SourcingEventQuestionAnswer.DateValue
																invoked.ContractQuestionAnswerGroup.ContractQuestionListValue	= each.SourcingEventQuestionAnswer.SourcingEventQuestionValue
																invoked.ContractQuestionAnswerGroup.YesNoAnswer					= each.SourcingEventQuestionAnswer.YesNoValue
												 				invoked.ContractQuestionAnswerGroup.YesNoText					= each.SourcingEventQuestionAnswer.YesNoText
																invoked.Attachment.File            								= each.Attachment.File
																invoked.Attachment.MimeType     								= each.Attachment.MimeType
																invoked.Attachment.Title        								= each.Attachment.Title
										else
											for each SourcingEventSupplierQuestionRel
												LocalQuestion					= each.Question
												LocalSourcingEventQuestion		= each.SourcingEventQuestion
												if (QuestionActiveRel.Active
												or  LocalQuestion				= 0)
													invoke Create ContractQuestion
														assign result to LocalContractQuestion
														invoked.ContractGroup	= Company.SourcingGroup
														invoked.Contract		= SavedContract
														invoked.QuestionSource 	= 3
														invoked.SSQuestion	   	= true
														invoked.AllowResponseAttachment		= SourcingEventQuestionRel.AllowResponseAttachment
														if (QuestionActiveRel exists)
															invoked.ResponseRules			= QuestionActiveRel.ResponseRules
															invoked.YesNoResponseRules		= QuestionActiveRel.YesNoResponseRules
															invoked.YesNoTextResponseRules	= QuestionActiveRel.YesNoTextResponseRules
														if (LocalQuestion 		= 0)
															invoked.ResponseRules			= SourcingEventQuestionRel.ResponseRules
															invoked.YesNoResponseRules		= SourcingEventQuestionRel.YesNoResponseRules
															invoked.YesNoTextResponseRules	= SourcingEventQuestionRel.YesNoTextResponseRules
														fill in fields from each

													if (each.ResponseType.List)
														for each each.SESupplierQuestionValue set
															invoke CreateDisplay ContractQuestionListValue
																invoked.ContractGroup             = Company.SourcingGroup
																invoked.Contract                  = SavedContract
																invoked.ContractQuestion          = LocalContractQuestion.ContractQuestion
																invoked.ContractQuestionListValue = each.SESupplierQuestionValue
																fill in fields from each

													for each each.SESupplierQuestionResponse(SourcingEventSupplierQuestion) set
														if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
														and each.NotifiedSupplier.Supplier 			= LocalSupplier
														and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)
															invoke Create ContractQuestionAnswer
																invoked.ContractGroup											= Company.SourcingGroup
																invoked.Contract												= SavedContract
																invoked.ContractQuestion										= LocalContractQuestion.ContractQuestion
																invoked.ContractQuestionAnswerGroup.TextAnswer					= each.SESupplierQuestionAnswer.TextValue
																invoked.ContractQuestionAnswerGroup.NumericAnswer				= each.SESupplierQuestionAnswer.NumericValue
																invoked.ContractQuestionAnswerGroup.DateAnswer					= each.SESupplierQuestionAnswer.DateValue
																invoked.ContractQuestionAnswerGroup.ContractQuestionListValue	= each.SESupplierQuestionAnswer.SESupplierQuestionValue
																invoked.ContractQuestionAnswerGroup.YesNoAnswer					= each.SESupplierQuestionAnswer.YesNoValue
												 				invoked.ContractQuestionAnswerGroup.YesNoText					= each.SESupplierQuestionAnswer.YesNoText
																invoked.Attachment.File            								= each.Attachment.File
																invoked.Attachment.MimeType     								= each.Attachment.MimeType
																invoked.Attachment.Title        								= each.Attachment.Title

										for each each.SourcingEvent.PurchasingContacts
											invoke CreateAdHocContact ContractAttachedContact
												fill in fields from each
												invoked.ContractGroup				= Company.SourcingGroup
												invoked.Contract					= SavedContract
												invoked.ContactType					= each.ContactType
  												invoked.Contact						= each.Contact
												invoked.PrimaryContact  			= each.PrimaryContact
												invoked.SSContact					= true
												invoked.SupplierCanView             = each.SupplierCanView

										for each each.SourcingEvent.CMComments
											invoke Create ContractComment
												invoked.ContractGroup					= Company.SourcingGroup
												invoked.Contract						= SavedContract
												invoked.CommentTitle					= each.Title
												invoked.ContractCommentType				= 2
												if (each.Type.DisplayOnly)
													invoked.CommentUsedFor	= each.Type.DisplayOnly
												else
												if (each.Type.PrintOnPurchaseOrder)
													invoked.CommentUsedFor	= each.Type.PrintOnPurchaseOrder
												else
												if (each.Type.InvoiceComments)
  													invoked.CommentUsedFor	= each.Type.InvoiceComments
												invoked.Description						= each.Comment
												invoked.Attachment.File					= each.Attachment.File
												invoked.Attachment.MimeType 			= each.Attachment.MimeType
												invoked.Attachment.Title    			= each.Attachment.Title
												if (each.Attachment entered)
													invoked.EmailAttachment				= true

										for each each.SourcingEvent.CMAttachments
											invoke Create ContractAttachment
												invoked.ContractGroup		= Company.SourcingGroup
												invoked.Contract			= SavedContract
												invoked.Name                = each.Name
												invoked.Description         = each.Description
												invoked.Attachment.File		= each.Attachment.File
												invoked.Attachment.MimeType	= each.Attachment.MimeType
												invoked.Attachment.Title	= each.Attachment.Title
												invoked.Source              = 2  
												invoked.EmailAttachment		= true
												invoked.SSAttachment        = true

										for each each.SourcingEventResponse.CMAttachments
											invoke Create ContractAttachment
												invoked.ContractGroup		= Company.SourcingGroup
												invoked.Contract			= SavedContract
												invoked.Attachment.File		= each.Attachment.File
												invoked.Attachment.MimeType	= each.Attachment.MimeType
												invoked.Attachment.Title	= each.Attachment.Title
												invoked.Source              = 3  
												invoked.EmailAttachment		= true
												invoked.SSAttachment        = true

										for each each.SourcingEventResponse.CMQuestionAttachments
											invoke Create ContractAttachment
												invoked.ContractGroup		= Company.SourcingGroup
												invoked.Contract			= SavedContract
												invoked.Attachment.File		= each.Attachment.File
												invoked.Attachment.MimeType	= each.Attachment.MimeType
												invoked.Attachment.Title	= each.Attachment.Title
												invoked.EmailAttachment		= true 
												invoked.SSAttachment        = true

										if (!each.TermsHaveBeenNegotiated)
											if (each.SourcingEventResponse.NegotiateTermsBox entered
											or  each.SourcingEventResponse.NegotiatedTermsDocument entered)
												invoke CreateDisputedTermComment ContractComment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.CommentTitle					= DisputedTermsMessage
													invoked.ContractCommentType				= 2
													if (each.SourcingEventResponse.NegotiateTermsBox entered)
														invoked.Description					= each.SourcingEventResponse.NegotiateTermsBox
													else
														invoked.Description					= DisputedTermsMessage
													invoked.Attachment						= each.SourcingEventResponse.NegotiatedTermsDocument
													invoked.SSComment						= false
													invoked.EmailAttachment					= false
													invoked.NegotiatedTermsComment			= true
									else
										constraint (!each.Contract.ContractStatus.Closed)
											"ExistingContractMustNotBeInactiveOrClosed"
										constraint (!each.Contract.ContractStatus.Inactive)
											"ExistingContractMustNotBeInactiveOrClosed"
										SavedContract = each.Contract

										if (each.SourcingEventLine.NonStandingOrServiceContracts
										and each.ContractMatchUOM)
											invoke UpdateUOMMatch Draft ContractRel
												invoked.UOMSMustMatchParam = "Y"

									if (!RelatedSSContractRel exists)
										invoke CreateRelatedContract RelatedContract
											invoked.ContractGroup				= Company.SourcingGroup
											invoked.Contract					= SavedContract
											invoked.RelatedContractType			= 5
											invoked.Company						= Company
											invoked.RelatedContractID			= SourcingEvent
											invoked.RelatedContractDescription	= SourcingEvent.Description
											invoked.Supplier					= each.NotifiedSupplier.Supplier
											invoked.Vendor						= each.NotifiedSupplier.Supplier.Vendor

									if (OriginCodeCM exists)
										LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
										LocalSupplier 	   = each.NotifiedSupplier.Supplier
										for each OriginCodeCM
											SavedSourceContract = each.SourceDocumentNumeric

											if (!RelatedCMContractRel exists)
												invoke Create RelatedContract
													invoked.ContractGroup				= Company.SourcingGroup
													invoked.Contract					= SavedContract
													invoked.RelatedContractType			= 6
													invoked.RelatedContractID			= each.SourceDocumentNumeric
													invoked.RelatedContractDescription	= each.ContractRel.Description
													invoked.Supplier					= each.Supplier
													invoked.Vendor						= each.Vendor

									if (OriginCodeRQ exists)
										LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
										LocalSupplier 	   = each.NotifiedSupplier.Supplier
										for each OriginCodeRQ
											SavedRequisition = each.SourceDocumentNumeric

											if (!RelatedRQContractRel exists)
												invoke CreateRelatedContract RelatedContract
													invoked.ContractGroup		= Company.SourcingGroup
													invoked.Contract			= SavedContract
													invoked.RelatedContractType	= 13
													invoked.RelatedContractID	= each.SourceDocumentNumeric
													invoked.Company				= each.Company

									if (each.AwardForContract = true)
										invoke Create Draft ContractLine
											assign result to LocalContractLine
											invoked.ContractGroup					= Company.SourcingGroup
											invoked.Contract						= SavedContract
											invoked.CreateFromCopy					= true
											invoked.ServiceCode						= ServiceCode
											invoked.CommodityCode					= CommodityCode
											invoked.UNSPSCCode						= UnspscCode
											invoked.UOMConversion					= each.UOMConversion
											invoked.LowUOMCode						= each.LowUOMCode
											invoked.SourcingEventNumber				= SourcingEvent
											invoked.SourcingEventLineNumber			= SourcingEventLine
											invoked.SourcingCompany					= Company
											if (LocalExistingContract = true)
												invoked.FromImport 					= true
											invoked.Retainage						= 0
											invoked.ItemNumber						= ItemNumber
											if (ItemType = "I"
											or  ItemType = "N")
												invoked.ItemType                    = 1
											else
											if (ItemType = "X")
												invoked.ItemType                    = 3
											else
											if (ItemType = "S")
												invoked.ItemType					= 2
											if (ItemNumber !exists)
												invoked.ItemDescription					= ItemDescription
												invoked.ItemDescription2				= ItemDescription2
												if (ItemType != "S")
													invoked.ItemDescription3                = ItemDescription3
											if (!OutputType.Service)
												invoked.VendorItem					= each.VendorItem
												invoked.VendorItemDescription		= each.VendorItemDescription
												invoked.Manufacturer				= each.ManufacturerInformation.Manufacturer
												invoked.ManufacturerNumber          = each.ManufacturerInformation.ManufacturerNumber
											if (OutputType.Standing)
												invoked.Quantity					= each.Quantity
											invoked.UOM								= each.UOM
											if (each.ResponseAmount.NoCharge)
												invoked.CostOption					= 2
											else
												invoked.CostOption					= 1
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.BaseCost                = each.CurrencyResponseUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.BaseCost                = each.ResponseAmount.UnitPrice
												else
													initialize LocalCurrencyExchange

													SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
													SavedEnterpriseGroup					= Company.ProcurementGroup
													SavedCurrencyTable      				= Company.CurrencyTable
													SavedTransactionAmount      			= each.CurrencyResponseUnitPrice
													SavedExchangeDate		 	 			= current corporate date
													LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

													invoked.BaseCost        			    = LocalCurrencyExchange.OutputCurrencyAmount
											if (each.AwardQtyToLifetimeMaxQty)
												invoked.LifetimeMaximumQuantity		= each.Quantity
												invoked.CopyQuantityToLifetimeMaxQty	= true
											else												
												invoked.LifetimeMaximumQuantity		= each.LifetimeMaxQuantity
											invoked.GlobalTradeItemNumber			= each.GlobalTradeItemNumber
											invoked.Manufacturer					= each.ManufacturerInformation.Manufacturer
											invoked.ManufacturerNumber				= each.ManufacturerInformation.ManufacturerNumber
											invoked.LifetimeMaximumAmount			= each.LifetimeMaximumAmount
											if (each.LifetimeMaximumAmount > 0
											or  each.ServiceCommitment = true
											or  SavedContract.CreateCommitments = 2
											or  SavedContract.CreateCommitments = 4)
												invoked.UseCommitments              = true

											if (each.AdvancedPricing entered)
												if (each.MarkupDiscount = "M")
													invoked.PricingMarkupOrDiscount                     = 1
												else
												if (each.MarkupDiscount = "D")
													invoked.PricingMarkupOrDiscount                     = 2
												if (each.QuantityAmountBreakType = "Q")
													invoked.LinePriceBreakOn                            = 1
												else
												if (each.QuantityAmountBreakType = "A")
													invoked.LinePriceBreakOn                            = 2
												if (each.QuantityAmountBreakType = "Q")
													invoked.PriceBreak.QuantityPercentPrice[1].Quantity		= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].Quantity
												else
												if (each.QuantityAmountBreakType = "A")
													if (each.Contract.CurrencyCode = each.SourcingEventResponse.EnteredCurrencyCode)
														invoked.PriceBreak.QuantityPercentPrice[1].Quantity = each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].Quantity
													else

														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].Quantity
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[1].Quantity = LocalCurrencyExchange.OutputCurrencyAmount
												invoked.PriceBreak.QuantityPercentPrice[1].UnitPercent	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].UnitPercent
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[1].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].CurrencyUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[1].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].UnitPrice
												else
													initialize LocalCurrencyExchange

													if (Company.CurrencyTable entered
													and each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].CurrencyUnitPrice entered)

														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[1].CurrencyUnitPrice
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= SourcingEvent.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[1].UnitPrice = LocalCurrencyExchange.OutputCurrencyAmount

												if (each.QuantityAmountBreakType = "Q")
													invoked.PriceBreak.QuantityPercentPrice[2].Quantity		= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].Quantity
												else
												if (each.QuantityAmountBreakType = "A")
													if (each.Contract.CurrencyCode = each.SourcingEventResponse.EnteredCurrencyCode)
														invoked.PriceBreak.QuantityPercentPrice[2].Quantity = each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].Quantity
													else


														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].Quantity
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[2].Quantity = LocalCurrencyExchange.OutputCurrencyAmount
												invoked.PriceBreak.QuantityPercentPrice[2].UnitPercent	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].UnitPercent
												invoked.PriceBreak.QuantityPercentPrice[2].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].UnitPrice
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[2].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].CurrencyUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[2].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].UnitPrice
												else
													initialize LocalCurrencyExchange

													if (Company.CurrencyTable entered
													and each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].CurrencyUnitPrice entered)

														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[2].CurrencyUnitPrice
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= SourcingEvent.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[2].UnitPrice = LocalCurrencyExchange.OutputCurrencyAmount
												if (each.QuantityAmountBreakType = "Q")
													invoked.PriceBreak.QuantityPercentPrice[3].Quantity		= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].Quantity
												else
												if (each.QuantityAmountBreakType = "A")
													if (each.Contract.CurrencyCode = each.SourcingEventResponse.EnteredCurrencyCode)
														invoked.PriceBreak.QuantityPercentPrice[3].Quantity = each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].Quantity
													else


														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].Quantity
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[3].Quantity = LocalCurrencyExchange.OutputCurrencyAmount
												invoked.PriceBreak.QuantityPercentPrice[3].UnitPercent	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].UnitPercent
												invoked.PriceBreak.QuantityPercentPrice[3].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].UnitPrice
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[3].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].CurrencyUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[3].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].UnitPrice
												else
													initialize LocalCurrencyExchange

													if (Company.CurrencyTable entered
													and each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].CurrencyUnitPrice entered)

														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[3].CurrencyUnitPrice
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= SourcingEvent.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[3].UnitPrice = LocalCurrencyExchange.OutputCurrencyAmount
												if (each.QuantityAmountBreakType = "Q")
													invoked.PriceBreak.QuantityPercentPrice[4].Quantity		= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].Quantity
												else
												if (each.QuantityAmountBreakType = "A")
													if (each.Contract.CurrencyCode = each.SourcingEventResponse.EnteredCurrencyCode)
														invoked.PriceBreak.QuantityPercentPrice[4].Quantity = each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].Quantity
													else


														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].Quantity
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[4].Quantity = LocalCurrencyExchange.OutputCurrencyAmount
												invoked.PriceBreak.QuantityPercentPrice[4].UnitPercent	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].UnitPercent
												invoked.PriceBreak.QuantityPercentPrice[4].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].UnitPrice
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[4].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].CurrencyUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[4].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].UnitPrice
												else
													initialize LocalCurrencyExchange

													if (Company.CurrencyTable entered
													and each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].CurrencyUnitPrice entered)

														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[4].CurrencyUnitPrice
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= SourcingEvent.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[4].UnitPrice = LocalCurrencyExchange.OutputCurrencyAmount
												if (each.QuantityAmountBreakType = "Q")
													invoked.PriceBreak.QuantityPercentPrice[5].Quantity		= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].Quantity
												else
												if (each.QuantityAmountBreakType = "A")
													if (each.Contract.CurrencyCode = each.SourcingEventResponse.EnteredCurrencyCode)
														invoked.PriceBreak.QuantityPercentPrice[5].Quantity = each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].Quantity
													else

														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].Quantity
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[5].Quantity = LocalCurrencyExchange.OutputCurrencyAmount
												invoked.PriceBreak.QuantityPercentPrice[5].UnitPercent	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].UnitPercent
												invoked.PriceBreak.QuantityPercentPrice[5].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].UnitPrice
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[5].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].CurrencyUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.PriceBreak.QuantityPercentPrice[5].UnitPrice	= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].UnitPrice
												else
													initialize LocalCurrencyExchange

													if (Company.CurrencyTable entered
													and each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].CurrencyUnitPrice entered)

														SavedFromCurrency                       = each.SourcingEventResponse.EnteredCurrencyCode
														SavedEnterpriseGroup					= Company.ProcurementGroup
														SavedCurrencyTable      				= Company.CurrencyTable
														SavedTransactionAmount      			= each.AdvancedPricing.BreakpointOccurs.QuantityPrice[5].CurrencyUnitPrice
														SavedExchangeDate		 	 			= current corporate date
														LocalCurrencyExchange.ToCurrency 		= SourcingEvent.CurrencyCode

														invoked.PriceBreak.QuantityPercentPrice[5].UnitPrice = LocalCurrencyExchange.OutputCurrencyAmount

										SavedContractLine = LocalContractLine.ContractLine
											invoke UpdateContract Submitted each.SourcingEventLineResponse
												invoked.ContractParam						= SavedContract
												invoked.ContractLineParam					= SavedContractLine

										if (OriginCodeRQ exists)
											LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
											LocalSupplier 	   = each.NotifiedSupplier.Supplier
											for each OriginCodeRQ
												SavedRequisition = each.SourceDocumentNumeric

												for each each.ReqProcurementTransactionDistributionRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														if (each.DistributionPercent entered)
															invoked.Percent        			= each.DistributionPercent
														else
														if (each.DistributionAmount entered)
															invoked.Percent                 = each.DerivedDistributionPercent
														else
														if (each.DistributionQuantity entered)
															invoked.Percent                 = each.DerivedDistributionPercent

										else
										if (OriginCodeCM exists)
											for each OriginCodeCM 
												for each each.ContractLineDistributionsRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														invoked.Percent	        			= each.Percent

										else
										if (!ItemType.Inventoried)
											for each each.SourcingEventLine.SourcingEventLineDistribution set
												invoke Create ContractLineDistribution
													invoked.ContractGroup										= Company.SourcingGroup
													invoked.Contract											= SavedContract
													invoked.ContractLine										= LocalContractLine.ContractLine
													invoked.DistributionAccount									= each.DistributionAccount
													invoked.Percent												= each.Percent

										for each SourcingEventLineResponseAOCsRel
											if (each.NotifiedSupplier.SupplierGroup     = LocalSupplierGroup
											and each.NotifiedSupplier.Supplier 			= LocalSupplier
											and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId
											and each.SomethingEntered)
												invoke Create ContractLineAOC
													invoked.ContractGroup	= Company.SourcingGroup
													invoked.Contract		= SavedContract
													invoked.ContractLine	= SavedContractLine
													invoked.Company			= each.Company
													invoked.AOC				= each.AOC
													if (each.AOCRate entered)
														invoked.AOCRate		= each.AOCRate
														initialize invoked.UnitCost
													else
														invoked.UnitCost	= each.UnitAOCCost
														if (LocalPONumber.Currency     = each.SourcingEventResponse.EnteredCurrencyCode)
															invoked.UnitCost    = each.CurrencyAOCCost
														else
														if (LocalPONumber.Currency     = SourcingEvent.CurrencyCode)
															invoked.UnitCost    = each.AOCCost
														else
															initialize LocalCurrencyExchange

															SavedFromCurrency     		= each.SourcingEventResponse.EnteredCurrencyCode
															SavedEnterpriseGroup		= Company.ProcurementGroup
															SavedCurrencyTable      	= Company.CurrencyTable
															SavedTransactionAmount      = each.CurrencyAOCCost
															SavedExchangeDate		 	= current corporate date
															LocalCurrencyExchange.ToCurrency 		= LocalPONumber.Currency

															invoked.UnitCost 	= LocalCurrencyExchange.OutputCurrencyAmount
														initialize invoked.AOCRate

													invoked.ZeroCost		= each.ZeroCost
													initialize invoked.Taxable
													initialize invoked.TaxCode

										for each each.SourcingEventLine.CMLineComments
											SavedComment 			= each.Title
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineCommentRel exists)
												invoke Create ContractLineComment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.CommentTitle					= each.Title
													invoked.ContractCommentType				= 2
													if (each.Type.DisplayOnly)
														invoked.CommentUsedFor	= each.Type.DisplayOnly
													else
													if (each.Type.PrintOnPurchaseOrder)
														invoked.CommentUsedFor	= each.Type.PrintOnPurchaseOrder
													else
													if (each.Type.InvoiceComments)
	  													invoked.CommentUsedFor	= each.Type.InvoiceComments
													invoked.Description						= each.Comment
													invoked.Attachment.File            		= each.Attachment.File
													invoked.Attachment.MimeType     		= each.Attachment.MimeType
													invoked.Attachment.Title        		= each.Attachment.Title

										for each each.SourcingEventLine.CMLineAttachments
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineAttachmentRel exists)
												invoke Create ContractLineAttachment
													invoked.ContractGroup		= Company.SourcingGroup
													invoked.Contract			= SavedContract
													invoked.ContractLine		= LocalContractLine.ContractLine
													invoked.Name                = each.Name
													invoked.Description         = each.Description
													invoked.Attachment.File     = each.Attachment.File
													invoked.Attachment.MimeType = each.Attachment.MimeType
													invoked.Attachment.Title    = each.Attachment.Title
													invoked.Source              = 2 
													invoked.EmailAttachment		= true
													invoked.SSAttachment        = true

										for each each.SourcingEventLineQuestionResponse(SourcingEventLineQuestion) set
											if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
											and each.NotifiedSupplier.Supplier 			= LocalSupplier
											and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)

												if (each.HasQuestionAnswerAttachment
												and each.CMAttachment)
													invoke Create ContractLineAttachment
														invoked.ContractGroup		= Company.SourcingGroup
														invoked.Contract			= SavedContract
														invoked.ContractLine		= LocalContractLine.ContractLine
														invoked.Attachment.File     = each.Attachment.File
														invoked.Attachment.MimeType = each.Attachment.MimeType
														invoked.Attachment.Title    = each.Attachment.Title
														invoked.Source              = 3 
														invoked.EmailAttachment		= true
														invoked.SSAttachment        = true

									if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].AwardForContract = true)
										invoke Create Draft ContractLine
											assign result to LocalContractLine
											invoked.ContractGroup					= Company.SourcingGroup
											invoked.Contract						= SavedContract
											invoked.CreateFromCopy					= true
											invoked.ServiceCode						= ServiceCode
											invoked.CommodityCode					= CommodityCode
											invoked.UNSPSCCode						= UnspscCode
											invoked.SourcingEventNumber				= SourcingEvent
											invoked.SourcingEventLineNumber         = SourcingEventLine
											invoked.SourcingCompany					= Company
											invoked.Retainage						= 0
											invoked.ItemNumber						= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item exists)
												invoked.ItemType					= 1   
											else
											if (ItemType = ItemType.Service)
												invoked.ItemType                    = 2   
											else
												invoked.ItemType                    = 3   
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item !exists)
												invoked.ItemDescription					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItemDescription
											if (!ItemType.Service)
												invoked.ItemDescription3                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseComments
											if (!OutputType.Service)
												invoked.VendorItem					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem
											if (!ItemType.Service)
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem !exists)
													invoked.VendorItemDescription		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItemDescription
												if (each.ManufacturerInformation.Manufacturer entered)
													invoked.Manufacturer                    = each.ManufacturerInformation.Manufacturer
												if (each.ManufacturerInformation.ManufacturerNumber entered)
													invoked.ManufacturerNumber              = each.ManufacturerInformation.ManufacturerNumber	
												else
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item !exists)
													invoked.ManufacturerNumber          = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem
											if (OutputType.Standing)
												invoked.Quantity					= Quantity
											invoked.UOM								= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].UOM
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount.NoCharge)
												invoked.CostOption					= 2
											else
												invoked.CostOption					= 1
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].CurrencyResponseUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].ResponseAmount.UnitPrice
												else
													initialize LocalCurrencyExchange

													SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
													SavedEnterpriseGroup					= Company.ProcurementGroup
													SavedCurrencyTable      				= Company.CurrencyTable
													SavedTransactionAmount      			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].CurrencyResponseUnitPrice
													SavedExchangeDate		 	 			= current corporate date
													LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

													invoked.BaseCost        			    = LocalCurrencyExchange.OutputCurrencyAmount
											invoked.GlobalTradeItemNumber			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].GlobalTradeItemNumber
											if (each.AwardQtyToLifetimeMaxQty)
												invoked.LifetimeMaximumQuantity		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Quantity
												invoked.CopyQuantityToLifetimeMaxQty	= true

										SavedContractLine = LocalContractLine.ContractLine
											invoke UpdateContract Submitted each.SourcingEventLineResponse
												invoked.ContractParam						= SavedContract
												invoked.ContractLineParam					= SavedContractLine

										if (OriginCodeRQ exists)
											LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
											LocalSupplier 	   = each.NotifiedSupplier.Supplier
											for each OriginCodeRQ
												SavedRequisition = each.SourceDocumentNumeric

												for each each.ReqProcurementTransactionDistributionRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														if (each.DistributionPercent entered)
															invoked.Percent        			= each.DistributionPercent
														else
														if (each.DistributionAmount entered)
															invoked.Percent                 = each.DerivedDistributionPercent
														else
														if (each.DistributionQuantity entered)
															invoked.Percent                 = each.DerivedDistributionPercent

										else
										if (OriginCodeCM exists)
											for each OriginCodeCM 
												for each each.ContractLineDistributionsRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														invoked.Percent	        			= each.Percent

										else
											for each each.SourcingEventLine.SourcingEventLineDistribution set
												invoke Create ContractLineDistribution
													invoked.ContractGroup										= Company.SourcingGroup
													invoked.Contract											= SavedContract
													invoked.ContractLine										= LocalContractLine.ContractLine
													invoked.DistributionAccount									= each.DistributionAccount
													invoked.Percent												= each.Percent

										for each each.SourcingEventLine.CMLineComments
											SavedComment 			= each.Title
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineCommentRel exists)
												invoke Create ContractLineComment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.CommentTitle					= each.Title
													invoked.ContractCommentType				= 2
													if (each.Type.DisplayOnly)
														invoked.CommentUsedFor	= each.Type.DisplayOnly
													else
													if (each.Type.PrintOnPurchaseOrder)
														invoked.CommentUsedFor	= each.Type.PrintOnPurchaseOrder
													else
													if (each.Type.InvoiceComments)
	  													invoked.CommentUsedFor	= each.Type.InvoiceComments
													invoked.Description						= each.Comment
													invoked.Attachment.File            		= each.Attachment.File
													invoked.Attachment.MimeType     		= each.Attachment.MimeType
													invoked.Attachment.Title        		= each.Attachment.Title

										for each each.SourcingEventLine.CMLineAttachments
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineAttachmentRel exists)
												invoke Create ContractLineAttachment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.Attachment.File     			= each.Attachment.File
													invoked.Attachment.MimeType 			= each.Attachment.MimeType
													invoked.Attachment.Title    			= each.Attachment.Title
													invoked.Name                            = each.Name
													invoked.Description                     = each.Description
													invoked.EmailAttachment					= true
													invoked.SSAttachment        			= true

										for each each.SourcingEventLineQuestionResponse(SourcingEventLineQuestion) set
											if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
											and each.NotifiedSupplier.Supplier 			= LocalSupplier
											and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)

												if (each.HasQuestionAnswerAttachment
												and each.CMAttachment)
													invoke Create ContractLineAttachment
														invoked.ContractGroup		= Company.SourcingGroup
														invoked.Contract			= SavedContract
														invoked.ContractLine		= LocalContractLine.ContractLine
														invoked.Attachment.File     = each.Attachment.File
														invoked.Attachment.MimeType = each.Attachment.MimeType
														invoked.Attachment.Title    = each.Attachment.Title
														invoked.EmailAttachment		= true
														invoked.SSAttachment        = true

									if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].AwardForContract = true)
										invoke Create Draft ContractLine
											assign result to LocalContractLine
											invoked.ContractGroup					= Company.SourcingGroup
											invoked.Contract						= SavedContract
											invoked.CreateFromCopy					= true
											invoked.ServiceCode						= ServiceCode
											invoked.CommodityCode					= CommodityCode
											invoked.UNSPSCCode						= UnspscCode
											invoked.SourcingEventNumber				= SourcingEvent
											invoked.SourcingEventLineNumber         = SourcingEventLine
											invoked.SourcingCompany					= Company
											invoked.Retainage						= 0
											invoked.ItemNumber						= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Item
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Item exists)
												invoked.ItemType					= 1   
											else
											if (ItemType = ItemType.Service)
												invoked.ItemType                    = 2   
											else
												invoked.ItemType                    = 3   
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Item !exists)
												invoked.ItemDescription					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItemDescription
												if (!ItemType.Service)
													invoked.ItemDescription3                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseComments
											if (!OutputType.Service)
												invoked.VendorItem					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItem
											if(!ItemType.Service)
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItem !exists)
													invoked.VendorItemDescription		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].VendorItemDescription
												if (each.ManufacturerInformation.Manufacturer entered)
													invoked.Manufacturer                    = each.ManufacturerInformation.Manufacturer
												if (each.ManufacturerInformation.ManufacturerNumber entered)
													invoked.ManufacturerNumber              = each.ManufacturerInformation.ManufacturerNumber	
												else
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item !exists)
													invoked.ManufacturerNumber          = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem
											if (OutputType.Standing)
												invoked.Quantity					= Quantity
											invoked.UOM								= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].UOM
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount.NoCharge)
												invoked.CostOption					= 2
											else
												invoked.CostOption					= 1
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].CurrencyResponseUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].ResponseAmount.UnitPrice
												else
													initialize LocalCurrencyExchange

													SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
													SavedEnterpriseGroup					= Company.ProcurementGroup
													SavedCurrencyTable      				= Company.CurrencyTable
													SavedTransactionAmount      			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].CurrencyResponseUnitPrice
													SavedExchangeDate		 	 			= current corporate date
													LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

													invoked.BaseCost        			    = LocalCurrencyExchange.OutputCurrencyAmount
											invoked.GlobalTradeItemNumber			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].GlobalTradeItemNumber
											if (each.AwardQtyToLifetimeMaxQty)
												invoked.LifetimeMaximumQuantity		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[2].Quantity
												invoked.CopyQuantityToLifetimeMaxQty	= true

										SavedContractLine = LocalContractLine.ContractLine
											invoke UpdateContract Submitted each.SourcingEventLineResponse
												invoked.ContractParam						= SavedContract
												invoked.ContractLineParam					= SavedContractLine

										if (OriginCodeRQ exists)
											LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
											LocalSupplier 	   = each.NotifiedSupplier.Supplier
											for each OriginCodeRQ
												SavedRequisition = each.SourceDocumentNumeric

												for each each.ReqProcurementTransactionDistributionRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														if (each.DistributionPercent entered)
															invoked.Percent        			= each.DistributionPercent
														else
														if (each.DistributionAmount entered)
															invoked.Percent                 = each.DerivedDistributionPercent
														else
														if (each.DistributionQuantity entered)
															invoked.Percent                 = each.DerivedDistributionPercent

										else
										if (OriginCodeCM exists)
											for each OriginCodeCM 
												for each each.ContractLineDistributionsRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														invoked.Percent	        			= each.Percent


										else
											for each each.SourcingEventLine.SourcingEventLineDistribution set
												invoke Create ContractLineDistribution
													invoked.ContractGroup										= Company.SourcingGroup
													invoked.Contract											= SavedContract
													invoked.ContractLine										= LocalContractLine.ContractLine
													invoked.DistributionAccount									= each.DistributionAccount
													invoked.Percent												= each.Percent

										for each each.SourcingEventLine.CMLineComments
											SavedComment 			= each.Title
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineCommentRel exists)
												invoke Create ContractLineComment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.CommentTitle					= each.Title
													invoked.ContractCommentType				= 2
													if (each.Type.DisplayOnly)
														invoked.CommentUsedFor	= each.Type.DisplayOnly
													else
													if (each.Type.PrintOnPurchaseOrder)
														invoked.CommentUsedFor	= each.Type.PrintOnPurchaseOrder
													else
													if (each.Type.InvoiceComments)
	  													invoked.CommentUsedFor	= each.Type.InvoiceComments
													invoked.Description						= each.Comment
													invoked.Attachment.File            		= each.Attachment.File
													invoked.Attachment.MimeType     		= each.Attachment.MimeType
													invoked.Attachment.Title        		= each.Attachment.Title

										for each each.SourcingEventLine.CMLineAttachments
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineAttachmentRel exists)
												invoke Create ContractLineAttachment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.Attachment.File     			= each.Attachment.File
													invoked.Attachment.MimeType 			= each.Attachment.MimeType
													invoked.Attachment.Title    			= each.Attachment.Title
													invoked.Name                            = each.Name
													invoked.Description                     = each.Description
													invoked.EmailAttachment					= true
													invoked.SSAttachment        			= true

										for each each.SourcingEventLineQuestionResponse(SourcingEventLineQuestion) set
											if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
											and each.NotifiedSupplier.Supplier 			= LocalSupplier
											and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)

												if (each.HasQuestionAnswerAttachment
												and each.CMAttachment)
													invoke Create ContractLineAttachment
														invoked.ContractGroup		= Company.SourcingGroup
														invoked.Contract			= SavedContract
														invoked.ContractLine		= LocalContractLine.ContractLine
														invoked.Attachment.File     = each.Attachment.File
														invoked.Attachment.MimeType = each.Attachment.MimeType
														invoked.Attachment.Title    = each.Attachment.Title
														invoked.EmailAttachment		= true
														invoked.SSAttachment        = true


									if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].AwardForContract = true)
										invoke Create Draft ContractLine
											assign result to LocalContractLine
											invoked.ContractGroup					= Company.SourcingGroup
											invoked.Contract						= SavedContract
											invoked.CreateFromCopy					= true
											invoked.ServiceCode						= ServiceCode
											invoked.CommodityCode					= CommodityCode
											invoked.UNSPSCCode						= UnspscCode
											invoked.SourcingEventNumber				= SourcingEvent
											invoked.SourcingEventLineNumber         = SourcingEventLine
											invoked.SourcingCompany					= Company
											invoked.Retainage						= 0
											invoked.ItemNumber						= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Item
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Item exists)
												invoked.ItemType					= 1   
											else
											if (ItemType = ItemType.Service)
												invoked.ItemType                    = 2   
											else
												invoked.ItemType                    = 3   
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Item !exists)
												invoked.ItemDescription					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItemDescription
												if (!ItemType.Service)
													invoked.ItemDescription3                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseComments
											if (!OutputType.Service)
												invoked.VendorItem					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItem
											if(!ItemType.Service)
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItem !exists)
													invoked.VendorItemDescription		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].VendorItemDescription
												if (each.ManufacturerInformation.Manufacturer entered)
													invoked.Manufacturer                    = each.ManufacturerInformation.Manufacturer
												if (each.ManufacturerInformation.ManufacturerNumber entered)
													invoked.ManufacturerNumber              = each.ManufacturerInformation.ManufacturerNumber	
												else
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item !exists)
													invoked.ManufacturerNumber          = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem
											if (OutputType.Standing)
												invoked.Quantity					= Quantity
											invoked.UOM								= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].UOM
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount.NoCharge)
												invoked.CostOption					= 2
											else
												invoked.CostOption					= 1
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].CurrencyResponseUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].ResponseAmount.UnitPrice
												else
													initialize LocalCurrencyExchange

													SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
													SavedEnterpriseGroup					= Company.ProcurementGroup
													SavedCurrencyTable      				= Company.CurrencyTable
													SavedTransactionAmount      			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].CurrencyResponseUnitPrice
													SavedExchangeDate		 	 			= current corporate date
													LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

													invoked.BaseCost        			    = LocalCurrencyExchange.OutputCurrencyAmount
											invoked.GlobalTradeItemNumber			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].GlobalTradeItemNumber
											if (each.AwardQtyToLifetimeMaxQty)
												invoked.LifetimeMaximumQuantity		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[3].Quantity
												invoked.CopyQuantityToLifetimeMaxQty	= true

										SavedContractLine = LocalContractLine.ContractLine
											invoke UpdateContract Submitted each.SourcingEventLineResponse
												invoked.ContractParam						= SavedContract
												invoked.ContractLineParam					= SavedContractLine

										if (OriginCodeRQ exists)
											LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
											LocalSupplier 	   = each.NotifiedSupplier.Supplier
											for each OriginCodeRQ
												SavedRequisition = each.SourceDocumentNumeric

												for each each.ReqProcurementTransactionDistributionRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														if (each.DistributionPercent entered)
															invoked.Percent        			= each.DistributionPercent
														else
														if (each.DistributionAmount entered)
															invoked.Percent                 = each.DerivedDistributionPercent
														else
														if (each.DistributionQuantity entered)
															invoked.Percent                 = each.DerivedDistributionPercent

										else
										if (OriginCodeCM exists)
											for each OriginCodeCM 
												for each each.ContractLineDistributionsRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														invoked.Percent	        			= each.Percent
										else
											for each each.SourcingEventLine.SourcingEventLineDistribution set
												invoke Create ContractLineDistribution
													invoked.ContractGroup										= Company.SourcingGroup
													invoked.Contract											= SavedContract
													invoked.ContractLine										= LocalContractLine.ContractLine
													invoked.DistributionAccount									= each.DistributionAccount
													invoked.Percent												= each.Percent

										for each each.SourcingEventLine.CMLineComments
											SavedComment 			= each.Title
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineCommentRel exists)
												invoke Create ContractLineComment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.CommentTitle					= each.Title
													invoked.ContractCommentType				= 2
													if (each.Type.DisplayOnly)
														invoked.CommentUsedFor	= each.Type.DisplayOnly
													else
													if (each.Type.PrintOnPurchaseOrder)
														invoked.CommentUsedFor	= each.Type.PrintOnPurchaseOrder
													else
													if (each.Type.InvoiceComments)
	  													invoked.CommentUsedFor	= each.Type.InvoiceComments
													invoked.Description						= each.Comment
													invoked.Attachment.File            		= each.Attachment.File
													invoked.Attachment.MimeType     		= each.Attachment.MimeType
													invoked.Attachment.Title        		= each.Attachment.Title

										for each each.SourcingEventLine.CMLineAttachments
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineAttachmentRel exists)
												invoke Create ContractLineAttachment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.Attachment.File     			= each.Attachment.File
													invoked.Attachment.MimeType 			= each.Attachment.MimeType
													invoked.Attachment.Title    			= each.Attachment.Title
													invoked.Name                            = each.Name
													invoked.Description                     = each.Description
													invoked.EmailAttachment					= true
													invoked.SSAttachment        			= true

										for each each.SourcingEventLineQuestionResponse(SourcingEventLineQuestion) set
											if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
											and each.NotifiedSupplier.Supplier 			= LocalSupplier
											and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)

												if (each.HasQuestionAnswerAttachment
												and each.CMAttachment)
													invoke Create ContractLineAttachment
														invoked.ContractGroup		= Company.SourcingGroup
														invoked.Contract			= SavedContract
														invoked.ContractLine		= LocalContractLine.ContractLine
														invoked.Attachment.File     = each.Attachment.File
														invoked.Attachment.MimeType = each.Attachment.MimeType
														invoked.Attachment.Title    = each.Attachment.Title
														invoked.EmailAttachment		= true
														invoked.SSAttachment        = true

									if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].AwardForContract = true)
										invoke Create Draft ContractLine
											assign result to LocalContractLine
											invoked.ContractGroup					= Company.SourcingGroup
											invoked.Contract						= SavedContract
											invoked.CreateFromCopy					= true
											invoked.ServiceCode						= ServiceCode
											invoked.CommodityCode					= CommodityCode
											invoked.UNSPSCCode						= UnspscCode
											invoked.SourcingEventNumber				= SourcingEvent
											invoked.SourcingEventLineNumber         = SourcingEventLine
											invoked.SourcingCompany					= Company
											invoked.Retainage						= 0
											invoked.ItemNumber						= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Item
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Item exists)
												invoked.ItemType					= 1   
											else
											if (ItemType = ItemType.Service)
												invoked.ItemType                    = 2   
											else
												invoked.ItemType                    = 3   
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Item !exists)
												invoked.ItemDescription					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItemDescription
												if (!ItemType.Service)
													invoked.ItemDescription3                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseComments
											if (!OutputType.Service)
												invoked.VendorItem					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItem
											if(!ItemType.Service)
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItem !exists)
													invoked.VendorItemDescription		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].VendorItemDescription
												if (each.ManufacturerInformation.Manufacturer entered)
													invoked.Manufacturer                    = each.ManufacturerInformation.Manufacturer
												if (each.ManufacturerInformation.ManufacturerNumber entered)
													invoked.ManufacturerNumber              = each.ManufacturerInformation.ManufacturerNumber	
												else
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item !exists)
													invoked.ManufacturerNumber          = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem
											if (OutputType.Standing)
												invoked.Quantity					= Quantity
											invoked.UOM								= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].UOM
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount.NoCharge)
												invoked.CostOption					= 2
											else
												invoked.CostOption					= 1
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].CurrencyResponseUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].ResponseAmount.UnitPrice
												else
													initialize LocalCurrencyExchange

													SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
													SavedEnterpriseGroup					= Company.ProcurementGroup
													SavedCurrencyTable      				= Company.CurrencyTable
													SavedTransactionAmount      			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].CurrencyResponseUnitPrice
													SavedExchangeDate		 	 			= current corporate date
													LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

													invoked.BaseCost        			    = LocalCurrencyExchange.OutputCurrencyAmount
											invoked.GlobalTradeItemNumber			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].GlobalTradeItemNumber
											if (each.AwardQtyToLifetimeMaxQty)
												invoked.LifetimeMaximumQuantity		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[4].Quantity
												invoked.CopyQuantityToLifetimeMaxQty	= true

										SavedContractLine = LocalContractLine.ContractLine
											invoke UpdateContract Submitted each.SourcingEventLineResponse
												invoked.ContractParam						= SavedContract
												invoked.ContractLineParam					= SavedContractLine

										if (OriginCodeRQ exists)
											LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
											LocalSupplier 	   = each.NotifiedSupplier.Supplier
											for each OriginCodeRQ
												SavedRequisition = each.SourceDocumentNumeric

												for each each.ReqProcurementTransactionDistributionRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														if (each.DistributionPercent entered)
															invoked.Percent        			= each.DistributionPercent
														else
														if (each.DistributionAmount entered)
															invoked.Percent                 = each.DerivedDistributionPercent
														else
														if (each.DistributionQuantity entered)
															invoked.Percent                 = each.DerivedDistributionPercent

										else
										if (OriginCodeCM exists)
											for each OriginCodeCM 
												for each each.ContractLineDistributionsRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														invoked.Percent	        			= each.Percent

										else
											for each each.SourcingEventLine.SourcingEventLineDistribution set
												invoke Create ContractLineDistribution
													invoked.ContractGroup										= Company.SourcingGroup
													invoked.Contract											= SavedContract
													invoked.ContractLine										= LocalContractLine.ContractLine
													invoked.DistributionAccount									= each.DistributionAccount
													invoked.Percent												= each.Percent

										for each each.SourcingEventLine.CMLineComments
											SavedComment 			= each.Title
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineCommentRel exists)
												invoke Create ContractLineComment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.CommentTitle					= each.Title
													invoked.ContractCommentType				= 2
													if (each.Type.DisplayOnly)
														invoked.CommentUsedFor	= each.Type.DisplayOnly
													else
													if (each.Type.PrintOnPurchaseOrder)
														invoked.CommentUsedFor	= each.Type.PrintOnPurchaseOrder
													else
													if (each.Type.InvoiceComments)
	  													invoked.CommentUsedFor	= each.Type.InvoiceComments
													invoked.Description						= each.Comment
													invoked.Attachment.File            		= each.Attachment.File
													invoked.Attachment.MimeType     		= each.Attachment.MimeType
													invoked.Attachment.Title        		= each.Attachment.Title

										for each each.SourcingEventLine.CMLineAttachments
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineAttachmentRel exists)
												invoke Create ContractLineAttachment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.Attachment.File     			= each.Attachment.File
													invoked.Attachment.MimeType 			= each.Attachment.MimeType
													invoked.Attachment.Title    			= each.Attachment.Title
													invoked.Name                            = each.Name
													invoked.Description                     = each.Description
													invoked.EmailAttachment					= true
													invoked.SSAttachment        			= true

										for each each.SourcingEventLineQuestionResponse(SourcingEventLineQuestion) set
											if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
											and each.NotifiedSupplier.Supplier 			= LocalSupplier
											and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)

												if (each.HasQuestionAnswerAttachment
												and each.CMAttachment)
													invoke Create ContractLineAttachment
														invoked.ContractGroup		= Company.SourcingGroup
														invoked.Contract			= SavedContract
														invoked.ContractLine		= LocalContractLine.ContractLine
														invoked.Attachment.File     = each.Attachment.File
														invoked.Attachment.MimeType = each.Attachment.MimeType
														invoked.Attachment.Title    = each.Attachment.Title
														invoked.EmailAttachment		= true
														invoked.SSAttachment        = true

									if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].AwardForContract = true)
										invoke Create Draft ContractLine
											assign result to LocalContractLine
											invoked.ContractGroup					= Company.SourcingGroup
											invoked.Contract						= SavedContract
											invoked.CreateFromCopy					= true
											invoked.ServiceCode						= ServiceCode
											invoked.CommodityCode					= CommodityCode
											invoked.UNSPSCCode						= UnspscCode
											invoked.SourcingEventNumber				= SourcingEvent
											invoked.SourcingEventLineNumber         = SourcingEventLine
											invoked.SourcingCompany					= Company
											invoked.Retainage						= 0
											invoked.ItemNumber						= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Item
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Item exists)
												invoked.ItemType					= 1   
											else
											if (ItemType = ItemType.Service)
												invoked.ItemType                    = 2   
											else
												invoked.ItemType                    = 3   
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Item !exists)
												invoked.ItemDescription					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItemDescription
												if (!ItemType.Service)
													invoked.ItemDescription3                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseComments
											if (!OutputType.Service)
												invoked.VendorItem					= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItem
											if(!ItemType.Service)
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItem !exists)
													invoked.VendorItemDescription		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].VendorItemDescription
												if (each.ManufacturerInformation.Manufacturer entered)
													invoked.Manufacturer                    = each.ManufacturerInformation.Manufacturer
												if (each.ManufacturerInformation.ManufacturerNumber entered)
													invoked.ManufacturerNumber              = each.ManufacturerInformation.ManufacturerNumber	
												else
												if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].Item !exists)
													invoked.ManufacturerNumber          = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[1].VendorItem
											if (OutputType.Standing)
												invoked.Quantity					= Quantity
											invoked.UOM								= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].UOM
											if (each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount.NoCharge)
												invoked.CostOption					= 2
											else
												invoked.CostOption					= 1
												if (each.Contract.CurrencyCode      = each.SourcingEventResponse.EnteredCurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].CurrencyResponseUnitPrice
												else
												if (each.Contract.CurrencyCode      = SourcingEvent.CurrencyCode)
													invoked.BaseCost                = each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].ResponseAmount.UnitPrice
												else
													initialize LocalCurrencyExchange

													SavedFromCurrency     					= each.SourcingEventResponse.EnteredCurrencyCode
													SavedEnterpriseGroup					= Company.ProcurementGroup
													SavedCurrencyTable      				= Company.CurrencyTable
													SavedTransactionAmount      			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].CurrencyResponseUnitPrice
													SavedExchangeDate		 	 			= current corporate date
													LocalCurrencyExchange.ToCurrency 		= each.Contract.CurrencyCode

													invoked.BaseCost        			    = LocalCurrencyExchange.OutputCurrencyAmount
											invoked.GlobalTradeItemNumber			= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].GlobalTradeItemNumber
											if (each.AwardQtyToLifetimeMaxQty)
												invoked.LifetimeMaximumQuantity		= each.AlternateResponseArray.AlternateResponseOccurs.AlternateResponseDetails[5].Quantity
												invoked.CopyQuantityToLifetimeMaxQty	= true

										SavedContractLine = LocalContractLine.ContractLine
											invoke UpdateContract Submitted each.SourcingEventLineResponse
												invoked.ContractParam						= SavedContract
												invoked.ContractLineParam					= SavedContractLine

										if (OriginCodeRQ exists)
											LocalSupplierGroup = each.NotifiedSupplier.SupplierGroup
											LocalSupplier 	   = each.NotifiedSupplier.Supplier
											for each OriginCodeRQ
												SavedRequisition = each.SourceDocumentNumeric

												for each each.ReqProcurementTransactionDistributionRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														if (each.DistributionPercent entered)
															invoked.Percent        			= each.DistributionPercent
														else
														if (each.DistributionAmount entered)
															invoked.Percent                 = each.DerivedDistributionPercent
														else
														if (each.DistributionQuantity entered)
															invoked.Percent                 = each.DerivedDistributionPercent

										else
										if (OriginCodeCM exists)
											for each OriginCodeCM 
												for each each.ContractLineDistributionsRel
													invoke Create ContractLineDistribution
														invoked.ContractGroup				= Company.SourcingGroup
														invoked.Contract					= SavedContract
														invoked.ContractLine				= SavedContractLine
														invoked.DistributionAccount			= each.DistributionAccount
														invoked.Percent	        			= each.Percent

										else 
											for each each.SourcingEventLine.SourcingEventLineDistribution set
												invoke Create ContractLineDistribution
													invoked.ContractGroup										= Company.SourcingGroup
													invoked.Contract											= SavedContract
													invoked.ContractLine										= LocalContractLine.ContractLine
													invoked.DistributionAccount									= each.DistributionAccount
													invoked.Percent												= each.Percent

										for each each.SourcingEventLine.CMLineComments
											SavedComment 			= each.Title
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineCommentRel exists)
												invoke Create ContractLineComment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.CommentTitle					= each.Title
													invoked.ContractCommentType				= 2
													if (each.Type.DisplayOnly)
														invoked.CommentUsedFor	= each.Type.DisplayOnly
													else
													if (each.Type.PrintOnPurchaseOrder)
														invoked.CommentUsedFor	= each.Type.PrintOnPurchaseOrder
													else
													if (each.Type.InvoiceComments)
	  													invoked.CommentUsedFor	= each.Type.InvoiceComments
													invoked.Description						= each.Comment
													invoked.Attachment.File            		= each.Attachment.File
													invoked.Attachment.MimeType     		= each.Attachment.MimeType
													invoked.Attachment.Title        		= each.Attachment.Title

										for each each.SourcingEventLine.CMLineAttachments
											SavedAttachmentTitle	= each.Attachment.Title

											if (!ContractLineAttachmentRel exists)
												invoke Create ContractLineAttachment
													invoked.ContractGroup					= Company.SourcingGroup
													invoked.Contract						= SavedContract
													invoked.ContractLine					= LocalContractLine.ContractLine
													invoked.Attachment.File     			= each.Attachment.File
													invoked.Attachment.MimeType 			= each.Attachment.MimeType
													invoked.Attachment.Title    			= each.Attachment.Title
													invoked.Name                            = each.Name
													invoked.Description                     = each.Description
													invoked.EmailAttachment					= true
													invoked.SSAttachment        			= true

										for each each.SourcingEventLineQuestionResponse(SourcingEventLineQuestion) set
											if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
											and each.NotifiedSupplier.Supplier 			= LocalSupplier
											and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)

												if (each.HasQuestionAnswerAttachment
												and each.CMAttachment)
													invoke Create ContractLineAttachment
														invoked.ContractGroup		= Company.SourcingGroup
														invoked.Contract			= SavedContract
														invoked.ContractLine		= LocalContractLine.ContractLine
														invoked.Attachment.File     = each.Attachment.File
														invoked.Attachment.MimeType = each.Attachment.MimeType
														invoked.Attachment.Title    = each.Attachment.Title
														invoked.EmailAttachment		= true
														invoked.SSAttachment        = true


									if (each.NewContractCreation)
										LocalSupplierGroup 	  = each.NotifiedSupplier.SupplierGroup
										LocalSupplier 	   	  = each.NotifiedSupplier.Supplier
										LocalSupplierSourceId = each.NotifiedSupplier.SupplierSourceId
										if (!SourcingEvent.AllowsConditionalQuestions)
											for each each.SourcingEventLine.CMLineQuestions
												SavedQuestion = each.Question
												LocalQuestion = each.Question

												if (QuestionActiveRel.Active
												or  LocalQuestion				= 0)
													if (!ContractQuestionRel exists
													or  !each.Question entered)
														invoke Create ContractQuestion
															assign result to LocalContractQuestion
															invoked.ContractGroup					= Company.SourcingGroup
															invoked.Contract						= SavedContract
															invoked.QuestionSource 					= 3
															invoked.SSQuestion	   					= true
															fill in fields from each

														if (each.ResponseType.List)
															for each each.SourcingEventLineQuestionValue set
																invoke CreateDisplay ContractQuestionListValue
																	invoked.ContractGroup             = Company.SourcingGroup
																	invoked.Contract                  = SavedContract
																	invoked.ContractQuestion          = LocalContractQuestion.ContractQuestion
																	invoked.ContractQuestionListValue = each.SourcingEventLineQuestionValue
																	fill in fields from each

														for each each.SourcingEventLineQuestionResponse(SourcingEventLineQuestion) set
															if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
															and each.NotifiedSupplier.Supplier 			= LocalSupplier
															and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)
																invoke Create ContractQuestionAnswer
																	invoked.ContractGroup											= Company.SourcingGroup
																	invoked.Contract												= SavedContract
																	invoked.ContractQuestion										= LocalContractQuestion.ContractQuestion
																	invoked.ContractQuestionAnswerGroup.TextAnswer					= each.SourcingEventLineQuestionAnswer.TextValue
																	invoked.ContractQuestionAnswerGroup.NumericAnswer				= each.SourcingEventLineQuestionAnswer.NumericValue
																	invoked.ContractQuestionAnswerGroup.DateAnswer					= each.SourcingEventLineQuestionAnswer.DateValue
																	invoked.ContractQuestionAnswerGroup.ContractQuestionListValue	= each.SourcingEventLineQuestionAnswer.SourcingEventLineQuestionValue
																	invoked.ContractQuestionAnswerGroup.YesNoAnswer					= each.SourcingEventLineQuestionAnswer.YesNoValue
												 					invoked.ContractQuestionAnswerGroup.YesNoText					= each.SourcingEventLineQuestionAnswer.YesNoText
												 					invoked.Attachment.File            								= each.Attachment.File
																	invoked.Attachment.MimeType     								= each.Attachment.MimeType
																	invoked.Attachment.Title        								= each.Attachment.Title

																if (each.HasQuestionAnswerAttachment
																and each.CMAttachment)
																	invoke Create ContractLineComment
																		invoked.ContractGroup		= Company.SourcingGroup
																		invoked.Contract			= SavedContract
																		invoked.ContractLine		= LocalContractLine.ContractLine
																		invoked.CommentTitle		= each.Attachment.Title
																		invoked.ContractCommentType	= 2
																		invoked.Description			= each.Attachment.Title
																		invoked.Attachment.File            		= each.Attachment.File
																		invoked.Attachment.MimeType     		= each.Attachment.MimeType
																		invoked.Attachment.Title        		= each.Attachment.Title
																		invoked.EmailAttachment		= true
										else
											for each SELSupplierQuestionRel
												SavedQuestion = each.Question
												LocalQuestion = each.Question
												LocalSourcingEventQuestion = each.SourcingEventLineQuestion

												if (QuestionActiveRel.Active
												or  LocalQuestion				= 0)
													if (!ContractQuestionRel exists
													or  !each.Question entered)
														invoke Create ContractQuestion
															assign result to LocalContractQuestion
															invoked.ContractGroup					= Company.SourcingGroup
															invoked.Contract						= SavedContract
															invoked.QuestionSource 					= 3
															invoked.SSQuestion	   					= true
															invoked.AllowResponseAttachment			= SourcingEventLineQuestionContractRel.AllowResponseAttachment
															if (QuestionActiveRel exists)
																invoked.ResponseRules				= QuestionActiveRel.ResponseRules
																invoked.YesNoResponseRules			= QuestionActiveRel.YesNoResponseRules
																invoked.YesNoTextResponseRules		= QuestionActiveRel.YesNoTextResponseRules
															if (LocalQuestion 						= 0)
																invoked.ResponseRules				= SourcingEventLineQuestionContractRel.ResponseRules
																invoked.YesNoResponseRules			= SourcingEventLineQuestionContractRel.YesNoResponseRules
																invoked.YesNoTextResponseRules		= SourcingEventLineQuestionContractRel.YesNoTextResponseRules
															fill in fields from each

														if (each.ResponseType.List)
															for each each.SELSupplierQuestionValue set
																invoke CreateDisplay ContractQuestionListValue
																	invoked.ContractGroup             = Company.SourcingGroup
																	invoked.Contract                  = SavedContract
																	invoked.ContractQuestion          = LocalContractQuestion.ContractQuestion
																	invoked.ContractQuestionListValue = each.SELSupplierQuestionValue
																	fill in fields from each

														for each each.SELSupplierQuestionResponse(SELSupplierQuestion) set
															if (each.NotifiedSupplier.SupplierGroup 	= LocalSupplierGroup
															and each.NotifiedSupplier.Supplier 			= LocalSupplier
															and each.NotifiedSupplier.SupplierSourceId 	= LocalSupplierSourceId)
																invoke Create ContractQuestionAnswer
																	invoked.ContractGroup											= Company.SourcingGroup
																	invoked.Contract												= SavedContract
																	invoked.ContractQuestion										= LocalContractQuestion.ContractQuestion
																	invoked.ContractQuestionAnswerGroup.TextAnswer					= each.SELSupplierQuestionAnswer.TextValue
																	invoked.ContractQuestionAnswerGroup.NumericAnswer				= each.SELSupplierQuestionAnswer.NumericValue
																	invoked.ContractQuestionAnswerGroup.DateAnswer					= each.SELSupplierQuestionAnswer.DateValue
																	invoked.ContractQuestionAnswerGroup.ContractQuestionListValue	= each.SELSupplierQuestionAnswer.SELSupplierQuestionValue
																	invoked.ContractQuestionAnswerGroup.YesNoAnswer					= each.SELSupplierQuestionAnswer.YesNoValue
													 				invoked.ContractQuestionAnswerGroup.YesNoText					= each.SELSupplierQuestionAnswer.YesNoText
													 				invoked.Attachment.File            								= each.Attachment.File
																	invoked.Attachment.MimeType     								= each.Attachment.MimeType
																	invoked.Attachment.Title        								= each.Attachment.Title

																if (each.HasQuestionAnswerAttachment
																and each.CMAttachment)
																	invoke Create ContractLineComment
																		invoked.ContractGroup		= Company.SourcingGroup
																		invoked.Contract			= SavedContract
																		invoked.ContractLine		= LocalContractLine.ContractLine
																		invoked.CommentTitle		= each.Attachment.Title
																		invoked.ContractCommentType	= 2
																		invoked.Description			= each.Attachment.Title
																		invoked.Attachment.File            		= each.Attachment.File
																		invoked.Attachment.MimeType     		= each.Attachment.MimeType
																		invoked.Attachment.Title        		= each.Attachment.Title
																		invoked.EmailAttachment		= true

								OutputCreated = true

						ChangeAward is an Instance Action
							valid when (ChangeAwardValid)
							Action Rules
								constraint (!OutputCreated)
									"PurchaseOrderOrContractAlreadyCreatedForLine<SourcingEventLine>"
								invoke Delete AwardDistribution
								initialize CancelledQuantity
								make transition to Open

				Notification is a StateCycle
					state field is AwardNotificationStatus

					NotNotified is a State

						on entrance to Approved
							Action Rules
								if (Company.SendToAwardedOnly)
									for each AwardedLines
										if (!each.SourcingEventResponse.ConsolidateAward)
											if (!SourcingEvent.PostingOptions.DoNotDisplayOnPortal)
												if (Company.SendAwardedEmail)
													if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
														include SendAwardedEmailMessage

												if (Company.CreateAwardedMessage)
													include CreateAwardedSupplierContactMessage

											if (Company.ConsolidateEmails)
												invoke Update Submitted each.SourcingEventResponse
													invoked.ConsolidateAward	= true
								else
									if (!SourcingEvent.ConsolidateAward)
										if (!SourcingEvent.PostingOptions.DoNotDisplayOnPortal)
											if (Company.SendAwardedEmail)
												if (SourcingEvent.NumberOfSupplierNotifications < 50)
													for each SourcingEvent.SupplierSourceIdsToNotify
														include SendAwardedEmailMessage

												for each SourcingEvent.RespondedButNotNotified
													include SendAwardedEmailMessage

												for each SourcingEvent.PlanHoldersToNotifyRel
													include SendAwardedEmailMessage

											if (Company.CreateAwardedMessage)

												if (SourcingEvent.NumberOfSupplierNotifications < 50)
													for each SourcingEvent.SourcingEventNotification set
														include CreateAwardedSupplierContactMessage

												for each SourcingEvent.AllRespondedButNotNotified
													include CreateAwardedSupplierContactMessage

												for each SourcingEvent.PlanHoldersToNotifyRel
													include CreateAwardedSupplierContactMessage

											if (SourcingEvent.NumberOfSupplierNotifications >= 50)
												if (Company.SendAwardedEmail
												or  Company.CreateAwardedMessage)
													invoke MessageNotifiedSuppliersOfAward 
														invoked.ParmSourcingCompany	= Company 
														invoked.ParmEvent           = SourcingEvent 
														invoked.ParmEventLine       = SourcingEventLine 													

										if (Company.ConsolidateEmails)
											invoke UpdateAward Open.Notified SourcingEvent
												invoked.ConsolidateAward	= true

								make transition to Notified

					Notified is a State

			Closed is a State

