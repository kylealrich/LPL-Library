IntercompanyBillingDocumentLine is a BusinessClass
	owned by intercobilling
	prefix is ICBLN
	sql name is "ICBDocumentLine"

	Ontology
		symbolic key is IntercompanyBillingDocumentLine

	Persistent Fields
		RechargeItem					is an IntercompanyBillingRechargeItem
		Description
		UnitPrice						is an InternationalAmount
		Quantity						is an InternationalAmount
		UnitOfMeasure					is an IntercompanyBillingUnitOfMeasure
		ExtendedAmount					is an InternationalAmount
		Taxable							is Boolean
		TaxCode
		AlternatePayablesTaxCode		is a TaxCode 
		TaxCategory						is a ProductTaxCategory
		TaxUsageCode
		TaxAmount						is an InternationalAmount
        TaxRate							is Percent 7.5
    	ReturnedTaxable					is an InternationalAmount
		ReceivablesRevenueAccount		is a FinanceCodeBlockFull
		PayablesExpenseAccount			is a FinanceCodeBlockFull 
        LineType         				is AlphaUpper 1
            States
                Goods    value is "G"
                Services value is "S"
		OriginatingTransaction 			is BusinessObjectReference
		AccruedOrInvoiced				is AlphaUpper 1	
			States
				Accrued		    value is "A"
				Invoiced		value is "I"
		ProcessType						is Numeric 1
			States
				NonVAT		value is 0
				VAT			value is 1
		WithholdingAmount						is an InternationalAmount
    	ReceivableWithholdingAccount			is a FinanceCodeBlockFull   
    	PayableWithholdingAccount				is a FinanceCodeBlockFull    
    	CashBasisAccount						is a FinanceCodeBlockFull    
		SecondaryWithholdingAmount				is an InternationalAmount
    	SecondaryReceivableWithholdingAccount	is a FinanceCodeBlockFull   
    	SecondaryPayableWithholdingAccount		is a FinanceCodeBlockFull    
    	SecondaryCashBasisAccount				is a FinanceCodeBlockFull    
		HSNSACCode
		UNSPSCCodeGroup
		ReceivablesDistributionCode				is a IntercompanyBillingDistributionCode
		PayablesDistributionCode				is a IntercompanyBillingDistributionCode
		InterfaceRevenueExpenseDistributions	is Boolean


	Field Rules
		
		RechargeItem
			required

			if (IntercompanyBillingDocumentHeader.OriginatedFromInternalInterface)
				cannot be changed
					"CannotChangeTheRechargeItemWhenTheLineOriginatedFromA<OriginatingTransaction.BusinessClassName>"

			if (action type.Update
			and RechargeItem changed)
				if (Description = old RechargeItem.Description)
					initialize Description
				Taxable = RechargeItem.Taxable
				initialize UnitOfMeasure
				initialize TaxCode
				initialize AlternatePayablesTaxCode
				initialize TaxCategory
				initialize TaxUsageCode
				initialize TaxAmount
				initialize ReceivablesRevenueAccount
				initialize PayablesExpenseAccount
				initialize LineType
				initialize ReceivableWithholdingAccount
				initialize PayableWithholdingAccount
				initialize CashBasisAccount
				initialize SecondaryReceivableWithholdingAccount
				initialize SecondaryPayableWithholdingAccount
				initialize SecondaryCashBasisAccount
				initialize HSNSACCode
				ReceivablesDistributionCode = RechargeItem.ReceivablesDistributionCode
				PayablesDistributionCode	= RechargeItem.PayablesDistributionCode
		
		Description
			if (IntercompanyBillingDocumentHeader.OriginatedFrom.JournalControl)
				default to OriginatingTransaction(GeneralLedgerTransaction).Description
			else
			if (IntercompanyBillingDocumentHeader.OriginatedFrom.PayablesInvoice)
				default to OriginatingTransaction(PayablesInvoiceDistribution).Description
			else
			if (IntercompanyBillingDocumentHeader.OriginatedFrom.TransferPricing)
				default to OriginatingTransaction(TransferPricingTransaction).TransferPricingRun.TransferPricing.Description
			else
			if (IntercompanyBillingDocumentHeader.OriginatedFrom.ProjectContractInvoice)
				default to OriginatingTransaction(ProjectContractInvoiceLine).DerivedInvoiceDescription

			default to RechargeItem.Description
					
		UnitPrice
			required

			if (IntercompanyBillingDocumentHeader.OriginatedFromInternalInterface)
				cannot be changed
					"CannotChangeTheUnitPriceWhenTheLineOriginatedFromA<OriginatingTransaction.BusinessClassName>"
					
		Quantity
			default to 1

			if (IntercompanyBillingDocumentHeader.OriginatedFromInternalInterface)
				cannot be changed
					"CannotChangeTheQuantityWhenTheLineOriginatedFromA<OriginatingTransaction.BusinessClassName>"
					
		UnitOfMeasure
			initial value is RechargeItem.DefaultUnitOfMeasure
			default to RechargeItem.DefaultUnitOfMeasure
			
			required
			
			constraint (UnitOfMeasure.Active)
				"UnitOfMeasureIsInactive"

		ExtendedAmount
			if (Quantity entered
			and UnitPrice entered)
				ExtendedAmount = (Quantity * UnitPrice)

		Taxable
			initial value is RechargeItem.Taxable
			if (action type.Create)
				default to RechargeItem.Taxable
				
			if (Taxable
			and IntercompanyBillingDocumentHeader.OriginatedFrom.ManualEntry)
				constraint (IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity.TaxEntity.ThirdParty = IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity.TaxEntity.ThirdParty)
					"RechargeItemIsTaxable;BothCompanyTaxEntitiesNeedToUseTheSameTaxSystem"


		TaxCode
			if (Taxable)
				if (TaxCode entered 
				and AlternatePayablesTaxCode entered)
					constraint (TaxEntityUsesInforTax)
						"Tax_\EntitiesMustUseThe_\Infor_\TaxSystemToAddAn_\Alternate_\Payables_\Tax_\Code"
					if (action type.Create
					or TaxCode changed
					or AlternatePayablesTaxCode changed)
						confirmation required
							"Alternate_\Payables_\Tax_\CodeMustHaveTheSameRateAs_\Tax_\Code.Continue?"
				if (TaxCode not entered) 
					constraint (AlternatePayablesTaxCode not entered)
						"Alternate_\Payables_\Tax_\CodeCanOnlyBeEnteredIf_\Tax_\CodeIsEntered"
					if (RechargeItem.DefaultTaxCode entered)
						TaxCode 						= RechargeItem.DefaultTaxCode
						if (TaxEntityUsesInforTax)
							AlternatePayablesTaxCode 	= RechargeItem.AlternatePayablesTaxCode
				if (AlternatePayablesTaxCode entered) 
					constraint (TaxCode entered)
						"Alternate_\Payables_\Tax_\CodeCanOnlyBeEnteredIf_\Tax_\CodeIsEntered"
					constraint (AlternatePayablesTaxCode != TaxCode)
						"Alternate_\Payables_\Tax_\CodeCannotBeTheSameAs_\Tax_\Code.Leave_\Alternate_\Payables_\Tax_\CodeBlankToUseTheSame_\Tax_\CodeForReceivablesAndPayables."

				if (TaxCode not entered)
					TaxCode = IntercompanyBillingDocumentHeader.ReceivableEntity.TaxCode

				if (TaxEntityUsesOneSource 
				or  TaxEntityUsesVertex)
					constraint (TaxCode entered)
						"Tax_CodeIsRequiredIfLineIsTaxable"
					constraint (TaxCode exists)
						"Tax_CodeDoesNotExist"

				if (action type.Create
				or   TaxCode changed)
					if (TaxEntityUsesOneSource 
					or  TaxEntityUsesVertex)
						if (IntercompanyBillingDocumentHeader.ReceivableTaxEntityRel.UseTaxCodeAccounts)
							constraint (LocalReceivableEntityTaxCodeRel exists)
								"MustSetUp_\Entity_\Tax_\CodeFor_\Tax_\Entity<IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity>And_\Tax_\Code<TaxCode>"
							constraint (!LocalReceivableEntityTaxCodeRel.AccruedOrInvoiced.Accrued)
								"TaxEntityOrTaxCodeCannotBeSetupAsAnAccruedTypeForIntercompanyBilling;TaxEntity<IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity>,TaxCode<TaxCode>"
							AccruedOrInvoiced = LocalReceivableEntityTaxCodeRel.AccruedOrInvoiced
						else
							constraint (!IntercompanyBillingDocumentHeader.ReceivableTaxEntityRel.AccruedOrInvoiced.Accrued)
								"TaxEntityOrTaxCodeCannotBeSetupAsAnAccruedTypeForIntercompanyBilling;TaxEntity<IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity>,TaxCode<TaxCode>"
							AccruedOrInvoiced = IntercompanyBillingDocumentHeader.ReceivableTaxEntityRel.AccruedOrInvoiced
					else
						initialize CalculateTax 
						CalculateTax.TaxEntity					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity	 
						CalculateTax.TaxCode					= TaxCode 
						if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo entered)
							CalculateTax.PostalAddress			= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress

						else
							CalculateTax.PostalAddress			= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress

						if (IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation entered)
							CalculateTax.FromPostalAddress		= IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress

						else
							CalculateTax.FromPostalAddress		= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

						CalculateTax.Function					= "I"  
						LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered) 
							"<CalculateTax.OutputErrorMessage>"

						constraint (!CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag = "A")
							"TaxEntityOrTaxCodeCannotBeSetupAsAnAccruedTypeForIntercompanyBilling;TaxEntity<IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity>,TaxCode<TaxCode>"

						AccruedOrInvoiced 						= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag  
			else
				initialize TaxCode
				initialize AlternatePayablesTaxCode

		TaxCategory
			if (Taxable)
				default to RechargeItem.TaxCategory
			else
				initialize TaxCategory
			
		TaxUsageCode
			if (Taxable)
				default to RechargeItem.TaxUsageCode
			else
				initialize TaxUsageCode
			
		TaxAmount
			if (!Taxable)
				initialize TaxAmount

		ReceivablesRevenueAccount
			default to RechargeItem.FromReceivablePLAccount
				default individual fields
			default to IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock
				default individual fields

			if (IntercompanyBillingDocumentHeader.OriginatedFromInternalInterface)
				cannot be changed
					"CannotChangeTheReceivablesRevenueAccountWhenTheLineOriginatedFromA<OriginatingTransaction.BusinessClassName>"







		PayablesExpenseAccount
			default to RechargeItem.ToPayablePLAccount
				default individual fields
   			default to IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount
				default individual fields







		LineType
			default to RechargeItem.LineType
			
		AccruedOrInvoiced
			default to "I"	

		ReceivableWithholdingAccount
			if (WithholdingLineItem)
				default to RechargeItemWithholdingRel.ReceivableWithholdingAccount
					default individual fields
				default to IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock
					default individual fields





		PayableWithholdingAccount
			if (WithholdingLineItem)
				default to RechargeItemWithholdingRel.PayableWithholdingAccount
					default individual fields
	   			default to IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount
					default individual fields





		CashBasisAccount
			if (RechargeItemWithholdingRel.CashBasisProcessing)
				default to RechargeItemWithholdingRel.CashBasisAccount
					default individual fields
	   			default to IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount
					default individual fields





		SecondaryReceivableWithholdingAccount
			if (HasSecondaryWithholding)
				default to RechargeItemWithholdingRel.SecondaryReceivableWithholdingAccount
					default individual fields
				default to IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock
					default individual fields





		SecondaryPayableWithholdingAccount
			if (HasSecondaryWithholding)
				default to RechargeItemWithholdingRel.SecondaryPayableWithholdingAccount
					default individual fields
	   			default to IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount
					default individual fields





		SecondaryCashBasisAccount
			if (RechargeItemWithholdingRel.CashBasisProcessing
			and HasSecondaryWithholding)
				default to RechargeItemWithholdingRel.SecondaryCashBasisAccount
					default individual fields
	   			default to IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount
					default individual fields




		
		HSNSACCode
			if (IsHSNSACCodeEnabled)
				default to RechargeItem.HSNSACCode
				required

		UNSPSCCodeGroup
			if (UNSPSCCodeGroup.ItemGroup not entered)

				LocalItemGroup = IntercompanyBillingDocumentHeader.ReceivableEntity.Company.GeneralLedgerCompany.BusinessGroup	
				if (LocalItemGroupRel exists)	
					UNSPSCCodeGroup.ItemGroup = LocalItemGroup	

		ReceivablesDistributionCode
			constraint (ReceivablesDistributionCode.Type.Receivables)
				"ReceivablesDistributionCodeIsNotDefinedAsAReceivablesType"
		
		PayablesDistributionCode
			constraint (PayablesDistributionCode.Type.Payables)
				"PayablesDistributionCodeIsNotDefinedAsAPayablesType"

	Local Fields
		LocalGeneralLedgerSystemCode is a GeneralLedgerSystemCode
		CalculateTax
		CalculateTaxAP				is a CalculateTax
    	LocalCalculateTaxExecuted	is Alpha 1
		Idx							is Numeric size 2

		VATInputTaxAmount			is an InternationalAmount	 
		RecoverableTaxAreaId		is like TaxCode 
		LocalARTaxAmount			is like InternationalAmount
		LocalAPTaxAmount			is like InternationalAmount
		RecoverableJurisLevel 		is a VertexJurisdictionLevel
  		RecoverableImpositionType 	is a VertexImpositionType
  		RecoverableDate  			is Date
		BlockingOverridePercent  	is a Percent	
		PartialExemptRecvblOvrdPct 	is a Percent	

        RecoverableAccount        	is a FinanceCodeBlockFull   
        NonRecoverableAccount       is a FinanceCodeBlockFull   	
		RecoverableAmount 			is an InternationalAmount
		RecoverablePercent  		is a TaxRateValue 	
		UnrecoverableAmount 		is an InternationalAmount		
		InvoiceTextCode				is a InvoiceTextCodeOut	 
		SummaryInvoiceText			is Alpha 200
		IsService					is Boolean
		LocalJurisdictionLookupKey  is Alpha 200

		NewIntercompanyBillingDocumentLine	is a IntercompanyBillingDocumentLine view
		NewReceivableGLDistribution is a ReceivableGLDistribution view 
		NewIntercompanyBillingDocumentTax is an IntercompanyBillingDocumentTax view
		ForeignIndicator			is Boolean
        CurrencyWork				is a CurrencyExchange 
		LocalTaxAmount				is an InternationalAmount
		LocalItemGroup 				is like ItemGroup	
		VatRecoverable			is Numeric 1
			States
				Is100Percent		value is 0
				IsNot100Percent		value is 1
		I2							is Numeric 2
		LocalReceivableGeneralLedgerCode is like ReceivableGeneralLedgerCode
		LocalDistributionCode		is a IntercompanyBillingDistributionCode
		LocalDistributionAccount	is a FinanceCodeBlockFull
		LocalDistributionAmount		is an InternationalAmount
							
	Transient Fields

		PayablesTaxCode		is a TaxCode
		TaxCodeAccount		is a FinanceCodeBlock

		LandCost			is Boolean 
		BypassCalculateTax	is Boolean
		FromCurrency
			derive value from IntercompanyBillingDocumentHeader.DocumentCurrency
		CurrencyTable
		ExchangeDate
		TransactionAmount				is a CurrencyAmount
		GLTransDetailAmount				is a CurrencyAmount
		GLTransDetailFunctionalAmount	is an InternationalAmount
		GLTransDetailAccount			is a FinanceCodeBlock
		GLTransDetailJournalizeGroup	is like JournalizeGroup
		TaxEntityValue					is a TaxEntity							
			derive value from IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity	

	Conditions
		IsHSNSACCodeEnabled
			when(IntercompanyBillingDocumentHeader.ReceivableEntity.Company.GeneralLedgerCompany.RequireHSNSACCode
			or   IntercompanyBillingDocumentHeader.PayableEntity.Company.GeneralLedgerCompany.RequireHSNSACCode)
			
		HeaderUnreleased
			when (IntercompanyBillingDocumentHeader.Status.Unreleased)
			
		TaxableHasNoTax
			when (Taxable
			and   TaxAmount not entered
			and  !HasZeroAmountTaxDistributions)

		HasZeroAmountTaxDistributions
			when (TaxEntityUsesInforTax
			and   ZeroAmountTaxDistributionRel exists)

		JurisResultsExists
			restricted
			when (JurisdictionResultsRel exist)

		HasOriginatingTransaction
			restricted
			when (OriginatingTransaction entered)

		FromAPDistribution
			restricted
			when (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")

		FromGLTransaction
			restricted
			when (OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")

		FromProjectContractInvoiceLine
			restricted
			when (OriginatingTransaction.BusinessClassName = "ProjectContractInvoiceLine")
					
		HeaderHasOriginatingDocument
			restricted
			when (IntercompanyBillingDocumentHeader.OriginatingDocument.BusinessClassName entered)  

		CreateAllowed
			restricted
			when (HeaderUnreleased
			and   !HeaderHasOriginatingDocument)
			
		DeleteAllowed
			restricted
			when (HeaderUnreleased
			and   !HasOriginatingTransaction)
			
		HeaderHasInvoiceTemplate
			restricted
			when (IntercompanyBillingDocumentHeader.IntercompanyBillingInvoice entered)
			
		ItemHasWithholdingSetup
			when (RechargeItemHasWithholdingRel exists)

		WithholdingLineItem
			when (RechargeItemWithholdingRel exists)
			
		HasSecondaryWithholding
			when (RechargeItemWithholdingRel.SecondaryWithholdingPercent entered)

		HasWithholdingAmount
			restricted
			when (WithholdingAmount entered)
			
		HasSecondaryWithholdingAmount
			restricted
			when (SecondaryWithholdingAmount entered)

		HasWithholdingAmountEntered		
			restricted
			when (WithholdingAmount entered
			or    SecondaryWithholdingAmount entered)

		HasCashBasisAccount
			restricted
			when (CashBasisAccount entered)
			
		HasSecondaryCashBasisAccount
			restricted
			when (SecondaryCashBasisAccount entered)
			
		HasDistributions
			restricted
			when (BillingDocumentDistributionRel exists)

		ShowJurisdictionResults		
			restricted
			when (VertexConfigRel.DebugMode
			and   TaxEntityUsesVertex
			and   JurisResultsExists)	
			
		TaxEntityUsesVertex
			restricted				 							
			when (TaxEntityValue.ThirdParty.VertexOSeries)	

		TaxEntityUsesInforTax
			restricted
			when (TaxEntityValue.ThirdParty.InforTax)

		TaxEntityUsesOneSource
			restricted
			when (IntercompanyBillingDocumentHeader.TaxEntityUsesOneSource)

		CallVertexByTransaction
			restricted
			when (IntercompanyBillingDocumentHeader.CallVertexByTransaction)
		
		ShowUNSPSCCode
			restricted
			when (TaxEntityUsesOneSource
			or    TaxEntityUsesVertex)

		OtherLinesHaveDifferentProjectOnRevenueAccount
			restricted
			when (DocumentLineMultiRevenueProjectRel exists)
			
		LineNetDueIsPositive
			restricted
			when (DerivedTotalDue > 0)
					
		LineNetDueIsNegative
			restricted
			when (DerivedTotalDue < 0)

		RevenueDistribsOutOfBalance
			restricted
			when (ExtendedAmount != DerivedTotalReceivablesDistributionAmount)
			
		ExpenseDistribsOutOfBalance
			restricted
			when (ExtendedAmount != DerivedTotalPayablesDistributionAmount)

		RevenueOrExpenseDistribsOutOfBalance
			when (RevenueDistribsOutOfBalance
			or    ExpenseDistribsOutOfBalance)

		RevenueAndExpenseDocumentDistributionsDoNotExist  
			restricted
			when (BillingDocumentDistributionReceivablesRel not exists
			and   BillingDocumentDistributionPayablesRel not exists)

	Relations
		BillFromEntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= IntercompanyBillingGroup
				related.TaxEntity				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
				related.TaxCode					= IntercompanyBillingDocumentHeader.ReceivableEntity.TaxCode

		LocalEntityTaxCodeRel 
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= IntercompanyBillingGroup
				related.TaxEntity				= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
				related.TaxCode					= TaxCode

		LocalReceivableEntityTaxCodeRel 
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= IntercompanyBillingGroup
				related.TaxEntity				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
				related.TaxCode					= TaxCode

		LocalReceivableGeneralLedgerCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
				related.ReceivableGeneralLedgerCode 			= LocalReceivableGeneralLedgerCode

		TaxConfigurationRel
			one-to-one relation to TaxConfiguration
			Field Mapping uses symbolic key
				related.TaxConfiguration		= IntercompanyBillingGroup

  		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= DerivedFinanceEnterpriseGroup 
			Instance Selection
				where (related.CallingModuleKey 					= reference to this instance)		

		PayableBillingDocumentTaxRel is a IntercompanyBillingDocumentTax set
			Instance Selection
				where (related.CalculatedFor.PayablesInvoice)
				
		ReceivableBillingDocumentTaxRel is a IntercompanyBillingDocumentTax set
			Instance Selection
				where (related.CalculatedFor.ReceivableInvoice)

		ZeroAmountTaxDistributionRel is a IntercompanyBillingDocumentTax set
			Instance Selection
				where (related.TaxAmount 			= 0
				and    related.TaxRate				= 0
				and    related.DerivedTaxCode entered)
				
		RechargeItemAccrualRel
			one-to-one relation to IntercompanyBillingRechargeItemAccrual
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup									= IntercompanyBillingGroup
				related.IntercompanyBillingRechargeItem								= RechargeItem
				related.IntercompanyBillingRechargeItemAccrual.ReceivableCompany	= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
				related.IntercompanyBillingRechargeItemAccrual.PayablesCompany		= IntercompanyBillingDocumentHeader.PayableEntity.Company

		RechargeItemAccrualReceivableRel
			one-to-one relation to IntercompanyBillingRechargeItemAccrual
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup									= IntercompanyBillingGroup
				related.IntercompanyBillingRechargeItem								= RechargeItem
				related.IntercompanyBillingRechargeItemAccrual.ReceivableCompany	= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
				related.IntercompanyBillingRechargeItemAccrual.PayablesCompany		= blank

		RechargeItemAccrualPayableRel
			one-to-one relation to IntercompanyBillingRechargeItemAccrual
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup									= IntercompanyBillingGroup
				related.IntercompanyBillingRechargeItem								= RechargeItem
				related.IntercompanyBillingRechargeItemAccrual.ReceivableCompany	= blank
				related.IntercompanyBillingRechargeItemAccrual.PayablesCompany		= IntercompanyBillingDocumentHeader.PayableEntity.Company

		BillingDocumentLineRel
			one-to-many relation to IntercompanyBillingDocumentLine
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader

		WithholdingDocumentLineRel
			one-to-many relation to IntercompanyBillingDocumentLine
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
			Instance Selection
				where (related.HasWithholdingAmount)


		RechargeItemWithholdingRel
			one-to-one relation to IntercompanyBillingRechargeItemWithholding
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup										= IntercompanyBillingGroup
				related.IntercompanyBillingRechargeItem									= RechargeItem
				related.IntercompanyBillingRechargeItemWithholding.PayableCountry		= PayableCompanyCountry
				related.IntercompanyBillingRechargeItemWithholding.ReceivableCountry	= ReceivableCompanyCountry

		RechargeItemHasWithholdingRel
			one-to-many relation to IntercompanyBillingRechargeItemWithholding
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup										= IntercompanyBillingGroup
				related.IntercompanyBillingRechargeItem									= RechargeItem

		BillingDocumentDistributionRel is a IntercompanyBillingDocumentDistribution set
			Instance Selection
				where (related.Type.Withholding)

		BillingDocumentDistributionReceivablesRel is a IntercompanyBillingDocumentDistribution set
			Instance Selection
				where (related.Type.Receivables)

		BillingDocumentDistributionPayablesRel is a IntercompanyBillingDocumentDistribution set
			Instance Selection
				where (related.Type.Payables)

		LocalItemGroupRel	
			one-to-one relation to ItemGroup
			Field Mapping uses symbolic key
				related.ItemGroup				= LocalItemGroup

		TaxLineItemRel	
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject	= IntercompanyBillingDocumentHeader.UniqueID
			Instance Selection
				where(related.RelatedLineItemUniqueId		= UniqueID)

		VertexConfigRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig 					= DerivedFinanceEnterpriseGroup 	 
												
        ReceivableGeneralLedgerCodeRel
            one-to-one relation to ReceivableGeneralLedgerCode
            Field Mapping uses symbolic key
                related.Company                     = IntercompanyBillingDocumentHeader.ReceivableEntity.Company
                related.ReceivableGeneralLedgerCode = IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableGeneralLedgerCode

		PayablesAccrualCodeDetailRel
			one-to-one relation to PayablesAccrualCodeDetail
			Field Mapping uses Set1
				related.VendorGroup			= IntercompanyBillingDocumentHeader.PayableEntity.Company.VendorGroup
				related.Company				= IntercompanyBillingDocumentHeader.PayableEntity.Company
				related.PayablesAccrualCode	= IntercompanyBillingDocumentHeader.PayableEntity.PayablesAccrualCode

		DocumentLineMultiRevenueProjectRel
			one-to-many relation to IntercompanyBillingDocumentLine
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
			Instance Selection
				where (related.ReceivablesRevenueAccount.Project != ReceivablesRevenueAccount.Project)  

		IntercompanyBillingDistributionCodeDetailRel
			one-to-many relation to IntercompanyBillingDistributionCodeDetail
			delete cascades
			Field Mapping uses symbolic key
				related.IntercompanyBillingGroup			= IntercompanyBillingGroup
				related.IntercompanyBillingDistributionCode	= LocalDistributionCode
											                					
	Rule Blocks
		GetTaxCodeInfo 

			if (Taxable)
				initialize CalculateTax 
				CalculateTax.DontCreateLogFile			= true	
				CalculateTax.TaxEntity					= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity	 
		 		CalculateTax.TaxCode					= IntercompanyBillingDocumentHeader.ReceivableEntity.TaxCode
		 		PayablesTaxCode							= IntercompanyBillingDocumentHeader.ReceivableEntity.TaxCode
			 	if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo entered)
			 		CalculateTax.PostalAddress			= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress

				else
			 		CalculateTax.PostalAddress			= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress

				if (IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation entered)
					CalculateTax.FromPostalAddress		= IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress

			 	else
		            CalculateTax.FromPostalAddress		= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

				CalculateTax.Function					= "I"  
				LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
				constraint (CalculateTax.OutputErrorNumber not entered) 
					"<CalculateTax.OutputErrorMessage>"
				AccruedOrInvoiced 						= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag  
				TaxCodeAccount							= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
				LandCost								= CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag
				

		UpdateHeaderInvoice
			if (HeaderHasInvoiceTemplate)
				invoke RegenerateBillingInvoice IntercompanyBillingDocumentHeader


		LoadReceivablesVertexAdditionalFields
			if (TaxEntityUsesVertex)
				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode
				else
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay

				if (ExtendedAmount < 0)
					CalculateTax.DocumentType				= "CreditMemo"
				else
					CalculateTax.DocumentType				= "Invoice"

				if (IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldExist)
					initialize Idx
					for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered            
						or  each.ExternalValue entered)
							increment Idx
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 			= each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 		= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							else
							if (each.ExternalValue.ValueIs.Description)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
							else
							if (each.ExternalValue.ValueIs.Customer)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.DocumentCurrency
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UnitPrice
							else
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.CustomerType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.Project)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.Project
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxCategory
							else
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxUsageCode
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ReceivablesRevenueAccount.FinanceDimension10
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code
					
					initialize Idx
					for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							increment Idx
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId 			= each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = ReceivablesRevenueAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = ReceivablesRevenueAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = UnitPrice
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 8
							else
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

					initialize Idx
					for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered            
						or  each.ExternalValue entered)
							increment Idx 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId 		= each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
							else
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue


		LoadPayablesVertexAdditionalFields
			if (TaxEntityUsesVertex)
				if (IsHSNSACCodeEnabled)
					CalculateTaxAP.CommodityCodeType      	= "HSN"
					CalculateTaxAP.HSNSACCode				= HSNSACCode
				else
					CalculateTaxAP.CommodityCodeType      	= "UNSPSC"
					CalculateTaxAP.UNSPSCCode				= UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay

				if (ExtendedAmount < 0)
					CalculateTaxAP.DocumentType				= "CreditMemo"
				else
					CalculateTaxAP.DocumentType				= "Invoice"

				if (IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldExist)
					initialize Idx
					for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered            
						or  each.ExternalValue entered)
							increment Idx
							CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 			= each.VertexFlexibleCode.FieldId
							CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.PayableEntity.Company
							else
							if (each.ExternalValue.ValueIs.Description)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
							else
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.PayableEntity.Vendor
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = IntercompanyBillingDocumentHeader.DocumentCurrency
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UnitPrice
							else
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.CustomerType)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.Project)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.Project
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxCategory
							else
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxUsageCode
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesExpenseAccount.FinanceDimension10
							else
								CalculateTaxAP.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code
					
					initialize Idx
					for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							increment Idx
							CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId 		= each.VertexFlexibleNumeric.FieldId 
							CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.Company)
								CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = IntercompanyBillingDocumentHeader.PayableEntity.Company
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesExpenseAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesExpenseAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = UnitPrice
								CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 8
							else
								CalculateTaxAP.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

					initialize Idx
					for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered            
						or  each.ExternalValue entered)
							increment Idx 
							CalculateTaxAP.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId 			= each.VertexFlexibleDate.FieldId 
							CalculateTaxAP.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTaxAP.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTaxAP.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
							else
								CalculateTaxAP.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

				


		DoReceivableRevenueAccountDefaulting				
			if (LocalDistributionAccount.Ledger not entered)
				LocalDistributionAccount.Ledger						= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.Ledger
	
			if (LocalDistributionAccount.ToAccountingEntity not entered)
				LocalDistributionAccount.ToAccountingEntity			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.ToAccountingEntity
		
			if (LocalDistributionAccount.AccountingUnit not entered)
				LocalDistributionAccount.AccountingUnit				= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.AccountingUnit
		
			if (LocalDistributionAccount.GeneralLedgerChartAccount not entered)
				LocalDistributionAccount.GeneralLedgerChartAccount	= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.GeneralLedgerChartAccount
		
			if (LocalDistributionAccount.Project not entered)
				LocalDistributionAccount.Project					= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.Project
								
			if (LocalDistributionAccount.FinanceDimension1 not entered)
				LocalDistributionAccount.FinanceDimension1			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension1
		
			if (LocalDistributionAccount.FinanceDimension2 not entered)
				LocalDistributionAccount.FinanceDimension2			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension2
								
			if (LocalDistributionAccount.FinanceDimension3 not entered)
				LocalDistributionAccount.FinanceDimension3			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension3
		
			if (LocalDistributionAccount.FinanceDimension4 not entered)
				LocalDistributionAccount.FinanceDimension4			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension4
		
			if (LocalDistributionAccount.FinanceDimension5 not entered)
				LocalDistributionAccount.FinanceDimension5			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension5
		
			if (LocalDistributionAccount.FinanceDimension6 not entered)
				LocalDistributionAccount.FinanceDimension6			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension6
		
			if (LocalDistributionAccount.FinanceDimension7 not entered)
				LocalDistributionAccount.FinanceDimension7			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension7
		
			if (LocalDistributionAccount.FinanceDimension8 not entered)
				LocalDistributionAccount.FinanceDimension8			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension8
		
			if (LocalDistributionAccount.FinanceDimension9 not entered)
				LocalDistributionAccount.FinanceDimension9			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension9
		
			if (LocalDistributionAccount.FinanceDimension10 not entered)
				LocalDistributionAccount.FinanceDimension10			= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel.AccountingUnitFinanceCodeBlock.FinanceDimension10


		DoPayablesExpenseAccountDefaulting
			if (LocalDistributionAccount.Ledger not entered)
				LocalDistributionAccount.Ledger						= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.Ledger
	
			if (LocalDistributionAccount.ToAccountingEntity not entered)
				LocalDistributionAccount.ToAccountingEntity			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.ToAccountingEntity
	
			if (LocalDistributionAccount.AccountingUnit not entered)
				LocalDistributionAccount.AccountingUnit				= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.AccountingUnit
	
			if (LocalDistributionAccount.GeneralLedgerChartAccount not entered)
				LocalDistributionAccount.GeneralLedgerChartAccount	= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.GeneralLedgerChartAccount
	
			if (LocalDistributionAccount.Project not entered)
				LocalDistributionAccount.Project					= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.Project
							
			if (LocalDistributionAccount.FinanceDimension1 not entered)
				LocalDistributionAccount.FinanceDimension1			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension1
	
			if (LocalDistributionAccount.FinanceDimension2 not entered)
				LocalDistributionAccount.FinanceDimension2			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension2
							
			if (LocalDistributionAccount.FinanceDimension3 not entered)
				LocalDistributionAccount.FinanceDimension3			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension3
	
			if (LocalDistributionAccount.FinanceDimension4 not entered)
				LocalDistributionAccount.FinanceDimension4			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension4
	
			if (LocalDistributionAccount.FinanceDimension5 not entered)
				LocalDistributionAccount.FinanceDimension5			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension5
	
			if (LocalDistributionAccount.FinanceDimension6 not entered)
				LocalDistributionAccount.FinanceDimension6			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension6
	
			if (LocalDistributionAccount.FinanceDimension7 not entered)
				LocalDistributionAccount.FinanceDimension7			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension7
	
			if (LocalDistributionAccount.FinanceDimension8 not entered)
				LocalDistributionAccount.FinanceDimension8			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension8
	
			if (LocalDistributionAccount.FinanceDimension9 not entered)
				LocalDistributionAccount.FinanceDimension9			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension9
	
			if (LocalDistributionAccount.FinanceDimension10 not entered)
				LocalDistributionAccount.FinanceDimension10			= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel.ICBillingDefaultExpenseAccount.FinanceDimension10


	Derived Fields
		DerivedInvoicedTaxAmount is a DerivedField
			type is like InternationalAmount
			if (Taxable)

				if (AccruedOrInvoiced.Invoiced)
					return TaxAmount

		DerivedAccruedTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Taxable)

				if (AccruedOrInvoiced.Accrued)
					return TaxAmount

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is like FinanceEnterpriseGroup
			restricted
			return actor.context.FinanceEnterpriseGroup	

		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"IntercompanyBillingDocumentLine"
			":"
			CurrentTimestamp

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

		IntercompanyBillingDocumentLineFormTitle is a DerivedField
			type is Alpha 60
			if (IntercompanyBillingDocumentLine exists)
				return "Intercompany Billing Document Line " + IntercompanyBillingDocumentLine
			else
				return "Intercompany Billing Document Line"

		DerivedDetailedLineDescription is a DerivedField 
			type is like Description
			restricted
			if (Description entered)
				return "Line " + IntercompanyBillingDocumentLine + " - " + Description
			else
				return "Line " + IntercompanyBillingDocumentLine
			
		DerivedDetailedWithholdingDescription is a DerivedField 
			type is like Description
			restricted
			if (Description entered)
				return "Line " + IntercompanyBillingDocumentLine + " Withholding - " + RechargeItem + " - " + Description
			else
				return "Line " + IntercompanyBillingDocumentLine + " Withholding - " + RechargeItem

		DerivedDetailedSecondaryWithholdingDescription is a DerivedField 
			type is like Description
			restricted
			if (Description entered)
				return "Line " + IntercompanyBillingDocumentLine + " Secondary Withholding - " + RechargeItem + " - " + Description
			else
				return "Line " + IntercompanyBillingDocumentLine + " Secondary Withholding - " + RechargeItem

		DerivedDetailedTaxDescription is a DerivedField 
			type is like Description
			restricted
			if (Description entered)
				return "Line " + IntercompanyBillingDocumentLine + " Tax - " + RechargeItem + " - " + Description
			else
				return "Line " + IntercompanyBillingDocumentLine + " Tax - " + RechargeItem 

		FromCountry is a DerivedField
			type is like Country
			if (IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation entered)
				return IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress.Country
			else
				return IntercompanyBillingDocumentHeader.PayableEntity.Vendor.CurrentAddressRel.PostalAddress.Country

		ToCountry is a DerivedField
			type is like Country
	 		if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo entered)
				return IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.Country
			else
				return IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.Country

		ForeignIndicatorFlag is a DerivedField
			type is Boolean
			restricted

			if (FromCountry not = ToCountry)
				return true
			
			return false

		DerivedLineNumber is a DerivedField
			type is Numeric 3
			return IntercompanyBillingDocumentLine

		DerivedExtendedAmount is a DerivedField
			type is like InternationalAmount
			return ExtendedAmount

		DerivedTaxAmount is a DerivedField
			type is like InternationalAmount
			return TaxAmount
			
		DerivedTotalAmount is a DerivedField
			type is like InternationalAmount
			return (ExtendedAmount + TaxAmount)

		DerivedTotalDue is a DerivedField
			type is like InternationalAmount
			return ((ExtendedAmount + TaxAmount) - WithholdingAmount - SecondaryWithholdingAmount)

		DerivedExtendedAmountInPayableCurrency is a DerivedField
			type is like InternationalAmount
			FromCurrency							= IntercompanyBillingDocumentHeader.DocumentCurrency
			CurrencyTable							= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyTable
			TransactionAmount						= ExtendedAmount
			initialize CurrencyWork
			CurrencyWork.ToCurrency					= IntercompanyBillingDocumentHeader.PayableEntity.Company.Currency
			CurrencyWork.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
			return CurrencyWork.OutputCurrencyAmount

		DerivedLocalExpenseDistribAmountInPayableCurrency is a DerivedField
			type is like InternationalAmount
			FromCurrency							= IntercompanyBillingDocumentHeader.DocumentCurrency
			CurrencyTable							= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyTable
			TransactionAmount						= LocalDistributionAmount
			initialize CurrencyWork
			CurrencyWork.ToCurrency					= IntercompanyBillingDocumentHeader.PayableEntity.Company.Currency
			CurrencyWork.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
			return CurrencyWork.OutputCurrencyAmount

		DerivedTaxAmountInPayableCurrency is a DerivedField
			type is like InternationalAmount
			FromCurrency							= IntercompanyBillingDocumentHeader.DocumentCurrency
			CurrencyTable							= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyTable
			TransactionAmount						= LocalTaxAmount
			initialize CurrencyWork
			CurrencyWork.ToCurrency					= IntercompanyBillingDocumentHeader.PayableEntity.Company.Currency
			CurrencyWork.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
			return CurrencyWork.OutputCurrencyAmount

		DerivedWithholdingAmountInPayableCurrency is a DerivedField
			type is like InternationalAmount
			FromCurrency							= IntercompanyBillingDocumentHeader.DocumentCurrency
			CurrencyTable							= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyTable
			TransactionAmount						= WithholdingAmount
			initialize CurrencyWork
			CurrencyWork.ToCurrency					= IntercompanyBillingDocumentHeader.PayableEntity.Company.Currency
			CurrencyWork.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
			return CurrencyWork.OutputCurrencyAmount

		DerivedSecondaryWithholdingAmountInPayableCurrency is a DerivedField
			type is like InternationalAmount
			FromCurrency							= IntercompanyBillingDocumentHeader.DocumentCurrency
			CurrencyTable							= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyTable
			TransactionAmount						= SecondaryWithholdingAmount
			initialize CurrencyWork
			CurrencyWork.ToCurrency					= IntercompanyBillingDocumentHeader.PayableEntity.Company.Currency
			CurrencyWork.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
			return CurrencyWork.OutputCurrencyAmount

		BlankField5 is a DerivedField
			type is Alpha 5
			return blank

		DerivedTotalPayablesCompanyCurrencyTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is IntercompanyBillingDocumentHeader.PayableEntity.Company.Currency.NumberOfDecimals
			FromCurrency							= IntercompanyBillingDocumentHeader.DocumentCurrency
			CurrencyTable							= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyTable
			TransactionAmount						= sum PayableBillingDocumentTaxRel.TaxAmount
			initialize CurrencyWork
			CurrencyWork.ToCurrency					= IntercompanyBillingDocumentHeader.PayableEntity.Company.Currency
			CurrencyWork.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
			return CurrencyWork.OutputCurrencyAmount

		DerivedTotalReceivablesCompanyCurrencyTaxAmount is a DerivedField
			type is like InternationalAmount
				precision is IntercompanyBillingDocumentHeader.ReceivableEntity.Company.Currency.NumberOfDecimals
			FromCurrency							= IntercompanyBillingDocumentHeader.DocumentCurrency
			CurrencyTable							= IntercompanyBillingDocumentHeader.ReceivableEntity.CurrencyTable
			TransactionAmount						= sum ReceivableBillingDocumentTaxRel.TaxAmount
			initialize CurrencyWork
			CurrencyWork.ToCurrency					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.Currency
			CurrencyWork.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.ReceivableEntity.CurrencyExchangeRate
			return CurrencyWork.OutputCurrencyAmount

		DerivedPayablesTaxCode is a DerivedField
			type is like TaxCode
			if (AlternatePayablesTaxCode entered)
				return AlternatePayablesTaxCode
			else
				return TaxCode

		DerivedReceivablesTaxCode is a DerivedField
			type is like TaxCode
			return TaxCode




		ReceivableCompanyCountry is a DerivedField
			type is like Country
			return IntercompanyBillingDocumentHeader.ReceivableEntity.Company.ICBillingDefaultCustomer.PostalAddress.Country
			
		PayableCompanyCountry is a DerivedField
			type is like Country
			return IntercompanyBillingDocumentHeader.PayableEntity.Company.ICBillingDefaultVendor.CurrentAddressRel.PostalAddress.Country

		DerivedTotalReceivablesDistributionAmount is a DerivedField
			type is like InternationalAmount
			return sum BillingDocumentDistributionReceivablesRel.DistributionAmount

		DerivedTotalPayablesDistributionAmount is a DerivedField
			type is like InternationalAmount
			return sum BillingDocumentDistributionPayablesRel.DistributionAmount

		RevenueDistribsOutOfBalanceAmount is a DerivedField
			type is like CurrencyAmount
			return (DerivedTotalReceivablesDistributionAmount - ExtendedAmount)

		ExpenseDistribsOutOfBalanceAmount is a DerivedField
			type is like CurrencyAmount
			return (DerivedTotalPayablesDistributionAmount - ExtendedAmount)

		RevenueOrExpenseDistribsOutOfBalanceMessage is a DerivedField
			type is Alpha 50
			if (RevenueDistribsOutOfBalance)
				return "RevenueDistributionsAreOutOfBalance"
			else
				return "ExpenseDistributionsAreOutOfBalance"

	Actions
        Create is a Create Action
			valid when (CreateAllowed)
			Field Rules
				RechargeItem
					if (IntercompanyBillingDocumentHeader.OriginatedFrom.ManualEntry)
						constraint (RechargeItem.Active)
							"RechargeItemIsInactive"
				Taxable
					if (!IntercompanyBillingDocumentHeader.OriginatedFrom.ManualEntry)
						default to RechargeItem.Taxable

				ReceivablesDistributionCode
					default to RechargeItem.ReceivablesDistributionCode
				
				PayablesDistributionCode
					default to RechargeItem.PayablesDistributionCode
			
			Action Rules



				constraint (IntercompanyBillingDocumentHeader.Status.Unreleased)  
					"CanOnlyAddIntercompanyBillingDocumentLineWhenDocumentIsUnreleased"
				
				if (IntercompanyBillingDocumentHeader.OriginatedFrom.ManualEntry
				and !BillingDocumentLineRel exists)

					invoke SetAccrualCodes

			Exit Rules
				if (Taxable)
					invoke CalculateTax

				if ((TaxEntityUsesOneSource
				or  CallVertexByTransaction)
				and HasOriginatingTransaction)
					invoke CreateTaxLineItem

				if (WithholdingLineItem)
					WithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.WithholdingPercent)
				if (HasSecondaryWithholding)
					SecondaryWithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.SecondaryWithholdingPercent)
					
				if (!InterfaceRevenueExpenseDistributions)
					if (ReceivablesDistributionCode entered)
						LocalDistributionCode = ReceivablesDistributionCode
						for each IntercompanyBillingDistributionCodeDetailRel
							LocalDistributionAccount = each.DistributionAccount
							include DoReceivableRevenueAccountDefaulting
							LocalDistributionAmount = (ExtendedAmount * each.DistributionPercent)
							invoke CreateRevenueDistribution IntercompanyBillingDocumentDistribution
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
								invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								invoked.Type								= "R" 
								invoked.Description							= each.Description
								invoked.GeneralLedgerAccount				= LocalDistributionAccount
								invoked.DistributionAmount					= LocalDistributionAmount
					else			
						invoke CreateRevenueDistribution IntercompanyBillingDocumentDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.Type								= "R" 
							invoked.Description							= blank
							invoked.GeneralLedgerAccount				= ReceivablesRevenueAccount
							invoked.DistributionAmount					= ExtendedAmount
							
					if (PayablesDistributionCode entered)
						LocalDistributionCode = PayablesDistributionCode
						for each IntercompanyBillingDistributionCodeDetailRel
							LocalDistributionAccount = each.DistributionAccount
							include DoPayablesExpenseAccountDefaulting
							LocalDistributionAmount = (ExtendedAmount * each.DistributionPercent)
							invoke CreateExpenseDistribution IntercompanyBillingDocumentDistribution
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
								invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								invoked.Type								= "P" 
								invoked.Description							= each.Description
								invoked.GeneralLedgerAccount				= LocalDistributionAccount
								invoked.DistributionAmount					= LocalDistributionAmount
					else			
						invoke CreateExpenseDistribution IntercompanyBillingDocumentDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.Type								= "P" 
							invoked.Description							= blank
							invoked.GeneralLedgerAccount				= PayablesExpenseAccount
							invoked.DistributionAmount					= ExtendedAmount
						
				if (!HasOriginatingTransaction) 
					invoke UpdateHeaderTotalsAndAmounts IntercompanyBillingDocumentHeader
					
					include UpdateHeaderInvoice
        				
		Update is an Update Action
			valid when (HeaderUnreleased)
			Exit Rules
				if (RechargeItem changed
				or  Quantity changed
				or  UnitPrice changed)
					confirmation required
						"ExistingDistributionsWillBeDeletedAndNewDistributionsWillBeCreated.Continue?"
					invoke RedoDistributions
				else
					if (ReceivablesDistributionCode changed)
						if (ReceivablesDistributionCode not entered)
							confirmation required
								"RemovingTheReceivableDistributionCodeWillRemoveAllExistingRevenueDistributionsAndAddTheSingleReceivableRevenueAccountFromTheRechargeItem.Continue?"
							invoke Delete BillingDocumentDistributionReceivablesRel
							invoke CreateRevenueDistribution IntercompanyBillingDocumentDistribution
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
								invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								invoked.Type								= "R" 
								invoked.Description							= blank
								invoked.GeneralLedgerAccount				= ReceivablesRevenueAccount
								invoked.DistributionAmount					= ExtendedAmount
						else
							confirmation required
								"ChangingTheReceivableDistributionCodeWillRemoveAllExistingRevenueDistributionsAndCreateNewOnesFromTheUpdatedCode.Continue?"
							invoke Delete BillingDocumentDistributionReceivablesRel
							LocalDistributionCode = ReceivablesDistributionCode
							for each IntercompanyBillingDistributionCodeDetailRel
								LocalDistributionAccount = each.DistributionAccount
								include DoReceivableRevenueAccountDefaulting
								LocalDistributionAmount = (ExtendedAmount * each.DistributionPercent)
								invoke CreateRevenueDistribution IntercompanyBillingDocumentDistribution
									invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
									invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
									invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
									invoked.Type								= "R" 
									invoked.Description							= each.Description
									invoked.GeneralLedgerAccount				= LocalDistributionAccount
									invoked.DistributionAmount					= LocalDistributionAmount
							
					if (PayablesDistributionCode changed)
						if (PayablesDistributionCode not entered)
							confirmation required
								"RemovingThePayablesDistributionCodeWillRemoveAllExistingExpenseDistributionsAndAddTheSinglePayablesExpenseAccountFromTheRechargeItem.Continue?"
							invoke Delete BillingDocumentDistributionPayablesRel
							invoke CreateExpenseDistribution IntercompanyBillingDocumentDistribution
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
								invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								invoked.Type								= "P" 
								invoked.Description							= blank
								invoked.GeneralLedgerAccount				= PayablesExpenseAccount
								invoked.DistributionAmount					= ExtendedAmount
						else
							confirmation required
								"ChangingThePayablesDistributionCodeWillRemoveAllExistingExpenseDistributionsAndCreateNewOnesFromTheUpdatedCode.Continue?"
							invoke Delete BillingDocumentDistributionPayablesRel
							LocalDistributionCode = PayablesDistributionCode
							for each IntercompanyBillingDistributionCodeDetailRel
								LocalDistributionAccount = each.DistributionAccount
								include DoPayablesExpenseAccountDefaulting
								LocalDistributionAmount = (ExtendedAmount * each.DistributionPercent)
								invoke CreateExpenseDistribution IntercompanyBillingDocumentDistribution
									invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
									invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
									invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
									invoked.Type								= "P" 
									invoked.Description							= each.Description
									invoked.GeneralLedgerAccount				= LocalDistributionAccount
									invoked.DistributionAmount					= LocalDistributionAmount

				if (Taxable changed)
					if (!Taxable)
						initialize TaxAmount
						initialize TaxRate
						initialize ReturnedTaxable

						invoke Delete IntercompanyBillingDocumentTax set
						if (TaxEntityUsesOneSource
						or  CallVertexByTransaction)
							invoke Purge TaxLineItemRel
					else
						invoke CalculateTax
				else
					if  (Taxable		
					and (RechargeItem changed
					or   Quantity changed
					or   UnitPrice changed
					or   TaxCode changed
					or   AlternatePayablesTaxCode changed
					or   TaxCategory changed
					or   TaxUsageCode changed))
						invoke CalculateTax

				if (WithholdingLineItem)
					WithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.WithholdingPercent)
				if (HasSecondaryWithholding)
					SecondaryWithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.SecondaryWithholdingPercent)
					
				invoke UpdateHeaderTotalsAndAmounts IntercompanyBillingDocumentHeader
					
				include UpdateHeaderInvoice
		
        Delete is a Purge Action
        	valid when (DeleteAllowed)
			Entrance Rules
				if (TaxEntityUsesOneSource
				or  CallVertexByTransaction)
					invoke Purge TaxLineItemRel
			Exit Rules
				invoke UpdateHeaderTotalsAndAmounts IntercompanyBillingDocumentHeader
					
				include UpdateHeaderInvoice


        CalculateTax is an Instance Action
        	restricted

        	Action Rules

				if (!TaxEntityUsesOneSource 
				and !CallVertexByTransaction
				and !BypassCalculateTax)

					constraint (IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity.TaxEntity.ThirdParty = IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity.TaxEntity.ThirdParty)
						"BothCompanyTaxEntitiesNeedToUseTheSameTaxSystem"




					invoke Delete IntercompanyBillingDocumentTax set
					ForeignIndicator						= ForeignIndicatorFlag

					initialize LocalARTaxAmount
					initialize LocalAPTaxAmount
					




					initialize CalculateTax
					CalculateTax.Function				= "C"  
					CalculateTax.ThirdPartyFunction		= "I"  
					CalculateTax.TransactionType		= "S"  
					CalculateTax.InputVertexRequest		= "Q"  
					CalculateTax.TransactionSource		= "O"	
					CalculateTax.System					= "AR"
					CalculateTax.IntercompanyBilling	= true	
					CalculateTax.CallingModule				= "IntercompanyBillingDocumentLine"
					CalculateTax.TaxEntity					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
					CalculateTax.InvoiceCompany				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
					CalculateTax.ProcessLevel				= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel
					CalculateTax.Quantity					= Quantity
					CalculateTax.Customer					= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
					CalculateTax.Location					= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo
					CalculateTax.Vendor						= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer 
					CalculateTax.ProductTaxCategory			= TaxCategory
					CalculateTax.TaxUsageCode				= TaxUsageCode
					CalculateTax.LineNumber					= IntercompanyBillingDocumentLine
					CalculateTax.TaxableAmount				= ExtendedAmount
					CalculateTax.TransactionCurrency		= IntercompanyBillingDocumentHeader.DocumentCurrency
					CalculateTax.NumberOfDecimals			= IntercompanyBillingDocumentHeader.DocumentCurrency.NumberOfDecimals
					
					if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo entered)
						CalculateTax.PostalAddress			= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress

					else
						CalculateTax.PostalAddress			= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress

					CalculateTax.TaxCode					= TaxCode 
					CalculateTax.Invoice					= IntercompanyBillingDocumentHeader
					if (IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation entered)
						CalculateTax.FromPostalAddress		= IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress

					else
						CalculateTax.FromPostalAddress		= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

					CalculateTax.FromTaxCode				= IntercompanyBillingDocumentHeader.PayableEntity.TaxCode	
					CalculateTax.ShipmentDate				= IntercompanyBillingDocumentHeader.InvoiceDate
					CalculateTax.InvoiceDate				= IntercompanyBillingDocumentHeader.InvoiceDate
					CalculateTax.PaymentDate				= IntercompanyBillingDocumentHeader.InvoiceDate
					CalculateTax.GeneralLedgerDate			= IntercompanyBillingDocumentHeader.PostDate
					CalculateTax.TaxPointDate				= IntercompanyBillingDocumentHeader.InvoiceDate
					

					if (IntercompanyBillingDocumentHeader.ReceivableEntity.CompanyCustomer.VATRegistrationNumber entered)
						CalculateTax.VATRegistrationCountry      		= IntercompanyBillingDocumentHeader.ReceivableEntity.CompanyCustomer.VATRegistrationCountry
						CalculateTax.VATRegistrationNumber				= IntercompanyBillingDocumentHeader.ReceivableEntity.CompanyCustomer.VATRegistrationNumber
					if (IntercompanyBillingDocumentHeader.PayableEntity.Vendor.VATRegistrationNumber entered)
						CalculateTax.FromVATRegistrationCountry  		= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.VATRegistrationCountry
						CalculateTax.FromVATRegistrationNumber			= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.VATRegistrationNumber

					CalculateTax.InputReturnVertexTaxIn		= "D"	

					include LoadReceivablesVertexAdditionalFields

					CalculateTax.JurisdictionResultsKey		= "AR:" + DefaultLookupKey
					CalculateTax.RelatedObjectReference     = reference to this instance	 

					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
					constraint (CalculateTax.OutputErrorNumber not entered) 
						"<CalculateTax.OutputErrorMessage>"
						








					TaxAmount							= CalculateTax.RoundedOutputTotalTaxAmount
					TaxRate								= CalculateTax.OutputTaxRate
					ReturnedTaxable						= CalculateTax.OutputTotalTaxable
					if (TaxCode not entered)
						TaxCode							= CalculateTax.TaxCode
					


					initialize ProcessType						
					if (CalculateTax.Imposition = "VAT"
					or  CalculateTax.ReturnedTaxType = "VAT")
						ProcessType						= 1
						VATInputTaxAmount			 	= TaxAmount
						RecoverableTaxAreaId 			= CalculateTax.OutputGeoCode
						RecoverableJurisLevel 			= CalculateTax.ReturnedJurisLevel
						RecoverableImpositionType 		= CalculateTax.Imposition	 
						
													
					I2 = 1
					while (I2 < 9)
						if (CalculateTax.TaxTable.TaxTableOutput[I2].TaxAmount entered
						or (CalculateTax.TaxTable.TaxTableOutput[I2].TaxCode entered
						and CalculateTax.TaxTable.TaxTableOutput[I2].TaxRate = 0
						and TaxEntityUsesInforTax))
							invoke Create IntercompanyBillingDocumentTax
								assign result to NewIntercompanyBillingDocumentTax
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
								invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								invoked.CalculatedFor						= 1  
								
								invoked.TaxAmount							= CalculateTax.TaxTable.TaxTableOutput[I2].TaxAmount 
								invoked.TaxRate								= CalculateTax.TaxTable.TaxTableOutput[I2].TaxRate 
								invoked.TaxableAmount						= CalculateTax.TaxTable.TaxTableOutput[I2].TaxableAmount 
								invoked.IsService					 		= CalculateTax.IsService
								if (CalculateTax.TaxTable.TaxTableOutput[I2].TaxPoint = "P")
									invoked.TaxCodeAccount					= CalculateTax.TaxTable.TaxTableOutput[I2].TaxOutputDueAccount
								else
									invoked.TaxCodeAccount					= CalculateTax.TaxTable.TaxTableOutput[I2].TaxOutputAccount
								invoked.CustomerTaxCode						= CalculateTax.TaxTable.TaxTableOutput[I2].TaxCode 

								invoked.ProcessType							= ProcessType	
								if (ForeignIndicator)
									invoked.ForeignOrDomestic			= 1
									invoked.ForeignRecoveryPercent		= RecoverablePercent 
								else
									invoked.ForeignOrDomestic			= 0
									invoked.DomesticRecoryPercent		= RecoverablePercent        			
								if (CalculateTax.Imposition = "VAT"
								or  CalculateTax.ReturnedTaxType = "VAT")	

									if (CalculateTax.RecoverablePercent > 0.000%)	
										invoked.ReceivableVATTreatment		= 1	
									else
										invoked.ReceivableVATTreatment		= 2
									invoked.RateClassificationText			= CalculateTax.RateClassificationText	
									invoked.InvoiceTextCode					= CalculateTax.InvoiceTextCode			  
									invoked.RecoverableAmount 				= CalculateTax.RecoverableAmount	 
									invoked.RecoverablePercent  			= CalculateTax.RecoverablePercent 
									invoked.UnrecoverableAmount				= CalculateTax.UnrecoverableAmount 								

									invoked.VATInputTaxAmount				= CalculateTax.RecoverableAmount
									invoked.RecoverableTaxAreaId			= RecoverableTaxAreaId 
									invoked.RecoverableJurisLevel 			= RecoverableJurisLevel
									invoked.RecoverableImpositionType 		= RecoverableImpositionType
									invoked.RecoverableDate  				= blank
									invoked.BlockingOverridePercent  		= blank	 
									invoked.PartialExemptRecvblOvrdPct 		= blank	 
								invoked.Imposition							= CalculateTax.TaxTable.TaxTableOutput[I2].ImpositionType 
								invoked.ReturnedTaxType						= CalculateTax.ReturnedTaxType
								invoked.InputOutputType						= CalculateTax.InputOutputType
								invoked.VertexVATType						= blank

							LocalARTaxAmount += NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxAmount
						I2 += 1			
			




					initialize CalculateTaxAP
					CalculateTaxAP.Function							= "C"  
					CalculateTaxAP.ThirdPartyFunction				= "I"  
					CalculateTaxAP.TransactionType					= "S"  
					CalculateTaxAP.InputVertexRequest				= "P"
					CalculateTaxAP.TransactionSource				= "I"	
					CalculateTaxAP.IntercompanyBilling				= true	
					CalculateTaxAP.System							= "AP"
					CalculateTaxAP.CallingModule					= "IntercompanyBillingDocumentLine"
					CalculateTaxAP.JurisdictionResultsKey			= "AP:" + DefaultLookupKey	 
					CalculateTaxAP.RelatedObjectReference 			= reference to this instance	
					CalculateTaxAP.TaxEntity						= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
					CalculateTaxAP.InvoiceCompany					= IntercompanyBillingDocumentHeader.PayableEntity.Company
					CalculateTaxAP.ProcessLevel						= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel
					CalculateTaxAP.Quantity							= Quantity
					CalculateTaxAP.Customer							= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
					CalculateTaxAP.Location							= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo
					CalculateTaxAP.Vendor							= IntercompanyBillingDocumentHeader.PayableEntity.Vendor
					CalculateTaxAP.ProductTaxCategory				= TaxCategory
					CalculateTaxAP.TaxUsageCode						= TaxUsageCode
					CalculateTaxAP.LineNumber						= IntercompanyBillingDocumentLine
					CalculateTaxAP.TaxableAmount					= ExtendedAmount
					CalculateTaxAP.TransactionCurrency				= IntercompanyBillingDocumentHeader.DocumentCurrency
					CalculateTaxAP.NumberOfDecimals					= IntercompanyBillingDocumentHeader.DocumentCurrency.NumberOfDecimals
					CalculateTaxAP.TaxAmount						= blank			

					if (ProcessType.VAT)
						CalculateTaxAP.RecoverableTaxAreaId 		= RecoverableTaxAreaId
						CalculateTaxAP.RecoverableJurisLevel 		= RecoverableJurisLevel
						CalculateTaxAP.RecoverableImpositionType 	= RecoverableImpositionType
						if (VATInputTaxAmount entered)
							CalculateTaxAP.VATInputTaxAmount		= VATInputTaxAmount
											
					if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo entered)
						CalculateTaxAP.PostalAddress				= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress

					else
						CalculateTaxAP.PostalAddress				= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress

					if (AlternatePayablesTaxCode entered)
						CalculateTaxAP.TaxCode						= AlternatePayablesTaxCode
					else
						CalculateTaxAP.TaxCode						= TaxCode 
					CalculateTaxAP.Invoice							= IntercompanyBillingDocumentHeader
					if (IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation entered)
						CalculateTaxAP.FromPostalAddress			= IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress

					else
						CalculateTaxAP.FromPostalAddress			= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

					CalculateTaxAP.FromTaxCode						= IntercompanyBillingDocumentHeader.PayableEntity.TaxCode	
					CalculateTaxAP.ShipmentDate						= IntercompanyBillingDocumentHeader.InvoiceDate
					CalculateTaxAP.InvoiceDate						= IntercompanyBillingDocumentHeader.InvoiceDate
					CalculateTaxAP.PaymentDate						= IntercompanyBillingDocumentHeader.InvoiceDate
					CalculateTaxAP.GeneralLedgerDate				= IntercompanyBillingDocumentHeader.PostDate
					if (IntercompanyBillingDocumentHeader.ReceivableEntity.CompanyCustomer.VATRegistrationNumber entered)
						CalculateTaxAP.VATRegistrationCountry      	= IntercompanyBillingDocumentHeader.ReceivableEntity.CompanyCustomer.VATRegistrationCountry
						CalculateTaxAP.VATRegistrationNumber		= IntercompanyBillingDocumentHeader.ReceivableEntity.CompanyCustomer.VATRegistrationNumber
					if (IntercompanyBillingDocumentHeader.PayableEntity.Vendor.VATRegistrationNumber entered)
						CalculateTaxAP.FromVATRegistrationCountry  	= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.VATRegistrationCountry
						CalculateTaxAP.FromVATRegistrationNumber	= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.VATRegistrationNumber

					CalculateTaxAP.InputReturnVertexTaxIn			= "D"	

					include LoadPayablesVertexAdditionalFields

					CalculateTaxAP.AppendToJurisFile				= true	
					LocalCalculateTaxExecuted						= CalculateTaxAP.ExecuteCalculateTax	
					constraint (CalculateTaxAP.OutputErrorNumber not entered) 					  
						"<CalculateTaxAP.OutputErrorMessage>"							
																																				

























					ReturnedTaxable						= CalculateTaxAP.OutputTotalTaxable
					AccruedOrInvoiced					= CalculateTaxAP.TaxTable.TaxTableOutput[1].AccrualFlag	
					if (ProcessType.NonVAT)				
						I2 = 1
						while (I2 < 9)
							if (CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxAmount entered
							or (CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxCode entered
							and CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxRate = 0
							and TaxEntityUsesInforTax))
								invoke Create IntercompanyBillingDocumentTax
									assign result to NewIntercompanyBillingDocumentTax
									invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
									invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
									invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
									invoked.CalculatedFor						= 2  
									invoked.TaxAmount							= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxAmount 
									invoked.TaxRate								= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxRate 
									invoked.TaxableAmount						= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxableAmount 
									invoked.IsService					 		= CalculateTaxAP.IsService
									invoked.ProcessType							= ProcessType
									invoked.VendorTaxCode						= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxCode 
									invoked.TaxCodeAccount						= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxInputAccount
									invoked.AccruedOrInvoiced					= CalculateTaxAP.TaxTable.TaxTableOutput[I2].AccrualFlag 
									invoked.LandCost						 	= CalculateTaxAP.TaxTable.TaxTableOutput[I2].LandCostFlag
									invoked.ProcessType							= ProcessType
									invoked.RateClassificationText				= CalculateTaxAP.RateClassificationText	
									invoked.InvoiceTextCode						= CalculateTaxAP.InvoiceTextCode			  
									invoked.RecoverablePercent  				= CalculateTaxAP.RecoverablePercent 
									invoked.RecoverableAmount 					= CalculateTaxAP.RecoverableAmount	 
									invoked.UnrecoverableAmount					= CalculateTaxAP.UnrecoverableAmount 					
									invoked.Imposition							= CalculateTaxAP.TaxTable.TaxTableOutput[I2].ImpositionType
									if (RecoverablePercent = 100.000%)
										VatRecoverable						= 0	
									else
										VatRecoverable						= 1	
									if (ForeignIndicator)
										invoked.ForeignOrDomestic				= 1
										if (RecoverablePercent = 100.000%)
											invoked.PayableForeignVATTreatment 	= 1
											invoked.ForeignRecoveryPercent		= RecoverablePercent
										else
											invoked.PayableForeignVATTreatment 	= 2
											invoked.ForeignRecoveryPercent		= RecoverablePercent 
									else
										invoked.ForeignOrDomestic				= 0	
										if (RecoverablePercent = 100.000%)
											invoked.PayableDomesticVATTreatment	= 1
											invoked.DomesticRecoryPercent		= RecoverablePercent 	
			
										else
											invoked.PayableDomesticVATTreatment	= 2
											invoked.DomesticRecoryPercent		= RecoverablePercent 
								
								LocalAPTaxAmount += NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxAmount

								if (AlternatePayablesTaxCode entered
								and CalculateTaxAP.TaxTable.TaxTableOutput[I2].AccrualFlag = "A"
								and CalculateTaxAP.ReverseCharge)
									LocalCalculateTaxExecuted = CalculateTaxAP.GetAccrualInfo
									if (CalculateTaxAP.ReturnedTaxAccrualAccount entered)
										invoke Create IntercompanyBillingDocumentTax
											fill in fields from NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax
												except invoked.TaxCodeAccount
												except invoked.TaxableAmount
												except invoked.TaxAmount
												except invoked.RecoverableAmount
												except invoked.UnrecoverableAmount
											invoked.TaxCodeAccount                               = CalculateTaxAP.ReturnedTaxAccrualAccount
											invoked.TaxableAmount                                = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxableAmount * -1
											invoked.TaxAmount                                    = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxAmount * -1
											invoked.RecoverableAmount                            = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.RecoverableAmount * -1
											invoked.UnrecoverableAmount                          = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.UnrecoverableAmount * -1
										
										LocalAPTaxAmount += NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxAmount * -1

							I2 += 1			
					else
					if (ProcessType.VAT)





						I2 = 1
						while (I2 < 9)
							if (CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxAmount entered
							or (CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxCode entered
							and CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxRate = 0
							and TaxEntityUsesInforTax))
								invoke Create IntercompanyBillingDocumentTax
									assign result to NewIntercompanyBillingDocumentTax
									invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
									invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
									invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
									invoked.CalculatedFor						= 2  
									invoked.TaxAmount							= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxAmount 
									invoked.TaxRate								= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxRate 
									invoked.TaxableAmount						= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxableAmount 
									invoked.IsService					 		= CalculateTaxAP.IsService
									invoked.ProcessType							= ProcessType
									invoked.RateClassificationText				= CalculateTaxAP.RateClassificationText	
									invoked.InvoiceTextCode						= CalculateTaxAP.InvoiceTextCode			  
									invoked.RecoverablePercent  				= CalculateTaxAP.RecoverablePercent
									invoked.RecoverableAmount 					= CalculateTaxAP.RecoverableAmount	 
									invoked.UnrecoverableAmount					= CalculateTaxAP.UnrecoverableAmount 	
									invoked.VendorTaxCode						= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxCode 

									if (VatRecoverable.Is100Percent)	
										if (ForeignIndicator									
										and CalculateTaxAP.ForeignRecoverableAccount entered) 	
											invoked.TaxCodeAccount					= CalculateTaxAP.ForeignRecoverableAccount	
										else
										if (CalculateTaxAP.RecoverableAccount entered) 
											invoked.TaxCodeAccount					= CalculateTaxAP.RecoverableAccount
										else
											invoked.TaxCodeAccount					= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxInputAccount
									else
										invoked.TaxCodeAccount					= CalculateTaxAP.TaxTable.TaxTableOutput[I2].TaxInputAccount	

									invoked.AccruedOrInvoiced					= CalculateTaxAP.TaxTable.TaxTableOutput[I2].AccrualFlag 
									invoked.LandCost						 	= CalculateTaxAP.TaxTable.TaxTableOutput[I2].LandCostFlag
									if (ForeignIndicator)
										invoked.ForeignOrDomestic				= 1
										if (RecoverablePercent = 100.000%)
											invoked.PayableForeignVATTreatment 	= 1
											invoked.ForeignRecoveryPercent		= RecoverablePercent
										else
											invoked.PayableForeignVATTreatment 	= 2
											invoked.ForeignRecoveryPercent		= RecoverablePercent 
									else
										invoked.ForeignOrDomestic				= 0	
										if (RecoverablePercent = 100.000%)
											invoked.PayableDomesticVATTreatment	= 1
											invoked.DomesticRecoryPercent		= RecoverablePercent 	
				
										else
											invoked.PayableDomesticVATTreatment	= 2
											invoked.DomesticRecoryPercent		= RecoverablePercent 	
									invoked.Imposition							= CalculateTaxAP.TaxTable.TaxTableOutput[I2].ImpositionType
								
								LocalAPTaxAmount += NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxAmount

								if (AlternatePayablesTaxCode entered
								and CalculateTaxAP.TaxTable.TaxTableOutput[I2].AccrualFlag = "A"
								and CalculateTaxAP.ReverseCharge)
									LocalCalculateTaxExecuted = CalculateTaxAP.GetAccrualInfo
									if (CalculateTaxAP.ReturnedTaxAccrualAccount entered)
										invoke Create IntercompanyBillingDocumentTax
											fill in fields from NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax
												except invoked.TaxCodeAccount
												except invoked.TaxableAmount
												except invoked.TaxAmount
												except invoked.RecoverableAmount
												except invoked.UnrecoverableAmount
											invoked.TaxCodeAccount                               = CalculateTaxAP.ReturnedTaxAccrualAccount
											invoked.TaxableAmount                                = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxableAmount * -1
											invoked.TaxAmount                                    = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxAmount * -1
											invoked.RecoverableAmount                            = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.RecoverableAmount * -1
											invoked.UnrecoverableAmount                          = NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.UnrecoverableAmount * -1
										
										LocalAPTaxAmount += NewIntercompanyBillingDocumentTax.IntercompanyBillingDocumentTax.TaxAmount * -1

							I2 += 1			

					if (AlternatePayablesTaxCode entered)
						constraint (LocalARTaxAmount = LocalAPTaxAmount)
							"Tax_\CodeAnd_\Alternate_\Payables_\Tax_\CodeMustHaveTheSameRate"

					if (!TaxConfigurationRel.DebugMode
					and !TaxConfigurationRel.WriteToLogFile)
						for each JurisdictionResultsRel
							invoke Purge each












































































































																	

		CreateReceivableDistributions is an Instance Action
			restricted
			Parameters
				PrmCreateReceivableInvoiceLineItem		is Boolean
			Local Fields
				LocalCreateDetailedLineItems 			is Boolean 
				LocalAssociatedLine						is like UniqueID 

			Action Rules

				initialize LocalCreateDetailedLineItems 
				if (!PrmCreateReceivableInvoiceLineItem)
					if (IntercompanyBillingGroup.CreateDetailedLineItems)
						LocalCreateDetailedLineItems = true
						initialize LocalAssociatedLine

				for each BillingDocumentDistributionReceivablesRel
					invoke CreateIntercompanyInvoiceDistribution ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup								= IntercompanyBillingGroup
						invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
						invoked.ReceivableCompanyDataGroup.TransactionCompany		= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel
						invoked.ReceivableCompanyDataGroup.Customer					= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
						invoked.ReceivableCompanyGroup.OriginCompany				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.ReceivableCompanyGroup.GlCompany					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.BatchNumber											= IntercompanyBillingDocumentHeader.BatchNumber
						invoked.TransType											= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType //"I"
						invoked.Invoice												= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.TransactionDate										= IntercompanyBillingDocumentHeader.InvoiceDate						
						invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
						invoked.Units												= Quantity
						invoked.Description											= Description
						if (PrmCreateReceivableInvoiceLineItem 
						or  LocalCreateDetailedLineItems)
							invoked.Description										= DerivedDetailedLineDescription
							LocalAssociatedLine 									= each.UniqueID
							invoked.AssociatedLine									= LocalAssociatedLine
						invoked.OriginalCurrency									= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= IntercompanyBillingDocumentHeader.ReceivableEntity.CurrencyExchangeRate
						invoked.DistributionAmount.CurrencyAmount					= (each.DistributionAmount * -1)
						invoked.GeneralLedgerAccount								= each.GeneralLedgerAccount
						invoked.LineType											= LineType
						invoked.Origin												= "RI"
						invoked.DistributionSource 									= "A"
						if (IntercompanyBillingDocumentHeader.ReceivableEntity.Company.GeneralLedgerCompany.RequireHSNSACCode)
							invoked.HSNSACCode										= HSNSACCode
						if  (Taxable
						and (CallVertexByTransaction
						or   TaxEntityUsesOneSource))
							invoked.LinkedTaxGroup.Indicator    					= "S"
							invoked.TaxOriginCrossReference							= IntercompanyBillingDocumentLine

					if (PrmCreateReceivableInvoiceLineItem
					or  LocalCreateDetailedLineItems)
						invoke Create ReceivableInvoiceLineItem
							invoked.Company											= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							invoked.ReceivableInvoiceType							= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType
							invoked.ReceivableInvoice								= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
							invoked.ItemReference									= IntercompanyBillingDocumentLine 
							invoked.AssociatedLine									= LocalAssociatedLine
							invoked.Description										= DerivedDetailedLineDescription
							if (IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType.MixedSignLines
							and IntercompanyBillingDocumentHeader.CreateCreditMemo)
								invoked.TransactionAmount							= (each.DistributionAmount * -1)
							else
								invoked.TransactionAmount							= each.DistributionAmount
							invoked.Project											= each.GeneralLedgerAccount.Project

				if (HasWithholdingAmount)
					invoke CreateIntercompanyInvoiceDistribution ReceivableGLDistribution
						assign result to NewReceivableGLDistribution
						invoked.FinanceEnterpriseGroup								= IntercompanyBillingGroup
						invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
						invoked.ReceivableCompanyDataGroup.TransactionCompany		= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel
						invoked.ReceivableCompanyDataGroup.Customer					= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
						invoked.ReceivableCompanyGroup.OriginCompany				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.ReceivableCompanyGroup.GlCompany					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.BatchNumber											= IntercompanyBillingDocumentHeader.BatchNumber
						invoked.TransType											= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType //"I"
						invoked.Invoice												= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.TransactionDate										= IntercompanyBillingDocumentHeader.InvoiceDate						
						invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
						invoked.Units												= Quantity
						invoked.Description											= "Withholding-" + RechargeItem 
						if (PrmCreateReceivableInvoiceLineItem 
						or  LocalCreateDetailedLineItems)
							invoked.Description										= DerivedDetailedWithholdingDescription
						invoked.OriginalCurrency									= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= IntercompanyBillingDocumentHeader.ReceivableEntity.CurrencyExchangeRate
						invoked.DistributionAmount.CurrencyAmount					= WithholdingAmount
						invoked.GeneralLedgerAccount								= ReceivableWithholdingAccount
						invoked.LineType											= LineType
						invoked.Origin												= "RI"
						invoked.DistributionSource 									= "A"
					
					if (PrmCreateReceivableInvoiceLineItem
					or  LocalCreateDetailedLineItems)
						LocalAssociatedLine = NewReceivableGLDistribution.UniqueID
						invoke ChangeAssociatedLine NewReceivableGLDistribution.ReceivableGLDistribution 
							invoked.PrmAssociatedLine								= LocalAssociatedLine
						invoke Create ReceivableInvoiceLineItem
							invoked.Company											= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							invoked.ReceivableInvoiceType							= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType
							invoked.ReceivableInvoice								= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
							invoked.AssociatedLine									= LocalAssociatedLine
							invoked.Description										= DerivedDetailedWithholdingDescription
							invoked.ItemReference									= IntercompanyBillingDocumentLine 
							invoked.TransactionAmount								= (WithholdingAmount * -1)
							invoked.Project											= ReceivableWithholdingAccount.Project

				if (HasSecondaryWithholdingAmount)
					invoke CreateIntercompanyInvoiceDistribution ReceivableGLDistribution
						assign result to NewReceivableGLDistribution
						invoked.FinanceEnterpriseGroup								= IntercompanyBillingGroup
						invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
						invoked.ReceivableCompanyDataGroup.TransactionCompany		= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel
						invoked.ReceivableCompanyDataGroup.Customer					= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
						invoked.ReceivableCompanyGroup.OriginCompany				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.ReceivableCompanyGroup.GlCompany					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
						invoked.BatchNumber											= IntercompanyBillingDocumentHeader.BatchNumber
						invoked.TransType											= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType //"I"
						invoked.Invoice												= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.TransactionDate										= IntercompanyBillingDocumentHeader.InvoiceDate						
						invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
						invoked.Units												= Quantity
						invoked.Description											= "SecondaryWithholding-" + RechargeItem 
						if (PrmCreateReceivableInvoiceLineItem 
						or  LocalCreateDetailedLineItems)
							invoked.Description										= DerivedDetailedSecondaryWithholdingDescription
						invoked.OriginalCurrency									= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= IntercompanyBillingDocumentHeader.ReceivableEntity.CurrencyExchangeRate
						invoked.DistributionAmount.CurrencyAmount					= SecondaryWithholdingAmount
						invoked.GeneralLedgerAccount								= SecondaryReceivableWithholdingAccount
						invoked.LineType											= LineType
						invoked.Origin												= "RI"
						invoked.DistributionSource 									= "A"
					
					if (PrmCreateReceivableInvoiceLineItem
					or  LocalCreateDetailedLineItems)
						LocalAssociatedLine = NewReceivableGLDistribution.UniqueID
						invoke ChangeAssociatedLine NewReceivableGLDistribution.ReceivableGLDistribution 
							invoked.PrmAssociatedLine								= LocalAssociatedLine
						invoke Create ReceivableInvoiceLineItem
							invoked.Company											= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							invoked.ReceivableInvoiceType							= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType
							invoked.ReceivableInvoice								= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
							invoked.AssociatedLine									= LocalAssociatedLine
							invoked.Description										= DerivedDetailedSecondaryWithholdingDescription
							invoked.ItemReference									= IntercompanyBillingDocumentLine 
							invoked.TransactionAmount								= (SecondaryWithholdingAmount * -1)
							invoked.Project											= SecondaryReceivableWithholdingAccount.Project
						
				if (Taxable)
					for each ReceivableBillingDocumentTaxRel
						invoke CreateIntercompanyInvoiceDistribution ReceivableGLDistribution
							invoked.FinanceEnterpriseGroup								= IntercompanyBillingGroup
							invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
							invoked.ReceivableCompanyDataGroup.TransactionCompany		= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= IntercompanyBillingDocumentHeader.ReceivableEntity.ProcessLevel
							invoked.ReceivableCompanyDataGroup.Customer					= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
							invoked.ReceivableCompanyGroup.OriginCompany				= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							invoked.ReceivableCompanyGroup.GlCompany					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
							invoked.BatchNumber											= IntercompanyBillingDocumentHeader.BatchNumber
							invoked.TransType											= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType //"I"
							invoked.Invoice												= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
							invoked.TransactionDate										= IntercompanyBillingDocumentHeader.InvoiceDate						
							invoked.GeneralLedgerDate									= IntercompanyBillingDocumentHeader.PostDate
							invoked.Description											= "Tax-" + RechargeItem
							if (PrmCreateReceivableInvoiceLineItem 
							or  LocalCreateDetailedLineItems)
								invoked.Description										= DerivedDetailedTaxDescription
								LocalAssociatedLine 									= each.UniqueID
								invoked.AssociatedLine									= LocalAssociatedLine
							invoked.OriginalCurrency									= IntercompanyBillingDocumentHeader.DocumentCurrency
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = IntercompanyBillingDocumentHeader.ReceivableEntity.CurrencyExchangeRate
							invoked.DistributionAmount.CurrencyAmount					= (each.TaxAmount * -1)
							invoked.GeneralLedgerAccount								= each.TaxCodeAccount
							invoked.TransactionTaxableAmount							= (each.TaxableAmount * -1)  
							invoked.TaxCode												= each.CustomerTaxCode 

							invoked.LineType											= LineType
							invoked.TaxOriginCrossReference								= IntercompanyBillingDocumentLine
							invoked.ProductTaxCategory									= TaxCategory

							invoked.ForeignOrDomestic									= each.ForeignOrDomestic		
							invoked.IsService					 						= each.IsService				
							invoked.Imposition					 						= each.Imposition
							invoked.RateClassificationText		 						= each.RateClassificationText
							invoked.ReturnedTaxType				   						= each.ReturnedTaxType
							invoked.InputOutputType				 						= each.InputOutputType
							invoked.InvoiceTextCode				  						= each.InvoiceTextCode.InvoiceTextCodeOut
							invoked.VertexVATType										= each.VertexVATType
							invoked.VATInputTaxAmount									= each.VATInputTaxAmount 	 
							invoked.RecoverableTaxAreaId								= each.RecoverableTaxAreaId
							invoked.RecoverableJurisLevel 								= each.RecoverableJurisLevel 
					  		invoked.RecoverableImpositionType 							= each.RecoverableImpositionType 
							invoked.RecoverablePercent  								= each.RecoverablePercent   
							invoked.RecoverableAmount 									= each.RecoverableAmount 
							invoked.UnrecoverableAmount 								= each.UnrecoverableAmount 			 
					  		invoked.RecoverableDate  									= blank 
							invoked.BlockingOverridePercent  							= blank 	 
							invoked.PartialExemptRecvblOvrdPct 							= blank 	 
							invoked.VertexSimplificationCode	 						= blank
							invoked.SummaryInvoiceTextOut		 						= blank  

							invoked.Origin												= "RI"
							invoked.DistributionSource 									= "A"
							if (IntercompanyBillingDocumentHeader.ReceivableEntity.Company.GeneralLedgerCompany.RequireHSNSACCode)
								invoked.HSNSACCode										= HSNSACCode
							if (CallVertexByTransaction
							or  TaxEntityUsesOneSource)
								invoked.LinkedTaxGroup.Indicator 						= "T"
								invoked.TaxOriginCrossReference							= IntercompanyBillingDocumentLine

						if (PrmCreateReceivableInvoiceLineItem
						or  LocalCreateDetailedLineItems)
							if (each.TaxAmount != 0)
								invoke Create ReceivableInvoiceLineItem
									invoked.Company											= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
									invoked.ReceivableInvoiceType							= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType
									invoked.ReceivableInvoice								= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
									invoked.AssociatedLine									= LocalAssociatedLine
									invoked.Description										= DerivedDetailedTaxDescription
									invoked.ItemReference									= IntercompanyBillingDocumentLine 
									if (IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoiceType.MixedSignLines  
									and IntercompanyBillingDocumentHeader.CreateCreditMemo)
										invoked.TransactionAmount								= each.TaxAmount * -1
									else
										invoked.TransactionAmount								= each.TaxAmount
									invoked.Project											= each.TaxCodeAccount.Project

					if (CallVertexByTransaction
					or  TaxEntityUsesOneSource)
						invoke CopyTaxLineItemToReceivableInvoice

							
		CreatePayablesDistributions is an Instance Action
			restricted
			Parameters
				PrmUseDetailedDescription		is Boolean 
        	Action Rules
				for each BillingDocumentDistributionPayablesRel
					invoke Create PayablesInvoiceDistribution
						invoked.PayablesInvoice						= IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice				 
						invoked.Company								= IntercompanyBillingDocumentHeader.PayableEntity.Company

						invoked.ProcessLevel						= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel
						invoked.Vendor								= IntercompanyBillingDocumentHeader.PayableEntity.Vendor
						invoked.Invoice								= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.DistributionType					= "D"
						invoked.DistributionAccount					= each.GeneralLedgerAccount
						invoked.DistributionReference				= blank				
						invoked.InvoiceCurrency						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.DistributionDate					= IntercompanyBillingDocumentHeader.PostDate
						invoked.Description							= Description
						if (PrmUseDetailedDescription)
							invoked.Description						= DerivedDetailedLineDescription 
		    			invoked.DistributionReference   			= blank	 
		    			invoked.AccrualCode             			= blank	 
						invoked.TaxAccountingEntity					= blank
						invoked.TaxIndicator						= blank
						invoked.TaxableAmount						= blank
						invoked.TaxCode								= blank
						invoked.TaxRate								= blank	
						invoked.TaxType								= blank	         
						invoked.GLTransactionAmount					= each.DistributionAmount
						invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount
						LocalDistributionAmount						= each.DistributionAmount
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= DerivedLocalExpenseDistribAmountInPayableCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
						invoked.Status								= 0
						invoked.LineType							= LineType
						if(IntercompanyBillingDocumentHeader.PayableEntity.Company.GeneralLedgerCompany.RequireHSNSACCode)		
							invoked.HSNSACCode						= HSNSACCode

				if (HasWithholdingAmount)
					invoke Create PayablesInvoiceDistribution
						invoked.PayablesInvoice						= IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice				 
						invoked.Company								= IntercompanyBillingDocumentHeader.PayableEntity.Company
						invoked.ProcessLevel						= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel
						invoked.Vendor								= IntercompanyBillingDocumentHeader.PayableEntity.Vendor
						invoked.Invoice								= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.DistributionType					= "D"
						invoked.DistributionAccount					= PayableWithholdingAccount 	
						invoked.DistributionReference				= blank				
						invoked.InvoiceCurrency						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.DistributionDate					= IntercompanyBillingDocumentHeader.PostDate
						invoked.Description							= "Withholding-" + RechargeItem 
		    			if (PrmUseDetailedDescription)
							invoked.Description						= DerivedDetailedWithholdingDescription
						invoked.DistributionReference   			= blank	 
		    			invoked.AccrualCode             			= blank	 
						invoked.TaxAccountingEntity					= blank
						invoked.TaxIndicator						= blank
						invoked.TaxableAmount						= blank
						invoked.TaxCode								= blank
						invoked.TaxRate								= blank	
						invoked.TaxType								= blank	         
						invoked.GLTransactionAmount					= (WithholdingAmount * -1)
						invoked.DistributionAmount.CurrencyAmount	= (WithholdingAmount * -1)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= (DerivedWithholdingAmountInPayableCurrency * -1)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
						invoked.Status								= 0
						invoked.LineType							= LineType		

				if (HasSecondaryWithholdingAmount)
					invoke Create PayablesInvoiceDistribution
						invoked.PayablesInvoice						= IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice				 
						invoked.Company								= IntercompanyBillingDocumentHeader.PayableEntity.Company
						invoked.ProcessLevel						= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel
						invoked.Vendor								= IntercompanyBillingDocumentHeader.PayableEntity.Vendor
						invoked.Invoice								= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.DistributionType					= "D"
						invoked.DistributionAccount					= SecondaryPayableWithholdingAccount 	
						invoked.DistributionReference				= blank				
						invoked.InvoiceCurrency						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.DistributionDate					= IntercompanyBillingDocumentHeader.PostDate
						invoked.Description							= "SecondaryWithholding-" + RechargeItem 
		    			if (PrmUseDetailedDescription)
							invoked.Description						= DerivedDetailedSecondaryWithholdingDescription
						invoked.DistributionReference   			= blank	 
		    			invoked.AccrualCode             			= blank	 
						invoked.TaxAccountingEntity					= blank
						invoked.TaxIndicator						= blank
						invoked.TaxableAmount						= blank
						invoked.TaxCode								= blank
						invoked.TaxRate								= blank	
						invoked.TaxType								= blank	         
						invoked.GLTransactionAmount					= (SecondaryWithholdingAmount * -1)
						invoked.DistributionAmount.CurrencyAmount	= (SecondaryWithholdingAmount * -1)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= (DerivedSecondaryWithholdingAmountInPayableCurrency * -1)
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
						invoked.Status								= 0
						invoked.LineType							= LineType		

				if (Taxable)
					for each PayableBillingDocumentTaxRel
						invoke Create PayablesInvoiceDistribution
							invoked.PayablesInvoice					= IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice		
							invoked.Company							= IntercompanyBillingDocumentHeader.PayableEntity.Company
							invoked.ProcessLevel					= IntercompanyBillingDocumentHeader.PayableEntity.ProcessLevel
							invoked.Vendor							= IntercompanyBillingDocumentHeader.PayableEntity.Vendor
							invoked.Invoice							= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice					
							invoked.DistributionType				= "D"
							invoked.DistributionReference			= blank					
							invoked.InvoiceCurrency					= IntercompanyBillingDocumentHeader.DocumentCurrency
							invoked.DistributionDate				= IntercompanyBillingDocumentHeader.PostDate
							invoked.Description						= "Tax-" + RechargeItem 
			    			if (PrmUseDetailedDescription)
								invoked.Description					= DerivedDetailedTaxDescription
							invoked.DistributionReference   		= blank						 
			    			invoked.AccrualCode             		= blank						 
							invoked.TaxableAmount					= each.TaxableAmount	
					 		invoked.TaxCode							= each.VendorTaxCode 
							invoked.TaxRate							= each.TaxRate	
							invoked.GLTransactionAmount				= each.TaxAmount
							invoked.DistributionAmount.CurrencyAmount	= (each.TaxAmount *-1)
							LocalTaxAmount							= each.TaxAmount		
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= DerivedTaxAmountInPayableCurrency
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= IntercompanyBillingDocumentHeader.PayableEntity.CurrencyExchangeRate
								 

							invoked.TaxType							= each.AccruedOrInvoiced	
							AccruedOrInvoiced						= each.AccruedOrInvoiced




							invoked.DistributionAccount				= each.TaxCodeAccount
							if (PayablesTaxCode.TaxType.TaxTableCode)
								invoked.TransientCalculateTax		= CalculateTax
								invoked.TaxIndicator				= 2
								invoked.DistributionAccount			= each.TaxCodeAccount	
							else	
								invoked.TaxIndicator				= 0
							invoked.Status							= 0
							invoked.LineType						= LineType
							invoked.TaxUsageCode					= TaxUsageCode
							invoked.ProductTaxCategory				= TaxCategory

							invoked.ForeignOrDomestic				= each.ForeignOrDomestic		
							invoked.IsService					 	= each.IsService				
							invoked.Imposition					 	= each.Imposition
							invoked.RateClassificationText		 	= each.RateClassificationText
							invoked.ReturnedTaxType				   	= each.ReturnedTaxType
							invoked.InputOutputType				 	= each.InputOutputType
							invoked.InvoiceTextCode				  	= each.InvoiceTextCode.InvoiceTextCodeOut
							invoked.VertexVATType					= each.VertexVATType
							invoked.VATInputTaxAmount				= each.VATInputTaxAmount 	 
							invoked.RecoverableTaxAreaId			= each.RecoverableTaxAreaId
							invoked.RecoverableJurisLevel 			= each.RecoverableJurisLevel 
					  		invoked.RecoverableImpositionType 		= each.RecoverableImpositionType 
							invoked.RecoverablePercent  			= each.RecoverablePercent   
							invoked.RecoverableAmount 				= each.RecoverableAmount 
							invoked.UnrecoverableAmount 			= each.UnrecoverableAmount 			 
					  		invoked.RecoverableDate  				= blank 
							invoked.BlockingOverridePercent  		= blank 	 
							invoked.PartialExemptRecvblOvrdPct 		= blank 	 
							invoked.VertexSimplificationCode	 	= blank
							invoked.SummaryInvoiceTextOut		 	= blank 

							if(IntercompanyBillingDocumentHeader.PayableEntity.Company.GeneralLedgerCompany.RequireHSNSACCode)		
								invoked.HSNSACCode					= HSNSACCode

					if (CallVertexByTransaction
					or  TaxEntityUsesOneSource)
						invoke CopyTaxLineItemToPayablesInvoice


		ResetLine is an Update Action
			restricted
			Action Rules
				initialize WithholdingAmount
				initialize ReceivableWithholdingAccount
				initialize PayableWithholdingAccount
				initialize SecondaryWithholdingAmount
				initialize SecondaryReceivableWithholdingAccount
				initialize SecondaryPayableWithholdingAccount
				initialize ReceivablesRevenueAccount
				initialize PayablesExpenseAccount
				initialize CashBasisAccount
				initialize SecondaryCashBasisAccount

				Taxable = RechargeItem.Taxable
				initialize TaxCode
				initialize AlternatePayablesTaxCode
			Exit Rules
				invoke RedoDistributions
				invoke Delete IntercompanyBillingDocumentTax set
				if (Taxable)
					invoke CalculateTax
				if (WithholdingLineItem)
					WithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.WithholdingPercent)
				if (HasSecondaryWithholding)
					SecondaryWithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.SecondaryWithholdingPercent)


		RedoDistributions is an Instance Action
			restricted
			Action Rules
				invoke Delete BillingDocumentDistributionReceivablesRel
				invoke Delete BillingDocumentDistributionPayablesRel
				if (ReceivablesDistributionCode entered)
					LocalDistributionCode = ReceivablesDistributionCode
					for each IntercompanyBillingDistributionCodeDetailRel
						LocalDistributionAccount = each.DistributionAccount
						include DoReceivableRevenueAccountDefaulting
						LocalDistributionAmount = (ExtendedAmount * each.DistributionPercent)
						invoke CreateRevenueDistribution IntercompanyBillingDocumentDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.Type								= "R" 
							invoked.Description							= each.Description
							invoked.GeneralLedgerAccount				= LocalDistributionAccount
							invoked.DistributionAmount					= LocalDistributionAmount
				else			
					invoke CreateRevenueDistribution IntercompanyBillingDocumentDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.Type								= "R" 
						invoked.Description							= blank
						invoked.GeneralLedgerAccount				= ReceivablesRevenueAccount
						invoked.DistributionAmount					= ExtendedAmount
						
				if (PayablesDistributionCode entered)
					LocalDistributionCode = PayablesDistributionCode
					for each IntercompanyBillingDistributionCodeDetailRel
						LocalDistributionAccount = each.DistributionAccount
						include DoPayablesExpenseAccountDefaulting
						LocalDistributionAmount = (ExtendedAmount * each.DistributionPercent)
						invoke CreateExpenseDistribution IntercompanyBillingDocumentDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.Type								= "P" 
							invoked.Description							= each.Description
							invoked.GeneralLedgerAccount				= LocalDistributionAccount
							invoked.DistributionAmount					= LocalDistributionAmount
				else			
					invoke CreateExpenseDistribution IntercompanyBillingDocumentDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.Type								= "P" 
						invoked.Description							= blank
						invoked.GeneralLedgerAccount				= PayablesExpenseAccount
						invoked.DistributionAmount					= ExtendedAmount


		SetAccrualCodes is an Instance Action
			restricted
			Action Rules
				if (RechargeItemAccrualRel exists)
					invoke Unreleased.Update IntercompanyBillingDocumentHeader
						invoked.ReceivableEntity.ReceivableGeneralLedgerCode	= RechargeItemAccrualRel.ReceivableGeneralLedgerCode
						invoked.PayableEntity.PayablesAccrualCode				= RechargeItemAccrualRel.PayablesAccrualCode
				else
					if (RechargeItemAccrualReceivableRel exists)
						invoke Unreleased.Update IntercompanyBillingDocumentHeader
							invoked.ReceivableEntity.ReceivableGeneralLedgerCode	= RechargeItemAccrualReceivableRel.ReceivableGeneralLedgerCode
					else
						if (RechargeItemAccrualPayableRel exists)
							invoke Unreleased.Update IntercompanyBillingDocumentHeader
								invoked.PayableEntity.PayablesAccrualCode			= RechargeItemAccrualPayableRel.PayablesAccrualCode

		RedoWithholding is an Instance Action
			restricted
			Action Rules
				if (!RechargeItemWithholdingRel exists)
					initialize WithholdingAmount
					initialize ReceivableWithholdingAccount
					initialize PayableWithholdingAccount
					initialize SecondaryWithholdingAmount
					initialize SecondaryReceivableWithholdingAccount
					initialize SecondaryPayableWithholdingAccount
				else
					WithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.WithholdingPercent)
					initialize ReceivableWithholdingAccount
					initialize PayableWithholdingAccount
					SecondaryWithholdingAmount = (DerivedTotalAmount * RechargeItemWithholdingRel.SecondaryWithholdingPercent)
					initialize SecondaryReceivableWithholdingAccount
					initialize SecondaryPayableWithholdingAccount


		CreateCashBasisDistributions is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup

			Action Rules
				GLTransDetailAmount				= WithholdingAmount
				GLTransDetailFunctionalAmount	= DerivedWithholdingAmountInPayableCurrency
				GLTransDetailAccount			= PayableWithholdingAccount
				GLTransDetailJournalizeGroup	= PrmJournalizeGroup

				invoke Create IntercompanyBillingDocumentDistribution
					invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
					invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
					invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							
				
				GLTransDetailAmount				= (WithholdingAmount * -1)
				GLTransDetailFunctionalAmount	= (DerivedWithholdingAmountInPayableCurrency * -1)
				GLTransDetailAccount			= CashBasisAccount
				
				invoke Create IntercompanyBillingDocumentDistribution
					invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
					invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
					invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine

				if (HasSecondaryWithholdingAmount)
					GLTransDetailAmount				= SecondaryWithholdingAmount
					GLTransDetailFunctionalAmount	= DerivedSecondaryWithholdingAmountInPayableCurrency
					GLTransDetailAccount			= SecondaryPayableWithholdingAccount
					GLTransDetailJournalizeGroup	= PrmJournalizeGroup
	
					invoke Create IntercompanyBillingDocumentDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								
					
					GLTransDetailAmount				= (SecondaryWithholdingAmount * -1)
					GLTransDetailFunctionalAmount	= (DerivedSecondaryWithholdingAmountInPayableCurrency * -1)
					GLTransDetailAccount			= SecondaryCashBasisAccount
					
					invoke Create IntercompanyBillingDocumentDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine

		CreateReversalCashBasisDistributions is an Instance Action		
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup

			Action Rules
				GLTransDetailAmount				= (WithholdingAmount * -1)
				GLTransDetailFunctionalAmount	= (DerivedWithholdingAmountInPayableCurrency * -1)
				GLTransDetailAccount			= PayableWithholdingAccount
				GLTransDetailJournalizeGroup	= PrmJournalizeGroup

				invoke Create IntercompanyBillingDocumentDistribution
					invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
					invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
					invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							
				
				GLTransDetailAmount				= WithholdingAmount
				GLTransDetailFunctionalAmount	= DerivedWithholdingAmountInPayableCurrency
				GLTransDetailAccount			= CashBasisAccount
				
				invoke Create IntercompanyBillingDocumentDistribution
					invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
					invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
					invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine

				if (HasSecondaryWithholdingAmount)
					GLTransDetailAmount				= (SecondaryWithholdingAmount * -1)
					GLTransDetailFunctionalAmount	= (DerivedSecondaryWithholdingAmountInPayableCurrency * -1)
					GLTransDetailAccount			= SecondaryPayableWithholdingAccount
					GLTransDetailJournalizeGroup	= PrmJournalizeGroup
	
					invoke Create IntercompanyBillingDocumentDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								
					
					GLTransDetailAmount				= SecondaryWithholdingAmount
					GLTransDetailFunctionalAmount	= DerivedSecondaryWithholdingAmountInPayableCurrency
					GLTransDetailAccount			= SecondaryCashBasisAccount
					
					invoke Create IntercompanyBillingDocumentDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine

		ReleaseAccountEdits is an Instance Action
			restricted
			Parameters
				SkipAccrualCodes	is Boolean
					
			Action Rules
				LocalGeneralLedgerSystemCode                        = "IB"
				if (!SkipAccrualCodes)  
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= ReceivableGeneralLedgerCodeRel.DistributionAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= ExtendedAmount
	
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= PayablesAccrualCodeDetailRel.DistributionAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= ExtendedAmount

				for each BillingDocumentDistributionReceivablesRel
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= each.GeneralLedgerAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= each.DistributionAmount
					
				for each BillingDocumentDistributionPayablesRel
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= each.GeneralLedgerAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= each.DistributionAmount

				if (HasWithholdingAmount)
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= ReceivableWithholdingAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= (WithholdingAmount * -1)
						
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= PayableWithholdingAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= (WithholdingAmount * -1)

					if (HasCashBasisAccount)
						invoke Create IntercompanyBillingTemporaryLineDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
							invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
							invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
							invoked.FinanceCodeBlock					= CashBasisAccount
							invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
							invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
							invoked.TransactionAmount					= (WithholdingAmount * -1)

				if (HasSecondaryWithholdingAmount)
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= SecondaryReceivableWithholdingAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= (SecondaryWithholdingAmount * -1)
						
					invoke Create IntercompanyBillingTemporaryLineDistribution
						invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
						invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
						invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
						invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
						invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
						invoked.FinanceCodeBlock					= SecondaryPayableWithholdingAccount
						invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
						invoked.TransactionAmount					= (SecondaryWithholdingAmount * -1)

					if (HasSecondaryCashBasisAccount)
						invoke Create IntercompanyBillingTemporaryLineDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup
							invoked.AccountingEntity					= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
							invoked.PostingDate							= IntercompanyBillingDocumentHeader.PostDate
							invoked.FinanceCodeBlock					= SecondaryCashBasisAccount
							invoked.TransactionDate						= IntercompanyBillingDocumentHeader.InvoiceDate
							invoked.CurrencyCode						= IntercompanyBillingDocumentHeader.DocumentCurrency
							invoked.TransactionAmount					= (SecondaryWithholdingAmount * -1)


		CreateTaxLineItems is a Set Action
			restricted
			Parameters
				PrmIntercompanyBillingGroup				is an IntercompanyBillingGroup
				PrmIntercompanyBillingDocumentHeader	is an IntercompanyBillingDocumentHeader
				PrmNeedsApproval						is Boolean
				PrmCalculateTaxOnly						is Boolean
			
			Local Fields
				LocalErrorOccurred						is Boolean
				LocalErrorMessage						is Alpha 150
				LocalAsyncId							is a AsyncActionRequest

			Instance Selection
				where (IntercompanyBillingGroup			= PrmIntercompanyBillingGroup
				and	IntercompanyBillingDocumentHeader 	= PrmIntercompanyBillingDocumentHeader)
			Action Rules
				
				Set Rules

					Entrance Rules

						invoke EditICBDocumentHeaderForOneSource PrmIntercompanyBillingDocumentHeader
							resume on error
								LocalErrorOccurred					= true
								LocalErrorMessage					= error message
					Exit Rules

						if (!LocalErrorOccurred)
							invoke CallOneSource PrmIntercompanyBillingDocumentHeader
								resume on error
									LocalErrorOccurred				= true
									LocalErrorMessage				= error message

						if (LocalErrorOccurred)
							invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
								if (PrmNeedsApproval)
									invoked.PrmBackgroundProcessing	= 5 
								else
								if (PrmCalculateTaxOnly)
									invoked.PrmBackgroundProcessing	= 8 
								else
									invoked.PrmBackgroundProcessing	= 2 
								invoked.PrmErrorMessage				= LocalErrorMessage
						else
							LocalAsyncId = current async action request id
							invoke ProcessOneSourceDocument IntercompanyBillingDocumentLine
								run after LocalAsyncId
								invoked.PrmIntercompanyBillingGroup				= PrmIntercompanyBillingGroup
								invoked.PrmIntercompanyBillingDocumentHeader	= PrmIntercompanyBillingDocumentHeader
								invoked.PrmNeedsApproval						= PrmNeedsApproval
								invoked.PrmCalculateTaxOnly						= PrmCalculateTaxOnly

				Instance Rules
					if (!LocalErrorOccurred)
						invoke CreateTaxLineItem
							resume on error
								LocalErrorOccurred	= true
								LocalErrorMessage	= error message

				
		ProcessOneSourceDocument is a Set Action
			restricted
			Parameters
				PrmIntercompanyBillingGroup				is an IntercompanyBillingGroup
				PrmIntercompanyBillingDocumentHeader	is an IntercompanyBillingDocumentHeader
				PrmNeedsApproval						is Boolean
				PrmCalculateTaxOnly						is Boolean
			
			Local Fields
				LocalErrorOccurred						is Boolean
				LocalErrorMessage						is Alpha 150
				LocalBackgroundGroup					is AlphaUpper up to 200
				LocalAsyncId							is a AsyncActionRequest

			Instance Selection
				where (IntercompanyBillingGroup			= PrmIntercompanyBillingGroup
				and	IntercompanyBillingDocumentHeader 	= PrmIntercompanyBillingDocumentHeader)
			Action Rules
				
				Set Rules
					Exit Rules
						if (LocalErrorOccurred)
							invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
								if (PrmNeedsApproval)
									invoked.PrmBackgroundProcessing	= 5 
								else
								if (PrmCalculateTaxOnly)
									invoked.PrmBackgroundProcessing	= 8 
								else
									invoked.PrmBackgroundProcessing	= 2 
								invoked.PrmErrorMessage				= LocalErrorMessage
						else
							invoke UpdateHeaderTotalsAndAmountsAndInitializeFields PrmIntercompanyBillingDocumentHeader
							invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
								if (PrmNeedsApproval)
									invoked.PrmBackgroundProcessing	= 6	
								else
								if (PrmCalculateTaxOnly)
									invoked.PrmBackgroundProcessing	= 0 
								else
									invoked.PrmBackgroundProcessing	= 1	

							if (PrmCalculateTaxOnly)
								if (PrmIntercompanyBillingDocumentHeader.IntercompanyBillingInvoice entered)
									invoke RegenerateBillingInvoice PrmIntercompanyBillingDocumentHeader
							
							if (!PrmCalculateTaxOnly)
								if (PrmNeedsApproval)
									invoke Unreleased.EditSubmitForApproval PrmIntercompanyBillingDocumentHeader
										resume on error
											LocalErrorOccurred		= true
											LocalErrorMessage		= error message
								else
									invoke Unreleased.EditRelease PrmIntercompanyBillingDocumentHeader
										resume on error
											LocalErrorOccurred		= true
											LocalErrorMessage		= error message

								if (LocalErrorOccurred)
									invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
										if (PrmNeedsApproval)
											invoked.PrmBackgroundProcessing	= 5 
										else
											invoked.PrmBackgroundProcessing	= 2 
										invoked.PrmErrorMessage				= LocalErrorMessage
								else
									LocalAsyncId = current async action request id
									if (PrmNeedsApproval)
										LocalBackgroundGroup = "ICBHeader-OneSourceFinishSubmitForApproval-" + PrmIntercompanyBillingDocumentHeader + "-" + current timestamp
										invoke OneSourceFinishSubmitForApproval PrmIntercompanyBillingDocumentHeader in background group (LocalBackgroundGroup)
											run after LocalAsyncId
											on error
												invoke Unreleased.OneSourceCleanUpOnError PrmIntercompanyBillingDocumentHeader
													invoked.PrmNeedsApproval 	= true
													invoked.PrmBackgroundGroup	= LocalBackgroundGroup
									else
										LocalBackgroundGroup = "ICBHeader-OneSourceFinishRelease-" + PrmIntercompanyBillingDocumentHeader + "-" + current timestamp
										invoke OneSourceFinishRelease PrmIntercompanyBillingDocumentHeader in background group (LocalBackgroundGroup)
											run after LocalAsyncId
											on error
												invoke Unreleased.OneSourceCleanUpOnError PrmIntercompanyBillingDocumentHeader
													invoked.PrmNeedsApproval 	= false
													invoked.PrmBackgroundGroup	= LocalBackgroundGroup
				
				Instance Rules
					if (!LocalErrorOccurred)
						invoke OneSourceCreateDocumentTax
							resume on error
								LocalErrorOccurred	= true
								LocalErrorMessage	= error message


		VertexCreateTaxLineItems is a Set Action
			restricted
			Parameters
				PrmIntercompanyBillingGroup				is an IntercompanyBillingGroup
				PrmIntercompanyBillingDocumentHeader	is an IntercompanyBillingDocumentHeader
				PrmNeedsApproval						is Boolean
				PrmCalculateTaxOnly						is Boolean
			
			Local Fields
				LocalErrorOccurred						is Boolean
				LocalErrorMessage						is Alpha 150
				LocalAsyncId							is a AsyncActionRequest

			Instance Selection
				where (IntercompanyBillingGroup			= PrmIntercompanyBillingGroup
				and	IntercompanyBillingDocumentHeader 	= PrmIntercompanyBillingDocumentHeader)
			Action Rules
				
				Set Rules
					Exit Rules

						if (!LocalErrorOccurred)
							invoke CallVertex PrmIntercompanyBillingDocumentHeader
								resume on error
									LocalErrorOccurred				= true
									LocalErrorMessage				= error message

						if (LocalErrorOccurred)
							invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
								if (PrmNeedsApproval)
									invoked.PrmBackgroundProcessing	= 5 
								else
								if (PrmCalculateTaxOnly)
									invoked.PrmBackgroundProcessing	= 8 
								else
									invoked.PrmBackgroundProcessing	= 2 
								invoked.PrmErrorMessage				= LocalErrorMessage
						else
							LocalAsyncId = current async action request id
							invoke ProcessVertexDocument IntercompanyBillingDocumentLine
								run after LocalAsyncId
								invoked.PrmIntercompanyBillingGroup				= PrmIntercompanyBillingGroup
								invoked.PrmIntercompanyBillingDocumentHeader	= PrmIntercompanyBillingDocumentHeader
								invoked.PrmNeedsApproval						= PrmNeedsApproval
								invoked.PrmCalculateTaxOnly						= PrmCalculateTaxOnly

				Instance Rules
					if (!LocalErrorOccurred)
						invoke CreateTaxLineItem
							resume on error
								LocalErrorOccurred	= true
								LocalErrorMessage	= error message


		ProcessVertexDocument is a Set Action
			restricted
			Parameters
				PrmIntercompanyBillingGroup				is an IntercompanyBillingGroup
				PrmIntercompanyBillingDocumentHeader	is an IntercompanyBillingDocumentHeader
				PrmNeedsApproval						is Boolean
				PrmCalculateTaxOnly						is Boolean
			
			Local Fields
				LocalErrorOccurred						is Boolean
				LocalErrorMessage						is Alpha 150
				LocalBackgroundGroup					is AlphaUpper up to 200
				LocalAsyncId							is a AsyncActionRequest

			Instance Selection
				where (IntercompanyBillingGroup			= PrmIntercompanyBillingGroup
				and	IntercompanyBillingDocumentHeader 	= PrmIntercompanyBillingDocumentHeader)
			Action Rules
				
				Set Rules
					Exit Rules
						if (LocalErrorOccurred)
							invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
								if (PrmNeedsApproval)
									invoked.PrmBackgroundProcessing	= 5 
								else
								if (PrmCalculateTaxOnly)
									invoked.PrmBackgroundProcessing	= 8 
								else
									invoked.PrmBackgroundProcessing	= 2 
								invoked.PrmErrorMessage				= LocalErrorMessage
						else
							invoke UpdateHeaderTotalsAndAmountsAndInitializeFields PrmIntercompanyBillingDocumentHeader
							invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
								if (PrmNeedsApproval)
									invoked.PrmBackgroundProcessing	= 6	
								else
								if (PrmCalculateTaxOnly)
									invoked.PrmBackgroundProcessing	= 0 
								else
									invoked.PrmBackgroundProcessing	= 1	

							if (PrmCalculateTaxOnly)
								if (PrmIntercompanyBillingDocumentHeader.IntercompanyBillingInvoice entered)
									invoke RegenerateBillingInvoice PrmIntercompanyBillingDocumentHeader
							
							if (!PrmCalculateTaxOnly)
								if (PrmNeedsApproval)
									invoke Unreleased.EditSubmitForApproval PrmIntercompanyBillingDocumentHeader
										resume on error
											LocalErrorOccurred		= true
											LocalErrorMessage		= error message
								else
									invoke Unreleased.EditRelease PrmIntercompanyBillingDocumentHeader
										resume on error
											LocalErrorOccurred		= true
											LocalErrorMessage		= error message

								if (LocalErrorOccurred)
									invoke TransitionBackgroundProcessing PrmIntercompanyBillingDocumentHeader
										if (PrmNeedsApproval)
											invoked.PrmBackgroundProcessing	= 5 
										else
											invoked.PrmBackgroundProcessing	= 2 
										invoked.PrmErrorMessage				= LocalErrorMessage
								else
									LocalAsyncId = current async action request id
									if (PrmNeedsApproval)
										LocalBackgroundGroup = "ICBHeader-VertexFinishSubmitForApproval-" + PrmIntercompanyBillingDocumentHeader + "-" + current timestamp
										invoke VertexFinishSubmitForApproval PrmIntercompanyBillingDocumentHeader in background group (LocalBackgroundGroup)
											run after LocalAsyncId
											on error
												invoke Unreleased.VertexCleanUpOnError PrmIntercompanyBillingDocumentHeader
													invoked.PrmNeedsApproval 	= true
													invoked.PrmBackgroundGroup	= LocalBackgroundGroup
									else
										LocalBackgroundGroup = "ICBHeader-VertexFinishRelease-" + PrmIntercompanyBillingDocumentHeader + "-" + current timestamp
										invoke VertexFinishRelease PrmIntercompanyBillingDocumentHeader in background group (LocalBackgroundGroup)
											run after LocalAsyncId
											on error
												invoke Unreleased.VertexCleanUpOnError PrmIntercompanyBillingDocumentHeader
													invoked.PrmNeedsApproval 	= false
													invoked.PrmBackgroundGroup	= LocalBackgroundGroup
				
				Instance Rules
					if (!LocalErrorOccurred)
						invoke VertexCreateDocumentTax
							resume on error
								LocalErrorOccurred	= true
								LocalErrorMessage	= error message


		CopyTaxLineItemToReceivableInvoice is an Instance Action
			restricted
			Local Fields
				TaxLineItemView								is a TaxLineItem view
			Action Rules
				for each TaxLineItemRel
					invoke Create TaxLineItem
						assign result to TaxLineItemView
						fill in fields from each
							except invoked.TaxLineItem.UniqueIdOfRelatedObject
							except invoked.RelatedObjectReference
							except invoked.InvoiceNumber
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice.UniqueID
						invoked.RelatedObjectReference				= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice
						invoked.InvoiceNumber						= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice

					for each each.LineItemUserFieldsRel
						invoke Create TaxLineItemUserFields
							fill in fields from each
								except invoked.TaxLineItem.UniqueIdOfRelatedObject
								except invoked.TaxLineItem.Sequence
							invoked.TaxLineItem.UniqueIdOfRelatedObject	= TaxLineItemView.TaxLineItem.UniqueIdOfRelatedObject
							invoked.TaxLineItem.Sequence 				= TaxLineItemView.TaxLineItem.Sequence


		CopyTaxLineItemToPayablesInvoice is an Instance Action
			restricted
			Local Fields
				TaxLineItemView								is a TaxLineItem view
			Action Rules
				for each TaxLineItemRel
					invoke Create TaxLineItem
						assign result to TaxLineItemView
						fill in fields from each
							except invoked.TaxLineItem.UniqueIdOfRelatedObject
							except invoked.RelatedObjectReference
							except invoked.TaxEntity
							except invoked.InvoiceNumber
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice.UniqueID
						invoked.RelatedObjectReference				= IntercompanyBillingDocumentHeader.PayableEntity.PayablesInvoice
						invoked.TaxEntity							= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
						invoked.InvoiceNumber						= IntercompanyBillingDocumentHeader.ReceivableEntity.ReceivableInvoice

					for each each.LineItemUserFieldsRel
						if (TaxEntityUsesOneSource
						and IntercompanyBillingDocumentHeader.TaxAttributesRel.OneSourceTaxAttributeRel exists)
							initialize Idx
							invoke Create TaxLineItemUserFields
								invoked.FinanceEnterpriseGroup							= IntercompanyBillingGroup 
								invoked.TaxLineItem.UniqueIdOfRelatedObject 			= TaxLineItemView.TaxLineItem.UniqueIdOfRelatedObject
								invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
								for each IntercompanyBillingDocumentHeader.TaxAttributesRel.OneSourceTaxAttributeRel
									if ((each.LoadDynamicField.System	= "IB"
									or   each.LoadDynamicField.System not entered)
									and Idx < 25)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										if (each.LoadDynamicField.ValueIs.TaxEntity)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
										else
										if (each.LoadDynamicField.ValueIs.Company)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PayableEntity.Company
										else
										if (each.LoadDynamicField.ValueIs.Description)
											invoked.UserElementGroup.UserElement[Idx].Value		= Description
										else
										if (each.LoadDynamicField.ValueIs.Customer)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
										else
										if (each.LoadDynamicField.ValueIs.Vendor)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PayableEntity.Vendor
										else
										if (each.LoadDynamicField.ValueIs.PostingDate)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PostDate
										else
										if (each.LoadDynamicField.ValueIs.TaxDate)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.InvoiceDate
										else
										if (each.LoadDynamicField.ValueIs.GLAccount)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.GeneralLedgerChartAccount
										else
										if (each.LoadDynamicField.ValueIs.Location
										and IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress entered)															
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation
										else
										if (each.LoadDynamicField.ValueIs.Currency)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.DocumentCurrency
										else
										if (each.LoadDynamicField.ValueIs.UnitCost)
											invoked.UserElementGroup.UserElement[Idx].Value		= UnitPrice
										else
										if (each.LoadDynamicField.ValueIs.AccountSubType
										and PayablesExpenseAccount.GeneralLedgerChartAccount.AccountSubType entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.GeneralLedgerChartAccount.AccountSubType
										else
										if (each.LoadDynamicField.ValueIs.Project
										and PayablesExpenseAccount.Project entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.Project
										else
										if (each.LoadDynamicField.ValueIs.WorkType
										and PayablesExpenseAccount.Project.WorkType entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.Project.WorkType
										else
										if (each.LoadDynamicField.ValueIs.ServiceType
										and PayablesExpenseAccount.Project.ServiceType entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.Project.ServiceType
										else
										if (each.LoadDynamicField.ValueIs.UsageType
										and PayablesExpenseAccount.Project.UsageType entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.Project.UsageType
										else
										if (each.LoadDynamicField.ValueIs.ContractType
										and PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
										else
										if (each.LoadDynamicField.ValueIs.CustomerType
										and PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
										else
										if (each.LoadDynamicField.ValueIs.CommodityCode
										and UNSPSCCodeGroup.UNSPSCCode entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
										else
										if (each.LoadDynamicField.ValueIs.UNSPSC
										and UNSPSCCodeGroup.UNSPSCCode entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
										else			
										if (each.LoadDynamicField.ValueIs.ShipToName)
											if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered)
												invoked.UserElementGroup.UserElement[Idx].Value	= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.Name
											else
												invoked.UserElementGroup.UserElement[Idx].Value	= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.Name
										else
										if (each.LoadDynamicField.ValueIs.ProductTaxCatagory
										and TaxCategory entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= TaxCategory
										else
										if (each.LoadDynamicField.ValueIs.TaxUsageCode
										and TaxUsageCode entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= TaxUsageCode
										else
										if (each.LoadDynamicField.ValueIs.Latitude)
											if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered
											and	IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLatitude entered)
												invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLatitude
											else
											if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress not entered
											and	IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLatitude entered)
												invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLatitude
										else
										if (each.LoadDynamicField.ValueIs.Longitude)
											if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered
											and	IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLongitude entered)
												invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLongitude
											else
											if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress not entered
											and	IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLongitude entered)
												invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLongitude
										else
										if (each.LoadDynamicField.ValueIs.Altitude)
											if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered
											and	IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoAltitude entered)
												invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoAltitude
											else
											if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress not entered
											and	IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoAltitude entered)
												invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoAltitude
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension1
										and PayablesExpenseAccount.FinanceDimension1 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension1
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension2
										and PayablesExpenseAccount.FinanceDimension2 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension2
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension3
										and PayablesExpenseAccount.FinanceDimension3 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension3
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension4
										and PayablesExpenseAccount.FinanceDimension4 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension4
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension5
										and PayablesExpenseAccount.FinanceDimension5 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension5
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension6
										and PayablesExpenseAccount.FinanceDimension6 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension6
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension7
										and PayablesExpenseAccount.FinanceDimension7 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension7
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension8
										and PayablesExpenseAccount.FinanceDimension8 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension8
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension9
										and PayablesExpenseAccount.FinanceDimension9 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension9
										else
										if (each.LoadDynamicField.ValueIs.FinanceDimension10
										and PayablesExpenseAccount.FinanceDimension10 entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.FinanceDimension10
										else
										if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
											invoked.UserElementGroup.UserElement[Idx].Value		= PayablesExpenseAccount.ToAccountingEntity
										else
										if (each.Value entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= each.Value

						if (CallVertexByTransaction
						and IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldExist)
							initialize Idx
							invoke Create TaxLineItemUserFields
								invoked.FinanceEnterpriseGroup							= IntercompanyBillingGroup 
								invoked.TaxLineItem.UniqueIdOfRelatedObject 			= TaxLineItemView.TaxLineItem.UniqueIdOfRelatedObject
								invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
								initialize Idx
								for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
									if (each.Code entered            
									or  each.ExternalValue entered)
										increment Idx
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId
										if (each.ExternalValue.ValueIs.TaxEntity)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity
										else
										if (each.ExternalValue.ValueIs.Company)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.PayableEntity.Company
										else
										if (each.ExternalValue.ValueIs.Description)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Description
										else
										if (each.ExternalValue.ValueIs.Vendor)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.PayableEntity.Vendor
										else
										if (each.ExternalValue.ValueIs.GLAccount)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.GeneralLedgerChartAccount
										else
										if (each.ExternalValue.ValueIs.Currency)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.DocumentCurrency
										else
										if (each.ExternalValue.ValueIs.UnitCost)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UnitPrice
										else
										if (each.ExternalValue.ValueIs.ContractType)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
										else
										if (each.ExternalValue.ValueIs.WorkType)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.Project.WorkType
										else
										if (each.ExternalValue.ValueIs.ServiceType)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.Project.ServiceType
										else
										if (each.ExternalValue.ValueIs.AccountSubType)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.GeneralLedgerChartAccount.AccountSubType
										else
										if (each.ExternalValue.ValueIs.UsageType)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.Project.UsageType
										else
										if (each.ExternalValue.ValueIs.CustomerType)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
										else
										if (each.ExternalValue.ValueIs.AccountingUnit)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.AccountingUnit
										else
										if (each.ExternalValue.ValueIs.ToAccountingEntity)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.ToAccountingEntity
										else
										if (each.ExternalValue.ValueIs.Project)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.Project
										else
										if (each.ExternalValue.ValueIs.ProductTaxCatagory)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxCategory
										else
										if (each.ExternalValue.ValueIs.CommodityCode)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
										else
										if (each.ExternalValue.ValueIs.UNSPSC)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
										else
										if (each.ExternalValue.ValueIs.TaxUsageCode)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxUsageCode
										else
										if (each.ExternalValue.ValueIs.FinanceDimension1)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension1
										else
										if (each.ExternalValue.ValueIs.FinanceDimension2)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension2
										else
										if (each.ExternalValue.ValueIs.FinanceDimension3)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension3
										else
										if (each.ExternalValue.ValueIs.FinanceDimension4)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension4
										else
										if (each.ExternalValue.ValueIs.FinanceDimension5)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension5
										else
										if (each.ExternalValue.ValueIs.FinanceDimension6)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension6
										else
										if (each.ExternalValue.ValueIs.FinanceDimension7)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension7
										else
										if (each.ExternalValue.ValueIs.FinanceDimension8)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension8
										else
										if (each.ExternalValue.ValueIs.FinanceDimension9)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension9
										else
										if (each.ExternalValue.ValueIs.FinanceDimension10)
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PayablesExpenseAccount.FinanceDimension10
										else
											invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code
								
								initialize Idx
								for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
									if (each.NumericValue entered            
									or  each.ExternalValue entered)
										increment Idx
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
										if (each.ExternalValue.ValueIs.Company)
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = IntercompanyBillingDocumentHeader.PayableEntity.Company
										else
										if (each.ExternalValue.ValueIs.GLAccount)
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = PayablesExpenseAccount.GeneralLedgerChartAccount
										else
										if (each.ExternalValue.ValueIs.ToAccountingEntity)
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = PayablesExpenseAccount.ToAccountingEntity
										else
										if (each.ExternalValue.ValueIs.UnitCost)
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = UnitPrice
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8
										else
											invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue

								initialize Idx
								for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
									if (each.DateValue entered            
									or  each.ExternalValue entered)
										increment Idx 
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId 
										if (each.ExternalValue.ValueIs.PostingDate)
											invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
										else
										if (each.ExternalValue.ValueIs.TaxDate)
											invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
										else
											invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue
						
						invoke Delete each
					invoke Delete each


		CreateTaxLineItem is an Instance Action
			restricted
			Local Fields
				TaxLineItemView								is a TaxLineItem view
			Action Rules

				invoke Delete IntercompanyBillingDocumentTax set
				invoke Purge TaxLineItemRel

				initialize TaxAmount
				initialize TaxRate
				initialize ReturnedTaxable
				
				if (Taxable)
					invoke Create TaxLineItem
						assign result to TaxLineItemView
						invoked.FinanceEnterpriseGroup				= IntercompanyBillingGroup 
						invoked.TaxLineItem.UniqueIdOfRelatedObject = IntercompanyBillingDocumentHeader.UniqueID
						invoked.RelatedObjectReference 				= reference to this instance
						invoked.InvoiceNumber						= IntercompanyBillingDocumentHeader
						invoked.LineItemId							= IntercompanyBillingDocumentLine
						invoked.RelatedLineItemUniqueId				= UniqueID											
						invoked.InvoiceDate							= IntercompanyBillingDocumentHeader.InvoiceDate
						invoked.TaxEntity							= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
						invoked.InvoiceAmount						= ExtendedAmount
						invoked.TaxableAmount						= ExtendedAmount											
						invoked.CommodityCodeType					= "UNSPSC"
						invoked.CommodityCode						= UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
						invoked.ProductTaxCategory					= TaxCategory
						invoked.Quantity							= Quantity
						invoked.ShipToTaxCode						= TaxCode
						invoked.ShipToTaxCodeDescription			= TaxCode.Description
						if (TaxEntityUsesOneSource)
							if (IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress entered)
								invoked.ShipFromAddress 			= IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress
							else	
								invoked.ShipFromAddress 			= IntercompanyBillingDocumentHeader.PayableEntity.Vendor.CurrentAddressRel.PostalAddress
							if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered)
								invoked.ShipToAddress				= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress
							else
								invoked.ShipToAddress				= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress

					if (TaxEntityUsesOneSource
					and IntercompanyBillingDocumentHeader.TaxAttributesRel.OneSourceTaxAttributeRel exists)
						initialize Idx
						invoke Create TaxLineItemUserFields
							invoked.FinanceEnterpriseGroup							= IntercompanyBillingGroup 
							invoked.TaxLineItem.UniqueIdOfRelatedObject 			= TaxLineItemView.TaxLineItem.UniqueIdOfRelatedObject
							invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
							for each IntercompanyBillingDocumentHeader.TaxAttributesRel.OneSourceTaxAttributeRel
								if ((each.LoadDynamicField.System	= "IB"
								or   each.LoadDynamicField.System not entered)
								and Idx < 25)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									if (each.LoadDynamicField.ValueIs.TaxEntity)
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
									else
									if (each.LoadDynamicField.ValueIs.Company)
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Company
									else
									if (each.LoadDynamicField.ValueIs.Description)
										invoked.UserElementGroup.UserElement[Idx].Value		= Description
									else
									if (each.LoadDynamicField.ValueIs.Customer)
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
									else
									if (each.LoadDynamicField.ValueIs.Vendor)
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PayableEntity.Vendor
									else
									if (each.LoadDynamicField.ValueIs.PostingDate)
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PostDate
									else
									if (each.LoadDynamicField.ValueIs.TaxDate)
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.InvoiceDate
									else
									if (each.LoadDynamicField.ValueIs.GLAccount)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.GeneralLedgerChartAccount
									else
									if (each.LoadDynamicField.ValueIs.Location
									and IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress entered)															
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.PayableEntity.VendorLocation
									else
									if (each.LoadDynamicField.ValueIs.Currency)
										invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.DocumentCurrency
									else
									if (each.LoadDynamicField.ValueIs.UnitCost)
										invoked.UserElementGroup.UserElement[Idx].Value		= UnitPrice
									else
									if (each.LoadDynamicField.ValueIs.AccountSubType
									and ReceivablesRevenueAccount.GeneralLedgerChartAccount.AccountSubType entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.GeneralLedgerChartAccount.AccountSubType
									else
									if (each.LoadDynamicField.ValueIs.Project
									and ReceivablesRevenueAccount.Project entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.Project
									else
									if (each.LoadDynamicField.ValueIs.WorkType
									and ReceivablesRevenueAccount.Project.WorkType entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.Project.WorkType
									else
									if (each.LoadDynamicField.ValueIs.ServiceType
									and ReceivablesRevenueAccount.Project.ServiceType entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.Project.ServiceType
									else
									if (each.LoadDynamicField.ValueIs.UsageType
									and ReceivablesRevenueAccount.Project.UsageType entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.Project.UsageType
									else
									if (each.LoadDynamicField.ValueIs.ContractType
									and ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
									else
									if (each.LoadDynamicField.ValueIs.CustomerType
									and ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
									else
									if (each.LoadDynamicField.ValueIs.CommodityCode
									and UNSPSCCodeGroup.UNSPSCCode entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
									else
									if (each.LoadDynamicField.ValueIs.UNSPSC
									and UNSPSCCodeGroup.UNSPSCCode entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
									else			
									if (each.LoadDynamicField.ValueIs.ShipToName)
										if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered)
											invoked.UserElementGroup.UserElement[Idx].Value	= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.Name
										else
											invoked.UserElementGroup.UserElement[Idx].Value	= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.Name
									else
									if (each.LoadDynamicField.ValueIs.ProductTaxCatagory
									and TaxCategory entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= TaxCategory
									else
									if (each.LoadDynamicField.ValueIs.TaxUsageCode
									and TaxUsageCode entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= TaxUsageCode
									else
									if (each.LoadDynamicField.ValueIs.Latitude)
										if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered
										and	IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLatitude entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLatitude
										else
										if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress not entered
										and	IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLatitude entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLatitude
									else
									if (each.LoadDynamicField.ValueIs.Longitude)
										if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered
										and	IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLongitude entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoLongitude
										else
										if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress not entered
										and	IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLongitude entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoLongitude
									else
									if (each.LoadDynamicField.ValueIs.Altitude)
										if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress entered
										and	IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoAltitude entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress.GeoAltitude
										else
										if (IntercompanyBillingDocumentHeader.ReceivableEntity.CustomerShipTo.ShipToAddress not entered
										and	IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoAltitude entered)
											invoked.UserElementGroup.UserElement[Idx].Value		= IntercompanyBillingDocumentHeader.ReceivableEntity.Customer.PostalAddress.GeoAltitude
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension1
									and ReceivablesRevenueAccount.FinanceDimension1 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension1
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension2
									and ReceivablesRevenueAccount.FinanceDimension2 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension2
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension3
									and ReceivablesRevenueAccount.FinanceDimension3 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension3
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension4
									and ReceivablesRevenueAccount.FinanceDimension4 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension4
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension5
									and ReceivablesRevenueAccount.FinanceDimension5 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension5
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension6
									and ReceivablesRevenueAccount.FinanceDimension6 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension6
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension7
									and ReceivablesRevenueAccount.FinanceDimension7 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension7
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension8
									and ReceivablesRevenueAccount.FinanceDimension8 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension8
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension9
									and ReceivablesRevenueAccount.FinanceDimension9 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension9
									else
									if (each.LoadDynamicField.ValueIs.FinanceDimension10
									and ReceivablesRevenueAccount.FinanceDimension10 entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.FinanceDimension10
									else
									if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
										invoked.UserElementGroup.UserElement[Idx].Value		= ReceivablesRevenueAccount.ToAccountingEntity
									else
									if (each.Value entered)
										invoked.UserElementGroup.UserElement[Idx].Value		= each.Value

					if (CallVertexByTransaction
					and IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldExist)
						initialize Idx
						invoke Create TaxLineItemUserFields
							invoked.FinanceEnterpriseGroup							= IntercompanyBillingGroup 
							invoked.TaxLineItem.UniqueIdOfRelatedObject 			= IntercompanyBillingDocumentHeader.UniqueID
							invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
							initialize Idx
							for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
								if (each.Code entered            
								or  each.ExternalValue entered)
									increment Idx
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId
									if (each.ExternalValue.ValueIs.TaxEntity)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.ReceivableEntity.Company.AccountingEntity
									else
									if (each.ExternalValue.ValueIs.Company)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.ReceivableEntity.Company
									else
									if (each.ExternalValue.ValueIs.Description)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Description
									else
									if (each.ExternalValue.ValueIs.Customer)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.ReceivableEntity.Customer
									else
									if (each.ExternalValue.ValueIs.GLAccount)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.GeneralLedgerChartAccount
									else
									if (each.ExternalValue.ValueIs.Currency)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = IntercompanyBillingDocumentHeader.DocumentCurrency
									else
									if (each.ExternalValue.ValueIs.UnitCost)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UnitPrice
									else
									if (each.ExternalValue.ValueIs.ContractType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
									else
									if (each.ExternalValue.ValueIs.WorkType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.Project.WorkType
									else
									if (each.ExternalValue.ValueIs.ServiceType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.Project.ServiceType
									else
									if (each.ExternalValue.ValueIs.AccountSubType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.GeneralLedgerChartAccount.AccountSubType
									else
									if (each.ExternalValue.ValueIs.UsageType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.Project.UsageType
									else
									if (each.ExternalValue.ValueIs.CustomerType)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
									else
									if (each.ExternalValue.ValueIs.AccountingUnit)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.AccountingUnit
									else
									if (each.ExternalValue.ValueIs.ToAccountingEntity)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.ToAccountingEntity
									else
									if (each.ExternalValue.ValueIs.Project)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.Project
									else
									if (each.ExternalValue.ValueIs.ProductTaxCatagory)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxCategory
									else
									if (each.ExternalValue.ValueIs.CommodityCode)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
									else
									if (each.ExternalValue.ValueIs.UNSPSC)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UNSPSCCodeGroup.UNSPSCCode.UNSPSCCodeDisplay
									else
									if (each.ExternalValue.ValueIs.TaxUsageCode)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxUsageCode
									else
									if (each.ExternalValue.ValueIs.FinanceDimension1)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension1
									else
									if (each.ExternalValue.ValueIs.FinanceDimension2)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension2
									else
									if (each.ExternalValue.ValueIs.FinanceDimension3)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension3
									else
									if (each.ExternalValue.ValueIs.FinanceDimension4)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension4
									else
									if (each.ExternalValue.ValueIs.FinanceDimension5)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension5
									else
									if (each.ExternalValue.ValueIs.FinanceDimension6)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension6
									else
									if (each.ExternalValue.ValueIs.FinanceDimension7)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension7
									else
									if (each.ExternalValue.ValueIs.FinanceDimension8)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension8
									else
									if (each.ExternalValue.ValueIs.FinanceDimension9)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension9
									else
									if (each.ExternalValue.ValueIs.FinanceDimension10)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ReceivablesRevenueAccount.FinanceDimension10
									else
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code
							
							initialize Idx
							for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
								if (each.NumericValue entered            
								or  each.ExternalValue entered)
									increment Idx
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
									if (each.ExternalValue.ValueIs.Company)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = IntercompanyBillingDocumentHeader.ReceivableEntity.Company
									else
									if (each.ExternalValue.ValueIs.GLAccount)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = ReceivablesRevenueAccount.GeneralLedgerChartAccount
									else
									if (each.ExternalValue.ValueIs.ToAccountingEntity)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = ReceivablesRevenueAccount.ToAccountingEntity
									else
									if (each.ExternalValue.ValueIs.UnitCost)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = UnitPrice
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8
									else
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue

							initialize Idx
							for each IntercompanyBillingDocumentHeader.TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
								if (each.DateValue entered            
								or  each.ExternalValue entered)
									increment Idx 
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId 
									if (each.ExternalValue.ValueIs.PostingDate)
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
									else
									if (each.ExternalValue.ValueIs.TaxDate)
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = IntercompanyBillingDocumentHeader.InvoiceDate
									else
										invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue


		OneSourceCreateDocumentTax is an Instance Action
			restricted
			Local Fields
				LocalTaxInputAccount		is a FinanceCodeBlock
			Action Rules
				if (Taxable)
					if (first TaxLineItemRel.TaxDetailOutRel.TaxAmount not entered)
						initialize Taxable
						initialize TaxCode
					else
						if (IntercompanyBillingDocumentHeader.PayableTaxEntityRel.UseTaxCodeAccounts)
							constraint (LocalEntityTaxCodeRel exists)
								"MustSetUp_\Entity_\Tax_\CodeFor_\Tax_\Entity<IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity>And_\Tax_\Code<TaxCode>"
							LocalTaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
						else
							LocalTaxInputAccount		= IntercompanyBillingDocumentHeader.PayableTaxEntityRel.TaxInputAccount

						invoke Create IntercompanyBillingDocumentTax
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.CalculatedFor						= 1  
							invoked.TaxAmount							= first TaxLineItemRel.TaxDetailOutRel.TaxAmount
							invoked.TaxRate								= first TaxLineItemRel.TaxDetailOutRel.TaxRate
							invoked.TaxableAmount						= first TaxLineItemRel.TaxableAmount
							invoked.TaxCodeAccount						= first TaxLineItemRel.TaxDetailOutRel.TaxOutputAccount
							invoked.CustomerTaxCode						= TaxCode
							if (IntercompanyBillingDocumentHeader.ReceivableTaxEntityRel.OneSourceUseARCodeForTaxAccount 
							and first TaxLineItemRel.ReturnedErpTaxCode entered)
								LocalReceivableGeneralLedgerCode 			= first TaxLineItemRel.ReturnedErpTaxCode
								constraint (LocalReceivableGeneralLedgerCodeRel exists)
									"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<IntercompanyBillingDocumentHeader.ReceivableEntity.Company>"
								invoked.TaxCodeAccount					= LocalReceivableGeneralLedgerCodeRel.DistributionAccount

						invoke Create IntercompanyBillingDocumentTax
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.CalculatedFor						= 2  
							invoked.TaxAmount							= first TaxLineItemRel.TaxDetailOutRel.TaxAmount
							invoked.TaxRate								= first TaxLineItemRel.TaxDetailOutRel.TaxRate
							invoked.TaxableAmount						= first TaxLineItemRel.TaxableAmount
							invoked.TaxCodeAccount						= LocalTaxInputAccount
							invoked.VendorTaxCode						= TaxCode
							invoked.AccruedOrInvoiced					= "I"

						TaxAmount							= first TaxLineItemRel.TaxDetailOutRel.TaxAmount
						TaxRate								= first TaxLineItemRel.TaxDetailOutRel.TaxRate
						ReturnedTaxable						= first TaxLineItemRel.TaxableAmount


		VertexCreateDocumentTax is an Instance Action
			restricted
			Local Fields
				LocalTaxInputAccount		is a FinanceCodeBlock
				LocalTaxAmount				is like InternationalAmount
				LocalTaxRate				is Percent 7.5
				LocalReturnedTaxCode		is like TaxCode
				LocalReturnedTaxable		is like InternationalAmount
			Action Rules
				if (Taxable)
					if (IntercompanyBillingDocumentHeader.PayableTaxEntityRel.UseTaxCodeAccounts)
						constraint (LocalEntityTaxCodeRel exists)
							"MustSetUp_\Entity_\Tax_\CodeFor_\Tax_\Entity<IntercompanyBillingDocumentHeader.PayableEntity.Company.AccountingEntity>And_\Tax_\Code<TaxCode>"
						LocalTaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
					else
						LocalTaxInputAccount		= IntercompanyBillingDocumentHeader.PayableTaxEntityRel.TaxInputAccount

					LocalReturnedTaxCode = first TaxLineItemRel.ShipToTaxCode	
					LocalReturnedTaxable = first TaxLineItemRel.TaxableAmount

					for each first TaxLineItemRel.TaxDetailOutRel
						if (each.TaxAmount entered)

							LocalTaxAmount 	+= each.TaxAmount
							LocalTaxRate	+= each.TaxRate

							invoke Create IntercompanyBillingDocumentTax
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
								invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								invoked.CalculatedFor						= 1  
								invoked.TaxAmount							= each.TaxAmount
								invoked.TaxRate								= each.TaxRate
								invoked.TaxableAmount						= LocalReturnedTaxable
								invoked.TaxCodeAccount						= each.TaxOutputAccount
								invoked.CustomerTaxCode						= LocalReturnedTaxCode

							invoke Create IntercompanyBillingDocumentTax
								invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
								invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
								invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
								invoked.CalculatedFor						= 2  
								invoked.TaxAmount							= each.TaxAmount
								invoked.TaxRate								= each.TaxRate
								invoked.TaxableAmount						= LocalReturnedTaxable
								invoked.TaxCodeAccount						= LocalTaxInputAccount
								invoked.VendorTaxCode						= LocalReturnedTaxCode
								invoked.AccruedOrInvoiced					= "I"

					if (LocalTaxAmount = 0)
						initialize Taxable
						initialize TaxCode
					else
						TaxAmount							= LocalTaxAmount
						TaxRate								= LocalTaxRate
						ReturnedTaxable						= LocalReturnedTaxable



		CreateDocumentDistributionsForExistingLines is a Set Action
			restricted

			Instance Selection
				where (RevenueAndExpenseDocumentDistributionsDoNotExist)

			Action Rules
				Instance Rules
					if (ReceivablesRevenueAccount.GeneralLedgerChartAccount entered)
						invoke CreateRevenueDistribution IntercompanyBillingDocumentDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.Type								= "R" 
							invoked.Description							= blank
							invoked.GeneralLedgerAccount				= ReceivablesRevenueAccount
							invoked.DistributionAmount					= ExtendedAmount

					if (PayablesExpenseAccount.GeneralLedgerChartAccount entered)
						invoke CreateExpenseDistribution IntercompanyBillingDocumentDistribution
							invoked.IntercompanyBillingGroup			= IntercompanyBillingGroup
							invoked.IntercompanyBillingDocumentHeader	= IntercompanyBillingDocumentHeader
							invoked.IntercompanyBillingDocumentLine		= IntercompanyBillingDocumentLine
							invoked.Type								= "P" 
							invoked.Description							= blank
							invoked.GeneralLedgerAccount				= PayablesExpenseAccount
							invoked.DistributionAmount					= ExtendedAmount
				
