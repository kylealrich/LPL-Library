CustomerRecurringInvoiceLine is a BusinessClass
    owned by bl
    prefix is BUL
    classic name is BLRICLINE

    Ontology
        symbolic key is CustomerRecurringInvoiceLine
            classic set name is BULSET1



    Patterns
        implements StaticJava

        disable AuditIndex

    Persistent Fields
		CustomerShipToCustomer	 is a 	Customer  
        CustomerShipTo
            classic name is SHIP-TO
            context of CustomerShipToCustomer
        Item
        ItemDescription
            classic name is ITEM-DESC
        LineType		          is a BillingLineType
        ZeroAfterUse			  is Boolean
        Quantity
		Skip					  is Boolean
        InvoiceQuantity           is a Quantity
        BilledAmount              is an InternationalAmount
        SellingUnitOfMeasure      is a UnitOfMeasure
            classic name is SELL-UOM
        UnitPrice                 is an UnsignedUnitCost
        	precision is DerivedNumberOfDecimalsPrice
        SellingPriceUnitOfMeasure is a UnitOfMeasure
            classic name is SPR-UOM
        Frequency
        CycleCode                 is AlphaUpper size 3 
        StartDate
        StopDate                  is Date
        Territory
        SalesRepresentative
            classic name is SALESMAN
		SalesRepresentative2 		is a SalesRepresentative
		CommissionRate1            is a ChrgRate
            classic name is COMM-RATE-1
		CommissionRate2            is a ChrgRate
            classic name is COMM-RATE-2
		CommissionSplitPercentage
            classic name is COMM-SPLIT
        StandardCommentCode1      is a BillingStandardCommentHeader			
            classic name is STD-COMM1
        StandardCommentCode2      is a BillingStandardCommentHeader			
            classic name is STD-COMM2
        StandardCommentCode3      is a BillingStandardCommentHeader			
            classic name is STD-COMM3
        LastAddOnChargeSequence   is a Sequence3
            classic name is LAST-MISC-SEQ
        LastCommentSequence       is a Sequence3
            classic name is LAST-COMM-SEQ
		MasterLineNumber          is a RecurringInvoiceLine
		HSNSACCode
        TaxCode
        TaxExemptCode
            classic name is TAX-EXEMPT-CD
        Project						is a FinanceCodeBlockProjectOnly
            classic name is ACTIVITY
		CustomerShipToCompanyCustomer	 is a 	Customer 
        CompanyCustomer
            context of CustomerShipToCompanyCustomer

	Local Fields
		LocalCurrencyTable		is a CurrencyTable
		LocalQuantity			is like Quantity
		RoundedValue
		LocalBaseName			is like PriceBase
		LocalListName 			is a ListName
		LocalPriceDate			is Date
		LocalCurrency			is a Currency
		LocalCustomer			is like Customer
		LocalPromotion			is a Promotion
		LocalCurrencyExchange	is a UnitCostCurrencyExchange
		LocalCurrencyDate		is an ExchangeDate
		LocalConvertedUnitPrice is an UnitPrice
		LocalFromCurrency		is a FromCurrency
		LocalItemType			is an ItemType
		LocalMinorSalesClass    is like MinorSalesClass

	Transient Fields
		TotalQuantity			is like Quantity
			precision is Item.NumberOfDecimalsQuantity
		ActionCode				is Alpha size 1
			States
				SpreadQuantity	value is "S"
							
    Derived Fields
    
        DerivedNumberOfDecimalsPrice is a ConditionalField
			type is Numeric size 1
			restricted
			if (LineType.NonStock
			or  LineType.Inventoried)
				Item.NumberOfDecimalsPrice
			else
			if (LineType.Special)
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8
				
		DerivedQtyRoundTo is a ConditionalField
			type is Decimal size 18.6
			restricted
			if (Item.NumberOfDecimalsQuantity = 4)
				.0001
			else
			if (Item.NumberOfDecimalsQuantity = 3)
				.001
			else
			if (Item.NumberOfDecimalsQuantity = 2)
				.01
			else
			if (Item.NumberOfDecimalsQuantity = 1)
				.1
			else
			if (Item.NumberOfDecimalsQuantity = 0)
				1
			else
				0 
		
		DerivedInventoryLocation is a DerivedField
			type is like InventoryLocation
			restricted
			if (Company.LocationBasedPricing)
				return CustomerRecurringInvoice.Location
				
		DerivedCustomerRecurringInvoiceLine is a DerivedField
			type is like CustomerRecurringInvoiceLine
			return CustomerRecurringInvoiceLine				
			
		DerivedFormTitleForCustomerInvLine is a DerivedField
        	type is MessageField
            if (CustomerRecurringInvoiceLine entered)
            	return InvoiceLineFormTitleWithLine
            else    
                return InvoiceLineFormTitleWithoutLine    
                
		InvoiceLineFormTitleWithLine is a LabelField
            restricted
            "CustomerRecurringInvoiceLine_<CustomerRecurringInvoiceLine>"

        InvoiceLineFormTitleWithoutLine is a LabelField
            restricted
            "CustomerRecurringInvoiceLine"
             		
    Conditions
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)
			
        IsMasterExists
        	restricted
            when (MasterLineNumber entered)

        IsNotReady
        	restricted
            when (Quantity not entered
            and   !Skip)

		IsRequireUnitOfMeasure
			restricted
			when (Company.UnitOfMeasureRequired
			and   !LineType.Special)


		IsSpecialLineType
			restricted
			when (LineType.Special)
					
        IsZeroAfterUse
        	restricted
            when (ZeroAfterUse)

		SecurityGroupAllowsAccess
			when (actor.context.CompanySecurityGroup = blank
			or    CompanySecurityGroupMemberRel exists)
    Relations

		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company                     = Company

        CustomerRecurringInvoiceCommentsRel is a CustomerRecurringInvoiceComment set
            Instance Selection
                where (related.CustomerRecurringInvoiceLine = CustomerRecurringInvoiceLine)


        CustomerRecurringInvoiceAddOnChargesRel is a CustomerRecurringInvoiceAddOnCharge set

		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company				= Company
				related.InventoryLocation	= CustomerRecurringInvoice.Location
				related.Item				= Item

		BillingItemGeneralLedgerAccountRel
			one-to-one relation to BillingItemGeneralLedgerAccount
			Field Mapping uses symbolic key
				related.Company													= Company
				related.BillingItemGeneralLedgerAccount.BillingProcessLevel		= CustomerRecurringInvoice.BillingProcessLevel
				related.BillingItemGeneralLedgerAccount.MajorSalesClass			= Item.MajorSalesClass
				related.BillingItemGeneralLedgerAccount.MinorSalesClass			= Item.MinorSalesClass

		BillingItemGeneralLedgerAccountsRel
			one-to-one relation to BillingItemGeneralLedgerAccount
			Field Mapping uses symbolic key
				related.Company													= Company
				related.BillingItemGeneralLedgerAccount.BillingProcessLevel		= CustomerRecurringInvoice.BillingProcessLevel
				related.BillingItemGeneralLedgerAccount.MajorSalesClass			= Item.MajorSalesClass
				related.BillingItemGeneralLedgerAccount.MinorSalesClass			= LocalMinorSalesClass

		PriceListItemForCustomerRel
			one-to-many relation to PriceListItem
			Field Mapping uses Set5
				related.Company													= Company
                related.PriceListContractPromotion.Customer						= Customer
                related.Item													= Item
                related.EndDate													= LocalPriceDate

		PriceListItemForListNameRel
			one-to-many relation to PriceListItem
			Field Mapping uses Set6
				related.Company													= Company
                related.PriceListContractPromotion.ListName						= LocalListName
                related.Item													= Item
                related.EndDate													= LocalPriceDate

		PriceListItemRel
			one-to-many relation to PriceListItem
			Field Mapping uses symbolic key
				related.Company													= Company
                related.PriceListContractPromotion.Customer						= blank
                related.PriceListContractPromotion.ListName						= LocalListName
                related.PriceListContractPromotion.Promotion					= blank
                related.Item													= Item

		PriceListSalesForCustomerClassRel					
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set5
				related.Company													= Company
			Instance Selection	
				where (related.PriceListContractPromotion.Customer				= Customer
				and	   related.PriceListSalesClass.MajorSalesClass				= Item.MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass				= Item.MinorSalesClass
				or 	   related.PriceListSalesClass.MinorSalesClass  			= blank)
				and    related.EndDate											= LocalPriceDate)

		PriceListSalesClassForListNameRel					
			one-to-many relation to PriceListSalesClass
			Field Mapping uses Set6
				related.Company													= Company
			Instance Selection	
				where (related.PriceListContractPromotion.ListName				= LocalListName
				and	   related.PriceListSalesClass.MajorSalesClass				= Item.MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass				= Item.MinorSalesClass
				or 	   related.PriceListSalesClass.MinorSalesClass  			= blank)
				and    related.EndDate											= LocalPriceDate)

		PriceListSalesClassRel					
			one-to-many relation to PriceListSalesClass
			Field Mapping uses symbolic key
				related.Company													= Company
			Instance Selection	
				where (related.PriceListContractPromotion.Customer						= blank
				and    related.PriceListContractPromotion.ListName						= LocalListName
				and    related.PriceListContractPromotion.Promotion					= blank
				and	   related.PriceListSalesClass.MajorSalesClass				= Item.MajorSalesClass
				and   (related.PriceListSalesClass.MinorSalesClass				= Item.MinorSalesClass
				or 	   related.PriceListSalesClass.MinorSalesClass  			= blank))

		PriceListContractPromotionRel
			one-to-many relation to PriceListContractPromotion
			Field Mapping uses symbolic key
				related.Company													= Company
				related.PriceListContractPromotion.Customer						= LocalCustomer
				related.PriceListContractPromotion.ListName						= LocalListName
				related.PriceListContractPromotion.Promotion					= LocalPromotion
			
		PriceBaseItemRel
			one-to-many relation to PriceBaseItem
			Field Mapping uses symbolic key
				related.Company													= Company
				related.InventoryLocation										= DerivedInventoryLocation
				related.Currency												= LocalCurrency
				related.PriceBase												= LocalBaseName
                related.Item													= Item

		InventoryCompanyRel
            one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company = Company

		SellingItemUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingUnitOfMeasure
			Instance Selection
				where (related.ValidForSelling.Default
				or 	   related.ValidForSelling.Valid)
		
		SellingPriceItemUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= InventoryCompanyRel.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingPriceUnitOfMeasure
			Instance Selection
				where (related.ValidForSellPrice.Default
				or 	   related.ValidForSellPrice.Valid)			

		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company				= Company
                related.Customer			= Customer
                
        RecurringBillingItemOperatorRel 
    		one-to-one relation to RecurringBillingItemOperator
    		Field Mapping uses Set2
	    		related.Company = Company
	            related.RecurringBillingItemOperator.Operator = actor
	            related.RecurringBillingItemOperator.Item = Item


                		
    Sets

        Set2
            indexed
            Instance Selection
                where (IsMasterExists)
            Sort Order
                Company
                RecurringInvoiceParameter
                MasterLineNumber
                Customer

        Set5
            indexed
            Instance Selection
                where (IsNotReady)
            Sort Order
                Company
                RecurringInvoiceParameter
                Customer
                CustomerRecurringInvoiceLine

    Field Rules
		HSNSACCode
			if (IsHSNSACCodeEnabled)
				default to MasterLineNumber.HSNSACCode
				required
					"HSN_/SACCodeIsRequired"
				cannot be changed
			else
    			cannot be entered	
    				"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
        Frequency
        	initial value is CustomerRecurringInvoice.Frequency
        	default to CustomerRecurringInvoice.Frequency
            required

        Item
            if (!LineType.Special)
	            required
            	constraint (Item exist)
            		"Item<Item>DoesNotExist"
				LocalMinorSalesClass=Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass=blank
            		constraint ( BillingItemGeneralLedgerAccountsRel exist)
            			"SalesAccountsDoNotExistForItem<Item>"													
           
            if (LineType.Inventoried)
            	constraint (ItemLocationRel exist)
            		"ItemLocationDoesNotExistForItem<Item>"

			if (RecurringInvoiceParameter.HasBillingInvoices)											
            	cannot be changed
            		"ItemCannotBeChanged;InvoiceProcessingHasBegun"										

		ItemDescription
			if (LineType.Special)
				required
					"DescriptionIsRequiredForASpecialItem"												
			else
				default to Item.Description
				

        ZeroAfterUse
			if (RecurringInvoiceParameter.HasBillingInvoices)											
            	cannot be changed
            		"ZeroAfterUseCannotBeChanged;InvoiceProcessingHasBegun"								

		Quantity
			if (!ZeroAfterUse)
				required																				
			else
				cannot be entered
					"CannotEnterQuantityWhenZeroAfterUse"												


			if (TotalQuantity entered)			
				constraint (RecurringInvoiceParameter.NumberOfInvoices entered)
					"RecurringInvoiceAddOnChargeDoesNotAllowSpreadCalculation;NumberOfInvoicesZero"		

				constraint (!ZeroAfterUse)
					"RecurringInvoiceAddOnChargeDoesNotAllowSpreadCalculation;ZeroAfterUseSetToNo"		
					
				LocalQuantity = TotalQuantity/RecurringInvoiceParameter.NumberOfInvoices

				initialize RoundedValue
				RoundedValue.RoundInput			= LocalQuantity
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedQtyRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				Quantity						= RoundedValue.RoundResult

		LineType

			default to LineType.NonStock
			
		CycleCode
        	initial value is CustomerRecurringInvoice.CycleCode
        	default to CustomerRecurringInvoice.CycleCode
        	
 		SellingUnitOfMeasure
			if (LineType.Special
			or IsRequireUnitOfMeasure)
				required																				

			if (!LineType.Special)
				constraint (SellingItemUOMRel exist)
					"InvalidSellingUnitOfMeasure"														
			
		UnitPrice
			if (LineType.Special)
				required
					"UnitPriceIsRequiredForSpecialItem"																					
 			
				constraint (UnitPrice decimals <= InventoryCompanyRel.NumberOfDecimalsCost)
					"TooManyDecimalDigitsEnteredForUnitCost:MaximumIs<InventoryCompanyRel.NumberOfDecimalsCost>"

 			constraint (CustomerRecurringInvoice.Currency entered)
				"CannotEnterUnitPriceWhenCustomerRecurringInvoiceCurrencyCodeIsNotAssigned"												

			if (!LineType.Special)
				if (UnitPrice not entered)
			
					if (StartDate < current corporate date)
						LocalPriceDate = current corporate date
					
					if (CustomerRecurringInvoice.RecurringInvoiceParameter.ListName entered)
						LocalListName = CustomerRecurringInvoice.RecurringInvoiceParameter.ListName
						LocalBaseName = CustomerRecurringInvoice.RecurringInvoiceParameter.ListName.BaseName
					else
						LocalListName = CompanyCustomerRel.PriceList
						LocalBaseName = CompanyCustomerRel.OrderEntryCustomer.PriceList.BaseName
						
					if (Company.CurrencyBasedPricing)
						LocalCurrency = CustomerRecurringInvoice.Currency
					else
						LocalCurrency = Company.Currency
	
					if (PriceListItemForCustomerRel exist)				
						if (LocalPriceDate >= PriceListItemForCustomerRel.BeginDate
						or  LocalPriceDate <= PriceListItemForCustomerRel.EndDate)
							constraint (!PriceListItemForCustomerRel.SalesProhibited)
								"Item<Item>IsProhibitedForSaleToCustomer<Customer>;PriceListItemSalesProhibited"								
	
							initialize LocalPromotion
							LocalListName = PriceListItemForCustomerRel.PriceListContractPromotion.ListName
							LocalCustomer = Customer
							
							LocalBaseName = PriceListContractPromotionRel.BaseName
	
					else
					if (PriceListSalesForCustomerClassRel exist)
						if (LocalPriceDate >= PriceListSalesForCustomerClassRel.BeginDate
						or  LocalPriceDate <= PriceListSalesForCustomerClassRel.EndDate)
							constraint (!PriceListSalesForCustomerClassRel.SalesProhibited)
								"SalesClassIsProhibitedForSaleToCustomer<Customer>;PriceListSalesClassSalesProhibited"					
	
							constraint (!PriceListSalesForCustomerClassRel.AmalgamatedPricing)
								"Item<Item>RequiresGroupPricing;PriceListSalesClassPriceFlagSet"												
	
							initialize LocalPromotion
							LocalListName = PriceListSalesForCustomerClassRel.PriceListContractPromotion.ListName
							LocalCustomer = Customer
							
							LocalBaseName = PriceListContractPromotionRel.BaseName
					else
					if (PriceListItemForListNameRel exist)
						if (LocalPriceDate >= PriceListItemForListNameRel.BeginDate
						or  LocalPriceDate <= PriceListItemForListNameRel.EndDate)
							constraint (!PriceListItemForListNameRel.SalesProhibited)
								"Item<Item>IsProhibitedForSaleToCustomer<Customer>;PriceListItemSalesProhibited"								
	
							initialize LocalCustomer
							LocalListName = PriceListItemForListNameRel.PriceListContractPromotion.ListName
							LocalPromotion = PriceListItemForListNameRel.PriceListContractPromotion.Promotion
							
							LocalBaseName = PriceListContractPromotionRel.BaseName
					else						
					if (PriceListSalesClassForListNameRel exist)
						if (LocalPriceDate >= PriceListSalesClassForListNameRel.BeginDate
						or  LocalPriceDate <= PriceListSalesClassForListNameRel.EndDate)
							constraint (!PriceListSalesClassForListNameRel.SalesProhibited)
								"SalesClassIsProhibitedForSaleToCustomer<Customer>;PriceListSalesClassSalesProhibited"					
	
							constraint (!PriceListSalesClassForListNameRel.AmalgamatedPricing)
								"ItemRequiresGroupPricing;PriceListSalesClassPriceFlagSet"												
	
							initialize LocalCustomer
							LocalListName = PriceListSalesClassForListNameRel.PriceListContractPromotion.ListName
							LocalPromotion = PriceListSalesClassForListNameRel.PriceListContractPromotion.Promotion
							
							LocalBaseName = PriceListContractPromotionRel.BaseName
					else
					if (PriceListItemRel exist)
						constraint (!PriceListItemRel.SalesProhibited)
							"SalesClassIsProhibitedForSaleToCustomer<Customer>;PriceListItemSalesProhibited"							
						
						initialize LocalCustomer
						initialize LocalPromotion
							
						constraint (PriceListContractPromotionRel exist)
							"PriceListDoesNotExist"																						
						
						LocalBaseName = PriceListContractPromotionRel.BaseName
	
					else
					if (PriceListSalesClassRel exist)
						constraint (!PriceListSalesClassRel.SalesProhibited)
							"PriceListSalesClassSalesProhibitedForSaleToCustomer<Customer>"												
	
						initialize LocalCustomer
						initialize LocalPromotion
	
						constraint (PriceListContractPromotionRel exist)
							"PriceListDoesNotExist"																						
						
						LocalBaseName = PriceListContractPromotionRel.BaseName
															
					constraint (PriceBaseItemRel exist)
						"BasePriceDoesNotExistForItem<Item>"																			
				
		SellingPriceUnitOfMeasure
			if (LineType.Special)
				default to SellingUnitOfMeasure

				constraint (SellingPriceUnitOfMeasure = SellingUnitOfMeasure)
					"SellingPriceUnitOfMeasureAndSellingUnitOfMeasureShouldBeSameForSpecialItem"

			if (!LineType.Special)
				constraint (SellingPriceItemUOMRel exist)
					"SellingPriceUnitOfMeasure<SellingPriceUnitOfMeasure>IsNotValidForItem<Item>"											
 				
        TaxExemptCode
        	if (CustomerRecurringInvoice.TaxExemptCode entered)
	    		if (ItemLocationRel exist)
	        		if (ItemLocationRel.TaxableWhenSold
	        		and CustomerRecurringInvoice.TaxExemptCode.Taxable)
	        			default to TaxExemptCode.Taxable
	    			else
	    				default to TaxExemptCode.Exempt
	    		else
	    			default to CustomerRecurringInvoice.TaxExemptCode
    			
    		if (TaxExemptCode.Taxable)
    			constraint (CustomerRecurringInvoice.TaxExemptCode.Taxable)
    				"InvoiceLineCannotBeTaxable;CustomerRecurringInvoiceIsExempt"						
    			
    	TaxCode
    		if (TaxExemptCode.Taxable)
    			default to CustomerRecurringInvoice.TaxCode

			constraint (TaxExemptCode.Taxable)
				"TaxCodeCannotBeEnteredWhenTaxExemptCodeIsExempt"										
    		
    	StartDate
    		initial value is CustomerRecurringInvoice.StartDate
    		default to CustomerRecurringInvoice.StartDate

			required
			
    		constraint (StartDate >= CustomerRecurringInvoice.StartDate)
    			"StartDateCannotBeLessThanCustomerRecurringInvoiceStartDate"							
			
		StopDate
			initial value is CustomerRecurringInvoice.StopDate
			default to CustomerRecurringInvoice.StopDate
			
			if (CustomerRecurringInvoice.StopDate entered)
				required
			
			constraint (StopDate >= StartDate)
				"StopDateCannotBeLessThanStartDate"														

			constraint (StopDate <= CustomerRecurringInvoice.StopDate)
				"StopDateCannotBeGreaterThanCustomerRecurringInvoiceStopDate"							
				
		Project
			initial value is CustomerRecurringInvoice.Project
			default to CustomerRecurringInvoice.Project
		
        Territory
        	initial value is CustomerRecurringInvoice.Territory
        	default to CustomerRecurringInvoice.Territory
        	
        SalesRepresentative
        	initial value is CustomerRecurringInvoice.SalesRepresentative
			default to CustomerRecurringInvoice.SalesRepresentative

			if (SalesRepresentative2 entered)
				required
					"SalesRepresentativeRequiredWhenSalesRepresentative2Entered"						
				        		
        SalesRepresentative2
        	initial value is CustomerRecurringInvoice.SalesRepresentative2
       		default to CustomerRecurringInvoice.SalesRepresentative2
        		
			constraint (SalesRepresentative2 != SalesRepresentative)
				"SalesRepresentative2CannotBeEqualToSalesRepresentative"								


        CommissionRate1
        	if (SalesRepresentative entered)
       			default to CustomerRecurringInvoice.CommissionRate1
				default to SalesRepresentative.CommisionPercent
			else
				cannot be entered
					"CannotEnterCommissionRateWithoutSalesRepresentative"								

			constraint (CommissionRate1 <= 100%)
				"CommisionRateForSalesRepresentativeShouldNotBeGreaterThan100%"  					


        CommissionRate2
        	if (SalesRepresentative2 entered)
	       		default to CustomerRecurringInvoice.CommissionRate2
	       		default to SalesRepresentative2.CommisionPercent
			else
				cannot be entered
					"CannotEnterCommissionRateWithoutSalesRepresentative2"								

			constraint ((CommissionRate1 + CommissionRate2) <= 100%)
				"CommissionRatesForSalesrepresentative&SalesRepresentative2CannotBeGreaterThan100%"		
        	
        CommissionSplitPercentage
 			if (SalesRepresentative2 entered)
	       		default to CustomerRecurringInvoice.CommissionSplitPercentage
				required
					"CommissionSplitRequiredWhenSalesRepresentative2Entered"							
			else
				cannot be entered        
					"CannotEnterCommissionSplitIfSalesRepresentative2NotEntered"						
		
	Actions
		Create is a Create Action
			Action Rules
				if (CustomerRecurringInvoice.RecurringInvoiceParameter.CurrentBillDate entered)
					LocalCurrencyDate = CustomerRecurringInvoice.RecurringInvoiceParameter.CurrentBillDate
				else 
				if (StartDate < current corporate date)
					LocalCurrencyDate = current corporate date
				else
					LocalCurrencyDate = StartDate
				
				if (CustomerRecurringInvoice.Currency != RecurringInvoiceParameter.Currency)
					LocalCurrencyTable								= Company.FinanceEnterpriseGroup.CurrencyTable
					LocalFromCurrency								= RecurringInvoiceParameter.Currency
					LocalCurrencyExchange.ToCurrency   				= CustomerRecurringInvoice.Currency
					LocalItemType									= LineType
					LocalConvertedUnitPrice 						= LocalCurrencyExchange.OutputCurrencyUnitCost 			
				
		Update is an Update Action


        UpdateForZeroAfterUse is an Instance Action
        	valid when (IsZeroAfterUse) 
        	
        	Parameters
				PrmQuantity	  is a Quantity		
				PrmSkip		  is Boolean  

			Action Rules
				constraint (IsZeroAfterUse)
					"CannotUpdateIfNotZeroAfterUse"
				constraint (RecurringBillingItemOperatorRel exists)
					"NotAuthorizedAsOperatorForItem<Item>"
				
				Quantity = PrmQuantity
				Skip   = PrmSkip	
						
											
		Delete is a Delete Action
			Action Rules
				constraint (InvoiceQuantity not entered)
					"CannotDelete;ProcessingHasBegun,InvoiceQuantityGreaterThanZero"					
		
				constraint (BilledAmount not entered)
					"CannotDelete;ProcessingHasBegun,BilledAmountGreaterThanZero"						

