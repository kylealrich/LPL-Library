ReceivablePayment is a BusinessClass
	owned by ar
	prefix is APM
	classic name is ARPAYMENT
	Ontology
		symbolic key is ReceivablePayment
			classic set name is APMSET1
			classic name is PAYMENT-SEQ
			classic name for ReceivablePaymentHeader is BATCH-NBR

	Patterns
		implements StaticJava
		disable AuditIndex
		implements BODId
		implements Archivable


	Persistent Fields

		Status										is Numeric size 1
			States
				Unreleased			value is 0
				ReleasedUnassigned	value is 1
					default label is "Released unassigned"
				Open				value is 2
				FullyApplied		value is 7
					default label is "Fully applied"
				Closed				value is 8
				Historical			value is 9
		Customer
		BankEntity									is like BankEntity
		BankAccountNumber
			classic name is BANK-ACCT-NBR
		GeneralLedgerDate							is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		TypeOfPayment								is AlphaUpper size 1
			classic name is TRANS-TYPE
			States
				NonArPayment			value is "N"
					default label is "Non AR payment"
				CustomerPayment			value is "P"
					default label is "Customer payment"
				BillOfExchangePayment	value is "B"
					default label is "Bill Of Exchange payment"
		PaymentNumber									is a TransactionNumber
			classic name is TRANS-NBR
		LastApplicationSequence
			disable Auditing
			classic name is APPLIED-SEQ
		LastRemittanceSequence
			disable Auditing
			classic name is REMIT-SEQ
		LastDistributionSequence					is a DistSeq
			disable Auditing
			classic name is DIST-SEQ
		ReceivableProcessLevel
			classic name is PROCESS-LEVEL
		CancelDate									is Date
		TransferredToCustomer						is a Customer
			classic name is TRNS-CUST
		CashCode
		ReceivedNotAppliedReceivableGeneralLedgerCode is a ReceivableGeneralLedgerCode
			sql name is RNAReceivableGeneralLedgerCode
			classic name is AR-CODE
			default label is "ReceivedNotAppliedReceivableGlobalLedgerCode"
		OriginalCurrency							is a FromCurrency
			classic name is ORIG-CURRENCY
			default label is "PaymentCurrency"	
		CurrencyRate								is an OrigRate
			classic name is ORIG-RATE
		DepositDate									is an ExchangeDate
		TransactionAmount							is a CurrencyAmount
			classic name is ORIG-AMT
				precision is OriginalCurrency.NumberOfDecimals 
			default label is "PaymentAmount"

		BaseAmount									is an InternationalAmount
			classic name is TRAN-AMT
			precision is Company.Currency.NumberOfDecimals
		BalancingDistributionAmountCompanyCurrency	is an InternationalAmount
			sql name is BDAmountCompanyCurrency
			classic name is BASE-DETAIL
			precision is Company.Currency.NumberOfDecimals
		CurrencyRateToCustomerGroupCurrency
			sql name is CRateToCustomerGroupCurrency
			classic name is GROUP-RATE
		CustomerGroupCurrencyMultiplicationOrDivision
			sql name is CGCMultiplicationOrDivision
			classic name is GROUP-MUDV
		LastStatementDate							is Date
			classic name is LAST-STA-DATE
		AppliedAmount								is an InternationalAmount
			classic name is ORIG-APP-AMT
				precision is OriginalCurrency.NumberOfDecimals
		BaseAppliedAmount							is a InternationalAmount 
			classic name is APPLD-AMT
			precision is Company.Currency.NumberOfDecimals
		ReferenceNumber								is an ArReference
			classic name is AR-REFERENCE
		ReferenceType
			classic name is REF-TYPE
		CurrencyDecimalsNumber						is an OrigNd
			classic name is ORIG-ND
		Prepayment
			classic name is PREPAY-FLAG
		CreditAppliedAmount							is an InternationalAmount
			classic name is ORIG-CR-APPLD
				precision is OriginalCurrency.NumberOfDecimals
		BaseCreditAppliedAmount						is an InternationalAmount
			classic name is CREDIT-APPLD
			precision is Company.Currency.NumberOfDecimals
		AdjustAmountTransactionCurrency				is an InternationalAmount
			sql name is AAmountTransactionCurrency
			classic name is ORIG-ADJ-AMT
				precision is OriginalCurrency.NumberOfDecimals
		BaseAdjustAmount							is an InternationalAmount
			classic name is ADJ-AMT
			precision is Company.Currency.NumberOfDecimals
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		TransactionHistoryPeriods					is a HistPer
			classic name is HIST-PER
		LastSelectApplicationSequence				is a SelectSeq
			disable Auditing
			classic name is SELECT-SEQ
		LastFinanceChargeDate						is Date
			classic name is LAST-FC-DATE
		ReceivableOperator
			classic name is OPR-CODE

		FinanceDimension2
			default label is "<GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension2Label>"
		Project
		ProjectContract

		TransferDate								is Date
		NationalAccountLastStatementDate			is Date
			sql name is NAccountLastStatementDate
			classic name is NA-LST-ST-DATE
		TransferredFromCustomer						is a Customer
			classic name is TRANS-FRM-CUST
		TransferAmountTransactionCurrency			is an InternationalAmount
			sql name is TAmountTransactionCurrency
			classic name is TRANSFER-AMT
		Origin										is AlphaUpper size 1
			classic name is ORIG-CODE
			States
				Manual								value is " "	
				Conversion							value is "C"	
				PaymentInterface					value is "N"	
				BankStatementInterface				value is "B"	
				ElectronicFundsTransfer				value is "E"
				ThirdPartyPaymentProcessing			value is "T"	
				IntercompanyBilling					value is "I"	
		ContractRebateGroup
		OriginatingInterfaceRun						is like ReceivablesInterfaceResult
		MandateID									is AlphaUpper size 35
		MandateType									is AlphaUpper size 2
			States
				CORE		value is 01
				B2B			value is 02
				COR1		value is 03
		OriginatingICBSettlement					is BusinessObjectReference 
		BackgroundProcessing						is Numeric size 1
			States
				ProcessSelections		value is 1
					default label is untranslatable
				TaxProcessing			value is 2
				ReversalProcessing		value is 3
		ErrorMessage					is Alpha 200
		ShipTerm
		CashDetailState								is AlphaUpper size 1
			States
				None								value is blank
				Unreleased							value is "U"
				Amended								value is "A"
				Released							value is "R"
		EFTPayCreationResult						is like EFTPaymentCreationResult
		CashManagementAccount						
		BankStatement								
		BankStatementLine							
		IDMUniqueID									is a DocumentPID
			protected
		IDMJob										is like IDMJob
			protected
		IDMPrinter
		FirstPaymentTransferDate					is Date						
		ReceivableDistributionCategory
			default label is "DistributionCategory"
		InterfacePayment2IDMUniqueId					is like IDMPID
			protected


	Transient Fields
		AdjustmentReason							is an ApplicationAdjustmentReason
		Amount										is an InternationalAmount
		Description
		CompletionMessage							is Alpha 150
		FromPayment									is Numeric 6
		ReceivableDistributionArray
		SearchName									
		TransientSelectedForAP						is Alpha 3  
			derive value from DerivedIsSelectedForAP

		TransientSignedTransactionAmount			is like InternationalAmount
			derive value from SignedTransactionAmount
		TransientSignedOpenAmount					is like InternationalAmount
			derive value from SignedOpenAmount
		TransientSignedBaseAmount					is like InternationalAmount
			default label is "Amount"	
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseAmount
		TransientSignedBaseOpenAmount				is like InternationalAmount
			default label is "OpenAmount"	
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseOpenAmount
		TransientSignedBaseCurrentAmount			is like InternationalAmount
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseCurrentAmount
		TransientSignedCustomerGroupAmount	is like InternationalAmount	
			default label is "Amount"
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedCustomerGroupAmount
		TransientSignedCustomerGroupOpenAmount	is like InternationalAmount	
			default label is "OpenAmount"
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedCustomerGroupOpenAmount
		TransientSignedNationalAccountAmount	is like InternationalAmount	
			default label is "Amount"
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedNationalAccountAmount
		TransientSignedNationalAccountOpenAmount	is like InternationalAmount	
			default label is "OpenAmount"
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedNationalAccountOpenAmount
		TransientUnreleasedIndicator				is Alpha 1
			derive value from UnreleasedIndicator
		TransientCancelOrTransfer					is Alpha 20
			derive value from CancelOrTransfer
		TransientUpdateReceivableProjectTransaction is Boolean
		TransientSeparatePaymentAmount				is like InternationalAmount
		BypassGLDateEdit							is Boolean
		RTMPendingIndicator							is Alpha 1
		PaymentReversalPendingIndicator				is Alpha 1
		ARToAPPendingIndicator						is Alpha 1
		PendingApplicationsIndicator				is Alpha 1
		UnpostedApplicationsIndicator				is Alpha 1
		UnreleasedIndicator							is Alpha 1
		BypassGLDateForceDefault					is Boolean

		TransientMixedApplied						is Boolean		
		TransientCashDetailAmountRemaining			is like InternationalAmount
		TransientCashDetailExists					is Boolean
		TransientDetailRNAAppliedStatus				is Numeric 3
		TransientAmountApplied						is an InternationalAmount
		TransientPaymentReversalHeaderSelections	is an InternationalAmount
			default label is "Selections"
			derive value from DerivedPaymentReversalHeaderSelections
		TransientPaymentReversalNewOpenAmount		is an InternationalAmount
			default label is "NewOpenAmount"
			derive value from DerivedPaymentReversalNewOpenAmount
		TransientIsolatedPaymentCompany				is an IsolatedPaymentCompany 
			derive value from Company
		TransientPaymentOpen						is like InternationalAmount	
			derive value from PaymentOpen
		TransientDerivedStatus2						is Alpha 25	
			derive value from DerivedStatus
			default label is "DerivedStatus"
		TransientDerivedStatusStateField			is Numeric 1
			default label is "Status"
			derive value from DerivedStatusStateField
			States
				ReleasedUnassigned						value is 1
				Open									value is 2
				Unreleased								value is 3
				Transferred								value is 4
				FullyApplied							value is 7
				Closed									value is 8
				Historical								value is 9
		TransientTransferredFromCustomer			is Alpha 12
			default label is "TransferredFromCustomer"
			derive value from DerivedTransferredFromCustomer
		TransientTransferredToCustomer				is Alpha 12
			default label is "TransferredToCustomer"
			derive value from DerivedTransferredToCustomer
		BypassProjectDateEdit	



		TransientOpenOnlyStatus					is Numeric 1	
			default label is "Status"
			derive value from DerivedStatusStateField
			States
				Open									value is 2
		PaymentReversalHeaderPendingIndicator			is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasReverseHeader
		TransientIDMUniqueID							is like IDMPID
		TransientIDMDocumentType						is like IDMDocumentType 

	Local Fields
		NewBODTracker  				is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker	is Numeric 15
		Error						is Boolean
		LocalErrorMessage			is Alpha 300
		LocalReference					is Alpha size 100

		LocalGeneralLedgerSystemCode				is a GeneralLedgerSystemCode
		LocalCurrencyTable							is a CurrencyTable
		LocalBaseAmount								is a CurrencyExchange
		CurrencyWork								is a FromCurrencyExchangeGroup
		CurrencyWork2								is a ReceivableExchange
		NewPayment									is a ReceivablePayment view

		NewReceivableApplication					is a ReceivableApplication view
		LocalTransactionType						is a ReceivableInvoiceType
		LocalInvoiceRange							is a InvoiceRange
		LocalInvoice								is like Invoice



		LocalReceivableTransactionSummary			is AlphaUpper size 2
			States
				PaymentsCharges			value is "03"
					default label is "Payments/Charges"
				NonArPaymentsEntered	value is "04"
					default label is "Non-AR Payments Entered"
		LocalAdjustmentReason							is an ApplicationAdjustmentReason
		LocalAdjustmentAmount							is an InternationalAmount
		LocalSetFinanceCodeBlockComponents				is a SetFinanceCodeBlockComponents
		LocalDescription								is like Description
		LocalAdjustmentAccount							is a FinanceCodeBlock	
		LocalGLFinanceCodeBlock							is a FinanceCodeBlock
		LocalOperator									is a ReceivableOperator
		LocalCompany									is like Company
		LocalCustomer									is a Customer
		ValidateReceivableActivityInformation
		LocalPayment									is like ReceivablePayment
		LocalTypeOfPayment								is AlphaUpper size 1
		I1												is Numeric 3
		I2												is Numeric 3
		I3												is Numeric 3
		SelectCounter									is Numeric 9
		CalculateTax
		LocalTaxCode									is a TaxCode
		LocalTaxCalc									is Alpha 1
		ProcessTaxHistory
		LocalTaxHistoryProcessed						is Alpha 1
		LocalCurrencyWork								is a ReceivableExchange
		LocalLastDistributionSequence					is a DistSeq
		LocalTaxableAmount								is an InternationalAmount
		WorkTotal										is like InternationalAmount
		LocalRemitSelectedAmount						is like InternationalAmount





		LocalCalculateTaxExecuted						is Alpha 1
		LocalCurrency									is like Currency
		LocalGeneralLedgerDate							is Date
		CashApplicationOperator							is a ReceivableOperator
		WorkAmount										is an InternationalAmount
		LocalDaysDifference								is Decimal size 5.0
		LocalCurrentDate								is Date

		LocalReassignDate								is Date
		LocalReassignAmount								is an InternationalAmount
		LocalPaymentCashDetailAccount					is a FinanceCodeBlock
		LocalPaymentAmountRemaining						is like InternationalAmount
		LocalCashDetailApplicationSum					is like InternationalAmount
		LocalCashDetailRemitApplied						is Boolean
		LocalCashDetailCompanySetupMismatch				is Boolean
		LocalAllowDetailFinanceStructure				is Boolean
		LocalRestrictDueToPendingOrCompletedWork		is Boolean
		LocalDeterminedIfHasPendingOrCompletedWork		is Boolean
		LocalShowOnCashApplicationSelectList			is Boolean
		LocalShowOnCashApplicationSelectListDone		is Boolean



		DBCompany										is like ReceivableCompany
		DBCustomer										is like Customer
		DBInvoice										is like ReceivableInvoice
		DBInvoiceCompany								is like ReceivableCompany	
		DBInvoiceDetail									is like Sequence			
		DBPaymentSeq									is like Sequence
		DBTransactionType								is a ReceivableInvoiceType

		DBCreditCompany									is like ReceivableCompany
		DBCreditTransactionType							is like ReceivableInvoiceType
		DBCreditInvoice									is like ReceivableInvoice
		DBCreditPaymentSeq								is like Sequence

		DBNationalCompany								is like ReceivableCompany
		DBNationalCustomer								is like Customer

		LocalNationalCompany							is like ReceivableCompany
		LocalNationalCustomer							is like Customer

		ThisReceivablePaymentRemittance					is like ReceivablePaymentRemittance

		NextSentence									is Boolean
		DoneWith4050									is Boolean

		WorkPaymentOpenAmount							is like InternationalAmount

		WsLastMultObligSeq								is Numeric 6
		WsMultObligCount								is Numeric 6
		WsMultObligOpenAmount							is like InternationalAmount

		WsMultObligTotalAmount							is like InternationalAmount


		WsCreditOpen									is like InternationalAmount
		WsCreditOpenInvoiceCurrency						is like InternationalAmount
		MixedAppliedFlag								is Alpha 1
		SaveRemitAmount									is like InternationalAmount
		WsTotalApplied									is like InternationalAmount
		WsTotalAdjust									is like InternationalAmount
		WsDone											is Boolean
		WsInvoiceCurrency								is Alpha 5
		WsAroSw											is Boolean
		RecordSelected									is Boolean
		WsNationalCompany								is like ReceivableCompany
		WsNationalCustomer								is like Customer
		WorkRemitTransType								is Alpha 1
		WorkRemitInvoice								is like ReceivableInvoice
		WsRMIApplied									is like InternationalAmount
		WsRemitApplied									is like InternationalAmount
		WsDistributionSetSum							is like InternationalAmount
		WsLocalDifference								is like InternationalAmount
		LocalApplicationAmountInvoiceNetSign			is like InternationalAmount
		LocalDistributionOpenAmount						is like InternationalAmount
		LocalAmountToAdd								is like InternationalAmount
		LocalOldAmount									is like InternationalAmount
		LocalNewAmount									is like InternationalAmount
		LocalDistributionSetNeedsReview					is Boolean

		Subx											is Numeric 4
		I9												is Numeric 4
		WsCmpinz										is Boolean
		WsNegative										is Boolean
		WsBaseOpenAmount								is like InternationalAmount

		WsVariance										is like InternationalAmount
		WsTransactionOpenAmount							is like InternationalAmount
		WorkUnappliedCompanyCurrency					is like InternationalAmount
		WorkUnappliedAmount								is like InternationalAmount
		WorkInvoiceOpenPaymentCurrency					is like InternationalAmount
		WsCheckAmt										is like InternationalAmount
		WorkGLDate										is Date
		WorkUnAppliedAdjustAmount						is like InternationalAmount
		WsSkipWorkUnapplied								is Boolean
		WsArrayInvoiceExists							is Boolean
		WsArrayInc										is Numeric 4
		WsDetailProcessing								is Boolean

		WsCompany										is like Company
		WsCustomer										is like Customer
		WorkErrorNumber									is Numeric 3
		WorkDebitCurrency								is Alpha 5
		WorkCreditCurrency								is like Currency

		WsARACompany									is like Company
		WsARATransType									is like TransType
		WsARAInvoice									is like Invoice
		WsARAPaymentSeq									is like Sequence
		WsARABatchNumber								is like BatchNumber
		WsARAApplicationSequence						is like ApplicationSequence


		AR130WsBaseOpenAmount							is like InternationalAmount
		WsTransactionDiscount							is like InternationalAmount
		EndSelection									is Boolean
		WsPriorApplication								is Boolean

		WsTransactionAmount								is like InternationalAmount

		WsArray											is a CashApplicationArray
		ExemptDiscounting								is Boolean
		ExemptApplicationTolerances						is Boolean
		ApplicationOccurred								is Boolean
		LocalPeriod										is Numeric 2
		LocalGiveNoDiscount								is Boolean

		LocalFinanceEnterpriseGroup						is like FinanceEnterpriseGroup	
		LocalCashApplicationResult						is a CashApplicationResult

		WorkApplicationCode								is an AutomaticCashApplicationCode
		InvoiceDetailGroup								is a ReceivableInvoiceDetail group
		LocalClaimsAndLiabilitiesHeader					is a ClaimsAndLiabilitiesHeader


		LocalCurrencyCalculationGroup												is a CurrencyCalculationGroup
		LocalDistributionTotal														is a RoundedCurrencyAmountGroup
		LocalRoundedAmount															is a RoundedCurrencyAmountGroup
		ActionCode
		LocalReceivableDeleteTracker												is Boolean

		WsOverAppliedAmount															is like InternationalAmount
		WsOverAppliedAmountInvoiceCurrency											is like InternationalAmount
		LocalSkipMaximumOverage														is Boolean

		SumOfPendingAppliedCreditMemoRelAmountsDone									is Boolean	
		SumOfPendingAppliedNonCreditMemoRelAmountsDone								is Boolean	
		SumOfPendingAdjustMemoRelAmountsDone										is Boolean	
		SumOfPendingAdjustNonMemoRelAmountsDone										is Boolean	
		SumOfNonARReceivableGLDistributionRelAmountsDone							is Boolean	
		SumOfRemittanceInvoiceAndDebitMemoRelAmountsDone							is Boolean	
		SumOfRemittanceCreditMemoRelAmountsDone										is Boolean	
		SumOfPaymentsAgePeriodRelAmountsDone										is Boolean	


		SumOfPendingAppliedCreditMemoRelPaymentApplicationAmount					is an InternationalAmount	
		SumOfPendingAppliedCreditMemoRelDerivedSelectDiscountAmount					is an InternationalAmount	
		SumOfPendingAppliedNonCreditMemoRelPaymentApplicationAmount					is an InternationalAmount	
		SumOfPendingAppliedNonCreditMemoRelDerivedSelectDiscountAmount				is an InternationalAmount	
		SumOfPendingAdjustMemoRelCreditAdjustAmount									is an InternationalAmount	
		SumOfPendingAdjustNonMemoRelAdjustAmount									is an InternationalAmount	
		SumOfNonARReceivableGLDistributionRelDistributionAmountCurrencyAmount		is an InternationalAmount	
		SumOfRemittanceInvoiceAndDebitMemoRelAppldAmt								is an InternationalAmount	
		SumOfRemittanceCreditMemoRelAppldAmt										is an InternationalAmount	
		SumOfPaymentsAgePeriodRelTransactionAmount									is an InternationalAmount	
		SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency	is an InternationalAmount

		LocalGeneralLedgerCompanyGroup												is a GeneralLedgerCompanyGroup
		LocalCalculateReceivableFinanceStructure									is a CalculateReceivableFinanceStructure
		LocalToAccountingEntity														is like AccountingEntity
		LocalAccountingUnit															is like AccountingUnit
		LocalFinanceDimension1														is a FinanceDimension1
		LocalAnswer																	is Alpha size 1
		LocalPaymentNonAR															is a ReceivablePayment

		LocalOriginalCurrency						is Alpha size 5
		LocalCountrySpecificID						is AlphaUpper 50
		LocalReceivablePaymentCount					is Numeric 9
		LocalTaxID									is AlphaUpper 25
		LocalItalyTaxID								is AlphaUpper 25
		LocalReceivablePaymentHeader				is Numeric 6
		LocalTriggerFrom							is Alpha size 100
		LocalDistSequence							is Numeric size 9
		LocalBODVariationID							is Numeric size 9
		LocalLineCounter							is Numeric size 9
		LocalDebtorPartyXML							is XMLDocument
		LocalAlreadyDistPopulated					is Boolean
		NativeLPLRTBODTrigger						is Boolean


		LocalBODLineNumber							is Numeric size 9
		LocalMainUserTemplate						is Alpha size 250

		LocalConfigurationParameter					is Alpha size up to 200
		LocalNumberOfDecimals						is Numeric 1			
	

		IDMItem
		IDMGenerateDocument
		IDMAttributes
		IDMItemCopy
		LocalNewIDMUniqueID								is like IDMPID
		LocalIDMPrinter									is an IDMPrinter
		LocalRecipientEmailAddress						is like MultipleEmailAddress 
			holds pii
		LocalFromAndReplyToEmail						is an EmailAddress
			holds pii
		LocalCcEmailAddress								is like MultipleEmailAddress 
			holds pii
		LocalPaymentReceiptIDMEmailSubject				is Alpha 255
			Text Variables
				Company			value is Company
				CompanyName		value is Company.Name
				Customer		value is Customer
				CustomerName	value is Customer.Name
				PaymentNumber	value is PaymentNumber
				DepositDate		value is DepositDate
		IDMJobView										is an IDMJob view
		IDMXMLDefinition
		AttributeCtr				is Numeric 2
		LocalExecute				is Boolean	
		LocalAttachment				is an Attachment
		LocalOpenAmount       is an InternationalAmount
		LocalWorkAmount       is an InternationalAmount
		LocalCustomerGroupAmt is an InternationalAmount

	Context Fields
		FSMInboundBODTracker



		CompanyRange
		ApplicationCompanyRange						is a CompanyRange1
		CustomerRange
		DepositDateRange							is a DateRange
		PostingDateRange							is a DateRange2
		ApplPostingDateRange						is a DateRange3
		TransactionAmountRange						is an AmountRange
		BaseAmountRange								is an AmountRange3
		ReceivableProcessLevelRange
		ReceivableTransactionRangeApplication
		PaymentNumberRange							is a TransNbrRange
		BatchRange
		CurrencyRange


		FilterGeneralLedgerCompanyGroup				is a GeneralLedgerCompanyGroup
			default label is "FilterGlobalLedgerCompanyGroup"	
		CrossCustomerApplications					is a YesOrNo


	Rule Blocks

		CommonEdits
			constraint (!ReceivableApplicationRel exists)
				"CannotUpdate.ApplicationsExist"
			constraint (!ReceivableApplicationSelectRel exists)
				"CannotUpdate.PendingApplicationsExist"
			constraint (!RTMPaymentRel exists)
				"CannotChange.PaymentPendingRTM."
			constraint (!ApplicationAmountEntered)
				"CannotUpdate.ApplicationExists"

			if (Company.VendorCreateAndInterfaceToAP)
				constraint (!ARToAPApplicationSelectRel exists)
					"CannotChange.PaymentPendingTransferToAP."

			if (old Customer entered)
				constraint (Customer entered)
					"CannotUnassignCustomer"


		EditRelease
			if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
				constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
					"Global_\Ledger_\Date<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

			if (Company.DetailedCashDistributions)
				if (ReceivablePaymentCashDetail set exists)
					constraint (sum ReceivablePaymentCashDetail set.DistributionAmount.CurrencyAmount = TransactionAmount)
						"SumOf_\Cash_\DetailsMustEqual_\Payment_\Amount"

			if (IsZeroPayment)
				NextSentence = true
			else
			if (TypeOfPayment.CustomerPayment)
				constraint (PaymentOpen >= 0)
					"Payment<PaymentNumber>IsOverapplied.CannotRelease"
				constraint (!PendingAdjustMemoRel exists)
					"PendingMemoChargebackExistsForBatch<ReceivablePaymentHeader>AndPayment<PaymentNumber>"
				constraint (PendingOpenAmount >= 0)
					"OverApplicationPendingForBatch<ReceivablePaymentHeader>AndPayment<PaymentNumber>"

				if (AllowSelectDistributionSet) 
					if (ReceivablePaymentRemittanceRel exists)
						for each ReceivablePaymentRemittanceNoInvoiceDetailRel
							constraint (each.TransientDistributionSetState.ReadyForProcessing
							or 			each.TransientDistributionSetState.NotSpecified)
								"A_Remittance's_Distribution_StatusIs_Incomplete._\Payment:<PaymentNumber>_\Invoice_\Type:<each.ReceivableInvoiceType>_\Invoice:<each.ReceivableInvoice>"

			if (TypeOfPayment.NonArPayment)
				constraint (!DistributionsOutOfBalance)
					"DistributionsOutOfBalanceForBatch<ReceivablePaymentHeader>AndPayment<PaymentNumber>"

				if (CashCode.EditAvailableFunds
				or  CashCode.RestrictedFunds)
					invoke Delete CashCodeFundEditRel
					for each NonARReceivableGLDistributionRel
						initialize LocalCalculateReceivableFinanceStructure
						LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableCompanyDataGroup.TransactionCompany
						LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.ReceivableGLDistribution
						LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "R"
						LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
						LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

						LocalToAccountingEntity		= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
						if (Company.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalAccountingUnit			= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
						else
							LocalFinanceDimension1		= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

						if (CashCode.EditAvailableFunds
						and each.DistributionAmount.CurrencyAmount < 0)
							invoke Update CashCodeFundEditByFundRel
								invoked.EditAmount += (each.DistributionAmount.CurrencyAmount *-1)
						else
							if (CashCodeFundRel !exists)
								invoke Update CashCodeFundEditByFundRel

					constraint (ExceedesCashCodeFundBalanceRel !exists)
						"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
					invoke Delete CashCodeFundEditRel






		CheckProject

			if (Project entered)

				ValidateReceivableActivityInformation.Project						= Project
				constraint (ValidateReceivableActivityInformation.ErrorNumber not entered)
					"<ValidateReceivableActivityInformation.ErrorMessage>"

				if  (Company not entered
				and  ValidateReceivableActivityInformation.GoodCompany entered)
					Company = ValidateReceivableActivityInformation.GoodCompany

				if  (Customer not entered
				and  ValidateReceivableActivityInformation.GoodCustomer entered)
					Customer = ValidateReceivableActivityInformation.GoodCustomer

				if (ValidateReceivableActivityInformation.GoodCompany entered
				and ValidateReceivableActivityInformation.GoodCompany != Company)
					LocalCompany = ValidateReceivableActivityInformation.GoodCompany
					constraint (LocalReceivableCompanyRel exists)
						"ACCompanyDoesNotExistInReceivableSystem"
					constraint (LocalReceivableCompanyRel.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup)
						"ProjectCompanyIsNotPartOfPaymentCompanyCustomerGroup"

					if (ValidateReceivableActivityInformation.GoodCustomer entered
					and ValidateReceivableActivityInformation.GoodCustomer != Customer)
						LocalCompany  = Company
						LocalCustomer = ValidateReceivableActivityInformation.GoodCustomer
						constraint (LocalCompanyCustomerRel exists)
							"ProjectCustomerIsNotAssignedToPaymentCompany"
						constraint (LocalCompanyCustomerRel.ActiveStatus.Active)
							"ProjectCustomerIsSetForDeletion"
						confirmation required
							"ContractCompanyCustomerDoesNotEqualPaymentCompanyCustomer.Continue?"
					else
						confirmation required
							"ContractCompanyDoesNotEqualPaymentCompany.Continue?"

				if ((ValidateReceivableActivityInformation.GoodCompany not entered
				or   ValidateReceivableActivityInformation.GoodCompany = Company)
				and  ValidateReceivableActivityInformation.GoodCustomer entered
				and  ValidateReceivableActivityInformation.GoodCustomer != Customer)
					confirmation required
						"ContractCompanyCustomerDoesNotEqualPaymentCompanyCustomer.Continue?"

				Project											= ValidateReceivableActivityInformation.GoodProject



		ProcessRelease
			initialize ErrorMessage

			if (Company.DetailedCashDistributions)
				if (ReceivablePaymentCashDetail set exists)
					CashDetailState = CashDetailState.Released
				else
					CashDetailState = CashDetailState.None

			if (TypeOfPayment.CustomerPayment and Customer entered)

				WorkAmount		= BaseAmount * -1	

				for each UnpostedReceivableApplicationRel

					if  (each.ReceivableApplication.TransType.CustomerPayment)
						WorkAmount += each.CreditAdjustAmount
					else
						if  (each.ReceivableApplication.TransType.DebitMemo)
							WorkAmount += each.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
						if  (each.ReceivableApplication.TransType.CreditMemo)
							WorkAmount -= each.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						else
						if  (each.ReceivableApplication.TransType.Invoice)
							WorkAmount += each.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount








					invoke UnreleasedCashApplication.ReleaseFromReceivablePaymentHeader each


				if (IsZeroPayment)
					NextSentence = true
				else
				if (DepositDate > CompanyCustomerRel.LastPaymentDate
				and BaseAmount entered)
					invoke UpdateCurrentBalance CompanyCustomerRel
						invoked.ChangeAmount						= WorkAmount
						invoked.TransactionDate						= DepositDate
						invoked.CheckLastPaymentDate				= DepositDate
						invoked.CheckLastPaymentAmount				= BaseAmount
						invoked.PrmBalanceType						= 2	
						invoked.PrmReference						= Reference
				else
				if  (WorkAmount entered)
					invoke UpdateCurrentBalance CompanyCustomerRel
						invoked.ChangeAmount						= WorkAmount
						invoked.TransactionDate						= DepositDate
						invoked.PrmBalanceType						= 2	
						invoked.PrmReference						= Reference



				if (IsZeroPayment)
					NextSentence = true
				else
				if (BaseAmount entered)
					invoke UpdatePeriodTotals CompanyCustomerRel
						invoked.Type				= "P"
						invoked.Amount				= BaseAmount
						invoked.EffectiveDate		= GeneralLedgerDate

				if (AllowSelectDistributionSet) 
					if (ReceivablePaymentRemittanceRel exists)
						for each ReceivablePaymentRemittanceRel
							if (!each.InvoiceDetail entered
							and !each.TransientDistributionSetState.NotSpecified)
								invoke FastUpdate each
									invoked.Status	= 2 

			if (TypeOfPayment.NonArPayment)
				invoke NonArPaymentRelease NonARReceivableGLDistributionRel

				if (CallVertexByTransaction)
					invoke VertexProcessTaxHistoryByTransaction
				else
				if (TaxEntityUsesOneSource)
					invoke OneSourceProcessTaxHistoryByTransaction









				if (BaseAmount entered)
					LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.NonArPaymentsEntered
					if (!ReceivableTransactionSummaryRel exists)
						invoke Create ReceivableTransactionSummaryRel
					invoke AddAmount ReceivableTransactionSummaryRel
						if (BaseAmount < 0)
							invoked.Amount			= BaseAmount
						else
							invoked.Amount			= BaseAmount * -1


				for each NonARReceivableGLDistributionRel
					invoke RestrictedUpdate each
						invoked.FlipAmounts = true

				initialize LocalCurrencyCalculationGroup
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalCurrencyCalculationGroup.ExchangeDate					= DepositDate
				LocalCurrencyCalculationGroup.CurrencyAmount				= TransactionAmount
				LocalCurrencyCalculationGroup.FromCurrency					= OriginalCurrency
				LocalCurrencyTable 											= ReceivablePaymentHeader.CurrencyTable

				LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= Company.AccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= Company.AccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= Company.AccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyOne
				LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
				LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyThree
				LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFour
				LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFive

				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate

				initialize LocalDistributionTotal
				for each NonARReceivableGLDistributionRel
					LocalDistributionTotal.FunctionalAmount					+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalDistributionTotal.AlternateAmount					+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalDistributionTotal.AlternateAmount2					+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalDistributionTotal.AlternateAmount3					+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalDistributionTotal.ReportAmount1					+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalDistributionTotal.ReportAmount2					+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalDistributionTotal.ReportAmount3					+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalDistributionTotal.ReportAmount4					+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalDistributionTotal.ReportAmount5					+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

				initialize LocalRoundedAmount
				if ((LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount >=0 and LocalDistributionTotal.FunctionalAmount >= 0)
				or  (LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount <=0 and LocalDistributionTotal.FunctionalAmount <= 0))
					LocalRoundedAmount.FunctionalAmount					= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount - LocalDistributionTotal.FunctionalAmount
				else
					LocalRoundedAmount.FunctionalAmount					= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount + LocalDistributionTotal.FunctionalAmount

				if ((LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount >=0 and LocalDistributionTotal.AlternateAmount >= 0)
				or  (LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount <=0 and LocalDistributionTotal.AlternateAmount <= 0))
					LocalRoundedAmount.AlternateAmount							= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount - LocalDistributionTotal.AlternateAmount
				else
					LocalRoundedAmount.AlternateAmount							= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount + LocalDistributionTotal.AlternateAmount

				if ((LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount >= 0 and LocalDistributionTotal.AlternateAmount2 >= 0)
				or  (LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount <= 0 and LocalDistributionTotal.AlternateAmount2 <= 0))
					LocalRoundedAmount.AlternateAmount2							= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount - LocalDistributionTotal.AlternateAmount2
				else
					LocalRoundedAmount.AlternateAmount2							= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount + LocalDistributionTotal.AlternateAmount2

				if ((LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount >= 0 and LocalDistributionTotal.AlternateAmount3 >= 0)
				or  (LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount <= 0 and LocalDistributionTotal.AlternateAmount3 <= 0))
					LocalRoundedAmount.AlternateAmount3							= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount - LocalDistributionTotal.AlternateAmount3
				else
					LocalRoundedAmount.AlternateAmount3							= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount + LocalDistributionTotal.AlternateAmount3

				if ((LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount1 >= 0)
				or  (LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount1 <= 0))
					LocalRoundedAmount.ReportAmount1							= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount1
				else
					LocalRoundedAmount.ReportAmount1							= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount1

				if ((LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount >=0 and LocalDistributionTotal.ReportAmount2 >= 0)
				or  (LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount <=0 and LocalDistributionTotal.ReportAmount2 <= 0))
					LocalRoundedAmount.ReportAmount2							= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount2
				else
					LocalRoundedAmount.ReportAmount2							= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount2

				if ((LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount3 >= 0)
				or  (LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount3 <= 0))
					LocalRoundedAmount.ReportAmount3							= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount3
				else
					LocalRoundedAmount.ReportAmount3							= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount3

				if ((LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount4 >= 0)
				or  (LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount4 <= 0))
					LocalRoundedAmount.ReportAmount4							= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount4
				else
					LocalRoundedAmount.ReportAmount4							= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount4

				if ((LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount5 >= 0)
				or  (LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount5 <= 0))
					LocalRoundedAmount.ReportAmount5							= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount5
				else
					LocalRoundedAmount.ReportAmount5							= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount5

				LocalRoundedAmount.FunctionalAmount							= LocalRoundedAmount.FunctionalAmount * -1
				LocalRoundedAmount.AlternateAmount							= LocalRoundedAmount.AlternateAmount * -1
				LocalRoundedAmount.AlternateAmount2							= LocalRoundedAmount.AlternateAmount2 * -1
				LocalRoundedAmount.AlternateAmount3							= LocalRoundedAmount.AlternateAmount3 * -1
				LocalRoundedAmount.ReportAmount1							= LocalRoundedAmount.ReportAmount1 * -1
				LocalRoundedAmount.ReportAmount2							= LocalRoundedAmount.ReportAmount2 * -1
				LocalRoundedAmount.ReportAmount3							= LocalRoundedAmount.ReportAmount3 * -1
				LocalRoundedAmount.ReportAmount4							= LocalRoundedAmount.ReportAmount4 * -1
				LocalRoundedAmount.ReportAmount5							= LocalRoundedAmount.ReportAmount5 * -1

				if (LocalRoundedAmount.FunctionalAmount entered
				and	Company.AccountingEntity.FunctionalCurrency = last NonARReceivableGLDistributionRel.GeneralLedgerAccount.ToAccountingEntity.FunctionalCurrency)
					LocalRoundedAmount.ToFunctionalAmount = LocalRoundedAmount.FunctionalAmount
				if (LocalRoundedAmount.AlternateAmount entered
				and	Company.AccountingEntity.AlternateCurrency = last NonARReceivableGLDistributionRel.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency)
					LocalRoundedAmount.ToAlternateAmount = LocalRoundedAmount.AlternateAmount
				if (LocalRoundedAmount.AlternateAmount2 entered
				and	Company.AccountingEntity.AlternateCurrency2 = last NonARReceivableGLDistributionRel.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency2)
					LocalRoundedAmount.ToAlternateAmount2 = LocalRoundedAmount.AlternateAmount2
				if (LocalRoundedAmount.AlternateAmount3 entered
				and	Company.AccountingEntity.AlternateCurrency3 = last NonARReceivableGLDistributionRel.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency3)
					LocalRoundedAmount.ToAlternateAmount3 = LocalRoundedAmount.AlternateAmount3

				invoke RoundingUpdate last NonARReceivableGLDistributionRel
					invoked.RoundAmount = LocalRoundedAmount


				for each NonARReceivableGLDistributionRel
					invoke RemoteGLTransactionDetailUpdate each

				for each NonARReceivableGLDistributionRel
					invoke ReleaseGLTransactionDetailUpdate each

				include UpdateReceivableProjectTransaction


		UpdateReceivableProjectTransaction
			if  (BaseAmount not entered)
				NextSentence = true
			else
			if  (Project not entered
			and  ProjectContract not entered
			and  FinanceDimension2 not entered)
				invoke Delete ReceivableProjectTransactionRel
			else
				if (ReceivableProjectTransactionRel not exists)
					invoke Create ReceivableProjectTransactionRel
						fill in fields from this instance
						invoked.DueDate					= DepositDate
						invoked.TransactionDate			= DepositDate
						invoked.BaseAmount				= BaseAmount
						invoked.OpenBaseAmount			= PaymentOpenCompanyCurrency
						invoked.OpenSortBaseAmount		= PaymentOpenCompanyCurrency
						invoked.OpenTransactionAmount	= PaymentOpen
						invoked.TransactionAmount		= TransactionAmount
						if (CancelDate not entered
						and TransferDate entered)
							invoked.CancelDate		= TransferDate
						else
							invoked.CancelDate		= CancelDate
				else
					invoke Update ReceivableProjectTransactionRel
						fill in fields from this instance
						invoked.DueDate					= DepositDate
						invoked.TransactionDate			= DepositDate
						invoked.BaseAmount				= BaseAmount
						invoked.OpenBaseAmount			= PaymentOpenCompanyCurrency
						invoked.OpenSortBaseAmount		= PaymentOpenCompanyCurrency
						invoked.OpenTransactionAmount	= PaymentOpen
						invoked.TransactionAmount		= TransactionAmount
						if (LocalReassignAmount entered
						and LocalReassignDate entered)
							invoked.CancelDate			= LocalReassignDate
							if (invoked.TransactionAmount = LocalReassignAmount)
								invoked.Status			= 7
							else
								invoked.Status			= 2
						else
							if (CancelDate not entered
							and TransferDate entered)
								invoked.CancelDate		= TransferDate
							else
								invoked.CancelDate		= CancelDate


		UpdatePrepayment
			if (ReceivablePrepayment exists
			and ReceivablePrepayment.ReferenceType = "G")
				if (Project changed
				or  ProjectContract changed
				or  FinanceDimension2 changed)
					invoke Update ReceivablePrepayment
						invoked.InputReferenceType	= "G"
						invoked.Project				= Project
						invoked.ProjectContract		= ProjectContract
						invoked.FinanceDimension2	= FinanceDimension2


		CreateDistributionFromDistributionCategory
			if  (IsNonARPayment
			and  Status.Unreleased
			and  ReceivableDistributionCategory entered
			and (action type.Create
			or  (action type.Update
			and  ReceivableDistributionCategory changed)))
				if (NonARReceivableGLDistributionRel exists)
					confirmation required
						"ExistingDistributionsWillBeDeleted.Continue?"
					invoke Delete NonARReceivableGLDistributionRel

				if (ReceivableDistributionCategory entered)
					invoke CreatePaymentDistribution ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.TransType													= "N"
						invoked.BatchNumber													= ReceivablePaymentHeader
						invoked.Invoice														= PaymentNumber
						invoked.SequenceNumber												= ReceivablePayment
						invoked.ReceivableCompanyGroup.GlCompany							= Company
						invoked.ReceivableCompanyDataGroup.TransactionCompany				= Company
						invoked.ReceivableCompanyGroup.OriginCompany						= Company
						invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory 	= ReceivableDistributionCategory
						invoked.DistributionAmount.CurrencyAmount							= TransactionAmount
				

		EditProcessSelections
			constraint (BackgroundProcessing not entered)
				"BackgroundProcessRunning;CheckAsync"

			constraint (HasPendingTransactions)
				"NoPendingTransactionsExist"

			if (IsZeroPayment)
				constraint (PendingOpenAmount = 0)
					"ForZeroAmountPaymentAllSelectedRecordsMustNetToZero"
			else
			if (Company.PaymentOverApplication)
				constraint (PendingOpenAmount !< 0)
					"Payment<PaymentNumber>IsOverapplied;AdjustAmountsOrCreateChargebackMemoToOffsetOverAppliedAmount"	
			else
				constraint (PendingOpenAmount !< 0)
					"PaymentIsOverapplied;CannotBeProcessed"

			constraint (HasSelectAdjustments or HasSelectApplications)
				"NoPendingApplicationsExist"

			for each ReceivableApplicationAdjustmentSelectRel
				if (each.AdjustmentReason.AttachmentRequired)
					constraint (each.Attachment entered)
						"Receivable_\Reason_\Code<each.AdjustmentReason>For_\Payment<PaymentNumber>IsSetForAttachmentRequired;AddAnAttachment"

			for each ReceivableApplicationSelectRel
				if (each.IsAttachmentRequired)
					constraint (each.IsAttachmentEntered)
						"Receivable_\Reason_\Code<each.FirstAdjustmentReason>For_\Invoice<each.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice>IsSetForAttachmentRequired;AddAnAttachment"

			if (AllowSelectDistributionSet) 
				for each ReceivableApplicationSelectRel
					constraint (each.TransientDistributionSetState.ReadyForProcessing
					or			each.TransientDistributionSetState.NotApplicable)
						"The_\Distribution_\Set_\StatusIs_\IncompleteFor_\Invoice<each.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice>_\Sequence<each.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq>"

			initialize SelectCounter
			for each ReceivableApplicationSelectRel
				SelectCounter += 1
				if  (SelectCounter > NumberOfLinesForSetAction)
					end for each

			for each MemoChargebackAdjustmentRel
				SelectCounter += 1
				if  (SelectCounter > NumberOfLinesForSetAction)
					end for each

			for each NonMemoChargebackAdjustmentRel
				SelectCounter += 1
				if  (SelectCounter > NumberOfLinesForSetAction)
					end for each

		ProcessSelections
			for each ReceivableApplicationSelectRel

				invoke Apply each

			for each MemoChargebackAdjustmentRel
				invoke ProcessMemoChargebackSelection each
					invoked.PrmCompany					= Company
					invoked.PrmReceivablePaymentHeader	= ReceivablePaymentHeader
					invoked.PrmReceivablePayment		= ReceivablePayment

			for each NonMemoChargebackAdjustmentRel
				invoke ProcessNonMemoChargebackSelection each
					invoked.PrmCompany					= Company
					invoked.PrmReceivablePaymentHeader	= ReceivablePaymentHeader
					invoked.PrmReceivablePayment		= ReceivablePayment

			if (IsZeroPayment
			and Status.Open)
				Status = 7
				include UpdateForeignTradeAndPayments


		ToleranceCheck












			if ((Status.Open or Status.Unreleased)
			and CompanyCustomerRel.MaximumOverageReasonCode entered
			and CompanyCustomerRel.MaximumOverageReasonCode.Active
			and ((CompanyCustomerRel.MaximumOverageAmount entered
			and   CompanyCustomerRel.MaximumOverageAmount >= (PaymentOpen + PendingAdjustMemoAmount)	
			and (PaymentOpen + PendingAdjustMemoAmount) > 0)	
			or	(CompanyCustomerRel.MaximumOveragePercent entered
			and	CompanyCustomerRel.MaximumOveragePercent >= TransactionAmount / (PaymentOpen + PendingAdjustMemoAmount)	
			and (PaymentOpen + PendingAdjustMemoAmount) > 0)))	

				invoke UnreleasedCashApplication.Create ReceivableApplication
					assign result to NewReceivableApplication
					invoked.Company													= Company
					invoked.ReceivableApplication.TransType							= TypeOfPayment
					invoked.ReceivableApplication.Invoice							= PaymentNumber
					invoked.ReceivableApplication.PaymentSeq						= ReceivablePayment
					invoked.ReceivableApplication.BatchNumber						= ReceivablePaymentHeader
					invoked.CreditTransaction.CreditType							= "P"
					invoked.CreditTransaction.CreditCompany							= Company
					invoked.CreditTransaction.CreditCustomer						= Customer
					invoked.CreditTransaction.CreditBatch							= ReceivablePaymentHeader
					invoked.CreditTransaction.CreditSequence						= ReceivablePayment
					invoked.CreditTransaction.CreditType							= TypeOfPayment
					invoked.CreditTransaction.CreditNumber							= PaymentNumber
					invoked.GeneralLedgerDate										= DerivedGeneralLedgerDate	
					invoked.ReceivableOperator										= ReceivableOperator
					invoked.DepositDate												= DepositDate
					invoked.ApplicationCurrency										= OriginalCurrency
					invoked.ApplicationSource										= "M"
					invoked.ReceivableGeneralLedgerCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
					invoked.Prepayment												= Prepayment
					invoked.SkipToleranceCheck										= true
					invoked.BypassOpenAmountEdit									= true
					invoked.BypassAutoAdjust										= true

					if (ReceivablePayment.OriginalCurrency = Company.Currency)
						invoked.ApplicationCurrencyType								= "B"
					else
						invoked.ApplicationCurrencyType								= "N"

				invoke Create ReceivableApplicationAdjustment
					fill in fields from this instance
					invoked.Company													= NewReceivableApplication.ReceivableApplication.Company
					invoked.ReceivableApplication.TransType							= NewReceivableApplication.ReceivableApplication.TransType
					invoked.ReceivableApplication.Invoice							= NewReceivableApplication.ReceivableApplication.Invoice
					invoked.ReceivableApplication.PaymentSeq						= NewReceivableApplication.ReceivableApplication.PaymentSeq
					invoked.ReceivableApplication.BatchNumber						= NewReceivableApplication.ReceivableApplication.BatchNumber
					invoked.ReceivableApplication.ApplicationSequence				= NewReceivableApplication.ReceivableApplication.ApplicationSequence
					invoked.AdjustmentReason										= CompanyCustomerRel.MaximumOverageReasonCode
					if (LocalDescription entered)
						invoked.Description											= LocalDescription
					if (LocalAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
						invoked.ReceivableAdjustType								= "P"
					else
						invoked.ReceivableAdjustType								= "N"
					invoked.CreditAdjustAmount										= (PaymentOpen + PendingAdjustMemoAmount)	
					invoked.ApplicationCurrency										= OriginalCurrency


		PaymentApplicationAdjustment  

			constraint (GeneralLedgerDate entered)
				"Global_\Ledger_\DateRequired"
			constraint (LocalAdjustmentReason entered)
				"ReasonIsRequired"
			constraint (LocalAdjustmentAmount entered)
				"AmountRequired"
			invoke UnreleasedCashApplication.Create ReceivableApplication
				assign result to NewReceivableApplication
				invoked.Company													= Company
				invoked.ReceivableApplication.TransType							= TypeOfPayment
				invoked.ReceivableApplication.Invoice							= PaymentNumber
				invoked.ReceivableApplication.PaymentSeq						= ReceivablePayment
				invoked.ReceivableApplication.BatchNumber						= ReceivablePaymentHeader

				invoked.CreditTransaction.CreditType							= "P"
				invoked.CreditTransaction.CreditCompany							= Company
				invoked.CreditTransaction.CreditCustomer						= Customer
				invoked.CreditTransaction.CreditBatch							= ReceivablePaymentHeader
				invoked.CreditTransaction.CreditSequence						= ReceivablePayment
				invoked.CreditTransaction.CreditType							= TypeOfPayment
				invoked.CreditTransaction.CreditNumber							= PaymentNumber

				invoked.GeneralLedgerDate										= LocalGeneralLedgerDate



				if (CashApplicationOperator entered)
					invoked.ReceivableOperator									= CashApplicationOperator
				else
					invoked.ReceivableOperator									= actor
				if (LocalOperator entered) 
					invoked.ReceivableOperator									= LocalOperator


				invoked.DepositDate												= DepositDate
				invoked.ApplicationCurrency										= OriginalCurrency
				invoked.ApplicationSource										= "M"
				invoked.ReceivableGeneralLedgerCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
				invoked.Prepayment												= Prepayment

				if (ReceivablePayment.OriginalCurrency = Company.Currency)
					invoked.ApplicationCurrencyType								= "B"
				else
					invoked.ApplicationCurrencyType								= "N"

				if (LocalAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
					invoked.SetToPosted											= true
					invoked.BypassGLDateEdit									= true

			invoke Create ReceivableApplicationAdjustment
				fill in fields from this instance
				invoked.Company													= NewReceivableApplication.ReceivableApplication.Company
				invoked.ReceivableApplication.TransType							= NewReceivableApplication.ReceivableApplication.TransType
				invoked.ReceivableApplication.Invoice							= NewReceivableApplication.ReceivableApplication.Invoice
				invoked.ReceivableApplication.PaymentSeq						= NewReceivableApplication.ReceivableApplication.PaymentSeq
				invoked.ReceivableApplication.BatchNumber						= NewReceivableApplication.ReceivableApplication.BatchNumber
				invoked.ReceivableApplication.ApplicationSequence				= NewReceivableApplication.ReceivableApplication.ApplicationSequence
				invoked.AdjustmentReason										= LocalAdjustmentReason 
				if (LocalAdjustmentAccount entered)	
					invoked.ReceivableApplicationAdjustment.DistributionAccount					= LocalAdjustmentAccount	
				if (NewReceivableApplication.ReceivableApplication.SetToPosted = true)
					invoked.ApplicationSetToPost								=true
				if (LocalDescription entered)
					invoked.Description											= LocalDescription
				if (LocalAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
					invoked.ReceivableAdjustType								= "P"
				else
					invoked.ReceivableAdjustType								= "N"
				invoked.CreditAdjustAmount										= LocalAdjustmentAmount
				invoked.ApplicationCurrency										= OriginalCurrency
				if (LocalAdjustmentReason.AttachmentRequired
				and LocalAttachment entered)
					invoked.TransientAttachment									= LocalAttachment	
		
		TransferCashDetailsToNonAR
			if (Company.DetailedRNADistributions
			and CashDetailState.Released)
				for each ReceivablePaymentCashDetail set
					if (each.OpenAmount > 0)
						invoke Create CashDetailApplication
							invoked.Company												= Company
							invoked.ReceivablePaymentHeader								= ReceivablePaymentHeader
							invoked.ReceivablePayment									= ReceivablePayment
							invoked.ReceivablePaymentCashDetail							= each.ReceivablePaymentCashDetail
							invoked.DistributionAmount.CurrencyAmount					= each.OpenAmount
							invoked.DistributionAmount.ExchangeDate						= DepositDate
							invoked.ApplicationPostDate									= GeneralLedgerDate
							invoked.ApplicationSource									= "T"

					invoke CreateReleased ReceivablePaymentCashDetail
						fill in fields from each
						invoked.ReceivablePayment										= NewPayment.ReceivablePayment

				invoke FastUpdate NewPayment.ReceivablePayment
					invoked.CashDetailState = "R"

		TransferCashDetailsToCustomer
			if (Company.DetailedRNADistributions
			and CashDetailState.Released)
				if (ReassignAmount = TransactionAmount) 
					for each ReceivablePaymentCashDetail set
						if (each.OpenAmount > 0)
							invoke Create CashDetailApplication
								invoked.Company												= Company
								invoked.ReceivablePaymentHeader								= ReceivablePaymentHeader
								invoked.ReceivablePayment									= ReceivablePayment
								invoked.ReceivablePaymentCashDetail							= each.ReceivablePaymentCashDetail
								invoked.DistributionAmount.CurrencyAmount					= each.OpenAmount
								invoked.DistributionAmount.ExchangeDate						= DepositDate
								invoked.ApplicationPostDate									= GeneralLedgerDate
								invoked.ApplicationSource									= "T"

				initialize LocalCashDetailApplicationSum
				for each TransferredCashDetailApplicationRel
					LocalCashDetailApplicationSum += each.DistributionAmount.CurrencyAmount
					invoke CreateReleased ReceivablePaymentCashDetail
						invoked.Company													= Company
						invoked.ReceivablePaymentHeader									= ReceivablePaymentHeader
						invoked.ReceivablePayment										= NewPayment.ReceivablePayment
						invoked.DistributionAmount 										= each.DistributionAmount
						invoked.GlobalLedgerDate 										= GeneralLedgerDate
						invoked.CashFinanceCodeBlock									= each.ReceivablePaymentCashDetail.CashFinanceCodeBlock

					if (each.CashDetailApplicationGroup entered)
						invoke FastUpdate each
							initialize invoked.CashDetailApplicationGroup

				constraint (LocalCashDetailApplicationSum = ReassignAmount) 
					"SumOfCashDetailsDoesNotEqualReassignAmount"

				invoke FastUpdate NewPayment.ReceivablePayment
					invoked.CashDetailState = "R"


		2081NationalAcctsInstanceAction
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				DBCompany				= CompanyCustomerRel.NationalCompany
				DBCustomer				= CompanyCustomerRel.NationalCustomer
				DBTransactionType		= WorkRemitTransType
				DBInvoice				= WorkRemitInvoice
				initialize DBPaymentSeq

				initialize WorkErrorNumber

				for each LocalCashAppInvoiceDetailSet3Rel
					if  (!(PrmOverride
					and  CancelDate not entered
					and  TransferDate not entered)
					and Company.DefaultApplicationDate.LatestTransactionPostDate)	
						if (GeneralLedgerDate > each.GeneralLedgerDate)
							WorkGLDate = GeneralLedgerDate
						else
							WorkGLDate = each.GeneralLedgerDate

						if  (Customer = TransferredToCustomer
						and  WorkGLDate < TransferDate)
							WorkGLDate = TransferDate

						if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
						and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
						and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
							WorkGLDate = PrmGlDate
					if  (each.BankTransactionType.CashPayment)
						if (each.CompanySystemClosingControlRel exists
						and each.CompanySystemClosingControlRel.Control
						and each.Company.VerifyGLDateWithinGLDateRange)
							if  (WorkGLDate within each.CompanySystemClosingControlRel.ValidEntryDate)
								DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
								end for each
						else
							DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
							end for each

				if  (DBPaymentSeq entered)
					include 2084CheckItemStatusInstanceAction

			if (!RecordSelected
			and  WorkErrorNumber not entered)
				LocalNationalCompany				= CompanyCustomerRel.DerivedNationalCompany
				LocalNationalCustomer				= CompanyCustomerRel.DerivedNationalCustomer


				for each NationalAccountCustomerRel

					DBCompany				= each.NationalAccount.InvoiceAccountGroup.Company
					DBCustomer				= each.NationalAccount.InvoiceAccountGroup.Customer
					DBTransactionType		= WorkRemitTransType
					DBInvoice				= WorkRemitInvoice
					initialize DBPaymentSeq

					initialize WorkErrorNumber



					for each LocalCashAppInvoiceDetailSet3Rel
						if  (!(PrmOverride
						and  CancelDate not entered
						and  TransferDate not entered)
						and Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if (GeneralLedgerDate > each.GeneralLedgerDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = each.GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate
						if (each.BankTransactionType.CashPayment)
							if (each.CompanySystemClosingControlRel exists
							and each.CompanySystemClosingControlRel.Control
							and each.Company.VerifyGLDateWithinGLDateRange)
								if  (WorkGLDate within each.CompanySystemClosingControlRel.ValidEntryDate)
									DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
									end for each
							else
								DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
								end for each

					if  (DBPaymentSeq entered)
						include 2084CheckItemStatusInstanceAction

						if (RecordSelected
						or  WorkErrorNumber entered
						or  EndSelection)
							end for each


		2082ThirdPartyInstanceAction
			DBCompany				= Company
			DBTransactionType		= WorkRemitTransType
			DBInvoice				= WorkRemitInvoice

			initialize WorkErrorNumber

			if  (LocalCashAppInvoiceDetailSet1Rel exists)
				DBPaymentSeq = first LocalCashAppInvoiceDetailSet1Rel.ReceivableInvoiceDetail.PaymentSeq
				include 2084CheckItemStatusInstanceAction
			else
			if  (!RecordSelected
			and   WorkErrorNumber not entered)
				for each LocalByInvoiceRel
					if  (each.Company != PrmCompany
					and  each.Company.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup)
						DBCompany	 = each.Company
						DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
						include 2084CheckItemStatusInstanceAction

					if (RecordSelected
					or  WorkErrorNumber entered)
						end for each


		2083TraverseAcrossCompanyInstanceAction
			DBCompany				= Company
			DBTransactionType		= WorkRemitTransType
			DBInvoice				= WorkRemitInvoice

			initialize WorkErrorNumber

			if  (LocalCashAppInvoiceDetailSet1Rel exists
			and first LocalCashAppInvoiceDetailSet1Rel.Customer = Customer)
				DBPaymentSeq = first LocalCashAppInvoiceDetailSet1Rel.ReceivableInvoiceDetail.PaymentSeq
				include 2084CheckItemStatusInstanceAction
			else
			if  (!RecordSelected
			and   WorkErrorNumber not entered)
				for each TransactionsForCustomerAcrossCompanyRel
					if  (each.Company != PrmCompany
					and each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 = DBTransactionType
					and	each.ReceivableInvoiceDetail.Invoice							 = DBInvoice
					and	each.BankTransactionType.CashPayment)
						DBCompany	 = each.Company
						DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
						include 2084CheckItemStatusInstanceAction

					if (RecordSelected
					or  WorkErrorNumber entered)
						end for each


		2084CheckItemStatusInstanceAction
			WorkDebitCurrency = LocalPrmCompanyGroupCompany.Currency
			if  (!PrmCurrencyOverride
			and  LocalPrmCompanyGroupCompany.Currency					!= WorkCreditCurrency
			and  ThisInvoiceDetailRel.OriginalCurrency  != WorkCreditCurrency)
				WorkErrorNumber = 108
			else
			if  (Company.VendorCreateAndInterfaceToAP
			and  ThisInvoiceDetailARToAPApplicationRel exists
			and  ThisInvoiceDetailARToAPApplicationRel.Status.Unreleased)
				WorkErrorNumber = 120
			else
			if  (ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed
			and  MixedAppliedFlag = "N")
				initialize TransientMixedApplied			
				invoke ApplyMix MixedReceivableInvoiceCreditDetailRel
					invoked.CashApplicationResult = PrmCashApplicationResult
				if (TransientMixedApplied
				and ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed
				and ThisInvoiceDetailRel.OpenAmount = 0)			
					WorkErrorNumber			= 124
				MixedAppliedFlag = "Y"

				if  (!LocalCashAppInvoiceDetailSet3Rel exists)
					EndSelection = true
			if (WorkErrorNumber	!= 124)			
				RecordSelected = true


		ValidateDetailedRNADistributionsInstanceAction
			if (Company.DetailedRNADistributions)
				LocalAllowDetailFinanceStructure = true
				initialize LocalPaymentAmountRemaining
				if (CashDetailState.None)
					LocalAllowDetailFinanceStructure = true
				else
				if (CashDetailState.Unreleased
				or  CashDetailState.Amended)
					LocalAllowDetailFinanceStructure = false
				else
				if (CashDetailState.Released)
					if (Company != each.Company)
						if (Company.DetailedInvoiceAccrualDistributions != each.Company.DetailedInvoiceAccrualDistributions
						or  Company.DetailedCashDistributions 			!= each.Company.DetailedCashDistributions
						or  Company.DetailedRNADistributions 			!= each.Company.DetailedRNADistributions
						or  Company.DetailFinanceStructureOptions 		!= each.Company.DetailFinanceStructureOptions)
							LocalCashDetailCompanySetupMismatch = true
							LocalAllowDetailFinanceStructure = false

					LocalAnswer 										= each.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
					LocalPaymentCashDetailAccount 						= each.TransientAdditionalDimensions
					LocalPaymentAmountRemaining							= sum LocalPaymentCashDetailRel.OpenAmount
					if (LocalPaymentCashDetailRel not exists)
						LocalAllowDetailFinanceStructure = false
					if  (LocalPaymentAmountRemaining <= 0
					and !each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						LocalAllowDetailFinanceStructure = false


		BuildFundApplyDistributionSetInstanceAction
			if (ThisReceivablePaymentRemittanceRel.InvoiceDetail not entered
			or  ThisReceivablePaymentRemittanceRel.RemittanceApplyDistribution set not exists)
				invoke ChangeDistributionSetNeedsReview WsARAApplicationRel
					invoked.PrmDistributionSetNeedsReview	= false
					invoked.PrmDistributionSetState			= "CP"
				invoke ProrateAndSelectAll WsARAApplicationRel
			else
				LocalDistributionSetNeedsReview = false
				if (WsRemitApplied != ThisReceivablePaymentRemittanceRel.AppldAmt
				and !ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
					LocalDistributionSetNeedsReview = true
				else
					WsDistributionSetSum 		= 0
					for each ThisReceivablePaymentRemittanceRel.RemittanceApplyDistribution set

						if (!ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
							if (each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount > 0)
								if (each.DistributionAmount.CurrencyAmount > each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - each.ReceivableGLDistributionRel.FundAppliedAmount)
									LocalDistributionSetNeedsReview = true
									end for each
							else
								if (each.DistributionAmount.CurrencyAmount < each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - each.ReceivableGLDistributionRel.FundAppliedAmount)
									LocalDistributionSetNeedsReview = true
									end for each

						WsDistributionSetSum	   += each.DistributionAmount.CurrencyAmount
						invoke Create FundApplyDistribution
							invoked.Company													= WsARACompany
							invoked.ReceivableApplication.TransType							= WsARATransType
							invoked.ReceivableApplication.Invoice							= WsARAInvoice
							invoked.ReceivableApplication.PaymentSeq						= WsARAPaymentSeq
							invoked.ReceivableApplication.BatchNumber						= WsARABatchNumber
							invoked.ReceivableInvoiceType									= each.ReceivablePaymentRemittance.InvoiceCompanyReceivableInvoiceRel.ReceivableInvoiceType
							invoked.Customer												= each.Customer
							invoked.ReceivableApplication.ApplicationSequence				= WsARAApplicationSequence
							invoked.OriginalLastDistributionSequence						= each.OriginalLastDistributionSequence
							invoked.OriginalReceivableGLDistribution						= each.OriginalReceivableGLDistribution
							invoked.ApplyFundDistributionAccount							= each.ApplyFundDistributionAccount
							invoked.OriginalCurrency										= each.OriginalCurrency
							invoked.DistributionAmount										= each.DistributionAmount
							invoked.DistributionAmount.KeepRateAndAmount					= true
							invoked.Type													= "T"
							if (ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
								invoked.FromIntercompanyBilling								= true

					if (!LocalDistributionSetNeedsReview)
						invoke ChangeDistributionSetNeedsReview WsARAApplicationRel
							invoked.PrmDistributionSetNeedsReview	= false
							if (ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
								invoked.PrmDistributionSetState		= "CS"
							else
								invoked.PrmDistributionSetState		= "CP"

				if (LocalDistributionSetNeedsReview)
					invoke Delete WsARAApplicationRel.FundApplyDistribution set
					invoke ChangeDistributionSetNeedsReview WsARAApplicationRel
						invoked.PrmDistributionSetState			= "NP"
						invoked.PrmDistributionSetNeedsReview	= true


		2071CreditInstanceAction

			include ValidateDetailedRNADistributionsInstanceAction

			if  (Company.DetailedRNADistributions
			and !LocalAllowDetailFinanceStructure)
				NextSentence = true
			else
			if (each.HasARToAPApplicationSelect)
				NextSentence = true
			else
			if  (each.HasReceivableApplicationSelect)
				NextSentence = true
			else
			if  (each.ReceivablePendingAdjustmentRel exists)
				NextSentence = true
			else

				WsPriorApplication	= false

				initialize WsTransactionDiscount
				initialize WsTransactionAmount

				if  (each.CompanyCustomerRel.DiscountAdjustmentReason != blank
				and  each.AlternateReceivableInvoiceType.Mixed)
					if (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)

						if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							if (each.MixedSignCreditMemoPriorApplicationRel exists)
								WsPriorApplication		= true

						if (each.MixedSignPriorApplicationRel exists)
							WsPriorApplication		= true

						if (!WsPriorApplication)
							WsTransactionAmount			= each.InvoiceAmount.CurrencyAmount -  each.ApplicationAmount.CurrencyAmount
					else
						WsTransactionAmount				= each.InvoiceAmount.CurrencyAmount

				if (!each.AlternateReceivableInvoiceType.Mixed)
					if (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
						WsPriorApplication				= true
				else
					WsTransactionAmount					= each.InvoiceAmount.CurrencyAmount


				initialize WsOverAppliedAmount
				initialize WsOverAppliedAmountInvoiceCurrency
				if (each.IsEligibleForOverCashApplication
				and LocalRemittanceOverApplied									
				and SaveRemitAmount > DerivedOverApplyInvoiceOpenAmount
				and each.ReceivableInvoiceDetail.PaymentSeq = 1)
					WsOverAppliedAmount					= DerivedOverApplyInvoiceOpenAmount - SaveRemitAmount
					CurrencyWork.TransactionAmount			= WsOverAppliedAmount
					CurrencyWork.FromCurrency				= OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency		= ThisInvoiceDetailRel.OriginalCurrency
					WsOverAppliedAmountInvoiceCurrency		= CurrencyWork.BaseAmount.OutputCurrencyAmount
					LocalSkipMaximumOverage					= true
				else
				if  (each.CompanyCustomerRel.DiscountAdjustmentReason entered
				and  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
				and !WsPriorApplication)

					I9 = 1
					while (I9 <= 3)

						if (each.DiscountDate.DiscDate[I9] not entered)
							end while
						else
						if (each.DiscountDate.DiscDate[I9] + each.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
							if (each.DiscountAmount.OrigDiscAmt[I9] entered)
								WsTransactionDiscount = each.DiscountAmount.OrigDiscAmt[I9]
								end while
							else
								WsTransactionDiscount = (each.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
								end while

						I9 +=1
				else
				if (each.CompanyCustomerRel.DiscountAdjustmentReason entered
				and  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
				and WsPriorApplication)

					LocalGiveNoDiscount = false
					if (each.AlternateReceivableInvoiceType.Mixed)

						if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							for each each.MixedSignCreditMemoPriorApplicationRel
								for each each.ReceivableApplicationAdjustmentRel
									if (!(each.ReceivableApplication.Reverse
									or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
										LocalGiveNoDiscount = true
										end for each
								if (LocalGiveNoDiscount = true)
									end for each
								I9 = 1
								while (I9 < 4)
									if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
											if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
												LocalGiveNoDiscount = true
										else
											LocalGiveNoDiscount = false
											end while
									I9 += 1

						for each each.MixedSignPriorApplicationRel
							for each each.ReceivableApplicationAdjustmentRel
								if (!(each.ReceivableApplication.Reverse
								or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
									LocalGiveNoDiscount = true
									end for each
							if (LocalGiveNoDiscount = true)
								end for each
							I9 = 1
							while (I9 < 4)
								if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
									if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
										if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
											LocalGiveNoDiscount = true
									else
										LocalGiveNoDiscount = false
										end while
								I9 += 1
					else
						for each each.ReceivableApplicationRel
							I9 = 1
							while (I9 < 4)
								if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
									if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
										if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
											LocalGiveNoDiscount = true
									else
										LocalGiveNoDiscount = false
										end while
								I9 += 1

							for each each.ReceivableApplicationAdjustmentRel
								if (!(each.ReceivableApplication.Reverse
								or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
									LocalGiveNoDiscount = true

					if (!LocalGiveNoDiscount)
						I9 = 1
						while (I9 <= 3)

							if (each.DiscountDate.DiscDate[I9] not entered)
								end while
							else
							if (each.DiscountDate.DiscDate[I9] + each.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
								if (each.DiscountAmount.OrigDiscAmt[I9] entered
								and not each.AlternateReceivableInvoiceType.Mixed)

									if (each.DiscountAmount.OrigDiscAmt[I9] >= each.OpenAmount)
										WsTransactionDiscount = blank
									else
										WsTransactionDiscount = each.DiscountAmount.OrigDiscAmt[I9]
									end while
								else
									if (each.DiscountPercent.DiscPct[I9] * WsTransactionAmount >= each.OpenAmount)
										WsTransactionDiscount = blank
									else
										WsTransactionDiscount = (each.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
									end while
							I9 +=1


				if (each.IsEligibleForOverCashApplication
				and LocalRemittanceOverApplied
				and WsOverAppliedAmount entered)
					WsTransactionOpenAmount = (each.InvoiceAmount.CurrencyAmount - (each.ApplicationAmount.CurrencyAmount + each.AdjustmentAmount.CurrencyAmount + WsOverAppliedAmountInvoiceCurrency))
				else
					WsTransactionOpenAmount = (each.InvoiceAmount.CurrencyAmount - (each.ApplicationAmount.CurrencyAmount + each.AdjustmentAmount.CurrencyAmount + WsTransactionDiscount))

					WsRMIApplied			= SaveRemitAmount

					CurrencyWork.TransactionAmount			= WsTransactionOpenAmount
					CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
					WorkInvoiceOpenPaymentCurrency			= CurrencyWork.BaseAmount.OutputCurrencyAmount

					if  (!each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						if (SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
							WsRMIApplied				= WorkInvoiceOpenPaymentCurrency

						if (SaveRemitAmount > PaymentOpen)
							WsRMIApplied				= PaymentOpen

						if  ((SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
						and  (SaveRemitAmount > PaymentOpen))
							if (WorkInvoiceOpenPaymentCurrency > PaymentOpen)
								WsRMIApplied			= PaymentOpen
							else
								WsRMIApplied			= WorkInvoiceOpenPaymentCurrency

						if (WsRMIApplied < WorkInvoiceOpenPaymentCurrency)
							WsTransactionDiscount = 0
							WsTransactionOpenAmount = (each.InvoiceAmount.CurrencyAmount - (each.ApplicationAmount.CurrencyAmount + each.AdjustmentAmount.CurrencyAmount))



				WsRMIApplied			= SaveRemitAmount

				CurrencyWork.TransactionAmount			= WsTransactionOpenAmount
				CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
				WorkInvoiceOpenPaymentCurrency			= CurrencyWork.BaseAmount.OutputCurrencyAmount





				if  (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
					if  (ThisReceivablePaymentRemittanceRel.AppldAmt = 0
					or   ThisReceivablePaymentRemittanceRel.AppldAmt > WorkInvoiceOpenPaymentCurrency)
						WsRMIApplied = WorkInvoiceOpenPaymentCurrency
					else
					if (ThisReceivablePaymentRemittanceRel.AppldAmt < WorkInvoiceOpenPaymentCurrency)
						WsRMIApplied = ThisReceivablePaymentRemittanceRel.AppldAmt
				else

					if (SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
						WsRMIApplied				= WorkInvoiceOpenPaymentCurrency

					if (SaveRemitAmount > PaymentOpen)
						WsRMIApplied				= PaymentOpen

					if  ((SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
					and  (SaveRemitAmount > PaymentOpen))
						if (WorkInvoiceOpenPaymentCurrency > PaymentOpen)
							WsRMIApplied			= PaymentOpen
						else
							WsRMIApplied			= WorkInvoiceOpenPaymentCurrency

					if (Company.DetailedRNADistributions
					and CashDetailState.Released)
						if (WsRMIApplied > LocalPaymentAmountRemaining)
							WsRMIApplied = LocalPaymentAmountRemaining

				WsRemitApplied = WsRMIApplied



				if (WsOverAppliedAmount entered
				and each.Company.OverApplyReasonCode entered
				and OriginalCurrency != ThisInvoiceDetailRel.OriginalCurrency)
					CurrencyWork.TransactionAmount			= WsOverAppliedAmount
					CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
					WsTransactionDiscount					= CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
				if  (WsTransactionDiscount entered
				and  each.CompanyCustomerRel.DiscountAdjustmentReason entered
				and  OriginalCurrency != ThisInvoiceDetailRel.OriginalCurrency)

					CurrencyWork.TransactionAmount			= WsTransactionDiscount
					CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
					WsTransactionDiscount					= CurrencyWork.BaseAmount.OutputCurrencyAmount






				invoke UnreleasedCashApplication.Create ReceivableApplication
					assign result to NewReceivableApplication
					invoked.Company										= each.Company
					invoked.ReceivableApplication.TransType				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableApplication.Invoice				= each.ReceivableInvoiceDetail.Invoice
					invoked.ReceivableApplication.PaymentSeq			= each.ReceivableInvoiceDetail.PaymentSeq
					invoked.ReceivableApplication.BatchNumber			= each.ReceivableInvoiceDetail.BatchNumber

					invoked.EnteredAmount								= WsRemitApplied
					invoked.ApplicationCurrency							= OriginalCurrency

					invoked.ReceivableOperator							= PrmOperator
					invoked.ApplicationSource							= "A"
					invoked.ReceivableGeneralLedgerCode					= each.ReceivableGeneralLedgerCode
					invoked.GeneralLedgerDate							= WorkGLDate

					invoked.CreditTransaction.CreditCompany				= Company
					invoked.CreditTransaction.CreditCustomer			= Customer
					invoked.CreditTransaction.CreditBatch				= ReceivablePaymentHeader
					invoked.CreditTransaction.CreditSequence			= ReceivablePayment
					invoked.CreditTransaction.CreditType				= TypeOfPayment
					invoked.CreditTransaction.CreditNumber				= PaymentNumber
					invoked.DepositDate									= DepositDate
					invoked.GLOffsetCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
					invoked.ApplicationCurrency							= OriginalCurrency
					invoked.CashApplicationResult						= PrmCashApplicationResult
					invoked.SkipToleranceCheck							= true

					if  (OriginalCurrency		= LocalPrmCompanyGroupCompany.Currency
					and  each.OriginalCurrency	= WsInvoiceCurrency
					and  WsInvoiceCurrency		= LocalPrmCompanyGroupCompany.Currency)
						invoked.ApplicationCurrencyType					= "B"
					else
					if  (OriginalCurrency		!= LocalPrmCompanyGroupCompany.Currency
					and  each.OriginalCurrency	!= WsInvoiceCurrency
					and  each.OriginalCurrency	 = OriginalCurrency
					and  WsInvoiceCurrency		 = LocalPrmCompanyGroupCompany.Currency)
						invoked.ApplicationCurrencyType					= "N"
					else
						invoked.ApplicationCurrencyType					= "M"

					if  (WsOverAppliedAmount entered
					and each.Company.OverApplyReasonCode entered)
						invoked.CreateAdjustReason					 = each.Company.OverApplyReasonCode
						invoked.CreateAdjustAmount					 = WsOverAppliedAmount
						invoked.TransientOverApplyInvoice			 = true
					else
					if (WsTransactionDiscount entered
					and each.CompanyCustomerRel.DiscountAdjustmentReason entered)
						invoked.CreateAdjustReason					 = each.CompanyCustomerRel.DiscountAdjustmentReason
						invoked.CreateAdjustAmount					 = WsTransactionDiscount



				WsARACompany					= NewReceivableApplication.Company
				WsARATransType					= NewReceivableApplication.ReceivableApplication.TransType
				WsARAInvoice					= NewReceivableApplication.ReceivableApplication.Invoice
				WsARAPaymentSeq					= NewReceivableApplication.ReceivableApplication.PaymentSeq
				WsARABatchNumber				= NewReceivableApplication.ReceivableApplication.BatchNumber
				WsARAApplicationSequence		= NewReceivableApplication.ReceivableApplication.ApplicationSequence

				WsTotalApplied					+= WsARAApplicationRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
				if  (WsMultObligCount > 1)
					WsMultObligTotalAmount		-= WsARAApplicationRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
					WorkPaymentOpenAmount		-= WsARAApplicationRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount

				if  (each.ReceivableInvoiceRel.LastReceivableInvoiceDetail = 1)
					WsBaseOpenAmount = each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount +  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
				else
				if (each.ReceivableInvoiceDetail.PaymentSeq = WsLastMultObligSeq)
					WsBaseOpenAmount = each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount +  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
				else
				if (WorkPaymentOpenAmount = 0)
					WsBaseOpenAmount = WsMultObligTotalAmount
				else
					initialize WsBaseOpenAmount



				AR130WsBaseOpenAmount = each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount +  each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount)
				WsBaseOpenAmount = AR130WsBaseOpenAmount


				WorkUnappliedAmount = PaymentOpen

				if (AllowSelectDistributionSet) 
					include BuildFundApplyDistributionSetInstanceAction


				ApplicationOccurred = true

				LocalCashDetailRemitApplied = true

				if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
					SaveRemitAmount		+= WsRemitApplied  
				else
					SaveRemitAmount		-= WsRemitApplied
				
				TransientAmountApplied += WsRemitApplied

				if  (SaveRemitAmount   = 0)
					WsDone = true

				if (WorkUnappliedAmount not > 0)

					WsDone = true


		CalculateTaxRule
			initialize CalculateTax
			CalculateTax.Function							= "C"
			CalculateTax.System								= "AR"
			CalculateTax.TaxEntity							= GeneralLedgerCompanyRel.AccountingEntity

			CalculateTax.TaxCode							= LocalTaxCode
			CalculateTax.TaxDate							= DepositDate
			CalculateTax.InvoiceDate						= DepositDate
			CalculateTax.PaymentDate						= DepositDate
			CalculateTax.ShipmentDate						= DepositDate
			CalculateTax.GeneralLedgerDate					= GeneralLedgerDate
			CalculateTax.TaxableAmount						= LocalTaxableAmount
			CalculateTax.PostalAddress						= Company.PostalAddress
			CalculateTax.ProcessLevel						= ReceivableProcessLevel
			CalculateTax.Invoice							= PaymentNumber
			CalculateTax.Customer							= Customer
			CalculateTax.FromPostalAddress					= Company.PostalAddress
			CalculateTax.NumberOfDecimals					= ReceivablePaymentHeader.CurrencyDecimalsNumber
			CalculateTax.TaxCodeAccount						= ReceivablePaymentHeader.AdditionalAmountAccount

			CalculateTax.Exempt								= CompanyCustomerRel.TaxExempt
			LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax
			if (!CalculateTax.DoTaxCalculation)
				constraint (CalculateTax.OutputErrorNumber not entered)
					"<CalculateTax.OutputErrorMessage>"

			I2 = 1
			while (I2 < 9)
				if (CalculateTax.TaxTable.TaxTableOutput[I2].TaxAmount entered)
					WorkTotal += CalculateTax.TaxTable.TaxTableOutput[I2].TaxAmount
				I2 +=1


		CallOneSource
			initialize CalculateTax
			CalculateTax.CallingModule				= "Receivable_Payment"
			CalculateTax.System						= "AR"
			CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			CalculateTax.TaxEntity					= GeneralLedgerCompanyRel.AccountingEntity
			CalculateTax.InvoiceCompany				= Company
			CalculateTax.ProcessLevel				= ReceivableProcessLevel


			CalculateTax.Invoice					= PaymentNumber
			CalculateTax.InvoiceAmount				= TransactionAmount
			CalculateTax.InvoiceDate				= DepositDate
			CalculateTax.ShipmentDate				= DepositDate
			CalculateTax.PaymentDate				= DepositDate
			CalculateTax.TaxDate					= DepositDate
			CalculateTax.GeneralLedgerDate			= GeneralLedgerDate
			CalculateTax.InvoicedOrCreditMemo		= "I"
			CalculateTax.TransactionSource			= "O"
			CalculateTax.TransactionType			= "S"
			CalculateTax.LineNumber					= LastDistributionSequence + 1
			CalculateTax.DeliveryTerms				= ShipTerm



			CalculateTax.FromVATRegistrationCountry 	= TaxEntityRel.VATRegistrationCountry
			CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber

			CalculateTax.DefaultFilingCurrency 				= Company.Currency
			CalculateTax.CurrencyRate						= CurrencyRate
			CalculateTax.TransactionCurrency 				= OriginalCurrency
			CalculateTax.BaseCurrency						= Company.Currency

			CalculateTax.ReceiptSite						= ReceivableProcessLevel
			CalculateTax.UniqueIdOfRelatedObject			= UniqueID

			CalculateTax.BypassEditing						= true

			if (ReceivableProcessLevel.PostalAddress entered)
				CalculateTax.FromPostalAddress					= ReceivableProcessLevel.PostalAddress
				CalculateTax.PostalAddress 						= ReceivableProcessLevel.PostalAddress
			else
				CalculateTax.FromPostalAddress					= Company.PostalAddress
				CalculateTax.PostalAddress						= Company.PostalAddress

			CalculateTax.SendMultLineItems			= true
			CalculateTax.UpdateLineItems			= true

			CalculateTax.Function	= "C"
			LocalTaxCalc			= CalculateTax.ExecuteCalculateTax

			if (CalculateTax.OutputErrorNumber = 700
			or  CalculateTax.OutputErrorNumber = 701
			or  CalculateTax.OutputErrorNumber = 702
			or  CalculateTax.OutputErrorNumber = 703
			or  CalculateTax.OutputErrorNumber = 704
			or  CalculateTax.OutputErrorNumber = 705)
				constraint(false)
					"OneSourceTaxServerOrWebserviceError;ContactAdministrator"


















		DeleteAllApplications
			constraint (!TypeOfPayment.NonArPayment)
				"CannotReverseANonARTransaction"
			constraint (Customer entered)
				"CannotReverseUnassignedPayment"
			constraint (!Transferred)
				"CannotDelete;PaymentTransferEstablishedANewPayment"
			constraint (!Cancelled)
				"CannotDelete;PaymentHasBeenTransferred"
			constraint (ReceivableApplicationRel exists)
				"NoApplicationsExistForThisPayment"

			for each ReceivableApplicationRel








				if (each.ApplicationAmount.CurrencyAmount < 0
				and each.ReceivableApplication.ApplicationSequence = 1)
					constraint (each.Status.UnreleasedCashApplication)
						"CannotProcess;MemoChargebackExists"

			for each UnpostedApplicationsAvailableToReverseRel
				if (each.Status.UnreleasedCashApplication)
					invoke UnreleasedCashApplication.Remove each
				else
				if (each.Status.RequiresAuditListing)
					invoke RequiresAuditListing.Remove each
				else
				if (each.Status.AvailableForPosting)
					invoke AvailableForPosting.Remove each

				if (ReceivablePaymentRemittanceRel exists)
					invoke FastUpdate ReceivablePaymentRemittanceRel
						invoked.Status				= 1

				invoke TriggerReceivableTransaction each.ReceivableInvoiceRel




			if (IsZeroPayment)
				if (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
					Status = 0
				else
					Status = 2


		UpdateForeignTradeAndPayments
			if (Company.AccountingEntity.AddressCode.PostalAddress.Country entered
			and Company.ReceivableCompany.ForeignTradePaymentReport
			and BaseAmount > Company.ReceivableCompany.ForeignTradePaymentAmount
			and Customer.PostalAddress.Country entered
			and Customer.PostalAddress.Country != "DE")
				if (!ForeignTradeAndPaymentsRel exist)
					invoke Create ForeignTradeAndPayments
						invoked.Company											= Company
						invoked.ForeignTradeAndPayments.ReceivablePaymentHeader	= ReceivablePaymentHeader
						invoked.ForeignTradeAndPayments.ReceivablePayment		= ReceivablePayment
						invoked.CustomerGroup								= Company.CustomerGroupField.CustomerGroup
						invoked.Customer									= Customer
						invoked.PaymentDate									= DepositDate
						invoked.TypeOfPayment								= "C"
						invoked.TransactionNumber							= PaymentNumber
						invoked.IncomingPaymentAmount						= BaseAmount
						invoked.ForeignEconomicRegulatoryCode				= InvoiceForeignEconomicCodeRel.ForeignEconomicRegulatoryCode
						invoked.CountryCode									= Customer.PostalAddress.Country
						invoked.System										= "AR"
						if (LocalReceivableInvoiceRel.TaxAmount != 0)
							invoked.VatExempt = "V"
						else
							invoked.VatExempt = "E"


		SumPendingAppliedCreditMemoRelAmounts	
			if (!SumOfPendingAppliedCreditMemoRelAmountsDone)	
				initialize SumOfPendingAppliedCreditMemoRelPaymentApplicationAmount	
				initialize SumOfPendingAppliedCreditMemoRelDerivedSelectDiscountAmount	
					for each PendingAppliedCreditMemoRel
						SumOfPendingAppliedCreditMemoRelPaymentApplicationAmount		 += each.PaymentApplicationAmount	
						SumOfPendingAppliedCreditMemoRelDerivedSelectDiscountAmount		 += each.TotalAdjustmentsDisplayCurrency
				SumOfPendingAppliedCreditMemoRelAmountsDone = true	

		SumPendingAppliedNonCreditMemoRelAmounts	
			if (!SumOfPendingAppliedNonCreditMemoRelAmountsDone)	
				initialize SumOfPendingAppliedNonCreditMemoRelPaymentApplicationAmount	
				initialize SumOfPendingAppliedNonCreditMemoRelDerivedSelectDiscountAmount	
					for each PendingAppliedNonCreditMemoRel
						SumOfPendingAppliedNonCreditMemoRelPaymentApplicationAmount			 += each.PaymentApplicationAmount	
						SumOfPendingAppliedNonCreditMemoRelDerivedSelectDiscountAmount		 += each.TotalAdjustmentsDisplayCurrency
				SumOfPendingAppliedNonCreditMemoRelAmountsDone = true	

		SumPendingAdjustMemoRelAmounts	
			if (!SumOfPendingAdjustMemoRelAmountsDone)	
				initialize SumOfPendingAdjustMemoRelCreditAdjustAmount	
					for each PendingAdjustMemoRel
						SumOfPendingAdjustMemoRelCreditAdjustAmount	 += each.AdjustAmount	
				SumOfPendingAdjustMemoRelAmountsDone = true	

		SumPendingAdjustNonMemoRelAmounts	
			if (!SumOfPendingAdjustNonMemoRelAmountsDone)	
				initialize SumOfPendingAdjustNonMemoRelAdjustAmount	
					for each PendingAdjustNonMemoRel
						SumOfPendingAdjustNonMemoRelAdjustAmount	 += each.AdjustAmount	
				SumOfPendingAdjustNonMemoRelAmountsDone = true	

		SumNonARReceivableGLDistributionRel	
			if (!SumOfNonARReceivableGLDistributionRelAmountsDone)	
				initialize SumOfNonARReceivableGLDistributionRelDistributionAmountCurrencyAmount	
					for each NonARReceivableGLDistributionRel
						SumOfNonARReceivableGLDistributionRelDistributionAmountCurrencyAmount	 += each.DistributionAmount.CurrencyAmount	
				SumOfNonARReceivableGLDistributionRelAmountsDone = true	

		SumRemittanceInvoiceAndDebitMemoRelAmounts	
			if (!SumOfRemittanceInvoiceAndDebitMemoRelAmountsDone)	
				initialize SumOfRemittanceInvoiceAndDebitMemoRelAppldAmt	
					for each RemittanceInvoiceAndDebitMemoRel
						SumOfRemittanceInvoiceAndDebitMemoRelAppldAmt	 += each.AppldAmt	
				SumOfRemittanceInvoiceAndDebitMemoRelAmountsDone = true	

		SumRemittanceCreditMemoRelAmounts	
			if (!SumOfRemittanceCreditMemoRelAmountsDone)	
				initialize SumOfRemittanceCreditMemoRelAppldAmt	
					for each RemittanceCreditMemoRel
						SumOfRemittanceCreditMemoRelAppldAmt	 += each.AppldAmt	
				SumOfRemittanceCreditMemoRelAmountsDone = true	

		SumPaymentsAgePeriodRelAmounts	
			if (!SumOfPaymentsAgePeriodRelAmountsDone)	
				initialize SumOfPaymentsAgePeriodRelTransactionAmount	
					for each PaymentsAgePeriodRel
						SumOfPaymentsAgePeriodRelTransactionAmount	 += each.TransactionAmount	
				SumOfPaymentsAgePeriodRelAmountsDone = true	

		SumEligibleOverApplyOpenReceivableInvoiceDetailRelAmounts
			initialize SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency		
				for each EligibleOverApplyOpenReceivableInvoiceDetailsRel
					SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency  += each.OpenAmountDisplayCurrency


		FundAccountingTransferToNonAR 		
			for each NonARReceivableGLDistributionRel
				initialize LocalCalculateReceivableFinanceStructure
				LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableCompanyDataGroup.TransactionCompany
				LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.ReceivableGLDistribution
				LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
				LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
				LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

				invoke CreatePaymentDistribution ReceivableGLDistribution
					invoked.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.ReceivableCompanyDataGroup.TransactionCompany				= Company
					invoked.ReceivableCompanyGroup.OriginCompany						= Company
					invoked.BatchNumber													= ReceivablePaymentHeader
					invoked.SequenceNumber												= ReceivablePayment
					invoked.AccumulationType											= "D"
					invoked.DocumentNumber												= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
					invoked.ReceivableGLDistribution.GeneralLedgerAccount				= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
					invoked.Description													= "Batch " + ReceivablePaymentHeader + " cash entry"
					invoked.ReceivableCompanyGroup.GlCompany							= Company
					invoked.DistributionAmount											= each.DistributionAmount
					invoked.DistributionAmount.CurrencyAmount							= each.DistributionAmount.CurrencyAmount * -1
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	* -1
					invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1
					invoked.DistributionAmount.KeepRateAndAmount						= true
					invoked.OriginalCurrency											= OriginalCurrency
					invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= CurrencyRate
					invoked.Status														= 2
					invoked.GeneralLedgerDate											= GeneralLedgerDate

					invoked.TransientNonARCashOffset									= true					
					invoked.Invoice														= PaymentNumber
					invoked.ReceivableCompanyDataGroup.Customer							= Customer
					invoked.TransientUpdateCashCodeFund									= true
					invoked.CategoryType 												= "N"				   

			invoke CreatePaymentDistribution ReceivableGLDistribution
				invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
				invoked.ReceivableCompanyGroup.OriginCompany					= Company
				invoked.BatchNumber												= ReceivablePaymentHeader
				invoked.SequenceNumber											= ReceivablePayment
				invoked.AccumulationType										= "D"
				invoked.DocumentNumber											= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
				invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
				invoked.Description												= "Batch " + ReceivablePaymentHeader + " cash entry"
				invoked.BypassStructureRelationEdit								= true 
				invoked.ReceivableCompanyGroup.GlCompany						= Company
				invoked.DistributionAmount.CurrencyAmount						= TransactionAmount * -1
				invoked.OriginalCurrency										= OriginalCurrency
				invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
				invoked.Status													= 2
				invoked.GeneralLedgerDate										= GeneralLedgerDate

				invoked.TransientNonARCashOffset							= true				


				invoked.Invoice													= PaymentNumber
				invoked.ReceivableCompanyDataGroup.Customer						= Customer
				invoked.TransientUpdateCashCodeFund								= true

	Derived Fields

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforCustomerRemittanceAdvice"

		ContextMessageText is a MessageField
			restricted
			"ReceivablePayment<ReceivablePaymentHeader>ForCompany<Company>"

		ContextMessageARPaymentImport2EntityType is a StringField
			type is Alpha 30
			restricted
			"InforARInterfacePayment2"

		ContextMessageTextARPaymentImport2 is a MessageField
			restricted
			"ReceivablePayment<ReceivablePayment>"

		CompanyTitleWithRecord is a LabelField	
			"ForCompany<Company>_-_<Company.Name>"

		ReviewBatchPaymentsListTitle is a MessageField
			"Payments_With_Applications_For_Company_<Company>_Batch_<ReceivablePaymentHeader>"

		CompanyTitle is a DerivedField	
			type is MessageField
			return CompanyTitleWithRecord

		BatchAndCompanyTitleWithRecord is a LabelField	
			"-_Batch<ReceivablePaymentHeader>forCompany<Company>"	//FSM-6452 - Removing RepresentativeText as that took up too much space in the title//.RepresentativeText>"

		BatchPaymentNumberAndCompanyTitleWithRecord is a LabelField	
			"-_Batch<ReceivablePaymentHeader>_-_PaymentNumber<PaymentNumber>_-_Company<Company>"	//FSM-6452 - Removing RepresentativeText as that took up too much space in the title//.RepresentativeText>"

		BatchPaymentNumberAndCompanyTitleWithRecordApplicationInProcess is a LabelField	
			"-_Batch<ReceivablePaymentHeader>_-_PaymentNumber<PaymentNumber>_-_Company<Company>_-_[Difference_<PendingDifferenceDisplayCurrency>]"	//.RepresentativeText>"

		PaymentNumberWithPaymentNumberVariable is a LabelField	
			"-_PaymentNumber<PaymentNumber>"	//.RepresentativeText>"

		PaymentNumberWithRecordApplicationInProcess is a LabelField	
			"-_PaymentNumber<PaymentNumber>_-_[Difference_<PendingDifferenceDisplayCurrency>]"	//.RepresentativeText>"

		WriteOffsAndMemosPanelLabelField is a LabelField	
			"WriteOffsAndMemos"

		WriteOffsAndMemosPanelWithCountLabelField is a LabelField	
			"WriteOffsAndMemos_(<NumberOfPaymentWriteoffsAndChargebackMemos>)"

		BatchAndCompanyTitle is a DerivedField	
			type is MessageField
			return BatchAndCompanyTitleWithRecord

		BatchPaymentNumberAndCompanyTitle is a DerivedField	
			type is MessageField
			return BatchPaymentNumberAndCompanyTitleWithRecord

		BatchPaymentNumberAndCompanyApplicationInProcessTitle is a DerivedField	
			type is MessageField
			restricted	
			if (HasPendingTransactions)
				return BatchPaymentNumberAndCompanyTitleWithRecordApplicationInProcess
			else
				return BatchPaymentNumberAndCompanyTitleWithRecord

		PaymentNumberApplicationInProcessTitle is a DerivedField	
			type is MessageField
			if (HasPendingTransactions)
				return PaymentNumberWithRecordApplicationInProcess
			else
				return PaymentNumberWithPaymentNumberVariable

		PaymentNumberApplicationInProcessTitleOnLeft is a DerivedField	
			type is MessageField
			return PaymentNumberWithPaymentNumberVariable

		WriteOffsAndMemosPanelWithCount is a DerivedField	
			type is MessageField
			if (NumberOfPaymentWriteoffsAndChargebackMemos >0)
				return WriteOffsAndMemosPanelWithCountLabelField
			else
				return WriteOffsAndMemosPanelLabelField

		CashAppMsg51 is a MessageField
			restricted
			"ReceivablePaymentBatchDoesNotExist"

		CashAppMsg55 is a MessageField
			restricted
			"SelectedApplicationsOnly=Y;NoOptionsCanBeEntered"

		CashAppMsg56 is a MessageField
			restricted
			"AllAlgorithmOptionsRequired"

		CashAppMsg57 is a MessageField
			restricted
			"Batchnbrcannotbeenteredwithlaststatementoption"

		CashAppMsg61 is a MessageField
			restricted
			"Variancecannotbenegative"

		CashAppMsg62 is a MessageField
			restricted
			"Reasoncodedoesnotexist"

		CashAppMsg63 is a MessageField
			restricted
			"Reasoncodereasoncodetypeisnotanadjustment"

		CashAppMsg64 is a MessageField
			restricted
			"Reasoncode;reasoncodetypecannotbechargeback"

		CashAppMsg67 is a MessageField
			restricted
			"CombinationInvoicesCannotBeGreaterThanMaximumInvoices"

		CashAppMsg68 is a MessageField
			restricted
			"OperatorRequired"

		CashAppMsg69 is a MessageField
			restricted
			"OperatorDoesNotExist"

		CashAppMsg70 is a MessageField
			restricted
			"OperatorDoesNotHaveActiveStatus"

		CashAppMsg71 is a MessageField
			restricted
			"Gain-lossreasoncodedoesnotexist"

		CashAppMsg72 is a MessageField
			restricted
			"Overrideapplymethodcannotenteralgorithmoptions"

		ProcessSelectionsInBackgroundMsg is a MessageField
			restricted
			"ProcessSelectionsIsProcessingInBackground"

		NonARPaymentsFailedToReleaseMsg is a MessageField
			restricted
			"OneOrMore_\Non_\AR_\Cash_\PaymentsFailedToRelease"

		DerivedDisplayCurrency	is a DerivedField
			type is like Currency
			LocalCurrency = actor.context.Currency
			return LocalCurrency
			return OriginalCurrency

		PaymentOpen is a DerivedField
			type is like InternationalAmount
			if (IsNonARPayment)
				return 0
			else
				if (TransferAmountTransactionCurrency < TransactionAmount)
					return (TransactionAmount + CreditAppliedAmount - (AppliedAmount + AdjustAmountTransactionCurrency))
				else
					if (TransferAmountTransactionCurrency = AdjustAmountTransactionCurrency)
						return (TransactionAmount + CreditAppliedAmount - (AppliedAmount + TransferAmountTransactionCurrency))
					else
						return (TransactionAmount + CreditAppliedAmount - (AppliedAmount + TransferAmountTransactionCurrency + AdjustAmountTransactionCurrency))

		CashApplicationPaymentOpen is a DerivedField
			type is like InternationalAmount
			if (DerivedDisplayCurrency not entered)
				return PaymentOpen
			else

				CurrencyWork.TransactionAmount					= PaymentOpen
				CurrencyWork.FromCurrency						= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency				= DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		DerivedPaymentReversalHeaderSelections is a DerivedField
            type is Decimal size 19.3
			restricted
            return (ReceivablePaymentApplyReverseHeaderRel.ReverseDetailDebitApplicationAmount - ReceivablePaymentApplyReverseHeaderRel.ReverseDetailCreditApplicationAmount)

		DerivedPaymentReversalNewOpenAmount is a DerivedField
            type is Decimal size 19.3
			restricted
            return (PaymentOpen + DerivedPaymentReversalHeaderSelections)

		TypeDsp	 is a StringField
			type is Alpha size 12
			restricted
			TypeOfPayment
			PaymentNumber

		DerivedTransferredFromCustomer is a DerivedField
			type is Alpha 12
			if (Transferred)
				if (TransferredFromCustomer not entered)
					return "Unassigned"
				else
					return TransferredFromCustomer
			else
				return ""

		DerivedTransferredToCustomer is a DerivedField
			type is Alpha 12
			if (Transferred)
				if (TransferredToCustomer not entered)
					return "Non AR"
				else
					return TransferredToCustomer
			else
				return ""

		TransferCompleteMessage is a MessageField
			restricted
			"TransferComplete"

		PartialBalanceTransferredMessage is a MessageField
			restricted
			"PartialOpenBalanceTransferred;MaintainRemitsAsNeeded"

		CancelMessage is a MessageField
			restricted
			"Cancelled"

		TransferMessage is a MessageField
			restricted
			"Transferred"

		BalanceForwardMessage is a MessageField
			restricted
			"BalanceForwardCustomer"

		APTransferMessage is a MessageField
			restricted
			"TransferToAP"

		RTMMessage is a MessageField
			restricted
			"RTMPayment"

		UnreleasedRTMMessage is a MessageField
			restricted
			"HasUnreleasedRTMPayment"

		UnassignedMessage is a MessageField
			restricted
			"Unassigned"

		UnreleasedMessage is a MessageField
			restricted
			"Unreleased"

		ReleasedUnassignedMessage is a MessageField
			restricted
			"ReleasedUnassigned"

		OpenMessage is a MessageField
			restricted
			"Open"

		FullyAppliedMessage is a MessageField
			restricted
			"FullyApplied"

		ClosedMessage is a MessageField
			restricted
			"Closed"

		HistoricalMessage is a MessageField
			restricted
			"Historical"

		CancelOrTransfer is a DerivedField
			type is Alpha 20
			if (Cancelled entered)
				return CancelMessage
			else
			if (Transferred)
				return TransferMessage
			else
				return blank
		
		StandardizedOpenAmount	is a DerivedField
			type is like InternationalAmount
			if (PaymentOpen = 0)
				return 0
			else
			if (OriginalCurrency = first AllCustomerGroupRel.Currency)
				return PaymentOpen
			else
				LocalCurrencyWork.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				LocalCurrencyWork.ExchangeDate								= DepositDate
				LocalCurrencyWork.TransactionAmount							= PaymentOpen
				LocalCurrencyWork.FromCurrency								= OriginalCurrency
				LocalCurrencyWork.BaseAmount.ToCurrency						= first AllCustomerGroupRel.Currency
				return LocalCurrencyWork.BaseAmount.OutputCurrencyAmount
		
		DerivedMessage is a DerivedField
			type is Alpha 30
			default label is "Note"

			if (Transferred)
				return TransferMessage
			else
			if (Cancelled)
				return CancelMessage



			else
			if (HasAPTransfers)
				return APTransferMessage
			else
			if (HasUnreleasedRTMs)
				return UnreleasedRTMMessage
			else
			if (HasRTMs)
				return RTMMessage
			else
			if (TypeOfPayment.CustomerPayment
			and Customer not entered)
				return UnassignedMessage










		PendingAppliedCreditMemoAmount is a DerivedField	
			type is like InternationalAmount

			if (!action type.Create)
				include SumPendingAppliedCreditMemoRelAmounts	

				return (SumOfPendingAppliedCreditMemoRelPaymentApplicationAmount)	

		PendingAppliedNonCreditAmount is a DerivedField	
			type is like InternationalAmount

			if (!action type.Create)
				include SumPendingAppliedNonCreditMemoRelAmounts	

				return (SumOfPendingAppliedNonCreditMemoRelPaymentApplicationAmount)	

		PendingAppliedCreditMemoDiscountAmount is a DerivedField	
			type is like InternationalAmount


			include SumPendingAppliedCreditMemoRelAmounts
			return (SumOfPendingAppliedCreditMemoRelDerivedSelectDiscountAmount)

		SignedPendingAppliedCreditMemoDiscountAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PendingAppliedCreditMemoDiscountAmount * -1

		PendingAppliedNonCreditDiscountAmount is a DerivedField	
			type is like InternationalAmount


			include SumPendingAppliedNonCreditMemoRelAmounts
			return (SumOfPendingAppliedNonCreditMemoRelDerivedSelectDiscountAmount)

		NetPendingAppliedAdjustmentAmount is a DerivedField	
			type is like InternationalAmount


			return (PendingAppliedNonCreditDiscountAmount - PendingAppliedCreditMemoDiscountAmount)	

		NumberOfReceivableApplicationSelect		is a DerivedField	
			type is Numeric size 8

			return (instance count of PendingApplicationsRel)

		NumberOfPendingDebits					is a DerivedField	
			type is Numeric size 8

			return (instance count of PendingAppliedNonCreditMemoRel)

		NumberOfPendingCredits					is a DerivedField	
			type is Numeric size 8

			return (instance count of PendingAppliedCreditMemoRel)

		NumberOfPaymentWriteoffsAndChargebackMemos		is a DerivedField	
			type is Numeric size 6

			return (instance count of PendingAdjustMemoRel + instance count of PendingAdjustNonMemoRel)

		NumberOfChargebackMemos					is a DerivedField	
			type is Numeric size 6

			return (instance count of PendingAdjustMemoRel)

		NumberOfPaymentWriteoffs					is a DerivedField	
			type is Numeric size 6

			return (instance count of PendingAdjustNonMemoRel)

		PendingAdjustMemoAmount is a DerivedField	
			type is like InternationalAmount

			if (!action type.Create)
				include SumPendingAdjustMemoRelAmounts	

				return (SumOfPendingAdjustMemoRelCreditAdjustAmount)	

		PendingAdjustNonMemoAmount is a DerivedField	
			type is like InternationalAmount

			if (!action type.Create)
				include SumPendingAdjustNonMemoRelAmounts	

				return (SumOfPendingAdjustNonMemoRelAdjustAmount)	

		PendingOpenAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			return ((PaymentOpen + PendingAppliedCreditMemoAmount) - ((PendingAppliedNonCreditAmount - PendingAdjustMemoAmount) + PendingAdjustNonMemoAmount))

		CashApplicationPendingOpen is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedDisplayCurrency not entered)
				return PendingOpenAmount
			else

				CurrencyWork.TransactionAmount					= PendingOpenAmount
				CurrencyWork.FromCurrency						= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency				= DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		PendingSelections is a DerivedField	
			type is like InternationalAmount
			return (PendingAppliedNonCreditAmount - PendingAppliedCreditMemoAmount - PendingAdjustMemoAmount + PendingAdjustNonMemoAmount)

		PendingSelectionsDisplayCurrency is a DerivedField	
			type is like InternationalAmount
			if (DerivedDisplayCurrency not entered)
				return PendingSelections
			else

				CurrencyWork.TransactionAmount				= PendingSelections
				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		PendingDifference is a DerivedField	
			type is like InternationalAmount
			return (PaymentOpen - PendingSelections)

		PendingDifferenceDisplayCurrency is a DerivedField	
			type is like InternationalAmount
			if (DerivedDisplayCurrency not entered)
				return PendingDifference
			else

				CurrencyWork.TransactionAmount					= PendingDifference
				CurrencyWork.FromCurrency						= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency				= DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		SumOfDistributions is a DerivedField	
			type is like InternationalAmount
			if (!action type.Create)
				include SumNonARReceivableGLDistributionRel	
				if (Status.Open)

					return (SumOfNonARReceivableGLDistributionRelDistributionAmountCurrencyAmount * -1)	
				else

					return (SumOfNonARReceivableGLDistributionRelDistributionAmountCurrencyAmount)	

		SumOfDistributionsDisplay is a DerivedField	
			type is like InternationalAmount
			if (!action type.Create)
				include SumNonARReceivableGLDistributionRel	

				return (SumOfNonARReceivableGLDistributionRelDistributionAmountCurrencyAmount)	

		SumOfDistributionsDifference is a DerivedField	
			type is like InternationalAmount
			if (!action type.Create)
				return (TransactionAmount - SumOfDistributions)

		DerivedInvoiceAndDebitRemitTotal is a DerivedField	
			type is like InternationalAmount
			if (!action type.Create)
				include SumRemittanceInvoiceAndDebitMemoRelAmounts	

				return (SumOfRemittanceInvoiceAndDebitMemoRelAppldAmt)	

		DerivedCreditRemitTotal is a DerivedField	
			type is like InternationalAmount
			if (!action type.Create)
				include SumRemittanceCreditMemoRelAmounts	

				return (SumOfRemittanceCreditMemoRelAppldAmt)	

		DerivedRemitTotal is a DerivedField	
			type is like InternationalAmount
			if (!action type.Create)

				return (DerivedInvoiceAndDebitRemitTotal - DerivedCreditRemitTotal)	//IEFIN-72548 A - Removed the word "sum"

		DerivedRemitDifference is a DerivedField	
			type is like InternationalAmount
			return (TransactionAmount - DerivedRemitTotal)

		PaymentOpenCompanyCurrency is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			if (TransferBaseAmount < BaseAmount)
				return (BaseAmount + BaseCreditAppliedAmount - (BaseAppliedAmount + BaseAdjustAmount))
			else
				return (BaseAmount + BaseCreditAppliedAmount - (BaseAppliedAmount + TransferBaseAmount + BaseAdjustAmount ))

		PaymentOpenCustomerCurrency	is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency != CompanyCustomerRel.Currency)
				CurrencyWork2.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork2.ExchangeDate								= DepositDate
				CurrencyWork2.TransactionAmount							= PaymentOpen
				CurrencyWork2.FromCurrency								= OriginalCurrency
				CurrencyWork2.BaseAmount.ToCurrency						= CompanyCustomerRel.Currency
				return CurrencyWork2.BaseAmount.OutputCurrencyAmount
			else
				return PaymentOpen

		NationalAccountPaymentOpenCustomerCurrency	is a DerivedField			
			type is like InternationalAmount
			initialize CurrencyWork2
			if (OriginalCurrency != NationalCompanyCustomerRel.Currency)
				CurrencyWork2.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork2.ExchangeDate								= DepositDate
				CurrencyWork2.TransactionAmount							= PaymentOpen
				CurrencyWork2.FromCurrency								= OriginalCurrency
				CurrencyWork2.BaseAmount.ToCurrency						= NationalCompanyCustomerRel.Currency
				return CurrencyWork2.BaseAmount.OutputCurrencyAmount
			else
				return PaymentOpen

		TransferBaseAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return (CurrencyRate * TransferAmountTransactionCurrency)

		PaymentAlpha is a DerivedField
			type is Alpha size 6
			restricted
			return ReceivablePayment

		PaymentString is a StringField
			type is Alpha size 6
			restricted
			PaymentAlpha[1:6]








		AgeDays is a DerivedField
			type is Numeric 9
			restricted
			return (current corporate date - DepositDate)

		AgePeriod is a DerivedField
			type is Alpha 30
			restricted
			if (AgeDays < 30)
				return "Less Than 30 Days"
			else
			if (AgeDays < 60)
				return "31 To 60 Days"
			else
			if (AgeDays < 90)
				return "61 To 90 Days"
			else
			if (AgeDays < 120)
				return "91 To 120 Days"
			else
				return "Over 120 Days"

		NumPaymentsForAgePeriod	is a DerivedField	
			type is like InternationalAmount
			restricted
			if (!action type.Create)
				return (instance count of PaymentsAgePeriodRel)

		SumPaymentsForAgePeriod	is a DerivedField
			type is like InternationalAmount
			restricted
			if (!action type.Create)
				include SumPaymentsAgePeriodRelAmounts	

				return (SumOfPaymentsAgePeriodRelTransactionAmount)	

		DerivedNationalCompany is a DerivedField
			type is like Company
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.No)
				return Company
			else
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return CompanyCustomerRel.NationalCompany
			else
				return CompanyCustomerRel.Company

		DerivedNationalCustomer is a DerivedField
			type is like Customer
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.No)
				return Customer
			else
			if (CompanyCustomerRel.NationalAccountIndicator.Child)

				return NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return CompanyCustomerRel.Customer


		ContractPrepaymentsAppliedAmount is a DerivedField
			type is like InternationalAmount
			return (BaseAmount + BaseCreditAppliedAmount - (BaseAppliedAmount + BaseAdjustAmount))

		DerivedApplicationGeneralLedgerDate is a DerivedField
			type is Date
			restricted
			if (Company.DefaultApplicationDate.LatestTransactionPostDate
			or Company.DefaultApplicationDate.PaymentCreditPostDate)
				return GeneralLedgerDate
			else
				return current corporate date

		DerivedIsSelectedForAP is a DerivedField
			type is Alpha 3   
			restricted
			if (IsSelectedForAP)
				return "Yes"  
			else
				return blank

		ReturnToMakerBaseAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (TransferDate entered
			and Customer != TransferredToCustomer)
				if (CurrencyMultiplicationOrDivision.Multiply)
					WorkAmount	= (BaseAmount - (TransferAmountTransactionCurrency * CurrencyRate))			
				else
					WorkAmount	= (BaseAmount - (TransferAmountTransactionCurrency / CurrencyRate))			
			else
				WorkAmount = BaseAmount

			return WorkAmount

		ReturnToMakerTransactionAmount is a DerivedField
			type is like InternationalAmount

			if (TransferDate entered
			and Customer != TransferredToCustomer)
				WorkAmount	= (TransactionAmount - TransferAmountTransactionCurrency)						
			else
				WorkAmount = TransactionAmount

			return WorkAmount
		




































		CustomerGroupAgingPeriod is a DerivedField
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			initialize LocalDaysDifference
			if (!Company.CustomerGroupField.CustomerGroup.AgePaymentsRule.AgedInCurrentColumn)
				if (Company.CustomerGroupField.CustomerGroup.AgingMethod.AgeByTransactionDate)
					LocalDaysDifference = LocalCurrentDate - DepositDate
				else
					LocalDaysDifference = LocalCurrentDate - DepositDate

			if (Company.CustomerGroupField.CustomerGroup.AgePaymentsRule.AgedInCurrentColumn
			or  LocalDaysDifference = 0)
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 3
				else
					return 2
			else
			if (LocalDaysDifference < 0)
				if (Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod entered
				and Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod >= (LocalDaysDifference * -1))
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						if ((Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod + Company.CustomerGroupField.CustomerGroup.AgeFuture) >= (LocalDaysDifference * -1))
							return 2
						else
							return 1
					else
						return 1
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[1])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 4
				else
					return 3
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[2])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 5
				else
					return 4
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[3])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 6
				else
					return 5
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[4])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 7
				else
					return 6
			else
			if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[5])
					return 8
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[6])
					return 9
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[7])
					return 10
				else
					return 11
			else
				return 7

		AgingCodeAgingPeriod is a DerivedField
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			initialize LocalDaysDifference
			if (CompanyCustomerRel.AgingCode entered)
				if (!CompanyCustomerRel.AgingCode.AgePaymentsRule.AgedInCurrentColumn)
					if (CompanyCustomerRel.AgingCode.AgingMethod.AgeByTransactionDate)
						LocalDaysDifference = LocalCurrentDate - DepositDate
					else
						LocalDaysDifference = LocalCurrentDate - DepositDate

				if (CompanyCustomerRel.AgingCode.AgePaymentsRule.AgedInCurrentColumn
				or  LocalDaysDifference = 0)
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
				if (LocalDaysDifference < 0)
					if (CompanyCustomerRel.AgingCode.CurrentAgingPeriod entered
					and CompanyCustomerRel.AgingCode.CurrentAgingPeriod >= (LocalDaysDifference * -1))
						if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
							return 3
						else
							return 2
					else
						if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
							if ((CompanyCustomerRel.AgingCode.CurrentAgingPeriod + CompanyCustomerRel.AgingCode.AgeFuture) >= (LocalDaysDifference * -1))
								return 2
							else
								return 1
						else
							return 1
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[1])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 4
					else
						return 3
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[2])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 5
					else
						return 4
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[3])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 6
					else
						return 5
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[4])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 7
					else
						return 6
				else
				if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[5])
						return 8
					else
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[6])
						return 9
					else
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[7])
						return 10
					else
						return 11
				else
					return 7
			else
				return 2

		CompanyAgingPeriod is a DerivedField
			type is Numeric 2
			restricted
			initialize LocalDaysDifference
			LocalCurrentDate = current corporate date
			if (!Company.AgePaymentsRule.AgedInCurrentColumn)
				if (Company.AgingMethod.AgeByTransactionDate)
					LocalDaysDifference = LocalCurrentDate - DepositDate
				else
					LocalDaysDifference = LocalCurrentDate - DepositDate

			if (Company.AgePaymentsRule.AgedInCurrentColumn
			or  LocalDaysDifference = 0)
				if (Company.ExpandedAgingPeriods)
					return 3
				else
					return 2
			else
			if (LocalDaysDifference < 0)
				if (Company.CurrentAgingPeriod entered
				and Company.CurrentAgingPeriod >= (LocalDaysDifference * -1))
					if (Company.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
					if (Company.ExpandedAgingPeriods)
						if ((Company.CurrentAgingPeriod + Company.AgeFuture) >= (LocalDaysDifference * -1))
							return 2
						else
							return 1
					else
						return 1
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[1])
				if (Company.ExpandedAgingPeriods)
					return 4
				else
					return 3
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[2])
				if (Company.ExpandedAgingPeriods)
					return 5
				else
					return 4
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[3])
				if (Company.ExpandedAgingPeriods)
					return 6
				else
					return 5
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[4])
				if (Company.ExpandedAgingPeriods)
					return 7
				else
					return 6
			else
			if (Company.ExpandedAgingPeriods)
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[5])
					return 8
				else
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[6])
					return 9
				else
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[7])
					return 10
				else
					return 11
			else
				return 7

		CustomerGroupAmount is a DerivedField
			type is like InternationalAmount
			restricted

			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return TransactionAmount
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return BaseAmount
			else
				CurrencyWork2.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork2.ExchangeDate								= DepositDate
				CurrencyWork2.TransactionAmount							= TransactionAmount
				CurrencyWork2.FromCurrency								= OriginalCurrency
				CurrencyWork2.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork2.BaseAmount.OutputCurrencyAmount

		SignedCustomerGroupAmount			is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return CustomerGroupAmount * -1

		NationalAccountAmount is a DerivedField
			type is like InternationalAmount
			restricted

			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return TransactionAmount
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return BaseAmount
			else
				CurrencyWork2.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork2.ExchangeDate								= DepositDate
				CurrencyWork2.TransactionAmount							= TransactionAmount
				CurrencyWork2.FromCurrency								= OriginalCurrency
				CurrencyWork2.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork2.BaseAmount.OutputCurrencyAmount

		SignedNationalAccountAmount			is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return NationalAccountAmount * -1

		CustomerGroupOpenAmount is a DerivedField
			type is like InternationalAmount

			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return PaymentOpen
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return PaymentOpenCompanyCurrency
			else
				CurrencyWork2.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork2.ExchangeDate								= DepositDate
				CurrencyWork2.TransactionAmount							= PaymentOpen
				CurrencyWork2.FromCurrency								= OriginalCurrency
				CurrencyWork2.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork2.BaseAmount.OutputCurrencyAmount

		SignedCustomerGroupOpenAmount			is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return CustomerGroupOpenAmount * -1

		NationalAccountOpenAmount is a DerivedField
			type is like InternationalAmount

			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return PaymentOpen
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return PaymentOpenCompanyCurrency
			else
				CurrencyWork2.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork2.ExchangeDate								= DepositDate
				CurrencyWork2.TransactionAmount							= PaymentOpen
				CurrencyWork2.FromCurrency								= OriginalCurrency
				CurrencyWork2.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork2.BaseAmount.OutputCurrencyAmount

		SignedNationalAccountOpenAmount			is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return NationalAccountOpenAmount * -1

		SignedOpenAmount is a DerivedField
			type is like InternationalAmount
			return PaymentOpen * -1

		SignedBaseOpenAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PaymentOpenCompanyCurrency * -1

		SignedTransactionAmount is a DerivedField
			type is like InternationalAmount
			return TransactionAmount * -1

		SignedBaseAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return BaseAmount * -1

		DisplaySignedTransactionAmount is a DerivedField	
			type is like InternationalAmount



			return TransactionAmount

		SignedAppliedAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return AppliedAmount * -1

		DisplaySignedAppliedAmount is a DerivedField	
			type is like InternationalAmount



			return SignedAppliedAmount	

		SignedCreditAppliedAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return CreditAppliedAmount * -1

		DisplaySignedCreditAppliedAmount is a DerivedField	
			type is like InternationalAmount



			return CreditAppliedAmount

		SignedAdjustAmountTransactionCurrency is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return AdjustAmountTransactionCurrency * -1

		DisplaySignedAdjustAmountTransactionCurrency is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals



			return SignedAdjustAmountTransactionCurrency	

		SignedCashApplicationPaymentOpen is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return CashApplicationPaymentOpen * -1

		DisplaySignedCashApplicationPaymentOpen is a DerivedField	
			type is like InternationalAmount



			return CashApplicationPaymentOpen

		SignedPendingAppliedNonCreditAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PendingAppliedNonCreditAmount * -1

		DisplaySignedPendingAppliedNonCreditAmount is a DerivedField	
			type is like InternationalAmount



			return SignedPendingAppliedNonCreditAmount	

		SignedPendingAppliedCreditMemoAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PendingAppliedCreditMemoAmount * -1

		DisplaySignedPendingAppliedCreditMemoAmount is a DerivedField	
			type is like InternationalAmount



			return PendingAppliedCreditMemoAmount

		SignedPendingAdjustMemoAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PendingAdjustMemoAmount * -1

		DisplaySignedPendingAdjustMemoAmount is a DerivedField	
			type is like InternationalAmount



			return PendingAdjustMemoAmount

		SignedPendingAdjustNonMemoAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PendingAdjustNonMemoAmount * -1

		DisplaySignedPendingAdjustNonMemoAmount is a DerivedField	
			type is like InternationalAmount



			return SignedPendingAdjustNonMemoAmount	

		SignedPendingSelectionsDisplayCurrency is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PendingSelectionsDisplayCurrency * -1

		DisplaySignedPendingSelectionsDisplayCurrency is a DerivedField	
			type is like InternationalAmount



			return SignedPendingSelectionsDisplayCurrency

		SignedPendingDifferenceDisplayCurrency is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return PendingDifferenceDisplayCurrency * -1

		DisplaySignedPendingDifferenceDisplayCurrency is a DerivedField	
			type is like InternationalAmount



			return PendingDifferenceDisplayCurrency


		CompanyCustomerMaximumOverageAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return CompanyCustomerRel.MaximumOverageAmount

		CompanyCustomerMaximumOveragePercent is a DerivedField	
			type is like Percent
			return CompanyCustomerRel.MaximumOveragePercent

		CompanyCustomerMaximumOveragePercentageThreshold is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return (CompanyCustomerRel.MaximumOveragePercent * TransactionAmount)


		FilteredAmountCustomerCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = CompanyCustomerRel.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork2.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork2.ExchangeDate					= DepositDate
					CurrencyWork2.TransactionAmount				= TransactionAmount
					CurrencyWork2.FromCurrency					= OriginalCurrency
					CurrencyWork2.BaseAmount.ToCurrency			= CompanyCustomerRel.Currency
					WorkAmount									= CurrencyWork2.BaseAmount.OutputCurrencyAmount

				return WorkAmount * -1

		FilteredAmountCompanyCurrency is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork2.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork2.ExchangeDate					= DepositDate
					CurrencyWork2.TransactionAmount				= TransactionAmount
					CurrencyWork2.FromCurrency					= OriginalCurrency
					CurrencyWork2.BaseAmount.ToCurrency			= Company.Currency
					WorkAmount									= CurrencyWork2.BaseAmount.OutputCurrencyAmount

				return WorkAmount * -1

		FilteredAmountGroupCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.CustomerGroupField.CustomerGroup.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork2.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork2.ExchangeDate					= DepositDate
					CurrencyWork2.TransactionAmount				= TransactionAmount
					CurrencyWork2.FromCurrency					= OriginalCurrency
					CurrencyWork2.BaseAmount.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency
					WorkAmount									= CurrencyWork2.BaseAmount.OutputCurrencyAmount

				return WorkAmount * -1

		SignedBaseCurrentAmount is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			CurrencyWork2.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			CurrencyWork2.ExchangeDate								= current corporate date
			CurrencyWork2.TransactionAmount							= TransactionAmount
			CurrencyWork2.FromCurrency								= OriginalCurrency
			CurrencyWork2.BaseAmount.ToCurrency						= Company.Currency
			return CurrencyWork2.BaseAmount.OutputCurrencyAmount * -1

		SingleSpace is a StringField
			type is Alpha 1
			" "


		DerivedTransactionCount is a DerivedField
			type is Numeric 7
			return 1

		DerivedStatus is a DerivedField
			type is MessageField
			if (Status.Unreleased)
				return UnreleasedMessage
			else							
			if (Status.ReleasedUnassigned	
			and TypeOfPayment.NonArPayment)	
				return HistoricalMessage	
			else
			if (Status.ReleasedUnassigned)
				return ReleasedUnassignedMessage
			else
			if (Status.Open
			and TypeOfPayment.NonArPayment)
				return HistoricalMessage
			else
			if (Status.Open)
				return OpenMessage
			else
			if (Status.FullyApplied)
				if (TypeOfPayment.NonArPayment)
					return HistoricalMessage
				else
				if (Transferred)
					return TransferMessage
				else
					return FullyAppliedMessage
			else
			if (Status.Closed)
				return ClosedMessage
			else
			if (Status.Historical)
				return HistoricalMessage

		DerivedStatusStateField is a DerivedField
			type is Numeric 1
			restricted
			if (Status.Unreleased)
				return 3
			else
			if (Status.ReleasedUnassigned
			and TypeOfPayment.NonArPayment)
				return 9
			else
			if (Status.ReleasedUnassigned)
				return 1
			else
			if (Status.Open
			and TypeOfPayment.NonArPayment)
				return 9
			else
			if (Status.Open)
				return 2
			else
			if (Status.FullyApplied)
				if (TypeOfPayment.NonArPayment)
					return 9
				else
				if (Transferred)
					return 4
				else
					return 7
			else
			if (Status.Closed)
				return 8
			else
			if (Status.Historical)
				return 9

		RNACodeLabel is a DerivedField
			type is Alpha 15
			if (ReceivablePrepaymentRel exists)
				return "Prepayment Code"
			else
				return "RNA Code"

		Reference is a StringField
			type is Alpha 22
			restricted
			PaymentNumber

		AppliedAmountGroupCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.CustomerGroupField.CustomerGroup.Currency)
					WorkAmount = AppliedAmount
				else
					CurrencyWork2.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork2.ExchangeDate					= DepositDate
					CurrencyWork2.TransactionAmount				= AppliedAmount
					CurrencyWork2.FromCurrency					= OriginalCurrency
					CurrencyWork2.BaseAmount.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency
					WorkAmount									= CurrencyWork2.BaseAmount.OutputCurrencyAmount

				return WorkAmount

		OpenAmountGroupCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.CustomerGroupField.CustomerGroup.Currency)
					WorkAmount = (TransactionAmount - AppliedAmount)
				else
					CurrencyWork2.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork2.ExchangeDate					= DepositDate
					CurrencyWork2.TransactionAmount				= (TransactionAmount - AppliedAmount)
					CurrencyWork2.FromCurrency					= OriginalCurrency
					CurrencyWork2.BaseAmount.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency
					WorkAmount									= CurrencyWork2.BaseAmount.OutputCurrencyAmount

				return WorkAmount

		DerivedPortalBaseCurrency is a DerivedField
			type is like Currency
			restricted
			if (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsNationalAccountParent)
				return actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany.CustomerGroupField.CustomerGroup.Currency
			else
				return actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany.GeneralLedgerCompany.Currency

		DerivedPortalAppliedAmount is a DerivedField
			type is like InternationalAmount
			if (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsNationalAccountParent)
				return AppliedAmountGroupCurrency
			else
				return BaseAppliedAmount

		DerivedPortalOpenAmount is a DerivedField
			type is like InternationalAmount
			if (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsNationalAccountParent)
				return OpenAmountGroupCurrency
			else
				return PaymentOpenCompanyCurrency

		DerivedGeneralLedgerDate is a DerivedField
			type is Date
			restricted
			if (Company.DefaultApplicationDate.LatestTransactionPostDate
			or Company.DefaultApplicationDate.PaymentCreditPostDate)
				if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
				and  GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
					return CompanySystemClosingControlRel.ValidEntryDate.Begin
				else
					return GeneralLedgerDate
			else
				if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
				and  current corporate date not within CompanySystemClosingControlRel.ValidEntryDate)
					return CompanySystemClosingControlRel.ValidEntryDate.Begin
				else
					return current corporate date

		DerivedOverApplyInvoiceOpenAmount				is a DerivedField
			type is like InternationalAmount
			restricted
			include SumEligibleOverApplyOpenReceivableInvoiceDetailRelAmounts
			return SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency


		DerivedDelimiter is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		DerivedAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity

		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAccountingEntity

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedDistributionFlag	is a DerivedField
			type is Alpha size 2
			restricted
			LocalConfigurationParameter	= "SyncDebitTransfer_Out_DistributionFlag"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerviedReceivablePaymentHeader is a DerivedField
			type is Numeric 6
			restricted
			return ReceivablePaymentHeader using "%d"

		BODDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return Company using "%d" + DerivedDelimiter + DerviedReceivablePaymentHeader

		BODStatusCode is a DerivedField
			type is Alpha size 10
			restricted
			return "Open"

		DerivedDepositDate is a DerivedField
			type is Alpha size 25
			restricted
			return DepositDate

		DerivedFormattedDepositDate is a DerivedField
			type is Alpha size 15
			restricted
			return DerivedDepositDate[1:4] + "-" + DerivedDepositDate[5:6] + "-" + DerivedDepositDate[7:8]

		DerivedTaxIDScheme is a DerivedField
			type is Alpha size 60
			restricted
			return "TaxIdentificationNumber"

		DerivedLineDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return ReceivablePayment + DerivedDelimiter + PaymentNumber

		DerivedReceivablePayment is a DerivedField
			type is Numeric 6
			restricted
			return ReceivablePayment using "%d"

		DerivedMandateID is a DerivedField
			type is AlphaUpper size 35
			restricted
			if(Company entered)
				return Customer.last CustomerDraftBankRel.MandateID

		DerivedAmendmentIndicator is a DerivedField
			type is Alpha size 10
			restricted
			return "false"

		DerivedInstructedAmt is a DerivedField
			type is Decimal size 19.3
			restricted
			return BaseAmount

		DerivedTransactionAmt is a DerivedField
			type is Decimal size 19.3
			restricted
			return TransactionAmount

		DerivedPaymentStatus is a DerivedField
			type is Alpha size 50
			restricted
			if(Status.Unreleased)
				return "Unreleased"
			if(Status.ReleasedUnassigned)
				return "ReleasedUnassigned"
			if(Status.Open)
				return "Open"
			if(Status.FullyApplied)
				return "FullyApplied"
			if(Status.Closed)
				return "Closed"
			if(Status.Historical)
				return "Historical"

		DerivedPaymentType is a DerivedField
			type is Alpha size 50
			restricted
			if(ReceivablePaymentHeader.DerivedEFTPaymentType entered)
				return "EFT Payment"
			if(TypeOfPayment.NonArPayment)
				return "Non AR payment"
			if(TypeOfPayment.CustomerPayment)
				return "Manual Payment"
			if(Prepayment.Prepayment)
				return "Pre Payment"

		DerivedHasPendingOrCompletedWork is a DerivedField
			type is Boolean
			restricted
			if (LocalDeterminedIfHasPendingOrCompletedWork)
				return LocalRestrictDueToPendingOrCompletedWork
			else
				LocalRestrictDueToPendingOrCompletedWork = false

				if (HasPendingTransactions
				or  HasAPTransfers
				or  HasRTMs)
					LocalRestrictDueToPendingOrCompletedWork = true

				LocalDeterminedIfHasPendingOrCompletedWork = true
				return LocalRestrictDueToPendingOrCompletedWork

		DerivedShowOnCashApplicationSelectListWithDetail is a DerivedField
			type is Boolean
			restricted
			if (LocalShowOnCashApplicationSelectListDone)
				return LocalShowOnCashApplicationSelectList
			else
				LocalShowOnCashApplicationSelectList = false

				if (ShowOnCashApplicationSelectListWithDetail)
					LocalShowOnCashApplicationSelectList = true

				LocalShowOnCashApplicationSelectListDone = true
				return LocalShowOnCashApplicationSelectList

		DerivedCustomerName is a DerivedField
			type is Alpha size 120
			restricted
			if(Customer != "")
				return Customer.Name
			else
				return ""

		DerivedCustomerContact is a DerivedField
			type is AlphaUpper size 20
			restricted
			if(Customer != "")
				return Customer.Contact
			else
				return ""

		DerivedCustomerAddLine1 is a DerivedField
			type is Alpha size 50
			restricted
			if(Customer != "")
				return Customer.PostalAddress.DeliveryAddress.AddressLine1
			else
				return ""

		DerivedCustomerAddLine2 is a DerivedField
			type is Alpha size 50
			restricted
			if(Customer != "")
				return Customer.PostalAddress.DeliveryAddress.AddressLine2
			else
				return ""

		DerivedCustomerAddLine3 is a DerivedField
			type is Alpha size 50
			restricted
			if(Customer != "")
				return Customer.PostalAddress.DeliveryAddress.AddressLine3
			else
				return ""

		DerivedCustomerAddLine4 is a DerivedField
			type is Alpha size 50
			restricted
			if(Customer != "")
				return Customer.PostalAddress.DeliveryAddress.AddressLine4
			else
				return ""

		DerivedCustomerMunicipality	is a DerivedField
			type is Alpha 58
			restricted
			if(Customer != "")
				return Customer.PostalAddress.Municipality
			else
				return ""

		DerivedCustomerStateProvince is a DerivedField
			type is Alpha 58
			restricted
			if(Customer != "")
				return Customer.PostalAddress.StateProvince
			else
				return ""

		DerivedCustomerPostalCode is a DerivedField
			type is Alpha 10
			restricted
			if(Customer != "")
				return Customer.PostalAddress.PostalCode
			else
				return ""

		DerivedCustomerCountry is a DerivedField
			type is AlphaUpper size 5
			restricted
			if(Customer != "")
				return Customer.PostalAddress.Country
			else
				return ""

		DerivedCustomerTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(Customer != "")
				return Customer.TaxID
			else
				return ""

		DerviedCustomerDraftBank is a DerivedField
			type is AlphaUpper size 15
			restricted
			if(Company entered)
				return Customer.last CustomerDraftBankRel.CustomerDraftBank.BOEEFTBank

		DerivedCustomerDraftBankAccountValidationType is a DerivedField
			type is AlphaUpper size 1
			restricted
			return Customer.last CustomerDraftBankRel.BankAccountValidationType

		DerivedCDBIBANID is a DerivedField
			type is Alpha 60
			restricted
			if(Company entered and (DerivedCustomerDraftBankAccountValidationType = "Z" or DerivedCustomerDraftBankAccountValidationType = "Y"))
				return Customer.last CustomerDraftBankRel.CustomerDraftBank.BOEEFTBankAccount
			else
				return ""

		DerivedCDBBBANID is a DerivedField
			type is Alpha 60
			restricted
			if(Company entered and (DerivedCustomerDraftBankAccountValidationType = "Z" or DerivedCustomerDraftBankAccountValidationType = "Y"))
				return ""
			else
				return Customer.last CustomerDraftBankRel.CustomerDraftBank.BOEEFTBankAccount

		DerivedCCVatRegistrationNumber is a DerivedField
			type is AlphaUpper size 25
			restricted
			return CompanyCustomerRel.VATRegistrationNumber

		DerivedCompanyCustomerTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedCCVatRegistrationNumber != "")
				return DerivedCCVatRegistrationNumber
			else
				return DerivedCustomerTaxID

		DerivedCompanyName is a DerivedField
			type is Alpha size 80
			restricted
			return Company.Name

		DerivedCompanyAddressLine1 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCompanyAddressLine2 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCompanyAddressLine3 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCompanyAddressLine4 is a DerivedField
			type is Alpha size 50
			restricted
			return Company.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCompanyMunicipality	is a DerivedField
			type is Alpha 58
			restricted
			return Company.PostalAddress.Municipality

		DerivedCompanyStateProvince is a DerivedField
			type is Alpha 58
			restricted
			return Company.PostalAddress.StateProvince

		DerivedCompanyPostalCode is a DerivedField
			type is Alpha 10
			restricted
			return Company.PostalAddress.PostalCode

		DerivedCompanyCountry is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.PostalAddress.Country

		DerivedDUNSID is a DerivedField
			type is Numeric size 9
			restricted
			return Company.CreditAgencyReportingNumber

		DerivedBankAccountValidationType is a DerivedField
			type is AlphaUpper size 1
			restricted
			return CashCode.BankAccountValidationType

		DerivedCCBankAccountNumber	is a DerivedField
			type is AlphaUpper 35
			restricted
			return CashCode.BankAccountNumber

		DerivedCreditorBBANID is a DerivedField
			type is Alpha 60
			restricted
			if(Company entered and (DerivedBankAccountValidationType = "Z" or DerivedBankAccountValidationType = "Y"))
				return ""
			else
				return DerivedCCBankAccountNumber

		DerivedCreditorIBANID is a DerivedField
			type is Alpha 60
			restricted
			if(Company entered and (DerivedBankAccountValidationType = "Z" or DerivedBankAccountValidationType = "Y"))
				return DerivedCCBankAccountNumber
			else
				return ""

		DerivedCCFinancialInstitution is a DerivedField
			type is AlphaUpper size 60
			restricted
			return CashCode.FinancialInstitution

		DerivedCashCodeID	is a DerivedField
			type is Alpha size 60
			restricted
			return CashCode + DerivedDelimiter + DerivedCCFinancialInstitution
		DerivedSwiftID is a DerivedField
			type is AlphaUpper size 12
			restricted
			return CashCode.SwiftID
		DerivedFIBAddressLine1 is a DerivedField
			type is Alpha size 50
			restricted
			return CashCode.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine1

		DerivedFIBAddressLine2 is a DerivedField
			type is Alpha size 50
			restricted
			return CashCode.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine2

		DerivedFIBAddressLine3 is a DerivedField
			type is Alpha size 50
			restricted
			return CashCode.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine3

		DerivedFIBAddressLine4 is a DerivedField
			type is Alpha size 50
			restricted
			return CashCode.FinancialInstitutionBranch.Address.DeliveryAddress.AddressLine4

		DerivedClearingSystemMemberID is a DerivedField
			type is Numeric 4
			restricted
			return CashCode.FinancialInstitutionBranch.ClearingSystemMemberID

		DerivedFIBCountry is a DerivedField
			type is AlphaUpper size 5
			restricted
			return CashCode.FinancialInstitutionBranch.Address.Country

		DerivedFIBPostalCode is a DerivedField
			type is Alpha 10
			restricted
			return CashCode.FinancialInstitutionBranch.Address.PostalCode

		DerivedFIBMunicipality	is a DerivedField
			type is Alpha 58
			restricted
			return CashCode.FinancialInstitutionBranch.Address.Municipality

		DerivedFIBStateProvince is a DerivedField
			type is Alpha 58
			restricted
			return CashCode.FinancialInstitutionBranch.Address.StateProvince

		DerivedFinancialInstitutionBranch is a DerivedField
			type is AlphaUpper 50
			restricted
			return CashCode.FinancialInstitutionBranch

		DerivedCashCodeCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return CashCode.Currency

		DerivedCompanyCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.Currency

		DerivedLocalInstrumentCode is a DerivedField
			type is Alpha 10
			restricted
			if(CashCode.Sepa)
				return "CORE"
			else
				return "Accepted"
		DerivedDebitTransferType is a DerivedField
			type is Alpha 10
			restricted
			if(CashCode.Sepa)
				return "SEPA"
			else
				return "CASH"

		DerivedTransferMethod	is a DerivedField
			type is Alpha 10
			restricted
			return "DD"

		DerivedBankClientIdentifier is a DerivedField
			type is AlphaUpper 50
			restricted
			return CashCode.FinancialInstitutionBranch.BankClientIdentifier

		DerivedItalySchemaName	is a DerivedField
			type is Alpha size 60
			restricted
			return "CountryIdentificationNumber"

		DerivedBankIDSchema is a DerivedField
			type is Alpha size 60
			restricted
			if(Company.AccountingEntity.AddressCode.PostalAddress.Country = "SE" or Company.AccountingEntity.AddressCode.PostalAddress.Country = "NO")
				return DerivedItalySchemaName
			else
				return ""

		DebitTransferUserAreaXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(ReceivableGLDistributionRel exists and Customer entered and ReceivableCompanyRel.DetailGLTransPerPayment = "Y")
				initialize LocalDistSequence
				for each ReceivableGLDistributionRel
					if(DerivedDistributionFlag = "Y" and ReceivableCompanyRel.DetailGLTransPerPayment = "Y")
						if(each.DistributionAmount.CurrencyAmount = TransactionAmount*(-1))
							LocalDistSequence += 1
							each.LocalPaymentType		= DerivedPaymentType
							each.LocalPaymentStatus	= DerivedPaymentStatus
							each.LocalCompanyCurrency   = DerivedCompanyCurrency
							each.LocalBODCompany		= Company
							each.LocalCustomer			= Customer
							each.LocalDistributionSequence = LocalDistSequence
							DebitTransferUserAreaXMLBOD += template.IONDebitTransferDetailUserAreaDistributionBODXML_ReceivableGLDistribution_ST document for each
					else
						each.LocalPaymentType		= DerivedPaymentType
						each.LocalPaymentStatus	= DerivedPaymentStatus
						DebitTransferUserAreaXMLBOD = template.IONDebitTransferUserAreaBODXML_ReceivableGLDistribution_ST document for each
				return DebitTransferUserAreaXMLBOD
			else
			if(NonARReceivableGLDistributionRel exists and Customer not entered)
				initialize LocalDistSequence
				for each NonARReceivableGLDistributionRel
					if(DerivedDistributionFlag = "Y")
						LocalDistSequence += 1
						if(LocalDistSequence = 1)
							each.LocalPaymentType		= DerivedPaymentType
							each.LocalPaymentStatus		= DerivedPaymentStatus
						each.LocalCompanyCurrency		= DerivedCompanyCurrency
						each.LocalBODCompany			= Company
						each.LocalDistributionSequence	= LocalDistSequence
						DebitTransferUserAreaXMLBOD		+= template.IONDebitTransferNONARUserAreaDistributionBODXML_ReceivableGLDistribution_ST document for each
					else
						each.LocalPaymentType		= DerivedPaymentType
						each.LocalPaymentStatus		= DerivedPaymentStatus
						DebitTransferUserAreaXMLBOD	= template.IONDebitTransferUserAreaBODXML_ReceivableGLDistribution_ST document for each
				return DebitTransferUserAreaXMLBOD
			else
			if(ReceivableSummaryDistributionRel exists and ReceivableCompanyRel.DetailGLTransPerPayment = "N")
				initialize LocalDistSequence
				for each ReceivableSummaryDistributionRel
					if(DerivedDistributionFlag = "Y" and LocalAlreadyDistPopulated = false)
						if(each.DistributionAmount.CurrencyAmount < 0)
							LocalDistSequence += 1
							each.LocalPaymentType			= DerivedPaymentType
							each.LocalPaymentStatus			= DerivedPaymentStatus
							each.LocalCompanyCurrency		= DerivedCompanyCurrency
							each.LocalBODCompany			= Company
							each.LocalCustomer				= Customer
							each.LocalDistributionSequence	= LocalDistSequence
							each.LocalTransactionAmount	= TransactionAmount
							DebitTransferUserAreaXMLBOD	= template.IONDebitTransferUserAreaDistributionBODXML_ReceivableGLDistribution_ST document for each
							initialize LocalDistSequence
						LocalAlreadyDistPopulated = true
					else
					if(DerivedDistributionFlag = "Y" and LocalAlreadyDistPopulated = true)
						if(each.DistributionAmount.CurrencyAmount < 0)
							LocalDistSequence += 1
							each.LocalPaymentType			= DerivedPaymentType
							each.LocalPaymentStatus			= DerivedPaymentStatus
							each.LocalCompanyCurrency		= DerivedCompanyCurrency
							each.LocalBODCompany			= Company
							each.LocalCustomer				= Customer
							each.LocalDistributionSequence	= LocalDistSequence
							each.LocalTransactionAmount		= TransactionAmount
							DebitTransferUserAreaXMLBOD	= template.IONDebitTransferUserAreaDistributionBODXML_ReceivableGLDistribution_ST document for each
							initialize LocalDistSequence
					else
						each.LocalPaymentType		= DerivedPaymentType
						each.LocalPaymentStatus		= DerivedPaymentStatus
						DebitTransferUserAreaXMLBOD	= template.IONDebitTransferUserAreaBODXML_ReceivableGLDistribution_ST document for each
				return DebitTransferUserAreaXMLBOD
			else
			if(ReceivableGLDistributionRel exists and Customer entered and ReceivableCompanyRel.DetailGLTransPerPayment = "N")
				initialize LocalDistSequence
				for each ReceivableGLDistributionRel
					each.LocalPaymentType		= DerivedPaymentType
					each.LocalPaymentStatus		= DerivedPaymentStatus
					DebitTransferUserAreaXMLBOD	= template.IONDebitTransferUserAreaBODXML_ReceivableGLDistribution_ST document for each
				return DebitTransferUserAreaXMLBOD



		NumberOfLinesForSetAction		is a DerivedField
			type is Numeric 9
			if (NumberOfRecordForSetActionRel not exists)
				return 20
			else
			if (NumberOfRecordForSetActionRel.Value[1:3] entered)
				return NumberOfRecordForSetActionRel.Value[1:3]
			else
			if (NumberOfRecordForSetActionRel.Value[1:2] entered)
				return NumberOfRecordForSetActionRel.Value[1:2]
			else
			if (NumberOfRecordForSetActionRel.Value[1:1] entered)
				return NumberOfRecordForSetActionRel.Value[1:1]



		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedBODCurrentTimeStamp = current timestamp
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedLocation is a DerivedField
			type is Alpha size 10
			restricted
			return ""

		DerivedRevision is a DerivedField
			type is Alpha size 10
			restricted
			return ""

		DerivedPaymentNum is a DerivedField
			type is AlphaUpper size 22
			restricted
			return PaymentNumber

		DerivedBODDocumentID is a DerivedField
			type is Alpha size 150
			restricted
			return Company using "%d" + DerivedDelimiter + DerviedReceivablePaymentHeader + DerivedDelimiter + DerivedPaymentNum

		DerivedAdjBODDocumentID is a DerivedField
			type is Alpha size 150
			restricted
			if (ReceivableApplicationRel.DerivedFlag)
				return Company using "%d" + DerivedDelimiter + DerviedReceivablePaymentHeader + DerivedDelimiter + DerivedPaymentNum + DerivedDelimiter + "A"

		DerivedVariationID is a DerivedField
			type is Alpha 25
			restricted
			return bod id.VariationID

		DerivedBODId is a DerivedField
			type is Alpha size 150
			restricted
			return "infor-nid:" + DerivedTenantID + ":" + BODAccountingEntity + ":" + DerivedLocation + ":" + DerivedBODDocumentID + ":" + DerivedRevision + "?ReceivableTracker&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		DerivedAdjBODId is a DerivedField
			type is Alpha size 150
			restricted
			return "infor-nid:" + DerivedTenantID + ":" + BODAccountingEntity + ":" + DerivedLocation + ":" + DerivedAdjBODDocumentID + ":" + DerivedRevision + "?ReceivableTracker&verb=Sync&VariationID=" + DerivedVariationID


		DerivedActionCode is a DerivedField
			type is Alpha size 10
			restricted
			if(action type.Create or ActionCode.Create)
				return "Add"
			else
			if(action type.Update or ActionCode.Update or action type.Delete)
				return "Replace"
			else
				return ""

		DerivedDisplayID is a DerivedField
			type is Alpha size 30
			restricted
			if(ReceivableApplicationRel.DerivedFlag)
				return DerivedPaymentNum + "A"
			else
				return DerivedPaymentNum

		DerivedLastMoDDate is a DerivedField
			type is Alpha size 25
			restricted
			DerivedLastMoDDate = update stamp.timestamp
			return DerivedLastMoDDate[1:4] + "-" + DerivedLastMoDDate[5:6] + "-" + DerivedLastMoDDate[7:8] + "T" + DerivedLastMoDDate[9:10] + ":" + DerivedLastMoDDate[11:12] + ":" + DerivedLastMoDDate[13:14] + "Z"

		DerivedDocDateTime is a DerivedField
			type is Alpha size 25
			restricted
			DerivedDocDateTime = current timestamp
			return DerivedDocDateTime[1:4] + "-" + DerivedDocDateTime[5:6] + "-" + DerivedDocDateTime[7:8] + "T" + DerivedDocDateTime[9:10] + ":" + DerivedDocDateTime[11:12] + ":" + DerivedDocDateTime[13:14] + "Z"

		DerivedBODStatus is a DerivedField
			type is MessageField
			restricted
			if(AppliedAmount not entered)
				return "Open"
			else
			if(TransactionAmount > AppliedAmount)
				return "PartialPaid"
			else
				return "Paid"

		DerivedCustomerID is a DerivedField
			type is Alpha size 15
			restricted
			return Company using "%d" + DerivedDelimiter + Customer using "%d"

		DerivedCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return ReceivableCompanyRel.Currency

		DerivedCountryCode is a DerivedField
			type is Alpha size 3
			restricted
			return ReceivableCompanyRel.PostalAddress.Country

		DerivedPaymentMethodCode is a DerivedField
			type is Alpha size up to 40
			restricted
			if(DerivedCountryCode="MX")
				return ReceivablePaymentHeader.Reference

		DerivedTotalRepAmount is a DerivedField
			type is Decimal size 31.2
			restricted
			if(CurrencyRelationshipRel exists)
				return TransactionAmount * CurrencyRelationshipRel.Rate
			else
				return TransactionAmount * 1

		DerivedFEGReportCurOne is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.FinanceEnterpriseGroup.ReportCurrencyOne

		DerivedBODCountry is a DerivedField
			type is Alpha size 3
			restricted
			return Company.AccountingEntity.AddressCode.PostalAddress.Country

		DerivedARStateProvince is a DerivedField
			type is Alpha 3
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry="AR")
				return DerivedCustomerStateProvince
			else
				return ""

		DerivedCurrencyID is a DerivedField
			type is AlphaUpper size 5
			restricted
			if(DerivedCountryCode="MX")
				return "MXN"

		DerivedRecAmount is a DerivedField
			type is Alpha size 1
			restricted
			if(DerivedCountryCode="MX")
				return "0"

		DerivedRecBaseAmount is a DerivedField
			type is Alpha size 1
			restricted
			if(DerivedCountryCode="MX")
				return "0"

		DerivedRecStyleCategory is a DerivedField
			type is Alpha size 1
			restricted
			if(ReceivableApplicationRel.DerivedFlag)
				return "A"
			else
				return "P"

		DerivedRecStyle is a DerivedField
			type is Alpha size 10
			restricted
			return "Receipt"

		DerivedStatusListID is a DerivedField
			type is Alpha 20
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return "ReceivableStatus"
			else
				return "Generic Status"

		DerivedSchemeNameTaxIdentification is a DerivedField
			type is Alpha 30
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return "TaxIdentificationNumber"
			else
				return ""

		DerivedSchemeNameCountryIdentification is a DerivedField
			type is Alpha 30
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return "CountryIdentificationNumber"
			else
				return ""

		DerivedLanguageID is a DerivedField
			type is Alpha 5
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return "en-GB"
			else
				return ""

		DerivedCustomerAttentionOfName is a DerivedField
			type is AlphaUpper size 20
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.Contact
			else
				return ""

		DerivedCustomerSupplierPartyTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.TaxID
			else
				return ""

		DerivedAEAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Company.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine1
			else
				return ""

		DerivedAEAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Company.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine2
			else
				return ""

		DerivedAEAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Company.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine3
			else
				return ""

		DerivedAEAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Company.AccountingEntity.AddressCode.PostalAddress.DeliveryAddress.AddressLine4
			else
				return ""

		DerivedAEMunicipality is a DerivedField
			type is Alpha size 58
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Company.AccountingEntity.AddressCode.PostalAddress.Municipality
			else
				return ""

		DerivedCustomerStateProvinceValue is a DerivedField
			type is Alpha 3
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.StateProvince
			else
				return ""

		DerivedAECountry is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Company.AccountingEntity.AddressCode.PostalAddress.Country
			else
				return ""

		DerivedAEPostalCode is a DerivedField
			type is Alpha 12
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Company.AccountingEntity.AddressCode.PostalAddress.PostalCode
			else
				return ""

		DerivedCustomerPayFrompartyName is a DerivedField
			type is Alpha size 120
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.Name
			else
				return ""

		DerivedCustomerAddressLine1 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.DeliveryAddress.AddressLine1
			else
				return ""

		DerivedCustomerAddressLine2 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.DeliveryAddress.AddressLine2
			else
				return ""

		DerivedCustomerAddressLine3 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.DeliveryAddress.AddressLine3
			else
				return ""

		DerivedCustomerAddressLine4 is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.DeliveryAddress.AddressLine4
			else
				return ""

		DerivedCustomerPayFrompartyMunicipality	is a DerivedField
			type is Alpha 58
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.Municipality
			else
				return ""

		DerivedCustomerPayFrompartyCountry is a DerivedField
			type is AlphaUpper size 5
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.Country
			else
				return ""

		DerivedCustomerPayFrompartyPostalCode is a DerivedField
			type is Alpha 12
			restricted
			if(DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry = "MX")
				return Customer.PostalAddress.PostalCode
			else
				return ""

		DerivedRateNumeric is a DerivedField
			type is Percent size 7.5
			restricted
			if(DerivedBODCountry = "MX" and OriginalCurrency != "MXN" and CurrExchangeRateRel exists)
				return CurrExchangeRateRel.Rate
			else
				return ""

		ReceivableApplicationLineXML is a DerivedField
			type is XMLDocument
			restricted
			if (ReceivableApplicationRel exists)
				initialize LocalBODLineNumber
				for each ReceivableApplicationRel
					if(InvoiceForeignEconomicCodeRel.System = "BL" and DerivedIntegrationApplication = "Local.ly" and DerivedBODCountry="MX" )
						invoke TriggerReceivableTrackerMxLPL ReceivableApplicationRel
					LocalBODLineNumber +=1
					each.LocalLineNumber = LocalBODLineNumber
					ReceivableApplicationLineXML += template.IONSyncReceivableTrackerLine_ST document for each
				return ReceivableApplicationLineXML
			else
				return ""

		ReceivableApplicationAdjLineXML is a DerivedField
			type is XMLDocument
			restricted
			if (ReceivableApplicationRel exists)
				initialize LocalBODLineNumber
				for each ReceivableApplicationRel
					LocalBODLineNumber +=1
					each.LocalLineNumber = LocalBODLineNumber
					ReceivableApplicationAdjLineXML += template.IONSyncReceivableTrackerAdjLine_ST document for each
				return ReceivableApplicationAdjLineXML
			else
				return ""

		SyncReceivableTrackerAdjXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(ReceivableApplicationRel.DerivedFlag)
				SyncReceivableTrackerAdjXMLBOD = template.IONSyncReceivableTrackerAdjHeader_ST document for this instance
				return SyncReceivableTrackerAdjXMLBOD

		SyncReceivableTrackerXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			SyncReceivableTrackerXMLBOD = template.IONSyncReceivableTrackerHeader_ST document for this instance
			return SyncReceivableTrackerXMLBOD

	 	PaymentAmountDisplay		is a LabelField 
	 		"<OriginalCurrency>_<TransactionAmount>"
	 	BatchDisplay				is a LabelField 
	 		"Batch_-<ReceivablePaymentHeader.ReceivablePaymentHeader>"

		UnappliedPaymentAmountDisplay	is a LabelField	
	 		"<OriginalCurrency>_<DisplaySignedCashApplicationPaymentOpen>"

		IDMDescriptionMsg is a MessageField
			restricted
			"Payment_Receipt"
		
		IDMPrintDescriptionMsg is a MessageField
			restricted
			"Print_Payment_ReceiptFor_Company_<Company>With_Payment_#\<PaymentNumber>"
		
		DerivedFileName is a DerivedField
			type is Alpha 100
			restricted
			return "Payment Receipt " + Company + " - " + Customer + " - " + PaymentNumber + " - " + DepositDate + Company.ReceivableInvoiceTemplate.DerivedOutputFormat
		
		DerivedPaymentReceiptIDMEmailSubject is a MessageField
			restricted
			"Company_<Company.Name>PaymentReceivedFor_Customer_<Customer.Name>With_Payment_#\<PaymentNumber>"

		DerivedEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			if (Company.PaymentReceiptIDMEmailSubject entered)
				LocalPaymentReceiptIDMEmailSubject = Company.PaymentReceiptIDMEmailSubject
			return LocalPaymentReceiptIDMEmailSubject text

		EmailNotificationMsg is a MessageField
			restricted
			"Company<Company>PaymentReceipt<PaymentNumber>WasSentToCustomer_<Customer>"

		DerivedPaymentReceiptFromAndReplyToEmail is a DerivedField
			type is like EmailAddress
			holds pii
			if (Prepayment.Prepayment)
				if (CompanyCustomerRel.PrepaymentReceiptFromAndReplyToEmail entered)
					return CompanyCustomerRel.PrepaymentReceiptFromAndReplyToEmail
			else 
				if (Prepayment.NotAPrepay)
					if (CompanyCustomerRel.PaymentReceiptFromAndReplyToEmail entered)
						return CompanyCustomerRel.PaymentReceiptFromAndReplyToEmail	
			return config.DefaultFromEmailAddress

		DerivedToEmailAddress is a DerivedField 
			type is like MultipleEmailAddress
			holds pii
			restricted
			initialize LocalRecipientEmailAddress
			if ((Prepayment.Prepayment
			and  CompanyCustomerRel.PrepaymentReceiptEmailContactsOnly)
			or  (Prepayment.NotAPrepay
			and  CompanyCustomerRel.PaymentReceiptEmailContactsOnly))
				for each CompanyCustomerRel.CompanyCustomerContactRel
					if (((Prepayment.Prepayment
					and	  each.EmailPrepaymentReceipt)
					or   (Prepayment.NotAPrepay
					and	  each.EmailPaymentReceipt))
					and   each.EmailAddress entered)
						if (LocalRecipientEmailAddress entered)
							LocalRecipientEmailAddress += ", "
						LocalRecipientEmailAddress += each.EmailAddress
			else
				LocalRecipientEmailAddress  = CompanyCustomerRel.EmailAddress
			return LocalRecipientEmailAddress

		DerivedCcEmailAddress is a DerivedField 
			type is like MultipleEmailAddress
			holds pii
			restricted
			initialize LocalCcEmailAddress
			if (not DefaultFromEmailAddress)
				if (Prepayment.Prepayment)
					LocalCcEmailAddress += CompanyCustomerRel.PrepaymentReceiptFromAndReplyToEmail
				if (Prepayment.NotAPrepay)
					LocalCcEmailAddress += CompanyCustomerRel.PaymentReceiptFromAndReplyToEmail
			if ((Prepayment.Prepayment
			and  not CompanyCustomerRel.PrepaymentReceiptEmailContactsOnly)
			or  (Prepayment.NotAPrepay
			and  not CompanyCustomerRel.PaymentReceiptEmailContactsOnly))
				for each CompanyCustomerRel.CompanyCustomerContactRel
					if (((Prepayment.Prepayment
					and	  each.EmailPrepaymentReceipt)
					or   (Prepayment.NotAPrepay
					and	  each.EmailPaymentReceipt))
					and   each.EmailAddress entered)
						if (LocalCcEmailAddress entered)
							LocalCcEmailAddress += ", "
						LocalCcEmailAddress += each.EmailAddress
			return LocalCcEmailAddress

		DerivedIDMDocumentLink is a DerivedField
			type is Alpha 2083
			restricted
			if (IDMUniqueID entered)
				IDMItem.DocumentType	= "FSM_PaymentReceipt"
				IDMItem.IDMUniqueId		= IDMUniqueID
				return IDMItem.GetLink
			return blank

		DerivedPaymentImport2IDMDocumentLink is a DerivedField
			type is Alpha 2083
			restricted
			if (InterfacePayment2IDMUniqueId entered)
				IDMItem.DocumentType	= "FSM_ReceivablePayment"
				IDMItem.IDMUniqueId		= InterfacePayment2IDMUniqueId
				return IDMItem.GetLink
			return blank
		
		DerivedCustomerBillToNameForPrinting			is a DerivedField
			type is Alpha size 120
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.Name
			else
				return Customer.Name

		DerivedCustomerBillToAddressLine1ForPrinting	is a DerivedField
			type is Alpha size 40
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.DeliveryAddress.AddressLine1
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerBillToAddressLine2ForPrinting	is a DerivedField
			type is Alpha size 40
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.DeliveryAddress.AddressLine2
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerBillToAddressLine3ForPrinting	is a DerivedField
			type is Alpha size 40
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.DeliveryAddress.AddressLine3
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerBillToAddressLine4ForPrinting	is a DerivedField
			type is Alpha size 40
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.DeliveryAddress.AddressLine4
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerBillToMunicipalityForPrinting	is a DerivedField
			type is Alpha size 58
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.Municipality
			else
				return Customer.PostalAddress.Municipality

		DerivedCustomerBillToStateProvinceForPrinting is a DerivedField
			type is AlphaUpper size 40
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.StateProvince
			else
				return Customer.PostalAddress.StateProvince

		DerivedCustomerBillToPostalCodeForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.PostalCode
			else
				return Customer.PostalAddress.PostalCode		
		
		DerivedCustomerBillToCountryForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(Customer.CustomerBillToWithDefaultBillToRel exists)
				return Customer.CustomerBillToWithDefaultBillToRel.PostalAddress.Country
			else
				return Customer.PostalAddress.Country

	 	DerivedLocalRoundTo is a DerivedField			
			type is Decimal 5.4
			restricted
			if (LocalNumberOfDecimals = 2)
				return .01
			else
			if (LocalNumberOfDecimals = 0)
				return 1
			else
			if (LocalNumberOfDecimals = 3)
				return .001
			else
			if (LocalNumberOfDecimals = 4)
				return .0001

		DerivedAccruedTaxAmount    is a DerivedField		
			type is like InternationalAmount
			return ReceivablePrepaymentRel.AccruedTaxAmount

		AmountLessAccruedTaxAmount  is a DerivedField		
			type is like InternationalAmount
			return (TransactionAmount - DerivedAccruedTaxAmount)

		DerivedHasReverseHeader is a DerivedField  
			type is Alpha 3
			if (HasReverseHeader)
				return "Yes"
		
		DerivedRoundTo							is a DerivedField
			type is Decimal 5.4
			restricted
			if (CurrencyDecimalsNumber = 2)
				return .01
			else
			if (CurrencyDecimalsNumber = 0)
				return 1
			else
			if (CurrencyDecimalsNumber = 3)
				return .001
			else
			if (CurrencyDecimalsNumber = 4)
				return .0001
		
	Conditions
		IsPaymentAmountNotZero
			when (((BaseAmount + BaseCreditAppliedAmount) != (BaseAppliedAmount + BaseAdjustAmount))
			and  ((TransactionAmount + CreditAppliedAmount) != (AppliedAmount + AdjustAmountTransactionCurrency)))

		HasReceivableApplicationWithinPostingRangeRel
			restricted
			when (ReceivableApplicationWithinPostingRangeRel exists)

		IsIntercompanyBilling
			restricted
			when (SettlementReceivablePaymentRemittanceRel exists)

		IsClosedPayments
			restricted
			when (not TypeOfPayment.NonArPayment
			and Status.Closed)

		IsMemberOfFilterGeneralLedgerCompanyGroup
			restricted
			when (FilterGeneralLedgerCompanyGroup not entered
			or   (FilterGeneralLedgerCompanyGroup entered
			and   GeneralLedgerCompanyGroupMemberRel exists))

		IsUnassigned
			restricted
			classic name is APMSET3
			when (TypeOfPayment.CustomerPayment
			and   (Customer not entered
				or	Customer = "000000000"))

		IsOpenCustomerPayment
			restricted
			classic name is APMSET4
			when (TypeOfPayment.CustomerPayment
			and   Status.Open)

		IsNonAR
			restricted
			classic name is APMSET5
			when (TypeOfPayment.NonArPayment)

		IsBOEOrARPayment
			restricted
			classic name is APMSET6
			when (not TypeOfPayment.NonArPayment
			and   Status.Open)

		IsOpenOrNotHistorical
			restricted
			classic name is APMSET8
			when (Status >  1
			and   Status <  9
			and   (TypeOfPayment.CustomerPayment
				or	TypeOfPayment.BillOfExchangePayment))

		IsUnreleasedOrOpen
			restricted
			classic name is APMSET9
			when ((TypeOfPayment.CustomerPayment
				or	TypeOfPayment.BillOfExchangePayment)
			and   (Status.Unreleased
				or	Status.Open))

		DetailRNADistributions
			restricted
			when (Company.DetailedRNADistributions
			and   TypeOfPayment.CustomerPayment)

		HasAdjustments
			restricted
			classic name is ARADJUST-EXIST
			when (first ReceivableApplicationAdjustmentRel exists)

		ProjectEntered	
			restricted
			when (Project entered)

		AppliedAmountEntered	
			restricted
			when (AppliedAmount entered)

		CreditAppliedAmountEntered	
			restricted
			when (CreditAppliedAmount entered)

		AppliedAmountOrCreditAppliedAmountEnteredOrHasAdjustments	
			restricted
			when (AppliedAmountEntered
			or CreditAppliedAmountEntered
			or HasAdjustments)

		AppliedAmountAndNoCreditAppliedAmountEnteredAndNoHasAdjustments	
			restricted
			when (AppliedAmountEntered
			and !CreditAppliedAmountEntered
			and !HasAdjustments)

		AppliedAmountAndCreditAppliedAmountEnteredAndNoHasAdjustments	
			restricted
			when (AppliedAmountEntered
			and CreditAppliedAmountEntered
			and !HasAdjustments)

		AppliedAmountAndCreditAppliedAmountEnteredAndHasAdjustments	
			restricted
			when (AppliedAmountEntered
			and CreditAppliedAmountEntered
			and HasAdjustments)

		AppliedAmountAndNoCreditAppliedAmountEnteredAndHasAdjustments	
			restricted
			when (AppliedAmountEntered
			and HasAdjustments
			and !CreditAppliedAmountEntered)

		NoAppliedAmountAndCreditAppliedAmountEnteredAndNoHasAdjustments	
			restricted
			when (CreditAppliedAmountEntered
			and !AppliedAmountEntered
			and !HasAdjustments)

		NoAppliedAmountAndCreditAppliedAmountEnteredAndHasAdjustments	
			restricted
			when (CreditAppliedAmountEntered
			and HasAdjustments
			and !AppliedAmountEntered)

		NoAppliedAmountAndNoCreditAppliedAmountEnteredAndHasAdjustments	
			restricted
			when (HasAdjustments
			and !AppliedAmountEntered
			and !CreditAppliedAmountEntered)


		AvailableAdjustmentsForRTMRelExists
			restricted
			when (AvailableAdjustmentsForRTMRel exists)

		CompanyCustomerMaximumOverageAmountEntered	
			restricted
			when (CompanyCustomerRel.MaximumOverageAmount entered)

		CompanyCustomerMaximumOveragePercentEntered	
			restricted
			when (CompanyCustomerRel.MaximumOveragePercent entered)

		CompanyCustomerMaximumOverageEnteredAndProjects	
			restricted
			when ((CompanyCustomerMaximumOveragePercentEntered
			or CompanyCustomerMaximumOverageAmountEntered)
			and FinanceDimension2OrProjectContractOrProjectEntered)

		PendingAppliedNonCreditDiscountAmountNotEqualsZero	
			restricted
			when (PendingAppliedNonCreditDiscountAmount >0)

		PendingAppliedCreditMemoDiscountAmountNotEqualsZero	
			restricted
			when (PendingAppliedCreditMemoDiscountAmount >0)

		PendingAppliedTransactionAdjustmentAmountNotEqualsZero	
			restricted
			when (PendingAppliedNonCreditDiscountAmountNotEqualsZero
			or PendingAppliedCreditMemoDiscountAmountNotEqualsZero)

		PendingApplicationsWithAdjustmentsRelExists	
			restricted
			when (PendingApplicationsWithAdjustmentsRel exists)

		PendingDifferenceDisplayCurrencyEqualsZero	
			restricted
			when (PendingDifferenceDisplayCurrency =0)

		NotWithinOverageThresholdAndNotEqualsZero
			restricted
			when (!PendingDifferenceDisplayCurrencyEqualsZero
			and   !WithinCompanyCustomerMaximumOverageThreshold)

		PendingEqualsZeroAndNotWithinOverageThreshold
			restricted
			when (PendingDifferenceDisplayCurrencyEqualsZero
			and  !WithinCompanyCustomerMaximumOverageThreshold)

		PaymentWithRemainingOpenAmount	
			restricted
			when (PendingDifferenceDisplayCurrency >0)


		RemainingOpenAmountLessThanMaximumOverage	
			restricted
			when ((CompanyCustomerMaximumOverageAmountEntered
			and CompanyCustomerMaximumOverageAmount >= PendingDifferenceDisplayCurrency)	
			or (CompanyCustomerMaximumOveragePercentEntered
			and CompanyCustomerMaximumOveragePercentageThreshold >= PendingDifferenceDisplayCurrency))	

		WithinCompanyCustomerMaximumOverageThreshold	
			restricted
			when (RemainingOpenAmountLessThanMaximumOverage
			and PaymentWithRemainingOpenAmount)





		HasApplications
			restricted
			classic name is ARAPPL-EXISTS
			when (first ReceivableApplicationRel exists)

		PaymentHasApplications
			when (LastApplicationSequence entered)

		HasUnpostedApplications
			when (UnpostedReceivableApplicationRel exists)

		HasARtoAPSelect
			restricted
			classic name is ARAPSEL-EXIST
			when (ARToAPApplicationSelectRel exists)

		IsTypeCustomerPayment
			restricted
			classic name is ARMEMODIST
			when (TypeOfPayment.CustomerPayment)

		HasRemittances
			restricted
			classic name is ARREMIT-EXISTS
			when (first ReceivablePaymentRemittanceRel exists)

		HasSelectAdjustments
			restricted
			classic name is ARSADJ-EXISTS
			when (first ReceivableApplicationAdjustmentSelectRel exists)

		HasSelectApplications
			classic name is ARSAPL-EXISTS
			when (first ReceivableApplicationSelectRel exists)

		HasComments
			classic name is COMMENTS-EXIST
			when (first CompanyCustomerCommentRel exists)

		HasAttachments
			when (first ReceivablePaymentAttachmentRel exists)

		IsContrctExists
			when (ProjectContract entered)

		CustomerIsEntered
			restricted
			classic name is CUSTDESC
			when (Customer entered
			and   Customer != "000000000")

		CustomerNumberEntered
			restricted
			classic name is CUSTOMER
			when (Customer entered
			and   Customer != "000000000")

		ReferenceNumberEntered
			restricted
			when (ReferenceNumber entered)

		FinanceDimension2OrProjectContractOrProjectEntered
			restricted
			when (FinanceDimension2 entered
			or ProjectContract entered
			or Project entered)





		IsNonARPayment
			restricted
			classic name is NON-AR-DISTRIB
			when (TypeOfPayment.NonArPayment)

		IsNonARNotFundAccountingEnabled
			restricted
			when (IsNonARPayment
			and  !Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		AllowSelectDistributionSet 
			restricted
			when (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting
			and   Company.SelectFundDistributionSet)

		IsNotOpen
			restricted
			when (Status >  2)

		IsOpenOrUnreleased
			restricted
			classic name is OPEN
			when (Status <= 2)

		HasReverseDetail
			restricted
			classic name is PMTREV-EXISTS
			when (first ReceivablePaymentApplyReverseDetailRel exists)

		IsNationalCustomerNoAndNotAcrossCompanies	
			restricted	
			when (CompanyCustomerRel.NationalAccountIndicator.No	
			and	!ReceivableCompanyRel.ApplyCashAcrossReceivableCompanies)	

		IsNationalAccountCompanyNationalAccountCustomer2	
			restricted	
			when (NationalAccountInvoiceRel exists	
			or	NationalAccountCustomer2Rel exists)	

		IsNotNationalAccountCompanyNationalAccountCustomerAndNotAcrossCompanies	
			restricted	
			when ((NationalAccountInvoiceRel not exists	
			and	NationalAccountCustomer2Rel not exists)	
			and !ReceivableCompanyRel.ApplyCashAcrossReceivableCompanies)	

		HasReverseHeader
			restricted
			when (ReceivablePaymentApplyReverseHeaderRel exists)

		HasUnreleasedAmendedCashDetails
			restricted
			when (!Status.Unreleased
			and   Company.DetailedCashDistributions
			and   UnreleasedPaymentCashDetailsRel exists)

		AllowAddCashDetails
			restricted
			when ((Status.ReleasedUnassigned
			or     Status.Open
			or	   !DetailRNADistributions)
			and    Company.DetailedCashDistributions
			and    CashDetailState.None)

		AllowReleaseCashDetails
			restricted
			when (CashDetailState.Amended
			or   (CashDetailState.Unreleased
			and  !Status.Unreleased))

		HasCashDetailsForReleasedPayment  
			restricted
			when (Company.DetailedCashDistributions
			and  !Status.Unreleased
			and  CashDetailState entered)

		PrepaymentExists
			restricted
			classic name is PP-EXIST
			when (ReceivablePrepaymentRel exists)

		PaymentHeaderProcessLevelExist
			restricted
			classic name is PROCESS-LEV-EQ
			when (ReceivableProcessLevel = ReceivablePaymentHeader.ReceivableProcessLevel)

		HasRebates
			restricted
			when (ContractRebateGroup.ContractGroup entered)

		AllowRebateEntry
			restricted
			when (ReceivableCompanyRel.AllowRebateEntry)

		HasReceivableInvoiceReverseDetail
			restricted
			classic name is TRNREV-EXISTS
			when (first ReceivableInvoiceApplyReverseDetailRel exists)

		HasPendingTransactionReversal
			restricted
			when (first ReceivableInvoiceApplyReverseDetailRel exists)


		PaymentExists
			restricted
			when (ReceivablePayment exists)

		IsCompanyCurrency
			restricted
			when (ReceivablePaymentHeader.Currency = blank
			or	ReceivablePaymentHeader.Currency = Company.Currency)

		IsNotCompanyCurrency
			restricted
			when (ReceivablePayment.OriginalCurrency != Company.Currency)

		UnreleasedCustomerPayment
			restricted
			when (TypeOfPayment.CustomerPayment
			and   Status.Unreleased)

		ReleasedCustomerPayment
			restricted
			when (TypeOfPayment.CustomerPayment
			and   !Status.Unreleased)

		OpenOrUnassigned
			restricted
			when (Status.ReleasedUnassigned
			or	Status.Open)

		OpenOrUnreleasedCustomerPayment
			restricted
			when (TypeOfPayment.CustomerPayment
			and  (Status.Unreleased
			or	Status.Open))

		ShowApplicationInformation
			restricted
			when (TypeOfPayment.CustomerPayment
			and (!Status.Unreleased
			or    Company.AllowUnreleasedPaymentApplications))

		UnreleasedOrUnassigned
			restricted
			when (Status.Unreleased
			or	Status.ReleasedUnassigned)

		IsNotReleasedUnAssigned
			restricted
			when ((TypeOfPayment.CustomerPayment
			and   Customer entered)
			or   (TypeOfPayment.NonArPayment
			and   Customer not entered))

		IsReleasedPaymentHeader
			restricted
			when (ReceivablePaymentHeader.IsReleased)

		IsNotReleasedUnAssignedOrIsReleasedPaymentHeader
			restricted
			when (IsNotReleasedUnAssigned
			or	IsReleasedPaymentHeader)

		NewOrUnreleasedOrUnassigned
			restricted
			when (!PaymentExists
			or	UnreleasedOrUnassigned)

		PartiallyApplied
			when (PaymentOpenCompanyCurrency != 0
			and ReceivableApplicationRel exists)

		HasRemits
			restricted
			when (ReceivablePaymentRemittance set exists)

		HasPrepayment

			when (ReceivablePrepaymentRel exists)

		DistributionsOutOfBalance
			when (TransactionAmount != SumOfDistributions)

		CustomerEntered
			restricted
			when (Customer entered)

		HasPendingApplications
			restricted
			when (first ReceivableApplicationSelectRel exists)

		HasPendingAdjustments
			restricted
			when (first ReceivableApplicationAdjustmentSelectRel exists)

		HasRTMs
			restricted
			when (RTMPaymentRel exists)

		HasUnreleasedRTMs
			restricted
			when (RTMPaymentRel exists
			and RTMPaymentRel.Status.UnreleasedRtm)

		HasAPTransfers
			restricted
			when (ARToAPApplicationSelectRel exists)

		ApplicationAmountEntered
			restricted
			when (ReceivablePayment.BaseAppliedAmount entered
			or	ReceivablePayment.BaseCreditAppliedAmount entered
			or	ReceivablePayment.BaseAdjustAmount entered)

		ShowRemitButton
			restricted
			when ((ReceivablePaymentHeader.Status.OpenBatchUnreleased
			or	 HasRemits)
			and   !HasPrepayment
			and !TypeOfPayment.NonArPayment)

		ShowPrepayButton
			restricted
			when ((ReceivablePaymentHeader.Status.OpenBatchUnreleased
			or	HasPrepayment)
			and   !TypeOfPayment.NonArPayment)  

		ShowCashOffsetButton
			restricted
			when (Status.Unreleased
			and  !HasPrepayment)

		ShowAsApplied
			restricted
			when (ReceivablePayment entered
			and  (Status >= 7
			or   (Status.Unreleased
			and ((IsZeroPayment
			and   HasApplications)
			or   (not IsZeroPayment
			and   DisplaySignedCashApplicationPaymentOpen = 0)))))

		ShowOnCashApplicationSelectListWithDetail
			restricted
			when (DisplayForCashApplicationSelect  
			and   CanApplyCashForApplicationSelect)  

		ShowOnCashApplicationListWithDetail
			restricted
			when (DisplayForCashApplication
			and   CanApplyCash)

		DisplayForCashApplication
			restricted
			when (not TypeOfPayment.NonArPayment
			and  (Status.Open
			or   (Status.Unreleased
			and   Company.AllowUnreleasedPaymentApplications))
			and	!IsUnassigned
			and	WithinApplicationCompanyRange
			and	WithinCustomerRange
			and	WithinPaymentNumberRange
			and	WithinTransactionAmountRange
			and	WithinPostingAndDepositDateRange
			and	WithinBatchRange
			and	WithinCurrencyRange
			and	IsValidForActorContext
			and	!IsZeroPayment
			and	!IsIntercompanyBilling
			and CanApplyCash

			and ManualCashApplicationOriginSupported)

		DisplayForCashApplicationSelect 
			restricted
			when (not TypeOfPayment.NonArPayment
			and  (Status.Open
			or   (Status.Unreleased
			and   Company.AllowUnreleasedPaymentApplications))
			and	!IsUnassigned
			and	WithinApplicationCompanyRange
			and	WithinCustomerRange
			and	WithinPaymentNumberRange
			and	WithinTransactionAmountRange
			and	WithinPostingAndDepositDateRange
			and	WithinBatchRange
			and	WithinCurrencyRange
			and	IsValidForActorContext
			and	!IsIntercompanyBilling
			and ManualCashApplicationOriginSupported)

		CanApplyCash
			restricted
			when (TypeOfPayment.CustomerPayment
			and   PaymentOpen > 0
			and   Customer entered
			and   Status < 7

			and	CancelDate not entered
			and   !CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward

			and   !HasAPTransfers
			and   !HasRTMs)

		CanApplyCashForApplicationSelect  
			restricted
			when (TypeOfPayment.CustomerPayment
			and   Customer entered
			and   Status < 7
			and	  CancelDate not entered
			and   !CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward
			and   !HasAPTransfers
			and   !HasRTMs)

		CanApplyCashSelectList
			restricted
			when (CancelDate not entered
			and   !CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward
			and   !HasAPTransfers
			and   !HasRTMs)

		DisplayOnCashApplicationList
			restricted
			when (TypeOfPayment.CustomerPayment
			and   Customer entered)

		AllowPaymentWriteOff	
			restricted
			when (!TypeOfPayment.NonArPayment
			and   !IsPrepaymentTaxWithHolding)

		NonARTransfer
			restricted
			when (TransferDate entered
			and   TypeOfPayment.NonArPayment
			and   Customer not entered
			and   NonARReceivableGLDistributionRel exists)


		AllowPendingSelections	
			restricted
			when (PendingDifference entered)

		HasPendingTransactions
			restricted
			when (HasPendingApplications
			or	HasPendingAdjustments)

		UnreleasedWithPendingTransactions
			restricted
			when (Status.Unreleased
			and   HasPendingTransactions)

		OpenWithPendingTransactions
			restricted
			when (Status.Open
			and   HasPendingTransactions)

		HasPendingAppliedNonCreditMemoRel	
			restricted
			when (PendingAppliedNonCreditMemoRel exists)

		HasPendingAppliedCreditMemoRel	
			restricted
			when (PendingAppliedCreditMemoRel exists)

		HasPendingAdjustMemoRel	
			restricted
			when (PendingAdjustMemoRel exist)

		HasPendingAdjustNonMemoRel	
			restricted
			when (PendingAdjustNonMemoRel exist)

		HasSelectedDebitsOrCreditsAndNoAdjustments	
			restricted
			when ((HasPendingAppliedNonCreditMemoRel
			or HasPendingAppliedCreditMemoRel)
			and !HasPendingAdjustMemoRel
			and !HasPendingAdjustNonMemoRel)

		HasSelectedDebitsOrCreditsAndAdjustments	
			restricted
			when ((HasPendingAppliedNonCreditMemoRel
			or HasPendingAppliedCreditMemoRel)
			and HasPendingAdjustMemoRel
			and HasPendingAdjustNonMemoRel)

		HasSelectedDebitsOrCreditsAndChargeback	
			restricted
			when ((HasPendingAppliedNonCreditMemoRel
			or HasPendingAppliedCreditMemoRel)
			and HasPendingAdjustMemoRel
			and !HasPendingAdjustNonMemoRel)

		HasSelectedDebitsOrCreditsAndWriteoff	
			restricted
			when ((HasPendingAppliedNonCreditMemoRel
			or HasPendingAppliedCreditMemoRel)
			and !HasPendingAdjustMemoRel
			and HasPendingAdjustNonMemoRel)

		HasChargebackMemoOnly	
			restricted
			when (!HasPendingAppliedNonCreditMemoRel
			and !HasPendingAppliedCreditMemoRel
			and HasPendingAdjustMemoRel
			and !HasPendingAdjustNonMemoRel)

		HasWriteOffOnly	
			restricted
			when (!HasPendingAppliedNonCreditMemoRel
			and !HasPendingAppliedCreditMemoRel
			and !HasPendingAdjustMemoRel
			and HasPendingAdjustNonMemoRel)

		HasChargebackMemoAndWriteOffOnly	
			when (!HasPendingAppliedNonCreditMemoRel
			and !HasPendingAppliedCreditMemoRel
			and HasPendingAdjustMemoRel
			and HasPendingAdjustNonMemoRel)

		AllowClearSelections
			when (HasPendingTransactions
			and   BackgroundProcessing not entered)

		AllowUpdateGLDates
			when (HasPendingTransactions
			and   BackgroundProcessing not entered)

		UnappliedCash
			restricted
			when (TypeOfPayment.CustomerPayment
			and   Status.Open)

		UnassignedCash
			restricted
			when (TypeOfPayment.CustomerPayment
			and   Customer not entered
			and   CancelDate not entered
			and  !NonARTransfer
			and   Status.ReleasedUnassigned)





		WithinApplicationCompanyRange
			restricted
			when (ApplicationCompanyRange not entered
			or	Company within ApplicationCompanyRange)

		WithinCompanyRange
			restricted
			when (CompanyRange not entered
			or	Company within CompanyRange)

		WithinCustomerRange
			restricted
			when (CustomerRange not entered
			or	Customer within CustomerRange)

		WithinPaymentNumberRange
			restricted
			when (PaymentNumberRange not entered
			or	PaymentNumber within PaymentNumberRange)

		WithinBatchRange
			restricted
			when (BatchRange not entered
			or	ReceivablePaymentHeader within BatchRange)

		WithinCurrencyRange
			restricted
			when (CurrencyRange not entered
			or	OriginalCurrency within CurrencyRange)

		WithinDepositDateRange
			restricted
			when (DepositDateRange not entered
			or	DepositDate within DepositDateRange)

		WithinPostingDateRange
			restricted
			when (PostingDateRange not entered
			or	GeneralLedgerDate within PostingDateRange)













		WithinPostingAndDepositDateRange
			restricted
			when ((DepositDateRange not entered
			or	 DepositDate within DepositDateRange)
			and   (PostingDateRange not entered
			or	 GeneralLedgerDate within PostingDateRange))

		WithinTransactionAmountRange
			restricted
			when (TransactionAmountRange not entered
			or   TransactionAmount within TransactionAmountRange)

		WithinBaseAmountRange
			restricted
			when (BaseAmountRange not entered
			or   BaseAmount within BaseAmountRange)

		WithinBaseAndTransactionAmountRange
			restricted
			when ((TransactionAmountRange not entered
			or	 TransactionAmount within TransactionAmountRange)
			and   (BaseAmountRange not entered
			or	 BaseAmount within BaseAmountRange))

		WithinProcessLevelRange
			restricted
			when (ReceivableProcessLevelRange not entered
			or	ReceivableProcessLevel within ReceivableProcessLevelRange)







		Cancelled
			restricted
			when (CancelDate entered)

		CancelledOrTransferred
			restricted
			when (CancelDate entered
			or   (TransferDate entered
			and   TransferredToCustomer != Customer))

		Transferred
			restricted
			when (TransferAmountTransactionCurrency	 entered)  

		IsHistorical
			restricted
			when (Status.Historical
			and !Company.AllowHistoricalApplicationReversal)

		HasPendingAPTransfer
			restricted
			when (!Company.VendorCreateAndInterfaceToAP
			and ARToAPApplicationSelectRel exists
			and ARToAPApplicationSelectRel.Status.Unreleased)

		IsEligibleForNonARTransfer						
			restricted
			when (PaymentOpen	= TransactionAmount)

		AllowPaymentTransfer
			restricted
			when (TypeOfPayment.CustomerPayment
			and   Status.Open

			and   TransactionAmount entered
			and   !Cancelled



			and   !DerivedHasPendingOrCompletedWork 
			and   !IsThirdPartyPaymentProcessingOrigin
			and   !IsPrepaymentTaxWithHolding) 

		AllowTransferToNonAR
			restricted
			when (TypeOfPayment.CustomerPayment
			and   (Status.Open					
			or	  Status.ReleasedUnassigned)		

			and   IsEligibleForNonARTransfer			
			and   TransactionAmount entered
			and   !Cancelled



			and   !DerivedHasPendingOrCompletedWork 
			and   !IsThirdPartyPaymentProcessingOrigin
			and   !IsPrepaymentTaxWithHolding)  

		AllowMultipleTransfers						
			restricted
			when (TypeOfPayment.CustomerPayment
			and   (Status.Open					
			or	  Status.ReleasedUnassigned)		
			and   TransactionAmount entered
			and   !Cancelled
			and   !DerivedHasPendingOrCompletedWork 
			and   !IsThirdPartyPaymentProcessingOrigin
			and   !IsPrepaymentTaxWithHolding)  
		
		AllowPaymentIntoCredit
			restricted
			when (TypeOfPayment.CustomerPayment
			and   Status.Open
			and   TransferDate not entered
			and   TransactionAmount entered
			and   !Cancelled



			and   !DerivedHasPendingOrCompletedWork 
			and   !IsThirdPartyPaymentProcessingOrigin
			and   !IsPrepaymentTaxWithHolding) 

		ShowRTMPaymentAction
			restricted
			when (!Status.Unreleased
			and   !Status.Historical
			and    TransactionAmount entered
			and   !Cancelled)

		AllowTransactionRangeApplication
			when (TypeOfPayment.CustomerPayment
			and   TransactionAmount entered
			and   BackgroundProcessing not entered)

		AvailableForReversal
			restricted
			when (TypeOfPayment.CustomerPayment
			and   PostedApplicationsAvailableToReverseRel exists
			and  (Status.Open
			or	  Status.FullyApplied
			or	  Status.Closed
			or	  Status.Historical) 
			and   !Transferred 
			and   !Cancelled
			and   !HasPendingTransactions
			and   !HasAPTransfers
			and   (!HasRTMs
			or	  (HasRTMs																																	
			and	  (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")))	
			and	  !ReceivablePrepaymentRel.ReferenceType.ProformaInvoice)

		AllowCreateReversal
			restricted
			when (AvailableForReversal
			and   !HasReverseHeader)

		ShowCreateAndReverseAll
			restricted
			when (AvailableForReversal
			and   !HasReverseHeader)

		ShowReverseAll
			restricted
			when (AvailableForReversal
			and   HasReverseHeader
			and  !HasReverseDetail)

		PostedApplicationsAvailableToReverse
			restricted
			when (PostedApplicationsAvailableToReverseRel exists)

		UnpostedApplicationsAvailableToReverse
			restricted
			when (UnpostedApplicationsAvailableToReverseRel exists)

		IsProjectContract
			when (ProjectContract entered)

		IsProject
			restricted
			when (Project entered
			or	ProjectContract entered)

		IsSelectedForAP
			restricted
			when (ARToAPInterfaceIsSelectedRel exists)

		IsARToAPInterfaceOkay
			restricted
			when (!IsSelectedForAP
			and   !ARToAPInterfaceIsSelectedRel.Status.Released
			and   !TypeOfPayment.NonArPayment	
			and   (Status.Open
			or	   Status.Unreleased)
			and  ((BaseAmount + BaseCreditAppliedAmount) != (BaseAppliedAmount + BaseAdjustAmount))
			and  ((TransactionAmount + CreditAppliedAmount) != (AppliedAmount + AdjustAmountTransactionCurrency)))

		MemoChargebackExists
			restricted
			when (ChargebackMemoApplicationRel exists)

		ReceivableFilterMatch
			restricted
			when ((ReceivableFilterRel.ReceivableProcessLevel not entered
			or	 ReceivableFilterRel.ReceivableProcessLevel = ReceivableProcessLevel)
			and   (ReceivableFilterRel.Currency not entered
			or	 ReceivableFilterRel.Currency = OriginalCurrency)
			and   (ReceivableFilterRel.ProjectRange not entered
			or	 Project within ReceivableFilterRel.ProjectRange)
			and   (ReceivableFilterRel.TransactionAmountRange not entered
			or	 TransactionAmount within ReceivableFilterRel.TransactionAmountRange)
			and   (ReceivableFilterRel.OpenAmountRange not entered
			or	 PaymentOpen within ReceivableFilterRel.OpenAmountRange)
			and   (ReceivableFilterRel.TransactionDateRange not entered
			or	 DepositDate within ReceivableFilterRel.TransactionDateRange)
			and   ((ReceivableFilterRel.HistoryFlag not entered
			and		(Status = 0	
			or		Status = 2))	
			or		(ReceivableFilterRel.HistoryFlag.IncludeHistory)	
			or		(ReceivableFilterRel.HistoryFlag.OnlyShowHistory
			and		Status > 6)	
			or		(ReceivableFilterRel.HistoryFlag.NoHistory
			and		(Status = 0	
			or		Status = 2))))	

		ReceivableFilterCriteria
			restricted
			when((ReceivableFilterRel exists
			and ReceivableFilterMatch)
			or ((ReceivableFilterRel not exists)
			and IsUnreleasedOrOpen))

		Testing
			restricted
			when (Company.ReceivableCompany.Name = "Testing")

		NATesting
			restricted
			when (Testing
			and   !CompanyCustomerRel.NationalAccountIndicator.No)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess
			when (actor.context.CompanySecurityGroup = blank
			or	   CompanySecurityGroupMemberRel exists)


		DisplayOnlyForLoggedInUser
			restricted

			when  ((actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	
			and	 Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup  
			and		(DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany  
			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer))  

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndNotAllowPortalApplyCashAcrossReceivableCompanies	
			and		Company = actor.agent(CustomerRepresentativeContact).ReceivableCompany
			and		Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup	
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer)

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies	
			and		Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup	
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer))	

		ApplyCashAcrossReceivableCompaniesFlagEnabledInCustomerRepresentative 
			restricted
			when ((actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and	Customer = actor.agent(CustomerRepresentativeContact).Customer)
			or  (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and   actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	
			and		(DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany  
 			or  	DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer)))  

		ApplyCashAcrossReceivableCompaniesFlagNotEnabledInCustomerRepresentative 
			restricted
			when ((!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and	 Customer = actor.agent(CustomerRepresentativeContact).Customer
			and	 Company  = actor.agent(CustomerRepresentativeContact).ReceivableCompany)
			or 	(!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and   actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent  
			and		DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany 
 			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer))  

		IsEligibleToShowInPortal 
			restricted
			when (ApplyCashAcrossReceivableCompaniesFlagEnabledInCustomerRepresentative
			or	  ApplyCashAcrossReceivableCompaniesFlagNotEnabledInCustomerRepresentative)

		NationalAccountCustomerCheck  
			when (actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent
			and		DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany
 			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer)

		CustomerPaymentandRemittanceRelExists	
			restricted
			when (TypeOfPayment.CustomerPayment
			and ReceivablePaymentRemittanceRel exists)

		IsCustomerRepresentativeApplyCashAcrossReceivableCompanies	
			restricted
			when (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies
			or NationalAccountCustomerCheck) 

		InterfaceReleaseFailure
			restricted
			when (OriginatingInterfaceRun entered
			and   InterfaceResultsRel.ReleaseBatch
			and   ReceivablePaymentHeader.Status.OpenBatchUnreleased)

		TaxEntityUsesOneSource
			restricted
			when (ReceivablePaymentHeader.TaxEntityUsesOneSource)

		ShowUponEntryInvoiceSelectionNA
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and  !CompanyCustomerRel.NationalAccountIndicator.No)

		ShowUponEntryInvoiceSelection
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and  !ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)

		ShowUponEntryInvoiceSelectionAcrossCompanies
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and   ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)

		ShowUponEntrySpeedEntryPreview
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail)

		ShowUponEntryWriteOffPreview
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and  !IsZeroPayment)

		ShowUponEntryChargebackMemo
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and  !IsZeroPayment)

		ShowUponEntryReceivableProjectTransactions
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and   OpenReceivableProjectTransactionRelExists)

		ShowUponEntryLineItemSelectionNA
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and  !CompanyCustomerRel.NationalAccountIndicator.No)

		ShowUponEntryLineItemSelection
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and  !ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)

		ShowUponEntryLineItemSelectionAcrossCompanies
			restricted
			when (DerivedShowOnCashApplicationSelectListWithDetail
			and   ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)

		ShowUponEntryPendingSelections
			restricted
			when (HasSelectApplications)

		ShowUponEntryApplications
			restricted
			when (HasApplications)

		ShowMainRemittanceList 
			restricted
			when (!Origin.ThirdPartyPaymentProcessing
			and   !ShowDetailedRemittanceListForFundApply)

		ShowRemittanceListAsText 
			restricted
			when (Origin.ThirdPartyPaymentProcessing)

		ShowDetailedRemittanceListForFundApply 
			restricted
			when (AllowSelectDistributionSet
			and  !ShowRemittanceListAsText)

		ShowMatchCashDetails
			restricted
			when (not CashDetailState.None
			and   Company.DetailedRNADistributions)

		IsZeroPayment
			when (TransactionAmount not entered)

		IsZeroPaymentAllowAdjustments
			when (IsZeroPayment
			and   ReceivableCompanyRel.AllowZeroPaymentAdjustments)

		IsZeroPaymentNotAllowAdjustments
			when (IsZeroPayment
			and	  !ReceivableCompanyRel.AllowZeroPaymentAdjustments)

		HasPendingReversal
			when (HasReverseDetail
			or	HasReceivableInvoiceReverseDetail)

		ReceivableProjectTransactionExists	
			when (ReceivableProjectTransactionRel exists)

		OpenReceivableProjectTransactionRelExists	
			when (OpenReceivableProjectTransactionRel exists)

		IsEFTOrigin
			when (Origin.ElectronicFundsTransfer)

		IsThirdPartyPaymentProcessingOrigin				
			when (Origin.ThirdPartyPaymentProcessing)

		ManualCashApplicationOriginSupported	
			when (!Origin.BankStatementInterface
			and !Origin.ElectronicFundsTransfer
			and !Origin.ThirdPartyPaymentProcessing)

		AllowDerivePaymentAmount
			restricted
			when (IsNonARPayment
			and   ReceivablePaymentHeader.Status.OpenBatchUnreleased)

		HasOneSourceTaxableDistributions
			restricted
			when (LinkedTaxGroupTaxableDistributionsRel exists)

		HasOneSourceSourceOfLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupSourceOfLinkedTaxDistributionRel exists)

		HasOneSourceLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupLinkedTaxDistributionRel exists)

		TaxEntityUsesVertex
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		CallVertexByTransaction
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByTransaction)

		AllowProcessVertexInstanceAction
			restricted
			when (IsNonARPayment
			and   CallVertexByTransaction
			and   ReceivablePaymentHeader.Status.OpenBatchUnreleased)

		AllowProcessOneSourceInstanceAction
			restricted
			when (IsNonARPayment
			and   TaxEntityUsesOneSource
			and   ReceivablePaymentHeader.Status.OpenBatchUnreleased)

		HasVertexTaxableDistributions
			restricted
			when (LinkedTaxGroupTaxableDistributionsRel exists)

		HasVertexSourceOfLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupSourceOfLinkedTaxDistributionRel exists)

		HasVertexLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupLinkedTaxDistributionRel exists)

		DisplayProcessSelectionsInProgress
			restricted
			when (BackgroundProcessing.ProcessSelections)

		DisplayProcessSelectionsInProgressOrHasApplicationsOrPendingTransactions
			restricted
			when (DisplayProcessSelectionsInProgress
			or HasApplications
			or HasPendingTransactions)

		AllowNonARCashFrontEndSplit
			restricted
			when (ReceivablePaymentHeader.FrontEndSplitsEnabled
			and NonARReceivableGLDistributionRel exists
			and IsNonARPayment
			and Status.Unreleased)

		HasNonARCashFrontEndSplitDistributions
			restricted
			when (FESNonARReceivableGLDistributionRel exists
			and IsNonARPayment
			and Status.Unreleased)

		ErrorMessageEntered
			restricted
			when (ErrorMessage entered)

		BankStatementLineRelExists	
			restricted
			when (BankStatementLineRel exists)

		IsUnreleased
			restricted
			when (IsNonAR
			and Status.Unreleased)

		PartiallyAppliedCash 
			restricted
			when (DisplaySignedAppliedAmount entered
			and Status.Open)

		IsPrepaymentTaxWithHolding			
			restricted
			when (Company.AllowPrepaymentTax
			and PrepaymentExists
			and ReceivablePrepaymentRel.ReferenceType.External
			and ReceivablePrepaymentRel.Invoice entered)

		ValidForIDMActions
			restricted
			when ((Status.Open
			or	  Status.FullyApplied
			or	  Status.Closed
			or	  Status.Historical)
			and   IsTypeCustomerPayment
			and  (Prepayment.Prepayment
			or    not Company.AllowIDMPrepaymentReceiptsOnly))

		IsValidForIDMGenerate
			restricted
			when (IsReleasedPaymentHeader
			and   Company.UseIDM
			and	  ValidForIDMActions)

		HasIDMDocument
			restricted
			when (Company.UseIDM
			and   IDMUniqueID entered)

		IsValidForIDMEmailOrPrint
			restricted
			when (Company.UseIDM
			and   IDMUniqueID entered
			and	  ValidForIDMActions)

		HasIDMDocumentTemplate
			restricted
			when (Company.PaymentReceiptIDMTemplate entered)
		
		DefaultFromEmailAddress
			restricted
			when ((Prepayment.Prepayment 
			and    CompanyCustomerRel.PrepaymentReceiptFromAndReplyToEmail 	= config.DefaultFromEmailAddress)
			or    (Prepayment.NotAPrepay 
			and    CompanyCustomerRel.PaymentReceiptFromAndReplyToEmail 	= config.DefaultFromEmailAddress))

		HasReceivablePaymentRemittanceCreditMemoOrMixedSign	
			restricted
			when (ReceivablePaymentRemittanceCreditMemoOrMixedSignRel exists)

		HasInterfacePayment2IDMUniqueID
			restricted
			when (InterfacePayment2IDMUniqueId entered)

	Field Rules

		TypeOfPayment
			default to "P"
			cannot be changed

		Customer
			if (Customer changed)


				if (Customer entered and old Customer not entered)
					invoke FastUpdate CustomerPaymentGLDistributionRel

						invoked.ReceivableCompanyDataGroup.Customer				= Customer





			if (old Customer entered)
				constraint (Customer entered)
					"CannotUnassignCustomer"

			if (!ReceivablePayment exists and Customer not entered and TypeOfPayment.CustomerPayment)	//IEFIN-109344 Added "and TypeOfPayment.CustomerPayment" to help not default in a Customer for "NonARPayment")
				default to CompanyCustomerBankAccountRel.Customer

			if (ReferenceNumber entered)
				LocalInvoice		 = ReferenceNumber
				LocalTransactionType = ReceivableInvoiceType.Invoice
				default to LocalReceivableInvoiceRel.Customer
				LocalTransactionType = ReceivableInvoiceType.DebitMemo
				default to LocalReceivableInvoiceRel.Customer
				LocalTransactionType = ReceivableInvoiceType.MixedSignLines
				default to LocalReceivableInvoiceRel.Customer

			default to first CustomerNameRel.Customer

			if (CustomerNumberEntered)
				constraint (CustomerRel exists)
					"Company_\CustomerDoesNotExistFor_\Company<Company>_\Customer<Customer>"

			if  (TypeOfPayment.NonArPayment)
				cannot be entered

		PaymentNumber
			required
			if (TypeOfPayment.CustomerPayment)
				constraint (!ReceivablePaymentNumberRel exists)
					"PaymentNumberForCustomerAlreadyInBatch"


		BankEntity
			if (BankAccountNumber entered
			and invoking action != "ReceivablePaymentImport.InterfacePayments")			
				required
					"BankEntityRequiredIfBankAccountEntered"
			if (Customer entered and old Customer entered)
				cannot be changed
					"CannotChangeIfPaymentAssignedToCustomer"
			if (BankEntity changed)
				constraint (Customer entered)
					"CustomerRequiredWhenChangingBankInformation"

		BankAccountNumber
			if (BankEntity entered
			and invoking action != "ReceivablePaymentImport.InterfacePayments")			
				required
					"BankAccountRequiredIfBankEntityEntered"

			if (Customer entered and old Customer entered)
				cannot be changed
					"CannotChangeIfPaymentAssignedToCustomer"

			if (BankAccountNumber entered
			and Customer entered
			and CompanyCustomerBankAccountRel exists)
				constraint (CompanyCustomerBankAccountRel.Customer = Customer)
					"BankAccountCustomerDoesNotMatchCustomer"

			if (!ReceivablePayment exists)
				if (BankAccountNumber entered
				and TypeOfPayment.CustomerPayment
				and !CompanyCustomerBankAccountRel exists)
					confirmation required
						"Warning:CustomerBankAccountDoesNotExist.Continue?"
			else
				if (BankAccountNumber entered
				and !CompanyCustomerBankAccountRel exists)
					confirmation required
						"Warning:CompanyCustomerBankAccountDoesNotExist.ActionWillAssignCustomer,CreateCompanyCustomerBankAccount,AndUpdateCustomerOnOtherPaymentsWithSameBankAccount.Continue?" 
					invoke Create CompanyCustomerBankAccountRel
						invoked.Customer	= Customer
					for each PaymentByBankAccountRel
						if (each.Status.Unreleased)
							invoke Update Unreleased each
								invoked.Customer	= Customer
						else
						if (each.Status.ReleasedUnassigned)
							invoke Update ReleasedUnassigned each
								invoked.Customer	= Customer

		TransactionAmount
			if  (Company.AllowZeroPayments)
				if  (TransactionAmount not entered)
					constraint (Customer entered)
						"CustomerRequiredForZeroAmountPayment"
			else
			if  (action = "CreateNonARCashPaymentUnreleased"
			or   action = "CreateCustomerPaymentUnreleased")
				required

			if  (action type.Update
			and  old TransactionAmount entered
			and  TransactionAmount not entered
			and  !Company.AllowZeroPayments)
				required









			if  (action = "RestrictedCreate"
			and  CurrencyRate entered)
				NextSentence = true
			else
			if (OriginalCurrency entered)

				CurrencyRate = ReceivablePaymentHeader.CurrencyRate
				BaseAmount	 = CurrencyRate * TransactionAmount
			constraint (TransactionAmount >= 0)
				"Payment_\AmountCannotBeLessThanZero."


		BaseAmount
			if  (action = "RestrictedCreate"
			and  BaseAmount entered)
				NextSentence = true
			else
				BaseAmount = CurrencyRate * TransactionAmount





		ReceivableProcessLevel
			default to ReceivablePaymentHeader.ReceivableProcessLevel
			force default to ReceivablePaymentHeader.ReceivableProcessLevel

		CashCode
			default to ReceivablePaymentHeader.CashCode
			force default to ReceivablePaymentHeader.CashCode

		CurrencyDecimalsNumber
			default to ReceivablePaymentHeader.CurrencyDecimalsNumber
			force default to ReceivablePaymentHeader.CurrencyDecimalsNumber

		ReceivableOperator
			default to ReceivablePaymentHeader.ReceivableOperator


		GeneralLedgerDate
			default to ReceivablePaymentHeader.GeneralLedgerDate

			if (!BypassGLDateForceDefault)									
				force default to ReceivablePaymentHeader.GeneralLedgerDate	

			if (action type.Create				
			or  GeneralLedgerDate changed)		
				if (!BypassGLDateEdit
				and (CompanySystemClosingControlRel.Control
				and  Company.VerifyGLDateWithinGLDateRange))
					constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
						"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

		DepositDate
			default to ReceivablePaymentHeader.DepositDate
			force default to ReceivablePaymentHeader.DepositDate	

		CurrencyMultiplicationOrDivision
			default to ReceivablePaymentHeader.CurrencyMultiplicationOrDivision
			force default to ReceivablePaymentHeader.CurrencyMultiplicationOrDivision

		CurrencyRateToCustomerGroupCurrency
			default to ReceivablePaymentHeader.CurrencyRateToCustomerGroupCurrency
			force default to ReceivablePaymentHeader.CurrencyRateToCustomerGroupCurrency

		CustomerGroupCurrencyMultiplicationOrDivision
			default to ReceivablePaymentHeader.CustomerGroupCurrencyMultiplicationOrDivision
			force default to ReceivablePaymentHeader.CustomerGroupCurrencyMultiplicationOrDivision

		ReceivedNotAppliedReceivableGeneralLedgerCode
			default to ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode


		OriginalCurrency
			if (IsCompanyCurrency)
				OriginalCurrency = Company.Currency
			else
				OriginalCurrency = ReceivablePaymentHeader.Currency

		CurrencyRate
			if (IsCompanyCurrency)
				CurrencyRate = 1




			if (OriginalCurrency entered)

				CurrencyRate = ReceivablePaymentHeader.CurrencyRate










		ReferenceType
			if (ReferenceNumber entered)
				default to LocalReceivableInvoiceRel.ReceivableInvoiceType
			else
				initialize ReferenceType

		FinanceDimension2
			if (!UnreleasedOrUnassigned)
				cannot be changed
					"CannotChange.BatchIsReleased"
			if (ProjectContract entered)
				required
					"<Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Label>Required"
			if (ReceivablePrepayment.ReferenceType.FundingSource)
				required
					"ReceivablePrepaymentFundingSourceExists.<Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Label>Required"
			constraint (Company	= FinanceDimension2.CompanyCustomerGroup.ReceivableCompany and Customer = FinanceDimension2.CompanyCustomerGroup.Customer)
				"<Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Label>CompanyAndCustomerMustEqualPaymentCompanyAndCustomer"

		ProjectContract
			if (!UnreleasedOrUnassigned)
				cannot be changed
					"CannotChange.BatchIsReleased"
			if (FinanceDimension2 entered)
				required
					"<Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ProjectLabel>ContractRequired"
			if (ReceivablePrepayment.ReferenceType.FundingSource)
				required
					"ReceivablePrepaymentFundingSourceExists.<Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ProjectLabel>ContractRequired"

		Project
			if (!UnreleasedOrUnassigned)
				cannot be changed
					"CannotChange.BatchIsReleased"

		ContractRebateGroup.ContractRebateDue
			if (ContractRebateGroup.ContractRebateDue !entered)
				initialize ContractRebateGroup

		Prepayment
			if (IsZeroPayment)
				constraint (!Prepayment.Prepayment)
					"CannotCreatePrepaymentForZeroAmountPayment"





	SubType OpenOrUnassigned Field Rules

		PaymentNumber
			cannot be changed
				"CannotChange;BatchIsReleased"

		TransactionAmount
			cannot be changed
				"CannotChange.BatchIsReleased"

		Customer
			if (old Customer entered)
				cannot be changed
					"CannotChange.BatchIsReleased"


	Relations	

		FSMInboundBODTrackerRel
			one-to-one relation to FSMInboundBODTracker
			Field Mapping uses symbolic key
				related.FSMInboundBODTracker	= LocalFSMInboundBODTracker

		ARToAPApplicationSelectRel
			classic name is ARAPSELECT
			one-to-one relation to ARToAPApplicationSelect
			Field Mapping uses Set3
				related.Company									 = Company
				related.Customer								 = Customer
				related.ARToAPApplicationSelect.BatchNumber		 = ReceivablePaymentHeader
				related.ARToAPApplicationSelect.PaymentSeq		 = ReceivablePayment

		ARToAPInterfaceApplicationSelectRel			
			one-to-one relation to ARToAPApplicationSelect
			Field Mapping uses Set3
				related.Company									 = Company
				related.Customer								 = Customer
				related.ARToAPApplicationSelect.BatchNumber		 = ReceivablePaymentHeader
				related.ARToAPApplicationSelect.PaymentSeq		 = ReceivablePayment

		ARToAPInterfaceIsSelectedRel				
			one-to-one relation to ARToAPApplicationSelect
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.ARToAPApplicationSelect.BatchNumber		 = ReceivablePaymentHeader
				related.ARToAPApplicationSelect.TransactionType	 = TypeOfPayment
				related.ARToAPApplicationSelect.Invoice			 = PaymentNumber
				related.ARToAPApplicationSelect.PaymentSeq		 = ReceivablePayment

		ThisInvoiceDetailARToAPApplicationRel
			one-to-one relation to ARToAPApplicationSelect
			Field Mapping uses Set2
				related.Company									 = DBCompany
				related.ARToAPApplicationSelect.TransactionType	 = DBTransactionType
				related.ARToAPApplicationSelect.Invoice			 = DBInvoice
				related.ARToAPApplicationSelect.PaymentSeq		 = DBPaymentSeq


		BankStatementLineRel	
			one-to-one relation to BankStatementLine	
			Field Mapping uses ByBankStatementLine	
				related.CashManagementGroup					 = Company.FinanceEnterpriseGroup	
				related.CashManagementAccount				 = CashManagementAccount	
				related.BankStatement						 = BankStatement	
				related.BankStatementLine.LineNumber		 = BankStatementLine.LineNumber	
				related.BankStatementLine.SequenceNumber	 = BankStatementLine.SequenceNumber	


		LocalCashApplicationResultRel	
			one-to-one relation to CashApplicationResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			 =	LocalFinanceEnterpriseGroup
				related.CashApplicationResult			 =	LocalCashApplicationResult



		CashLedgerStatementDetailRel
			one-to-many relation to CashLedgerStatementDetail
			delete restricted
			Field Mapping uses Set2
				related.BankTransactionCode									 = ReceivablePaymentHeader.DepositBankCode
				related.CashLedgerStatement									 = ReceivablePaymentHeader.CashLedgerStatement
				related.PaymentNumber										 = ReceivablePayment
				related.TransactionType										 = "C"

			Instance Selection
				where (related.Company										 = Company
				and	related.CashLedgerStatement.ReceivablePaymentHeader		 = ReceivablePaymentHeader
				and	related.Customer										 = Customer
				and	related.CashCode.BankAccountNumber						 = ReceivablePaymentHeader.CashCode)

		CashLedgerGLDistributionsRel
			one-to-many relation to CashLedgerGLDistribution
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= Company.FinanceEnterpriseGroup
				related.CashCode 				= ReceivablePaymentHeader.CashCode
				related.CashLedgerSourceRecord	= "CBT"
			Instance Selection
				where (related.CashLedgerGLDistribution.BankTransactionCode = ReceivablePaymentHeader.DepositBankCode
				and	  related.CashLedgerGLDistribution.TransactionIDNumber  = ReceivablePaymentHeader.TransactionIDNumber
				and	  related.CashLedgerGLDistribution.DistributionType.FundCashPayment)

		CashLedgerGLDistributionByAccountRel
			one-to-many relation to CashLedgerGLDistribution
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= Company.FinanceEnterpriseGroup
				related.CashCode 				= CashCode
				related.CashLedgerSourceRecord	= "CBT"
			Instance Selection
				where (related.CashLedgerGLDistribution.BankTransactionCode	= ReceivablePaymentHeader.DepositBankCode
				and	   related.CashLedgerGLDistribution.TransactionIDNumber	= ReceivablePaymentHeader.TransactionIDNumber
				and	   related.CashLedgerGLDistribution.DistributionType.FundCashPayment
				and	   related.Company.OrigCompany	= Company
				and	   related.GLFinanceCodeBlock	= LocalGLFinanceCodeBlock
				and	   related.PostDate				= GeneralLedgerDate)

		UnreleasedPaymentCashDetailsRel is a ReceivablePaymentCashDetail set
			Instance Selection
				where (related.Status.Unreleased)


		ClaimsAndLiabilitiesRel
			one-to-many relation to ClaimsAndLiabilities
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ClaimsAndLiabilitiesHeader							 = LocalClaimsAndLiabilitiesHeader
				related.Country												 = Customer.PostalAddress.Country


		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.Customer											 = Customer

		CustomerRel
			one-to-one relation to CompanyCustomer
			valid when (CustomerNumberEntered)
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.Customer											 = Customer

		LocalCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company												 = LocalCompany
				related.Customer											 = LocalCustomer


		CompanyCustomerBankAccountRel
			classic name is ARMICRCUST
			one-to-one relation to CompanyCustomerBankAccount
			Field Mapping uses symbolic key
				related.Company													 = Company
				related.CompanyCustomerBankAccount.CustomerBankEntity			 = BankEntity
				related.CompanyCustomerBankAccount.CustomerBankAccountNumber	 = BankAccountNumber










		CompanyCustomerCommentRel
			classic name is ARCOMMENT
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set2
				related.Company											 = Company
				related.Customer										 = Customer
				related.CommentType										 = "T"
				related.TransactionType									 = TypeOfPayment
				related.Transaction										 = PaymentNumber

		OldCompanyCustomerCommentRel  
			classic name is ARCOMMENT
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set2
				related.Company											 = Company
				related.Customer										 = Customer
				related.CommentType										 = "T"
				related.TransactionType									 = TypeOfPayment
				related.Transaction										 = old PaymentNumber


		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company



		ReceivablePaymentAttachmentRel
			one-to-many relation to ReceivablePaymentAttachment
			delete cascades
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivablePaymentHeader		= ReceivablePaymentHeader
				related.ReceivablePayment			= ReceivablePayment

		LocalPaymentCashDetailRel
			one-to-many relation to ReceivablePaymentCashDetail
			Field Mapping uses ByAdditionalDimensionsCodeBlock
				related.Company														= Company
				related.ReceivablePaymentHeader										= ReceivablePaymentHeader
				related.ReceivablePayment											= ReceivablePayment
				related.AdditionalDimensionsCodeBlock.ToAccountingEntity			= LocalPaymentCashDetailAccount.ToAccountingEntity
                related.AdditionalDimensionsCodeBlock.AccountingUnit				= LocalPaymentCashDetailAccount.AccountingUnit
                related.AdditionalDimensionsCodeBlock.GeneralLedgerChartAccount		= LocalPaymentCashDetailAccount.GeneralLedgerChartAccount
                related.AdditionalDimensionsCodeBlock.Project						= LocalPaymentCashDetailAccount.Project
                related.AdditionalDimensionsCode									= LocalPaymentCashDetailAccount.DimensionCode

		TransferredCashDetailApplicationRel
			one-to-many relation to CashDetailApplication
			Field Mapping uses symbolic key
				related.Company										= Company
				related.ReceivablePaymentHeader						= ReceivablePaymentHeader
				related.ReceivablePayment							= ReceivablePayment
			Instance Selection
				where (related.ApplicationSource.Transferred)


		NumberOfRecordForSetActionRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	 = "config"
				related.ConfigurationParameter.Name				 = "receivable_payment_number_of_records_set_action"

















		AllCustomerGroupRel
			one-to-many relation to CustomerGroup
			Field Mapping uses symbolic key
		
		CustdescRel
			one-to-one relation to Customer
			valid when (CustomerIsEntered)
			required
			Field Mapping uses symbolic key
				related.CustomerGroup							 = Company.CustomerGroupField.CustomerGroup
				related.Customer								 = Customer

		CustomerNameRel
			one-to-many relation to Customer
			Field Mapping uses Set4
				related.CustomerGroup							 = Company.CustomerGroupField.CustomerGroup
				related.SearchName								 = SearchName


		ForeignTradeAndPaymentsRel
			one-to-one relation to ForeignTradeAndPayments
			Field Mapping uses Set2
				related.Company												 = Company
				related.ForeignTradeAndPayments.ReceivablePaymentHeader		 = ReceivablePaymentHeader
				related.ForeignTradeAndPayments.ReceivablePayment			 = ReceivablePayment
				related.ForeignTradeAndPayments.CashCode					 = blank
				related.ForeignTradeAndPayments.CashLedgerSourceRecord		 = blank
				related.ForeignTradeAndPayments.BankTransactionCode			 = blank
				related.ForeignTradeAndPayments.TransactionIDNumber			 = blank


		GeneralLedgerCompanyRel		
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company


		GeneralLedgerCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup						 =	FilterGeneralLedgerCompanyGroup
				related.Company											 =	Company

		GeneralLedgerCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	 = LocalGeneralLedgerCompanyGroup
				related.Company						 = Company

		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company











		NationalAccountCustomerRel
			one-to-many relation to NationalAccount
			Field Mapping uses Set5	
				related.NationalAccount.NationalAccountGroup.NatCompany		 = LocalNationalCompany	
				related.NationalAccount.NationalAccountGroup.NatCustomer	 = LocalNationalCustomer	




		NationalAccountCustomer2Rel	
			one-to-many relation to NationalAccount	
			Field Mapping uses Set5	
				related.NationalAccount.NationalAccountGroup.NatCompany		 = Company	
				related.NationalAccount.NationalAccountGroup.NatCustomer	 = Customer	




		NationalAccountInvoiceRel
			one-to-many relation to NationalAccount

			Field Mapping uses Set2	
				related.NationalAccount.InvoiceAccountGroup.Company		 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer	 = Customer


		CashAppCreditNatlAcctTransactionsCustomerRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company								 = DBNationalCompany	
				related.NationalAccount.Customer							 = DBNationalCustomer	
			Instance Selection


				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and	related.Customer	= Customer)

		CashAppCreditNatlAcctTransactionsRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company								 = DBNationalCompany	
				related.NationalAccount.Customer							 = DBNationalCustomer	
			Instance Selection


				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)

		CashAppNatlAcctTransactionsRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company								 = DBNationalCompany	
				related.NationalAccount.Customer							 = DBNationalCustomer	
			Instance Selection


				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice
				or	 related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)

		NationalAccountTransactionsRel
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company					 = DerivedNationalCompany	
				related.NationalAccount.Customer				 = DerivedNationalCustomer	




		NationalAccountTransactionsByDueDateRel
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company								 = DerivedNationalCompany
				related.NationalAccount.Customer							 = DerivedNationalCustomer

		NationalAccountTransactionsInCustomGroupRel
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company								 = DerivedNationalCompany
				related.NationalAccount.Customer							 = DerivedNationalCustomer
			Instance Selection
				where (related within InvoiceDetailGroup)


		AgePeriodBalanceDetailRel
			one-to-many relation to ReceivableAgePeriodBalanceDetail
			Field Mapping uses ByPeriod
				related.Company												 = Company
				related.Customer											 = Customer
				related.Period												 = LocalPeriod


		AgePeriodBalanceHeaderRel
			one-to-one relation to ReceivableAgePeriodBalanceHeader
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.Customer											 = Customer


		ARToAPInterfaceReceivableApplication3Rel
			one-to-one relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany				 = Company
				related.CreditTransaction.CreditCustomer			 = Customer
				related.CreditTransaction.CreditType				 = TypeOfPayment
				related.CreditTransaction.CreditNumber				 = PaymentNumber
				related.CreditTransaction.CreditSequence			 = ReceivablePayment
				related.CreditTransaction.CreditBatch				 = ReceivablePaymentHeader
				related.CreditTransaction.CreditSuffix				 = blank
				related.BillOfExchangeCancelSequence				 = blank
				related.CreditAppliedSequence						 = LastApplicationSequence

		ARToAPInterfaceReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set4
				related.Company										= Company
			Instance Selection
				where  (related.ReceivableApplication.TransType		= TypeOfPayment
				and		related.ReceivableApplication.Invoice		= PaymentNumber
				and		related.ReceivableApplication.PaymentSeq	= ReceivablePayment
				and		related.ReceivableApplication.BatchNumber	= ReceivablePaymentHeader)

		ChargebackMemoApplicationRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (related.ApplicationAmount.CurrencyAmount < 0
				and   !related.Status.UnreleasedCashApplication
				and	related.ReceivableApplication.ApplicationSequence = 1)

		CreditApplications
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (related.ReceivableApplication.TransType.CreditMemo)

		DebitApplications
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (!related.ReceivableApplication.TransType.CreditMemo)

		DebitApplicationsRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (!related.ReceivableApplication.TransType.CreditMemo
				and		related.PostedCanBeReversed)

		PaymentDebitApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set4
				related.Company										= Company
			Instance Selection
				where  (related.ReceivableApplication.TransType		= TypeOfPayment
				and		related.ReceivableApplication.Invoice		= PaymentNumber
				and		related.ReceivableApplication.PaymentSeq	= ReceivablePayment
				and		related.ReceivableApplication.BatchNumber	= ReceivablePaymentHeader)

		PostedApplicationsAvailableToReverseRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (related.PostedCanBeReversed)

		PostedCreditTransactionApplicationsAvailableToReverseRel
			one-to-many relation using PostedApplicationsAvailableToReverseRel
			Instance Selection
				where (related.ReceivableApplication.TransType.CreditMemo)

		PostedApplicationsRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (related.Status.ApplicationPosted)

		PurgeEligibleCreditApplicationsRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany				 = Company
				related.CreditTransaction.CreditBatch				 = ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence			 = ReceivablePayment
			Instance Selection
				where (related.Status.ApplicationPosted
				and	   related.Writeoff)

		ReceivableApplicationRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany					 = Company
				related.CreditTransaction.CreditBatch					 = ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence				 = ReceivablePayment

		ReceivableApplicationTrackerRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany					 = Company
				related.CreditTransaction.CreditBatch					 = ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence				 = ReceivablePayment
			Instance Selection
				where (related.ReceivableApplication.TransType.CreditMemo
				or	 related.ReceivableApplication.TransType.DebitMemo
				or	 related.ReceivableApplication.TransType.Invoice)

		ReceivableApplicationWithinPostingRangeRel
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany					 = Company
				related.CreditTransaction.CreditBatch					 = ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence				 = ReceivablePayment
			Instance Selection
				where ((ApplPostingDateRange not entered
				or	(ApplPostingDateRange entered
				and	related.GeneralLedgerDate within ApplPostingDateRange))
				and   (CrossCustomerApplications not entered
				or	  (CrossCustomerApplications entered
				and	CrossCustomerApplications.Yes
				and	related.CrossPaid)
				or	(CrossCustomerApplications entered
				and	CrossCustomerApplications.No
				and   !related.CrossPaid)))

		UnpostedApplicationsAvailableToReverseRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (related.UnpostedCanBeReversed)

		UnpostedDebitApplications
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (!related.ReceivableApplication.TransType.CreditMemo
				and	!related.Status.ApplicationPosted)

		UnpostedDebitApplicationsRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (!related.ReceivableApplication.TransType.CreditMemo
				and !related.ReceivableApplication.NegativePaymentWriteoff
				and	!related.Status.ApplicationPosted)


		UnpostedReceivableApplicationRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany		= Company
				related.CreditTransaction.CreditBatch		= ReceivablePaymentHeader
				related.CreditTransaction.CreditSequence	= ReceivablePayment
			Instance Selection
				where (!related.Status.ApplicationPosted)

		WsARAApplicationRel
			one-to-one relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company												 = WsARACompany
				related.ReceivableApplication.TransType						 = WsARATransType
				related.ReceivableApplication.Invoice						 = WsARAInvoice
				related.ReceivableApplication.PaymentSeq					 = WsARAPaymentSeq
				related.ReceivableApplication.BatchNumber					 = WsARABatchNumber
				related.ReceivableApplication.ApplicationSequence			 = WsARAApplicationSequence



		NonTransferPaymentAdjustmentsRel
			classic name is ARADJUST
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses AlternatePrimary
				related.Company								= Company
				related.ReceivableApplication.TransType		= TypeOfPayment
				related.ReceivableApplication.Invoice		= PaymentNumber
				related.ReceivableApplication.PaymentSeq	= ReceivablePayment
				related.ReceivableApplication.BatchNumber	= ReceivablePaymentHeader
			Instance Selection
				where (!related.ReceivableAdjustmentReasonType.PaymentTransfer)

		PaymentAdjustmentsRel
			classic name is ARADJUST
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses AlternatePrimary
				related.Company								= Company
				related.ReceivableApplication.TransType		= TypeOfPayment
				related.ReceivableApplication.Invoice		= PaymentNumber
				related.ReceivableApplication.PaymentSeq	= ReceivablePayment
				related.ReceivableApplication.BatchNumber	= ReceivablePaymentHeader

		ReceivableApplicationAdjustmentRel
			classic name is ARADJUST
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company									 = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 =	TypeOfPayment
				and   related.ReceivableApplication.Invoice		 =	PaymentNumber
				and   related.ReceivableApplication.PaymentSeq	 =	ReceivablePayment
				and   related.ReceivableApplication.BatchNumber	 =	ReceivablePaymentHeader)

		AvailableAdjustmentsForRTMRel
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses ByCreditTransaction
				related.AdjustmentCreditTransaction.CreditCompany		= Company
				related.AdjustmentCreditTransaction.CreditBatch			= ReceivablePaymentHeader
				related.AdjustmentCreditTransaction.CreditSequence		= ReceivablePayment
			Instance Selection
				where (related.IsNotCurr
				and	   related.ReceivableApplication.TransType.Invoice
				and	   related.ReceivableApplication.CreditTransaction.CreditType.Payment
				and	  !related.ReceivableApplication.Reverse
				and	  !related.ReceivableApplication.ApplicationSource.ReversalOfApplications)


		MemoChargebackAdjustmentRel
			classic name is ARSADJUST
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses symbolic key
				related.Company													 = Company
			Instance Selection

				where (related.ReceivableApplicationAdjustmentSelect.TransType	 = TypeOfPayment
				and   related.ReceivableApplicationAdjustmentSelect.Invoice		 = PaymentNumber
				and   related.ReceivableApplicationAdjustmentSelect.PaymentSeq	 = ReceivablePayment
				and   related.ReceivableApplicationAdjustmentSelect.BatchNumber	 = ReceivablePaymentHeader
				and   related.MemoChargebackAdjustment)

		NonMemoChargebackAdjustmentRel
			classic name is ARSADJUST
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses symbolic key
				related.Company													 = Company
			Instance Selection

				where (related.ReceivableApplicationAdjustmentSelect.TransType	 = TypeOfPayment
				and   related.ReceivableApplicationAdjustmentSelect.Invoice		 = PaymentNumber
				and   related.ReceivableApplicationAdjustmentSelect.PaymentSeq	 = ReceivablePayment
				and   related.ReceivableApplicationAdjustmentSelect.BatchNumber	 = ReceivablePaymentHeader
				and   !related.MemoChargebackAdjustment)

		PendingAdjustMemoRel
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses Set2
				related.Company 												 = Company
			Instance Selection

				where (related.ReceivableApplicationAdjustmentSelect.TransType		 = TypeOfPayment
				and   related.ReceivableApplicationAdjustmentSelect.Invoice			 = PaymentNumber
				and   related.ReceivableApplicationAdjustmentSelect.PaymentSeq		 = ReceivablePayment
				and   related.ReceivableApplicationAdjustmentSelect.BatchNumber		 = ReceivablePaymentHeader
				and   related.MemoChargebackAdjustment)

		PendingAdjustNonMemoRel
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses Set2
				related.Company 												 = Company
			Instance Selection

				where (related.ReceivableApplicationAdjustmentSelect.TransType	 = TypeOfPayment
				and   related.ReceivableApplicationAdjustmentSelect.Invoice		 = PaymentNumber
				and   related.ReceivableApplicationAdjustmentSelect.PaymentSeq	 = ReceivablePayment
				and   related.ReceivableApplicationAdjustmentSelect.BatchNumber	 = ReceivablePaymentHeader
				and   related.MemoChargebackAdjustment = false)

		ReceivableApplicationAdjustmentSelectRel
			classic name is ARSADJUST
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses symbolic key
				related.Company 												 = Company
			Instance Selection

				where (related.ReceivableApplicationAdjustmentSelect.TransType	 = TypeOfPayment
				and   related.ReceivableApplicationAdjustmentSelect.Invoice		 = PaymentNumber
				and   related.ReceivableApplicationAdjustmentSelect.PaymentSeq	 = ReceivablePayment
				and   related.ReceivableApplicationAdjustmentSelect.BatchNumber	 = ReceivablePaymentHeader)

		ReceivableApplicationAdjustmentSelectSet3Rel
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses Set3
				related.Company														 = Company
			Instance Selection
				where  (related.ReceivableApplicationAdjustmentSelect.BatchNumber	 = ReceivablePaymentHeader
				and		related.ReceivableApplicationAdjustmentSelect.PaymentSeq	 = ReceivablePayment)


		PendingApplicationsRel is a ReceivableApplicationSelect set

		PendingAppliedCreditMemoRel is a ReceivableApplicationSelect set
			Instance Selection
				where (related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "C") 

		PendingAppliedNonCreditMemoRel is a ReceivableApplicationSelect set
			Instance Selection
				where (related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType != "C") 

		PendingApplicationsWithAdjustmentsRel is a ReceivableApplicationSelect set	
			Instance Selection	
				where (related.AdjustmentsExist)	

		ReceivableApplicationSelectKeyRel
			classic name is ARSAPPLIED
			one-to-many relation to ReceivableApplicationSelect
			delete cascades
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.ReceivablePaymentHeader										 = ReceivablePaymentHeader
				related.ReceivablePayment											 = ReceivablePayment

		ReceivableApplicationSelectRel
			classic name is ARSAPPLIED
			one-to-many relation to ReceivableApplicationSelect
			delete cascades
			Field Mapping uses Set3
				related.Company											 = Company
				related.ReceivablePaymentHeader							 = ReceivablePaymentHeader
				related.ReceivablePayment								 = ReceivablePayment


		LocalReceivableCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company											 = LocalCompany

		ReceivableCompanyRel	
			one-to-one relation to ReceivableCompany	
			Field Mapping uses symbolic key	
				related.Company											 = Company	








		ReceivableFilterRel
			one-to-one relation to ReceivableFilter
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							 = actor.context.FinanceEnterpriseGroup
				related.ReceivableFilter								 = actor


		CustomerPaymentGLDistributionRel
			one-to-many relation to ReceivableGLDistribution
			valid when (TypeOfPayment.CustomerPayment)





			Field Mapping uses ByPaymentSequence
				related.ReceivableCompanyDataGroup.TransactionCompany		 = Company
				related.BatchNumber											 = ReceivablePaymentHeader
				related.SequenceNumber										 = ReceivablePayment
			Instance Selection	
				where (related.TransType.CustomerPayment)	

		LastNonArDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany				 = Company
				related.BatchNumber													 = ReceivablePaymentHeader
				related.TransType													 = TypeOfPayment
				related.Invoice														 = PaymentNumber
				related.ReceivableCompanyDataGroup.Customer							 = Customer

		NonARReceivableGLDistributionRel
			one-to-many relation to ReceivableGLDistribution
			valid when (IsNonARPayment)
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 =	Company
				related.BatchNumber										 =	ReceivablePaymentHeader
				related.TransType										 =	TypeOfPayment
				related.Invoice											 =	PaymentNumber

		ReceivableGLDistributionViewRel  
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByPaymentSequence
				related.ReceivableCompanyDataGroup.TransactionCompany		 = Company
				related.BatchNumber											 = ReceivablePaymentHeader
				related.SequenceNumber										 = ReceivablePayment
			Instance Selection
				where (related.Origin = "RP"
				or     related.Origin = "RV")

		OneSourceTaxableDistributionsRel
			one-to-many relation using NonARReceivableGLDistributionRel
			Instance Selection
				where (related.TaxCode entered)

		OneSourceReceivableGLDistributionWithTaxCodeRel 
			one-to-many relation using NonARReceivableGLDistributionRel
			Instance Selection
				where (related.TaxCode entered
				and	   related.OneSourceCreatedTaxDistribution)

		LinkedTaxGroupTaxableDistributionsRel
			one-to-many relation using NonARReceivableGLDistributionRel
			Instance Selection
				where (related.LinkedTaxGroup.Indicator.Taxable)

		LinkedTaxGroupSourceOfLinkedTaxDistributionRel
			one-to-many relation using NonARReceivableGLDistributionRel
			Instance Selection
				where (related.LinkedTaxGroup.Indicator.SourceDistribution)

		LinkedTaxGroupLinkedTaxDistributionRel
			one-to-many relation using NonARReceivableGLDistributionRel
			Instance Selection
				where (related.LinkedTaxGroup.Indicator.CreatedTaxDistribution)

		ReceivableGLDistributionLastTaxableRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByReceivableInvoice
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = ReceivablePaymentHeader
				related.TransType										 = TypeOfPayment
				related.Invoice											 = PaymentNumber
				related.ReceivableCompanyDataGroup.Customer				 = Customer
				related.LastDistributionSequence						 = LocalLastDistributionSequence

		NonArDistribRel
			one-to-many relation to ReceivableGLDistribution
			valid when (IsNonARPayment)
			delete cascades
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = ReceivablePaymentHeader
				related.TransType										 = TypeOfPayment
				related.Invoice											 = PaymentNumber

		OldNonArDistribRel
			one-to-many relation to ReceivableGLDistribution  
			valid when (IsNonARPayment)
			delete cascades
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = old Company
				related.BatchNumber										 = old ReceivablePaymentHeader
				related.TransType										 = old TypeOfPayment
				related.Invoice											 = old PaymentNumber

		ReceivableGLDistributionRel
			classic name is ARMEMODIST
			one-to-many relation to ReceivableGLDistribution
			valid when (IsTypeCustomerPayment)
			delete cascades
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = ReceivablePaymentHeader
				related.TransType										 = TypeOfPayment
				related.Invoice											 = PaymentNumber
				related.ReceivableCompanyDataGroup.Customer				 = Customer

		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				 = GeneralLedgerCompanyRel.AccountingEntity

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntityRel.FinanceEnterpriseGroup
				related.TaxEntity 						= TaxEntityRel.TaxEntity
				related.TaxCode							= LocalTaxCode

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID

		JurisdictionResultsForPaymentRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)

		TaxConfigurationRel
			one-to-one relation to TaxConfiguration
			Field Mapping uses symbolic key
				related.TaxConfiguration			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup


		InvoiceForeignEconomicCodeRel
			classic name is AROIHDR
			one-to-one relation to ReceivableInvoice
			required
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ReceivableInvoiceType						 		 = InvoiceDetailForeignEconomicCodeRel.AlternateReceivableInvoiceType
				related.ReceivableInvoice									 = ReceivableApplicationRel.ReceivableApplication.Invoice

		LocalReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses Set6
				related.Company							= Company
				related.AlternateReceivableInvoiceType	= LocalTransactionType
				related.ReceivableInvoice				= LocalInvoice

		ReceivableInvoiceMemoRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses ByCrossReference
				related.Company												 = Company
				related.ReceivableInvoiceType								 = "C"
				related.Customer											 = Customer
				related.ReceivableCrossReference.ReceivableInvoiceType		 = "O"
				related.ReceivableCrossReference.ReceivableInvoice			 = PaymentNumber


		ReceivableInvoiceApplyReverseDetailKeyRel
			classic name is ARTRNRVDTL
			one-to-many relation to ReceivableInvoiceApplyReverseDetail
			delete restricted
			Field Mapping uses symbolic key
				related.Company														 = ARToAPInterfaceReceivableApplication3Rel.Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType			 = ARToAPInterfaceReceivableApplication3Rel.ReceivableApplication.TransType
				related.ReceivableInvoiceDetail.Invoice								 = ARToAPInterfaceReceivableApplication3Rel.ReceivableApplication.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq							 = ARToAPInterfaceReceivableApplication3Rel.ReceivableApplication.PaymentSeq
				related.ReceivableInvoiceApplyReverseDetail							 = ARToAPInterfaceReceivableApplication3Rel.ReceivableApplication.ApplicationSequence

		ReceivableInvoiceApplyReverseDetailRel
			classic name is ARTRNRVDTL
			one-to-many relation to ReceivableInvoiceApplyReverseDetail
			delete restricted
			Field Mapping uses Set2
				related.CreditCompany									 = Company
				related.CreditBatchNumber								 = ReceivablePaymentHeader
				related.CreditTransactionType							 = "P"
				related.CreditTransactionNumber							 = PaymentNumber
				related.CreditInvoice									 = blank
				related.CreditPaymentSequence							 = ReceivablePayment












		CreditTransactionsForSetCustomerRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 adding this comment - Set3 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company												 = LocalCompany
				related.Customer											 = LocalCustomer
			Instance Selection
				where (related.IsCreditMemo)

		EligibleOverApplyOpenReceivableInvoiceDetailsRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set9	//IEFIN-106354 adding this comment - Set9 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company												 = DBCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = DBTransactionType
			Instance Selection
				where (related.ReceivableInvoiceDetail.Invoice				 = DBInvoice

				and	related.IsEligibleForOverCashApplication)

		InvoiceDetailForeignEconomicCodeRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableApplicationRel.ReceivableApplication.TransType
				related.ReceivableInvoiceDetail.Invoice						 = ReceivableApplicationRel.ReceivableApplication.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableApplicationRel.ReceivableApplication.PaymentSeq

		LocalByInvoiceRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByReceivableInvoiceDetail	//IEFIN-106354 adding this comment - OpenByReceivableInvoiceDetail is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 = DBTransactionType
				and	related.ReceivableInvoiceDetail.Invoice								 = DBInvoice
				and	related.BankTransactionType.CashPayment)

		LocalCashAppInvoiceDetailSet1Rel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 replacing symbolic key with Set3, since it is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company															 = DBCompany
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 = DBTransactionType
				and	related.ReceivableInvoiceDetail.Invoice								 = DBInvoice
				and related.Company.CustomerGroupField.CustomerGroup					 = Company.CustomerGroupField.CustomerGroup

				and	related.BankTransactionType.CashPayment)

		LocalCashAppInvoiceDetailSet3Rel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 adding this comment - Set3 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company															 = DBCompany
				related.Customer														 = DBCustomer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 = DBTransactionType
				and	related.ReceivableInvoiceDetail.Invoice								 = DBInvoice
				and related.Company.CustomerGroupField.CustomerGroup					 = Company.CustomerGroupField.CustomerGroup)

		LocalDBInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company												 =	DBCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	DBTransactionType
				related.ReceivableInvoiceDetail.Invoice						 =	DBInvoice
				related.ReceivableInvoiceDetail.PaymentSeq					 =	DBPaymentSeq

		LocalTypeTransactionsForCustomerRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 adding this comment - Set3 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company														 = Company
				related.Customer													 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = LocalTransactionType)

		NonCreditTransactionsForCustomerRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 adding this comment - Set3 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company												 = Company
				related.Customer											 = Customer
			Instance Selection
				where (!related.IsCreditMemo)

		NonCreditTransactionsSetForCustomerRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set2	//IEFIN-106354 adding this comment - Set2 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company												 = LocalCompany
				related.Customer											 = LocalCustomer
			Instance Selection
				where (!related.IsCreditMemo)

		RelatedInvoiceDetailRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set9	//IEFIN-68566 - Replaced symbolic key with Set9	//IEFIN-106354 adding this comment - Set9 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company															 = DBCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType				 = DBTransactionType	
			Instance Selection

				where	(related.ReceivableInvoiceDetail.Invoice						 = DBInvoice)

		ReceivableInvoiceDetailForRemittanceRel		
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set9
				related.Company															 = DBCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType				 = DBTransactionType
			Instance Selection
				where	(related.ReceivableInvoiceDetail.Invoice						 = DBInvoice
				and		 related.ReceivableInvoiceDetail.PaymentSeq						 = DBPaymentSeq)

		ThisCreditInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company															 = DBCreditCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType				 = DBCreditTransactionType
				related.ReceivableInvoiceDetail.Invoice									 = DBCreditInvoice
				related.ReceivableInvoiceDetail.PaymentSeq								 = DBCreditPaymentSeq

		ThisInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company															 = DBCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType				 = DBTransactionType
				related.ReceivableInvoiceDetail.Invoice									 = DBInvoice
				related.ReceivableInvoiceDetail.PaymentSeq								 = DBPaymentSeq

		MixedReceivableInvoiceCreditDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = DBCompany 
				related.AlternateReceivableInvoiceType								 = "M"
				related.ReceivableInvoiceDetail.Invoice								 = DBInvoice
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = "C")

		TransactionsForCustomerAcrossCompanyRel	
			one-to-many relation to ReceivableInvoiceDetail	
			Field Mapping uses OpenByCustomer	
				related.Customer													 = Customer
			Instance Selection	
				where (related.Company.CustomerGroupField.CustomerGroup				 = Company.CustomerGroupField.CustomerGroup)	








		TransactionsForCustomerByDueDateRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set2	//IEFIN-106354 adding this comment - Set2 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company												 = Company	
				related.Customer											 = Customer	




		TransactionsForCustomerByDueDateAcrossCompanyRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses ByCustomerDueDateAcrossCompany
				related.Customer											= Customer
			Instance Selection
				where (related.IsOpen
				and    related.Company.CustomerGroupField.CustomerGroup		= Company.CustomerGroupField.CustomerGroup)

		TransactionsForCustomerInCustomGroupRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set2	//IEFIN-106354 adding this comment - Set2 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company												 = Company
				related.Customer											 = Customer
			Instance Selection
				where (related within InvoiceDetailGroup)

		TransactionsForCustomerRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 adding this comment - Set3 is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company												 = Company	
				related.Customer											 = Customer	





		LocalReceivableInvoiceImportRel
			one-to-many relation to ReceivableInvoiceImport
			Field Mapping uses ByCompanyInvoiceCustomer
				related.Company							= Company
			Instance Selection
				where (related.InvoiceType				= LocalTransactionType
				and	related.Invoice						= LocalInvoice)


		LocalOperatorRel
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ReceivableOperator									 = LocalOperator


		DuplicatePaymentNumberRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set2
				related.Company							= Company
				related.ReceivablePaymentHeader			= ReceivablePaymentHeader
				related.TypeOfPayment					= TypeOfPayment
				related.PaymentNumber					= PaymentNumber

		DuplicatePaymentSet10Rel
			one-to-one relation to ReceivablePayment
			Field Mapping uses Set10
				related.Company = Company
				related.Customer = Customer
				related.TypeOfPayment					= TypeOfPayment
				related.PaymentNumber					= PaymentNumber
				related.ReceivablePaymentHeader			= ReceivablePaymentHeader

		DuplicatePaymentSetRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set2
				related.Company						= Company
				related.ReceivablePaymentHeader			= ReceivablePaymentHeader	
				related.TypeOfPayment					= TypeOfPayment
				related.PaymentNumber					= PaymentNumber
				related.Customer						= Customer
			Instance Selection
				where (related.UniqueID != UniqueID)

		LocalPaymentNumberRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses Set2
				related.Company							= Company
				related.ReceivablePaymentHeader			= ReceivablePaymentHeader
				related.TypeOfPayment					= LocalTypeOfPayment
				related.PaymentNumber					= PaymentNumber
				related.Customer						= LocalCustomer

		LastSequenceRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company											 = Company
				related.ReceivablePaymentHeader							 = ReceivablePaymentHeader

		PaymentsAgePeriodRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10
				related.Company												 = Company
				related.Customer											 = Customer
			Instance Selection
				where (related.AgePeriod = AgePeriod)

		PaymentByBankAccountRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set3
				related.Company												 = Company
				related.BankEntity											 = BankEntity
				related.BankAccountNumber									 = BankAccountNumber
			Instance Selection
				where (related.UniqueID != UniqueID)

		ReceivablePaymentNumberRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set2
				related.Company							= Company
				related.ReceivablePaymentHeader			= ReceivablePaymentHeader
				related.TypeOfPayment					= "P"
				related.PaymentNumber					= PaymentNumber
				related.Customer						= Customer
			Instance Selection
				where (related.ReceivablePayment	!= ReceivablePayment)


		ReceivablePaymentApplyReverseDetailRel
			classic name is ARPMTRVDTL
			one-to-many relation to ReceivablePaymentApplyReverseDetail
			delete restricted
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ReceivablePaymentApplyReverseDetail.CreditCompany		 = Company
				and   related.ReceivablePaymentApplyReverseDetail.CreditBatchNumber		 = ReceivablePaymentHeader
				and   related.ReceivablePaymentApplyReverseDetail.CreditPaymentSequence	 = ReceivablePayment)


		ReceivablePaymentApplyReverseHeaderRel
			classic name is ARPMTRVHDR
			one-to-one relation to ReceivablePaymentApplyReverseHeader
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.ReceivablePaymentApplyReverseHeader.CreditBatchNumber		 = ReceivablePaymentHeader
				related.ReceivablePaymentApplyReverseHeader.CreditPaymentSequence	 = ReceivablePayment


		ReceivablePaymentRemittanceRel
			classic name is ARREMIT
			one-to-many relation to ReceivablePaymentRemittance
			delete cascades
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment

		ReceivablePaymentRemittanceNoInvoiceDetailRel 
			one-to-many relation using ReceivablePaymentRemittanceRel
			Instance Selection
				where (related.InvoiceDetail not entered)

		SettlementReceivablePaymentRemittanceRel
			classic name is ARREMIT
			one-to-many relation to ReceivablePaymentRemittance
			delete cascades
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment
			Instance Selection
				where (related.IsIntercompanyBilling)


		ReceivablePaymentRemittanceCreditMemoOrMixedSignRel  
			one-to-many relation to ReceivablePaymentRemittance
			delete cascades
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment
			Instance Selection
				where (related.ReceivableInvoiceType.CreditMemo
				or 	   related.ReceivableInvoiceType.MixedSignLines)

		RemittanceCreditRel	
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set2	
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment
			Instance Selection

				where	(!related.Status.Applied
				and		related.ReceivableInvoice entered)

		RemittanceInvoiceAndDebitRel	
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set3	
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment
			Instance Selection


				where (!related.Status.Applied
				and		related.ReceivableInvoice entered)

		RemittanceCreditMemoRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set2	
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment



		RemittanceInvoiceAndDebitMemoRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set3	
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment




		ThisReceivablePaymentRemittanceRel
			one-to-one relation to ReceivablePaymentRemittance
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment
				related.ReceivablePaymentRemittance		 = ThisReceivablePaymentRemittance

		LocalReceivablePaymentRemittanceRel
			one-to-many relation to ReceivablePaymentRemittance 
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment
				related.ReceivablePaymentRemittance		 = ThisReceivablePaymentRemittance












		FromPrepaymentRel
			classic name is ARPREPAY
			one-to-one relation to ReceivablePrepayment
			delete cascades
			Field Mapping uses symbolic key
				related.Company											 = Company
				related.ReceivablePaymentHeader							 = ReceivablePaymentHeader
				related.ReceivablePayment								 = LocalPayment

		ReceivablePrepaymentRel
			classic name is ARPREPAY
			one-to-one relation to ReceivablePrepayment
			delete cascades
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.ReceivablePayment				 = ReceivablePayment


		OpenReceivableProjectTransactionRel
			one-to-many relation to ReceivableProjectTransaction
			Field Mapping uses symbolic key
				related.Company											 = Company
			Instance Selection
				where (related.Customer									 = Customer
				and related.OpenTransaction)

		ReceivableProjectTransactionRel
			one-to-one relation to ReceivableProjectTransaction
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.ReceivableProjectTransaction.TransType						 = TypeOfPayment
				related.ReceivableProjectTransaction.BatchNumber					 = ReceivablePaymentHeader
				related.ReceivableProjectTransaction.Transaction					 = PaymentNumber
				related.ReceivableProjectTransaction.PaymentSeq						 = ReceivablePayment


		InterfaceResultsRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup								 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult							 = OriginatingInterfaceRun


		ReceivableTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.ReceivableProcessLevel										 = ReceivablePaymentHeader.ReceivableProcessLevel
				related.ReceivableTransactionSummary								 = LocalReceivableTransactionSummary


		RTMPaymentRel
			classic name is ARRTM1
			one-to-one relation to RTMPayment
			delete cascades
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivablePaymentHeader			 = ReceivablePaymentHeader
				related.Customer						 = Customer
				related.RTMPayment						 = PaymentNumber


		RTMPaymentAdjustmentRel
			one-to-many relation to RTMPaymentAdjustment
			Field Mapping uses symbolic key
				related.Company										 = Company
				related.ReceivablePaymentHeader						 = ReceivablePaymentHeader
				related.Customer									 = Customer
				related.RTMPayment									 = PaymentNumber
				related.RTMPaymentAdjustment.DebitCompany			 = Company
				related.RTMPaymentAdjustment.DebitType				 = ReceivableApplicationRel.ReceivableApplication.TransType
				related.RTMPaymentAdjustment.DebitTransactionNumber	 = ReceivableApplicationRel.ReceivableApplication.Invoice
				related.RTMPaymentAdjustment.DebitPaymentSequence	 = ReceivableApplicationRel.ReceivableApplication.PaymentSeq
				related.RTMPaymentAdjustment.DebitBatchNumber		 = ReceivableApplicationRel.ReceivableApplication.BatchNumber
				related.RTMPaymentAdjustment.ApplicationSequence	 = ReceivableApplicationRel.ReceivableApplication.ApplicationSequence
				related.RTMPaymentAdjustment.AdjustmentSequence		 = ReceivableApplicationRel.AdjustmentSequence


		ReceivableSummaryDistributionRel
			one-to-many relation to ReceivableGLDistribution

			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = ReceivablePaymentHeader
			Instance Selection

				where (related.TransType.CustomerPayment)	

		FSMBODConfigurationParameterRel
			one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
				related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb		= 1
				related.FSMBODConfiguration.Noun		= "DebitTransfer"
				related.FSMBODConfiguration.Direction	= 1


		FSMBODConfigurationRTRel 
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb		= 1
				related.FSMBODConfiguration.Noun		= "ReceivableTransaction"
				related.FSMBODConfiguration.Direction	= 1

		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.OriginatingTransaction	= reference to this instance

		CashCodeFundEditByFundRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.OriginatingTransaction	= reference to this instance
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		ExceedesCashCodeFundBalanceRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByExceedesFundBalance
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.OriginatingTransaction	= reference to this instance
				related.ExceedesFundBalance		= true


		CurrencyRelationshipRel
			one-to-one relation to CurrExchangeRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup								= actor.context.FinanceEnterpriseGroup
				related.CurrencyTable										= ReceivablePaymentHeader.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency	= OriginalCurrency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency	= Company.FinanceEnterpriseGroup.ReportCurrencyOne
				related.ExchangeDate										<= GeneralLedgerDate

		CurrExchangeRateRel
			one-to-one relation to CurrExchangeRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup								= Company.FinanceEnterpriseGroup
				related.CurrencyTable										= ReceivablePaymentHeader.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency	= OriginalCurrency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency	= "MXN"
				related.ExchangeDate										<= GeneralLedgerDate

		FSMBODConfigurationRTRRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb		= 1
				related.FSMBODConfiguration.Noun		= "ReceivableTracker"
				related.FSMBODConfiguration.Direction	= 1



		FESNonARReceivableGLDistributionRel
			one-to-many relation to ReceivableGLDistribution
			valid when (IsNonARPayment)
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 =	Company
				related.BatchNumber										 =	ReceivablePaymentHeader
				related.TransType										 =	TypeOfPayment
				related.Invoice											 =	PaymentNumber
			Instance Selection
				where (related.CreatedByFES)

		NationalCompanyCustomerRel			
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 = CompanyCustomerRel.NationalCompany
				related.Customer	 = CompanyCustomerRel.NationalCustomer

		CashApplicationErrorResultRel
			one-to-many relation to CashApplicationErrorResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CashApplicationResult	= LocalCashApplicationResult
			Instance Selection
				where (related.Company		 = Company
				and	   related.CustomerGroup = Company.CustomerGroupField.CustomerGroup
				and	   related.Customer		 = Customer)

		CompanyRTMPaymentLanguageTextRel										
			one-to-many relation to RTMPaymentLanguageText
			Field Mapping uses Set1
			Instance Selection
				where (related.RTMPaymentLanguageText.Company		 = Company)

		IDMJobRel
			one-to-one relation to IDMJob
			Field Mapping uses symbolic key
				related.IDMJob = IDMJob

		IDMAdditionalAttributesLinesRel
			one-to-many relation to IDMAdditionalAttributesLines
			Field Mapping uses symbolic key
				related.IDMAdditionalAttributesHeader = "FSM_PaymentReceipt"
			Instance Selection
				where(related.IDMAdditionalAttributesHeader.ActivateAdditionalAttributes
				and	  related.ActivateAdditionalAttributes.Active)

	Sets
		Set10
			indexed
			Sort Order
				Company
				Customer
				TypeOfPayment
				PaymentNumber
				ReceivablePaymentHeader

		Set2
			indexed
			Sort Order
				Company
				ReceivablePaymentHeader
				TypeOfPayment
				PaymentNumber
				Customer

		Set3
			indexed
			Instance Selection
				where (IsUnassigned)
			Sort Order
				Company
				BankEntity
				BankAccountNumber
				ReceivablePaymentHeader
				ReceivablePayment

		Set4
			indexed
			Instance Selection
				where (IsOpenCustomerPayment)
			Sort Order
				Company
				CashCode
				GeneralLedgerDate
				ReceivablePaymentHeader
				ReceivablePayment

		Set5
			indexed
			Instance Selection
				where (IsNonAR)
			Sort Order
				Company
				CashCode
				GeneralLedgerDate
				ReceivablePaymentHeader
				ReceivablePayment

		Set6
			indexed
			Instance Selection
				where (IsBOEOrARPayment)
			Sort Order
				Company
				Customer
				GeneralLedgerDate
				ReceivablePaymentHeader
				ReceivablePayment

		Set7
			indexed
			Sort Order
				PaymentNumber
				Customer
				Company
				TypeOfPayment
				ReceivablePaymentHeader

		Set8
			indexed
			Instance Selection
				where (IsOpenOrNotHistorical)
			Sort Order
				Company
				Customer
				GeneralLedgerDate
				TypeOfPayment
				PaymentNumber
				ReceivablePaymentHeader

		Set9
			indexed
			Instance Selection
				where (IsUnreleasedOrOpen)
			Sort Order
				Company
				Customer
				GeneralLedgerDate
				ReceivablePaymentHeader
				ReceivablePayment

		ByDescendingPaymentHeader
			indexed
			Sort Order
				Company
				ReceivablePaymentHeader descending
				ReceivablePayment

		ByProject
			indexed
			Sort Order
				Project
				Company
				Customer
				ReceivablePaymentHeader
				ReceivablePayment

		ByTransactionAmount
			indexed
			Sort Order
				TransactionAmount
				Company
				ReceivablePaymentHeader
				ReceivablePayment

		ByReferenceNumber
			indexed
			Sort Order
				ReferenceNumber
				Company
				ReceivablePaymentHeader
				ReceivablePayment

		ByRebate
			Instance Selection
				where (HasRebates)
			Sort Order
				ContractRebateGroup.ContractGroup
				ContractRebateGroup.Contract
				ContractRebateGroup.ContractRebateType
				ContractRebateGroup.ContractRebateDue
				Company
				ReceivablePaymentHeader
				ReceivablePayment

		ByCurrencyCompanyCustomer
			duplicates
			Sort Order
				OriginalCurrency
				Company
				Customer


	Form Invokes
		Prepayment
			if (ReceivablePrepaymentRel exists)
				invoke Update ReceivablePrepaymentRel
			else
				invoke Create ReceivablePrepaymentRel


	Create Rules
		LocalCurrencyTable = ReceivablePaymentHeader.CurrencyTable

		if (TypeOfPayment.CustomerPayment)
			constraint (!ReceivablePaymentNumberRel exists)
				"PaymentNumberForCustomerAlreadyInBatch"
		else
			constraint (!DuplicatePaymentSet10Rel exists)
				"PaymentNumberAlreadyInUseForBatch"
		
		if (Company.UseIDM)
			IDMPrinter = Company.UserDefaultPrinterRel.IDMPrinter



	StateCycles
		ReceivablePaymentLifeCycle is a StateCycle

			state field is Status

			Unreleased is a State

				CreateCustomerPaymentFromCashApplication is a Create Action
					restricted
					Entrance Rules
						include CheckProject

					Action Rules
						constraint (Customer entered)
							"CustomerIsRequired"

						constraint (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
							"CannotAddPayment;BatchHasAlreadyBeenReleased"

						TypeOfPayment = TypeOfPayment.CustomerPayment







					Exit Rules
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= true
							invoked.AmountCompanyCurrency	= BaseAmount
							invoked.Amount					= TransactionAmount
							invoked.Count					= 1
							if (TypeOfPayment.CustomerPayment
							and Prepayment.NotAPrepay)
								invoked.RNA					= true

						include UpdateReceivableProjectTransaction



				CreateNonARCashPayment is a Create Action
					valid when (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
					Action Rules
						TypeOfPayment = TypeOfPayment.NonArPayment
						if (ReferenceNumber not entered)
							initialize ReferenceType







					Exit Rules
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= true
							invoked.AmountCompanyCurrency	= BaseAmount
							invoked.Amount					= TransactionAmount
							invoked.Count					= 1
							if (TypeOfPayment.CustomerPayment
							and Prepayment.NotAPrepay)
								invoked.RNA					= true

						include CreateDistributionFromDistributionCategory


				CreateEFTCustomerPaymentFromBatch is a Create Action
					restricted
					valid when (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
					Action Rules
						TypeOfPayment = TypeOfPayment.CustomerPayment
					Exit Rules
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= true
							invoked.AmountCompanyCurrency	= BaseAmount
							invoked.Amount					= TransactionAmount
							invoked.Count					= 1
							if (TypeOfPayment.CustomerPayment
							and Prepayment.NotAPrepay)
								invoked.RNA					= true

						include UpdateReceivableProjectTransaction
						CurrencyRate = ReceivablePaymentHeader.CurrencyRate


				CreateCustomerPayment is a Create Action
					valid when (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
					Action Rules
						TypeOfPayment = TypeOfPayment.CustomerPayment










					Exit Rules
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= true
							invoked.AmountCompanyCurrency	= BaseAmount
							invoked.Amount					= TransactionAmount
							invoked.Count					= 1
							if (TypeOfPayment.CustomerPayment
							and Prepayment.NotAPrepay)
								invoked.RNA					= true

						include UpdateReceivableProjectTransaction


						CurrencyRate = ReceivablePaymentHeader.CurrencyRate






				InterfaceCreate is a Create Action
					restricted
					Local Fields
						LocalExecute	is Boolean




					Entrance Rules
						constraint (TransactionAmount entered)
							"PaymentAmountRequired"

					Exit Rules
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= true
							invoked.AmountCompanyCurrency	= BaseAmount
							invoked.Amount					= TransactionAmount
							invoked.Count					= 1
							if (TypeOfPayment.CustomerPayment
							and Prepayment.NotAPrepay)
								invoked.RNA					= true

						include UpdateReceivableProjectTransaction

						if (TransientSeparatePaymentAmount > 0)
							invoke CreateProformaOverpayPayment
								invoked.PaymentAmount = TransientSeparatePaymentAmount


						if (TransientIDMUniqueID entered)
							IDMItemCopy.SourceIDMUniqueId 		= TransientIDMUniqueID
							IDMItemCopy.SourceDocumentType 		= TransientIDMDocumentType

							IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName  	= "Company"
							IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue  	= Company
							IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName  	= "ReceivablePaymentHeader"
							IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue  	= ReceivablePaymentHeader
							IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName  	= "ReceivablePayment"
							IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue  	= ReceivablePayment
							if (Customer entered)
								IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName  	= "Customer"
								IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue  	= Customer
							IDMItemCopy.DestinationAttributes	= IDMAttributes
							IDMItemCopy.DestinationDocumentType = "FSM_ReceivablePayment"
							IDMItemCopy.DestinationACL			= "CSFDefault"
							LocalNewIDMUniqueID					= IDMItemCopy.Execute
							if (LocalNewIDMUniqueID entered)
								InterfacePayment2IDMUniqueId = LocalNewIDMUniqueID

								IDMItem.DocumentType 		= TransientIDMDocumentType
								IDMItem.IDMUniqueId 		= TransientIDMUniqueID
								LocalExecute 				= IDMItem.Delete

				CreateProformaOverpayPayment is an Instance Action
					restricted
					Parameters
						PaymentAmount is like InternationalAmount
					Local Fields
						NextBatchNumber				is like BatchNumber
						ProformaOverPaymentHeader	is a ReceivablePaymentHeader view
					Action Rules
						if  (!Company.PaymentBatchNumbering)
							NextBatchNumber = last Company.ReceivablePaymentHeaderRel.ReceivablePaymentHeader + 1
						invoke OpenBatchUnreleased.Create ReceivablePaymentHeader
							assign result to ProformaOverPaymentHeader
							invoked.Company						= Company
							if  (!Company.PaymentBatchNumbering)
								invoked.ReceivablePaymentHeader		= NextBatchNumber
							invoked.ReceivableProcessLevel		= ReceivablePaymentHeader.ReceivableProcessLevel
							invoked.ReceivableLockBox			= ReceivablePaymentHeader.ReceivableLockBox
							invoked.DepositDate					= ReceivablePaymentHeader.DepositDate
							invoked.GeneralLedgerDate			= ReceivablePaymentHeader.GeneralLedgerDate
							invoked.CurrencyRate				= ReceivablePaymentHeader.CurrencyRate
							invoked.CbUserField1				= ReceivablePaymentHeader.CbUserField1
							invoked.CbUserField2				= ReceivablePaymentHeader.CbUserField2
							invoked.CbUserField3				= ReceivablePaymentHeader.CbUserField3
							invoked.CbUserField4				= ReceivablePaymentHeader.CbUserField4
							invoked.Reference					= ReceivablePaymentHeader.Reference
							invoked.DepositBankCode				= ReceivablePaymentHeader.DepositBankCode
							invoked.OriginatingInterfaceRun		= ReceivablePaymentHeader.OriginatingInterfaceRun
							invoked.BatchCount = 1
							invoked.BatchTotal = PaymentAmount

						invoke CreateCustomerPayment ReceivablePayment
							invoked.Company					= Company
							invoked.ReceivablePaymentHeader = ProformaOverPaymentHeader.ReceivablePaymentHeader
							invoked.TransactionAmount		= PaymentAmount
							invoked.PaymentNumber			= PaymentNumber
							invoked.DepositDate				= DepositDate
							invoked.GeneralLedgerDate		= GeneralLedgerDate
							invoked.ReceivableProcessLevel	= ReceivableProcessLevel
							invoked.CashCode				= CashCode
							invoked.Customer				= Customer
							invoked.BankEntity				= BankEntity
							invoked.BankAccountNumber		= BankAccountNumber
							invoked.OriginatingInterfaceRun	= OriginatingInterfaceRun
							invoked.ReferenceNumber			= ReferenceNumber

					Exit Rules

						invoke OpenBatchUnreleased.Release ProformaOverPaymentHeader.ReceivablePaymentHeader


				Delete is a Delete Action
					Entrance Rules


						constraint (!ReceivableApplicationRel exists)	
							"Cannot_Delete_at_least_one_Receivable_Application_exists."
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= true
							invoked.AmountCompanyCurrency	= BaseAmount * -1
							invoked.Amount					= TransactionAmount * -1
							invoked.Count					= -1
							if (TypeOfPayment.CustomerPayment
							and Prepayment.NotAPrepay)
								invoked.RNA					= true
					Action Rules
						invoke Delete NonARReceivableGLDistributionRel
						invoke Delete ReceivablePaymentRemittanceRel
						invoke Delete ReceivablePrepaymentRel
						invoke Delete ReceivableProjectTransactionRel
						invoke Purge PendingApplicationsRel
						invoke Purge PendingAdjustMemoRel
						invoke Purge PendingAdjustNonMemoRel
						for each UnpostedApplicationsAvailableToReverseRel
							if (each.Status.UnreleasedCashApplication)
								invoke UnreleasedCashApplication.Remove each
							else
							if (each.Status.RequiresAuditListing)
								invoke RequiresAuditListing.Remove each
							else
							if (each.Status.AvailableForPosting)
								invoke AvailableForPosting.Remove each


				Update is an Update Action
					valid when (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
					Entrance Rules
						LocalCurrencyTable = ReceivablePaymentHeader.CurrencyTable
						include CheckProject
					Action Rules
						include CommonEdits



						if (TypeOfPayment.NonArPayment   
							and PaymentNumber changed)
								invoke Update OldNonArDistribRel
									invoked.Invoice = PaymentNumber
						if (PaymentNumber changed)  
							invoke UpdateTransactionNumber OldCompanyCustomerCommentRel
								invoked.PrmTransaction = PaymentNumber

					Exit Rules
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= true
							invoked.AmountCompanyCurrency	= (BaseAmount - old BaseAmount)
							invoked.Amount					= (TransactionAmount - old TransactionAmount)
							if (TypeOfPayment.CustomerPayment
							and Prepayment.NotAPrepay)
								invoked.RNA					= true

						if (TypeOfPayment.CustomerPayment)
							include UpdateReceivableProjectTransaction

						include UpdatePrepayment

						include CreateDistributionFromDistributionCategory


				ReleaseBatch is an Instance Action
					valid when (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
					Action Rules
						invoke Release ReceivablePaymentHeader


				ProcessVertex is an Instance Action
					valid when (AllowProcessVertexInstanceAction)
					Action Rules
						constraint (!BackgroundProcessing.TaxProcessing)
							"Tax_processing_is_ongoing..._refresh_to_view_progress"






						BackgroundProcessing = BackgroundProcessing.TaxProcessing

						invoke VertexCreateTaxLineItemsNonARPayments ReceivablePayment
							invoked.PrmCompany						= Company
							invoked.PrmHeader						= ReceivablePaymentHeader
							invoked.PrmReceivablePayment	    	= ReceivablePayment
							invoked.PrmReleaseBatch					= false


				ProcessOneSource is an Instance Action
					valid when (AllowProcessOneSourceInstanceAction)
					Action Rules
						constraint (!BackgroundProcessing.TaxProcessing)
							"Tax_processing_is_ongoing..._refresh_to_view_progress"






						BackgroundProcessing = BackgroundProcessing.TaxProcessing

						invoke CreateTaxLineItemsNonARPayments ReceivablePayment
							invoked.PrmCompany						= Company
							invoked.PrmHeader						= ReceivablePaymentHeader
							invoked.PrmReceivablePayment	    	= ReceivablePayment
							invoked.PrmReleaseBatch					= false


				DerivePaymentAmount is an Instance Action
					valid when (AllowDerivePaymentAmount)
					completion message is "PaymentAmountTotaledFromDistributions"
					Action Rules
						invoke Update
							invoked.TransactionAmount = SumOfDistributions

						constraint (TransactionAmount > 0)
							"SummedDistributionsAmountsAreNegative/Zero;CannotDerivePaymentAmount"


				CreateDistribution is an Instance Action
					valid when (ReceivablePaymentHeader.Status.OpenBatchUnreleased)
					Parameters
						Company											is a ReceivableCompany
						PrmGeneralLedgerAccount							is a FinanceCodeBlock	
							default label is "GlobalLedgerAccount"
						GeneralLedgerDate								is Date
							default label is "GlobalLedgerDate"
						EnterableAmount									is an InternationalAmount
						ReceivableDistributionCategory
						TaxCode
						Units											is a Unit
					Parameter Rules
						EnterableAmount
							required
					Action Rules
						invoke CreatePaymentDistribution ReceivableGLDistribution
							invoked.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.BatchNumber													= ReceivablePaymentHeader
							invoked.SequenceNumber												= ReceivablePayment
							invoked.ReceivableCompanyGroup.GlCompany							= Company
							invoked.ReceivableCompanyDataGroup.TransactionCompany				= Company
							invoked.ReceivableCompanyGroup.OriginCompany						= Company
							invoked.ReceivableGLDistribution.GeneralLedgerAccount				= PrmGeneralLedgerAccount
							invoked.GeneralLedgerDate											= GeneralLedgerDate
							invoked.DistributionAmount.CurrencyAmount							= EnterableAmount
							invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory	= ReceivableDistributionCategory
							invoked.AdditionalTaxCode											= TaxCode
							invoked.Units														= Units





				EditRelease is an Instance Action
					restricted
					Action Rules
						include EditRelease


				Release is an Instance Action
					restricted
					Local Fields
						PaymentVATAmount					is an CurrencyAmount
						LocalVATAmount						is an CurrencyAmount
						LocalVATRate						is Percent size 8.5
						LocalPrepaymentTaxRate				is Percent size 7.5		
						LocalOriginalCurrency				is a FromCurrency		
						LocalPrepaymentTaxAmount			is a CurrencyAmount		
						LocalBeforeGSTAmount				is a CurrencyAmount		
					Action Rules
						include EditRelease

						include ProcessRelease

					Exit Rules
						if (TypeOfPayment.CustomerPayment)
							LocalVATRate														= ReceivablePrepaymentRel.ProformaInvoiceRel.DerivedVATRate
							LocalVATAmount														= (LocalVATRate * TransactionAmount * 100)
							PaymentVATAmount													= LocalVATAmount/(100+(LocalVATRate*100))

							if (ReceivablePrepaymentRel.ReferenceType.ProformaInvoice and PaymentVATAmount entered)
								invoke CreatePaymentDistribution ReceivableGLDistribution
									invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
									invoked.ReceivableCompanyGroup.OriginCompany				= Company
									invoked.BatchNumber											= ReceivablePaymentHeader
									invoked.SequenceNumber										= ReceivablePayment
									invoked.AccumulationType									= "D"
									invoked.DocumentNumber										= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
									invoked.ReceivableGLDistribution.GeneralLedgerAccount		= ReceivableProcessLevel.ProformaTaxInvoiceCode.DistributionAccount
									invoked.Description											= "Batch " + ReceivablePaymentHeader + " Proforma Tax Invoice Account"
									invoked.BypassStructureRelationEdit							= true 
									invoked.ReceivableCompanyGroup.GlCompany					= Company
									invoked.DistributionAmount.CurrencyAmount					= PaymentVATAmount * -1
									invoked.OriginalCurrency									= OriginalCurrency
									invoked.CurrencyRate										= CurrencyRate
									invoked.Status												= 2
									invoked.GeneralLedgerDate									= GeneralLedgerDate
									invoked.TransType											= "P"
									invoked.Invoice												= PaymentNumber
									invoked.ReceivableCompanyDataGroup.Customer					= Customer

								invoke CreatePaymentDistribution ReceivableGLDistribution
									invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
									invoked.ReceivableCompanyGroup.OriginCompany				= Company
									invoked.BatchNumber											= ReceivablePaymentHeader
									invoked.SequenceNumber										= ReceivablePayment
									invoked.AccumulationType									= "D"
									invoked.DocumentNumber										= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
									invoked.ReceivableGLDistribution.GeneralLedgerAccount		= Company.BillingCompanyRel.VATOutputOffset
									invoked.Description											= "Batch " + ReceivablePaymentHeader + " VAT Output Offset"
									invoked.BypassStructureRelationEdit							= true 
									invoked.ReceivableCompanyGroup.GlCompany					= Company
									invoked.DistributionAmount.CurrencyAmount					= PaymentVATAmount
									invoked.OriginalCurrency									= OriginalCurrency
									invoked.CurrencyRate										= CurrencyRate
									invoked.Status												= 2
									invoked.GeneralLedgerDate									= GeneralLedgerDate
									invoked.TransType											= "P"
									invoked.Invoice												= PaymentNumber
									invoked.ReceivableCompanyDataGroup.Customer					= Customer


							if (IsPrepaymentTaxWithHolding
							and Customer entered)
								initialize CalculateTax
								CalculateTax.TaxEntity					= Company.AccountingEntity
								CalculateTax.TaxCode					= Company.PrepaymentTaxCode
								CalculateTax.TaxDate					= DepositDate
								CalculateTax.BypassMemberEdit			= true 
								CalculateTax.Function					= "I"
								LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
								
								LocalNumberOfDecimals = OriginalCurrency.NumberOfDecimals
								LocalPrepaymentTaxRate		= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate
								LocalBeforeGSTAmount 		= TransactionAmount / (1 + LocalPrepaymentTaxRate)
								round LocalBeforeGSTAmount to nearest DerivedLocalRoundTo
								LocalPrepaymentTaxAmount	= TransactionAmount - LocalBeforeGSTAmount
								round LocalPrepaymentTaxAmount to nearest DerivedLocalRoundTo
								
								invoke CreatePaymentDistribution ReceivableGLDistribution
									invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
									invoked.ReceivableCompanyGroup.OriginCompany				= Company
									invoked.BatchNumber											= ReceivablePaymentHeader
									invoked.SequenceNumber										= ReceivablePayment
									invoked.AccumulationType									= "D"
									invoked.DocumentNumber										= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
									invoked.ReceivableGLDistribution.GeneralLedgerAccount		= CalculateTax.TaxTable.TaxTableOutput[1].TaxOutputAccount
									invoked.Description											= "Batch " + ReceivablePaymentHeader + " Prepayment Tax Output Account"
									invoked.BypassStructureRelationEdit							= true 
									invoked.ReceivableCompanyGroup.GlCompany					= Company
									invoked.DistributionAmount.CurrencyAmount					= LocalPrepaymentTaxAmount * -1
									invoked.OriginalCurrency									= OriginalCurrency
									invoked.CurrencyRate										= CurrencyRate
									invoked.Status												= 2
									invoked.GeneralLedgerDate									= GeneralLedgerDate
									invoked.TransType											= "P"
									invoked.Invoice												= PaymentNumber
									invoked.ReceivableCompanyDataGroup.Customer					= Customer
									invoked.TransientPrepaymentTax								= true
									invoked.TaxCode												= Company.PrepaymentTaxCode
									invoked.TransactionTaxableAmount							= LocalBeforeGSTAmount	* -1
									invoked.TransientTransactionTaxAmount						= LocalPrepaymentTaxAmount	* -1

								initialize CalculateTax
								invoke CreatePaymentDistribution ReceivableGLDistribution
									invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
									invoked.ReceivableCompanyGroup.OriginCompany				= Company
									invoked.BatchNumber											= ReceivablePaymentHeader
									invoked.SequenceNumber										= ReceivablePayment
									invoked.AccumulationType									= "D"
									invoked.DocumentNumber										= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
									invoked.ReceivableGLDistribution.GeneralLedgerAccount		= Company.PrepaymentTaxControlGLAccount
									invoked.Description											= "Batch " + ReceivablePaymentHeader + " Prepayment Tax Control GL Account"
									invoked.BypassStructureRelationEdit							= true 
									invoked.ReceivableCompanyGroup.GlCompany					= Company
									invoked.DistributionAmount.CurrencyAmount					= LocalPrepaymentTaxAmount
									invoked.OriginalCurrency									= OriginalCurrency
									invoked.CurrencyRate										= CurrencyRate
									invoked.Status												= 2
									invoked.GeneralLedgerDate									= GeneralLedgerDate
									invoked.TransType											= "P"
									invoked.Invoice												= PaymentNumber
									invoked.ReceivableCompanyDataGroup.Customer					= Customer
									invoked.TransientPrepaymentTax								= false	

								invoke FastUpdate ReceivablePrepaymentRel
									invoked.AccruedTaxAmount	= LocalPrepaymentTaxAmount
							
							if (Customer not entered)
								make transition to ReleasedUnassigned
							else
								if (IsZeroPayment)
									if  (!HasApplications)
										make transition to Open
									else
										include UpdateForeignTradeAndPayments
										make transition to FullyApplied
								else
								if (PaymentOpenCompanyCurrency not entered
								or  PaymentOpen				   not entered)
									include UpdateForeignTradeAndPayments
									make transition to FullyApplied
								else
									make transition to Open
						else
							make transition to Open
						if (ReceivableProjectTransactionRel exists)
							include UpdateReceivableProjectTransaction
						invoke ProcessPrepayments ReceivablePrepaymentRel.ProformaInvoiceRel
						invoke TriggerReceivableTracker


















				CashOffset is an Instance Action
					restricted
					Parameters
						CashOffsetCode				is a ReceivableGeneralLedgerCode
					Parameter Rules
						CashOffsetCode
							initial value is ReceivedNotAppliedReceivableGeneralLedgerCode
							required
					Action Rules
						constraint (!ReceivablePrepaymentRel exists)
							"CannotUseCashOffsetIfPrepaymentExists"
						ReceivedNotAppliedReceivableGeneralLedgerCode = CashOffsetCode
					Exit Rules
						if (ReceivedNotAppliedReceivableGeneralLedgerCode changed)
							if  (old ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode != ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
							and  ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode = ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode)
								invoke UpdateBatchTotals ReceivablePaymentHeader
									invoked.Detail					= false
									invoked.RNA						= true
									invoked.AmountCompanyCurrency	= ReceivablePayment.BaseAmount
									invoked.Amount					= ReceivablePayment.TransactionAmount

							if  (ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode != ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
							and  old ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode = ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode)
								invoke UpdateBatchTotals ReceivablePaymentHeader
									invoked.Detail					= false
									invoked.RNA						= true
									invoked.AmountCompanyCurrency	= ReceivablePayment.BaseAmount * -1
									invoked.Amount					= ReceivablePayment.TransactionAmount * -1


				ProcessSelections is an Instance Action
					valid when (HasPendingTransactions) 
					Action Rules





						include EditProcessSelections

					Exit Rules
						if  (SelectCounter > NumberOfLinesForSetAction)
							BackgroundProcessing = BackgroundProcessing.ProcessSelections
							invoke ProcessSelectionsBatch ReceivableApplicationSelect
								invoked.PrmCompany					= Company
								invoked.PrmReceivablePaymentHeader	= ReceivablePaymentHeader
								invoked.PrmReceivablePayment		= ReceivablePayment
						else
							include ProcessSelections
							invoke TriggerReceivableTracker









				ToleranceCheck is an Instance Action
					restricted
					Action Rules
						include ToleranceCheck


				ClearSelections is an Instance Action
					completion message is "RecordsHaveBeenUnselected"
					valid when (AllowClearSelections)
					Action Rules
						for each ReceivableApplicationSelectRel
							invoke Unselect each.ReceivableInvoiceDetailRel

						invoke Purge ReceivableApplicationAdjustmentSelectRel


				TransactionRangeSelection is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (AllowTransactionRangeApplication)
					Parameters
						ReceivableTransactionRangeApplication
					Action Rules
						constraint (TransactionAmount entered)
							"CannotPerforRangeSelectionOnAZeroAmountPayment"
						ReceivableTransactionRangeApplication.SelectOrApply										= "S"
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.Company					= ReceivablePayment.Company
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePaymentHeader	= ReceivablePaymentHeader
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePayment			= ReceivablePayment
						if (ReceivableTransactionRangeApplication.SelectAndApplyTransactions entered)
							constraint (ReceivableTransactionRangeApplication.ErrorMessage not entered)
								"<ReceivableTransactionRangeApplication.ErrorMessage>"

						CompletionMessage = ReceivableTransactionRangeApplication.ResultMessage


				TransactionRangeProjectSelection is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (AllowTransactionRangeApplication)
					Parameters
						ReceivableTransactionRangeApplication
					Action Rules
						constraint (TransactionAmount entered)
							"CannotPerforRangeSelectionOnAZeroAmountPayment"
						ReceivableTransactionRangeApplication.SelectOrApply										= "S"
						ReceivableTransactionRangeApplication.ProjectFilter										= true
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.Company					= ReceivablePayment.Company
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePaymentHeader	= ReceivablePaymentHeader
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePayment			= ReceivablePayment
						if (ReceivableTransactionRangeApplication.SelectAndApplyTransactions entered)
							constraint (ReceivableTransactionRangeApplication.ErrorMessage not entered)
								"<ReceivableTransactionRangeApplication.ErrorMessage>"

						CompletionMessage = ReceivableTransactionRangeApplication.ResultMessage


				TransactionRangeApplication is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (AllowTransactionRangeApplication)
					Parameters
						ReceivableTransactionRangeApplication
					Entrance Rules
						constraint (TransactionAmount entered)
							"CannotPerforRangeApplicationOnAZeroAmountPayment"

						LocalInvoiceRange.FromInvoice	= ReceivableTransactionRangeApplication.InvoiceRange.FromInvoice
						LocalInvoiceRange.ToInvoice		= ReceivableTransactionRangeApplication.InvoiceRange.ToInvoice
					Action Rules
						ReceivableTransactionRangeApplication.SelectOrApply										= "A"
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.Company					= ReceivablePayment.Company
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePaymentHeader	= ReceivablePaymentHeader
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePayment			= ReceivablePayment
						if (ReceivableTransactionRangeApplication.SelectAndApplyTransactions entered)
							constraint (ReceivableTransactionRangeApplication.ErrorMessage not entered)
								"<ReceivableTransactionRangeApplication.ErrorMessage>"

						CompletionMessage = ReceivableTransactionRangeApplication.ResultMessage


				DateOrRateChange is an Update Action  
					restricted
					Action Rules

						LocalCurrencyTable					= ReceivablePaymentHeader.CurrencyTable
						OriginalCurrency					= ReceivablePaymentHeader.Currency
						CurrencyRate						= ReceivablePaymentHeader.CurrencyRate
						DepositDate							= ReceivablePaymentHeader.DepositDate
						GeneralLedgerDate					= ReceivablePaymentHeader.GeneralLedgerDate

						LocalBaseAmount.ToCurrency			= Company.Currency
						LocalBaseAmount.EnteredCurrencyRate = ReceivablePaymentHeader.CurrencyRate
						BaseAmount							= LocalBaseAmount.OutputCurrencyAmount

						if (TypeOfPayment.NonArPayment)
							for each NonARReceivableGLDistributionRel
								BalancingDistributionAmountCompanyCurrency -= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount

								invoke Update each
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = ReceivablePaymentHeader.CurrencyRate
									invoked.GeneralLedgerDate										= ReceivablePaymentHeader.GeneralLedgerDate

								BalancingDistributionAmountCompanyCurrency += each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount






					Exit Rules
						include UpdateReceivableProjectTransaction
						include UpdatePrepayment


				DeleteAllApplications is an Instance Action
					default label is "DeleteAllUnpostedApplications"
					valid when (HasApplications)
					Action Rules
						include DeleteAllApplications

				FrontEndSplitNonARCashDistributions is an Instance Action
					default label is "FrontEndSplitDistributions"
					valid when(AllowNonARCashFrontEndSplit)
					Action Rules
						invoke FrontEndSplitDistributions ReceivableGLDistribution in foreground
							invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmCompany					= Company
							invoked.PrmBatchNumber				= ReceivablePaymentHeader
							invoked.PrmTransType				= TypeOfPayment
							invoked.PrmInvoice					= PaymentNumber

				DeleteFrontEndSplitNonARCashDistributions is an Instance Action
					default label is "DeleteFrontEndSplitDistributions"
					valid when(HasNonARCashFrontEndSplitDistributions)
					Action Rules
						invoke DeleteFrontEndSplitDistributions ReceivableGLDistribution
							invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmCompany					= Company
							invoked.PrmBatchNumber				= ReceivablePaymentHeader
							invoked.PrmTransType				= TypeOfPayment
							invoked.PrmInvoice					= PaymentNumber

			ReleasedUnassigned is a State

				Update is an Update Action
					Entrance Rules
						LocalCurrencyTable = ReceivablePaymentHeader.CurrencyTable
						include CheckProject
					Action Rules
						include CommonEdits



						if (BaseAmount changed
						or  TransactionAmount changed)
							invoke UpdateBatchTotals ReceivablePaymentHeader
								invoked.Detail					= true
								invoked.AmountCompanyCurrency	= (BaseAmount - old BaseAmount)
								invoked.Amount					= (TransactionAmount - old TransactionAmount)
								if (Prepayment.NotAPrepay)
									invoked.RNA					= true


						if (Customer entered and old Customer not entered)

							constraint (TransactionAmount entered)
								"CannotChangeCustomerOnAZeroAmountPayment"
							if (DepositDate > CompanyCustomerRel.LastPaymentDate)
								invoke UpdateCurrentBalance CompanyCustomerRel
									invoked.ChangeAmount						= BaseAmount * -1 
									invoked.TransactionDate						= DepositDate
									invoked.CheckLastPaymentDate				= DepositDate
									invoked.CheckLastPaymentAmount				= BaseAmount
									invoked.PrmBalanceType						= 2	
									invoked.PrmReference						= Reference
							else
								invoke UpdateCurrentBalance CompanyCustomerRel
									invoked.ChangeAmount						= BaseAmount * -1 
									invoked.TransactionDate						= DepositDate
									invoked.PrmBalanceType						= 2	
									invoked.PrmReference						= Reference


							if  (BaseAmount entered)
								invoke UpdatePeriodTotals CompanyCustomerRel
									invoked.Type									= "P"
									invoked.Amount									= BaseAmount
									invoked.EffectiveDate							= GeneralLedgerDate

							include UpdateReceivableProjectTransaction
							make transition to Open

					Exit Rules
						include UpdatePrepayment


				AssignCustomer is an Instance Action
					Parameters
						PrmCustomer 			is a Customer
							default label is "Customer"
						PrmBankEntity			is a BankEntity
							default label is "ExternalBankEntity"
						PrmBankAccountNumber	is a BankAccountNumber
							default label is "BankAccountNumber"
					Action Rules
						constraint (PrmCustomer entered
						or		    PrmBankEntity entered
						or			PrmBankAccountNumber entered)
							"MustEnter_CustomerOr_External_Bank_EntityAnd_Bank_Account_Number"

						invoke ReleasedUnassigned.Update
							invoked.Customer 			= PrmCustomer
							invoked.BankEntity			= PrmBankEntity
							invoked.BankAccountNumber	= PrmBankAccountNumber


				TransferToNonAR is an Instance Action		
					valid when (AllowTransferToNonAR)

					Parameters
						NonARTransferDate				is Date
						PrmReceivableDistributionArray	is a ReceivableDistributionArray

						PrmTransactionCodeBlock1			is a TransactionCodeBlock	
						PrmTransactionCodeBlock2			is a TransactionCodeBlock
						PrmTransactionCodeBlock3			is a TransactionCodeBlock
						PrmTransactionCodeBlock4			is a TransactionCodeBlock
						PrmTransactionCodeBlock5			is a TransactionCodeBlock
						PrmTransactionCodeBlock6			is a TransactionCodeBlock
						PrmTransactionCodeBlock7			is a TransactionCodeBlock
						PrmTransactionCodeBlock8			is a TransactionCodeBlock
						PrmTransactionCodeBlock9			is a TransactionCodeBlock
						PrmTransactionCodeBlock10			is a TransactionCodeBlock


					Parameter Rules
						NonARTransferDate
							initial value is DerivedGeneralLedgerDate	
							default to DerivedGeneralLedgerDate	
						
						PrmTransactionCodeBlock1	
							BypassProjectDateEdit = true	







						PrmReceivableDistributionArray 
							LocalGeneralLedgerSystemCode = "AR"	
							BypassProjectDateEdit = true	
							initialize I1
							initialize I2
							I1 += 1
							while (I1 < 11)
								if (I1=1)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock1
								else
								if (I1=2)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock2
								else
								if (I1=3)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock3
								else
								if (I1=4)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock4
								else
								if (I1=5)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock5
								else
								if (I1=6)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock6
								else
								if (I1=7)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock7
								else
								if (I1=8)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock8
								else
								if (I1=9)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock9
								else
								if (I1=10)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock10

								if (I2 >= 1
								and PrmReceivableDistributionArray.ReceivableDistributionInput[I1] entered)
									initialize I3
									I3 = I2
									constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionAmount entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Description entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TaxCode entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionTaxableAmount entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Units entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].FinanceCodeBlock entered)
										"Occurrence<I3>MustHaveTheValueEntered"
								I2 = I1
								I1 += 1

					Entrance Rules
						initialize LocalCustomer
						LocalTypeOfPayment				= "N"
						constraint (!LocalPaymentNumberRel exists)
							"NonARPaymentAlreadyExists-CannotTransfer"
						LocalGeneralLedgerSystemCode = "AR"	

					Action Rules

						constraint (!IsPrepaymentTaxWithHolding)			
							"CannotTransfer;PrepaymentTaxRecordsExists"
						constraint (TransactionAmount entered)
							"CannotTransferAZeroAmountPayment"
						constraint (AppliedAmount = 0)
							"CannotTransfer;PaymentApplicationAmountNotEqualToZero"
						for each ReceivableApplicationRel
							constraint (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount !< 0 or each.ApplicationSource.ReversalOfApplications)
								"MemoChargebackExists,CannotTransfer"
						constraint (!CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward or LastStatementDate = 0)
							"CannotTransferOrReassign,PaymentHasAppearedOnStatement"
						constraint (!ReceivablePaymentApplyReverseDetailRel exists)
							"PendingReversalExists,CannotTransfer"
						constraint (!ReceivableInvoiceApplyReverseDetailRel exists)
							"PendingReversalExists,CannotTransfer"
						if (Company.DetailedRNADistributions)
							if (!CashDetailState.None)
								constraint (CashDetailState.Released)
									"Cash_\DetailsMustBeReleased"




						initialize WorkTotal
						I1 = 1
						while (I1 < 11)
							if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionCompany entered
							or  PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered)
									"AccountIsRequired"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
									"TransactionAmountIsRequired"

								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals not > CurrencyDecimalsNumber)
									"TransactionAmountHasTooManyDecimals<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals>vs<CurrencyDecimalsNumber>"

								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount decimals not > CurrencyDecimalsNumber)
									"TransactionTaxableAmountHasTooManyDecimals<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals>vs<CurrencyDecimalsNumber>"

								WorkTotal += PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount
								PrmReceivableDistributionArray.ReceivableDistributionInput[I1].GeneralLedgerDate = NonARTransferDate

								if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount not entered)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount = PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount

								if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TaxCode entered)
									LocalTaxCode		= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TaxCode
									LocalTaxableAmount	= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount
									include CalculateTaxRule



							I1 +=1

						constraint (WorkTotal = TransactionAmount)
							"Distributions<WorkTotal>NotEqualToPayment<TransactionAmount>"


						invoke CreatePaymentDistribution ReceivableGLDistribution
							invoked.FinanceEnterpriseGroup								= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ReceivableCompanyDataGroup.TransactionCompany		= Company
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableProcessLevel
							invoked.BatchNumber											= ReceivablePaymentHeader
							invoked.SequenceNumber										= ReceivablePayment
							invoked.ReceivableCompanyGroup.GlCompany					= Company 
							invoked.ReceivableGLDistribution.GeneralLedgerAccount		= ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount 
							invoked.DistributionAmount.CurrencyAmount					= TransactionAmount
							invoked.Description											= "Batch " + ReceivablePaymentHeader + " transfer to Non AR"
							invoked.BypassStructureRelationEdit							= true 
							invoked.BypassProjectDateEdit								= true	
							invoked.DocumentNumber										= "13-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
							invoked.Status												= 2
							invoked.GeneralLedgerDate									= NonARTransferDate
							invoked.TransactionDate										= NonARTransferDate
							invoked.OriginalCurrency									= OriginalCurrency
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
							invoked.CurrencyDecimalsNumber								= CurrencyDecimalsNumber


						LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.NonArPaymentsEntered
						if (!ReceivableTransactionSummaryRel exists)
							invoke Create ReceivableTransactionSummaryRel
						invoke AddAmount ReceivableTransactionSummaryRel
							invoked.Amount					+= BaseAmount

						LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.PaymentsCharges
						if (!ReceivableTransactionSummaryRel exists)
							invoke Create ReceivableTransactionSummaryRel
						invoke AddAmount ReceivableTransactionSummaryRel
							invoked.Amount					= BaseAmount * -1


						invoke Delete ReceivablePrepaymentRel
						invoke PaymentTransferDelete ReceivablePaymentRemittanceRel


						invoke UpdateCurrentBalance CompanyCustomerRel
							invoked.ChangeAmount					= BaseAmount
							invoked.TransactionDate					= DepositDate
							invoked.PrmBalanceType					= 2	
							invoked.PrmReference					= Reference

						invoke UpdatePeriodTotals CompanyCustomerRel
							invoked.Type							= "P"
							invoked.Amount							= BaseAmount
							invoked.EffectiveDate					= GeneralLedgerDate

						TransferDate								= NonARTransferDate
						TransferredFromCustomer						= Customer
						TransferAmountTransactionCurrency			= TransactionAmount
						include UpdateForeignTradeAndPayments
						make transition to FullyApplied

						if (ReceivableProjectTransactionRel exists)
							invoke Update ReceivableProjectTransactionRel
								invoked.CancelDate				= NonARTransferDate
								invoked.Status					= 7

						invoke CreateNonARViaTransfer
							assign result to NewPayment
							fill in fields from this instance
								except invoked.TransientOpenOnlyStatus	
								except invoked.CashDetailState
							initialize invoked.TransferAmountTransactionCurrency
							invoked.LocalPaymentNonAR						= ReceivablePayment
							invoked.TransferDate							= NonARTransferDate
							invoked.TransferredFromCustomer					= Customer
							invoked.ReceivableDistributionArray				= PrmReceivableDistributionArray

						if (Company.DetailedRNADistributions)
							include TransferCashDetailsToNonAR

					Exit Rules
						invoke FastUpdate ReceivablePaymentHeader
							invoked.bod id.VariationID += 1


				CreateNonARViaTransfer is a Create Action		
					restricted
					Local Fields
						NewCompanyCustomerComment	is a CompanyCustomerComment view
					Entrance Rules
						BypassGLDateForceDefault = true
						GeneralLedgerDate = TransferDate
						TypeOfPayment	= TypeOfPayment.NonArPayment
						initialize Customer
						LocalGeneralLedgerSystemCode = "AR"	

					Exit Rules
						for each LocalPaymentNonAR.CompanyCustomerCommentRel
							invoke CreateNonARPaymentComment CompanyCustomerComment
								assign result to NewCompanyCustomerComment
								fill in fields from each
									except invoked.Customer
							for each each.CompanyCustomerCommentAttachmentRel
								invoke Create CompanyCustomerCommentAttachment
									fill in fields from each
										except invoked.Customer
									invoked.Company					= Company
									invoked.CompanyCustomerComment	= NewCompanyCustomerComment.CompanyCustomerComment
							invoke Delete each

						for each LocalPaymentNonAR.ReceivablePaymentAttachmentRel
							invoke Create ReceivablePaymentAttachment
								invoked.ReceivablePaymentHeader	= this instance.ReceivablePaymentHeader
								invoked.ReceivablePayment 		= this instance.ReceivablePayment
								fill in fields from each
							invoke Delete each


						constraint (TransactionAmount entered)
							"CannotCreateNonARViaTransferForAZeroAmountPayment"

						I1 = 1
						while (I1 < 11)	
							if (ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionCompany entered
							or  ReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered
							or ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								invoke CreatePaymentDistribution ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup								= this instance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany		= this instance.Company
									invoked.BatchNumber											= this instance.ReceivablePaymentHeader
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= this instance.ReceivableProcessLevel
									invoked.SequenceNumber										= this instance.ReceivablePayment
									invoked.ReceivableCompanyGroup.GlCompany					= Company 
									invoked.ReceivableGLDistribution.GeneralLedgerAccount		= ReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock
									invoked.ReceivableGLDistribution.GeneralLedgerDate			= ReceivableDistributionArray.ReceivableDistributionInput[I1].GeneralLedgerDate
									invoked.DistributionAmount.CurrencyAmount					= ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount * -1
									invoked.TransactionTaxableAmount							= ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount
									invoked.Description											= ReceivableDistributionArray.ReceivableDistributionInput[I1].Description
									if (ReceivableDistributionArray.ReceivableDistributionInput[I1].Description not entered)
										invoked.Description										= "Batch " + this instance.ReceivablePaymentHeader + " transfer to Non AR"
									invoked.TaxCode												= ReceivableDistributionArray.ReceivableDistributionInput[I1].TaxCode  

									invoked.TransactionTaxableAmount							= ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount * -1
									invoked.Units												= ReceivableDistributionArray.ReceivableDistributionInput[I1].Units
									invoked.BypassProjectDateEdit								= true	
									invoked.DocumentNumber										= "13-" + this instance.ReceivablePaymentHeader.PaymentHeaderString + "-" + this instance.PaymentString
									invoked.Status												= 2
									invoked.TransactionDate										= TransferDate
									invoked.OriginalCurrency									= OriginalCurrency
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
									invoked.CurrencyDecimalsNumber								= CurrencyDecimalsNumber
							I1 +=1	


						if (Company.FinanceEnterpriseGroup.FundAccounting)  
							include FundAccountingTransferToNonAR


			Open is a State

				Create is a Create Action
					restricted


				Delete is a Delete Action   
					restricted


				Update is an Update Action
					Action Rules
						LocalCurrencyTable = ReceivablePaymentHeader.CurrencyTable
						include CommonEdits
						if (TypeOfPayment.CustomerPayment)
							include UpdateReceivableProjectTransaction

					Exit Rules
						if (BaseAmount changed or TransactionAmount changed)
							invoke UpdateBatchTotals ReceivablePaymentHeader
								invoked.Detail					= true
								invoked.AmountCompanyCurrency	= (BaseAmount - old BaseAmount)
								invoked.Amount					= (TransactionAmount - old TransactionAmount)
								if (Prepayment.NotAPrepay)
									invoked.RNA					= true

						include UpdatePrepayment


				ProcessSelections is an Instance Action
					valid when (HasPendingTransactions) 
					Action Rules
						include EditProcessSelections

					Exit Rules

						if  (SelectCounter > NumberOfLinesForSetAction)
							BackgroundProcessing = BackgroundProcessing.ProcessSelections
							invoke ProcessSelectionsBatch ReceivableApplicationSelect
								invoked.PrmCompany					= Company
								invoked.PrmReceivablePaymentHeader	= ReceivablePaymentHeader
								invoked.PrmReceivablePayment		= ReceivablePayment
						else
							include ProcessSelections
							invoke TriggerReceivableTracker








				UpdateZeroPaymentToHistorical is an Instance Action	
					valid when (IsZeroPayment)	

					Entrance Rules
						constraint (IsOpenCustomerPayment)	
							"Receivable_\Payment_\Number<PaymentNumber>ForCompany<Company>IsNotAnOpenCustomerPayment.CannotUpdatePaymentToHistorical."
						constraint (IsZeroPayment)	
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>IsNotAZeroPayment.CannotUpdatePaymentToHistorical."
						constraint (!HasPendingApplications)	
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasPendingApplication.CannotUpdatePaymentToHistorical."
						constraint (!HasSelectApplications)	//when (first ReceivableApplicationSelectRel exists)	//This really shouldn't get hit as the Status of the Receivable Payment gets switched to "Fully Applied"
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasSelectApplications.CannotUpdatePaymentToHistorical."
						constraint (!HasSelectAdjustments)	//when (first ReceivableApplicationAdjustmentSelectRel exists)	//This really shouldn't get hit as the Status of the Receivable Payment gets switched to "Fully Applied"
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasSelectAdjustments.CannotUpdatePaymentToHistorical."
						constraint (!ReceivablePaymentApplyReverseHeaderRel exists)	//This really shouldn't get hit as the Status of the Receivable Payment is still "Fully Applied" until the Reversal is Released.
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasPendingReversal.CannotUpdatePaymentToHistorical."
						constraint (!HasARtoAPSelect)	
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasPendingAPTransfer.CannotUpdatePaymentToHistorical."
						constraint (!HasRTMs)	
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasPendingRTMPayment.CannotUpdatePaymentToHistorical."
						constraint (!ApplicationAmountEntered)	//when (ReceivablePayment.BaseAppliedAmount entered or ReceivablePayment.BaseCreditAppliedAmount entered or ReceivablePayment.BaseAdjustAmount entered)	//This really shouldn't get hit as the Status of the Receivable Payment is "Fully Applied"
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasApplications.CannotUpdatePaymentToHistorical."
						constraint (!HasPendingReversal)	//when (HasReverseDetail or HasReceivableInvoiceReverseDetail)	//This really shouldn't get hit as the Status of the Receivable Payment is still "Fully Applied" until the Reversal is Released.
							"Receivable_\Payment_\Number<PaymentNumber>For_\Company<Company>And_\Customer<Customer>HasPendingReversal.CannotUpdatePaymentToHistorical."

					Action Rules
						make transition to Historical


				ToleranceCheck is an Instance Action
					restricted
					Action Rules
						include ToleranceCheck


				ClearSelections is an Instance Action
					completion message is "RecordsHaveBeenUnselected"
					valid when (AllowClearSelections)
					Action Rules
						for each ReceivableApplicationSelectRel
							invoke Unselect each.ReceivableInvoiceDetailRel

						invoke Purge ReceivableApplicationAdjustmentSelectRel


				PaymentWriteOff is an Instance Action
					valid when (AllowPaymentWriteOff)	
					Parameters
						PrmOperator								is like ReceivableOperator
						PrmGeneralLedgerDate					is Date
							default label is "GlobalLedgerDate"
						PrmReceivableDistributionArray			is a ReceivableDistributionArray

						PrmTransactionCodeBlock1			is a TransactionCodeBlock	
						PrmTransactionCodeBlock2			is a TransactionCodeBlock
						PrmTransactionCodeBlock3			is a TransactionCodeBlock
						PrmTransactionCodeBlock4			is a TransactionCodeBlock
						PrmTransactionCodeBlock5			is a TransactionCodeBlock
						PrmTransactionCodeBlock6			is a TransactionCodeBlock
						PrmTransactionCodeBlock7			is a TransactionCodeBlock
						PrmTransactionCodeBlock8			is a TransactionCodeBlock
						PrmTransactionCodeBlock9			is a TransactionCodeBlock
						PrmTransactionCodeBlock10			is a TransactionCodeBlock


					Parameter Rules
						PrmGeneralLedgerDate
							initial value is DerivedGeneralLedgerDate
							default to DerivedGeneralLedgerDate
						PrmOperator
							default to actor
							if (Company.CashOperatorRequired)
								LocalOperator		= PrmOperator
								constraint (LocalOperatorRel exists)
									"OperatorDoesNotExist"
								constraint (LocalOperatorRel.ActiveStatus.Active)
									"OperatorIsNotActive"

						PrmTransactionCodeBlock1	
							BypassProjectDateEdit = true	







						PrmReceivableDistributionArray
							LocalGeneralLedgerSystemCode = "AR"	
							BypassProjectDateEdit = true	

							initialize I1
							initialize I2
							I1 += 1
							while (I1 < 11)	
								if (I1=1)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock1
								else
								if (I1=2)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock2
								else
								if (I1=3)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock3
								else
								if (I1=4)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock4
								else
								if (I1=5)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock5
								else
								if (I1=6)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock6
								else
								if (I1=7)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock7
								else
								if (I1=8)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock8
								else
								if (I1=9)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock9
								else
								if (I1=10)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock10

								if (I2 >= 1
								and PrmReceivableDistributionArray.ReceivableDistributionInput[I1] entered)
									initialize I3
									I3 = I2
									constraint ((PrmReceivableDistributionArray.ReceivableDistributionInput[I2].ReasonCode entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionAmount entered)
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Description entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].FinanceCodeBlock entered)
										"Occurrence<I3>MustHaveTheValueEntered"
								I2 = I1
								I1 += 1













































































					Action Rules

						constraint (!IsPrepaymentTaxWithHolding)		
							"CannotWriteOff;PrepaymentTaxRecordsExists"

						constraint (TransactionAmount entered)
							"CannotWriteOffAZeroAmountPayment"

						constraint (!CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)
							"CustomerHasBalanceForwardProcessing"
						constraint (!ReceivableApplicationSelectRel exists)
							"CannotUpdate.PendingApplicationsExist"
						constraint (!RTMPaymentRel exists)
							"CannotChange.PaymentPendingRTM."
						if (Company.VendorCreateAndInterfaceToAP)
							constraint (!ARToAPApplicationSelectRel exists)
								"CannotChange.PaymentPendingTransferToAP."

						initialize WorkTotal
						I1 = 1
						while (I1 < 11)
							LocalAdjustmentReason = PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode
							if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered)
									"ReasonCodeIsRequired"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
									"TransactionAmountIsRequired"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount <= PaymentOpen)
									"OverageInvalidForWriteOff"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.ReceivableAdjustmentReasonType.OverShort)
									"ReasonCodeMustBeTypeOver/ShortForWriteOff"
								if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
									constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment entered)
										"Receivable_\Reason_\Code_\<LocalAdjustmentReason>IsSetForAttachmentRequired;AddAnAttachment"
								if (!PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
									constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment not entered)
										"Receivable_\Reason_\Code_\<LocalAdjustmentReason>IsNotSetForAttachmentRequired;RemoveTheAttachment"
								WorkTotal += PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount

							I1 +=1

						constraint (WorkTotal <= PaymentOpen)
							"WriteOffsCannotExceedOpenAmount"

						if (Company.DetailedRNADistributions)
							if (!CashDetailState.None)
								constraint (CashDetailState.Released)
									"Cash_\DetailsMustBeReleased"
								if (WorkTotal != PaymentOpen)
									confirmation required
										"WriteoffAmountWillBeProratedAcrossOpen_\Cash_\Details.Continue?"

						I1 = 1
						while (I1 < 11)
							if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								LocalAdjustmentReason		= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode
								LocalAdjustmentAmount		= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount
								LocalDescription			= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Description
								LocalAdjustmentAccount		= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock	
								LocalAttachment				= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment
								LocalGeneralLedgerDate		= PrmGeneralLedgerDate
								CashApplicationOperator		= PrmOperator
								include PaymentApplicationAdjustment

							I1 +=1

						include UpdateReceivableProjectTransaction
					Exit Rules
						invoke TriggerReceivableTracker







				CreateViaTransfer is a Create Action
					restricted

					Entrance Rules
						LocalGeneralLedgerSystemCode = "AR"	
					Action Rules
						TypeOfPayment = TypeOfPayment.CustomerPayment

					Exit Rules
						include UpdateReceivableProjectTransaction
						LocalPayment									= FromPayment
						if (Prepayment.Prepayment)
							invoke CreateFromPaymentTransfer ReceivablePrepayment
								fill in fields from FromPrepaymentRel	
								invoked.ReferenceType					= FromPrepaymentRel.ReferenceType
								invoked.Invoice							= FromPrepaymentRel.Invoice
								invoked.CustomerOrder					= FromPrepaymentRel.CustomerOrder
								invoked.AutomaticCashApplication		= FromPrepaymentRel.AutomaticCashApplication
								invoked.PrepaymentNbr					= FromPrepaymentRel.PrepaymentNbr


						invoke UpdateCurrentBalance CompanyCustomerRel
							invoked.ChangeAmount						= BaseAmount * -1 
							invoked.TransactionDate						= DepositDate
							if (DepositDate > this instance.CompanyCustomerRel.LastPaymentDate)
								invoked.CheckLastPaymentDate				= DepositDate
								invoked.CheckLastPaymentAmount				= BaseAmount
							invoked.PrmBalanceType							= 2	
							invoked.PrmReference							= Reference

						invoke UpdatePeriodTotals CompanyCustomerRel
							invoked.Type									= "P"
							invoked.Amount									= BaseAmount * -1
							invoked.EffectiveDate							= GeneralLedgerDate


				PaymentTransfer is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (AllowPaymentTransfer)
					Parameters
						ToCustomer					is a Customer
						ReassignDate				is Date
						ReassignAmount				is an InternationalAmount
						ToReceivableReasonCode		is an ApplicationAdjustmentReason

						ToProject					is a Project
						ToOperator					is like ReceivableOperator
					Parameter Rules
						ToCustomer
							required
						ReassignDate
							required
							initial value is current corporate date
							default to current corporate date
							constraint (ReassignDate !< GeneralLedgerDate)
								"ReassignDateCannotBeLessThan_\Global_\Ledger_\Date<GeneralLedgerDate>"
							
							if (TransferDate entered)
								constraint (ReassignDate !< TransferDate)
									"ReassignDateCannotBeLessThanOldTransferDate<TransferDate>"
						
						ReassignAmount
							required
							initial value is PaymentOpen
							constraint (ReassignAmount > 0)
								"MustEnterAValidAmount"
							if (Prepayment.Prepayment)
								constraint (ReassignAmount = TransactionAmount)
									"PartialTransferNotAllowedOnPrepayments"



							constraint (ReassignAmount !> PaymentOpen)
								"TransferAmountCannotBeGreaterThanPaymentOpenAmount"

						ToReceivableReasonCode
							if (ReassignAmount < TransactionAmount)
								required
									"ReasonCodeRequiredIfTransferAmountIsLessThanTransactionAmount"
								constraint (ToReceivableReasonCode.Active)
									"ReasonCodeIsNotActive"
								constraint (ToReceivableReasonCode != "CURR")
									"CURRIsAReservedReasonCode"
								constraint (ToReceivableReasonCode.ReceivableAdjustmentReasonType.PaymentTransfer)
									"<ToReceivableReasonCode>IsNotAPaymentTransferReasonCode"
							if (ReassignAmount = TransactionAmount)
								cannot be entered
									"ReasonCodeNotRequiredIfTransferAmountIsEqualToTransactionAmount"
						ToOperator
							default to actor
							if (Company.CashOperatorRequired)
								LocalOperator		= ToOperator
								constraint (LocalOperatorRel exists)
									"OperatorDoesNotExist"
								constraint (LocalOperatorRel.ActiveStatus.Active)
									"OperatorIsNotActive"

					Local Fields
						LocalPaymentOpen			is an InternationalAmount
						NewCompanyCustomerComment	is an CompanyCustomerComment view
					Entrance Rules
						LocalCustomer		= ToCustomer
						LocalReassignDate   = ReassignDate
						LocalReassignAmount = ReassignAmount
						LocalTypeOfPayment	= "P"
						constraint (!LocalPaymentNumberRel exists)

							"PaymentCannotBeTransferredBackToACustomerThatHasAPreviousTransferForThisPayment."
						LocalGeneralLedgerSystemCode = "AR"	
						if (TransferDate entered
						and TransferAmountTransactionCurrency not entered)
							FirstPaymentTransferDate	= TransferDate
					Action Rules
						LocalPaymentOpen					= PaymentOpen
						constraint (TransactionAmount entered)
							"CannotTransferAZeroAmountPayment"
						for each ReceivableApplicationRel
							constraint (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount !< 0 or each.ApplicationSource.ReversalOfApplications)
								"MemoChargebackExists,CannotTransfer"
						constraint (!CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward or LastStatementDate = 0)
							"CannotTransferOrReassign,PaymentHasAppearedOnStatement"
						constraint (!ReceivablePaymentApplyReverseDetailRel exists)
							"PendingReversalExists,CannotTransfer"
						constraint (!ReceivableInvoiceApplyReverseDetailRel exists)
							"PendingReversalExists,CannotTransfer"
						constraint (PaymentOpen <= TransactionAmount)	
							"OpenAmountGreaterThanOriginalAmount;CannotTransfer"




						if (Company.DetailedRNADistributions)
							if (!CashDetailState.None)
								constraint (CashDetailState.Released)
									"Cash_\DetailsMustBeReleased"
								if (ReassignAmount != PaymentOpen)
									confirmation required
										"Reassign_\AmountWillBeProratedAcrossOpen_\Cash_\Details.Continue?"


						ValidateReceivableActivityInformation.Project						= ToProject
						constraint (ValidateReceivableActivityInformation.ErrorNumber not entered)
							"<ValidateReceivableActivityInformation.ErrorMessage>"

						if (ValidateReceivableActivityInformation.GoodCompany entered
						and ValidateReceivableActivityInformation.GoodCompany != Company)
							LocalCompany			= ValidateReceivableActivityInformation.GoodCompany
							constraint (LocalReceivableCompanyRel exists)
								"ACCompanyDoesNotExistInReceivableSystem"
							constraint (LocalReceivableCompanyRel.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup)
								"ProjectCompanyIsNotPartOfPaymentCompanyCustomerGroup"

							if (ValidateReceivableActivityInformation.GoodCustomer entered
							and ValidateReceivableActivityInformation.GoodCustomer != ToCustomer)
								LocalCompany  = Company
								LocalCustomer = ValidateReceivableActivityInformation.GoodCustomer
								constraint (LocalCompanyCustomerRel exists)
									"ProjectCustomerIsNotAssignedToPaymentCompany"
								constraint (LocalCompanyCustomerRel.ActiveStatus.Active)
									"ProjectCustomerIsSetForDeletion"
								confirmation required
									"ContractCompanyCustomerDoesNotEqualPaymentCompanyCustomer.Continue?"
							else
								confirmation required
									"ContractCompanyDoesNotEqualPaymentCompany.Continue?"

						if ((ValidateReceivableActivityInformation.GoodCompany not entered
						or   ValidateReceivableActivityInformation.GoodCompany = Company)
						and  ValidateReceivableActivityInformation.GoodCustomer entered
						and  ValidateReceivableActivityInformation.GoodCustomer != ToCustomer)
							confirmation required
								"ContractCompanyCustomerDoesNotEqualPaymentCompanyCustomer.Continue?"
							



						invoke Open.CreateViaTransfer ReceivablePayment
							assign result to NewPayment

							invoked.Company												= Company
							invoked.ReceivablePaymentHeader								= ReceivablePaymentHeader
							invoked.Customer											= ToCustomer
							invoked.TransactionAmount									= ReassignAmount

							invoked.Project												= ToProject
							invoked.ReceivableOperator									= ToOperator
							invoked.DepositDate											= DepositDate
							invoked.TransferDate										= ReassignDate
							invoked.TransferredFromCustomer								= Customer
							invoked.TransferredToCustomer								= ToCustomer
							invoked.GeneralLedgerDate									= GeneralLedgerDate
							invoked.TypeOfPayment										= TypeOfPayment
							invoked.PaymentNumber										= PaymentNumber
							invoked.LastDistributionSequence							= LastDistributionSequence
							invoked.ReceivableProcessLevel								= ReceivableProcessLevel
							invoked.CashCode											= CashCode
							invoked.ReceivedNotAppliedReceivableGeneralLedgerCode		= ReceivedNotAppliedReceivableGeneralLedgerCode
							invoked.OriginalCurrency									= OriginalCurrency
							invoked.CurrencyRate										= CurrencyRate
							invoked.BalancingDistributionAmountCompanyCurrency			= BalancingDistributionAmountCompanyCurrency
							invoked.CurrencyRateToCustomerGroupCurrency					= CurrencyRateToCustomerGroupCurrency
							invoked.CustomerGroupCurrencyMultiplicationOrDivision		= CustomerGroupCurrencyMultiplicationOrDivision
							invoked.ReferenceNumber										= ReferenceNumber
							invoked.ReferenceType										= ReferenceType
							invoked.CurrencyDecimalsNumber								= CurrencyDecimalsNumber
							invoked.Prepayment											= Prepayment
							invoked.LastFinanceChargeDate								= LastFinanceChargeDate
							invoked.FromPayment											= ReceivablePayment
							invoked.BypassGLDateEdit									= true

						for each CompanyCustomerCommentRel
							invoke Create CompanyCustomerComment
								assign result to NewCompanyCustomerComment
								fill in fields from each
								invoked.Customer					= ToCustomer
							for each each.CompanyCustomerCommentAttachmentRel
								invoke Create CompanyCustomerCommentAttachment
									fill in fields from each
									invoked.Company					= Company
									invoked.Customer				= ToCustomer
									invoked.CompanyCustomerComment	= NewCompanyCustomerComment.CompanyCustomerComment
							invoke Delete each

						for each ReceivablePaymentAttachmentRel
							invoke Create ReceivablePaymentAttachment
								invoked.ReceivablePaymentHeader	= NewPayment.ReceivablePayment.ReceivablePaymentHeader
								invoked.ReceivablePayment 		= NewPayment.ReceivablePayment
								fill in fields from each
							invoke Delete each

						if (ReceivablePrepaymentRel exists)
							invoke Delete ReceivablePrepaymentRel

						if (ReassignAmount < TransactionAmount)
							LocalAdjustmentReason					= ToReceivableReasonCode
							LocalAdjustmentAmount					= ReassignAmount
							LocalGeneralLedgerDate					= ReassignDate
							initialize LocalDescription
							include PaymentApplicationAdjustment
						else
							invoke UpdateCurrentBalance CompanyCustomerRel
								invoked.ChangeAmount					= BaseAmount
								invoked.TransactionDate					= DepositDate
								invoked.PrmBalanceType					= 2	
								invoked.PrmReference					= Reference

							invoke UpdatePeriodTotals CompanyCustomerRel
								invoked.Type									= "P"
								invoked.Amount									= BaseAmount
								invoked.EffectiveDate							= GeneralLedgerDate

						if (Company.DetailedRNADistributions)
							include TransferCashDetailsToCustomer

						CompletionMessage			= TransferCompleteMessage
						for each ReceivablePaymentRemittanceRel
							if (AppliedAmount not entered and ReassignAmount = TransactionAmount)
								invoke Create ReceivablePaymentRemittance
									fill in fields from each
										except invoked.Status
									invoked.ReceivablePayment	= NewPayment.ReceivablePayment
								invoke PaymentTransferDelete each
							else
							if (AppliedAmount not entered)
								invoke Create ReceivablePaymentRemittance
									fill in fields from each
										except invoked.Status
									invoked.ReceivablePayment	= NewPayment.ReceivablePayment
								CompletionMessage			= PartialBalanceTransferredMessage
							else
							if (LocalPaymentOpen < ReassignAmount and ReassignAmount = PaymentOpen)
								if (!each.Status.Applied)
									invoke Create ReceivablePaymentRemittance
										fill in fields from each
										invoked.ReceivablePayment	= NewPayment.ReceivablePayment
									invoke PaymentTransferDelete each
							else
							if (LocalPaymentOpen < TransactionAmount and ReassignAmount < PaymentOpen)
								if (!each.Status.Applied)
									invoke Create ReceivablePaymentRemittance
										fill in fields from each
										invoked.ReceivablePayment	= NewPayment.ReceivablePayment
								CompletionMessage			= PartialBalanceTransferredMessage


						TransferDate								= ReassignDate
						TransferredFromCustomer						= Customer
						TransferredToCustomer						= ToCustomer
						TransferAmountTransactionCurrency		   += ReassignAmount
					
						if (ReceivableProjectTransactionRel exists)							
							include UpdateReceivableProjectTransaction



						if (PaymentOpen + TransferAmountTransactionCurrency 	= ReassignAmount )
							include UpdateForeignTradeAndPayments
							make transition to FullyApplied

					Exit Rules
						invoke FastUpdate ReceivablePaymentHeader
							invoked.bod id.VariationID += 1


				CreateNonARViaTransfer is a Create Action
					restricted
					Local Fields
						NewCompanyCustomerComment	is a CompanyCustomerComment view
					Entrance Rules
						BypassGLDateForceDefault = true
						GeneralLedgerDate = TransferDate
						TypeOfPayment	= TypeOfPayment.NonArPayment
						initialize Customer
						LocalGeneralLedgerSystemCode = "AR"	

					Exit Rules
						for each LocalPaymentNonAR.CompanyCustomerCommentRel
							invoke CreateNonARPaymentComment CompanyCustomerComment
								assign result to NewCompanyCustomerComment
								fill in fields from each
									except invoked.Customer
							for each each.CompanyCustomerCommentAttachmentRel
								invoke Create CompanyCustomerCommentAttachment
									fill in fields from each
										except invoked.Customer
									invoked.Company					= Company
									invoked.CompanyCustomerComment	= NewCompanyCustomerComment.CompanyCustomerComment
							invoke Delete each

						for each LocalPaymentNonAR.ReceivablePaymentAttachmentRel
							invoke Create ReceivablePaymentAttachment
								invoked.ReceivablePaymentHeader	= this instance.ReceivablePaymentHeader
								invoked.ReceivablePayment 		= this instance.ReceivablePayment
								fill in fields from each
							invoke Delete each


						constraint (TransactionAmount entered)
							"CannotCreateNonARViaTransferForAZeroAmountPayment"

						I1 = 1
						while (I1 < 11)	
							if (ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionCompany entered
							or  ReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered
							or ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								invoke CreatePaymentDistribution ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup								= this instance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany		= this instance.Company
									invoked.BatchNumber											= this instance.ReceivablePaymentHeader
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= this instance.ReceivableProcessLevel
									invoked.SequenceNumber										= this instance.ReceivablePayment
									invoked.ReceivableCompanyGroup.GlCompany					= Company 
									invoked.ReceivableGLDistribution.GeneralLedgerAccount		= ReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock
									invoked.ReceivableGLDistribution.GeneralLedgerDate			= ReceivableDistributionArray.ReceivableDistributionInput[I1].GeneralLedgerDate
									invoked.DistributionAmount.CurrencyAmount					= ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount * -1
									invoked.TransactionTaxableAmount							= ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount
									invoked.Description											= ReceivableDistributionArray.ReceivableDistributionInput[I1].Description
									if (ReceivableDistributionArray.ReceivableDistributionInput[I1].Description not entered)
										invoked.Description										= "Batch " + this instance.ReceivablePaymentHeader + " transfer to Non AR"
									invoked.TaxCode 											= ReceivableDistributionArray.ReceivableDistributionInput[I1].TaxCode 

									invoked.TransactionTaxableAmount							= ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount * -1
									invoked.Units												= ReceivableDistributionArray.ReceivableDistributionInput[I1].Units
									invoked.BypassProjectDateEdit								= true	
									invoked.DocumentNumber										= "13-" + this instance.ReceivablePaymentHeader.PaymentHeaderString + "-" + this instance.PaymentString
									invoked.Status												= 2
									invoked.TransactionDate										= TransferDate
									invoked.OriginalCurrency									= OriginalCurrency
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
									invoked.CurrencyDecimalsNumber								= CurrencyDecimalsNumber
							I1 +=1

						if (Company.FinanceEnterpriseGroup.FundAccounting)  
							include FundAccountingTransferToNonAR


				TransferToNonAR is an Instance Action
					valid when (AllowTransferToNonAR)

					Parameters
						NonARTransferDate				is Date
						PrmReceivableDistributionArray	is a ReceivableDistributionArray

						PrmTransactionCodeBlock1			is a TransactionCodeBlock	
						PrmTransactionCodeBlock2			is a TransactionCodeBlock
						PrmTransactionCodeBlock3			is a TransactionCodeBlock
						PrmTransactionCodeBlock4			is a TransactionCodeBlock
						PrmTransactionCodeBlock5			is a TransactionCodeBlock
						PrmTransactionCodeBlock6			is a TransactionCodeBlock
						PrmTransactionCodeBlock7			is a TransactionCodeBlock
						PrmTransactionCodeBlock8			is a TransactionCodeBlock
						PrmTransactionCodeBlock9			is a TransactionCodeBlock
						PrmTransactionCodeBlock10			is a TransactionCodeBlock


					Parameter Rules
						NonARTransferDate
							initial value is DerivedGeneralLedgerDate	
							default to DerivedGeneralLedgerDate	
						
						PrmTransactionCodeBlock1	
							BypassProjectDateEdit = true	








						PrmReceivableDistributionArray	
							LocalGeneralLedgerSystemCode = "AR"	
							BypassProjectDateEdit = true	
							initialize I1
							initialize I2
							I1 += 1
							while (I1 < 11)	
								if (I1=1)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock1
								else
								if (I1=2)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock2
								else
								if (I1=3)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock3
								else
								if (I1=4)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock4
								else
								if (I1=5)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock5
								else
								if (I1=6)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock6
								else
								if (I1=7)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock7
								else
								if (I1=8)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock8
								else
								if (I1=9)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock9
								else
								if (I1=10)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock10

								if (I2 >= 1
								and PrmReceivableDistributionArray.ReceivableDistributionInput[I1] entered)
									initialize I3
									I3 = I2
									constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionAmount entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Description entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TaxCode entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionTaxableAmount entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Units entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].FinanceCodeBlock entered)
										"Occurrence<I3>MustHaveTheValueEntered"
								I2 = I1
								I1 += 1

					Entrance Rules
						initialize LocalCustomer
						LocalTypeOfPayment				= "N"
						constraint (!LocalPaymentNumberRel exists)
							"NonARPaymentAlreadyExists-CannotTransfer"
						LocalGeneralLedgerSystemCode = "AR"	

					Action Rules

						constraint (!IsPrepaymentTaxWithHolding)		
							"CannotTransfer;PrepaymentTaxRecordsExists"
						constraint (TransactionAmount entered)
							"CannotTransferAZeroAmountPayment"
						constraint (AppliedAmount = 0)
							"CannotTransfer;PaymentApplicationAmountNotEqualToZero"
						constraint (PaymentOpen = TransactionAmount)
							"CannotTransferTo_\Non_\AR;PaymentOpenAmountMustEqualTransactionAmount.MustFirstReverseAllPaymentApplicationsAndWriteOffs"
						for each ReceivableApplicationRel
							constraint (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount !< 0 or each.ApplicationSource.ReversalOfApplications)
								"MemoChargebackExists,CannotTransfer"
						constraint (!CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward or LastStatementDate = 0)
							"CannotTransferOrReassign,PaymentHasAppearedOnStatement"
						constraint (!ReceivablePaymentApplyReverseDetailRel exists)
							"PendingReversalExists,CannotTransfer"
						constraint (!ReceivableInvoiceApplyReverseDetailRel exists)
							"PendingReversalExists,CannotTransfer"
						if (Company.DetailedRNADistributions)
							if (!CashDetailState.None)
								constraint (CashDetailState.Released)
									"Cash_\DetailsMustBeReleased"




						initialize WorkTotal
						I1 = 1
						while (I1 < 11)
							if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionCompany entered
							or  PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered)
									"AccountIsRequired"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
									"TransactionAmountIsRequired"

								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals not > CurrencyDecimalsNumber)
									"TransactionAmountHasTooManyDecimals<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals>vs<CurrencyDecimalsNumber>"

								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount decimals not > CurrencyDecimalsNumber)
									"TransactionTaxableAmountHasTooManyDecimals<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals>vs<CurrencyDecimalsNumber>"

								WorkTotal += PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount
								PrmReceivableDistributionArray.ReceivableDistributionInput[I1].GeneralLedgerDate = NonARTransferDate

								if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount not entered)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount = PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount

								if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TaxCode entered)
									LocalTaxCode		= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TaxCode
									LocalTaxableAmount	= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionTaxableAmount
									include CalculateTaxRule



							I1 +=1

						constraint (WorkTotal = TransactionAmount)
							"Distributions<WorkTotal>NotEqualToPayment<TransactionAmount>"


						invoke CreatePaymentDistribution ReceivableGLDistribution
							invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel		= ReceivableProcessLevel
							invoked.BatchNumber												= ReceivablePaymentHeader
							invoked.SequenceNumber											= ReceivablePayment
							invoked.ReceivableCompanyGroup.GlCompany						= Company 
							invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount 
							invoked.DistributionAmount.CurrencyAmount						= TransactionAmount
							invoked.Description												= "Batch " + ReceivablePaymentHeader + " transfer to Non AR"
							invoked.BypassStructureRelationEdit								= true 
							invoked.BypassProjectDateEdit									= true	
							invoked.DocumentNumber											= "13-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
							invoked.Status													= 2
							invoked.GeneralLedgerDate										= NonARTransferDate
							invoked.TransactionDate											= NonARTransferDate
							invoked.OriginalCurrency										= OriginalCurrency
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
							invoked.CurrencyDecimalsNumber									= CurrencyDecimalsNumber


						LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.NonArPaymentsEntered
						if (!ReceivableTransactionSummaryRel exists)
							invoke Create ReceivableTransactionSummaryRel
						invoke AddAmount ReceivableTransactionSummaryRel
							invoked.Amount					+= BaseAmount

						LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.PaymentsCharges
						if (!ReceivableTransactionSummaryRel exists)
							invoke Create ReceivableTransactionSummaryRel
						invoke AddAmount ReceivableTransactionSummaryRel
							invoked.Amount					= BaseAmount * -1


						invoke Delete ReceivablePrepaymentRel
						invoke PaymentTransferDelete ReceivablePaymentRemittanceRel


						invoke UpdateCurrentBalance CompanyCustomerRel
							invoked.ChangeAmount					= BaseAmount
							invoked.TransactionDate					= DepositDate
							invoked.PrmBalanceType					= 2	
							invoked.PrmReference					= Reference

						invoke UpdatePeriodTotals CompanyCustomerRel
							invoked.Type							= "P"
							invoked.Amount							= BaseAmount
							invoked.EffectiveDate					= GeneralLedgerDate
						
						TransferDate								= NonARTransferDate
						TransferredFromCustomer						= Customer
						TransferAmountTransactionCurrency			= TransactionAmount
						include UpdateForeignTradeAndPayments
						make transition to FullyApplied

						if (ReceivableProjectTransactionRel exists)
							invoke Update ReceivableProjectTransactionRel
								invoked.CancelDate				= NonARTransferDate
								invoked.Status					= 7
						invoke CreateNonARViaTransfer
							assign result to NewPayment
							fill in fields from this instance
								except invoked.TransientOpenOnlyStatus	
								except invoked.CashDetailState
							initialize invoked.TransferAmountTransactionCurrency
							invoked.LocalPaymentNonAR						= ReceivablePayment
							invoked.TransferDate							= NonARTransferDate
							invoked.TransferredFromCustomer					= Customer
							invoked.ReceivableDistributionArray				= PrmReceivableDistributionArray

						if (Company.DetailedRNADistributions)
							include TransferCashDetailsToNonAR

					Exit Rules
						invoke FastUpdate ReceivablePaymentHeader
							invoked.bod id.VariationID += 1


				PaymentIntoCredit is an Instance Action
					valid when (AllowPaymentIntoCredit)
					Parameters
						ReceivableReasonType
						PrmReceivableReason						is an ApplicationAdjustmentReason
						PrmDescription							is a Description
						PrmGeneralLedgerDate					is Date
							default label is "GlobalLedgerDate"
						PrmReceivableInvoice					is like ReceivableInvoice
						PrmTransactionAmount					is an InternationalAmount
						PrmReceivableProcessLevel				is a ReceivableProcessLevel
						PrmReceivableGeneralLedgerCode			is a ReceivableGeneralLedgerCode
						PrmCreditDebitMemoReason				is a CreditDebitMemoReason
						PrmTermsCode							is a TermsCode
						PrmReceivableDistributionArray			is a ReceivableDistributionArray
						PrmOperator								is like ReceivableOperator
						PrmAccount								is a FinanceCodeBlock
						PrmKeyedInAccount						is a TransactionCodeBlock	

						PrmTransactionCodeBlock1				is a TransactionCodeBlock	
						PrmTransactionCodeBlock2				is a TransactionCodeBlock
						PrmTransactionCodeBlock3				is a TransactionCodeBlock
						PrmTransactionCodeBlock4				is a TransactionCodeBlock
						PrmTransactionCodeBlock5				is a TransactionCodeBlock
						PrmTransactionCodeBlock6				is a TransactionCodeBlock
						PrmTransactionCodeBlock7				is a TransactionCodeBlock
						PrmTransactionCodeBlock8				is a TransactionCodeBlock
						PrmTransactionCodeBlock9				is a TransactionCodeBlock
						PrmTransactionCodeBlock10				is a TransactionCodeBlock




					Parameter Rules
						PrmReceivableReason
							required
							constraint (PrmReceivableReason != "CURR")
								"CURRIsAReservedReasonCode"
							constraint (PrmReceivableReason.ReceivableAdjustmentReasonType.OverShort)
								"ReasonCodeMustBeTypeOverShort"

						PrmGeneralLedgerDate
							initial value is DerivedGeneralLedgerDate
							default to DerivedGeneralLedgerDate

						PrmKeyedInAccount	
							BypassProjectDateEdit = true	

						PrmTransactionCodeBlock1	
							BypassProjectDateEdit = true	








						PrmReceivableInvoice
							required
								"CreditMemoIsRequired"
							LocalTransactionType			= "C"
							LocalInvoice					= PrmReceivableInvoice
							constraint (!LocalReceivableInvoiceRel exists)
								"CreditMemoAlreadyExists"
							constraint (!LocalReceivableInvoiceImportRel exists)
								"InterfaceTransactionAlreadyExists"

						PrmTransactionAmount
							required
								"AmountIsRequired"
							default to PaymentOpen
							initial value is PaymentOpen
							constraint (PrmTransactionAmount <= PaymentOpen)
								"AdjustAmountCannotBeGreaterThanPaymentOpenAmount"

						PrmReceivableProcessLevel
							required
								"ProcessLevelRequired"
							default to ReceivableProcessLevel
							initial value is ReceivableProcessLevel

						PrmReceivableGeneralLedgerCode
							default to PrmReceivableProcessLevel.ReceivableGeneralLedgerCode
							required
								"ReceivableCodeRequired"

						PrmCreditDebitMemoReason
							required
								"MemoReasonCodeRequired"

						PrmTermsCode
							default to CompanyCustomerRel.DebitCreditMemoTermsCode
							required
								"TermsCodeRequired"

						PrmAccount
							LocalGeneralLedgerSystemCode = "AR"
							default to PrmKeyedInAccount
								default individual fields
							if (PrmReceivableReason.AccountingUnitOverrideFlag.AllowProcessLevelFinanceCodeBlockOverride)
								default to PrmReceivableProcessLevel.AccountingUnitFinanceCodeBlock
									default individual fields
							default to PrmReceivableReason.DistributionAccount
								default individual fields

						PrmOperator
							default to actor
							if (Company.CashOperatorRequired)
								LocalOperator		= PrmOperator
								constraint (LocalOperatorRel exists)
									"OperatorDoesNotExist"
								constraint (LocalOperatorRel.ActiveStatus.Active)
									"OperatorIsNotActive"

						PrmReceivableDistributionArray 
							BypassProjectDateEdit = true	
							initialize I1
							initialize I2
							I1 += 1
							while (I1 < 11)
								if (I1=1)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock1
								else
								if (I1=2)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock2
								else
								if (I1=3)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock3
								else
								if (I1=4)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock4
								else
								if (I1=5)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock5
								else
								if (I1=6)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock6
								else
								if (I1=7)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock7
								else
								if (I1=8)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock8
								else
								if (I1=9)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock9
								else
								if (I1=10)
									PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock10

								if (I2 >= 1
								and PrmReceivableDistributionArray.ReceivableDistributionInput[I1] entered)
									initialize I3
									I3 = I2
									constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionAmount entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Description entered
									or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].FinanceCodeBlock entered)
										"Occurrence<I3>MustHaveTheValueEntered"
								I2 = I1
								I1 += 1

					Entrance Rules
						constraint (TransactionAmount entered)
							"CannotChangeAZeroAmountPaymentIntoACredit"
					Action Rules
						constraint (!IsPrepaymentTaxWithHolding)			
							"CannotConvertInToCreditMemo;PrepaymentTaxRecordsExists"
						initialize WorkTotal
						I1 = 1
						while (I1 < 11)
							if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionCompany entered
							or  PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered)
									"AccountIsRequired"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
									"TransactionAmountIsRequired"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals not > CurrencyDecimalsNumber)
									"TransactionAmountHasTooManyDecimals<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount decimals>vs<CurrencyDecimalsNumber>"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount <= PrmTransactionAmount)
									"Entered<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount>AmountHasExceededTheHeaderAmount<PrmTransactionAmount>"
								constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount > 0)
									"NegativeAmountNotAllowed"
								WorkTotal += PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount
								PrmReceivableDistributionArray.ReceivableDistributionInput[I1].GeneralLedgerDate = PrmGeneralLedgerDate

							I1 +=1

						constraint (WorkTotal = PrmTransactionAmount)
							"Distributions<WorkTotal>NotEqualToHeaderAmount<PrmTransactionAmount>"

						if (PrmReceivableProcessLevel not entered)
							PrmReceivableProcessLevel										= ReceivableProcessLevel

						if (PrmReceivableGeneralLedgerCode not entered)
							PrmReceivableGeneralLedgerCode									= ReceivableProcessLevel.ReceivableGeneralLedgerCode

						if (PrmGeneralLedgerDate not entered)
							if (Company.DefaultApplicationDate.SystemDate)
								PrmGeneralLedgerDate										= current corporate date
							else
							if (Company.DefaultApplicationDate.LatestTransactionPostDate
							or Company.DefaultApplicationDate.PaymentCreditPostDate)
								PrmGeneralLedgerDate										=  GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  PrmGeneralLedgerDate < TransferDate)
								PrmGeneralLedgerDate										= TransferDate

						invoke PaymentIntoCredit Unreleased ReceivableInvoice 
							invoked.Company												= Company
							invoked.Customer											= Customer
							invoked.ReceivableInvoice									= PrmReceivableInvoice
							invoked.ReceivableInvoiceType								= "C"
							invoked.AlternateReceivableInvoiceType						= "C"
							invoked.TransientSignedTransactionAmount					= PrmTransactionAmount
							invoked.InvoiceAmount.CurrencyAmount						= PrmTransactionAmount
							invoked.BatchNumber											= ReceivablePaymentHeader
							invoked.ReceivableProcessLevel								= PrmReceivableProcessLevel
							invoked.ReceivableGeneralLedgerCode							= PrmReceivableGeneralLedgerCode
							invoked.GeneralLedgerDate									= PrmGeneralLedgerDate
							invoked.TransactionDate										= PrmGeneralLedgerDate
							invoked.ReceivableCrossReference.ReceivableInvoiceType		= "O"
							invoked.ReceivableCrossReference.ReceivableInvoice			= PaymentNumber
							invoked.OriginalCurrency									= OriginalCurrency
							invoked.CurrencyMultiplicationOrDivision					= ReceivablePaymentHeader.CurrencyMultiplicationOrDivision
							invoked.CurrencyRateToCustomerGroupCurrency					= CurrencyRateToCustomerGroupCurrency
							invoked.CustomerGroupCurrencyMultiplicationOrDivision		= CustomerGroupCurrencyMultiplicationOrDivision
							invoked.CurrencyDecimalsNumber								= CurrencyDecimalsNumber
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
							invoked.BankTransactionCode									= CompanyCustomerRel.BankTransactionCode
							invoked.BankTransactionType									= CompanyCustomerRel.BankTransactionCode.BankTransactionType
							invoked.Origin												= "P"
							invoked.TermsCode											= PrmTermsCode
							invoked.CreditDebitMemoReason								= PrmCreditDebitMemoReason
							invoked.Description											= PrmCreditDebitMemoReason.Description
							invoked.ReceivableDistributionArray							= PrmReceivableDistributionArray
							invoked.SalesRepresentative									= CompanyCustomerRel.SalesRepresentative
							invoked.RevalueCurrencyTransactions							= CompanyCustomerRel.RevalueCurrencyTransactions
							invoked.FromReceivablePayment								= true

						invoke UnreleasedCashApplication.Create ReceivableApplication
							assign result to NewReceivableApplication
							invoked.Company													= Company
							invoked.ReceivableApplication.TransType							= TypeOfPayment
							invoked.ReceivableApplication.Invoice							= PaymentNumber
							invoked.ReceivableApplication.PaymentSeq						= ReceivablePayment
							invoked.ReceivableApplication.BatchNumber						= ReceivablePaymentHeader

							invoked.CreditTransaction.CreditType							= "P"
							invoked.CreditTransaction.CreditCompany							= Company
							invoked.CreditTransaction.CreditCustomer						= Customer
							invoked.CreditTransaction.CreditBatch							= ReceivablePaymentHeader
							invoked.CreditTransaction.CreditSequence						= ReceivablePayment
							invoked.CreditTransaction.CreditType							= TypeOfPayment
							invoked.CreditTransaction.CreditNumber							= PaymentNumber
							invoked.GeneralLedgerDate										= PrmGeneralLedgerDate
							invoked.ReceivableOperator										= PrmOperator
							invoked.DepositDate												= DepositDate
							invoked.ApplicationCurrency										= OriginalCurrency
							invoked.ApplicationSource										= "M"
							invoked.ReceivableGeneralLedgerCode								= ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
							invoked.Prepayment												= Prepayment

							if (ReceivablePayment.OriginalCurrency = Company.Currency)
								invoked.ApplicationCurrencyType								= "B"
							else
								invoked.ApplicationCurrencyType								= "N"

						invoke Create ReceivableApplicationAdjustment
							fill in fields from this instance
							invoked.Company													= NewReceivableApplication.ReceivableApplication.Company
							invoked.ReceivableApplication.TransType							= NewReceivableApplication.ReceivableApplication.TransType
							invoked.ReceivableApplication.Invoice							= NewReceivableApplication.ReceivableApplication.Invoice
							invoked.ReceivableApplication.PaymentSeq						= NewReceivableApplication.ReceivableApplication.PaymentSeq
							invoked.ReceivableApplication.BatchNumber						= NewReceivableApplication.ReceivableApplication.BatchNumber
							invoked.ReceivableApplication.ApplicationSequence				= NewReceivableApplication.ReceivableApplication.ApplicationSequence
							invoked.AdjustmentReason										= PrmReceivableReason 
							if (PrmDescription entered)
								invoked.Description											= PrmDescription
							invoked.ReceivableAdjustType									= "C"
							invoked.CreditAdjustAmount										= PrmTransactionAmount
							invoked.ApplicationCurrency										= OriginalCurrency
							invoked.DistributionAccount										= PrmAccount
							invoked.TransientSetToReviewed									= true

						include UpdateReceivableProjectTransaction

					Exit Rules
						invoke TriggerReceivableTransaction LocalReceivableInvoiceRel
						invoke TriggerReceivableTracker







				TransactionRangeSelection is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (AllowTransactionRangeApplication)
					Parameters
						ReceivableTransactionRangeApplication
					Action Rules
						ReceivableTransactionRangeApplication.SelectOrApply										= "S"
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.Company					= ReceivablePayment.Company
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePaymentHeader	= ReceivablePaymentHeader
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePayment			= ReceivablePayment

						if (ReceivableTransactionRangeApplication.SelectAndApplyTransactions entered)
							constraint (ReceivableTransactionRangeApplication.ErrorMessage not entered)
								"<ReceivableTransactionRangeApplication.ErrorMessage>"

						CompletionMessage = ReceivableTransactionRangeApplication.ResultMessage


				TransactionRangeProjectSelection is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (AllowTransactionRangeApplication)
					Parameters
						ReceivableTransactionRangeApplication
					Action Rules
						ReceivableTransactionRangeApplication.SelectOrApply										= "S"
						ReceivableTransactionRangeApplication.ProjectFilter										= true
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.Company					= ReceivablePayment.Company
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePaymentHeader	= ReceivablePaymentHeader
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePayment			= ReceivablePayment
						if (ReceivableTransactionRangeApplication.SelectAndApplyTransactions entered)
							constraint (ReceivableTransactionRangeApplication.ErrorMessage not entered)
								"<ReceivableTransactionRangeApplication.ErrorMessage>"

						CompletionMessage = ReceivableTransactionRangeApplication.ResultMessage


				TransactionRangeApplication is an Instance Action
					completion message is "<CompletionMessage>"
					valid when (AllowTransactionRangeApplication)
					Parameters
						ReceivableTransactionRangeApplication
					Entrance Rules
						LocalInvoiceRange.FromInvoice	= ReceivableTransactionRangeApplication.InvoiceRange.FromInvoice
						LocalInvoiceRange.ToInvoice		= ReceivableTransactionRangeApplication.InvoiceRange.ToInvoice
					Action Rules
						ReceivableTransactionRangeApplication.SelectOrApply										= "A"
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.Company					= ReceivablePayment.Company
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePaymentHeader	= ReceivablePaymentHeader
						ReceivableTransactionRangeApplication.ReceivablePaymentGroup.ReceivablePayment			= ReceivablePayment
						if (ReceivableTransactionRangeApplication.SelectAndApplyTransactions entered)
							constraint (ReceivableTransactionRangeApplication.ErrorMessage not entered)
								"<ReceivableTransactionRangeApplication.ErrorMessage>"

						CompletionMessage = ReceivableTransactionRangeApplication.ResultMessage


				DeleteAllApplications is an Instance Action
					default label is "DeleteAllUnpostedApplications"
					valid when (HasApplications)
					Action Rules
						include DeleteAllApplications
					Exit Rules
						LocalReceivableDeleteTracker = true
						invoke TriggerReceivableTracker








			FullyApplied is a State

				DeleteAllApplications is an Instance Action
					default label is "DeleteAllUnpostedApplications"
					valid when (HasApplications)
					Action Rules
						include DeleteAllApplications






			Closed is a State



			Historical is a State


	Actions

		CreateFromConversion is a Create Action
			restricted

			Entrance Rules
				constraint (TransactionAmount entered)
					"TransactionAmountRequired"

			Exit Rules
				if (Status.Open)
					include UpdateReceivableProjectTransaction
				else
				if (Status.FullyApplied
				or  Status.Closed
				or  Status.Historical)
					AppliedAmount	= BaseAmount

		CreatePaymentComment is an Instance Action
			valid when (IsNotReleasedUnAssignedOrIsReleasedPaymentHeader)
			Parameters
				PrmComment							is Text
					default label is "Description"
				PrmBeginDate						is Date
				PrmEndDate							is Date
				PrmPrintCode						is AlphaUpper size 1
					States
						BothDisplayAndPrint	value is "B"
						Display				value is "D"
						Print				value is "P"
						OrderEntryForms		value is "R"
				CommentText

			Parameter Rules
				PrmComment
					required

			Action Rules
				if (TypeOfPayment.NonArPayment)
					invoke CreateNonARPaymentComment CompanyCustomerCommentRel
						invoked.Comment						= PrmComment
						invoked.BeginDate					= PrmBeginDate
						invoked.EndDate						= PrmEndDate
						invoked.PrintCode					= PrmPrintCode
						invoked.CommentText					= CommentText
				if (TypeOfPayment.CustomerPayment)
					invoke CreateARPaymentComment CompanyCustomerCommentRel
						invoked.Comment						= PrmComment
						invoked.BeginDate					= PrmBeginDate
						invoked.EndDate						= PrmEndDate
						invoked.PrintCode					= PrmPrintCode
						invoked.CommentText					= CommentText

		CreatePaymentAttachment is an Instance Action
			Parameters
				PrmComment							is Text
				PrmAttachment						is a DocumentAttachment
			Action Rules
				invoke Create ReceivablePaymentAttachmentRel
					invoked.Attachment			= PrmAttachment
					invoked.Comment				= PrmComment

		FastUpdate is an Update Action
			restricted
			bypass field rules

			Exit Rules
				if  (TransientUpdateReceivableProjectTransaction)
					include UpdateReceivableProjectTransaction


		UpdateAppliedAmounts is an Update Action
			restricted
			bypass field rules
			Entrance Rules
				LocalCurrencyTable = ReceivablePaymentHeader.CurrencyTable


			Action Rules
				if (BaseAdjustAmount changed and AdjustAmountTransactionCurrency not changed)
					AdjustAmountTransactionCurrency += (BaseAdjustAmount - old BaseAdjustAmount)

				include UpdateReceivableProjectTransaction



				if (IsZeroPayment)
					if  (!HasApplications)
						make transition to Open
					else
						include UpdateForeignTradeAndPayments
						make transition to FullyApplied
				else
					if (Status.Open
					and PaymentOpen = 0)
						include UpdateForeignTradeAndPayments
						make transition to FullyApplied

					if ((Status.FullyApplied
					or   Status.Closed)
					and PaymentOpen > 0)
						make transition to Open

				if (Company.AllowHistoricalApplicationReversal  
				and Status.Historical
				and PaymentOpen > 0)
					make transition to Open


			Exit Rules


				include UpdatePrepayment


		UpdateBODIdFields	is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation		  is Alpha size 22
					default label is "Location"
				PrmDocumentID		is Alpha size 100
					default label is "DocumentID"
				PrmRevision		  is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord	is Alpha size 1
					default label is "SystemOfRecord"
				PrmVariationID	   is Alpha size 22
					default label is "VariationID"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord


		TriggerReceivableTracker is an Instance Action
			restricted
			Action Rules
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and (ReceivableApplicationTrackerRel exists or LocalReceivableDeleteTracker or TypeOfPayment.NonArPayment or TypeOfPayment.CustomerPayment))
					ActionCode = ActionCode.Update
					increment bod id.VariationID
					trigger "ReceivableTrackerService" PA service
						resume on error
						title is "EG:<Company.CustomerBusinessGroup.FinanceEnterpriseGroup>CO:<Company>RP:<PaymentNumber>"
						Criteria
							Company.CustomerBusinessGroup.FinanceEnterpriseGroup
							Company
						Variables
							ActionCode
							include persistent fields from Customer
							include persistent fields from ReceivablePayment
							include persistent fields from ReceivableCompanyRel
							Company.FinanceEnterpriseGroup
								variable name is FinanceEnterpriseGroup
							Company
								variable name is ReceivableCompany
							Company.GeneralLedgerCompany.AccountingEntity
								variable name is Accountingentity


		SendReceivableTrackerBODNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is SyncReceivableTrackerXMLBOD
					bod type is "Sync.ReceivableTracker"
					accounting entity is BODAccountingEntity
					document id is  DerivedBODDocumentID

		SendReceivableTrackerAdjBODNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is SyncReceivableTrackerAdjXMLBOD
					bod type is "Sync.ReceivableTracker"
					accounting entity is BODAccountingEntity
					document id is  DerivedBODDocumentID


		TriggerReceivableTrackerLPLBOD is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmTriggerFrom		is Alpha size 100
			Action Rules
				LocalTriggerFrom   			 = 		PrmTriggerFrom
				LocalMainUserTemplate = "IONSyncReceivableTrackerHeader_ST"
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRTRRel
					invoked.PrmVerb						= 1
					invoked.PrmNoun						= "ReceivableTracker"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= LocalTriggerFrom
					invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.PrmCompany					= Company
					invoked.PrmMainUserTemplate			= LocalMainUserTemplate
				NativeLPLRTBODTrigger = FSMBODConfigurationRTRRel.NativeLPLBODTrigger
				LocalReference 				 =	  FSMInboundBODTracker.Reference5
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and (ReceivableApplicationTrackerRel exists or LocalReceivableDeleteTracker or TypeOfPayment.NonArPayment or TypeOfPayment.CustomerPayment) and NativeLPLRTBODTrigger)
					increment bod id.VariationID
					if(LocalReference not entered)
						invoke TriggerReceivableTrackerLPL
						if(ReceivableApplicationRel.DerivedFlag)
							LocalMainUserTemplate = "IONSyncReceivableTrackerAdjHeader_ST"
							invoke TriggerReceivableTrackerAdjustmentLPL

					else
						if(LocalReference="Normal")
							invoke TriggerReceivableTrackerLPL
						else
						if(LocalReference = "Adjustment")
							LocalMainUserTemplate = "IONSyncReceivableTrackerAdjHeader_ST"
							invoke TriggerReceivableTrackerAdjustmentLPL

		TriggerReceivableTrackerLPL is an Instance Action
			default label is untranslatable
			restricted
			Parameters
			Action Rules
				if(FSMInboundBODTracker not entered)
					invoke Create FSMInboundBODTracker
						assign result to NewBODTracker
						invoked.Verb 					= 1
						invoked.Noun 					= "ReceivableTracker"
						invoked.BODDocumentID			= DerivedBODDocumentID
						invoked.BODVariationID			= bod id.VariationID
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.Direction				= 1
						invoked.Reference1				= Company
						invoked.BODAccountingEntity		= BODAccountingEntity
						invoked.Reference2				= ReceivablePaymentHeader
						invoked.Reference3				= ReceivablePayment
						invoked.Reference4				= LocalTriggerFrom
						invoked.Reference5				= "Normal"
						initialize invoked.Error
						initialize invoked.ErrorMessage
					LocalFSMInboundBODTracker			= NewBODTracker.FSMInboundBODTracker
				else
					LocalFSMInboundBODTracker			= FSMInboundBODTracker
					invoke Update FSMInboundBODTrackerRel
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.BODDocumentID			= DerivedBODDocumentID
						invoked.BODVariationID			= bod id.VariationID
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.Direction				= 1
						invoked.Reference1				= Company
						invoked.BODAccountingEntity		= BODAccountingEntity
						invoked.Reference2				= ReceivablePaymentHeader
						invoked.Reference3				= ReceivablePayment
						invoked.Reference4				= LocalTriggerFrom
						invoked.Reference5				= "Normal"
						initialize invoked.Error
						initialize invoked.ErrorMessage
				invoke SendReceivableTrackerBODNativeLPL
					resume on error
				   		Error										= true
						LocalErrorMessage	 						= error message
				if(Error)
					invoke Update FSMInboundBODTrackerRel
						invoked.Error 								= Error
						invoked.ErrorMessage 						= LocalErrorMessage
						invoked.Status								= 2
						invoked.CloseDate							= system current timestamp
						invoked.BODXML								= SyncReceivableTrackerXMLBOD
						invoked.BODID								= DerivedBODId
				else
					invoke Update FSMInboundBODTrackerRel
						invoked.Status									= 3
						invoked.CloseDate								= system current timestamp
						invoked.BODXML									= SyncReceivableTrackerXMLBOD
						invoked.BODID									= DerivedBODId

		TriggerReceivableTrackerAdjustmentLPL is an Instance Action
			default label is untranslatable
			restricted
			Parameters
			Action Rules
				if(FSMInboundBODTracker not entered)
					invoke Create FSMInboundBODTracker
						assign result to NewBODTracker
						invoked.Verb 					= 1
						invoked.Noun 					= "ReceivableTracker"
						invoked.BODDocumentID			= DerivedAdjBODDocumentID
						invoked.BODVariationID			= bod id.VariationID
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.Direction				= 1
						invoked.Reference1				= Company
						invoked.BODAccountingEntity		= BODAccountingEntity
						invoked.Reference2				= ReceivablePaymentHeader
						invoked.Reference3				= ReceivablePayment
						invoked.Reference4				= LocalTriggerFrom
						invoked.Reference5				= "Adjustment"
						initialize invoked.Error
						initialize invoked.ErrorMessage
					LocalFSMInboundBODTracker			= NewBODTracker.FSMInboundBODTracker
				else
					LocalFSMInboundBODTracker			= FSMInboundBODTracker
					invoke Update FSMInboundBODTrackerRel
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.BODDocumentID			= DerivedAdjBODDocumentID
						invoked.BODVariationID			= bod id.VariationID
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.Direction				= 1
						invoked.Reference1				= Company
						invoked.BODAccountingEntity		= BODAccountingEntity
						invoked.Reference2				= ReceivablePaymentHeader
						invoked.Reference3				= ReceivablePayment
						invoked.Reference4				= LocalTriggerFrom
						invoked.Reference5				= "Adjustment"
						initialize invoked.Error
						initialize invoked.ErrorMessage
				invoke SendReceivableTrackerAdjBODNativeLPL
					resume on error
				   		Error										= true
						LocalErrorMessage	 						= error message
				if(Error)
					invoke Update FSMInboundBODTrackerRel
						invoked.Error 								= Error
						invoked.ErrorMessage 						= LocalErrorMessage
						invoked.Status								= 2
						invoked.CloseDate							= system current timestamp
						invoked.BODXML								= SyncReceivableTrackerAdjXMLBOD
						invoked.BODID								= DerivedBODId
				else
					invoke Update FSMInboundBODTrackerRel
						invoked.Status									= 3
						invoked.CloseDate								= system current timestamp
						invoked.BODXML									= SyncReceivableTrackerAdjXMLBOD
						invoked.BODID									= DerivedBODId






		CashLedgerTransactionAmountUpdate is an Update Action
			restricted
			bypass field rules
			Action Rules
				LocalCurrencyTable = ReceivablePaymentHeader.CurrencyTable
				invoke UpdateBatchTotals ReceivablePaymentHeader
					invoked.Detail					= true
					invoked.AmountCompanyCurrency	= (BaseAmount - old BaseAmount)
					invoked.Amount					= (TransactionAmount - old TransactionAmount)
					if (Prepayment.NotAPrepay)
						invoked.RNA					= true


		CashLedgerCurrencyRateUpdate	is an Instance Action
			restricted
			Parameters
				PrmCurrencyRate			is a CurrencyRate
			Action Rules

				OriginalCurrency					= ReceivablePaymentHeader.Currency
				CurrencyRate						= PrmCurrencyRate
				DepositDate							= ReceivablePaymentHeader.DepositDate

				LocalBaseAmount.ToCurrency			= Company.Currency
				LocalBaseAmount.EnteredCurrencyRate	= PrmCurrencyRate
				BaseAmount							= LocalBaseAmount.OutputCurrencyAmount


		SetPrepayFlag is an Instance Action
			restricted
			Action Rules
				if (HasPrepayment)
					Prepayment			= Prepayment.Prepayment
					if	(ReceivablePrepaymentRel.ReferenceType.ProformaInvoice and ReceivableProcessLevel.ProformaPrepaymentReceivableGeneralLedgerCode entered)
						ReceivedNotAppliedReceivableGeneralLedgerCode = ReceivableProcessLevel.ProformaPrepaymentReceivableGeneralLedgerCode
					else
						ReceivedNotAppliedReceivableGeneralLedgerCode = ReceivableProcessLevel.PrepaymentReceivableGeneralLedgerCode
					FinanceDimension2	= ReceivablePrepayment.FinanceDimension2
					Project				= ReceivablePrepayment.Project
					ProjectContract		= ReceivablePrepayment.ProjectContract
				else
					Prepayment			= Prepayment.NotAPrepay
					ReceivedNotAppliedReceivableGeneralLedgerCode = ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
					FinanceDimension2	= blank
					Project				= blank
					ProjectContract		= blank

			Exit Rules
				if (Prepayment changed)
					if (Prepayment.Prepayment)
						if (ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode != ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode)
							invoke UpdateBatchTotals ReceivablePaymentHeader
								invoked.Detail					= false
								invoked.RNA						= true
								invoked.AmountCompanyCurrency	= ReceivablePayment.BaseAmount * -1
								invoked.Amount					= ReceivablePayment.TransactionAmount * -1
					else
					if (old ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode != ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode)
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= false
							invoked.RNA						= true
							invoked.AmountCompanyCurrency	= ReceivablePayment.BaseAmount
							invoked.Amount					= ReceivablePayment.TransactionAmount
				else
				if (ReceivedNotAppliedReceivableGeneralLedgerCode changed)
					if  (old ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode != ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
					and  ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode = ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode)
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= false
							invoked.RNA						= true
							invoked.AmountCompanyCurrency	= ReceivablePayment.BaseAmount
							invoked.Amount					= ReceivablePayment.TransactionAmount

					if  (ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode != ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
					and  old ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode = ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode)
						invoke UpdateBatchTotals ReceivablePaymentHeader
							invoked.Detail					= false
							invoked.RNA						= true
							invoked.AmountCompanyCurrency	= ReceivablePayment.BaseAmount * -1
							invoked.Amount					= ReceivablePayment.TransactionAmount * -1

				if (TypeOfPayment.CustomerPayment)
					include UpdateReceivableProjectTransaction



		CreateProjectTransactionFromARPayment is an Instance Action
			restricted





			Action Rules
				invoke Create ReceivableProjectTransaction
					fill in fields from this instance
					invoked.ReceivableProjectTransaction.TransType		= "P"
					invoked.ReceivableProjectTransaction.BatchNumber	= ReceivablePaymentHeader
					invoked.ReceivableProjectTransaction.Transaction	= PaymentNumber
					invoked.ReceivableProjectTransaction.PaymentSeq		= ReceivablePayment
					invoked.TransactionDate								= DepositDate
					invoked.DueDate										= DepositDate
					invoked.TransactionAmount							= TransactionAmount
















		UnSelectForAPInterface is an Instance Action
			default label is "UnselectForAPInterfacing"  
			valid when (HasARtoAPSelect)
			Action Rules
				invoke Delete ARToAPApplicationSelectRel


		SelectForAPInterface is an Instance Action
			valid when (IsARToAPInterfaceOkay)
			Action Rules
				constraint (!ReceivableApplicationSelectKeyRel exist)
					"PaymentAlreadyApplied"
				constraint (!ReceivableApplicationAdjustmentSelectSet3Rel exists)
					"PaymentAdjustmentExists"
				constraint (!ARToAPInterfaceReceivableApplicationRel exists)
					"PaymentIsAlreadyApplied"	
				if (ARToAPInterfaceReceivableApplication3Rel exists)
					constraint (!ARToAPInterfaceReceivableApplication3Rel.Status.ApplicationPosted
					or			!ReceivableInvoiceApplyReverseDetailKeyRel exist)
						"TransactionIsPostedAndNotReversed"
				constraint (!ReceivablePaymentApplyReverseHeaderRel exists)
					"CreditReversalExists;CannotInterfaceToAP"
				for each ReceivablePaymentApplyReverseDetailRel
					constraint (each.ReceivablePaymentApplyReverseDetail.CreditApplicationSequence not = LastApplicationSequence)
						"CreditReversalDetailExists;CannotInterfaceToAP"
				invoke Create ARToAPApplicationSelect
					invoked.Company									= Company
					invoked.Customer								= Customer
					invoked.ARToAPApplicationSelect.BatchNumber		= ReceivablePaymentHeader
					invoked.TransactionDate							= DepositDate
					invoked.ARToAPApplicationSelect.TransactionType	= TypeOfPayment
					invoked.ARToAPApplicationSelect.Invoice			= PaymentNumber
					invoked.ARToAPApplicationSelect.PaymentSeq		= ReceivablePayment
					invoked.Status									= 0
					invoked.DueDate									= blank
					invoked.BaseAmount								= (((BaseAmount + BaseCreditAppliedAmount) - (BaseAppliedAmount + BaseAdjustAmount)) * -1)
					invoked.TransactionAmount						= (((TransactionAmount + CreditAppliedAmount) - (AppliedAmount + AdjustAmountTransactionCurrency)) * -1)
					invoked.Currency								= OriginalCurrency
					invoked.TransientToCurrency						= Company.Currency


		NegotiatedDraftUpdate is an Update Action
			restricted
			bypass field rules
			Action Rules
				if (AppliedAmount >= TransactionAmount)
					Status = 7
					include UpdateForeignTradeAndPayments


		CancelPayment is an Instance Action
			restricted
			Parameters
				PrmCancelDate is Date
			Action Rules

				Status		= 7
				include UpdateForeignTradeAndPayments
				CancelDate	= PrmCancelDate

				if (Customer entered
				and ReturnToMakerBaseAmount entered)

					LocalReceivableTransactionSummary	= LocalReceivableTransactionSummary.PaymentsCharges

					invoke UpdateCurrentBalance CompanyCustomerRel
						invoked.ChangeAmount			= ReturnToMakerBaseAmount
						invoked.TransactionDate			= DepositDate
						invoked.PrmBalanceType			= 9	
						invoked.PrmReference			= Reference

					invoke UpdatePeriodTotals CompanyCustomerRel
						invoked.Type					= "R"
						invoked.Amount					= ReturnToMakerBaseAmount * -1
						invoked.EffectiveDate			= GeneralLedgerDate

					if (!ReceivableTransactionSummaryRel exists)
						invoke Create ReceivableTransactionSummaryRel

					invoke AddAmount ReceivableTransactionSummaryRel
						invoked.Amount					= ReturnToMakerBaseAmount

					include UpdateReceivableProjectTransaction

				else
					LocalReceivableTransactionSummary	= LocalReceivableTransactionSummary.NonArPaymentsEntered

					if (!ReceivableTransactionSummaryRel exists)
						invoke Create ReceivableTransactionSummaryRel

					if (BaseAmount entered)
						invoke AddAmount ReceivableTransactionSummaryRel
							invoked.Amount				= BaseAmount
			Exit Rules
				invoke FastUpdate ReceivablePaymentHeader
					invoked.bod id.VariationID += 1


		CreateReversal is an Instance Action
			default label is "CreateReversalHeader"
			valid when (AllowCreateReversal)
			Parameters
				ReversalDate							is Date
				PrmReceivableOperator					is like ReceivableOperator
				PrmBankTransactionCode					is a BankTransactionCode

			Parameter Rules
				ReversalDate
					required
					default to current corporate date
					initial value is current corporate date
				PrmReceivableOperator
					default to actor
					initial value is actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmReceivableOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"
				PrmBankTransactionCode
					if (PrmBankTransactionCode entered)
						constraint (PrmBankTransactionCode.BankTransactionType = "C" or PrmBankTransactionCode.BankTransactionType = "D")
							"BankTransactionCodeMustBeCashPaymentTypeOrBillOfExchangePaymentType"
						constraint (PrmBankTransactionCode.TransactionOrigin = "P")
							"BankTransactionCodeOriginMustBeAccountsPayableOrigin"

			Action Rules
				constraint (!ReceivablePaymentApplyReverseHeaderRel exists)
					"ReversalHeaderAlreadyCreated"
				if (Status.Historical) 
					constraint (Company.AllowHistoricalApplicationReversal)
						"PaymentCompanyDoesNotAllowHistoricalApplicationReversal"

				invoke Create ReceivablePaymentApplyReverseHeaderRel
					invoked.CreditTransactionNumber		= PaymentNumber
					invoked.CreditCustomer				= Customer
					invoked.GeneralLedgerDate			= ReversalDate
					invoked.ReceivableOperator			= PrmReceivableOperator
					invoked.BankTransactionCode			= PrmBankTransactionCode


		CreateAndNavigateToRTMPayment is an Instance Action
			valid when (ShowRTMPaymentAction)
			default label is "RTMPayment"
			Parameters
				ReturnDate								is Date
				PostDate								is Date
				PrmDescription							is a Description
				PrmRevalueCurrencyTransactions			is Boolean
				PrmTextCode								is a RTMPaymentLanguageText						
				PrmAdditionalAmount						is like InternationalAmount
				PrmChargeBank							is Boolean
				PrmBillback								is AlphaUpper size 1
					States
						YesBillBackAllAdjustments	value is "Y"
							default label is "BillBackAllAdjustments"
						BillNoAdjustments			value is "Z"
							default label is "BillNoAdjustments"
						NoOnlyBillSelectedAdjusts	value is "N"
							default label is "OnlyBillSelectedAdjustments"
				PrmDeriveNonARDistributions				is Boolean
				PrmCreditAccount						is a FinanceCodeBlock
				PrmDebitAccount							is a FinanceCodeBlock
				PrmAutoRelease							is Boolean
				PrmLanguageCode							is an IsoLocale								
			Parameter Rules
				ReturnDate
					if (!HasRTMs)
						required
							"ReturnDateIsRequired"
					initial value is DepositDate  

				PostDate
					initial value is GeneralLedgerDate 

				PrmTextCode																			
					if (PrmTextCode entered)
						PrmLanguageCode			=	CompanyCustomerRel.LanguageCode

				PrmBillback
					if (IsTypeCustomerPayment
					and AvailableAdjustmentsForRTMRelExists)
						required
							"BillbackIsRequired"

				PrmDeriveNonARDistributions
					initial value is true

				PrmAutoRelease
					initial value is true
					if (PrmBillback.NoOnlyBillSelectedAdjusts)
						PrmAutoRelease = false
					if  (IsNonARNotFundAccountingEnabled
					and !PrmDeriveNonARDistributions)
						PrmAutoRelease = false
			Action Rules	

				if (!HasRTMs)
					invoke UnreleasedRtm.Create RTMPaymentRel
						invoked.ReturnDate					= ReturnDate
						invoked.GeneralLedgerDate			= PostDate
						invoked.Description					= PrmDescription
						invoked.RevalueCurrencyTransactions	= PrmRevalueCurrencyTransactions
						invoked.TransientTextCode			= PrmTextCode							
						invoked.AdditionalAmount			= PrmAdditionalAmount
						invoked.ChargeBank					= PrmChargeBank
						invoked.CreditAccount				= PrmCreditAccount
						invoked.DebitAccount				= PrmDebitAccount
						if (!PrmBillback.BillNoAdjustments)
							invoked.Billback				= PrmBillback

					if  (IsNonARNotFundAccountingEnabled
					and !PrmDeriveNonARDistributions)
						invoke Delete RTMPaymentRel.UnreleasedNonARTypeRTMDistributionsRel

					if  (PrmAutoRelease)
						constraint (!PrmBillback.NoOnlyBillSelectedAdjusts)
							"Cannot_Release_Upon_SubmitIf_Only_Bill_Back_Selected_AdjustmentsIsChosen.Uncheck_Release_Upon_SubmitToContinue."
						invoke UnreleasedRtm.Release RTMPaymentRel

		TransferToNonAROpenOrReleasedUnassigned is an Instance Action
			default label is "TransferToNonAR"
			valid when (AllowTransferToNonAR)
			Parameters
				NonARTransferDate				is Date
				PrmReceivableDistributionArray	is a ReceivableDistributionArray

				PrmTransactionCodeBlock1			is a FinanceCodeBlock
				PrmTransactionCodeBlock2			is a FinanceCodeBlock
				PrmTransactionCodeBlock3			is a FinanceCodeBlock
				PrmTransactionCodeBlock4			is a FinanceCodeBlock
				PrmTransactionCodeBlock5			is a FinanceCodeBlock
				PrmTransactionCodeBlock6			is a FinanceCodeBlock
				PrmTransactionCodeBlock7			is a FinanceCodeBlock
				PrmTransactionCodeBlock8			is a FinanceCodeBlock
				PrmTransactionCodeBlock9			is a FinanceCodeBlock
				PrmTransactionCodeBlock10			is a FinanceCodeBlock
			Parameter Rules
				NonARTransferDate
					initial value is DerivedGeneralLedgerDate
					default to DerivedGeneralLedgerDate
			Action Rules
				if (Status.Open)
					invoke Open.TransferToNonAR
						invoked.NonARTransferDate				= NonARTransferDate
						invoked.PrmReceivableDistributionArray	= PrmReceivableDistributionArray
						invoked.PrmTransactionCodeBlock1		= PrmTransactionCodeBlock1
						invoked.PrmTransactionCodeBlock2		= PrmTransactionCodeBlock2
						invoked.PrmTransactionCodeBlock3		= PrmTransactionCodeBlock3
						invoked.PrmTransactionCodeBlock4		= PrmTransactionCodeBlock4
						invoked.PrmTransactionCodeBlock5		= PrmTransactionCodeBlock5
						invoked.PrmTransactionCodeBlock6		= PrmTransactionCodeBlock6
						invoked.PrmTransactionCodeBlock7		= PrmTransactionCodeBlock7
						invoked.PrmTransactionCodeBlock8		= PrmTransactionCodeBlock8
						invoked.PrmTransactionCodeBlock9		= PrmTransactionCodeBlock9
						invoked.PrmTransactionCodeBlock10		= PrmTransactionCodeBlock10
				else
				if (Status.ReleasedUnassigned)
					invoke ReleasedUnassigned.TransferToNonAR
						invoked.NonARTransferDate				= NonARTransferDate
						invoked.PrmReceivableDistributionArray	= PrmReceivableDistributionArray
						invoked.PrmTransactionCodeBlock1		= PrmTransactionCodeBlock1
						invoked.PrmTransactionCodeBlock2		= PrmTransactionCodeBlock2
						invoked.PrmTransactionCodeBlock3		= PrmTransactionCodeBlock3
						invoked.PrmTransactionCodeBlock4		= PrmTransactionCodeBlock4
						invoked.PrmTransactionCodeBlock5		= PrmTransactionCodeBlock5
						invoked.PrmTransactionCodeBlock6		= PrmTransactionCodeBlock6
						invoked.PrmTransactionCodeBlock7		= PrmTransactionCodeBlock7
						invoked.PrmTransactionCodeBlock8		= PrmTransactionCodeBlock8
						invoked.PrmTransactionCodeBlock9		= PrmTransactionCodeBlock9
						invoked.PrmTransactionCodeBlock10		= PrmTransactionCodeBlock10

		ChangeOperator is an Instance Action
			valid when (HasReverseHeader)
			Parameters
				PrmReceivableOperator					is like ReceivableOperator
			Parameter Rules
				PrmReceivableOperator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmReceivableOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"

			Action Rules
				invoke Update ReceivablePaymentApplyReverseHeaderRel
					invoked.ReceivableOperator			= PrmReceivableOperator


		UpdateSelectedApplicationGeneralLedgerDates is an Instance Action
			default label is "UpdateSelectedApplicationGlobalLedgerDates"
			completion message is "GlobalLedgerDatesHaveBeenUpdated"
			valid when (AllowUpdateGLDates)
			Parameters
				PrmGeneralLedgerDate		is Date
					default label is "GlobalLedgerDate"
			Action Rules
				for each ReceivableApplicationSelectRel
					invoke Update each
						invoked.GeneralLedgerDate		= PrmGeneralLedgerDate


		UpdateUnpostedApplicationGeneralLedgerDates is an Instance Action
			default label is "UpdateUnpostedApplicationGlobalLedgerDates"
			completion message is "GlobalLedgerDatesHaveBeenUpdated"
			valid when (HasUnpostedApplications)
			Parameters
				PrmGeneralLedgerDate		is Date
					default label is "GlobalLedgerDate"
			Action Rules
				for each UnpostedReceivableApplicationRel
					if (each.Status.UnreleasedCashApplication)
						invoke UnreleasedCashApplication.Update each
							invoked.GeneralLedgerDate		= PrmGeneralLedgerDate
					else
					if (each.Status.RequiresAuditListing)
						invoke RequiresAuditListing.Update each
							invoked.GeneralLedgerDate		= PrmGeneralLedgerDate
					else
					if (each.Status.AvailableForPosting)
						invoke AvailableForPosting.Update each
							invoked.GeneralLedgerDate		= PrmGeneralLedgerDate


		ReleaseAmendedCashDetails is an Instance Action
			default label is "ReleaseCashDetails"
			valid when (AllowReleaseCashDetails)
			Local Fields
				LocalReversingAmount 	is like InternationalAmount
				LocalNewAmount 			is like FinanceCurrencyAmountGroup
				LocalNewDistribution	is a ReceivableGLDistribution view
			Action Rules
				if (DetailRNADistributions)
					constraint (sum ReceivablePaymentCashDetail set.OpenAmount = PaymentOpen)
						"SumOf_\Open_\Cash_\DetailsMustEqual_\Payment_\Open_\Amount"
				else
					constraint (sum ReceivablePaymentCashDetail set.DistributionAmount.CurrencyAmount = TransactionAmount)
						"SumOf_\Cash_\DetailsMustEqual_\Payment_\Amount"

				if (CashDetailState.Unreleased) // for after using the AddCashDetails action. not used when in state "Amended"
					if (DetailRNADistributions)
						LocalReversingAmount = PaymentOpen
					else
						LocalReversingAmount = TransactionAmount


					invoke CreatePaymentDistribution ReceivableGLDistribution
						assign result to LocalNewDistribution
						invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
						invoked.ReceivableCompanyGroup.OriginCompany					= Company
						invoked.BatchNumber												= ReceivablePaymentHeader
						invoked.SequenceNumber											= ReceivablePayment
						invoked.AccumulationType										= "D"
						invoked.DocumentNumber											= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
						invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
						invoked.Description												= "Batch " + ReceivablePaymentHeader + " cash entry"
						invoked.BypassStructureRelationEdit								= true
						invoked.ReceivableCompanyGroup.GlCompany						= Company
						invoked.DistributionAmount.CurrencyAmount						= -1 * LocalReversingAmount
						invoked.OriginalCurrency										= OriginalCurrency
						invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
						invoked.Status													= 2
						invoked.GeneralLedgerDate										= GeneralLedgerDate
						if (TypeOfPayment.NonArPayment)
							invoked.TransientNonARCashOffset							= true
						else
							invoked.TransType											= "P"
						invoked.Invoice													= PaymentNumber
						invoked.ReceivableCompanyDataGroup.Customer						= Customer

					if (DetailRNADistributions)

						invoke CreatePaymentDistribution ReceivableGLDistribution
							invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
							invoked.ReceivableCompanyGroup.OriginCompany					= Company
							invoked.BatchNumber												= ReceivablePaymentHeader
							invoked.SequenceNumber											= ReceivablePayment
							invoked.AccumulationType										= "D"
							invoked.DocumentNumber											= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
							invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
							invoked.Description												= "Batch " + ReceivablePaymentHeader + " cash entry"
							invoked.BypassStructureRelationEdit								= true
							invoked.ReceivableCompanyGroup.GlCompany						= Company
							invoked.DistributionAmount.CurrencyAmount						= LocalReversingAmount
							invoked.OriginalCurrency										= OriginalCurrency
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
							invoked.Status													= 2
							invoked.GeneralLedgerDate										= GeneralLedgerDate
							invoked.TransType												= "P"
							invoked.Invoice													= PaymentNumber
							invoked.ReceivableCompanyDataGroup.Customer						= Customer





				if (LocalNewDistribution entered)
					invoke ReleaseCashDetails
						invoked.PrmAmount = LocalNewDistribution.DistributionAmount
				else
					invoke ReleaseCashDetails

				CashDetailState = CashDetailState.Released


		ReleaseCashDetails is an Instance Action
			restricted
			Parameters
				PrmAmount 					is like FinanceCurrencyAmountGroup
				FromReleaseOfPaymentBatch 	is Boolean
			Local Fields
				LocalLastCashDetail 		is like ReceivablePaymentCashDetail
			Action Rules
				if (FromReleaseOfPaymentBatch)
					initialize LocalCurrencyCalculationGroup
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					LocalCurrencyCalculationGroup.ExchangeDate					= DepositDate
					LocalCurrencyCalculationGroup.CurrencyAmount				= TransactionAmount
					LocalCurrencyCalculationGroup.FromCurrency					= OriginalCurrency
					LocalCurrencyTable 											= ReceivablePaymentHeader.CurrencyTable

					LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
					LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= Company.AccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= Company.AccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= Company.AccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyOne
					LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
					LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyThree
					LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFour
					LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFive

					PrmAmount.FunctionalAmount.EnteredCurrencyAmount			= -1 * LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
					if (Company.AccountingEntity.AlternateCurrency entered)
						PrmAmount.AlternateAmount.EnteredCurrencyAmount			= -1 * LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
					if (Company.AccountingEntity.AlternateCurrency2 entered)
						PrmAmount.AlternateAmount2.EnteredCurrencyAmount		= -1 * LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
					if (Company.AccountingEntity.AlternateCurrency3 entered)
						PrmAmount.AlternateAmount3.EnteredCurrencyAmount		= -1 * LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
					if (Company.FinanceEnterpriseGroup.ReportCurrencyOne entered)
						PrmAmount.ReportAmount1.EnteredCurrencyAmount			= -1 * LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
					if (Company.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
						PrmAmount.ReportAmount2.EnteredCurrencyAmount			= -1 * LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
					if (Company.FinanceEnterpriseGroup.ReportCurrencyThree entered)
						PrmAmount.ReportAmount3.EnteredCurrencyAmount			= -1 * LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
					if (Company.FinanceEnterpriseGroup.ReportCurrencyFour entered)
						PrmAmount.ReportAmount4.EnteredCurrencyAmount			= -1 * LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
					if (Company.FinanceEnterpriseGroup.ReportCurrencyFive entered)
						PrmAmount.ReportAmount5.EnteredCurrencyAmount			= -1 * LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount

				LocalLastCashDetail = last UnreleasedPaymentCashDetailsRel.ReceivablePaymentCashDetail
				for each UnreleasedPaymentCashDetailsRel

					PrmAmount.FunctionalAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					PrmAmount.AlternateAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
					PrmAmount.AlternateAmount2.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					PrmAmount.AlternateAmount3.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					PrmAmount.ReportAmount1.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
					PrmAmount.ReportAmount2.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
					PrmAmount.ReportAmount3.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
					PrmAmount.ReportAmount4.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
					PrmAmount.ReportAmount5.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

					if (each.ReceivablePaymentCashDetail = LocalLastCashDetail)
						PrmAmount.FunctionalAmount.EnteredCurrencyAmount 	*= -1
						PrmAmount.AlternateAmount.EnteredCurrencyAmount 	*= -1
						PrmAmount.AlternateAmount2.EnteredCurrencyAmount 	*= -1
						PrmAmount.AlternateAmount3.EnteredCurrencyAmount 	*= -1
						PrmAmount.ReportAmount1.EnteredCurrencyAmount 		*= -1
						PrmAmount.ReportAmount2.EnteredCurrencyAmount 		*= -1
						PrmAmount.ReportAmount3.EnteredCurrencyAmount 		*= -1
						PrmAmount.ReportAmount4.EnteredCurrencyAmount 		*= -1
						PrmAmount.ReportAmount5.EnteredCurrencyAmount 		*= -1

						invoke RoundingUpdate each
							invoked.PrmRoundAmount = PrmAmount

					invoke Release each
						invoked.FromReleaseOfPaymentBatch = FromReleaseOfPaymentBatch


		AddCashDetails is an Instance Action
			valid when (AllowAddCashDetails)
			Parameters
				PrmGlobalLedgerDate				is Date
					default label is "GlobalLedgerDate"
			Parameter Rules
				PrmGlobalLedgerDate
					required
					initial value is GeneralLedgerDate
					default to GeneralLedgerDate
					if (CompanySystemClosingControlRel.Control
					and Company.VerifyGLDateWithinGLDateRange)
						constraint (PrmGlobalLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
							"GlobalLedgerDate<PrmGlobalLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
			Action Rules
				GeneralLedgerDate		= PrmGlobalLedgerDate
				CashDetailState 		= CashDetailState.Unreleased





























































































		GetCashDetailAmountForPrepaymentApply is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmDBCompany										is like ReceivableCompany
				PrmDBTransactionType								is like ReceivableInvoiceType
				PrmDBInvoice										is like ReceivableInvoice
				PrmDBPaymentSeq										is like Sequence
			Action Rules
				DBCompany 											= PrmDBCompany
				DBTransactionType 									= PrmDBTransactionType
				DBInvoice 											= PrmDBInvoice
				DBPaymentSeq 										= PrmDBPaymentSeq
				LocalAnswer 										= LocalDBInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
				LocalPaymentCashDetailAccount 						= LocalDBInvoiceDetailRel.TransientAdditionalDimensions
				TransientCashDetailAmountRemaining					= sum LocalPaymentCashDetailRel.OpenAmount
				if (LocalPaymentCashDetailRel exists)
					TransientCashDetailExists = true


		DeleteReversal is an Instance Action
			default label is "DeleteReversalHeader"
			valid when (HasReverseHeader)
			Action Rules
				invoke Delete ReceivablePaymentApplyReverseHeaderRel


		ReleaseReversal is an Instance Action
			default label is "ProcessReversal"
			valid when (HasReverseDetail)	
			Action Rules
				invoke Release ReceivablePaymentApplyReverseHeaderRel


		ReleaseReversalForIntercompanySettlementReversal is an Instance Action	
			restricted
			default label is "Release"
			valid when (HasReverseHeader)
			completion message is "ReleaseActionSubmitted"
			Action Rules
				invoke ReleaseForIntercompanySettlementReversal ReceivablePaymentApplyReverseHeaderRel	


		CreateAndReverseAll is an Instance Action 
			valid when (ShowCreateAndReverseAll)
			Parameters
				ReversalDate							is Date
				PrmReceivableOperator					is like ReceivableOperator
					default label is "Operator"
				UpdateReverseTransactionsPaymentCode	is a BankTransactionCode
				NoCreditMemos							is Boolean
				PrmProcessReversals						is Boolean
					default label is "ProcessReversal"
			Parameter Rules
				ReversalDate
					required
					default to current corporate date
					initial value is current corporate date
				PrmReceivableOperator
					default to actor
					initial value is actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmReceivableOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"
				UpdateReverseTransactionsPaymentCode
					if (UpdateReverseTransactionsPaymentCode entered)
						constraint (UpdateReverseTransactionsPaymentCode.BankTransactionType = "C" or UpdateReverseTransactionsPaymentCode.BankTransactionType = "D")
							"BankTransactionCodeMustBeCashPaymentTypeOrBillOfExchangePaymentType"
						constraint (UpdateReverseTransactionsPaymentCode.TransactionOrigin = "P")
							"BankTransactionCodeOriginMustBeAccountsPayableOrigin"
				PrmProcessReversals
					initial value is true
			Action Rules
				constraint (!ReceivablePaymentApplyReverseHeaderRel exists)
					"ReversalHeaderAlreadyCreated"
				if (Status.Historical) 
					constraint (Company.AllowHistoricalApplicationReversal)
						"PaymentCompanyDoesNotAllowHistoricalApplicationReversal"

				invoke Create ReceivablePaymentApplyReverseHeaderRel
					invoked.CreditTransactionNumber		= PaymentNumber
					invoked.CreditCustomer				= Customer
					invoked.GeneralLedgerDate			= ReversalDate
					invoked.ReceivableOperator			= PrmReceivableOperator
					invoked.BankTransactionCode			= UpdateReverseTransactionsPaymentCode

				if (NoCreditMemos) 
					for each PostedApplicationsAvailableToReverseRel
						if (!each.ReceivableApplication.TransType.CreditMemo)
							invoke ApplicationPosted.SelectForReversal each
				else
					for each PostedApplicationsAvailableToReverseRel
						invoke ApplicationPosted.SelectForReversal each

				if (PrmProcessReversals
				and HasReverseDetail)
					invoke ReleaseReversal

		ReverseAll is an Instance Action 
			default label is "SelectAllForReversal"
			valid when (ShowReverseAll)
			Action Rules
				constraint (ReceivablePaymentApplyReverseHeaderRel exists)
					"ReversalHeaderNotYetCreated"
				for each PostedApplicationsAvailableToReverseRel
					invoke ApplicationPosted.SelectForReversal each

		UpdateForeignTradeAndPayments is an Instance Action
			restricted
			Action Rules
				include UpdateForeignTradeAndPayments

		BatchReleaseDetailDistributions is a Set Action
			restricted
			default label is "ReleaseInterfacePayments"
			Parameters
				PrmCompany			is a ReceivableCompany
				PrmHeader			is a ReceivablePaymentHeader
				PrmBypassActiveCodeBlockEdit is a BypassActiveCodeBlockEdit		

			Instance Selection
				where (Company	= PrmCompany
				and	ReceivablePaymentHeader = PrmHeader
				and	TransactionAmount entered)

			Action Rules

				Set Rules
					Exit Rules
						invoke FastUpdate PrmHeader
							invoked.bod id.VariationID += 1
							invoked.LocalTriggerFrom = "ReceivablePaymentHeaderRelease"
							invoked.LocalNativeLPLRestrict = "ReceivablePayment"
							invoked.LocalProcessingMethod = "NativeLPL"

				Instance Rules
					if (Company.DetailedCashDistributions
					and CashDetailState.Released)
						invoke ReleaseCashDetails
							invoked.FromReleaseOfPaymentBatch = true
					else
						invoke CreatePaymentDistribution ReceivableGLDistribution
							invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
							invoked.ReceivableCompanyGroup.OriginCompany					= Company
							invoked.BatchNumber												= ReceivablePaymentHeader
							invoked.SequenceNumber											= ReceivablePayment
							invoked.AccumulationType										= "D"
							invoked.DocumentNumber											= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
							invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
							invoked.Description												= "Batch " + ReceivablePaymentHeader + " cash entry"
							invoked.BypassStructureRelationEdit								= true 
							invoked.ReceivableCompanyGroup.GlCompany						= Company
							invoked.DistributionAmount.CurrencyAmount						= TransactionAmount
							invoked.OriginalCurrency										= OriginalCurrency
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
							invoked.Status													= 2
							invoked.GeneralLedgerDate										= GeneralLedgerDate
							if (TypeOfPayment.NonArPayment)
								invoked.TransientNonARCashOffset							= true				
							else
								invoked.TransType											= "P"
							invoked.Invoice													= PaymentNumber
							invoked.ReceivableCompanyDataGroup.Customer						= Customer
							if (Company.FinanceEnterpriseGroup.FundAccounting)
								invoked.TransientUpdateCashCodeFund							= true
							invoked.BypassActiveCodeBlockEdit								= PrmBypassActiveCodeBlockEdit		

						if (TypeOfPayment.CustomerPayment)
							invoke CreatePaymentDistribution ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
								invoked.ReceivableCompanyGroup.OriginCompany					= Company
								invoked.BatchNumber												= ReceivablePaymentHeader
								invoked.SequenceNumber											= ReceivablePayment
								invoked.AccumulationType										= "D"
								invoked.DocumentNumber											= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
								invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
								invoked.Description												= "Batch " + ReceivablePaymentHeader + " cash entry"
								invoked.BypassStructureRelationEdit								= true 
								invoked.ReceivableCompanyGroup.GlCompany						= Company
								invoked.DistributionAmount.CurrencyAmount						= TransactionAmount * -1
								invoked.OriginalCurrency										= OriginalCurrency
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
								invoked.Status													= 2
								invoked.GeneralLedgerDate										= GeneralLedgerDate
								invoked.TransType												= "P"
								invoked.Invoice													= PaymentNumber
								invoked.ReceivableCompanyDataGroup.Customer						= Customer
								invoked.BypassActiveCodeBlockEdit								= PrmBypassActiveCodeBlockEdit		


		ReleaseFundNonARDistributions is a Set Action
			restricted
			default label is "ReleaseInterfacePayments"
			Parameters
				PrmCompany			is a ReceivableCompany
				PrmHeader			is a ReceivablePaymentHeader
				PrmBypassActiveCodeBlockEdit is a BypassActiveCodeBlockEdit

			Accumulators
				TotalCustomerPaymentAmount

			Instance Selection
				where (Company	= PrmCompany
				and	ReceivablePaymentHeader = PrmHeader
				and	TransactionAmount entered)

			Action Rules

				Set Rules
					Exit Rules
						invoke FastUpdate PrmHeader
							invoked.bod id.VariationID += 1
							invoked.LocalTriggerFrom = "ReceivablePaymentHeaderRelease"
							invoked.LocalNativeLPLRestrict = "ReceivablePayment"
							invoked.LocalProcessingMethod = "NativeLPL"
						if (TotalCustomerPaymentAmount entered)			
							invoke CreatePaymentDistribution ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.ReceivableCompanyDataGroup.TransactionCompany			= PrmCompany
								invoked.ReceivableCompanyGroup.OriginCompany					= PrmCompany
								invoked.BatchNumber												= PrmHeader
								invoked.AccumulationType										= "S"
								invoked.DocumentNumber											= "6-" + PrmHeader.PaymentHeaderString
								invoked.ReceivableGLDistribution.GeneralLedgerAccount			= PrmHeader.CompanyCashCodeRel.CashAccount
								invoked.Description												= "Batch " + PrmHeader + " cash entry"
								invoked.BypassStructureRelationEdit								= true 
								invoked.ReceivableCompanyGroup.GlCompany						= PrmCompany
								invoked.DistributionAmount.CurrencyAmount						= TotalCustomerPaymentAmount
								invoked.OriginalCurrency										= PrmHeader.Currency
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PrmHeader.CurrencyRate
								invoked.Status													= 2
								invoked.GeneralLedgerDate										= PrmHeader.GeneralLedgerDate
								invoked.TransType												= "P"
								invoked.TransientUpdateCashCodeFund								= true

							invoke CreatePaymentDistribution ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.ReceivableCompanyDataGroup.TransactionCompany			= PrmCompany
								invoked.ReceivableCompanyGroup.OriginCompany					= PrmCompany
								invoked.BatchNumber												= PrmHeader
								invoked.AccumulationType										= "S"
								invoked.DocumentNumber											= "6-" + PrmHeader.PaymentHeaderString
								invoked.ReceivableGLDistribution.GeneralLedgerAccount			= PrmHeader.ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
								invoked.Description												= "Batch " + PrmHeader + " cash entry"
								invoked.BypassStructureRelationEdit								= true 
								invoked.ReceivableCompanyGroup.GlCompany						= PrmCompany
								invoked.DistributionAmount.CurrencyAmount						= TotalCustomerPaymentAmount * -1
								invoked.OriginalCurrency										= PrmHeader.Currency
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= PrmHeader.CurrencyRate
								invoked.Status													= 2
								invoked.GeneralLedgerDate										= PrmHeader.GeneralLedgerDate
								invoked.TransType												= "P"

				Instance Rules
					if (TypeOfPayment.NonArPayment)
						for each NonARReceivableGLDistributionRel
							initialize LocalCalculateReceivableFinanceStructure
							LocalCalculateReceivableFinanceStructure.InputReceivableCompany = each.ReceivableCompanyDataGroup.TransactionCompany
							LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution = each.ReceivableGLDistribution
							LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType	= "R"
							LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock = ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
							LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

							if (each.DistributionAmount.CurrencyAmount != 0)
								invoke CreatePaymentDistribution ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup										= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany				= Company
									invoked.ReceivableCompanyGroup.OriginCompany						= Company
									invoked.BatchNumber													= ReceivablePaymentHeader
									invoked.SequenceNumber												= ReceivablePayment
									invoked.AccumulationType											= "D"
									invoked.DocumentNumber												= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
									invoked.ReceivableGLDistribution.GeneralLedgerAccount				= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
									invoked.BypassStructureRelationEdit									= true
									invoked.Description													= "Batch " + ReceivablePaymentHeader + " cash entry"
									invoked.ReceivableCompanyGroup.GlCompany							= Company
									invoked.DistributionAmount											= each.DistributionAmount
									invoked.DistributionAmount.CurrencyAmount							= each.DistributionAmount.CurrencyAmount * -1
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount	* -1
									invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ProjectAmount.EnteredCurrencyAmount		= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ReportAmount1.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ReportAmount2.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ReportAmount3.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ReportAmount4.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.ReportAmount5.EnteredCurrencyAmount		= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount * -1
									invoked.DistributionAmount.KeepRateAndAmount						= true
									invoked.OriginalCurrency											= OriginalCurrency
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= CurrencyRate
									invoked.Status														= 2
									invoked.GeneralLedgerDate											= GeneralLedgerDate

									invoked.TransientNonARCashOffset									= true					
									invoked.Invoice														= PaymentNumber
									invoked.ReceivableCompanyDataGroup.Customer							= Customer
									invoked.TransientUpdateCashCodeFund									= true
									invoked.CategoryType 												= "N"				   

					if (TypeOfPayment.CustomerPayment)
						if (Company.DetailGLTransPerPayment.YesDetailAccrualInterfacing										
						or  ReceivedNotAppliedReceivableGeneralLedgerCode != ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode)
							invoke CreatePaymentDistribution ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
								invoked.ReceivableCompanyGroup.OriginCompany					= Company
								invoked.BatchNumber												= ReceivablePaymentHeader
								invoked.SequenceNumber											= ReceivablePayment
								invoked.AccumulationType										= "D"
								invoked.DocumentNumber											= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
								invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivablePaymentHeader.CompanyCashCodeRel.CashAccount
								invoked.Description												= "Batch " + ReceivablePaymentHeader + " cash entry"
								invoked.BypassStructureRelationEdit								= true 
								invoked.ReceivableCompanyGroup.GlCompany						= Company
								invoked.DistributionAmount.CurrencyAmount						= TransactionAmount
								invoked.OriginalCurrency										= OriginalCurrency
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
								invoked.Status													= 2
								invoked.GeneralLedgerDate										= GeneralLedgerDate
								invoked.TransType												= "P"
								invoked.Invoice													= PaymentNumber
								invoked.ReceivableCompanyDataGroup.Customer						= Customer
								invoked.TransientUpdateCashCodeFund								= true

							invoke CreatePaymentDistribution ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
								invoked.ReceivableCompanyGroup.OriginCompany					= Company
								invoked.BatchNumber												= ReceivablePaymentHeader
								invoked.SequenceNumber											= ReceivablePayment
								invoked.AccumulationType										= "D"
								invoked.DocumentNumber											= "6-" + ReceivablePaymentHeader.PaymentHeaderString + "-" + PaymentString
								invoked.ReceivableGLDistribution.GeneralLedgerAccount			= ReceivedNotAppliedReceivableGeneralLedgerCode.DistributionAccount
								invoked.Description												= "Batch " + ReceivablePaymentHeader + " cash entry"
								invoked.BypassStructureRelationEdit								= true 
								invoked.ReceivableCompanyGroup.GlCompany						= Company
								invoked.DistributionAmount.CurrencyAmount						= TransactionAmount * -1
								invoked.OriginalCurrency										= OriginalCurrency
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
								invoked.Status													= 2
								invoked.GeneralLedgerDate										= GeneralLedgerDate
								invoked.TransType												= "P"
								invoked.Invoice													= PaymentNumber
								invoked.ReceivableCompanyDataGroup.Customer						= Customer
						else
							TotalCustomerPaymentAmount += TransactionAmount						

		ReleaseBatchPayments is a Set Action
			restricted
			default label is "ReleaseInterfacePayments"
			Parameters
				PrmCompany			is a ReceivableCompany
				PrmHeader			is a ReceivablePaymentHeader
			Instance Selection
				where (Company	= PrmCompany
				and	ReceivablePaymentHeader = PrmHeader)

			Action Rules
				Instance Rules
					invoke Release


		CreateTaxLineItemsNonARPayments is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmHeader					is a ReceivablePaymentHeader
				PrmReceivablePayment		is like ReceivablePayment
				PrmReleaseBatch				is Boolean

			Sort Order is Set2
			Instance Selection
				where (Company				= PrmCompany
				and	   ReceivablePaymentHeader = PrmHeader
				and    TypeOfPayment			= "N"
				and   (PrmReceivablePayment not entered
				or     ReceivablePayment = PrmReceivablePayment))

			Action Rules

				Set Rules
					Exit Rules
						invoke ProcessOneSourceForNonARPayments ReceivablePayment
							invoked.PrmCompany				= PrmCompany
							invoked.PrmHeader				= PrmHeader
							invoked.PrmReceivablePayment	= PrmReceivablePayment
							invoked.PrmReleaseBatch			= PrmReleaseBatch

				Instance Rules
					ErrorMessage	= blank
					if (HasOneSourceSourceOfLinkedTaxDistributions)
						invoke ResetSourceOfLinkedTaxDistributions LinkedTaxGroupSourceOfLinkedTaxDistributionRel
					if (HasOneSourceTaxableDistributions)
						invoke NonARPaymentCreateTaxLineItem LinkedTaxGroupTaxableDistributionsRel


		ProcessOneSourceForNonARPayments is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmHeader					is a ReceivablePaymentHeader
				PrmReceivablePayment		is like ReceivablePayment
				PrmReleaseBatch				is Boolean
				PrmErrorOccurred			is Boolean

			Local Fields
				LocalErrorOccurred				is Boolean
				LocalErrorMessage				is Alpha 150
				LocalTaxableDistributions		is Numeric 6

			Sort Order is Set2
			Instance Selection
				where (Company				= PrmCompany
				and	   ReceivablePaymentHeader = PrmHeader
				and    TypeOfPayment			= "N"
				and   (PrmReceivablePayment not entered
				or     ReceivablePayment = PrmReceivablePayment))

			Action Rules

				Set Rules
					Exit Rules
						if (PrmReleaseBatch)
							if (!PrmErrorOccurred)

								invoke TransitionBackgroundProcessing PrmHeader
									invoked.PrmBackgroundProcessing		= 1

								invoke OpenBatchUnreleased.Release PrmHeader
									resume on error
										LocalErrorOccurred				= true
										LocalErrorMessage				= error message

								if (LocalErrorOccurred)
									invoke TransitionBackgroundProcessing PrmHeader
										invoked.PrmBackgroundProcessing	= 2
										invoked.PrmErrorMessage			= LocalErrorMessage
								else
									invoke TransitionBackgroundProcessing PrmHeader
										invoked.PrmBackgroundProcessing		= 3
							else
								invoke TransitionBackgroundProcessing PrmHeader
									invoked.PrmBackgroundProcessing		= 2
									invoked.PrmErrorMessage				= NonARPaymentsFailedToReleaseMsg

				Instance Rules
					if (!PrmErrorOccurred)
						if (HasOneSourceTaxableDistributions)
							invoke CallOneSource
								resume on error
									PrmErrorOccurred	= true
									ErrorMessage		= error message

							if (!PrmErrorOccurred)

								initialize LocalTaxableDistributions
								initialize LocalLastDistributionSequence
								for each LinkedTaxGroupTaxableDistributionsRel
									if (each.first NonARPaymentTaxLineItemRel.TaxDetailOutRel.TaxAmount entered)
										LocalTaxableDistributions		+= 1
										LocalLastDistributionSequence	= each.LastDistributionSequence
										invoke OneSourceProcessNonARDistributionForTax each
											resume on error
												PrmErrorOccurred	= true
												ErrorMessage		= error message

								if (!PrmErrorOccurred
								and  PrmReleaseBatch)
									invoke OneSourceRoundLastNonARTaxableDistribution
										resume on error
											PrmErrorOccurred	= true
											ErrorMessage		= error message
										invoked.PrmNumberOfTaxableDistributions		= LocalTaxableDistributions
										invoked.PrmDistributionSequence				= LocalLastDistributionSequence

					if (!PrmReleaseBatch)
						initialize BackgroundProcessing


		OneSourceRoundLastNonARTaxableDistribution is an Instance Action
			restricted
			Parameters
				PrmNumberOfTaxableDistributions		is Numeric 6
				PrmDistributionSequence				is a DistSeq
			Local Fields
				LocalSumOfDistributions			is like InternationalAmount
				LocalDifference					is like InternationalAmount
				AllowableToleranceAmount		is like InternationalAmount
				LocalDistributionAmount			is like InternationalAmount
				LocalLowerLimitRoundingAmount	is like InternationalAmount
				LocalUpperLimitRoundingAmount	is like InternationalAmount
			Action Rules

				constraint (TransactionAmount entered)
					"TransactionAmountIsEmpty"

				LocalSumOfDistributions 				= SumOfDistributions
				if (LinkedTaxGroupLinkedTaxDistributionRel exists)

					if (LocalSumOfDistributions != TransactionAmount)

						LocalDifference 				= TransactionAmount - LocalSumOfDistributions
						if (LocalDifference < 0)
							LocalDifference 			= -1 * LocalDifference

						AllowableToleranceAmount 		= 0.01 * PrmNumberOfTaxableDistributions

						LocalLowerLimitRoundingAmount 	= TransactionAmount - AllowableToleranceAmount
						LocalUpperLimitRoundingAmount 	= TransactionAmount + AllowableToleranceAmount

						constraint (LocalDifference <= AllowableToleranceAmount)
							"SumOfDistributions<LocalSumOfDistributions>IsNotWithinTheEstablishedRoundingToleranceRangeOf<LocalLowerLimitRoundingAmount>-<LocalUpperLimitRoundingAmount>ForTheTransactionAmountOf<TransactionAmount>"

						LocalLastDistributionSequence	= PrmDistributionSequence
						LocalDistributionAmount 		= first ReceivableGLDistributionLastTaxableRel.DistributionAmount.CurrencyAmount
						LocalDistributionAmount 		= LocalDistributionAmount + (TransactionAmount - LocalSumOfDistributions)

						invoke Update first ReceivableGLDistributionLastTaxableRel
							invoked.DistributionAmount.CurrencyAmount 	= LocalDistributionAmount
							invoked.AllowLinkedTaxUpdate                = true

						SumOfNonARReceivableGLDistributionRelAmountsDone = false
				else
					constraint (LocalSumOfDistributions = TransactionAmount)
						"NoTaxDistributionsWereCreated;SumOfDistributionAmounts<LocalSumOfDistributions>DoesNotEqualTransactionAmount<TransactionAmount>ForPayment<PaymentNumber>"


		OneSourcePaymentDistributionCleanup is an Instance Action 
			restricted
			Parameters
				PrmErrorOccurred	is Boolean
			Action Rules
				if (PrmErrorOccurred)
					for each OneSourceTaxableDistributionsRel
						if (each.OneSourceCreatedTaxDistribution)
							invoke ClearTaxCodeAndTaxableAmount each
							invoke Delete each
				else
					ErrorMessage	= blank
					for each OneSourceTaxableDistributionsRel
						if (!each.OneSourceCreatedTaxDistribution)
							invoke ClearTaxCodeAndTaxableAmount each


		OneSourcePaymentDistributionCleanupTaxCode is an Instance Action 
			restricted
			Action Rules
				ErrorMessage	= blank
				invoke ClearTaxCodeAndTaxableAmount OneSourceTaxableDistributionsRel


		CallOneSource is an Instance Action
			restricted
			Action Rules
				include CallOneSource


		OneSourceInterfaceNonARPaymentCreateTaxLineItems is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions		is Numeric 6
			Action Rules
				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel
				if (LocalNumberOfDistributions > 0)
					for each LinkedTaxGroupTaxableDistributionsRel
						invoke NonARPaymentCreateTaxLineItem each


		OneSourceInterfaceNonARPaymentVerifyTaxTolerance is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions			is Numeric 6
				LocalToleranceAmountLimit			is an InternationalAmount
				LocalToleranceAmountLimitTransCurr	is an InternationalAmount
				LocalAmountVariance					is an InternationalAmount
				LocalCalculatedTaxAmount			is an InternationalAmount
				LocalGivenTaxAmount					is an InternationalAmount
				LocalLinkedTaxCode					is like TaxCode
				LocalLinkedTaxableAmount			is like InternationalAmount
			Action Rules

				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel

				if (LocalNumberOfDistributions > 0)
					include CallOneSource

					for each LinkedTaxGroupTaxableDistributionsRel

						initialize LocalCalculatedTaxAmount
						for each each.first NonARPaymentTaxLineItemRel.TaxDetailOutRel
							LocalCalculatedTaxAmount += each.TaxAmount

						initialize LocalGivenTaxAmount
						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							LocalGivenTaxAmount += each.DistributionAmount.CurrencyAmount

						constraint (LocalCalculatedTaxAmount entered)
							"Distribution_\Error:_\DistributionWithGivenTaxAmount<LocalGivenTaxAmount>AndUNSPSCCode<each.ReceivableCompanyDataGroup.UNSPSCCode.UNSPSCCodeDisplay>ReturnedAnExemptTaxResponse"

						if (TaxEntityRel.UseTaxCodeAccounts)
							LocalTaxCode 				= each.TaxCode
							LocalToleranceAmountLimit 	= EntityTaxCodeRel.TaxToleranceAmount
						else
							LocalToleranceAmountLimit 	= TaxEntityRel.TaxToleranceAmount

						if (LocalToleranceAmountLimit entered)

							if (Company.AccountingEntity.FunctionalCurrency entered
							and	each.OriginalCurrency != Company.AccountingEntity.FunctionalCurrency)
								initialize LocalCurrencyWork
								LocalCurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								LocalCurrencyWork.ExchangeDate				= DepositDate
								LocalCurrencyWork.TransactionAmount			= LocalToleranceAmountLimit
								LocalCurrencyWork.FromCurrency				= Company.AccountingEntity.FunctionalCurrency
								LocalCurrencyWork.BaseAmount.ToCurrency		= each.OriginalCurrency
								LocalToleranceAmountLimitTransCurr			= LocalCurrencyWork.BaseAmount.OutputCurrencyAmount
							else
								LocalToleranceAmountLimitTransCurr			= LocalToleranceAmountLimit

							LocalAmountVariance			= LocalGivenTaxAmount - LocalCalculatedTaxAmount
							if (LocalAmountVariance < 0)
								LocalAmountVariance 	= LocalAmountVariance * -1

							if (LocalToleranceAmountLimitTransCurr entered)
								constraint (LocalAmountVariance <= LocalToleranceAmountLimitTransCurr)
									"Distribution_\Error:_\TheDifference<LocalAmountVariance>BetweenGivenTaxAmount<LocalGivenTaxAmount>AndCalculatedAmount<LocalCalculatedTaxAmount>IsGreaterThanTheToleranceLimit<LocalToleranceAmountLimitTransCurr>"
						else
							constraint (LocalCalculatedTaxAmount = LocalGivenTaxAmount)
								"Distribution_\Error:_\TaxTolerancesAreNotEstablished;DistributionAmount<LocalGivenTaxAmount>MustEqualCalculatedTaxAmount<LocalCalculatedTaxAmount>"

					for each LinkedTaxGroupTaxableDistributionsRel

						LocalLinkedTaxCode 							= each.TaxCode
						LocalLinkedTaxableAmount					= each.TransactionTaxableAmount

						invoke FastUpdate each
							invoked.LinkedTaxGroup.Indicator    	= "S"
							initialize invoked.TaxCode
							initialize invoked.TransactionTaxableAmount

						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							invoke FastUpdate each
								invoked.LinkedTaxGroup.Indicator 	= "T"
								invoked.TaxCode						= LocalLinkedTaxCode
								invoked.TransactionTaxableAmount	= LocalLinkedTaxableAmount


		VertexInterfaceNonARPaymentCreateTaxLineItems is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions		is Numeric 6
			Action Rules
				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel
				if (LocalNumberOfDistributions > 0)
					for each LinkedTaxGroupTaxableDistributionsRel
						invoke NonARPaymentCreateTaxLineItem each


		VertexInterfaceNonARPaymentVerifyTaxTolerance is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions			is Numeric 6
				LocalToleranceAmountLimit			is an InternationalAmount
				LocalToleranceAmountLimitTransCurr	is an InternationalAmount
				LocalAmountVariance					is an InternationalAmount
				LocalCalculatedTaxAmount			is an InternationalAmount
				LocalGivenTaxAmount					is an InternationalAmount
				LocalLinkedTaxCode					is like TaxCode
				LocalLinkedTaxableAmount			is like InternationalAmount
			Action Rules

				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel

				if (LocalNumberOfDistributions > 0)
					invoke CallVertex

					for each LinkedTaxGroupTaxableDistributionsRel

						initialize LocalCalculatedTaxAmount
						for each each.first NonARPaymentTaxLineItemRel.TaxDetailOutRel
							LocalCalculatedTaxAmount += each.TaxAmount

						initialize LocalGivenTaxAmount
						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							LocalGivenTaxAmount += each.DistributionAmount.CurrencyAmount

						constraint (LocalCalculatedTaxAmount entered)
							"Distribution_\Error:_\DistributionWithGivenTaxAmount<LocalGivenTaxAmount>ReturnedAnExemptTaxResponse"

						if (TaxEntityRel.UseTaxCodeAccounts)
							LocalTaxCode 				= each.TaxCode
							LocalToleranceAmountLimit 	= EntityTaxCodeRel.TaxToleranceAmount
						else
							LocalToleranceAmountLimit 	= TaxEntityRel.TaxToleranceAmount

						if (LocalToleranceAmountLimit entered)

							if (Company.AccountingEntity.FunctionalCurrency entered
							and	each.OriginalCurrency != Company.AccountingEntity.FunctionalCurrency)
								initialize LocalCurrencyWork
								LocalCurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								LocalCurrencyWork.ExchangeDate				= DepositDate
								LocalCurrencyWork.TransactionAmount			= LocalToleranceAmountLimit
								LocalCurrencyWork.FromCurrency				= Company.AccountingEntity.FunctionalCurrency
								LocalCurrencyWork.BaseAmount.ToCurrency		= each.OriginalCurrency
								LocalToleranceAmountLimitTransCurr			= LocalCurrencyWork.BaseAmount.OutputCurrencyAmount
							else
								LocalToleranceAmountLimitTransCurr			= LocalToleranceAmountLimit

							LocalAmountVariance			= LocalGivenTaxAmount - LocalCalculatedTaxAmount
							if (LocalAmountVariance < 0)
								LocalAmountVariance 	= LocalAmountVariance * -1

							if (LocalToleranceAmountLimitTransCurr entered)
								constraint (LocalAmountVariance <= LocalToleranceAmountLimitTransCurr)
									"Distribution_\Error:_\TheDifference<LocalAmountVariance>BetweenGivenTaxAmount<LocalGivenTaxAmount>AndCalculatedAmount<LocalCalculatedTaxAmount>IsGreaterThanTheToleranceLimit<LocalToleranceAmountLimitTransCurr>"
						else
							constraint (LocalCalculatedTaxAmount = LocalGivenTaxAmount)
								"Distribution_\Error:_\TaxTolerancesAreNotEstablished;DistributionAmount<LocalGivenTaxAmount>MustEqualCalculatedTaxAmount<LocalCalculatedTaxAmount>"

					for each LinkedTaxGroupTaxableDistributionsRel

						LocalLinkedTaxCode 							= each.TaxCode
						LocalLinkedTaxableAmount					= each.TransactionTaxableAmount

						invoke FastUpdate each
							invoked.LinkedTaxGroup.Indicator    	= "S"
							initialize invoked.TaxCode
							initialize invoked.TransactionTaxableAmount

						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							invoke FastUpdate each
								invoked.LinkedTaxGroup.Indicator 	= "T"
								invoked.TaxCode						= LocalLinkedTaxCode
								invoked.TransactionTaxableAmount	= LocalLinkedTaxableAmount


		VertexCreateTaxLineItemsNonARPayments is a Set Action
			restricted
			default label is untranslatable
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmHeader					is a ReceivablePaymentHeader
				PrmReceivablePayment		is like ReceivablePayment
				PrmReleaseBatch				is Boolean

			Sort Order is Set2

			Instance Selection
				where (Company				= PrmCompany
				and	   ReceivablePaymentHeader = PrmHeader
				and    TypeOfPayment			= "N"
				and   (PrmReceivablePayment not entered
				or     ReceivablePayment = PrmReceivablePayment))

			Action Rules
				Set Rules
					Exit Rules
						invoke ProcessVertexForNonARPayments ReceivablePayment
							invoked.PrmCompany				= PrmCompany
							invoked.PrmHeader				= PrmHeader
							invoked.PrmReceivablePayment	= PrmReceivablePayment
							invoked.PrmReleaseBatch			= PrmReleaseBatch

				Instance Rules
					ErrorMessage	= blank
					if (HasVertexSourceOfLinkedTaxDistributions)
						invoke ResetSourceOfLinkedTaxDistributions LinkedTaxGroupSourceOfLinkedTaxDistributionRel
					if (HasVertexTaxableDistributions)
						invoke NonARPaymentCreateTaxLineItem LinkedTaxGroupTaxableDistributionsRel


		ProcessVertexForNonARPayments is a Set Action
			restricted
			default label is untranslatable
			Parameters
				PrmCompany				is a ReceivableCompany
				PrmHeader				is a ReceivablePaymentHeader
				PrmReceivablePayment	is like ReceivablePayment
				PrmReleaseBatch			is Boolean

			Local Fields
				LocalErrorOccurred				is Boolean
				LocalErrorMessage				is Alpha 150
				LocalErrorCount					is Numeric 8
				LocalTaxableDistributions		is Numeric 6

			Sort Order is Set2

			Instance Selection
				where (Company				= PrmCompany
				and	   ReceivablePaymentHeader = PrmHeader
				and    TypeOfPayment			= "N"
				and   (PrmReceivablePayment not entered
				or     ReceivablePayment = PrmReceivablePayment))

			Action Rules
				Set Rules
					Exit Rules
						if (PrmReleaseBatch)
							if (LocalErrorCount = 0)
								initialize LocalErrorOccurred
								initialize LocalErrorMessage

								invoke TransitionBackgroundProcessing PrmHeader
									invoked.PrmBackgroundProcessing		= 1

								invoke OpenBatchUnreleased.Release PrmHeader
									resume on error
										LocalErrorOccurred				= true
										LocalErrorMessage				= error message

								if (LocalErrorOccurred)
									invoke TransitionBackgroundProcessing PrmHeader
										invoked.PrmBackgroundProcessing	= 2
										invoked.PrmErrorMessage			= LocalErrorMessage
								else
									invoke TransitionBackgroundProcessing PrmHeader
										invoked.PrmBackgroundProcessing		= 3
							else
								invoke TransitionBackgroundProcessing PrmHeader
									invoked.PrmBackgroundProcessing		= 2
									invoked.PrmErrorMessage				= NonARPaymentsFailedToReleaseMsg

				Instance Rules
					if (HasVertexTaxableDistributions)
						initialize LocalErrorOccurred
						initialize LocalErrorMessage

						invoke CallVertex
							resume on error
								LocalErrorOccurred	= true
								LocalErrorCount    += 1
								ErrorMessage		= error message

						if (!LocalErrorOccurred)

							initialize LocalTaxableDistributions
							initialize LocalLastDistributionSequence

							for each LinkedTaxGroupTaxableDistributionsRel
								invoke VertexProcessNonARPaymentDistributionForTax each
									resume on error
										LocalErrorOccurred				= true
										LocalErrorCount    			   += 1
										ErrorMessage					= error message
								LocalTaxableDistributions 		+= 1
								LocalLastDistributionSequence	= each.LastDistributionSequence

							if (!LocalErrorOccurred
							and  PrmReleaseBatch)
								invoke VertexRoundLastNonARTaxableDistribution
									resume on error
										LocalErrorOccurred	= true
										LocalErrorCount    += 1
										ErrorMessage		= error message
									invoked.PrmNumberOfTaxableDistributions		= LocalTaxableDistributions
									invoked.PrmDistributionSequence				= LocalLastDistributionSequence
					if (!PrmReleaseBatch)
						initialize BackgroundProcessing


		VertexRoundLastNonARTaxableDistribution is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmNumberOfTaxableDistributions		is Numeric 6
				PrmDistributionSequence				is a DistSeq
			Local Fields
				LocalSumOfDistributions			is like InternationalAmount
				LocalDifference					is like InternationalAmount
				AllowableToleranceAmount		is like InternationalAmount
				LocalDistributionAmount			is like InternationalAmount
				LocalLowerLimitRoundingAmount	is like InternationalAmount
				LocalUpperLimitRoundingAmount	is like InternationalAmount
			Action Rules

				constraint (TransactionAmount entered)
					"TransactionAmountIsEmpty"

				LocalSumOfDistributions 				= SumOfDistributions
				if (LinkedTaxGroupLinkedTaxDistributionRel exists)

					if (LocalSumOfDistributions != TransactionAmount)

						LocalDifference 				= TransactionAmount - LocalSumOfDistributions
						if (LocalDifference < 0)
							LocalDifference 			= -1 * LocalDifference

						AllowableToleranceAmount 		= 0.01 * PrmNumberOfTaxableDistributions

						LocalLowerLimitRoundingAmount 	= TransactionAmount - AllowableToleranceAmount
						LocalUpperLimitRoundingAmount 	= TransactionAmount + AllowableToleranceAmount

						constraint (LocalDifference <= AllowableToleranceAmount)
							"SumOfDistributions<LocalSumOfDistributions>IsNotWithinTheEstablishedRoundingToleranceRangeOf<LocalLowerLimitRoundingAmount>-<LocalUpperLimitRoundingAmount>ForTheTransactionAmountOf<TransactionAmount>"

						LocalLastDistributionSequence	= PrmDistributionSequence
						LocalDistributionAmount 		= first ReceivableGLDistributionLastTaxableRel.DistributionAmount.CurrencyAmount
						LocalDistributionAmount 		= LocalDistributionAmount + (TransactionAmount - LocalSumOfDistributions)

						invoke Update first ReceivableGLDistributionLastTaxableRel
							invoked.DistributionAmount.CurrencyAmount 	= LocalDistributionAmount
							invoked.AllowLinkedTaxUpdate                = true

						SumOfNonARReceivableGLDistributionRelAmountsDone = false
				else
					constraint (LocalSumOfDistributions = TransactionAmount)
						"NoTaxDistributionsWereCreated;SumOfDistributionAmounts<LocalSumOfDistributions>DoesNotEqualTransactionAmount<TransactionAmount>ForPayment<PaymentNumber>"


		CallVertex is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (HasVertexTaxableDistributions)
					initialize CalculateTax
					CalculateTax.CallingModule					= "Receivable_Payment"
					CalculateTax.System							= "AR"
					CalculateTax.InFinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CalculateTax.TaxEntity						= GeneralLedgerCompanyRel.AccountingEntity
					CalculateTax.InvoiceCompany					= Company
					CalculateTax.ProcessLevel					= ReceivableProcessLevel
					CalculateTax.Invoice						= PaymentNumber
					CalculateTax.InvoiceAmount					= TransactionAmount
					CalculateTax.InvoiceDate					= DepositDate
					CalculateTax.ShipmentDate					= DepositDate
					CalculateTax.PaymentDate					= DepositDate
					CalculateTax.TaxDate						= DepositDate
					CalculateTax.GeneralLedgerDate				= GeneralLedgerDate
					CalculateTax.InvoicedOrCreditMemo			= "I"
					CalculateTax.TransactionSource				= "O"
					CalculateTax.LineNumber						= LastDistributionSequence + 1
					CalculateTax.DeliveryTerms					= ShipTerm



					CalculateTax.FromVATRegistrationCountry 	= TaxEntityRel.VATRegistrationCountry
					CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber

					CalculateTax.DefaultFilingCurrency 			= Company.Currency
					CalculateTax.CurrencyRate					= CurrencyRate
					CalculateTax.TransactionCurrency 			= OriginalCurrency
					CalculateTax.BaseCurrency					= Company.Currency

					CalculateTax.ReceiptSite					= ReceivableProcessLevel
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID

					CalculateTax.BypassEditing					= true

					if (ReceivableProcessLevel.PostalAddress entered)
						CalculateTax.FromPostalAddress			= ReceivableProcessLevel.PostalAddress
						CalculateTax.PostalAddress 				= ReceivableProcessLevel.PostalAddress
					else
						CalculateTax.FromPostalAddress			= Company.PostalAddress
						CalculateTax.PostalAddress				= Company.PostalAddress

					CalculateTax.SendMultLineItems				= true
					CalculateTax.UpdateLineItems				= true
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID
					CalculateTax.InputReturnVertexTaxIn		    = "D"
					CalculateTax.TaxCode						= "00"
					CalculateTax.AppendToJurisFile				= true
					CalculateTax.JurisdictionResultsKey			= "AR:" + Company + ":" + ReceivablePaymentHeader + ":" + ReceivablePayment + ":" + current timestamp
					CalculateTax.RelatedObjectReference			= reference to this instance

					CalculateTax.Function	= "C"
					LocalTaxCalc			= CalculateTax.ExecuteCalculateTax





		VertexProcessTaxHistoryByTransaction is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (HasVertexSourceOfLinkedTaxDistributions
				and TaxLineItemsRel exists)
					initialize ProcessTaxHistory
					ProcessTaxHistory.HistoryType					= "O"
					ProcessTaxHistory.InTransactionId				= blank
					ProcessTaxHistory.InvoiceCompany				= Company
					ProcessTaxHistory.TaxEntity						= Company.AccountingEntity
					ProcessTaxHistory.TaxCode						= "00"
					ProcessTaxHistory.SystemCode					= "AR"
					ProcessTaxHistory.Invoice						= PaymentNumber
					ProcessTaxHistory.TransactionInvoiceAmount      = TransactionAmount
					ProcessTaxHistory.ProcessLevel					= ReceivableProcessLevel
					ProcessTaxHistory.InvoiceDate					= DepositDate
					ProcessTaxHistory.TransactionCurrency			= OriginalCurrency
					ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyDecimalsNumber
					ProcessTaxHistory.TaxPointDate					= DepositDate
					ProcessTaxHistory.PostDate						= GeneralLedgerDate
					ProcessTaxHistory.TransactionSource				= "O"
					ProcessTaxHistory.UniqueIdOfRelatedObject		= UniqueID
					ProcessTaxHistory.RelatedObjectReference		= reference to this instance
					ProcessTaxHistory.AccruedOrInvoiced 			= "I"

					if (ReceivableProcessLevel.PostalAddress entered)
						ProcessTaxHistory.FromAddress				= ReceivableProcessLevel.PostalAddress
						ProcessTaxHistory.ToAddress 				= ReceivableProcessLevel.PostalAddress
					else
						ProcessTaxHistory.FromAddress				= Company.PostalAddress
						ProcessTaxHistory.ToAddress					= Company.PostalAddress

					ProcessTaxHistory.SendMultLineItems				= true


					ProcessTaxHistory.TaxTransFunction				= "A"	
					LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed




					for each TaxLineItemsRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each

					if (!TaxConfigurationRel.DebugMode
					and !TaxConfigurationRel.WriteToLogFile)
						for each JurisdictionResultsForPaymentRel
							invoke Purge each


		OneSourceProcessTaxHistoryByTransaction is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (HasOneSourceSourceOfLinkedTaxDistributions
				and TaxLineItemsRel exists)
					initialize ProcessTaxHistory
					ProcessTaxHistory.HistoryType					= "O"
					ProcessTaxHistory.InTransactionId				= blank
					ProcessTaxHistory.InvoiceCompany				= Company
					ProcessTaxHistory.TaxEntity						= Company.AccountingEntity
					ProcessTaxHistory.TaxCode						= first TaxLineItemsRel.ShipToTaxCode
					ProcessTaxHistory.SystemCode					= "AR"
					ProcessTaxHistory.Invoice						= PaymentNumber
					ProcessTaxHistory.TransactionInvoiceAmount      = TransactionAmount
					ProcessTaxHistory.ProcessLevel					= ReceivableProcessLevel
					ProcessTaxHistory.InvoiceDate					= DepositDate
					ProcessTaxHistory.TransactionCurrency			= OriginalCurrency
					ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyDecimalsNumber
					ProcessTaxHistory.TaxPointDate					= DepositDate
					ProcessTaxHistory.TransactionSource				= "O"
					ProcessTaxHistory.TransactionType				= "S"
					ProcessTaxHistory.UniqueIdOfRelatedObject		= UniqueID
					ProcessTaxHistory.RelatedObjectReference		= reference to this instance
					ProcessTaxHistory.AccruedOrInvoiced 			= "I"

					if (ReceivableProcessLevel.PostalAddress entered)
						ProcessTaxHistory.FromAddress				= ReceivableProcessLevel.PostalAddress
						ProcessTaxHistory.ToAddress 				= ReceivableProcessLevel.PostalAddress
					else
						ProcessTaxHistory.FromAddress				= Company.PostalAddress
						ProcessTaxHistory.ToAddress					= Company.PostalAddress

					ProcessTaxHistory.DeliveryTerms					= ShipTerm

					ProcessTaxHistory.SendMultLineItems				= true


					ProcessTaxHistory.TaxTransFunction				= "A"	
					LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed

					constraint (ProcessTaxHistory.OutputErrorMessage not entered)
						"<ProcessTaxHistory.OutputErrorMessage>"

					for each LinkedTaxGroupSourceOfLinkedTaxDistributionRel
						ProcessTaxHistory.InputTaxLineItemSequence	= each.NonARPaymentTaxLineItemRel.TaxLineItem.Sequence
						ProcessTaxHistory.TaxTransactionAccount		= each.first TaxOriginCrossReferenceGroupExceptSelfRel.GeneralLedgerAccount
						LocalTaxHistoryProcessed					= ProcessTaxHistory.CreateTaxTransactionForInputTaxLineItem

					for each TaxLineItemsRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each


		AutomaticCashApplication is a Set Action
			restricted
			default label is "AutomaticCashApplication"
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmCompany					is a ReceivableCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
				PrmSelectOnly				is Boolean
				PrmOperator					is a ReceivableOperator
				PrmGlDate					is Date
				PrmOverride					is Boolean
				PrmBatchNumber				is a ReceivablePaymentHeader
				PrmNatCredits				is Boolean
				PrmOverrideMethod			is AlphaUpper size 1
					States
						Algorithm			value is "A"
						BalanceForward		value is "B"
						LastStatement		value is "L"
						Remit				value is "R"
						UserDefined			value is "U"
						NoOverride			value is "N"
				PrmCurrencyOverride			  is Boolean
				PrmFirstAttemptRemittanceOnly is Boolean
				PrmVariance					is like InternationalAmount
				PrmReasonType				is a ReceivableReasonType
				PrmReasonCode				is a ReceivableReason
				PrmMaxInvoices				is Numeric size 1
				PrmCombination				is Numeric size 1
				PrmApplicationCode			is like AutomaticCashApplicationCode
				PrmCashApplicationResult	is like CashApplicationResult

			Parameter Rules

				PrmCompanyGroup
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup

			Local Fields
				SetCompany					is like Company
				SetCustomer					is like Customer
				LocalRemittanceOverApplied  is Boolean
				ApplyToFuture1Amount		is Boolean
				ApplyToFutureAmount			is Boolean
				ApplyToCurrentAmount		is Boolean
				ApplyToPeriod1Amount		is Boolean
				ApplyToPeriod2Amount		is Boolean
				ApplyToPeriod3Amount		is Boolean
				ApplyToPeriod4Amount		is Boolean
				ApplyToPeriod5Amount		is Boolean
				ApplyToPeriod6Amount		is Boolean
				ApplyToPeriod7Amount		is Boolean
				ApplyToPeriod8Amount		is Boolean
				AgePeriodMatch				is Boolean
				LocalSkipGLWriteOffDate		is Boolean

				LocalActor					is Actor
				LocalPrmCompanyGroupCompany is a ReceivableCompany
				LocalVariance				is like InternationalAmount
				LocalReasonType				is like ReceivableReasonType
				LocalReasonCode				is a ReceivableReason
					context of LocalPrmCompanyGroupCompany
				LocalMaxInvoices			is Numeric size 1
				LocalCombination			is Numeric size 1
				LocalErrorOccurred			is Boolean
				AutoCashAsyncID				is an AsyncActionRequest
				DoBackgroundProcessing		is Boolean
				LocalNumLinesForBatch		is Numeric 9
				UpdateStatusInBackground	is Boolean
				LocalUseSetAction			is Boolean
				AutoCashBackgroundGroup		is AlphaUpper up to 150

			Instance Selection			
				where (((PrmCompany entered
				and		PrmCompany = Company)
				or	 (PrmCompanyGroup entered
				and	 GeneralLedgerCompanyGroupRel exists))
				and   (PrmBatchNumber not entered
				or	 PrmBatchNumber = ReceivablePaymentHeader)
				and	Status.Open
				and	TypeOfPayment.CustomerPayment
				and	TransactionAmount entered	
				and	Customer entered)


			Sort Order
				Company
				Customer
				GeneralLedgerDate


			Rule Blocks

				2000DoRemit  



					if  (LastRemittanceSequence not entered
					or   Prepayment.Prepayment
					or   CancelDate entered)

						NextSentence = true
					else
						initialize WorkErrorNumber
						initialize WsOverAppliedAmount

						WorkCreditCurrency				= OriginalCurrency
						WorkUnappliedCompanyCurrency	= PaymentOpenCompanyCurrency
						WorkUnappliedAmount				= PaymentOpen

						if  (PrmOverride
						and  CancelDate not entered
						and  TransferDate not entered)
							WorkGLDate = PrmGlDate
						else
						if (!Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if  (Company.DefaultApplicationDate.PaymentCreditPostDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = current corporate date

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						if  (DoBackgroundProcessing
						and (instance count of RemittanceCreditRel >= LocalNumLinesForBatch
						or   instance count of RemittanceInvoiceAndDebitRel >= LocalNumLinesForBatch))
							UpdateStatusInBackground = true

							if (RemittanceCreditRel exists)
								invoke ApplyCreditRemittances ReceivablePaymentRemittance in background group (AutoCashBackgroundGroup)
									run after AutoCashAsyncID
									assign async action request id to AutoCashAsyncID
									invoked.PrmCashApplicationResult		= PrmCashApplicationResult
									invoked.PrmCompany						= Company
									invoked.PrmReceivablePaymentHeader		= ReceivablePaymentHeader
									invoked.PrmReceivablePayment			= ReceivablePayment
									invoked.PrmGlDate						= PrmGlDate
									invoked.WorkGLDate						= WorkGLDate
									invoked.PrmFirstAttemptRemittanceOnly	= PrmFirstAttemptRemittanceOnly
									invoked.PrmCurrencyOverride				= PrmCurrencyOverride
									invoked.PrmOperator						= PrmOperator
									invoked.PrmOverride						= PrmOverride

							invoke ApplyInvoiceAndDebitRemittances ReceivablePaymentRemittance in background group (AutoCashBackgroundGroup)
								run after AutoCashAsyncID
								assign async action request id to AutoCashAsyncID
								invoked.PrmCashApplicationResult		= PrmCashApplicationResult
								invoked.PrmCompany						= Company
								invoked.PrmReceivablePaymentHeader		= ReceivablePaymentHeader
								invoked.PrmReceivablePayment			= ReceivablePayment
								invoked.PrmGlDate						= PrmGlDate
								invoked.WorkGLDate						= WorkGLDate
								invoked.PrmFirstAttemptRemittanceOnly	= PrmFirstAttemptRemittanceOnly
								invoked.PrmCurrencyOverride				= PrmCurrencyOverride
								invoked.PrmOperator						= PrmOperator
								invoked.PrmOverride						= PrmOverride
						else
							for each RemittanceCreditRel

								if (PrmFirstAttemptRemittanceOnly) 
									if (each.IsUnapplied)
										include 2055FullyApplyPayment
								else
									include 2055FullyApplyPayment

								if  (WorkUnappliedAmount  not > 0)
									end for each

							initialize WorkErrorNumber
							WorkUnappliedCompanyCurrency	= PaymentOpenCompanyCurrency
							WorkUnappliedAmount				= PaymentOpen

							for each RemittanceInvoiceAndDebitRel

								if (PrmFirstAttemptRemittanceOnly) 
									if (each.IsUnapplied)
										include 2055FullyApplyPayment
								else
									include 2055FullyApplyPayment

								if  (WorkUnappliedAmount not > 0)
									end for each

							if  (!(PrmOverride
							and  CancelDate not entered
							and  TransferDate not entered)
							and Company.DefaultApplicationDate.LatestTransactionPostDate)	
								WorkGLDate = GeneralLedgerDate

								if  (Customer = TransferredToCustomer
								and  WorkGLDate < TransferDate)
									WorkGLDate = TransferDate

								if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
								and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
								and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
									WorkGLDate = PrmGlDate

							if  (Customer != TransferredToCustomer
							or   WorkGLDate >= TransferDate)

								LocalSkipGLWriteOffDate	= false
								if (Company.PreventWriteOffBeforeTransactionGLDate
								and WorkGLDate < GeneralLedgerDate)
									LocalSkipGLWriteOffDate	=	true

								if  (CompanyCustomerRel.MaximumOverageReasonCode entered
								and  !LocalSkipMaximumOverage
								and  !LocalSkipGLWriteOffDate)
									WorkUnappliedCompanyCurrency	= PaymentOpenCompanyCurrency
									WorkUnappliedAmount				= PaymentOpen
									if  (WorkUnappliedAmount entered)



										if  (!CompanyCustomerRel.MaximumOverageReasonCode.Active)
											NextSentence = true
										else
										if  ((CompanyCustomerRel.MaximumOverageAmount entered
										and   CompanyCustomerRel.MaximumOverageAmount >= WorkUnappliedCompanyCurrency)
										or   (CompanyCustomerRel.MaximumOveragePercent entered
										and   BaseAmount entered
										and   CompanyCustomerRel.MaximumOveragePercent >= (WorkUnappliedCompanyCurrency / BaseAmount)))

											invoke UnreleasedCashApplication.Create ReceivableApplication
												assign result to NewReceivableApplication
												invoked.Company										= Company
												invoked.ReceivableApplication.TransType				= TypeOfPayment
												invoked.ReceivableApplication.Invoice				= PaymentNumber
												invoked.ReceivableApplication.PaymentSeq			= ReceivablePayment
												invoked.ReceivableApplication.BatchNumber			= ReceivablePaymentHeader

												invoked.EnteredAmount								= WorkUnappliedAmount
												invoked.ApplicationCurrency							= OriginalCurrency

												invoked.ReceivableOperator							= PrmOperator
												invoked.ApplicationSource							= "A"

												invoked.GeneralLedgerDate							= WorkGLDate

												invoked.CreditTransaction.CreditCompany				= Company
												invoked.CreditTransaction.CreditCustomer			= Customer
												invoked.CreditTransaction.CreditBatch				= ReceivablePaymentHeader
												invoked.CreditTransaction.CreditSequence			= ReceivablePayment
												invoked.CreditTransaction.CreditType				= TypeOfPayment
												invoked.CreditTransaction.CreditNumber				= PaymentNumber
												invoked.DepositDate									= DepositDate
												invoked.GLOffsetCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
												invoked.ApplicationCurrency							= OriginalCurrency
												invoked.CashApplicationResult						= PrmCashApplicationResult

												if  (OriginalCurrency		= LocalPrmCompanyGroupCompany.Currency)
													invoked.ApplicationCurrencyType					= "M"

												invoked.CreateAdjustReason							= CompanyCustomerRel.MaximumOverageReasonCode
												invoked.CreateAdjustAmount							= WorkUnappliedAmount

											initialize WorkUnappliedAmount
											initialize WorkUnappliedCompanyCurrency


				2055FullyApplyPayment


					ThisReceivablePaymentRemittance = each.ReceivablePaymentRemittance

					initialize WorkErrorNumber

					SaveRemitAmount			= each.AppldAmt
					RecordSelected			= false
					MixedAppliedFlag		= "N"

					DBCompany				= each.Company
					DBCustomer				= Customer
					DBInvoice				= each.ReceivableInvoice
					DBInvoiceCompany		= each.InvoiceCompany		
					DBInvoiceDetail			= each.InvoiceDetail		
					DBTransactionType		= each.ReceivableInvoiceType

					if  (LocalCashAppInvoiceDetailSet3Rel exists)
						DBPaymentSeq = first LocalCashAppInvoiceDetailSet3Rel.ReceivableInvoiceDetail.PaymentSeq
						include 2084CheckItemStatus

					if (WorkErrorNumber not entered)
						if  (each.ReceivableInvoiceType.CreditMemo
						and  !CompanyCustomerRel.ThirdPartyPayer
						and   CompanyCustomerRel.NationalAccountIndicator not entered
						and  !ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies
						and  !LocalCashAppInvoiceDetailSet3Rel exists)
							WorkErrorNumber = 110

					if (WorkErrorNumber not entered)
						if  (!RecordSelected
						and  CompanyCustomerRel.NationalAccountIndicator entered)
							MixedAppliedFlag		= "N"
							WorkRemitTransType		= each.ReceivableInvoiceType
							WorkRemitInvoice		= each.ReceivableInvoice
							include 2081NationalAccts

					if (WorkErrorNumber not entered)
						if  (!RecordSelected
						and  CompanyCustomerRel.ThirdPartyPayer)
							MixedAppliedFlag		= "N"
							WorkRemitTransType		= each.ReceivableInvoiceType
							WorkRemitInvoice		= each.ReceivableInvoice
							include 2082ThirdParty

					if (WorkErrorNumber not entered)
						if  (!RecordSelected
						and  ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)
							MixedAppliedFlag		= "N"
							WorkRemitTransType		= each.ReceivableInvoiceType
							WorkRemitInvoice		= each.ReceivableInvoice
							include 2083TraverseAcrossCompany

					if (WorkErrorNumber not entered)
						if  (!RecordSelected
						and  each.ReceivableInvoiceType.Invoice)
							MixedAppliedFlag		= "N"
							WorkRemitTransType		= "D"
							WorkRemitInvoice		= each.ReceivableInvoice

							DBCompany				= each.Company
							DBCustomer				= Customer
							DBTransactionType		= "D"
							DBInvoice				= each.ReceivableInvoice

							if  (LocalCashAppInvoiceDetailSet3Rel exists)
								DBPaymentSeq = first LocalCashAppInvoiceDetailSet3Rel.ReceivableInvoiceDetail.PaymentSeq
								include 2084CheckItemStatus

					if (WorkErrorNumber not entered)
						if  (!RecordSelected
						and  each.ReceivableInvoiceType.Invoice
						and  CompanyCustomerRel.NationalAccountIndicator entered)
							MixedAppliedFlag		= "N"
							WorkRemitTransType		= "D"
							WorkRemitInvoice		= each.ReceivableInvoice

							include 2081NationalAccts

					if (WorkErrorNumber not entered)
						if  (!RecordSelected
						and  CompanyCustomerRel.ThirdPartyPayer)
							MixedAppliedFlag		= "N"
							WorkRemitTransType		= "D"
							WorkRemitInvoice		= each.ReceivableInvoice
							include 2082ThirdParty

					if (WorkErrorNumber not entered)
						if  (!RecordSelected
						and  ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)
							MixedAppliedFlag		= "N"
							WorkRemitTransType		= "D"
							WorkRemitInvoice		= each.ReceivableInvoice
							include 2083TraverseAcrossCompany

					if (WorkErrorNumber not entered)
						if (!RecordSelected)
							WorkErrorNumber			= 124

					if (!RecordSelected)

						if  (!(PrmOverride
						and  CancelDate not entered
						and  TransferDate not entered)
						and Company.DefaultApplicationDate.LatestTransactionPostDate)	
							WorkGLDate = GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						if  (Customer != TransferredToCustomer
						or   WorkGLDate >= TransferDate)
							invoke FastUpdate ThisReceivablePaymentRemittanceRel
								invoked.Status							= 1
								invoked.AppldAmt						= SaveRemitAmount
								invoked.CashApplicationResult			= PrmCashApplicationResult
								invoked.CashApplicationMessageNumber	= WorkErrorNumber
					else
						if  (!(PrmOverride
						and  CancelDate not entered
						and  TransferDate not entered)
						and Company.DefaultApplicationDate.LatestTransactionPostDate)	

							if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						if  (Customer != TransferredToCustomer
							or   WorkGLDate >= TransferDate)

							if (SaveRemitAmount not entered)
								SaveRemitAmount							= WorkUnappliedAmount
								WorkPaymentOpenAmount					= WorkUnappliedAmount
							else
								WorkPaymentOpenAmount					= SaveRemitAmount
								LocalRemittanceOverApplied				= true







							initialize WorkErrorNumber
							RecordSelected = false

							if  (Company != ThisInvoiceDetailRel.Company)
								WsInvoiceCurrency	= ThisInvoiceDetailRel.Company.Currency
							else
								WsInvoiceCurrency	= Company.Currency

							initialize WsMultObligCount
							initialize WsMultObligOpenAmount
							initialize WsMultObligTotalAmount
							initialize WsLastMultObligSeq

							if (ThisInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail != 1
							and not DoBackgroundProcessing)



								for each ThisInvoiceDetailRel.ReceivableInvoiceRel.ReceivableInvoiceDetailSet3Rel
									WsMultObligCount		+= 1
									WsLastMultObligSeq		 = each.ReceivableInvoiceDetail.PaymentSeq
									WsMultObligOpenAmount	 = (each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount))
									WsMultObligTotalAmount	+= WsMultObligOpenAmount

							initialize LocalCashDetailRemitApplied
							initialize LocalCashDetailCompanySetupMismatch
							initialize WsTotalApplied
							initialize WsTotalAdjust
							WsRMIApplied = SaveRemitAmount
							WsDone					= false

							LocalUseSetAction = false


							if (Company.ApplyCashAcrossReceivableCompanies	
							or DBInvoiceDetail entered)
								if (DBInvoiceCompany not entered)
									DBInvoiceCompany	= DBCompany
								DBCompany 		= DBInvoiceCompany
								if (DBInvoiceDetail not entered)
									if (DoBackgroundProcessing
									and instance count of RelatedInvoiceDetailRel >= LocalNumLinesForBatch)
										LocalUseSetAction = true
										invoke AutoCash2071CreditSetAction ReceivableInvoiceDetail in background group (AutoCashBackgroundGroup)
											run after AutoCashAsyncID
											assign async action request id to AutoCashAsyncID
											invoked.PrmInvoiceCompany				= DBCompany
											invoked.PrmReceivableInvoiceDetailType	= DBTransactionType
											invoked.PrmInvoice						= DBInvoice
											invoked.PrmCashApplicationResult		= PrmCashApplicationResult
											invoked.PrmPaymentCompany				= Company
											invoked.PrmReceivablePaymentHeader		= ReceivablePaymentHeader
											invoked.PrmReceivablePayment			= ReceivablePayment
											invoked.PrmRemitSequence 				= ThisReceivablePaymentRemittance
											invoked.PrmRemitAmount					= ThisReceivablePaymentRemittanceRel.AppldAmt
											invoked.PrmGlDate						= PrmGlDate
											invoked.WorkGLDate						= WorkGLDate
											invoked.PrmFirstAttemptRemittanceOnly	= PrmFirstAttemptRemittanceOnly
											invoked.PrmCurrencyOverride				= PrmCurrencyOverride
											invoked.PrmOperator						= PrmOperator
											invoked.PrmOverride						= PrmOverride
									else
										for each RelatedInvoiceDetailRel	
											include 2071Credit

											if  (WsDone)
												end for each
								else
									DBPaymentSeq	= DBInvoiceDetail
									for each ReceivableInvoiceDetailForRemittanceRel 
										include 2071Credit

										if  (WsDone)
											end for each
							else
								if (DoBackgroundProcessing
								and instance count of RelatedInvoiceDetailRel >= LocalNumLinesForBatch)
									LocalUseSetAction = true
									invoke AutoCash2071CreditSetAction ReceivableInvoiceDetail in background group (AutoCashBackgroundGroup)
										run after AutoCashAsyncID
										assign async action request id to AutoCashAsyncID
										invoked.PrmInvoiceCompany				= DBCompany
										invoked.PrmReceivableInvoiceDetailType	= DBTransactionType
										invoked.PrmInvoice						= DBInvoice
										invoked.PrmCashApplicationResult		= PrmCashApplicationResult
										invoked.PrmPaymentCompany				= Company
										invoked.PrmReceivablePaymentHeader		= ReceivablePaymentHeader
										invoked.PrmReceivablePayment			= ReceivablePayment
										invoked.PrmRemitSequence 				= ThisReceivablePaymentRemittance
										invoked.PrmRemitAmount					= ThisReceivablePaymentRemittanceRel.AppldAmt
										invoked.PrmGlDate						= PrmGlDate
										invoked.WorkGLDate						= WorkGLDate
										invoked.PrmFirstAttemptRemittanceOnly	= PrmFirstAttemptRemittanceOnly
										invoked.PrmCurrencyOverride				= PrmCurrencyOverride
										invoked.PrmOperator						= PrmOperator
										invoked.PrmOverride						= PrmOverride
								else
									for each RelatedInvoiceDetailRel	
										include 2071Credit


										if  (WsDone)
											end for each




							if (LocalUseSetAction)
								UpdateStatusInBackground = true
							else
								if (Company.DetailedRNADistributions)
									invoke FastUpdate ThisReceivablePaymentRemittanceRel
										invoked.CashApplicationResult			= PrmCashApplicationResult
										if (LocalCashDetailRemitApplied)
											invoked.Status							= 2
											initialize invoked.CashApplicationMessageNumber
											if (invoked.AppldAmt < 0)
												initialize invoked.AppldAmt
										else
											invoked.Status							= 1
											if (CashDetailState.Released)
												if (LocalCashDetailCompanySetupMismatch)
													invoked.CashApplicationMessageNumber	= 126
												else
													invoked.CashApplicationMessageNumber	= 125
											else
												invoked.CashApplicationMessageNumber		= 127
								else
									invoke FastUpdate ThisReceivablePaymentRemittanceRel
										invoked.Status							= 2
										invoked.CashApplicationResult			= PrmCashApplicationResult
										initialize invoked.CashApplicationMessageNumber
										if (invoked.AppldAmt < 0)
											initialize invoked.AppldAmt




				2071Credit



					include ValidateDetailedRNADistributions

					if  (Company.DetailedRNADistributions
					and !LocalAllowDetailFinanceStructure)
						NextSentence = true
					else
					if (each.HasARToAPApplicationSelect)
						NextSentence = true
					else
					if  (each.HasReceivableApplicationSelect)
						NextSentence = true
					else
					if  (each.ReceivablePendingAdjustmentRel exists)
						NextSentence = true
					else

						WsPriorApplication	= false

						initialize WsTransactionDiscount
						initialize WsTransactionAmount

						if  (each.CompanyCustomerRel.DiscountAdjustmentReason != blank
						and  each.AlternateReceivableInvoiceType.Mixed)
							if (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)

								if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									if (each.MixedSignCreditMemoPriorApplicationRel exists)
										WsPriorApplication		= true

								if (each.MixedSignPriorApplicationRel exists)
									WsPriorApplication		= true

								if (!WsPriorApplication)
									WsTransactionAmount			= each.InvoiceAmount.CurrencyAmount -  each.ApplicationAmount.CurrencyAmount
							else
								WsTransactionAmount				= each.InvoiceAmount.CurrencyAmount

						if (!each.AlternateReceivableInvoiceType.Mixed)
							if (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
								WsPriorApplication				= true
						else
							WsTransactionAmount					= each.InvoiceAmount.CurrencyAmount


						initialize WsOverAppliedAmount
						initialize WsOverAppliedAmountInvoiceCurrency
						if (each.IsEligibleForOverCashApplication
						and LocalRemittanceOverApplied									
						and SaveRemitAmount > DerivedOverApplyInvoiceOpenAmount
						and each.ReceivableInvoiceDetail.PaymentSeq = 1)
							WsOverAppliedAmount					= DerivedOverApplyInvoiceOpenAmount - SaveRemitAmount
							CurrencyWork.TransactionAmount			= WsOverAppliedAmount
							CurrencyWork.FromCurrency				= OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency		= ThisInvoiceDetailRel.OriginalCurrency
							WsOverAppliedAmountInvoiceCurrency		= CurrencyWork.BaseAmount.OutputCurrencyAmount
							LocalSkipMaximumOverage					= true
						else
						if  (each.CompanyCustomerRel.DiscountAdjustmentReason entered
						and  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
						and !WsPriorApplication)

							I9 = 1
							while (I9 <= 3)

								if (each.DiscountDate.DiscDate[I9] not entered)
									end while
								else
								if (each.DiscountDate.DiscDate[I9] + each.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
									if (each.DiscountAmount.OrigDiscAmt[I9] entered)
										WsTransactionDiscount = each.DiscountAmount.OrigDiscAmt[I9]
										end while
									else
										WsTransactionDiscount = (each.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
										end while

								I9 +=1
						else
						if (each.CompanyCustomerRel.DiscountAdjustmentReason entered
						and  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
						and WsPriorApplication)

							LocalGiveNoDiscount = false
							if (each.AlternateReceivableInvoiceType.Mixed)

								if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									for each each.MixedSignCreditMemoPriorApplicationRel
										for each each.ReceivableApplicationAdjustmentRel
											if (!(each.ReceivableApplication.Reverse
											or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
												LocalGiveNoDiscount = true
												end for each
										if (LocalGiveNoDiscount = true)
											end for each
										I9 = 1
										while (I9 < 4)
											if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
												if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
													if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
														LocalGiveNoDiscount = true
												else
													LocalGiveNoDiscount = false
													end while
											I9 += 1

								for each each.MixedSignPriorApplicationRel
									for each each.ReceivableApplicationAdjustmentRel
										if (!(each.ReceivableApplication.Reverse
										or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
											LocalGiveNoDiscount = true
											end for each
									if (LocalGiveNoDiscount = true)
										end for each
									I9 = 1
									while (I9 < 4)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
											if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
												if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
													LocalGiveNoDiscount = true
											else
												LocalGiveNoDiscount = false
												end while
										I9 += 1
							else
								for each each.ReceivableApplicationRel
									I9 = 1
									while (I9 < 4)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
											if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
												if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
													LocalGiveNoDiscount = true
											else
												LocalGiveNoDiscount = false
												end while
										I9 += 1

									for each each.ReceivableApplicationAdjustmentRel
										if (!(each.ReceivableApplication.Reverse
										or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
											LocalGiveNoDiscount = true

							if (!LocalGiveNoDiscount)
								I9 = 1
								while (I9 <= 3)

									if (each.DiscountDate.DiscDate[I9] not entered)
										end while
									else
									if (each.DiscountDate.DiscDate[I9] + each.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
										if (each.DiscountAmount.OrigDiscAmt[I9] entered
										and not each.AlternateReceivableInvoiceType.Mixed)

											if (each.DiscountAmount.OrigDiscAmt[I9] >= each.OpenAmount)
												WsTransactionDiscount = blank
											else
												WsTransactionDiscount = each.DiscountAmount.OrigDiscAmt[I9]
											end while
										else
											if (each.DiscountPercent.DiscPct[I9] * WsTransactionAmount >= each.OpenAmount)
												WsTransactionDiscount = blank
											else
												WsTransactionDiscount = (each.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
											end while
									I9 +=1


						if (each.IsEligibleForOverCashApplication
						and LocalRemittanceOverApplied
						and WsOverAppliedAmount entered)
							WsTransactionOpenAmount = (each.InvoiceAmount.CurrencyAmount - (each.ApplicationAmount.CurrencyAmount + each.AdjustmentAmount.CurrencyAmount + WsOverAppliedAmountInvoiceCurrency))
						else
							WsTransactionOpenAmount = (each.InvoiceAmount.CurrencyAmount - (each.ApplicationAmount.CurrencyAmount + each.AdjustmentAmount.CurrencyAmount + WsTransactionDiscount))

							WsRMIApplied			= SaveRemitAmount

							CurrencyWork.TransactionAmount			= WsTransactionOpenAmount
							CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
							WorkInvoiceOpenPaymentCurrency			= CurrencyWork.BaseAmount.OutputCurrencyAmount

							if  (!each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								if (SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
									WsRMIApplied				= WorkInvoiceOpenPaymentCurrency

								if (SaveRemitAmount > PaymentOpen)
									WsRMIApplied				= PaymentOpen

								if  ((SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
								and  (SaveRemitAmount > PaymentOpen))
									if (WorkInvoiceOpenPaymentCurrency > PaymentOpen)
										WsRMIApplied			= PaymentOpen
									else
										WsRMIApplied			= WorkInvoiceOpenPaymentCurrency

								if (WsRMIApplied < WorkInvoiceOpenPaymentCurrency)
									WsTransactionDiscount = 0
									WsTransactionOpenAmount = (each.InvoiceAmount.CurrencyAmount - (each.ApplicationAmount.CurrencyAmount + each.AdjustmentAmount.CurrencyAmount))



						WsRMIApplied			= SaveRemitAmount

						CurrencyWork.TransactionAmount			= WsTransactionOpenAmount
						CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
						CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
						WorkInvoiceOpenPaymentCurrency			= CurrencyWork.BaseAmount.OutputCurrencyAmount





						if  (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							if  (ThisReceivablePaymentRemittanceRel.AppldAmt = 0
							or   ThisReceivablePaymentRemittanceRel.AppldAmt > WorkInvoiceOpenPaymentCurrency)
								WsRMIApplied = WorkInvoiceOpenPaymentCurrency
							else
							if (ThisReceivablePaymentRemittanceRel.AppldAmt < WorkInvoiceOpenPaymentCurrency)
								WsRMIApplied = ThisReceivablePaymentRemittanceRel.AppldAmt
						else

							if (SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
								WsRMIApplied				= WorkInvoiceOpenPaymentCurrency

							if (SaveRemitAmount > PaymentOpen)
								WsRMIApplied				= PaymentOpen

							if  ((SaveRemitAmount > WorkInvoiceOpenPaymentCurrency)
							and  (SaveRemitAmount > PaymentOpen))
								if (WorkInvoiceOpenPaymentCurrency > PaymentOpen)
									WsRMIApplied			= PaymentOpen
								else
									WsRMIApplied			= WorkInvoiceOpenPaymentCurrency

							if (Company.DetailedRNADistributions
							and CashDetailState.Released)
								if (WsRMIApplied > LocalPaymentAmountRemaining)
									WsRMIApplied = LocalPaymentAmountRemaining

						WsRemitApplied = WsRMIApplied



						if (WsOverAppliedAmount entered
						and each.Company.OverApplyReasonCode entered
						and OriginalCurrency != ThisInvoiceDetailRel.OriginalCurrency)
							CurrencyWork.TransactionAmount			= WsOverAppliedAmount
							CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
							WsTransactionDiscount					= CurrencyWork.BaseAmount.OutputCurrencyAmount
						else
						if  (WsTransactionDiscount entered
						and  each.CompanyCustomerRel.DiscountAdjustmentReason entered
						and  OriginalCurrency != ThisInvoiceDetailRel.OriginalCurrency)

							CurrencyWork.TransactionAmount			= WsTransactionDiscount
							CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
							WsTransactionDiscount					= CurrencyWork.BaseAmount.OutputCurrencyAmount






						invoke UnreleasedCashApplication.Create ReceivableApplication
							assign result to NewReceivableApplication
							invoked.Company										= each.Company
							invoked.ReceivableApplication.TransType				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.ReceivableApplication.Invoice				= each.ReceivableInvoiceDetail.Invoice
							invoked.ReceivableApplication.PaymentSeq			= each.ReceivableInvoiceDetail.PaymentSeq
							invoked.ReceivableApplication.BatchNumber			= each.ReceivableInvoiceDetail.BatchNumber

							invoked.EnteredAmount								= WsRemitApplied
							invoked.ApplicationCurrency							= OriginalCurrency

							invoked.ReceivableOperator							= PrmOperator
							invoked.ApplicationSource							= "A"
							invoked.ReceivableGeneralLedgerCode					= each.ReceivableGeneralLedgerCode
							invoked.GeneralLedgerDate							= WorkGLDate

							invoked.CreditTransaction.CreditCompany				= Company
							invoked.CreditTransaction.CreditCustomer			= Customer
							invoked.CreditTransaction.CreditBatch				= ReceivablePaymentHeader
							invoked.CreditTransaction.CreditSequence			= ReceivablePayment
							invoked.CreditTransaction.CreditType				= TypeOfPayment
							invoked.CreditTransaction.CreditNumber				= PaymentNumber
							invoked.DepositDate									= DepositDate
							invoked.GLOffsetCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
							invoked.ApplicationCurrency							= OriginalCurrency
							invoked.CashApplicationResult						= PrmCashApplicationResult
							invoked.SkipToleranceCheck							= true

							if  (OriginalCurrency		= LocalPrmCompanyGroupCompany.Currency
							and  each.OriginalCurrency	= WsInvoiceCurrency
							and  WsInvoiceCurrency		= LocalPrmCompanyGroupCompany.Currency)
								invoked.ApplicationCurrencyType					= "B"
							else
							if  (OriginalCurrency		!= LocalPrmCompanyGroupCompany.Currency
							and  each.OriginalCurrency	!= WsInvoiceCurrency
							and  each.OriginalCurrency	 = OriginalCurrency
							and  WsInvoiceCurrency		 = LocalPrmCompanyGroupCompany.Currency)
								invoked.ApplicationCurrencyType					= "N"
							else
								invoked.ApplicationCurrencyType					= "M"

							if  (WsOverAppliedAmount entered
							and each.Company.OverApplyReasonCode entered)
								invoked.CreateAdjustReason					 = each.Company.OverApplyReasonCode
								invoked.CreateAdjustAmount					 = WsOverAppliedAmount
								invoked.TransientOverApplyInvoice			 = true
							else
							if (WsTransactionDiscount entered
							and each.CompanyCustomerRel.DiscountAdjustmentReason entered)
								invoked.CreateAdjustReason					 = each.CompanyCustomerRel.DiscountAdjustmentReason
								invoked.CreateAdjustAmount					 = WsTransactionDiscount



						WsARACompany					= NewReceivableApplication.Company
						WsARATransType					= NewReceivableApplication.ReceivableApplication.TransType
						WsARAInvoice					= NewReceivableApplication.ReceivableApplication.Invoice
						WsARAPaymentSeq					= NewReceivableApplication.ReceivableApplication.PaymentSeq
						WsARABatchNumber				= NewReceivableApplication.ReceivableApplication.BatchNumber
						WsARAApplicationSequence		= NewReceivableApplication.ReceivableApplication.ApplicationSequence

						WsTotalApplied					+= WsARAApplicationRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						if  (WsMultObligCount > 1)
							WsMultObligTotalAmount		-= WsARAApplicationRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
							WorkPaymentOpenAmount		-= WsARAApplicationRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount

						if  (each.ReceivableInvoiceRel.LastReceivableInvoiceDetail = 1)
							WsBaseOpenAmount = each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount +  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
						else
						if (each.ReceivableInvoiceDetail.PaymentSeq = WsLastMultObligSeq)
							WsBaseOpenAmount = each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount +  each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
						else
						if (WorkPaymentOpenAmount = 0)
							WsBaseOpenAmount = WsMultObligTotalAmount
						else
							initialize WsBaseOpenAmount



						AR130WsBaseOpenAmount = each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount - (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount +  each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount)
						WsBaseOpenAmount = AR130WsBaseOpenAmount


						WorkUnappliedAmount = PaymentOpen

						if (AllowSelectDistributionSet) 
							include BuildFundApplyDistributionSet


						ApplicationOccurred = true

						LocalCashDetailRemitApplied = true

						if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							SaveRemitAmount		+= WsRemitApplied  
						else
							SaveRemitAmount		-= WsRemitApplied

						if  (SaveRemitAmount   = 0
						or  (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
						and  WsTotalApplied	 = ThisReceivablePaymentRemittanceRel.AppldAmt))
							WsDone = true

						if (WorkUnappliedAmount not > 0)

							WsDone = true


				BuildFundApplyDistributionSet 
					if (ThisReceivablePaymentRemittanceRel.InvoiceDetail not entered
					or  ThisReceivablePaymentRemittanceRel.RemittanceApplyDistribution set not exists)
						invoke ChangeDistributionSetNeedsReview WsARAApplicationRel
							invoked.PrmDistributionSetNeedsReview	= false
							invoked.PrmDistributionSetState			= "CP"
						invoke ProrateAndSelectAll WsARAApplicationRel
					else
						LocalDistributionSetNeedsReview = false
						if (WsRemitApplied != ThisReceivablePaymentRemittanceRel.AppldAmt
						and !ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
							LocalDistributionSetNeedsReview = true
						else
							WsDistributionSetSum 		= 0
							for each ThisReceivablePaymentRemittanceRel.RemittanceApplyDistribution set

								if (!ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
									if (each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount > 0)
										if (each.DistributionAmount.CurrencyAmount > each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - each.ReceivableGLDistributionRel.FundAppliedAmount)
											LocalDistributionSetNeedsReview = true
											end for each
									else
										if (each.DistributionAmount.CurrencyAmount < each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - each.ReceivableGLDistributionRel.FundAppliedAmount)
											LocalDistributionSetNeedsReview = true
											end for each

								WsDistributionSetSum	   += each.DistributionAmount.CurrencyAmount
								invoke Create FundApplyDistribution
									invoked.Company													= WsARACompany
									invoked.ReceivableApplication.TransType							= WsARATransType
									invoked.ReceivableApplication.Invoice							= WsARAInvoice
									invoked.ReceivableApplication.PaymentSeq						= WsARAPaymentSeq
									invoked.ReceivableApplication.BatchNumber						= WsARABatchNumber
									invoked.ReceivableInvoiceType									= each.ReceivablePaymentRemittance.InvoiceCompanyReceivableInvoiceRel.ReceivableInvoiceType
									invoked.Customer												= each.Customer
									invoked.ReceivableApplication.ApplicationSequence				= WsARAApplicationSequence
									invoked.OriginalLastDistributionSequence						= each.OriginalLastDistributionSequence
									invoked.OriginalReceivableGLDistribution						= each.OriginalReceivableGLDistribution
									invoked.ApplyFundDistributionAccount							= each.ApplyFundDistributionAccount
									invoked.OriginalCurrency										= each.OriginalCurrency
									invoked.DistributionAmount										= each.DistributionAmount
									invoked.DistributionAmount.KeepRateAndAmount					= true
									invoked.Type													= "T"
									if (ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
										invoked.FromIntercompanyBilling								= true

							if (!LocalDistributionSetNeedsReview)
								invoke ChangeDistributionSetNeedsReview WsARAApplicationRel
									invoked.PrmDistributionSetNeedsReview	= false
									if (ThisReceivablePaymentRemittanceRel.InvoiceCompanyReceivableInvoiceRel.Origin.IntercompanyBilling)
										invoked.PrmDistributionSetState		= "CS"
									else
										invoked.PrmDistributionSetState		= "CP"

						if (LocalDistributionSetNeedsReview)
							invoke Delete WsARAApplicationRel.FundApplyDistribution set
							invoke ChangeDistributionSetNeedsReview WsARAApplicationRel
								invoked.PrmDistributionSetState			= "NP"
								invoked.PrmDistributionSetNeedsReview	= true


				ValidateDetailedRNADistributions
					if (Company.DetailedRNADistributions)
						LocalAllowDetailFinanceStructure = true
						initialize LocalPaymentAmountRemaining
						if (CashDetailState.None)
							LocalAllowDetailFinanceStructure = true
						else
						if (CashDetailState.Unreleased
						or  CashDetailState.Amended)
							LocalAllowDetailFinanceStructure = false
						else
						if (CashDetailState.Released)
							if (Company != each.Company)
								if (Company.DetailedInvoiceAccrualDistributions != each.Company.DetailedInvoiceAccrualDistributions
								or  Company.DetailedCashDistributions 			!= each.Company.DetailedCashDistributions
								or  Company.DetailedRNADistributions 			!= each.Company.DetailedRNADistributions
								or  Company.DetailFinanceStructureOptions 		!= each.Company.DetailFinanceStructureOptions)
									LocalCashDetailCompanySetupMismatch = true
									LocalAllowDetailFinanceStructure = false

							LocalAnswer 										= each.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
							LocalPaymentCashDetailAccount 						= each.TransientAdditionalDimensions
							LocalPaymentAmountRemaining							= sum LocalPaymentCashDetailRel.OpenAmount
							if (LocalPaymentCashDetailRel not exists)
								LocalAllowDetailFinanceStructure = false
							if  (LocalPaymentAmountRemaining <= 0
							and !each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								LocalAllowDetailFinanceStructure = false

				
				NAValidateDetailedRNADistributions
					if (Company.DetailedRNADistributions)
						LocalAllowDetailFinanceStructure = true
						initialize LocalPaymentAmountRemaining
						if (CashDetailState.None)
							LocalAllowDetailFinanceStructure = true
						else
						if (CashDetailState.Unreleased
						or  CashDetailState.Amended)
							LocalAllowDetailFinanceStructure = false
						else
						if (CashDetailState.Released)
							if (Company != each.Company)
								if (Company.DetailedInvoiceAccrualDistributions != each.Company.DetailedInvoiceAccrualDistributions
								or  Company.DetailedCashDistributions 			!= each.Company.DetailedCashDistributions
								or  Company.DetailedRNADistributions 			!= each.Company.DetailedRNADistributions
								or  Company.DetailFinanceStructureOptions 		!= each.Company.DetailFinanceStructureOptions)
									LocalCashDetailCompanySetupMismatch = true
									LocalAllowDetailFinanceStructure = false

							LocalAnswer 										= each.ReceivableInvoiceDetail.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
							LocalPaymentCashDetailAccount 						= each.ReceivableInvoiceDetail.TransientAdditionalDimensions
							LocalPaymentAmountRemaining							= sum LocalPaymentCashDetailRel.OpenAmount
							if (LocalPaymentCashDetailRel not exists)
								LocalAllowDetailFinanceStructure = false
							if  (LocalPaymentAmountRemaining <= 0
							and !each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								LocalAllowDetailFinanceStructure = false


				2081NationalAccts


					if (CompanyCustomerRel.NationalAccountIndicator.Child)
						DBCompany				= CompanyCustomerRel.NationalCompany
						DBCustomer				= CompanyCustomerRel.NationalCustomer
						DBTransactionType		= WorkRemitTransType
						DBInvoice				= WorkRemitInvoice
						initialize DBPaymentSeq

						initialize WorkErrorNumber

						for each LocalCashAppInvoiceDetailSet3Rel
							if  (!(PrmOverride
							and  CancelDate not entered
							and  TransferDate not entered)
							and Company.DefaultApplicationDate.LatestTransactionPostDate)	
								if (GeneralLedgerDate > each.GeneralLedgerDate)
									WorkGLDate = GeneralLedgerDate
								else
									WorkGLDate = each.GeneralLedgerDate

								if  (Customer = TransferredToCustomer
								and  WorkGLDate < TransferDate)
									WorkGLDate = TransferDate

								if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
								and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
								and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
									WorkGLDate = PrmGlDate
							if  (each.BankTransactionType.CashPayment)
								if (each.CompanySystemClosingControlRel exists
								and each.CompanySystemClosingControlRel.Control
								and each.Company.VerifyGLDateWithinGLDateRange)
									if  (WorkGLDate within each.CompanySystemClosingControlRel.ValidEntryDate)
										DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
										end for each
								else
									DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
									end for each

						if  (DBPaymentSeq entered)
							include 2084CheckItemStatus

					if (!RecordSelected
					and  WorkErrorNumber not entered)
						LocalNationalCompany				= CompanyCustomerRel.DerivedNationalCompany
						LocalNationalCustomer				= CompanyCustomerRel.DerivedNationalCustomer


						for each NationalAccountCustomerRel

							DBCompany				= each.NationalAccount.InvoiceAccountGroup.Company
							DBCustomer				= each.NationalAccount.InvoiceAccountGroup.Customer
							DBTransactionType		= WorkRemitTransType
							DBInvoice				= WorkRemitInvoice
							initialize DBPaymentSeq

							initialize WorkErrorNumber



							for each LocalCashAppInvoiceDetailSet3Rel
								if  (!(PrmOverride
								and  CancelDate not entered
								and  TransferDate not entered)
								and Company.DefaultApplicationDate.LatestTransactionPostDate)	
									if (GeneralLedgerDate > each.GeneralLedgerDate)
										WorkGLDate = GeneralLedgerDate
									else
										WorkGLDate = each.GeneralLedgerDate

									if  (Customer = TransferredToCustomer
									and  WorkGLDate < TransferDate)
										WorkGLDate = TransferDate

									if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
									and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
									and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
										WorkGLDate = PrmGlDate
								if (each.BankTransactionType.CashPayment)
									if (each.CompanySystemClosingControlRel exists
									and each.CompanySystemClosingControlRel.Control
									and each.Company.VerifyGLDateWithinGLDateRange)
										if  (WorkGLDate within each.CompanySystemClosingControlRel.ValidEntryDate)
											DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
											end for each
									else
										DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
										end for each

							if  (DBPaymentSeq entered)
								include 2084CheckItemStatus

								if (RecordSelected
								or  WorkErrorNumber entered
								or  EndSelection)
									end for each


				2082ThirdParty


					DBCompany				= Company
					DBTransactionType		= WorkRemitTransType
					DBInvoice				= WorkRemitInvoice

					initialize WorkErrorNumber

					if  (LocalCashAppInvoiceDetailSet1Rel exists)
						DBPaymentSeq = first LocalCashAppInvoiceDetailSet1Rel.ReceivableInvoiceDetail.PaymentSeq
						include 2084CheckItemStatus
					else
					if  (!RecordSelected
					and   WorkErrorNumber not entered)
						for each LocalByInvoiceRel
							if  (each.Company != PrmCompany
							and  each.Company.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup)
								DBCompany	 = each.Company
								DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
								include 2084CheckItemStatus

							if (RecordSelected
							or  WorkErrorNumber entered)
								end for each

				2083TraverseAcrossCompany 

					DBCompany				= Company
					DBTransactionType		= WorkRemitTransType
					DBInvoice				= WorkRemitInvoice

					initialize WorkErrorNumber

					if  (LocalCashAppInvoiceDetailSet1Rel exists
					and first LocalCashAppInvoiceDetailSet1Rel.Customer = Customer)
						DBPaymentSeq = first LocalCashAppInvoiceDetailSet1Rel.ReceivableInvoiceDetail.PaymentSeq
						include 2084CheckItemStatus
					else
					if  (!RecordSelected
					and   WorkErrorNumber not entered)
						for each TransactionsForCustomerAcrossCompanyRel
							if  (each.Company != PrmCompany
							and each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 = DBTransactionType
							and	each.ReceivableInvoiceDetail.Invoice							 = DBInvoice
							and	each.BankTransactionType.CashPayment)
								DBCompany	 = each.Company
								DBPaymentSeq = each.ReceivableInvoiceDetail.PaymentSeq
								include 2084CheckItemStatus

							if (RecordSelected
							or  WorkErrorNumber entered)
								end for each

				2084CheckItemStatus


					WorkDebitCurrency = LocalPrmCompanyGroupCompany.Currency
					if  (!PrmCurrencyOverride
					and  LocalPrmCompanyGroupCompany.Currency					!= WorkCreditCurrency
					and  ThisInvoiceDetailRel.OriginalCurrency  != WorkCreditCurrency)
						WorkErrorNumber = 108
					else
					if  (Company.VendorCreateAndInterfaceToAP
					and  ThisInvoiceDetailARToAPApplicationRel exists
					and  ThisInvoiceDetailARToAPApplicationRel.Status.Unreleased)
						WorkErrorNumber = 120
					else
					if  (ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed
					and  MixedAppliedFlag = "N")
						initialize TransientMixedApplied			
						invoke ApplyMix MixedReceivableInvoiceCreditDetailRel
							invoked.CashApplicationResult = PrmCashApplicationResult
						if (TransientMixedApplied
						and ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed
						and ThisInvoiceDetailRel.OpenAmount = 0)			
							WorkErrorNumber			= 124
						MixedAppliedFlag = "Y"

						if  (!LocalCashAppInvoiceDetailSet3Rel exists)
							EndSelection = true
					if (WorkErrorNumber	!= 124)			
						RecordSelected = true


				3000DoBalanceForward  


					if  (CancelDate entered)
						NextSentence = true
					else
					if  (CompanyCustomerRel.ReceivableProcessingMethod.OpenItem
					and  Prepayment.Prepayment)
						NextSentence = true
					else
						if  (PrmOverride)
							WorkGLDate = PrmGlDate
						else
						if (!Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if  (Company.DefaultApplicationDate.PaymentCreditPostDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = current corporate date

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						if  (CompanyCustomerRel.NationalAccountIndicator.No)




							WsDone = false
							MixedAppliedFlag = "N"

							if (ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)
								for each TransactionsForCustomerByDueDateAcrossCompanyRel
									include BalanceForwardProcessNonNATransaction
							else
								for each TransactionsForCustomerByDueDateRel
									include BalanceForwardProcessNonNATransaction
						else


							if  (CompanyCustomerRel.NationalAccountIndicator.Parent)
								DBNationalCompany			= PrmCompany
								WsCompany					= PrmCompany
								WsNationalCompany			= PrmCompany
								DBNationalCustomer			= SetCustomer
								WsCustomer					= SetCustomer
								WsNationalCustomer			= SetCustomer

							else
								DBNationalCompany			= CompanyCustomerRel.NationalCompany
								WsCompany					= CompanyCustomerRel.NationalCompany
								WsNationalCompany			= CompanyCustomerRel.NationalCompany
								DBNationalCustomer			= CompanyCustomerRel.NationalCustomer
								WsCustomer					= CompanyCustomerRel.NationalCustomer
								WsNationalCustomer			= CompanyCustomerRel.NationalCustomer



							MixedAppliedFlag			= "N"
							if (!PrmNatCredits)
								for each CashAppCreditNatlAcctTransactionsCustomerRel	
									include 3135ProcessPayment
									if (WsDone)
										end for each
							else
								for each CashAppCreditNatlAcctTransactionsRel	
									include 3135ProcessPayment
									if (WsDone)
										end for each

							WsDone = false

							for each CashAppNatlAcctTransactionsRel	
								include 3135ProcessPayment
								if (WsDone)
									end for each


				3135ProcessPayment


					include NAValidateDetailedRNADistributions

					if  (Company.DetailedRNADistributions
					and !LocalAllowDetailFinanceStructure)
						NextSentence = true
					else
					if (IsPrepaymentTaxWithHolding
					and each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)	
						NextSentence = true
					else
					if  (!PrmCurrencyOverride
					and  each.OriginalCurrency		!= OriginalCurrency)
						NextSentence = true
					else
					if  (each.ReceivableInvoiceDetail.HasReceivableApplicationSelect)
						NextSentence = true
					else
					if  (Company.VendorCreateAndInterfaceToAP
					and  each.ReceivableInvoiceDetail.HasARToAPApplicationSelect)
						NextSentence = true





					else
					if  (each.BaseOpenAmount not entered)
						NextSentence = true
					else
						DBCompany				= each.ReceivableInvoiceDetail.Company
						DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
						DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
						if  (!PrmOverride
						and Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						if (each.CompanySystemClosingControlRel.Control
						and  each.Company.VerifyGLDateWithinGLDateRange
						and WorkGLDate not within each.CompanySystemClosingControlRel.ValidEntryDate)
							NextSentence = true

						else
							if  (each.ReceivableInvoiceDetail.AlternateReceivableInvoiceType.Mixed
							and  MixedAppliedFlag = "N")

								invoke ApplyMix MixedReceivableInvoiceCreditDetailRel
									invoked.CashApplicationResult = PrmCashApplicationResult

							if  (!ThisInvoiceDetailRel.NationalAccountTransactionRel exists)

								NextSentence = true
							else

								include ApplyPaymentToThisInvoice

								if  (PaymentOpen not entered)
									WsDone = true


				BalanceForwardProcessNonNATransaction
					if (!each.IsCreditMemo)



						DBCompany				= each.ReceivableInvoiceDetail.Company
						DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
						DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
						if  (!PrmOverride
						and Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate
						
						include ValidateDetailedRNADistributions
						
						if  (Company.DetailedRNADistributions
						and !LocalAllowDetailFinanceStructure)
							NextSentence = true
						else
						if  (!PrmCurrencyOverride
						and  each.OriginalCurrency		!= OriginalCurrency)
							NextSentence = true
						else
						if  (each.HasReceivableApplicationSelect)
							NextSentence = true
						else
						if  (Company.VendorCreateAndInterfaceToAP
						and  ThisInvoiceDetailARToAPApplicationRel exists)
							NextSentence = true
						else
						if  (each.BaseOpenAmount not entered)
							NextSentence = true
						else
						if (IsPrepaymentTaxWithHolding
						and ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)	
							NextSentence = true
						else

							if  (ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed
							and  MixedAppliedFlag = "N")
								invoke ApplyMix MixedReceivableInvoiceCreditDetailRel
									invoked.CashApplicationResult = PrmCashApplicationResult

							if  (!ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed
							or   ThisInvoiceDetailRel.IsOpen)
								include ApplyPaymentToThisInvoice
								if  (PaymentOpen not entered)
									WsDone = true
									end for each



				ApplyPaymentToThisInvoice





					WorkUnappliedAmount					= ThisInvoiceDetailRel.OpenAmount
					initialize WsTransactionDiscount

					if  (!ExemptDiscounting)
						WsPriorApplication						= false

						if  (ThisInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason != blank
						and  ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)
							if (ThisInvoiceDetailRel.ApplicationAmount.CurrencyAmount entered)
								if (ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									if (ThisInvoiceDetailRel.MixedSignCreditMemoPriorApplicationRel exists)
										WsPriorApplication		= true
								if (ThisInvoiceDetailRel.MixedSignPriorApplicationRel exists)
									WsPriorApplication		= true

								if (!WsPriorApplication)
									WsTransactionAmount			= ThisInvoiceDetailRel.InvoiceAmount.CurrencyAmount -  ThisInvoiceDetailRel.ApplicationAmount.CurrencyAmount
							else
								WsTransactionAmount				= ThisInvoiceDetailRel.InvoiceAmount.CurrencyAmount


						if (!ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)
							if (ThisInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
								WsPriorApplication				= true
						else
							WsTransactionAmount					= ThisInvoiceDetailRel.InvoiceAmount.CurrencyAmount

						if  (ThisInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason entered
						and  ThisInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
						and !WsPriorApplication)

							I9 = 1
							while (I9 <= 3)
								if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] not entered)
									end while
								else
								if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] + ThisInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
									if (ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] entered)
										WsTransactionDiscount	= ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9]
										end while
									else
										WsTransactionDiscount	= (ThisInvoiceDetailRel.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
										end while

								I9 +=1
						else
						if (ThisInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason entered
						and ThisInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
						and WsPriorApplication)

							LocalGiveNoDiscount = false
							if (ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)

								if (ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									for each ThisInvoiceDetailRel.MixedSignCreditMemoPriorApplicationRel
										for each each.ReceivableApplicationAdjustmentRel
											if (!(each.ReceivableApplication.Reverse
											or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
												LocalGiveNoDiscount = true
												end for each
										if (LocalGiveNoDiscount = true)
											end for each
										I9 = 1
										while (I9 < 4)
											if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
												if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
													if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
														LocalGiveNoDiscount = true
												else
													LocalGiveNoDiscount = false
													end while
											I9 += 1
								for each ThisInvoiceDetailRel.MixedSignPriorApplicationRel
									for each each.ReceivableApplicationAdjustmentRel
										if (!(each.ReceivableApplication.Reverse
										or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
											LocalGiveNoDiscount = true
											end for each
									if (LocalGiveNoDiscount = true)
										end for each
									I9 = 1
									while (I9 < 4)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
											if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
												if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
													LocalGiveNoDiscount = true
											else
												LocalGiveNoDiscount = false
												end while
										I9 += 1
							else
								for each ThisInvoiceDetailRel.ReceivableApplicationRel
									I9 = 1
									while (I9 < 4)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
											if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
												if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
													LocalGiveNoDiscount = true
											else
												LocalGiveNoDiscount = false
												end while
										I9 += 1

									for each each.ReceivableApplicationAdjustmentRel
										if (!(each.ReceivableApplication.Reverse
										or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
											LocalGiveNoDiscount = true

							if (!LocalGiveNoDiscount)
								I9 = 1
								while (I9 <= 3)
									if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] not entered)
										end while
									else
									if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] + ThisInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
										if (ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] entered
										and not ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)

											if (ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] >= ThisInvoiceDetailRel.OpenAmount)
												WsTransactionDiscount = blank
											else
												WsTransactionDiscount = ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9]
											end while
										else
											if (ThisInvoiceDetailRel.DiscountPercent.DiscPct[I9] * WsTransactionAmount >= ThisInvoiceDetailRel.OpenAmount)
												WsTransactionDiscount = blank
											else
												WsTransactionDiscount = (ThisInvoiceDetailRel.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
											end while
									I9 +=1

						if (WsTransactionDiscount entered)

							CurrencyWork.TransactionAmount			= WorkUnappliedAmount - WsTransactionDiscount
							CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
							WorkInvoiceOpenPaymentCurrency			= CurrencyWork.BaseAmount.OutputCurrencyAmount

							if  (!ThisInvoiceDetailRel.IsCreditMemo)
								if (PaymentOpen < WorkInvoiceOpenPaymentCurrency)
									WsTransactionDiscount = 0

						if (WsTransactionDiscount entered)
							WorkUnappliedAmount					-= WsTransactionDiscount

					CurrencyWork.TransactionAmount			= WorkUnappliedAmount
					CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
					WorkInvoiceOpenPaymentCurrency			= CurrencyWork.BaseAmount.OutputCurrencyAmount



					if  (ThisInvoiceDetailRel.IsCreditMemo)
						WorkUnappliedAmount					= WorkInvoiceOpenPaymentCurrency
					else
					if  (WorkInvoiceOpenPaymentCurrency	> PaymentOpen)
						WorkUnappliedAmount					= PaymentOpen
					else
						WorkUnappliedAmount					= WorkInvoiceOpenPaymentCurrency

					if (not ThisInvoiceDetailRel.IsCreditMemo
					and CashDetailState.Released
					and Company.DetailedRNADistributions
					and LocalPaymentAmountRemaining entered
					and WorkUnappliedAmount > LocalPaymentAmountRemaining)
						WorkUnappliedAmount = LocalPaymentAmountRemaining

					if  (WsTransactionDiscount entered
					and  ThisInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason entered
					and  OriginalCurrency != ThisInvoiceDetailRel.OriginalCurrency)

						CurrencyWork.TransactionAmount			= WsTransactionDiscount
						CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
						CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
						WsTransactionDiscount					= CurrencyWork.BaseAmount.OutputCurrencyAmount




					if (WorkInvoiceOpenPaymentCurrency entered)
						invoke UnreleasedCashApplication.Create ReceivableApplication
							assign result to NewReceivableApplication
							invoked.Company										= ThisInvoiceDetailRel.Company
							invoked.ReceivableApplication.TransType				= ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.ReceivableApplication.Invoice				= ThisInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
							invoked.ReceivableApplication.PaymentSeq			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
							invoked.ReceivableApplication.BatchNumber			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.BatchNumber

							invoked.EnteredAmount								= WorkUnappliedAmount
							invoked.ApplicationCurrency							= OriginalCurrency

							invoked.ReceivableOperator							= PrmOperator
							invoked.ApplicationSource							= "A"
							invoked.ReceivableGeneralLedgerCode					= ThisInvoiceDetailRel.ReceivableGeneralLedgerCode
							invoked.GeneralLedgerDate							= WorkGLDate

							invoked.CreditTransaction.CreditCompany				= Company
							invoked.CreditTransaction.CreditCustomer			= Customer
							invoked.CreditTransaction.CreditBatch				= ReceivablePaymentHeader
							invoked.CreditTransaction.CreditSequence			= ReceivablePayment
							invoked.CreditTransaction.CreditType				= TypeOfPayment
							invoked.CreditTransaction.CreditNumber				= PaymentNumber
							invoked.DepositDate									= DepositDate
							invoked.GLOffsetCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
							invoked.CashApplicationResult						= PrmCashApplicationResult

							if  (OriginalCurrency								= LocalPrmCompanyGroupCompany.Currency
							and  ThisInvoiceDetailRel.OriginalCurrency			= WsInvoiceCurrency
							and  WsInvoiceCurrency								= LocalPrmCompanyGroupCompany.Currency)
								invoked.ApplicationCurrencyType					= "B"
							else
							if  (OriginalCurrency								!= LocalPrmCompanyGroupCompany.Currency
							and  ThisInvoiceDetailRel.OriginalCurrency			!= WsInvoiceCurrency
							and  ThisInvoiceDetailRel.OriginalCurrency			= OriginalCurrency
							and  WsInvoiceCurrency								= LocalPrmCompanyGroupCompany.Currency)
								invoked.ApplicationCurrencyType					= "N"
							else
								invoked.ApplicationCurrencyType					= "M"

							if (WsTransactionDiscount entered
							and ThisInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason entered)
								invoked.CreateAdjustReason						= ThisInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason
								invoked.CreateAdjustAmount						= WsTransactionDiscount

							if  (ExemptApplicationTolerances)
								invoked.SkipToleranceCheck						= true
								invoked.BypassAutoAdjust						= true

						ApplicationOccurred = true


				ApplyCreditToThisInvoice







					WorkUnappliedAmount						= ThisInvoiceDetailRel.OpenAmount

					initialize WsTransactionDiscount

					WsPriorApplication						= false

					if  (CompanyCustomerRel.DiscountAdjustmentReason != blank
					and  ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)
						if (ThisInvoiceDetailRel.ApplicationAmount.CurrencyAmount entered)
							if (ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								if (ThisInvoiceDetailRel.MixedSignCreditMemoPriorApplicationRel exists)
									WsPriorApplication		= true
							if (ThisInvoiceDetailRel.MixedSignPriorApplicationRel exists)
								WsPriorApplication		= true

							if (!WsPriorApplication)
								WsTransactionAmount			= ThisInvoiceDetailRel.InvoiceAmount.CurrencyAmount -  ThisInvoiceDetailRel.ApplicationAmount.CurrencyAmount
						else
							WsTransactionAmount				= ThisInvoiceDetailRel.InvoiceAmount.CurrencyAmount


					if (!ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)
						if (ThisInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							WsPriorApplication				= true
					else
						WsTransactionAmount					= ThisInvoiceDetailRel.InvoiceAmount.CurrencyAmount

					if  (CompanyCustomerRel.DiscountAdjustmentReason entered
					and  ThisInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
					and !WsPriorApplication)

						I9 = 1
						while (I9 <= 3)
							if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] not entered)
								end while
							else
							if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] + ThisInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
								if (ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] entered)
									WsTransactionDiscount	= ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9]
									end while
								else
									WsTransactionDiscount	= (ThisInvoiceDetailRel.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
									end while

							I9 +=1
					else
					if (CompanyCustomerRel.DiscountAdjustmentReason entered
					and ThisInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
					and WsPriorApplication)

						LocalGiveNoDiscount = false
						if (ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)

							if (ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								for each ThisInvoiceDetailRel.MixedSignCreditMemoPriorApplicationRel
									for each each.ReceivableApplicationAdjustmentRel
										if (!(each.ReceivableApplication.Reverse
										or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
											LocalGiveNoDiscount = true
											end for each
									if (LocalGiveNoDiscount = true)
										end for each
									I9 = 1
									while (I9 < 4)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
											if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
												if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
													LocalGiveNoDiscount = true
											else
												LocalGiveNoDiscount = false
												end while
										I9 += 1

							for each ThisInvoiceDetailRel.MixedSignPriorApplicationRel
								for each each.ReceivableApplicationAdjustmentRel
									if (!(each.ReceivableApplication.Reverse
									or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
										LocalGiveNoDiscount = true
										end for each
								if (LocalGiveNoDiscount = true)
									end for each
								I9 = 1
								while (I9 < 4)
									if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
											if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
												LocalGiveNoDiscount = true
										else
											LocalGiveNoDiscount = false
											end while
									I9 += 1
						else
							for each ThisInvoiceDetailRel.ReceivableApplicationRel
								I9 = 1
								while (I9 < 4)
									if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
										if (each.ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + each.ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
											if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
												LocalGiveNoDiscount = true
										else
											LocalGiveNoDiscount = false
											end while
									I9 += 1

								for each each.ReceivableApplicationAdjustmentRel
									if (!(each.ReceivableApplication.Reverse
									or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
										LocalGiveNoDiscount = true

						if (!LocalGiveNoDiscount)
							I9 = 1
							while (I9 <= 3)

								if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] not entered)
									end while
								else
								if (ThisInvoiceDetailRel.DiscountDate.DiscDate[I9] + ThisInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays >= DepositDate)
									if (ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] entered
									and not ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed)

										if (ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] >= ThisInvoiceDetailRel.OpenAmount)
											WsTransactionDiscount = blank
										else
											WsTransactionDiscount = ThisInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9]
										end while
									else
										if (ThisInvoiceDetailRel.DiscountPercent.DiscPct[I9] * WsTransactionAmount >= ThisInvoiceDetailRel.OpenAmount)
											WsTransactionDiscount = blank
										else
											WsTransactionDiscount = (ThisInvoiceDetailRel.DiscountPercent.DiscPct[I9] * WsTransactionAmount)
										end while
								I9 +=1

					if (WsTransactionDiscount entered)

						if (!ThisInvoiceDetailRel.IsCreditMemo)

							CurrencyWork.TransactionAmount			= ThisCreditInvoiceDetailRel.OpenAmount - WsTransactionDiscount
							CurrencyWork.FromCurrency				= OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency		= ThisInvoiceDetailRel.OriginalCurrency
							WsCreditOpenInvoiceCurrency				= CurrencyWork.BaseAmount.OutputCurrencyAmount

							if (WsCreditOpenInvoiceCurrency < WorkUnappliedAmount)
								WsTransactionDiscount = 0

					if (WsTransactionDiscount entered)
						WorkUnappliedAmount					-= WsTransactionDiscount

					WsCreditOpen							= ThisCreditInvoiceDetailRel.OpenAmount

					CurrencyWork.TransactionAmount			= WsCreditOpen
					CurrencyWork.FromCurrency				= OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency		= ThisInvoiceDetailRel.OriginalCurrency
					WsCreditOpenInvoiceCurrency				= CurrencyWork.BaseAmount.OutputCurrencyAmount


					if  (!ThisInvoiceDetailRel.IsCreditMemo
					and   WorkUnappliedAmount	> WsCreditOpenInvoiceCurrency)
						WorkUnappliedAmount					= WsCreditOpenInvoiceCurrency

					if  (WsTransactionDiscount entered
					and  CompanyCustomerRel.DiscountAdjustmentReason entered
					and  OriginalCurrency != ThisInvoiceDetailRel.OriginalCurrency)

						CurrencyWork.TransactionAmount			= WsTransactionDiscount
						CurrencyWork.FromCurrency				= ThisInvoiceDetailRel.OriginalCurrency
						CurrencyWork.BaseAmount.ToCurrency		= OriginalCurrency
						WsTransactionDiscount					= CurrencyWork.BaseAmount.OutputCurrencyAmount




					invoke UnreleasedCashApplication.Create ReceivableApplication
						assign result to NewReceivableApplication
						invoked.Company										= ThisInvoiceDetailRel.Company
						invoked.ReceivableApplication.TransType				= ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableApplication.Invoice				= ThisInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplication.PaymentSeq			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableApplication.BatchNumber			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.BatchNumber

						invoked.EnteredAmount								= WorkUnappliedAmount
						invoked.ApplicationCurrency							= OriginalCurrency

						invoked.ReceivableOperator							= PrmOperator
						invoked.ApplicationSource							= "A"
						invoked.ReceivableGeneralLedgerCode					= ThisInvoiceDetailRel.ReceivableGeneralLedgerCode
						invoked.GeneralLedgerDate							= WorkGLDate

						invoked.CreditTransaction.CreditType				= ThisCreditInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.CreditTransaction.CreditCompany				= ThisCreditInvoiceDetailRel.Company
						invoked.CreditTransaction.CreditCustomer			= ThisCreditInvoiceDetailRel.Customer
						invoked.CreditTransaction.CreditBatch				= ThisCreditInvoiceDetailRel.ReceivableInvoiceDetail.BatchNumber
						invoked.CreditTransaction.CreditSequence			= ThisCreditInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
						invoked.CreditTransaction.CreditNumber				= ThisCreditInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
						invoked.CashApplicationResult						= PrmCashApplicationResult

						invoked.DepositDate									= ThisCreditInvoiceDetailRel.TransactionDate		
						invoked.GLOffsetCode								= ThisCreditInvoiceDetailRel.ReceivableGeneralLedgerCode

						if  (ThisCreditInvoiceDetailRel.OriginalCurrency	= LocalPrmCompanyGroupCompany.Currency
						and  ThisInvoiceDetailRel.OriginalCurrency			= WsInvoiceCurrency
						and  WsInvoiceCurrency								= LocalPrmCompanyGroupCompany.Currency)
							invoked.ApplicationCurrencyType					= "B"
						else
						if  (ThisCreditInvoiceDetailRel.OriginalCurrency		!= LocalPrmCompanyGroupCompany.Currency
						and  ThisInvoiceDetailRel.OriginalCurrency			!= WsInvoiceCurrency
						and  ThisInvoiceDetailRel.OriginalCurrency			= ThisCreditInvoiceDetailRel.OriginalCurrency
						and  WsInvoiceCurrency								= LocalPrmCompanyGroupCompany.Currency)
							invoked.ApplicationCurrencyType					= "N"
						else
							invoked.ApplicationCurrencyType					= "M"

						if (WsTransactionDiscount entered
						and CompanyCustomerRel.DiscountAdjustmentReason entered)
							invoked.CreateAdjustReason						= CompanyCustomerRel.DiscountAdjustmentReason
							invoked.CreateAdjustAmount						= WsTransactionDiscount


				3500DoLastStatement  


					if  (Prepayment.Prepayment
					or  (Customer != TransferredToCustomer
					and  CancelDate entered))
						NextSentence = true
					else
						if  (PrmOverride
						and  CancelDate not entered
						and  TransferDate not entered)
							WorkGLDate = PrmGlDate
						else
						if (!Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if  (Company.DefaultApplicationDate.PaymentCreditPostDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = current corporate date

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < CancelDate)
								WorkGLDate = CancelDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						WsDone = false
						MixedAppliedFlag = "N"
						LocalTransactionType = ReceivableInvoiceType.CreditMemo
						for each LocalTypeTransactionsForCustomerRel
							include 3510DoInvoiceDetails
							if  (WsDone)
								end for each

						MixedAppliedFlag = "N"
						LocalTransactionType = ReceivableInvoiceType.Invoice
						for each LocalTypeTransactionsForCustomerRel
							include 3510DoInvoiceDetails
							if  (WsDone)
								end for each

						if (!WsDone)
							MixedAppliedFlag = "N"
							LocalTransactionType = ReceivableInvoiceType.DebitMemo
							for each LocalTypeTransactionsForCustomerRel
								include 3510DoInvoiceDetails
								if  (WsDone)
									end for each


				3510DoInvoiceDetails

					if (IsPrepaymentTaxWithHolding
					and each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)		
						NextSentence = true
					else
					if  (!PrmCurrencyOverride
					and  each.OriginalCurrency		!= OriginalCurrency)
						NextSentence = true
					else
					if  (each.ReceivableInvoiceDetail.HasReceivableApplicationSelect)
						NextSentence = true
					else
					if  (each.LastStatementDate not entered
					or   each.LastStatementDate != LastStatementDate)
						NextSentence = true
					else
					if  (Company.VendorCreateAndInterfaceToAP
					and  each.ReceivableInvoiceDetail.HasARToAPApplicationSelect)
						NextSentence = true
					else
					if  (each.BaseOpenAmount not entered)
						NextSentence = true
					else
						DBCompany				= each.ReceivableInvoiceDetail.Company
						DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
						DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
						if  (!(PrmOverride
						and  CancelDate not entered
						and  TransferDate not entered)
						and Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate
						if  (each.AlternateReceivableInvoiceType.Mixed
						and  MixedAppliedFlag = "N")

							invoke ApplyMix MixedReceivableInvoiceCreditDetailRel
								invoked.CashApplicationResult = PrmCashApplicationResult

						if  (ThisInvoiceDetailRel.IsOpen)
							include ApplyPaymentToThisInvoice
							if  (PaymentOpen not entered)
								WsDone = true


				4000DoAlgorithm	


					if  (AppliedAmount entered
					or   Prepayment.Prepayment
					or   OriginalCurrency != Company.Currency
					or   CancelDate entered)

						NextSentence = true
					else
						if  (PrmOverride
						and  CancelDate not entered
						and  TransferDate not entered)
							WorkGLDate = PrmGlDate
						else
						if (!Company.DefaultApplicationDate.LatestTransactionPostDate)
							if  (Company.DefaultApplicationDate.PaymentCreditPostDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = current corporate date

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						include 4087InitializeArray

						initialize WsVariance

						WsCmpinz = false
						Subx = 1

						WsAroSw = false


						for each TransactionsForCustomerByDueDateRel


							DBCompany				= each.Company
							DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							DBInvoice				= each.ReceivableInvoiceDetail.Invoice
							DBPaymentSeq			= each.ReceivableInvoiceDetail.PaymentSeq

							if  (ThisInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered
							or   ThisInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount entered
							or   ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
							or   ThisInvoiceDetailRel.AlternateReceivableInvoiceType.Mixed
							or   !ThisInvoiceDetailRel.BankTransactionType.CashPayment
							or   ThisInvoiceDetailRel.OriginalCurrency != OriginalCurrency
							or   ThisInvoiceDetailRel.Company != Company
							or   ThisInvoiceDetailRel.Customer != Customer
							or  (Company.VendorCreateAndInterfaceToAP
							and  ThisInvoiceDetailARToAPApplicationRel exists
							and  ThisInvoiceDetailARToAPApplicationRel.Status.Unreleased))

								NextSentence = true
							else
							if  (ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount = BaseAmount)
								include 4060ApplyPayment
								WsCmpinz = true
								include 4087InitializeArray
								end for each
							else


							if  (ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount != ThisInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							and  ThisInvoiceDetailRel.ReceivableInvoiceRel.AppliedInvoiceDetailRel exists)

								NextSentence = true
							else

								WsNegative = false

								if  (ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount != ThisInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount)
									WsAroSw = true

								if (WsAroSw
								and !WsDone)
									WsVariance = ThisInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - BaseAmount
								else
									WsVariance = ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - BaseAmount

								if  (WsVariance < 0)
									WsNegative				= true
									WsVariance				= WsVariance * -1

									if (WsVariance < LocalVariance
									or  WsVariance = LocalVariance)
										WsDone = true

								if ((WsVariance < LocalVariance
								or   WsVariance = LocalVariance)
								and  WsAroSw = false
								and  WsDone = true)
									if (WsNegative)
										WsVariance			= WsVariance * -1

									if  (LocalReasonCode.ReceivableAdjustmentReasonType.OverShort
									or  (LocalReasonCode.ReceivableAdjustmentReasonType.Discount
									and  WsVariance			> 0))
										include 4060ApplyPayment
										WsCmpinz = true
										WsNegative = false
										include 4087InitializeArray
										end for each


								if  (!WsCmpinz)
									if  (!WsDone
									and  WsAroSw)

										WsArrayInvoiceExists = false
										WsArrayInc = 1
										while (WsArrayInc < Subx)
											if( WsArray.Work[WsArrayInc].Customer = ThisInvoiceDetailRel.ReceivableInvoiceRel.Customer
												and WsArray.Work[WsArrayInc].Invoice = ThisInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
												and WsArray.Work[WsArrayInc].TransactionType = ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType )
													WsArrayInvoiceExists = true
													end while
											WsArrayInc +=1
										if (!WsArrayInvoiceExists)
											WsArray.Work[Subx].Customer			= ThisInvoiceDetailRel.ReceivableInvoiceRel.Customer
											WsArray.Work[Subx].TransactionDate	= ThisInvoiceDetailRel.ReceivableInvoiceRel.TransactionDate
											WsArray.Work[Subx].DueDate			= ThisInvoiceDetailRel.DueDate
											WsArray.Work[Subx].TransactionType	= ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
											WsArray.Work[Subx].Invoice			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
											WsArray.Work[Subx].PaymentSeq		= ThisInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail
											WsArray.Work[Subx].BaseAmount		= ThisInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

									else

										WsArray.Work[Subx].Customer			= ThisInvoiceDetailRel.Customer
										WsArray.Work[Subx].TransactionDate	= ThisInvoiceDetailRel.TransactionDate
										WsArray.Work[Subx].DueDate			= ThisInvoiceDetailRel.DueDate
										WsArray.Work[Subx].TransactionType	= ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
										WsArray.Work[Subx].Invoice			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
										WsArray.Work[Subx].PaymentSeq		= ThisInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
										WsArray.Work[Subx].BaseAmount		= ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount


									Subx += 1
									RecordSelected = false

							if  (WsCmpinz)
								end for each
							if  (Subx > LocalMaxInvoices)
								end for each


						if (WsCmpinz)
							include 4087InitializeArray
						else
							include 4050CompanyCompare


				4050CompanyCompare


					DoneWith4050 = false

					if (WsCheckAmt = WsArray.Work[1].BaseAmount)

						WsArray.Work[1].Selected	= true
						DoneWith4050	= true

					if (LocalCombination		  = 1)

						DoneWith4050 = true

					if  (!DoneWith4050)
						WsCheckAmt = BaseAmount
						WsCheckAmt -= WsArray.Work[1].BaseAmount
						WsCheckAmt -= WsArray.Work[2].BaseAmount

						if (WsCheckAmt = 0)
							WsArray.Work[1].Selected = true
							WsArray.Work[2].Selected = true

							DoneWith4050 = true
						else
						if (LocalMaxInvoices	= 2)

							DoneWith4050 = true

					if  (!DoneWith4050)
						if (LocalMaxInvoices = 3)
							WsCheckAmt = BaseAmount
							WsCheckAmt -= WsArray.Work[1].BaseAmount
							WsCheckAmt -= WsArray.Work[3].BaseAmount
							if (WsCheckAmt = 0)
								WsArray.Work[1].Selected	= true
								WsArray.Work[3].Selected	= true
								DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								if (LocalCombination		  = 2)
									DoneWith4050 = true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount

								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									DoneWith4050	= true

							DoneWith4050 = true

					if  (!DoneWith4050)
						if (LocalMaxInvoices = 4)
							WsCheckAmt = BaseAmount
							WsCheckAmt -= WsArray.Work[1].BaseAmount
							WsCheckAmt -= WsArray.Work[3].BaseAmount
							if (WsCheckAmt = 0)
								WsArray.Work[1].Selected	= true
								WsArray.Work[3].Selected	= true
								DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								if (LocalCombination		  = 2)
									DoneWith4050 = true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)

								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount

								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								if (LocalCombination		  = 3)
									DoneWith4050 = true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							DoneWith4050 = true

					if  (!DoneWith4050)
						if (LocalMaxInvoices = 5)

							WsCheckAmt = BaseAmount
							WsCheckAmt -= WsArray.Work[1].BaseAmount
							WsCheckAmt -= WsArray.Work[3].BaseAmount
							if (WsCheckAmt = 0)
								WsArray.Work[1].Selected	= true
								WsArray.Work[3].Selected	= true
								DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[3].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[4].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if (LocalCombination		  = 2)
								DoneWith4050 = true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									DoneWith4050	= true


							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[4].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[4].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if (LocalCombination		  = 3)
								DoneWith4050 = true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount
								if (WsCheckAmt = 0)
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							if  (!DoneWith4050)
								if (LocalCombination		  = 4)
									DoneWith4050 = true

							if  (!DoneWith4050)
								WsCheckAmt = BaseAmount
								WsCheckAmt -= WsArray.Work[1].BaseAmount
								WsCheckAmt -= WsArray.Work[2].BaseAmount
								WsCheckAmt -= WsArray.Work[3].BaseAmount
								WsCheckAmt -= WsArray.Work[4].BaseAmount
								WsCheckAmt -= WsArray.Work[5].BaseAmount

								if (WsCheckAmt = 0)
									WsArray.Work[1].Selected	= true
									WsArray.Work[2].Selected	= true
									WsArray.Work[3].Selected	= true
									WsArray.Work[4].Selected	= true
									WsArray.Work[5].Selected	= true
									DoneWith4050	= true

							DoneWith4050 = true





					Subx = 1
					while (Subx <= 5)





						if  (WsArray.Work[Subx].Selected	= true)
							if (WsArray.Work[Subx].PaymentSeq > 1)
								DBCompany				= Company
								DBTransactionType		= WsArray.Work[Subx].TransactionType
								DBInvoice				= WsArray.Work[Subx].Invoice
								for each RelatedInvoiceDetailRel	
									DBPaymentSeq		= each.ReceivableInvoiceDetail.PaymentSeq
									WorkUnappliedAmount = each.ReceivableInvoiceDetail.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									WsDetailProcessing  = true

									include 4055ApplyPayment
							else
								DBCompany				= Company
								DBTransactionType		= WsArray.Work[Subx].TransactionType
								DBInvoice				= WsArray.Work[Subx].Invoice
								DBPaymentSeq			= WsArray.Work[Subx].PaymentSeq

								if (DBTransactionType entered
								and DBInvoice entered
								and DBPaymentSeq entered)
									include 4055ApplyPayment
						Subx += 1


					include 4087InitializeArray

				4060ApplyPayment
					if ((ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - PaymentOpen) != 0)
						if  (LocalReasonCode.ReceivableAdjustmentReasonType.OverShort
							or  (LocalReasonCode.ReceivableAdjustmentReasonType.Discount
							and  WsVariance			> 0))
								WorkUnAppliedAdjustAmount = ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - PaymentOpen

					if (ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount <=PaymentOpen)
						WorkUnappliedAmount										= ThisInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - WorkUnAppliedAdjustAmount
					else
						WorkUnappliedAmount										= PaymentOpen
					WsSkipWorkUnapplied = true
					include 4055ApplyPayment

				4055ApplyPayment

					if  (!(PrmOverride
					and  CancelDate not entered
					and  TransferDate not entered)
					and Company.DefaultApplicationDate.LatestTransactionPostDate)	
						if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
							WorkGLDate = GeneralLedgerDate
						else
							WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

						if  (Customer = TransferredToCustomer
						and  WorkGLDate < TransferDate)
							WorkGLDate = TransferDate

						if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
						and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
						and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
							WorkGLDate = PrmGlDate
					if (!WsSkipWorkUnapplied)
						if (!WsDetailProcessing)
							if  (WsArray.Work[Subx].BaseAmount entered
							and WsArray.Work[Subx].BaseAmount <= PaymentOpen)
								WorkUnappliedAmount									= WsArray.Work[Subx].BaseAmount
							else
								WorkUnappliedAmount									= PaymentOpen

					invoke UnreleasedCashApplication.Create ReceivableApplication
						assign result to NewReceivableApplication
						invoked.Company										= ThisInvoiceDetailRel.Company
						invoked.ReceivableApplication.TransType				= ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableApplication.Invoice				= ThisInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplication.PaymentSeq			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableApplication.BatchNumber			= ThisInvoiceDetailRel.ReceivableInvoiceDetail.BatchNumber

						invoked.EnteredAmount								= WorkUnappliedAmount
						invoked.ApplicationCurrency							= OriginalCurrency

						invoked.ReceivableOperator							= PrmOperator
						invoked.ApplicationSource							= "A"
						invoked.ReceivableGeneralLedgerCode					= ThisInvoiceDetailRel.ReceivableGeneralLedgerCode
						invoked.GeneralLedgerDate							= WorkGLDate

						invoked.CreditTransaction.CreditCompany				= Company
						invoked.CreditTransaction.CreditCustomer			= Customer
						invoked.CreditTransaction.CreditBatch				= ReceivablePaymentHeader
						invoked.CreditTransaction.CreditSequence			= ReceivablePayment
						invoked.CreditTransaction.CreditType				= TypeOfPayment
						invoked.CreditTransaction.CreditNumber				= PaymentNumber
						invoked.DepositDate									= DepositDate
						invoked.GLOffsetCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
						invoked.ApplicationCurrencyType						= "B"

						invoked.SkipToleranceCheck							= true
						invoked.BypassAutoAdjust							= true
						invoked.CashApplicationResult						= PrmCashApplicationResult
						if (WorkUnAppliedAdjustAmount entered)
							invoked.CreateAdjustAmount						= WorkUnAppliedAdjustAmount
							invoked.CreateAdjustReason						= LocalReasonCode.ReceivableAdjustmentReasonType

					ApplicationOccurred = true


				4087InitializeArray


					Subx = 1
					while (Subx <= 5)
						initialize WsArray.Work[Subx].Customer
						initialize WsArray.Work[Subx].TransactionDate
						initialize WsArray.Work[Subx].DueDate
						initialize WsArray.Work[Subx].TransactionType
						initialize WsArray.Work[Subx].Invoice
						initialize WsArray.Work[Subx].PaymentSeq
						initialize WsArray.Work[Subx].BaseAmount
						initialize WsArray.Work[Subx].Selected
						Subx += 1


				5000DoUserDefinedOverride  


					if  (CancelDate entered)
						NextSentence = true
					else
					if  (CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)
						NextSentence = true
					else
						if  (PrmOverride)
							WorkGLDate = PrmGlDate
						else
							initialize ApplicationOccurred
							if (!Company.DefaultApplicationDate.LatestTransactionPostDate)	
								if  (Company.DefaultApplicationDate.PaymentCreditPostDate)
									WorkGLDate = GeneralLedgerDate
								else
									WorkGLDate = current corporate date

								if  (Customer = TransferredToCustomer
								and  WorkGLDate < TransferDate)
									WorkGLDate = TransferDate

								if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
								and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
								and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
									WorkGLDate = PrmGlDate

							if  (WorkApplicationCode.RemittanceMethod)

								include 2000DoRemit

							if  (!ApplicationOccurred
							and  WorkApplicationCode.LastStatementMethod
							and  PaymentOpen entered)

								include 3500DoLastStatement

							if  (!ApplicationOccurred
							and  WorkApplicationCode.AgingPeriodMethod
							and  PaymentOpen entered)

								include 5200AgingPeriodMethod

							if  (!ApplicationOccurred
							and  WorkApplicationCode.CustomGroup entered
							and  PaymentOpen entered)

								include 5400CustomGroup

							if  (!ApplicationOccurred
							and  WorkApplicationCode.OldestBased
							and  PaymentOpen entered)

								include 5600OldestBased


				5200AgingPeriodMethod  



					initialize ApplyToFuture1Amount
					initialize ApplyToFutureAmount
					initialize ApplyToCurrentAmount
					initialize ApplyToPeriod1Amount
					initialize ApplyToPeriod2Amount
					initialize ApplyToPeriod3Amount
					initialize ApplyToPeriod4Amount
					initialize ApplyToPeriod5Amount
					initialize ApplyToPeriod6Amount
					initialize ApplyToPeriod7Amount
					initialize ApplyToPeriod8Amount

					AgePeriodMatch = false

					if  (!AgePeriodMatch)
						WsCheckAmt = BaseAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Future1Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.FutureAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.CurrentAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period1Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period2Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period3Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period4Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period5Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period6Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period7Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period8Amount

						if (WsCheckAmt = 0)
							ApplyToFuture1Amount		= true
							ApplyToFutureAmount			= true
							ApplyToCurrentAmount		= true
							ApplyToPeriod1Amount		= true
							ApplyToPeriod2Amount		= true
							ApplyToPeriod3Amount		= true
							ApplyToPeriod4Amount		= true
							ApplyToPeriod5Amount		= true
							ApplyToPeriod6Amount		= true
							ApplyToPeriod7Amount		= true
							ApplyToPeriod8Amount		= true

							AgePeriodMatch				= true

					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period8Amount)
						ApplyToPeriod8Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period7Amount)
						ApplyToPeriod7Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period6Amount)
						ApplyToPeriod6Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period5Amount)
						ApplyToPeriod5Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period4Amount)
						ApplyToPeriod4Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period3Amount)
						ApplyToPeriod3Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period2Amount)
						ApplyToPeriod2Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Period1Amount)
						ApplyToPeriod1Amount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.CurrentAmount)

						ApplyToCurrentAmount			= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.FutureAmount)
						ApplyToFutureAmount				= true
						AgePeriodMatch					= true
					else
					if  (!AgePeriodMatch
					and   BaseAmount					= AgePeriodBalanceHeaderRel.Future1Amount)
						ApplyToFuture1Amount			= true
						AgePeriodMatch					= true


					if  (!AgePeriodMatch)
						WsCheckAmt = BaseAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period1Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period2Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period3Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period4Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period5Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period6Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period7Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period8Amount

						if (WsCheckAmt = 0)
							ApplyToPeriod1Amount		= true
							ApplyToPeriod2Amount		= true
							ApplyToPeriod3Amount		= true
							ApplyToPeriod4Amount		= true
							ApplyToPeriod5Amount		= true
							ApplyToPeriod6Amount		= true
							ApplyToPeriod7Amount		= true
							ApplyToPeriod8Amount		= true

							AgePeriodMatch				= true

					if  (!AgePeriodMatch)
						WsCheckAmt = BaseAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.CurrentAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period1Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period2Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period3Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period4Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period5Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period6Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period7Amount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period8Amount

						if (WsCheckAmt = 0)
							ApplyToCurrentAmount		= true
							ApplyToPeriod1Amount		= true
							ApplyToPeriod2Amount		= true
							ApplyToPeriod3Amount		= true
							ApplyToPeriod4Amount		= true
							ApplyToPeriod5Amount		= true
							ApplyToPeriod6Amount		= true
							ApplyToPeriod7Amount		= true
							ApplyToPeriod8Amount		= true
							AgePeriodMatch				= true

					if  (!AgePeriodMatch)
						WsCheckAmt = BaseAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.CurrentAmount

						if (WsCheckAmt = 0)
							ApplyToCurrentAmount		= true
							AgePeriodMatch				= true

					if  (!AgePeriodMatch)
						WsCheckAmt = BaseAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.CurrentAmount
						WsCheckAmt -= AgePeriodBalanceHeaderRel.Period1Amount

						if (WsCheckAmt = 0)
							ApplyToCurrentAmount		= true
							ApplyToPeriod1Amount		= true
							AgePeriodMatch				= true


					if  (ApplyToFuture1Amount		= true)
						LocalPeriod = 1
						include ApplyToInvoicesInPeriod

					if  (ApplyToFutureAmount		= true)
						LocalPeriod = 2
						include ApplyToInvoicesInPeriod

					if  (ApplyToCurrentAmount		= true)
						LocalPeriod = 3
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod1Amount		= true)
						LocalPeriod = 4
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod2Amount		= true)
						LocalPeriod = 5
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod3Amount		= true)
						LocalPeriod = 6
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod4Amount		= true)
						LocalPeriod = 7
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod5Amount		= true)
						LocalPeriod = 8
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod6Amount		= true)
						LocalPeriod = 9
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod7Amount		= true)
						LocalPeriod = 10
						include ApplyToInvoicesInPeriod

					if  (ApplyToPeriod8Amount		= true)
						LocalPeriod = 11
						include ApplyToInvoicesInPeriod


				ApplyToInvoicesInPeriod

					for each AgePeriodBalanceDetailRel


						DBCompany				= each.Company
						DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
						DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq

						if  (!PrmOverride
						and Company.DefaultApplicationDate.LatestTransactionPostDate)	
							if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
								WorkGLDate = GeneralLedgerDate
							else
								WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

							if  (Customer = TransferredToCustomer
							and  WorkGLDate < TransferDate)
								WorkGLDate = TransferDate

							if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
							and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
							and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
								WorkGLDate = PrmGlDate

						if  (!PrmCurrencyOverride
						and  ThisInvoiceDetailRel.OriginalCurrency		!= OriginalCurrency)
							NextSentence = true
						else
						if  (ThisInvoiceDetailRel.HasReceivableApplicationSelect)
							NextSentence = true
						else
						if  (Company.VendorCreateAndInterfaceToAP
						and  ThisInvoiceDetailARToAPApplicationRel exists)
							NextSentence = true
						else
						if  (ThisInvoiceDetailRel.BaseOpenAmount not entered)
							NextSentence = true
						else
						if (IsPrepaymentTaxWithHolding
						and ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)		
							NextSentence = true
						else
							include ApplyPaymentToThisInvoice
							if  (PaymentOpen not entered)
								end for each


				5400CustomGroup  


					InvoiceDetailGroup			= WorkApplicationCode.CustomGroup

					if  (CompanyCustomerRel.NationalAccountIndicator.No)


						for each TransactionsForCustomerInCustomGroupRel


							if  (!PrmCurrencyOverride
							and  each.OriginalCurrency		!= OriginalCurrency)
								NextSentence = true
							else
							if  (each.HasReceivableApplicationSelect)
								NextSentence = true
							else
							if  (Company.VendorCreateAndInterfaceToAP
							and  ThisInvoiceDetailARToAPApplicationRel exists)
								NextSentence = true
							else
							if  (each.BaseOpenAmount not entered)
								NextSentence = true
							else
							if (IsPrepaymentTaxWithHolding
							and each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)		
								NextSentence = true
							else
								DBCompany				= each.ReceivableInvoiceDetail.Company
								DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
								DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq

								if  (!PrmOverride
								and Company.DefaultApplicationDate.LatestTransactionPostDate)	
									if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
										WorkGLDate = GeneralLedgerDate
									else
										WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

									if  (Customer = TransferredToCustomer
									and  WorkGLDate < TransferDate)
										WorkGLDate = TransferDate

									if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
									and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
									and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
										WorkGLDate = PrmGlDate
								include ApplyPaymentToThisInvoice
								if  (PaymentOpen not entered)
									end for each

					else

						for each NationalAccountTransactionsInCustomGroupRel

							if  (!PrmCurrencyOverride
							and  each.OriginalCurrency		!= OriginalCurrency)
								NextSentence = true
							else
							if  (each.ReceivableInvoiceDetail.HasReceivableApplicationSelect)
								NextSentence = true





							else
							if  (Company.VendorCreateAndInterfaceToAP
							and  each.ReceivableInvoiceDetail.HasARToAPApplicationSelect)
								NextSentence = true
							else
							if  (each.BaseOpenAmount not entered)
								NextSentence = true
							else
							if (IsPrepaymentTaxWithHolding
							and each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)		
								NextSentence = true
							else
								DBCompany				= each.ReceivableInvoiceDetail.Company
								DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
								DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq

								if  (!PrmOverride
								and Company.DefaultApplicationDate.LatestTransactionPostDate)	
									if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
										WorkGLDate = GeneralLedgerDate
									else
										WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

									if  (Customer = TransferredToCustomer
									and  WorkGLDate < TransferDate)
										WorkGLDate = TransferDate

									if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
									and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
									and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
										WorkGLDate = PrmGlDate
								if (each.CompanySystemClosingControlRel.Control
								and  each.Company.VerifyGLDateWithinGLDateRange
								and  WorkGLDate not within each.CompanySystemClosingControlRel.ValidEntryDate)
									NextSentence = true
								else
									include ApplyPaymentToThisInvoice
									if  (PaymentOpen not entered)
										end for each


				5600OldestBased  


					if  (CompanyCustomerRel.NationalAccountIndicator.No)


						if  (WorkApplicationCode.CreditMemoOption.ProcessAllFirst)

							LocalTransactionType = ReceivableInvoiceType.CreditMemo
							if (!IsPrepaymentTaxWithHolding)	
								for each LocalTypeTransactionsForCustomerRel
									DBCompany				= each.ReceivableInvoiceDetail.Company
									DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
									DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
									DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
									include 5610DoInvoiceDetails

						for each TransactionsForCustomerByDueDateRel
							DBCompany				= each.ReceivableInvoiceDetail.Company
							DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
							DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
							include 5610DoInvoiceDetails

					else


						if  (CompanyCustomerRel.NationalAccountIndicator.Parent)
							DBNationalCompany			= PrmCompany
							WsCompany					= PrmCompany
							WsNationalCompany			= PrmCompany
							DBNationalCustomer			= SetCustomer
							WsCustomer					= SetCustomer
							WsNationalCustomer			= SetCustomer

						else
							DBNationalCompany			= CompanyCustomerRel.NationalCompany
							WsCompany					= CompanyCustomerRel.NationalCompany
							WsNationalCompany			= CompanyCustomerRel.NationalCompany
							DBNationalCustomer			= CompanyCustomerRel.NationalCustomer
							WsCustomer					= CompanyCustomerRel.NationalCustomer
							WsNationalCustomer			= CompanyCustomerRel.NationalCustomer

						MixedAppliedFlag			= "N"
						if (!PrmNatCredits)
							for each CashAppCreditNatlAcctTransactionsCustomerRel	
								DBCompany				= each.ReceivableInvoiceDetail.Company
								DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
								DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
								include 5610DoInvoiceDetails
						else
							for each CashAppCreditNatlAcctTransactionsRel	
								DBCompany				= each.ReceivableInvoiceDetail.Company
								DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
								DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
								include 5610DoInvoiceDetails

						for each CashAppNatlAcctTransactionsRel	
							DBCompany				= each.ReceivableInvoiceDetail.Company
							DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
							DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
							include 5610DoInvoiceDetails
							if (PaymentOpen not entered)
								end for each


				5610DoInvoiceDetails


					if  (!PrmOverride
					and Company.DefaultApplicationDate.LatestTransactionPostDate)	
						if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
							WorkGLDate = GeneralLedgerDate
						else
							WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

						if  (Customer = TransferredToCustomer
						and  WorkGLDate < TransferDate)
							WorkGLDate = TransferDate

						if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
						and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
						and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
							WorkGLDate = PrmGlDate
					if  (WorkApplicationCode.ExemptDebitMemos
					and  DBTransactionType.DebitMemo)

						NextSentence = true
					else
					if  (WorkApplicationCode.CreditMemoOption.Exempt
					and  DBTransactionType.CreditMemo)

						NextSentence = true
					else
					if  (WorkApplicationCode.ExemptDisputes
					and  ThisInvoiceDetailRel.IsUnresolvedDispute)

						NextSentence = true
					else
					if  (WorkApplicationCode.ExemptEFTTransactions
					and  ThisInvoiceDetailRel.EFTTransaction)

						NextSentence = true
					else
					if  (WorkApplicationCode.IncludePaymentCode entered
					and (ThisInvoiceDetailRel.BankTransactionCode not entered
					or  (ThisInvoiceDetailRel.BankTransactionCode != WorkApplicationCode.IncludePaymentCode.BankTransactionCode[1]
					and  ThisInvoiceDetailRel.BankTransactionCode != WorkApplicationCode.IncludePaymentCode.BankTransactionCode[2]
					and  ThisInvoiceDetailRel.BankTransactionCode != WorkApplicationCode.IncludePaymentCode.BankTransactionCode[3])))

						NextSentence = true
					else
					if  (WorkApplicationCode.ExcludePaymentCode entered
					and  ThisInvoiceDetailRel.BankTransactionCode entered
					and (ThisInvoiceDetailRel.BankTransactionCode = WorkApplicationCode.ExcludePaymentCode.BankTransactionCode[1]
					or   ThisInvoiceDetailRel.BankTransactionCode = WorkApplicationCode.ExcludePaymentCode.BankTransactionCode[2]
					or   ThisInvoiceDetailRel.BankTransactionCode = WorkApplicationCode.ExcludePaymentCode.BankTransactionCode[3]))

						NextSentence = true
					else
					if  (WorkApplicationCode.IncludeInvoiceTypeCode entered
					and (ThisInvoiceDetailRel.InvoiceTypeCode not entered
					or  (ThisInvoiceDetailRel.InvoiceTypeCode != WorkApplicationCode.IncludeInvoiceTypeCode.InvoiceTypeCode[1]
					and  ThisInvoiceDetailRel.InvoiceTypeCode != WorkApplicationCode.IncludeInvoiceTypeCode.InvoiceTypeCode[2]
					and  ThisInvoiceDetailRel.InvoiceTypeCode != WorkApplicationCode.IncludeInvoiceTypeCode.InvoiceTypeCode[3])))

						NextSentence = true
					else
					if  (WorkApplicationCode.ExcludeInvoiceTypeCode entered
					and  ThisInvoiceDetailRel.InvoiceTypeCode entered
					and (ThisInvoiceDetailRel.InvoiceTypeCode = WorkApplicationCode.ExcludeInvoiceTypeCode.InvoiceTypeCode[1]
					or   ThisInvoiceDetailRel.InvoiceTypeCode = WorkApplicationCode.ExcludeInvoiceTypeCode.InvoiceTypeCode[2]
					or   ThisInvoiceDetailRel.InvoiceTypeCode = WorkApplicationCode.ExcludeInvoiceTypeCode.InvoiceTypeCode[3]))

						NextSentence = true
					else
					if  (!PrmCurrencyOverride
					and  ThisInvoiceDetailRel.OriginalCurrency		!= OriginalCurrency)

						NextSentence = true
					else
					if  (ThisInvoiceDetailRel.ReceivableInvoiceDetail.HasReceivableApplicationSelect)

						NextSentence = true
					else
					if  (Company.VendorCreateAndInterfaceToAP
					and  ThisInvoiceDetailRel.ReceivableInvoiceDetail.HasARToAPApplicationSelect)

						NextSentence = true
					else
					if  (each.CompanySystemClosingControlRel.Control
					and  each.Company.VerifyGLDateWithinGLDateRange
					and WorkGLDate not within each.CompanySystemClosingControlRel.ValidEntryDate)
						NextSentence = true
					else
					if  (ThisInvoiceDetailRel.BaseOpenAmount not entered)

						NextSentence = true
					else
					if (IsPrepaymentTaxWithHolding
					and ThisInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo) 	
						NextSentence = true
					else
						if  (WorkApplicationCode.ExemptDiscounting)
							ExemptDiscounting = true

						if  (WorkApplicationCode.ExemptApplicationTolerances)
							ExemptApplicationTolerances = true


						include ApplyPaymentToThisInvoice


			Action Rules

				Empty Set Rules


					LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup	
					LocalCashApplicationResult = PrmCashApplicationResult
					invoke Update LocalCashApplicationResultRel	
						invoked.Status					= 1

				Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						LocalCashApplicationResult = PrmCashApplicationResult

						AutoCashAsyncID = current async action request id
						AutoCashBackgroundGroup = LocalCashApplicationResultRel.DerivedBackgroundGroup
						
						if (config.AutoCashAllowBackgroundProcessing = true)
							DoBackgroundProcessing = true
						
						LocalNumLinesForBatch = config.AutoCashNumLinesForBackground
						if (LocalNumLinesForBatch = 0)
							LocalNumLinesForBatch = 50

					Exit Rules

						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup	
						LocalCashApplicationResult = PrmCashApplicationResult

						if (UpdateStatusInBackground)
							invoke FastUpdate LocalCashApplicationResultRel
								invoked.AsyncID	= AutoCashAsyncID
							invoke SetStatusToComplete LocalCashApplicationResultRel in background
								run after background group (AutoCashBackgroundGroup)
						else
							invoke SetStatusToComplete LocalCashApplicationResultRel

				Customer Set Rules

					Entrance Rules

						SetCompany  = Company
						SetCustomer = Customer

					Exit Rules


						LocalCompany = SetCompany
						LocalCustomer = SetCustomer

						if  (LocalCompanyCustomerRel.NationalAccountIndicator entered)
							NextSentence = true
						else
						if  ((LocalCompanyCustomerRel.AutomaticApplicationMethod.BalanceForward
						and   PrmOverrideMethod.NoOverride)
						or	(PrmOverrideMethod.BalanceForward
						and LocalCompanyCustomerRel.AutomaticCashApplication))	





							WsDone = false

							for each CreditTransactionsForSetCustomerRel

								if (each.IsOpen)
									if  (each.AlternateReceivableInvoiceType.Mixed
									and  MixedAppliedFlag = "N")
										invoke ApplyMix each
											invoked.CashApplicationResult = PrmCashApplicationResult

								if  (each.IsOpen)

									if  (each.ReceivableInvoiceDetail.HasReceivableApplicationSelect)
										NextSentence = true
									else
									if  (Company.VendorCreateAndInterfaceToAP
									and  each.ReceivableInvoiceDetail.HasARToAPApplicationSelect)
										NextSentence = true
									else
									if  (each.BaseOpenAmount not entered)
										NextSentence = true
									else
										DBCreditCompany				= each.ReceivableInvoiceDetail.Company
										DBCreditTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
										DBCreditInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
										DBCreditPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq

										if  (PrmOverride
										and  CancelDate not entered)
											WorkGLDate = PrmGlDate
										else
										if (!Company.DefaultApplicationDate.LatestTransactionPostDate)
											if  (Company.DefaultApplicationDate.PaymentCreditPostDate)
												WorkGLDate = ThisCreditInvoiceDetailRel.GeneralLedgerDate
											else
												WorkGLDate = current corporate date

											if  (Customer = TransferredToCustomer
											and  WorkGLDate < TransferDate)
												WorkGLDate = TransferDate

											if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
											and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
											and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
												WorkGLDate = PrmGlDate

										for each NonCreditTransactionsSetForCustomerRel

											if (Company.DetailedRNADistributions
											and ThisCreditInvoiceDetailRel.InvoiceFinanceCodeBlock entered
											and each.InvoiceFinanceCodeBlock entered
											and ThisCreditInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
											and each.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
											and ThisCreditInvoiceDetailRel.TransientAdditionalDimensions != each.TransientAdditionalDimensions)
												NextSentence = true
											else
											if  (!PrmCurrencyOverride
											and  each.OriginalCurrency		!= ThisCreditInvoiceDetailRel.OriginalCurrency)
												NextSentence = true
											else
											if  (each.ReceivableInvoiceDetail.HasReceivableApplicationSelect)
												NextSentence = true
											else
											if  (each.Company.VendorCreateAndInterfaceToAP
											and  each.ReceivableInvoiceDetail.HasARToAPApplicationSelect)
												NextSentence = true
											else
											if  (each.BaseOpenAmount not entered)
												NextSentence = true
											else
											if  (!each.BankTransactionType.CashPayment)
												NextSentence = true
											else
												DBCompany				= each.ReceivableInvoiceDetail.Company
												DBTransactionType		= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
												DBInvoice				= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
												DBPaymentSeq			= each.ReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq

												if (!(PrmOverride
												and  CancelDate not entered)
												and Company.DefaultApplicationDate.LatestTransactionPostDate)	
													if (ThisCreditInvoiceDetailRel.GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
														WorkGLDate = ThisCreditInvoiceDetailRel.GeneralLedgerDate
													else
														WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

													if  (Customer = TransferredToCustomer
													and  WorkGLDate < TransferDate)
														WorkGLDate = TransferDate

													if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
													and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
													and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
														WorkGLDate = PrmGlDate
												include ApplyCreditToThisInvoice

												if (ThisCreditInvoiceDetailRel.OpenAmount not entered)
													end for each


				Instance Rules

					initialize LocalErrorOccurred


					LocalCashApplicationResult = PrmCashApplicationResult




					if (PrmCompanyGroup entered)
						LocalPrmCompanyGroupCompany = Company
					else
						LocalPrmCompanyGroupCompany = PrmCompany

					WorkUnappliedAmount = PaymentOpen

					if  (WorkUnappliedAmount not entered
					or   !CompanyCustomerRel.AutomaticCashApplication)
						NextSentence = true
					else
					if (RTMPaymentRel exists
					and RTMPaymentRel.Status.UnreleasedRtm)
						NextSentence = true
					else
					if  (ARToAPApplicationSelectRel exists)
						NextSentence = true
					else
					if  (ReceivableApplicationSelectRel exists)
						NextSentence = true
					else
					if  (PaymentOpen not entered)
						NextSentence = true
					else

						if  (PrmOverrideMethod.Remit
						or  (PrmOverrideMethod.NoOverride
						and  CompanyCustomerRel.AutomaticApplicationMethod.Remittance))
							include 2000DoRemit
						else
						if  (PrmOverrideMethod.BalanceForward
						or  (PrmOverrideMethod.NoOverride
						and  CompanyCustomerRel.AutomaticApplicationMethod.BalanceForward))
							include 3000DoBalanceForward
						else
						if  (PrmOverrideMethod.LastStatement
						or  (PrmOverrideMethod.NoOverride
						and  CompanyCustomerRel.AutomaticApplicationMethod.LastStatement))
							include 3500DoLastStatement
						else
						if  (PrmOverrideMethod.Algorithm
						or  (PrmOverrideMethod.NoOverride
						and  CompanyCustomerRel.AutomaticApplicationMethod.Algorithm))
							if (PrmVariance entered
							or  PrmReasonCode entered
							or  PrmMaxInvoices entered
							or  PrmCombination entered)
								LocalVariance		= PrmVariance
								LocalReasonType		= PrmReasonType
								LocalReasonCode		= PrmReasonCode
								LocalMaxInvoices	= PrmMaxInvoices
								LocalCombination	= PrmCombination
							else
								LocalVariance		= Company.AutoCashAlgorithmVariance
								LocalReasonType		= Company.AutoCashAlgorithmReasonType
								LocalReasonCode		= Company.AutoCashAlgorithmReasonCode
								LocalMaxInvoices	= Company.AutoCashAlgorithmMaximunInvoices
								LocalCombination	= Company.AutoCashAlgorithmCombination
								if (!Company.IsAlgorithmValuesEntered
								and (PrmOverrideMethod.NoOverride
								and  CompanyCustomerRel.AutomaticApplicationMethod.Algorithm)
								and  CashApplicationErrorResultRel not exists)
									invoke Create CashApplicationErrorResult
										invoked.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
										invoked.CashApplicationResult  = PrmCashApplicationResult
										invoked.Company  			   = Company
										invoked.CustomerGroup 		   = Company.CustomerGroupField.CustomerGroup
										invoked.Customer			   = Customer
										invoked.ErrorMessage		   = "Algorithm parameters not found for Company "+Company+", Add all Algorithm parameters in Company"
									LocalErrorOccurred = true
							if (!LocalErrorOccurred)
								include 4000DoAlgorithm
						else
						if  (PrmOverrideMethod.UserDefined)
							WorkApplicationCode = PrmApplicationCode
							include 5000DoUserDefinedOverride
						else
						if  (PrmOverrideMethod.NoOverride
						and  CompanyCustomerRel.AutomaticApplicationMethod.UserDefined)
							WorkApplicationCode = CompanyCustomerRel.ApplicationCode
							include 5000DoUserDefinedOverride


		AutoCash2055FullyApplyPaymentAction is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany						is a ReceivableCompany
				PrmRemitSequence				is like ReceivablePaymentRemittance
				PrmCashApplicationResult		is like CashApplicationResult
				PrmGlDate						is Date
				PrmWorkGLDate					is Date
				PrmCurrencyOverride			  	is Boolean
				PrmOperator						is like ReceivableOperator
				PrmOverride						is Boolean
			Local Fields
				LocalPrmCompanyGroupCompany 	is a ReceivableCompany
				LocalErrorOccurred				is Boolean
				LocalRemittanceOverApplied  	is Boolean
				LocalAutoCashAsyncID			is an AsyncActionRequest
				LocalUseSetAction				is Boolean
				LocalNumLinesForBatch			is Numeric 9
			Action Rules
				if  (LastRemittanceSequence not entered
				or   Prepayment.Prepayment
				or   CancelDate entered)
					NextSentence = true
				else
					ThisReceivablePaymentRemittance 	= PrmRemitSequence
					PrmCompany							= Company
					LocalPrmCompanyGroupCompany			= Company
					LocalFinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					LocalCashApplicationResult 			= PrmCashApplicationResult
					WorkCreditCurrency					= OriginalCurrency
					WorkUnappliedCompanyCurrency		= PaymentOpenCompanyCurrency
					WorkUnappliedAmount					= PaymentOpen
					WorkGLDate							= PrmWorkGLDate

					LocalNumLinesForBatch = config.AutoCashNumLinesForBackground
					if (LocalNumLinesForBatch = 0)
						LocalNumLinesForBatch = 50

					initialize LocalErrorOccurred

					for each LocalReceivablePaymentRemittanceRel
						initialize WorkErrorNumber

						SaveRemitAmount			= each.AppldAmt
						RecordSelected			= false
						MixedAppliedFlag		= "N"

						DBCompany				= each.Company
						DBCustomer				= Customer
						DBInvoice				= each.ReceivableInvoice
						DBInvoiceCompany		= each.InvoiceCompany		
						DBInvoiceDetail			= each.InvoiceDetail		
						DBTransactionType		= each.ReceivableInvoiceType

						if  (LocalCashAppInvoiceDetailSet3Rel exists)
							DBPaymentSeq = first LocalCashAppInvoiceDetailSet3Rel.ReceivableInvoiceDetail.PaymentSeq
							include 2084CheckItemStatusInstanceAction

						if (WorkErrorNumber not entered)
							if  (each.ReceivableInvoiceType.CreditMemo
							and  !CompanyCustomerRel.ThirdPartyPayer
							and   CompanyCustomerRel.NationalAccountIndicator not entered
							and  !ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies
							and  !LocalCashAppInvoiceDetailSet3Rel exists)
								WorkErrorNumber = 110

						if (WorkErrorNumber not entered)
							if  (!RecordSelected
							and  CompanyCustomerRel.NationalAccountIndicator entered)
								MixedAppliedFlag		= "N"
								WorkRemitTransType		= each.ReceivableInvoiceType
								WorkRemitInvoice		= each.ReceivableInvoice
								include 2081NationalAcctsInstanceAction

						if (WorkErrorNumber not entered)
							if  (!RecordSelected
							and  CompanyCustomerRel.ThirdPartyPayer)
								MixedAppliedFlag		= "N"
								WorkRemitTransType		= each.ReceivableInvoiceType
								WorkRemitInvoice		= each.ReceivableInvoice
								include 2082ThirdPartyInstanceAction

						if (WorkErrorNumber not entered)
							if  (!RecordSelected
							and  ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)
								MixedAppliedFlag		= "N"
								WorkRemitTransType		= each.ReceivableInvoiceType
								WorkRemitInvoice		= each.ReceivableInvoice
								include 2083TraverseAcrossCompanyInstanceAction

						if (WorkErrorNumber not entered)
							if  (!RecordSelected
							and  each.ReceivableInvoiceType.Invoice)
								MixedAppliedFlag		= "N"
								WorkRemitTransType		= "D"
								WorkRemitInvoice		= each.ReceivableInvoice

								DBCompany				= each.Company
								DBCustomer				= Customer
								DBTransactionType		= "D"
								DBInvoice				= each.ReceivableInvoice

								if  (LocalCashAppInvoiceDetailSet3Rel exists)
									DBPaymentSeq = first LocalCashAppInvoiceDetailSet3Rel.ReceivableInvoiceDetail.PaymentSeq
									include 2084CheckItemStatusInstanceAction

						if (WorkErrorNumber not entered)
							if  (!RecordSelected
							and  each.ReceivableInvoiceType.Invoice
							and  CompanyCustomerRel.NationalAccountIndicator entered)
								MixedAppliedFlag		= "N"
								WorkRemitTransType		= "D"
								WorkRemitInvoice		= each.ReceivableInvoice

								include 2081NationalAcctsInstanceAction

						if (WorkErrorNumber not entered)
							if  (!RecordSelected
							and  CompanyCustomerRel.ThirdPartyPayer)
								MixedAppliedFlag		= "N"
								WorkRemitTransType		= "D"
								WorkRemitInvoice		= each.ReceivableInvoice
								include 2082ThirdPartyInstanceAction

						if (WorkErrorNumber not entered)
							if  (!RecordSelected
							and  ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)
								MixedAppliedFlag		= "N"
								WorkRemitTransType		= "D"
								WorkRemitInvoice		= each.ReceivableInvoice
								include 2083TraverseAcrossCompanyInstanceAction

						if (WorkErrorNumber not entered)
							if (!RecordSelected)
								WorkErrorNumber			= 124

						if (!RecordSelected)

							if  (!(PrmOverride
							and  CancelDate not entered
							and  TransferDate not entered)
							and Company.DefaultApplicationDate.LatestTransactionPostDate)	
								WorkGLDate = GeneralLedgerDate

								if  (Customer = TransferredToCustomer
								and  WorkGLDate < TransferDate)
									WorkGLDate = TransferDate

								if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
								and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
								and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
									WorkGLDate = PrmGlDate

							if  (Customer != TransferredToCustomer
							or   WorkGLDate >= TransferDate)
								invoke FastUpdate ThisReceivablePaymentRemittanceRel
									invoked.Status							= 1
									invoked.AppldAmt						= SaveRemitAmount
									invoked.CashApplicationResult			= PrmCashApplicationResult
									invoked.CashApplicationMessageNumber	= WorkErrorNumber
						else
							if  (!(PrmOverride
							and  CancelDate not entered
							and  TransferDate not entered)
							and Company.DefaultApplicationDate.LatestTransactionPostDate)	

								if (GeneralLedgerDate > ThisInvoiceDetailRel.GeneralLedgerDate)
									WorkGLDate = GeneralLedgerDate
								else
									WorkGLDate = ThisInvoiceDetailRel.GeneralLedgerDate

								if  (Customer = TransferredToCustomer
								and  WorkGLDate < TransferDate)
									WorkGLDate = TransferDate

								if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
								and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
								and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
									WorkGLDate = PrmGlDate

							if  (Customer != TransferredToCustomer
							or   WorkGLDate >= TransferDate)

								if (SaveRemitAmount not entered)
									SaveRemitAmount							= WorkUnappliedAmount
									WorkPaymentOpenAmount					= WorkUnappliedAmount
								else
									WorkPaymentOpenAmount					= SaveRemitAmount
									LocalRemittanceOverApplied				= true







								initialize WorkErrorNumber
								RecordSelected = false

								if  (Company != ThisInvoiceDetailRel.Company)
									WsInvoiceCurrency	= ThisInvoiceDetailRel.Company.Currency
								else
									WsInvoiceCurrency	= Company.Currency

								initialize WsMultObligCount
								initialize WsMultObligOpenAmount
								initialize WsMultObligTotalAmount
								initialize WsLastMultObligSeq











								initialize LocalCashDetailRemitApplied
								initialize LocalCashDetailCompanySetupMismatch
								initialize WsTotalApplied
								initialize WsTotalAdjust
								WsRMIApplied = SaveRemitAmount
								WsDone					= false

								LocalUseSetAction = false

								if (Company.ApplyCashAcrossReceivableCompanies	
								or DBInvoiceDetail entered)
									if (DBInvoiceCompany not entered)
										DBInvoiceCompany	= DBCompany
									DBCompany 		= DBInvoiceCompany
									if (DBInvoiceDetail not entered)
										if (instance count of RelatedInvoiceDetailRel >= LocalNumLinesForBatch)
											LocalUseSetAction = true
											LocalAutoCashAsyncID = LocalCashApplicationResultRel.AsyncID
											invoke AutoCash2071CreditSetAction ReceivableInvoiceDetail in background group (LocalCashApplicationResultRel.DerivedBackgroundGroup)
												run after LocalAutoCashAsyncID
												assign async action request id to LocalAutoCashAsyncID
												invoked.PrmInvoiceCompany				= DBCompany
												invoked.PrmReceivableInvoiceDetailType	= DBTransactionType
												invoked.PrmInvoice						= DBInvoice
												invoked.PrmCashApplicationResult		= PrmCashApplicationResult
												invoked.PrmPaymentCompany				= Company
												invoked.PrmReceivablePaymentHeader		= ReceivablePaymentHeader
												invoked.PrmReceivablePayment			= ReceivablePayment
												invoked.PrmRemitSequence 				= ThisReceivablePaymentRemittance
												invoked.PrmRemitAmount					= ThisReceivablePaymentRemittanceRel.AppldAmt
												invoked.PrmGlDate						= PrmGlDate
												invoked.WorkGLDate						= WorkGLDate
												invoked.PrmCurrencyOverride				= PrmCurrencyOverride
												invoked.PrmOperator						= PrmOperator
												invoked.PrmOverride						= PrmOverride
											
											invoke FastUpdate LocalCashApplicationResultRel
												invoked.AsyncID							= LocalAutoCashAsyncID
										else
											for each RelatedInvoiceDetailRel	
												include 2071CreditInstanceAction

												if  (WsDone)
													end for each
									else
										DBPaymentSeq	= DBInvoiceDetail
										for each ReceivableInvoiceDetailForRemittanceRel 
											include 2071CreditInstanceAction

											if  (WsDone)
												end for each
								else
									if (instance count of RelatedInvoiceDetailRel >= LocalNumLinesForBatch)
										LocalUseSetAction = true
										LocalAutoCashAsyncID = LocalCashApplicationResultRel.AsyncID
										invoke AutoCash2071CreditSetAction ReceivableInvoiceDetail in background group (LocalCashApplicationResultRel.DerivedBackgroundGroup)
											run after LocalAutoCashAsyncID
											assign async action request id to LocalAutoCashAsyncID
											invoked.PrmInvoiceCompany				= DBCompany
											invoked.PrmReceivableInvoiceDetailType	= DBTransactionType
											invoked.PrmInvoice						= DBInvoice
											invoked.PrmCashApplicationResult		= PrmCashApplicationResult
											invoked.PrmPaymentCompany				= Company
											invoked.PrmReceivablePaymentHeader		= ReceivablePaymentHeader
											invoked.PrmReceivablePayment			= ReceivablePayment
											invoked.PrmRemitSequence 				= ThisReceivablePaymentRemittance
											invoked.PrmRemitAmount					= ThisReceivablePaymentRemittanceRel.AppldAmt
											invoked.PrmGlDate						= PrmGlDate
											invoked.WorkGLDate						= WorkGLDate
											invoked.PrmCurrencyOverride				= PrmCurrencyOverride
											invoked.PrmOperator						= PrmOperator
											invoked.PrmOverride						= PrmOverride
										
										invoke FastUpdate LocalCashApplicationResultRel
											invoked.AsyncID							= LocalAutoCashAsyncID
									else
										for each RelatedInvoiceDetailRel	
											include 2071CreditInstanceAction


											if  (WsDone)
												end for each





								if (LocalUseSetAction)
									NextSentence = true
								else
									if (Company.DetailedRNADistributions)
										invoke FastUpdate ThisReceivablePaymentRemittanceRel
											invoked.CashApplicationResult			= PrmCashApplicationResult
											if (LocalCashDetailRemitApplied)
												invoked.Status							= 2
												initialize invoked.CashApplicationMessageNumber
												if (invoked.AppldAmt < 0)
													initialize invoked.AppldAmt
											else
												invoked.Status							= 1
												if (CashDetailState.Released)
													if (LocalCashDetailCompanySetupMismatch)
														invoked.CashApplicationMessageNumber	= 126
													else
														invoked.CashApplicationMessageNumber	= 125
												else
													invoked.CashApplicationMessageNumber		= 127
									else
										invoke FastUpdate ThisReceivablePaymentRemittanceRel
											invoked.Status							= 2
											invoked.CashApplicationResult			= PrmCashApplicationResult
											initialize invoked.CashApplicationMessageNumber
											if (invoked.AppldAmt < 0)
												initialize invoked.AppldAmt


		CheckAndCreateOverageAdjustment is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashApplicationResult		is like CashApplicationResult
				PrmGlDate						is Date
				PrmWorkGLDate					is Date
				PrmOperator						is like ReceivableOperator
				PrmOverride						is Boolean
			Local Fields
				LocalPrmCompanyGroupCompany 	is a ReceivableCompany
				LocalSkipGLWriteOffDate			is Boolean
			Action Rules
				LocalPrmCompanyGroupCompany 	= Company
				WorkGLDate 						= PrmWorkGLDate

				if  (!(PrmOverride
				and  CancelDate not entered
				and  TransferDate not entered)
				and Company.DefaultApplicationDate.LatestTransactionPostDate)	
					WorkGLDate = GeneralLedgerDate

					if  (Customer = TransferredToCustomer
					and  WorkGLDate < TransferDate)
						WorkGLDate = TransferDate

					if  (LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.Control
					and  LocalPrmCompanyGroupCompany.VerifyGLDateWithinGLDateRange
					and  WorkGLDate not within LocalPrmCompanyGroupCompany.CompanySystemClosingControlRel.ValidEntryDate)
						WorkGLDate = PrmGlDate

				if  (Customer != TransferredToCustomer
				or   WorkGLDate >= TransferDate)

					LocalSkipGLWriteOffDate	= false
					if (Company.PreventWriteOffBeforeTransactionGLDate
					and WorkGLDate < GeneralLedgerDate)
						LocalSkipGLWriteOffDate	=	true

					if  (CompanyCustomerRel.MaximumOverageReasonCode entered
					and  !LocalSkipMaximumOverage
					and  !LocalSkipGLWriteOffDate)
						WorkUnappliedCompanyCurrency	= PaymentOpenCompanyCurrency
						WorkUnappliedAmount				= PaymentOpen
						if  (WorkUnappliedAmount entered)



							if  (!CompanyCustomerRel.MaximumOverageReasonCode.Active)
								NextSentence = true
							else
							if  ((CompanyCustomerRel.MaximumOverageAmount entered
							and   CompanyCustomerRel.MaximumOverageAmount >= WorkUnappliedCompanyCurrency)
							or   (CompanyCustomerRel.MaximumOveragePercent entered
							and   BaseAmount entered
							and   CompanyCustomerRel.MaximumOveragePercent >= (WorkUnappliedCompanyCurrency / BaseAmount)))

								invoke UnreleasedCashApplication.Create ReceivableApplication
									assign result to NewReceivableApplication
									invoked.Company										= Company
									invoked.ReceivableApplication.TransType				= TypeOfPayment
									invoked.ReceivableApplication.Invoice				= PaymentNumber
									invoked.ReceivableApplication.PaymentSeq			= ReceivablePayment
									invoked.ReceivableApplication.BatchNumber			= ReceivablePaymentHeader

									invoked.EnteredAmount								= WorkUnappliedAmount
									invoked.ApplicationCurrency							= OriginalCurrency

									invoked.ReceivableOperator							= PrmOperator
									invoked.ApplicationSource							= "A"

									invoked.GeneralLedgerDate							= WorkGLDate

									invoked.CreditTransaction.CreditCompany				= Company
									invoked.CreditTransaction.CreditCustomer			= Customer
									invoked.CreditTransaction.CreditBatch				= ReceivablePaymentHeader
									invoked.CreditTransaction.CreditSequence			= ReceivablePayment
									invoked.CreditTransaction.CreditType				= TypeOfPayment
									invoked.CreditTransaction.CreditNumber				= PaymentNumber
									invoked.DepositDate									= DepositDate
									invoked.GLOffsetCode								= ReceivedNotAppliedReceivableGeneralLedgerCode
									invoked.ApplicationCurrency							= OriginalCurrency
									invoked.CashApplicationResult						= PrmCashApplicationResult

									if  (OriginalCurrency		= LocalPrmCompanyGroupCompany.Currency)
										invoked.ApplicationCurrencyType					= "M"

									invoked.CreateAdjustReason							= CompanyCustomerRel.MaximumOverageReasonCode
									invoked.CreateAdjustAmount							= WorkUnappliedAmount

								initialize WorkUnappliedAmount
								initialize WorkUnappliedCompanyCurrency


		AutoCash2071CreditAction is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmDBCompany					is like ReceivableCompany
				PrmDBTransactionType			is like ReceivableInvoiceType
				PrmDBInvoice					is like ReceivableInvoice
				PrmDBPaymentSeq					is like Sequence
				PrmCompany						is a ReceivableCompany
				PrmRemitSequence				is like ReceivablePaymentRemittance
				PrmRemitAmount					is like InternationalAmount
				PrmCashApplicationResult		is like CashApplicationResult
				PrmGlDate						is Date
				PrmWorkGLDate					is Date
				PrmCurrencyOverride			  	is Boolean
				PrmOperator						is like ReceivableOperator
				PrmOverride						is Boolean
			Local Fields
				LocalPrmCompanyGroupCompany 	is a ReceivableCompany
				LocalErrorOccurred				is Boolean
				LocalRemittanceOverApplied  	is Boolean
			Action Rules
				TransientAmountApplied = 0

				if  (LastRemittanceSequence not entered
				or   Prepayment.Prepayment
				or   CancelDate entered)
					NextSentence = true
				else
				if (Status.Open
				and PaymentOpen > 0)
					initialize LocalErrorOccurred
					initialize WorkErrorNumber

					ThisReceivablePaymentRemittance 	= PrmRemitSequence
					SaveRemitAmount						= PrmRemitAmount
					
					PrmCompany							= Company
					LocalPrmCompanyGroupCompany			= Company
					LocalCashApplicationResult 			= PrmCashApplicationResult
					WorkCreditCurrency					= OriginalCurrency
					WorkUnappliedCompanyCurrency		= PaymentOpenCompanyCurrency
					WorkUnappliedAmount					= PaymentOpen
					WorkGLDate							= PrmWorkGLDate

					DBCompany			= PrmDBCompany
					DBTransactionType	= PrmDBTransactionType
					DBInvoice			= PrmDBInvoice
					DBPaymentSeq		= PrmDBPaymentSeq
					DBCustomer			= Customer

					if (SaveRemitAmount not entered)
						SaveRemitAmount							= WorkUnappliedAmount
						WorkPaymentOpenAmount					= WorkUnappliedAmount
					else
						WorkPaymentOpenAmount					= SaveRemitAmount
						LocalRemittanceOverApplied				= true

					initialize WorkErrorNumber
					RecordSelected = false

					if  (Company != ThisInvoiceDetailRel.Company)
						WsInvoiceCurrency	= ThisInvoiceDetailRel.Company.Currency
					else
						WsInvoiceCurrency	= Company.Currency

					initialize WsMultObligCount
					initialize WsMultObligOpenAmount
					initialize WsMultObligTotalAmount
					initialize WsLastMultObligSeq









					initialize LocalCashDetailRemitApplied
					initialize LocalCashDetailCompanySetupMismatch
					initialize WsTotalApplied
					initialize WsTotalAdjust
					WsRMIApplied = SaveRemitAmount
					WsDone					= false

					for each ReceivableInvoiceDetailForRemittanceRel
						include 2071CreditInstanceAction

					if (Company.DetailedRNADistributions)
						if (LocalCashDetailRemitApplied)
							TransientDetailRNAAppliedStatus = 1
						if (TransientDetailRNAAppliedStatus != 1
						and LocalCashDetailCompanySetupMismatch)
							TransientDetailRNAAppliedStatus = 2


		UpdateRemittanceStatus is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmRemitSequence				is like ReceivablePaymentRemittance
				PrmCashApplicationResult		is like CashApplicationResult
				PrmCashApplicationMessageNumber	is Numeric 3
			Action Rules
				ThisReceivablePaymentRemittance = PrmRemitSequence
				if (Company.DetailedRNADistributions)
					invoke FastUpdate ThisReceivablePaymentRemittanceRel
						invoked.CashApplicationResult				= PrmCashApplicationResult
						if (invoked.AppldAmt < 0)
							initialize invoked.AppldAmt
						if (PrmCashApplicationMessageNumber not entered)
							invoked.Status							= 2
							initialize invoked.CashApplicationMessageNumber
						else
							invoked.Status							= 1
							invoked.CashApplicationMessageNumber	= PrmCashApplicationMessageNumber
				else
					invoke FastUpdate ThisReceivablePaymentRemittanceRel
						invoked.Status							= 2
						invoked.CashApplicationResult			= PrmCashApplicationResult
						initialize invoked.CashApplicationMessageNumber
						if (invoked.AppldAmt < 0)
							initialize invoked.AppldAmt


		ReceivableClaimsAndLiabilities is a Set Action
			default label is untranslatable
			restricted
			run in foreground
			Parameters
				PrmReceivableCompany		  is a ReceivableCompany
				PrmClaimsAndLiabilitiesHeader is a ClaimsAndLiabilitiesHeader
				PrmCountry					  is a Country
				PrmCurrency					  is a Currency
				PrmReportAsOfDate			  is Date
				PrmCurrencyTable			  is a CurrencyTable
			Instance Selection
				where (Company			= PrmReceivableCompany
				and   DepositDate	   <= PrmReportAsOfDate
				and Prepayment.Prepayment
				and	(TypeOfPayment.CustomerPayment
				or	TypeOfPayment.BillOfExchangePayment)
				and Status > 0
				and   (Customer.PostalAddress.Country entered
				and	Customer.PostalAddress.Country not = PrmCountry))

			Sort Order
				Company
				Customer
				GeneralLedgerDate
				ReceivablePaymentHeader
				ReceivablePayment

			Local Fields
				LocalClaimsPrePayments				is an InternationalAmount
				LocalLiabilitiesLessThan1Year		is an InternationalAmount
				LocalTotal							is an InternationalAmount

			Action Rules
				Instance Rules
					LocalClaimsAndLiabilitiesHeader = PrmClaimsAndLiabilitiesHeader

					initialize LocalClaimsPrePayments
					initialize LocalLiabilitiesLessThan1Year
					initialize LocalTotal

					if (ARToAPInterfaceReceivableApplication3Rel not exist)
						if (OriginalCurrency = Company.Currency)
							LocalClaimsPrePayments		  = TransactionAmount
						else
							initialize CurrencyWork
							CurrencyWork2.CurrencyTable					= PrmCurrencyTable
							CurrencyWork2.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyWork2.ExchangeDate					= DepositDate
							CurrencyWork2.TransactionAmount				= TransactionAmount
							CurrencyWork2.FromCurrency					= OriginalCurrency
							CurrencyWork2.BaseAmount.ToCurrency			= PrmCurrency
							LocalClaimsPrePayments						= CurrencyWork2.BaseAmount.OutputCurrencyAmount

						LocalTotal = TransactionAmount

						if (ClaimsAndLiabilitiesRel exists)
							invoke Update ClaimsAndLiabilitiesRel
								if (CompanyCustomerRel.Affiliate)
									if (CompanyCustomerRel.AffiliateOwnership.ParentEnterprise)
										invoked.ClaimsPrePayments83			= (ClaimsAndLiabilitiesRel.ClaimsPrePayments83	  + LocalClaimsPrePayments)
									else
									if (CompanyCustomerRel.AffiliateOwnership.SubsidiaryEnterprise)
										invoked.ClaimsPrePayments89			= (ClaimsAndLiabilitiesRel.ClaimsPrePayments89		  + LocalClaimsPrePayments)
									else
									if (CompanyCustomerRel.AffiliateOwnership.FellowEnterprise)
										invoked.ClaimsPrePayments95			= (ClaimsAndLiabilitiesRel.ClaimsPrePayments95		  + LocalClaimsPrePayments)
								else
									invoked.ClaimsPrePayments43				= (ClaimsAndLiabilitiesRel.ClaimsPrePayments43		  + LocalClaimsPrePayments)

								invoked.RecordTotal							= (ClaimsAndLiabilitiesRel.RecordTotal + LocalTotal)

						else
							invoke Create ClaimsAndLiabilities
								invoked.Company								= Company
								invoked.ClaimsAndLiabilitiesHeader			= PrmClaimsAndLiabilitiesHeader
								invoked.Country								= Customer.PostalAddress.Country
								invoked.RecordTotal							= LocalTotal

								if (CompanyCustomerRel.Affiliate)
									if (CompanyCustomerRel.AffiliateOwnership.ParentEnterprise)
										invoked.ClaimsPrePayments83			= LocalClaimsPrePayments
									else
									if (CompanyCustomerRel.AffiliateOwnership.SubsidiaryEnterprise)
										invoked.ClaimsPrePayments89			= LocalClaimsPrePayments
									else
									if (CompanyCustomerRel.AffiliateOwnership.FellowEnterprise)
										invoked.ClaimsPrePayments95			= LocalClaimsPrePayments
								else
									invoked.ClaimsPrePayments43				= LocalClaimsPrePayments


		HistoricalPaymentRecordsPurge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke ReleasedRtm.Purge RTMPaymentRel		  

				invoke Purge CompanyCustomerCommentRel

				invoke Purge ReceivablePrepaymentRel

				invoke Purge ReceivablePaymentRemittanceRel

				invoke Purge ReceivablePaymentCashDetail set
				
				invoke ApplicationPosted.Purge PurgeEligibleCreditApplicationsRel

				invoke Purge ReceivablePaymentApplyReverseHeaderRel

				invoke Purge ARToAPApplicationSelectRel

				invoke Purge ReceivablePaymentAttachmentRel


		UpdateReceivableProjectTransaction is an Instance Action
			restricted
			Action Rules
				include UpdateReceivableProjectTransaction


		RefreshData is an Import Action
			Local Fields
				RepSet is a ReplicationSet
			Action Rules
				RepSet = "FSM_COLUMNAR_AR_ST"
				constraint (RepSet.ReplicationIsValid)
					"ReplicationIsCurrentlyReplicatingOrNotValidAtThisTime"
				invoke Replicate RepSet


		TransactionStatusUpdate is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup not entered)
						required
							"CompanyOrGlobalLedgerCompanyGroupRequired"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterGlobalLedgerCompanyGroupIfCompanyEntered"
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup

			Instance Selection
				where	((IsOpenOrNotHistorical)
				and	(Status.FullyApplied
				or	  Status.Closed)
				and		((PrmCompanyGroup not entered
				or		GeneralLedgerCompanyGroupRel exists)
				and		(PrmCompany not entered
				or		PrmCompany = Company)))

			Sort Order is Set8

			Action Rules
				Set Rules
				Instance Rules
					increment TransactionHistoryPeriods

					if(Company.TransactionHistoryDeletePeriods not entered
					or Company.TransactionHistoryDeletePeriods < TransactionHistoryPeriods)
						initialize TransactionHistoryPeriods
						if (Status.Closed)
							Status = Status.Historical
						if (Status.FullyApplied)
							Status = Status.Closed

					include UpdateReceivableProjectTransaction


		BODDataInitialLoadCriteriaReceivableTracker is a Set Action
			restricted
			Parameters
				PrmFromCompany						is a ReceivableCompany
				PrmToCompany						is a ReceivableCompany
				PrmFromReceivablePaymentHeader		is a ReceivablePaymentHeader
					context of PrmFromCompany
				PrmToReceivablePaymentHeader		is a ReceivablePaymentHeader
					context of PrmFromCompany
			Instance Selection
				where  (((PrmFromCompany entered
				and		  PrmFromCompany <= Company)
				or		  PrmFromCompany not entered)
				and		((PrmToCompany entered
				and		  PrmToCompany >= Company)
				or		PrmToCompany not entered)
				and		((PrmFromReceivablePaymentHeader entered
				and		  PrmFromReceivablePaymentHeader <= ReceivablePaymentHeader)
				or		PrmFromReceivablePaymentHeader not entered)
				and		((PrmToReceivablePaymentHeader entered
				and		  PrmToReceivablePaymentHeader >= ReceivablePaymentHeader)
				or		PrmToReceivablePaymentHeader not entered)
				and	 ((ReceivablePaymentHeader.Status.ReleasedBatch)))

			Sort Order
			Action Rules
				Instance Rules
					invoke TriggerReceivableTracker

		BatchGenerateIDMPaymentReceipts is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany					is a Company
				PrmReceivablePaymentHeader	is like ReceivablePaymentHeader

			Local Fields
				LocalAsyncID		is an AsyncActionRequest

			Instance Selection
				where (Company 				   = PrmCompany
				and	   ReceivablePaymentHeader = PrmReceivablePaymentHeader
				and	   IsValidForIDMGenerate)

			Action Rules
				Set Rules
					Entrance Rules
						LocalAsyncID = current async action request id

					Exit Rules
						invoke BatchGetStatus in background
							run after LocalAsyncID
							invoked.PrmCompany 					= PrmCompany
							invoked.PrmReceivablePaymentHeader 	= PrmReceivablePaymentHeader

				Instance Rules
					invoke GenerateIDMPaymentReceipt
						invoked.BatchGenerate = true
		
		BatchGetStatus is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany					is a Company
				PrmReceivablePaymentHeader 	is like ReceivablePaymentHeader

			Instance Selection
				where (Company 				= PrmCompany
				and	   ReceivablePaymentHeader = PrmReceivablePaymentHeader
				and	   IsValidForIDMGenerate)

			Action Rules
				Instance Rules
					invoke GetStatus IDMJobRel
						invoked.PrmFromGenerateDocument = true
					IDMUniqueID = IDMJobRel.MDSID

		GenerateReceipt is an Instance Action
			valid when (IsValidForIDMGenerate)

			Action Rules
				invoke GenerateIDMPaymentReceipt


		GenerateIDMPaymentReceipt is an Instance Action
			default label is untranslatable
			restricted

			Parameters
				BatchGenerate is Boolean
			Action Rules
				initialize IDMGenerateDocument
				IDMGenerateDocument.IDMXMLDefinition.Busclass										= reference to this instance
				IDMGenerateDocument.IDMXMLDefinition.ListName										= "ReceivablePaymentListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.DocumentName									= "PaymentReceipt"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName		= "ReceivablePaymentRemittanceRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName			= "ReceivablePaymentRemittanceListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1	= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag			= "RemittanceLines"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag			= "Line"

				initialize IDMAttributes
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName							= "Company"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue							= Company
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName							= "ReceivablePaymentHeader"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue							= ReceivablePaymentHeader
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName							= "ReceivablePayment"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue							= ReceivablePayment
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName							= "CompanyName"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue							= Company.Name
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName							= "Customer"
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue							= Customer
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName							= "CustomerName"
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue							= Customer.Name
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName							= "PaymentNumber"
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue							= PaymentNumber
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName							= "PaymentReference"
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue							= ReferenceNumber
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName							= "PrepaymentReference"
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue							= ReceivablePrepaymentRel.Invoice
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName							= "DepositDate"
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeDate							= DepositDate
				IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeName							= "PaymentAmount"
				IDMAttributes.SingleValue.IDMAttribute[11].IDMAttributeValue						= TransactionAmount

				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 12
					include IDM.IDMAdditionalAttributes

				IDMGenerateDocument.IDMAttributes													= IDMAttributes
				IDMGenerateDocument.TemplateUniqueId 												= Company.PaymentReceiptIDMTemplate.IDMUniqueId
				IDMGenerateDocument.DocumentType													= "FSM_PaymentReceipt"
				IDMGenerateDocument.FileName														= DerivedFileName

				if ((Prepayment.Prepayment 
				and  CompanyCustomerRel.EmailPrepaymentReceipt)
				or  (Prepayment.NotAPrepay 
				and  CompanyCustomerRel.EmailPaymentReceipt))

					if (DerivedEmailSubject entered)
						IDMGenerateDocument.IDMEmail.Subject 	= DerivedEmailSubject
					else
						IDMGenerateDocument.IDMEmail.Subject	= DerivedPaymentReceiptIDMEmailSubject

					IDMGenerateDocument.EmailTemplateUniqueID	= Company.PaymentReceiptIDMEmailTemplate.IDMUniqueId

					IDMGenerateDocument.IDMEmail.From			= DerivedPaymentReceiptFromAndReplyToEmail
					IDMGenerateDocument.IDMEmail.To				= DerivedToEmailAddress
					IDMGenerateDocument.IDMEmail.Cc		    	= DerivedCcEmailAddress

				if ((Prepayment.Prepayment
				and  CompanyCustomerRel.PrintPrepaymentReceipt)
				or  (Prepayment.NotAPrepay 
				and  CompanyCustomerRel.PrintPaymentReceipt))
					if (IDMPrinter entered)
						IDMGenerateDocument.IDMPrinter			= IDMPrinter

				IDMGenerateDocument.IDMAccessControlList = "CSFDefined"
				invoke CreateFromGenerateDocument IDMJob
					assign result to IDMJobView
					invoked.Actor				= actor
					invoked.Description			= IDMDescriptionMsg
					invoked.IDMGenerateDocument = IDMGenerateDocument

				IDMJob = IDMJobView.IDMJob

				if (not BatchGenerate)
					invoke UpdateIDMUniqueID in background
						run after IDMJobView.AsyncId

		UpdateIDMUniqueID is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				IDMUniqueID = IDMJobRel.MDSID

		BatchEmailIDMPaymentReceipts is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany				is a Company
				PrmReceivablePaymentHeader is like ReceivablePaymentHeader			
			
			Instance Selection
				where (Company = PrmCompany
				and	   ReceivablePaymentHeader = PrmReceivablePaymentHeader
				and	   IsValidForIDMEmailOrPrint
				and	 ((Prepayment.Prepayment and CompanyCustomerRel.EmailPrepaymentReceipt)
				or	  (Prepayment.NotAPrepay and CompanyCustomerRel.EmailPaymentReceipt)))
			
			Action Rules
				Instance Rules
					invoke EmailIDMPaymentReceipt
						invoked.BatchEmail = true

		EmailReceipt is an Instance Action
			valid when (IsValidForIDMEmailOrPrint)
			disable multiple instance selection
			Parameters
				PrmFrom is an EmailAddress
					default label is "From"
					holds pii
				PrmTo is like MultipleEmailAddress 
					default label is "To"
					holds pii
				PrmCc is like MultipleEmailAddress 
					default label is "Cc"
					holds pii
			Parameter Rules
				PrmFrom
					initial value is DerivedPaymentReceiptFromAndReplyToEmail
					required
				PrmTo
					initial value is DerivedToEmailAddress
						when ((Prepayment.Prepayment and CompanyCustomerRel.EmailPrepaymentReceipt)
						or    (Prepayment.NotAPrepay and CompanyCustomerRel.EmailPaymentReceipt))
					required
				PrmCc
					initial value is DerivedCcEmailAddress
			
			Action Rules
				invoke EmailIDMPaymentReceipt
					invoked.PrmFrom = PrmFrom
					invoked.PrmTo	= PrmTo
					invoked.PrmCc	= PrmCc


		EmailIDMPaymentReceipt is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				BatchEmail is Boolean
				PrmFrom is an EmailAddress
					default label is "From"
					holds pii
				PrmTo is like MultipleEmailAddress 
					default label is "To"
					holds pii
				PrmCc is like MultipleEmailAddress 
					default label is "Cc"
					holds pii
				
			Parameter Rules
				PrmFrom
					default to DerivedPaymentReceiptFromAndReplyToEmail
				PrmTo
					if ((Prepayment.Prepayment and CompanyCustomerRel.EmailPrepaymentReceipt)
					or  (Prepayment.NotAPrepay and CompanyCustomerRel.EmailPaymentReceipt))
						default to DerivedToEmailAddress
				PrmCc
					if (BatchEmail)
						default to DerivedCcEmailAddress

			Action Rules
				initialize IDMGenerateDocument
				IDMGenerateDocument.IDMXMLDefinition.Busclass										= reference to this instance
				IDMGenerateDocument.IDMXMLDefinition.ListName										= "ReceivablePaymentListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.DocumentName									= "PaymentReceipt"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName		= "ReceivablePaymentRemittanceRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName			= "ReceivablePaymentRemittanceListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1	= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag			= "RemittanceLines"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag			= "Line"

				initialize IDMItem
				IDMItem.DocumentType		 = "FSM_PaymentReceipt"
				IDMItem.IDMXMLDefinition	 = IDMGenerateDocument.IDMXMLDefinition
				IDMItem.IDMUniqueId			 = IDMUniqueID
				IDMItem.IDMEmail.From		 = PrmFrom
				IDMItem.IDMEmail.To			 = PrmTo
				IDMItem.IDMEmail.Cc			 = PrmCc

				if (DerivedEmailSubject entered)
					IDMItem.IDMEmail.Subject = DerivedEmailSubject
				else
					IDMItem.IDMEmail.Subject = DerivedPaymentReceiptIDMEmailSubject

				IDMItem.EmailTemplateUniqueID   = Company.PaymentReceiptIDMEmailTemplate.IDMUniqueId

				constraint (IDMItem.GetItemDetails)
					"DocumentDoesNotExistInIDM"

				IDMItem.IDMPID	= IDMItem.IDMItemDetails.PID

				invoke SendToEmail IDMJob
					invoked.Description	 = EmailNotificationMsg
					invoked.FileName	 = DerivedFileName
					invoked.IDMItem		 = IDMItem				

		BatchPrintIDMPaymentReceipts is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany				is a Company
				PrmReceivablePaymentHeader is like ReceivablePaymentHeader
				PrmBatchPrinter 		is an IDMPrinter
					default label is "BatchPrinter"
			
			Instance Selection
				where ((PrmBatchPrinter entered
				or		IDMPrinter entered)
				and		Company = PrmCompany
				and		ReceivablePaymentHeader = PrmReceivablePaymentHeader
				and		IsValidForIDMEmailOrPrint)

			Action Rules
				Instance Rules
					invoke PrintIDMPaymentReceipt
						invoked.PrmIDMPrinter = PrmBatchPrinter

		PrintReceipt is an Instance Action
			valid when (IsValidForIDMEmailOrPrint)
			Parameters
				PrmIDMPrinter is an IDMPrinter
					default label is "IDMPrinter"			
			
			Parameter Rules
				PrmIDMPrinter
					required
					initial value is IDMPrinter

			Action Rules
				invoke PrintIDMPaymentReceipt
					invoked.PrmIDMPrinter = PrmIDMPrinter

		PrintIDMPaymentReceipt is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmIDMPrinter is an IDMPrinter
			
			Action Rules
				initialize IDMItem
				IDMItem.DocumentType = "FSM_PaymentReceipt"
				IDMItem.IDMUniqueId	 = IDMUniqueID
				if (PrmIDMPrinter entered)
					IDMItem.IDMPrinter	= PrmIDMPrinter
				else
					IDMItem.IDMPrinter	= IDMPrinter

				constraint (IDMItem.GetItemDetails)
					"DocumentDoesNotExistInIDM"

				IDMItem.IDMPID	= IDMItem.IDMItemDetails.PID

				invoke SendToPrinter IDMJob
					invoked.Description = IDMPrintDescriptionMsg
					invoked.FileName	= DerivedFileName
					invoked.IDMItem		= IDMItem
		
		PaymentAmountTotal is a Set Action
			restricted
			Parameters
				PrmCustomerGroup is a CustomerGroup
				PrmCustomerRange		 is a CustomerRange
				PrmResult        is a ReceivablesJobResult
				PrmUpdate				is AlphaUpper size 1
					States
						ReportOnly		value is "R"
						UpdateAndReport	value is "U"
				PrmNbrOfRunGroups       is Numeric 3
				PrmRunGroup             is Numeric 3
			Instance Selection
				where(PrmCustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
				and Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup
				and (PrmCustomerRange	not entered
				or	 Customer within PrmCustomerRange)
				and  IsBOEOrARPayment
				and (PrmNbrOfRunGroups <= 1
				or  (Customer % PrmNbrOfRunGroups) = PrmRunGroup))
				
			Sort Order is Set6
			
			Local Fields
				LocalCurrentBalance   is an InternationalAmount
				LocalCustomerGroupAmt is an InternationalAmount
				LocalCheck            is Boolean
				
			Action Rules
				Company Set Rules
					Exit Rules
						if (!LocalCheck)
							invoke InvoicesPaymentsCurrentBalances CompanyCustomerRel
								invoked.PrmCurrentBalance    = LocalCurrentBalance
								invoked.PrmUpdate            = PrmUpdate
								invoked.PrmResult            = PrmResult
							if(PrmUpdate.UpdateAndReport)
								invoke UpdateCurrentBalance CustdescRel	
									invoked.ChangeAmount     = LocalCustomerGroupAmt
							initialize LocalCurrentBalance
							initialize LocalCustomerGroupAmt
						LocalCheck = false
				Customer Set Rules
					Exit Rules
						invoke InvoicesPaymentsCurrentBalances CompanyCustomerRel
							invoked.PrmCurrentBalance    = LocalCurrentBalance
							invoked.PrmResult            = PrmResult
							invoked.PrmUpdate            = PrmUpdate
						if(PrmUpdate.UpdateAndReport)
							invoke UpdateCurrentBalance CustdescRel	
								invoked.ChangeAmount     = LocalCustomerGroupAmt 
						initialize LocalCurrentBalance
						initialize LocalCustomerGroupAmt
						LocalCheck = true
				Instance Rules
					LocalOpenAmount = (BaseAmount + BaseCreditAppliedAmount - (BaseAppliedAmount + BaseAdjustAmount))
					if (LocalOpenAmount > 0)
						round LocalOpenAmount to nearest DerivedRoundTo
						LocalCurrentBalance = LocalCurrentBalance - LocalOpenAmount
						if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
							LocalWorkAmount = LocalOpenAmount * CurrencyRateToCustomerGroupCurrency
						else
							LocalWorkAmount = LocalOpenAmount / CurrencyRateToCustomerGroupCurrency
						LocalCustomerGroupAmt = LocalCustomerGroupAmt - LocalWorkAmount
						
						LocalCompany     = Company
						LocalCustomer    = Customer
		
