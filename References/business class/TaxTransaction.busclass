TaxTransaction is a BusinessClass
    owned by tx
    prefix is TXD
    classic name is TXTAXTRAN

    Ontology
        symbolic key is TaxTransaction
            classic set name is TXDSET1
            classic name is TRANS-IDENT

    Patterns
        implements StaticJava
        disable AuditIndex
        enable explicit context override 							

    Persistent Fields
        SystemCode                  is AlphaUpper size 2
            classic name is SYSTEM-CD
            States
				Billing            value is "BL"
				BillingAndRevenue  value is "BR"
                    default label is "Billing and Revenue"
                CashLedger         value is "CB"
                CashReceipts       value is "CR"
				AccountsPayable    value is "AP"
					default label is "Payables"
				AccountsReceivable value is "AR"
					default label is "Receivables"
                
        VendorCustomer              is like Vendor
            classic name is VEND-CUST
        TaxID
            classic name is TAX-ID-NBR
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        Invoice																			 
        Suffix
        CancelSequence              is Numeric size 4
            classic name is CANCEL-SEQ
        TaxTransactionAccount       is a FinanceCodeBlock
            classic name for TaxTransactionAccount.ToAccountingEntity is DIST-COMPANY
            classic name for TaxTransactionAccount.AccountingUnit is TAX-ACCT-UNIT
            classic name for TaxTransactionAccount.GeneralLedgerChartAccount is TAX-ACCOUNT


        Name						is like VendorName 
        	holds pii
        VoucherNumber	 is like VoucherNumber
            classic name is VOUCHER-NBR
        TaxPointDate                is Date
            classic name is TAX-PNT-DATE
        InvoiceDate                 is Date
            classic name is INVOICE-DTE
        PostDate                    is Date
        TransactionCurrency         is a Currency					 
            classic name is TRAN-CURRENCY
        TransactionInvoiceAmount    is an InternationalAmount		 
            classic name is TRAN-INV-AMT
        TransactionTaxableAmount    is an InternationalAmount		 
            classic name is TRAN-TAXABLE
        TransactionTaxAmount        is an InternationalAmount		 
            classic name is TRAN-TAX-AMT
        TransactionNumberOfDecimals is an AcctNd
            classic name is TRAN-ND
        BaseInvoiceAmount           is a CurrencyExchangeGroup 		 
            classic name is BASE-INV-AMT
        BaseTaxable                 is a CurrencyExchangeGroup 		 
            classic name is BASE-TAXABLE
        BaseTaxAmount               is a CurrencyExchangeGroup       
            classic name is BASE-TAX-AMT
        BaseNumberOfDecimals
            classic name is BASE-ND
        TaxRate                     is Percent size 7.5
        AccruedOrInvoiced           is AlphaUpper size 1
            classic name is ACCRUAL-FL
            States
                Invoiced value is "I"
                Accrued  value is "A"
        ProcessLevel               is like PayablesProcessLevel	 
            classic name is PROC-LEVEL

        CurrencyRate
            classic name is CURR-RATE
        Status                      is Numeric size 1
            States
                Created  				value is 0
                Reported 				value is 1
                CreatedNotJournalized  	value is 3	

        ManuallyEntered             is Boolean
            classic name is MANUAL-FL
        VATRegistrationCountry      is a Country
            classic name is VAT-REG-CTRY
			default label is "V\A\TRegistrationCountry/\Jurisdiction"
        VATRegistrationNumber
            classic name is VAT-REG-NBR
        TaxUsageCode
            classic name is TAX-USAGE-CD
        InvoicedOrCreditMemo        is AlphaUpper size 1
            classic name is INV-CRD-IND
            States
                Invoice    value is "I"
                CreditMemo value is "C"
        TaxYear
        TaxPeriod
        TransactionSource           is AlphaUpper size 1
            classic name is SOURCE
            States
                InputAp  value is "I"
                    default label is "Input = Payables"
                OutputAr value is "O"
                    default label is "Output = Receivables"
        PurchaseOrSalesReport       is AlphaUpper size 1
            classic name is PURCH-SALE-RPT
        TaxInterfaced               is AlphaUpper size 1
            classic name is TAX-FLAG
            States
                Interfaced    value is "I"
                Notinterfaced value is "~"
                    default label is "NotInterfaced"
        TaxTransactionCanceled      is Boolean
            classic name is CANCEL-FL
		InvoiceCompany				is a CompanyIsolated		 
		RelatedObjectReference		is BusinessObjectReference

		TaxCalculationSource		is Alpha 1
            States
                Infor    			value is blank
                Sabrix 				value is "S"
                	default label is "OneSource"
      	FromVATRegistrationCountry  is a Country
      	FromVATRegistrationNbr		is a VATRegistrationNumber
      	FromTaxCode    				is like TaxCode
      	FromCurrency				
		CallingTransactionUID		is a UniqueID				 	
		TaxRateCode					is Alpha 20					 
      	LineType          			is AlphaUpper 1				 
            States
            	None				value is blank
                Goods  				value is "G"
                Service 			value is "S"
		NonTaxable					is an InternationalAmount	 
		Exempt						is Boolean
		ExemptAmount				is an InternationalAmount	 
		ExemptReasonCode			is Alpha 4
		InvoiceDescription			is Alpha 100				 
		JurisdictionText			is Text						 
		SabrixReturnMessages		is a CommentText
		Comment						is Text
		CommodityCode				is like ICNCode		
		TaxingJurisdiction
		OneSourceVersionType	    is Alpha 1			
			States										
				Original			value is blank		
				Generic				value is "G"		
		WebserviceResults			is Text				
		ReturnedErpTaxCode			is like TaxCode		

		
	Context Fields
		TaxPointDateRange			is a DateRange
		VatReportIDForCountry
		VatReportingLine

		InvoiceType

		TaxPayableOrDueOption

	Transient Fields
		InputTaxPointDateYear		is a Year	
		TransCalendarYear			is a Year
			derive value from DerivedTaxPointDateYear
		TransCalendarPeriod 		is a TaxPeriod
			derive value from DerivedTaxCalendarPeriod	
		TransPeriodEndDate			is Date
		SelectAPProcessLevel		is like PayablesProcessLevel
			derive value from ProcessLevel
		SelectPayablesCompany		is a PayablesCompany
			disable surrogates
			derive value from InvoiceCompany.OrigCompany
		TransVatReportIDForCountry	is like VatReportIDForCountry	


		ReturnedErrorNumber			is Numeric 3
		ReturnedErrorMessage		is Alpha 100
		BypassActiveCodeBlockEdit					


	Derived Fields

		HasErrorMsg is a DerivedField	 			
			type is Boolean
			restricted
			return LocalHasError 		
			
        InputOutput        is a ConditionalField
            type is AlphaUpper size 1
            restricted
            if (IsAptax)
                "I"
            else
            if (IsClInput)
                "I"
            else
                "O"
                
        VendorCustomerName is a ConditionalField
            type is Alpha size 30
            classic name is VEND-CUST-NAME

            if (IsApvendmast)
                VendorRel.VendorName
            else
                CustomerRel.Name
 
  		DerivedSelectYear			is a DerivedField
			type is Year
			restricted
			if (InputTaxPointDateYear entered)
				return InputTaxPointDateYear
				
            return DerivedCurrentDate year
            
 		DerivedTaxPointDateYear			is a DerivedField
			type is Year
			restricted
            return TaxPointDate year

 		DerivedTaxPointDatePeriod	is a DerivedField
			type is Alpha 2 
			restricted
            return TaxPointDate month

		DerivedTaxCalendarPeriod	is a DerivedField					
			type is Alpha 2 
			restricted
			return first CurrentTaxCalendarPeriodRel.TaxCalendarPeriod

 		DerivedCurrentDate			is a DerivedField
			type is Date
			restricted
            return current corporate date
           
        DerivedPreviousPeriod 		is a DerivedField
			type is Alpha 2
			restricted
            return TransCalendarPeriod - 1   

 		CountOfAllTaxTransationForTaxEntity	is a DerivedField			
			type is like TransactionSequenceNumber	
			restricted
			return (instance count of TaxTransactionsForTaxEntityRel)

		DerivedRecordCount is a DerivedField
			type is Numeric 3
			return 1

		RecordsProcessedMessage is a MessageField
			restricted
			"RecordsProcessed"

		NoStreetMessage is a MessageField
			"NoStreet"

		ParameterText is a MessageField					
			"Parameters"
			
		DerivedTimestamp is a DerivedField
			type is TimeStamp 
			return current timestamp

		GetConversionRate is a DerivedField				
			type is like CurrencyExchangeRate 
			default label is untranslatable
			restricted
			Comment = Comment + "<pre>" + "TimeStamp: " + DerivedTimestamp + "<br>"		
			Comment = Comment + "[264]GetConversionRateExecuted....:" + "<br>"  				
			Comment = Comment + "[265]Begin---------GetConversionRateRoutine----------------------"	+ "<br>"	

			initialize LocalCurrencyExchange

			Comment = Comment + "[269]LocalFromCurrency..............:" + LocalFromCurrency + "<br>"	
			Comment = Comment + "[270]TransactionCurrency............:" + TransactionCurrency + "<br>"	
			Comment = Comment + "[271]FromCurrency...................:" + FromCurrency + "<br>"
			if (FromCurrency not entered
			and TransactionCurrency entered)
				FromCurrency = TransactionCurrency
				Comment = Comment + "[275]FromCurrency...................:" + FromCurrency + "<br>"
			if (LocalFromCurrency not entered)				
				LocalFromCurrency = TransactionCurrency		
			LocalToCurrency					= TaxEntity.FunctionalCurrency
			Comment = Comment + "[280]TaxEntity.FunctionalCurrency...:" + TaxEntity.FunctionalCurrency + "<br>"
			LocalTransactionAmount			= TransactionInvoiceAmount
			if (LocalInitializeCurrencyRate)
				initialize LocalCurrencyExchange.EnteredCurrencyRate

			if (TaxPointDate entered)											
				LocalExchangeDate			 = TaxPointDate						
			else																
				LocalExchangeDate			 = current corporate date												
			LocalFromCurrency 				 = TransactionCurrency
			LocalCurrencyExchange.ToCurrency = TaxEntity.FunctionalCurrency						
			LocalOutputCurrencyAmount		 = LocalCurrencyExchange.OutputCurrencyAmount		
			LocalCurrencyRate				 = LocalCurrencyExchange.OutputCurrencyRate 
				
			Comment = Comment + "[290]-------------AfterTriggerHasExecutede----------------------" + "<br>"				
			Comment = Comment + "[291]LocalFromCurrency........................:" + LocalFromCurrency + "<br>"
			Comment = Comment + "[292]CurrencyExchange.FromCurrency............:" + LocalCurrencyExchange.FromCurrency 							+ "<br>"
			Comment = Comment + "[293]CurrencyExchange.ToCurrency..............:" + LocalCurrencyExchange.ToCurrency 							+ "<br>"
			Comment = Comment + "[294]CurrencyExchange.ExchangeDate............:" + LocalCurrencyExchange.ExchangeDate 	
			Comment = Comment + "[294]CurrencyExchange.CurrencyTable...........:" + LocalCurrencyExchange.CurrencyTable						+ "<br>"
			Comment = Comment + "[295]CurrencyExchange.EnteredCurrencyRate.....:" + LocalCurrencyExchange.EnteredCurrencyRate					+ "<br>"
			Comment = Comment + "[296]CurrencyExchange.EnteredCurrencyAmount...:" + LocalCurrencyExchange.EnteredCurrencyAmount 				+ "<br>"
			Comment = Comment + "[297]CurrencyExchange.OutputCurrencyAmount....:" + LocalCurrencyExchange.OutputCurrencyAmount					+ "<br>"	
			Comment = Comment + "[298]LocalCurrencyExchange.OutputCurrencyRate.:" + LocalCurrencyExchange.OutputCurrencyRate 					+ "<br>"
			Comment = Comment + "[299]LocalOutputCurrencyAmount................:" + LocalOutputCurrencyAmount 									+ "<br>"
			Comment = Comment + "[300]LocalCurrencyExchange.OutputCurrencyRate.:" + LocalCurrencyRate 											+ "<br>"
			Comment = Comment + "[301]End---------GetConversionRateRoutine----------------------"	
			Comment = Comment + "</pre>"	

			return LocalCurrencyRate


		DefaultLookupKey is a StringField		
			type is Alpha 100
			default label is untranslatable
			restricted
			"TaxTransaction.FixBaseAmounts"	    
			":"
			TaxEntity							
			":"			
			TaxCode								
			":"			
			TaxTransaction						
			":"
			DerivedTimestamp					
			
 		DerivedBaseField is a DerivedField		
			type is Alpha 7
			default label is untranslatable
			restricted
			if (BaseField.Invoice)
				return InvoiceLabel
			if (BaseField.Taxable)
				return TaxableLabel
			if (BaseField.Tax)
				return TaxLabel								
			return blank
									
		InvoiceLabel  is a LabelField
			"Invoice"
		TaxableLabel  is a LabelField
			"Taxable"		
		TaxLabel  is a LabelField
			"Tax"		

		LoadChangeHeaders is a StringField	 
			type is Text
			default label is untranslatable
			restricted			

			TableHeader
			BaseTaxHeader
			BaseValueColumnHeader


		LoadChangesToTaxLog is a StringField	 
			type is Text
			default label is untranslatable
			restricted			




			BaseValueTaxAmount


		TableHeader is a StringField	 
			type is Text
			default label is untranslatable
			restricted			
			"<pre>"				
			"<table>   "
		BaseTaxHeader is a StringField	  	
			type is Text
			default label is untranslatable
			restricted			
			" <h1> "
			"  <tr>                                        "

			"	<th colspan=7>Fix Base Amounts Results</th>"	 						
			"  </tr>                                       "
			"  <tr>                                        "
			"	<th colspan=7>Currency Table Used: " + LocalCurrencyTableUsed + "</th>"	
			"  </tr>                                       "			
			" </h1> "			
		BaseFieldColumnHeader is a StringField	 
			type is Text
			default label is untranslatable
			restricted			
			"  <tr>                                        "			
			"	<th>" DerivedBaseField "</th>              "	 
			"	<th> </th>                                 "
			"	<th> </th>                                 "
			"	<th> </th>                                 "
			"	<th> </th>                                 "	
			"	<th> </th>                                 "	
			"	<th> </th>                                 "									
			"  </tr>    								   "	
			
		BaseValueColumnHeader is a StringField	 
			type is Text
			default label is untranslatable
			restricted			
			"  <tr>                                        "
			"	<th> </th>                     			   "								
			"	<th>Rate Before</th>                       "	 
			"	<th>Rate After</th>                        "
			"	<th>Amount Before</th>                     "
			"	<th>Amount After</th>                      "
			"	<th> </th>                                 "	
			"	<th> </th>                                 "								
			"  </tr>    								   "						
		BaseValueTaxAmount is a StringField	 
			type is Text
			default label is untranslatable
			restricted			
			"  <tr>                                        "
			"	<td>" LocalBlank		                   "</td>"				
			"	<td>" LocalBeforeEnteredCurrencyRate       "</td>"
			"	<td>" LocalAfterEnteredCurrencyRate        "</td>"
			"	<td>" LocalBeforeEnteredCurrencyAmount     "</td>"
			"	<td>" LocalAfterEnteredCurrencyAmount	   "</td>"
			"	<td>" LocalBlank  	                       "</td>"
			"	<td>" LocalBlank		                   "</td>"		
			"  </tr>  									   "

		ShowParametersUsed is a StringField	  	 
			type is Text
			"<pre>"	
			LocalBlank
			LocalBlank	 
			" -----------------------------------------------------------<br>"			
			" <b>" ParameterText  "</b> 								 <br>"
			" -----------------------------------------------------------<br>"				 
			" TaxEntity..............:" DisplayPrmTaxEntity				"<br>"
			" TaxCode................:" DisplayPrmTaxCode				"<br>"
			" CutOffDateRange.Begin..:" DisplayCutOffDateRange.Begin	"<br>"				
			" CutOffDateRange.End....:" DisplayCutOffDateRange.End		"<br>"	
			" PrmCurrencyTable.......:" DisplayPrmCurrencyTable			"<br>"
			" TaxBase................:" DisplayTaxBase					"<br>"
			" TaxableBase............:" DisplayTaxableBase				"<br>"
			" InvoiceBase............:" DisplayInvoiceBase		 	    "<br>"  
			" OnlyUpdateIfNeeded.....:" DisplayOnlyUpdateIfNeeded		"<br>"  
			"</pre>"	
						































		TableEnd is a StringField	 
			type is Text
			default label is untranslatable
			restricted			
			"</table>"
			"</pre>"	

		

	Local Fields





		LocalHasError			is Boolean 	
		CalculateTax
		Idx			 			is Numeric size 2

		LocalExchangeDate		is an ExchangeDate
		LocalFromCurrency		is a FromCurrency

		LocalToCurrency			is a ToCurrency					
		LocalTransactionAmount	is a CurrencyAmount				
		LocalCurrencyTable      is a CurrencyTable				
		LocalCurrencyExchange	is a CurrencyExchange			
		LocalCurrencyRate       is a CurrencyRate				

		LocalOutputCurrencyAmount is an InternationalAmount		
		LocalInitializeCurrencyRate is Boolean                  

		LocalTaxOut				is Alpha 1
		Seq						is Numeric 3
		LocalLastTransactionID	is a TransactionSequenceNumber



		OutputTaxCodeDescription	is a Description
		LocalParsedCity 			is a Description
		LocalParsedState			is Alpha 2
		LocalParsedCounty			is a Description									
		Pos1                        is Numeric 2
		Pos2                        is Numeric 2
		NbrOfRightSlashes			is Numeric 1
		ExitRoutine					is Boolean
		LoadValueFor				is Numeric 1
			States 	
				City				value is 0
				County				value is 1	
				State				value is 2	
		BegCounty                   is Numeric 2
		BegState                    is Numeric 2	
		LocalTrigger				is Alpha 1	
		ProcessTaxHistory
		OneSourceTaxAttribute50		is a TaxAttributeGroup50
		LocalPostalAddress			is a PostalAddressV2 
			holds pii


		LocalTaxingJurisdiction		is Alpha 60
		UnParseValueFor				is Numeric 1
			States 
				State				value is 0
				County				value is 1	
				City				value is 2	
		BegCity						is Numeric 2
		FindEnd						is Numeric 2				
		EndPos						is Numeric 2
		LocalReturnedTaxCode 		is like TaxCode					
		LocalReturnedTaxExempt		is an InternationalAmount		
		LocalBeforeEnteredCurrencyRate is a CurrencyRate			
		LocalBeforeEnteredCurrencyAmount is an InternationalAmount	
		LocalAfterEnteredCurrencyRate is a CurrencyRate				
		LocalAfterEnteredCurrencyAmount is an InternationalAmount	
		LocalDisplayChanges is a CommentText						
		LocalBlank 					is Alpha 1						
		BaseField 					is Numeric 1
			States  
				Tax				value is 1
				Taxable			value is 2
				Invoice			value is 3
		LocalCurrencyTableUsed  is like CurrencyTable				

		DisplayPrmTaxEntity			is like TaxEntity
		DisplayPrmTaxCode			is like TaxCode	
		DisplayCutOffDateRange 		is like TaxPointDateRange	 
		DisplayPrmCurrencyTable 	is like CurrencyTable
		DisplayTaxBase 				is Boolean					 
		DisplayTaxableBase 			is Boolean				 
		DisplayInvoiceBase 			is Boolean				 
		DisplayOnlyUpdateIfNeeded 	is Boolean		
		LogLine						is Numeric 3 

														

	Field Rules

		TaxCode	
			required

		TransactionSource
			if (SystemCode = "CD")	
				required
					"MustEnterASourceForThisSystemCode"							

           	if (TransactionSource not entered)
	           	if ((SystemCode 	=  "AP"
	           	or SystemCode 		=  "CB")
	           	and TransactionInvoiceAmount > 0)
	            	TransactionSource = "I"
	           	else
	               	TransactionSource = "O"

		ManuallyEntered															
			default to true	
			cannot be changed

		TaxTransactionAccount						

        TaxPointDate
            required

		CurrencyRate
			default to BaseInvoiceAmount.BaseAmount.EnteredCurrencyRate			

		TransactionInvoiceAmount
			
		TransactionTaxableAmount
			
		TransactionTaxAmount
			
		InvoiceCompany
			if (InvoiceCompany.OrigCompany entered)
				constraint (GeneralLedgerCompanyRel exist)
	            	"GlobalLedgerCompany<InvoiceCompany>DoesNotExist"	
	            				
		TaxCalculationSource
    		if (TaxEntity.ThirdParty.Sabrix)
				TaxCalculationSource = "S"
    		else
    			TaxCalculationSource = blank		
			cannot be changed
		LineType
			default to "G"
		TaxPointDateRange
			if (TaxPointDateRange.End not entered)
				TaxPointDateRange.End = current corporate date

		OneSourceVersionType	
			if (OneSourceVersionType changed)
				constraint (ManuallyEntered)								
					"CannotChangeTaxVersionType;SystemGeneratedTaxTransaction"			
			if (OneSourceVersionType entered)
				constraint (TaxEntity.ThirdParty.Sabrix)
					"ThisOptionIsOnlyValidFor_\One\Source"

			if (OneSourceVersionType changed)
				constraint (ManuallyEntered)								
					"CannotChangeTaxVersionType;SystemGeneratedTaxTransaction"		
										
    Conditions

        IsAcctByCode
        	restricted
            when (TaxEntity.UseTaxCodeAccounts) 

        IsAptax
        	restricted
            when (SystemCode.AccountsPayable)

        IsApvendmast
        	restricted
            when (SystemCode.AccountsPayable)

        IsArtax
        	restricted
            when (SystemCode.AccountsReceivable)

        IsBltax
        	restricted
            when (SystemCode.Billing)

        IsClInput
        	restricted
            when (SystemCode.CashLedger
            and   TransactionInvoiceAmount >  0)

        IsClOutput
        	restricted
            when (SystemCode.CashLedger
            and   TransactionInvoiceAmount <  0)

        IsCltax
        	restricted
            when (SystemCode.CashLedger)

        IsCrtax
        	restricted
            when (SystemCode.CashReceipts)

        IsCustdesc
        	restricted
            when (InputOutput = "I")

		IsPayables
			restricted
			when (SystemCode = "AP")		 

		IsReceivables
			restricted
			when (SystemCode = "AR")		 
						
		Testing
			restricted
			when (1 > 0)	

		TaxTransactionsExistForTaxEntiy
			restricted
			when (TaxTransactionSearchRel exist)		

    	SystemCodeNotEntered
        	restricted

			when (!IsArtax
            and   !IsAptax)

 
 		WithinTaxPointDateRange

			when (TaxPointDateRange not entered
			or	 (TaxPointDateRange entered
			and	  TaxPointDate within TaxPointDateRange))

		IsSalesTransaction
			restricted
			when (SystemCode = "AR"	 
			or    SystemCode = "BL"
			or    SystemCode = "PS"	//"BR" IEFIN-17842
			or    IsCashBookSalesTransaction)
			
		IsCashBookSalesTransaction
			restricted
			when (SystemCode = "CB"
			and   BaseTaxAmount     > 0)

		IsOneSourceTaxTransaction
			restricted
			when (TaxCalculationSource.Sabrix
			or    TaxEntity.ThirdParty.Sabrix)

		PurgeTaxTransactionsExistForTaxEntity
			restricted
			when (PurgeTaxTransactionSearchRel exist)


        IsInvoiced
        	restricted
            when (AccruedOrInvoiced = "I")
		IsAccrued
        	restricted
            when (AccruedOrInvoiced = "A")

        TaxPayableOrDueSelection 		 
			when (TaxPayableOrDueOption = blank
			or   (TaxPayableOrDueOption.Payable
			and   IsPayablesTax)
			or   (TaxPayableOrDueOption.Due
			and   IsTaxDue))			
						            
       	IsPayablesTax 
			restricted
 			when (SystemCode = "AP"					 
			or   (SystemCode = "CB"					 
			and   TransactionSource = "I")			 
			or   (SystemCode = "CB"					 
			and   TransactionSource = blank			 
			and   TransactionInvoiceAmount > 0)		 
			or   (SystemCode = "CL"					 
			and   TransactionInvoiceAmount > 0))	  
			
       	IsTaxDue 
			restricted
 			when (SystemCode = "AR"					 
			or   (SystemCode = "BL"					 
			or   (SystemCode = "CB"
			and   TransactionSource = "O")
			or   (SystemCode = "CL"					 
			and   TransactionInvoiceAmount > 0)))	 	

       	VendorRelExist  
       		restricted
            when (IsApvendmast
            and   VendorRel exist)         									            

 
 		OneSourceInError		
 			restricted
 			when (TaxCalculationSource.Sabrix

 			and Status.CreatedNotJournalized)      
 		ShowWebserviceResults
 			restricted
 			when (TaxConfigurationRel.DebugMode
 			and   WebserviceResults entered)
 		OutputUserAttributesExist 
 			when (OutputUserAttributesRel exist)
 		TaxLogForFixBaseAmountsExist						
 			restricted
 			when (TaxLogForFixBaseAmountsRel exist)	
																					 
    Relations
		TaxConfigurationRel
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration = TaxEntity.FinanceEnterpriseGroup
				











        PayablesCompanyRel
            classic name is APCOMPANY
            one-to-one relation to PayablesCompany
            Field Mapping uses symbolic key
                related.Company = InvoiceCompany	

        PayablesInvoiceRel
            classic name is APINVOICE
            one-to-one relation to PayablesInvoice
            valid when (IsAptax)
            Field Mapping uses ByCompanyVendorInvoice
                related.Company        = InvoiceCompany	
                related.Vendor         = VendorCustomer
                related.Invoice        = Invoice
                related.Suffix         = Suffix
                related.CancelSequence = CancelSequence
				related.InvoiceDate    = InvoiceDate		

        ReceivablesCompanyRel
            classic name is ARCOMP
            one-to-one relation to ReceivableCompany
            Field Mapping uses symbolic key
                related.Company = InvoiceCompany

        VendorRel
            classic name is APVENDMAST
            one-to-one relation to Vendor
            valid when (IsApvendmast)
            required
            Field Mapping uses symbolic key
                related.VendorGroup = PayablesCompanyRel.VendorGroup
                related.Vendor      = VendorCustomer

        CustomerRel
            classic name is CUSTDESC
            one-to-one relation to Customer
            valid when (IsCustdesc)
            Field Mapping uses symbolic key
                related.CustomerGroup = ReceivablesCompanyRel.CustomerGroupField.CustomerGroup
                related.Customer      = VendorCustomer

		CompanyCustomerRel
            one-to-one relation to CompanyCustomer
            Field Mapping uses symbolic key
                related.Company					= ReceivablesCompanyRel.Company
                related.Customer				= VendorCustomer
		










		TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= TaxEntity.FinanceEnterpriseGroup
                related.TaxEntity 				= TaxEntity
                
        EntityTaxCodeRel		 
            one-to-one relation to EntityTaxCode
            valid when (IsAcctByCode)
            required
          	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= TaxEntity.FinanceEnterpriseGroup
                related.TaxEntity 					= TaxEntity 
                related.TaxCode 					= TaxCode

       	GeneralLedgerCompanyRel
            one-to-many relation to GeneralLedgerCompany
            Field Mapping uses symbolic key
                related.Company = InvoiceCompany.OrigCompany

      	TaxCalendarPeriodsRel
            one-to-one relation to TaxCalendarPeriod
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup 		= TaxEntity.FinanceEnterpriseGroup
                related.TaxCalendar.TaxEntity 		= TaxEntity
                related.TaxCalendar.TaxYear 		= TransCalendarYear
                related.TaxCalendarPeriod			= TransCalendarPeriod
 
 		TaxCalendarPrevPeriodRel
            one-to-one relation to TaxCalendarPeriod
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup 		= TaxEntity.FinanceEnterpriseGroup
                related.TaxCalendar.TaxEntity 		= TaxEntity
                related.TaxCalendar.TaxYear 		= TransCalendarYear
                related.TaxCalendarPeriod			= DerivedPreviousPeriod
		CurrentTaxCalendarPeriodRel					
           	one-to-many relation to TaxCalendarPeriod
            Field Mapping uses symbolic key
                related.FinanceEnterpriseGroup 		= TaxEntity.FinanceEnterpriseGroup
                related.TaxCalendar.TaxEntity 		= TaxEntity
                related.TaxCalendar.TaxYear 		= TransCalendarYear
            Instance Selection
                where (related.PeriodEndDate 		>= TaxPointDate)

       	TaxTransactionSearchRel
            one-to-many relation to TaxTransaction
            Field Mapping uses symbolic key	
            	related.FinanceEnterpriseGroup		= TaxEntity.FinanceEnterpriseGroup 
				related.TaxEntity					= TaxEntity

 		PayablesProcessLevelRel	
			one-to-many relation to PayablesProcessLevel				
			Field Mapping uses symbolic key
				related.Company 					= PayablesCompanyRel.Company 

       	TaxTransactionsForTaxEntityRel									
            one-to-many relation to TaxTransaction 
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= TaxEntity.FinanceEnterpriseGroup	 
                related.TaxEntity 					= TaxEntity


       	VatReportIDForCountryRel		 
            one-to-one relation to VatReportIDForCountry
            valid when (IsAcctByCode)
            required
          	Field Mapping uses symbolic key
          		related.FinanceEnterpriseGroup						= TaxEntity.FinanceEnterpriseGroup
          	    related.TaxEntity 									= TaxEntity
				related.VatReportIDForCountry.VatReportID			= TransVatReportIDForCountry.VatReportID
                related.VatReportIDForCountry.CountryCode 			= TransVatReportIDForCountry.CountryCode 
 
      	VatReportingLineRel
            one-to-many relation to VatReportingLine
            Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup						= TaxEntity.FinanceEnterpriseGroup
    			related.TaxEntity									= TaxEntity 	
            Instance Selection
                where (related.VatReportIDForCountry 				= VatReportIDForCountry
                and    related.VatReportingLine						= VatReportingLine)  







































       	PurgeTaxTransactionSearchRel
            one-to-many relation to TaxTransaction
            Field Mapping uses symbolic key	 
            	related.FinanceEnterpriseGroup	= TaxEntity.FinanceEnterpriseGroup 
            Instance Selection
				where (related.TaxEntity not entered			
				or    (related.TaxEntity = TaxEntity)
				and   (WithinTaxPointDateRange)            
            	and   (related.Status  = 1))



       	ICNCodeRel
            one-to-one relation to ICNCode
            Field Mapping uses symbolic key	 
            	related.FinanceEnterpriseGroup	= TaxEntity.FinanceEnterpriseGroup 
            	related.ICNCode					= CommodityCode

		OutputUserAttributesRel 							
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= TaxEntity.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= CallingTransactionUID 			
 				and    related.OneSourceUserAttribute.Type 						= "O")

		LineOutputUserAttributesToLoadRel 						
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= TaxEntity.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= CallingTransactionUID 			
 				and    related.OneSourceUserAttribute.Type 						= "O"
 				and    related.Level.Line)	

		InvoiceOutputUserAttributesToLoadRel 						
			one-to-many relation to OneSourceUserAttribute
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= TaxEntity.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= CallingTransactionUID 			
 				and    related.OneSourceUserAttribute.Type 						= "O"
 				and    related.Level.Invoice)	

		TaxLogEntriesRel	 
			one-to-many relation to TaxLogHeader
			Field Mapping uses symbolic key	 
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection


				where (related.UniqueIdOfRelatedObject = UniqueID)


		TaxLogForFixBaseAmountsRel	 
			one-to-many relation to TaxLogHeader
			delete cascades
			Field Mapping uses symbolic key	 
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection

				where (related.UniqueIdOfRelatedObject = UniqueID
				and    related.LogCallingRoutine[1:29] = "TaxTransaction:FixBaseAmounts")   	
				

    Sets


        Set2
            indexed
            Sort Order

				TaxEntity
                TaxCode
                SystemCode
                TaxPointDate descending
                VoucherNumber
                TaxTransaction

        Set4
            indexed
            Sort Order

				TaxEntity
                TaxYear
                TaxPeriod
                SystemCode
                TaxTransaction
                TaxCode

        Set6
            indexed
            Sort Order

				TaxEntity
                Invoice
                TaxCode
                ProductTaxCategory
                TaxTransaction

		ByVendorCustomerTaxCode				
			duplicates
			indexed
			Sort Order
				TaxEntity
				VendorCustomer
				TaxCode
				TaxPointDate	

		ByTaxPointDateVendorCustomer		
			duplicates
			indexed
			Sort Order
				TransactionCurrency
				TaxPointDate
				TaxEntity
				VendorCustomer
				TaxCode	
				

  	Rule Blocks

		EditTaxCode
			if (TaxCode entered
			and ManuallyEntered)
				CalculateTax.CallingModule		 = "TaxTransaction"	 
				CalculateTax.Function            = "I"
				CalculateTax.TaxEntity           = TaxTransaction.TaxEntity
				CalculateTax.InvoiceCompany      = InvoiceCompany
				CalculateTax.TaxCode             = TaxCode
				CalculateTax.ProductTaxCategory  = blank
				CalculateTax.System              = "TX"
				CalculateTax.InvoiceDate		 = InvoiceDate
				CalculateTax.TaxDate			 = TaxPointDate	
				CalculateTax.BypassMemberEdit	 = true	
				if (TaxEntity.ThirdParty.Sabrix)
					if (SystemCode not entered)
						CalculateTax.System									= "TX"
					else	
						CalculateTax.System									= SystemCode
					CalculateTax.Invoice									= Invoice
					CalculateTax.Vendor      								= VendorCustomer
					CalculateTax.CommodityCode 								= CommodityCode
					CalculateTax.TaxableAmount								= TransactionTaxableAmount
					CalculateTax.UniqueIdOfRelatedObject 					= UniqueID		
					include ParseTaxCodeDescription			
					CalculateTax.PostalAddress.DeliveryAddress.AddressLine1 = NoStreetMessage
					CalculateTax.PostalAddress.Municipality   				= LocalParsedCity	
					CalculateTax.PostalAddress.StateProvince    			= LocalParsedState
					CalculateTax.PostalAddress.County 						= LocalParsedCounty
					if (VATRegistrationCountry entered)
						CalculateTax.PostalAddress.Country 					= VATRegistrationCountry
					else
						CalculateTax.PostalAddress.Country 					= "US"	 
						CalculateTax.ToCountryCode							= "USA"		
					if (TaxTransaction entered)
						CalculateTax.LineNumber								= TaxTransaction
					else		
						if (IsAcctByCode)
							CalculateTax.LineNumber							= EntityTaxCodeRel.LastTransactionID + 1				 
						else
							CalculateTax.LineNumber	 						= TaxEntityRel.LastTransactionID + 1 		

 					
				LocalTaxOut						 = CalculateTax.ExecuteCalculateTax
				constraint (CalculateTax.OutputErrorNumber not entered)
	            	"<CalculateTax.OutputErrorMessage>"		
				if (TaxRate not entered)											
					TaxRate						= CalculateTax.OutputTaxRate		
				TaxingJurisdiction				= CalculateTax.TaxingJurisdiction	
				if (TransactionTaxAmount not entered)
					TransactionTaxAmount 		= CalculateTax.ReturnedTotalTax
				SabrixReturnMessages			= CalculateTax.SabrixReturnMessage
				LocalReturnedTaxCode 			= CalculateTax.SabrixReturnedTaxCode		
				LocalReturnedTaxExempt			= CalculateTax.EachLineTaxExempt			
				if (TaxEntity.ThirdParty.Sabrix)
					ReturnedErpTaxCode			= CalculateTax.SabrixReturnedTaxCode
							
		UpdateBaseTotals
			if (TransactionCurrency changed)
				if (CurrencyRate entered
				and CurrencyRate = old CurrencyRate)
					confirmation required
						"Warning;CurrencyCodeHasChanged;KeepRate?NoToGoBackToForm;BlankOutOrEnterNewRate"	
			
			if (TransactionCurrency entered)
				FromCurrency = TransactionCurrency
			LocalFromCurrency = TransactionCurrency								 			



			if (TransactionInvoiceAmount changed
			or CurrencyRate changed
			or TransactionCurrency changed)			
				initialize BaseInvoiceAmount.BaseAmount
				BaseInvoiceAmount.TransactionAmount = TransactionInvoiceAmount

			if (TransactionInvoiceAmount entered)
				if (CurrencyRate not entered)
				   	if (TaxPointDate entered)					
				   	   	LocalExchangeDate	= TaxPointDate		
					else  										
						LocalExchangeDate	= current corporate date
				else	
					LocalExchangeDate	= TaxPointDate
					BaseInvoiceAmount.BaseAmount.EnteredCurrencyRate = CurrencyRate
				
				BaseInvoiceAmount.TransactionAmount = TransactionInvoiceAmount	
				BaseInvoiceAmount.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency
	        	



			if (TransactionTaxableAmount changed
			or CurrencyRate changed
			or TransactionCurrency changed)		
				initialize BaseTaxable.BaseAmount
				BaseTaxable.TransactionAmount = TransactionTaxableAmount

			if (TransactionTaxableAmount entered)
				if (CurrencyRate not entered)
				   	if (TaxPointDate entered)					
				   	   	LocalExchangeDate	= TaxPointDate		
					else  										
						LocalExchangeDate	= current corporate date
				else	
					LocalExchangeDate	= TaxPointDate
					BaseTaxable.BaseAmount.EnteredCurrencyRate = CurrencyRate
				
				BaseTaxable.TransactionAmount = TransactionTaxableAmount	
		        LocalFromCurrency = TransactionCurrency

				BaseTaxable.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency




			if (TransactionTaxAmount changed
			or CurrencyRate changed
			or TransactionCurrency changed)					
				initialize BaseTaxAmount.BaseAmount
				BaseTaxAmount.TransactionAmount = TransactionTaxAmount

			if (TransactionTaxAmount entered)
				if (CurrencyRate not entered)
				   	if (TaxPointDate entered)					
				   	   	LocalExchangeDate	= TaxPointDate		
					else  										
					    LocalExchangeDate	= current corporate date
				else	
					LocalExchangeDate	= TaxPointDate
					BaseTaxAmount.BaseAmount.EnteredCurrencyRate = CurrencyRate
				
				BaseTaxAmount.TransactionAmount = TransactionTaxAmount	
		        LocalFromCurrency = TransactionCurrency

	        	BaseTaxAmount.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency


			if (CurrencyRate not entered)
	        	CurrencyRate = BaseInvoiceAmount.BaseAmount.EnteredCurrencyRate	
				if (CurrencyRate not entered)									
					CurrencyRate = BaseTaxable.BaseAmount.EnteredCurrencyRate	
				if (CurrencyRate not entered)									
					CurrencyRate = BaseTaxAmount.BaseAmount.EnteredCurrencyRate	

		CheckBaseTotalsForSystemGenerated
			LocalFromCurrency = TransactionCurrency			  								 				

			if (TaxPointDate entered)
				LocalExchangeDate = TaxPointDate 
			else				
				LocalExchangeDate = current corporate date
						
			if (BaseInvoiceAmount.TransactionAmount not entered)			



				if (TransactionInvoiceAmount entered)
					initialize BaseInvoiceAmount.BaseAmount
					BaseInvoiceAmount.TransactionAmount = TransactionInvoiceAmount
					BaseInvoiceAmount.BaseAmount.EnteredCurrencyRate = CurrencyRate
					BaseInvoiceAmount.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency

			if (BaseTaxable.BaseAmount not entered)		        	



				if (TransactionTaxableAmount entered)
					initialize BaseTaxable.BaseAmount
					BaseTaxable.TransactionAmount = TransactionTaxableAmount
					BaseTaxable.BaseAmount.EnteredCurrencyRate = CurrencyRate	
					BaseTaxable.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency

			if (BaseTaxAmount.TransactionAmount not entered)	



				if (TransactionTaxAmount entered)
					initialize BaseTaxAmount.BaseAmount
					BaseTaxAmount.TransactionAmount = TransactionTaxAmount
					BaseTaxAmount.BaseAmount.EnteredCurrencyRate = CurrencyRate
					BaseTaxAmount.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency

			if (CurrencyRate not entered)										 
				CurrencyRate = BaseInvoiceAmount.BaseAmount.EnteredCurrencyRate	 

		DisplayBaseAmounts
			initialize Comment

			Comment = Comment + "<pre>" + "TimeStamp: " + DerivedTimestamp 													 + "<br>"	
			Comment = Comment + "LastTransactionID....................:" + EntityTaxCodeRel.LastTransactionID 				 + "<br>"	
			Comment = Comment + "TaxTransaction.......................:" + TaxTransaction 									 + "<br>"	
			Comment = Comment + "------------------DisplayBaseInvoiceAmount--------------------"  							 + "<br>"   
			Comment = Comment + "LocalFromCurrency....................:" + LocalFromCurrency 								 + "<br>"	
			Comment = Comment + "TransactionCurrency..................:" + TransactionCurrency								 + "<br>"
			Comment = Comment + "FromCurrency.........................:" + FromCurrency										 + "<br>"
			Comment = Comment + "BaseInvoiceAmount.TransactionAmount..:" + BaseInvoiceAmount.TransactionAmount 				 + "<br>"
			Comment = Comment + "BaseAmount.FromCurrency..............:" + BaseInvoiceAmount.BaseAmount.FromCurrency 		 + "<br>"
			Comment = Comment + "BaseAmount.TransactionAmount.........:" + BaseInvoiceAmount.BaseAmount.TransactionAmount	 + "<br>"		 
			Comment = Comment + "BaseAmount.ExchangeDate..............:" + BaseInvoiceAmount.BaseAmount.ExchangeDate 		 + "<br>"
			Comment = Comment + "BaseAmount.ToCurrency................:" + BaseInvoiceAmount.BaseAmount.ToCurrency			 + "<br>"
			Comment = Comment + "BaseAmount.ContextToCurrency.........:" + BaseInvoiceAmount.BaseAmount.ContextToCurrency 	 + "<br>"

			Comment = Comment + "FinanceEnterpriseGroup.CurrencyTable.:" + TaxEntity.FinanceEnterpriseGroup.CurrencyTable    + "<br>"	 
			Comment = Comment + "OutputCurrencyAmount.................:" + BaseInvoiceAmount.BaseAmount.OutputCurrencyAmount + "<br>" 
			Comment = Comment + "OutputCurrencyRate...................:" + BaseInvoiceAmount.BaseAmount.OutputCurrencyRate 	 + "<br>"
			Comment = Comment + "</pre>" 
								
   		IncrementTransactionId
			if (TaxTransaction not entered)					
				if (IsAcctByCode)			 
					increment EntityTaxCodeRel.LastTransactionID by 1
					TaxTransaction = EntityTaxCodeRel.LastTransactionID
				else
					increment TaxEntityRel.LastTransactionID by 1
					TaxTransaction = TaxEntityRel.LastTransactionID					














		ParseTaxCodeDescription    						 
  			OutputTaxCodeDescription = TaxCode.Description
			NbrOfRightSlashes = 0
			Pos2 = 0
			while (Pos1 <= 60)
				Pos1 +=1
				if (OutputTaxCodeDescription[Pos1:Pos1] = "/"
				or  LoadValueFor.State)	
					if (LoadValueFor.State)									 
						Pos2     = BegState + 1
						LocalParsedState = OutputTaxCodeDescription[BegState:Pos2]	
					else					
					if (LoadValueFor.County)
						LocalParsedCounty = OutputTaxCodeDescription[BegCounty:Pos1-1]	
						Pos1 +=1
						BegState = Pos1		
					else					
					if (LoadValueFor.City)
						if (LocalParsedCity = blank)
							LocalParsedCity = OutputTaxCodeDescription[1:Pos1-1]	
						Pos1 +=1						 
						BegCounty = Pos1  	
										
			 		LoadValueFor = LoadValueFor + 1		 
			 		NbrOfRightSlashes +=1
			 		Pos2 = 0

		ReTransactionUsingProcessTaxHistory 
    		if (TaxCalculationSource.Sabrix)








				ProcessTaxHistory.TaxTransFunction			= "U"
				ProcessTaxHistory.InTransactionId			= TaxTransaction
				ProcessTaxHistory.RelatedObjectReference	= CallingTransactionUID	
				ProcessTaxHistory.UniqueIdOfRelatedObject	= CallingTransactionUID	
				ProcessTaxHistory.TaxEntity	 				= TaxEntity		
				ProcessTaxHistory.InvoiceCompany			= InvoiceCompany 
				ProcessTaxHistory.TaxCode					= TaxCode					 
				include UnParseTaxingJurisdiction
				ProcessTaxHistory.ToAddress					= LocalPostalAddress		 
				ProcessTaxHistory.PostDate					= PostDate
				ProcessTaxHistory.TransactionInvoiceAmount	= TransactionInvoiceAmount
				ProcessTaxHistory.TransactionTaxableAmount	= TransactionTaxableAmount
				ProcessTaxHistory.TransactionTaxAmount		= TransactionTaxAmount
				ProcessTaxHistory.VoucherNumber				= VoucherNumber
				ProcessTaxHistory.SystemCode				= SystemCode
				ProcessTaxHistory.VendorCustomer			= VendorCustomer
				ProcessTaxHistory.VendorOrCustomerName		= Name
				ProcessTaxHistory.Invoice					= Invoice
				ProcessTaxHistory.Suffix					= Suffix
				ProcessTaxHistory.CancelSequence			= CancelSequence
				ProcessTaxHistory.TransactionSource			= TransactionSource
				ProcessTaxHistory.ProductTaxCategory 		= ProductTaxCategory
				ProcessTaxHistory.TaxTransactionAccount 	= TaxTransactionAccount	
				ProcessTaxHistory.TaxUsageCode 				= blank	 
				ProcessTaxHistory.ProcessLevel				= ProcessLevel
				ProcessTaxHistory.InvoiceDate 				= InvoiceDate
				ProcessTaxHistory.TransactionCurrency		= TransactionCurrency
				ProcessTaxHistory.CurrencyRate				= CurrencyRate
				ProcessTaxHistory.InvoicedOrCreditMemo		= InvoicedOrCreditMemo
				ProcessTaxHistory.TaxYear					= TaxYear
				ProcessTaxHistory.TaxPeriod					= TaxPeriod
				ProcessTaxHistory.TaxPointDate				= TaxPointDate
				ProcessTaxHistory.TaxRate					= TaxRate
				ProcessTaxHistory.TaxTransactionAccount		= TransactionTaxAmount				 

				include Load1SourceUserAttributesToLocal  					 									 
				ProcessTaxHistory.OneSourceTaxAttribute50 	= OneSourceTaxAttribute50			 
	
				LocalTrigger								= ProcessTaxHistory.WriteToOneSource	 
	
				ReturnedErrorNumber							= ProcessTaxHistory.ReturnedErrorNumber	
				ReturnedErrorMessage						= ProcessTaxHistory.OutputErrorMessage		
				constraint (ProcessTaxHistory.LocalErrorNumber not entered)
					"A1:<ProcessTaxHistory.OutputErrorMessage>"						
				constraint (ProcessTaxHistory.ReturnedErrorNumber not entered)	 
					"B1:<ProcessTaxHistory.OutputErrorMessage>"
				constraint (ProcessTaxHistory.OutputErrorMessage not entered)   
					"C1:<ProcessTaxHistory.OutputErrorMessage>"	 
					 
				if (ProcessTaxHistory.LocalErrorNumber not entered)
					Status = 0
					if (TaxingJurisdiction not entered)
						TaxingJurisdiction 					= ProcessTaxHistory.ReturnedTaxingJurisdiction
					if (TransactionTaxAmount not entered)
						TransactionTaxAmount 				= ProcessTaxHistory.ReturnedTotalTax
					TaxRate									= ProcessTaxHistory.ReturnedTotalRate					
					WebserviceResults						= ProcessTaxHistory.CapturedXml

		Load1SourceUserAttributesToLocal 
			initialize Idx
			initialize OneSourceTaxAttribute50
			if (LineOutputUserAttributesToLoadRel exists)		
				for each LineOutputUserAttributesToLoadRel 
					if (each.UserAttributeName entered)
						Idx +=1
						OneSourceTaxAttribute50.UserElement[Idx].Number	= Idx 	 
						OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName	
						OneSourceTaxAttribute50.UserElement[Idx].Value	= each.UserAttributeValue


			else			
			if (InvoiceOutputUserAttributesToLoadRel exist)
				for each InvoiceOutputUserAttributesToLoadRel 
					if (each.UserAttributeName entered)
						Idx +=1
						OneSourceTaxAttribute50.UserElement[Idx].Number	= Idx 	 
						OneSourceTaxAttribute50.UserElement[Idx].Name	= each.UserAttributeName	
						OneSourceTaxAttribute50.UserElement[Idx].Value	= each.UserAttributeValue				


		UnParseTaxingJurisdiction    						 

			Pos1 = 0
			Pos2 = 0
			EndPos = 0
			FindEnd = 60
			UnParseValueFor = 0										 
			NbrOfRightSlashes = 0
			initialize LocalPostalAddress

			include ParseTaxCodeDescription	
			if (NbrOfRightSlashes > 0)		
				LocalPostalAddress.DeliveryAddress.AddressLine1 = NoStreetMessage	 
				LocalPostalAddress.Municipality   				= LocalParsedCity	
				LocalPostalAddress.StateProvince    			= LocalParsedState
				LocalPostalAddress.County 						= LocalParsedCounty
				if (VATRegistrationCountry entered)
					LocalPostalAddress.Country 					= VATRegistrationCountry
				else
					LocalPostalAddress.Country 					= "US"	 

			
			if (NbrOfRightSlashes > 0)
				ExitRoutine = true
			else				

			if (TaxingJurisdiction entered)	
				while (FindEnd <= 60)
					FindEnd -=1
					if (TaxingJurisdiction[FindEnd:FindEnd] entered
					or FindEnd = 1)
						EndPos = FindEnd
						end while
					






				NbrOfRightSlashes = 0
				LocalPostalAddress.Country = TaxEntity.VATRegistrationCountry

				while (Pos1 <= EndPos)
					Pos1 +=1
					if (TaxingJurisdiction[Pos1:Pos1] = "/")
						NbrOfRightSlashes +=1	
						if (Pos1 = EndPos)
							end while				
						if (UnParseValueFor.State)	
							Pos2 = Pos1 - 1
							LocalPostalAddress.StateProvince = TaxingJurisdiction[1:Pos2]
							UnParseValueFor = UnParseValueFor + 1
							BegCounty = Pos1 + 1  
						else							
						if (UnParseValueFor.County)		
							Pos2 = Pos1 - 1
							LocalPostalAddress.County = TaxingJurisdiction[BegCounty:Pos2]	
							UnParseValueFor = UnParseValueFor + 1
							BegCity = Pos1 + 1 
							
							LocalPostalAddress.Municipality = TaxingJurisdiction[BegCity:EndPos]	 
							end while				 
			else
				JurisdictionText = JurisdictionText + "TaxingJurisdictionNotEntered" + "<br>"	
								 	



		CreateTaxLogRecord    	

            invoke Create TaxLogHeader
                invoked.FinanceEnterpriseGroup 		= TaxEntity.FinanceEnterpriseGroup
                invoked.TaxLogHeader				= DefaultLookupKey
                invoked.SystemCode					= SystemCode   
                invoked.LogThirdParty				= TaxEntity.ThirdParty
                invoked.LogTaxEntity				= TaxEntity
                invoked.LogVendor					= VendorCustomer
                invoked.LogInvoice					= Invoice
                invoked.LogOneSourceVersionType		= TaxConfigurationRel.OneSourceVersionType
  				invoked.LogCreatedTimestamp 	 	= current timestamp 	  
				invoked.LogToTaxCode			 	= TaxCode	  			  
				invoked.LogFromTaxCode			    = blank					  
				invoked.LogCallingRoutine		 	= "TaxTransaction:FixBaseAmounts;" + TaxTransaction 		  
				invoked.UniqueIdOfRelatedObject     = UniqueID  
				invoked.RelatedObjectReference		= RelatedObjectReference	 
                invoked.MessageRichText				= LocalDisplayChanges	
	                				
    Actions












		Create is a Create Action
			Entrance Rules
				if (!ManuallyEntered)						
					BypassActiveCodeBlockEdit	= true		
				include EditTaxCode
			Action Rules
				include UpdateBaseTotals
			Exit Rules

 				include DisplayBaseAmounts			
									
        Update is an Update Action
			Entrance Rules
				constraint (ManuallyEntered)		
					"CannotChangeASystemGeneratedTaxTransaction"
				if (TaxYear changed
				or  TaxPeriod changed)
					constraint (ManuallyEntered)								
						"CannotChangeTaxYearOrPeriodOnASystemGeneratedTaxTransaction"	  
			Action Rules
				include UpdateBaseTotals			
															
        Delete is a Delete Action
			Entrance Rules
				constraint (ManuallyEntered)								
					"CannotDeleteASystemGeneratedTaxTransaction"							
		Purge is a Purge Action
			restricted
			
      	CreateNoValidate is a Create Action
        	restricted
        	bypass field rules
        	Entrance Rules
        	Action Rules
				if (!ManuallyEntered)						
					BypassActiveCodeBlockEdit	= true		
				include IncrementTransactionId

		FastUpdate is an Update Action
			default label is untranslatable
			restricted
			bypass field rules
































	
		PurchaseAndSalesReportBelgium is a Set Action
			completion message is "PurchaseAndSalesReportBelgiumCompleted"		
			run in background
			Parameters
				PrmCompany						is a GeneralLedgerCompany
					default label is "Company"
		        PrmTaxCalendar					is a TaxCalendar
		        PrmTaxCalendarPeriod			is a TaxCalendarPeriod
		        	default label is "TaxCalendarPeriod"
		        PrmUpdateOption					is Boolean
		        	default label is "Update"
		        PrmRerun						is Boolean
		        	default label is "Rerun"
			Parameter Rules
		        PrmTaxCalendar
		            required
		        PrmTaxCalendarPeriod
		            required
		            if (PrmUpdateOption)
			            constraint (PrmTaxCalendarPeriod.Status.Reported)
			            	"PeriodMustBeReported"
		            if (PrmRerun)
		            	constraint (PrmTaxCalendarPeriod.Status.Reported)
		            		"PeriodNotReported;CannotSelectRerun"
				PrmUpdateOption
					if (PrmUpdateOption)
						constraint (!PrmRerun)
							"CannotRerunAndUpdatePurchaseOrSalesReportAtTheSameTime"
			Local Fields
				LocalInstanceCount				is Numeric 10
				LocalResultView					is a PurchaseAndSalesReportBelgiumOutputHeader view
				Skip							is Boolean
				
			Instance Selection
				where (TaxEntity = PrmTaxCalendar.TaxEntity
				and    TaxPointDate <= PrmTaxCalendarPeriod.PeriodEndDate
				and    TaxYear		= PrmTaxCalendar.TaxYear
				and    TaxPeriod	= PrmTaxCalendarPeriod)
				
			Sort Order
				TaxEntity
                SystemCode
                VoucherNumber
				Invoice
				VendorCustomer
                TaxTransaction
				TaxUsageCode
                TaxCode
			
			Action Rules
				Set Rules
					Entrance Rules
						invoke Create PurchaseAndSalesReportBelgiumOutputHeader
							assign result to LocalResultView
							invoked.FinanceEnterpriseGroup		= PrmTaxCalendar.TaxEntity.FinanceEnterpriseGroup
							invoked.Company 					= PrmCompany
					        invoked.TaxCalendar					= PrmTaxCalendar
					        invoked.TaxCalendarPeriod			= PrmTaxCalendarPeriod
							invoked.UpdateOption				= PrmUpdateOption
							invoked.Rerun 						= PrmRerun

					Exit Rules
						invoke FinishProcessing LocalResultView.PurchaseAndSalesReportBelgiumOutputHeader
					
				Instance Rules
					Skip = false
					if (PrmUpdateOption)
						if (PurchaseOrSalesReport = "Y")
							Skip = true
						if (TaxYear not entered)
							Skip = true
						if (TaxPeriod not entered)
							Skip = true
					if (PrmRerun)
						if (TaxYear entered)
							if (TaxYear != PrmTaxCalendar.TaxYear)
								Skip = true
						if (TaxPeriod entered)
							if (TaxPeriod != PrmTaxCalendarPeriod)
								Skip = true
					if (!PrmRerun
					and !PrmUpdateOption)
						if (TaxYear entered
						and TaxYear != PrmTaxCalendar.TaxYear)
							Skip = true
						if (TaxPeriod entered
						and TaxPeriod != PrmTaxCalendarPeriod)
							Skip = true
						if (PurchaseOrSalesReport = "Y")
							Skip = true

					if (!Skip)
						invoke Create PurchaseAndSalesReportBelgiumOutputDetail
							invoked.FinanceEnterpriseGroup 						= PrmTaxCalendar.TaxEntity.FinanceEnterpriseGroup
							invoked.PurchaseAndSalesReportBelgiumOutputHeader	= LocalResultView.PurchaseAndSalesReportBelgiumOutputHeader
							invoked.Company 									= PrmCompany
							invoked.TaxYear 									= TaxYear
							invoked.TaxPeriod 									= TaxPeriod
							invoked.TaxCode 									= TaxCode
							invoked.VendorCustomer 								= VendorCustomer
							invoked.Invoice 									= Invoice
							invoked.Name 										= Name
							invoked.InvoiceDate 								= InvoiceDate
							invoked.BaseInvoiceAmount 							= BaseInvoiceAmount.BaseAmount.EnteredCurrencyAmount
							invoked.BaseTaxable 								= BaseTaxable.BaseAmount.EnteredCurrencyAmount
							invoked.BaseTaxAmount 								= BaseTaxAmount.BaseAmount.EnteredCurrencyAmount
							invoked.TaxRate 									= TaxRate
							invoked.VATRegistrationCountry 						= VATRegistrationCountry
							invoked.VATRegistrationNumber 						= VATRegistrationNumber
							invoked.TaxUsageCode 								= TaxUsageCode
							invoked.InvoicedOrCreditMemo 						= InvoicedOrCreditMemo
							invoked.Source 										= TransactionSource
							invoked.VATCustomerReportType 						= CompanyCustomerRel.VATCustomerReportType
							invoked.VATType 									= EntityTaxCodeRel.ValueAddedTaxType
	
						if (PrmUpdateOption)
							PurchaseOrSalesReport = "Y"


		TaxHistoryPurge is a Set Action			
			completion message is "<RecordCount>_<RecordsProcessedMessage>"
			run in background		 
			Parameters 
				PrmFinEntGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"			
				PrmTaxEntity		is a TaxEntity
					default label is "TaxEntity"
				PrmSystemCode		is AlphaUpper size 2	 
		            States
		                Billing            value is "BL"
		                BillingAndRevenue  value is "BR"
		                CashLedger         value is "CB"
		                CashReceipts       value is "CR"
		                AccountsPayable    value is "AP"
							default label is "Payables"
		                AccountsReceivable value is "AR"
							default label is "Receivables"
		            default label is "SystemCode"        			
				PrmTaxCode			is a TaxCode	
					default label is "TaxCode"	
				CutOffDateRange is a TaxPointDateRange	 
			Parameter Rules
				PrmFinEntGroup
					initial value is actor.context.FinanceEnterpriseGroup	
					required	
				PrmTaxEntity
					required	
				CutOffDateRange
					if (CutOffDateRange.End not entered)
						required
							"TaxPointEndDateMustBeRequired"
					constraint (CutOffDateRange.End entered)	 
						"TaxPointEndDateMustBeEntered"	
			Local Fields
				CompletionMessage	is Alpha 150
				RecordCount			is Numeric 10
			Instance Selection			
				where (Status 		= 1
				and   (TaxEntity 	= PrmTaxEntity
				and   (CutOffDateRange not entered
				or	  (CutOffDateRange entered
				and	   TaxPointDate within CutOffDateRange))							
			    and   ((PrmSystemCode entered
			    and    PrmSystemCode = SystemCode)							 
			    or     PrmSystemCode not entered))				 				 					 						 
			    and   ((PrmTaxCode entered
			    and    PrmTaxCode = TaxCode)							 
			    or     PrmTaxCode not entered))
			Sort Order

			Accumulators



			Action Rules								
				Empty Set Rules
					CompletionMessage = "PurgeTaxHistoryProcessComplete;NoRecordsFoundToPurge"	 
				
				Set Rules
					Entrance Rules
					Exit Rules
						
				Instance Rules
					increment RecordCount
					invoke Purge	 
	

		JournalizeUnPostedTransactions is a Set Action			

			valid when (TaxCalculationSource.Sabrix)
			completion message is "<RecordCount>_<RecordsProcessedMessage>"

			run in foreground		 
			Parameters 
				PrmFinEntGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"			
				PrmTaxEntity		is a TaxEntity
					default label is "TaxEntity"
				PrmSystemCode		is AlphaUpper size 2	 
		            States
		                Billing            value is "BL"
		                BillingAndRevenue  value is "BR"
		                CashLedger         value is "CB"
		                CashReceipts       value is "CR"
		                AccountsPayable    value is "AP"
							default label is "Payables"
		                AccountsReceivable value is "AR"
							default label is "Receivables"
		            default label is "SystemCode"        			
				PrmTaxCode			is a TaxCode	
					default label is "TaxCode"	
				CutOffDateRange is a TaxPointDateRange	 
			Parameter Rules
				PrmFinEntGroup
					initial value is actor.context.FinanceEnterpriseGroup	
					required	
				PrmTaxEntity
					required	
				CutOffDateRange
					if (CutOffDateRange.End not entered)
						required
							"TaxPointEndDateMustBeRequired"
					constraint (CutOffDateRange.End entered)	 
						"TaxPointEndDateMustBeEntered"	
			Local Fields
				CompletionMessage	is Alpha 150
				RecordCount			is Numeric 10

			Instance Selection			
				where (Status 		= 3
				and   (TaxEntity 	= PrmTaxEntity
				and   (CutOffDateRange not entered
				or	  (CutOffDateRange entered
				and	   TaxPointDate within CutOffDateRange))							
			    and   ((PrmSystemCode entered
			    and    PrmSystemCode = SystemCode)							 
			    or     PrmSystemCode not entered))				 				 					 						 
			    and   ((PrmTaxCode entered
			    and    PrmTaxCode = TaxCode)							 
			    or     PrmTaxCode not entered))
			Sort Order

			Accumulators



			Action Rules								
				Empty Set Rules
					CompletionMessage = "<RecordCount>_<RecordsProcessedMessage>"	 
				
				Set Rules
					Entrance Rules
					Exit Rules
						
				Instance Rules
					if (Status.CreatedNotJournalized)
						increment RecordCount
						include ReTransactionUsingProcessTaxHistory
						
		JournalizeUnPostedTransactionsInstance is an Instance Action

			valid when (TaxCalculationSource.Sabrix)
			completion message is "<RecordCount>_<RecordsProcessedMessage>"
			Local Fields

				RecordCount			is Numeric 10

			Action Rules								
				if (Status.CreatedNotJournalized)
					increment RecordCount
					include ReTransactionUsingProcessTaxHistory
						
		TestUnParseTaxingJurisdiction  is an Instance Action	
			default label is untranslatable 	
			restricted					 
			Action Rules
				initialize JurisdictionText
				include UnParseTaxingJurisdiction		
				JurisdictionText = JurisdictionText + LocalPostalAddress.Municipality + "," + LocalPostalAddress.County + "," + LocalPostalAddress.StateProvince + "," + LocalPostalAddress.Country 
				
		TestCalculateBaseAmounts is an Instance Action	  
			completion message is "BaseAmountSuccessfullyCalculated"	
			default label is untranslatable
			restricted		
			Parameters
				JustClearComment is Boolean
				PrmInitializeCurrencyRate is Boolean
				PrmCurrencyTable is a CurrencyTable
			Local Fields
			Action Rules
				initialize Comment
				initialize SabrixReturnMessages
				LocalInitializeCurrencyRate = PrmInitializeCurrencyRate
				if (PrmCurrencyTable entered)
					LocalCurrencyTable = PrmCurrencyTable

				CurrencyRate = GetConversionRate				
				Comment = Comment + "Begin--------BackToInstanceCall----------------------------"+ "<br>"
				Comment = Comment + "LocalCurrencyRate_returned........:" + LocalCurrencyRate + "<br>" 
				if (JustClearComment)
					display "AllDone"

		UpdateBaseAmounts is an Instance Action	  
			completion message is "BaseAmountSuccessfullyUpdated"	
			default label is untranslatable
			restricted
			Parameters
				TaxBase is Boolean
				TaxableBase is Boolean
				InvoiceBase is Boolean
			Local Fields
			Action Rules
				LocalFromCurrency = TransactionCurrency
				if (FromCurrency not entered)
					FromCurrency = TransactionCurrency
				if (TaxBase)
					initialize BaseTaxAmount.BaseAmount
					BaseTaxAmount.TransactionAmount = TransactionTaxAmount
		
					if (TransactionTaxAmount entered)
						initialize BaseTaxAmount.BaseAmount 
						LocalExchangeDate = TaxPointDate
						LocalFromCurrency = TransactionCurrency
						BaseTaxAmount.BaseAmount.EnteredCurrencyRate = CurrencyRate	
						BaseTaxAmount.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency

					
						LocalOutputCurrencyAmount = BaseTaxAmount.BaseAmount.EnteredCurrencyAmount
						BaseTaxAmount.BaseAmount.EnteredCurrencyAmount = BaseTaxAmount.BaseAmount.OutputCurrencyAmount

				if (TaxableBase)
					initialize BaseTaxable.BaseAmount 
					BaseTaxable.TransactionAmount = TransactionTaxableAmount
					
					if (TransactionTaxableAmount entered)
						LocalExchangeDate = TaxPointDate
						LocalFromCurrency = TransactionCurrency
						BaseTaxable.BaseAmount.EnteredCurrencyRate = CurrencyRate							
						BaseTaxable.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency	
						 
						LocalOutputCurrencyAmount = BaseTaxable.BaseAmount.OutputCurrencyAmount
						BaseTaxable.BaseAmount.EnteredCurrencyAmount = LocalOutputCurrencyAmount	
						
				if (InvoiceBase)
					initialize BaseInvoiceAmount.BaseAmount 
					BaseInvoiceAmount.TransactionAmount = TransactionInvoiceAmount
					
					if (TransactionInvoiceAmount entered)
						LocalExchangeDate = TaxPointDate
						LocalFromCurrency = TransactionCurrency
						BaseInvoiceAmount.BaseAmount.EnteredCurrencyRate = CurrencyRate							
						BaseInvoiceAmount.BaseAmount.ToCurrency = TaxEntity.FunctionalCurrency	
						 
						LocalOutputCurrencyAmount = BaseInvoiceAmount.BaseAmount.OutputCurrencyAmount
						BaseInvoiceAmount.BaseAmount.EnteredCurrencyAmount = LocalOutputCurrencyAmount											

