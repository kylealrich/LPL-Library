PriceBaseItem is a BusinessClass
    owned by bl
    prefix is OEB
    classic name is OEBASE

    Ontology
        symbolic key is PriceBaseItem
            classic set name is OEBSET0
            classic name for InventoryLocation is LOCATION
            classic name for Currency is CURRENCY-CODE
            classic name for PriceBase is BASE-NAME

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields
        LastMultipleSellPriceUnitsOfMeasure		is a SingleOrMultiplePricingUOM
            sql name is LMSellPriceUnitsOfMeasure
            classic name is LAST-MULT-SPR
		LastSellPriceByUOM						is a SellPriceByUOMArray
			classic name for LastSellPriceByUOM.SellPriceByUOM.UnitOfMeasure is LAST-SPR-UOM
			classic name for LastSellPriceByUOM.SellPriceByUOM.UOMMultiplier is LAST-SPR-MULT
			classic name for LastSellPriceByUOM.SellPriceByUOM.SellPriceCode is LAST-SPR-CD
			classic name for LastSellPriceByUOM.SellPriceByUOM.SellPrice is LAST-PRICE
        CurrentEffectiveDate                   is Date
            classic name is CUR-EFF-DATE
        CurrentMultipleSellPriceUnitsOfMeasure is a SingleOrMultiplePricingUOM
            sql name is CMSellPriceUnitsOfMeasure
            classic name is CUR-MULT-SPR
		CurrentSellPriceByUOM					is a SellPriceByUOMArray
			classic name for CurrentSellPriceByUOM.SellPriceByUOM.UnitOfMeasure is CUR-SPR-UOM
			classic name for CurrentSellPriceByUOM.SellPriceByUOM.UOMMultiplier is CUR-SPR-MULT
			classic name for CurrentSellPriceByUOM.SellPriceByUOM.SellPriceCode is CUR-SPR-CD
			classic name for CurrentSellPriceByUOM.SellPriceByUOM.SellPrice is CUR-PRICE
        NextEffectiveDate                      is Date
            classic name is NXT-EFF-DATE
        NextMultipleSellPriceUnitsOfMeasure    is a SingleOrMultiplePricingUOM
            sql name is NMSellPriceUnitsOfMeasure
            classic name is NXT-MULT-SPR
		NextSellPriceByUOM					is a SellPriceByUOMArray
			classic name for NextSellPriceByUOM.SellPriceByUOM.UnitOfMeasure is NXT-SPR-UOM
			classic name for NextSellPriceByUOM.SellPriceByUOM.UOMMultiplier is NXT-SPR-MULT
			classic name for NextSellPriceByUOM.SellPriceByUOM.SellPriceCode is NEXT-SPR-CD
			classic name for NextSellPriceByUOM.SellPriceByUOM.SellPrice is NXT-PRICE
        CurrentPriceIsNoCharge                 is Boolean
            classic name is CURR-NO-CHARGE
        NextPriceIsNoCharge                    is Boolean
            classic name is NEXT-NO-CHARGE
	
	Local Fields
		TempCounter 						is Numeric 2
		
	Derived Fields
		SingleUOM							is a MessageField	
			restricted			
			"SingleUOM"
		
		MultipleUOM							is a MessageField
			restricted				
			"MultipleUOM"
		
		CompletionMessage					is a MessageField
			restricted				
			"UpdateInPrimaryForm"
					
		DerivedSingleOrMultipleUOM			is a DerivedField
			type is MessageField
			if (Item.IsAlternateUOMExists)
				return MultipleUOM
			else
				return SingleUOM
	Conditions
		PriceBaseItemRecordExists
			restricted
			when (PriceBaseItem exists)
						
    Relations
        InventoryCompanyRel
			one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company 		= Company

       	ItemUOMRel
			one-to-many relation to ItemUOM

			Field Mapping uses ByUOMConversion
				related.ItemGroup  		= InventoryCompanyRel.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.ValidForSellPrice.Default
				or 	   related.ValidForSellPrice.Valid)
		
		ItemUOMWithDefaultSellPriceRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup  		= InventoryCompanyRel.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.ValidForSellPrice.Default)
								
    Sets

        Set3
            indexed
            Sort Order
                Company
                PriceBase
                Currency
                InventoryLocation
                Item
        
        ByItem
        	duplicates
        	Sort Order
        		Item
	
    Field Rules
    	Item
    		constraint (ItemUOMWithDefaultSellPriceRel exists)
    			"Item<Item>PricingUnitOfMeasureDoesNotExist"																
			
				
	Actions
		Create is a Create Action

			completion message is "<CompletionMessage>"
			
			Action Rules
				if (Item entered)
					confirmation required
						"Warning,NeedToUpdateInPrimaryFormAfterCreate;Proceed?"
						
				TempCounter = 1
				for each ItemUOMRel
					CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure 	= each.UnitOfMeasure
					CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier 	= each.UOMConversion
					CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode 	= each.ValidForSellPrice

					NextSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure 		= each.UnitOfMeasure	
					NextSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier 		= each.UOMConversion
					NextSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode 		= each.ValidForSellPrice

					TempCounter += 1
				
				LastMultipleSellPriceUnitsOfMeasure = CurrentMultipleSellPriceUnitsOfMeasure
						
				if (TempCounter = 2)
					CurrentMultipleSellPriceUnitsOfMeasure = 0
					NextMultipleSellPriceUnitsOfMeasure    = 0
				else
					CurrentMultipleSellPriceUnitsOfMeasure = 1
					NextMultipleSellPriceUnitsOfMeasure    = 1
				
		T2VCreate is a Create Action				
			restricted 
			default label is untranslatable 
			bypass field rules 
					
		Update is an Update Action
			Field Rules
		    
		        CurrentEffectiveDate
					default to current corporate date
								
		        	constraint (CurrentEffectiveDate <= current corporate date)
						"CurrentEffectiveDateCannotBeGreaterThanToday'sDate"												
		
					if (CurrentEffectiveDate changed
					and old CurrentEffectiveDate entered)
						initialize TempCounter
						if (NextEffectiveDate <= current corporate date)
							LastMultipleSellPriceUnitsOfMeasure = NextMultipleSellPriceUnitsOfMeasure
							while (TempCounter < 10)
								TempCounter += 1
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure = NextSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure 
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier = NextSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode = NextSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice     = NextSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice	
						else
							LastMultipleSellPriceUnitsOfMeasure = CurrentMultipleSellPriceUnitsOfMeasure
							while (TempCounter < 10)
								TempCounter += 1
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure 
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode
								LastSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice     = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice	
								
				NextEffectiveDate
					if (NextSellPriceByUOM.SellPriceByUOM[1].SellPrice entered)     
						required
							"MustEnterNextEffectiveDateWhenPriceIsEntered"													
								    	
					constraint (NextEffectiveDate > current corporate date)
						"NextEffectiveDateMustBeGreaterThanCurrentDate"														
						
				CurrentPriceIsNoCharge
					if (Item.IsAlternateUOMExists)
						initialize TempCounter
						while (TempCounter < 10)
							TempCounter += 1
							if (CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice entered)	
								cannot be entered
									"ItemCannotHaveAPriceAndBeANoChargeItem"												
					else	
						if (CurrentSellPriceByUOM.SellPriceByUOM[1].SellPrice not entered)						
							required
								"CurrentPriceNoChargeMustBeSetForAZeroPriceItem"    										
						else
							cannot be entered
								"ItemCannotHaveAPriceAndBeANoChargeItem"													
						
								
				NextPriceIsNoCharge
					if (Item.IsAlternateUOMExists)
						initialize TempCounter
						while (TempCounter < 10)
							TempCounter += 1
							if (NextSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice entered)	
								cannot be entered
									"ItemCannotHaveAPriceAndBeANoChargeItem"												
					else
						if (NextEffectiveDate not entered)
							cannot be entered
								"CannotEnterNextPriceNoChargeIfNotSettingUpANextPriceForItem"								
						else
							if (NextSellPriceByUOM.SellPriceByUOM[1].SellPrice not entered)
								required
									"NextPriceNoChargeMustBeSetForAZeroPriceItem"											
							else	
								cannot be entered
									"ItemCannotHaveAPriceAndBeANoChargeItem"												
									
																						
				CurrentSellPriceByUOM
					if (Item.IsAlternateUOMExists)
						if (CurrentEffectiveDate entered											
						and !CurrentPriceIsNoCharge)
							initialize TempCounter
							while (TempCounter < 10)
								TempCounter += 1
								if (CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure entered)
									constraint (CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice entered)
										"PriceRequiredWhenEffectiveDateEnteredAndNochargeNotSet"							
								else
									constraint (CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice not entered)
										"CannotEnterPriceWhenUOMIsSpaces"													
										
							 
				NextSellPriceByUOM
					if (Item.IsAlternateUOMExists)
						if (NextEffectiveDate entered
						and !NextPriceIsNoCharge)
							initialize TempCounter
							while (TempCounter < 10)
								TempCounter += 1
								if (NextSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure entered)
									constraint (NextSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice entered)
										"PriceRequiredWhenEffectiveDateEnteredAndNochargeNotSet"							
								else
									constraint (NextSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice not entered)
										"CannotEnterPriceWhenUOMIsSpaces"													
			
					
			Action Rules
				initialize TempCounter
				
				while (TempCounter < 10)
					TempCounter += 1
					LastSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].UnitOfMeasure 
					LastSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].UOMMultiplier
					LastSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPriceCode
					LastSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice     = CurrentSellPriceByUOM.SellPriceByUOM[TempCounter].SellPrice	
			
		
		Delete is a Delete Action
