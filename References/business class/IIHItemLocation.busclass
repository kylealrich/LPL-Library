IIHItemLocation is a BusinessClass
	owned by InventoryIntelligence
	default label is "InventoryIntelligenceItemLocation"
	
	prefix is IIIL
	
	Ontology
		symbolic key is IIHItemLocation
		
	
	Patterns
	
	Persistent Fields
		LocationType                              	is AlphaUpper size 1
            States
                ExchangeCart      value is "E"
                ParLocation       value is "P"
                InventoryLocation value is blank
            disable Auditing
		DefaultTransactionUOM                     	is like UnitOfMeasureEdit
			disable Auditing
        MovementClass                               is AlphaUpper size 1
            States
                MovementClass1 value is "1"
                MovementClass2 value is "2"
                MovementClass3 value is "3"
            disable Auditing
        MovementRank                              	is Numeric size 5
        	disable Auditing
        MinimumOrderQuantity                      	is an UnsignedQuantity
			disable Auditing
			precision is Item.NumberOfDecimalsQuantity
        MaximumOrderQuantity                      	is an UnsignedQuantity
        	disable Auditing
			precision is Item.NumberOfDecimalsQuantity
        ReorderPolicy
        	disable Auditing
        ReorderDocument                           	is AlphaUpper size 1
            States
                NoDocumentCreated         value is "N"
                PurchaseOrder             value is "P"
                Requisition               value is "R"
                IntransitDocument         value is "X"
                TransferDocument          value is "T"
                IssueDocument             value is "I"
                WorkOrder                 value is "W"
            disable Auditing
        ReorderQuantityCode
        	disable Auditing
        ReorderPointCode
        	disable Auditing
        ReorderQuantity                           	is an UnsignedQuantity
			precision is Item.NumberOfDecimalsQuantity
			disable Auditing
			precision is 0
        ReorderPoint                              	is an UnsignedQuantity
			disable Auditing
			precision is Item.NumberOfDecimalsQuantity
        SuggestedReorderPoint                     	is an UnsignedQuantity
			disable Auditing
			precision is Item.NumberOfDecimalsQuantity
        LeadtimeControl                           	is AlphaUpper size 1
            States
                ManuallyEntered  value is "M"
                NeedsReview      value is "R"
                SystemCalculates value is "S"
        	disable Auditing
        LeadtimeDays
        	disable Auditing
        LastLeadtime                              	is a LeadtimeDays
        	disable Auditing
        PreviousLeadtime                          	is a LeadtimeDays
        	disable Auditing
        AutomaticPurchaseOrder                    	is Boolean
        	disable Auditing
        OrderMultiple
        	disable Auditing
        EconomicOrderQuantity                     	is an UnsignedQuantity
			disable Auditing
			precision is Item.NumberOfDecimalsQuantity
        SafetyStock                               	is an UnsignedQuantity
			disable Auditing
			precision is Item.NumberOfDecimalsQuantity
        Manufacturer
        	disable Auditing
        	delete ignored
        ManufacturerNumber
        	disable Auditing
        SelectForSpecialCycleCount                	is Boolean
        	disable Auditing
        LastCountDate                             	is Date
        	disable Auditing
        ForecastNumber
        	disable Auditing
        AddedDate                                 	is Date
        	disable Auditing
        Active                                    	is Boolean
        	disable Auditing
        Consignment                               	is Boolean
        	disable Auditing
        NoCharge                                  	is Boolean
        	disable Auditing
        DefaultSourceUOM                          	is like UnitOfMeasureEdit
        	disable Auditing
        InventoryTracked                          	is Boolean
        	disable Auditing
        PreferredBin                              	is a Bin
        	disable Auditing
            delete ignored
        BinTracked                                	is Boolean
        	disable Auditing
        StandardCost                              	is an InternationalCost
        	disable Auditing
        FutureStandardCost                        	is an InternationalCost
        	disable Auditing
        LastReceiptCost                           	is an InternationalCost
        	disable Auditing
        LastIssueCost                             	is an InternationalCost
        	disable Auditing
        AverageAddOnCost                          	is an InternationalCost
        	disable Auditing
        AverageCost                               	is an InternationalCost
        	disable Auditing
        OverheadUnitCost                          	is an InternationalCost
        	disable Auditing
        UserField1                                	is AlphaUpper size 30
        	disable Auditing
        UserField2
        	disable Auditing
        UserField3                                	is a UserField2
        	disable Auditing
        UserFieldN1                               	is an InternationalCost
        	disable Auditing
        UserFieldN2                               	is an InternationalCost
        	disable Auditing
        UserFieldN3                               	is an InternationalCost
        	disable Auditing


        ReferenceReorderPoint						is like UnsignedQuantity
        	precision is Item.NumberOfDecimalsQuantity
		RecommendationDate							is TimeStamp
		RecommendedReorderPoint					  	is like UnsignedQuantity
			precision is Item.NumberOfDecimalsQuantity
		OverrideReorderPoint					  	is Numeric size 10


		ROPChange									is Decimal size 13.4
		ROPPercentChange							is Unsigned Percent size 13.4

		ReferenceMaxOrder							is like UnsignedQuantity
			precision is Item.NumberOfDecimalsQuantity		
		RecommendedMaxOrder						  	is like UnsignedQuantity
			precision is Item.NumberOfDecimalsQuantity		
		OverrideMaxOrder						  	is Numeric size 10


		MaxOrderChange								is Decimal size 13.4
		MaxOrderPercentChange						is Unsigned Percent size 13.4
		ReferenceReorderQuantity					is like UnsignedQuantity
			precision is Item.NumberOfDecimalsQuantity		
		RecommendedReorderQuantity					is like UnsignedQuantity
			precision is Item.NumberOfDecimalsQuantity		
		OverrideReorderQuantity						is Numeric size 10


		ReorderQuantityChange						is Decimal size 13.4
		ReorderQuantityPercentChange				is Unsigned Percent size 13.4
		ROPDirection								is Numeric size 1
			States
				NotApplicable	value is 0
					default label is "<>"
				Increase		value is 1
				NoChange		value is 2
				Decrease 		value is 3
				
		MODirection									is Numeric size 1
			States
				NotApplicable	value is 0
					default label is "<>"
				Increase		value is 1
				NoChange		value is 2
				Decrease 		value is 3
		ROQDirection									is Numeric size 1
			States
				NotApplicable	value is 0
					default label is "<>"
				Increase		value is 1
				NoChange		value is 2
				Decrease 		value is 3
		Status									  	is Numeric size 1
			States
				None		value is 0
					default label is "<>"
				Review 		value is 1
				Skipped		value is 2
				Approved	value is 3
				Sent		value is 4
		ReviewedBy								  	is an Actor
		SentBy										is an Actor
		SentToSource								is TimeStamp
			default label is "SentToItemLocation"
		OutOfScope									is Boolean

		ValidationResult
		AnalysisDate								is a DateRange
		InventoryValueDifference					is like InternationalAmount
			default label is "InventoryValueChange"
		RemovalCandidate 							is Boolean


        AverageStockOnHand							is like UnsignedQuantity
        	disable Auditing
        AverageDailyIssues							is like UnsignedQuantity
        	disable Auditing
        MaximumDailyIssues							is like UnsignedQuantity
        	disable Auditing
        	precision is 0
        AverageNonZeroIssues						is like UnsignedQuantity
        	disable Auditing
        StockoutDays								is Numeric size 3
        	disable Auditing
		StockoutEvents								is Numeric size 3
			disable Auditing
		Turns										is like UnsignedQuantity 
			disable Auditing
		AverageInventoryCost						is like InternationalCost
        	disable Auditing
		SimulatedAverageInventoryCost				is like InternationalCost
        	disable Auditing
		SimulatedAverageStockOnHand					is like UnsignedQuantity
        	disable Auditing
		ActualServiceLevel							is like UnsignedQuantity
        	disable Auditing
		SimulatedServiceLevel						is like UnsignedQuantity
        	disable Auditing


        AverageDailyDemand							is Decimal 31.6
        	disable Auditing
        MaxDailyReplenishments						is Decimal 31.4
        	disable Auditing
        	precision is 0
        AverageNonZeroDemand						is Decimal 31.6
        	disable Auditing
        TransactionDays								is Numeric size 3
        	disable Auditing
		AverageTransactionDaysPerWeek				is Decimal 31.6
			disable Auditing


        DefaultLeadTime								is a LeadtimeDays
        	disable Auditing
        PurchaseOrderCost							is Decimal 31.6
        	disable Auditing
        ReceivingCost								is Decimal 31.6
        	disable Auditing
        AnalysisType								is Alpha size 50
        	disable Auditing
        FirstIssue									is Date
        	disable Auditing
        LastIssue									is Date
        	disable Auditing
        FirstRecord									is Date
        	disable Auditing
        LastRecord									is Date
        	disable Auditing
        FinalProductCost							is Decimal 18.5
        	disable Auditing
        OrderDays									is Alpha size 250
        	disable Auditing
        ReceivingDays								is Alpha size 250
        	disable Auditing
        ItemType									is Alpha size 8
        	disable Auditing
        PrimaryVendorId								is like Vendor
        	disable Auditing
        PrimaryVendorName							is a VendorName 
        	holds pii
        	disable Auditing
        PrimarySourceCompany						is like InventoryCompany
        	disable Auditing
        PrimarySourceLocation						is like InventoryLocation
        	disable Auditing
        MedianLeadTime								is Numeric size 10
        	disable Auditing
        LeadTimeDataPoints							is Numeric size 10
        	disable Auditing
        LeadTimePeriods								is Numeric size 10
        	disable Auditing
        HoldingCost									is Decimal size 31.6
        	disable Auditing
        HoldingCostPercent							is Decimal size 31.6
        	disable Auditing
        RecommendedAverageSOHChange					is Decimal size 31.6
        	disable Auditing
        RecommendedOrdersCountChange				is Decimal size 31.6
        	disable Auditing
        RecommendedTurnsCountChange					is Decimal size 31.6
        	disable Auditing
        TotalCostSavings							is Decimal size 31.6
        	disable Auditing
        EconomicOrderQuantityMaxOrder				is Decimal size 31.6
        	disable Auditing

		ParLevelDaily								is like UnsignedQuantity
			disable Auditing
		ParLevelBiweekly							is like UnsignedQuantity
			disable Auditing
			default label is "ParLevelSemiweekly"
		ParLevelWeekly								is like UnsignedQuantity
			disable Auditing
		NetReplenishments							is Decimal 31.4
			disable Auditing
		TotalReceipts								is Numeric size 10
			disable Auditing
		TotalPicks									is Numeric size 10
			disable Auditing
		TotalIssues									is Numeric size 10
			disable Auditing
		TotalReplenishments							is Numeric size 10
			disable Auditing
		DaysofSupply								is Decimal 31.6
			disable Auditing
			restricted

		WeeksCount									is Numeric size 10
			disable Auditing
			default label is "WeeksCountItemPresent"      
		TotalInventoryCost							is Decimal size 31.10
			disable Auditing   
		TotalNetDemand								is Decimal size 31.4
			disable Auditing
		TotalNetPicks								is Decimal size 31.4
			disable Auditing
		TotalNetReceipts							is Decimal size 31.6
			disable Auditing
			
		OrderDaysSchedule							is a WeekDaysFlag
		ReceivingDaysSchedule						is Numeric size 1
			States
				MondayThruFriday value is 1
				Everyday		 value is 2
		TargetDaysBetweenOrders						is Decimal size 13.4
		NumberOfBins								is Numeric 6
		GraphGapsFilled								is Boolean
		Discontinued								is Boolean
		StockQuantityPrediction						is Decimal size 13.4
		DemandQuantityPrediction					is Decimal size 13.4
		
		ItemReferenceInventoryValue 		is like InternationalAmount
			default label is "ReferenceInventoryValue"
		ItemTargetInventoryValue 			is like InternationalAmount
			default label is "TargetInventoryValue"
		ItemCurrentInventoryValue			is like InternationalAmount
			default label is "CurrentInventoryValue"
		LowerBound									is Decimal size 13.4
		UpperBound									is Decimal size 13.4
		
		
	Transient Fields
		InScope	is Boolean
			derive value from DerivedInScope
	
	Local Fields
		
		LInitializeOverride		is Boolean
		LInitializeReReview		is Boolean
		LocalRuleErrorNumber	is Numeric size 3
		LocalErrorNumber        is Numeric size 3
		LocalReorderPoint		is an UnsignedQuantity
		LocalMaxOrder			is an UnsignedQuantity
		LocalReorderQuantity			is like UnsignedQuantity
		PreviousTargetReorderPoint		is like UnsignedQuantity
		PreviousTargetMaxOrderQuantity	is like UnsignedQuantity
		PreviousTargetOrderQuantity 	is Decimal size 13.4
		PreviousTargetInventoryValue 	is like InternationalAmount
		PreviousReferenceInventoryValue is like InternationalAmount
		PreviousInventoryValueChange	is like InternationalAmount
		PreviousROPDirection	is Numeric size 1
			States
				NotApplicable	value is 0
					default label is "<>"
				Increase		value is 1
				NoChange		value is 2
				Decrease 		value is 3
		LatestProcessResult				is like InventoryIntelligenceProcessResult
		LocalDifference					is like UnsignedQuantity
		LocalLocationGroup				is a IIHLocationGroup
		
		
	Rule Blocks
		InitializeRecommendationFields
			initialize RecommendationDate

			initialize RecommendedReorderPoint
			initialize OverrideReorderPoint
			initialize ROPChange
			initialize ROPPercentChange
			initialize ROPDirection

			initialize RecommendedMaxOrder
			initialize OverrideMaxOrder
			initialize MaxOrderChange
			initialize MaxOrderPercentChange
			initialize MODirection
			initialize RecommendedReorderQuantity
			initialize OverrideReorderQuantity
			initialize ReorderQuantityChange
			initialize ReorderQuantityPercentChange
			initialize ROQDirection
			initialize ReviewedBy
			initialize ValidationResult
			initialize AnalysisDate
			initialize InventoryValueDifference
		
		ProcessSkipFlag
			if (PrmUseExtendedData)
				if (IsPerpetualLocation)
					if (IIHItemLocationExtendedRel.RecommendedReorderPoint not entered
					and IIHItemLocationExtendedRel.RecommendedMaxOrder not entered
					and IIHItemLocationExtendedRel.RecommendedReorderQuantity not entered)
						Skip = true
				else
				if (IsParLocation)
					if (IIHItemLocationExtendedRel.RecommendedReorderPoint not entered)
						Skip = true
			else
				if (IsPerpetualLocation)
					if (PrmRecommendedReorderPoint not entered
					and PrmRecommendedMaxOrder not entered
					and PrmRecommendedReorderQuantity not entered)
						Skip = true
				else
				if (IsParLocation)
					if (PrmRecommendedReorderPoint not entered)
						Skip = true
	
		SetRecommendedDetailFromExtendedReference
			RecommendedReorderPoint 		= IIHItemLocationExtendedRel.RecommendedReorderPoint
			if (IsPerpetualLocation)
				RecommendedMaxOrder 		= IIHItemLocationExtendedRel.RecommendedMaxOrder
				RecommendedReorderQuantity	= IIHItemLocationExtendedRel.RecommendedReorderQuantity
			if (IIHItemLocationExtendedRel.RecommendationDate not entered)
				RecommendationDate 			= current timestamp
			else
				RecommendationDate 			= IIHItemLocationExtendedRel.RecommendationDate
			AnalysisType 					= IIHItemLocationExtendedRel.AnalysisType				
			RecommendedAverageSOHChange 	= IIHItemLocationExtendedRel.RecommendedAverageSOHChange
			RecommendedOrdersCountChange 	= IIHItemLocationExtendedRel.RecommendedOrdersCountChange
			RecommendedTurnsCountChange 	= IIHItemLocationExtendedRel.RecommendedTurnsCountChange
			TotalCostSavings 				= IIHItemLocationExtendedRel.TotalCostSavings
			EconomicOrderQuantityMaxOrder 	= IIHItemLocationExtendedRel.EconomicOrderQuantityMaxOrder
			TargetDaysBetweenOrders			= IIHItemLocationExtendedRel.TargetDaysBetweenOrders
			

		
		SetRecommendedDetailFromParameters
			RecommendedReorderPoint 		= PrmRecommendedReorderPoint
			if (IsPerpetualLocation)
				RecommendedMaxOrder 		= PrmRecommendedMaxOrder
				RecommendedReorderQuantity	= PrmRecommendedReorderQuantity
			RecommendationDate 				= PrmRecommendationDate
			AnalysisType 					= PrmAnalysisType				
			RecommendedAverageSOHChange 	= PrmRecommendedAverageSOHChange
			RecommendedOrdersCountChange 	= PrmRecommendedOrdersCountChange
			RecommendedTurnsCountChange 	= PrmRecommendedTurnsCountChange
			TotalCostSavings 				= PrmTotalCostSavings
			EconomicOrderQuantityMaxOrder 	= PrmEconomicOrderQuantityMaxOrder
		
		UpdateLastReferenceValues
			ReferenceReorderPoint	= ReorderPoint
			ReferenceMaxOrder		= MaximumOrderQuantity
			ReferenceReorderQuantity= ReorderQuantity 
		
		EvaluateChange
			ROPChange 				= DerivedROPChange
			ROPPercentChange 		= DerivedROPPercentChange
			MaxOrderChange 			= DerivedMaxOrderChange
			MaxOrderPercentChange 	= DerivedMaxOrderPercentChange
			ReorderQuantityChange 			= DerivedReorderQuantityChange
			ReorderQuantityPercentChange 	= DerivedReorderQuantityPercentChange
			InventoryValueDifference = InventoryValueChange
		
		UpdateROPDirection
			if (HasReorderRecommendations)	
				if (OverrideReorderPoint > 0)
					LocalReorderPoint = OverrideReorderPoint
				else
				if (RecommendedReorderPoint > 0)
					LocalReorderPoint = RecommendedReorderPoint

				if (LocalReorderPoint = ItemLocationRel.ReorderPoint)
					ROPDirection = ROPDirection.NoChange
				else
				if (LocalReorderPoint > ItemLocationRel.ReorderPoint)
					ROPDirection = ROPDirection.Increase
				else
				if (LocalReorderPoint < ItemLocationRel.ReorderPoint)
					ROPDirection = ROPDirection.Decrease
			else
				ROPDirection = ROPDirection.NotApplicable
	
		UpdateMODirection
			if (HasMaxOrderRecommendations)
				if (OverrideMaxOrder > 0)
					LocalMaxOrder = OverrideMaxOrder
				else
				if (RecommendedMaxOrder > 0)
					LocalMaxOrder = RecommendedMaxOrder

				if (LocalMaxOrder = ItemLocationRel.MaximumOrderQuantity)
					MODirection = MODirection.NoChange
				else
				if (LocalMaxOrder > ItemLocationRel.MaximumOrderQuantity)
					MODirection = MODirection.Increase
				else
				if (LocalMaxOrder < ItemLocationRel.MaximumOrderQuantity)
					MODirection = MODirection.Decrease
			else
				MODirection = MODirection.NotApplicable
		
		UpdateROQDirection
			if (HasReorderQuantityRecommendations)
				if (OverrideReorderQuantity > 0)
					LocalReorderQuantity = OverrideReorderQuantity
				else
				if (RecommendedReorderQuantity > 0)
					LocalReorderQuantity = RecommendedReorderQuantity

				if (LocalReorderQuantity = ItemLocationRel.ReorderQuantity)
					ROQDirection = ROQDirection.NoChange
				else
				if (LocalReorderQuantity > ItemLocationRel.ReorderQuantity)
					ROQDirection = ROQDirection.Increase
				else
				if (LocalReorderQuantity < ItemLocationRel.ReorderQuantity)
					ROQDirection = ROQDirection.Decrease
			else
				ROQDirection = ROQDirection.NotApplicable
	
		ValidateRules
			initialize LocalRuleErrorNumber
			if (!HasRecommendations
			and SentToSource entered)
				LocalRuleErrorNumber = 203
			
			if (IsPerpetualLocation)
				if (ReorderQuantityCode.OrderUpToMaximumLevel
				or  ReorderQuantityCode not entered)
					if (ApplicableMaxOrderQuantity > 0
					and ApplicableReorderPoint > 0)
						if (ApplicableReorderPoint > ApplicableMaxOrderQuantity)
							LocalRuleErrorNumber = 201
			else
			if (IsParLocation)
				if (MinimumOrderQuantity > 0
				and ApplicableParLevel > 0)
					if (ApplicableParLevel <= MinimumOrderQuantity)
						LocalRuleErrorNumber = 202
						
		ValidateForApproveOrSend
			initialize LocalErrorNumber
			if (Item.StockUOM != IIHItemRel.StockUOM)		
				LocalErrorNumber = 204
			else
			if (IIHItemReplenishmentSourceRel exists)
				LocalErrorNumber = 205
			else
			if (ItemLocationRel.DefaultSourceUOM != DefaultSourceUOM)
				LocalErrorNumber = 206
			else
			if (ItemLocationRel.Discontinued != Discontinued)
				LocalErrorNumber = 207
			else
			if (Item.Discontinued != IIHItemRel.Discontinued)
				LocalErrorNumber = 208
			else
			if (ItemLocationRel.Active != Active)
				LocalErrorNumber = 209
			else
			if (Item.Active != IIHItemRel.Active)
				LocalErrorNumber = 210
			else
			if (ItemLocationRel.ReorderQuantityCode != ReorderQuantityCode)
				LocalErrorNumber = 211
				
		ValidationsForApproveOrSend
			constraint (Item.StockUOM = IIHItemRel.StockUOM)
				"StockUOMChangedOnItem;PleaseRunReplication"
					
			constraint (IIHItemReplenishmentSourceRel not exists)
				"DefaultTransactionUOMChangedOnSourceItemLocation;PleaseRunReplication"
						
			constraint (ItemLocationRel.DefaultSourceUOM = DefaultSourceUOM)
				"DefaultSourceUOMChangedOnItemLocation;PleaseRunReplication"
				
			constraint (ItemLocationRel.Discontinued = Discontinued)
				"ItemLocationDiscontinued;PleaseRunReplication"
				
			constraint (Item.Discontinued = IIHItemRel.Discontinued)
				"ItemDiscontinued;PleaseRunReplication"
		
			constraint (ItemLocationRel.Active = Active)
				"ItemLocationInactive;PleaseRunReplication"
				
			constraint (Item.Active = IIHItemRel.Active)
				"ItemInactive;PleaseRunReplication"
				
			constraint (ItemLocationRel.ReorderQuantityCode = ReorderQuantityCode)
				"ReorderQuantityCodeChanged;PleaseRunReplication"
				
		UpdateInventoryValues
			ItemReferenceInventoryValue 	= ReferenceInventoryValue
			ItemTargetInventoryValue 		= TargetInventoryValue
			ItemCurrentInventoryValue		= CurrentInventoryValue
			InventoryValueDifference 		= InventoryValueChange
				
	Field Rules
		OverrideReorderPoint
			if (OverrideNotAllowed)
				cannot be changed
					"CannotChangePostReview"
			if (OverrideReorderPoint entered and NumberOfBins > 0 and IsParOrExchangeCart)
				constraint ((OverrideReorderPoint % NumberOfBins) = 0)
					"OverrideROPMustBeAMultipleOfTheNumberOfBins"
			if (OverrideReorderPoint entered)
				constraint (OverrideReorderPoint < 1000000000)
					"ShouldNotBeGreaterThan9DigitNumber"
				constraint (OverrideReorderPoint > 0)
					"MustBeAPositiveValue"
				if (Status.None)
					invoke RecommendUsingOverride
			else
			if (OverrideReorderPoint changed
			and OverrideReorderPoint not entered)
				if (Status.Review)
					if (RecommendedReorderPoint entered)
						initialize OverrideReorderPoint
						include ValidateRules
						if (LocalRuleErrorNumber entered)
							ValidationResult = LocalRuleErrorNumber
						else
							initialize ValidationResult
			
		OverrideMaxOrder
			if (OverrideNotAllowed)
				cannot be changed
					"CannotChangePostReview"
			if (OverrideMaxOrder entered and NumberOfBins > 0)
				constraint ((OverrideMaxOrder % NumberOfBins) = 0)
					"OverrideMaxOrderMustBeAMultipleOfTheNumberOfBins"
			if (OverrideMaxOrder entered)
				constraint (OverrideMaxOrder < 1000000000)
					"ShouldNotBeGreaterThan9DigitNumer"
				constraint (OverrideMaxOrder > 0)
					"MustBeAPositiveValue"
				if (Status.None)
					invoke RecommendUsingOverride
			else
			if (OverrideMaxOrder changed
			and OverrideMaxOrder not entered)
				if (Status.Review)
					if (IsPerpetualLocation)
						if (RecommendedMaxOrder entered)
							initialize OverrideMaxOrder
							include ValidateRules
							if (LocalRuleErrorNumber entered)
								ValidationResult = LocalRuleErrorNumber
							else
								initialize ValidationResult
		
		OverrideReorderQuantity
			if (OverrideNotAllowed)
				cannot be changed
					"CannotChangePostReview"
			if (OverrideReorderQuantity entered and NumberOfBins > 0)
				constraint ((OverrideReorderQuantity  % NumberOfBins) = 0)
					"OverrideReorderQuantityMustBeAMultipleOfTheNumberOfBins"
			if (OverrideReorderQuantity  entered)
				constraint (OverrideReorderQuantity  < 1000000000)
					"ShouldNotBeGreaterThan9DigitNumer"
				constraint (OverrideReorderQuantity  > 0)
					"MustBeAPositiveValue"
				if (Status.None)
					invoke RecommendUsingOverride
			else
			if (OverrideReorderQuantity  changed
			and OverrideReorderQuantity  not entered)
				if (Status.Review)
					if (IsPerpetualLocation)
						if (RecommendedReorderQuantity entered)
							initialize OverrideReorderQuantity 
							include ValidateRules
							if (LocalRuleErrorNumber entered)
								ValidationResult = LocalRuleErrorNumber
							else
								initialize ValidationResult
		
	Conditions
		
		HasValidationErrors
			when (ValidationResult entered)
		
		OverrideNotAllowed
			when (!ReviewOrNone)
			
		ReviewOrNone
			when (Status.Review
			or    Status.None)
		
		NoRecommendation
			when (Status.None)

		HasRecommendations
			when (HasReorderRecommendations
			or    HasMaxOrderRecommendations
			or	  HasReorderQuantityRecommendations)

		HasReorderRecommendations
			when (RecommendedReorderPoint entered
			or    OverrideReorderPoint entered)
	
		HasMaxOrderRecommendations
			when (RecommendedMaxOrder entered
			or    OverrideMaxOrder entered)
		
		HasReorderQuantityRecommendations
			restricted
			when (RecommendedReorderQuantity entered
			or    OverrideReorderQuantity entered)
	
		HasExtendedData
			when (IIHItemLocationExtendedRel exists)
			
		ActiveLocation
			when (InventoryLocation exists
			and   InventoryLocation.Status.Active)

		IsParLocation
			when (InventoryLocation.LocationType = "P")
			
		IsParOrExchangeCart
            restricted
            when (InventoryLocation.LocationType = "P"
            or    InventoryLocation.LocationType = "E")
			
		IsPerpetualLocation
			when (InventoryLocation.LocationType = blank)
			
		ReorderPointEntered
			when (ReorderPoint entered)
			
		ReferenceReorderPointEntered
			when (ReferenceReorderPoint entered)
			
		CurrentReorderPointEntered
			when (ItemLocationRel.ReorderPoint entered)
		
		MaximumOrderQuantityEntered
			when (MaximumOrderQuantity entered)
			
		ReferenceMaxOrderEntered
			when (ReferenceMaxOrder entered)
			
		CurrentMaxOrderEntered
			when (ItemLocationRel.MaximumOrderQuantity entered)
		
		AverageStockOnHandEntered
			when (AverageStockOnHand entered)
			
		MaximumDailyIssuesEntered
			when (MaximumDailyIssues entered)
			
		AverageNonZeroIssuesEntered
			when (AverageNonZeroIssues entered)
			
		StockoutDaysEntered
			when (StockoutDays entered)
			
		StockoutEventsEntered
			when (StockoutEvents entered)

		AverageDailyIssuesEntered
			when (AverageDailyIssues entered)
			
		TurnsEntered
			when (Turns entered)
			
		SimulatedAvgSOHEntered
			when (SimulatedAverageStockOnHand entered)
			
		AvgSOHPercentChangeEntered
			when (AvgStockOnHandPercentChange entered)
			
		AverageInventoryCostEntered
			when (AverageInventoryCost entered)
			
		SimulatedAvgInventoryCostEntered
			when (SimulatedAverageInventoryCost entered)
			
		AvgInventoryCostPercentChangeEntered
			when (AvgInventoryCostPercentChange entered)
			
		ActualServiceLevelEntered
			when (ActualServiceLevel entered)
			
		SimulatedServiceLevelEntered
			when (SimulatedServiceLevel entered)
			
		ServiceLevelChangeEntered
			when (ServiceLevelChange entered)
						
		RecommendedReorderPointEntered
			when (RecommendedReorderPoint entered)
			
		AverageDailyDemandEntered
			when (AverageDailyDemand entered)
			
		MaxDailyReplenishmentsEntered
			when (MaxDailyReplenishments entered)
			
		AverageNonZeroDemandEntered
			when (AverageNonZeroDemand entered)
			
		TransactionDaysEntered
			when (TransactionDays entered)
			
		AverageTransactionDaysPerWeekEntered
			when (AverageTransactionDaysPerWeek entered)
			
		ROPChangeEntered
			when (ROPChange entered)
		
		ROPPercentChangeEntered
			when (ROPPercentChange entered)
			
		RecommendedMaxOrderEntered
			when (RecommendedMaxOrder entered)
			
		MaxOrderChangeEntered
			when (MaxOrderChange entered)
			
		MaxOrderPercentChangeEntered
			when (MaxOrderPercentChange entered)
			
		ROPDirectionEntered
			when (ROPDirection entered)
			
		MODirectionEntered
			when (MODirection entered)

		ReferenceReorderQuantityEntered
			restricted
			when (ReferenceReorderQuantity entered)

		RecommendedReorderQuantityEntered
			restricted
			when (RecommendedReorderQuantity entered)
		
		ROQDirectionEntered
			restricted
			when (ROQDirection entered)
		
		ReorderQuantityChangeEntered
			restricted
			when (ReorderQuantityChange entered)
		
		ReorderQuantityPercentChangeEntered
			restricted
			when (ReorderQuantityPercentChange entered)

		CurrentReorderQuantityEntered
			restricted
			when (ItemLocationRel.ReorderQuantity entered)
		
		AllowMoveToInScope
			when (EditAccess
			and	OutOfScope entered)
		
		AllowMoveToOutOfScope
			when (EditAccess
			and	OutOfScope not entered)
			
		AllowApprove
			when (EditAccess
			and	  ValidationResult not entered)
		
		ValidForInventoryValuation
			when (Active)



			
		ConsignmentInValuationCheck
			when (!Consignment
			or   (Consignment
			and    IIHGlobalConfigurationRel.ConsignmentInValuation))
			
		FillGraphGaps
			when (IIHDailyDataRel exists
			and !GraphGapsFilled)

		ProcessorWithViewOrEditAccess            
			restricted
			when (ProcessorWithViewOrEditAccessRel exists)

		OutOfBounds
			restricted
			when (LowerBoundViolation
			or UpperBoundViolation)

		LowerBoundViolation
			restricted
			when (LowerBound entered
			and (ApplicableReorderPoint < LowerBound))
		
		UpperBoundViolation
			restricted
			when (UpperBound entered
			and (ApplicableReorderPoint > UpperBound))

		OutOfBoundsAndEditAccess
			restricted
			when (OutOfBounds
			and EditAccess)

		EditAccess
			restricted
			when (ProcessorWithViewOrEditAccessRel.Access.Edit
			or (InventoryIntelligenceProcessorRel not exists
			and IIHGlobalConfigurationRel.DefaultGlobalAccess.Edit)) 

		ViewAccess
			restricted
			when (ProcessorWithViewOrEditAccess 
			or (InventoryIntelligenceProcessorRel not exists
			and (IIHGlobalConfigurationRel.DefaultGlobalAccess.Edit
			or IIHGlobalConfigurationRel.DefaultGlobalAccess.View)))

		FixedReorderQuantity
			restricted
			when (IIHItemLocationRel.ReorderQuantityCode.FixedReorderQuantity)
		
		OrderUpToMaximumLevel
			restricted
			when (IIHItemLocationRel.ReorderQuantityCode.OrderUpToMaximumLevel)
	
	Derived Fields
	
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforIIHItemLocation"
			
		ContextMessageText is a MessageField
			restricted
			"Item<Item>InventoryLocation<InventoryLocation>"
			
		DailyDataLatest 				is a DerivedField
    		type is Date
    		return (last IIHDailyDataRel.IIHDailyData)
    		
		CompanyAndLocationViewDisplay	is a LabelField
			"Company:<Company>_Location:<InventoryLocation>"
	
		ItemCardViewDisplay	   			is a LabelField
			"Item:<Item>,_<Item.Description>"
			
		CompanyDisplay	is a LabelField
			"Company:<Company>"
			
		InventoryLocationDisplay	is a LabelField
			"Location:<InventoryLocation>"
	
		ItemDisplay	   			is a LabelField
			"Item:<Item>"
		
		AverageStockOnHandDisplay		is a LabelField
			"AverageStockOnHand:<AverageStockOnHand>"
	
		AverageDailyIssuesDisplay		is a LabelField
			"AverageDailyIssues:<AverageDailyIssues>"
		
		MaximumDailyIssuesDisplay		is a LabelField
			"MaximumDailyIssues:<MaximumDailyIssues>"
		
		AverageNonZeroIssuesDisplay		is a LabelField
			"AverageNonZeroIssues:<AverageNonZeroIssues>"
		
		StockoutsDisplay				is a LabelField
			"Stockouts:<StockoutDays>_\days,<StockoutEvents>_\events"
		


		
		TurnsDisplay					is a LabelField
			"Turns:<Turns>"
			
		TotalLocationsCountDisplay		is a LabelField
			"TotalLocationsCount:<Item.TotalLocationsCount>"
		
		AverageDailyDemandDisplay				is a LabelField
			"AverageDailyDemand:<AverageDailyDemand>"
			
        MaxDailyReplenishmentsDisplay			is a LabelField
        	"MaxDailyReplenishments:<MaxDailyReplenishments>"
        	
        AverageNonZeroDemandDisplay				is a LabelField
        	"AverageNonZeroDemand:<AverageNonZeroDemand>"
        	
        TransactionDaysDisplay					is a LabelField
        	"TransactionDays:<TransactionDays>"
        	
		AverageTransactionDaysPerWeekDisplay	is a LabelField
			"AverageTransactionDaysPerWeek:<AverageTransactionDaysPerWeek>"
		
		ApplicableReorderPoint is a DerivedField
			type is like UnsignedQuantity
			if (OverrideReorderPoint entered)
				return OverrideReorderPoint
			else
			if (RecommendedReorderPoint entered)
				return RecommendedReorderPoint
			else
			if (ReorderPoint entered)
				return ReorderPoint
			return blank
		
		ApplicableParLevel is a DerivedField
			type is like UnsignedQuantity
			if (OverrideReorderPoint entered)
				return OverrideReorderPoint
			else
			if (RecommendedReorderPoint entered)
				return RecommendedReorderPoint
			return blank
			
		ApplicableMaxOrderQuantity is a DerivedField
			type is like UnsignedQuantity
			if (OverrideMaxOrder entered)
				return OverrideMaxOrder
			else
			if (RecommendedMaxOrder entered)
				return RecommendedMaxOrder
			else
			if (MaximumOrderQuantity entered)
				return MaximumOrderQuantity
			return blank
	
		IIHItemLocationDisplay is a StringField
			type is AlphaUpper size 50
			Company
			"::"
			InventoryLocation
			"::"
			Item
		
		DerivedROPChange is a DerivedField
			type is Decimal size 13.4
			if (HasReorderRecommendations)
				if (OverrideReorderPoint > 0)
					return (OverrideReorderPoint - ItemLocationRel.ReorderPoint)
				else
					return (RecommendedReorderPoint - ItemLocationRel.ReorderPoint)
			else
				return blank
		
		DerivedROPPercentChange is a DerivedField
			type is Percent size 13.4
			if (HasReorderRecommendations)
				if (ItemLocationRel.ReorderPoint > 0)
					if (ROPChange < 0)
						return (-1 * (ROPChange/ItemLocationRel.ReorderPoint))
					else
						return ROPChange/ItemLocationRel.ReorderPoint
				else
					return blank
			else
				return blank
		 
		DerivedMaxOrderChange is a DerivedField
			type is Decimal size 13.4
			if (HasMaxOrderRecommendations)
				if (OverrideMaxOrder > 0)
					return (OverrideMaxOrder - ItemLocationRel.MaximumOrderQuantity)
				else
					return (RecommendedMaxOrder - ItemLocationRel.MaximumOrderQuantity)
			else
				return blank
		 
		DerivedMaxOrderPercentChange is a DerivedField
			type is Percent size 13.4
			if (HasMaxOrderRecommendations)
				if (ItemLocationRel.MaximumOrderQuantity > 0)
					if (MaxOrderChange < 0)
						return (-1 * (MaxOrderChange/ItemLocationRel.MaximumOrderQuantity))
					else
						return MaxOrderChange/ItemLocationRel.MaximumOrderQuantity
				else
					return blank
			else
				return blank

		DerivedReorderQuantityChange is a DerivedField
			type is Decimal size 13.4
			if (HasReorderQuantityRecommendations)
				if (OverrideReorderQuantity > 0)
					return (OverrideReorderQuantity - ItemLocationRel.ReorderQuantity)
				else
					return (RecommendedReorderQuantity - ItemLocationRel.ReorderQuantity)
			else
				return blank
		 
		DerivedReorderQuantityPercentChange is a DerivedField
			type is Percent size 13.4
			if (HasReorderQuantityRecommendations)
				if (ItemLocationRel.ReorderQuantity > 0)
					if (ReorderQuantityChange < 0)
						return (-1 * (ReorderQuantityChange/ItemLocationRel.ReorderQuantity))
					else
						return ReorderQuantityChange/ItemLocationRel.ReorderQuantity
				else
					return blank
			else
				return blank
				
		AvgStockOnHandPercentChange is a DerivedField
			type is Decimal size 13.4
			if (AverageStockOnHand > 0 and SimulatedAverageStockOnHand > 0)
				return ((SimulatedAverageStockOnHand - AverageStockOnHand)/AverageStockOnHand)
			else
				return blank
				
		AvgInventoryCostPercentChange is a DerivedField
			type is Decimal size 21.8
			if (AverageInventoryCost > 0 and SimulatedAverageInventoryCost > 0)
				return ((SimulatedAverageInventoryCost - AverageInventoryCost)/AverageInventoryCost)
			else
				return blank
				
		ServiceLevelChange is a DerivedField
			type is Decimal size 13.4
			if (ActualServiceLevel > 0 and SimulatedServiceLevel > 0)
				return (SimulatedServiceLevel - ActualServiceLevel)
			else
				return blank
			
		RuleErrorMessage201 is a MessageField
			restricted
			"MaxOrderMustNotBeLessThanReorderPoint"
			
		RuleErrorMessage202 is a MessageField
			restricted
			"ApplicableParLevelMustBeGreaterThanMinimumOrder"
			
		RuleErrorMessage203 is a MessageField
			restricted
			"ItemWasSentToItemLocationAndDoesNotHaveARecommendationOrOverride"
		
		RuleErrorMessage204 is a MessageField
			restricted	
			"StockUOMChangedOnItem;PleaseRunReplication"
		
		RuleErrorMessage205 is a MessageField
			restricted
			"DefaultTransactionUOMChangedOnSourceItemLocation;PleaseRunReplication"
			
		RuleErrorMessage206 is a MessageField
			restricted	
			"DefaultSourceUOMChangedOnItemLocation;PleaseRunReplication"
			
		RuleErrorMessage207 is a MessageField
			restricted	
			"ItemLocationDiscontinued;PleaseRunReplication"
		
		RuleErrorMessage208 is a MessageField
			restricted	
			"ItemDiscontinued;PleaseRunReplication"
	
		RuleErrorMessage209 is a MessageField
			restricted	
			"ItemLocationInactive;PleaseRunReplication"
			
		RuleErrorMessage210 is a MessageField
			restricted
			"ItemInactive;PleaseRunReplication"
			
		RuleErrorMessage211 is a MessageField
			restricted
			"ReorderQuantityCodeChanged;PleaseRunReplication"
		
		DerivedValidationResult is a DerivedField
			type is MessageField
			if (ValidationResult = 201)
				return RuleErrorMessage201
			if (ValidationResult = 202)
				return RuleErrorMessage202
			if (ValidationResult = 203)
				return RuleErrorMessage203
			if (ValidationResult = 204)
				return RuleErrorMessage204
			if (ValidationResult = 204)
				return RuleErrorMessage204
			if (ValidationResult = 205)
				return RuleErrorMessage205
			if (ValidationResult = 206)
				return RuleErrorMessage206
			if (ValidationResult = 207)
				return RuleErrorMessage207
			if (ValidationResult = 208)
				return RuleErrorMessage208
			if (ValidationResult = 209)
				return RuleErrorMessage209
			if (ValidationResult = 210)
				return RuleErrorMessage210
			if (ValidationResult = 211)
				return RuleErrorMessage211
			return blank
		
		DerivedOverrideReorderPoint is a DerivedField
			type is Alpha size 20
			if (OverrideReorderPoint not entered)
				return blank
			else
				return OverrideReorderPoint
		
		DerivedOverrideMaxOrder is a DerivedField
			type is Alpha size 20
			if (OverrideMaxOrder not entered)
				return blank
			else
				return OverrideMaxOrder
		
		ReferenceDaysOfSupply is a DerivedField
			type is Decimal size 13.2
			if (IsPerpetualLocation)
				if (AverageDailyIssues > 0)
					return (ReferenceReorderPoint/AverageDailyIssues)
				else
					return blank
			else
			if (AverageDailyDemand > 0)
				return (ReferenceReorderPoint * ParMultiplier/AverageDailyDemand)
			else
				return blank
				
		CurrentDaysOfSupply is a DerivedField
			type is Decimal size 13.2
			if (IsPerpetualLocation)
				if (AverageDailyIssues > 0)
					return (ItemLocationRel.ReorderPoint/AverageDailyIssues)
				else
					return blank
			else
			if (AverageDailyDemand > 0)
				return (ItemLocationRel.ReorderPoint * ParMultiplier/AverageDailyDemand)
			else
				return blank
			
				
		TargetDaysOfSupply is a DerivedField
			type is Decimal size 13.2
			if (IsPerpetualLocation)
				if (AverageDailyIssues > 0 and (OverrideReorderPoint entered or RecommendedReorderPoint entered))
					return (TargetReorderPoint/AverageDailyIssues)
				else
					return blank
			else
			if (AverageDailyDemand > 0 and (OverrideReorderPoint entered or RecommendedReorderPoint entered))
				return (TargetReorderPoint * ParMultiplier/AverageDailyDemand)
			else
				return blank
		
		DaysOfSupplyChange is a DerivedField
			type is Decimal size 13.2
			if (TargetDaysOfSupply > 0)
				return TargetDaysOfSupply - CurrentDaysOfSupply
			else
				return blank
		












		
		TargetReorderPoint is a DerivedField
			type is like UnsignedQuantity
			if (OverrideReorderPoint entered)
				return OverrideReorderPoint
			else
			if (RecommendedReorderPoint entered)
				return RecommendedReorderPoint
			else
			if (ItemLocationRel.ReorderPoint entered)
				return ItemLocationRel.ReorderPoint
			else 
				return blank
		
		TargetMaxOrderQuantity is a DerivedField
			type is like UnsignedQuantity
			if (OverrideMaxOrder entered)
				return OverrideMaxOrder
			else
			if (RecommendedMaxOrder entered)
				return RecommendedMaxOrder
			else
			if (ItemLocationRel.MaximumOrderQuantity entered)
				return ItemLocationRel.MaximumOrderQuantity
			else
				return blank

		TargetReorderQuantity is a DerivedField
			type is like UnsignedQuantity
			if (OverrideReorderQuantity entered)
				return OverrideReorderQuantity
			else
			if (RecommendedReorderQuantity entered)
				return RecommendedReorderQuantity
			else
			if (ItemLocationRel.ReorderQuantity entered)
				return ItemLocationRel.ReorderQuantity
			else
				return blank
				
		ReferenceReorderPointDerived is a DerivedField
			type is like UnsignedQuantity
			restricted
			if (ReferenceReorderPoint > 0)
				return ReferenceReorderPoint
			else
			if (ReorderPoint entered)
				return ReorderPoint
			else 
				return blank
		
		ReferenceMaxOrderDerived is a DerivedField
			type is like UnsignedQuantity
			restricted
			if (ReferenceMaxOrder > 0)
				return ReferenceMaxOrder
			else
			if (MaximumOrderQuantity entered)
				return MaximumOrderQuantity
			else
				return blank
		












		
		InventoryValueChange is a DerivedField
			type is like InternationalAmount
			if (TargetInventoryValue > 0)
				return (TargetInventoryValue - CurrentInventoryValue)
			else
				return blank
				



			



			



		

		Multiplier is a DerivedField
			type is Unsigned Decimal size 13.7
			if (DefaultSourceUOMRel.UOMConversion entered)
				return DefaultSourceUOMRel.UOMConversion
			else
				if (ItemType = "NONSTOCK")
					return Item.first DefaultBuyUOMRel.UOMConversion
				else
					if (DefaultTransactionUOMRel.UOMConversion entered)
						return DefaultTransactionUOMRel.UOMConversion
					else
						return Item.first DefaultTransactionUOMRel.UOMConversion
						
		ParMultiplier is a DerivedField
			type is Unsigned Decimal size 13.7
			if (DefaultTransactionUOMRel.UOMConversion entered)
				return DefaultTransactionUOMRel.UOMConversion
			else
				return Item.first DefaultTransactionUOMRel.UOMConversion
		
		ReferenceOrderQuantity is a DerivedField
			type is Decimal size 13.4
			initialize ReferenceOrderQuantity
			if (ReferenceReorderPointDerived > 0 or ReferenceMaxOrderDerived > 0)
				if (ReorderQuantityCode.OrderUpToMaximumLevel)
					ReferenceOrderQuantity = (ReferenceMaxOrderDerived - ReferenceReorderPointDerived)
				else
				if (ReorderQuantityCode.FixedReorderQuantity)
					ReferenceOrderQuantity = ReferenceReorderQuantity
				else
					ReferenceOrderQuantity = 1
				

				if (ReferenceOrderQuantity = 0)
					ReferenceOrderQuantity = 1
				ReferenceOrderQuantity = ReferenceOrderQuantity / OrderMultiple
				if (ReferenceOrderQuantity > 0)
					round ReferenceOrderQuantity up to nearest 1
				else
					round ReferenceOrderQuantity down to nearest 1
				ReferenceOrderQuantity = ReferenceOrderQuantity * OrderMultiple
				
				if (MinimumOrderQuantity entered
				and MinimumOrderQuantity > ReferenceOrderQuantity)
					ReferenceOrderQuantity = MinimumOrderQuantity

				ReferenceOrderQuantity = ReferenceOrderQuantity / Multiplier
				if (ReferenceOrderQuantity > 0)
					round ReferenceOrderQuantity up to nearest 1
				else
					round ReferenceOrderQuantity down to nearest 1
				ReferenceOrderQuantity = ReferenceOrderQuantity * Multiplier
				
			else
				ReferenceOrderQuantity = 0
			return ReferenceOrderQuantity
			
		ReferenceInventoryValue is a DerivedField
			type is like InternationalAmount
			if (ReferenceReorderPoint > 0 or ReferenceMaxOrder > 0)
				if (IsPerpetualLocation)
					return ((ReferenceReorderPoint + ReferenceOrderQuantity/2) * FinalProductCost)
				else
					return ((ReferenceReorderPoint * ParMultiplier) * FinalProductCost)
			else
				return blank
				
		CurrentOrderQuantity is a DerivedField
			type is Decimal size 13.4
			initialize CurrentOrderQuantity
			if (ItemLocationRel.ReorderPoint > 0 or ItemLocationRel.MaximumOrderQuantity > 0)
				if (ReorderQuantityCode.OrderUpToMaximumLevel)
					CurrentOrderQuantity = (ItemLocationRel.MaximumOrderQuantity - ItemLocationRel.ReorderPoint)
				else
				if (ReorderQuantityCode.FixedReorderQuantity)
					CurrentOrderQuantity = ItemLocationRel.ReorderQuantity
				else
					CurrentOrderQuantity = 1
				

				if (CurrentOrderQuantity = 0)
					CurrentOrderQuantity = 1
				CurrentOrderQuantity = CurrentOrderQuantity / OrderMultiple
				if (CurrentOrderQuantity > 0)
					round CurrentOrderQuantity up to nearest 1
				else
					round CurrentOrderQuantity down to nearest 1
				CurrentOrderQuantity = CurrentOrderQuantity * OrderMultiple

				if (MinimumOrderQuantity entered
				and MinimumOrderQuantity > CurrentOrderQuantity)
					CurrentOrderQuantity = MinimumOrderQuantity

				CurrentOrderQuantity = CurrentOrderQuantity / Multiplier
				if (CurrentOrderQuantity > 0)
					round CurrentOrderQuantity up to nearest 1
				else
					round CurrentOrderQuantity down to nearest 1
				CurrentOrderQuantity = CurrentOrderQuantity * Multiplier
				
			else
				CurrentOrderQuantity = 0
			return CurrentOrderQuantity
				
		CurrentInventoryValue is a DerivedField
			type is like InternationalAmount
			if (ItemLocationRel.ReorderPoint > 0 or ItemLocationRel.MaximumOrderQuantity > 0)
				if (IsPerpetualLocation)
					return ((ItemLocationRel.ReorderPoint + CurrentOrderQuantity/2) * FinalProductCost)
				else
					return ((ItemLocationRel.ReorderPoint * ParMultiplier) * FinalProductCost)
			else
				return blank
			



		
		TargetOrderQuantity is a DerivedField
			type is Decimal size 13.4
			initialize TargetOrderQuantity
			if (TargetReorderPoint > 0 or TargetMaxOrderQuantity > 0)
				if (ReorderQuantityCode.OrderUpToMaximumLevel)
					TargetOrderQuantity = (TargetMaxOrderQuantity - TargetReorderPoint)
				else
				if (ReorderQuantityCode.FixedReorderQuantity)
					TargetOrderQuantity = TargetReorderQuantity
				else
					TargetOrderQuantity = 1
					

				if (TargetOrderQuantity = 0)
					TargetOrderQuantity = 1
				TargetOrderQuantity = TargetOrderQuantity / OrderMultiple
				if (TargetOrderQuantity > 0)
					round TargetOrderQuantity up to nearest 1
				else
					round TargetOrderQuantity down to nearest 1
				TargetOrderQuantity = TargetOrderQuantity * OrderMultiple

				if (MinimumOrderQuantity entered
				and MinimumOrderQuantity > TargetOrderQuantity)
					TargetOrderQuantity = MinimumOrderQuantity

				TargetOrderQuantity = TargetOrderQuantity / Multiplier
				if (TargetOrderQuantity > 0)
					round TargetOrderQuantity up to nearest 1
				else
					round TargetOrderQuantity down to nearest 1
				TargetOrderQuantity = TargetOrderQuantity * Multiplier
				
			else
				TargetOrderQuantity = 0
			return TargetOrderQuantity
		
		TargetInventoryValue is a DerivedField
			type is like InternationalAmount

			if (IsPerpetualLocation)
				return ((TargetReorderPoint + TargetOrderQuantity/2) * FinalProductCost)
			if (IsParOrExchangeCart)
				return ((TargetReorderPoint * ParMultiplier) * FinalProductCost)
			else
				return blank
			



			

		
		DerivedInScope is a DerivedField
			type is Boolean
			DerivedInScope = true
			if (ItemLocationExclusionRuleRel exists
			and ItemLocationExclusionRuleRel.Active
			and ItemLocationExclusionRuleRel.Exclude)
				DerivedInScope = false
			return DerivedInScope
		
		EffectiveInScope is a DerivedField
			type is Boolean
			EffectiveInScope = true
			if (last ExclusionRulesRel.Exclude)
				EffectiveInScope = false
			return EffectiveInScope
			
		ItemsCountUnderReview is a DerivedField
    		type is Numeric size 10
    		return (instance count of RecommendationsUnderReviewRel)

		OutOfBoundsItemsCountUnderReview is a DerivedField
    		type is Numeric size 10
    		return (instance count of OutOfBoundsRecsUnderReviewRel)
    		
    	ItemsCountUnderApproved is a DerivedField
    		type is Numeric size 10
    		return (instance count of RecommendationsUnderApprovedRel)
    	
    	StockOut is a DerivedField
    		type is Boolean
			if (StockQuantityPrediction < DemandQuantityPrediction)
				return true
			else
				return false

		InventoryValueDifferencePositive is a DerivedField			
			type is like InternationalAmount
			if (InventoryValueDifference < 0)
				return (InventoryValueDifference*-1)
			else
				return InventoryValueDifference
		
		ItemKpiTitle is a DerivedField
			type is Alpha 50
			if (IIHInventoryLocationRel.AnalysisDate entered)
				return IIHInventoryLocationRel.ItemAnalysisDateStr
			else
				if(LocationType.InventoryLocation)
					return InventoryLocation.PerpetualAnalysisDate
				else
					return InventoryLocation.ParAnalysisDate
	Relations
		IIHLocationsOverviewRel
			one-to-one relation to IIHLocationsOverview
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
	
		IIHInventoryLocationRel
			one-to-one relation to IIHInventoryLocation
			Field Mapping uses symbolic key
				related.Company 				= Company
				related.IIHInventoryLocation 	= InventoryLocation
	
		InventoryLocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation 	= InventoryLocation
				
		IIHGlobalConfigurationRel
    		one-to-one relation to IIHGlobalConfiguration
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
    			
		InProgressEngineProcessRel
			one-to-many relation to InventoryIntelligenceProcessResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
			Instance Selection
				where (related.Status.Processing)
	
		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation 	= InventoryLocation
				related.Item 				= Item
				
		RecommendationsUnderReviewRel
			one-to-many relation to IIHItemLocation
            Field Mapping uses symbolic key
            Instance Selection
            	where (related.ValidForInventoryValuation
            	and    related.HasRecommendations
            	and    related.Status.Review)
            	
        RecommendationsUnderApprovedRel
            one-to-many relation to IIHItemLocation
            Field Mapping uses symbolic key
            Instance Selection
            	where (related.ValidForInventoryValuation
            	and    related.HasRecommendations
            	and    related.Status.Approved)
	
		IIHItemLocationExtendedRel
			one-to-one relation to IIHItemLocationExtended
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation 	= InventoryLocation
				related.Item 				= Item
				
        ItemReplenishmentSourcesRel
            one-to-many relation to ItemReplenishmentSource
            Field Mapping uses symbolic key
                related.Company           	= Company
                related.InventoryLocation 	= InventoryLocation
                related.Item             	= Item
                
        IIHItemReplenishmentSourceRel
        	one-to-many relation to IIHItemReplenishmentSource
        	Field Mapping uses symbolic key
                related.Company           	= Company
                related.InventoryLocation 	= InventoryLocation
                related.Item             	= Item
            Instance Selection
            	where (!related.IsDefaultTransactionUOMSame)
                
    	IIHDailyDataRel
			one-to-many relation to IIHDailyData
			Field Mapping uses symbolic key
				related.Company = Company
				related.InventoryLocation = InventoryLocation
				related.Item = Item
	
		ItemLocationExclusionRuleRel
			one-to-one relation to IIHRule
			Field Mapping uses ByExclusion
				related.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
				related.InventoryCompany = Company
				related.InventoryLocation = InventoryLocation
				related.Item = Item
				






		ExclusionRulesRel
			one-to-many relation to IIHRule
			Field Mapping uses ByExclusionRuleOrder
				related.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
			Instance Selection
				where (related.IIHRuleType = IIHRuleType.Exclusion
				and	  (related.InventoryCompany not entered
				or     related.InventoryCompany = Company)
				and   (related.InventoryLocation not entered
				or     related.InventoryLocation = InventoryLocation)
				and	  (related.Item not entered
				or     related.Item = Item))
				
		DefaultTransactionUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup		= Company.ItemGroup
				related.Item			= Item
				related.UnitOfMeasure	= DefaultTransactionUOM
				
		DefaultSourceUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup		= Company.ItemGroup
				related.Item			= Item
				related.UnitOfMeasure	= DefaultSourceUOM
				
		IIHItemRel
			one-to-one relation to IIHItem
			Field Mapping uses symbolic key
				related.ItemGroup		= Company.ItemGroup
				related.IIHItem			= Item
				
		ReplacementItemsInLocationRel
			one-to-many relation to IIHItemLocation
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation 	= InventoryLocation
				related.Item				= IIHItemRel.ReplacedItemsRel.IIHItem

		ProcessorWithViewOrEditAccessRel             
			one-to-one relation to InventoryIntelligenceProcessorAccessRights
			Field Mapping uses symbolic key
				related.HROrganization                 = actor.agent(Employee).HROrganization
				related.InventoryIntelligenceProcessor = actor.agent(Employee).Employee
				related.InventoryIntelligenceProcessorAccessRights.InventoryCompany = Company
				related.InventoryIntelligenceProcessorAccessRights.IIHInventoryLocation = InventoryLocation

		IIProcessResultRel							
			one-to-many relation to InventoryIntelligenceProcessResult
			Field Mapping uses ByProcessStatusStartTime
		        related.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
				related.Process                = 2
		        related.Status                 = 2

		IIHLocationAdjustmentHistoryRel					
			one-to-one relation to IIHLocationAdjustmentHistory
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.InventoryIntelligenceProcessResult	= first IIProcessResultRel.InventoryIntelligenceProcessResult
				related.Company   							= Company
				related.IIHInventoryLocation  				= InventoryLocation

		OutOfBoundsRecsUnderReviewRel
			one-to-many relation to IIHItemLocation
            Field Mapping uses symbolic key
            Instance Selection
            	where (related.ValidForInventoryValuation
            	and    related.HasRecommendations
            	and    related.Status.Review
				and    related.OutOfBounds)

		InventoryIntelligenceProcessorRel
			one-to-one relation to InventoryIntelligenceProcessor
			Field Mapping uses symbolic key
				related.HROrganization 					= actor.agent(Employee).HROrganization
				related.InventoryIntelligenceProcessor	= actor.agent(Employee).Employee

		IIHItemLocationRel
			one-to-one relation to IIHItemLocation
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.InventoryLocation 	= InventoryLocation
				related.Item 				= Item
				
		IIHLocationGroupMemberRel
			one-to-one relation to IIHLocationGroupMember
			Field Mapping uses ByLocationGroup
				related.IIHLocationGroup  = LocalLocationGroup
				related.Company 		  = Company
				related.InventoryLocation = InventoryLocation
	
	Sets
		
		ByItem
			Sort Order
				Item
				Company
				InventoryLocation
		


		ByAverageDailyDemand
			Sort Order
				AverageDailyDemand
				Company
				InventoryLocation
				Item
		
		ByMaxDailyReplenishments
			Sort Order
				MaxDailyReplenishments
				Company
				InventoryLocation
				Item
		
		ByAverageNonZeroDemand
			Sort Order
				AverageNonZeroDemand
				Company
				InventoryLocation
				Item
		
		ByTransactionDays
			Sort Order
				TransactionDays
				Company
				InventoryLocation
				Item
		
		ByAvgTxnDaysPerWeek
			Sort Order
				AverageTransactionDaysPerWeek
				Company
				InventoryLocation
				Item
		


		ByAverageStockOnHand
			Sort Order
				AverageStockOnHand
				Company
				InventoryLocation
				Item
		
		ByAverageDailyIssues
			Sort Order
				AverageDailyIssues
				Company
				InventoryLocation
				Item
		
		ByMaximumDailyIssues
			Sort Order
				MaximumDailyIssues
				Company
				InventoryLocation
				Item
				
		ByAverageNonZeroIssues
			Sort Order
				AverageNonZeroIssues
				Company
				InventoryLocation
				Item
				
		ByStockoutDays
			Sort Order
				StockoutDays
				Company
				InventoryLocation
				Item
				
		ByStockoutEvents
			Sort Order
				StockoutEvents
				Company
				InventoryLocation
				Item
				
		ByTurns
			Sort Order
				Turns
				Company
				InventoryLocation
				Item
				
		ByAverageInventoryCost
			Sort Order
				AverageInventoryCost
				Company
				InventoryLocation
				Item
				
		BySimulatedAverageInventoryCost
			Sort Order
				SimulatedAverageInventoryCost
				Company
				InventoryLocation
				Item
				
		BySimulatedAverageStockOnHand
			Sort Order
				SimulatedAverageStockOnHand
				Company
				InventoryLocation
				Item
				
		ByActualServiceLevel
			Sort Order
				ActualServiceLevel
				Company
				InventoryLocation
				Item
				
		BySimulatedServiceLevel
			Sort Order
				SimulatedServiceLevel
				Company
				InventoryLocation
				Item
		
		ByFirstIssue
			Sort Order
				FirstIssue
				Company
				InventoryLocation
				Item
				
		ByLastIssue
			Sort Order
				LastIssue
				Company
				InventoryLocation
				Item

		ByReorderPoint
			Sort Order
				ReorderPoint
				Company
				InventoryLocation
				Item
				
		ByReferenceReorderPoint
			Sort Order
				ReferenceReorderPoint
				Company
				InventoryLocation
				Item
				
		ByRecommendedReorderPoint
			Sort Order
				RecommendedReorderPoint
				Company
				InventoryLocation
				Item
		
		ByOverrideReorderPoint
			Sort Order
				OverrideReorderPoint
				Company
				InventoryLocation
				Item
		
		ByROPChange
			Sort Order
				ROPChange
				Company
				InventoryLocation
				Item
				
		ByROPPercentChange
			Sort Order
				ROPPercentChange
				Company
				InventoryLocation
				Item
		
		ByROPDirection
			Sort Order
				ROPDirection
				Company
				InventoryLocation
				Item
		
		ByMaximumOrderQuantity
			Sort Order
				MaximumOrderQuantity
				Company
				InventoryLocation
				Item
				
		ByReferenceMaxOrder
			Sort Order
				ReferenceMaxOrder
				Company
				InventoryLocation
				Item
				
		ByRecommendedMaxOrder
			Sort Order
				RecommendedMaxOrder
				Company
				InventoryLocation
				Item
		
		ByOverrideMaxOrder
			Sort Order
				OverrideMaxOrder
				Company
				InventoryLocation
				Item
		
		ByMaxOrderChange
			Sort Order
				MaxOrderChange
				Company
				InventoryLocation
				Item
				
		ByMaxOrderPercentChange
			Sort Order
				MaxOrderPercentChange
				Company
				InventoryLocation
				Item
			
		ByMODirection
			Sort Order
				MODirection
				Company
				InventoryLocation
				Item

		ByReferenceReorderQuantity
			Sort Order
				ReferenceReorderQuantity
				Company
				InventoryLocation
				Item
				
		ByRecommendedReorderQuantity
			Sort Order
				RecommendedReorderQuantity
				Company
				InventoryLocation
				Item
		
		ByOverrideReorderQuantity
			Sort Order
				OverrideReorderQuantity
				Company
				InventoryLocation
				Item
		
		ByReorderQuantityChange
			Sort Order
				ReorderQuantityChange
				Company
				InventoryLocation
				Item
				
		ByReorderQuantityPercentChange
			Sort Order
				ReorderQuantityPercentChange
				Company
				InventoryLocation
				Item
		
		BySentToItemLocation
			Sort Order
				SentToSource
				Company
				InventoryLocation
				Item
				
		ByInventoryValueDifference
			Sort Order
				InventoryValueDifference
				Company
				InventoryLocation
				Item
				
		ByRemovalCandidate
			Sort Order
				RemovalCandidate
				Company
				InventoryLocation
				Item
				
		ByReferenceInventoryValue
			Sort Order
				ItemReferenceInventoryValue
				Company
				InventoryLocation
				Item
				
		ByTargetInventoryValue
			Sort Order
				ItemTargetInventoryValue
				Company
				InventoryLocation
				Item
		
	Action Exit Rules
		include EvaluateChange
		include UpdateROPDirection
		include UpdateMODirection
		include UpdateROQDirection
		include UpdateInventoryValues
	
	Actions

		FastUpdate is an Update Action
			restricted
			bypass field rules
	
		CalculateLocationSummaryValues is a Set Action
			restricted	
			Sort Order
				Company
				InventoryLocation
				Item
			
			Parameters
				PrmCompany					is a InventoryCompany
				PrmLocation					is a InventoryLocation
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmLocationGroup			is a IIHLocationGroup
					context of PrmFinanceEnterpriseGroup
				
			
			Parameter Rules
				PrmLocationGroup
					LocalLocationGroup = PrmLocationGroup
			
			Local Fields
				LocalActor						is an Actor
				LocalReferenceOrderQuantity 	is Decimal size 13.4
				LocalReferenceInventoryValue 	is like InternationalAmount
				LocalLocationRefInvValue		is like InternationalAmount
				LocalCurrentOrderQuantity 	    is Decimal size 13.4
				LocalCurrentInventoryValue 	    is like InternationalAmount
				LocalLocationCurrentInvValue	is like InternationalAmount
				LocalTargetOrderQuantity 	    is Decimal size 13.4
				LocalTargetInventoryValue 	    is like InternationalAmount
				LocalLocationTargetInvValue	    is like InternationalAmount
				LocalUnderReviewInventoryValue 	is like InternationalAmount
				LocalLocationUnderReviewInvValue is like InternationalAmount
				LocalAchievedSoFarInventoryValue 	is like InternationalAmount
				LocalLocationAchievedSoFarInvValue 	is like InternationalAmount
				
				LocalGeneralItemCount 				is Numeric size 10
				LocalGeneralRemovalCandidatesCount 	is Numeric size 10
				LocalGeneralRemovalCandidatesValue 	is like InternationalAmount
				LocalGeneralEligibleItemCount		is Numeric size 10
				LocalGeneralEligibleItemValue		is like InternationalAmount
				
				LocalDecreaseItemCount			is Numeric size 10
				LocalDecreaseReferenceValue 	is like InternationalAmount
				LocalDecreaseTargetValue 		is like InternationalAmount
				LocalDecreasePotentialSavings 	is like InternationalAmount
				LocalDecreaseAchievedSoFar	 	is like InternationalAmount
				
				LocalIncreaseItemCount				is Numeric size 10
				LocalIncreaseReferenceValue 		is like InternationalAmount
				LocalIncreaseTargetValue 			is like InternationalAmount
				LocalIncreaseCostOfImprovedService 	is like InternationalAmount
				LocalIncreaseCostSoFar	 			is like InternationalAmount
			
			Instance Selection
				where ((PrmLocation not entered or (Company = PrmCompany and InventoryLocation = PrmLocation))
				and (PrmLocationGroup not entered or IIHLocationGroupMemberRel exists))
				
			Action Rules
				Set Rules
					Exit Rules
						invoke CalculateRecommendationsSummary IIHInventoryLocation
				
				InventoryLocation Set Rules
					Exit Rules
						invoke FastUpdate IIHInventoryLocationRel
							invoked.ReferenceInventoryValue			= LocalLocationRefInvValue
							invoked.CurrentInventoryValue			= LocalLocationCurrentInvValue
							invoked.TargetInventoryValue  			= LocalLocationTargetInvValue
							invoked.UnderReviewValue 				= LocalLocationUnderReviewInvValue
							invoked.AchievedSoFarValue				= LocalLocationAchievedSoFarInvValue
							invoked.GeneralItemCount   				= LocalGeneralItemCount
							invoked.GeneralRemovalCandidatesCount 	= LocalGeneralRemovalCandidatesCount
							invoked.GeneralRemovalCandidatesValue 	= LocalGeneralRemovalCandidatesValue
							invoked.GeneralEligibleIemCount			= LocalGeneralEligibleItemCount
							invoked.GeneralEligibleIemValue			= LocalGeneralEligibleItemValue
							invoked.DecreaseItemCount 				= LocalDecreaseItemCount
							invoked.DecreaseReferenceValue 			= LocalDecreaseReferenceValue
							invoked.DecreaseTargetValue				= LocalDecreaseTargetValue
							invoked.DecreasePotentialSavings		= LocalDecreasePotentialSavings
							invoked.DecreaseAchievedSoFar			= LocalDecreaseAchievedSoFar
							invoked.IncreaseItemCount				= LocalIncreaseItemCount
							invoked.IncreaseReferenceValue			= LocalIncreaseReferenceValue
							invoked.IncreaseTargetValue				= LocalIncreaseTargetValue
							invoked.IncreaseCostOfImprovedService	= LocalIncreaseCostOfImprovedService
							invoked.IncreaseCostSoFar				= LocalIncreaseCostSoFar
						initialize LocalLocationRefInvValue
						initialize LocalLocationCurrentInvValue
						initialize LocalLocationTargetInvValue
						initialize LocalLocationUnderReviewInvValue
						initialize LocalLocationAchievedSoFarInvValue
						initialize LocalGeneralItemCount
						initialize LocalGeneralRemovalCandidatesCount
						initialize LocalGeneralRemovalCandidatesValue
						initialize LocalGeneralEligibleItemCount
						initialize LocalGeneralEligibleItemValue
						initialize LocalDecreaseItemCount
						initialize LocalDecreaseReferenceValue
						initialize LocalDecreaseTargetValue
						initialize LocalDecreasePotentialSavings
						initialize LocalDecreaseAchievedSoFar
						initialize LocalIncreaseItemCount
						initialize LocalIncreaseReferenceValue
						initialize LocalIncreaseTargetValue
						initialize LocalIncreaseCostOfImprovedService
						initialize LocalIncreaseCostSoFar
				Instance Rules
					initialize LocalReferenceOrderQuantity
					initialize LocalReferenceInventoryValue
					initialize LocalCurrentOrderQuantity
					initialize LocalCurrentInventoryValue
					initialize LocalTargetOrderQuantity
					initialize LocalTargetInventoryValue
					initialize LocalUnderReviewInventoryValue
					initialize LocalAchievedSoFarInventoryValue
					if (ValidForInventoryValuation and ConsignmentInValuationCheck)
						LocalGeneralItemCount = LocalGeneralItemCount + 1
						if (IsPerpetualLocation)
							if (ReferenceReorderPointDerived > 0 or ReferenceMaxOrderDerived > 0)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									LocalReferenceOrderQuantity = (ReferenceMaxOrderDerived - ReferenceReorderPointDerived)
								else
								if (ReorderQuantityCode.FixedReorderQuantity)
									LocalReferenceOrderQuantity = ReferenceReorderQuantity
								else
									LocalReferenceOrderQuantity = 1
								
								if (LocalReferenceOrderQuantity = 0)
									LocalReferenceOrderQuantity = 1
								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity / OrderMultiple
								if (LocalReferenceOrderQuantity > 0)
									round LocalReferenceOrderQuantity up to nearest 1
								else
									round LocalReferenceOrderQuantity down to nearest 1
								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity * OrderMultiple

								if (MinimumOrderQuantity entered
								and MinimumOrderQuantity > LocalReferenceOrderQuantity)
									LocalReferenceOrderQuantity = MinimumOrderQuantity

								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity / Multiplier
								if (LocalReferenceOrderQuantity > 0)
									round LocalReferenceOrderQuantity up to nearest 1
								else
									round LocalReferenceOrderQuantity down to nearest 1
								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity * Multiplier
								
							else
								LocalReferenceOrderQuantity = 0
						
						if (ReferenceReorderPoint > 0 or ReferenceMaxOrder > 0)
							if (IsPerpetualLocation)
								LocalReferenceInventoryValue = ((ReferenceReorderPoint + LocalReferenceOrderQuantity/2) * FinalProductCost)
							else
								LocalReferenceInventoryValue = ((ReferenceReorderPoint * ParMultiplier) * FinalProductCost)
								
						LocalLocationRefInvValue = LocalLocationRefInvValue + LocalReferenceInventoryValue
						
						if (IsPerpetualLocation)
							if (ItemLocationRel.ReorderPoint > 0 or ItemLocationRel.MaximumOrderQuantity > 0)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									LocalCurrentOrderQuantity = (ItemLocationRel.MaximumOrderQuantity - ItemLocationRel.ReorderPoint)
								else
								if (ReorderQuantityCode.FixedReorderQuantity)
									LocalCurrentOrderQuantity = (ItemLocationRel.ReorderQuantity)
								else
									LocalCurrentOrderQuantity = 1
								
								if (LocalCurrentOrderQuantity = 0)
									LocalCurrentOrderQuantity = 1
								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity / OrderMultiple
								if (LocalCurrentOrderQuantity > 0)
									round LocalCurrentOrderQuantity up to nearest 1
								else
									round LocalCurrentOrderQuantity down to nearest 1
								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity * OrderMultiple

								if (MinimumOrderQuantity entered
								and MinimumOrderQuantity > LocalCurrentOrderQuantity)
									LocalCurrentOrderQuantity = MinimumOrderQuantity

								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity / Multiplier
								if (LocalCurrentOrderQuantity > 0)
									round LocalCurrentOrderQuantity up to nearest 1
								else
									round LocalCurrentOrderQuantity down to nearest 1
								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity * Multiplier
								
							else
								LocalCurrentOrderQuantity = 0
						
						if (ItemLocationRel.ReorderPoint > 0 or ItemLocationRel.MaximumOrderQuantity > 0)
							if (IsPerpetualLocation)
								LocalCurrentInventoryValue = ((ItemLocationRel.ReorderPoint + LocalCurrentOrderQuantity/2) * FinalProductCost)
							else
								LocalCurrentInventoryValue = ((ItemLocationRel.ReorderPoint * ParMultiplier) * FinalProductCost)
						LocalLocationCurrentInvValue = LocalLocationCurrentInvValue + LocalCurrentInventoryValue
						
						if (IsPerpetualLocation)
							if (TargetReorderPoint > 0 or TargetMaxOrderQuantity > 0)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									LocalTargetOrderQuantity = (TargetMaxOrderQuantity - TargetReorderPoint)
								else
								if (ReorderQuantityCode.FixedReorderQuantity)
									LocalTargetOrderQuantity = TargetReorderQuantity
								else
									LocalTargetOrderQuantity = 1
									

								if (LocalTargetOrderQuantity = 0)
									LocalTargetOrderQuantity = 1
								LocalTargetOrderQuantity = LocalTargetOrderQuantity / OrderMultiple
								if (LocalTargetOrderQuantity > 0)
									round LocalTargetOrderQuantity up to nearest 1
								else
									round LocalTargetOrderQuantity down to nearest 1
								LocalTargetOrderQuantity = LocalTargetOrderQuantity * OrderMultiple

								if (MinimumOrderQuantity entered
								and MinimumOrderQuantity > LocalTargetOrderQuantity)
									LocalTargetOrderQuantity = MinimumOrderQuantity

								LocalTargetOrderQuantity = LocalTargetOrderQuantity / Multiplier
								if (LocalTargetOrderQuantity > 0)
									round LocalTargetOrderQuantity up to nearest 1
								else
									round LocalTargetOrderQuantity down to nearest 1
								LocalTargetOrderQuantity = LocalTargetOrderQuantity * Multiplier
								
							else
								LocalTargetOrderQuantity = 0
						if (IsPerpetualLocation)
							LocalTargetInventoryValue = ((TargetReorderPoint + LocalTargetOrderQuantity/2) * FinalProductCost)
						else
							LocalTargetInventoryValue = ((TargetReorderPoint * ParMultiplier) * FinalProductCost)
							
						ItemReferenceInventoryValue = LocalReferenceInventoryValue
						ItemTargetInventoryValue	= LocalTargetInventoryValue
						ItemCurrentInventoryValue	= LocalCurrentInventoryValue
						InventoryValueDifference	= LocalTargetInventoryValue - LocalCurrentInventoryValue
						
						if (AnalysisType entered)
							LocalGeneralEligibleItemCount = LocalGeneralEligibleItemCount + 1
							LocalGeneralEligibleItemValue = LocalGeneralEligibleItemValue + LocalReferenceInventoryValue
							
						if (RemovalCandidate)
							LocalGeneralRemovalCandidatesCount = LocalGeneralRemovalCandidatesCount + 1
							LocalGeneralRemovalCandidatesValue = LocalGeneralRemovalCandidatesValue + LocalReferenceInventoryValue
							
						if (!Status.Skipped)	
							LocalLocationTargetInvValue = LocalLocationTargetInvValue + LocalTargetInventoryValue
						if (Status.Review or Status.Approved)
							LocalUnderReviewInventoryValue = LocalTargetInventoryValue - LocalCurrentInventoryValue
						LocalLocationUnderReviewInvValue = LocalLocationUnderReviewInvValue + LocalUnderReviewInventoryValue
						if (Status.Sent)
							LocalAchievedSoFarInventoryValue = LocalTargetInventoryValue - LocalReferenceInventoryValue
						LocalLocationAchievedSoFarInvValue = LocalLocationAchievedSoFarInvValue + LocalAchievedSoFarInventoryValue
						
						if (ROPDirection.Decrease)
							LocalDecreaseItemCount 		= LocalDecreaseItemCount + 1
							LocalDecreaseReferenceValue = LocalDecreaseReferenceValue + LocalReferenceInventoryValue
							LocalDecreaseTargetValue    = LocalDecreaseTargetValue + LocalTargetInventoryValue
							LocalDecreaseAchievedSoFar	= LocalDecreaseAchievedSoFar + LocalAchievedSoFarInventoryValue
							LocalDecreasePotentialSavings = LocalDecreasePotentialSavings + LocalUnderReviewInventoryValue
						else
						if (ROPDirection.Increase)
							LocalIncreaseItemCount 		= LocalIncreaseItemCount + 1
							LocalIncreaseReferenceValue = LocalIncreaseReferenceValue + LocalReferenceInventoryValue
							LocalIncreaseTargetValue    = LocalIncreaseTargetValue + LocalTargetInventoryValue
							LocalIncreaseCostSoFar		= LocalIncreaseCostSoFar + LocalAchievedSoFarInventoryValue
							LocalIncreaseCostOfImprovedService = LocalIncreaseCostOfImprovedService + LocalUnderReviewInventoryValue
							
	
		CalculateLocationValues is a Set Action
			restricted
			Parameters
				PrmFromEngineInvocation	is Boolean
				
			Sort Order
				Company
				InventoryLocation
				Item
				
			Local Fields
				LocalActor						is an Actor
				LocalReferenceOrderQuantity 	is Decimal size 13.4
				LocalReferenceInventoryValue 	is like InternationalAmount
				LocalLocationRefInvValue		is like InternationalAmount
				LocalCurrentOrderQuantity 	    is Decimal size 13.4
				LocalCurrentInventoryValue 	    is like InternationalAmount
				LocalLocationCurrentInvValue	is like InternationalAmount
				LocalTargetOrderQuantity 	    is Decimal size 13.4
				LocalTargetInventoryValue 	    is like InternationalAmount
				LocalLocationTargetInvValue	    is like InternationalAmount
				LocalUnderReviewInventoryValue 	is like InternationalAmount
				LocalLocationUnderReviewInvValue is like InternationalAmount
				LocalAchievedSoFarInventoryValue 	is like InternationalAmount
				LocalLocationAchievedSoFarInvValue is like InternationalAmount
				
			Action Rules
				Set Rules
					Exit Rules
						if (!PrmFromEngineInvocation)
							LocalActor = actor
							send notification
								to LocalActor
								description is "CalculateLocationValuesActionCompleted"
								priority is high
				InventoryLocation Set Rules
					Exit Rules
						invoke FastUpdate InventoryLocationRel
							invoked.ReferenceInventoryValue	= LocalLocationRefInvValue
							invoked.CurrentInventoryValue	= LocalLocationCurrentInvValue
							invoked.TargetInventoryValue  	= LocalLocationTargetInvValue
							invoked.UnderReviewValue 		= LocalLocationUnderReviewInvValue
							invoked.AchievedSoFarValue		= LocalLocationAchievedSoFarInvValue
						initialize LocalLocationRefInvValue
						initialize LocalLocationCurrentInvValue
						initialize LocalLocationTargetInvValue
						initialize LocalLocationUnderReviewInvValue
						initialize LocalLocationAchievedSoFarInvValue
				Instance Rules
					initialize LocalReferenceOrderQuantity
					initialize LocalReferenceInventoryValue
					initialize LocalCurrentOrderQuantity
					initialize LocalCurrentInventoryValue
					initialize LocalTargetOrderQuantity
					initialize LocalTargetInventoryValue
					initialize LocalUnderReviewInventoryValue
					initialize LocalAchievedSoFarInventoryValue
					if (ValidForInventoryValuation and ConsignmentInValuationCheck)
						if (IsPerpetualLocation)
							if (ReferenceReorderPointDerived > 0 or ReferenceMaxOrderDerived > 0)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									LocalReferenceOrderQuantity = (ReferenceMaxOrderDerived - ReferenceReorderPointDerived)
								else
								if (ReorderQuantityCode.FixedReorderQuantity)
									LocalReferenceOrderQuantity = ReferenceReorderQuantity
								else
									LocalReferenceOrderQuantity = 1
								

								if (LocalReferenceOrderQuantity = 0)
									LocalReferenceOrderQuantity = 1
								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity / OrderMultiple
								if (LocalReferenceOrderQuantity > 0)
									round LocalReferenceOrderQuantity up to nearest 1
								else
									round LocalReferenceOrderQuantity down to nearest 1
								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity * OrderMultiple

								if (MinimumOrderQuantity entered
								and MinimumOrderQuantity > LocalReferenceOrderQuantity)
									LocalReferenceOrderQuantity = MinimumOrderQuantity

								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity / Multiplier
								if (LocalReferenceOrderQuantity > 0)
									round LocalReferenceOrderQuantity up to nearest 1
								else
									round LocalReferenceOrderQuantity down to nearest 1
								LocalReferenceOrderQuantity = LocalReferenceOrderQuantity * Multiplier
								
							else
								LocalReferenceOrderQuantity = 0
						
						if (ReferenceReorderPoint > 0 or ReferenceMaxOrder > 0)
							if (IsPerpetualLocation)
								LocalReferenceInventoryValue = ((ReferenceReorderPoint + LocalReferenceOrderQuantity/2) * FinalProductCost)
							else
								LocalReferenceInventoryValue = ((ReferenceReorderPoint * ParMultiplier) * FinalProductCost)
								
						LocalLocationRefInvValue = LocalLocationRefInvValue + LocalReferenceInventoryValue
						
						if (IsPerpetualLocation)
							if (ItemLocationRel.ReorderPoint > 0 or ItemLocationRel.MaximumOrderQuantity > 0)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									LocalCurrentOrderQuantity = (ItemLocationRel.MaximumOrderQuantity - ItemLocationRel.ReorderPoint)
								else
								if (ReorderQuantityCode.FixedReorderQuantity)
									LocalCurrentOrderQuantity = ItemLocationRel.ReorderQuantity
								else
									LocalCurrentOrderQuantity = 1
								

								if (LocalCurrentOrderQuantity = 0)
									LocalCurrentOrderQuantity = 1
								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity / OrderMultiple
								if (LocalCurrentOrderQuantity > 0)
									round LocalCurrentOrderQuantity up to nearest 1
								else
									round LocalCurrentOrderQuantity down to nearest 1
								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity * OrderMultiple

								if (MinimumOrderQuantity entered
								and MinimumOrderQuantity > LocalCurrentOrderQuantity)
									LocalCurrentOrderQuantity = MinimumOrderQuantity

								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity / Multiplier
								if (LocalCurrentOrderQuantity > 0)
									round LocalCurrentOrderQuantity up to nearest 1
								else
									round LocalCurrentOrderQuantity down to nearest 1
								LocalCurrentOrderQuantity = LocalCurrentOrderQuantity * Multiplier
								
							else
								LocalCurrentOrderQuantity = 0
						
						if (ItemLocationRel.ReorderPoint > 0 or ItemLocationRel.MaximumOrderQuantity > 0)
							if (IsPerpetualLocation)
								LocalCurrentInventoryValue = ((ItemLocationRel.ReorderPoint + LocalCurrentOrderQuantity/2) * FinalProductCost)
							else
								LocalCurrentInventoryValue = ((ItemLocationRel.ReorderPoint * ParMultiplier) * FinalProductCost)
						LocalLocationCurrentInvValue = LocalLocationCurrentInvValue + LocalCurrentInventoryValue
						
						if (IsPerpetualLocation)
							if (TargetReorderPoint > 0 or TargetMaxOrderQuantity > 0)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									LocalTargetOrderQuantity = (TargetMaxOrderQuantity - TargetReorderPoint)
								else
								if (ReorderQuantityCode.FixedReorderQuantity)
									LocalTargetOrderQuantity = TargetReorderQuantity
								else
									LocalTargetOrderQuantity = 1
									

								if (LocalTargetOrderQuantity = 0)
									LocalTargetOrderQuantity = 1
								LocalTargetOrderQuantity = LocalTargetOrderQuantity / OrderMultiple
								if (LocalTargetOrderQuantity > 0)
									round LocalTargetOrderQuantity up to nearest 1
								else
									round LocalTargetOrderQuantity down to nearest 1
								LocalTargetOrderQuantity = LocalTargetOrderQuantity * OrderMultiple

								if (MinimumOrderQuantity entered
								and MinimumOrderQuantity > LocalTargetOrderQuantity)
									LocalTargetOrderQuantity = MinimumOrderQuantity
									
								LocalTargetOrderQuantity = LocalTargetOrderQuantity / Multiplier
								if (LocalTargetOrderQuantity > 0)
									round LocalTargetOrderQuantity up to nearest 1
								else
									round LocalTargetOrderQuantity down to nearest 1
								LocalTargetOrderQuantity = LocalTargetOrderQuantity * Multiplier
								
							else
								LocalTargetOrderQuantity = 0
						if (IsPerpetualLocation)
							LocalTargetInventoryValue = ((TargetReorderPoint + LocalTargetOrderQuantity/2) * FinalProductCost)
						else
							LocalTargetInventoryValue = ((TargetReorderPoint * ParMultiplier) * FinalProductCost)
							
						if (!Status.Skipped)	
							LocalLocationTargetInvValue = LocalLocationTargetInvValue + LocalTargetInventoryValue
						if (Status.Review or Status.Approved)
							LocalUnderReviewInventoryValue = LocalTargetInventoryValue - LocalCurrentInventoryValue
						LocalLocationUnderReviewInvValue = LocalLocationUnderReviewInvValue + LocalUnderReviewInventoryValue
						if (Status.Sent)
							LocalAchievedSoFarInventoryValue = LocalTargetInventoryValue - LocalReferenceInventoryValue
						LocalLocationAchievedSoFarInvValue = LocalLocationAchievedSoFarInvValue + LocalAchievedSoFarInventoryValue
									
		EvaluateChangeAction is an Instance Action
			restricted
			Exit Rules
				include EvaluateChange
				include UpdateROPDirection
				include UpdateMODirection
				include UpdateROQDirection
				include UpdateInventoryValues

		CreateIIHItemLocationAuditData is an Instance Action
			restricted
			Parameters
				PrmBeforeReorderPoint 			is like UnsignedQuantity
				PrmAfterReorderPoint 			is like UnsignedQuantity
				PrmBeforeMaximumOrderQuantity	is like UnsignedQuantity
				PrmAfterMaximumOrderQuantity	is like UnsignedQuantity
				PrmReorderQuantityCode			is like ReorderQuantityCode
				PrmBeforeReorderQuantity		is like UnsignedQuantity
				PrmAfterReorderQuantity			is like UnsignedQuantity
				PrmModificationBy				is Numeric 1
			Action Rules
				invoke Create IIHItemLocationAudit
					invoked.Company								= Company
					invoked.IIHInventoryLocation				= InventoryLocation
					invoked.IIHItem								= Item
					invoked.BeforeReorderPoint 					= PrmBeforeReorderPoint
					invoked.AfterReorderPoint 					= PrmAfterReorderPoint
					invoked.BeforeMaximumOrderQuantity 			= PrmBeforeMaximumOrderQuantity
					invoked.AfterMaximumOrderQuantity 			= PrmAfterMaximumOrderQuantity
					invoked.BeforeReorderQuantity 				= PrmBeforeReorderQuantity
					invoked.AfterReorderQuantity 				= PrmAfterReorderQuantity
					invoked.ReorderQuantityCode 				= PrmReorderQuantityCode
					invoked.UpdateDate							= current timestamp
					invoked.ModificationBy						= PrmModificationBy
				
		SyncLocationType is a Set Action
			restricted
			Instance Selection
				where (InProgressEngineProcessRel not exists
				and    LocationType != ItemLocationRel.InventoryLocation.LocationType)
			Action Rules
				Instance Rules
					LocationType = ItemLocationRel.InventoryLocation.LocationType
					
		UpdateReferenceValuesSet is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup 	is a FinanceEnterpriseGroup
				PrmProcessResult 			is an InventoryIntelligenceProcessResult
					context of PrmFinanceEnterpriseGroup
				PrmCompany					is a InventoryCompany
				PrmLocation					is a InventoryLocation
				PrmLocationGroup			is a IIHLocationGroup
					context of PrmFinanceEnterpriseGroup
			Parameter Rules
				PrmLocationGroup
					LocalLocationGroup = PrmLocationGroup
			Instance Selection
				where (ActiveLocation
				and    !PrmProcessResult.Status.Failed
				and (PrmLocation not entered or (Company = PrmCompany and InventoryLocation = PrmLocation))
				and (PrmLocationGroup not entered or IIHLocationGroupMemberRel exists))
			Action Rules
				Instance Rules
					invoke UpdateReferenceValues

		ClearRecommendations is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmProcessResult is an InventoryIntelligenceProcessResult
					default label is "ProcessResult"
					context of PrmFinanceEnterpriseGroup
				RunForLocationTypes	is an EngineLocationType
				PrmCompany					is a InventoryCompany
				PrmLocation					is a InventoryLocation
				PrmLocationGroup			is a IIHLocationGroup
					context of PrmFinanceEnterpriseGroup
			Parameter Rules
				PrmLocationGroup
					LocalLocationGroup = PrmLocationGroup
			Instance Selection
				where (!Status.None
				and   (RunForLocationTypes not entered
				or     RunForLocationTypes.AllLocations
				or    (RunForLocationTypes.PerpetualLocations
				and    IsPerpetualLocation)
				or    (RunForLocationTypes.ParLocations
				and    IsParLocation)
	            or    (RunForLocationTypes.LocationGroup 
				and    IIHLocationGroupMemberRel exists)
	            or    (RunForLocationTypes.Location 
				and	  (Company = PrmCompany and InventoryLocation = PrmLocation)))
				and   (PrmProcessResult not entered
				or    (PrmProcessResult entered
				and   !PrmProcessResult.Status.Failed))
				and   (IIHItemLocationExtendedRel not exist
				or     IIHItemLocationExtendedRel.Processed = 1))
			Action Rules
				Instance Rules
					invoke ClearRecommendation
				
		ClearRecommendation is an Instance Action
			restricted
			Exit Rules
				make transition to None
				
		ClearKPIValues is an Instance Action
			restricted
			Action Rules
				initialize AverageDailyIssues
				initialize AverageStockOnHand
				initialize AverageNonZeroIssues
				initialize DefaultLeadTime
				initialize FinalProductCost
				initialize HoldingCost
				initialize HoldingCostPercent
				initialize LeadTimePeriods
				initialize MaximumDailyIssues
				initialize MedianLeadTime
				initialize LeadTimeDataPoints
				initialize PurchaseOrderCost
				initialize ReceivingDays
				initialize ReceivingCost
				initialize OrderDays
				initialize StockoutEvents
				initialize StockoutDays
				initialize Turns
				initialize AnalysisDate
				initialize TransactionDays
				initialize OrderDaysSchedule
				initialize ReceivingDaysSchedule
				initialize AverageDailyDemand
				initialize MaxDailyReplenishments
				initialize AverageNonZeroDemand
				initialize TransactionDays
				initialize AverageTransactionDaysPerWeek
				initialize AverageInventoryCost
				initialize SimulatedAverageInventoryCost
				initialize SimulatedAverageStockOnHand
				initialize ActualServiceLevel
				initialize SimulatedServiceLevel
			
















	
		ReplicationAssist is an Update Action
			bypass field rules
			restricted
	
		ValidateAll is a Set Action
			run in background
			restricted
			Instance Selection
				where (Status.Review)
			Action Rules
				Instance Rules
					include UpdateROPDirection
					include UpdateMODirection
					include UpdateROQDirection
					include ValidateRules
					if (LocalRuleErrorNumber entered)
						ValidationResult = LocalRuleErrorNumber
					else
						initialize ValidationResult
	
		ApproveAll is a Set Action
			Parameters
				PrmInventoryLocation	is like InventoryLocation
				PrmMakeInBound			is Boolean
			Local Fields
				LocalActor				is an Actor
			Instance Selection
				where (Status.Review
				and ValidationResult not entered)
			Action Rules
				Set Rules
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "ApproveAllActionCompleted"
							priority is high
				Instance Rules
					if (EditAccess)
						if (PrmMakeInBound 
						and OutOfBounds)
							invoke Review.MakeInBound
						if (!OutOfBounds)
							invoke Review.Approve
								resume on error
									include ValidateRules
									if (LocalRuleErrorNumber entered)
										ValidationResult = LocalRuleErrorNumber
									else
										initialize ValidationResult
									include ValidateForApproveOrSend
									if (LocalErrorNumber entered)
										ValidationResult = LocalErrorNumber
									else
										initialize ValidationResult

		MakeAllItemsInBound is a Set Action
			restricted
			Parameters
				PrmInventoryLocation	is like InventoryLocation
			Instance Selection
				where ((Status.Review
				or Status.None)
				and OutOfBounds
				and InventoryLocation = PrmInventoryLocation)

			Action Rules
				Instance Rules
					if (EditAccess)
						if (Status.Review)
							invoke Review.MakeInBound
						else
							invoke None.MakeInBound
		
		SendAll is a Set Action
			Parameters
				PrmInventoryLocation	is like InventoryLocation
			Local Fields
				LocalActor				is an Actor
			Instance Selection
				where (Status.Approved)
			Action Rules
				Set Rules
					Exit Rules 
						LocalActor = actor
						send notification
							to LocalActor
							description is "SendAllActionCompleted"
							priority is high
				Instance Rules
					if (EditAccess)
						invoke Approved.SendToSource
							resume on error

		ApproveAllAtLocation is a Set Action
			restricted
			Parameters
				PrmInventoryLocation	is like InventoryLocation
				PrmMakeInBound			is Boolean
			Local Fields
				LocalActor				is an Actor
			Instance Selection
				where (Status.Review
				and ValidationResult not entered
				and InventoryLocation = PrmInventoryLocation)
			Action Rules
				Set Rules
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "ApproveAllActionCompleted"
							priority is high
				Instance Rules
					if (EditAccess)
						if (PrmMakeInBound 
						and OutOfBounds)
							invoke Review.MakeInBound
						if (!OutOfBounds)
							invoke Review.Approve
								resume on error
									include ValidateRules
									if (LocalRuleErrorNumber entered)
										ValidationResult = LocalRuleErrorNumber
									else
										initialize ValidationResult
									include ValidateForApproveOrSend
									if (LocalErrorNumber entered)
										ValidationResult = LocalErrorNumber
									else
										initialize ValidationResult
		
		SendAllAtLocation is a Set Action
			restricted
			Parameters
				PrmInventoryLocation	is like InventoryLocation
			Local Fields
				LocalActor				is an Actor
			Instance Selection
				where (Status.Approved
				and InventoryLocation = PrmInventoryLocation)
			Action Rules
				Set Rules
					Exit Rules
						LocalActor = actor
						send notification
							to LocalActor
							description is "SendAllActionCompleted"
							priority is high
				Instance Rules
					if (EditAccess)
						invoke Approved.SendToSource
							resume on error				
							include ValidateForApproveOrSend
							if (LocalErrorNumber entered)
								ValidationResult = LocalErrorNumber
							else
								initialize ValidationResult 
				
		
		Import is an Import Action
			bod type is II_FSM_ItemLocation
      		Parameters
            	InputData is CSVText
      		Action Rules
            	dbimport InputData into IIHItemLocation
            	
		InScope is an Instance Action
			valid when (AllowMoveToInScope)
			Entrance Rules
				if (ItemLocationExclusionRuleRel not exists)
					constraint (false)
						"Action_In_ScopeFailedBecauseThereIsAMoreGeneral_ExclusionRuleExists.PleaseCheck_ExclusionRules"
			Action Rules
				if (ItemLocationExclusionRuleRel exists)
					invoke FastUpdate
						invoked.OutOfScope = false
					invoke Delete ItemLocationExclusionRuleRel
						
		
		OutOfScope is an Instance Action
			valid when (AllowMoveToOutOfScope)
			Action Rules
				invoke FastUpdate
					invoked.OutOfScope = true

				if (ItemLocationExclusionRuleRel not exists)
					invoke Create IIHRule
						invoked.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
						invoked.IIHRuleType = IIHRuleType.Exclusion
						invoked.InventoryCompany = Company
						invoked.InventoryLocation = InventoryLocation
						invoked.ItemRule = true
						invoked.ItemGroup = Company.ItemGroup
						invoked.Item = Item
						invoked.Exclude = true
						invoked.Active = true
			Exit Rules
				if (ItemLocationExclusionRuleRel exists)
					invoke Update ItemLocationExclusionRuleRel
						invoked.Exclude = true
						invoked.Active = true
						if (this instance.ItemLocationExclusionRuleRel.RuleOrder < last ExclusionRulesRel.RuleOrder)
							invoked.NewRuleOrder = last ExclusionRulesRel.RuleOrder















	
		Recommend is an Instance Action
			valid when (EditAccess)
			restricted
			Parameters
				PrmRecommendedReorderPoint 			is an UnsignedQuantity
					precision is Item.NumberOfDecimalsQuantity
				PrmRecommendedMaxOrder				is an UnsignedQuantity
					precision is Item.NumberOfDecimalsQuantity
				PrmRecommendedReorderQuantity		is like UnsignedQuantity
					precision is Item.NumberOfDecimalsQuantity
				PrmRecommendationDate				is TimeStamp
				PrmAnalysisType						is Alpha size 50
				PrmRecommendedAverageSOHChange		is Decimal size 31.6
		        PrmRecommendedOrdersCountChange		is Decimal size 31.6
		        PrmRecommendedTurnsCountChange		is Decimal size 31.6
		        PrmTotalCostSavings					is Decimal size 31.6
		        PrmEconomicOrderQuantityMaxOrder	is Decimal size 31.6
		        PrmUseExtendedData					is Boolean
		        PrmTargetDaysBetweenOrders			is Decimal size 13.4
			Parameter Rules
				PrmRecommendationDate
					default to current timestamp
			Local Fields
				Skip	is Boolean
			Entrance Rules
				include ProcessSkipFlag
			Action Rules
				if (!Skip)
					if (PrmUseExtendedData)
						include SetRecommendedDetailFromExtendedReference
					else
						include SetRecommendedDetailFromParameters
					include UpdateLastReferenceValues
					include EvaluateChange
					include UpdateROPDirection
					include UpdateMODirection
					include UpdateROQDirection
					include UpdateInventoryValues
			Exit Rules
				if (!Skip)
					LInitializeOverride = true
					make transition to Review
	
		UpdateReferenceValues is an Instance Action
			valid when (EditAccess)
			restricted
			Action Rules
				include UpdateLastReferenceValues
				
		Purge is a Purge Action
			restricted
			bypass relational integrity rules
		
		PurgeIIHItemLocation is a Set Action
			restricted
			run in background
			Instance Selection
				where (IIHItemLocation exists)
			Action Rules
				Instance Rules
					invoke Purge IIHItemLocationExtendedRel
					invoke Purge
					
		GenerateDailyData is an Instance Action
			valid when (FillGraphGaps)
			Action Rules
				if (IsPerpetualLocation)
					invoke FillPerpetualDailyData first IIHDailyDataRel	
				else
				if (IsParOrExchangeCart)
					invoke FillParDailyData first IIHDailyDataRel
					
		UpdateGraphGapsFilled is an Update Action
			restricted
		
		InitializeRecommendationFields is a Set Action
			restricted
			Parameters
				PrmItemGroup is an ItemGroup
				PrmItem is an Item
			Instance Selection
				where (Company.ItemGroup = PrmItemGroup
				and    Item = PrmItem
				and    HasRecommendations)
			Action Rules
				Instance Rules
					invoke ClearRecommendation

		MakeInBound is an Instance Action
			valid when (OutOfBoundsAndEditAccess)
			Action Rules
				if (Status.None)
					invoke None.MakeInBound
				else
				if (Status.Review)
					invoke Review.MakeInBound

		AddExclusions is a Set Action
			restricted
			Parameters
				PrmCompany		is like Company
				PrmLocation		is like InventoryLocation
				PrmItemGroup 	is like ItemGroup
				PrmItem			is like Item
			Instance Selection
				where (((PrmCompany entered
				and Company = PrmCompany)
				or PrmCompany not entered)
				and ((PrmLocation entered
				and InventoryLocation = PrmLocation)
				or PrmLocation not entered)
				and ((PrmItemGroup entered
				and Item.ItemGroup = PrmItemGroup)
				or PrmItemGroup not entered)
				and ((PrmItem entered
				and Item = PrmItem)
				or PrmItem not entered))
			Action Rules
				Instance Rules
					OutOfScope = true

		RemoveExclusions is a Set Action
			restricted
			Parameters
				PrmCompany		is like Company
				PrmLocation		is like InventoryLocation
				PrmItemGroup 	is like ItemGroup
				PrmItem			is like Item
			Instance Selection
				where (((PrmCompany entered
				and Company = PrmCompany)
				or PrmCompany not entered)
				and ((PrmLocation entered
				and InventoryLocation = PrmLocation)
				or PrmLocation not entered)
				and ((PrmItemGroup entered
				and Item.ItemGroup = PrmItemGroup)
				or PrmItemGroup not entered)
				and ((PrmItem entered
				and Item = PrmItem)
				or PrmItem not entered))
			Action Rules
				Instance Rules
					OutOfScope = false

	StateCycles
		
		RecommendationStateCycle is a StateCycle
			state field is Status
			
			None is a State
				
				Entrance Rules
					include InitializeRecommendationFields
				
				Create is an Action
					Exit Rules
						include EvaluateChange
						include UpdateROPDirection
						include UpdateMODirection
						include UpdateROQDirection
						include UpdateInventoryValues
				
				Update is an Action
					valid when (EditAccess)
					Exit Rules
						include EvaluateChange
						include UpdateROPDirection
						include UpdateMODirection
						include UpdateROQDirection
						include ValidateRules
						include UpdateInventoryValues
						if (LocalRuleErrorNumber entered)
							ValidationResult = LocalRuleErrorNumber
						else
							initialize ValidationResult
				
				Delete is an Action
					restricted
					valid when (EditAccess)

				MakeInBound is an Instance Action
					valid when (OutOfBoundsAndEditAccess)
					restricted
					Entrance Rules
						initialize LocalDifference
					Action Rules
						if (LowerBoundViolation)
							LocalDifference = LowerBound - ApplicableReorderPoint
							OverrideReorderPoint = LowerBound
							if (IsPerpetualLocation)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									OverrideMaxOrder = ApplicableMaxOrderQuantity + LocalDifference
						else 
							LocalDifference = ApplicableReorderPoint - UpperBound
							OverrideReorderPoint = UpperBound
							if (IsPerpetualLocation)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									OverrideMaxOrder = ApplicableMaxOrderQuantity - LocalDifference
						make transition to Review
				
				RecommendUsingOverride is an Instance Action
					valid when (EditAccess)
					restricted
					Action Rules

						include UpdateLastReferenceValues
						include EvaluateChange
						include UpdateROPDirection
						include UpdateMODirection
						include UpdateROQDirection
						include UpdateInventoryValues
					Exit Rules
						if (ValidForInventoryValuation and ConsignmentInValuationCheck)
							invoke FastUpdate IIHInventoryLocationRel
								invoked.TargetInventoryValue 		= (IIHInventoryLocationRel.TargetInventoryValue + InventoryValueDifference)
								invoked.UnderReviewValue            = (IIHInventoryLocationRel.UnderReviewValue + InventoryValueDifference)
								if(ROPDirection.Increase)

									invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount + 1)
									invoked.IncreaseReferenceValue 			= (IIHInventoryLocationRel.IncreaseReferenceValue + ItemReferenceInventoryValue)
									invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue + ItemTargetInventoryValue)
									invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService + InventoryValueDifference)
								if(ROPDirection.Decrease)

									invoked.DecreaseItemCount 				= (IIHInventoryLocationRel.DecreaseItemCount + 1)
									invoked.DecreaseReferenceValue 			= (IIHInventoryLocationRel.DecreaseReferenceValue + ItemReferenceInventoryValue)
									invoked.DecreaseTargetValue 			= (IIHInventoryLocationRel.DecreaseTargetValue + ItemTargetInventoryValue)
									invoked.DecreasePotentialSavings 		= (IIHInventoryLocationRel.DecreasePotentialSavings + InventoryValueDifference)
							if (IsPerpetualLocation)
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.PerpetualTargetInvValue					= (IIHLocationsOverviewRel.PerpetualTargetInvValue + InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.PerpetualIncreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount + 1)
										invoked.PerpetualIncreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualIncreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.PerpetualIncreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue + ItemTargetInventoryValue)
										invoked.PerpetualCostOfImprovedService 		= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService + InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.PerpetualDecreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount + 1)
										invoked.PerpetualDecreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualDecreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.PerpetualDecreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue + ItemTargetInventoryValue)
										invoked.PerpetualDecreasePotentialSavings 	= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings + InventoryValueDifference)
							else
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.ParTargetInvValue						= (IIHLocationsOverviewRel.ParTargetInvValue + InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount + 1)
										invoked.ParIncreaseReferenceValue 			= (IIHLocationsOverviewRel.ParIncreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue + ItemTargetInventoryValue)
										invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService + InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.ParDecreaseItemCount 				= (IIHLocationsOverviewRel.ParDecreaseItemCount + 1)
										invoked.ParDecreaseReferenceValue 			= (IIHLocationsOverviewRel.ParDecreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.ParDecreaseTargetValue	 			= (IIHLocationsOverviewRel.ParDecreaseTargetValue + ItemTargetInventoryValue)
										invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings + InventoryValueDifference)
						LInitializeOverride = false
						make transition to Review
						

			Review is a State
				
				Entrance Rules
					if (LInitializeOverride)
						initialize OverrideReorderPoint
						initialize OverrideMaxOrder
						initialize OverrideReorderQuantity
						initialize ValidationResult
						
					initialize ReviewedBy
				
				Update is an Action
					valid when (EditAccess)
					Entrance Rules
						initialize PreviousReferenceInventoryValue
						initialize PreviousTargetInventoryValue
						initialize PreviousInventoryValueChange
						initialize PreviousTargetReorderPoint
						initialize PreviousTargetMaxOrderQuantity
						initialize PreviousTargetOrderQuantity
						PreviousReferenceInventoryValue = old ItemReferenceInventoryValue
						PreviousInventoryValueChange = old InventoryValueDifference
						PreviousROPDirection = old ROPDirection
						PreviousTargetInventoryValue = old ItemTargetInventoryValue
						
					Exit Rules
						include EvaluateChange
						include UpdateROPDirection
						include UpdateMODirection
						include UpdateROQDirection
						include UpdateInventoryValues
						if (ValidForInventoryValuation and ConsignmentInValuationCheck)
							invoke FastUpdate IIHInventoryLocationRel
								invoked.TargetInventoryValue 		= (IIHInventoryLocationRel.TargetInventoryValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
								invoked.UnderReviewValue            = (IIHInventoryLocationRel.UnderReviewValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
								if(PreviousROPDirection != ROPDirection)
									if(ROPDirection.Increase)

										invoked.DecreaseItemCount 				= (IIHInventoryLocationRel.DecreaseItemCount - 1)
										invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount + 1)
										invoked.DecreaseReferenceValue 			= (IIHInventoryLocationRel.DecreaseReferenceValue - PreviousReferenceInventoryValue)
										invoked.IncreaseReferenceValue 			= (IIHInventoryLocationRel.IncreaseReferenceValue + PreviousReferenceInventoryValue)
										invoked.DecreaseTargetValue 			= (IIHInventoryLocationRel.DecreaseTargetValue - PreviousTargetInventoryValue)
										invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue + ItemTargetInventoryValue)
										invoked.DecreasePotentialSavings 		= (IIHInventoryLocationRel.DecreasePotentialSavings - PreviousInventoryValueChange)
										invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService + InventoryValueDifference)
									if(ROPDirection.Decrease)

										invoked.DecreaseItemCount 				= (IIHInventoryLocationRel.DecreaseItemCount + 1)
										invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount - 1)
										invoked.DecreaseReferenceValue 			= (IIHInventoryLocationRel.DecreaseReferenceValue + PreviousReferenceInventoryValue)
										invoked.IncreaseReferenceValue 			= (IIHInventoryLocationRel.IncreaseReferenceValue - PreviousReferenceInventoryValue)
										invoked.DecreaseTargetValue 			= (IIHInventoryLocationRel.DecreaseTargetValue + ItemTargetInventoryValue)
										invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue - PreviousTargetInventoryValue)
										invoked.DecreasePotentialSavings 		= (IIHInventoryLocationRel.DecreasePotentialSavings + InventoryValueDifference)
										invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService - PreviousInventoryValueChange)
								else
									if(ROPDirection.Increase)

										invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
										invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService - PreviousTargetInventoryValue + ItemTargetInventoryValue)
									if(ROPDirection.Decrease)

										invoked.DecreaseTargetValue 			= (IIHInventoryLocationRel.DecreaseTargetValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
										invoked.DecreasePotentialSavings 		= (IIHInventoryLocationRel.DecreasePotentialSavings - PreviousTargetInventoryValue + ItemTargetInventoryValue)
							if (IsPerpetualLocation)
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.PerpetualTargetInvValue 		= (IIHLocationsOverviewRel.PerpetualTargetInvValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
									if(PreviousROPDirection != ROPDirection)
										if(ROPDirection.Increase)
											invoked.PerpetualDecreaseItemCount 				= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount - 1)
											invoked.PerpetualIncreaseItemCount 				= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount + 1)
											invoked.PerpetualDecreaseReferenceValue 		= (IIHLocationsOverviewRel.PerpetualDecreaseReferenceValue - PreviousReferenceInventoryValue)
											invoked.PerpetualIncreaseReferenceValue 		= (IIHLocationsOverviewRel.PerpetualIncreaseReferenceValue + PreviousReferenceInventoryValue)
											invoked.PerpetualDecreaseTargetValue 			= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue - PreviousTargetInventoryValue)
											invoked.PerpetualIncreaseTargetValue 			= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue + ItemTargetInventoryValue)
											invoked.PerpetualDecreasePotentialSavings 		= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings - PreviousInventoryValueChange)
											invoked.PerpetualCostOfImprovedService 			= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService + InventoryValueDifference)
										if(ROPDirection.Decrease)
											invoked.PerpetualDecreaseItemCount 				= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount + 1)
											invoked.PerpetualIncreaseItemCount 				= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount - 1)
											invoked.PerpetualDecreaseReferenceValue 		= (IIHLocationsOverviewRel.PerpetualDecreaseReferenceValue + PreviousReferenceInventoryValue)
											invoked.PerpetualIncreaseReferenceValue 		= (IIHLocationsOverviewRel.PerpetualIncreaseReferenceValue - PreviousReferenceInventoryValue)
											invoked.PerpetualDecreaseTargetValue 			= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue + ItemTargetInventoryValue)
											invoked.PerpetualIncreaseTargetValue 			= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue - PreviousTargetInventoryValue)
											invoked.PerpetualDecreasePotentialSavings 		= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings + InventoryValueDifference)
											invoked.PerpetualCostOfImprovedService 			= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService - PreviousInventoryValueChange)
									else
										if(ROPDirection.Increase)
											invoked.PerpetualIncreaseTargetValue 			= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
											invoked.PerpetualCostOfImprovedService 			= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService - PreviousTargetInventoryValue + ItemTargetInventoryValue)
										if(ROPDirection.Decrease)
											invoked.PerpetualDecreaseTargetValue 			= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
											invoked.PerpetualDecreasePotentialSavings 		= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings - PreviousTargetInventoryValue + ItemTargetInventoryValue)
							else
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.ParTargetInvValue 							= (IIHLocationsOverviewRel.ParTargetInvValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
									if(PreviousROPDirection != ROPDirection)
										if(ROPDirection.Increase)
											invoked.ParDecreaseItemCount 				= (IIHLocationsOverviewRel.ParDecreaseItemCount - 1)
											invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount + 1)
											invoked.ParDecreaseReferenceValue 			= (IIHLocationsOverviewRel.ParDecreaseReferenceValue - PreviousReferenceInventoryValue)
											invoked.ParIncreaseReferenceValue 			= (IIHLocationsOverviewRel.ParIncreaseReferenceValue + PreviousReferenceInventoryValue)
											invoked.ParDecreaseTargetValue 				= (IIHLocationsOverviewRel.ParDecreaseTargetValue - PreviousTargetInventoryValue)
											invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue + ItemTargetInventoryValue)
											invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings - PreviousInventoryValueChange)
											invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService + InventoryValueDifference)
										if(ROPDirection.Decrease)
											invoked.ParDecreaseItemCount 				= (IIHLocationsOverviewRel.ParDecreaseItemCount + 1)
											invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount - 1)
											invoked.ParDecreaseReferenceValue 			= (IIHLocationsOverviewRel.ParDecreaseReferenceValue + PreviousReferenceInventoryValue)
											invoked.ParIncreaseReferenceValue 			= (IIHLocationsOverviewRel.ParIncreaseReferenceValue - PreviousReferenceInventoryValue)
											invoked.ParDecreaseTargetValue 				= (IIHLocationsOverviewRel.ParDecreaseTargetValue + ItemTargetInventoryValue)
											invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue - PreviousTargetInventoryValue)
											invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings + InventoryValueDifference)
											invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService - PreviousInventoryValueChange)
									else
										if(ROPDirection.Increase)
											invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
											invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService - PreviousTargetInventoryValue + ItemTargetInventoryValue)
										if(ROPDirection.Decrease)
											invoked.ParDecreaseTargetValue 				= (IIHLocationsOverviewRel.ParDecreaseTargetValue - PreviousTargetInventoryValue + ItemTargetInventoryValue)
											invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings - PreviousTargetInventoryValue + ItemTargetInventoryValue)
						include ValidateRules
						if (LocalRuleErrorNumber entered)
							ValidationResult = LocalRuleErrorNumber
						else
							initialize ValidationResult
						if (!HasRecommendations
						and Status.Review)
							ReviewedBy = actor
							make transition to Skipped
				
				Skip is an Instance Action
					valid when (EditAccess)
					Action Rules
						ReviewedBy = actor
					Exit Rules
						if (ValidForInventoryValuation and ConsignmentInValuationCheck)
							invoke FastUpdate IIHInventoryLocationRel
								invoked.TargetInventoryValue 	= (IIHInventoryLocationRel.TargetInventoryValue - InventoryValueDifference)
								invoked.UnderReviewValue        = (IIHInventoryLocationRel.UnderReviewValue - InventoryValueDifference)
								if(ROPDirection.Increase)

									invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount - 1)
									invoked.IncreaseReferenceValue 			= (IIHInventoryLocationRel.IncreaseReferenceValue - ItemReferenceInventoryValue)
									invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue - ItemTargetInventoryValue)
									invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService - InventoryValueDifference)
								if(ROPDirection.Decrease)

									invoked.DecreaseItemCount 			= (IIHInventoryLocationRel.DecreaseItemCount - 1)
									invoked.DecreaseReferenceValue 		= (IIHInventoryLocationRel.DecreaseReferenceValue - ItemReferenceInventoryValue)
									invoked.DecreaseTargetValue 		= (IIHInventoryLocationRel.DecreaseTargetValue - ItemTargetInventoryValue)
									invoked.DecreasePotentialSavings 	= (IIHInventoryLocationRel.DecreasePotentialSavings - InventoryValueDifference)
							if (IsPerpetualLocation)
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.PerpetualTargetInvValue 				= (IIHLocationsOverviewRel.PerpetualTargetInvValue - InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.PerpetualIncreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount - 1)
										invoked.PerpetualIncreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualIncreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.PerpetualIncreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue - ItemTargetInventoryValue)
										invoked.PerpetualCostOfImprovedService 		= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService - InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.PerpetualDecreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount - 1)
										invoked.PerpetualDecreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualDecreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.PerpetualDecreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue - ItemTargetInventoryValue)
										invoked.PerpetualDecreasePotentialSavings 	= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings - InventoryValueDifference)
							else
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.ParTargetInvValue 						= (IIHLocationsOverviewRel.ParTargetInvValue - InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount - 1)
										invoked.ParIncreaseReferenceValue 			= (IIHLocationsOverviewRel.ParIncreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue - ItemTargetInventoryValue)
										invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService - InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.ParDecreaseItemCount 				= (IIHLocationsOverviewRel.ParDecreaseItemCount - 1)
										invoked.ParDecreaseReferenceValue 			= (IIHLocationsOverviewRel.ParDecreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.ParDecreaseTargetValue 				= (IIHLocationsOverviewRel.ParDecreaseTargetValue - ItemTargetInventoryValue)
										invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings - InventoryValueDifference)
						make transition to Skipped
						
				
				Approve is an Instance Action
					valid when (AllowApprove)
					Entrance Rules
						if (OutOfBounds)
							confirmation required
								"YouAreAboutToAcceptRecommendationWhichIsViolatingLowerOrUpperBoundRule.WouldYouLikeToContinue?"
						include ValidateRules
						if (LocalRuleErrorNumber entered)
							ValidationResult = LocalRuleErrorNumber
						else
							initialize ValidationResult
						constraint (ValidationResult not entered)
							"<DerivedValidationResult>"
					Action Rules
						include ValidationsForApproveOrSend
						ReviewedBy = actor
					Exit Rules
						make transition to Approved

				MakeInBound is an Instance Action
					valid when (OutOfBoundsAndEditAccess)
					restricted
					Entrance Rules
						initialize LocalDifference
					Action Rules
						if (LowerBoundViolation)
							LocalDifference = LowerBound - ApplicableReorderPoint
							OverrideReorderPoint = LowerBound
							if (IsPerpetualLocation)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									OverrideMaxOrder = ApplicableMaxOrderQuantity + LocalDifference
						else 
							LocalDifference = ApplicableReorderPoint - UpperBound
							OverrideReorderPoint = UpperBound
							if (IsPerpetualLocation)
								if (ReorderQuantityCode.OrderUpToMaximumLevel)
									OverrideMaxOrder = ApplicableMaxOrderQuantity - LocalDifference
			
			Skipped is a State
			
				Entrance Rules
					if (!HasRecommendations)
						initialize RecommendedReorderPoint
						initialize OverrideReorderPoint
						initialize RecommendedMaxOrder
						initialize OverrideMaxOrder
						initialize RecommendedReorderQuantity
						initialize OverrideReorderQuantity
						initialize ValidationResult
						initialize ReviewedBy
						make transition to None
						
					
				Review is an Instance Action
					valid when (EditAccess)
					Action Rules
						if (ValidForInventoryValuation and ConsignmentInValuationCheck)
							invoke FastUpdate IIHInventoryLocationRel
								invoked.TargetInventoryValue 	= (IIHInventoryLocationRel.TargetInventoryValue + InventoryValueDifference)
								invoked.UnderReviewValue        = (IIHInventoryLocationRel.UnderReviewValue + InventoryValueDifference)
								if(ROPDirection.Increase)

									invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount + 1)
									invoked.IncreaseReferenceValue 			= (IIHInventoryLocationRel.IncreaseReferenceValue + ItemReferenceInventoryValue)
									invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue + ItemTargetInventoryValue)
									invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService + InventoryValueDifference)
								if(ROPDirection.Decrease)

									invoked.DecreaseItemCount 			= (IIHInventoryLocationRel.DecreaseItemCount + 1)
									invoked.DecreaseReferenceValue 		= (IIHInventoryLocationRel.DecreaseReferenceValue + ItemReferenceInventoryValue)
									invoked.DecreaseTargetValue 		= (IIHInventoryLocationRel.DecreaseTargetValue + ItemTargetInventoryValue)
									invoked.DecreasePotentialSavings 	= (IIHInventoryLocationRel.DecreasePotentialSavings + InventoryValueDifference)
							if (IsPerpetualLocation)
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.PerpetualTargetInvValue 				= (IIHLocationsOverviewRel.PerpetualTargetInvValue + InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.PerpetualIncreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount + 1)
										invoked.PerpetualIncreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualIncreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.PerpetualIncreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue + ItemTargetInventoryValue)
										invoked.PerpetualCostOfImprovedService 		= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService + InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.PerpetualDecreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount + 1)
										invoked.PerpetualDecreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualDecreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.PerpetualDecreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue + ItemTargetInventoryValue)
										invoked.PerpetualDecreasePotentialSavings 	= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings + InventoryValueDifference)
							else
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.ParTargetInvValue 						= (IIHLocationsOverviewRel.ParTargetInvValue + InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount + 1)
										invoked.ParIncreaseReferenceValue 			= (IIHLocationsOverviewRel.ParIncreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue + ItemTargetInventoryValue)
										invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService + InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.ParDecreaseItemCount 				= (IIHLocationsOverviewRel.ParDecreaseItemCount + 1)
										invoked.ParDecreaseReferenceValue 			= (IIHLocationsOverviewRel.ParDecreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.ParDecreaseTargetValue 				= (IIHLocationsOverviewRel.ParDecreaseTargetValue + ItemTargetInventoryValue)
										invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings + InventoryValueDifference)
						LInitializeReReview = true
						make transition to Review
						
				
				Approve is an Instance Action
					valid when (AllowApprove)
					Entrance Rules
						if (OutOfBounds)
							confirmation required
								"YouAreAboutToAcceptRecommendationWhichIsViolatingLowerOrUpperBoundRule.WouldYouLikeToContinue?"
						include ValidateRules
						if (LocalRuleErrorNumber entered)
							ValidationResult = LocalRuleErrorNumber
						else
							initialize ValidationResult
						constraint (ValidationResult not entered)
							"<DerivedValidationResult>"
					Action Rules
						include ValidationsForApproveOrSend
						ReviewedBy = actor
					Exit Rules
						if (ValidForInventoryValuation and ConsignmentInValuationCheck)
							invoke FastUpdate IIHInventoryLocationRel
								invoked.TargetInventoryValue 	= (IIHInventoryLocationRel.TargetInventoryValue + InventoryValueDifference)
								invoked.UnderReviewValue		= (IIHInventoryLocationRel.UnderReviewValue + InventoryValueDifference)
								if(ROPDirection.Increase)

									invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount + 1)
									invoked.IncreaseReferenceValue 			= (IIHInventoryLocationRel.IncreaseReferenceValue + ItemReferenceInventoryValue)
									invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue + ItemTargetInventoryValue)
									invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService + InventoryValueDifference)
								if(ROPDirection.Decrease)

									invoked.DecreaseItemCount 			= (IIHInventoryLocationRel.DecreaseItemCount + 1)
									invoked.DecreaseReferenceValue 		= (IIHInventoryLocationRel.DecreaseReferenceValue + ItemReferenceInventoryValue)
									invoked.DecreaseTargetValue 		= (IIHInventoryLocationRel.DecreaseTargetValue + ItemTargetInventoryValue)
									invoked.DecreasePotentialSavings 	= (IIHInventoryLocationRel.DecreasePotentialSavings + InventoryValueDifference)
							if (IsPerpetualLocation)
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.PerpetualTargetInvValue 				= (IIHLocationsOverviewRel.PerpetualTargetInvValue + InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.PerpetualIncreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount + 1)
										invoked.PerpetualIncreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualIncreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.PerpetualIncreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue + ItemTargetInventoryValue)
										invoked.PerpetualCostOfImprovedService 		= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService + InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.PerpetualDecreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount + 1)
										invoked.PerpetualDecreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualDecreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.PerpetualDecreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue + ItemTargetInventoryValue)
										invoked.PerpetualDecreasePotentialSavings 	= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings + InventoryValueDifference)
							else
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.ParTargetInvValue 						= (IIHLocationsOverviewRel.ParTargetInvValue + InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount + 1)
										invoked.ParIncreaseReferenceValue 			= (IIHLocationsOverviewRel.ParIncreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue + ItemTargetInventoryValue)
										invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService + InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.ParDecreaseItemCount 				= (IIHLocationsOverviewRel.ParDecreaseItemCount + 1)
										invoked.ParDecreaseReferenceValue 			= (IIHLocationsOverviewRel.ParDecreaseReferenceValue + ItemReferenceInventoryValue)
										invoked.ParDecreaseTargetValue 				= (IIHLocationsOverviewRel.ParDecreaseTargetValue + ItemTargetInventoryValue)
										invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings + InventoryValueDifference)
						make transition to Approved
						
				
			Approved is a State
			
				Review is an Instance Action
					valid when (EditAccess)
					Action Rules
						LInitializeReReview = true
						make transition to Review
				
				Skip is an Instance Action
					valid when (EditAccess)
					Action Rules
						ReviewedBy = actor
					Exit Rules
						if (ValidForInventoryValuation and ConsignmentInValuationCheck)
							invoke FastUpdate IIHInventoryLocationRel
								invoked.TargetInventoryValue 	= (IIHInventoryLocationRel.TargetInventoryValue - InventoryValueDifference)
								invoked.UnderReviewValue        = (IIHInventoryLocationRel.UnderReviewValue - InventoryValueDifference)
								if(ROPDirection.Increase)

									invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount - 1)
									invoked.IncreaseReferenceValue 			= (IIHInventoryLocationRel.IncreaseReferenceValue - ItemReferenceInventoryValue)
									invoked.IncreaseTargetValue 			= (IIHInventoryLocationRel.IncreaseTargetValue - ItemTargetInventoryValue)
									invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService - InventoryValueDifference)
								if(ROPDirection.Decrease)

									invoked.DecreaseItemCount 			= (IIHInventoryLocationRel.DecreaseItemCount - 1)
									invoked.DecreaseReferenceValue 		= (IIHInventoryLocationRel.DecreaseReferenceValue - ItemReferenceInventoryValue)
									invoked.DecreaseTargetValue 		= (IIHInventoryLocationRel.DecreaseTargetValue - ItemTargetInventoryValue)
									invoked.DecreasePotentialSavings	= (IIHInventoryLocationRel.DecreasePotentialSavings - InventoryValueDifference)
							if (IsPerpetualLocation)
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.PerpetualTargetInvValue 				= (IIHLocationsOverviewRel.PerpetualTargetInvValue - InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.PerpetualIncreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount - 1)
										invoked.PerpetualIncreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualIncreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.PerpetualIncreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualIncreaseTargetValue - ItemTargetInventoryValue)
										invoked.PerpetualCostOfImprovedService 		= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService - InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.PerpetualDecreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount - 1)
										invoked.PerpetualDecreaseReferenceValue 	= (IIHLocationsOverviewRel.PerpetualDecreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.PerpetualDecreaseTargetValue 		= (IIHLocationsOverviewRel.PerpetualDecreaseTargetValue - ItemTargetInventoryValue)
										invoked.PerpetualDecreasePotentialSavings 	= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings - InventoryValueDifference)
							else
								invoke FastUpdate IIHLocationsOverviewRel
									invoked.ParTargetInvValue 						= (IIHLocationsOverviewRel.ParTargetInvValue - InventoryValueDifference)
									if(ROPDirection.Increase)
										invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount - 1)
										invoked.ParIncreaseReferenceValue 			= (IIHLocationsOverviewRel.ParIncreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.ParIncreaseTargetValue 				= (IIHLocationsOverviewRel.ParIncreaseTargetValue - ItemTargetInventoryValue)
										invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService - InventoryValueDifference)
									if(ROPDirection.Decrease)
										invoked.ParDecreaseItemCount 				= (IIHLocationsOverviewRel.ParDecreaseItemCount - 1)
										invoked.ParDecreaseReferenceValue 			= (IIHLocationsOverviewRel.ParDecreaseReferenceValue - ItemReferenceInventoryValue)
										invoked.ParDecreaseTargetValue 				= (IIHLocationsOverviewRel.ParDecreaseTargetValue - ItemTargetInventoryValue)
										invoked.ParDecreasePotentialSavings 		= (IIHLocationsOverviewRel.ParDecreasePotentialSavings - InventoryValueDifference)
						make transition to Skipped
						
				
				SendToSource is an Instance Action
					default label is "SendToItemLocation"
					valid when (EditAccess)
					Entrance Rules
						initialize PreviousInventoryValueChange
						initialize PreviousROPDirection
						initialize LatestProcessResult
						PreviousInventoryValueChange 	= InventoryValueDifference
						PreviousROPDirection			= ROPDirection
						LatestProcessResult				= first IIProcessResultRel.InventoryIntelligenceProcessResult
					Action Rules
						log untranslatable:"InventoryIntelligenceRecommendationAccepted"
						include ValidationsForApproveOrSend
						SentBy = actor
						invoke UpdateIIHRecommendations ItemLocationRel
							if (HasReorderRecommendations)
								if (OverrideReorderPoint entered)
									invoked.PrmReorderPoint			= OverrideReorderPoint
								else
									invoked.PrmReorderPoint			= RecommendedReorderPoint
							if (HasMaxOrderRecommendations)
								if (OverrideMaxOrder entered)
									invoked.PrmMaximumOrderQuantity	= OverrideMaxOrder
								else
									invoked.PrmMaximumOrderQuantity	= RecommendedMaxOrder
							if (HasReorderQuantityRecommendations)
								if (OverrideReorderQuantity entered)
									invoked.PrmReorderQuantity	= OverrideReorderQuantity
								else
									invoked.PrmReorderQuantity	= RecommendedReorderQuantity
					Exit Rules
						SentToSource = current timestamp
						make transition to Sent
						if (ValidForInventoryValuation and ConsignmentInValuationCheck)
							invoke FastUpdate IIHInventoryLocationRel
								invoked.UnderReviewValue 		= IIHInventoryLocationRel.UnderReviewValue - PreviousInventoryValueChange
								invoked.AchievedSoFarValue		= IIHInventoryLocationRel.AchievedSoFarValue + PreviousInventoryValueChange
								if(PreviousROPDirection.Increase)
									invoked.IncreaseItemCount 				= (IIHInventoryLocationRel.IncreaseItemCount - 1)

									invoked.IncreaseCostOfImprovedService 	= (IIHInventoryLocationRel.IncreaseCostOfImprovedService - PreviousInventoryValueChange)
									invoked.IncreaseCostSoFar 				= (IIHInventoryLocationRel.IncreaseCostSoFar + PreviousInventoryValueChange)
								if(PreviousROPDirection.Decrease)

									invoked.DecreaseItemCount 			= (IIHInventoryLocationRel.DecreaseItemCount - 1)
									invoked.DecreasePotentialSavings 	= (IIHInventoryLocationRel.DecreasePotentialSavings - PreviousInventoryValueChange)
									invoked.DecreaseAchievedSoFar 		= (IIHInventoryLocationRel.DecreaseAchievedSoFar + PreviousInventoryValueChange)
									
							if (IsPerpetualLocation)
								invoke FastUpdate IIHLocationsOverviewRel
									if(PreviousROPDirection.Increase)
										invoked.PerpetualIncreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualIncreaseItemCount - 1)
										invoked.PerpetualCostOfImprovedService 		= (IIHLocationsOverviewRel.PerpetualCostOfImprovedService - PreviousInventoryValueChange)
										invoked.PerpetualIncreaseCostSoFar 			= (IIHLocationsOverviewRel.PerpetualIncreaseCostSoFar + PreviousInventoryValueChange)
									if(PreviousROPDirection.Decrease)
										invoked.PerpetualDecreaseItemCount 			= (IIHLocationsOverviewRel.PerpetualDecreaseItemCount - 1)
										invoked.PerpetualDecreasePotentialSavings 	= (IIHLocationsOverviewRel.PerpetualDecreasePotentialSavings - PreviousInventoryValueChange)
										invoked.PerpetualDecreaseAchievedSoFar 		= (IIHLocationsOverviewRel.PerpetualDecreaseAchievedSoFar + PreviousInventoryValueChange)
							else
								invoke FastUpdate IIHLocationsOverviewRel
									if(PreviousROPDirection.Increase)
										invoked.ParIncreaseItemCount 				= (IIHLocationsOverviewRel.ParIncreaseItemCount - 1)
										invoked.ParIncreaseCostOfImprovedService 	= (IIHLocationsOverviewRel.ParIncreaseCostOfImprovedService - PreviousInventoryValueChange)
										invoked.ParIncreaseCostSoFar 				= (IIHLocationsOverviewRel.ParIncreaseCostSoFar + PreviousInventoryValueChange)
									if(PreviousROPDirection.Decrease)
										invoked.ParDecreaseItemCount 			= (IIHLocationsOverviewRel.ParDecreaseItemCount - 1)
										invoked.ParDecreasePotentialSavings 	= (IIHLocationsOverviewRel.ParDecreasePotentialSavings - PreviousInventoryValueChange)
										invoked.ParDecreaseAchievedSoFar 		= (IIHLocationsOverviewRel.ParDecreaseAchievedSoFar + PreviousInventoryValueChange)
									
							invoke Update IIHLocationAdjustmentHistoryRel
								if (IsPerpetualLocation)
									if (PreviousROPDirection.Increase)
										if (Consignment)
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.PerpetualCostForAllItems			= (IIHLocationAdjustmentHistoryRel.PerpetualCostForAllItems + PreviousInventoryValueChange)
										else
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.PerpetualCostForAllItems			= (IIHLocationAdjustmentHistoryRel.PerpetualCostForAllItems + PreviousInventoryValueChange)
											invoked.PerpetualCostForNonConsignment		= (IIHLocationAdjustmentHistoryRel.PerpetualCostForNonConsignment + PreviousInventoryValueChange)
									if (PreviousROPDirection.Decrease)
										if (Consignment)
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.PerpetualSavingForAllItems			= (IIHLocationAdjustmentHistoryRel.PerpetualSavingForAllItems + PreviousInventoryValueChange)
										else
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.PerpetualSavingForAllItems			= (IIHLocationAdjustmentHistoryRel.PerpetualSavingForAllItems + PreviousInventoryValueChange)
											invoked.PerpetualSavingForNonConsignment	= (IIHLocationAdjustmentHistoryRel.PerpetualSavingForNonConsignment + PreviousInventoryValueChange)
								else
									if (PreviousROPDirection.Increase)
										if (Consignment)
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.ParCostForAllItems					= (IIHLocationAdjustmentHistoryRel.ParCostForAllItems + PreviousInventoryValueChange)
										else
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.ParCostForAllItems					= (IIHLocationAdjustmentHistoryRel.ParCostForAllItems + PreviousInventoryValueChange)
											invoked.ParCostForNonConsignment			= (IIHLocationAdjustmentHistoryRel.ParCostForNonConsignment + PreviousInventoryValueChange)
									if (PreviousROPDirection.Decrease)
										if (Consignment)
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.ParSavingForAllItems				= (IIHLocationAdjustmentHistoryRel.ParSavingForAllItems + PreviousInventoryValueChange)
										else
											invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
											invoked.InventoryIntelligenceProcessResult	= LatestProcessResult
											invoked.Company   							= Company
											invoked.IIHInventoryLocation				= InventoryLocation
											invoked.ParSavingForAllItems				= (IIHLocationAdjustmentHistoryRel.ParSavingForAllItems + PreviousInventoryValueChange)
											invoked.ParSavingForNonConsignment			= (IIHLocationAdjustmentHistoryRel.ParSavingForNonConsignment + PreviousInventoryValueChange)
				
			Sent is a State
			
				Review is an Instance Action
					valid when (EditAccess)
					Action Rules
						LInitializeReReview = true
						make transition to Review
