Lease is a BusinessClass
    owned by lm
    prefix is LSE
    classic name is LMLEASE
    
    Ontology
        symbolic key is Lease
            classic set name is LSESET1
            
    Patterns
        implements StaticJava
		implements Archivable
        disable AuditIndex

    Persistent Fields

        Description
        Status                     is Numeric size 2
            States
                Unreleased			value is 0
                Released			value is 1
                Closed				value is 2
				Termination			value is 3
					default label is "TerminationInProgress"
 				Modify				value is 5
 					default label is "ModificationInProgress"
				LeaseAdjustments     value is 6
					default label is "LeaseAdjustmentInProgress"


                Impairment   		value is 7
                	default label is "ImpairmentInProgress"
				Deactivated 		value is 8
                Terminated			value is 9
				Processing			value is 4
					default label is "CreatingAmortization"
		LeaseObjID 					is an ObjId	               
		LeaseAccountingMethod
        LeaseClassification
            classic name is LEASE-CLASS
        LeaseType
        BeginDate                  	is an ExchangeDate
        EndDate                   	is Date
        Currency					is a FromCurrency  
            classic name is CURRENCY-CODE
        CurrencyNumberOfDecimals                                        
            classic name is CURR-ND
        BaseCurrency				is a ToCurrency			
        BaseCurrencyRate										
            classic name is BASE-CURR-RATE
        BaseNumberOfDecimals                                            
            classic name is BASE-ND
        Simulated                  is Boolean
        TerminateDate              is Date
        	default label is "TerminationDate"
        DeactivateDate             is Date
        Ownership              	   is Boolean 				
			classic name is OWNERSHIP-FLAG
        GuaranteedAmount           is a CurrencyExchangeGroup
            classic name is GUARANTEED-AMT
        UnguaranteedAmount         is a CurrencyExchangeGroup
            classic name is UNGUARANTD-AMT
        BargainPurchaseAmount      is a CurrencyExchangeGroup
            classic name is BARG-PURCH-AMT
        NetPresentValue            is a CurrencyExchangeGroup
            classic name is NET-PRES-VALUE
        FairMarketValue            is a CurrencyExchangeGroup
            classic name is FAIR-MKT-VALUE
        LeaseObligation            is a CurrencyExchangeGroup
            classic name is LEASE-OBLIG
		LandAndBuilding					is Numeric 1 
			States
				LandOnly				value is 1	
				LandAndBuildingLease	value is 2
				Neither					value is 0
        LandValue                  is a CurrencyExchangeGroup
        BuildingValue              is a CurrencyExchangeGroup
            classic name is BLDG-VALUE
        TaxCreditAmount            is a CurrencyExchangeGroup
            classic name is TAX-CREDIT-AMT
        TotalLife                  is a Life
        RemainingLife              is a Life
        Lessor                     is a Vendor
        Term
        PaymentsPerYear
            classic name is PMTS-PER-YEAR
        PaymentTiming
            classic name is PMT-TIMING
        InterestRate
        ImplicitInterestRate
            classic name is IMPLICIT-RATE
        FirstPaymentDate           is Date
            classic name is FIRST-PMT-DATE
        LastPaymentDate            is Date
            classic name is LAST-PMT-DATE
        LastPaymentAmount          is an InternationalAmount
            classic name is LAST-PMT-AMT
        SegmentFlag
        Fas13Flag                  is AlphaUpper size 1
            classic name is FAS13-FLAG
            States
                Yes value is "Y"
                No  value is "N"
        LastRunDate                is TimeStamp
        Test7a                     is AlphaUpper size 1  
            States
                Yes value is "Y"
                No  value is "N"
				NotApplicable value is "A"
        Test7b                     is AlphaUpper size 1  
            States
                Yes value is "Y"
                No  value is "N"
        Test7c                     is AlphaUpper size 1  
            States
                Yes           value is "Y"
                No            value is "N"
                NotApplicable value is "A"
        Test7d                     is AlphaUpper size 1  
            States
                Yes           value is "Y"
                No            value is "N"
                NotApplicable value is "A"
        DeferredRentAccount        is a FinanceCodeBlockFull
        DeferredRentBalance        is an InternationalAmount
            classic name is DEF-RENT-BAL
        DeferredRentOverride       is Boolean
            classic name is DEF-RNT-OVRD
        LeaseAllocationCode
            classic name is ALLOC-CD
		OperatingLeaseAllocationCode is a LeaseAllocationCode
        LeaseAllocationCodeType
            classic name is ALLOC-CD-TYPE
        AccruedAccount             is a FinanceCodeBlockFull
        DownPayment                is a CurrencyExchangeGroup
        SecurityDeposit            is a CurrencyExchangeGroup
            classic name is SEC-DEPOSIT
        LeaseInvoicePrefix
            classic name is INV-PREFIX
        DebtAccount                is a FinanceCodeBlockFull
            classic name for DebtAccount.ToAccountingEntity is DEBT-COMPANY
            classic name for DebtAccount.AccountingUnit is DEBT-ACCT-UNIT
            classic name for DebtAccount.GeneralLedgerChartAccount is DEBT-ACCOUNT
            classic name for DebtAccount.Project is DEBT-ACTIVITY
        InterestAccount            is a FinanceCodeBlockFull
            classic name for InterestAccount.ToAccountingEntity is INT-COMPANY
            classic name for InterestAccount.AccountingUnit is INT-ACCT-UNIT
            classic name for InterestAccount.GeneralLedgerChartAccount is INT-ACCOUNT
            classic name for InterestAccount.Project is INT-ACTIVITY
        DefaultDistributionAccount is a FinanceCodeBlockProjectOnly
            classic name for DefaultDistributionAccount.Project is ACTIVITY
        ActualDays				   is Boolean
        	classic name is ACTUAL-DAYS

		SpecializedAsset				is Boolean
		LastDateReviewed				is Date
		InitialDirectCost				is a CurrencyExchangeGroup
		InitialDirectCostVendor			is a Vendor
		ExercisePurchase				is Boolean
		TerminationOption				is Boolean
		ExerciseTermination				is Boolean
		TerminationFee					is an InternationalAmount
		ExtensionOption					is Boolean
		ExerciseExtension				is Boolean
		ExtensionOptionDate				is Date
		LengthOfExtension				is Numeric 5
		NumberOfExtensionOptions        is Numeric 2
		IncentiveAmount					is a CurrencyExchangeGroup
		RelatedPartyLease				is Boolean
		Acquired						is Boolean
		EarlyTerminationDate			is Date
		LongTermOperatingLeaseExpense	is a FinanceCodeBlockFull
			default label is "OperatingLeaseExpense"
		LeaseROUAssetAmount				is a CurrencyExchangeGroup
		DeferredRentsAtAdoption			is an InternationalAmount
		Compounding						is Boolean
		TerminationNonLeaseComponent	is an ExecutoryCostCode
		TerminationGainLossAccount		is a FinanceCodeBlockFull
		LeaseSearchDocument				is Text
			text searchable
			disable Auditing
			default label is "SearchLeases"	

        LeaseObligationAtAdoption       is an InternationalAmount
        	precision is CurrencyNumberOfDecimals
		LeaseROUAmountAtAdoption		is an InternationalAmount
			precision is CurrencyNumberOfDecimals
        BaseLeaseObligationAtAdoption   is an InternationalAmount
        	precision is BaseCurrency.NumberOfDecimals
		BaseLeaseROUAmountAtAdoption	is an InternationalAmount
			precision is BaseCurrency.NumberOfDecimals	
		EquityAccount	                is a FinanceCodeBlockFull
		NumberOfAssets					is Numeric 3
		LeaseCategory												
			default label is "Category"
		OverrideShortTermLease			is Boolean
		OverrideLongTermLease			is Boolean
		LeaseTerm						is a Term
		LeaseAmortizationReport	        is BinaryDocument
		LeaseAmortizationBaseReport     is BinaryDocument
		ShortTermLiabilityAccount    	is a FinanceCodeBlockFull
		LongTermLiabilityAccount     	is a FinanceCodeBlockFull
		SkipFMVTest						is Boolean
			default label is "SkipFairMarketValueTest"
		LeaseAccountingStatement 		is Numeric 2
			States
				842						value is 1
				87						value is 2
				96						value is 3
				16						value is 4

		LessorTransfer 					is Boolean
		PreviousLessor					is a Vendor
		LessorTransferDate              is Date
		ShortTermConversionProcess      is Boolean

		LeaseRateTable

	Local Fields
		LocalCurrencyExchange 					is a CurrencyExchange
		LocalWorkAmount							is an InternationalAmount
		LocalPeriodicRate						is Decimal 11.9
		TempLocalPeriodicRate					is Decimal 11.9
		LocalUpperBound							is Decimal 11.9            
		LocalLowerBound							is Decimal 11.9
		LocalNetPresentValueToFairMarketValue 	is an InternationalAmount
		LocalNetPresentValueLesseeRate			is an InternationalAmount
		Sub										is Numeric 3
		LocalProcess							is AlphaUpper 1
			States
				Test				value is "T"
				NetPresentValue		value is "N"
		Done									is Boolean

		LocalTotalBasis							is an InternationalAmount
		LocalTotalAssets						is an InternationalAmount
		LocalTotalClearingAmount				is an InternationalAmount
		LocalTotalImpairmentAssetAmount			is an InternationalAmount
		LocalTotalImpairmentAmount				is an InternationalAmount
		LocalTotalAdjustmentAmount				is an InternationalAmount
		LocalROUAfterImpairment					is an InternationalAmount
		LocalROUAfterAdjustment                 is an InternationalAmount

		UnreleasedAsset							is Boolean
		AssetWithDifferentClassification		is Boolean

		FAS13LeaseClassification				is a LeaseClassification
        FAS13Test7a                     		is AlphaUpper size 1
            States
                Yes 			value is "Y"
                No  			value is "N"
				NotApplicable 	value is "A"
        FAS13Test7b                    		 	is AlphaUpper size 1
            States
                Yes value is "Y"
                No  value is "N"
        FAS13Test7c                     		is AlphaUpper size 1
            States
                Yes           value is "Y"
                No            value is "N"
                NotApplicable value is "A"
        FAS13Test7d                     		is AlphaUpper size 1
            States
                Yes           value is "Y"
                No            value is "N"
                NotApplicable value is "A"
		FAS13NetPresentValue					is an InternationalCost
		LocalFAS13NetPresentValue				is an InternationalCost
		LocalPeriodsCount						is Numeric size 2
		FAS13LeaseObligation					is an InternationalCost
		FAS13ImplicitInterestRate				is Percent 7.5     
		LocalNetPresentValueImplicitRate	    is an InternationalCost
		LocalAsset								is an Asset
		LocalBook								is a Book		
		OldLessor								is a Vendor
		LocalTransactionAccount					is a FinanceCodeBlock
		LocalTransactionAmount					is an InternationalAmount
		LocalProject							is a Project
		LocalCurrencyAmount						is a CurrencyAmount
		LocalNetChangePV						is an InternationalAmount
		LocalPriorMonthLocalNetChangePV			is an InternationalAmount
		LocalTempNetChangePV					is an InternationalAmount
		LocalNumOfPayments						is Numeric size 4
		LocalPVNumOfPayments					is Numeric size 4
		LocalChangeInNetPresentValue			is an InternationalAmount
		LocalROUAssetAmount						is an InternationalAmount
		LocalInitialROUAssetAmount				is an InternationalAmount
		LocalPaymentInAdvance					is an InternationalAmount
		LocalBeginMonth							is Numeric size 2
		LocalBeginYear							is Numeric size 4
		LocalEndMonth							is Numeric size 2
		LocalEndYear							is Numeric size 4
		LocalTerm								is Numeric size 3
		LocalLeaseRateTable						is a LeaseRateTable
		LocalMaxCount							is Boolean
		LocalFirstTermRate						is Numeric size 3
		LocalLastTermRate						is Numeric size 3
		LocalNumberOfYears						is Numeric size 3
		LocalMonthsToAdd						is Numeric size 3
		LocalNumberOfPayments					is Numeric size 3
		LocalNumberPaymentsOfTerm				is Numeric size 3
		LocalNumberOfYearsTerm					is Decimal 5.2
		LocalTeampRoundingAmount				is Decimal 24.8
		LocalRoundedBaseAmount					is Decimal 24.8
		LocalUseBaseCurrency					is Boolean
		LocalUseLeaseCurrency                   is Boolean
		LocalTempFiscalYear						is Numeric size 4
		LocalLeasePaymentDueDate				is Date
		LocalBeginningROUAmount					is an InternationalAmount
		LocalBeginningBalanceAmount				is an InternationalAmount
		LocalBeginningPrincipalBalance			is an InternationalAmount
		LocalBeginningBalanceInterest			is an InternationalAmount
		LocalROUReduction						is an InternationalAmount
		LocalCurrencyExchangeGroup				is a CurrencyExchangeGroup
    	LocalBaseNetChangeToPresentValue		is an InternationalAmount
    	LocalBaseStraightLineAmount				is an InternationalAmount
		LocalCurrencyBeginningROUAmount			is an InternationalAmount
		LocalCurrencyBeginningBalanceAmount		is an InternationalAmount
		LocalCurrencyBeginningPrincipalBalance	is an InternationalAmount
		LocalCurrencyBeginningBalanceInterest	is an InternationalAmount
		LocalFinanceLeaseROUReduction			is an InternationalAmount
		LocalDueDate							is Date
		LocalLeaseObligation					is an InternationalAmount
		LocalTempLeaseObligation				is an InternationalAmount
		LocalPeriodInterest						is an InternationalAmount
		LocalNumOfPaymentAtAdpotion				is Numeric size 3


		LocalModificationDate					is Date
		LocalNetBasePaymentAmount				is Decimal 24.8
			precision is BaseCurrency.NumberOfDecimals
		LocalNetPaymentAmount					is Decimal 24.8
			precision is CurrencyNumberOfDecimals
		LocalRemainingTerm						is Numeric size 3
		LocalFirstPaymentDueAfterModification	is a DueDate
		LocalTerminateDate						is Date
		LocalTransactionType					is AlphaUpper size 3
		LocalTransactionProcess					is AlphaUpper size 3
		LocalBaseTerminationFee					is an InternationalAmount
		LocalImpairmentDate						is Date
		LocalAdjustmentDate                     is Date
		NumberOfBaseRecToUpdate					is Numeric size 3
		NumberOfCurrencyRecToUpdate				is Numeric size 3
		LocalImpairmentROUBaseAmount			is an InternationalAmount
		LocalAdjustmentROUBaseAmount            is an InternationalAmount
		LocalRenewalROUAmount					is an InternationalAmount
		LocalFirstDueDate						is Date
		LocalPaymentDetailDate					is Date
		LocalStartDay							is Numeric size 2
		LocalStartMonth							is Numeric size 2
		LocalStartYear							is Numeric size 4
		LocalPreviousDueDate					is Date
		LocalPreviousMonth						is Numeric size 2
		LocalPreviousYear						is Numeric size 4
		LocalCheckDate							is Date
		LocalStartDate							is Date
		LocalCheckMonth							is Numeric size 2
		LocalCheckYear							is Numeric size 4
		LocalDateToAdd							is Date
		LocalEquityAmount						is an InternationalAmount

		LocalInitializeEntry					is Boolean

		LocalEndingAmount						is an InternationalAmount
		LocalNewEndingAmount					is an InternationalAmount
		LocalAbsoluteAmount						is an InternationalAmount
		LocalTwoTimesTheTerm					is an InternationalAmount
		LocalUpperLimit							is an InternationalAmount
		LocalLowerLimit							is an InternationalAmount
		LocalInteration							is Numeric size 2
		LocalPresentValueAdjustment				is an InternationalAmount
		RecalculatePV							is Boolean
		LocalLTDDepreciation					is an InternationalAmount
		LocalDerivedInitialROUAssetAmount		is Decimal 24.2
		TestLocalTotalBasis						is Decimal 24.2
		LocalBaseCurrencyTolerance				is an InternationalAmount
		LocalLastPaymentDate					is Date
		LocalResidualFAS13						is an InternationalCost
		RenewalNumber							is Numeric size 2
		LocalLeaseSize							is Numeric size 2
		LocalRenewalLease						is like Lease
		LocalBeginDate                          is Date
		LocalLeaseInvoicePrefix					is like LeaseInvoicePrefix
		LocalCloseLease							is like Lease  


		LocalLedger								is like Ledger
		LocalAccountingEntity					is like AccountingEntity
		LocalAccountingUnit						is like AccountingUnit


		LocalFinanceDimension1					is like FinanceDimension1
		LocalFinanceDimension2					is like FinanceDimension2
		LocalFinanceDimension3					is like FinanceDimension3
		LocalFinanceDimension4					is like FinanceDimension4
		LocalFinanceDimension5					is like FinanceDimension5
		LocalFinanceDimension6					is like FinanceDimension6
		LocalFinanceDimension7					is like FinanceDimension7
		LocalFinanceDimension8					is like FinanceDimension8
		LocalFinanceDimension9					is like FinanceDimension9
		LocalFinanceDimension10					is like FinanceDimension10
		LocalTotalFundTransactionAmount			is an InternationalAmount
		LocalAccumulatedFundAmount				is an InternationalAmount
		LocalPercentContribution				is Percent size 9.6
		LocalNumberOfFunds						is Numeric size 2
		FundCounter								is Numeric size 2
		LocalCreateTerminationInvoice			is Boolean
		LocalAssetAdjustment					is an InternationalAmount
		LoaclLastPaymentPosted					is Date
		LocalLastPaymentPostedNUmber			is Numeric size 6
		LocalCurrentLiabilityAmount				is an InternationalAmount
		LocalCurrentROUAmount					is an InternationalAmount
		LocalCurrentBaseLiabilityAmount			is an InternationalAmount
		LocalCurrentBaseROUAmount				is an InternationalAmount
		LocalCalculateLongTermLiabilityDueDate	is Date
		LocalBaseLongTermLiability				is an InternationalAmount
		LocalBaseShortTermLiability				is an InternationalAmount
		LocalLongTermLiability					is an InternationalAmount
		LocalShortTermLiability					is an InternationalAmount
		LocalShortTermLiabilityAmount			is an InternationalAmount
		LocalLongTermLiabilityAmount			is an InternationalAmount
		LocalShortTermBaseLiabilityAmount		is an InternationalAmount
		LocalLongTermBaseLiabilityAmount		is an InternationalAmount
		LocalBaseLongTermLiabilityReduction		is an InternationalAmount
		LocalBaseShortTermLiabilityReduction	is an InternationalAmount
		LocalLongTermLiabilityReduction			is an InternationalAmount
		LocalShortTermLiabilityReduction        is an InternationalAmount
		LocalIncentiveAmount					is an InternationalAmount
		LocalLease								is like Lease
		LocalCompany 							is like PayablesCompany
		LocalCountAssets						is Numeric size 3
		LocalReportDate							is Date
		LocalWeightedAverageReportResult		is like LeaseWeightedAverageReportResult
		LocalFinanceEnterpriseGroup				is like FinanceEnterpriseGroup
		AsyncId									is a AsyncActionRequest
		LocalConversionDate                     is Date
		StartingLiabilityMonth                  is Date
		EndingLiabilityMonth                    is Date
		LocalConversionTransactionType			is AlphaUpper size 3
		LocalConversionTransactionProcess		is AlphaUpper size 3
		LocalReportDateRange					is a DateRange
		LocalCompanyGroup						is like GeneralLedgerCompanyGroup
		LocalReportDueDate						is Date	
		LocalFiscalYear							is Numeric 4
		LocalPeriod								is Numeric 2
		LocalQuarterPeriod1						is Numeric 2
		LocalQuarterPeriod2						is Numeric 2
		LocalQuarterPeriod3						is Numeric 2
		LocalGLBeginPeriod						is Numeric size 2
		LocalGLEndPeriod						is Numeric size 2
		LocalYear                               is Year
		LocalEffectiveDate						is Date

	Transient Fields		
		TransientDateRange						is a ProjectDateRange
		TransientReportOption					is AlphaUpper size 1
			States
                ReportOnly  	value is "R"
                Update 			value is "U"
		TransientRightToUser					is a FinanceCodeBlock
		TransientLeaseLiability					is a FinanceCodeBlock
		TransientEquity							is a FinanceCodeBlock
		TransientDepreciation					is a FinanceCodeBlock			
		TransientBasis							is an InternationalAmount
		TransientCreateFromCopy                 is Boolean
		TransientStraightLine                   is Boolean
		TransientLeasePaymentDueDay				is Numeric 2

	Context Fields
		TransitionDateRange						is a DateRange
		
					
    Conditions

		DisplayRenewalTerm
			when ((IsGASBLease
			and LengthOfExtension entered)
			or (ASC842Lease
			and ExerciseExtension))

		LeaseAmortizationReportCreated
			restricted
			when (LeaseAmortizationReport entered)
		
		LeaseAmortizationBaseReportCreated
			restricted
			when (LeaseAmortizationBaseReport entered)

		LeaseOrBaseCurrencyAmortizationReportCreated
			restricted
			when (LeaseAmortizationReport entered or LeaseAmortizationBaseReport entered)

		LeaseExists
			restricted 
			when (Lease exists)
		
		LeaseExistsAndUnreleased
			restricted
			when (Lease exists
			and	  IsUnreleased)

    	HasChild
    		restricted
    		when (Lease children exist)

		PromptForRenewal   
    		restricted
    		when (IsMonthToMonthRenewal
    		and ExtensionOption)
    			
    	AllowRenewal
    		restricted
    		when (!HasChild
    		and ExtensionOption
    		and !IsMonthToMonthRenewal
    		and RenewalLeaseHasARenewalRel not exist)





    		
    	EnterNumberAssetsOnLease
    		restricted
    		when (!IsARenewal
    		and NumberOfAssets not entered)

    	EnterAssetsOnLease
    		restricted
    		when (!IsARenewal

    		and NumberOfAssets entered)

    	IsARenewal
    		restricted
    		when (OriginalLease entered)

		HasARenewal
			restricted
			when (LeaseRenewalsRel exists)

    	IsTermRenewal
    		restricted
    		when (OriginalLease entered
    		and Term entered)

		IsMonthToMonthRenewal
			restricted
			when (OriginalLease entered
			and Term not entered)

		AllowTestAction
			restricted
			when (!IsMonthToMonthRenewal
			and !IsGASBLease
			and !IsIFRSLease
			and IsUnreleased)
		
		AllowLeaseCopy
			restricted
			when (!Status.Modify
			and !Status.Impairment 
			and !Status.LeaseAdjustments)

        HasAsset
        	restricted
            when (AssetsRel exists)

        IsFinance
        	restricted
            when (LeaseClassification.Finance)

        HasCurrencyPaymentBalance
        	restricted
            when (first LeaseCurrencyPaymentBalancesRel exists)

        HasCurrencyPaymentPeriodBalance
        	restricted
            when (first LeaseCurrencyPaymentPeriodBalancesRel exists)

        HasLeaseDates
        	restricted
            when (first LeaseDatesRel exists)

        HasExecutoryCostCodes
        	restricted
            when (first LeaseExecutoryCostCodesRel exists)

        HasInvoice
        	restricted
            when (first LeaseInvoicesRel exists)

        HasPaymentBalance
        	restricted
            when (first LeasePaymentBalancesRel exists)

        HasPaymentPeriodBalance
        	restricted
            when (first LeasePaymentPeriodBalancesRel exists)

        HasPaymentDetail
        	restricted
            when (first LeasePaymentDetailsRel exists)

        HasPayment
        	restricted
            when (LeasePaymentsRel exists)

        HasLeaseTransactions
        	restricted
            when (first LeaseTransactionsRel exists)

        HasClosedOrTerminatedTransactions
            classic name is LMTRANS2
            restricted
            when (first LeaseTransactionsRel exists
            and  (Status.Closed
            or    Status.Terminated))

        IsOperating
        	restricted
            when (LeaseClassification.Operating)

        IsReleased
        	restricted
            when (Status.Released)

        IsSimulated
        	restricted
            when (Simulated)

        IsTerminated
        	restricted
            when (Status.Closed
            or    Status.Terminated)

        HasTerminationDate
        	restricted
            when (Status.Terminated)
 
        HasClosedDate
        	restricted
            when (Status.Closed)

        HasClosedDateOrMonthToMonth
        	restricted
            when (Status.Closed
            or IsMonthToMonthRenewal)

		HasLeaseExecutoryCostCode
			restricted
			when (LeaseExecutoryCostCodesRel exists)
            
		IsExtended
        	restricted
        	when (ExerciseExtension)

        IsTerminatedNotOperating
        	restricted
            when ((Status.Closed
            or    Status.Terminated)
            and  not LeaseClassification.Operating)

        IsDeactivated
        	restricted
            when (Status.Deactivated)

        IsDeactivatedNotOperating
        	restricted
            when (Status.Deactivated
            and   not LeaseClassification.Operating)

        IsUnclassified
        	restricted
            when (not LeaseClassification.Operating
            and   not LeaseClassification.Finance)

        IsUnreleased
        	restricted
            when (Status.Unreleased)

        IsModificationInProgress
        	restricted
            when (Status.Modify)
            
        IsImpairmentInProgress
        	restricted
        	when (Status.Impairment)

		IsAdjustmentInProgress
        	restricted
        	when (Status.LeaseAdjustments)

        IsNotModificationInProgress
        	restricted
            when (!Status.Modify)
            
        IsInProgress
        	restricted
        	when (Status.Modify
			or    Status.Impairment
			or    Status.Termination
			or    Status.LeaseAdjustments)

		HasLeaseModifications
			restricted
			when (LeaseModificationRel exists)

		AllowModificcation
			restricted
			when (!IsMonthToMonthRenewal
			and  (Status.Released
			and !HasLeaseImpairments
			and !HasLeaseAdjustments
			and (LeaseClassification.Finance
			and  !ShortTermGASBLease
			and  !ShortTermIFRS
			or (LeaseClassification.Operating
			and !IsShortTermLease))))

		HasLeaseImpairments
			restricted
			when (LeaseImpairmentRel exists)

		HasLeaseAdjustments
			restricted
			when (LeaseAdjustmentRel exists)

		HasAccruedPaymentDetail
			restricted
			when (first AccruedPaymentDetailsRel exists)
			
		HasZeroPaymentDetail
			restricted
			when (first ZeroPaymentDetailsRel exists)
			
        EitherUnreleasedOrReleased
        	restricted
            when (Status.Unreleased
            or    Status.Released)

  		FAS13Test7cNotApplicable
  			restricted
  			when (!FAS13Test7c.NotApplicable)

  		FAS13Test7dNotApplicable
  			restricted
  			when (!FAS13Test7d.NotApplicable)

  		TermMoreThanTwelve
  			restricted
  			when (Term > 12)

  		LandOnlyLease
  			restricted
  			when (LandAndBuilding.LandOnly)  			

		WithinEndDateRange
			restricted
			when (TransitionDateRange not entered
			or   (TransitionDateRange entered
		    and   EndDate within TransitionDateRange))  			

		WithinBeginDateRange
			restricted
			when (TransitionDateRange not entered
			or	 (TransitionDateRange entered
			and	  BeginDate within TransitionDateRange))

		WithinLeaseReportRange
			restricted
			when (WithinEndDateRange
			and   WithinBeginDateRange)

		WithinLeaseNewDebtReportRange
			restricted
			when (TransitionDateRange not entered
			or   (TransitionDateRange entered
		    and   BeginDate within TransitionDateRange)) 

		IsLongTermOperatingLease
			restricted
			when (LongTermOperatingLease)

		LongTermOperatingLeaseRenewal
			restricted
    		when (OriginalLease entered
    		and TotalLeaseTerm > 13
    		and LeaseClassification.Operating
    		and !IsMonthToMonthRenewal)

		IsOverridingShortTermLease
			restricted 
			when (OverrideShortTermLease
			or   (LeaseType.AmortizeShortTermLeases
			and   LeaseClassification.Operating))
			
		CanOverrideShortTermLease
			restricted
			when ((IsShortTermOperatingLease
			and    !IsOverridingLongTermLease)
			or   (IsLongTermOperatingLease 
			and   IsOverridingShortTermLease))
			
		CanOverrideLongTermLease
			restricted
			when ((IsLongTermOperatingLease
			and    !IsOverridingShortTermLease)
			or   (IsShortTermOperatingLease
			and   IsOverridingLongTermLease))
			
		IsOverridingLongTermLease
			restricted
			when (OverrideLongTermLease)
			
		IsShortTermOperatingLease
			restricted
			when ((LeaseClassification.Operating
			and TotalLeaseTerm < 13
			and !IsOverridingShortTermLease)
			or  IsOverridingLongTermLease)

		IsShortTermLease

			when ((TotalLeaseTerm < 13
			and LeaseClassification.Operating
			and !IsOverridingShortTermLease)
			or IsShortTermBasedOnLeaseType
			or IsOverridingLongTermLease)
		
		IsShortTermBasedOnLeaseType
			restricted
			when (LeaseType.ClassifyBasedOnTerm and TotalLeaseTerm < 13)

		IsLeaseWithROU
			restricted
			when (LongTermOperatingLease
			or  LeaseClassification.Finance
			and (InitialDirectCost.TransactionAmount entered
			or LeaseInitialDirectCostRel.LeaseInitialDirectCost entered
			or IncentiveAmount.TransactionAmount entered
			or DownPayment.TransactionAmount entered))

		IsGoingToBeLeaseWithROU
			restricted
			when (InitialDirectCost.TransactionAmount entered
			or LeaseInitialDirectCostRel.LeaseInitialDirectCost entered
			or IncentiveAmount.TransactionAmount entered
			or DownPayment.TransactionAmount entered)

		IsGoingToBeLongTermOperatingLease
			restricted
			when (!HasAsset)

		ExpirationDateYellowAlert
			restricted
			when (ExtensionOptionDate entered
			and   current corporate date >= YellowAlertDate

			and   ExtensionOptionDate >=  current corporate date 
			and   Lease.Status.Released)
	
		IsValidForActorContext
			restricted
			when (Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		
		HasLeaseType
			restricted
			when (LeaseType exists)
			
		ExpirationDateRedAlert
			restricted
			when (ExtensionOptionDate entered
			and   current corporate date >= RedAlertDate
			and   RedAlertDate <= ExtensionOptionDate
			and   Lease.Status.Released)
					
		HasAmortizationSchedule
			restricted
			when (LeasePaymentBalancesRel exist
			and   last LeasePaymentBalancesRel.BeginningROUAmount entered)
			
		HasBaseCurrencyAmortizationSchedule
			restricted
			when (LeasePaymentBalancesRel exist
			and   last LeasePaymentBalancesRel.BeginningROUAmount entered
			and   Currency != BaseCurrency)

		CanReleaseModification
			restricted
			when (IsModificationInProgress
			and	  first ModificationInProgressRel.AmortizationRecalculated)
		
		MustRecalculateAmortization
			restricted
			when (IsModificationInProgress
			and	  !first ModificationInProgressRel.AmortizationRecalculated)

		HasLTOLExpenseAccount
			when (LongTermOperatingLeaseExpense entered)
			
		HasDeferredRentAccount
			when (DeferredRentAccount.GeneralLedgerChartAccount entered)
			
		ASC842Lease
			when (LeaseAccountingMethod.ASC842)
			
		IsLeaseAccountingMethodGASB87
			when (LeaseAccountingMethod.GASB87)

		ShortTermGASB87
			when (LeaseAccountingMethod.GASB87
			and TotalLeaseTerm < 13)

		IsCompanyLeaseAccountingGASB96
			when (LeaseAccountingMethod.GASB96)

		ShortTermGASBLease
			when (Company.AccountingEntity.LeaseAccountingStandard.GASB
			and   TotalLeaseTerm < 13)
			
		IsGASBLease
			when (Company.AccountingEntity.LeaseAccountingStandard.GASB)

		IsIFRSLease
			when (Company.AccountingEntity.LeaseAccountingStandard.IFRS)
			
		ShortTermIFRS
			when (Company.AccountingEntity.LeaseAccountingStandard.IFRS
			and   !ExercisePurchase
			and   TotalLeaseTerm < 13)

		EndingResidual
			when (PaymentTiming.EndOfPeriod
			and GuaranteedAmount.TransactionAmount entered)

		EndingResidualOrPurchaseOption
			when (PaymentTiming.EndOfPeriod
			and  (GuaranteedAmount.TransactionAmount entered
			or   (BargainPurchaseAmount.TransactionAmount entered
			and   ExercisePurchase)))

		BeginningResidual
			when (PaymentTiming.BeginningOfPeriod
			and GuaranteedAmount.TransactionAmount entered)

		BeginningResidualOrPurchaseOption
			when (PaymentTiming.BeginningOfPeriod
			and  (GuaranteedAmount.TransactionAmount entered
			or   (BargainPurchaseAmount.TransactionAmount entered
			and   ExercisePurchase)))

		HasEndingBargainPurchaseOption
			when (PaymentTiming.EndOfPeriod
			and   BargainPurchaseAmount.TransactionAmount entered
			and   ExercisePurchase)
		
		HasBeginningBargainPurchaseOption
			when (PaymentTiming.BeginningOfPeriod
			and   BargainPurchaseAmount.TransactionAmount entered
			and   ExercisePurchase)
			
		ImpairmentAllowed
			when ((IsGASBLease
			and !ShortTermGASBLease)
			or  (IsIFRSLease
			and !ShortTermIFRS)
			and !IsMonthToMonthRenewal
			or LongTermOperatingLease
			or (LeaseClassification.Finance
			and (LeaseCategory.Depreciable
			or first AssetsRel.Asset.AssetCategory.Depreciable)))

		AdjustmentAllowed
			when ((IsGASBLease
			and !ShortTermGASBLease)
			or  (IsIFRSLease
			and !ShortTermIFRS)
			and !IsMonthToMonthRenewal
			or LongTermOperatingLease
			or (LeaseClassification.Finance
			and (LeaseCategory.Depreciable
			or first AssetsRel.Asset.AssetCategory.Depreciable)))
		
		LastPaymentOnEndDateWithResidual  
			when ((BeginningResidual
			or HasBeginningBargainPurchaseOption)
			and last LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate = EndDate)

		LastPaymentNotOnEndDateWithResidual  
			when ((EndingResidual
			or HasEndingBargainPurchaseOption)
			and last LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate != EndDate)
			
		HasSublease
			restricted
			when (SubleaseRel exists)
			
		EndDateAlert	
			restricted
			when (current corporate date + 30 >= EndDate
			and   Lease.Status.Released)
			
		LeaseStatusInProgress
			restricted 
			when (Status.Modify
			or    Status.Impairment
			or    Status.LeaseAdjustments)
			
		IsSameCurrencyAndTaxCreditEntered
			restricted
			when (Currency != BaseCurrency
			and   TaxCreditAmount.TransactionAmount entered)
		
		IsSameCurrencyAndSecurityDepositEntered
			restricted
			when (Currency != BaseCurrency
			and    SecurityDeposit.TransactionAmount entered)
			
		IsSameCurrencyAndDownPaymentEntered
			restricted 
			when (Currency != BaseCurrency
			and    DownPayment.TransactionAmount entered)
			
		IsSameCurrencyAndIncentiveEntered
			restricted 
			when (Currency != BaseCurrency	
			and    IncentiveAmount.TransactionAmount entered)

		IsSameCurrencyAndInitialDirectCostEntered
			restricted 
			when (Currency != BaseCurrency		
			and    InitialDirectCost.TransactionAmount entered)
			
		IsSameCurrencyAndBargainPurchaseEntered
			restricted 
			when (Currency != BaseCurrency
			and    BargainPurchaseAmount.TransactionAmount entered)
			
		IsSameCurrencyAndGuaranteedAmountEntered
			restricted 
			when (Currency != BaseCurrency
			and    GuaranteedAmount.TransactionAmount entered)
		
		IsSameCurrencyAndUnguaranteedAmountEntered
			restricted 
			when (Currency != BaseCurrency
			and    UnguaranteedAmount.TransactionAmount entered)
			
		IsSameCurrencyAndFairMarketyValueEntered
			restricted 
			when (Currency != BaseCurrency
			and    FairMarketValue.TransactionAmount entered)
		
		IsSameCurrency
			restricted
			when (Currency = BaseCurrency)
			
		HasStraightLineSchedule
			restricted
			when (IsOperating
			and   IsShortTermLease)

		ShowStraightLineSchedule
			restricted
			when (IsOperating
			and   IsShortTermLease
			and   IsReleased
			and   LeasePaymentRel.StraightLine)

		DebtAccountEntered
			restricted
			when (DebtAccount entered
			and Status.Unreleased)

		ShortTermLiabilityAccountEntered
			restricted
			when (ShortTermLiabilityAccount entered
			and Status.Unreleased)

		LongTermLiabilityAccountEntered
			restricted
			when (LongTermLiabilityAccount entered
			and Status.Unreleased)

		InterestAccountEntered
			restricted
			when (InterestAccount entered
			and Status.Unreleased)

		DeferredRentAccountEntered
			restricted
			when (DeferredRentAccount entered
			and Status.Unreleased)

		AccruedAccountEntered
			restricted
			when (AccruedAccount entered
			and Status.Unreleased)

		LongTermOperatingLeaseExpenseEntered
			restricted
			when (LongTermOperatingLeaseExpense entered
			and Status.Unreleased)

		ShowASC842Classification
			restricted	
			when (ASC842Lease
			and   !IsMonthToMonthRenewal)

		ShowGASBPresentValue
			restricted
			when ((IsGASBLease
			or   IsIFRSLease)
			and !IsMonthToMonthRenewal)

		FundAccounting
			restricted
			when (actor.context.FinanceEnterpriseGroup.FundAccounting)

		LeaseFundExists
			restricted
			when (LeaseFundsRel exists)

		RestrictAssetEntry  
			restricted
			when (LeaseFundExists
			and WholeNumberTotalPercent != "100")

		CreateAssetFundRecords
			restricted
			when (LeaseFundExists
			and WholeNumberTotalPercent = "100")

		ShortTermLiabilityAccounting
			restricted
			when (actor.context.FinanceEnterpriseGroup.ShortTermLiabilityAccounting
			and !IsShortTermLease and !IsMonthToMonthRenewal)

		ValidForPurging 
			restricted
			when ((Lease.Status.Deactivated
			or    Lease.Status.Terminated
			or    Lease.Status.Closed
			or    Lease.Status.Unreleased)
			and   LeaseInvoiceDistributionNotToPurgeRel not exists)

		DefaultLeaseInterestRate			
			restricted
			when (actor.context.FinanceEnterpriseGroup.UseLeaseRateTable)

		IsLessorTransferred					
			restricted
			when (LessorTransfer)

		DebtAccountRequired
			restricted
			when (IsUnreleased
			and   !actor.context.FinanceEnterpriseGroup.ShortTermLiabilityAccounting
			and  (IsLongTermOperatingLease
			or    LongTermOperatingLeaseRenewal
			or    IsFinance)) 
		
		HasLeaseIncentives
			restricted
			when (instance count of LeaseIncentiveRel > 0)

		WithinCompanyGroup
			when (CompanyGroupRel exists)

		AllowLeaseClose
			restricted
			when (UnreleasedLeasePaymentDetailsRel not exists
			and   NonHistoricalUnpostedInvoicesRel not exists)
					
    	AllowUnrelease
			restricted
			when (ReleasedLeasePaymentDetailsRel not exists
			and  !HasInvoice            
          	and  !HasLeaseModifications  
          	and  !HasLeaseAdjustments)   
				
		ShowDebtAccount
			restricted
			when (!ShortTermLiabilityAccounting
			and   !IsShortTermLease)

		IfMonthToMonthRenewalAndClose
			restricted
			when (Status.Closed 
			and IsMonthToMonthRenewal)

    Relations

	    UnReleasedLeasesRel 
			one-to-many relation to Lease
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.Status.Unreleased
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup )
		
		ReleasedLeasesRel 
			one-to-many relation to Lease
			Field Mapping uses Set6 
			Instance Selection
				where(related.Status.Released
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup )
		
		ReleasedLeasesForOneCompanyRel 
			one-to-many relation to Lease
			Field Mapping uses Set6 
			Instance Selection
				where(related.Status.Released
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup 
				and related.Company != LocalCompany)
		
		ImpairmentLeasesRel
			one-to-many relation to Lease
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.Status.Impairment
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup )
			
		AdjustmentLeasesRel
			one-to-many relation to Lease
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.Status.LeaseAdjustments
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup )
		
		ModificationLeasesRel
			one-to-many relation to Lease
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.Status.Modify
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup )
		
		TerminationLeasesRel 
			one-to-many relation to Lease
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.Status.Termination
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		
		PostedInvoicesBeforeConversionDateRel is a LeaseInvoice set  

		UnPostedInvoicesBeforeConversionDateRel 
			one-to-many relation to LeaseInvoice
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.InvoiceDate < LocalConversionDate
				and !related.Status.Posted
				and related.Lease.Status.Released
				and !related.InvoiceType.Historical
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup) 
				 
		PostedInvoicesAfterConversionDateRel
			one-to-many relation to LeaseInvoice
			Field Mapping uses symbolic key
			Instance Selection
				where(related.DueDate >= LocalConversionDate
				and related.Lease.Status.Released
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		
		UnreleasedLeasePaymentsBeforeConversionDateRel  
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses Set3
            Instance Selection
            	where (related.DueDate < LocalConversionDate 
            	and   !related.Released 
				and related.Lease.Status.Released
				and   related.LeasePaymentDetail.ExecutoryCostCode not entered
				and   related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		LeaseCompaniesRel
			one-to-many relation to LeaseCompany
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where(related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		
		LeaseCompaniesAccountsRel
			one-to-many relation to LeaseCompanyAccount
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where(related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		
		OperatingLeasesRel
			one-to-many relation to Lease
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.LeaseClassification.Operating
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		
		FinanceLeasesRel
			one-to-many relation to Lease
			Field Mapping uses symbolic key 
			Instance Selection
				where(related.LeaseClassification.Finance
				and related.Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

        AssetsRel
            one-to-many relation to Asset
            Field Mapping uses Set13
                related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
                related.AssetLease.LeaseCompany = Company
                related.AssetLease.Lease 		= Lease       
       
		SubleaseRel is a Sublease set
		
		NonClosedSubleaseRel is a Sublease set
			Instance Selection
				where (!related.Status.Closed)
		
        RenewalAssetsRel
            one-to-many relation to Asset
            Field Mapping uses Set13
                related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
                related.AssetLease.LeaseCompany = Company
                related.AssetLease.Lease 		= OriginalLease

		PostReleaseAssetsRel
            one-to-many relation to Asset
            Field Mapping uses Set13
                related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
                related.AssetLease.LeaseCompany = Company
                related.AssetLease.Lease 		= Lease
            Instance Selection
            	where (related.Status.PostRelease)
                
        SimulatedAssetsRel
            one-to-many relation to Asset
            Field Mapping uses Set13
            Instance Selection
                where (related.AssetLease.LeaseCompany = Company
                and   related.AssetLease.Lease = Lease
                and   related.Simulated)

        LeaseCurrencyPaymentBalancesRel
            one-to-many relation to LeaseCurrencyPaymentBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease

        LeaseCurrencyPaymentPeriodBalancesRel is a LeaseCurrencyPaymentPeriodBalance set

        LeaseDatesRel is a LeaseDate set

        LeaseExecutoryCostCodesRel is a LeaseExecutoryCostCode set

		TerminationLeaseExecutoryCostCodeRel
			one-to-one relation to LeaseExecutoryCostCode
            Field Mapping uses symbolic key
                related.Company 			= Company
                related.ExecutoryCostCode	= TerminationNonLeaseComponent
                related.Lease   			= Lease
                
        LeaseInvoicesRel is a LeaseInvoice set

        LeasePaymentBalancesRel
            one-to-many relation to LeasePaymentBalance
            Field Mapping uses Set2
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
            	related.LeasePaymentBalance.ExecutoryCostCode = blank				                
        AmortLeasePaymentBalancesRel
            one-to-many relation to LeasePaymentBalance
            Field Mapping uses Set5
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)
        LeasePaymentPeriodBalancesRel is a LeasePaymentPeriodBalance set

        LeasePaymentDetailsRel is a LeasePaymentDetail set

        ZeroPaymentDetailsRel
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses ByDueDate
				related.Company = Company
				related.Lease   = Lease
				related.Vendor  = Lessor
            Instance Selection
            	where (related.PaymentAmount not entered
            	and    related.LeaseCompute.ComputeStatement not entered
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered)

        AccruedPaymentDetailsRel is a LeasePaymentDetail set
            Instance Selection
				where (related.AccrueFlag)

		LeasePaymentDetailRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease	= Lease
                related.Vendor	= Lessor
        
		LeasePaymentDetailsFirstDueDateRel
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
                related.DueDate = LocalFirstDueDate
            Instance Selection
				where (related.Vendor = Lessor)
				
        LeasePaymentDetailsDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
		    Instance Selection
		    	where (related.Vendor = Lessor)

        LeasePaymentDetailsNoECCDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.Vendor = Lessor
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered)

        LeasePaymentDetailsNoECCNoResidualDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.Vendor = Lessor
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.ResidualPayment = false
				and    related.PurchaseOptionPayment = false)
				
        LeasePaymentDetailsNoECCNoBargainPurchaseOptionDueDateRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.Vendor = Lessor
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.PurchaseOptionPayment = false)

	 	NextLeasePaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company  = Company
                related.Lease     = Lease
                related.Vendor      = Lessor
            Instance Selection
                where (related.LeasePaymentDetail.ExecutoryCostCode not entered
                and    related.Released = false
				and    related.PaymentAmount != 0)

		LeasePaymentDetailsForModificationNoECCDueDateRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease    = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Lessor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered)
		
        VendorPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode not entered
				and related.LeaseCompute.ComputeStatement not entered)
				
        VendorPaymentDetailsWithoutResidualRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode not entered
				and related.LeaseCompute.ComputeStatement not entered
				and related.ResidualPayment = false
				and related.PurchaseOptionPayment = false)

		VendorPaymentDetailsAfterModificationDateRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease    = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Lessor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered)

		VendorPaymentDetailsAfterModificationDateWithoutResidualRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease    = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Lessor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.ResidualPayment = false
				and    related.PurchaseOptionPayment = false)

		LeasePaymentBalanceModificationRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease    = Lease
                related.DueDate >= LocalLeasePaymentDueDate
			Instance Selection
				where (related.Vendor = Lessor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered)
				
        NetPVChangeVendorPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.LeasePaymentDetail.DueDate !< LocalDueDate
				and    related.Vendor = Lessor
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered)

        SinglePaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.LeasePaymentDetail.DueDate = LocalDueDate
				and related.LeasePaymentDetail.ExecutoryCostCode not entered)

        SingleNoResidualPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.LeasePaymentDetail.DueDate = LocalDueDate
				and related.LeasePaymentDetail.ExecutoryCostCode not entered
				and related.ResidualPayment = false
				and related.PurchaseOptionPayment = false)				

        SinglePaymentDetailsNoResidualRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.LeasePaymentDetail.DueDate = LocalDueDate
				and related.LeasePaymentDetail.ExecutoryCostCode not entered
				and related.ResidualPayment = false
				and related.PurchaseOptionPayment = false)

        ResidualPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.ResidualPayment = true)
				
        PurchaseOptionDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.PurchaseOptionPayment = true)

        ResidualOrBargainPurchasePaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.ResidualPayment = true
				or     related.PurchaseOptionPayment = true
				and   (related.LeasePaymentDetail.ExecutoryCostCode not entered))

        FirstPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.Vendor = Lessor)

        FirstPaymentDetailsWithoutResidualRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.ResidualPayment = false
				and    related.PurchaseOptionPayment = false
				and    related.Vendor = Lessor)

		FirstPaymentDetailsForModificationRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease	 = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Lessor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered)

		FirstPaymentDetailsForModificationWithoutResidualRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease	 = Lease
                related.DueDate >= LocalModificationDate
			Instance Selection
				where (related.Vendor = Lessor
				and    related.ResidualPayment = false
				and    related.PurchaseOptionPayment = false
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered)

		LeaseModificationPaymentDetailByDueDateRel
			one-to-many relation to LeaseModificationPaymentDetail
            Field Mapping uses ByDueDate
                related.Company 			= Company
                related.Lease   			= Lease
        		related.Vendor				= Lessor
        		related.LeaseModification	= ModificationInProgressRel.LeaseModification

        TransitionReportPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
			Instance Selection
				where (related.DueDate within TransitionDateRange)

        LesaePaymentWithLandedTaxRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByExecutoryCode
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
				related.LeasePaymentDetail.ExecutoryCostCode = blank
			Instance Selection
				where (related.LandedCostRedAlert)

        RecurringVendorPaymentDetailsRel
            one-to-many relation to RecurringLeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor

        ReleasedLeasePaymentDetailsRel is a LeasePaymentDetail set
            Instance Selection
            	where (related.Released)

        LeasePaymentsRel
            one-to-one relation to LeasePayment
            Field Mapping uses symbolic key
            	related.Company		= Company
                related.Lease 		= Lease
                related.Vendor   	= Lessor

        OldLeasePaymentsRel
            one-to-one relation to LeasePayment
            Field Mapping uses symbolic key
            	related.Company		= Company
                related.Lease 		= Lease
                related.Vendor   	= OldLessor

        AllLeasePaymentsRel is a LeasePayment set

        LeaseTransactionsRel is a LeaseTransaction set

		LeaseInvoicePrefixesRel
			one-to-many relation to Lease
			Field Mapping uses ByLeaseInvoicePrefix
				related.LeaseInvoicePrefix	= LeaseInvoicePrefix
				related.Company				= Company
			Instance Selection
				where (related.Lease != Lease)
				
		PostingBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company	= Company
			Instance Selection
				where (related.PostingBook)

		PostingAssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalAsset.FinanceEnterpriseGroup 
				related.Asset					= LocalAsset				
			Instance Selection
				where (related.IsPostingBook)				
				
		AssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalAsset.FinanceEnterpriseGroup 
				related.Asset					= LocalAsset
				related.Book					= LocalBook
		
		AllAssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup 
				related.Asset					= LocalAsset
				
		ASTAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType     
              	related.Company				     = Company	
               	related.Book				     = LocalBook
               	related.Asset				     = LocalAsset
                related.AssetAccountType	     = "AST"
			Instance Selection
				where ((related.TransactionStatus = "R"
				or 	    related.TransactionStatus = "H")
				and     related.AssetLease.Lease = Lease.Lease)

		CLRAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company						= Company
				related.Book						= LocalBook
				related.Asset						= LocalAsset
				related.AssetAccountType			= "CLR"
			Instance Selection
				where ((related.TransactionStatus = "R"
				or 	    related.TransactionStatus = "H")
				and     related.AssetLease.Lease = Lease.Lease)
						
		LeaseAllocationCodeDetailsRel
			one-to-many relation to LeaseAllocationCodeDetail
            Field Mapping uses symbolic key
			Instance Selection
                where (related.LeaseAllocationCode 	= LeaseAllocationCode)

		OLLeaseAllocationCodeDetailsRel
			one-to-many relation to LeaseAllocationCodeDetail
            Field Mapping uses symbolic key
			Instance Selection
                where (related.LeaseAllocationCode 	= OperatingLeaseAllocationCode)

		LeaseModificationRel is a LeaseModification set

		LeaseModificationAfterLastPaymentRel is a LeaseModification set
            Instance Selection
            	where (related.ModificationDate > LoaclLastPaymentPosted
				and    related.Status.Released)

		LeaseModificationPaymentBalanceRel is a LeaseModificationPaymentBalance set
            Instance Selection
            	where (related.LeaseModification =  ModificationInProgressRel.LeaseModification)

		LeaseModificationCurrencyPaymentBalanceRel is a LeaseModificationCurrencyPaymentBalance set
            Instance Selection
            	where (related.LeaseModification =  ModificationInProgressRel.LeaseModification)
									
		LeaseImpairmentRel is a LeaseImpairment set

		LeaseAdjustmentRel is a LeaseAdjustment set

		LeaseInvoicesAfterTerminateDateRel is a LeaseInvoice set
            Instance Selection
            	where (related.DueDate > TerminateDate)

		LeaseInvoicesAfterCloseDateRel is a LeaseInvoice set
            Instance Selection
            	where (related.DueDate > TerminateDate)

		InvalidDeactivateDateForLeaseInvoicesRel is a LeaseInvoice set
            Instance Selection
            	where (related.InvoiceDate > DeactivateDate)
                
        UnreleasedPaymentDetailsBeforeTerminateDateRel is a LeasePaymentDetail set
            Instance Selection
            	where (related.DueDate <= TerminateDate
            	and   !related.Released)
		
		UnreleasedPaymentDetailsAfterTerminateDateRel is a LeasePaymentDetail set
			Instance Selection
            	where (related.DueDate > TerminateDate
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered
            	and    !related.Released)
            	
        UnreleasedPaymentDetailsBeforeDeactivateDateRel is a LeasePaymentDetail set
            Instance Selection
            	where (related.DueDate <= DeactivateDate		
            	and   !related.Released)
		
		ReleasedPaymentDetailsAfterDeactivateDateRel is a LeasePaymentDetail set
			Instance Selection
            	where (related.DueDate > DeactivateDate
            	and    related.Released)
            	
        NonHistoricalUnpostedInvoicesRel is a LeaseInvoice set   
            Instance Selection
            	where (!related.InvoiceType.Historical
            	and    !related.Status.Posted)
 		
 		UnpostedInvoicesBeforeTerminationRel is a LeaseInvoice set   
            Instance Selection
            	where (related.InvoiceDate <= TerminateDate
            	and	  !related.InvoiceType.Historical
            	and	  !related.Status.Posted)
            	
 		UnreleasedLeasePaymentDetailsRel is a LeasePaymentDetail set 
            Instance Selection
            	where (!related.Released)

		UnreleasedLeasePaymentDetailsBeforeTerminationRel is a LeasePaymentDetail set 
            Instance Selection
            	where (related.DueDate <= TerminateDate
            	and   !related.Released)
            	
		LeaseCommentRel is a LeaseComment set

		LeaseAttachmentRel is an LeaseAttachment set

        ProjectPeriodOfPerformanceRel					
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.Project					= LocalProject
				related.GeneralLedgerSystemCode	= "LM"

        LeaseObligationPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor

        DoNotCreatePayablesPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
            Instance Selection
            	where (related.DoNotCreateAPInvoice = true)
        LeasePaymentRel
            one-to-one relation to LeasePayment
            Field Mapping uses symbolic key
                related.Company 							= Company
                related.Lease   							= Lease
                related.Vendor  							= Lessor


		UnreleasedLeasePaymentDetailsBeforeLessorTransferRel is a LeasePaymentDetail set 
            Instance Selection
            	where (related.DueDate < LessorTransferDate
            	and   !related.Released)

		UnpostedInvoicesBeforeLessorTransferRel is a LeaseInvoice set   
            Instance Selection
            	where (related.InvoiceDate < LessorTransferDate
            	and	  !related.InvoiceType.Historical
            	and	  !related.Status.Posted)

		LeaseInvoicesAfterLessorTransferDateRel is a LeaseInvoice set
            Instance Selection
            	where (related.DueDate >= LessorTransferDate)		
		
		LeasePaymentLessorRel
            one-to-many relation to LeasePayment
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= PreviousLessor

		LeasePaymentDetailPaymentNumberRel
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses Set2
				related.Company = Company
				related.Lease   = Lease
				related.Vendor  = PreviousLessor

		LeaseLessorPaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= PreviousLessor
			Instance Selection
				where (related.DueDate >= LessorTransferDate)

		LeasePaymentBalanceRel is an LeasePaymentBalance set

		LeaseCurrencyPaymentBalanceRel is an LeaseCurrencyPaymentBalance set

		LeasePaymentBalanceLessorRel is an LeasePaymentBalance set
			Instance Selection
				where (related.Vendor = PreviousLessor)

		LeaseCurrencyPaymentBalanceLessorRel is an LeaseCurrencyPaymentBalance set
			Instance Selection
				where (related.Vendor = PreviousLessor)

		VendorRel
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup		= Lessor.VendorGroup
				related.Vendor			= Lessor
				
		ModificationInProgressRel
			one-to-many relation to LeaseModification
			Field Mapping uses symbolic key
				related.Company 		   = Company
				related.Lease			   = Lease
				related.Vendor			   = Lessor			
			Instance Selection
				where (related.Status.Unreleased)

		LeaseModificationFundRel
			one-to-many relation to LeaseModificationFund
			Field Mapping uses symbolic key
				related.Company 		   = Company
				related.Lease			   = Lease
				related.Vendor			   = Lessor			
			Instance Selection
				where (related.Status.Unreleased)

		ImpairmentInProgressRel
			one-to-many relation to LeaseImpairment
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease
				related.Vendor			= Lessor				
			Instance Selection
				where (related.Status.Unreleased)

		ImpairmentAfterLastPaymentRel
			one-to-many relation to LeaseImpairment
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease
				related.Vendor			= Lessor				
			Instance Selection
				where (related.Status.Released
				and    related.ImpairmentDate > LoaclLastPaymentPosted)
		
		AdjustmentInProgressRel
			one-to-many relation to LeaseAdjustment
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease
				related.Vendor			= Lessor				
			Instance Selection
				where (related.Status.Unreleased)

		AdjustmentAfterLastPaymentRel
			one-to-many relation to LeaseAdjustment
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease
				related.Vendor			= Lessor				
			Instance Selection
				where (related.Status.Released
				and    related.AdjustmentDate > LoaclLastPaymentPosted)

		UnpostedLeaseTransactionRel
			one-to-many relation to LeaseTransaction
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease

			Instance Selection
				where (related.Status.Unposted)

		GLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = LocalLeasePaymentDueDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = LocalLeasePaymentDueDate year)

		ModificationGLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = LocalModificationDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = LocalModificationDate year)

		FirstGLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = first LeasePaymentDetailsNoECCDueDateRel.DueDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = first LeasePaymentDetailsNoECCDueDateRel.DueDate year)

		LastGLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection					
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = last LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = last LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate year)

		LeasePaymentBalanceForModificationYearRel 
			one-to-one relation to LeasePaymentBalance
            Field Mapping uses symbolic key
                related.Company 								= Company
                related.Lease   								= Lease
                related.Vendor									= Lessor
                related.LeasePaymentBalance.ExecutoryCostCode	= blank
				related.LeasePaymentBalance.FiscalYear 			= DerivedModificationFiscalYear
        
        LeaseCurrencyPaymentBalanceForModificationYearRel 
			one-to-one relation to LeaseCurrencyPaymentBalance
            Field Mapping uses symbolic key
                related.Company 								= Company
                related.Lease   								= Lease
                related.Vendor									= Lessor
                related.LeasePaymentBalance.ExecutoryCostCode	= blank
				related.LeasePaymentBalance.FiscalYear 			= DerivedModificationFiscalYear
				related.LeaseCurrencyPaymentBalance.Currency	= Currency
            	    	
		LeasePaymentBalanceAfterModificationDateRel
			one-to-many relation to LeasePaymentBalance
            Field Mapping uses Set3
                related.Company 					   = Company
                related.Lease   					   = Lease
            	related.LeasePaymentBalance.FiscalYear > DerivedModificationFiscalYear
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)       
        LeaseCurrencyPaymentBalanceAfterModificationDateRel
            one-to-many relation to LeaseCurrencyPaymentBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.FiscalYear > DerivedModificationFiscalYear
				and    related.LeasePaymentBalance.ExecutoryCostCode not entered)      
        
        LeasePaymentPeriodBalanceAfterModificationDateRel
        	one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses Set2
                related.Company 					   = Company
                related.Lease   					   = Lease
                related.LeasePaymentBalance.FiscalYear = DerivedModificationFiscalYear
            Instance Selection
            	where (related.LeasePaymentPeriodBalance.PaymentDueDate >= LocalModificationDate)
        
        LeaseCurrencyPaymentPeriodBalanceAfterModificationDateRel
        	one-to-many relation to LeaseCurrencyPaymentPeriodBalance
            Field Mapping uses Set3
                related.Company	= Company
                related.Lease	= Lease
            Instance Selection

            	where (related.LeaseCurrencyPaymentPeriodBalance.PaymentDueDate >= LocalModificationDate)

		GLClosePeriodImpairmentRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = LocalImpairmentDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = LocalImpairmentDate year)

		GLClosePeriodAdjustmentRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = LocalAdjustmentDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = LocalAdjustmentDate year)
				
		LeasePaymentBalanceAfterImpairmentRel
			one-to-many relation to LeasePaymentBalance
            Field Mapping uses Set3
                related.Company 					   = Company
                related.Lease   					   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.FiscalYear >= DerivedImpairmentFiscalYear
				and    related.LeasePaymentBalance.ExecutoryCostCode not entered)       
        LeaseCurrencyPaymentBalanceAfterImpairmentRel
            one-to-many relation to LeaseCurrencyPaymentBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeaseCurrencyPaymentBalance.LeasePaymentBalance.FiscalYear >= DerivedImpairmentFiscalYear
				and    related.LeasePaymentBalance.ExecutoryCostCode not entered)   

		LeasePaymentBalanceAfterAdjustmentRel
			one-to-many relation to LeasePaymentBalance
            Field Mapping uses Set3
                related.Company 					   = Company
                related.Lease   					   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.FiscalYear >= DerivedAdjustmentFiscalYear
				and    related.LeasePaymentBalance.ExecutoryCostCode not entered)     

        LeaseCurrencyPaymentBalanceAfterAdjustmentRel
            one-to-many relation to LeaseCurrencyPaymentBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeaseCurrencyPaymentBalance.LeasePaymentBalance.FiscalYear >= DerivedAdjustmentFiscalYear
				and    related.LeasePaymentBalance.ExecutoryCostCode not entered) 

        LeaseCurrencyPaymentBalanceNoECCRel
            one-to-many relation to LeaseCurrencyPaymentBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered) 

        LeaseBaseCurrencyPaymentPeriodBalanceNoECCRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)

        LeaseCurrencyPaymentPeriodBalanceNoECCRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)
		
		ConversionLeaseLiabilityPaymentBalanceRel
			one-to-many relation to LeasePaymentPeriodBalance
			Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
				related.Company	= Company
				related.Lease	= Lease
				related.Vendor  = Lessor
			Instance Selection
				where (related.PaymentDueDate < LocalConversionDate
				and related.LeasePaymentBalance.ExecutoryCostCode not entered)
		
		ConversionLeaseCurrencyLiabilityPaymentBalanceRel
			one-to-many relation to LeaseCurrencyPaymentPeriodBalance
			Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
				related.Company	= Company
				related.Lease	= Lease
				related.Vendor  = Lessor
			Instance Selection
				where (related.PaymentDueDate < LocalConversionDate
				and related.LeasePaymentBalance.ExecutoryCostCode not entered)

        LeasePaymentPeriodBalanceRel
			one-to-many relation to LeasePaymentPeriodBalance
			Field Mapping uses Set3
				related.Company	= Company
				related.Lease	= Lease
		
		LeaseCurrencyPaymentPeriodBalanceRel
			one-to-many relation to LeaseCurrencyPaymentPeriodBalance
			Field Mapping uses Set3
				related.Company	= Company
				related.Lease	= Lease
				
		PreviousLeaseCurrencyPaymentPeriodBalanceRel
			one-to-many relation to LeaseCurrencyPaymentPeriodBalance
			Field Mapping uses Set3
				related.Company	= Company
				related.Lease	= Lease
			Instance Selection
				where (related.PaymentDueDate < CurrentModificationDate)

		PreviousBaseCurrencyPaymentPeriodBalanceRel
			one-to-many relation to LeasePaymentPeriodBalance
			Field Mapping uses Set3
				related.Company	= Company
				related.Lease	= Lease
			Instance Selection
				where (related.PaymentDueDate < CurrentModificationDate)

        LeaseCurrencyCurrentBalancesRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate = LoaclLastPaymentPosted)

        LeaseBaseCurrencyCurrentBalancesRel
            one-to-many relation to LeasePaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate = LoaclLastPaymentPosted)

        AllLeaseCurrencyBalancesRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)

        AllLeaseBaseCurrencyBalancesRel
            one-to-many relation to LeasePaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)

        LongTermLeaseCurrencyLiabilityRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate > LocalCalculateLongTermLiabilityDueDate)
		
		ConversionLongTermLeaseCurrencyLiabilityRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and  related.PaymentDueDate >= StartingLiabilityMonth 
				and  related.PaymentDueDate < EndingLiabilityMonth)

        LongTermLeaseCurrencyLiabilityReductionRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate = LocalCalculateLongTermLiabilityDueDate)

        LongTermBaseCurrencyLiabilityRel
            one-to-many relation to LeasePaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate > LocalCalculateLongTermLiabilityDueDate)
		
		ConversionLongTermBaseCurrencyLiabiltyRel
			one-to-many relation to LeasePaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and  related.PaymentDueDate >= StartingLiabilityMonth 
				and  related.PaymentDueDate < EndingLiabilityMonth)		

        LongTermBaseCurrencyLiabilityReductionRel
            one-to-many relation to LeasePaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate = LocalCalculateLongTermLiabilityDueDate)

        PostedLeasePaymentslRel
            one-to-many relation to LeaseInvoice
            Field Mapping uses Set11
                related.Company = Company
                related.Lease   = Lease
			Instance Selection
				where (related.Vendor	= Lessor
				and    !related.Status.Unreleased
				and    related.LeaseInvoice.CancelSequence not entered)

        LeaseInvoiceDistributionRel					
			one-to-many relation to LeaseInvoiceDistribution
            Field Mapping uses symbolic key
            	related.Company                    	 	= Company
            	related.Lease                       	= Lease
        		related.Vendor							= Lessor
                related.LeaseInvoice.PaymentNumber		= LocalLastPaymentPostedNUmber
				related.LeaseInvoice.CancelSequence		= blank
			Instance Selection
				where (related.ExecutoryCostCode not entered)				

		LeaseRenewalsRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Lessor
				related.Company					= Company
			Instance Selection
				where (related.OriginalLease	= Lease)
				
		OriginalLeaseRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Lessor
				related.Company					= Company
			Instance Selection
				where (related.Lease	        = OriginalLease)
				
		UnreleasedLeaseRenewalsRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Lessor
				related.Company					= Company
			Instance Selection
				where (related.OriginalLease	= LocalCloseLease

				and    related.BeginDate        = LocalBeginDate)	
				
		RenewalLeaseRenewalsRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Lessor
				related.Company					= Company
			Instance Selection
				where (related.OriginalLease entered
				and related.OriginalLease	    = OriginalLease)

		RenewalLeaseHasARenewalRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Lessor
				related.Company					= Company

			Instance Selection
				where (related.OriginalLease entered
				and related.OriginalLease	    = OriginalLease
				and related.Lease				!= Lease
				and related.Status.Unreleased)

		PriorLeaseRenewalsRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Lessor
				related.Company					= Company
			Instance Selection
				where (related.OriginalLease entered
				and related.OriginalLease	    = OriginalLease
				and related.Lease				!= Lease)

		MonthToMonthRenewalHasRenewalsRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Lessor
				related.Company					= Company
			Instance Selection
				where (related.OriginalLease	= OriginalLease
				and related.BeginDate 			> EndDate)

		PreviousLeaseCurrencyPaymentPeriodBalanceForTerminationRel
			one-to-many relation to LeaseCurrencyPaymentPeriodBalance
			Field Mapping uses Set3
				related.Company	= Company
				related.Lease	= Lease
			Instance Selection
				where (related.PaymentDueDate <= LocalTerminateDate)
		
		BaseAdjustmentROUBalancesRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lease.Lessor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode not entered
                and  related.PaymentDueDate = LocalEffectiveDate)

		AdjustmentROUBalancesRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance
            Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lease.Lessor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode not entered
                and  related.PaymentDueDate = LocalEffectiveDate)
		DefaultProcessLevelRel
        	one-to-many relation to PayablesProcessLevel
        	Field Mapping uses symbolic key
        		related.Company = Company
        	Instance Selection
        		where (related.DefaultProcessLevel)

        BookCalendarRel
            one-to-one relation to BookCalendar
            Field Mapping uses Set5
                related.Book    					= LocalBook
                related.Company 					= LocalAsset.Company
		
		LeaseRenewalDashboardRel
			one-to-many relation to Lease
			Field Mapping uses Set6
				related.Lease   = Lease
				related.Company = Company
			Instance Selection
				where (related.ExtensionOptionDate entered)

		LeaseRateTableRel
			one-to-one relation to LeaseRateTable
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				related.Currency = Currency
				related.LeaseType = LeaseType
		
		LeaseRateTableOverrideRel
			one-to-many relation to LeaseRateTable
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				related.Currency = Currency
				related.LeaseType = LeaseType
			Instance Selection
				where (related.LeaseRateTable = LeaseRateTable)

		LeaseRateTableDetailTermRel
			one-to-many relation to LeaseRateTableDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				related.LeaseRateTable			 = LeaseRateTable
			Instance Selection
				where (related.MaxTerm >= Term)								



		PurgeLeaseCurrencyPaymentPeriodBalanceRel is an LeaseCurrencyPaymentPeriodBalance set
			Instance Selection
				include deleted records
				
		PurgeLeaseCurrencyPaymentBalanceRel is an LeaseCurrencyPaymentBalance set
			Instance Selection
				include deleted records
				
		PurgeLeasePaymentPeriodBalanceRel is an LeasePaymentPeriodBalance set
			Instance Selection
				include deleted records
				
		PurgeLeasePaymentBalanceRel is an LeasePaymentBalance set
			Instance Selection
				include deleted records
				
		PurgeRecurringLeasePaymentDetailRel is an RecurringLeasePaymentDetail set
			Instance Selection
				include deleted records

		PurgeLeasePaymentDetailRel is an LeasePaymentDetail set
			Instance Selection
				include deleted records
				
		PurgeLeasePaymentImportRel is an LeasePaymentImport set
			Instance Selection
				include deleted records
				
		PurgeLeaseImportRel is an LeaseImport set
			Instance Selection
				include deleted records
				
		PurgeLeaseComputeRel is an LeaseCompute set
			Instance Selection
				include deleted records
				
		PurgeLeasePaymentRel is an LeasePayment set
			Instance Selection
				include deleted records
				
		PurgeLeaseCommentRel is an LeaseComment set
			Instance Selection
				include deleted records
				
		PurgeLeaseInvoiceRel is an LeaseInvoice set
			Instance Selection
				include deleted records
						
		PurgeLeaseDateRel is an LeaseDate set
			Instance Selection
				include deleted records
		
		PurgeLeaseAllocationCodeDetailRel is an LeaseAllocationCodeDetail set
			Instance Selection
				include deleted records
		
		PurgeLeaseAllocationCodeRel is an LeaseAllocationCode set
			Instance Selection
				include deleted records
		
		PurgeLeaseTransactionRel is an LeaseTransaction set
			Instance Selection
				include deleted records
		
		PurgeLeaseExecutoryCostCodeRel is an LeaseExecutoryCostCode set
			Instance Selection
				include deleted records
		
		PurgeLeaseAttachmentRel is an LeaseAttachment set
			Instance Selection
				include deleted records
				
		PurgeLeaseModificationlRel is an LeaseModification set
			Instance Selection
				include deleted records				

		PurgeLeaseImpairmentRel is an LeaseImpairment set
			Instance Selection
				include deleted records
		
		PurgeLeaseAdjustmentRel is an LeaseAdjustment set
			Instance Selection
				include deleted records
				
		PurgeSubleaseRel is an Sublease set
			Instance Selection
				include deleted records			

		PurgeLeaseFundsRel is an LeaseFund set
			Instance Selection
				include deleted records	

		LeaseFundsRel is an LeaseFund set				

		WeightedAverageReportPaymentsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company  = Company
                related.Lease	 = Lease
                related.DueDate >= LocalReportDate
			Instance Selection
				where (related.Vendor = Lessor
				and	   related.LeasePaymentDetail.ExecutoryCostCode not entered)

        WeightedAverageReportLiabilityRel
            one-to-many relation to LeasePaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate >= LocalReportDate)

		WeightAverageReportDetailRel
        	one-to-many relation to LeaseWeightedAverageReportDetail
        	Field Mapping uses symbolic key
				related.Company								= LocalCompany
        		related.LeaseWeightedAverageReportResult 	= LocalWeightedAverageReportResult
	
		WeightAverageResultsReportRel
        	one-to-one relation to LeaseWeightedAverageReportResult
        	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= LocalFinanceEnterpriseGroup
        		related.LeaseWeightedAverageReportResult 	= LocalWeightedAverageReportResult

		LeaseInitialDirectCostRel 
			one-to-many relation to LeaseInitialDirectCost
			Field Mapping uses symbolic key
				related.Company = Company
				related.Lease = Lease
		

		LeaseIncentiveRel
			one-to-many relation to LeaseIncentive
			Field Mapping uses symbolic key
				related.Company = Company
				related.Lease   = Lease
				related.Vendor  = Lessor 
		
		LeaseModificationIncentiveRel
			one-to-many relation to LeaseModificationIncentive
			Field Mapping uses symbolic key
				related.Company           = Company
				related.Lease             = Lease
				related.Vendor            = Lessor 
			    related.LeaseModification = ModificationInProgressRel.LeaseModification
			
		LeaseIncentiveOnBeginDateRel
			one-to-many relation to LeaseIncentive
			Field Mapping uses symbolic key
				related.Company  = Company
				related.Lease    = Lease
				related.Vendor   = Lessor 
			Instance Selection
				where (related.IncentiveDate  month = BeginDate month 
				and related.IncentiveDate  year  = BeginDate year )
		
		PurgeLeaseIncentiveRel is a LeaseIncentive set
			Instance Selection
				include deleted records

		PurgeLeaseModificationIncentiveRel is a LeaseModificationIncentive set
			Instance Selection
				include deleted records            	

        RollforwardReportRel
            one-to-many relation to LeasePaymentPeriodBalance      
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company 						= Company
                related.Lease   						= Lease
				related.Vendor 							= Lessor
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered 
				and    related.PaymentDueDate within LocalReportDateRange)

		PostedLeaseTransactionRel
			one-to-many relation to LeaseTransaction
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease			
			Instance Selection
				where (related.Vendor = Lessor
				and    related.Status.Posted
				and    related.Process.Terminate
				and    related.TransactionDate within LocalReportDateRange)

		AdjustmentProcessedRel
			one-to-many relation to LeaseAdjustment
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease
				related.Vendor			= Lessor			
			Instance Selection
				where (related.Status.Released
				and    related.EffectiveDate within LocalReportDateRange)

		ModificationProcessedRel
			one-to-many relation to LeaseModification
			Field Mapping uses symbolic key
				related.Company 		   = Company
				related.Lease			   = Lease
				related.Vendor			   = Lessor		
			Instance Selection
				where (related.Status.Released
				and    related.ModificationDate within LocalReportDateRange)

		CompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalCompanyGroup
				related.Company						= Company

        PaymentOnRollforwardReportRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
                related.Vendor	= Lessor
                related.DueDate	= LocalReportDueDate
                related.LeasePaymentDetail.ExecutoryCostCode = blank
			Instance Selection	
                where (related.Released = true)

		DisclosureSummaryFiscalYearRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company 								= Company
                related.Lease   								= Lease
                related.Vendor									= Lessor
                related.LeasePaymentBalance.FiscalYear			= LocalFiscalYear
			Instance Selection	
                where (related.LeasePaymentBalance.ExecutoryCostCode = blank)

		DisclosureSummaryPeriodRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company 								= Company
                related.Lease   								= Lease
                related.Vendor									= Lessor
                related.LeasePaymentBalance.FiscalYear			= LocalFiscalYear
				related.LeasePaymentPeriodBalance				= LocalPeriod
			Instance Selection	
                where (related.LeasePaymentBalance.ExecutoryCostCode = blank)

		DisclosureSummaryFiscalQuarterRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company 								= Company
                related.Lease   								= Lease
                related.Vendor									= Lessor
                related.LeasePaymentBalance.FiscalYear			= LocalFiscalYear
			Instance Selection	
                where (related.LeasePaymentBalance.ExecutoryCostCode = blank
				and   (related.LeasePaymentPeriodBalance		= LocalQuarterPeriod1
				or    related.LeasePaymentPeriodBalance			= LocalQuarterPeriod2
				or    related.LeasePaymentPeriodBalance			= LocalQuarterPeriod3))		

		DisclosureSummaryPaymentPeriodRel
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses ByDueDate
				related.Company 								= Company
				related.Lease   								= Lease
				related.Vendor  								= Lessor
				related.DueDate									= LocalDueDate
				related.LeasePaymentDetail.ExecutoryCostCode 	= blank

		DisclosureSummaryPaymentPeriodsRel
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses ByDueDate
				related.Company 								= Company
				related.Lease   								= Lease
				related.Vendor  								= Lessor
			Instance Selection					
				where (related.DueDate	within LocalReportDateRange
				and    related.LeasePaymentDetail.ExecutoryCostCode 	= blank)

		DisclosureBeginGLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDateForYear
				related.FinanceEnterpriseGroup			 	= Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 	= Company.AccountingEntity.CloseConfiguration
				related.GeneralLedgerCloseYear				= LocalFiscalYear
			Instance Selection
				where (related.PeriodNumber = LocalGLBeginPeriod)

		DisclosureEndGLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDateForYear
				related.FinanceEnterpriseGroup			 	= Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 	= Company.AccountingEntity.CloseConfiguration
				related.GeneralLedgerCloseYear				= LocalFiscalYear
			Instance Selection
				where (related.PeriodNumber = LocalGLEndPeriod)
		

		EmptyFiscalYearAndPeriodPaymentDetailRel 
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
			Instance Selection
				where ((related.Year not entered
				or related.Period not entered)
				and related.LeasePaymentDetail.ExecutoryCostCode = blank)
		
		LeasePaymentDetailPeriodRel 
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor = Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode = blank
				and related.DueDate month = LocalLeasePaymentDueDate month
				and related.DueDate year  = LocalLeasePaymentDueDate year)
		
		LeasePaymentDetailPurchaseAmountPeriodRel 
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode = blank
				and related.DueDate month = Lease.EndDate month
				and related.DueDate year  = Lease.EndDate year)
		
		LeasePaymentDetailModificationPeriodRel 
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode = blank
				and related.DueDate month = LocalModificationDate month
				and related.DueDate year  = LocalModificationDate year)
			
		LeasePaymentDetailAdjustmentPeriodRel 
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode = blank
				and related.DueDate month = LocalAdjustmentDate month
				and related.DueDate year  = LocalAdjustmentDate year)

		LeasePaymentDetailImpairmentPeriodRel 
			one-to-many relation to LeasePaymentDetail
			Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor  = Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode = blank
				and related.DueDate month = LocalImpairmentDate month
				and related.DueDate year  = LocalImpairmentDate year)
		
		LeasePaymentDetailAddedPeriodsRel 
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company = Company
                related.Lease   = Lease
				related.Vendor = Lessor
			Instance Selection
				where (related.LeasePaymentDetail.ExecutoryCostCode = blank
				and related.Year entered 
				and related.Period entered)

		LeaseInvoiceDistributionNotToPurgeRel
			one-to-many relation to LeaseInvoiceDistribution
            Field Mapping uses symbolic key
            	related.Company                    	 	= Company
            	related.Lease                       	= Lease
        		related.Vendor							= Lessor
           	Instance Selection
       			where (related.Status < 9
				or    (related.InvoiceDistributionAccount.Project entered 
				and   !related.InvoiceDistributionAccount.Project.ProjectStatus.AllowPurge))
			
    Sets

        Set2
            indexed
            Sort Order
                LeaseType
                Company
                Lease

        Set6
            indexed
            Sort Order
                Lease
                Company

        Set7
            indexed
            Sort Order
                LeaseAllocationCode
                Status
                Company
                Lease                	

		ByLeaseInvoicePrefix
			Sort Order
				LeaseInvoicePrefix
				Company
				Lease

		ByVendorCompany
			Sort Order
				Lessor
				Company
				Lease

		ByLeaseBeginDate
			Sort Order
				BeginDate
				Company
				Lease

		ByLeaseEndDate
			Sort Order
				EndDate
				Company
				Lease
		
		ByLeaseExtensionOptionDate
			Sort Order
				ExtensionOptionDate
				Company
				Lease

	Form Invokes
		CreateLeaseModification
			if (ModificationInProgressRel exists)
				constraint (false)
					"UnreleasedLeaseModificationAlreadyExists"
			else
				if (LeaseImpairmentRel exists
				or LeaseAdjustmentRel exists)
					constraint (false)
						"LeaseImpairmentOrLeaseAdjustmentExists;CannotModifyThisLease"
				else
					invoke Create Unreleased LeaseModification
						invoked.Company	= Company
						invoked.Lease	= Lease
						invoked.Vendor	= Lessor
				
	Rule Blocks

		CheckAmounts

			CurrencyNumberOfDecimals 	= Currency.NumberOfDecimals
			BaseNumberOfDecimals		= Company.Currency.NumberOfDecimals

			if (BaseCurrencyRate not entered)
				initialize LocalCurrencyExchange
				LocalCurrencyAmount = 1
				LocalCurrencyExchange.ToCurrency = Company.Currency
				BaseCurrencyRate = LocalCurrencyExchange.OutputCurrencyRate

			if (Currency entered													
			or  BaseCurrencyRate entered)
	        	if (GuaranteedAmount.TransactionAmount entered)
					if (GuaranteedAmount.TransactionAmount < 0)
						confirmation required	
							"Warning;GuaranteedAmountShouldBeEnteredAsAPositiveNumber"        	
	        		GuaranteedAmount.BaseAmount.EnteredCurrencyAmount			= 0
	        		GuaranteedAmount.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate
	        	
		        if (UnguaranteedAmount.TransactionAmount entered)
					if (UnguaranteedAmount.TransactionAmount < 0)
						confirmation required	
							"Warning;UnguaranteedAmountShouldBeEnteredAsAPositiveNumber"
		        	UnguaranteedAmount.BaseAmount.EnteredCurrencyAmount			= 0
		        	UnguaranteedAmount.BaseAmount.EnteredCurrencyRate			= BaseCurrencyRate
		
		        if (BargainPurchaseAmount.TransactionAmount entered)
		        	BargainPurchaseAmount.BaseAmount.EnteredCurrencyAmount		= 0
		        	BargainPurchaseAmount.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate
		
		        if (NetPresentValue.TransactionAmount entered)
		        	NetPresentValue.BaseAmount.EnteredCurrencyAmount			= 0
		        	NetPresentValue.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate
		
		        if (FairMarketValue.TransactionAmount entered)
		        	FairMarketValue.BaseAmount.EnteredCurrencyAmount			= 0
		        	FairMarketValue.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate
		
		        if (LeaseObligation.TransactionAmount entered)
		        	LeaseObligation.BaseAmount.EnteredCurrencyAmount			= 0
		        	LeaseObligation.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate
		
		        if (LandValue.TransactionAmount entered)
		        	LandValue.BaseAmount.EnteredCurrencyAmount					= 0
		        	LandValue.BaseAmount.EnteredCurrencyRate					= BaseCurrencyRate
		
		        if (BuildingValue.TransactionAmount entered)
		        	BuildingValue.BaseAmount.EnteredCurrencyAmount				= 0
		        	BuildingValue.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate
		
		        if (TaxCreditAmount.TransactionAmount entered)
		        	TaxCreditAmount.BaseAmount.EnteredCurrencyAmount			= 0
		        	TaxCreditAmount.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate
		
		        if (DownPayment.TransactionAmount entered)
					if (DownPayment.TransactionAmount < 0)
						confirmation required	
							"Warning;DownPaymentShouldBeEnteredAsAPositiveNumber"
		        	DownPayment.BaseAmount.EnteredCurrencyAmount				= 0
		        	DownPayment.BaseAmount.EnteredCurrencyRate					= BaseCurrencyRate
		
		        if (SecurityDeposit.TransactionAmount entered)
		        	SecurityDeposit.BaseAmount.EnteredCurrencyAmount			= 0
		        	SecurityDeposit.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate      

		        if (InitialDirectCost.TransactionAmount entered)
					if (InitialDirectCost.TransactionAmount < 0)
						confirmation required	
							"Warning;InitialDirectCostShouldBeEnteredAsAPositiveNumber"
		        	InitialDirectCost.BaseAmount.EnteredCurrencyAmount			= 0
		        	InitialDirectCost.BaseAmount.EnteredCurrencyRate			= BaseCurrencyRate   
		        	
		        if (IncentiveAmount.TransactionAmount entered)
					if (IncentiveAmount.TransactionAmount < 0)
						confirmation required	
							"Warning;IncentiveAmountShouldBeEnteredAsAPositiveNumber"
		        	IncentiveAmount.BaseAmount.EnteredCurrencyAmount			= 0
		        	IncentiveAmount.BaseAmount.EnteredCurrencyRate				= BaseCurrencyRate

		        if (LeaseROUAssetAmount.TransactionAmount entered)
		        	LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount		= 0
		        	LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate			= BaseCurrencyRate

		FAS13Test 
	        constraint (PaymentTiming entered)
				"PaymentTimingRequiredForClassificationTest"					   

			if (ImplicitInterestRate not entered)
		        constraint (InterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForClassificationTest"             

			if (InterestRate not entered)
		        constraint (ImplicitInterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForClassificationTest"              

			constraint (Status.Unreleased
			or         (Status.Processing)
			or			Status.Modify)
				"LeaseIsReleased;CannotPerformTest"

			constraint (HasPaymentDetail)
				"PaymentDetailsRequiredForClassificationTest"              

			if (ExercisePurchase)
				FAS13Test7b = "Y"
			else
				FAS13Test7b = "N"

			if (LocalProcess not entered)
				LocalProcess = "T"
			if (LocalProcess.Test
			and  Fas13Flag.Yes)
				constraint (RemainingLife entered)
					"RemainingLifeRequiredForClassificationTest"           
				constraint (Term entered)
					"LeaseTermRequiredForClassificationTest"               
				constraint (TotalLife entered)
					"TotalLifeRequiredForClassificationTest"       
					        
				if (LeaseAccountingMethod.GASB87
				or  LeaseAccountingMethod.GASB96)
					if (Ownership 

					or ExercisePurchase)
						FAS13Test7a = "Y"
					else
						FAS13Test7a = "N"

					if (ShortTermGASBLease
					or  ShortTermIFRS)  
						FAS13LeaseClassification = "O"
					else
						FAS13LeaseClassification = "C"
					
				if (!LeaseAccountingMethod.GASB87
				and !LeaseAccountingMethod.GASB96)  			
					if (Ownership

					or ExercisePurchase)
						FAS13Test7a = "Y"
					else
						FAS13Test7a = "N"
					
					if (LandAndBuilding.LandOnly)
						if (FAS13Test7a.Yes
						or  FAS13Test7b.Yes
						or  SpecializedAsset)
							FAS13LeaseClassification = "C"
						else
							FAS13LeaseClassification = "O"
	
						FAS13Test7c = "A"
						FAS13Test7d = "A"                                        
	
	                if (!LandAndBuilding.LandOnly)
						if (FAS13Test7a = "Y"
						or  SpecializedAsset)
							FAS13LeaseClassification = "C"
							FAS13Test7c = "A"
							FAS13Test7d = "A" 
						else
							if (RemainingLife / TotalLife < .25)
								if (FAS13Test7a.No
								and FAS13Test7b.No
								and !SpecializedAsset)
									FAS13LeaseClassification = "O"
									FAS13Test7c = "A"
									FAS13Test7d = "A"
							else					
								if (Term / RemainingLife >= .75) 
									FAS13LeaseClassification = "C"
									FAS13Test7c = "Y"
									FAS13Test7d = "A"
								else
									FAS13Test7c = "N"
					if (SkipFMVTest)
						FAS13Test7d = "A"

				include ProcessNetPresentValue	                                    
				if (FairMarketValue.TransactionAmount = TaxCreditAmount.TransactionAmount)
					LocalNetPresentValueToFairMarketValue = FAS13NetPresentValue
				else
					LocalNetPresentValueToFairMarketValue = (FAS13NetPresentValue / (FairMarketValue.TransactionAmount - TaxCreditAmount.TransactionAmount))
				
				if (!LeaseAccountingMethod.GASB87
				or  !LeaseAccountingMethod.GASB96)  
					if (FAS13Test7c.No) 
						if (!SkipFMVTest)
							if (LocalNetPresentValueToFairMarketValue >= .90)
								FAS13Test7d = "Y"
							else
								FAS13Test7d = "N"
	
						if (FAS13Test7a.Yes
						or  FAS13Test7b.Yes
						or  FAS13Test7c.Yes
						or  FAS13Test7d.Yes
						or  SpecializedAsset)
							FAS13LeaseClassification = "C"
						else
							FAS13LeaseClassification = "O"
					if (IsTermRenewal)
						FAS13LeaseClassification = OriginalLease.LeaseClassification
				if (IsShortTermBasedOnLeaseType) 
					FAS13LeaseClassification = "O"

			else
				if (Fas13Flag.No)
					FAS13Test7a = "A"
					FAS13Test7c = "A"
					FAS13Test7d = "A"
					FAS13LeaseClassification		= LeaseClassification
				include ProcessNetPresentValue 
			                                          

		ProcessNetPresentValue
			if (ImplicitInterestRate entered)
				LocalPeriodicRate 	= ImplicitInterestRate
			else
				LocalPeriodicRate 	= InterestRate
            LocalPeriodicRate 		= LocalPeriodicRate / PaymentsPerYear             			
			if  (ImplicitInterestRate not entered
			and  InterestRate not entered                         		 
			and  FairMarketValue.TransactionAmount entered)
				if (DerivedTotalPayments = (FairMarketValue.TransactionAmount - TaxCreditAmount.TransactionAmount))      
					FAS13ImplicitInterestRate = 0
				else
					include ImplicitRateIteration                   

					LocalNetPresentValueLesseeRate = FAS13NetPresentValue + (FairMarketValue.TransactionAmount - TaxCreditAmount.TransactionAmount)

					if (FAS13NetPresentValue not entered)
						FAS13ImplicitInterestRate = InterestRate
					else
					if (FAS13NetPresentValue > 0)
						LocalLowerBound = LocalPeriodicRate
						LocalUpperBound = 0.5 
					else						
						LocalLowerBound = 0 
						LocalUpperBound = LocalPeriodicRate

					LocalPeriodicRate = ((LocalLowerBound + LocalUpperBound) / 2)

					Done = false

					if (LocalPeriodicRate = LocalUpperBound
					or  LocalPeriodicRate = LocalLowerBound
					or  FAS13NetPresentValue not entered)
						Done = true
					while (!Done)

						include ImplicitRateIteration                                    
						
						if (FAS13NetPresentValue > 0)
							LocalLowerBound = LocalPeriodicRate
						else
							LocalUpperBound = LocalPeriodicRate
							
						if (FAS13NetPresentValue entered)
							LocalPeriodicRate = ((LocalLowerBound + LocalUpperBound) / 2)

						if (LocalPeriodicRate = LocalUpperBound
						or  LocalPeriodicRate = LocalLowerBound
						or  FAS13NetPresentValue not entered)
							Done = true

					FAS13ImplicitInterestRate = LocalPeriodicRate * PaymentsPerYear

				include ImplicitRateCaluculation

			else      
				if (ImplicitInterestRate not entered)                      
					FAS13ImplicitInterestRate = InterestRate
				else
					FAS13ImplicitInterestRate = ImplicitInterestRate

					if (Status.Modify)
						LocalPeriodicRate = FAS13ImplicitInterestRate / PaymentsPerYear	
						include ModificationImplicitRateIteration 
						if (Lease.ModificationInProgressRel.PartialTermination)
							LocalNetPresentValueLesseeRate = LocalNetPresentValueImplicitRate - ModificationInProgressRel.DerivedGainLoss
						else
							LocalNetPresentValueLesseeRate = LocalNetPresentValueImplicitRate - LeaseObligationBeforeModification + ROUAssetBalanceBeforeModification
						LocalPeriodicRate = FAS13ImplicitInterestRate / PaymentsPerYear		
								
					else
						include ImplicitRateIteration                              		
						LocalNetPresentValueLesseeRate = FAS13NetPresentValue + (FairMarketValue.TransactionAmount - TaxCreditAmount.TransactionAmount)
						LocalPeriodicRate = FAS13ImplicitInterestRate / PaymentsPerYear
				
					include ImplicitRateCaluculation

		ImplicitRateIteration                                               	
			initialize FAS13NetPresentValue
			initialize LocalNetPresentValueImplicitRate

			FAS13NetPresentValue 		= DownPayment.TransactionAmount
			if(LeaseIncentiveOnBeginDateRel exists)
				FAS13NetPresentValue		= FAS13NetPresentValue - sum LeaseIncentiveOnBeginDateRel.Amount.TransactionAmount + DeferredRentsAtAdoption
			else
				FAS13NetPresentValue		= FAS13NetPresentValue - IncentiveAmount.TransactionAmount + DeferredRentsAtAdoption
			FAS13NetPresentValue		= FAS13NetPresentValue + InitialDirectCost.TransactionAmount + LeaseInitialDirectCostRel.InitialDirectCostTotal        
			if (Compounding)
				initialize Sub                                                   	
				if (PaymentTiming.BeginningOfPeriod)
					for each VendorPaymentDetailsRel                                             
						Sub += 1
						FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub - 1)))
				else
					LocalLastPaymentDate	= last VendorPaymentDetailsWithoutResidualRel.DueDate
					initialize LocalResidualFAS13
					for each VendorPaymentDetailsWithoutResidualRel                                             
						Sub += 1
						if (LocalLastPaymentDate = each.DueDate)
							LocalResidualFAS13	= each.PaymentAmount + each.TransactionLandTax
							LocalResidualFAS13	= LocalResidualFAS13 + GuaranteedAmount.TransactionAmount + BargainPurchaseAmount.TransactionAmount
							FAS13NetPresentValue += ((LocalResidualFAS13) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
						else
							FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
			else
				initialize Sub
				initialize LocalFAS13NetPresentValue
				LocalPeriodsCount = 1                                                  	
				if (PaymentTiming.BeginningOfPeriod)
					for each VendorPaymentDetailsRel
						Sub += 1
						FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub - 1)))
				else
					if (GuaranteedAmount.TransactionAmount entered
					or  BargainPurchaseAmount.TransactionAmount entered)
						LocalLastPaymentDate	= last VendorPaymentDetailsWithoutResidualRel.DueDate
					for each VendorPaymentDetailsWithoutResidualRel 	                                            
						if (each.PaymentAmount 	= 0)
							LocalPeriodsCount	+= 1										
						else
							Sub += 1
							if (LocalPeriodsCount > 1)
								TempLocalPeriodicRate = LocalPeriodicRate * LocalPeriodsCount
								if (PaymentTiming.BeginningOfPeriod)
									LocalFAS13NetPresentValue 	= ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + TempLocalPeriodicRate)) ^ (Sub - 1)))
								else
									if (LocalLastPaymentDate = each.DueDate)
										LocalFAS13NetPresentValue 	= ((each.PaymentAmount + each.TransactionLandTax + GuaranteedAmount.TransactionAmount + BargainPurchaseAmount.TransactionAmount) * ((1/(1 + TempLocalPeriodicRate)) ^ (Sub)))
									else
										LocalFAS13NetPresentValue 	= ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + TempLocalPeriodicRate)) ^ (Sub)))
								FAS13NetPresentValue			+= LocalFAS13NetPresentValue
								LocalPeriodsCount	= 1
							else
								if (PaymentTiming.BeginningOfPeriod)
									FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub - 1)))
								else
									if (LocalLastPaymentDate = each.DueDate)
										FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax + GuaranteedAmount.TransactionAmount + BargainPurchaseAmount.TransactionAmount) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
									else
										FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))							

			LocalNetPresentValueImplicitRate 		= FAS13NetPresentValue
			FAS13NetPresentValue					= FAS13NetPresentValue - FairMarketValue.TransactionAmount + TaxCreditAmount.TransactionAmount
						
		ModificationImplicitRateIteration 
			initialize FAS13NetPresentValue
			initialize LocalNetPresentValueImplicitRate
			initialize LocalModificationDate
			LocalModificationDate = first ModificationInProgressRel.ModificationEffectiveDate
			if (Compounding)
				initialize Sub                                                   	
				initialize LocalResidualFAS13
				if (EndingResidual)
					LocalLastPaymentDate	= last VendorPaymentDetailsWithoutResidualRel.DueDate
					for each VendorPaymentDetailsAfterModificationDateWithoutResidualRel                                             
						if (each.LeasePaymentDetail.ExecutoryCostCode not entered
						and each.LeaseCompute.ComputeStatement not entered)
							Sub += 1
							if (LocalLastPaymentDate = each.DueDate)
								LocalResidualFAS13	= each.PaymentAmount + each.TransactionLandTax
								LocalResidualFAS13	= LocalResidualFAS13 + GuaranteedAmount.TransactionAmount
								FAS13NetPresentValue += ((LocalResidualFAS13) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
							else
								FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
				else
				if (HasEndingBargainPurchaseOption)
					LocalLastPaymentDate	= last VendorPaymentDetailsWithoutResidualRel.DueDate
					for each VendorPaymentDetailsAfterModificationDateWithoutResidualRel                                             
						if (each.LeasePaymentDetail.ExecutoryCostCode not entered
						and each.LeaseCompute.ComputeStatement not entered)
							Sub += 1
							if (LocalLastPaymentDate = each.DueDate)
								LocalResidualFAS13	= each.PaymentAmount + each.TransactionLandTax
								LocalResidualFAS13	= LocalResidualFAS13 + BargainPurchaseAmount.TransactionAmount
								FAS13NetPresentValue += ((LocalResidualFAS13) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
							else
								FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
				
				else
					for each VendorPaymentDetailsAfterModificationDateRel                                             
						if (each.LeasePaymentDetail.ExecutoryCostCode not entered
						and each.LeaseCompute.ComputeStatement not entered)
							Sub += 1
							FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))
			else
				initialize Sub
				initialize LocalFAS13NetPresentValue
				LocalPeriodsCount = 1                                                  	
				for each VendorPaymentDetailsAfterModificationDateRel                                             
					if (each.LeasePaymentDetail.ExecutoryCostCode not entered
					and each.LeaseCompute.ComputeStatement not entered)
						if (each.PaymentAmount = 0)
							LocalPeriodsCount += 1										
						else
							Sub += 1
							if (LocalPeriodsCount > 1)
								TempLocalPeriodicRate = LocalPeriodicRate * LocalPeriodsCount
								LocalFAS13NetPresentValue = ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + TempLocalPeriodicRate)) ^ (Sub)))
								FAS13NetPresentValue += LocalFAS13NetPresentValue
								LocalPeriodsCount = 1
							else
								FAS13NetPresentValue += ((each.PaymentAmount + each.TransactionLandTax) * ((1/(1 + LocalPeriodicRate)) ^ (Sub)))							
			LocalNetPresentValueImplicitRate = FAS13NetPresentValue
			
		ImplicitRateCaluculation												
			if (Status.Modify)
				FAS13NetPresentValue = LocalNetPresentValueLesseeRate
				FAS13LeaseObligation = LocalNetPresentValueImplicitRate
			else
				if (InterestRate > FAS13ImplicitInterestRate               			
				and FAS13ImplicitInterestRate >= 0)
					FAS13NetPresentValue = LocalNetPresentValueImplicitRate
				else
					FAS13NetPresentValue = LocalNetPresentValueLesseeRate
				if(LeaseIncentiveOnBeginDateRel exists)
					FAS13LeaseObligation = FAS13NetPresentValue + sum LeaseIncentiveOnBeginDateRel.Amount.TransactionAmount + DeferredRentsAtAdoption
				else
					FAS13LeaseObligation = FAS13NetPresentValue + IncentiveAmount.TransactionAmount + DeferredRentsAtAdoption
				FAS13LeaseObligation = FAS13LeaseObligation - InitialDirectCost.TransactionAmount - BeginningIDC
				FAS13LeaseObligation = FAS13LeaseObligation - DownPayment.TransactionAmount


		CalculateTotalBookBasis                                              
			initialize LocalTotalBasis
			initialize LocalTotalAssets
			initialize LocalUseBaseCurrency
			UnreleasedAsset 					= false
			AssetWithDifferentClassification 	= false

			if (HasAsset)
				for each AssetsRel
					LocalAsset	= each.Asset
					LocalBook 	= first PostingAssetBookRel.Book		
					constraint (each.Asset.Status.Released)
						"AssetStatusMustBeReleased"
					if (LocalBook entered)
						if (!AssetBookRel exists)	
							LocalTotalBasis += each.ItemTotalBaseCost         
							LocalTotalAssets += 1
						else
							if (AssetBookRel.UseBookCurrencyOnLeasedAsset)
								LocalUseBaseCurrency	= true
							LocalTotalBasis += AssetBookRel.Basis         		
							LocalTotalAssets += 1
					else
						LocalTotalBasis += each.ItemTotalBaseCost            
						LocalTotalAssets += 1											

					if (!each.Status.Released)					
						UnreleasedAsset = true

			TransientBasis = LocalTotalBasis

			if (LocalUseBaseCurrency)
				round LocalTotalBasis to nearest DerivedBaseRoundTo
			else
				round LocalTotalBasis to nearest DerivedRoundTo

		IsValidLeaseForDeactivation
			constraint (InvalidDeactivateDateForLeaseInvoicesRel not exists) 
				"DeactivationDateCannotBeLessThanLeaseInvoiceDate" 				
			
			constraint (NonHistoricalUnpostedInvoicesRel not exists)
				"UnpostedInvoiceRecordsExist;MustProcessThemFirst"				

		LeaseFundSplits
			LocalNumberOfFunds	= instance count of LeaseFundsRel
			initialize FundCounter
			initialize LocalAccumulatedFundAmount
			LocalTotalFundTransactionAmount									= LocalTransactionAmount
			for each LeaseFundsRel
				FundCounter													= FundCounter + 1
				LocalAccountingEntity										= each.AccountingEntity
				LocalAccountingUnit											= each.AccountingUnit
				LocalProject												= each.Project
				LocalFinanceDimension1										= each.FinanceDimension1
				LocalFinanceDimension2										= each.FinanceDimension2
				LocalFinanceDimension3										= each.FinanceDimension3
				LocalFinanceDimension4										= each.FinanceDimension4
				LocalFinanceDimension5										= each.FinanceDimension5
				LocalFinanceDimension6										= each.FinanceDimension6
				LocalFinanceDimension7										= each.FinanceDimension7
				LocalFinanceDimension8										= each.FinanceDimension8
				LocalFinanceDimension9										= each.FinanceDimension9
				LocalFinanceDimension10										= each.FinanceDimension10
				LocalPercentContribution									= each.PercentContribution

				if (FundCounter != LocalNumberOfFunds)
					LocalTransactionAmount	= LocalTotalFundTransactionAmount * LocalPercentContribution
					round LocalTransactionAmount to nearest DerivedRoundTo
					LocalAccumulatedFundAmount								= LocalAccumulatedFundAmount + LocalTransactionAmount
				else
					LocalTransactionAmount									= LocalTotalFundTransactionAmount - LocalAccumulatedFundAmount

				if (LocalCreateTerminationInvoice)
					include CreateLeaseInvoiceDistribution
				else
					include CreateLeaseTransaction

		LeaseFunSplitAccounts
			invoked.LeaseTransactionAccount.ToAccountingEntity			= LocalAccountingEntity
			if (LocalAccountingUnit entered)
				invoked.LeaseTransactionAccount.AccountingUnit			= LocalAccountingUnit
			if (LocalProject entered)
				invoked.LeaseTransactionAccount.Project					= LocalProject
			if (LocalFinanceDimension1 entered)
				invoked.LeaseTransactionAccount.FinanceDimension1		= LocalFinanceDimension1
			if (LocalFinanceDimension2 entered)
				invoked.LeaseTransactionAccount.FinanceDimension2		= LocalFinanceDimension2
			if (LocalFinanceDimension3 entered)
				invoked.LeaseTransactionAccount.FinanceDimension3		= LocalFinanceDimension3
			if (LocalFinanceDimension4 entered)
				invoked.LeaseTransactionAccount.FinanceDimension4		= LocalFinanceDimension4
			if (LocalFinanceDimension5 entered)
				invoked.LeaseTransactionAccount.FinanceDimension5		= LocalFinanceDimension5
			if (LocalFinanceDimension6 entered)
				invoked.LeaseTransactionAccount.FinanceDimension6		= LocalFinanceDimension6
			if (LocalFinanceDimension7 entered)
				invoked.LeaseTransactionAccount.FinanceDimension7		= LocalFinanceDimension7
			if (LocalFinanceDimension8 entered)
				invoked.LeaseTransactionAccount.FinanceDimension8		= LocalFinanceDimension8
			if (LocalFinanceDimension9 entered)
				invoked.LeaseTransactionAccount.FinanceDimension9		= LocalFinanceDimension9
			if (LocalFinanceDimension10 entered)
				invoked.LeaseTransactionAccount.FinanceDimension10		= LocalFinanceDimension10

		LeaseFunSplitDistributionAccounts
			invoked.InvoiceDistributionAccount.ToAccountingEntity			= LocalAccountingEntity
			if (LocalAccountingUnit entered)
				invoked.InvoiceDistributionAccount.AccountingUnit			= LocalAccountingUnit
			if (LocalProject entered)
				invoked.InvoiceDistributionAccount.Project					= LocalProject
			if (LocalFinanceDimension1 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension1		= LocalFinanceDimension1
			if (LocalFinanceDimension2 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension2		= LocalFinanceDimension2
			if (LocalFinanceDimension3 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension3		= LocalFinanceDimension3
			if (LocalFinanceDimension4 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension4		= LocalFinanceDimension4
			if (LocalFinanceDimension5 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension5		= LocalFinanceDimension5
			if (LocalFinanceDimension6 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension6		= LocalFinanceDimension6
			if (LocalFinanceDimension7 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension7		= LocalFinanceDimension7
			if (LocalFinanceDimension8 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension8		= LocalFinanceDimension8
			if (LocalFinanceDimension9 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension9		= LocalFinanceDimension9
			if (LocalFinanceDimension10 entered)
				invoked.InvoiceDistributionAccount.FinanceDimension10		= LocalFinanceDimension10

		DefferedRentExpenseJournalEntry
			LocalTransactionType 				= "DFR"
			LocalTransactionProcess				= "TRM"
			LocalTransactionAccount 			= DeferredRentAccount
			LocalTransactionAmount 				= DeferredRentBalance * -1
			if (LeaseFundExists)
				include LeaseFundSplits
			else
				include CreateLeaseTransaction



			if (OperatingLeaseAllocationCode entered)	
				for each OLLeaseAllocationCodeDetailsRel
					LocalTransactionAmount 		= (DeferredRentBalance * each.AllocationPercent)
					round LocalTransactionAmount down to nearest 1
					LocalTransactionAccount		= each.DistributionAccount
					include CreateLeaseTransaction 
			else



				LocalTransactionAccount 	= LongTermOperatingLeaseExpense
				LocalTransactionAmount  	= DeferredRentBalance
			if (LeaseFundExists)
				include LeaseFundSplits
			else
				include CreateLeaseTransaction

		PartialTerminationGainLossJournalEntry
			LocalTransactionType 				= "ROU"
			LocalTransactionProcess				= "TRM"
			LocalAsset 							= first AssetsRel.Asset 
			LocalBook 							= first PostingAssetBookRel.Book
			if (first ASTAssetTransactionRel exists)
				LocalTransactionAccount 			= first ASTAssetTransactionRel.DistributionAccount
			else
			if (first AssetsRel.Asset.AssetAccountingUnitGroup entered)
				if (first AssetsRel.Asset.AssetAccountingUnitGroup.AssetAccountingUnit entered)
					LocalTransactionAccount		= first AssetsRel.Asset.AssetAccountingUnitGroup.AssetAccountingUnit
				else
					LocalTransactionAccount		= first AssetsRel.Asset.AssetAccountingUnit
			else
				LocalTransactionAccount			= first AssetsRel.Asset.AssetAccountingUnit
			if ((first AssetsRel.Asset.Company.UseEventAccounts) and (first AssetsRel.Asset.AssetType.ASTAdditionChartAccount entered))
				LocalTransactionAccount.GeneralLedgerChartAccount = first AssetsRel.Asset.AssetType.ASTAdditionAccount
			else
				LocalTransactionAccount.GeneralLedgerChartAccount = first AssetsRel.Asset.AssetType.ASTDistributionAccount	
			LocalTransactionAmount  			= ModificationInProgressRel.DerivedGainLoss
			if (LocalTransactionAmount !=0)
				if (LeaseFundExists)
					include LeaseFundSplits
				else
					include CreatePartialTerminationTransaction
			if (ModificationInProgressRel.DerivedGainLoss != 0)
				if (Lease.IsIFRSLease)
					LocalTransactionType 			= "GOL"
					LocalTransactionAccount 		= ModificationInProgressRel.PartialTerminationGainLossAcount
					LocalTransactionAmount  		= ModificationInProgressRel.DerivedGainLoss * -1
					if (LeaseFundExists)
						include LeaseFundSplits
					else
						include CreatePartialTerminationTransaction
				else
					LocalTransactionType 			= "GOL"
					LocalTransactionAccount 		= TerminationGainLossAccount
					LocalTransactionAmount  		= ModificationInProgressRel.DerivedGainLoss * -1
					if (LeaseFundExists)
						include LeaseFundSplits
					else
						include CreatePartialTerminationTransaction
			
		TerminationGainLossJournalEntry
			LocalTransactionProcess				= "TRM"
			LocalAsset 							= first AssetsRel.Asset 
			LocalBook 							= first PostingAssetBookRel.Book
			
			if (ShortTermLiabilityAccounting)

				LocalTransactionType 				= "LEL"
				LocalTransactionAccount 			= ShortTermLiabilityAccount
				LocalTransactionAmount  			= DerivedShortTermLeaseLiability
				if (LocalTransactionAmount !=0)
					if (LeaseFundExists)
						include LeaseFundSplits
					else
						include CreateLeaseTransaction

				LocalTransactionType 				= "LEL"
				LocalTransactionAccount 			= LongTermLiabilityAccount
				LocalTransactionAmount  			= DerivedLongTermtLeaseLiability
				if (LocalTransactionAmount !=0)
					if (LeaseFundExists)
						include LeaseFundSplits
					else
						include CreateLeaseTransaction

			else
				LocalTransactionType 				= "LEL"
				LocalTransactionAccount 			= DebtAccount
				LocalTransactionAmount  			= LeaseObligationBeforeTermination
				if (LocalTransactionAmount !=0)
					if (LeaseFundExists)
						include LeaseFundSplits
					else
						include CreateLeaseTransaction

			LocalTransactionType 				= "ROU"
			if (first ASTAssetTransactionRel exists)
				LocalTransactionAccount 			= first ASTAssetTransactionRel.DistributionAccount
			else
			if (first AssetsRel.Asset.AssetAccountingUnitGroup entered)
				if (first AssetsRel.Asset.AssetAccountingUnitGroup.AssetAccountingUnit entered)
					LocalTransactionAccount		= first AssetsRel.Asset.AssetAccountingUnitGroup.AssetAccountingUnit
				else
					LocalTransactionAccount		= first AssetsRel.Asset.AssetAccountingUnit
			else
				LocalTransactionAccount			= first AssetsRel.Asset.AssetAccountingUnit
			if ((first AssetsRel.Asset.Company.UseEventAccounts) and (first AssetsRel.Asset.AssetType.ASTAdditionChartAccount entered))
				LocalTransactionAccount.GeneralLedgerChartAccount = first AssetsRel.Asset.AssetType.ASTAdditionAccount
			else
				LocalTransactionAccount.GeneralLedgerChartAccount = first AssetsRel.Asset.AssetType.ASTDistributionAccount	
			LocalTransactionAmount 				= ROUAssetBalanceBeforeTermination * -1
			if (LocalTransactionAmount !=0)
				if (LeaseFundExists)
					include LeaseFundSplits
				else
					include CreateLeaseTransaction
			
			if (GainLossOnTermination != 0)
				LocalTransactionType 			= "GOL"
				LocalTransactionAccount 		= TerminationGainLossAccount
				LocalTransactionAmount  		= GainLossOnTermination * -1
				if (LeaseFundExists)
					include LeaseFundSplits
				else
					include CreateLeaseTransaction
				
		CreateLeaseTransaction
			invoke Create LeaseTransaction
				fill in fields from this instance
				invoked.LeaseTransactionAccount = LocalTransactionAccount   
				invoked.TransactionAmount		= LocalTransactionAmount				
				invoked.ToBaseCurrency			= BaseCurrency
				invoked.TransactionDate 		= TerminateDate
				invoked.Status					= 0
				invoked.Reference 				= ProgramName
				invoked.Type 					= LocalTransactionType 
				invoked.Process 				= LocalTransactionProcess
				if (LeaseFundExists)
					include LeaseFunSplitAccounts

		CreatePartialTerminationTransaction
			invoke Create LeaseTransaction
				fill in fields from this instance
				invoked.LeaseTransactionAccount = LocalTransactionAccount   
				invoked.TransactionAmount	    = LocalTransactionAmount				
				invoked.ToBaseCurrency			= BaseCurrency
				invoked.TransactionDate 		= ModificationInProgressRel.ModificationDate
				invoked.Status					= 0
				invoked.Reference 				= ProgramName
				invoked.Type 					= LocalTransactionType 
				invoked.Process 				= LocalTransactionProcess
				if (LeaseFundExists)
					include LeaseFunSplitAccounts











				
		CreateTerminationFeeInvoice
			initialize LocalCurrencyExchangeGroup
			LocalCreateTerminationInvoice 								= true
			LocalCurrencyExchangeGroup.TransactionAmount 				= TerminationFee
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate	= BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= BaseCurrency
			LocalBaseTerminationFee										= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
			
			invoke Create Unreleased LeaseInvoice
				invoked.Company						= Company
				invoked.Lease						= Lease
				invoked.Vendor						= Lessor
				invoked.LeaseInvoice.PaymentNumber	= last LeasePaymentDetailRel.LeasePaymentDetail.PaymentNumber + 1
				invoked.Invoice						= LeaseInvoicePrefix
				invoked.InvoiceType					= "R" 
				invoked.ProcessLevel				= first DefaultProcessLevelRel.PayablesProcessLevel
				invoked.TransactionInvoiceAmount	= TerminationFee
        		invoked.TransactionCurrency			= Currency
        		invoked.BaseInvoiceAmount			= LocalBaseTerminationFee
        		invoked.BaseCurrency				= BaseCurrency
                invoked.InvoiceDate					= TerminateDate
				invoked.Description					= "Lease Termination Fee"
				invoked.DueDate 					= TerminateDate
				invoked.ExternalPurchaseOrder		= LeasePaymentRel.ExternalPurchaseOrder
        
        	if (TerminationLeaseExecutoryCostCodeRel.HasReleasedLeaseAllocationCode)
				initialize LocalAccumulatedTerminationFee
				LocalLeaseAllocationCodeDetail = TerminationLeaseExecutoryCostCodeRel.LeaseAllocationCode.last LeaseAllocationCodeDetail set.LeaseAllocationCodeDetail 
				for each TerminationLeaseExecutoryCostCodeRel.LeaseAllocationCode.LeaseAllocationCodeDetail set
					if (each.LeaseAllocationCodeDetail != LocalLeaseAllocationCodeDetail)
						LocalTransactionAmount 		= (TerminationFee * each.AllocationPercent)
						LocalAccumulatedTerminationFee += LocalTransactionAmount 
					else
						LocalTransactionAmount 		= (TerminationFee - LocalAccumulatedTerminationFee)
					LocalTransactionAccount			= each.DistributionAccount
					include CreateLeaseInvoiceDistribution 
			else
				LocalTransactionAccount 			= TerminationLeaseExecutoryCostCodeRel.ExecutoryAccount
				LocalTransactionAmount  			= TerminationFee
				if (LeaseFundExists)
					include LeaseFundSplits
				else
					include CreateLeaseInvoiceDistribution
				
		CreateLeaseInvoiceDistribution	
			invoke Create LeaseInvoiceDistribution
				invoked.Company						= Company
				invoked.Lease						= Lease
				invoked.Vendor						= Lessor
				invoked.LeaseInvoice.PaymentNumber	= first LeasePaymentDetail set.LeasePaymentDetail.PaymentNumber + 1
				invoked.Invoice						= Lease
				invoked.ExecutoryCostCode			= TerminationNonLeaseComponent
				invoked.Description					= "Lease Termination Fee"
        		invoked.DistributionAmount			= LocalTransactionAmount
        		invoked.InvoiceDistributionAccount	= LocalTransactionAccount
				if (LeaseFundExists)
					include LeaseFunSplitDistributionAccounts

		EditsForAllocationCodeAndAllocationCodeType
			if (LeaseFundExists)
				constraint (LeaseAllocationCode not entered)
					"CannotEnterLeaseAllocationCodeWhenLeaseFundIsEntered"	
				constraint (OperatingLeaseAllocationCode not entered)
					"CannotEnterOperatingLeaseAllocationCodeWhenLeaseFundIsEntered"
			if (LeaseClassification.Finance)
				constraint (OperatingLeaseAllocationCode not entered)
					"CannotEnterOperatingLeaseAllocationCodeOnFinanceLease"	
			if (LongTermOperatingLease)
				if (OperatingLeaseAllocationCode not entered)
					constraint (LongTermOperatingLeaseExpense.GeneralLedgerChartAccount entered)
						"OperatingLeaseExpenseAccountRequiredOnOperatingLease"
				else
					constraint (LongTermOperatingLeaseExpense not entered)
						"OperatingLeaseExpenseAccountAndOperatingLeaseAllocationCodeCannotBeEntered"
			if (LeaseClassification.Finance
			and LeaseAllocationCode entered)
				if (LeaseAllocationCodeType.Interest)	
					constraint (InterestAccount not entered)
						"InterestAccountNotAllowed;AllocationCodeAndAllocationCodeType<LeaseAllocationCodeType>Entered"             
			else
				if (LeaseClassification.Operating
				and LeaseAllocationCode entered)
					if (LeaseAllocationCodeType.DebtOrExpense) 
						constraint (DebtAccount.GeneralLedgerChartAccount not entered)
							"LeaseLiabilityAccountNotAllowed;AllocationCodeAndAllocationCodeTypeLeaseLiabilityEntered"   

		UpdateNetChangeNetPresentValueRules
			initialize LocalPriorMonthLocalNetChangePV
			if (ImplicitInterestRate entered)
				LocalPeriodicRate 	= ImplicitInterestRate
			else
				LocalPeriodicRate 	= InterestRate
			LocalPeriodicRate 		= LocalPeriodicRate / PaymentsPerYear
			LocalPVNumOfPayments	= 1
			if (Status.Modify)
				LocalModificationDate = first ModificationInProgressRel.ModificationEffectiveDate
				LocalNumOfPayments 	= instance count of FirstPaymentDetailsForModificationRel
			else
				if (EndingResidual)
					LocalNumOfPayments 	= instance count of FirstPaymentDetailsWithoutResidualRel
					if (ResidualPaymentDetailsRel exist)  
						invoke UpdateNetChangePresentValue ResidualPaymentDetailsRel
							invoked.PrmNetChangeToPresentValue	= "0"
				else
					if (HasEndingBargainPurchaseOption)
						LocalNumOfPayments 	= instance count of FirstPaymentDetailsWithoutResidualRel
						if (PurchaseOptionDetailsRel exist) 
							invoke UpdateNetChangePresentValue PurchaseOptionDetailsRel
								invoked.PrmNetChangeToPresentValue	= "0"
					
					else
						LocalNumOfPayments 	= instance count of FirstPaymentDetailsRel
			if (Compounding)
				include CompoundingCalculations
			else
				include NonCompoundingCalculations
		
		CompoundingCalculations				
			initialize LocalLeaseObligation
			LocalLeaseObligation		= LeaseObligation.TransactionAmount
			if (RecalculatePV)
				LocalLeaseObligation	= LocalTempLeaseObligation
			if (Status.Modify)
				if (EndingResidual
				or HasEndingBargainPurchaseOption)
					for each FirstPaymentDetailsForModificationWithoutResidualRel                                             
						LocalDueDate = each.DueDate
						include CalculateNetPaymentAmount
						LocalPeriodInterest  = LocalLeaseObligation * LocalPeriodicRate
						LocalTempNetChangePV = LocalNetPaymentAmount - LocalPeriodInterest
						invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
							invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
						LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
				else
					for each FirstPaymentDetailsForModificationRel                                             
						LocalDueDate = each.DueDate
						include CalculateNetPaymentAmount
						LocalPeriodInterest  = LocalLeaseObligation * LocalPeriodicRate
						LocalTempNetChangePV = LocalNetPaymentAmount - LocalPeriodInterest
						invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
							invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
						LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
			else
				if (EndingResidual
				or HasEndingBargainPurchaseOption)
					for each FirstPaymentDetailsWithoutResidualRel
						LocalDueDate	= each.DueDate
						include CalculateNetPaymentAmount
						LocalPeriodInterest 	= LocalLeaseObligation * LocalPeriodicRate
						LocalTempNetChangePV	= LocalNetPaymentAmount - LocalPeriodInterest
						invoke UpdateNetChangePresentValue SinglePaymentDetailsNoResidualRel
							invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
						LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
				else










					if (LastPaymentOnEndDateWithResidual) 
						for each FirstPaymentDetailsWithoutResidualRel  
							LocalDueDate	= each.DueDate
							include CalculateNetPaymentAmount
							if (PaymentTiming.BeginningOfPeriod
							and LocalPVNumOfPayments = 1)
								invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
									LocalTempNetChangePV = LocalNetPaymentAmount
									invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV							
							else
								LocalPeriodInterest 	= LocalLeaseObligation * LocalPeriodicRate
								LocalTempNetChangePV	= LocalNetPaymentAmount - LocalPeriodInterest
								invoke UpdateNetChangePresentValue SingleNoResidualPaymentDetailsRel
									invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
							LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
							LocalPVNumOfPayments	+= 1

						LocalNetPaymentAmount = first ResidualOrBargainPurchasePaymentDetailsRel.PaymentAmount + first ResidualOrBargainPurchasePaymentDetailsRel.TransactionLandTax
						LocalPeriodInterest 	= LocalLeaseObligation * LocalPeriodicRate
						LocalTempNetChangePV	= LocalNetPaymentAmount - LocalPeriodInterest
						invoke UpdateNetChangePresentValue first ResidualOrBargainPurchasePaymentDetailsRel
							invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
						LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
						LocalPVNumOfPayments	+= 1
					else
						for each FirstPaymentDetailsRel
							LocalDueDate	= each.DueDate
							include CalculateNetPaymentAmount
							if (PaymentTiming.BeginningOfPeriod
							and LocalPVNumOfPayments = 1)
								invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
									LocalTempNetChangePV = LocalNetPaymentAmount
									invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV							
							else
								LocalPeriodInterest 	= LocalLeaseObligation * LocalPeriodicRate
								LocalTempNetChangePV	= LocalNetPaymentAmount - LocalPeriodInterest
								invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
									invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
							LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
							LocalPVNumOfPayments	+= 1
				
		NonCompoundingCalculations
			while (!LocalPVNumOfPayments > LocalNumOfPayments)
				initialize LocalLeaseObligation
				initialize LocalPeriodInterest
				initialize LocalTempNetChangePV
				LocalLeaseObligation		= LeaseObligation.TransactionAmount
				if (RecalculatePV)
					LocalLeaseObligation	= LocalTempLeaseObligation
				if (Status.Modify)
					for each FirstPaymentDetailsForModificationRel                                             
						LocalDueDate	= each.DueDate
						include CalculateNetPaymentAmount
						if (each.PaymentAmount not entered)
							LocalPeriodInterest 	= LocalPeriodInterest + (LocalLeaseObligation * LocalPeriodicRate)
							LocalTempNetChangePV	= 0
							invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
								invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV	
						else
							LocalPeriodInterest 	= LocalPeriodInterest + (LocalLeaseObligation * LocalPeriodicRate)
							LocalTempNetChangePV	= LocalNetPaymentAmount - LocalPeriodInterest
							LocalPeriodInterest		= 0
							invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
								invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
						LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
						LocalPVNumOfPayments	+= 1
				else
					for each FirstPaymentDetailsRel                                             
						LocalDueDate	= each.DueDate
						include CalculateNetPaymentAmount
						if (each.PaymentAmount not entered)
							LocalPeriodInterest 	= LocalPeriodInterest + (LocalLeaseObligation * LocalPeriodicRate)
							LocalTempNetChangePV	= 0
							invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
								invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV	
						else
							if (PaymentTiming.BeginningOfPeriod
							and LocalPVNumOfPayments = 1)
								invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
									LocalTempNetChangePV = LocalNetPaymentAmount
									invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV							
							else
								LocalPeriodInterest 	= LocalPeriodInterest + (LocalLeaseObligation * LocalPeriodicRate)
								LocalTempNetChangePV	= LocalNetPaymentAmount - LocalPeriodInterest
								LocalPeriodInterest		= 0
								invoke UpdateNetChangePresentValue SinglePaymentDetailsRel
									invoked.PrmNetChangeToPresentValue	= LocalTempNetChangePV
						LocalLeaseObligation = LocalLeaseObligation - LocalTempNetChangePV
						LocalPVNumOfPayments	+= 1									
		
		CalculateLeaseTerm
			initialize LocalTerm
			initialize LocalNumberOfYears
			initialize LocalMonthsToAdd
			LocalBeginMonth			= BeginDate month
			LocalBeginYear			= BeginDate year
			LocalEndMonth			= EndDate	month
			LocalEndYear			= EndDate year
			if (LocalEndYear > LocalBeginYear)
				LocalTerm			= 12 - LocalBeginMonth
				LocalTerm			+= 1
				LocalNumberOfYears	= LocalEndYear - LocalBeginYear
				if (LocalNumberOfYears = 1)
					LocalTerm		= LocalTerm + LocalEndMonth
				else
					LocalNumberOfYears	= LocalNumberOfYears - 1
					LocalMonthsToAdd	= LocalNumberOfYears * 12
					LocalTerm			= LocalTerm + LocalMonthsToAdd
					LocalTerm			= LocalTerm + LocalEndMonth
			else
				LocalTerm				= LocalEndMonth - LocalBeginMonth
				LocalTerm				+= 1
			if (LocalTerm != Term)
				constraint (LocalTerm = Term)
					"LeaseTerm<Term>MustEqualNumberOfMonthsBetweenBeginAndEndDates<LocalTerm>"
			if (VendorPaymentDetailsWithoutResidualRel exist)
				initialize LocalNumberOfPayments
				initialize LocalNumberPaymentsOfTerm
				initialize LocalNumberOfYearsTerm
				LocalNumberOfYearsTerm		= Term / 12
				LocalNumberPaymentsOfTerm	= LocalNumberOfYearsTerm * PaymentsPerYear
				LocalNumberOfPayments 		= instance count of VendorPaymentDetailsWithoutResidualRel
				if (LocalNumberOfPayments != LocalNumberPaymentsOfTerm)
					confirmation required
						"NumberOfLeasePayments<LocalNumberOfPayments>AreNotEqualToLeasePaymentsForTerm<LocalNumberPaymentsOfTerm>;IsThisCorrect?"
						
		BuildTextIndexes 
			build text search field LeaseSearchDocument
				Fields
					Lease
					Description
					
		CalculateBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= each.NetChangeToPresentValue
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= BaseCurrency
			LocalBaseNetChangeToPresentValue							= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= LeasePaymentRel.StraightLineAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= BaseCurrency
			LocalBaseStraightLineAmount									= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount			

		CalculateImpairmentROUBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= ImpairmentInProgressRel.ImpairmentROUBalance.TransactionAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= BaseCurrency
			LocalImpairmentROUBaseAmount								= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
		
		CalculateAdjustmentROUBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= AdjustmentInProgressRel.AdjustmentROUBalance.TransactionAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= BaseCurrency
			LocalAdjustmentROUBaseAmount								= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

		CalculateNetBasePaymentAmount
 			if (each.BaseLandTax entered)
 				LocalNetBasePaymentAmount = (each.BasePaymentAmount + each.BaseLandTax)
 			else
 				LocalNetBasePaymentAmount =  each.BasePaymentAmount

		CalculateNetPaymentAmount
 			if (each.TransactionLandTax entered)
 				LocalNetPaymentAmount = (each.PaymentAmount + each.TransactionLandTax)
 			else
 				LocalNetPaymentAmount =  each.PaymentAmount

			if (EndDate = each.DueDate
			and EndingResidual)
				LocalNetPaymentAmount += GuaranteedAmount.TransactionAmount
			if (EndDate = each.DueDate
			and HasEndingBargainPurchaseOption)
				LocalNetPaymentAmount += BargainPurchaseAmount.TransactionAmount


			if (LastPaymentNotOnEndDateWithResidual
			and each.DueDate month = EndDate month
			and each.DueDate year  = EndDate year)
				if (EndingResidual)
					LocalNetPaymentAmount += GuaranteedAmount.TransactionAmount
				if (HasEndingBargainPurchaseOption)
					LocalNetPaymentAmount += BargainPurchaseAmount.TransactionAmount


		RemoveAmortization  
			if (Term changed
			or LeaseTerm changed
			or BeginDate changed
			or EndDate changed
			or PaymentTiming changed
			or ImplicitInterestRate changed
			or InterestRate changed
			or FairMarketValue.TransactionAmount changed
			or GuaranteedAmount.TransactionAmount changed
			or BargainPurchaseAmount.TransactionAmount changed 
			or InitialDirectCost.TransactionAmount changed
			or IncentiveAmount.TransactionAmount changed

			or DownPayment.TransactionAmount changed
			or Currency changed
			or BaseCurrency changed
			or BaseCurrencyRate changed
			or Simulated changed
			or Ownership changed
			or SpecializedAsset changed
			or ExercisePurchase	changed
			or LeaseClassification changed
			or LeaseAccountingStatement changed)
				invoke RemoveAmortization
				if (ASC842Lease)
					invoke Test
				if (IsGASBLease
				or  IsIFRSLease)
					invoke GASBPresentValueCalculation
			if (IsShortTermLease 
			and HasAmortizationSchedule)	
				invoke RemoveAmortization			
	
		CreateLeasePaymentBalanceRules  
			initialize LocalTempFiscalYear




			invoke 	CreateLeasePaymentBalance LeasePaymentDetail in background
				assign async action request id to AsyncId
				invoked.PrmCompany			= Company
				invoked.PrmLease			= Lease
				invoked.PrmVendor			= Lessor
				invoked.PrmTempFiscalYear	= LocalTempFiscalYear					

			invoke CreateLeaseCurrencyPaymentBalance LeasePaymentBalance in background
				run after AsyncId
				assign async action request id to AsyncId
				invoked.PrmCompany			= Company
				invoked.PrmLease			= Lease
				invoked.PrmVendor			= Lessor
				invoked.PrmInitializeEntry	= true




























































































































































		CreateModificationLeasePaymentBalance 
			initialize LocalTempFiscalYear
			initialize LocalModificationDate
			LocalModificationDate = first ModificationInProgressRel.ModificationEffectiveDate
			if (DerivedUseRemainingLife)
				LocalRemainingTerm	= DerivedPeriodsLeft
			else
				LocalRemainingTerm = instance count of FirstPaymentDetailsForModificationRel
			if (GuaranteedAmount.TransactionAmount entered)
				LocalRemainingTerm	= LocalRemainingTerm - 1 
			LocalFirstPaymentDueAfterModification = first LeasePaymentDetailsForModificationNoECCDueDateRel.DueDate
			include UpdateNetChangeNetPresentValueRules
			for each LeasePaymentDetailsForModificationNoECCDueDateRel
				LocalLeasePaymentDueDate = each.DueDate
				include CalculateNetBasePaymentAmount
				include CalculateBaseAmounts
				if (DerivedFiscalYear = DerivedModificationFiscalYear) 
					if (each.DueDate = LocalFirstPaymentDueAfterModification) 
						invoke UpdateLeaseAmortization LeasePaymentBalanceForModificationYearRel
							invoked.PrmBeginningROUAmount			= LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
							invoked.PrmBeginningPrincipalBalance	= LeaseObligation.BaseAmount.EnteredCurrencyAmount
							invoked.PrmLeasePaymentDueDate			= LocalLeasePaymentDueDate
				else
				if (LocalTempFiscalYear not entered)
					LocalTempFiscalYear 							= DerivedFiscalYear
					LocalBeginningROUAmount							= last LeasePaymentPeriodBalanceRel.ROUBalance 
					LocalBeginningBalanceAmount						= DerivedTotalBasePayments
					LocalBeginningPrincipalBalance					= last LeasePaymentPeriodBalanceRel.LiabilityBalance 
					LocalBeginningBalanceInterest					= DerivedTotalBasePayments - LocalBeginningPrincipalBalance
					LocalFinanceLeaseROUReduction					= LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount / LocalRemainingTerm




					if (LocalFinanceLeaseROUReduction entered)
						round LocalFinanceLeaseROUReduction to nearest DerivedBaseRoundTo

					invoke CreateLeaseAmortization LeasePaymentBalance
						invoked.LeasePaymentBalance.FiscalYear 		= DerivedFiscalYear
						invoked.Company								= Company
						invoked.Lease								= Lease
						invoked.Vendor								= Lessor
						invoked.BeginningROUAmount					= LocalBeginningROUAmount
						invoked.BeginningBalanceAmount				= LocalBeginningBalanceAmount
						invoked.BeginningPrincipalBalance			= LocalBeginningPrincipalBalance
						invoked.BeginningBalanceInterest			= LocalBeginningBalanceInterest
						invoked.BaseNumberOfDecimals				= BaseNumberOfDecimals
					
					if (!LeaseClassification.Finance)
						LocalROUReduction							= LocalBaseStraightLineAmount - (LocalNetBasePaymentAmount - LocalBaseNetChangeToPresentValue)
					else
						LocalROUReduction							= LocalFinanceLeaseROUReduction
					LocalBeginningROUAmount							= LocalBeginningROUAmount - LocalROUReduction


					LocalBeginningBalanceAmount						= LocalBeginningBalanceAmount - LocalNetBasePaymentAmount
					LocalBeginningPrincipalBalance					= LocalBeginningPrincipalBalance - LocalBaseNetChangeToPresentValue
					LocalBeginningBalanceInterest					= LocalBeginningBalanceInterest - (LocalNetBasePaymentAmount - LocalBaseNetChangeToPresentValue)								
				else
					if (DerivedFiscalYear != LocalTempFiscalYear)
						LocalTempFiscalYear = DerivedFiscalYear


						invoke CreateLeaseAmortization LeasePaymentBalance
							invoked.LeasePaymentBalance.FiscalYear 	= DerivedFiscalYear
							invoked.Company							= Company
							invoked.Lease							= Lease
							invoked.Vendor							= Lessor
							invoked.BeginningROUAmount				= LocalBeginningROUAmount
							invoked.BeginningBalanceAmount			= LocalBeginningBalanceAmount
							invoked.BeginningPrincipalBalance		= LocalBeginningPrincipalBalance
							invoked.BeginningBalanceInterest		= LocalBeginningBalanceInterest
							invoked.BaseNumberOfDecimals			= BaseNumberOfDecimals
					
					if (!LeaseClassification.Finance)
						LocalROUReduction							= last AllLeaseBaseCurrencyBalancesRel.ROUBalance
						LocalBeginningROUAmount						= LocalROUReduction
					else
						LocalROUReduction							= LocalFinanceLeaseROUReduction
						LocalBeginningROUAmount						= LocalBeginningROUAmount - LocalROUReduction


					LocalBeginningBalanceAmount						= LocalBeginningBalanceAmount - LocalNetBasePaymentAmount
					LocalBeginningPrincipalBalance					= LocalBeginningPrincipalBalance - LocalBaseNetChangeToPresentValue
					LocalBeginningBalanceInterest					= LocalBeginningBalanceInterest - (LocalNetBasePaymentAmount - LocalBaseNetChangeToPresentValue)

			if (ShortTermLiabilityAccounting)

				LocalCalculateLongTermLiabilityDueDate 		= first ModificationInProgressRel.DerivedEffectiveDate
				LocalCalculateLongTermLiabilityDueDate 		+= 11 months
				LocalBaseLongTermLiability 					= sum LongTermBaseCurrencyLiabilityRel.PrincipalAmount
				LocalBaseShortTermLiability 				= last LeasePaymentBalancesRel.BeginningPrincipalBalance - LocalBaseLongTermLiability
				invoke Update last LeasePaymentBalancesRel
					invoked.BeginningShortTermLiability		= LocalBaseShortTermLiability
					invoked.BeginningLongTermLiability		= LocalBaseLongTermLiability

				invoke CalculateShortAndLongTermLiabilityAmounts LeasePaymentPeriodBalance in foreground


					invoked.PrmCompany			= Company
					invoked.PrmLease			= Lease
					invoked.PrmVendor			= Lessor
					invoked.PrmPaymentDueDate	= first ModificationInProgressRel.DerivedEffectiveDate


		CreateModificationLeaseCurrencyPaymentBalance 
			initialize LocalTempFiscalYear
			initialize LocalModificationDate
			LocalModificationDate = first ModificationInProgressRel.ModificationEffectiveDate
			if (DerivedUseRemainingLife)
				LocalRemainingTerm	= DerivedPeriodsLeft
			else
				LocalRemainingTerm = instance count of FirstPaymentDetailsForModificationRel
			if (Lease.GuaranteedAmount.TransactionAmount entered)
				LocalRemainingTerm	= LocalRemainingTerm - 1 
			LocalFirstPaymentDueAfterModification = first LeasePaymentDetailsForModificationNoECCDueDateRel.DueDate
			include UpdateNetChangeNetPresentValueRules
			
			for each LeasePaymentDetailsForModificationNoECCDueDateRel
				LocalLeasePaymentDueDate = each.DueDate
				include CalculateNetPaymentAmount
				if (DerivedFiscalYear = DerivedModificationFiscalYear) 
					if (each.DueDate = LocalFirstPaymentDueAfterModification) 
						invoke UpdateLeaseAmortization LeaseCurrencyPaymentBalanceForModificationYearRel
							invoked.PrmBeginningROUAmount				= LeaseROUAssetAmount.TransactionAmount
							invoked.PrmBeginningPrincipalBalance		= LeaseObligation.TransactionAmount
							invoked.PrmLeasePaymentDueDate				= LocalLeasePaymentDueDate
				else
				if (LocalTempFiscalYear not entered)
					LocalTempFiscalYear 								= DerivedFiscalYear
					LocalBeginningROUAmount								= last LeaseCurrencyPaymentPeriodBalanceRel.ROUBalance 
					LocalBeginningBalanceAmount							= DerivedTotalPayments
					LocalBeginningPrincipalBalance						= last LeaseCurrencyPaymentPeriodBalanceRel.LiabilityBalance 
					LocalBeginningBalanceInterest						= DerivedTotalPayments - LocalBeginningPrincipalBalance
					LocalFinanceLeaseROUReduction						= LeaseROUAssetAmount.TransactionAmount / LocalRemainingTerm			

		    		if (LocalFinanceLeaseROUReduction entered)
			    		round LocalFinanceLeaseROUReduction to nearest DerivedRoundTo

					invoke CreateLeaseAmortization LeaseCurrencyPaymentBalance
						invoked.Company									= Company
						invoked.Lease									= Lease
						invoked.Vendor									= Lessor
						invoked.LeasePaymentBalance.FiscalYear 			= DerivedFiscalYear
						invoked.LeaseCurrencyPaymentBalance.Currency	= Currency
						invoked.BeginningROUAmount						= LocalBeginningROUAmount
						invoked.BeginningBalanceAmount					= LocalBeginningBalanceAmount
						invoked.BeginningPrincipalBalance				= LocalBeginningPrincipalBalance
						invoked.BeginningBalanceInterest				= LocalBeginningBalanceInterest
						invoked.CurrencyNumberOfDecimals				= CurrencyNumberOfDecimals
					
					if (!LeaseClassification.Finance)
						LocalROUReduction								= LeasePaymentRel.StraightLineAmount - (LocalNetPaymentAmount - each.NetChangeToPresentValue)
					else
						LocalROUReduction								= LocalFinanceLeaseROUReduction
						
					LocalBeginningROUAmount								= LocalBeginningROUAmount - LocalROUReduction
					LocalBeginningBalanceAmount							= LocalBeginningBalanceAmount - LocalNetPaymentAmount
					LocalBeginningPrincipalBalance						= LocalBeginningPrincipalBalance - each.NetChangeToPresentValue
					LocalBeginningBalanceInterest						= LocalBeginningBalanceInterest - (LocalNetPaymentAmount - each.NetChangeToPresentValue)
				else
					if (DerivedFiscalYear != LocalTempFiscalYear)
						LocalTempFiscalYear = DerivedFiscalYear
						invoke CreateLeaseAmortization LeaseCurrencyPaymentBalance
							invoked.Company									= Company
							invoked.Lease									= Lease
							invoked.Vendor									= Lessor
							invoked.LeasePaymentBalance.FiscalYear 			= DerivedFiscalYear
							invoked.LeaseCurrencyPaymentBalance.Currency	= Currency
							invoked.BeginningROUAmount						= LocalBeginningROUAmount
							invoked.BeginningBalanceAmount					= LocalBeginningBalanceAmount
							invoked.BeginningPrincipalBalance				= LocalBeginningPrincipalBalance
							invoked.BeginningBalanceInterest				= LocalBeginningBalanceInterest
							invoked.CurrencyNumberOfDecimals				= CurrencyNumberOfDecimals
					
					if (!LeaseClassification.Finance)
						LocalROUReduction								= last AllLeaseCurrencyBalancesRel.ROUBalance
						LocalBeginningROUAmount							= LocalROUReduction
					else
						LocalROUReduction								= LocalFinanceLeaseROUReduction						
						LocalBeginningROUAmount							= LocalBeginningROUAmount - LocalROUReduction
					LocalBeginningBalanceAmount							= LocalBeginningBalanceAmount - LocalNetPaymentAmount
					LocalBeginningPrincipalBalance						= LocalBeginningPrincipalBalance - each.NetChangeToPresentValue
					LocalBeginningBalanceInterest						= LocalBeginningBalanceInterest - (LocalNetPaymentAmount - each.NetChangeToPresentValue)


			if (ShortTermLiabilityAccounting)
				LocalCalculateLongTermLiabilityDueDate 		= first ModificationInProgressRel.DerivedEffectiveDate
				LocalCalculateLongTermLiabilityDueDate 		+= 11 months
				LocalLongTermLiability 						= sum LongTermLeaseCurrencyLiabilityRel.PrincipalAmount
				LocalShortTermLiability 					= last LeaseCurrencyPaymentBalanceNoECCRel.BeginningPrincipalBalance - LocalLongTermLiability
				invoke Update last LeaseCurrencyPaymentBalanceNoECCRel
					invoked.BeginningShortTermLiability		= LocalShortTermLiability
					invoked.BeginningLongTermLiability		= LocalLongTermLiability

				invoke CalculateShortAndLongTermLiabilityAmounts LeaseCurrencyPaymentPeriodBalance in foreground


					invoked.PrmCompany			= Company
					invoked.PrmLease			= Lease
					invoked.PrmVendor			= Lessor
					invoked.PrmPaymentDueDate	= first ModificationInProgressRel.DerivedEffectiveDate


		ShortTermLeasesRules
			if (EnterAssetsOnLease)
				if ((ShortTermGASBLease
				or   ShortTermIFRS)
				and HasAsset)
					constraint (LeaseROUAssetAmount.TransactionAmount entered)
						"CannotRelease;LeaseROUAmountNotEnteredRunPVCalculation"
				else
					constraint (LeaseROUAssetAmount.TransactionAmount entered)
						"CannotRelease;LeaseROUAmountNotEntered.RunTest" 
				if (!HasAsset)
					confirmation required
						"Warning;AssetsOnLeaseIs<NumberOfAssets>AndNoAssetsEntered"				
			if (ShortTermGASBLease
			or  ShortTermIFRS)
				constraint (LeaseCategory.NonDepreciable)
					"CannotRelease;LeaseCategoryMustBeNonDepreciableForShortTermLease" 
				LeaseClassification	= "O"
																				
		GASB87ReleaseRules			
			if (!ShortTermGASBLease
			and !ShortTermIFRS) 
				constraint (HasAsset)
					"CannotRelease;AssetRequired" 
				constraint (LeaseCategory.Depreciable)
					"CannotRelease;LeaseCategoryshouldbeDepreciableForGASBLeasesAndIFRSLeases" 


		OperatingLeaseReleaseRules
			include CalculateTotalBookBasis
			constraint (HasAsset)
				"CannotRelease;NoAssetsExistAndLeaseIsLongTermOperatingLease" 	
			if (!IsARenewal)
				if (LocalUseBaseCurrency)
					LocalBaseCurrencyTolerance	 = LocalTotalBasis - LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
					if (LocalBaseCurrencyTolerance < 0)
						LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
					if (LocalBaseCurrencyTolerance < 1
					and !LocalBaseCurrencyTolerance = 0)
						confirmation required
							"Warning;TotalAssetsBasisIs<LocalTotalBasis>AndTotalLeaseROUIs<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
					else
						constraint (LocalTotalBasis = LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount)   
							"CannotRelease;BaseCurrencyRightOfUse<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>NotEqualToTotalBasis<LocalTotalBasis>"	
				else
					LocalDerivedInitialROUAssetAmount	= DerivedInitialROUAssetAmount
					round LocalDerivedInitialROUAssetAmount to nearest DerivedRoundTo
					TestLocalTotalBasis					= LocalTotalBasis
					constraint (TestLocalTotalBasis = LocalDerivedInitialROUAssetAmount)   
						"CannotRelease;RightOfUse<LocalDerivedInitialROUAssetAmount>NotEqualToTotalBasis"
			else
				if (LocalUseBaseCurrency)
					LocalRenewalROUAmount		= sum RenewalLeaseRenewalsRel.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount 
					LocalRenewalROUAmount		= LocalRenewalROUAmount + OriginalLease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
					round LocalRenewalROUAmount to nearest DerivedBaseRoundTo
					LocalBaseCurrencyTolerance	 = LocalTotalBasis - LocalRenewalROUAmount
					if (LocalBaseCurrencyTolerance < 0)
						LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
					if (LocalBaseCurrencyTolerance < 1
					and !LocalBaseCurrencyTolerance = 0)
						confirmation required
							"Warning;TotalAssetsBasisIs<LocalTotalBasis>AndTotalLeaseROUIs<LocalRenewalROUAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
					else
						constraint (LocalTotalBasis = LocalRenewalROUAmount)   
							"CannotRelease;BaseCurrencyRightOfUse<LocalRenewalROUAmount>NotEqualToTotalBasis<LocalTotalBasis>"							
				else
					LocalRenewalROUAmount		= sum RenewalLeaseRenewalsRel.DerivedInitialROUAssetAmount 
					LocalRenewalROUAmount		= LocalRenewalROUAmount + OriginalLease.DerivedInitialROUAssetAmount
					constraint (LocalTotalBasis = LocalRenewalROUAmount)   
						"CannotRelease;RightOfUse<LocalRenewalROUAmount>NotEqualToTotalBasis<LocalTotalBasis>"									
			constraint (PaymentsPerYear entered)
				"PaymentsPerYearRequiredForLongTermOperatingLease"									
			constraint (PaymentTiming entered)							
				"PaymentTimingRequiredForLongTermOperatingLease"											

			if (ImplicitInterestRate not entered)
		        constraint (InterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForLongTermOperatingLease"             
			if (InterestRate not entered)
		        constraint (ImplicitInterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForLongTermOperatingLease"
			if (OperatingLeaseAllocationCode not entered)
				constraint (LongTermOperatingLeaseExpense.GeneralLedgerChartAccount entered)
					"OperatingLeaseExpenseAccountRequiredOnOperatingLease"
			else
				constraint (LongTermOperatingLeaseExpense not entered)
					"OperatingLeaseExpenseAccountAndOperatingLeaseAllocationCodeCannotBeEntered"
			if (LeasePaymentsRel.StraightLine)
				constraint (LeasePaymentsRel.TotalPaymentAmounts entered)
					"CannotSetStraightLineToTrueOnPaymentScheduleIfThereAreNoPaymentAmounts"
				constraint (!LeasePaymentsRel.HasOnlyExecutoryCodePayments)
					"CannotSetStraightLineToTrueOnPaymentScheduleWithOnlyExecutoryCodePayments"


		PresentValueIteration
			initialize LocalUpperLimit
			initialize LocalLowerLimit
			initialize LocalAbsoluteAmount
			initialize RecalculatePV
			LocalTwoTimesTheTerm		= Term * 2
			LocalTwoTimesTheTerm		= LocalTwoTimesTheTerm /100
			LocalEndingAmount			= sum LeasePaymentDetailsNoECCDueDateRel.NetChangeToPresentValue
			LocalEndingAmount			= LeaseObligation.TransactionAmount - LocalEndingAmount
			LocalTempLeaseObligation 	= LeaseObligation.TransactionAmount
			if (LocalEndingAmount < "0")
				LocalLowerLimit		= LocalEndingAmount
				LocalAbsoluteAmount	= LocalEndingAmount *-1
			else
				LocalUpperLimit		= LocalEndingAmount
				LocalAbsoluteAmount	= LocalEndingAmount
			if (LocalAbsoluteAmount > LocalTwoTimesTheTerm)
				initialize LocalInteration
				RecalculatePV	= true
				while LocalInteration < 20
					LocalInteration += 1
					if (LocalInteration = 1)
						if (LocalUpperLimit entered)
							LocalPresentValueAdjustment	= LocalUpperLimit /2
						else
							LocalPresentValueAdjustment	= LocalLowerLimit /2
					else
						LocalPresentValueAdjustment		= LocalNewEndingAmount /2
					LocalTempLeaseObligation = LocalTempLeaseObligation - LocalPresentValueAdjustment
					include UpdateNetChangeNetPresentValueRules
					LocalNewEndingAmount		= sum LeasePaymentDetailsNoECCDueDateRel.NetChangeToPresentValue
					LocalNewEndingAmount		= LocalTempLeaseObligation - LocalNewEndingAmount					
					if (LocalNewEndingAmount = 0)
						LocalInteration = 20
					else
						if ((LocalUpperLimit entered
						and LocalNewEndingAmount < 0)
						or (LocalLowerLimit entered
						and LocalNewEndingAmount > 0))
							LocalInteration = 20
							LocalTempLeaseObligation = LocalTempLeaseObligation + LocalPresentValueAdjustment
				NetPresentValue.TransactionAmount		= LocalTempLeaseObligation
				LeaseObligation.TransactionAmount		= LocalTempLeaseObligation
				if(LeaseIncentiveOnBeginDateRel exists)
					LeaseROUAssetAmount.TransactionAmount	= LocalTempLeaseObligation + DownPayment.TransactionAmount + InitialDirectCost.TransactionAmount + BeginningIDC - sum LeaseIncentiveOnBeginDateRel.Amount.TransactionAmount + DeferredRentsAtAdoption	
				else
					LeaseROUAssetAmount.TransactionAmount	= LocalTempLeaseObligation + DownPayment.TransactionAmount + InitialDirectCost.TransactionAmount + BeginningIDC - IncentiveAmount.TransactionAmount + DeferredRentsAtAdoption
				if (IsGASBLease
				or  IsIFRSLease)
					if(LeaseIncentiveOnBeginDateRel exists)
						NetPresentValue.TransactionAmount	= NetPresentValue.TransactionAmount + DownPayment.TransactionAmount + InitialDirectCost.TransactionAmount + BeginningIDC - sum LeaseIncentiveOnBeginDateRel.Amount.TransactionAmount + DeferredRentsAtAdoption
					else
						NetPresentValue.TransactionAmount	= NetPresentValue.TransactionAmount + DownPayment.TransactionAmount + InitialDirectCost.TransactionAmount + BeginningIDC - IncentiveAmount.TransactionAmount + DeferredRentsAtAdoption
				include SetLesaeTransactionAmounts
				include SetBaseAmounts
 
		SetLesaeTransactionAmounts  
			NetPresentValue.TransactionAmount		= RoundedROUAmount
			LeaseObligation.TransactionAmount	 	= RoundedObligationTransAmount
			LeaseROUAssetAmount.TransactionAmount	= RoundedROUAmount  
		SetBaseAmounts
        	initialize NetPresentValue.BaseAmount.EnteredCurrencyAmount
			initialize NetPresentValue.BaseAmount.EnteredCurrencyRate   
			if (FAS13NetPresentValue != NetPresentValue.TransactionAmount)
      			NetPresentValue.BaseAmount.ToCurrency				= Company.Currency
      			NetPresentValue.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate
				NetPresentValue.BaseAmount.EnteredCurrencyAmount	= NetPresentValue.BaseAmount.OutputCurrencyAmount

        	initialize LeaseObligation.BaseAmount.EnteredCurrencyAmount
			initialize LeaseObligation.BaseAmount.EnteredCurrencyRate  
			if (FAS13LeaseObligation != LeaseObligation.TransactionAmount)
      			LeaseObligation.BaseAmount.ToCurrency				= Company.Currency
      			LeaseObligation.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
				LeaseObligation.BaseAmount.EnteredCurrencyAmount	= LeaseObligation.BaseAmount.OutputCurrencyAmount

        	initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
			initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate  
			if (FAS13NetPresentValue != LeaseROUAssetAmount.TransactionAmount)
      			LeaseROUAssetAmount.BaseAmount.ToCurrency				= Company.Currency
      			LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
				LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	= LeaseROUAssetAmount.BaseAmount.OutputCurrencyAmount
		CommonRulesForReleaseActions
			if (ImplicitInterestRate not entered)
				constraint (InterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForLongTermOperatingLease"

			if (InterestRate not entered)
				constraint (ImplicitInterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForLongTermOperatingLease"

			if (LeasePaymentsRel.StraightLine)
				constraint (LeasePaymentsRel.TotalPaymentAmounts entered)
					"CannotSetStraightLineToTrueOnPaymentScheduleIfThereAreNoPaymentAmounts"
				constraint (!LeasePaymentsRel.HasOnlyExecutoryCodePayments)
					"CannotSetStraightLineToTrueOnPaymentScheduleWithOnlyExecutoryCodePayments"

			constraint (HasAsset)
				"CannotRelease;NoAssetsExistAndLeaseIsLongTermOperatingLease"

			include CalculateTotalBookBasis			

		CurrentBalancesRules
			initialize LoaclLastPaymentPosted
			LocalCurrentLiabilityAmount				= LeaseObligation.TransactionAmount
			LocalCurrentROUAmount					= LeaseROUAssetAmount.TransactionAmount
			LocalCurrentBaseLiabilityAmount			= LeaseObligation.BaseAmount.EnteredCurrencyAmount
			LocalCurrentBaseROUAmount				= LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount			
			if (PostedLeasePaymentslRel exists)
				for each PostedLeasePaymentslRel
					LocalLastPaymentPostedNUmber = each.LeaseInvoice.PaymentNumber
					if (LeaseInvoiceDistributionRel exists)
						LoaclLastPaymentPosted = each.DueDate
						end for each
				if (LoaclLastPaymentPosted entered)
					LocalCurrentLiabilityAmount			= LeaseCurrencyCurrentBalancesRel.LiabilityBalance
					LocalCurrentROUAmount				= LeaseCurrencyCurrentBalancesRel.ROUBalance
					LocalCurrentBaseLiabilityAmount		= LeaseBaseCurrencyCurrentBalancesRel.LiabilityBalance
					LocalCurrentBaseROUAmount			= LeaseBaseCurrencyCurrentBalancesRel.ROUBalance		
					LocalShortTermLiabilityAmount		= LeaseCurrencyCurrentBalancesRel.ShortTermLiability
					LocalLongTermLiabilityAmount		= LeaseCurrencyCurrentBalancesRel.LongTermLiability
					LocalShortTermBaseLiabilityAmount	= LeaseBaseCurrencyCurrentBalancesRel.ShortTermLiability
					LocalLongTermBaseLiabilityAmount	= LeaseBaseCurrencyCurrentBalancesRel.LongTermLiability
					if (LeaseModificationAfterLastPaymentRel exists)
						for each LeaseModificationAfterLastPaymentRel
							LocalCurrentLiabilityAmount			+= each.ModificationAmount.TransactionAmount
							LocalCurrentROUAmount				+= each.ModificationAmount.TransactionAmount
							LocalCurrentBaseLiabilityAmount		+= each.ModificationAmount.BaseAmount.EnteredCurrencyAmount
							LocalCurrentBaseROUAmount			+= each.ModificationAmount.BaseAmount.EnteredCurrencyAmount
					if (ImpairmentAfterLastPaymentRel exists)
						for each ImpairmentAfterLastPaymentRel
							LocalCurrentLiabilityAmount			+= each.ImpairmentAmount.TransactionAmount
							LocalCurrentROUAmount				+= each.ImpairmentAmount.TransactionAmount
							LocalCurrentBaseLiabilityAmount		+= each.ImpairmentAmount.BaseAmount.EnteredCurrencyAmount
							LocalCurrentBaseROUAmount			+= each.ImpairmentAmount.BaseAmount.EnteredCurrencyAmount	
					if(AdjustmentAfterLastPaymentRel exists)
						for each AdjustmentAfterLastPaymentRel
							LocalCurrentLiabilityAmount			+= each.AdjustmentAmount.TransactionAmount
							LocalCurrentROUAmount				+= each.AdjustmentAmount.TransactionAmount
							LocalCurrentBaseLiabilityAmount		+= each.AdjustmentAmount.BaseAmount.EnteredCurrencyAmount
							LocalCurrentBaseROUAmount			+= each.AdjustmentAmount.BaseAmount.EnteredCurrencyAmount
			else
				LocalShortTermLiabilityAmount			= last LeaseCurrencyPaymentBalanceNoECCRel.BeginningShortTermLiability
				LocalLongTermLiabilityAmount			= last LeaseCurrencyPaymentBalanceNoECCRel.BeginningLongTermLiability
				LocalShortTermBaseLiabilityAmount		= last LeasePaymentBalancesRel.BeginningShortTermLiability
				LocalLongTermBaseLiabilityAmount		= last LeasePaymentBalancesRel.BeginningLongTermLiability	

		CreatePaymentForResidualOrBargainPurchase  

			if  (BargainPurchaseAmount.TransactionAmount entered
			and  ExercisePurchase)
				invoke Create LeasePaymentDetail
					invoked.Company						= Company
					invoked.Lease						= Lease
					invoked.Vendor						= Lessor								
					invoked.DueDate						= EndDate
					invoked.PaymentAmount				= BargainPurchaseAmount.TransactionAmount
					invoked.Description					= "Purchase Option Payment"
					invoked.PurchaseOptionPayment		= true
					invoked.Currency					= Currency
					invoked.CurrencyNumberOfDecimals	= CurrencyNumberOfDecimals
					invoked.BaseCurrency				= BaseCurrency
					invoked.BaseCurrencyRate			= BaseCurrencyRate
					invoked.BaseNumberOfDecimals		= BaseNumberOfDecimals
					invoked.BasePaymentAmount			= GuaranteedAmount.BaseAmount.EnteredCurrencyAmount
					invoked.Year                        = DerivedPurchaseAmountFiscalYear
					invoked.Period                      = DerivedPurchaseAmountFiscalPeriod
				if (LeaseClassification.Operating
				and LeasePaymentsRel.StraightLine)
					invoke StraightLineUpdate LeasePaymentsRel
			else
				if  (GuaranteedAmount.TransactionAmount entered)
					invoke Create LeasePaymentDetail
						invoked.Company						= Company
						invoked.Lease						= Lease
						invoked.Vendor						= Lessor								
						invoked.DueDate						= EndDate
						invoked.PaymentAmount				= GuaranteedAmount.TransactionAmount
						invoked.Description					= "Residual Payment"
						invoked.ResidualPayment				= true
						invoked.Currency					= Currency
						invoked.CurrencyNumberOfDecimals	= CurrencyNumberOfDecimals
						invoked.BaseCurrency				= BaseCurrency
						invoked.BaseCurrencyRate			= BaseCurrencyRate
						invoked.BaseNumberOfDecimals		= BaseNumberOfDecimals
						invoked.BasePaymentAmount			= GuaranteedAmount.BaseAmount.EnteredCurrencyAmount
						invoked.Year                        = DerivedPurchaseAmountFiscalYear
						invoked.Period                      = DerivedPurchaseAmountFiscalPeriod
					if (LeaseClassification.Operating
					and LeasePaymentsRel.StraightLine)
						invoke StraightLineUpdate LeasePaymentsRel

		SetFiscalYearAndPeriodForPaymentDetail
			if (Lease.Status.Modify)
				if (LeasePaymentDetailAddedPeriodsRel not exist)
					LocalLeasePaymentDueDate = first VendorPaymentDetailsRel.DueDate
					LocalYear         = DerivedGLYear
					LocalPeriod       = GLClosePeriodRel.PeriodNumber
				else
					LocalYear = last LeasePaymentDetailAddedPeriodsRel.Year
					LocalPeriod = last LeasePaymentDetailAddedPeriodsRel.Period
				for each EmptyFiscalYearAndPeriodPaymentDetailRel
					invoke RestrictedUpdate each
						if (each.DueDate month = BeginDate month
						and each.DueDate year = BeginDate year)
							LocalPeriod = LocalPeriod
						else
						if (LocalPeriod = 12)
							LocalYear = LocalYear + 1 year
							LocalPeriod = 1			
						else
							LocalPeriod = LocalPeriod + 1					
						invoked.Year    = LocalYear
						invoked.Period  = LocalPeriod
			else
				initialize LocalYear
				initialize LocalPeriod
				for each VendorPaymentDetailsRel            
					LocalLeasePaymentDueDate  = each.DueDate
					invoke RestrictedUpdate each
						if (each.DueDate month = BeginDate month
						and each.DueDate year = BeginDate year)
							constraint(GLClosePeriodRel exists)
								"ClosePeriodConfigurationMustBeEnteredForTheLeaseBeginDate"			
							LocalYear         = DerivedGLYear
							LocalPeriod       = GLClosePeriodRel.PeriodNumber
						else
						if (LocalPeriod = 12)
							LocalYear = LocalYear + 1 year
							LocalPeriod = 1
						else
							LocalPeriod = LocalPeriod + 1
						invoked.Year    = LocalYear
						invoked.Period  = LocalPeriod

	Derived Fields
		LeaseRepresentativeText is a StringField
			type is Text
			default label is "Lease"
			Lease " - " Description
		
			
		CompanyRepresentativeText is a StringField
			type is Text
			default label is "Company"
			Company " - " Company.Name
			
		VendorRepresentativeText is a StringField
			type is Text
			default label is "Vendor"
			Lessor " - " Lessor.VendorName
			
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforProperty"

		ContextMessageText is a MessageField
			restricted
			"Lease<Lease>"

		DueToTheChangesTheTestActionMustBeReran is a MessageField
			restricted
			"DueToTheChangesTheTestActionMustBeReran"

		DueToTheChangesThePresentValueActionMustBeReran is a MessageField
			restricted
			"DueToTheChangesThePresentValueActionMustBeReran"









        DrillIntRate is a ComputeField
            type is Decimal size 7.5
            restricted
            (InterestRate * 100)

        DrillImpRate is a ComputeField
            type is Decimal size 7.5
            restricted
            (ImplicitInterestRate * 100)

		LeaseAccountingMethodHeader  is a DerivedField
			type is Text
			if (IsShortTermLease and LeaseAccountingMethod.GASB87)
				LeaseAccountingMethodHeader = "GASB87" + " - " + "SHORT TERM LEASE"
			if (IsShortTermLease and LeaseAccountingMethod.GASB96)
				LeaseAccountingMethodHeader = "GASB96" + " - " + "SHORT TERM LEASE"
			if (IsShortTermLease and LeaseAccountingMethod.ASC842)
				LeaseAccountingMethodHeader = "ASC842" + " - " + "SHORT TERM LEASE"
			if (IsShortTermLease and LeaseAccountingMethod.IFRS16)
				LeaseAccountingMethodHeader = "IFRS16" + " - " + "SHORT TERM LEASE"
			if (!IsShortTermLease and LeaseAccountingMethod.GASB87)
				LeaseAccountingMethodHeader = "GASB87"
			if (!IsShortTermLease and LeaseAccountingMethod.GASB96)
				LeaseAccountingMethodHeader = "GASB96"
			if (!IsShortTermLease and LeaseAccountingMethod.ASC842)
				LeaseAccountingMethodHeader = "ASC842"
			if (!ShortTermIFRS and LeaseAccountingMethod.IFRS16)
				LeaseAccountingMethodHeader = "IFRS16"
			return LeaseAccountingMethodHeader

		LastPaymentDetailAccrued is a DerivedField
			type is Boolean
			restricted
			return last LeasePaymentDetailsDueDateRel.AccrueFlag

		DerivedTotalPayments is a DerivedField    
			type is like InternationalAmount
			restricted
			LocalWorkAmount = DownPayment.TransactionAmount
			if (Status.Modify)
				for each LeasePaymentBalanceModificationRel
					if 	 (each.LeasePaymentDetail.ExecutoryCostCode not entered
					and  (each.LeaseCompute.ComputeStatement not entered
					or    each.PaymentAmount entered))
						LocalWorkAmount			+= each.PaymentAmount
						LocalWorkAmount			+= each.BaseLandTax
			else
				for each VendorPaymentDetailsRel
					if 	 (each.LeasePaymentDetail.ExecutoryCostCode not entered
					and  (each.LeaseCompute.ComputeStatement not entered
					or    each.PaymentAmount entered))
						LocalWorkAmount			+= each.PaymentAmount
						LocalWorkAmount			+= each.BaseLandTax		
			return LocalWorkAmount			

		DerivedTotalBasePayments is a DerivedField   
			type is like InternationalAmount
			restricted
			LocalWorkAmount = DownPayment.BaseAmount.EnteredCurrencyAmount
			if (Status.Modify)
				for each LeasePaymentBalanceModificationRel
					if 	 (each.LeasePaymentDetail.ExecutoryCostCode not entered
					and  (each.LeaseCompute.ComputeStatement not entered
					or    each.PaymentAmount entered))
						LocalWorkAmount			+= each.BasePaymentAmount
						LocalWorkAmount			+= each.TransactionLandTax	
			else
				for each VendorPaymentDetailsRel
					if 	 (each.LeasePaymentDetail.ExecutoryCostCode not entered
					and  (each.LeaseCompute.ComputeStatement not entered
					or    each.PaymentAmount entered))
						LocalWorkAmount			+= each.BasePaymentAmount
						LocalWorkAmount			+= each.TransactionLandTax	
			return LocalWorkAmount	

		PostingBook is a DerivedField
			type is like Book 
			restricted
			return first PostingBookCalendarsRel.Book

		ProgramName is a MessageField 
			restricted
			"LeaseTermination"

		DerivedCommentCount is a DerivedField
			type is Alpha size up to 20
        	restricted
			if (LeaseComment set exists)
				return "(" + instance count of LeaseComment set + ")"
			else
				return ""

		LocalPeriodOfPerformanceLabel is a MessageField
			restricted
			"PeriodOfPerformance"

		DerivedPeriodOfPerformanceMessage is a DerivedField
			type is Alpha size up to 30
        	restricted
			if (LeaseComment set exists)
				return "(" + instance count of LeaseComment set + ")"
			else
				return ""

		ProjectEdits is a DerivedField
			type is Numeric size 1
			restricted
        	if (DebtAccount.Project entered)
        		LocalProject = DebtAccount.Project
        		if (ProjectPeriodOfPerformanceRel exists)
        			TransientDateRange.BeginDate = ProjectPeriodOfPerformanceRel.ProjectBeginDate
        			TransientDateRange.EndDate = ProjectPeriodOfPerformanceRel.ProjectEndDate        			
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"
        		else 
        			TransientDateRange = DebtAccount.Project.ProjectDateRange
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"
				return 1
		   	if (InterestAccount.Project entered)          
        		LocalProject = InterestAccount.Project
        		if (ProjectPeriodOfPerformanceRel exists)
        			TransientDateRange.BeginDate = ProjectPeriodOfPerformanceRel.ProjectBeginDate
        			TransientDateRange.EndDate = ProjectPeriodOfPerformanceRel.ProjectEndDate        			
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"
        		else 
        			TransientDateRange = InterestAccount.Project.ProjectDateRange
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"

        		return 1
        	if (DefaultDistributionAccount.Project entered)
        		LocalProject = DefaultDistributionAccount.Project        	
        		if (ProjectPeriodOfPerformanceRel exists)
        			TransientDateRange.BeginDate = ProjectPeriodOfPerformanceRel.ProjectBeginDate
        			TransientDateRange.EndDate = ProjectPeriodOfPerformanceRel.ProjectEndDate        			
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"
        		else 
        			TransientDateRange = DefaultDistributionAccount.Project.ProjectDateRange
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"        	 	
				return 1

			if (AccruedAccount.Project entered)
        		LocalProject = AccruedAccount.Project        	
        		if (ProjectPeriodOfPerformanceRel exists)
        			TransientDateRange.BeginDate = ProjectPeriodOfPerformanceRel.ProjectBeginDate
        			TransientDateRange.EndDate = ProjectPeriodOfPerformanceRel.ProjectEndDate        			
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"
        		else 
        			TransientDateRange = AccruedAccount.Project.ProjectDateRange
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"        	 	
				return 1

			if (DeferredRentAccount.Project entered)
        		LocalProject = AccruedAccount.Project        	
        		if (ProjectPeriodOfPerformanceRel exists)
        			TransientDateRange.BeginDate = ProjectPeriodOfPerformanceRel.ProjectBeginDate
        			TransientDateRange.EndDate = ProjectPeriodOfPerformanceRel.ProjectEndDate        			
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProject<LocalPeriodOfPerformanceLabel>DateRange"
        		else 
        			TransientDateRange = DeferredRentAccount.Project.ProjectDateRange
	        		constraint (BeginDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"	
	        		constraint (EndDate within TransientDateRange)
	        			"LeaseDatesNotWithinProjectDateRange"        	 	
				return 1
			else
				initialize TransientDateRange
				initialize LocalProject
				return 0

		RemainingLifeToTotalLife is a DerivedField
			type is Percent size 5.2
			return (RemainingLife / TotalLife)

		LeaseTermToRemainingLife is a DerivedField
			type is Percent size 5.2
			if (Fas13Flag.No)
				return blank
			else
				return (Term / RemainingLife)

		NetPresentValueToMarketValue is a DerivedField
			type is Percent size 5.2
			if (SkipFMVTest
			or Fas13Flag.No)
				return blank
			else
				return (NetPresentValue.TransactionAmount / FairMarketValue.TransactionAmount)

		TotalLeaseTerm is a DerivedField
			type is Numeric size 5
			restricted
			if ((IsGASBLease
			or ExerciseExtension)
			and RenewalLeaseRenewalsRel not exist)
				return (LeaseTerm + LengthOfExtension)
			else
				if (RenewalLeaseRenewalsRel exist)
					TotalLeaseTerm = sum RenewalLeaseRenewalsRel.Term
					TotalLeaseTerm = TotalLeaseTerm + OriginalLease.Term
					return TotalLeaseTerm
				else
					if (ExerciseTermination)
						return (((EndDate year - BeginDate year) * 12) + (EndDate month - BeginDate month) + 1) 				
					else
						return LeaseTerm			
		
		LongTermOperatingLease	is a DerivedField
			type is Boolean
			restricted
			if ((LeaseClassification.Operating
			and TotalLeaseTerm > 12 
			and !IsMonthToMonthRenewal
			and !IsOverridingLongTermLease)
			or (LongTermOperatingLeaseRenewal)
			or (IsOverridingShortTermLease))
				return true
			else
				return false 

		TransitionNetChangePresentValue is a DerivedField
			type is like InternationalAmount

			if (LongTermOperatingLease)
				if (TransitionReportPaymentDetailsRel exists)
					return sum TransitionReportPaymentDetailsRel.NetChangeToPresentValue

		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
			restricted
    		if (Currency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (Currency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (Currency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (Currency.NumberOfDecimals = 4)
    			return .0001

		DerivedBaseRoundTo					is a DerivedField
    		type is Decimal 5.4
			restricted
    		if (BaseCurrency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (BaseCurrency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (BaseCurrency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (BaseCurrency.NumberOfDecimals = 4)
    			return .0001

		RoundedTransactionAmount			is a DerivedField
     		type is Decimal 24.8 
 			restricted

			RoundedTransactionAmount	     = FAS13NetPresentValue
			round RoundedTransactionAmount to nearest DerivedRoundTo
			return RoundedTransactionAmount



		RoundedROUAmount			is a DerivedField
     		type is Decimal 24.8 
 			restricted

			RoundedROUAmount	     = LeaseROUAssetAmount.TransactionAmount
			round RoundedROUAmount to nearest DerivedRoundTo
			return RoundedROUAmount



		RoundedObligationTransactionAmount			is a DerivedField
     		type is Decimal 24.8 
 			restricted

			RoundedObligationTransactionAmount	     = FAS13LeaseObligation
			round RoundedObligationTransactionAmount to nearest DerivedRoundTo
			return RoundedObligationTransactionAmount



		RoundedTransAmount			is a DerivedField
     		type is Decimal 24.8 
 			restricted

			RoundedTransAmount	     = NetPresentValue.TransactionAmount
			round RoundedTransAmount to nearest DerivedRoundTo
			return RoundedTransAmount



		RoundedObligationTransAmount			is a DerivedField
     		type is Decimal 24.8 
 			restricted

			RoundedObligationTransAmount	     = LeaseObligation.TransactionAmount
			round RoundedObligationTransAmount to nearest DerivedRoundTo
			return RoundedObligationTransAmount



		RoundedBaseAmount			is a DerivedField
     		type is Decimal 24.8 

			RoundedBaseAmount	     = FAS13LeaseObligation
			round RoundedBaseAmount to nearest DerivedBaseRoundTo
			return RoundedBaseAmount



		DerivedInitialROUAssetAmount is a DerivedField  
     		type is Decimal 24.8
     			precision is CurrencyNumberOfDecimals
			initialize LocalInitialROUAssetAmount
			if (NetPresentValue.TransactionAmount entered)
				LocalInitialROUAssetAmount 	= NetPresentValue.TransactionAmount
			return LocalInitialROUAssetAmount

		DerivedBaseInitialROUAssetAmount is a DerivedField   
     		type is Decimal 24.8
     			precision is BaseCurrency.NumberOfDecimals
			initialize LocalInitialROUAssetAmount
			if (NetPresentValue.TransactionAmount entered)
				LocalInitialROUAssetAmount 	= NetPresentValue.TransactionAmount
			LocalTeampRoundingAmount = LocalInitialROUAssetAmount
    		LocalTeampRoundingAmount = LocalTeampRoundingAmount * BaseCurrencyRate

			LocalRoundedBaseAmount	     = LocalTeampRoundingAmount
			round LocalRoundedBaseAmount to nearest DerivedBaseRoundTo
			return LocalRoundedBaseAmount


	    		
	    DerivedFormTitle		is a DerivedField
			type is MessageField
			restricted
			if (LeaseExists)
				return LeaseCardViewDisplay
			else
				return CreateMessage
				
		CreateMessage			is a LabelField
			restricted
			"Create_NewLease"
		
		LeaseCardViewDisplay	is a LabelField
			"Lease_-<Lease>"

	    DerivedTabTitle		is a DerivedField
			type is MessageField
			restricted
			if (ShowGASBPresentValue)
				return PresentValueTab
			else
			if (ShowASC842Classification)
				return ClassificationTab 
		
		ClassificationTab is a LabelField
			restricted
			"Classification"

		PresentValueTab is a LabelField
			restricted
			"PresentValue"
						
		YellowAlertDate 												is a ComputeField
			type is Date
			restricted
			(ExtensionOptionDate - 90 days)

		RedAlertDate 													is a ComputeField
			type is Date
			restricted
			(ExtensionOptionDate - 30 days)
							
		DerivedGLPeriod	is a DerivedField
			type is Numeric 2
			restricted
			return (first GLClosePeriodRel.PeriodNumber)

		DerivedFirstGLPeriodMonth	is a DerivedField
			type is Numeric 2
			restricted
			if (FirstGLClosePeriodRel exist)
				return (first FirstGLClosePeriodRel.GeneralLedgerClosePeriod.DerivedPeriodMonth)
			else
				return blank
				
		DerivedFirstGLPeriodYear	is a DerivedField
			type is Numeric 4
			restricted
			if (FirstGLClosePeriodRel exist)
				return (first FirstGLClosePeriodRel.GeneralLedgerClosePeriod.DerivedPeriodYear)			
			else
				return blank
				
		DerivedFirstGLPeriodDate	is a DerivedField
			type is Date
			restricted
			if (FirstGLClosePeriodRel exist)
				return (first FirstGLClosePeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date)
			else
				return blank
				
		DerivedGLYear  is a DerivedField
			type is Year
			restricted
			return (first GLClosePeriodRel.GeneralLedgerCloseYear)

		DerivedModificationGLYear is a DerivedField
			type is Year
			restricted
			return (first ModificationGLClosePeriodRel.GeneralLedgerCloseYear)

		DerivedImpairmentGLYear  is a DerivedField
			type is Year
			restricted
			return (first GLClosePeriodImpairmentRel.GeneralLedgerCloseYear)

		DerivedAdjustmentGLYear  is a DerivedField
			type is Year
			restricted
			return (first GLClosePeriodAdjustmentRel.GeneralLedgerCloseYear)

		DerivedModificationGLPeriod	is a DerivedField
			type is Numeric 2
			restricted
			return (first ModificationGLClosePeriodRel.PeriodNumber)
			
		DerivedGLYearExist	is a DerivedField
			type is Boolean
			restricted
			if (LastGLClosePeriodRel exist)
				if (DerivedFirstGLPeriodDate <= first LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate
				and DerivedFirstGLPeriodDate entered)
					return true
				else
					if (DerivedFirstGLPeriodYear = 	first LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate year
					and DerivedFirstGLPeriodMonth = first LeasePaymentDetailsNoECCNoResidualDueDateRel.DueDate month)
						return true
					else
						return false
			else
				return false		

		CurrentModificationDate is a DerivedField
			type is Date
			if (Status.Modify)
				return first ModificationInProgressRel.ModificationEffectiveDate
				
		ROUAssetBalanceBeforeModification is a DerivedField
			type is like InternationalAmount
			if (Status.Modify)
				if (ModificationInProgressRel.ModificationDate month = BeginDate month
				and ModificationInProgressRel.ModificationDate year  = BeginDate year)
					return  ModificationInProgressRel.OriginalROUAssetAmount.TransactionAmount
				else
					return last PreviousLeaseCurrencyPaymentPeriodBalanceRel.ROUBalance
				
		LeaseObligationBeforeModification is a DerivedField
			type is like InternationalAmount
			if (Status.Modify)
				if ((ModificationInProgressRel.ModificationDate month = BeginDate month
				and ModificationInProgressRel.ModificationDate year  = BeginDate year)
				or  ModificationCounter > 1) 
					return  ModificationInProgressRel.OriginalLeaseObligation.TransactionAmount
				else
					return last PreviousLeaseCurrencyPaymentPeriodBalanceRel.LiabilityBalance

		BaseLeaseObligationBeforeModification is a DerivedField
			type is like InternationalAmount
			if (Status.Modify)
				if ((ModificationInProgressRel.ModificationDate month = BeginDate month
				and ModificationInProgressRel.ModificationDate year  = BeginDate year)
				or  ModificationCounter > 1)
					return  ModificationInProgressRel.OriginalLeaseObligation.BaseAmount.EnteredCurrencyAmount
				else
					return last PreviousBaseCurrencyPaymentPeriodBalanceRel.LiabilityBalance
				
		AssetAdjustmentAfterModification is a DerivedField
			type is like InternationalAmount
			if (Status.Modify)



				return (LeaseObligation.TransactionAmount - LeaseObligationBeforeModification)

		BaseAssetAdjustmentAfterModification is a DerivedField
			type is like InternationalAmount
			if (Status.Modify)



				return (LeaseObligation.BaseAmount.EnteredCurrencyAmount - BaseLeaseObligationBeforeModification)
					
		LifeToDateDepreciation is a DerivedField
    		type is like InternationalAmount
    		if (LeaseClassification.Finance
    		and (!ShortTermGASBLease
			or   !ShortTermIFRS))
	    		initialize LocalLTDDepreciation
	    		for each AssetsRel
	    			LocalAsset = each.Asset
	    			for each PostingAssetBookRel
						LocalLTDDepreciation += each.LifeToDateDepreciation
				return LocalLTDDepreciation
		
		FLBasisAdjustmentAfterModification is a DerivedField
    		type is like InternationalAmount
    		if (LeaseClassification.Finance
    		and (!ShortTermGASBLease
			or   !ShortTermIFRS))
    			return (NetPresentValue.TransactionAmount + LifeToDateDepreciation)
    					
		FLBaseBasisAdjustmentAfterModification is a DerivedField
    		type is like InternationalAmount
    		if (LeaseClassification.Finance
    		and (!ShortTermGASBLease
			or   !ShortTermIFRS))
    			return (NetPresentValue.BaseAmount.EnteredCurrencyAmount + LifeToDateDepreciation)
    		
		ROUAssetBalanceBeforeTermination is a DerivedField
			type is like InternationalAmount
			return last PreviousLeaseCurrencyPaymentPeriodBalanceForTerminationRel.ROUBalance
				
		LeaseObligationBeforeTermination is a DerivedField
			type is like InternationalAmount
			return last PreviousLeaseCurrencyPaymentPeriodBalanceForTerminationRel.LiabilityBalance
		
		GainLossOnTermination is a DerivedField
			type is like InternationalAmount
			return (LeaseObligationBeforeTermination - ROUAssetBalanceBeforeTermination)
		
		DerivedLeaseRate is a DerivedField
			type is Percent 7.5
			if (ImplicitInterestRate entered)
				return 	ImplicitInterestRate
			else
				return 	InterestRate

		DerivedDefaultRenewalName  is a DerivedField  
     		type is AlphaUpper size 25
			if (IsARenewal)
				LocalLeaseSize		= OriginalLease size
				LocalRenewalLease 	= OriginalLease
			else
				LocalLeaseSize		= Lease size
				LocalRenewalLease 	= Lease
			if (LocalLeaseSize > 22)
				LocalRenewalLease 	= LocalRenewalLease[1:18]
				 
			if (!IsARenewal)
				if (LeaseRenewalsRel not exist)
					RenewalNumber = "1"
				else
					RenewalNumber = instance count of LeaseRenewalsRel + 1
			else
				RenewalNumber = instance count of RenewalLeaseRenewalsRel + 1
			return LocalRenewalLease+"-"+RenewalNumber

		InvoiceZeroPayment	is a DerivedField  
			type is Boolean
			restricted
			if (((!IsGASBLease
			or    !IsIFRSLease)
			and IsFinance)
			or IsLongTermOperatingLease)
				return true
			else
				if (IsShortTermLease
				and LeaseCategory.NonDepreciable
				and !LeasePaymentsRel.StraightLine)
					return false
				else
					return true

		DerivedROUAmortization	is a DerivedField
			type is Numeric 4
			restricted
			if (LeaseClassification.Finance)
				if (Test7a.Yes)
					return RemainingLife
				else
					if (RemainingLife < Term)
						return RemainingLife
					else
						return Term
			else
				return Term

		DerivedPriorRenewalsTerm	is a DerivedField
			type is Numeric 4
			restricted
			initialize LocalTerm
			LocalTerm = OriginalLease.DerivedROUAmortization
			if (PriorLeaseRenewalsRel exists)
				for each PriorLeaseRenewalsRel
					LocalTerm = LocalTerm + each.DerivedROUAmortization
			return LocalTerm

		WholeNumberTotalPercent is a DerivedField
			type is Numeric 3
			if (LeaseFundsRel exists)
				return (sum LeaseFundsRel.PercentContribution * 100)

		ModificationCounter is a DerivedField
			type is Numeric 2
			for each LeaseModificationRel
				if (ModificationInProgressRel.ModificationDate month = each.ModificationDate month
				and ModificationInProgressRel.ModificationDate year  = each.ModificationDate year)
					ModificationCounter += 1
			return ModificationCounter

		LandedTaxDoNotInvoice is a DerivedField
			type is Boolean
			if (LesaePaymentWithLandedTaxRel exists)
				return true

		DerivedCurrentLeaseLiability is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalCurrentLiabilityAmount

		DerivedCurrentBaseLeaseLiability is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalCurrentBaseLiabilityAmount

		DerivedCurrentLeaseROU is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalCurrentROUAmount			

		DerivedCurrentBaseLeaseROU is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalCurrentBaseROUAmount

		DerivedShortTermLeaseLiability is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalShortTermLiabilityAmount

		DerivedShortTermBaseLeaseLiability is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalShortTermBaseLiabilityAmount

		DerivedLongTermtLeaseLiability is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalLongTermLiabilityAmount			

		DerivedLongTermBaseLeaseLiability is a DerivedField   
			type is like InternationalAmount
			include CurrentBalancesRules
			return LocalLongTermBaseLiabilityAmount

		DerivedShortTermLeaseLiabilityAccounting is a DerivedField   
			type is Boolean
			if (ShortTermLiabilityAccounting)
				return true
			else
				return false


		DerivedUseRemainingLife	is a DerivedField
			type is Boolean
			restricted
			if (LeaseClassification.Finance)
				if (Test7a.Yes)
					return true
				else
					if (RemainingLife < Term)
						return true
					else
						return false
			else
				return false

		DerivedPeriodsLeft	is a DerivedField
			type is Numeric 4
			restricted
			return RemainingLife - (((LocalModificationDate year - BeginDate year) * 12) + (LocalModificationDate month - BeginDate month))
			
		DerivedUseOperatingLeaseExpenseAccount is a DerivedField
			type is Boolean
			restricted
			return (IsShortTermLease or IsMonthToMonthRenewal)
			

		BeginningIDC is a DerivedField
			type is like InternationalAmount
			for each LeaseInitialDirectCostRel
				if (BeginDate month = each.DerivedMonth
				and BeginDate year  = each.DerivedYear)
					BeginningIDC += each.Amount.TransactionAmount
			return BeginningIDC

		IDCAfterBeginDate is a DerivedField
			type is Boolean
			for each LeaseInitialDirectCostRel
				if (BeginDate month = each.DerivedMonth
				and BeginDate year  = each.DerivedYear)
					IDCAfterBeginDate = false
				else
					IDCAfterBeginDate = true
			return IDCAfterBeginDate

		IDCCount is a DerivedField
			type is Numeric 2
			IDCCount = instance count of LeaseInitialDirectCostRel
			return IDCCount

		DerivedLeasesHasSingleCompany is a DerivedField
			type is Boolean
			restricted
			LocalCompany = first ReleasedLeasesRel.Company
			if(ReleasedLeasesForOneCompanyRel exists)
				return false
			else
				return true
		
		DerivedBaseShortTermLiabilityAmount is a DerivedField
			type is like InternationalAmount
			restricted
			StartingLiabilityMonth                      = LocalConversionDate
			EndingLiabilityMonth                        = LocalConversionDate
			EndingLiabilityMonth                       += 12 months
			LocalBaseShortTermLiability 				= sum ConversionLongTermBaseCurrencyLiabiltyRel.PrincipalAmount
			return LocalBaseShortTermLiability 
		
		DerivedLeaseShortTermLiabilityAmount is a DerivedField
			type is like InternationalAmount
			restricted
			StartingLiabilityMonth                      = LocalConversionDate
			EndingLiabilityMonth                        = LocalConversionDate
			EndingLiabilityMonth                       += 12 months
			LocalShortTermLiability          			= sum ConversionLongTermLeaseCurrencyLiabilityRel.PrincipalAmount
			return LocalShortTermLiability 
				

		DerivedFiscalYear is a DerivedField 
			type is Year
			restricted 
			return (LeasePaymentDetailPeriodRel.Year)
		
		DerivedFiscalPeriod is a DerivedField 
			type is Numeric 2
			restricted
			return (LeasePaymentDetailPeriodRel.Period)
		
		DerivedPurchaseAmountFiscalYear is a DerivedField 
			type is Year
			restricted
			return (LeasePaymentDetailPurchaseAmountPeriodRel.Year)
		
		DerivedPurchaseAmountFiscalPeriod is a DerivedField 
			type is Numeric 2
			restricted
			return (LeasePaymentDetailPurchaseAmountPeriodRel.Period)
		
		DerivedModificationFiscalYear is a DerivedField
			type is Year
			restricted
			return (LeasePaymentDetailModificationPeriodRel.Year)
		
		DerivedAdjustmentFiscalYear is a DerivedField
			type is Year
			restricted
			return (LeasePaymentDetailAdjustmentPeriodRel.Year)
		
		DerivedImpairmentFiscalYear is a DerivedField
			type is Year
			restricted
			return (LeasePaymentDetailImpairmentPeriodRel.Year)

		DerivedLeaseIncentiveLeaseCurrency is a DerivedField
			type is like InternationalAmount
			if(LeaseIncentiveOnBeginDateRel exists)
				LocalIncentiveAmount	= sum LeaseIncentiveOnBeginDateRel.Amount.TransactionAmount
				return LocalIncentiveAmount
			else
				return blank

		DerivedLeaseIncentiveBaseCurrency is a DerivedField
			type is like InternationalAmount
			if(LeaseIncentiveOnBeginDateRel exists)
				LocalIncentiveAmount	= sum LeaseIncentiveOnBeginDateRel.Amount.BaseAmount.EnteredCurrencyAmount
				return LocalIncentiveAmount
			else
				return blank

	Field Rules

		Term
			if (ExerciseExtension
			or LeaseAccountingMethod.GASB87
			or LeaseAccountingMethod.GASB96)
				Term = LeaseTerm + LengthOfExtension
			else
				if (ExerciseTermination)
					Term = (((EndDate year - BeginDate year) * 12) + (EndDate month - BeginDate month) + 1) 
				else
					Term = LeaseTerm

		Company
			constraint (IsValidForActorContext)
				"CompanyIsNotValid"
				
        PaymentsPerYear
        	default to "12"
        	
        Compounding
        	default to true
        
        Description
            required

        BeginDate
            required	

        EndDate
            if (!IsMonthToMonthRenewal)
	            required
	            constraint (EndDate >= BeginDate)
	                "EndDateCannotPrecedeBeginDate"
			if (ExerciseTermination)
				constraint (EndDate = EarlyTerminationDate)
					"EndDateMustEqualEarlyTerminationDateWhenTerminationIsReasonablyCertain"

        Lessor
            required
            	"CurrentLessorRequired"
			
			if (Lessor changed)
				OldLessor				= old Lessor
				invoke ReplaceVendor OldLeasePaymentsRel
					invoked.VendorGroup	= Lessor.VendorGroup
					invoked.NewVendor	= Lessor

		DeferredRentBalance
			if  (LeasePaymentsRel exists
			and  !LeasePaymentsRel.StraightLine)
				cannot be entered
					"CannotHaveDeferredRentBalanceWhenStraightLineIsNotSet"

			if (DeferredRentBalance entered)
				DeferredRentOverride = true
			else
				DeferredRentOverride = false

		DeferredRentAccount
			if  (LeasePaymentsRel exists
			and  !LeasePaymentsRel.StraightLine)
				cannot be entered
					"CannotHaveDeferredAccountWhenStraightLineIsNotSet"

			if (Status.Released
			and old DeferredRentAccount entered)
				constraint (DeferredRentAccount entered)
					"CannotRemoveDeferredAccountInformationOnReleasedLease"

		AccruedAccount
			if (Status.Released
			and old AccruedAccount entered)
				constraint (AccruedAccount entered)
					"CannotRemoveAccruedAccountInformationOnReleasedLease"

		RemainingLife
			default to TotalLife
			constraint (RemainingLife <= TotalLife)
				"RemainingLifeCannotExceedTotalLife"

		Currency
			default to Company.Currency
			if (Currency entered)
				CurrencyNumberOfDecimals = Currency.NumberOfDecimals
			required

		CurrencyNumberOfDecimals
			default to Currency.NumberOfDecimals

		BaseCurrency
			force default to Company.Currency

		BaseNumberOfDecimals
			default to Company.Currency.NumberOfDecimals

		LeaseAllocationCode
			if (LeaseAllocationCodeType entered)
				required
					"AllocationCodeTypeEntered;AllocationCodeShouldBeEntered"

		LeaseAllocationCodeType
			if (ShortTermLiabilityAccounting)
				if (LeaseAllocationCodeType.DebtOrExpense)
					cannot be entered
						"CannotEnterLeaseLiabilityAllocationCodeWhenShortTermLiabilityAccounting"

			if (LeaseAllocationCode entered)
				required
					"AllocationCodeEntered;AllocationCodeTypeShouldBeEntered"        

			if (LeaseClassification.Operating
			and LeaseAllocationCodeType.Interest)
				if (LeaseAccountingMethod.GASB87
				or  LeaseAccountingMethod.GASB96
				or  LeaseAccountingMethod.IFRS16)
					cannot be entered
						"CannotEnterInterestAllocationCodeTypeAndAllocationCodeForShortTermGASBLeaseOrIFRSLease"
				else
					cannot be entered
						"CannotEnterInterestAllocationCodeTypeAndAllocationCodeForOperatingLease"
		
		LeaseAccountingStatement
			required
			if (Company.AccountingEntity.LeaseAccountingStandard = 1)
				default to 1
				constraint (LeaseAccountingStatement = 1)
					"LeaseAccountingStatementMustBe842ToMatchTheLeaseAccountingStandard"
			else 
				if (Company.AccountingEntity.LeaseAccountingStandard = 2)
					default to 2
					constraint (LeaseAccountingStatement != 1)
						"LeaseAccountingStatementMustBeEither87Or96ToMatchTheLeaseAccountingStandard"
					constraint (LeaseAccountingStatement != 4)
						"LeaseAccountingStatementMustBeEither87Or96ToMatchTheLeaseAccountingStandard"
				else 
					default to 4
					constraint (LeaseAccountingStatement = 4)
						"LeaseAccountingStatementMustBe16ToMatchTheLeaseAccountingStandard"
					

			if (LeaseAllocationCodeType.Interest)
				constraint (InterestAccount not entered)
					"CannotEnterInterestAllocationCodeTypeAndInterestAccount"

			if (LeaseAllocationCodeType.DebtOrExpense)
				constraint (DebtAccount not entered)
					"CannotEnterLeaseLiabilityAccountAndAllocationCodeTypeLeaseLiability"



















		








		InterestAccount
			if (LeaseClassification.Operating
			and LeaseAccountingMethod.ASC842)
				cannot be entered
					"CannotHaveInterestAccountOnOperatingLease"
			else
				if (LeaseClassification.Operating
				and (LeaseAccountingMethod.GASB87
				or   LeaseAccountingMethod.GASB96
				or   LeaseAccountingMethod.IFRS16))
					cannot be entered
						"CannotHaveInterestAccountOnShortTermGASBLeaseOrIFRSLease"		                    	 

			if (LeaseClassification.Finance
			and LeaseAllocationCodeType.DebtOrExpense)
				required
					"InterestAccountRequired"

			if (LeaseClassification.Finance
			and LeaseAllocationCode not entered)
				required
					"InterestAccountRequired"

		Simulated
			if (SimulatedAssetsRel exists)
				cannot be changed
					"CannotChangeToNotSimulated;SimulatedAssetsExist"

		LeaseInvoicePrefix
			default to Lease
			constraint (!LeaseInvoicePrefixesRel exists)
				"InvoicePrefixMustBeUnique"

        LandAndBuilding
			if (LandAndBuilding.LandAndBuildingLease)

				constraint (LandValue.TransactionAmount / FairMarketValue.TransactionAmount <= .25)	
					"LandValueIsGreaterThan25%OfFairMarketValue;MustSeparateLandAndBuilding"

		LandValue
			if (LandAndBuilding.Neither)
				constraint (LandValue.TransactionAmount not entered)
					"LandValueCannotBeEnteredIfLandAndBuildingFlagNotSet"

		BuildingValue
			if (LandAndBuilding.LandOnly)
				constraint (BuildingValue.TransactionAmount not entered)
					"BuildingValueCannotBeEnteredIfLandOnlyLease"
			else
			if (LandAndBuilding.Neither)
				constraint (BuildingValue.TransactionAmount not entered)
					"BuildingValueCannotBeEnteredIfLandAndBuildingFlagNotSet"

		DownPayment
			if (DownPayment.TransactionAmount not entered)
				DownPayment.BaseAmount.EnteredCurrencyAmount = blank

		IncentiveAmount
			if (IncentiveAmount.TransactionAmount not entered)
				IncentiveAmount.BaseAmount.EnteredCurrencyAmount = blank


		TerminationFee
			if (!TerminationOption)
				cannot be entered
					"TerminationFeeCannotBeEnteredIfTerminationOptionIsNotEntered"
					
		TerminationNonLeaseComponent
			if (TerminationFee entered)
				required
					"TerminationNonLeaseComponentIsRequiredWhenTerminationFeeEntered"
					
		TerminationGainLossAccount
			if (TerminationOption)
				required
					"TerminationGainLossAccountIsRequired"
				
		InitialDirectCost
			if (InitialDirectCostVendor not entered)
				constraint (InitialDirectCost.TransactionAmount not entered)
					"InitialDirectCostVendorRequiredWhenInitialDirectCostEntered"
			if (InitialDirectCost.TransactionAmount not entered)
				InitialDirectCost.BaseAmount.EnteredCurrencyAmount = blank

		InitialDirectCostVendor
			if (InitialDirectCost.TransactionAmount not entered)
				constraint (InitialDirectCostVendor not entered)
					"InitialDirectCostVendorNotAllowedWhenInitialDirectCostNotEntered"

		
			
											

		LongTermOperatingLeaseExpense
			if (LongTermOperatingLease
			and OperatingLeaseAllocationCode not entered)
				constraint (LongTermOperatingLeaseExpense.GeneralLedgerChartAccount entered)
					"OperatingLeaseExpenseAccountRequiredOnOperatingLease"
			if (LeaseClassification.Finance)
				constraint (LongTermOperatingLeaseExpense not entered)
					"CannotEnterOperatingLeaseExpenseOnFinanceLease"

		OperatingLeaseAllocationCode					
			if (LeaseClassification.Finance)
				constraint (OperatingLeaseAllocationCode not entered)
					"CannotEnterOperatingLeaseAllocationCodeOnFinanceLease"

			if (OperatingLeaseAllocationCode entered)
				constraint (LongTermOperatingLeaseExpense not entered)
					"CannotEnterBothOperatingLeaseExpenseAndOperatingLeaseAllocationCode"

		ImplicitInterestRate
			if (ImplicitInterestRate not entered)
		        constraint (InterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForClassificationTest"             
				default to InterestRate

		InterestRate
			if (DefaultLeaseInterestRate)				
				if (LeaseRateTableRel exists)
					LeaseRateTable = LeaseRateTableRel.LeaseRateTable
					if (LeaseRateTableOverrideRel.AllowOverride)
						default to LeaseRateTableDetailTermRel.EffectiveRate
					else
						force default to LeaseRateTableDetailTermRel.EffectiveRate
					if (LeaseRateTableDetailTermRel exists)
						LocalMaxCount = true
					if (!(LeaseRateTableOverrideRel.AllowOverride))
						constraint(LocalMaxCount)
							"TermDoesNotExistInTheLeaseRateTable"
					else
						constraint(InterestRate entered)
							"MustEnterInterestRateManuallyAsTermDoesNotExistInTheLeaseRateTable"
				else
					constraint (LeaseRateTableRel exists)
						"LeaseRateTableDoesNotExistForTheLeaseCurrencyAndLeaseType"	
			if (InterestRate not entered)
		        constraint (ImplicitInterestRate entered)
					"LesseeDiscountRateOrImplicitInterestRateRequiredForClassificationTest"

		LeaseAccountingMethod
			if (Company.AccountingEntity.LeaseAccountingStandard = 1
			and Lease.LeaseAccountingStatement = 1)
				LeaseAccountingMethod = 0
			else 
				if (Company.AccountingEntity.LeaseAccountingStandard = 2
				and Lease.LeaseAccountingStatement = 2)
					LeaseAccountingMethod = 1
				else
					if (Company.AccountingEntity.LeaseAccountingStandard = 2
					and Lease.LeaseAccountingStatement = 3)
						LeaseAccountingMethod = 2

					else
						if (Company.AccountingEntity.LeaseAccountingStandard = 3
						and Lease.LeaseAccountingStatement = 4)
							LeaseAccountingMethod = 3	
				


			
		LeaseCategory
			initial value is "D"
			if (LandAndBuilding.LandOnly)
				constraint (LeaseCategory.NonDepreciable)
					"LandOnlyLeaseMustHaveCategorySetToNonDepreciable"		

			if (IsShortTermLease)
				constraint (LeaseCategory.NonDepreciable)
					"LeaseCategoryMustBeNonDepreciableForShortTermLease"
					
			if (LeaseClassification.Finance)
				if (IsGASBLease
				or  IsIFRSLease)
					constraint (LeaseCategory.Depreciable)
						"LeaseCategoryMustBeDepreciableForGASBAndIFRSLeases"
				else
					constraint (LeaseCategory.Depreciable)
						"LeaseCategoryMustBeDepreciableForFinanceLease"
					
		BargainPurchaseAmount
			if (ExercisePurchase)
				required
					"BargainPurchaseAmountRequiredWhenExercisePurchaseSelected"
					
		ExercisePurchase
			if (ExercisePurchase)
				constraint (BargainPurchaseAmount.TransactionAmount entered)
					"BargainPurchaseAmountRequiredWhenExercisePurchaseSelected"
		GuaranteedAmount
			if (ExercisePurchase)
				constraint (GuaranteedAmount.TransactionAmount not entered)
					"CannotEnterResidualGuaranteedOnLeaseWithExercisedPurchase"
		
		NumberOfExtensionOptions
			initial value is "1"
			if(ExtensionOption)
				required
					"IfRenewalOptionSelectedThenNumberOfRenewalOptionsIsRequired"
			if(ExtensionOptionDate entered)
				constraint (LengthOfExtension entered)
					"RenewalTermRequiredWhenRenewalNotificationDateEntered"			

		LengthOfExtension
			if (ExerciseExtension)
				required
					"RenewalTermRequiredWhenRenewalIsReasonablyCertain"
			if(ExtensionOption)
				required
					"RenewalTermRequiredWhenRenewalOptionSelected"
		
		
					
		ExtensionOption
			if (ExerciseExtension
			or LengthOfExtension entered)
				required
					"RenewalOptionRequiredWhenRenewalIsReasonablyCertainOrRenewalTermIsEnter"		
			if (ExerciseExtension
			and (LeaseAccountingMethod.GASB87
			or   LeaseAccountingMethod.GASB96))
				constraint (ExerciseTermination not entered)
					"CannotEnterReasonablyCertainTerminationAndSelectRenewalOption"


		EarlyTerminationDate
			if (ExerciseTermination)
				required	
					"EarlyTerminationDateRequiredWhenTerminationIsReasonablyCertain"		
		
		ExerciseExtension
			if (ExerciseExtension
			and LeaseAccountingMethod.ASC842)
				constraint (ExerciseTermination not entered)
					"CannotEnterReasonablyCertainForBothTerminationAndRenewal"

		ExerciseTermination
			if (ExerciseTermination)
				if (LeaseAccountingMethod.ASC842)
					constraint (ExerciseExtension not entered)
						"CannotEnterReasonablyCertainForBothTerminationAndRenewal"
				if (LeaseAccountingMethod.GASB87
				or  LeaseAccountingMethod.GASB96)
					constraint (ExtensionOption not entered)
						"CannotEnterReasonablyCertainTerminationAndSelectRenewalOption"
		LeaseClassification
			if (Fas13Flag.No)
				required
					"IfPerformClassificationTestIsNo,ClassificationMustBeEntered"

		Fas13Flag
			initial value is "Y"
			default to "Y"	


	SubType IsReleased Field Rules

		Simulated
			cannot be changed
				"CannotChange;LeaseIsReleased"
		Currency
			cannot be changed
				"CannotChange;LeaseIsReleased"
		BaseCurrencyRate
			cannot be changed
				"CannotChange;LeaseIsReleased"
		LeaseClassification
			cannot be changed
				"CannotChange;LeaseIsReleased"
		DownPayment.TransactionAmount
			cannot be changed
				"CannotChange;LeaseIsReleased"
		Term
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		BeginDate
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		TotalLife
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		RemainingLife
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		SpecializedAsset
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		ExercisePurchase
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		Ownership
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		BargainPurchaseAmount.TransactionAmount
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		GuaranteedAmount.TransactionAmount
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		UnguaranteedAmount.TransactionAmount
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		TaxCreditAmount.TransactionAmount
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		FairMarketValue.TransactionAmount
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		LandValue.TransactionAmount
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		BuildingValue.TransactionAmount
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"
		FirstPaymentDate
			if (Fas13Flag.Yes)
				cannot be changed
					"CannotChange;FieldIsUsedInClassificationTest"		
		PaymentsPerYear
			cannot be changed
				"CannotChange;FieldIsUsedInInterestCalculation"
		PaymentTiming
			cannot be changed
				"CannotChange;FieldIsUsedInInterestCalculation"
		InterestRate
			cannot be changed
				"CannotChange;FieldIsUsedInInterestCalculation"
		ImplicitInterestRate
			cannot be changed
				"CannotChange;FieldIsUsedInInterestCalculation"
		EndDate
			if (LeaseClassification.Finance)
				cannot be changed
					"CannotChangeEndDateOnReleasedFinanceLease"

	Actions





































		RestrictedUpdate is an Update Action
			restricted
			bypass field rules

		ResetStatusAfterTest is an Instance Action
			restricted
			Exit Rules
				if (!Status.Modify)
					if(!ShortTermConversionProcess)
						make transition to Unreleased


		LeaseBuildIndexSetAction is a Set Action
			default label is "BuildTextIndex" 
			restricted
			Action Rules
				Instance Rules
					include BuildTextIndexes 

		MultiAssetLease is an Instance Action
			restricted
			Parameters
				PrmNumberOfAssets	is Numeric 3

			Parameter Rules
				PrmNumberOfAssets
					required						

			Action Rules
				NumberOfAssets = PrmNumberOfAssets


		SetNumberOfAssetsOnLease is a Set Action		

			default label is "SetNumberOfAssetsOnLease"
			restricted
			completion message is "AllLeasesHaveBeenUpdateWithTheNumberOfAssets."
			run in background

			Parameters
				PrmCompany							is a PayablesCompany
					default label is "Company" 

			Parameter Rules
				PrmCompany
					required
					Company	= PrmCompany
 
			Sort Order
				Company
				Lease

			Local Fields
				LocalNumberOfAssets			is Numeric size 2
 
			Instance Selection
				where	(Company = PrmCompany)

			Action Rules
				Empty Set Rules

				Instance Rules
					if (NumberOfAssets not entered)
						LocalNumberOfAssets		= instance count of AssetsRel
						NumberOfAssets 			= LocalNumberOfAssets
			 												
		CopyExistingLease is an Instance Action 
			valid when (AllowLeaseCopy)
			Parameters
				PrmLeaseDescription is a Description
					default label is "Description"
				PrmLeaseName is AlphaUpper 25
					default label is "Lease"
				PrmCopyPayments is Boolean
					default label is "CopyPayments"
				PrmCompany is a PayablesCompany
					default label is "Company"
				PrmLessor is a Vendor

					default label is "Lessor"
				PrmCopyToNewCompany is Boolean
					default label is "CopyToNewCompany"
				PrmNumberOfCopies is Numeric size 2
					default label is "NumberOfCopies"
				PrmCopyInitialDirectCosts is Boolean
					default label is "CopyInitialDirectCosts"
				PrmCopyLeaseFund is Boolean
					default label is "CopyLeaseFund"

			Parameter Rules
				PrmLeaseDescription
					default to Description
					initial value is Description
				PrmLeaseName
					default to Lease
					initial value is Lease
				PrmCopyToNewCompany
					default to false
				PrmCopyPayments
					default to false
				PrmCopyInitialDirectCosts
					default to false
				PrmCopyLeaseFund
					default to false
			Action Rules
				constraint(PrmNumberOfCopies > 0)
					"NumberOfCopiesMustBeAtLeastOne"
				TransientCreateFromCopy 	= true
				TransientStraightLine   	= LeasePaymentRel.StraightLine
				if (PrmCopyPayments)
					TransientLeasePaymentDueDay	= LeasePaymentRel.LeasePaymentDueDay
				if (PrmNumberOfCopies = 1)
					invoke Create Lease
						fill in fields from this instance
							except invoked.LeaseInvoicePrefix
							except invoked.NetPresentValue
							except invoked.LeaseObligation
							except invoked.LeaseROUAssetAmount
							except invoked.DeferredRentBalance
							except invoked.BaseCurrency
							except invoked.BaseNumberOfDecimals
							except invoked.BaseCurrencyRate
							except invoked.Test7c
							except invoked.Test7d
							except invoked.Test7a
							except invoked.Test7b
							except invoked.Lessor
							except invoked.Company
						invoked.Description = PrmLeaseDescription
						invoked.Lease = PrmLeaseName 
						if (PrmLeaseName size > 16)
							LocalLeaseInvoicePrefix = PrmLeaseName[1:16] 
							invoked.LeaseInvoicePrefix = LocalLeaseInvoicePrefix
						if (!PrmCopyToNewCompany)
							invoked.Lessor = Lessor
							invoked.Company = Company
						else
							invoked.Lessor = PrmLessor
							invoked.Company = PrmCompany

					if (PrmCopyToNewCompany)
						for each LeaseExecutoryCostCodesRel
							invoke Create LeaseExecutoryCostCode
								fill in fields from each
									except invoked.Company
									except invoked.Lease
								invoked.Company = PrmCompany
								invoked.Lease = PrmLeaseName 							
					else
						for each LeaseExecutoryCostCodesRel
							invoke Create LeaseExecutoryCostCode
								fill in fields from each
									except invoked.Lease
								invoked.Lease = PrmLeaseName 
	
					if (PrmCopyPayments)
						for each RecurringVendorPaymentDetailsRel
							invoke RestrictedCreate RecurringLeasePaymentDetail
								fill in fields from each
									except invoked.Lease
									except invoked.Released
									except invoked.Company
								invoked.Lease = PrmLeaseName 
								if (PrmCopyToNewCompany)
									invoked.Company = PrmCompany
								else
									invoked.Company = Company
						for each LeasePaymentDetailRel
							if (each.ResidualPayment = false
							and each.PurchaseOptionPayment = false)
								invoke Create LeasePaymentDetail
									fill in fields from each
										except invoked.Lease
										except invoked.Released
										except invoked.Company
									invoked.Lease 		= PrmLeaseName 
									invoked.Released	= false
									if (PrmCopyToNewCompany)
										invoked.Company = PrmCompany
									else
										invoked.Company = Company
					if (PrmCopyInitialDirectCosts)
						for each LeaseInitialDirectCostRel
							invoke Create each
								fill in fields from each
									except invoked.Lease
									except invoked.Company									
								if (PrmCopyToNewCompany)
									invoked.Company = PrmCompany
								else
									invoked.Company = Company
								invoked.Lease		= PrmLeaseName	
					if (PrmCopyLeaseFund)
						for each LeaseFundsRel
							invoke RestrictedCreate each
								fill in fields from each
									except invoked.Lease
									except invoked.Company									
								if (PrmCopyToNewCompany)
									invoked.Company = PrmCompany
								else
									invoked.Company = Company
								invoked.Lease		= PrmLeaseName								    
				else
					while (PrmNumberOfCopies > 0)
						invoke Create Lease
							fill in fields from this instance
								except invoked.LeaseInvoicePrefix
								except invoked.NetPresentValue
								except invoked.LeaseObligation
								except invoked.LeaseROUAssetAmount
								except invoked.DeferredRentBalance
								except invoked.BaseCurrency
								except invoked.BaseNumberOfDecimals
								except invoked.BaseCurrencyRate
								except invoked.Test7c
								except invoked.Test7d
								except invoked.Test7a
								except invoked.Test7b
								except invoked.Lessor
								except invoked.Company      
							invoked.Description = PrmLeaseDescription
							invoked.Lease = PrmLeaseName + "-" + PrmNumberOfCopies
							if (PrmLeaseName size > 13)
								LocalLeaseInvoicePrefix = PrmLeaseName[1:13] + "-" + PrmNumberOfCopies
								invoked.LeaseInvoicePrefix = LocalLeaseInvoicePrefix
							if (!PrmCopyToNewCompany)
								invoked.Lessor = Lessor
								invoked.Company = Company
							else
								invoked.Lessor = PrmLessor
								invoked.Company = PrmCompany

						if (PrmCopyToNewCompany)
							for each LeaseExecutoryCostCodesRel
								invoke Create LeaseExecutoryCostCode
									fill in fields from each
										except invoked.Company
										except invoked.Lease
									invoked.Company = PrmCompany
									invoked.Lease = PrmLeaseName + "-" + PrmNumberOfCopies							
						else
							for each LeaseExecutoryCostCodesRel
								invoke Create LeaseExecutoryCostCode
									fill in fields from each
										except invoked.Lease
									invoked.Lease = PrmLeaseName + "-" + PrmNumberOfCopies
	
						if (PrmCopyPayments)
							for each RecurringVendorPaymentDetailsRel
								invoke RestrictedCreate RecurringLeasePaymentDetail
									fill in fields from each
										except invoked.Lease
										except invoked.Released
										except invoked.Company
									invoked.Lease = PrmLeaseName + "-" + PrmNumberOfCopies
									if (PrmCopyToNewCompany)
										invoked.Company = PrmCompany
									else
										invoked.Company = Company
							for each LeasePaymentDetailRel
								if (each.ResidualPayment = false
								and each.PurchaseOptionPayment = false)
									invoke Create LeasePaymentDetail
										fill in fields from each
											except invoked.Lease
											except invoked.Released
											except invoked.Company
										invoked.Lease 		= PrmLeaseName + "-" + PrmNumberOfCopies
										invoked.Released	= false
										if (PrmCopyToNewCompany)
											invoked.Company = PrmCompany
										else
											invoked.Company = Company
						if (PrmCopyInitialDirectCosts)
							for each LeaseInitialDirectCostRel
								invoke Create each
									fill in fields from each
										except invoked.Lease
										except invoked.Company									
									if (PrmCopyToNewCompany)
										invoked.Company = PrmCompany
									else
										invoked.Company = Company
									invoked.Lease			= PrmLeaseName + "-" + PrmNumberOfCopies
						if (PrmCopyLeaseFund)
							for each LeaseFundsRel
								invoke RestrictedCreate each
									fill in fields from each
										except invoked.Lease
										except invoked.Company									
									if (PrmCopyToNewCompany)
										invoked.Company = PrmCompany
									else
										invoked.Company = Company
									invoked.Lease			= PrmLeaseName + "-" + PrmNumberOfCopies	
						
						PrmNumberOfCopies = PrmNumberOfCopies - 1
						
		LeaseAmortization is a Set Action
			completion message is "LeaseAmortizationSubmitted"
            Parameters
                PrmCompany     is a PayablesCompany
                PrmLease       is a Lease
                PrmLeaseType   is a LeaseType
                PrmLeaseClass  is AlphaUpper size 1
                    States
                        All       value is blank
                        Operating value is "O"
                        Finance   value is "C"
                PrmCurrency    is AlphaUpper size 1
                    States
						Lease value is blank
                        Base  value is "B"
						Both  value is "X"

            Parameter Rules
				PrmCompany
					required
			
			Instance Selection
				where   (Company = PrmCompany
				and    ((PrmLease entered
				and      Lease = PrmLease)
				or       PrmLease !entered)
				and    ((PrmLeaseType entered
				and      LeaseType = PrmLeaseType)
				or       PrmLeaseType !entered)
				and    ((PrmLeaseClass entered
				and      LeaseClassification = PrmLeaseClass)
				or       PrmLeaseClass !entered))
			
			Sort Order
				Company
				Lessor
				Lease

            Action Rules
				Instance Rules
					if (Lease.HasAmortizationSchedule)
						if (PrmCurrency = blank)
							initialize LeaseAmortizationReport
							LeaseAmortizationReport = PrintLeaseAmortization as pdf in landscape font offset is -2
						if (PrmCurrency = "X")
							initialize LeaseAmortizationReport
							initialize LeaseAmortizationBaseReport
							LeaseAmortizationReport = PrintLeaseAmortization as pdf in landscape font offset is -2
							LeaseAmortizationBaseReport = PrintLeaseAmortizationBaseCurrency as pdf in landscape font offset is -2
						else
							if (PrmCurrency = "B")
								initialize LeaseAmortizationBaseReport
								LeaseAmortizationBaseReport = PrintLeaseAmortizationBaseCurrency as pdf in landscape font offset is -2
		
		DeleteLeaseAmortizationReport is an Instance Action
			valid when (LeaseOrBaseCurrencyAmortizationReportCreated)
			Action Rules
				initialize LeaseAmortizationBaseReport
				initialize LeaseAmortizationReport


		LoadAccountingStatementFields is a Set Action
			restricted
			Action Rules
				Instance Rules
					if (LeaseAccountingMethod = 0)
						LeaseAccountingStatement = 1
					else
						LeaseAccountingStatement = 2

		UpgradePostLeasesIncentives is a Set Action
			restricted

			Instance Selection
				where   (IncentiveAmount.TransactionAmount entered
				and      !Status.Closed
				and      !Status.Deactivated
				and      !Status.Terminated)

			Action Rules
				Instance Rules
					invoke Create LeaseIncentive
						fill in fields from this instance
						invoked.Company					= Company
						invoked.Lease					= Lease
						invoked.Vendor                  = Lessor
						invoked.IncentiveDate           = BeginDate
						invoked.LeaseIncentive          = "Incentive"
						invoked.IncentiveType           = 0
						invoked.Amount                  = IncentiveAmount
					invoke RestrictedUpdate Lease
						initialize invoked.IncentiveAmount
					    

		ASC840OldLeaseDataPurge is a Set Action
			restricted

			Instance Selection
				include deleted records

			Sort Order is primary

			Action Rules
				Instance Rules
					invoke Purge PurgeLeaseComputeRel
					invoke Purge PurgeLeasePaymentImportRel
					invoke Purge PurgeLeaseImportRel
					invoke Purge PurgeLeaseTransactionRel
					invoke Purge 

		Purge is a Purge Action
			restricted
			bypass relational integrity rules  
			Local Fields
				LocalLeaseInvoiceCount	is Numeric 4
				LocalLeasePaymentDetailCount  is Numeric 4

			Entrance Rules
				initialize LocalLeaseInvoiceCount 
				for each PurgeLeaseInvoiceRel
					LocalLeaseInvoiceCount += 1
					if (LocalLeaseInvoiceCount >= 500)
						commit transaction
						initialize LocalLeaseInvoiceCount
					invoke Purge each

				initialize LocalLeasePaymentDetailCount 
				for each PurgeLeasePaymentDetailRel
					LocalLeasePaymentDetailCount += 1
					if (LocalLeasePaymentDetailCount >= 500)
						commit transaction
						initialize LocalLeasePaymentDetailCount
					invoke ASC840OldLeaseDataPurge each
				
				invoke Purge PurgeLeaseImpairmentRel
				invoke Purge PurgeLeaseAdjustmentRel
				invoke Purge PurgeLeaseModificationlRel
				invoke Purge PurgeSubleaseRel
				invoke Purge PurgeRecurringLeasePaymentDetailRel	
				invoke Purge PurgeLeaseCurrencyPaymentPeriodBalanceRel
				invoke Purge PurgeLeaseCurrencyPaymentBalanceRel
				invoke Purge PurgeLeasePaymentPeriodBalanceRel
				invoke Purge PurgeLeasePaymentBalanceRel
				invoke Purge PurgeLeaseCommentRel
				invoke Purge PurgeLeaseDateRel


				invoke Purge PurgeLeaseExecutoryCostCodeRel
				invoke Purge PurgeLeaseAttachmentRel
				invoke Purge PurgeLeasePaymentRel
				invoke Purge PurgeLeaseFundsRel

		LeasePurge is a Set Action							
			restricted
			Parameters
				PrmPurgeOption					is Numeric 1
					default label is "ActionOption"
					States
						PurgeRecords 	value is 1
						ReportOnly		value is 2
				PrmCompany       is a PayablesCompany
					default label is "Company"
				PrmPurgeDate is Date
					default label is "PurgeThroughDate"
				PrmStatus  is Numeric 2
					default label is "Status"
					States
						Unreleased          value is 0
						Closed				value is 2
						Deactivated 		value is 8
                		Terminated			value is 9
						All					value is 10
				PrmLease	     is a Lease
					default label is "Lease"
				PrmLessor        is a Vendor
					default label is "Lessor"
				PrmClassification  is like LeaseClassification
					default label is "Classification"						


				PrmLeaseType     is a LeaseType
					default label is "LeaseType"
			Parameter Rules
				PrmCompany
					required
					constraint (PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate entered)
						"PurgeCutOffDateMustBeSetForFinanceEnterpriseGroup<PrmCompany.FinanceEnterpriseGroup>"
		
				PrmPurgeOption
					required
				
				PrmStatus
					initial value is PrmStatus.All
				
				PrmPurgeDate
					initial value is PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate
					force default to PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate

			Instance Selection
				include deleted records
				where (Company = PrmCompany
				and    ((PrmLease entered
				and      Lease = PrmLease)
				or       PrmLease !entered)
				and    ((PrmLeaseType entered
				and      LeaseType = PrmLeaseType)
				or       PrmLeaseType !entered)
				and    ((PrmClassification entered
				and      LeaseClassification = PrmClassification)
				or       PrmClassification !entered)
				and    (PrmStatus.All
				or       PrmStatus = Status)
				and    ((PrmLessor entered
				and      Lessor = PrmLessor)
				or       PrmLessor !entered))






			Local Fields
				LocalActor									is an Actor
				LocalCounter								is Numeric 10
				LocalNewLine								is LPLText
				LocalNotificationDetails					is LPLText
				LeasePurgeResultsHeaderView					is a LeasePurgeResults view
				LocalLeasePurgeResultsHeader				is Numeric size 6
						
			Action Rules
				Empty Set Rules
					send notification
						to LocalActor
						description is "LeasePurgeDetails"
						priority is high
						detail is "No_Lease_records_to_process"
				Set Rules
					Entrance Rules
						LocalActor = actor
						LocalLease 							= PrmLease
						LocalCompany 						= PrmCompany
						invoke Create LeasePurgeResults
							assign result to LeasePurgeResultsHeaderView							
							invoked.PurgeOption 		= PrmPurgeOption							
							invoked.PayablesCompany		= LocalCompany
							invoked.PurgeDate			= PrmPurgeDate							
							invoked.Status 				= PrmStatus
							invoked.Lease 				= LocalLease
							invoked.Lessor 				= PrmLessor
							invoked.LeaseClassification = PrmClassification
							invoked.LeaseType			= PrmLeaseType
						
					Exit Rules
						invoke FastUpdate LeasePurgeResultsHeaderView.LeasePurgeResults
							invoked.TotalLeasePurgeRecords = LocalCounter
						LocalNewLine 	= "\u000a"
						if(PrmPurgeOption.PurgeRecords)
							LocalNotificationDetails = "Number of records that have been purged "+ LocalNewLine
						else
							LocalNotificationDetails = "Number of records that are available to purge "+ LocalNewLine
						LocalNotificationDetails += "Total Leases: "+ LocalCounter +LocalNewLine 
						
						send notification
							to LocalActor
							description is "LeasePurgeDetails"
							priority is high
							detail is "<LocalNotificationDetails>"

				Instance Rules
					if (ValidForPurging)
						if (PrmPurgeOption.PurgeRecords)	
							LocalCounter +=1
							invoke RemovePurgedLeaseDataOnAsset AssetsRel    
								invoked.PrmFinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
								invoked.PrmLeaseCompany = PrmCompany
								invoked.PrmLease = Lease
							invoke Purge PurgeLeaseComputeRel
							invoke Purge PurgeLeasePaymentImportRel
							invoke Purge PurgeLeaseImportRel
							invoke Purge PurgeLeaseTransactionRel
							invoke Purge
						else 						
							LocalCounter +=1
						LocalLeasePurgeResultsHeader	= LeasePurgeResultsHeaderView.LeasePurgeResults
						invoke Create LeasePurgeResultsDetail
							invoked.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
							invoked.PayablesCompany		   = PrmCompany
							invoked.LeaseID				= Lease
							invoked.LeaseType			= LeaseType
							invoked.LeaseClassification = LeaseClassification
							invoked.Lessor 				= Lessor
							invoked.Status				= Status
							invoked.EndDate     		= EndDate
							invoked.PurgeDate			= PrmPurgeDate
							invoked.LeasePurgeResults	= LocalLeasePurgeResultsHeader
							invoked.PurgeOption 		= PrmPurgeOption



		CreateDetailRecords is a Set Action	
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmLeaseWeightedAverageReportResult	is like LeaseWeightedAverageReportResult
				PrmWeightedAverageTotalLiability	is an InternationalAmount
				PrmWeightedAverageTotalPayments		is an InternationalAmount
				PrmReportOption						is AlphaUpper 1
					States
						RemainingLeaseTerm		value is "R"
						DiscountRate			value is "D"
				PrmCompany       					is a PayablesCompany
					default label is "Company"
				PrmClassification  					is like LeaseClassification
					default label is "Classification"
				PrmReportDate						is Date
					default label is "ReportDate"

			Parameter Rules				
				PrmCompany
					required
		
				PrmReportOption
					required
				
				PrmClassification
					required
				
				PrmReportDate
					required

			Instance Selection
				where (Company = PrmCompany
				and    Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    Status.Released
				and    LeaseClassification = PrmClassification
				and    EndDate >= PrmReportDate)

			Local Fields
				LocalActor							is an Actor
				LocalCounter						is Numeric size 6
				LocalRemainingLeasePayments 		is an InternationalAmount
				LocalPercentage						is Percent size 5.3
				LocalWeightedAveragePercent			is Percent size 5.3
				LocalRemainingLeaseLiability 		is an InternationalAmount
				LocalRemainingLeaseMonths			is Numeric size 3
				LocalWeightedAverageResultTerm 		is Decimal size 6.3
				LocalNumberOfYears					is Numeric size 3
				LocalNewLine						is LPLText
				LocalNotificationDetails			is LPLText						
			Action Rules
				Empty Set Rules
					send notification
						to LocalActor
						description is "WeightedAverageDetails"
						priority is high
						detail is "No_Lease_records_to_process"
				Set Rules
					Entrance Rules
						initialize LocalCounter
						LocalActor 							= actor
						LocalReportDate						= PrmReportDate
						
					Exit Rules
						LocalWeightedAverageReportResult	= PrmLeaseWeightedAverageReportResult
						LocalFinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
						LocalCompany						= PrmCompany
						if (PrmReportOption.DiscountRate)
							LocalWeightedAveragePercent					= sum WeightAverageReportDetailRel.WeightedAveragePercent
							invoke FastUpdate WeightAverageResultsReportRel
								invoked.WeightedAverageResultsRate		= LocalWeightedAveragePercent
						else
							LocalWeightedAverageResultTerm				= sum WeightAverageReportDetailRel.WeightedAverageTerm
							invoke FastUpdate WeightAverageResultsReportRel
								invoked.WeightedAverageResultsTerm		= LocalWeightedAverageResultTerm

						LocalNewLine 	= "\u000a"
						LocalNotificationDetails = "Number of records in the report are "+ LocalNewLine
						LocalNotificationDetails += "Total Leases: "+ LocalCounter +LocalNewLine 
						
						send notification
							to LocalActor
							description is "WeightedAverageDetails"
							priority is high
							detail is "<LocalNotificationDetails>"

				Instance Rules
					if (PrmReportOption.DiscountRate
					or PrmReportOption.RemainingLeaseTerm and !IsShortTermLease)
						increment LocalCounter
						LocalReportDate							= PrmReportDate
						LocalNumberOfYears						= EndDate year - PrmReportDate year
						if (PrmReportOption.DiscountRate)
							LocalRemainingLeasePayments 		= sum WeightedAverageReportPaymentsRel.BasePaymentAmount
							LocalPercentage  					= LocalRemainingLeasePayments / PrmWeightedAverageTotalPayments
							LocalWeightedAveragePercent			= LocalPercentage * InterestRate
						else
							LocalRemainingLeaseLiability		= first WeightedAverageReportLiabilityRel.LiabilityBalance + first WeightedAverageReportLiabilityRel.PrincipalAmount
							if (LocalReportDate <= BeginDate)
								LocalRemainingLeaseMonths		= Term
							else
								if (LocalNumberOfYears = 1)
									LocalRemainingLeaseMonths	= (12 - PrmReportDate months)
									LocalRemainingLeaseMonths	= LocalRemainingLeaseMonths + 1 month
									LocalRemainingLeaseMonths	= LocalRemainingLeaseMonths + EndDate months
								else
									if (LocalNumberOfYears = 0)
										LocalRemainingLeaseMonths	= EndDate months - PrmReportDate months
										LocalRemainingLeaseMonths	= LocalRemainingLeaseMonths + 1 month
									else
										LocalRemainingLeaseMonths	= LocalNumberOfYears - 1
										LocalRemainingLeaseMonths	= LocalRemainingLeaseMonths * 12
										LocalRemainingLeaseMonths	= LocalRemainingLeaseMonths + (12 - PrmReportDate months)
										LocalRemainingLeaseMonths	= LocalRemainingLeaseMonths + 1 month
										LocalRemainingLeaseMonths	= LocalRemainingLeaseMonths + EndDate months

							LocalPercentage						= LocalRemainingLeaseLiability / PrmWeightedAverageTotalLiability
							LocalWeightedAverageResultTerm		= LocalPercentage * LocalRemainingLeaseMonths
						
						invoke Create LeaseWeightedAverageReportDetail
							invoked.LeaseWeightedAverageReportResult	= PrmLeaseWeightedAverageReportResult
							invoked.Lease								= Lease
							invoked.Company								= PrmCompany	
							invoked.ReportOption						= PrmReportOption
							invoked.Percentage							= LocalPercentage
							if (PrmReportOption.DiscountRate)
								invoked.DiscountRate					= InterestRate
								invoked.RemainingLeasePayments			= LocalRemainingLeasePayments
								invoked.WeightedAveragePercent			= LocalWeightedAveragePercent
							else
								invoked.RemainingLeaseLiability			= LocalRemainingLeaseLiability
								invoked.RemainingLeaseMonths			= LocalRemainingLeaseMonths
								invoked.WeightedAverageTerm				= LocalWeightedAverageResultTerm

		SetLiabilityAccounts is a Set Action
			restricted

			Instance Selection
				where (Status.Released
				and Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

			Action Rules	
				Instance Rules
					if(LeaseCompaniesRel  not exists)
						invoke Create LeaseCompany 
							invoked.Company = Company

		MassConversionOfLiabilityAccounts is a Set Action 
			restricted

			confirmation required
				"AreYouSure,YouWantToConvertIntoShortTermAndLongTermLiabilites?ThisCannotBeReversed."
			
			Parameters
				PrmConversionDate 					is Date	
					default label is "ConversionDate"
				PrmOption					is Numeric 1
					default label is "ActionOption"
					States
						ReportOnly			value is 0
						ReportAndUpdate		value is 1
			
			Parameter Rules				
				PrmConversionDate
					required
					LocalConversionDate = PrmConversionDate		
					constraint(UnReleasedLeasesRel not exists) 
						"SomeLeasesAreUnreleased,ReleaseOrDeleteThemToRunTheConversionProcess"
					constraint(TerminationLeasesRel not exists)
						"SomeLeasesHaveTerminationInProgress,TerminateThemToRunTheConversionProcess"
					constraint(ModificationLeasesRel not exists)
						"SomeLeasesHaveModificationInProgress,CompleteModificationToRunTheConversionProcess"
					constraint(AdjustmentLeasesRel not exists)
						"SomeLeasesHaveAdjustmentInProgress,CompleteAdjustmentToRunTheConversionProcess"
					constraint(ImpairmentLeasesRel not exists) 
						"SomeLeasesHaveImpairmentInProgress,CompleteImpairmentToRunTheConversionProcess"
					constraint(UnreleasedLeasePaymentsBeforeConversionDateRel not exists) 
					 	"ScheduledPaymentsExistBefore;TheseMustBeInvoicedAndPostedBeforeRunningTheConversion"
					constraint(UnPostedInvoicesBeforeConversionDateRel not exists)
						"LeasePaymentsExistBeforeTheConversionDate.MustProcessThemFirst"   
					constraint(PostedInvoicesAfterConversionDateRel not exists) 
						"CannotHaveLeaseInvoicesInTheSamePeriodAsTheConversionDate"				

			Local Fields
				LocalActor									is an Actor
				LocalCounter								is Numeric 10
				LocalNewLine								is LPLText
				LocalNotificationDetails					is LPLText	

			Instance Selection
				where (Status.Released
				and Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

			Action Rules
				Empty Set Rules
					send notification
						to LocalActor
						description is "MassConversionOfLiabilityAccounts"
						priority is high
						detail is "No_released_Lease_records_to_process"

				Set Rules					
					Entrance Rules
						LocalActor 				= actor	
						if(PrmOption.ReportAndUpdate)
							invoke T2VUpdate Company.FinanceEnterpriseGroup
								invoked.ShortTermLiabilityAccounting = true					

					Exit Rules
						if(PrmOption.ReportAndUpdate)
							invoke ConversionOfShortAndLongTermLiabilityAmounts LeasePaymentPeriodBalance  
								invoked.PrmConversionDate	= PrmConversionDate			

						LocalNewLine 	= "\u000a"
						if(PrmOption.ReportOnly)
							LocalNotificationDetails = "Number of records that are available for conversion Process "+ LocalNewLine
						else
							LocalNotificationDetails = "Number of records that are updated during  conversion Process "+ LocalNewLine
						LocalNotificationDetails += "Total Leases: "+ LocalCounter +LocalNewLine 
					
						send notification
							to LocalActor
							description is "MassConversionOfLiabilityAccounts"
							priority is high
							detail is "<LocalNotificationDetails>"

				Instance Rules
					LocalCounter +=1
					if(PrmOption.ReportAndUpdate)
						invoke RestrictedUpdate 
							invoked.ShortTermConversionProcess = true
							if(LeaseCompaniesRel exists)
								if(LeaseClassification.Operating)
									invoked.ShortTermLiabilityAccount = LeaseCompaniesAccountsRel.OperatingShortTermLiabilityAccount
									invoked.LongTermLiabilityAccount  = LeaseCompaniesAccountsRel.OperatingLongTermLiabilityAccount		
								else
									invoked.ShortTermLiabilityAccount = LeaseCompaniesAccountsRel.FinanceShortTermLiabilityAccount
									invoked.LongTermLiabilityAccount  = LeaseCompaniesAccountsRel.FinanceLongTermLiabilityAccount	
						

						LocalCalculateLongTermLiabilityDueDate 		= PrmConversionDate
						LocalCalculateLongTermLiabilityDueDate 		+= 11 months
						LocalBaseLongTermLiability 					= sum LongTermBaseCurrencyLiabilityRel.PrincipalAmount
						LocalBaseShortTermLiability 				= last LeasePaymentBalancesRel.BeginningPrincipalBalance - LocalBaseLongTermLiability
						invoke Update last LeasePaymentBalancesRel
							invoked.BeginningShortTermLiability		= LocalBaseShortTermLiability
							invoked.BeginningLongTermLiability		= LocalBaseLongTermLiability						
										
		MassConversionBaseCurrencyTransaction is a Set Action  
			restricted
			Parameters
				PrmConversionDate  is Date
			
			Instance Selection
				where (Status.Released
				and Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

			Local Fields
				LocalBaseDebtTransactionAccount				is a FinanceCodeBlock
				LocalBaseDebtTransactionAmount				is an InternationalAmount
				LocalBaseShortTransactionAccount			is a FinanceCodeBlock
				LocalBaseShortTransactionAmount				is an InternationalAmount
				LocalBaseLongTransactionAccount				is a FinanceCodeBlock
				LocalBaseLongTransactionAmount				is an InternationalAmount
			
			Action Rules
				Set Rules
					Entrance Rules

					Exit Rules
						invoke MassConversionOfShortAndLongTermLiabilityAmounts LeaseCurrencyPaymentPeriodBalance 	
							invoked.PrmConversionDate	= PrmConversionDate
								
				Instance Rules
					LocalConversionDate                 = PrmConversionDate
					LocalConversionTransactionType      = "LEL"
					LocalConversionTransactionProcess   = "CON"
					LocalBaseDebtTransactionAccount     = DebtAccount
					LocalBaseDebtTransactionAmount      = last ConversionLeaseLiabilityPaymentBalanceRel.LiabilityBalance                                                                   
					invoke Create LeaseTransaction 
						fill in fields from this instance
						invoked.LeaseTransactionAccount = LocalBaseDebtTransactionAccount   
						invoked.TransactionAmount		= LocalBaseDebtTransactionAmount				
						invoked.ToBaseCurrency			= Currency
						invoked.TransactionDate 		= PrmConversionDate
						invoked.Status					= 0
						invoked.Reference 				= ProgramName
						invoked.Type 					= LocalConversionTransactionType 
						invoked.Process 				= LocalConversionTransactionProcess


					

					LocalBaseShortTransactionAccount    = ShortTermLiabilityAccount
					LocalBaseShortTransactionAmount     = DerivedBaseShortTermLiabilityAmount                                                                       
					invoke Create LeaseTransaction 
						fill in fields from this instance
						invoked.LeaseTransactionAccount = LocalBaseShortTransactionAccount   
						invoked.TransactionAmount		= LocalBaseShortTransactionAmount * -1 				
						invoked.ToBaseCurrency			= Currency
						invoked.TransactionDate 		= PrmConversionDate
						invoked.Status					= 0
						invoked.Reference 				= ProgramName
						invoked.Type 					= LocalConversionTransactionType
						invoked.Process 				= LocalConversionTransactionProcess




					LocalBaseLongTransactionAccount     = LongTermLiabilityAccount
					LocalBaseLongTransactionAmount	    = LocalBaseDebtTransactionAmount - LocalBaseShortTransactionAmount          
					invoke Create LeaseTransaction 
						fill in fields from this instance
						invoked.LeaseTransactionAccount = LocalBaseLongTransactionAccount   
						invoked.TransactionAmount		= LocalBaseLongTransactionAmount * -1			
						invoked.ToBaseCurrency			= Currency
						invoked.TransactionDate 		= PrmConversionDate
						invoked.Status					= 0
						invoked.Reference 				= ProgramName
						invoked.Type 					= LocalConversionTransactionType 
						invoked.Process 				= LocalConversionTransactionProcess


						
					invoke JournalizeSet LeaseTransaction
						invoked.PrmCompany		= Company
						invoked.PrmLease		= Lease
						invoked.PrmProcess		= "CON"
						invoked.PrmDescription	= "ConversionToSTLiability" 
				

					LocalCalculateLongTermLiabilityDueDate 		= PrmConversionDate
					LocalCalculateLongTermLiabilityDueDate 		+= 11 months
					LocalLongTermLiability 						= sum LongTermLeaseCurrencyLiabilityRel.PrincipalAmount
					LocalShortTermLiability 					= last LeaseCurrencyPaymentBalanceNoECCRel.BeginningPrincipalBalance - LocalLongTermLiability
					invoke Update last LeaseCurrencyPaymentBalanceNoECCRel
						invoked.BeginningShortTermLiability		= LocalShortTermLiability
						invoked.BeginningLongTermLiability		= LocalLongTermLiability

		MassConversionLeaseCurrencyTransaction is a Set Action 
			restricted
			Parameters
				PrmConversionDate                           is Date

			Instance Selection
				where (Status.Released
				and Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

			Local Fields
				LocalDebtTransactionAccount				    is a FinanceCodeBlock
				LocalDebtTransactionAmount					is an InternationalAmount
				LocalShortTransactionAccount				is a FinanceCodeBlock
				LocalShortTransactionAmount					is an InternationalAmount
				LocalLongTransactionAccount				    is a FinanceCodeBlock
				LocalLongTransactionAmount					is an InternationalAmount
			
			Action Rules
				Set Rules
					Entrance Rules
						
				Instance Rules
					LocalConversionDate                 = PrmConversionDate
					LocalConversionTransactionType      = "LEL"
					LocalConversionTransactionProcess   = "CON"
					LocalDebtTransactionAccount         = DebtAccount
					LocalDebtTransactionAmount          = last ConversionLeaseCurrencyLiabilityPaymentBalanceRel.LiabilityBalance                                                                         
					invoke Create LeaseTransaction 
						fill in fields from this instance
						invoked.LeaseTransactionAccount = LocalDebtTransactionAccount  
						invoked.TransactionAmount		= LocalDebtTransactionAmount				
						invoked.ToBaseCurrency			= Currency
						invoked.TransactionDate 		= PrmConversionDate
						invoked.Status					= 0
						invoked.Reference 				= ProgramName
						invoked.Type 					= LocalConversionTransactionType 
						invoked.Process 				= LocalConversionTransactionProcess


					

					LocalShortTransactionAccount        = ShortTermLiabilityAccount
					LocalShortTransactionAmount         = DerivedLeaseShortTermLiabilityAmount                                                                       
					invoke Create LeaseTransaction 
						fill in fields from this instance
						invoked.LeaseTransactionAccount = LocalShortTransactionAccount   
						invoked.TransactionAmount		= LocalShortTransactionAmount * -1				
						invoked.ToBaseCurrency			= Currency
						invoked.TransactionDate 		= PrmConversionDate
						invoked.Status					= 0
						invoked.Reference 				= ProgramName
						invoked.Type 					= LocalConversionTransactionType 
						invoked.Process 				= LocalConversionTransactionProcess




					LocalConversionTransactionType      = "LEL"
					LocalConversionTransactionProcess   = "CON"
					LocalLongTransactionAccount         = LongTermLiabilityAccount
					LocalLongTransactionAmount          = LocalDebtTransactionAmount - LocalShortTransactionAmount             
					invoke Create LeaseTransaction 
						fill in fields from this instance
						invoked.LeaseTransactionAccount = LocalLongTransactionAccount   
						invoked.TransactionAmount		= LocalLongTransactionAmount * -1				
						invoked.ToBaseCurrency			= Currency
						invoked.TransactionDate 		= PrmConversionDate
						invoked.Status					= 0
						invoked.Reference 				= ProgramName
						invoked.Type 					= LocalConversionTransactionType 
						invoked.Process 				= LocalConversionTransactionProcess


						
					invoke JournalizeSet LeaseTransaction
						invoked.PrmCompany		= Company
						invoked.PrmLease		= Lease
						invoked.PrmProcess		= "CON"
						invoked.PrmDescription	= "ConversionToSTLiability" 

		MassConversionofLiabilityAccountsForOneCompany is a Set Action 
			restricted
			confirmation required
				"AreYouSure,YouWantToConvertIntoShortTermAndLongTermLiabilites?ThisCannotBeReversed."
						
			Parameters
				PrmCompany                          is a PayablesCompany
				 	default label is "Company"
				PrmConversionDate 					is Date	
					default label is "ConversionDate"
				PrmOption					is Numeric 1
					default label is "ActionOption"
					States
						ReportOnly			value is 0
						ReportAndUpdate		value is 1
				PrmOperatingShortTermLiabilityAccount        is a FinanceCodeBlockFull
					default label is "OperatingShortTermLiabilityAccount"
				PrmOperatingLongTermLiabilityAccount         is a FinanceCodeBlockFull
					default label is "OperatingLongTermLiabilityAccount"
				PrmFinanceShortTermLiabilityAccount          is a FinanceCodeBlockFull
					default label is "FinanceShortTermLiabilityAccount"
				PrmFinanceLongTermLiabilityAccount           is a FinanceCodeBlockFull
					default label is "FinanceLongTermLiabilityAccount"

			Parameter Rules
				PrmCompany

					initial value is first ReleasedLeasesRel.Company
					constraint(DerivedLeasesHasSingleCompany)
						"LeasesInTheSystemAreUnderMultipleCompanies.RunTheProcessForMultipleCompanies"
				
				PrmConversionDate
					required		
					LocalConversionDate = PrmConversionDate	
					constraint(UnReleasedLeasesRel not exists) 
					 	"SomeLeasesAreUnreleased,ReleaseOrDeleteThemToRunTheConversionProcess"
					constraint(TerminationLeasesRel not exists) 
					 	"SomeLeasesHaveTerminationInProgress,TerminateThemToRunTheConversionProcess"
					constraint(ModificationLeasesRel not exists) 
					 	"SomeLeasesHaveModificationInProgress,CompleteModificationToRunTheConversionProcess"
					constraint(AdjustmentLeasesRel not exists) 
					 	"SomeLeasesHaveAdjustmentInProgress,CompleteAdjustmentToRunTheConversionProcess"
					constraint(ImpairmentLeasesRel not exists)
						"SomeLeasesHaveImpairmentInProgress,CompleteImpairmentToRunTheConversionProcess"
					constraint(UnreleasedLeasePaymentsBeforeConversionDateRel not exists) 
					    "ScheduledPaymentsExist;TheseMustBeInvoicedAndPostedBeforeRunningTheConversion"
					constraint(UnPostedInvoicesBeforeConversionDateRel not exists) 
						"LeasePaymentsExistsBeforeTheConversionDate.MustProcessThemFirst" 
					constraint(PostedInvoicesAfterConversionDateRel not exists) 
						"CannotHaveLeaseInvoicesInTheSamePeriodAsTheConversionDate"
					
				PrmOperatingShortTermLiabilityAccount
					if(PrmOption.ReportAndUpdate
					and OperatingLeasesRel exists)						
						required
			
				PrmOperatingLongTermLiabilityAccount
					if(PrmOption.ReportAndUpdate
					and OperatingLeasesRel exists)
						required
				
				PrmFinanceShortTermLiabilityAccount
					if(PrmOption.ReportAndUpdate
					and FinanceLeasesRel exists)
						required
			
				PrmFinanceLongTermLiabilityAccount
					if(PrmOption.ReportAndUpdate
					and FinanceLeasesRel exists)
						required

			Local Fields
				LocalActor									        is an Actor
				LocalCounter								        is Numeric 10
				LocalNewLine								        is LPLText
				LocalNotificationDetails					        is LPLText

			Instance Selection
				where (Status.Released
				and Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

			Action Rules
				Empty Set Rules
					send notification
						to LocalActor
						description is "MassConversionOfLiabilityAccounts"
						priority is high
						detail is "No_released_Lease_records_to_process"
	
				Set Rules
					Entrance Rules 
						LocalActor 				= actor	
						if(PrmOption.ReportAndUpdate)
							invoke T2VUpdate Company.FinanceEnterpriseGroup
								invoked.ShortTermLiabilityAccounting = true
																	
					Exit Rules
						if(PrmOption.ReportAndUpdate)
							invoke ConversionOfShortAndLongTermLiabilityAmounts LeasePaymentPeriodBalance  
								invoked.PrmConversionDate	= PrmConversionDate	

						LocalNewLine 	= "\u000a"
						if(PrmOption.ReportOnly)
							LocalNotificationDetails = "Number of records that are available for conversion Process "+ LocalNewLine
						else
							LocalNotificationDetails = "Number of records that are updated during  conversion Process "+ LocalNewLine
						LocalNotificationDetails += "Total Leases for Company : " + LocalCompany +" = " + LocalCounter +LocalNewLine 
					
						send notification
							to LocalActor
							description is "MassConversionOfLiabilityAccounts"
							priority is high
							detail is "<LocalNotificationDetails>"

				Instance Rules
					LocalCounter +=1
					LocalCompany = Company
					if(PrmOption.ReportAndUpdate)
						invoke RestrictedUpdate 
							invoked.ShortTermConversionProcess = true
							if(LeaseClassification.Operating)
								invoked.ShortTermLiabilityAccount = PrmOperatingShortTermLiabilityAccount
								invoked.LongTermLiabilityAccount  = PrmOperatingLongTermLiabilityAccount	
							else
								invoked.ShortTermLiabilityAccount = PrmFinanceShortTermLiabilityAccount
								invoked.LongTermLiabilityAccount  = PrmFinanceLongTermLiabilityAccount		
										

						LocalCalculateLongTermLiabilityDueDate 		= PrmConversionDate
						LocalCalculateLongTermLiabilityDueDate 		+= 11 months
						LocalBaseLongTermLiability 					= sum LongTermBaseCurrencyLiabilityRel.PrincipalAmount
						LocalBaseShortTermLiability 				= last LeasePaymentBalancesRel.BeginningPrincipalBalance - LocalBaseLongTermLiability
						invoke Update last LeasePaymentBalancesRel
							invoked.BeginningShortTermLiability		= LocalBaseShortTermLiability
							invoked.BeginningLongTermLiability		= LocalBaseLongTermLiability
		
		LeaseLessorTransfer is an Instance Action			
			valid when (IsReleased)
			Parameters
				PrmNewLessor 			is a Vendor
				PrmTransferDate         is Date
				PrmProcessLevel 		is a PayablesProcessLevel

			Parameter Rules
				PrmNewLessor
					required
				PrmTransferDate 
					required

			Local Fields
				LeasePaymentHeaderView  is a LeasePayment view
				LocalLeasePaymentHeader is Numeric size 6

			Action Rules
				LessorTransfer = true
				PreviousLessor = Lessor
				LessorTransferDate = PrmTransferDate

				constraint (LeaseInvoicesAfterLessorTransferDateRel not exists) 
					"TransferDateMustBeAfterAllLeaseInvoiceDueDates" 				
			
				constraint (UnpostedInvoicesBeforeLessorTransferRel not exists)
					"UnpostedInvoicesExistBeforeTheTransferDate;TheseMustBePostedBeforeLessorIsTransferred"									
			
				constraint (UnreleasedLeasePaymentDetailsBeforeLessorTransferRel not exists)
					"ScheduledPaymentsExistBeforeTheTransferDate;TheseMustBeInvoicedAndPostedBeforeLessorIsTransferred"				
						
				invoke RestrictedUpdate
					invoked.Lessor = PrmNewLessor

				for each LeasePaymentLessorRel
					invoke RestrictedCreate LeasePayment
						assign result to LeasePaymentHeaderView
						fill in fields from each
							except invoked.Vendor
						invoked.Vendor = PrmNewLessor
						if (PrmProcessLevel entered)
							invoked.ProcessLevel = PrmProcessLevel

				LocalLeasePaymentHeader = LeasePaymentHeaderView.LeasePayment
				for each LeaseLessorPaymentDetailsRel
					invoke RestrictedCreate LeasePaymentDetail
						fill in fields from each
							except invoked.Vendor
							except invoked.LeasePayment
							except invoked.RecurringLeasePaymentDetail
						invoked.Vendor = PrmNewLessor
						invoked.LeasePayment = LocalLeasePaymentHeader
				invoke RestrictedDelete LeaseLessorPaymentDetailsRel

				invoke RestrictedUpdate LeasePaymentLessorRel
					invoked.LastPaymentNumber = first LeasePaymentDetailPaymentNumberRel.LeasePaymentDetail.PaymentNumber
				
				for each LeasePaymentBalanceRel
					invoke Create LeasePaymentBalance
						fill in fields from each
						invoked.Vendor	= PrmNewLessor
				
					for each each.LeasePaymentPeriodBalance set
						invoke Create LeasePaymentPeriodBalance
							fill in fields from each
							invoked.Vendor	= PrmNewLessor

				for each LeaseCurrencyPaymentBalanceRel 
					invoke Create LeaseCurrencyPaymentBalance
						fill in fields from each
						invoked.Vendor		= PrmNewLessor

					for each each.LeaseCurrencyPaymentPeriodBalance set
						invoke Create LeaseCurrencyPaymentPeriodBalance
							fill in fields from each
							invoked.Vendor	= PrmNewLessor

				invoke Delete LeaseCurrencyPaymentBalanceLessorRel

				invoke Delete LeasePaymentBalanceLessorRel

		UpdateShortAndLongTermLiabilityAmounts is an Instance Action
			restricted

			Action Rules

				if (ShortTermLiabilityAccounting)

					LocalCalculateLongTermLiabilityDueDate 		= first AllLeaseBaseCurrencyBalancesRel.PaymentDueDate
					LocalCalculateLongTermLiabilityDueDate 		+= 11 months
					LocalBaseLongTermLiability 					= sum LongTermBaseCurrencyLiabilityRel.PrincipalAmount
					LocalBaseShortTermLiability 				= last LeasePaymentBalancesRel.BeginningPrincipalBalance - LocalBaseLongTermLiability
					invoke Update last LeasePaymentBalancesRel
						invoked.BeginningShortTermLiability		= LocalBaseShortTermLiability
						invoked.BeginningLongTermLiability		= LocalBaseLongTermLiability

					invoke CalculateShortAndLongTermLiabilityAmounts LeasePaymentPeriodBalance in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmCompany			= Company
						invoked.PrmLease			= Lease
						invoked.PrmVendor			= Lessor
						invoked.PrmPaymentDueDate	= blank



					LocalCalculateLongTermLiabilityDueDate 		= first AllLeaseCurrencyBalancesRel.PaymentDueDate
					LocalCalculateLongTermLiabilityDueDate 		+= 11 months
					LocalLongTermLiability 						= sum LongTermLeaseCurrencyLiabilityRel.PrincipalAmount
					LocalShortTermLiability 					= last LeaseCurrencyPaymentBalanceNoECCRel.BeginningPrincipalBalance - LocalLongTermLiability
					invoke Update last LeaseCurrencyPaymentBalanceNoECCRel
						invoked.BeginningShortTermLiability		= LocalShortTermLiability
						invoked.BeginningLongTermLiability		= LocalLongTermLiability

					invoke CalculateShortAndLongTermLiabilityAmounts LeaseCurrencyPaymentPeriodBalance in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmCompany			= Company
						invoked.PrmLease			= Lease
						invoked.PrmVendor			= Lessor
						invoked.PrmPaymentDueDate	= blank



		CreateLeaseReportDetail is a Set Action
			restricted

			Parameters
				PrmFinanceEnterpriseGroup 				is a FinanceEnterpriseGroup
				PrmLeaseReportResult			  		is a LeaseReportResult
				PrmCompany								is a Company
					default label is "Company"
				PrmCompanyGroup							is a GeneralLedgerCompanyGroup
					default label is "CompanyGroup"
				PrmReportType							is Numeric 1
					States
						Rollforward						value is 1
						DisclosureSummary				value is 2
				PrmRollforwardReportType				is Numeric 1
					States
						RightOfUse						value is 1
						Liability						value is 2	
				PrmFiscalYear							is a FiscalYear
				PrmPeriod								is a Period
        		PrmFiscalQuarter						is Numeric size 1
				PrmBeginDate							is Date
				PrmEndDate								is Date
				PrmReportDateRange						is a DateRange
				PrmReportAsOfDate						is Date
				PrmAccountingStandard					is Numeric size 1
					States
						ASC 							value is 1
						GASB 							value is 2

			Parameter Rules
				PrmFinanceEnterpriseGroup 
					default to actor.context.FinanceEnterpriseGroup

				PrmCompany
					if (PrmCompanyGroup not entered)
						required
							"MustEnterEitherCompanyOrCompanyGroup"
					if (PrmCompany entered)
						constraint (PrmCompanyGroup not entered)
							"CannotEnterBothCompanyGroupAndCompany"
						LocalCompany = PrmCompany
				
				PrmCompanyGroup
					if (PrmCompany not entered)
						required
							"MustEnterEitherCompanyOrCompanyGroup"
					if (PrmCompanyGroup entered)
						constraint (PrmCompany not entered)
							"CannotEnterBothCompanyGroupAndCompany"
						LocalCompanyGroup = PrmCompanyGroup

				PrmReportType
					required

				PrmRollforwardReportType
					if (PrmReportType.Rollforward)
						required

				PrmReportDateRange

				PrmFiscalYear
					if (PrmReportType.DisclosureSummary)
						required
						LocalFiscalYear		= PrmFiscalYear

				PrmPeriod
					LocalPeriod			= PrmPeriod

			Local Fields
				LocalCounter										is Numeric 6
				LocalNewLine										is LPLText
				LocalNotificationDetails							is LPLText
				LocalActor											is an Actor
				LocalBeginDate										is Date
				LocalLiabilityIncreaseAccruedInterest				is an InternationalAmount
				LocalLiabilityReductionPayment						is an InternationalAmount
				LocalROUReductionPayments							is an InternationalAmount
				LocalLiabilityReductionTermination					is an InternationalAmount
				LocalROUReductionTermination						is an InternationalAmount
				LocalROUIncreaseAdjustments							is an InternationalAmount
				LocalROUDecreaseAdjustments							is an InternationalAmount
				LocalLiabilityIncreaseModification					is an InternationalAmount
				LocalLiabilityDecreaseModification					is an InternationalAmount
				LocalROUIncreaseModification						is an InternationalAmount	
				LocalROUDecreaseModification						is an InternationalAmount
				LocalAccountingEntity								is AlphaUpper size 12
				LocalEndingLiabilityBalance							is an InternationalAmount	
				LocalEndingShortTermLiability						is an InternationalAmount
				LocalEndingLongTermLiability						is an InternationalAmount
				LocalEndingROUBalance								is an InternationalAmount
				LocalAmortizationRightOfUse							is an InternationalAmount
				LocalInterestOnLeaseLiability						is an InternationalAmount
				LocalOperatingLeaseCost								is an InternationalAmount
				LocalShortTermLeaseCost								is an InternationalAmount
				LocalCashPaid										is an InternationalAmount
				LocalOperatingCashFLowFinanceLease					is an InternationalAmount
				LocalOperatingCashFlowOperatingLease				is an InternationalAmount
				LocalOperatingCashFlowLiabilityReduction			is an InternationalAmount
				LocalFinancingCashFlowFinanceLease					is an InternationalAmount
				LocalAdditionalRightOfUseAmountFinanceLease			is an InternationalAmount
				LocalAdditionalRightOfUseAmountOperatingLease		is an InternationalAmount
				LocalOwnershipType									is AlphaUpper size 2
				LocalLeaseAccountingType 							is AlphaUpper size 2
				LocalLeaseReportResult								is Numeric size 6
				LocalBeginRangeMonth								is Numeric size 2
				LocalBeginRangeYear									is Numeric size 4
				LocalEndRangeMonth									is Numeric size 2
				LocalEndRangeYear									is Numeric size 4
				LocalValidLease										is Boolean

			Instance Selection
				where  (((PrmCompany entered
				and      Company = PrmCompany
				and      Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)		
				or      (PrmCompanyGroup entered 
				and      WithinCompanyGroup))

				and    (PrmReportDateRange not entered
				or      (PrmReportDateRange entered
				and     BeginDate <= PrmReportDateRange.End
				and     EndDate   >= PrmReportDateRange.Begin))

				and      (Status.Released
				or       Status.Terminated
				or       Status.Closed))

			Action Rules

				Empty Set Rules
					LocalActor 					= actor
					LocalNotificationDetails 	= "No Lease for Period Parameters: "+ LocalNewLine
					send notification
						to LocalActor
						description is "LeaseRollforwardReport"
						priority is high
						detail is "<LocalNotificationDetails>"
					
				Set Rules
					Entrance Rules
						initialize LocalCounter
						LocalActor 							= actor
						if (PrmReportType.Rollforward)
							LocalBeginDate 					= PrmReportDateRange.Begin
							LocalBeginDate 					= LocalBeginDate - LocalBeginDate day
							LocalBeginDate 					= LocalBeginDate  + 1 day
							LocalReportDateRange 			= PrmReportDateRange

					Exit Rules
						if (PrmReportType.DisclosureSummary)
							invoke DisclosureSummaryTotalUpdate PrmLeaseReportResult
						LocalNewLine 	= "\u000a"
						LocalNotificationDetails = "Number of records in the report are "+ LocalNewLine
						LocalNotificationDetails += "Total Leases: "+ LocalCounter +LocalNewLine 
						
						send notification
							to LocalActor
							description is "LeaseReportResult"
							priority is high
							detail is "<LocalNotificationDetails>"

				Instance Rules
					initialize LocalLiabilityIncreaseAccruedInterest
					initialize LocalLiabilityReductionPayment
					initialize LocalROUReductionPayments
					initialize LocalLiabilityReductionTermination
					initialize LocalROUReductionTermination
					initialize LocalROUIncreaseAdjustments
					initialize LocalROUDecreaseAdjustments
					initialize LocalLiabilityIncreaseModification
					initialize LocalLiabilityDecreaseModification
					initialize LocalROUIncreaseModification	
					initialize LocalROUDecreaseModification
					initialize LocalAccountingEntity	
					initialize LocalEndingLiabilityBalance
					initialize LocalEndingShortTermLiability
					initialize LocalEndingLongTermLiability
					initialize LocalEndingROUBalance
					initialize LocalAmortizationRightOfUse
					initialize LocalInterestOnLeaseLiability
					initialize LocalOperatingLeaseCost	
					initialize LocalShortTermLeaseCost	
					initialize LocalCashPaid
					initialize LocalOperatingCashFLowFinanceLease
					initialize LocalOperatingCashFlowOperatingLease
					initialize LocalOperatingCashFlowLiabilityReduction
					initialize LocalFinancingCashFlowFinanceLease
					initialize LocalAdditionalRightOfUseAmountFinanceLease
					initialize LocalAdditionalRightOfUseAmountOperatingLease
					initialize LocalOwnershipType
					initialize LocalLeaseAccountingType 
					increment LocalCounter
					LocalValidLease = false
					if (PrmReportType.DisclosureSummary)
						LocalFiscalYear				= PrmFiscalYear
						if (PrmPeriod entered)
							LocalGLBeginPeriod		= PrmPeriod
							LocalGLEndPeriod		= PrmPeriod
						else
							if (PrmFiscalQuarter entered)
								if (PrmFiscalQuarter = "1")
									LocalQuarterPeriod1 	= 1
									LocalQuarterPeriod2		= 2
									LocalQuarterPeriod3		= 3
								if (PrmFiscalQuarter = "2")
									LocalQuarterPeriod1 	= 4
									LocalQuarterPeriod2		= 5
									LocalQuarterPeriod3		= 6
								if (PrmFiscalQuarter = "3")
									LocalQuarterPeriod1 	= 7
									LocalQuarterPeriod2		= 8
									LocalQuarterPeriod3		= 9
								if (PrmFiscalQuarter = "4")
									LocalQuarterPeriod1 	= 10
									LocalQuarterPeriod2		= 11
									LocalQuarterPeriod3		= 12
								LocalGLBeginPeriod		= LocalQuarterPeriod1
								LocalGLEndPeriod		= LocalQuarterPeriod3
							else
								LocalGLBeginPeriod		= "1"
								LocalGLEndPeriod		= "12"
						LocalBeginRangeMonth	= DisclosureBeginGLClosePeriodRel.DerivedPeriodMonth
						LocalBeginRangeYear		= DisclosureBeginGLClosePeriodRel.DerivedPeriodYear
						LocalEndRangeMonth		= DisclosureEndGLClosePeriodRel.DerivedPeriodMonth
						LocalEndRangeYear		= DisclosureEndGLClosePeriodRel.DerivedPeriodYear

						if  ((Lease.BeginDate year 	< LocalEndRangeYear
						or  (Lease.BeginDate year 	= LocalEndRangeYear
						and Lease.BeginDate month 	<= LocalEndRangeMonth))
						and (Lease.EndDate year   	> LocalBeginRangeYear
						or  (Lease.EndDate year   	= LocalBeginRangeYear
						and  Lease.EndDate month   	>= LocalBeginRangeMonth)))
							LocalValidLease	= true		





					if (PrmReportType.DisclosureSummary and LocalValidLease)
						LocalAccountingEntity	= Company.AccountingEntity
						if (PrmPeriod entered)
							LocalFiscalYear		= PrmFiscalYear
							LocalPeriod			= PrmPeriod
							LocalDueDate		= first DisclosureSummaryPeriodRel.PaymentDueDate
							if (LeaseClassification.Finance)
								LocalAmortizationRightOfUse								=	DisclosureSummaryPeriodRel.ROUReduction
								LocalInterestOnLeaseLiability							=	DisclosureSummaryPeriodRel.InterestAmount
								LocalOperatingCashFLowFinanceLease						=	DisclosureSummaryPeriodRel.InterestAmount
								if (Lease.BeginDate month 	= first DisclosureSummaryPeriodRel.PaymentDueDate month
								and Lease.BeginDate year	= first DisclosureSummaryPeriodRel.PaymentDueDate year)
									LocalAdditionalRightOfUseAmountFinanceLease			=	Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	
								LocalFinancingCashFlowFinanceLease						=	DisclosureSummaryPeriodRel.PrincipalAmount
							else
								if (Lease.IsShortTermLease)
									LocalShortTermLeaseCost								=	DisclosureSummaryPaymentPeriodRel.BasePaymentAmount
								else
									LocalOperatingLeaseCost								=	DisclosureSummaryPeriodRel.LeaseExpense
									LocalOperatingCashFlowOperatingLease				=	DisclosureSummaryPeriodRel.Amount
									LocalOperatingCashFlowLiabilityReduction			= 	DisclosureSummaryPeriodRel.PrincipalAmount
									if (Lease.BeginDate month 	= first DisclosureSummaryPeriodRel.PaymentDueDate month
									and Lease.BeginDate year	= first DisclosureSummaryPeriodRel.PaymentDueDate year)
										LocalAdditionalRightOfUseAmountOperatingLease	=	Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	
							LocalCashPaid												= 	DisclosureSummaryPeriodRel.Amount
							LocalOwnershipType											=	first DisclosureSummaryPeriodRel.OwnershipType
							LocalLeaseAccountingType 									=	first DisclosureSummaryPeriodRel.LeaseAccountingType
						else
							if (PrmFiscalQuarter entered)
								LocalFiscalYear				= PrmFiscalYear
								if (PrmFiscalQuarter = "1")
									LocalQuarterPeriod1 	= 1
									LocalQuarterPeriod2		= 2
									LocalQuarterPeriod3		= 3
								if (PrmFiscalQuarter = "2")
									LocalQuarterPeriod1 	= 4
									LocalQuarterPeriod2		= 5
									LocalQuarterPeriod3		= 6
								if (PrmFiscalQuarter = "3")
									LocalQuarterPeriod1 	= 7
									LocalQuarterPeriod2		= 8
									LocalQuarterPeriod3		= 9
								if (PrmFiscalQuarter = "4")
									LocalQuarterPeriod1 	= 10
									LocalQuarterPeriod2		= 11
									LocalQuarterPeriod3		= 12
								LocalReportDateRange.Begin	= first DisclosureSummaryFiscalQuarterRel.PaymentDueDate
								LocalReportDateRange.End	= last DisclosureSummaryFiscalQuarterRel.PaymentDueDate
								if (Lease.LeaseClassification.Finance)
									LocalAmortizationRightOfUse								=	sum DisclosureSummaryFiscalQuarterRel.ROUReduction
									LocalInterestOnLeaseLiability							=	sum DisclosureSummaryFiscalQuarterRel.InterestAmount
									LocalOperatingCashFLowFinanceLease						=	sum DisclosureSummaryFiscalQuarterRel.InterestAmount
									if (Lease.BeginDate within LocalReportDateRange)
										LocalAdditionalRightOfUseAmountFinanceLease			=	Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	
									LocalFinancingCashFlowFinanceLease						=	sum DisclosureSummaryFiscalQuarterRel.PrincipalAmount
								else
									if (Lease.IsShortTermLease)
										LocalShortTermLeaseCost								=	sum DisclosureSummaryPaymentPeriodsRel.BasePaymentAmount
									else
										LocalOperatingLeaseCost								=	sum DisclosureSummaryFiscalQuarterRel.LeaseExpense
										LocalOperatingCashFlowOperatingLease				=	sum DisclosureSummaryFiscalQuarterRel.Amount
										LocalOperatingCashFlowLiabilityReduction			=	sum DisclosureSummaryFiscalQuarterRel.PrincipalAmount
										if (Lease.BeginDate within LocalReportDateRange)
											LocalAdditionalRightOfUseAmountOperatingLease	=	Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	
								LocalCashPaid												= 	sum DisclosureSummaryFiscalQuarterRel.Amount
								LocalOwnershipType											=	first DisclosureSummaryFiscalQuarterRel.OwnershipType
								LocalLeaseAccountingType 									=	first DisclosureSummaryFiscalQuarterRel.LeaseAccountingType
							else
								LocalFiscalYear				= PrmFiscalYear
								LocalReportDateRange.Begin	= first DisclosureSummaryFiscalYearRel.PaymentDueDate
								LocalReportDateRange.End	= last DisclosureSummaryFiscalYearRel.PaymentDueDate
								if (Lease.LeaseClassification.Finance)
									LocalAmortizationRightOfUse								=	sum DisclosureSummaryFiscalYearRel.ROUReduction
									LocalInterestOnLeaseLiability							=	sum DisclosureSummaryFiscalYearRel.InterestAmount
									LocalOperatingCashFLowFinanceLease						=	sum DisclosureSummaryFiscalYearRel.InterestAmount
									if (Lease.BeginDate within LocalReportDateRange)
										LocalAdditionalRightOfUseAmountFinanceLease			=	Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	
									LocalFinancingCashFlowFinanceLease						=	sum DisclosureSummaryFiscalYearRel.PrincipalAmount
								else
									if (Lease.IsShortTermLease)
										LocalShortTermLeaseCost								=	sum DisclosureSummaryPaymentPeriodsRel.BasePaymentAmount
									else
										LocalOperatingLeaseCost								=	sum DisclosureSummaryFiscalYearRel.LeaseExpense
										LocalOperatingCashFlowOperatingLease				=	sum DisclosureSummaryFiscalYearRel.Amount
										LocalOperatingCashFlowLiabilityReduction			=	sum DisclosureSummaryFiscalYearRel.PrincipalAmount
										if (Lease.BeginDate within LocalReportDateRange)
											LocalAdditionalRightOfUseAmountOperatingLease	=	Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	
								LocalCashPaid												= 	sum DisclosureSummaryFiscalYearRel.Amount
								LocalOwnershipType											=	first DisclosureSummaryFiscalYearRel.OwnershipType
								LocalLeaseAccountingType 									=	first DisclosureSummaryFiscalYearRel.LeaseAccountingType

						invoke Create LeaseReportDetail
							invoked.LeaseReportResult							= PrmLeaseReportResult
							invoked.Company										= Lease.Company
							invoked.Lease										= Lease
							invoked.AccountingEntity							= LocalAccountingEntity
							if (ShortTermLiabilityAccounting)
								invoked.ShortTermLiabilityAccount				= Lease.ShortTermLiabilityAccount
								invoked.LongTermLiabilityAccount				= Lease.LongTermLiabilityAccount
							else
								invoked.LeaseLiabilityAccount					= Lease.DebtAccount
							if (HasAsset and !IsShortTermLease)
								LocalAsset	= first AssetsRel.Asset
								LocalBook 	= first PostingAssetBookRel.Book
								invoked.LeaseAssetAccount						= ASTAssetTransactionRel.DistributionAccount
							invoked.AmortizationRightOfUse						= LocalAmortizationRightOfUse
							invoked.InterestOnLeaseLiability					= LocalInterestOnLeaseLiability
							invoked.OperatingLeaseCost							= LocalOperatingLeaseCost	
							invoked.ShortTermLeaseCost							= LocalShortTermLeaseCost	
							invoked.CashPaid									= LocalCashPaid
							invoked.OperatingCashFLowFinanceLease				= LocalOperatingCashFLowFinanceLease
							invoked.OperatingCashFlowOperatingLease				= LocalOperatingCashFlowOperatingLease
							invoked.OperatingCashFlowLiabilityReduction			= LocalOperatingCashFlowLiabilityReduction
							invoked.FinancingCashFlowFinanceLease				= LocalFinancingCashFlowFinanceLease
							invoked.AdditionalRightOfUseAmountFinanceLease		= LocalAdditionalRightOfUseAmountFinanceLease	
							invoked.AdditionalRightOfUseAmountOperatingLease	= LocalAdditionalRightOfUseAmountOperatingLease
							invoked.OwnershipType								= LocalOwnershipType
							invoked.LeaseAccountingType 						= LocalLeaseAccountingType

					if (PrmReportType.Rollforward)
						LocalReportDateRange 				= PrmReportDateRange
						if (Lease.IsShortTermLease)
							LocalAccountingEntity			= LongTermOperatingLeaseExpense.ToAccountingEntity
						else
							if (PrmRollforwardReportType.Liability)
								if (ShortTermLiabilityAccount entered)
									LocalAccountingEntity	= ShortTermLiabilityAccount.ToAccountingEntity
								else
									LocalAccountingEntity		= DebtAccount.ToAccountingEntity
							else
								if (first AssetsRel.Asset.AssetAccountingUnitGroup entered)
									if (first AssetsRel.Asset.AssetAccountingUnitGroup.AssetAccountingUnit entered)
										LocalAccountingEntity					= first AssetsRel.Asset.AssetAccountingUnitGroup.AssetAccountingUnit.ToAccountingEntity
									else
										LocalAccountingEntity					= first AssetsRel.Asset.AssetAccountingUnit.ToAccountingEntity
								else
									LocalAccountingEntity						= first AssetsRel.Asset.AssetAccountingUnit.ToAccountingEntity
						if  (RollforwardReportRel exists)
							LocalEndingLiabilityBalance						= first RollforwardReportRel.LiabilityBalance + first RollforwardReportRel.PrincipalAmount
							if (ShortTermLiabilityAccounting)
								LocalEndingShortTermLiability				= first RollforwardReportRel.ShortTermLiability + first RollforwardReportRel.ShortTermLiabilityReduction
								LocalEndingLongTermLiability				= first RollforwardReportRel.LongTermLiability + first RollforwardReportRel.LongTermLiabilityReduction
							LocalEndingROUBalance							= first RollforwardReportRel.ROUBalance	+ first RollforwardReportRel.ROUReduction						
							for each RollforwardReportRel
								LocalReportDueDate = each.PaymentDueDate
								if ((LessorTransferDate entered
								and LocalReportDueDate >= LessorTransferDate
								and PaymentOnRollforwardReportRel exists)
								or ((LessorTransferDate not entered
								and PaymentOnRollforwardReportRel exists)
								or (LessorTransferDate entered  
								and LocalReportDueDate < LessorTransferDate))) 
									if (each.Amount = "0")
										LocalLiabilityIncreaseAccruedInterest 		+= each.InterestAmount
									else
										LocalLiabilityReductionPayment				+= each.PrincipalAmount
									LocalROUReductionPayments						+= each.ROUReduction
									LocalEndingLiabilityBalance						= each.LiabilityBalance
									if (ShortTermLiabilityAccounting)
										LocalEndingShortTermLiability				= each.ShortTermLiability
										LocalEndingLongTermLiability				= each.LongTermLiability
									LocalEndingROUBalance							= each.ROUBalance

						if (Lease.Status.Terminated)
							if (PostedLeaseTransactionRel exists)
								for each PostedLeaseTransactionRel
									if (each.Type.LeaseLiabilty)
										LocalLiabilityReductionTermination 	+= each.TransactionAmount
									else
										if (each.Type.AssetROU)
											LocalROUReductionTermination	+= each.TransactionAmount

						if (PrmRollforwardReportType.RightOfUse)
							if (AdjustmentProcessedRel exists)
								for each AdjustmentProcessedRel
									if (each.AdjustmentAmount.BaseAmount.EnteredCurrencyAmount > "0")
										LocalROUIncreaseAdjustments			+= each.AdjustmentAmount.BaseAmount.EnteredCurrencyAmount
									else
										LocalROUDecreaseAdjustments			+= each.AdjustmentAmount.BaseAmount.EnteredCurrencyAmount
		
						if (ModificationProcessedRel exists)
							for each ModificationProcessedRel
								if (each.ModificationAmount.BaseAmount.EnteredCurrencyAmount > "0")
									LocalLiabilityIncreaseModification		+= each.ModificationAmount.BaseAmount.EnteredCurrencyAmount
									LocalROUIncreaseModification			+= each.ModificationAmount.BaseAmount.EnteredCurrencyAmount
								else	
									LocalLiabilityDecreaseModification		+= each.ModificationAmount.BaseAmount.EnteredCurrencyAmount
									LocalROUDecreaseModification			+= each.ModificationAmount.BaseAmount.EnteredCurrencyAmount


						invoke Create LeaseReportDetail
							invoked.LeaseReportResult							= PrmLeaseReportResult
							invoked.Company										= Lease.Company
							invoked.Lease										= Lease
							invoked.AccountingEntity							= LocalAccountingEntity
							invoked.LeaseAccountingMethod						= LeaseAccountingMethod
							if (PrmRollforwardReportType.Liability)
								if (ShortTermLiabilityAccounting)
									invoked.ShortTermLiabilityAccount		= Lease.ShortTermLiabilityAccount
									invoked.LongTermLiabilityAccount		= Lease.LongTermLiabilityAccount
								else
									invoked.LeaseLiabilityAccount			= Lease.DebtAccount
								if (BeginDate > LocalBeginDate)
									if (ModificationProcessedRel exists)
										invoked.LiabilityAdditionsNewLease		= first ModificationProcessedRel.OriginalLeaseObligation.BaseAmount.EnteredCurrencyAmount
									else
										invoked.LiabilityAdditionsNewLease		= Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount
								else
									invoked.BeginnningLiabilityBalance			= first RollforwardReportRel.LiabilityBalance + first RollforwardReportRel.PrincipalAmount
									if (ShortTermLiabilityAccounting)
										invoked.BeginningShortTermLiability		= first RollforwardReportRel.ShortTermLiability + first RollforwardReportRel.ShortTermLiabilityReduction
										invoked.BeginningLongTermLiability		= first RollforwardReportRel.LongTermLiability + first RollforwardReportRel.LongTermLiabilityReduction
								invoked.LiabilityReductionPayments				= LocalLiabilityReductionPayment
								invoked.LiabilityIncreaseModification			= LocalLiabilityIncreaseModification
								invoked.LiabilityDecreaseModification			= LocalLiabilityDecreaseModification
								invoked.LiabilityReductionTermination			= LocalLiabilityReductionTermination
								invoked.LiabilityIncreaseAccruedInterest		= LocalLiabilityIncreaseAccruedInterest
								if (ShortTermLiabilityAccounting)
									invoked.EndingShortTermLiability			= LocalEndingShortTermLiability
									invoked.EndingLongTermLiability				= LocalEndingLongTermLiability		
								invoked.EndingLiabilityBalance					= LocalEndingLiabilityBalance
							else
								if (HasAsset and !IsShortTermLease)
									LocalAsset	= first AssetsRel.Asset
									LocalBook 	= first PostingAssetBookRel.Book
									invoked.LeaseAssetAccount					= ASTAssetTransactionRel.DistributionAccount
								if (BeginDate > LocalBeginDate)
									if (ModificationProcessedRel exists)
										invoked.ROUAdditionsNewLease			= first ModificationProcessedRel.OriginalROUAssetAmount.BaseAmount.EnteredCurrencyAmount
									else
										invoked.ROUAdditionsNewLease			= Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	
								else
									invoked.BeginningROUBalance					= first RollforwardReportRel.ROUBalance + first RollforwardReportRel.ROUReduction
								invoked.ROUReductionPayments					= LocalROUReductionPayments
								invoked.ROUIncreaseModification					= LocalROUIncreaseModification	
								invoked.ROUDecreaseModification					= LocalROUDecreaseModification	
								invoked.ROUIncreaseAdjustments					= LocalROUIncreaseAdjustments
								invoked.ROUDecreaseAdjustments					= LocalROUDecreaseAdjustments	
								invoked.ROUReductionTermination					= LocalROUReductionTermination
								invoked.EndingROUBalance						= LocalEndingROUBalance
			


	StateCycles	

		LeaseLifeCycle is a StateCycle

			state field is Status

            Unreleased is a State

				Create is a Create Action
					Field Rules
						LeaseClassification
							if (Company.AccountingEntity.LeaseAccountingStandard.GASB)
								if (TotalLeaseTerm < 13)
									LeaseClassification = "O"
								else
									LeaseClassification = "C"
									
							if (Company.AccountingEntity.LeaseAccountingStandard.IFRS)
								if (TotalLeaseTerm < 13
								and !ExercisePurchase)
									LeaseClassification = "O"
								else
									LeaseClassification = "C"

						LeaseAccountingStatement
							constraint (Company.AccountingEntity.LeaseAccountingStandard entered)
								"AccountingEntityMustHaveALeaseAccountingStandardToCreateALease."
						
					Action Rules
						PaymentsPerYear = 12
						Compounding = true
						include CheckAmounts

						if (Company.AccountingEntity.LeaseAccountingStandard = 1)
								LeaseAccountingStatement = 1

						else 
							if (Company.AccountingEntity.LeaseAccountingStandard = 2)
								LeaseAccountingStatement = 2
							else 
								LeaseAccountingStatement = 4
					Exit Rules
						include EditsForAllocationCodeAndAllocationCodeType
						include CalculateLeaseTerm
						include BuildTextIndexes
						invoke Create LeasePayment 
							invoked.Company			= Company	
							invoked.Lease			= Lease
							invoked.Vendor			= Lessor
							if (TransientCreateFromCopy)
								invoked.StraightLine 		= TransientStraightLine
								invoked.LeasePaymentDueDay	= TransientLeasePaymentDueDay
							else
								invoked.StraightLine    = true

				CreateRenewal is a Create Action
					restricted
					bypass field rules

					Exit Rules
						include BuildTextIndexes
						invoke Create LeasePayment 
							invoked.Company			= Company	
							invoked.Lease			= Lease
							invoked.Vendor			= Lessor
							invoked.StraightLine 	= true						
						
				CreateLeaseFromTemplate is a Create Action
					Parameters
						FinanceEnterpriseGroup 
						LeaseTemplate
						PrmLeaseName is AlphaUpper 25
							default label is "Lease"
						PrmLeaseDescription is a Description
							default label is "Description"
						PrmBeginDate is an ExchangeDate
							default label is "BeginDate"
						PrmEndDate is Date
							default label is "EndDate"
						PrmLeaseTerm is a Term
							default label is "Term" 
						PrmBargainAmount  is an InternationalAmount 
							default label is "BargainPurchaseAmount"

					Parameter Rules
						LeaseTemplate
							required
						PrmLeaseName 
							required
						PrmLeaseDescription
							required
						PrmBeginDate
							required
						PrmEndDate
							required
						PrmLeaseTerm
							required
						PrmBargainAmount
							initial value is LeaseTemplate.BargainPurchaseAmount.TransactionAmount

					Action Rules
						invoke Unreleased.Create this instance
							invoked.Company = LeaseTemplate.Company
							invoked.LeaseAccountingStatement = LeaseTemplate.LeaseAccountingStatement 
							invoked.Lease = PrmLeaseName
							invoked.Description = PrmLeaseDescription
							invoked.BeginDate = PrmBeginDate
							invoked.EndDate = PrmEndDate
							invoked.LeaseTerm = PrmLeaseTerm
							invoked.Lessor = LeaseTemplate.Lessor                             
							invoked.DebtAccount = LeaseTemplate.DebtAccount
							invoked.LeaseType = LeaseTemplate.LeaseType
							invoked.PaymentTiming = LeaseTemplate.PaymentTiming
							invoked.TerminationOption = LeaseTemplate.TerminationOption
							invoked.TerminationGainLossAccount = LeaseTemplate.TerminationGainLossAccount
							invoked.TerminationNonLeaseComponent = LeaseTemplate.TerminationNonLeaseComponent
							invoked.ExtensionOption = LeaseTemplate.ExtensionOption
							invoked.NumberOfExtensionOptions = LeaseTemplate.NumberOfExtensionOptions
							invoked.LengthOfExtension = LeaseTemplate.LengthOfExtension
							invoked.Ownership = LeaseTemplate.Ownership
							invoked.SpecializedAsset = LeaseTemplate.SpecializedAsset
							invoked.ExercisePurchase = LeaseTemplate.ExercisePurchase
							invoked.InterestAccount = LeaseTemplate.InterestAccount
							invoked.DeferredRentAccount = LeaseTemplate.DeferredRentAccount
							invoked.LongTermOperatingLeaseExpense = LeaseTemplate.LongTermOperatingLeaseExpense
							invoked.BargainPurchaseAmount = PrmBargainAmount
							invoked.LeaseCategory = LeaseTemplate.LeaseCategory
							invoked.Currency = LeaseTemplate.Currency
							invoked.LeaseClassification = LeaseTemplate.LeaseClassification
							invoked.Fas13Flag = LeaseTemplate.Fas13Flag
							invoked.OverrideShortTermLease = LeaseTemplate.OverrideShortTermLease
							invoked.InterestRate = LeaseTemplate.InterestRate
							invoked.ImplicitInterestRate = LeaseTemplate.ImplicitInterestRate
							invoked.LandAndBuilding = LeaseTemplate.LandAndBuilding
							invoked.LandValue = LeaseTemplate.LandValue
							invoked.BuildingValue = LeaseTemplate.BuildingValue
							invoked.ShortTermLiabilityAccount 	= LeaseTemplate.ShortTermLiabilityAccount
							invoked.LongTermLiabilityAccount 	= LeaseTemplate.LongTermLiabilityAccount

				Update is an Update Action
					valid when (!IsARenewal)
					Entrance Rules
						
						if (!IsShortTermLease)
							if (LeasePaymentsRel exist
							and !LeasePaymentsRel.StraightLine)
								invoke RestrictedUpdate LeasePaymentsRel
									invoked.StraightLine = true
								invoke StraightLineUpdate LeasePaymentsRel
						
						if (Company.AccountingEntity.LeaseAccountingStandard.GASB)
							if (TotalLeaseTerm < 13)
								LeaseClassification = "O"
							else
								LeaseClassification = "C"
								
						if (Company.AccountingEntity.LeaseAccountingStandard.IFRS)
							if (TotalLeaseTerm < 13
							and !ExercisePurchase)
								LeaseClassification = "O"
							else
								LeaseClassification = "C"


					Action Rules
						include CheckAmounts
						if (Currency changed
						or  BaseCurrencyRate changed)
							invoke UpdateBaseAmounts LeasePaymentDetailsRel
								invoked.Currency = Currency
						if (DefaultLeaseInterestRate)	
							if (LeaseTerm changed
							or Currency changed		
							or LeaseType changed
							or InterestRate changed)
								initialize ImplicitInterestRate

						if (IsShortTermLease and ShortTermLiabilityAccountEntered)
							initialize ShortTermLiabilityAccount
							initialize LongTermLiabilityAccount
						if (!IsShortTermLease and DebtAccountEntered and ShortTermLiabilityAccounting)
							initialize DebtAccount

					Exit Rules
						include EditsForAllocationCodeAndAllocationCodeType		
						if (InitialDirectCost.TransactionAmount changed
						or  Lease.IncentiveAmount.TransactionAmount changed
						or  Lease.DownPayment.TransactionAmount changed)
							if (LeasePaymentsRel exist
							and LeasePaymentsRel.StraightLine)
								invoke StraightLineUpdate LeasePaymentsRel

						if (HasAmortizationSchedule)
							include RemoveAmortization


				UpdateRenewal is an Update Action
					valid when (IsARenewal)
					bypass field rules

					Action Rules
						include CheckAmounts
						if (ExerciseExtension)
							Term = LeaseTerm + LengthOfExtension
						else
							Term = LeaseTerm						
						
						if (Currency changed
						or  BaseCurrencyRate changed)
							invoke UpdateBaseAmounts LeasePaymentDetailsRel
								invoked.Currency = Currency

					Exit Rules
						include EditsForAllocationCodeAndAllocationCodeType


				Delete is a Delete Action
					Entrance Rules
						if (!IsMonthToMonthRenewal)
							constraint (!HasAsset)
								"CannotDelete;AssetsExist"
					Action Rules
						invoke Delete AllLeasePaymentsRel

				Test is an Instance Action  
					valid when (AllowTestAction)
					default label is "Classify"
					Entrance Rules
						constraint (!IsMonthToMonthRenewal)
							"CannotRunLeaseTestOnAMonthToMonthRenewal"
						if (EmptyFiscalYearAndPeriodPaymentDetailRel exists)
							include SetFiscalYearAndPeriodForPaymentDetail
						include CreatePaymentForResidualOrBargainPurchase
					Action Rules								
						include FAS13Test


						Test7a												= FAS13Test7a
						Test7b												= FAS13Test7b
						Test7c												= FAS13Test7c
						Test7d												= FAS13Test7d
						LastRunDate											= current timestamp

	                	initialize NetPresentValue.BaseAmount.EnteredCurrencyAmount
						initialize NetPresentValue.BaseAmount.EnteredCurrencyRate   


						NetPresentValue.TransactionAmount					= RoundedTransactionAmount
              			NetPresentValue.BaseAmount.ToCurrency				= Company.Currency
              			NetPresentValue.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate
						NetPresentValue.BaseAmount.EnteredCurrencyAmount	= NetPresentValue.BaseAmount.OutputCurrencyAmount
	                	initialize LeaseObligation.BaseAmount.EnteredCurrencyAmount
						initialize LeaseObligation.BaseAmount.EnteredCurrencyRate  


						LeaseObligation.TransactionAmount	 				= RoundedObligationTransactionAmount
              			LeaseObligation.BaseAmount.ToCurrency				= Company.Currency
              			LeaseObligation.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
						LeaseObligation.BaseAmount.EnteredCurrencyAmount	= LeaseObligation.BaseAmount.OutputCurrencyAmount

	                	initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
						initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate  

						LeaseROUAssetAmount.TransactionAmount	 				= RoundedTransactionAmount    
              			LeaseROUAssetAmount.BaseAmount.ToCurrency				= Company.Currency
              			LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
						LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	= LeaseROUAssetAmount.BaseAmount.OutputCurrencyAmount
						ImplicitInterestRate								= FAS13ImplicitInterestRate
						LeaseClassification									= FAS13LeaseClassification
						if (LongTermOperatingLease
						or LeaseClassification.Finance
						and (!ShortTermGASBLease
						or   !ShortTermIFRS))
							include UpdateNetChangeNetPresentValueRules
							include PresentValueIteration

					Exit Rules
						include CalculateLeaseTerm
						if (LongTermOperatingLease
						or (LeaseClassification.Finance
						and (!ShortTermGASBLease)
						and   !ShortTermIFRS))
							if (!HasPaymentBalance)
								Status	= Status.Processing
								include CreateLeasePaymentBalanceRules



						if (IsShortTermLease and ShortTermLiabilityAccountEntered)
							initialize ShortTermLiabilityAccount
							initialize LongTermLiabilityAccount
						if (!IsShortTermLease and DebtAccountEntered and ShortTermLiabilityAccounting)
							initialize DebtAccount

				GASBPresentValueCalculation is an Instance Action  
					default label is "PresentValueCalculation" 
					valid when (ShowGASBPresentValue) 
					Entrance Rules
						constraint (!IsMonthToMonthRenewal)
							"CannotRunCalculationOnAMonthToMonthRenewal"
						if (EmptyFiscalYearAndPeriodPaymentDetailRel exists)
							include SetFiscalYearAndPeriodForPaymentDetail
						include CreatePaymentForResidualOrBargainPurchase	
																		
					Action Rules
						include FAS13Test  

						Test7a												= FAS13Test7a
						Test7b												= FAS13Test7b
						LastRunDate											= current timestamp
						
	                	initialize NetPresentValue.BaseAmount.EnteredCurrencyAmount
						initialize NetPresentValue.BaseAmount.EnteredCurrencyRate   
						if (FAS13NetPresentValue != NetPresentValue.TransactionAmount
						or NetPresentValue.BaseAmount.EnteredCurrencyAmount not entered)
							NetPresentValue.TransactionAmount					= RoundedTransactionAmount
	              			NetPresentValue.BaseAmount.ToCurrency				= Company.Currency
	              			NetPresentValue.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate
							NetPresentValue.BaseAmount.EnteredCurrencyAmount	= NetPresentValue.BaseAmount.OutputCurrencyAmount
	                	initialize LeaseObligation.BaseAmount.EnteredCurrencyAmount
						initialize LeaseObligation.BaseAmount.EnteredCurrencyRate  
						if (FAS13LeaseObligation != LeaseObligation.TransactionAmount
						or LeaseObligation.BaseAmount.EnteredCurrencyAmount not entered)
							LeaseObligation.TransactionAmount	 				= RoundedObligationTransactionAmount
	              			LeaseObligation.BaseAmount.ToCurrency				= Company.Currency
	              			LeaseObligation.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
							LeaseObligation.BaseAmount.EnteredCurrencyAmount	= LeaseObligation.BaseAmount.OutputCurrencyAmount

	                	initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
						initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate  
						if (LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount not entered)
							LeaseROUAssetAmount.TransactionAmount	 				= RoundedTransactionAmount    
	              			LeaseROUAssetAmount.BaseAmount.ToCurrency				= Company.Currency
	              			LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
							LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	= LeaseROUAssetAmount.BaseAmount.OutputCurrencyAmount

						ImplicitInterestRate								= FAS13ImplicitInterestRate
						LeaseClassification									= FAS13LeaseClassification
						
						if (!ShortTermGASBLease
						or  !ShortTermIFRS)
							include UpdateNetChangeNetPresentValueRules
							include PresentValueIteration



					Exit Rules
						include CalculateLeaseTerm
						if (LongTermOperatingLease
						or (LeaseClassification.Finance
						and (!ShortTermGASBLease
						and   !ShortTermIFRS)))
							if (!HasPaymentBalance)
								Status	= Status.Processing							
								include CreateLeasePaymentBalanceRules



						if (IsShortTermLease and ShortTermLiabilityAccountEntered)
							initialize ShortTermLiabilityAccount
							initialize LongTermLiabilityAccount
						if (!IsShortTermLease and DebtAccountEntered and ShortTermLiabilityAccounting)
							initialize DebtAccount

				RemoveAmortization is an Instance Action  
					restricted

					Action Rules

						invoke Purge PurgeLeaseCurrencyPaymentPeriodBalanceRel
						invoke Purge PurgeLeaseCurrencyPaymentBalanceRel
						invoke Purge PurgeLeasePaymentPeriodBalanceRel
						invoke Purge PurgeLeasePaymentBalanceRel

						if (ResidualOrBargainPurchasePaymentDetailsRel exists)
							invoke  RestrictedDelete ResidualOrBargainPurchasePaymentDetailsRel
						initialize NetPresentValue
						initialize LeaseObligation
						initialize LeaseROUAssetAmount
						initialize Test7a
						initialize Test7b
						initialize Test7c
						initialize Test7d
				
				Release is an Instance Action
					valid when (!IsARenewal)
					Entrance Rules

						if (ShortTermLiabilityAccounting)
							initialize DebtAccount
							constraint (ShortTermLiabilityAccountEntered)
								"ShortTermLiablityAccountRequired"
							constraint (LongTermLiabilityAccountEntered)
								"LongTermLiablityAccountRequired"

						if (!actor.context.FinanceEnterpriseGroup.ShortTermLiabilityAccounting and !DerivedUseOperatingLeaseExpenseAccount)
							initialize ShortTermLiabilityAccount
							initialize LongTermLiabilityAccount
							if (!LeaseAllocationCodeType.DebtOrExpense)
								constraint (DebtAccountEntered)                                                                 	
									"LeaseLiabilityAccountRequired"
							else
								constraint (DebtAccount not entered)
									"CanNotHaveLeaseLiabilityAccountAndLeaseAllocationCodeTypeLeaseLiability"

						if (DerivedUseOperatingLeaseExpenseAccount)
							initialize DebtAccount
							initialize ShortTermLiabilityAccount
							initialize LongTermLiabilityAccount
							if (OperatingLeaseAllocationCode not entered)
								constraint (LongTermOperatingLeaseExpense.GeneralLedgerChartAccount entered)
									"OperatingLeaseExpenseAccountRequiredOnOperatingLease"
							else
								constraint (LongTermOperatingLeaseExpense not entered)
									"OperatingLeaseExpenseAccountAndOperatingLeaseAllocationCodeCannotBeEntered"

						if (ShortTermGASBLease
						or  ShortTermIFRS)
							LeaseClassification = "O"
						if (LeaseFundExists)
							constraint (WholeNumberTotalPercent = "100")
								"LeaseFundsPercentTotalMustBe100%ToReleaseLease"	
						constraint (ProjectEdits < 2)
							"TheLeaseDateRangeIsNotWithinTheProjectDateRange"
						constraint (LeaseClassification entered)
							"MustRunTestActionBeforeReleasingLease"   
						constraint (!Simulated)
							"CannotReleaseSimulatedLeases"
						constraint (Term entered)
							"LeaseTermMustBeEnteredBeforeTheLeaseCanBeReleased" 
						if (TerminationNonLeaseComponent entered)
							constraint (TerminationLeaseExecutoryCostCodeRel exists)
								"NonLeaseComponentIsNotAssignedToThisLease"
						if (IsShortTermLease)
							constraint (LeaseCategory.NonDepreciable)
								"LeaseCategoryMustBeNonDepreciableForShortTermLeases"
						else
							if (ShortTermLiabilityAccounting)
								LocalCountAssets = instance count of AssetsRel
								constraint (LocalCountAssets = NumberOfAssets)
									"TheFieldNumberOfAssetsOnTheLease<NumberOfAssets>DoesNotMatchTheNumberOfAssetsTiedToTheLease<LocalCountAssets>."
						if (LeaseClassification.Finance)
							if (LeaseAllocationCode not entered) 
								constraint (InterestAccount entered) 
									"InterestAccountRequired"
							constraint (DeferredRentAccount not entered)
								"CannotHaveDeferredAccountOnFinanceLease"
							constraint (AccruedAccount not entered)
								"CannotHaveAccrualAccountOnFinanceLease"
							constraint (LongTermOperatingLeaseExpense not entered)
								"CannotHaveOperatingLeaseExpenseAccountOnAFinanceLease"
							if (LeaseAllocationCodeType.DebtOrExpense)
								constraint (InterestAccount.GeneralLedgerChartAccount entered)
									"InterestAccountRequired"		
							if (LeaseAllocationCodeType.Interest)
								constraint (InterestAccount not entered)
									"CannotEnterInterestAllocationCodeTypeAndInterestAccount"

						if (LongTermOperatingLease)
							include OperatingLeaseReleaseRules

						if (IsGASBLease
						or  IsIFRSLease)
							include GASB87ReleaseRules
							
						if (IsShortTermLease)
							include ShortTermLeasesRules



						constraint (HasPaymentDetail)
							"CannotRelease;NoPaymentInformation"

						if (DoNotCreatePayablesPaymentDetailsRel exists)
							constraint (LeasePaymentRel.LeaseInvoiceAccrualAccount entered)
								"ToNotCreatePayablesInvoicesTheLeaseInvoiceAccrualAccountMustBeEntered"

						if (LeasePaymentsRel exists)						
							if (LeaseClassification.Finance)
								if (LeasePaymentsRel.StraightLine)
									invoke RestrictedUpdate LeasePaymentsRel
										invoked.StraightLine = false

							if  (LeasePaymentsRel.StraightLine)
								if (LeaseClassification.Operating)
									constraint (DeferredRentAccount.GeneralLedgerChartAccount entered)
										"DeferredAccountRequiredWhenStraightLineIsSet"

								constraint (LeasePaymentsRel.StraightLineAmount entered)
									"StraightLineAmountNotCalculated;ChangeOnPaymentSchedule"

							if (!LeasePaymentsRel.StraightLine)
								constraint (DeferredRentBalance not entered)
									"CannotHaveDeferredRentBalanceWhenStraightLineIsNotSet"

								constraint (DeferredRentAccount not entered)
									"CannotHaveDeferredAccountWhenStraightLineIsNotSet"

						if (HasAccruedPaymentDetail)
							constraint (!LeaseClassification.Finance)
								"CannotAccruePaymentsOnFinanceLease"
							if (LeaseClassification.Operating)
								constraint (AccruedAccount entered)
									"AccruedAccountRequiredIfAccruedPaymentDetailsExist"
						else
							if (LeaseClassification.Operating)
								constraint (AccruedAccount not entered)
									"CannotHaveAccruedAccountIfNoAccruedPaymentDetailsExist"

						constraint (!LastPaymentDetailAccrued)
							"LastPaymentDetailCannotBeSetToAccrued"

						if (AccruedAccount entered)
							constraint (AccruedAccount.ToAccountingEntity.FunctionalCurrency = BaseCurrency)
								"AccrualAccountCurrencyMustEqualCompanyCurrency"

						if (LeaseClassification.Finance
						and (!ShortTermGASBLease
						or   !ShortTermIFRS))
							include CalculateTotalBookBasis
							constraint (HasAsset)
								"CannotRelease;NoAssetsExistAndLeaseIsClassifiedAsTypeFinance"              
							if (LocalUseBaseCurrency)
								LocalBaseCurrencyTolerance	 = LocalTotalBasis - LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;TotalAssetsBasisIs<LocalTotalBasis>AndTotalLeaseROUIs<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalTotalBasis = LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount)   
										"CannotRelease;BaseCurrencyRightOfUse<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>NotEqualToTotalBasis<LocalTotalBasis>"							
							else
								constraint (LocalTotalBasis = LeaseROUAssetAmount.TransactionAmount)   
									"CannotRelease;RightOfUse<LeaseROUAssetAmount.TransactionAmount>NotEqualToTotalBasis<LocalTotalBasis>"								
							constraint (PaymentsPerYear entered)
								"PaymentsPerYearRequiredForFinanceLease"									
							constraint (PaymentTiming entered)							
								"PaymentTimingRequiredForFinanceLease"											
							if (ImplicitInterestRate not entered)
						        constraint (InterestRate entered)
									"LesseeDiscountRateOrImplicitInterestRateRequiredForClassificationTest"             

							if (InterestRate not entered)
						        constraint (ImplicitInterestRate entered)
									"LesseeDiscountRateOrImplicitInterestRateRequiredForClassificationTest" 														


						for each AssetsRel
							if  (!each.Status.Disposed
							and (LeaseAccountingMethod.ASC842
							or  ((LeaseAccountingMethod.GASB87
							or	  LeaseAccountingMethod.GASB96)
							and  !Ownership)))
								constraint (each.Classification = LeaseClassification)
									"LeaseHasAssetsWithDifferentClassificationThanLease"

							if (!each.Status.Released)					
								UnreleasedAsset = true

							constraint (each.AssetCategory = LeaseCategory)
								"LeaseHasAssetsWithDifferentCategoryThanLease" 

						constraint (!UnreleasedAsset)
							"CannotRelease;UnreleaseAssetsExist"		

						if (LeaseAllocationCode entered)
							constraint (LeaseAllocationCode.IsReleased)
								"LeaseAllocationCodeNotReleased"

					Action Rules
					Exit Rules
						if (HasStraightLineSchedule)
							invoke CalculateBalanceSheetBalance LeasePaymentDetailsNoECCDueDateRel
						if (EndingResidual and last ZeroPaymentDetailsRel.DueDate = EndDate)
							invoke RestrictedUpdate last ZeroPaymentDetailsRel
								invoked.Released = true
						if (HasEndingBargainPurchaseOption and last ZeroPaymentDetailsRel.DueDate = EndDate)
							invoke RestrictedUpdate last ZeroPaymentDetailsRel
								invoked.Released = true







						make transition to Released

				ReleaseRenewal is an Instance Action
					valid when (IsARenewal)

					Local Fields
						LocalDeprCloseEndDate		is Date
						LocalDeprCloseBeginDate		is Date
						LocalNumDeprClose			is Numeric size 2
						
					Entrance Rules

						if (LeaseInvoicePrefix not entered)
							LeaseInvoicePrefix = Lease
					
						if (ShortTermLiabilityAccounting)
							initialize DebtAccount
							constraint (ShortTermLiabilityAccountEntered)
								"ShortTermLiablityAccountRequired"
							constraint (LongTermLiabilityAccountEntered)
								"LongTermLiablityAccountRequired"

						if (!actor.context.FinanceEnterpriseGroup.ShortTermLiabilityAccounting and !DerivedUseOperatingLeaseExpenseAccount)
							initialize ShortTermLiabilityAccount
							initialize LongTermLiabilityAccount
							if (!LeaseAllocationCodeType.DebtOrExpense)
								constraint (DebtAccountEntered)                                                                 	
									"LeaseLiabilityAccountRequired"
							else
								constraint (DebtAccount not entered)
									"CanNotHaveLeaseLiabilityAccountAndLeaseAllocationCodeTypeLeaseLiability"

						if (DerivedUseOperatingLeaseExpenseAccount)
							initialize DebtAccount
							initialize ShortTermLiabilityAccount
							initialize LongTermLiabilityAccount
							if (OperatingLeaseAllocationCode not entered)
								constraint (LongTermOperatingLeaseExpense.GeneralLedgerChartAccount entered)
									"OperatingLeaseExpenseAccountRequiredOnOperatingLease"
							else
								constraint (LongTermOperatingLeaseExpense not entered)
									"OperatingLeaseExpenseAccountAndOperatingLeaseAllocationCodeCannotBeEntered"











						if (!OriginalLease.Status.Closed)
							constraint (OriginalLease.Status.Closed)
								"CannotRelease;OriginalLeaseMustBeClosedFirst.CurrentStatusIs<OriginalLease.Status>"
						if (RenewalLeaseRenewalsRel exist)
							for each RenewalLeaseRenewalsRel
								if (each.Lease.BeginDate < BeginDate)
									constraint (each.Lease.Status.Closed)
										"PriorRenewalMustBeClosedBeforeYouCanReleaseTheRenewal."





						constraint (FirstPaymentDate entered)
							"CannotRelease;FirstPaymentDateMustBeEntered"

						constraint (LeaseInvoicePrefix entered)
							"CannotRelease;LeaseInvoicePrefixMustBeEntered"

						constraint (!LeaseInvoicePrefixesRel exists)
							"InvoicePrefixMustBeUnique"

						if (!IsMonthToMonthRenewal)
							constraint (PaymentTiming entered)							
								"PaymentTimingRequired"											
				
							constraint (LeaseObligation.TransactionAmount entered)
								"CannotRelease;RunClassificationTest"

							if (ImplicitInterestRate not entered)
						        constraint (InterestRate entered)
									"LesseeDiscountRateOrImplicitInterestRateRequired"             
							
							if (InterestRate not entered)
						        constraint (ImplicitInterestRate entered)
									"LesseeDiscountRateOrImplicitInterestRateRequired"


						if (OriginalLease.LeaseClassification.Finance
						and !LeaseAccountingMethod.GASB87
						and !LeaseAccountingMethod.GASB96
						and !IsMonthToMonthRenewal)
							LocalAsset 							= first AssetsRel.Asset 
							LocalBook 							= first PostingAssetBookRel.Book
							LocalDeprCloseBeginDate				= BookCalendarRel.LastPeriodDate
							LocalDeprCloseBeginDate				= LocalDeprCloseBeginDate + 1 day
							LocalDeprCloseEndDate				= BookCalendarRel.CurrentPeriodDate
							if (BeginDate > LocalDeprCloseEndDate
							or BeginDate < LocalDeprCloseBeginDate) 						
								constraint (false)
									"CannotReleaseFinanceLeaseRenewal.BeginDateMustBeInTheCurrentDepreciationPeriod:<LocalDeprCloseBeginDate>To<LocalDeprCloseEndDate>"							

							constraint (DeferredRentAccount not entered)
								"CannotHaveDeferredAccountOnFinanceLease"
							constraint (AccruedAccount not entered)
								"CannotHaveAccrualAccountOnFinanceLease"
							constraint (LongTermOperatingLeaseExpense not entered)
								"CannotHaveOperatingLeaseExpenseAccountOnAFinanceLease"
							if (LeaseAllocationCodeType.DebtOrExpense
							or LeaseAllocationCode not entered)
								constraint (InterestAccount.GeneralLedgerChartAccount entered)
									"InterestAccountRequired"
							
							include CalculateTotalBookBasis
							if (LocalUseBaseCurrency)
								LocalRenewalROUAmount		= sum RenewalLeaseRenewalsRel.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount 
								LocalRenewalROUAmount		= LocalRenewalROUAmount + OriginalLease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
								constraint (LocalTotalBasis = LocalRenewalROUAmount)   
									"CannotRelease;BaseCurrencyRightOfUse<LocalRenewalROUAmount>NotEqualToTotalBasis<LocalTotalBasis>"							
							else
								LocalRenewalROUAmount		= sum RenewalLeaseRenewalsRel.DerivedInitialROUAssetAmount 
								LocalRenewalROUAmount		= LocalRenewalROUAmount + OriginalLease.DerivedInitialROUAssetAmount
								constraint (LocalTotalBasis = LocalRenewalROUAmount)   
									"CannotRelease;RightOfUse<LocalRenewalROUAmount>NotEqualToTotalBasis<LocalTotalBasis>"	


						if (LongTermOperatingLease)
							include OperatingLeaseReleaseRules

						if (IsMonthToMonthRenewal)
							LocalNumberOfPayments	= instance count of LeasePaymentDetailsNoECCDueDateRel
							constraint (LocalNumberOfPayments entered)
								"LeasePaymentDetailMustBeCreatedToReleaseTheRenewal"
							constraint (LocalNumberOfPayments= "1")
								"OnlyOneLeasePaymentRecordCanBeEnteredOnAMonthToMonthRenewal"
							constraint (InterestAccount not entered)
								"CannotHaveInterestAccountOnOperatingLease" 




							if (LeaseAllocationCode entered)
								constraint (LeaseAllocationCodeType entered)
									"AllocationCodeEntered;AllocationCodeTypeNeeded" 
								constraint (!LeaseAllocationCodeType.Interest)
									"CannotHaveInterestAccountOnOperatingLease" 															
							if (LeaseAllocationCodeType entered)
								constraint (LeaseAllocationCode entered)
									"AllocationCodeTypeEntered;AllocationCodeNeeded"														
					Exit Rules






		


								





						make transition to Released

				ClearDebtOrExpenseAccount is an Instance Action
					default label is "Clear"
					restricted
					valid when (DebtAccountEntered)
					Action Rules
						initialize DebtAccount											

				ClearShortTermLiabilityAccount is an Instance Action
					default label is "Clear"
					restricted
					valid when (ShortTermLiabilityAccountEntered)
					Action Rules
						initialize ShortTermLiabilityAccount

				ClearLongTermLiabilityAccount is an Instance Action
					default label is "Clear"
					restricted
					valid when (LongTermLiabilityAccountEntered)
					Action Rules
						initialize LongTermLiabilityAccount						

				ClearInterestAccount is an Instance Action
					default label is "Clear"
					restricted
					valid when (InterestAccountEntered)
					Action Rules
						initialize InterestAccount

				ClearDeferredRentAccount is an Instance Action
					default label is "Clear"
					restricted
					valid when (DeferredRentAccountEntered)
					Action Rules
						initialize DeferredRentAccount

				ClearAccruedAccount is an Instance Action
					default label is "Clear"
					restricted
					valid when (AccruedAccountEntered)
					Action Rules
						initialize AccruedAccount

				ClearLongTermOperatingLeaseExpenseAccount is an Instance Action
					default label is "Clear"
					restricted
					valid when (LongTermOperatingLeaseExpenseEntered)
					Action Rules
						initialize LongTermOperatingLeaseExpense

            Released is a State

				Renewal is an Instance Action
					valid when (AllowRenewal)
					Local Fields
						RenewalEndDate			is Date
						
					Parameters
						PrmRenewalLease			is like Lease
							default label is "RenewalLeaseName"
						PrmRenewalTerms        is Numeric size 2
							default label is "NumberOfRenewalOptions"
						RenewalTerm				is Numeric size 3
							default label is "RenewalTermInMonths"
						MonthToMonthRenewal		is Boolean
					
					Parameter Rules
						PrmRenewalTerms
							initial value is NumberOfExtensionOptions				
							if (!MonthToMonthRenewal)
								required 
									"MustEnterATermForTheRenewal"
							else
							if (MonthToMonthRenewal)
								force default to blank							 
							else
								constraint (PrmRenewalTerms not entered)
									"AMonthToMonthRenewalCannotHaveATerm"
							
						
						RenewalTerm
							initial value is LengthOfExtension
							if (!MonthToMonthRenewal)
								required 
									"MustEnterATermForTheRenewal"
							else
							if (MonthToMonthRenewal)
								force default to blank							 
							else
								constraint (RenewalTerm not entered)
									"AMonthToMonthRenewalCannotHaveATerm"
		
						PrmRenewalLease
							initial value is DerivedDefaultRenewalName
							default to DerivedDefaultRenewalName
							
					Action Rules
						initialize RenewalEndDate
						if (!IsARenewal)
							if (LeaseRenewalsRel not exist)
								RenewalNumber = "1"
							else
								RenewalNumber = instance count of LeaseRenewalsRel + 1
						else
							RenewalNumber = instance count of RenewalLeaseRenewalsRel + 1
							
						if (RenewalTerm entered
						and Lease.EndDate entered)
							RenewalEndDate			= Lease.EndDate + RenewalTerm as months
						
						invoke Unreleased.CreateRenewal
							fill in fields from this instance
								except invoked.Status
								except invoked.LeaseInvoicePrefix
								except invoked.LeaseClassification
								except invoked.NetPresentValue
								except invoked.LeaseObligation
								except invoked.LeaseROUAssetAmount
								except invoked.FirstPaymentDate


								except invoked.FairMarketValue
								except invoked.ExerciseExtension
								except invoked.GuaranteedAmount
								except invoked.IncentiveAmount
								except invoked.InitialDirectCost
								except invoked.InitialDirectCostVendor
								except invoked.DeferredRentBalance
							invoked.LeaseInvoicePrefix              = PrmRenewalLease
							if (IsARenewal)
								invoked.Lease					= PrmRenewalLease
								invoked.Description				= OriginalLease.Description +"-"+RenewalNumber
								invoked.OriginalLease			= OriginalLease
								if(Lease.ExerciseExtension)         
									invoked.NumberOfExtensionOptions          = PrmRenewalTerms - 2
								else
								if(MonthToMonthRenewal)             
									invoked.ExtensionOption         = false
								else                                
									invoked.NumberOfExtensionOptions          = PrmRenewalTerms - 1
								invoked.ExtensionOptionDate     = ExtensionOptionDate + RenewalTerm as months
							else
								invoked.Lease					= PrmRenewalLease
								invoked.Description				= Lease.Description +"-"+RenewalNumber
								invoked.OriginalLease			= Lease
								if(Lease.ExerciseExtension)         
									invoked.NumberOfExtensionOptions          = PrmRenewalTerms - 2
								else
								if(MonthToMonthRenewal)             
									invoked.ExtensionOption         = false
								else                                
									invoked.NumberOfExtensionOptions          = PrmRenewalTerms - 1
								invoked.ExtensionOptionDate     = ExtensionOptionDate + RenewalTerm as months
							if (Lease.EndDate entered)
								invoked.BeginDate			= Lease.EndDate + 1 day
							else
								invoked.BeginDate			= blank
							if(Lease.NumberOfExtensionOptions = 1)
								invoked.ExtensionOption    = false		
							invoked.EndDate					= RenewalEndDate
							invoked.PaymentsPerYear			= "12"
							if (MonthToMonthRenewal)
								invoked.LeaseClassification	= "O"
								invoked.InterestAccount					= blank
								invoked.DebtAccount						= blank
								invoked.DeferredRentAccount				= blank
								invoked.LeaseTerm						= blank
								invoked.Term							= blank
							else
								invoked.LeaseTerm						= RenewalTerm
								if (ExerciseExtension)
									invoked.Term 						= RenewalTerm + LengthOfExtension
								else
									invoked.Term 						= RenewalTerm
								
				Update is an Update Action
					restricted
					Exit Rules
						include EditsForAllocationCodeAndAllocationCodeType
						include CalculateLeaseTerm

				UpdateDeferredRentBalance is an Instance Action
					restricted
					Parameters
						PrmDeferredRentBalance	 is an InternationalAmount

					Action Rules
						DeferredRentBalance += PrmDeferredRentBalance
					
				Unrelease is an Instance Action
					valid when (AllowUnrelease)
					Entrance Rules
						invoke RestrictedUpdate last ZeroPaymentDetailsRel
							invoked.Released = false
						constraint (!LeaseInvoicesRel exists)
							"CannotUnrelease;PaymentsHaveBeenMade"
						constraint (!ReleasedLeasePaymentDetailsRel exists)
							"CannotUnrelease;PaymentsHaveBeenMade"
					Exit Rules




						make transition to Unreleased

                UpdateNetChangeNetPresentValueFromBatch is an Instance Action
                    restricted















				Close is an Instance Action	
					valid when (AllowLeaseClose)
					Parameters
						CloseDate 			is Date
							default label is "CloseDate"
						CreateTermRenewal 	is Boolean
						PrmRenewalTerms     is Numeric size 2
							default label is "NumberOfRenewalOptions"
						RenewalTerm			is Numeric size 3
						PrmRenewalLease		is like Lease
							default label is "RenewalLeaseName"
						MonthToMonthRenewal	is Boolean

					Parameter Rules 
						CloseDate
							required 
								"MustEnterCloseDateWhenClosingALease"	
							constraint (CloseDate >= EndDate)
								"YouCanNotCloseALeaseBeforeItsScheduledEndDate;ConsiderTerminatingTheLease"
						PrmRenewalLease
							initial value is DerivedDefaultRenewalName
							default to DerivedDefaultRenewalName
							
						RenewalTerm
							initial value is LengthOfExtension

						PrmRenewalTerms
							initial value is NumberOfExtensionOptions

					Local Fields
						

					Entrance Rules
			    		if (IsARenewal) 
			    			LocalCloseLease		= OriginalLease  
			    		else
			    			LocalCloseLease		= Lease 
			    		
			    		if (ExtensionOption and !HasChild)
			    			if (!IsMonthToMonthRenewal and !CreateTermRenewal)					
								confirmation required
									"LeaseHasARenewalOption;RenewalCannotBeCreatedAfterLeaseIsClosed"
							else
								if (!CreateTermRenewal)
									confirmation required
										"LeaseHasARenewalOption;RenewalCannotBeCreatedAfterLeaseIsClosed"									
					Action Rules
						TerminateDate = CloseDate
						if (IsMonthToMonthRenewal)
							EndDate = CloseDate

						constraint (NonClosedSubleaseRel not exists)
							"AllSubleasesMustBeClosedBeforeYouCanCloseTheLease"
							
						constraint (LeaseInvoicesAfterCloseDateRel not exists) 
							"CloseDateCannotBeLessThanLeaseInvoiceDueDate" 				
			
						constraint (NonHistoricalUnpostedInvoicesRel not exists)
							"UnpostedInvoiceRecordsExist;MustProcessThemFirst"

						constraint (UnreleasedLeasePaymentDetailsRel not exists)
							"ScheduledPaymentsExist;MustProcessThemFirst"

						if (DeferredRentAccount entered 
						and DeferredRentBalance entered)
							include DefferedRentExpenseJournalEntry
							
					Exit Rules
				 		if (CreateTermRenewal)
				 			invoke Renewal
				 				invoked.RenewalTerm 		= RenewalTerm
								invoked.PrmRenewalTerms     = PrmRenewalTerms 
				 				invoked.PrmRenewalLease		= PrmRenewalLease
				 				invoked.MonthToMonthRenewal	= false
				 			
				 		LocalBeginDate = CloseDate + 1 day
						if (AssetsRel exists
						and UnreleasedLeaseRenewalsRel exists)
							for each AssetsRel
								invoke Released.NoEditUpdate each
									invoked.AssetLease.Lease = first UnreleasedLeaseRenewalsRel.Lease
									
						make transition to Closed

				Terminate is an Instance Action
				 	valid when (TerminationOption)
				 	Parameters
						PrmTerminateDate 				is Date
							default label is "TerminationDate"
								
					Parameter Rules
						PrmTerminateDate
							required
								"TerminationDateIsRequired"
							if (ExerciseTermination)
								constraint (!PrmTerminateDate > EndDate)
									"TerminationDateCannotBeGreaterThanScheduledEndDate;ConsiderClosingTheLease"
							else
								constraint (PrmTerminateDate < EndDate)
									"TerminationDateHasToBeBeforeItsScheduledEndDate;ConsiderClosingTheLease"

					Local Fields
						LocalAccumulatedTerminationFee	is an InternationalAmount
						LocalLeaseAllocationCodeDetail	is Numeric 6 
				
				 	Action Rules
				 		TerminateDate = PrmTerminateDate
						
						constraint (NonClosedSubleaseRel not exists)
							"AllSubleasesMustBeClosedBeforeYouCanTerminateTheLease"
							
						constraint (LeaseInvoicesAfterTerminateDateRel not exists) 
							"TerminationDateMustBeAfterAllLeaseInvoiceDueDates" 				
			
						constraint (UnpostedInvoicesBeforeTerminationRel not exists)
							"UnpostedInvoicesExistBeforeTerminationDate;MustProcessThemFirst"				
					
						constraint (UnreleasedLeasePaymentDetailsBeforeTerminationRel not exists)
							"ScheduledPaymentsExistBeforeOrOnTheTerminationDate;MustProcessThemFirst"



	
						if (DeferredRentAccount entered
						and DeferredRentBalance entered)
							include DefferedRentExpenseJournalEntry

						LocalTerminateDate = PrmTerminateDate
						if ((LeaseClassification.Finance
						and (!ShortTermGASBLease
						or   !ShortTermIFRS))
						or LongTermOperatingLease)
							include TerminationGainLossJournalEntry
						

						





						 	
						make transition to Termination

				Deactivate is an Instance Action
				 	Parameters
						InactivateDate is Date
					
					Parameter Rules
						InactivateDate
							required 
								"MustEnterDeactivationDateWhenInactivatingALease"	
							
							constraint (InactivateDate < EndDate)
								"DeactivateDateHasToBeBeforeItsScheduledEndDate;ConsiderClosingTheLease"
				 	
				 	Action Rules
				 		DeactivateDate = InactivateDate
						 
						include IsValidLeaseForDeactivation
				 		
						constraint (UnreleasedPaymentDetailsBeforeDeactivateDateRel not exists)
							"ScheduledPaymentsExist;MustProcessThemFirst"		
								
						for each ReleasedPaymentDetailsAfterDeactivateDateRel
							invoke TerminatePayment each
										
						if (LeaseClassification.Finance
						and (!ShortTermGASBLease
						or   !ShortTermIFRS))
							for each AssetsRel
								invoke Released.NoEditUpdate each
									invoked.AssetCategory = "N" 

						make transition to Deactivated

				Impairment is an Instance Action
					restricted	
					valid when (ImpairmentAllowed)
						
					Parameters
						PrmImpairmentAmount			is an InternationalAmount 
						PrmImpairmentDate			is Date
						PrmEffectiveDate			is Date
						PrmImpairmentAccount		is a FinanceCodeBlockFull
						PrmDescription				is a Description
					
					Parameter Rules
						PrmImpairmentDate
							required
								"ImpairmentDateIsRequired"

						PrmImpairmentAmount
							required
								"ImpairmentAmountIsRequired"
					Local Fields


						LocalLastImpairmentDate		is Date
						LocalDeprCloseEndDate		is Date
						LocalDeprCloseBeginDate		is Date
						LocalNumDeprClose			is Numeric size 2
					Action Rules
						if (first LeasePaymentDetailsNoECCDueDateRel.DueDate day != PrmImpairmentDate day)


							for each LeasePaymentDetailsNoECCDueDateRel
								if (each.DueDate month 	= PrmImpairmentDate month
								and each.DueDate year 	= PrmImpairmentDate year)
									LocalEffectiveDate 	= each.DueDate

							PrmEffectiveDate	= LocalEffectiveDate
						else
							PrmEffectiveDate	= PrmImpairmentDate
						if (HasLeaseImpairments)
							LocalLastImpairmentDate	= last LeaseImpairmentRel.EffectiveDate
							constraint (PrmEffectiveDate > LocalLastImpairmentDate)
								"ImpairmentDateMustBeInAGreaterPeriodThanThePreviousImpairment"
						constraint (PrmEffectiveDate < EndDate)
							"ImpairmentDateCannotBeGreaterThanLeaseEndDate<EndDate>"						
								
						if (LeaseClassification.Finance
						and LeaseCategory.Depreciable)
							LocalAsset 							= first AssetsRel.Asset 
							LocalBook 							= first PostingAssetBookRel.Book
							if (PrmEffectiveDate < BookCalendarRel.YearBeginDate)
								constraint (false)
									"ImpairmentDateMustBeInCurrentYearForFinanceLeaseImpairment"
							if (BookCalendarRel.NumberOfPeriodCloseRuns not entered)
								constraint (false)
									"DepreciationMustBeRanForImpairmentDatePeriod"							
							LocalDeprCloseEndDate				= BookCalendarRel.LastPeriodDate
							LocalNumDeprClose					= BookCalendarRel.LastPeriodEnd
							LocalNumDeprClose					= LocalNumDeprClose - 1
							if (LocalNumDeprClose = 0)
								LocalDeprCloseBeginDate			= BookCalendarRel.YearBeginDate
							else
								if (LocalNumDeprClose < 0) 
									LocalNumDeprClose			= BookCalendarRel.DepreciationPeriodsPerYear
									LocalNumDeprClose			= LocalNumDeprClose - 1
									LocalDeprCloseBeginDate		= BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalNumDeprClose]
									LocalDeprCloseBeginDate		= LocalDeprCloseBeginDate - 1 year
								else
									LocalDeprCloseBeginDate		= BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalNumDeprClose]
								LocalDeprCloseBeginDate			= LocalDeprCloseBeginDate + 1 day
							if (PrmEffectiveDate > LocalDeprCloseEndDate
							or PrmEffectiveDate < LocalDeprCloseBeginDate) 						
								constraint (false)
									"ImpairmentDateMustBeInTheSamePeriodAsTheLastDepreciationPeriod:<LocalDeprCloseBeginDate>To<LocalDeprCloseEndDate>"

						invoke Create Unreleased LeaseImpairment
							invoked.Company												= Company 
							invoked.Lease												= Lease
							invoked.Vendor												= Lessor
							invoked.ImpairmentDate										= PrmImpairmentDate
							invoked.EffectiveDate										= PrmEffectiveDate
							invoked.Description											= PrmDescription
							invoked.ImpairmentAmount.TransactionAmount					= PrmImpairmentAmount


							invoked.ImpairmentAccount									= PrmImpairmentAccount
							
					Exit Rules				





		





						make transition to Impairment

				LeaseAdjustments is an Instance Action
					valid when (AdjustmentAllowed)
						
					Parameters
						PrmAdjustmentAmount			is an InternationalAmount 
						PrmAdjustmentDate			is Date
						PrmAdjustmentEffectiveDate	is Date
						PrmAdjustmentAccount		is a FinanceCodeBlockFull
						PrmAdjustmentDescription	is a Description
						PrmReasoncode               is a LeaseAdjustmentReasonCode
						PrmCreateNewIDC 			is Boolean 
						PrmInitialDirectCost		is like LeaseInitialDirectCost
						PrmVendor					is a Vendor
						PrmIDCAmount				is an InternationalAmount
					Parameter Rules
						PrmAdjustmentDate
							required
								"AdjustmentDateIsRequired"

						PrmAdjustmentAmount
							required
								"AdjustmentAmountIsRequired"
					Local Fields
						LocalAdjustmentEffectiveDate	is Date
						LocalLastAdjustmentDate		is Date
						LocalDeprCloseEndDate		is Date
						LocalDeprCloseBeginDate		is Date
						LocalNumDeprClose			is Numeric size 2
					Action Rules
						if (first LeasePaymentDetailsNoECCDueDateRel.DueDate day != PrmAdjustmentDate day)
							for each LeasePaymentDetailsNoECCDueDateRel
								if (each.DueDate month 	= PrmAdjustmentDate month
								and each.DueDate year 	= PrmAdjustmentDate year)
									LocalAdjustmentEffectiveDate 	= each.DueDate
							PrmAdjustmentEffectiveDate	= LocalAdjustmentEffectiveDate
						else
							PrmAdjustmentEffectiveDate	= PrmAdjustmentDate
						if (HasLeaseAdjustments)
							LocalLastAdjustmentDate	= last LeaseAdjustmentRel.EffectiveDate
							constraint (PrmAdjustmentEffectiveDate > LocalLastAdjustmentDate)
								"AdjustmentDateMustBeInAGreaterPeriodThanThePreviousAdjustment"
						constraint (PrmAdjustmentEffectiveDate < EndDate)
							"AdjustmentDateCannotBeGreaterThanLeaseEndDate<EndDate>"						
								
						if (LeaseClassification.Finance
						and LeaseCategory.Depreciable)
							LocalAsset 							= first AssetsRel.Asset 
							LocalBook 							= first PostingAssetBookRel.Book
							if (PrmAdjustmentEffectiveDate < BookCalendarRel.YearBeginDate)
								constraint (false)
									"AdjustmentDateMustBeInCurrentYearForFinanceLeaseAdjustment"
							if (BookCalendarRel.NumberOfPeriodCloseRuns not entered)
								constraint (false)
									"DepreciationMustBeRanForAdjustmentDatePeriod"							
							LocalDeprCloseEndDate				= BookCalendarRel.LastPeriodDate
							LocalNumDeprClose					= BookCalendarRel.LastPeriodEnd
							LocalNumDeprClose					= LocalNumDeprClose - 1
							if (LocalNumDeprClose = 0)
								LocalDeprCloseBeginDate			= BookCalendarRel.YearBeginDate
							else
								if (LocalNumDeprClose < 0) 
									LocalNumDeprClose			= BookCalendarRel.DepreciationPeriodsPerYear
									LocalNumDeprClose			= LocalNumDeprClose - 1
									LocalDeprCloseBeginDate		= BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalNumDeprClose]
									LocalDeprCloseBeginDate		= LocalDeprCloseBeginDate - 1 year
								else
									LocalDeprCloseBeginDate		= BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalNumDeprClose]
								LocalDeprCloseBeginDate			= LocalDeprCloseBeginDate + 1 day
							if (PrmAdjustmentEffectiveDate > LocalDeprCloseEndDate
							or PrmAdjustmentEffectiveDate < LocalDeprCloseBeginDate) 						
								constraint (false)
									"AdjustmentDateMustBeInTheSamePeriodAsTheLastDepreciationPeriod:<LocalDeprCloseBeginDate>To<LocalDeprCloseEndDate>"

						invoke Create Unreleased LeaseAdjustment
							invoked.Company												= Company 
							invoked.Lease												= Lease
							invoked.Vendor												= Lessor
							invoked.AdjustmentDate										= PrmAdjustmentDate 
							invoked.EffectiveDate										= PrmAdjustmentEffectiveDate
							invoked.Description											= PrmAdjustmentDescription
							invoked.AdjustmentAmount.TransactionAmount					= PrmAdjustmentAmount * -1
							invoked.AdjustmentAccount									= PrmAdjustmentAccount
							invoked.LeaseReasonCode                          			= PrmReasoncode
							invoked.IDCAmount.TransactionAmount							= PrmIDCAmount * -1

						if (PrmCreateNewIDC)
							invoke Create LeaseInitialDirectCost
								invoked.Company						= Company
								invoked.Lease						= Lease
								invoked.LeaseInitialDirectCost 		= PrmInitialDirectCost
								invoked.Vendor						= PrmVendor
								invoked.Amount						= PrmIDCAmount
								invoked.IDCDate 					= PrmAdjustmentDate
					Exit Rules				
						make transition to LeaseAdjustments

				CreatePaymentDetailForRenewal is an Instance Action
					restricted
					Action Rules
						if(IsMonthToMonthRenewal)
							LocalFirstDueDate = first LeasePaymentDetailsRel.DueDate
							for each LeasePaymentDetailsFirstDueDateRel
								invoke Create LeasePaymentDetail
									fill in fields from each
										except invoked.DueDate
									invoked.DueDate = each.DueDate + 1 month

            Closed is a State



            
            Deactivated is a State

            Termination is a State

				ResetTermination is an Instance Action
					valid when (Status.Termination)

					Local Fields

						
					Action Rules

						invoke Purge UnpostedLeaseTransactionRel
												
						make transition to Released

				ReleaseTermination is an Instance Action 
					valid when (Status.Termination)
					confirmation required
						"AreYouSureYouWantToCompleteThisTermination?ItCannotBeReversedOnceCompleted."					

					Local Fields
						LocalAccumulatedTerminationFee	is an InternationalAmount
						LocalLeaseAllocationCodeDetail	is Numeric 6 

					Action Rules
						for each UnreleasedPaymentDetailsAfterTerminateDateRel
							invoke TerminatePayment each
						
						if (TerminationFee entered)
							include CreateTerminationFeeInvoice
						
						if (LeaseClassification.Finance
						and (!ShortTermGASBLease
						or   !ShortTermIFRS))
							for each AssetsRel
								invoke Released.NoEditUpdate each
									invoked.AssetCategory = "N" 

						invoke JournalizeSet LeaseTransaction
							invoked.PrmCompany		= Company
							invoked.PrmLease		= Lease
							invoked.PrmProcess		= "TRM"
							invoked.PrmDescription	= "LeaseTerminationPosting"

						make transition to Terminated

			Terminated is a State

			Modify is a State
				RecalculateAmortization is an Instance Action
					valid when (MustRecalculateAmortization)
					Action Rules


						if (EmptyFiscalYearAndPeriodPaymentDetailRel exists)
							include SetFiscalYearAndPeriodForPaymentDetail	
						LocalProcess = "N"
						include FAS13Test
						if (LongTermOperatingLease
						or LeaseClassification.Finance
						and (!ShortTermGASBLease
						or   !ShortTermIFRS))
							include UpdateNetChangeNetPresentValueRules

	                	initialize NetPresentValue.BaseAmount.EnteredCurrencyAmount
						initialize NetPresentValue.BaseAmount.EnteredCurrencyRate
						if (FAS13NetPresentValue != NetPresentValue.TransactionAmount
						or  NetPresentValue.BaseAmount.EnteredCurrencyAmount not entered)
							NetPresentValue.TransactionAmount					= RoundedTransactionAmount
	              			NetPresentValue.BaseAmount.ToCurrency				= Company.Currency
	              			NetPresentValue.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate
							NetPresentValue.BaseAmount.EnteredCurrencyAmount	= NetPresentValue.BaseAmount.OutputCurrencyAmount
						
	                	initialize LeaseObligation.BaseAmount.EnteredCurrencyAmount
						initialize LeaseObligation.BaseAmount.EnteredCurrencyRate  
						
						if (FAS13LeaseObligation != LeaseObligation.TransactionAmount
						or  LeaseObligation.BaseAmount.EnteredCurrencyAmount not entered)
							LeaseObligation.TransactionAmount	 				= RoundedObligationTransactionAmount   
	              			LeaseObligation.BaseAmount.ToCurrency				= Company.Currency
	              			LeaseObligation.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
							LeaseObligation.BaseAmount.EnteredCurrencyAmount	= LeaseObligation.BaseAmount.OutputCurrencyAmount
						
	                	initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
						initialize LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate  
						
						if (LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount not entered)
							LeaseROUAssetAmount.TransactionAmount	 				= RoundedTransactionAmount    
	              			LeaseROUAssetAmount.BaseAmount.ToCurrency				= Company.Currency
	              			LeaseROUAssetAmount.BaseAmount.EnteredCurrencyRate		= BaseCurrencyRate						
							LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount	= LeaseROUAssetAmount.BaseAmount.OutputCurrencyAmount
						ImplicitInterestRate	= FAS13ImplicitInterestRate
				
						invoke ModificationStraightLineUpdate first LeasePayment set
							invoked.PrmLeaseROUAssetAmount	= LeaseROUAssetAmount.TransactionAmount
							invoked.PrmLeaseObligation		= LeaseObligation.TransactionAmount
						invoke RestrictedUpdate first ModificationInProgressRel
							invoked.NetPresentValue			= NetPresentValue			
							invoked.LeaseObligation			= LeaseObligation					
							invoked.ROUAssetAmount			= LeaseROUAssetAmount
						invoke RecreateAmortizationSchedule			

				RecreateAmortizationSchedule is an Instance Action
					restricted
					Action Rules
						initialize LocalModificationDate

						LocalModificationDate	= first ModificationInProgressRel.DerivedModificationPeriodDate


						invoke Purge LeaseCurrencyPaymentPeriodBalanceAfterModificationDateRel
						invoke Purge LeasePaymentPeriodBalanceAfterModificationDateRel 


						invoke Purge LeaseCurrencyPaymentBalanceAfterModificationDateRel
						invoke Purge LeasePaymentBalanceAfterModificationDateRel
						
					Exit Rules
						include CreateModificationLeasePaymentBalance
						include CreateModificationLeaseCurrencyPaymentBalance
				
						invoke RestrictedUpdate Unreleased first ModificationInProgressRel
							invoked.AmortizationRecalculated = true
							
				ResetModification is an Instance Action
					confirmation required
						"AreYouSureYouWantToResetThePendingLeaseModification?"

					Action Rules
						Term = first ModificationInProgressRel.OriginalTerm
						LeaseTerm = first ModificationInProgressRel.OriginalTerm
						ImplicitInterestRate = first ModificationInProgressRel.OriginalImplicitInterestRate
						if (DefaultLeaseInterestRate)		
							LeaseRateTable = first ModificationInProgressRel.OriginalLeaseRateTable
							InterestRate = first ModificationInProgressRel.OriginalImplicitInterestRate
						EndDate = first ModificationInProgressRel.OriginalEndDate
						NetPresentValue = first ModificationInProgressRel.OriginalNetPresentValue
						LeaseObligation = first ModificationInProgressRel.OriginalLeaseObligation
						LeaseROUAssetAmount = first ModificationInProgressRel.OriginalROUAssetAmount
						BargainPurchaseAmount.TransactionAmount = ModificationInProgressRel.OriginalBargainPurchaseAmount
						GuaranteedAmount.TransactionAmount = ModificationInProgressRel.OriginalGuaranteedResidualAmount




						for each LeaseModificationPaymentDetailByDueDateRel
							invoke ResetModification each
						
						invoke Purge PurgeLeaseCurrencyPaymentBalanceRel 
						invoke Purge PurgeLeasePaymentBalanceRel
												
						if(LeaseIncentiveRel exists)
							invoke Purge PurgeLeaseIncentiveRel
							for each LeaseModificationIncentiveRel
								invoke ResetModification each
							invoke Purge PurgeLeaseModificationIncentiveRel

						for each LeaseModificationPaymentBalanceRel
							invoke ResetModification each 
						
						for each LeaseModificationCurrencyPaymentBalanceRel
							invoke ResetModification each 
						
						if (ModificationInProgressRel.ModifyFundSplit)
							for each LeaseFund set
								invoke ResetModification each

						for each LeaseModificationFundRel
							invoke ResetModification each
												
						invoke Purge Unreleased ModificationInProgressRel
						
						make transition to Released
							 
            	ReleaseModification is an Instance Action
					valid when (CanReleaseModification)



						
					Action Rules
						LocalTwoTimesTheTerm		= Term * 2
						LocalTwoTimesTheTerm		= LocalTwoTimesTheTerm /100					
						if (ModificationInProgressRel.ModifyFundSplit)
							constraint (WholeNumberTotalPercent = "100")
								"LeaseFundsPercentTotalMustBe100%ToReleaseLease"

							for each AssetsRel
								LocalAsset = each.Asset
								for each each.AssetFundsRel
									invoke Delete each

								for each LeaseFundsRel
									invoke Create AssetFund
										invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
										invoked.Asset 					= LocalAsset
										invoked.AccountingEntity		= each.AccountingEntity
										invoked.AccountingUnit			= each.AccountingUnit
										invoked.Project					= each.Project									
										invoked.FinanceDimension1		= each.FinanceDimension1
										invoked.FinanceDimension2		= each.FinanceDimension2
										invoked.FinanceDimension3		= each.FinanceDimension3
										invoked.FinanceDimension4		= each.FinanceDimension4
										invoked.FinanceDimension5		= each.FinanceDimension5
										invoked.FinanceDimension6		= each.FinanceDimension6
										invoked.FinanceDimension7		= each.FinanceDimension7
										invoked.FinanceDimension8		= each.FinanceDimension8
										invoked.FinanceDimension9		= each.FinanceDimension9
										invoked.FinanceDimension10		= each.FinanceDimension10			
										invoked.PercentContribution		= each.PercentContribution									

						include CommonRulesForReleaseActions
						if (TerminationNonLeaseComponent entered)
							constraint (TerminationLeaseExecutoryCostCodeRel exists)
								"NonLeaseComponentIsNotAssignedToThisLease"
						constraint (!PostReleaseAssetsRel exists)
							"CannotRelease;AssetStatusIsAdjustmentInProgress"
						if (LeaseClassification.Finance
						and (!ShortTermGASBLease
						or   !ShortTermIFRS))
							initialize LocalTotalBasis
							for each AssetsRel  
								LocalAsset = each.Asset
								constraint (each.Asset.Status.Released)
									"AssetStatusMustBeReleased"
								for each PostingAssetBookRel
									LocalTotalBasis += each.BookValue


						if (ModificationInProgressRel.ModifyFundSplit)
							if (LocalUseBaseCurrency)
								LocalAssetAdjustment = BaseAssetAdjustmentAfterModification
							else
								LocalAssetAdjustment = AssetAdjustmentAfterModification

							if (LocalAssetAdjustment < "0")
								LocalAssetAdjustment = LocalAssetAdjustment * -1

							LocalTwoTimesTheTerm		= Term * 2
							LocalTwoTimesTheTerm		= LocalTwoTimesTheTerm /100
							if (LocalAssetAdjustment > LocalTwoTimesTheTerm)			


								if (LocalUseBaseCurrency)
									round LocalTotalBasis to nearest DerivedBaseRoundTo

									LocalBaseCurrencyTolerance	 = LocalTotalBasis - LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
									if (LocalBaseCurrencyTolerance < 0)
										LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
									if (LocalBaseCurrencyTolerance < 1
									and !LocalBaseCurrencyTolerance = 0)
										confirmation required
											"Warning;AssetBookValue<LocalTotalBasis>AndLeaseROUAfterModificationIs<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
									else
										constraint (LocalTotalBasis = LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount)   
											"CannotRelease;AssetBookValue<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>"								
								else
									round LocalTotalBasis to nearest DerivedRoundTo

									LocalBaseCurrencyTolerance	 = LocalTotalBasis - LeaseROUAssetAmount.TransactionAmount
									if (LocalBaseCurrencyTolerance < 0)
										LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
									if (LocalBaseCurrencyTolerance < 1
									and !LocalBaseCurrencyTolerance = 0)
										confirmation required
											"Warning;AssetBookValue<LocalTotalBasis>AndLeaseROUAfterModificationIs<LeaseROUAssetAmount.TransactionAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
									else
										constraint (LocalTotalBasis = LeaseROUAssetAmount.TransactionAmount)   
											"CannotRelease;AssetBookValue<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<LeaseROUAssetAmount.TransactionAmount>"
						else
							if (LeaseClassification.Finance
							and LeaseCategory.Depreciable)						
								if (LocalUseBaseCurrency)
									round LocalTotalBasis to nearest DerivedBaseRoundTo

									LocalBaseCurrencyTolerance	 = LocalTotalBasis - LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
									if (LocalBaseCurrencyTolerance < 0)
										LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
									if (LocalBaseCurrencyTolerance < 1
									and !LocalBaseCurrencyTolerance = 0)
										confirmation required
											"Warning;AssetBookValue<LocalTotalBasis>AndLeaseROUAfterModificationIs<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
									else
										constraint (LocalTotalBasis = LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount)   
											"CannotRelease;AssetBookValue<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>"							
								else
									round LocalTotalBasis to nearest DerivedRoundTo

									LocalBaseCurrencyTolerance	 = LocalTotalBasis - LeaseROUAssetAmount.TransactionAmount
									if (LocalBaseCurrencyTolerance < 0)
										LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
									if (LocalBaseCurrencyTolerance < 1
									and !LocalBaseCurrencyTolerance = 0)
										confirmation required
											"Warning;AssetBookValue<LocalTotalBasis>AndLeaseROUAfterModificationIs<LeaseROUAssetAmount.TransactionAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
									else
										constraint (LocalTotalBasis = LeaseROUAssetAmount.TransactionAmount)   
											"CannotRelease;AssetBookValue<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<LeaseROUAssetAmount.TransactionAmount>"	
							else

								if (LocalUseBaseCurrency)
									round LocalTotalBasis to nearest DerivedBaseRoundTo

									LocalBaseCurrencyTolerance	 	= LocalTotalBasis - LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
									if (LocalBaseCurrencyTolerance < 0)
										LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
									if (LocalBaseCurrencyTolerance < 1
									and !LocalBaseCurrencyTolerance = 0)
										confirmation required
											"Warning;AssetBasis<LocalTotalBasis>AndLeaseROUAfterModificationIs<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
									else
										constraint (LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount = LocalTotalBasis)   
											"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheBasisAfterModification<LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount>"							
								else
									round LocalTotalBasis to nearest DerivedRoundTo

									LocalBaseCurrencyTolerance	 	= LocalTotalBasis - LeaseROUAssetAmount.TransactionAmount
									if (LocalBaseCurrencyTolerance < 0)
										LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
									if (LocalBaseCurrencyTolerance < 1
									and !LocalBaseCurrencyTolerance = 0)
										confirmation required
											"Warning;AssetBasis<LocalTotalBasis>AndLeaseROUAfterModificationIs<LeaseROUAssetAmount.TransactionAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
									else
										constraint (LeaseROUAssetAmount.TransactionAmount = LocalTotalBasis)   
											"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheBasisAfterModification<LeaseROUAssetAmount.TransactionAmount>"	
						
						if (ModificationInProgressRel.PartialTermination
						and (ModificationInProgressRel.TerminatedAssetValue != 0 
						or   ModificationInProgressRel.TerminatedPercent != 0))
							include PartialTerminationGainLossJournalEntry
							
							invoke JournalizeSet LeaseTransaction
								invoked.PrmCompany		= Company
								invoked.PrmLease		= Lease
								invoked.PrmProcess		= "TRM"
								invoked.PrmDescription	= "LeaseTerminationPosting"

	  					invoke Update Unreleased ModificationInProgressRel
	  						invoked.ModificationAmount.TransactionAmount = AssetAdjustmentAfterModification
	  						invoked.ModificationAmount.BaseAmount.EnteredCurrencyAmount = BaseAssetAdjustmentAfterModification

						invoke Release LeaseModificationFundRel	
	  					invoke Release Unreleased ModificationInProgressRel
	  					make transition to Released
           		
			Impairment is a State
				ReleaseImpairment is an Instance Action
					Action Rules


						include CalculateTotalBookBasis
						initialize LocalTotalBasis
						for each AssetsRel
							LocalAsset		= each.Asset
							constraint (each.Asset.Status.Released)
								"CannotRelease;AssetStatusMustBeReleased"
							for each PostingAssetBookRel
								LocalTotalBasis += each.BookValue  
						if (LeaseClassification.Finance
						and LeaseCategory.Depreciable)						
							if (LocalUseBaseCurrency)
								include CalculateImpairmentROUBaseAmounts
								round LocalTotalBasis to nearest DerivedBaseRoundTo

								LocalBaseCurrencyTolerance	 = LocalTotalBasis - ImpairmentInProgressRel.ImpairmentROUBalance.BaseAmount.EnteredCurrencyAmount
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBasis<LocalTotalBasis>AndTotalLeaseROUIs<LocalImpairmentROUBaseAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalTotalBasis = LocalImpairmentROUBaseAmount)   
										"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<LocalImpairmentROUBaseAmount>"							
							else
								round LocalTotalBasis to nearest DerivedRoundTo

								LocalBaseCurrencyTolerance	 = LocalTotalBasis - ImpairmentInProgressRel.ImpairmentROUBalance.TransactionAmount
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBasis<LocalTotalBasis>AndTotalLeaseROUIs<first ImpairmentInProgressRel.ImpairmentROUBalance.TransactionAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalTotalBasis = ImpairmentInProgressRel.ImpairmentROUBalance.TransactionAmount)   
										"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<first ImpairmentInProgressRel.ImpairmentROUBalance.TransactionAmount>"	
						else

							if (LocalUseBaseCurrency)
								for each LeaseImpairmentRel
									LocalTotalImpairmentAmount	+= each.ImpairmentAmount.BaseAmount.EnteredCurrencyAmount
								LocalROUAfterImpairment			= LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount - LocalTotalImpairmentAmount
								round LocalTotalBasis to nearest DerivedBaseRoundTo
								round LocalROUAfterImpairment to nearest DerivedBaseRoundTo

								LocalBaseCurrencyTolerance	 	= LocalTotalBasis - LocalROUAfterImpairment
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBasis<LocalTotalBasis>AndTotalLeaseROUIs<first ImpairmentInProgressRel.ImpairmentROUBalance.BaseAmount.EnteredCurrencyAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalROUAfterImpairment = LocalTotalBasis)   
										"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheBasisAfterImpairment<LocalROUAfterImpairment>"							
							else
								for each LeaseImpairmentRel
									LocalTotalImpairmentAmount	+= each.ImpairmentAmount.TransactionAmount
								LocalROUAfterImpairment			= LeaseROUAssetAmount.TransactionAmount - LocalTotalImpairmentAmount
								round LocalTotalBasis to nearest DerivedRoundTo
								round LocalROUAfterImpairment to nearest DerivedBaseRoundTo

								LocalBaseCurrencyTolerance	 	= LocalTotalBasis - LocalTotalImpairmentAmount
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBasis<LocalTotalBasis>AndTotalLeaseROUIs<first ImpairmentInProgressRel.ImpairmentROUBalance.TransactionAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalROUAfterImpairment = LocalTotalBasis)   
										"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheBasisAfterImpairment<LocalROUAfterImpairment>"	







						invoke Release Unreleased ImpairmentInProgressRel
					
						make transition to Released
						
				ResetImpairment is an Instance Action
					confirmation required
						"AreYouSureYouWantToResetThePendingLeaseImpairment?"
					Local Fields
						
					Action Rules
						if (ImpairmentInProgressRel exist)
							LocalImpairmentDate		= ImpairmentInProgressRel.ImpairmentDate					
							LocalEffectiveDate		= ImpairmentInProgressRel.EffectiveDate
						invoke ResetROUForImpairment first LeasePaymentBalanceAfterImpairmentRel

						invoke ResetROUForImpairment first LeaseCurrencyPaymentBalanceAfterImpairmentRel
						
						invoke Purge UnpostedLeaseTransactionRel
						invoke Purge Unreleased ImpairmentInProgressRel
						
						make transition to Released

			LeaseAdjustments is a State
				ReleaseAdjustment is an Instance Action
					Action Rules
						include CalculateTotalBookBasis
						initialize LocalTotalBasis
						for each AssetsRel
							LocalAsset		= each.Asset
							constraint (each.Asset.Status.Released)
								"CannotRelease;AssetStatusMustBeReleased"
							for each PostingAssetBookRel
								LocalTotalBasis += each.BookValue  
						if (LeaseClassification.Finance
						and LeaseCategory.Depreciable)						
							if (LocalUseBaseCurrency)
								include CalculateAdjustmentROUBaseAmounts
								round LocalTotalBasis to nearest DerivedBaseRoundTo

								LocalBaseCurrencyTolerance	 = LocalTotalBasis - AdjustmentInProgressRel.AdjustmentROUBalance.BaseAmount.EnteredCurrencyAmount
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBookValue<LocalTotalBasis>AndTotalLeaseROUIs<LocalAdjustmentROUBaseAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalTotalBasis = LocalAdjustmentROUBaseAmount)   
										"CannotRelease;AssetBookValue<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<LocalAdjustmentROUBaseAmount>"							
							else
								round LocalTotalBasis to nearest DerivedRoundTo

								LocalBaseCurrencyTolerance	 = LocalTotalBasis - AdjustmentInProgressRel.AdjustmentROUBalance.TransactionAmount
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBookValue<LocalTotalBasis>AndTotalLeaseROUIs<first AdjustmentInProgressRel.AdjustmentROUBalance.TransactionAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalTotalBasis = AdjustmentInProgressRel.AdjustmentROUBalance.TransactionAmount)   
										"CannotRelease;AssetBookValue<LocalTotalBasis>HasNotBeenAdjustedToTheNewROUBalance<first AdjustmentInProgressRel.AdjustmentROUBalance.TransactionAmount>"	
						else

							if (LocalUseBaseCurrency)
								for each LeaseAdjustmentRel
									LocalTotalAdjustmentAmount	+= each.AdjustmentAmount.BaseAmount.EnteredCurrencyAmount
								LocalROUAfterAdjustment			= LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount - LocalTotalAdjustmentAmount
								round LocalTotalBasis to nearest DerivedBaseRoundTo
								round LocalROUAfterAdjustment to nearest DerivedBaseRoundTo

								LocalBaseCurrencyTolerance	 	= LocalTotalBasis - LocalROUAfterAdjustment
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBasis<LocalTotalBasis>AndTotalLeaseROUIs<first AdjustmentInProgressRel.AdjustmentROUBalance.BaseAmount.EnteredCurrencyAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalROUAfterAdjustment = LocalTotalBasis)   
										"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheBasisAfterAdjustment<LocalROUAfterAdjustment>"							
							else
								for each LeaseAdjustmentRel
									LocalTotalAdjustmentAmount	+= each.AdjustmentAmount.TransactionAmount
								LocalROUAfterAdjustment			= LeaseROUAssetAmount.TransactionAmount - LocalTotalAdjustmentAmount
								round LocalTotalBasis to nearest DerivedRoundTo
								round LocalROUAfterAdjustment to nearest DerivedBaseRoundTo

								LocalBaseCurrencyTolerance	 	= LocalTotalBasis - LocalTotalAdjustmentAmount
								if (LocalBaseCurrencyTolerance < 0)
									LocalBaseCurrencyTolerance	= LocalBaseCurrencyTolerance * -1
								if (LocalBaseCurrencyTolerance < 1
								and !LocalBaseCurrencyTolerance = 0)
									confirmation required
										"Warning;AssetBasis<LocalTotalBasis>AndTotalLeaseROUIs<first AdjustmentInProgressRel.AdjustmentROUBalance.TransactionAmount>.TheDifferenceMaybeRounding,YouCanContinueOrAdjustTheAssetBasis."
								else
									constraint (LocalROUAfterAdjustment = LocalTotalBasis)   
										"CannotRelease;AssetBasis<LocalTotalBasis>HasNotBeenAdjustedToTheBasisAfterAdjustment<LocalROUAfterAdjustment>"	

						invoke Release Unreleased AdjustmentInProgressRel
					
						make transition to Released
						
				ResetAdjustment is an Instance Action
					confirmation required
						"AreYouSureYouWantToResetThePendingLeaseAdjustment?"
					Local Fields
						LocalReductionAmount	is an InternationalAmount
						
					Action Rules
						if (AdjustmentInProgressRel exist)
							LocalAdjustmentDate		= AdjustmentInProgressRel.AdjustmentDate					
							LocalEffectiveDate		= AdjustmentInProgressRel.EffectiveDate
						invoke ResetROUForAdjustment first LeasePaymentBalanceAfterAdjustmentRel
							LocalReductionAmount			= AdjustmentInProgressRel.AdjustmentAmount.BaseAmount.EnteredCurrencyAmount 
							LocalReductionAmount			= LocalReductionAmount - BaseAdjustmentROUBalancesRel.ROUReduction
							invoked.PrmLeaseExpenseBase		= BaseAdjustmentROUBalancesRel.LeaseExpense
							invoked.PrmROUReductionBase		= LocalReductionAmount

						invoke ResetROUForAdjustment first LeaseCurrencyPaymentBalanceAfterAdjustmentRel
							LocalReductionAmount			= AdjustmentInProgressRel.AdjustmentAmount.TransactionAmount
							LocalReductionAmount			= LocalReductionAmount - AdjustmentROUBalancesRel.ROUReduction 	
							invoked.PrmLeaseExpenseLease	= AdjustmentROUBalancesRel.LeaseExpense
							invoked.PrmROUReductionLease	= LocalReductionAmount						
						invoke Purge UnpostedLeaseTransactionRel
						invoke Purge Unreleased AdjustmentInProgressRel
						
						make transition to Released
