ContractLine is a BusinessClass
	owned by po
	prefix is CLIN

	Ontology
		symbolic key is ContractLine

	Patterns
		implements CompoundDocument
			Document Components
				ContractLineMember set
				ContractLineTierMemberQual set
		implements ContextualParent
		implements StaticJava

	Persistent Fields
		Name							is a Description
		ContractLineState				is Numeric size 2
			States
				Draft		value is 1
				Active		value is 2
				Amendment	value is 3
				Inactive	value is 4
				Closed		value is 5
		CanUseForCostDefaulting			is Boolean
			default label is "Use for Cost Defaulting"
		CanUseForInvoicePayment			is Boolean
			default label is "Use for Invoice Payment"
		HasBeenActivated				is Boolean
			protected
		ItemNumber						is an Item
		ManualItemNumber				is like Item
		ItemType						is Numeric size 1
			States
				Itemmast	value is 1
				Service		value is 2
				Special		value is 3
		ItemDescription					is a Description
			sql name is SRCHITEM
		ItemDescription2				is a Description
		ItemDescription3				is a Description3
		SpecialItemOptions				is Numeric size 1
			States
				NotASpecialItem			value is 0
				KeepAsSpecialItem		value is 1
				CreateItemOnActivation	value is 2
				CreateItemWithProcess	value is 3
		Vendor                           
		Supplier                         
		VendorItem
		VendorItemDescription			is a Description
		ServiceCode						is Alpha size 1
			States
				NotServiceItem	value is blank
				Amount			value is "A"
				Quantity		value is "Q"
		Quantity						is an UnsignedQuantity
			precision is DerivedNumberOfDecimalsQuantity
		UOM								is a CMUnitOfMeasureEdit
		UOMConversion
			precision is 2
			default label is "UnitOfUseConversion"
		LowUOMCode                   	is a CMUnitOfMeasureEdit
		BaseCost						is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		RevisionProcedureCost           is a ContractUnitCost   
			precision is DerivedNumberOfDecimalsCost
		CommodityCode
		Manufacturer
		ManufacturerNumber
		ManufacturerOrDistributor		is a snapshot of Contract.ManufacturerOrDistributor
		Upc								is an ItemUPC
			default label is "UPC"
		Sku								is an ItemSKU
		HibccUpn						is an HIBCCItemUPN
			default label is "HIBCC-DI"
		LowUOMCodeHibccUPN              is an HIBCCItemUPN
			default label is "LowUOMCodeHIBCC-DI"
		UccEanUpn						is a UCCEANItemUPN
    		default label is "UCC_/EAN_UP\N"
		NdcNbr							is a NationalDrugCode
			default label is "NationalDrugCode"
		UNSPSCCode
		OnHold							is Boolean
		HoldManufacturerLineOnly		is Boolean
		CurrentNetCost					is a ContractUnitCost
			disable Auditing
			precision is DerivedNumberOfDecimalsCost
			classic name is CURR-NET-CST
			default label is "LastMatchCost"
		DefaultBuyUnitCost				is Numeric size 18
			disable Auditing
			restricted
			protected
		Priority						is Numeric size 1
		PayablesDistributionCode
			default label is "DistributionCode"
		DistCodeGroup	
		BlanketStandingRequestingLocation is a RequestingLocationGroup
			default label is "RequestingLocation"
		SourcingCompany					is Numeric size 4
		SourcingEventNumber				is Numeric size 8
		SourcingEventLineNumber			is Numeric size 6
		ToEventNumber					is Numeric size 8
		ToEventCompany					is Numeric size 4
		ToEventLine						is Numeric size 6
		BeginningNetCost				is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		CurrentPercent					is Percent size 6.3
		LifetimeMaximumAmount			is an UnsignedInternationalAmount
		LifetimeMaximumQuantity			is a ContractQuantity
			precision is DerivedNumberOfDecimalsQuantity
		PerOrderMaximumQuantity			is a ContractQuantity
			precision is DerivedNumberOfDecimalsQuantity
		PerOrderMaximumAmount			is an UnsignedInternationalAmount
		PerOrderMinimumQuantity 		is a ContractQuantity
			precision is DerivedNumberOfDecimalsQuantity
		PerOrderMinimumAmount			is an UnsignedInternationalAmount
		PurchaseOrderUserField2
		PurchaseOrderUserField4			is a UserFld2
		PurchaseOrderUserField6			is a UserFld3
		Taxable							is Boolean
		TaxCode
		TaxUsageCode					is AlphaUpper size 10
		GenericName
		EffectiveDate 					is Date
		ExpirationDate 					is Date
		LabelerIdentificationCode
			default label is "HIBCC-LIC"
		MajorPurchasingClass
		MinorPurchasingClass
			context of MajorPurchasingClass
		MajorInventoryClass
		MinorInventoryClass
			context of MajorInventoryClass
		UserField1 						is AlphaUpper size 30
		UserField2
		UserField3 						is a UserField2
		UserField4 						is a UserField2
		UserField5 						is a UserField2
		UserFieldN1 					is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		UserFieldN2 					is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		UserFieldN3 					is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		FutureCostDate 					is Date                             
		FutureCost 						is a ContractUnitCost			    
			default label is "PreviousCost"
			precision is DerivedNumberOfDecimalsCost
		BasePercent 					is Percent size 6.3
		ErrorsExist 					is Boolean
		ConsignmentPricingMarkupOrDiscount is a PricingMarkupOrDiscount
   		ConsignmentLinePriceBreakOn		is a LinePriceBreakOn
		ConsignmentPriceBreak			is a PriceBreak
		PricingMarkupOrDiscount
		LinePriceBreakOn
		PriceBreak
		Retainage 						is Boolean
		RetainagePercent1 				is Percent size 5.2
		RetainageUpToPercent 			is Percent size 5.2
		RetainagePercent2 				is Percent size 5.2
		RetainageOverridePercent 		is Percent size 5.2
		RetainageInvoiceAmount          is an InternationalAmount
		RetainageInvoiceQuantity        is a ContractQuantity
		CostOption 						is Numeric size 1
			States
				CostRequired				value is 1
				NoCharge					value is 2
				VendorDetermined			value is 3
   		LineLevelBreaks                 is Numeric size 1
			States
				ContractTotal	value is 1
				OrderTotal		value is 2
		ManufacturerContract			is Numeric size 15
		ManufacturerContractLine		is Numeric size 6
		DistributorModifications		is Numeric size 1
			States
				NoModificationsToUpdate	value is 0
				ModificationsExist		value is 1
		ChargebackAmt					is an InternationalAmount	
		ChargebackQty					is Decimal size 13.4		
		ConsignmentCurrentNetCost		is an InternationalCost
			precision is DerivedNumberOfDecimalsCost
			disable Auditing
		UseCommitments					is Boolean
		CommitmentsClosed				is Boolean
		TextSearch						is Text
			text searchable
			disable Auditing
		GlobalTradeItemNumber			is an ItemGTIN
			default label is "GTIN"
		LowUOMCodeGTIN                  is an ItemGTIN
		SelectedForNegotiate			is Boolean
		SelectedForNegotiateBy			is Actor
		SelectedForItemCreation			is Boolean
		CreateDistributorContractLine	is Boolean
		NumberOfPurchases				is Numeric size 6
			default label is "Number of Purchases"
		FromImport						is Boolean
		ProcurementReasonCode
			default label is "ReasonForHold"
		AmountRequested					is an InternationalAmount
			disable Auditing
		AmountOrdered					is an InternationalAmount
			disable Auditing
		AddOnChargeAmountOrdered		is an InternationalAmount
			disable Auditing
		TaxAmountOrdered				is an InternationalAmount
			disable Auditing
		QuantityOrdered
			precision is DerivedNumberOfDecimalsQuantity
			disable Auditing
		ConsignmentAmountOrdered		is an InternationalAmount
			disable Auditing
		ConsignmentQuantityOrdered		is Decimal size 14.4
			precision is DerivedNumberOfDecimalsQuantity
			disable Auditing
		FromWorksheetResult             is an ItemInformationWorksheetResult
		HCPCSCode
		ClinicalSystemUse               is Boolean
		PatientChargeable               is Boolean
		Latex							is Numeric 1
			States
				Unspecified						value is 0
				PackageIndicatesLatex			value is 1
				LatexFree               		value is 2
				NotApplicable					value is 3
		Stockless                       is a snapshot of Contract.Stockless
		ApPoPurchaseFrom				is a snapshot of Contract.ApPoPurchaseFrom
		Picture							is an AlternateAttachment
		ItemImageURL					is URL
		ChargeNumber
		DistributorFixedCost            is Boolean
			default label is "NoDistributorMarkup"
		PreferredLine                   is Boolean
		HSNSACCode
		CriticalItem					is Boolean
		PersonalProtectiveEquipment		is Boolean
		MajorPPEClass
		MinorPPEClass
			context of MajorPPEClass
		GMDNPTCode
		UsageIdentifier                 is an ItemUsageIdentifier
		HazardCode 
		CapitatedProcedure              is Numeric 1
			States
				NotAProcedure			value is 0
				PrimaryAndRevision		value is 1
				PrimaryOnly             value is 2
				RevisionOnly			value is 3		

		CreateDate                  is Date
		Sterile                     is Boolean 
		SingleUse                   is Boolean 
		Reusable                    is Boolean
		Reprocessed                 is Boolean 
		Implantable                 is Boolean 
		ContainsHumanTissue         is Boolean 
		Pharmaceutical              is Boolean 
		Dressing                    is Boolean 
		Bioabsorbable               is Boolean  
		Narcotic                    is Boolean 
		Instrument                  is Boolean 
		Drugs                       is Boolean 
		Analytics                   is Boolean 		
		ConsignCode


		SpecialHandlingCode
		SpecialHandlingInstructions			is a Description4
		HandlingTimeInMinutes

		SelectedForCopy             is Boolean 

	Transient Fields
   		StandardCommentCode
   		DefaultUom						is like CMUnitOfMeasureEdit
   		DefaultVendorItem				is AlphaUpper size 32
   		DefaultItemNumber 				is like Item
		CreateFromCopy					is Boolean
		CopyQuantityToLifetimeMaxQty	is Boolean
		SavedFromCurrency   		    is a FromCurrency
		SavedCurrencyTable     		    is a CurrencyTable
		SavedTransactionAmount  		is a CurrencyAmount
		SavedExchangeDate				is a ExchangeDate
		SavedExchangeAmt				is an InternationalCost
		SavedEnterpriseGroup    		is a EnterpriseGroup
		SavedFinanceEnterpriseGroup		is like FinanceEnterpriseGroup
		FromMassDelete                  is Boolean
		TransientItemType				is Numeric 1
			default label is "TypeOfItem"
 			States
 				ItemMaster				value is 1
 				Special		            value is 2
 				Service			        value is 3
		TransientProposalLine           is Numeric 1
			default label is "_"
			States 
				Item                    value is 1
				Service                 value is 2
		TransientProposalAttachment     is an Attachment
		TransientUsedAmount             is an InternationalAmount
		DistributionAccount				is a RQHeaderDefaultCodeBlock
			derive value from first DistributionsRel.DistributionAccount
		DefaultedTier					is like Tier
			derive value from first ContractLineMember set.MfgContractTierInfo.Tier
		TransientTierCost1              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier1                  is a ContractTier
		TransientTierCost2              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier2                  is a ContractTier
		TransientTierCost3              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier3                  is a ContractTier
		TransientTierCost4              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier4                  is a ContractTier
		TransientTierCost5              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier5                  is a ContractTier
		TransientExchangeDate			is an ExchangeDate
		TransientAccount                is a RQHeaderDefaultCodeBlock
		FromNewImportLine               is Boolean
		FromCreateDistributorLines      is Boolean
		PrmQuantity						is a Quantity
			derive value from DerivedPrmQuantity
		PrmUnitCost						is like UnitCost
			precision is DerivedNumberOfDecimalsCost
			derive value from DerivedPrmUnitCost
		FromSetAction                   is Boolean
		FromProposedItem                is Boolean
		TransientRunGroup               is AlphaUpper 30
		NonManualUpdate                 is Boolean  
		TransientCurrency               is a Currency 
			derive value from Contract.CurrencyCode
		TransientPrimaryDiscount        is Percent size 6.3 
		TransientRevisionDiscount       is Percent size 6.3
		TransientPrimaryFinalCost       is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost		
		TransientRevisionFinalCost      is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientLineMemberUpdate       is Boolean
		FromContractCopy                is Boolean 
	
	Context Fields
		PayablesCompany
		PayablesInvoice
		ProcurementTemplateLine
		ContextItem 							is an Item
		SupplyManagementReportContext			is a SupplyManagementReport
		EffectiveDateRange						is a DateRange
		PurchaseOrder
		RequisitionContext          		    is a Requisition 
		RequisitionCompanyContext       		is a Company
		ContractCapitatedComponentGroupContext 	is a ContractCapitatedComponentGroup
		RequisitionLine
		CompareUOM								is a CMUnitOfMeasureEdit
		ContextContract                         is a Contract 
		ContextContractAndLineLocation          is a ContractAndLineLocation  

	Local Fields
		LocalCompany								is like Company 
		LocalLocation								is like InventoryLocation
		LocalItemDescription                        is a Description
		LocalReqLocation							is like RequestingLocation
		LocalMfgContract							is Numeric size 15
		LocalPricingGroup							is a PricingGroup
		LocalMfgContractLine						is like ContractLine
		LocalBaseCostUpdatedFromZero				is Boolean
		LocalBaseCostChanged						is Boolean
		LocalContractRebateType						is like ContractRebateType
		LastQuantity								is like Quantity
		LastUnitPrice								is a UnitPrice
		LastUnitPercent								is a UnitPercent
		HasUnitPercent								is Boolean
		HasUnitPrice								is Boolean
		RoundedValue
		LocalIncrease								is a ContractUnitCost
		LocalBaseCost								is a ContractUnitCost
		LocalCostEffectiveDate						is Date
		DistributionCounter							is Numeric size 6
		LocalPeriodBeginDate						is Date
		LocalDateRange								is a DateRange
		LocalUsageQuantityType						is Numeric size 1
			States
				ReceiptUsage		value is 1
				InvoiceUsage		value is 2
				ManualEntryUsage	value is 3
		LocalUsageType								is Numeric size 1
			States
				Negotiation	value is 0
				Forecasting	value is 1
				Both		value is 2
		LocalAdjustmentPercent						is Percent 3
		LocalYear									is Year
		LocalMonth									is Numeric 2
		LocalDay									is Numeric 2
		UseCompany									is Boolean
		UseAccountingUnit							is Boolean
		UseAccount									is Boolean
		DistributionsMatch							is Boolean
		LocalAnnualized								is Numeric 1
			States
				Yes	value is 1
				No	value is 2
		LocalItemNumber								is like Item
		LocalVendorItem								is like VendorItem
		LocalManufacturerInfo						is a ManufacturerInformation
		LocalProcurementGroup						is like ProcurementGroup
		LocalUOMDefaultedFromVendorItem				is Boolean

		LocalCommodityCode							is a CommodityCode
		LocalTierCost								is a ContractUnitCost
		LocalNewTierCost							is a ContractUnitCost
		DistributorContract							is Numeric size 15
		DistributorContractLine						is Numeric size 6
		ManufacturerContractNumber					is Numeric size 15
		DistributorVendor							is like Vendor
		MfgItemNumber								is like Item
		MfgVendor									is like Vendor
		MfgVendorItem								is AlphaUpper size 32
		NewVendorItem								is AlphaUpper size 32
		LocalManufacturerInformation
		LocalCurrencyExchange						is a CurrencyExchange
		LocalTaxCompany								is Numeric 4
		LocalCodeCount								is Numeric 6
		LocalCreateAction							is Boolean
		LocalTaxCodeError							is Boolean
		ConvertedAmount								is an InternationalAmount
		ConvertedTaxAmount							is an InternationalAmount
		ConvertedAddOnChargeAmount					is an InternationalAmount
		ConvertedRequestedAmount					is an InternationalAmount
		ConvertedInvoiceAmount						is an InternationalAmount
		ConvertedCostMessageAmount					is an InternationalAmount
		ConvertedDifferenceAmount                   is an InternationalAmount
		ConvertedQuantity							is like Quantity
		LocalUOMCalculation							is a UOMCalculation
		LocalUOM                                    is a CMUnitOfMeasureEdit
		LocalTaxEntity								is a TaxEntity
		LocalAmountUpdateDate						is Date
		LocalProcurementTemplate					is a ProcurementTemplate
		LocalTier									is a ContractTier
		LocalContractLine							is a ContractLine
		LocalCopyContractLine                       is like ContractLine 
		LocalContract								is Numeric size 15
		LocalUpdatedBaseCost						is a ContractUnitCost
		LocalOriginalBaseCost						is a ContractUnitCost
		LocalFutureCostDate							is Date
		LocalFutureCost								is a ContractUnitCost
		LocalPreviousCost                           is a ContractUnitCost
		LocalEffectiveDate							is Date
		LocalCompareEffectiveDate					is Date
		ParameterCompareEffectiveDate				is Date
		ParameterCompareExpirationDate				is Date
		LocalOutUnitCost							is a ContractUnitCost
		GTINCheckDigit
		LocalValidCheckDigit            is Boolean
		LocalDoNotSetToAmendment        is Boolean
		LocalUseCommitmentsChanged      is Boolean
		OldItemNumberEntered            is Boolean
		OldItemNumber                   is like Item
		OldVendorItem                   is like VendorItem
		ItemNumberChanged               is Boolean
		LocalContractRebate
		LocalOnContractFlag 						is Numeric size 1
		LocalEntBuyUom								is Alpha size 4
		LocalVendor									is like Vendor
		LocalInvoice								is like Invoice
		LocalSuffix									is like Suffix
		LocalPoNumber								is like PurchaseOrder
		LocalPoRelease								is Numeric size 4
		LocalPoCode									is like POCode
		LocalLineNbr								is Numeric size 6
		LocalSeqNbr									is Numeric size 4
		LocalInvoiceQtyAtPoCostExtendedAmt			is an InternationalAmount
		LocalInvoiceQtyAtInvoiceCostExtendedAmt 	is an InternationalAmount
		LocalInvoiceQtyAtContractCostExtendedAmt	is an InternationalAmount
		LocalInvoiceQtyAtTierContractCostExtAmt		is an InternationalAmount
		LocalInvoiceVsPoCostVariance				is Percent size 5.2
		LocalInvoiceVsContractCostVariance			is Percent size 5.2
		LocalInvoiceVsPoAmountVariance				is an InternationalAmount
		LocalInvoiceVsContractAmountVariance		is an InternationalAmount
		LocalInvoiceVsContractTierAmountVariance	is an InternationalAmount
		LocalInvoiceVsContractTierCostVariance		is Percent size 5.2
		LocalPoUnitCost								is an InternationalCost
		LocalMatchUnitCst							is an InternationalCost
		LocalPeriodOfPerformanceProject				is like Project
		LocalResult									is a PurchaseOrderInterfaceResult
		UpdateFromManufacturerContract				is Boolean
		CreateKeywordShadow							is Boolean
		RemoveKeywordShadow							is Boolean
		UpdateKeywordShadow							is Boolean
		BypassActiveCodeBlockEdit
		LocalPostingDate							is a PostingDate
		LocalRecallGroup							is AlphaUpper size 4
		LocalRecallNotice							is a RecallNotice
		LocalRecallProduct							is a RecallProduct
		LocalDistClose                              is Boolean
		LocalFromHeaderClose                        is Boolean
		LocalFromContractSelection                  is Boolean
		LocalRemoveHold		                        is Boolean
		LocalHasBeenActivated                       is Boolean
		LocalFromInterfaceUpdates                   is Boolean
		LocalDistLineClosed                         is Boolean
		LocalContractAllowance                      is like ContractAllowance
		LocalSpreadDate                             is Date
		LocalContractLineDistribution               is like ContractLineDistribution
		LocalErrorsExist                            is Boolean
		ErrorsExistChanged                          is Boolean
		IncludeAllErrorEdits                        is Boolean
		IncludeFrontEndEdits                        is Boolean
		IncludeDistributionEdits                    is Boolean
		IncludeBackOfficeEdits                      is Boolean
		LocalEarliestEffective                      is Date
		LocalLatestExpiration                       is Date
		ToleranceExceeded					        is Boolean
		CostToleranceExceeded                       is Boolean
		PercentToleranceExceeded	                is Boolean
		LocalSelectedContract                       is like Contract 
		LocalQualifiedItem                          is Boolean 
		LocalCompetitiveItem                        is Boolean 
		LocalManufacturer                           is a Manufacturer 
		LocalManufacturerNumber                     is a ManufacturerNumber 
		LocalTierQualifierContract                  is like Contract 
		BaseCostDifference                          is like ContractUnitCost                     
		LocalProcedureLine                          is like ContractLine
		LocalComponentGroup                         is like ContractCapitatedComponentGroup
		LocalCapitatedComponentGroupItem            is like ContractCapitatedComponentGroupItem
		LocalContractGroup				            is like ContractGroup 
		LocalComponentContractLine                  is like ContractLine 
		LocalRequestingLocation                     is like RequestingLocation
		LocalCompanyPricingGroup                    is like PricingGroup
		LocalLocationPricingGroup                   is like PricingGroup 
		LocalRequestingLocationPricingGroup         is like PricingGroup
		LocalParticipantIsValid                     is Boolean 
		FromSuggestedItem                           is Boolean
		LocalFromUpdateItemNumberWithManufacturer   is Boolean 
		LocalLowUOMCode			                   	is a CMUnitOfMeasureEdit	
		LocalFromCreateItemAndVendorItem            is Boolean	
		LocalDoNotUpdateConsolidated                is Boolean 
		FromDeleteForConsolidated                   is Boolean 
		LocalGeneralLedgerSystemCode 				is a GeneralLedgerSystemCode		
		LocalUpdateSingleManufacturer               is Boolean	
		LocalFromOtherLinesToMatch                  is Boolean 
		LocalFromUpdateAttributes                   is Boolean
		LocalAttributeCtr   						is Numeric 2 
	Field Groups
		TextSearchable
			ItemNumber
			ItemDescription
			ItemDescription2
			ItemDescription3
			VendorItem
			VendorItemDescription
			Manufacturer
			ManufacturerNumber
			MajorPurchasingClass
			MinorPurchasingClass
			MajorInventoryClass
			MinorInventoryClass
			GenericName
			LabelerIdentificationCode
			CommodityCode
			GlobalTradeItemNumber
			LowUOMCodeGTIN
			HibccUpn
			LowUOMCodeHibccUPN
			UNSPSCCode

		ContractCommodityCode
			Contract
			CommodityCode

		UpdateForOtherContractLine
			LowUOMCode 
			GlobalTradeItemNumber
			LowUOMCodeGTIN
			Sku
			HibccUpn
			LowUOMCodeHibccUPN
			UccEanUpn
			NdcNbr
			LabelerIdentificationCode
			CommodityCode
			ItemDescription
			ItemDescription2
			ItemDescription3
			GenericName
			Upc
			UNSPSCCode
			MajorPurchasingClass
			MinorPurchasingClass
			MajorInventoryClass
			MinorInventoryClass
			UOMConversion
			HCPCSCode
			Latex
			CriticalItem
			PersonalProtectiveEquipment
			HSNSACCode 
			GMDNPTCode
			MajorPPEClass
			MinorPPEClass
			PatientChargeable
			ChargeNumber 
			Sterile                      
			SingleUse                    
			Reusable                    
			Reprocessed                  
			Implantable                  
			ContainsHumanTissue          
			Pharmaceutical               
			Dressing                     
			Bioabsorbable
			UserField1 
			UserField2 
			UserField3 
			UserField4 
			UserField5 
			UserFieldN1 
			UserFieldN2 
			UserFieldN3
			Narcotic                     
			Instrument                   
			Drugs                        
			Analytics       			

		UpdateConsolidatedItemMaster 
			EffectiveDate   
			ExpirationDate  
			ItemNumber 
			VendorItem
			ContractLineState 
			UOM
			LowUOMCode 
			GlobalTradeItemNumber
			LowUOMCodeGTIN

			Manufacturer
			ManufacturerNumber
			CommodityCode
			ItemDescription
			ItemDescription2
			ItemDescription3

			Upc
			Sku
			HibccUpn
			LowUOMCodeHibccUPN
			UccEanUpn
			NdcNbr
			UNSPSCCode
			MajorPurchasingClass
			MinorPurchasingClass
			MajorInventoryClass
			MinorInventoryClass
			UOMConversion
			HCPCSCode
			Latex
			CriticalItem
			PersonalProtectiveEquipment
			HSNSACCode 
			GMDNPTCode
			MajorPPEClass
			MinorPPEClass
			PatientChargeable
			ClinicalSystemUse
			ChargeNumber 
			Sterile                      
			SingleUse                    
			Reusable                    
			Reprocessed                  
			Implantable                  
			ContainsHumanTissue          
			Pharmaceutical               
			Dressing                     
			Bioabsorbable
			OnHold 
			ErrorsExist
			BaseCost 
			Priority 

		UpdateDistributor
			BaseCost
			CostOption
			EffectiveDate   
			ExpirationDate  
	Derived Fields
		
		DerivedSpecialHandlingCode 		is a DerivedField
			type is Alpha size 25
			return SpecialHandlingCode

		DerivedHandlingTimeInMinutes	is a DerivedField
			type is Numeric 3
			return HandlingTimeInMinutes
			
		ParticipantCount is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ContractParticipantRels)

		MatchingManufacturerInfoCount is a ComputeField 
			type is Numeric 2
			restricted 
			(instance count of SameOldManufacturerInfoRel)

		MatchingCurrentManufacturerInfoCount is a ComputeField 
			type is Numeric 2
			restricted 
			(instance count of SameManufacturerInfoRel)

		DistributorLinesCount is a ComputeField 
			type is Numeric 2 
			restricted 
			(instance count of DistributorContractLineLinkRel)
		
		ManufacturerContractRepresentativeText is a StringField
			type is Text
			default label is "ManufacturerContract"
			MfgContractRel.RepresentativeText

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforContractLine"

		ContextMessageText is a MessageField
			restricted
			"ContractLine<ContractLine>OfContract<Contract>"

		DerivedTolerancePercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (Contract.DerivedTolerancePercent * 100)

		ChangePercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (((BaseCost - old BaseCost) / (old BaseCost)) * 100)
			
		DerivedChangePercent is a DerivedField
			type is like InternationalAmount
			restricted
			if (old BaseCost not = 0)
				if (ChangePercent < 0)
					return ChangePercent * -1
				else
					return ChangePercent
			else
				return 0

		PercentOfOnContractTotal is a DerivedField
			type is like Percent
			return (TotalContractComplianceInvoiceLinesOnContractAmount/Contract.OnContractComplianceReportAmountTotal)

		UOMUnitConversion is a DerivedField
			type is like UOMConversion
			if (UOMConversion = 0)
				return 1
			else
				return UOMConversion

		LatexClinicalIndicator is a DerivedField
			type is AlphaUpper 1
			if (Latex.PackageIndicatesLatex)
				return "Y"
			else
			if (Latex.LatexFree)
				return "N"
			else
				return " "

		ProjectedNetAmount is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			if (ServiceCode.Amount)
				return (sum ChangeOrderLineDetailWithNewAmountRel.BaseCost + BaseCost)
			else
			if (ServiceCode.Quantity)
				return ((sum ChangeOrderLineDetailWithNewAmountRel.BaseCost + BaseCost) * (sum ChangeOrderLineDetailWithNewAmountRel.Quantity + LifetimeMaximumQuantity)) 

		ChangeOrderAmounts is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			return (sum ChangeOrderLineDetailWithAmountRel.BaseCost)

		BaseCostLessChangeOrders is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			return (BaseCost - ChangeOrderAmounts)

		DerivedAllowanceAmount is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			return (sum ContractAllowanceRel.Amount)

		BaseCostForLowestDivisibleCost is a DerivedField 
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			if (UOMConversion = 1
				or UOMConversion = 0)
				return BaseCost
			else
				return (BaseCost/UOMConversion)
		
		DerivedLowUOMCodeGTIN is a DerivedField 
			type is like ItemGTIN
			if (ItemType.Special)
				return LowUOMCodeGTIN 
			else 
			if (ItemType.Itemmast)
				return LowUOMCodeGTINForItemRel.ItemGTIN
			else 
				return blank 

		DerivedItemType is a DerivedField
			type is Alpha size 20
			restricted
			if(ItemType = 1)
				return "Itemmast"
			else
			if(ItemType = 2)
				return "Service"
			else
				return "Special"
		
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return current timestamp

		DerivedContractLineEffectiveDate is a DerivedField
			type is Alpha size 25
			restricted
			DerivedContractLineEffectiveDate = EffectiveDate
			return DerivedContractLineEffectiveDate[1:4] + "-" + DerivedContractLineEffectiveDate[5:6] + "-" + DerivedContractLineEffectiveDate[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		
		DerivedContractLineExpirationDate is a DerivedField
			type is Alpha size 25
			restricted
			DerivedContractLineExpirationDate = ExpirationDate
			return DerivedContractLineExpirationDate[1:4] + "-" + DerivedContractLineExpirationDate[5:6] + "-" + DerivedContractLineExpirationDate[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		
		DerivedContractLineServiceCode is a DerivedField
			type is Alpha size 20
			restricted
			if(ServiceCode = "A")
				return "Amount"
			else
			if(ServiceCode = "Q")
				return "Quantity"
			else
				return "NotServiceItem"

		DerivedUOMConversion is a DerivedField
			type is Alpha size 20
			default label is "UOMConversion"
			if (ItemType.Special)
				if (UOMConversion = 0)
					return 1
				else
					return UOMConversion
			else
			if (ItemType.Itemmast)
				if (UOM.UnitOfMeasure = ItemNumber.StockUOM)
					if (ItemNumber.UOMConversion > 0)
						return ItemNumber.UOMConversion 
					else 
						return 1
				else
					return ItemUOMRel.UOMConversion
			else
				return blank

		DisplayBaseCostForLowestDivisibleCost is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			default label is "BaseCostForLowestDivisibleCost"
			return (BaseCost/DerivedUOMConversion)

		PercentOfOffContractTotal is a DerivedField
			type is like Percent
			return (TotalContractComplianceInvoiceLinesOffContractAmount/Contract.OffContractComplianceReportAmountTotal)

		DerivedStrippedManufacturerNumber is a DerivedField
			type is like ManufacturerNumber
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(ManufacturerNumber)

		DerivedStrippedVendorItem is a DerivedField
			type is AlphaUpper size 32
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(VendorItem)

		DerivedManufacturerCodeTextSearch is a DerivedField
			type is Alpha size 350
			restricted
			DerivedManufacturerCodeTextSearch = ""
			if (Manufacturer.ManufacturerCode entered)
				if(Manufacturer.ManufacturerDivision entered)
					DerivedManufacturerCodeTextSearch += Manufacturer
				else
					DerivedManufacturerCodeTextSearch += Manufacturer.ManufacturerCode

		HoldDate is a DerivedField 
			type is Date 
			for each audit log records
				if (each.OnHold
				and !old each.OnHold)
					return each.effective date	
		
		FirstDistribution is a DerivedField
			type is Alpha size 100
			return first ContractLineDistributionRel.DistributionAccount

		DerivedVendorItem is a DerivedField 
			type is Alpha size 350
			restricted		
			DerivedVendorItem = ""
			if (VendorItem entered
			and VendorItem != ItemNumber)
				DerivedVendorItem += VendorItem
				DerivedVendorItem += ""

		DerivedStrippedVendorItemText is a DerivedField
			type is Alpha size 350
			restricted		
			DerivedStrippedVendorItemText = ""
			if (VendorItem entered
			and VendorItem != DerivedStrippedVendorItem)
				DerivedStrippedVendorItemText += DerivedStrippedVendorItem
				DerivedStrippedVendorItemText += ""	

		DerivedVendorItemDescription is a DerivedField 
			type is Alpha size 350
			restricted		
			DerivedVendorItemDescription = ""	
			if (VendorItemDescription entered 
			and VendorItemDescription != ItemDescription)
				DerivedVendorItemDescription += VendorItemDescription
				DerivedVendorItemDescription += ""	

		DerivedManufacturerNumber is a DerivedField 
			type is Alpha size 350
			restricted		
			DerivedManufacturerNumber = ""		
			if (ManufacturerNumber entered
			and ManufacturerNumber != ItemNumber
			and ManufacturerNumber != VendorItem)
				DerivedManufacturerNumber += ManufacturerNumber
				DerivedManufacturerNumber += " "

		DerivedStrippedManufacturerNumberText is a DerivedField
			type is Alpha size 350
			restricted
			DerivedStrippedManufacturerNumberText = ""
			if (ManufacturerNumber entered
			and	DerivedStrippedManufacturerNumber != ManufacturerNumber)
				DerivedStrippedManufacturerNumberText += DerivedStrippedManufacturerNumber
				DerivedStrippedManufacturerNumberText += ""

		DerivedManufacturerNumberKeywordShadow is a DerivedField
			type is Alpha size 350
			restricted
			DerivedManufacturerNumberKeywordShadow = ""
			if (ManufacturerNumber entered)
				DerivedManufacturerNumberKeywordShadow += ManufacturerNumber
				DerivedManufacturerNumberKeywordShadow += " "
				if (DerivedStrippedManufacturerNumber != ManufacturerNumber)
					DerivedManufacturerNumberKeywordShadow += DerivedStrippedManufacturerNumber
					DerivedManufacturerNumberKeywordShadow += ""

		ContractAndItemInfo is a MessageField
			restricted
			"OnContract_<Contract>_Item_<ItemNumber>_U\O\M_<UOM.UnitOfMeasure>Total:_"

		TotalContractComplianceInvoiceLinesOnContractQuantity is a DerivedField
			type is Decimal size 21
			return (sum ContractComplianceInvoiceLinesOnContractRel.Quantity)

		TotalContractComplianceInvoiceLinesOffContractQuantity is a DerivedField
			type is Decimal size 21
			return (sum ContractComplianceInvoiceLinesOffContractRel.Quantity)

		TotalContractComplianceInvoiceLinesOnContractAmount is a DerivedField
			type is like InternationalAmount
			return (sum ContractComplianceInvoiceLinesOnContractRel.InvoiceQtyAtContractCostExtendedAmt)

		TotalContractComplianceInvoiceLinesOffContractAmount is a DerivedField
			type is like InternationalAmount
			return (sum ContractComplianceInvoiceLinesOffContractRel.InvoiceQtyAtContractCostExtendedAmt)

		TotalInvoicedAmount is a DerivedField  
			type is like InternationalAmount
			return 0

		
		DerivedSupplierName is a DerivedField
			type is like Description
			restricted
			return Contract.Supplier.SupplierName

		ContractLineItemRepresentativeText is a LabelField
			"<ItemNumber>_-_<ItemDescription>"

		DerivedTiersExistBoolean is a ConditionalField
			type is Boolean
			restricted
			if (IsManufacturerOrDistributorContract
			and LineMemberTierRel exists)
				true
			else
				false
		ItemByManufacturerCount is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ItemByManufacturerRel)

		InactiveItemByManufacturerCount is a ComputeField
			type is Numeric 6
			restricted
			(instance count of InactiveItemByManufacturerRel)

		ServiceMessage is a MessageField
			restricted
			"Service"

		SpecialMessage is a MessageField
			restricted
			"Special"

		ItemMasterMessage is a MessageField
			restricted
			"ItemMaster"

		DerivedSummaryItemType is a ConditionalField
			type is Text
			if (ItemType.Service)
				ServiceMessage
			else
			if (ItemType.Special)
				SpecialMessage
			else
				ItemMasterMessage

		SourcingItemType is a ConditionalField
			type is Alpha size 10
			restricted
			if (ItemType.Service)
				"S"
			else
			if (ItemType.Itemmast)
				"N"
			else
				"X"

		TotalDistributionPercent is a ComputeField
			type is Percent size 6.3
			restricted
			(sum ContractLineDistribution set.Percent)

		RemainingPercentToBeDistributed is a ComputeField
			type is Percent size 6.3
			(100% - TotalDistributionPercent)

		ContractLineDistributionCount is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ContractLineDistribution set)

		CommitmentAmountRemaining is a DerivedField
			type is like InternationalAmount
			if (LifetimeMaximumAmount >= AmountOrdered)
				return (LifetimeMaximumAmount - MaximumLineAmountInUse)
			else
				return 0

		ServiceLineAmountRemaining is a DerivedField 
			type is like InternationalAmount 
			if (LifetimeMaximumAmount >= AmountOrdered)
				return (LifetimeMaximumAmount - AmountOrdered)
			else
				return 0			
		
		MaximumLineAmountInUseForCommitmentUpdate is a DerivedField
			type is like InternationalAmount
			if (!Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested)
			else
			if (Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + AddOnChargeAmountOrdered)
			else
			if (!Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + TaxAmountOrdered)
			else
			if (Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + AddOnChargeAmountOrdered + TaxAmountOrdered)
	
		MaximumLineAmountInUse is a DerivedField
			type is like InternationalAmount
			if (Contract.MaxEditPoOnly
			and !Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered)
			else
			if (Contract.MaxEditPoAndRq
			and !Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested)
			else
			if (Contract.MaxEditPoOnly
			and Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AddOnChargeAmountOrdered)
			else
			if (Contract.MaxEditPoAndRq
			and Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + AddOnChargeAmountOrdered)
			else
			if (Contract.MaxEditPoOnly
			and !Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + TaxAmountOrdered)
			else
			if (Contract.MaxEditPoAndRq
			and !Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + TaxAmountOrdered)
			else
			if (Contract.MaxEditPoOnly
			and Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AddOnChargeAmountOrdered + TaxAmountOrdered)
			else
			if (Contract.MaxEditPoAndRq
			and Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (AmountOrdered + AmountRequested + AddOnChargeAmountOrdered + TaxAmountOrdered)

		ConvertedTotalAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract.MaxEditPoOnly
			and !Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount)
			else
			if (Contract.MaxEditPoAndRq
			and !Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount)
			else
			if (Contract.MaxEditPoOnly
			and Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount + ConvertedAddOnChargeAmount)
			else
			if (Contract.MaxEditPoAndRq
			and Contract.IncludeAOCInMaxEdits
			and !Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount + ConvertedAddOnChargeAmount)
			else
			if (Contract.MaxEditPoOnly
			and !Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount + ConvertedTaxAmount)
			else
			if (Contract.MaxEditPoAndRq
			and !Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount + ConvertedTaxAmount)
			else
			if (Contract.MaxEditPoOnly
			and Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount + ConvertedAddOnChargeAmount + ConvertedTaxAmount)
			else
			if (Contract.MaxEditPoAndRq
			and Contract.IncludeAOCInMaxEdits
			and Contract.IncludeTaxInMaxEdits)
				return (ConvertedAmount + ConvertedAddOnChargeAmount + ConvertedTaxAmount)

		RetainagePercentComplete is a DerivedField
			type is like Percent
			if (Retainage)
				return (RetainageInvoiceAmount/LifetimeMaximumAmount)
			else
				return 0

		DerivedContractName is a DerivedField
			type is like Description
			return Contract.Name

		SpecialItemRunGroup is a StringField
			type is AlphaUpper size 30
			restricted
			"FromContract"
			Contract
			"Line"
			ContractLine

		ManufacturerPlusVendorItem is a StringField
			type is AlphaUpper size 32
			restricted
			ManufacturerCodeDerived
			"-"
			VendorItem

		ManufacturerPlusManufacturerNumber is a StringField
			type is AlphaUpper size 60
			restricted
			ManufacturerCodeDerived
			"-"
			ManufacturerNumber

		ManufacturerNumberPlusManufacturer is a StringField
			type is AlphaUpper size 60
			restricted
			ManufacturerNumber 
			"-"
			ManufacturerCodeDerived

		ManufacturerCodeDerived is a DerivedField
			type is AlphaUpper size 4
			restricted
			if (Manufacturer.ManufacturerCode entered)
				return Manufacturer.ManufacturerCode
			else
			if (Contract.ManufacturerCodeDivision.ManufacturerCode entered)
				return Contract.ManufacturerCodeDivision.ManufacturerCode

		ContractAndLine is a StringField
			type is Numeric size 21
			restricted
			Contract
			ContractLine

		DerivedEffectiveDate is a ComputeField
			type is Date
			restricted
			(Contract.EffectiveDate + 0)

		DerivedExpirationDate is a ConditionalField
			type is Date
			restricted
			if (Contract.ExpirationDate > 0)
				Contract.ExpirationDate
			else
				0

		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.Itemmast
			or  ItemNumber exists)
				ItemNumber.NumberOfDecimalsCost
			else
			if (ItemType.Special
			or  ItemType.Service
			or  ItemType = blank)
				ItemGroupRel.DefaultNumberOfDecimalsCost
			else
				8

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.Itemmast
			or  ItemNumber exists)
				ItemNumber.NumberOfDecimalsQuantity
			else
				4

		DerivedMarkupNet is a DerivedField
			type is like InternationalCost
			restricted
			return ((CurrentPercent + 1) * BaseCost)

		DerivedDiscountNet is a DerivedField
			type is like InternationalCost
			restricted
			return (BaseCost - (BaseCost * CurrentPercent))

		TierCostMessage is a MessageField
			"MemberCosts"

		ProcedureCostMessage is a MessageField 
			"ProcedureCosts"

		ComponentCostMessage is a MessageField 
			"ComponentCosts"
		
		DerivedBaseCost is a DerivedField
			type is like Description
			if (Contract.IsNotDistributorAndNotManufacturer)
				if (IsACapitatedProcedure)
					return ProcedureCostMessage
				else 
				if (IsComponentGroupItem)
					return ComponentCostMessage
				else
					return BaseCost
			else
				return TierCostMessage

		PurchClassMajorMinor is a StringField
			type is Alpha 50
			restricted
			MajorPurchasingClass
			MinorPurchasingClass

		RemainingToBeSpread is a DerivedField
			type is like InternationalAmount
			if (!Contract.UseCommitments)
				return (LifetimeMaximumAmount - (sum ContractLineSpreadRel.SpreadAmount))
			else
				return 0

		DerivedBasePercent is a ConditionalField
			type is Percent size 6.3
			restricted
			if (CurrentBasePercentRel exists)
				last CurrentBasePercentRel.PricingBasePercent
			else
				0

		DerivedBeginningNetCost is a DerivedField
			type is like InternationalCost
			restricted
			if (DerivedBasePercent > 0)
				if last CurrentBasePercentRel.PricingMarkupDiscount.Discount
					return (BaseCost - (DerivedBasePercent * BaseCost))
				else
					return (BaseCost + (DerivedBasePercent * BaseCost))
			else
				return BaseCost

		ContractItemGroup is a StringField
			type is AlphaUpper size 5
			restricted
			ContractGroup

		ContractClass is a StringField
			type is AlphaUpper size 50
			restricted
			Contract.ContractClassification

		Subclass is a StringField
			type is AlphaUpper size 50
			restricted
			Contract.ContractSubclassification

		ContractSupplier is a StringField
			type is Numeric size 9
			restricted
			Contract.Supplier

		DerivedRoundTo is a DerivedField
			type is like InternationalCost
			restricted
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)
				return .00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return .0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return .001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return .01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return .1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1
			else
				return 0

		RoundedBaseCost is a DerivedField
			type is like InternationalCost
			restricted
			if (LocalBaseCost != 0)
				RoundedValue.RoundInput			= LocalBaseCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		AdminEmailAddress is a StringField
			type is Alpha size 153
			restricted
			Contract.PrimaryContactRel.DerivedEmail

		DerivedDateWith0Month0Day is a StringField
			type is Date
			restricted
			LocalYear
			0
			LocalMonth
			0
			LocalDay

		DerivedDateWith0MonthDay is a StringField
			type is Date
			restricted
			LocalYear
			0
			LocalMonth
			LocalDay

		DerivedDateWith0Day is a StringField
			type is Date
			restricted
			LocalYear
			LocalMonth
			0
			LocalDay

		DerivedDateMonthDay is a StringField
			type is Date
			restricted
			LocalYear
			LocalMonth
			LocalDay

		OtherRecordsSelectedForNegotiate	is a ComputeField
			type is Numeric 6
			restricted
			(instance count of SelectedForNegotiateByRel)

		DerivedOneYearAgo is a ComputeField
			type is Date
			restricted
			(current corporate date - 1 year)

		DerivedYesterday is a ComputeField
			type is Date
			restricted
			(current corporate date - 1 day)

		DerivedLastYear is a StringField
			type is Numeric 16
			restricted
			DerivedOneYearAgo
			DerivedYesterday

		DerivedForecastDate is a DerivedField
			type is Date
			restricted
			if (LocalDay	< 10
			and LocalMonth	< 10)
				return DerivedDateWith0Month0Day
			else
			if (LocalMonth 	< 10)
				return DerivedDateWith0MonthDay
			else
			if (LocalDay 	< 10)
				return DerivedDateWith0Day
			else
				return DerivedDateMonthDay

		VendorItemMessage is a MessageField
			restricted
			"VendorItem"

		DerivedUOMDefault is a DerivedField
			type is Alpha 12
			restricted
			if (LocalUOMDefaultedFromVendorItem)
				return VendorItemMessage
			else
				return blank

		DerivedNumberOfPurchases is a DerivedField
			type is Numeric size 6
			restricted
			return instance count of PoLineRel

		DerivedItemInactiveMessage is a MessageField
			restricted
			"Item<ItemNumber>IsInactive"

		DerivedMfgItemInactiveMessage is a MessageField
			restricted
			"Item<MfgItemNumberRel.Item>ToBePlacedOnDistributorContractIsInactive"

		LineStateDiffersFromHeaderState is a MessageField
			"ContractStateIs<Contract.ContractStatus>,ButThisLine'sStateIs<ContractLineState>"

		DerivedItemDescription is a DerivedField
			type is like Description
			if (ItemNumberExists)
				return ItemNumber.Description
			else
				return ItemDescription

		DerivedItemDescriptionFromVendorOrManufacturerItem is a DerivedField
			type is Alpha size 30
			restricted
			if (ItemNumber not entered)
				if (MfgItemNumberRel exists)
					return MfgItemNumberRel.Description
				else
				if (VendorItemIsAlsoAnItemmastRel exists)
					return VendorItemIsAlsoAnItemmastRel.Description
			else
				return blank

		DerivedItemFromVendorOrManufacturerItem is a DerivedField
			type is Alpha size 32
			restricted
			if (ItemNumber not entered)
				if (MfgItemNumberRel exists)
					return MfgItemNumberRel.Item
				else
				if (VendorItemIsAlsoAnItemmastRel exists)
					return VendorItemIsAlsoAnItemmastRel.Item
			else
				return blank

		DerivedUccEanUpn is a DerivedField
			type is AlphaUpper size 32
			restricted
			return com.lawson.apps.procurement.base.StringUtils.trimLeadingSpaces(UccEanUpn)

		DerivedUccEanUpnWithLeadingZeros is a DerivedField
			type is Alpha size 25
			restricted
			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(UccEanUpn)

		LineMemberCount is a DerivedField  
			type is Alpha size up to 20
			restricted
			return blank

		LineCommentCount is a DerivedField
			type is Alpha size up to 20
			if (ContractLineComment set exists)
				return "(" + instance count of ContractLineComment set + ")"
			else
				return ""

		LineAttachmentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (ContractLineAttachment set exists)
				return "(" + instance count of ContractLineAttachment set + ")"
			else
				return ""

		AOCCount is a DerivedField
			type is Alpha size up to 20
			if (ContractLineAOC set exists)
				return "(" + instance count of ContractLineAOC set + ")"
			else
				return ""

		DistributionCount is a DerivedField
			type is Alpha size up to 20
			if (ContractLineDistribution set exists)
				return "(" + instance count of ContractLineDistribution set + ")"
			else
				return ""

		DerivedFirstAccount is a DerivedField
			type is Alpha 100
			return first DistributionsRel.DistributionAccount

		ErrorMessage is a LabelField
			"ErrorsExist"

		RetainageIndicator is a DerivedField
			type is Alpha size up to 20
			if (RetainagePercent1 >0)
				return "*"
			else
				return ""

		LocationIndicator 											is a DerivedField
			type is Alpha size up to 20
			if (ContractLineLocationRel exists)
				return "*"
			else
				return ""

		TierCostCountNumeric is a DerivedField
			type is Numeric size 6
			return instance count of ContractLineTierCostRel

		TierCostCount is a DerivedField
			type is Alpha size up to 20
			if (ContractLineTierCostRel exists)
				return "(" + instance count of ContractLineTierCostRel + ")"
			else
				return ""

		DerivedBasePercentDefaultBuyUnitCost is a DerivedField  
			type is like InternationalCost
			restricted
			if (ItemUOMRel.UOMConversion != 0)
				return ((BaseCost * (ItemNumber.DefaultBuyUOMMultiplier / ItemUOMRel.UOMConversion)) * 100000)
			else
				return BaseCost * 100000

		DerivedMarkupDefaultBuyUnitCost is a DerivedField 
			type is like InternationalCost
			restricted
			if (ItemUOMRel.UOMConversion != 0)
				return ((((BasePercent + 1) * BaseCost) * (ItemNumber.DefaultBuyUOMMultiplier / ItemUOMRel.UOMConversion)) * 100000)
			else
				return (((BasePercent + 1) * BaseCost) * 100000)

		DerivedDiscountDefaultBuyUnitCost is a DerivedField 
			type is like InternationalCost
			restricted
			if (ItemUOMRel.UOMConversion != 0)
				return ((((BaseCost - (BasePercent * BaseCost)) * 100000) * (ItemNumber.DefaultBuyUOMMultiplier / ItemUOMRel.UOMConversion)) * 100000)
			else
				return ((BaseCost - (BasePercent * BaseCost)) * 100000)

		DerivedDefaultBuyUnitCost is a DerivedField
			type is like InternationalCost
			restricted
			initialize LocalUOMCalculation
			LocalUOMCalculation.InputUOM				= UOM.UnitOfMeasure
			LocalUOMCalculation.InputToUOM				= ItemNumber.DefaultBuyUOM
			if (CurrentNetCost entered)
				LocalUOMCalculation.InputUnitCost		= CurrentNetCost
			else
				LocalUOMCalculation.InputUnitCost       = ConsignmentCurrentNetCost
			LocalUOMCalculation.Method					= LocalUOMCalculation.Method.ConvertToAlternate
			return LocalUOMCalculation.OutputUnitCost

		DerivedRemainingQuantityOrdered is a DerivedField
			type is like Quantity
				precision is ItemNumber.NumberOfDecimalsQuantity
			if  (LifetimeMaximumQuantity > QuantityOrdered)
				return (LifetimeMaximumQuantity - QuantityOrdered)

		DerivedRemainingAmountOrdered is a DerivedField
			type is like InternationalAmount
			if  (BaseCost > AmountOrdered)
				return (BaseCost - AmountOrdered)

		DerivedRemainingAmountInUse is a DerivedField
			type is like InternationalAmount
			if  (BaseCost > MaximumLineAmountInUse)
				return (BaseCost - MaximumLineAmountInUse)

		DerivedQuantityOrderedWithDistributorQuantity is a DerivedField
			type is like Quantity
			restricted
			if (!Contract.IsManufacturerContract)
				return (QuantityOrdered)
			else
			if (Contract.IsManufacturerContract)
				return (QuantityOrdered + sum DistributorContractLineQuantityOrderedRel.QuantityOrdered)

		ContractMessage is a MessageField
			"Contract"

		ServiceContractMessage is a MessageField
			"Service"

		CatalogQuoteMessage is a MessageField
			"CatalogQuote"

		StandingMessage is a MessageField
			"Standing"

		BlanketMessage is a MessageField
			"Blanket"

		DerivedPurchaseType is a DerivedField
			type is like Description
			if (Contract.ContractPurchaseType)
				return ContractMessage
			else
			if (Contract.ServicePurchaseType)
				return ServiceContractMessage
			else
			if (Contract.CatalogQuotePurchaseType)
				return CatalogQuoteMessage
			else
			if (Contract.StandingPurchaseType)
				return StandingMessage
			else
			if (Contract.BlanketPurchaseType)
				return BlanketMessage
			else
				return ""

		DerivedPrmQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			if (PayablesInvoiceDetailForInvoiceRel exists)
				return PayablesInvoiceDetailForInvoiceRel.EnteredQuantity
			else
			if (ServiceCode.Amount)
				return 1

		DerivedPrmUnitCost is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			restricted
			if (PayablesInvoiceDetailForInvoiceRel exists)
				return PayablesInvoiceDetailForInvoiceRel.EnteredUnitCost

		DerivedMatchBaseCost is a DerivedField
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			default label is "BaseCost"
			if (LastMatchCostEntered)
				return CurrentNetCost
			else
				return BaseCost

		DerivedInvoiceDetailTotalDistAmt is a DerivedField
			type is like InternationalAmount
			if (PayablesInvoiceDetailForInvoiceRel exists)
				return PayablesInvoiceDetailForInvoiceRel.TotalDistributionAmount

		MoreMessage is a MessageField
			"More"

		InvoiceDetailLinkTitle is a DerivedField
			type is Alpha 100
			restricted
			if (PayablesInvoiceDetailForInvoiceRel exists)
				return MoreMessage

		LineMessage is a MessageField
			"Line"

		DisplayContractLine is a DerivedField
			type is Alpha size 20
			if (ContractLineExists)
				return LineMessage + " " + ContractLine
			else
				return blank

		DerivedContractLine is a DerivedField
			type is like ContractLine
			return ContractLine


		DerivedBODBaseCost is a DerivedField
			type is Decimal size 21.8
			restricted
			if (BaseCost = "0E-8")
				return 0
			else
				return BaseCost

		DerivedItemID is a DerivedField
			type is Alpha size 50
			restricted
			if (ItemType.Special or ItemType.Service)
				return ItemNumber
			else
				return Contract.DerivedFEG+Contract.DerivedDelimiter+ContractGroup+Contract.DerivedDelimiter+ItemNumber

		DerivedCurrencyCode is a DerivedField
			type is Alpha size 10
			restricted
			return Contract.CurrencyCode

		DerivedFormattedEffectiveDate is a DerivedField
			type is Alpha size 25
			restricted
			return Contract.DerivedEffectiveDate

		DerivedBODUOMConversion is a DerivedField
			type is Alpha size 25
			restricted
			if(UOM.UOMConversion = "0E-7")
				return 0
			else
				return UOM.UOMConversion

		DerivedContractLineStatus is a DerivedField
			type is Alpha size 25
			restricted
			return Contract.DerivedContractStatus

		DerivedServiceCode is a DerivedField
			type is Boolean
			restricted
			if (ServiceCode entered)
				return true
			else
				return false

		DerivedPicture is a DerivedField
			type is BinaryDocument
			if (SpecialItemAndLineExists)
				return ContractLine.Picture.File
			else
				return ItemNumber.Picture.File

		DerivedPictureTitle is a DerivedField
			type is Alpha size 20
			if (HasPicture)
				return "Item Image"
			else
				return blank
				
		BaseCostUOM is a DerivedField
			type is Alpha size 35
			default label is "BaseCost"
			return BaseCost + " " + UOM.UnitOfMeasure

		OnHoldMessage is a LabelField
			"OnHold"

		LineErrorsExistsMessage is a MessageField
			"LineErrorsExistWhichNeedToBeFixed"

		ManufacturerLineClosedMessage is a MessageField
			"AssociatedManufacturerContractLineIsClosed"

		DerivedTwoDecimalBaseCost is a DerivedField 
			type is like InternationalAmount
			return BaseCost 

		DerivedTwoDecimalRevisionCost is a DerivedField 
			type is like InternationalAmount
			return RevisionProcedureCost 			

		DerivedCapitatedPrimaryCost is a DerivedField
			type is Alpha size 20
			default label is "PrimaryCost"
			if (PrimaryOrRevisionProcedure)
				return DerivedTwoDecimalBaseCost 
			else
			if (PrimaryProcedure)
				return DerivedTwoDecimalBaseCost
			else	
				return blank

		DerivedCapitatedRevisionCost is a DerivedField
			type is Alpha size 20
			default label is "RevisionCost"
			if (PrimaryOrRevisionProcedure)
				return DerivedTwoDecimalRevisionCost 
			else 
			if (RevisionProcedure)
				return DerivedTwoDecimalRevisionCost 
			else	
				return blank

		DerivedPrimaryCostForList is a DerivedField 
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			if (LocationComponentItemRel exists)
				return first LocationComponentItemRel.PrimaryFinalCost 
			else 
			if (CompanyComponentItemRel exists)
				return first CompanyComponentItemRel.PrimaryFinalCost
			else 
			if (ContractCapitatedChargeItemRel exists)
				return first ContractCapitatedChargeItemRel.PrimaryFinalCost
			else 
				return 0
		
		DerivedRevisionCostForList is a DerivedField 
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			if (LocationComponentItemRel exists)
				return first LocationComponentItemRel.RevisionFinalCost 
			else 
			if (CompanyComponentItemRel exists)
				return first CompanyComponentItemRel.RevisionFinalCost
			else 
			if (ContractCapitatedChargeItemRel exists)
				return first ContractCapitatedChargeItemRel.RevisionFinalCost	
			else 
				return 0			
		

		DerivedSpecialHandlingInstructionsMessage is a DerivedField
			type is Alpha 2
			return blank




		DerivedProcessContractStatus is a DerivedField
			type is Alpha size 15
			restricted
			return Contract.ProcessContractStatus

	Sets

		ByDistributorContractLines
			sql name is DISTCONTLINE
			duplicates
			Sort Order
				ContractGroup
				ManufacturerContract
				ManufacturerContractLine
			Instance Selection
				where (OpenFromManufacturerContract)

		ByAllDistributorContractLines
			duplicates
			Sort Order
				ContractGroup
				ManufacturerContract
				ManufacturerContractLine

		ByVendorItemVendor
			Sort Order
				ContractGroup
				VendorItem
				UOM
				Contract
				ContractLine

		ByVenItemMfgInfo
			Sort Order
				ContractGroup
				Contract
				VendorItem
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
				UOM
				ManufacturerContract
				ContractLine
			Instance Selection
				where (!ItemType.Service)

		ByMfgInfoFromImport
			Sort Order
				ContractGroup
				Contract
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
				UOM
				ManufacturerContract
				ContractLine
			Instance Selection
				where (NotServiceManufInfoEntered)

		ByItemVendorItemForContract      
			Sort Order
				ContractGroup
				Contract
				ItemNumber
				VendorItem
				UOM
				ContractLine

		ByVenItemFromImport
			Sort Order
				ContractGroup
				Contract
				VendorItem
				UOM
				ManufacturerContract
				ContractLine
			Instance Selection
				where (NotServiceVenItemEntered)

		ByItemFromImport
			Sort Order
				ContractGroup
				Contract
				ItemNumber
				VendorItem
				UOM
				ManufacturerContract
				ContractLine

		ByItemContractLine
			Sort Order
				ContractGroup
				ItemNumber
				Contract
				ContractLine

		ByMfgInfoVenItem
			Sort Order
				ContractGroup
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
				VendorItem
				Contract
				ContractLine

		ByVendorItemOpen
			duplicates
			Sort Order
				ContractGroup
				ItemNumber
				VendorItem
			Instance Selection
				where (!ContractLineState.Closed)

		ByItemVendorItem
			Sort Order
				ContractGroup
				ItemNumber
				VendorItem
				Contract
				ContractLine

		ByCanUseForCostDefaultingErrorsExist
			Sort Order
				ContractGroup
				Contract
				ErrorsExist
				ContractLine
			Instance Selection
				where (UseForCostDefaultingOrInvoicePayment)


		ByVendorItemItemUom
			duplicates
			Sort Order
				ContractGroup
				Contract
				VendorItem
				ItemNumber
				UOM


		ByMfgContractLine
			duplicates
			Sort Order
				ContractGroup
				Contract
				ManufacturerContract
				ManufacturerContractLine


		ByDistributorModification
			sql name is DISTMODS
			Sort Order
				ContractGroup
				Contract
				DistributorModifications
				ContractLine

		ByRetainage
			Sort Order
				ContractGroup
				Contract
				Retainage
				ContractLine


		ByLineMarkup
			Sort Order
				ContractGroup
				Contract
				ContractLine
			Instance Selection
				where (IsMarkup)

		ByLineDiscount
			Sort Order
				ContractGroup
				Contract
				ContractLine
			Instance Selection
				where (IsDiscount)

		ByErrorsExist
			Sort Order
				ContractGroup
				Contract
				ErrorsExist
				ContractLine

		ByPurchases
			duplicates
			Sort Order
				ContractGroup
				NumberOfPurchases descending

		ByVendorItem
			Sort Order
				ContractGroup
				VendorItem
				Contract
				ContractLine
			Instance Selection
				where (SpecialItemAndNotClosedLine)

        ByManufacturerNumberFirst 
            Sort Order 
                ContractGroup
                ManufacturerNumber
                Manufacturer.ManufacturerCode
                Manufacturer.ManufacturerDivision
                Contract
				ContractLine    

		BySpecialItemCreate
			sql name is SPECITEMCREATE
		  	Sort Order
				ContractGroup
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
				Contract
				ContractLine
		  	Instance Selection
			 	where (SpecialItemAndNotClosedLine)

		BySpecialItem
			Sort Order
				ContractGroup
				Contract
				ContractLine
		  	Instance Selection
			 	where (SpecialItem)

		ByGTIN
			Sort Order
				ContractGroup
				GlobalTradeItemNumber
				Contract
				ContractLine
			Instance Selection
				where (GTINEnteredContractLineOpen)

		ByPurchMinorClass
			Sort Order
				ContractGroup
				MajorPurchasingClass
				MinorPurchasingClass
				Contract
				ContractLine

		ByManufacturerInformationCode
			Sort Order
				ContractGroup
				Manufacturer
				Contract
				ContractLine

		ByCommodityCode
			Sort Order
				ContractGroup
				CommodityCode
				Contract
				ContractLine

		ByEffectiveDate
			Sort Order
				ContractGroup
				EffectiveDate descending
				Contract
				ContractLine

		ByUnspscCode
			Sort Order
				ContractGroup
				UNSPSCCode
				Contract
				ContractLine

		ByGMDNTerm
			Sort Order 
				ContractGroup 
				GMDNPTCode
				Contract 
				ContractLine 
		
		FromWorksheet
			Instance Selection
				where (FromWorksheet)
			Sort Order
				FromWorksheetResult
				ContractGroup
				Contract
				ContractLine

		ByVendor      
			Sort Order 
				Vendor 
				ContractGroup
				Contract 
				ContractLine 

		BySupplier 
			Sort Order 
				Supplier 
				ContractGroup 
				Contract 
				ContractLine   
		
		ByCostDefaultingOrder 
			Sort Order
				ContractGroup
				ItemNumber
				Priority
				DefaultBuyUnitCost
				Contract
				ContractLine
				EffectiveDate
				ExpirationDate
			Instance Selection
				where (UseForCostDefaulting)

		ByCostDefaultingOrderVendorItem 
			Sort Order
				ContractGroup
				VendorItem
				Priority
				DefaultBuyUnitCost
				Contract
				ContractLine
				EffectiveDate
				ExpirationDate
			Instance Selection
				where (UseForCostDefaulting)

	Conditions
		SameManufacturerForDistributorRelExists
			restricted 
			when (SameManufacturerForDistributorRel exists)
		SpecialHandlingCodeEntered
			restricted
			when (SpecialHandlingCode entered)
		IsHSNSACCodeEnabled
			restricted
			when (ContractGroup.BusinessGroup.UseHSNSACCode)
		GMDNTermEntered 
			restricted 
			when (GMDNPTCode entered)
		NoPriceChangeExists 
			restricted 
			when (ContractLineCostComparisonRel !exist)
		HasLineMembers
			restricted
			when (ContractLineMember set exists)
		HasContractComplianceInvoiceLinesOnContract
			restricted
			when (ContractComplianceInvoiceLinesOnContractRel exists)
		ContractIsChangeOrder
			restricted
			when (Contract.AllowChangeOrder)
		StockUOMUsedForUOMConversion
            restricted
            when (ItemNumberExists
            and  (UOM.UnitOfMeasure != ItemNumber.StockUOM
            or    ItemNumber.UOMConversion = 0))
		ExpirationDateEntered
			restricted
			when (ExpirationDate entered)
		HasPicture
			restricted 
			when (Picture.File entered
			or    ItemHasPicture)
		ItemHasPicture 
			restricted
			when (ItemmastRel.PictureExists)
		HasDescription3
			restricted
			when (ItemDescription3 entered)
		PastExpirationDate
			restricted
			when (ExpirationDateEntered
			and   ExpirationDate < current corporate date
			and   !ContractLineState.Closed)
		PastExpirationDateNotClosed
			restricted
			when (PastExpirationDate
			and   LineNotClosed)
		CanUseTaxLocations 
			restricted 
			when (ContractGroup.EnableTaxOverrideLocations
            and   Contract.HasAPurchaseType)
		CanUseTaxOrClinicalLocations
			restricted 
			when (CanUseTaxLocations
			or   (Contract.EnableClinicalSystemUseLocations
			and   ManufacturerContract = Contract))
		HasPreviousCost
			restricted
			when (FutureCost > 0)
		HasContractComplianceInvoiceLinesOffContract
			restricted
			when (ContractComplianceInvoiceLinesOffContractRel exists)
		HasOrderedQuantity
			restricted
			when (QuantityOrdered > 0)
		HasAmountRequested
			restricted
			when (AmountRequested > 0)
		HasAmountOrdered
			restricted
			when (AmountOrdered > 0)
		HasTotalInvoicedAmount 
			restricted
			when (TotalInvoicedAmount > 0
			and  !Contract.ServicePurchaseType)
		HasToleranceErrors
			restricted
			when (ContractLinePriceUpdateRel exists)
		HasManualToleranceErrors
			restricted
			when (ContractLineManualPriceUpdateRel exists)
		HasAmounts
			restricted
			when (HasAmountRequested
			or    HasAmountOrdered)

		HasParticipants
			restricted
			when (ContractParticipantRels exists)
		NoUnreleasedDistPoLinesExist
			restricted
			when (DistContractLinesWithUnreleasedPORel !exists)
		NoUnreleasedDistReqLinesExist
			restricted
			when (DistContractLinesWithUnreleasedReqRel !exists)
		NoUnprocessedDistPOInterfaceRecordsExist
			restricted
			when (DistContractLinesWithUnprocessedRequestsRel !exists)
		IsASupplier
			restricted
			when (actor.agent(SupplierSourceId).SupplierSourceId exists)
		LastMatchCostEntered
			restricted
			when (CurrentNetCost != BaseCost
			and  !PriceBreakSomewhere)
		LastMatchCostAlert
			restricted
			when (LastMatchCostEntered
			and   LineNotClosed
			and   RemainingQuantity
			and   HasOrderedQuantity)
		HasAllowances
			restricted
			when (ContractAllowanceRel exists)
		HasOpenAllowances		
			restricted
			when (ContractOpenAllowanceRel exists)		
		CanCreateDrawDownOrUpdateAllowance
			restricted
			when (CanCreateChangeOrderDetail
			and   HasOpenAllowances)

		CanCreateChangeOrderDetail
			restricted
			when (Contract.AllowChangeOrder
			and   LineNotClosed
			and  !ExistingLineForChangeOrder
			and  (Contract.ContractStatus.Addendum
			or    Contract.ContractStatus.Amendment)
			and   Contract.ChangeOrdersNotCompleted)

		RemainingQuantity
			restricted
			when (LifetimeMaximumQuantity = 0
			or   (LifetimeMaximumQuantity > QuantityOrdered))
		NoUnreleasedInvoiceDetailsExist
			restricted
			when (UnreleasedPayablesInvoiceDetailRel !exists)
		HasOtherKeywordItems
			restricted
			when (OtherKeywordItemRel exists)
		HasNoPreferredContracts
			restricted
			when (ContractPreferredManufacturerItemRel !exists)
		HasItemKeywordShadow
			restricted
			when (ItemKeywordShadowRel exists)
		DisplayWizardComments
			restricted
			when (ContractGroup.WizardComments)
		IsManufacturerOrDistributorContract
			restricted
			when (Contract.ManufacturerOrDistributor.ManufacturerContract
			or    Contract.ManufacturerOrDistributor.DistributorContract)
		BaseReplenishmentExists
			restricted
			when (BaseItemReplenishmentRel exists)
		ParticipantReplenishmentExists
			restricted
			when (ParticipantItemReplenishmentRel exists)
		ManufacturerReplenishmentExists
			restricted
			when (ManufacturerItemReplenishmentRel exists)
		DistributorReplenishmentExists
			restricted
			when (DistributorItemReplenishmentRel exists)
		CostDefaultIsManufacturerOrDistributorContract
			restricted
			when (ManufacturerOrDistributor.ManufacturerContract
			or    ManufacturerOrDistributor.DistributorContract)
		DisplayWizardAttachments
			restricted
			when (ContractGroup.WizardAttachments)
		HCPCSCodeEntered
			restricted
			when (HCPCSCode.HCPCS entered)
		HSPCSCodeSequenceEntered
			restricted
			when (HCPCSCode.Sequence entered)
		FromWorksheet
			restricted
			when (FromWorksheetResult entered)
		POCommitmentsExist
			restricted
			when (Contract.UseLineCommitments
			and   UseCommitments
			and   ContractPolineDistributionsByContractRel exists)
		OpenPOCommitmentsExist
			restricted
			when (Contract.UseLineCommitments
			and   UseCommitments
			and   OpenContractPolineDistributionsByContractRel exists)
		RQCommitmentsExist
			restricted
			when (Contract.UseLineCommitments
			and   UseCommitments
			and   Contract.LifetimeEdit.PurchaseOrdersAndReqs
			and   RequisitionLineDistributionsByContractRel exists)
		OpenRQCommitmentsExist
			restricted
			when (Contract.UseLineCommitments
			and   UseCommitments
			and   Contract.LifetimeEdit.PurchaseOrdersAndReqs
			and   OpenRequisitionLineDistributionsByContractRel exists)

		OffContractItemPurchases
			when (OtherPurchaseOrderLineForItemRel exists)

		OffContractVendorItemPurchases
			when (OtherPurchaseOrderLineForVendorItemRel exists)

		OffContractManufacturerNumberPurchases
			when (OtherPurchaseOrderLineForManufacturerInformationRel exists)

		ForServiceCostDefaulting
			when (ItemType.Service
			and   CanUseForCostDefaulting
			and   HasBeenActivated
			and   !ErrorsExist
			and   !OnHold
			and   !ContractLineState.Closed)

		EffectiveDateWithinRange
			restricted
			when (EffectiveDate within EffectiveDateRange)

		RequisitionLinesByContract
			when (RequisitionLinesByContractRel exists)

		UsesUOMSMustMatch
			restricted
			when ((ItemType.Itemmast and Contract.UOMSMustMatch)
			or 	  (ItemType.Special  and Contract.UOMSMustMatchForSpecials))

		HasCatchweightItem
			restricted
			when (ItemType.Itemmast
			and   ItemNumber.IsCatchWeightItem)

		MatchProcurementTemplateLineItem
			restricted
			when (ItemNumber = ContextItem)

		ProcurementTemplateLineItemExists
			restricted
			when (ContextItem entered)

		StocklessForCostDefaulting
			restricted
			when (Stockless
			and   UseForCostDefaultingSomewhere)

		ContractLineExists
			restricted
			when (ContractLine > 0)

		SpecialItemAndLineExists
			restricted
			when (ContractLineExists
			and   SpecialItem)

		HealthcareInformationExists
			restricted
			when (PatientChargeItemsRel exists
			or    HCPCSCodeEntered
			or    PatientChargeable    = true
			or    ClinicalSystemUse    = true
			or    ChargeNumber entered 	
			or    GMDNPTCode entered
			or    UsageIdentifier entered
			or    NdcNbr entered
			or    HibccUpn entered 
			or    Implantable         = true
			or    Drugs               = true 
			or    Instrument          = true 
			or    Narcotic            = true 
			or    ContainsHumanTissue = true)

		DrugPharmacyOrNarcoticUsage
			restricted
			when (UsageIdentifier.Drugs
			or    UsageIdentifier.Pharmacy
			or    UsageIdentifier.Narcotic)		
		
		CanDisplayHealthcareInformation
			restricted
			when (ContractLine exists
			and  (Contract.DerivedShowHealthcareInformation
			or    HealthcareInformationExists))

		CanDisplayHealthcareInformationClosed
			restricted
			when (CanDisplayHealthcareInformation
			and   ContractLineState.Closed)

		CanDisplayHealthcareInformationNotClosed
			restricted
			when (CanDisplayHealthcareInformation
			and  !ContractLineState.Closed)

		CompareContractLineMfgExists
			restricted
			when (ContractLineMfgCompareRel exists)

		CompareContractLineVendorExists
			restricted
			when (ContractLineVendorCompareRel exists)

		CompareContractLineItemExists
			restricted
			when (ContractLineItemCompareRel exists)

		VendorItemExistsFromManufacturerNumber
			restricted
			when (VendorItemFromManufacturerNumberRel exists)

		VendorItemNotItem
			restricted
			when (VendorItemIsAlsoAnItemmastRel !exists)

		VendorItemIsItem
			restricted
			when (VendorItemIsAlsoAnItemmastRel exists)

		ManufacturerAndVendorItemNotItem
			restricted
			when (ManufacturerAndVendorItemIsAlsoAnItemmastRel !exists)

		ManufacturerNumberIsItem
			restricted
			when (ManufacturerNumberIsAlsoAnItemmastRel exists)

		VendorItemExists
			restricted
			when (GetVendorItemAllRel exists)


		CanUseForCostDefaultingSomeLevel   
			restricted
			when (CanUseForCostDefaulting
			or    CanUseForInvoicePayment
			or    ManufContractDirectPurchase)

		UseForCostDefaultingOrInvoicePayment
			restricted
			when (CanUseForCostDefaulting
			or    CanUseForInvoicePayment)

		FromCostComparisonExists
			restricted
			when (ContractLineFromCostCompareEmailRel exists)

		CostSavingsExists
			restricted
			when (ContractCostSavingsRel exists)

		ManufContractDirectPurchase
			restricted
			when (Contract.TierMemberDirectPurchaseMethodRels exists)

		UseForCostDefaultingIncludingLineMembersAndOnHold  
			when  (not ItemType.Service
			and    CanUseForCostDefaulting
			and    HasBeenActivated
			and   !ErrorsExist)

		NotUsedForCostDefaulting
			restricted
			when (ErrorsExist
			or    OnHold
			or    ContractLineState.Closed
			or    PastExpirationDate)

		UseForCostDefaulting     
			when  (not ItemType.Service
			and    CanUseForCostDefaulting
			and    HasBeenActivated
			and   !ErrorsExist
			and   !OnHold
			and   !HoldManufacturerLineOnly
			and   !ContractLineState.Closed
			and   !CostDefaultIsManufacturerOrDistributorContract)

		UseForCostDefaultingSomewhere  
			when  (CanUseForCostDefaulting
			and   !OnHold
			and    HasBeenActivated
			and   !HoldManufacturerLineOnly
			and   !ErrorsExist
			and   !ContractLineState.Closed)

		UseForCostDefaultingDisplay
			when  (CanUseForCostDefaulting
			and   !OnHold
			and   !HoldManufacturerLineOnly
			and   !ErrorsExist
			and   !ContractLineState.Closed
			and   HasBeenActivated)

		HoldCodeEntered
			restricted
			when (ProcurementReasonCode entered)
		AddendumOrAmendment
			restricted
			when (Contract.ContractChangesExist)
		DraftLine
			restricted
			when (!Contract.ContractChangesExist
			and   Contract.DraftInProgress)
		AmendLine
			restricted
			when (Contract.ContractChangesExist
			and   Contract.AmendInProgress
			and   !Contract.CommitmentsClosed)
		CanUpdateAmendment
			restricted
			when (AmendLine
			and   !Contract.BudgetEditInProgress
			and   !Contract.ActivationInProgress)
		ActiveLine
			when (Contract.ContractStatus.Active)
		UpdateableActiveLine
			restricted
			when (ContractLineState.Active
			and   !Contract.BudgetEditInProgress
			and   !Contract.ActivationInProgress)
		ServiceItemType
			restricted
			when (ItemType.Service)
		ServiceItem
			restricted
			when (ItemType.Service
			or    Contract.ServicePurchaseType
			or    TransientItemType.Service)
		NotServiceManufInfoEntered
			restricted
			when (!ItemType.Service
			and   ManufacturerNumber entered)
		NotServiceVenItemEntered
			restricted
			when (!ItemType.Service
			and   VendorItem entered)
		QuantityServiceItem
			restricted
			when (ItemType.Service
			and   ServiceCode.Quantity)
		HasLongDescription
			restricted
			when (ItemNumber exists
			and   ItemNumber.Description3 entered)
		GTINEnteredContractLineOpen
			restricted
			when (!ContractLineState.Closed
			and    GlobalTradeItemNumber entered)
		NeedDescription
			restricted
			when (ItemType.Special
			or    ServiceItem)
		ContractHasAPurchaseType
			restricted
			when (Contract.HasAPurchaseType)
		ContractHasAPurchaseTypeNonTemplate
			restricted
			when (ContractHasAPurchaseType
			and   !Contract.ContractTemplate)
		CatalogQuotePurchaseType
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.PurchaseType.CatalogQuote))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.PurchaseType.CatalogQuote)))
		SequentialItemNumbering
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.ItemCreationMethod.Sequential))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.ItemCreationMethod.Sequential)))
		ManualItemNumbering
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.ItemCreationMethod.ManualInput))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.ItemCreationMethod.ManualInput)))
		NoItemSyncUpdate
			restricted
			when (ItemGroupRel.DoNotUpdateInactiveVendorItem
			and   InactiveVendorItem)
		NumericItemNumbering
			restricted
			when   (ItemGroupRel.NumericItemNumber)
		AssignItemNumbering
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.ItemCreationMethod.Assign))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.ItemCreationMethod.Assign)))
		GTINAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.ItemGTIN))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.ItemGTIN)))
		SKUAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.ItemSKU))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.ItemSKU)))
		UPCAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.ItemUPC))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.ItemUPC)))
		UCCEANAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.UCCEANItemUPN))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.UCCEANItemUPN)))
		HIBCCAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.HIBCCItemUPN))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.HIBCCItemUPN)))
		NDCAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.NationalDrugCode))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.NationalDrugCode)))
		VendorItemAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.VendorItem))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.VendorItem)))
		ManufacturerAssignment
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.AssignItemNumberUsing.ManufacturerNumber))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.AssignItemNumberUsing.ManufacturerNumber)))
		IsDistributorContract
			when (Contract.ManufacturerOrDistributor.DistributorContract)
		IsManufacturerContract
			when (Contract.ManufacturerOrDistributor.ManufacturerContract)
		DraftLineForManufacturer
			restricted
			when (DraftLine
			and   IsManufacturerContract)
		IsManufacturerForCostDefaulting
			restricted
			when (IsManufacturerContract
			and   CanUseForCostDefaulting)
		IsManufacturerNotForCostDefaulting
			restricted
			when (IsManufacturerContract
			and   !CanUseForCostDefaulting)
		LineMembersExist
			restricted
			when (AnyLineMemberRel exists)
		IsDistributorContractWithLineMembers
			restricted
			when (IsDistributorContract
			and   LineMembersExist)
		IsManufacturerContractWithLineMembers
			restricted
			when (IsManufacturerContract
			and   LineMembersExist)
		ManufacturerWithTiers
			restricted
			when (IsManufacturerContract
			and   AnyTierMembersRel exists)
		IsNotDistributorContract
			restricted
			when (!Contract.ManufacturerOrDistributor.DistributorContract)
		IsDistributorWithManufacturerContract
			restricted
			when (IsDistributorContract
			and   ManufacturerContract != Contract)
		IsNotDistributorAndNotManufacturer
			restricted
			when ((!Contract.ManufacturerOrDistributor.DistributorContract)
			and  (!Contract.ManufacturerOrDistributor.ManufacturerContract))
		NotDistributorAndManufacturerAndNoLine
			restricted
			when (IsNotDistributorAndNotManufacturer
			and   !LineExists)
		NotServiceItemAndNotTemplate
			restricted
			when (!ServiceItemType
			and     Contract.NotContractTemplate)
		CommMfgCodeAndNumber
			restricted
			when ((CommodityCode.Segment[1] entered)
			and   (Manufacturer.ManufacturerCode entered)
			and   (ManufacturerNumber entered))
		CommMfgCode
			restricted
			when ((CommodityCode.Segment[1] entered)
			and   (Manufacturer.ManufacturerCode entered))
		CanAddLine
			restricted
			when (!Contract.ContractStatus.Inactive
			and   !Contract.ContractStatus.Closed
			and   !OnHold
			and   !Contract.CommitmentsClosed)

		NeedBaseCost
			restricted
			when ((IsNotDistributorContract)
			or     (IsDistributorContract
			and     ManufacturerContract = Contract))
		UnitCostRequired
			restricted
			when ((BaseCost <= 0)
			and   (CostOption.CostRequired
			or     CostOption = blank))
		CostOptionRequired
			restricted
			when (BaseCost > 0
			and   CostOption = blank)
		InactiveVendorItem
			restricted
			when (VendorItem exists
			and  !VendorItem.Active)
		NonServiceItem
			restricted
			when (ItemType.Itemmast
			or    ItemType.Special)
		NonSpecialItem
			restricted
			when (ItemType.Service
			or    ItemType.Itemmast)
		SpecialItem
			restricted
			when (ItemType.Special)
		SpecialItemAndNotClosedLine
			restricted
			when (SpecialItem
			and   !ContractLineState.Closed)
		SpecialItemCostDefaultingNotActivated
			restricted
			when (SpecialItem
			and   CanUseForCostDefaulting
			and   !HasBeenActivated)
		SpecialItemNotCostDefaultingOrActiveOrAmendment
			restricted
			when (SpecialItem
			and  (!CanUseForCostDefaulting
			or    ContractLineState.Active
			or    ContractLineState.Amendment))
		LineCommitments
			restricted
			when (UseCommitments
			and   Contract.UseLineCommitments)
		CanAddLineAndNotUsingHeaderCommitments
			restricted
			when (CanAddLine
			and  !Contract.CreateCommitments.Header
			and  !Contract.CreateCommitments.HeaderSpread)
		LineDoesNotExistAndNotUsingHeaderCommitments
			restricted
			when (!ContractLineExists
			and  !Contract.CreateCommitments.Header
			and  !Contract.CreateCommitments.HeaderSpread)
		InContractWorksheet
			restricted
 			when (SelectedInWorksheet exists)
		OnActiveSourcingEvent
			restricted
			when (OnActiveEvent exists)
		RetainageTurnedOn
			restricted
			when (Retainage changed
			and	  old Retainage = false)
		ErrorsExistTurnedOff
			restricted
			when (ErrorsExist changed
			and   old ErrorsExist = true)
		RetainageExist
			restricted
			when (Retainage)
		RetainageLineOrHeader
			restricted
			when (Contract.RetainagePercentCompleteTracking.HeaderLevel
			or    Contract.RetainagePercentCompleteTracking.LineLevel)

		AvailableToSpread	
			restricted
			when (!Contract.ServicePurchaseType
			and   !Contract.UseCommitments
			and    LifetimeMaximumAmount != 0
			and    Contract.NotContractTemplate)
		HasLifetimeMax
			restricted
			when (LifetimeMaximumAmount entered)
		MfgInfoChanged
			restricted
			when ((Manufacturer.ManufacturerCode changed
			and   old Manufacturer.ManufacturerCode not = blank)
			or	 (Manufacturer.ManufacturerDivision changed
			and   old Manufacturer.ManufacturerDivision not = blank)
			or	 (ManufacturerNumber changed
			and   old ManufacturerNumber not = blank))
		EligibleContractLineForEvent
			restricted
			when  (!InContractWorksheet
			and    Contract.SourcingEligible
			and    Contract.ContractStatus.Active
			and	  !OnActiveSourcingEvent
			and   ((ItemType.Itemmast
			and    ItemNumber.Active)
			or    !ItemType.Itemmast))
		HasBeenActivatedAndItemmast
			restricted
			when (HasBeenActivated
			and   ItemType.Itemmast)
		HasBeenActivatedAndItemmastAndNoErrors
			restricted
			when (HasBeenActivatedAndItemmast
			and  !ErrorsExist)
		HasBeenActivatedAndVendorItemExistsAndNoErrors
			restricted
			when (HasBeenActivatedAndItemmast
			and   VendorItemExists
			and   !ErrorsExist)
		ItemmastAndFromManufacturerContractOrHasBeenActivated
			restricted
			when (ItemType.Itemmast
			and  (HasBeenActivated
			or    FromManufacturerContract))
		ToleranceErrorsExist
			restricted
			when (ContractLinePriceChangeRel exists)
		OpenCommitments
			restricted
			when (Contract.HasBeenActivated = true
			and   ExpirationDate <= current corporate date
			and	  LineCommitments
			and   CommitmentsClosed = false)
		HoldContractLineAllowed
			restricted
			when (!OnHold
			and   !ContractLineState.Closed
			and   !Contract.ContractTemplate)
		HoldContractLineMemberAllowed
			restricted
			when (Contract.HasAPurchaseType
			and   !ContractLineState.Closed)

		HoldManufacturerLineOnlyAllowed
			restricted
			when (IsManufacturerContract
			and   !OnHold
			and   !HoldManufacturerLineOnly
			and   HasBeenActivated
			and   !ContractLineState.Closed)

		ManufacturerLineOnlyHoldAvailable
			restricted
			when (Contract.OnHold = false
			and   IsManufacturerContract
			and   ContractHasAPurchaseType
			and   HasBeenActivated)

		TypeOrSubTypeKeepAsSpecialItem
			restricted
			when ((Contract.ContractSubtype not entered
			and    Contract.ContractType.SpecialItemOptions.KeepAsSpecialItem)
			or    (Contract.ContractSubtype entered
			and    Contract.ContractSubtype.SpecialItemOptions.KeepAsSpecialItem))
		TypeOrSubTypeCreateItemOnActivation
			restricted
			when ((Contract.ContractSubtype not entered
			and    Contract.ContractType.SpecialItemOptions.CreateItemOnActivation)
			or    (Contract.ContractSubtype entered
			and    Contract.ContractSubtype.SpecialItemOptions.CreateItemOnActivation))
		TypeOrSubTypeCreateItemWithProcess
			restricted
			when ((Contract.ContractSubtype not entered
			and    Contract.ContractType.SpecialItemOptions.CreateItemWithProcess)
			or    (Contract.ContractSubtype entered
			and    Contract.ContractSubtype.SpecialItemOptions.CreateItemWithProcess))

		NewItemNumber
			restricted
			when (!ItemNumber exists
			and   !ServiceItem)

		ItemNumberEntered
			restricted
			when (ItemNumber entered)
		ItemNumberExists
			restricted
			when (ItemNumber exists)
		ItemDiscontinued
			restricted
			when (ItemNumberExists
			and   ItemNumber.Discontinued)
		ItemLocationExistsAndActive
			restricted
			when (ItemLocationRel !exists
			or   (ItemLocationRel exists
			and   ItemLocationRel.Active       = true
			and   ItemLocationRel.Discontinued = false))
		ItemNumberExistsAndAvailableForUse
			restricted
			when (ItemNumberExists
			and   ItemNumber.AvailableForUse)
		AmountTypeServiceItem
			restricted
			when (ServiceCode.Amount)
		ServicePurchaseTypeContract
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.PurchaseType.Service))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.PurchaseType.Service)))
		ContractTypeAllowsZeroMaxQuantity
			restricted
			when (((Contract.ContractSubtype not entered)
			and    (Contract.ContractType.PurchaseType.Service)
			and    (Contract.ContractType.AllowNoMaxServiceItems))
			or    ((Contract.ContractSubtype entered)
			and    (Contract.ContractSubtype.PurchaseType.Service)
			and     Contract.ContractSubtype.AllowNoMaxServiceItems))
		DisplayRemainingQuantity  
			restricted
			when (ServiceCode.Quantity
			and   LifetimeMaximumQuantity entered)   
		ByQuantityNotAllowed
			restricted
			when (AmountTypeServiceItem
			and   !ServicePurchaseTypeContract)
		NotStandingPurchaseType
			restricted
			when (((Contract.ContractSubtype not entered)
			and   (Contract.ContractType.PurchaseType.Contract
			or	   Contract.ContractType.PurchaseType.Blanket
			or     Contract.ContractType.PurchaseType.CatalogQuote
			or     Contract.ContractType.PurchaseType.Service))
			or   ((Contract.ContractSubtype entered)
			and   (Contract.ContractSubtype.PurchaseType.Contract
			or     Contract.ContractSubtype.PurchaseType.Blanket
			or     Contract.ContractSubtype.PurchaseType.CatalogQuote
			or     Contract.ContractSubtype.PurchaseType.Service)))
		AmountTypeItemOnServiceContract
			restricted
			when (AmountTypeServiceItem
			and   ServicePurchaseTypeContract)
		ServiceItemOnly
			restricted
			when (ItemType.Service)
		ServiceItemOnNonServiceContract
			restricted
			when (ServiceItemOnly
			and   !ServicePurchaseTypeContract)

		SingleDistribution
			restricted
			when (instance count of DistributionsRel = 1)
		Distributions
			restricted
			when (DistributionsRel exists)
		NoDistributions
			restricted
			when (!DistributionsRel exists)
		AOCs
			when (ContractLineAOC set exists)
		DistCodeChanged
			restricted
			when (PayablesDistributionCode changed
			and   !Contract.UseHeaderCommitments)
		NoInvoicesForContractLine
			restricted
			when (!PayablesInvoiceDetailRel exists)
		InvoicesForContractLine
			when (HasBeenActivated
			and   PayablesInvoiceDetailRel exists)
		HasInvoiceDetailsForAmountService 
			restricted 
			when (PayablesInvoiceDetailReleasedNoGroupRel exists
			and   ServiceCode.Amount)
		HasInvoiceDetailsForQuantityService
			restricted 
			when (PayablesInvoiceDetailReleasedNoGroupRel exists
			and   ServiceCode.Quantity)
		CommittedInvoicesForContractLine
			restricted
			when (InvoicesForContractLine
			and   Contract.UseCommitments)
		LineNotFullySpread
			restricted
			when (ContractLineSpreadRel exists
			and   RemainingToBeSpread != 0)
		NoSpreadForEffectiveDate
			restricted
			when (ContractLineSpreadRel exists
			and   Contract.EffectiveDate != all ContractLineSpreadRel.SpreadDate)

		CanRemoveHold
			restricted
			when (OnHold
			and   Contract.OnHold = false
			and   !Contract.ContractInactiveClosed
			and   !Contract.ContractTemplate
			and   !DistWithMfgLineHeld)

		CanRemoveHoldFromManuf
			restricted
			when (OnHold
			and   Contract.OnHold = false
			and   !Contract.ContractInactiveClosed
			and   !Contract.ContractTemplate)

		CanRemoveManufacturerLineOnlyHold
			restricted
			when (HoldManufacturerLineOnly
			and   !OnHold
			and   Contract.OnHold = false
			and   !Contract.ContractInactiveClosed
			and   !Contract.ContractTemplate)

		CanRemoveEitherHold
			restricted
			when (CanRemoveHold
			or    CanRemoveManufacturerLineOnlyHold)

		DistWithMfgLineHeld
			restricted
			when ((IsDistributorWithManufacturerContract)
			and  (MfgContractLineRel.OnHold
  			or    MfgContractLineRel.Contract.OnHold))

		DistWithMfgLineHeldMessage
			restricted
			when (IsDistributorWithManufacturerContract
			and   MfgContractLineRel.OnHold)

		DistWithMfgLineClosed
			restricted
			when (IsDistributorWithManufacturerContract
			and   MfgContractLineRel.ContractLineState.Closed)

		DistWithMfgLine
			restricted
			when (IsDistributorWithManufacturerContract
			and   MfgContractLineRel exists)

		VendorItemActive
			restricted
			when (VendorItem.Active)

		DistributionExists
			restricted
			when (ContractLineDistributionRel exists)

		VendorItemActiveOrNew
			restricted
			when (VendorItemActive
			or   !HasVendorItem)
		ContractLineCommentExists
			restricted
			when (ContractLineComment set exists)
		ContractLineDistExists
			restricted
			when (ContractLineDistribution set exists)
		CanUpdateBlankItem
			restricted
			when (Contract.ContractStatus.Active
			or 	  Contract.ContractStatus.Addendum
			or    Contract.ContractStatus.Amendment)
		ContractNotClosedOrInactive
			restricted
			when (!Contract.ContractStatus.Closed
			and   !Contract.ContractStatus.Inactive)
		ContractNotClosed
			restricted
			when (!Contract.ContractStatus.Closed)
		ContractNotHeld
			restricted
			when (Contract.OnHold = false)
		CanCreate
			restricted
			when (ContractNotClosed
			and   !Contract.BudgetEditInProgress
			and   !ChangeOrderOnly)
		SpecialOrService
			restricted
			when (ItemType.Special
			or    ItemType.Service)
		DistributorLinesExistWithNoModifications
			restricted
			when (DistributorContractLineRel exists
			and   DistributorModifications.NoModificationsToUpdate)
		IncompleteDistributions
			restricted
			when (IncompleteGLDistributionsRel exists)

		FromManufacturerContract
			restricted
			when (ManufacturerContract != Contract
			and   LineExists)
		LineExists
			restricted
			when (ContractLine > 0)
		OpenFromManufacturerContract
			restricted
			when (FromManufacturerContract
			and  !ContractLineState.Closed)
		NotFromManufacturerContractOrItemmast
			restricted
			when (!FromManufacturerContract
			and   !ItemType.Itemmast)
		ItemmastForCommodityCode
			restricted
			when  (ItemType.Itemmast)
		FromManufacturerContractNotItemmast
			restricted
			when (FromManufacturerContract
			and   !ItemType.Itemmast)
		HasItemmastUsage
			restricted
			when (ItemNumber.ItemmastUsage set exists)
		HasItemmastUsageContractAmounts
			restricted
			when (ItemmastUsageContractAmount set exists)
		HasContractNegotiationContract1FilledContract2EmptyRel
			restricted
			when (ContractNegotiationContract1FilledContract2EmptyRel exists)
		OnEvent
			restricted
			when (EventLineSourceRel exists)
		FromEvent
			restricted
			when (SourcingEventNumber entered)
		HasUnreleasedPoLine
			restricted
			when (UnreleasedPolineRel exists)
		HasUnreleasedReqLine
			restricted
			when (UnreleasedRequisitionLinesRel exists)
		HasPurchaseOrderInterface
			restricted
			when (UnprocessedPOInterfaceRel exists)
		HasPrefMan
			restricted
			when (ContractPreferredManufacturerRel exists)
		HasPoLine
			when (PoLineRel exists)
		IsPreferredContract
			restricted
			when (Contract.PreferredContract)
		IsPreferredLine
			restricted
			when (PreferredLine = true)
		HasItemmast
			restricted
			when (ItemmastRel exists)
		ItemNotInUse
			restricted
			when (HasItemmast
			and   ItemmastRel.NotAvailableForUse)
		HasVendorItem
			restricted
			when (PovenitemRel exists)
		HasManufacturerInformation
			restricted
			when (ManufacturerNumber entered)
		HasFullManufacturerInformation
			restricted
			when (HasManufacturerInformation
			and   Manufacturer entered)

		IsValidRetainageCostOption
			restricted
			when (CostOption.CostRequired
			or   (CostOption.VendorDetermined and not ItemType.Service))

		SelectedForNegotiateLessThanTwo
			restricted
			when (OtherRecordsSelectedForNegotiate < 2)
		DeleteLineAvailable
			restricted
			when ((DraftLine
			or     AmendLine)
			and   !ContractLineState.Closed
			and   !Contract.InMatrixApprovalProcess
			and   !Contract.BudgetEditInProgress
			and   !CannotUpdateGPO
			and   !ChangeOrderOnly)

		DeleteLineAvailableWithTemplate
			restricted
			when (DeleteLineAvailable
			and   HasProcurementTemplateLines)
		DeleteLineAvailableNoTemplate
			restricted
			when (DeleteLineAvailable
			and   !HasProcurementTemplateLines)
		SpecialItemNotSelectedForItemCreation
			restricted
			when  (!SelectedForItemCreation
			and    ItemType.Special
			and    !ContractLineState.Closed
			and     HasManufacturerInformation)

		SpecialItemNotSelectedForItemCreationCalculatePurchases
			restricted
			when  (!SelectedForItemCreation
			and    ItemType.Special
			and    !ContractLineState.Closed
			and     HasManufacturerInformation
			and     CanUseForCostDefaulting)

		VendorItemDoesNotMatchItem
			restricted
			when (VendorItemWithDifferentItemRel exists)

		GlobalTradeItemNumberExists  
			restricted
			when (IcitemgtinRel exists)
		LowUOMCodeGTINExists 
			restricted 
			when (LowUOMCodeGTINExistsRel exists)
		LowUOMCodeHibccUPNExists 
			restricted 
			when (LowUOMCodeHibccUpnExistsOnItemRel exists)

		GlobalTradeItemNumberExistsSomewhere
			restricted
			when (ItemGTINAllRel exists)
		ManufacturerContractAndLineAlreadyAdded
			restricted
			when (Contract.ManufacturerOrDistributor.ManufacturerContract
			and   ContractLine exists)
		LineAvailableForDistributorNotCreated
			restricted
			when (Contract.ManufacturerWithMembers
			and   ContractLine exists
			and   CreateDistributorContractLine
			and  !DistributorContractLineRelExists)
		LineNotAvailableForDistributor
			restricted
			when (Contract.ManufacturerWithMembers
			and   ContractLine exists
			and   !CreateDistributorContractLine)
		DistributorContractLineRelExists
			restricted
			when (DistributorContractLineRel exists)
		DistributorContractLineLinkRelExists
			restricted
			when (DistributorContractLineLinkRel exists)
		DistributorContractLineQuantityOrderedRelExists
			restricted
			when (DistributorContractLineQuantityOrderedRel exists)
		NonDirectBuyItem
			restricted
			when (CanUseForCostDefaultingSomeLevel	= false
			and   Contract.ManufacturerOrDistributor.ManufacturerContract)
		DistributorContractLineNonManufacturerContract
			restricted
			when (Contract.IsDistributorContract
			and   ManufacturerContract		= Contract)
		NonDirectBuySpecialItemWithManufacturerNumber
			restricted
			when (NonDirectBuyItem
			and   ItemType.Special
			and   ManufacturerNumber entered
			and   ManufacturerNumber = VendorItem)

		MfgVendorItemMatchesDistVendorItem
			restricted
			when (!VendorItem exists
			and   ManufacturerContract != Contract
			and   VendorItem = MfgContractLineRel.VendorItem)

		MfgDescription3Entered
			restricted
			when (MfgContractLineRel.ItemDescription3 entered)
		MismatchWithVendorItem
			restricted
			when (VendorItem exists
			and  (VendorItem.Manufacturer.ManufacturerCode                 != Manufacturer.ManufacturerCode
			or    VendorItem.Manufacturer.ManufacturerDivision             != Manufacturer.ManufacturerDivision
			or    VendorItem.ManufacturerNumber               			   != ManufacturerNumber))
		MismatchWithGTIN
			restricted
			when (GlobalTradeItemNumberExists
			and  (ItemGTINByItemRel.Manufacturer.ManufacturerCode                 != Manufacturer.ManufacturerCode
			or    ItemGTINByItemRel.Manufacturer.ManufacturerDivision             != Manufacturer.ManufacturerDivision
			or    ItemGTINByItemRel.ManufacturerNumber               			  != ManufacturerNumber))
		NoMismatchWithVendorItem
			restricted
			when (HasVendorItem
			and   VendorItem.ManufacturerNumber entered
			and   ManufacturerNumber entered
			and   VendorItem.Manufacturer.ManufacturerCode     								= Manufacturer.ManufacturerCode
			and   VendorItem.Manufacturer.ManufacturerDivision 								= Manufacturer.ManufacturerDivision
			and   VendorItem.ManufacturerNumber     										= ManufacturerNumber)
		NoMismatchWithManufacturerContractLine
			restricted
			when ((FromManufacturerContract
			and    MfgContractLineRel.ManufacturerNumber entered
			and    MfgContractLineRel.Manufacturer.ManufacturerCode     = Manufacturer.ManufacturerCode
			and    MfgContractLineRel.Manufacturer.ManufacturerDivision = Manufacturer.ManufacturerDivision
			and    MfgContractLineRel.ManufacturerNumber       			= ManufacturerNumber)
			or    (!FromManufacturerContract))
		MismatchWithManufacturerContractLine
			restricted
			when  (FromManufacturerContract
			and    MfgContractLineRel.ManufacturerNumber entered
			and   (MfgContractLineRel.Manufacturer.ManufacturerCode     != Manufacturer.ManufacturerCode
			or     MfgContractLineRel.Manufacturer.ManufacturerDivision != Manufacturer.ManufacturerDivision
			or     MfgContractLineRel.ManufacturerNumber			    != ManufacturerNumber))
		ItemFoundFromManufacturerInformation
			when (DefaultVendorItemFromManufacturerInformationRel exists)
		BaseCostEntered
			restricted
			when (BaseCost > 0
			or	  CostOption.NoCharge)

		EffectiveAndExpirationDatesCross
			restricted
			when (EffectiveExpirationDatesCrossRel exists)

		LineNotInactiveOrClosed
			restricted
			when (ContractLineState.Draft
			or	  ContractLineState.Active
			or	  ContractLineState.Amendment)

		PoitemvenExistsForVendorItem
			restricted
			when (GetVendorItemSetRel exists)

		LineErrorsExist
			restricted
			when (ContractLineErrorRel exists)

		InactiveErrorsExist
			restricted
			when (ContractLineInactiveErrorRel exists)

		OtherErrorsExist
			restricted
			when (ContractLineOtherErrorRel exists)

		ClassActorContextExists
			restricted
			when (ActorContextClassRel exists)

		SubClassActorContextExists
			restricted
			when (ActorContextSubClassRel exists)

		ExistingLineForChangeOrder
			restricted
			when (ChangeOrderNewLineRel exists)

		ChangeOrdersExist
			restricted
			when (ChangeOrderLineDetailRel exists)

		ChangeOrdersExistForCurrentVersion
			restricted
			when (ChangeOrderLineDetailCurrentVersionRel exists)

		ChangeOrderOnly
			restricted
			when (Contract.HasBeenActivated
			and   Contract.AllowChangeOrder
			and  !Contract.ChangeOrderAllowUpdates)

		ShowChangeOrderDetails
			restricted
			when (Contract.HasBeenActivated
			and   Contract.AllowChangeOrder)

		NotNewChangeOrderLine
			restricted
			when ((!Contract.AllowChangeOrder)
			or    (Contract.AllowChangeOrder
			and   !ExistingLineForChangeOrder)
			and   !ContractLineState.Closed)

		ContractIsRebateQualifierContract
			restricted
			when (Contract.ContractOnRebateQualifierContractRel exists)

		NonManufCanUseForCostDefaulting
			restricted
			when (Contract.NotTemplateNotManufacturer
			and   !Contract.ServicePurchaseType)

		OnHoldAndNotInterfaced
			restricted
			when  (OnHold
			and   !HasBeenActivated)

		NoMembersExist
			restricted
			when (!AnyTierMembersRel exists
			and   !AnyLineMemberRel exists)

		HoldOnSomething
			restricted
			when (HoldOnLine
			or HoldOnContract
			or HoldFromContractInactivation
			or DistWithMfgLineHeldMessage)

		NoHoldOnLine	
			restricted
			when (!OnHold
			and  !HoldManufacturerLineOnly)

		HoldOnLine
			restricted
			when (ContractNotHeld
			and  (OnHold
			or    HoldManufacturerLineOnly))
		HoldOnContract
			restricted
			when (Contract.OnHold
			and  !ContractLineState.Inactive)

		HoldFromContractInactivation
			restricted
			when (ContractLineState.Inactive)

		DistLinesNotOnHold	
			restricted
			when (DistributorContractLineRelExists
			and  !OnHold
			and  !ContractLineState.Closed)

		DistLinesOnHold
			restricted
			when  (DistributorContractLineRelExists
			and   (OnHold
			or     ContractLineState.Closed
			or     ContractLineState.Inactive))

		NotStandingAndNotAmountServiceCode
			restricted
			when (!Contract.StandingPurchaseType
			and   !ServiceCode.Amount)

		StillDraftLine
			restricted
			when (Contract.ContractChangesExist
			and   ContractLineState.Draft)

		UpdateableDraftLine
			restricted
			when (StillDraftLine
			or    DraftLine)

		CanUpdate
			restricted
			when (UpdateableDraftLine
			and  !Contract.InMatrixApprovalProcess
			and  !Contract.BudgetEditInProgress
			and  !Contract.ActivationInProgress)

		FixedTier
			restricted
			when (ContractFixedTierRel exists)

		CanDisplayTierCostPanel
			restricted
			when (IsManufacturerWithFixedTier
			or    ContractLineTierCostExists)

		IsManufacturerWithFixedTier
			restricted
			when (IsManufacturerContract
			and   FixedTier)

		IsManufacturerWithFixedTierAndCanCreate
			restricted
			when (IsManufacturerWithFixedTier
			and   CanCreate)

		IsManufacturerNoFixedTier
			restricted
			when (IsManufacturerContract
			and  !FixedTier)

		ContractLineTierCostExists
			restricted
			when (ContractLineTierCostRel exists)

		BuyerRequiresCommodityCode
			restricted
			when (Contract.Buyer entered
			and   Contract.Buyer.RequireCommodityCode)

		ManyItemsWithManufacturerInformation
			when (ItemByManufacturerCount > 1)

		LineClosed
			when (ContractLineState.Closed)

		LineNotClosed
			restricted
			when (!ContractLineState.Closed)

		CanCloseLine
			restricted
			when (LineNotClosed
			and   !ExistingLineForChangeOrder
			and   !CannotUpdateGPO
			and   !ChangeOrderOnly)
		
		LineClosedHeaderNotClosed
			restricted
			when (ContractLineState.Closed
			and   !Contract.ContractStatus.Closed)

		ContractLineStateSameAsContractStatus	
			restricted
			when ((ContractLineState.Draft
			and   Contract.ContractStatus.Draft)
			or   (ContractLineState.Active
			and   Contract.ContractStatus.Active)
			or   (ContractLineState.Amendment
			and   Contract.ContractStatus.Amendment)
			or   (ContractLineState.Amendment
			and   Contract.ContractStatus.Addendum)
			or   (ContractLineState.Inactive
			and   Contract.ContractStatus.Inactive)
			or   (ContractLineState.Closed
			and   Contract.ContractStatus.Closed)
			or   (Contract.ContractStatus.Released
			and   (ContractLineState.Draft
			or     ContractLineState.Amendment))
			or   (Contract.ContractStatus.Negotiation
			and   (ContractLineState.Draft
			or     ContractLineState.Amendment))
			or   (Contract.ContractStatus.FinalApproval
			and   (ContractLineState.Draft
			or     ContractLineState.Amendment))
			or   (Contract.ContractStatus.ReadyToActivate
			and   (ContractLineState.Draft
			or     ContractLineState.Amendment)))

		ShowInvoiceDetailsFromContractLine
			when (CanUseForInvoicePayment
			and   ContractLineState.Active
			and  !ErrorsExist
			and  !CostOption.VendorDetermined
			and  !OnHold)

		VendorDeterminedLine
			when (CostOption.VendorDetermined)
		
		UpdateInvoiceDetailsFromContractLineValid
			restricted
			when (ShowInvoiceDetailsFromContractLine
			and   PayablesInvoice.IsUpdateable)

		AddInvoiceDetailsFromContractLineValid
			restricted
			when (!InvoiceDetailsExist
			and   UpdateInvoiceDetailsFromContractLineValid
			and  (LifetimeMaximumQuantity > 0
			or    ServiceCode.Amount)
			and  !Contract.ContractTemplate)

		LifetimeMaximumQuantityEntered
			restricted
			when (LifetimeMaximumQuantity > 0)
		
		DeleteInvoiceDetailsFromContractLineValid
			restricted
			when (InvoiceDetailsExist
			and   UpdateInvoiceDetailsFromContractLineValid)

		InvoiceDetailsExist
			restricted
			when (PayablesInvoiceDetailForInvoiceRel exists)

		InvoiceDistributionsOutOfBalance
			restricted
			when (InvoiceDetailsExist
			and   !PayablesInvoiceDetailForInvoiceRel.DistributionsInBalance)

		HasASpecialItemOption
			restricted
			when (SpecialItemOptions.KeepAsSpecialItem
			or    SpecialItemOptions.CreateItemOnActivation
			or    SpecialItemOptions.CreateItemWithProcess)
		HasSupplierContractLineComments
			restricted
			when (SupplierContractLineCommentsRel exists)
		HasSupplierContractLineAttachments
			restricted
			when (SupplierContractLineAttachmentsRel exists)
		HasProcurementTemplateLines
			restricted
			when (ProcurementTemplateLineRel exists)
		HasNoProcurementTemplateLines
			restricted
			when (ProcurementTemplateLineRel !exists)
		HasDistributionsWithCommitments
			restricted
			when (DistributionsWithCommitmentsRel exists)
		PriceBreakSomewhere
			restricted
			when (ContractPricingExists
			or    IsMarkup
			or    IsDiscount)
		ContractPricingExists
			restricted
			when (AnyContractPricingRel exists)
		IsMarkup
			restricted
			when (PricingMarkupOrDiscount.Markup
			or    ConsignmentPricingMarkupOrDiscount.Markup)
		IsDiscount
			restricted
			when (PricingMarkupOrDiscount.Discount
			or	  ConsignmentPricingMarkupOrDiscount.Discount)
		PriceBreaksAllowed
			restricted
			when (!AmountTypeItemOnServiceContract
			and   NotStandingPurchaseType
			and   IsNotDistributorAndNotManufacturer
			and   !ContractPricingExists)
		CsnPriceBreaksAllowed
			restricted
			when (!ServiceItemOnNonServiceContract
			and   !ServicePurchaseTypeContract
			and   NotStandingPurchaseType
			and   IsNotDistributorAndNotManufacturer
			and   !ContractPricingExists
			and   ItemNumber.Consignment)
		NoPriceBreaksAllowed
			restricted
			when (!PriceBreaksAllowed)
		NoCsnPriceBreaksAllowed
			restricted
			when (!CsnPriceBreaksAllowed)
		DefaultingContractLineForItemNumber
			restricted
			when (ItemHasContractLineForCostDefaultingRel exists)

		LineDiscountExists
			restricted
			when (ContractLinePriceDiscountRel exists)
		LineMarkupExists
			restricted
			when (ContractLinePriceMarkupRel exists)
		HasTierMembersForDistributor
			when (DistributorTierMembersRel exists)
		HasTierMembersForManufacturer
			when (ManufacturerTierMembersRel exists)
		PriceBreaksExist
			restricted
			when (LinePriceBreakOn.Quantity
			or    LinePriceBreakOn.Amount
			or    ConsignmentLinePriceBreakOn.Quantity
			or    ConsignmentLinePriceBreakOn.Amount)
		NotConsignment
			restricted
			when (ItemNumber !exists
			or    ItemNumber.Consignment = false)
		SuggestedItemsExist
			restricted
			when (SuggestedItemsRel exists)
		OpenSuggestedItemsExist
			restricted
			when (SuggestedItemsOpenRel exists)
		ResolvedSuggestedItemsExist
			restricted
			when (SuggestedItemsResolvedRel exists)
		NoContractLineImport   
			restricted
			when (ContractLineImportGPORel !exists)
		FromContractLineImport   
			restricted
			when (ContractLineImportGPORel exists)
		NoContractLineImportByManufacturer
			restricted
			when ((!AttributesInUse
			and     ContractLineImportByManufacturerGPORel !exists)
			or     (AttributesInUse
			and     ContractLineImportDirectRel !exists))
		ContractLineImportByManufacturer
			restricted
			when (ContractLineImportByManufacturerGPORel exists)
		ContractLineImportByManufacturerDirect
			restricted
			when (ContractLineImportDirectRel exists)
		HasRQLineSource
			restricted
			when (RQSourcingEventLineSource exists)
		CannotUpdateGPO
			restricted
			when (ContractGroup.DoNotAllowGPOUpdates
			and   Contract.HasGPORelatedContract)
		GPOContract
			when (Contract.GPONegotiated)
		PatientChargeItemsExist
			restricted
			when (PatientChargeItemsRel exists)
		InactiveVendorItemOnly
			when (ErrorsExist = true
			and   ContractLineVendorInactiveErrorRel exists
			and   ContractLineNotVendorInactiveErrorRel !exists)
		NotAvailableForUse
			when (ContractLineSpecialItemLinkRel exists
			and   SpecialItem)
		GTINDoesNotExist
			when (ItemNumberExists
			and   GlobalTradeItemNumber entered
			and   GlobalTradeItemNumber not exists)

		ShowMessages
			restricted
			when (NotAvailableForUse
			or ItemNotInUse)

		ShowPricing
			restricted
			when (PriceBreaksAllowed
			or CsnPriceBreaksAllowed
			or (PriceBreakSomewhere
			and ContractPricingExists))

		IsComponentGroupItem 
			restricted 
			when (ContractCapitatedComponentGroupItemRel exists)
		
		HasCompanyLocationComponents 
			restricted 
			when (ContractCapitatedCompanyLocationItemRel exists)
		IsNotComponentGroupItem 
			restricted 
			when (!IsACapitatedProcedure
			and    ContractCapitatedComponentGroupItemRel !exists)

		IsNotComponentGroupItemNoProcedure 
			restricted 
			when (!IsACapitatedProcedure
			and    ContractCapitatedChargeItemRel !exists)

		OpenAndIsNotComponentGroupItem
			restricted
			when (!LineClosed
			and    IsNotComponentGroupItem)
		IsACapitatedProcedure 
			restricted 
			when (CapitatedProcedure > 0)
		CanCopyProcedure 
			restricted 
			when (LineNotClosed
			and   IsACapitatedProcedure)
		IsNotACapitatedProcedure
			restricted
			when (CapitatedProcedure = 0)
		PrimaryOrRevisionProcedure 
			restricted 
			when (CapitatedProcedure = 1)
		PrimaryProcedure 
			restricted 
			when (CapitatedProcedure = 2)
		RevisionProcedure 
			restricted 
			when (CapitatedProcedure = 3)
		EitherPrimaryProcedure 
			restricted 
			when (CapitatedProcedure = 1
			or    CapitatedProcedure = 2)
		EitherRevisionProcedure 
			restricted 
			when (CapitatedProcedure = 1
			or    CapitatedProcedure = 3)
		NoComponentGroup 
			restricted 
			when (IsACapitatedProcedure
			and   ContractCapitatedComponentGroupRel !exists)
		HasAComponentGroup 
			restricted 
			when (ContractCapitatedComponentGroupRel exists)
		HasAComponentGroupWithNoComponents
			restricted 
			when (ContractCapitatedComponentGroupNoComponentRel exists)
		SupplierSameAsContractSupplier
			restricted
			when (Contract.Supplier = actor.agent(SupplierSourceId).Supplier)			
		SupplierCanSelectContracts
			restricted
			when (actor.agent(SupplierSourceId).AllowContractSearch)
		ContractOrCatalogTypeContract
			restricted 
			when (Contract.ContractOrCatalog)
		IsASupplierOrCapitatedRequisition 
			restricted
			when (IsASupplier
			or    actor.agent(Employee).RequesterRel.SupplierRequisitionReviewer
			or    actor.agent(Employee).BuyerRel.CanCreateCapitatedRequisition)
		HasChargeableComponentItem 
			restricted 
			when (ContractCapitatedChargeItemRel exists)
		NoChargeableComponentItem
			restricted 
			when (ContractCapitatedChargeItemRel !exists)		
		CanCreateNonProcedureComponentItem 
			restricted 
			when (!Contract.CapitatedComponentsOnly
			and    NoChargeableComponentItem
			and    ContractCapitatedComponentGroupOnlyMixedRel exists)
		MixedProcedureLevels
			restricted 
			when (PrimaryProcedureRequisitionLineRel  exists
			and   RevisionProcedureRequisitionLineRel exists)
		NoProcedureOnReq
			restricted 
			when (PrimaryProcedureRequisitionLineRel  !exists
			and   RevisionProcedureRequisitionLineRel !exists)
		CanDisplaySpread 
			restricted 
			when (Contract.CanDisplaySpread 
			and   UseCommitments)
		CanDisplayManufacturingDate
			restricted
			when ((actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    actor.agent(SupplierSourceId).SupplierSourceId.SupplierViewManufacturingDate)
			or    (!actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewManufacturingDate))

		CanDisplayExpirationDate
			restricted
			when ((actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    actor.agent(SupplierSourceId).SupplierSourceId.SupplierViewExpirationDate)
			or    (!actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewExpirationDate))

		CanDisplayLot
			restricted
			when ((actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    actor.agent(SupplierSourceId).SupplierSourceId.SupplierViewLotNumber)
			or    (!actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewLotNumber))

		CanDisplaySerialNumber
			restricted
			when ((actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    actor.agent(SupplierSourceId).SupplierSourceId.SupplierViewSerialNumber)
			or    (!actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewSerialNumber))

		CanDisplayGTIN	
			restricted
			when ((actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    actor.agent(SupplierSourceId).SupplierSourceId.SupplierViewGTIN)
			or    (!actor.agent(SupplierSourceId).SupplierSourceId.ProcedureDetailsFromContact
			and    SupplierGroupRel.SupplierViewGTIN))
		LowUOMCodeGTINForItemNotStockUOM
			restricted 
			when (ItemType.Itemmast
			and   UOM.UnitOfMeasure != ItemNumber.StockUOM 
			and   LowUOMCodeGTINFromItemRel exists)
		LowUOMCodeHibccUPNForItemNotStockUOM
			restricted 
			when (ItemType.Itemmast
			and   UOM.UnitOfMeasure != ItemNumber.StockUOM 
			and   LowUOMCodeHibccUpnExistsOnItemRel exists)
		SpecialItemLowUOMCodeEntered 
			restricted 
			when (ItemType.Special
			and   LowUOMCode entered
			and   LowUOMCode != UOM.UnitOfMeasure)
		InvoiceLineExceedsRemainingAmount
			restricted
			when (ItemType.Service
			and   ServiceCode.Amount
			and   PayablesInvoice exists
			and   PayablesInvoice.IsNotMatched
			and   PrmUnitCost > ContractLine.DerivedRemainingAmountInUse)

		InvoiceLineExceedsRemainingQuantity
			restricted
			when (ItemType.Service
			and   ServiceCode.Quantity
			and   PayablesInvoice exists
			and   PayablesInvoice.IsNotMatched
			and   LifetimeMaximumQuantityEntered
			and   PrmQuantity > ContractLine.DerivedRemainingQuantityOrdered)

		HasDirectLinkToContractLineImport 
			restricted 
			when (ContractLineImportDirectRel exists)
		AttributesInUse 
			restricted 
			when (ContractGroup.AutoUpdateAttributesAllowed)
		HasVendorItemUpdatesFromAttributes 
			restricted 
			when (VendorItemSuggestedItemsAcceptedRel exists)
		HasAttributeUpdates 
			restricted 
			when (AttributeUpdatesForLineRel exists)
		
		HasLineDistributionSpreads
			restricted 
			when (ContractLineDistributionSpreadRel exists)
		
		IsValidForActorContext   
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
		 	and   ContractGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))
			
		MyContract
			default label is "MyContracts"
			when (PrimaryContactRel.Contact = actor.agent(Employee).Employee)

    	HasGPOItems
            restricted
            when ((ContractGroup.GPOUsed = 2
            or     ContractGroup.GPOUsed = 4)
			and   !ItemType.Service 
            and    ContractGPOItemRel exists)
       
        HasGHXGPOItems
            restricted
            when (ContractGroup.GPOUsed = 5
            and   ContractGHXGPOItemRel exists)

		HasItemGTINForItem
			restricted 
			when (ItemGTINByItemRel exists)
		
		CanBackorderSpecialItem
			restricted
			when (ItemType.Special
			and   CanUseForCostDefaulting 
			and   HasBeenActivated
			and   VendorBackorderDetailsRel not exists
			and   LineNotClosed 
			and  (ExpirationDate !entered
			or    not PastExpirationDate))

		CanSelectItemForTierQualifier 
			restricted 
			when (TierQualifierItemByManufacturerRel !exists)

		CanCreateTierQualifierItem 
			restricted 
			when (!Contract.ContractTemplate
			and   (Contract.StandingPurchaseType
			or     Contract.BlanketPurchaseType
			or     Contract.ContractOrCatalog))

		DisplayLineCommentSection
			when (LineCommentPrintOnContractRel exists)

		ClinicalLocationExists 
			restricted 
			when (ClinicalContractAndLineLocationRel exists
			or    ClinicalContractAndLineLocationForLineRel exists)

		CanUseForConsolidated 
			restricted 
			when ((ItemType.Special
			or    (ItemType.Itemmast
			and    ItemNumber.ClinicalSystemUse
			and    ClinicalLocationExists))
			and    Manufacturer entered 
			and    ManufacturerNumber entered
			and    LineNotClosed
			and    HasBeenActivated
			and   !OnHold
			and   !ErrorsExist
			and    ManufacturerContract = Contract
			and   (Contract.NonServicePurchaseType
			or     IsManufacturerContract))

		MayUseForConsolidated   
			restricted 
			when  (!ItemType.Service
			and    ClinicalSystemUse
			and    LineNotClosed)			
		
		ConsolidatedItemMasterExists 
			restricted 
			when (ConsolidatedItemMasterRel exists)

		ConsolidatedItemMasterByItemExists 
			restricted 
			when (ConsolidatedItemMasterByItemRel exists)

		HasConsolidatedItemMaster 
			restricted 
			when (HasBeenActivated
			and   ConsolidatedItemMasterExists)
		
		CanCreateLineLocation
			restricted 
			when (LineNotClosed
			and   ClinicalSystemUse
			and   ContextContractAndLineLocation entered)

		MatchingManufacturerInformationNotDistributor 
			restricted 
			when ((MatchingManufacturerInfoCount - DistributorLinesCount) > 0)

		MatchingCurrentManufacturerInformationNotDistributor 
			restricted 
			when ((MatchingCurrentManufacturerInfoCount - DistributorLinesCount) > 0)

		CanUpdateOnlyThisManufacturerInformation 
			restricted 
			when (LineNotClosed
			and   ItemType.Special
			and   Manufacturer entered
			and   ManufacturerNumber entered
			and   MatchingManufacturerInformationNotDistributor
			and  !DistWithMfgLine)

		CanUpdateOnlyThisManufacturerInformationForCurrent 
			restricted 
			when (ContractLineExists
			and   LineNotClosed
			and   ItemType.Special
			and   Manufacturer entered
			and   ManufacturerNumber entered
			and   MatchingCurrentManufacturerInformationNotDistributor
			and  !DistWithMfgLine)			

	Relations
		VendorBackorderDetailsRel
			one-to-many relation to VendorBackorderDetails
			Field Mapping uses ByProcurementGroup
				related.ProcurementGroup 			= ContractGroup
				related.Item 						= ItemNumber
				related.Vendor 						= Vendor
				related.VendorItem 					= VendorItem
			Instance Selection
				where (related.IsOpen)

		VendorBackorderByContractLineRel 
			one-to-many relation to VendorBackorderDetails
			Field Mapping uses ByContractLine 
				related.ProcurementGroup             = ContractGroup 
				related.Contract                     = Contract 
				related.ContractLine                 = ContractLine 
		ContractComplianceInvoiceLinesOnContractRel
			one-to-many relation to ContractComplianceInvoiceLine
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ContractGroup = ContractGroup
				and related.Contract = Contract
				and related.Item = ItemNumber
				and related.ContractComplianceInvoiceLine.OnContractFlag.On
				and (related.DisplayCostVariance > SupplyManagementReportContext.AbovePercentageVariance
					or SupplyManagementReportContext.AbovePercentageVariance not entered)
				and (related.InvoiceVsContractAmountVariance > SupplyManagementReportContext.AboveAmountVariance
					or SupplyManagementReportContext.AboveAmountVariance not entered))

		OpenPolinesByContractRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup		= ContractGroup
		 		related.Contract				= Contract
		 		related.ContractLine            = ContractLine
		 	Instance Selection
		 		where (related.Closed.No
		 		and    related.Released = true)

		ConsolidatedItemMasterOldManufRel 
			one-to-many relation to ConsolidatedItemMaster
			Field Mapping uses ByManufacturerInformation
				related.ContractGroup          = ContractGroup 
				related.Manufacturer           = LocalManufacturer
				related.ManufacturerNumber     = LocalManufacturerNumber			
		
		ConsolidatedItemMasterRel
			one-to-many relation to ConsolidatedItemMaster 
			Field Mapping uses ByManufacturerInformation
				related.ContractGroup          = ContractGroup 
				related.Manufacturer           = Manufacturer
				related.ManufacturerNumber     = ManufacturerNumber

		ConsolidatedItemMasterByItemRel
			one-to-many relation to ConsolidatedItemMaster 
			Field Mapping uses ByInternalItem
				related.ContractGroup          = ContractGroup 
				related.InternalItem           = ItemNumber
			Instance Selection 
				where (ItemType.Itemmast)

		AddAllContractCapitatedComponentGroupItemRel
			one-to-many relation to ContractCapitatedComponentGroupItem 
			Field Mapping uses ByContractLine 
				related.ContractGroup   				= LocalContractGroup
		 		related.Contract						= LocalContract
		 		related.ComponentContractLine   		= LocalComponentContractLine 
				related.ContractLine            		= LocalContractLine
				related.ContractCapitatedComponentGroup	= LocalComponentGroup		

		AddAllContractCapitatedComponentCompanyItemRel
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByComponentLine
				related.ContractGroup   					= LocalContractGroup
		 		related.Contract							= LocalContract
				related.ContractLine            			= LocalContractLine
				related.ContractCapitatedComponentGroup		= LocalComponentGroup		
		 		related.ComponentContractLine           	= LocalComponentContractLine 	
				related.Company                             = LocalCompany 
				related.Location                            = LocalLocation 			

		ContractCapitatedComponentGroupItemRel 
			one-to-many relation to ContractCapitatedComponentGroupItem 
			Field Mapping uses ByContractLine 
				related.ContractGroup   		= ContractGroup
		 		related.Contract				= Contract
		 		related.ComponentContractLine   = ContractLine 

		ContractCapitatedCompanyLocationItemRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByContractLine 
				related.ContractGroup   		= ContractGroup
		 		related.Contract				= Contract
		 		related.ComponentContractLine   = ContractLine 

		ContractCapitatedChargeItemRel
			one-to-many relation to ContractCapitatedComponentGroupItem 
			Field Mapping uses ByContractLine 
				related.ContractGroup   		= ContractGroup
		 		related.Contract				= Contract
		 		related.ComponentContractLine   = ContractLine 
				related.ContractLine            = blank

		LocationComponentItemRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByComponentLineNoProcedure 
				related.ContractGroup						= ContractGroup 
		 		related.Contract                            = Contract
		 		related.ComponentContractLine               = ContractLine
				related.Company                             = RequisitionCompanyContext
				related.Location                            = RequisitionContextRel.FromCompanyLocation.FromLocation
		
		CompanyComponentItemRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByComponentLineNoProcedure 
				related.ContractGroup						= ContractGroup 
		 		related.Contract                            = Contract
		 		related.ComponentContractLine               = ContractLine
				related.Company                             = RequisitionCompanyContext
				related.Location                            = blank
		LocalContractCapitatedComponentGroupItemRel
			one-to-many relation to ContractCapitatedComponentGroupItem
			Field Mapping uses ByContractLine 
				related.ContractGroup   				= ContractGroup
		 		related.Contract						= Contract
		 		related.ComponentContractLine   		= ContractLine 
				related.ContractLine            		= LocalProcedureLine 
				related.ContractCapitatedComponentGroup	= LocalComponentGroup		

		LocalOtherContractCapitatedComponentGroupItemRel
			one-to-many relation to ContractCapitatedComponentGroupItem
			Field Mapping uses ByContractLine 
				related.ContractGroup   				= ContractGroup
		 		related.Contract						= Contract
		 		related.ComponentContractLine   		= ContractLine 
				related.ContractLine            		= LocalProcedureLine 
			Instance Selection
				where (related.ContractCapitatedComponentGroup	!= LocalComponentGroup)
		ContractCapitatedComponentGroupRel
			one-to-many relation to ContractCapitatedComponentGroup 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup   		= ContractGroup
		 		related.Contract				= Contract
		 		related.ContractLine            = ContractLine 				

		CopiedContractCapitatedCompanyLocationItemRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByCapitatedItem
				related.ContractGroup   					= ContractGroup
		 		related.Contract							= Contract
		 		related.ContractLine            			= ContractLine 
				related.ContractCapitatedComponentGroup		= LocalComponentGroup
				related.ContractCapitatedComponentGroupItem = LocalCapitatedComponentGroupItem 	
		ContractCapitatedComponentGroupNoComponentRel
			one-to-many relation to ContractCapitatedComponentGroup 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup   		= ContractGroup
		 		related.Contract				= Contract
		 		related.ContractLine            = ContractLine 	
			Instance Selection 
				where (related.NoComponents)
		ContractCapitatedComponentGroupOnlyRel
			one-to-many relation to ContractCapitatedComponentGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup   		= ContractGroup
		 		related.Contract				= Contract	

		ContractCapitatedComponentGroupOnlyMixedRel
			one-to-many relation to ContractCapitatedComponentGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup   		= ContractGroup
		 		related.Contract				= Contract	
				related.ContractLine            = blank		

		PrimaryProcedureRequisitionLineRel 
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company                 = RequisitionCompanyContext
				related.Requisition             = RequisitionContext
			Instance Selection 
				where (related.CapitatedProcedureLevel = 1)

		RevisionProcedureRequisitionLineRel 
			one-to-many relation to RequisitionLine 
			Field Mapping uses symbolic key 
				related.Company                 = RequisitionCompanyContext
				related.Requisition             = RequisitionContext
			Instance Selection 
				where (related.CapitatedProcedureLevel = 2)		

		SupplierGroupRel
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
				related.SupplierGroup     = ContractGroup

		RequestingLocationRel 
			one-to-one relation to RequestingLocation 
			Field Mapping uses symbolic key 
				related.Company           	= LocalCompany 
				related.RequestingLocation	= LocalRequestingLocation
		InventoryLocationRel 
			one-to-one relation to InventoryLocation 
			Field Mapping uses symbolic key 
				related.Company           	= LocalCompany 
				related.InventoryLocation	= LocalLocation

		InventoryCompanyRel 
			one-to-one relation to InventoryCompany 
			Field Mapping uses symbolic key 
				related.Company           	= LocalCompany 		

		ContractParticipantCompanyPricingGroupRel
  			one-to-many relation to ContractParticipant
			Field Mapping uses ByPricingGroup
				related.ContractGroup 											= ContractGroup
				related.ContractParticipant.ParticipantLocation.PricingGroup	= LocalCompanyPricingGroup
				related.Contract      											= Contract
	
		ContractParticipantLocationPricingGroupRel
  			one-to-many relation to ContractParticipant
			Field Mapping uses ByPricingGroup
				related.ContractGroup 											= ContractGroup
				related.ContractParticipant.ParticipantLocation.PricingGroup	= LocalLocationPricingGroup
				related.Contract      											= Contract

		ContractParticipantRequestingLocationPricingGroupRel
  			one-to-many relation to ContractParticipant
			Field Mapping uses ByPricingGroup
				related.ContractGroup 											= ContractGroup
				related.ContractParticipant.ParticipantLocation.PricingGroup	= LocalRequestingLocationPricingGroup
				related.Contract      											= Contract

		ContractParticipantLocationRel
  			one-to-many relation to ContractParticipant
			Field Mapping uses ByLocReqLocSet
				related.ContractGroup 										= ContractGroup
				related.Contract      										= Contract
				related.ContractParticipant.ParticipantLocation.Company     = LocalCompany 
				related.ContractParticipant.ParticipantLocation.Location    = LocalLocation 

		ContractParticipantRequestingLocationRel
  			one-to-many relation to ContractParticipant
			Field Mapping uses ByReqLocLocation
				related.ContractGroup 												= ContractGroup
				related.Contract      												= Contract
				related.ContractParticipant.ParticipantLocation.Company     		= LocalCompany 
				related.ContractParticipant.ParticipantLocation.RequestingLocation	= LocalRequestingLocation
		ContractParticipantCompanyRel		
  			one-to-many relation to ContractParticipant
			Field Mapping uses ByReqLocLocation
				related.ContractGroup 												= ContractGroup
				related.Contract      												= Contract		
				related.ContractParticipant.ParticipantLocation.Company     		= LocalCompany
				related.ContractParticipant.ParticipantLocation.RequestingLocation	= blank
				related.ContractParticipant.ParticipantLocation.Location    		= blank								

		RequisitionContextRel 
			one-to-one relation to Requisition 
			Field Mapping uses symbolic key
				related.Company                 = RequisitionCompanyContext
				related.Requisition             = RequisitionContext

		
		ContractComplianceInvoiceLinesOffContractRel
			one-to-many relation to ContractComplianceInvoiceLine
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ContractGroup	= ContractGroup
				and related.Contract		= Contract
				and related.Item			= ItemNumber
				and related.ContractComplianceInvoiceLine.OnContractFlag.Off
				and (related.DisplayCostVariance > SupplyManagementReportContext.AbovePercentageVariance
				or SupplyManagementReportContext.AbovePercentageVariance not entered)
				and (related.InvoiceVsContractAmountVariance > SupplyManagementReportContext.AboveAmountVariance
				or SupplyManagementReportContext.AboveAmountVariance not entered))

		ContractComplianceInvoiceLineRel
			one-to-one relation to ContractComplianceInvoiceLine
			Field Mapping uses symbolic key
				related.ContractGroup									= ContractGroup
				related.Contract										= Contract
				related.ContractComplianceInvoiceLine.OnContractFlag    = LocalOnContractFlag
				related.ContractComplianceInvoiceLine.Item			    = ItemNumber
				related.ContractComplianceInvoiceLine.Uom				= LocalEntBuyUom
				related.ContractComplianceInvoiceLine.Company			= LocalCompany
				related.ContractComplianceInvoiceLine.Vendor			= LocalVendor
				related.ContractComplianceInvoiceLine.Invoice			= LocalInvoice
				related.ContractComplianceInvoiceLine.Suffix			= LocalSuffix
				related.ContractComplianceInvoiceLine.PoNumber			= LocalPoNumber
				related.ContractComplianceInvoiceLine.PoRelease			= LocalPoRelease
				related.ContractComplianceInvoiceLine.PoCode			= LocalPoCode
				related.ContractComplianceInvoiceLine.LineNbr			= LocalLineNbr
				related.ContractComplianceInvoiceLine.SeqNbr			= LocalSeqNbr

        AttributeUpdatesByManufacturerRel 
            one-to-many relation to ContractLineAttributeUpdate 
            Field Mapping uses ByManufacturerInformation 
                related.ContractGroup           			= ContractGroup 
                related.ManufacturerCode        			= Manufacturer.ManufacturerCode  
                related.ManufacturerDivision    			= Manufacturer.ManufacturerDivision 
                related.ManufacturerPartNumberIdentifier    = ManufacturerNumber   
			Instance Selection 
				where (related.OriginalRecord !entered
				and    related.ErrorsExist = false)     

        AttributeUpdatesForLineRel 
            one-to-many relation to ContractLineAttributeUpdate 
            Field Mapping uses ByContractLine 
                related.ContractGroup           			= ContractGroup 
				related.Contract                            = Contract
				related.ContractLine                        = ContractLine 
		StandingPurchaseOrdersForResultThisContractRel
			one-to-many relation to PurchaseOrder
			Field Mapping uses ByInterfaceRun
				related.OriginatingInterfaceRun  = LocalResult
			Instance Selection
				where (related.BlanketOrStandingContract = Contract)

		ContractPolineDistributionsByContractRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses ByContract
		 		related.Contract 		= Contract
		 	Instance Selection
		 		where (related.Company.ProcurementGroup = ContractGroup
		 		and    related.CommitmentExists
		 		and    related.PurchaseOrderLine.ContractLine = ContractLine)

   		RequisitionLineDistributionsByContractRel
   			one-to-many relation to RequisitionLineDistribution
   			Field Mapping uses ByContract
   				related.Contract        = Contract
   			Instance Selection
		 		where (related.PurchasingCompanyRel.ProcurementGroup = ContractGroup
		 		and    related.CurrentCommitmentExists
		 		and    related.RequisitionLine.ContractLine  = ContractLine)

		ManufacturerItemReplenishmentRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses ByVendorAndItem
				related.Vendor           = Contract.Vendor
				related.Item             = ItemNumber
			Instance Selection
				where (related.Company   			= any AnyTierMembersRel.ContractTierMember.Company
				and    related.InventoryLocation  	= any AnyTierMembersRel.ContractTierMember.Location)

 		DistributorItemReplenishmentRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses ByVendorAndItem
				related.Vendor           = Contract.Vendor
				related.Item             = ItemNumber
			Instance Selection
				where (related.Company   			= any AllPricingMembersRel.ContractDistributorPricingMember.Company
				and    related.InventoryLocation  	= any AllPricingMembersRel.ContractDistributorPricingMember.Location)

		BaseItemReplenishmentRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses ByVendorAndItem
				related.Vendor           = Contract.Vendor
				related.Item             = ItemNumber

		ParticipantItemReplenishmentRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses ByVendorAndItem
				related.Vendor	= Contract.Vendor
				related.Item	= ItemNumber
			Instance Selection
				where (related.Company				= any ContractParticipantRels.ContractParticipant.ParticipantLocation.Company
				and    related.InventoryLocation	= any ContractParticipantRels.ContractParticipant.ParticipantLocation.Location)

		ContractLineLocationRel
			one-to-many relation to ContractAndLineLocation 
			delete cascades
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
				related.ContractLine                                = ContractLine

		ContractLocalLineLocationRel
			one-to-one relation to ContractAndLineLocation 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= LocalContract
				related.ContractLine                                = LocalCopyContractLine	
				related.ContractAndLineLocation.Company             = LocalCompany 
				related.ContractAndLineLocation.Location            = LocalLocation			
				related.ContractAndLineLocation.RequestingLocation  = LocalReqLocation

		ContextContractLocalLineLocationRel
			one-to-one relation to ContractAndLineLocation 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
				related.ContractLine                                = ContractLine	
				related.ContractAndLineLocation.Company             = ContextContractAndLineLocation.Company 
				related.ContractAndLineLocation.Location            = ContextContractAndLineLocation.Location			
				related.ContractAndLineLocation.RequestingLocation  = ContextContractAndLineLocation.RequestingLocation				

		ClinicalContractAndLineLocationRel
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ClinicalSystemUse
				and    related.LineLevel = false)

		ClinicalContractLocationLineLevelRel
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ClinicalSystemUse
				and    related.LineLevel = true)

		ClinicalContractAndLineLocationForLineRel
			one-to-many relation to ContractAndLineLocation 
			delete cascades 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
				related.ContractLine                                = ContractLine 
			Instance Selection 
				where (related.ClinicalSystemUse)

		ClinicalContractAndLineLocationNavigationRel
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses symbolic key 
				related.ContractGroup       						= ContractGroup
				related.Contract            						= Contract
			Instance Selection 
				where (related.ClinicalSystemUse
				and   (related.LineLevel = false
				or     related.ContractLine = ContractLine))				

		ItemmastContractLineRel
			one-to-one relation to ItemmastContractLine
			Field Mapping uses symbolic key
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractLine                = ContractLine
				related.Item                        = ItemNumber

		OpenContractPolineDistributionsByContractRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses ByContract
				related.Contract = Contract
			Instance Selection
				where (related.Company.ProcurementGroup = ContractGroup
				and    related.CommitmentExists
				and    related.GLCommitRel.TransactionAmount > 0
				and    related.PurchaseOrderLine.ContractLine  = ContractLine)

		OpenRequisitionLineDistributionsByContractRel
			one-to-many relation to RequisitionLineDistribution
			Field Mapping uses ByContract
				related.Contract = Contract
			Instance Selection
				where (related.PurchasingCompanyRel.ProcurementGroup = ContractGroup
				and    related.CurrentCommitmentExists
				and    related.GLCommitRel.TransactionAmount > 0
				and    related.RequisitionLine.ContractLine  = ContractLine)

		ItemLocationRel   
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company              = LocalCompany
				related.InventoryLocation    = LocalLocation
				related.Item                 = ItemNumber

		ContractLineSpecialItemLinkRel
			one-to-one relation to ContractLineSpecialItemLink
			Field Mapping uses ByContractLine
				related.ItemGroup                    = ContractGroup
				related.Contract                     = Contract
				related.ContractLine                 = ContractLine

		RecallProductTransactionRel
			one-to-many relation to RecallProductTransaction
			Field Mapping uses symbolic key
				related.RecallGroup                  = LocalRecallGroup
				related.RecallNotice                 = LocalRecallNotice
				related.RecallProduct                = LocalRecallProduct
			Instance Selection
				where (related.ContractLineGroup.ContractGroup 	= ContractGroup
				and    related.ContractLineGroup.Contract		= Contract
				and    related.ContractLineGroup.ContractLine   = ContractLine)

		KeywordShadowRel
			one-to-one relation to KeywordShadow
			Field Mapping uses ByContractLine
  				related.ItemGroup		=	ContractGroup
  				related.Contract		=	Contract
  				related.ContractLine	= 	ContractLine

		ItemKeywordShadowRel
			one-to-one relation to KeywordShadow
			Field Mapping uses ByShadowItem
				related.ItemGroup       = ContractGroup
				related.Item            = ItemNumber

		OldItemKeywordShadowRel
			one-to-one relation to KeywordShadow
			Field Mapping uses ByShadowItem
				related.ItemGroup       = ContractGroup
				related.Item            = LocalItemNumber

		VendorItemSuggestedItemsAcceptedRel
			one-to-many relation to ContractLineSuggestedItem
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine
			Instance Selection 
				where (related.MessageNumber = 7
				and    related.SuggestedItemResolution = 2)
		SuggestedItemsRel
			one-to-many relation to ContractLineSuggestedItem
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine

		ItemInformationWorksheetRel 
			one-to-many relation to ItemInformationWorksheet 
			Field Mapping uses ByManufacturerNumber 
				related.ItemGroup       	= ContractGroup 
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber	

		SuggestedItemsOpenRel
			one-to-many relation to ContractLineSuggestedItem
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine
			Instance Selection
				where (related.NotResolved)

		SuggestedItemsResolvedRel
			one-to-many relation to ContractLineSuggestedItem
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine
			Instance Selection
				where (related.Resolved)

		ItemFromStrippedManufacturerNumberRel
			one-to-many relation to Item
			Field Mapping uses Set11
				related.ItemGroup		      		= ContractGroup
				related.ManufacturerNumberStripped  = DerivedStrippedManufacturerNumber
			Instance Selection
				where (related.ManufacturerNumber  != ManufacturerNumber
				and    related.Manufacturer         = Manufacturer)

		VendorItemFromStrippedManufacturerNumberWithManufacturerRel
			one-to-many relation to VendorItem
			Field Mapping uses ByStrippedManufacturerNumber
				related.ProcurementGroup      		= ContractGroup
				related.ManufacturerNumberStripped  = DerivedStrippedManufacturerNumber
				related.Vendor                      = Contract.Vendor
				related.Manufacturer          		= Manufacturer
			Instance Selection
				where (related.ManufacturerNumber  != ManufacturerNumber
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM         = UOM.UnitOfMeasure))

		VendorItemFromStrippedManufacturerNumberRel
			one-to-many relation to VendorItem
			Field Mapping uses ByStrippedManufacturerNumber
				related.ProcurementGroup      		= ContractGroup
				related.ManufacturerNumberStripped  = DerivedStrippedManufacturerNumber
				related.Vendor                      = Contract.Vendor
			Instance Selection
				where (related.ManufacturerNumber  != ManufacturerNumber
				and   ((related.Manufacturer       != Manufacturer)
				or     related.Manufacturer !entered
				and    Manufacturer !entered)
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM         = UOM.UnitOfMeasure))

		VendorItemFromStrippedVendorItemRel
			one-to-many relation to VendorItem
			Field Mapping uses ByStrippedVendorItem
				related.ProcurementGroup      		= ContractGroup
				related.Vendor                      = Contract.Vendor
				related.VendorItemStripped          = DerivedStrippedVendorItem
			Instance Selection
				where (related.VendorItem      	   != VendorItem)

		ProcurementTemplateLineRel
			one-to-many relation to ProcurementTemplateLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup		=	ContractGroup
  				related.Contract				=	Contract
  				related.ContractLine			= 	ContractLine

		ProcurementTemplateLineForThisTemplateRel
			one-to-many relation to ProcurementTemplateLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup		=	ContractGroup
  				related.Contract				=	Contract
				related.ContractLine            =   ContractLine
			Instance Selection
				where (related.ProcurementTemplate = LocalProcurementTemplate)

		ProcurementTemplateLineForThisTemplateServiceRel
			one-to-many relation to ProcurementTemplateLine
			Field Mapping uses ByItemDescription
				related.ProcurementGroup		=	ContractGroup
  				related.ServiceDescription      =   ItemDescription
			Instance Selection
				where (related.ProcurementTemplate = LocalProcurementTemplate)

		ManufacturerNumberIsAlsoAnItemmastRel
			one-to-many relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup = ContractGroup
				related.Item      = ManufacturerNumber

		VendorItemIsAlsoAnItemmastRel
			one-to-many relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup = ContractGroup
				related.Item      = VendorItem
			Instance Selection
				where (related.Item != VendorItem.Item)

		ManufacturerAndVendorItemIsAlsoAnItemmastRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup = ContractGroup
				related.Item      = ManufacturerPlusVendorItem

		ManualItemNumberRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup = ContractGroup
				related.Item      = ManualItemNumber

		TierMemberReleasedRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByReleased
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		AnyTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		DistributorTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PurchaseMethodForDistributor)

		ManufacturerTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.PurchaseMethodForDirectBuy)

		ContractLineTierCostCompareRel
			one-to-many relation to ContractLineTierCost
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract	    	= Contract
				related.ContractLine	  	= ContractLine
			Instance Selection
				where (related.ContractTier = LocalTier)

		PovenitemRel
			one-to-one relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ContractGroup
				related.Item    			= ItemNumber
				related.Vendor				= Contract.Vendor
				related.VendorItem			= VendorItem

		OldVendorItemRel
			one-to-one relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ContractGroup
				related.Item				= ItemNumber
				related.Vendor				= LocalVendor
				related.VendorItem			= VendorItem

		DefaultPovenitemRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ContractGroup
				related.Item				= ItemNumber
				related.Vendor				= Contract.Vendor
			Instance Selection
				where (related.UseAsDefault
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM         = UOM.UnitOfMeasure))

		VenItemManfDflt
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= Contract.Vendor
				related.Manufacturer		= ItemGTINByItemRel.Manufacturer
				related.ManufacturerNumber	= ItemGTINByItemRel.ManufacturerNumber
				related.Item				= ItemNumber
			Instance Selection
				where (related.Active
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM         = UOM.UnitOfMeasure))

		VenItemLineManfDflt
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup				= ContractGroup
				related.Vendor							= Contract.Vendor
				related.Manufacturer         			= Manufacturer
				related.ManufacturerNumber      		= ManufacturerNumber
				related.Item    						= ItemNumber
			Instance Selection
				where (related.Active
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM         = UOM.UnitOfMeasure))

		VenItemHeaderManfDflt
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup				= ContractGroup
				related.Vendor							= Contract.Vendor
				related.Manufacturer         			= Contract.ManufacturerCodeDivision
				related.ManufacturerNumber      		= ManufacturerNumber
				related.Item    						= ItemNumber
			Instance Selection
				where (related.Active
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM         = UOM.UnitOfMeasure))

		GetVendorItemSetRel
			one-to-many relation to VendorItem
			Field Mapping uses Set3
				related.ProcurementGroup  	= ContractGroup
				related.Vendor 				= Contract.Vendor
				related.VendorItem			= VendorItem
			Instance Selection
				where (related.Active)

		GetVendorItemAllRel
			one-to-many relation to VendorItem
			Field Mapping uses Set3
				related.ProcurementGroup  	= ContractGroup
				related.Vendor 				= Contract.Vendor
				related.VendorItem			= VendorItem
			Instance Selection
				where (related.Item.AvailableForUse)

		VendorItemNotAvailableForUse
			one-to-many relation to VendorItem
			Field Mapping uses Set3
				related.ProcurementGroup  	= ContractGroup
				related.Vendor 				= Contract.Vendor
				related.VendorItem			= VendorItem
			Instance Selection
				where (related.Item.NotAvailableForUse)

		PricingMemberReleasedRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByReleased
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		AllPricingMembersRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		DistPricingMemberRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ContractDistributorPricingMember.ManufacturerContract = ManufacturerContract)

		UnreleasedPricingMembersForManufacturerContractRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByUnReleased
				related.ContractGroup 									= ContractGroup
				related.Contract      									= Contract
			Instance Selection
				where (related.ContractDistributorPricingMember.ManufacturerContract = ManufacturerContract)

		ContractLineFromCostCompareEmailRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = LocalContract
			Instance Selection
				where (related.ComparisonOnly)

		ContractCostSavingsRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = LocalContract
			Instance Selection
				where (related.ProcessingType = 5)

		ContractLinePriceUpdateRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.ProcessingType = 1)
									
		ContractLineCostComparisonRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.ProcessingType = 3)

		ContractLineManualPriceUpdateRel
			one-to-many relation to ContractLinePriceChange
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.ProcessingType = 6)
									
		AttachedManufacturerContractsRel
			one-to-many relation to ManufacturerContract
			Field Mapping uses ByMfgNbr
				related.ContractGroup 					= ContractGroup
				related.ManufacturerContractNumber      = Contract
			Instance Selection
				where (related.Contract.NotClosed)

		ContractLinePivotRel
			one-to-one relation to MfgContractLinePivot
			Field Mapping uses symbolic key
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContractPivot   = Contract
				related.MfgContractLinePivot    	= ContractLine

		ContractPivotRel
			one-to-one relation to ManufacturerContractPivot
			Field Mapping uses symbolic key
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContractPivot   = Contract

		ContractLineMemberRel
			one-to-one relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup 				   			= ContractGroup
				related.Contract					   			= Contract
				related.ContractLine		    	   			= ContractLine
				related.ContractLineMember.Company   			= LocalCompany
				related.ContractLineMember.Location  			= LocalLocation
				related.ContractLineMember.RequestingLocation	= LocalReqLocation
				related.ContractLineMember.PricingGroup  		= LocalPricingGroup
				related.ContractLineMember.ManufacturerContract = LocalMfgContract

		ContractLineMemberManufacturerRel
			one-to-one relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup 				   			= ContractGroup
				related.Contract					   			= LocalMfgContract
				related.ContractLine		    	   			= LocalMfgContractLine
				related.ContractLineMember.Company   			= LocalCompany
				related.ContractLineMember.Location  			= LocalLocation
				related.ContractLineMember.RequestingLocation	= LocalReqLocation
				related.ContractLineMember.PricingGroup  		= LocalPricingGroup
				related.ContractLineMember.ManufacturerContract = LocalMfgContract

		LineMemberTierRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.MfgContractTierInfo.Tier entered)

		RelatedContractGPOImportRel
			one-to-many relation to RelatedContract
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.FromContractInterface)

		ContractGPOItemRel
			one-to-many relation to ContractGPOItem
			Field Mapping uses ByGPOContractItems
				related.GPOContractNumber  = Contract.GPOContractImportRel.GPOContractNumber
				related.ManufacturerPart   = ManufacturerNumber
				related.VendorPart         = VendorItem

		ContractGHXGPOItemRel
			one-to-many relation to ContractGPOGHXInterface
			Field Mapping uses ByItem
				related.ContractNumber  		 = Contract.GPOContractImportRel.GPOContractNumber
				related.ManufacturerPartNumber   = ManufacturerNumber
				related.VendorPartNumber         = VendorItem
				related.UOM                      = UOM.UnitOfMeasure

		ContractLineImportGPORel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByVendorItemItem
				related.ContractGroup 	= ContractGroup
				related.ContractImport	= Contract.DerivedGPOContract
				related.VendorItem      = VendorItem
			Instance Selection
				where (related.UOM      = UOM.UnitOfMeasure)

		ContractLineImportDistributorRel
			one-to-many relation to ContractLineImportDistributor
			Field Mapping uses BySupplier
				related.ContractGroup   	= ContractGroup
				related.ContractImport		= MfgContractRel.DerivedGPOContract
				related.DistributorSupplier	= Contract.Supplier
				related.ContractVendorItem  = LocalVendorItem

		ContractLineImportByManufacturerGPORel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByManufacturerNumberGPO
				related.ContractGroup										= ContractGroup
				related.ContractImport										= Contract.DerivedGPOContract
			Instance Selection 
				where (related.ContractManufacturerInformation.Manufacturer			= Manufacturer
				and    related.ContractManufacturerInformation.ManufacturerNumber	= ManufacturerNumber
				and    related.UOM													= UOM.UnitOfMeasure)

		ContractLineImportDirectRel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByContract 
				related.ContractGroup				= ContractGroup
				related.Contract                    = Contract 
				related.ContractLine                = ContractLine 
		
		MfgContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = ManufacturerContract
				related.ContractLine  = ManufacturerContractLine

		MfgContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = ManufacturerContract

		OtherPreferredItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemOpen
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= ItemNumber
			Instance Selection
				where (related.UniqueID != UniqueID
				and    related.PreferredLine
				and    related.ContractLineState.Active)

		OtherKeywordItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemOpen
				related.ContractGroup = ContractGroup
				related.ItemNumber    = ItemNumber
			Instance Selection
				where (related.UniqueID != UniqueID
				and    related.UseForCostDefaulting)

		LineMemberRel                                   
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.Contract = ManufacturerContract)

		LineMemberDistributorRels
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.Contract != ManufacturerContract)

		NonClosedLineRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (!related.ContractLineState.Closed
				and     related.ContractLine != ContractLine)

		DistributorContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContract		= Contract
				related.ManufacturerContractLine	= ContractLine
			Instance Selection
				where (!related.ContractLineState.Closed)

		DistributorContractLineLinkRel
			one-to-many relation to ContractLine
			Field Mapping uses ByAllDistributorContractLines
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContract		= Contract
				related.ManufacturerContractLine	= ContractLine
			Instance Selection
				where (related.FromManufacturerContract)			

		DistributorContractLineQuantityOrderedRel  
			one-to-many relation to ContractLine
			Field Mapping uses ByAllDistributorContractLines
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContract		= Contract
				related.ManufacturerContractLine	= ContractLine
			Instance Selection
				where (related.FromManufacturerContract)

		MfgToDistributorLineRels
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup               = ContractGroup
				related.ManufacturerContract        = Contract
				related.ManufacturerContractLine    = ContractLine

		ContractLineItemCompareRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemVendorItemForContract
				related.ContractGroup	= ContractGroup
				related.Contract		= LocalContract
				related.ItemNumber		= ItemNumber
			Instance Selection
				where (related.UOM = UOM)

		ContractLineMfgCompareRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgInfoFromImport
				related.ContractGroup						= ContractGroup
				related.Contract							= LocalContract
				related.Manufacturer.ManufacturerCode		= Manufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision	= Manufacturer.ManufacturerDivision
				related.ManufacturerNumber					= ManufacturerNumber
				related.UOM									= UOM

		ContractLineVendorCompareRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemFromImport
				related.ContractGroup	= ContractGroup
				related.Contract		= LocalContract
				related.VendorItem		= VendorItem
				related.UOM				= UOM

		DistributorLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = LocalMfgContract
				related.ContractLine  = LocalMfgContractLine

		AnyLineMemberRel
			one-to-many relation to ContractLineMember
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
				related.ContractLine  = ContractLine

		ErrorMismatchLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.ErrorsExist != ErrorsExist)

		NonActiveLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.ContractLineMemberState.Draft
				or     related.ContractLineMemberState.Amendment)

		ProjectPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.Project                 = LocalPeriodOfPerformanceProject
				related.GeneralLedgerSystemCode = "PO"

		AddOnChargeRel
			one-to-many relation to AddOnCharge
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Company.BusinessGroup = ContractGroup)

		EffectiveExpirationDatesCrossRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemItemUom
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.VendorItem 	  = VendorItem
				related.ItemNumber    = ItemNumber
				related.UOM		      = UOM
			Instance Selection
				where (related.UniqueID != UniqueID
				and    related.ManufacturerContract != ManufacturerContract
				and    EffectiveDate <= related.ExpirationDate
				and    related.EffectiveDate <= ExpirationDate
				and   !related.ContractLineState.Closed
				and   !ContractLineState.Closed)

		DuplicateVendorAndManufacturerInfoRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemMfgInfo
				related.ContractGroup						= ContractGroup
				related.Contract							= Contract
				related.VendorItem							= VendorItem
				related.Manufacturer.ManufacturerCode		= Manufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision   = Manufacturer.ManufacturerDivision
				related.ManufacturerNumber                  = ManufacturerNumber
				related.UOM                                 = UOM
				related.ManufacturerContract                = ManufacturerContract
			Instance Selection
				where (related.UniqueID != UniqueID
				and   !related.ContractLineState.Closed
				and   !ContractLineState.Closed
				and    related.OnHold    = false
				and    OnHold            = false)

		ServiceItemDescriptionExistsRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup   = ContractGroup
				related.Contract	    = Contract
			Instance Selection
				where (related.UniqueID 		!= UniqueID
				and    related.ItemDescription 	 = ItemDescription)

		NonMatchingUOMExistsSpecialItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemItemUom
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.VendorItem 	  = VendorItem
				related.ItemNumber 	  = ItemNumber
			Instance Selection
				where (ItemNumber !exists
				and    related.UOM not = UOM
				and   !related.ContractLineState.Closed
				and   !related.OnHold
				and    related.CanUseForCostDefaulting
				and    related.UniqueID != UniqueID)

		NonMatchingUOMExistsItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemItemUom
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
				related.VendorItem 	  = VendorItem
				related.ItemNumber 	  = ItemNumber
			Instance Selection
				where (ItemNumber exists
				and    related.UOM not = UOM
				and   !related.ContractLineState.Closed
				and   !related.OnHold
				and    related.CanUseForCostDefaulting
				and    related.UniqueID != UniqueID)

		VendorItemBuyUOMRel is a VendorItem set
			Instance Selection
				where (related.VendorBuyUOM		!= UOM
				and    related.VendorBuyUOM entered)

		ContractRebateRel
			one-to-one relation to ContractRebate
			Field Mapping uses symbolic key
				related.ContractGroup 	   = ContractGroup
				related.Contract 	  	   = Contract
				related.ContractRebateType = LocalContractRebateType

		IncompleteGLDistributionsRel is a ContractLineDistribution set
			Instance Selection
				where (related.IncompleteGLInformation)

		DistributionsRel is a ContractLineDistribution set

		DistributionsWithCommitmentsRel is a ContractLineDistribution set
			Instance Selection
				where (related.CommitmentsExist)

		ContractParticipantReqLocRel is a ContractParticipant set
			Instance Selection
				where  (related.ContractParticipant.Company	= BlanketStandingRequestingLocation.RequestingCompany)

		NonReqLocationCompanyContractParticipantRel is a ContractParticipant set
			Instance Selection
				where  (related.ContractParticipant.Company != BlanketStandingRequestingLocation.RequestingCompany)

		ContractParticipantRels
  			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.NoDepartment)

	   	TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalTaxEntity.FinanceEnterpriseGroup
				related.TaxEntity 				= LocalTaxEntity

		TaxUsageCodeRel
			one-to-one relation to TaxUsageCode
			Field Mapping uses Set2
				related.TaxUsageCode	= TaxUsageCode
				related.FinanceEnterpriseGroup	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
		  	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalTaxEntity.FinanceEnterpriseGroup
				related.TaxEntity 				= LocalTaxEntity
				related.TaxCode 				= TaxCode

		PoLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup			= ContractGroup
				related.Contract					= Contract
				related.ContractLine      			= ContractLine

		UnreleasedPolineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup			= ContractGroup
				related.Contract					= Contract
				related.ContractLine      			= ContractLine
			Instance Selection
				where (related.Released     		= false)

		ReleasedPurchaseOrderLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup			= ContractGroup
				related.Contract					= Contract
				related.ContractLine      			= ContractLine
			Instance Selection
				where (related.Released     		= true)		

		OtherPurchaseOrderLineForItemRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByItem
				related.ProcurementGroup	= ContractGroup
				related.Item				= ItemNumber
			Instance Selection
				where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate
				and   (related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				or     ExpirationDate !entered)
				and    related.Contract                       != Contract
				and    ItemNumber entered)

		OtherPurchaseOrderLineForManufacturerInformationRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByManufacturerNumber
				related.ManufacturerNumber         = ManufacturerNumber
			Instance Selection
				where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate
				and   (related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				or     ExpirationDate !entered)
				and    related.ProcurementGroup                = ContractGroup
				and    related.Contract                       != Contract
				and    related.Manufacturer                    = Manufacturer
				and    ManufacturerNumber entered)

		OtherPurchaseOrderLineForVendorItemRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByVendorItem
				related.VendorItem                             = VendorItem
			Instance Selection
				where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDate
				and   (related.PurchaseOrder.PurchaseOrderDate <= ExpirationDate
				or     ExpirationDate !entered)
				and    related.ProcurementGroup                = ContractGroup
				and    related.Contract                       != Contract
				and    related.Vendor                          = Contract.Vendor
				and    VendorItem entered)

		DistributorComparePurchaseOrderLineRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByContractLine
				related.ProcurementGroup    = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
			Instance Selection
				where (related.PurchaseOrder.PurchaseOrderDate >= EffectiveDateRange.Begin
				and    related.PurchaseOrder.PurchaseOrderDate <= EffectiveDateRange.End)

		DistContractLinesWithUnreleasedPORel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup        		= ContractGroup
				related.ManufacturerContract 		= Contract
				related.ManufacturerContractLine 	= ContractLine
			Instance Selection
				where (related.HasUnreleasedPoLine)

		DistContractLinesWithUnreleasedReqRel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup        		= ContractGroup
				related.ManufacturerContract 		= Contract
				related.ManufacturerContractLine 	= ContractLine
			Instance Selection
				where (related.HasUnreleasedReqLine)

		DistContractLinesWithUnprocessedRequestsRel
			one-to-many relation to ContractLine
			Field Mapping uses ByDistributorContractLines
				related.ContractGroup        		= ContractGroup
				related.ManufacturerContract 		= Contract
				related.ManufacturerContractLine 	= ContractLine
			Instance Selection
				where (related.HasPurchaseOrderInterface)

		RebateQualifierItemsRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByItem
				related.ContractGroup								   = ContractGroup
				related.ContractRebateQualifierItem.RebateContract	   = Contract
				related.ContractRebateQualifierItem.RebateContractLine = ContractLine

		ApCpyVndTaxUsageCodeRel
			one-to-many relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup		= Contract.Vendor.VendorGroup
				related.Vendor			= Contract.Vendor
				related.VendorLocation	= Contract.ApPoPurchaseFrom
			Instance Selection
				where (related.TaxUsageCode entered)

		VendorLocationRel
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup		= Contract.Vendor.VendorGroup
				related.Vendor			= Contract.Vendor
				related.VendorLocation	= Contract.ApPoPurchaseFrom

	   	SelectedInWorksheet
			one-to-one relation to ContractEventWorksheet
			Field Mapping uses ByContractLine
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine

	   	ContractEventWorksheetRel
			one-to-many relation to ContractEventWorksheet
			Field Mapping uses symbolic key
				related.Actor           = actor
				related.ContractGroup	= ContractGroup
			Instance Selection
				where (related.Item				       = ItemNumber
 				and    related.ItemDescription         = ItemDescription
 				and    related.ServiceCode			   = ServiceCode
 				and    related.UOM                     = UOM.UnitOfMeasure
 				and    related.ManufacturerInformation.Manufacturer = Manufacturer
 				and    related.ManufacturerInformation.ManufacturerNumber = ManufacturerNumber
 				and    related.PurchaseType           = Contract.ContractType.PurchaseType
 				and    related.CommodityCode           = CommodityCode)

		OnActiveEvent
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses ByContractLine
				related.ProcurementGroup		= ContractGroup
				related.OriginCode				= "CM"
				related.SourceDocumentNumeric	= Contract
				related.LineNumber				= ContractLine
			Instance Selection
				where (related.SourcingEventLine.InLineActionableState)

		EventLineSourceRel
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses ByContractLine
				related.ProcurementGroup		= ContractGroup
				related.OriginCode				= "CM"
				related.SourceDocumentNumeric	= Contract
				related.LineNumber				= ContractLine

		RQSourcingEventLineSource
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company         		= SourcingCompany
				related.SourcingEvent			= SourcingEventNumber
				related.SourcingEventLine   	= SourcingEventLineNumber
			Instance Selection
				where (related.Requisitions)

		ContractLineDistributionSpreadRel
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses ByContractLine
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine

		SingleDistributionSpreadRel
			one-to-many relation to ContractLineDistributionSpread 
			Field Mapping uses BySpreadDate 
				related.ContractGroup 				= ContractGroup
				related.Contract      				= Contract
				related.ContractLine  				= ContractLine 
				related.ContractLineDistribution 	= LocalContractLineDistribution
				related.SpreadDate    				= LocalSpreadDate	

		ContractLineDistributionSpreadByDateRel  
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses BySpreadDate
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine

		ContractLineDistributionRel
			one-to-many relation to ContractLineDistribution
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine

		ContractLineAOCRel
			one-to-many relation to ContractLineAOC
			delete cascades
			Field Mapping uses part of key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine

		SSComments is a ContractLineComment set
			Instance Selection
				where (related.SSComment)
				
		LineCommentWordDocPrintOnPoRel is a ContractLineComment set			
		    Instance Selection
		        where (related.PrintOnPoOnlyLineComment)

		SSAttachments is a ContractLineAttachment set
			Instance Selection
				where (related.SSAttachment)

		SupplierContractLineAttachmentsRel is a ContractLineAttachment set
			Instance Selection
				where (related.SupplierCanView)

		SupplierContractLineCommentsRel is a ContractLineComment set
			Instance Selection
				where (related.SupplierCanView)

		ContractLineSpreadRel is a ContractLineSpread set

		MarkupPricingRel
	  		one-to-many relation to ContractPricing
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.PricingMarkupDiscount.Markup)

		DiscountPricingRel
	  		one-to-many relation to ContractPricing
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.PricingMarkupDiscount.Discount)

		ManualCommentsRel is a ContractLineComment set
			Instance Selection
				where (related.ContractCommentType.Manual)

		CurrentBasePercentRel
	  		one-to-many relation to ContractPricing
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
			Instance Selection
				where (related.PricingBasePercent > 0
				and    related.ContractPricing <= current corporate date)

		AnyContractPricingRel
			one-to-many relation to ContractPricing
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract

		ContractLinePriceMarkupRel
			one-to-many relation to ContractLine
			Field Mapping uses ByLineMarkup
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ContractLine != ContractLine)

		ContractLinePriceDiscountRel
			one-to-many relation to ContractLine
			Field Mapping uses ByLineDiscount
				related.ContractGroup = ContractGroup
				related.Contract	  = Contract
			Instance Selection
				where (related.ContractLine != ContractLine
				and   !related.ContractLineState.Closed)

		HeldContractLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.OnHold)

		NotHeldContractLineMemberRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.OnHold = false)

		ContractItemLineItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup 	= ContractGroup
				related.ItemNumber		= ItemNumber
			Instance Selection
				where (ItemNumber entered)

		PayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByContractLine
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup)

		PayablesInvoiceDetailReleasedNoGroupRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByContractLine
				related.Contract      = Contract
				related.ContractLine  = ContractLine		
			Instance Selection 
				where (related.PayablesInvoice.MatchStatus > 1
				and    related.PayablesInvoice.MatchStatus < 7)	
		UnreleasedPayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByContractLine
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup
				and    related.Status = 0)

		MatchedPayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByContractLine
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup
				and    related.MatchObjectID entered)

		MatchedOrUnreleasedPayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByContractLine
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup
				and   (related.MatchObjectID entered
				or     related.Status = 0))

		PayablesInvoiceDetailForInvoiceRel
			one-to-many relation to PayablesInvoiceDetail
	   		Field Mapping uses ByContractLine
				related.Contract      = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.PayablesInvoice = PayablesInvoice)

		PayablesInvoiceDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses ByContract
				related.Vendor				= Contract.Vendor
				related.PurchasingContract	= Contract
				related.ContractLine		= ContractLine
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup)

		ItemGroupRel
			one-to-one relation to ItemGroup
			Field Mapping uses symbolic key
				related.ItemGroup = ContractGroup

		ItemmastRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup	= ContractGroup
				related.Item		= ItemNumber







		ItemExistsRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemItemUom
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.VendorItem		= VendorItem
				related.ItemNumber		= ItemNumber
				related.UOM				= UOM
			Instance Selection
				where (related.UniqueID != UniqueID
				and   !related.ContractLineState.Closed
				and   !ContractLineState.Closed
				and    related.OnHold    = false
				and    OnHold            = false)

		SameVendorItemDiffMfgInfoRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItem
				related.ContractGroup = ContractGroup
				related.VendorItem 	  = VendorItem
			Instance Selection
				where ((related.Contract.Supplier                  = Contract.Supplier)
				and    (related.ManufacturerNumber                != ManufacturerNumber
					or related.Manufacturer.ManufacturerCode     != Manufacturer.ManufacturerCode
					or related.Manufacturer.ManufacturerDivision != Manufacturer.ManufacturerDivision)
				and   (!related.ContractLineState.Closed)
				and    (related.ManufacturerNumber entered)
				and    (related.Manufacturer.ManufacturerCode entered))

		ContractLinePriceChangeRel is a ContractLinePriceChange set 
			Instance Selection
				where (related.ContractLine = ContractLine)

		RequisitionLinesByContractRel
			one-to-many relation to RequisitionLine
			Field Mapping uses ByContract
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.Company.ItemGroup = ContractGroup)

   		UnreleasedRequisitionLinesRel
 			one-to-many relation to RequisitionLine
   			Field Mapping uses ByContract
   				related.Contract         = Contract
   				related.ContractLine     = ContractLine
			Instance Selection
				where (related.Status = 0
				and    related.Company.ItemGroup = ContractGroup)

		RequisitionLinesWithNoPORel
 			one-to-many relation to RequisitionLine
   			Field Mapping uses ByContract
   				related.Contract         = Contract
   				related.ContractLine     = ContractLine
			Instance Selection
				where (related.Status = 9
				and    related.NoReleasedLineSourcesExist
				and    related.Company.ItemGroup = ContractGroup)

		UnprocessedPOInterfaceRel
			one-to-many relation to PurchaseOrderInterface
			Field Mapping uses ByContractLine
				related.ProcurementGroup         = ContractGroup
				related.Contract                 = Contract
				related.ContractLine             = ContractLine

		RebateQualifierContractsRel
			one-to-many relation to RebateQualifierContract
			Field Mapping uses ByOriginalContract
				related.ContractGroup			= ContractGroup
				related.OriginalContractNumber	= Contract
			Instance Selection
				where (related.Contract.CanAmend
				and    related.ContractRebate.Active)

		RebateQualifierContractForLocalContractRel
			one-to-many relation to RebateQualifierContract
			Field Mapping uses ByOriginalContract
				related.ContractGroup			= LocalContractRebate.ContractGroup
				related.OriginalContractNumber	= LocalContract
				related.Contract				= LocalContractRebate.Contract
				related.ContractRebateType		= LocalContractRebate.ContractRebateType
				related.ContractRebate			= blank
				related.ContractRebateQualifier	= LocalContractRebate.ContractRebateQualifier

		ContractRebateQualifierItemsRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByRebateItem
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ContractRebateType	= LocalContractRebateType
				related.ItemNumber			= ItemNumber

		TierQualifierItemRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses BySelectedContractLineFirst 
				related.ContractGroup                      				= ContractGroup 
				related.OriginalContractAndLine.OriginalContract        = Contract 
				related.OriginalContractAndLine.OriginalContractLine    = ContractLine 	

		LocalTierQualifierItemByManufacturerRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByManufacturerInformation
				related.ContractGroup                      				= ContractGroup 
				related.Contract                                		= Contract 
				related.Manufacturer 									= LocalManufacturer
				related.ManufacturerNumber                              = LocalManufacturerNumber

		TierQualifierItemByManufacturerRel 
			one-to-many relation to TierQualifierItem 
			Field Mapping uses ByManufacturerInformation
				related.ContractGroup                      				= ContractGroup 
				related.Contract                                		= Contract 
				related.Manufacturer 									= Manufacturer
				related.ManufacturerNumber                              = ManufacturerNumber

		DeleteTierQualifierItemRel 
			one-to-many relation to TierQualifierItem 
			delete cascades 
			Field Mapping uses BySelectedContractLine
				related.ContractGroup                      				= ContractGroup 
				related.Contract                                		= Contract 
				related.OriginalContractAndLine.OriginalContract        = Contract 
				related.OriginalContractAndLine.OriginalContractLine    = ContractLine 	

		TierQualifierContractRel 
			one-to-many relation to TierQualifierContract 
			Field Mapping uses  BySelectedContract
				related.ContractGroup									= ContractGroup 
				related.SelectedContractNumber                          = Contract 		
				related.Contract                                        = ManufacturerContract 

		RebateQualifierItemRel
			one-to-one relation to ContractRebateQualifierItem
			Field Mapping uses symbolic key
				related.ContractGroup									= LocalContractRebate.ContractGroup
				related.Contract										= LocalContractRebate.Contract
				related.ContractRebateType								= LocalContractRebate.ContractRebateType
				related.ContractRebate									= blank
				related.ContractRebateQualifier							= LocalContractRebate.ContractRebateQualifier
				related.ContractRebateQualifierItem.RebateContract		= Contract
				related.ContractRebateQualifierItem.RebateContractLine	= ContractLine

		RebateQualifierContractSpecificRel
			one-to-many relation to RebateQualifierContract
			Field Mapping uses ByOriginalContract
				related.ContractGroup 			= ContractGroup
				related.OriginalContractNumber	= Contract
				related.Contract				= LocalContractRebate.Contract
				related.ContractRebateType		= LocalContractRebate.ContractRebateType
				related.ContractRebate			= blank
				related.ContractRebateQualifier	= LocalContractRebate.ContractRebateQualifier

		ContractRebateDuesForRebateRel
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.Contract			= Contract
				related.ContractRebateType	= LocalContractRebateType
				related.ContractRebate		= blank
			Instance Selection
				where (related.ContractRebateDue > LocalPeriodBeginDate)

		ContractNegotiationContract1FilledContract2EmptyRel
			one-to-many relation to ContractNegotiation
			Field Mapping uses symbolic key
				related.ItemGroup	= ContractGroup
				related.Item		= ItemNumber
			Instance Selection
				where (related.Contract1 entered
				and    related.Contract2 not entered
				and   !related.SingleContractNegotiation)

		ContractTiersByPercentRel
			one-to-many relation to ContractTier
			Field Mapping uses ByPercent
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract

		ContractFixedTierRel
			one-to-many relation to ContractTier
			Field Mapping uses ByPercent
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.TierMarkupDiscount.Fixed)

		ToSourcingEventRel
			one-to-one relation to SourcingEvent
			Field Mapping uses symbolic key
				related.Company			= ToEventCompany
				related.SourcingEvent	= ToEventNumber

		ContractPreferredManufacturerRel
			one-to-many relation to ContractPreferredManufacturer
			Field Mapping uses ByPreferredContract
				related.ContractGroup								= ContractGroup
				related.Contract									= Contract
				related.ContractPreferredManufacturer.ItemNumber	= ItemNumber
				related.ContractPreferredManufacturer.VendorItem	= VendorItem

		ContractPreferredManufacturerItemRel
			one-to-many relation to ContractPreferredManufacturer
			Field Mapping uses ByPreferredContract
				related.ContractGroup								= ContractGroup
				related.Contract									= Contract
				related.ContractPreferredManufacturer.ItemNumber	= ItemNumber

		ContractPreferredContractRel
			one-to-one relation to ContractPreferredManufacturer
			Field Mapping uses symbolic key
				related.ContractGroup								= ContractGroup
				related.ContractPreferredManufacturer.ItemNumber	= LocalItemNumber
				related.ContractPreferredManufacturer.VendorItem	= LocalVendorItem
				related.ContractPreferredManufacturer.InventoryCompany = LocalCompany
				related.ContractPreferredManufacturer.Location		= LocalLocation
				related.ContractPreferredManufacturer.ReqLocation	= LocalReqLocation
				related.ContractPreferredManufacturer.PricingGroup	= LocalPricingGroup

		SameVenItemDiffItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemItemUom
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.VendorItem		= VendorItem
			Instance Selection
				where (related.UniqueID != UniqueID
				and   !related.ContractLineState.Closed
				and   !ContractLineState.Closed
				and    related.OnHold	= false
				and    OnHold			= false)

		OriginalItemmastUsageRel
			one-to-many relation to ItemmastUsage
			Field Mapping uses ByManualEntry
				related.Item							= ItemNumber
				related.Company							= LocalCompany
				related.InventoryLocation				= LocalLocation
				related.RequestingLocation				= LocalReqLocation
				related.ItemmastUsageDateRange.Begin	= LocalDateRange.Begin
				related.ItemmastUsageDateRange.End		= LocalDateRange.End
				related.ItemmastUsage.UsageQuantityType	= LocalUsageQuantityType
				related.ItemmastUsage.AdjustmentPercent	= LocalAdjustmentPercent

		OriginalItemmastUsageDateRangeRel
			one-to-one relation to ItemmastUsageDateRange
			Field Mapping uses symbolic key
				related.ItemGroup						= ContractGroup
				related.Item							= ItemNumber
				related.Company							= LocalCompany
				related.InventoryLocation				= LocalLocation
				related.RequestingLocation				= LocalReqLocation
				related.ItemmastUsageDateRange.Begin	= LocalDateRange.Begin
				related.ItemmastUsageDateRange.End		= LocalDateRange.End

		ItemmastUsagesOriginalAndAnnualizedRel
			one-to-many relation to ItemmastUsage
			Field Mapping uses ByAdjustmentPercent
				related.Item							= ItemNumber
				related.ItemmastUsageDateRange.Begin	= LocalDateRange.Begin
				related.ItemmastUsageDateRange.End		= LocalDateRange.End
				related.ItemmastUsage.UsageQuantityType	= LocalUsageQuantityType
				related.ItemmastUsage.AdjustmentPercent	= LocalAdjustmentPercent
				related.Company							= LocalCompany
				related.InventoryLocation				= LocalLocation
				related.RequestingLocation				= LocalReqLocation

		LowUOMCodeGTINFromItemRel    
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= ContractGroup
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
				related.Item				= ItemNumber
				related.UnitOfMeasure		= ItemNumber.StockUOM
			Instance Selection 
				where  (related.Active)

		LowUOMCodeGTINFromItemDefaultRel    
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= ContractGroup
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
				related.Item				= ItemNumber
				related.UnitOfMeasure		= ItemNumber.StockUOM
			Instance Selection 
				where  (related.UseAsDefaultPerUOM
				and     related.Active) 

		LowUOMCodeHibccUPNDefaultRel 
			one-to-many relation to HIBCCItemUPN 
			Field Mapping uses Set5
				related.ItemGroup			= ContractGroup
				related.Item				= ItemNumber
				related.UnitOfMeasure		= ItemNumber.StockUOM
		LowUOMCodeGTINDuplicateRel    
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= LowUOMCodeGTIN	

		LowUOMCodeHibccUPNDuplicateRel    
			one-to-many relation to HIBCCItemUPN
			Field Mapping uses Set6
				related.ItemGroup		= ContractGroup
				related.HIBCCItemUPN	= LowUOMCodeHibccUPN	
		IcitemgtinManfRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= ContractGroup
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
				related.Item				= ItemNumber
				related.UnitOfMeasure		= UOM
			Instance Selection 
				where (related.Active)

		IcitemgtinManfDefaultRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= ContractGroup
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
				related.Item				= ItemNumber
				related.UnitOfMeasure		= UOM
			Instance Selection
				where (related.UseAsDefaultPerUOM = true
				and    related.Active)

		IcitemgtinMismatchRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
			Instance Selection
				where (related.Item != ItemNumber
				and    related.Active)

		ItemGTINByItemRel
			one-to-one relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
				related.Item        = ItemNumber

		IcitemgtinRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
			Instance Selection
				where (related.Active)

		ItemGTINMatchUOMRelActive
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
			Instance Selection
				where (related.Active
				and    related.UnitOfMeasure = UOM.UnitOfMeasure)
		ItemGTINMatchUOMRelAll
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
			Instance Selection
				where (related.UnitOfMeasure = UOM.UnitOfMeasure)


		LowUOMCodeGTINExistsRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= LowUOMCodeGTIN
			Instance Selection
				where (related.Active)

		ItemGTINInactiveRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
			Instance Selection
				where (related.Active = false
				and    related.Item.AvailableForUse)

		LowUOMCodeGTINInactiveRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= LowUOMCodeGTIN
			Instance Selection
				where (related.Active = false
				and    related.Item.AvailableForUse)

		ItemGTINAllRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
			Instance Selection 
				where (related.Item.NotAvailableForUse = false)

		ItemGTINSameUOMRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set3
				related.ItemGroup		= ContractGroup
				related.Item			= ItemNumber
				related.UnitOfMeasure	= UOM.UnitOfMeasure
			Instance Selection
				where (related.Active)

		LowUOMCodeGTINForItemRel 
			one-to-many relation to ItemGTIN 
			Field Mapping uses Set7 
				related.ItemGroup			= ContractGroup 
				related.Manufacturer    	= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
				related.Item            	= ItemNumber 
				related.UnitOfMeasure       = ItemNumber.StockUOM
			Instance Selection 
				where (related.Active)	
		
		ItemmastUsageContractAmountRel
			one-to-many relation to ItemmastUsageContractAmount
			Field Mapping uses ByContract
				related.Contract		= Contract
				related.ContractLine	= ContractLine

		SelectedForNegotiateByRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= ItemNumber
			Instance Selection
				where (related.SelectedForNegotiate
				and    related.UniqueID != UniqueID
				and    related.SelectedForNegotiateBy = actor)

		ItemHasContractLineForCostDefaultingRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= ItemNumber
			Instance Selection
				where (related.UseForCostDefaulting)

		ItemHasContractLinePreferredRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= ItemNumber
			Instance Selection
				where (related.UseForCostDefaulting
				and    related.PreferredLine)

		OldItemHasContractLineForCostDefaultingRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= LocalItemNumber
			Instance Selection
				where (related.UseForCostDefaulting)

		OldItemHasContractLinePreferredRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup	= ContractGroup
				related.ItemNumber		= LocalItemNumber
			Instance Selection
				where (related.UseForCostDefaulting
				and    related.PreferredLine)

		ItemByManufacturerRel
			one-to-many relation to Item
			Field Mapping uses Set8
				related.ItemGroup			= ContractGroup
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
			Instance Selection
				where (related.Active
				and    related.Manufacturer entered
				and    related.ManufacturerNumber entered)

		InactiveItemByManufacturerRel
			one-to-many relation to Item
			Field Mapping uses Set8
				related.ItemGroup			= ContractGroup
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
			Instance Selection
				where (related.Active = false
				and    related.AvailableForUse
				and    related.Manufacturer entered
				and    related.ManufacturerNumber entered)

		SameOldManufacturerInfoRel
			one-to-many relation to ContractLine
			Field Mapping uses BySpecialItemCreate
				related.ContractGroup						= ContractGroup
				related.Manufacturer.ManufacturerCode		= LocalManufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision	= LocalManufacturer.ManufacturerDivision
				related.ManufacturerNumber					= LocalManufacturerNumber
			Instance Selection
				where  (related.UniqueID != UniqueID)		
		SameManufacturerInfoRel
			one-to-many relation to ContractLine
			Field Mapping uses BySpecialItemCreate
				related.ContractGroup						= ContractGroup
				related.Manufacturer.ManufacturerCode		= Manufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision	= Manufacturer.ManufacturerDivision
				related.ManufacturerNumber					= ManufacturerNumber
			Instance Selection
				where  (related.UniqueID != UniqueID)

		SameManufacturerInfoVendorItemRel
			one-to-many relation to ContractLine
			Field Mapping uses BySpecialItemCreate
				related.ContractGroup						= ContractGroup
				related.Manufacturer.ManufacturerCode		= Manufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision	= Manufacturer.ManufacturerDivision
				related.ManufacturerNumber					= ManufacturerNumber
			Instance Selection
				where  (related.UniqueID         != UniqueID
				and     related.Vendor            = Vendor 
				and     related.UOM.UnitOfMeasure = UOM.UnitOfMeasure)

		SameManufacturerForDistributorRel 
			one-to-many relation to ContractLine
			Field Mapping uses ByManufacturerNumberFirst 
				related.ContractGroup						= ContractGroup
				related.ManufacturerNumber					= LocalManufacturerNumber
				related.Manufacturer.ManufacturerCode		= LocalManufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision	= LocalManufacturer.ManufacturerDivision
				related.Contract                            = DistributorContract 

		SameItemForDistributorRel 
			one-to-many relation to ContractLine
			Field Mapping uses ByItemVendorItemForContract
				related.ContractGroup						= ContractGroup
				related.Contract                            = DistributorContract 
				related.ItemNumber                          = ItemNumber 

		DifferentVenItemForSameMfgInfoRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgInfoVenItem
				related.ContractGroup 						= ContractGroup
				related.Manufacturer.ManufacturerCode		= Manufacturer.ManufacturerCode
				related.Manufacturer.ManufacturerDivision	= Manufacturer.ManufacturerDivision
				related.ManufacturerNumber					= ManufacturerNumber
			Instance Selection
				where (related.Contract.Vendor	= Contract.Vendor
				and    related.Contract.Vendor entered
				and    related.VendorItem 	   != VendorItem
				and	   related.UniqueID 	   != UniqueID
				and    related.Contract.NotContractTemplate
				and    related.UOM              = UOM
				and    related.VendorItem      entered
				and   !related.ContractLineState.Closed)

		POVendorItemForSameMfgInfoRel
            one-to-many relation to VendorItem
            Field Mapping uses Set5
                related.ProcurementGroup    = ContractGroup
                related.Vendor              = Contract.Vendor
                related.Manufacturer        = Manufacturer
                related.ManufacturerNumber  = ManufacturerNumber
            Instance Selection
                where (related.VendorItem != VendorItem
                and    related.VendorItem.Active
                and  ((related.VendorBuyUOM !entered
                and    VendorItem exists
                and    VendorItem.VendorBuyUOM !entered)
                or    (VendorItem !exists
                and    related.VendorBuyUOM = UOM.UnitOfMeasure)))

		POVendorItemBuyUOMTestRel
            one-to-many relation to VendorItem
            Field Mapping uses Set5
                related.ProcurementGroup    = ContractGroup
                related.Vendor              = Contract.Vendor
                related.Manufacturer        = Manufacturer
                related.ManufacturerNumber  = ManufacturerNumber
            Instance Selection
                where  (related.ManufacturerNumber entered
                and     related.Manufacturer entered
                and     related.VendorItem != VendorItem
                and     related.VendorItem.Active)

		DefaultVendorItemFromManufacturerInformationRel
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= Contract.Vendor
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
			Instance Selection
				where (related.Active
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM = UOM.UnitOfMeasure))
        GetVendorItemFromManufacturerInformationRel
            one-to-many relation to VendorItem
            Field Mapping uses Set5
                related.ProcurementGroup    = ContractGroup
                related.Vendor              = Contract.Vendor
                related.Manufacturer        = LocalManufacturerInfo.Manufacturer
                related.ManufacturerNumber  = LocalManufacturerInfo.ManufacturerNumber
            Instance Selection
                where (related.Active
                and    related.Item.AvailableForUse
                and    related.ManufacturerNumber entered
                and   (related.VendorBuyUOM !entered
                or     related.VendorBuyUOM = UOM.UnitOfMeasure))              

        GetVendorItemFromManufacturerInfoInactiveRel
            one-to-many relation to VendorItem
            Field Mapping uses Set5
                related.ProcurementGroup    = ContractGroup
                related.Vendor              = Contract.Vendor
                related.Manufacturer        = LocalManufacturerInfo.Manufacturer
                related.ManufacturerNumber  = LocalManufacturerInfo.ManufacturerNumber
            Instance Selection
                where (related.Active = false
                and    related.Item.AvailableForUse
                and    related.ManufacturerNumber entered
                and   (related.VendorBuyUOM !entered
                or     related.VendorBuyUOM = UOM.UnitOfMeasure))
		MfgVendorPovenitemRel
			one-to-one relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ContractGroup
				related.Item				= MfgItemNumber
				related.Vendor				= MfgVendor
				related.VendorItem			= MfgVendorItem

		DistVendorDefaultPovenitemRel
			one-to-many relation to VendorItem
			Field Mapping uses Set4
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= DistributorVendor
				related.Item    			= MfgItemNumber
			Instance Selection
				where (related.UseAsDefault)

		NewPovenitemFromManufInfoOnlyRel
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= DistributorVendor
				related.Manufacturer		= LocalManufacturerInformation.Manufacturer
				related.ManufacturerNumber	= LocalManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.Active
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM = UOM.UnitOfMeasure))
		MFGInfoOnlyRel
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= Contract.Vendor
				related.Manufacturer		= Manufacturer
				related.ManufacturerNumber	= ManufacturerNumber
			Instance Selection
				where   (related.VendorBuyUOM !entered
				or       related.VendorBuyUOM = UOM.UnitOfMeasure)
		NewItemmastFromPoitemvenRel
			one-to-many relation to VendorItem
			Field Mapping uses Set3
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= DistributorVendor
				related.VendorItem			= MfgVendorItem
			Instance Selection
				where (related.Active
				and    related.Manufacturer  		= Manufacturer 
				and    related.ManufacturerNumber	= ManufacturerNumber)

		ContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgContractLine
				related.ContractGroup				= ContractGroup
				related.Contract					= DistributorContract
				related.ManufacturerContract		= ManufacturerContractNumber
				related.ManufacturerContractLine	= DistributorContractLine

		ContractItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup    = ContractGroup
				related.ItemNumber   	 = ManualItemNumber
			Instance Selection
				where (!related.ContractLineState.Closed
				and     related.ItemType.Special
				and     related.CanUseForCostDefaulting
				and     related.UniqueID != UniqueID)

		DistributorContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= DistributorContract

		DefaultItemRel
			one-to-one relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ContractGroup
				related.Item				= MfgItemNumber
				related.Vendor				= DistributorVendor
				related.VendorItem			= DefaultVendorItem

		MfgItemNumberRel
			one-to-one relation to Item
			Field Mapping uses symbolic key
				related.ItemGroup	= ContractGroup
				related.Item		= MfgItemNumber

		GTINExistsRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.GlobalTradeItemNumber 	= GlobalTradeItemNumber
				and    related.ManufacturerContract		= ManufacturerContract
				and    related.UniqueID 				!= UniqueID
				and   !related.ContractLineState.Closed
				and   !ContractLineState.Closed
				and    related.OnHold					= false
				and    OnHold							= false)

		LowUOMCodeGTINDupExistsRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
                where (related.LowUOMCodeGTIN                   = LowUOMCodeGTIN
                and    ItemType.Special
                and    related.ManufacturerContract             = ManufacturerContract
                and    related.UniqueID                        != UniqueID
                and   !related.ContractLineState.Closed
                and   !ContractLineState.Closed
                and    related.OnHold                           = false
                and    OnHold                                   = false)
		HIBCCDIExistsRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.HibccUpn			 		= HibccUpn
				and    related.ManufacturerContract		= ManufacturerContract
				and    related.UniqueID 				!= UniqueID
				and   !related.ContractLineState.Closed
				and   !ContractLineState.Closed
				and    related.OnHold					= false
				and    OnHold							= false)

		LowUOMCodeHIBCCDIExistsRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.LowUOMCodeHibccUPN 		= LowUOMCodeHibccUPN
				and    related.ManufacturerContract		= ManufacturerContract
				and    related.UniqueID 				!= UniqueID
				and   !related.ContractLineState.Closed
				and   !ContractLineState.Closed
				and    related.OnHold					= false
				and    OnHold							= false)

		InvoiceLineFactsForLineRel
			if (Contract.UOMSMustMatch)
				InvoiceLineFactsForItemAndUomRel
			else
				InvoiceLineFactsForItemRel

		InvoiceLineFactsForItemAndUomRel
			one-to-many relation to InvoiceLineFact
			Field Mapping uses ByContractLine
				related.ProcurementGroup	= ContractGroup
				related.CmContract			= Contract
				related.Item				= ItemNumber
				related.VpriUom				= UOM.UnitOfMeasure

		InvoiceLineFactsForItemRel
			one-to-many relation to InvoiceLineFact
			Field Mapping uses ByContractLine
				related.ProcurementGroup	= ContractGroup
				related.CmContract			= Contract
				related.Item				= ItemNumber

		ProcurementGroupSetActionInvoiceLineFactRel
			one-to-many relation to ProcurementGroupSetAction
			Field Mapping uses symbolic key
				related.ProcurementGroup = LocalProcurementGroup
			Instance Selection
				where (related.LoadType = 11)

		SkuExistsOnItemRel
			one-to-one relation to ItemSKU
			Field Mapping uses Set2
				related.ItemSKU		= Sku
				related.ItemGroup	= ContractGroup

		NdcNbrExistsOnItemRel
			one-to-many relation to NationalDrugCode
			Field Mapping uses Set2
				related.NationalDrugCode	= NdcNbr
				related.ItemGroup			= ContractGroup
			Instance Selection 
				where (!related.Item.NotAvailableForUse)
		HibccUpnExistsOnItemRel
			one-to-many relation to HIBCCItemUPN
			Field Mapping uses Set2
				related.HIBCCItemUPN	= HibccUpn
				related.ItemGroup		= ContractGroup
			Instance Selection 
				where (!related.Item.NotAvailableForUse)
		LowUOMCodeHibccUpnExistsOnItemRel
			one-to-many relation to HIBCCItemUPN
			Field Mapping uses Set2
				related.HIBCCItemUPN	= LowUOMCodeHibccUPN
				related.ItemGroup		= ContractGroup
			Instance Selection 
				where (!related.Item.NotAvailableForUse)

		UccEanUpnExistsOnItemRel
			one-to-many relation to UCCEANItemUPN
			Field Mapping uses Set2
				related.UCCEANItemUPN	= DerivedUccEanUpn
				related.ItemGroup		= ContractGroup
			Instance Selection 
				where (!related.Item.NotAvailableForUse)

		UPCExistsOnItemRel
			one-to-many relation to ItemUPC
			Field Mapping uses Set2
				related.ItemUPC   = Upc
				related.ItemGroup = ContractGroup
			Instance Selection 
				where (!related.Item.NotAvailableForUse)

		NdcNbrExistsForItemRel
			one-to-many relation to NationalDrugCode
			Field Mapping uses Set5
				related.ItemGroup			= ContractGroup
				related.Item                = ItemNumber
				related.UnitOfMeasure       = UOM.UnitOfMeasure
		HibccUpnExistsForItemRel
			one-to-many relation to HIBCCItemUPN
			Field Mapping uses Set5
				related.ItemGroup			= ContractGroup
				related.Item                = ItemNumber
				related.UnitOfMeasure       = UOM.UnitOfMeasure
		UccEanUpnExistsForItemRel
			one-to-many relation to UCCEANItemUPN
			Field Mapping uses Set5
				related.ItemGroup			= ContractGroup
				related.Item                = ItemNumber
				related.UnitOfMeasure       = UOM.UnitOfMeasure

		UPCExistsForItemRel
			one-to-many relation to ItemUPC
			Field Mapping uses Set6
				related.ItemGroup			= ContractGroup
				related.Item                = ItemNumber
				related.UnitOfMeasure       = UOM.UnitOfMeasure

		SKUExistsForItemRel
			one-to-many relation to ItemSKU
			Field Mapping uses Set6
				related.ItemGroup			= ContractGroup
				related.Item                = ItemNumber
				related.UnitOfMeasure       = UOM.UnitOfMeasure
		ContractLineErrorRel is a ContractLineError set

		ContractLineInactiveErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine
			Instance Selection
				where (related.ErrorMessageNumber = 25
				or     related.ErrorMessageNumber = 28
				or     related.ErrorMessageNumber = 50
				or     related.ErrorMessageNumber = 192)

		ContractLineOtherErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine
			Instance Selection
				where (related.ErrorMessageNumber != 25
				and    related.ErrorMessageNumber != 28
				and    related.ErrorMessageNumber != 50
				and    related.ErrorMessageNumber !=192)

		ContractLineVendorInactiveErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine
			Instance Selection
				where (related.ErrorMessageNumber = 25)

		ContractLineNotVendorInactiveErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup    = ContractGroup
				related.Contract         = Contract
				related.ContractLine     = ContractLine
			Instance Selection
				where (related.ErrorMessageNumber != 25)

		ActorContextClassRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor = actor
			Instance Selection
				where (related.ContextProperty.KeyField = "ContractClassification")

		ActorContextSubClassRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor = actor
			Instance Selection
				where (related.ContextProperty.KeyField = "ContractSubclassification")

		DeletedContractArticlesByDisplayRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
			Instance Selection
				where (related.Deleted)

		ContractArticlesByDisplayRel
			one-to-many relation to ContractArticle
			Field Mapping uses ByDisplayOrder
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract

		ContractGroupEmailTemplateRel
			one-to-one relation to ContractGroupEmailTemplate
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup

		ContractGroupEmailTemplate2Rel
			one-to-one relation to ContractGroupEmailTemplate2
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup

		VendorItemFromManufacturerNumberRel
			one-to-many relation to VendorItem
			Field Mapping uses Set2
				related.ProcurementGroup	= ContractGroup
				related.VendorItem			= ManufacturerNumber
			Instance Selection
				where (related.Vendor				= Contract.Vendor
				and    related.ManufacturerNumber  != ManufacturerNumber
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM         = UOM.UnitOfMeasure))

		VendorItemWithDifferentItemRel
			one-to-many relation to VendorItem
			Field Mapping uses Set3
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= Contract.Vendor
				related.VendorItem			= VendorItem
			Instance Selection
				where (related.Item != ItemNumber
				and    related.Active)

		ContractLineFrontEndErrorsForCreateOrUpdateRel		
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.ContractLine			= ContractLine
			Instance Selection
				where (related.FrontEndCreateUpdateErrorType)

		DistributionLineEditsRel		
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup			= ContractGroup
				related.Contract				= Contract
				related.ContractLine			= ContractLine
			Instance Selection
				where (related.DistributionLineEditsErrorType)

		ContractLineBackOfficeDependentErrorsRel		
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.BackOfficeDependentErrorType)

		InactiveVendorItemLineErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.ErrorMessageNumber = 25)

		InactiveItemLineErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.ErrorMessageNumber = 28)

		InactiveGTINLineErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.ErrorMessageNumber = 50)

		InactiveItemUOMLineErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.ErrorMessageNumber = 94)

		InvalidItemUOMLineErrorRel
			one-to-many relation to ContractLineError
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.ErrorMessageNumber = 93)

		PoCompaniesInProcurementGroupRel
			one-to-many relation to PurchasingCompany
			Field Mapping uses Set2
				related.ProcurementGroup = ContractGroup

		InventoryCompaniesInGroupRel
			one-to-many relation to InventoryCompany
			Field Mapping uses Set2
				related.ItemGroup = ContractGroup

		ContractLineTierCostRel
			one-to-many relation to ContractLineTierCost
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine

		ContractLineTierCostMatchRel
			one-to-many relation to ContractLineTierCost
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.TierCost = BaseCost)

		ItemUOMsRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup	= ContractGroup
				related.Item		= ItemNumber

		ItemUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup		= ContractGroup
				related.Item			= ItemNumber
				related.UnitOfMeasure	= UOM.UnitOfMeasure

		LocalItemUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup		= ContractGroup
				related.Item			= LocalItemNumber
				related.UnitOfMeasure	= UOM.UnitOfMeasure

		GLCompanyRel
			one-to-many relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company = LocalTaxCompany

		ContractLineSpreadForAmountUpdateRel
			one-to-many relation to ContractLineSpread
			Field Mapping uses BySpreadDate
			Instance Selection
				where (related.ContractGroup	= ContractGroup
				and    related.Contract			= Contract
				and    related.ContractLine		= ContractLine)

        ContractLineSpreadWithUsedAmountRel
            one-to-many relation to ContractLineDistributionSpread
            Field Mapping uses ByContractLine
                related.ContractGroup   = ContractGroup
                related.Contract        = Contract
                related.ContractLine    = ContractLine              
            Instance Selection
                where (related.UsedAmount > 0)

		RQGeneralLedgerSystemCodeRel
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= ContractGroup.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "RQ"

		StandardCommentCodeRel
			one-to-many relation to StandardCommentCode
			Field Mapping uses Set1
				related.ProcurementGroup	= ContractGroup
				related.StandardCommentCode	= StandardCommentCode
			Instance Selection
				where (related.IsoLocale not entered)

		ContractAllowanceRel
			one-to-many relation to ContractAllowance
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine			
		
		ContractOpenAllowanceRel
			one-to-many relation to ContractAllowance
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine		
			Instance Selection
				where (related.Closed       = false)

		SingleContractAllowanceRel
			one-to-one relation to ContractAllowance
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
				related.ContractAllowance   = LocalContractAllowance

		ChangeOrderNewLineRel
			one-to-many relation to ContractChangeOrder
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine    = ContractLine
				and    related.CreateNewLine   = true
				and   (related.ContractVersion.ChangeOrderStatus = 1
				or     related.ContractVersion.ChangeOrderStatus = 2))

		ChangeOrderLineDetailRel
			one-to-many relation to ContractChangeOrder
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine = ContractLine
				or    (related.AllocateDrawDown
				and    LineNotClosed))

		ChangeOrderLineDetailCurrentVersionRel
			one-to-many relation to ContractChangeOrder
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine = ContractLine
				and    related.IsCurrentVersion)

		ChangeOrderLineDetailWithAmountRel
			one-to-many relation to ContractChangeOrder
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine = ContractLine
				and    related.AllowanceOptions !=1
				and    related.ContractVersion.ChangeOrderStatus = 3
				and   (related.BaseCost entered
				or     related.Quantity entered))

		ChangeOrderLineDetailWithNewAmountRel
			one-to-many relation to ContractChangeOrder
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
			Instance Selection
				where (related.ContractLine = ContractLine
				and   (related.ContractVersion.ChangeOrderStatus = 1
				or     related.ContractVersion.ChangeOrderStatus = 2)
				and    related.AllowanceOptions !=1
				and   (related.BaseCost entered
				or     related.Quantity entered))

		PatientChargeItemsRel
			one-to-many relation to PatientChargeItem
			Field Mapping uses ByContractLine
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine

		PoInvLineFactRel
			one-to-many relation to PoInvLineFact
			Field Mapping uses ByItem
				related.ProcureGroup	= ContractGroup
				related.Item			= ItemNumber
				related.EntBuyUom		= UOM.UnitOfMeasure
			Instance Selection
				where (related.PoDate >= EffectiveDate)


		PurgeContractLineDistributionRel is a ContractLineDistribution set
			Instance Selection
				include deleted records

		PurgePatientChargeItemRel
			one-to-many relation to PatientChargeItem
			Field Mapping uses ByContractLine
				related.ContractGroup	= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				include deleted records

		PurgeKeywordShadowRel
			one-to-many relation to KeywordShadow
			Field Mapping uses ByContractLine
				related.ItemGroup		= ContractGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				include deleted records

		PurgeContractLineCommentRel is a ContractLineComment set
			Instance Selection
				include deleted records

		PurgeContractLineAttachmentRel is a ContractLineAttachment set
			Instance Selection
				include deleted records

		PurgeContractLineAOCRel is a ContractLineAOC set
			Instance Selection
				include deleted records

		PurgeMfgContractLinePivotRel
			one-to-many relation to MfgContractLinePivot
			Field Mapping uses symbolic key
				related.ContractGroup 				= ContractGroup
				related.ManufacturerContractPivot	= Contract
				related.MfgContractLinePivot		= ContractLine
			Instance Selection
				include deleted records

		PurgeContractLineTierCostRel is a ContractLineTierCost set
			Instance Selection
				include deleted records

		PurgeContractLineMemberRel is a ContractLineMember set
			Instance Selection
				include deleted records

		PurgeContractRebateQualifierItemRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByItem
				related.ContractGroup									= ContractGroup
				related.ContractRebateQualifierItem.RebateContract		= Contract
				related.ContractRebateQualifierItem.RebateContractLine	= ContractLine
			Instance Selection
				include deleted records

		PurgePurchaseOrderAndLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set10
			Instance Selection
				include deleted records
				where (related.PurchaseOrderLine.ProcurementGroup	= ContractGroup
				and    related.PurchaseOrderLine.Contract			= Contract
				and    related.PurchaseOrderLine.ContractLine		= ContractLine)

		PurgeContractLineErrorRel is a ContractLineError set
			Instance Selection
				include deleted records

		OpenMatchInvoiceMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses ByContract
				related.Contract 			= Contract
				related.ContractLine 		= ContractLine
			Instance Selection
				where (related.Company.VendorGroup = ContractGroup
				and    related.Status             != 9)
				
		PrimaryContactRel
			one-to-one relation to ContractAttachedContact
			Field Mapping uses ByPrimary
				related.ContractGroup = ContractGroup
				related.Contract      = Contract

		LineCommentPrintOnContractRel
			one-to-many relation to ContractLineComment
			Field Mapping uses BySequenceNumber
				related.ContractGroup = ContractGroup
				related.Contract 	  = Contract
				related.ContractLine  = ContractLine
			Instance Selection
				where (related.PrintOnContract = true)

	Field Rules

		HandlingTimeInMinutes
			if (SpecialHandlingCode.TimeSensitive)
				required
					"HandlingTimeIsRequiredForTimeSensitiveItem"
		SpecialHandlingInstructions
			if (SpecialHandlingCodeEntered)
				required
					"SpecialHandlingInstructionsAreRequired"

		SpecialHandlingCode
			if  (SpecialHandlingCode changed
			and  SpecialHandlingCode entered)
				constraint (SpecialHandlingCode.Active)
					"SpecialHandlingCodeMustBeActive"
			
			if (SpecialHandlingCode not entered
			or (SpecialHandlingCodeEntered
			and SpecialHandlingCode.TimeSensitive != true))
				initialize HandlingTimeInMinutes

		HSNSACCode
			if (IsHSNSACCodeEnabled)
				if (ItemType.Itemmast)
					default to ItemNumber.HSNSACCode
			else
				cannot be entered
					"CannotEnter,HSN_/SACCodeFlagIsNotSetAtVendorBusinessGroup"
			if (Contract.ContractStatus.Released)
				cannot be changed
					"ContractIsReleased;CannotChangeHSN_/SACCode"

		CanUseForCostDefaulting

			if (Contract.ManufacturerOrDistributor.DistributorContract
			and ManufacturerContract not entered)
				ManufacturerContract	= Contract

			if  (!Contract.NonServicePurchaseType)
				force default to false

		CanUseForInvoicePayment

			if (!Contract.ServicePurchaseType)
				force default to false

		ItemNumber

			if (DistributorContractLineRel exists
			and DistributorContractLineRel.ItemType.Itemmast)
				cannot be changed
					"CannotChangeItemNumberOnManufacturerContractLineWhenAssociatedDistributorContractLineExistsWhereItemNumberIsAnItemMaster"  

			if (Contract.ManufacturerOrDistributor.DistributorContract
			and ManufacturerContract not entered)
				ManufacturerContract	= Contract

		ManualItemNumber

			if (ItemNumberEntered
			and ItemNumberExists)
				initialize ManualItemNumber

		SpecialItemOptions

			if (ItemNumberExists
			or  ItemType.Service)
				force default to 0

			if (SpecialItem)
				if (TypeOrSubTypeKeepAsSpecialItem)
					SpecialItemOptions = SpecialItemOptions.KeepAsSpecialItem
				else
				if (TypeOrSubTypeCreateItemOnActivation)
					SpecialItemOptions = SpecialItemOptions.CreateItemOnActivation
				else
				if (TypeOrSubTypeCreateItemWithProcess)
					SpecialItemOptions = SpecialItemOptions.CreateItemWithProcess

		ItemDescription

			if ((!ItemNumberExists)
			and (ItemType.Special
			or   ItemType.Service)
			and !NonDirectBuyItem)
				required

			if (ItemType.Special
			and NonDirectBuyItem)
				required

		ItemType
			if (Contract.ServicePurchaseType)
				ItemType = ItemType.Service

			if (Contract.PreferredContract = true)
				constraint (!ItemType.Service)
					"CannotEnterAServiceItemTypeOnAPreferredContract"

			if (Contract.IsManufacturerOrDistributorContract)
				constraint (!ItemType.Service)
					"CannotEnterAServiceItemTypeOnManufacturerOrDistributorContract"

			if (Contract.Stockless)
				constraint (!ItemType.Service)
					"CannotEnterAServiceItemTypeOnAStocklessContract"

			if (HasBeenActivated
			and CanUseForCostDefaulting
			and ItemType changed)
				if (ItemType.Service)
					cannot be changed
						"CannotChangeToAServiceTypeItem;ContractLine<ContractLine>HasBeenActivated"
				if (old ItemType.Service)
					cannot be changed
						"CannotChangeToANonServiceTypeItem;ContractLine<ContractLine>HasBeenActivated"

		ServiceCode
			if (ItemType.Service)
				default to ServiceCode.Quantity
				required
			if (ItemType.Special)
				initialize ServiceCode
			if (ItemType.Itemmast)
				initialize ServiceCode

		VendorItem

			if (!VendorItem entered
			and NonServiceItem
			and (Contract.HasAPurchaseType
			or  NonDirectBuyItem)
			and !Contract.ContractTemplate
			and  Contract.Vendor entered)
				if (ItemNumberExists)
					if (GlobalTradeItemNumber entered)
						if (VenItemManfDflt.VendorItem.Manufacturer.ManufacturerCode entered
						and VenItemManfDflt exists)
							default to first VenItemManfDflt.VendorItem
					if (VendorItem !entered
					and Manufacturer entered
					and ManufacturerNumber entered
					and VenItemLineManfDflt exists)
						default to first VenItemLineManfDflt.VendorItem
					if (VendorItem !entered
					and Contract.ManufacturerCodeDivision entered
					and ManufacturerNumber entered
					and VenItemHeaderManfDflt exists)
						default to first VenItemHeaderManfDflt.VendorItem
					if (VendorItem !entered
					and DefaultPovenitemRel exists
					and ManufacturerNumber !entered)
						default to first DefaultPovenitemRel.VendorItem
					if (VendorItem !entered
					and ManufacturerNumber entered
					and MFGInfoOnlyRel exists)
						default to first MFGInfoOnlyRel.VendorItem
				else
					if (ManufacturerNumber entered
					and !VendorItemExistsFromManufacturerNumber)
						VendorItem = ManufacturerNumber

			if (Contract.ServicePurchaseType)
				force default to blank

			LocalItemNumber			= ItemNumber

			if (Contract.ManufacturerOrDistributor.DistributorContract
			and ManufacturerContract not entered)
				ManufacturerContract = Contract

		VendorItemDescription
			if (Contract.ServicePurchaseType)
				force default to blank

			if (VendorItemExists)
				force default to VendorItem.VendorItemDescription

		UOM
			if (VendorItem entered)
				if (UOM = blank)
					if (VendorItem.VendorPriceUOM = VendorItem.VendorBuyUOM
					or  VendorItem.VendorPriceUOM = blank)
						default to VendorItem.VendorBuyUOM
						LocalUOMDefaultedFromVendorItem = true
					else
						default to VendorItem.VendorPriceUOM
						LocalUOMDefaultedFromVendorItem = true

			if (!UOM entered)
				if (GlobalTradeItemNumberExists)
					default to ItemGTINByItemRel.UnitOfMeasure
				else
				if  (ItemNumberExists)
					if (!ItemNumber.IsCatchWeightItem)
						default to ItemNumber.DefaultBuyUOM
					if (ItemNumber.IsCatchWeightItem)
						default to ItemNumber.StockUOM
				else
					if (ItemType.Special)
						required
					if (ItemType.Service)
						if (ServiceCode.Quantity)
							required
						else
							if (ServiceCode.Amount and !Contract.ServicePurchaseType)
							 	required

		UOMConversion

			UOMConversion = DerivedUOMConversion

		CommodityCode
			if (ItemNumberExists
			and Contract.HasAPurchaseType)
				if (ItemNumber.CommodityCode != CommodityCode
				and CommodityCode entered)
					confirmation required
						"EnteredCommodityCodeDoesNotMatchItemCommodityCode;ToChangeCommodityCode,ItMustBeMaintainedOnItem"

			if (ItemType.Special
			or  ItemType.Service)
				default to Contract.CommodityCode

		Manufacturer

			if (ItemType.Special)
				default to Contract.ManufacturerCodeDivision

	   		if (ItemType.Service)
				constraint (Manufacturer not entered)
					"ServiceTypeItem;ManufacturerCodeAndDivisionMustBeBlank"

			if (Manufacturer changed)
				if (Manufacturer !entered)
					initialize LowUOMCodeGTIN 

		ManufacturerNumber

			if (!ManufacturerNumber entered)
				if (GlobalTradeItemNumberExists)
					Manufacturer.ManufacturerCode	  = ItemGTINByItemRel.Manufacturer.ManufacturerCode
					Manufacturer.ManufacturerDivision = ItemGTINByItemRel.Manufacturer.ManufacturerDivision
					ManufacturerNumber		          = ItemGTINByItemRel.ManufacturerNumber
				else
				if  (VendorItem exists
				and  GlobalTradeItemNumber !exists
				and (VendorItem.Manufacturer.ManufacturerCode entered
				or   VendorItem.ManufacturerNumber entered))
					Manufacturer.ManufacturerCode     = VendorItem.Manufacturer.ManufacturerCode
					Manufacturer.ManufacturerDivision = VendorItem.Manufacturer.ManufacturerDivision
					ManufacturerNumber       		  = VendorItem.ManufacturerNumber
				else
				if (ItemNumberExists
				and VendorItem !exists
				and GlobalTradeItemNumber !exists
				and ItemNumber.ManufacturerNumber entered)
					Manufacturer.ManufacturerCode     = ItemNumber.Manufacturer.ManufacturerCode
					Manufacturer.ManufacturerDivision = ItemNumber.Manufacturer.ManufacturerDivision
					ManufacturerNumber       		  = ItemNumber.ManufacturerNumber

	   		if (ItemType.Service)
				constraint (ManufacturerNumber not entered)
					"ServiceTypeItem;ManufacturerNumberMustBeBlank"  

			if (ItemType.Special)
				if (!Manufacturer entered)
					Manufacturer = Contract.ManufacturerCodeDivision

			if (ManufacturerNumber changed)
				if (ManufacturerNumber !entered)
					initialize LowUOMCodeGTIN 

		Sku

	   		if (NonSpecialItem)
	   			force default to blank

	  	NdcNbr

	   		if (ServiceItem)
	   			force default to blank

	   	HibccUpn

	   		if (ServiceItem)
	   			force default to blank

	   	UccEanUpn

	   		if (ServiceItem)
	   			force default to blank

	   	Upc

	   		if (ServiceItem)
	   			force default to blank

		HCPCSCode 
			if (HSPCSCodeSequenceEntered)
				constraint (HCPCSCode.HCPCS entered)
					"MustEnterAnHCPCSIfEnteringASequence"
		
		GenericName

	   		if (ServiceItem)
	   			force default to blank

		LabelerIdentificationCode
			if (HasVendorItem)
				force default to VendorItem.LabelerIdentificationCode

	   		if (ServiceItem)
	   			force default to blank

		BaseCost

			constraint (!BaseCost < 0)
				"BaseCostCannotBeLessThanZero"

			if (BaseCost changed
			and !Contract.ServicePurchaseType)
				FutureCost = old BaseCost
				
			if (Contract.ServicePurchaseType
			and BaseCost changed
			and ServiceCode.Quantity)
				LifetimeMaximumAmount = (BaseCost * LifetimeMaximumQuantity)	

			if (BaseCost changed
			and IsComponentGroupItem)
				for each ContractCapitatedComponentGroupItemRel 
					invoke UpdateFromLineBaseCost each
						invoked.OldBaseCost = old BaseCost 
						invoked.NewBaseCost = BaseCost 

		RevisionProcedureCost
			if (RevisionProcedure)
				BaseCost = RevisionProcedureCost

			if (EitherRevisionProcedure)
				required 
					"RevisionProcedureCostIsRequired"

		Quantity
			if ((!ItemType.Service and ServiceCode.Amount)
			or  (!Contract.StandingPurchaseType))
				cannot be entered
			if (ItemType.Service and ServiceCode.Amount
			and Contract.StandingPurchaseType)
				default to 1

		Retainage
			initial value is true
				when (Contract.UseRetainage)

			if (RetainageTurnedOn)
				constraint (AmountOrdered = 0)
					"RetainageForLine<ContractLine>CannotBeTurnedOnWhenAmountOrderedIsGreaterThanZero"

		RetainagePercent1
			initial value is (Contract.RetainagePercent1)
				when (Contract.UseRetainage)
			if  (Retainage)
				default to Contract.RetainagePercent1
			if (!Retainage)
				initialize

		RetainageUpToPercent
			initial value is (Contract.RetainageUpToPercent)
				when (Contract.UseRetainage)
			if (Retainage)
				default to Contract.RetainageUpToPercent

			if (!Retainage)
				initialize

		RetainagePercent2
			initial value is (Contract.RetainagePercent2)
				when (Contract.UseRetainage)
			if (Retainage)
				default to Contract.RetainagePercent2

			if (!Retainage)
				initialize

		RetainageOverridePercent
			initial value is (Contract.RetainageOverridePercent)
				when (Contract.UseRetainage)
			if (Retainage)
				default to Contract.RetainageOverridePercent

			if (!Retainage)
				initialize

		LifetimeMaximumQuantity
			constraint (LifetimeMaximumQuantity >= 0)
				"LifetimeMaximumQuantityCannotBeLessThanZero"

			if (ServiceCode.Quantity
			and Contract.ServicePurchaseType
			and LifetimeMaximumQuantity > 0)
				constraint (LifetimeMaximumQuantity * BaseCost >= AmountOrdered)
					"CannotChangeBaseCostOrLifetimeMaximumQuantitySoThatMultipleIsLessThanInvoicedAmountOf<AmountOrdered>"

			if (ServiceCode.Amount)
				initialize

			if (Contract.ServicePurchaseType
			and LifetimeMaximumQuantity changed
			and ServiceCode.Quantity)
				LifetimeMaximumAmount = (BaseCost * LifetimeMaximumQuantity)				
		
		LifetimeMaximumAmount
			if (Contract.ServicePurchaseType)
				if  (ServiceCode.Amount)
					force default to BaseCost
				if  (ServiceCode.Quantity)
					LifetimeMaximumAmount = (BaseCost * LifetimeMaximumQuantity)

			if (LifetimeMaximumAmount changed
			and LifetimeMaximumAmount != 0)
				constraint (LifetimeMaximumAmount >= MaximumLineAmountInUse)
					"CannotChangeLifetimeMaximumAmountToLessThanAmountOrderedOrInvoiced"

		PerOrderMaximumQuantity
			if (ServiceCode.Amount
			or  Contract.StandingPurchaseType)
				initialize

			constraint (PerOrderMaximumQuantity >= 0)
				"PerOrderMaximumQuantityCannotBeLessThanZero"

		PerOrderMaximumAmount

			if  (Contract.StandingPurchaseType)
				initialize

		PerOrderMinimumQuantity
			if  (Contract.StandingPurchaseType
			or   ServiceCode.Amount)
				initialize

			constraint (PerOrderMinimumQuantity >= 0)
				"PerOrderMinimumQuantityCannotBeLessThanZero"

		PerOrderMinimumAmount
			if  (Contract.StandingPurchaseType)
				initialize

		Taxable

			if (TaxCode entered)
				default to true

			if (TaxUsageCode entered)
				default to true

		TaxCode

			initialize LocalCodeCount
			for each Contract.PoCompanyRel
				if (each.TaxEntityRel.UseTaxCodeAccounts)
					LocalTaxEntity	= each.TaxEntityRel.TaxEntity
					if (EntityTaxCodeRel exists)
						LocalCodeCount = LocalCodeCount + 1
				else
					LocalCodeCount = LocalCodeCount + 1
			constraint (LocalCodeCount > 0)
				"OnContractLine<ContractLine>TheTaxCode<TaxCode>IsInvalidForAnyCompanyInThisProcurementGroup"

		Priority
			if  (Contract.StandingPurchaseType)
				force default to 0
			else
			if  (Contract.ServicePurchaseType)
				force default to 0
			else
			if (Contract.ContractOrBlanketOrCatalog)
				default to Contract.Priority
				constraint (Priority > 0)
					"PriorityMustBeAtLeast1"

		ConsignCode
			if (Contract.NonServicePurchaseType)
				if (ItemType.Special)
					default to Contract.ConsignCode

		CostOption
			default to 1

			if 	(!EitherPrimaryProcedure
			and	 CostOption.CostRequired
			and !Contract.ServicePurchaseType
			and !FromProposedItem)
				constraint (BaseCost not = 0)
					"BaseCostIsRequiredWhenCostOptionIsCostRequired"
			if (Contract.ServicePurchaseType)
				if (!CostOption.VendorDetermined)
					constraint (BaseCost not = 0)
						"BaseCostIsRequired"
			if (EitherPrimaryProcedure)
				constraint (BaseCost > 0)
					"PrimaryProcedureCostIsRequired"						

		PricingMarkupOrDiscount
			if (IsManufacturerOrDistributorContract)
				initialize
			if (Contract.StandingPurchaseType)
				initialize

		LinePriceBreakOn
			if (IsManufacturerOrDistributorContract)
				initialize
			if (Contract.StandingPurchaseType)
				initialize

		PriceBreak
			edit contiguous
				"PriceBreakEntriesMustBeContiguous"

		ConsignmentPricingMarkupOrDiscount
			if (IsManufacturerOrDistributorContract)
				initialize
			if (Contract.StandingPurchaseType)
				initialize

		ConsignmentLinePriceBreakOn
			if (IsManufacturerOrDistributorContract)
				initialize
			if (Contract.StandingPurchaseType)
				initialize

		ConsignmentPriceBreak
			edit contiguous
				"PriceBreakEntriesMustBeContiguous"

		ManufacturerContract
			default to Contract
		ManufacturerContractLine
			default to ContractLine
		LocalBaseCostUpdatedFromZero
			default to false
		LocalBaseCostChanged
			default to false
		OnHold
			if (Contract.ContractTemplate)
				force default to false

		TransientAccount

			if (TransientAccount entered)
				constraint (PayablesDistributionCode !entered)
					"CannotEnterDefaultAccountAndDistributionCode"

			LocalGeneralLedgerSystemCode = "PO"
			if (TransientAccount.GeneralLedgerChartAccount entered
			and	TransientAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered) 
				constraint (LocalGeneralLedgerSystemCode within TransientAccount.GeneralLedgerChartAccount.Account.SystemRestriction) 
					"InvalidSystemForAccount"							

		PayablesDistributionCode
			initial value is Contract.PayablesDistributionCode
			if (Contract.UseHeaderCommitments)
				initialize
			if (PayablesDistributionCode entered)
				if (Contract.ServicePurchaseType)
					constraint (PayablesDistributionCode.AccountEdit.Contracts)
						"ServiceContractsMustUseDistributionCodeHavingEditAccountFlagSetToContract"

			if (PayablesDistributionCode entered)
				constraint (TransientAccount !entered)
					"CannotEnterDefaultAccountAndDistributionCode"

		BlanketStandingRequestingLocation
			initial value is Contract.BlanketStandingRequestingLocation

		CreateFromCopy
			default to false

   		EffectiveDate

			if (Contract.EffectiveDate entered
			and !IsDistributorContract)
				default to Contract.EffectiveDate

			if (EffectiveDate changed)
				if (EffectiveDate not entered)
					if (Contract.EffectiveDate entered)
						default to Contract.EffectiveDate
				if (LineCommitments)

					if (Contract.UseOnlyLineCommitments)
						for each ContractLineDistribution set
							invoke UpdateForCommitments each
								invoked.FromDateChange = true 

		ExpirationDate

			if (Contract.ExpirationDate entered
			and !IsDistributorContract)
				default to Contract.ExpirationDate
			if (ExpirationDate changed)
				if (ExpirationDate not entered)
					if (Contract.ExpirationDate entered)
						default to Contract.ExpirationDate

		UserField1
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to blank

		UserField2
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to blank

		UserField3
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to blank

		UserField4
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to blank

		UserField5
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to blank

		UserFieldN1
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to 0

		UserFieldN2
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to 0

		UserFieldN3
			if (ItemNumberExists)
				force default to blank
	   		if (ServiceItem)
	   			force default to 0

		PurchaseOrderUserField2
			if  (Contract.ServicePurchaseType)
				force default to blank

		PurchaseOrderUserField4
			if  (Contract.ServicePurchaseType)
				force default to blank

		PurchaseOrderUserField6
			if  (Contract.ServicePurchaseType)
				force default to blank

		ErrorsExist
			default to false

		MajorPurchasingClass

	   		if (ServicePurchaseTypeContract)
	   			initialize

		MinorPurchasingClass

	   		if (ServicePurchaseTypeContract)
	   			initialize

		MajorInventoryClass

	   		if (ServiceItem)
	   			initialize

		MinorInventoryClass

			if (ServiceItem)
	   			initialize

		GlobalTradeItemNumber

			if (ItemNumberExists
			and Manufacturer entered
			and ManufacturerNumber entered)
				default to first IcitemgtinManfDefaultRel.ItemGTIN
				default to first IcitemgtinManfRel.ItemGTIN

			if (GlobalTradeItemNumberExists)
				if (!ManufacturerNumber entered)
					Manufacturer.ManufacturerCode		= ItemGTINByItemRel.Manufacturer.ManufacturerCode
					Manufacturer.ManufacturerDivision	= ItemGTINByItemRel.Manufacturer.ManufacturerDivision
					ManufacturerNumber					= ItemGTINByItemRel.ManufacturerNumber
				if (!VendorItem entered)
					LocalManufacturerInfo.Manufacturer.ManufacturerCode		    = Manufacturer.ManufacturerCode
					LocalManufacturerInfo.Manufacturer.ManufacturerDivision      = Manufacturer.ManufacturerDivision
					LocalManufacturerInfo.ManufacturerNumber	       			 = ManufacturerNumber
					if (GetVendorItemFromManufacturerInformationRel exists)
						VendorItem 				 	= first GetVendorItemFromManufacturerInformationRel.VendorItem

			if (GlobalTradeItemNumber entered)

		   		if (GlobalTradeItemNumber !exists)
		   			initialize GTINCheckDigit
					GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
					LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
					constraint (LocalValidCheckDigit = true)
						"GTINCheckDigitIsInvalid"

		LowUOMCode 

			if (LowUOMCode changed)
				if (LowUOMCode !entered)
					initialize LowUOMCodeGTIN 
					initialize LowUOMCodeHibccUPN

			if (ItemNumber exists)
				initialize LowUOMCode
		
		LowUOMCodeGTIN 

			if (LowUOMCodeGTIN entered)

		   		if (LowUOMCodeGTIN !exists)
		   			initialize GTINCheckDigit
					GTINCheckDigit.ItemGTIN		= LowUOMCodeGTIN
					LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
					constraint (LocalValidCheckDigit = true)
						"LowUOMCodeGTINCheckDigitIsInvalid"
		
		LowUOMCodeHibccUPN 

			if (ItemNumber exists
			and LowUOMCode entered
			and ItemNumber.StockUOM != UOM.UnitOfMeasure)
				default to LowUOMCodeHibccUPNDefaultRel.HIBCCItemUPN			

		SelectedForNegotiate
			default to false

		DistributorModifications
			if (!CreateDistributorContractLine)
				force default to 0

		PreferredLine

			if (ItemType.Service)
				force default to false

			if (PreferredLine
			and !Contract.PreferredContract)

					if (Contract.IsNotDistributorAndNotManufacturer)
						constraint (Contract.ContractParticipantsExist)
							"MustHaveAtLeastOneContractParticipantIfLineIsPreferred"
					else
					if (Contract.IsManufacturerContract)
						constraint (Contract.ContractTierMembersExist)
							"MustHaveAtLeastOneContractMemberIfLineIsPreferred"
					else
					if (Contract.IsDistributorContract)
						constraint (Contract.ContractPricingMembersExist)
							"MustHaveAtLeastOneContractMemberIfLineIsPreferred"

	Rule Blocks

		CreateCommentFromCommentCode
			invoke Create ContractLineComment
				fill in fields from this instance
				invoked.CommentTitle = StandardCommentCodeRel.CommentName
				if (StandardCommentCodeRel.StandardCommentPrintCode.InvoiceComments)
					invoked.CommentUsedFor = 3 
				else
				if (StandardCommentCodeRel.StandardCommentPrintCode.PrintOnPurchaseOrder)
					invoked.CommentUsedFor = 2 
				else
					invoked.CommentUsedFor = 1 
				invoked.Description  	   	= StandardCommentCodeRel.CommentText
				invoked.Attachment.File   	= StandardCommentCodeRel.Attachment.File
				invoked.Attachment.MimeType	= StandardCommentCodeRel.Attachment.MimeType
				invoked.Attachment.Title	= StandardCommentCodeRel.Attachment.Title
			initialize StandardCommentCode

		CloseRequisitionCommitments

			if (RQGeneralLedgerSystemCodeRel.EncumbranceOption.Track
			or  RQGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
				if (RQSourcingEventLineSource exists)
					for each RQSourcingEventLineSource
						if (each.ReqLineNotClosed)
							invoke CloseLineOrCommitFromContract each.RequisitionLineRel

		ContractLineActivationRules

			LocalItemNumber				= ItemNumber
			LocalItemDescription		= ItemDescription
			if  (IsPreferredLine)
				LocalHasBeenActivated = HasBeenActivated
				if (IsNotDistributorAndNotManufacturer)
					include CreatePreferredContract
				else
					include CreateTierPreferredContract

			if  (!ContractLineState.Active)
				if (!LineErrorsExist
				and CanUseForCostDefaulting)
					if (Contract.NonServicePurchaseType
					and !ItemType.Service)
						include CreateItemAndVendorItem

				include CloseRequisitionCommitments

				make transition to Active
				HasBeenActivated = true

			for each NonActiveLineMemberRel
				invoke FastUpdateWithoutEdits each
					invoked.SetToActive = true

			if  (!ItemNumberExists
			and  !Contract.StandingPurchaseType
			and  !Contract.ServicePurchaseType
			and   CapitatedProcedure = 0
			and (!Contract.CapitatedContract
			or   (Contract.CapitatedContract
			and   HasChargeableComponentItem)))						
				CreateKeywordShadow = true
				include ManageKeywordShadow
			if (ItemNumberExists)
				if (ItemKeywordShadowRel.ItemHasContract = false)
					invoke Update ItemKeywordShadowRel
						invoked.ItemHasContract 	 		= true
						if (IsPreferredLine)
							invoked.HasPreferredContract 	= true
			if (CanUseForConsolidated)
				include ConsolidatedItemMasterRules

		ManualCostChangeTolerances
			
			CostToleranceExceeded		= false
			PercentToleranceExceeded	= false
			ToleranceExceeded 			= false		
			for each ContractLinePriceUpdateRel
				invoke Delete each
			for each ContractLineManualPriceUpdateRel
				invoke Delete each
			if (Contract.DerivedToleranceAmount > 0)
				BaseCostDifference = (BaseCost - old BaseCost)
				if (BaseCostDifference < 0)
					BaseCostDifference = (BaseCostDifference * -1)
				if (BaseCostDifference > Contract.DerivedToleranceAmount)
					CostToleranceExceeded = true
			if (DerivedTolerancePercent > 0)
				if (DerivedChangePercent > DerivedTolerancePercent)
					PercentToleranceExceeded = true
			if ((Contract.DerivedConnector !entered
			or   Contract.DerivedConnector = "O")  
			and (CostToleranceExceeded
			or   PercentToleranceExceeded))
				ToleranceExceeded = true
			if (Contract.DerivedConnector = "A"
			and CostToleranceExceeded
			and PercentToleranceExceeded)
				ToleranceExceeded = true
			if (Contract.DerivedToleranceHandling = 1)
				if (ToleranceExceeded = true)
					confirmation required
						"CostChangeTolerancesOnTheContractClassificationHaveBeenExceeded;ManageItemsOverToleranceInToleranceErrors"						
					invoke Create ContractLinePriceChange
						invoked.ProcessingType      	= 6
						invoked.ContractGroup			= ContractGroup
						invoked.Contract				= Contract
						invoked.ContractLine            = ContractLine
				 		invoked.ItemNumber				= ItemNumber		
						invoked.VendorItem              = VendorItem        
						invoked.UOM                     = UOM
						invoked.EffectiveDate       	= EffectiveDate
						invoked.ExpirationDate 			= ExpirationDate
						invoked.ManufacturerInformation.Manufacturer = Manufacturer
						invoked.ManufacturerInformation.ManufacturerNumber = ManufacturerNumber		
						invoked.FutureCost      		= BaseCost
						invoked.BaseCost                = old BaseCost
					BaseCost		= old BaseCost
					FutureCost      = LocalFutureCost	
			else
			if (Contract.DerivedToleranceHandling = 2)
				constraint (ToleranceExceeded = false)
					"CannotChangeCost;TolerancesOnTheContractClassificationHaveBeenExceeded"
		
		LineCloseProcess

			for each AnyLineMemberRel
				invoke CloseLineMember each

			if (!LocalFromHeaderClose
			and !LocalDistClose
			and  LineErrorsExist)
				invoke PurgeLineErrors ContractLineError
					invoked.PrmContractGroup = ContractGroup
					invoked.PrmContract 	 = Contract
					invoked.PrmContractLine  = ContractLine

			ContractLineState = ContractLineState.Closed
			ErrorsExist = false
			OnHold      = false

			if (ItemNumber !exists)
				RemoveKeywordShadow = true
				include ManageKeywordShadow
			else
			if (ItemNumberExists)

				if (OtherKeywordItemRel !exists)

					invoke Update ItemKeywordShadowRel
						invoked.ItemHasContract 	 = false
						invoked.HasPreferredContract = false

			if (IsComponentGroupItem)
				for each ContractCapitatedComponentGroupItemRel 			
					invoke Delete each 

			for each ProcurementTemplateLineRel
				invoke DeleteOrClearFromContractInstance each
					invoked.ClearLines  = true

			SelectedForItemCreation	= false
			if (HasBeenActivated)
				if (IsPreferredLine)
					if (HasPrefMan)
						invoke Delete ContractPreferredManufacturerRel

			if (HasAllowances)
				for each ContractAllowanceRel
					invoke CloseAllowance each

			if (!LocalFromHeaderClose
			and IsManufacturerOrDistributorContract)
				if (ContractLineImportDirectRel exists)
					invoke FastUpdate ContractLineImportDirectRel
						invoked.Contract	    = blank
						invoked.ContractLine	= blank

			if (Contract.IsDistributorContract)
				LocalVendorItem = VendorItem
				if (ContractLineImportDistributorRel exists)
					invoke Update first ContractLineImportDistributorRel
						invoked.ContractVendorItem = blank					

		LineCloseProcessExit 
			if (IsManufacturerOrDistributorContract
			and !LocalFromHeaderClose)
				if (ContractLineImportByManufacturer)
					for each ContractLineImportByManufacturerGPORel
						invoke CreateClosedLineError each
				else 
				if (ContractLineImportByManufacturerDirect)
					invoke CreateClosedLineError ContractLineImportDirectRel
						invoked.ClearContractLine = true		

			if (VendorBackorderByContractLineRel exists)
				invoke CloseBackorder VendorBackorderByContractLineRel

			include ConsolidatedItemMasterRules

		DefaultItemNumbers

			LocalVendorItem = VendorItem 
			
			if (VendorItem entered
			and ItemNumber !exists)
				if (GetVendorItemSetRel exists)
					if ((!ContractLine exists
					and (IsNotDistributorContract
					or  (Contract.ManufacturerOrDistributor.DistributorContract
					and !FromManufacturerContract
					and (first GetVendorItemSetRel.ManufacturerNumber	= ManufacturerNumber
					or   first GetVendorItemSetRel.ManufacturerNumber	not entered))
					or  (Contract.ManufacturerOrDistributor.DistributorContract
					and  FromManufacturerContract
					and (VendorItem		!= ManufacturerNumber
					or  (VendorItem     = ManufacturerNumber
					and  first GetVendorItemSetRel.ManufacturerNumber	= ManufacturerNumber)))))
					or  (ContractLine exists
					and !HasBeenActivated
					and (IsNotDistributorAndNotManufacturer
					or  (Contract.ManufacturerOrDistributor.DistributorContract
					and !FromManufacturerContract
					and (VendorItem		!= ManufacturerNumber
					or  (VendorItem     = ManufacturerNumber
					and  first GetVendorItemSetRel.ManufacturerNumber	= ManufacturerNumber)))
					or  (Contract.ManufacturerOrDistributor.ManufacturerContract
					and  CanUseForCostDefaulting)
					or  (Contract.ManufacturerOrDistributor.ManufacturerContract
					and !CanUseForCostDefaulting
					and (ItemType.Itemmast
					or  (ItemType.Special
					and  VendorItem		!= old ManufacturerNumber
					and  old ItemNumber entered))))))
						ItemNumber = first GetVendorItemSetRel.Item
				else
				if (ItemNumber !exists
				and GetVendorItemAllRel exists) 
					if ((!ContractLine exists
					and (IsNotDistributorContract
					or  (Contract.ManufacturerOrDistributor.DistributorContract
					and !FromManufacturerContract
					and (first GetVendorItemAllRel.ManufacturerNumber	= ManufacturerNumber
					or   first GetVendorItemAllRel.ManufacturerNumber	not entered))
					or  (Contract.ManufacturerOrDistributor.DistributorContract
					and  FromManufacturerContract
					and (VendorItem		!= ManufacturerNumber
					or  (VendorItem     = ManufacturerNumber
					and  first GetVendorItemAllRel.ManufacturerNumber	= ManufacturerNumber)))))
					or  (ContractLine exists
					and !HasBeenActivated
					and (IsNotDistributorAndNotManufacturer
					or  (Contract.ManufacturerOrDistributor.DistributorContract
					and !FromManufacturerContract
					and (VendorItem		!= ManufacturerNumber
					or  (VendorItem     = ManufacturerNumber
					and  first GetVendorItemAllRel.ManufacturerNumber	= ManufacturerNumber)))
					or  (Contract.ManufacturerOrDistributor.ManufacturerContract
					and  CanUseForCostDefaulting)
					or  (Contract.ManufacturerOrDistributor.ManufacturerContract
					and !CanUseForCostDefaulting
					and (ItemType.Itemmast
					or  (ItemType.Special
					and  VendorItem		!= old ManufacturerNumber
					and  old ItemNumber entered))))))
						ItemNumber = first GetVendorItemAllRel.Item

			if (ItemNumber !exists)
				if (GlobalTradeItemNumber entered)
					if (GlobalTradeItemNumberExists) 
						ItemNumber = first ItemGTINMatchUOMRelActive.Item 
					else
					if (ItemNumber !exists)
					    if (ItemGTINInactiveRel exists)
					    	ItemNumber = first ItemGTINMatchUOMRelAll.Item 

			if (ItemNumber !exists)
				if (LowUOMCodeGTIN entered)
					if (LowUOMCodeGTINExists) 
						ItemNumber = first LowUOMCodeGTINExistsRel.Item 
					else
					if (ItemNumber !exists)
					    if (LowUOMCodeGTINInactiveRel exists)
					    	ItemNumber = first LowUOMCodeGTINInactiveRel.Item 
			
			if (ItemNumber !exists)
				if (ManufacturerNumber entered)
					if (Manufacturer entered)
						LocalManufacturerInfo.Manufacturer	                = Manufacturer
						LocalManufacturerInfo.ManufacturerNumber    		= ManufacturerNumber
					else
						LocalManufacturerInfo.ManufacturerNumber	        = ManufacturerNumber
						LocalManufacturerInfo.Manufacturer					= Contract.ManufacturerCodeDivision

					if (GetVendorItemFromManufacturerInformationRel exists) 
						ItemNumber		 		 	= first GetVendorItemFromManufacturerInformationRel.Item
						if (VendorItem !entered)
							VendorItem 				 	= first GetVendorItemFromManufacturerInformationRel.VendorItem
					else
					if (ItemNumber not exists)
						if (GetVendorItemFromManufacturerInfoInactiveRel exists)  
							ItemNumber		 		 	= first GetVendorItemFromManufacturerInfoInactiveRel.Item
							if (VendorItem !entered)
								VendorItem 				 	= first GetVendorItemFromManufacturerInfoInactiveRel.VendorItem

			if (ItemNumber !exists)
				if (ItemByManufacturerCount = 1)
					ItemNumber = first ItemByManufacturerRel.Item

				if (ItemNumber !exists
				and InactiveItemByManufacturerCount = 1)
					ItemNumber = first InactiveItemByManufacturerRel.Item

			if (Upc entered
			and	ItemNumber !exists)
				if (UPCExistsOnItemRel exists)
					ItemNumber = first UPCExistsOnItemRel.Item  	
			if (NdcNbr entered
			and	ItemNumber !exists)
				if (NdcNbrExistsOnItemRel exists)
					ItemNumber = NdcNbrExistsOnItemRel.Item  
			if (HibccUpn entered
			and	ItemNumber !exists)
				if (HibccUpnExistsOnItemRel exists)
					ItemNumber = first HibccUpnExistsOnItemRel.Item
			if (LowUOMCodeHibccUPN entered
			and ItemNumber !exists)
				if (LowUOMCodeHibccUpnExistsOnItemRel exists)
					ItemNumber = first LowUOMCodeHibccUpnExistsOnItemRel.Item   
			if (UccEanUpn entered
			and	ItemNumber !exists)
				if (UccEanUpnExistsOnItemRel exists)
					ItemNumber = UccEanUpnExistsOnItemRel.Item  
			if (ItemNumberExists)
				ItemType = ItemType.Itemmast
			else
				if (ServiceItem
				or  ServiceCode.Amount
				or  ServiceCode.Quantity)
					ItemType = ItemType.Service
				else
					ItemType = ItemType.Special 

			if (ItemNumberExists)
				UOMConversion = DerivedUOMConversion

			if (Contract.NonServicePurchaseType)
				if  (SpecialItem
				and (ItemNumber !entered
				or   VendorItem changed
				or   Manufacturer.ManufacturerCode changed
				or   ManufacturerNumber changed))
					if (ItemNumber !entered)
						if  (VendorItem entered
						and (ContractGroup.UseManufacturerAndVendorItem = 0
						or   ContractGroup.UseManufacturerAndVendorItem = 1
						or   ContractGroup.UseManufacturerAndVendorItem = 2))
							if (VendorItemNotItem)
								if (ContractGroup.UseManufacturerAndVendorItem = 0
								or  ContractGroup.UseManufacturerAndVendorItem = 1)
									ItemNumber = VendorItem
								else
								if (ContractGroup.UseManufacturerAndVendorItem = 2
								and Manufacturer.ManufacturerCode entered)
									ItemNumber = ManufacturerPlusVendorItem
							else
							if (VendorItemIsItem
							and ManufacturerAndVendorItemNotItem
							and SpecialItem
							and (ContractGroup.UseManufacturerAndVendorItem = 1
							or   ContractGroup.UseManufacturerAndVendorItem = 2)
							and Manufacturer.ManufacturerCode entered)
								ItemNumber = ManufacturerPlusVendorItem
						else 
						if (ContractGroup.UseManufacturerAndVendorItem = 3)
							ItemNumber = ManufacturerNumberPlusManufacturer
						else 
						if (ContractGroup.UseManufacturerAndVendorItem = 4)
							ItemNumber = ManufacturerPlusManufacturerNumber  	

					if (ManufacturerNumber changed
					and !VendorItem changed
					and ContractGroup.UpdateVendorItemFromChangedManufacturerNumber
					and VendorItem = old ManufacturerNumber)
						VendorItem = ManufacturerNumber 

						if (ContractGroup.UpdateItemFromChangedVendorItem)
							if (old VendorItem = ItemNumber
							and ContractGroup.UseManufacturerAndVendorItem != 2
							and ContractGroup.UseManufacturerAndVendorItem != 3
							and ContractGroup.UseManufacturerAndVendorItem != 4)

								ItemNumber = VendorItem 

							else
							if (ItemNumber contains old VendorItem)

								if (Manufacturer.ManufacturerCode entered)
									if (ContractGroup.UseManufacturerAndVendorItem = 2)
										ItemNumber = ManufacturerPlusVendorItem
									else 
									if (ContractGroup.UseManufacturerAndVendorItem = 3)
										ItemNumber = ManufacturerNumberPlusManufacturer
									else 
									if (ContractGroup.UseManufacturerAndVendorItem = 4)
										ItemNumber = ManufacturerPlusManufacturerNumber  								
					
					else 
					if (VendorItem changed
					and VendorItem entered 
					and ContractGroup.UpdateItemFromChangedVendorItem)
						if (old VendorItem = ItemNumber
						and ContractGroup.UseManufacturerAndVendorItem != 2
						and ContractGroup.UseManufacturerAndVendorItem != 3
						and ContractGroup.UseManufacturerAndVendorItem != 4)

							ItemNumber = VendorItem 

						else
						if (ItemNumber contains old VendorItem)

							if (Manufacturer.ManufacturerCode entered)
								if (ContractGroup.UseManufacturerAndVendorItem = 2)
									ItemNumber = ManufacturerPlusVendorItem
								else 
								if (ContractGroup.UseManufacturerAndVendorItem = 3
								and ManufacturerNumber entered)
									ItemNumber = ManufacturerNumberPlusManufacturer
								else 
								if (ContractGroup.UseManufacturerAndVendorItem = 4
								and ManufacturerNumber entered)
									ItemNumber = ManufacturerPlusManufacturerNumber  	

					if (Manufacturer.ManufacturerCode changed
					and Manufacturer.ManufacturerCode entered)

						if (ContractGroup.UseManufacturerAndVendorItem = 2
						and VendorItem entered)
							ItemNumber = ManufacturerPlusVendorItem
						else 
						if (ContractGroup.UseManufacturerAndVendorItem = 3
						and ManufacturerNumber entered)
							ItemNumber = ManufacturerNumberPlusManufacturer
						else 
						if (ContractGroup.UseManufacturerAndVendorItem = 4
						and ManufacturerNumber entered)
							ItemNumber = ManufacturerPlusManufacturerNumber  		

			if (LocalVendorItem != VendorItem 
			and	ContractLineImportDistributorRel exists)
				invoke Update first ContractLineImportDistributorRel
					invoked.ContractVendorItem = VendorItem  

		UpdateRules 

			if (SpecialHandlingCode not entered)
				initialize SpecialHandlingInstructions
				initialize HandlingTimeInMinutes

			if (ItemType.Special)
				ServiceCode = ServiceCode.NotServiceItem

			include DefaultItemNumbers

			if (Contract.MaximumAmount entered
			and !UpdateFromManufacturerContract
			and (CanUseForCostDefaulting
			or   CanUseForInvoicePayment)
			and (LifetimeMaximumAmount changed
			or   LifetimeMaximumQuantity changed
			or   BaseCost changed)
			and !FromImport)
				if (!Contract.ServicePurchaseType)
					if (Contract.TotalChildMaximumAmount > 0)
						if (Contract.ContractSubclassification entered)
							if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								constraint ((Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + (LifetimeMaximumAmount - old LifetimeMaximumAmount)) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountPlusTotalChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
						else
							if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								constraint ((Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + (LifetimeMaximumAmount - old LifetimeMaximumAmount)) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountPlusTotalChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
					else
						if (Contract.ContractSubclassification entered)
							if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								constraint ((Contract.TotalLineMaximumAmount + (LifetimeMaximumAmount - old LifetimeMaximumAmount)) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<Contract.MaximumAmount>AtTheContractHeader"
						else
							if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								constraint ((Contract.TotalLineMaximumAmount + (LifetimeMaximumAmount - old LifetimeMaximumAmount)) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<Contract.MaximumAmount>AtTheContractHeader"
				else
				if  (Contract.ServicePurchaseType
				and !ExistingLineForChangeOrder)
					if (Contract.TotalChildMaximumAmount > 0)
						if (Contract.ContractSubclassification entered)
							if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								if (ServiceCode.Amount)
									constraint (Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + (BaseCost - old BaseCost) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountPlusTotalChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
								if (ServiceCode.Quantity)
									constraint (Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + ((BaseCost * LifetimeMaximumQuantity) - (old BaseCost * old LifetimeMaximumQuantity)) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountPlusTotalChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
						else
							if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								if (ServiceCode.Amount)
									constraint (Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + (BaseCost - old BaseCost) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountPlusTotalChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
								if (ServiceCode.Quantity)
									constraint (Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + ((BaseCost * LifetimeMaximumQuantity) - (old BaseCost * old LifetimeMaximumQuantity)) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountPlusTotalChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
					else
						if (Contract.ContractSubclassification entered)
							if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								if (ServiceCode.Amount)
									constraint (Contract.TotalLineMaximumAmount + (BaseCost - old BaseCost) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<Contract.MaximumAmount>AtTheContractHeader"
								if (ServiceCode.Quantity)
									constraint (Contract.TotalLineMaximumAmount + ((BaseCost * LifetimeMaximumQuantity) - (old BaseCost * old LifetimeMaximumQuantity)) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<Contract.MaximumAmount>AtTheContractHeader"
						else
							if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								if (ServiceCode.Amount)
									constraint (Contract.TotalLineMaximumAmount + (BaseCost - old BaseCost) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<Contract.MaximumAmount>AtTheContractHeader"
								if (ServiceCode.Quantity)
									constraint (Contract.TotalLineMaximumAmount + ((BaseCost * LifetimeMaximumQuantity) - (old BaseCost * old LifetimeMaximumQuantity)) <= Contract.MaximumAmount)
										"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<Contract.MaximumAmount>AtTheContractHeader"

			if (BaseCost changed)

				LocalFutureCost = FutureCost
				if (Contract.DerivedHasCostChangeTolerances
				and NonManualUpdate = false)
					include ManualCostChangeTolerances 

				if (Contract.ServicePurchaseType
				and ServiceCode.Quantity
				and LifetimeMaximumQuantity > 0)
					constraint (LifetimeMaximumQuantity > QuantityOrdered)
						"CannotChangeBaseCost;QuantityServiceIsFullyInvoiced"

                constraint (!Contract.InMatrixApprovalProcess)
                    "CannotChangeBaseCostWhenTheContractIsInTheMatrixApprovalProcess"

                if  ((Contract.ActiveContract
                or    Contract.ContractStatus.ReadyToActivate)
                and   Contract.ContractUsesMatrixApprovalsForAmendment)
                    if (Contract.ActiveContract)
                        invoke CreateAmendment Active Contract
                    else 
                    if (Contract.ContractStatus.ReadyToActivate)
                        invoke CreateAmendment ReadyToActivate Contract

				if (IsDistributorContract
				and !UpdateFromManufacturerContract)
					constraint (!FromManufacturerContract)
						"CannotChangeBaseCostOnDistributorContractLineCreatedFromManufacturerContractLine"

				if (old BaseCost = 0)
					LocalBaseCostUpdatedFromZero = true
				else
					LocalBaseCostChanged = true

				if (ItemNumberExists)
					invoke ContractCostChanged ItemmastRel

				if (ItemNumber.Consignment)
					if (old BaseCost = ConsignmentCurrentNetCost)
						ConsignmentCurrentNetCost = BaseCost
				else
					if (old BaseCost = CurrentNetCost)
						CurrentNetCost   = BaseCost

			if (BaseCost changed
			or  UOM.UnitOfMeasure changed
			or  ItemNumber changed)
				if (ItemNumberExists
				and ItemNumber.DefaultBuyUOM != UOM.UnitOfMeasure)
					DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
				else
					if (CurrentNetCost entered)
						DefaultBuyUnitCost = CurrentNetCost * 100000
					else
						DefaultBuyUnitCost = ConsignmentCurrentNetCost * 100000

			if (DistCodeChanged)
				invoke Delete ContractLineDistribution set
				for each PayablesDistributionCode.PayablesDistributionCodeDetail set
					invoke CreateFromDistCodeOrDefaultAccount ContractLineDistribution set
						fill in fields from ContractLine
						invoked.DistributionAccount	= each.DistributionAccount
						invoked.Percent				= each.DistributionPercent

			if (CanUseForCostDefaulting changed)
				if (CanUseForCostDefaulting = false)
					constraint (!HasBeenActivated)
						"CannotChangeCanUseForCostDefaultingOption;LineHasBeenActivated"

				if (CanUseForCostDefaulting = false)
					ErrorsExist = false
					invoke Purge ContractLineErrorRel
					if (Contract.UseOnlyLineCommitments)
						for each ContractLineDistribution set
							invoke DeleteCommitmentOnly each
					else
						invoke Delete ContractLineDistributionSpreadRel
					if (!UpdateFromManufacturerContract)
						for each AnyLineMemberRel
							invoke UpdateErrors each
								invoked.ParmErrorsExist = ErrorsExist

				if (IsDistributorContract
				and LineMemberDistributorRels exists
				and !UpdateFromManufacturerContract)
					invoke UpdateFast LineMemberDistributorRels
						invoked.CanUseForCostDefaulting = CanUseForCostDefaulting

			if (UOM changed
			and !UpdateFromManufacturerContract)
				for each ContractLineMember set
					invoke UpdateContractLineMember each
						invoked.UOM = UOM

			if (CanUseForInvoicePayment changed)
				if (CanUseForInvoicePayment = false)
					constraint (NoInvoicesForContractLine)
						"CannotSetCanUseForInvoicePaymentToFalse;InvoiceDetailsExistForContractLine"
					ErrorsExist = false
					invoke Purge ContractLineErrorRel
					if (Contract.UseOnlyLineCommitments)
						for each ContractLineDistribution set
							invoke DeleteCommitmentOnly each
					else
						invoke Delete ContractLineDistributionSpreadRel

			if (LifetimeMaximumQuantity changed)
				if (ContractTypeAllowsZeroMaxQuantity
				and LifetimeMaximumQuantity = 0
				and ServiceCode.Quantity)
					UseCommitments = false
			
				if  ((Contract.ActiveContract
				or    Contract.ContractStatus.ReadyToActivate)
				and   Contract.ContractUsesMatrixApprovalsForAmendment)
					if (Contract.ActiveContract)
						invoke CreateAmendment Active Contract
					else 
					if (Contract.ContractStatus.ReadyToActivate)
						invoke CreateAmendment ReadyToActivate Contract
			
			if (UseCommitments changed)
				if  (old UseCommitments = false
				and  UseCommitments)
					if (ContractLine.HasBeenActivated)
						constraint (CommitmentAmountRemaining > 0)
							"CannotChangeCommitmentFromNoToYes;LineIsFullyOrderedOrInvoiced"
					include CheckToCreateOrDeleteCommitment
				if (old UseCommitments
				and UseCommitments = false)
					constraint (!HasLineDistributionSpreads)
						"MustSelect_Create_CommitmentsWhenSpreadRecordsExist"
					constraint (!ContractLine.HasBeenActivated)
						"CannotChangeCommitmentFromYesToNoAfterContractLineHasBeenActivated"

				if (UseCommitments = false)
					if (HasDistributionsWithCommitments)
						if (Contract.UseOnlyLineCommitments)
							for each ContractLineDistribution set
								invoke DeleteCommitmentOnly each
						else
							invoke Delete ContractLineDistributionSpreadRel

			    if (UseCommitments)
                    include CheckToCreateOrDeleteCommitment				

			if ((ItemNumber changed
			or   VendorItem changed
			or   LocalFromUpdateItemNumberWithManufacturer = true)
			and  HasBeenActivated
			and  PreferredLine
			and  Contract.IsNotDistributorAndNotManufacturer)
				OldVendorItem = old VendorItem
				if (OldItemNumber !entered)
					OldItemNumber = old ItemNumber				
				for each ContractParticipantRels
					invoke CreateOrUpdatePreferredContract each
						invoked.ParmOldItem 	   	= OldItemNumber
						invoked.ParmOldVendorItem 	= OldVendorItem
						invoked.ParmFromUpdate 		= true
						invoked.ParmItem  			= ItemNumber
						invoked.ParmVendorItem      = VendorItem

			if (VendorItem changed)
				OldVendorItem = old VendorItem
				OldItemNumber = old ItemNumber
				
				invoke FastUpdateWithoutEdits
					invoked.UpdateVendorItem 		= true
					invoked.FromDirectLineUpdate 	= true
					invoked.NewVendorItem    		= VendorItem
					invoked.OldVendorItem           = old VendorItem

				if (VendorItem exists)
					if (!GlobalTradeItemNumber entered)
						initialize ManufacturerNumber

			if (ItemType changed
			and !ItemType.Special)
				initialize Picture

			if (HasBeenActivated changed)
				constraint (HasBeenActivated = true)
					"CannotSetHasBeenActivatedToFalseOnceSetToTrue"

			if  (VendorItem changed
			and  ItemType.Special
			and  HasBeenActivated
			and  PoitemvenExistsForVendorItem
			and !DefaultVendorItemFromManufacturerInformationRel exists)
				Manufacturer.ManufacturerCode	  = GetVendorItemSetRel.Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision = GetVendorItemSetRel.Manufacturer.ManufacturerDivision
				ManufacturerNumber		          = GetVendorItemSetRel.ManufacturerNumber

			if ((Manufacturer changed
			or   ManufacturerNumber changed)
			and  ItemType.Special
			and  HasBeenActivated
			and  DefaultVendorItemFromManufacturerInformationRel exists
			and !PoitemvenExistsForVendorItem)
				VendorItem 				 	= first DefaultVendorItemFromManufacturerInformationRel.VendorItem
				ItemNumber                  = first DefaultVendorItemFromManufacturerInformationRel.Item


			if (StandardCommentCode entered)
				include CreateCommentFromCommentCode

			if (old ItemNumber exists)
				OldItemNumberEntered = true
			if (ItemNumber changed)
				ItemNumberChanged = true
				if (PatientChargeItemsExist)
					for each PatientChargeItemsRel
						if (ItemType.Service)
							invoke Delete each
						else
							invoke ChangeItemNumber each
								invoked.NewItem    = ItemNumber
				if (HasBeenActivated)
					if (old ItemNumber exists)
						LocalItemNumber = old ItemNumber
						invoke Update OldItemKeywordShadowRel
							if (OldItemHasContractLineForCostDefaultingRel exists)
								invoked.ItemHasContract = true
							else
								invoked.ItemHasContract = false
							if (OldItemHasContractLinePreferredRel exists)
								invoked.HasPreferredContract = true
							else
								invoked.HasPreferredContract = false
					if (ItemNumberExists)
						invoke Update ItemKeywordShadowRel
							invoked.ItemHasContract = true
							if (PreferredLine)
								invoked.HasPreferredContract = true

			if (ItemType changed
			and ItemType.Service)
				initialize Manufacturer
				initialize ManufacturerNumber

			if (PreferredLine changed
			and HasBeenActivated)
				if (PreferredLine = false)
					if (HasPrefMan)
						invoke Delete ContractPreferredManufacturerRel
				if (PreferredLine = true)
					if (IsNotDistributorAndNotManufacturer)
						include CreatePreferredContract
					else
						include CreateTierPreferredContract

			if (CapitatedProcedure changed)
				if (CapitatedProcedure = 0)
					constraint (ContractCapitatedComponentGroupRel !exists)
						"CannotUnselectCapitatedProcedure;ComponentGroupsExist"

				if (CapitatedProcedure > 0)
					constraint (ContractCapitatedComponentGroupItemRel !exists)
						"CannotMakeACapitatedProcedure;AlreadyUsedAsAComponent"	

					if  (Contract.ActiveContract)
						invoke CreateAmendment Active Contract	

			if (VendorBackorderByContractLineRel exists)
				if (ItemNumber changed 
        		or  ItemDescription changed 
        		or  VendorItem changed 
				or  VendorItemDescription changed)
					invoke FastUpdate VendorBackorderByContractLineRel
						invoked.VendorItem 				= VendorItem
						invoked.Item       				= ItemNumber 
						invoked.ItemDescription 		= ItemDescription 
						invoked.VendorItemDescription	= VendorItemDescription 

			if (UsageIdentifier changed)
				if (UsageIdentifier.Drugs)
					Drugs = true
				else
				if (UsageIdentifier.Instrument)
					Instrument = true
				else
				if (UsageIdentifier.Reusable)
					Reusable = true
				else
				if (UsageIdentifier.Pharmacy)
					Pharmaceutical = true
				else
				if (UsageIdentifier.Implant)
					Implantable = true
				else
				if (UsageIdentifier.Analytics)
					Analytics = true 			
				else
				if (UsageIdentifier.Narcotic)
					Narcotic = true 
				else
				if (UsageIdentifier.Dressing) 
					Dressing = true 


		CreateRecallProductTransaction
			LocalRecallGroup		= PrmRecallGroup
			LocalRecallNotice       = PrmRecallNotice
			LocalRecallProduct      = PrmRecallProduct
			if (RecallProductTransactionRel !exists)
				invoke Create RecallProductTransaction
					invoked.RecallGroup						= PrmRecallGroup
					invoked.RecallNotice					= PrmRecallNotice
					invoked.RecallProduct					= PrmRecallProduct
					invoked.ActivityType					= 13 
					invoked.ContractLineGroup.ContractGroup	= ContractGroup
					invoked.ContractLineGroup.Contract		= Contract
					invoked.ContractLineGroup.ContractLine	= ContractLine
					invoked.LocalPriority					= PrmQueryPriority
					invoked.LocalDueDate					= PrmQueryDueDate
					invoked.LocalRecallUser					= PrmQueryDocumentUser
					invoked.LocalInstructions               = PrmInstructions
					invoked.TransactionDate					= EffectiveDate
					invoked.LocalCreateTasks                = PrmCreateTasks

		ManageItemKeywordShadow

			invoke BuildTextIndex ItemNumber

		ManageKeywordShadow

			if	((TextSearchable changed
			or   PreferredLine changed
			or   UpdateKeywordShadow)
			and  !ItemType.Itemmast)

				if (KeywordShadowRel exists)
					invoke Update KeywordShadowRel
						invoked.ItemGroup					=	ContractGroup
						invoked.Item						=   ContractLine.ItemNumber
						invoked.Contract	    			=	Contract
						invoked.ContractLine				=	ContractLine
						invoked.Description					=	ItemDescription
						invoked.Description2				=	ItemDescription2
						invoked.Description3				=	ItemDescription3
						invoked.ManufacturerCodeTextSearch 	= DerivedManufacturerCodeTextSearch
						invoked.ManufacturerNumberTextSearch = DerivedManufacturerNumberKeywordShadow
						invoked.TextSearch					=	TextSearch
						invoked.ItemHasContract				= true
						invoked.HasPreferredContract		= PreferredLine
						invoked.ItemGTIN                    = GlobalTradeItemNumber

			if (UpdateDistributor changed
			and IsManufacturerContract
			and DistributorLinesExistWithNoModifications)
				DistributorModifications = DistributorModifications.ModificationsExist

			if (ItemType changed
			or  CreateKeywordShadow
			or  RemoveKeywordShadow
			or  UpdateKeywordShadow)
				if  (!ItemNumberExists
				and  !Contract.StandingPurchaseType
				and  !Contract.ServicePurchaseType
				and   CapitatedProcedure = 0
				and  !Contract.CapitatedContract)
					if ((CreateKeywordShadow
					or   UpdateKeywordShadow)
					and  KeywordShadowRel !exists)
						invoke Create KeywordShadow
							invoked.ItemGroup					= ContractGroup
							invoked.Item						= ItemNumber
							invoked.Contract	    			= Contract
							invoked.ContractLine				= ContractLine
							invoked.Description					= ItemDescription
							invoked.Description2				= ItemDescription2
							invoked.Description3				= ItemDescription3
							invoked.ManufacturerCodeTextSearch 	= DerivedManufacturerCodeTextSearch
							invoked.ManufacturerNumberTextSearch = DerivedManufacturerNumberKeywordShadow
							invoked.TextSearch					= TextSearch
							invoked.ItemHasContract				= true
							invoked.HasPreferredContract		= PreferredLine
							invoked.ItemGTIN                    = GlobalTradeItemNumber

				if ((ItemNumberExists
				or  RemoveKeywordShadow)
				and KeywordShadowRel exists)
					invoke Delete KeywordShadowRel

		UpdateOtherLinesToMatch

			if  (ItemType.Special)
				if  (Manufacturer entered 
				and  ManufacturerNumber entered
				and  Manufacturer !changed
				and  ManufacturerNumber !changed   
				and (UpdateForOtherContractLine changed
				or   LocalCreateAction)
				and	 SameManufacturerInfoRel exists)
					if (!LocalFromUpdateAttributes)
						confirmation required 
							"OtherContractLinesExistWithTheSameManufacturerInformationWhichWillUpdateThisInformation;DoYouWantToContinue?"
					for each SameManufacturerInfoRel 
						invoke FastUpdateToEvent each 
							invoked.LocalDoNotUpdateConsolidated	= true 
							if (each.UOM = UOM)	
								invoked.GlobalTradeItemNumber       = GlobalTradeItemNumber
								invoked.Sku                         = Sku 
								invoked.HibccUpn                    = HibccUpn 
								invoked.UccEanUpn                   = UccEanUpn 
								invoked.NdcNbr                      = NdcNbr 
								invoked.Upc                         = Upc 
							if (each.LowUOMCode = old LowUOMCode)
								invoked.LowUOMCode                  = LowUOMCode 
								invoked.LowUOMCodeGTIN              = LowUOMCodeGTIN 
								invoked.LowUOMCodeHibccUPN          = LowUOMCodeHibccUPN 
							if (each.UOM = old UOM 
							and each.LowUOMCode = old LowUOMCode)
								invoked.UOMConversion               = UOMConversion 
							invoked.LabelerIdentificationCode       = LabelerIdentificationCode
							invoked.CommodityCode                   = CommodityCode
							if (!LocalCreateAction)
								invoked.ItemDescription             = ItemDescription
								invoked.ItemDescription2            = ItemDescription2
								invoked.ItemDescription3            = ItemDescription3
							invoked.GenericName                     = GenericName 
							invoked.UNSPSCCode                      = UNSPSCCode 
							invoked.MajorPurchasingClass            = MajorPurchasingClass
							invoked.MinorPurchasingClass            = MinorPurchasingClass
							invoked.MajorInventoryClass             = MajorInventoryClass
							invoked.MinorInventoryClass             = MinorInventoryClass
							invoked.HCPCSCode                       = HCPCSCode 
							invoked.Latex                           = Latex 
							invoked.HSNSACCode                      = HSNSACCode 
							invoked.GMDNPTCode                      = GMDNPTCode
							invoked.MajorPPEClass                   = MajorPPEClass
							invoked.MinorPPEClass                   = MinorPPEClass
							invoked.Sterile                         = Sterile 
							invoked.SingleUse                       = SingleUse 
							invoked.Reusable                        = Reusable 
							invoked.Reprocessed                     = Reprocessed
							invoked.Implantable                     = Implantable 
							invoked.ContainsHumanTissue             = ContainsHumanTissue 
							invoked.Pharmaceutical                  = Pharmaceutical
							invoked.Dressing                        = Dressing 
							invoked.Bioabsorbable                   = Bioabsorbable
							invoked.UserField1                      = UserField1
							invoked.UserField2                      = UserField2
							invoked.UserField3                      = UserField3 
							invoked.UserField4                      = UserField4 
							invoked.UserField5                      = UserField5 
							invoked.UserFieldN1                     = UserFieldN1
							invoked.UserFieldN2                     = UserFieldN2 
							invoked.UserFieldN3                     = UserFieldN3 
							invoked.Narcotic                        = Narcotic
							invoked.Instrument                      = Instrument 
							invoked.Drugs                           = Drugs 
							invoked.Analytics                       = Analytics 
							invoked.PatientChargeable               = PatientChargeable 
							invoked.ChargeNumber                    = ChargeNumber 
							invoked.CriticalItem					= CriticalItem 
							invoked.PersonalProtectiveEquipment     = PersonalProtectiveEquipment
				if  (Manufacturer entered 
				and  ManufacturerNumber entered 
				and  Manufacturer !changed
				and  ManufacturerNumber !changed   
				and  SameManufacturerInfoRel exists  
				and  ClinicalSystemUse != first SameManufacturerInfoRel.ClinicalSystemUse) 
					if (!LocalFromUpdateAttributes)
						confirmation required 
							"OtherContractLinesExistWithTheSameManufacturerInformationWhichWillHave_Clinical_System_UseUpdated;DoYouWantToContinue?"					
					for each SameManufacturerInfoRel 
						invoke FastUpdateToEvent each 
							invoked.LocalDoNotUpdateConsolidated	= true 
							invoked.ClinicalSystemUse               = ClinicalSystemUse  
							invoked.LocalFromOtherLinesToMatch      = true 		
				if  (!LocalCreateAction
				and  Manufacturer entered 
				and  ManufacturerNumber entered 
				and  Manufacturer !changed
				and  ManufacturerNumber !changed   
				and  VendorItem changed
				and	 SameManufacturerInfoVendorItemRel exists)
					if (!LocalFromUpdateAttributes)
						confirmation required 
							"OtherContractLinesExistWithTheSameManufacturerInformationAndVendorAndUnitOfMeasureWhichWillHaveVendorItemUpdated;DoYouWantToContinue?"					
					for each SameManufacturerInfoVendorItemRel 
						invoke FastUpdateToEvent each 
							invoked.LocalDoNotUpdateConsolidated	= true 
							invoked.VendorItem                  	= VendorItem   
							invoked.LocalFromOtherLinesToMatch      = true 		
		UpdateExitRules

			if  (ItemType.Special
			and (Manufacturer changed
			or   ManufacturerNumber changed))  
				invoke UpdateManufacturerInformation 
					invoked.ParmManufacturer 		= Manufacturer
					invoked.ParmManufacturerNumber  = ManufacturerNumber
					invoked.ParmUpdateAllLines      = true 
			
			if (ItemNumberChanged)
				if (ItemNumberExists)
					invoke UpdateFromItem 
					if (OldItemNumberEntered)
						for each RebateQualifierItemsRel
							invoke UpdateBlankItemNumber each
								invoked.PrmItemNumber = ItemNumber

					if (!OldItemNumberEntered)
						invoke ChangeSpecialItemToItem
							invoked.PrmNewItemNumber  = ItemNumber

				for each ContractLineMember set
					invoke UpdateItemNumber each   
						invoked.PrmItemNumber	= ItemNumber

			if (ItemNumberExists
			and UOM.UnitOfMeasure changed)
				invoke UpdateFromItem      
			
			if  (Contract.NotContractTemplate
			and (CanUseForCostDefaulting
			or   CanUseForInvoicePayment
			or   CreateDistributorContractLine)
			and !FromSuggestedItem
			and !LocalFromOtherLinesToMatch)
				if ((Contract.ContractSource.Manual
				or   Contract.ContractSource.Interview)
				and (!IsDistributorContract)
				and (!FromImport)
				and (!LineErrorsExist))
					include FrontEndCreateOrUpdateHardLineEdits
					include BackOfficeDependentHardLineEdits
					IncludeDistributionEdits = true
					include ManageErrorChecking
				else
					IncludeAllErrorEdits = true
					include ManageErrorChecking

			if ((LocalBaseCostChanged
			or  LocalBaseCostUpdatedFromZero)
			and ManufacturerContract = Contract
			and !TransientLineMemberUpdate)
				if (LineMemberRel exists)
					invoke UpdateDefault LineMemberRel
						if (LocalCostEffectiveDate > current corporate date)
							invoked.effective date 			= LocalCostEffectiveDate
						invoked.BaseCost = BaseCost
						invoked.PassedRoundTo = DerivedRoundTo
						invoked.RoundToPassed = true
						invoked.UpdateOverrideNetCost = "Y"
						invoked.BypassOverrideNetCost = "N"
						invoked.ResettingModified = true

			if (IsManufacturerContract)
				if (!ContractLinePivotRel exists
				and !Contract.ContractTemplate
				and !Contract.MultiTierDistributorContract
				and  ContractPivotRel exists)
					invoke Create MfgContractLinePivot
						invoked.ContractGroup				= ContractGroup
						invoked.ManufacturerContractPivot	= Contract
						invoked.MfgContractLinePivot		= ContractLine
			else
				if (ContractLinePivotRel exists)
					invoke Delete ContractLinePivotRel

			if ((!PriceBreaksAllowed and PricingMarkupOrDiscount entered)
			or  (!CsnPriceBreaksAllowed and ConsignmentPricingMarkupOrDiscount entered))
				include InitializePriceBreaks


         	if  (LifetimeMaximumAmount changed
			and (CanUseForCostDefaulting
			or   CanUseForInvoicePayment)
			and  CanUseForCostDefaulting !changed
			and  CanUseForInvoicePayment !changed)
                increment Contract.TotalLineMaximumAmount by (LifetimeMaximumAmount - old LifetimeMaximumAmount)
				if (LifetimeMaximumAmount > old LifetimeMaximumAmount)
                    invoke CalculateTotalLineMaximumAmount Contract

            if (LifetimeMaximumAmount entered)
                if (CanUseForCostDefaulting changed)
                    if (CanUseForCostDefaulting = true)
                        increment Contract.TotalLineMaximumAmount by LifetimeMaximumAmount
                    if (CanUseForCostDefaulting = false)
                        decrement Contract.TotalLineMaximumAmount by LifetimeMaximumAmount
                if (CanUseForInvoicePayment changed)
                    if (CanUseForInvoicePayment =true)
                        increment Contract.TotalLineMaximumAmount by LifetimeMaximumAmount
                    if (CanUseForInvoicePayment = false)
                        decrement Contract.TotalLineMaximumAmount by LifetimeMaximumAmount

			if (EffectiveDate changed
			or  ExpirationDate changed
			and ContractLineTierCostExists)
				for each ContractLineTierCostRel
					invoke UpdateDates each
						invoked.ParmEffectiveDate   = EffectiveDate
						invoked.ParmExpirationDate  = ExpirationDate

			if (ItemType.Special)
				if (VendorItem changed)
				
					if (!FromSuggestedItem)
						invoke CheckForSuggestedItems

				if (ItemDescription changed)
					for each ProcurementTemplateLineRel
						invoke Update each
							invoked.SpecialItem 		   = true
							invoked.SpecialItemDescription = ItemDescription
							invoked.Manufacturer           = Manufacturer 
							invoked.ManufacturerNumber     = ManufacturerNumber

			if (Priority changed)
				invoke FastUpdateWithoutEdits ContractLineMember set
					invoked.NewPriority = Priority

			if (LifetimeMaximumAmount changed)
				if (UseCommitments
				and Contract.UseOnlyLineCommitments)
					if (LifetimeMaximumAmount > 0)
						for each ContractLineDistribution set
							if (each.CommitmentsExist)
								invoke UpdateForCommitments each
							else
								invoke AddOtherCommitments each
					else
					if (LifetimeMaximumAmount = 0)
						for each ContractLineDistribution set
							invoke DeleteCommitmentOnly each

			if (TextSearchable changed)
				include BuildTextIndexes

			if (ItemNumberChanged
			or  VendorItem changed
			or  Manufacturer changed
			or  ManufacturerNumber changed)
				if (TierQualifierItemRel exists)
					for each TierQualifierItemRel 
						invoke UpdateItemInformation each 
			
			if (PreferredLine changed
			and HasBeenActivated
			and ItemNumberExists)

				invoke Update ItemKeywordShadowRel
					invoked.HasPreferredContract = PreferredLine

			include ManageKeywordShadow

			if (LocalDoNotUpdateConsolidated = false)
				include ConsolidatedItemMasterRules 

		CreateTierCostRules
			if (TransientTierCost1 entered)
				constraint (TransientTier1 entered)
					"MustEnterTierIfTierCostEntered"
			if (TransientTierCost2 entered)
				constraint (TransientTier2 entered)
					"MustEnterTierIfTierCostEntered"
			if (TransientTierCost3 entered)
				constraint (TransientTier3 entered)
					"MustEnterTierIfTierCostEntered"
			if (TransientTierCost4 entered)
				constraint (TransientTier4 entered)
					"MustEnterTierIfTierCostEntered"
			if (TransientTierCost5 entered)
				constraint (TransientTier5 entered)
					"MustEnterTierIfTierCostEntered"

		CreateTierCostExitRules
			if (TransientTier1 entered)
				invoke Create ContractLineTierCost
					invoked.ContractGroup = ContractGroup
					invoked.Contract      = Contract
					invoked.ContractLine  = ContractLine
					invoked.ContractTier  = TransientTier1
					invoked.TierCost      = TransientTierCost1

			if (TransientTier2 entered)
				invoke Create ContractLineTierCost
					invoked.ContractGroup = ContractGroup
					invoked.Contract      = Contract
					invoked.ContractLine  = ContractLine
					invoked.ContractTier  = TransientTier2
					invoked.TierCost      = TransientTierCost2

			if (TransientTier3 entered)
				invoke Create ContractLineTierCost
					invoked.ContractGroup = ContractGroup
					invoked.Contract      = Contract
					invoked.ContractLine  = ContractLine
					invoked.ContractTier  = TransientTier3
					invoked.TierCost      = TransientTierCost3

			if (TransientTier4 entered)
				invoke Create ContractLineTierCost
					invoked.ContractGroup = ContractGroup
					invoked.Contract      = Contract
					invoked.ContractLine  = ContractLine
					invoked.ContractTier  = TransientTier4
					invoked.TierCost      = TransientTierCost4

			if (TransientTier5 entered)
				invoke Create ContractLineTierCost
					invoked.ContractGroup = ContractGroup
					invoked.Contract      = Contract
					invoked.ContractLine  = ContractLine
					invoked.ContractTier  = TransientTier5
					invoked.TierCost      = TransientTierCost5

		CreateContractLinePriceChange
			invoke Create ContractLinePriceChange
				if (LocalContract != Contract)
					invoked.ProcessingType      = 3 
				else
				if (LocalContract = Contract)
					invoked.ProcessingType      = 5 
				invoked.FromContract	        = Contract
				invoked.FromLineNumber          = ContractLine
				invoked.ContractGroup			= ContractGroup
				invoked.Contract				= LocalContract
				invoked.ContractLine            = LocalContractLine
		 		invoked.ItemNumber				= ItemNumber
				invoked.VendorItem				= VendorItem
				invoked.UOM						= UOM
				invoked.EffectiveDate			= ParameterCompareEffectiveDate
				invoked.ExpirationDate			= ParameterCompareExpirationDate
				invoked.ManufacturerInformation.Manufacturer = Manufacturer
				invoked.ManufacturerInformation.ManufacturerNumber = ManufacturerNumber
				invoked.FutureCostDate			= LocalFutureCostDate
				invoked.FutureCost				= ((LocalFutureCost * CostIncreasePercent) + LocalFutureCost)
				invoked.BaseCost				= LocalBaseCost

		BuildTextIndexes
			build text search field TextSearch
				Fields
					ItemNumber  
					DerivedVendorItem 
					DerivedStrippedVendorItemText
					DerivedVendorItemDescription 
					DerivedManufacturerNumber 
					DerivedStrippedManufacturerNumberText
					ItemDescription
					ItemDescription2
					ItemDescription3
					Manufacturer
					MajorPurchasingClass
					MinorPurchasingClass
					MajorInventoryClass
					MinorInventoryClass
					GenericName
					CommodityCode
					LabelerIdentificationCode
					GlobalTradeItemNumber  
					HibccUpn  
					UNSPSCCode  

		InitializePriceBreaks
			invoke FastUpdate ContractLine
				if (!PriceBreaksAllowed and PricingMarkupOrDiscount entered)
					invoked.PricingMarkupOrDiscount = blank
					invoked.LinePriceBreakOn = blank
					invoked.PriceBreak.QuantityPercentPrice[1] = 0
					invoked.PriceBreak.QuantityPercentPrice[2] = 0
					invoked.PriceBreak.QuantityPercentPrice[3] = 0
					invoked.PriceBreak.QuantityPercentPrice[4] = 0
					invoked.PriceBreak.QuantityPercentPrice[5] = 0
				if (!CsnPriceBreaksAllowed and ConsignmentPricingMarkupOrDiscount entered)
					invoked.ConsignmentPricingMarkupOrDiscount = blank
					invoked.ConsignmentLinePriceBreakOn 	  = blank
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[1] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[2] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[3] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[4] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[5] = 0

		CheckToCreateOrDeleteCommitment  

			if ((CanUseForCostDefaulting
			or  CanUseForInvoicePayment)
			and ErrorsExist = false
			and UseCommitments
			and LineCommitments
			and !HasDistributionsWithCommitments)
				for each ContractLineDistribution set
					invoke CreateCommitmentFromLine each
						invoked.ParmSkipAddOtherCommitments = true
			else
			if (((CanUseForCostDefaulting = false
			and  !Contract.ServicePurchaseType)
			or   (CanUseForInvoicePayment = false
			and   Contract.ServicePurchaseType)
			or    ErrorsExist = true
			or    UseCommitments = false)
			and   LineCommitments
			and   HasDistributionsWithCommitments)
				for each ContractLineDistribution set
					invoke DeleteCommitmentOnly each

		IncomingCurrencyConversion

			ConvertedAmount            = 0
			ConvertedTaxAmount         = 0
			ConvertedAddOnChargeAmount = 0
			ConvertedRequestedAmount   = 0
			ConvertedInvoiceAmount     = 0
			ConvertedCostMessageAmount = 0
			ConvertedDifferenceAmount  = 0
			if (InCurrency = Contract.CurrencyCode)
					ConvertedAmount            = InAmount
					ConvertedTaxAmount         = InTaxAmount
					ConvertedAddOnChargeAmount = InAddOnChargeAmount
					ConvertedRequestedAmount   = InRequestedAmount
					ConvertedInvoiceAmount     = InInvoiceAmount
					ConvertedCostMessageAmount = InServiceCostMessageAmount
					ConvertedDifferenceAmount  = InDifferenceAmount
			else
				SavedFinanceEnterpriseGroup				= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				SavedExchangeDate		 	 			= InDate
				SavedFromCurrency                       = InCurrency
				LocalCurrencyExchange.ToCurrency 		= Contract.CurrencyCode
				if (InAmount != 0)
					SavedTransactionAmount              = InAmount
					ConvertedAmount                     = LocalCurrencyExchange.OutputCurrencyAmount
				if 	(InTaxAmount != 0)
					SavedTransactionAmount              = InTaxAmount
					ConvertedTaxAmount                  = LocalCurrencyExchange.OutputCurrencyAmount
				if  (InAddOnChargeAmount != 0)
					SavedTransactionAmount              = InAddOnChargeAmount
					ConvertedAddOnChargeAmount          = LocalCurrencyExchange.OutputCurrencyAmount
				if  (InRequestedAmount != 0)
					SavedTransactionAmount              = InRequestedAmount
					ConvertedRequestedAmount            = LocalCurrencyExchange.OutputCurrencyAmount
				if  (InInvoiceAmount != 0)
					SavedTransactionAmount              = InInvoiceAmount
					ConvertedInvoiceAmount              = LocalCurrencyExchange.OutputCurrencyAmount
				if (InServiceCostMessageAmount !=0)
					SavedTransactionAmount              = InServiceCostMessageAmount
					ConvertedCostMessageAmount          = LocalCurrencyExchange.OutputCurrencyAmount
				if (InDifferenceAmount !=0)
					SavedTransactionAmount              = InDifferenceAmount
					ConvertedDifferenceAmount           = LocalCurrencyExchange.OutputCurrencyAmount					

		ParticipantValidation   

			LocalParticipantIsValid 			= false
			LocalCompany						= PrmCompany
			LocalLocation   					= PrmRequisition.FromCompanyLocation.FromLocation
			LocalRequestingLocation				= PrmRequisition.RequestingLocation 
			LocalCompanyPricingGroup			= InventoryCompanyRel.PricingGroup 
			LocalLocationPricingGroup           = InventoryLocationRel.PricingGroup
			LocalRequestingLocationPricingGroup = RequestingLocationRel.PricingGroup  
			if (ContractParticipantLocationRel exists 
			or  ContractParticipantCompanyRel exists 
			or  ContractParticipantRequestingLocationRel exists
			or  ContractParticipantCompanyPricingGroupRel exists
			or  ContractParticipantLocationPricingGroupRel exists
			or  ContractParticipantRequestingLocationPricingGroupRel exists)
				LocalParticipantIsValid = true

		ManageErrorChecking
		
			LocalErrorsExist = ErrorsExist
			if (IncludeAllErrorEdits
			or  IncludeFrontEndEdits)
				include FrontEndCreateOrUpdateLineEdits
			if (IncludeAllErrorEdits
			or  IncludeDistributionEdits)
				include DistributionLineEdits
			if (IncludeAllErrorEdits
			or  IncludeBackOfficeEdits)
				include BackOfficeDependentLineEdits

			if (LineErrorsExist)
				ErrorsExist = true
			else
				ErrorsExist = false
			if (LocalErrorsExist != ErrorsExist)
				ErrorsExistChanged = true	

			if (ErrorsExistChanged)
				if (IsManufacturerOrDistributorContract)
					for each ErrorMismatchLineMemberRel
						invoke UpdateErrors each
							invoked.ParmErrorsExist = ErrorsExist

				if (LineCommitments
				and UseCommitments)
					include CheckToCreateOrDeleteCommitment

				if (!LineErrorsExist
				and CanUseForCostDefaulting
				and ContractLineState.Active
				and !ItemType.Service
				and !Contract.SetActiveLineToAmendment)
					include CreateItemAndVendorItem		
		
		FrontEndCreateOrUpdateLineEdits  	


			if (!ContractLineState.Closed)
				invoke Purge ContractLineFrontEndErrorsForCreateOrUpdateRel
				if (BaseCost = 0
				and CostOption.CostRequired)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 19



				if (FromManufacturerContract                                      
				and UOM != MfgContractLineRel.UOM)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 1
						invoked.ErrorCode1         = MfgContractLineRel.UOM.UnitOfMeasure

				if (FromManufacturerContract)
					if (EffectiveDate < MfgContractLineRel.EffectiveDate)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber  = 10
							invoked.ErrorDate           = MfgContractLineRel.EffectiveDate
					if (ExpirationDate > MfgContractLineRel.ExpirationDate
					and MfgContractLineRel.ExpirationDate > 0)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber  = 12
							invoked.ErrorDate           = MfgContractLineRel.ExpirationDate

				if (ItemType.Special
				and CanUseForCostDefaulting
				and !IsACapitatedProcedure)
					if (Manufacturer.ManufacturerCode !entered)        
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 22
					if (ManufacturerNumber !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 23

				if (ItemType.Special
				and CreateDistributorContractLine)
					if (Manufacturer.ManufacturerCode !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 89
					if (ManufacturerNumber !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 90

				if (Contract.NonServicePurchaseType)
					if (NonServiceItem
					and VendorItem !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 24                                     
					if  (VendorItem entered
					and !IsDistributorContract)                                                             
						if (ItemExistsRel exists)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 2
								invoked.ErrorContractLine  = ItemExistsRel.ContractLine
					if (VendorItem entered
					and ManufacturerNumber entered
					and Manufacturer.ManufacturerCode entered)
						if (SameVendorItemDiffMfgInfoRel exists)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 9
								invoked.ErrorContract      = first SameVendorItemDiffMfgInfoRel.Contract
								invoked.ErrorContractLine  = first SameVendorItemDiffMfgInfoRel.ContractLine

				if  (Contract.UOMSMustMatch = false
				and  NonMatchingUOMExistsItemRel exists)
					if (!Contract.StandingPurchaseType
					and !Contract.ServicePurchaseType)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 26
					if (Contract.StandingPurchaseType)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 27

				if  (Contract.UOMSMustMatchForSpecials = false
				and  NonMatchingUOMExistsSpecialItemRel exists)
					if (!Contract.StandingPurchaseType
					and !Contract.ServicePurchaseType)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 26
					if (Contract.StandingPurchaseType)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 27

				if (Contract.StandingPurchaseType
				and Quantity = 0)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 31

				if (LineCommitments
				and LifetimeMaximumAmount = 0
				and !ContractTypeAllowsZeroMaxQuantity)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 32

				if (RetainageExist
				and LifetimeMaximumAmount = 0)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 33

				if (BlanketStandingRequestingLocation entered)
					if  (Contract.BlanketOrStanding)
						if (!ContractParticipantReqLocRel exists)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 34
						if (NonReqLocationCompanyContractParticipantRel exists)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 35

				if (Contract.ContractRebateExists
				and ServicePurchaseTypeContract)
					if (ServiceItemDescriptionExistsRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 3
							invoked.ErrorContractLine  = first ServiceItemDescriptionExistsRel.ContractLine

				if (ItemType.Special)
					if (!UpdateFromManufacturerContract)
						if (SelectedForItemCreation)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 36

				LocalCommodityCode	= CommodityCode
				if (ItemType.Service)
					if (BuyerRequiresCommodityCode
					or  Contract.DerivedRequireCommodityCodeForServiceItem)
						if (LocalCommodityCode !entered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 37
				else
				if (ItemmastRel exists)
					if (Contract.DerivedRequireCommodityCodeForNonServiceItem
					or  BuyerRequiresCommodityCode)
						if (Contract.HasAPurchaseType)
							if (LocalCommodityCode !entered)
								force default LocalCommodityCode to ItemNumber.CommodityCode
								if (LocalCommodityCode !entered)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 38
					if (VendorItem exists)
						if (Contract.DerivedRequireManufacturerCodeForNonServiceItem)
							if (Manufacturer.ManufacturerCode !entered)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 39
						if (Contract.DerivedRequireManufacturerNumberForNonServiceItem)
							if (ManufacturerNumber !entered)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 40
					else
						if (Contract.DerivedRequireManufacturerCodeForNonServiceItem)
							if (Manufacturer.ManufacturerCode !entered)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 41
						if (Contract.DerivedRequireManufacturerNumberForNonServiceItem)
							if (ManufacturerNumber !entered)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 42

				if (ItemType.Special)
					if (Contract.DerivedRequireCommodityCodeForNonServiceItem
					or  BuyerRequiresCommodityCode)
						if (LocalCommodityCode !entered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 37

				if (Contract.PurchasingVendorRel.GTINInUse
				and ItemmastRel exists)
					if (Manufacturer.ManufacturerCode !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 45
					if (ManufacturerNumber !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 46

				if (IsDistributorContract)
					if (EffectiveAndExpirationDatesCross)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 4
							invoked.ErrorContractLine  = first EffectiveExpirationDatesCrossRel.ContractLine

				if (VendorItem entered
				and ManufacturerNumber entered)
					if (DifferentVenItemForSameMfgInfoRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 6
							invoked.ErrorContract      = first DifferentVenItemForSameMfgInfoRel.Contract
							invoked.ErrorContractLine  = first DifferentVenItemForSameMfgInfoRel.ContractLine
							invoked.ErrorVendorItem   = first DifferentVenItemForSameMfgInfoRel.VendorItem

				if (VendorItem entered
				and SameVenItemDiffItemRel exists)
					if (ItemNumber != first SameVenItemDiffItemRel.ItemNumber)
		   				invoke Create ContractLineError set
		   					invoked.ErrorMessageNumber = 8
		   					invoked.ErrorItem          = first SameVenItemDiffItemRel.ItemNumber
							invoked.ErrorContract      = first SameVenItemDiffItemRel.Contract
		   					invoked.ErrorContractLine  = first SameVenItemDiffItemRel.ContractLine

				if (VendorItem entered
				and Manufacturer entered
				and ManufacturerNumber entered
				and DuplicateVendorAndManufacturerInfoRel exists)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 189
		   					invoked.ErrorContractLine  = first DuplicateVendorAndManufacturerInfoRel.ContractLine

				if (GlobalTradeItemNumber entered)
					if (!ServiceItem)
						if (!Manufacturer.ManufacturerCode entered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 47
						if (!ManufacturerNumber entered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 48

				if (FromManufacturerContract           
				and MfgContractLineRel.ManufacturerNumber entered)
					if (MfgContractLineRel.Manufacturer.ManufacturerCode     != Manufacturer.ManufacturerCode
					or  MfgContractLineRel.Manufacturer.ManufacturerDivision != Manufacturer.ManufacturerDivision
					or  MfgContractLineRel.ManufacturerNumber       != ManufacturerNumber)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 54

				if (Contract.MaximumAmount != 0)
					if (PerOrderMaximumAmount > Contract.MaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 55

				if (Contract.MaximumAmount != 0)
					if (PerOrderMinimumAmount > Contract.MaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 56

				if ((!CanCreateChangeOrderDetail
				or (CanCreateChangeOrderDetail
				and !Contract.ChangeOrderMaxAmountUpdate))
				and !ExistingLineForChangeOrder)
					if (Contract.MaximumAmount entered)
						if (BaseCost > Contract.MaximumAmount)
							if (!Contract.ServicePurchaseType)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 57
							else
							if (Contract.ServicePurchaseType
							and ServiceCode.Amount)							
								if (Contract.ContractSubclassification entered)
									if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)		
										invoke Create ContractLineError set
											invoked.ErrorMessageNumber = 57
								else
									if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
										invoke Create ContractLineError set
											invoked.ErrorMessageNumber = 57

				if (LifetimeMaximumAmount entered
				and !Contract.ServicePurchaseType)
					if (BaseCost > LifetimeMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 58

				if (Contract.PerOrderMaximumAmount entered)
					if (BaseCost > Contract.PerOrderMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 59

				if (!ServiceCode.Amount
				and  PerOrderMaximumAmount entered)
					if (BaseCost > PerOrderMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 60

				if (ServiceItem)
					if (!ServiceCode.Quantity
					and !ServiceCode.Amount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 95

				if (LinePriceBreakOn.Quantity
				and LifetimeMaximumQuantity	> 0)
					if (PriceBreak.QuantityPercentPrice[1].Quantity	> LifetimeMaximumQuantity
					or  PriceBreak.QuantityPercentPrice[2].Quantity	> LifetimeMaximumQuantity
					or  PriceBreak.QuantityPercentPrice[3].Quantity	> LifetimeMaximumQuantity
					or  PriceBreak.QuantityPercentPrice[4].Quantity	> LifetimeMaximumQuantity
					or  PriceBreak.QuantityPercentPrice[5].Quantity	> LifetimeMaximumQuantity)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 67

				if (LinePriceBreakOn.Amount
				and LifetimeMaximumAmount	> 0)
					if (PriceBreak.QuantityPercentPrice[1].Quantity	> LifetimeMaximumAmount		
					or  PriceBreak.QuantityPercentPrice[2].Quantity	> LifetimeMaximumAmount
					or  PriceBreak.QuantityPercentPrice[3].Quantity	> LifetimeMaximumAmount
					or  PriceBreak.QuantityPercentPrice[4].Quantity	> LifetimeMaximumAmount
					or  PriceBreak.QuantityPercentPrice[5].Quantity	> LifetimeMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 68

				if (ConsignmentLinePriceBreakOn.Quantity and LifetimeMaximumQuantity > 0)
					if (ConsignmentPriceBreak.QuantityPercentPrice[1].Quantity	> LifetimeMaximumQuantity
					or  ConsignmentPriceBreak.QuantityPercentPrice[2].Quantity	> LifetimeMaximumQuantity
					or  ConsignmentPriceBreak.QuantityPercentPrice[3].Quantity	> LifetimeMaximumQuantity
					or  ConsignmentPriceBreak.QuantityPercentPrice[4].Quantity	> LifetimeMaximumQuantity
					or  ConsignmentPriceBreak.QuantityPercentPrice[5].Quantity	> LifetimeMaximumQuantity)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 66

				if (ConsignmentLinePriceBreakOn.Amount
				and LifetimeMaximumAmount	> 0)
					if (ConsignmentPriceBreak.QuantityPercentPrice[1].Quantity	> LifetimeMaximumAmount		
					or  ConsignmentPriceBreak.QuantityPercentPrice[2].Quantity	> LifetimeMaximumAmount
					or  ConsignmentPriceBreak.QuantityPercentPrice[3].Quantity	> LifetimeMaximumAmount
					or  ConsignmentPriceBreak.QuantityPercentPrice[4].Quantity	> LifetimeMaximumAmount
					or  ConsignmentPriceBreak.QuantityPercentPrice[5].Quantity	> LifetimeMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 74

				if (NdcNbr entered)
					if (HibccUpn entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 101
					if (UccEanUpn entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 102
					if (Sku entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 103

				if (Sku entered
				or  HibccUpn entered
				or  UccEanUpn entered)
					if (DrugPharmacyOrNarcoticUsage)
						invoke Create ContractLineError set 
							invoked.ErrorMessageNumber = 197

				if (NdcNbr entered
				and UsageIdentifier entered)
					if (!DrugPharmacyOrNarcoticUsage)
						invoke Create ContractLineError set 
							invoked.ErrorMessageNumber = 198	

				if (ItemType.Service and ServiceCode.Amount
				and Contract.StandingPurchaseType)
					if (Quantity > 1)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 107

				if (Retainage)
					if (RetainagePercent1 !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 108

					if (RetainagePercent1 < 0% or RetainagePercent1 > 100%)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 109

					if (RetainageUpToPercent !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 110
					if (RetainageUpToPercent < 0% or RetainageUpToPercent > 100%)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 111
					if (RetainagePercent2 < 0% or RetainagePercent2 > 100%)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 112
					if (RetainageOverridePercent < 0% or RetainageOverridePercent > 100%)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 113

				if (ServiceCode.Quantity
				and !Contract.StandingPurchaseType
				and !ContractTypeAllowsZeroMaxQuantity)
					if (LifetimeMaximumQuantity !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 114

				if (!CanCreateChangeOrderDetail
				or (CanCreateChangeOrderDetail
				and !Contract.ChangeOrderMaxAmountUpdate))	
					if (Contract.MaximumAmount != 0)
						if (Contract.ContractSubclassification entered)
							if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								if (LifetimeMaximumAmount > Contract.MaximumAmount)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 115		
						else
							if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
								if (LifetimeMaximumAmount > Contract.MaximumAmount)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 115

				if  (Contract.StandingPurchaseType)
					if (PerOrderMaximumQuantity entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 116
				if (LifetimeMaximumQuantity != 0)
					if (PerOrderMaximumQuantity > LifetimeMaximumQuantity)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 117

				if (LifetimeMaximumAmount != 0)
					if (PerOrderMaximumAmount > LifetimeMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 118
				if (Contract.PerOrderMaximumAmount != 0)
					if (PerOrderMaximumAmount > Contract.PerOrderMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 119

				if (PerOrderMaximumQuantity != 0)
					if (PerOrderMinimumQuantity > PerOrderMaximumQuantity)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 120
				if (LifetimeMaximumQuantity != 0)
					if (PerOrderMinimumQuantity > LifetimeMaximumQuantity)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 121
				if (PerOrderMaximumAmount != 0)
					if (PerOrderMinimumAmount > PerOrderMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 122
				if (LifetimeMaximumAmount != 0)
					if (PerOrderMinimumAmount > LifetimeMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 123
				if (PerOrderMinimumAmount != 0)
					if (PerOrderMinimumAmount < Contract.PerOrderMinimumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 124
				if (Contract.PerOrderMaximumAmount != 0)
					if (PerOrderMinimumAmount > Contract.PerOrderMaximumAmount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 125

				if (Taxable)
					if (TaxCode !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 126
				if (CostOption.NoCharge
				or  CostOption.VendorDetermined)
					if (BaseCost > 0)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 127
				if (NonDirectBuyItem)
					if (VendorItem not entered)
						if (Manufacturer.ManufacturerCode not entered)
							if (ManufacturerNumber not entered)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 128
							else
							if (ManufacturerNumber entered)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 129
						else
							if (ManufacturerNumber !entered)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 130

				if (PriceBreak entered)
					if (PricingMarkupOrDiscount !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 131
				else
					if (PricingMarkupOrDiscount entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 132
				if (PricingMarkupOrDiscount.Markup)
					if (LineDiscountExists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 134
					if (PriceBreak entered)
						if (ConsignmentPricingMarkupOrDiscount.Discount)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 135
				else
				if (PricingMarkupOrDiscount.Discount)
					if (LineMarkupExists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 137
					if (PriceBreak entered)
						if (ConsignmentPricingMarkupOrDiscount.Markup)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 138

				if (PriceBreak entered)
					if (LinePriceBreakOn !entered)
						invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 139
				else
					if (LinePriceBreakOn entered)
						invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 140
				if (LinePriceBreakOn.Quantity)
					if (ByQuantityNotAllowed)
						invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 141
				if (LinePriceBreakOn.Amount)
					if (Contract.LineLevelBreaks.OrderTotals)
						invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 142

			if (PriceBreak entered)
				if (ServiceCode.Amount)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 143

			LastUnitPrice   = BaseCost
			LastUnitPercent = DerivedBasePercent
			LastQuantity    = 0
			HasUnitPercent  = false
			HasUnitPrice    = false
			for each PriceBreak.QuantityPercentPrice
				if (each.UnitPercent > 0)
					HasUnitPercent = true
				else
				if (each.UnitPrice > 0)
					HasUnitPrice = true

				if (HasUnitPercent or HasUnitPrice)
					if (HasUnitPercent and HasUnitPrice)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 144
			if (HasUnitPercent
			and PricingMarkupOrDiscount.Markup)
				if (!Contract.ContractPricingPercentExists)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 145

			for each PriceBreak.QuantityPercentPrice
				if (each.Quantity entered)
					if (each.Quantity <= LastQuantity)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 146
				if (!Contract.LineLevelBreaks.OrderTotals)
					if (each.UnitPrice entered)
						if (each.UnitPrice >= LastUnitPrice)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 147
				if (PricingMarkupOrDiscount.Markup)
					if (each.UnitPercent entered)
						if (each.UnitPercent >= LastUnitPercent)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 148
				else
					if (PricingMarkupOrDiscount.Discount)
						if (each.UnitPercent entered)
							if (each.UnitPercent <= LastUnitPercent)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 149
				LastQuantity    = each.Quantity
				LastUnitPrice   = each.UnitPrice
				LastUnitPercent = each.UnitPercent

			if (ConsignmentPriceBreak entered)
				if (ConsignmentPricingMarkupOrDiscount !entered)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 150
			else
				if (ConsignmentPricingMarkupOrDiscount entered)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 151
			if (ConsignmentPricingMarkupOrDiscount.Markup)
				if (LineDiscountExists)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 153
				if (PriceBreak entered)
					if (PricingMarkupOrDiscount.Discount)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 154
			else
			if (ConsignmentPricingMarkupOrDiscount.Discount)
				if (LineMarkupExists)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 156
				if (PriceBreak entered)
					if (PricingMarkupOrDiscount.Markup)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 157

			if (ConsignmentPriceBreak entered)
				if (ConsignmentLinePriceBreakOn !entered)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 158
			else
				if (ConsignmentLinePriceBreakOn entered)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 159
			if (ConsignmentLinePriceBreakOn.Amount)
				if (Contract.LineLevelBreaks.OrderTotals)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 160

			LastUnitPrice   = BaseCost
			LastUnitPercent = DerivedBasePercent
			LastQuantity    = 0
			HasUnitPercent  = false
			HasUnitPrice    = false
			for each ConsignmentPriceBreak.QuantityPercentPrice
				if (each.UnitPercent > 0)
					HasUnitPercent = true
				else
				if (each.UnitPrice > 0)
					HasUnitPrice = true

			if (HasUnitPercent or HasUnitPrice)
				if (HasUnitPercent and HasUnitPrice)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 161
			if (HasUnitPercent
			and ConsignmentPricingMarkupOrDiscount.Markup)
				if (!Contract.ContractPricingPercentExists)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 162

			for each ConsignmentPriceBreak.QuantityPercentPrice
				if (each.Quantity entered)
					if (each.Quantity <= LastQuantity)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 163
				if (!Contract.LineLevelBreaks.OrderTotals)
					if (each.UnitPrice entered)
						if (each.UnitPrice >= LastUnitPrice)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 164
				if (ConsignmentPricingMarkupOrDiscount.Markup)
					if (each.UnitPercent entered)
						if (each.UnitPercent >= LastUnitPercent)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 165
				else
					if (ConsignmentPricingMarkupOrDiscount.Discount)
						if (each.UnitPercent entered)
							if (each.UnitPercent <= LastUnitPercent)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 166
				LastQuantity    = each.Quantity
				LastUnitPrice   = each.UnitPrice
				LastUnitPercent = each.UnitPercent

			if (!FromManufacturerContract)
				if (EffectiveDate > 0)
					if (Contract.EffectiveDate > 0)
						if (EffectiveDate < Contract.EffectiveDate)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 168
					if (Contract.ExpirationDate > 0)
						if (EffectiveDate > Contract.ExpirationDate)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 169
				if (ExpirationDate > 0)
					if (Contract.EffectiveDate > 0)
						if (ExpirationDate <= Contract.EffectiveDate)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 170
					if (EffectiveDate > 0)
						if (ExpirationDate <= EffectiveDate)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 171
					if (Contract.ExpirationDate > 0)
	   					if (ExpirationDate > Contract.ExpirationDate)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 172

			if (ItemType.Special)
				if (ItemNumber !entered
				and CanUseForCostDefaulting)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 183

				if (LowUOMCodeGTIN entered
				and LowUOMCodeGTIN = GlobalTradeItemNumber)
					invoke Create ContractLineError set 
						invoked.ErrorMessageNumber = 199

				if (LowUOMCodeHibccUPN entered
				and LowUOMCodeHibccUPN = HibccUpn)
					invoke Create ContractLineError set 
						invoked.ErrorMessageNumber = 200
				
				if (ManualItemNumbering)
					if (ManualItemNumber !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 175
					if (ManualItemNumber entered
					and NumericItemNumbering
					and !ManualItemNumber is numeric)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 182
					if (ManualItemNumber entered
					and ManualItemNumberRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 184
					if (ManualItemNumber entered
					and ContractItemRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 185
				else
				if (AssignItemNumbering)
					if (GTINAssignment
					and GlobalTradeItemNumber !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 176
					if (UPCAssignment
					and Upc !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 177
					if (SKUAssignment
					and Sku !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 178
					if (UCCEANAssignment
					and UccEanUpn !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 179
					if (HIBCCAssignment
					and HibccUpn !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 180
					if (NDCAssignment
					and NdcNbr !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 181

			if (GlobalTradeItemNumber entered)
				if (GTINExistsRel exists)
					invoke Create ContractLineError set
						invoked.ErrorContractLine 	= first GTINExistsRel.ContractLine
						invoked.ErrorMessageNumber 	= 174

			if (LowUOMCodeGTIN entered)
				if (LowUOMCodeGTINDupExistsRel exists)
					invoke Create ContractLineError set
						invoked.ErrorContractLine 	= first LowUOMCodeGTINDupExistsRel.ContractLine
						invoked.ErrorMessageNumber 	= 201

			if (HibccUpn entered)
				if (HIBCCDIExistsRel exists)
					invoke Create ContractLineError set
						invoked.ErrorContractLine 	= first HIBCCDIExistsRel.ContractLine
						invoked.ErrorMessageNumber 	= 202

			if (LowUOMCodeHibccUPN entered)
				if (LowUOMCodeHIBCCDIExistsRel exists)
					invoke Create ContractLineError set
						invoked.ErrorContractLine 	= first LowUOMCodeHIBCCDIExistsRel.ContractLine
						invoked.ErrorMessageNumber 	= 203														

			if (UOM entered 
			and LowUOMCode entered
			and UOMConversion entered)
				if (UOM.UnitOfMeasure = LowUOMCode.UnitOfMeasure)
					if (UOMConversion != 1)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 195
			 	if (UOM.UnitOfMeasure != LowUOMCode.UnitOfMeasure)
			 		if (UOMConversion =1)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 196

		DistributionLineEdits	


		   	if (!ContractLineState.Closed)
				invoke Purge DistributionLineEditsRel
				if ((Contract.ServicePurchaseType
				or  Contract.StandingPurchaseType)
				and !Contract.UseHeaderCommitments)
					if (!ContractLineDistribution set exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 61

				if (SpecialItem
				and Contract.DerivedRequireFullDistributionForSpecialItem
				and !Contract.UseHeaderCommitments)
					if (!ContractLineDistribution set exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 69


				if  (LineCommitments)
					if (!ContractLineDistribution set exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 62

				if (LocalCreateAction = false)
					if (ContractLineDistribution set exists)
						if (!TotalDistributionPercent = 100%)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 63
						for each ContractLineDistribution set
							if (each.DistributionAccount.GeneralLedgerChartAccount entered)
								if (!each.DistributionAccount.GeneralLedgerChartAccount.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.GeneralLedgerChartAccount
							if (each.DistributionAccount.AccountingUnit entered)
								if (!each.DistributionAccount.AccountingUnit.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.AccountingUnit							
							if (each.DistributionAccount.FinanceDimension1 entered)
								if (!each.DistributionAccount.FinanceDimension1.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension1
							if (each.DistributionAccount.FinanceDimension2 entered)
								if (!each.DistributionAccount.FinanceDimension2.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension2
							if (each.DistributionAccount.FinanceDimension3 entered)
								if (!each.DistributionAccount.FinanceDimension3.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension3
							if (each.DistributionAccount.FinanceDimension4 entered)
								if (!each.DistributionAccount.FinanceDimension4.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension4
							if (each.DistributionAccount.FinanceDimension5 entered)
								if (!each.DistributionAccount.FinanceDimension5.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension5																														
							if (each.DistributionAccount.FinanceDimension6 entered)
								if (!each.DistributionAccount.FinanceDimension6.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension6
							if (each.DistributionAccount.FinanceDimension7 entered)
								if (!each.DistributionAccount.FinanceDimension7.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension7
							if (each.DistributionAccount.FinanceDimension8 entered)
								if (!each.DistributionAccount.FinanceDimension8.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension8
							if (each.DistributionAccount.FinanceDimension9 entered)
								if (!each.DistributionAccount.FinanceDimension9.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension9
							if (each.DistributionAccount.FinanceDimension10 entered)
								if (!each.DistributionAccount.FinanceDimension10.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.FinanceDimension10
							if (each.DistributionAccount.Project entered)
								initialize LocalPeriodOfPerformanceProject

								initialize LocalDateRange
								if (each.DistributionAccount.Project.HasPeriodOfPerformance)
									LocalPeriodOfPerformanceProject	= each.DistributionAccount.Project
									LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate

								if (!LocalDateRange entered)
									LocalDateRange.Begin			= each.DistributionAccount.Project.ProjectDateRange.BeginDate
									LocalDateRange.End				= each.DistributionAccount.Project.ProjectDateRange.EndDate

								if (EffectiveDate entered)
									if (EffectiveDate !within LocalDateRange)
										invoke Create ContractLineError set
											invoked.ErrorMessageNumber = 188
											invoked.ErrorCode1         = each.DistributionAccount.Project
								if (!each.DistributionAccount.Project.Active)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber = 191
										invoked.ErrorCode1         = each.DistributionAccount.Project											
						if (ContractLineDistributionCount > 1)
							DistributionsMatch = true
							initialize DistributionCounter
							for each ContractLineDistribution set
								DistributionCounter += 1
								if (DistributionCounter = 1)
									if (each.DistributionAccount.ToAccountingEntity entered)
										UseCompany = true
									if (each.DistributionAccount.AccountingUnit entered)
										UseAccountingUnit = true
									if (each.DistributionAccount.GeneralLedgerChartAccount entered)
										UseAccount = true
								if (UseCompany)
									if (!each.DistributionAccount.ToAccountingEntity entered)
										DistributionsMatch = false
								else
									if (each.DistributionAccount.ToAccountingEntity entered)
										DistributionsMatch = false

								if (UseAccountingUnit)
									if (!each.DistributionAccount.AccountingUnit entered)
										DistributionsMatch = false
								else
									if (each.DistributionAccount.AccountingUnit entered)
										DistributionsMatch = false

								if (UseAccount)
									if (!each.DistributionAccount.GeneralLedgerChartAccount entered)
										DistributionsMatch = false
								else
									if (each.DistributionAccount.GeneralLedgerChartAccount entered)
										DistributionsMatch = false
							if (!DistributionsMatch)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 65

		BackOfficeDependentLineEdits         


			if (!ContractLineState.Closed)

				invoke Purge ContractLineBackOfficeDependentErrorsRel

				if (GlobalTradeItemNumber entered)

					if (GlobalTradeItemNumber !exists)
						if (ItemGroupRel.AllowMultipleGTINs = false
						and ItemGTINSameUOMRel exists)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber = 49
								invoked.ErrorVendorItem    = first ItemGTINSameUOMRel.ItemGTIN

				if (!ServicePurchaseTypeContract
				and ServiceItem)
					if (ItemNumber !entered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 186

				if ((!HasBeenActivated
				and  ItemType.Special)
				and (CanUseForCostDefaulting
				or   CreateDistributorContractLine))
					if (SkuExistsOnItemRel exists)
						invoke Create ContractLineError set
							invoked.ErrorItem          = SkuExistsOnItemRel.Item
							invoked.ErrorMessageNumber = 99

				if (Contract.NonServicePurchaseType)
					if (VendorItem exists
					and InactiveVendorItem
					and CanUseForCostDefaulting)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 25

				if  (VendorItem entered)
					if (VendorItem exists)
						if (UOM != blank)
							if  (PovenitemRel.VendorBuyUOM entered
							and  PovenitemRel.VendorPriceUOM = blank
							and	 UOM != PovenitemRel.VendorBuyUOM)
								invoke Create ContractLineError set
									invoked.ErrorCode1          = PovenitemRel.VendorBuyUOM.UnitOfMeasure
									invoked.ErrorMessageNumber 	= 16 //"EnteredUOMDoesNotMatchTheVendorItemBuyUOMOf<VendorItem.VendorBuyUOM>"
							if  (PovenitemRel.VendorPriceUOM entered
							and	 UOM != PovenitemRel.VendorPriceUOM)
								invoke Create ContractLineError set
									invoked.ErrorCode1          = PovenitemRel.VendorPriceUOM.UnitOfMeasure
									invoked.ErrorMessageNumber 	= 17  //"EnteredUOMMustMatchTheVendorItemPriceUOMOf<VendorItem.VendorPriceUOM>"

				if (ItemType.Itemmast)
					if  (!ItemUOMRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 93
					if  (ItemUOMRel.ValidForBuying.Inactive)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber  = 94
					if (!ItemNumber.IsCatchWeightItem
					and  !ItemUOMRel.OKForBuying)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber  = 75
					if  (ItemNumber.IsCatchWeightItem
					and (Contract.UOMSMustMatch = true
					or   Contract.UseContractUOM = true))
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 193

				if (UOM entered
				and !UOM.UnitOfMeasure.Active)
					invoke Create ContractLineError set 
						invoked.ErrorMessageNumber = 194

				if (ItemType.Itemmast)
					if (ItemmastRel.NotAvailableForUse)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 192
					if (ItemmastRel.Active = false
					and !ItemmastRel.NotAvailableForUse)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 28

				if (ManufacturerNumber entered)
					if (ItemType.Special
					and CanUseForCostDefaulting)
						if (ManyItemsWithManufacturerInformation)
							invoke Create ContractLineError set
								invoked.ErrorItem           = first ItemByManufacturerRel.Item
								invoked.ErrorMessageNumber 	= 98

				if (BlanketStandingRequestingLocation entered)
					if  (Contract.BlanketOrStanding)
						if (!BlanketStandingRequestingLocation.RequestingLocation.Active)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber	= 77
						if (!BlanketStandingRequestingLocation.RequestingLocation exists)              
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber	= 78

				if (Manufacturer.ManufacturerCode entered)
					if (!Manufacturer exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 79

				if (VendorItem entered
				and ManufacturerNumber entered)
					if (POVendorItemForSameMfgInfoRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber	= 5
							invoked.ErrorVendorItem     = first POVendorItemForSameMfgInfoRel.VendorItem //"POVendorItem<first POVendorItemForSameMfgInfoRel.VendorItem>AlreadyExistsForThisVendorWithTheSameManufacturerInformation"

				if  (ServicePurchaseTypeContract)
					if (ServiceCode.Quantity
					and LifetimeMaximumQuantity > 0)
						if ((LifetimeMaximumQuantity * BaseCost) 		< AmountOrdered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber 	= 80	
					else
					if (ServiceCode.Amount)
						if (BaseCost 						< AmountOrdered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber 	= 190	
				if  (ServicePurchaseTypeContract
				and  ServiceCode.Quantity
				and  LifetimeMaximumQuantity > 0)
					if (LifetimeMaximumQuantity						< QuantityOrdered)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 81	

				if  (ServiceItem
				and !ServicePurchaseTypeContract)
					if (ItemmastRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 82	
					if (ServiceCode.Quantity
					and LifetimeMaximumQuantity > 0)
						if ((LifetimeMaximumQuantity * BaseCost) 		< AmountOrdered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber 	= 91	
					else
					if (ServiceCode.Amount)
						if (BaseCost 						< AmountOrdered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber 	= 91	
					if  (ServiceCode.Quantity
					and  LifetimeMaximumQuantity > 0)
						if (LifetimeMaximumQuantity					< QuantityOrdered)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber 	= 92	

				if (Taxable
				and TaxCode entered)
					initialize LocalTaxCodeError
					for each PoCompaniesInProcurementGroupRel
						LocalTaxEntity					= each.Company.AccountingEntity
						if (TaxEntityRel exists)
							if (TaxEntityRel.UseTaxCodeAccounts)
								if (EntityTaxCodeRel exists)
									LocalTaxCodeError	= false
									end for each
								else
									LocalTaxCodeError	= true
							else
								LocalTaxCodeError		= false
								end for each
						else
							LocalTaxCodeError			= true
					if (LocalTaxCodeError = true)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 83	

				if (GlobalTradeItemNumber entered)
					if (IcitemgtinMismatchRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber 	= 7 //"GTINAlreadyExistsForItem<first IcitemgtinMismatchRel.Item>"
							invoked.ErrorItem           = first IcitemgtinMismatchRel.Item
					if (GlobalTradeItemNumberExistsSomewhere)
						if (!ItemGTINByItemRel.Active)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber 	= 50
						if (ManufacturerNumber entered)                                                                 
							if (ItemGTINByItemRel.Manufacturer.ManufacturerCode 		!= 	Manufacturer.ManufacturerCode
							or  ItemGTINByItemRel.Manufacturer.ManufacturerDivision 	!= 	Manufacturer.ManufacturerDivision
							or  ItemGTINByItemRel.ManufacturerNumber 					!= 	ManufacturerNumber)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber 	= 51
						if (VendorItem entered)
							if (VendorItem exists)
								if (ItemGTINByItemRel.Manufacturer.ManufacturerCode 		!= 	VendorItem.Manufacturer.ManufacturerCode
								or  ItemGTINByItemRel.Manufacturer.ManufacturerDivision 	!= 	VendorItem.Manufacturer.ManufacturerDivision
								or  ItemGTINByItemRel.ManufacturerNumber 					!= 	VendorItem.ManufacturerNumber)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber 	= 52
						if (!UOM entered)
							if (ItemGTINByItemRel.ItemUOMRel.ValidForBuying.Inactive)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 96
							if (!ItemGTINByItemRel.ItemUOMRel.OKForBuying)
								invoke Create ContractLineError set
									invoked.ErrorMessageNumber = 97
					else
						if (ItemGroupRel.AllowMultipleGTINs = false)
							if (ManufacturerNumber entered
							and ItemType.Itemmast)
								if (IcitemgtinManfRel exists)
									invoke Create ContractLineError set
										invoked.ErrorMessageNumber 	= 85		
										invoked.ErrorVendorItem     = first IcitemgtinManfRel.ItemGTIN

				if (VendorItem exists)
					if (ManufacturerNumber entered)
						if (VendorItem.Manufacturer.ManufacturerCode     			!= Manufacturer.ManufacturerCode
						or  VendorItem.Manufacturer.ManufacturerDivision 			!= Manufacturer.ManufacturerDivision
						or  VendorItem.ManufacturerNumber       					!= ManufacturerNumber)
							invoke Create ContractLineError set
								invoked.ErrorMessageNumber 	= 53

				if ((!HasBeenActivated
				and  ItemType.Itemmast)
				and (CanUseForCostDefaulting
				or   CreateDistributorContractLine))
					if (NdcNbrExistsOnItemRel exists
					and ItemNumber != NdcNbrExistsOnItemRel.Item)
						invoke Create ContractLineError set
							invoked.ErrorItem          = NdcNbrExistsOnItemRel.Item
							invoked.ErrorMessageNumber = 100

				if ((!HasBeenActivated
				and  ItemType.Itemmast)
				and (CanUseForCostDefaulting
				or   CreateDistributorContractLine))
					if (HibccUpnExistsOnItemRel exists
					and ItemNumber != HibccUpnExistsOnItemRel.Item)
						invoke Create ContractLineError set
							invoked.ErrorItem          = HibccUpnExistsOnItemRel.Item
							invoked.ErrorMessageNumber = 104

				if ((!HasBeenActivated
				and  ItemType.Itemmast)
				and (CanUseForCostDefaulting
				or   CreateDistributorContractLine))
					if (UccEanUpnExistsOnItemRel exists
					and ItemNumber != UccEanUpnExistsOnItemRel.Item)
						invoke Create ContractLineError set
							invoked.ErrorItem          = UccEanUpnExistsOnItemRel.Item
							invoked.ErrorMessageNumber = 105

				if ((!HasBeenActivated
				and  ItemType.Itemmast)
				and (CanUseForCostDefaulting
				or   CreateDistributorContractLine))
					if (UPCExistsOnItemRel exists
					and ItemNumber != first UPCExistsOnItemRel.Item)
						invoke Create ContractLineError set
							invoked.ErrorItem          = UPCExistsOnItemRel.Item
							invoked.ErrorMessageNumber = 106

				if (PayablesDistributionCode entered)
					if (!PayablesDistributionCode.IsPercentDistributionCode)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 167

				if (GlobalTradeItemNumberExists)
					if (UOM entered)
						if (IcitemgtinRel.UnitOfMeasure != UOM)
							invoke Create ContractLineError set
								invoked.ErrorCode1         = ItemGTINByItemRel.UnitOfMeasure.UnitOfMeasure
								invoked.ErrorMessageNumber = 173

				if (ItemNumberExists
				and VendorItemExists
				and VendorItemDoesNotMatchItem)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 187
						invoked.ErrorItem          = first VendorItemWithDifferentItemRel.Item

		FrontEndCreateOrUpdateHardLineEdits		



			if (!ServicePurchaseTypeContract
			and ServiceItemType)
				constraint (ItemNumber entered)
					"ItemNumberIsRequired"     

			if (ItemNumberExists
			and VendorItemExists)
				constraint (!VendorItemDoesNotMatchItem)
					"Item<first VendorItemWithDifferentItemRel.Item>ForVendorItemDoesNotMatchEnteredItemNumber"

			if (FromManufacturerContract)
				constraint (UOM = MfgContractLineRel.UOM)
					"UOMDoesNotMatchUOMOf<MfgContractLineRel.UOM.UnitOfMeasure>OnManufacturerContractLine"	

			if (VendorItem entered
			and Manufacturer entered
			and ManufacturerNumber entered)
				constraint (DuplicateVendorAndManufacturerInfoRel !exists)
					"VendorItemAndManufacturerInformationAndUnitOfMeasureCombinationAlreadyExistsOnThisContractForContractLine<first DuplicateVendorAndManufacturerInfoRel.ContractLine>"

			if (Contract.NonServicePurchaseType
			and !IsDistributorContract)
				if (VendorItem entered)
					constraint (!ItemExistsRel exists)
						"ItemAndVendorItemAndUnitOfMeasureCombinationAlreadyExistsOnThisContractForContractLine<first ItemExistsRel.ContractLine>"		

			if (ServicePurchaseTypeContract
			and Contract.ContractRebateExists)
				constraint (!ServiceItemDescriptionExistsRel exists)
					"AnItemWithTheSameDescriptionAlreadyExistsOnContractLine<first ServiceItemDescriptionExistsRel.ContractLine>;ItemDescriptionsMustBeUniqueOnServicePurchaseTypesWhenUsingRebates"		

			if (IsDistributorContract)
				constraint (!EffectiveAndExpirationDatesCross)
					"EffectiveOrExpirationDatesCrossWithTheEffectiveOrExpirationDatesOfLine<first EffectiveExpirationDatesCrossRel.ContractLine>.TheDatesCannotCrossForTheSameItem,VendorItemAndUOM"		

			if (VendorItem entered
			and ManufacturerNumber entered)
				if (DifferentVenItemForSameMfgInfoRel exists)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber = 6
						invoked.ErrorContract      = first DifferentVenItemForSameMfgInfoRel.Contract
						invoked.ErrorContractLine  = first DifferentVenItemForSameMfgInfoRel.ContractLine
						invoked.ErrorVendorItem   = first DifferentVenItemForSameMfgInfoRel.VendorItem

			if (VendorItem entered
			and SameVenItemDiffItemRel exists)
				constraint (ItemNumber = first SameVenItemDiffItemRel.ItemNumber)
					"VendorItem<VendorItem>AlreadyExistsForItem<first SameVenItemDiffItemRel.ItemNumber>OnContractLine<first SameVenItemDiffItemRel.ContractLine>OfContract<first SameVenItemDiffItemRel.Contract>"		

			if (Contract.NonServicePurchaseType)

				if (VendorItem entered
				and ManufacturerNumber entered
				and Manufacturer.ManufacturerCode entered)
					if (SameVendorItemDiffMfgInfoRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 9
							invoked.ErrorContract      = first SameVendorItemDiffMfgInfoRel.Contract
							invoked.ErrorContractLine  = first SameVendorItemDiffMfgInfoRel.ContractLine

			if (FromManufacturerContract)
				constraint (EffectiveDate >= MfgContractLineRel.EffectiveDate)
					"EffectiveDateOnLineCannotBeBeforeEffectiveDateOf<MfgContractLineRel.EffectiveDate>OnManufacturerContractLine"		

			if (FromManufacturerContract)
				if (MfgContractLineRel.ExpirationDate > 0)
				 	constraint (ExpirationDate <= MfgContractLineRel.ExpirationDate)
						"ExpirationDateOnLineCannotBeAfterExpirationDateOf<MfgContractLineRel.ExpirationDate>OnManufacturerContractLine"		

			if (FromManufacturerContract)
				if (MfgContractLineRel.ExpirationDate > 0)
				 	constraint (ExpirationDate <= MfgContractLineRel.ExpirationDate)
						"ExpirationDateOnLineCannotBeAfterExpirationDateOf<MfgContractLineRel.ExpirationDate>OnManufacturerContractLine"		

		  	if (ItemType.Special
		  	and !ServiceItem
		  	and CanUseForCostDefaulting
			and !IsACapitatedProcedure)
				constraint (Manufacturer.ManufacturerCode entered)
					"ManufacturerCodeIsRequiredForSpecialItemUsedForCostDefaulting"	
				constraint (ManufacturerNumber entered)
					"ManufacturerNumberIsRequiredForSpecialItemUsedForCostDefaulting"	

			if (ItemType.Special
		  	and CreateDistributorContractLine)
				constraint (Manufacturer.ManufacturerCode entered)
					"ManufacturerCodeIsRequiredWhenDistributorContractLinesCanBeCreated"	
				constraint (ManufacturerNumber entered)
					"ManufacturerNumberIsRequiredWhenDistributorContractLinesCanBeCreated"	

			if (Contract.NonServicePurchaseType)
				if (NonServiceItem)
					constraint (VendorItem entered)
						"VendorItemIsRequired"		
			if  (Contract.UOMSMustMatch = false
			and  NonMatchingUOMExistsItemRel exists)
				constraint (Contract.StandingPurchaseType
				or          Contract.ServicePurchaseType)
					"MultipleUnitsOfMeasureExistForTheSameItemAndVendorItem,TheUO\MsMustMatchFlagOnContractForItemmastMustBeYes"		
				constraint (!Contract.StandingPurchaseType)
					"MultipleUnitsOfMeasureExistForTheSameItemAndVendorItem,NotAllowedOnStandingPurchaseType"		

			if  (Contract.UOMSMustMatchForSpecials = false
			and  NonMatchingUOMExistsSpecialItemRel exists)
				constraint (Contract.StandingPurchaseType
				or          Contract.ServicePurchaseType)
					"MultipleUnitsOfMeasureExistForTheSameItemAndVendorItem,TheUO\MsMustMatchFlagOnContractForSpecialsMustBeYes"	
				constraint (!Contract.StandingPurchaseType)
					"MultipleUnitsOfMeasureExistForTheSameItemAndVendorItem,NotAllowedOnStandingPurchaseType"

			if (Contract.StandingPurchaseType)
				constraint (Quantity > 0)
					"StandingQuantityIsRequiredOnAStandingPurchaseType"		

			if (LineCommitments
			and !ContractTypeAllowsZeroMaxQuantity)
				constraint (LifetimeMaximumAmount != 0)
					"MustEnterALineLifetimeMaximumAmountWhenDoingLineCommitments"		

			if (RetainageExist)
				constraint (LifetimeMaximumAmount != 0)
					"MustEnterALineLifetimeMaximumAmountWhenDoingLineRetainage"		

			if (Contract.StandingPurchaseType and BlanketStandingRequestingLocation entered)
				constraint (ContractParticipantReqLocRel exists)
					"RequestingLocationCompanyMustEqualAParticipantCompanyOnContract"		
				constraint (!NonReqLocationCompanyContractParticipantRel exists)
					"RequestingLocationExistsForLine;CompaniesOtherThanTheRequestingLocationCompanyCannotBeUsedForContractParticipants"		

			if (ItemType.Special)
				if (CanUseForCostDefaulting)
					constraint (ItemNumber entered)
						"CannotDefaultItemNumberFromVendorItem;VendorItemOrManufacturerCodeAndVendorItemIsAValidItemNumber;MustEnterADifferentItemNumber" 

				if (!UpdateFromManufacturerContract)
					constraint (!SelectedForItemCreation)
						"CannotUpdate;SelectedForItemCreation"		

			LocalCommodityCode	= CommodityCode
			if (ItemType.Service)
				if (Contract.DerivedRequireCommodityCodeForServiceItem
				or  BuyerRequiresCommodityCode)
					constraint (LocalCommodityCode entered)
						"CommodityCodeIsRequired"		
			else
			if (!ItemmastRel exists)
				if (ItemType.Special)
					if (Contract.DerivedRequireCommodityCodeForNonServiceItem
					or  BuyerRequiresCommodityCode)
						constraint (LocalCommodityCode entered)
							"CommodityCodeIsRequired"		

			if (ItemmastRel exists)
				if (Contract.DerivedRequireCommodityCodeForNonServiceItem
				or  BuyerRequiresCommodityCode)
					if (!LocalCommodityCode entered)
						force default LocalCommodityCode to ItemNumber.CommodityCode
					constraint (LocalCommodityCode entered)
						"CommodityCodeIsRequired;MustBeMaintainedOnItemMaster"		
				if (VendorItem exists)
					if (Contract.DerivedRequireManufacturerCodeForNonServiceItem)
						constraint (Manufacturer.ManufacturerCode entered)
							"ManufacturerCodeIsRequiredByContractClassification;MustBeMaintainedOnVendorItem"		
					if (Contract.DerivedRequireManufacturerNumberForNonServiceItem)
						constraint (ManufacturerNumber entered)
							"ManufacturerNumberIsRequiredByContractClassification;MustBeMaintainedOnVendorItem"		
				else
					if (Contract.DerivedRequireManufacturerCodeForNonServiceItem)
						constraint (Manufacturer.ManufacturerCode entered)
							"ManufacturerCodeIsRequiredByContractClassification"		
					if (Contract.DerivedRequireManufacturerNumberForNonServiceItem)
						constraint (ManufacturerNumber entered)
							"ManufacturerNumberIsRequiredByContractClassification"		

			if (Contract.PurchasingVendorRel.GTINInUse
			and ItemmastRel exists)
				constraint (Manufacturer.ManufacturerCode entered)
					"ManufacturerCodeIsRequiredByPoVendor"		
				constraint (ManufacturerNumber entered)
					"ManufacturerNumberIsRequiredByPoVendor"		

			if (GlobalTradeItemNumber entered)
				if (!ServiceItem)
					constraint (Manufacturer.ManufacturerCode entered)
						"ManufacturerCodeIsRequiredOnContractLineForGTIN"		
					constraint (ManufacturerNumber entered)
						"ManufacturerNumberIsRequiredOnContractLineForGTIN"		

			if (FromManufacturerContract           
			and MfgContractLineRel.ManufacturerNumber entered)
				constraint ((MfgContractLineRel.Manufacturer.ManufacturerCode     = Manufacturer.ManufacturerCode)
				and         (MfgContractLineRel.Manufacturer.ManufacturerDivision = Manufacturer.ManufacturerDivision)
				and         (MfgContractLineRel.ManufacturerNumber			       = ManufacturerNumber))
					"ManufacturerContractLineHasManufacturerInformationThatDoesNotMatchManufacturerInformationOnDistributorContractLine"

			if (Contract.MaximumAmount != 0)
				constraint (PerOrderMaximumAmount <= Contract.MaximumAmount)
					"PerOrderMaximumAmountCannotBeGreaterThanContractLifetimeMaximumAmount"		

			if (Contract.MaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= Contract.MaximumAmount)
					"PerOrderMinimumAmountCannotBeGreaterThanContractLifetimeMaximumAmount"		

			if ((!CanCreateChangeOrderDetail
			or  (CanCreateChangeOrderDetail
			and !Contract.ChangeOrderMaxAmountUpdate))
			and !ExistingLineForChangeOrder)
				if (Contract.MaximumAmount !=0)
					if (Contract.ContractSubclassification entered)
						if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint (BaseCost <= Contract.MaximumAmount)
								"BaseCostCannotBeGreaterThanTheContractMaximumAmount"		
					else
						if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint (BaseCost <= Contract.MaximumAmount)
								"BaseCostCannotBeGreaterThanTheContractMaximumAmount"		

			if (LifetimeMaximumAmount entered
			and !Contract.ServicePurchaseType)
				constraint (BaseCost <= LifetimeMaximumAmount)
					"BaseCostCannotBeGreaterThanTheLineMaximumAmount"		

			if (Contract.PerOrderMaximumAmount != 0)
				constraint (BaseCost <= Contract.PerOrderMaximumAmount)
					"BaseCostCannotBeGreaterThanTheContractPerOrderMaximumAmount"		

			if (!ServiceCode.Amount
			and  PerOrderMaximumAmount entered)
				constraint (BaseCost <= PerOrderMaximumAmount)
					"BaseCostCannotBeGreaterThanTheLinePerOrderMaximumAmount"		

			if (ServiceItem)
				constraint (ServiceCode.Quantity
				or 	        ServiceCode.Amount)
					"ServiceCodeMustBeQuantityOrAmountWhenPurchaseTypeIsService"  

			if (ConsignmentLinePriceBreakOn.Quantity
			and LifetimeMaximumQuantity	> 0)
				constraint  ((ConsignmentPriceBreak.QuantityPercentPrice[1].Quantity	<= LifetimeMaximumQuantity)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[2].Quantity	<= LifetimeMaximumQuantity)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[3].Quantity	<= LifetimeMaximumQuantity)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[4].Quantity	<= LifetimeMaximumQuantity)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[5].Quantity	<= LifetimeMaximumQuantity))
					"ConsignmentPriceBreakQuantityCannotBeGreaterThanTheLifetimeLineMaximumQuantity"		

			if (LinePriceBreakOn.Amount
			and LifetimeMaximumAmount	> 0)
				constraint ((PriceBreak.QuantityPercentPrice[1].Quantity	<= LifetimeMaximumAmount)
				and  		(PriceBreak.QuantityPercentPrice[2].Quantity	<= LifetimeMaximumAmount)
				and  		(PriceBreak.QuantityPercentPrice[3].Quantity	<= LifetimeMaximumAmount)
				and  		(PriceBreak.QuantityPercentPrice[4].Quantity	<= LifetimeMaximumAmount)
				and  		(PriceBreak.QuantityPercentPrice[5].Quantity	<= LifetimeMaximumAmount))
					"PriceBreakAmountCannotBeGreaterThanTheLifetimeLineMaximumAmount"		

			if (ConsignmentLinePriceBreakOn.Amount
			and LifetimeMaximumAmount	> 0)
				constraint ((ConsignmentPriceBreak.QuantityPercentPrice[1].Quantity	<= LifetimeMaximumAmount)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[2].Quantity	<= LifetimeMaximumAmount)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[3].Quantity	<= LifetimeMaximumAmount)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[4].Quantity	<= LifetimeMaximumAmount)
				and  		(ConsignmentPriceBreak.QuantityPercentPrice[5].Quantity	<= LifetimeMaximumAmount))
					"ConsignmentPriceBreakAmountCannotBeGreaterThanTheLifetimeLineMaximumAmount"		

			if (NdcNbr entered)
				constraint (!HibccUpn entered)
					"ItemWithNdcNumberCannotHaveHIBCC-DIEntered" 
				constraint (!UccEanUpn entered)
					"ItemWithNdcNumberCannotHaveUccEanUpnNumberEntered"  
				constraint (!Sku entered)
					"ItemWithNdcNumberCannotHaveSkuNumberEntered" 

			if (Sku entered
			or  HibccUpn entered
			or  UccEanUpn entered)
				constraint (!DrugPharmacyOrNarcoticUsage)
					"SKU,HIBCC-DIOrUCCEANItemUPNExists;UsageIdentifierCannotBeDrugsOrPharmacy" 

			if (LowUOMCodeHibccUPN entered)
				constraint (HibccUpn != LowUOMCodeHibccUPN)
					"HIBCC-DIAndLowUOMCodeHIBCC-DICannotBeTheSame" 

			if (NdcNbr entered
			and UsageIdentifier entered)
				constraint (DrugPharmacyOrNarcoticUsage)
					"NationalDrugCodeExists;UsageIdentifierMustBeDrugsOrPharmacyOrNarcotic"	

			if (ItemType.Service and ServiceCode.Amount
			and Contract.StandingPurchaseType)
				constraint (!Quantity > 1)
					"CannotEnterStandingQuantityGreaterThanOneForItemTypeService,ServiceCode" 

			if (Retainage)
				constraint (RetainagePercent1 entered)
					"FirstRetainagePercentForLine<ContractLine>IsRequired"  
				constraint (RetainagePercent1 >= 0% and RetainagePercent1 <= 100%)
					"FirstRetainagePercentForLine<ContractLine>MustBeAPositiveValueNotGreaterThan100%" 

				constraint (RetainageUpToPercent entered)
					"UpToPercentCompleteForLine<ContractLine>IsRequired" 
				constraint (RetainageUpToPercent >= 0% and RetainageUpToPercent <= 100%)
					"RetainageUpToPercentCompleteForLine<ContractLine>MustBeAPositiveValueNotGreaterThan100%" 
				constraint (RetainagePercent2 >= 0% and RetainagePercent2 <= 100%)
					"SecondRetainagePercentForLine<ContractLine>MustBeAPositiveValueNotGreaterThan100%" 
				constraint (RetainageOverridePercent >= 0% and RetainageOverridePercent <= 100%)
					"RetainageOverridePercentForLine<ContractLine>MustBeAPositiveValueNotGreaterThan100%" 

			if (ServiceCode.Quantity
			and !Contract.StandingPurchaseType
			and !ContractTypeAllowsZeroMaxQuantity)
				constraint (LifetimeMaximumQuantity entered)
					"LifetimeMaximumQuantityIsRequiredForServiceItemWithQuantityServiceCode" 

			if (!CanCreateChangeOrderDetail
			or (CanCreateChangeOrderDetail
			and !Contract.ChangeOrderMaxAmountUpdate))
				if (Contract.MaximumAmount != 0)
					if (Contract.ContractSubclassification entered)
						if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint (LifetimeMaximumAmount <= Contract.MaximumAmount)
								"MaximumAmountOnContractLine<ContractLine>CannotBeGreaterThanTheContractMaximumAmount" 
					else
						if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint (LifetimeMaximumAmount <= Contract.MaximumAmount)
								"MaximumAmountOnContractLine<ContractLine>CannotBeGreaterThanTheContractMaximumAmount" 

			if  (Contract.StandingPurchaseType)
				constraint (!PerOrderMaximumQuantity entered)
					"CannotEnterAPerOrderMaximumQuantityForStandingPurchaseTypes"		
			if (LifetimeMaximumQuantity != 0)
				constraint (PerOrderMaximumQuantity <= LifetimeMaximumQuantity)
					"PerOrderMaximumQuantityCannotBeGreaterThanTheContractLineMaximumQuantity" 

			if (LifetimeMaximumAmount != 0)
				constraint (PerOrderMaximumAmount <= LifetimeMaximumAmount)
					"ThePerOrderMaximumAmountCannotBeGreaterThanTheMaximumAmount" 
			if (Contract.PerOrderMaximumAmount != 0)
				constraint (PerOrderMaximumAmount <= Contract.PerOrderMaximumAmount)
					"PerOrderMaximumAmountCannotBeGreaterThanTheContractMaximumAmount" 

			if (PerOrderMaximumQuantity != 0)
				constraint (PerOrderMinimumQuantity <= PerOrderMaximumQuantity)
					"ThePerOrderMinimumQuantityCannotBeGreaterThanThePerOrderMaximumQuantity" 
			if (LifetimeMaximumQuantity != 0)
				constraint (PerOrderMinimumQuantity <= LifetimeMaximumQuantity)
					"ThePerOrderMinimumQuantityCannotBeGreaterThanTheLifetimeMaximumQuantity" 
			if (PerOrderMaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= PerOrderMaximumAmount)
					"ThePerOrderMinimumAmountCannotBeGreaterThanThePerOrderMaximumAmount" 
			if (LifetimeMaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= LifetimeMaximumAmount)
					"ThePerOrderMinimumAmountCannotBeGreaterThanTheMaximumAmount" 
			if (PerOrderMinimumAmount !=0)
				constraint (PerOrderMinimumAmount >= Contract.PerOrderMinimumAmount)
					"ThePerOrderMinimumAmountCannotBeLessThanTheContractPerOrderMinimumAmount" 
			if (Contract.PerOrderMaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= Contract.PerOrderMaximumAmount)
					"ThePerOrderMinimumAmountCannotBeGreaterThanTheContractPerOrderMaximumAmount" 
			if (Taxable)
				constraint (TaxCode entered)
					"TaxCodeIsRequiredWhenTaxableFlagIsTrue" 
			if (CostOption.NoCharge
			or  CostOption.VendorDetermined)
				constraint (BaseCost = 0)
					"BaseCostMustEqualZeroWhenCostOptionIsNoChargeOrVendorDetermined" 

			if (NonDirectBuyItem)
				if (VendorItem not entered)
					if (Manufacturer.ManufacturerCode not entered)
						constraint (ManufacturerNumber entered)
							"VendorItemOrManufacturerCode/ManufacturerNumberAreRequiredForNonDirectBuyItem" 
						if (ManufacturerNumber entered)
							constraint (Manufacturer.ManufacturerCode entered)
								"ManufacturerCodeIsRequiredWithManufacturerNumberForNonDirectBuyItem" 
					else
						constraint (ManufacturerNumber entered)
							"VendorItemOrManufacturerNumberIsRequiredForNonDirectBuyItem"		

			if (PriceBreak entered)
				constraint (PricingMarkupOrDiscount entered)
					"MustEnterThePricingMarkupOrDiscountWhenEnteringPriceBreaks" 
			else
				constraint (PricingMarkupOrDiscount !entered)
					"CannotEnterValuesForThePricingMarkupOrDiscountIfNoPriceBreaksExist" 
			if (PricingMarkupOrDiscount.Markup)
				constraint (!LineDiscountExists)
					"ContractLinesWithDiscountPricingExist;CannotUseMarkup" 
				if (PriceBreak entered)
					constraint (!ConsignmentPricingMarkupOrDiscount.Discount)
						"CannotUseMarkup;ConsignmentPriceBreaksExistUsingDiscount" 
			else
			if (PricingMarkupOrDiscount.Discount)
				constraint (!LineMarkupExists)
					"ContractLinesWithMarkupPricingExist;CannotUseDiscount" 
				if (PriceBreak entered)
					constraint (!ConsignmentPricingMarkupOrDiscount.Markup)
						"CannotUseDiscount;ConsignmentPriceBreaksExistUsingMarkup" 

			if (PriceBreak entered)
				constraint (LinePriceBreakOn entered)
					"QuantityOrAmountBreakFlagMustBeEnteredWhenPriceBreaksExist" 
				constraint (!ServiceCode.Amount)
					"CannotEnterPriceBreakInformationForAmountTypeService" 
			else
				constraint (LinePriceBreakOn !entered)
					"CannotEnterValuesForTheQuantityOrAmountBreakFlagIfNoPriceBreaksExist" 
			if (LinePriceBreakOn.Quantity)
				constraint (!ByQuantityNotAllowed)
					"ByQuantityFlagIsNotAllowedForServiceItemsOnNonServicePurchaseTypes" 
			if (LinePriceBreakOn.Amount)
				constraint (!Contract.LineLevelBreaks.OrderTotals)
					"CannotDoPurchaseOrderLevelBreaksByAmount" 

			LastUnitPrice   = BaseCost
			LastUnitPercent = DerivedBasePercent
			LastQuantity    = 0
			HasUnitPercent  = false
			HasUnitPrice    = false
			for each PriceBreak.QuantityPercentPrice
				if (each.UnitPercent > 0)
					HasUnitPercent = true
				else
				if (each.UnitPrice > 0)
					HasUnitPrice = true

				if (HasUnitPercent or HasUnitPrice)
					constraint ((HasUnitPercent and !HasUnitPrice)
							or (!HasUnitPercent and HasUnitPrice))
								"MustEnterAllPercentOrAllCostTypeBreaksForALineItem" 
			for each PriceBreak.QuantityPercentPrice
				if (each.Quantity entered)
					constraint (each.Quantity > LastQuantity)
						"BreakQuantitiesMustBeGreaterThanTheLastQuantity" 
				if (!Contract.LineLevelBreaks.OrderTotals)
					if (each.UnitPrice entered)
						constraint (each.UnitPrice < LastUnitPrice)
							"EachHigherPriceBreakMustShowASmallerUnitPrice" 
				if (PricingMarkupOrDiscount.Markup)
					if (each.UnitPercent entered)
						constraint (each.UnitPercent < LastUnitPercent)
							"EachHigherPriceBreakMustIndicateASmallerMarkup"	
				else
					if (PricingMarkupOrDiscount.Discount)
						if (each.UnitPercent entered)
							constraint (each.UnitPercent > LastUnitPercent)
								"EachHigherPriceBreakMustIndicateAGreaterDiscount" 
				LastQuantity    = each.Quantity
				LastUnitPrice   = each.UnitPrice
				LastUnitPercent = each.UnitPercent

			if (ConsignmentPriceBreak entered)
				constraint (ConsignmentPricingMarkupOrDiscount entered)
					"MustEnterConsignmentPricingMarkupOrDiscountWhenEnteringPriceBreaks" 
			else
				constraint (!ConsignmentPricingMarkupOrDiscount entered)
					"CannotEnterValuesForConsignmentPricingMarkupOrDiscountIfNoPriceBreaksExist" 
			if (ConsignmentPricingMarkupOrDiscount.Markup)
				constraint (!LineDiscountExists)
					"ContractLinesWithDiscountPricingExist;CannotUseMarkup" 
				if (PriceBreak entered)
					constraint (!PricingMarkupOrDiscount.Discount)
						"CannotUseMarkup;PurchaseOrServicePriceBreaksExistUsingDiscount" 
			else
			if (ConsignmentPricingMarkupOrDiscount.Discount)
				constraint (!LineMarkupExists)
					"ContractLinesWithMarkupPricingExist;CannotUseDiscount" 
				if (PriceBreak entered)
					constraint (!PricingMarkupOrDiscount.Markup)
						"CannotUseDiscount;PurchaseOrServicePriceBreaksExistUsingMarkup" 

			if (ConsignmentPriceBreak entered)
				constraint (ConsignmentLinePriceBreakOn entered)
					"ConsignmentQuantityOrAmountBreakFlagMustBeEnteredWhenPriceBreaksExist" 
			else
				constraint (ConsignmentLinePriceBreakOn !entered)
					"CannotEnterValuesForTheConsignmentQuantityOrAmountBreakFlagIfNoPriceBreaksExist" 
			if (ConsignmentLinePriceBreakOn.Amount)
				constraint (!Contract.LineLevelBreaks.OrderTotals)
					"CannotDoPurchaseOrderLevelBreaksByAmount" 

			LastUnitPrice   = BaseCost
			LastUnitPercent = DerivedBasePercent
			LastQuantity    = 0
			HasUnitPercent  = false
			HasUnitPrice    = false
			for each ConsignmentPriceBreak.QuantityPercentPrice
				if (each.UnitPercent > 0)
					HasUnitPercent = true
				else
				if (each.UnitPrice > 0)
					HasUnitPrice = true

			if (HasUnitPercent or HasUnitPrice)
				constraint ((HasUnitPercent and !HasUnitPrice)
				or (!HasUnitPercent and HasUnitPrice))
					"MustEnterAllPercentOrAllCostTypeBreaksForALineItem"  
			if (HasUnitPercent
			and ConsignmentPricingMarkupOrDiscount.Markup)
				constraint (Contract.ContractPricingPercentExists)
					"BasePercentIsRequiredOnHeaderPricingRecordWhenUsingPriceBreaksByPercent" 

			for each ConsignmentPriceBreak.QuantityPercentPrice
				if (each.Quantity entered)
					constraint (each.Quantity > LastQuantity)
							"BreakQuantitiesMustBeGreaterThanTheLastQuantity" 
				if (!Contract.LineLevelBreaks.OrderTotals)
					if (each.UnitPrice entered)
						constraint (each.UnitPrice < LastUnitPrice)
							"EachHigherPriceBreakMustShowASmallerUnitPrice" 
				if (ConsignmentPricingMarkupOrDiscount.Markup)
					if (each.UnitPercent entered)
						constraint (each.UnitPercent < LastUnitPercent)
							"EachHigherPriceBreakMustIndicateASmallerMarkup" 
				else
					if (ConsignmentPricingMarkupOrDiscount.Discount)
						if (each.UnitPercent entered)
							constraint (each.UnitPercent > LastUnitPercent)
								"EachHigherPriceBreakMustIndicateAGreaterDiscount" 
				LastQuantity    = each.Quantity
				LastUnitPrice   = each.UnitPrice
				LastUnitPercent = each.UnitPercent

			if (!FromManufacturerContract)
				if (EffectiveDate > 0)
					if (Contract.EffectiveDate > 0)
						constraint (EffectiveDate >= Contract.EffectiveDate)
							"ContractLineEffectiveDateCannotBePriorToContractEffectiveDate" 
					if (Contract.ExpirationDate > 0)
						constraint (EffectiveDate <= Contract.ExpirationDate)
							"ContractLineEffectiveDateCannotBeAfterContractExpirationDate" 

			if (!FromManufacturerContract)
				if (ExpirationDate > 0)
					if (Contract.EffectiveDate > 0)
						constraint (ExpirationDate > Contract.EffectiveDate)
							"ContractLineExpirationDateMustBeGreaterThanContractEffectiveDate" 
					if (EffectiveDate > 0)
						constraint (ExpirationDate > EffectiveDate)
							"ExpirationDateMustBeGreaterThanEffectiveDate"		
					if (Contract.ExpirationDate > 0)
	   					constraint (ExpirationDate <= Contract.ExpirationDate)
							"ContractLineExpirationDateCannotBeAfterContractExpirationDate" 

			if (ItemType.Special)
				if (GlobalTradeItemNumber entered)

					constraint (!GTINExistsRel exists)
						"ContractLine<first GTINExistsRel.ContractLine>ExistsWithGTIN;TheSameGTINIsNotAllowedOnMultipleContractLines"  

				if (LowUOMCodeGTIN entered)
					constraint (GlobalTradeItemNumber != LowUOMCodeGTIN)
						"GTINAndLowUOMCodeGTINCannotBeTheSame" 
			
				if (LowUOMCodeGTIN entered)
					constraint (LowUOMCodeGTINDupExistsRel !exists)
						"ContractLine<first LowUOMCodeGTINDupExistsRel.ContractLine>ExistsWithLowUOMCodeGTIN;TheSameLowUOMCodeGTINIsNotAllowedOnMultipleContractLines" 

				if (HibccUpn entered)
					constraint (HIBCCDIExistsRel !exists)
						"ContractLine<first HIBCCDIExistsRel.ContractLine>ExistsWithHIBCC-DI;TheSameHIBCC-DIIsNotAllowedOnMultipleContractLines" 

				if (LowUOMCodeHibccUPN entered)
					constraint (LowUOMCodeHIBCCDIExistsRel !exists)
						"ContractLine<first LowUOMCodeHIBCCDIExistsRel.ContractLine>ExistsWithLowUOMCodeHIBCC-DI;TheSameLowUOMCodeHIBCC-DIIsNotAllowedOnMultipleContractLines" 

			if (ItemType.Special)
				if (ManualItemNumbering)
					constraint (ManualItemNumber entered)
						"MustEnterManualItemNumberForNewItem"  
					if (ManualItemNumber entered
					and NumericItemNumbering)
						constraint (ManualItemNumber is numeric)
							"ManualItemNumberMustBeNumeric"
					if (ManualItemNumber entered)
						constraint (ManualItemNumberRel !exists)
							"ManualItemNumberAlreadyExistsAsAnItem;MustEitherEnterManualItemNumberInItemNumberOrEnterADifferentManualItemNumber"  
				else
				if (AssignItemNumbering)
					if (GTINAssignment)
						constraint (GlobalTradeItemNumber entered)
							"MustEnterGTINNumberForNewItem"
					if (UPCAssignment)
						constraint (Upc entered)
							"MustEnterUPCNumberForNewItem"
					if (SKUAssignment)
						constraint (Sku entered)
							"MustEnterSKUNumberForNewItem"
					if (UCCEANAssignment)
						constraint (UccEanUpn entered)
							"MustEnterUCCEANNumberForNewItem"
					if (HIBCCAssignment)
						constraint (HibccUpn entered)
							"MustEnterHIBCC-DIForNewItem"
					if (NDCAssignment)
						constraint (NdcNbr entered)
							"MustEnterNationalDrugCodeForNewItem"
			
			if (UOM entered 
			and LowUOMCode entered)
				if (UOM.UnitOfMeasure = LowUOMCode.UnitOfMeasure)
					constraint (UOMConversion = 1)
						"UOMConversionMustBe1IfLowUnitOfMeasureIsTheSameAsUnitOfMeasure"  
				if (UOM.UnitOfMeasure != LowUOMCode.UnitOfMeasure)
					constraint (UOMConversion !=1)
						"UOMConversionCannotBe1IfLowUnitOfMeasureIsDifferentThanUnitOfMeasure" 

		BackOfficeDependentHardLineEdits

			if (VendorItem entered
			and ManufacturerNumber entered)
				constraint (!POVendorItemForSameMfgInfoRel exists)
					"POVendorItem<first POVendorItemForSameMfgInfoRel.VendorItem>AlreadyExistsForThisVendorWithTheSameManufacturerInformation"	

			if (ManufacturerNumber entered)
				if (ItemType.Special
				and CanUseForCostDefaulting)
					constraint (!ManyItemsWithManufacturerInformation)
						"MoreThanOneItemMasterItemExistsWithTheSameManufacturerInformation;FirstItemIs<first ItemByManufacturerRel.Item>"

			if ((!HasBeenActivated
			and  ItemType.Special)
			and (CanUseForCostDefaulting
			or   CreateDistributorContractLine))
				constraint (!SkuExistsOnItemRel exists)
					"SKUNumber<Sku>IsAlreadyAssignedToItem<SkuExistsOnItemRel.Item>"  

			if (GlobalTradeItemNumber entered)
				constraint (!IcitemgtinMismatchRel exists)
					"GTINAlreadyExistsForItem<first IcitemgtinMismatchRel.Item>"		

				if (ItemGroupRel.AllowMultipleGTINs = false)
					if (GlobalTradeItemNumber !exists)
						constraint (!ItemGTINSameUOMRel exists)
							"CannotAddNewGTIN;GTIN<first ItemGTINSameUOMRel.ItemGTIN>AlreadyExistsForTheItemWithTheSameUnitOfMeasure" 

					if (ItemNumberExists
					and ManufacturerNumber entered)
						if (IcitemgtinManfRel exists)
							constraint (GlobalTradeItemNumber = IcitemgtinManfRel.ItemGTIN)
								"ThisManufacturerInformationAlreadyExistsForGTIN<first IcitemgtinManfRel.ItemGTIN>"

			if (Contract.NonServicePurchaseType)
				if (VendorItem exists
				and InactiveVendorItem
				and CanUseForCostDefaulting)
					invoke Create ContractLineError set
						invoked.ErrorMessageNumber 	= 25

			if  (VendorItem entered)
				if (UOM != blank)
					if  (VendorItem.VendorBuyUOM entered
					and  VendorItem.VendorPriceUOM = blank)
						constraint (UOM = VendorItem.VendorBuyUOM)
							"EnteredUOMDoesNotMatchTheVendorItemBuyUOMOf<VendorItem.VendorBuyUOM.UnitOfMeasure>"		
					if  (VendorItem.VendorPriceUOM entered)
						constraint (UOM = VendorItem.VendorPriceUOM)
							"EnteredUOMMustMatchTheVendorItemPriceUOMOf<VendorItem.VendorPriceUOM.UnitOfMeasure>"		

			if (ItemNumberExists)
				constraint (!ItemNumber.NotAvailableForUse)
					"ItemNumberIsNotAvailableForUse"
				constraint (ItemNumber.Active)
					"ItemNumberIsInactive"		

			if (Contract.BlanketOrStanding and BlanketStandingRequestingLocation entered)                         
				constraint (BlanketStandingRequestingLocation.RequestingLocation.Active)
					"RequestingLocation<BlanketStandingRequestingLocation.RequestingLocation>IsInactive"		

			if (GlobalTradeItemNumber entered)
				if (GlobalTradeItemNumberExistsSomewhere)
					constraint (ItemGTINByItemRel.Active)
						"GTINIsInactive"		
					if (!UOM entered)
						constraint (!ItemGTINByItemRel.ItemUOMRel.ValidForBuying.Inactive)
							"GTIN_UOMOf<ItemGTINByItemRel.UnitOfMeasure>IsAnInactiveBuyUOMForItem" 
						constraint (ItemGTINByItemRel.ItemUOMRel.OKForBuying)
							"GTIN_UOMOf<ItemGTINByItemRel.UnitOfMeasure>IsNotAValidBuyUOMForItem"  
					if (VendorItem exists)
						constraint ((ItemGTINByItemRel.Manufacturer.ManufacturerCode 		= 	VendorItem.Manufacturer.ManufacturerCode)
						and         (ItemGTINByItemRel.Manufacturer.ManufacturerDivision 	= 	VendorItem.Manufacturer.ManufacturerDivision)
						and         (ItemGTINByItemRel.ManufacturerNumber 					= 	VendorItem.ManufacturerNumber))
							"ManufacturerInformationMustBeTheSameOnGTINAndVendorItem"		
						constraint ((ItemGTINByItemRel.Manufacturer.ManufacturerCode 		= VendorItem.Manufacturer.ManufacturerCode)
						and         (ItemGTINByItemRel.Manufacturer.ManufacturerDivision 	= VendorItem.Manufacturer.ManufacturerDivision)
						and         (ItemGTINByItemRel.ManufacturerNumber 					= VendorItem.ManufacturerNumber))
							"ManufacturerInformationMustBeTheSameOnGTINAndVendorItem"		

				if (GlobalTradeItemNumberExists)
					if (UOM entered)
						constraint (IcitemgtinRel.UnitOfMeasure = UOM)
							"GTINUnitOfMeasureOf<ItemGTINByItemRel.UnitOfMeasure.UnitOfMeasure>MustBeTheSameAsEnteredOrDefaultedUOM" 

			if (ItemNumber entered)
				if (ItemType.Itemmast)
					constraint (!ItemUOMRel.ValidForBuying.Inactive)
						"<UOM.UnitOfMeasure>IsAnInactiveBuyUOMForThisItem"  
					constraint (ItemUOMRel exists)
						"<UOM.UnitOfMeasure>IsAnInvalidUOMForThisItem"  
					if (!ItemNumber.IsCatchWeightItem)
						constraint (ItemUOMRel.OKForBuying)
							"<UOM.UnitOfMeasure>IsNotAValidBuyUOMForThisItem"  
					if (ItemNumber.IsCatchWeightItem)
						constraint (Contract.UOMSMustMatch != true
						and         Contract.UseContractUOM != true)
							"CatchWeightItemIsNotAllowedForContractsWhereUomsMustMatchOrUseContractUomIsSetToTrue"

			if (UOM entered)
				constraint (UOM.UnitOfMeasure.Active)
					"UnitOfMeasureIsNotActive"  

			if (VendorItem exists)
				if (VendorItem.ManufacturerNumber	entered
				and ManufacturerNumber entered)
					constraint ((VendorItem.Manufacturer.ManufacturerCode     			= Manufacturer.ManufacturerCode)
					and         (VendorItem.Manufacturer.ManufacturerDivision 			= Manufacturer.ManufacturerDivision)
					and         (VendorItem.ManufacturerNumber       					= ManufacturerNumber))
						"VendorItemHasManufacturerInformationThatDoesNotMatchEnteredManufacturerInformation"		

			if  (ServicePurchaseTypeContract)
				if (ServiceCode.Quantity
				and LifetimeMaximumQuantity > 0)
					constraint ((LifetimeMaximumQuantity * BaseCost) 		>= AmountOrdered)
						"LineMaximumQuantityTimesBaseCostIsLessThanTheAmountAlreadyInvoicedAgainstThisServicePurchaseTypeLine"
				else
				if (ServiceCode.Amount)
					constraint (BaseCost 						>= AmountOrdered)
						"LineMaximumAmount(BaseCost)IsLessThanTheAmountAlreadyInvoicedAgainstThisServicePurchaseTypeLine"
			if  (ServicePurchaseTypeContract
			and  ServiceCode.Quantity
			and  LifetimeMaximumQuantity > 0)
				constraint (LifetimeMaximumQuantity 						>= QuantityOrdered)
					"LineMaximumQuantityIsLessThanTheQuantityAlreadyInvoicedAgainstThisServicePurchaseTypeLine"

			if  (ServiceItem
			and !ServicePurchaseTypeContract)
				if (ServiceCode.Quantity
				and LifetimeMaximumQuantity > 0)
					constraint ((LifetimeMaximumQuantity * BaseCost) 		>= AmountOrdered)
						"LineMaximumAmountIsLessThanTheAmountAlreadyOrderedAgainstThisLine"
				else
				if (ServiceCode.Amount)
					constraint (BaseCost 						>= AmountOrdered)
						"LineMaximumAmountIsLessThanTheAmountAlreadyOrderedAgainstThisLine"
				if  (ServiceCode.Quantity
				and  LifetimeMaximumQuantity > 0)
					constraint (LifetimeMaximumQuantity 						>= QuantityOrdered)
						"LineMaximumQuantityIsLessThanTheQuantityAlreadyOrderedAgainstThisLine"

			if ((!HasBeenActivated
			and  ItemType.Itemmast)
			and (CanUseForCostDefaulting
			or   CreateDistributorContractLine))
				if (NdcNbrExistsOnItemRel exists)
					constraint (ItemNumber = NdcNbrExistsOnItemRel.Item)
						"NDCNumber<NdcNbr>IsAlreadyAssignedToItem<first NdcNbrExistsOnItemRel.Item>"  

			if ((!HasBeenActivated
			and  ItemType.Itemmast)
			and (CanUseForCostDefaulting
			or   CreateDistributorContractLine))
				if (HibccUpnExistsOnItemRel exists)
					constraint (ItemNumber = HibccUpnExistsOnItemRel.Item)
						"HIBCC-DI<HibccUpn>IsAlreadyAssignedToItem<first HibccUpnExistsOnItemRel.Item>" 

			if ((!HasBeenActivated
			and  ItemType.Itemmast)
			and (CanUseForCostDefaulting
			or   CreateDistributorContractLine))
				if (UccEanUpnExistsOnItemRel exists)
					constraint (ItemNumber = UccEanUpnExistsOnItemRel.Item)
						"UccEanUpnNumber<DerivedUccEanUpn>IsAlreadyAssignedToItem<first UccEanUpnExistsOnItemRel.Item>" 

			if ((!HasBeenActivated
			and  ItemType.Itemmast)
			and (CanUseForCostDefaulting
			or   CreateDistributorContractLine))
				if (UPCExistsOnItemRel exists)
					constraint (ItemNumber = first UPCExistsOnItemRel.Item)
						"UPCNumber<Upc>IsAlreadyAssignedToItem<first UPCExistsOnItemRel.Item>" 

			if (PayablesDistributionCode entered)
				constraint (PayablesDistributionCode.IsPercentDistributionCode)
					"TheDistributionCodeMustBeDefinedWithPercents,NotAmounts" 

		CreateItemAndVendorItem

			include DefaultItemNumbers

			if  (SpecialItem
			and  SpecialItemOptions.CreateItemOnActivation
			and  !ItemNotInUse)
				invoke Create Item
					fill in fields from ContractLine
						except invoked.EffectiveDate 
						except invoked.ExpirationDate 
						except invoked.Item
					invoked.FromExternal            = true
					if (ManualItemNumbering)
						invoked.Item                = ManualItemNumber
					else
					if (AssignItemNumbering)
						if (GTINAssignment)
							invoked.Item            = GlobalTradeItemNumber
						if (SKUAssignment)
							invoked.Item            = Sku
						if (UPCAssignment)
							invoked.Item            = Upc
						if (VendorItemAssignment)
							invoked.Item            = VendorItem
						if (ManufacturerAssignment)
							invoked.Item            = ManufacturerNumber
						if (NDCAssignment)
							invoked.Item            = NdcNbr
						if (HIBCCAssignment)
							invoked.Item            = HibccUpn
						if (UCCEANAssignment)
							invoked.Item            = UccEanUpn
					invoked.ItemGroup               = ContractGroup
					invoked.Description				= ItemDescription
					invoked.Description2			= ItemDescription2
					invoked.Description3            = ItemDescription3
					invoked.StockUOM			    = UOM.UnitOfMeasure
					invoked.Active                  = true
				LocalLowUOMCode                     = LowUOMCode
				LocalFromCreateItemAndVendorItem    = true 
				invoke ChangeSpecialItemToItem ContractLine  
					if (SequentialItemNumbering)
						invoked.PrmNewItemNumber        = ItemGroupRel.LastItem
					else
					if (ManualItemNumbering)
						invoked.PrmNewItemNumber        = ManualItemNumber
					else
					if (AssignItemNumbering)
						if (GTINAssignment)
							invoked.PrmNewItemNumber    = GlobalTradeItemNumber
						if (SKUAssignment)
							invoked.PrmNewItemNumber    = Sku
						if (UPCAssignment)
							invoked.PrmNewItemNumber    = Upc
						if (VendorItemAssignment)
							invoked.PrmNewItemNumber    = VendorItem
						if (ManufacturerAssignment)
							invoked.PrmNewItemNumber    = ManufacturerNumber
						if (NDCAssignment)
							invoked.PrmNewItemNumber    = NdcNbr
						if (HIBCCAssignment)
							invoked.PrmNewItemNumber    = HibccUpn
						if (UCCEANAssignment)
							invoked.PrmNewItemNumber    = UccEanUpn

			if  (ItemNumberExists)

				if (LocalLowUOMCode entered
				and LocalLowUOMCode != UOM.UnitOfMeasure)
					invoke Create ItemUOM 
						invoked.ItemGroup 							= ContractGroup 
						invoked.Item                                = ItemNumber 
						invoked.ItemUOM.UnitOfMeasure               = UOM.UnitOfMeasure
						invoked.UOMConversion                       = UOMConversion 
						invoked.ValidForBuying                      = 2

				if  (!HasVendorItem
				and  ItemNumber.Active)

					invoke Create VendorItem
						invoked.ProcurementGroup					= ContractGroup
						invoked.Item	                       		= ItemNumber
						invoked.Vendor								= Contract.Vendor
						invoked.VendorItem							= VendorItem
						invoked.VendorItemDescription				= VendorItemDescription
						invoked.Manufacturer						= Manufacturer
						invoked.ManufacturerNumber					= ManufacturerNumber
						invoked.LabelerIdentificationCode			= LabelerIdentificationCode
						if (POVendorItemBuyUOMTestRel exists)
							invoked.VendorBuyUOM                    = UOM.UnitOfMeasure

				if    (GlobalTradeItemNumber entered
				and    GlobalTradeItemNumber !exists)
					invoke Create ItemGTIN
						invoked.ItemGroup							= ContractGroup
						invoked.Item	                       		= ItemNumber
						invoked.ItemGTIN							= GlobalTradeItemNumber
						invoked.UnitOfMeasure						= UOM.UnitOfMeasure
						invoked.FullDescription						= ItemDescription
						invoked.Manufacturer    					= Manufacturer
						invoked.ManufacturerNumber					= ManufacturerNumber
						invoked.Active								= true

				if (LowUOMCodeGTIN entered
				and LowUOMCodeGTIN !exists)
					invoke Create ItemGTIN
						invoked.ItemGroup							= ContractGroup
						invoked.Item	                       		= ItemNumber
						invoked.ItemGTIN							= LowUOMCodeGTIN
						invoked.UnitOfMeasure						= LocalLowUOMCode.UnitOfMeasure
						invoked.FullDescription						= ItemDescription
						invoked.Manufacturer    					= Manufacturer
						invoked.ManufacturerNumber					= ManufacturerNumber
						invoked.Active								= true				
				
				if 	(Upc entered
				and  Upc !exists)
					invoke Create ItemUPC
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.ItemUPC                 		= Upc
						invoked.UnitOfMeasure.UnitOfMeasure		= UOM.UnitOfMeasure

				if 	(Sku entered
				and  Sku !exists)
					invoke Create ItemSKU
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.ItemSKU                 		= Sku
						invoked.UnitOfMeasure.UnitOfMeasure		= UOM.UnitOfMeasure

				if 	(NdcNbr entered
				and  NdcNbr !exists)
					invoke Create NationalDrugCode
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.NationalDrugCode           		= NdcNbr
						invoked.UnitOfMeasure.UnitOfMeasure		= UOM.UnitOfMeasure

				if 	(HibccUpn entered
				and  HibccUpn !exists)
					invoke Create HIBCCItemUPN
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.HIBCCItemUPN           			= HibccUpn
						invoked.UnitOfMeasure.UnitOfMeasure		= UOM.UnitOfMeasure

				if 	(LowUOMCodeHibccUPN entered
				and  LowUOMCodeHibccUPN !exists)
					invoke Create HIBCCItemUPN
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.HIBCCItemUPN           			= LowUOMCodeHibccUPN
						invoked.UnitOfMeasure.UnitOfMeasure		= LocalLowUOMCode.UnitOfMeasure

				if 	(UccEanUpn 	entered
				and  UccEanUpn !exists)
					invoke Create UCCEANItemUPN
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.UCCEANItemUPN          			= UccEanUpn
						invoked.UnitOfMeasure.UnitOfMeasure		= UOM.UnitOfMeasure

			if (SpecialItem
			and SpecialItemOptions.CreateItemWithProcess
			and !ItemNotInUse
			and SelectedForItemCreation = false)
				invoke CreateItemWorksheet ItemInformationWorksheet
					fill in fields from ContractLine
						except invoked.EffectiveDate 
						except invoked.ExpirationDate
					invoked.ItemGroup           	= ContractGroup
					invoked.RunGroup                = "FromContract" + Contract
					invoked.Description				= ItemDescription
					invoked.Description2			= ItemDescription2
					invoked.Description3        	= ItemDescription3
					invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].Vendor  				= Contract.Vendor
					invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].VendorItem 				= VendorItem
					invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].VendorItemDescription   = VendorItemDescription
					invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].LabelerIdentificationCode = LabelerIdentificationCode
					invoked.StockUOM									= UOM.UnitOfMeasure
					invoked.UOMConversion   							= UOMConversion
					if (GlobalTradeItemNumber entered)
						invoked.ItemGTINDetails.ItemGTIN 				= GlobalTradeItemNumber
						invoked.ItemGTINDetails.UnitOfMeasure           = UOM.UnitOfMeasure
						invoked.ItemGTINDetails.FullDescription         = ItemDescription
						invoked.ItemGTINDetails.Manufacturer            = Manufacturer
						invoked.ItemGTINDetails.ManufacturerNumber      = ManufacturerNumber
					if (Sku entered)
						invoked.ItemSKUDetails.ItemSKU  				= Sku
						invoked.ItemSKUDetails.UnitOfMeasure            = UOM.UnitOfMeasure 
					if (HibccUpn entered)
						invoked.HIBCCItemUPNDetails.HIBCCItemUPN 		= HibccUpn
						invoked.HIBCCItemUPNDetails.UnitOfMeasure       = UOM.UnitOfMeasure
					if (Upc entered)
						invoked.ItemUPCDetails.ItemUPC                  = Upc
						invoked.ItemUPCDetails.UnitOfMeasure            = UOM.UnitOfMeasure
					invoked.NationalDrugCodeDetails.NationalDrugCode 	= NdcNbr
					if (UccEanUpn entered)
						invoked.UCCEANItemUPNDetails.UCCEANItemUPN		= UccEanUpn
						invoked.UCCEANItemUPNDetails.UnitOfMeasure      = UOM.UnitOfMeasure
				SelectedForItemCreation = true

		CreateTierPreferredContract
			for each AnyLineMemberRel
				invoke FastUpdateWithoutEdits each
					invoked.CreateOrUpdatePreferredContract = true
					invoked.LineActivated                   = LocalHasBeenActivated

			if (OtherPreferredItemRel exists)
				for each OtherPreferredItemRel
					if (each.HasNoPreferredContracts)
						invoke FastUpdateToEvent each
							invoked.PreferredLine = false

		CreatePreferredContract
			for each ContractParticipantRels
				invoke CreateOrUpdatePreferredContract each
					invoked.ParmItem       			= ItemNumber
					invoked.ParmVendorItem 			= VendorItem
					invoked.ParmHasBeenActivated 	= LocalHasBeenActivated

			if (OtherPreferredItemRel exists)
				for each OtherPreferredItemRel
					if (each.HasNoPreferredContracts)
						invoke FastUpdateToEvent each
							invoked.PreferredLine = false

		ProcessDeleteRules 

			if (HasBeenActivated
			and !FromMassDelete)
				if (!Contract.ServicePurchaseType)
					constraint (QuantityOrdered = 0)
						"CannotDelete,OrdersHaveBeenPlacedAgainstThisContractLine"
				constraint (NoInvoicesForContractLine)
					"CannotDelete,InvoicesHaveBeenReceivedAgainstThisItem"
				constraint (PayablesInvoiceDistributionRel !exists)
					"CannotDelete,InvoiceDistributionsExistThatReferenceThisLine"						
				if (Contract.NumberOfActivatedContractLines = 1)
					constraint (Contract.AllowReferenceOfItemsNotOnContract)
							"CannotDeleteTheOnlyLineOnContractWhichIsOrHasBeenReleased"

			if (VendorBackorderByContractLineRel exists)
				invoke Delete first VendorBackorderByContractLineRel
			
			if (KeywordShadowRel exists)
				invoke FastPurge KeywordShadowRel

			if (ErrorsExist)
				for each ContractLineErrorRel
					invoke FastPurge each	

			if (IsManufacturerOrDistributorContract)
				for each AnyLineMemberRel 
					invoke Delete each

			if (!FromMassDelete
			and IsManufacturerOrDistributorContract)
				if (ContractLineImportDirectRel exists)
					invoke FastUpdate ContractLineImportDirectRel
						invoked.Contract	    = blank
						invoked.ContractLine	= blank

			if (HasAttributeUpdates) 
				for each AttributeUpdatesForLineRel
					invoke Delete each
			
			if (Contract.IsDistributorContract)
				LocalVendorItem = VendorItem
				if (ContractLineImportDistributorRel exists)
					
					invoke UpdateFast first ContractLineImportDistributorRel
						invoked.ContractVendorItem = blank

			if (UseCommitments
			and !CommitmentsClosed)

				if (Contract.CreateCommitments.Line)
					for each ContractLineDistribution set
						invoke DeleteCommitment each

				if (Contract.CreateCommitments.LineSpread)
					for each ContractLineDistributionSpreadRel
						invoke DeleteFromLineOrDist each

			if (Contract.CapitatedContract
			and	ContractCapitatedComponentGroupItemRel exists)
				for each ContractCapitatedComponentGroupItemRel
					invoke Delete each
			
			if (PatientChargeItemsExist)
				for each PatientChargeItemsRel
					invoke Delete each

			if (ItemNumberExists)
				if (OtherKeywordItemRel !exists)
					invoke Update ItemKeywordShadowRel
						invoked.ItemHasContract 	 = false
						invoked.HasPreferredContract = false
			
			if (HasBeenActivated)
				if (IsPreferredLine)
					if (HasPrefMan)
						invoke Delete ContractPreferredManufacturerRel			

			if (IsManufacturerContract)
				invoke Delete ContractLinePivotRel

			invoke Delete RebateQualifierItemsRel

			if (DeleteTierQualifierItemRel exists)
				for each DeleteTierQualifierItemRel
					invoke Delete each 
			
			if (SourcingEventNumber entered)
				if (RQSourcingEventLineSource exists)
					for each RQSourcingEventLineSource
						invoke Processed.UpdateInterfaceCancelQuantity each.RequisitionLineRel
							invoked.PrmFromContract = true

		ProcessDeleteExitRules

			FromDeleteForConsolidated = true
			
			if (!FromMassDelete)
				if (!Contract.IsDistributorContract)
					invoke Update RebateQualifierContractsRel
						invoked.NumberOfEligibleItemsToSelect	-= 1
				else
					if (DistributorContractLineNonManufacturerContract)
						invoke Update RebateQualifierContractsRel
							invoked.NumberOfEligibleItemsToSelect	-= 1

				if (CanUseForCostDefaulting
				or  CanUseForInvoicePayment)
					increment Contract.TotalLineMaximumAmount by (0 - LifetimeMaximumAmount)
		
                if (Contract.ContractUsesMatrixApprovals
                and Contract.ContractStatus.ReadyToActivate)
                    if (Contract.CanDisapprove)
                        invoke Disapprove ReadyToActivate Contract
                    else 
                    if (Contract.CanDisapproveAddendum)
                        invoke DisapproveAddendum ReadyToActivate Contract 
                    else 
                    if (Contract.CanDisapproveAmendment)
                        invoke DisapproveAmendment ReadyToActivate Contract 

			include ConsolidatedItemMasterRules

		CanUseForCostDefaultingRules

			if  (IsManufacturerContract
			and  HasTierMembersForManufacturer)
				if (ItemNumberExists)
					CanUseForCostDefaulting = true
				else
				if (SpecialItem)
					if (Contract.ContractSubtype not entered and Contract.ContractType.CanUseForCostDefaultingOptions.UseAllItems
					or  Contract.ContractSubtype entered and Contract.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems)
						CanUseForCostDefaulting = true
					else 
						CanUseForCostDefaulting = false
			else
			if (!IsManufacturerContract
			or ( IsManufacturerContract
			and  NoMembersExist))
				if (SpecialItem
				or (ServiceItem
				and !ServicePurchaseTypeContract))
					if (Contract.ContractSubtype not entered and Contract.ContractType.CanUseForCostDefaultingOptions.UseAllItems
					or  Contract.ContractSubtype entered and Contract.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems)
						CanUseForCostDefaulting = true
					else 
						CanUseForCostDefaulting = false
				else
				if (ItemType.Itemmast)
					if (Contract.ContractSubtype not entered and Contract.ContractType.CanUseForCostDefaultingOptions.UseAllItems
					or  Contract.ContractSubtype entered and Contract.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems
					or  Contract.ContractSubtype not entered and Contract.ContractType.CanUseForCostDefaultingOptions.UseOnlyItemMasterItems
					or  Contract.ContractSubtype entered and Contract.ContractSubtype.CanUseForCostDefaultingOptions.UseAllNonSpecialItems)
						CanUseForCostDefaulting = true
					else 
						CanUseForCostDefaulting = false
			else 
				CanUseForCostDefaulting = false 							

		ConsolidatedItemMasterRules 

			if (ContractGroup.StoreConsolidatedItemAndLocation)
				LocalManufacturer = old Manufacturer
				LocalManufacturerNumber = old ManufacturerNumber 
				if  ((ConsolidatedItemMasterExists
				or    ConsolidatedItemMasterByItemExists)
				and   Manufacturer       = old Manufacturer 
				and   ManufacturerNumber = old ManufacturerNumber 
				and  !LocalUpdateSingleManufacturer)
					if ((UpdateConsolidatedItemMaster changed
					and !LocalDoNotUpdateConsolidated) 
					or   LocalCreateAction = true 
					or   ContractLineState.Closed
					or   FromDeleteForConsolidated)
						if (ConsolidatedItemMasterExists)
							invoke Update first ConsolidatedItemMasterRel 
								invoked.TransientContract       	= Contract 
								invoked.TransientContractLine   	= ContractLine
								invoked.TransientFromCreateAction	= LocalCreateAction
								if (ItemNumber changed)
									invoked.TransientNewItem    = ItemNumber 
								if (BaseCost changed
								or  Priority changed
								or  EffectiveDate changed
								or  ExpirationDate changed
								or  DefaultBuyUnitCost changed 
								or  ErrorsExist changed 
								or  UseForCostDefaulting changed 
								or  UOMConversion changed
								or (LineClosed
								and ContractLineState changed)
								or  LocalCreateAction)
									invoked.TransientCostChange = true 
						else 
						if (ConsolidatedItemMasterByItemExists)
							invoke Update ConsolidatedItemMasterByItemRel 
								invoked.TransientContract       	= Contract 
								invoked.TransientContractLine   	= ContractLine	
								invoked.TransientFromCreateAction   = LocalCreateAction 
								if (ItemNumber changed)
									invoked.TransientNewItem    = ItemNumber 
								if (BaseCost changed
								or  Priority changed
								or  EffectiveDate changed
								or  ExpirationDate changed
								or  DefaultBuyUnitCost changed 
								or  ErrorsExist changed 
								or  UseForCostDefaulting changed 
								or  UOMConversion changed
								or (LineClosed
								and ContractLineState changed)
								or  LocalCreateAction)
									invoked.TransientCostChange = true 																				 
				else 
				if 	 (ItemType.Special
				and  !LocalUpdateSingleManufacturer
				and  (Manufacturer != old Manufacturer
				or    ManufacturerNumber != old ManufacturerNumber)
				and   ConsolidatedItemMasterOldManufRel exists) 
					if (ConsolidatedItemMasterExists)
						invoke UpdateAndConsolidate ConsolidatedItemMasterOldManufRel
							invoked.NewConsolidatedItemMaster               = ConsolidatedItemMasterRel.ConsolidatedItemMaster 
							invoked.TransientContract       				= Contract 
							invoked.TransientContractLine   				= ContractLine
							if (ItemNumber changed)
								invoked.TransientNewItem    				= ItemNumber 									
					else 
						invoke Update ConsolidatedItemMasterOldManufRel 
							invoked.TransientContract       					= Contract 
							invoked.TransientContractLine   					= ContractLine
							if (ItemNumber changed)
								invoked.TransientNewItem    					= ItemNumber 			
				else
				if  (CanUseForConsolidated
				and !ConsolidatedItemMasterExists)
					invoke Create ConsolidatedItemMaster 
						invoked.ContractGroup			= ContractGroup
						invoked.InternalItem        	= ItemNumber 
						invoked.Manufacturer        	= Manufacturer 
						invoked.ManufacturerNumber  	= ManufacturerNumber 
						invoked.TransientContract    	= Contract 
						invoked.TransientContractLine	= ContractLine

				if (ConsolidatedItemMasterExists)
					if ((GlobalTradeItemNumber changed
					and  old GlobalTradeItemNumber entered)
					or  (Upc changed
					and  old Upc entered)
					or  (HibccUpn changed
					and  old HibccUpn entered)
					or  (LowUOMCodeHibccUPN changed 
					and  old LowUOMCodeHibccUPN entered)
					or  (NdcNbr changed 
					and  old NdcNbr entered)
					or  (LowUOMCodeGTIN changed
					and  old LowUOMCodeGTIN entered)
				 	or  (UccEanUpn changed 
					and  old UccEanUpn entered))
						invoke UpdateUOMDetails first ConsolidatedItemMasterRel 
							invoked.ParmUOM         			= UOM.UnitOfMeasure
							invoked.ParmDeleted     			= true 
							if  (GlobalTradeItemNumber changed
							and  old GlobalTradeItemNumber entered)							
								invoked.ParmGTIN				= old GlobalTradeItemNumber 
							if  (Upc changed
							and  old Upc entered)
								invoked.ParmItemUPC     		= old Upc
							if  (HibccUpn changed
							and  old HibccUpn entered)
								invoked.ParmHIBCCDI     		= old HibccUpn
							if  (LowUOMCodeHibccUPN changed 
							and  old LowUOMCodeHibccUPN entered)
								invoked.ParmHIBCCDI     		= old LowUOMCodeHibccUPN
							if  (NdcNbr changed 
							and  old NdcNbr entered)
								invoked.ParmNationalDrugCode 	= old NdcNbr
							if  (LowUOMCodeGTIN changed
							and  old LowUOMCodeGTIN entered)
								invoked.ParmGTIN         		= old LowUOMCodeGTIN
							if  (UccEanUpn changed 
							and  old UccEanUpn entered)
								invoked.ParmUCCEANItemUPN       = old UccEanUpn	 

	Create Rules

		include IDM.CreateRules 
			replace AttachmentField with Picture

		Vendor		= Contract.Vendor 
		Supplier	= Contract.Supplier

		if  (VendorItem !entered
		and !ItemType.Service
		and (Contract.HasAPurchaseType
		or   NonDirectBuyItem)
		and !Contract.ContractTemplate
		and  Contract.Vendor entered)
			if (ItemNumberExists)
				if (GlobalTradeItemNumber entered)
					if (VenItemManfDflt.VendorItem.Manufacturer.ManufacturerCode entered
					and VenItemManfDflt exists)
						VendorItem = first VenItemManfDflt.VendorItem
				if (VendorItem !entered
				and Manufacturer entered
				and ManufacturerNumber entered
				and VenItemLineManfDflt exists)
					VendorItem = VenItemLineManfDflt.VendorItem
				if (VendorItem !entered
				and Contract.ManufacturerCodeDivision entered
				and ManufacturerNumber entered
				and VenItemHeaderManfDflt exists)
					VendorItem = first VenItemHeaderManfDflt.VendorItem
				if (VendorItem !entered
				and DefaultPovenitemRel exists
				and ManufacturerNumber !entered)
					VendorItem = first DefaultPovenitemRel.VendorItem
				if (VendorItem !entered
				and ManufacturerNumber entered
				and MFGInfoOnlyRel exists)
					VendorItem = first MFGInfoOnlyRel.VendorItem
			else
				if (ManufacturerNumber entered
				and !VendorItemExistsFromManufacturerNumber)
					VendorItem = ManufacturerNumber

		include DefaultItemNumbers

		ContractLineState = ContractLineState.Draft
		if  (Contract.MaximumAmount entered
		and (!Contract.AllowChangeOrder
		or  (Contract.AllowChangeOrder
		and (CanUseForCostDefaulting
		or   CanUseForInvoicePayment)
		and  !Contract.ChangeOrderMaxAmountUpdate))
		and  !FromImport)
			if (Contract.TotalChildMaximumAmount > 0)
				if (!Contract.ServicePurchaseType)
					if (Contract.ContractSubclassification entered)
						if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint ((Contract.TotalLineMaximumAmount + LifetimeMaximumAmount + Contract.TotalChildMaximumAmount) <= Contract.MaximumAmount)
								"TheTotalLineMaximumAmountPlusChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
					else
						if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint ((Contract.TotalLineMaximumAmount + LifetimeMaximumAmount + Contract.TotalChildMaximumAmount) <= Contract.MaximumAmount)
								"TheTotalLineMaximumAmountPlusChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
				else
				if (Contract.ServicePurchaseType)
					if (Contract.ContractSubclassification entered)
						if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							if (ServiceCode.Amount)
								constraint ((Contract.TotalLineMaximumAmount + BaseCost + Contract.TotalChildMaximumAmount) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountPlusChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
							if (ServiceCode.Quantity)
								constraint (Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + (BaseCost * LifetimeMaximumQuantity) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountPlusChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
					else
						if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							if (ServiceCode.Amount)
								constraint ((Contract.TotalLineMaximumAmount + BaseCost + Contract.TotalChildMaximumAmount) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountPlusChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
							if (ServiceCode.Quantity)
								constraint (Contract.TotalLineMaximumAmount + Contract.TotalChildMaximumAmount + (BaseCost * LifetimeMaximumQuantity) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountPlusChildMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
			else
				if (!Contract.ServicePurchaseType)
					if (Contract.ContractSubclassification entered)
						if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint ((Contract.TotalLineMaximumAmount + (LifetimeMaximumAmount - old LifetimeMaximumAmount)) <= Contract.MaximumAmount)
								"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<Contract.MaximumAmount>AtTheContractHeader"
					else
						if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							constraint ((Contract.TotalLineMaximumAmount + LifetimeMaximumAmount) <= Contract.MaximumAmount)
								"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
				else
				if (Contract.ServicePurchaseType)
					if (Contract.ContractSubclassification entered)
						if (!Contract.ContractSubclassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							if (ServiceCode.Amount)
								constraint ((Contract.TotalLineMaximumAmount + BaseCost) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
							if (ServiceCode.Quantity)
								constraint (Contract.TotalLineMaximumAmount + (BaseCost * LifetimeMaximumQuantity) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
					else
						if (!Contract.ContractClassification.AutomaticUpdateHeaderLifetimeMaximumAmount)
							if (ServiceCode.Amount)
								constraint ((Contract.TotalLineMaximumAmount + BaseCost) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"
							if (ServiceCode.Quantity)
								constraint (Contract.TotalLineMaximumAmount + (BaseCost * LifetimeMaximumQuantity) <= Contract.MaximumAmount)
									"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmountOf<Contract.MaximumAmount>AtTheContractHeader"

		if (Contract.CapitatedComponentsOnly)
			constraint (ContractCapitatedComponentGroupOnlyRel exists)
				"MustCreateAComponentGroupBeforeAddingLinesForACapitatedComponentsOnlyContract"
		
		if (Contract.PreferredContract)
			PreferredLine = true

		if (CreateFromCopy)
			if (Contract.StandingOrService)
				Priority = 0
			if (!Contract.BlanketOrStanding)
				BlanketStandingRequestingLocation  = blank
			if (!Contract.StandingPurchaseType
			and !ServiceCode.Quantity)
				Quantity = 0
				if (!CopyQuantityToLifetimeMaxQty
				and !SourcingEventNumber entered)
					LifetimeMaximumQuantity = 0
			if (Contract.StandingPurchaseType)
				PerOrderMaximumQuantity = 0
				PerOrderMaximumAmount = 0
				PerOrderMinimumQuantity = 0
				PerOrderMinimumAmount = 0

		if (Contract.CreateCommitments.Line
		or Contract.CreateCommitments.LineSpread)
			if (!CreateFromCopy)	
				UseCommitments = true
				
			if (ContractTypeAllowsZeroMaxQuantity
			and LifetimeMaximumQuantity = 0
			and ServiceCode.Quantity)
				UseCommitments = false

		if (VendorItem exists)
			LabelerIdentificationCode	= blank

		include CanUseForCostDefaultingRules 

		if (HasTierMembersForDistributor)
			CreateDistributorContractLine = true

		if (Contract.ServicePurchaseType)
			CanUseForInvoicePayment = true

		if (!CreateFromCopy)
			if (!IsDistributorContract)
				OnHold = Contract.OnHold
			else
			if  (IsDistributorContract
			and (MfgContractLineRel.OnHold = false
			or   ManufacturerContract = Contract))
				OnHold = Contract.OnHold

		Taxable = Contract.DefaultTaxable

		if (TaxCode !entered)
			TaxCode = Contract.TaxCode

		if (TaxCode entered)
			Taxable = true

		if (TaxUsageCode entered)
			Taxable = true

		if  (Taxable)
			if (ApCpyVndTaxUsageCodeRel exists)
				TaxUsageCode = first ApCpyVndTaxUsageCodeRel.TaxUsageCode
			else
			if (VendorLocationRel.TaxUsageCode entered)
				TaxUsageCode = VendorLocationRel.TaxUsageCode
			else
			if (Contract.Vendor.TaxUsageCode entered)
				TaxUsageCode = Contract.Vendor.TaxUsageCode
			else
			if (Contract.Vendor.VendorClass.TaxUsageCode entered)
				TaxUsageCode = Contract.Vendor.VendorClass.TaxUsageCode

        if  (Contract.ActiveContract
        and (!ContractGroup.LeaveContractActive
        or  (ContractGroup.LeaveContractActive
        and (Contract.UseLineCommitments
        or   Contract.CapitatedContract
        or   Contract.ContractUsesMatrixApprovalsForAmendment))))
            invoke CreateAmendment Active Contract

		if (TransientAccount entered)

			constraint (!Contract.InMatrixApprovalProcess)
				"CannotEnterADefaultAccountWhenTheContractIsInTheMatrixApprovalProcess"

			if (TransientAccount.ToAccountingEntity !entered)
				if (ParticipantCount = 1
				and first ContractParticipantRels.AccountingUnit.ToAccountingEntity entered)
					TransientAccount.ToAccountingEntity = first ContractParticipantRels.AccountingUnit.ToAccountingEntity
			if (TransientAccount.ToAccountingEntity !entered)
				TransientAccount.ToAccountingEntity = Contract.DefaultAccount.ToAccountingEntity 
					
		if (TransientPrimaryDiscount entered)
			constraint (TransientPrimaryDiscount > 0%)
				"PrimaryDiscountCannotBeNegative"

		if (TransientRevisionDiscount entered)
			constraint (TransientRevisionDiscount > 0%)
				"RevisionDiscountCannotBeNegative"

	Create Exit Rules

		if (Contract.CapitatedComponentsOnly)
			invoke Create ContractCapitatedComponentGroupItem 
				invoked.ContractGroup					= ContractGroup 
				invoked.Contract            			= Contract 
				invoked.ComponentContractLine 			= ContractLine
				invoked.ContractCapitatedComponentGroup	= first ContractCapitatedComponentGroupOnlyRel.ContractCapitatedComponentGroup 
				invoked.PrimaryDiscount                 = TransientPrimaryDiscount
				invoked.RevisionDiscount                = TransientRevisionDiscount 
				invoked.PrimaryFinalCost                = TransientPrimaryFinalCost
				invoked.RevisionFinalCost               = TransientRevisionFinalCost	
					CanUseForCostDefaulting = true

		if (TierQualifierContractRel exists)
			for each TierQualifierContractRel
				invoke Create TierQualifierItem 
					invoked.ContractGroup									= ContractGroup 
					invoked.Contract                    					= each.Contract 
					invoked.OriginalContractAndLine.OriginalContract		= Contract
					invoked.OriginalContractAndLine.OriginalContractLine	= ContractLine
					invoked.ItemNumber                                      = ItemNumber
					invoked.Manufacturer                                    = Manufacturer 
					invoked.ManufacturerNumber								= ManufacturerNumber
					invoked.QualifiedOrCompetitiveItem                      = each.QualifiedOrCompetitiveContract 
		
		if (!ContractPricingExists)
			if (ItemNumber.Consignment)
				ConsignmentCurrentNetCost = BaseCost
			else
				CurrentNetCost   = BaseCost
			BeginningNetCost = BaseCost
		if  (ContractPricingExists)
			if (ItemNumber.Consignment)
				ConsignmentCurrentNetCost = DerivedBeginningNetCost
			else
				CurrentNetCost   		  = DerivedBeginningNetCost
			BeginningNetCost = DerivedBeginningNetCost
			BasePercent      = DerivedBasePercent
			CurrentPercent   = DerivedBasePercent
		if (ItemNumberExists
		and ItemNumber.DefaultBuyUOM != UOM.UnitOfMeasure)
			DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
		else
			if (CurrentNetCost entered)
				DefaultBuyUnitCost = CurrentNetCost * 100000
			else
				DefaultBuyUnitCost = ConsignmentCurrentNetCost * 100000
		
		if  (Contract.NotContractTemplate
		and  !CreateFromCopy
		and (CanUseForCostDefaulting
		or   CanUseForInvoicePayment
		or   CreateDistributorContractLine))
			if ((Contract.ContractSource.Manual
			or   Contract.ContractSource.Interview
			or   Contract.ContractSource.Copy
			or   Contract.ContractSource.Template)
			and (!IsDistributorContract)
			and (!FromImport))
				include FrontEndCreateOrUpdateHardLineEdits
				include BackOfficeDependentHardLineEdits
				IncludeDistributionEdits = true
				include ManageErrorChecking
			else
				LocalCreateAction = true
				IncludeAllErrorEdits = true
				include ManageErrorChecking

		if (!CreateFromCopy)
			if (Contract.UseHeaderCommitments)
				invoke CreateForHeaderCommitments ContractLineDistribution
					fill in fields from ContractLine
					invoked.DistributionAccount			= Contract.CommitmentAccount
					invoked.Percent						= 1

			if (!DistributionExists)
				if (TransientAccount entered)
					invoke CreateFromDistCodeOrDefaultAccount ContractLineDistribution set
						fill in fields from ContractLine
						invoked.DistributionAccount = TransientAccount
						invoked.Percent				= 1

			if (!DistributionExists)
				if (PayablesDistributionCode entered)
					for each PayablesDistributionCode.PayablesDistributionCodeDetail set
						invoke CreateFromDistCodeOrDefaultAccount ContractLineDistribution set
							fill in fields from ContractLine
							invoked.DistributionAccount			= each.DistributionAccount
							invoked.Percent						= each.DistributionPercent

			if (!DistributionExists)
				if  (Contract.DefaultAccount entered)
					invoke CreateFromDistCodeOrDefaultAccount ContractLineDistribution set
						fill in fields from ContractLine
						invoked.DistributionAccount			= Contract.DefaultAccount
						invoked.Percent						= 1

			if (Contract.StandingPurchaseType
			and !Contract.UseHeaderCommitments
			and ItemNumber.IssueAccount entered)
				if (!DistributionExists)
					invoke CreateFromDistCodeOrDefaultAccount ContractLineDistribution set
						fill in fields from ContractLine
						invoked.DistributionAccount.GeneralLedgerChartAccount	= ItemNumber.IssueAccount
						invoked.Percent											= 1
				else
					for each ContractLineDistributionRel
						invoke Update each
							invoked.DistributionAccount.GeneralLedgerChartAccount	= ItemNumber.IssueAccount

		if  (LifetimeMaximumAmount entered
		and (CanUseForCostDefaulting
		or   CanUseForInvoicePayment))
			increment Contract.TotalLineMaximumAmount by LifetimeMaximumAmount
			invoke CalculateTotalLineMaximumAmount Contract

		if (!IsValidRetainageCostOption)
			Retainage = false
			initialize RetainagePercent1
			initialize RetainageUpToPercent
			initialize RetainagePercent2
			initialize RetainageOverridePercent

		include BuildTextIndexes

		if (ItemNumberExists)
			invoke ContractCostChanged ItemmastRel

		if (StandardCommentCode entered)
			include CreateCommentFromCommentCode

		if (ItemType.Special)
			invoke CheckForSuggestedItems

		if (!Contract.IsDistributorContract)
			invoke Update RebateQualifierContractsRel
				invoked.NumberOfEligibleItemsToSelect	+= 1
		else
			if (DistributorContractLineNonManufacturerContract)
				invoke Update RebateQualifierContractsRel
					invoked.NumberOfEligibleItemsToSelect	+= 1

		if (IsDistributorContract)
			if (!Contract.ActiveContract
			or   FromNewImportLine
			or   FromCreateDistributorLines)
				if (PricingMemberReleasedRel exists)
					for each PricingMemberReleasedRel
						if (each.ContractDistributorPricingMember.ManufacturerContract = ManufacturerContract)
							invoke Update each
								invoked.Released            = false
		else
			if (IsManufacturerContract)
				if (!Contract.ActiveContract
				or   FromNewImportLine
				or   FromCreateDistributorLines)
					if (TierMemberReleasedRel exists)
						for each TierMemberReleasedRel
							invoke UpdateContractTierMember each
								invoked.Released	       = false
				if (!ContractLinePivotRel exists
				and !Contract.ContractTemplate
				and !Contract.MultiTierDistributorContract)
					invoke Create MfgContractLinePivot
						invoked.ContractGroup				= ContractGroup
						invoked.ManufacturerContractPivot	= Contract
						invoked.MfgContractLinePivot		= ContractLine

		if (Contract.ActiveContract
		and !FromNewImportLine
		and !FromCreateDistributorLines)
			if  (IsDistributorContract
			or   IsManufacturerContract)

                if (IsManufacturerContract)
                    constraint (Contract.NumberOfTierMembers < 501)
                        "CannotAddLine;CannotCreateLineMembersBecauseMoreThan500TierMembersExistAndOnly500CanBeProcessed"

				invoke BatchReleaseMembersArray
					invoked.PrmContractGroup				= ContractGroup
					invoked.PrmContract						= Contract
					invoked.PrmContractLine                 = ContractLine
					if (IsDistributorContract)
						invoked.PrmManufacturerContract     = ManufacturerContract

		if  (Contract.ActiveContract
		and  ContractGroup.LeaveContractActive
		and  !Contract.UseLineCommitments
		and  !Contract.CapitatedContract)
			invoke ActivateContractLine

		if (Contract.ExpirationDate entered
		and IsDistributorContract
		and ManufacturerContract = Contract
		and ExpirationDate !entered)
			ExpirationDate = Contract.ExpirationDate

		if (Contract.EffectiveDate entered
		and IsDistributorContract
		and ManufacturerContract = Contract
		and EffectiveDate !entered)
			EffectiveDate = Contract.EffectiveDate

		if (Contract.EnableClinicalSystemUseLocations
		and !ContractGroup.DoNotAutoSetToClinical
		and SpecialItem)
			ClinicalSystemUse = true
		
		CreateDate = current corporate date
		
		if   (Contract.ProcurementTemplatesExist
		and   Contract.IsValidForProcurementTemplate
		and   CanUseForCostDefaulting
		and  !ErrorsExist)

			for each Contract.ProcurementTemplateRel
				if (each.AutoUpdateFromContract = true)
					invoke Create ProcurementTemplateLine
						invoked.Contract            	= Contract
						invoked.ContractLine        	= ContractLine
						invoked.ProcurementGroup        = ContractGroup
						invoked.ProcurementTemplate 	= each.ProcurementTemplate
						if (ServiceItemType)
							invoked.ServiceDescription  = ItemDescription
							invoked.CommodityCode       = CommodityCode
							invoked.ServiceCode         = ServiceCode
						if (SpecialItem)
							invoked.SpecialItemDescription = ItemDescription

		if (UsageIdentifier.Drugs)
			Drugs = true
		else
		if (UsageIdentifier.Instrument)
			Instrument = true
		else
		if (UsageIdentifier.Reusable)
			Reusable = true
		else
		if (UsageIdentifier.Pharmacy)
			Pharmaceutical = true
		else
		if (UsageIdentifier.Implant)
			Implantable = true
		else
		if (UsageIdentifier.Analytics)
			Analytics = true 			
		else
		if (UsageIdentifier.Narcotic)
			Narcotic = true 
		else
		if (UsageIdentifier.Dressing) 
			Dressing = true 							

		if (ItemNumberExists)
			invoke UpdateFromItem 

		LocalCreateAction = true
		
		if (!FromCreateDistributorLines)
			include UpdateOtherLinesToMatch 
	
		include ConsolidatedItemMasterRules

	Delete Rules
		include IDM.DeleteRules
			replace AttachmentField with Picture

	Commit Rules
		include IDM.CommitRules
			replace AttachmentField with Picture

	Action Exit Rules 
		
		if (ItemType.Itemmast
		and ItemNumber.StockUOM != UOM.UnitOfMeasure
		and LowUOMCodeGTIN !entered 
		and LowUOMCodeGTINForItemRel exists)
			LowUOMCodeGTIN = first LowUOMCodeGTINForItemRel.ItemGTIN 

	Actions
		PopulateBlankItem is a Set Action
			restricted
			Parameters
				PrmContractGroup		is a ContractGroup
			Instance Selection
				where (ContractGroup = PrmContractGroup
				and	  (ItemType.Service or ItemType.Special)
				and	   ItemNumber not entered)
			Action Rules
				Instance Rules
					if (VendorItem entered)
						ItemNumber = VendorItem
					else
						ItemNumber = ItemDescription

		UpdateUOMConversion is a Set Action 
			restricted 

			Instance Selection 
				where (ItemType.Itemmast
				and    LineNotClosed)

			Action Rules 

				Instance Rules 

					UOMConversion = DerivedUOMConversion 
		
		SetUsageIdentifierBooleans is a Set Action 
			restricted 
			Instance Selection 
				where (!ContractLineState.Closed
				and     UsageIdentifier entered)

			Action Rules 

				Instance Rules 

					if (UsageIdentifier.Drugs)
						Drugs = true
					else
					if (UsageIdentifier.Instrument)
						Instrument = true
					else
					if (UsageIdentifier.Reusable)
						Reusable = true
					else
					if (UsageIdentifier.Pharmacy)
						Pharmaceutical = true
					else
					if (UsageIdentifier.Implant)
						Implantable = true
					else
					if (UsageIdentifier.Analytics)
						Analytics = true 			
					else
					if (UsageIdentifier.Narcotic)
						Narcotic = true 
					else
					if (UsageIdentifier.Dressing) 
						Dressing = true 									
		
		SetPreferredLine is a Set Action   
			restricted
			Instance Selection
				where 	(Contract.PreferredContract = true
				and 	!ContractLineState.Closed
				and 	!ItemType.Service)

			Action Rules
				Instance Rules
					PreferredLine = true
					if (ItemNumberExists
					and UseForCostDefaulting)
						invoke Update ItemKeywordShadowRel
							invoked.HasPreferredContract = true
					if (!ItemNumberExists)
						invoke Update KeywordShadowRel
							invoked.ItemHasContract = true
					for each ContractPreferredManufacturerRel
						invoke FastUpdate each
							invoked.Vendor = Contract.Vendor

		MaintainSupplierAndVendor is a Set Action 
			restricted 
			Parameters 
				ParmContractGroup	is a ContractGroup 
				ParmContract        is a Contract 

			Instance Selection 
				where (ParmContractGroup = ContractGroup
				and    ParmContract      = Contract)

			Action Rules 

				Instance Rules 
					Vendor		= Contract.Vendor 
					Supplier    = Contract.Supplier
					if (VendorBackorderByContractLineRel exists)
						invoke FastUpdate VendorBackorderByContractLineRel
							invoked.Vendor                  = Vendor
		
		Create is a Create Action
			valid when (CanCreate)
			Action Rules

				BypassActiveCodeBlockEdit = true

		CreateWithTierCosts is a Create Action
			valid when (IsManufacturerWithFixedTierAndCanCreate)

			Action Rules
				include CreateTierCostRules

			Exit Rules
				include CreateTierCostExitRules

		CreateFromWizard is a Create Action  
			default label is "CreateLine"
			valid when (CanCreate)

		CreateFromProposal is a Create Action 
			default label is "CreateLine"
			valid when (Contract.CanUpdateProposedContract)

			Action Rules 
				FromImport = true	
 				if (TransientProposalLine.Service)
                    ItemType = ItemType.Service

		UpdateFromProposal is an Update Action 
			default label is "UpdateLine"
			valid when (Contract.CanUpdateProposedContract)

			Action Rules 

				if  (TransientAccount.Project entered)

					if (Contract.EffectiveDate entered
					or   EffectiveDate entered)

						if (TransientAccount.Project.HasPeriodOfPerformance)
							LocalPeriodOfPerformanceProject	= TransientAccount.Project
							LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
							LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate

						if (!LocalDateRange entered)
							LocalDateRange.Begin			= TransientAccount.Project.ProjectDateRange.BeginDate
							LocalDateRange.End				= TransientAccount.Project.ProjectDateRange.EndDate
						if (EffectiveDate entered)
							TransientExchangeDate	= EffectiveDate
							LocalPostingDate		= EffectiveDate
						else
							TransientExchangeDate	= Contract.EffectiveDate
							LocalPostingDate		= Contract.EffectiveDate
						if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectDateEdit.TransactionDate)
							constraint (TransientExchangeDate within LocalDateRange)
								"FromContractLineTransactionDate<TransientExchangeDate>IsOutsideOf<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectLabel>_<TransientAccount.Project>DateRange"	
						if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)				
							constraint (LocalPostingDate within LocalDateRange)
								"FromContractLinePostingDate<LocalPostingDate>IsOutsideOf<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectLabel>_<TransientAccount.Project>DateRange"					

				include UpdateRules
			Exit Rules 

				if (!DistributionExists)
					if (TransientAccount entered)
						invoke CreateFromDistCodeOrDefaultAccount ContractLineDistribution set
							fill in fields from ContractLine
							invoked.DistributionAccount = TransientAccount
							invoked.Percent             = 1		

				include UpdateExitRules 	
 
        CreateConsolidatedItemMasterSet is a Set Action 
            restricted
            Parameters
                PrmContractGroup   is a ContractGroup 

            Instance Selection 
                where (PrmContractGroup        = ContractGroup
				and    Manufacturer entered 
				and    ManufacturerNumber entered
				and    LineNotClosed
				and    HasBeenActivated
				and   !OnHold
				and   !ErrorsExist
				and    ManufacturerContract = Contract
				and   (Contract.NonServicePurchaseType
				or     IsManufacturerContract))				
				
            Action Rules 

                Instance Rules 

					if (ItemType.Special)
						if (!ConsolidatedItemMasterRel exists)
							invoke Create ConsolidatedItemMaster 
								invoked.ContractGroup			= ContractGroup
								invoked.InternalItem        	= ItemNumber 
								invoked.Manufacturer        	= Manufacturer 
								invoked.ManufacturerNumber  	= ManufacturerNumber 
								invoked.TransientContract    	= Contract 
								invoked.TransientContractLine	= ContractLine

						else 
						if (ConsolidatedItemMasterRel exists)
							invoke Update first ConsolidatedItemMasterRel 
								invoked.TransientContract       	= Contract 
								invoked.TransientContractLine   	= ContractLine
								invoked.TransientFromCreateAction	= true		
					if (ItemType.Itemmast
					and ItemNumber.ClinicalSystemUse
					and ClinicalLocationExists)					
						if (!ConsolidatedItemMasterByItemRel exists)
							invoke Create ConsolidatedItemMaster 
								invoked.ContractGroup			= ContractGroup
								invoked.InternalItem        	= ItemNumber 
								invoked.Manufacturer        	= Manufacturer 
								invoked.ManufacturerNumber  	= ManufacturerNumber 
								invoked.TransientContract    	= Contract 
								invoked.TransientContractLine	= ContractLine

						else 
						if (ConsolidatedItemMasterByItemRel exists)
							invoke Update first ConsolidatedItemMasterRel 
								invoked.TransientContract       	= Contract 
								invoked.TransientContractLine   	= ContractLine
								invoked.TransientFromCreateAction	= true											

		UpdateManufacturerInformation is an Instance Action 
			valid when (CanUpdateOnlyThisManufacturerInformationForCurrent)
			Parameters 
				ParmManufacturer			is a Manufacturer 
					default label is "Manufacturer"
				ParmManufacturerNumber  	is a ManufacturerNumber 
					default label is "ManufacturerNumber"
				ParmUpdateAllLines      	is Boolean 
					default label is "UpdateAllRelatedLines"
				ParmDoNotUpdateConsolidated	is Boolean

			Parameter Rules 
				ParmManufacturer
					initial value is Manufacturer 
					default to Manufacturer
					required 
				
				ParmManufacturerNumber 
					initial value is ManufacturerNumber 
					default to ManufacturerNumber 
					required 

				ParmUpdateAllLines 
					initial value is true 

			Local Fields 
				ManufacturerChanged is Boolean 
			

			Action Rules 

				if (Contract.ManufacturerOrDistributor.ManufacturerContract
				and !DistributorContractLineRel exists
				and ParmManufacturerNumber != ManufacturerNumber)
					for each RebateQualifierItemsRel
						invoke DeleteWithNoQualifierChangeFlagSet each
						invoke Create ContractRebateQualifierItem
							invoked.ContractGroup									= ContractGroup
							invoked.Contract										= Contract
							invoked.ContractRebateType								= each.ContractRebateType
							invoked.ContractRebateQualifier							= each.ContractRebateQualifier
							invoked.ContractRebateQualifierItem.RebateContract		= Contract
							invoked.ContractRebateQualifierItem.RebateContractLine	= ContractLine
							invoked.ItemNumber										= ParmManufacturerNumber
				LocalManufacturer   	= Manufacturer 
				LocalManufacturerNumber	= ManufacturerNumber 
				Manufacturer 			= ParmManufacturer 
				ManufacturerNumber		= ParmManufacturerNumber
				include DefaultItemNumbers
				
				invoke CheckForSuggestedItems

				if (ContractLineImportByManufacturerDirect)	
					for each ContractLineImportDirectRel
						invoke FastUpdateWithoutEdits each
							invoked.UpdateManufacturerInformation 	= true
							invoked.NewManufacturer                 = Manufacturer
							invoked.NewManufacturerNumber           = ManufacturerNumber	
				else
				if (ContractLineImportByManufacturer)
					for each ContractLineImportByManufacturerGPORel
						invoke FastUpdateWithoutEdits each
							invoked.UpdateManufacturerInformation 	= true
							invoked.NewManufacturer                 = Manufacturer
							invoked.NewManufacturerNumber           = ManufacturerNumber 

				for each ProcurementTemplateLineRel
					invoke Update each
						invoked.SpecialItem 		   = true
						invoked.SpecialItemDescription = ItemDescription
						invoked.Manufacturer           = Manufacturer 
						invoked.ManufacturerNumber     = ManufacturerNumber

			Exit Rules 
				
				if (ParmUpdateAllLines)
					if (SameOldManufacturerInfoRel exists)
				 		for each SameOldManufacturerInfoRel 
				 			invoke UpdateManufacturerInformation each
								invoked.ParmManufacturer 			= ParmManufacturer
								invoked.ParmManufacturerNumber      = ParmManufacturerNumber
								invoked.ParmUpdateAllLines          = false 
								invoked.ParmDoNotUpdateConsolidated = true 
				else
				if (DistributorContractLineLinkRelExists)
				 	for each DistributorContractLineLinkRel 
				 		if (each.LineNotClosed)
				 			invoke UpdateManufacturerInformation each
								invoked.ParmManufacturer 			= ParmManufacturer
								invoked.ParmManufacturerNumber      = ParmManufacturerNumber
								invoked.ParmUpdateAllLines          = false 
								invoked.ParmDoNotUpdateConsolidated = true 

				if (CanUseForConsolidated
				or  ConsolidatedItemMasterExists
				or  ConsolidatedItemMasterByItemExists)
					if (ParmDoNotUpdateConsolidated = false)
						if (!ParmUpdateAllLines)
							LocalUpdateSingleManufacturer = true 
						include ConsolidatedItemMasterRules 

		CreateLineLocation is an Instance Action 
			valid when (CanCreateLineLocation) 

			Action Rules 

				LocalCopyContractLine   = ContractLine 
				LocalContract           = Contract 
				LocalCompany			= ContextContractAndLineLocation.Company 
				LocalLocation       	= ContextContractAndLineLocation.Location  
				LocalRequestingLocation	= ContextContractAndLineLocation.RequestingLocation
				if (ContractLocalLineLocationRel !exists)
					invoke Create ContractAndLineLocation 
						invoked.ContractGroup								= ContractGroup 
						invoked.Contract                					= Contract 
						invoked.ContractLine            					= ContractLine 
						invoked.ContractAndLineLocation.Company				= ContextContractAndLineLocation.Company 
						invoked.ContractAndLineLocation.Location			= ContextContractAndLineLocation.Location  
						invoked.ContractAndLineLocation.RequestingLocation	= ContextContractAndLineLocation.RequestingLocation  


		LoadAttributesFromItem is a Set Action    
			restricted 
			Parameters 
				ParmContractGroup	is a ContractGroup 

			Instance Selection 
				where (ParmContractGroup = ContractGroup
				and    ItemType.Itemmast
				and    LineNotClosed)

			Action Rules 
				Instance Rules 
					invoke UpdateFromItem

        BackorderSpecialItem is an Instance Action
            valid when (CanBackorderSpecialItem)
			Parameters
				PrmBackorderType				is Numeric size 1
					States
						VendorBackorder			value is 1
						ManufacturerBackorder	value is 2
        		PrmStartDate	                is Date
				PrmEstimatedAvailabilityDate	is Date
			Entrance Rules
			Action Rules
				invoke CreateSpecialItemBackorder VendorBackorderDetails
					fill in fields from this instance
					invoked.ProcurementGroup					= ContractGroup
					invoked.Vendor								= Vendor
					invoked.BackorderType						= PrmBackorderType
					invoked.StartDate							= PrmStartDate
					invoked.EstimatedAvailabilityDate			= PrmEstimatedAvailabilityDate
					invoked.Item								= ItemNumber

        UpdateAttributes is an Instance Action 
            restricted 
            Parameters 
                ParmCommodityCode               is a CommodityCode
                ParmDescription                 is a Description
                ParmDescription2                is a Description
                ParmDescription3                is a Description3        
                ParmUOM                         is a UnitOfMeasure  
                ParmUOMConversion               is a UOMConversion
                ParmGlobalTradeItemNumber       is like ItemGTIN
                ParmLowUOMCodeGTIN              is like ItemGTIN
                ParmUpc                         is like ItemUPC
                ParmHibccUpn                    is like HIBCCItemUPN
                ParmLowUOMCodeHibccUPN          is like HIBCCItemUPN
                ParmUccEanUpn                   is like UCCEANItemUPN
                ParmNdcNbr                      is like NationalDrugCode
                ParmUNSPSCCode                  is a UNSPSCCode             
                ParmChargeNumber                is a ChargeNumber 
                ParmLatex                       is Numeric 1
                    States
                        Unspecified                     value is 0
                        PackageIndicatesLatex           value is 1
                        LatexFree                       value is 2
                        NotApplicable                   value is 3
                ParmHCPCSCode                   is a HCPCSCode 
                ParmRemoveHCPCS                 is Boolean 
				ParmGMDNPTCode                  is a GMDNPTCode 
                ParmHazardCode                  is a HazardCode
                ParmLabelerIdentificationCode   is a LabelerIdentificationCode
                ParmSterile                     is Numeric 1
                ParmSingleUse                   is Numeric 1
                ParmReusable                    is Numeric 1
                ParmReprocessed                 is Numeric 1
                ParmImplantable                 is Numeric 1
                ParmContainsHumanTissue         is Numeric 1
                ParmPharmaceutical              is Numeric 1
                ParmDressing                    is Numeric 1
                ParmBioabsorbable               is Numeric 1

            Action Rules
				if (ParmCommodityCode entered)
                    CommodityCode                   = ParmCommodityCode
                if (ParmDescription entered)
                    ItemDescription                 = ParmDescription
                if (ParmDescription2 entered)
                    ItemDescription2                = ParmDescription2
                if (ParmDescription3 entered)
                    ItemDescription3                = ParmDescription3
                if (ParmUOM entered)
                    LowUOMCode.UnitOfMeasure        = ParmUOM                          
                if (ParmUOMConversion entered)
                    UOMConversion                   = ParmUOMConversion
                if (ParmGlobalTradeItemNumber entered)
                    GlobalTradeItemNumber           = ParmGlobalTradeItemNumber
                if (ParmLowUOMCodeGTIN entered) 
                    LowUOMCodeGTIN                  = ParmLowUOMCodeGTIN
                if (ParmUpc entered)
                    Upc                             = ParmUpc   
                if (ParmHibccUpn entered)
                    HibccUpn                        = ParmHibccUpn          
                if (ParmLowUOMCodeHibccUPN entered)
                    LowUOMCodeHibccUPN              = ParmLowUOMCodeHibccUPN   
                if (ParmUccEanUpn entered)
                    UccEanUpn                       = ParmUccEanUpn         
                if (ParmNdcNbr entered)
                    NdcNbr                          = ParmNdcNbr                    
                if (ParmUNSPSCCode entered)
                    UNSPSCCode                      = ParmUNSPSCCode                
                if (ParmChargeNumber entered)
                    ChargeNumber                    = ParmChargeNumber
                if (ParmLatex > 0)
                    Latex                           = ParmLatex         
                if (ParmHCPCSCode entered)
                    HCPCSCode                   = ParmHCPCSCode
                else 
                if (ParmRemoveHCPCS)
                    HCPCSCode                   = blank
                if (ParmGMDNPTCode entered)
                    GMDNPTCode                      = ParmGMDNPTCode
                if (ParmHazardCode entered)
                    HazardCode                      = ParmHazardCode
                if (ParmLabelerIdentificationCode entered)
                    LabelerIdentificationCode       = ParmLabelerIdentificationCode
                if (ParmSterile = 1)   
                    Sterile = true
                else 
                if (ParmSterile = 2)
                    Sterile = false                     
                if (ParmSingleUse = 1)   
                    SingleUse = true
                else 
                if (ParmSingleUse = 2)
                    SingleUse = false           
                if (ParmReusable = 1)   
                    Reusable = true
                else 
                if (ParmReusable = 2)
                    Reusable = false                                        
                if (ParmReprocessed = 1)
                    Reprocessed = true 
                else
                if (ParmReprocessed = 2)
                    Reprocessed = false         

                if (ParmImplantable = 1)
                    Implantable = true 
                else
                if (ParmImplantable = 2)
                    Implantable = false     

                if (ParmContainsHumanTissue = 1)   
                    ContainsHumanTissue = true
                else 
                if (ParmContainsHumanTissue = 2)
                    ContainsHumanTissue = false                     
                if (ParmPharmaceutical = 1)   
                    Pharmaceutical = true
                else 
                if (ParmPharmaceutical = 2)
                    Pharmaceutical = false          
                if (ParmDressing = 1)   
                    Dressing = true
                else 
                if (ParmDressing = 2)
                    Dressing = false                                        
                if (ParmBioabsorbable = 1)
                    Bioabsorbable = true 
                else
                if (ParmBioabsorbable = 2)
                    Bioabsorbable = false         

                if (ParmGlobalTradeItemNumber entered
                or  ParmLowUOMCodeGTIN entered
                or  ParmUpc entered                         
                or  ParmHibccUpn entered                    
                or  ParmUccEanUpn entered                   
                or  ParmNdcNbr entered)
                    include CreateItemAndVendorItem 

                if (ItemNumberExists)
                    invoke UpdateFromItem 
				LocalFromUpdateAttributes = true 
				include UpdateOtherLinesToMatch
                IncludeAllErrorEdits = true
                include ManageErrorChecking 
                UpdateKeywordShadow = true
                include ManageKeywordShadow             

				include ConsolidatedItemMasterRules

		CreateDrawDown is an Instance Action
			valid when (CanCreateDrawDownOrUpdateAllowance)
			Parameters
				ParmChangeReason        is a Description
					default label is "ChangeReason"
				ParmDescription			is a Description3
					default label is "Description"
				ParmQuantity            is a Quantity
					default label is "ChangeQuantity"
				ParmBaseCost            is a ContractUnitCost
					default label is "ChangeAmount"
					precision is DerivedNumberOfDecimalsCost
				ParmForAllowance        is a ContractAllowance
					default label is "ForAllowance"
				ParmAllowanceAmount      is a ContractUnitCost
					precision is DerivedNumberOfDecimalsCost
					default label is "DrawDownFromAllowance"
				ParmAllowanceQuantity    is a Quantity
					precision is DerivedNumberOfDecimalsQuantity
					default label is "DrawDownQuantityFromAllowance"
				ParmAttachment           is an Attachment
					default label is "Document"

			Parameter Rules

				ParmDescription
					required

				ParmForAllowance
					required

			Action Rules

				LocalContractAllowance = ParmForAllowance
				constraint (ParmAllowanceAmount entered
				or          ParmAllowanceQuantity entered)
					"IfDoingADrawDown,MustEnterADrawDownAmountOrQuantity"

				if (ParmAllowanceAmount entered)
					constraint (ParmBaseCost entered)
						"MustEnterAnAmountToMoveToContractLineIfDoingADrawDownForAmount"
					constraint (ParmBaseCost !< 0)
						"MustEnterAPositiveAmountToMoveToContractLine"
					constraint (SingleContractAllowanceRel.Amount - ParmAllowanceAmount >= 0)
						"CannotDrawDownAllowanceAmountToLessThanZero"						
					
				if (ParmAllowanceQuantity entered)
					constraint (ParmQuantity entered)
						"MustEnterAQuantityToMoveToContractLineIfDoingADrawDownForQuantity"
					constraint (ParmQuantity !< 0)
						"MustEnterAPositiveQuantityToMoveToContractLineIfDoingADrawDown"
					constraint (SingleContractAllowanceRel.Quantity - ParmAllowanceQuantity !< 0)
						"CannotDrawDownAllowanceQuantityToLessThanZero"

				invoke Create ContractChangeOrder
					invoked.ContractGroup   	= ContractGroup
					invoked.Contract        	= Contract
					invoked.ContractVersion 	= Contract.CurrentVersionForChangeOrder
					invoked.ContractLine    	= ContractLine
					invoked.ChangeReason    	= ParmChangeReason
					invoked.Description     	= ParmDescription
					invoked.Quantity        	= ParmQuantity
					invoked.BaseCost        	= ParmBaseCost
					invoked.ForAllowance    	= ParmForAllowance
					invoked.AllowanceOptions	= 2
					invoked.AllowanceAmount     = ParmAllowanceAmount
					invoked.AllowanceQuantity   = ParmAllowanceQuantity
					invoked.Attachment.File     = ParmAttachment.File
					invoked.Attachment.MimeType = ParmAttachment.MimeType
					invoked.Attachment.Title    = ParmAttachment.Title

		CreateNewAllowanceForLine is an Instance Action
			valid when (CanCreateChangeOrderDetail)
			default label is "CreateNewAllowance"
			Parameters
				ParmChangeReason        is a Description
					default label is "ChangeReason"
				ParmDescription			is a Description3
					default label is "Description"
				ParmForAllowance         is a ContractAllowance
					default label is "Allowance"
				ParmAllowanceAmount      is a ContractUnitCost
					precision is DerivedNumberOfDecimalsCost
					default label is "AllowanceAmount"
				ParmAllowanceQuantity    is a Quantity
					precision is DerivedNumberOfDecimalsQuantity
					default label is "AllowanceQuantity"
				AllowancePercentOfMaxAmount is a Percent
				ParmAttachment           is an Attachment
					default label is "Document"
				ParmAllowanceDescription is a Description
					default label is "AllowanceDescription"

			Parameter Rules

				ParmDescription
					required
						"DescriptionIsRequired"

				ParmForAllowance
					required
						"AllowanceIsRequired"

				ParmAllowanceAmount
					if (AllowancePercentOfMaxAmount !entered)
						required
							"AllowanceAmountIsRequired"

			Action Rules

				LocalContractAllowance = ParmForAllowance
				constraint (SingleContractAllowanceRel !exists)
					"AllowanceAlreadyExistsForLine"

				if (ParmAllowanceAmount entered)
					constraint (AllowancePercentOfMaxAmount !entered)
						"CannotEnterBothAnAllowanceAmountAndAnAllowancePercent"

				if (QuantityServiceItem)
					constraint (ParmAllowanceQuantity > 0)
						"QuantityMustBeGreaterThanZeroIfCreatingNewLineAllowanceForQuantityService"

				invoke Create ContractChangeOrder
					invoked.ContractGroup   	= ContractGroup
					invoked.Contract        	= Contract
					invoked.ContractVersion 	= Contract.CurrentVersionForChangeOrder
					invoked.ContractLine    	= ContractLine
					invoked.ChangeReason    	= ParmChangeReason
					invoked.Description     	= ParmDescription
					invoked.ForAllowance    	= ParmForAllowance
					invoked.AllowanceOptions	= 3
					if (ParmAllowanceAmount entered)
						invoked.AllowanceAmount = ParmAllowanceAmount
					else
					if (AllowancePercentOfMaxAmount entered)
						invoked.AllowanceAmount = (AllowancePercentOfMaxAmount * LifetimeMaximumAmount)
					invoked.AllowanceQuantity   = ParmAllowanceQuantity
					invoked.Attachment.File     = ParmAttachment.File
					invoked.Attachment.MimeType = ParmAttachment.MimeType
					invoked.Attachment.Title    = ParmAttachment.Title
					invoked.AllowanceDescription = ParmAllowanceDescription

		UpdateAllowanceOnlyOnLine is an Instance Action
			valid when (CanCreateDrawDownOrUpdateAllowance) 
			default label is "UpdateAllowance"
			Parameters
				ParmChangeReason        is a Description
					default label is "ChangeReason"
				ParmDescription			is a Description3
					default label is "Description"
				ParmAllowanceAmount      is a ContractUnitCost
					precision is DerivedNumberOfDecimalsCost
					default label is "AllowanceAmount"
				ParmForAllowance         is a ContractAllowance
					default label is "ForAllowance"
				ParmAllowanceQuantity    is a Quantity
					precision is DerivedNumberOfDecimalsQuantity
					default label is "AllowanceQuantity"
				ParmAttachment           is an Attachment
					default label is "Document"

			Parameter Rules

				ParmDescription
					required

				ParmForAllowance
					required

			Action Rules

				LocalContractAllowance = ParmForAllowance
				constraint (SingleContractAllowanceRel exists)
					"CannotUpdate;AllowanceNotAssociatedWithLine"

				if (QuantityServiceItem)
					constraint (ParmAllowanceAmount   != 0
					or          ParmAllowanceQuantity != 0)
						"AmountOrQuantityMustBeEnteredToUpdateAllowance"

				if (!QuantityServiceItem)
					constraint (ParmAllowanceAmount != 0)
						"AmountMustBeEnteredToUpdateAllowance"

				constraint (SingleContractAllowanceRel.Amount + ParmAllowanceAmount !< 0)
					"CannotUpdateAllowanceAmountToLessThanZero"

				if (ParmAllowanceQuantity entered)
					constraint (SingleContractAllowanceRel.Quantity + ParmAllowanceQuantity !< 0)
						"CannotUpdateAllowanceQuantityToLessThanZero"

				invoke Create ContractChangeOrder
					invoked.ContractGroup   	= ContractGroup
					invoked.Contract        	= Contract
					invoked.ContractVersion 	= Contract.CurrentVersionForChangeOrder
					invoked.ContractLine    	= ContractLine
					invoked.ChangeReason    	= ParmChangeReason
					invoked.Description     	= ParmDescription
					invoked.ForAllowance    	= ParmForAllowance
					invoked.AllowanceOptions	= 1
					invoked.AllowanceAmount     = ParmAllowanceAmount
					invoked.AllowanceQuantity   = ParmAllowanceQuantity
					invoked.Attachment.File     = ParmAttachment.File
					invoked.Attachment.MimeType = ParmAttachment.MimeType
					invoked.Attachment.Title    = ParmAttachment.Title


		CreateCapitatedComponentForGroup is an Instance Action 
			valid when (Contract.CapitatedContract)
			Parameters 
				ParmContractLine                    is a ContractLine
					default label is "Procedure"
				ParmContractCapitatedComponentGroup is a ContractCapitatedComponentGroup 
					default label is "ComponentGroup"
				ParmPrimaryDiscount                 is Percent size 6.3
					default label is "DiscountForPrimaryCost"
				ParmRevisionDiscount                is Percent size 6.3
					default label is "DiscountForRevisionCost"
				ParmPrimaryFinalCost                is a ContractUnitCost
					default label is "PrimaryCost"
				ParmRevisionFinalCost               is a ContractUnitCost
					default label is "RevisionCost"
				ParmUseBaseCostForPrimary            is Boolean 
					default label is "UseContractLineBaseCostForPrimaryCost"

			Parameter Rules

				ParmPrimaryDiscount
					if (ParmPrimaryDiscount entered)
						constraint (ParmPrimaryDiscount > 0%)
							"NewDiscountForPrimaryCostCannotBeNegative"

				ParmRevisionDiscount
					if (ParmRevisionDiscount entered)
						constraint (ParmRevisionDiscount > 0%)
							"NewDiscountForRevisionCostCannotBeNegative"

			Action Rules 
				LocalProcedureLine 		= ParmContractLine 
				LocalComponentGroup     = ParmContractCapitatedComponentGroup 
				constraint (LocalContractCapitatedComponentGroupItemRel !exists)
					"ThisContractLineIsAlreadyAComponentForThisProcedureAndComponentGroup"

				if (LocalOtherContractCapitatedComponentGroupItemRel exists)
					confirmation required 
						"ThisContractLineIsAlreadyAComponentForAnotherComponentGroupForThisProcedure;DoYouWantToContinue?"
				invoke Create ContractCapitatedComponentGroupItem 
					invoked.ContractGroup					= ContractGroup 
					invoked.Contract                    	= Contract 
					invoked.ContractLine                	= ParmContractLine 
					invoked.ContractCapitatedComponentGroup	= ParmContractCapitatedComponentGroup
					invoked.ComponentContractLine           = ContractLine  
					invoked.PrimaryDiscount                 = ParmPrimaryDiscount                  
					invoked.RevisionDiscount                = ParmRevisionDiscount    
					invoked.PrimaryFinalCost                = ParmPrimaryFinalCost    
					invoked.RevisionFinalCost               = ParmRevisionFinalCost
					invoked.LocalUseBaseCostForPrimary      = ParmUseBaseCostForPrimary

		CreateCapitatedComponentForNonProcedureGroup is an Instance Action 
			valid when (CanCreateNonProcedureComponentItem)
			Parameters 
				ParmContractLine                    is a ContractLine
					default label is "Procedure"
				ParmContractCapitatedComponentGroup is a ContractCapitatedComponentGroup 
					default label is "ComponentGroup"
				ParmPrimaryDiscount                 is Percent size 6.3
					default label is "DiscountForPrimaryCost"
				ParmRevisionDiscount                is Percent size 6.3
					default label is "DiscountForRevisionCost"
				ParmPrimaryFinalCost                is a ContractUnitCost
					default label is "PrimaryCost"
				ParmRevisionFinalCost               is a ContractUnitCost
					default label is "RevisionCost"
				ParmUseBaseCostForPrimary            is Boolean 
					default label is "UseContractLineBaseCostForPrimaryCost"

			Parameter Rules 
				ParmContractCapitatedComponentGroup 
					initial value is first ContractCapitatedComponentGroupOnlyMixedRel.ContractCapitatedComponentGroup 
					default to first ContractCapitatedComponentGroupOnlyMixedRel.ContractCapitatedComponentGroup 
			
			Action Rules 
				invoke Create ContractCapitatedComponentGroupItem 
					invoked.ContractGroup					= ContractGroup 
					invoked.Contract                    	= Contract 
					invoked.ContractCapitatedComponentGroup	= ParmContractCapitatedComponentGroup
					invoked.ComponentContractLine           = ContractLine  
					invoked.PrimaryDiscount                 = ParmPrimaryDiscount                  
					invoked.RevisionDiscount                = ParmRevisionDiscount    
					invoked.PrimaryFinalCost                = ParmPrimaryFinalCost    
					invoked.RevisionFinalCost               = ParmRevisionFinalCost
					invoked.LocalUseBaseCostForPrimary      = ParmUseBaseCostForPrimary

		AddToRequisition is an Instance Action
			valid when (IsASupplierOrCapitatedRequisition)
			Parameters
				PrmCompany						is an InventoryCompany
					default label is "Company"
				PrmRequisition					is a Requisition
					default label is "Requisition"			
				PrmQuantity                     is a Quantity
					default label is "Quantity" 
				PrmPrimary                      is Boolean 
					default label is "Primary"
				PrmRevision                     is Boolean
					default label is "Revision"
				PrmLot                          is like ItemLot
					default label is "Lot"
				PrmSerialNumber                 is like ItemSerialNumber	
					default label is "SerialNumber"
				PrmGTIN 						is like ItemGTIN
					default label is "GTIN"
				PrmManufacturingDate			is Date
					default label is "ManufacturingDate"
				PrmExpirationDate 				is Date
					default label is "ExpirationDate"
				PrmBillCode                     is a BillCode 	
					default label is "BillCode"
			Parameter Rules
				PrmCompany 
					initial value is RequisitionCompanyContext 
				PrmRequisition
					initial value is RequisitionContext  

				PrmPrimary 
					if (PrmPrimary)
						constraint (!PrmRevision)
							"CannotSelectBothPrimaryAndRevision"

				PrmRevision 
					if (PrmRevision)
						constraint (!PrmPrimary)
							"CannotSelectBothPrimaryAndRevision"
			
			Action Rules

				if (HasChargeableComponentItem)
					if (PrmRequisition.ComponentsNeedProcedureLevel)
						constraint (PrmPrimary = true
						or          PrmRevision = true)
							"MustSelectEitherPrimaryOrRevisionPricing"
				if (HasParticipants)
					include ParticipantValidation
					constraint (LocalParticipantIsValid)
						"CannotCreateRequisitionLineForComponent;ParticipantsExistAndDoNotIncludeThisCompanyOrLocations"	
				if (PrmQuantity = 0)
					PrmQuantity = 1
				invoke SupplierCreate RequisitionLine 
					fill in fields from this instance
						except invoked.ItemType
						except invoked.CostOption 
					if (ItemType = 2)
						invoked.ItemType          		= "S"
					else
					if (ItemType = 3)
						invoked.ItemType 	      	  = "X"
					invoked.Contract        	    	= Contract 
					invoked.ContractLine        		= ContractLine 
					invoked.CreatePurchaseOrder  		= true
					invoked.Company              		= PrmCompany 
					invoked.Requisition          		= PrmRequisition 
					invoked.Quantity             		= PrmQuantity 
					invoked.Item                 		= ItemNumber	
					invoked.VendorItem                  = VendorItem 
					invoked.EnteredUOM           		= UOM
					invoked.Description          		= ItemDescription 
				   	invoked.TransientLot                = PrmLot
					invoked.TransientSerialNumber       = PrmSerialNumber            	
					invoked.TransientGTIN 				= PrmGTIN			 
					invoked.TransientManufacturingDate	= PrmManufacturingDate			 
					invoked.TransientExpirationDate 	= PrmExpirationDate	
					invoked.ConsignCode                 = PrmBillCode 		 
					if (PrmRequisition.ForCapitatedProcedure)
						if (PrmPrimary = true)
							invoked.TransientPrimaryOrRevision  = 1
						else 
						if (PrmRevision = true)
							invoked.TransientPrimaryOrRevision  = 2
						if (HasChargeableComponentItem)
							invoked.CapitatedComponentGroup 		= first ContractCapitatedComponentGroupOnlyRel.ContractCapitatedComponentGroup 

		AddWasteItemToRequisition is an Instance Action
			valid when (IsASupplierOrCapitatedRequisition)
			Parameters
				PrmCompany						is an InventoryCompany
					default label is "Company"
				PrmRequisition					is a Requisition
					default label is "Requisition"			
				PrmQuantity                     is a Quantity
					default label is "Quantity" 
				PrmWasteNoCharge                is Boolean
					default label is "NoCharge"
				PrmPrimary                      is Boolean 
					default label is "Primary"
				PrmRevision                     is Boolean
					default label is "Revision"
				PrmLot                          is like ItemLot
				PrmSerialNumber                 is like ItemSerialNumber	
				PrmGTIN 						is like ItemGTIN
				PrmManufacturingDate			is Date
				PrmExpirationDate 				is Date
				PrmBillCode                     is a BillCode 	
			Parameter Rules 
				PrmCompany 
					initial value is RequisitionCompanyContext 
				PrmRequisition
					initial value is RequisitionContext  
				PrmQuantity 
					initial value is 1

			Action Rules
				if (!PrmWasteNoCharge
				and	HasChargeableComponentItem)
					if (NoProcedureOnReq
					or  MixedProcedureLevels)
						constraint (PrmPrimary = true
						or          PrmRevision = true)
							"MustSelectEitherPrimaryOrRevisionPricing"
				if (HasParticipants)
					include ParticipantValidation
					constraint (LocalParticipantIsValid)
						"CannotCreateRequisitionLineForWasteItem;ParticipantsExistAndDoNotIncludeThisCompanyOrLocation"	
				if (PrmQuantity !entered)
					PrmQuantity = 1
				invoke SupplierCreate RequisitionLine 
					fill in fields from this instance
						except invoked.ItemType
						except invoked.CostOption 
					if (ItemType = 2)
						invoked.ItemType          			= "S"
					else
					if (ItemType = 3)
						invoked.ItemType 	    		    = "X"
					invoked.Contract        	    		= Contract 
					invoked.ContractLine        			= ContractLine 
					invoked.CreatePurchaseOrder  			= true
					invoked.Company              			= PrmCompany 
					invoked.Requisition          			= PrmRequisition 
					invoked.Quantity             			= PrmQuantity 
					invoked.Item                 			= ItemNumber	
					invoked.EnteredUOM           			= UOM
					invoked.Description          			= ItemDescription
					invoked.TransientLot                	= PrmLot
					invoked.TransientSerialNumber       	= PrmSerialNumber            	
					invoked.TransientGTIN 					= PrmGTIN			 
					invoked.TransientManufacturingDate		= PrmManufacturingDate			 
					invoked.TransientExpirationDate 		= PrmExpirationDate	
					invoked.ConsignCode             		= "WO"
					if (PrmWasteNoCharge)
						invoked.TransientNoChargeFromSupplier = true 
					if (PrmPrimary = true)
						invoked.TransientPrimaryOrRevision  = 1
					else 
					if (PrmRevision = true)
						invoked.TransientPrimaryOrRevision  = 2
					if (HasChargeableComponentItem)
						invoked.CapitatedComponentGroup 		= first ContractCapitatedComponentGroupOnlyRel.ContractCapitatedComponentGroup 

		AddProcedureToRequisition is an Instance Action
			valid when (IsASupplierOrCapitatedRequisition)
			Parameters
				PrmCompany						is an InventoryCompany
					default label is "Company"
				PrmRequisition					is a Requisition
					default label is "Requisition"			
				PrmQuantity                     is a Quantity
					default label is "Quantity" 
				PrmPrimaryProcedureLevel        is Boolean
					default label is "Primary"
				PrmRevisionProcedureLevel       is Boolean 
					default label is "Revision"
				PrmNoChargeProcedure            is Boolean 
					default label is "AddProcedureAtNoCharge;RequisitionForNoChargeComponentsOnly"

			Parameter Rules
				PrmCompany 
					initial value is RequisitionCompanyContext 
				PrmRequisition 
					initial value is RequisitionContext

			Action Rules 
				if (HasParticipants)
					include ParticipantValidation
					constraint (LocalParticipantIsValid)
						"CannotCreateRequisitionLineForComponent;ParticipantsExistAndDoNotIncludeThisCompanyOrLocations"
				if (PrmQuantity !entered)
					PrmQuantity = 1
				if (CapitatedProcedure = 2)
					PrmPrimaryProcedureLevel = true 
				if (CapitatedProcedure = 3)
					PrmRevisionProcedureLevel = true
				if (PrmPrimaryProcedureLevel = false)
					constraint (PrmRevisionProcedureLevel = true)
						"MustSelectAProcedureLevel"
				if (PrmPrimaryProcedureLevel = true)
					constraint (PrmRevisionProcedureLevel = false)
						"CanOnlySelectOneOfPrimaryAndRevision"
				if (PrmRevisionProcedureLevel = true)
					constraint (PrmPrimaryProcedureLevel = false)
						"CanOnlySelectOneOfPrimaryAndRevision"
			
				invoke SupplierCreate RequisitionLine 
					fill in fields from this instance
						except invoked.ItemType
						except invoked.CostOption 
					if (ItemType = 2)
						invoked.ItemType          		= "S"
					else
					if (ItemType = 3)
						invoked.ItemType 	    	    = "X"
					invoked.Contract        	    	= Contract 
					invoked.ContractLine        		= ContractLine 
					invoked.CreatePurchaseOrder  		= true
					invoked.Company              		= PrmCompany 
					invoked.Requisition          		= PrmRequisition 
					invoked.Quantity             		= PrmQuantity 
					invoked.Item                 		= ItemNumber	
					invoked.EnteredUOM           		= UOM
					invoked.Description          		= ItemDescription
					if (PrmNoChargeProcedure)
						invoked.TransientNoChargeFromSupplier = true 
					if (PrmPrimaryProcedureLevel = true)
						invoked.CapitatedProcedureLevel	= 1
					else
					if (PrmRevisionProcedureLevel = true)
						invoked.CapitatedProcedureLevel = 2

		CreateComponentItemsForAllComponentsSet is a Set Action 
			restricted 
			Parameters
				ParmContractGroup			is a ContractGroup 
				ParmContract            	is a Contract 
				ParmComponentGroup      	is a ContractCapitatedComponentGroup
				ParmContractLine        	is a ContractLine 
				CreateForContractLocations  is Boolean 
				CompanyOnly                 is Boolean 
				UseBaseCostForPrimary    	is Boolean
				ComponentCompany            is like Company 
				ComponentLocation           is like InventoryLocation

			Instance Selection 
				where (ContractGroup = ParmContractGroup
				and    Contract      = ParmContract
				and    IsNotACapitatedProcedure
				and    LineNotClosed)

			Sort Order 
				ContractGroup 
				Contract 
				ContractLine 

			Action Rules
				Contract Set Rules

					Exit Rules
						if (CreateForContractLocations)
							invoke CreateCapitatedLocationItems ContractAndLineLocation 
								invoked.ParmContractGroup					= ParmContractGroup  
								invoked.ParmContract            			= ParmContract 
								invoked.ParmComponentGroup					= ParmComponentGroup
								invoked.ParmContractLine                	= ParmContractLine
								invoked.UseBaseCostForPrimary           	= UseBaseCostForPrimary
								invoked.CompanyOnly                         = CompanyOnly


				Instance Rules
					LocalContractGroup				= ParmContractGroup 
					LocalContract                   = ParmContract 
					LocalContractLine               = ParmContractLine
					LocalComponentContractLine      = ContractLine 
					LocalComponentGroup     		= ParmComponentGroup 
					LocalCompany 			        = ComponentCompany 
					LocalLocation          			= ComponentLocation
					if (AddAllContractCapitatedComponentGroupItemRel !exists)
						invoke Create ContractCapitatedComponentGroupItem
							invoked.ContractGroup					= ParmContractGroup  
							invoked.Contract            			= Contract 
							invoked.ContractCapitatedComponentGroup	= ParmComponentGroup
							invoked.ContractLine        			= ParmContractLine 
							invoked.ComponentContractLine			= ContractLine
							invoked.LocalUseBaseCostForPrimary      = UseBaseCostForPrimary 
							invoked.LocalComponentCompany           = ComponentCompany
							invoked.LocalComponentLocation          = ComponentLocation    
					else 
					if (AddAllContractCapitatedComponentGroupItemRel exists
					and ComponentCompany entered
					and AddAllContractCapitatedComponentCompanyItemRel !exists)    
						invoke Create ContractCapitatedCompanyLocationItem
							invoked.ContractGroup						= ParmContractGroup  
							invoked.Contract            				= Contract 
							invoked.ContractCapitatedComponentGroup		= ParmComponentGroup
							invoked.ContractLine        				= ParmContractLine 
							invoked.ContractCapitatedComponentGroupItem	= first AddAllContractCapitatedComponentGroupItemRel.ContractCapitatedComponentGroupItem
							invoked.ComponentContractLine               = first AddAllContractCapitatedComponentGroupItemRel.ComponentContractLine
							invoked.LocalUseBaseCostForPrimary      	= UseBaseCostForPrimary 
							invoked.Company				            	= ComponentCompany
							invoked.Location          					= ComponentLocation 

		UpdateLineFromChangeOrder is an Instance Action
			valid when (CanCreateChangeOrderDetail)
			default label is "UpdateLine"
			Parameters
				ParmChangeReason        is a Description
					default label is "ChangeReason"
				ParmDescription			is a Description3
					default label is "Description"
				ParmQuantity            is a Quantity
					default label is "ChangeQuantity"
					precision is DerivedNumberOfDecimalsQuantity
				ParmBaseCost            is a ContractUnitCost
					default label is "ChangeAmount"
					precision is DerivedNumberOfDecimalsCost
				ParmAttachment           is an Attachment
					default label is "Document"

			Parameter Rules

				ParmDescription
					required

			Action Rules

				if (ParmBaseCost !entered
				and ParmQuantity !entered)
					confirmation required
						"NoAmountOrQuantityWasEntered;VerifyingThatThisDetailDoesNotNeedAnAmountOrQuantity"

				if (ParmBaseCost < 0)
					constraint (ParmBaseCost + BaseCost > 0)
						"CannotChangeAmountToLessThanZero"

				if (ParmQuantity < 0)
					constraint (ParmQuantity + LifetimeMaximumQuantity > 0)
						"CannotChangeQuantityToLessThanZero"

				invoke Create ContractChangeOrder
					invoked.ContractGroup   	= ContractGroup
					invoked.Contract        	= Contract
					invoked.ContractVersion 	= Contract.CurrentVersionForChangeOrder
					invoked.ContractLine    	= ContractLine
					invoked.BaseCost            = ParmBaseCost
					invoked.Quantity            = ParmQuantity
					invoked.ChangeReason    	= ParmChangeReason
					invoked.Description     	= ParmDescription
					invoked.Attachment.File     = ParmAttachment.File
					invoked.Attachment.MimeType = ParmAttachment.MimeType
					invoked.Attachment.Title    = ParmAttachment.Title

		CheckForContractLineErrors is an Instance Action   

			restricted
			default label is "CheckForErrors"


		CreatePurchaseOrderLinesForStandingContract is a Set Action
			restricted
			Parameters
				ParmContractGroup  is like ContractGroup
				ParmContract       is like Contract
				ParmCompany        is like Company
				ParmPurchaseOrder  is like PurchaseOrder
				ParmCreateDate     is Date
				ParmLocation       is like InventoryLocation
				ParmResult         is like PurchaseOrderInterfaceResult

			Instance Selection

				where (ParmContractGroup = ContractGroup
				and    ParmContract      = Contract
				and    CanUseForCostDefaulting
				and    HasBeenActivated
				and   !ErrorsExist
				and   !OnHold
				and   !ContractLineState.Closed
				and   !ItemDiscontinued)

			Local Fields
				LocalPurchaseOrderLine 	is like PurchaseOrderLine
				NewPurchaseOrderLine   	is a PurchaseOrderLine view

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules

				Contract Set Rules

					Exit Rules

						LocalResult = ParmResult
						for each StandingPurchaseOrdersForResultThisContractRel
							invoke Unreleased.Release each
								resume on error

						invoke UpdateFromStanding Contract

				Instance Rules

					LocalCompany                    = ParmCompany
					LocalLocation                   = ParmLocation

					if (ItemLocationExistsAndActive)
						invoke Unreleased.Create PurchaseOrderLine
							assign result to NewPurchaseOrderLine
							LocalCompany                    = ParmCompany
							LocalLocation                   = ParmLocation
							fill in fields from this instance
								except invoked.ItemType
								except invoked.Retainage
							invoked.Item                    =  ItemNumber
							invoked.Company         		=  ParmCompany
							invoked.PurchaseOrder   		=  ParmPurchaseOrder
							if (ItemType = 2)
								invoked.ItemType            = "S"
							else
							if (ItemType = 3)
								invoked.ItemType            = "X"
							if (ItemType = 1)
								if (ItemLocationRel exists
								and ItemLocationRel.InventoryTracked = true)
									invoked.ItemType        = "I"
								else
									invoked.ItemType        = "N"
							invoked.StandingEarlyDeliveryDate   = ParmCreateDate
							if (ParmCreateDate !entered)
								invoked.StandingEarlyDeliveryDate   = current corporate date
							invoked.ShipToLocation          = ParmLocation
							if (ItemNumberExists
							and ItemNumber.IsCatchWeightItem)
								invoked.EnteredBuyUOM		= ItemNumber.SecondaryUOM
							else
								invoked.EnteredBuyUOM       = UOM.UnitOfMeasure

						LocalPurchaseOrderLine              = NewPurchaseOrderLine.PurchaseOrderLine

						if (BlanketStandingRequestingLocation entered)
							if (BlanketStandingRequestingLocation.RequestingLocation.Active)
								invoke Create PurchaseOrderLineSource
									invoked.Company         								= ParmCompany
									invoked.PurchaseOrder									= ParmPurchaseOrder
									invoked.PurchaseOrderLine 								= LocalPurchaseOrderLine
									invoked.PurchaseOrderLineSource.SourceDocumentOrigin	= "PO"
									invoked.PurchaseOrderLineSource.OperatingCompany		= BlanketStandingRequestingLocation.RequestingCompany
									invoked.PurchaseOrderLineSource.SourceDocumentNumeric	= Contract
									invoked.PurchaseOrderLineSource.SourceDocumentAlpha		= Contract
									invoked.PurchaseOrderLineSource.SourceDocumentLineNumber= ContractLine
									invoked.Quantity                                        = Quantity
									invoked.RequestingLocation								= BlanketStandingRequestingLocation.RequestingLocation

		UpdateInventoryClass is a Set Action
			restricted
			Parameters
				ContractGroup

			Parameter Rules
				ContractGroup
					required

			Instance Selection
				where (ContractGroup = ContractGroup
				and    ItemType.Itemmast)

			Action Rules
				Instance Rules
					MajorInventoryClass  = ItemNumber.MajorInventoryClass
					MinorInventoryClass  = ItemNumber.MinorInventoryClass

		UpdateItemNumberWithManufacturer is an Instance Action  
			restricted
			Action Rules

				OldItemNumber = ItemNumber 
				if (ManufacturerAndVendorItemNotItem
				and Manufacturer.ManufacturerCode entered
				and VendorItem entered)
					ItemNumber = ManufacturerPlusVendorItem
				else
					initialize ItemNumber
					if (ManufacturerAndVendorItemIsAlsoAnItemmastRel exists)
						invoke Create ContractLineError set
							invoked.ErrorMessageNumber = 183
						send email
							to Contract.PrimaryContactRel.DerivedEmail
							from config.DefaultFromEmailAddress
							subject "LinesErrorWhenUpdatingItem"
							Contents
								"WhenAttemptingToUpdateItemNumberForContract<Contract.RepresentativeText>;Line<ContractLine>"
								"BecauseOfADuplicationOfItemNumberWithAnItemMasterItem,AnErrorOccurred"
								"PleaseViewTheErrorDetailsOnTheLine"

				LocalFromUpdateItemNumberWithManufacturer = true 
				include UpdateRules 
				include UpdateExitRules

		AddInvoiceDetailsFromContractLine is an Instance Action    
			valid when (AddInvoiceDetailsFromContractLineValid)
			default label is "CreateInvoiceDetailForRemainingAmount"
			Action Rules

				if (!PayablesInvoice.InvoiceType.CreditMemo)
					if (ServiceCode.Amount)
						constraint (DerivedRemainingAmountOrdered entered)
							"NoAmountRemainsOnContractLine"
					else
				 		constraint (DerivedRemainingQuantityOrdered entered)
				 			"NoQuantityRemainsOnContractLine"

				invoke CreateFromContractLine PayablesInvoiceDetail
					invoked.Company								= PayablesCompany
					invoked.Vendor								= Contract.Vendor
					invoked.PayablesInvoice						= PayablesInvoice
					invoked.Contract							= Contract
					invoked.ContractLine						= ContractLine
					invoked.ItemDescription						= ItemDescription
					invoked.ItemType							= "S"
					invoked.CommodityCode						= CommodityCode
					invoked.VendorItem							= blank
					invoked.RecordSource						= "LM"
					invoked.EnteredUOM							= UOM.UnitOfMeasure	
					invoked.EnteredUOMMultiplier				= 1				
					invoked.TransactionNumberOfDecimals			= PayablesInvoice.InvoiceCurrency.NumberOfDecimals
					invoked.Location							= blank
					invoked.ItemGTIN							= blank
					if (ServiceCode.Amount)
						invoked.VendorPriceUOM					= blank
					else
						invoked.VendorPriceUOM					= UOM.UnitOfMeasure		
					invoked.VendorPriceUOMMultiplier			= 1				
					invoked.VendorBuyUOM						= UOM.UnitOfMeasure		
					invoked.VendorBuyUOMMultiplier				= 1				
					invoked.DistributionDate					= PayablesInvoice.DistributionDate

					if (ServiceCode.Amount)
						invoked.EnteredQuantity						= 1
						invoked.BuyUOMMatchedQuantity				= 1
						invoked.MatchedQuantity						= 1
						invoked.EnteredUnitCost						= DerivedRemainingAmountInUse
						invoked.MatchUnitCost						= DerivedRemainingAmountInUse
					else
						invoked.EnteredQuantity						= DerivedRemainingQuantityOrdered
						invoked.BuyUOMMatchedQuantity				= DerivedRemainingQuantityOrdered
						invoked.MatchedQuantity						= DerivedRemainingQuantityOrdered
						if (CurrentNetCost != BaseCost)
							invoked.MatchUnitCost                   = CurrentNetCost
							invoked.EnteredUnitCost                 = CurrentNetCost
						else
							invoked.MatchUnitCost					= BaseCost
							invoked.EnteredUnitCost					= BaseCost
					if (TaxCode entered
					and TaxUsageCode entered)
						invoked.TaxUsageCode					= TaxUsageCode

		DeleteInvoiceDetailsFromContractLine is an Instance Action    
			valid when (DeleteInvoiceDetailsFromContractLineValid)
			default label is "Delete"
			Action Rules
				invoke Delete PayablesInvoiceDetailForInvoiceRel

		UpdateCurrentNetAndDefaultBuyCost is a Set Action
			restricted
			Parameters
				ContractGroup

			Parameter Rules
				ContractGroup
					required

			Instance Selection
				where (ContractGroup = ContractGroup
				and  !ContractLineState.Closed)

			Action Rules
				Instance Rules
					if (CurrentPercent > 0)
						if (IsMarkup)
							if (ItemNumber.Consignment)
								ConsignmentCurrentNetCost = DerivedMarkupNet
							else
								CurrentNetCost = DerivedMarkupNet
						else 
							if (ItemNumber.Consignment)
								ConsignmentCurrentNetCost = DerivedDiscountNet
							else
								CurrentNetCost = DerivedDiscountNet
					else
						if (ItemNumber.Consignment)
							ConsignmentCurrentNetCost = BaseCost
						else
							CurrentNetCost = BaseCost

					if (ItemNumberExists
					and ItemNumber.DefaultBuyUOM != UOM.UnitOfMeasure)
						DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
					else
						if (CurrentNetCost entered)
							DefaultBuyUnitCost = CurrentNetCost * 100000
						else
							DefaultBuyUnitCost = ConsignmentCurrentNetCost * 100000

		FastUpdateCosts is an Instance Action   
			restricted

			Parameters
				NewCost           is like UnitCost
				NewPercent        is Percent size 6.3

			Action Rules

				if (ItemNumber.Consignment)
					ConsignmentCurrentNetCost = NewCost
				else
					CurrentNetCost            = NewCost
				CurrentPercent                = NewPercent

				if (ItemNumberExists
				and ItemNumber.DefaultBuyUOM != UOM.UnitOfMeasure)
					DefaultBuyUnitCost = DerivedDefaultBuyUnitCost * 100000
				else
					if (CurrentNetCost entered)
						DefaultBuyUnitCost = CurrentNetCost * 100000
					else
						DefaultBuyUnitCost = ConsignmentCurrentNetCost * 100000

		SetUseCommitmentsToTrue is a Set Action
			restricted

			Parameters
				ParmContractGroup   is a ContractGroup
				ParmContract        is a Contract

			Instance Selection
				where (ContractGroup = ParmContractGroup
				and    Contract      = ParmContract
				and    LineNotClosed
				and    CommitmentAmountRemaining > 0)

			Action Rules
				Instance Rules
					UseCommitments = true
					include CheckToCreateOrDeleteCommitment					

		SetUseCommitmentsToFalse is a Set Action
			restricted

			Parameters
				ParmContractGroup   is a ContractGroup
				ParmContract        is a Contract

			Instance Selection
				where (ContractGroup = ParmContractGroup
				and    Contract      = ParmContract)

			Action Rules
				Instance Rules
					UseCommitments = false

		UpdateTypeSubTypeRelatedInformation is a Set Action
			restricted
			completion message is "ProcessingContractImportLinesTypeSubTypeRelatedInformationCompleted"

			Parameters

				PrmContractGroup        is a ContractGroup
				PrmContract        		is a Contract

			Parameter Rules

				PrmContractGroup
					required

				PrmContract
					required

			Instance Selection

				where (ContractGroup        = PrmContractGroup
				and    Contract        		= PrmContract)

			Sort Order

				ContractGroup
				Contract
				ContractLine

			Accumulators
				TotalLifetimeMaximumAmount

			Action Rules

				Contract Set Rules
				
					Exit Rules
					
						if (TotalLifetimeMaximumAmount > 0)
							if (CanUseForCostDefaulting
							or  CanUseForInvoicePayment)
								increment Contract.TotalLineMaximumAmount by TotalLifetimeMaximumAmount
								invoke CalculateTotalLineMaximumAmount Contract	
						if (Contract.HasAPurchaseType)
							invoke ChangeVendorItemCheck 
								invoked.PrmContractGroup	= ContractGroup 
								invoked.PrmContract         = Contract					
				
				Instance Rules

					if (Contract.StandingOrService)
						Priority = 0
					if (!Contract.StandingPurchaseType
					and !ServiceCode.Quantity)
						Quantity   = 0
						LifetimeMaximumQuantity = 0

					if (Contract.ServicePurchaseType)
						CanUseForInvoicePayment = true
						ItemNumber = blank
						if (ServiceCode.Quantity)
							LifetimeMaximumAmount = (LifetimeMaximumQuantity * BaseCost)
							TotalLifetimeMaximumAmount += LifetimeMaximumAmount
						else
						if (ServiceCode.Amount)
							LifetimeMaximumAmount = BaseCost		
							TotalLifetimeMaximumAmount += LifetimeMaximumAmount

					if (Contract.StandingPurchaseType)
						PerOrderMaximumQuantity = 0
						PerOrderMaximumAmount = 0
						PerOrderMinimumQuantity = 0
						PerOrderMinimumAmount = 0

					if (!Contract.BlanketOrStanding and BlanketStandingRequestingLocation != blank)
						BlanketStandingRequestingLocation = blank

					include CanUseForCostDefaultingRules
					
					if (!Contract.HasAPurchaseType)
						UseCommitments = 0

		CreateHeaderCommitmentsForDistribution is a Set Action
			restricted

			Parameters
				ParmContractGroup   is a ContractGroup
				ParmContract        is a Contract

			Instance Selection
				where (ContractGroup = ParmContractGroup
				and    Contract      = ParmContract)

			Action Rules
				Instance Rules
					invoke CreateForHeaderCommitments ContractLineDistribution
						invoked.ContractGroup       		= ContractGroup
						invoked.Contract              		= Contract
						invoked.ContractLine 				= ContractLine
						invoked.DistributionAccount			= Contract.CommitmentAccount
						invoked.Percent						= 1

		CheckLineSuggestedItems is a Set Action  
			restricted

			Parameters
				ParmContractGroup   is a ContractGroup
				ParmContract        is a Contract

			Instance Selection
				where (ContractGroup = ParmContractGroup
				and    Contract      = ParmContract
				and    ItemType      = 3) 

			Action Rules
				Instance Rules
					invoke CheckForSuggestedItems

		CheckForSuggestedItems is an Instance Action
			restricted
			Action Rules
				for each SuggestedItemsRel
					if (each.MessageNumber < 6)
						invoke Delete each

				if (ManufacturerNumber entered)
					for each VendorItemFromStrippedManufacturerNumberWithManufacturerRel
						invoke Create ContractLineSuggestedItem
							invoked.ContractGroup    			= ContractGroup
							invoked.Contract         			= Contract
							invoked.ContractLine     			= ContractLine
							invoked.EnteredVendorItem   		= VendorItem
							invoked.EnteredManufacturer 		= Manufacturer
							invoked.EnteredManufacturerNumber   = ManufacturerNumber
							invoked.Vendor                      = Contract.Vendor
							invoked.SuggestedItem               = each.Item
							invoked.SuggestedVendorItem         = each.VendorItem
							invoked.MessageNumber               = 1

					for each VendorItemFromStrippedManufacturerNumberRel
						invoke Create ContractLineSuggestedItem
							invoked.ContractGroup    			= ContractGroup
							invoked.Contract         			= Contract
							invoked.ContractLine     			= ContractLine
							invoked.EnteredVendorItem   		= VendorItem
							invoked.EnteredManufacturer 		= Manufacturer
							invoked.EnteredManufacturerNumber   = ManufacturerNumber
							invoked.Vendor                      = Contract.Vendor
							invoked.SuggestedItem               = each.Item
							invoked.SuggestedVendorItem         = each.VendorItem
							invoked.MessageNumber               = 5

					for each ItemFromStrippedManufacturerNumberRel
						invoke Create ContractLineSuggestedItem
							invoked.ContractGroup    			= ContractGroup
							invoked.Contract         			= Contract
							invoked.ContractLine     			= ContractLine
							invoked.EnteredVendorItem   		= VendorItem
							invoked.EnteredManufacturer 		= Manufacturer
							invoked.EnteredManufacturerNumber   = ManufacturerNumber
							invoked.SuggestedItem               = each.Item
							invoked.MessageNumber               = 2

				if (VendorItem entered)
					for each VendorItemFromStrippedVendorItemRel
						invoke Create ContractLineSuggestedItem
							invoked.ContractGroup    			= ContractGroup
							invoked.Contract         			= Contract
							invoked.ContractLine     			= ContractLine
							invoked.EnteredVendorItem   		= VendorItem
							invoked.EnteredManufacturer 		= Manufacturer
							invoked.EnteredManufacturerNumber   = ManufacturerNumber
							invoked.Vendor                      = Contract.Vendor
							invoked.SuggestedItem               = each.Item
							invoked.SuggestedVendorItem         = each.VendorItem
							invoked.MessageNumber               = 3

			Exit Rules
				if (SuggestedItemsRel exists)
					if (ContractLineState.Active)
						if (Contract.SetActiveLineToAmendment)
							make transition to Amendment
							if (Contract.ActiveContract)
								invoke CreateAmendment Active Contract

		KeepEnteredItem is an Instance Action
			valid when (OpenSuggestedItemsExist)

			Action Rules
				for each SuggestedItemsRel
					invoke Update each
						invoked.SuggestedItemResolution = 1 

		FastUpdate is an Update Action  
			bypass field rules
			restricted

			Entrance Rules
				if (ContractLineState.Active)
					if (Contract.SetActiveLineToAmendment)
						if (!LocalDoNotSetToAmendment)
							make transition to Amendment
							if (Contract.ActiveContract)
								invoke CreateAmendment Active Contract

			Action Rules
				UpdateFromManufacturerContract = true
				include UpdateRules

			Exit Rules
				UpdateFromManufacturerContract = true
				if (FromImport)
					include UpdateOtherLinesToMatch
				include UpdateExitRules

				
				if (!LineErrorsExist
				and CanUseForCostDefaulting
				and ContractLineState = ContractLineState.Active
				and !Contract.SetActiveLineToAmendment
				and !ItemType.Service)
					include CreateItemAndVendorItem

		FastUpdateVendorItem is an Instance Action 
			restricted


		FastUpdateWithoutEdits is an Instance Action
			restricted
			Parameters

				UpdateCanUseForCostDefaultingFalse			is Boolean
				UpdateCanUseForCostDefaultingTrue			is Boolean
				UpdateCreateDistributorContractLineFalse	is Boolean
				UpdateCreateDistributorContractLineTrue		is Boolean
				UpdateVendorItem            				is Boolean
				FromImport                                  is Boolean
				FromDirectLineUpdate                        is Boolean
   				UpdateManufacturerInformation               is Boolean 
   				FromManufacturerChange                      is Boolean
   				FromAttributeUpdate                         is Boolean 
				UpdateDescription                           is Boolean
   				Description1                                is a Description
   				Description2                                is a Description
   				Description3
   				ManufacturerLineMemberModified	            is Boolean
   				NewVendorItem								is AlphaUpper size 32
   				OldVendorItem                               is like VendorItem
				NewManufacturer                             is a Manufacturer
	  			NewManufacturerNumber                       is a ManufacturerNumber
   				NewVendorItemDescription                    is a Description
   				UpdateDistributorModification 				is Boolean
   				UpdateSelectedForItemCreation               is Boolean
   				UpdateSelectedForItemCreationFalse          is Boolean
   				NewBaseCost                                 is a ContractUnitCost
   				UpdateStocklessFlag                         is Boolean
   				UpdateCanUseForInvoicePaymentTrue           is Boolean
				UpdateBaseCostFromChangeOrder               is Boolean
				BaseCostAdjustment                          is a ContractUnitCost
				QuantityAdjustment                          is a Quantity
				UpdateForChangeOrderCommit                  is Boolean 
				UpdateItemNumber                            is Boolean   
				NewItem                                     is an Item 
				FromSuggestedItem                           is Boolean
				UOMChanged                                  is Boolean
				RemoveUPC                                   is Boolean 
				EnterUPC									is Boolean 
				UPCToEnter                                  is like ItemUPC
				RemoveUCCEANItemUPN                         is Boolean 
				EnterUCCEANItemUPN    						is Boolean 
				UCCEANItemUPNToEnter                        is like UCCEANItemUPN
				RemoveHIBCCItemUPN                          is Boolean 
				EnterHIBCCItemUPN    						is Boolean 
				EnterLowUOMCodeHIBCCUPN                     is Boolean
				DefaultItemFromHibccUPN                     is Boolean
				DefaultItemFromLowUOMCodeHibccUPN           is Boolean 
				HIBCCItemUPNToEnter                         is like HIBCCItemUPN
				RemoveNDC                                   is Boolean 
				EnterNDC									is Boolean 
				NDCToEnter                                  is like NationalDrugCode	
				DefaultItemFromGTIN                         is Boolean
				EnterGTIN                                   is Boolean
				GTINToEnter                                 is like ItemGTIN 	
				DefaultItemFromLowUOMCodeGTIN               is Boolean
				EnterLowUOMCodeGTIN                         is Boolean	
				LowUOMCodeGTINToEnter                       is like ItemGTIN	
				UpdateVendorAndSupplier                     is Boolean 
				UpdatedVendor                               is like Vendor 
				UpdatedSupplier                             is like Supplier 	
                PrmSelectedForItemCreation                  is Boolean  

 			Parameter Rules
			Action Rules
				if (UpdateCanUseForCostDefaultingFalse)
					CanUseForCostDefaulting = false
					if (CreateDistributorContractLine = false)
						ErrorsExist = false
						for each AnyLineMemberRel
							invoke UpdateErrors each
								invoked.ParmErrorsExist = ErrorsExist
						invoke Purge ContractLineErrorRel
					if (IsDistributorContract
					and LineMemberDistributorRels exists)
						invoke FastUpdateWithoutEdits LineMemberDistributorRels
							invoked.UpdateCanUseForCostDefaultingFalse = true
				if (UpdateCanUseForCostDefaultingTrue)
					CanUseForCostDefaulting = true
					if (IsDistributorContract
					and LineMemberDistributorRels exists)
						invoke FastUpdateWithoutEdits LineMemberDistributorRels
							invoked.UpdateCanUseForCostDefaultingTrue = true
				if (UpdateCanUseForInvoicePaymentTrue)
					CanUseForInvoicePayment = true
					include UpdateExitRules
				if (UpdateCreateDistributorContractLineFalse)
					CreateDistributorContractLine = false
					if (CanUseForCostDefaulting = false)
						ErrorsExist = false
						invoke Purge ContractLineErrorRel
				if (UpdateCreateDistributorContractLineTrue)
					CreateDistributorContractLine = true

					if (CanUseForCostDefaulting = false)
						IncludeAllErrorEdits = true
						include ManageErrorChecking						
				if (ManufacturerLineMemberModified = true)
					DistributorModifications = 1
				if (UpdateVendorItem)
					if (OldVendorItem !entered)
						OldItemNumber       = ItemNumber
						OldVendorItem       = VendorItem
					if (NewManufacturer entered)
						Manufacturer		= NewManufacturer
					if (NewManufacturerNumber entered)
						ManufacturerNumber  = NewManufacturerNumber

					LocalVendorItem         = OldVendorItem
					VendorItem				= NewVendorItem
					if (!FromImport
					and  Contract.HasGPOSupplier
					and (Contract.MultiTierDistributorContract
					or   IsDistributorContract
					or   IsManufacturerContract))
					
						if (ContractLineImportByManufacturerDirect)
							invoke FastUpdate ContractLineImportDirectRel
								invoked.ContractVendorItem = VendorItem 
						else 
						if (ContractLineImportByManufacturer)
							invoke FastUpdate first ContractLineImportByManufacturerGPORel
								invoked.ContractVendorItem = VendorItem

						if (ContractLineImportDistributorRel exists)
							invoke Update first ContractLineImportDistributorRel
								invoked.ContractVendorItem = VendorItem
					
					if (NewVendorItemDescription entered)
						VendorItemDescription 	= NewVendorItemDescription
					if (!FromDirectLineUpdate)
						IncludeBackOfficeEdits = true
						IncludeFrontEndEdits   = true
						include ManageErrorChecking
					if (IsManufacturerOrDistributorContract)
						for each AnyLineMemberRel
							invoke FastUpdateWithoutEdits each
								invoked.UpdateVendorItem 	= true
								invoked.OldVendorItem   	= OldVendorItem
								invoked.OldItemNumber  		= OldItemNumber

					if (!IsManufacturerOrDistributorContract
					and IsPreferredLine
					and HasBeenActivated
					and !FromDirectLineUpdate)
						for each ContractParticipantRels
							invoke CreateOrUpdatePreferredContract each
								invoked.ParmOldItem 	   	= OldItemNumber
								invoked.ParmOldVendorItem 	= OldVendorItem
								invoked.ParmFromUpdate 		= true
								invoked.ParmItem  			= ItemNumber
								invoked.ParmVendorItem      = VendorItem 
					if  (ItemNumberExists
					and  ContractLine.ContractLineState.Active
					and !VendorItemExists
					and  ItemNumber.Active
					and  Contract.Vendor entered)
						invoke Create VendorItem
							invoked.ProcurementGroup        	= ContractGroup
							invoked.Item                    	= ItemNumber
							invoked.VendorItem              	= VendorItem
							invoked.Vendor                 	 	= Contract.Vendor
							invoked.Manufacturer            	= Manufacturer
							invoked.ManufacturerNumber      	= ManufacturerNumber
							invoked.LabelerIdentificationCode	= LabelerIdentificationCode
							if (POVendorItemBuyUOMTestRel exists)
								invoked.VendorBuyUOM        = UOM.UnitOfMeasure								

				if (UpdateDescription)
					if (Description1 entered)
						ItemDescription  = Description1
					if (Description2 entered)
						ItemDescription2  = Description2
					if (Description3 entered)
						ItemDescription3  = Description3
				if (UpdateManufacturerInformation)  
					if (ContractLineImportByManufacturerDirect)	
						for each ContractLineImportDirectRel
							invoke FastUpdateWithoutEdits each
								invoked.FromManufacturerChange 			= FromManufacturerChange
								invoked.UpdateManufacturerInformation 	= true
								if (NewManufacturer entered)
									invoked.NewManufacturer             = NewManufacturer
								else 
									invoked.NewManufacturer             = Manufacturer 
								if (NewManufacturerNumber entered)
									invoked.NewManufacturerNumber       = NewManufacturerNumber
								else 
									invoked.NewManufacturerNumber       = ManufacturerNumber	
					else
					if (ContractLineImportByManufacturer)
						for each ContractLineImportByManufacturerGPORel
							invoke FastUpdateWithoutEdits each
								invoked.FromManufacturerChange 			= FromManufacturerChange
								invoked.UpdateManufacturerInformation 	= true
								if (NewManufacturer entered)
									invoked.NewManufacturer             = NewManufacturer
								else 
									invoked.NewManufacturer             = Manufacturer 
								if (NewManufacturerNumber entered)
									invoked.NewManufacturerNumber       = NewManufacturerNumber
								else 
									invoked.NewManufacturerNumber       = ManufacturerNumber	

					if (NewManufacturer entered)
						Manufacturer        = NewManufacturer
					if (NewManufacturerNumber entered)
						ManufacturerNumber = NewManufacturerNumber								
					IncludeBackOfficeEdits = true
					include ManageErrorChecking

				if (UpdateDistributorModification)
					DistributorModifications = 0
				if (UpdateSelectedForItemCreation)
					SelectedForItemCreation = true
				if (UpdateSelectedForItemCreationFalse)
					SelectedForItemCreation =false
				if (UpdateStocklessFlag)
					Stockless = Contract.Stockless
					for each ContractLineMember set
						invoke FastUpdateWithoutEdits each
							invoked.UpdateStocklessFlag = true
				if (UpdateBaseCostFromChangeOrder)
					BaseCost 					+= BaseCostAdjustment
					CurrentNetCost               = BaseCost
					DefaultBuyUnitCost 			 = CurrentNetCost * 100000
					LifetimeMaximumQuantity 	+= QuantityAdjustment
					if (Contract.ServicePurchaseType)
						if (ServiceCode.Amount)
							LifetimeMaximumAmount = BaseCost
						if (ServiceCode.Quantity)
							LifetimeMaximumAmount = (BaseCost * LifetimeMaximumQuantity)
						if (BaseCost > 0)
							CostOption = 1 
                     	if (CanUseForInvoicePayment)
                            increment Contract.TotalLineMaximumAmount by (LifetimeMaximumAmount - old LifetimeMaximumAmount)
						if (UseCommitments
						and Contract.UseLineCommitments)
							if (Contract.CreateCommitments.Line)
								if (LifetimeMaximumAmount > 0)
									for each ContractLineDistribution set
										if (each.CommitmentsExist)
											invoke UpdateForCommitments each
										else
											invoke AddOtherCommitments each
								else
								if (LifetimeMaximumAmount = 0)
									for each ContractLineDistribution set
										invoke DeleteCommitmentOnly each
							if (Contract.CreateCommitments.LineSpread
							and Contract.ChangeOrderMaxAmountUpdate)
								for each ContractLineDistributionRel
									invoke UpdateOrCreateSpreadFromChangeOrder each		
										if (ServiceCode.Amount)
											invoked.ChangeAmount = BaseCostAdjustment
										else
										if (ServiceCode.Quantity)
											if (QuantityAdjustment != 0
											and BaseCostAdjustment != 0)
												invoked.ChangeAmount = (QuantityAdjustment * BaseCostAdjustment)
											else
											if (QuantityAdjustment = 0
											and BaseCostAdjustment != 0)
												invoked.ChangeAmount = (LifetimeMaximumQuantity * BaseCostAdjustment)
											else
											if (QuantityAdjustment != 0
											and BaseCostAdjustment  = 0)
												invoked.ChangeAmount = (QuantityAdjustment * BaseCost)

				if (UpdateForChangeOrderCommit)  
					LifetimeMaximumAmount			  += BaseCostAdjustment
					if (Contract.CreateCommitments.Line)
						for each ContractLineDistribution set
							invoke UpdateForCommitments each
						for each ContractLineDistributionRel
							invoke UpdateOrCreateSpreadFromChangeOrder each
								invoked.ChangeAmount = BaseCostAdjustment
				if (UpdateItemNumber) 
					ItemNumber = NewItem 
					include UpdateRules
					include UpdateExitRules 
					if (!FromDirectLineUpdate)
						IncludeBackOfficeEdits = true
						include ManageErrorChecking
					if (FromSuggestedItem)
						if (IsManufacturerOrDistributorContract)
							if (ContractLineImportByManufacturerDirect)
								invoke FastUpdateWithoutEdits ContractLineImportDirectRel	
									invoked.NewItem                 = NewItem	
							else		
							if (ContractLineImportByManufacturer)
								for each ContractLineImportByManufacturerGPORel
									invoke FastUpdateWithoutEdits each
										invoked.NewItem             = NewItem 

				if (UOMChanged)
					invoke TestMismatchWithVendorUOMError 
				if (RemoveUPC)
					Upc                 = blank
				if (EnterUPC)
					Upc                 = UPCToEnter
				if (RemoveUCCEANItemUPN)
					UccEanUpn           = blank
				if (EnterUCCEANItemUPN)
					UccEanUpn          = UCCEANItemUPNToEnter					
				if (RemoveHIBCCItemUPN)
					HibccUpn       		= blank
					LowUOMCodeHibccUPN	= blank
				if (EnterHIBCCItemUPN)
					HibccUpn           = HIBCCItemUPNToEnter
				if (EnterLowUOMCodeHIBCCUPN)
					LowUOMCodeHibccUPN = HIBCCItemUPNToEnter
				if (RemoveNDC)
					NdcNbr             = blank
				if (EnterNDC)
					NdcNbr             = NDCToEnter		
				if (DefaultItemFromGTIN)
                    GlobalTradeItemNumber = GTINToEnter
				if (EnterGTIN)
					GlobalTradeItemNumber = GTINToEnter 
					IncludeBackOfficeEdits = true
					include ManageErrorChecking		
				if (DefaultItemFromLowUOMCodeGTIN)  
                    LowUOMCodeGTIN = LowUOMCodeGTINToEnter
				if (EnterLowUOMCodeGTIN)
					LowUOMCodeGTIN = LowUOMCodeGTINToEnter 
					IncludeBackOfficeEdits = true
					include ManageErrorChecking	
				if (UpdateVendorAndSupplier)
					Supplier		= UpdatedSupplier 
					Vendor          = UpdatedVendor 	

				if (UpdateVendorItem
				or  UpdateDescription
				or  UpdateItemNumber)
					if (VendorBackorderByContractLineRel exists)
						invoke FastUpdate VendorBackorderByContractLineRel
							invoked.VendorItem 				= VendorItem
							invoked.Item       				= ItemNumber 
							invoked.ItemDescription 		= ItemDescription 
							invoked.VendorItemDescription	= VendorItemDescription 
                if (PrmSelectedForItemCreation)
                    SelectedForItemCreation = true 
				include DefaultItemNumbers
				include BuildTextIndexes
				UpdateKeywordShadow = true
				include ManageKeywordShadow
				if (!ItemNumberExists 
				and	!UpdateItemNumber
				and !UpdateForChangeOrderCommit
				and !UpdateStocklessFlag
				and !UpdateDistributorModification
				and !UpdateSelectedForItemCreation
				and !UpdateSelectedForItemCreationFalse
				and !UpdateCanUseForInvoicePaymentTrue
				and !UpdateCreateDistributorContractLineFalse
				and !UpdateCreateDistributorContractLineTrue
				and !ManufacturerLineMemberModified)
					include ConsolidatedItemMasterRules

		Select is an Instance Action 
			valid when (!SelectedForCopy)
			Action Rules 
				SelectedForCopy = true 
		
		Unselect is an Instance Action 
			valid when (SelectedForCopy)
			Action Rules 
				SelectedForCopy = false  

		UpdateClinicalUse is a Set Action 
			restricted 
			Parameters 
				PrmContractGroup	 is a ContractGroup
				PrmContract          is a Contract
				PrmSetFlag           is Numeric 1
					States
						True		value is 1
						False		value is 2
				
			Instance Selection
				where (ContractGroup 	    = PrmContractGroup
				and    Contract			    = PrmContract
				and    LineNotClosed
				and    ManufacturerContract = Contract
				and    ItemType.Special)

			Action Rules 
				Instance Rules 	

					if  (PrmSetFlag = 1
					and  ClinicalSystemUse = false)
						ClinicalSystemUse = true 

					if (PrmSetFlag = 2
					and ClinicalSystemUse = true)
						ClinicalSystemUse = false

					include UpdateOtherLinesToMatch
					include ConsolidatedItemMasterRules

		SetPreviousCost is a Set Action
			restricted
			Parameters
				PrmContractGroup	is a ContractGroup
					default label is "ContractGroup"
				PrmContract         is a Contract
					default label is "Contract"

			Instance Selection
				where (ContractGroup 	= PrmContractGroup
				and    Contract			= PrmContract)

			Action Rules

				Instance Rules

					for each audit log records
						if (each.BaseCost != BaseCost)
							LocalPreviousCost = each.BaseCost
						end for each
					FutureCost = LocalPreviousCost

		CompareContractLineCosts is a Set Action
			restricted
			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract             is a Contract
				CompareContract			is a Contract
				CompareFromDate         is Date
				CompareToDate           is Date
				ShowZeroDifference 		is Boolean
				ShowZeroOrdered      	is Boolean
				CompareFromTier         is like ContractTier
				CompareToTier           is a ContractTier
					context of PrmContract
				CostIncreasePercent     is Percent size 5.2
				ComparePreviousCost     is Boolean

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Contract Set Rules
					Exit Rules
						if (!ComparePreviousCost)
							LocalContract     = CompareContract
						else
						if (ComparePreviousCost)
							LocalContract     = Contract
						if (!FromCostComparisonExists
						and !CostSavingsExists)
							send email
								to actor.agent(Employee).EmployeeWorkEmailAddress
								from Contract.PrimaryContactRel.DerivedEmail
								subject "<ContractGroupEmailTemplate2Rel.FinalContractCostCompareSubject>"
								Contents
									"<ContractGroupEmailTemplate2Rel.FinalContractCostCompareContent>"
							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= actor.agent(Employee).EmployeeWorkEmailAddress
								invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
								invoked.SentFromEmailAddress			= Contract.PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= ContractGroupEmailTemplate2Rel.FinalContractCostCompareSubject
								invoked.EmailContent					= ContractGroupEmailTemplate2Rel.FinalContractCostCompareContent
								invoked.NotificationType				= 6

				Instance Rules
					if (!ComparePreviousCost)
						LocalContract     = CompareContract
					else
					if (ComparePreviousCost)
						LocalContract     = Contract
					LocalItemNumber       = ItemNumber
					LocalFutureCostDate 	= 0
					LocalFutureCost			= 0
					LocalEffectiveDate  	= 0
					LocalBaseCost			= 0
					LocalOutUnitCost		= 0
					ParameterCompareEffectiveDate  = CompareFromDate
					ParameterCompareExpirationDate = CompareToDate
					if (ComparePreviousCost)
						if (QuantityOrdered > 0)
							if ((FutureCost != BaseCost
							and  FutureCost > 0)
							or   ShowZeroDifference)
								LocalFutureCost 	= FutureCost
								if (LocalFutureCost = 0
								and ShowZeroDifference)
									LocalFutureCost = BaseCost
								LocalBaseCost   	= BaseCost
								LocalContractLine   = ContractLine
								include CreateContractLinePriceChange
					else
					if (ItemNumber entered)
					 	if (CompareContractLineItemExists)
					 		LocalContractLine         = ContractLineItemCompareRel.ContractLine
							LocalCompareEffectiveDate = ContractLineItemCompareRel.EffectiveDate
							if (!CompareToTier entered)
								LocalOriginalBaseCost     = ContractLineItemCompareRel.BaseCost
								LocalUpdatedBaseCost  	  = BaseCost
								if  ((BaseCost != LocalOriginalBaseCost
								or   ShowZeroDifference
								or   PrmContract = CompareContract)
								and  (ContractLineItemCompareRel.DerivedQuantityOrderedWithDistributorQuantity > 0
								or   ShowZeroOrdered))
									if (EffectiveDate = 0)
										LocalFutureCostDate     = LocalCompareEffectiveDate
									else
										LocalFutureCostDate		= EffectiveDate
									LocalFutureCost 		= BaseCost
									LocalEffectiveDate  	= LocalCompareEffectiveDate
									LocalBaseCost			= LocalOriginalBaseCost

									include CreateContractLinePriceChange
							else
							if  (CompareToTier entered
							and (ContractLineItemCompareRel.DerivedQuantityOrderedWithDistributorQuantity > 0
							or   ShowZeroOrdered))
								LocalTier = CompareToTier
								for each ContractLineTierCostCompareRel
									invoke CompareContractLineTierCost each
										invoked.CompareContract          = CompareContract
										invoked.CompareContractLine      = LocalContractLine
										invoked.ShowZeroDifference       = ShowZeroDifference
										invoked.CompareFromTier          = CompareFromTier
										invoked.EffectiveDate            = ParameterCompareEffectiveDate
										invoked.ExpirationDate           = ParameterCompareEffectiveDate
					else
					if (CompareContractLineMfgExists)
						LocalContractLine         = ContractLineMfgCompareRel.ContractLine
						LocalCompareEffectiveDate = ContractLineMfgCompareRel.EffectiveDate
						if (!CompareToTier entered)
							LocalOriginalBaseCost     = ContractLineMfgCompareRel.BaseCost
							LocalUpdatedBaseCost  	  = BaseCost
							if  ((BaseCost != LocalOriginalBaseCost
							or   ShowZeroDifference
							or   PrmContract = CompareContract)
							and  (ContractLineMfgCompareRel.DerivedQuantityOrderedWithDistributorQuantity > 0
							or   ShowZeroOrdered))
								if (EffectiveDate = 0)
									LocalFutureCostDate     = LocalCompareEffectiveDate
								else
									LocalFutureCostDate		= EffectiveDate
								LocalFutureCost 		= BaseCost
								LocalEffectiveDate  	= LocalCompareEffectiveDate
								LocalBaseCost			= LocalOriginalBaseCost
								include CreateContractLinePriceChange
						else
						if  (CompareToTier entered
						and (ContractLineMfgCompareRel.DerivedQuantityOrderedWithDistributorQuantity > 0
						or   ShowZeroOrdered))
							LocalTier = CompareToTier
							for each ContractLineTierCostCompareRel
								invoke CompareContractLineTierCost each
									invoked.CompareContract          = CompareContract
									invoked.CompareContractLine      = LocalContractLine
									invoked.ShowZeroDifference       = ShowZeroDifference
									invoked.CompareFromTier          = CompareFromTier
									invoked.EffectiveDate            = ParameterCompareEffectiveDate
									invoked.ExpirationDate           = ParameterCompareEffectiveDate
					else
					if (!CompareContractLineMfgExists
					and  CompareContractLineVendorExists)
						LocalContractLine         = ContractLineVendorCompareRel.ContractLine
						LocalCompareEffectiveDate = ContractLineVendorCompareRel.EffectiveDate
						if (!CompareToTier entered)
							LocalOriginalBaseCost     = ContractLineVendorCompareRel.BaseCost
							LocalUpdatedBaseCost  = BaseCost   
							if  ((BaseCost != LocalOriginalBaseCost
							or   ShowZeroDifference
							or   PrmContract = CompareContract)
							and  (ContractLineVendorCompareRel.DerivedQuantityOrderedWithDistributorQuantity > 0
							or   ShowZeroOrdered))
								if (EffectiveDate = 0)
									LocalFutureCostDate     = LocalCompareEffectiveDate
								else
									LocalFutureCostDate		= EffectiveDate
								LocalFutureCost 		= BaseCost
								LocalEffectiveDate  	= LocalCompareEffectiveDate
								LocalBaseCost			= LocalOriginalBaseCost
								include CreateContractLinePriceChange
						else
						if  (CompareToTier entered
						and (ContractLineVendorCompareRel.DerivedQuantityOrderedWithDistributorQuantity > 0
						or   ShowZeroOrdered))
							LocalTier = CompareToTier
							for each ContractLineTierCostCompareRel
								invoke CompareContractLineTierCost each
									invoked.CompareContract          = CompareContract
									invoked.CompareContractLine      = LocalContractLine
									invoked.ShowZeroDifference       = ShowZeroDifference
									invoked.CompareFromTier          = CompareFromTier
									invoked.EffectiveDate            = ParameterCompareEffectiveDate
									invoked.ExpirationDate           = ParameterCompareEffectiveDate

		CreateBidWorksheetLines is a Set Action
			restricted
			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract             is a Contract
				CompareFromDate         is Date
				CompareToDate           is Date
				ShowZeroOrdered      	is Boolean
				CompareToTier           is a ContractTier
				CostIncreasePercent     is Percent size 5.2
				BidSupplier             is a Supplier

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules

				Instance Rules
					if (DerivedQuantityOrderedWithDistributorQuantity > 0
					or  ShowZeroOrdered)

						invoke Create ContractLinePriceChange
							invoked.ProcessingType      	= 4 
							invoked.FromContract	        = Contract
							invoked.FromLineNumber          = ContractLine
							invoked.ContractGroup			= ContractGroup
							invoked.Contract				= Contract
							invoked.ContractLine            = ContractLine
					 		invoked.ItemNumber				= ItemNumber
							invoked.VendorItem              = VendorItem
							invoked.UOM                     = UOM
							invoked.EffectiveDate           = CompareFromDate
							invoked.ExpirationDate 			= CompareToDate
							invoked.ManufacturerInformation.Manufacturer = Manufacturer
							invoked.ManufacturerInformation.ManufacturerNumber = ManufacturerNumber
							invoked.BidSupplier             = BidSupplier
							if (CompareToTier !entered)
								if (CostIncreasePercent > 0)
									invoked.FutureCost			= ((BaseCost * CostIncreasePercent) + BaseCost)
								invoked.BaseCost				= BaseCost
							else
							if (CompareToTier entered)
								if (CostIncreasePercent > 0)
									invoked.FutureCost			= ((first ContractLineTierCostCompareRel.TierCost * CostIncreasePercent) + first ContractLineTierCostCompareRel.TierCost)
								invoked.BaseCost				= first ContractLineTierCostCompareRel.TierCost

		SetPreferredLineTrue is a Set Action
			restricted
			Parameters
				ParmContractGroup    is a ContractGroup
				ParmContract	     is a Contract

			Instance Selection
				where (ContractGroup       		= ParmContractGroup
				and    Contract 	       		= ParmContract
				and    PreferredLine            = false
				and    !ItemType.Service)

			Action Rules

				Instance Rules

					PreferredLine = true
					if (ItemNumberExists
					and UseForCostDefaulting)
						invoke Update ItemKeywordShadowRel
							invoked.HasPreferredContract = true
					if (IsManufacturerOrDistributorContract)
						include CreateTierPreferredContract
					else
						include CreatePreferredContract

		SetPreferredLineFalse is a Set Action
			restricted
			Parameters
				ParmContractGroup    is a ContractGroup
				ParmContract	     is a Contract

			Instance Selection
				where (ContractGroup       		= ParmContractGroup
				and    Contract 	       		= ParmContract
				and    PreferredLine            = true)

			Action Rules

				Instance Rules

					PreferredLine = false
					if (ItemNumberExists)
						invoke Update ItemKeywordShadowRel
							invoked.HasPreferredContract = false
					invoke Delete ContractPreferredManufacturerRel

		SetBillCode is a Set Action
			restricted
			Parameters
				ParmContractGroup		is a ContractGroup
				ParmContract			is a Contract
				ParmBillCode 			is a ConsignCode

			Instance Selection
				where (ContractGroup	= ParmContractGroup
				and    Contract			= ParmContract
				and    ItemType.Special)

			Action Rules

				Instance Rules
					ConsignCode		= ParmBillCode

		SetCanUseForCostDefaultingTrue is a Set Action
			restricted
			Parameters
				ParmContractGroup    				is a ContractGroup
				ParmContract	     				is a Contract
				ParmUpdateSpecials   				is Boolean
				ParmSetLinesForDistributorContract 	is Numeric 1
					States 
						SetAllLinesToYes                        value is 0
						SetOnlyManufacturerRelatedLines         value is 1
						SetOnlyDistributorRelatedLines          value is 2 		
			Instance Selection
				where (ContractGroup       		= ParmContractGroup
				and    Contract 	       		= ParmContract
				and    CanUseForCostDefaulting 	= false
				and    !OnHold)

			Local Fields 
				OKToSet is Boolean 
			
			Action Rules
				Instance Rules
					OKToSet = false 
					if (ItemNumberExists
					or  ServiceItemType)
						if (!IsDistributorContract)
							OKToSet = true 
						else
						if (IsDistributorContract)
							if (ParmSetLinesForDistributorContract = 0)
								OKToSet = true 
							else 
							if (ParmSetLinesForDistributorContract = 1
							and Contract != ManufacturerContract)
								OKToSet = true 
							else 
							if (ParmSetLinesForDistributorContract = 2
							and Contract = ManufacturerContract)
								OKToSet = true 
					else 
					if  (SpecialItem
					and (Contract.SpecialItemsWillCostDefault
					or   ParmUpdateSpecials = true))
						if (!IsDistributorContract)
							OKToSet = true 
						else
						if (IsDistributorContract)
							if (ParmSetLinesForDistributorContract = 0)
								OKToSet = true 
							else 
							if (ParmSetLinesForDistributorContract = 1
							and Contract != ManufacturerContract)
								OKToSet = true 
							else 
							if (ParmSetLinesForDistributorContract = 2
							and Contract = ManufacturerContract)
								OKToSet = true 					
					if (OKToSet)
						CanUseForCostDefaulting = true
						if (ContractLineState.Active)
							invoke TransitionToAmendment Active ContractLine

						ErrorsExist = false

						if (SpecialItem
						and ItemNumber !entered
						and VendorItem entered
						and (ContractGroup.UseManufacturerAndVendorItem = 0
						or   ContractGroup.UseManufacturerAndVendorItem = 1
						or   ContractGroup.UseManufacturerAndVendorItem = 2))					
							if (VendorItemNotItem)
								if (ContractGroup.UseManufacturerAndVendorItem = 0
								or  ContractGroup.UseManufacturerAndVendorItem = 1)
									ItemNumber = VendorItem
								else
								if (ContractGroup.UseManufacturerAndVendorItem = 2
								and Manufacturer.ManufacturerCode entered)
									ItemNumber = ManufacturerPlusVendorItem
							else
							if (VendorItemIsItem
							and ManufacturerAndVendorItemNotItem
							and (ContractGroup.UseManufacturerAndVendorItem = 1
							or   ContractGroup.UseManufacturerAndVendorItem = 2)
							and Manufacturer.ManufacturerCode entered)
								ItemNumber = ManufacturerPlusVendorItem
							else 
							if (ContractGroup.UseManufacturerAndVendorItem = 3
							and ManufacturerNumber entered
							and Manufacturer.ManufacturerCode entered)
								ItemNumber = ManufacturerNumberPlusManufacturer
							else 
							if (ContractGroup.UseManufacturerAndVendorItem = 4
							and ManufacturerNumber entered
							and Manufacturer.ManufacturerCode entered)
								ItemNumber = ManufacturerPlusManufacturerNumber  	
						IncludeAllErrorEdits = true
						include ManageErrorChecking					
						if (IsDistributorContract
						or  IsManufacturerContract)
							if (AnyLineMemberRel exists)
								invoke FastUpdateWithoutEdits AnyLineMemberRel
									invoked.UpdateCanUseForCostDefaultingTrue = true 

		SetCanUseForCostDefaultingFalse is a Set Action
			restricted
			Parameters
				ParmContractGroup    is a ContractGroup
				ParmContract	     is a Contract
				FromMember           is Boolean

			Instance Selection
				where (ContractGroup       		= ParmContractGroup
				and    Contract 	       		= ParmContract
				and    CanUseForCostDefaulting = true
				and   (FromMember
				or    !HasBeenActivated))

			Action Rules
				Instance Rules
					CanUseForCostDefaulting = false
					ErrorsExist = false
					for each AnyLineMemberRel
						invoke UpdateErrors each
							invoked.ParmErrorsExist = ErrorsExist
					invoke Purge ContractLineErrorRel
					if (IsDistributorContract
					or  IsManufacturerContract)
						if (AnyLineMemberRel exists)
							invoke FastUpdateWithoutEdits AnyLineMemberRel
								invoked.UpdateCanUseForCostDefaultingFalse = true

		CreateProcurementTemplateLinesFromContract is a Set Action
			restricted
			Parameters
				PrmContractGroup					is a ContractGroup
				PrmContract							is a Contract
				PrmProcurementTemplate              is a ProcurementTemplate
				QuantityOfOne                       is Boolean

			Instance Selection
				where (ContractGroup       = PrmContractGroup
				and    Contract 	       = PrmContract
				and    CanUseForCostDefaulting
				and    !ErrorsExist
				and    !ContractLineState.Closed)

			Action Rules
				Instance Rules
					LocalProcurementTemplate = PrmProcurementTemplate
                    if (!ServiceItemType)
                        if (ProcurementTemplateLineForThisTemplateRel !exists)
                            invoke Create ProcurementTemplateLine
                                invoked.Contract            = Contract
                                invoked.ContractLine        = ContractLine
                                invoked.ProcurementGroup        = PrmContractGroup
                                invoked.ProcurementTemplate     = PrmProcurementTemplate
                                if (SpecialItem)
                                    invoked.SpecialItemDescription = ItemDescription
                                if (QuantityOfOne = true)
                                    invoked.Quantity            = 1
                    else 
                    if (ServiceItemType)
                        if (ProcurementTemplateLineForThisTemplateRel !exists
                        and ProcurementTemplateLineForThisTemplateServiceRel !exists)
                            invoke Create ProcurementTemplateLine
                                invoked.Contract            = Contract
                                invoked.ContractLine        = ContractLine
                                invoked.ProcurementGroup    = PrmContractGroup
                                invoked.ProcurementTemplate = PrmProcurementTemplate
                                invoked.ServiceDescription  = ItemDescription
                                invoked.CommodityCode       = CommodityCode
                                invoked.ServiceCode         = ServiceCode
                                if (QuantityOfOne = true)
                                    invoked.Quantity        = 1

		SetCreateDistributorContractLine is a Set Action
			restricted
			Parameters
				ParmContractGroup is a ContractGroup
				ParmContract	  is a Contract
				ParmTrueFalse     is Boolean

			Instance Selection
				where (ContractGroup       = ParmContractGroup
				and    Contract 	       = ParmContract)

			Action Rules
				Instance Rules
					if (ParmTrueFalse = true)
						CreateDistributorContractLine = true
					if (ParmTrueFalse = false)
						CreateDistributorContractLine = false
						if (CanUseForCostDefaulting = false)
							ErrorsExist = false
							for each AnyLineMemberRel
								invoke UpdateErrors each
									invoked.ParmErrorsExist = ErrorsExist
							invoke Purge ContractLineErrorRel

					if (ParmTrueFalse = true
					and CreateDistributorContractLine = !old CreateDistributorContractLine)
						IncludeAllErrorEdits = true
						include ManageErrorChecking

		FastUpdateToEvent is an Update Action 
			restricted
			bypass field rules

			Action Rules 
				include UpdateExitRules
				if (LocalFromOtherLinesToMatch = true)
					if (ItemType.Special)
						include DefaultItemNumbers 

		FastUpdateToEventClear is an Update Action
			restricted
			bypass field rules
			Action Rules
				initialize ToEventCompany
				initialize ToEventNumber
				initialize ToEventLine

		ChangeVendorItemCheck is a Set Action
			restricted
			Parameters
				PrmContractGroup 		is a ContractGroup
				PrmContract      		is a Contract
				CreateNewVendorItems 	is Boolean
				InactivateOldVendorItems is Boolean
				OldVendor               is a Vendor

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules

				Contract Set Rules

					Exit Rules

						invoke CheckForContractLineErrors Contract

				Instance Rules

					include DefaultItemNumbers

					if (ItemNumberExists
					and ItemNumber.Active)
						if (CreateNewVendorItems
						and !VendorItemExists
						and !VendorItemExistsFromManufacturerNumber
						and !LineErrorsExist
						and CanUseForCostDefaulting
						and VendorItem entered
						and !OnHold)
							invoke Create VendorItem
								invoked.ProcurementGroup        	= ContractGroup
								invoked.Item                    	= ItemNumber
								invoked.VendorItem              	= VendorItem
								invoked.Vendor                 	 	= Contract.Vendor
								invoked.Manufacturer            	= Manufacturer
								invoked.ManufacturerNumber      	= ManufacturerNumber
								invoked.LabelerIdentificationCode	= LabelerIdentificationCode
								if (POVendorItemBuyUOMTestRel exists)
									invoked.VendorBuyUOM        = UOM.UnitOfMeasure								

					if (InactivateOldVendorItems)
						LocalVendor = OldVendor
							if (OldVendorItemRel exists
							and OldVendorItemRel.Active)
								invoke Inactivate OldVendorItemRel

		UpdateDistributorFromManufacturer is a Set Action
			restricted
			Parameters
   				PrmContractGroup                 is a ContractGroup
   				PrmContract                      is a Contract
   				PrmUpdateOverrideLandedCost      is Boolean
   				PrmFromInterfaceUpdates          is Boolean

			Instance Selection
				where (PrmContractGroup      	= ContractGroup
				and    PrmContract           	= Contract
				and    DistributorModifications = 1)

			Sort Order
				ContractGroup
				Contract
				DistributorModifications

			Action Rules


				Instance Rules

					for each MfgToDistributorLineRels
						if (each.UOM != UOM)
							LocalUOM = UOM

						invoke FastUpdate each
							invoked.NonManualUpdate             = true
							invoked.LocalFromInterfaceUpdates   = PrmFromInterfaceUpdates
							invoked.FutureCost              = each.BaseCost
							invoked.BaseCost 				= BaseCost
							invoked.CostOption                  = CostOption
							if (EffectiveDate >= each.EffectiveDate
							and EffectiveDate < each.ExpirationDate
							and EffectiveDate >= each.Contract.EffectiveDate)
								invoked.EffectiveDate           = EffectiveDate
							else
							if (EffectiveDate < each.EffectiveDate
							and EffectiveDate >= each.Contract.EffectiveDate)
								invoked.EffectiveDate           = EffectiveDate
							else
							if (EffectiveDate < each.EffectiveDate
							and EffectiveDate < each.Contract.EffectiveDate)
								invoked.EffectiveDate           = each.Contract.EffectiveDate
							if (ExpirationDate <= each.ExpirationDate
							and ExpirationDate > each.EffectiveDate
							and ExpirationDate <= each.Contract.ExpirationDate)
								invoked.ExpirationDate          = ExpirationDate
							else
							if (ExpirationDate > each.ExpirationDate
							and ExpirationDate <= each.Contract.ExpirationDate)
								invoked.ExpirationDate          = ExpirationDate
							else
							if (ExpirationDate > each.ExpirationDate
							and ExpirationDate > each.Contract.ExpirationDate)
								invoked.ExpirationDate          = each.Contract.ExpirationDate
							invoked.UOM 						= UOM
							invoked.GlobalTradeItemNumber       = GlobalTradeItemNumber
							invoked.LowUOMCode                  = LowUOMCode 
							invoked.LowUOMCodeGTIN              = LowUOMCodeGTIN
							invoked.LowUOMCodeHibccUPN          = LowUOMCodeHibccUPN
							invoked.LabelerIdentificationCode	= LabelerIdentificationCode
							invoked.Manufacturer                = Manufacturer
							if (ItemType.Special)
								if (each.VendorItem = each.ManufacturerNumber)
									invoked.VendorItem              = ManufacturerNumber 
								if (each.ItemNumber = each.ManufacturerNumber)
									invoked.ItemNumber              = ManufacturerNumber
							invoked.ManufacturerNumber 			= ManufacturerNumber
							if (each.ItemType.Special)
								invoked.CommodityCode 				= CommodityCode
								invoked.ItemDescription 			= ItemDescription
								invoked.ItemDescription2 			= ItemDescription2
								invoked.ItemDescription3            = ItemDescription3
								invoked.GenericName					= GenericName
								invoked.Upc 						= Upc
								invoked.Sku 						= Sku
								invoked.HibccUpn 					= HibccUpn
								invoked.LowUOMCodeHibccUPN          = LowUOMCodeHibccUPN
								invoked.UccEanUpn					= UccEanUpn
								invoked.NdcNbr 						= NdcNbr
								invoked.UNSPSCCode 					= UNSPSCCode
								invoked.MajorPurchasingClass		= MajorPurchasingClass
								invoked.MinorPurchasingClass		= MinorPurchasingClass
								invoked.MajorInventoryClass			= MajorInventoryClass
								invoked.MinorInventoryClass			= MinorInventoryClass
								invoked.UOMConversion               = UOMConversion
								invoked.HCPCSCode                   = HCPCSCode
								invoked.Latex                       = Latex
								invoked.GMDNPTCode                  = GMDNPTCode
								invoked.CriticalItem			    = CriticalItem
								invoked.PersonalProtectiveEquipment = PersonalProtectiveEquipment
								invoked.UsageIdentifier             = UsageIdentifier
								invoked.PatientChargeable           = PatientChargeable 
								invoked.ChargeNumber                = ChargeNumber
								invoked.UserField1 					= UserField1
								invoked.UserField2 					= UserField2		
								invoked.UserField3 					= UserField3	
								invoked.UserField4 					= UserField4	
								invoked.UserField5 					= UserField5	
								invoked.UserFieldN1 				= UserFieldN1				
								invoked.UserFieldN2 				= UserFieldN2				
								invoked.UserFieldN3 				= UserFieldN3
								invoked.Sterile              		= Sterile        
								invoked.SingleUse                   = SingleUse
								invoked.Reusable                    = Reusable
								invoked.Reprocessed                 = Reprocessed
								invoked.Implantable                 = Implantable
								invoked.ContainsHumanTissue         = ContainsHumanTissue
								invoked.Pharmaceutical              = Pharmaceutical
								invoked.Dressing                    = Dressing
								invoked.Narcotic                    = Narcotic
								invoked.Instrument                  = Instrument
								invoked.Drugs                       = Drugs
								invoked.Analytics                   = Analytics	

						LocalMfgContract		= each.Contract
						LocalMfgContractLine	= each.ContractLine
						invoke UpdateMemberForDistributorContract DistributorLineMemberRel
							invoked.PrmUpdateOverrideLandedCost  = PrmUpdateOverrideLandedCost
							invoked.PrmUOM                       = LocalUOM

					DistributorModifications = 0

		CreateInactiveVendorItemError is an Instance Action   
			restricted
			Parameters
				ResetContractLinesToSpecialUsing is Numeric 1

			Action Rules

				if (ResetContractLinesToSpecialUsing > 0)

					LocalItemNumber     = ItemNumber

					ItemType 			= 3
					SpecialItemOptions 	= 1 
					if (ResetContractLinesToSpecialUsing = 1)
						if (VendorItemNotItem)
							if (ContractGroup.UseManufacturerAndVendorItem = 0
							or  ContractGroup.UseManufacturerAndVendorItem = 1)
								ItemNumber = VendorItem
						else
						if (ContractGroup.UseManufacturerAndVendorItem = 2
						and Manufacturer.ManufacturerCode entered)
							ItemNumber = ManufacturerPlusVendorItem
						else
						if (VendorItemIsItem
						and ManufacturerAndVendorItemNotItem
						and SpecialItem
						and (ContractGroup.UseManufacturerAndVendorItem = 1
						or   ContractGroup.UseManufacturerAndVendorItem = 2)
						and Manufacturer.ManufacturerCode entered)
							ItemNumber = ManufacturerPlusVendorItem
						else
							initialize ItemNumber
					else
					if (ResetContractLinesToSpecialUsing = 2)
						if (!ManufacturerNumberIsItem
						and ContractGroup.UseManufacturerAndVendorItem < 3)
							ItemNumber = ManufacturerNumber
						else 
						if  (ContractGroup.UseManufacturerAndVendorItem = 3
						and  ManufacturerNumber entered
						and  Manufacturer.ManufacturerCode entered)
							ItemNumber = ManufacturerNumberPlusManufacturer
						else 
						if ((ManufacturerNumberIsItem
						or	 ContractGroup.UseManufacturerAndVendorItem = 4)
						and  ManufacturerNumber entered
						and  Manufacturer.ManufacturerCode entered)
							ItemNumber = ManufacturerPlusManufacturerNumber  
						else
							initialize ItemNumber 

					for each RebateQualifierItemsRel
						invoke UpdateBlankItemNumber each
							invoked.PrmItemNumber = ItemNumber

					if (IsManufacturerOrDistributorContract)
						for each ContractLineMember set
							invoke UpdateItemNumber each 
								invoked.PrmItemNumber	= ItemNumber
					else
					if (!IsManufacturerOrDistributorContract
					and PreferredLine
					and HasBeenActivated)
						for each ContractParticipantRels
							invoke CreateOrUpdatePreferredContract each
								invoked.ParmOldItem 	   	= LocalItemNumber
								invoked.ParmOldVendorItem 	= VendorItem
								invoked.ParmFromUpdate 		= true
								invoked.ParmItem  			= ItemNumber
								invoked.ParmVendorItem      = VendorItem

					for each ProcurementTemplateLineRel
						invoke Update each
							invoked.SpecialItem 		   = true
							invoked.Item        		   = ItemNumber
							invoked.SpecialItemDescription = ItemDescription
							invoked.Manufacturer           = Manufacturer 
							invoked.ManufacturerNumber     = ManufacturerNumber

					if (IsManufacturerContract)
						if (ContractLineImportByManufacturerDirect)	
							for each ContractLineImportDirectRel
								invoke FastUpdate each
									invoked.ItemType    = 3
									invoked.ItemNumber  = ItemNumber
						else			
						if (ContractLineImportByManufacturer)
							for each ContractLineImportByManufacturerGPORel
								invoke FastUpdate each
									invoked.ItemType    = 3
									invoked.ItemNumber  = ItemNumber

					if (ContractLineSpecialItemLinkRel !exists)
						invoke Create ContractLineSpecialItemLink
							invoked.Item            = LocalItemNumber
							invoked.ItemGroup       = ContractGroup
							invoked.Contract        = Contract
							invoked.ContractLine    = ContractLine
							invoked.SpecialItem     = ItemNumber
							invoked.UnitOfMeasure   = UOM

			Exit Rules

				if (ResetContractLinesToSpecialUsing > 0)
					include BuildTextIndexes
					if  (HasBeenActivated
					and !Contract.StandingPurchaseType
					and !Contract.ServicePurchaseType)
						CreateKeywordShadow = true
						include ManageKeywordShadow
				
				IncludeBackOfficeEdits = true	
				include CanUseForCostDefaultingRules			
				include ManageErrorChecking	
				
				if (ResetContractLinesToSpecialUsing = 0)
					include ConsolidatedItemMasterRules			

		RemoveInactiveVendorItemError is an Instance Action
			restricted
			Parameters
				ChangeToItem 		is like Item

			Action Rules

				if (ChangeToItem entered)
					invoke ChangeSpecialItemToItem
						invoked.PrmNewItemNumber   = ChangeToItem
						invoked.FromRemoveInactive = true

			Exit Rules

				if (ChangeToItem !entered)
					
					IncludeBackOfficeEdits	= true
					include ManageErrorChecking
					include ConsolidatedItemMasterRules

		UpdateFromItem is an Instance Action
			restricted
			Action Rules

				ItemDescription 	 		= ItemNumber.Description
				ItemDescription2 	 		= ItemNumber.Description2
				ItemDescription3 	 		= ItemNumber.Description3
				CommodityCode    	 		= ItemNumber.CommodityCode
				MajorPurchasingClass 		= ItemNumber.MajorPurchasingClass
				MinorPurchasingClass 		= ItemNumber.MinorPurchasingClass
				MajorInventoryClass  		= ItemNumber.MajorInventoryClass
				MinorInventoryClass  		= ItemNumber.MinorInventoryClass
				UNSPSCCode           		= ItemNumber.UNSPSCCode
				GenericName          		= ItemNumber.GenericName
				ChargeNumber         		= ItemNumber.ChargeNumber                    
				Latex                   	= ItemNumber.Latex                 
				HCPCSCode               	= ItemNumber.HCPCSCode       
				ConsignCode					= ItemNumber.ConsignCode
				PersonalProtectiveEquipment = ItemNumber.PersonalProtectiveEquipment   
				GMDNPTCode              	= ItemNumber.GMDNPTCode         
				HSNSACCode              	= ItemNumber.HSNSACCode 
				Sterile                     = ItemNumber.Sterile    
				SingleUse                   = ItemNumber.SingleUse     
				Reusable                    = ItemNumber.Reusable
				Reprocessed                 = ItemNumber.Reprocessed
				Implantable                 = ItemNumber.Implantable
				ContainsHumanTissue         = ItemNumber.ContainsHumanTissue  
				Pharmaceutical              = ItemNumber.Pharmaceutical
				Dressing                    = ItemNumber.Dressing 
				Bioabsorbable              	= ItemNumber.Bioabsorbable	
				Narcotic                    = ItemNumber.Narcotic
				Instrument                  = ItemNumber.Instrument 
				Drugs                       = ItemNumber.Drugs 
				Analytics                   = ItemNumber.Analytics 
				PatientChargeable           = ItemNumber.PatientChargeable
				ClinicalSystemUse           = ItemNumber.ClinicalSystemUse
				UsageIdentifier             = ItemNumber.UsageIdentifier
				CriticalItem                = ItemNumber.CriticalItem
				MajorPPEClass               = ItemNumber.MajorPPEClass
				MinorPPEClass 			    = ItemNumber.MinorPPEClass
				HazardCode                  = ItemNumber.HazardCode 
				if (NdcNbrExistsForItemRel exists)
					NdcNbr 	= NdcNbrExistsForItemRel.NationalDrugCode
				else
					NdcNbr  = blank 				
				if (HibccUpnExistsForItemRel exists)
					HibccUpn 	= HibccUpnExistsForItemRel.HIBCCItemUPN
				else 
					HibccUpn    = blank 
				if (UccEanUpnExistsForItemRel exists)
					UccEanUpn 	= UccEanUpnExistsForItemRel.UCCEANItemUPN
				else 
					UccEanUpn   = blank 	
				if (UPCExistsForItemRel exists)
					Upc = UPCExistsForItemRel.ItemUPC
				else 
					Upc = blank 
				if (SKUExistsForItemRel exists)
					Sku = SKUExistsForItemRel.ItemSKU
				else 
					Sku = blank 
				if (IcitemgtinManfDefaultRel exists)
					GlobalTradeItemNumber = IcitemgtinManfDefaultRel.ItemGTIN 
				else 
				if (IcitemgtinManfRel exists)
					GlobalTradeItemNumber = IcitemgtinManfRel.ItemGTIN 
				else 
					GlobalTradeItemNumber = blank
				if (LowUOMCodeHibccUPNDefaultRel exists
				and ItemNumber.StockUOM != UOM.UnitOfMeasure)
					LowUOMCodeHibccUPN    = LowUOMCodeHibccUPNDefaultRel.HIBCCItemUPN
				else 
					LowUOMCodeHibccUPN    = blank

				include BuildTextIndexes
				IncludeAllErrorEdits = true
				include ManageErrorChecking

		CreateInactiveItemUOMError is an Instance Action
			restricted
			Action Rules

				invoke Create ContractLineError set
					invoked.ErrorMessageNumber 	= 94

				ErrorsExist = true
				for each AnyLineMemberRel
						invoke UpdateErrors each
							invoked.ParmErrorsExist = ErrorsExist

		RemoveInactiveItemUOMError is an Instance Action
			restricted
			Action Rules

				invoke Purge InactiveItemUOMLineErrorRel

			Exit Rules
				if (!LineErrorsExist)
					ErrorsExist = false
					for each AnyLineMemberRel
						invoke UpdateErrors each
							invoked.ParmErrorsExist = ErrorsExist

		RemoveInvalidItemUOMError is an Instance Action
			restricted
			Action Rules

				invoke Purge InvalidItemUOMLineErrorRel

			Exit Rules
				if (!LineErrorsExist)
					ErrorsExist = false
					for each AnyLineMemberRel
						invoke UpdateErrors each
							invoked.ParmErrorsExist = ErrorsExist

		CreateInactiveGTINError is an Instance Action
			restricted
			Action Rules

				invoke Create ContractLineError set
					invoked.ErrorMessageNumber 	= 50

				ErrorsExist = true
				for each AnyLineMemberRel
					invoke UpdateErrors each
						invoked.ParmErrorsExist = ErrorsExist

		RemoveInactiveGTINError is an Instance Action
			restricted
			Action Rules

				invoke Purge InactiveGTINLineErrorRel

			Exit Rules
				if (!LineErrorsExist)
					ErrorsExist = false
					for each AnyLineMemberRel
						invoke UpdateErrors each
							invoked.ParmErrorsExist = ErrorsExist

		TestMismatchWithVendorUOMError is an Instance Action
			restricted
			Action Rules

				include BackOfficeDependentLineEdits

			Exit Rules

				if (!LineErrorsExist)
					ErrorsExist = false
				else
				if (LineErrorsExist)
					ErrorsExist = true

				for each AnyLineMemberRel
					invoke UpdateErrors each
						invoked.ParmErrorsExist = ErrorsExist

		CloseCommitments is an Instance Action
			completion message is "CommitmentsClosed"
			valid when (OpenCommitments)

			Parameters
				FromHeaderCloseCommitment is Boolean

			Action Rules

				CommitmentsClosed = true

				if (ContractLineDistributionSpreadRel exists)
					for each ContractLineDistributionSpreadRel
						invoke CloseSpreadCommitments each
				else
					for each ContractLineDistribution set
						invoke CloseCommitments each

		HoldContractLine is an Instance Action
			default label is "HoldLine"
			valid when (HoldContractLineAllowed)
			run in foreground
			completion message is "ContractLineIsOnHold"
			Parameters
				PrmContractGroup    is a ContractGroup
				PrmContract         is a Contract
				PrmContractLine     is a ContractLine
				PrmHoldCode         is an ProcurementReasonCode
			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
				PrmContract
					initial value is Contract
				PrmContractLine
					initial value is ContractLine

			Action Rules
				OnHold = true
				for each AnyLineMemberRel
					invoke HoldLineMemberFromLineOrPoitemven each
				if (IsManufacturerContract)
					for each DistributorContractLineRel
						invoke HoldContractLine each
				ProcurementReasonCode    = PrmHoldCode
				include ConsolidatedItemMasterRules

		HoldAllContractLines is a Set Action  
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract

			Instance Selection
				where  (ContractGroup = PrmContractGroup
				and     Contract 	 = PrmContract
				and    (HoldContractLineAllowed
				or     (OnHold
				and     HoldCodeEntered)))
			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Instance Rules
					OnHold = true
					for each AnyLineMemberRel
						invoke HoldLineMemberFromContract each
					if (HoldCodeEntered)
						initialize ProcurementReasonCode
					include ConsolidatedItemMasterRules

		HoldAllRelatedDistributorContractLines is a Set Action  
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract

			Instance Selection
				where (ContractGroup 			= PrmContractGroup
				and    ManufacturerContract 	= PrmContract
				and    HoldContractLineAllowed
				and    IsDistributorContract)

			Sort Order
				ContractGroup
				Contract
				ManufacturerContract
				ManufacturerContractLine

			Action Rules
				Instance Rules
					OnHold = true
					for each AnyLineMemberRel
						invoke HoldLineMemberFromLineOrPoitemven each

		HoldAllContractLinesFromReject is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract 	 = PrmContract
				and    HoldContractLineAllowed)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Instance Rules
					OnHold = true
					for each AnyLineMemberRel
						invoke HoldLineMemberFromContract each
					make transition to Inactive
					include ConsolidatedItemMasterRules

		RemoveContractLineHold is an Instance Action
			valid when (CanRemoveHold)
			completion message is "ContractLineHoldHasBeenRemoved"

			Action Rules
				if (ItemType.Itemmast)
					constraint (!ItemUOMRel.ValidForBuying.Inactive)
						"<UOM.UnitOfMeasure>IsAnInactiveBuyUOMForThisItem"
					constraint (ItemUOMRel exists)
						"<UOM.UnitOfMeasure>IsAnInvalidUOMForThisItem"
					if (!ItemNumber.IsCatchWeightItem)
						constraint (ItemUOMRel.OKForBuying)
							"<UOM.UnitOfMeasure>IsNotAValidBuyUOMForThisItem"

				if (CanRemoveHold)
					OnHold = false
					HoldManufacturerLineOnly = false
					initialize ProcurementReasonCode

				LocalRemoveHold = true
				include UpdateExitRules

			Exit Rules
				for each AnyLineMemberRel
					invoke RemoveHoldLineMemberFromLine each
				if (IsManufacturerContract)
					for each DistributorContractLineRel
						invoke RemoveContractLineHold each

		RemoveHoldAllContractLines is a Set Action 
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract 	 = PrmContract
				and    CanRemoveHold)

			Action Rules
				Instance Rules

					OnHold = false
					HoldManufacturerLineOnly = false

					LocalRemoveHold = true
					include UpdateExitRules

					if (IsManufacturerOrDistributorContract)

						for each AnyLineMemberRel
							invoke RemoveHoldLineMemberFromLine each

					else
						for each AnyLineMemberRel
							invoke RemoveHoldLineMemberFromContract each

		RemoveHoldAllRelatedDistributorContractLines is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract

			Instance Selection
				where (ContractGroup 			= PrmContractGroup
				and    ManufacturerContract 	= PrmContract
				and    CanRemoveHoldFromManuf
				and    IsDistributorContract)

			Action Rules
				Instance Rules

					OnHold = false
					HoldManufacturerLineOnly = false

					LocalRemoveHold = true
					include UpdateExitRules

					for each AnyLineMemberRel
						invoke RemoveHoldLineMemberFromLine each

		RemoveHoldAllContractLinesReactivateDraft is a Set Action
			restricted
			Parameters
				PrmContractGroup        is a ContractGroup
				PrmContract	            is a Contract

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract 	 = PrmContract
				and   !ContractLineState.Closed
				and    CanRemoveHold)

			Action Rules
				Instance Rules

					OnHold = false
					HoldManufacturerLineOnly = false
					for each AnyLineMemberRel
						invoke RemoveHoldLineMemberFromContract each

					LocalRemoveHold = true
					include UpdateExitRules

					make transition to Draft

		RemoveHoldAllContractLinesReactivateAmendment is a Set Action
			restricted
			Parameters
				PrmContractGroup        is a ContractGroup
				PrmContract	            is a Contract

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract 	 = PrmContract
				and   !ContractLineState.Closed
				and    CanRemoveHold)

			Action Rules
				Instance Rules

					OnHold = false
					HoldManufacturerLineOnly = false

					LocalRemoveHold = true
					include UpdateExitRules

					if (IsManufacturerOrDistributorContract)

						for each AnyLineMemberRel
							invoke RemoveHoldLineMemberFromLine each

					else
						for each AnyLineMemberRel
							invoke RemoveHoldLineMemberFromContract each

					make transition to Amendment

		HoldManufacturerLineOnly is an Instance Action
			valid when (HoldManufacturerLineOnlyAllowed)
			completion message is "LineIsOnHold"

			Parameters
				PrmContractGroup    is a ContractGroup
				PrmContract         is a Contract
				PrmContractLine     is a ContractLine
				PrmHoldCode         is an ProcurementReasonCode
			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
				PrmContract
					initial value is Contract
				PrmContractLine
					initial value is ContractLine

			Action Rules
				HoldManufacturerLineOnly = true
				ProcurementReasonCode                      = PrmHoldCode

				for each LineMemberTierRel
					invoke HoldManufacturerLineMemberOnly each
				include ConsolidatedItemMasterRules

		HoldAllManufacturerLinesOnly is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract
				FromContractHold is Boolean

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract 	 = PrmContract
				and    HoldManufacturerLineOnlyAllowed)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Instance Rules
					HoldManufacturerLineOnly = true

					for each LineMemberTierRel
						invoke HoldManufacturerLineMemberOnlyFromContract each
					include ConsolidatedItemMasterRules

		RemoveManufacturerLineOnlyHold is an Instance Action
			valid when (CanRemoveManufacturerLineOnlyHold)
			Action Rules

				if (ItemType.Itemmast)
					constraint (!ItemUOMRel.ValidForBuying.Inactive)
						"<UOM.UnitOfMeasure>IsAnInactiveBuyUOMForThisItem"
					constraint (ItemUOMRel exists)
						"<UOM.UnitOfMeasure>IsAnInvalidUOMForThisItem"
					if (!ItemNumber.IsCatchWeightItem)
						constraint (ItemUOMRel.OKForBuying)
							"<UOM.UnitOfMeasure>IsNotAValidBuyUOMForThisItem"

				HoldManufacturerLineOnly = false
				initialize ProcurementReasonCode
				for each LineMemberTierRel
					invoke RemoveManufacturerLineMemberOnlyHold each

				LocalRemoveHold = true
				include UpdateExitRules

		RemoveHoldAllManufacturerLinesOnly is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract 	 = PrmContract
				and    CanRemoveManufacturerLineOnlyHold)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Instance Rules

					HoldManufacturerLineOnly = false
					for each LineMemberTierRel
						invoke RemoveHoldManufacturerLineMemberOnlyFromContract each

					include UpdateExitRules

		CloseLine is an Instance Action
			valid when (CanCloseLine)
			subject is ContractClose
			reason code required
			action comment required

			Entrance Rules
				if (!FromContractCopy)
					constraint (!HasUnreleasedPoLine)
						"CannotCloseContractLine,UnreleasedPurchaseOrderLinesExistThatReferenceThisContract"

					constraint (!HasUnreleasedReqLine)
						"CannotCloseContractLine,UnreleasedRequisitionLinesExistThatReferenceThisContractLine;MustReleasePriorToClosing"

					constraint (!HasPurchaseOrderInterface)
						"CannotCloseContractLine,UnprocessedPurchaseOrderRequestsExistThatReferenceThisContractLine;MustCreatePOPriorToClosing"

					if (ServicePurchaseTypeContract)
						constraint (NoUnreleasedInvoiceDetailsExist)
							"CannotCloseContractLine,UnmatchedInvoiceDetailsExistForServiceContract;MustMatchPriorToClosing"
				
				if (IsManufacturerContract)
					constraint (NoUnreleasedDistPoLinesExist)
						"CannotCloseContractLine,UnreleasedPoLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedPORel.Contract>;Line<first DistContractLinesWithUnreleasedPORel.ContractLine>"
					constraint (NoUnreleasedDistReqLinesExist)
						"CannotCloseContractLine,UnreleasedRequisitionLinesExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnreleasedReqRel.Contract>;<first DistContractLinesWithUnreleasedReqRel.ContractLine>"
					constraint (NoUnprocessedDistPOInterfaceRecordsExist)
						"CannotCloseContractLine,UnprocessedPurchaseRequestsExistThatReferenceThisManufacturerContractForDistributorContract<first DistContractLinesWithUnprocessedRequestsRel.Contract>;<first DistContractLinesWithUnprocessedRequestsRel.ContractLine>"

					invoke CloseAllRelatedDistributorContractLines ContractLine
						invoked.PrmContractGroup = ContractGroup
						invoked.PrmContract      = Contract
						invoked.PrmContractLine  = ContractLine

			Action Rules
				if (OpenPolinesByContractRel exists)
					confirmation required
						"Warning;OpenPOLinesExistForContractLine.ContractLineWillBeClosedAndNoFurtherProcessingOfContractLineWillBeAllowed-NotEvenReopen.POLinesWillBeAbleToFinishHowever.DoYouWantToContinue?"
				else
					confirmation required
						"Warning;ContractLineWillBeClosedAndNoFurtherProcessingOfThisContractLineWillBeAllowed-NotEvenReopen.DoYouWantToContinue?"

				invoke CloseCommitments

				include LineCloseProcess

				if (NonClosedLineRel !exists)

					invoke CloseContractFromLine Contract

			Exit Rules

				include LineCloseProcessExit
				
				if (CanUseForCostDefaulting
				or  CanUseForInvoicePayment)
					if (LifetimeMaximumAmount entered)
						increment Contract.TotalLineMaximumAmount by (0 - LifetimeMaximumAmount)
				
		CloseAllContractLines is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and    Contract 	 = PrmContract
				and   !ContractLineState.Closed)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Contract Set Rules
					Exit Rules
						for each Contract.GPORelatedContractCreateRel
							invoke Delete each
						for each Contract.GPORelatedContractUpdateRel
							invoke Delete each

						invoke PurgeLineErrors ContractLineError
							invoked.PrmContractGroup = ContractGroup
							invoked.PrmContract 	 = Contract

				Instance Rules

					LocalFromHeaderClose = true
					include LineCloseProcess

					include LineCloseProcessExit 

		DeleteAllDistributorContractLinesForAManufacturer is a Set Action
			restricted
			Parameters
				PrmContractGroup 		is a ContractGroup
				PrmManufacturerContract is a Contract
				PrmContract	     		is a Contract

			Instance Selection
				where (ContractGroup 			= PrmContractGroup
				and    ManufacturerContract 	= PrmManufacturerContract
				and   (Contract !entered
				or    (Contract  entered
				and    Contract                 = PrmContract)))

			Sort Order
				ContractGroup
				Contract
				ManufacturerContract
				ManufacturerContractLine

			Action Rules
				Instance Rules

					if (QuantityOrdered > 0
					or  AmountOrdered > 0
					or  HasUnreleasedPoLine
					or  HasUnreleasedReqLine
					or  HasPurchaseOrderInterface
					or !NoUnreleasedDistReqLinesExist
					or !NoUnprocessedDistPOInterfaceRecordsExist
					or !NoUnreleasedDistPoLinesExist)
						invoke CloseLine 
					else 
						FromMassDelete = true 
						invoke Delete 

		CloseAllRelatedDistributorContractLines is a Set Action
			restricted
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContract	     is a Contract
				PrmContractLine  is a ContractLine

			Instance Selection
				where (ContractGroup 			= PrmContractGroup
				and    ManufacturerContract 	= PrmContract
				and   !ContractLineState.Closed
				and   (PrmContractLine = 0
				or     PrmContractLine = ManufacturerContractLine)
				and    IsDistributorContract)

			Sort Order
				ContractGroup
				Contract
				ManufacturerContract
				ManufacturerContractLine

			Action Rules
				Instance Rules

					if (LineErrorsExist)
						for each ContractLineErrorRel
							invoke Purge each 
					LocalDistClose = true
					include LineCloseProcess

					include LineCloseProcessExit 

		UpdateEffectiveAndExpirationDate is a Set Action
			restricted
			Parameters
				PrmContractGroup  				is a ContractGroup
				PrmContract	      				is a Contract
				OldEffectiveDate                is Date
				OldExpirationDate               is Date
				PrmEffectiveDate  				is Date
				PrmExpirationDate 				is Date
				PrmManufacturerLineDateChanged  is Boolean
				PrmManufacturerContract         is a Contract
				PrmFromManufacturerContract     is Boolean
				LineUpdateOption                is Numeric 1

			Instance Selection
				where (ContractGroup = PrmContractGroup
				and   (PrmContract !entered
				or    (PrmContract entered
				and    Contract 	 = PrmContract))
				and    !LineClosed
				and   (PrmManufacturerContract !entered
				or    (PrmManufacturerContract entered
				and    PrmManufacturerContract = ManufacturerContract
				and    Contract != ManufacturerContract)))

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Contract Set Rules

					Exit Rules

						if (PrmManufacturerLineDateChanged)
							invoke UpdateEffectiveAndExpirationDate
								invoked.PrmContractGroup				= ContractGroup
								invoked.PrmEffectiveDate           		= PrmEffectiveDate
								invoked.PrmExpirationDate          		= PrmExpirationDate
								invoked.OldEffectiveDate                = OldEffectiveDate
								invoked.OldExpirationDate               = OldExpirationDate
								invoked.PrmManufacturerLineDateChanged 	= false
								invoked.PrmContract                     = blank
								invoked.PrmManufacturerContract        	= Contract
								invoked.PrmFromManufacturerContract     = true
								invoked.LineUpdateOption                = LineUpdateOption

				Instance Rules
					
					if (PrmEffectiveDate entered)
						if (Contract != ManufacturerContract)
							LocalEarliestEffective = PrmEffectiveDate
							if (MfgContractLineRel.EffectiveDate > LocalEarliestEffective)
								LocalEarliestEffective = MfgContractLineRel.EffectiveDate
							if (PrmFromManufacturerContract = false)
								if (LineUpdateOption = 1)
									if (PrmEffectiveDate >= EffectiveDate
									and PrmEffectiveDate <= MfgContractLineRel.ExpirationDate
									and EffectiveDate     = OldEffectiveDate)
										EffectiveDate = PrmEffectiveDate

									if (PrmEffectiveDate <= EffectiveDate
									and PrmEffectiveDate >= MfgContractLineRel.EffectiveDate
									and PrmEffectiveDate <= MfgContractLineRel.ExpirationDate
									and EffectiveDate     = OldEffectiveDate)
										EffectiveDate = PrmEffectiveDate

									if (PrmEffectiveDate <= EffectiveDate
									and PrmEffectiveDate <= MfgContractLineRel.EffectiveDate
									and EffectiveDate     = OldEffectiveDate)
										EffectiveDate = MfgContractLineRel.EffectiveDate
								else
								if (LineUpdateOption = 2)
									if (PrmEffectiveDate >= EffectiveDate
									and PrmEffectiveDate <= MfgContractLineRel.ExpirationDate)
										EffectiveDate = PrmEffectiveDate

									if (PrmEffectiveDate <= EffectiveDate
									and PrmEffectiveDate >= MfgContractLineRel.EffectiveDate
									and PrmEffectiveDate <= MfgContractLineRel.ExpirationDate)
										EffectiveDate = PrmEffectiveDate

									if (PrmEffectiveDate <= EffectiveDate
									and PrmEffectiveDate <= MfgContractLineRel.EffectiveDate)
										EffectiveDate = MfgContractLineRel.EffectiveDate
								else
								if (LineUpdateOption = 3)
									if (PrmEffectiveDate >= EffectiveDate
									and PrmEffectiveDate <= MfgContractLineRel.ExpirationDate)
										EffectiveDate = PrmEffectiveDate																	
							else
							if (PrmFromManufacturerContract)
								if (LineUpdateOption = 1)
									if  (PrmEffectiveDate >= Contract.EffectiveDate
									and (OldEffectiveDate 		= EffectiveDate
									or   Contract.EffectiveDate = EffectiveDate))
										EffectiveDate = PrmEffectiveDate
									else
									if (PrmEffectiveDate < Contract.EffectiveDate)
										EffectiveDate = Contract.EffectiveDate
								else
								if (LineUpdateOption = 2)
									if (PrmEffectiveDate >= Contract.EffectiveDate)
										EffectiveDate = PrmEffectiveDate
									else
									if (PrmEffectiveDate < Contract.EffectiveDate)
										EffectiveDate = Contract.EffectiveDate
							if (EffectiveDate < LocalEarliestEffective)
								EffectiveDate = LocalEarliestEffective
						else
							if (LineUpdateOption = 1)
								if  (OldEffectiveDate = EffectiveDate
								or   PrmEffectiveDate > EffectiveDate)			
									EffectiveDate = PrmEffectiveDate
							else
							if (LineUpdateOption = 2)
								EffectiveDate = PrmEffectiveDate
							else
							if (LineUpdateOption = 3)
								if (PrmEffectiveDate > EffectiveDate)
									EffectiveDate = PrmEffectiveDate

					if (PrmExpirationDate entered)
					
						if (Contract != ManufacturerContract)
							LocalLatestExpiration = PrmExpirationDate
							if (MfgContractLineRel.ExpirationDate < LocalLatestExpiration)
								LocalLatestExpiration = MfgContractLineRel.ExpirationDate						

							if (PrmFromManufacturerContract = false)
								if (LineUpdateOption = 1)
									if (PrmExpirationDate >= ExpirationDate
									and PrmExpirationDate >= MfgContractLineRel.ExpirationDate
									and OldExpirationDate  = ExpirationDate)
										ExpirationDate = MfgContractLineRel.ExpirationDate
	
									if ((PrmExpirationDate <= ExpirationDate
									and PrmExpirationDate <= MfgContractLineRel.ExpirationDate)
									or (PrmExpirationDate >= ExpirationDate
									and PrmExpirationDate <= MfgContractLineRel.ExpirationDate)
									and OldExpirationDate  = ExpirationDate)
										ExpirationDate = PrmExpirationDate
								else
								if (LineUpdateOption = 2)
									if (PrmExpirationDate >= ExpirationDate
									and PrmExpirationDate >= MfgContractLineRel.ExpirationDate)
										ExpirationDate = MfgContractLineRel.ExpirationDate
	
									if ((PrmExpirationDate <= ExpirationDate
									and PrmExpirationDate <= MfgContractLineRel.ExpirationDate)
									or (PrmExpirationDate >= ExpirationDate
									and PrmExpirationDate <= MfgContractLineRel.ExpirationDate))
										ExpirationDate = PrmExpirationDate								
								else
								if (LineUpdateOption = 3)
									if (PrmExpirationDate <= ExpirationDate)
										ExpirationDate = PrmExpirationDate											

							else
							if (PrmFromManufacturerContract)
								if (LineUpdateOption = 1)
									if  (PrmExpirationDate <= Contract.ExpirationDate
									and (OldExpirationDate 		 = ExpirationDate
									or   Contract.ExpirationDate = ExpirationDate))
										ExpirationDate = PrmExpirationDate
									else
									if (PrmExpirationDate > Contract.ExpirationDate)
										ExpirationDate = Contract.ExpirationDate
								else
								if (LineUpdateOption = 2)
									if (PrmExpirationDate <= Contract.ExpirationDate)
										ExpirationDate = PrmExpirationDate
									else
									if (PrmExpirationDate > Contract.ExpirationDate)
										ExpirationDate = Contract.ExpirationDate		
							if (ExpirationDate > LocalLatestExpiration)
								ExpirationDate = LocalLatestExpiration
						else
							if (LineUpdateOption = 1)
								if  (OldExpirationDate = ExpirationDate
								or   PrmExpirationDate < ExpirationDate)			
									ExpirationDate = PrmExpirationDate
							else
							if (LineUpdateOption = 2)
								ExpirationDate = PrmExpirationDate
							else
							if (LineUpdateOption = 3)
								if (PrmExpirationDate < ExpirationDate)
									ExpirationDate = PrmExpirationDate

					else
					if (PrmExpirationDate !entered)
						if (LineUpdateOption = 2)
							ExpirationDate = PrmExpirationDate
						else
						if (LineUpdateOption = 1)
							if (OldExpirationDate = ExpirationDate)
								ExpirationDate = PrmExpirationDate
					IncludeFrontEndEdits		= true
					IncludeDistributionEdits	= true
					include ManageErrorChecking
					include ConsolidatedItemMasterRules

					if (HasDistributionsWithCommitments
					and OldEffectiveDate != EffectiveDate)
						invoke UpdateForCommitments DistributionsWithCommitmentsRel
							invoked.FromDateChange = true 

					if (ContractLineTierCostExists)
						for each ContractLineTierCostRel
							invoke UpdateDates each
								invoked.ParmEffectiveDate   = EffectiveDate
								invoked.ParmExpirationDate  = ExpirationDate

		SelectSpecialItemsOnContract is a Set Action
			default label is "Select Contract for Item Creation"
			Parameters
				ParameterContractGroup	is a ContractGroup
					default label is "ContractGroup"
				ParameterContract		is a Contract
					default label is "Contract"
				RunGroup				is AlphaUpper 30

			Parameter Rules
				ParameterContractGroup
					required
						"ContractGroupIsRequired"
				ParameterContract
					required
						"ContractIsRequired"
					constraint (ParameterContract.Vendor entered)
						"SelectedContractMustHaveAVendor"
				RunGroup
					required

			Instance Selection
				where (ContractGroup = ParameterContractGroup
				and    Contract = ParameterContract
				and    ItemType.Special)

			Action Rules

				Instance Rules

					LocalFromContractSelection	= true
					TransientRunGroup			= RunGroup
					invoke SelectSpecialItemForItemCreation

		SelectSpecialItemForItemCreation is an Instance Action
			default label is "Select Special Item for Item Creation"
			completion message is "ItemCanBeViewedOnAllWorksheetItemsUnderRunGroup<SpecialItemRunGroup>"
			Action Rules

				if (!LocalFromContractSelection)
					if (VendorItem entered)
						constraint (!DifferentVenItemForSameMfgInfoRel exists)
							"Contract<Contract>,Line<ContractLine>WithVendorItem<VendorItem>HasTheSameManufacturerInformationAndUnitOfMeasureAsVendorItem<first DifferentVenItemForSameMfgInfoRel.VendorItem>OnContract<first DifferentVenItemForSameMfgInfoRel.Contract>,Line<first DifferentVenItemForSameMfgInfoRel.ContractLine>"

					if (CanUseForCostDefaultingSomeLevel
					and !Contract.ContractTemplate)
						constraint (Contract.Vendor entered)
							"Contract<Contract>DoesNotHaveAVendor;SupplierMustBeAssociatedWithAVendorForContractLinesThatWillBeUsedForCostDefaulting"

					constraint (!POVendorItemForSameMfgInfoRel exists)
						"VendorItem<VendorItem>OnContract<Contract>,ContractLine<ContractLine>DoesNotMatchVendorItem<first POVendorItemForSameMfgInfoRel.VendorItem>AlreadyAssociatedWithManufacturerInformation"

				if (ItemInformationWorksheetRel !exists)
					invoke CreateItemWorksheet ItemInformationWorksheet
						invoked.ItemGroup				= ContractGroup
						fill in fields from ContractLine 
							except invoked.EffectiveDate 
							except invoked.ExpirationDate
						if (TransientRunGroup entered)
							invoked.RunGroup			= TransientRunGroup
						else
							invoked.RunGroup			= "FromContract" + Contract + "Line" + ContractLine
						invoked.Description				= ItemDescription
						invoked.Description2			= ItemDescription2
						invoked.Description3			= ItemDescription3
						invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].Vendor					= Contract.Vendor
						invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].VendorItem				= VendorItem
						invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].VendorItemDescription	= VendorItemDescription
						invoked.VendorItemNew.VendorItemOccurs.VendorItemDetails[1].LabelerIdentificationCode = LabelerIdentificationCode
						invoked.StockUOM									= UOM.UnitOfMeasure
						invoked.UOMConversion   							= UOMConversion
						if (NdcNbr entered)
							invoked.NationalDrugCodeDetails.NationalDrugCode = NdcNbr
							invoked.NationalDrugCodeDetails.UnitOfMeasure    = UOM.UnitOfMeasure
						if (GlobalTradeItemNumber entered)
							invoked.ItemGTINDetails.ItemGTIN 				= GlobalTradeItemNumber
							invoked.ItemGTINDetails.UnitOfMeasure           = UOM.UnitOfMeasure
							invoked.ItemGTINDetails.FullDescription         = ItemDescription
							invoked.ItemGTINDetails.Manufacturer            = Manufacturer
							invoked.ItemGTINDetails.ManufacturerNumber      = ManufacturerNumber
						if (Sku entered)
							invoked.ItemSKUDetails.ItemSKU  				= Sku
							invoked.ItemSKUDetails.UnitOfMeasure            = UOM.UnitOfMeasure 
						if (HibccUpn entered)
							invoked.HIBCCItemUPNDetails.HIBCCItemUPN 		= HibccUpn
							invoked.HIBCCItemUPNDetails.UnitOfMeasure       = UOM.UnitOfMeasure
						if (Upc entered)
							invoked.ItemUPCDetails.ItemUPC                  = Upc
							invoked.ItemUPCDetails.UnitOfMeasure            = UOM.UnitOfMeasure
						if (UccEanUpn entered)
							invoked.UCCEANItemUPNDetails.UCCEANItemUPN		= UccEanUpn
							invoked.UCCEANItemUPNDetails.UnitOfMeasure      = UOM.UnitOfMeasure

					SelectedForItemCreation = true

					for each SameManufacturerInfoRel
						invoke FastUpdateWithoutEdits each
							invoked.PrmSelectedForItemCreation = true

		UnselectSpecialItemForItemCreation is an Instance Action
			restricted

			Action Rules
				SelectedForItemCreation = false

		UpdateSpecialItemToItemFromItem is an Instance Action
			default label is "UpdateContractLineWithItem"
			valid when (SpecialItem)
			Parameters
				PrmNewItemNumber is an Item
					default label is "Item"

			Parameter Rules
				PrmNewItemNumber
					initial value is last ItemByManufacturerRel.Item
					default to last ItemByManufacturerRel.Item

			Action Rules

				invoke ChangeSpecialItemToItem
					invoked.PrmNewItemNumber 	= PrmNewItemNumber
					invoked.CreateVendorItem 	= true
					invoked.PrmUpdateInterface	= true

		ChangeSpecialItemToItem is an Instance Action
			restricted
			Parameters
				PrmNewItemNumber			is an Item
				PrmNewVendorItem			is a VendorItem
				PrmVendor					is a Vendor
				FromAcceptSuggestedItem		is Boolean
				PrmNewManufacturer          is a Manufacturer 
				PrmNewManufacturerNumber    is a ManufacturerNumber 
				PrmFromWorksheetResult		is an ItemInformationWorksheetResult
				CreateVendorItem			is Boolean
				FromRemoveInactive			is Boolean
				PrmUpdateInterface      	is Boolean

			Action Rules

				if (PrmNewVendorItem entered)
					LocalVendorItem = VendorItem
					if (ContractLineImportDistributorRel exists)
						invoke Update first ContractLineImportDistributorRel
							invoked.ContractVendorItem = VendorItem

				if (PrmNewVendorItem.VendorBuyUOM entered)
					UOM = PrmNewVendorItem.VendorBuyUOM

				SelectedForItemCreation	= false
				if (HasBeenActivated)
					if (IsPreferredLine)
						if (!Contract.IsManufacturerOrDistributorContract)
							for each ContractParticipantRels
								invoke CreateOrUpdatePreferredContract each
									invoked.ParmOldItem			= ItemNumber
									invoked.ParmOldVendorItem	= VendorItem
									invoked.ParmFromUpdate		= true
									invoked.ParmItem			= PrmNewItemNumber
									if (PrmNewVendorItem entered)
										invoked.ParmVendorItem	= PrmNewVendorItem
									else
										invoked.ParmVendorItem	= VendorItem

					RemoveKeywordShadow = true
					include ManageKeywordShadow

				if (!FromRemoveInactive)
					if (ContractLineSpecialItemLinkRel !exists)
						invoke Create ContractLineSpecialItemLink
							invoked.Item			= PrmNewItemNumber
							invoked.ItemGroup		= ContractGroup
							invoked.Contract		= Contract
							invoked.ContractLine	= ContractLine
							invoked.SpecialItem		= ItemNumber
							invoked.UnitOfMeasure	= UOM

				ItemType				= ItemType.Itemmast
				ItemNumber				= PrmNewItemNumber
				SpecialItemOptions		= 0
				FromWorksheetResult		= PrmFromWorksheetResult

				if (PrmNewVendorItem entered)
					VendorItem			= PrmNewVendorItem
				if (PrmNewManufacturerNumber entered
				or  PrmNewManufacturer entered)
					if (PrmNewManufacturerNumber entered)
						ManufacturerNumber	= PrmNewManufacturerNumber
					if (PrmNewManufacturer entered)
						Manufacturer        = PrmNewManufacturer
				else 
				if (PrmNewVendorItem entered
				and	VendorItem exists
				and VendorItem.ManufacturerNumber entered)
					ManufacturerNumber  = VendorItem.ManufacturerNumber 
					if (VendorItem.Manufacturer entered)
						Manufacturer    = VendorItem.Manufacturer

				if (LowUOMCodeGTIN entered
				and PrmFromWorksheetResult entered
				and LowUOMCodeGTINDuplicateRel !exists)  

					invoke Create ItemGTIN	
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.ItemGTIN           				= LowUOMCodeGTIN
						invoked.FullDescription					= ItemDescription
						invoked.UnitOfMeasure.UnitOfMeasure		= LowUOMCode
						invoked.Manufacturer.ManufacturerCode	= Manufacturer.ManufacturerCode
						invoked.Manufacturer.ManufacturerDivision = Manufacturer.ManufacturerDivision
						invoked.ManufacturerNumber				= ManufacturerNumber
						invoked.Active                 			= true
						invoked.FromWorksheetResult             = PrmFromWorksheetResult

				if (LowUOMCodeHibccUPN entered
				and PrmFromWorksheetResult entered
				and LowUOMCodeHibccUPNDuplicateRel !exists)  

					invoke Create HIBCCItemUPN	
						invoked.ItemGroup						= ContractGroup
						invoked.Item                            = ItemNumber
						invoked.HIBCCItemUPN       				= LowUOMCodeHibccUPN
						invoked.ManufacturerProductDescription	= ItemDescription
						invoked.UnitOfMeasure.UnitOfMeasure		= LowUOMCode
						invoked.FromWorksheetResult             = PrmFromWorksheetResult

				initialize LabelerIdentificationCode

				for each RebateQualifierItemsRel
					invoke UpdateBlankItemNumber each
						invoked.PrmItemNumber = ItemNumber

				for each ContractLineMember set
					invoke UpdateItemNumber each
						invoked.PrmItemNumber		= ItemNumber
						if (PrmNewVendorItem entered)
							invoked.PrmVendorItem 	= PrmNewVendorItem

				for each ProcurementTemplateLineRel
					invoke Update each
						invoked.SpecialItem 			= false
						invoked.Manufacturer 			= blank
						invoked.ManufacturerNumber 		= blank
						invoked.Item         			= PrmNewItemNumber
						invoked.SpecialItemDescription 	= blank

				if (FromAcceptSuggestedItem = false)
					for each SuggestedItemsRel
						invoke Update each
							invoked.SuggestedItemResolution = 1 
				if (CanUseForCostDefaulting = false)
					include CanUseForCostDefaultingRules				
					if (CanUseForCostDefaulting = true)	
						CanUseForCostDefaulting = true
						for each ContractLineMember set
							invoke UpdateFast each
								invoked.CanUseForCostDefaulting = true

				if (IsManufacturerOrDistributorContract)
					if (ContractLineImportByManufacturerDirect)
						invoke FastUpdate ContractLineImportDirectRel
							invoked.ItemType    			 = 3
							invoked.ItemNumber               = ItemNumber
							invoked.MajorPurchasingClass     = PrmNewItemNumber.MajorPurchasingClass
							invoked.MinorPurchasingClass     = PrmNewItemNumber.MinorPurchasingClass
							invoked.MajorInventoryClass      = PrmNewItemNumber.MajorInventoryClass
							invoked.MinorInventoryClass      = PrmNewItemNumber.MinorInventoryClass
							invoked.GenericName              = PrmNewItemNumber.GenericName
							invoked.CommodityCode            = PrmNewItemNumber.CommodityCode
							invoked.ItemDescription          = PrmNewItemNumber.Description
							invoked.ItemDescription2         = PrmNewItemNumber.Description2
							invoked.ItemDescription3         = PrmNewItemNumber.Description3
							if (PrmNewVendorItem entered
							and IsDistributorContract)
								invoked.ContractVendorItem   = PrmNewVendorItem	
					else 
					if (ContractLineImportByManufacturer)
						for each ContractLineImportByManufacturerGPORel
							invoke FastUpdate each
								invoked.ItemType    			 = 3
								invoked.ItemNumber               = ItemNumber
								invoked.MajorPurchasingClass     = PrmNewItemNumber.MajorPurchasingClass
								invoked.MinorPurchasingClass     = PrmNewItemNumber.MinorPurchasingClass
								invoked.MajorInventoryClass      = PrmNewItemNumber.MajorInventoryClass
								invoked.MinorInventoryClass      = PrmNewItemNumber.MinorInventoryClass
								invoked.GenericName              = PrmNewItemNumber.GenericName
								invoked.CommodityCode            = PrmNewItemNumber.CommodityCode
								invoked.ItemDescription          = PrmNewItemNumber.Description
								invoked.ItemDescription2         = PrmNewItemNumber.Description2
								invoked.ItemDescription3         = PrmNewItemNumber.Description3
								if (PrmNewVendorItem entered
								and IsDistributorContract)
									invoked.ContractVendorItem   = PrmNewVendorItem

				initialize LowUOMCode													
			Exit Rules

				if (!LocalFromCreateItemAndVendorItem)
					IncludeFrontEndEdits 	= true
					IncludeBackOfficeEdits	= true
					include ManageErrorChecking
			
				if (CanUseForConsolidated
				or  ConsolidatedItemMasterExists
				or  ConsolidatedItemMasterByItemExists)
					include ConsolidatedItemMasterRules 

				if (CreateVendorItem
				and !HasVendorItem
				and Contract.Vendor entered
				and HasBeenActivated)

					invoke Create VendorItem
						invoked.ProcurementGroup 			= ContractGroup
						invoked.Item             			= PrmNewItemNumber
						invoked.Vendor           			= Contract.Vendor
						invoked.VendorItem       			= VendorItem
						invoked.LabelerIdentificationCode	= LabelerIdentificationCode
						invoked.FromWorksheetResult 		= PrmFromWorksheetResult
						if (POVendorItemBuyUOMTestRel exists)
							invoked.VendorBuyUOM    		= UOM.UnitOfMeasure

				if	 (MfgContractLineRel exists
				and   MfgContractLineRel.ItemType.Special)   
					invoke ChangeSpecialItemToItem MfgContractLineRel
						invoked.PrmNewItemNumber = ItemNumber
						invoked.CreateVendorItem = true


				if (DistributorContractLineRel exists)
					for each DistributorContractLineRel
						if (each.ItemType.Special)
							invoke ChangeSpecialItemToItem each
								invoked.PrmNewItemNumber = ItemNumber
								invoked.CreateVendorItem = true

				if (VendorBackorderByContractLineRel exists
				and	VendorBackorderDetailsRel not exists)
					invoke FastUpdate VendorBackorderByContractLineRel
						invoked.Item			= ItemNumber 
						invoked.VendorItem  	= VendorItem 
						invoked.RecordType  	= "VI"
						invoked.Contract    	= blank 
						invoked.ContractLine	= blank

				if (!LocalFromCreateItemAndVendorItem)
					invoke UpdateFromItem 				

		UpdateBaseCostByPercent is a Set Action
			restricted
			Parameters
				PrmContractGroup     is a ContractGroup
				PrmContract          is a Contract
   				CostUpdate	         is Percent size 5.2
   				CostEffectiveDate    is Date

			Parameter Rules
				PrmContractGroup
					required
						"ContractGroupIsRequired"
				PrmContract
					required
						"ContractIsRequired"
					constraint (PrmContract.InProgressOrActive)
						"ContractStatusCannotBeInactiveOrClosedToUpdateBaseCost"
					constraint (PrmContract.NotContractTemplate)
						"ContractCannotBeATemplate"

				CostUpdate
					required
						"CostUpdatePercentMustBeEntered"
					if (CostUpdate < 0)
						constraint (CostUpdate > -1)
							"CostUpdatePercentMustBeGreaterThan-100Percent"

				CostEffectiveDate
					if (!CostEffectiveDate entered)
						CostEffectiveDate = current corporate date
					else
						constraint (CostEffectiveDate >= current corporate date)
							"EffectiveDateCannotBePriorToCurrentDate"
					constraint (CostEffectiveDate >= PrmContract.EffectiveDate)
						"EffectiveDateCannotBePriorToContractEffectiveDate"
					if (PrmContract.ExpirationDate entered)
						constraint (CostEffectiveDate < PrmContract.ExpirationDate)
							"EffectiveDateCannotBeAfterContractExpirationDate"

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract
				and    ManufacturerContract = PrmContract
				and    BaseCost 			> 0
				and  ((CommodityCode entered
				and    CommodityCode.Active)
				or     CommodityCode !entered)
				and  ((SpecialOrService)
				or    (ItemType.Itemmast
				and   !InactiveVendorItem
				and    ItemNumber.Active
				and  ((GlobalTradeItemNumber entered
				and    ItemGTINByItemRel.Active)
				or     GlobalTradeItemNumber !entered))))

			Action Rules
				Instance Rules
					LocalIncrease = (BaseCost * CostUpdate)
					LocalBaseCost = (BaseCost + LocalIncrease)
					LocalCostEffectiveDate = CostEffectiveDate

					if (ContractLineState.Draft)
						invoke Draft.Update
							if (LocalCostEffectiveDate > current corporate date    
							and HasBeenActivated)
								invoked.effective date 		= LocalCostEffectiveDate
							if (LocalCostEffectiveDate >= EffectiveDate
							and LocalCostEffectiveDate <  ExpirationDate)
								invoked.EffectiveDate  	= LocalCostEffectiveDate
							invoked.BaseCost 	   		= RoundedBaseCost
							invoked.NonManualUpdate 	= true

						if (ContractLineTierCostRel exists)
							for each ContractLineTierCostRel
								LocalTierCost	 = each.TierCost
								LocalNewTierCost = ((LocalTierCost * CostUpdate)+ LocalTierCost)
								invoke Update ContractLineTierCostRel
									invoked.NonManualUpdate     = true
									if (LocalCostEffectiveDate > current corporate date
									and HasBeenActivated)
										invoked.effective date 		= LocalCostEffectiveDate
									if (LocalCostEffectiveDate >= EffectiveDate
									and LocalCostEffectiveDate <  ExpirationDate)
										invoked.EffectiveDate  = LocalCostEffectiveDate
									invoked.TierCost 				= LocalNewTierCost
					else
					if (ContractLineState.Amendment)
						invoke Amendment.Update
							if (LocalCostEffectiveDate > current corporate date)
								invoked.effective date 		= LocalCostEffectiveDate
							if (LocalCostEffectiveDate >= EffectiveDate
							and LocalCostEffectiveDate <  ExpirationDate)
								invoked.EffectiveDate  = LocalCostEffectiveDate
							invoked.BaseCost 	   	= RoundedBaseCost
							invoked.NonManualUpdate	= true

						if (ContractLineTierCostRel exists)
							for each ContractLineTierCostRel
								LocalTierCost	 = each.TierCost
								LocalNewTierCost = ((LocalTierCost * CostUpdate)+ LocalTierCost)
								invoke Update ContractLineTierCostRel
									invoked.NonManualUpdate    = true
									if (LocalCostEffectiveDate > current corporate date)
										invoked.effective date 		= LocalCostEffectiveDate
									if (LocalCostEffectiveDate >= EffectiveDate
									and LocalCostEffectiveDate <  ExpirationDate)
										invoked.EffectiveDate  = LocalCostEffectiveDate
									invoked.TierCost 				= LocalNewTierCost

					else
					if (ContractLineState.Active)
						if (Contract.SetActiveLineToAmendment
						and Contract.ActiveContract)
							invoke CreateAmendment Active Contract
						invoke Active.Update
							if (LocalCostEffectiveDate > current corporate date)
								invoked.effective date 		= LocalCostEffectiveDate
							if (LocalCostEffectiveDate >= EffectiveDate
							and LocalCostEffectiveDate <  ExpirationDate)
								invoked.EffectiveDate  = LocalCostEffectiveDate
							invoked.BaseCost 	   = RoundedBaseCost
							invoked.FromSetAction  	= true
							invoked.NonManualUpdate	= true
						if (ContractLineTierCostRel exists)
							for each ContractLineTierCostRel
								LocalTierCost	 = each.TierCost
								LocalNewTierCost = ((LocalTierCost * CostUpdate)+ LocalTierCost)
								invoke Update ContractLineTierCostRel
									invoked.NonManualUpdate     = true
									if (LocalCostEffectiveDate > current corporate date)
										invoked.effective date 		= LocalCostEffectiveDate
									if (LocalCostEffectiveDate >= EffectiveDate
									and LocalCostEffectiveDate <  ExpirationDate)
										invoked.EffectiveDate  = LocalCostEffectiveDate
									invoked.TierCost 				= LocalNewTierCost

		CompareForecasts is an Instance Action
			Parameters
				PrmItemGroup                is an ItemGroup
				PrmDateRange				is a DateRange
				PrmCompany					is Numeric 4
				PrmLocation					is AlphaUpper 5
				PrmRequestingLocation		is AlphaUpper 5
				PrmReceiptOrInvoiceUsage	is Numeric 1
					States
						CalculateUsageBasedOnReceipts	value is 1
						CalculateUsageBasedOnInvoices	value is 2
						ManualEntryOfUsage				value is 3
				PrmAdjustmentPercent		is Percent 3
				PrmForecastBeginPeriod		is Period
				PrmAnnualized				is Numeric 1
					States
						Yes						value is 1
						No                      value is 2
			Parameter Rules
				PrmCompany
					required
				PrmAdjustmentPercent
					default to 0
				PrmForecastBeginPeriod
					default to current period
				PrmAnnualized
					default to 2
				PrmReceiptOrInvoiceUsage
					required
						"ItemUsageCalculationQuantityOptionIsRequired"

			Local Fields
				LocalAmount										is an InternationalAmount
				LocalQuantityToUse								is a Quantity
				LocalQuantityForTier							is a Quantity
				LocalLastTierQuantity							is a Quantity
				LocalPreviousTiersAmount						is an InternationalAmount
				LocalRebateContract								is Numeric 15
				LocalRebateAmount								is an InternationalAmount
				LocalHighestRebateAmount						is an InternationalAmount
				LocalHighestRebatePercent						is Decimal 6.3
				LocalItemmast									is an Item
				LocalItemmastContractLine						is an ItemmastContractLine
				LocalPeriod										is Numeric 2
				LocalYearToDateContractAmount					is an InternationalAmount
				LocalYearToDateGrossAmount						is an InternationalAmount
				LocalPeriodPreviousTierCost						is an InternationalCost
				LocalPeriodLastTierAchieved						is AlphaUpper 4
				LocalYearToDateTotalRebateAmount 				is an InternationalAmount
				LocalPeriodTotalRebatePercent					is Decimal 6.3
				LocalYearToDateUsageQuantity					is a Quantity
				LocalPreviousPeriodYearToDateContractAmount		is an InternationalAmount
				LocalPreviousPeriodYearToDateGrossAmount		is an InternationalAmount
				LocalPreviousPeriodYearToDateTotalRebateAmount 	is an InternationalAmount
				LocalPeriodGrossAmount							is an InternationalAmount
				LocalRebateDueDate								is Date
				LocalContractRebateDueAmountArray				is a ContractRebateDueAmountArray
				LocalRebateCount								is Numeric 1
				LocalRebateDueDateChange						is Boolean
				LocalPreviousRebateDuesAmount					is an InternationalAmount
				LocalRebateDueTotalRebateAmount					is an InternationalAmount
				LocalTotalQuantityForTier						is a Quantity
				LocalRebatePeriodCount							is Numeric 2
				LocalYearToDateRebatePercent					is Decimal 6.3
				LocalPeriodForecastArray						is a UsageQuantityAmountArray
				LocalForecastPeriod								is Numeric 2
				LocalForecastDate								is Date

			Action Rules
				if (PrmDateRange	not entered)
					PrmDateRange.Begin					= DerivedOneYearAgo
					PrmDateRange.End					= current corporate date
				LocalCompany							= PrmCompany
				LocalLocation							= PrmLocation
				LocalReqLocation						= PrmRequestingLocation
				LocalDateRange							= PrmDateRange
				LocalUsageQuantityType					= PrmReceiptOrInvoiceUsage
				LocalAdjustmentPercent					= PrmAdjustmentPercent
				LocalAnnualized							= PrmAnnualized
				if  (!OriginalItemmastUsageRel exists
				and ((!PrmReceiptOrInvoiceUsage.ManualEntryOfUsage)
				or   (PrmReceiptOrInvoiceUsage.ManualEntryOfUsage
				and   PrmAdjustmentPercent not entered)))
					invoke CalculateItemUsage ItemNumber
						invoked.PrmDateRange				= LocalDateRange
						invoked.PrmAdjustmentPercent		= LocalAdjustmentPercent
						invoked.PrmCompany					= LocalCompany
						invoked.PrmLocation					= LocalLocation
						invoked.PrmRequestingLocation		= LocalReqLocation
						invoked.PrmReceiptOrInvoiceUsage	= LocalUsageQuantityType
						invoked.PrmUsageType				= LocalUsageType.Forecasting
						invoked.PrmForecastBeginPeriod		= PrmForecastBeginPeriod
				else
					LocalUsageType							= OriginalItemmastUsageRel.UsageType
					invoke FastUpdate OriginalItemmastUsageRel
						if (LocalUsageType.Negotiation)
							invoked.PrmUsageType			= LocalUsageType.Both
						else
							invoked.PrmUsageType			= LocalUsageType
						if (PrmAdjustmentPercent			= 0%
						and PrmAnnualized.No)
							invoked.PrmOriginalUsage		= true
						invoked.PrmForecastBeginPeriod		= PrmForecastBeginPeriod
					LocalYear								= PrmForecastBeginPeriod year
					LocalMonth								= PrmForecastBeginPeriod month
					LocalDay								= PrmDateRange.Begin day
					LocalForecastDate						= DerivedForecastDate
					invoke Update OriginalItemmastUsageDateRangeRel
						if (LocalUsageType.Negotiation)
							invoked.UsageType				= LocalUsageType.Both
						invoked.ForecastBeginPeriod			= PrmForecastBeginPeriod
						invoked.ForecastPeriod1				= LocalForecastDate
						invoked.ForecastPeriod2				= (LocalForecastDate + 1 month)
						invoked.ForecastPeriod3				= (LocalForecastDate + 2 months)
						invoked.ForecastPeriod4				= (LocalForecastDate + 3 months)
						invoked.ForecastPeriod5				= (LocalForecastDate + 4 months)
						invoked.ForecastPeriod6				= (LocalForecastDate + 5 months)
						invoked.ForecastPeriod7				= (LocalForecastDate + 6 months)
						invoked.ForecastPeriod8				= (LocalForecastDate + 7 months)
						invoked.ForecastPeriod9				= (LocalForecastDate + 8 months)
						invoked.ForecastPeriod10			= (LocalForecastDate + 9 months)
						invoked.ForecastPeriod11			= (LocalForecastDate + 10 months)
						invoked.ForecastPeriod12			= (LocalForecastDate + 11 months)

				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnReceipts)
					constraint (OriginalItemmastUsageRel.UsageQuantity	entered)
						"NoReceiptUsageQuantityFoundForThisDateRange"
				else
				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnInvoices)
					constraint (OriginalItemmastUsageRel.UsageQuantity	entered)
						"NoInvoiceUsageQuantityFoundForThisDateRange"

				LocalItemmast						= ItemNumber
				if (ItemmastContractLineRel !exists)
					invoke Create ItemmastContractLine
						invoked.ContractGroup			= ContractGroup
						invoked.Contract				= Contract
						invoked.ContractLine			= ContractLine
						invoked.Item					= ItemNumber
				invoke Purge ItemmastUsageContractAmountRel
				initialize LocalYearToDateContractAmount
				initialize LocalYearToDateUsageQuantity
				initialize LocalYearToDateRebatePercent
				initialize LocalPreviousPeriodYearToDateContractAmount
				initialize LocalPreviousPeriodYearToDateGrossAmount
				initialize LocalPreviousPeriodYearToDateTotalRebateAmount
				initialize LocalPreviousRebateDuesAmount
				initialize LocalPeriodLastTierAchieved
				initialize LocalRebateDueDate
				initialize LocalContractRebateDueAmountArray
				initialize LocalRebatePeriodCount
				initialize LocalAmount
				initialize LocalQuantityToUse
				initialize LocalPeriod
				initialize LocalPeriodForecastArray

				LocalPeriod 		= 1
				LocalYear			= PrmForecastBeginPeriod year
				LocalMonth			= PrmForecastBeginPeriod month
				LocalDay			= PrmDateRange.Begin day
				while (LocalPeriod	< 13)
					if (LocalMonth			< 10)
						if (LocalDay		< 10)
							LocalPeriodForecastArray.UsageQuantityAmount[LocalPeriod].PeriodBeginDate	= DerivedDateWith0Month0Day
						else
							LocalPeriodForecastArray.UsageQuantityAmount[LocalPeriod].PeriodBeginDate	= DerivedDateWith0MonthDay
					else
						if (LocalDay		< 10)
							LocalPeriodForecastArray.UsageQuantityAmount[LocalPeriod].PeriodBeginDate	= DerivedDateWith0Day
						else
							LocalPeriodForecastArray.UsageQuantityAmount[LocalPeriod].PeriodBeginDate	= DerivedDateMonthDay
					LocalMonth				+= 1
					if (LocalMonth			> 12)
						LocalMonth			= 1
						LocalYear			+= 1
					LocalPeriod 			+= 1

				LocalPeriod			= 1
				while (LocalPeriod	< 13)
					LocalForecastPeriod			= 1
					while (LocalForecastPeriod	< 13)
						if (OriginalItemmastUsageRel.PeriodUsageArray.UsageQuantityAmount[LocalPeriod].PeriodBeginDate month = LocalPeriodForecastArray.UsageQuantityAmount[LocalForecastPeriod].PeriodBeginDate month)
							LocalPeriodForecastArray.UsageQuantityAmount[LocalForecastPeriod].UsageQuantity				= OriginalItemmastUsageRel.PeriodUsageArray.UsageQuantityAmount[LocalPeriod].UsageQuantity
							LocalPeriodForecastArray.UsageQuantityAmount[LocalForecastPeriod].UsageAmount				= OriginalItemmastUsageRel.PeriodUsageArray.UsageQuantityAmount[LocalPeriod].UsageAmount
							LocalForecastPeriod		= 13
						else
							LocalForecastPeriod		+= 1
					LocalPeriod						+= 1

				initialize LocalPeriod
				for each LocalPeriodForecastArray.UsageQuantityAmount
					LocalPeriod						+= 1
					LocalAmount						+= each.UsageAmount
					LocalYearToDateUsageQuantity	+= each.UsageQuantity
					LocalPeriodBeginDate			= each.PeriodBeginDate
					LocalQuantityToUse				= LocalYearToDateUsageQuantity
					LocalPeriodPreviousTierCost		= BaseCost
					initialize LocalQuantityForTier
					initialize LocalPreviousTiersAmount
					initialize LocalPeriodGrossAmount
					initialize LocalYearToDateGrossAmount
					initialize LocalRebateDueTotalRebateAmount
					initialize LocalTotalQuantityForTier
					for each Contract.ContractTierQualifiersByPurchaseAmountRel
						if (each.PurchaseBy.PurchasePrice)
							if (each.PurchaseOperator.GreaterThan)
								if (each.PurchaseAmtPct.PurchaseAmount entered)
									LocalQuantityForTier			= ((each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount) / LocalPeriodPreviousTierCost)
									LocalTotalQuantityForTier		+= LocalQuantityForTier
									if (LocalYearToDateUsageQuantity	> LocalTotalQuantityForTier)
										LocalYearToDateGrossAmount		+= (each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount)
										LocalQuantityToUse				-= LocalQuantityForTier
										LocalLastTierQuantity			= LocalQuantityForTier
										LocalPreviousTiersAmount		= each.PurchaseAmtPct.PurchaseAmount
										if (each.ContractTier.TierMarkupDiscount.Discount)
											if (each.ContractTier.TierPricingAmtPct.TierPercent entered)
												LocalPeriodPreviousTierCost	= (BaseCost * (100% - each.ContractTier.TierPricingAmtPct.TierPercent))
											else
												LocalPeriodPreviousTierCost	= (BaseCost - each.ContractTier.TierPricingAmtPct.TierCost)
										else
										if (each.ContractTier.TierMarkupDiscount.Fixed)
											LocalPeriodPreviousTierCost		= each.ContractTier.TierPricingAmtPct.TierCost
										LocalPeriodLastTierAchieved			= each.ContractTier
									else
										end for each
							else
							if (each.PurchaseOperator.GreaterThanOrEqualTo)
								if (each.PurchaseAmtPct.PurchaseAmount entered)
									LocalQuantityForTier			= ((each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount) / LocalPeriodPreviousTierCost)
									LocalTotalQuantityForTier		+= LocalQuantityForTier
									if (LocalYearToDateUsageQuantity	> LocalTotalQuantityForTier)
										LocalYearToDateGrossAmount		+= (each.PurchaseAmtPct.PurchaseAmount - LocalPreviousTiersAmount)
										LocalQuantityToUse				-= LocalQuantityForTier
										LocalLastTierQuantity			= LocalQuantityForTier
										LocalPreviousTiersAmount		= each.PurchaseAmtPct.PurchaseAmount
										if (each.ContractTier.TierMarkupDiscount.Discount)
											if (each.ContractTier.TierPricingAmtPct.TierPercent entered)
												LocalPeriodPreviousTierCost	= (BaseCost * (100% - each.ContractTier.TierPricingAmtPct.TierPercent))
											else
												LocalPeriodPreviousTierCost	= (BaseCost - each.ContractTier.TierPricingAmtPct.TierCost)
										else
										if (each.ContractTier.TierMarkupDiscount.Fixed)
											LocalPeriodPreviousTierCost		= each.ContractTier.TierPricingAmtPct.TierCost
										LocalPeriodLastTierAchieved			= each.ContractTier
									else
										end for each
					if (LocalQuantityToUse	> 0)
						LocalYearToDateGrossAmount	+= (LocalQuantityToUse * LocalPeriodPreviousTierCost)
					LocalPeriodGrossAmount		= LocalYearToDateGrossAmount - LocalPreviousPeriodYearToDateGrossAmount

					initialize LocalHighestRebateAmount
					initialize LocalHighestRebatePercent
					initialize LocalPeriodTotalRebatePercent
					initialize LocalRebateContract
					initialize LocalContractRebateType
					initialize LocalRebateCount
					if (LocalPeriodBeginDate			>= Contract.EffectiveDate)
						LocalRebatePeriodCount				+= 1
						if (LocalPeriodBeginDate			>= LocalRebateDueDate)
							LocalRebateDueDateChange		= true
							LocalPreviousRebateDuesAmount	= LocalPreviousPeriodYearToDateTotalRebateAmount
						else
							LocalRebateDueDateChange		= false
						for each RebateQualifierContractsRel
							if (LocalRebateCount			> 5)
								end for each
							if (each.Contract				!= LocalRebateContract
							or  each.ContractRebateType		!= LocalContractRebateType)
								LocalRebateDueTotalRebateAmount		+= LocalHighestRebateAmount
								LocalPeriodTotalRebatePercent		+= LocalHighestRebatePercent
								initialize LocalHighestRebateAmount
								initialize LocalHighestRebatePercent
								if (LocalRebateContract		not entered
								and LocalContractRebateType	not entered)
									LocalRebateCount		= 1
								else
									LocalRebateCount		+= 1
								LocalRebateContract			= each.Contract
								LocalContractRebateType		= each.ContractRebateType
								if (LocalRebateDueDateChange)
									LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]	= LocalPeriodGrossAmount
									LocalRebateDueDate				= first ContractRebateDuesForRebateRel.ContractRebateDue
								else
									LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]	+= LocalPeriodGrossAmount
							if (ContractRebateQualifierItemsRel	exists)
								if (each.ContractRebateQualifier.PurchaseOperator.GreaterThan)
									if (each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
										if (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]		> each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount)
											LocalRebateAmount				= (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount] * (each.ContractRebate.RebatePercent / 100))
											if (LocalRebateAmount			> LocalHighestRebateAmount)
												LocalHighestRebateAmount	= LocalRebateAmount
												LocalHighestRebatePercent	= each.ContractRebate.RebatePercent
								else
								if (each.ContractRebateQualifier.PurchaseOperator.GreaterThanOrEqualTo)
									if (each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
										if (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount]		>= each.ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount)
											LocalRebateAmount				= (LocalContractRebateDueAmountArray.PurchasesAmount[LocalRebateCount] * (each.ContractRebate.RebatePercent / 100))
											if (LocalRebateAmount			> LocalHighestRebateAmount)
												LocalHighestRebateAmount	= LocalRebateAmount
												LocalHighestRebatePercent	= each.ContractRebate.RebatePercent
						LocalRebateDueTotalRebateAmount		+= LocalHighestRebateAmount
						LocalPeriodTotalRebatePercent		+= LocalHighestRebatePercent

					LocalYearToDateTotalRebateAmount			= LocalRebateDueTotalRebateAmount 	+ LocalPreviousRebateDuesAmount
					LocalYearToDateContractAmount				= LocalYearToDateGrossAmount		- LocalYearToDateTotalRebateAmount
					LocalYearToDateRebatePercent				+= LocalPeriodTotalRebatePercent
					each.TierAchieved					= LocalPeriodLastTierAchieved
					each.TierCost						= LocalPeriodPreviousTierCost
					each.RebatePercent					= LocalPeriodTotalRebatePercent
					if (LocalPeriod		= 1)
						each.ContractAmount				= LocalYearToDateContractAmount
						each.GrossAmount				= LocalYearToDateGrossAmount
						each.RebateAmount				= LocalYearToDateTotalRebateAmount

					else
						each.ContractAmount				= LocalYearToDateContractAmount - LocalPreviousPeriodYearToDateContractAmount
						each.GrossAmount				= LocalYearToDateGrossAmount - LocalPreviousPeriodYearToDateGrossAmount
						each.RebateAmount				= LocalYearToDateTotalRebateAmount - LocalPreviousPeriodYearToDateTotalRebateAmount
					each.YearToDateContractAmount		= LocalYearToDateContractAmount
					each.YearToDateGrossAmount			= LocalYearToDateGrossAmount
					each.YearToDateRebateAmount			= LocalYearToDateTotalRebateAmount
					LocalPreviousPeriodYearToDateContractAmount					= LocalYearToDateContractAmount
					LocalPreviousPeriodYearToDateGrossAmount					= LocalYearToDateGrossAmount
					LocalPreviousPeriodYearToDateTotalRebateAmount				= LocalYearToDateTotalRebateAmount
				invoke Create ItemmastUsageContractAmount
					invoked.Company                             = PrmCompany
					invoked.Contract							= Contract
					invoked.ContractLine						= ContractLine
					invoked.Item								= ItemNumber
					invoked.ItemmastContractLine				= LocalItemmastContractLine
					invoked.ItemmastUsageDateRange.Begin		= PrmDateRange.Begin
					invoked.ItemmastUsageDateRange.End			= PrmDateRange.End
					invoked.ItemmastUsage.UsageQuantityType		= LocalUsageQuantityType
					invoked.ItemmastUsage.AdjustmentPercent		= LocalAdjustmentPercent
					invoked.ItemmastUsage.Annualized			= LocalAnnualized
					invoked.ContractAmount						= LocalYearToDateContractAmount
					invoked.TierAchieved						= LocalPeriodLastTierAchieved
					if (LocalPeriodLastTierAchieved	not entered)
						initialize invoked.TierUnitCost
					else
						invoked.TierUnitCost					= LocalPeriodPreviousTierCost
					invoked.RebateAmount						= LocalYearToDateTotalRebateAmount
					if (LocalRebatePeriodCount entered)
						invoked.RebatePercent					= (LocalYearToDateRebatePercent / LocalRebatePeriodCount)
					else
						initialize invoked.RebatePercent
					invoked.BaseCost							= BaseCost
					invoked.PercentOfUsage						= OriginalItemmastUsageRel.PercentOfUsage
					invoked.OriginalPercentOfUsage				= OriginalItemmastUsageRel.PercentOfUsage
					invoked.Quantity							= OriginalItemmastUsageRel.UsageQuantity
					invoked.GrossAmount							= LocalYearToDateGrossAmount
					invoked.PeriodForecastArray   				= LocalPeriodForecastArray

		NegotiateContracts is a Set Action
			run in foreground
			completion message is "ContractNegotiationsHaveBeenProduced"
			Parameters
				PrmDateRange				is a DateRange
				PrmCompany					is Numeric 4
				PrmLocation					is AlphaUpper 5
				PrmRequestingLocation		is AlphaUpper 5
				PrmReceiptOrInvoiceUsage	is Numeric 1
					States
						CalculateUsageBasedOnReceipts	value is 1
						CalculateUsageBasedOnInvoices	value is 2
				PrmAnnualize				is Boolean
			Parameter Rules
				PrmDateRange.Begin
					initial value is (current corporate date - 1 year)
					default to (current corporate date - 1 year)
				PrmDateRange.End
					initial value is current corporate date
					default to current corporate date
				PrmAnnualize
					LocalDaysDifference		= (PrmDateRange.End	- PrmDateRange.Begin)
					constraint ((LocalDaysDifference	<= 31
					and          LocalDaysDifference	>= 28)
					or          (LocalDaysDifference	<= 62
					and          LocalDaysDifference    >= 59)
					or          (LocalDaysDifference    <= 92
					and          LocalDaysDifference    >= 89)
					or          (LocalDaysDifference    <= 123
					and          LocalDaysDifference    >= 120)
					or          (LocalDaysDifference    <= 184
					and          LocalDaysDifference    >= 181))
						"DifferenceOfDatesMustBe1,2,3,4Or6MonthsInOrderToAnnualizeUsage"
				PrmReceiptOrInvoiceUsage
					required
						"ItemUsageCalculationQuantityOptionIsRequired"
			Local Fields
				LocalDaysDifference						is Numeric 8
				FirstRecord								is Boolean

			Instance Selection
				where (SelectedForNegotiate
				and    SelectedForNegotiateBy	= actor)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Set Rules
					Entrance Rules
						FirstRecord		= true

				Instance Rules
					if (PrmDateRange	not entered)
						PrmDateRange.Begin						= DerivedOneYearAgo
						PrmDateRange.End						= current corporate date

					if (OtherRecordsSelectedForNegotiate = 0
					and FirstRecord)
						invoke SingleContractNegotiation
							invoked.PrmDateRange				= PrmDateRange
							invoked.PrmCompany					= PrmCompany
							invoked.PrmLocation					= PrmLocation
							invoked.PrmRequestingLocation		= PrmRequestingLocation
							invoked.PrmReceiptOrInvoiceUsage	= PrmReceiptOrInvoiceUsage
							invoked.PrmAnnualize				= PrmAnnualize
					else
					if ((OtherRecordsSelectedForNegotiate = 1)
					or  (OtherRecordsSelectedForNegotiate = 0
					and  !FirstRecord))
						invoke TwoContractNegotiation
							invoked.PrmDateRange				= PrmDateRange
							invoked.PrmCompany					= PrmCompany
							invoked.PrmLocation					= PrmLocation
							invoked.PrmRequestingLocation		= PrmRequestingLocation
							invoked.PrmReceiptOrInvoiceUsage	= PrmReceiptOrInvoiceUsage
							invoked.PrmAnnualize				= PrmAnnualize

					FirstRecord								= false

		TwoContractNegotiation is an Instance Action
			restricted
			Parameters
				PrmDateRange				is a DateRange
				PrmCompany					is Numeric 4
				PrmLocation					is AlphaUpper 5
				PrmRequestingLocation		is AlphaUpper 5
				PrmReceiptOrInvoiceUsage	is Numeric 1
					States
						CalculateUsageBasedOnReceipts	value is 1
						CalculateUsageBasedOnInvoices	value is 2
				PrmAnnualize				is Boolean

			Local Fields
				LocalTierCounter						is Numeric 1
				LocalLowerTierPercent					is Percent 4.1
				LocalLowerTierQualifierAmountPercent	is a QualifierAmountPercent
				LocalHigherTierPercent					is Percent 4.1
				LocalHigherTierQualifierAmountPercent	is a QualifierAmountPercent
				LocalRebateCounter						is Numeric 1
				LocalRebate1Percent						is Percent 4.1
				LocalRebate1QualifierAmountPercent		is a QualifierAmountPercent
				LocalRebate2Percent						is Percent 4.1
				LocalRebate2QualifierAmountPercent		is a QualifierAmountPercent
				LocalItemGroup							is an ItemGroup
				LocalItemmast							is an Item
				LocalContractNegotiation				is a ContractNegotiation

			Action Rules
				LocalCompany							= PrmCompany
				LocalLocation							= PrmLocation
				LocalReqLocation						= PrmRequestingLocation
				LocalDateRange							= PrmDateRange
				LocalUsageQuantityType					= PrmReceiptOrInvoiceUsage
				initialize LocalAdjustmentPercent
				LocalAnnualized							= 2
				if (!OriginalItemmastUsageRel exists)
					invoke CalculateItemUsage ItemNumber
						invoked.PrmDateRange				= PrmDateRange
						invoked.PrmCompany					= PrmCompany
						invoked.PrmLocation					= PrmLocation
						invoked.PrmRequestingLocation		= PrmRequestingLocation
						invoked.PrmReceiptOrInvoiceUsage	= PrmReceiptOrInvoiceUsage
						invoked.PrmUsageType				= LocalUsageType.Negotiation
						invoked.PrmAdjustmentPercent		= LocalAdjustmentPercent
						invoked.PrmAnnualize				= PrmAnnualize
				else
				if (OriginalItemmastUsageRel.UsageType.Forecasting)
					invoke FastUpdate OriginalItemmastUsageRel.ItemmastUsage
						invoked.PrmUsageType				= LocalUsageType.Both
						invoked.PrmOriginalUsage			= OriginalItemmastUsageRel.OriginalUsage
					invoke Update OriginalItemmastUsageDateRangeRel
						invoked.UsageType					= LocalUsageType.Both

				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnReceipts)
					constraint (OriginalItemmastUsageRel.UsageQuantity	entered)
						"NoReceiptUsageQuantityFoundForThisDateRange"
				else
				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnInvoices)
					constraint (OriginalItemmastUsageRel.UsageQuantity	entered)
						"NoInvoiceUsageQuantityFoundForThisDateRange"

				if (PrmAnnualize)
					LocalAnnualized					= 1
				else
					LocalAnnualized					= 2

				if (ContractNegotiationContract1FilledContract2EmptyRel exists)
					initialize LocalTierCounter
					for each ContractTiersByPercentRel
						if (LocalTierCounter	> 2)
							end for each
						LocalTierCounter			+= 1
						if (LocalTierCounter		= 1)
							LocalLowerTierPercent	= each.TierPricingAmtPct.TierPercent
							LocalLowerTierQualifierAmountPercent.Amount			= each.first ContractTierQualifier set.PurchaseAmtPct.PurchaseAmount
							LocalLowerTierQualifierAmountPercent.Percentage		= each.first ContractTierQualifier set.PurchaseAmtPct.PurchasePercent
						else
						if (LocalTierCounter	= 2)
							LocalHigherTierPercent	= each.TierPricingAmtPct.TierPercent
							LocalHigherTierQualifierAmountPercent.Amount		= each.first ContractTierQualifier set.PurchaseAmtPct.PurchaseAmount
							LocalHigherTierQualifierAmountPercent.Percentage	= each.first ContractTierQualifier set.PurchaseAmtPct.PurchasePercent
					initialize LocalRebateCounter
					for each Contract.ContractRebate set
						if (LocalRebateCounter	> 2)
							end for each
						LocalRebateCounter			+= 1
						if (LocalRebateCounter		= 1)
							LocalRebate1Percent		= (each.RebatePercent / 100)
							LocalRebate1QualifierAmountPercent.Amount			= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchaseAmount
							LocalRebate1QualifierAmountPercent.Percentage		= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchasePercent
						else
						if (LocalRebateCounter		= 2)
							LocalRebate2Percent		= (each.RebatePercent / 100)
							LocalRebate2QualifierAmountPercent.Amount			= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchaseAmount
							LocalRebate2QualifierAmountPercent.Percentage		= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchasePercent
					LocalItemGroup					= ContractGroup
					LocalItemmast					= ItemNumber
					LocalContractNegotiation		= first ContractNegotiationContract1FilledContract2EmptyRel.ContractNegotiation
					invoke Update LocalContractNegotiation
						invoked.Contract2									= Contract
						invoked.Contract2BaseCost							= BaseCost
						invoked.Contract2LowerTierQualifierAmountPercent	= LocalLowerTierQualifierAmountPercent
						invoked.Contract2LowerTierPercent					= LocalLowerTierPercent
						invoked.Contract2HigherTierQualifierAmountPercent	= LocalHigherTierQualifierAmountPercent
						invoked.Contract2HigherTierPercent					= LocalHigherTierPercent
						invoked.Contract2Rebate1QualifierAmountPercent		= LocalRebate1QualifierAmountPercent
						invoked.Contract2Rebate1Percent						= LocalRebate1Percent
						invoked.Contract2Rebate2QualifierAmountPercent		= LocalRebate2QualifierAmountPercent
						invoked.Contract2Rebate2Percent						= LocalRebate2Percent
					invoke QuantityRange LocalContractNegotiation
						invoked.PurchaseQuantityRangeFromQuantity			= OriginalItemmastUsageRel.UsageQuantity
						initialize invoked.PurchaseQuantityRangeToQuantity
						invoked.PrmDateRange								= PrmDateRange
						initialize invoked.PrmAdjustmentPercent
						invoked.PrmOriginalUsage							= true
				else
					initialize LocalTierCounter
					for each ContractTiersByPercentRel
						if (LocalTierCounter	> 2)
							end for each
						LocalTierCounter			+= 1
						if (LocalTierCounter		= 1)
							LocalLowerTierPercent	= each.TierPricingAmtPct.TierPercent
							LocalLowerTierQualifierAmountPercent.Amount			= each.first ContractTierQualifier set.PurchaseAmtPct.PurchaseAmount
							LocalLowerTierQualifierAmountPercent.Percentage		= each.first ContractTierQualifier set.PurchaseAmtPct.PurchasePercent
						else
						if (LocalTierCounter	= 2)
							LocalHigherTierPercent	= each.TierPricingAmtPct.TierPercent
							LocalHigherTierQualifierAmountPercent.Amount		= each.first ContractTierQualifier set.PurchaseAmtPct.PurchaseAmount
							LocalHigherTierQualifierAmountPercent.Percentage	= each.first ContractTierQualifier set.PurchaseAmtPct.PurchasePercent
					initialize LocalRebateCounter
					for each Contract.ContractRebate set
						if (LocalRebateCounter	> 2)
							end for each
						LocalRebateCounter			+= 1
						if (LocalRebateCounter		= 1)
							LocalRebate1Percent		= (each.RebatePercent / 100)
							LocalRebate1QualifierAmountPercent.Amount			= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchaseAmount
							LocalRebate1QualifierAmountPercent.Percentage		= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchasePercent
						else
						if (LocalRebateCounter		= 2)
							LocalRebate2Percent		= (each.RebatePercent / 100)
							LocalRebate2QualifierAmountPercent.Amount			= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchaseAmount
							LocalRebate2QualifierAmountPercent.Percentage		= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchasePercent
					invoke Create ContractNegotiation
						invoked.ItemGroup									= ContractGroup
						invoked.Item										= ItemNumber
						invoked.NegotiationTimeStamp						= current timestamp
						invoked.ContractGroup								= ContractGroup
						invoked.Contract1									= Contract
						invoked.Contract1BaseCost							= BaseCost
						invoked.Contract1LowerTierQualifierAmountPercent	= LocalLowerTierQualifierAmountPercent
						invoked.Contract1LowerTierPercent					= LocalLowerTierPercent
						invoked.Contract1HigherTierQualifierAmountPercent	= LocalHigherTierQualifierAmountPercent
						invoked.Contract1HigherTierPercent					= LocalHigherTierPercent
						invoked.Contract1Rebate1QualifierAmountPercent		= LocalRebate1QualifierAmountPercent
						invoked.Contract1Rebate1Percent						= LocalRebate1Percent
						invoked.Contract1Rebate2QualifierAmountPercent		= LocalRebate2QualifierAmountPercent
						invoked.Contract1Rebate2Percent						= LocalRebate2Percent
						invoked.DateRange									= PrmDateRange

				SelectedForNegotiate		= false
				initialize SelectedForNegotiateBy

		SingleContractNegotiation is an Instance Action
			restricted
			Parameters
				PrmDateRange				is a DateRange
				PrmCompany					is Numeric 4
				PrmLocation					is AlphaUpper 5
				PrmRequestingLocation		is AlphaUpper 5
				PrmReceiptOrInvoiceUsage	is Numeric 1
					States
						CalculateUsageBasedOnReceipts	value is 1
						CalculateUsageBasedOnInvoices	value is 2
				PrmAnnualize				is Boolean

			Local Fields
				LocalTierCounter						is Numeric 1
				LocalLowerTierPercent					is Percent 4.1
				LocalLowerTierQualifierAmountPercent	is a QualifierAmountPercent
				LocalHigherTierPercent					is Percent 4.1
				LocalHigherTierQualifierAmountPercent	is a QualifierAmountPercent
				LocalRebateCounter						is Numeric 1
				LocalRebate1Percent						is Percent 4.1
				LocalRebate1QualifierAmountPercent		is a QualifierAmountPercent
				LocalRebate2Percent						is Percent 4.1
				LocalRebate2QualifierAmountPercent		is a QualifierAmountPercent
				LocalContractNegotiationView			is a ContractNegotiation view

			Action Rules
				LocalCompany							= PrmCompany
				LocalLocation							= PrmLocation
				LocalReqLocation						= PrmRequestingLocation
				LocalDateRange							= PrmDateRange
				LocalUsageQuantityType					= PrmReceiptOrInvoiceUsage
				initialize LocalAdjustmentPercent
				LocalAnnualized							= 2
				if (!OriginalItemmastUsageRel exists)
					invoke CalculateItemUsage ItemNumber
						invoked.PrmDateRange				= PrmDateRange
						invoked.PrmCompany					= PrmCompany
						invoked.PrmLocation					= PrmLocation
						invoked.PrmRequestingLocation		= PrmRequestingLocation
						invoked.PrmReceiptOrInvoiceUsage	= PrmReceiptOrInvoiceUsage
						invoked.PrmUsageType				= LocalUsageType.Negotiation
						invoked.PrmAdjustmentPercent		= LocalAdjustmentPercent
						invoked.PrmAnnualize				= PrmAnnualize
				else
					constraint (!PrmAnnualize)
						"CannotAnnualize;ItemUsageAlreadyCalculatedForThisDateRange"
					if (OriginalItemmastUsageRel.UsageType.Forecasting)
						invoke FastUpdate OriginalItemmastUsageRel.ItemmastUsage
							invoked.PrmUsageType				= LocalUsageType.Both
							invoked.PrmOriginalUsage			= OriginalItemmastUsageRel.OriginalUsage
						invoke Update OriginalItemmastUsageDateRangeRel
							invoked.UsageType					= LocalUsageType.Both

				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnReceipts)
					constraint (OriginalItemmastUsageRel.UsageQuantity	entered)
						"NoReceiptUsageQuantityFoundForThisDateRange"
				else
				if (PrmReceiptOrInvoiceUsage.CalculateUsageBasedOnInvoices)
					constraint (OriginalItemmastUsageRel.UsageQuantity	entered)
						"NoInvoiceUsageQuantityFoundForThisDateRange"

				if (PrmAnnualize)
					LocalAnnualized					= 1
				else
					LocalAnnualized					= 2

				initialize LocalTierCounter
				for each ContractTiersByPercentRel
					if (LocalTierCounter	> 2)
						end for each
					LocalTierCounter			+= 1
					if (LocalTierCounter		= 1)
						LocalLowerTierPercent	= each.TierPricingAmtPct.TierPercent
						LocalLowerTierQualifierAmountPercent.Amount			= each.first ContractTierQualifier set.PurchaseAmtPct.PurchaseAmount
						LocalLowerTierQualifierAmountPercent.Percentage		= each.first ContractTierQualifier set.PurchaseAmtPct.PurchasePercent
					else
					if (LocalTierCounter	= 2)
						LocalHigherTierPercent	= each.TierPricingAmtPct.TierPercent
						LocalHigherTierQualifierAmountPercent.Amount		= each.first ContractTierQualifier set.PurchaseAmtPct.PurchaseAmount
						LocalHigherTierQualifierAmountPercent.Percentage	= each.first ContractTierQualifier set.PurchaseAmtPct.PurchasePercent
				initialize LocalRebateCounter
				for each Contract.ContractRebate set
					if (LocalRebateCounter	> 2)
						end for each
					LocalRebateCounter			+= 1
					if (LocalRebateCounter		= 1)
						LocalRebate1Percent		= (each.RebatePercent / 100)
						LocalRebate1QualifierAmountPercent.Amount			= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchaseAmount
						LocalRebate1QualifierAmountPercent.Percentage		= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchasePercent
					else
					if (LocalRebateCounter		= 2)
						LocalRebate2Percent		= (each.RebatePercent / 100)
						LocalRebate2QualifierAmountPercent.Amount			= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchaseAmount
						LocalRebate2QualifierAmountPercent.Percentage		= each.first ContractRebateQualifier set.RebatePurchaseAmtPct.PurchasePercent
				invoke Create ContractNegotiation
					assign result to LocalContractNegotiationView
					invoked.ItemGroup									= ContractGroup
					invoked.Item										= ItemNumber
					invoked.NegotiationTimeStamp						= current timestamp
					invoked.ContractGroup								= ContractGroup
					invoked.Contract1									= Contract
					invoked.Contract1BaseCost							= BaseCost
					invoked.Contract1LowerTierQualifierAmountPercent	= LocalLowerTierQualifierAmountPercent
					invoked.Contract1LowerTierPercent					= LocalLowerTierPercent
					invoked.Contract1HigherTierQualifierAmountPercent	= LocalHigherTierQualifierAmountPercent
					invoked.Contract1HigherTierPercent					= LocalHigherTierPercent
					invoked.Contract1Rebate1QualifierAmountPercent		= LocalRebate1QualifierAmountPercent
					invoked.Contract1Rebate1Percent						= LocalRebate1Percent
					invoked.Contract1Rebate2QualifierAmountPercent		= LocalRebate2QualifierAmountPercent
					invoked.Contract1Rebate2Percent						= LocalRebate2Percent
					invoked.DateRange									= PrmDateRange
					invoked.SingleContractNegotiation					= true
				invoke QuantityRange LocalContractNegotiationView.ContractNegotiation
					invoked.PurchaseQuantityRangeFromQuantity			= OriginalItemmastUsageRel.UsageQuantity
					initialize invoked.PurchaseQuantityRangeToQuantity
					invoked.PrmDateRange								= PrmDateRange
					initialize invoked.PrmAdjustmentPercent
					invoked.PrmOriginalUsage							= true

				SelectedForNegotiate		= false
				initialize SelectedForNegotiateBy

		ActivateLineEdits is a Set Action                     
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract

			Sort Order
				ContractGroup
				Contract

			Instance Selection
				where (ContractGroup					  = PrmContractGroup
				and    Contract							  = PrmContract
				and    CanUseForCostDefaultingSomeLevel   = true
				and   (ContractLineState.Draft
				or     ContractLineState.Amendment
				or     ErrorsExist))

			Local Fields
				ActivationHandled is Boolean
			
			Action Rules

				Empty Set Rules
					if ((PrmContract.CanUseForCostDefaultingContractLineNoErrorsRel exists
					or  PrmContract.AllowReferenceOfItemsNotOnContract)
					and PrmContract.UseCommitments)
						if (PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
			 				invoke FastUpdate Contract
			 					invoked.BudgetEditProcessing = 1
							invoke Delete Contract.BudgetEditErrorRel
							invoke EditTotalsRoute BudgetTemplateGroupTotal
								invoked.PrmFinanceEnterpriseGroup    											= PrmContractGroup.FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup           											= PrmContract.UniqueID
								invoked.PrmMode                                                                 = BudgetEditMode.Hard
								invoked.PrmTotalsProcessing                                                     = BudgetEditTotalsProcessing.Purge
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.ContractGroup			= PrmContractGroup
								invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.Contract				= PrmContract
								invoked.PrmBusinessClassName                									= "Contract"
								invoked.PrmEditContext                      									= "Activate"
						else
							if (PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								invoke EditTotalsRoute BudgetTemplateGroupTotal
									invoked.PrmFinanceEnterpriseGroup    											= PrmContractGroup.FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup           											= PrmContract.UniqueID
									invoked.PrmMode																	= BudgetEditMode.UpdateOnly
									invoked.PrmTotalsProcessing                                                     = BudgetEditTotalsProcessing.Purge
									invoked.PrmBusinessClassName                									= "Contract"
									invoked.PrmEditContext                      									= "Activate"
							invoke ActivateContractHeader ReadyToActivate PrmContract

					else
						invoke ActivateContractHeader ReadyToActivate PrmContract

				Contract Set Rules
					Exit Rules

						ActivationHandled = false
						
						if (PrmContract.CanUseForCostDefaultingContractLineNoErrorsRel exists
						or  PrmContract.AllowReferenceOfItemsNotOnContract
						or (PrmContract.IsManufacturerContract
						and PrmContract.HasDistributorOnlyLineMembers))
							ActivationHandled = true
							if (PrmContract.UseCommitments
							and PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)


				 				invoke FastUpdate Contract
				 					invoked.BudgetEditProcessing = 1
								invoke Delete Contract.BudgetEditErrorRel
								invoke EditTotalsRoute BudgetTemplateGroupTotal
									invoked.PrmFinanceEnterpriseGroup    											= PrmContractGroup.FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup           											= PrmContract.UniqueID
									invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.ContractGroup			= ContractGroup
									invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.Contract				= PrmContract
									invoked.PrmBusinessClassName                									= "Contract"
									invoked.PrmEditContext                      									= "Activate"
							else
								if (PrmContract.UseCommitments
								and PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
									invoke EditTotalsRoute BudgetTemplateGroupTotal
										invoked.PrmFinanceEnterpriseGroup    											= PrmContractGroup.FinanceEnterpriseGroup
										invoked.PrmBudgetEditGroup           											= PrmContract.UniqueID
										invoked.PrmMode																	= BudgetEditMode.UpdateOnly
										invoked.PrmBusinessClassName                									= "Contract"
										invoked.PrmEditContext                      									= "Activate"
								invoke ActivateContractHeader ReadyToActivate PrmContract

						if (PrmContract.AllErrorsAndAllInactive)
							ActivationHandled = true
							invoke SetActivationInProgressFalse ReadyToActivate PrmContract

						if  (PrmContract.ContractLineErrorsExistNotInactiveVendorItem)
							ActivationHandled = true
							if  (PrmContract.CanUseForCostDefaultingContractLineNoErrorsRel exists)
								send email
									to PrmContract.PrimaryContactRel.DerivedEmail
									cc PrmContract.DerivedSecondaryContactEmailAddressList
									from config.DefaultFromEmailAddress
									subject "<ContractGroupEmailTemplateRel.FinalContractActivatedSomeErrorsEmailSubject>"
									Contents
										"<ContractGroupEmailTemplateRel.FinalContractActivatedSomeErrorsEmailContent>"
								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = PrmContract.DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalContractActivatedSomeErrorsEmailSubject
									invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalContractActivatedSomeErrorsEmailContent
									invoked.NotificationType				= 6
							else    
								send email
									to PrmContract.PrimaryContactRel.DerivedEmail
									cc PrmContract.DerivedSecondaryContactEmailAddressList
									from config.DefaultFromEmailAddress
									subject "<ContractGroupEmailTemplateRel.FinalContractActivatedAllErrorsEmailSubject>"
									Contents
										"<ContractGroupEmailTemplateRel.FinalContractActivatedAllErrorsEmailContent>"

								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= ContractGroup
									invoked.Contract						= Contract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = PrmContract.DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= Contract.PrimaryContact
									invoked.SentFromEmailAddress			= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.EmailSubjectLine				= ContractGroupEmailTemplateRel.FinalContractActivatedAllErrorsEmailSubject
									invoked.EmailContent					= ContractGroupEmailTemplateRel.FinalContractActivatedAllErrorsEmailContent
									invoked.NotificationType				= 6

								invoke SetActivationInProgressFalse ReadyToActivate PrmContract

						if (ActivationHandled = false)
							invoke ActivateContractHeader ReadyToActivate PrmContract							

				Instance Rules
					IncludeAllErrorEdits = true
					include ManageErrorChecking					

					if (PrmContract.UseCommitments
					and PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						include CloseRequisitionCommitments

		ReleaseLineEdits is a Set Action                     
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract

			Sort Order
				ContractGroup
				Contract

			Instance Selection
				where (ContractGroup			= PrmContractGroup
				and     Contract				= PrmContract
				and    (CanUseForCostDefaulting = true
				or      CanUseForInvoicePayment = true
				or      CreateDistributorContractLine = true))

			Action Rules
				Instance Rules
					IncludeAllErrorEdits = true
					include ManageErrorChecking
					
					if (PrmContract.UseCommitments
					and PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						include CloseRequisitionCommitments

				Contract Set Rules
					Exit Rules


						if (PrmContract.CanUseForCostDefaultingContractLineNoErrorsRel exists)
							if (PrmContract.UseCommitments
							and PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
				 				invoke FastUpdate Contract
				 					invoked.BudgetEditProcessing = 1
								invoke Delete PrmContract.BudgetEditErrorRel
								invoke EditTotalsRoute BudgetTemplateGroupTotal
									invoked.PrmFinanceEnterpriseGroup    											= PrmContractGroup.FinanceEnterpriseGroup
									invoked.PrmBudgetEditGroup           											= PrmContract.UniqueID
									invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.ContractGroup			= PrmContractGroup
									invoked.PrmBudgetEditCallBack.BudgetEditCallBackContract.Contract				= PrmContract
									invoked.PrmBusinessClassName                									= "Contract"
									invoked.PrmEditContext                      									= "Activate"
							else
								if (PrmContract.UseCommitments
								and PrmContract.GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
									invoke EditTotalsRoute BudgetTemplateGroupTotal
										invoked.PrmFinanceEnterpriseGroup    											= PrmContractGroup.FinanceEnterpriseGroup
										invoked.PrmBudgetEditGroup           											= PrmContract.UniqueID
										invoked.PrmMode																	= BudgetEditMode.UpdateOnly
										invoked.PrmBusinessClassName                									= "Contract"
										invoked.PrmEditContext                      									= "Activate"
								invoke RenewalReleaseActivateHeader Draft PrmContract

						if  (PrmContract.ContractLineErrorsExistNotInactiveVendorItem)
							if  (PrmContract.CanUseForCostDefaultingContractLineNoErrorsRel exists)
								send email
									to PrmContract.PrimaryContactRel.DerivedEmail
									cc PrmContract.DerivedSecondaryContactEmailAddressList
									from config.DefaultFromEmailAddress
									subject "Contract<PrmContract><PrmContract.Name>HasBeenReleasedAndContainsLinesThatHaveErrors"
									Contents
										"Contract<PrmContract><PrmContract.Name>HasBeenReleasedAndContainsLinesThatHaveErrors"

								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= PrmContractGroup
									invoked.Contract						= PrmContract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = PrmContract.DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= PrmContract.PrimaryContact
									invoked.SentFromEmailAddress			= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.EmailSubjectLine				= "Contract<PrmContract><PrmContract.Name>HasBeenReleasedAndContainsLinesThatHaveErrors"
									invoked.EmailContent					= "Contract<PrmContract><PrmContract.Name>HasBeenReleasedAndContainsLinesThatHaveErrors"
									invoked.NotificationType				= 6
							else    
								send email
									to PrmContract.PrimaryContactRel.DerivedEmail
									cc PrmContract.DerivedSecondaryContactEmailAddressList
									from config.DefaultFromEmailAddress
									subject "Contract<PrmContract><PrmContract.Name>CannotBeReleased;AllLinesHaveErrors"
									Contents
										"Contract<PrmContract><PrmContract.Name>CannotBeReleased;AllLinesHaveErrors"
								invoke Create ContractNotificationEmail
									invoked.ContractGroup					= PrmContractGroup
									invoked.Contract						= PrmContract
									initialize invoked.ContractDeliverable
									initialize invoked.ContractMilestone
									initialize invoked.SentToMilestoneContact
									initialize invoked.SentToDeliverableContact
									invoked.SentToEmailAddress				= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.SentToCc                        = PrmContract.DerivedSecondaryContactEmailAddressList
									invoked.SentFromPrimaryContractContact	= PrmContract.PrimaryContact
									invoked.SentFromEmailAddress			= PrmContract.PrimaryContactRel.DerivedEmail
									invoked.EmailSubjectLine				= "Contract<PrmContract><PrmContract.Name>CannotBeReleased;AllLinesHaveErrors"
									invoked.EmailContent					= "Contract<PrmContract><PrmContract.Name>CannotBeReleased;AllLinesHaveErrors"
									invoked.NotificationType				= 6

		CheckForErrorsFromDistributions is an Instance Action
			restricted

			Action Rules

				LocalCreateAction = false
				IncludeDistributionEdits = true
				include ManageErrorChecking

		CheckForErrorsLineEdits is a Set Action                     
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract

			Sort Order
				ContractGroup
				Contract

			Instance Selection
				where (ContractGroup		          = PrmContractGroup
				and     Contract			          = PrmContract
				and   ( CanUseForCostDefaultingSomeLevel  = true
				or      CreateDistributorContractLine = true)
				and    (ContractLineState.Draft
				or      ContractLineState.Amendment
				or     (ContractLineState.Active
				and     LineErrorsExist)))

			Action Rules
				Instance Rules
					IncludeAllErrorEdits = true
					include ManageErrorChecking
					include ConsolidatedItemMasterRules

		ErrorsOnlyLineEdits is a Set Action                     
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract

			Sort Order
				ContractGroup
				Contract

			Instance Selection
				where (ContractGroup		         		= PrmContractGroup
				and    Contract		 	             		= PrmContract
				and   (CanUseForCostDefaultingSomeLevel     = true
				or     CreateDistributorContractLine 		= true)
				and    ErrorsExist                   		= true)

			Action Rules
				Instance Rules
					IncludeAllErrorEdits = true
					include ManageErrorChecking
					include ConsolidatedItemMasterRules

		SelectForNegotiate is an Instance Action
			restricted
			Action Rules
				constraint (SelectedForNegotiateLessThanTwo)
					"CanOnlySelectOneOrTwoContractsToNegotiateAtATime"

				SelectedForNegotiate	= true
				SelectedForNegotiateBy	= actor

		UnselectForNegotiate is an Instance Action
			restricted
			Action Rules
				SelectedForNegotiate		= false
				initialize SelectedForNegotiateBy

		LineRenewalRelease is a Set Action
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract

			Local Fields
				LocalItemNumber 				is AlphaUpper size 32
				LocalItemDescription			is Alpha size 30

			Sort Order
				ContractGroup
				Contract

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract)

			Action Rules
				Contract Set Rules
					Entrance Rules

					Exit Rules
						if (PrmContract.CanUseForCostDefaultingContractLineNoErrorsRel exists)
							invoke FastUpdateWithoutEdits PrmContract
								invoked.HasBeenActivatedTrue		= true

						invoke Release Draft PrmContract.ContractArticle set

						if (PrmContract.ContractSubclassification not entered)
							if ((!PrmContract.ContractClassification.RequireContractApproval)
					        and (!PrmContract.ContractClassification.RequireApprovalWithWordDocument)
							and	 (PrmContract.ContractClassification.RequireContractNegotiation))
								invoke MakeTransitionToNegotiation Draft PrmContract
							else
								if ((!PrmContract.ContractClassification.RequireContractApproval)
								and  (!PrmContract.ContractClassification.RequireContractNegotiation)
								and   (PrmContract.ContractClassification.RequireFinalApproval
								or     PrmContract.ContractClassification.RequireFinalApprovalWithWordDocument))
									invoke MakeTransitionToFinalApproval Draft PrmContract
								else
									if	((!PrmContract.ContractClassification.RequireContractApproval)
									and  (!PrmContract.ContractClassification.RequireApprovalWithWordDocument)
									and  (!PrmContract.ContractClassification.RequireContractNegotiation)
									and  (!PrmContract.ContractClassification.RequireFinalApproval)
									and  (!PrmContract.ContractClassification.RequireFinalApprovalWithWordDocument))
										invoke MakeTransitionToReadyToActivate Draft PrmContract
									else
										invoke MakeTransitionToReleased Draft PrmContract
						else
							if ((!PrmContract.ContractSubclassification.RequireContractApproval)
							and (!PrmContract.ContractSubclassification.RequireApprovalWithWordDocument)
							and  (PrmContract.ContractSubclassification.RequireContractNegotiation))
								invoke MakeTransitionToNegotiation Draft PrmContract
							else
								if ((!PrmContract.ContractSubclassification.RequireContractApproval)
								and (!PrmContract.ContractSubclassification.RequireApprovalWithWordDocument)
								and  (!PrmContract.ContractSubclassification.RequireContractNegotiation)
								and  (PrmContract.ContractSubclassification.RequireFinalApproval
								or    PrmContract.ContractSubclassification.RequireFinalApprovalWithWordDocument))
									invoke MakeTransitionToFinalApproval Draft PrmContract
								else
									if ((!PrmContract.ContractSubclassification.RequireContractApproval)
									and (!PrmContract.ContractSubclassification.RequireApprovalWithWordDocument)
									and (!PrmContract.ContractSubclassification.RequireContractNegotiation)
									and (!PrmContract.ContractSubclassification.RequireFinalApproval)
									and (!PrmContract.ContractSubclassification.RequireFinalApprovalWithWordDocument))
										invoke MakeTransitionToReadyToActivate Draft PrmContract
									else
										invoke MakeTransitionToReleased Draft PrmContract

						if (Contract.UseCommitments)
							invoke UpdateToReleased GLCommit
								invoked.PrmFinanceEnterpriseGroup           = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
								invoked.PrmUniqueID                         = Contract.UniqueID
								invoked.PrmAccountingEntity                 = Contract.CommitmentCompany

				Instance Rules
					LocalItemNumber				= ItemNumber
					LocalItemDescription		= ItemDescription

					if  (IsPreferredLine)
						if (IsNotDistributorAndNotManufacturer
						and Contract.ContractParticipantsRel exists)
							include CreatePreferredContract
						else
							include CreateTierPreferredContract

					if 	(CanUseForCostDefaulting
					and  !LineErrorsExist)
						if (PrmContract.NonServicePurchaseType
						and !ItemType.Service)
							include CreateItemAndVendorItem

					for each NonActiveLineMemberRel
						invoke FastUpdateWithoutEdits each
							invoked.SetToActive = true

					include CloseRequisitionCommitments

					make transition to Active
					HasBeenActivated = true
					include ConsolidatedItemMasterRules					

		ActivateContractLine is an Instance Action
			restricted

			Action Rules

				include ContractLineActivationRules

		ActivateContractLines is a Set Action
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract

			Local Fields
				LineMember		                is Iteration of ContractLineMember
				LineDistribution                is Iteration of ContractLineDistribution
				LineDistributionSpread          is Iteration of ContractLineDistributionSpread
				LineSpread                      is Iteration of ContractLineSpread
				LineAOC                         is Iteration of ContractLineAOC

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract
				and    !ContractLineState.Closed)

			Action Rules
				Empty Set Rules

					if (PrmContract.AddendumExists
					or  PrmContract.AmendmentExists)

						for each PrmContract.ContractVersionDescendingRel
							invoke Update each
								invoked.VersionCloseStamp = current timestamp
							end for each

					invoke FastUpdateWithoutEdits PrmContract
						invoked.HasBeenActivatedTrue            = true

					for each DeletedContractArticlesByDisplayRel
						invoke DeleteArticle each
					for each ContractArticlesByDisplayRel
						for each each.DeletedContractTermsByDisplayRel
							invoke DeleteTerm each
					if (!PrmContract.ContractTermVersionRel exists)
						invoke CreateFinalContractTermVersion PrmContract
					invoke Update PrmContract.CurrentContractTermVersionRel
						invoked.ActivatedVersion = true
					if (PrmContract.AddendumExists)
						for each PrmContract.ContractVersionDescendingRel
							invoke Update each
								invoked.CurrentActivatedTermVersion = last PrmContract.ActivatedContractTermVersionRel.ContractTermVersion
							end for each
					if (!PrmContract.AmendmentExists)
						invoke TransitionToActive PrmContract.ContractArticle set

					invoke TransitionToActive ReadyToActivate PrmContract

				Contract Set Rules
					Entrance Rules

						LineMember             = first iteration of Contract.ContractLineMemberRel
						LineDistribution       = first iteration of Contract.ContractLineDistributionRel
						LineDistributionSpread = first iteration of Contract.ContractLineDistSpreadRel
						LineSpread             = first iteration of Contract.ContractLineSpreadRel
						LineAOC                = first iteration of Contract.ContractLineAOCRel

					Exit Rules

						if (PrmContract.AddendumExists
						or  PrmContract.AmendmentExists)
							for each PrmContract.ContractVersionDescendingRel
								invoke Update each
									invoked.VersionCloseStamp = current timestamp
								end for each

						invoke FastUpdateWithoutEdits PrmContract
							invoked.HasBeenActivatedTrue		    = true

						for each DeletedContractArticlesByDisplayRel
							invoke DeleteArticle each
						for each ContractArticlesByDisplayRel
							for each each.DeletedContractTermsByDisplayRel
								invoke DeleteTerm each
						if (!PrmContract.ContractTermVersionRel exists)
							invoke CreateFinalContractTermVersion PrmContract
						invoke Update PrmContract.CurrentContractTermVersionRel
							invoked.ActivatedVersion = true
						if (PrmContract.AddendumExists)
							for each PrmContract.ContractVersionDescendingRel
								invoke Update each
									invoked.CurrentActivatedTermVersion = last PrmContract.ActivatedContractTermVersionRel.ContractTermVersion
								end for each
						if (!PrmContract.AmendmentExists)
							invoke TransitionToActive PrmContract.ContractArticle set
						invoke TransitionToActive ReadyToActivate PrmContract

						if (Contract.UseCommitments)
							invoke UpdateToReleased GLCommit
								invoked.PrmFinanceEnterpriseGroup           = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
								invoked.PrmUniqueID                         = Contract.UniqueID
								invoked.PrmAccountingEntity                 = Contract.CommitmentCompany

				Instance Rules
					include ContractLineActivationRules

		CreateClinicalLineLocations is a Set Action 
			restricted 
			Parameters 
               	ParmContractGroup                   is like ContractGroup 
                ParmContract                        is like Contract 
                ParmInventoryCompany                is like GeneralLedgerCompany 
                ParmInventoryLocation               is like InventoryLocation  
                ParmRequestingLocation              is like RequestingLocation 		

			Instance Selection 
				where (ParmContractGroup    = ContractGroup 
				and    ParmContract         = Contract 
				and    LineNotClosed
				and    ManufacturerContract = Contract)

			Action Rules 

				Instance Rules 
					LocalContract      		= Contract
					LocalCopyContractLine   = ContractLine
					LocalCompany       		= ParmInventoryCompany 
					LocalLocation           = ParmInventoryLocation 
					LocalReqLocation        = ParmRequestingLocation
					if (ContractLocalLineLocationRel !exists)
						invoke Create ContractAndLineLocation 
							invoked.ContractGroup 								= ContractGroup
							invoked.Contract 		           					= Contract
							invoked.ContractLine                                = ContractLine
							invoked.ContractAndLineLocation.Company 			= ParmInventoryCompany 
							invoked.ContractAndLineLocation.Location			= ParmInventoryLocation 
							invoked.ContractAndLineLocation.RequestingLocation	= ParmRequestingLocation
							invoked.ClinicalSystemUse                           = true 
					else 
					if (ContractLocalLineLocationRel exists)
						invoke Update ContractLocalLineLocationRel
							invoked.ClinicalSystemUse = true 

		
		ResetAllLineClinicalUseFlagsSet is a Set Action 
			restricted 
			Parameters  
				ParmContractGroup				is a ContractGroup 
				ParmContract                    is a Contract 
				SetAllLinesToThisValue          is Numeric 1

			Instance Selection 

				where (ParmContractGroup			= ContractGroup
				and    ParmContract                 = Contract
				and    ItemType.Special
				and    LineNotClosed
				and    ManufacturerContract         = Contract)

			Action Rules 

				Instance Rules 

					if (SetAllLinesToThisValue = 1
					and ClinicalSystemUse = false)
						ClinicalSystemUse = true 
					else 
					if (SetAllLinesToThisValue = 2
					and ClinicalSystemUse = true)
						ClinicalSystemUse = false 
					include ConsolidatedItemMasterRules 

		CreateDistributorContractLines is a Set Action   
			allow unlimited concurrency
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmManufacturerContract		is a Contract
				PrmDistributorContract		is a Contract
				PrmReleaseMembers           is Boolean
				PrmFromCopy                 is Boolean
				PrmCloseExistingLines       is Boolean 

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmManufacturerContract
				and    CreateDistributorContractLine
				and    LineNotClosed 
				and   !SelectedForItemCreation
				and   (ErrorsExist            = false
				or     InactiveVendorItemOnly))
			Sort Order
				ContractGroup
				Contract
				ManufacturerContract

			Action Rules
				
				Contract Set Rules

					Exit Rules

						if (PrmReleaseMembers)
							invoke BatchReleaseMembersArray ContractLine
								invoked.PrmContractGroup				= PrmContractGroup
								invoked.PrmContract						= PrmDistributorContract			
								invoked.PrmManufacturerContract         = PrmManufacturerContract	

				Instance Rules
					DistributorContract								= PrmDistributorContract
					ManufacturerContractNumber						= PrmManufacturerContract
					DistributorContractLine							= ContractLine
					DistributorVendor								= PrmDistributorContract.Vendor
					MfgItemNumber									= ItemNumber
					MfgVendor                   					= Contract.Vendor
					MfgVendorItem									= VendorItem
					LocalManufacturer                               = Manufacturer 
					LocalManufacturerNumber                         = ManufacturerNumber 
					LocalManufacturerInformation.Manufacturer 		= MfgContractLineRel.Manufacturer
					LocalManufacturerInformation.ManufacturerNumber = MfgContractLineRel.ManufacturerNumber
					LocalUOM                                        = UOM
					if (((PrmFromCopy
					and	((ItemType.Special
					and   SameManufacturerForDistributorRel exists)
					or   (ItemType.Itemmast
					and   SameItemForDistributorRel exists)))
					or  (!PrmFromCopy))
					and  !ContractLineRel exists)
						if (PrmCloseExistingLines)
							if (ItemType.Special
							and SameManufacturerForDistributorRel exists)
								FromContractCopy = true 
								invoke CloseLine first SameManufacturerForDistributorRel
							else 
							if  (ItemType.Itemmast
							and  SameItemForDistributorRel exists)
								FromContractCopy = true 
								invoke CloseLine first SameItemForDistributorRel 
						invoke Create ContractLine
							resume on error
							fill in fields from ContractLine
							invoked.ContractGroup   		  		= PrmContractGroup
							invoked.Contract      			  		= PrmDistributorContract
							invoked.ContractLine			  		= 0
							invoked.Priority				  		= 0 
							invoked.Taxable				  		    = false 
							invoked.TaxCode					  		= blank 
							invoked.Retainage			 	  		= false     
							invoked.RetainagePercent1	 	  		= 0     
							invoked.RetainageUpToPercent 	  		= 0     
							invoked.RetainagePercent2	 	  		= 0     
							invoked.RetainageOverridePercent  		= 0     
							invoked.HoldManufacturerLineOnly        = false
							invoked.CreateDistributorContractLine	= false
							invoked.FromCreateDistributorLines      = true
							invoked.ErrorsExist                     = false
							invoked.HasBeenActivated                = false
							invoked.PreferredLine                   = false
							if (!PrmFromCopy)
								if (NewItemmastFromPoitemvenRel !exists)
									if (MfgItemNumberRel exists)
										if  (MfgContractLineRel.Manufacturer not entered
										and  DistVendorDefaultPovenitemRel exists  
										and  first DistVendorDefaultPovenitemRel.Manufacturer.ManufacturerCode not entered)
											invoked.VendorItem = blank
								if  (MfgContractLineRel.Manufacturer entered
								and MfgContractLineRel.ManufacturerNumber entered)
									if (NewItemmastFromPoitemvenRel !exists)
										if (NewPovenitemFromManufInfoOnlyRel exists)
											invoked.VendorItem = blank
							else 
							if (PrmFromCopy)
								if (ItemType.Itemmast)
									invoked.VendorItem = first SameItemForDistributorRel.VendorItem 
								else 
								if (ItemType.Special)
									invoked.VendorItem = first SameManufacturerForDistributorRel.VendorItem
							if (PrmDistributorContract.EffectiveDate	> EffectiveDate)
								invoked.EffectiveDate		  = PrmDistributorContract.EffectiveDate
							else
								invoked.EffectiveDate		  = EffectiveDate
							if (PrmDistributorContract.ExpirationDate	< ExpirationDate)
								invoked.ExpirationDate		  = PrmDistributorContract.ExpirationDate
							else
								invoked.ExpirationDate        = ExpirationDate


					if	 (MfgContractLineRel.ItemType.Special
					and ((NewPovenitemFromManufInfoOnlyRel exists
					and   LocalManufacturerInformation entered)
					or   (NewItemmastFromPoitemvenRel exists)))
						invoke ChangeSpecialItemToItem MfgContractLineRel
							if   (NewPovenitemFromManufInfoOnlyRel exists
							and   LocalManufacturerInformation entered)
								invoked.PrmNewItemNumber			= first NewPovenitemFromManufInfoOnlyRel.Item
							else
								invoked.PrmNewItemNumber           = first NewItemmastFromPoitemvenRel.Item

		BatchReleaseMembersArray is a Set Action
			restricted
			Parameters
				PrmContractGroup				is a ContractGroup
				PrmContract						is a Contract
				PrmContractLine                 is a ContractLine
					context of PrmContract
				PrmManufacturerContract         is a Contract
				ReleaseDistributorMembers 		is Boolean

			Local Fields
				MfgTierI1							is Numeric 4
				TierMemberGroupArray
					context of PrmContract
				DistTierI1							is Numeric 4
				DistributorPricingMemberGroupArray
					context of PrmContract
				MemberCount							is Numeric 4

			Instance Selection
				where (ContractGroup	= PrmContractGroup
				and    Contract			= PrmContract
				and    LineNotClosed
				and   (PrmManufacturerContract !entered
				or    (PrmManufacturerContract entered
				and    ManufacturerContract = PrmManufacturerContract))
				and   (PrmContractLine !entered
				or    (PrmContractLine entered
				and    ContractLine     = PrmContractLine))
				and    !CostOption.VendorDetermined)

			Sort Order
				ContractGroup
				Contract
				ManufacturerContract
				ManufacturerContractLine

			Action Rules
				Contract Set Rules
					Exit Rules
						if (IsDistributorContract)
							invoke SetToReleased ContractDistributorPricingMember
								invoked.PrmContractGroup		= ContractGroup
								invoked.PrmContract				= Contract
								invoked.PrmManufacturerContract = PrmManufacturerContract
						else
						if (IsManufacturerContract
						and PrmContractLine !entered)
							invoke UpdateContractTierMember Contract.TierMemberUnreleasedRel
								invoked.Released = "Y"

			   			if (ReleaseDistributorMembers  = true)
			   				if (Contract.HasDistributorContract)
			   					for each Contract.AttachedManufacturerContractsRel
		   							if (each.HasLines
		   							and each.HasMembers
		   							and each.ContractHasVendor
		   							and each.Contract.CanReleaseMembers)
		   								invoke ReleaseMembers each.Contract
											invoked.FromManufacturerContract = true
											invoked.PrmManufacturerContract  = Contract

				ManufacturerContract Set Rules
					Entrance Rules
						if (IsDistributorContract)

							initialize DistributorPricingMemberGroupArray
							initialize DistTierI1
							if (PrmContractLine !entered)
								for each UnreleasedPricingMembersForManufacturerContractRel
									DistTierI1 += 1
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryCompany			= each.ContractDistributorPricingMember.Company
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryLocation			= each.ContractDistributorPricingMember.Location
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].RequestingLocation			= each.ContractDistributorPricingMember.RequestingLocation
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].PricingGroup               = each.ContractDistributorPricingMember.PricingGroup
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContract				= each.ContractDistributorPricingMember.ManufacturerContract
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContractTierInfo		= each.ContractDistributorPricingMember.MfgContractTierInfo
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].TierMarkupDiscount			= each.MemberToTierRel.TierMarkupDiscount
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].TierPricingAmtPct			= each.MemberToTierRel.TierPricingAmtPct
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].FreightMarkupDiscount		= each.MemberToTierRel.FreightMarkupDiscount
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].FreightPricingAmtPct		= each.MemberToTierRel.FreightPricingAmtPct
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].PricingIdentifier			= each.PricingIdentifier
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorPricing			= each.MemberToPricingRel.DistributorPricing
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorFreightPricing	= each.MemberToPricingRel.DistributorFreightPricing

							else 
								for each DistPricingMemberRel
									DistTierI1 += 1
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryCompany			= each.ContractDistributorPricingMember.Company
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryLocation			= each.ContractDistributorPricingMember.Location
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].RequestingLocation			= each.ContractDistributorPricingMember.RequestingLocation
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].PricingGroup               = each.ContractDistributorPricingMember.PricingGroup
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContract				= each.ContractDistributorPricingMember.ManufacturerContract
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContractTierInfo		= each.ContractDistributorPricingMember.MfgContractTierInfo
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].TierMarkupDiscount			= each.MemberToTierRel.TierMarkupDiscount
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].TierPricingAmtPct			= each.MemberToTierRel.TierPricingAmtPct
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].FreightMarkupDiscount		= each.MemberToTierRel.FreightMarkupDiscount
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].FreightPricingAmtPct		= each.MemberToTierRel.FreightPricingAmtPct
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].PricingIdentifier			= each.PricingIdentifier
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorPricing			= each.MemberToPricingRel.DistributorPricing
									DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorFreightPricing	= each.MemberToPricingRel.DistributorFreightPricing

							MemberCount = DistTierI1
						else
						if (IsManufacturerContract)
							initialize TierMemberGroupArray
							initialize MfgTierI1
							if (PrmContractLine !entered)
								for each Contract.TierMemberUnreleasedRel
									MfgTierI1 += 1
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryCompany		= each.ContractTierMember.Company
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryLocation		= each.ContractTierMember.Location
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].RequestingLocation		= each.ContractTierMember.RequestingLocation
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].PricingGroup            = each.ContractTierMember.PricingGroup
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].Tier					= each.Tier
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].TierMarkupDiscount		= each.MemberToTierRel.TierMarkupDiscount
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].TierPricingAmtPct		= each.MemberToTierRel.TierPricingAmtPct
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].FreightMarkupDiscount	= each.MemberToTierRel.FreightMarkupDiscount
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].FreightPricingAmtPct	= each.MemberToTierRel.FreightPricingAmtPct
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].PurchaseMethod			= each.PurchaseMethod

							else 
								for each Contract.AnyTierMembersRel
									MfgTierI1 += 1
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryCompany		= each.ContractTierMember.Company
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryLocation		= each.ContractTierMember.Location
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].RequestingLocation		= each.ContractTierMember.RequestingLocation
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].PricingGroup            = each.ContractTierMember.PricingGroup
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].Tier					= each.Tier
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].TierMarkupDiscount		= each.MemberToTierRel.TierMarkupDiscount
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].TierPricingAmtPct		= each.MemberToTierRel.TierPricingAmtPct
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].FreightMarkupDiscount	= each.MemberToTierRel.FreightMarkupDiscount
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].FreightPricingAmtPct	= each.MemberToTierRel.FreightPricingAmtPct
									TierMemberGroupArray.TierMemberGroup[MfgTierI1].PurchaseMethod			= each.PurchaseMethod
							MemberCount = MfgTierI1

				Instance Rules
					if (IsDistributorContract)
						initialize DistTierI1
						while (DistTierI1 < MemberCount)
							DistTierI1 += 1
							LocalCompany	 		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryCompany
							LocalLocation	 		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryLocation
							LocalReqLocation 		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].RequestingLocation
							LocalPricingGroup 		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].PricingGroup
							LocalMfgContract 		= ManufacturerContract
			 				LocalMfgContractLine 	= ManufacturerContractLine

			 				if (!ContractLineMemberRel exists
			 				and (ContractLineMemberManufacturerRel.PurchaseMethodForDistBuy
			 				or   ContractLineMemberManufacturerRel !exists))
								if (ManufacturerContract = DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContract)
					 				invoke CreateDefault ContractLineMember
					 					fill in fields from ContractLine
										invoked.ContractLineMember.Company		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryCompany
										invoked.ContractLineMember.Location		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].InventoryLocation
										invoked.ContractLineMember.RequestingLocation			= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].RequestingLocation
										invoked.ContractLineMember.PricingGroup = DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].PricingGroup
										invoked.ContractLineMember.ManufacturerContract		= ManufacturerContract
										if (ContractLineState = 2)
											invoked.ContractLineMemberState         = 2 
				 						else
				 							invoked.ContractLineMemberState         = 1 
				 						invoked.MfgContractTierInfo.Tier 			= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContractTierInfo.Tier
				 						invoked.MfgContractTierInfo.MfgContract		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContractTierInfo.MfgContract
				 						if (DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContractTierInfo.MfgContract not entered)
				 							invoked.MfgContractTierInfo.MfgContract	= ManufacturerContract
				 						if (DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].MfgContractTierInfo.Tier entered)
											invoked.TierMarkupDiscount 				= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].TierMarkupDiscount
											invoked.LineTierPricingAmtPct 			= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].TierPricingAmtPct
											invoked.FreightMarkupDiscount 			= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].FreightMarkupDiscount
											invoked.LineFreightPricingAmtPct 		= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].FreightPricingAmtPct
										else
											invoked.TierMarkupDiscount 						= blank
											invoked.LineTierPricingAmtPct.TierCost 			= 0
											invoked.LineTierPricingAmtPct.TierPercent 		= 0
											invoked.FreightMarkupDiscount 					= blank
											invoked.LineFreightPricingAmtPct.FreightCost 	= 0
											invoked.LineFreightPricingAmtPct.FreightPercent = 0
				 						invoked.PricingIdentifier													= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].PricingIdentifier
										invoked.LineDistributorPricing.PricingMarkupDiscount 						= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorPricing.PricingMarkupDiscount
										invoked.LineDistributorPricing.LineDistributorPricingAmtPct 				= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorPricing.DistributorPricingAmtPct
										invoked.LineDistributorFreightPricing.FreightPricingMarkupDiscount 		 	= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorFreightPricing.FreightPricingMarkupDiscount
										invoked.LineDistributorFreightPricing.LineDistributorFreightPricingAmtPct 	= DistributorPricingMemberGroupArray.DistributorPricingMemberGroup[DistTierI1].DistributorFreightPricing.DistributorFreightPricingAmtPct
										invoked.Modified															= "N"
										invoked.PassedRoundTo														= DerivedRoundTo
										invoked.RoundToPassed														= true
										if (ManufacturerContract != Contract)
											invoked.MfgBaseCost						= MfgContractLineRel.BaseCost
										else
											invoked.MfgBaseCost						= 0
										invoked.CanUseForCostDefaulting = CanUseForCostDefaulting
					else
					if (IsManufacturerContract)
						initialize MfgTierI1
						while (MfgTierI1 < MemberCount)
							MfgTierI1 += 1
			 				LocalCompany	 = TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryCompany
							LocalLocation	 = TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryLocation
							LocalReqLocation = TierMemberGroupArray.TierMemberGroup[MfgTierI1].RequestingLocation
							LocalPricingGroup = TierMemberGroupArray.TierMemberGroup[MfgTierI1].PricingGroup
							LocalMfgContract = ManufacturerContract
			 				if (!ContractLineMemberRel exists)
				 				invoke CreateDefault ContractLineMember
				 					fill in fields from ContractLine
				 						except invoked.CanUseForCostDefaulting
									invoked.ContractLineMember.Company	= TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryCompany
									invoked.ContractLineMember.Location	= TierMemberGroupArray.TierMemberGroup[MfgTierI1].InventoryLocation
									invoked.ContractLineMember.RequestingLocation	  	= TierMemberGroupArray.TierMemberGroup[MfgTierI1].RequestingLocation
									invoked.ContractLineMember.PricingGroup = TierMemberGroupArray.TierMemberGroup[MfgTierI1].PricingGroup
									invoked.ContractLineMember.ManufacturerContract	= ManufacturerContract
				 					if (TierMemberGroupArray.TierMemberGroup[MfgTierI1].Tier entered)
				 						invoked.MfgContractTierInfo.Tier	= TierMemberGroupArray.TierMemberGroup[MfgTierI1].Tier
				 					else
				 						invoked.MfgContractTierInfo.Tier    = first ContractLineTierCostMatchRel.ContractTier
				 					invoked.MfgContractTierInfo.MfgContract	= Contract
									invoked.Modified						= false
									invoked.PassedRoundTo					= DerivedRoundTo
									invoked.RoundToPassed					= true
										if (ContractLineState = 2)
											invoked.ContractLineMemberState         = 2 
				 						else
				 							invoked.ContractLineMemberState         = 1 
									if (TierMemberGroupArray.TierMemberGroup[MfgTierI1].Tier entered)
										invoked.TierMarkupDiscount 			= TierMemberGroupArray.TierMemberGroup[MfgTierI1].TierMarkupDiscount
										invoked.LineTierPricingAmtPct 		= TierMemberGroupArray.TierMemberGroup[MfgTierI1].TierPricingAmtPct
										invoked.FreightMarkupDiscount 		= TierMemberGroupArray.TierMemberGroup[MfgTierI1].FreightMarkupDiscount
										invoked.LineFreightPricingAmtPct 	= TierMemberGroupArray.TierMemberGroup[MfgTierI1].FreightPricingAmtPct
									else
										invoked.TierMarkupDiscount 						= blank
										invoked.LineTierPricingAmtPct.TierCost			= 0
										invoked.LineTierPricingAmtPct.TierPercent		= 0
										invoked.FreightMarkupDiscount 					= blank
										invoked.LineFreightPricingAmtPct.FreightCost 	= 0
										invoked.LineFreightPricingAmtPct.FreightPercent	= 0

									if (TierMemberGroupArray.TierMemberGroup[MfgTierI1].PurchaseMethod = 1)
										invoked.PurchaseMethod = 1
										if (ItemNumberExists)
											invoked.CanUseForCostDefaulting = true
										else
										if (ContractLine.SpecialItem)
											if (Contract.ContractSubtype not entered and Contract.ContractType.CanUseForCostDefaultingOptions.UseAllItems
											or  Contract.ContractSubtype entered and Contract.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems)
												invoked.CanUseForCostDefaulting = true
											else
												invoked.CanUseForCostDefaulting = false
										invoked.CreateDistributorLineMember = false
									if (TierMemberGroupArray.TierMemberGroup[MfgTierI1].PurchaseMethod = 2)
										invoked.PurchaseMethod = 2
										invoked.CreateDistributorLineMember = true
										invoked.CanUseForCostDefaulting     = false
									if (TierMemberGroupArray.TierMemberGroup[MfgTierI1].PurchaseMethod = 3)
										invoked.PurchaseMethod = 3
										if (ContractLine.ItemNumberExists)
											invoked.CanUseForCostDefaulting = true
										else
										if (ContractLine.SpecialItem)
											if (Contract.ContractSubtype not entered and Contract.ContractType.CanUseForCostDefaultingOptions.UseAllItems
											or  Contract.ContractSubtype entered and Contract.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems)
												invoked.CanUseForCostDefaulting = true
											else
												invoked.CanUseForCostDefaulting = false
										invoked.CreateDistributorLineMember = true
									if (TierMemberGroupArray.TierMemberGroup[MfgTierI1].PurchaseMethod = 4)
										invoked.PurchaseMethod = 4
										invoked.CanUseForCostDefaulting 	= false
										invoked.CreateDistributorLineMember = false

								if  (IsPreferredLine
								and  Contract.ContractStatus.Active)
									include CreateTierPreferredContract

		UpdateDistributorContract is a Set Action     
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmContract					is a Contract
				PrmUpdateOverrideLandedCost	is a UpdateOverrideLandedCost

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmContract)

			Sort Order
				ContractGroup
				Contract

			Action Rules

				Instance Rules

		CreateContractLinesFromContract is a Set Action   
			restricted
			Parameters
				PrmContractGroup			is a ContractGroup
				PrmFromContract				is a Contract
				PrmNewContractAndLine		is a NewContractAndNewContractLine
				PrmContractType				is a ContractType
				PrmContractSubtype			is a ContractSubtype
				PrmCurrencyCode				is a Currency
				PrmSupplier					is a Supplier
				PrmCopyContractLineComments is Boolean
				PrmCopyContractLineAttachments is Boolean
				PrmCopySelectAll			is Boolean
				PrmEffectiveDate			is Date
				PrmExpirationDate			is Date
				PrmCopyHoldForLines         is Boolean
				PrmCopyLocations            is Boolean
				PrmCopyCapitatedInformation is Boolean 
					default label is "CapitatedComponentGroup"
				CreateFromPartial           is Boolean 
				CreateNewContract           is Boolean 
				CloseExistingLines          is Boolean 
				HoldExistingLines           is Boolean 
				ProcurementReasonCode
				FromInterface               is Boolean 
				CreateLinesOnly             is Boolean 
				CreateDistributorContracts  is Boolean 
				CreateAsManufacturerContract is Boolean

			Local Fields
				OriginalContractAndLine
				LocalContractLine          		is a ContractLine view
				LocalCapitatedComponentGroup    is a ContractCapitatedComponentGroup view

			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    Contract				= PrmFromContract
				and   !DistWithMfgLineClosed
				and   (!CreateFromPartial
				or    (CreateFromPartial
				and    SelectedForCopy)))

			Sort Order
				ContractGroup
				Contract

			Action Rules
				Empty Set Rules
					invoke TriggerProcessContractService PrmNewContractAndLine.NewContract
						invoked.PrmTriggerFrom = "ContractLine"
				
				Contract Set Rules

					Exit Rules
					
						invoke CheckForErrorsLineEdits
							invoked.PrmContractGroup		= ContractGroup
							invoked.PrmContract				= PrmNewContractAndLine.NewContract				
						
						invoke TriggerProcessContractService PrmNewContractAndLine.NewContract
							invoked.PrmTriggerFrom = "ContractLine"
						
						if (CreateLinesOnly)
							invoke CreateRelatedContract RelatedContract
								invoked.ContractGroup	  		   = ContractGroup
								invoked.Contract		  		   = PrmNewContractAndLine.NewContract
								invoked.RelatedContractID 		   = Contract
								invoked.RelatedContractType		   = 6
								invoked.RelatedSupplierName 	   = Contract.Supplier.SupplierName
								invoked.ManufacturerCodeDivision   = Contract.ManufacturerCodeDivision
								invoked.Supplier				   = Contract.Supplier
								invoked.Vendor					   = Contract.Vendor
								invoked.RelatedContractDescription = Contract.Description

							invoke CreateRelatedContract RelatedContract
								invoked.ContractGroup	  		   = ContractGroup
								invoked.Contract		  		   = Contract
								invoked.RelatedContractID          = PrmNewContractAndLine.NewContract
								invoked.RelatedContractType		   = 16
								invoked.RelatedSupplierName 	   = PrmNewContractAndLine.NewContract.Supplier.SupplierName
								invoked.ManufacturerCodeDivision   = PrmNewContractAndLine.NewContract.ManufacturerCodeDivision
								invoked.Supplier				   = PrmNewContractAndLine.NewContract.Supplier
								invoked.Vendor					   = PrmNewContractAndLine.NewContract.Vendor
								invoked.RelatedContractDescription = PrmNewContractAndLine.NewContract.Description

						if  (Contract.CapitatedContract
						and	(PrmCopyCapitatedInformation 
						or   PrmCopySelectAll))
						 	invoke CopyCapitatedContractItems ContractCapitatedComponentGroupItem
								invoked.ParmContractGroup		= ContractGroup 
						 		invoked.FromContract            = Contract 
						 		invoked.ToContract              = PrmNewContractAndLine.NewContract


						if (CreateDistributorContracts
						and CreateAsManufacturerContract
						and PrmFromContract.HasDistributorContract 
						and PrmNewContractAndLine.NewContract.IsManufacturerContract)
							if (CreateNewContract)
								for each PrmFromContract.AttachedManufacturerContractsRel
									invoke CreateFull ManufacturerContract
										invoked.ContractGroup               			= ContractGroup 
										invoked.Contract                    			= each.Contract
										invoked.ManufacturerContractNumber				= PrmNewContractAndLine.NewContract 
										invoked.TransientOriginalManufacturerContract 	= PrmFromContract.Contract 
										invoked.TransientCloseExistingLines             = CloseExistingLines
							else 
							if (!CreateNewContract)
								for each PrmFromContract.AttachedManufacturerContractsRel
									invoke AddAllLinesToDistributorFromCopy each 

						if (!CreateFromPartial)
							if  (CloseExistingLines)
								invoke CloseContractIndirect PrmFromContract
							else 
							if  (HoldExistingLines)
								invoke HoldContract Contract 
									invoked.PrmContractGroup    = ContractGroup
									invoked.PrmContract         = PrmFromContract
									invoked.PrmHoldCode         = ProcurementReasonCode									

				Instance Rules
					OriginalContractAndLine.OriginalContract		= Contract
					OriginalContractAndLine.OriginalContractLine 	= ContractLine
					initialize SavedExchangeAmt
					initialize LocalCurrencyExchange

					invoke Create ContractLine
						assign result to LocalContractLine
						fill in fields from ContractLine
						if (PrmCopyHoldForLines = false)
							invoked.OnHold = false
						initialize invoked.CanUseForCostDefaulting
						initialize invoked.SpecialItemOptions
						initialize invoked.SelectedForItemCreation
						initialize invoked.PayablesDistributionCode
						initialize invoked.HoldManufacturerLineOnly
						initialize invoked.ErrorsExist
						initialize invoked.HasBeenActivated
						initialize invoked.CommitmentsClosed
						initialize invoked.CurrentNetCost
						initialize invoked.SourcingCompany					
						initialize invoked.SourcingEventNumber				
						initialize invoked.SourcingEventLineNumber			
						initialize invoked.ToEventNumber					
						initialize invoked.ToEventCompany					
						initialize invoked.ToEventLine						
						invoked.SelectedForCopy = false
						invoked.PreferredLine = false
						if (PrmContractSubtype entered)
							if (PrmContractSubtype.PurchaseType.Service)
								initialize invoked.ItemNumber
						else
							if(PrmContractType.PurchaseType.Service)
								initialize invoked.ItemNumber

						invoked.CreateFromCopy			= true
						invoked.Contract				= PrmNewContractAndLine.NewContract
						if (PrmEffectiveDate entered)
							if(Contract != ManufacturerContract)
								if (PrmEffectiveDate >= EffectiveDate
								and PrmEffectiveDate <= MfgContractLineRel.ExpirationDate)
									EffectiveDate = PrmEffectiveDate

								if (PrmEffectiveDate <= EffectiveDate
								and PrmEffectiveDate >= MfgContractLineRel.EffectiveDate
								and PrmEffectiveDate <= MfgContractLineRel.ExpirationDate)
									EffectiveDate = PrmEffectiveDate

								if (PrmEffectiveDate <= EffectiveDate
								and PrmEffectiveDate <= MfgContractLineRel.EffectiveDate)
									EffectiveDate = MfgContractLineRel.EffectiveDate
							else
								invoked.EffectiveDate = PrmEffectiveDate

						if (PrmExpirationDate entered)
							if (Contract != ManufacturerContract)
								if (PrmExpirationDate >= ExpirationDate
								and PrmExpirationDate >= MfgContractLineRel.ExpirationDate)
									ExpirationDate = MfgContractLineRel.ExpirationDate

								if ((PrmExpirationDate <= ExpirationDate
								and PrmExpirationDate <= MfgContractLineRel.ExpirationDate)
								or (PrmExpirationDate >= ExpirationDate
								and PrmExpirationDate <= MfgContractLineRel.ExpirationDate))
									ExpirationDate = PrmExpirationDate
							else
								invoked.ExpirationDate = PrmExpirationDate

						if  (Contract = ManufacturerContract)
							if (PrmNewContractAndLine.NewContract.Contract.EffectiveDate != PrmFromContract.EffectiveDate
							or  PrmNewContractAndLine.NewContract.Contract.ExpirationDate != PrmFromContract.ExpirationDate)
								invoked.EffectiveDate 	= PrmNewContractAndLine.NewContract.Contract.EffectiveDate
								invoked.ExpirationDate 	= PrmNewContractAndLine.NewContract.Contract.ExpirationDate

						invoked.QuantityOrdered			   = 0
						invoked.AmountOrdered			   = 0
						invoked.ConsignmentAmountOrdered   = 0
						invoked.ConsignmentQuantityOrdered = 0
						invoked.AddOnChargeAmountOrdered   = 0
						invoked.TaxAmountOrdered           = 0
						invoked.RetainageInvoiceAmount     = 0
						invoked.RetainageInvoiceQuantity   = 0
						invoked.AmountRequested            = 0
						if (Contract.ServicePurchaseType)
							if  (ServiceCode.Amount)
								LifetimeMaximumAmount = BaseCost
							if  (ServiceCode.Quantity)
								LifetimeMaximumAmount = (BaseCost * LifetimeMaximumQuantity)

						if (PrmFromContract = OriginalContractAndLine.OriginalContractLine.ManufacturerContract)
							initialize invoked.ManufacturerContract
							initialize invoked.ManufacturerContractLine

						if (PrmSupplier != PrmFromContract.Supplier
						and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable entered
						and BaseCost entered)
							if (PrmCurrencyCode entered
							and PrmFromContract.CurrencyCode != PrmCurrencyCode)
								SavedFromCurrency     					= PrmCurrencyCode

							if (SavedFromCurrency entered)
								SavedCurrencyTable      				= ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable
								SavedTransactionAmount      			= BaseCost
								SavedExchangeDate		 	 			= current corporate date
								LocalCurrencyExchange.ToCurrency 		= PrmFromContract.CurrencyCode
								SavedExchangeAmt					    = LocalCurrencyExchange.OutputCurrencyAmount

						if (SavedExchangeAmt entered)
							invoked.BaseCost	= SavedExchangeAmt
						else
							invoked.BaseCost	= BaseCost


					if (PrmNewContractAndLine.NewContract.UseHeaderCommitments)
						for each OriginalContractAndLine.OriginalContractLine.ContractLineDistribution set
							invoke CreateForHeaderCommitments ContractLineDistribution
								fill in fields from each
									except invoked.ReportCurrencyAmount
									except invoked.ContractDistributionAggregation
								invoked.Contract				= PrmNewContractAndLine.NewContract
								invoked.ContractLine			= LocalContractLine.ContractLine
					else
						for each OriginalContractAndLine.OriginalContractLine.ContractLineDistribution set
							invoke CreateFromCopyOrTemplate ContractLineDistribution
								fill in fields from each
									except invoked.ReportCurrencyAmount
									except invoked.ContractDistributionAggregation
								invoked.Contract					= PrmNewContractAndLine.NewContract
								invoked.ContractLine				= LocalContractLine.ContractLine
								invoked.LocalFromCopy               = true
							BypassActiveCodeBlockEdit 	= true

					for each OriginalContractAndLine.OriginalContractLine.ContractLineAOC set
						invoke Create ContractLineAOC
							fill in fields from each
							invoked.Contract		= PrmNewContractAndLine.NewContract
							invoked.ContractLine	= LocalContractLine.ContractLine

					if (CreateAsManufacturerContract)
						for each OriginalContractAndLine.OriginalContractLine.ContractLineTierCost set
							invoke Create ContractLineTierCost
								fill in fields from each
								invoked.Contract		= PrmNewContractAndLine.NewContract
								invoked.ContractLine	= LocalContractLine.ContractLine

					if (PrmCopyContractLineComments or PrmCopySelectAll)
						for each OriginalContractAndLine.OriginalContractLine.ManualCommentsRel
							invoke Create ContractLineComment
								fill in fields from each
								invoked.Contract		 	= PrmNewContractAndLine.NewContract
								invoked.ContractLine	 	= LocalContractLine.ContractLine
								invoked.Attachment.File	 	= each.Attachment.File
								invoked.Attachment.MimeType = each.Attachment.MimeType
								invoked.Attachment.Title    = each.Attachment.Title

					if (PrmCopyContractLineAttachments or PrmCopySelectAll)
						for each OriginalContractAndLine.OriginalContractLine.ContractLineAttachment set
							invoke Create ContractLineAttachment
								fill in fields from each
								invoked.Contract	 	 	= PrmNewContractAndLine.NewContract
								invoked.ContractLine  	 	= LocalContractLine.ContractLine
								invoked.Attachment.File	 	= each.Attachment.File
								invoked.Attachment.MimeType = each.Attachment.MimeType
								invoked.Attachment.Title    = each.Attachment.Title

					if  (Contract.CapitatedContract
					and	(PrmCopyCapitatedInformation 
					or   PrmCopySelectAll))
						for each OriginalContractAndLine.OriginalContractLine.ContractCapitatedComponentGroupRel
							invoke Create ContractCapitatedComponentGroup 
								assign result to LocalCapitatedComponentGroup
								fill in fields from each 						
								invoked.Contract		= PrmNewContractAndLine.NewContract
								invoked.ContractLine	= LocalContractLine.ContractLine

					if (PrmCopyLocations or PrmCopySelectAll)
						for each OriginalContractAndLine.OriginalContractLine.ContractLineLocationRel
							LocalContract      		= PrmNewContractAndLine.NewContract
							LocalCopyContractLine       = LocalContractLine.ContractLine
							LocalCompany       		= each.ContractAndLineLocation.Company 
							LocalLocation           = each.ContractAndLineLocation.Location 
							LocalReqLocation        = each.ContractAndLineLocation.RequestingLocation
							if (ContractLocalLineLocationRel !exists)
								invoke Create ContractAndLineLocation 
									invoked.ContractGroup 								= ContractGroup
									invoked.Contract 		           					= LocalContract
									invoked.ContractLine                                = LocalContractLine.ContractLine
									invoked.ContractAndLineLocation.Company 			= LocalCompany 
									invoked.ContractAndLineLocation.Location			= LocalLocation 
									invoked.ContractAndLineLocation.RequestingLocation	= LocalReqLocation
									invoked.Taxable                                     = each.Taxable 
									invoked.TaxCode                                     = each.TaxCode 
									invoked.ClinicalSystemUse                           = each.ClinicalSystemUse
					
					if (CreateFromPartial)
						if (CloseExistingLines)
							if (FromInterface)
								invoke DeleteOrClose  
							else
							if (!FromInterface)
								invoke CloseLine
						else 
							if (HoldExistingLines)
								invoke HoldContractLine 
									invoked.PrmContractGroup    = ContractGroup
									invoked.PrmContract         = Contract
									invoked.PrmContractLine     = ContractLine
									invoked.PrmHoldCode         = ProcurementReasonCode

					if (ContractLineExists)
						SelectedForCopy = false 


		CopyProcedure is an Instance Action 
			valid when (CanCopyProcedure)
			Parameters
				NewProcedureItemNumber					is like Item 
				NewVendorItem               			is like VendorItem 
				NewPrimaryCost              			is a ContractUnitCost    
				NewRevisionCost            				is a ContractUnitCost
				NewCapitatedProcedure       			is Numeric 1        
					default label is "NewProcedureType"
					States
						PrimaryAndRevision		value is 1
						PrimaryOnly             value is 2
						RevisionOnly			value is 3	
				NewPrimaryDiscount          			is Percent size 6.3
					default label is "NewPrimaryDiscountForComponentGroups"
				NewRevisionDiscount         			is Percent size 6.3
					default label is "NewRevisionDiscountForComponentGroups"
				SetComponentGroupMaximumQuantityToZero 	is Boolean

			Parameter Rules 
				NewProcedureItemNumber 
					initial value is ItemNumber 
				NewVendorItem 
					required 
					initial value is VendorItem 
				NewPrimaryCost 
					initial value is BaseCost 
					if (NewCapitatedProcedure = 1
					or  NewCapitatedProcedure = 2)
						constraint (NewPrimaryCost entered)
							"MustEnterANewPrimaryCost"
				NewRevisionCost 
					initial value is RevisionProcedureCost 
					if (NewCapitatedProcedure = 1
					or  NewCapitatedProcedure = 3)
						constraint (NewRevisionCost entered)
							"MustEnterANewRevisionCost"
				NewCapitatedProcedure 
					initial value is CapitatedProcedure 
					required


			Local Fields
				OriginalContractLine            is a ContractLine 
				LocalContractLine          		is a ContractLine view
				LocalCapitatedComponentGroup    is a ContractCapitatedComponentGroup view
				CopiedComponentGroupItem        is a ContractCapitatedComponentGroupItem view

			Action Rules 
				invoke Create ContractLine
					assign result to LocalContractLine
					fill in fields from this instance 
					initialize invoked.PayablesDistributionCode
					initialize invoked.ErrorsExist
					initialize invoked.HasBeenActivated
					initialize invoked.CommitmentsClosed
					initialize invoked.CurrentNetCost
					invoked.PreferredLine = false
					invoked.CreateFromCopy			= true
					invoked.QuantityOrdered			   = 0
					invoked.AmountOrdered			   = 0
					invoked.ConsignmentAmountOrdered   = 0
					invoked.ConsignmentQuantityOrdered = 0
					invoked.AddOnChargeAmountOrdered   = 0
					invoked.TaxAmountOrdered           = 0
					invoked.RetainageInvoiceAmount     = 0
					invoked.RetainageInvoiceQuantity   = 0
					invoked.AmountRequested            = 0
					invoked.ItemNumber                 = NewProcedureItemNumber		 
					invoked.VendorItem                 = NewVendorItem                
					invoked.BaseCost                   = NewPrimaryCost                  
					invoked.RevisionProcedureCost      = NewRevisionCost             
					invoked.CapitatedProcedure         = NewCapitatedProcedure

				for each ContractCapitatedComponentGroupRel
					invoke Create ContractCapitatedComponentGroup 
						assign result to LocalCapitatedComponentGroup
						fill in fields from each 						
						invoked.ContractLine	= LocalContractLine.ContractLine
						if  (SetComponentGroupMaximumQuantityToZero)
							invoked.ItemsAllowed   = 0	
						if  (NewPrimaryDiscount entered
						and (NewCapitatedProcedure = 1
						or   NewCapitatedProcedure = 2))
							invoked.PrimaryDiscount 	= NewPrimaryDiscount
						if  (NewRevisionDiscount entered
						and (NewCapitatedProcedure = 1
						or   NewCapitatedProcedure = 3))
							invoked.RevisionDiscount 	= NewRevisionDiscount

					for each each.ComponentItemRel 
						invoke Create ContractCapitatedComponentGroupItem 
							assign result to CopiedComponentGroupItem
							fill in fields from each 
							invoked.ContractLine                    = LocalContractLine.ContractLine 
							invoked.ContractCapitatedComponentGroup = LocalCapitatedComponentGroup.ContractCapitatedComponentGroup
							invoked.FromCopy                        = true 
						LocalComponentGroup					= each.ContractCapitatedComponentGroup
						LocalCapitatedComponentGroupItem    = each.ContractCapitatedComponentGroupItem 
						LocalComponentContractLine          = each.ComponentContractLine
						for each CopiedContractCapitatedCompanyLocationItemRel 
							invoke Create ContractCapitatedCompanyLocationItem 
								invoked.ContractGroup						= ContractGroup 
								invoked.Contract                        	= Contract
								invoked.ContractCapitatedComponentGroup		= LocalCapitatedComponentGroup.ContractCapitatedComponentGroup
								invoked.ContractLine                    	= LocalContractLine.ContractLine   
								invoked.ComponentContractLine               = LocalComponentContractLine 
								invoked.ContractCapitatedComponentGroupItem	= CopiedComponentGroupItem.ContractCapitatedComponentGroupItem 
								invoked.Company                             = each.Company 
								invoked.Location                            = each.Location		
								invoked.PrimaryDiscount                 	= each.PrimaryDiscount
								invoked.RevisionDiscount                	= each.RevisionDiscount                  
								invoked.PrimaryFinalCost                	= each.PrimaryFinalCost    
								invoked.RevisionFinalCost               	= each.RevisionFinalCost  

		CalculateNumberOfTimesPurchased is a Set Action
			default label is "Calculate Number of Times Purchased"
			completion message is "JobHasBeenSubmitted.CheckForCompletionIn'MyActions'."

			Parameters
				PrmProcurementGroup is a ProcurementGroup

			Parameter Rules
				PrmProcurementGroup

			Instance Selection
				where (ContractGroup = PrmProcurementGroup
				and    SpecialItemNotSelectedForItemCreationCalculatePurchases)

			Action Rules
				Instance Rules
					NumberOfPurchases	= DerivedNumberOfPurchases

		CreateMfgContractLinePivot is a Set Action
			restricted
			Parameters
				PrmContractGroup	is a ContractGroup
				PrmContract			is a Contract

			Instance Selection
				where (ContractGroup	= PrmContractGroup
				and    Contract			= PrmContract)

			Action Rules
				Instance Rules
					if (!ContractLinePivotRel exists)

						invoke Create MfgContractLinePivot
							invoked.ContractGroup				= ContractGroup
							invoked.ManufacturerContractPivot	= Contract
							invoked.MfgContractLinePivot		= ContractLine

		RecallContractLineItemQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup			is a RecallGroup
				PrmRecallNotice			is a RecallNotice
				PrmRecallProduct		is a RecallProduct
				PrmItem					is an Item
				PrmCreateTasks          is Boolean
				PrmQueryPriority		is Numeric size 2
					States
		   				High				value is 1
		   				Medium				value is 2
		   				Low					value is 3
				PrmQueryDueDate			is TimeStamp
				PrmQueryDocumentUser	is a RecallUser
				PrmInstructions         is a RecallTaskInstruction
				PrmSupplier             is like Supplier

			Sort Order
				ContractGroup
				ItemNumber
				Contract
				ContractLine

			Instance Selection
				where (ContractGroup = PrmRecallGroup
				and    ItemNumber = PrmItem
				and    ItemType.Itemmast
				and    LineNotClosed
				and   (PrmSupplier not entered
				or     PrmSupplier = Contract.Supplier))

			Action Rules
				Instance Rules
					include CreateRecallProductTransaction

		RecallContractLineVendorItemQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup			is a RecallGroup
				PrmRecallNotice			is a RecallNotice
				PrmRecallProduct		is a RecallProduct
				PrmVendorItem       	is like VendorItem
				PrmCreateTasks          is Boolean
				PrmQueryPriority		is Numeric size 2
					States
		   				High				value is 1
		   				Medium				value is 2
		   				Low					value is 3
				PrmQueryDueDate			is TimeStamp
				PrmQueryDocumentUser	is a RecallUser
				PrmInstructions         is a RecallTaskInstruction
				PrmSupplier             is like Supplier

			Sort Order
				ContractGroup
				VendorItem
				UOM
				Contract
				ContractLine

			Instance Selection
				where (ContractGroup = PrmRecallGroup
				and    DerivedStrippedVendorItem = PrmVendorItem
				and    ItemType.Special
				and    LineNotClosed
				and   (PrmSupplier not entered
				or     PrmSupplier = Contract.Supplier))

			Action Rules
				Instance Rules
					include CreateRecallProductTransaction

		RecallContractLineManufacturerNumberQuery is a Set Action
			restricted
			Parameters
				PrmRecallGroup			is a RecallGroup
				PrmRecallNotice			is a RecallNotice
				PrmRecallProduct		is a RecallProduct
				PrmManufacturerNumber	is like ManufacturerNumber
				PrmManufacturerCode		is like ManufacturerCode
				PrmManufacturerDivision is like ManufacturerDivision
				PrmCreateTasks          is Boolean
				PrmQueryPriority		is Numeric size 2
					States
		   				High				value is 1
		   				Medium				value is 2
		   				Low					value is 3
				PrmQueryDueDate			is TimeStamp
				PrmQueryDocumentUser	is a RecallUser
				PrmInstructions         is a RecallTaskInstruction
				PrmSupplier             is like Supplier

			Sort Order
				ContractGroup
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
				VendorItem
				Contract
				ContractLine

			Instance Selection
				where (ContractGroup = PrmRecallGroup
				and  ((PrmManufacturerCode entered
				and    PrmManufacturerDivision !entered
				and    Manufacturer.ManufacturerCode     = PrmManufacturerCode)
				or    (PrmManufacturerDivision entered
				and    Manufacturer.ManufacturerCode     = PrmManufacturerCode 
				and    Manufacturer.ManufacturerDivision = PrmManufacturerDivision)
				or     PrmManufacturerCode !entered)
				and    ManufacturerNumber                = PrmManufacturerNumber
				and    ItemType.Special
				and    LineNotClosed 
				and   (PrmRecallNotice.Supplier not entered
				or     PrmRecallNotice.Supplier = Contract.Supplier))
			Action Rules
				Instance Rules
					include CreateRecallProductTransaction

		RecallContractLineGTINQuery is a Set Action
            restricted
            Parameters
                PrmRecallGroup          is a RecallGroup
                PrmRecallNotice         is a RecallNotice
                PrmRecallProduct        is a RecallProduct
                PrmGTIN                 is like ItemGTIN
                PrmHIBCCDI              is like HIBCCItemUPN
                PrmCreateTasks          is Boolean
                PrmQueryPriority        is Numeric size 2
                    States
                        High                value is 1
                        Medium              value is 2
                        Low                 value is 3
                PrmQueryDueDate         is TimeStamp
                PrmQueryDocumentUser    is a RecallUser
                PrmInstructions         is a RecallTaskInstruction
                PrmSupplier             is like Supplier

            Sort Order
                ContractGroup
                GlobalTradeItemNumber
                Contract
                ContractLine

            Instance Selection
                where (ContractGroup = PrmRecallGroup
                and  ((PrmGTIN entered
                and    PrmGTIN       = GlobalTradeItemNumber)
                or    (PrmHIBCCDI entered
                and    PrmHIBCCDI    = HibccUpn))
                and   (ItemType.Itemmast
                or     ItemType.Special)
                and   (ContractLineState.Draft
                or     ContractLineState.Active
                or     ContractLineState.Amendment)
                and   (PrmRecallNotice.Supplier not entered
                or     PrmRecallNotice.Supplier = Contract.Supplier))

            Action Rules
                Instance Rules
                    include CreateRecallProductTransaction

		DeleteAllLines is a Set Action
			restricted
			Parameters
				ParmContractGroup     is a ContractGroup
				ParmContract          is a Contract

			Instance Selection
				where (ParmContractGroup = ContractGroup
				and    ParmContract      = Contract)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Empty Set Rules
					invoke Delete Contract

				Contract Set Rules
					
					Exit Rules
						if (IsManufacturerContract
						and Contract.HasDistributorContract)
							invoke DeleteAllDistributorContractLinesForAManufacturer ContractLine
								invoked.PrmContractGroup 		= ContractGroup
								invoked.PrmManufacturerContract = Contract
						invoke Delete Contract
						if (Contract.MaximumAmount entered
                        and Contract.ParentContract entered)
                            invoke CalculateTotalChildMaximumAmount Contract.ParentContractRel						

				Instance Rules
					FromMassDelete = true
					invoke FastDelete

		FastDelete is a Delete Action 
			restricted 
			bypass relational integrity rules
			Entrance Rules

				include ProcessDeleteRules

			Action Rules

				if (IsManufacturerContract
				and !FromMassDelete)
					constraint (!DistributorContractLineQuantityOrderedRel exists)
						"CannotDelete;ThisManufacturerContractLineHasBeenAttachedToADistributorContract;MustEitherDeleteDistributorContractLineOrCloseThisLine"

			Exit Rules
				include ProcessDeleteExitRules			
		
		DeleteOrClose is an Instance Action 
			restricted
			Action Rules

				if (!HasUnreleasedPoLine
				and !HasUnreleasedReqLine
				and !HasPurchaseOrderInterface
				and NoUnreleasedDistReqLinesExist
				and NoUnprocessedDistPOInterfaceRecordsExist
				and NoUnreleasedDistPoLinesExist)
					if (QuantityOrdered = 0
					and PoLineRel !exists
					and RequisitionLinesByContractRel !exists
					and !HasBeenActivated)
						if (DistributorContractLineQuantityOrderedRelExists)
							for each DistributorContractLineQuantityOrderedRel
								if (each.QuantityOrdered = 0
								and each.LineNotClosed
								and each.PoLineRel !exists
								and each.RequisitionLinesByContractRel !exists)
									invoke Delete each	
								else
									LocalDistLineClosed = true
									if (each.LineNotClosed)
										invoke CloseLine each
							if (LocalDistLineClosed)
								if (LineNotClosed)
									invoke CloseLine
							else
								invoke Delete
						else
							invoke Delete
					else
						if (LineNotClosed)
							invoke CloseLine
						if (DistributorContractLineRelExists)
							for each DistributorContractLineRel
								if (each.LineNotClosed)
									invoke CloseLine each


		DeleteWithTemplate is a Delete Action
			valid when (DeleteLineAvailableWithTemplate)
			default label is "DeleteWithTemplate"
			Parameters
				DeleteTemplateLines is Boolean
				ClearTemplateLines is Boolean

			Parameter Rules
				DeleteTemplateLines
					if (DeleteTemplateLines)
						constraint (!ClearTemplateLines)
							"CanOnlySelectDeleteLinesOrClearLines;NotBoth"
				ClearTemplateLines
					if (ClearTemplateLines)
						constraint (!DeleteTemplateLines)
							"CanOnlySelectDeleteLinesOrClearLines;NotBoth"

			Entrance Rules
				for each ProcurementTemplateLineRel
					invoke DeleteOrClearFromContractInstance each
						if (DeleteTemplateLines)
							invoked.DeleteLines = true
						if (ClearTemplateLines)
							invoked.ClearLines  = true

				include ProcessDeleteRules 
			Action Rules

				if (IsManufacturerContract)
					constraint (!DistributorContractLineQuantityOrderedRel exists)
						"CannotDelete;ThisManufacturerContractLineHasBeenAttachedToADistributorContract;MustEitherDeleteDistributorContractLineOrCloseThisLine"

			Exit Rules
				include ProcessDeleteExitRules

		Delete is a Delete Action
			valid when (DeleteLineAvailableNoTemplate)
			Entrance Rules

				include ProcessDeleteRules

			Action Rules

				if (IsManufacturerContract
				and !FromMassDelete)
					constraint (!DistributorContractLineQuantityOrderedRel exists)
						"CannotDelete;ThisManufacturerContractLineHasBeenAttachedToADistributorContract;MustEitherDeleteDistributorContractLineOrCloseThisLine"

			Exit Rules
				include ProcessDeleteExitRules

		BuildTextIndex is an Instance Action 
			restricted
			Action Rules
				include BuildTextIndexes
				if (KeywordShadowRel exists)
					invoke Update KeywordShadowRel
						invoked.ItemGroup					=	ContractGroup
						invoked.Item						=   ContractLine.ItemNumber
						invoked.Contract	    			=	Contract
						invoked.ContractLine				=	ContractLine
						invoked.Description					=	ItemDescription
						invoked.Description2				=	ItemDescription2
						invoked.Description3				=	ItemDescription3
						invoked.ManufacturerCodeTextSearch 	= DerivedManufacturerCodeTextSearch
						invoked.ManufacturerNumberTextSearch = DerivedManufacturerNumberKeywordShadow
						invoked.TextSearch					=	TextSearch
						invoked.ItemHasContract				= true
						invoked.HasPreferredContract		= PreferredLine
				else
					invoke Create KeywordShadow
						invoked.ItemGroup		=	ContractGroup
						invoked.Item			=   ContractLine.ItemNumber
						invoked.Contract	    =	Contract
						invoked.ContractLine	=	ContractLine
						invoked.Description		=	ItemDescription
						invoked.Description2	=	ItemDescription2
						invoked.Description3	=	ItemDescription3
						invoked.ManufacturerCodeTextSearch = DerivedManufacturerCodeTextSearch
						invoked.ManufacturerNumberTextSearch = DerivedManufacturerNumberKeywordShadow
						invoked.TextSearch		=	TextSearch
						invoked.ItemHasContract				= true
						invoked.HasPreferredContract		= PreferredLine

		UpdateAmountsAndQuantities is an Instance Action
			restricted
			Parameters
				InTaxAmount 			is an InternationalAmount
				InAddOnChargeAmount		is an InternationalAmount
				InDate					is Date
				InAmount				is an InternationalAmount
				InRequestedAmount       is an InternationalAmount
				InUOM					is like CMUnitOfMeasureEdit
				InQuantity				is a Quantity
				InCurrency              is a Currency
				InInvoiceAmount         is an InternationalAmount 
				InInvoiceQuantity       is a Quantity
				InConsignment           is Boolean
				FromCancelOrDelete      is Boolean
				InServiceCostMessageAmount is an InternationalAmount
				InServiceCostMessageQuantity is a Quantity
				InDifferenceAmount      is an InternationalAmount 
				FromMatch               is Boolean  

			Action Rules
				include IncomingCurrencyConversion
				if (InConsignment)
					ConsignmentAmountOrdered = ConvertedAmount + ConsignmentAmountOrdered
				else
					AmountOrdered            = ConvertedAmount + AmountOrdered
				AmountRequested              = ConvertedRequestedAmount + AmountRequested
				AddOnChargeAmountOrdered     = ConvertedAddOnChargeAmount + AddOnChargeAmountOrdered
				TaxAmountOrdered             = ConvertedTaxAmount + TaxAmountOrdered
				RetainageInvoiceAmount       = ConvertedInvoiceAmount + RetainageInvoiceAmount
				if  (InServiceCostMessageAmount entered
				or   InServiceCostMessageQuantity entered)
					if (ServiceCode.Quantity
					or  ServiceCode.NotServiceItem)
						CurrentNetCost           = ConvertedCostMessageAmount
				if (ConsignmentAmountOrdered < 0)
					ConsignmentAmountOrdered = 0
				if (AmountOrdered < 0)
					AmountOrdered = 0
				if (AmountRequested < 0)
					AmountRequested = 0
				if (AddOnChargeAmountOrdered < 0)
					AddOnChargeAmountOrdered = 0
				if (TaxAmountOrdered < 0)
					TaxAmountOrdered = 0
				if (RetainageInvoiceAmount < 0)
					RetainageInvoiceAmount = 0

				if  (!Contract.IncludeAOCInMaxEdits           
				and  !Contract.IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount
				else
				if  (Contract.IncludeAOCInMaxEdits
				and  !Contract.IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedAddOnChargeAmount
				else
				if  (!Contract.IncludeAOCInMaxEdits
				and  Contract.IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount
				else
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount + ConvertedAddOnChargeAmount
				if (ConvertedAmount entered
				or  ConvertedTaxAmount entered
				or  ConvertedAddOnChargeAmount entered
				or  ConvertedRequestedAmount entered
				or  ConvertedInvoiceAmount entered
				or  FromCancelOrDelete = true)
					invoke UpdateContractAmounts Contract
						invoked.InAmount            = ConvertedAmount
						invoked.InTaxAmount         = ConvertedTaxAmount
						invoked.InAddOnChargeAmount = ConvertedAddOnChargeAmount
						invoked.InRequestedAmount   = ConvertedRequestedAmount
						invoked.InInvoiceAmount     = ConvertedInvoiceAmount
						invoked.InTransactionDate   = InDate
						invoked.FromCancelOrDelete  = FromCancelOrDelete
						invoked.FromMatch           = FromMatch

				if (InQuantity != 0)
					if (InUOM.UnitOfMeasure = UOM.UnitOfMeasure
					or  ItemType.Special)
						if (ItemNumber.Consignment)
							ConsignmentQuantityOrdered += InQuantity
						else
							QuantityOrdered += InQuantity
					else
						initialize LocalUOMCalculation
						LocalUOMCalculation.InputQuantity				= InQuantity
						LocalUOMCalculation.InputUOM.UnitOfMeasure		= InUOM.UnitOfMeasure
						LocalUOMCalculation.InputToUOM.UnitOfMeasure	= UOM.UnitOfMeasure
						LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate
						if (ItemNumber.Consignment)
							ConsignmentQuantityOrdered += LocalUOMCalculation.OutputQuantity
						else
							QuantityOrdered += LocalUOMCalculation.OutputQuantity
				if (InInvoiceQuantity != 0)
					if (InUOM.UnitOfMeasure = UOM.UnitOfMeasure
					or  ItemType.Special)
						RetainageInvoiceQuantity += InInvoiceQuantity
					else
						initialize LocalUOMCalculation
						LocalUOMCalculation.InputQuantity				= InInvoiceQuantity
						LocalUOMCalculation.InputUOM.UnitOfMeasure		= InUOM.UnitOfMeasure
						LocalUOMCalculation.InputToUOM.UnitOfMeasure	= UOM.UnitOfMeasure
						LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

						RetainageInvoiceQuantity += LocalUOMCalculation.OutputQuantity
				if (QuantityOrdered < 0)
					QuantityOrdered = 0
				if (ConsignmentQuantityOrdered < 0)
					ConsignmentQuantityOrdered = 0
				if (RetainageInvoiceQuantity < 0)
					RetainageInvoiceQuantity = 0

				LocalAmountUpdateDate  = InDate

			Exit Rules
				if  (UseCommitments
				and ((Contract.CreateCommitments.Line
				and  !FromMatch)
				or   Contract.CreateCommitments.LineSpread))
					for each ContractLineDistributionRel
						invoke UpdateCommitmentsFromUpdateAmount each
							invoked.InUsedAmount		= TransientUsedAmount
							invoked.InTransactionDate	= InDate
							invoked.FromCancelOrDelete	= FromCancelOrDelete
							invoked.FromPORelease       = FromMatch

		CalculateUsedForNewSpread is an Instance Action   
			restricted
			
			Parameters
				InTaxAmount 				is an InternationalAmount
				InAddOnChargeAmount			is an InternationalAmount
				InAmount					is an InternationalAmount
				InRequestedAmount       	is an InternationalAmount
				InUOM						is like CMUnitOfMeasureEdit
				InCurrency              	is a Currency
				InInvoiceAmount         	is an InternationalAmount 
				InServiceCostMessageAmount 	is an InternationalAmount 
				InDifferenceAmount      	is an InternationalAmount 
				InSpreadDate            	is Date
				InDate                      is Date
				InContractLineDistribution 	is like ContractLineDistribution

			Action Rules
				include IncomingCurrencyConversion

				if  (!Contract.IncludeAOCInMaxEdits           
				and  !Contract.IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount
				else
				if  (Contract.IncludeAOCInMaxEdits
				and  !Contract.IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedAddOnChargeAmount
				else
				if  (!Contract.IncludeAOCInMaxEdits
				and  Contract.IncludeTaxInMaxEdits)
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount
				else
					TransientUsedAmount = ConvertedAmount + ConvertedRequestedAmount + ConvertedTaxAmount + ConvertedAddOnChargeAmount

			Exit Rules

				LocalSpreadDate					= InSpreadDate
				LocalContractLineDistribution	= InContractLineDistribution
				invoke UpdateUsedAmount first SingleDistributionSpreadRel
					invoked.InUsedAmount 			= TransientUsedAmount
					invoked.FromSpreadAfterActive	= true

		EditLimits is an Instance Action
		 	restricted
			Parameters
				InDate					is Date
				InAmount				is an InternationalAmount
				InDifferenceAmount      is an InternationalAmount 
				InAddOnChargeAmount     is an InternationalAmount
				InTaxAmount             is an InternationalAmount
				InUOM					is like CMUnitOfMeasureEdit
				InQuantity				is a Quantity
				InCurrency              is a Currency
				FromRQ                  is Boolean
				BypassEditLimits        is Boolean
				InRequestedAmount       is an InternationalAmount 
				InInvoiceAmount         is an InternationalAmount 
				InServiceCostMessageAmount is an InternationalAmount
				POFromRQ                is Boolean 
				LineSpreadOnly          is Boolean 

			Action Rules
				include IncomingCurrencyConversion

				if (!LineSpreadOnly)
					if (InDate entered
					and Contract.ServicePurchaseType)
						if (ExpirationDate entered
						and Contract.LastInvoiceAllowedDate !entered)
							constraint (InDate <= ExpirationDate)
								"CannotUse;InvoiceDateOutsideRangeForContractLine"
						if (Contract.FirstInvoiceAllowedDate !entered)
							constraint (InDate >= EffectiveDate)
								"CannotUse;InvoiceDateOutsideRangeForContractLine"

					if (Contract.ServicePurchaseType)
						constraint (ContractLineState.Active)
							"CannotUse;ContractLineMustBeActive"
					
					if (InAmount != 0)
						if (PerOrderMaximumAmount entered)
							constraint (ConvertedAmount <= PerOrderMaximumAmount)
								"Item<ItemNumber>;<ItemDescription>AmountOf<ConvertedAmount>ExceedsPerOrderMaximumAmountOf<PerOrderMaximumAmount>OnContract"
		
						if (PerOrderMinimumAmount entered)
							constraint (ConvertedAmount >= PerOrderMinimumAmount)
								"Item<ItemNumber>;<ItemDescription>AmountOf<ConvertedAmount>IsLessThanPerOrderMinimumAmountOf<PerOrderMinimumAmount>OnContract"
		
						if (!BypassEditLimits)
							
							if (ConvertedDifferenceAmount = 0)

								if (LifetimeMaximumAmount entered)
									if (ServicePurchaseTypeContract)
										constraint ((ConvertedTotalAmount + MaximumLineAmountInUse) <= LifetimeMaximumAmount)
											"<ItemDescription>LineAmountOf<ConvertedTotalAmount>PlusExistingInvoicedAmountWillExceedLineLifetimeMaximumAmountOf<LifetimeMaximumAmount>OnContract"
									else
										constraint ((ConvertedTotalAmount + MaximumLineAmountInUse) <= LifetimeMaximumAmount)
											"Item<ItemNumber>;<ItemDescription>LineAmountOf<ConvertedTotalAmount>PlusExistingOrderedAmountWillExceedLineLifetimeMaximumAmountOf<LifetimeMaximumAmount>OnContract"		
								if (Contract.MaximumAmount entered)
									if (ServicePurchaseTypeContract)
										constraint ((ConvertedTotalAmount + Contract.MaximumAmountInUse) <= Contract.MaximumAmount)
											"<ItemDescription>LineAmountOf<ConvertedTotalAmount>PlusExistingInvoicedAmountWillExceedContractLifetimeMaximumAmountOf<Contract.MaximumAmount>OnContract"
									else
										constraint ((ConvertedTotalAmount + Contract.MaximumAmountInUse) <= Contract.MaximumAmount)
											"Item<ItemNumber>;<ItemDescription>LineAmountOf<ConvertedTotalAmount>PlusExistingOrderedAmountWillExceedContractLifetimeMaximumAmountOf<Contract.MaximumAmount>OnContract"		
			
							else
							if (ConvertedDifferenceAmount !=0)
								if (LifetimeMaximumAmount entered)
									constraint ((ConvertedDifferenceAmount + MaximumLineAmountInUse) <= LifetimeMaximumAmount)
										"Item<ItemNumber>;<ItemDescription>DifferenceAmountOf<ConvertedDifferenceAmount>PlusExistingAmountWillExceedLineLifetimeMaximumAmountOf<LifetimeMaximumAmount>OnContract"
			
								if (Contract.MaximumAmount entered)
									constraint ((ConvertedDifferenceAmount + Contract.MaximumAmountInUse) <= Contract.MaximumAmount)
										"Item<ItemNumber>;<ItemDescription>DifferenceAmountOf<ConvertedDifferenceAmount>PlusExistingAmountWillExceedContractLifetimeMaximumAmountOf<Contract.MaximumAmount>OnContract"
			
					if (InQuantity != 0)
						if (InUOM.UnitOfMeasure = UOM.UnitOfMeasure
						or  ItemType.Special)
							ConvertedQuantity           = InQuantity
						else
							initialize LocalUOMCalculation
							LocalUOMCalculation.InputQuantity				= InQuantity
							LocalUOMCalculation.InputUOM.UnitOfMeasure		= InUOM.UnitOfMeasure
							LocalUOMCalculation.InputToUOM.UnitOfMeasure	= UOM.UnitOfMeasure
							LocalUOMCalculation.Method						= LocalUOMCalculation.Method.ConvertToAlternate

							ConvertedQuantity   =  LocalUOMCalculation.OutputQuantity

						if (PerOrderMaximumQuantity entered)
							constraint (ConvertedQuantity <= PerOrderMaximumQuantity)
								"Item<ItemNumber>;<ItemDescription>QuantityOf<ConvertedQuantity>ExceedsPerOrderMaximumQuantityOf<PerOrderMaximumQuantity>"

						if (PerOrderMinimumQuantity entered)
							constraint (ConvertedQuantity >= PerOrderMinimumQuantity)
								"Item<ItemNumber>;<ItemDescription>QuantityOf<ConvertedQuantity>IsLessThanPerOrderMinimumQuantityOf<PerOrderMinimumQuantity>"

						if (!BypassEditLimits)
							if (LifetimeMaximumQuantity entered
							and !FromRQ)  
								constraint (ConvertedQuantity <= LifetimeMaximumQuantity)
									"Item<ItemNumber>;<ItemDescription>QuantityOf<ConvertedQuantity>PlusExistingQuantityWillExceedLifetimeMaximumQuantityOf<LifetimeMaximumQuantity>OnContract"

				if (InAmount != 0
				or  InDifferenceAmount != 0)
					if   (ConvertedDifferenceAmount = 0
					and  !POFromRQ)
						if (Contract.CreateCommitments.LineSpread)
							for each ContractLineDistribution set
								invoke EditSpreads each
									invoked.InUsedAmount      = ConvertedTotalAmount
									invoked.InTransactionDate = InDate

					else
					if (ConvertedDifferenceAmount !=0)

						if (Contract.CreateCommitments.LineSpread)
							for each ContractLineDistribution set
								invoke EditSpreads each
									invoked.InUsedAmount      = ConvertedDifferenceAmount
									invoked.InTransactionDate = InDate				

		IncludeInProcurementTemplateLine is an Instance Action
			default label is "CreateTemplateLine"
			Parameters
				PrmProcurementGroup             is a ProcurementGroup
				PrmProcurementTemplate			is a ProcurementTemplate

			Parameter Rules
				PrmProcurementGroup
					required

				PrmProcurementTemplate
					required

			Action Rules
				LocalProcurementGroup    = PrmProcurementGroup
				LocalProcurementTemplate = PrmProcurementTemplate

				invoke Create ProcurementTemplateLine
					if (CanUseForCostDefaulting
					and !ErrorsExist)
						invoked.Contract            = Contract
						invoked.ContractLine        = ContractLine
					invoked.ProcurementGroup        = ContractGroup
					invoked.ProcurementTemplate 	= PrmProcurementTemplate
					if (ServiceItemType)
						invoked.ServiceDescription  = ItemDescription
						invoked.CommodityCode       = CommodityCode
					if (SpecialItem)
						invoked.SpecialItemDescription = ItemDescription

		CreateFromContractLine is an Instance Action   
			Local Fields
 				LocalPurchaseOrderLine			is a PurchaseOrderLine view
 				LocalCompletionMessage			is Alpha size 50
 				LocalCopiedLines				is Boolean
			Parameters
				PrmPurchaseOrder 		is a PurchaseOrder
				PrmCompany 				is a PurchasingCompany

			Action Rules


				if (ContractLineState.Active) 
					LocalCopiedLines = true
 					invoke CreateCopy PurchaseOrderLine
 						assign result to LocalPurchaseOrderLine
 						invoked.Company 						= PrmCompany
 						invoked.PurchaseOrder					= PrmPurchaseOrder 
 						invoked.Manufacturer					= Manufacturer
 						invoked.Description						= ItemDescription
 						invoked.VendorItem 						= VendorItem
 						invoked.Item 							= ItemNumber
 						if (HasCatchweightItem)
 							invoked.EnteredBuyUOM 				= ItemNumber.SecondaryUOM
 						else
 							invoked.EnteredBuyUOM 				= UOM
 						if (VendorItem.VendorBuyUOM entered and VendorItem.VendorBuyUOM != UOM)
							invoked.LocalBypassQuantityConversion = true
 						invoked.Quantity 						= 1 
 						invoked.Taxable 						= Taxable
 						invoked.TaxCode							= TaxCode
 						invoked.ManufacturerNumber				= ManufacturerNumber
						invoked.DistributionCode				= PayablesDistributionCode
 						invoked.ShipToLocation 					= PrmPurchaseOrder.ShipToLocation
 						invoked.TransientFromBlanketContract 	= true
 						invoked.EarlyDeliveryDate				= PrmPurchaseOrder.PurchaseOrderDate
 						if (ServiceCode not entered)
 							invoked.ServiceCode					= blank
 						else
 							invoked.ServiceCode					= ServiceCode
 						invoked.Contract						= Contract
 						invoked.ContractLine					= ContractLine
 						if (ItemType = 2)
 							invoked.ItemType					= "S"
 						if (ItemType = 3)
 							invoked.ItemType					= "X"
 						if (CommodityCode entered)
 							invoked.CommodityCode				= CommodityCode
 						if (IsHSNSACCodeEnabled)
 							invoked.HSNSACCode					= HSNSACCode
					if(ContractLineCommentExists)
						for each ContractLineComment set
							if(each.CommentUsedFor.PrintOnPurchaseOrder
							or each.CommentUsedFor.DisplayOnInvoice)
								invoke SystemCreateLine PurchaseOrderLineComment
									invoked.Company				  = LocalPurchaseOrderLine.Company
									invoked.PurchaseOrder         = LocalPurchaseOrderLine.PurchaseOrder
									invoked.PurchaseOrderLine     = LocalPurchaseOrderLine.PurchaseOrderLine
									invoked.CommentTitle		  = each.CommentTitle
									if (each.CommentUsedFor.PrintOnPurchaseOrder)
										invoked.CommentType			  =	"P"
									else
										invoked.CommentType			  = "N"
									invoked.CommentText			  =	each.Description
									invoked.Attachment.File		  =	each.Attachment.File
									invoked.Attachment.MimeType	  =	each.Attachment.MimeType
									invoked.Attachment.Title	  =	each.Attachment.Title
					if(BlanketStandingRequestingLocation.RequestingLocation entered)
						if(BlanketStandingRequestingLocation.RequestingLocation.Active)
							invoke Create PurchaseOrderLineSource
								invoked.Company												 = LocalPurchaseOrderLine.Company
								invoked.PurchaseOrder        								 = LocalPurchaseOrderLine.PurchaseOrder
								invoked.PurchaseOrderLine     								 = LocalPurchaseOrderLine.PurchaseOrderLine
								invoked.PurchaseOrderLineSource.SourceDocumentOrigin		 = "PO"
								invoked.PurchaseOrderLineSource.SourceDocumentLineNumber	 = ContractLine
								invoked.RequestedDeliveryDate								 = LocalPurchaseOrderLine.EarlyDeliveryDate
								invoked.Quantity											 = LocalPurchaseOrderLine.Quantity
								invoked.EnteredUOM					 						 = LocalPurchaseOrderLine.EnteredBuyUOM
								invoked.EnteredUOMMultiplier		 						 = LocalPurchaseOrderLine.EnteredBuyUOMMultiplier
								invoked.PurchaseOrderLineSource.SourceDocumentNumeric		 = Contract
								invoked.RequestingLocation                                   = BlanketStandingRequestingLocation.RequestingLocation

		 		if(LocalCopiedLines)
					LocalCompletionMessage = "PurchaseOrderCreated"
	 			else
	 				LocalCompletionMessage = "PurchaseOrderReleaseHeaderAdded;BlanketContractHasNoLines"

		RemoveKeywordShadowServiceAndStanding is a Set Action
            restricted
            Instance Selection
                where (ServicePurchaseTypeContract
                or     Contract.StandingPurchaseType)

            Action Rules
                Instance Rules
                    invoke Purge PurgeKeywordShadowRel

		BuildContractComplianceInvoiceLines is a Set Action
			Parameters
				PrmContractGroup is a ContractGroup
				PrmContractRange is a ContractRange
			Parameter Rules
				PrmContractGroup
					initial value is ContractGroup
					default to ContractGroup
				PrmContractRange
					required

			Instance Selection
				where ((ContractGroup = PrmContractGroup
					and Contract within PrmContractRange)
				or (ContractGroup = PrmContractGroup
					and !PrmContractRange entered))

			Sort Order
				ContractGroup
				Contract
				ItemNumber
				ContractLine

			Action Rules
				Instance Rules
					for each PoInvLineFactRel
						if ((each.PoDate			<= Contract.ExpirationDate)
						or  (Contract.ExpirationDate		not entered))
							if (each.ContractGroup	= ContractGroup
							and each.Contract		= Contract)
								LocalOnContractFlag		= 1
							else
								LocalOnContractFlag		= 2

							LocalEntBuyUom					= each.EntBuyUom
							LocalCompany					= each.Company
							LocalVendor						= each.PoInvLineFact.Vendor
							LocalInvoice					= each.PoInvLineFact.Invoice
							LocalPoNumber					= each.PoInvLineFact.PoNumber
							LocalPoRelease					= each.PoInvLineFact.PoRelease
							LocalPoCode						= each.PoInvLineFact.PoCode
							LocalLineNbr					= each.PoInvLineFact.LineNbr
							LocalSeqNbr						= each.PoInvLineFact.SeqNbr
							SavedFromCurrency				= Contract.CurrencyCode
							SavedExchangeDate				= each.InvoiceDte
							SavedCurrencyTable				= each.Company.CurrencyTable
							if (Contract.CurrencyCode		!= each.CurrencyCode)
								LocalCurrencyExchange.ToCurrency				= each.CurrencyCode
								LocalCurrencyExchange.EnteredCurrencyRate		= each.PayablesInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								LocalCurrencyExchange.EnteredCurrencyAmount		= 0
								SavedTransactionAmount 							= each.MatchUnitCst * each.MatchedQty
								LocalMatchUnitCst								= LocalCurrencyExchange.OutputCurrencyAmount / each.MatchedQty
								SavedTransactionAmount 							= each.PoUnitCost * each.MatchedQty
								LocalPoUnitCost									= LocalCurrencyExchange.OutputCurrencyAmount / each.MatchedQty
							else
								LocalPoUnitCost									= each.PoUnitCost
								LocalMatchUnitCst								= each.MatchUnitCst
								LocalInvoiceQtyAtPoCostExtendedAmt				= (each.MatchedQty * LocalPoUnitCost)
								LocalInvoiceQtyAtInvoiceCostExtendedAmt			= (each.MatchedQty * LocalMatchUnitCst)
								LocalInvoiceQtyAtContractCostExtendedAmt		= (each.MatchedQty * BaseCost)
								LocalInvoiceQtyAtTierContractCostExtAmt			= (each.MatchedQty * first LineMemberTierRel.NetCostOverride)
							if (LocalPoUnitCost	> 0)
								LocalInvoiceVsPoCostVariance				= ((LocalMatchUnitCst - LocalPoUnitCost)/ LocalPoUnitCost)
							else
								LocalInvoiceVsPoCostVariance				= 0

							if (BaseCost > 0)
								LocalInvoiceVsContractCostVariance			= ((LocalMatchUnitCst - BaseCost)/ BaseCost)
							else
								LocalInvoiceVsContractCostVariance			= 0

							if (first LineMemberTierRel.BaseCost > 0)
								LocalInvoiceVsContractTierCostVariance 		= ((LocalMatchUnitCst - first LineMemberTierRel.NetCostOverride)/ first LineMemberTierRel.NetCostOverride)
							else
								LocalInvoiceVsContractTierCostVariance 		= 0
							LocalInvoiceVsPoAmountVariance					= (LocalInvoiceQtyAtInvoiceCostExtendedAmt - LocalInvoiceQtyAtPoCostExtendedAmt)
							LocalInvoiceVsContractAmountVariance			= (LocalInvoiceQtyAtInvoiceCostExtendedAmt - LocalInvoiceQtyAtContractCostExtendedAmt)
							LocalInvoiceVsContractTierAmountVariance		= (LocalInvoiceQtyAtInvoiceCostExtendedAmt - LocalInvoiceQtyAtTierContractCostExtAmt)

							invoke Update ContractComplianceInvoiceLineRel
								invoked.ContractLine						= ContractLine
								invoked.ItemDescription						= ItemNumber.Description
								invoked.ItemDescription2					= ItemNumber.Description2
								invoked.ContractUnitCost					= BaseCost
								invoked.TierUnitCost						= first LineMemberTierRel.NetCostOverride
								invoked.TierMember							= first LineMemberTierRel.ContractLineMember
								invoked.PoUnitCost							= LocalPoUnitCost
								invoked.InvoiceUnitCost						= LocalMatchUnitCst
								invoked.Quantity							= each.MatchedQty
								invoked.PoEntBuyUom							= each.EntBuyUom
								invoked.InvoiceLineContractNumber			= each.Contract
								invoked.InvoiceLineContractName				= each.ContractRel.Name
								invoked.InvoiceLineContractPreferredFlag	= each.PreferredFlag
								invoked.InvoiceLineContractVendorVname		= each.VendorRel.VendorName
								invoked.InvoiceQtyAtPoCostExtendedAmt		= LocalInvoiceQtyAtPoCostExtendedAmt
								invoked.InvoiceQtyAtInvoiceCostExtendedAmt	= LocalInvoiceQtyAtInvoiceCostExtendedAmt
								invoked.InvoiceQtyAtContractCostExtendedAmt = LocalInvoiceQtyAtContractCostExtendedAmt
								invoked.InvoiceQtyAtTierContractCostExtAmt	= LocalInvoiceQtyAtTierContractCostExtAmt
								invoked.InvoiceVsPoCostVariance				= LocalInvoiceVsPoCostVariance
								invoked.InvoiceVsContractCostVariance		= LocalInvoiceVsContractCostVariance
								invoked.InvoiceVsPoAmountVariance			= LocalInvoiceVsPoAmountVariance
								invoked.InvoiceVsContractAmountVariance		= LocalInvoiceVsContractAmountVariance
								invoked.InvoiceVsContractTierCostVariance	= LocalInvoiceVsContractTierCostVariance
								invoked.InvoiceVsContractTierAmountVariance = LocalInvoiceVsContractTierAmountVariance
								invoked.PoDate								= each.PoDate
								invoked.Vendor								= each.PoInvLineFact.Vendor
								invoked.ManufCode            				= each.ManufacturerCode
								invoked.ManufDivision          				= each.ManufacturerDivision
								invoked.PurchMajcl							= each.PurchMajcl
								invoked.PurchMincl							= each.PurchMincl
								invoked.Icsegment							= each.UNSPSCCode.UNSPSCSegment
								invoked.Icfamily							= each.UNSPSCCode.UNSPSCFamily
								invoked.Icclass								= each.UNSPSCCode.UNSPSCClass
								invoked.Iccommodity							= each.UNSPSCCode.UNSPSCCommodity
								invoked.CommodityCode						= each.CommodityCode
								invoked.ItemGroup							= each.ItemGroup
								invoked.Item								= ItemNumber
								invoked.VendorGroup							= each.VendorGroup

		SelectAllItemsForRebateQualification is a Set Action
			completion message is "SelectAllItemsForRebateHasBeenSubmitted.CheckScheduledJobsForCompletion"
			Parameters
				PrmContractGroup						is a ContractGroup
				PrmContract								is a Contract
				PrmContractRebateType					is a ContractRebateType
				PrmContractRebate						is a ContractRebate
				PrmContractRebateQualifier				is a ContractRebateQualifier
				PrmOriginalContractNumber				is Numeric size 15

			Local Fields
				LocalItemCount							is Numeric size 9

			Instance Selection
				where (ContractGroup					= PrmContractGroup
				and    Contract							= PrmOriginalContractNumber)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Set Rules
					Entrance Rules
						initialize LocalItemCount
						LocalContractRebate.ContractGroup			= PrmContractGroup
						LocalContractRebate.Contract	            = PrmContract
						LocalContractRebate.ContractRebateType      = PrmContractRebateType
						LocalContractRebate.ContractRebateQualifier = PrmContractRebateQualifier
					Exit Rules
						LocalContractRebate.ContractGroup			= PrmContractGroup
						LocalContractRebate.Contract	            = PrmContract
						LocalContract								= PrmOriginalContractNumber
						LocalContractRebate.ContractRebateType      = PrmContractRebateType
						LocalContractRebate.ContractRebateQualifier = PrmContractRebateQualifier
						invoke FastUpdate first RebateQualifierContractForLocalContractRel
							invoked.PrmSelectedItemCount	= LocalItemCount

				Instance Rules
					if (!Contract.IsDistributorContract
					or (Contract.IsDistributorContract
					and DistributorContractLineNonManufacturerContract))
						LocalContractRebate												= PrmContractRebateQualifier.ContractRebate
						LocalItemCount													+= 1
						if (!RebateQualifierItemRel exists)
							invoke Create ContractRebateQualifierItem
								invoked.ContractGroup									= PrmContractGroup
								invoked.Contract										= PrmContract
								invoked.ContractRebateType								= PrmContractRebateType
								invoked.ContractRebateQualifier							= PrmContractRebateQualifier
								invoked.ContractRebateQualifierItem.RebateContract		= Contract
								invoked.ContractRebateQualifierItem.RebateContractLine	= ContractLine
								if (ServicePurchaseTypeContract)
									invoked.ItemNumber                                  = ItemDescription
								else
								if (ItemNumber entered)
									invoked.ItemNumber									= ItemNumber
								else
								if (Contract.ManufacturerOrDistributor.ManufacturerContract
								and ManufacturerNumber entered
								and CanUseForCostDefaulting = false)
									invoked.ItemNumber									= ManufacturerNumber
								else
									invoked.ItemNumber									= ItemNumber
								invoked.UseThisItemForQualificationPurposes				= true
						else
							invoke Update RebateQualifierItemRel
								invoked.UseThisItemForQualificationPurposes				= true

		SelectAllItemsForRebateCalculation is a Set Action
			completion message is "SelectAllItemsForRebateHasBeenSubmitted.CheckScheduledJobsForCompletion"
			restricted
			Parameters
				PrmContractGroup						is a ContractGroup
				PrmContract								is a Contract
				PrmContractRebateType					is a ContractRebateType
				PrmContractRebate						is a ContractRebate
				PrmContractRebateQualifier				is a ContractRebateQualifier
				PrmOriginalContractNumber				is Numeric size 15

			Local Fields
				LocalItemCount							is Numeric size 9

			Instance Selection
				where (ContractGroup					= PrmContractGroup
				and    Contract							= PrmOriginalContractNumber)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Set Rules
					Entrance Rules
						initialize LocalItemCount
						LocalContractRebate.ContractGroup			= PrmContractGroup
						LocalContractRebate.Contract	            = PrmContract
						LocalContractRebate.ContractRebateType      = PrmContractRebateType
						LocalContractRebate.ContractRebateQualifier = PrmContractRebateQualifier
					Exit Rules
						LocalContractRebate.ContractGroup			= PrmContractGroup
						LocalContractRebate.Contract	            = PrmContract
						LocalContract								= PrmOriginalContractNumber
						LocalContractRebate.ContractRebateType      = PrmContractRebateType
						LocalContractRebate.ContractRebateQualifier = PrmContractRebateQualifier
						invoke FastUpdate first RebateQualifierContractForLocalContractRel
							invoked.PrmSelectedItemCount	= LocalItemCount

				Instance Rules
					if (!Contract.IsDistributorContract
					or (Contract.IsDistributorContract
					and DistributorContractLineNonManufacturerContract))
						LocalContractRebate												= PrmContractRebateQualifier.ContractRebate
						LocalItemCount													+= 1
						if (!RebateQualifierItemRel exists)
							invoke Create ContractRebateQualifierItem
								invoked.ContractGroup									= PrmContractGroup
								invoked.Contract										= PrmContract
								invoked.ContractRebateType								= PrmContractRebateType
								invoked.ContractRebateQualifier							= PrmContractRebateQualifier
								invoked.ContractRebateQualifierItem.RebateContract		= Contract
								invoked.ContractRebateQualifierItem.RebateContractLine	= ContractLine
								if (ServicePurchaseTypeContract)
									invoked.ItemNumber                                  = ItemDescription
								else
								if (ItemNumber entered)
									invoked.ItemNumber									= ItemNumber
								else
								if (Contract.ManufacturerOrDistributor.ManufacturerContract
								and ManufacturerNumber entered
								and CanUseForCostDefaulting = false)
									invoked.ItemNumber									= ManufacturerNumber
								else
									invoked.ItemNumber									= ItemNumber
								invoked.UseThisItemForQualificationPurposes				= false
						else
							invoke Update RebateQualifierItemRel
								invoked.UseThisItemForQualificationPurposes				= false

		DeleteAllNonQualificationItemsForRebateCalculation is a Set Action
			completion message is "DeleteAllNonQualificationItemsForRebateHasBeenSubmitted.CheckScheduledJobsForCompletion"
			restricted
			Parameters
				PrmContractGroup						is a ContractGroup
				PrmContract								is a Contract
				PrmContractRebateType					is a ContractRebateType
				PrmContractRebate						is a ContractRebate
				PrmContractRebateQualifier				is a ContractRebateQualifier
				PrmOriginalContractNumber				is Numeric size 15

			Instance Selection
				where (ContractGroup					= PrmContractGroup
				and    Contract							= PrmOriginalContractNumber)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Instance Rules
					LocalContractRebate												= PrmContractRebateQualifier.ContractRebate
					if (RebateQualifierItemRel exists)
						if (!RebateQualifierItemRel.UseThisItemForQualificationPurposes)
							invoke Delete RebateQualifierItemRel

		CountContractLine is a Set Action
			restricted
			Parameters
				PrmContractGroup						is a ContractGroup
				PrmContract								is a Contract
				PrmContractRebateType					is a ContractRebateType
				PrmContractRebate						is a ContractRebate
				PrmContractRebateQualifier				is a ContractRebateQualifier
				PrmOriginalContractNumber				is Numeric size 15

			Local Fields
				LocalLineCount							is Numeric size 9

			Instance Selection
				where (ContractGroup					= PrmContractGroup
				and    Contract							= PrmOriginalContractNumber)

			Sort Order
				ContractGroup
				Contract
				ContractLine

			Action Rules
				Set Rules
					Entrance Rules
						initialize LocalLineCount
					Exit Rules
						LocalContractRebate.ContractGroup			= PrmContractGroup
						LocalContractRebate.Contract				= PrmContract
						LocalContract								= PrmOriginalContractNumber
						LocalContractRebate.ContractRebateType		= PrmContractRebateType
						initialize LocalContractRebate.ContractRebateQualifier
						for each RebateQualifierContractForLocalContractRel
							if (each.ContractRebateQualifier		= PrmContractRebateQualifier)
								invoke Update each
									invoked.NumberOfEligibleItemsToSelect	= LocalLineCount
				Instance Rules
					if (!Contract.IsDistributorContract)
						LocalLineCount													+= 1
					else
						if (DistributorContractLineNonManufacturerContract)
							LocalLineCount												+= 1

		LoadTextSearchForItem is a Set Action  
			restricted
			Parameters
				ParmContractGroup is a ContractGroup
					default label is "ContractGroup"

			Instance Selection
				where (ContractGroup = ParmContractGroup
				and    ItemType.Itemmast)

			Action Rules

				Instance Rules
					include BuildTextIndexes

		SelectItemForTierQualifier is an Instance Action   
			valid when (CanSelectItemForTierQualifier)
			Parameters
				PrmFromContract 			is like Contract 
					default label is "ReportingContract"
				PrmQualifiedOrCompetitiveItem	is Numeric 1 
					default label is "QualifiedOrCompetitiveItem"
					States 
						Qualified               value is 1
						Competitive             value is 2					
			
			Parameter Rules 
			
				PrmQualifiedOrCompetitiveItem
					initial value is 1
					required 
			
			Action Rules
				
				if (TierQualifierItemByManufacturerRel !exists)
					invoke Create TierQualifierItem 
						invoked.ContractGroup									= ContractGroup
						invoked.Contract										= PrmFromContract
						invoked.OriginalContractAndLine.OriginalContract	    = Contract
						invoked.OriginalContractAndLine.OriginalContractLine    = ContractLine
						invoked.ItemNumber                                      = ItemNumber
						invoked.Manufacturer                                    = Manufacturer 
						invoked.ManufacturerNumber								= ManufacturerNumber
						invoked.QualifiedOrCompetitiveItem             	        = PrmQualifiedOrCompetitiveItem

		SelectAllItemsForTierQualifier is a Set Action 
			restricted 
			Parameters 
				PrmContractGroup						is a ContractGroup 
				PrmContract								is a Contract
				PrmSelectedContractNumber				is like Contract 
				PrmQualifiedOrCompetitiveItem           is Numeric 1
				PrmContractTier                         is like ContractTier
				PrmContractTierQualifier                is like ContractTierQualifier

			Instance Selection 
				where (PrmContractGroup 			= ContractGroup 
				and    PrmSelectedContractNumber 	= Contract
				and   (!Contract.IsDistributorContract
				or    (Contract.IsDistributorContract
				and    ManufacturerContract = PrmContract))) 	

			Action Rules 

				Instance Rules 
					LocalManufacturer		= Manufacturer
					LocalManufacturerNumber = ManufacturerNumber
					if (LocalTierQualifierItemByManufacturerRel !exists)
						invoke Create TierQualifierItem 
							invoked.ContractGroup									= PrmContractGroup
							invoked.Contract										= PrmContract
							invoked.OriginalContractAndLine.OriginalContract	    = PrmSelectedContractNumber
							invoked.OriginalContractAndLine.OriginalContractLine    = ContractLine
							invoked.ItemNumber                                      = ItemNumber
							invoked.Manufacturer                                    = Manufacturer 
							invoked.ManufacturerNumber								= ManufacturerNumber
							invoked.QualifiedOrCompetitiveItem                      = PrmQualifiedOrCompetitiveItem
							invoked.ContractTier                                    = PrmContractTier 
							invoked.ContractTierQualifier                           = PrmContractTierQualifier
		
		CreateTierQualifierItem is an Instance Action 
			valid when (CanCreateTierQualifierItem)
			Action Rules 

				invoke Create TierQualifierItem 
					invoked.ContractGroup   								= ContractGroup
					invoked.Contract										= ContextContract 
					invoked.OriginalContractAndLine.OriginalContract	    = Contract
					invoked.OriginalContractAndLine.OriginalContractLine    = ContractLine
					invoked.Manufacturer        							= Manufacturer
					invoked.ManufacturerNumber  							= ManufacturerNumber 
    				invoked.QualifiedOrCompetitiveItem						= 2

		RecreateSpecialServiceKeywords	is a Set Action
			restricted
			Parameters
				ParmContractGroup	is an ItemGroup
					default label is "ContractGroup"

			Parameter Rules
				ParmContractGroup
					required
						"ContractGroupIsRequired"
			Instance Selection
				where  ((ContractGroup	= ParmContractGroup)
				and	   (ItemType.Special
				or		ItemType.Service)
				and    !Contract.StandingPurchaseType
				and    !Contract.ServicePurchaseType
				and    !ContractLineState.Closed
				and    ContractLineState.Active)

			Action Rules
				Instance Rules
					invoke BuildTextIndex
					include BuildTextIndexes

		UploadToIDM is an Instance Action  
			valid when (Picture.ValidForIDMUpload)
			Action Rules
				include IDM.MoveAttachmentsToIDM
					replace AttachmentField   with Picture	
						
									
		MoveAttachmentsToIDM is a Set Action
			restricted
			Instance Selection
				where (Picture.IsLocal)

			Accumulators
				InstanceCount

			Action Rules
				Instance Rules
					increment InstanceCount	

					include IDM.MoveAttachmentsToIDM
						replace AttachmentField   with Picture			

					commit transaction

					if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
						end set action instance loop				

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PurgeContractLineDistributionRel
				invoke Purge PurgePatientChargeItemRel
				invoke Purge PurgeKeywordShadowRel
				invoke Purge PurgeContractLineCommentRel
				invoke Purge PurgeContractLineAttachmentRel
				invoke Purge PurgeContractLineAOCRel
				invoke Purge PurgeMfgContractLinePivotRel
				invoke Purge PurgeContractLineTierCostRel
				invoke Purge PurgeContractLineMemberRel
				invoke Purge PurgeContractRebateQualifierItemRel
				invoke Purge PurgePurchaseOrderAndLineAddOnChargeRel
				invoke Purge PurgeContractLineErrorRel

	StateCycles
		ContractLifeCycle is a StateCycle
			state field is ContractLineState

			Draft is a State

				Update is an Update Action
					valid when (CanUpdate)

					Action Rules
						include UpdateRules
						include UpdateOtherLinesToMatch
					Field Rules

						Quantity
							if (!Contract.StandingPurchaseType
							and old Contract.StandingPurchaseType)
								force default to 0


					Exit Rules
						include UpdateExitRules


				SelectDraftItemForRebate is an Instance Action
					valid when (UpdateableDraftLine)
					Parameters
						PrmContractWithRebate			is Numeric size 15
						PrmContractRebateType			is AlphaUpper size 25
						PrmContractRebateQualifier		is Numeric size 6
					Parameter Rules
						PrmContractWithRebate
							required
						PrmContractRebateType
							required
						PrmContractRebateQualifier
							required
					Action Rules
						LocalContractRebate.ContractGroup			= ContractGroup
						LocalContractRebate.Contract	            = PrmContractWithRebate
						LocalContractRebate.ContractRebateType      = PrmContractRebateType
						initialize LocalContractRebate.ContractRebate
						LocalContractRebate.ContractRebateQualifier = PrmContractRebateQualifier
						constraint (LocalContractRebate.ContractRebate.Active)
							"ContractRebateMustBeActiveToAddRebateQualifierItems"
						if (!RebateQualifierItemRel exists)
							invoke Create ContractRebateQualifierItem
								invoked.ContractGroup									= LocalContractRebate.ContractGroup
								invoked.Contract										= LocalContractRebate.Contract
								invoked.ContractRebateType								= LocalContractRebate.ContractRebateType
								invoked.ContractRebate									= LocalContractRebate.ContractRebate
								invoked.ContractRebateQualifier							= LocalContractRebate.ContractRebateQualifier
								invoked.ContractRebateQualifierItem.RebateContract		= Contract
								invoked.ContractRebateQualifierItem.RebateContractLine	= ContractLine
								if (ServicePurchaseTypeContract)
									invoked.ItemNumber                                  = ItemDescription
								else
								if (ItemNumber entered)
									invoked.ItemNumber									= ItemNumber
								else
								if (Contract.ManufacturerOrDistributor.ManufacturerContract
								and ManufacturerNumber entered
								and CanUseForCostDefaulting = false)
									invoked.ItemNumber									= ManufacturerNumber
								else
									invoked.ItemNumber									= ItemNumber
								invoked.UseThisItemForQualificationPurposes				= true
						else
							invoke Update RebateQualifierItemRel
								invoked.UseThisItemForQualificationPurposes				= true

						for each RebateQualifierContractSpecificRel
							invoke Update each
								invoked.NumberOfItemsSelectedForQualificationPurposes		+= 1
							end for each

				ReleaseContract is an Instance Action
					valid when (Contract.CanReleaseFromContractLine)
					Action Rules
						if (Contract.ContractStatus.Draft)
							invoke Release Draft Contract
						if (Contract.ContractStatus.Addendum)
							invoke Release Addendum Contract
						if (Contract.ContractStatus.Amendment)
							invoke Release Amendment Contract

				ActivateContract is an Instance Action
					valid when (Contract.CanActivateFromContractLine)
					Action Rules
						invoke Activate ReadyToActivate Contract

				TransitionToAmendment is an Instance Action
					restricted
					Action Rules

						make transition to Amendment

				TransitionToActivate is an Instance Action
					restricted
					Action Rules
						make transition to Active

			Active is a State

				TransitionToDraft is an Instance Action
					restricted
					Action Rules
						make transition to Draft

				TransitionToAmendment is an Instance Action
					restricted
					Action Rules

						make transition to Amendment
						if (Contract.ActiveContract)
							invoke CreateAmendment Active Contract

				Update is an Update Action
					valid when (UpdateableActiveLine)
					Local Fields
						PrmContractGroup  is a ContractGroup
						PrmContract       is a Contract

					Action Rules
						include UpdateRules

						if (Contract.ContractType.PurchaseType.Service)
							if ((LifetimeMaximumQuantity changed
							or   BaseCost changed)
							and OpenMatchInvoiceMessageRel exists)
								confirmation required
									"OpenMatchInvoiceMessagesExist.ThisChangeWillCloseTheseMessages.Continue?"

						if (Contract.SetActiveLineToAmendment)
							make transition to Amendment
							if (Contract.ActiveContract
							and !FromSetAction)
								invoke CreateAmendment Active Contract

						if (HasBeenActivated
						and UseCommitments
						and ItemType.Service
						and (BaseCost changed
						or   LifetimeMaximumQuantity changed))
							constraint (NoUnreleasedInvoiceDetailsExist)
								"CannotChangeCommitmentInformationWhenRelatedUnreleasedInvoiceDetailsExist"

						if ((Contract.CreateCommitments.Line
						or   Contract.CreateCommitments.LineSpread)
						and  DistCodeChanged)
							constraint (!HasBeenActivated)
								"CannotChangeAccountInformationAfterTheContractHasBeenActivatedWhenDoingLineCommitments"

						include UpdateOtherLinesToMatch
					Exit Rules
						include UpdateExitRules

						if (!LineErrorsExist
						and CanUseForCostDefaulting
						and !Contract.SetActiveLineToAmendment
						and !ItemType.Service)
							include CreateItemAndVendorItem

						if (Contract.ContractType.PurchaseType.Service)
							if  (LifetimeMaximumAmount changed)
								for each OpenMatchInvoiceMessageRel
									invoke FastUpdate each
										invoked.ApplicationAction = 8 
										invoked.Status = 9

				UpdateInvoiceDetailsFromContractLine is an Update Action    
					valid when (UpdateInvoiceDetailsFromContractLineValid)
					bypass field rules
					default label is "Save"
					Action Rules

						constraint (not ContractLine.ErrorsExist)
    						"ErrorsExistOnContractLine;CannotUseOnInvoice"

						if (!PayablesInvoice.InvoiceType.CreditMemo)
							if (ServiceCode.Amount)
								constraint (DerivedRemainingAmountInUse entered)
									"NoAmountRemainsOnContractLine"
							else
							if (LifetimeMaximumQuantity entered)
						 		constraint (DerivedRemainingQuantityOrdered entered)
						 			"NoQuantityRemainsOnContractLine"

						if (PrmQuantity not entered)
							if (ServiceCode.Amount)
								PrmQuantity = 1
							else
						 		PrmQuantity = DerivedRemainingQuantityOrdered

						if (PrmUnitCost not entered)
							if (ServiceCode.Amount)
								PrmUnitCost = DerivedRemainingAmountInUse
							else
								if (CurrentNetCost != BaseCost)
									PrmUnitCost = CurrentNetCost
								else
									PrmUnitCost = BaseCost

						constraint (PrmQuantity entered)
							"QuantityIsRequired"
						constraint (PrmUnitCost entered)
							"UnitCostIsRequired"

						if (PayablesInvoice.InvoiceType.CreditMemo)
							constraint ((PrmUnitCost < 0) and (PrmQuantity > 0)
							or          (PrmUnitCost > 0) and (PrmQuantity < 0))
							    "CreditMemosRequireEitherACostAdjustment(CostIsLessThanZero)OrQuantityAdjustment(QuantityIsLessThanZero)"

							if (PayablesInvoiceDetailForInvoiceRel exists)
							    if (PayablesInvoiceDetailForInvoiceRel.EnteredUnitCost < 0)
							        constraint (PrmUnitCost < 0)
							            "CannotChangeSignOnUnitCost;MustDeleteAndReAdd"
								else
							        constraint (PrmUnitCost > 0)
							            "CannotChangeSignOnUnitCost;MustDeleteAndReAdd"

							    if (PayablesInvoiceDetailForInvoiceRel.EnteredQuantity < 0)
							        constraint (PrmQuantity < 0)
							            "CannotChangeSignOnQuantity;MustDeleteAndReAdd"
								else
							        constraint (PrmQuantity > 0)
							            "CannotChangeSignOnQuantity;MustDeleteAndReAdd"

						if (PayablesInvoiceDetailForInvoiceRel exists)
							invoke Update PayablesInvoiceDetailForInvoiceRel
								invoked.EnteredQuantity						= PrmQuantity
								invoked.EnteredUnitCost						= PrmUnitCost
								if (IsHSNSACCodeEnabled)
									invoked.HSNSACCode						= HSNSACCode
						else
							invoke CreateFromContractLine PayablesInvoiceDetail
								invoked.Company								= PayablesCompany
								invoked.Vendor								= Contract.Vendor
								invoked.PayablesInvoice						= PayablesInvoice
								invoked.Contract							= Contract
								invoked.ContractLine						= ContractLine
								invoked.ItemDescription						= ItemDescription
								invoked.ItemType							= "S"
								invoked.CommodityCode						= CommodityCode
								invoked.VendorItem							= blank
								invoked.RecordSource						= "LM"
								invoked.EnteredUOM							= UOM.UnitOfMeasure	
								invoked.EnteredUOMMultiplier				= 1				
								invoked.TransactionNumberOfDecimals			= PayablesInvoice.InvoiceCurrency.NumberOfDecimals
								invoked.Location							= blank
								invoked.ItemGTIN							= blank
								if (ServiceCode.Amount)
									invoked.VendorPriceUOM					= blank
								else
									invoked.VendorPriceUOM					= UOM.UnitOfMeasure		
								invoked.VendorPriceUOMMultiplier			= 1				
								invoked.VendorBuyUOM						= UOM.UnitOfMeasure		
								invoked.VendorBuyUOMMultiplier				= 1				
								invoked.DistributionDate					= PayablesInvoice.DistributionDate
								invoked.EnteredQuantity						= PrmQuantity
								invoked.BuyUOMMatchedQuantity				= PrmQuantity
								invoked.MatchedQuantity						= PrmQuantity
								invoked.EnteredUnitCost						= PrmUnitCost
								invoked.MatchUnitCost						= PrmUnitCost
								if (IsHSNSACCodeEnabled)
									invoked.HSNSACCode						= HSNSACCode
								if (TaxCode entered
								and TaxUsageCode entered)
									invoked.TaxUsageCode					= TaxUsageCode

								if (initiating action = "CreateDetailFromContract")
									invoked.BypassInvoiceErrorChecking		= true

				CreateEventWorksheet is an Instance Action
		 			default label is "SelectLinesForEvent"
		 			Action Rules
		 				constraint (!InContractWorksheet)
		 					"ContractAlreadySelectedForEventCreation"
						if (ContractEventWorksheetRel exists)
							constraint (ContractLineDistExists = first ContractEventWorksheetRel.ContractLine.ContractLineDistExists)
								"CannotCombineContractLinesThatHaveDistributionsWithLinesThatDoNotHaveDistributions;NeedToEitherCreateSeparateEventsOrMakeTheLineDistributionsTheSame"
		 				invoke Create ContractEventWorksheet
		 					invoked.Actor					= actor
		 					invoked.ContractGroup			= ContractGroup
		 					invoked.Contract				= Contract
		 					invoked.ContractLine			= ContractLine
		 					invoked.Item					= ItemNumber
		 					invoked.ItemDescription			= ItemDescription
		 					if (ItemType.Itemmast)
		 						invoked.ItemType				= "N"
		 					else
		 						invoked.ItemType				= ItemType
					 		invoked.ServiceCode				= ServiceCode
					 		invoked.UOM						= UOM.UnitOfMeasure
					 		if (!ItemType.Service)
					 			invoked.ManufacturerInformation.Manufacturer            = Manufacturer
					 			invoked.ManufacturerInformation.ManufacturerNumber      = ManufacturerNumber
					 		invoked.PurchaseType			= Contract.SourcingOutputType
					 		invoked.CommodityCode			= CommodityCode
					 		if (ServiceCode = "A")
					 			invoked.AmountServiceSequence   = ContractAndLine
					 		fill in fields from ContractLine
					Exit Rules
					 	if (!Contract.HasEligibleContractLineForEvent)
					 		invoke FastUpdateWithoutEdits Contract
					 			invoked.UpdateRemoveFromExpireList = true


				CreateEventWorksheetByContract is a Set Action
					default label is "SelectContractForEvent"
					run in foreground
					Parameters
						ParameterContractGroup	is a ContractGroup
						ParameterContract		is a Contract

					Parameter Rules
						ParameterContractGroup
							required
						ParameterContract
							required
							constraint (ParameterContract.HasEligibleContractLineForEvent)
								"SelectedContractDoesNotHaveEligibleLinesForEventCreation"

					Instance Selection
						where (ContractGroup = ParameterContractGroup
						and    Contract = ParameterContract
						and    EligibleContractLineForEvent)

					Action Rules

						Instance Rules

							if (ContractEventWorksheetRel exists)
								constraint (ContractLineDistExists = first ContractEventWorksheetRel.ContractLine.ContractLineDistExists)
									"CannotCombineContractLinesThatHaveDistributionsWithLinesThatDoNotHaveDistributions;NeedToEitherCreateSeparateEventsOrMakeTheLineDistributionsTheSame"

							invoke Create ContractEventWorksheet
								fill in fields from ContractLine
								invoked.Actor										= actor
								invoked.ContractGroup								= ContractGroup
								invoked.Contract									= Contract
								invoked.ContractLine								= ContractLine
								invoked.PurchaseType								= Contract.SourcingOutputType
		 						invoked.Item										= ItemNumber
		 						invoked.ItemDescription								= ItemDescription
		 						if (ItemType.Itemmast)
		 							invoked.ItemType								= "N"
		 						else
		 							invoked.ItemType								= ItemType
						 		invoked.ServiceCode									= ServiceCode
						 		invoked.UOM											= UOM.UnitOfMeasure
						 		if (!ItemType.Service)
						 			invoked.ManufacturerInformation.Manufacturer        = Manufacturer
						 			invoked.ManufacturerInformation.ManufacturerNumber  = ManufacturerNumber
						 		invoked.CommodityCode								= CommodityCode
						 		if (ServiceCode = "A")
					 				invoked.AmountServiceSequence   				= ContractAndLine

				SelectActiveItemForRebate is an Instance Action
					valid when (ContractLineState.Active)
					Parameters
						PrmContractWithRebate			is Numeric size 15
						PrmContractRebateType			is AlphaUpper size 25
						PrmContractRebateQualifier		is Numeric size 6
					Parameter Rules
						PrmContractWithRebate
							required
						PrmContractRebateType
							required
						PrmContractRebateQualifier
							required
					Action Rules
						LocalContractRebate.ContractGroup			= ContractGroup
						LocalContractRebate.Contract	            = PrmContractWithRebate
						LocalContractRebate.ContractRebateType      = PrmContractRebateType
						initialize LocalContractRebate.ContractRebate
						LocalContractRebate.ContractRebateQualifier = PrmContractRebateQualifier
						constraint (LocalContractRebate.ContractRebate.Active)
							"ContractRebateMustBeActiveToAddRebateQualifierItems"
						if (!RebateQualifierItemRel exists)
							invoke Create ContractRebateQualifierItem
								invoked.ContractGroup									= LocalContractRebate.ContractGroup
								invoked.Contract										= LocalContractRebate.Contract
								invoked.ContractRebateType								= LocalContractRebate.ContractRebateType
								invoked.ContractRebate									= LocalContractRebate.ContractRebate
								invoked.ContractRebateQualifier							= LocalContractRebate.ContractRebateQualifier
								invoked.ContractRebateQualifierItem.RebateContract		= Contract
								invoked.ContractRebateQualifierItem.RebateContractLine	= ContractLine
								if (ServicePurchaseTypeContract)
									invoked.ItemNumber                                  = ItemDescription
								else
								if (ItemNumber entered)
									invoked.ItemNumber									= ItemNumber
								else
								if (Contract.ManufacturerOrDistributor.ManufacturerContract
								and ManufacturerNumber entered
								and CanUseForCostDefaulting = false)
									invoked.ItemNumber									= ManufacturerNumber
								else
									invoked.ItemNumber									= ItemNumber
								invoked.UseThisItemForQualificationPurposes				= true
						else
							invoke Update RebateQualifierItemRel
								invoked.UseThisItemForQualificationPurposes				= true

						for each RebateQualifierContractSpecificRel
							invoke Update each
								invoked.NumberOfItemsSelectedForQualificationPurposes		+= 1
							end for each

			Amendment is a State

				Update is an Update Action
					valid when (CanUpdateAmendment)

					Action Rules
						include UpdateRules

						if (Contract.ContractType.PurchaseType.Service)
							if ((LifetimeMaximumQuantity changed
							or   BaseCost changed)
							and OpenMatchInvoiceMessageRel exists)
								confirmation required
									"OpenMatchInvoiceMessagesExist.ThisChangeWillCloseTheseMessages.Continue?"

						if (HasBeenActivated
						and UseCommitments
						and ItemType.Service
						and (BaseCost changed
						or   LifetimeMaximumQuantity changed))
							constraint (NoUnreleasedInvoiceDetailsExist)
								"CannotChangeCommitmentInformationWhenRelatedUnreleasedInvoiceDetailsExist"

						if ((Contract.CreateCommitments.Line
						or   Contract.CreateCommitments.LineSpread)
						and  DistCodeChanged)
							constraint (!HasBeenActivated)
								"CannotChangeAccountInformationAfterTheContractHasBeenInterfacedWhenDoingLineCommitments"

						include UpdateOtherLinesToMatch
					Exit Rules

						include UpdateExitRules

						if (Contract.ContractType.PurchaseType.Service)
							if  (LifetimeMaximumAmount changed)
								for each OpenMatchInvoiceMessageRel
									invoke FastUpdate each
										invoked.ApplicationAction = 8 
										invoked.Status = 9

				SelectAmendmentItemForRebate is an Instance Action
					valid when (ContractLineState.Amendment)
					Parameters
						PrmContractWithRebate			is Numeric size 15
						PrmContractRebateType			is AlphaUpper size 25
						PrmContractRebateQualifier		is Numeric size 6
					Parameter Rules
						PrmContractWithRebate
							required
						PrmContractRebateType
							required
						PrmContractRebateQualifier
							required
					Action Rules
						LocalContractRebate.ContractGroup			= ContractGroup
						LocalContractRebate.Contract	            = PrmContractWithRebate
						LocalContractRebate.ContractRebateType      = PrmContractRebateType
						initialize LocalContractRebate.ContractRebate
						LocalContractRebate.ContractRebateQualifier = PrmContractRebateQualifier
						constraint (LocalContractRebate.ContractRebate.Active)
							"ContractRebateMustBeActiveToAddRebateQualifierItems"
						if (!RebateQualifierItemRel exists)
							invoke Create ContractRebateQualifierItem
								invoked.ContractGroup									= LocalContractRebate.ContractGroup
								invoked.Contract										= LocalContractRebate.Contract
								invoked.ContractRebateType								= LocalContractRebate.ContractRebateType
								invoked.ContractRebate									= LocalContractRebate.ContractRebate
								invoked.ContractRebateQualifier							= LocalContractRebate.ContractRebateQualifier
								invoked.ContractRebateQualifierItem.RebateContract		= Contract
								invoked.ContractRebateQualifierItem.RebateContractLine	= ContractLine
								if (ServicePurchaseTypeContract)
									invoked.ItemNumber                                  = ItemDescription
								else
								if (ItemNumber entered)
									invoked.ItemNumber									= ItemNumber
								else
								if (Contract.ManufacturerOrDistributor.ManufacturerContract
								and ManufacturerNumber entered
								and CanUseForCostDefaulting = false)
									invoked.ItemNumber									= ManufacturerNumber
								else
									invoked.ItemNumber									= ItemNumber
								invoked.UseThisItemForQualificationPurposes				= true
						else
							invoke Update RebateQualifierItemRel
								invoked.UseThisItemForQualificationPurposes				= true

						for each RebateQualifierContractSpecificRel
							invoke Update each
								invoked.NumberOfItemsSelectedForQualificationPurposes		+= 1
							end for each

				ReleaseContract is an Instance Action
					valid when (Contract.CanReleaseFromContractLine)
					Action Rules
						if (Contract.ContractStatus.Draft)
							invoke Release Draft Contract
						if (Contract.ContractStatus.Addendum)
							invoke Release Addendum Contract
						if (Contract.ContractStatus.Amendment)
							invoke Release Amendment Contract

				ActivateContract is an Instance Action
					valid when (Contract.CanActivateFromContractLine)
					Action Rules
						invoke Activate ReadyToActivate Contract

				TransitionToActivate is an Instance Action
					restricted
					Action Rules
						make transition to Active

			Inactive is a State

			Closed is a State
FileCreationLogic.ContractLine is a BusinessClass

	Persistent Fields
	
	Local Fields

		LocalFinanceEnterpriseGroup is like FinanceEnterpriseGroup
		LocalFileCreationSetup		is like FileCreationSetup
					
	Relations

		FileCreationRecordNotProcessedRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 1
				related.Key1					= LocalContractGroup
				related.Key2					= LocalContract

		FileCreationRecordErrorRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 2
				related.Key1					= LocalContractGroup
				related.Key2					= LocalContract
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"ContractLine_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3

			Local Fields
				InContractGroup					is Boolean
				LocalContractGroupSelection		is a Contract group in subject FileCreationContract

			Instance Selection
				where (ContractGroup.BusinessGroup.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      Contract % PrmNumberOfRunGroups = PrmRunGroup)
				and	   update stamp > BeginTimeStamp
				and	   update stamp <= EndTimeStamp)

			Action Rules
				Instance Rules
					LocalFinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
					LocalFileCreationSetup	= FileCreationSetupPrm
					LocalContractGroup	= ContractGroup
					LocalContract		= Contract
					if (FileCreationRecordNotProcessedRel not exist
					and	FileCreationRecordErrorRel not exist)	
						LocalContractGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (LocalContractGroupSelection entered)
							InContractGroup = false
							if (Contract within LocalContractGroupSelection)
								InContractGroup = true

						if (LocalContractGroupSelection not entered
						or	InContractGroup)											
							invoke Create FileCreationRecord
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
								invoked.FileCreationSetup	= FileCreationSetupPrm
								invoked.Key1 				= ContractGroup
								invoked.Key2				= Contract
								invoked.SystemTimeStamp		= EndTimeStamp
								invoked.EffectiveDate		= system current corporate date
								invoked.Status				= 1
